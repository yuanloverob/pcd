{
  "cve_id": "CVE-2017-1000393",
  "cve_desc": "Jenkins 2.73.1 and earlier, 2.83 and earlier users with permission to create or configure agents in Jenkins could configure a launch method called 'Launch agent via execution of command on master'. This allowed them to run arbitrary shell commands on the master node whenever the agent was supposed to be launched. Configuration of this launch method now requires the Run Scripts permission typically only granted to administrators.",
  "repo": "jenkinsci/jenkins",
  "patch_hash": "d7ea3f40efedd50541a57b943d5f7bbed046d091",
  "patch_info": {
    "commit_hash": "d7ea3f40efedd50541a57b943d5f7bbed046d091",
    "repo": "jenkinsci/jenkins",
    "commit_url": "https://github.com/jenkinsci/jenkins/commit/d7ea3f40efedd50541a57b943d5f7bbed046d091",
    "files": [
      "core/src/main/java/hudson/slaves/CommandConnector.java",
      "core/src/main/java/hudson/slaves/CommandLauncher.java",
      "core/src/main/resources/hudson/slaves/Messages.properties",
      "test/src/test/java/hudson/model/ProjectTest.java",
      "test/src/test/java/hudson/slaves/CommandLauncher2Test.java"
    ],
    "message": "[SECURITY-478] Require RUN_SCRIPTS before configuring CommandLauncher or CommandConnector.",
    "before_after_code_files": [
      "core/src/main/java/hudson/slaves/CommandConnector.java||core/src/main/java/hudson/slaves/CommandConnector.java",
      "core/src/main/java/hudson/slaves/CommandLauncher.java||core/src/main/java/hudson/slaves/CommandLauncher.java",
      "core/src/main/resources/hudson/slaves/Messages.properties||core/src/main/resources/hudson/slaves/Messages.properties",
      "test/src/test/java/hudson/model/ProjectTest.java||test/src/test/java/hudson/model/ProjectTest.java",
      "test/src/test/java/hudson/slaves/CommandLauncher2Test.java||test/src/test/java/hudson/slaves/CommandLauncher2Test.java"
    ]
  },
  "patch_diff": {
    "core/src/main/java/hudson/slaves/CommandConnector.java||core/src/main/java/hudson/slaves/CommandConnector.java": [
      "File: core/src/main/java/hudson/slaves/CommandConnector.java -> core/src/main/java/hudson/slaves/CommandConnector.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: import hudson.EnvVars;",
      "27: import hudson.Extension;",
      "28: import hudson.model.TaskListener;",
      "29: import org.jenkinsci.Symbol;",
      "30: import org.kohsuke.stapler.DataBoundConstructor;",
      "32: import java.io.IOException;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: import hudson.Util;",
      "30: import hudson.util.FormValidation;",
      "35: import jenkins.model.Jenkins;",
      "36: import org.kohsuke.stapler.QueryParameter;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "42:     @DataBoundConstructor",
      "43:     public CommandConnector(String command) {",
      "44:         this.command = command;",
      "45:     }",
      "47:     @Override",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "49:         Jenkins.getInstance().checkPermission(Jenkins.RUN_SCRIPTS);",
      "50:     }",
      "52:     private Object readResolve() {",
      "53:         Jenkins.getInstance().checkPermission(Jenkins.RUN_SCRIPTS);",
      "54:         return this;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "55:         public String getDisplayName() {",
      "56:             return Messages.CommandLauncher_displayName();",
      "57:         }",
      "58:     }",
      "59: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "69:         public FormValidation doCheckCommand(@QueryParameter String value) {",
      "70:             if (!Jenkins.getInstance().hasPermission(Jenkins.RUN_SCRIPTS)) {",
      "71:                 return FormValidation.warning(Messages.CommandLauncher_cannot_be_configured_by_non_administrato());",
      "72:             }",
      "73:             if (Util.fixEmptyAndTrim(value) == null) {",
      "74:                 return FormValidation.error(Messages.CommandLauncher_NoLaunchCommand());",
      "75:             } else {",
      "76:                 return FormValidation.ok();",
      "77:             }",
      "78:         }",
      "",
      "---------------"
    ],
    "core/src/main/java/hudson/slaves/CommandLauncher.java||core/src/main/java/hudson/slaves/CommandLauncher.java": [
      "File: core/src/main/java/hudson/slaves/CommandLauncher.java -> core/src/main/java/hudson/slaves/CommandLauncher.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "33: import jenkins.model.Jenkins;",
      "34: import hudson.model.TaskListener;",
      "35: import hudson.remoting.Channel;",
      "36: import hudson.util.StreamCopyThread;",
      "37: import hudson.util.FormValidation;",
      "38: import hudson.util.ProcessTree;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "36: import hudson.security.ACL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "74:     public CommandLauncher(String command, EnvVars env) {",
      "75:      this.agentCommand = command;",
      "76:      this.env = env;",
      "77:     }",
      "79:     public String getCommand() {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "78:         Jenkins.getInstance().checkPermission(Jenkins.RUN_SCRIPTS);",
      "79:     }",
      "81:     private Object readResolve() {",
      "82:         Jenkins.getInstance().checkPermission(Jenkins.RUN_SCRIPTS);",
      "83:         return this;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "191:         }",
      "193:         public FormValidation doCheckCommand(@QueryParameter String value) {",
      "194:             if(Util.fixEmptyAndTrim(value)==null)",
      "195:                 return FormValidation.error(Messages.CommandLauncher_NoLaunchCommand());",
      "196:             else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "201:             if (!Jenkins.getInstance().hasPermission(Jenkins.RUN_SCRIPTS)) {",
      "202:                 return FormValidation.warning(Messages.CommandLauncher_cannot_be_configured_by_non_administrato());",
      "203:             }",
      "",
      "---------------"
    ],
    "core/src/main/resources/hudson/slaves/Messages.properties||core/src/main/resources/hudson/slaves/Messages.properties": [
      "File: core/src/main/resources/hudson/slaves/Messages.properties -> core/src/main/resources/hudson/slaves/Messages.properties",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: JNLPLauncher.displayName=Launch agent via Java Web Start",
      "28: ComputerLauncher.unexpectedError=Unexpected error in launching an agent. This is probably a bug in Jenkins",
      "29: ComputerLauncher.abortedLaunch=Launching agent process aborted.",
      "30: CommandLauncher.NoLaunchCommand=No launch command specified",
      "31: ConnectionActivityMonitor.OfflineCause=Repeated ping attempts failed",
      "32: DumbSlave.displayName=Permanent Agent",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "30: CommandLauncher.cannot_be_configured_by_non_administrato=cannot be configured by non-administrators",
      "",
      "---------------"
    ],
    "test/src/test/java/hudson/model/ProjectTest.java||test/src/test/java/hudson/model/ProjectTest.java": [
      "File: test/src/test/java/hudson/model/ProjectTest.java -> test/src/test/java/hudson/model/ProjectTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: import com.gargoylesoftware.htmlunit.WebRequest;",
      "28: import hudson.model.queue.QueueTaskFuture;",
      "29: import hudson.security.AccessDeniedException2;",
      "31: import hudson.security.HudsonPrivateSecurityRealm;",
      "32: import hudson.security.GlobalMatrixAuthorizationStrategy;",
      "",
      "[Removed Lines]",
      "30: import org.acegisecurity.context.SecurityContextHolder;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "67: import hudson.EnvVars;",
      "68: import hudson.model.labels.LabelAtom;",
      "69: import hudson.scm.SCMDescriptor;",
      "70: import hudson.slaves.Cloud;",
      "71: import hudson.slaves.DumbSlave;",
      "72: import hudson.slaves.NodeProvisioner;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "69: import hudson.security.ACL;",
      "70: import hudson.security.ACLContext;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "537:         HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false);",
      "538:         j.jenkins.setSecurityRealm(realm);",
      "539:         User user = realm.createAccount(\"John Smith\", \"password\");",
      "542:             project.doCancelQueue(null, null);",
      "543:             fail(\"User should not have permission to build project\");",
      "544:         }",
      "",
      "[Removed Lines]",
      "540:         SecurityContextHolder.getContext().setAuthentication(user.impersonate());",
      "541:         try{",
      "",
      "[Added Lines]",
      "541:         try (ACLContext as = ACL.as(user)) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "558:         HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false);",
      "559:         j.jenkins.setSecurityRealm(realm);",
      "560:         User user = realm.createAccount(\"John Smith\", \"password\");",
      "563:             project.doDoDelete(null, null);",
      "564:             fail(\"User should not have permission to build project\");",
      "565:         }",
      "",
      "[Removed Lines]",
      "561:         SecurityContextHolder.getContext().setAuthentication(user.impersonate());",
      "562:         try{",
      "",
      "[Added Lines]",
      "561:         try (ACLContext as = ACL.as(user)) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "590:         HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false);",
      "591:         j.jenkins.setSecurityRealm(realm);",
      "592:         User user = realm.createAccount(\"John Smith\", \"password\");",
      "595:             project.doDoWipeOutWorkspace();",
      "596:             fail(\"User should not have permission to build project\");",
      "597:         }",
      "",
      "[Removed Lines]",
      "593:         SecurityContextHolder.getContext().setAuthentication(user.impersonate());",
      "594:         try{",
      "",
      "[Added Lines]",
      "592:         try (ACLContext as = ACL.as(user)) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "624:         HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false);",
      "625:         j.jenkins.setSecurityRealm(realm);",
      "626:         User user = realm.createAccount(\"John Smith\", \"password\");",
      "629:             project.doDisable();",
      "630:             fail(\"User should not have permission to build project\");",
      "631:         }",
      "",
      "[Removed Lines]",
      "627:         SecurityContextHolder.getContext().setAuthentication(user.impersonate());",
      "628:         try{",
      "",
      "[Added Lines]",
      "625:         try (ACLContext as = ACL.as(user)) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "655:         HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false);",
      "656:         j.jenkins.setSecurityRealm(realm);",
      "657:         User user = realm.createAccount(\"John Smith\", \"password\");",
      "661:             project.doEnable();",
      "662:             fail(\"User should not have permission to build project\");",
      "663:         }",
      "",
      "[Removed Lines]",
      "658:         SecurityContextHolder.getContext().setAuthentication(user.impersonate());",
      "659:         project.disable();",
      "660:         try{",
      "",
      "[Added Lines]",
      "655:         try (ACLContext as = ACL.as(user)) {",
      "656:             project.disable();",
      "657:         }",
      "658:         try (ACLContext as = ACL.as(user)) {",
      "",
      "---------------"
    ],
    "test/src/test/java/hudson/slaves/CommandLauncher2Test.java||test/src/test/java/hudson/slaves/CommandLauncher2Test.java": [
      "File: test/src/test/java/hudson/slaves/CommandLauncher2Test.java -> test/src/test/java/hudson/slaves/CommandLauncher2Test.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25: package hudson.slaves;",
      "27: import com.gargoylesoftware.htmlunit.FailingHttpStatusCodeException;",
      "28: import com.gargoylesoftware.htmlunit.HttpMethod;",
      "29: import com.gargoylesoftware.htmlunit.WebRequest;",
      "30: import com.gargoylesoftware.htmlunit.html.HtmlForm;",
      "31: import com.gargoylesoftware.htmlunit.html.HtmlTextInput;",
      "32: import hudson.cli.CLICommand;",
      "33: import hudson.cli.CLICommandInvoker;",
      "34: import hudson.cli.UpdateNodeCommand;",
      "35: import hudson.model.Computer;",
      "36: import hudson.model.User;",
      "37: import java.net.HttpURLConnection;",
      "38: import jenkins.model.Jenkins;",
      "39: import org.apache.tools.ant.filters.StringInputStream;",
      "40: import static org.hamcrest.Matchers.containsString;",
      "41: import org.junit.Test;",
      "42: import static org.junit.Assert.*;",
      "43: import org.junit.Rule;",
      "44: import org.junit.runners.model.Statement;",
      "45: import org.jvnet.hudson.test.Issue;",
      "46: import org.jvnet.hudson.test.JenkinsRule;",
      "47: import org.jvnet.hudson.test.MockAuthorizationStrategy;",
      "48: import org.jvnet.hudson.test.RestartableJenkinsRule;",
      "50: public class CommandLauncher2Test {",
      "52:     @Rule",
      "53:     public RestartableJenkinsRule rr = new RestartableJenkinsRule();",
      "55:     @Issue(\"SECURITY-478\")",
      "56:     @Test",
      "57:     public void requireRunScripts() throws Exception {",
      "58:         rr.addStep(new Statement() {",
      "59:             @Override",
      "60:             public void evaluate() throws Throwable {",
      "61:                 rr.j.jenkins.setSecurityRealm(rr.j.createDummySecurityRealm());",
      "62:                 rr.j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().",
      "63:                     grant(Jenkins.ADMINISTER).everywhere().to(\"admin\").",
      "64:                     grant(Jenkins.READ, Computer.CONFIGURE).everywhere().to(\"dev\"));",
      "65:                 DumbSlave s = new DumbSlave(\"s\", \"/\", new CommandLauncher(\"echo unconfigured\"));",
      "66:                 rr.j.jenkins.addNode(s);",
      "68:                 JenkinsRule.WebClient wc = rr.j.createWebClient().login(\"admin\");",
      "69:                 HtmlForm form = wc.getPage(s, \"configure\").getFormByName(\"config\");",
      "70:                 HtmlTextInput input = form.getInputByName(\"_.command\");",
      "71:                 assertEquals(\"echo unconfigured\", input.getText());",
      "72:                 input.setText(\"echo configured by GUI\");",
      "73:                 rr.j.submit(form);",
      "74:                 s = (DumbSlave) rr.j.jenkins.getNode(\"s\");",
      "75:                 assertEquals(\"echo configured by GUI\", ((CommandLauncher) s.getLauncher()).getCommand());",
      "77:                 String configDotXml = s.toComputer().getUrl() + \"config.xml\";",
      "78:                 String xml = wc.goTo(configDotXml, \"application/xml\").getWebResponse().getContentAsString();",
      "79:                 assertThat(xml, containsString(\"echo configured by GUI\"));",
      "80:                 WebRequest req = new WebRequest(wc.createCrumbedUrl(configDotXml), HttpMethod.POST);",
      "81:                 req.setEncodingType(null);",
      "82:                 req.setRequestBody(xml.replace(\"echo configured by GUI\", \"echo configured by REST\"));",
      "83:                 wc.getPage(req);",
      "84:                 s = (DumbSlave) rr.j.jenkins.getNode(\"s\");",
      "85:                 assertEquals(\"echo configured by REST\", ((CommandLauncher) s.getLauncher()).getCommand());",
      "87:                 CLICommand cmd = new UpdateNodeCommand();",
      "88:                 cmd.setTransportAuth(User.get(\"admin\").impersonate());",
      "89:                 assertThat(new CLICommandInvoker(rr.j, cmd).withStdin(new StringInputStream(xml.replace(\"echo configured by GUI\", \"echo configured by CLI\"))).invokeWithArgs(\"s\"), CLICommandInvoker.Matcher.succeededSilently());",
      "90:                 s = (DumbSlave) rr.j.jenkins.getNode(\"s\");",
      "91:                 assertEquals(\"echo configured by CLI\", ((CommandLauncher) s.getLauncher()).getCommand());",
      "93:                 s.setLauncher(new CommandLauncher(\"echo configured by admin\"));",
      "94:                 wc = rr.j.createWebClient().login(\"dev\");",
      "95:                 form = wc.getPage(s, \"configure\").getFormByName(\"config\");",
      "96:                 input = form.getInputByName(\"_.command\");",
      "97:                 assertEquals(\"echo configured by admin\", input.getText());",
      "98:                 input.setText(\"echo ATTACK\");",
      "99:                 try {",
      "100:                     rr.j.submit(form);",
      "101:                     fail();",
      "102:                 } catch (FailingHttpStatusCodeException x) {",
      "103:                     assertEquals(\"403 would be more natural but Descriptor.newInstance wraps AccessDeniedException2 in Error\", 500, x.getStatusCode());",
      "104:                 }",
      "105:                 s = (DumbSlave) rr.j.jenkins.getNode(\"s\");",
      "106:                 assertEquals(\"echo configured by admin\", ((CommandLauncher) s.getLauncher()).getCommand());",
      "108:                 req = new WebRequest(wc.createCrumbedUrl(configDotXml), HttpMethod.POST);",
      "109:                 req.setEncodingType(null);",
      "110:                 req.setRequestBody(xml.replace(\"echo configured by GUI\", \"echo ATTACK\"));",
      "111:                 try {",
      "112:                     wc.getPage(req);",
      "113:                 } catch (FailingHttpStatusCodeException x) {",
      "114:                     assertEquals(HttpURLConnection.HTTP_FORBIDDEN, x.getStatusCode());",
      "115:                 }",
      "116:                 s = (DumbSlave) rr.j.jenkins.getNode(\"s\");",
      "117:                 assertNotEquals(CommandLauncher.class, s.getLauncher().getClass()); // currently seems to reset it to JNLPLauncher, whatever",
      "118:                 s.setLauncher(new CommandLauncher(\"echo configured by admin\"));",
      "120:                 cmd = new UpdateNodeCommand();",
      "121:                 cmd.setTransportAuth(User.get(\"dev\").impersonate());",
      "122:                 assertThat(new CLICommandInvoker(rr.j, cmd).withStdin(new StringInputStream(xml.replace(\"echo configured by GUI\", \"echo ATTACK\"))).invokeWithArgs(\"s\"),",
      "123:                     CLICommandInvoker.Matcher./* gets swallowed by RobustReflectionConverter, hmm*/succeededSilently());",
      "124:                 s = (DumbSlave) rr.j.jenkins.getNode(\"s\");",
      "125:                 assertNotEquals(CommandLauncher.class, s.getLauncher().getClass());",
      "127:                 s.setLauncher(new CommandLauncher(\"echo configured by admin\"));",
      "128:                 s.save();",
      "129:             }",
      "130:         });",
      "131:         rr.addStep(new Statement() {",
      "132:             @Override",
      "133:             public void evaluate() throws Throwable {",
      "134:                 DumbSlave s = (DumbSlave) rr.j.jenkins.getNode(\"s\");",
      "135:                 assertEquals(\"echo configured by admin\", ((CommandLauncher) s.getLauncher()).getCommand());",
      "136:             }",
      "137:         });",
      "138:     }",
      "140: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "67f68c181033cbabf2075769e0f846f58c226c08",
      "candidate_info": {
        "commit_hash": "67f68c181033cbabf2075769e0f846f58c226c08",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/67f68c181033cbabf2075769e0f846f58c226c08",
        "files": [
          "test/src/test/java/hudson/slaves/CommandLauncher2Test.java"
        ],
        "message": "[SECURITY-478] Strengthening test.",
        "before_after_code_files": [
          "test/src/test/java/hudson/slaves/CommandLauncher2Test.java||test/src/test/java/hudson/slaves/CommandLauncher2Test.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/src/test/java/hudson/slaves/CommandLauncher2Test.java||test/src/test/java/hudson/slaves/CommandLauncher2Test.java"
          ],
          "candidate": [
            "test/src/test/java/hudson/slaves/CommandLauncher2Test.java||test/src/test/java/hudson/slaves/CommandLauncher2Test.java"
          ]
        }
      },
      "candidate_diff": {
        "test/src/test/java/hudson/slaves/CommandLauncher2Test.java||test/src/test/java/hudson/slaves/CommandLauncher2Test.java": [
          "File: test/src/test/java/hudson/slaves/CommandLauncher2Test.java -> test/src/test/java/hudson/slaves/CommandLauncher2Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: import com.gargoylesoftware.htmlunit.WebRequest;",
          "30: import com.gargoylesoftware.htmlunit.html.HtmlForm;",
          "31: import com.gargoylesoftware.htmlunit.html.HtmlTextInput;",
          "32: import hudson.cli.CLICommand;",
          "33: import hudson.cli.CLICommandInvoker;",
          "34: import hudson.cli.UpdateNodeCommand;",
          "35: import hudson.model.Computer;",
          "36: import hudson.model.User;",
          "37: import java.net.HttpURLConnection;",
          "38: import jenkins.model.Jenkins;",
          "39: import org.apache.tools.ant.filters.StringInputStream;",
          "41: import org.junit.Test;",
          "42: import static org.junit.Assert.*;",
          "43: import org.junit.Rule;",
          "",
          "[Removed Lines]",
          "40: import static org.hamcrest.Matchers.containsString;",
          "",
          "[Added Lines]",
          "32: import hudson.XmlFile;",
          "38: import java.io.File;",
          "39: import java.io.IOException;",
          "41: import javax.annotation.CheckForNull;",
          "44: import static org.hamcrest.Matchers.*;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:                 rr.j.submit(form);",
          "74:                 s = (DumbSlave) rr.j.jenkins.getNode(\"s\");",
          "75:                 assertEquals(\"echo configured by GUI\", ((CommandLauncher) s.getLauncher()).getCommand());",
          "77:                 String configDotXml = s.toComputer().getUrl() + \"config.xml\";",
          "78:                 String xml = wc.goTo(configDotXml, \"application/xml\").getWebResponse().getContentAsString();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:                 assertSerialForm(s, \"echo configured by GUI\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83:                 wc.getPage(req);",
          "84:                 s = (DumbSlave) rr.j.jenkins.getNode(\"s\");",
          "85:                 assertEquals(\"echo configured by REST\", ((CommandLauncher) s.getLauncher()).getCommand());",
          "87:                 CLICommand cmd = new UpdateNodeCommand();",
          "88:                 cmd.setTransportAuth(User.get(\"admin\").impersonate());",
          "89:                 assertThat(new CLICommandInvoker(rr.j, cmd).withStdin(new StringInputStream(xml.replace(\"echo configured by GUI\", \"echo configured by CLI\"))).invokeWithArgs(\"s\"), CLICommandInvoker.Matcher.succeededSilently());",
          "90:                 s = (DumbSlave) rr.j.jenkins.getNode(\"s\");",
          "91:                 assertEquals(\"echo configured by CLI\", ((CommandLauncher) s.getLauncher()).getCommand());",
          "93:                 s.setLauncher(new CommandLauncher(\"echo configured by admin\"));",
          "94:                 wc = rr.j.createWebClient().login(\"dev\");",
          "95:                 form = wc.getPage(s, \"configure\").getFormByName(\"config\");",
          "96:                 input = form.getInputByName(\"_.command\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91:                 assertSerialForm(s, \"echo configured by REST\");",
          "98:                 assertSerialForm(s, \"echo configured by CLI\");",
          "101:                 s.save();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "104:                 }",
          "105:                 s = (DumbSlave) rr.j.jenkins.getNode(\"s\");",
          "106:                 assertEquals(\"echo configured by admin\", ((CommandLauncher) s.getLauncher()).getCommand());",
          "108:                 req = new WebRequest(wc.createCrumbedUrl(configDotXml), HttpMethod.POST);",
          "109:                 req.setEncodingType(null);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115:                 assertSerialForm(s, \"echo configured by admin\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "115:                 }",
          "116:                 s = (DumbSlave) rr.j.jenkins.getNode(\"s\");",
          "117:                 assertNotEquals(CommandLauncher.class, s.getLauncher().getClass()); // currently seems to reset it to JNLPLauncher, whatever",
          "118:                 s.setLauncher(new CommandLauncher(\"echo configured by admin\"));",
          "120:                 cmd = new UpdateNodeCommand();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:                 assertSerialForm(s, null);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "123:                     CLICommandInvoker.Matcher./* gets swallowed by RobustReflectionConverter, hmm*/succeededSilently());",
          "124:                 s = (DumbSlave) rr.j.jenkins.getNode(\"s\");",
          "125:                 assertNotEquals(CommandLauncher.class, s.getLauncher().getClass());",
          "127:                 s.setLauncher(new CommandLauncher(\"echo configured by admin\"));",
          "128:                 s.save();",
          "129:             }",
          "130:         });",
          "131:         rr.addStep(new Statement() {",
          "132:             @Override",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136:                 assertSerialForm(s, null);",
          "141:             private void assertSerialForm(DumbSlave s, @CheckForNull String expectedCommand) throws IOException {",
          "143:                 File nodesDir = new File(rr.j.jenkins.getRootDir(), \"nodes\");",
          "144:                 XmlFile configXml = new XmlFile(Jenkins.XSTREAM, new File(new File(nodesDir, s.getNodeName()), \"config.xml\"));",
          "145:                 assertThat(configXml.asString(), expectedCommand != null ? containsString(\"<agentCommand>\" + expectedCommand + \"</agentCommand>\") : not(containsString(\"<agentCommand>\")));",
          "146:             }",
          "",
          "---------------"
        ]
      }
    }
  ]
}