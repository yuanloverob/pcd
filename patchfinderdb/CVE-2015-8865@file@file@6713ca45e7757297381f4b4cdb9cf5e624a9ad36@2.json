{
  "cve_id": "CVE-2015-8865",
  "cve_desc": "The file_check_mem function in funcs.c in file before 5.23, as used in the Fileinfo component in PHP before 5.5.34, 5.6.x before 5.6.20, and 7.x before 7.0.5, mishandles continuation-level jumps, which allows context-dependent attackers to cause a denial of service (buffer overflow and application crash) or possibly execute arbitrary code via a crafted magic file.",
  "repo": "file/file",
  "patch_hash": "6713ca45e7757297381f4b4cdb9cf5e624a9ad36",
  "patch_info": {
    "commit_hash": "6713ca45e7757297381f4b4cdb9cf5e624a9ad36",
    "repo": "file/file",
    "commit_url": "https://github.com/file/file/commit/6713ca45e7757297381f4b4cdb9cf5e624a9ad36",
    "files": [
      "src/funcs.c"
    ],
    "message": "PR/454: Fix memory corruption when the continuation level jumps by more than 20 in a single step.",
    "before_after_code_files": [
      "src/funcs.c||src/funcs.c"
    ]
  },
  "patch_diff": {
    "src/funcs.c||src/funcs.c": [
      "File: src/funcs.c -> src/funcs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"file.h\"",
      "29: #ifndef lint",
      "33: #include \"magic.h\"",
      "",
      "[Removed Lines]",
      "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.80 2015/01/02 21:29:39 christos Exp $\")",
      "",
      "[Added Lines]",
      "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.81 2015/05/28 19:26:59 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "416:  size_t len;",
      "418:  if (level >= ms->c.len) {",
      "420:   ms->c.li = CAST(struct level_info *, (ms->c.li == NULL) ?",
      "421:       malloc(len) :",
      "422:       realloc(ms->c.li, len));",
      "",
      "[Removed Lines]",
      "419:   len = (ms->c.len += 20) * sizeof(*ms->c.li);",
      "",
      "[Added Lines]",
      "419:   len = (ms->c.len = 20 + level) * sizeof(*ms->c.li);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6f737ddfadb596d7d4a993f7ed2141ffd664a81c",
      "candidate_info": {
        "commit_hash": "6f737ddfadb596d7d4a993f7ed2141ffd664a81c",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/6f737ddfadb596d7d4a993f7ed2141ffd664a81c",
        "files": [
          "src/file.h",
          "src/funcs.c",
          "src/softmagic.c"
        ],
        "message": "- reduce recursion level from 20 to 10 and make a symbolic constant for it. - pull out the guts of saving and restoring the output buffer into functions   and take care not to overwrite the error message if an error happened.",
        "before_after_code_files": [
          "src/file.h||src/file.h",
          "src/funcs.c||src/funcs.c",
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/funcs.c||src/funcs.c"
          ],
          "candidate": [
            "src/funcs.c||src/funcs.c"
          ]
        }
      },
      "candidate_diff": {
        "src/file.h||src/file.h": [
          "File: src/file.h -> src/file.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "495: protected void file_regfree(file_regex_t *);",
          "496: protected void file_regerror(file_regex_t *, int, struct magic_set *);",
          "498: #ifndef COMPILE_ONLY",
          "499: extern const char *file_names[];",
          "500: extern const size_t file_nnames;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "498: typedef struct {",
          "499:  char *buf;",
          "500:  uint32_t offset;",
          "501: } file_pushbuf_t;",
          "503: protected file_pushbuf_t *file_push_buffer(struct magic_set *);",
          "504: protected char  *file_pop_buffer(struct magic_set *, file_pushbuf_t *);",
          "",
          "---------------"
        ],
        "src/funcs.c||src/funcs.c": [
          "File: src/funcs.c -> src/funcs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "33: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.72 2014/05/14 23:15:42 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.73 2014/09/10 18:41:51 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "491:  file_magerror(ms, \"regex error %d for `%s', (%s)\", rc, rx->pat,",
          "492:      errmsg);",
          "493: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "495: protected file_pushbuf_t *",
          "496: file_push_buffer(struct magic_set *ms)",
          "497: {",
          "498:  file_pushbuf_t *pb;",
          "500:  if (ms->event_flags & EVENT_HAD_ERR)",
          "501:   return NULL;",
          "503:  if ((pb = (CAST(file_pushbuf_t *, malloc(sizeof(*pb))))) == NULL)",
          "504:   return NULL;",
          "506:  pb->buf = ms->o.buf;",
          "507:  pb->offset = ms->offset;",
          "509:  ms->o.buf = NULL;",
          "510:  ms->offset = 0;",
          "512:  return pb;",
          "513: }",
          "515: protected char *",
          "516: file_pop_buffer(struct magic_set *ms, file_pushbuf_t *pb)",
          "517: {",
          "518:  char *rbuf;",
          "520:  if (ms->event_flags & EVENT_HAD_ERR) {",
          "521:   free(pb->buf);",
          "522:   free(pb);",
          "523:   return NULL;",
          "524:  }",
          "526:  rbuf = ms->o.buf;",
          "528:  ms->o.buf = pb->buf;",
          "529:  ms->offset = pb->offset;",
          "531:  free(pb);",
          "532:  return rbuf;",
          "533: }",
          "",
          "---------------"
        ],
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.196 2014/11/07 15:24:14 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.197 2014/11/11 17:48:23 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63: private void cvt_64(union VALUETYPE *, const struct magic *);",
          "65: #define OFFSET_OOB(n, o, i) ((n) < (o) || (i) > ((n) - (o)))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: #define MAX_RECURSION_LEVEL 10",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1217:     int flip, int recursion_level, int *printed_something,",
          "1218:     int *need_separator, int *returnval)",
          "1219: {",
          "1221:  uint32_t lhs;",
          "1222:  int rv, oneed_separator, in_type;",
          "1224:  union VALUETYPE *p = &ms->ms_value;",
          "1225:  struct mlist ml;",
          "1228:   file_error(ms, 0, \"recursion nesting exceeded\");",
          "1229:   return -1;",
          "1230:  }",
          "",
          "[Removed Lines]",
          "1220:  uint32_t soffset, offset = ms->offset;",
          "1223:  char *sbuf, *rbuf;",
          "1227:  if (recursion_level >= 20) {",
          "",
          "[Added Lines]",
          "1223:  uint32_t offset = ms->offset;",
          "1225:  file_pushbuf_t *pb;",
          "1227:  char *rbuf;",
          "1231:  if (recursion_level >= MAX_RECURSION_LEVEL) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1669:  case FILE_INDIRECT:",
          "1670:   if (offset == 0)",
          "1671:    return 0;",
          "1672:   if (nbytes < offset)",
          "1673:    return 0;",
          "1678:   rv = file_softmagic(ms, s + offset, nbytes - offset,",
          "1679:       recursion_level, BINTEST, text);",
          "1680:   if ((ms->flags & MAGIC_DEBUG) != 0)",
          "1681:    fprintf(stderr, \"indirect @offs=%u[%d]\\n\", offset, rv);",
          "1685:   if (rv == 1) {",
          "1686:    if ((ms->flags & (MAGIC_MIME|MAGIC_APPLE)) == 0 &&",
          "1687:        file_printf(ms, F(ms, m, \"%u\"), offset) == -1) {",
          "",
          "[Removed Lines]",
          "1674:   sbuf = ms->o.buf;",
          "1675:   soffset = ms->offset;",
          "1676:   ms->o.buf = NULL;",
          "1677:   ms->offset = 0;",
          "1682:   rbuf = ms->o.buf;",
          "1683:   ms->o.buf = sbuf;",
          "1684:   ms->offset = soffset;",
          "",
          "[Added Lines]",
          "1680:   if ((pb = file_push_buffer(ms)) == NULL)",
          "1681:    return -1;",
          "1689:   rbuf = file_pop_buffer(ms, pb);",
          "1690:   if (rbuf == NULL)",
          "1691:    return -1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1699:  case FILE_USE:",
          "1700:   if (nbytes < offset)",
          "1701:    return 0;",
          "1705:    flip = !flip;",
          "1706:   }",
          "1709:    return -1;",
          "1710:   }",
          "",
          "[Removed Lines]",
          "1702:   sbuf = m->value.s;",
          "1703:   if (*sbuf == '^') {",
          "1704:    sbuf++;",
          "1707:   if (file_magicfind(ms, sbuf, &ml) == -1) {",
          "1708:    file_error(ms, 0, \"cannot find entry `%s'\", sbuf);",
          "",
          "[Added Lines]",
          "1710:   rbuf = m->value.s;",
          "1711:   if (*rbuf == '^') {",
          "1712:    rbuf++;",
          "1715:   if (file_magicfind(ms, rbuf, &ml) == -1) {",
          "1716:    file_error(ms, 0, \"cannot find entry `%s'\", rbuf);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e96f86b5311572be1360ee0bb05d4926f8df3189",
      "candidate_info": {
        "commit_hash": "e96f86b5311572be1360ee0bb05d4926f8df3189",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/e96f86b5311572be1360ee0bb05d4926f8df3189",
        "files": [
          "src/funcs.c"
        ],
        "message": "Fix incorrect bounds check, from Alexander Cherepanov",
        "before_after_code_files": [
          "src/funcs.c||src/funcs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/funcs.c||src/funcs.c"
          ],
          "candidate": [
            "src/funcs.c||src/funcs.c"
          ]
        }
      },
      "candidate_diff": {
        "src/funcs.c||src/funcs.c": [
          "File: src/funcs.c -> src/funcs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "33: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.77 2014/11/28 02:46:39 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.78 2014/12/11 12:34:24 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "547:    continue;",
          "548:   }",
          "550:    break;",
          "",
          "[Removed Lines]",
          "549:   if (ptr >= eptr + 4)",
          "",
          "[Added Lines]",
          "549:   if (ptr >= eptr - 3)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f4481bdba01ddc1e5d834cd98b04ebf95af9b02b",
      "candidate_info": {
        "commit_hash": "f4481bdba01ddc1e5d834cd98b04ebf95af9b02b",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/f4481bdba01ddc1e5d834cd98b04ebf95af9b02b",
        "files": [
          "src/funcs.c"
        ],
        "message": "Honor MAGIC_CONTINUE for all kinds of magic tests",
        "before_after_code_files": [
          "src/funcs.c||src/funcs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/funcs.c||src/funcs.c"
          ],
          "candidate": [
            "src/funcs.c||src/funcs.c"
          ]
        }
      },
      "candidate_diff": {
        "src/funcs.c||src/funcs.c": [
          "File: src/funcs.c -> src/funcs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "33: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.79 2014/12/16 20:52:49 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.80 2015/01/02 21:29:39 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159: }",
          "161: #ifndef COMPILE_ONLY",
          "163: protected int",
          "164: file_buffer(struct magic_set *ms, int fd, const char *inname __attribute__ ((__unused__)),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "163: static int",
          "164: checkdone(struct magic_set *ms, int *rv)",
          "165: {",
          "166:  if ((ms->flags & MAGIC_CONTINUE) == 0)",
          "167:   return 1;",
          "168:  if (file_printf(ms, \"\\n- \") == -1)",
          "170:  return 0;",
          "171: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "215:   if ((m = file_is_tar(ms, ubuf, nb)) != 0) {",
          "216:    if ((ms->flags & MAGIC_DEBUG) != 0)",
          "217:     (void)fprintf(stderr, \"tar %d\\n\", m);",
          "219:   }",
          "",
          "[Removed Lines]",
          "218:    goto done;",
          "",
          "[Added Lines]",
          "229:    if (checkdone(ms, &rv))",
          "230:     goto done;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "223:   if ((m = file_trycdf(ms, fd, ubuf, nb)) != 0) {",
          "224:    if ((ms->flags & MAGIC_DEBUG) != 0)",
          "225:     (void)fprintf(stderr, \"cdf %d\\n\", m);",
          "227:   }",
          "",
          "[Removed Lines]",
          "226:    goto done;",
          "",
          "[Added Lines]",
          "238:    if (checkdone(ms, &rv))",
          "239:     goto done;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "250:           \"elf %d\\n\", m);",
          "251:    }",
          "252: #endif",
          "254:   }",
          "",
          "[Removed Lines]",
          "253:    goto done;",
          "",
          "[Added Lines]",
          "266:    if (checkdone(ms, &rv))",
          "267:     goto done;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "259:   if ((m = file_ascmagic(ms, ubuf, nb, looks_text)) != 0) {",
          "260:    if ((ms->flags & MAGIC_DEBUG) != 0)",
          "261:     (void)fprintf(stderr, \"ascmagic %d\\n\", m);",
          "263:   }",
          "264:  }",
          "",
          "[Removed Lines]",
          "262:    goto done;",
          "",
          "[Added Lines]",
          "276:    if (checkdone(ms, &rv))",
          "277:     goto done;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c16df549fb92534c74fded61cad3c519a6806516",
      "candidate_info": {
        "commit_hash": "c16df549fb92534c74fded61cad3c519a6806516",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/c16df549fb92534c74fded61cad3c519a6806516",
        "files": [
          "src/funcs.c"
        ],
        "message": "remove unused variables",
        "before_after_code_files": [
          "src/funcs.c||src/funcs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/funcs.c||src/funcs.c"
          ],
          "candidate": [
            "src/funcs.c||src/funcs.c"
          ]
        }
      },
      "candidate_diff": {
        "src/funcs.c||src/funcs.c": [
          "File: src/funcs.c -> src/funcs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "33: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.84 2015/09/10 13:32:19 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.85 2015/09/17 01:10:51 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "178:     const void *buf, size_t nb)",
          "179: {",
          "180:  int m = 0, rv = 0, looks_text = 0;",
          "182:  const unsigned char *ubuf = CAST(const unsigned char *, buf);",
          "183:  unichar *u8buf = NULL;",
          "184:  size_t ulen;",
          "",
          "[Removed Lines]",
          "181:  int mime = ms->flags & MAGIC_MIME;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a02398dde8087d55dccf04e13ec0a0bbf7c24ae2",
      "candidate_info": {
        "commit_hash": "a02398dde8087d55dccf04e13ec0a0bbf7c24ae2",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/a02398dde8087d55dccf04e13ec0a0bbf7c24ae2",
        "files": [
          "ChangeLog",
          "src/file.h",
          "src/funcs.c",
          "src/readelf.c",
          "src/softmagic.c"
        ],
        "message": "* change printable -> file_printable and use it in more places for safety * in ELF, instead of \"(uses dynamic libraries)\" when PT_INTERP   is present print the interpreter name.",
        "before_after_code_files": [
          "src/file.h||src/file.h",
          "src/funcs.c||src/funcs.c",
          "src/readelf.c||src/readelf.c",
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/funcs.c||src/funcs.c"
          ],
          "candidate": [
            "src/funcs.c||src/funcs.c"
          ]
        }
      },
      "candidate_diff": {
        "src/file.h||src/file.h": [
          "File: src/file.h -> src/file.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "476:     size_t *);",
          "477: protected size_t file_pstring_length_size(const struct magic *);",
          "478: protected size_t file_pstring_get_length(const struct magic *, const char *);",
          "479: #ifdef __EMX__",
          "480: protected int file_os2_apptype(struct magic_set *, const char *, const void *,",
          "481:     size_t);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "479: protected char * file_printable(char *, size_t, const char *);",
          "",
          "---------------"
        ],
        "src/funcs.c||src/funcs.c": [
          "File: src/funcs.c -> src/funcs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "33: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.76 2014/11/28 02:35:05 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.77 2014/11/28 02:46:39 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "531:  free(pb);",
          "532:  return rbuf;",
          "533: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "538: protected char *",
          "539: file_printable(char *buf, size_t bufsiz, const char *str)",
          "540: {",
          "541:  char *ptr, *eptr;",
          "542:  const unsigned char *s = (const unsigned char *)str;",
          "544:  for (ptr = buf, eptr = ptr + bufsiz - 1; ptr < eptr && *s; s++) {",
          "545:   if (isprint(*s)) {",
          "547:    continue;",
          "548:   }",
          "549:   if (ptr >= eptr + 4)",
          "550:    break;",
          "555:  }",
          "557:  return buf;",
          "558: }",
          "",
          "---------------"
        ],
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.110 2014/12/09 02:47:07 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.111 2014/12/09 02:47:45 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "489: #endif",
          "490:  uint32_t namesz, descsz;",
          "491:  unsigned char *nbuf = CAST(unsigned char *, vbuf);",
          "493:  if (xnh_sizeof + offset > size) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "492:  char sbuf[512];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "740:    if (file_printf(ms, \", from '%.31s'\",",
          "742:     return size;",
          "",
          "[Removed Lines]",
          "741:        &nbuf[doff + 0x7c]) == -1)",
          "",
          "[Added Lines]",
          "742:        file_printable(sbuf, sizeof(sbuf),",
          "743:        (const char *)&nbuf[doff + 0x7c])) == -1)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1163:  Elf32_Phdr ph32;",
          "1164:  Elf64_Phdr ph64;",
          "1165:  const char *linking_style = \"statically\";",
          "1167:  unsigned char nbuf[BUFSIZ];",
          "1168:  ssize_t bufsize;",
          "1169:  size_t offset, align, len;",
          "",
          "[Removed Lines]",
          "1166:  const char *shared_libraries = \"\";",
          "",
          "[Added Lines]",
          "1168:  const char *interp = \"\";",
          "1170:  char ibuf[BUFSIZ];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1181:   }",
          "1183:   off += size;",
          "1186:   switch (xph_type) {",
          "1187:   case PT_DYNAMIC:",
          "1188:    linking_style = \"dynamically\";",
          "1189:    break;",
          "1190:   case PT_INTERP:",
          "1192:    break;",
          "1193:   default:",
          "1194:    if (fsize != SIZE_UNKNOWN && xph_offset > fsize) {",
          "",
          "[Removed Lines]",
          "1191:    shared_libraries = \" (uses shared libs)\";",
          "",
          "[Added Lines]",
          "1187:   bufsize = 0;",
          "1188:   align = 4;",
          "1195:   case PT_NOTE:",
          "1197:     continue;",
          "1198:    if (((align = xph_align) & 0x80000000UL) != 0 ||",
          "1199:        align < 4) {",
          "1200:     if (file_printf(ms,",
          "1201:         \", invalid note alignment 0x%lx\",",
          "1202:         (unsigned long)align) == -1)",
          "1203:      return -1;",
          "1204:     align = 4;",
          "1205:    }",
          "1208:    len = xph_filesz < sizeof(nbuf) ? xph_filesz",
          "1209:        : sizeof(nbuf);",
          "1210:    bufsize = pread(fd, nbuf, len, xph_offset);",
          "1211:    if (bufsize == -1) {",
          "1212:     file_badread(ms);",
          "1213:     return -1;",
          "1214:    }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1202:   switch (xph_type) {",
          "1211:    }",
          "1225:    offset = 0;",
          "1226:    for (;;) {",
          "1227:     if (offset >= (size_t)bufsize)",
          "",
          "[Removed Lines]",
          "1203:   case PT_NOTE:",
          "1204:    if (((align = xph_align) & 0x80000000UL) != 0 ||",
          "1205:        align < 4) {",
          "1206:     if (file_printf(ms,",
          "1207:         \", invalid note alignment 0x%lx\",",
          "1208:         (unsigned long)align) == -1)",
          "1209:      return -1;",
          "1210:     align = 4;",
          "1212:    if (sh_num)",
          "1213:     break;",
          "1218:    len = xph_filesz < sizeof(nbuf) ? xph_filesz",
          "1219:        : sizeof(nbuf);",
          "1220:    bufsize = pread(fd, nbuf, len, xph_offset);",
          "1221:    if (bufsize == -1) {",
          "1222:     file_badread(ms);",
          "1223:     return -1;",
          "1224:    }",
          "",
          "[Added Lines]",
          "1226:   case PT_INTERP:",
          "1227:    if (bufsize) {",
          "1228:     nbuf[bufsize - 1] = '\\0';",
          "1229:     interp = (const char *)nbuf;",
          "1231:    break;",
          "1232:   case PT_NOTE:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1237:    break;",
          "1238:   }",
          "1239:  }",
          "1241:      == -1)",
          "1243:  return 0;",
          "1244: }",
          "",
          "[Removed Lines]",
          "1240:  if (file_printf(ms, \", %s linked%s\", linking_style, shared_libraries)",
          "1242:      return -1;",
          "",
          "[Added Lines]",
          "1252:  if (file_printf(ms, \", %s linked\", linking_style)",
          "1254:   return -1;",
          "1255:  if (interp[0])",
          "1256:   if (file_printf(ms, \", interpreter %s\",",
          "1257:       file_printable(ibuf, sizeof(ibuf), interp)) == -1)",
          "1258:    return -1;",
          "",
          "---------------"
        ],
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.202 2014/11/28 02:46:39 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.203 2014/12/04 15:22:05 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "404: }",
          "429: private int32_t",
          "430: mprint(struct magic_set *ms, struct magic *m)",
          "431: {",
          "",
          "[Removed Lines]",
          "407: static char *",
          "408: printable(char *buf, size_t bufsiz, const char *str)",
          "409: {",
          "410:  char *ptr, *eptr;",
          "411:  const unsigned char *s = (const unsigned char *)str;",
          "413:  for (ptr = buf, eptr = ptr + bufsiz - 1; ptr < eptr && *s; s++) {",
          "414:   if (isprint(*s)) {",
          "416:    continue;",
          "417:   }",
          "418:   if (ptr >= eptr + 4)",
          "419:    break;",
          "424:  }",
          "426:  return buf;",
          "427: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "433:  float vf;",
          "434:  double vd;",
          "435:  int64_t t = 0;",
          "437:  union VALUETYPE *p = &ms->ms_value;",
          "439:    switch (m->type) {",
          "",
          "[Removed Lines]",
          "436:   char buf[128], tbuf[26];",
          "",
          "[Added Lines]",
          "414:   char buf[128], tbuf[26], sbuf[512];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "527:    case FILE_BESTRING16:",
          "528:    case FILE_LESTRING16:",
          "529:   if (m->reln == '=' || m->reln == '!') {",
          "531:     return -1;",
          "532:    t = ms->offset + m->vallen;",
          "533:   }",
          "534:   else {",
          "536:    char *str = p->s;",
          "",
          "[Removed Lines]",
          "530:    if (file_printf(ms, F(ms, m, \"%s\"), m->value.s) == -1)",
          "535:    char sbuf[512];",
          "",
          "[Added Lines]",
          "508:    if (file_printf(ms, F(ms, m, \"%s\"),",
          "509:        file_printable(sbuf, sizeof(sbuf), m->value.s))",
          "510:        == -1)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "555:    }",
          "557:    if (file_printf(ms, F(ms, m, \"%s\"),",
          "559:     return -1;",
          "561:    if (m->type == FILE_PSTRING)",
          "",
          "[Removed Lines]",
          "558:        printable(sbuf, sizeof(sbuf), str)) == -1)",
          "",
          "[Added Lines]",
          "537:        file_printable(sbuf, sizeof(sbuf), str)) == -1)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "659:    file_oomem(ms, ms->search.rm_len);",
          "660:    return -1;",
          "661:   }",
          "663:   free(cp);",
          "665:   if (rval == -1)",
          "",
          "[Removed Lines]",
          "662:   rval = file_printf(ms, F(ms, m, \"%s\"), cp);",
          "",
          "[Added Lines]",
          "641:   rval = file_printf(ms, F(ms, m, \"%s\"),",
          "642:       file_printable(sbuf, sizeof(sbuf), cp));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "673:  }",
          "675:  case FILE_SEARCH:",
          "677:    return -1;",
          "678:   if ((m->str_flags & REGEX_OFFSET_START))",
          "679:    t = ms->search.offset;",
          "",
          "[Removed Lines]",
          "676:     if (file_printf(ms, F(ms, m, \"%s\"), m->value.s) == -1)",
          "",
          "[Added Lines]",
          "656:     if (file_printf(ms, F(ms, m, \"%s\"),",
          "657:       file_printable(sbuf, sizeof(sbuf), m->value.s)) == -1)",
          "",
          "---------------"
        ]
      }
    }
  ]
}