{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "47d6a946562b7825579211b0d617aee32bdf6f74",
      "candidate_info": {
        "commit_hash": "47d6a946562b7825579211b0d617aee32bdf6f74",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/47d6a946562b7825579211b0d617aee32bdf6f74",
        "files": [
          "lib/fs.js",
          "test/simple/test-fs-stream-double-close.js"
        ],
        "message": "fs: fix ReadStream / WriteStream double close bug\n\n* Calling fs.ReadStream.destroy() or fs.WriteStream.destroy() twice would close\n  the file descriptor twice. That's bad because the file descriptor may have\n  been repurposed in the mean time.\n\n* A bad value check in fs.ReadStream.prototype.destroy() would prevent a stream\n  created with fs.createReadStream({fd:0}) from getting closed.",
        "before_after_code_files": [
          "lib/fs.js||lifs.js",
          "test/simple/test-fs-stream-double-close.js||test/simple/test-fs-stream-double-close.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/fs.js||lifs.js": [
          "File: lib/fs.js -> lifs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1168: ReadStream.prototype.destroy = function(cb) {",
          "1169:   var self = this;",
          "1170:   this.readable = false;",
          "1172:   function close() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1182:     });",
          "1183:   }",
          "1188:     this.addListener('open', close);",
          "1189:   }",
          "1190: };",
          "",
          "[Removed Lines]",
          "1185:   if (this.fd) {",
          "1186:     close();",
          "1187:   } else {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1368: WriteStream.prototype.destroy = function(cb) {",
          "1369:   var self = this;",
          "1370:   this.writable = false;",
          "1372:   function close() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1382:     });",
          "1383:   }",
          "1388:     this.addListener('open', close);",
          "1389:   }",
          "1390: };",
          "",
          "[Removed Lines]",
          "1385:   if (this.fd) {",
          "1386:     close();",
          "1387:   } else {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-fs-stream-double-close.js||test/simple/test-fs-stream-double-close.js": [
          "File: test/simple/test-fs-stream-double-close.js -> test/simple/test-fs-stream-double-close.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var fs = require('fs');",
          "26: test1(fs.createReadStream(__filename));",
          "27: test2(fs.createReadStream(__filename));",
          "28: test3(fs.createReadStream(__filename));",
          "30: test1(fs.createWriteStream(common.tmpDir + '/dummy1'));",
          "31: test2(fs.createWriteStream(common.tmpDir + '/dummy2'));",
          "32: test3(fs.createWriteStream(common.tmpDir + '/dummy3'));",
          "34: function test1(stream) {",
          "35:   stream.destroy();",
          "36:   stream.destroy();",
          "37: }",
          "39: function test2(stream) {",
          "40:   stream.destroy();",
          "41:   stream.on('open', function(fd) {",
          "42:     stream.destroy();",
          "43:     open_cb_called++;",
          "44:   });",
          "45:   process.on('exit', function() {",
          "46:     assert.equal(open_cb_called, 1);",
          "47:   });",
          "48:   var open_cb_called = 0;",
          "49: }",
          "51: function test3(stream) {",
          "52:   stream.on('open', function(fd) {",
          "53:     stream.destroy();",
          "54:     stream.destroy();",
          "55:     open_cb_called++;",
          "56:   });",
          "57:   process.on('exit', function() {",
          "58:     assert.equal(open_cb_called, 1);",
          "59:   });",
          "60:   var open_cb_called = 0;",
          "61: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1a9799864481c789950388b3c344110ff923e30a",
      "candidate_info": {
        "commit_hash": "1a9799864481c789950388b3c344110ff923e30a",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/1a9799864481c789950388b3c344110ff923e30a",
        "files": [
          "src/node.cc"
        ],
        "message": "process: fix process.title setter\n\nCommit 19fd530 broke the argv initialization logic that's used on linux and\nfreebsd to update the process name (as displayed in tools like `top`).\n\nFixes test/simple/test-setproctitle.js.",
        "before_after_code_files": [
          "src/node.cc||src/node.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2625:   uv_uptime(&prog_start_time);",
          "2631:   node::ParseArgs(argc, argv);",
          "",
          "[Removed Lines]",
          "2628:   argv = uv_setup_args(argc, argv);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2754: }",
          "2756: int Start(int argc, char *argv[]) {",
          "2759:   char **argv_copy = copy_argv(argc, argv);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2755:   argv = uv_setup_args(argc, argv);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3546383cf0c9738019ecee88858b9f78c5202428",
      "candidate_info": {
        "commit_hash": "3546383cf0c9738019ecee88858b9f78c5202428",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/3546383cf0c9738019ecee88858b9f78c5202428",
        "files": [
          "src/process_wrap.cc"
        ],
        "message": "process_wrap: avoid leaking memory when throwing due to invalid arguments",
        "before_after_code_files": [
          "src/process_wrap.cc||src/process_wrap.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/process_wrap.cc||src/process_wrap.cc": [
          "File: src/process_wrap.cc -> src/process_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:     options.exit_cb = OnExit;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109:     Local<Value> uid_v = js_options->Get(String::NewSymbol(\"uid\"));",
          "110:     if (uid_v->IsInt32()) {",
          "111:       int32_t uid = uid_v->Int32Value();",
          "112:       if (uid & ~((uv_uid_t) ~0)) {",
          "113:         return ThrowException(Exception::RangeError(",
          "114:             String::New(\"options.uid is out of range\")));",
          "115:       }",
          "116:       options.flags |= UV_PROCESS_SETUID;",
          "117:       options.uid = (uv_uid_t) uid;",
          "118:     } else if (!uid_v->IsUndefined() && !uid_v->IsNull()) {",
          "119:       return ThrowException(Exception::TypeError(",
          "120:           String::New(\"options.uid should be a number\")));",
          "121:     }",
          "124:     Local<Value> gid_v = js_options->Get(String::NewSymbol(\"gid\"));",
          "125:     if (gid_v->IsInt32()) {",
          "126:       int32_t gid = gid_v->Int32Value();",
          "127:       if (gid & ~((uv_gid_t) ~0)) {",
          "128:         return ThrowException(Exception::RangeError(",
          "129:            String::New(\"options.gid is out of range\")));",
          "130:       }",
          "131:       options.flags |= UV_PROCESS_SETGID;",
          "132:       options.gid = (uv_gid_t) gid;",
          "133:     } else if (!gid_v->IsUndefined() && !gid_v->IsNull()) {",
          "134:       return ThrowException(Exception::TypeError(",
          "135:           String::New(\"options.gid should be a number\")));",
          "136:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "182:       options.flags |= UV_PROCESS_WINDOWS_VERBATIM_ARGUMENTS;",
          "183:     }",
          "215:     int r = uv_spawn2(uv_default_loop(), &wrap->process_, options);",
          "217:     if (r) {",
          "",
          "[Removed Lines]",
          "186:     Local<Value> uid_v = js_options->Get(String::NewSymbol(\"uid\"));",
          "187:     if (uid_v->IsInt32()) {",
          "188:       int32_t uid = uid_v->Int32Value();",
          "189:       if (uid & ~((uv_uid_t) ~0)) {",
          "190:         return ThrowException(Exception::RangeError(",
          "191:             String::New(\"options.uid is out of range\")));",
          "192:       }",
          "193:       options.flags |= UV_PROCESS_SETUID;",
          "194:       options.uid = (uv_uid_t) uid;",
          "195:     } else if (!uid_v->IsUndefined() && !uid_v->IsNull()) {",
          "196:       return ThrowException(Exception::TypeError(",
          "197:           String::New(\"options.uid should be a number\")));",
          "198:     }",
          "201:     Local<Value> gid_v = js_options->Get(String::NewSymbol(\"gid\"));",
          "202:     if (gid_v->IsInt32()) {",
          "203:       int32_t gid = gid_v->Int32Value();",
          "204:       if (gid & ~((uv_gid_t) ~0)) {",
          "205:         return ThrowException(Exception::RangeError(",
          "206:            String::New(\"options.gid is out of range\")));",
          "207:       }",
          "208:       options.flags |= UV_PROCESS_SETGID;",
          "209:       options.gid = (uv_gid_t) gid;",
          "210:     } else if (!gid_v->IsUndefined() && !gid_v->IsNull()) {",
          "211:       return ThrowException(Exception::TypeError(",
          "212:           String::New(\"options.gid should be a number\")));",
          "213:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "10ba95c11a9a3857f5e378e343b3febd107dae70",
      "candidate_info": {
        "commit_hash": "10ba95c11a9a3857f5e378e343b3febd107dae70",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/10ba95c11a9a3857f5e378e343b3febd107dae70",
        "files": [
          "benchmark/url.js"
        ],
        "message": "bench: improve url parser benchmark",
        "before_after_code_files": [
          "benchmark/url.js||benchmark/url.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "benchmark/url.js||benchmark/url.js": [
          "File: benchmark/url.js -> benchmark/url.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: var url = require('url'),",
          "2:     urls = [",
          "3:       'http://nodejs.org/docs/latest/api/url.html#url_url_format_urlobj',",
          "4:       'http://blog.nodejs.org/',",
          "5:       'https://encrypted.google.com/search?q=url&q=site:npmjs.org&hl=en',",
          "6:       'javascript:alert(\"node is awesome\");',",
          "7:       'some.ran/dom/url.thing?oh=yes#whoo'",
          "8:     ],",
          "9:     paths = [",
          "10:       '../foo/bar?baz=boom',",
          "11:       'foo/bar',",
          "12:       'http://nodejs.org',",
          "13:       './foo/bar?baz'",
          "14:     ];",
          "16: urls.forEach(url.parse);",
          "17: urls.forEach(url.format);",
          "18: urls.forEach(function(u){",
          "19:   paths.forEach(function(p){",
          "20:     url.resolve(u, p);",
          "21:   });",
          "22: });",
          "",
          "[Added Lines]",
          "2: var url = require('url')",
          "4: var urls = [",
          "5:   'http://nodejs.org/docs/latest/api/url.html#url_url_format_urlobj',",
          "6:   'http://blog.nodejs.org/',",
          "7:   'https://encrypted.google.com/search?q=url&q=site:npmjs.org&hl=en',",
          "8:   'javascript:alert(\"node is awesome\");',",
          "9:   'some.ran/dom/url.thing?oh=yes#whoo'",
          "10: ];",
          "12: var paths = [",
          "13:   '../foo/bar?baz=boom',",
          "14:   'foo/bar',",
          "15:   'http://nodejs.org',",
          "16:   './foo/bar?baz'",
          "17: ];",
          "19: benchmark('parse()', url.parse);",
          "20: benchmark('format()', url.format);",
          "22: paths.forEach(function(p) {",
          "23:   benchmark('resolve(\"' + p + '\")', function(u) { url.resolve(u, p) });",
          "24: });",
          "26: function benchmark(name, fun) {",
          "27:   process.stdout.write('benchmarking ' + name + ' ... ');",
          "29:   var timestamp = process.hrtime();",
          "30:   for (var i = 0; i < 25 * 1000; ++i) {",
          "31:     for (var j = 0, k = urls.length; j < k; ++j) fun(urls[j]);",
          "32:   }",
          "33:   timestamp = process.hrtime(timestamp);",
          "35:   var seconds = timestamp[0];",
          "36:   var millis = timestamp[1]; // actually nanoseconds",
          "37:   while (millis > 1000) millis /= 10;",
          "38:   var time = (seconds * 1000 + millis) / 1000;",
          "40:   process.stdout.write(util.format('%s sec\\n', time.toFixed(3)));",
          "41: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2a30d328fa97eccef80256436f13651adadae4e4",
      "candidate_info": {
        "commit_hash": "2a30d328fa97eccef80256436f13651adadae4e4",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/2a30d328fa97eccef80256436f13651adadae4e4",
        "files": [
          "src/node_crypto.cc",
          "test/simple/test-crypto.js"
        ],
        "message": "crypto: add sync interface to crypto.pbkdf2()\n\nFixes #3766.",
        "before_after_code_files": [
          "src/node_crypto.cc||src/node_crypto.cc",
          "test/simple/test-crypto.js||test/simple/test-crypto.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_crypto.cc||src/node_crypto.cc": [
          "File: src/node_crypto.cc -> src/node_crypto.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "4192:   DH* dh;",
          "4193: };",
          "4195: struct pbkdf2_req {",
          "4196:   int err;",
          "4197:   char* pass;",
          "4198:   size_t passlen;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4197:   uv_work_t work_req;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4204:   Persistent<Function> callback;",
          "4205: };",
          "4220: }",
          "4231:     argv[0] = Local<Value>::New(Undefined());",
          "4234:   } else {",
          "4235:     argv[0] = Exception::Error(String::New(\"PBKDF2 error\"));",
          "4236:     argv[1] = Local<Value>::New(Undefined());",
          "4237:   }",
          "4251: }",
          "4255:   HandleScope scope;",
          "4257:   const char* type_error = NULL;",
          "4258:   char* pass = NULL;",
          "4259:   char* salt = NULL;",
          "4261:   ssize_t passlen = -1;",
          "4262:   ssize_t saltlen = -1;",
          "4263:   ssize_t keylen = -1;",
          "",
          "[Removed Lines]",
          "4207: void",
          "4208: EIO_PBKDF2(uv_work_t* req) {",
          "4209:   pbkdf2_req* request = (pbkdf2_req*)req->data;",
          "4210:   request->err = PKCS5_PBKDF2_HMAC_SHA1(",
          "4211:     request->pass,",
          "4212:     request->passlen,",
          "4213:     (unsigned char*)request->salt,",
          "4214:     request->saltlen,",
          "4215:     request->iter,",
          "4216:     request->keylen,",
          "4217:     (unsigned char*)request->key);",
          "4218:   memset(request->pass, 0, request->passlen);",
          "4219:   memset(request->salt, 0, request->saltlen);",
          "4222: void",
          "4223: EIO_PBKDF2After(uv_work_t* req) {",
          "4224:   HandleScope scope;",
          "4226:   pbkdf2_req* request = (pbkdf2_req*)req->data;",
          "4227:   delete req;",
          "4229:   Local<Value> argv[2];",
          "4230:   if (request->err) {",
          "4232:     argv[1] = Encode(request->key, request->keylen, BINARY);",
          "4233:     memset(request->key, 0, request->keylen);",
          "4241:   MakeCallback(Context::GetCurrent()->Global(),",
          "4242:                request->callback,",
          "4243:                ARRAY_SIZE(argv), argv);",
          "4245:   delete[] request->pass;",
          "4246:   delete[] request->salt;",
          "4247:   delete[] request->key;",
          "4248:   request->callback.Dispose();",
          "4250:   delete request;",
          "4253: Handle<Value>",
          "4254: PBKDF2(const Arguments& args) {",
          "4260:   char* key = NULL;",
          "",
          "[Added Lines]",
          "4210: void EIO_PBKDF2(pbkdf2_req* req) {",
          "4211:   req->err = PKCS5_PBKDF2_HMAC_SHA1(",
          "4212:     req->pass,",
          "4213:     req->passlen,",
          "4214:     (unsigned char*)req->salt,",
          "4215:     req->saltlen,",
          "4216:     req->iter,",
          "4217:     req->keylen,",
          "4218:     (unsigned char*)req->key);",
          "4219:   memset(req->pass, 0, req->passlen);",
          "4220:   memset(req->salt, 0, req->saltlen);",
          "4224: void EIO_PBKDF2(uv_work_t* work_req) {",
          "4225:   pbkdf2_req* req = container_of(work_req, pbkdf2_req, work_req);",
          "4226:   EIO_PBKDF2(req);",
          "4227: }",
          "4230: void EIO_PBKDF2After(pbkdf2_req* req, Local<Value> argv[2]) {",
          "4231:   if (req->err) {",
          "4233:     argv[1] = Encode(req->key, req->keylen, BINARY);",
          "4234:     memset(req->key, 0, req->keylen);",
          "4240:   delete[] req->pass;",
          "4241:   delete[] req->salt;",
          "4242:   delete[] req->key;",
          "4243:   delete req;",
          "4244: }",
          "4247: void EIO_PBKDF2After(uv_work_t* work_req) {",
          "4248:   pbkdf2_req* req = container_of(work_req, pbkdf2_req, work_req);",
          "4250:   HandleScope scope;",
          "4251:   Local<Value> argv[2];",
          "4252:   Persistent<Function> cb = req->callback;",
          "4253:   EIO_PBKDF2After(req, argv);",
          "4257:   MakeCallback(Context::GetCurrent()->Global(), cb, ARRAY_SIZE(argv), argv);",
          "4258:   cb.Dispose();",
          "4262: Handle<Value> PBKDF2(const Arguments& args) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4265:   ssize_t salt_written = -1;",
          "4266:   ssize_t iter = -1;",
          "4267:   Local<Function> callback;",
          "4272:     type_error = \"Bad parameter\";",
          "4273:     goto err;",
          "4274:   }",
          "",
          "[Removed Lines]",
          "4268:   pbkdf2_req* request = NULL;",
          "4269:   uv_work_t* req = NULL;",
          "4271:   if (args.Length() != 5) {",
          "",
          "[Added Lines]",
          "4275:   pbkdf2_req* req = NULL;",
          "4277:   if (args.Length() != 4 && args.Length() != 5) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4317:     goto err;",
          "4318:   }",
          "4325:   }",
          "4345: err:",
          "4347:   delete[] salt;",
          "4348:   delete[] pass;",
          "4349:   return ThrowException(Exception::TypeError(String::New(type_error)));",
          "",
          "[Removed Lines]",
          "4320:   key = new char[keylen];",
          "4322:   if (!args[4]->IsFunction()) {",
          "4323:     type_error = \"Callback not a function\";",
          "4324:     goto err;",
          "4327:   callback = Local<Function>::Cast(args[4]);",
          "4329:   request = new pbkdf2_req;",
          "4330:   request->err = 0;",
          "4331:   request->pass = pass;",
          "4332:   request->passlen = passlen;",
          "4333:   request->salt = salt;",
          "4334:   request->saltlen = saltlen;",
          "4335:   request->iter = iter;",
          "4336:   request->key = key;",
          "4337:   request->keylen = keylen;",
          "4338:   request->callback = Persistent<Function>::New(callback);",
          "4340:   req = new uv_work_t();",
          "4341:   req->data = request;",
          "4342:   uv_queue_work(uv_default_loop(), req, EIO_PBKDF2, EIO_PBKDF2After);",
          "4343:   return Undefined();",
          "4346:   delete[] key;",
          "",
          "[Added Lines]",
          "4326:   req = new pbkdf2_req;",
          "4327:   req->err = 0;",
          "4328:   req->pass = pass;",
          "4329:   req->passlen = passlen;",
          "4330:   req->salt = salt;",
          "4331:   req->saltlen = saltlen;",
          "4332:   req->iter = iter;",
          "4333:   req->key = new char[keylen];",
          "4334:   req->keylen = keylen;",
          "4336:   if (args[4]->IsFunction()) {",
          "4337:     callback = Local<Function>::Cast(args[4]);",
          "4338:     req->callback = Persistent<Function>::New(callback);",
          "4339:     uv_queue_work(uv_default_loop(),",
          "4340:                   &req->work_req,",
          "4341:                   EIO_PBKDF2,",
          "4342:                   EIO_PBKDF2After);",
          "4343:     return Undefined();",
          "4344:   } else {",
          "4345:     Local<Value> argv[2];",
          "4346:     EIO_PBKDF2(req);",
          "4347:     EIO_PBKDF2After(req, argv);",
          "4348:     if (argv[0]->IsObject()) return ThrowException(argv[0]);",
          "4349:     return scope.Close(argv[1]);",
          "",
          "---------------"
        ],
        "test/simple/test-crypto.js||test/simple/test-crypto.js": [
          "File: test/simple/test-crypto.js -> test/simple/test-crypto.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "621: crypto.pbkdf2('password', 'salt', 1, 20, function(err, result) {",
          "622:   assert.equal(result,",
          "623:                '\\x0c\\x60\\xc8\\x0f\\x96\\x1f\\x0e\\x71\\xf3\\xa9\\xb5\\x24' +",
          "624:                '\\xaf\\x60\\x12\\x06\\x2f\\xe0\\x37\\xa6',",
          "625:                'pbkdf1 test vector 1');",
          "626: });",
          "628: crypto.pbkdf2('password', 'salt', 2, 20, function(err, result) {",
          "629:   assert.equal(result,",
          "630:                '\\xea\\x6c\\x01\\x4d\\xc7\\x2d\\x6f\\x8c\\xcd\\x1e\\xd9\\x2a' +",
          "631:                '\\xce\\x1d\\x41\\xf0\\xd8\\xde\\x89\\x57',",
          "632:                'pbkdf1 test vector 2');",
          "633: });",
          "635: crypto.pbkdf2('password', 'salt', 4096, 20, function(err, result) {",
          "636:   assert.equal(result,",
          "637:                '\\x4b\\x00\\x79\\x01\\xb7\\x65\\x48\\x9a\\xbe\\xad\\x49\\xd9\\x26' +",
          "638:                '\\xf7\\x21\\xd0\\x65\\xa4\\x29\\xc1',",
          "639:                'pbkdf1 test vector 3');",
          "640: });",
          "642: crypto.pbkdf2(",
          "643:     'passwordPASSWORDpassword',",
          "644:     'saltSALTsaltSALTsaltSALTsaltSALTsalt',",
          "645:     4096,",
          "646:     25, function(err, result) {",
          "647:       assert.equal(result,",
          "648:                    '\\x3d\\x2e\\xec\\x4f\\xe4\\x1c\\x84\\x9b\\x80\\xc8\\xd8\\x36\\x62' +",
          "649:                    '\\xc0\\xe4\\x4a\\x8b\\x29\\x1a\\x96\\x4c\\xf2\\xf0\\x70\\x38',",
          "650:                    'pbkdf1 test vector 5');",
          "651:     });",
          "653: crypto.pbkdf2('pass\\0word', 'sa\\0lt', 4096, 16, function(err, result) {",
          "654:   assert.equal(result,",
          "655:                '\\x56\\xfa\\x6a\\xa7\\x55\\x48\\x09\\x9d\\xcc\\x37\\xd7\\xf0\\x34' +",
          "656:                '\\x25\\xe0\\xc3',",
          "657:                'pbkdf1 test vector 6');",
          "658: });",
          "661: assert.throws(function() {",
          "662:   crypto.pbkdf2('password', 'salt', 1, 20, null);",
          "663: });",
          "",
          "[Added Lines]",
          "621: function testPBKDF2(password, salt, iterations, keylen, expected) {",
          "622:   var actual = crypto.pbkdf2(password, salt, iterations, keylen);",
          "623:   assert.equal(actual, expected);",
          "625:   crypto.pbkdf2(password, salt, iterations, keylen, function(err, actual) {",
          "626:     assert.equal(actual, expected);",
          "627:   });",
          "628: }",
          "631: testPBKDF2('password', 'salt', 1, 20,",
          "632:            '\\x0c\\x60\\xc8\\x0f\\x96\\x1f\\x0e\\x71\\xf3\\xa9\\xb5\\x24' +",
          "633:            '\\xaf\\x60\\x12\\x06\\x2f\\xe0\\x37\\xa6');",
          "635: testPBKDF2('password', 'salt', 2, 20,",
          "636:            '\\xea\\x6c\\x01\\x4d\\xc7\\x2d\\x6f\\x8c\\xcd\\x1e\\xd9\\x2a' +",
          "637:            '\\xce\\x1d\\x41\\xf0\\xd8\\xde\\x89\\x57');",
          "639: testPBKDF2('password', 'salt', 4096, 20,",
          "640:            '\\x4b\\x00\\x79\\x01\\xb7\\x65\\x48\\x9a\\xbe\\xad\\x49\\xd9\\x26' +",
          "641:            '\\xf7\\x21\\xd0\\x65\\xa4\\x29\\xc1');",
          "643: testPBKDF2('passwordPASSWORDpassword',",
          "644:            'saltSALTsaltSALTsaltSALTsaltSALTsalt',",
          "645:            4096,",
          "646:            25,",
          "647:            '\\x3d\\x2e\\xec\\x4f\\xe4\\x1c\\x84\\x9b\\x80\\xc8\\xd8\\x36\\x62' +",
          "648:            '\\xc0\\xe4\\x4a\\x8b\\x29\\x1a\\x96\\x4c\\xf2\\xf0\\x70\\x38');",
          "650: testPBKDF2('pass\\0word', 'sa\\0lt', 4096, 16,",
          "651:            '\\x56\\xfa\\x6a\\xa7\\x55\\x48\\x09\\x9d\\xcc\\x37\\xd7\\xf0\\x34' +",
          "652:            '\\x25\\xe0\\xc3');",
          "",
          "---------------"
        ]
      }
    }
  ]
}