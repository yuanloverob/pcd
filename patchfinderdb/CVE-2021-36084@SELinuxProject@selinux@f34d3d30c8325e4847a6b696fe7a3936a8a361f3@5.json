{
  "cve_id": "CVE-2021-36084",
  "cve_desc": "The CIL compiler in SELinux 3.2 has a use-after-free in __cil_verify_classperms (called from __cil_verify_classpermission and __cil_pre_verify_helper).",
  "repo": "SELinuxProject/selinux",
  "patch_hash": "f34d3d30c8325e4847a6b696fe7a3936a8a361f3",
  "patch_info": {
    "commit_hash": "f34d3d30c8325e4847a6b696fe7a3936a8a361f3",
    "repo": "SELinuxProject/selinux",
    "commit_url": "https://github.com/SELinuxProject/selinux/commit/f34d3d30c8325e4847a6b696fe7a3936a8a361f3",
    "files": [
      "libsepol/cil/src/cil_reset_ast.c"
    ],
    "message": "libsepol/cil: Destroy classperms list when resetting classpermission\n\nNicolas Iooss reports:\n  A few months ago, OSS-Fuzz found a crash in the CIL compiler, which\n  got reported as\n  https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=28648 (the title\n  is misleading, or is caused by another issue that conflicts with the\n  one I report in this message). Here is a minimized CIL policy which\n  reproduces the issue:\n\n  (class CLASS (PERM))\n  (classorder (CLASS))\n  (sid SID)\n  (sidorder (SID))\n  (user USER)\n  (role ROLE)\n  (type TYPE)\n  (category CAT)\n  (categoryorder (CAT))\n  (sensitivity SENS)\n  (sensitivityorder (SENS))\n  (sensitivitycategory SENS (CAT))\n  (allow TYPE self (CLASS (PERM)))\n  (roletype ROLE TYPE)\n  (userrole USER ROLE)\n  (userlevel USER (SENS))\n  (userrange USER ((SENS)(SENS (CAT))))\n  (sidcontext SID (USER ROLE TYPE ((SENS)(SENS))))\n\n  (classpermission CLAPERM)\n\n  (optional OPT\n      (roletype nonexistingrole nonexistingtype)\n      (classpermissionset CLAPERM (CLASS (PERM)))\n  )\n\n  The CIL policy fuzzer (which mimics secilc built with clang Address\n  Sanitizer) reports:\n\n  ==36541==ERROR: AddressSanitizer: heap-use-after-free on address\n  0x603000004f98 at pc 0x56445134c842 bp 0x7ffe2a256590 sp\n  0x7ffe2a256588\n  READ of size 8 at 0x603000004f98 thread T0\n      #0 0x56445134c841 in __cil_verify_classperms\n  /selinux/libsepol/src/../cil/src/cil_verify.c:1620:8\n      #1 0x56445134a43e in __cil_verify_classpermission\n  /selinux/libsepol/src/../cil/src/cil_verify.c:1650:9\n      #2 0x56445134a43e in __cil_pre_verify_helper\n  /selinux/libsepol/src/../cil/src/cil_verify.c:1715:8\n      #3 0x5644513225ac in cil_tree_walk_core\n  /selinux/libsepol/src/../cil/src/cil_tree.c:272:9\n      #4 0x564451322ab1 in cil_tree_walk\n  /selinux/libsepol/src/../cil/src/cil_tree.c:316:7\n      #5 0x5644513226af in cil_tree_walk_core\n  /selinux/libsepol/src/../cil/src/cil_tree.c:284:9\n      #6 0x564451322ab1 in cil_tree_walk\n  /selinux/libsepol/src/../cil/src/cil_tree.c:316:7\n      #7 0x5644512b88fd in cil_pre_verify\n  /selinux/libsepol/src/../cil/src/cil_post.c:2510:7\n      #8 0x5644512b88fd in cil_post_process\n  /selinux/libsepol/src/../cil/src/cil_post.c:2524:7\n      #9 0x5644511856ff in cil_compile\n  /selinux/libsepol/src/../cil/src/cil.c:564:7\n\nThe classperms list of a classpermission rule is created and filled\nin when classpermissionset rules are processed, so it doesn't own any\npart of the list and shouldn't retain any of it when it is reset.\n\nDestroy the classperms list (without destroying the data in it)  when\nresetting a classpermission rule.\n\nReported-by: Nicolas Iooss <nicolas.iooss@m4x.org>\nSigned-off-by: James Carter <jwcart2@gmail.com>",
    "before_after_code_files": [
      "libsepol/cil/src/cil_reset_ast.c||libsepol/cil/src/cil_reset_ast.c"
    ]
  },
  "patch_diff": {
    "libsepol/cil/src/cil_reset_ast.c||libsepol/cil/src/cil_reset_ast.c": [
      "File: libsepol/cil/src/cil_reset_ast.c -> libsepol/cil/src/cil_reset_ast.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:   return;",
      "55:  }",
      "58: }",
      "60: static void cil_reset_classperms_set(struct cil_classperms_set *cp_set)",
      "",
      "[Removed Lines]",
      "57:  cil_reset_classperms_list(cp->classperms);",
      "",
      "[Added Lines]",
      "57:  cil_list_destroy(&cp->classperms, CIL_FALSE);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b78560fd372e01c11ca4f183f929d99b1f89f314",
      "candidate_info": {
        "commit_hash": "b78560fd372e01c11ca4f183f929d99b1f89f314",
        "repo": "SELinuxProject/selinux",
        "commit_url": "https://github.com/SELinuxProject/selinux/commit/b78560fd372e01c11ca4f183f929d99b1f89f314",
        "files": [
          "libsepol/src/expand.c"
        ],
        "message": "libsepol: check for valid sensitivity before lookup\n\nCheck the sensitivity is valid and thus the lookup in the name array\n`p_sens_val_to_name` is valid.\n\nFound by oss-fuzz (#42729, #42730, #42735, #42741)\n\n    ==54784==The signal is caused by a READ memory access.\n        #0 0x5a10f3 in mls_semantic_level_expand ./selinux/libsepol/src/expand.c:934:11\n        #1 0x53839e in policydb_user_cache ./selinux/libsepol/src/policydb.c:972:7\n        #2 0x5c6325 in hashtab_map ./selinux/libsepol/src/hashtab.c:236:10\n        #3 0x5392e9 in policydb_index_others ./selinux/libsepol/src/policydb.c:1274:6\n        #4 0x53f90a in policydb_read ./selinux/libsepol/src/policydb.c:4496:6\n        #5 0x50c679 in LLVMFuzzerTestOneInput ./selinux/libsepol/fuzz/binpolicy-fuzzer.c:35:6\n        #6 0x4409e3 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) (./selinux/out/binpolicy-fuzzer+0x4409e3)\n        #7 0x4295bf in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) (./selinux/out/binpolicy-fuzzer+0x4295bf)\n        #8 0x42f850 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (./selinux/out/binpolicy-fuzzer+0x42f850)\n        #9 0x45b6d2 in main (./selinux/out/binpolicy-fuzzer+0x45b6d2)\n        #10 0x7f059fcd71c9 in __libc_start_call_main csu/../sysdeps/nptl/libc_start_call_main.h:58:16\n        #11 0x7f059fcd7277 in __libc_start_main csu/../csu/libc-start.c:409:3\n        #12 0x423900 in _start (./out/binpolicy-fuzzer+0x423900)\n\nSigned-off-by: Christian G\u00f6ttsche <cgzones@googlemail.com>",
        "before_after_code_files": [
          "libsepol/src/expand.c||libsepol/src/expand.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libsepol/src/expand.c||libsepol/src/expand.c": [
          "File: libsepol/src/expand.c -> libsepol/src/expand.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "929:  if (!sl->sens)",
          "930:   return 0;",
          "932:  l->sens = sl->sens;",
          "933:  levdatum = (level_datum_t *) hashtab_search(p->p_levels.table,",
          "934:           p->p_sens_val_to_name[l->sens - 1]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "933:  if (sl->sens > p->p_levels.nprim || !p->p_sens_val_to_name[sl->sens - 1])",
          "934:   return -1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2d35696db33fe17f5878808ff716207029462dd9",
      "candidate_info": {
        "commit_hash": "2d35696db33fe17f5878808ff716207029462dd9",
        "repo": "SELinuxProject/selinux",
        "commit_url": "https://github.com/SELinuxProject/selinux/commit/2d35696db33fe17f5878808ff716207029462dd9",
        "files": [
          "libsepol/src/services.c"
        ],
        "message": "libsepol: NULL pointer offset fix\n\nOn the first loop iteration the variables `r_buf` and `reason_buf_used`\nare NULL respective 0.  Please UBSAN by not adding them but instead\ndirectly assign NULL.\n\n    services.c:800:16: runtime error: applying zero offset to null pointer\n        #0 0x4d4fce in constraint_expr_eval_reason ./libsepol/src/services.c:800:16\n        #1 0x4cf31a in sepol_validate_transition_reason_buffer ./libsepol/src/services.c:1079:8\n\nSigned-off-by: Christian G\u00f6ttsche <cgzones@googlemail.com>",
        "before_after_code_files": [
          "libsepol/src/services.c||libsepol/src/services.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libsepol/src/services.c||libsepol/src/services.c": [
          "File: libsepol/src/services.c -> libsepol/src/services.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "798:   for (x = 0; buffers[x] != NULL; x++) {",
          "799:    while (1) {",
          "801:     len = snprintf(p, reason_buf_len - reason_buf_used,",
          "802:       \"%s\", buffers[x]);",
          "803:     if (len < 0 || len >= reason_buf_len - reason_buf_used) {",
          "",
          "[Removed Lines]",
          "800:     p = *r_buf + reason_buf_used;",
          "",
          "[Added Lines]",
          "800:     p = *r_buf ? (*r_buf + reason_buf_used) : NULL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8a7215c6a5e013d3d1b7e63e8ff9b7c4fc120176",
      "candidate_info": {
        "commit_hash": "8a7215c6a5e013d3d1b7e63e8ff9b7c4fc120176",
        "repo": "SELinuxProject/selinux",
        "commit_url": "https://github.com/SELinuxProject/selinux/commit/8a7215c6a5e013d3d1b7e63e8ff9b7c4fc120176",
        "files": [
          "libsepol/src/policydb_validate.c"
        ],
        "message": "libsepol: validate categories\n\nCheck all categories have valid values, especially important for\naliases.\n\n        ==7888==ERROR: AddressSanitizer: SEGV on unknown address 0x602000400710 (pc 0x00000055debc bp 0x7ffe0ff2a9d0 sp 0x7ffe0ff2a8e0 T0)\n        ==7888==The signal is caused by a READ memory access.\n        #0 0x55debc in write_category_rules_to_conf ./libsepol/src/kernel_to_conf.c:946:9\n        #1 0x55debc in write_mls_rules_to_conf ./libsepol/src/kernel_to_conf.c:1137:7\n        #2 0x55adb1 in sepol_kernel_policydb_to_conf ./libsepol/src/kernel_to_conf.c:3106:7\n        #3 0x55a34f in LLVMFuzzerTestOneInput ./libsepol/fuzz/binpolicy-fuzzer.c:37:9\n        #4 0x45aed3 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) fuzzer.o\n        #5 0x446a12 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) fuzzer.o\n        #6 0x44c93b in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) fuzzer.o\n        #7 0x475dd2 in main (./out/binpolicy-fuzzer+0x475dd2)\n        #8 0x7fe80ccaf7ec in __libc_start_main csu/../csu/libc-start.c:332:16\n        #9 0x423689 in _start (./out/binpolicy-fuzzer+0x423689)\n\nSigned-off-by: Christian G\u00f6ttsche <cgzones@googlemail.com>",
        "before_after_code_files": [
          "libsepol/src/policydb_validate.c||libsepol/src/policydb_validate.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libsepol/src/policydb_validate.c||libsepol/src/policydb_validate.c": [
          "File: libsepol/src/policydb_validate.c -> libsepol/src/policydb_validate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "485:  return -1;",
          "486: }",
          "488: static int validate_datum_array_entries(sepol_handle_t *handle, policydb_t *p, validate_t flavors[])",
          "489: {",
          "490:  map_arg_t margs = { flavors, handle, p->mls };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "488: static int validate_datum(__attribute__ ((unused))hashtab_key_t k, hashtab_datum_t d, void *args)",
          "489: {",
          "490:  symtab_datum_t *s = d;",
          "491:  uint32_t *nprim = (uint32_t *)args;",
          "493:  return !value_isvalid(s->value, *nprim);",
          "494: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "507:  if (p->mls && hashtab_map(p->p_levels.table, validate_level_datum, flavors))",
          "508:   goto bad;",
          "510:  return 0;",
          "512: bad:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "518:  if (hashtab_map(p->p_cats.table, validate_datum, &flavors[SYM_CATS]))",
          "519:   goto bad;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "905:  return -1;",
          "906: }",
          "916: static int validate_symtabs(sepol_handle_t *handle, symtab_t symtabs[], validate_t flavors[])",
          "917: {",
          "918:  unsigned int i;",
          "",
          "[Removed Lines]",
          "908: static int validate_datum(__attribute__ ((unused))hashtab_key_t k, hashtab_datum_t d, void *args)",
          "909: {",
          "910:  symtab_datum_t *s = d;",
          "911:  uint32_t *nprim = (uint32_t *)args;",
          "913:  return !value_isvalid(s->value, *nprim);",
          "914: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e39cf0a1f00efa9c12137560d254cd8135f5b080",
      "candidate_info": {
        "commit_hash": "e39cf0a1f00efa9c12137560d254cd8135f5b080",
        "repo": "SELinuxProject/selinux",
        "commit_url": "https://github.com/SELinuxProject/selinux/commit/e39cf0a1f00efa9c12137560d254cd8135f5b080",
        "files": [
          "libsepol/src/policydb_validate.c"
        ],
        "message": "libsepol: validate permission count of classes\n\nCheck a common class or a class together with its common class parent\ndoes not have more than the supported 32 permissions.\n\n    ==28413==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7f74ec3341a3 bp 0x7ffd0b7e5030 sp 0x7ffd0b7e47e8 T0)\n    ==28413==The signal is caused by a READ memory access.\n    ==28413==Hint: address points to the zero page.\n        #0 0x7f74ec3341a3  string/../sysdeps/x86_64/multiarch/../strchr.S:32\n        #1 0x4bfc78 in strchr (./out/binpolicy-fuzzer+0x4bfc78)\n        #2 0x55b7f2 in class_constraint_rules_to_strs ./libsepol/src/kernel_to_conf.c:288:7\n        #3 0x55b7f2 in constraint_rules_to_strs ./libsepol/src/kernel_to_conf.c:364:9\n        #4 0x55ac80 in sepol_kernel_policydb_to_conf ./libsepol/src/kernel_to_conf.c:3071:7\n        #5 0x55a34f in LLVMFuzzerTestOneInput ./libsepol/fuzz/binpolicy-fuzzer.c:38:9\n        #6 0x45aed3 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) fuzzer.o\n        #7 0x446a12 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) fuzzer.o\n        #8 0x44c93b in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) fuzzer.o\n        #9 0x475dd2 in main (./out/binpolicy-fuzzer+0x475dd2)\n        #10 0x7f74ec2be7ec in __libc_start_main csu/../csu/libc-start.c:332:16\n        #11 0x423689 in _start (./out/binpolicy-fuzzer+0x423689)\n\nSigned-off-by: Christian G\u00f6ttsche <cgzones@googlemail.com>",
        "before_after_code_files": [
          "libsepol/src/policydb_validate.c||libsepol/src/policydb_validate.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libsepol/src/policydb_validate.c||libsepol/src/policydb_validate.c": [
          "File: libsepol/src/policydb_validate.c -> libsepol/src/policydb_validate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "211:   goto bad;",
          "212:  if (validate_constraint_nodes(handle, class->validatetrans, flavors))",
          "213:   goto bad;",
          "215:  return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214:  if (class->permissions.nprim > PERM_SYMTAB_SIZE)",
          "215:   goto bad;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "226:  return validate_class_datum(margs->handle, d, margs->flavors);",
          "227: }",
          "229: static int validate_role_datum(sepol_handle_t *handle, role_datum_t *role, validate_t flavors[])",
          "230: {",
          "231:  if (validate_value(role->s.value, &flavors[SYM_ROLES]))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231: static int validate_common_datum(sepol_handle_t *handle, common_datum_t *common)",
          "232: {",
          "233:  if (common->permissions.nprim > PERM_SYMTAB_SIZE)",
          "234:   goto bad;",
          "236:  return 0;",
          "238: bad:",
          "239:  ERR(handle, \"Invalid common class datum\");",
          "240:  return -1;",
          "241: }",
          "243: static int validate_common_datum_wrapper(__attribute__((unused)) hashtab_key_t k, hashtab_datum_t d, void *args)",
          "244: {",
          "245:  map_arg_t *margs = args;",
          "247:  return validate_common_datum(margs->handle, d);",
          "248: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "425: {",
          "426:  map_arg_t margs = { flavors, handle, p->mls };",
          "428:  if (hashtab_map(p->p_classes.table, validate_class_datum_wrapper, &margs))",
          "429:   goto bad;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "449:  if (hashtab_map(p->p_commons.table, validate_common_datum_wrapper, &margs))",
          "450:   goto bad;",
          "",
          "---------------"
        ]
      }
    }
  ]
}