{
  "cve_id": "CVE-2021-36218",
  "cve_desc": "An issue was discovered in SKALE sgxwallet 1.58.3. sgx_disp_ippsAES_GCMEncrypt allows an out-of-bounds write, resulting in a segfault and compromised enclave. This issue describes a buffer overflow, which was resolved prior to v1.77.0 and not reproducible in latest sgxwallet v1.77.0",
  "repo": "skalenetwork/sgxwallet",
  "patch_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
  "patch_info": {
    "commit_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "repo": "skalenetwork/sgxwallet",
    "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "files": [
      "BLSCrypto.cpp",
      "DKGCrypto.cpp",
      "ECDSACrypto.cpp",
      "SEKManager.cpp",
      "SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl",
      "testw.cpp"
    ],
    "message": "SKALE-3205-restart",
    "before_after_code_files": [
      "BLSCrypto.cpp||BLSCrypto.cpp",
      "DKGCrypto.cpp||DKGCrypto.cpp",
      "ECDSACrypto.cpp||ECDSACrypto.cpp",
      "SEKManager.cpp||SEKManager.cpp",
      "SGXWalletServer.cpp||SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
      "testw.cpp||testw.cpp"
    ]
  },
  "patch_diff": {
    "BLSCrypto.cpp||BLSCrypto.cpp": [
      "File: BLSCrypto.cpp -> BLSCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:     CHECK_STATE(_hexArrayLen > 2 * _len);",
      "90:         _hexArray[j * 2] = hexval[((d[j] >> 4) & 0xF)];",
      "91:         _hexArray[j * 2 + 1] = hexval[(d[j]) & 0x0F];",
      "92:     }",
      "",
      "[Removed Lines]",
      "89:     for (int j = 0; j < _len; j++) {",
      "",
      "[Added Lines]",
      "89:     for (uint64_t j = 0; j < _len; j++) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "105:     CHECK_STATE(_bin_len)",
      "110:     CHECK_STATE(len != 2 * _max_length + 1);",
      "",
      "[Removed Lines]",
      "108:     int len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "[Added Lines]",
      "108:     uint64_t len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "121:         int high = char2int((char) _hex[i * 2]);",
      "122:         int low = char2int((char) _hex[i * 2 + 1]);",
      "",
      "[Removed Lines]",
      "120:     for (int i = 0; i < len / 2; i++) {",
      "",
      "[Added Lines]",
      "120:     for (uint64_t i = 0; i < len / 2; i++) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "248:     strncpy(keyArray->data(), _key, BUF_LEN);",
      "252:     sgx_status_t status = trustedEncryptKeyAES(eid, errStatus, errMsg.data(), keyArray->data(), encryptedKey->data(), &encryptedLen);",
      "",
      "[Removed Lines]",
      "250:     unsigned int encryptedLen = 0;",
      "",
      "[Added Lines]",
      "251:     uint64_t encryptedLen = 0;",
      "",
      "---------------"
    ],
    "DKGCrypto.cpp||DKGCrypto.cpp": [
      "File: DKGCrypto.cpp -> DKGCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "135: string gen_dkg_poly(int _t) {",
      "136:     vector<char> errMsg(BUF_LEN, 0);",
      "137:     int errStatus = 0;",
      "140:     vector <uint8_t> encrypted_dkg_secret(BUF_LEN, 0);",
      "145:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
      "147:     uint64_t length = enc_len;;",
      "",
      "[Removed Lines]",
      "138:     uint32_t enc_len = 0;",
      "144:     sgx_status_t status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "[Added Lines]",
      "138:     uint64_t enc_len = 0;",
      "142:     sgx_status_t status = trustedGenDkgSecretAES(",
      "143:             eid, &errStatus,errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "215:     for (int i = 0; i < _n; i++) {",
      "216:         vector <uint8_t> encryptedSkey(BUF_LEN, 0);",
      "218:         vector<char> currentShare(193, 0);",
      "219:         vector<char> sShareG2(320, 0);",
      "",
      "[Removed Lines]",
      "217:         uint32_t decLen;",
      "",
      "[Added Lines]",
      "217:         uint64_t decLen;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "300:         throw SGXException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
      "301:     }",
      "305:     sgx_status_t status = trustedCreateBlsKeyAES(eid, &errStatus, errMsg.data(), s_shares, encr_key, decKeyLen, encr_bls_key,",
      "306:                                                  &enc_bls_len);",
      "",
      "[Removed Lines]",
      "303:     uint32_t enc_bls_len = 0;",
      "",
      "[Added Lines]",
      "303:     uint64_t enc_bls_len = 0;",
      "",
      "---------------"
    ],
    "ECDSACrypto.cpp||ECDSACrypto.cpp": [
      "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:     vector<char> pub_key_x(BUF_LEN, 0);",
      "55:     vector<char> pub_key_y(BUF_LEN, 0);",
      "59:     sgx_status_t status = trustedGenerateEcdsaKeyAES(eid, &errStatus,",
      "60:                                         errMsg.data(), encr_pr_key.data(), &enc_len,",
      "",
      "[Removed Lines]",
      "57:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "57:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SEKManager.cpp||SEKManager.cpp": [
      "File: SEKManager.cpp -> SEKManager.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "52: void create_test_key() {",
      "53:     int errStatus = 0;",
      "54:     vector<char> errMsg(1024, 0);",
      "57:     SAFE_UINT8_BUF(encrypted_key, BUF_LEN);",
      "",
      "[Removed Lines]",
      "55:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "55:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "110:     auto encrypted_SEK = make_shared < vector < uint8_t >> (BUF_LEN, 0);",
      "114:     sgx_status_t status = trustedSetSEK_backup(eid, &err_status, errMsg.data(), encrypted_SEK->data(), &l,",
      "115:                                                SEK.c_str());",
      "",
      "[Removed Lines]",
      "112:     uint32_t l = 0;",
      "",
      "[Added Lines]",
      "112:     uint64_t l = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "127:     vector<char> errMsg(1024, 0);",
      "128:     int err_status = 0;",
      "129:     vector <uint8_t> encrypted_SEK(1024, 0);",
      "132:     SAFE_CHAR_BUF(SEK, 65);",
      "",
      "[Removed Lines]",
      "130:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SGXWalletServer.cpp||SGXWalletServer.cpp": [
      "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "564:         vector<string> public_keys = calculateAllBlsPublicKeys(public_shares);",
      "567:             throw SGXException(UNKNOWN_ERROR, \"\");",
      "568:         }",
      "",
      "[Removed Lines]",
      "566:         if (public_keys.size() != n) {",
      "",
      "[Added Lines]",
      "566:         if (public_keys.size() != (uint64_t)n) {",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c": [
      "File: secure_enclave/AESUtils.c -> secure_enclave/AESUtils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"stdlib.h\"",
      "28: #include <string.h>",
      "30: #include \"AESUtils.h\"",
      "32: sgx_aes_gcm_128bit_key_t AES_key;",
      "33: sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "37:     if (!message) {",
      "38:         LOG_ERROR(\"Null message in AES_encrypt\");",
      "",
      "[Removed Lines]",
      "35: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "",
      "[Added Lines]",
      "37: #define SAFE_CHAR_BUF(__X__, __Y__)  ;char __X__ [ __Y__ ]; memset(__X__, 0, __Y__);",
      "39: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrBufLen, unsigned  char type,",
      "40:                 unsigned char decryptable, uint64_t* resultLen) {",
      "44:     if (!type) {",
      "45:         LOG_ERROR(\"Null type in AES_encrypt\");",
      "46:         return -1;",
      "47:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47:     uint64_t len = strlen(message) + 1;",
      "50:         LOG_ERROR(\"Output buffer too small\");",
      "51:         return -3;",
      "52:     }",
      "54:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "57:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "58:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "59:                                                      NULL, 0,",
      "60:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "62:     return status;",
      "63: }",
      "",
      "[Removed Lines]",
      "49:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "56:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, strlen(message),",
      "",
      "[Added Lines]",
      "61:     if (2 + len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrBufLen ) {",
      "66:     SAFE_CHAR_BUF(fullMessage, len + 2);",
      "68:     fullMessage[0] = type;",
      "69:     fullMessage[1] = decryptable;",
      "71:     strncpy(fullMessage + 2, message, len );",
      "73:     len = len + 2;",
      "74:     message = fullMessage;",
      "78:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96:                                                    NULL, 0,",
      "97:                                                    (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "133: }",
      "",
      "[Removed Lines]",
      "99:   return status;",
      "100: }",
      "105: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "107:     if (!message) {",
      "108:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "109:         return -1;",
      "110:     }",
      "112:     if (!encr_message) {",
      "113:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "114:         return -2;",
      "115:     }",
      "117:     uint64_t len = strlen(message) + 1;",
      "119:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "120:         LOG_ERROR(\"Output buffer too small\");",
      "121:         return -3;",
      "122:     }",
      "124:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "126:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_DH_key, (uint8_t*)message, strlen(message),",
      "127:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "128:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "129:                                                      NULL, 0,",
      "130:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "132:     return status;",
      "135: int AES_decrypt_DH(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) {",
      "137:     if (!message) {",
      "138:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "139:         return -1;",
      "140:     }",
      "142:     if (!encr_message) {",
      "143:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "144:         return -2;",
      "145:     }",
      "148:     if (length < SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE) {",
      "149:         LOG_ERROR(\"length < SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE\");",
      "150:         return -1;",
      "151:     }",
      "155:     uint64_t len = length - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE;",
      "157:     if (msgLen < len) {",
      "158:         LOG_ERROR(\"Output buffer not large enough\");",
      "159:         return -2;",
      "160:     }",
      "162:     sgx_status_t status = sgx_rijndael128GCM_decrypt(&AES_DH_key,",
      "163:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE, len,",
      "164:                                                      (unsigned char*) message,",
      "165:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "166:                                                      NULL, 0,",
      "167:                                                      (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "169:     return status;",
      "170: }",
      "",
      "[Added Lines]",
      "123:   for (int i = 2; i < strlen(message) + 1; i++) {",
      "124:       message[i - 2 ] = message[i];",
      "125:   }",
      "127:   return status;",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h": [
      "File: secure_enclave/AESUtils.h -> secure_enclave/AESUtils.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: extern sgx_aes_gcm_128bit_key_t AES_key;",
      "28: extern sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "31: int AES_decrypt(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) ;",
      "33: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Removed Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Added Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen,",
      "31:                 unsigned char type, unsigned char decryptable, uint64_t* resultLen);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36: void derive_DH_Key();",
      "39: #endif //SGXD_AESUTILS_H",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39: #define ECDSA '1'",
      "40: #define BLS '2'",
      "41: #define DKG '3'",
      "43: #define DECRYPTABLE '1'",
      "44: #define NON_DECRYPTABLE '2'",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
      "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "122:         abort(); \\",
      "123:     } else {called = true;};",
      "126:     CALL_ONCE",
      "127:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "125: void trustedEnclaveInit(uint32_t _logLevel) {",
      "",
      "[Added Lines]",
      "125: void trustedEnclaveInit(uint64_t _logLevel) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "234: void sealHexSEK(int *errStatus, char *errString,",
      "236:     CALL_ONCE",
      "237:     LOG_INFO(__FUNCTION__);",
      "238:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "235:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "235:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "255:                                            (sgx_sealed_data_t *) encrypted_sek);",
      "256:     CHECK_STATUS(\"seal SEK failed after SEK generation\");",
      "260:     CHECK_STATE(encrypt_text_length = plaintextLen);",
      "",
      "[Removed Lines]",
      "258:     uint32_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "258:     uint64_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "263:     SAFE_CHAR_BUF(unsealedKey, BUF_LEN);",
      "264:     uint32_t decLen = BUF_LEN;",
      "267:     CHECK_STATE(add_text_length == 0);",
      "268:     CHECK_STATE(sgx_is_within_enclave(encrypted_sek,sizeof(sgx_sealed_data_t)));",
      "269:     status = sgx_unseal_data((const sgx_sealed_data_t *)encrypted_sek, NULL, NULL,",
      "",
      "[Removed Lines]",
      "266:     uint32_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "266:     uint64_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "279: }",
      "281: void trustedGenerateSEK(int *errStatus, char *errString,",
      "283:     CALL_ONCE",
      "284:     LOG_INFO(__FUNCTION__);",
      "285:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "282:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "282:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "341: }",
      "343: void trustedSetSEK_backup(int *errStatus, char *errString,",
      "345:     CALL_ONCE",
      "346:     LOG_INFO(__FUNCTION__);",
      "347:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "344:                           uint8_t *encrypted_sek, uint32_t *enc_len, const char *sek_hex) {",
      "",
      "[Added Lines]",
      "344:                           uint8_t *encrypted_sek, uint64_t *enc_len, const char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "372: void trustedGenerateEcdsaKeyAES(int *errStatus, char *errString,",
      "374:     LOG_INFO(__FUNCTION__);",
      "375:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint32_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "[Added Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint64_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "410:     }",
      "411:     strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes);",
      "414:     mpz_get_str(arr_skey_str, ECDSA_SKEY_BASE, skey);",
      "415:     n_zeroes = 64 - strlen(arr_skey_str);",
      "416:     for (int i = 0; i < n_zeroes; i++) {",
      "417:         skey_str[i] = '0';",
      "418:     }",
      "419:     strncpy(skey_str + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "421:     snprintf(errString, BUF_LEN, \"skey len is %d\\n\", (int) strlen(skey_str));",
      "424:     CHECK_STATUS(\"ecdsa private key encryption failed\");",
      "430:     CHECK_STATUS2(\"ecdsa private key decr failed with status %d\");",
      "",
      "[Removed Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, ECDSA_SKEY_LEN);SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "420:     skey_str[ECDSA_SKEY_LEN - 1] = 0;",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN);",
      "428:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, BUF_LEN);",
      "414:     SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN,",
      "424:                              ECDSA, NON_DECRYPTABLE, enc_len);",
      "427:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "439: }",
      "441: void trustedGetPublicEcdsaKeyAES(int *errStatus, char *errString,",
      "443:     LOG_DEBUG(__FUNCTION__);",
      "444:     INIT_ERROR_STATE",
      "448:     mpz_t privateKeyMpz;",
      "449:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "442:                                  uint8_t *encryptedPrivateKey, uint32_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "446:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "441:                                  uint8_t *encryptedPrivateKey, uint64_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "445:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "455:     CHECK_STATE(pub_key_x);",
      "456:     CHECK_STATE(pub_key_y);",
      "459:     CHECK_STATUS2(\"AES_decrypt failed with status %d\");",
      "461:     skey[enc_len - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE] = '\\0';",
      "",
      "[Removed Lines]",
      "458:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "457:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "516: static uint64_t sigCounter = 0;",
      "519:                          const char *hash, char *sigR, char *sigS, uint8_t *sig_v, int base) {",
      "520:     LOG_DEBUG(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "518: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "517: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "526:     CHECK_STATE(sigR);",
      "527:     CHECK_STATE(sigS);",
      "531:     mpz_t privateKeyMpz;",
      "532:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "529:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "528:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "534:     mpz_init(msgMpz);",
      "535:     signature sign = signature_init();",
      "539:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "",
      "[Removed Lines]",
      "537:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "536:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "602: void trustedDecryptKeyAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "605:     LOG_DEBUG(__FUNCTION__);",
      "606:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "603:                           uint32_t enc_len, char *key) {",
      "",
      "[Added Lines]",
      "602:                           uint64_t enc_len, char *key) {",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "615:     if (status != 0) {",
      "",
      "[Removed Lines]",
      "613:     int status = AES_decrypt_DH(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "[Added Lines]",
      "612:     int status = AES_decrypt(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "638: void trustedEncryptKeyAES(int *errStatus, char *errString, const char *key,",
      "640:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "639:                           uint8_t *encryptedPrivateKey, uint32_t *enc_len) {",
      "",
      "[Added Lines]",
      "638:                           uint8_t *encryptedPrivateKey, uint64_t *enc_len) {",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "652:     CHECK_STATUS2(\"AES encrypt failed with status %d\");",
      "656:     SAFE_CHAR_BUF(decryptedKey, BUF_LEN);",
      "660:     CHECK_STATUS2(\"trustedDecryptKey failed with status %d\");",
      "",
      "[Removed Lines]",
      "650:     int status = AES_encrypt_DH((char *)key, encryptedPrivateKey, BUF_LEN);",
      "658:     status = AES_decrypt_DH(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "[Added Lines]",
      "649:     int status = AES_encrypt((char *)key, encryptedPrivateKey, BUF_LEN,",
      "650:                              DKG, DECRYPTABLE, enc_len);",
      "656:     status = AES_decrypt(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "672:     if (strncmp(key, decryptedKey, MAX_KEY_LENGTH) != 0) {",
      "673:         snprintf(errString, BUF_LEN, \"Decrypted key does not match original key\");",
      "674:         LOG_ERROR(errString);",
      "675:         goto clean;",
      "676:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "672:         LOG_ERROR(key);",
      "673:         LOG_ERROR(decryptedKey);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "686: void trustedBlsSignMessageAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "688:                               char *_hashY, char *signature) {",
      "689:     LOG_DEBUG(__FUNCTION__);",
      "690:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "687:                               uint32_t enc_len, char *_hashX,",
      "",
      "[Added Lines]",
      "687:                               uint64_t enc_len, char *_hashX,",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "726: }",
      "728: void",
      "730:     LOG_INFO(__FUNCTION__);",
      "731:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
      "",
      "[Added Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t *enc_len, size_t _t) {",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "739:     CHECK_STATUS(\"gen_dkg_poly failed\")",
      "743:     CHECK_STATUS(\"SGX AES encrypt DKG poly failed\");",
      "747:     SAFE_CHAR_BUF(decr_dkg_secret, DKG_BUFER_LENGTH);",
      "",
      "[Removed Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN);",
      "",
      "[Added Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN,",
      "742:                          DKG, DECRYPTABLE, enc_len);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "769: void",
      "770: trustedDecryptDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret,",
      "772:                            uint8_t *decrypted_dkg_secret) {",
      "773:     LOG_INFO(__FUNCTION__);",
      "774:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "771:                            uint32_t enc_len,",
      "",
      "[Added Lines]",
      "772:                            uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "790: }",
      "794:     LOG_INFO(__FUNCTION__);",
      "795:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "793: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint32_t enc_len) {",
      "",
      "[Added Lines]",
      "794: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint64_t enc_len) {",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "810:     LOG_INFO(\"SGX call completed\");",
      "811: }",
      "814:                                        char *result_str, char *s_shareG2, char *pub_keyB, uint8_t _t, uint8_t _n,",
      "815:                                        uint8_t ind) {",
      "817:     LOG_INFO(__FUNCTION__);",
      "818:     INIT_ERROR_STATE",
      "821:     int status;",
      "823:     CHECK_STATE(encrypted_skey);",
      "",
      "[Removed Lines]",
      "813: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint32_t *dec_len,",
      "820:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "814: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint64_t *dec_len,",
      "821:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "828:     LOG_DEBUG(__FUNCTION__);",
      "832:     SAFE_CHAR_BUF(pub_key_x, BUF_LEN);SAFE_CHAR_BUF(pub_key_y, BUF_LEN);",
      "",
      "[Removed Lines]",
      "830:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "831:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "836:     CHECK_STATUS(\"trustedGenerateEcdsaKeyAES failed\");",
      "840:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "838:     status = AES_decrypt(encrypted_skey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "839:     status = AES_decrypt(encrypted_skey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "848:     status = gen_session_key(skey, pub_keyB, common_key);",
      "850:     CHECK_STATUS(\"gen_session_key failed\")",
      "854:     status = calc_secret_share(getThreadLocalDecryptedDkgPoly(), s_share, _t, _n, ind);",
      "855:     CHECK_STATUS(\"calc secret share failed\")",
      "",
      "[Removed Lines]",
      "846:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "852:     SAFE_CHAR_BUF(s_share, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "847:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "853:     SAFE_CHAR_BUF(s_share, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "858:     status = calc_secret_shareG2(s_share, s_shareG2);",
      "859:     CHECK_STATUS(\"invalid decr secret share\");",
      "862:     status=xor_encrypt(common_key, s_share, cypher);",
      "864:     CHECK_STATUS(\"xor_encrypt failed\")",
      "",
      "[Removed Lines]",
      "861:     SAFE_CHAR_BUF(cypher, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "862:     SAFE_CHAR_BUF(cypher, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "875:     LOG_INFO(\"SGX call completed\");",
      "876: }",
      "879:                                char *public_shares,",
      "880:                                unsigned _t, unsigned _n) {",
      "881:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "878: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "879: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "913:     CHECK_STATE(s_share);",
      "914:     CHECK_STATE(encryptedPrivateKey);",
      "918:     mpz_t s;",
      "919:     mpz_init(s);",
      "923:     CHECK_STATUS2(\"AES_decrypt failed (in trustedDkgVerifyAES) with status %d\");",
      "927:     strncpy(encr_sshare, s_share, ECDSA_SKEY_LEN - 1);",
      "931:     status = session_key_recover(skey, s_share, common_key);",
      "933:     CHECK_STATUS(\"session_key_recover failed\");",
      "937:     status=xor_decrypt(common_key, encr_sshare, decr_sshare);",
      "",
      "[Removed Lines]",
      "916:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "921:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "925:     SAFE_CHAR_BUF(encr_sshare, ECDSA_SKEY_LEN);",
      "929:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "935:     SAFE_CHAR_BUF(decr_sshare, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "917:     SAFE_CHAR_BUF(skey,BUF_LEN);",
      "922:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "926:     SAFE_CHAR_BUF(encr_sshare, BUF_LEN);",
      "930:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "936:     SAFE_CHAR_BUF(decr_sshare, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "955: void trustedCreateBlsKeyAES(int *errStatus, char *errString, const char *s_shares,",
      "956:                             uint8_t *encryptedPrivateKey, uint64_t key_len, uint8_t *encr_bls_key,",
      "959:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "957:                             uint32_t *enc_bls_key_len) {",
      "",
      "[Added Lines]",
      "958:                             uint64_t *enc_bls_key_len) {",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "964:     CHECK_STATE(encryptedPrivateKey);",
      "965:     CHECK_STATE(encr_bls_key);",
      "969:     mpz_t sum;",
      "970:     mpz_init(sum);",
      "",
      "[Removed Lines]",
      "967:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "968:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "978:     mpz_init(bls_key);",
      "982:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "984:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "981:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "982:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "1038:     strncpy(key_share + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "1039:     key_share[BLS_KEY_LENGTH - 1] = 0;",
      "1043:     CHECK_STATUS2(\"aes encrypt bls private key failed with status %d \");",
      "1047:     SET_SUCCESS",
      "1048:     clean:",
      "",
      "[Removed Lines]",
      "1041:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN);",
      "",
      "[Added Lines]",
      "1042:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN, BLS, NON_DECRYPTABLE, enc_bls_key_len);",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "1064:     CHECK_STATE(bls_pub_key);",
      "1065:     CHECK_STATE(encryptedPrivateKey);",
      "1071:     CHECK_STATUS2(\"AES decrypt failed %d\");",
      "",
      "[Removed Lines]",
      "1067:     SAFE_CHAR_BUF(skey_hex, ECDSA_SKEY_LEN);",
      "1069:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "1066:     SAFE_CHAR_BUF(skey_hex, BUF_LEN);",
      "1068:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, BUF_LEN);",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
      "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
      "--- Hunk 1 ---",
      "[Context before]",
      "11:  trusted {",
      "12:   include \"sgx_tgmp.h\"",
      "17:         public void trustedGenerateSEK(",
      "18:                                 [out] int *errStatus,",
      "19:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "20:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "22:                                 [out, count = 65] char* hex_SEK);",
      "24:         public void trustedSetSEK(",
      "",
      "[Removed Lines]",
      "14:   public void trustedEnclaveInit(uint32_t _logLevel);",
      "21:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "14:   public void trustedEnclaveInit(uint64_t _logLevel);",
      "21:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30:                                 [out] int *errStatus,",
      "31:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "32:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "34:                                 [in, string] const char* SEK_hex);",
      "36:         public void trustedGenerateEcdsaKeyAES (",
      "37:                                 [out] int *errStatus,",
      "38:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "39:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "41:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "42:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "33:                                 [out] uint32_t *enc_len,",
      "40:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "33:                                 [out] uint64_t *enc_len,",
      "40:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "45:                                 [out] int *errStatus,",
      "46:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "47:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "49:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "50:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "48:                                 uint32_t dec_len,",
      "",
      "[Added Lines]",
      "48:                                 uint64_t dec_len,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "53:                                 [out] int *errStatus,",
      "54:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "55:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "57:                                 [in, string] const char* hash,",
      "58:                                 [out, count = SMALL_BUF_SIZE] char* sig_r,",
      "59:                                 [out, count = SMALL_BUF_SIZE] char* sig_s,",
      "",
      "[Removed Lines]",
      "56:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "56:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "65:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "66:                                 [in, count = SMALL_BUF_SIZE] const char* key,",
      "67:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "70:         public void trustedDecryptKeyAES (",
      "71:                                 [out] int *errStatus,",
      "72:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "73:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "75:                                 [out, count = SMALL_BUF_SIZE] char* key );",
      "77:         public void trustedGenDkgSecretAES (",
      "78:                                 [out] int *errStatus,",
      "79:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "80:                                 [out, count = 3072] uint8_t* encrypted_dkg_secret,",
      "83:         public void trustedDecryptDkgSecretAES (",
      "84:                                 [out] int *errStatus,",
      "85:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "86:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "88:                                 [out, count = 3072] uint8_t* decrypted_dkg_secret",
      "89:                                 );",
      "",
      "[Removed Lines]",
      "68:                                 [out] uint32_t *enc_len);",
      "74:                                 uint32_t enc_len,",
      "81:                                 [out] uint32_t * enc_len, size_t _t);",
      "87:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "68:                                 [out] uint64_t *enc_len);",
      "74:                                 uint64_t enc_len,",
      "81:                                 [out] uint64_t * enc_len, size_t _t);",
      "87:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "92:                                 [out] int *errStatus,",
      "93:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "94:                                 [in, count = 3050] uint8_t* encrypted_poly,",
      "97:         public void trustedGetEncryptedSecretShareAES(",
      "98:                                 [out]int *errStatus,",
      "99:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "100:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_skey,",
      "102:                                 [out, count = 193] char* result_str,",
      "103:                                 [out, count = 320] char* s_shareG2,",
      "104:                                 [in, string] char* pub_keyB,",
      "",
      "[Removed Lines]",
      "95:                                 uint32_t enc_len);",
      "101:                                 [out] uint32_t* dec_len,",
      "",
      "[Added Lines]",
      "95:                                 uint64_t enc_len);",
      "101:                                 [out] uint64_t* dec_len,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "110:                                 [out] int *errStatus,",
      "111:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "112:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "114:                                 [out, count = 10000] char* public_shares,",
      "115:                                 unsigned _t,",
      "116:                                 unsigned _n);",
      "",
      "[Removed Lines]",
      "113:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "113:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "133:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "134:                                 uint64_t key_len,",
      "135:                                 [out, count = SMALL_BUF_SIZE] uint8_t * encr_bls_key,",
      "138:         public void trustedBlsSignMessageAES (",
      "139:                                 [out] int *errStatus,",
      "140:                                 [out, count = TINY_BUF_SIZE] char* err_string,",
      "141:                                 [in, count = TINY_BUF_SIZE] uint8_t* encrypted_key,",
      "143:                                 [in, string] char* hashX ,",
      "144:                                 [in, string] char* hashY,",
      "145:                                 [out, count = SMALL_BUF_SIZE] char* signature);",
      "",
      "[Removed Lines]",
      "136:                                 [out] uint32_t *enc_bls_key_len);",
      "142:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "136:                                 [out] uint64_t *enc_bls_key_len);",
      "142:                                 uint64_t enc_len,",
      "",
      "---------------"
    ],
    "testw.cpp||testw.cpp": [
      "File: testw.cpp -> testw.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "127:     vector<char> pubKeyX(BUF_LEN, 0);",
      "128:     vector<char> pubKeyY(BUF_LEN, 0);",
      "131:     PRINT_SRC_LINE",
      "132:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "133:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "130:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160:     vector <uint8_t> encrPrivKey(BUF_LEN, 0);",
      "161:     vector<char> pubKeyX(BUF_LEN, 0);",
      "162:     vector<char> pubKeyY(BUF_LEN, 0);",
      "164:     PRINT_SRC_LINE",
      "165:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "166:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "163:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "163:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "177:     vector <uint8_t> encPrivKey(BUF_LEN, 0);",
      "178:     vector<char> pubKeyX(BUF_LEN, 0);",
      "179:     vector<char> pubKeyY(BUF_LEN, 0);",
      "182:     PRINT_SRC_LINE",
      "183:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encPrivKey.data(), &encLen, pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "180:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "181:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "291:     vector<char> errMsg(BUF_LEN, 0);",
      "293:     int errStatus = 0;",
      "296:     PRINT_SRC_LINE",
      "297:     auto status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), &encLen, 32);",
      "",
      "[Removed Lines]",
      "294:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "295:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "314:     vector<char> errMsg(BUF_LEN, 0);",
      "316:     int errStatus = 0;",
      "319:     unsigned t = 32, n = 32;",
      "320:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "317:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "318:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "363:     vector<char> result(BUF_LEN, 0);",
      "365:     int errStatus = 0;",
      "368:     vector <uint8_t> encryptedDKGSecret(BUF_LEN, 0);",
      "369:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "366:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "367:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "694: TEST_CASE_METHOD(TestFixture, \"AES encrypt/decrypt\", \"[aes-encrypt-decrypt]\") {",
      "695:     int errStatus = 0;",
      "696:     vector<char> errMsg(BUF_LEN, 0);",
      "698:     string key = SAMPLE_AES_KEY;",
      "699:     vector <uint8_t> encrypted_key(BUF_LEN, 0);",
      "",
      "[Removed Lines]",
      "697:     uint32_t encLen;",
      "",
      "[Added Lines]",
      "698:     uint64_t encLen;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a1dfeb15fa9c307c48b1b1b51e84a0b18f433ff3",
      "candidate_info": {
        "commit_hash": "a1dfeb15fa9c307c48b1b1b51e84a0b18f433ff3",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/a1dfeb15fa9c307c48b1b1b51e84a0b18f433ff3",
        "files": [
          "secure_enclave/DKGUtils.cpp",
          "secure_enclave/secure_enclave.c"
        ],
        "message": "SKALE-2002 refactoring",
        "before_after_code_files": [
          "secure_enclave/DKGUtils.cpp||secure_enclave/DKGUtils.cpp",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ],
          "candidate": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/DKGUtils.cpp||secure_enclave/DKGUtils.cpp": [
          "File: secure_enclave/DKGUtils.cpp -> secure_enclave/DKGUtils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: #include \"DHDkg.h\"",
          "45: string stringFromFr(libff::alt_bn128_Fr& _el) {",
          "",
          "[Removed Lines]",
          "43: using namespace  std;",
          "",
          "[Added Lines]",
          "43: using namespace std;",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "970:         pub_key_y[i] = '0';",
          "971:     }",
          "972:     strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes);",
          "975:     char arr_skey_str[mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2];",
          "976:     mpz_get_str(arr_skey_str, ECDSA_SKEY_BASE, skey);",
          "",
          "[Removed Lines]",
          "973:     char skey_str[mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2];",
          "",
          "[Added Lines]",
          "973:     char skey_str[ECDSA_SKEY_LEN];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "979:         skey_str[i] = '0';",
          "980:     }",
          "981:     strncpy(skey_str + n_zeroes, arr_skey_str, 65 - n_zeroes);",
          "982:     snprintf(errString, BUF_LEN, \"skey is %s len %d\\n\", skey_str, strlen(skey_str));",
          "984:     int stat = AES_encrypt(skey_str, encryptedPrivateKey);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "982:     skey_str[ECDSA_SKEY_LEN - 1] = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1233:                      uint32_t enc_len, char *key) {",
          "1234:     LOG_DEBUG(__FUNCTION__);",
          "1240:     int status = AES_decrypt(encryptedPrivateKey, enc_len, key);",
          "",
          "[Removed Lines]",
          "1236:     uint32_t decLen;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1245:         return;",
          "1246:     }",
          "1256:     uint64_t keyLen = strnlen(key, MAX_KEY_LENGTH);",
          "",
          "[Removed Lines]",
          "1248:     if (decLen > MAX_KEY_LENGTH) {",
          "1250:         snprintf(errString, BUF_LEN, \"wrong decLen\");//\"decLen != MAX_KEY_LENGTH\");",
          "1251:         return;",
          "1252:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1622:     skey_hex[ECDSA_SKEY_LEN - 1] = 0;",
          "1624:     if (calc_bls_public_key(skey_hex, bls_pub_key) != 0) {",
          "1626:         snprintf(errString, BUF_LEN, \"could not calculate bls public key\");",
          "1627:         return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1618:         LOG_ERROR(skey_hex);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2f267c40abf7e7c9dcff851b3d6d57559753072f",
      "candidate_info": {
        "commit_hash": "2f267c40abf7e7c9dcff851b3d6d57559753072f",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/2f267c40abf7e7c9dcff851b3d6d57559753072f",
        "files": [
          "DKGCrypto.cpp",
          "DKGCrypto.h",
          "SGXWalletServer.cpp",
          "secure_enclave/DKGUtils.cpp",
          "secure_enclave/DKGUtils.h",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl",
          "testw.cpp"
        ],
        "message": "SKALE-2454-add-logs-to-enclave",
        "before_after_code_files": [
          "DKGCrypto.cpp||DKGCrypto.cpp",
          "DKGCrypto.h||DKGCrypto.h",
          "SGXWalletServer.cpp||SGXWalletServer.cpp",
          "secure_enclave/DKGUtils.cpp||secure_enclave/DKGUtils.cpp",
          "secure_enclave/DKGUtils.h||secure_enclave/DKGUtils.h",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "DKGCrypto.cpp||DKGCrypto.cpp": [
          "File: DKGCrypto.cpp -> DKGCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: #define  DKG_MAX_SEALED_LEN 3100",
          "43:     string delim;",
          "44:     delim.push_back(symbol);",
          "45:     vector<string> G2_strings;",
          "",
          "[Removed Lines]",
          "41: vector<string> splitString(const char *koefs, const char symbol) {",
          "42:     string str(koefs);",
          "",
          "[Added Lines]",
          "41: vector<string> splitString(const char *coeffs, const char symbol) {",
          "42:     string str(coeffs);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:         if (pos == string::npos) pos = str.length();",
          "50:         string token = str.substr(prev, pos - prev);",
          "51:         if (!token.empty()) {",
          "54:         }",
          "55:         prev = pos + delim.length();",
          "56:     } while (pos < str.length() && prev < str.length());",
          "",
          "[Removed Lines]",
          "52:             string koef(token.c_str());",
          "53:             G2_strings.push_back(koef);",
          "",
          "[Added Lines]",
          "52:             string coeff(token.c_str());",
          "53:             G2_strings.push_back(coeff);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "249:     char errMsg1[BUF_LEN];",
          "250:     int err_status = 0;",
          "253:     uint8_t encr_key[BUF_LEN];",
          "254:     memset(encr_key, 0, BUF_LEN);",
          "256:         throw SGXException(INVALID_HEX, \"Invalid encryptedPolyHex\");",
          "257:     }",
          "258:     int result;",
          "",
          "[Removed Lines]",
          "252:     uint64_t dec_key_len;",
          "255:     if (!hex2carray(encryptedKeyHex, &dec_key_len, encr_key)) {",
          "",
          "[Added Lines]",
          "252:     uint64_t decKeyLen;",
          "255:     if (!hex2carray(encryptedKeyHex, &decKeyLen, encr_key)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "267:     if (!encryptKeys)",
          "269:     else",
          "272:     if (result == 2) {",
          "273:         throw SGXException(INVALID_HEX, \"Invalid public shares\");",
          "",
          "[Removed Lines]",
          "268:         trustedDkgVerify(eid, &err_status, errMsg1, pshares, encr_sshare, encr_key, dec_key_len, t, ind, &result);",
          "270:         trustedDkgVerify_aes(eid, &err_status, errMsg1, pshares, encr_sshare, encr_key, dec_key_len, t, ind, &result);",
          "",
          "[Added Lines]",
          "268:         trustedDkgVerify(eid, &err_status, errMsg1, pshares, encr_sshare, encr_key, decKeyLen, t, ind, &result);",
          "270:         trustedDkgVerify_aes(eid, &err_status, errMsg1, pshares, encr_sshare, encr_key, decKeyLen, t, ind, &result);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "289:     char errMsg1[BUF_LEN];",
          "290:     int err_status = 0;",
          "293:     uint8_t encr_bls_key[BUF_LEN];",
          "294:     memset(encr_bls_key, 0, BUF_LEN);",
          "295:     uint8_t encr_key[BUF_LEN];",
          "296:     memset(encr_key, 0, BUF_LEN);",
          "298:         throw SGXException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
          "299:     }",
          "",
          "[Removed Lines]",
          "292:     uint64_t dec_key_len;",
          "297:     if (!hex2carray(encryptedKeyHex, &dec_key_len, encr_key)) {",
          "",
          "[Added Lines]",
          "292:     uint64_t decKeyLen;",
          "297:     if (!hex2carray(encryptedKeyHex, &decKeyLen, encr_key)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "304:     if (!encryptKeys)",
          "306:     else",
          "309:     if (err_status != 0) {",
          "",
          "[Removed Lines]",
          "305:         trustedCreateBlsKey(eid, &err_status, errMsg1, s_shares, encr_key, dec_key_len, encr_bls_key, &enc_bls_len);",
          "307:         trustedCreateBlsKey_aes(eid, &err_status, errMsg1, s_shares, encr_key, dec_key_len, encr_bls_key, &enc_bls_len);",
          "",
          "[Added Lines]",
          "305:         trustedCreateBlsKey(eid, &err_status, errMsg1, s_shares, encr_key, decKeyLen, encr_bls_key, &enc_bls_len);",
          "307:         trustedCreateBlsKey_aes(eid, &err_status, errMsg1, s_shares, encr_key, decKeyLen, encr_bls_key, &enc_bls_len);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "326: }",
          "328: vector<string> GetBLSPubKey(const char *encryptedKeyHex) {",
          "330:     char errMsg1[BUF_LEN];",
          "337:         throw SGXException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
          "338:     }",
          "343:     if (!encryptKeys)",
          "345:     else",
          "349:         throw SGXException(ERROR_IN_ENCLAVE, \"Failed to get BLS public key in enclave\");",
          "350:     }",
          "353:     spdlog::debug(\"errMsg1 is {}\", errMsg1);",
          "354:     spdlog::debug(\"pub key is \");",
          "355:     for (int i = 0; i < 4; i++)",
          "359: }",
          "363:     vector<char> errMsg1(1024, 0);",
          "364:     int err_status = 0;",
          "366:     string DH_key_name = polyName + \"_\" + to_string(ind) + \":\";",
          "371:     vector<char> hexEncrKey(2 * BUF_LEN, 0);",
          "376:         throw SGXException(INVALID_HEX, \"Invalid hexEncrKey\");",
          "377:     }",
          "382:     char DHKey[ECDSA_SKEY_LEN];",
          "384:     if (!encryptKeys)",
          "386:     else",
          "388:     if (err_status != 0) {",
          "389:         throw SGXException(/*ERROR_IN_ENCLAVE*/ err_status, \"decrypt key failed in enclave\");",
          "390:     }",
          "",
          "[Removed Lines]",
          "332:     int err_status = 0;",
          "334:     uint64_t dec_key_len;",
          "335:     uint8_t encr_key[BUF_LEN];",
          "336:     if (!hex2carray(encryptedKeyHex, &dec_key_len, encr_key)) {",
          "340:     char pub_key[320];",
          "341:     spdlog::debug(\"dec_key_len is {}\", dec_key_len);",
          "344:         trustedGetBlsPubKey(eid, &err_status, errMsg1, encr_key, dec_key_len, pub_key);",
          "346:         trustedGetBlsPubKey_aes(eid, &err_status, errMsg1, encr_key, dec_key_len, pub_key);",
          "347:     if (err_status != 0) {",
          "348:         spdlog::error(string(errMsg1) + \" . Status is  {}\", err_status);",
          "351:     vector<string> pub_key_vect = splitString(pub_key, ':');",
          "356:         spdlog::debug(\"{}\", pub_key_vect.at(i));",
          "358:     return pub_key_vect;",
          "361: string decrypt_DHKey(const string &polyName, int ind) {",
          "367:     shared_ptr<string> hexEncrKey_ptr = SGXWalletServer::readFromDb(DH_key_name, \"DKG_DH_KEY_\");",
          "369:     spdlog::debug(\"encr DH key is {}\", *hexEncrKey_ptr);",
          "373:     uint64_t DH_enc_len = 0;",
          "374:     uint8_t encrypted_DHkey[BUF_LEN];",
          "375:     if (!hex2carray(hexEncrKey_ptr->c_str(), &DH_enc_len, encrypted_DHkey)) {",
          "378:     spdlog::debug(\"encr DH key length is {}\", DH_enc_len);",
          "379:     spdlog::debug(\"hex encr DH key length is {}\", hexEncrKey_ptr->length());",
          "385:         decrypt_key(eid, &err_status, errMsg1.data(), encrypted_DHkey, DH_enc_len, DHKey);",
          "387:         decrypt_key_aes(eid, &err_status, errMsg1.data(), encrypted_DHkey, DH_enc_len, DHKey);",
          "",
          "[Added Lines]",
          "332:     int errStatus = 0;",
          "334:     uint64_t decKeyLen;",
          "335:     uint8_t encrKey[BUF_LEN];",
          "336:     if (!hex2carray(encryptedKeyHex, &decKeyLen, encrKey)) {",
          "340:     char pubKey[320];",
          "341:     spdlog::debug(\"decKeyLen is {}\", decKeyLen);",
          "344:         trustedGetBlsPubKey(eid, &errStatus, errMsg1, encrKey, decKeyLen, pubKey);",
          "346:         trustedGetBlsPubKeyAES(eid, &errStatus, errMsg1, encrKey, decKeyLen, pubKey);",
          "347:     if (errStatus != 0) {",
          "348:         spdlog::error(string(errMsg1) + \" . Status is  {}\", errStatus);",
          "351:     vector<string> pubKeyVect = splitString(pubKey, ':');",
          "356:         spdlog::debug(\"{}\", pubKeyVect.at(i));",
          "358:     return pubKeyVect;",
          "361: string decryptDHKey(const string &polyName, int ind) {",
          "367:     shared_ptr<string> hexEncrKeyPtr = SGXWalletServer::readFromDb(DH_key_name, \"DKG_DH_KEY_\");",
          "369:     spdlog::debug(\"encr DH key is {}\", *hexEncrKeyPtr);",
          "373:     uint64_t dhEncLen = 0;",
          "374:     uint8_t encryptedDHKey[BUF_LEN];",
          "375:     if (!hex2carray(hexEncrKeyPtr->c_str(), &dhEncLen, encryptedDHKey)) {",
          "378:     spdlog::debug(\"encr DH key length is {}\", dhEncLen);",
          "379:     spdlog::debug(\"hex encr DH key length is {}\", hexEncrKeyPtr->length());",
          "385:         decrypt_key(eid, &err_status, errMsg1.data(), encryptedDHKey, dhEncLen, DHKey);",
          "387:         decrypt_key_aes(eid, &err_status, errMsg1.data(), encryptedDHKey, dhEncLen, DHKey);",
          "",
          "---------------"
        ],
        "DKGCrypto.h||DKGCrypto.h": [
          "File: DKGCrypto.h -> DKGCrypto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: std::vector <std::vector<std::string>> get_verif_vect(const char* encryptedPolyHex, int t, int n);",
          "36: std::string trustedGetSecretShares(const std::string& _polyName, const char* _encryptedPolyHex, const std::vector<std::string>& _publicKeys, int _t, int _n);",
          "38: bool verifyShares(const char* publicShares, const char* encr_sshare, const char * encryptedKeyHex, int t, int n, int ind);",
          "42: bool CreateBLSShare( const std::string& blsKeyName, const char * s_shares, const char * encryptedKeyHex);",
          "",
          "[Removed Lines]",
          "34: std::vector<std::string> splitString(const char* koefs, const char symbol);",
          "40: std::string decrypt_DHKey(const std::string& polyName, int ind);",
          "",
          "[Added Lines]",
          "34: std::vector<std::string> splitString(const char* coeffs, const char symbol);",
          "40: std::string decryptDHKey(const std::string& polyName, int ind);",
          "",
          "---------------"
        ],
        "SGXWalletServer.cpp||SGXWalletServer.cpp": [
          "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "671:         string shareG2_name = \"shareG2_\" + _polyName + \"_\" + to_string(_ind) + \":\";",
          "672:         shared_ptr<string> shareG2_ptr = readFromDb(shareG2_name);",
          "676:         result[\"share*G2\"] = *shareG2_ptr;",
          "677:         result[\"dhKey\"] = DHKey;",
          "",
          "[Removed Lines]",
          "674:         string DHKey = decrypt_DHKey(_polyName, _ind);",
          "",
          "[Added Lines]",
          "674:         string DHKey = decryptDHKey(_polyName, _ind);",
          "",
          "---------------"
        ],
        "secure_enclave/DKGUtils.cpp||secure_enclave/DKGUtils.cpp": [
          "File: secure_enclave/DKGUtils.cpp -> secure_enclave/DKGUtils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:   return result;",
          "87: }",
          "91:     std::string delim;",
          "92:     delim.push_back(symbol);",
          "93:     std::vector<libff::alt_bn128_Fr> tokens;",
          "",
          "[Removed Lines]",
          "89: std::vector<libff::alt_bn128_Fr> SplitStringToFr(const char* koefs, const char symbol){",
          "90:     std::string str(koefs);",
          "",
          "[Added Lines]",
          "89: std::vector<libff::alt_bn128_Fr> SplitStringToFr(const char* coeffs, const char symbol){",
          "90:     std::string str(coeffs);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:         if (pos == std::string::npos) pos = str.length();",
          "99:         std::string token = str.substr(prev, pos-prev);",
          "100:         if (!token.empty()) {",
          "103:         }",
          "104:         prev = pos + delim.length();",
          "105:     }",
          "",
          "[Removed Lines]",
          "101:             libff::alt_bn128_Fr koef(token.c_str());",
          "102:             tokens.push_back(koef);",
          "",
          "[Added Lines]",
          "101:             libff::alt_bn128_Fr coeff(token.c_str());",
          "102:             tokens.push_back(coeff);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "146:   return value;",
          "147: }",
          "150:     unsigned _t, unsigned _n) {                                                 // separated by \":\"",
          "152:   std::string result;",
          "153:   char symbol = ':';",
          "156:     for (size_t i = 0; i < _n; ++i) {",
          "157:     libff::alt_bn128_Fr secret_share = PolynomialValue(poly, libff::alt_bn128_Fr(i + 1), _t);",
          "",
          "[Removed Lines]",
          "149: void calc_secret_shares(const char* decrypted_koefs, char * secret_shares,      // calculates secret shares in base 10 to a string secret_shares,",
          "154:   std::vector<libff::alt_bn128_Fr> poly =  SplitStringToFr(decrypted_koefs, symbol);",
          "",
          "[Added Lines]",
          "149: void calc_secret_shares(const char* decrypted_coeffs, char * secret_shares,      // calculates secret shares in base 10 to a string secret_shares,",
          "154:   std::vector<libff::alt_bn128_Fr> poly =  SplitStringToFr(decrypted_coeffs, symbol);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "159:     result += \":\";",
          "160:   }",
          "161:   strncpy(secret_shares, result.c_str(), result.length() + 1);",
          "163: }",
          "166:                         unsigned _t, unsigned _n, unsigned ind) {",
          "168:   libff::init_alt_bn128_params();",
          "169:   char symbol = ':';",
          "171:   if ( poly.size() != _t){",
          "172:     return 1;",
          "173:   }",
          "",
          "[Removed Lines]",
          "165: int calc_secret_share(const char* decrypted_koefs, char * s_share,",
          "170:   std::vector<libff::alt_bn128_Fr> poly =  SplitStringToFr(decrypted_koefs, symbol);",
          "",
          "[Added Lines]",
          "165: int calc_secret_share(const char* decrypted_coeffs, char * s_share,",
          "170:   std::vector<libff::alt_bn128_Fr> poly =  SplitStringToFr(decrypted_coeffs, symbol);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "183: }",
          "186:                                             unsigned _t, unsigned ind){",
          "188:   libff::init_alt_bn128_params();",
          "189:   char symbol = ':';",
          "",
          "[Removed Lines]",
          "185: void calc_secret_shareG2_old(const char* decrypted_koefs, char * s_shareG2,",
          "190:   std::vector<libff::alt_bn128_Fr> poly =  SplitStringToFr(decrypted_koefs, symbol);",
          "",
          "[Added Lines]",
          "185: void calc_secret_shareG2_old(const char* decrypted_coeffs, char * s_shareG2,",
          "190:   std::vector<libff::alt_bn128_Fr> poly =  SplitStringToFr(decrypted_coeffs, symbol);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "229:   return 0;",
          "230: }",
          "233:                         unsigned _t) {",
          "234:   libff::init_alt_bn128_params();",
          "236:   std::string result;",
          "237:   char symbol = ':';",
          "239:   if (poly.size() != _t){",
          "240:     return 1;",
          "241:   }",
          "",
          "[Removed Lines]",
          "232: int calc_public_shares(const char* decrypted_koefs, char * public_shares,",
          "238:   std::vector<libff::alt_bn128_Fr> poly =  SplitStringToFr(decrypted_koefs, symbol);",
          "",
          "[Added Lines]",
          "232: int calc_public_shares(const char* decrypted_coeffs, char * public_shares,",
          "238:   std::vector<libff::alt_bn128_Fr> poly =  SplitStringToFr(decrypted_coeffs, symbol);",
          "",
          "---------------"
        ],
        "secure_enclave/DKGUtils.h||secure_enclave/DKGUtils.h": [
          "File: secure_enclave/DKGUtils.h -> secure_enclave/DKGUtils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: EXTERNC int gen_dkg_poly( char* secret, unsigned _t);",
          "38:                         unsigned _t, unsigned _n);",
          "41:                                unsigned _t, unsigned _n, unsigned ind);",
          "44:                         unsigned _t);",
          "46: EXTERNC int Verification ( char * public_shares, mpz_t decr_secret_share, int _t, int ind);",
          "",
          "[Removed Lines]",
          "37: EXTERNC void calc_secret_shares(const char* decrypted_koefs, char * secret_shares,",
          "40: EXTERNC int calc_secret_share(const char* decrypted_koefs, char * s_share,",
          "43: EXTERNC int calc_public_shares(const char* decrypted_koefs, char * public_shares,",
          "",
          "[Added Lines]",
          "37: EXTERNC void calc_secret_shares(const char* decrypted_coeffs, char * secret_shares,",
          "40: EXTERNC int calc_secret_share(const char* decrypted_coeffs, char * s_share,",
          "43: EXTERNC int calc_public_shares(const char* decrypted_coeffs, char * public_shares,",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "704: }",
          "707:                         uint32_t *dec_len,",
          "708:                         char *DH_key, char *s_shareG2, uint8_t _t, uint8_t _n, uint8_t ind1) {",
          "710:     uint32_t enc_len;",
          "",
          "[Removed Lines]",
          "706: void trustedComplaintResponse(int *err_status, char *err_string, uint8_t *encrypted_DHkey, uint8_t *encrypted_dkg_secret,",
          "",
          "[Added Lines]",
          "706: void trustedComplaintResponse(int *err_status, char *err_string, uint8_t *encryptedDHKey, uint8_t *encrypted_dkg_secret,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1694: }",
          "1696: void",
          "1699:     char skey_hex[ECDSA_SKEY_LEN];",
          "",
          "[Removed Lines]",
          "1697: trustedGetBlsPubKey_aes(int *err_status, char *err_string, uint8_t *encrypted_key, uint64_t key_len, char *bls_pub_key) {",
          "",
          "[Added Lines]",
          "1697: trustedGetBlsPubKeyAES(int *err_status, char *err_string, uint8_t *encrypted_key, uint64_t key_len, char *bls_pub_key) {",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #define ECDSA_SKEY_BASE 16",
          "4: #define ECDSA_ENCR_LEN 93",
          "5: #define ECDSA_BIN_LEN 33",
          "7: enclave {",
          "9:  trusted {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: #define SMALL_BUF_SIZE 1024",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:   public void trustedGenerateEcdsaKey (",
          "32:                                 [user_check] int *err_status,",
          "35:                                 [user_check] uint32_t *enc_len,",
          "39:   public void trustedGetPublicEcdsaKey (",
          "40:                                 [user_check] int *err_status,",
          "43:                                 uint32_t dec_len,",
          "47:   public void encrypt_key (",
          "48:                                 [user_check] int *err_status,",
          "52:                                 [user_check] uint32_t *enc_len);",
          "54:                 public void decrypt_key (",
          "55:                                 [user_check] int *err_status,",
          "58:                                 uint32_t enc_len,",
          "61:   public void trustedBlsSignMessage (",
          "62:                                 [user_check] int *err_status,",
          "65:                                 uint32_t enc_len,",
          "70:                 public void trustedGenDkgSecret (",
          "71:                                 [user_check] int *err_status,",
          "73:                                 [out, count = 3050] uint8_t* encrypted_dkg_secret,",
          "74:                                 [user_check] uint32_t * enc_len,",
          "75:                                 size_t _t);",
          "77:                 public void trustedDecryptDkgSecret (",
          "78:                              [user_check] int *err_status,",
          "80:                              [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "81:                              [out, count = 2490] uint8_t* decrypted_dkg_secret,",
          "82:                              [user_check] uint32_t* dec_len);",
          "84:                 public void trustedGetSecretShares (",
          "85:                                 [user_check] int *err_status,",
          "87:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "88:                                 [user_check] uint32_t* dec_len,",
          "89:                                 [out, count = 2490] char* secret_shares,",
          "",
          "[Removed Lines]",
          "33:                                 [out, count = 1024] char* err_string,",
          "34:                                 [out, count = 1024] uint8_t* encrypted_key,",
          "36:                                 [out, count = 1024] char * pub_key_x,",
          "37:                                 [out, count = 1024] char * pub_key_y);",
          "41:                                 [out, count = 1024] char* err_string,",
          "42:                                 [in, count = 1024] uint8_t* encrypted_key,",
          "44:                                 [out, count = 1024] char * pub_key_x,",
          "45:                                 [out, count = 1024] char * pub_key_y);",
          "49:                                 [out, count = 1024] char* err_string,",
          "50:                                 [in, count = 1024] char* key,",
          "51:                                 [out, count = 1024] uint8_t* encrypted_key,",
          "56:                                 [out, count = 1024] char* err_string,",
          "57:                                 [in, count = 1024] uint8_t* encrypted_key,",
          "59:                                 [out, count = 1024] char* key );",
          "63:                                 [out, count = 1024] char* err_string,",
          "64:                                 [in, count = 1024] uint8_t* encrypted_key,",
          "66:                                 [in, count = 1024] char* hashX ,",
          "67:                                 [in, count = 1024] char* hashY ,",
          "68:                                 [out, count = 1024] char* signature);",
          "72:                                 [out, count = 1024] char* err_string,",
          "79:                              [out, count = 1024] char* err_string,",
          "86:                                 [out, count = 1024] char* err_string,",
          "",
          "[Added Lines]",
          "33:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "34:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "36:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
          "37:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
          "41:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "42:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "44:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
          "45:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
          "49:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "50:                                 [in, count = SMALL_BUF_SIZE] char* key,",
          "51:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "56:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "57:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "59:                                 [out, count = SMALL_BUF_SIZE] char* key );",
          "63:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "64:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "66:                                 [in, count = SMALL_BUF_SIZE] char* hashX ,",
          "67:                                 [in, count = SMALL_BUF_SIZE] char* hashY ,",
          "68:                                 [out, count = SMALL_BUF_SIZE] char* signature);",
          "72:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "79:                              [out, count = SMALL_BUF_SIZE] char* err_string,",
          "86:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "93:                 public void trustedGetPublicShares (",
          "94:                                 [user_check] int *err_status,",
          "96:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "97:                                 uint32_t enc_len,",
          "98:                                 [out, count = 10000] char* public_shares,",
          "",
          "[Removed Lines]",
          "95:                                 [out, count = 1024] char* err_string,",
          "",
          "[Added Lines]",
          "95:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "102:                 public void trustedEcdsaSign(",
          "103:                                  [user_check] int *err_status,",
          "106:                                  uint32_t enc_len,",
          "110:                                  [user_check] uint8_t* sig_v,",
          "111:                                  int base);",
          "113:                 public void trustedSetEncryptedDkgPoly( [user_check] int *err_status,",
          "115:                                  [in, count = 3050] uint8_t* encrypted_poly);",
          "117:                 public void trustedGetEncryptedSecretShare(",
          "118:                                 [user_check]int *err_status,",
          "121:                                 [user_check] uint32_t* dec_len,",
          "122:                                 [out, count = 193] char* result_str,",
          "123:                                 [out, count = 320] char* s_shareG2,",
          "",
          "[Removed Lines]",
          "104:                                  [out, count = 1024] char* err_string,",
          "105:                                  [in, count = 1024] uint8_t* encrypted_key,",
          "107:                                  [in, count = 1024] unsigned char* hash,",
          "108:                                  [out, count = 1024] char* sig_r,",
          "109:                                  [out, count = 1024] char* sig_s,",
          "114:                                  [out, count = 1024] char* err_string,",
          "119:                                 [out, count = 1024] char *err_string,",
          "120:                                 [out, count = 1024] uint8_t *encrypted_skey,",
          "",
          "[Added Lines]",
          "104:                                  [out, count = SMALL_BUF_SIZE] char* err_string,",
          "105:                                  [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "107:                                  [in, count = SMALL_BUF_SIZE] unsigned char* hash,",
          "108:                                  [out, count = SMALL_BUF_SIZE] char* sig_r,",
          "109:                                  [out, count = SMALL_BUF_SIZE] char* sig_s,",
          "114:                                  [out, count = SMALL_BUF_SIZE] char* err_string,",
          "119:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
          "120:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_skey,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "129:                 public void trustedDkgVerify(",
          "130:                                 [user_check] int *err_status,",
          "132:                                 [in, count = 8193] const char* public_shares,",
          "133:                                 [in, count = 193] const char* s_share,",
          "135:                                 uint64_t key_len,",
          "136:                                 unsigned _t,",
          "137:                                 int _ind,",
          "",
          "[Removed Lines]",
          "131:                                 [out, count = 1024] char* err_string,",
          "134:                                 [in, count = 1024] uint8_t* encrypted_key,",
          "",
          "[Added Lines]",
          "131:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "134:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "140:                 public void trustedCreateBlsKey(",
          "141:                                 [user_check]int *err_status,",
          "143:                                 [in, count = 6145] const char* s_shares,",
          "145:                                 uint64_t key_len,",
          "147:                                 [user_check] uint32_t *enc_bls_key_len);",
          "149:                 public void trustedGetBlsPubKey(",
          "150:                                 [user_check]int *err_status,",
          "153:                                 uint64_t key_len,",
          "154:                                 [out, count = 320] char* bls_pub_key);",
          "156:                 public void trustedComplaintResponse(",
          "157:                                 [user_check] int *err_status,",
          "160:                                 [in, count = 3050] uint8_t *encrypted_dkg_secret,",
          "161:                                 [user_check] uint32_t* dec_len,",
          "162:                                 [out, count = 65] char* DH_key,",
          "",
          "[Removed Lines]",
          "142:                                 [out, count = 1024] char* err_string,",
          "144:                                 [in, count = 1024] uint8_t* encrypted_key,",
          "146:                                 [out, count = 1024] uint8_t * encr_bls_key,",
          "151:                                 [out, count = 1024]  char* err_string,",
          "152:                                 [in, count = 1024] uint8_t* encrypted_key,",
          "158:                                 [out, count = 1024]  char* err_string,",
          "159:                                 [in, count = 1024] uint8_t *encrypted_DHkey,",
          "",
          "[Added Lines]",
          "142:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "144:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "146:                                 [out, count = SMALL_BUF_SIZE] uint8_t * encr_bls_key,",
          "151:                                 [out, count = SMALL_BUF_SIZE]  char* err_string,",
          "152:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "158:                                 [out, count = SMALL_BUF_SIZE]  char* err_string,",
          "159:                                 [in, count = SMALL_BUF_SIZE] uint8_t *encryptedDHKey,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "168:                 public void trustedGenerateSEK(",
          "169:                                 [user_check] int *err_status,",
          "172:                                 [user_check] uint32_t *enc_len,",
          "173:                                 [out, count = 65] char* hex_SEK);",
          "175:                 public void trustedSetSEK(",
          "176:                                 [user_check] int *err_status,",
          "179:                                 uint64_t encr_len);",
          "181:                 public void trustedSetSEK_backup(",
          "182:                                 [user_check] int *err_status,",
          "185:                                 [user_check] uint32_t *enc_len,",
          "186:                                 [in, count = 65] const char* SEK_hex);",
          "188:                 public void trustedGenerateEcdsaKey_aes (",
          "189:                                 [user_check] int *err_status,",
          "191:                                 [out, count = ECDSA_ENCR_LEN] uint8_t* encrypted_key,",
          "192:                                 [user_check] uint32_t *enc_len,",
          "196:                 public void trustedGetPublicEcdsaKey_aes(",
          "197:                                 [user_check] int *err_status,",
          "200:                                 uint32_t dec_len,",
          "204:                 public void trustedEcdsaSignAES(",
          "205:                                 [user_check] int *err_status,",
          "208:                                 uint32_t enc_len,",
          "212:                                 [user_check] uint8_t* sig_v,",
          "213:                                 int base);",
          "215:                 public void encrypt_key_aes (",
          "216:                                 [user_check] int *err_status,",
          "220:                                 [user_check] uint32_t *enc_len);",
          "222:                 public void decrypt_key_aes (",
          "223:                                 [user_check] int *err_status,",
          "226:                                 uint32_t enc_len,",
          "230:                 public void trustedGenDkgSecret_aes (",
          "231:                                 [user_check] int *err_status,",
          "233:                                 [out, count = 3050] uint8_t* encrypted_dkg_secret,",
          "234:                                 [user_check] uint32_t * enc_len,",
          "235:                                         size_t _t);",
          "237:                 public void trustedDecryptDkgSecret_aes (",
          "238:                                 [user_check] int *err_status,",
          "240:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "241:                                 [out, count = 2490] uint8_t* decrypted_dkg_secret,",
          "242:                                 [user_check] uint32_t* dec_len);",
          "244:                 public void trustedSetEncryptedDkgPoly_aes(",
          "245:                                [user_check] int *err_status,",
          "247:                                [in, count = 3050] uint8_t* encrypted_poly,",
          "248:                                [user_check] uint64_t* enc_len);",
          "250:                 public void trustedGetEncryptedSecretShare_aes(",
          "251:                               [user_check]int *err_status,",
          "254:                               [user_check] uint32_t* dec_len,",
          "255:                               [out, count = 193] char* result_str,",
          "256:                               [out, count = 320] char* s_shareG2,",
          "",
          "[Removed Lines]",
          "170:                                 [out, count = 1024] char *err_string,",
          "171:                                 [out, count = 1024] uint8_t *encrypted_SEK,",
          "177:                                 [out, count = 1024] char *err_string,",
          "178:                                 [in, count = 1024] uint8_t *encrypted_SEK,",
          "183:                                 [out, count = 1024] char *err_string,",
          "184:                                 [out, count = 1024] uint8_t *encrypted_SEK,",
          "190:                                 [out, count = 1024] char* err_string,",
          "193:                                 [out, count = 1024] char * pub_key_x,",
          "194:                                 [out, count = 1024] char * pub_key_y);",
          "198:                                 [out, count = 1024] char* err_string,",
          "199:                                 [in, count = 1024] uint8_t* encrypted_key,",
          "201:                                 [out, count = 1024] char * pub_key_x,",
          "202:                                 [out, count = 1024] char * pub_key_y);",
          "206:                                 [out, count = 1024] char* err_string,",
          "207:                                 [in, count = 1024] uint8_t* encrypted_key,",
          "209:                                 [in, count = 1024] unsigned char* hash,",
          "210:                                 [out, count = 1024] char* sig_r,",
          "211:                                 [out, count = 1024] char* sig_s,",
          "217:                                 [out, count = 1024] char* err_string,",
          "218:                                 [in, count = 1024] const char* key,",
          "219:                                 [out, count = 1024] uint8_t* encrypted_key,",
          "224:                                 [out, count = 1024] char* err_string,",
          "225:                                 [in, count = 1024] uint8_t* encrypted_key,",
          "227:                                 [out, count = 1024] char* key );",
          "232:                                 [out, count = 1024] char* err_string,",
          "239:                                 [out, count = 1024] char* err_string,",
          "246:                                [out, count = 1024] char* err_string,",
          "252:                               [out, count = 1024] char *err_string,",
          "253:                               [out, count = 1024] uint8_t *encrypted_skey,",
          "",
          "[Added Lines]",
          "170:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
          "171:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
          "177:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
          "178:                                 [in, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
          "183:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
          "184:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
          "190:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "193:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
          "194:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
          "198:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "199:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "201:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
          "202:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
          "206:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "207:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "209:                                 [in, count = SMALL_BUF_SIZE] unsigned char* hash,",
          "210:                                 [out, count = SMALL_BUF_SIZE] char* sig_r,",
          "211:                                 [out, count = SMALL_BUF_SIZE] char* sig_s,",
          "217:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "218:                                 [in, count = SMALL_BUF_SIZE] const char* key,",
          "219:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "224:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "225:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "227:                                 [out, count = SMALL_BUF_SIZE] char* key );",
          "232:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "239:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "246:                                [out, count = SMALL_BUF_SIZE] char* err_string,",
          "252:                               [out, count = SMALL_BUF_SIZE] char *err_string,",
          "253:                               [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_skey,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "262:                 public void trustedGetPublicShares_aes(",
          "263:                             [user_check] int *err_status,",
          "265:                             [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "266:                             uint32_t enc_len,",
          "267:                             [out, count = 10000] char* public_shares,",
          "",
          "[Removed Lines]",
          "264:                             [out, count = 1024] char* err_string,",
          "",
          "[Added Lines]",
          "264:                             [out, count = SMALL_BUF_SIZE] char* err_string,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "271:                 public void trustedDkgVerify_aes(",
          "272:                           [user_check] int *err_status,",
          "274:                           [in, count = 8193] const char* public_shares,",
          "275:                           [in, count = 193] const char* s_share,",
          "277:                           uint64_t key_len,",
          "278:                           unsigned _t,",
          "279:                           int _ind,",
          "",
          "[Removed Lines]",
          "273:                           [out, count = 1024] char* err_string,",
          "276:                           [in, count = 1024] uint8_t* encrypted_key,",
          "",
          "[Added Lines]",
          "273:                           [out, count = SMALL_BUF_SIZE] char* err_string,",
          "276:                           [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "283:                 public void trustedCreateBlsKey_aes(",
          "284:                         [user_check]int *err_status,",
          "286:                         [in, count = 6145] const char* s_shares,",
          "288:                         uint64_t key_len,",
          "290:                         [user_check] uint32_t *enc_bls_key_len);",
          "292:                 public void trustedBlsSignMessage_aes (",
          "293:                         [user_check] int *err_status,",
          "296:                         uint32_t enc_len,",
          "302:                         [user_check]int *err_status,",
          "305:                         uint64_t key_len,",
          "306:                         [out, count = 320] char* bls_pub_key);",
          "",
          "[Removed Lines]",
          "285:                         [out, count = 1024] char* err_string,",
          "287:                         [in, count = 1024] uint8_t* encrypted_key,",
          "289:                         [out, count = 1024] uint8_t * encr_bls_key,",
          "294:                         [out, count = 1024] char* err_string,",
          "295:                         [in, count = 1024] uint8_t* encrypted_key,",
          "297:                         [in, count = 1024] char* hashX ,",
          "298:                         [in, count = 1024] char* hashY ,",
          "299:                         [out, count = 1024] char* signature);",
          "301:                 public void trustedGetBlsPubKey_aes(",
          "303:                         [out, count = 1024]  char* err_string,",
          "304:                         [in, count = 1024] uint8_t* encrypted_key,",
          "",
          "[Added Lines]",
          "285:                         [out, count = SMALL_BUF_SIZE] char* err_string,",
          "287:                         [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "289:                         [out, count = SMALL_BUF_SIZE] uint8_t * encr_bls_key,",
          "294:                         [out, count = SMALL_BUF_SIZE] char* err_string,",
          "295:                         [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "297:                         [in, count = SMALL_BUF_SIZE] char* hashX ,",
          "298:                         [in, count = SMALL_BUF_SIZE] char* hashY ,",
          "299:                         [out, count = SMALL_BUF_SIZE] char* signature);",
          "301:                 public void trustedGetBlsPubKeyAES(",
          "303:                         [out, count = SMALL_BUF_SIZE]  char* err_string,",
          "304:                         [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "207:     sgx_destroy_enclave(eid);",
          "208: }",
          "212:     string delim;",
          "213:     delim.push_back(symbol);",
          "214:     vector<libff::alt_bn128_Fr> tokens;",
          "",
          "[Removed Lines]",
          "210: vector<libff::alt_bn128_Fr> SplitStringToFr(const char *koefs, const char symbol) {",
          "211:     string str(koefs);",
          "",
          "[Added Lines]",
          "210: vector<libff::alt_bn128_Fr> SplitStringToFr(const char *coeffs, const char symbol) {",
          "211:     string str(coeffs);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "218:         if (pos == string::npos) pos = str.length();",
          "219:         string token = str.substr(prev, pos - prev);",
          "220:         if (!token.empty()) {",
          "223:         }",
          "224:         prev = pos + delim.length();",
          "225:     } while (pos < str.length() && prev < str.length());",
          "",
          "[Removed Lines]",
          "221:             libff::alt_bn128_Fr koef(token.c_str());",
          "222:             tokens.push_back(koef);",
          "",
          "[Added Lines]",
          "221:             libff::alt_bn128_Fr coeff(token.c_str());",
          "222:             tokens.push_back(coeff);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "227:     return tokens;",
          "228: }",
          "231:     libff::init_alt_bn128_params();",
          "233:     string delim;",
          "234:     delim.push_back(symbol);",
          "235:     vector<string> G2_strings;",
          "",
          "[Removed Lines]",
          "230: vector<string> SplitStringTest(const char *koefs, const char symbol) {",
          "232:     string str(koefs);",
          "",
          "[Added Lines]",
          "230: vector<string> SplitStringTest(const char *coeffs, const char symbol) {",
          "232:     string str(coeffs);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "239:         if (pos == string::npos) pos = str.length();",
          "240:         string token = str.substr(prev, pos - prev);",
          "241:         if (!token.empty()) {",
          "244:         }",
          "245:         prev = pos + delim.length();",
          "246:     } while (pos < str.length() && prev < str.length());",
          "",
          "[Removed Lines]",
          "242:             string koef(token.c_str());",
          "243:             G2_strings.push_back(koef);",
          "",
          "[Added Lines]",
          "242:             string coeff(token.c_str());",
          "243:             G2_strings.push_back(coeff);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "251: libff::alt_bn128_G2 VectStringToG2(const vector<string> &G2_str_vect) {",
          "252:     libff::init_alt_bn128_params();",
          "262: }",
          "264: TEST_CASE(\"DKG public shares test\", \"[dkg-pub-shares]\") {",
          "",
          "[Removed Lines]",
          "253:     libff::alt_bn128_G2 koef = libff::alt_bn128_G2::zero();",
          "254:     koef.X.c0 = libff::alt_bn128_Fq(G2_str_vect.at(0).c_str());",
          "255:     koef.X.c1 = libff::alt_bn128_Fq(G2_str_vect.at(1).c_str());",
          "256:     koef.Y.c0 = libff::alt_bn128_Fq(G2_str_vect.at(2).c_str());",
          "257:     koef.Y.c1 = libff::alt_bn128_Fq(G2_str_vect.at(3).c_str());",
          "258:     koef.Z.c0 = libff::alt_bn128_Fq::one();",
          "259:     koef.Z.c1 = libff::alt_bn128_Fq::zero();",
          "261:     return koef;",
          "",
          "[Added Lines]",
          "253:     libff::alt_bn128_G2 coeff = libff::alt_bn128_G2::zero();",
          "254:     coeff.X.c0 = libff::alt_bn128_Fq(G2_str_vect.at(0).c_str());",
          "255:     coeff.X.c1 = libff::alt_bn128_Fq(G2_str_vect.at(1).c_str());",
          "256:     coeff.Y.c0 = libff::alt_bn128_Fq(G2_str_vect.at(2).c_str());",
          "257:     coeff.Y.c1 = libff::alt_bn128_Fq(G2_str_vect.at(3).c_str());",
          "258:     coeff.Z.c0 = libff::alt_bn128_Fq::one();",
          "259:     coeff.Z.c1 = libff::alt_bn128_Fq::zero();",
          "261:     return coeff;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "297:     vector<string> G2_strings = splitString(public_shares.data(), ',');",
          "298:     vector<libff::alt_bn128_G2> pub_shares_G2;",
          "299:     for (u_int64_t i = 0; i < G2_strings.size(); i++) {",
          "305:     }",
          "307:     vector<char> secret(BUF_LEN, 0);",
          "",
          "[Removed Lines]",
          "300:         vector<string> koef_str = splitString(G2_strings.at(i).c_str(), ':');",
          "304:         pub_shares_G2.push_back(VectStringToG2(koef_str));",
          "",
          "[Added Lines]",
          "300:         vector<string> coeff_str = splitString(G2_strings.at(i).c_str(), ':');",
          "304:         pub_shares_G2.push_back(VectStringToG2(coeff_str));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "809:         throw SGXException(INVALID_HEX, \"Invalid hash\");",
          "810:     }",
          "815:     for (int i = 0; i < t; i++) {",
          "",
          "[Removed Lines]",
          "812:     map<size_t, shared_ptr<BLSPublicKeyShare>> koefs_pkeys_map;",
          "",
          "[Added Lines]",
          "812:     map<size_t, shared_ptr<BLSPublicKeyShare>> coeffs_pkeys_map;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1082:     }",
          "1087:     for (int i = 0; i < t; i++) {",
          "1088:         string endName = poly_names[i].substr(4);",
          "",
          "[Removed Lines]",
          "1085:     map<size_t, shared_ptr<BLSPublicKeyShare>> koefs_pkeys_map;",
          "",
          "[Added Lines]",
          "1085:     map<size_t, shared_ptr<BLSPublicKeyShare>> coeffs_pkeys_map;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1108:         BLSPublicKeyShare pubKey(make_shared<vector<string>>(pubKey_vect), t, n);",
          "1109:         REQUIRE(pubKey.VerifySigWithHelper(hash_arr, make_shared<BLSSigShare>(sig), t, n));",
          "1113:     }",
          "1115:     shared_ptr<BLSSignature> commonSig = sigShareSet.merge();",
          "1117:     REQUIRE(common_public.VerifySigWithHelper(hash_arr, commonSig, t, n));",
          "1119:     sgx_destroy_enclave(eid);",
          "",
          "[Removed Lines]",
          "1111:         koefs_pkeys_map[i + 1] = make_shared<BLSPublicKeyShare>(pubKey);",
          "1116:     BLSPublicKey common_public(make_shared<map<size_t, shared_ptr<BLSPublicKeyShare>>>(koefs_pkeys_map), t, n);",
          "",
          "[Added Lines]",
          "1111:         coeffs_pkeys_map[i + 1] = make_shared<BLSPublicKeyShare>(pubKey);",
          "1116:     BLSPublicKey common_public(make_shared<map<size_t, shared_ptr<BLSPublicKeyShare>>>(coeffs_pkeys_map), t, n);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "afdddf489dfd2aaece320159185a3620ca36121e",
      "candidate_info": {
        "commit_hash": "afdddf489dfd2aaece320159185a3620ca36121e",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/afdddf489dfd2aaece320159185a3620ca36121e",
        "files": [
          "secure_enclave/secure_enclave.c"
        ],
        "message": "SKALE-3070-clean-sgx-3",
        "before_after_code_files": [
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ],
          "candidate": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:     int status;",
          "172:     int *errStatus = &status;",
          "177:     CHECK_STATE(_size <= 32)",
          "178:     CHECK_STATE(_randBuff);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "174:     INIT_ERROR_STATE",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "218:     clean:",
          "219:     ;",
          "220:     LOG_INFO(\"SGX call completed\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "216:     SET_SUCCESS",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "490:     LOG_DEBUG(\"SGX call completed\");",
          "491: }",
          "493: void trustedEncryptKeyAES(int *errStatus, char *errString, const char *key,",
          "494:                           uint8_t *encryptedPrivateKey, uint32_t *enc_len) {",
          "495:     LOG_INFO(__FUNCTION__);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "493: void trustedDecryptKeyAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
          "494:                           uint32_t enc_len, char *key) {",
          "496:     LOG_DEBUG(__FUNCTION__);",
          "497:     INIT_ERROR_STATE",
          "499:     CHECK_STATE(encryptedPrivateKey);",
          "500:     CHECK_STATE(key);",
          "504:     int status = AES_decrypt(encryptedPrivateKey, enc_len, key, 3072);",
          "506:     if (status != 0) {",
          "508:         snprintf(errString, BUF_LEN, \"aes decrypt failed with status %d\", status);",
          "509:         LOG_ERROR(errString);",
          "510:         goto clean;",
          "511:     }",
          "515:     uint64_t keyLen = strnlen(key, MAX_KEY_LENGTH);",
          "517:     if (keyLen == MAX_KEY_LENGTH) {",
          "518:         snprintf(errString, BUF_LEN, \"Key is not null terminated\");",
          "519:         LOG_ERROR(errString);",
          "520:         goto clean;",
          "521:     }",
          "523:     SET_SUCCESS",
          "524:     clean:",
          "525:     ;",
          "526: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8cb13e5e48cfbc116a268c64909342f09abb5319",
      "candidate_info": {
        "commit_hash": "8cb13e5e48cfbc116a268c64909342f09abb5319",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/8cb13e5e48cfbc116a268c64909342f09abb5319",
        "files": [
          "secure_enclave/secure_enclave.c"
        ],
        "message": "SKALE-3067-cleanup-sgx",
        "before_after_code_files": [
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ],
          "candidate": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1205:     domain_parameters curve = domain_parameters_init();",
          "1206:     domain_parameters_load_curve(curve, secp256k1);",
          "1210:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
          "1211:     skey[enc_len - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE] = '\\0';",
          "",
          "[Removed Lines]",
          "1208:     char skey[ECDSA_SKEY_LEN];",
          "",
          "[Added Lines]",
          "1208:     SAFE_CHAR_BUF(skey,ECDSA_SKEY_LEN);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1303:     }",
          "1308:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
          "",
          "[Removed Lines]",
          "1306:     char skey[ECDSA_SKEY_LEN];",
          "",
          "[Added Lines]",
          "1306:     SAFE_CHAR_BUF(skey,ECDSA_SKEY_LEN);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1366:         point_clear(Pkey);",
          "1367:     }",
          "1370:     mpz_get_str(arrM, 16, msgMpz);",
          "1371:     snprintf(errString, BUF_LEN, \"message is %s \", arrM);",
          "1374:     mpz_get_str(arrR, base, sign->r);",
          "1375:     strncpy(sigR, arrR, 1024);",
          "",
          "[Removed Lines]",
          "1369:     char arrM[mpz_sizeinbase(msgMpz, 16) + 2];",
          "1373:     char arrR[mpz_sizeinbase(sign->r, base) + 2];",
          "",
          "[Added Lines]",
          "1369:     SAFE_CHAR_BUF(arrM,mpz_sizeinbase(msgMpz, 16) + 2);",
          "1373:     SAFE_CHAR_BUF(arrR,mpz_sizeinbase(sign->r, base) + 2);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1418:     stat = AES_decrypt(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
          "",
          "[Removed Lines]",
          "1415:     char decryptedKey[BUF_LEN];",
          "1416:     memset(decryptedKey, 0, BUF_LEN);",
          "",
          "[Added Lines]",
          "1415:     SAFE_CHAR_BUF(decryptedKey,BUF_LEN);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1489:     CHECK_STATE(_hashY);",
          "1490:     CHECK_STATE(signature);",
          "1497:     int stat = AES_decrypt(encryptedPrivateKey, enc_len, key, BUF_LEN);",
          "",
          "[Removed Lines]",
          "1492:     char key[BUF_LEN];",
          "1493:     memset(key, 0, BUF_LEN);",
          "1494:     char sig[BUF_LEN];",
          "1495:     memset(sig, 0, BUF_LEN);",
          "",
          "[Added Lines]",
          "1492:     SAFE_CHAR_BUF(key,BUF_LEN);",
          "1493:     SAFE_CHAR_BUF(sig,BUF_LEN);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1524:     CHECK_STATE(encrypted_dkg_secret);",
          "1529:     if (gen_dkg_poly(dkg_secret, _t) != 0) {",
          "",
          "[Removed Lines]",
          "1526:     char dkg_secret[DKG_BUFER_LENGTH];",
          "1527:     memset(dkg_secret, 0, DKG_BUFER_LENGTH);",
          "",
          "[Added Lines]",
          "1525:     SAFE_CHAR_BUF(dkg_secret,DKG_BUFER_LENGTH);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1547:     status = AES_decrypt(encrypted_dkg_secret, *enc_len, decr_dkg_secret,",
          "1548:                          DKG_BUFER_LENGTH);",
          "",
          "[Removed Lines]",
          "1544:     char decr_dkg_secret[DKG_BUFER_LENGTH];",
          "1545:     memset(decr_dkg_secret, 0, DKG_BUFER_LENGTH);",
          "",
          "[Added Lines]",
          "1543:     SAFE_CHAR_BUF(decr_dkg_secret,DKG_BUFER_LENGTH);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1626:     LOG_DEBUG(__FUNCTION__);",
          "1635:     uint32_t enc_len;",
          "",
          "[Removed Lines]",
          "1628:     char skey[ECDSA_SKEY_LEN];",
          "1629:     memset(skey, 0, ECDSA_SKEY_LEN);",
          "1630:     char pub_key_x[BUF_LEN];",
          "1631:     memset(pub_key_x, 0, BUF_LEN);",
          "1632:     char pub_key_y[BUF_LEN];",
          "1633:     memset(pub_key_y, 0, BUF_LEN);",
          "",
          "[Added Lines]",
          "1627:     SAFE_CHAR_BUF(skey,ECDSA_SKEY_LEN);",
          "1629:     SAFE_CHAR_BUF(pub_key_x,BUF_LEN);",
          "1630:     SAFE_CHAR_BUF(pub_key_y,BUF_LEN);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1655:     gen_session_key(skey, pub_keyB, common_key);",
          "1659:     if (calc_secret_share(getThreadLocalDecryptedDkgPoly(), s_share, _t, _n, ind) != 0) {",
          "",
          "[Removed Lines]",
          "1654:     char *common_key[ECDSA_SKEY_LEN];",
          "1657:     char *s_share[ECDSA_SKEY_LEN];",
          "",
          "[Added Lines]",
          "1652:     SAFE_CHAR_BUF(common_key,ECDSA_SKEY_LEN);",
          "1655:     SAFE_CHAR_BUF(s_share,ECDSA_SKEY_LEN);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1669:         return;",
          "1670:     }",
          "1673:     xor_encrypt(common_key, s_share, cypher);",
          "1680:     strncpy(result_str, cypher, strlen(cypher));",
          "1681:     strncpy(result_str + strlen(cypher), pub_key_x, strlen(pub_key_x));",
          "",
          "[Removed Lines]",
          "1672:     char cypher[ECDSA_SKEY_LEN];",
          "1674:     if (cypher == NULL) {",
          "1676:         snprintf(errString, BUF_LEN, \"invalid common_key\");",
          "1677:         return;",
          "1678:     }",
          "",
          "[Added Lines]",
          "1670:     SAFE_CHAR_BUF(cypher,ECDSA_SKEY_LEN);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1733:     CHECK_STATE(s_share);",
          "1734:     CHECK_STATE(encryptedPrivateKey);",
          "1739:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
          "",
          "[Removed Lines]",
          "1736:     char skey[ECDSA_SKEY_LEN];",
          "1737:     memset(skey, 0, ECDSA_SKEY_LEN);",
          "",
          "[Added Lines]",
          "1729:     SAFE_CHAR_BUF(skey,ECDSA_SKEY_LEN);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1744:         return;",
          "1745:     }",
          "1749:     strncpy(encr_sshare, s_share, ECDSA_SKEY_LEN - 1);",
          "1754:     session_key_recover(skey, s_share, common_key);",
          "1764:     xor_decrypt(common_key, encr_sshare, decr_sshare);",
          "1771:     mpz_t s;",
          "1772:     mpz_init(s);",
          "",
          "[Removed Lines]",
          "1747:     char encr_sshare[ECDSA_SKEY_LEN];",
          "1748:     memset(encr_sshare, 0, ECDSA_SKEY_LEN);",
          "1751:     char common_key[ECDSA_SKEY_LEN];",
          "1752:     memset(common_key, 0, ECDSA_SKEY_LEN);",
          "1756:     if (common_key == NULL || strlen(common_key) == 0) {",
          "1758:         snprintf(errString, BUF_LEN, \"invalid common_key\");",
          "1759:         return;",
          "1760:     }",
          "1762:     char decr_sshare[ECDSA_SKEY_LEN];",
          "1763:     memset(decr_sshare, 0, ECDSA_SKEY_LEN);",
          "1765:     if (decr_sshare == NULL) {",
          "1767:         snprintf(errString, BUF_LEN, \"invalid common_key\");",
          "1768:         return;",
          "1769:     }",
          "",
          "[Added Lines]",
          "1740:     SAFE_CHAR_BUF(encr_sshare,ECDSA_SKEY_LEN);",
          "1744:     SAFE_CHAR_BUF(common_key,ECDSA_SKEY_LEN);",
          "1750:     SAFE_CHAR_BUF(decr_sshare,ECDSA_SKEY_LEN);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1800:     CHECK_STATE(encr_bls_key);",
          "1804:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, ECDSA_SKEY_LEN);",
          "1805:     if (status != SGX_SUCCESS) {",
          "",
          "[Removed Lines]",
          "1803:     char skey[ECDSA_SKEY_LEN];",
          "",
          "[Added Lines]",
          "1787:     SAFE_CHAR_BUF(skey,ECDSA_SKEY_LEN);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0b4d1bc92025f27c20ca7ea7113baccfcfc23096",
      "candidate_info": {
        "commit_hash": "0b4d1bc92025f27c20ca7ea7113baccfcfc23096",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/0b4d1bc92025f27c20ca7ea7113baccfcfc23096",
        "files": [
          "secure_enclave/secure_enclave.c"
        ],
        "message": "SKALE-3067-cleanup-sgx",
        "before_after_code_files": [
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ],
          "candidate": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1397:     if (stat != 0) {",
          "1399:         snprintf(errString, BUF_LEN, \"AES encrypt failed with status %d\", stat);",
          "1401:     }",
          "1405:     SAFE_CHAR_BUF(decryptedKey, BUF_LEN);",
          "1408:     stat = AES_decrypt(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
          "1410:     if (stat != 0) {",
          "1414:     }",
          "1416:     uint64_t decryptedKeyLen = strnlen(decryptedKey, MAX_KEY_LENGTH);",
          "1418:     if (decryptedKeyLen == MAX_KEY_LENGTH) {",
          "1419:         snprintf(errString, BUF_LEN, \"Decrypted key is not null terminated\");",
          "1421:     }",
          "1425:     if (strncmp(key, decryptedKey, MAX_KEY_LENGTH) != 0) {",
          "1426:         snprintf(errString, BUF_LEN, \"Decrypted key does not match original key\");",
          "1428:     }",
          "1431: }",
          "1433: void trustedDecryptKeyAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
          "",
          "[Removed Lines]",
          "1400:         return;",
          "1412:         snprintf(errString, BUF_LEN, \":trustedDecryptKey failed with status %d\", stat);",
          "1413:         return;",
          "1420:         return;",
          "1427:         return;",
          "",
          "[Added Lines]",
          "1400:         LOG_ERROR(errString);",
          "1401:         goto clean;",
          "1412:         snprintf(errString, BUF_LEN, \"trustedDecryptKey failed with status %d\", stat);",
          "1413:         LOG_ERROR(errString);",
          "1414:         goto clean;",
          "1421:         LOG_ERROR(errString);",
          "1422:         goto clean;",
          "1429:         LOG_ERROR(errString);",
          "1430:         goto clean;",
          "1435:     clean:",
          "1436:     ;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1449:     if (status != 0) {",
          "1451:         snprintf(errString, BUF_LEN, \"aes decrypt failed with status %d\", status);",
          "1453:     }",
          "",
          "[Removed Lines]",
          "1452:         return;",
          "",
          "[Added Lines]",
          "1457:         LOG_ERROR(errString);",
          "1458:         goto clean;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1459:     if (keyLen == MAX_KEY_LENGTH) {",
          "1460:         snprintf(errString, BUF_LEN, \"Key is not null terminated\");",
          "1462:     }",
          "1467: }",
          "1469: void trustedBlsSignMessageAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
          "",
          "[Removed Lines]",
          "1461:         return;",
          "1465:     memcpy(errString, AES_key, 1024);",
          "",
          "[Added Lines]",
          "1467:         LOG_ERROR(errString);",
          "1468:         goto clean;",
          "1473:     clean:",
          "1474:     ;",
          "",
          "---------------"
        ]
      }
    }
  ]
}