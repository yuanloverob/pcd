{
  "cve_id": "CVE-2016-6129",
  "cve_desc": "The rsa_verify_hash_ex function in rsa_verify_hash.c in LibTomCrypt, as used in OP-TEE before 2.2.0, does not validate that the message length is equal to the ASN.1 encoded data length, which makes it easier for remote attackers to forge RSA signatures or public certificates by leveraging a Bleichenbacher signature forgery attack.",
  "repo": "libtom/libtomcrypt",
  "patch_hash": "5eb9743410ce4657e9d54fef26a2ee31a1b5dd09",
  "patch_info": {
    "commit_hash": "5eb9743410ce4657e9d54fef26a2ee31a1b5dd09",
    "repo": "libtom/libtomcrypt",
    "commit_url": "https://github.com/libtom/libtomcrypt/commit/5eb9743410ce4657e9d54fef26a2ee31a1b5dd09",
    "files": [
      "src/pk/rsa/rsa_verify_hash.c"
    ],
    "message": "rsa_verify_hash: fix possible bleichenbacher signature attack",
    "before_after_code_files": [
      "src/pk/rsa/rsa_verify_hash.c||src/pk/rsa/rsa_verify_hash.c"
    ]
  },
  "patch_diff": {
    "src/pk/rsa/rsa_verify_hash.c||src/pk/rsa/rsa_verify_hash.c": [
      "File: src/pk/rsa/rsa_verify_hash.c -> src/pk/rsa/rsa_verify_hash.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "103:   } else {",
      "105:     unsigned char *out;",
      "107:     int           decoded;",
      "108:     ltc_asn1_list digestinfo[2], siginfo[2];",
      "",
      "[Removed Lines]",
      "106:     unsigned long outlen, loid[16];",
      "",
      "[Added Lines]",
      "106:     unsigned long outlen, loid[16], reallen;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "145:        goto bail_2;",
      "146:     }",
      "150:         (XMEMCMP(digestinfo[0].data, hash_descriptor[hash_idx].OID, sizeof(unsigned long) * hash_descriptor[hash_idx].OIDlen) == 0) &&",
      "151:         (siginfo[1].size == hashlen) &&",
      "152:         (XMEMCMP(siginfo[1].data, hash, hashlen) == 0)) {",
      "",
      "[Removed Lines]",
      "149:     if ((digestinfo[0].size == hash_descriptor[hash_idx].OIDlen) &&",
      "",
      "[Added Lines]",
      "148:     if ((err = der_length_sequence(siginfo, 2, &reallen)) != CRYPT_OK) {",
      "149:        XFREE(out);",
      "150:        goto bail_2;",
      "151:     }",
      "154:     if ((reallen == outlen) &&",
      "155:         (digestinfo[0].size == hash_descriptor[hash_idx].OIDlen) &&",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c6dfef95ebd5ab8b8114cc0c457488c6a1aa0ec4",
      "candidate_info": {
        "commit_hash": "c6dfef95ebd5ab8b8114cc0c457488c6a1aa0ec4",
        "repo": "libtom/libtomcrypt",
        "commit_url": "https://github.com/libtom/libtomcrypt/commit/c6dfef95ebd5ab8b8114cc0c457488c6a1aa0ec4",
        "files": [
          "testprof/rsa_test.c"
        ],
        "message": "testprof/rsa_test: add testcase for bleichenbacher signature attack",
        "before_after_code_files": [
          "testprof/rsa_test.c||testprof/rsa_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libtom/libtomcrypt/pull/48"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "testprof/rsa_test.c||testprof/rsa_test.c": [
          "File: testprof/rsa_test.c -> testprof/rsa_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:    unsigned char in[1024], out[1024], tmp[1024];",
          "106:    rsa_key       key, privKey, pubKey;",
          "107:    int           hash_idx, prng_idx, stat, stat2;",
          "109:    static unsigned char lparam[] = { 0x01, 0x02, 0x03, 0x04 };",
          "111:    if (rsa_compat_test() != 0) {",
          "",
          "[Removed Lines]",
          "108:    unsigned long rsa_msgsize, len, len2, cnt;",
          "",
          "[Added Lines]",
          "108:    unsigned long rsa_msgsize, len, len2, len3, cnt, cnt2;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "344:       return 1;",
          "345:    }",
          "348:    rsa_free(&key);",
          "349:    rsa_free(&pubKey);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "361:    unsigned char* p = in;",
          "362:    unsigned char* p2 = out;",
          "363:    unsigned char* p3 = tmp;",
          "364:    len = sizeof(in);",
          "365:    len2 = sizeof(out);",
          "366:    cnt = rsa_get_size(&key);",
          "368:    DO(rsa_sign_hash_ex(p, 20, p2, &len2, LTC_PKCS_1_V1_5, &yarrow_prng, prng_idx, hash_idx, 8, &privKey));",
          "370:    DOX(rsa_verify_hash_ex(p2, len2, p, 20, LTC_PKCS_1_V1_5, hash_idx, -1, &stat, &pubKey), \"should succeed\");",
          "371:    DOX(stat == 1?CRYPT_OK:CRYPT_FAIL_TESTVECTOR, \"should succeed\");",
          "372:    len3 = sizeof(tmp);",
          "374:    DO(ltc_mp.rsa_me(p2, len2, p3, &len3, PK_PUBLIC, &key));",
          "376: #if 0",
          "377:    printf(\"\\nBefore:\");",
          "378:    for (cnt = 0; cnt < len3; ++cnt) {",
          "379:      if (cnt%32 == 0)",
          "380:        printf(\"\\n%3d:\", cnt);",
          "381:      printf(\" %02x\", p3[cnt]);",
          "382:    }",
          "383: #endif",
          "385:    for (cnt = 0; cnt < len3; ++cnt) {",
          "386:       if (p3[cnt] == 0xff)",
          "387:         break;",
          "388:    }",
          "389:    for (cnt2 = cnt+1; cnt2 < len3; ++cnt2) {",
          "390:       if (p3[cnt2] != 0xff)",
          "391:         break;",
          "392:    }",
          "394:    memmove(&p3[cnt+1], &p3[cnt2], len3-cnt2);",
          "396:    for (cnt = cnt + len3-cnt2+1; cnt < len; ++cnt) {",
          "397:       do {",
          "398:           p3[cnt] = (unsigned char)rand();",
          "399:       } while (p3[cnt] == 0);",
          "400:    }",
          "401: #if 0",
          "402:    printf(\"\\nAfter:\");",
          "403:    for (cnt = 0; cnt < len3; ++cnt) {",
          "404:      if (cnt%32 == 0)",
          "405:        printf(\"\\n%3d:\", cnt);",
          "406:      printf(\" %02x\", p3[cnt]);",
          "407:    }",
          "408:    printf(\"\\n\");",
          "409: #endif",
          "411:    len2 = sizeof(out);",
          "413:    DO(ltc_mp.rsa_me(p3, len3, p2, &len2, PK_PRIVATE, &key));",
          "415:    len3 = sizeof(tmp);",
          "417:    DOX(rsa_verify_hash_ex(p2, len2, p, 20, LTC_PKCS_1_V1_5, hash_idx, -1, &stat, &pubKey), \"should succeed\");",
          "418:    DOX(stat == 0?CRYPT_OK:CRYPT_FAIL_TESTVECTOR, \"should fail\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "efc6844f9c6bbdca5ebb9f8276e8f5b22a9f167d",
      "candidate_info": {
        "commit_hash": "efc6844f9c6bbdca5ebb9f8276e8f5b22a9f167d",
        "repo": "libtom/libtomcrypt",
        "commit_url": "https://github.com/libtom/libtomcrypt/commit/efc6844f9c6bbdca5ebb9f8276e8f5b22a9f167d",
        "files": [
          "testprof/rsa_test.c",
          "testprof/tomcrypt_test.h",
          "testprof/x86_prof.c"
        ],
        "message": "tests: add function print_hex()",
        "before_after_code_files": [
          "testprof/rsa_test.c||testprof/rsa_test.c",
          "testprof/tomcrypt_test.h||testprof/tomcrypt_test.h",
          "testprof/x86_prof.c||testprof/x86_prof.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libtom/libtomcrypt/pull/48"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "testprof/rsa_test.c||testprof/rsa_test.c": [
          "File: testprof/rsa_test.c -> testprof/rsa_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:    return 0;",
          "101: }",
          "116: int rsa_test(void)",
          "117: {",
          "118:    unsigned char in[1024], out[1024], tmp[1024];",
          "",
          "[Removed Lines]",
          "103: static void _rsa_testPrint(const char* what, const unsigned char* p, const unsigned long l)",
          "104: {",
          "105:   unsigned long x;",
          "106:   fprintf(stderr, \"%s contents: \\n\", what);",
          "107:   for (x = 0; x < l; ) {",
          "108:       fprintf(stderr, \"%02x \", p[x]);",
          "109:       if (!(++x % 16)) {",
          "110:          fprintf(stderr, \"\\n\");",
          "111:       }",
          "112:   }",
          "113:   fprintf(stderr, \"\\n\");",
          "114: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "200:       }",
          "201:       if (len2 != rsa_msgsize || memcmp(tmp, in, rsa_msgsize)) {",
          "202:          fprintf(stderr, \"\\nrsa_decrypt_key mismatch, len %lu (second decrypt)\\n\", len2);",
          "205:          return 1;",
          "206:       }",
          "207:    }",
          "",
          "[Removed Lines]",
          "203:          _rsa_testPrint(\"Original\", in, rsa_msgsize);",
          "204:          _rsa_testPrint(\"Output\", tmp, len2);",
          "",
          "[Added Lines]",
          "190:          print_hex(\"Original\", in, rsa_msgsize);",
          "191:          print_hex(\"Output\", tmp, len2);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "230:       }",
          "231:       if (len2 != rsa_msgsize || memcmp(tmp, in, rsa_msgsize)) {",
          "232:          fprintf(stderr, \"rsa_decrypt_key mismatch len %lu\", len2);",
          "235:          return 1;",
          "236:       }",
          "237:    }",
          "",
          "[Removed Lines]",
          "233:          _rsa_testPrint(\"Original\", in, rsa_msgsize);",
          "234:          _rsa_testPrint(\"Output\", tmp, len2);",
          "",
          "[Added Lines]",
          "220:          print_hex(\"Original\", in, rsa_msgsize);",
          "221:          print_hex(\"Output\", tmp, len2);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "256:       }",
          "257:       if (memcmp(tmp, in, rsa_msgsize)) {",
          "258:          fprintf(stderr, \"rsa_decrypt_key_ex mismatch data\");",
          "261:          return 1;",
          "262:       }",
          "263:    }",
          "",
          "[Removed Lines]",
          "259:          _rsa_testPrint(\"Original\", in, rsa_msgsize);",
          "260:          _rsa_testPrint(\"Output\", tmp, rsa_msgsize);",
          "",
          "[Added Lines]",
          "246:          print_hex(\"Original\", in, rsa_msgsize);",
          "247:          print_hex(\"Output\", tmp, rsa_msgsize);",
          "",
          "---------------"
        ],
        "testprof/tomcrypt_test.h||testprof/tomcrypt_test.h": [
          "File: testprof/tomcrypt_test.h -> testprof/tomcrypt_test.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "80: extern const struct ltc_prng_descriptor no_prng_desc;",
          "81: #endif",
          "83: int sorter(const void *a, const void *b);",
          "84: void tally_results(int type);",
          "85: ulong64 rdtsc (void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83: void print_hex(const char* what, const unsigned char* p, const unsigned long l);",
          "",
          "---------------"
        ],
        "testprof/x86_prof.c||testprof/x86_prof.c": [
          "File: testprof/x86_prof.c -> testprof/x86_prof.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: prng_state yarrow_prng;",
          "5: struct list results[100];",
          "6: int no_results;",
          "7: int sorter(const void *a, const void *b)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: void print_hex(const char* what, const unsigned char* p, const unsigned long l)",
          "6: {",
          "7:   unsigned long x;",
          "8:   fprintf(stderr, \"%s contents: \\n\", what);",
          "9:   for (x = 0; x < l; ) {",
          "10:       fprintf(stderr, \"%02x \", p[x]);",
          "11:       if (!(++x % 16)) {",
          "12:          fprintf(stderr, \"\\n\");",
          "13:       }",
          "14:   }",
          "15:   fprintf(stderr, \"\\n\");",
          "16: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c99a147d4a330d2e12daf36a9c1bb03875984a6a",
      "candidate_info": {
        "commit_hash": "c99a147d4a330d2e12daf36a9c1bb03875984a6a",
        "repo": "libtom/libtomcrypt",
        "commit_url": "https://github.com/libtom/libtomcrypt/commit/c99a147d4a330d2e12daf36a9c1bb03875984a6a",
        "files": [
          "demos/test.c",
          "testprof/makefile",
          "testprof/makefile.icc",
          "testprof/makefile.mingw",
          "testprof/makefile.msvc",
          "testprof/makefile.shared",
          "testprof/pkcs_1_oaep_test.c",
          "testprof/tomcrypt_test.h"
        ],
        "message": "add testprof/pkcs_1_oaep_test",
        "before_after_code_files": [
          "demos/test.c||demos/test.c",
          "testprof/makefile.icc||testprof/makefile.icc",
          "testprof/makefile.mingw||testprof/makefile.mingw",
          "testprof/makefile.msvc||testprof/makefile.msvc",
          "testprof/makefile.shared||testprof/makefile.shared",
          "testprof/pkcs_1_oaep_test.c||testprof/pkcs_1_oaep_test.c",
          "testprof/tomcrypt_test.h||testprof/tomcrypt_test.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libtom/libtomcrypt/pull/48"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "demos/test.c||demos/test.c": [
          "File: demos/test.c -> demos/test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:    printf(\"\\nder_test......\"); fflush(stdout); x = der_tests();        printf(x ? \"failed\" : \"passed\");if (x) exit(EXIT_FAILURE);",
          "26:    printf(\"\\npkcs_1_test...\"); fflush(stdout); x = pkcs_1_test();      printf(x ? \"failed\" : \"passed\");if (x) exit(EXIT_FAILURE);",
          "27:    printf(\"\\npkcs_1_pss_test....\"); fflush(stdout); x = pkcs_1_pss_test();       printf(x ? \"failed\" : \"passed\");if (x) exit(EXIT_FAILURE);",
          "28:    printf(\"\\nrsa_test......\"); fflush(stdout); x = rsa_test();         printf(x ? \"failed\" : \"passed\");if (x) exit(EXIT_FAILURE);",
          "29:    printf(\"\\ndh_test.......\"); fflush(stdout); x = dh_test();          printf(x ? \"failed\" : \"passed\");if (x) exit(EXIT_FAILURE);",
          "30:    printf(\"\\necc_test......\"); fflush(stdout); x = ecc_tests();        printf(x ? \"failed\" : \"passed\");if (x) exit(EXIT_FAILURE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28:    printf(\"\\npkcs_1_oaep_test....\"); fflush(stdout); x = pkcs_1_oaep_test();       printf(x ? \"failed\" : \"passed\");if (x) exit(EXIT_FAILURE);",
          "",
          "---------------"
        ],
        "testprof/makefile.icc||testprof/makefile.icc": [
          "File: testprof/makefile.icc -> testprof/makefile.icc",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: OBJECTS = base64_test.o cipher_hash_test.o der_tests.o no_prng.o                         \\",
          "5: dsa_test.o ecc_test.o mac_test.o modes_test.o pkcs_1_test.o rsa_test.o                   \\",
          "8: ifndef LIBTEST_S",
          "9:    LIBTEST_S = libtomcrypt_prof.a",
          "",
          "[Removed Lines]",
          "6: store_test.o test_driver.o x86_prof.o katja_test.o dh_test.o misc_test.o pkcs_1_pss_test.o",
          "",
          "[Added Lines]",
          "6: store_test.o test_driver.o x86_prof.o katja_test.o dh_test.o misc_test.o                 \\",
          "7: pkcs_1_pss_test.o pkcs_1_oaep_test.o",
          "",
          "---------------"
        ],
        "testprof/makefile.mingw||testprof/makefile.mingw": [
          "File: testprof/makefile.mingw -> testprof/makefile.mingw",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: OBJECTS = base64_test.o cipher_hash_test.o der_tests.o no_prng.o                         \\",
          "8: dsa_test.o ecc_test.o mac_test.o misc_test.o modes_test.o pkcs_1_test.o rsa_test.o       \\",
          "11: default: $(LIBTEST_S)",
          "",
          "[Removed Lines]",
          "9: store_test.o test_driver.o x86_prof.o katja_test.o dh_test.o pkcs_1_pss_test.o",
          "",
          "[Added Lines]",
          "9: store_test.o test_driver.o x86_prof.o katja_test.o dh_test.o pkcs_1_pss_test.o           \\",
          "10: pkcs_1_oaep_test.o",
          "",
          "---------------"
        ],
        "testprof/makefile.msvc||testprof/makefile.msvc": [
          "File: testprof/makefile.msvc -> testprof/makefile.msvc",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: OBJECTS=base64_test.obj cipher_hash_test.obj der_tests.obj no_prng.obj \\",
          "4: dsa_test.obj ecc_test.obj mac_test.obj modes_test.obj pkcs_1_test.obj \\",
          "5: rsa_test.obj store_test.obj test_driver.obj x86_prof.obj katja_test.obj \\",
          "8: tomcrypt_prof.lib: $(OBJECTS)",
          "9:  lib /out:tomcrypt_prof.lib $(OBJECTS)",
          "",
          "[Removed Lines]",
          "6: dh_test.obj misc_test.obj pkcs_1_pss_test.obj",
          "",
          "[Added Lines]",
          "6: dh_test.obj misc_test.obj pkcs_1_pss_test.obj pkcs_1_oaep_test.obj",
          "",
          "---------------"
        ],
        "testprof/makefile.shared||testprof/makefile.shared": [
          "File: testprof/makefile.shared -> testprof/makefile.shared",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: OBJECTS = base64_test.o cipher_hash_test.o der_tests.o no_prng.o                         \\",
          "10: dsa_test.o ecc_test.o mac_test.o modes_test.o pkcs_1_test.o rsa_test.o                   \\",
          "13: ifndef LIBTEST",
          "14:    LIBTEST=libtomcrypt_prof.la",
          "",
          "[Removed Lines]",
          "11: store_test.o test_driver.o x86_prof.o katja_test.o dh_test.o misc_test.o pkcs_1_pss_test.o",
          "",
          "[Added Lines]",
          "11: store_test.o test_driver.o x86_prof.o katja_test.o dh_test.o misc_test.o                 \\",
          "12: pkcs_1_pss_test.o pkcs_1_oaep_test.o",
          "",
          "---------------"
        ],
        "testprof/pkcs_1_oaep_test.c||testprof/pkcs_1_oaep_test.c": [
          "File: testprof/pkcs_1_oaep_test.c -> testprof/pkcs_1_oaep_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include <tomcrypt_test.h>",
          "3: #ifdef LTC_PKCS_1",
          "5: #include \"../notes/rsa-testvectors/oaep-vect.c\"",
          "9: int pkcs_1_oaep_test(void)",
          "10: {",
          "11:   int prng_idx = register_prng(&no_prng_desc);",
          "12:   int hash_idx = find_hash(\"sha1\");",
          "13:   unsigned int i;",
          "15:   DO(prng_is_valid(prng_idx));",
          "16:   DO(hash_is_valid(hash_idx));",
          "18:   for (i = 0; i < sizeof(testcases_oaep)/sizeof(testcases_oaep[0]); ++i) {",
          "19:     testcase_t* t = &testcases_oaep[i];",
          "20:     rsa_key k, *key = &k;",
          "21:     DOX(mp_init_multi(&key->e, &key->d, &key->N, &key->dQ,",
          "22:                        &key->dP, &key->qP, &key->p, &key->q, NULL), t->name);",
          "24:     DOX(mp_read_unsigned_bin(key->e, t->rsa.e, t->rsa.e_l), t->name);",
          "25:     DOX(mp_read_unsigned_bin(key->d, t->rsa.d, t->rsa.d_l), t->name);",
          "26:     DOX(mp_read_unsigned_bin(key->N, t->rsa.n, t->rsa.n_l), t->name);",
          "27:     DOX(mp_read_unsigned_bin(key->dQ, t->rsa.dQ, t->rsa.dQ_l), t->name);",
          "28:     DOX(mp_read_unsigned_bin(key->dP, t->rsa.dP, t->rsa.dP_l), t->name);",
          "29:     DOX(mp_read_unsigned_bin(key->qP, t->rsa.qInv, t->rsa.qInv_l), t->name);",
          "30:     DOX(mp_read_unsigned_bin(key->q, t->rsa.q, t->rsa.q_l), t->name);",
          "31:     DOX(mp_read_unsigned_bin(key->p, t->rsa.p, t->rsa.p_l), t->name);",
          "32:     key->type = PK_PRIVATE;",
          "34:     unsigned int j;",
          "35:     for (j = 0; j < sizeof(t->data)/sizeof(t->data[0]); ++j) {",
          "36:         rsaData_t* s = &t->data[j];",
          "37:         unsigned char buf[256], obuf[256];",
          "38:         unsigned long buflen = sizeof(buf), obuflen = sizeof(obuf);",
          "39:         int stat;",
          "40:         prng_descriptor[prng_idx].add_entropy(s->o2, s->o2_l, NULL);",
          "41:         DOX(rsa_encrypt_key(s->o1, s->o1_l, obuf, &obuflen, NULL, 0, NULL, prng_idx, hash_idx, key), s->name);",
          "42:         DOX(obuflen == (unsigned long)s->o3_l?CRYPT_OK:CRYPT_FAIL_TESTVECTOR, s->name);",
          "43:         DOX(memcmp(s->o3, obuf, s->o3_l)==0?CRYPT_OK:CRYPT_FAIL_TESTVECTOR, s->name);",
          "44:         DOX(rsa_decrypt_key(obuf, obuflen, buf, &buflen, NULL, 0, hash_idx, &stat, key), s->name);",
          "45:         DOX(stat == 1?CRYPT_OK:CRYPT_FAIL_TESTVECTOR, s->name);",
          "48:     mp_clear_multi(key->d,  key->e, key->N, key->dQ, key->dP, key->qP, key->p, key->q, NULL);",
          "51:   unregister_prng(&no_prng_desc);",
          "53:   return 0;",
          "54: }",
          "56: #else",
          "58: int pkcs_1_oaep_test(void)",
          "59: {",
          "60:    fprintf(stderr, \"NOP\");",
          "61:    return 0;",
          "62: }",
          "64: #endif",
          "",
          "---------------"
        ],
        "testprof/tomcrypt_test.h||testprof/tomcrypt_test.h": [
          "File: testprof/tomcrypt_test.h -> testprof/tomcrypt_test.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: int mac_test(void);",
          "53: int pkcs_1_test(void);",
          "54: int pkcs_1_pss_test(void);",
          "55: int store_test(void);",
          "56: int rsa_test(void);",
          "57: int dh_test(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55: int pkcs_1_oaep_test(void);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "536a1992034cfbdfc02227ec550f36913855207d",
      "candidate_info": {
        "commit_hash": "536a1992034cfbdfc02227ec550f36913855207d",
        "repo": "libtom/libtomcrypt",
        "commit_url": "https://github.com/libtom/libtomcrypt/commit/536a1992034cfbdfc02227ec550f36913855207d",
        "files": [
          "testprof/rsa_test.c"
        ],
        "message": "rsa_test: fix valgrind warnings",
        "before_after_code_files": [
          "testprof/rsa_test.c||testprof/rsa_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libtom/libtomcrypt/pull/48"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "testprof/rsa_test.c||testprof/rsa_test.c": [
          "File: testprof/rsa_test.c -> testprof/rsa_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "240:    for (rsa_msgsize = 1; rsa_msgsize <= 117; rsa_msgsize++) {",
          "241:       len  = sizeof(out);",
          "242:       len2 = rsa_msgsize;",
          "243:       DO(rsa_encrypt_key_ex(in, rsa_msgsize, out, &len, NULL, 0, &yarrow_prng, prng_idx, 0, LTC_PKCS_1_V1_5, &key));",
          "245:       len2 = rsa_msgsize;",
          "246:       DO(rsa_decrypt_key_ex(out, len, tmp, &len2, NULL, 0, 0, LTC_PKCS_1_V1_5, &stat, &key));",
          "248:          fprintf(stderr, \"rsa_decrypt_key_ex failed, %d, %d\", stat, stat2);",
          "249:          return 1;",
          "250:       }",
          "",
          "[Removed Lines]",
          "247:       if (!(stat == 1 && stat2 == 0)) {",
          "",
          "[Added Lines]",
          "244:       yarrow_read(in, rsa_msgsize, &yarrow_prng);",
          "249:       if (stat != 1) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "faa9c6a607ad6254b5d73c430c0a2a966454b43c",
      "candidate_info": {
        "commit_hash": "faa9c6a607ad6254b5d73c430c0a2a966454b43c",
        "repo": "libtom/libtomcrypt",
        "commit_url": "https://github.com/libtom/libtomcrypt/commit/faa9c6a607ad6254b5d73c430c0a2a966454b43c",
        "files": [
          "testprof/pkcs_1_pss_test.c"
        ],
        "message": "add missing unregister of no_prng",
        "before_after_code_files": [
          "testprof/pkcs_1_pss_test.c||testprof/pkcs_1_pss_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libtom/libtomcrypt/pull/48"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "testprof/pkcs_1_pss_test.c||testprof/pkcs_1_pss_test.c": [
          "File: testprof/pkcs_1_pss_test.c -> testprof/pkcs_1_pss_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     mp_clear_multi(key->d,  key->e, key->N, key->dQ, key->dP, key->qP, key->p, key->q, NULL);",
          "50:   return 0;",
          "51: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:   unregister_prng(&no_prng_desc);",
          "",
          "---------------"
        ]
      }
    }
  ]
}