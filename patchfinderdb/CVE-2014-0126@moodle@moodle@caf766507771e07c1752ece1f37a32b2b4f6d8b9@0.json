{
  "cve_id": "CVE-2014-0126",
  "cve_desc": "Cross-site request forgery (CSRF) vulnerability in enrol/imsenterprise/importnow.php in Moodle through 2.3.11, 2.4.x before 2.4.9, 2.5.x before 2.5.5, and 2.6.x before 2.6.2 allows remote attackers to hijack the authentication of administrators for requests that import an IMS Enterprise file.",
  "repo": "moodle/moodle",
  "patch_hash": "caf766507771e07c1752ece1f37a32b2b4f6d8b9",
  "patch_info": {
    "commit_hash": "caf766507771e07c1752ece1f37a32b2b4f6d8b9",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/caf766507771e07c1752ece1f37a32b2b4f6d8b9",
    "files": [
      "enrol/imsenterprise/importnow.php",
      "enrol/imsenterprise/settings.php"
    ],
    "message": "MDL-43146 enrol_imsenterprise: missing sesskey protection",
    "before_after_code_files": [
      "enrol/imsenterprise/importnow.php||enrol/imsenterprise/importnow.php",
      "enrol/imsenterprise/settings.php||enrol/imsenterprise/settings.php"
    ]
  },
  "patch_diff": {
    "enrol/imsenterprise/importnow.php||enrol/imsenterprise/importnow.php": [
      "File: enrol/imsenterprise/importnow.php -> enrol/imsenterprise/importnow.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: require_once(dirname(dirname(dirname(__FILE__))) . '/config.php');",
      "25: require_login(0, false);",
      "26: require_capability('moodle/site:config', context_system::instance());",
      "28: $site = get_site();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "27: require_sesskey();",
      "",
      "---------------"
    ],
    "enrol/imsenterprise/settings.php||enrol/imsenterprise/settings.php": [
      "File: enrol/imsenterprise/settings.php -> enrol/imsenterprise/settings.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "119:     $settings->add(new admin_setting_configcheckbox('enrol_imsenterprise/imscapitafix',",
      "120:         get_string('usecapitafix', 'enrol_imsenterprise'), get_string('usecapitafix_desc', 'enrol_imsenterprise'), 0));",
      "124:     $settings->add(new admin_setting_heading('enrol_imsenterprise_doitnowmessage', '', $importnowstring));",
      "125: }",
      "",
      "[Removed Lines]",
      "122:     $importnowstring = get_string('aftersaving...', 'enrol_imsenterprise').' <a href=\"../enrol/imsenterprise/importnow.php\">';",
      "123:     $importnowstring .= get_string('doitnow', 'enrol_imsenterprise').'</a>';",
      "",
      "[Added Lines]",
      "122:     $importurl = new moodle_url('/enrol/imsenterprise/importnow.php', array('sesskey' => sesskey()));",
      "123:     $importnowstring = get_string('aftersaving...', 'enrol_imsenterprise').' ';",
      "124:     $importnowstring .= html_writer::link($importurl, get_string('doitnow', 'enrol_imsenterprise'));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "295e4fa8f49cab5ab5f17dfc235d6039b615c571",
      "candidate_info": {
        "commit_hash": "295e4fa8f49cab5ab5f17dfc235d6039b615c571",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/295e4fa8f49cab5ab5f17dfc235d6039b615c571",
        "files": [
          "enrol/imsenterprise/README.txt",
          "enrol/imsenterprise/TODO.txt",
          "enrol/imsenterprise/db/install.php",
          "enrol/imsenterprise/db/upgrade.php",
          "enrol/imsenterprise/entv1p1_conformance_summary.html",
          "enrol/imsenterprise/importnow.php",
          "enrol/imsenterprise/lib.php",
          "enrol/imsenterprise/locallib.php",
          "enrol/imsenterprise/settings.php",
          "enrol/imsenterprise/tests/imsenterprise_test.php",
          "enrol/imsenterprise/version.php"
        ],
        "message": "MDL-29070 enrol_imsenterprise: more code cleanups\n\nIncluding:\n* fix whitespace\n* coding style fixes:\n* Declare method visibility\n* Don't have variable names with underscores\n* Comments without .\n* if/for loop spacing\n* Unused variables\n* Split long lines\n* Removed outdates files\n* moodlecheck warnings\n* code checker warnings",
        "before_after_code_files": [
          "enrol/imsenterprise/db/install.php||enrol/imsenterprise/dinstall.php",
          "enrol/imsenterprise/db/upgrade.php||enrol/imsenterprise/dupgrade.php",
          "enrol/imsenterprise/entv1p1_conformance_summary.html||enrol/imsenterprise/entv1p1_conformance_summary.html",
          "enrol/imsenterprise/importnow.php||enrol/imsenterprise/importnow.php",
          "enrol/imsenterprise/lib.php||enrol/imsenterprise/lib.php",
          "enrol/imsenterprise/locallib.php||enrol/imsenterprise/locallib.php",
          "enrol/imsenterprise/settings.php||enrol/imsenterprise/settings.php",
          "enrol/imsenterprise/tests/imsenterprise_test.php||enrol/imsenterprise/tests/imsenterprise_test.php",
          "enrol/imsenterprise/version.php||enrol/imsenterprise/version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "enrol/imsenterprise/importnow.php||enrol/imsenterprise/importnow.php",
            "enrol/imsenterprise/settings.php||enrol/imsenterprise/settings.php"
          ],
          "candidate": [
            "enrol/imsenterprise/importnow.php||enrol/imsenterprise/importnow.php",
            "enrol/imsenterprise/settings.php||enrol/imsenterprise/settings.php"
          ]
        }
      },
      "candidate_diff": {
        "enrol/imsenterprise/db/install.php||enrol/imsenterprise/dinstall.php": [
          "File: enrol/imsenterprise/db/install.php -> enrol/imsenterprise/dinstall.php"
        ],
        "enrol/imsenterprise/db/upgrade.php||enrol/imsenterprise/dupgrade.php": [
          "File: enrol/imsenterprise/db/upgrade.php -> enrol/imsenterprise/dupgrade.php"
        ],
        "enrol/imsenterprise/entv1p1_conformance_summary.html||enrol/imsenterprise/entv1p1_conformance_summary.html": [
          "File: enrol/imsenterprise/entv1p1_conformance_summary.html -> enrol/imsenterprise/entv1p1_conformance_summary.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "enrol/imsenterprise/importnow.php||enrol/imsenterprise/importnow.php": [
          "File: enrol/imsenterprise/importnow.php -> enrol/imsenterprise/importnow.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: $PAGE->navbar->add(get_string('administrationsite'));",
          "15: $PAGE->navbar->add(get_string('plugins', 'admin'));",
          "16: $PAGE->navbar->add(get_string('enrolments', 'enrol'));",
          "18: $PAGE->navbar->add(get_string('importimsfile', 'enrol_imsenterprise'));",
          "19: $PAGE->navigation->clear_cache();",
          "",
          "[Removed Lines]",
          "17: $PAGE->navbar->add(get_string('pluginname', 'enrol_imsenterprise'), new moodle_url('/admin/settings.php', array('section'=>'enrolsettingsimsenterprise')));",
          "",
          "[Added Lines]",
          "39: $PAGE->navbar->add(get_string('pluginname', 'enrol_imsenterprise'),",
          "40:     new moodle_url('/admin/settings.php', array('section' => 'enrolsettingsimsenterprise')));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23: require_once('lib.php');",
          "26: $enrol = new enrol_imsenterprise_plugin();",
          "28: ?>",
          "29: <p>Launching the IMS Enterprise \"cron\" function. The import log will appear below (giving details of any",
          "30: problems that might require attention).</p>",
          "31: <pre style=\"margin:10px; padding: 2px; border: 1px solid black; background-color: white; color: black;\"><?php",
          "33: $enrol->cron();",
          "34: ?></pre><?php",
          "35: echo $OUTPUT->footer();",
          "",
          "[Removed Lines]",
          "37: exit;",
          "38: ?>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "enrol/imsenterprise/lib.php||enrol/imsenterprise/lib.php": [
          "File: enrol/imsenterprise/lib.php -> enrol/imsenterprise/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: defined('MOODLE_INTERNAL') || die();",
          "110:         } else {",
          "183:         }",
          "272:     }",
          "275:     }",
          "278:     }",
          "282:     }",
          "294:         }",
          "326:                         }",
          "354:                         } else {",
          "357:                             $course->category = $this->get_default_category_id();",
          "358:                         }",
          "382:                 }",
          "386:             }",
          "434:     }",
          "443:         }",
          "446:         }",
          "460:                 } else {",
          "462:                 }",
          "463:             } else {",
          "465:             }",
          "481:             } else {",
          "493:             }",
          "501:         }",
          "586:                 }",
          "597:                     }",
          "613:                             } else {",
          "626:                             }",
          "631:                                     'enrol_imsenterprise', $einstance->id);",
          "632:                         }",
          "643:                     }",
          "647:                 }",
          "649:             }",
          "650:         }",
          "654:         }",
          "655:     }",
          "670:         }",
          "671:     }",
          "687:     }",
          "722:     }",
          "730:         require_once('locallib.php');",
          "732:         $imsnames = new imsenterprise_courses();",
          "733:         $courseattrs = $imsnames->get_courseattrs();",
          "735:         $this->coursemappings = array();",
          "737:             $this->coursemappings[$courseattr] = $this->get_config('imscoursemap' . $courseattr);",
          "738:         }",
          "739:     }",
          "",
          "[Removed Lines]",
          "33: Note for programmers:",
          "35: This class uses regular expressions to mine the data file. The main reason is",
          "36: that XML handling changes from PHP 4 to PHP 5, so this should work on both.",
          "38: One drawback is that the pattern-matching doesn't (currently) handle XML",
          "39: namespaces - it only copes with a <group> tag if it says <group>, and not",
          "40: (for example) <ims:group>.",
          "42: This should also be able to handle VERY LARGE FILES - so the entire IMS file is",
          "43: NOT loaded into memory at once. It's handled line-by-line, 'forgetting' tags as",
          "44: soon as they are processed.",
          "46: N.B. The \"sourcedid\" ID code is translated to Moodle's \"idnumber\" field, both",
          "47: for users and for courses.",
          "51: require_once($CFG->dirroot.'/group/lib.php');",
          "54: class enrol_imsenterprise_plugin extends enrol_plugin {",
          "62: function cron() {",
          "63:     global $CFG;",
          "66:     $imsfilelocation    = $this->get_config('imsfilelocation');",
          "67:     $logtolocation      = $this->get_config('logtolocation');",
          "68:     $mailadmins         = $this->get_config('mailadmins');",
          "69:     $prev_time          = $this->get_config('prev_time');",
          "70:     $prev_md5           = $this->get_config('prev_md5');",
          "71:     $prev_path          = $this->get_config('prev_path');",
          "73:     if (empty($imsfilelocation)) {",
          "74:         $filename = \"$CFG->dataroot/1/imsenterprise-enrol.xml\";  // Default location",
          "75:     } else {",
          "76:         $filename = $imsfilelocation;",
          "77:     }",
          "79:     $this->logfp = false; // File pointer for writing log data to",
          "80:     if(!empty($logtolocation)) {",
          "81:         $this->logfp = fopen($logtolocation, 'a');",
          "82:     }",
          "84:     $fileisnew = false;",
          "85:     if ( file_exists($filename) ) {",
          "86:         @set_time_limit(0);",
          "87:         $starttime = time();",
          "89:         $this->log_line('----------------------------------------------------------------------');",
          "90:         $this->log_line(\"IMS Enterprise enrol cron process launched at \" . userdate(time()));",
          "91:         $this->log_line('Found file '.$filename);",
          "92:         $this->xmlcache = '';",
          "95:         $this->load_role_mappings();",
          "97:         $this->load_course_mappings();",
          "99:         $md5 = md5_file($filename); // NB We'll write this value back to the database at the end of the cron",
          "100:         $filemtime = filemtime($filename);",
          "104:         if(empty($prev_path)  || ($filename != $prev_path)) {",
          "105:             $fileisnew = true;",
          "106:         } elseif(isset($prev_time) && ($filemtime <= $prev_time)) {",
          "107:             $this->log_line('File modification time is not more recent than last update - skipping processing.');",
          "108:         } elseif(isset($prev_md5) && ($md5 == $prev_md5)) {",
          "109:             $this->log_line('File MD5 hash is same as on last update - skipping processing.');",
          "111:             $fileisnew = true; // Let's process it!",
          "112:         }",
          "114:         if($fileisnew) {",
          "116:             $listoftags = array('group', 'person', 'member', 'membership', 'comments', 'properties'); // The list of tags which should trigger action (even if only cache trimming)",
          "117:             $this->continueprocessing = true; // The <properties> tag is allowed to halt processing if we're demanding a matching target",
          "120:             if (($fh = fopen($filename, \"r\")) != false) {",
          "122:                 $line = 0;",
          "123:                 while ((!feof($fh)) && $this->continueprocessing) {",
          "125:                     $line++;",
          "126:                     $curline = fgets($fh);",
          "127:                     $this->xmlcache .= $curline; // Add a line onto the XML cache",
          "129:                     while (true) {",
          "132:                       if($tagcontents = $this->full_tag_found_in_cache('group', $curline)) {",
          "133:                           $this->process_group_tag($tagcontents);",
          "134:                           $this->remove_tag_from_cache('group');",
          "135:                       } elseif($tagcontents = $this->full_tag_found_in_cache('person', $curline)) {",
          "136:                           $this->process_person_tag($tagcontents);",
          "137:                           $this->remove_tag_from_cache('person');",
          "138:                       } elseif($tagcontents = $this->full_tag_found_in_cache('membership', $curline)) {",
          "139:                           $this->process_membership_tag($tagcontents);",
          "140:                           $this->remove_tag_from_cache('membership');",
          "141:                       } elseif($tagcontents = $this->full_tag_found_in_cache('comments', $curline)) {",
          "142:                           $this->remove_tag_from_cache('comments');",
          "143:                       } elseif($tagcontents = $this->full_tag_found_in_cache('properties', $curline)) {",
          "144:                           $this->process_properties_tag($tagcontents);",
          "145:                           $this->remove_tag_from_cache('properties');",
          "146:                       } else {",
          "147:                           break;",
          "148:                       }",
          "149:                     } // End of while-tags-are-detected",
          "150:                 } // end of while loop",
          "151:                 fclose($fh);",
          "152:                 fix_course_sortorder();",
          "153:             } // End of if(file_open).",
          "155:             $timeelapsed = time() - $starttime;",
          "156:             $this->log_line('Process has completed. Time taken: '.$timeelapsed.' seconds.');",
          "158:         } // END of \"if file is new\"",
          "162:         $this->set_config('prev_time', $filemtime);",
          "163:         $this->set_config('prev_md5',  $md5);",
          "164:         $this->set_config('prev_path', $filename);",
          "166:     }else{ // end of if(file_exists)",
          "167:         $this->log_line('File not found: '.$filename);",
          "168:     }",
          "170:     if (!empty($mailadmins) && $fileisnew) {",
          "171:         $msg = \"An IMS enrolment has been carried out within Moodle.\\nTime taken: $timeelapsed seconds.\\n\\n\";",
          "172:         if(!empty($logtolocation)){",
          "173:             if($this->logfp){",
          "174:                 $msg .= \"Log data has been written to:\\n\";",
          "175:                 $msg .= \"$logtolocation\\n\";",
          "176:                 $msg .= \"(Log file size: \".ceil(filesize($logtolocation)/1024).\"Kb)\\n\\n\";",
          "177:             }else{",
          "178:                 $msg .= \"The log file appears not to have been successfully written.\\nCheck that the file is writeable by the server:\\n\";",
          "179:                 $msg .= \"$logtolocation\\n\\n\";",
          "180:             }",
          "181:         }else{",
          "182:             $msg .= \"Logging is currently not active.\";",
          "185:         $eventdata = new stdClass();",
          "186:         $eventdata->modulename        = 'moodle';",
          "187:         $eventdata->component         = 'enrol_imsenterprise';",
          "188:         $eventdata->name              = 'imsenterprise_enrolment';",
          "189:         $eventdata->userfrom          = get_admin();",
          "190:         $eventdata->userto            = get_admin();",
          "191:         $eventdata->subject           = \"Moodle IMS Enterprise enrolment notification\";",
          "192:         $eventdata->fullmessage       = $msg;",
          "193:         $eventdata->fullmessageformat = FORMAT_PLAIN;",
          "194:         $eventdata->fullmessagehtml   = '';",
          "195:         $eventdata->smallmessage      = '';",
          "196:         message_send($eventdata);",
          "198:         $this->log_line('Notification email sent to administrator.');",
          "200:     }",
          "202:     if($this->logfp){",
          "203:       fclose($this->logfp);",
          "204:     }",
          "207: } // end of cron() function",
          "216: function full_tag_found_in_cache($tagname, $latestline){ // Return entire element if found. Otherwise return false.",
          "217:     if(strpos(strtolower($latestline), '</'.strtolower($tagname).'>')===false){",
          "218:         return false;",
          "219:     }elseif(preg_match('{(<'.$tagname.'\\b.*?>.*?</'.$tagname.'>)}is', $this->xmlcache, $matches)){",
          "220:         return $matches[1];",
          "221:     }else return false;",
          "222: }",
          "229: function remove_tag_from_cache($tagname){ // Trim the cache so we're not in danger of running out of memory.",
          "232:     $this->xmlcache = trim(preg_replace('{<'.$tagname.'\\b.*?>.*?</'.$tagname.'>}is', '', $this->xmlcache, 1)); // \"1\" so that we replace only the FIRST instance",
          "234: }",
          "242: function get_recstatus($tagdata, $tagname){",
          "243:     if(preg_match('{<'.$tagname.'\\b[^>]*recstatus\\s*=\\s*[\"\\'](\\d)[\"\\']}is', $tagdata, $matches)){",
          "245:         return intval($matches[1]);",
          "246:     }else{",
          "248:         return 0; // Unspecified",
          "249:     }",
          "250: }",
          "256: function process_group_tag($tagcontents) {",
          "257:     global $DB;",
          "260:     $truncatecoursecodes    = $this->get_config('truncatecoursecodes');",
          "261:     $createnewcourses       = $this->get_config('createnewcourses');",
          "262:     $createnewcategories    = $this->get_config('createnewcategories');",
          "265:     $group = new stdClass();",
          "266:     if (preg_match('{<sourcedid>.*?<id>(.+?)</id>.*?</sourcedid>}is', $tagcontents, $matches)) {",
          "267:         $group->coursecode = trim($matches[1]);",
          "268:     }",
          "270:     if (preg_match('{<description>.*?<long>(.*?)</long>.*?</description>}is', $tagcontents, $matches)) {",
          "271:         $group->long = trim($matches[1]);",
          "273:     if (preg_match('{<description>.*?<short>(.*?)</short>.*?</description>}is', $tagcontents, $matches)) {",
          "274:         $group->short = trim($matches[1]);",
          "276:     if (preg_match('{<description>.*?<full>(.*?)</full>.*?</description>}is', $tagcontents, $matches)) {",
          "277:         $group->full = trim($matches[1]);",
          "280:     if (preg_match('{<org>.*?<orgunit>(.*?)</orgunit>.*?</org>}is', $tagcontents, $matches)) {",
          "281:         $group->category = trim($matches[1]);",
          "284:     $recstatus = ($this->get_recstatus($tagcontents, 'group'));",
          "286:     if (!(strlen($group->coursecode)>0)) {",
          "287:         $this->log_line('Error at line '.$line.': Unable to find course code in \\'group\\' element.');",
          "288:     } else {",
          "290:         if (intval($truncatecoursecodes)>0) {",
          "291:             $group->coursecode = ($truncatecoursecodes > 0)",
          "292:                      ? substr($group->coursecode, 0, intval($truncatecoursecodes))",
          "293:                      : $group->coursecode;",
          "297:         $group->coursecode = array($group->coursecode);",
          "300:         foreach ($group->coursecode as $coursecode) {",
          "301:             $coursecode = trim($coursecode);",
          "302:             if (!$DB->get_field('course', 'id', array('idnumber'=>$coursecode))) {",
          "303:                 if (!$createnewcourses) {",
          "304:                     $this->log_line(\"Course $coursecode not found in Moodle's course idnumbers.\");",
          "305:                 } else {",
          "308:                     $courseconfig = get_config('moodlecourse'); // Load Moodle Course shell defaults",
          "311:                     $course = new stdClass();",
          "312:                     foreach ($this->coursemappings as $courseattr => $imsname) {",
          "314:                         if ($imsname == 'ignore') {",
          "315:                             continue;",
          "316:                         }",
          "319:                         if ($imsname == 'coursecode') {",
          "320:                             $course->{$courseattr} = $coursecode;",
          "321:                         } else if (!empty($group->{$imsname})) {",
          "322:                             $course->{$courseattr} = $group->{$imsname};",
          "323:                         } else {",
          "324:                             $this->log_line('No ' . $imsname . ' description tag found for ' . $coursecode . ' coursecode, using ' . $coursecode . ' instead');",
          "325:                             $course->{$courseattr} = $coursecode;",
          "327:                     }",
          "329:                     $course->idnumber = $coursecode;",
          "330:                     $course->format = $courseconfig->format;",
          "331:                     $course->visible = $courseconfig->visible;",
          "332:                     $course->newsitems = $courseconfig->newsitems;",
          "333:                     $course->showgrades = $courseconfig->showgrades;",
          "334:                     $course->showreports = $courseconfig->showreports;",
          "335:                     $course->maxbytes = $courseconfig->maxbytes;",
          "336:                     $course->groupmode = $courseconfig->groupmode;",
          "337:                     $course->groupmodeforce = $courseconfig->groupmodeforce;",
          "338:                     $course->enablecompletion = $courseconfig->enablecompletion;",
          "342:                     if (!empty($group->category)) {",
          "344:                         if ($catid = $DB->get_field('course_categories', 'id', array('name'=>$group->category))) {",
          "345:                             $course->category = $catid;",
          "346:                         } else if ($createnewcategories) {",
          "348:                             $newcat = new stdClass();",
          "349:                             $newcat->name = $group->category;",
          "350:                             $newcat->visible = 0;",
          "351:                             $catid = $DB->insert_record('course_categories', $newcat);",
          "352:                             $course->category = $catid;",
          "353:                             $this->log_line(\"Created new (hidden) category, #$catid: $newcat->name\");",
          "356:                             $this->log_line('Category '.$group->category.' not found in Moodle database, so using default category instead.');",
          "359:                     } else {",
          "360:                         $course->category = $this->get_default_category_id();",
          "361:                     }",
          "362:                     $course->timecreated = time();",
          "363:                     $course->startdate = time();",
          "365:                     $course->sortorder = 0;",
          "366:                     $courseid = $DB->insert_record('course', $course);",
          "369:                     $course->id = $courseid;",
          "370:                     enrol_course_updated(true, $course, null);",
          "373:                     $course = $DB->get_record('course', array('id' => $courseid));",
          "374:                     blocks_add_default_course_blocks($course);",
          "377:                     course_create_sections_if_missing($course, 0);",
          "379:                     add_to_log(SITEID, \"course\", \"new\", \"view.php?id=$course->id\", \"$course->fullname (ID $course->id)\");",
          "381:                     $this->log_line(\"Created course $coursecode in Moodle (Moodle ID is $course->id)\");",
          "383:             } else if ($recstatus==3 && ($courseid = $DB->get_field('course', 'id', array('idnumber'=>$coursecode)))) {",
          "385:                 $DB->set_field('course', 'visible', '0', array('id'=>$courseid));",
          "387:         } // End of foreach(coursecode)",
          "388:     }",
          "389: } // End process_group_tag()",
          "395: function process_person_tag($tagcontents){",
          "396:     global $CFG, $DB;",
          "399:     $imssourcedidfallback   = $this->get_config('imssourcedidfallback');",
          "400:     $fixcaseusernames       = $this->get_config('fixcaseusernames');",
          "401:     $fixcasepersonalnames   = $this->get_config('fixcasepersonalnames');",
          "402:     $imsdeleteusers         = $this->get_config('imsdeleteusers');",
          "403:     $createnewusers         = $this->get_config('createnewusers');",
          "405:     $person = new stdClass();",
          "406:     if(preg_match('{<sourcedid>.*?<id>(.+?)</id>.*?</sourcedid>}is', $tagcontents, $matches)){",
          "407:         $person->idnumber = trim($matches[1]);",
          "408:     }",
          "409:     if(preg_match('{<name>.*?<n>.*?<given>(.+?)</given>.*?</n>.*?</name>}is', $tagcontents, $matches)){",
          "410:         $person->firstname = trim($matches[1]);",
          "411:     }",
          "412:     if(preg_match('{<name>.*?<n>.*?<family>(.+?)</family>.*?</n>.*?</name>}is', $tagcontents, $matches)){",
          "413:         $person->lastname = trim($matches[1]);",
          "414:     }",
          "415:     if(preg_match('{<userid>(.*?)</userid>}is', $tagcontents, $matches)){",
          "416:         $person->username = trim($matches[1]);",
          "417:     }",
          "418:     if($imssourcedidfallback && trim($person->username)==''){",
          "421:         $person->username = $person->idnumber;",
          "422:     }",
          "423:     if(preg_match('{<email>(.*?)</email>}is', $tagcontents, $matches)){",
          "424:         $person->email = trim($matches[1]);",
          "425:     }",
          "426:     if(preg_match('{<url>(.*?)</url>}is', $tagcontents, $matches)){",
          "427:         $person->url = trim($matches[1]);",
          "428:     }",
          "429:     if(preg_match('{<adr>.*?<locality>(.+?)</locality>.*?</adr>}is', $tagcontents, $matches)){",
          "430:         $person->city = trim($matches[1]);",
          "431:     }",
          "432:     if(preg_match('{<adr>.*?<country>(.+?)</country>.*?</adr>}is', $tagcontents, $matches)){",
          "433:         $person->country = trim($matches[1]);",
          "437:     if($fixcaseusernames && isset($person->username)){",
          "438:         $person->username = strtolower($person->username);",
          "439:     }",
          "440:     if($fixcasepersonalnames){",
          "441:         if(isset($person->firstname)){",
          "442:             $person->firstname = ucwords(strtolower($person->firstname));",
          "444:         if(isset($person->lastname)){",
          "445:             $person->lastname = ucwords(strtolower($person->lastname));",
          "447:     }",
          "449:     $recstatus = ($this->get_recstatus($tagcontents, 'person'));",
          "453:     if($recstatus==3){",
          "455:         if($imsdeleteusers){ // If we're allowed to delete user records",
          "457:             if ($user = $DB->get_record('user', array('username'=>$person->username, 'mnethostid'=>$CFG->mnet_localhost_id, 'deleted'=>0))) {",
          "458:                 if (delete_user($user)) {",
          "459:                     $this->log_line(\"Deleted user '$person->username' (ID number $person->idnumber).\");",
          "461:                     $this->log_line(\"Error deleting '$person->username' (ID number $person->idnumber).\");",
          "464:                 $this->log_line(\"Can not delete user '$person->username' (ID number $person->idnumber) - user does not exist.\");",
          "466:         }else{",
          "467:             $this->log_line(\"Ignoring deletion request for user '$person->username' (ID number $person->idnumber).\");",
          "468:         }",
          "470:     }else{ // Add or update record",
          "474:         if(!$DB->get_field('user', 'id', array('idnumber'=>$person->idnumber)) && $createnewusers){",
          "476:             if((!isset($person->username)) || (strlen($person->username)==0)){",
          "477:                 $this->log_line(\"Cannot create new user for ID # $person->idnumber - no username listed in IMS data for this person.\");",
          "478:             } else if ($DB->get_field('user', 'id', array('username'=>$person->username))){",
          "480:                 $DB->set_field('user', 'idnumber', $person->idnumber, array('username'=>$person->username));",
          "484:             $person->lang = $CFG->lang;",
          "485:             $auth = explode(',', $CFG->auth); //TODO: this needs more work due tu multiauth changes, use first auth for now",
          "486:             $auth = reset($auth);",
          "487:             $person->auth = $auth;",
          "488:             $person->confirmed = 1;",
          "489:             $person->timemodified = time();",
          "490:             $person->mnethostid = $CFG->mnet_localhost_id;",
          "491:             $id = $DB->insert_record('user', $person);",
          "492:                 $this->log_line(\"Created user record for user '$person->username' (ID number $person->idnumber).\");",
          "494:         } elseif ($createnewusers) {",
          "495:             $this->log_line(\"User record already exists for user '$person->username' (ID number $person->idnumber).\");",
          "499:         }else{",
          "500:             $this->log_line(\"No user record found for '$person->username' (ID number $person->idnumber).\");",
          "503:     } // End of are-we-deleting-or-adding",
          "505: } // End process_person_tag()",
          "512: function process_membership_tag($tagcontents){",
          "513:     global $DB;",
          "516:     $truncatecoursecodes = $this->get_config('truncatecoursecodes');",
          "517:     $imscapitafix = $this->get_config('imscapitafix');",
          "519:     $memberstally = 0;",
          "520:     $membersuntally = 0;",
          "523:     $groupids = array();",
          "525:     $ship = new stdClass();",
          "527:     if(preg_match('{<sourcedid>.*?<id>(.+?)</id>.*?</sourcedid>}is', $tagcontents, $matches)){",
          "528:         $ship->coursecode = ($truncatecoursecodes > 0)",
          "529:                                  ? substr(trim($matches[1]), 0, intval($truncatecoursecodes))",
          "530:                                  : trim($matches[1]);",
          "531:         $ship->courseid = $DB->get_field('course', 'id', array('idnumber'=>$ship->coursecode));",
          "532:     }",
          "533:     if($ship->courseid && preg_match_all('{<member>(.*?)</member>}is', $tagcontents, $membermatches, PREG_SET_ORDER)){",
          "534:         $courseobj = new stdClass();",
          "535:         $courseobj->id = $ship->courseid;",
          "537:         foreach($membermatches as $mmatch){",
          "538:             $member = new stdClass();",
          "539:             $memberstoreobj = new stdClass();",
          "540:             if(preg_match('{<sourcedid>.*?<id>(.+?)</id>.*?</sourcedid>}is', $mmatch[1], $matches)){",
          "541:                 $member->idnumber = trim($matches[1]);",
          "542:             }",
          "543:             if(preg_match('{<role\\s+roletype=[\"\\'](.+?)[\"\\'].*?>}is', $mmatch[1], $matches)){",
          "544:                 $member->roletype = trim($matches[1]); // 01 means Student, 02 means Instructor, 3 means ContentDeveloper, and there are more besides",
          "545:             } elseif($imscapitafix && preg_match('{<roletype>(.+?)</roletype>}is', $mmatch[1], $matches)){",
          "547:                 $member->roletype = trim($matches[1]); // 01 means Student, 02 means Instructor, 3 means ContentDeveloper, and there are more besides",
          "548:             }",
          "549:             if(preg_match('{<role\\b.*?<status>(.+?)</status>.*?</role>}is', $mmatch[1], $matches)){",
          "550:                 $member->status = trim($matches[1]); // 1 means active, 0 means inactive - treat this as enrol vs unenrol",
          "551:             }",
          "553:             $recstatus = ($this->get_recstatus($mmatch[1], 'role'));",
          "554:             if($recstatus==3){",
          "555:               $member->status = 0; // See above - recstatus of 3 (==delete) is treated the same as status of 0",
          "556:             }",
          "558:             $timeframe = new stdClass();",
          "559:             $timeframe->begin = 0;",
          "560:             $timeframe->end = 0;",
          "561:             if(preg_match('{<role\\b.*?<timeframe>(.+?)</timeframe>.*?</role>}is', $mmatch[1], $matches)){",
          "562:                 $timeframe = $this->decode_timeframe($matches[1]);",
          "563:             }",
          "564:             if(preg_match('{<role\\b.*?<extension>.*?<cohort>(.+?)</cohort>.*?</extension>.*?</role>}is', $mmatch[1], $matches)){",
          "565:                 $member->groupname = trim($matches[1]);",
          "567:             }",
          "569:             $rolecontext = context_course::instance($ship->courseid);",
          "570:             $rolecontext = $rolecontext->id; // All we really want is the ID",
          "573:             $memberstoreobj->userid = $DB->get_field('user', 'id', array('idnumber'=>$member->idnumber));",
          "574:             $memberstoreobj->enrol = 'imsenterprise';",
          "575:             $memberstoreobj->course = $ship->courseid;",
          "576:             $memberstoreobj->time = time();",
          "577:             $memberstoreobj->timemodified = time();",
          "578:             if($memberstoreobj->userid){",
          "582:                 $moodleroleid = $this->rolemappings[$member->roletype];",
          "583:                 if(!$moodleroleid) {",
          "584:                     $this->log_line(\"SKIPPING role $member->roletype for $memberstoreobj->userid ($member->idnumber) in course $memberstoreobj->course\");",
          "585:                     continue;",
          "588:                 if(intval($member->status) == 1) {",
          "591:                     $einstance = $DB->get_record('enrol',",
          "592:                                     array('courseid' => $courseobj->id, 'enrol' => $memberstoreobj->enrol));",
          "593:                     if (empty($einstance)) {",
          "595:                         $enrolid = $this->add_instance($courseobj);",
          "596:                         $einstance = $DB->get_record('enrol', array('id' => $enrolid));",
          "599:                     $this->enrol_user($einstance, $memberstoreobj->userid, $moodleroleid, $timeframe->begin, $timeframe->end);",
          "601:                     $this->log_line(\"Enrolled user #$memberstoreobj->userid ($member->idnumber) to role $member->roletype in course $memberstoreobj->course\");",
          "602:                     $memberstally++;",
          "605:                     if(isset($member->groupname)){",
          "607:                         if(isset($groupids[$member->groupname])) {",
          "608:                             $member->groupid = $groupids[$member->groupname]; // Recall the group ID from cache if available",
          "609:                         } else {",
          "610:                             if($groupid = $DB->get_field('groups', 'id', array('courseid'=>$ship->courseid, 'name'=>$member->groupname))){",
          "611:                                 $member->groupid = $groupid;",
          "612:                                 $groupids[$member->groupname] = $groupid; // Store ID in cache",
          "615:                                 $group = new stdClass();",
          "616:                                 $group->name = $member->groupname;",
          "617:                                 $group->courseid = $ship->courseid;",
          "618:                                 $group->timecreated = time();",
          "619:                                 $group->timemodified = time();",
          "620:                                 $groupid = $DB->insert_record('groups', $group);",
          "621:                                 $this->log_line('Added a new group for this course: '.$group->name);",
          "622:                                 $groupids[$member->groupname] = $groupid; // Store ID in cache",
          "623:                                 $member->groupid = $groupid;",
          "625:                                 cache_helper::invalidate_by_definition('core', 'groupdata', array(), array($ship->courseid));",
          "627:                         }",
          "629:                         if($member->groupid) {",
          "630:                             groups_add_member($member->groupid, $memberstoreobj->userid,",
          "633:                     } // End of group-enrolment (from member.role.extension.cohort tag)",
          "635:                 } elseif ($this->get_config('imsunenrol')) {",
          "638:                     $einstances = $DB->get_records('enrol',",
          "639:                                     array('enrol' => $memberstoreobj->enrol, 'courseid' => $courseobj->id));",
          "640:                     foreach ($einstances as $einstance) {",
          "642:                         $this->unenrol_user($einstance, $memberstoreobj->userid);",
          "645:                     $membersuntally++;",
          "646:                     $this->log_line(\"Unenrolled $member->idnumber from role $moodleroleid in course\");",
          "651:         $this->log_line(\"Added $memberstally users to course $ship->coursecode\");",
          "652:         if($membersuntally > 0){",
          "653:             $this->log_line(\"Removed $membersuntally users from course $ship->coursecode\");",
          "656: } // End process_membership_tag()",
          "663: function process_properties_tag($tagcontents){",
          "664:     $imsrestricttarget = $this->get_config('imsrestricttarget');",
          "666:     if ($imsrestricttarget) {",
          "667:         if(!(preg_match('{<target>'.preg_quote($imsrestricttarget).'</target>}is', $tagcontents, $matches))){",
          "668:             $this->log_line(\"Skipping processing: required target \\\"$imsrestricttarget\\\" not specified in this data.\");",
          "669:             $this->continueprocessing = false;",
          "672: }",
          "680: function log_line($string){",
          "682:     if (!PHPUNIT_TEST) {",
          "683:         mtrace($string);",
          "684:     }",
          "685:     if($this->logfp) {",
          "686:         fwrite($this->logfp, $string . \"\\n\");",
          "688: }",
          "693: function decode_timeframe($string){ // Pass me the INNER CONTENTS of a <timeframe> tag - beginning and/or ending is returned, in unix time, zero indicating not specified",
          "694:     $ret = new stdClass();",
          "695:     $ret->begin = $ret->end = 0;",
          "699:     if(preg_match('{<begin\\s+restrict=\"1\">(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)</begin>}is', $string, $matches)){",
          "700:         $ret->begin = mktime(0,0,0, $matches[2], $matches[3], $matches[1]);",
          "701:     }",
          "702:     if(preg_match('{<end\\s+restrict=\"1\">(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)</end>}is', $string, $matches)){",
          "703:         $ret->end = mktime(0,0,0, $matches[2], $matches[3], $matches[1]);",
          "704:     }",
          "705:     return $ret;",
          "706: } // End decode_timeframe",
          "712: function load_role_mappings() {",
          "713:     require_once('locallib.php');",
          "714:     global $DB;",
          "716:     $imsroles = new imsenterprise_roles();",
          "717:     $imsroles = $imsroles->get_imsroles();",
          "719:     $this->rolemappings = array();",
          "720:     foreach($imsroles as $imsrolenum=>$imsrolename) {",
          "721:         $this->rolemappings[$imsrolenum] = $this->rolemappings[$imsrolename] = $this->get_config('imsrolemap' . $imsrolenum);",
          "723: }",
          "729:     function load_course_mappings() {",
          "736:         foreach($courseattrs as $courseattr) {",
          "",
          "[Added Lines]",
          "31: require_once($CFG->dirroot.'/group/lib.php');",
          "40: class enrol_imsenterprise_plugin extends enrol_plugin {",
          "45:     protected $logfp;",
          "50:     protected $continueprocessing;",
          "55:     protected $xmlcache;",
          "60:     protected $coursemappings;",
          "65:     protected $rolemappings;",
          "73:     public function cron() {",
          "74:         global $CFG;",
          "77:         $imsfilelocation = $this->get_config('imsfilelocation');",
          "78:         $logtolocation = $this->get_config('logtolocation');",
          "79:         $mailadmins = $this->get_config('mailadmins');",
          "80:         $prevtime = $this->get_config('prev_time');",
          "81:         $prevmd5 = $this->get_config('prev_md5');",
          "82:         $prevpath = $this->get_config('prev_path');",
          "84:         if (empty($imsfilelocation)) {",
          "85:             $filename = \"$CFG->dataroot/1/imsenterprise-enrol.xml\";  // Default location.",
          "87:             $filename = $imsfilelocation;",
          "88:         }",
          "90:         $this->logfp = false;",
          "91:         if (!empty($logtolocation)) {",
          "92:             $this->logfp = fopen($logtolocation, 'a');",
          "95:         $fileisnew = false;",
          "96:         if ( file_exists($filename) ) {",
          "97:             @set_time_limit(0);",
          "98:             $starttime = time();",
          "100:             $this->log_line('----------------------------------------------------------------------');",
          "101:             $this->log_line(\"IMS Enterprise enrol cron process launched at \" . userdate(time()));",
          "102:             $this->log_line('Found file '.$filename);",
          "103:             $this->xmlcache = '';",
          "106:             $this->load_role_mappings();",
          "108:             $this->load_course_mappings();",
          "110:             $md5 = md5_file($filename); // NB We'll write this value back to the database at the end of the cron.",
          "111:             $filemtime = filemtime($filename);",
          "115:             if (empty($prevpath)  || ($filename != $prevpath)) {",
          "116:                 $fileisnew = true;",
          "117:             } else if (isset($prevtime) && ($filemtime <= $prevtime)) {",
          "118:                 $this->log_line('File modification time is not more recent than last update - skipping processing.');",
          "119:             } else if (isset($prevmd5) && ($md5 == $prevmd5)) {",
          "120:                 $this->log_line('File MD5 hash is same as on last update - skipping processing.');",
          "121:             } else {",
          "122:                 $fileisnew = true; // Let's process it!",
          "123:             }",
          "125:             if ($fileisnew) {",
          "128:                 $this->continueprocessing = true;",
          "131:                 if (($fh = fopen($filename, \"r\")) != false) {",
          "133:                     $line = 0;",
          "134:                     while ((!feof($fh)) && $this->continueprocessing) {",
          "136:                         $line++;",
          "137:                         $curline = fgets($fh);",
          "138:                         $this->xmlcache .= $curline; // Add a line onto the XML cache.",
          "140:                         while (true) {",
          "143:                             if ($tagcontents = $this->full_tag_found_in_cache('group', $curline)) {",
          "144:                                 $this->process_group_tag($tagcontents);",
          "145:                                 $this->remove_tag_from_cache('group');",
          "146:                             } else if ($tagcontents = $this->full_tag_found_in_cache('person', $curline)) {",
          "147:                                 $this->process_person_tag($tagcontents);",
          "148:                                 $this->remove_tag_from_cache('person');",
          "149:                             } else if ($tagcontents = $this->full_tag_found_in_cache('membership', $curline)) {",
          "150:                                 $this->process_membership_tag($tagcontents);",
          "151:                                 $this->remove_tag_from_cache('membership');",
          "152:                             } else if ($tagcontents = $this->full_tag_found_in_cache('comments', $curline)) {",
          "153:                                 $this->remove_tag_from_cache('comments');",
          "154:                             } else if ($tagcontents = $this->full_tag_found_in_cache('properties', $curline)) {",
          "155:                                 $this->process_properties_tag($tagcontents);",
          "156:                                 $this->remove_tag_from_cache('properties');",
          "157:                             } else {",
          "158:                                 break;",
          "159:                             }",
          "160:                         }",
          "161:                     }",
          "162:                     fclose($fh);",
          "163:                     fix_course_sortorder();",
          "164:                 }",
          "166:                 $timeelapsed = time() - $starttime;",
          "167:                 $this->log_line('Process has completed. Time taken: '.$timeelapsed.' seconds.');",
          "169:             }",
          "172:             $this->set_config('prev_time', $filemtime);",
          "173:             $this->set_config('prev_md5',  $md5);",
          "174:             $this->set_config('prev_path', $filename);",
          "176:         } else {",
          "177:             $this->log_line('File not found: '.$filename);",
          "178:         }",
          "180:         if (!empty($mailadmins) && $fileisnew) {",
          "181:             $timeelapsed = isset($timeelapsed) ? $timeelapsed : 0;",
          "182:             $msg = \"An IMS enrolment has been carried out within Moodle.\\nTime taken: $timeelapsed seconds.\\n\\n\";",
          "183:             if (!empty($logtolocation)) {",
          "184:                 if ($this->logfp) {",
          "185:                     $msg .= \"Log data has been written to:\\n\";",
          "186:                     $msg .= \"$logtolocation\\n\";",
          "187:                     $msg .= \"(Log file size: \".ceil(filesize($logtolocation) / 1024).\"Kb)\\n\\n\";",
          "188:                 } else {",
          "189:                     $msg .= \"The log file appears not to have been successfully written.\\n\";",
          "190:                     $msg .= \"Check that the file is writeable by the server:\\n\";",
          "191:                     $msg .= \"$logtolocation\\n\\n\";",
          "192:                 }",
          "193:             } else {",
          "194:                 $msg .= \"Logging is currently not active.\";",
          "195:             }",
          "197:             $eventdata = new stdClass();",
          "198:             $eventdata->modulename        = 'moodle';",
          "199:             $eventdata->component         = 'enrol_imsenterprise';",
          "200:             $eventdata->name              = 'imsenterprise_enrolment';",
          "201:             $eventdata->userfrom          = get_admin();",
          "202:             $eventdata->userto            = get_admin();",
          "203:             $eventdata->subject           = \"Moodle IMS Enterprise enrolment notification\";",
          "204:             $eventdata->fullmessage       = $msg;",
          "205:             $eventdata->fullmessageformat = FORMAT_PLAIN;",
          "206:             $eventdata->fullmessagehtml   = '';",
          "207:             $eventdata->smallmessage      = '';",
          "208:             message_send($eventdata);",
          "210:             $this->log_line('Notification email sent to administrator.');",
          "212:         }",
          "214:         if ($this->logfp) {",
          "215:             fclose($this->logfp);",
          "216:         }",
          "228:     protected function full_tag_found_in_cache($tagname, $latestline) {",
          "230:         if (strpos(strtolower($latestline), '</'.strtolower($tagname).'>') === false) {",
          "231:             return false;",
          "232:         } else if (preg_match('{(<'.$tagname.'\\b.*?>.*?</'.$tagname.'>)}is', $this->xmlcache, $matches)) {",
          "233:             return $matches[1];",
          "234:         } else {",
          "235:             return false;",
          "236:         }",
          "245:     protected function remove_tag_from_cache($tagname) {",
          "248:         $this->xmlcache = trim(preg_replace('{<'.$tagname.'\\b.*?>.*?</'.$tagname.'>}is', '', $this->xmlcache, 1));",
          "259:     protected static function get_recstatus($tagdata, $tagname) {",
          "260:         if (preg_match('{<'.$tagname.'\\b[^>]*recstatus\\s*=\\s*[\"\\'](\\d)[\"\\']}is', $tagdata, $matches)) {",
          "261:             return intval($matches[1]);",
          "262:         } else {",
          "263:             return 0; // Unspecified.",
          "264:         }",
          "272:     protected function process_group_tag($tagcontents) {",
          "273:         global $DB;",
          "276:         $truncatecoursecodes    = $this->get_config('truncatecoursecodes');",
          "277:         $createnewcourses       = $this->get_config('createnewcourses');",
          "278:         $createnewcategories    = $this->get_config('createnewcategories');",
          "281:         $group = new stdClass();",
          "282:         if (preg_match('{<sourcedid>.*?<id>(.+?)</id>.*?</sourcedid>}is', $tagcontents, $matches)) {",
          "283:             $group->coursecode = trim($matches[1]);",
          "284:         }",
          "286:         if (preg_match('{<description>.*?<long>(.*?)</long>.*?</description>}is', $tagcontents, $matches)) {",
          "287:             $group->long = trim($matches[1]);",
          "288:         }",
          "289:         if (preg_match('{<description>.*?<short>(.*?)</short>.*?</description>}is', $tagcontents, $matches)) {",
          "290:             $group->short = trim($matches[1]);",
          "291:         }",
          "292:         if (preg_match('{<description>.*?<full>(.*?)</full>.*?</description>}is', $tagcontents, $matches)) {",
          "293:             $group->full = trim($matches[1]);",
          "296:         if (preg_match('{<org>.*?<orgunit>(.*?)</orgunit>.*?</org>}is', $tagcontents, $matches)) {",
          "297:             $group->category = trim($matches[1]);",
          "298:         }",
          "300:         $recstatus = ($this->get_recstatus($tagcontents, 'group'));",
          "302:         if (empty($group->coursecode)) {",
          "303:             $this->log_line('Error: Unable to find course code in \\'group\\' element.');",
          "304:         } else {",
          "306:             if (intval($truncatecoursecodes) > 0) {",
          "307:                 $group->coursecode = ($truncatecoursecodes > 0)",
          "308:                     ? substr($group->coursecode, 0, intval($truncatecoursecodes))",
          "309:                     : $group->coursecode;",
          "310:             }",
          "313:             $group->coursecode = array($group->coursecode);",
          "316:             foreach ($group->coursecode as $coursecode) {",
          "317:                 $coursecode = trim($coursecode);",
          "318:                 if (!$DB->get_field('course', 'id', array('idnumber' => $coursecode))) {",
          "319:                     if (!$createnewcourses) {",
          "320:                         $this->log_line(\"Course $coursecode not found in Moodle's course idnumbers.\");",
          "321:                     } else {",
          "324:                         $courseconfig = get_config('moodlecourse'); // Load Moodle Course shell defaults.",
          "327:                         $course = new stdClass();",
          "328:                         foreach ($this->coursemappings as $courseattr => $imsname) {",
          "330:                             if ($imsname == 'ignore') {",
          "331:                                 continue;",
          "332:                             }",
          "335:                             if ($imsname == 'coursecode') {",
          "336:                                 $course->{$courseattr} = $coursecode;",
          "337:                             } else if (!empty($group->{$imsname})) {",
          "338:                                 $course->{$courseattr} = $group->{$imsname};",
          "339:                             } else {",
          "340:                                 $this->log_line('No ' . $imsname . ' description tag found for '",
          "341:                                     .$coursecode . ' coursecode, using ' . $coursecode . ' instead');",
          "342:                                 $course->{$courseattr} = $coursecode;",
          "343:                             }",
          "346:                         $course->idnumber = $coursecode;",
          "347:                         $course->format = $courseconfig->format;",
          "348:                         $course->visible = $courseconfig->visible;",
          "349:                         $course->newsitems = $courseconfig->newsitems;",
          "350:                         $course->showgrades = $courseconfig->showgrades;",
          "351:                         $course->showreports = $courseconfig->showreports;",
          "352:                         $course->maxbytes = $courseconfig->maxbytes;",
          "353:                         $course->groupmode = $courseconfig->groupmode;",
          "354:                         $course->groupmodeforce = $courseconfig->groupmodeforce;",
          "355:                         $course->enablecompletion = $courseconfig->enablecompletion;",
          "359:                         if (!empty($group->category)) {",
          "361:                             if ($catid = $DB->get_field('course_categories', 'id', array('name' => $group->category))) {",
          "362:                                 $course->category = $catid;",
          "363:                             } else if ($createnewcategories) {",
          "365:                                 $newcat = new stdClass();",
          "366:                                 $newcat->name = $group->category;",
          "367:                                 $newcat->visible = 0;",
          "368:                                 $catid = $DB->insert_record('course_categories', $newcat);",
          "369:                                 $course->category = $catid;",
          "370:                                 $this->log_line(\"Created new (hidden) category, #$catid: $newcat->name\");",
          "371:                             } else {",
          "373:                                 $this->log_line('Category '.$group->category.' not found in Moodle database, so using '.",
          "374:                                     'default category instead.');",
          "375:                                 $course->category = $this->get_default_category_id();",
          "376:                             }",
          "380:                         $course->timecreated = time();",
          "381:                         $course->startdate = time();",
          "383:                         $course->sortorder = 0;",
          "384:                         $courseid = $DB->insert_record('course', $course);",
          "387:                         $course->id = $courseid;",
          "388:                         enrol_course_updated(true, $course, null);",
          "391:                         $course = $DB->get_record('course', array('id' => $courseid));",
          "392:                         blocks_add_default_course_blocks($course);",
          "395:                         course_create_sections_if_missing($course, 0);",
          "397:                         add_to_log(SITEID, \"course\", \"new\", \"view.php?id=$course->id\", \"$course->fullname (ID $course->id)\");",
          "399:                         $this->log_line(\"Created course $coursecode in Moodle (Moodle ID is $course->id)\");",
          "400:                     }",
          "401:                 } else if ($recstatus == 3 && ($courseid = $DB->get_field('course', 'id', array('idnumber' => $coursecode)))) {",
          "403:                     $DB->set_field('course', 'visible', '0', array('id' => $courseid));",
          "406:         }",
          "414:     protected function process_person_tag($tagcontents) {",
          "415:         global $CFG, $DB;",
          "418:         $imssourcedidfallback   = $this->get_config('imssourcedidfallback');",
          "419:         $fixcaseusernames       = $this->get_config('fixcaseusernames');",
          "420:         $fixcasepersonalnames   = $this->get_config('fixcasepersonalnames');",
          "421:         $imsdeleteusers         = $this->get_config('imsdeleteusers');",
          "422:         $createnewusers         = $this->get_config('createnewusers');",
          "424:         $person = new stdClass();",
          "425:         if (preg_match('{<sourcedid>.*?<id>(.+?)</id>.*?</sourcedid>}is', $tagcontents, $matches)) {",
          "426:             $person->idnumber = trim($matches[1]);",
          "428:         if (preg_match('{<name>.*?<n>.*?<given>(.+?)</given>.*?</n>.*?</name>}is', $tagcontents, $matches)) {",
          "429:             $person->firstname = trim($matches[1]);",
          "430:         }",
          "431:         if (preg_match('{<name>.*?<n>.*?<family>(.+?)</family>.*?</n>.*?</name>}is', $tagcontents, $matches)) {",
          "432:             $person->lastname = trim($matches[1]);",
          "433:         }",
          "434:         if (preg_match('{<userid>(.*?)</userid>}is', $tagcontents, $matches)) {",
          "435:             $person->username = trim($matches[1]);",
          "436:         }",
          "437:         if ($imssourcedidfallback && trim($person->username) == '') {",
          "440:             $person->username = $person->idnumber;",
          "441:         }",
          "442:         if (preg_match('{<email>(.*?)</email>}is', $tagcontents, $matches)) {",
          "443:             $person->email = trim($matches[1]);",
          "444:         }",
          "445:         if (preg_match('{<url>(.*?)</url>}is', $tagcontents, $matches)) {",
          "446:             $person->url = trim($matches[1]);",
          "447:         }",
          "448:         if (preg_match('{<adr>.*?<locality>(.+?)</locality>.*?</adr>}is', $tagcontents, $matches)) {",
          "449:             $person->city = trim($matches[1]);",
          "450:         }",
          "451:         if (preg_match('{<adr>.*?<country>(.+?)</country>.*?</adr>}is', $tagcontents, $matches)) {",
          "452:             $person->country = trim($matches[1]);",
          "456:         if ($fixcaseusernames && isset($person->username)) {",
          "457:             $person->username = strtolower($person->username);",
          "458:         }",
          "459:         if ($fixcasepersonalnames) {",
          "460:             if (isset($person->firstname)) {",
          "461:                 $person->firstname = ucwords(strtolower($person->firstname));",
          "462:             }",
          "463:             if (isset($person->lastname)) {",
          "464:                 $person->lastname = ucwords(strtolower($person->lastname));",
          "465:             }",
          "466:         }",
          "468:         $recstatus = ($this->get_recstatus($tagcontents, 'person'));",
          "471:         if ($recstatus == 3) {",
          "473:             if ($imsdeleteusers) { // If we're allowed to delete user records.",
          "475:                 $params = array('username' => $person->username, 'mnethostid' => $CFG->mnet_localhost_id, 'deleted ' => 0);",
          "476:                 if ($user = $DB->get_record('user', $params)) {",
          "477:                     if (delete_user($user)) {",
          "478:                         $this->log_line(\"Deleted user '$person->username' (ID number $person->idnumber).\");",
          "479:                     } else {",
          "480:                         $this->log_line(\"Error deleting '$person->username' (ID number $person->idnumber).\");",
          "481:                     }",
          "483:                     $this->log_line(\"Can not delete user '$person->username' (ID number $person->idnumber) - user does not exist.\");",
          "486:                 $this->log_line(\"Ignoring deletion request for user '$person->username' (ID number $person->idnumber).\");",
          "489:         } else { // Add or update record.",
          "492:             if (!$DB->get_field('user', 'id', array('idnumber' => $person->idnumber)) && $createnewusers) {",
          "494:                 if ((!isset($person->username)) || (strlen($person->username) == 0)) {",
          "495:                     $this->log_line(\"Cannot create new user for ID # $person->idnumber\".",
          "496:                         \"- no username listed in IMS data for this person.\");",
          "497:                 } else if ($DB->get_field('user', 'id', array('username' => $person->username))) {",
          "499:                     $DB->set_field('user', 'idnumber', $person->idnumber, array('username' => $person->username));",
          "500:                 } else {",
          "503:                     $person->lang = $CFG->lang;",
          "505:                     $auth = explode(',', $CFG->auth);",
          "506:                     $auth = reset($auth);",
          "507:                     $person->auth = $auth;",
          "508:                     $person->confirmed = 1;",
          "509:                     $person->timemodified = time();",
          "510:                     $person->mnethostid = $CFG->mnet_localhost_id;",
          "511:                     $id = $DB->insert_record('user', $person);",
          "512:                     $this->log_line(\"Created user record ('.$id.') for user '$person->username' (ID number $person->idnumber).\");",
          "513:                 }",
          "514:             } else if ($createnewusers) {",
          "515:                 $this->log_line(\"User record already exists for user '$person->username' (ID number $person->idnumber).\");",
          "520:                 $this->log_line(\"No user record found for '$person->username' (ID number $person->idnumber).\");",
          "525:     }",
          "533:     protected function process_membership_tag($tagcontents) {",
          "534:         global $DB;",
          "537:         $truncatecoursecodes = $this->get_config('truncatecoursecodes');",
          "538:         $imscapitafix = $this->get_config('imscapitafix');",
          "540:         $memberstally = 0;",
          "541:         $membersuntally = 0;",
          "544:         $groupids = array();",
          "546:         $ship = new stdClass();",
          "548:         if (preg_match('{<sourcedid>.*?<id>(.+?)</id>.*?</sourcedid>}is', $tagcontents, $matches)) {",
          "549:             $ship->coursecode = ($truncatecoursecodes > 0)",
          "550:                 ? substr(trim($matches[1]), 0, intval($truncatecoursecodes))",
          "551:                 : trim($matches[1]);",
          "552:             $ship->courseid = $DB->get_field('course', 'id', array('idnumber' => $ship->coursecode));",
          "553:         }",
          "554:         if ($ship->courseid && preg_match_all('{<member>(.*?)</member>}is', $tagcontents, $membermatches, PREG_SET_ORDER)) {",
          "555:             $courseobj = new stdClass();",
          "556:             $courseobj->id = $ship->courseid;",
          "558:             foreach ($membermatches as $mmatch) {",
          "559:                 $member = new stdClass();",
          "560:                 $memberstoreobj = new stdClass();",
          "561:                 if (preg_match('{<sourcedid>.*?<id>(.+?)</id>.*?</sourcedid>}is', $mmatch[1], $matches)) {",
          "562:                     $member->idnumber = trim($matches[1]);",
          "563:                 }",
          "564:                 if (preg_match('{<role\\s+roletype=[\"\\'](.+?)[\"\\'].*?>}is', $mmatch[1], $matches)) {",
          "566:                     $member->roletype = trim($matches[1]);",
          "567:                 } else if ($imscapitafix && preg_match('{<roletype>(.+?)</roletype>}is', $mmatch[1], $matches)) {",
          "571:                     $member->roletype = trim($matches[1]);",
          "572:                 }",
          "573:                 if (preg_match('{<role\\b.*?<status>(.+?)</status>.*?</role>}is', $mmatch[1], $matches)) {",
          "575:                     $member->status = trim($matches[1]);",
          "578:                 $recstatus = ($this->get_recstatus($mmatch[1], 'role'));",
          "579:                 if ($recstatus == 3) {",
          "581:                     $member->status = 0;",
          "582:                 }",
          "584:                 $timeframe = new stdClass();",
          "585:                 $timeframe->begin = 0;",
          "586:                 $timeframe->end = 0;",
          "587:                 if (preg_match('{<role\\b.*?<timeframe>(.+?)</timeframe>.*?</role>}is', $mmatch[1], $matches)) {",
          "588:                     $timeframe = $this->decode_timeframe($matches[1]);",
          "589:                 }",
          "590:                 if (preg_match('{<role\\b.*?<extension>.*?<cohort>(.+?)</cohort>.*?</extension>.*?</role>}is',",
          "591:                         $mmatch[1], $matches)) {",
          "592:                     $member->groupname = trim($matches[1]);",
          "594:                 }",
          "597:                 $memberstoreobj->userid = $DB->get_field('user', 'id', array('idnumber' => $member->idnumber));",
          "598:                 $memberstoreobj->enrol = 'imsenterprise';",
          "599:                 $memberstoreobj->course = $ship->courseid;",
          "600:                 $memberstoreobj->time = time();",
          "601:                 $memberstoreobj->timemodified = time();",
          "602:                 if ($memberstoreobj->userid) {",
          "606:                     $moodleroleid = $this->rolemappings[$member->roletype];",
          "607:                     if (!$moodleroleid) {",
          "608:                         $this->log_line(\"SKIPPING role $member->roletype for $memberstoreobj->userid \"",
          "609:                             .\"($member->idnumber) in course $memberstoreobj->course\");",
          "610:                         continue;",
          "613:                     if (intval($member->status) == 1) {",
          "616:                         $einstance = $DB->get_record('enrol',",
          "617:                             array('courseid' => $courseobj->id, 'enrol' => $memberstoreobj->enrol));",
          "618:                         if (empty($einstance)) {",
          "620:                             $enrolid = $this->add_instance($courseobj);",
          "621:                             $einstance = $DB->get_record('enrol', array('id' => $enrolid));",
          "622:                         }",
          "624:                         $this->enrol_user($einstance, $memberstoreobj->userid, $moodleroleid, $timeframe->begin, $timeframe->end);",
          "626:                         $this->log_line(\"Enrolled user #$memberstoreobj->userid ($member->idnumber) \"",
          "627:                             .\"to role $member->roletype in course $memberstoreobj->course\");",
          "628:                         $memberstally++;",
          "631:                         if (isset($member->groupname)) {",
          "633:                             if (isset($groupids[$member->groupname])) {",
          "634:                                 $member->groupid = $groupids[$member->groupname]; // Recall the group ID from cache if available.",
          "636:                                 $params = array('courseid' => $ship->courseid, 'name' => $member->groupname);",
          "637:                                 if ($groupid = $DB->get_field('groups', 'id', $params)) {",
          "638:                                     $member->groupid = $groupid;",
          "639:                                     $groupids[$member->groupname] = $groupid; // Store ID in cache.",
          "640:                                 } else {",
          "642:                                     $group = new stdClass();",
          "643:                                     $group->name = $member->groupname;",
          "644:                                     $group->courseid = $ship->courseid;",
          "645:                                     $group->timecreated = time();",
          "646:                                     $group->timemodified = time();",
          "647:                                     $groupid = $DB->insert_record('groups', $group);",
          "648:                                     $this->log_line('Added a new group for this course: '.$group->name);",
          "649:                                     $groupids[$member->groupname] = $groupid; // Store ID in cache.",
          "650:                                     $member->groupid = $groupid;",
          "652:                                     cache_helper::invalidate_by_definition('core', 'groupdata', array(), array($ship->courseid));",
          "653:                                 }",
          "656:                             if ($member->groupid) {",
          "657:                                 groups_add_member($member->groupid, $memberstoreobj->userid,",
          "659:                             }",
          "662:                     } else if ($this->get_config('imsunenrol')) {",
          "665:                         $einstances = $DB->get_records('enrol',",
          "666:                             array('enrol' => $memberstoreobj->enrol, 'courseid' => $courseobj->id));",
          "667:                         foreach ($einstances as $einstance) {",
          "669:                             $this->unenrol_user($einstance, $memberstoreobj->userid);",
          "670:                         }",
          "672:                         $membersuntally++;",
          "673:                         $this->log_line(\"Unenrolled $member->idnumber from role $moodleroleid in course\");",
          "677:             }",
          "678:             $this->log_line(\"Added $memberstally users to course $ship->coursecode\");",
          "679:             if ($membersuntally > 0) {",
          "680:                 $this->log_line(\"Removed $membersuntally users from course $ship->coursecode\");",
          "683:     } // End process_membership_tag().",
          "691:     protected function process_properties_tag($tagcontents) {",
          "692:         $imsrestricttarget = $this->get_config('imsrestricttarget');",
          "694:         if ($imsrestricttarget) {",
          "695:             if (!(preg_match('{<target>'.preg_quote($imsrestricttarget).'</target>}is', $tagcontents, $matches))) {",
          "696:                 $this->log_line(\"Skipping processing: required target \\\"$imsrestricttarget\\\" not specified in this data.\");",
          "697:                 $this->continueprocessing = false;",
          "698:             }",
          "708:     protected function log_line($string) {",
          "710:         if (!PHPUNIT_TEST) {",
          "711:             mtrace($string);",
          "712:         }",
          "713:         if ($this->logfp) {",
          "714:             fwrite($this->logfp, $string . \"\\n\");",
          "724:     protected static function decode_timeframe($string) {",
          "725:         $ret = new stdClass();",
          "726:         $ret->begin = $ret->end = 0;",
          "730:         if (preg_match('{<begin\\s+restrict=\"1\">(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)</begin>}is', $string, $matches)) {",
          "731:             $ret->begin = mktime(0, 0, 0, $matches[2], $matches[3], $matches[1]);",
          "732:         }",
          "733:         if (preg_match('{<end\\s+restrict=\"1\">(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)</end>}is', $string, $matches)) {",
          "734:             $ret->end = mktime(0, 0, 0, $matches[2], $matches[3], $matches[1]);",
          "735:         }",
          "736:         return $ret;",
          "743:     protected function load_role_mappings() {",
          "744:         require_once('locallib.php');",
          "746:         $imsroles = new imsenterprise_roles();",
          "747:         $imsroles = $imsroles->get_imsroles();",
          "749:         $this->rolemappings = array();",
          "750:         foreach ($imsroles as $imsrolenum => $imsrolename) {",
          "751:             $this->rolemappings[$imsrolenum] = $this->rolemappings[$imsrolename] = $this->get_config('imsrolemap' . $imsrolenum);",
          "752:         }",
          "759:     protected function load_course_mappings() {",
          "766:         foreach ($courseattrs as $courseattr) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "751:         return false;",
          "752:     }",
          "",
          "[Removed Lines]",
          "750:     function enrol_imsenterprise_allow_group_member_remove($itemid, $groupid, $userid) {",
          "",
          "[Added Lines]",
          "780:     public function enrol_imsenterprise_allow_group_member_remove($itemid, $groupid, $userid) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "772:         return $defaultcategoryid;",
          "773:     }",
          "",
          "[Removed Lines]",
          "776: } // end of class",
          "",
          "[Added Lines]",
          "804: }",
          "",
          "---------------"
        ],
        "enrol/imsenterprise/locallib.php||enrol/imsenterprise/locallib.php": [
          "File: enrol/imsenterprise/locallib.php -> enrol/imsenterprise/locallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: defined('MOODLE_INTERNAL') || die();",
          "28: class imsenterprise_roles {",
          "29:     private $imsroles;",
          "32:         $this->imsroles = array(",
          "41:         );",
          "44:     }",
          "47:         return $this->imsroles;",
          "48:     }",
          "56:         global $DB;",
          "58:         switch($imscode) {",
          "",
          "[Removed Lines]",
          "31:     function __construct() {",
          "33:         '01'=>'Learner',",
          "34:         '02'=>'Instructor',",
          "35:         '03'=>'Content Developer',",
          "36:         '04'=>'Member',",
          "37:         '05'=>'Manager',",
          "38:         '06'=>'Mentor',",
          "39:         '07'=>'Administrator',",
          "40:         '08'=>'TeachingAssistant',",
          "46:     function get_imsroles() {",
          "55:     function determine_default_rolemapping($imscode) {",
          "",
          "[Added Lines]",
          "41:     public function __construct() {",
          "43:             '01' => 'Learner',",
          "44:             '02' => 'Instructor',",
          "45:             '03' => 'Content Developer',",
          "46:             '04' => 'Member',",
          "47:             '05' => 'Manager',",
          "48:             '06' => 'Mentor',",
          "49:             '07' => 'Administrator',",
          "50:             '08' => 'TeachingAssistant',",
          "61:     public function get_imsroles() {",
          "72:     public function determine_default_rolemapping($imscode) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:                 $shortname = 'admin';",
          "74:                 break;",
          "75:             default:",
          "77:         }",
          "79:     }",
          "",
          "[Removed Lines]",
          "76:                 return 0; // Zero for no match",
          "78:         return (string)$DB->get_field('role', 'id', array('shortname'=>$shortname));",
          "82: }  // class",
          "",
          "[Added Lines]",
          "93:                 return 0; // Zero for no match.",
          "95:         return (string)$DB->get_field('role', 'id', array('shortname' => $shortname));",
          "99: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92: class imsenterprise_courses {",
          "94:     private $imsnames;",
          "95:     private $courseattrs;",
          "101:         $this->imsnames = array(",
          "102:             'short' => 'short',",
          "103:             'long' => 'long',",
          "",
          "[Removed Lines]",
          "100:     function __construct() {",
          "",
          "[Added Lines]",
          "118:     public function __construct() {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "116:         $values = $this->imsnames;",
          "117:         if ($courseattr == 'summary') {",
          "",
          "[Removed Lines]",
          "114:     function get_imsnames($courseattr) {",
          "",
          "[Added Lines]",
          "132:     public function get_imsnames($courseattr) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "128:         return $this->courseattrs;",
          "129:     }",
          "",
          "[Removed Lines]",
          "127:     function get_courseattrs() {",
          "",
          "[Added Lines]",
          "145:     public function get_courseattrs() {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "139:         switch($courseattr) {",
          "140:             case 'fullname':",
          "141:                 $imsname = 'short';",
          "",
          "[Removed Lines]",
          "138:     function determine_default_coursemapping($courseattr) {",
          "",
          "[Added Lines]",
          "156:     public function determine_default_coursemapping($courseattr) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "150:         return $imsname;",
          "151:     }",
          "",
          "[Removed Lines]",
          "153: }  // class",
          "",
          "[Added Lines]",
          "170: }",
          "",
          "---------------"
        ],
        "enrol/imsenterprise/settings.php||enrol/imsenterprise/settings.php": [
          "File: enrol/imsenterprise/settings.php -> enrol/imsenterprise/settings.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: if ($ADMIN->fulltree) {",
          "28:     require_once($CFG->dirroot.'/enrol/imsenterprise/locallib.php');",
          "56:     if (!during_initial_install()) {",
          "57:         $coursecontext = context_course::instance(SITEID);",
          "",
          "[Removed Lines]",
          "30:     $settings->add(new admin_setting_heading('enrol_imsenterprise_settings', '', get_string('pluginname_desc', 'enrol_imsenterprise')));",
          "33:     $settings->add(new admin_setting_heading('enrol_imsenterprise_basicsettings', get_string('basicsettings', 'enrol_imsenterprise'), ''));",
          "35:     $settings->add(new admin_setting_configtext('enrol_imsenterprise/imsfilelocation', get_string('location', 'enrol_imsenterprise'), '', ''));",
          "37:     $settings->add(new admin_setting_configtext('enrol_imsenterprise/logtolocation', get_string('logtolocation', 'enrol_imsenterprise'), '', ''));",
          "39:     $settings->add(new admin_setting_configcheckbox('enrol_imsenterprise/mailadmins', get_string('mailadmins', 'enrol_imsenterprise'), '', 0));",
          "42:     $settings->add(new admin_setting_heading('enrol_imsenterprise_usersettings', get_string('usersettings', 'enrol_imsenterprise'), ''));",
          "44:     $settings->add(new admin_setting_configcheckbox('enrol_imsenterprise/createnewusers', get_string('createnewusers', 'enrol_imsenterprise'), get_string('createnewusers_desc', 'enrol_imsenterprise'), 0));",
          "46:     $settings->add(new admin_setting_configcheckbox('enrol_imsenterprise/imsdeleteusers', get_string('deleteusers', 'enrol_imsenterprise'), get_string('deleteusers_desc', 'enrol_imsenterprise'), 0));",
          "48:     $settings->add(new admin_setting_configcheckbox('enrol_imsenterprise/fixcaseusernames', get_string('fixcaseusernames', 'enrol_imsenterprise'), '', 0));",
          "50:     $settings->add(new admin_setting_configcheckbox('enrol_imsenterprise/fixcasepersonalnames', get_string('fixcasepersonalnames', 'enrol_imsenterprise'), '', 0));",
          "52:     $settings->add(new admin_setting_configcheckbox('enrol_imsenterprise/imssourcedidfallback', get_string('sourcedidfallback', 'enrol_imsenterprise'), get_string('sourcedidfallback_desc', 'enrol_imsenterprise'), 0));",
          "54:     $settings->add(new admin_setting_heading('enrol_imsenterprise_usersettings_roles', get_string('roles', 'enrol_imsenterprise'), get_string('imsrolesdescription', 'enrol_imsenterprise')));",
          "",
          "[Added Lines]",
          "30:     $settings->add(new admin_setting_heading('enrol_imsenterprise_settings', '',",
          "31:         get_string('pluginname_desc', 'enrol_imsenterprise')));",
          "34:     $settings->add(new admin_setting_heading('enrol_imsenterprise_basicsettings',",
          "35:         get_string('basicsettings', 'enrol_imsenterprise'), ''));",
          "37:     $settings->add(new admin_setting_configtext('enrol_imsenterprise/imsfilelocation',",
          "38:         get_string('location', 'enrol_imsenterprise'), '', ''));",
          "40:     $settings->add(new admin_setting_configtext('enrol_imsenterprise/logtolocation',",
          "41:         get_string('logtolocation', 'enrol_imsenterprise'), '', ''));",
          "43:     $settings->add(new admin_setting_configcheckbox('enrol_imsenterprise/mailadmins',",
          "44:         get_string('mailadmins', 'enrol_imsenterprise'), '', 0));",
          "47:     $settings->add(new admin_setting_heading('enrol_imsenterprise_usersettings',",
          "48:         get_string('usersettings', 'enrol_imsenterprise'), ''));",
          "50:     $settings->add(new admin_setting_configcheckbox('enrol_imsenterprise/createnewusers',",
          "51:         get_string('createnewusers', 'enrol_imsenterprise'), get_string('createnewusers_desc', 'enrol_imsenterprise'), 0));",
          "53:     $settings->add(new admin_setting_configcheckbox('enrol_imsenterprise/imsdeleteusers',",
          "54:         get_string('deleteusers', 'enrol_imsenterprise'), get_string('deleteusers_desc', 'enrol_imsenterprise'), 0));",
          "56:     $settings->add(new admin_setting_configcheckbox('enrol_imsenterprise/fixcaseusernames',",
          "57:         get_string('fixcaseusernames', 'enrol_imsenterprise'), '', 0));",
          "59:     $settings->add(new admin_setting_configcheckbox('enrol_imsenterprise/fixcasepersonalnames',",
          "60:         get_string('fixcasepersonalnames', 'enrol_imsenterprise'), '', 0));",
          "62:     $settings->add(new admin_setting_configcheckbox('enrol_imsenterprise/imssourcedidfallback',",
          "63:         get_string('sourcedidfallback', 'enrol_imsenterprise'), get_string('sourcedidfallback_desc', 'enrol_imsenterprise'), 0));",
          "65:     $settings->add(new admin_setting_heading('enrol_imsenterprise_usersettings_roles',",
          "66:         get_string('roles', 'enrol_imsenterprise'), get_string('imsrolesdescription', 'enrol_imsenterprise')));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:         $assignableroles = array('0' => get_string('ignore', 'enrol_imsenterprise')) + $assignableroles;",
          "60:         $imsroles = new imsenterprise_roles();",
          "61:         foreach ($imsroles->get_imsroles() as $imsrolenum => $imsrolename) {",
          "63:         }",
          "64:     }",
          "77:     if (!during_initial_install()) {",
          "78:         $imscourses = new imsenterprise_courses();",
          "79:         foreach ($imscourses->get_courseattrs() as $courseattr) {",
          "82:             $assignablevalues = $imscourses->get_imsnames($courseattr);",
          "83:             $name = get_string('setting' . $courseattr, 'enrol_imsenterprise');",
          "84:             $description = get_string('setting' . $courseattr . 'description', 'enrol_imsenterprise');",
          "85:             $defaultvalue = (string) $imscourses->determine_default_coursemapping($courseattr);",
          "87:         }",
          "88:     }",
          "98:     $settings->add(new admin_setting_heading('enrol_imsenterprise_doitnowmessage', '', $importnowstring));",
          "99: }",
          "",
          "[Removed Lines]",
          "62:             $settings->add(new admin_setting_configselect('enrol_imsenterprise/imsrolemap'.$imsrolenum, format_string('\"'.$imsrolename.'\" ('.$imsrolenum.')'), '', (int)$imsroles->determine_default_rolemapping($imsrolenum), $assignableroles));",
          "67:     $settings->add(new admin_setting_heading('enrol_imsenterprise_coursesettings', get_string('coursesettings', 'enrol_imsenterprise'), ''));",
          "69:     $settings->add(new admin_setting_configtext('enrol_imsenterprise/truncatecoursecodes', get_string('truncatecoursecodes', 'enrol_imsenterprise'), get_string('truncatecoursecodes_desc', 'enrol_imsenterprise'), 0, PARAM_INT, 2));",
          "71:     $settings->add(new admin_setting_configcheckbox('enrol_imsenterprise/createnewcourses', get_string('createnewcourses', 'enrol_imsenterprise'), get_string('createnewcourses_desc', 'enrol_imsenterprise'), 0));",
          "73:     $settings->add(new admin_setting_configcheckbox('enrol_imsenterprise/createnewcategories', get_string('createnewcategories', 'enrol_imsenterprise'), get_string('createnewcategories_desc', 'enrol_imsenterprise'), 0));",
          "75:     $settings->add(new admin_setting_configcheckbox('enrol_imsenterprise/imsunenrol', get_string('allowunenrol', 'enrol_imsenterprise'), get_string('allowunenrol_desc', 'enrol_imsenterprise'), 0));",
          "86:             $settings->add(new admin_setting_configselect('enrol_imsenterprise/imscoursemap' . $courseattr, $name, $description, $defaultvalue, $assignablevalues));",
          "91:     $settings->add(new admin_setting_heading('enrol_imsenterprise_miscsettings', get_string('miscsettings', 'enrol_imsenterprise'), ''));",
          "93:     $settings->add(new admin_setting_configtext('enrol_imsenterprise/imsrestricttarget', get_string('restricttarget', 'enrol_imsenterprise'), get_string('restricttarget_desc', 'enrol_imsenterprise'), ''));",
          "95:     $settings->add(new admin_setting_configcheckbox('enrol_imsenterprise/imscapitafix', get_string('usecapitafix', 'enrol_imsenterprise'), get_string('usecapitafix_desc', 'enrol_imsenterprise'), 0));",
          "97:     $importnowstring = get_string('aftersaving...', 'enrol_imsenterprise').' <a href=\"../enrol/imsenterprise/importnow.php\">'.get_string('doitnow', 'enrol_imsenterprise').'</a>';",
          "",
          "[Added Lines]",
          "74:             $settings->add(new admin_setting_configselect('enrol_imsenterprise/imsrolemap'.$imsrolenum,",
          "75:                 format_string('\"'.$imsrolename.'\" ('.$imsrolenum.')'), '',",
          "76:                 (int)$imsroles->determine_default_rolemapping($imsrolenum), $assignableroles));",
          "81:     $settings->add(new admin_setting_heading('enrol_imsenterprise_coursesettings',",
          "82:         get_string('coursesettings', 'enrol_imsenterprise'), ''));",
          "84:     $settings->add(new admin_setting_configtext('enrol_imsenterprise/truncatecoursecodes',",
          "85:         get_string('truncatecoursecodes', 'enrol_imsenterprise'), get_string('truncatecoursecodes_desc', 'enrol_imsenterprise'),",
          "86:         0, PARAM_INT, 2));",
          "88:     $settings->add(new admin_setting_configcheckbox('enrol_imsenterprise/createnewcourses',",
          "89:         get_string('createnewcourses', 'enrol_imsenterprise'), get_string('createnewcourses_desc', 'enrol_imsenterprise'), 0));",
          "91:     $settings->add(new admin_setting_configcheckbox('enrol_imsenterprise/createnewcategories',",
          "92:         get_string('createnewcategories', 'enrol_imsenterprise'), get_string('createnewcategories_desc', 'enrol_imsenterprise'),",
          "93:         0));",
          "95:     $settings->add(new admin_setting_configcheckbox('enrol_imsenterprise/imsunenrol',",
          "96:         get_string('allowunenrol', 'enrol_imsenterprise'), get_string('allowunenrol_desc', 'enrol_imsenterprise'), 0));",
          "107:             $settings->add(new admin_setting_configselect('enrol_imsenterprise/imscoursemap' . $courseattr, $name,",
          "108:                 $description, $defaultvalue, $assignablevalues));",
          "113:     $settings->add(new admin_setting_heading('enrol_imsenterprise_miscsettings',",
          "114:         get_string('miscsettings', 'enrol_imsenterprise'), ''));",
          "116:     $settings->add(new admin_setting_configtext('enrol_imsenterprise/imsrestricttarget',",
          "117:         get_string('restricttarget', 'enrol_imsenterprise'), get_string('restricttarget_desc', 'enrol_imsenterprise'), ''));",
          "119:     $settings->add(new admin_setting_configcheckbox('enrol_imsenterprise/imscapitafix',",
          "120:         get_string('usecapitafix', 'enrol_imsenterprise'), get_string('usecapitafix_desc', 'enrol_imsenterprise'), 0));",
          "122:     $importnowstring = get_string('aftersaving...', 'enrol_imsenterprise').' <a href=\"../enrol/imsenterprise/importnow.php\">';",
          "123:     $importnowstring .= get_string('doitnow', 'enrol_imsenterprise').'</a>';",
          "",
          "---------------"
        ],
        "enrol/imsenterprise/tests/imsenterprise_test.php||enrol/imsenterprise/tests/imsenterprise_test.php": [
          "File: enrol/imsenterprise/tests/imsenterprise_test.php -> enrol/imsenterprise/tests/imsenterprise_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "263:         $this->imsplugin->set_config('createnewcategories', true);",
          "264:     }",
          "273:     protected function set_xml_file($users = false, $courses = false) {",
          "276:         $xmlcontent = '<enterprise>';",
          "",
          "[Removed Lines]",
          "274:         global $DB;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "enrol/imsenterprise/version.php||enrol/imsenterprise/version.php": [
          "File: enrol/imsenterprise/version.php -> enrol/imsenterprise/version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: defined('MOODLE_INTERNAL') || die();",
          "30: $plugin->cron      = 60;",
          "",
          "[Removed Lines]",
          "27: $plugin->version   = 2013050100;        // The current plugin version (Date: YYYYMMDDXX)",
          "28: $plugin->requires  = 2013050100;        // Requires this Moodle version",
          "29: $plugin->component = 'enrol_imsenterprise'; // Full name of the plugin (used for diagnostics)",
          "",
          "[Added Lines]",
          "27: $plugin->version   = 2013050100;",
          "28: $plugin->requires  = 2013050100;",
          "29: $plugin->component = 'enrol_imsenterprise';",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "41a19bffeef0ee6b0560a5ff808fd4bd35075fa1",
      "candidate_info": {
        "commit_hash": "41a19bffeef0ee6b0560a5ff808fd4bd35075fa1",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/41a19bffeef0ee6b0560a5ff808fd4bd35075fa1",
        "files": [
          "enrol/imsenterprise/importnow.php",
          "enrol/imsenterprise/settings.php"
        ],
        "message": "MDL-43146 enrol_imsenterprise: missing sesskey protection",
        "before_after_code_files": [
          "enrol/imsenterprise/importnow.php||enrol/imsenterprise/importnow.php",
          "enrol/imsenterprise/settings.php||enrol/imsenterprise/settings.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "enrol/imsenterprise/importnow.php||enrol/imsenterprise/importnow.php",
            "enrol/imsenterprise/settings.php||enrol/imsenterprise/settings.php"
          ],
          "candidate": [
            "enrol/imsenterprise/importnow.php||enrol/imsenterprise/importnow.php",
            "enrol/imsenterprise/settings.php||enrol/imsenterprise/settings.php"
          ]
        }
      },
      "candidate_diff": {
        "enrol/imsenterprise/importnow.php||enrol/imsenterprise/importnow.php": [
          "File: enrol/imsenterprise/importnow.php -> enrol/imsenterprise/importnow.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: require_once(dirname(dirname(dirname(__FILE__))) . '/config.php');",
          "25: require_login(0, false);",
          "26: require_capability('moodle/site:config', context_system::instance());",
          "28: $site = get_site();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: require_sesskey();",
          "",
          "---------------"
        ],
        "enrol/imsenterprise/settings.php||enrol/imsenterprise/settings.php": [
          "File: enrol/imsenterprise/settings.php -> enrol/imsenterprise/settings.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:     $settings->add(new admin_setting_configcheckbox('enrol_imsenterprise/imscapitafix',",
          "120:         get_string('usecapitafix', 'enrol_imsenterprise'), get_string('usecapitafix_desc', 'enrol_imsenterprise'), 0));",
          "124:     $settings->add(new admin_setting_heading('enrol_imsenterprise_doitnowmessage', '', $importnowstring));",
          "125: }",
          "",
          "[Removed Lines]",
          "122:     $importnowstring = get_string('aftersaving...', 'enrol_imsenterprise').' <a href=\"../enrol/imsenterprise/importnow.php\">';",
          "123:     $importnowstring .= get_string('doitnow', 'enrol_imsenterprise').'</a>';",
          "",
          "[Added Lines]",
          "122:     $importurl = new moodle_url('/enrol/imsenterprise/importnow.php', array('sesskey' => sesskey()));",
          "123:     $importnowstring = get_string('aftersaving...', 'enrol_imsenterprise').' ';",
          "124:     $importnowstring .= html_writer::link($importurl, get_string('doitnow', 'enrol_imsenterprise'));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eee61675f042a9ec89f8f6d219b4ded010198fe4",
      "candidate_info": {
        "commit_hash": "eee61675f042a9ec89f8f6d219b4ded010198fe4",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/eee61675f042a9ec89f8f6d219b4ded010198fe4",
        "files": [
          "enrol/imsenterprise/importnow.php",
          "enrol/imsenterprise/settings.php"
        ],
        "message": "MDL-43146 enrol_imsenterprise: missing sesskey protection",
        "before_after_code_files": [
          "enrol/imsenterprise/importnow.php||enrol/imsenterprise/importnow.php",
          "enrol/imsenterprise/settings.php||enrol/imsenterprise/settings.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "enrol/imsenterprise/importnow.php||enrol/imsenterprise/importnow.php",
            "enrol/imsenterprise/settings.php||enrol/imsenterprise/settings.php"
          ],
          "candidate": [
            "enrol/imsenterprise/importnow.php||enrol/imsenterprise/importnow.php",
            "enrol/imsenterprise/settings.php||enrol/imsenterprise/settings.php"
          ]
        }
      },
      "candidate_diff": {
        "enrol/imsenterprise/importnow.php||enrol/imsenterprise/importnow.php": [
          "File: enrol/imsenterprise/importnow.php -> enrol/imsenterprise/importnow.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: require_once(dirname(dirname(dirname(__FILE__))) . '/config.php');",
          "3: require_login(0, false);",
          "4: require_capability('moodle/site:config', context_system::instance());",
          "6: $site = get_site();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: require_sesskey();",
          "",
          "---------------"
        ],
        "enrol/imsenterprise/settings.php||enrol/imsenterprise/settings.php": [
          "File: enrol/imsenterprise/settings.php -> enrol/imsenterprise/settings.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:     $settings->add(new admin_setting_configcheckbox('enrol_imsenterprise/imscapitafix', get_string('usecapitafix', 'enrol_imsenterprise'), get_string('usecapitafix_desc', 'enrol_imsenterprise'), 0));",
          "87:     $settings->add(new admin_setting_heading('enrol_imsenterprise_doitnowmessage', '', $importnowstring));",
          "88: }",
          "",
          "[Removed Lines]",
          "86:     $importnowstring = get_string('aftersaving...', 'enrol_imsenterprise').' <a href=\"../enrol/imsenterprise/importnow.php\">'.get_string('doitnow', 'enrol_imsenterprise').'</a>';",
          "",
          "[Added Lines]",
          "86:     $importurl = new moodle_url('/enrol/imsenterprise/importnow.php', array('sesskey' => sesskey()));",
          "87:     $importnowstring = get_string('aftersaving...', 'enrol_imsenterprise').' '.",
          "88:         html_writer::link($importurl, get_string('doitnow', 'enrol_imsenterprise'));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ea8647b39ec9cf1d73e04b05559bd12d97aa5229",
      "candidate_info": {
        "commit_hash": "ea8647b39ec9cf1d73e04b05559bd12d97aa5229",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/ea8647b39ec9cf1d73e04b05559bd12d97aa5229",
        "files": [
          "enrol/imsenterprise/importnow.php",
          "enrol/imsenterprise/settings.php"
        ],
        "message": "MDL-43146 enrol_imsenterprise: missing sesskey protection",
        "before_after_code_files": [
          "enrol/imsenterprise/importnow.php||enrol/imsenterprise/importnow.php",
          "enrol/imsenterprise/settings.php||enrol/imsenterprise/settings.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "enrol/imsenterprise/importnow.php||enrol/imsenterprise/importnow.php",
            "enrol/imsenterprise/settings.php||enrol/imsenterprise/settings.php"
          ],
          "candidate": [
            "enrol/imsenterprise/importnow.php||enrol/imsenterprise/importnow.php",
            "enrol/imsenterprise/settings.php||enrol/imsenterprise/settings.php"
          ]
        }
      },
      "candidate_diff": {
        "enrol/imsenterprise/importnow.php||enrol/imsenterprise/importnow.php": [
          "File: enrol/imsenterprise/importnow.php -> enrol/imsenterprise/importnow.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: require_once(dirname(dirname(dirname(__FILE__))) . '/config.php');",
          "3: require_login(0, false);",
          "4: require_capability('moodle/site:config', context_system::instance());",
          "6: $site = get_site();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: require_sesskey();",
          "",
          "---------------"
        ],
        "enrol/imsenterprise/settings.php||enrol/imsenterprise/settings.php": [
          "File: enrol/imsenterprise/settings.php -> enrol/imsenterprise/settings.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:     $settings->add(new admin_setting_configcheckbox('enrol_imsenterprise/imscapitafix', get_string('usecapitafix', 'enrol_imsenterprise'), get_string('usecapitafix_desc', 'enrol_imsenterprise'), 0));",
          "98:     $settings->add(new admin_setting_heading('enrol_imsenterprise_doitnowmessage', '', $importnowstring));",
          "99: }",
          "",
          "[Removed Lines]",
          "97:     $importnowstring = get_string('aftersaving...', 'enrol_imsenterprise').' <a href=\"../enrol/imsenterprise/importnow.php\">'.get_string('doitnow', 'enrol_imsenterprise').'</a>';",
          "",
          "[Added Lines]",
          "97:     $importurl = new moodle_url('/enrol/imsenterprise/importnow.php', array('sesskey' => sesskey()));",
          "98:     $importnowstring = get_string('aftersaving...', 'enrol_imsenterprise').' '.",
          "99:         html_writer::link($importurl, get_string('doitnow', 'enrol_imsenterprise'));",
          "",
          "---------------"
        ]
      }
    }
  ]
}