{
  "cve_id": "CVE-2020-14093",
  "cve_desc": "Mutt before 1.14.3 allows an IMAP fcc/postpone man-in-the-middle attack via a PREAUTH response.",
  "repo": "muttmua/mutt",
  "patch_hash": "3e88866dc60b5fa6aaba6fd7c1710c12c1c3cd01",
  "patch_info": {
    "commit_hash": "3e88866dc60b5fa6aaba6fd7c1710c12c1c3cd01",
    "repo": "muttmua/mutt",
    "commit_url": "https://github.com/muttmua/mutt/commit/3e88866dc60b5fa6aaba6fd7c1710c12c1c3cd01",
    "files": [
      "imap/imap.c"
    ],
    "message": "Prevent possible IMAP MITM via PREAUTH response.\n\nThis is similar to CVE-2014-2567 and CVE-2020-12398.  STARTTLS is not\nallowed in the Authenticated state, so previously Mutt would\nimplicitly mark the connection as authenticated and skip any\nencryption checking/enabling.\n\nNo credentials are exposed, but it does allow messages to be sent to\nan attacker, via postpone or fcc'ing for instance.\n\nReuse the $ssl_starttls quadoption \"in reverse\" to prompt to abort the\nconnection if it is unencrypted.\n\nThanks very much to Damian Poddebniak and Fabian Ising from the\nM\u00fcnster University of Applied Sciences for reporting this issue, and\ntheir help in testing the fix.",
    "before_after_code_files": [
      "imap/imap.c||imap/imap.c"
    ]
  },
  "patch_diff": {
    "imap/imap.c||imap/imap.c": [
      "File: imap/imap.c -> imap/imap.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "530:   }",
      "531:   else if (ascii_strncasecmp (\"* PREAUTH\", idata->buf, 9) == 0)",
      "532:   {",
      "533:     idata->state = IMAP_AUTHENTICATED;",
      "534:     if (imap_check_capabilities (idata) != 0)",
      "535:       goto bail;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "533: #if defined(USE_SSL)",
      "536:     if (!idata->conn->ssf)",
      "537:     {",
      "538:       if (option(OPTSSLFORCETLS) ||",
      "539:           (query_quadoption (OPT_SSLSTARTTLS,",
      "540:                              _(\"Abort unencrypted PREAUTH connection?\")) != MUTT_NO))",
      "541:       {",
      "542:         mutt_error _(\"Encrypted connection unavailable\");",
      "543:         mutt_sleep (1);",
      "544:         goto err_close_conn;",
      "545:       }",
      "546:     }",
      "547: #endif",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c9b58e3df046c60417720b4054ffbb2422360e0f",
      "candidate_info": {
        "commit_hash": "c9b58e3df046c60417720b4054ffbb2422360e0f",
        "repo": "muttmua/mutt",
        "commit_url": "https://github.com/muttmua/mutt/commit/c9b58e3df046c60417720b4054ffbb2422360e0f",
        "files": [
          "doc/manual.xml.head",
          "imap/imap.c",
          "init.h",
          "mutt.h",
          "mutt_socket.h",
          "mutt_tunnel.c"
        ],
        "message": "Add $tunnel_is_secure config, defaulting set.\n\nThe config variable is to resolve an ambiguity in Mutt about whether\nusing $tunnel is secure.\n\nOn the one hand, the examples in the manual show using ssh or a direct\npipe to a program.  Many users do this to connect to an IMAP server\nwith PREAUTH configured, relying on the tunnel to be secured by ssh or\nby the fact that it's a local pipe.\n\nOn the other hand, the Mutt connection code still respects\n$ssl_starttls and $ssl_force_tls, as if the $tunnel connection were\nnot already secured.\n\nAfter some discussion on mutt-dev, it seemed the best idea to assume\nthe connection is secure by default, in order to not break IMAP\nPREAUTH connections, but to provide a configuration variable in case\nthere are situations where it is not.\n\nThanks to Aaron Schrab for the original idea of setting conn->ssf for\n$tunnel in his patch to ticket 250.",
        "before_after_code_files": [
          "imap/imap.c||imap/imap.c",
          "init.h||init.h",
          "mutt.h||mutt.h",
          "mutt_socket.h||mutt_socket.h",
          "mutt_tunnel.c||mutt_tunnel.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "imap/imap.c||imap/imap.c"
          ],
          "candidate": [
            "imap/imap.c||imap/imap.c"
          ]
        }
      },
      "candidate_diff": {
        "imap/imap.c||imap/imap.c": [
          "File: imap/imap.c -> imap/imap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "541:     {",
          "542:       mutt_error _(\"Encrypted connection unavailable\");",
          "543:       mutt_sleep (1);",
          "",
          "[Removed Lines]",
          "540:     if (!idata->conn->ssf && !Tunnel && option(OPTSSLFORCETLS))",
          "",
          "[Added Lines]",
          "541:     if (!idata->conn->ssf && option(OPTSSLFORCETLS))",
          "",
          "---------------"
        ],
        "init.h||init.h": [
          "File: init.h -> init.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4346: #endif",
          "4347:   { \"uncollapse_jump\",  DT_BOOL, R_NONE, {.l=OPTUNCOLLAPSEJUMP}, {.l=0} },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4347:   { \"tunnel_is_secure\", DT_BOOL, R_NONE, {.l=OPTTUNNELISSECURE}, {.l=1} },",
          "",
          "---------------"
        ],
        "mutt.h||mutt.h": [
          "File: mutt.h -> mutt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "542:   OPTTHREADRECEIVED,",
          "543:   OPTTILDE,",
          "544:   OPTTSENABLED,",
          "545:   OPTUNCOLLAPSEJUMP,",
          "546:   OPTUNCOLLAPSENEW,",
          "547:   OPTUSE8BITMIME,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "545:   OPTTUNNELISSECURE,",
          "",
          "---------------"
        ],
        "mutt_socket.h||mutt_socket.h": [
          "File: mutt_socket.h -> mutt_socket.h"
        ],
        "mutt_tunnel.c||mutt_tunnel.c": [
          "File: mutt_tunnel.c -> mutt_tunnel.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:   conn->conn_write = tunnel_socket_write;",
          "57:   conn->conn_poll = tunnel_socket_poll;",
          "59:   return 0;",
          "60: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:   if (option (OPTTUNNELISSECURE))",
          "62:     conn->ssf = 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e37516c3aeb11668bd8e262dfa39cb568c0702c0",
      "candidate_info": {
        "commit_hash": "e37516c3aeb11668bd8e262dfa39cb568c0702c0",
        "repo": "muttmua/mutt",
        "commit_url": "https://github.com/muttmua/mutt/commit/e37516c3aeb11668bd8e262dfa39cb568c0702c0",
        "files": [
          "doc/manual.xml.head",
          "imap/imap.c"
        ],
        "message": "Remove $ssl_starttls check for IMAP PREAUTH.\n\nChecking $ssl_starttls provides no real protection, because an\nattacker can just as easily spoof \"* OK\" and strip the STARTTLS\ncapability as it can spoof \"* PREAUTH\".  The only way to really\nprotect again the MITM is through $ssl_force_tls.\n\nAdd documentation about STARTTLS, $tunnel, and the current PREAUTH\nexception when using $tunnel.\n\nThe behavior of Mutt about $tunnel is somewhat inconsistent: is it\nconsidered secure or not?  For PREAUTH, to avoid breaking\nconfigurations, we assume it is secure.  But at the same time, Mutt is\nstill negotiating STARTTLS for other $tunnel connections.\n\nThis will be resolved in master for the next release; probably by\nadding a $tunnel_is_secure config variable defaulting \"yes\" and\nremoving the STARTTLS negotiation in that case.",
        "before_after_code_files": [
          "imap/imap.c||imap/imap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "imap/imap.c||imap/imap.c"
          ],
          "candidate": [
            "imap/imap.c||imap/imap.c"
          ]
        }
      },
      "candidate_diff": {
        "imap/imap.c||imap/imap.c": [
          "File: imap/imap.c -> imap/imap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "531:   else if (ascii_strncasecmp (\"* PREAUTH\", idata->buf, 9) == 0)",
          "532:   {",
          "533: #if defined(USE_SSL)",
          "537:     {",
          "546:     }",
          "547: #endif",
          "",
          "[Removed Lines]",
          "536:     if (!idata->conn->ssf && !Tunnel)",
          "538:       if (option(OPTSSLFORCETLS) ||",
          "539:           (query_quadoption (OPT_SSLSTARTTLS,",
          "540:                              _(\"Abort unencrypted PREAUTH connection?\")) != MUTT_NO))",
          "541:       {",
          "542:         mutt_error _(\"Encrypted connection unavailable\");",
          "543:         mutt_sleep (1);",
          "544:         goto err_close_conn;",
          "545:       }",
          "",
          "[Added Lines]",
          "540:     if (!idata->conn->ssf && !Tunnel && option(OPTSSLFORCETLS))",
          "542:       mutt_error _(\"Encrypted connection unavailable\");",
          "543:       mutt_sleep (1);",
          "544:       goto err_close_conn;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8c967ad54c3d4d6a93233227ee67358d51182828",
      "candidate_info": {
        "commit_hash": "8c967ad54c3d4d6a93233227ee67358d51182828",
        "repo": "muttmua/mutt",
        "commit_url": "https://github.com/muttmua/mutt/commit/8c967ad54c3d4d6a93233227ee67358d51182828",
        "files": [
          "imap/imap.c"
        ],
        "message": "Clean up labels in imap_open_connection().\n\nCommit 04b06aaa was purposely kept minimal, to aid backporting the\nfix.  It kept the err_close_conn label, but there is no need for the\nlabel anymore.  Change all goto's to use the bail label.",
        "before_after_code_files": [
          "imap/imap.c||imap/imap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "imap/imap.c||imap/imap.c"
          ],
          "candidate": [
            "imap/imap.c||imap/imap.c"
          ]
        }
      },
      "candidate_diff": {
        "imap/imap.c||imap/imap.c": [
          "File: imap/imap.c -> imap/imap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "497:         rc = MUTT_YES;",
          "498:       else if ((rc = query_quadoption (OPT_SSLSTARTTLS,",
          "499:                                        _(\"Secure connection with TLS?\"))) == -1)",
          "501:       if (rc == MUTT_YES)",
          "502:       {",
          "503:  if ((rc = imap_exec (idata, \"STARTTLS\", IMAP_CMD_FAIL_OK)) == -1)",
          "",
          "[Removed Lines]",
          "500:  goto err_close_conn;",
          "",
          "[Added Lines]",
          "500:  goto bail;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "508:    {",
          "509:      mutt_error (_(\"Could not negotiate TLS connection\"));",
          "510:      mutt_sleep (1);",
          "512:    }",
          "513:    else",
          "514:    {",
          "",
          "[Removed Lines]",
          "511:      goto err_close_conn;",
          "",
          "[Added Lines]",
          "511:      goto bail;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "524:     {",
          "525:       mutt_error _(\"Encrypted connection unavailable\");",
          "526:       mutt_sleep (1);",
          "528:     }",
          "529: #endif",
          "530:   }",
          "",
          "[Removed Lines]",
          "527:       goto err_close_conn;",
          "",
          "[Added Lines]",
          "527:       goto bail;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "542:     {",
          "543:       mutt_error _(\"Encrypted connection unavailable\");",
          "544:       mutt_sleep (1);",
          "546:     }",
          "547: #endif",
          "",
          "[Removed Lines]",
          "545:       goto err_close_conn;",
          "",
          "[Added Lines]",
          "545:       goto bail;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "560:   return 0;",
          "565: bail:",
          "566:   imap_close_connection (idata);",
          "567:   FREE (&idata->capstr);",
          "",
          "[Removed Lines]",
          "562: #if defined(USE_SSL)",
          "563: err_close_conn:",
          "564: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dc909119b3433a84290f0095c0f43a23b98b3748",
      "candidate_info": {
        "commit_hash": "dc909119b3433a84290f0095c0f43a23b98b3748",
        "repo": "muttmua/mutt",
        "commit_url": "https://github.com/muttmua/mutt/commit/dc909119b3433a84290f0095c0f43a23b98b3748",
        "files": [
          "imap/imap.c"
        ],
        "message": "Don't check IMAP PREAUTH encryption if $tunnel is in use.\n\n$tunnel is used to create an external encrypted connection.  The\ndefault of $ssl_starttls is yes, meaning those kinds of connections\nwill be broken by the CVE-2020-14093 fix.",
        "before_after_code_files": [
          "imap/imap.c||imap/imap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "imap/imap.c||imap/imap.c"
          ],
          "candidate": [
            "imap/imap.c||imap/imap.c"
          ]
        }
      },
      "candidate_diff": {
        "imap/imap.c||imap/imap.c": [
          "File: imap/imap.c -> imap/imap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "532:   {",
          "533: #if defined(USE_SSL)",
          "537:     {",
          "538:       if (option(OPTSSLFORCETLS) ||",
          "539:           (query_quadoption (OPT_SSLSTARTTLS,",
          "",
          "[Removed Lines]",
          "536:     if (!idata->conn->ssf)",
          "",
          "[Added Lines]",
          "536:     if (!idata->conn->ssf && !Tunnel)",
          "",
          "---------------"
        ]
      }
    }
  ]
}