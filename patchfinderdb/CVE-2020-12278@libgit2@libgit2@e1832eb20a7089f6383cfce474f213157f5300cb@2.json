{
  "cve_id": "CVE-2020-12278",
  "cve_desc": "An issue was discovered in libgit2 before 0.28.4 and 0.9x before 0.99.0. path.c mishandles equivalent filenames that exist because of NTFS Alternate Data Streams. This may allow remote code execution when cloning a repository. This issue is similar to CVE-2019-1352.",
  "repo": "libgit2/libgit2",
  "patch_hash": "e1832eb20a7089f6383cfce474f213157f5300cb",
  "patch_info": {
    "commit_hash": "e1832eb20a7089f6383cfce474f213157f5300cb",
    "repo": "libgit2/libgit2",
    "commit_url": "https://github.com/libgit2/libgit2/commit/e1832eb20a7089f6383cfce474f213157f5300cb",
    "files": [
      "src/path.c",
      "tests/path/dotgit.c"
    ],
    "message": "path: also guard `.gitmodules` against NTFS Alternate Data Streams\n\nWe just safe-guarded `.git` against NTFS Alternate Data Stream-related\nattack vectors, and now it is time to do the same for `.gitmodules`.\n\nNote: In the added regression test, we refrain from verifying all kinds\nof variations between short names and NTFS Alternate Data Streams: as\nthe new code disallows _all_ Alternate Data Streams of `.gitmodules`, it\nis enough to test one in order to know that all of them are guarded\nagainst.\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>",
    "before_after_code_files": [
      "src/path.c||src/path.c",
      "tests/path/dotgit.c||tests/path/dotgit.c"
    ]
  },
  "patch_diff": {
    "src/path.c||src/path.c": [
      "File: src/path.c -> src/path.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1646:  const char *c = path;",
      "1648:  for (;; c++) {",
      "1650:    return true;",
      "1651:   if (*c != ' ' && *c != '.')",
      "1652:    return false;",
      "",
      "[Removed Lines]",
      "1649:   if (*c == '\\0')",
      "",
      "[Added Lines]",
      "1649:   if (*c == '\\0' || *c == ':')",
      "",
      "---------------"
    ],
    "tests/path/dotgit.c||tests/path/dotgit.c": [
      "File: tests/path/dotgit.c -> tests/path/dotgit.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "116:  cl_assert_equal_b(true, git_path_isvalid(NULL, \".gitmodules\", 0, GIT_PATH_REJECT_DOT_GIT_HFS|GIT_PATH_REJECT_DOT_GIT_NTFS));",
      "117:  cl_assert_equal_b(false, git_path_isvalid(NULL, \".gitmodules\", S_IFLNK, GIT_PATH_REJECT_DOT_GIT_HFS));",
      "118:  cl_assert_equal_b(false, git_path_isvalid(NULL, \".gitmodules\", S_IFLNK, GIT_PATH_REJECT_DOT_GIT_NTFS));",
      "119: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "119:  cl_assert_equal_b(false, git_path_isvalid(NULL, \".gitmodules . .::$DATA\", S_IFLNK, GIT_PATH_REJECT_DOT_GIT_NTFS));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a3cbd204aa926af21a250df3a9fffb30085b8dc3",
      "candidate_info": {
        "commit_hash": "a3cbd204aa926af21a250df3a9fffb30085b8dc3",
        "repo": "libgit2/libgit2",
        "commit_url": "https://github.com/libgit2/libgit2/commit/a3cbd204aa926af21a250df3a9fffb30085b8dc3",
        "files": [
          "tests/index/tests.c"
        ],
        "message": "test: improve badname verification test\n\nThe name of the `write_invalid_filename` function suggests that we\n_want_ to write an invalid filename.  Rename the function to show that\nwe expect to _fail_ to write the invalid filename.",
        "before_after_code_files": [
          "tests/index/tests.c||tests/index/tests.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libgit2/libgit2/pull/5331"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/index/tests.c||tests/index/tests.c": [
          "File: tests/index/tests.c -> tests/index/tests.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "600: }",
          "603: {",
          "604:  git_index *index;",
          "605:  git_oid expected;",
          "",
          "[Removed Lines]",
          "602: static void write_invalid_filename(git_repository *repo, const char *fn_orig)",
          "",
          "[Added Lines]",
          "602: static void assert_write_fails(git_repository *repo, const char *fn_orig)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "673:  cl_git_pass(git_repository_init(&repo, \"./invalid\", 0));",
          "683:  git_repository_free(repo);",
          "",
          "[Removed Lines]",
          "675:  write_invalid_filename(repo, \".git/hello\");",
          "676:  write_invalid_filename(repo, \".GIT/hello\");",
          "677:  write_invalid_filename(repo, \".GiT/hello\");",
          "678:  write_invalid_filename(repo, \"./.git/hello\");",
          "679:  write_invalid_filename(repo, \"./foo\");",
          "680:  write_invalid_filename(repo, \"./bar\");",
          "681:  write_invalid_filename(repo, \"foo/../bar\");",
          "",
          "[Added Lines]",
          "675:  assert_write_fails(repo, \".git/hello\");",
          "676:  assert_write_fails(repo, \".GIT/hello\");",
          "677:  assert_write_fails(repo, \".GiT/hello\");",
          "678:  assert_write_fails(repo, \"./.git/hello\");",
          "679:  assert_write_fails(repo, \"./foo\");",
          "680:  assert_write_fails(repo, \"./bar\");",
          "681:  assert_write_fails(repo, \"foo/../bar\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "696:  cl_repo_set_bool(repo, \"core.protectHFS\", true);",
          "697:  cl_repo_set_bool(repo, \"core.protectNTFS\", true);",
          "704:  git_repository_free(repo);",
          "",
          "[Removed Lines]",
          "699:  write_invalid_filename(repo, \".git./hello\");",
          "700:  write_invalid_filename(repo, \".git\\xe2\\x80\\xad/hello\");",
          "701:  write_invalid_filename(repo, \"git~1/hello\");",
          "702:  write_invalid_filename(repo, \".git\\xe2\\x81\\xaf/hello\");",
          "",
          "[Added Lines]",
          "699:  assert_write_fails(repo, \".git./hello\");",
          "700:  assert_write_fails(repo, \".git\\xe2\\x80\\xad/hello\");",
          "701:  assert_write_fails(repo, \"git~1/hello\");",
          "702:  assert_write_fails(repo, \".git\\xe2\\x81\\xaf/hello\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e4034dfa568b28651305364cd3367ac47cdc79d8",
      "candidate_info": {
        "commit_hash": "e4034dfa568b28651305364cd3367ac47cdc79d8",
        "repo": "libgit2/libgit2",
        "commit_url": "https://github.com/libgit2/libgit2/commit/e4034dfa568b28651305364cd3367ac47cdc79d8",
        "files": [
          "src/checkout.c",
          "src/path.c",
          "src/repository.h",
          "tests/index/tests.c"
        ],
        "message": "path: protect NTFS everywhere\n\nEnable core.protectNTFS by default everywhere and in every codepath, not\njust on checkout.",
        "before_after_code_files": [
          "src/checkout.c||src/checkout.c",
          "src/path.c||src/path.c",
          "src/repository.h||src/repository.h",
          "tests/index/tests.c||tests/index/tests.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libgit2/libgit2/pull/5331"
        ],
        "olp_code_files": {
          "patch": [
            "src/path.c||src/path.c"
          ],
          "candidate": [
            "src/path.c||src/path.c"
          ]
        }
      },
      "candidate_diff": {
        "src/checkout.c||src/checkout.c": [
          "File: src/checkout.c -> src/checkout.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1271:  int action,",
          "1272:  git_diff_delta *delta)",
          "1273: {",
          "1276:  if (action & CHECKOUT_ACTION__REMOVE) {",
          "1277:   if (!git_path_isvalid(repo, delta->old_file.path, delta->old_file.mode, flags)) {",
          "",
          "[Removed Lines]",
          "1274:  unsigned int flags = GIT_PATH_REJECT_WORKDIR_DEFAULTS | GIT_PATH_REJECT_DOT_GIT_NTFS;",
          "",
          "[Added Lines]",
          "1274:  unsigned int flags = GIT_PATH_REJECT_WORKDIR_DEFAULTS;",
          "",
          "---------------"
        ],
        "src/path.c||src/path.c": [
          "File: src/path.c -> src/path.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1832:  git_repository *repo,",
          "1833:  unsigned int flags)",
          "1834: {",
          "1836:  int error = 0;",
          "1838:  flags |= GIT_PATH_REJECT_DOT_GIT_LITERAL;",
          "",
          "[Removed Lines]",
          "1835:  int protectHFS = 0, protectNTFS = 0;",
          "",
          "[Added Lines]",
          "1835:  int protectHFS = 0, protectNTFS = 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1841:  protectHFS = 1;",
          "1842: #endif",
          "1848:  if (repo && !protectHFS)",
          "1849:   error = git_repository__configmap_lookup(&protectHFS, repo, GIT_CONFIGMAP_PROTECTHFS);",
          "1850:  if (!error && protectHFS)",
          "1851:   flags |= GIT_PATH_REJECT_DOT_GIT_HFS;",
          "1854:   error = git_repository__configmap_lookup(&protectNTFS, repo, GIT_CONFIGMAP_PROTECTNTFS);",
          "1855:  if (!error && protectNTFS)",
          "1856:   flags |= GIT_PATH_REJECT_DOT_GIT_NTFS;",
          "",
          "[Removed Lines]",
          "1844: #ifdef GIT_WIN32",
          "1845:  protectNTFS = 1;",
          "1846: #endif",
          "1853:  if (repo && !protectNTFS)",
          "",
          "[Added Lines]",
          "1849:  if (repo)",
          "",
          "---------------"
        ],
        "src/repository.h||src/repository.h": [
          "File: src/repository.h -> src/repository.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "114:  GIT_PROTECTHFS_DEFAULT = GIT_CONFIGMAP_FALSE,",
          "118:  GIT_FSYNCOBJECTFILES_DEFAULT = GIT_CONFIGMAP_FALSE,",
          "119: } git_configmap_value;",
          "",
          "[Removed Lines]",
          "116:  GIT_PROTECTNTFS_DEFAULT = GIT_CONFIGMAP_FALSE,",
          "",
          "[Added Lines]",
          "116:  GIT_PROTECTNTFS_DEFAULT = GIT_CONFIGMAP_TRUE,",
          "",
          "---------------"
        ],
        "tests/index/tests.c||tests/index/tests.c": [
          "File: tests/index/tests.c -> tests/index/tests.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "765:  cl_fixture_cleanup(\"invalid\");",
          "766: }",
          "768: void test_index_tests__remove_entry(void)",
          "769: {",
          "770:  git_repository *repo;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "768: void test_index_tests__protectntfs_on_by_default(void)",
          "769: {",
          "770:  git_repository *repo;",
          "772:  p_mkdir(\"invalid\", 0700);",
          "774:  cl_git_pass(git_repository_init(&repo, \"./invalid\", 0));",
          "775:  assert_write_fails(repo, \".git./hello\");",
          "776:  assert_write_fails(repo, \"git~1/hello\");",
          "778:  git_repository_free(repo);",
          "780:  cl_fixture_cleanup(\"invalid\");",
          "781: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d29d4de2d8982a709e38490c699182a534812e26",
      "candidate_info": {
        "commit_hash": "d29d4de2d8982a709e38490c699182a534812e26",
        "repo": "libgit2/libgit2",
        "commit_url": "https://github.com/libgit2/libgit2/commit/d29d4de2d8982a709e38490c699182a534812e26",
        "files": [
          "tests/clar_libgit2.h"
        ],
        "message": "cl_git_fail: do not report bogus error message\n\nWhen we expect a checkout operation to fail, but it succeeds, we\nactually do not want to see the error messages that were generated in\nthe meantime for errors that were handled gracefully by the code (e.g.\nwhen an object could not be found in a pack: in this case, the next\nbackend would have been given a chance to look up the object, and\nprobably would have found it because the checkout succeeded, after all).\n\nWhich means that in the specific case of `cl_git_fail()`, we actually\nwant to clear the global error state _after_ evaluating the command: we\nknow that any still-available error would be bogus, seeing as the\ncommand succeeded (unexpectedly).\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>",
        "before_after_code_files": [
          "tests/clar_libgit2.h||tests/clar_libgit2.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libgit2/libgit2/pull/5331"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/clar_libgit2.h||tests/clar_libgit2.h": [
          "File: tests/clar_libgit2.h -> tests/clar_libgit2.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #define cl_git_fail(expr) do { \\",
          "33:  if ((expr) == 0) \\",
          "34:   cl_git_report_failure(0, 0, __FILE__, __LINE__, \"Function call succeeded: \" #expr); \\",
          "35:  } while (0)",
          "",
          "[Removed Lines]",
          "32:  git_error_clear(); \\",
          "",
          "[Added Lines]",
          "33:   git_error_clear(), \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4bae85c5b9f2c761827b86d3c82385487d60febe",
      "candidate_info": {
        "commit_hash": "4bae85c5b9f2c761827b86d3c82385487d60febe",
        "repo": "libgit2/libgit2",
        "commit_url": "https://github.com/libgit2/libgit2/commit/4bae85c5b9f2c761827b86d3c82385487d60febe",
        "files": [
          "src/path.c",
          "tests/path/dotgit.c"
        ],
        "message": "path: also guard `.gitmodules` against NTFS Alternate Data Streams\n\nWe just safe-guarded `.git` against NTFS Alternate Data Stream-related\nattack vectors, and now it is time to do the same for `.gitmodules`.\n\nNote: In the added regression test, we refrain from verifying all kinds\nof variations between short names and NTFS Alternate Data Streams: as\nthe new code disallows _all_ Alternate Data Streams of `.gitmodules`, it\nis enough to test one in order to know that all of them are guarded\nagainst.\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>",
        "before_after_code_files": [
          "src/path.c||src/path.c",
          "tests/path/dotgit.c||tests/path/dotgit.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/path.c||src/path.c",
            "tests/path/dotgit.c||tests/path/dotgit.c"
          ],
          "candidate": [
            "src/path.c||src/path.c",
            "tests/path/dotgit.c||tests/path/dotgit.c"
          ]
        }
      },
      "candidate_diff": {
        "src/path.c||src/path.c": [
          "File: src/path.c -> src/path.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1631:  const char *c = path;",
          "1633:  for (;; c++) {",
          "1635:    return true;",
          "1636:   if (*c != ' ' && *c != '.')",
          "1637:    return false;",
          "",
          "[Removed Lines]",
          "1634:   if (*c == '\\0')",
          "",
          "[Added Lines]",
          "1634:   if (*c == '\\0' || *c == ':')",
          "",
          "---------------"
        ],
        "tests/path/dotgit.c||tests/path/dotgit.c": [
          "File: tests/path/dotgit.c -> tests/path/dotgit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:  cl_assert_equal_b(true, git_path_isvalid(NULL, \".gitmodules\", 0, GIT_PATH_REJECT_DOT_GIT_HFS|GIT_PATH_REJECT_DOT_GIT_NTFS));",
          "117:  cl_assert_equal_b(false, git_path_isvalid(NULL, \".gitmodules\", S_IFLNK, GIT_PATH_REJECT_DOT_GIT_HFS));",
          "118:  cl_assert_equal_b(false, git_path_isvalid(NULL, \".gitmodules\", S_IFLNK, GIT_PATH_REJECT_DOT_GIT_NTFS));",
          "119: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "119:  cl_assert_equal_b(false, git_path_isvalid(NULL, \".gitmodules . .::$DATA\", S_IFLNK, GIT_PATH_REJECT_DOT_GIT_NTFS));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ac0b2ef1f50fb961a990638520f3b09d06bc2141",
      "candidate_info": {
        "commit_hash": "ac0b2ef1f50fb961a990638520f3b09d06bc2141",
        "repo": "libgit2/libgit2",
        "commit_url": "https://github.com/libgit2/libgit2/commit/ac0b2ef1f50fb961a990638520f3b09d06bc2141",
        "files": [
          "src/path.c",
          "tests/path/dotgit.c"
        ],
        "message": "path: also guard `.gitmodules` against NTFS Alternate Data Streams\n\nWe just safe-guarded `.git` against NTFS Alternate Data Stream-related\nattack vectors, and now it is time to do the same for `.gitmodules`.\n\nNote: In the added regression test, we refrain from verifying all kinds\nof variations between short names and NTFS Alternate Data Streams: as\nthe new code disallows _all_ Alternate Data Streams of `.gitmodules`, it\nis enough to test one in order to know that all of them are guarded\nagainst.\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>",
        "before_after_code_files": [
          "src/path.c||src/path.c",
          "tests/path/dotgit.c||tests/path/dotgit.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/path.c||src/path.c",
            "tests/path/dotgit.c||tests/path/dotgit.c"
          ],
          "candidate": [
            "src/path.c||src/path.c",
            "tests/path/dotgit.c||tests/path/dotgit.c"
          ]
        }
      },
      "candidate_diff": {
        "src/path.c||src/path.c": [
          "File: src/path.c -> src/path.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1631:  const char *c = path;",
          "1633:  for (;; c++) {",
          "1635:    return true;",
          "1636:   if (*c != ' ' && *c != '.')",
          "1637:    return false;",
          "",
          "[Removed Lines]",
          "1634:   if (*c == '\\0')",
          "",
          "[Added Lines]",
          "1634:   if (*c == '\\0' || *c == ':')",
          "",
          "---------------"
        ],
        "tests/path/dotgit.c||tests/path/dotgit.c": [
          "File: tests/path/dotgit.c -> tests/path/dotgit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:  cl_assert_equal_b(true, git_path_isvalid(NULL, \".gitmodules\", 0, GIT_PATH_REJECT_DOT_GIT_HFS|GIT_PATH_REJECT_DOT_GIT_NTFS));",
          "117:  cl_assert_equal_b(false, git_path_isvalid(NULL, \".gitmodules\", S_IFLNK, GIT_PATH_REJECT_DOT_GIT_HFS));",
          "118:  cl_assert_equal_b(false, git_path_isvalid(NULL, \".gitmodules\", S_IFLNK, GIT_PATH_REJECT_DOT_GIT_NTFS));",
          "119: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "119:  cl_assert_equal_b(false, git_path_isvalid(NULL, \".gitmodules . .::$DATA\", S_IFLNK, GIT_PATH_REJECT_DOT_GIT_NTFS));",
          "",
          "---------------"
        ]
      }
    }
  ]
}