{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fa94d492c8f2279df00cf4891f816f6c1e0c7c1a",
      "candidate_info": {
        "commit_hash": "fa94d492c8f2279df00cf4891f816f6c1e0c7c1a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fa94d492c8f2279df00cf4891f816f6c1e0c7c1a",
        "files": [
          "ext/session/sqlite3session.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a harmless compiler warning in Sessions.\n\nFossilOrigin-Name: fc9791ea987352e3e1322fbb7f833c23b402432af8249f9d397c6f7456788637",
        "before_after_code_files": [
          "ext/session/sqlite3session.c||ext/session/sqlite3session.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/session/sqlite3session.c||ext/session/sqlite3session.c": [
          "File: ext/session/sqlite3session.c -> ext/session/sqlite3session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1154:   int iHash;",
          "1155:   int bNull = 0;",
          "1156:   int rc = SQLITE_OK;",
          "1159:   if( pSession->rc ) return;",
          "",
          "[Removed Lines]",
          "1157:   SessionStat1Ctx stat1 = {0};",
          "",
          "[Added Lines]",
          "1157:   SessionStat1Ctx stat1 = {{0,0,0,0,0},0};",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 32754ca6f86da8165e274f98f35fc3df3aebd273e9da08387e2d0c3c89abda0f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "81d25cf53d27a4b352de086347850c69cf476aee",
      "candidate_info": {
        "commit_hash": "81d25cf53d27a4b352de086347850c69cf476aee",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/81d25cf53d27a4b352de086347850c69cf476aee",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/update.c"
        ],
        "message": "Mark new VDBE branches never taken.\n\nFossilOrigin-Name: 83c2adffbfb6dcdddb38ad9f888647b0e39fa24dc0bff344238e1f75a6c7d2ed",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/update.c||src/update.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d768007473f4ed40abbdf2c7e501b580b1cc37c1620c7cb90af1f208a8c35145",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "730:       }else{",
          "731:         sqlite3VdbeAddOp3(v, OP_NotExists, iDataCur, labelContinue,regOldRowid);",
          "732:       }",
          "733:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "733:       VdbeCoverageNeverTaken(v);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "89b6de0357a499209c13cf66a3cc406f26f67e6f",
      "candidate_info": {
        "commit_hash": "89b6de0357a499209c13cf66a3cc406f26f67e6f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/89b6de0357a499209c13cf66a3cc406f26f67e6f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Remove an ALWAYS() from a branch that is not always taken.  The test case found by OSSFuzz has been added to TH3.\n\nFossilOrigin-Name: 5c7dab85535ac42c021977dbd4a39cef5a72e3d9dccff1c5ca5570a1780516cd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 23b62fb160d86dc9d9073bcc714601f5b7695f96abd893eafecf4b2e565b87f2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4778:     }",
          "4779:   }",
          "4780:   if( (pA->flags & EP_Distinct)!=(pB->flags & EP_Distinct) ) return 2;",
          "4782:     if( combinedFlags & EP_xIsSelect ) return 2;",
          "4783:     if( (combinedFlags & EP_FixedCol)==0",
          "4784:      && sqlite3ExprCompare(pParse, pA->pLeft, pB->pLeft, iTab) ) return 2;",
          "",
          "[Removed Lines]",
          "4781:   if( ALWAYS((combinedFlags & EP_TokenOnly)==0) ){",
          "",
          "[Added Lines]",
          "4781:   if( (combinedFlags & EP_TokenOnly)==0 ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "554a19dbeef3c45d5f52c540a79920403c54170a",
      "candidate_info": {
        "commit_hash": "554a19dbeef3c45d5f52c540a79920403c54170a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/554a19dbeef3c45d5f52c540a79920403c54170a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/insert.test"
        ],
        "message": "Make sure the btree cursor overflow cache is cleared when overwriting a cell in sqlite3BtreeInsert().  Ticket [3cf9bb227e9a5d32]\n\nFossilOrigin-Name: 7dae7b969ed314605a3a2da2cfdce4d81152740f5d3bfbc2a6e311b13ee325a7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "test/insert.test||test/insert.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 636ca4472c9f41eb3989f28854d4968867837399a2092f389d1b814d98cccbae",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8716:       memcpy(newCell, oldCell, 4);",
          "8717:     }",
          "8718:     rc = clearCell(pPage, oldCell, &info);",
          "8719:     if( info.nSize==szNew && info.nLocal==info.nPayload",
          "8720:      && (!ISAUTOVACUUM || szNew<pPage->minLocal)",
          "8721:     ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8719:     testcase( pCur->curFlags & BTCF_ValidOvfl );",
          "8720:     invalidateOverflowCache(pCur);",
          "",
          "---------------"
        ],
        "test/insert.test||test/insert.test": [
          "File: test/insert.test -> test/insert.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "461: integrity_check insert-99.0",
          "463: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "463: # 2019-08-12.",
          "464: #",
          "465: do_execsql_test insert-15.1 {",
          "466:   DROP TABLE IF EXISTS t1;",
          "467:   DROP TABLE IF EXISTS t2;",
          "468:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b TEXT);",
          "469:   CREATE INDEX i1 ON t1(b);",
          "470:   CREATE TABLE t2(a, b);",
          "471:   INSERT INTO t2 VALUES(4, randomblob(31000));",
          "472:   INSERT INTO t2 VALUES(4, randomblob(32000));",
          "473:   INSERT INTO t2 VALUES(4, randomblob(33000));",
          "474:   REPLACE INTO t1 SELECT a, b FROM t2;",
          "475:   SELECT a, length(b) FROM t1;",
          "476: } {4 33000}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4e2d3d40dcc32a70d3a481bae9a5707fc93237fc",
      "candidate_info": {
        "commit_hash": "4e2d3d40dcc32a70d3a481bae9a5707fc93237fc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4e2d3d40dcc32a70d3a481bae9a5707fc93237fc",
        "files": [
          "Makefile.msc",
          "ext/session/changesetfuzz.c",
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "tool/dbtotxt.c"
        ],
        "message": "Fix harmless compiler warnings seen with MSVC.\n\nFossilOrigin-Name: 6cf8b18ec20f11c25ff7396f29c742404d3a88d5e97a5fd53ccfaff51dec3f33",
        "before_after_code_files": [
          "Makefile.msc||Makefile.msc",
          "ext/session/changesetfuzz.c||ext/session/changesetfuzz.c",
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "tool/dbtotxt.c||tool/dbtotxt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2560:  del /Q .target_source 2>NUL",
          "2561:  del /Q tclsqlite3.exe $(SQLITETCLH) $(SQLITETCLDECLSH) 2>NUL",
          "2562:  del /Q lsm.dll lsmtest.exe 2>NUL",
          "2563:  del /Q testloadext.dll 2>NUL",
          "2564:  del /Q testfixture.exe test.db 2>NUL",
          "2565:  del /Q LogEst.exe fts3view.exe rollback-test.exe showdb.exe dbdump.exe 2>NUL",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2563:  del /Q atrc.exe changesetfuzz.exe dbtotxt.exe index_usage.exe 2>NUL",
          "",
          "---------------"
        ],
        "ext/session/changesetfuzz.c||ext/session/changesetfuzz.c": [
          "File: ext/session/changesetfuzz.c -> ext/session/changesetfuzz.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "154:   pBuf = sqlite3_malloc64( sz ? sz : 1 );",
          "155:   if( pBuf==0 ){",
          "156:     fprintf(stderr, \"cannot allocate %d to hold content of \\\"%s\\\"\\n\",",
          "158:     exit(1);",
          "159:   }",
          "160:   if( sz>0 ){",
          "163:       exit(1);",
          "164:     }",
          "165:     fclose(f);",
          "166:   }",
          "169: }",
          "",
          "[Removed Lines]",
          "157:             sz, zFilename);",
          "161:     if( fread(pBuf, sz, 1, f)!=1 ){",
          "162:       fprintf(stderr, \"cannot read all %d bytes of \\\"%s\\\"\\n\", sz, zFilename);",
          "",
          "[Added Lines]",
          "157:             (int)sz, zFilename);",
          "161:     if( fread(pBuf, (size_t)sz, 1, f)!=1 ){",
          "162:       fprintf(stderr, \"cannot read all %d bytes of \\\"%s\\\"\\n\",",
          "163:               (int)sz, zFilename);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "343: static void *fuzzMalloc(sqlite3_int64 nByte){",
          "344:   void *pRet = sqlite3_malloc64(nByte);",
          "345:   if( pRet ){",
          "347:   }",
          "348:   return pRet;",
          "349: }",
          "",
          "[Removed Lines]",
          "346:     memset(pRet, 0, nByte);",
          "",
          "[Added Lines]",
          "347:     memset(pRet, 0, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "384: static int fuzzPutVarint(u8 *p, int nVal){",
          "385:   assert( nVal>0 && nVal<2097152 );",
          "386:   if( nVal<128 ){",
          "388:     return 1;",
          "389:   }",
          "390:   if( nVal<16384 ){",
          "",
          "[Removed Lines]",
          "387:     p[0] = nVal;",
          "",
          "[Added Lines]",
          "388:     p[0] = (u8)nVal;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "459:       pGrp->aPK = p;",
          "460:       p += pGrp->nCol;",
          "461:       pGrp->zTab = (const char*)p;",
          "464:       if( p>=pEnd ){",
          "465:         rc = fuzzCorrupt();",
          "",
          "[Removed Lines]",
          "462:       p = &p[strlen(p)+1];",
          "",
          "[Added Lines]",
          "463:       p = &p[strlen((const char*)p)+1];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "697:           int nTxt;",
          "700:           p += fuzzGetVarint(p, &nTxt);",
          "701:           printf(\"%s%s\", zPre, eType==0x03 ? \"'\" : \"X'\");",
          "702:           for(i=0; i<nTxt; i++){",
          "",
          "[Removed Lines]",
          "698:           int sz;",
          "699:           int i;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "861:           int nByte = fuzzRandomInt(48);",
          "863:           fuzzRandomBlob(nByte, &pChange->aSub[2]);",
          "864:           if( pChange->aSub[0]==0x03 ){",
          "865:             int i;",
          "",
          "[Removed Lines]",
          "862:           pChange->aSub[1] = nByte;",
          "",
          "[Added Lines]",
          "861:           pChange->aSub[1] = (u8)nByte;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1004:       }else if( p==pFuzz->pSub2 ){",
          "1005:         pCopy = pFuzz->pSub1;",
          "1006:       }else if( i==iUndef ){",
          "1008:       }",
          "1010:       if( pCopy[0]==0x00 && eNew!=eType && eType==SQLITE_UPDATE && iRec==0 ){",
          "",
          "[Removed Lines]",
          "1007:         pCopy = \"\\0\";",
          "",
          "[Added Lines]",
          "1006:         pCopy = (u8*)\"\\0\";",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1067:       for(i=0; i<pGrp->nCol; i++){",
          "1068:         int sz;",
          "1069:         u8 *pCopy = pCsr;",
          "1071:         fuzzChangeSize(pCopy, &sz);",
          "1072:         memcpy(pOut, pCopy, sz);",
          "1073:         pOut += sz;",
          "",
          "[Removed Lines]",
          "1070:         if( pGrp->aPK[i] ) pCopy = \"\\0\";",
          "",
          "[Added Lines]",
          "1069:         if( pGrp->aPK[i] ) pCopy = (u8*)\"\\0\";",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8af0caeb6d1e55f66ad2f12af94845dccfe1d0420faf326f5917fc07f8aa6050",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "834: static int btreeRestoreCursorPosition(BtCursor *pCur){",
          "835:   int rc;",
          "837:   assert( cursorOwnsBtShared(pCur) );",
          "838:   assert( pCur->eState>=CURSOR_REQUIRESEEK );",
          "839:   if( pCur->eState==CURSOR_FAULT ){",
          "",
          "[Removed Lines]",
          "836:   int skipNext;",
          "",
          "[Added Lines]",
          "836:   int skipNext = 0;",
          "",
          "---------------"
        ],
        "tool/dbtotxt.c||tool/dbtotxt.c": [
          "File: tool/dbtotxt.c -> tool/dbtotxt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:   memset(bShow, '.', sizeof(bShow));",
          "53:   for(i=' '; i<='~'; i++){",
          "55:   }",
          "56:   for(i=1; i<argc; i++){",
          "57:     if( argv[i][0]=='-' ){",
          "",
          "[Removed Lines]",
          "54:     if( i!='{' && i!='}' && i!='\"' && i!='\\\\' ) bShow[i] = i;",
          "",
          "[Added Lines]",
          "54:     if( i!='{' && i!='}' && i!='\"' && i!='\\\\' ) bShow[i] = (unsigned char)i;",
          "",
          "---------------"
        ]
      }
    }
  ]
}