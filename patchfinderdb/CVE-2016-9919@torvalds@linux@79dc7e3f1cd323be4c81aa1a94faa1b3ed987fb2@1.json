{
  "cve_id": "CVE-2016-9919",
  "cve_desc": "The icmp6_send function in net/ipv6/icmp.c in the Linux kernel through 4.8.12 omits a certain check of the dst data structure, which allows remote attackers to cause a denial of service (panic) via a fragmented IPv6 packet.",
  "repo": "torvalds/linux",
  "patch_hash": "79dc7e3f1cd323be4c81aa1a94faa1b3ed987fb2",
  "patch_info": {
    "commit_hash": "79dc7e3f1cd323be4c81aa1a94faa1b3ed987fb2",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/79dc7e3f1cd323be4c81aa1a94faa1b3ed987fb2",
    "files": [
      "net/ipv6/icmp.c"
    ],
    "message": "net: handle no dst on skb in icmp6_send\n\nAndrey reported the following while fuzzing the kernel with syzkaller:\n\nkasan: CONFIG_KASAN_INLINE enabled\nkasan: GPF could be caused by NULL-ptr deref or user memory access\ngeneral protection fault: 0000 [#1] SMP KASAN\nModules linked in:\nCPU: 0 PID: 3859 Comm: a.out Not tainted 4.9.0-rc6+ #429\nHardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011\ntask: ffff8800666d4200 task.stack: ffff880067348000\nRIP: 0010:[<ffffffff833617ec>]  [<ffffffff833617ec>]\nicmp6_send+0x5fc/0x1e30 net/ipv6/icmp.c:451\nRSP: 0018:ffff88006734f2c0  EFLAGS: 00010206\nRAX: ffff8800666d4200 RBX: 0000000000000000 RCX: 0000000000000000\nRDX: 0000000000000000 RSI: dffffc0000000000 RDI: 0000000000000018\nRBP: ffff88006734f630 R08: ffff880064138418 R09: 0000000000000003\nR10: dffffc0000000000 R11: 0000000000000005 R12: 0000000000000000\nR13: ffffffff84e7e200 R14: ffff880064138484 R15: ffff8800641383c0\nFS:  00007fb3887a07c0(0000) GS:ffff88006cc00000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 0000000020000000 CR3: 000000006b040000 CR4: 00000000000006f0\nStack:\n ffff8800666d4200 ffff8800666d49f8 ffff8800666d4200 ffffffff84c02460\n ffff8800666d4a1a 1ffff1000ccdaa2f ffff88006734f498 0000000000000046\n ffff88006734f440 ffffffff832f4269 ffff880064ba7456 0000000000000000\nCall Trace:\n [<ffffffff83364ddc>] icmpv6_param_prob+0x2c/0x40 net/ipv6/icmp.c:557\n [<     inline     >] ip6_tlvopt_unknown net/ipv6/exthdrs.c:88\n [<ffffffff83394405>] ip6_parse_tlv+0x555/0x670 net/ipv6/exthdrs.c:157\n [<ffffffff8339a759>] ipv6_parse_hopopts+0x199/0x460 net/ipv6/exthdrs.c:663\n [<ffffffff832ee773>] ipv6_rcv+0xfa3/0x1dc0 net/ipv6/ip6_input.c:191\n ...\n\nicmp6_send / icmpv6_send is invoked for both rx and tx paths. In both\ncases the dst->dev should be preferred for determining the L3 domain\nif the dst has been set on the skb. Fallback to the skb->dev if it has\nnot. This covers the case reported here where icmp6_send is invoked on\nRx before the route lookup.\n\nFixes: 5d41ce29e (\"net: icmp6_send should use dst dev to determine L3 domain\")\nReported-by: Andrey Konovalov <andreyknvl@google.com>\nSigned-off-by: David Ahern <dsa@cumulusnetworks.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "net/ipv6/icmp.c||net/ipv6/icmp.c"
    ]
  },
  "patch_diff": {
    "net/ipv6/icmp.c||net/ipv6/icmp.c": [
      "File: net/ipv6/icmp.c -> net/ipv6/icmp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "448:  if (__ipv6_addr_needs_scope_id(addr_type))",
      "449:   iif = skb->dev->ifindex;",
      "",
      "[Removed Lines]",
      "450:  else",
      "451:   iif = l3mdev_master_ifindex(skb_dst(skb)->dev);",
      "",
      "[Added Lines]",
      "450:  else {",
      "451:   dst = skb_dst(skb);",
      "452:   iif = l3mdev_master_ifindex(dst ? dst->dev : skb->dev);",
      "453:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f177d73949bf758542ca15a1c1945bd2e802cc65",
      "candidate_info": {
        "commit_hash": "f177d73949bf758542ca15a1c1945bd2e802cc65",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/f177d73949bf758542ca15a1c1945bd2e802cc65",
        "files": [
          "fs/btrfs/disk-io.c"
        ],
        "message": "Btrfs: fix emptiness check for dirtied extent buffers at check_leaf()\n\nWe can not simply use the owner field from an extent buffer's header to\nget the id of the respective tree when the extent buffer is from a\nrelocation tree. When we create the root for a relocation tree we leave\n(on purpose) the owner field with the same value as the subvolume's tree\nroot (we do this at ctree.c:btrfs_copy_root()). So we must ignore extent\nbuffers from relocation trees, which have the BTRFS_HEADER_FLAG_RELOC\nflag set, because otherwise we will always consider the extent buffer\nas not being the root of the tree (the root of original subvolume tree\nis always different from the root of the respective relocation tree).\n\nThis lead to assertion failures when running with the integrity checker\nenabled (CONFIG_BTRFS_FS_CHECK_INTEGRITY=y) such as the following:\n\n[  643.393409] BTRFS critical (device sdg): corrupt leaf, non-root leaf's nritems is 0: block=38506496, root=260, slot=0\n[  643.397609] BTRFS info (device sdg): leaf 38506496 total ptrs 0 free space 3995\n[  643.407075] assertion failed: 0, file: fs/btrfs/disk-io.c, line: 4078\n[  643.408425] ------------[ cut here ]------------\n[  643.409112] kernel BUG at fs/btrfs/ctree.h:3419!\n[  643.409773] invalid opcode: 0000 [#1] PREEMPT SMP\n[  643.410447] Modules linked in: dm_flakey dm_mod crc32c_generic btrfs xor raid6_pq ppdev psmouse acpi_cpufreq parport_pc evdev parport tpm_tis tpm_tis_core pcspkr serio_raw i2c_piix4 sg tpm i2c_core button processor loop autofs4 ext4 crc16 jbd2 mbcache sr_mod cdrom sd_mod ata_generic virtio_scsi ata_piix libata virtio_pci virtio_ring scsi_mod virtio e1000 floppy\n[  643.414356] CPU: 11 PID: 32726 Comm: btrfs Not tainted 4.8.0-rc8-btrfs-next-35+ #1\n[  643.414356] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.9.1-0-gb3ef39f-prebuilt.qemu-project.org 04/01/2014\n[  643.414356] task: ffff880145e95b00 task.stack: ffff88014826c000\n[  643.414356] RIP: 0010:[<ffffffffa0352759>]  [<ffffffffa0352759>] assfail.constprop.41+0x1c/0x1e [btrfs]\n[  643.414356] RSP: 0018:ffff88014826fa28  EFLAGS: 00010292\n[  643.414356] RAX: 0000000000000039 RBX: ffff88014e2d7c38 RCX: 0000000000000001\n[  643.414356] RDX: ffff88023f4d2f58 RSI: ffffffff81806c63 RDI: 00000000ffffffff\n[  643.414356] RBP: ffff88014826fa28 R08: 0000000000000001 R09: 0000000000000000\n[  643.414356] R10: ffff88014826f918 R11: ffffffff82f3c5ed R12: ffff880172910000\n[  643.414356] R13: ffff880233992230 R14: ffff8801a68a3310 R15: fffffffffffffff8\n[  643.414356] FS:  00007f9ca305e8c0(0000) GS:ffff88023f4c0000(0000) knlGS:0000000000000000\n[  643.414356] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[  643.414356] CR2: 00007f9ca3071000 CR3: 000000015d01b000 CR4: 00000000000006e0\n[  643.414356] Stack:\n[  643.414356]  ffff88014826fa50 ffffffffa02d655a 000000000000000a ffff88014e2d7c38\n[  643.414356]  0000000000000000 ffff88014826faa8 ffffffffa02b72f3 ffff88014826fab8\n[  643.414356]  00ffffffa03228e4 0000000000000000 0000000000000000 ffff8801bbd4e000\n[  643.414356] Call Trace:\n[  643.414356]  [<ffffffffa02d655a>] btrfs_mark_buffer_dirty+0xdf/0xe5 [btrfs]\n[  643.414356]  [<ffffffffa02b72f3>] btrfs_copy_root+0x18a/0x1d1 [btrfs]\n[  643.414356]  [<ffffffffa0322921>] create_reloc_root+0x72/0x1ba [btrfs]\n[  643.414356]  [<ffffffffa03267c2>] btrfs_init_reloc_root+0x7b/0xa7 [btrfs]\n[  643.414356]  [<ffffffffa02d9e44>] record_root_in_trans+0xdf/0xed [btrfs]\n[  643.414356]  [<ffffffffa02db04e>] btrfs_record_root_in_trans+0x50/0x6a [btrfs]\n[  643.414356]  [<ffffffffa030ad2b>] create_subvol+0x472/0x773 [btrfs]\n[  643.414356]  [<ffffffffa030b406>] btrfs_mksubvol+0x3da/0x463 [btrfs]\n[  643.414356]  [<ffffffffa030b406>] ? btrfs_mksubvol+0x3da/0x463 [btrfs]\n[  643.414356]  [<ffffffff810781ac>] ? preempt_count_add+0x65/0x68\n[  643.414356]  [<ffffffff811a6e97>] ? __mnt_want_write+0x62/0x77\n[  643.414356]  [<ffffffffa030b55d>] btrfs_ioctl_snap_create_transid+0xce/0x187 [btrfs]\n[  643.414356]  [<ffffffffa030b67d>] btrfs_ioctl_snap_create+0x67/0x81 [btrfs]\n[  643.414356]  [<ffffffffa030ecfd>] btrfs_ioctl+0x508/0x20dd [btrfs]\n[  643.414356]  [<ffffffff81293e39>] ? __this_cpu_preempt_check+0x13/0x15\n[  643.414356]  [<ffffffff81155eca>] ? handle_mm_fault+0x976/0x9ab\n[  643.414356]  [<ffffffff81091300>] ? arch_local_irq_save+0x9/0xc\n[  643.414356]  [<ffffffff8119a2b0>] vfs_ioctl+0x18/0x34\n[  643.414356]  [<ffffffff8119a8e8>] do_vfs_ioctl+0x581/0x600\n[  643.414356]  [<ffffffff814b9552>] ? entry_SYSCALL_64_fastpath+0x5/0xa8\n[  643.414356]  [<ffffffff81093fe9>] ? trace_hardirqs_on_caller+0x17b/0x197\n[  643.414356]  [<ffffffff8119a9be>] SyS_ioctl+0x57/0x79\n[  643.414356]  [<ffffffff814b9565>] entry_SYSCALL_64_fastpath+0x18/0xa8\n[  643.414356]  [<ffffffff81091b08>] ? trace_hardirqs_off_caller+0x3f/0xaa\n[  643.414356] Code: 89 83 88 00 00 00 31 c0 5b 41 5c 41 5d 5d c3 55 89 f1 48 c7 c2 98 bc 35 a0 48 89 fe 48 c7 c7 05 be 35 a0 48 89 e5 e8 13 46 dd e0 <0f> 0b 55 89 f1 48 c7 c2 9f d3 35 a0 48 89 fe 48 c7 c7 7a d5 35\n[  643.414356] RIP  [<ffffffffa0352759>] assfail.constprop.41+0x1c/0x1e [btrfs]\n[  643.414356]  RSP <ffff88014826fa28>\n[  643.468267] ---[ end trace 6a1b3fb1a9d7d6e3 ]---\n\nThis can be easily reproduced by running xfstests with the integrity\nchecker enabled.\n\nFixes: 1ba98d086fe3 (Btrfs: detect corruption when non-root leaf has zero item)\nCc: stable@vger.kernel.org  # 4.8+\nSigned-off-by: Filipe Manana <fdmanana@suse.com>\nReviewed-by: Liu Bo <bo.li.liu@oracle.com>",
        "before_after_code_files": [
          "fs/btrfs/disk-io.c||fs/btrfs/disk-io.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fs/btrfs/disk-io.c||fs/btrfs/disk-io.c": [
          "File: fs/btrfs/disk-io.c -> fs/btrfs/disk-io.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "559:  u32 nritems = btrfs_header_nritems(leaf);",
          "560:  int slot;",
          "563:   struct btrfs_root *check_root;",
          "565:   key.objectid = btrfs_header_owner(leaf);",
          "",
          "[Removed Lines]",
          "562:  if (nritems == 0) {",
          "",
          "[Added Lines]",
          "570:  if (nritems == 0 && !btrfs_header_flag(leaf, BTRFS_HEADER_FLAG_RELOC)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "587:   return 0;",
          "588:  }",
          "591:  if (btrfs_item_offset_nr(leaf, 0) + btrfs_item_size_nr(leaf, 0) !=",
          "592:      BTRFS_LEAF_DATA_SIZE(root)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "598:  if (nritems == 0)",
          "599:   return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "92117f0bce64268b841261774e45462cc7ff80af",
      "candidate_info": {
        "commit_hash": "92117f0bce64268b841261774e45462cc7ff80af",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/92117f0bce64268b841261774e45462cc7ff80af",
        "files": [
          "drivers/gpu/drm/i915/intel_display.c"
        ],
        "message": "drm/i915: Move priority bumping for flips earlier\n\nDavid found another issue with priority bumping from mmioflips, where we\nare accessing the requests concurrently to them being retired and freed.\nWhilst we are skipping the dependency if has been submitted, that is not\nsufficient to stop the dependency from disappearing if another thread\nretires that request. To prevent we can either employ the struct_mutex (or a\nrequest mutex in the future) to serialise retiring before it is freed.\nAlternatively, we need to keep the dependencies alive using RCU whilst\nthey are being accessed via the DFS.\n\n[ 1746.698111] general protection fault: 0000 [#1] PREEMPT SMP\n[ 1746.698305] Modules linked in: snd_hda_intel snd_hda_codec snd_hwdep x86_pkg_temp_thermal snd_hda_core coretemp crct10dif_pclmul crc32_pclmul snd_pcm ghash_clmulni_intel mei_me mei i915 e1000e ptp pps_core i2c_hid\n[ 1746.698750] CPU: 1 PID: 6716 Comm: kworker/u8:2 Not tainted 4.9.0-rc6-CI-Nightly_816+ #1\n[ 1746.698871] Hardware name: GIGABYTE GB-BKi7A-7500/MFLP7AP-00, BIOS F1 07/27/2016\n[ 1746.699125] Workqueue: events_unbound intel_mmio_flip_work_func [i915]\n[ 1746.699266] task: ffff880260a5e800 task.stack: ffffc90000f6c000\n[ 1746.699361] RIP: 0010:[<ffffffffa006595d>]  [<ffffffffa006595d>] execlists_schedule+0x8d/0x300 [i915]\n[ 1746.699632] RSP: 0018:ffffc90000f6fcd8  EFLAGS: 00010206\n[ 1746.699724] RAX: dead0000000000f8 RBX: ffff8801f64b2bf0 RCX: ffff8801f64b2c10\n[ 1746.699842] RDX: dead000000000100 RSI: 0000000000000000 RDI: ffff8801f64b0458\n[ 1746.699972] RBP: ffffc90000f6fd68 R08: ffff88026488dc00 R09: 0000000000000002\n[ 1746.700090] R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000400\n[ 1746.700195] R13: ffffc90000f6fcf0 R14: ffff88020955aa40 R15: ffff88020955aa68\n[ 1746.700307] FS:  0000000000000000(0000) GS:ffff88026dc80000(0000) knlGS:0000000000000000\n[ 1746.700435] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[ 1746.700532] CR2: 0000000002a69e90 CR3: 0000000002c07000 CR4: 00000000003406e0\n[ 1746.700635] Stack:\n[ 1746.700682]  ffff880260a5e880 ffffc90000f6fd50 ffffffff810af69a ffffc90000f6fd28\n[ 1746.700827]  ffff88020955a628 ffff8801e1eaebf0 0000000000000020 0000000000000000\n[ 1746.700947]  00000196af1edc96 ffff88025dfa4000 ffff8801f0b030a8 ffffc90000f6fcf0\n[ 1746.701071] Call Trace:\n[ 1746.701117]  [<ffffffff810af69a>] ? dequeue_entity+0x25a/0xb50\n[ 1746.701260]  [<ffffffffa00516be>] fence_set_priority+0x7e/0x80 [i915]\n[ 1746.701406]  [<ffffffffa0051a15>] i915_gem_object_wait_priority+0x85/0x160 [i915]\n[ 1746.701599]  [<ffffffffa008ccd7>] intel_mmio_flip_work_func+0x47/0x2b0 [i915]\n[ 1746.701717]  [<ffffffff81094c4d>] process_one_work+0x14d/0x470\n[ 1746.701809]  [<ffffffff81094fb3>] worker_thread+0x43/0x4e0\n[ 1746.701888]  [<ffffffff81094f70>] ? process_one_work+0x470/0x470\n[ 1746.701969]  [<ffffffff81094f70>] ? process_one_work+0x470/0x470\n[ 1746.702072]  [<ffffffff8109a4d5>] kthread+0xc5/0xe0\n[ 1746.702152]  [<ffffffff81771c59>] ? _raw_spin_unlock_irq+0x9/0x10\n[ 1746.702234]  [<ffffffff8109a410>] ? kthread_park+0x60/0x60\n[ 1746.702318]  [<ffffffff81772272>] ret_from_fork+0x22/0x30\n[ 1746.702387] Code: 89 42 08 48 8b 45 88 48 89 55 c0 4c 89 6d c8 4c 8d 70 d8 4d 8d 7e 28 4d 39 ef 74 72 49 8b 1e 48 8b 13 48 39 d3 48 8d 42 f8 74 3e <48> 8b 10 8b 52 38 41 39 d4 7e 26 48 8b 50 30 48 8b 78 28 48 8d\n[ 1746.702921] RIP  [<ffffffffa006595d>] execlists_schedule+0x8d/0x300 [i915]\nNov 25 21:42:54 kbl-gbbki7 kernel: [ 1746.703027]  RSP <ffffc90000f6fcd8>\n\nFixes: 27745e829a5c (\"drm/i915/execlists: Use a local lock for dfs_link access\")\nFixes: 9a151987d709 (\"drm/i915: Add execution priority boosting for mmioflips\")\nSigned-off-by: Chris Wilson <chris@chris-wilson.co.uk>\nCc: David Weinehall <david.weinehall@linux.intel.com>\nCc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>\nLink: http://patchwork.freedesktop.org/patch/msgid/20161128143649.4289-1-chris@chris-wilson.co.uk\nReviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>",
        "before_after_code_files": [
          "drivers/gpu/drm/i915/intel_display.c||drivers/gpu/drm/i915/intel_display.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/gpu/drm/i915/intel_display.c||drivers/gpu/drm/i915/intel_display.c": [
          "File: drivers/gpu/drm/i915/intel_display.c -> drivers/gpu/drm/i915/intel_display.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12022:   to_intel_framebuffer(crtc->base.primary->fb);",
          "12023:  struct drm_i915_gem_object *obj = intel_fb->obj;",
          "12026:  WARN_ON(i915_gem_object_wait(obj, 0, MAX_SCHEDULE_TIMEOUT, NULL) < 0);",
          "12028:  intel_pipe_update_start(crtc);",
          "",
          "[Removed Lines]",
          "12025:  i915_gem_object_wait_priority(obj, 0, I915_PRIORITY_DISPLAY);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12278:   i915_add_request_no_flush(request);",
          "12279:  }",
          "12281:  i915_gem_track_fb(intel_fb_obj(old_fb), obj,",
          "12282:      to_intel_plane(primary)->frontbuffer_bit);",
          "12283:  mutex_unlock(&dev->struct_mutex);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12280:  i915_gem_object_wait_priority(obj, 0, I915_PRIORITY_DISPLAY);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3b10d0095a1e2d6ce11f6537e04806ff8aba9cdd",
      "candidate_info": {
        "commit_hash": "3b10d0095a1e2d6ce11f6537e04806ff8aba9cdd",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/3b10d0095a1e2d6ce11f6537e04806ff8aba9cdd",
        "files": [
          "arch/powerpc/mm/pgtable-radix.c"
        ],
        "message": "powerpc/mm/radix: Prevent kernel execution of user space\n\nISA 3 defines new encoded access authority that allows instruction\naccess prevention in privileged mode and allows normal access\nto problem state. This patch just enables IAMR (Instruction Authority\nMask Register), enabling AMR would require more work.\n\nI've tested this with a buggy driver and a simple payload. The payload\nis specific to the build I've tested.\n\nmpe: Also tested with LKDTM:\n\n  # echo EXEC_USERSPACE > /sys/kernel/debug/provoke-crash/DIRECT\n  lkdtm: Performing direct entry EXEC_USERSPACE\n  lkdtm: attempting ok execution at c0000000005bf560\n  lkdtm: attempting bad execution at 00003fff8d940000\n  Unable to handle kernel paging request for instruction fetch\n  Faulting instruction address: 0x3fff8d940000\n  Oops: Kernel access of bad area, sig: 11 [#1]\n  NIP: 00003fff8d940000 LR: c0000000005bfa58 CTR: 00003fff8d940000\n  REGS: c0000000f1fcf900 TRAP: 0400   Not tainted  (4.9.0-rc5-compiler_gcc-6.2.0-00109-g956dbc06232a)\n  MSR: 9000000010009033 <SF,HV,EE,ME,IR,DR,RI,LE>  CR: 48002222  XER: 00000000\n  ...\n  Call Trace:\n    lkdtm_EXEC_USERSPACE+0x104/0x120 (unreliable)\n    lkdtm_do_action+0x3c/0x80\n    direct_entry+0x100/0x1b0\n    full_proxy_write+0x94/0x100\n    __vfs_write+0x3c/0x1b0\n    vfs_write+0xcc/0x230\n    SyS_write+0x60/0x110\n    system_call+0x38/0xfc\n\nSigned-off-by: Balbir Singh <bsingharora@gmail.com>\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>",
        "before_after_code_files": [
          "arch/powerpc/mm/pgtable-radix.c||arch/powerpc/mm/pgtable-radix.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/powerpc/mm/pgtable-radix.c||arch/powerpc/mm/pgtable-radix.c": [
          "File: arch/powerpc/mm/pgtable-radix.c -> arch/powerpc/mm/pgtable-radix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "324:  mtspr(SPRN_AMOR, (3ul << 62));",
          "325: }",
          "327: void __init radix__early_init_mmu(void)",
          "328: {",
          "329:  unsigned long lpcr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "327: static void radix_init_iamr(void)",
          "328: {",
          "329:  unsigned long iamr;",
          "334:  if (cpu_has_feature(CPU_FTR_POWER9_DD1))",
          "335:   iamr = 0;",
          "336:  else",
          "337:   iamr = (1ul << 62);",
          "344:  mtspr(SPRN_IAMR, iamr);",
          "345: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "386:  memblock_set_current_limit(MEMBLOCK_ALLOC_ANYWHERE);",
          "388:  radix_init_pgtable();",
          "389: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "408:  radix_init_iamr();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "402:         __pa(partition_tb) | (PATB_SIZE_SHIFT - 12));",
          "403:   radix_init_amor();",
          "404:  }",
          "405: }",
          "407: void radix__mmu_cleanup_all(void)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "426:  radix_init_iamr();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f5527fffff3f002b0a6b376163613b82f69de073",
      "candidate_info": {
        "commit_hash": "f5527fffff3f002b0a6b376163613b82f69de073",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/f5527fffff3f002b0a6b376163613b82f69de073",
        "files": [
          "lib/mpi/mpi-pow.c"
        ],
        "message": "mpi: Fix NULL ptr dereference in mpi_powm() [ver #3]\n\nThis fixes CVE-2016-8650.\n\nIf mpi_powm() is given a zero exponent, it wants to immediately return\neither 1 or 0, depending on the modulus.  However, if the result was\ninitalised with zero limb space, no limbs space is allocated and a\nNULL-pointer exception ensues.\n\nFix this by allocating a minimal amount of limb space for the result when\nthe 0-exponent case when the result is 1 and not touching the limb space\nwhen the result is 0.\n\nThis affects the use of RSA keys and X.509 certificates that carry them.\n\nBUG: unable to handle kernel NULL pointer dereference at           (null)\nIP: [<ffffffff8138ce5d>] mpi_powm+0x32/0x7e6\nPGD 0\nOops: 0002 [#1] SMP\nModules linked in:\nCPU: 3 PID: 3014 Comm: keyctl Not tainted 4.9.0-rc6-fscache+ #278\nHardware name: ASUS All Series/H97-PLUS, BIOS 2306 10/09/2014\ntask: ffff8804011944c0 task.stack: ffff880401294000\nRIP: 0010:[<ffffffff8138ce5d>]  [<ffffffff8138ce5d>] mpi_powm+0x32/0x7e6\nRSP: 0018:ffff880401297ad8  EFLAGS: 00010212\nRAX: 0000000000000000 RBX: ffff88040868bec0 RCX: ffff88040868bba0\nRDX: ffff88040868b260 RSI: ffff88040868bec0 RDI: ffff88040868bee0\nRBP: ffff880401297ba8 R08: 0000000000000000 R09: 0000000000000000\nR10: 0000000000000047 R11: ffffffff8183b210 R12: 0000000000000000\nR13: ffff8804087c7600 R14: 000000000000001f R15: ffff880401297c50\nFS:  00007f7a7918c700(0000) GS:ffff88041fb80000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 0000000000000000 CR3: 0000000401250000 CR4: 00000000001406e0\nStack:\n ffff88040868bec0 0000000000000020 ffff880401297b00 ffffffff81376cd4\n 0000000000000100 ffff880401297b10 ffffffff81376d12 ffff880401297b30\n ffffffff81376f37 0000000000000100 0000000000000000 ffff880401297ba8\nCall Trace:\n [<ffffffff81376cd4>] ? __sg_page_iter_next+0x43/0x66\n [<ffffffff81376d12>] ? sg_miter_get_next_page+0x1b/0x5d\n [<ffffffff81376f37>] ? sg_miter_next+0x17/0xbd\n [<ffffffff8138ba3a>] ? mpi_read_raw_from_sgl+0xf2/0x146\n [<ffffffff8132a95c>] rsa_verify+0x9d/0xee\n [<ffffffff8132acca>] ? pkcs1pad_sg_set_buf+0x2e/0xbb\n [<ffffffff8132af40>] pkcs1pad_verify+0xc0/0xe1\n [<ffffffff8133cb5e>] public_key_verify_signature+0x1b0/0x228\n [<ffffffff8133d974>] x509_check_for_self_signed+0xa1/0xc4\n [<ffffffff8133cdde>] x509_cert_parse+0x167/0x1a1\n [<ffffffff8133d609>] x509_key_preparse+0x21/0x1a1\n [<ffffffff8133c3d7>] asymmetric_key_preparse+0x34/0x61\n [<ffffffff812fc9f3>] key_create_or_update+0x145/0x399\n [<ffffffff812fe227>] SyS_add_key+0x154/0x19e\n [<ffffffff81001c2b>] do_syscall_64+0x80/0x191\n [<ffffffff816825e4>] entry_SYSCALL64_slow_path+0x25/0x25\nCode: 56 41 55 41 54 53 48 81 ec a8 00 00 00 44 8b 71 04 8b 42 04 4c 8b 67 18 45 85 f6 89 45 80 0f 84 b4 06 00 00 85 c0 75 2f 41 ff ce <49> c7 04 24 01 00 00 00 b0 01 75 0b 48 8b 41 18 48 83 38 01 0f\nRIP  [<ffffffff8138ce5d>] mpi_powm+0x32/0x7e6\n RSP <ffff880401297ad8>\nCR2: 0000000000000000\n---[ end trace d82015255d4a5d8d ]---\n\nBasically, this is a backport of a libgcrypt patch:\n\n\thttp://git.gnupg.org/cgi-bin/gitweb.cgi?p=libgcrypt.git;a=patch;h=6e1adb05d290aeeb1c230c763970695f4a538526\n\nFixes: cdec9cb5167a (\"crypto: GnuPG based MPI lib - source files (part 1)\")\nSigned-off-by: Andrey Ryabinin <aryabinin@virtuozzo.com>\nSigned-off-by: David Howells <dhowells@redhat.com>\ncc: Dmitry Kasatkin <dmitry.kasatkin@gmail.com>\ncc: linux-ima-devel@lists.sourceforge.net\ncc: stable@vger.kernel.org\nSigned-off-by: James Morris <james.l.morris@oracle.com>",
        "before_after_code_files": [
          "lib/mpi/mpi-pow.c||lib/mpi/mpi-pow.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/mpi/mpi-pow.c||lib/mpi/mpi-pow.c": [
          "File: lib/mpi/mpi-pow.c -> lib/mpi/mpi-pow.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:  if (!esize) {",
          "68:   res->nlimbs = (msize == 1 && mod->d[0] == 1) ? 0 : 1;",
          "69:   res->sign = 0;",
          "70:   goto leave;",
          "71:  }",
          "",
          "[Removed Lines]",
          "67:   rp[0] = 1;",
          "",
          "[Added Lines]",
          "68:   if (res->nlimbs) {",
          "69:    if (mpi_resize(res, 1) < 0)",
          "70:     goto enomem;",
          "71:    rp = res->d;",
          "72:    rp[0] = 1;",
          "73:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2319f847a8910cff1d46c9b66aa1dd7cc3e836a9",
      "candidate_info": {
        "commit_hash": "2319f847a8910cff1d46c9b66aa1dd7cc3e836a9",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/2319f847a8910cff1d46c9b66aa1dd7cc3e836a9",
        "files": [
          "drivers/scsi/lpfc/lpfc_sli.c"
        ],
        "message": "scsi: lpfc: fix oops/BUG in lpfc_sli_ringtxcmpl_put()\n\nThe BUG_ON() recently introduced in lpfc_sli_ringtxcmpl_put() is hit in\nthe lpfc_els_abort() > lpfc_sli_issue_abort_iotag() >\nlpfc_sli_abort_iotag_issue() function path [similar names], due to\n'piocb->vport == NULL':\n\n\tBUG_ON(!piocb || !piocb->vport);\n\nThis happens because lpfc_sli_abort_iotag_issue() doesn't set the\n'abtsiocbp->vport' pointer -- but this is not the problem.\n\nPreviously, lpfc_sli_ringtxcmpl_put() accessed 'piocb->vport' only if\n'piocb->iocb.ulpCommand' is neither CMD_ABORT_XRI_CN nor\nCMD_CLOSE_XRI_CN, which are the only possible values for\nlpfc_sli_abort_iotag_issue():\n\n    lpfc_sli_ringtxcmpl_put():\n\n        if ((unlikely(pring->ringno == LPFC_ELS_RING)) &&\n           (piocb->iocb.ulpCommand != CMD_ABORT_XRI_CN) &&\n           (piocb->iocb.ulpCommand != CMD_CLOSE_XRI_CN) &&\n            (!(piocb->vport->load_flag & FC_UNLOADING)))\n\n    lpfc_sli_abort_iotag_issue():\n\n        if (phba->link_state >= LPFC_LINK_UP)\n                iabt->ulpCommand = CMD_ABORT_XRI_CN;\n        else\n                iabt->ulpCommand = CMD_CLOSE_XRI_CN;\n\nSo, this function path would not have hit this possible NULL pointer\ndereference before.\n\nIn order to fix this regression, move the second part of the BUG_ON()\ncheck prior to the pointer dereference that it does check for.\n\nFor reference, this is the stack trace observed. The problem happened\nbecause an unsolicited event was received - a PLOGI was received after\nour PLOGI was issued but not yet complete, so the discovery state\nmachine goes on to sw-abort our PLOGI.\n\n    kernel BUG at drivers/scsi/lpfc/lpfc_sli.c:1326!\n    Oops: Exception in kernel mode, sig: 5 [#1]\n    <...>\n    NIP [...] lpfc_sli_ringtxcmpl_put+0x1c/0xf0 [lpfc]\n    LR  [...] __lpfc_sli_issue_iocb_s4+0x188/0x200 [lpfc]\n    Call Trace:\n    [...] [...] __lpfc_sli_issue_iocb_s4+0xb0/0x200 [lpfc] (unreliable)\n    [...] [...] lpfc_sli_issue_abort_iotag+0x2b4/0x350 [lpfc]\n    [...] [...] lpfc_els_abort+0x1a8/0x4a0 [lpfc]\n    [...] [...] lpfc_rcv_plogi+0x6d4/0x700 [lpfc]\n    [...] [...] lpfc_rcv_plogi_plogi_issue+0xd8/0x1d0 [lpfc]\n    [...] [...] lpfc_disc_state_machine+0xc0/0x2b0 [lpfc]\n    [...] [...] lpfc_els_unsol_buffer+0xcc0/0x26c0 [lpfc]\n    [...] [...] lpfc_els_unsol_event+0xa8/0x220 [lpfc]\n    [...] [...] lpfc_complete_unsol_iocb+0xb8/0x138 [lpfc]\n    [...] [...] lpfc_sli4_handle_received_buffer+0x6a0/0xec0 [lpfc]\n    [...] [...] lpfc_sli_handle_slow_ring_event_s4+0x1c4/0x240 [lpfc]\n    [...] [...] lpfc_sli_handle_slow_ring_event+0x24/0x40 [lpfc]\n    [...] [...] lpfc_do_work+0xd88/0x1970 [lpfc]\n    [...] [...] kthread+0x108/0x130\n    [...] [...] ret_from_kernel_thread+0x5c/0xbc\n    <...>\n\nCc: stable@vger.kernel.org # v4.8\nFixes: 22466da5b4b7 (\"lpfc: Fix possible NULL pointer dereference\")\nReported-by: Harsha Thyagaraja <hathyaga@in.ibm.com>\nSigned-off-by: Mauricio Faria de Oliveira <mauricfo@linux.vnet.ibm.com>\nReviewed-by: Johannes Thumshirn <jthumshirn@suse.de>\nSigned-off-by: Martin K. Petersen <martin.petersen@oracle.com>",
        "before_after_code_files": [
          "drivers/scsi/lpfc/lpfc_sli.c||drivers/scsi/lpfc/lpfc_sli.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/scsi/lpfc/lpfc_sli.c||drivers/scsi/lpfc/lpfc_sli.c": [
          "File: drivers/scsi/lpfc/lpfc_sli.c -> drivers/scsi/lpfc/lpfc_sli.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1323: {",
          "1324:  lockdep_assert_held(&phba->hbalock);",
          "1328:  list_add_tail(&piocb->list, &pring->txcmplq);",
          "1329:  piocb->iocb_flag |= LPFC_IO_ON_TXCMPLQ;",
          "1331:  if ((unlikely(pring->ringno == LPFC_ELS_RING)) &&",
          "1332:     (piocb->iocb.ulpCommand != CMD_ABORT_XRI_CN) &&",
          "1339:  return 0;",
          "1340: }",
          "",
          "[Removed Lines]",
          "1326:  BUG_ON(!piocb || !piocb->vport);",
          "1333:     (piocb->iocb.ulpCommand != CMD_CLOSE_XRI_CN) &&",
          "1334:      (!(piocb->vport->load_flag & FC_UNLOADING)))",
          "1335:   mod_timer(&piocb->vport->els_tmofunc,",
          "1336:      jiffies +",
          "1337:      msecs_to_jiffies(1000 * (phba->fc_ratov << 1)));",
          "",
          "[Added Lines]",
          "1326:  BUG_ON(!piocb);",
          "1333:     (piocb->iocb.ulpCommand != CMD_CLOSE_XRI_CN)) {",
          "1334:   BUG_ON(!piocb->vport);",
          "1335:   if (!(piocb->vport->load_flag & FC_UNLOADING))",
          "1336:    mod_timer(&piocb->vport->els_tmofunc,",
          "1337:       jiffies +",
          "1338:       msecs_to_jiffies(1000 * (phba->fc_ratov << 1)));",
          "1339:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}