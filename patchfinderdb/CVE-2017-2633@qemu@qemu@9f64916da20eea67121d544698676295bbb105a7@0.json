{
  "cve_id": "CVE-2017-2633",
  "cve_desc": "An out-of-bounds memory access issue was found in Quick Emulator (QEMU) before 1.7.2 in the VNC display driver. This flaw could occur while refreshing the VNC display surface area in the 'vnc_refresh_server_surface'. A user inside a guest could use this flaw to crash the QEMU process.",
  "repo": "qemu/qemu",
  "patch_hash": "9f64916da20eea67121d544698676295bbb105a7",
  "patch_info": {
    "commit_hash": "9f64916da20eea67121d544698676295bbb105a7",
    "repo": "qemu/qemu",
    "commit_url": "https://github.com/qemu/qemu/commit/9f64916da20eea67121d544698676295bbb105a7",
    "files": [
      "ui/vnc-enc-hextile-template.h",
      "ui/vnc-enc-hextile.c",
      "ui/vnc-enc-tight.c",
      "ui/vnc-enc-zrle.c",
      "ui/vnc-jobs.c",
      "ui/vnc.c",
      "ui/vnc.h"
    ],
    "message": "pixman/vnc: use pixman images in vnc.\n\nThe vnc code uses *three* DisplaySurfaces:\n\nFirst is the surface of the actual QemuConsole, usually the guest\nscreen, but could also be a text console (monitor/serial reachable via\nCtrl-Alt-<nr> keys).  This is left as-is.\n\nSecond is the current server's view of the screen content.  The vnc code\nuses this to figure which parts of the guest screen did _really_ change\nto reduce the amount of updates sent to the vnc clients.  It is also\nused as data source when sending out the updates to the clients.  This\nsurface gets replaced by a pixman image.  The format changes too,\ninstead of using the guest screen format we'll use fixed 32bit rgb\nframebuffer and convert the pixels on the fly when comparing and\nupdating the server framebuffer.\n\nThird surface carries the format expected by the vnc client.  That isn't\nused to store image data.  This surface is switched to PixelFormat and a\nboolean for bigendian byte order.\n\nSigned-off-by: Gerd Hoffmann <kraxel@redhat.com>",
    "before_after_code_files": [
      "ui/vnc-enc-hextile-template.h||ui/vnc-enc-hextile-template.h",
      "ui/vnc-enc-hextile.c||ui/vnc-enc-hextile.c",
      "ui/vnc-enc-tight.c||ui/vnc-enc-tight.c",
      "ui/vnc-enc-zrle.c||ui/vnc-enc-zrle.c",
      "ui/vnc-jobs.c||ui/vnc-jobs.c",
      "ui/vnc.c||ui/vnc.c",
      "ui/vnc.h||ui/vnc.h"
    ]
  },
  "patch_diff": {
    "ui/vnc-enc-hextile-template.h||ui/vnc-enc-hextile-template.h": [
      "File: ui/vnc-enc-hextile-template.h -> ui/vnc-enc-hextile-template.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "14:                                              int *has_bg, int *has_fg)",
      "15: {",
      "16:     VncDisplay *vd = vs->vd;",
      "18:     pixel_t *irow = (pixel_t *)row;",
      "19:     int j, i;",
      "20:     pixel_t *last_bg = (pixel_t *)last_bg_;",
      "",
      "[Removed Lines]",
      "17:     uint8_t *row = vd->server->data + y * ds_get_linesize(vs->ds) + x * ds_get_bytes_per_pixel(vs->ds);",
      "",
      "[Added Lines]",
      "17:     uint8_t *row = vnc_server_fb_ptr(vd, x, y);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "25:     int bg_count = 0;",
      "26:     int fg_count = 0;",
      "27:     int flags = 0;",
      "29:     int n_data = 0;",
      "30:     int n_subtiles = 0;",
      "",
      "[Removed Lines]",
      "28:     uint8_t data[(vs->clientds.pf.bytes_per_pixel + 2) * 16 * 16];",
      "",
      "[Added Lines]",
      "28:     uint8_t data[(vs->client_pf.bytes_per_pixel + 2) * 16 * 16];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "58:  }",
      "59:  if (n_colors > 2)",
      "60:      break;",
      "62:     }",
      "64:     if (n_colors > 1 && fg_count > bg_count) {",
      "",
      "[Removed Lines]",
      "61:  irow += ds_get_linesize(vs->ds) / sizeof(pixel_t);",
      "",
      "[Added Lines]",
      "61:  irow += vnc_server_fb_stride(vd) / sizeof(pixel_t);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "106:   n_data += 2;",
      "107:   n_subtiles++;",
      "108:      }",
      "110:  }",
      "111:  break;",
      "112:     case 3:",
      "",
      "[Removed Lines]",
      "109:      irow += ds_get_linesize(vs->ds) / sizeof(pixel_t);",
      "",
      "[Added Lines]",
      "109:      irow += vnc_server_fb_stride(vd) / sizeof(pixel_t);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "133:       has_color = 0;",
      "134: #ifdef GENERIC",
      "135:                     vnc_convert_pixel(vs, data + n_data, color);",
      "137: #else",
      "138:       memcpy(data + n_data, &color, sizeof(color));",
      "139:                     n_data += sizeof(pixel_t);",
      "",
      "[Removed Lines]",
      "136:                     n_data += vs->clientds.pf.bytes_per_pixel;",
      "",
      "[Added Lines]",
      "136:                     n_data += vs->client_pf.bytes_per_pixel;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "153:      if (has_color) {",
      "154: #ifdef GENERIC",
      "155:                 vnc_convert_pixel(vs, data + n_data, color);",
      "157: #else",
      "158:                 memcpy(data + n_data, &color, sizeof(color));",
      "159:                 n_data += sizeof(pixel_t);",
      "",
      "[Removed Lines]",
      "156:                 n_data += vs->clientds.pf.bytes_per_pixel;",
      "",
      "[Added Lines]",
      "156:                 n_data += vs->client_pf.bytes_per_pixel;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "162:   n_data += 2;",
      "163:   n_subtiles++;",
      "164:      }",
      "166:  }",
      "",
      "[Removed Lines]",
      "165:      irow += ds_get_linesize(vs->ds) / sizeof(pixel_t);",
      "",
      "[Added Lines]",
      "165:      irow += vnc_server_fb_stride(vd) / sizeof(pixel_t);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "190:     vnc_write_u8(vs, flags);",
      "191:     if (n_colors < 4) {",
      "192:  if (flags & 0x02)",
      "194:  if (flags & 0x04)",
      "196:  if (n_subtiles) {",
      "197:      vnc_write_u8(vs, n_subtiles);",
      "198:      vnc_write(vs, data, n_data);",
      "199:  }",
      "200:     } else {",
      "201:  for (j = 0; j < h; j++) {",
      "205:  }",
      "206:     }",
      "207: }",
      "",
      "[Removed Lines]",
      "193:      vs->write_pixels(vs, &vd->server->pf, last_bg, sizeof(pixel_t));",
      "195:      vs->write_pixels(vs, &vd->server->pf, last_fg, sizeof(pixel_t));",
      "202:      vs->write_pixels(vs, &vd->server->pf, row,",
      "203:                              w * ds_get_bytes_per_pixel(vs->ds));",
      "204:      row += ds_get_linesize(vs->ds);",
      "",
      "[Added Lines]",
      "193:      vs->write_pixels(vs, last_bg, sizeof(pixel_t));",
      "195:      vs->write_pixels(vs, last_fg, sizeof(pixel_t));",
      "202:      vs->write_pixels(vs, row, w * 4);",
      "203:      row += vnc_server_fb_stride(vd);",
      "",
      "---------------"
    ],
    "ui/vnc-enc-hextile.c||ui/vnc-enc-hextile.c": [
      "File: ui/vnc-enc-hextile.c -> ui/vnc-enc-hextile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "68:     int i, j;",
      "69:     int has_fg, has_bg;",
      "70:     uint8_t *last_fg, *last_bg;",
      "75:     has_fg = has_bg = 0;",
      "76:     for (j = y; j < (y + h); j += 16) {",
      "77:         for (i = x; i < (x + w); i += 16) {",
      "",
      "[Removed Lines]",
      "71:     VncDisplay *vd = vs->vd;",
      "73:     last_fg = (uint8_t *) g_malloc(vd->server->pf.bytes_per_pixel);",
      "74:     last_bg = (uint8_t *) g_malloc(vd->server->pf.bytes_per_pixel);",
      "",
      "[Added Lines]",
      "72:     last_fg = (uint8_t *) g_malloc(VNC_SERVER_FB_BYTES);",
      "73:     last_bg = (uint8_t *) g_malloc(VNC_SERVER_FB_BYTES);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "89: void vnc_hextile_set_pixel_conversion(VncState *vs, int generic)",
      "90: {",
      "91:     if (!generic) {",
      "102:         }",
      "103:     } else {",
      "114:         }",
      "115:     }",
      "116: }",
      "",
      "[Removed Lines]",
      "92:         switch (vs->ds->surface->pf.bits_per_pixel) {",
      "93:             case 8:",
      "94:                 vs->hextile.send_tile = send_hextile_tile_8;",
      "95:                 break;",
      "96:             case 16:",
      "97:                 vs->hextile.send_tile = send_hextile_tile_16;",
      "98:                 break;",
      "99:             case 32:",
      "100:                 vs->hextile.send_tile = send_hextile_tile_32;",
      "101:                 break;",
      "104:         switch (vs->ds->surface->pf.bits_per_pixel) {",
      "105:             case 8:",
      "106:                 vs->hextile.send_tile = send_hextile_tile_generic_8;",
      "107:                 break;",
      "108:             case 16:",
      "109:                 vs->hextile.send_tile = send_hextile_tile_generic_16;",
      "110:                 break;",
      "111:             case 32:",
      "112:                 vs->hextile.send_tile = send_hextile_tile_generic_32;",
      "113:                 break;",
      "",
      "[Added Lines]",
      "91:         switch (VNC_SERVER_FB_BITS) {",
      "92:         case 8:",
      "93:             vs->hextile.send_tile = send_hextile_tile_8;",
      "94:             break;",
      "95:         case 16:",
      "96:             vs->hextile.send_tile = send_hextile_tile_16;",
      "97:             break;",
      "98:         case 32:",
      "99:             vs->hextile.send_tile = send_hextile_tile_32;",
      "100:             break;",
      "103:         switch (VNC_SERVER_FB_BITS) {",
      "104:         case 8:",
      "105:             vs->hextile.send_tile = send_hextile_tile_generic_8;",
      "106:             break;",
      "107:         case 16:",
      "108:             vs->hextile.send_tile = send_hextile_tile_generic_16;",
      "109:             break;",
      "110:         case 32:",
      "111:             vs->hextile.send_tile = send_hextile_tile_generic_32;",
      "112:             break;",
      "",
      "---------------"
    ],
    "ui/vnc-enc-tight.c||ui/vnc-enc-tight.c": [
      "File: ui/vnc-enc-tight.c -> ui/vnc-enc-tight.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "124:     }",
      "126:     if (ds_get_bytes_per_pixel(vs->ds) == 1 ||",
      "128:         return false;",
      "129:     }",
      "",
      "[Removed Lines]",
      "127:         vs->clientds.pf.bytes_per_pixel == 1) {",
      "",
      "[Added Lines]",
      "127:         vs->client_pf.bytes_per_pixel == 1) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "158:     memset(stats, 0, sizeof (stats));",
      "",
      "[Removed Lines]",
      "156:     off = !!(vs->clientds.flags & QEMU_BIG_ENDIAN_FLAG);",
      "",
      "[Added Lines]",
      "156:     off = vs->client_be;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "216:         unsigned int errors;                                            \\",
      "217:         unsigned char *buf = vs->tight.tight.buffer;                    \\",
      "218:                                                                         \\",
      "221:                                                                         \\",
      "222:                                                                         \\",
      "229:                                                                         \\",
      "230:         memset(stats, 0, sizeof(stats));                                \\",
      "231:                                                                         \\",
      "",
      "[Removed Lines]",
      "219:         endian = ((vs->clientds.flags & QEMU_BIG_ENDIAN_FLAG) !=        \\",
      "220:                   (vs->ds->surface->flags & QEMU_BIG_ENDIAN_FLAG));     \\",
      "223:         max[0] = vs->clientds.pf.rmax;                                  \\",
      "224:         max[1] = vs->clientds.pf.gmax;                                  \\",
      "225:         max[2] = vs->clientds.pf.bmax;                                  \\",
      "226:         shift[0] = vs->clientds.pf.rshift;                              \\",
      "227:         shift[1] = vs->clientds.pf.gshift;                              \\",
      "228:         shift[2] = vs->clientds.pf.bshift;                              \\",
      "",
      "[Added Lines]",
      "219:         endian = 0; /* FIXME: ((vs->clientds.flags & QEMU_BIG_ENDIAN_FLAG) != \\",
      "220:                       (vs->ds->surface->flags & QEMU_BIG_ENDIAN_FLAG)); */ \\",
      "223:         max[0] = vs->client_pf.rmax;                                  \\",
      "224:         max[1] = vs->client_pf.gmax;                                  \\",
      "225:         max[2] = vs->client_pf.bmax;                                  \\",
      "226:         shift[0] = vs->client_pf.rshift;                              \\",
      "227:         shift[1] = vs->client_pf.gshift;                              \\",
      "228:         shift[2] = vs->client_pf.bshift;                              \\",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "302:     }",
      "304:     if (ds_get_bytes_per_pixel(vs->ds) == 1 ||",
      "306:         w < VNC_TIGHT_DETECT_MIN_WIDTH || h < VNC_TIGHT_DETECT_MIN_HEIGHT) {",
      "307:         return 0;",
      "308:     }",
      "",
      "[Removed Lines]",
      "305:         vs->clientds.pf.bytes_per_pixel == 1 ||",
      "",
      "[Added Lines]",
      "305:         vs->client_pf.bytes_per_pixel == 1 ||",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "317:         }",
      "318:     }",
      "321:         if (vs->tight.pixel24) {",
      "322:             errors = tight_detect_smooth_image24(vs, w, h);",
      "323:             if (vs->tight.quality != (uint8_t)-1) {",
      "",
      "[Removed Lines]",
      "320:     if (vs->clientds.pf.bytes_per_pixel == 4) {",
      "",
      "[Added Lines]",
      "320:     if (vs->client_pf.bytes_per_pixel == 4) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "430:         max = 256;",
      "431:     }",
      "434:     case 4:",
      "435:         return tight_fill_palette32(vs, x, y, max, count, bg, fg, palette);",
      "436:     case 2:",
      "",
      "[Removed Lines]",
      "433:     switch(vs->clientds.pf.bytes_per_pixel) {",
      "",
      "[Added Lines]",
      "433:     switch (vs->client_pf.bytes_per_pixel) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "557:     buf32 = (uint32_t *)buf;",
      "558:     memset(vs->tight.gradient.buffer, 0, w * 3 * sizeof(int));",
      "565:     } else {",
      "569:     }",
      "571:     for (y = 0; y < h; y++) {",
      "",
      "[Removed Lines]",
      "560:     if ((vs->clientds.flags & QEMU_BIG_ENDIAN_FLAG) ==",
      "561:         (vs->ds->surface->flags & QEMU_BIG_ENDIAN_FLAG)) {",
      "562:         shift[0] = vs->clientds.pf.rshift;",
      "563:         shift[1] = vs->clientds.pf.gshift;",
      "564:         shift[2] = vs->clientds.pf.bshift;",
      "566:         shift[0] = 24 - vs->clientds.pf.rshift;",
      "567:         shift[1] = 24 - vs->clientds.pf.gshift;",
      "568:         shift[2] = 24 - vs->clientds.pf.bshift;",
      "",
      "[Added Lines]",
      "560:     if (1 /* FIXME: (vs->clientds.flags & QEMU_BIG_ENDIAN_FLAG) ==",
      "561:              (vs->ds->surface->flags & QEMU_BIG_ENDIAN_FLAG) */) {",
      "562:         shift[0] = vs->client_pf.rshift;",
      "563:         shift[1] = vs->client_pf.gshift;",
      "564:         shift[2] = vs->client_pf.bshift;",
      "566:         shift[0] = 24 - vs->client_pf.rshift;",
      "567:         shift[1] = 24 - vs->client_pf.gshift;",
      "568:         shift[2] = 24 - vs->client_pf.bshift;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "615:                                                                         \\",
      "616:         memset (vs->tight.gradient.buffer, 0, w * 3 * sizeof(int));     \\",
      "617:                                                                         \\",
      "620:                                                                         \\",
      "627:                                                                         \\",
      "628:         for (y = 0; y < h; y++) {                                       \\",
      "629:             for (c = 0; c < 3; c++) {                                   \\",
      "",
      "[Removed Lines]",
      "618:         endian = ((vs->clientds.flags & QEMU_BIG_ENDIAN_FLAG) !=        \\",
      "619:                   (vs->ds->surface->flags & QEMU_BIG_ENDIAN_FLAG));     \\",
      "621:         max[0] = vs->clientds.pf.rmax;                                  \\",
      "622:         max[1] = vs->clientds.pf.gmax;                                  \\",
      "623:         max[2] = vs->clientds.pf.bmax;                                  \\",
      "624:         shift[0] = vs->clientds.pf.rshift;                              \\",
      "625:         shift[1] = vs->clientds.pf.gshift;                              \\",
      "626:         shift[2] = vs->clientds.pf.bshift;                              \\",
      "",
      "[Added Lines]",
      "618:         endian = 0; /* FIXME: ((vs->clientds.flags & QEMU_BIG_ENDIAN_FLAG) != \\",
      "619:                        (vs->ds->surface->flags & QEMU_BIG_ENDIAN_FLAG)); */ \\",
      "621:         max[0] = vs->client_pf.rmax;                                    \\",
      "622:         max[1] = vs->client_pf.gmax;                                    \\",
      "623:         max[2] = vs->client_pf.bmax;                                    \\",
      "624:         shift[0] = vs->client_pf.rshift;                                \\",
      "625:         shift[1] = vs->client_pf.gshift;                                \\",
      "626:         shift[2] = vs->client_pf.bshift;                                \\",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "682:         uint##bpp##_t c;                                                \\",
      "683:         int dx, dy;                                                     \\",
      "684:                                                                         \\",
      "688:                                                                         \\",
      "689:         c = *fbptr;                                                     \\",
      "690:         if (samecolor && (uint32_t)c != *color) {                       \\",
      "",
      "[Removed Lines]",
      "685:         fbptr = (uint##bpp##_t *)                                       \\",
      "686:             (vd->server->data + y * ds_get_linesize(vs->ds) +           \\",
      "687:              x * ds_get_bytes_per_pixel(vs->ds));                       \\",
      "",
      "[Added Lines]",
      "685:         fbptr = vnc_server_fb_ptr(vd, x, y);                            \\",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "698:                 }                                                       \\",
      "699:             }                                                           \\",
      "700:             fbptr = (uint##bpp##_t *)                                   \\",
      "702:         }                                                               \\",
      "703:                                                                         \\",
      "",
      "[Removed Lines]",
      "701:                 ((uint8_t *)fbptr + ds_get_linesize(vs->ds));           \\",
      "",
      "[Added Lines]",
      "699:                 ((uint8_t *)fbptr + vnc_server_fb_stride(vd));          \\",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "712: static bool check_solid_tile(VncState *vs, int x, int y, int w, int h,",
      "713:                              uint32_t* color, bool samecolor)",
      "714: {",
      "718:     case 4:",
      "719:         return check_solid_tile32(vs, x, y, w, h, color, samecolor);",
      "720:     case 2:",
      "",
      "[Removed Lines]",
      "715:     VncDisplay *vd = vs->vd;",
      "717:     switch(vd->server->pf.bytes_per_pixel) {",
      "",
      "[Added Lines]",
      "713:     switch (VNC_SERVER_FB_BYTES) {",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "907:     buf32 = (uint32_t *)buf;",
      "914:     } else {",
      "918:     }",
      "920:     if (ret) {",
      "",
      "[Removed Lines]",
      "909:     if ((vs->clientds.flags & QEMU_BIG_ENDIAN_FLAG) ==",
      "910:         (vs->ds->surface->flags & QEMU_BIG_ENDIAN_FLAG)) {",
      "911:         rshift = vs->clientds.pf.rshift;",
      "912:         gshift = vs->clientds.pf.gshift;",
      "913:         bshift = vs->clientds.pf.bshift;",
      "915:         rshift = 24 - vs->clientds.pf.rshift;",
      "916:         gshift = 24 - vs->clientds.pf.gshift;",
      "917:         bshift = 24 - vs->clientds.pf.bshift;",
      "",
      "[Added Lines]",
      "905:     if (1 /* FIXME: (vs->clientds.flags & QEMU_BIG_ENDIAN_FLAG) ==",
      "906:              (vs->ds->surface->flags & QEMU_BIG_ENDIAN_FLAG) */) {",
      "907:         rshift = vs->client_pf.rshift;",
      "908:         gshift = vs->client_pf.gshift;",
      "909:         bshift = vs->client_pf.bshift;",
      "911:         rshift = 24 - vs->client_pf.rshift;",
      "912:         gshift = 24 - vs->client_pf.gshift;",
      "913:         bshift = 24 - vs->client_pf.bshift;",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "946:         tight_pack24(vs, vs->tight.tight.buffer, w * h, &vs->tight.tight.offset);",
      "947:         bytes = 3;",
      "948:     } else {",
      "950:     }",
      "952:     bytes = tight_compress_data(vs, stream, w * h * bytes,",
      "",
      "[Removed Lines]",
      "949:         bytes = vs->clientds.pf.bytes_per_pixel;",
      "",
      "[Added Lines]",
      "945:         bytes = vs->client_pf.bytes_per_pixel;",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "966:         tight_pack24(vs, vs->tight.tight.buffer, 1, &vs->tight.tight.offset);",
      "967:         bytes = 3;",
      "968:     } else {",
      "970:     }",
      "972:     vnc_write(vs, vs->tight.tight.buffer, bytes);",
      "",
      "[Removed Lines]",
      "969:         bytes = vs->clientds.pf.bytes_per_pixel;",
      "",
      "[Added Lines]",
      "965:         bytes = vs->client_pf.bytes_per_pixel;",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "983: #ifdef CONFIG_VNC_PNG",
      "984:     if (tight_can_send_png_rect(vs, w, h)) {",
      "985:         int ret;",
      "987:         VncPalette *palette = palette_new(2, bpp);",
      "989:         palette_put(palette, bg);",
      "",
      "[Removed Lines]",
      "986:         int bpp = vs->clientds.pf.bytes_per_pixel * 8;",
      "",
      "[Added Lines]",
      "982:         int bpp = vs->client_pf.bytes_per_pixel * 8;",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "1000:     vnc_write_u8(vs, VNC_TIGHT_FILTER_PALETTE);",
      "1001:     vnc_write_u8(vs, 1);",
      "1004:     case 4:",
      "1005:     {",
      "1006:         uint32_t buf[2] = {bg, fg};",
      "",
      "[Removed Lines]",
      "1003:     switch(vs->clientds.pf.bytes_per_pixel) {",
      "",
      "[Added Lines]",
      "999:     switch (vs->client_pf.bytes_per_pixel) {",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "1043: {",
      "1044:     struct palette_cb_priv *priv = opaque;",
      "1045:     VncState *vs = priv->vs;",
      "1048:     if (bytes == 4) {",
      "1049:         ((uint32_t*)priv->header)[idx] = color;",
      "",
      "[Removed Lines]",
      "1046:     uint32_t bytes = vs->clientds.pf.bytes_per_pixel;",
      "",
      "[Added Lines]",
      "1042:     uint32_t bytes = vs->client_pf.bytes_per_pixel;",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "1058:     int level = tight_conf[vs->tight.compression].gradient_zlib_level;",
      "1059:     ssize_t bytes;",
      "1062:         return send_full_color_rect(vs, x, y, w, h);",
      "1064:     vnc_write_u8(vs, (stream | VNC_TIGHT_EXPLICIT_FILTER) << 4);",
      "1065:     vnc_write_u8(vs, VNC_TIGHT_FILTER_GRADIENT);",
      "",
      "[Removed Lines]",
      "1061:     if (vs->clientds.pf.bytes_per_pixel == 1)",
      "",
      "[Added Lines]",
      "1057:     if (vs->client_pf.bytes_per_pixel == 1) {",
      "1059:     }",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "1069:     if (vs->tight.pixel24) {",
      "1070:         tight_filter_gradient24(vs, vs->tight.tight.buffer, w, h);",
      "1071:         bytes = 3;",
      "1073:         tight_filter_gradient32(vs, (uint32_t *)vs->tight.tight.buffer, w, h);",
      "1074:         bytes = 4;",
      "1075:     } else {",
      "",
      "[Removed Lines]",
      "1072:     } else if (vs->clientds.pf.bytes_per_pixel == 4) {",
      "",
      "[Added Lines]",
      "1069:     } else if (vs->client_pf.bytes_per_pixel == 4) {",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "1107:     vnc_write_u8(vs, VNC_TIGHT_FILTER_PALETTE);",
      "1108:     vnc_write_u8(vs, colors - 1);",
      "1111:     case 4:",
      "1112:     {",
      "1113:         size_t old_offset, offset;",
      "",
      "[Removed Lines]",
      "1110:     switch(vs->clientds.pf.bytes_per_pixel) {",
      "",
      "[Added Lines]",
      "1107:     switch (vs->client_pf.bytes_per_pixel) {",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "1156:     uint32_t *fbptr;",
      "1157:     uint32_t pix;",
      "1162:     while (count--) {",
      "1163:         pix = *fbptr++;",
      "",
      "[Removed Lines]",
      "1159:     fbptr = (uint32_t *)(vd->server->data + y * ds_get_linesize(vs->ds) +",
      "1160:                          x * ds_get_bytes_per_pixel(vs->ds));",
      "",
      "[Added Lines]",
      "1156:     fbptr = vnc_server_fb_ptr(vd, x, y);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "1178:         uint##bpp##_t pix;                                              \\",
      "1179:         int r, g, b;                                                    \\",
      "1180:                                                                         \\",
      "1184:                                                                         \\",
      "1185:         while (count--) {                                               \\",
      "1186:             pix = *fbptr++;                                             \\",
      "",
      "[Removed Lines]",
      "1181:         fbptr = (uint##bpp##_t *)                                       \\",
      "1182:             (vd->server->data + y * ds_get_linesize(vs->ds) +           \\",
      "1183:              x * ds_get_bytes_per_pixel(vs->ds));                       \\",
      "",
      "[Added Lines]",
      "1177:         fbptr = vnc_server_fb_ptr(vd, x, y);                            \\",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "1207: static void rgb_prepare_row(VncState *vs, uint8_t *dst, int x, int y,",
      "1208:                             int count)",
      "1209: {",
      "1214:             rgb_prepare_row24(vs, dst, x, y, count);",
      "1215:         } else {",
      "1216:             rgb_prepare_row32(vs, dst, x, y, count);",
      "",
      "[Removed Lines]",
      "1210:     if (ds_get_bytes_per_pixel(vs->ds) == 4) {",
      "1211:         if (vs->ds->surface->pf.rmax == 0xFF &&",
      "1212:             vs->ds->surface->pf.gmax == 0xFF &&",
      "1213:             vs->ds->surface->pf.bmax == 0xFF) {",
      "",
      "[Added Lines]",
      "1204:     if (VNC_SERVER_FB_BYTES == 4) {",
      "1205:         if (1) {",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "1327:     if (vs->tight.pixel24)",
      "1328:     {",
      "1332:     }",
      "1333:     else",
      "1334:     {",
      "1335:         int red, green, blue;",
      "1346:     }",
      "1347: }",
      "",
      "[Removed Lines]",
      "1329:         color->red = (pix >> vs->clientds.pf.rshift) & vs->clientds.pf.rmax;",
      "1330:         color->green = (pix >> vs->clientds.pf.gshift) & vs->clientds.pf.gmax;",
      "1331:         color->blue = (pix >> vs->clientds.pf.bshift) & vs->clientds.pf.bmax;",
      "1337:         red = (pix >> vs->clientds.pf.rshift) & vs->clientds.pf.rmax;",
      "1338:         green = (pix >> vs->clientds.pf.gshift) & vs->clientds.pf.gmax;",
      "1339:         blue = (pix >> vs->clientds.pf.bshift) & vs->clientds.pf.bmax;",
      "1340:         color->red = ((red * 255 + vs->clientds.pf.rmax / 2) /",
      "1341:                       vs->clientds.pf.rmax);",
      "1342:         color->green = ((green * 255 + vs->clientds.pf.gmax / 2) /",
      "1343:                         vs->clientds.pf.gmax);",
      "1344:         color->blue = ((blue * 255 + vs->clientds.pf.bmax / 2) /",
      "1345:                        vs->clientds.pf.bmax);",
      "",
      "[Added Lines]",
      "1321:         color->red = (pix >> vs->client_pf.rshift) & vs->client_pf.rmax;",
      "1322:         color->green = (pix >> vs->client_pf.gshift) & vs->client_pf.gmax;",
      "1323:         color->blue = (pix >> vs->client_pf.bshift) & vs->client_pf.bmax;",
      "1329:         red = (pix >> vs->client_pf.rshift) & vs->client_pf.rmax;",
      "1330:         green = (pix >> vs->client_pf.gshift) & vs->client_pf.gmax;",
      "1331:         blue = (pix >> vs->client_pf.bshift) & vs->client_pf.bmax;",
      "1332:         color->red = ((red * 255 + vs->client_pf.rmax / 2) /",
      "1333:                       vs->client_pf.rmax);",
      "1334:         color->green = ((green * 255 + vs->client_pf.gmax / 2) /",
      "1335:                         vs->client_pf.gmax);",
      "1336:         color->blue = ((blue * 255 + vs->client_pf.bmax / 2) /",
      "1337:                        vs->client_pf.bmax);",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "1423:         png_set_PLTE(png_ptr, info_ptr, png_palette, palette_size(palette));",
      "1426:             tight_encode_indexed_rect32(vs->tight.tight.buffer, w * h, palette);",
      "1427:         } else {",
      "1428:             tight_encode_indexed_rect16(vs->tight.tight.buffer, w * h, palette);",
      "",
      "[Removed Lines]",
      "1425:         if (vs->clientds.pf.bytes_per_pixel == 4) {",
      "",
      "[Added Lines]",
      "1417:         if (vs->client_pf.bytes_per_pixel == 4) {",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "1713: {",
      "1714:     int max_rows;",
      "1718:         vs->tight.pixel24 = true;",
      "1719:     } else {",
      "1720:         vs->tight.pixel24 = false;",
      "",
      "[Removed Lines]",
      "1716:     if (vs->clientds.pf.bytes_per_pixel == 4 && vs->clientds.pf.rmax == 0xFF &&",
      "1717:         vs->clientds.pf.bmax == 0xFF && vs->clientds.pf.gmax == 0xFF) {",
      "",
      "[Added Lines]",
      "1708:     if (vs->client_pf.bytes_per_pixel == 4 && vs->client_pf.rmax == 0xFF &&",
      "1709:         vs->client_pf.bmax == 0xFF && vs->client_pf.gmax == 0xFF) {",
      "",
      "---------------"
    ],
    "ui/vnc-enc-zrle.c||ui/vnc-enc-zrle.c": [
      "File: ui/vnc-enc-zrle.c -> ui/vnc-enc-zrle.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "255: static int zrle_send_framebuffer_update(VncState *vs, int x, int y,",
      "256:                                         int w, int h)",
      "257: {",
      "259:     size_t bytes;",
      "260:     int zywrle_level;",
      "",
      "[Removed Lines]",
      "258:     bool be = !!(vs->clientds.flags & QEMU_BIG_ENDIAN_FLAG);",
      "",
      "[Added Lines]",
      "258:     bool be = vs->client_be;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "278:     vnc_zrle_start(vs);",
      "281:     case 1:",
      "282:         zrle_encode_8ne(vs, x, y, w, h, zywrle_level);",
      "283:         break;",
      "285:     case 2:",
      "287:             if (be) {",
      "288:                 zrle_encode_16be(vs, x, y, w, h, zywrle_level);",
      "289:             } else {",
      "",
      "[Removed Lines]",
      "280:     switch(vs->clientds.pf.bytes_per_pixel) {",
      "286:         if (vs->clientds.pf.gmax > 0x1F) {",
      "",
      "[Added Lines]",
      "280:     switch (vs->client_pf.bytes_per_pixel) {",
      "286:         if (vs->client_pf.gmax > 0x1F) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "304:         bool fits_in_ms3bytes;",
      "306:         fits_in_ls3bytes =",
      "315:         if ((fits_in_ls3bytes && !be) || (fits_in_ms3bytes && be)) {",
      "316:             if (be) {",
      "",
      "[Removed Lines]",
      "307:             ((vs->clientds.pf.rmax << vs->clientds.pf.rshift) < (1 << 24) &&",
      "308:              (vs->clientds.pf.gmax << vs->clientds.pf.gshift) < (1 << 24) &&",
      "309:              (vs->clientds.pf.bmax << vs->clientds.pf.bshift) < (1 << 24));",
      "311:         fits_in_ms3bytes = (vs->clientds.pf.rshift > 7 &&",
      "312:                             vs->clientds.pf.gshift > 7 &&",
      "313:                             vs->clientds.pf.bshift > 7);",
      "",
      "[Added Lines]",
      "307:             ((vs->client_pf.rmax << vs->client_pf.rshift) < (1 << 24) &&",
      "308:              (vs->client_pf.gmax << vs->client_pf.gshift) < (1 << 24) &&",
      "309:              (vs->client_pf.bmax << vs->client_pf.bshift) < (1 << 24));",
      "311:         fits_in_ms3bytes = (vs->client_pf.rshift > 7 &&",
      "312:                             vs->client_pf.gshift > 7 &&",
      "313:                             vs->client_pf.bshift > 7);",
      "",
      "---------------"
    ],
    "ui/vnc-jobs.c||ui/vnc-jobs.c": [
      "File: ui/vnc-jobs.c -> ui/vnc-jobs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "187:     local->vd = orig->vd;",
      "188:     local->lossy_rect = orig->lossy_rect;",
      "189:     local->write_pixels = orig->write_pixels;",
      "191:     local->tight = orig->tight;",
      "192:     local->zlib = orig->zlib;",
      "193:     local->hextile = orig->hextile;",
      "",
      "[Removed Lines]",
      "190:     local->clientds = orig->clientds;",
      "",
      "[Added Lines]",
      "190:     local->client_pf = orig->client_pf;",
      "191:     local->client_be = orig->client_be;",
      "",
      "---------------"
    ],
    "ui/vnc.c||ui/vnc.c": [
      "File: ui/vnc.c -> ui/vnc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "436:     int i;",
      "437:     VncDisplay *vd = ds->opaque;",
      "438:     struct VncSurface *s = &vd->guest;",
      "440:     h += y;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "439:     int width = ds_get_width(ds);",
      "440:     int height = ds_get_height(ds);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "446:     w += (x % 16);",
      "447:     x -= (x % 16);",
      "454:     for (; y < h; y++)",
      "455:         for (i = 0; i < w; i += 16)",
      "",
      "[Removed Lines]",
      "449:     x = MIN(x, s->ds->width);",
      "450:     y = MIN(y, s->ds->height);",
      "451:     w = MIN(x + w, s->ds->width) - x;",
      "452:     h = MIN(h, s->ds->height);",
      "",
      "[Added Lines]",
      "451:     x = MIN(x, width);",
      "452:     y = MIN(y, height);",
      "453:     w = MIN(x + w, width) - x;",
      "454:     h = MIN(h, height);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "550:     }",
      "551: }",
      "553: static void vnc_dpy_resize(DisplayState *ds)",
      "554: {",
      "555:     VncDisplay *vd = ds->opaque;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "555: int vnc_server_fb_stride(VncDisplay *vd)",
      "556: {",
      "557:     return pixman_image_get_stride(vd->server);",
      "558: }",
      "560: void *vnc_server_fb_ptr(VncDisplay *vd, int x, int y)",
      "561: {",
      "562:     uint8_t *ptr;",
      "564:     ptr  = (uint8_t *)pixman_image_get_data(vd->server);",
      "565:     ptr += y * vnc_server_fb_stride(vd);",
      "566:     ptr += x * VNC_SERVER_FB_BYTES;",
      "567:     return ptr;",
      "568: }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "558:     vnc_abort_display_jobs(vd);",
      "572:     if (ds_get_bytes_per_pixel(ds) != vd->guest.ds->pf.bytes_per_pixel)",
      "573:         console_color_init(ds);",
      "575:     memset(vd->guest.dirty, 0xFF, sizeof(vd->guest.dirty));",
      "577:     QTAILQ_FOREACH(vs, &vd->clients, next) {",
      "",
      "[Removed Lines]",
      "561:     if (!vd->server)",
      "562:         vd->server = g_malloc0(sizeof(*vd->server));",
      "563:     if (vd->server->data)",
      "564:         g_free(vd->server->data);",
      "566:     vd->server->data = g_malloc0(vd->server->linesize *",
      "567:                                     vd->server->height);",
      "570:     if (!vd->guest.ds)",
      "571:         vd->guest.ds = g_malloc0(sizeof(*vd->guest.ds));",
      "",
      "[Added Lines]",
      "578:     qemu_pixman_image_unref(vd->server);",
      "579:     vd->server = pixman_image_create_bits(VNC_SERVER_FB_FORMAT,",
      "580:                                           ds_get_width(ds),",
      "581:                                           ds_get_height(ds),",
      "582:                                           NULL, 0);",
      "588: #endif",
      "589:     qemu_pixman_image_unref(vd->guest.fb);",
      "590:     vd->guest.fb = pixman_image_ref(ds->surface->image);",
      "591:     vd->guest.format = ds->surface->format;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "585: }",
      "589:                                   void *pixels, int size)",
      "590: {",
      "591:     vnc_write(vs, pixels, size);",
      "",
      "[Removed Lines]",
      "588: static void vnc_write_pixels_copy(VncState *vs, struct PixelFormat *pf,",
      "",
      "[Added Lines]",
      "605: static void vnc_write_pixels_copy(VncState *vs,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "595: void vnc_convert_pixel(VncState *vs, uint8_t *buf, uint32_t v)",
      "596: {",
      "597:     uint8_t r, g, b;",
      "610:     case 1:",
      "611:         buf[0] = v;",
      "612:         break;",
      "613:     case 2:",
      "615:             buf[0] = v >> 8;",
      "616:             buf[1] = v;",
      "617:         } else {",
      "",
      "[Removed Lines]",
      "598:     VncDisplay *vd = vs->vd;",
      "600:     r = ((((v & vd->server->pf.rmask) >> vd->server->pf.rshift) << vs->clientds.pf.rbits) >>",
      "601:         vd->server->pf.rbits);",
      "602:     g = ((((v & vd->server->pf.gmask) >> vd->server->pf.gshift) << vs->clientds.pf.gbits) >>",
      "603:         vd->server->pf.gbits);",
      "604:     b = ((((v & vd->server->pf.bmask) >> vd->server->pf.bshift) << vs->clientds.pf.bbits) >>",
      "605:         vd->server->pf.bbits);",
      "606:     v = (r << vs->clientds.pf.rshift) |",
      "607:         (g << vs->clientds.pf.gshift) |",
      "608:         (b << vs->clientds.pf.bshift);",
      "609:     switch(vs->clientds.pf.bytes_per_pixel) {",
      "614:         if (vs->clientds.flags & QEMU_BIG_ENDIAN_FLAG) {",
      "",
      "[Added Lines]",
      "616: #if VNC_SERVER_FB_FORMAT == PIXMAN_FORMAT(32, PIXMAN_TYPE_ARGB, 0, 8, 8, 8)",
      "617:     r = (((v & 0x00ff0000) >> 16) << vs->client_pf.rbits) >> 8;",
      "618:     g = (((v & 0x0000ff00) >>  8) << vs->client_pf.gbits) >> 8;",
      "619:     b = (((v & 0x000000ff) >>  0) << vs->client_pf.bbits) >> 8;",
      "620: #else",
      "621: # error need some bits here if you change VNC_SERVER_FB_FORMAT",
      "622: #endif",
      "623:     v = (r << vs->client_pf.rshift) |",
      "624:         (g << vs->client_pf.gshift) |",
      "625:         (b << vs->client_pf.bshift);",
      "626:     switch (vs->client_pf.bytes_per_pixel) {",
      "631:         if (vs->client_be) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "621:         break;",
      "622:     default:",
      "623:     case 4:",
      "625:             buf[0] = v >> 24;",
      "626:             buf[1] = v >> 16;",
      "627:             buf[2] = v >> 8;",
      "",
      "[Removed Lines]",
      "624:         if (vs->clientds.flags & QEMU_BIG_ENDIAN_FLAG) {",
      "",
      "[Added Lines]",
      "641:         if (vs->client_be) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "636:     }",
      "637: }",
      "640:                                      void *pixels1, int size)",
      "641: {",
      "642:     uint8_t buf[4];",
      "645:         uint32_t *pixels = pixels1;",
      "646:         int n, i;",
      "647:         n = size >> 2;",
      "649:             vnc_convert_pixel(vs, buf, pixels[i]);",
      "651:         }",
      "653:         uint16_t *pixels = pixels1;",
      "654:         int n, i;",
      "655:         n = size >> 1;",
      "657:             vnc_convert_pixel(vs, buf, pixels[i]);",
      "659:         }",
      "661:         uint8_t *pixels = pixels1;",
      "662:         int n, i;",
      "663:         n = size;",
      "665:             vnc_convert_pixel(vs, buf, pixels[i]);",
      "667:         }",
      "668:     } else {",
      "670:     }",
      "671: }",
      "",
      "[Removed Lines]",
      "639: static void vnc_write_pixels_generic(VncState *vs, struct PixelFormat *pf,",
      "644:     if (pf->bytes_per_pixel == 4) {",
      "648:         for(i = 0; i < n; i++) {",
      "650:             vnc_write(vs, buf, vs->clientds.pf.bytes_per_pixel);",
      "652:     } else if (pf->bytes_per_pixel == 2) {",
      "656:         for(i = 0; i < n; i++) {",
      "658:             vnc_write(vs, buf, vs->clientds.pf.bytes_per_pixel);",
      "660:     } else if (pf->bytes_per_pixel == 1) {",
      "664:         for(i = 0; i < n; i++) {",
      "666:             vnc_write(vs, buf, vs->clientds.pf.bytes_per_pixel);",
      "669:         fprintf(stderr, \"vnc_write_pixels_generic: VncState color depth not supported\\n\");",
      "",
      "[Added Lines]",
      "656: static void vnc_write_pixels_generic(VncState *vs,",
      "661:     if (VNC_SERVER_FB_BYTES == 4) {",
      "665:         for (i = 0; i < n; i++) {",
      "667:             vnc_write(vs, buf, vs->client_pf.bytes_per_pixel);",
      "669:     } else if (VNC_SERVER_FB_BYTES == 2) {",
      "673:         for (i = 0; i < n; i++) {",
      "675:             vnc_write(vs, buf, vs->client_pf.bytes_per_pixel);",
      "677:     } else if (VNC_SERVER_FB_BYTES == 1) {",
      "681:         for (i = 0; i < n; i++) {",
      "683:             vnc_write(vs, buf, vs->client_pf.bytes_per_pixel);",
      "686:         fprintf(stderr, \"%s: VncState color depth not supported\\n\", __func__);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "676:     uint8_t *row;",
      "677:     VncDisplay *vd = vs->vd;",
      "680:     for (i = 0; i < h; i++) {",
      "683:     }",
      "684:     return 1;",
      "685: }",
      "",
      "[Removed Lines]",
      "679:     row = vd->server->data + y * ds_get_linesize(vs->ds) + x * ds_get_bytes_per_pixel(vs->ds);",
      "681:         vs->write_pixels(vs, &vd->server->pf, row, w * ds_get_bytes_per_pixel(vs->ds));",
      "682:         row += ds_get_linesize(vs->ds);",
      "",
      "[Added Lines]",
      "696:     row = vnc_server_fb_ptr(vd, x, y);",
      "698:         vs->write_pixels(vs, row, w * VNC_SERVER_FB_BYTES);",
      "699:         row += vnc_server_fb_stride(vd);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "736:     VncState *vs, *vn;",
      "737:     uint8_t *src_row;",
      "738:     uint8_t *dst_row;",
      "740:     int cmp_bytes;",
      "742:     vnc_refresh_server_surface(vd);",
      "",
      "[Removed Lines]",
      "739:     int i,x,y,pitch,depth,inc,w_lim,s;",
      "",
      "[Added Lines]",
      "756:     int i, x, y, pitch, inc, w_lim, s;",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "749:     }",
      "756:     y = dst_y;",
      "757:     inc = 1;",
      "758:     if (dst_y > src_y) {",
      "",
      "[Removed Lines]",
      "752:     pitch = ds_get_linesize(vd->ds);",
      "753:     depth = ds_get_bytes_per_pixel(vd->ds);",
      "754:     src_row = vd->server->data + pitch * src_y + depth * src_x;",
      "755:     dst_row = vd->server->data + pitch * dst_y + depth * dst_x;",
      "",
      "[Added Lines]",
      "769:     pitch = vnc_server_fb_stride(vd);",
      "770:     src_row = vnc_server_fb_ptr(vd, src_x, src_y);",
      "771:     dst_row = vnc_server_fb_ptr(vd, dst_x, dst_y);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "780:             } else {",
      "781:                 s = 16;",
      "782:             }",
      "784:             if (memcmp(src_row, dst_row, cmp_bytes) == 0)",
      "785:                 continue;",
      "786:             memmove(dst_row, src_row, cmp_bytes);",
      "",
      "[Removed Lines]",
      "783:             cmp_bytes = s * depth;",
      "",
      "[Added Lines]",
      "799:             cmp_bytes = s * VNC_SERVER_FB_BYTES;",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "790:                 }",
      "791:             }",
      "792:         }",
      "795:         y += inc;",
      "796:     }",
      "",
      "[Removed Lines]",
      "793:         src_row += pitch - w * depth;",
      "794:         dst_row += pitch - w * depth;",
      "",
      "[Added Lines]",
      "809:         src_row += pitch - w * VNC_SERVER_FB_BYTES;",
      "810:         dst_row += pitch - w * VNC_SERVER_FB_BYTES;",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "810: static int vnc_cursor_define(VncState *vs)",
      "811: {",
      "812:     QEMUCursor *c = vs->vd->cursor;",
      "814:     int isize;",
      "816:     if (vnc_has_feature(vs, VNC_FEATURE_RICH_CURSOR)) {",
      "",
      "[Removed Lines]",
      "813:     PixelFormat pf = qemu_default_pixelformat(32);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "821:         vnc_framebuffer_update(vs, c->hot_x, c->hot_y, c->width, c->height,",
      "822:                                VNC_ENCODING_RICH_CURSOR);",
      "825:         vnc_write(vs, vs->vd->cursor_mask, vs->vd->cursor_msize);",
      "826:         vnc_unlock_output(vs);",
      "827:         return 0;",
      "",
      "[Removed Lines]",
      "823:         isize = c->width * c->height * vs->clientds.pf.bytes_per_pixel;",
      "824:         vnc_write_pixels_generic(vs, &pf, c->data, isize);",
      "",
      "[Added Lines]",
      "838:         isize = c->width * c->height * vs->client_pf.bytes_per_pixel;",
      "839:         vnc_write_pixels_generic(vs, c->data, isize);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "899:         job = vnc_job_new(vs);",
      "904:         for (y = 0; y < height; y++) {",
      "905:             int x;",
      "",
      "[Removed Lines]",
      "901:         width = MIN(vd->server->width, vs->client_width);",
      "902:         height = MIN(vd->server->height, vs->client_height);",
      "",
      "[Added Lines]",
      "916:         width = MIN(pixman_image_get_width(vd->server), vs->client_width);",
      "917:         height = MIN(pixman_image_get_height(vd->server), vs->client_height);",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "1862: static void set_pixel_conversion(VncState *vs)",
      "1863: {",
      "1867:         vs->write_pixels = vnc_write_pixels_copy;",
      "1868:         vnc_hextile_set_pixel_conversion(vs, 0);",
      "1869:     } else {",
      "",
      "[Removed Lines]",
      "1864:     if ((vs->clientds.flags & QEMU_BIG_ENDIAN_FLAG) ==",
      "1865:         (vs->ds->surface->flags & QEMU_BIG_ENDIAN_FLAG) &&",
      "1866:         !memcmp(&(vs->clientds.pf), &(vs->ds->surface->pf), sizeof(PixelFormat))) {",
      "",
      "[Added Lines]",
      "1879:     pixman_format_code_t fmt = qemu_pixman_get_format(&vs->client_pf);",
      "1881:     if (fmt == VNC_SERVER_FB_FORMAT) {",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "1883:         return;",
      "1884:     }",
      "1904:     set_pixel_conversion(vs);",
      "",
      "[Removed Lines]",
      "1886:     vs->clientds = *(vs->vd->guest.ds);",
      "1887:     vs->clientds.pf.rmax = red_max;",
      "1888:     vs->clientds.pf.rbits = hweight_long(red_max);",
      "1889:     vs->clientds.pf.rshift = red_shift;",
      "1890:     vs->clientds.pf.rmask = red_max << red_shift;",
      "1891:     vs->clientds.pf.gmax = green_max;",
      "1892:     vs->clientds.pf.gbits = hweight_long(green_max);",
      "1893:     vs->clientds.pf.gshift = green_shift;",
      "1894:     vs->clientds.pf.gmask = green_max << green_shift;",
      "1895:     vs->clientds.pf.bmax = blue_max;",
      "1896:     vs->clientds.pf.bbits = hweight_long(blue_max);",
      "1897:     vs->clientds.pf.bshift = blue_shift;",
      "1898:     vs->clientds.pf.bmask = blue_max << blue_shift;",
      "1899:     vs->clientds.pf.bits_per_pixel = bits_per_pixel;",
      "1900:     vs->clientds.pf.bytes_per_pixel = bits_per_pixel / 8;",
      "1901:     vs->clientds.pf.depth = bits_per_pixel == 32 ? 24 : bits_per_pixel;",
      "1902:     vs->clientds.flags = big_endian_flag ? QEMU_BIG_ENDIAN_FLAG : 0x00;",
      "",
      "[Added Lines]",
      "1901:     vs->client_pf.rmax = red_max;",
      "1902:     vs->client_pf.rbits = hweight_long(red_max);",
      "1903:     vs->client_pf.rshift = red_shift;",
      "1904:     vs->client_pf.rmask = red_max << red_shift;",
      "1905:     vs->client_pf.gmax = green_max;",
      "1906:     vs->client_pf.gbits = hweight_long(green_max);",
      "1907:     vs->client_pf.gshift = green_shift;",
      "1908:     vs->client_pf.gmask = green_max << green_shift;",
      "1909:     vs->client_pf.bmax = blue_max;",
      "1910:     vs->client_pf.bbits = hweight_long(blue_max);",
      "1911:     vs->client_pf.bshift = blue_shift;",
      "1912:     vs->client_pf.bmask = blue_max << blue_shift;",
      "1913:     vs->client_pf.bits_per_pixel = bits_per_pixel;",
      "1914:     vs->client_pf.bytes_per_pixel = bits_per_pixel / 8;",
      "1915:     vs->client_pf.depth = bits_per_pixel == 32 ? 24 : bits_per_pixel;",
      "1916:     vs->client_be = big_endian_flag;",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "1910: static void pixel_format_message (VncState *vs) {",
      "1911:     char pad[3] = { 0, 0, 0 };",
      "1916: #ifdef HOST_WORDS_BIGENDIAN",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1927:     vs->client_pf = qemu_default_pixelformat(32);",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "1920: #endif",
      "1929:     vnc_hextile_set_pixel_conversion(vs, 0);",
      "1933:     vs->write_pixels = vnc_write_pixels_copy;",
      "1936: }",
      "1938: static void vnc_dpy_setdata(DisplayState *ds)",
      "1939: {",
      "1940:     VncDisplay *vd = ds->opaque;",
      "1943:     vnc_dpy_update(ds, 0, 0, ds_get_width(ds), ds_get_height(ds));",
      "1944: }",
      "",
      "[Removed Lines]",
      "1931:     vs->clientds = *(vs->ds->surface);",
      "1932:     vs->clientds.flags &= ~QEMU_ALLOCATED_FLAG;",
      "",
      "[Added Lines]",
      "1954:     qemu_pixman_image_unref(vd->guest.fb);",
      "1955:     vd->guest.fb = pixman_image_ref(ds->surface->image);",
      "1956:     vd->guest.format = ds->surface->format;",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "2444: static int vnc_update_stats(VncDisplay *vd,  struct timeval * tv)",
      "2445: {",
      "2446:     int x, y;",
      "2447:     struct timeval res;",
      "2448:     int has_dirty = 0;",
      "2452:             VncRectStat *rect = vnc_stat_rect(vd, x, y);",
      "2454:             rect->updated = false;",
      "",
      "[Removed Lines]",
      "2450:     for (y = 0; y < vd->guest.ds->height; y += VNC_STAT_RECT) {",
      "2451:         for (x = 0; x < vd->guest.ds->width; x += VNC_STAT_RECT) {",
      "",
      "[Added Lines]",
      "2460:     int width = pixman_image_get_width(vd->guest.fb);",
      "2461:     int height = pixman_image_get_height(vd->guest.fb);",
      "2466:     for (y = 0; y < height; y += VNC_STAT_RECT) {",
      "2467:         for (x = 0; x < width; x += VNC_STAT_RECT) {",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "2462:     }",
      "2463:     vd->guest.last_freq_check = *tv;",
      "2467:             VncRectStat *rect= vnc_stat_rect(vd, x, y);",
      "2468:             int count = ARRAY_SIZE(rect->times);",
      "2469:             struct timeval min, max;",
      "",
      "[Removed Lines]",
      "2465:     for (y = 0; y < vd->guest.ds->height; y += VNC_STAT_RECT) {",
      "2466:         for (x = 0; x < vd->guest.ds->width; x += VNC_STAT_RECT) {",
      "",
      "[Added Lines]",
      "2481:     for (y = 0; y < height; y += VNC_STAT_RECT) {",
      "2482:         for (x = 0; x < width; x += VNC_STAT_RECT) {",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "2533: static int vnc_refresh_server_surface(VncDisplay *vd)",
      "2534: {",
      "2535:     int y;",
      "2536:     uint8_t *guest_row;",
      "2537:     uint8_t *server_row;",
      "2538:     int cmp_bytes;",
      "2539:     VncState *vs;",
      "2540:     int has_dirty = 0;",
      "2542:     struct timeval tv = { 0, 0 };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2551:     int width = pixman_image_get_width(vd->guest.fb);",
      "2552:     int height = pixman_image_get_height(vd->guest.fb);",
      "2559:     pixman_image_t *tmpbuf = NULL;",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "2557:     }",
      "2561:         if (!bitmap_empty(vd->guest.dirty[y], VNC_DIRTY_BITS)) {",
      "2562:             int x;",
      "2563:             uint8_t *guest_ptr;",
      "2564:             uint8_t *server_ptr;",
      "2567:             server_ptr = server_row;",
      "2570:                     x += 16, guest_ptr += cmp_bytes, server_ptr += cmp_bytes) {",
      "2571:                 if (!test_and_clear_bit((x / 16), vd->guest.dirty[y]))",
      "2572:                     continue;",
      "",
      "[Removed Lines]",
      "2554:     cmp_bytes = 16 * ds_get_bytes_per_pixel(vd->ds);",
      "2555:     if (cmp_bytes > vd->ds->surface->linesize) {",
      "2556:         cmp_bytes = vd->ds->surface->linesize;",
      "2558:     guest_row  = vd->guest.ds->data;",
      "2559:     server_row = vd->server->data;",
      "2560:     for (y = 0; y < vd->guest.ds->height; y++) {",
      "2566:             guest_ptr  = guest_row;",
      "2569:             for (x = 0; x + 15 < vd->guest.ds->width;",
      "",
      "[Added Lines]",
      "2573:     cmp_bytes = 64;",
      "2574:     if (cmp_bytes > vnc_server_fb_stride(vd)) {",
      "2575:         cmp_bytes = vnc_server_fb_stride(vd);",
      "2576:     }",
      "2577:     if (vd->guest.format != VNC_SERVER_FB_FORMAT) {",
      "2578:         int width = pixman_image_get_width(vd->server);",
      "2579:         tmpbuf = qemu_pixman_linebuf_create(VNC_SERVER_FB_FORMAT, width);",
      "2581:     guest_row = (uint8_t *)pixman_image_get_data(vd->guest.fb);",
      "2582:     server_row = (uint8_t *)pixman_image_get_data(vd->server);",
      "2583:     for (y = 0; y < height; y++) {",
      "2589:             if (vd->guest.format != VNC_SERVER_FB_FORMAT) {",
      "2590:                 qemu_pixman_linebuf_fill(tmpbuf, vd->guest.fb, width, y);",
      "2591:                 guest_ptr = (uint8_t *)pixman_image_get_data(tmpbuf);",
      "2592:             } else {",
      "2593:                 guest_ptr = guest_row;",
      "2594:             }",
      "2597:             for (x = 0; x + 15 < width;",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "2581:                 has_dirty++;",
      "2582:             }",
      "2583:         }",
      "2586:     }",
      "2587:     return has_dirty;",
      "2588: }",
      "",
      "[Removed Lines]",
      "2584:         guest_row  += ds_get_linesize(vd->ds);",
      "2585:         server_row += ds_get_linesize(vd->ds);",
      "",
      "[Added Lines]",
      "2612:         guest_row  += pixman_image_get_stride(vd->guest.fb);",
      "2613:         server_row += pixman_image_get_stride(vd->server);",
      "2615:     qemu_pixman_image_unref(tmpbuf);",
      "",
      "---------------"
    ],
    "ui/vnc.h||ui/vnc.h": [
      "File: ui/vnc.h -> ui/vnc.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "70: typedef int VncReadEvent(VncState *vs, uint8_t *data, size_t len);",
      "74: typedef void VncSendHextileTile(VncState *vs,",
      "75:                                 int x, int y, int w, int h,",
      "",
      "[Removed Lines]",
      "72: typedef void VncWritePixels(VncState *vs, struct PixelFormat *pf, void *data, int size);",
      "",
      "[Added Lines]",
      "72: typedef void VncWritePixels(VncState *vs, void *data, int size);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "117:     struct timeval last_freq_check;",
      "118:     DECLARE_BITMAP(dirty[VNC_MAX_HEIGHT], VNC_MAX_WIDTH / 16);",
      "119:     VncRectStat stats[VNC_STAT_ROWS][VNC_STAT_COLS];",
      "121: };",
      "123: typedef enum VncShareMode {",
      "",
      "[Removed Lines]",
      "120:     DisplaySurface *ds;",
      "",
      "[Added Lines]",
      "120:     pixman_image_t *fb;",
      "121:     pixman_format_code_t format;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "275:     Buffer input;",
      "277:     VncWritePixels *write_pixels;",
      "280:     CaptureVoiceOut *audio_cap;",
      "281:     struct audsettings as;",
      "",
      "[Removed Lines]",
      "278:     DisplaySurface clientds;",
      "",
      "[Added Lines]",
      "279:     PixelFormat client_pf;",
      "280:     pixman_format_code_t client_format;",
      "281:     bool client_be;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "527: void vnc_framebuffer_update(VncState *vs, int x, int y, int w, int h,",
      "528:                             int32_t encoding);",
      "530: void vnc_convert_pixel(VncState *vs, uint8_t *buf, uint32_t v);",
      "531: double vnc_update_freq(VncState *vs, int x, int y, int w, int h);",
      "532: void vnc_sent_lossy_rect(VncState *vs, int x, int y, int w, int h);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #define VNC_SERVER_FB_FORMAT PIXMAN_FORMAT(32, PIXMAN_TYPE_ARGB, 0, 8, 8, 8)",
      "535: #define VNC_SERVER_FB_BITS   (PIXMAN_FORMAT_BPP(VNC_SERVER_FB_FORMAT))",
      "536: #define VNC_SERVER_FB_BYTES  ((VNC_SERVER_FB_BITS+7)/8)",
      "538: void *vnc_server_fb_ptr(VncDisplay *vd, int x, int y);",
      "539: int vnc_server_fb_stride(VncDisplay *vd);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d39fa6d86d07646e3481e5c3e45a984bff590642",
      "candidate_info": {
        "commit_hash": "d39fa6d86d07646e3481e5c3e45a984bff590642",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/d39fa6d86d07646e3481e5c3e45a984bff590642",
        "files": [
          "ui/vnc-enc-tight.c",
          "ui/vnc-jobs.c",
          "ui/vnc.c",
          "ui/vnc.h"
        ],
        "message": "vnc: stop using DisplayState\n\nRework DisplayStateListener callbacks to not use the DisplayState\nany more.\n\nSigned-off-by: Gerd Hoffmann <kraxel@redhat.com>",
        "before_after_code_files": [
          "ui/vnc-enc-tight.c||ui/vnc-enc-tight.c",
          "ui/vnc-jobs.c||ui/vnc-jobs.c",
          "ui/vnc.c||ui/vnc.c",
          "ui/vnc.h||ui/vnc.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ui/vnc-enc-tight.c||ui/vnc-enc-tight.c",
            "ui/vnc-jobs.c||ui/vnc-jobs.c",
            "ui/vnc.c||ui/vnc.c",
            "ui/vnc.h||ui/vnc.h"
          ],
          "candidate": [
            "ui/vnc-enc-tight.c||ui/vnc-enc-tight.c",
            "ui/vnc-jobs.c||ui/vnc-jobs.c",
            "ui/vnc.c||ui/vnc.c",
            "ui/vnc.h||ui/vnc.h"
          ]
        }
      },
      "candidate_diff": {
        "ui/vnc-enc-tight.c||ui/vnc-enc-tight.c": [
          "File: ui/vnc-enc-tight.c -> ui/vnc-enc-tight.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:         return false;",
          "124:     }",
          "127:         vs->client_pf.bytes_per_pixel == 1) {",
          "128:         return false;",
          "129:     }",
          "",
          "[Removed Lines]",
          "126:     if (ds_get_bytes_per_pixel(vs->ds) == 1 ||",
          "",
          "[Added Lines]",
          "126:     if (surface_bytes_per_pixel(vs->vd->ds) == 1 ||",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "301:         return 0;",
          "302:     }",
          "305:         vs->client_pf.bytes_per_pixel == 1 ||",
          "306:         w < VNC_TIGHT_DETECT_MIN_WIDTH || h < VNC_TIGHT_DETECT_MIN_HEIGHT) {",
          "307:         return 0;",
          "",
          "[Removed Lines]",
          "304:     if (ds_get_bytes_per_pixel(vs->ds) == 1 ||",
          "",
          "[Added Lines]",
          "304:     if (surface_bytes_per_pixel(vs->vd->ds) == 1 ||",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1184:     uint8_t *buf;",
          "1185:     int dy;",
          "1188:         return send_full_color_rect(vs, x, y, w, h);",
          "1190:     buffer_reserve(&vs->tight.jpeg, 2048);",
          "",
          "[Removed Lines]",
          "1187:     if (ds_get_bytes_per_pixel(vs->ds) == 1)",
          "",
          "[Added Lines]",
          "1187:     if (surface_bytes_per_pixel(vs->vd->ds) == 1) {",
          "1189:     }",
          "",
          "---------------"
        ],
        "ui/vnc-jobs.c||ui/vnc-jobs.c": [
          "File: ui/vnc-jobs.c -> ui/vnc-jobs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "183: {",
          "184:     local->vnc_encoding = orig->vnc_encoding;",
          "185:     local->features = orig->features;",
          "187:     local->vd = orig->vd;",
          "188:     local->lossy_rect = orig->lossy_rect;",
          "189:     local->write_pixels = orig->write_pixels;",
          "",
          "[Removed Lines]",
          "186:     local->ds = orig->ds;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ui/vnc.c||ui/vnc.c": [
          "File: ui/vnc.c -> ui/vnc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "436:     int i;",
          "437:     VncDisplay *vd = container_of(dcl, VncDisplay, dcl);",
          "438:     struct VncSurface *s = &vd->guest;",
          "442:     h += y;",
          "",
          "[Removed Lines]",
          "439:     int width = ds_get_width(ds);",
          "440:     int height = ds_get_height(ds);",
          "",
          "[Added Lines]",
          "439:     int width = surface_width(vd->ds);",
          "440:     int height = surface_height(vd->ds);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "520: static void vnc_desktop_resize(VncState *vs)",
          "521: {",
          "524:     if (vs->csock == -1 || !vnc_has_feature(vs, VNC_FEATURE_RESIZE)) {",
          "525:         return;",
          "526:     }",
          "529:         return;",
          "530:     }",
          "533:     vnc_lock_output(vs);",
          "534:     vnc_write_u8(vs, VNC_MSG_SERVER_FRAMEBUFFER_UPDATE);",
          "535:     vnc_write_u8(vs, 0);",
          "",
          "[Removed Lines]",
          "522:     DisplayState *ds = vs->ds;",
          "527:     if (vs->client_width == ds_get_width(ds) &&",
          "528:         vs->client_height == ds_get_height(ds)) {",
          "531:     vs->client_width = ds_get_width(ds);",
          "532:     vs->client_height = ds_get_height(ds);",
          "",
          "[Added Lines]",
          "522:     DisplaySurface *ds = vs->vd->ds;",
          "527:     if (vs->client_width == surface_width(ds) &&",
          "528:         vs->client_height == surface_height(ds)) {",
          "531:     vs->client_width = surface_width(ds);",
          "532:     vs->client_height = surface_height(ds);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "575: }",
          "577: static void vnc_dpy_switch(DisplayChangeListener *dcl,",
          "579:                            DisplaySurface *surface)",
          "580: {",
          "581:     VncDisplay *vd = container_of(dcl, VncDisplay, dcl);",
          "",
          "[Removed Lines]",
          "578:                            DisplayState *ds,",
          "",
          "[Added Lines]",
          "578:                            DisplayState *dontuse,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "587:     qemu_pixman_image_unref(vd->server);",
          "588:     vd->server = pixman_image_create_bits(VNC_SERVER_FB_FORMAT,",
          "591:                                           NULL, 0);",
          "",
          "[Removed Lines]",
          "589:                                           ds_get_width(ds),",
          "590:                                           ds_get_height(ds),",
          "",
          "[Added Lines]",
          "588:     vd->ds = surface;",
          "590:                                           surface_width(vd->ds),",
          "591:                                           surface_height(vd->ds),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "596:         console_color_init(ds);",
          "597: #endif",
          "598:     qemu_pixman_image_unref(vd->guest.fb);",
          "601:     memset(vd->guest.dirty, 0xFF, sizeof(vd->guest.dirty));",
          "603:     QTAILQ_FOREACH(vs, &vd->clients, next) {",
          "",
          "[Removed Lines]",
          "599:     vd->guest.fb = pixman_image_ref(ds->surface->image);",
          "600:     vd->guest.format = ds->surface->format;",
          "",
          "[Added Lines]",
          "600:     vd->guest.fb = pixman_image_ref(surface->image);",
          "601:     vd->guest.format = surface->format;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "739: }",
          "741: static void vnc_dpy_copy(DisplayChangeListener *dcl,",
          "743:                          int src_x, int src_y,",
          "744:                          int dst_x, int dst_y, int w, int h)",
          "745: {",
          "",
          "[Removed Lines]",
          "742:                          DisplayState *ds,",
          "",
          "[Added Lines]",
          "743:                          DisplayState *dontuse,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "813: }",
          "815: static void vnc_mouse_set(DisplayChangeListener *dcl,",
          "817:                           int x, int y, int visible)",
          "818: {",
          "",
          "[Removed Lines]",
          "816:                           DisplayState *ds,",
          "",
          "[Added Lines]",
          "817:                           DisplayState *dontuse,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "841: }",
          "843: static void vnc_dpy_cursor_define(DisplayChangeListener *dcl,",
          "845:                                   QEMUCursor *c)",
          "846: {",
          "847:     VncDisplay *vd = vnc_display;",
          "",
          "[Removed Lines]",
          "844:                                   DisplayState *ds,",
          "",
          "[Added Lines]",
          "845:                                   DisplayState *dontuse,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1463:         vnc_write_u8(vs, 0);",
          "1464:         vnc_write_u16(vs, 1);",
          "1465:         vnc_framebuffer_update(vs, absolute, 0,",
          "1467:                                VNC_ENCODING_POINTER_TYPE_CHANGE);",
          "1468:         vnc_unlock_output(vs);",
          "1469:         vnc_flush(vs);",
          "",
          "[Removed Lines]",
          "1466:                                ds_get_width(vs->ds), ds_get_height(vs->ds),",
          "",
          "[Added Lines]",
          "1467:                                surface_width(vs->vd->ds),",
          "1468:                                surface_height(vs->vd->ds),",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1475: {",
          "1476:     int buttons = 0;",
          "1477:     int dz = 0;",
          "1479:     if (button_mask & 0x01)",
          "1480:         buttons |= MOUSE_EVENT_LBUTTON;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1480:     int width = surface_width(vs->vd->ds);",
          "1481:     int height = surface_height(vs->vd->ds);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1488:         dz = 1;",
          "1490:     if (vs->absolute) {",
          "1495:                         dz, buttons);",
          "1496:     } else if (vnc_has_feature(vs, VNC_FEATURE_POINTER_TYPE_CHANGE)) {",
          "1497:         x -= 0x7FFF;",
          "",
          "[Removed Lines]",
          "1491:         kbd_mouse_event(ds_get_width(vs->ds) > 1 ?",
          "1492:                           x * 0x7FFF / (ds_get_width(vs->ds) - 1) : 0x4000,",
          "1493:                         ds_get_height(vs->ds) > 1 ?",
          "1494:                           y * 0x7FFF / (ds_get_height(vs->ds) - 1) : 0x4000,",
          "",
          "[Added Lines]",
          "1495:         kbd_mouse_event(width  > 1 ? x * 0x7FFF / (width  - 1) : 0x4000,",
          "1496:                         height > 1 ? y * 0x7FFF / (height - 1) : 0x4000,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1781:                                        int w, int h)",
          "1782: {",
          "1783:     int i;",
          "1791:     vs->need_update = 1;",
          "1792:     if (!incremental) {",
          "",
          "[Removed Lines]",
          "1784:     const size_t width = ds_get_width(vs->ds) / 16;",
          "1786:     if (y_position > ds_get_height(vs->ds))",
          "1787:         y_position = ds_get_height(vs->ds);",
          "1788:     if (y_position + h >= ds_get_height(vs->ds))",
          "1789:         h = ds_get_height(vs->ds) - y_position;",
          "",
          "[Added Lines]",
          "1786:     const size_t width = surface_width(vs->vd->ds) / 16;",
          "1787:     const size_t height = surface_height(vs->vd->ds);",
          "1789:     if (y_position > height) {",
          "1790:         y_position = height;",
          "1791:     }",
          "1792:     if (y_position + h >= height) {",
          "1793:         h = height - y_position;",
          "1794:     }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1805:     vnc_write_u8(vs, VNC_MSG_SERVER_FRAMEBUFFER_UPDATE);",
          "1806:     vnc_write_u8(vs, 0);",
          "1807:     vnc_write_u16(vs, 1);",
          "1809:                            VNC_ENCODING_EXT_KEY_EVENT);",
          "1810:     vnc_unlock_output(vs);",
          "1811:     vnc_flush(vs);",
          "",
          "[Removed Lines]",
          "1808:     vnc_framebuffer_update(vs, 0, 0, ds_get_width(vs->ds), ds_get_height(vs->ds),",
          "",
          "[Added Lines]",
          "1813:     vnc_framebuffer_update(vs, 0, 0,",
          "1814:                            surface_width(vs->vd->ds),",
          "1815:                            surface_height(vs->vd->ds),",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1817:     vnc_write_u8(vs, VNC_MSG_SERVER_FRAMEBUFFER_UPDATE);",
          "1818:     vnc_write_u8(vs, 0);",
          "1819:     vnc_write_u16(vs, 1);",
          "1821:                            VNC_ENCODING_AUDIO);",
          "1822:     vnc_unlock_output(vs);",
          "1823:     vnc_flush(vs);",
          "",
          "[Removed Lines]",
          "1820:     vnc_framebuffer_update(vs, 0, 0, ds_get_width(vs->ds), ds_get_height(vs->ds),",
          "",
          "[Added Lines]",
          "1827:     vnc_framebuffer_update(vs, 0, 0,",
          "1828:                            surface_width(vs->vd->ds),",
          "1829:                            surface_height(vs->vd->ds),",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1990:         vnc_write_u8(vs, VNC_MSG_SERVER_FRAMEBUFFER_UPDATE);",
          "1991:         vnc_write_u8(vs, 0);",
          "1995:         pixel_format_message(vs);",
          "1996:         vnc_unlock_output(vs);",
          "1997:         vnc_flush(vs);",
          "",
          "[Removed Lines]",
          "1993:         vnc_framebuffer_update(vs, 0, 0, ds_get_width(vs->ds),",
          "1994:                                ds_get_height(vs->ds), VNC_ENCODING_WMVi);",
          "",
          "[Added Lines]",
          "2002:         vnc_framebuffer_update(vs, 0, 0,",
          "2003:                                surface_width(vs->vd->ds),",
          "2004:                                surface_height(vs->vd->ds),",
          "2005:                                VNC_ENCODING_WMVi);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2207:     }",
          "2208:     vnc_set_share_mode(vs, mode);",
          "2212:     vnc_write_u16(vs, vs->client_width);",
          "2213:     vnc_write_u16(vs, vs->client_height);",
          "",
          "[Removed Lines]",
          "2210:     vs->client_width = ds_get_width(vs->ds);",
          "2211:     vs->client_height = ds_get_height(vs->ds);",
          "",
          "[Added Lines]",
          "2221:     vs->client_width = surface_width(vs->vd->ds);",
          "2222:     vs->client_height = surface_height(vs->vd->ds);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2686:     vd->timer_interval = VNC_REFRESH_INTERVAL_BASE;",
          "2687:     if (vd->timer == NULL && !QTAILQ_EMPTY(&vd->clients)) {",
          "2688:         vd->timer = qemu_new_timer_ms(rt_clock, vnc_refresh, vd);",
          "2690:         vnc_refresh(vd);",
          "2691:     }",
          "2692: }",
          "",
          "[Removed Lines]",
          "2689:         vnc_dpy_switch(&vd->dcl, vd->ds, vd->ds->surface);",
          "",
          "[Added Lines]",
          "2700:         vga_hw_update();",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2756:     vs->initialized = true;",
          "2757:     VncDisplay *vd = vs->vd;",
          "2760:     vs->last_x = -1;",
          "2761:     vs->last_y = -1;",
          "",
          "[Removed Lines]",
          "2759:     vs->ds = vd->ds;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2843:     vs->lwebsock = -1;",
          "2844: #endif",
          "2847:     QTAILQ_INIT(&vs->clients);",
          "2848:     vs->expires = TIME_MAX;",
          "",
          "[Removed Lines]",
          "2846:     vs->ds = ds;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ui/vnc.h||ui/vnc.h": [
          "File: ui/vnc.h -> ui/vnc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "150:     bool websocket;",
          "151:     char *ws_display;",
          "152: #endif",
          "154:     DisplayChangeListener dcl;",
          "155:     kbd_layout_t *kbd_layout;",
          "156:     int lock_key_sync;",
          "",
          "[Removed Lines]",
          "153:     DisplayState *ds;",
          "",
          "[Added Lines]",
          "153:     DisplaySurface *ds;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "248: {",
          "249:     int csock;",
          "252:     DECLARE_BITMAP(dirty[VNC_MAX_HEIGHT], VNC_DIRTY_BITS);",
          "253:     uint8_t **lossy_rect; /* Not an Array to avoid costly memcpy in",
          "",
          "[Removed Lines]",
          "251:     DisplayState *ds;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b68c48ff014f1366f19646550f3bf3aa6645537e",
      "candidate_info": {
        "commit_hash": "b68c48ff014f1366f19646550f3bf3aa6645537e",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/b68c48ff014f1366f19646550f3bf3aa6645537e",
        "files": [
          "hw/vga.c",
          "qemu-pixman.c",
          "qemu-pixman.h",
          "ui/vnc-enc-tight.c",
          "ui/vnc.c"
        ],
        "message": "pixman: fix vnc tight png/jpeg support\n\nThis patch adds an x argument to qemu_pixman_linebuf_fill so it can\nalso be used to convert a partial scanline.  Then fix tight + png/jpeg\nencoding by passing in the x+y offset, so the data is read from the\ncorrect screen location instead of the upper left corner.\n\nCc: 1087974@bugs.launchpad.net\nCc: qemu-stable@nongnu.org\nReported-by: Tim Hardeneck <thardeck@suse.de>\nSigned-off-by: Gerd Hoffmann <kraxel@redhat.com>\nSigned-off-by: Blue Swirl <blauwirbel@gmail.com>\n(cherry picked from commit bc210eb163b162ff2e94e5c8f4307715731257f8)\n\nSigned-off-by: Michael Roth <mdroth@linux.vnet.ibm.com>",
        "before_after_code_files": [
          "hw/vga.c||hw/vga.c",
          "qemu-pixman.c||qemu-pixman.c",
          "qemu-pixman.h||qemu-pixman.h",
          "ui/vnc-enc-tight.c||ui/vnc-enc-tight.c",
          "ui/vnc.c||ui/vnc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ui/vnc-enc-tight.c||ui/vnc-enc-tight.c",
            "ui/vnc.c||ui/vnc.c"
          ],
          "candidate": [
            "ui/vnc-enc-tight.c||ui/vnc-enc-tight.c",
            "ui/vnc.c||ui/vnc.c"
          ]
        }
      },
      "candidate_diff": {
        "hw/vga.c||hw/vga.c": [
          "File: hw/vga.c -> hw/vga.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2413:     }",
          "2414:     linebuf = qemu_pixman_linebuf_create(PIXMAN_BE_r8g8b8, width);",
          "2415:     for (y = 0; y < height; y++) {",
          "2417:         clearerr(f);",
          "2418:         ret = fwrite(pixman_image_get_data(linebuf), 1,",
          "2419:                      pixman_image_get_stride(linebuf), f);",
          "",
          "[Removed Lines]",
          "2416:         qemu_pixman_linebuf_fill(linebuf, ds->image, width, y);",
          "",
          "[Added Lines]",
          "2416:         qemu_pixman_linebuf_fill(linebuf, ds->image, width, 0, y);",
          "",
          "---------------"
        ],
        "qemu-pixman.c||qemu-pixman.c": [
          "File: qemu-pixman.c -> qemu-pixman.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: }",
          "54: void qemu_pixman_linebuf_fill(pixman_image_t *linebuf, pixman_image_t *fb,",
          "56: {",
          "57:     pixman_image_composite(PIXMAN_OP_SRC, fb, NULL, linebuf,",
          "59: }",
          "61: pixman_image_t *qemu_pixman_mirror_create(pixman_format_code_t format,",
          "",
          "[Removed Lines]",
          "55:                               int width, int y)",
          "58:                            0, y, 0, 0, 0, 0, width, 1);",
          "",
          "[Added Lines]",
          "55:                               int width, int x, int y)",
          "58:                            x, y, 0, 0, 0, 0, width, 1);",
          "",
          "---------------"
        ],
        "qemu-pixman.h||qemu-pixman.h": [
          "File: qemu-pixman.h -> qemu-pixman.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: pixman_image_t *qemu_pixman_linebuf_create(pixman_format_code_t format,",
          "32:                                            int width);",
          "33: void qemu_pixman_linebuf_fill(pixman_image_t *linebuf, pixman_image_t *fb,",
          "35: pixman_image_t *qemu_pixman_mirror_create(pixman_format_code_t format,",
          "36:                                           pixman_image_t *image);",
          "37: void qemu_pixman_image_unref(pixman_image_t *image);",
          "",
          "[Removed Lines]",
          "34:                               int width, int y);",
          "",
          "[Added Lines]",
          "34:                               int width, int x, int y);",
          "",
          "---------------"
        ],
        "ui/vnc-enc-tight.c||ui/vnc-enc-tight.c": [
          "File: ui/vnc-enc-tight.c -> ui/vnc-enc-tight.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1212:     buf = (uint8_t *)pixman_image_get_data(linebuf);",
          "1213:     row[0] = buf;",
          "1214:     for (dy = 0; dy < h; dy++) {",
          "1216:         jpeg_write_scanlines(&cinfo, row, 1);",
          "1217:     }",
          "1218:     qemu_pixman_image_unref(linebuf);",
          "",
          "[Removed Lines]",
          "1215:         qemu_pixman_linebuf_fill(linebuf, vs->vd->server, w, dy);",
          "",
          "[Added Lines]",
          "1215:         qemu_pixman_linebuf_fill(linebuf, vs->vd->server, w, x, y + dy);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1356:         if (color_type == PNG_COLOR_TYPE_PALETTE) {",
          "1357:             memcpy(buf, vs->tight.tight.buffer + (dy * w), w);",
          "1358:         } else {",
          "1360:         }",
          "1361:         png_write_row(png_ptr, buf);",
          "1362:     }",
          "",
          "[Removed Lines]",
          "1359:             qemu_pixman_linebuf_fill(linebuf, vs->vd->server, w, dy);",
          "",
          "[Added Lines]",
          "1359:             qemu_pixman_linebuf_fill(linebuf, vs->vd->server, w, x, y + dy);",
          "",
          "---------------"
        ],
        "ui/vnc.c||ui/vnc.c": [
          "File: ui/vnc.c -> ui/vnc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2569:             uint8_t *server_ptr;",
          "2571:             if (vd->guest.format != VNC_SERVER_FB_FORMAT) {",
          "2573:                 guest_ptr = (uint8_t *)pixman_image_get_data(tmpbuf);",
          "2574:             } else {",
          "2575:                 guest_ptr = guest_row;",
          "",
          "[Removed Lines]",
          "2572:                 qemu_pixman_linebuf_fill(tmpbuf, vd->guest.fb, width, y);",
          "",
          "[Added Lines]",
          "2572:                 qemu_pixman_linebuf_fill(tmpbuf, vd->guest.fb, width, 0, y);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bc210eb163b162ff2e94e5c8f4307715731257f8",
      "candidate_info": {
        "commit_hash": "bc210eb163b162ff2e94e5c8f4307715731257f8",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/bc210eb163b162ff2e94e5c8f4307715731257f8",
        "files": [
          "hw/vga.c",
          "qemu-pixman.c",
          "qemu-pixman.h",
          "ui/vnc-enc-tight.c",
          "ui/vnc.c"
        ],
        "message": "pixman: fix vnc tight png/jpeg support\n\nThis patch adds an x argument to qemu_pixman_linebuf_fill so it can\nalso be used to convert a partial scanline.  Then fix tight + png/jpeg\nencoding by passing in the x+y offset, so the data is read from the\ncorrect screen location instead of the upper left corner.\n\nCc: 1087974@bugs.launchpad.net\nCc: qemu-stable@nongnu.org\nReported-by: Tim Hardeneck <thardeck@suse.de>\nSigned-off-by: Gerd Hoffmann <kraxel@redhat.com>\nSigned-off-by: Blue Swirl <blauwirbel@gmail.com>",
        "before_after_code_files": [
          "hw/vga.c||hw/vga.c",
          "qemu-pixman.c||qemu-pixman.c",
          "qemu-pixman.h||qemu-pixman.h",
          "ui/vnc-enc-tight.c||ui/vnc-enc-tight.c",
          "ui/vnc.c||ui/vnc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ui/vnc-enc-tight.c||ui/vnc-enc-tight.c",
            "ui/vnc.c||ui/vnc.c"
          ],
          "candidate": [
            "ui/vnc-enc-tight.c||ui/vnc-enc-tight.c",
            "ui/vnc.c||ui/vnc.c"
          ]
        }
      },
      "candidate_diff": {
        "hw/vga.c||hw/vga.c": [
          "File: hw/vga.c -> hw/vga.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2413:     }",
          "2414:     linebuf = qemu_pixman_linebuf_create(PIXMAN_BE_r8g8b8, width);",
          "2415:     for (y = 0; y < height; y++) {",
          "2417:         clearerr(f);",
          "2418:         ret = fwrite(pixman_image_get_data(linebuf), 1,",
          "2419:                      pixman_image_get_stride(linebuf), f);",
          "",
          "[Removed Lines]",
          "2416:         qemu_pixman_linebuf_fill(linebuf, ds->image, width, y);",
          "",
          "[Added Lines]",
          "2416:         qemu_pixman_linebuf_fill(linebuf, ds->image, width, 0, y);",
          "",
          "---------------"
        ],
        "qemu-pixman.c||qemu-pixman.c": [
          "File: qemu-pixman.c -> qemu-pixman.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: }",
          "54: void qemu_pixman_linebuf_fill(pixman_image_t *linebuf, pixman_image_t *fb,",
          "56: {",
          "57:     pixman_image_composite(PIXMAN_OP_SRC, fb, NULL, linebuf,",
          "59: }",
          "61: pixman_image_t *qemu_pixman_mirror_create(pixman_format_code_t format,",
          "",
          "[Removed Lines]",
          "55:                               int width, int y)",
          "58:                            0, y, 0, 0, 0, 0, width, 1);",
          "",
          "[Added Lines]",
          "55:                               int width, int x, int y)",
          "58:                            x, y, 0, 0, 0, 0, width, 1);",
          "",
          "---------------"
        ],
        "qemu-pixman.h||qemu-pixman.h": [
          "File: qemu-pixman.h -> qemu-pixman.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: pixman_image_t *qemu_pixman_linebuf_create(pixman_format_code_t format,",
          "32:                                            int width);",
          "33: void qemu_pixman_linebuf_fill(pixman_image_t *linebuf, pixman_image_t *fb,",
          "35: pixman_image_t *qemu_pixman_mirror_create(pixman_format_code_t format,",
          "36:                                           pixman_image_t *image);",
          "37: void qemu_pixman_image_unref(pixman_image_t *image);",
          "",
          "[Removed Lines]",
          "34:                               int width, int y);",
          "",
          "[Added Lines]",
          "34:                               int width, int x, int y);",
          "",
          "---------------"
        ],
        "ui/vnc-enc-tight.c||ui/vnc-enc-tight.c": [
          "File: ui/vnc-enc-tight.c -> ui/vnc-enc-tight.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1212:     buf = (uint8_t *)pixman_image_get_data(linebuf);",
          "1213:     row[0] = buf;",
          "1214:     for (dy = 0; dy < h; dy++) {",
          "1216:         jpeg_write_scanlines(&cinfo, row, 1);",
          "1217:     }",
          "1218:     qemu_pixman_image_unref(linebuf);",
          "",
          "[Removed Lines]",
          "1215:         qemu_pixman_linebuf_fill(linebuf, vs->vd->server, w, dy);",
          "",
          "[Added Lines]",
          "1215:         qemu_pixman_linebuf_fill(linebuf, vs->vd->server, w, x, y + dy);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1356:         if (color_type == PNG_COLOR_TYPE_PALETTE) {",
          "1357:             memcpy(buf, vs->tight.tight.buffer + (dy * w), w);",
          "1358:         } else {",
          "1360:         }",
          "1361:         png_write_row(png_ptr, buf);",
          "1362:     }",
          "",
          "[Removed Lines]",
          "1359:             qemu_pixman_linebuf_fill(linebuf, vs->vd->server, w, dy);",
          "",
          "[Added Lines]",
          "1359:             qemu_pixman_linebuf_fill(linebuf, vs->vd->server, w, x, y + dy);",
          "",
          "---------------"
        ],
        "ui/vnc.c||ui/vnc.c": [
          "File: ui/vnc.c -> ui/vnc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2569:             uint8_t *server_ptr;",
          "2571:             if (vd->guest.format != VNC_SERVER_FB_FORMAT) {",
          "2573:                 guest_ptr = (uint8_t *)pixman_image_get_data(tmpbuf);",
          "2574:             } else {",
          "2575:                 guest_ptr = guest_row;",
          "",
          "[Removed Lines]",
          "2572:                 qemu_pixman_linebuf_fill(tmpbuf, vd->guest.fb, width, y);",
          "",
          "[Added Lines]",
          "2572:                 qemu_pixman_linebuf_fill(tmpbuf, vd->guest.fb, width, 0, y);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "94362682d31eb7c9bfd6bf74cd615d0616a09361",
      "candidate_info": {
        "commit_hash": "94362682d31eb7c9bfd6bf74cd615d0616a09361",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/94362682d31eb7c9bfd6bf74cd615d0616a09361",
        "files": [
          "ui/vnc-enc-hextile.c",
          "ui/vnc-enc-tight.c",
          "ui/vnc.c"
        ],
        "message": "pixman/vnc: remove dead code.\n\nSwitching the vnc server framebuffer to use 32bpp unconditionally\nturns the code bits which handle 8 and 16 bpp into dead code.\nRemove them.\n\nSigned-off-by: Gerd Hoffmann <kraxel@redhat.com>",
        "before_after_code_files": [
          "ui/vnc-enc-hextile.c||ui/vnc-enc-hextile.c",
          "ui/vnc-enc-tight.c||ui/vnc-enc-tight.c",
          "ui/vnc.c||ui/vnc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ui/vnc-enc-hextile.c||ui/vnc-enc-hextile.c",
            "ui/vnc-enc-tight.c||ui/vnc-enc-tight.c",
            "ui/vnc.c||ui/vnc.c"
          ],
          "candidate": [
            "ui/vnc-enc-hextile.c||ui/vnc-enc-hextile.c",
            "ui/vnc-enc-tight.c||ui/vnc-enc-tight.c",
            "ui/vnc.c||ui/vnc.c"
          ]
        }
      },
      "candidate_diff": {
        "ui/vnc-enc-hextile.c||ui/vnc-enc-hextile.c": [
          "File: ui/vnc-enc-hextile.c -> ui/vnc-enc-hextile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:     ptr[1] = (((w - 1) & 0x0F) << 4) | ((h - 1) & 0x0F);",
          "33: }",
          "43: #define BPP 32",
          "44: #include \"vnc-enc-hextile-template.h\"",
          "45: #undef BPP",
          "59: #define GENERIC",
          "60: #define BPP 32",
          "61: #include \"vnc-enc-hextile-template.h\"",
          "",
          "[Removed Lines]",
          "35: #define BPP 8",
          "36: #include \"vnc-enc-hextile-template.h\"",
          "37: #undef BPP",
          "39: #define BPP 16",
          "40: #include \"vnc-enc-hextile-template.h\"",
          "41: #undef BPP",
          "47: #define GENERIC",
          "48: #define BPP 8",
          "49: #include \"vnc-enc-hextile-template.h\"",
          "50: #undef BPP",
          "51: #undef GENERIC",
          "53: #define GENERIC",
          "54: #define BPP 16",
          "55: #include \"vnc-enc-hextile-template.h\"",
          "56: #undef BPP",
          "57: #undef GENERIC",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89: {",
          "90:     if (!generic) {",
          "91:         switch (VNC_SERVER_FB_BITS) {",
          "98:         case 32:",
          "99:             vs->hextile.send_tile = send_hextile_tile_32;",
          "100:             break;",
          "101:         }",
          "102:     } else {",
          "103:         switch (VNC_SERVER_FB_BITS) {",
          "110:         case 32:",
          "111:             vs->hextile.send_tile = send_hextile_tile_generic_32;",
          "112:             break;",
          "",
          "[Removed Lines]",
          "92:         case 8:",
          "93:             vs->hextile.send_tile = send_hextile_tile_8;",
          "94:             break;",
          "95:         case 16:",
          "96:             vs->hextile.send_tile = send_hextile_tile_16;",
          "97:             break;",
          "104:         case 8:",
          "105:             vs->hextile.send_tile = send_hextile_tile_generic_8;",
          "106:             break;",
          "107:         case 16:",
          "108:             vs->hextile.send_tile = send_hextile_tile_generic_16;",
          "109:             break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ui/vnc-enc-tight.c||ui/vnc-enc-tight.c": [
          "File: ui/vnc-enc-tight.c -> ui/vnc-enc-tight.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "704:     }",
          "710: static bool check_solid_tile(VncState *vs, int x, int y, int w, int h,",
          "711:                              uint32_t* color, bool samecolor)",
          "",
          "[Removed Lines]",
          "674: #define DEFINE_CHECK_SOLID_FUNCTION(bpp)                                \\",
          "675:                                                                         \\",
          "676:     static bool                                                         \\",
          "677:     check_solid_tile##bpp(VncState *vs, int x, int y, int w, int h,     \\",
          "678:                           uint32_t* color, bool samecolor)              \\",
          "679:     {                                                                   \\",
          "680:         VncDisplay *vd = vs->vd;                                        \\",
          "681:         uint##bpp##_t *fbptr;                                           \\",
          "682:         uint##bpp##_t c;                                                \\",
          "683:         int dx, dy;                                                     \\",
          "684:                                                                         \\",
          "685:         fbptr = vnc_server_fb_ptr(vd, x, y);                            \\",
          "686:                                                                         \\",
          "687:         c = *fbptr;                                                     \\",
          "688:         if (samecolor && (uint32_t)c != *color) {                       \\",
          "689:             return false;                                               \\",
          "690:         }                                                               \\",
          "691:                                                                         \\",
          "692:         for (dy = 0; dy < h; dy++) {                                    \\",
          "693:             for (dx = 0; dx < w; dx++) {                                \\",
          "694:                 if (c != fbptr[dx]) {                                   \\",
          "695:                     return false;                                       \\",
          "696:                 }                                                       \\",
          "697:             }                                                           \\",
          "698:             fbptr = (uint##bpp##_t *)                                   \\",
          "699:                 ((uint8_t *)fbptr + vnc_server_fb_stride(vd));          \\",
          "700:         }                                                               \\",
          "701:                                                                         \\",
          "703:         return true;                                                    \\",
          "706: DEFINE_CHECK_SOLID_FUNCTION(32)",
          "707: DEFINE_CHECK_SOLID_FUNCTION(16)",
          "708: DEFINE_CHECK_SOLID_FUNCTION(8)",
          "",
          "[Added Lines]",
          "674: static bool",
          "675: check_solid_tile32(VncState *vs, int x, int y, int w, int h,",
          "676:                    uint32_t *color, bool samecolor)",
          "677: {",
          "678:     VncDisplay *vd = vs->vd;",
          "679:     uint32_t *fbptr;",
          "680:     uint32_t c;",
          "681:     int dx, dy;",
          "683:     fbptr = vnc_server_fb_ptr(vd, x, y);",
          "685:     c = *fbptr;",
          "686:     if (samecolor && (uint32_t)c != *color) {",
          "687:         return false;",
          "690:     for (dy = 0; dy < h; dy++) {",
          "691:         for (dx = 0; dx < w; dx++) {",
          "692:             if (c != fbptr[dx]) {",
          "693:                 return false;",
          "694:             }",
          "695:         }",
          "696:         fbptr = (uint32_t *)",
          "697:             ((uint8_t *)fbptr + vnc_server_fb_stride(vd));",
          "698:     }",
          "701:     return true;",
          "702: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "713:     switch (VNC_SERVER_FB_BYTES) {",
          "714:     case 4:",
          "715:         return check_solid_tile32(vs, x, y, w, h, color, samecolor);",
          "720:     }",
          "721: }",
          "",
          "[Removed Lines]",
          "716:     case 2:",
          "717:         return check_solid_tile16(vs, x, y, w, h, color, samecolor);",
          "718:     default:",
          "719:         return check_solid_tile8(vs, x, y, w, h, color, samecolor);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ui/vnc.c||ui/vnc.c": [
          "File: ui/vnc.c -> ui/vnc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "666:             vnc_convert_pixel(vs, buf, pixels[i]);",
          "667:             vnc_write(vs, buf, vs->client_pf.bytes_per_pixel);",
          "668:         }",
          "687:     }",
          "688: }",
          "",
          "[Removed Lines]",
          "669:     } else if (VNC_SERVER_FB_BYTES == 2) {",
          "670:         uint16_t *pixels = pixels1;",
          "671:         int n, i;",
          "672:         n = size >> 1;",
          "673:         for (i = 0; i < n; i++) {",
          "674:             vnc_convert_pixel(vs, buf, pixels[i]);",
          "675:             vnc_write(vs, buf, vs->client_pf.bytes_per_pixel);",
          "676:         }",
          "677:     } else if (VNC_SERVER_FB_BYTES == 1) {",
          "678:         uint8_t *pixels = pixels1;",
          "679:         int n, i;",
          "680:         n = size;",
          "681:         for (i = 0; i < n; i++) {",
          "682:             vnc_convert_pixel(vs, buf, pixels[i]);",
          "683:             vnc_write(vs, buf, vs->client_pf.bytes_per_pixel);",
          "684:         }",
          "685:     } else {",
          "686:         fprintf(stderr, \"%s: VncState color depth not supported\\n\", __func__);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}