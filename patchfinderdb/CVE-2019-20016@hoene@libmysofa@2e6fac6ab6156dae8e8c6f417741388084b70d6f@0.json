{
  "cve_id": "CVE-2019-20016",
  "cve_desc": "libmysofa before 2019-11-24 does not properly restrict recursive function calls, as demonstrated by reports of stack consumption in readOHDRHeaderMessageDatatype in dataobject.c and directblockRead in fractalhead.c. NOTE: a download of v0.9 after 2019-12-06 should fully remediate this issue.",
  "repo": "hoene/libmysofa",
  "patch_hash": "2e6fac6ab6156dae8e8c6f417741388084b70d6f",
  "patch_info": {
    "commit_hash": "2e6fac6ab6156dae8e8c6f417741388084b70d6f",
    "repo": "hoene/libmysofa",
    "commit_url": "https://github.com/hoene/libmysofa/commit/2e6fac6ab6156dae8e8c6f417741388084b70d6f",
    "files": [
      "src/hdf/fractalhead.c",
      "src/hdf/reader.h",
      "src/hrtf/reader.c"
    ],
    "message": "Fixed recursive function calls",
    "before_after_code_files": [
      "src/hdf/fractalhead.c||src/hdf/fractalhead.c",
      "src/hdf/reader.h||src/hdf/reader.h",
      "src/hrtf/reader.c||src/hrtf/reader.c"
    ]
  },
  "patch_diff": {
    "src/hdf/fractalhead.c||src/hdf/fractalhead.c": [
      "File: src/hdf/fractalhead.c -> src/hdf/fractalhead.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "33:  UNUSED(block_size);",
      "34:  UNUSED(block_offset);",
      "37:  if (fread(buf, 1, 4, reader->fhd) != 4 || strncmp(buf, \"FHDB\", 4)) {",
      "38:   log(\"cannot read signature of fractal heap indirect block\\n\");",
      "39:   return MYSOFA_INVALID_FORMAT;",
      "40:  }",
      "43:  if (fgetc(reader->fhd) != 0) {",
      "44:   log(\"object FHDB must have version 0\\n\");",
      "",
      "[Removed Lines]",
      "41:  log(\"%08\" PRIX64 \" %.4s\\n\", (uint64_t )ftell(reader->fhd) - 4, buf);",
      "",
      "[Added Lines]",
      "36:  if(reader->recursive_counter >= 10)",
      "37:   return MYSOFA_INVALID_FORMAT;",
      "38:  else",
      "39:   reader->recursive_counter++;",
      "46:  log(\"%08\" PRIX64 \" %.4s stack %d\\n\", (uint64_t )ftell(reader->fhd) - 4, buf, reader->recursive_counter);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "219:  } while (typeandversion != 0);",
      "221:  return MYSOFA_OK;",
      "222: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "226:  reader->recursive_counter--;",
      "",
      "---------------"
    ],
    "src/hdf/reader.h||src/hdf/reader.h": [
      "File: src/hdf/reader.h -> src/hdf/reader.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "182:  struct SUPERBLOCK superblock;",
      "184:  struct GCOL *gcol;",
      "185: };",
      "187: int validAddress(struct READER *reader, uint64_t address);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "186:  int recursive_counter;",
      "",
      "---------------"
    ],
    "src/hrtf/reader.c||src/hrtf/reader.c": [
      "File: src/hrtf/reader.c -> src/hrtf/reader.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "244:  }",
      "245:  reader.gcol = NULL;",
      "246:  reader.all = NULL;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "247:  reader.recursive_counter = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9b016f7699169a4bb1eba2fdf5b29ab11d584856",
      "candidate_info": {
        "commit_hash": "9b016f7699169a4bb1eba2fdf5b29ab11d584856",
        "repo": "hoene/libmysofa",
        "commit_url": "https://github.com/hoene/libmysofa/commit/9b016f7699169a4bb1eba2fdf5b29ab11d584856",
        "files": [
          "src/hdf/dataobject.c",
          "src/hdf/fractalhead.c",
          "src/hrtf/check.c",
          "src/tests/check.c",
          "src/tests/easy.c",
          "src/tests/interpolate.c",
          "src/tests/loudness.c",
          "src/tests/minphase.c",
          "src/tests/neighbors.c",
          "src/tests/sofa2json.c"
        ],
        "message": "Fixed external tests",
        "before_after_code_files": [
          "src/hdf/dataobject.c||src/hdf/dataobject.c",
          "src/hdf/fractalhead.c||src/hdf/fractalhead.c",
          "src/hrtf/check.c||src/hrtf/check.c",
          "src/tests/check.c||src/tests/check.c",
          "src/tests/easy.c||src/tests/easy.c",
          "src/tests/interpolate.c||src/tests/interpolate.c",
          "src/tests/loudness.c||src/tests/loudness.c",
          "src/tests/minphase.c||src/tests/minphase.c",
          "src/tests/neighbors.c||src/tests/neighbors.c",
          "src/tests/sofa2json.c||src/tests/sofa2json.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/hdf/fractalhead.c||src/hdf/fractalhead.c"
          ],
          "candidate": [
            "src/hdf/fractalhead.c||src/hdf/fractalhead.c"
          ]
        }
      },
      "candidate_diff": {
        "src/hdf/dataobject.c||src/hdf/dataobject.c": [
          "File: src/hdf/dataobject.c -> src/hdf/dataobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "603:   int i, j;",
          "605:   uint16_t filter_identification_value, flags, number_client_data_values;",
          "606:   uint32_t client_data;",
          "607:   uint64_t maximum_compact_value, minimum_dense_value, number_of_entries,",
          "",
          "[Removed Lines]",
          "602: static int readOHDRHeaderMessageFilterPipeline(struct READER *reader) {",
          "604:   uint8_t filters;",
          "",
          "[Added Lines]",
          "602: static int readOHDRHeaderMessageFilterPipelineV1(struct READER *reader, uint8_t filters) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "614:   UNUSED(number_of_entries);",
          "615:   UNUSED(length_of_entries);",
          "622:   }",
          "633:   for (i = 0; i < filters; i++) {",
          "634:     filter_identification_value = (uint16_t)readValue(reader, 2);",
          "",
          "[Removed Lines]",
          "617:   if (fgetc(reader->fhd) != 2) {",
          "619:     mylog(\"object OHDR filter pipeline message must have version 2\\n\");",
          "620:     return MYSOFA_INVALID_FORMAT;",
          "624:   filters = (uint8_t)fgetc(reader->fhd);",
          "625:   if (filters > 32) {",
          "627:     mylog(\"object OHDR filter pipeline message has too many filters: %d\\n\",",
          "628:           filters);",
          "629:     return MYSOFA_INVALID_FORMAT;",
          "631:   }",
          "",
          "[Added Lines]",
          "616:   for (i = 0; i < filters; i++) {",
          "617:     filter_identification_value = (uint16_t)readValue(reader, 2);",
          "618:     switch (filter_identification_value) {",
          "619:     case 1:",
          "620:     case 2:",
          "621:       break;",
          "622:     default:",
          "624:       mylog(\"object OHDR filter pipeline message contains unsupported filter: \"",
          "625:             \"%d\\n\",",
          "626:             filter_identification_value);",
          "627:       return MYSOFA_INVALID_FORMAT;",
          "629:     }",
          "630:     mylog(\"  filter %d\\n\", filter_identification_value);",
          "631:     flags = (uint16_t)readValue(reader, 2);",
          "632:     number_client_data_values = (uint16_t)readValue(reader, 2);",
          "633:     if (number_client_data_values > 0x1000)",
          "634:       return MYSOFA_UNSUPPORTED_FORMAT; // LCOV_EXCL_LINE",
          "636:     for (j = 0; j < number_client_data_values; j++) {",
          "637:       client_data = readValue(reader, 4);",
          "638:     }",
          "641:   return MYSOFA_OK;",
          "642: }",
          "645: static int readOHDRHeaderMessageFilterPipelineV2(struct READER *reader, uint8_t filters) {",
          "646:   int i, j;",
          "647:   uint16_t filter_identification_value, flags, number_client_data_values;",
          "648:   uint32_t client_data;",
          "649:   uint64_t maximum_compact_value, minimum_dense_value, number_of_entries,",
          "650:       length_of_entries;",
          "652:   UNUSED(flags);",
          "653:   UNUSED(client_data);",
          "654:   UNUSED(maximum_compact_value);",
          "655:   UNUSED(minimum_dense_value);",
          "656:   UNUSED(number_of_entries);",
          "657:   UNUSED(length_of_entries);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "658:   return MYSOFA_OK;",
          "659: }",
          "661: int readDataVar(struct READER *reader, struct DATAOBJECT *data,",
          "662:                 struct DATATYPE *dt, struct DATASPACE *ds) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "687: static int readOHDRHeaderMessageFilterPipeline(struct READER *reader) {",
          "688:   uint8_t filterversion, filters;",
          "690:   filterversion = fgetc(reader->fhd);",
          "692:   filters = (uint8_t)fgetc(reader->fhd);",
          "693:   if (filters > 32) {",
          "695:     mylog(\"object OHDR filter pipeline message has too many filters: %d\\n\",",
          "696:           filters);",
          "697:     return MYSOFA_INVALID_FORMAT;",
          "699:   }",
          "703:   switch(filterversion) {",
          "704:   case 1:",
          "705:     return readOHDRHeaderMessageFilterPipelineV1(reader, filters);",
          "706:   case 2:",
          "707:     return readOHDRHeaderMessageFilterPipelineV2(reader, filters);",
          "708:   default:",
          "710:     mylog(\"object OHDR filter pipeline message must have version 2 not %d\\n\",filterversion);",
          "711:     return MYSOFA_INVALID_FORMAT;",
          "713:   }",
          "714: }",
          "",
          "---------------"
        ],
        "src/hdf/fractalhead.c||src/hdf/fractalhead.c": [
          "File: src/hdf/fractalhead.c -> src/hdf/fractalhead.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:   char buf[5], *name, *value;",
          "24:   int size, offset_size, length_size, err, len;",
          "25:   uint8_t typeandversion;",
          "28:   long store;",
          "29:   struct DIR *dir;",
          "30:   struct MYSOFA_ATTRIBUTE *attr;",
          "",
          "[Removed Lines]",
          "26:   uint64_t unknown, heap_header_address, block_offset, block_size, offset,",
          "27:       length;",
          "",
          "[Added Lines]",
          "26:   uint64_t unknown1, unknown2, unknown3, unknown4, heap_header_address,",
          "27:       block_offset, block_size, offset, length;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:   mylog(\" %d %\" PRIu64 \" %d\\n\", size, block_offset, offset_size);",
          "79:    |.FHDB.@.........|",
          "101:   00002730  00 00 00 00 00 00 00 46  48 44 42 00 97 02 00 00  |.......FHDB.....|",
          "",
          "[Removed Lines]",
          "81:    00003e10  00 00 00 83 8d ac f6",
          "83:    >03  00 0c 00 08 00 04 00 00  |................|",
          "85:    00003e20  43 6f 6e 76 65 6e 74 69  6f 6e 73 00",
          "87:    13 00 00 00  |Conventions.....|",
          "89:    00003e30  04 00 00 00 02 00 00 00  53 4f 46 41< 03",
          "90:    00 08 00  |........SOFA....| 00003e40  08 00 04 00 00 56 65 72  73 69 6f 6e",
          "91:    00 13 00 00  |.....Version....| 00003e50  00 03 00 00 00 02 00 00  00 30 2e",
          "92:    36 03 00 10 00  |.........0.6....| 00003e60  08 00 04 00 00 53 4f 46  41 43",
          "93:    6f 6e 76 65 6e 74  |.....SOFAConvent| 00003e70  69 6f 6e 73 00 13 00 00  00",
          "94:    13 00 00 00 02 00 00  |ions............| 00003e80  00 53 69 6d 70 6c 65 46 72",
          "95:    65 65 46 69 65 6c 64  |.SimpleFreeField| 00003e90  48 52 49 52 03 00 17 00 08",
          "96:    00 04 00 00 53 4f 46  |HRIR.........SOF| 00003ea0  41 43 6f 6e 76 65 6e 74 69",
          "97:    6f 6e 73 56 65 72 73  |AConventionsVers| 00003eb0  69 6f 6e 00 13 00 00 00 03",
          "98:    00 00 00 02 00 00 00  |ion.............|",
          "",
          "[Added Lines]",
          "78:    00003e00  00 46 48 44 42 00 40 02  00 00 00 00 00 00 00 00",
          "80:    00003e10  00 00 00 83 8d ac f6 03  00 0c 00 08 00 04 00 00",
          "81:    |................|",
          "82:    00003e20  43 6f 6e 76 65 6e 74 69  6f 6e 73 00 13 00 00 00",
          "83:    |Conventions.....|",
          "84:    00003e30  04 00 00 00 02 00 00 00  53 4f 46 41 03 00 08 00",
          "85:    |........SOFA....|",
          "86:    00003e40  08 00 04 00 00 56 65 72  73 69 6f 6e 00 13 00 00",
          "87:    |.....Version....|",
          "88:    00003e50  00 03 00 00 00 02 00 00  00 30 2e 36 03 00 10 00",
          "89:    |.........0.6....|",
          "90:    00003e60  08 00 04 00 00 53 4f 46  41 43 6f 6e 76 65 6e 74",
          "91:    |.....SOFAConvent|",
          "92:    00003e70  69 6f 6e 73 00 13 00 00  00 13 00 00 00 02 00 00",
          "93:    |ions............|",
          "94:    00003e80  00 53 69 6d 70 6c 65 46  72 65 65 46 69 65 6c 64",
          "95:    |.SimpleFreeField|",
          "96:    00003e90  48 52 49 52 03 00 17 00  08 00 04 00 00 53 4f 46",
          "97:    |HRIR.........SOF|",
          "98:    00003ea0  41 43 6f 6e 76 65 6e 74  69 6f 6e 73 56 65 72 73",
          "99:    |AConventionsVers|",
          "100:    00003eb0  69 6f 6e 00 13 00 00 00  03 00 00 00 02 00 00 00",
          "101:    |ion.............|",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "145:       }",
          "150:         value = NULL;",
          "152:         if (!(value = malloc(len + 1))) {",
          "153:           free(name);              // LCOV_EXCL_LINE",
          "154:           return MYSOFA_NO_MEMORY; // LCOV_EXCL_LINE",
          "",
          "[Removed Lines]",
          "148:       unknown = readValue(reader, 6);",
          "149:       if (unknown == 0x000000020200)",
          "151:       else if (unknown == 0x000000020000) {",
          "",
          "[Added Lines]",
          "151:       unknown1 = readValue(reader, 6);",
          "152:       if (unknown1 == 0x000000020200)",
          "154:       else if (unknown1 == 0x000000020000) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "159:           return MYSOFA_READ_ERROR; // LCOV_EXCL_LINE",
          "160:         }",
          "161:         value[len] = 0;",
          "163:         if (!(value = malloc(5))) {",
          "164:           free(name);              // LCOV_EXCL_LINE",
          "165:           return MYSOFA_NO_MEMORY; // LCOV_EXCL_LINE",
          "166:         }",
          "167:         strcpy(value, \"\");",
          "168:       } else {",
          "170:         free(name);",
          "172:         return MYSOFA_OK;",
          "",
          "[Removed Lines]",
          "162:       } else if (unknown == 0x20000020000) {",
          "169:         mylog(\"FHDB type 3 unsupported values: %12\" PRIX64 \"\\n\", unknown);",
          "",
          "[Added Lines]",
          "165:       } else if (unknown1 == 0x20000020000) {",
          "172:         mylog(\"FHDB type 3 unsupported values: %12\" PRIX64 \"\\n\", unknown1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "184:       attr->value = value;",
          "185:       attr->next = dataobject->attributes;",
          "186:       dataobject->attributes = attr;",
          "188:     } else if (typeandversion == 1) {",
          "192:       case 0:",
          "197:         len = fgetc(reader->fhd);",
          "198:         if (len < 0)",
          "",
          "[Removed Lines]",
          "190:       unknown = readValue(reader, 4);",
          "191:       switch (unknown) {",
          "194:         unknown = readValue(reader, 2);",
          "195:         assert(unknown == 0x0000);",
          "",
          "[Added Lines]",
          "193:       unknown2 = readValue(reader, 4);",
          "194:       switch (unknown2) {",
          "198:         unknown3 = readValue(reader, 2);",
          "199:         assert(unknown3 == 0x0000);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "243:           return errno; // LCOV_EXCL_LINE",
          "244:         break;",
          "245:       case 0x00080008:",
          "249:     00002750  00 08 00 08 00 5f 4e 43  50 72 6f 70 65 72 74 69",
          "253:     00002770  00 00 00 00 00 76 65 72  73 69 6f 6e 3d 31 7c 6e",
          "267:         if (!(name = malloc(MAX_NAME_LENGTH)))",
          "268:           return MYSOFA_NO_MEMORY; // LCOV_EXCL_LINE",
          "269:         len = -1;",
          "",
          "[Removed Lines]",
          "248:             > 01 00 0e  |...........\\....|",
          "250:     |....._NCProperti| 00002760  65 73 00 00 00 13 00 00  00 37 00 00 00 01 00",
          "251:     00  |es.......7......|",
          "254:     |.....version=1|n| 00002780  65 74 63 64 66 6c 69 62  76 65 72 73 69 6f 6e",
          "255:     3d  |etcdflibversion=| 00002790  34 2e 36 2e 31 7c 68 64  66 35 6c 69 62 76",
          "256:     65 72  |4.6.1|hdf5libver| 000027a0  73 69 6f 6e 3d 31 2e 31  30 2e 34 00 01",
          "257:     00 0c 00  |sion=1.10.4.....| 000027b0  08 00 08 00 43 6f 6e 76  65 6e 74 69",
          "258:     6f 6e 73 00  |....Conventions.| 000027c0  00 00 00 00 13 00 00 00  04 00 00",
          "259:     00 01 00 00 00  |................| 000027d0  00 00 00 00 53 4f 46 41  01 00",
          "260:     08 00 08 00 08 00  |....SOFA........| 000027e0  56 65 72 73 69 6f 6e 00  13",
          "261:     00 00 00 03 00 00 00  |Version.........| 000027f0  01 00 00 00 00 00 00 00",
          "262:     31 2e 30 01 00 10 00 08  |........1.0.....| 00002800  00 08 00 53 4f 46 41",
          "263:     43  6f 6e 76 65 6e 74 69 6f  |...SOFAConventio| 00002810  6e 73 00 13 00 00",
          "264:     00 13  00 00 00 01 00 00 00 00  |ns..............| 00002820  00 00 00 53 69",
          "265:     6d 70 6c  65 46 72 65 65 46 69 65  |...SimpleFreeFie|",
          "",
          "[Added Lines]",
          "251:                                                       01 00 0e",
          "252:     |...........\\....|",
          "254:     |....._NCProperti|",
          "255:     00002760  65 73 00 00 00 13 00 00  00 37 00 00 00 01 00 00",
          "256:     |es.......7......|",
          "258:     |.....version=1|n|",
          "259:     00002780  65 74 63 64 66 6c 69 62  76 65 72 73 69 6f 6e 3d",
          "260:     |etcdflibversion=|",
          "261:     00002790  34 2e 36 2e 31 7c 68 64  66 35 6c 69 62 76 65 72",
          "262:     |4.6.1|hdf5libver|",
          "263:     000027a0  73 69 6f 6e 3d 31 2e 31  30 2e 34 00 01 00 0c 00",
          "264:     |sion=1.10.4.....|",
          "265:     000027b0  08 00 08 00 43 6f 6e 76  65 6e 74 69 6f 6e 73 00",
          "266:     |....Conventions.|",
          "267:     000027c0  00 00 00 00 13 00 00 00  04 00 00 00 01 00 00 00",
          "268:     |................|",
          "269:     000027d0  00 00 00 00 53 4f 46 41  01 00 08 00 08 00 08 00",
          "270:     |....SOFA........|",
          "271:     000027e0  56 65 72 73 69 6f 6e 00  13 00 00 00 03 00 00 00",
          "272:     |Version.........|",
          "273:     000027f0  01 00 00 00 00 00 00 00 31 2e 30 01 00 10 00 08",
          "274:     |........1.0.....|",
          "275:     00002800  00 08 00 53 4f 46 41 43  6f 6e 76 65 6e 74 69 6f",
          "276:     |...SOFAConventio|",
          "277:     00002810  6e 73 00 13 00 00 00 13  00 00 00 01 00 00 00 00",
          "278:     |ns..............|",
          "279:     00002820  00 00 00 53 69 6d 70 6c  65 46 72 65 65 46 69 65",
          "280:     |...SimpleFreeFie|",
          "284:         00004610           08 00 04 00 41  75 74 68 6f 72 43 6f 6e",
          "285:         |.......AuthorCon|",
          "286:         00004620  74 61 63 74 00 00 00 13  00 00 00 01 00 00 00 02",
          "287:         |tact............|",
          "288:         00004630  00 00 02 00 00 00 00 01  00 08 00 08 00 04 00 43",
          "289:         |...............C|",
          "290:         00004640  6f 6d 6d 65 6e 74 00 13  00 00 00 01 00 00 00 02",
          "291:         |omment..........|",
          "292:         00004650  00 00 02 00 00 00 00 01  00 09 00 08 00 08 00 44",
          "293:         |...............D|",
          "294:         00004660  61 74 61 54 79 70 65 00  00 00 00 00 00 00 00 13",
          "295:         |ataType.........|",
          "296:         00004670  00 00 00 03 00 00 00 01  00 00 00 00 00 00 00 46",
          "297:         |...............F|",
          "298:         00004680  49 52 01 00 08 00 08 00  08 00 48 69 73 74 6f 72",
          "299:         |IR........Histor|",
          "300:         00004690  79 00 13 00 00 00 34 00  00 00 01 00 00 00 00 00",
          "301:         |y.....4.........|",
          "302:         000046a0  00 00 43 6f 6e 76 65 72  74 65 64 20 66 72 6f 6d",
          "303:         |..Converted from|",
          "304:         000046b0  20 74 68 65 20 4d 49 54  20 66 6f 72 6d 61 74 0a",
          "305:         | the MIT format.|",
          "306:         000046c0  55 70 67 72 61 64 65 64  20 66 72 6f 6d 20 53 4f",
          "307:         |Upgraded from SO|",
          "308:         000046d0  46 41 20 30 2e 36 01 00  08 00 08 00 08 00 4c 69",
          "309:         |FA 0.6........Li|",
          "310:         000046e0  63 65 6e 73 65 00 13 00  00 00 32 00 00 00 01 00",
          "311:         |cense.....2.....|",
          "312:         000046f0  00 00 00 00 00 00 4e 6f  20 6c 69 63 65 6e 73 65",
          "313:         |......No license|",
          "314:         00004700  20 70 72 6f 76 69 64 65  64 2c 20 61 73 6b 20 74  | provided,",
          "315:         ask t| 00004710  68 65 20 61 75 74 68 6f  72 20 66 6f 72 20 70 65  |he",
          "316:         author for pe| 00004720  72 6d 69 73 73 69 6f 6e  01 00 0d 00 08 00 04",
          "317:         00  |rmission........| 00004730  4f 72 67 61 6e 69 7a 61  74 69 6f 6e 00",
          "318:         00 00 00  |Organization....| 00004740  13 00 00 00 01 00 00 00  02 00 00",
          "319:         02 00 00 00 00  |................| 00004750  01 00 0b 00 08 00 04 00  52",
          "320:         65 66 65 72 65 6e 63  |........Referenc| 00004760  65 73 00 00 00 00 00",
          "321:         00  13 00 00 00 01 00 00 00  |es..............| 00004770  02 00 00 02 00",
          "322:         00 00 00  01 00 09 00 08 00 08 00  |................| 00004780  52 6f 6f",
          "323:         6d 54 79 70 65  00 00 00 00 00 00 00 00  |RoomType........| 00004790  13",
          "324:         00 00 00 0a 00 00 00  01 00 00 00 00 00 00 00  |................|",
          "325:         000047a0  66 72 65 65 20 66 69 65  6c 64 01 00 07 00 08 00  |free",
          "326:         field......| 000047b0  04 00 4f 72 69 67 69 6e  00 00 13 00 00 00 01 00",
          "327:         |..Origin........| 000047c0  00 00 02 00 00 02 00 00  00 00 01 00 06 00",
          "328:         08 00  |................| 000047d0  04 00 54 69 74 6c 65 00  00 00 13 00",
          "329:         00 00 01 00  |..Title.........| 000047e0  00 00 02 00 00 02 00 00  00 00",
          "330:         00 00 00 00 00 00  |................| 000047f0  00 00 00 00 00 00 00 00",
          "331:         00 00 00 00 00 00 00 00  |................| 00004800  00 54 52 45 45 01",
          "332:         00 01  00 ff ff ff ff ff ff ff  |.TREE...........|",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "285:         mylog(\"name %d %s\\n\", len, name);",
          "287:         if (readValue(reader, 3) != 0x000000) {",
          "291:         }",
          "293:         len = (int)readValue(reader, 4);",
          "294:         if (len > 0x1000 || len < 0) {",
          "298:         }",
          "305:         }",
          "306:         if (!(value = malloc(len + 1))) {",
          "307:           free(name);              // LCOV_EXCL_LINE",
          "308:           return MYSOFA_NO_MEMORY; // LCOV_EXCL_LINE",
          "",
          "[Removed Lines]",
          "288:           mylog(\"FHDB type 3 unsupported values\"); // LCOV_EXCL_LINE",
          "289:           free(name);                              // LCOV_EXCL_LINE",
          "290:           return MYSOFA_UNSUPPORTED_FORMAT;        // LCOV_EXCL_LINE",
          "295:           mylog(\"FHDB type 3 unsupported values\"); // LCOV_EXCL_LINE",
          "296:           free(name);                              // LCOV_EXCL_LINE",
          "297:           return MYSOFA_UNSUPPORTED_FORMAT;        // LCOV_EXCL_LINE",
          "300:         unknown = (int)readValue(reader, 8);",
          "301:         if (unknown != 0x00000001) {",
          "302:           mylog(\"FHDB type 3 unsupported values\"); // LCOV_EXCL_LINE",
          "303:           free(name);                              // LCOV_EXCL_LINE",
          "304:           return MYSOFA_UNSUPPORTED_FORMAT;        // LCOV_EXCL_LINE",
          "",
          "[Added Lines]",
          "356:           mylog(\"FHDB type 3 unsupported values: 3bytes\"); // LCOV_EXCL_LINE",
          "357:           free(name);                                      // LCOV_EXCL_LINE",
          "358:           return MYSOFA_UNSUPPORTED_FORMAT;                // LCOV_EXCL_LINE",
          "363:           mylog(\"FHDB type 3 unsupported values: len \"); // LCOV_EXCL_LINE",
          "364:           free(name);                                    // LCOV_EXCL_LINE",
          "365:           return MYSOFA_UNSUPPORTED_FORMAT;              // LCOV_EXCL_LINE",
          "369:         unknown4 = (int)readValue(reader, 8);",
          "370:         if (unknown4 != 0x00000001 /*&& unknown4 != 0x02000002*/) {",
          "371:           mylog(\"FHDB type 3 unsupported values: unknown4 %08lX\\n\",",
          "372:                 unknown4);                  // LCOV_EXCL_LINE",
          "373:           free(name);                       // LCOV_EXCL_LINE",
          "374:           return MYSOFA_UNSUPPORTED_FORMAT; // LCOV_EXCL_LINE",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "333:       default:",
          "334:         mylog(\"FHDB type 1 unsupported values %08\" PRIX64 \" %\" PRIX64 \"\\n\",",
          "336:         return MYSOFA_UNSUPPORTED_FORMAT;",
          "338:       }",
          "340:     } else if (typeandversion != 0) {",
          "342:       mylog(\"fractal head unknown type %d\\n\", typeandversion);",
          "",
          "[Removed Lines]",
          "335:               unknown, (uint64_t)ftell(reader->fhd) - 4);",
          "",
          "[Added Lines]",
          "408:               unknown2, (uint64_t)ftell(reader->fhd) - 4);",
          "",
          "---------------"
        ],
        "src/hrtf/check.c||src/hrtf/check.c": [
          "File: src/hrtf/check.c -> src/hrtf/check.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include <string.h>",
          "7: static int compareValues(struct MYSOFA_ARRAY *array, const float *compare,",
          "11:     return 0;",
          "15:   return 1;",
          "16: }",
          "",
          "[Removed Lines]",
          "8:                          int elements) {",
          "9:   int i;",
          "10:   if (array->values == NULL || array->elements != elements)",
          "12:   for (i = 0; i < elements; i++)",
          "13:     if (!fequals(array->values[i], compare[i]))",
          "14:       return 0;",
          "",
          "[Added Lines]",
          "8:                          int elements, int size)",
          "9: {",
          "10:   int i, j;",
          "11:   if (array->values == NULL || array->elements != elements * size)",
          "13:   for (j = 0; j < array->elements;)",
          "14:     for (i = 0; i < elements; i++, j++)",
          "15:       if (!fequals(array->values[j], compare[i]))",
          "16:         return 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19: static const float array001[] = {0, 0, 1};",
          "20: static const float array100[] = {1, 0, 0};",
          "",
          "[Removed Lines]",
          "22: MYSOFA_EXPORT int mysofa_check(struct MYSOFA_HRTF *hrtf) {",
          "",
          "[Added Lines]",
          "24: MYSOFA_EXPORT int mysofa_check(struct MYSOFA_HRTF *hrtf)",
          "25: {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "51:   if (!verifyAttribute(hrtf->attributes, \"Conventions\", \"SOFA\") ||",
          "52:       !verifyAttribute(hrtf->attributes, \"SOFAConventions\",",
          "53:                        \"SimpleFreeFieldHRIR\") ||",
          "59:     return MYSOFA_INVALID_ATTRIBUTES; // LCOV_EXCL_LINE",
          "",
          "[Removed Lines]",
          "56:       !verifyAttribute(hrtf->attributes, \"DataType\", \"FIR\") ||",
          "57:       !verifyAttribute(hrtf->attributes, \"RoomType\", \"free field\"))",
          "",
          "[Added Lines]",
          "58:       !verifyAttribute(hrtf->attributes, \"DataType\", \"FIR\"))",
          "59:     return MYSOFA_INVALID_ATTRIBUTES; // LCOV_EXCL_LINE",
          "61:   if (!verifyAttribute(hrtf->attributes, \"RoomType\", \"free field\") &&",
          "62:       !verifyAttribute(hrtf->attributes, \"RoomType\", \"reverberant\") &&",
          "63:       !verifyAttribute(hrtf->attributes, \"RoomType\", \"shoebox\"))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "72:     if (!verifyAttribute(hrtf->ListenerView.attributes, \"DIMENSION_LIST\",",
          "73:                          \"I,C\"))",
          "77:         return MYSOFA_INVALID_FORMAT; // LCOV_EXCL_LINE",
          "81:         return MYSOFA_INVALID_FORMAT; // LCOV_EXCL_LINE",
          "83:       return MYSOFA_INVALID_COORDINATE_TYPE; // LCOV_EXCL_LINE",
          "84:   }",
          "",
          "[Removed Lines]",
          "71:   if (hrtf->ListenerView.values) {",
          "74:       return MYSOFA_INVALID_DIMENSION_LIST; // LCOV_EXCL_LINE",
          "75:     if (verifyAttribute(hrtf->ListenerView.attributes, \"Type\", \"cartesian\")) {",
          "76:       if (!compareValues(&hrtf->ListenerView, array100, 3))",
          "78:     } else if (verifyAttribute(hrtf->ListenerView.attributes, \"Type\",",
          "79:                                \"spherical\")) {",
          "80:       if (!compareValues(&hrtf->ListenerView, array001, 3))",
          "82:     } else",
          "",
          "[Added Lines]",
          "76:   if (hrtf->ListenerView.values)",
          "77:   {",
          "78:     int m = 1;",
          "81:     {",
          "82:       if (!verifyAttribute(hrtf->ListenerView.attributes, \"DIMENSION_LIST\",",
          "83:                            \"M,C\"))",
          "84:       {",
          "85:         return MYSOFA_INVALID_DIMENSION_LIST; // LCOV_EXCL_LINE",
          "86:       }",
          "87:       m = hrtf->M;",
          "88:     }",
          "89:     if (verifyAttribute(hrtf->ListenerView.attributes, \"Type\", \"cartesian\"))",
          "90:     {",
          "91:       if (!compareValues(&hrtf->ListenerView, array100, 3, m))",
          "93:     }",
          "94:     else if (verifyAttribute(hrtf->ListenerView.attributes, \"Type\",",
          "95:                              \"spherical\"))",
          "96:     {",
          "97:       if (!compareValues(&hrtf->ListenerView, array001, 3, m))",
          "99:     }",
          "100:     else",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "104:  return MYSOFA_INVALID_FORMAT;",
          "105: #endif",
          "108:   if (!verifyAttribute(hrtf->EmitterPosition.attributes, \"DIMENSION_LIST\",",
          "109:                        \"E,C,I\"))",
          "112:     return MYSOFA_ONLY_EMITTER_WITH_ECI_SUPPORTED; // LCOV_EXCL_LINE",
          "115:     if (!verifyAttribute(hrtf->DataDelay.attributes, \"DIMENSION_LIST\", \"I,R\") &&",
          "116:         !verifyAttribute(hrtf->DataDelay.attributes, \"DIMENSION_LIST\", \"M,R\"))",
          "117:       return MYSOFA_ONLY_DELAYS_WITH_IR_OR_MR_SUPPORTED; // LCOV_EXCL_LINE",
          "118:   }",
          "121:    sampling rate of 48000 However, so far, I have not seen any sofa files with",
          "",
          "[Removed Lines]",
          "110:     return MYSOFA_ONLY_EMITTER_WITH_ECI_SUPPORTED; // LCOV_EXCL_LINE",
          "111:   if (!compareValues(&hrtf->EmitterPosition, array000, 3))",
          "114:   if (hrtf->DataDelay.values) {",
          "",
          "[Added Lines]",
          "125:   int m = 1;",
          "128:   {",
          "129:     if (!verifyAttribute(hrtf->EmitterPosition.attributes, \"DIMENSION_LIST\",",
          "130:                          \"E,C,M\"))",
          "131:     {",
          "132:       return MYSOFA_ONLY_EMITTER_WITH_ECI_SUPPORTED; // LCOV_EXCL_LINE",
          "133:     }",
          "134:     m = hrtf->M;",
          "135:   }",
          "137:   if (!compareValues(&hrtf->EmitterPosition, array000, 3, m))",
          "140:   if (hrtf->DataDelay.values)",
          "141:   {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "124:                        \"I\"))",
          "125:     return MYSOFA_ONLY_THE_SAME_SAMPLING_RATE_SUPPORTED; // LCOV_EXCL_LINE",
          "129:     return MYSOFA_RECEIVERS_WITH_RCI_SUPPORTED; // LCOV_EXCL_LINE",
          "130:   if (!verifyAttribute(hrtf->ReceiverPosition.attributes, \"Type\", \"cartesian\"))",
          "131:     return MYSOFA_RECEIVERS_WITH_CARTESIAN_SUPPORTED; // LCOV_EXCL_LINE",
          "133:   if (!fequals(hrtf->ReceiverPosition.values[0], 0.) ||",
          "135:       !fequals(hrtf->ReceiverPosition.values[2], 0.) ||",
          "136:       !fequals(hrtf->ReceiverPosition.values[3], 0.) ||",
          "155:       return MYSOFA_INVALID_RECEIVER_POSITIONS; // LCOV_EXCL_LINE",
          "159:   }",
          "",
          "[Removed Lines]",
          "127:   if (!verifyAttribute(hrtf->ReceiverPosition.attributes, \"DIMENSION_LIST\",",
          "128:                        \"R,C,I\"))",
          "134:       hrtf->ReceiverPosition.values[1] > 0 ||",
          "137:       !fequals(hrtf->ReceiverPosition.values[4],",
          "138:                -hrtf->ReceiverPosition.values[1]) ||",
          "139:       !fequals(hrtf->ReceiverPosition.values[5], 0.)) {",
          "141:     if (!(hrtf->ReceiverPosition.values[1] > 0 &&",
          "142:           hrtf->ReceiverPosition.values[0] < hrtf->ReceiverPosition.values[1] &&",
          "143:           hrtf->ReceiverPosition.values[0] >",
          "144:               -hrtf->ReceiverPosition.values[1] &&",
          "145:           hrtf->ReceiverPosition.values[2] < hrtf->ReceiverPosition.values[1] &&",
          "146:           hrtf->ReceiverPosition.values[2] >",
          "147:               -hrtf->ReceiverPosition.values[1] &&",
          "148:           hrtf->ReceiverPosition.values[4] < 0 &&",
          "149:           hrtf->ReceiverPosition.values[3] > hrtf->ReceiverPosition.values[4] &&",
          "150:           hrtf->ReceiverPosition.values[3] <",
          "151:               -hrtf->ReceiverPosition.values[1] &&",
          "152:           hrtf->ReceiverPosition.values[5] > hrtf->ReceiverPosition.values[4] &&",
          "153:           hrtf->ReceiverPosition.values[5] <",
          "154:               -hrtf->ReceiverPosition.values[1])) {",
          "156:     }",
          "157:   } else {",
          "158:     mylog(\"WARNING: SOFA file is written with wrong receiver positions.\");",
          "",
          "[Added Lines]",
          "153:   double receiverPositions[6];",
          "154:   if (verifyAttribute(hrtf->ReceiverPosition.attributes, \"DIMENSION_LIST\",",
          "155:                       \"R,C,I\"))",
          "156:   {",
          "157:     memcpy(receiverPositions, hrtf->ReceiverPosition.values,",
          "158:            6 * sizeof(double));",
          "159:   }",
          "160:   else if (verifyAttribute(hrtf->ReceiverPosition.attributes,",
          "161:                            \"DIMENSION_LIST\", \"R,C,M\"))",
          "162:   {",
          "163:     for (int i = 0; i < 6; i++)",
          "164:     {",
          "165:       int offset = i * hrtf->M;",
          "166:       receiverPositions[i] = hrtf->ReceiverPosition.values[offset];",
          "167:       for (int j = 1; j < hrtf->M; j++)",
          "168:         if (!fequals(receiverPositions[i],",
          "169:                      hrtf->ReceiverPosition.values[offset + j]))",
          "170:           return MYSOFA_RECEIVERS_WITH_RCI_SUPPORTED; // LCOV_EXCL_LINE",
          "171:     }",
          "172:   }",
          "173:   else",
          "174:   {",
          "176:   }",
          "184:       !fequals(hrtf->ReceiverPosition.values[5], 0.))",
          "185:   {",
          "186:     return MYSOFA_INVALID_RECEIVER_POSITIONS; // LCOV_EXCL_LINE",
          "187:   }",
          "188:   if (!fequals(hrtf->ReceiverPosition.values[4],",
          "189:                -hrtf->ReceiverPosition.values[1]))",
          "190:     return MYSOFA_INVALID_RECEIVER_POSITIONS; // LCOV_EXCL_LINE",
          "191:   if (hrtf->ReceiverPosition.values[1] < 0)",
          "192:   {",
          "193:     if (!verifyAttribute(hrtf->attributes, \"APIName\",",
          "194:                          \"ARI SOFA API for Matlab/Octave\"))",
          "197:     const char *version = mysofa_getAttribute(hrtf->attributes, \"APIVersion\");",
          "198:     if (version == NULL)",
          "199:       return MYSOFA_INVALID_RECEIVER_POSITIONS; // LCOV_EXCL_LINE",
          "201:     int a, b, c;",
          "202:     int res = sscanf(version, \"%d.%d.%d\", &a, &b, &c);",
          "203:     if (res != 3)",
          "204:       return MYSOFA_INVALID_RECEIVER_POSITIONS; // LCOV_EXCL_LINE",
          "205:     if (a > 1)",
          "206:       return MYSOFA_INVALID_RECEIVER_POSITIONS; // LCOV_EXCL_LINE",
          "207:     if (a == 1 && b > 1)",
          "208:       return MYSOFA_INVALID_RECEIVER_POSITIONS; // LCOV_EXCL_LINE",
          "209:     if (a == 1 && b == 1 && c > 0)",
          "210:       return MYSOFA_INVALID_RECEIVER_POSITIONS; // LCOV_EXCL_LINE",
          "212:     if (hrtf->ReceiverPosition.values[1] >= 0)",
          "213:       return MYSOFA_INVALID_RECEIVER_POSITIONS; // LCOV_EXCL_LINE",
          "217:     mylog(\"WARNING: SOFA file is written with wrong receiver positions. %d \"",
          "218:           \"%d.%d.%d %f<>%f\\n\",",
          "219:           res, a, b, c, hrtf->ReceiverPosition.values[1],",
          "220:           hrtf->ReceiverPosition.values[4]);",
          "",
          "---------------"
        ],
        "src/tests/check.c||src/tests/check.c": [
          "File: src/tests/check.c -> src/tests/check.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: void test_check() {",
          "31:   check(\"tests/Pulse.sofa\");",
          "33: }",
          "",
          "[Removed Lines]",
          "32:   check(\"share/MIT_KEMAR_normal_pinna.sofa\");",
          "",
          "[Added Lines]",
          "32:   check(\"tests/MIT_KEMAR_normal_pinna.old.sofa\");",
          "",
          "---------------"
        ],
        "src/tests/easy.c||src/tests/easy.c": [
          "File: src/tests/easy.c -> src/tests/easy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:   int err = 0;",
          "20:   int filterlength;",
          "23:                      &err);",
          "24:   if (!easy) {",
          "25:     CU_FAIL_FATAL(\"Error reading file.\");",
          "",
          "[Removed Lines]",
          "22:   easy = mysofa_open(\"share/MIT_KEMAR_normal_pinna.sofa\", 8000., &filterlength,",
          "",
          "[Added Lines]",
          "22:   easy = mysofa_open(\"tests/MIT_KEMAR_normal_pinna.old.sofa\", 8000., &filterlength,",
          "",
          "---------------"
        ],
        "src/tests/interpolate.c||src/tests/interpolate.c": [
          "File: src/tests/interpolate.c -> src/tests/interpolate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:   int neighborhood[6] = {-1, -1, -1, -1, -1, -1};",
          "16:   float c[3];",
          "20:   if (!hrtf) {",
          "21:     CU_FAIL_FATAL(\"Error reading file.\");",
          "",
          "[Removed Lines]",
          "18:   hrtf = mysofa_load(\"share/MIT_KEMAR_normal_pinna.sofa\", &err);",
          "",
          "[Added Lines]",
          "18:   hrtf = mysofa_load(\"tests/MIT_KEMAR_normal_pinna.old.sofa\", &err);",
          "",
          "---------------"
        ],
        "src/tests/loudness.c||src/tests/loudness.c": [
          "File: src/tests/loudness.c -> src/tests/loudness.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:   CU_ASSERT(fequals(factor, 1));",
          "26:   mysofa_free(hrtf);",
          "29:   if (!hrtf) {",
          "30:     CU_FAIL_FATAL(\"Error reading file.\");",
          "31:   }",
          "33:   factor = mysofa_loudness(hrtf);",
          "34: #ifdef VDEBUG",
          "36: #endif",
          "37:   CU_ASSERT(fequals(factor, 1.116589));",
          "39:   factor = mysofa_loudness(hrtf);",
          "40: #ifdef VDEBUG",
          "42:          factor);",
          "43: #endif",
          "44:   CU_ASSERT(fequals(factor, 1.));",
          "",
          "[Removed Lines]",
          "28:   hrtf = mysofa_load(\"share/MIT_KEMAR_normal_pinna.sofa\", &err);",
          "35:   printf(\"loudness of MIT_KEMAR_normal_pinna.sofa %f\\n\", factor);",
          "41:   printf(\"loudness of MIT_KEMAR_normal_pinna.sofa after normalization %f\\n\",",
          "",
          "[Added Lines]",
          "28:   hrtf = mysofa_load(\"tests/MIT_KEMAR_normal_pinna.old.sofa\", &err);",
          "35:   printf(\"loudness of MIT_KEMAR_normal_pinna.old.sofa %f\\n\", factor);",
          "41:   printf(\"loudness of MIT_KEMAR_normal_pinna.old.sofa after normalization %f\\n\",",
          "",
          "---------------"
        ],
        "src/tests/minphase.c||src/tests/minphase.c": [
          "File: src/tests/minphase.c -> src/tests/minphase.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:     CU_ASSERT(fequals(hrtf->DataIR.values[i], 1));",
          "28:   mysofa_free(hrtf);",
          "31:   if (!hrtf) {",
          "32:     CU_FAIL_FATAL(\"Error reading file.\");",
          "33:   }",
          "",
          "[Removed Lines]",
          "30:   hrtf = mysofa_load(\"share/MIT_KEMAR_normal_pinna.sofa\", &err);",
          "",
          "[Added Lines]",
          "30:   hrtf = mysofa_load(\"tests/MIT_KEMAR_normal_pinna.old.sofa\", &err);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:   CU_ASSERT(len == 361);",
          "40:   mysofa_free(hrtf);",
          "43:   if (!hrtf) {",
          "44:     CU_FAIL_FATAL(\"Error reading file.\");",
          "45:   }",
          "",
          "[Removed Lines]",
          "42:   hrtf = mysofa_load(\"share/MIT_KEMAR_normal_pinna.sofa\", &err);",
          "",
          "[Added Lines]",
          "42:   hrtf = mysofa_load(\"tests/MIT_KEMAR_normal_pinna.old.sofa\", &err);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "51:   CU_ASSERT(len == 463);",
          "52:   mysofa_free(hrtf);",
          "55:   if (!hrtf) {",
          "56:     CU_FAIL_FATAL(\"Error reading file.\");",
          "57:   }",
          "",
          "[Removed Lines]",
          "54:   hrtf = mysofa_load(\"share/MIT_KEMAR_normal_pinna.sofa\", &err);",
          "",
          "[Added Lines]",
          "54:   hrtf = mysofa_load(\"tests/MIT_KEMAR_normal_pinna.old.sofa\", &err);",
          "",
          "---------------"
        ],
        "src/tests/neighbors.c||src/tests/neighbors.c": [
          "File: src/tests/neighbors.c -> src/tests/neighbors.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:   const char *dir = \"RLUDFB\";",
          "18: #endif",
          "21:   if (!hrtf) {",
          "22:     CU_FAIL_FATAL(\"Error reading file.\");",
          "23:     return;",
          "",
          "[Removed Lines]",
          "20:   hrtf = mysofa_load(\"share/MIT_KEMAR_normal_pinna.sofa\", &err);",
          "",
          "[Added Lines]",
          "20:   hrtf = mysofa_load(\"tests/MIT_KEMAR_normal_pinna.old.sofa\", &err);",
          "",
          "---------------"
        ],
        "src/tests/sofa2json.c||src/tests/sofa2json.c": [
          "File: src/tests/sofa2json.c -> src/tests/sofa2json.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:     result = \"invalid coordinate type\";",
          "56:     break;",
          "57:   case MYSOFA_ONLY_EMITTER_WITH_ECI_SUPPORTED:",
          "59:     break;",
          "60:   case MYSOFA_ONLY_DELAYS_WITH_IR_OR_MR_SUPPORTED:",
          "61:     result = \"only delays with IR or MR dimensions spported\";",
          "",
          "[Removed Lines]",
          "58:     result = \"only emtter with ECI dimensions supported\";",
          "",
          "[Added Lines]",
          "58:     result = \"only emitter with ECI dimensions supported\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5c238dc820f16a21b4dce7e91df98431852146e7",
      "candidate_info": {
        "commit_hash": "5c238dc820f16a21b4dce7e91df98431852146e7",
        "repo": "hoene/libmysofa",
        "commit_url": "https://github.com/hoene/libmysofa/commit/5c238dc820f16a21b4dce7e91df98431852146e7",
        "files": [
          "src/hdf/fractalhead.c"
        ],
        "message": "cosmetics on code coverage",
        "before_after_code_files": [
          "src/hdf/fractalhead.c||src/hdf/fractalhead.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/hdf/fractalhead.c||src/hdf/fractalhead.c"
          ],
          "candidate": [
            "src/hdf/fractalhead.c||src/hdf/fractalhead.c"
          ]
        }
      },
      "candidate_diff": {
        "src/hdf/fractalhead.c||src/hdf/fractalhead.c": [
          "File: src/hdf/fractalhead.c -> src/hdf/fractalhead.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:   if (fread(buf, 1, 4, reader->fhd) != 4 || strncmp(buf, \"FHDB\", 4)) {",
          "44:     mylog(\"cannot read signature of fractal heap indirect block\\n\");",
          "45:     return MYSOFA_INVALID_FORMAT;",
          "46:   }",
          "47:   buf[4] = 0;",
          "48:   mylog(\"%08\" PRIX64 \" %.4s stack %d\\n\", (uint64_t)ftell(reader->fhd) - 4, buf,",
          "49:         reader->recursive_counter);",
          "51:   if (fgetc(reader->fhd) != 0) {",
          "54:   }",
          "57:   if (fseek(reader->fhd, reader->superblock.size_of_offsets, SEEK_CUR) < 0)",
          "60:   size = (fractalheap->maximum_heap_size + 7) / 8;",
          "61:   block_offset = readValue(reader, size);",
          "63:   if (fractalheap->flags & 2)",
          "64:     if (fseek(reader->fhd, 4, SEEK_CUR))",
          "67:   offset_size = ceilf(log2f(fractalheap->maximum_heap_size) / 8);",
          "68:   if (fractalheap->maximum_direct_block_size < fractalheap->maximum_size)",
          "",
          "[Removed Lines]",
          "52:     mylog(\"object FHDB must have version 0\\n\");",
          "53:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "58:     return errno;",
          "65:       return errno;",
          "",
          "[Added Lines]",
          "54:     mylog(\"object FHDB must have version 0\\n\"); // LCOV_EXCL_LINE",
          "55:     return MYSOFA_UNSUPPORTED_FORMAT;           // LCOV_EXCL_LINE",
          "60:     return errno; // LCOV_EXCL_LINE",
          "67:       return errno; // LCOV_EXCL_LINE",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:    00 00 00 02 00 00 00  |ion.............|",
          "",
          "[Removed Lines]",
          "99: 00002730  00 00 00 00 00 00 00 46  48 44 42 00 97 02 00 00  |.......FHDB.....|",
          "100: 00002740  00 00 00 00 00 00 00 00  00 99 b9 5c d8",
          "",
          "[Added Lines]",
          "101:   00002730  00 00 00 00 00 00 00 46  48 44 42 00 97 02 00 00  |.......FHDB.....|",
          "102:   00002740  00 00 00 00 00 00 00 00  00 99 b9 5c d8",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "106:     offset = readValue(reader, offset_size);",
          "107:     length = readValue(reader, length_size);",
          "108:     if (offset > 0x10000000 || length > 0x10000000)",
          "111:     mylog(\" %d %4\" PRIX64 \" %\" PRIX64 \" %08lX\\n\", typeandversion, offset,",
          "112:           length, ftell(reader->fhd) - 1 - offset_size - length_size);",
          "",
          "[Removed Lines]",
          "109:       return MYSOFA_UNSUPPORTED_FORMAT;",
          "",
          "[Added Lines]",
          "111:       return MYSOFA_UNSUPPORTED_FORMAT; // LCOV_EXCL_LINE",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "120:       if (readValue(reader, 5) != 0x0000040008) {",
          "123:       }",
          "125:       if (!(name = malloc(length + 1)))",
          "127:       if (fread(name, 1, length, reader->fhd) != length) {",
          "130:       }",
          "131:       name[length] = 0;",
          "133:       if (readValue(reader, 4) != 0x00000013) {",
          "137:       }",
          "139:       len = (int)readValue(reader, 2);",
          "140:       if (len > 0x1000 || len < 0) {",
          "143:       }",
          "",
          "[Removed Lines]",
          "121:         mylog(\"FHDB type 3 unsupported values\");",
          "122:         return MYSOFA_UNSUPPORTED_FORMAT;",
          "126:         return MYSOFA_NO_MEMORY;",
          "128:         free(name);",
          "129:         return MYSOFA_READ_ERROR;",
          "134:         mylog(\"FHDB type 3 unsupported values\");",
          "135:         free(name);",
          "136:         return MYSOFA_UNSUPPORTED_FORMAT;",
          "141:         free(name);",
          "142:         return MYSOFA_UNSUPPORTED_FORMAT;",
          "",
          "[Added Lines]",
          "123:         mylog(\"FHDB type 3 unsupported values\"); // LCOV_EXCL_LINE",
          "124:         return MYSOFA_UNSUPPORTED_FORMAT;        // LCOV_EXCL_LINE",
          "128:         return MYSOFA_NO_MEMORY; // LCOV_EXCL_LINE",
          "130:         free(name);               // LCOV_EXCL_LINE",
          "131:         return MYSOFA_READ_ERROR; // LCOV_EXCL_LINE",
          "136:         mylog(\"FHDB type 3 unsupported values\"); // LCOV_EXCL_LINE",
          "137:         free(name);                              // LCOV_EXCL_LINE",
          "138:         return MYSOFA_UNSUPPORTED_FORMAT;        // LCOV_EXCL_LINE",
          "143:         free(name);                       // LCOV_EXCL_LINE",
          "144:         return MYSOFA_UNSUPPORTED_FORMAT; // LCOV_EXCL_LINE",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "148:         value = NULL;",
          "149:       else if (unknown == 0x000000020000) {",
          "150:         if (!(value = malloc(len + 1))) {",
          "153:         }",
          "154:         if (fread(value, 1, len, reader->fhd) != len) {",
          "158:         }",
          "159:         value[len] = 0;",
          "160:       } else if (unknown == 0x20000020000) {",
          "161:         if (!(value = malloc(5))) {",
          "164:         }",
          "165:         strcpy(value, \"\");",
          "166:       } else {",
          "",
          "[Removed Lines]",
          "151:           free(name);",
          "152:           return MYSOFA_NO_MEMORY;",
          "155:           free(value);",
          "156:           free(name);",
          "157:           return MYSOFA_READ_ERROR;",
          "162:           free(name);",
          "163:           return MYSOFA_NO_MEMORY;",
          "",
          "[Added Lines]",
          "153:           free(name);              // LCOV_EXCL_LINE",
          "154:           return MYSOFA_NO_MEMORY; // LCOV_EXCL_LINE",
          "157:           free(value);              // LCOV_EXCL_LINE",
          "158:           free(name);               // LCOV_EXCL_LINE",
          "159:           return MYSOFA_READ_ERROR; // LCOV_EXCL_LINE",
          "164:           free(name);              // LCOV_EXCL_LINE",
          "165:           return MYSOFA_NO_MEMORY; // LCOV_EXCL_LINE",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "174:       attr = malloc(sizeof(struct MYSOFA_ATTRIBUTE));",
          "175:       if (attr == NULL) {",
          "179:       }",
          "181:       attr->name = name;",
          "",
          "[Removed Lines]",
          "176:         free(value);",
          "177:         free(name);",
          "178:         return MYSOFA_NO_MEMORY;",
          "",
          "[Added Lines]",
          "178:         free(value);             // LCOV_EXCL_LINE",
          "179:         free(name);              // LCOV_EXCL_LINE",
          "180:         return MYSOFA_NO_MEMORY; // LCOV_EXCL_LINE",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "195:         len = fgetc(reader->fhd);",
          "196:         if (len < 0)",
          "198:         if (len > MAX_NAME_LENGTH)",
          "201:         if (!(name = malloc(len + 1)))",
          "203:         if (fread(name, 1, len, reader->fhd) != len) {",
          "206:         }",
          "207:         name[len] = 0;",
          "",
          "[Removed Lines]",
          "197:           return MYSOFA_READ_ERROR;",
          "199:           return MYSOFA_INVALID_FORMAT;",
          "202:           return MYSOFA_NO_MEMORY;",
          "204:           free(name);",
          "205:           return MYSOFA_READ_ERROR;",
          "",
          "[Added Lines]",
          "199:           return MYSOFA_READ_ERROR; // LCOV_EXCL_LINE",
          "201:           return MYSOFA_INVALID_FORMAT; // LCOV_EXCL_LINE",
          "204:           return MYSOFA_NO_MEMORY; // LCOV_EXCL_LINE",
          "206:           free(name);               // LCOV_EXCL_LINE",
          "207:           return MYSOFA_READ_ERROR; // LCOV_EXCL_LINE",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "216:         dir = malloc(sizeof(struct DIR));",
          "217:         if (!dir) {",
          "220:         }",
          "221:         memset(dir, 0, sizeof(*dir));",
          "",
          "[Removed Lines]",
          "218:           free(name);",
          "219:           return MYSOFA_NO_MEMORY;",
          "",
          "[Added Lines]",
          "220:           free(name);              // LCOV_EXCL_LINE",
          "221:           return MYSOFA_NO_MEMORY; // LCOV_EXCL_LINE",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "226:         store = ftell(reader->fhd);",
          "227:         if (fseek(reader->fhd, heap_header_address, SEEK_SET)) {",
          "230:         }",
          "232:         err = dataobjectRead(reader, &dir->dataobject, name);",
          "233:         if (err) {",
          "235:         }",
          "237:         if (store < 0) {",
          "239:         }",
          "240:         if (fseek(reader->fhd, store, SEEK_SET) < 0)",
          "242:         break;",
          "243:       case 0x00080008:",
          "",
          "[Removed Lines]",
          "228:           free(name);",
          "229:           return errno;",
          "234:           return err;",
          "238:           return errno;",
          "241:           return errno;",
          "",
          "[Added Lines]",
          "230:           free(name);   // LCOV_EXCL_LINE",
          "231:           return errno; // LCOV_EXCL_LINE",
          "236:           return err; // LCOV_EXCL_LINE",
          "240:           return errno; // LCOV_EXCL_LINE",
          "243:           return errno; // LCOV_EXCL_LINE",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "263:     6d 70 6c  65 46 72 65 65 46 69 65  |...SimpleFreeFie|",
          "265:         if (!(name = malloc(MAX_NAME_LENGTH)))",
          "267:         len = -1;",
          "268:         for (int i = 0; i < MAX_NAME_LENGTH; i++) {",
          "269:           int c = fgetc(reader->fhd);",
          "270:           if (c < 0 || i == MAX_NAME_LENGTH - 1) {",
          "273:           }",
          "274:           name[i] = c;",
          "275:           if (len < 0 && c == 0)",
          "",
          "[Removed Lines]",
          "266:           return MYSOFA_NO_MEMORY;",
          "271:             free(name);",
          "272:             return MYSOFA_READ_ERROR;",
          "",
          "[Added Lines]",
          "268:           return MYSOFA_NO_MEMORY; // LCOV_EXCL_LINE",
          "273:             free(name);               // LCOV_EXCL_LINE",
          "274:             return MYSOFA_READ_ERROR; // LCOV_EXCL_LINE",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "279:         }",
          "280:         name = realloc(name, len + 1);",
          "281:         if (!name)",
          "283:         mylog(\"name %d %s\\n\", len, name);",
          "285:         if (readValue(reader, 3) != 0x000000) {",
          "289:         }",
          "291:         len = (int)readValue(reader, 4);",
          "292:         if (len > 0x1000 || len < 0) {",
          "296:         }",
          "298:         unknown = (int)readValue(reader, 8);",
          "299:         if (unknown != 0x00000001) {",
          "303:         }",
          "304:         if (!(value = malloc(len + 1))) {",
          "307:         }",
          "308:         if (fread(value, 1, len, reader->fhd) != len) {",
          "312:         }",
          "313:         value[len] = 0;",
          "",
          "[Removed Lines]",
          "282:           return MYSOFA_NO_MEMORY;",
          "286:           mylog(\"FHDB type 3 unsupported values\");",
          "287:           free(name);",
          "288:           return MYSOFA_UNSUPPORTED_FORMAT;",
          "293:           mylog(\"FHDB type 3 unsupported values\");",
          "294:           free(name);",
          "295:           return MYSOFA_UNSUPPORTED_FORMAT;",
          "300:           mylog(\"FHDB type 3 unsupported values\");",
          "301:           free(name);",
          "302:           return MYSOFA_UNSUPPORTED_FORMAT;",
          "305:           free(name);",
          "306:           return MYSOFA_NO_MEMORY;",
          "309:           free(value);",
          "310:           free(name);",
          "311:           return MYSOFA_READ_ERROR;",
          "",
          "[Added Lines]",
          "284:           return MYSOFA_NO_MEMORY; // LCOV_EXCL_LINE",
          "288:           mylog(\"FHDB type 3 unsupported values\"); // LCOV_EXCL_LINE",
          "289:           free(name);                              // LCOV_EXCL_LINE",
          "290:           return MYSOFA_UNSUPPORTED_FORMAT;        // LCOV_EXCL_LINE",
          "295:           mylog(\"FHDB type 3 unsupported values\"); // LCOV_EXCL_LINE",
          "296:           free(name);                              // LCOV_EXCL_LINE",
          "297:           return MYSOFA_UNSUPPORTED_FORMAT;        // LCOV_EXCL_LINE",
          "302:           mylog(\"FHDB type 3 unsupported values\"); // LCOV_EXCL_LINE",
          "303:           free(name);                              // LCOV_EXCL_LINE",
          "304:           return MYSOFA_UNSUPPORTED_FORMAT;        // LCOV_EXCL_LINE",
          "307:           free(name);              // LCOV_EXCL_LINE",
          "308:           return MYSOFA_NO_MEMORY; // LCOV_EXCL_LINE",
          "311:           free(value);              // LCOV_EXCL_LINE",
          "312:           free(name);               // LCOV_EXCL_LINE",
          "313:           return MYSOFA_READ_ERROR; // LCOV_EXCL_LINE",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "317:         attr = malloc(sizeof(struct MYSOFA_ATTRIBUTE));",
          "318:         if (attr == NULL) {",
          "322:         }",
          "324:         attr->name = name;",
          "",
          "[Removed Lines]",
          "319:           free(value);",
          "320:           free(name);",
          "321:           return MYSOFA_NO_MEMORY;",
          "",
          "[Added Lines]",
          "321:           free(value);             // LCOV_EXCL_LINE",
          "322:           free(name);              // LCOV_EXCL_LINE",
          "323:           return MYSOFA_NO_MEMORY; // LCOV_EXCL_LINE",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "778b2973bb6b6b675b3cdd99d9ce963c855dbb02",
      "candidate_info": {
        "commit_hash": "778b2973bb6b6b675b3cdd99d9ce963c855dbb02",
        "repo": "hoene/libmysofa",
        "commit_url": "https://github.com/hoene/libmysofa/commit/778b2973bb6b6b675b3cdd99d9ce963c855dbb02",
        "files": [
          "CMakeLists.txt",
          "src/hdf/fractalhead.c",
          "src/hdf/superblock.c"
        ],
        "message": "Removed warning",
        "before_after_code_files": [
          "src/hdf/fractalhead.c||src/hdf/fractalhead.c",
          "src/hdf/superblock.c||src/hdf/superblock.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/hdf/fractalhead.c||src/hdf/fractalhead.c"
          ],
          "candidate": [
            "src/hdf/fractalhead.c||src/hdf/fractalhead.c"
          ]
        }
      },
      "candidate_diff": {
        "src/hdf/fractalhead.c||src/hdf/fractalhead.c": [
          "File: src/hdf/fractalhead.c -> src/hdf/fractalhead.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "322:         break;",
          "324:       default:",
          "326:               ftell(reader->fhd) - 4);",
          "327:         return MYSOFA_UNSUPPORTED_FORMAT;",
          "328:       }",
          "",
          "[Removed Lines]",
          "325:         mylog(\"FHDB type 1 unsupported values %08X %lX\\n\", unknown,",
          "",
          "[Added Lines]",
          "325:         mylog(\"FHDB type 1 unsupported values %08\" PRIX64 \" %\" PRIX64 \"\\n\", unknown,",
          "",
          "---------------"
        ],
        "src/hdf/superblock.c||src/hdf/superblock.c": [
          "File: src/hdf/superblock.c -> src/hdf/superblock.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "95:   }",
          "99:   readValue(reader, 4);",
          "101:   if (version == 1) {",
          "",
          "[Removed Lines]",
          "97:   int groupLeafNodeK = readValue(reader, 2);",
          "98:   int groupInternalNodeK = readValue(reader, 2);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "567db12934abaae97115b56a76983c0751edb0e5",
      "candidate_info": {
        "commit_hash": "567db12934abaae97115b56a76983c0751edb0e5",
        "repo": "hoene/libmysofa",
        "commit_url": "https://github.com/hoene/libmysofa/commit/567db12934abaae97115b56a76983c0751edb0e5",
        "files": [
          "src/hdf/dataobject.c",
          "src/hdf/fractalhead.c"
        ],
        "message": "Fixed coverity issues",
        "before_after_code_files": [
          "src/hdf/dataobject.c||src/hdf/dataobject.c",
          "src/hdf/fractalhead.c||src/hdf/fractalhead.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/hdf/fractalhead.c||src/hdf/fractalhead.c"
          ],
          "candidate": [
            "src/hdf/fractalhead.c||src/hdf/fractalhead.c"
          ]
        }
      },
      "candidate_diff": {
        "src/hdf/dataobject.c||src/hdf/dataobject.c": [
          "File: src/hdf/dataobject.c -> src/hdf/dataobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "643:     number_client_data_values = (uint16_t)readValue(reader, 2);",
          "645:     if (namelength > 0)",
          "648:     mylog(\"  filter %d namelen %d flags %04X values %d\\n\",",
          "649:           filter_identification_value, namelength, flags,",
          "",
          "[Removed Lines]",
          "646:       fseek(reader->fhd, ((namelength - 1) & ~7) + 8, SEEK_CUR); // skip name",
          "",
          "[Added Lines]",
          "646:       if (fseek(reader->fhd, ((namelength - 1) & ~7) + 8, SEEK_CUR) ==",
          "647:           -1)                     // skip name",
          "648:         return MYSOFA_READ_ERROR; // LCOV_EXCL_LINE",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "706: }",
          "708: static int readOHDRHeaderMessageFilterPipeline(struct READER *reader) {",
          "711:   filterversion = fgetc(reader->fhd);",
          "714:   if (filters > 32) {",
          "716:     mylog(\"object OHDR filter pipeline message has too many filters: %d\\n\",",
          "",
          "[Removed Lines]",
          "709:   uint8_t filterversion, filters;",
          "713:   filters = (uint8_t)fgetc(reader->fhd);",
          "",
          "[Added Lines]",
          "711:   int filterversion, filters;",
          "714:   filters = fgetc(reader->fhd);",
          "716:   if (filterversion == EOF || filters == EOF)",
          "717:     return MYSOFA_READ_ERROR; // LCOV_EXCL_LINE",
          "",
          "---------------"
        ],
        "src/hdf/fractalhead.c||src/hdf/fractalhead.c": [
          "File: src/hdf/fractalhead.c -> src/hdf/fractalhead.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "350:         unknown4 = (int)readValue(reader, 8);",
          "351:         if (unknown4 != 0x00000001 && unknown4 != 0x02000002) {",
          "353:                 unknown4);                  // LCOV_EXCL_LINE",
          "354:           free(name);                       // LCOV_EXCL_LINE",
          "355:           return MYSOFA_UNSUPPORTED_FORMAT; // LCOV_EXCL_LINE",
          "",
          "[Removed Lines]",
          "352:           mylog(\"FHDB type 3 unsupported values: unknown4 %08lX\\n\",",
          "",
          "[Added Lines]",
          "352:           mylog(\"FHDB type 3 unsupported values: unknown4 %08LX\\n\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3a9be936b606b7f75d9ddefd4e4db77fc60cd568",
      "candidate_info": {
        "commit_hash": "3a9be936b606b7f75d9ddefd4e4db77fc60cd568",
        "repo": "hoene/libmysofa",
        "commit_url": "https://github.com/hoene/libmysofa/commit/3a9be936b606b7f75d9ddefd4e4db77fc60cd568",
        "files": [
          "src/hdf/dataobject.c",
          "src/hdf/fractalhead.c",
          "src/hrtf/easy.c",
          "src/tests/multithread.c"
        ],
        "message": "Addressed some coverity issues",
        "before_after_code_files": [
          "src/hdf/dataobject.c||src/hdf/dataobject.c",
          "src/hdf/fractalhead.c||src/hdf/fractalhead.c",
          "src/hrtf/easy.c||src/hrtf/easy.c",
          "src/tests/multithread.c||src/tests/multithread.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/hdf/fractalhead.c||src/hdf/fractalhead.c"
          ],
          "candidate": [
            "src/hdf/fractalhead.c||src/hdf/fractalhead.c"
          ]
        }
      },
      "candidate_diff": {
        "src/hdf/dataobject.c||src/hdf/dataobject.c": [
          "File: src/hdf/dataobject.c -> src/hdf/dataobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "362: static int readOHDRHeaderMessageDataFill1or2(struct READER *reader) {",
          "368:   if ((spaceAllocationTime & ~1) != 2 || fillValueWriteTime != 2 ||",
          "369:       (fillValueDefined & ~1) != 0) {",
          "",
          "[Removed Lines]",
          "364:   uint8_t spaceAllocationTime = fgetc(reader->fhd);",
          "365:   uint8_t fillValueWriteTime = fgetc(reader->fhd);",
          "366:   uint8_t fillValueDefined = fgetc(reader->fhd);",
          "",
          "[Added Lines]",
          "364:   int spaceAllocationTime = fgetc(reader->fhd);",
          "365:   int fillValueWriteTime = fgetc(reader->fhd);",
          "366:   int fillValueDefined = fgetc(reader->fhd);",
          "367:   if (spaceAllocationTime < 0 || fillValueWriteTime < 0 || fillValueDefined < 0)",
          "368:     return MYSOFA_READ_ERROR;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "398: static int readOHDRHeaderMessageDataFill(struct READER *reader) {",
          "404:   case 1:",
          "405:   case 2:",
          "406:     return readOHDRHeaderMessageDataFill1or2(reader);",
          "",
          "[Removed Lines]",
          "400:   uint8_t version;",
          "402:   version = (uint8_t)fgetc(reader->fhd);",
          "403:   switch (version) {",
          "",
          "[Added Lines]",
          "402:   switch (fgetc(reader->fhd)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "485:       if (fseek(reader->fhd, data_address, SEEK_SET) < 0)",
          "486:         return errno;",
          "487:       if (!data->data) {",
          "489:           return MYSOFA_INVALID_FORMAT;",
          "490:         data->data_len = data_size;",
          "491:         data->data = calloc(1, data_size);",
          "",
          "[Removed Lines]",
          "488:         if (data_size < 0 || data_size > 0x10000000)",
          "",
          "[Added Lines]",
          "485:         if (data_size > 0x10000000)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "865:     return MYSOFA_INVALID_FORMAT;",
          "866:   }",
          "867:   if (version == 1)",
          "870:   err = readOHDRHeaderMessageDataspace(reader, &d.ds);",
          "871:   if (err) {",
          "",
          "[Removed Lines]",
          "868:     fseek(reader->fhd, (8 - datatype_size) & 7, SEEK_CUR);",
          "",
          "[Added Lines]",
          "865:     if (fseek(reader->fhd, (8 - datatype_size) & 7, SEEK_CUR) < 0)",
          "866:       return errno;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "874:     return MYSOFA_INVALID_FORMAT;",
          "875:   }",
          "876:   if (version == 1)",
          "879:   err = readData(reader, &d, &d.dt, &d.ds);",
          "880:   if (err) {",
          "",
          "[Removed Lines]",
          "877:     fseek(reader->fhd, (8 - dataspace_size) & 7, SEEK_CUR);",
          "",
          "[Added Lines]",
          "875:     if (fseek(reader->fhd, (8 - dataspace_size) & 7, SEEK_CUR) < 0)",
          "876:       return errno;",
          "",
          "---------------"
        ],
        "src/hdf/fractalhead.c||src/hdf/fractalhead.c": [
          "File: src/hdf/fractalhead.c -> src/hdf/fractalhead.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "329:       default:",
          "330:         mylog(\"FHDB type 1 unsupported values %08\" PRIX64 \" %\" PRIX64 \"\\n\",",
          "332:         return MYSOFA_UNSUPPORTED_FORMAT;",
          "333:       }",
          "",
          "[Removed Lines]",
          "331:               unknown, ftell(reader->fhd) - 4);",
          "",
          "[Added Lines]",
          "331:               unknown, (uint64_t)ftell(reader->fhd) - 4);",
          "",
          "---------------"
        ],
        "src/hrtf/easy.c||src/hrtf/easy.c": [
          "File: src/hrtf/easy.c -> src/hrtf/easy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:   struct MYSOFA_EASY *easy = malloc(sizeof(struct MYSOFA_EASY));",
          "32:   if (!easy) {",
          "34:     return NULL;",
          "35:   }",
          "40:   easy->hrtf = mysofa_load(filename, err);",
          "41:   if (!easy->hrtf) {",
          "",
          "[Removed Lines]",
          "37:   easy->lookup = NULL;",
          "38:   easy->neighborhood = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/tests/multithread.c||src/tests/multithread.c": [
          "File: src/tests/multithread.c -> src/tests/multithread.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:         count++;",
          "86:       }",
          "87:     }",
          "92: #ifdef VDEBUG",
          "93:     printf(\"errors %f%% diffs %f %f\\n\", err * 100. / count,",
          "94:            sdiff1 / (count - err), sdiff2 / (count - err));",
          "",
          "[Removed Lines]",
          "88:     err = err * 100. / count;",
          "89:     sdiff1 = sdiff1 / (count - err);",
          "90:     sdiff2 = sdiff2 / (count - err);",
          "",
          "[Added Lines]",
          "88:     if (count != 0)",
          "89:       err = err * 100. / count;",
          "90:     if (count != err) {",
          "91:       sdiff1 = sdiff1 / (count - err);",
          "92:       sdiff2 = sdiff2 / (count - err);",
          "93:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}