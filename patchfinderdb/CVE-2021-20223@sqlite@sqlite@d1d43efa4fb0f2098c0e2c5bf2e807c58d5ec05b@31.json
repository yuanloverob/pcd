{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9f27463684be9e40072ba7a07b769d15e578a571",
      "candidate_info": {
        "commit_hash": "9f27463684be9e40072ba7a07b769d15e578a571",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9f27463684be9e40072ba7a07b769d15e578a571",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/analyze.c",
          "src/vdbe.c"
        ],
        "message": "Provide an estimated row count to stat_init() for STAT1 analysis.\n\nFossilOrigin-Name: 714419fe85cfdad22979183a94e4569c87740652758ab76b646753cf2b013b54",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/analyze.c||src/analyze.c",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a9bfa47aeea27e91611ba913d33e6635d2016e2c2ab78f9b0657f1bd8933e1a8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/analyze.c||src/analyze.c": [
          "File: src/analyze.c -> src/analyze.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "439:   }",
          "441:   p->db = db;",
          "442:   p->nRow = 0;",
          "443:   p->nCol = nCol;",
          "444:   p->nKeyCol = nKeyCol;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "441:   p->nEst = sqlite3_value_int64(argv[2]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "453:     p->iGet = -1;",
          "454:     p->mxSample = mxSample;",
          "456:     p->current.anLt = &p->current.anEq[nColUp];",
          "457:     p->iPrn = 0x689e962d*(u32)nCol ^ 0xd0944565*(u32)sqlite3_value_int(argv[2]);",
          "",
          "[Removed Lines]",
          "455:     p->nPSample = (tRowcnt)(sqlite3_value_int64(argv[2])/(mxSample/3+1) + 1);",
          "",
          "[Added Lines]",
          "455:     p->nPSample = (tRowcnt)(p->nEst/(mxSample/3+1) + 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "923:   {0}",
          "924: };",
          "927: #ifdef SQLITE_ENABLE_STAT4",
          "929: #elif SQLITE_DEBUG",
          "930:   assert( iParam==STAT_GET_STAT1 );",
          "931: #else",
          "932:   UNUSED_PARAMETER( iParam );",
          "933: #endif",
          "936:                              &statGetFuncdef, 0);",
          "937: }",
          "",
          "[Removed Lines]",
          "926: static void callStatGet(Parse *pParse, int regStat4, int iParam, int regOut){",
          "928:   sqlite3VdbeAddOp2(pParse->pVdbe, OP_Integer, iParam, regStat4+1);",
          "934:   assert( regOut!=regStat4 && regOut!=regStat4+1 );",
          "935:   sqlite3VdbeAddFunctionCall(pParse, 0, regStat4, regOut, 1+IsStat4,",
          "",
          "[Added Lines]",
          "926: static void callStatGet(Parse *pParse, int regStat, int iParam, int regOut){",
          "928:   sqlite3VdbeAddOp2(pParse->pVdbe, OP_Integer, iParam, regStat+1);",
          "934:   assert( regOut!=regStat && regOut!=regStat+1 );",
          "935:   sqlite3VdbeAddFunctionCall(pParse, 0, regStat, regOut, 1+IsStat4,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "963: #ifdef SQLITE_ENABLE_STAT4",
          "965: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1099: #ifdef SQLITE_ENABLE_STAT4",
          "1100:     if( OptimizationEnabled(db, SQLITE_Stat4) ){",
          "1105: #endif",
          "1109:                                &statInitFuncdef, 0);",
          "",
          "[Removed Lines]",
          "1101:       sqlite3VdbeAddOp2(v, OP_Count, iIdxCur, regStat4+3);",
          "1102:     }else{",
          "1103:       sqlite3VdbeAddOp2(v, OP_Integer, 0, regStat4+3);",
          "1104:     }",
          "1106:     sqlite3VdbeAddOp2(v, OP_Integer, nCol, regStat4+1);",
          "1107:     sqlite3VdbeAddOp2(v, OP_Integer, pIdx->nKeyCol, regStat4+2);",
          "1108:     sqlite3VdbeAddFunctionCall(pParse, 0, regStat4+1, regStat4, 2+IsStat4,",
          "",
          "[Added Lines]",
          "1094:     sqlite3VdbeAddOp2(v, OP_Integer, nCol, regStat+1);",
          "1095:     assert( regRowid==regStat+2 );",
          "1096:     sqlite3VdbeAddOp2(v, OP_Integer, pIdx->nKeyCol, regRowid);",
          "1099:       sqlite3VdbeAddOp2(v, OP_Count, iIdxCur, regTemp);",
          "1100:       addrRewind = sqlite3VdbeAddOp1(v, OP_Rewind, iIdxCur);",
          "1101:       VdbeCoverage(v);",
          "1102:     }else",
          "1104:     {",
          "1105:       addrRewind = sqlite3VdbeAddOp1(v, OP_Rewind, iIdxCur);",
          "1106:       VdbeCoverage(v);",
          "1107:       sqlite3VdbeAddOp3(v, OP_Count, iIdxCur, regTemp, 1);",
          "1108:     }",
          "1109:     sqlite3VdbeAddFunctionCall(pParse, 0, regStat+1, regStat, 3,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1121:     sqlite3VdbeAddOp2(v, OP_Integer, 0, regChng);",
          "1122:     addrNextRow = sqlite3VdbeCurrentAddr(v);",
          "",
          "[Removed Lines]",
          "1119:     addrRewind = sqlite3VdbeAddOp1(v, OP_Rewind, iIdxCur);",
          "1120:     VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1187: #ifdef SQLITE_ENABLE_STAT4",
          "1188:     if( OptimizationEnabled(db, SQLITE_Stat4) ){",
          "1190:       if( HasRowid(pTab) ){",
          "1191:         sqlite3VdbeAddOp2(v, OP_IdxRowid, iIdxCur, regRowid);",
          "1192:       }else{",
          "",
          "[Removed Lines]",
          "1189:       assert( regRowid==(regStat4+2) );",
          "",
          "[Added Lines]",
          "1188:       assert( regRowid==(regStat+2) );",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1204:       }",
          "1205:     }",
          "1206: #endif",
          "1209:                                &statPushFuncdef, 0);",
          "1210:     sqlite3VdbeAddOp2(v, OP_Next, iIdxCur, addrNextRow); VdbeCoverage(v);",
          "1214:     assert( \"BBB\"[0]==SQLITE_AFF_TEXT );",
          "1215:     sqlite3VdbeAddOp4(v, OP_MakeRecord, regTabname, 3, regTemp, \"BBB\", 0);",
          "1216:     sqlite3VdbeAddOp2(v, OP_NewRowid, iStatCur, regNewRowid);",
          "",
          "[Removed Lines]",
          "1207:     assert( regChng==(regStat4+1) );",
          "1208:     sqlite3VdbeAddFunctionCall(pParse, 1, regStat4, regTemp, 2+IsStat4,",
          "1213:     callStatGet(pParse, regStat4, STAT_GET_STAT1, regStat1);",
          "",
          "[Added Lines]",
          "1206:     assert( regChng==(regStat+1) );",
          "1207:     sqlite3VdbeAddFunctionCall(pParse, 1, regStat, regTemp, 2+IsStat4,",
          "1212:     callStatGet(pParse, regStat, STAT_GET_STAT1, regStat1);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1236:       pParse->nMem = MAX(pParse->nMem, regCol+nCol);",
          "1238:       addrNext = sqlite3VdbeCurrentAddr(v);",
          "1240:       addrIsNull = sqlite3VdbeAddOp1(v, OP_IsNull, regSampleRowid);",
          "1241:       VdbeCoverage(v);",
          "1245:       sqlite3VdbeAddOp4Int(v, seekOp, iTabCur, addrNext, regSampleRowid, 0);",
          "1246:       VdbeCoverage(v);",
          "1247:       for(i=0; i<nCol; i++){",
          "",
          "[Removed Lines]",
          "1239:       callStatGet(pParse, regStat4, STAT_GET_ROWID, regSampleRowid);",
          "1242:       callStatGet(pParse, regStat4, STAT_GET_NEQ, regEq);",
          "1243:       callStatGet(pParse, regStat4, STAT_GET_NLT, regLt);",
          "1244:       callStatGet(pParse, regStat4, STAT_GET_NDLT, regDLt);",
          "",
          "[Added Lines]",
          "1238:       callStatGet(pParse, regStat, STAT_GET_ROWID, regSampleRowid);",
          "1241:       callStatGet(pParse, regStat, STAT_GET_NEQ, regEq);",
          "1242:       callStatGet(pParse, regStat, STAT_GET_NLT, regLt);",
          "1243:       callStatGet(pParse, regStat, STAT_GET_NDLT, regDLt);",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3200:   assert( p->apCsr[pOp->p1]->eCurType==CURTYPE_BTREE );",
          "3201:   pCrsr = p->apCsr[pOp->p1]->uc.pCursor;",
          "3202:   assert( pCrsr );",
          "3206:   pOut = out2Prerelease(p, pOp);",
          "3207:   pOut->u.i = nEntry;",
          "3208:   goto check_for_interrupt;",
          "",
          "[Removed Lines]",
          "3204:   rc = sqlite3BtreeCount(db, pCrsr, &nEntry);",
          "3205:   if( rc ) goto abort_due_to_error;",
          "",
          "[Added Lines]",
          "3207:   if( pOp->p3 ){",
          "3208:     nEntry = sqlite3BtreeRowCountEst(pCrsr);",
          "3209:   }else{",
          "3211:     rc = sqlite3BtreeCount(db, pCrsr, &nEntry);",
          "3212:     if( rc ) goto abort_due_to_error;",
          "3213:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0990c415f65d2556a5e4122cbe5727d500411aeb",
      "candidate_info": {
        "commit_hash": "0990c415f65d2556a5e4122cbe5727d500411aeb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0990c415f65d2556a5e4122cbe5727d500411aeb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/altertab.test"
        ],
        "message": "Fix a problem with ALTER TABLE for views that have a nested FROM clause. Ticket [f50af3e8a565776b].\n\nFossilOrigin-Name: c431b3fd8fd0f6a6974bba3e9366b0430ec003d570e7ce70ceefbcff5fe4b6fa",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/altertab.test||test/altertab.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f02030b3403d67734bba471a91ad5bfdb03ddf6fdc3ef14808a04495e43b0470",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5145:             pNew = sqlite3ExprListAppend(pParse, pNew, pExpr);",
          "5146:             sqlite3TokenInit(&sColname, zColname);",
          "5147:             sqlite3ExprListSetName(pParse, pNew, &sColname, 0);",
          "5149:               struct ExprList_item *pX = &pNew->a[pNew->nExpr-1];",
          "5150:               sqlite3DbFree(db, pX->zEName);",
          "5151:               if( pSub ){",
          "",
          "[Removed Lines]",
          "5148:             if( pNew && (p->selFlags & SF_NestedFrom)!=0 ){",
          "",
          "[Added Lines]",
          "5148:             if( pNew && (p->selFlags & SF_NestedFrom)!=0 && !IN_RENAME_OBJECT ){",
          "",
          "---------------"
        ],
        "test/altertab.test||test/altertab.test": [
          "File: test/altertab.test -> test/altertab.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "613:   SELECT sql FROM sqlite_master;",
          "614: } {{CREATE TABLE t0 (c1 INTEGER, PRIMARY KEY(c1))}}",
          "616: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "616: # 2020-02-23 ticket f50af3e8a565776b",
          "617: reset_db",
          "618: do_execsql_test 19.100 {",
          "619:   CREATE TABLE t1(x);",
          "620:   CREATE VIEW t2 AS SELECT 1 FROM t1, (t1 AS a0, t1);",
          "621:   ALTER TABLE t1 RENAME TO t3;",
          "622:   SELECT sql FROM sqlite_master;",
          "623: } {{CREATE TABLE \"t3\"(x)} {CREATE VIEW t2 AS SELECT 1 FROM \"t3\", (\"t3\" AS a0, \"t3\")}}",
          "624: do_execsql_test 19.110 {",
          "625:   INSERT INTO t3(x) VALUES(123);",
          "626:   SELECT * FROM t2;",
          "627: } {1}",
          "628: do_execsql_test 19.120 {",
          "629:   INSERT INTO t3(x) VALUES('xyz');",
          "630:   SELECT * FROM t2;",
          "631: } {1 1 1 1 1 1 1 1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3c0e606bba4d489285f54bbed395a16e0fddf5d4",
      "candidate_info": {
        "commit_hash": "3c0e606bba4d489285f54bbed395a16e0fddf5d4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3c0e606bba4d489285f54bbed395a16e0fddf5d4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/func.c",
          "src/sqliteInt.h",
          "test/e_expr.test"
        ],
        "message": "Implement the IIF(x,y,z) SQL function that is short-hand for \"CASE WHEN x THEN y ELSE z END\".  For compatibility with SQL Server.\n\nFossilOrigin-Name: fce173cd211b15867369b6a54fad48168352fc83981a722ce98e57299b88608a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/func.c||src/func.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/e_expr.test||test/e_expr.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a116b20f863e9732cd08fbfbb1aa48204a17d611c9c1edde85dcf59310bde782",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3700:       sqlite3VdbeResolveLabel(v, endCoalesce);",
          "3701:       break;",
          "3702:     }",
          "3704:     default: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3703:     case INLINEFUNC_iif: {",
          "3704:       Expr caseExpr;",
          "3705:       memset(&caseExpr, 0, sizeof(caseExpr));",
          "3706:       caseExpr.op = TK_CASE;",
          "3707:       caseExpr.x.pList = pFarg;",
          "3708:       return sqlite3ExprCodeTarget(pParse, &caseExpr, target);",
          "3709:     }",
          "",
          "---------------"
        ],
        "src/func.c||src/func.c": [
          "File: src/func.c -> src/func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2021:     FUNCTION(coalesce,           1, 0, 0, 0                ),",
          "2022:     FUNCTION(coalesce,           0, 0, 0, 0                ),",
          "2023:     INLINE_FUNC(coalesce,       -1, INLINEFUNC_coalesce, 0 ),",
          "2024:   };",
          "2025: #ifndef SQLITE_OMIT_ALTERTABLE",
          "2026:   sqlite3AlterFunctions();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2024:     INLINE_FUNC(iif,             3, INLINEFUNC_iif,      0 ),",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1785: #define INLINEFUNC_expr_implies_expr    2",
          "1786: #define INLINEFUNC_expr_compare         3",
          "1787: #define INLINEFUNC_affinity             4",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1788: #define INLINEFUNC_iif                  5",
          "",
          "---------------"
        ],
        "test/e_expr.test||test/e_expr.test": [
          "File: test/e_expr.test -> test/e_expr.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1235: # evaluating WHEN terms.",
          "1236: #",
          "1237: do_execsql_test e_expr-21.4.1 {",
          "1240: do_execsql_test e_expr-21.4.2 {",
          "1244: # EVIDENCE-OF: R-38620-19499 In a CASE with a base expression, the base",
          "1245: # expression is evaluated just once and the result is compared against",
          "",
          "[Removed Lines]",
          "1238:   SELECT CASE WHEN NULL THEN 'A' WHEN 1 THEN 'B' END",
          "1239: } {B}",
          "1241:   SELECT CASE WHEN 0 THEN 'A' WHEN NULL THEN 'B' ELSE 'C' END",
          "1242: } {C}",
          "",
          "[Added Lines]",
          "1238:   SELECT CASE WHEN NULL THEN 'A' WHEN 1 THEN 'B' END, iif(NULL,8,99);",
          "1239: } {B 99}",
          "1241:   SELECT CASE WHEN 0 THEN 'A' WHEN NULL THEN 'B' ELSE 'C' END, iif(0,8,99);",
          "1242: } {C 99}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1952: # 'english' and '0' are all considered to be false.",
          "1953: #",
          "1954: do_execsql_test e_expr-37.1 {",
          "1957: do_execsql_test e_expr-37.2 {",
          "1960: do_execsql_test e_expr-37.3 {",
          "1963: do_execsql_test e_expr-37.4 {",
          "1966: do_execsql_test e_expr-37.5 {",
          "1970: # EVIDENCE-OF: R-55532-10108 Values 1, 1.0, 0.1, -0.1 and '1english' are",
          "1971: # considered to be true.",
          "1972: #",
          "1973: do_execsql_test e_expr-37.6 {",
          "1976: do_execsql_test e_expr-37.7 {",
          "1979: do_execsql_test e_expr-37.8 {",
          "1982: do_execsql_test e_expr-37.9 {",
          "1985: do_execsql_test e_expr-37.10 {",
          "1990: finish_test",
          "",
          "[Removed Lines]",
          "1955:    SELECT CASE WHEN NULL THEN 'true' ELSE 'false' END;",
          "1956: } {false}",
          "1958:    SELECT CASE WHEN 0.0 THEN 'true' ELSE 'false' END;",
          "1959: } {false}",
          "1961:    SELECT CASE WHEN 0 THEN 'true' ELSE 'false' END;",
          "1962: } {false}",
          "1964:    SELECT CASE WHEN 'engligh' THEN 'true' ELSE 'false' END;",
          "1965: } {false}",
          "1967:    SELECT CASE WHEN '0' THEN 'true' ELSE 'false' END;",
          "1968: } {false}",
          "1974:    SELECT CASE WHEN 1 THEN 'true' ELSE 'false' END;",
          "1975: } {true}",
          "1977:    SELECT CASE WHEN 1.0 THEN 'true' ELSE 'false' END;",
          "1978: } {true}",
          "1980:    SELECT CASE WHEN 0.1 THEN 'true' ELSE 'false' END;",
          "1981: } {true}",
          "1983:    SELECT CASE WHEN -0.1 THEN 'true' ELSE 'false' END;",
          "1984: } {true}",
          "1986:    SELECT CASE WHEN '1english' THEN 'true' ELSE 'false' END;",
          "1987: } {true}",
          "",
          "[Added Lines]",
          "1955:    SELECT CASE WHEN NULL THEN 'true' ELSE 'false' END, iif(NULL,'true','false');",
          "1956: } {false false}",
          "1958:    SELECT CASE WHEN 0.0 THEN 'true' ELSE 'false' END, iif(0.0,'true','false');",
          "1959: } {false false}",
          "1961:    SELECT CASE WHEN 0 THEN 'true' ELSE 'false' END, iif(0,'true','false');",
          "1962: } {false false}",
          "1964:    SELECT CASE WHEN 'engligh' THEN 'true' ELSE 'false' END, iif('engligh','true','false');",
          "1965: } {false false}",
          "1967:    SELECT CASE WHEN '0' THEN 'true' ELSE 'false' END, iif('0','true','false');",
          "1968: } {false false}",
          "1974:    SELECT CASE WHEN 1 THEN 'true' ELSE 'false' END, iif(1,'true','false');",
          "1975: } {true true}",
          "1977:    SELECT CASE WHEN 1.0 THEN 'true' ELSE 'false' END, iif(1.0,'true','false');",
          "1978: } {true true}",
          "1980:    SELECT CASE WHEN 0.1 THEN 'true' ELSE 'false' END, iif(0.1,'true','false');",
          "1981: } {true true}",
          "1983:    SELECT CASE WHEN -0.1 THEN 'true' ELSE 'false' END, iif(-0.1,'true','false');",
          "1984: } {true true}",
          "1986:    SELECT CASE WHEN '1english' THEN 'true' ELSE 'false' END, iif('1engl','true','false');",
          "1987: } {true true}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bc9fc18e4576e3efe9db1c1bb0e2d6a7943e855f",
      "candidate_info": {
        "commit_hash": "bc9fc18e4576e3efe9db1c1bb0e2d6a7943e855f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bc9fc18e4576e3efe9db1c1bb0e2d6a7943e855f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wal.c"
        ],
        "message": "Fix an assert() failure that could follow an IO error.\n\nFossilOrigin-Name: e89c864299024cdce395a15c19b000b976142b9eed267901a288adaa695f9e65",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wal.c||src/wal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 92dc59132f8547635d73c61c21ea29b380c401ddc84a6d01412808e00386b9e8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2947: void sqlite3WalEndReadTransaction(Wal *pWal){",
          "2948:   if( pWal->readLock>=0 ){",
          "2950:     walUnlockShared(pWal, WAL_READ_LOCK(pWal->readLock));",
          "2951:     pWal->readLock = -1;",
          "2952:   }",
          "",
          "[Removed Lines]",
          "2949:     sqlite3WalEndWriteTransaction(pWal);",
          "",
          "[Added Lines]",
          "2948:   sqlite3WalEndWriteTransaction(pWal);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "df9b5cab9354fa7863037c647131c10ad063f7ee",
      "candidate_info": {
        "commit_hash": "df9b5cab9354fa7863037c647131c10ad063f7ee",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/df9b5cab9354fa7863037c647131c10ad063f7ee",
        "files": [
          "ext/misc/sha1.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Mark the sha1() extension function as SQLITE_DETERMINISTIC.\n\nFossilOrigin-Name: 7d8dcfb95cea732e7588e7505bf80a171dd2e371b164c9435c6ac286060df6df",
        "before_after_code_files": [
          "ext/misc/sha1.c||ext/misc/sha1.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/sha1.c||ext/misc/sha1.c": [
          "File: ext/misc/sha1.c -> ext/misc/sha1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "381:   int rc = SQLITE_OK;",
          "382:   SQLITE_EXTENSION_INIT2(pApi);",
          "386:   if( rc==SQLITE_OK ){",
          "387:     rc = sqlite3_create_function(db, \"sha1_query\", 1,",
          "388:                                  SQLITE_UTF8|SQLITE_DIRECTONLY, 0,",
          "",
          "[Removed Lines]",
          "384:   rc = sqlite3_create_function(db, \"sha1\", 1, SQLITE_UTF8|SQLITE_INNOCUOUS, 0,",
          "385:                                sha1Func, 0, 0);",
          "",
          "[Added Lines]",
          "384:   rc = sqlite3_create_function(db, \"sha1\", 1,",
          "385:                        SQLITE_UTF8 | SQLITE_INNOCUOUS | SQLITE_DETERMINISTIC,",
          "386:                                0, sha1Func, 0, 0);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 084381649edf374ccc5664f136055109a31d4c3a19c4ae2ee5275f630507a2a3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}