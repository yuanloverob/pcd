{
  "cve_id": "CVE-2014-9803",
  "cve_desc": "arch/arm64/include/asm/pgtable.h in the Linux kernel before 3.15-rc5-next-20140519, as used in Android before 2016-07-05 on Nexus 5X and 6P devices, mishandles execute-only pages, which allows attackers to gain privileges via a crafted application, aka Android internal bug 28557020.",
  "repo": "torvalds/linux",
  "patch_hash": "5a0fdfada3a2aa50d7b947a2e958bf00cbe0d830",
  "patch_info": {
    "commit_hash": "5a0fdfada3a2aa50d7b947a2e958bf00cbe0d830",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/5a0fdfada3a2aa50d7b947a2e958bf00cbe0d830",
    "files": [
      "arch/arm64/include/asm/pgtable.h",
      "arch/arm64/mm/fault.c"
    ],
    "message": "Revert \"arm64: Introduce execute-only page access permissions\"\n\nThis reverts commit bc07c2c6e9ed125d362af0214b6313dca180cb08.\n\nWhile the aim is increased security for --x memory maps, it does not\nprotect against kernel level reads. Until SECCOMP is implemented for\narm64, revert this patch to avoid giving a false idea of execute-only\nmappings.\n\nSigned-off-by: Catalin Marinas <catalin.marinas@arm.com>",
    "before_after_code_files": [
      "arch/arm64/include/asm/pgtable.h||arch/arm64/include/asm/pgtable.h",
      "arch/arm64/mm/fault.c||arch/arm64/mm/fault.c"
    ]
  },
  "patch_diff": {
    "arch/arm64/include/asm/pgtable.h||arch/arm64/include/asm/pgtable.h": [
      "File: arch/arm64/include/asm/pgtable.h -> arch/arm64/include/asm/pgtable.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "86: #define PAGE_COPY_EXEC  __pgprot(_PAGE_DEFAULT | PTE_USER | PTE_NG | PTE_PXN)",
      "87: #define PAGE_READONLY  __pgprot(_PAGE_DEFAULT | PTE_USER | PTE_NG | PTE_PXN | PTE_UXN)",
      "88: #define PAGE_READONLY_EXEC __pgprot(_PAGE_DEFAULT | PTE_USER | PTE_NG | PTE_PXN)",
      "91: #define __P000  PAGE_NONE",
      "92: #define __P001  PAGE_READONLY",
      "93: #define __P010  PAGE_COPY",
      "94: #define __P011  PAGE_COPY",
      "96: #define __P101  PAGE_READONLY_EXEC",
      "97: #define __P110  PAGE_COPY_EXEC",
      "98: #define __P111  PAGE_COPY_EXEC",
      "",
      "[Removed Lines]",
      "89: #define PAGE_EXECONLY  __pgprot(_PAGE_DEFAULT | PTE_NG | PTE_PXN)",
      "95: #define __P100  PAGE_EXECONLY",
      "",
      "[Added Lines]",
      "94: #define __P100  PAGE_READONLY_EXEC",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "101: #define __S001  PAGE_READONLY",
      "102: #define __S010  PAGE_SHARED",
      "103: #define __S011  PAGE_SHARED",
      "105: #define __S101  PAGE_READONLY_EXEC",
      "106: #define __S110  PAGE_SHARED_EXEC",
      "107: #define __S111  PAGE_SHARED_EXEC",
      "",
      "[Removed Lines]",
      "104: #define __S100  PAGE_EXECONLY",
      "",
      "[Added Lines]",
      "103: #define __S100  PAGE_READONLY_EXEC",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "137: #define pte_write(pte)  (!!(pte_val(pte) & PTE_WRITE))",
      "138: #define pte_exec(pte)  (!(pte_val(pte) & PTE_UXN))",
      "143: static inline pte_t pte_wrprotect(pte_t pte)",
      "144: {",
      "",
      "[Removed Lines]",
      "140: #define pte_valid_ng(pte) \\",
      "141:  ((pte_val(pte) & (PTE_VALID | PTE_NG)) == (PTE_VALID | PTE_NG))",
      "",
      "[Added Lines]",
      "139: #define pte_valid_user(pte) \\",
      "140:  ((pte_val(pte) & (PTE_VALID | PTE_USER)) == (PTE_VALID | PTE_USER))",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "192: static inline void set_pte_at(struct mm_struct *mm, unsigned long addr,",
      "193:          pte_t *ptep, pte_t pte)",
      "194: {",
      "196:   if (!pte_special(pte) && pte_exec(pte))",
      "197:    __sync_icache_dcache(pte, addr);",
      "198:   if (pte_dirty(pte) && pte_write(pte))",
      "",
      "[Removed Lines]",
      "195:  if (pte_valid_ng(pte)) {",
      "",
      "[Added Lines]",
      "194:  if (pte_valid_user(pte)) {",
      "",
      "---------------"
    ],
    "arch/arm64/mm/fault.c||arch/arm64/mm/fault.c": [
      "File: arch/arm64/mm/fault.c -> arch/arm64/mm/fault.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "195:  struct task_struct *tsk;",
      "196:  struct mm_struct *mm;",
      "197:  int fault, sig, code;",
      "199:  unsigned int mm_flags = FAULT_FLAG_ALLOW_RETRY | FAULT_FLAG_KILLABLE;",
      "201:  tsk = current;",
      "",
      "[Removed Lines]",
      "198:  unsigned long vm_flags = VM_READ | VM_WRITE;",
      "",
      "[Added Lines]",
      "199:  unsigned long vm_flags = VM_READ | VM_WRITE | VM_EXEC;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "072b1b62a6436b71ab951faae4500db2fbed63de",
      "candidate_info": {
        "commit_hash": "072b1b62a6436b71ab951faae4500db2fbed63de",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/072b1b62a6436b71ab951faae4500db2fbed63de",
        "files": [
          "arch/arm64/include/asm/pgtable.h"
        ],
        "message": "ARM64: mm: Make PAGE_NONE pages read only and no-execute.\n\nIf we consider the following code sequence:\n\n\tmy_pte = pte_modify(entry, myprot);\n\tx = pte_write(my_pte);\n\ty = pte_exec(my_pte);\n\nIf myprot comes from a PROT_NONE page, then x and y will both be\ntrue which is undesireable behaviour.\n\nThis patch sets the no-execute and read-only bits for PAGE_NONE\nsuch that the code above will return false for both x and y.\n\nSigned-off-by: Steve Capper <steve.capper@linaro.org>\nAcked-by: Catalin Marinas <catalin.marinas@arm.com>",
        "before_after_code_files": [
          "arch/arm64/include/asm/pgtable.h||arch/arm64/include/asm/pgtable.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/arm64/include/asm/pgtable.h||arch/arm64/include/asm/pgtable.h"
          ],
          "candidate": [
            "arch/arm64/include/asm/pgtable.h||arch/arm64/include/asm/pgtable.h"
          ]
        }
      },
      "candidate_diff": {
        "arch/arm64/include/asm/pgtable.h||arch/arm64/include/asm/pgtable.h": [
          "File: arch/arm64/include/asm/pgtable.h -> arch/arm64/include/asm/pgtable.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: #define _MOD_PROT(p, b)  __pgprot_modify(p, 0, b)",
          "70: #define PAGE_SHARED  _MOD_PROT(pgprot_default, PTE_USER | PTE_NG | PTE_PXN | PTE_UXN)",
          "71: #define PAGE_SHARED_EXEC _MOD_PROT(pgprot_default, PTE_USER | PTE_NG | PTE_PXN)",
          "72: #define PAGE_COPY  _MOD_PROT(pgprot_default, PTE_USER | PTE_NG | PTE_PXN | PTE_UXN | PTE_RDONLY)",
          "",
          "[Removed Lines]",
          "69: #define PAGE_NONE  __pgprot_modify(pgprot_default, PTE_TYPE_MASK, PTE_PROT_NONE)",
          "",
          "[Added Lines]",
          "69: #define PAGE_NONE  __pgprot_modify(pgprot_default, PTE_TYPE_MASK, PTE_PROT_NONE | PTE_RDONLY | PTE_PXN | PTE_UXN)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76: #define PAGE_KERNEL  _MOD_PROT(pgprot_default, PTE_PXN | PTE_UXN | PTE_DIRTY)",
          "77: #define PAGE_KERNEL_EXEC _MOD_PROT(pgprot_default, PTE_UXN | PTE_DIRTY)",
          "80: #define __PAGE_SHARED  __pgprot(_PAGE_DEFAULT | PTE_USER | PTE_NG | PTE_PXN | PTE_UXN)",
          "81: #define __PAGE_SHARED_EXEC __pgprot(_PAGE_DEFAULT | PTE_USER | PTE_NG | PTE_PXN)",
          "82: #define __PAGE_COPY  __pgprot(_PAGE_DEFAULT | PTE_USER | PTE_NG | PTE_PXN | PTE_UXN | PTE_RDONLY)",
          "",
          "[Removed Lines]",
          "79: #define __PAGE_NONE  __pgprot(((_PAGE_DEFAULT) & ~PTE_TYPE_MASK) | PTE_PROT_NONE)",
          "",
          "[Added Lines]",
          "79: #define __PAGE_NONE  __pgprot(((_PAGE_DEFAULT) & ~PTE_TYPE_MASK) | PTE_PROT_NONE | PTE_RDONLY | PTE_PXN | PTE_UXN)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a501e32430d4232012ab708b8f0ce841f29e0f02",
      "candidate_info": {
        "commit_hash": "a501e32430d4232012ab708b8f0ce841f29e0f02",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/a501e32430d4232012ab708b8f0ce841f29e0f02",
        "files": [
          "arch/arm64/include/asm/io.h",
          "arch/arm64/include/asm/pgtable.h",
          "arch/arm64/kernel/setup.c",
          "arch/arm64/mm/dma-mapping.c",
          "arch/arm64/mm/mmu.c"
        ],
        "message": "arm64: Clean up the default pgprot setting\n\nThe primary aim of this patchset is to remove the pgprot_default and\nprot_sect_default global variables and rely strictly on predefined\nvalues. The original goal was to be able to run SMP kernels on UP\nhardware by not setting the Shareability bit. However, it is unlikely to\nsee UP ARMv8 hardware and even if we do, the Shareability bit is no\nlonger assumed to disable cacheable accesses.\n\nA side effect is that the device mappings now have the Shareability\nattribute set. The hardware, however, should ignore it since Device\naccesses are always Outer Shareable.\n\nFollowing the removal of the two global variables, there is some PROT_*\nmacro reshuffling and cleanup, including the __PAGE_* macros (replaced\nby PAGE_*).\n\nSigned-off-by: Catalin Marinas <catalin.marinas@arm.com>\nAcked-by: Will Deacon <will.deacon@arm.com>",
        "before_after_code_files": [
          "arch/arm64/include/asm/io.h||arch/arm64/include/asm/io.h",
          "arch/arm64/include/asm/pgtable.h||arch/arm64/include/asm/pgtable.h",
          "arch/arm64/kernel/setup.c||arch/arm64/kernel/setup.c",
          "arch/arm64/mm/dma-mapping.c||arch/arm64/mm/dma-mapping.c",
          "arch/arm64/mm/mmu.c||arch/arm64/mm/mmu.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/arm64/include/asm/pgtable.h||arch/arm64/include/asm/pgtable.h"
          ],
          "candidate": [
            "arch/arm64/include/asm/pgtable.h||arch/arm64/include/asm/pgtable.h"
          ]
        }
      },
      "candidate_diff": {
        "arch/arm64/include/asm/io.h||arch/arm64/include/asm/io.h": [
          "File: arch/arm64/include/asm/io.h -> arch/arm64/include/asm/io.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "230: extern void __iounmap(volatile void __iomem *addr);",
          "231: extern void __iomem *ioremap_cache(phys_addr_t phys_addr, size_t size);",
          "238: #define ioremap(addr, size)  __ioremap((addr), (size), __pgprot(PROT_DEVICE_nGnRE))",
          "239: #define ioremap_nocache(addr, size) __ioremap((addr), (size), __pgprot(PROT_DEVICE_nGnRE))",
          "240: #define ioremap_wc(addr, size)  __ioremap((addr), (size), __pgprot(PROT_NORMAL_NC))",
          "241: #define iounmap    __iounmap",
          "246: #define ARCH_HAS_IOREMAP_WC",
          "247: #include <asm-generic/iomap.h>",
          "",
          "[Removed Lines]",
          "233: #define PROT_DEFAULT  (PTE_TYPE_PAGE | PTE_AF | PTE_DIRTY)",
          "234: #define PROT_DEVICE_nGnRE (PROT_DEFAULT | PTE_PXN | PTE_UXN | PTE_ATTRINDX(MT_DEVICE_nGnRE))",
          "235: #define PROT_NORMAL_NC  (PROT_DEFAULT | PTE_ATTRINDX(MT_NORMAL_NC))",
          "236: #define PROT_NORMAL  (PROT_DEFAULT | PTE_ATTRINDX(MT_NORMAL))",
          "243: #define PROT_SECT_DEFAULT (PMD_TYPE_SECT | PMD_SECT_AF)",
          "244: #define PROT_SECT_DEVICE_nGnRE (PROT_SECT_DEFAULT | PTE_PXN | PTE_UXN | PMD_ATTRINDX(MT_DEVICE_nGnRE))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "arch/arm64/include/asm/pgtable.h||arch/arm64/include/asm/pgtable.h": [
          "File: arch/arm64/include/asm/pgtable.h -> arch/arm64/include/asm/pgtable.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: #endif",
          "53: #define pgd_ERROR(pgd)  __pgd_error(__FILE__, __LINE__, pgd_val(pgd))",
          "81: #define PAGE_HYP_DEVICE  __pgprot(PROT_DEVICE_nGnRE | PTE_HYP)",
          "84: #define PAGE_S2_DEVICE  __pgprot(PROT_DEFAULT | PTE_S2_MEMATTR(MT_S2_DEVICE_nGnRE) | PTE_S2_RDWR | PTE_UXN)",
          "",
          "[Removed Lines]",
          "61: #define _PAGE_DEFAULT  PTE_TYPE_PAGE | PTE_AF",
          "63: extern pgprot_t pgprot_default;",
          "65: #define __pgprot_modify(prot,mask,bits) \\",
          "66:  __pgprot((pgprot_val(prot) & ~(mask)) | (bits))",
          "68: #define _MOD_PROT(p, b)  __pgprot_modify(p, 0, b)",
          "70: #define PAGE_NONE  __pgprot_modify(pgprot_default, PTE_TYPE_MASK, PTE_PROT_NONE | PTE_PXN | PTE_UXN)",
          "71: #define PAGE_SHARED  _MOD_PROT(pgprot_default, PTE_USER | PTE_NG | PTE_PXN | PTE_UXN | PTE_WRITE)",
          "72: #define PAGE_SHARED_EXEC _MOD_PROT(pgprot_default, PTE_USER | PTE_NG | PTE_PXN | PTE_WRITE)",
          "73: #define PAGE_COPY  _MOD_PROT(pgprot_default, PTE_USER | PTE_NG | PTE_PXN | PTE_UXN)",
          "74: #define PAGE_COPY_EXEC  _MOD_PROT(pgprot_default, PTE_USER | PTE_NG | PTE_PXN)",
          "75: #define PAGE_READONLY  _MOD_PROT(pgprot_default, PTE_USER | PTE_NG | PTE_PXN | PTE_UXN)",
          "76: #define PAGE_READONLY_EXEC _MOD_PROT(pgprot_default, PTE_USER | PTE_NG | PTE_PXN)",
          "77: #define PAGE_KERNEL  _MOD_PROT(pgprot_default, PTE_PXN | PTE_UXN | PTE_DIRTY | PTE_WRITE)",
          "78: #define PAGE_KERNEL_EXEC _MOD_PROT(pgprot_default, PTE_UXN | PTE_DIRTY | PTE_WRITE)",
          "80: #define PAGE_HYP  _MOD_PROT(pgprot_default, PTE_HYP)",
          "83: #define PAGE_S2   __pgprot_modify(pgprot_default, PTE_S2_MEMATTR_MASK, PTE_S2_MEMATTR(MT_S2_NORMAL) | PTE_S2_RDONLY)",
          "86: #define __PAGE_NONE  __pgprot(((_PAGE_DEFAULT) & ~PTE_TYPE_MASK) | PTE_PROT_NONE | PTE_PXN | PTE_UXN)",
          "87: #define __PAGE_SHARED  __pgprot(_PAGE_DEFAULT | PTE_USER | PTE_NG | PTE_PXN | PTE_UXN | PTE_WRITE)",
          "88: #define __PAGE_SHARED_EXEC __pgprot(_PAGE_DEFAULT | PTE_USER | PTE_NG | PTE_PXN | PTE_WRITE)",
          "89: #define __PAGE_COPY  __pgprot(_PAGE_DEFAULT | PTE_USER | PTE_NG | PTE_PXN | PTE_UXN)",
          "90: #define __PAGE_COPY_EXEC __pgprot(_PAGE_DEFAULT | PTE_USER | PTE_NG | PTE_PXN)",
          "91: #define __PAGE_READONLY  __pgprot(_PAGE_DEFAULT | PTE_USER | PTE_NG | PTE_PXN | PTE_UXN)",
          "92: #define __PAGE_READONLY_EXEC __pgprot(_PAGE_DEFAULT | PTE_USER | PTE_NG | PTE_PXN)",
          "93: #define __PAGE_EXECONLY  __pgprot(_PAGE_DEFAULT | PTE_NG | PTE_PXN)",
          "97: #define __P000  __PAGE_NONE",
          "98: #define __P001  __PAGE_READONLY",
          "99: #define __P010  __PAGE_COPY",
          "100: #define __P011  __PAGE_COPY",
          "101: #define __P100  __PAGE_EXECONLY",
          "102: #define __P101  __PAGE_READONLY_EXEC",
          "103: #define __P110  __PAGE_COPY_EXEC",
          "104: #define __P111  __PAGE_COPY_EXEC",
          "106: #define __S000  __PAGE_NONE",
          "107: #define __S001  __PAGE_READONLY",
          "108: #define __S010  __PAGE_SHARED",
          "109: #define __S011  __PAGE_SHARED",
          "110: #define __S100  __PAGE_EXECONLY",
          "111: #define __S101  __PAGE_READONLY_EXEC",
          "112: #define __S110  __PAGE_SHARED_EXEC",
          "113: #define __S111  __PAGE_SHARED_EXEC",
          "115: #ifndef __ASSEMBLY__",
          "",
          "[Added Lines]",
          "55: #ifdef CONFIG_SMP",
          "56: #define PROT_DEFAULT  (PTE_TYPE_PAGE | PTE_AF | PTE_SHARED)",
          "57: #define PROT_SECT_DEFAULT (PMD_TYPE_SECT | PMD_SECT_AF | PMD_SECT_S)",
          "58: #else",
          "59: #define PROT_DEFAULT  (PTE_TYPE_PAGE | PTE_AF)",
          "60: #define PROT_SECT_DEFAULT (PMD_TYPE_SECT | PMD_SECT_AF)",
          "61: #endif",
          "63: #define PROT_DEVICE_nGnRE (PROT_DEFAULT | PTE_PXN | PTE_UXN | PTE_ATTRINDX(MT_DEVICE_nGnRE))",
          "64: #define PROT_NORMAL_NC  (PROT_DEFAULT | PTE_PXN | PTE_UXN | PTE_ATTRINDX(MT_NORMAL_NC))",
          "65: #define PROT_NORMAL  (PROT_DEFAULT | PTE_PXN | PTE_UXN | PTE_ATTRINDX(MT_NORMAL))",
          "67: #define PROT_SECT_DEVICE_nGnRE (PROT_SECT_DEFAULT | PMD_SECT_PXN | PMD_SECT_UXN | PMD_ATTRINDX(MT_DEVICE_nGnRE))",
          "68: #define PROT_SECT_NORMAL (PROT_SECT_DEFAULT | PMD_SECT_PXN | PMD_SECT_UXN | PMD_ATTRINDX(MT_NORMAL))",
          "69: #define PROT_SECT_NORMAL_EXEC (PROT_SECT_DEFAULT | PMD_SECT_UXN | PMD_ATTRINDX(MT_NORMAL))",
          "71: #define _PAGE_DEFAULT  (PROT_DEFAULT | PTE_ATTRINDX(MT_NORMAL))",
          "73: #define PAGE_KERNEL  __pgprot(_PAGE_DEFAULT | PTE_PXN | PTE_UXN | PTE_DIRTY | PTE_WRITE)",
          "74: #define PAGE_KERNEL_EXEC __pgprot(_PAGE_DEFAULT | PTE_UXN | PTE_DIRTY | PTE_WRITE)",
          "76: #define PAGE_HYP  __pgprot(_PAGE_DEFAULT | PTE_HYP)",
          "79: #define PAGE_S2   __pgprot(PROT_DEFAULT | PTE_S2_MEMATTR(MT_S2_NORMAL) | PTE_S2_RDONLY)",
          "82: #define PAGE_NONE  __pgprot(((_PAGE_DEFAULT) & ~PTE_TYPE_MASK) | PTE_PROT_NONE | PTE_PXN | PTE_UXN)",
          "83: #define PAGE_SHARED  __pgprot(_PAGE_DEFAULT | PTE_USER | PTE_NG | PTE_PXN | PTE_UXN | PTE_WRITE)",
          "84: #define PAGE_SHARED_EXEC __pgprot(_PAGE_DEFAULT | PTE_USER | PTE_NG | PTE_PXN | PTE_WRITE)",
          "85: #define PAGE_COPY  __pgprot(_PAGE_DEFAULT | PTE_USER | PTE_NG | PTE_PXN | PTE_UXN)",
          "86: #define PAGE_COPY_EXEC  __pgprot(_PAGE_DEFAULT | PTE_USER | PTE_NG | PTE_PXN)",
          "87: #define PAGE_READONLY  __pgprot(_PAGE_DEFAULT | PTE_USER | PTE_NG | PTE_PXN | PTE_UXN)",
          "88: #define PAGE_READONLY_EXEC __pgprot(_PAGE_DEFAULT | PTE_USER | PTE_NG | PTE_PXN)",
          "89: #define PAGE_EXECONLY  __pgprot(_PAGE_DEFAULT | PTE_NG | PTE_PXN)",
          "91: #define __P000  PAGE_NONE",
          "92: #define __P001  PAGE_READONLY",
          "93: #define __P010  PAGE_COPY",
          "94: #define __P011  PAGE_COPY",
          "95: #define __P100  PAGE_EXECONLY",
          "96: #define __P101  PAGE_READONLY_EXEC",
          "97: #define __P110  PAGE_COPY_EXEC",
          "98: #define __P111  PAGE_COPY_EXEC",
          "100: #define __S000  PAGE_NONE",
          "101: #define __S001  PAGE_READONLY",
          "102: #define __S010  PAGE_SHARED",
          "103: #define __S011  PAGE_SHARED",
          "104: #define __S100  PAGE_EXECONLY",
          "105: #define __S101  PAGE_READONLY_EXEC",
          "106: #define __S110  PAGE_SHARED_EXEC",
          "107: #define __S111  PAGE_SHARED_EXEC",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "274:  return 1;",
          "275: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "270: #define __pgprot_modify(prot,mask,bits) \\",
          "271:  __pgprot((pgprot_val(prot) & ~(mask)) | (bits))",
          "",
          "---------------"
        ],
        "arch/arm64/kernel/setup.c||arch/arm64/kernel/setup.c": [
          "File: arch/arm64/kernel/setup.c -> arch/arm64/kernel/setup.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "380:  early_ioremap_init();",
          "382:  parse_early_param();",
          "",
          "[Removed Lines]",
          "379:  init_mem_pgprot();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "arch/arm64/mm/dma-mapping.c||arch/arm64/mm/dma-mapping.c": [
          "File: arch/arm64/mm/dma-mapping.c -> arch/arm64/mm/dma-mapping.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:  for (i = 0; i < (size >> PAGE_SHIFT); i++)",
          "116:   map[i] = page + i;",
          "117:  coherent_ptr = vmap(map, size >> PAGE_SHIFT, VM_MAP,",
          "119:  kfree(map);",
          "120:  if (!coherent_ptr)",
          "121:   goto no_map;",
          "",
          "[Removed Lines]",
          "118:        __get_dma_pgprot(attrs, pgprot_default, false));",
          "",
          "[Added Lines]",
          "118:        __get_dma_pgprot(attrs, __pgprot(PROT_NORMAL_NC), false));",
          "",
          "---------------"
        ],
        "arch/arm64/mm/mmu.c||arch/arm64/mm/mmu.c": [
          "File: arch/arm64/mm/mmu.c -> arch/arm64/mm/mmu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: struct page *empty_zero_page;",
          "44: EXPORT_SYMBOL(empty_zero_page);",
          "51: struct cachepolicy {",
          "52:  const char policy[16];",
          "53:  u64  mair;",
          "",
          "[Removed Lines]",
          "46: pgprot_t pgprot_default;",
          "47: EXPORT_SYMBOL(pgprot_default);",
          "49: static pmdval_t prot_sect_kernel;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122: }",
          "123: early_param(\"cachepolicy\", early_cachepolicy);",
          "152: pgprot_t phys_mem_access_prot(struct file *file, unsigned long pfn,",
          "153:          unsigned long size, pgprot_t vma_prot)",
          "154: {",
          "",
          "[Removed Lines]",
          "128: void __init init_mem_pgprot(void)",
          "129: {",
          "130:  pteval_t default_pgprot;",
          "131:  int i;",
          "133:  default_pgprot = PTE_ATTRINDX(MT_NORMAL);",
          "134:  prot_sect_kernel = PMD_TYPE_SECT | PMD_SECT_AF | PMD_ATTRINDX(MT_NORMAL);",
          "136: #ifdef CONFIG_SMP",
          "140:  default_pgprot |= PTE_SHARED;",
          "141:  prot_sect_kernel |= PMD_SECT_S;",
          "142: #endif",
          "144:  for (i = 0; i < 16; i++) {",
          "145:   unsigned long v = pgprot_val(protection_map[i]);",
          "146:   protection_map[i] = __pgprot(v | default_pgprot);",
          "147:  }",
          "149:  pgprot_default = __pgprot(PTE_TYPE_PAGE | PTE_AF | default_pgprot);",
          "150: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "206:   if (((addr | next | phys) & ~SECTION_MASK) == 0) {",
          "207:    pmd_t old_pmd =*pmd;",
          "",
          "[Removed Lines]",
          "208:    set_pmd(pmd, __pmd(phys | prot_sect_kernel));",
          "",
          "[Added Lines]",
          "176:    set_pmd(pmd, __pmd(phys | PROT_SECT_NORMAL_EXEC));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "417:    if (!p)",
          "418:     return -ENOMEM;",
          "421:   } else",
          "422:    vmemmap_verify((pte_t *)pmd, node, addr, next);",
          "423:  } while (addr = next, addr != end);",
          "",
          "[Removed Lines]",
          "420:    set_pmd(pmd, __pmd(__pa(p) | prot_sect_kernel));",
          "",
          "[Added Lines]",
          "388:    set_pmd(pmd, __pmd(__pa(p) | PROT_SECT_NORMAL));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "71fdb6bf61bf0692f004f9daf5650392c0cfe300",
      "candidate_info": {
        "commit_hash": "71fdb6bf61bf0692f004f9daf5650392c0cfe300",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/71fdb6bf61bf0692f004f9daf5650392c0cfe300",
        "files": [
          "arch/arm64/include/asm/pgtable.h"
        ],
        "message": "arm64: Do not synchronise I and D caches for special ptes\n\nSpecial pte mappings are not intended to be executable and do not even\nhave an associated struct page. This patch ensures that we do not call\n__sync_icache_dcache() on such ptes.\n\nSigned-off-by: Catalin Marinas <catalin.marinas@arm.com>\nReported-by: Steve Capper <Steve.Capper@arm.com>\nTested-by: Laura Abbott <lauraa@codeaurora.org>\nTested-by: Bharat Bhushan <Bharat.Bhushan@freescale.com>\nCc: <stable@vger.kernel.org>",
        "before_after_code_files": [
          "arch/arm64/include/asm/pgtable.h||arch/arm64/include/asm/pgtable.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/arm64/include/asm/pgtable.h||arch/arm64/include/asm/pgtable.h"
          ],
          "candidate": [
            "arch/arm64/include/asm/pgtable.h||arch/arm64/include/asm/pgtable.h"
          ]
        }
      },
      "candidate_diff": {
        "arch/arm64/include/asm/pgtable.h||arch/arm64/include/asm/pgtable.h": [
          "File: arch/arm64/include/asm/pgtable.h -> arch/arm64/include/asm/pgtable.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "199:          pte_t *ptep, pte_t pte)",
          "200: {",
          "201:  if (pte_valid_user(pte)) {",
          "203:    __sync_icache_dcache(pte, addr);",
          "204:   if (pte_dirty(pte) && pte_write(pte))",
          "205:    pte_val(pte) &= ~PTE_RDONLY;",
          "",
          "[Removed Lines]",
          "202:   if (pte_exec(pte))",
          "",
          "[Added Lines]",
          "202:   if (!pte_special(pte) && pte_exec(pte))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bc07c2c6e9ed125d362af0214b6313dca180cb08",
      "candidate_info": {
        "commit_hash": "bc07c2c6e9ed125d362af0214b6313dca180cb08",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/bc07c2c6e9ed125d362af0214b6313dca180cb08",
        "files": [
          "arch/arm64/include/asm/pgtable.h",
          "arch/arm64/mm/fault.c"
        ],
        "message": "arm64: Introduce execute-only page access permissions\n\nThe ARMv8 architecture allows execute-only user permissions by clearing\nthe PTE_UXN and PTE_USER bits. The kernel, however, can still access\nsuch page, so execute-only page permission does not protect against\nread(2)/write(2) etc. accesses. Systems requiring such protection must\nimplement/enable features like SECCOMP.\n\nThis patch changes the arm64 __P100 and __S100 protection_map[] macros\nto the new __PAGE_EXECONLY attributes. A side effect is that\npte_valid_user() no longer triggers for __PAGE_EXECONLY since PTE_USER\nisn't set. To work around this, the check is done on the PTE_NG bit via\nthe pte_valid_ng() macro. VM_READ is also checked now for page faults.\n\nSigned-off-by: Catalin Marinas <catalin.marinas@arm.com>",
        "before_after_code_files": [
          "arch/arm64/include/asm/pgtable.h||arch/arm64/include/asm/pgtable.h",
          "arch/arm64/mm/fault.c||arch/arm64/mm/fault.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/arm64/include/asm/pgtable.h||arch/arm64/include/asm/pgtable.h",
            "arch/arm64/mm/fault.c||arch/arm64/mm/fault.c"
          ],
          "candidate": [
            "arch/arm64/include/asm/pgtable.h||arch/arm64/include/asm/pgtable.h",
            "arch/arm64/mm/fault.c||arch/arm64/mm/fault.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/arm64/include/asm/pgtable.h||arch/arm64/include/asm/pgtable.h": [
          "File: arch/arm64/include/asm/pgtable.h -> arch/arm64/include/asm/pgtable.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "90: #define __PAGE_COPY_EXEC __pgprot(_PAGE_DEFAULT | PTE_USER | PTE_NG | PTE_PXN)",
          "91: #define __PAGE_READONLY  __pgprot(_PAGE_DEFAULT | PTE_USER | PTE_NG | PTE_PXN | PTE_UXN)",
          "92: #define __PAGE_READONLY_EXEC __pgprot(_PAGE_DEFAULT | PTE_USER | PTE_NG | PTE_PXN)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93: #define __PAGE_EXECONLY  __pgprot(_PAGE_DEFAULT | PTE_NG | PTE_PXN)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97: #define __P001  __PAGE_READONLY",
          "98: #define __P010  __PAGE_COPY",
          "99: #define __P011  __PAGE_COPY",
          "101: #define __P101  __PAGE_READONLY_EXEC",
          "102: #define __P110  __PAGE_COPY_EXEC",
          "103: #define __P111  __PAGE_COPY_EXEC",
          "",
          "[Removed Lines]",
          "100: #define __P100  __PAGE_READONLY_EXEC",
          "",
          "[Added Lines]",
          "101: #define __P100  __PAGE_EXECONLY",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "106: #define __S001  __PAGE_READONLY",
          "107: #define __S010  __PAGE_SHARED",
          "108: #define __S011  __PAGE_SHARED",
          "110: #define __S101  __PAGE_READONLY_EXEC",
          "111: #define __S110  __PAGE_SHARED_EXEC",
          "112: #define __S111  __PAGE_SHARED_EXEC",
          "",
          "[Removed Lines]",
          "109: #define __S100  __PAGE_READONLY_EXEC",
          "",
          "[Added Lines]",
          "110: #define __S100  __PAGE_EXECONLY",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "143: #define pte_write(pte)  (!!(pte_val(pte) & PTE_WRITE))",
          "144: #define pte_exec(pte)  (!(pte_val(pte) & PTE_UXN))",
          "149: static inline pte_t pte_wrprotect(pte_t pte)",
          "150: {",
          "",
          "[Removed Lines]",
          "146: #define pte_valid_user(pte) \\",
          "147:  ((pte_val(pte) & (PTE_VALID | PTE_USER)) == (PTE_VALID | PTE_USER))",
          "",
          "[Added Lines]",
          "147: #define pte_valid_ng(pte) \\",
          "148:  ((pte_val(pte) & (PTE_VALID | PTE_NG)) == (PTE_VALID | PTE_NG))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "198: static inline void set_pte_at(struct mm_struct *mm, unsigned long addr,",
          "199:          pte_t *ptep, pte_t pte)",
          "200: {",
          "202:   if (!pte_special(pte) && pte_exec(pte))",
          "203:    __sync_icache_dcache(pte, addr);",
          "204:   if (pte_dirty(pte) && pte_write(pte))",
          "",
          "[Removed Lines]",
          "201:  if (pte_valid_user(pte)) {",
          "",
          "[Added Lines]",
          "202:  if (pte_valid_ng(pte)) {",
          "",
          "---------------"
        ],
        "arch/arm64/mm/fault.c||arch/arm64/mm/fault.c": [
          "File: arch/arm64/mm/fault.c -> arch/arm64/mm/fault.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "196:  struct task_struct *tsk;",
          "197:  struct mm_struct *mm;",
          "198:  int fault, sig, code;",
          "200:  unsigned int mm_flags = FAULT_FLAG_ALLOW_RETRY | FAULT_FLAG_KILLABLE;",
          "202:  tsk = current;",
          "",
          "[Removed Lines]",
          "199:  unsigned long vm_flags = VM_READ | VM_WRITE | VM_EXEC;",
          "",
          "[Added Lines]",
          "198:  unsigned long vm_flags = VM_READ | VM_WRITE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c2c93e5b7f3f42277ec25ff3746096abc0c0d0f7",
      "candidate_info": {
        "commit_hash": "c2c93e5b7f3f42277ec25ff3746096abc0c0d0f7",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/c2c93e5b7f3f42277ec25ff3746096abc0c0d0f7",
        "files": [
          "arch/arm64/include/asm/pgtable.h"
        ],
        "message": "arm64: mm: Introduce PTE_WRITE\n\nWe have the following means for encoding writable or dirty ptes:\n\n                                PTE_DIRTY       PTE_RDONLY\n!pte_dirty && !pte_write        0               1\n!pte_dirty && pte_write         0               1\npte_dirty && !pte_write         1               1\npte_dirty && pte_write          1               0\n\nSo we can't distinguish between writable clean ptes and read only\nptes. This can cause problems with ptes being incorrectly flagged as\nread only when they are writable but not dirty.\n\nThis patch introduces a new software bit PTE_WRITE which allows us to\ncorrectly identify writable ptes. PTE_RDONLY is now only clear for\nvalid ptes where a page is both writable and dirty.\n\nSigned-off-by: Steve Capper <steve.capper@arm.com>\nReviewed-by: Catalin Marinas <catalin.marinas@arm.com>\nSigned-off-by: Catalin Marinas <catalin.marinas@arm.com>",
        "before_after_code_files": [
          "arch/arm64/include/asm/pgtable.h||arch/arm64/include/asm/pgtable.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/arm64/include/asm/pgtable.h||arch/arm64/include/asm/pgtable.h"
          ],
          "candidate": [
            "arch/arm64/include/asm/pgtable.h||arch/arm64/include/asm/pgtable.h"
          ]
        }
      },
      "candidate_diff": {
        "arch/arm64/include/asm/pgtable.h||arch/arm64/include/asm/pgtable.h": [
          "File: arch/arm64/include/asm/pgtable.h -> arch/arm64/include/asm/pgtable.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #define PTE_DIRTY  (_AT(pteval_t, 1) << 55)",
          "30: #define PTE_SPECIAL  (_AT(pteval_t, 1) << 56)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: #define PTE_WRITE  (_AT(pteval_t, 1) << 57)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68: #define _MOD_PROT(p, b)  __pgprot_modify(p, 0, b)",
          "80: #define PAGE_HYP  _MOD_PROT(pgprot_default, PTE_HYP)",
          "81: #define PAGE_HYP_DEVICE  __pgprot(PROT_DEVICE_nGnRE | PTE_HYP)",
          "",
          "[Removed Lines]",
          "70: #define PAGE_NONE  __pgprot_modify(pgprot_default, PTE_TYPE_MASK, PTE_PROT_NONE | PTE_RDONLY | PTE_PXN | PTE_UXN)",
          "71: #define PAGE_SHARED  _MOD_PROT(pgprot_default, PTE_USER | PTE_NG | PTE_PXN | PTE_UXN)",
          "72: #define PAGE_SHARED_EXEC _MOD_PROT(pgprot_default, PTE_USER | PTE_NG | PTE_PXN)",
          "73: #define PAGE_COPY  _MOD_PROT(pgprot_default, PTE_USER | PTE_NG | PTE_PXN | PTE_UXN | PTE_RDONLY)",
          "74: #define PAGE_COPY_EXEC  _MOD_PROT(pgprot_default, PTE_USER | PTE_NG | PTE_PXN | PTE_RDONLY)",
          "75: #define PAGE_READONLY  _MOD_PROT(pgprot_default, PTE_USER | PTE_NG | PTE_PXN | PTE_UXN | PTE_RDONLY)",
          "76: #define PAGE_READONLY_EXEC _MOD_PROT(pgprot_default, PTE_USER | PTE_NG | PTE_PXN | PTE_RDONLY)",
          "77: #define PAGE_KERNEL  _MOD_PROT(pgprot_default, PTE_PXN | PTE_UXN | PTE_DIRTY)",
          "78: #define PAGE_KERNEL_EXEC _MOD_PROT(pgprot_default, PTE_UXN | PTE_DIRTY)",
          "",
          "[Added Lines]",
          "70: #define PAGE_NONE  __pgprot_modify(pgprot_default, PTE_TYPE_MASK, PTE_PROT_NONE | PTE_PXN | PTE_UXN)",
          "71: #define PAGE_SHARED  _MOD_PROT(pgprot_default, PTE_USER | PTE_NG | PTE_PXN | PTE_UXN | PTE_WRITE)",
          "72: #define PAGE_SHARED_EXEC _MOD_PROT(pgprot_default, PTE_USER | PTE_NG | PTE_PXN | PTE_WRITE)",
          "73: #define PAGE_COPY  _MOD_PROT(pgprot_default, PTE_USER | PTE_NG | PTE_PXN | PTE_UXN)",
          "74: #define PAGE_COPY_EXEC  _MOD_PROT(pgprot_default, PTE_USER | PTE_NG | PTE_PXN)",
          "75: #define PAGE_READONLY  _MOD_PROT(pgprot_default, PTE_USER | PTE_NG | PTE_PXN | PTE_UXN)",
          "76: #define PAGE_READONLY_EXEC _MOD_PROT(pgprot_default, PTE_USER | PTE_NG | PTE_PXN)",
          "77: #define PAGE_KERNEL  _MOD_PROT(pgprot_default, PTE_PXN | PTE_UXN | PTE_DIRTY | PTE_WRITE)",
          "78: #define PAGE_KERNEL_EXEC _MOD_PROT(pgprot_default, PTE_UXN | PTE_DIRTY | PTE_WRITE)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83: #define PAGE_S2   __pgprot_modify(pgprot_default, PTE_S2_MEMATTR_MASK, PTE_S2_MEMATTR(MT_S2_NORMAL) | PTE_S2_RDONLY)",
          "84: #define PAGE_S2_DEVICE  __pgprot(PROT_DEFAULT | PTE_S2_MEMATTR(MT_S2_DEVICE_nGnRE) | PTE_S2_RDWR | PTE_UXN)",
          "",
          "[Removed Lines]",
          "86: #define __PAGE_NONE  __pgprot(((_PAGE_DEFAULT) & ~PTE_TYPE_MASK) | PTE_PROT_NONE | PTE_RDONLY | PTE_PXN | PTE_UXN)",
          "87: #define __PAGE_SHARED  __pgprot(_PAGE_DEFAULT | PTE_USER | PTE_NG | PTE_PXN | PTE_UXN)",
          "88: #define __PAGE_SHARED_EXEC __pgprot(_PAGE_DEFAULT | PTE_USER | PTE_NG | PTE_PXN)",
          "89: #define __PAGE_COPY  __pgprot(_PAGE_DEFAULT | PTE_USER | PTE_NG | PTE_PXN | PTE_UXN | PTE_RDONLY)",
          "90: #define __PAGE_COPY_EXEC __pgprot(_PAGE_DEFAULT | PTE_USER | PTE_NG | PTE_PXN | PTE_RDONLY)",
          "91: #define __PAGE_READONLY  __pgprot(_PAGE_DEFAULT | PTE_USER | PTE_NG | PTE_PXN | PTE_UXN | PTE_RDONLY)",
          "92: #define __PAGE_READONLY_EXEC __pgprot(_PAGE_DEFAULT | PTE_USER | PTE_NG | PTE_PXN | PTE_RDONLY)",
          "",
          "[Added Lines]",
          "86: #define __PAGE_NONE  __pgprot(((_PAGE_DEFAULT) & ~PTE_TYPE_MASK) | PTE_PROT_NONE | PTE_PXN | PTE_UXN)",
          "87: #define __PAGE_SHARED  __pgprot(_PAGE_DEFAULT | PTE_USER | PTE_NG | PTE_PXN | PTE_UXN | PTE_WRITE)",
          "88: #define __PAGE_SHARED_EXEC __pgprot(_PAGE_DEFAULT | PTE_USER | PTE_NG | PTE_PXN | PTE_WRITE)",
          "89: #define __PAGE_COPY  __pgprot(_PAGE_DEFAULT | PTE_USER | PTE_NG | PTE_PXN | PTE_UXN)",
          "90: #define __PAGE_COPY_EXEC __pgprot(_PAGE_DEFAULT | PTE_USER | PTE_NG | PTE_PXN)",
          "91: #define __PAGE_READONLY  __pgprot(_PAGE_DEFAULT | PTE_USER | PTE_NG | PTE_PXN | PTE_UXN)",
          "92: #define __PAGE_READONLY_EXEC __pgprot(_PAGE_DEFAULT | PTE_USER | PTE_NG | PTE_PXN)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "140: #define pte_dirty(pte)  (pte_val(pte) & PTE_DIRTY)",
          "141: #define pte_young(pte)  (pte_val(pte) & PTE_AF)",
          "142: #define pte_special(pte) (pte_val(pte) & PTE_SPECIAL)",
          "144: #define pte_exec(pte)  (!(pte_val(pte) & PTE_UXN))",
          "146: #define pte_valid_user(pte) \\",
          "",
          "[Removed Lines]",
          "143: #define pte_write(pte)  (!(pte_val(pte) & PTE_RDONLY))",
          "",
          "[Added Lines]",
          "143: #define pte_write(pte)  (pte_val(pte) & PTE_WRITE)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "149: static inline pte_t pte_wrprotect(pte_t pte)",
          "150: {",
          "152:  return pte;",
          "153: }",
          "155: static inline pte_t pte_mkwrite(pte_t pte)",
          "156: {",
          "158:  return pte;",
          "159: }",
          "",
          "[Removed Lines]",
          "151:  pte_val(pte) |= PTE_RDONLY;",
          "157:  pte_val(pte) &= ~PTE_RDONLY;",
          "",
          "[Added Lines]",
          "151:  pte_val(pte) &= ~PTE_WRITE;",
          "157:  pte_val(pte) |= PTE_WRITE;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "201:  if (pte_valid_user(pte)) {",
          "202:   if (pte_exec(pte))",
          "203:    __sync_icache_dcache(pte, addr);",
          "206:  }",
          "208:  set_pte(ptep, pte);",
          "",
          "[Removed Lines]",
          "204:   if (!pte_dirty(pte))",
          "205:    pte = pte_wrprotect(pte);",
          "",
          "[Added Lines]",
          "204:   if (pte_dirty(pte) && pte_write(pte))",
          "205:    pte_val(pte) &= ~PTE_RDONLY;",
          "206:   else",
          "207:    pte_val(pte) |= PTE_RDONLY;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "376: static inline pte_t pte_modify(pte_t pte, pgprot_t newprot)",
          "377: {",
          "378:  const pteval_t mask = PTE_USER | PTE_PXN | PTE_UXN | PTE_RDONLY |",
          "380:  pte_val(pte) = (pte_val(pte) & ~mask) | (pgprot_val(newprot) & mask);",
          "381:  return pte;",
          "382: }",
          "",
          "[Removed Lines]",
          "379:          PTE_PROT_NONE | PTE_VALID;",
          "",
          "[Added Lines]",
          "381:          PTE_PROT_NONE | PTE_VALID | PTE_WRITE;",
          "",
          "---------------"
        ]
      }
    }
  ]
}