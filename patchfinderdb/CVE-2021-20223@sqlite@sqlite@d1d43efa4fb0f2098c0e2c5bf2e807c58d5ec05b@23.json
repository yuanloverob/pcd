{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "745befd13f5d33109b0bedffede2c51f198fd478",
      "candidate_info": {
        "commit_hash": "745befd13f5d33109b0bedffede2c51f198fd478",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/745befd13f5d33109b0bedffede2c51f198fd478",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c"
        ],
        "message": "Merge the sqlite3CodecQueryParameters() fix into trunk.\n\nFossilOrigin-Name: a812f533693a3605f297199ae0320d663e872208675e86860c5c1803943943aa",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b5a66d10f4bbaf10def7b50b9ed98b05b41bb2c2af5ab9a90f6cda61169ab123",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2992:   return rc;",
          "2993: }",
          "2995: #if defined(SQLITE_HAS_CODEC)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2999: static const char *uriParameter(const char *zFilename, const char *zParam){",
          "3000:   zFilename += sqlite3Strlen30(zFilename) + 1;",
          "3001:   while( zFilename[0] ){",
          "3002:     int x = strcmp(zFilename, zParam);",
          "3003:     zFilename += sqlite3Strlen30(zFilename) + 1;",
          "3004:     if( x==0 ) return zFilename;",
          "3005:     zFilename += sqlite3Strlen30(zFilename) + 1;",
          "3006:   }",
          "3007:   return 0;",
          "3008: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3005: ){",
          "3006:   const char *zKey;",
          "3008:     u8 iByte;",
          "3009:     int i;",
          "3010:     char zDecoded[40];",
          "",
          "[Removed Lines]",
          "3007:   if( (zKey = sqlite3_uri_parameter(zUri, \"hexkey\"))!=0 && zKey[0] ){",
          "",
          "[Added Lines]",
          "3022:   if( zUri==0 ){",
          "3023:     return 0;",
          "3024:   }else if( (zKey = uriParameter(zUri, \"hexkey\"))!=0 && zKey[0] ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3014:     }",
          "3015:     sqlite3_key_v2(db, zDb, zDecoded, i/2);",
          "3016:     return 1;",
          "3018:     sqlite3_key_v2(db, zDb, zKey, sqlite3Strlen30(zKey));",
          "3019:     return 1;",
          "3021:     sqlite3_key_v2(db, zDb, zKey, -1);",
          "3022:     return 1;",
          "3023:   }else{",
          "",
          "[Removed Lines]",
          "3017:   }else if( (zKey = sqlite3_uri_parameter(zUri, \"key\"))!=0 ){",
          "3020:   }else if( (zKey = sqlite3_uri_parameter(zUri, \"textkey\"))!=0 ){",
          "",
          "[Added Lines]",
          "3034:   }else if( (zKey = uriParameter(zUri, \"key\"))!=0 ){",
          "3037:   }else if( (zKey = uriParameter(zUri, \"textkey\"))!=0 ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4275: const char *sqlite3_uri_parameter(const char *zFilename, const char *zParam){",
          "4276:   if( zFilename==0 || zParam==0 ) return 0;",
          "4277:   zFilename = databaseName(zFilename);",
          "4286: }",
          "",
          "[Removed Lines]",
          "4278:   zFilename += sqlite3Strlen30(zFilename) + 1;",
          "4279:   while( zFilename[0] ){",
          "4280:     int x = strcmp(zFilename, zParam);",
          "4281:     zFilename += sqlite3Strlen30(zFilename) + 1;",
          "4282:     if( x==0 ) return zFilename;",
          "4283:     zFilename += sqlite3Strlen30(zFilename) + 1;",
          "4284:   }",
          "4285:   return 0;",
          "",
          "[Added Lines]",
          "4295:   return uriParameter(zFilename, zParam);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2b6e670f73ed38ac4df9144c9569fd76a302a7a8",
      "candidate_info": {
        "commit_hash": "2b6e670f73ed38ac4df9144c9569fd76a302a7a8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2b6e670f73ed38ac4df9144c9569fd76a302a7a8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/altertab2.test",
          "test/altertab3.test"
        ],
        "message": "In ALTER TABLE, rename columns and tables in expressions that are optimized out by the \"AND 0\" optimization. Doing this also fixes an otherwise harmless assert() failure.\n\nFossilOrigin-Name: a9e0354c992b0287608ddd18fd35fe7e6102a8f293d6e6e1b3488644bcda8168",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/altertab2.test||test/altertab2.test",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: db4b7e1dc399c1f16b827ac087aa37c0815f4b2f41f1ffad59963eead2ab5562",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "933:     return pRight;",
          "934:   }else if( pRight==0 ){",
          "935:     return pLeft;",
          "939:     return sqlite3Expr(db, TK_INTEGER, \"0\");",
          "940:   }else{",
          "941:     return sqlite3PExpr(pParse, TK_AND, pLeft, pRight);",
          "",
          "[Removed Lines]",
          "936:   }else if( ExprAlwaysFalse(pLeft) || ExprAlwaysFalse(pRight) ){",
          "937:     sqlite3ExprUnmapAndDelete(pParse, pLeft);",
          "938:     sqlite3ExprUnmapAndDelete(pParse, pRight);",
          "",
          "[Added Lines]",
          "936:   }else if( (ExprAlwaysFalse(pLeft) || ExprAlwaysFalse(pRight))",
          "937:          && !IN_RENAME_OBJECT",
          "938:   ){",
          "939:     sqlite3ExprDelete(db, pLeft);",
          "940:     sqlite3ExprDelete(db, pRight);",
          "",
          "---------------"
        ],
        "test/altertab2.test||test/altertab2.test": [
          "File: test/altertab2.test -> test/altertab2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "343:   CREATE VIEW v4 AS SELECT * FROM t4 WHERE (a=1 AND 0) OR b=2;",
          "344: }",
          "348: #",
          "349: do_execsql_test 8.5 {",
          "350:   ALTER TABLE t4 RENAME a TO c;",
          "351:   SELECT sql FROM sqlite_master WHERE name = 'v4'",
          "355: # 2019-06-10 https://www.sqlite.org/src/info/533010b8cacebe82",
          "356: reset_db",
          "358:   CREATE TABLE t0(c0);",
          "359:   CREATE INDEX i0 ON t0(LIKELIHOOD(1,2) AND 0);",
          "360:   ALTER TABLE t0 RENAME TO t1;",
          "361:   SELECT sql FROM sqlite_master WHERE name='i0';",
          "364: finish_test",
          "",
          "[Removed Lines]",
          "346: # Do not rename branches of an expression tree that is optimized out by",
          "347: # the AND optimization.",
          "352: } {{CREATE VIEW v4 AS SELECT * FROM t4 WHERE (a=1 AND 0) OR b=2}}",
          "353: #                \"a\" is not renamed to \"c\" ---^",
          "357: do_execsql_test 8.6 {",
          "362: } {{CREATE INDEX i0 ON \"t1\"(LIKELIHOOD(1,2) AND 0)}}",
          "",
          "[Added Lines]",
          "346: # Branches of an expression tree that are optimized out by the AND",
          "347: # optimization are renamed.",
          "352: } {{CREATE VIEW v4 AS SELECT * FROM t4 WHERE (c=1 AND 0) OR b=2}}",
          "356: do_catchsql_test 8.6 {",
          "361: } {1 {error in index i0: second argument to likelihood() must be a constant between 0.0 and 1.0}}",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "552:   ALTER TABLE v0 RENAME TO t3 ;",
          "553: } {1 {error in view v2: view v2 is circularly defined}}",
          "555: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "555: #------------------------------------------------------------------------",
          "556: #",
          "557: reset_db",
          "558: do_execsql_test 24.1 {",
          "559:   CREATE TABLE v0 (v1);",
          "560:   CREATE TABLE v2 (v3 INTEGER UNIQUE ON CONFLICT ABORT);",
          "561:   CREATE TRIGGER x AFTER INSERT ON v2 WHEN (",
          "562:       ( SELECT v1 AS PROMO_REVENUE FROM v2 JOIN v0 USING ( VALUE ) ) AND 0 )",
          "563:   BEGIN",
          "564:     DELETE FROM v2;",
          "565:   END;",
          "566: }",
          "567: do_catchsql_test 24.2 {",
          "568:   ALTER TABLE v0 RENAME TO x ;",
          "569: } {1 {error in trigger x: cannot join using column VALUE - column not present in both tables}}",
          "571: do_execsql_test 24.3 {",
          "572:   DROP TRIGGER x;",
          "573:   CREATE TRIGGER x AFTER INSERT ON v2 WHEN (",
          "574:     0 AND (SELECT rowid FROM v0)",
          "575:   ) BEGIN",
          "576:     DELETE FROM v2;",
          "577:   END;",
          "578: }",
          "580: do_execsql_test 24.4 {",
          "581:   ALTER TABLE v0 RENAME TO xyz;",
          "582:   SELECT sql FROM sqlite_master WHERE type='trigger'",
          "583: } {{CREATE TRIGGER x AFTER INSERT ON v2 WHEN (",
          "584:     0 AND (SELECT rowid FROM \"xyz\")",
          "585:   ) BEGIN",
          "586:     DELETE FROM v2;",
          "587:   END}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b5f6243f6d851422dc643977cee096786eb0d0fd",
      "candidate_info": {
        "commit_hash": "b5f6243f6d851422dc643977cee096786eb0d0fd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b5f6243f6d851422dc643977cee096786eb0d0fd",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "src/vdbe.c"
        ],
        "message": "Set the affinity of regular columns prior to computing the values of generated columns.  Ticket [d7c3f125c925c522]\n\nFossilOrigin-Name: d47d66e3d360d8aa6203a855228d2bc40d9a00d69c15f5066b7632d8fb1ed2cc",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f065cf003bd2a3a580cb5b9fa2eacd8be075fe8c2bbc5688e9a9406abbfb3804",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "229:   Walker w;",
          "230:   Column *pRedo;",
          "231:   int eProgress;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:   VdbeOp *pOp;",
          "234:   assert( pTab->tabFlags & TF_HasGenerated );",
          "235:   testcase( pTab->tabFlags & TF_HasVirtual );",
          "236:   testcase( pTab->tabFlags & TF_HasStored );",
          "241:   sqlite3TableAffinity(pParse->pVdbe, pTab, iRegStore);",
          "242:   if( (pTab->tabFlags & TF_HasStored)!=0",
          "243:    && (pOp = sqlite3VdbeGetOp(pParse->pVdbe,-1))->opcode==OP_Affinity",
          "244:   ){",
          "248:     int ii, jj;",
          "249:     char *zP4 = pOp->p4.z;",
          "250:     assert( zP4!=0 );",
          "251:     assert( pOp->p4type==P4_DYNAMIC );",
          "252:     for(ii=jj=0; zP4[jj]; ii++){",
          "253:       if( pTab->aCol[ii].colFlags & COLFLAG_VIRTUAL ){",
          "254:         continue;",
          "255:       }",
          "256:       if( pTab->aCol[ii].colFlags & COLFLAG_STORED ){",
          "257:         zP4[jj] = SQLITE_AFF_NONE;",
          "258:       }",
          "259:       jj++;",
          "260:     }",
          "261:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1191:     if( pTab->tabFlags & TF_HasGenerated ){",
          "1194:       sqlite3ComputeGeneratedColumns(pParse, regRowid+1, pTab);",
          "1195:     }",
          "1196: #endif",
          "",
          "[Removed Lines]",
          "1192:       testcase( pTab->tabFlags & TF_HasVirtual );",
          "1193:       testcase( pTab->tabFlags & TF_HasStored );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2818:   pIn1 = &aMem[pOp->p1];",
          "2819:   while( 1 /*exit-by-break*/ ){",
          "2820:     assert( pIn1 <= &p->aMem[(p->nMem+1 - p->nCursor)] );",
          "2822:     applyAffinity(pIn1, zAffinity[0], encoding);",
          "2823:     if( zAffinity[0]==SQLITE_AFF_REAL && (pIn1->flags & MEM_Int)!=0 ){",
          "",
          "[Removed Lines]",
          "2821:     assert( memIsValid(pIn1) );",
          "",
          "[Added Lines]",
          "2821:     assert( zAffinity[0]==SQLITE_AFF_NONE || memIsValid(pIn1) );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ec123e13014c585d1c408e1583714de438b50aff",
      "candidate_info": {
        "commit_hash": "ec123e13014c585d1c408e1583714de438b50aff",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ec123e13014c585d1c408e1583714de438b50aff",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/walker.c"
        ],
        "message": "Fix an indentation error and improve the placement of an assert() based on a tweet from Yuri Kotov.\n\nFossilOrigin-Name: e6314e386c6877c669bd32788d3886253b0a187bee2c3889f4eaba219f5e52c7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/walker.c||src/walker.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f24e6ca4f23008212ec05cace9202dbeb37ee34530ead91fac2f5e3eac7f6347",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/walker.c||src/walker.c": [
          "File: src/walker.c -> src/walker.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:     rc = pWalker->xExprCallback(pWalker, pExpr);",
          "74:     if( rc ) return rc & WRC_Abort;",
          "75:     if( !ExprHasProperty(pExpr,(EP_TokenOnly|EP_Leaf)) ){",
          "76:       if( pExpr->pLeft && walkExpr(pWalker, pExpr->pLeft) ) return WRC_Abort;",
          "78:       if( pExpr->pRight ){",
          "79:         assert( !ExprHasProperty(pExpr, EP_WinFunc) );",
          "80:         pExpr = pExpr->pRight;",
          "",
          "[Removed Lines]",
          "77:        assert( pExpr->x.pList==0 || pExpr->pRight==0 );",
          "",
          "[Added Lines]",
          "76:       assert( pExpr->x.pList==0 || pExpr->pRight==0 );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "afa1ecac9b6fba76861dca85b211ca1022f9e378",
      "candidate_info": {
        "commit_hash": "afa1ecac9b6fba76861dca85b211ca1022f9e378",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/afa1ecac9b6fba76861dca85b211ca1022f9e378",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/analyze.c"
        ],
        "message": "Cleaner separation of the STAT4-specific logic in the implementation of ANALYZE.\n\nFossilOrigin-Name: 3df07e5a9a3781a4cf866fc6ee0e5c6f9cd7ca35ce0a6eb3aa7f5f3502e0ffae",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/analyze.c||src/analyze.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cab1834cfc71f71bfed3c5170a0ba40a39385c3b2c50b7c6b6f09cc830dd1b1e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/analyze.c||src/analyze.c": [
          "File: src/analyze.c -> src/analyze.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "264: #ifdef SQLITE_ENABLE_STAT4",
          "",
          "[Removed Lines]",
          "259: typedef struct Stat4Accum Stat4Accum;",
          "260: typedef struct Stat4Sample Stat4Sample;",
          "261: struct Stat4Sample {",
          "",
          "[Added Lines]",
          "259: typedef struct StatAccum StatAccum;",
          "260: typedef struct StatSample StatSample;",
          "261: struct StatSample {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "274: #endif",
          "275: };",
          "291: };",
          "295: #ifdef SQLITE_ENABLE_STAT4",
          "297:   assert( db!=0 );",
          "298:   if( p->nRowid ){",
          "299:     sqlite3DbFree(db, p->u.aRowid);",
          "",
          "[Removed Lines]",
          "276: struct Stat4Accum {",
          "296: static void sampleClear(sqlite3 *db, Stat4Sample *p){",
          "",
          "[Added Lines]",
          "276: struct StatAccum {",
          "282: #ifdef SQLITE_ENABLE_STAT4",
          "292: #endif",
          "298: static void sampleClear(sqlite3 *db, StatSample *p){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "307: #ifdef SQLITE_ENABLE_STAT4",
          "309:   assert( db!=0 );",
          "310:   if( p->nRowid ) sqlite3DbFree(db, p->u.aRowid);",
          "311:   p->u.aRowid = sqlite3DbMallocRawNN(db, n);",
          "",
          "[Removed Lines]",
          "308: static void sampleSetRowid(sqlite3 *db, Stat4Sample *p, int n, const u8 *pData){",
          "",
          "[Added Lines]",
          "310: static void sampleSetRowid(sqlite3 *db, StatSample *p, int n, const u8 *pData){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "323: #ifdef SQLITE_ENABLE_STAT4",
          "325:   assert( db!=0 );",
          "326:   if( p->nRowid ) sqlite3DbFree(db, p->u.aRowid);",
          "327:   p->nRowid = 0;",
          "",
          "[Removed Lines]",
          "324: static void sampleSetRowidInt64(sqlite3 *db, Stat4Sample *p, i64 iRowid){",
          "",
          "[Added Lines]",
          "326: static void sampleSetRowidInt64(sqlite3 *db, StatSample *p, i64 iRowid){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "336: #ifdef SQLITE_ENABLE_STAT4",
          "338:   pTo->isPSample = pFrom->isPSample;",
          "339:   pTo->iCol = pFrom->iCol;",
          "340:   pTo->iHash = pFrom->iHash;",
          "",
          "[Removed Lines]",
          "337: static void sampleCopy(Stat4Accum *p, Stat4Sample *pTo, Stat4Sample *pFrom){",
          "",
          "[Added Lines]",
          "339: static void sampleCopy(StatAccum *p, StatSample *pTo, StatSample *pFrom){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "350: #endif",
          "357: #ifdef SQLITE_ENABLE_STAT4",
          "358:   int i;",
          "359:   for(i=0; i<p->nCol; i++) sampleClear(p->db, p->aBest+i);",
          "",
          "[Removed Lines]",
          "355: static void stat4Destructor(void *pOld){",
          "356:   Stat4Accum *p = (Stat4Accum*)pOld;",
          "",
          "[Added Lines]",
          "357: static void statAccumDestructor(void *pOld){",
          "358:   StatAccum *p = (StatAccum*)pOld;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "391:   int argc,",
          "392:   sqlite3_value **argv",
          "393: ){",
          "",
          "[Removed Lines]",
          "394:   Stat4Accum *p;",
          "",
          "[Added Lines]",
          "396:   StatAccum *p;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "445:     p->current.anLt = &p->current.anEq[nColUp];",
          "446:     p->iPrn = 0x689e962d*(u32)nCol ^ 0xd0944565*(u32)sqlite3_value_int(argv[2]);",
          "450:     p->aBest = &p->a[mxSample];",
          "451:     pSpace = (u8*)(&p->a[mxSample+nCol]);",
          "452:     for(i=0; i<(mxSample+nCol); i++){",
          "",
          "[Removed Lines]",
          "449:     p->a = (struct Stat4Sample*)&p->current.anLt[nColUp];",
          "",
          "[Added Lines]",
          "451:     p->a = (struct StatSample*)&p->current.anLt[nColUp];",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "470: }",
          "471: static const FuncDef statInitFuncdef = {",
          "",
          "[Removed Lines]",
          "469:   sqlite3_result_blob(context, p, sizeof(*p), stat4Destructor);",
          "",
          "[Added Lines]",
          "471:   sqlite3_result_blob(context, p, sizeof(*p), statAccumDestructor);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "495: static int sampleIsBetterPost(",
          "499: ){",
          "500:   int nCol = pAccum->nCol;",
          "501:   int i;",
          "",
          "[Removed Lines]",
          "496:   Stat4Accum *pAccum,",
          "497:   Stat4Sample *pNew,",
          "498:   Stat4Sample *pOld",
          "",
          "[Added Lines]",
          "498:   StatAccum *pAccum,",
          "499:   StatSample *pNew,",
          "500:   StatSample *pOld",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "519: static int sampleIsBetter(",
          "523: ){",
          "524:   tRowcnt nEqNew = pNew->anEq[pNew->iCol];",
          "525:   tRowcnt nEqOld = pOld->anEq[pOld->iCol];",
          "",
          "[Removed Lines]",
          "520:   Stat4Accum *pAccum,",
          "521:   Stat4Sample *pNew,",
          "522:   Stat4Sample *pOld",
          "",
          "[Added Lines]",
          "522:   StatAccum *pAccum,",
          "523:   StatSample *pNew,",
          "524:   StatSample *pOld",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "544:   int i;",
          "546:   assert( IsStat4 || nEqZero==0 );",
          "552:   if( nEqZero>p->nMaxEqZero ){",
          "553:     p->nMaxEqZero = nEqZero;",
          "554:   }",
          "555:   if( pNew->isPSample==0 ){",
          "557:     assert( pNew->anEq[pNew->iCol]>0 );",
          "",
          "[Removed Lines]",
          "542: static void sampleInsert(Stat4Accum *p, Stat4Sample *pNew, int nEqZero){",
          "543:   Stat4Sample *pSample = 0;",
          "556:     Stat4Sample *pUpgrade = 0;",
          "",
          "[Added Lines]",
          "544: static void sampleInsert(StatAccum *p, StatSample *pNew, int nEqZero){",
          "545:   StatSample *pSample = 0;",
          "558:     StatSample *pUpgrade = 0;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "564:     for(i=p->nSample-1; i>=0; i--){",
          "566:       if( pOld->anEq[pNew->iCol]==0 ){",
          "567:         if( pOld->isPSample ) return;",
          "568:         assert( pOld->iCol>pNew->iCol );",
          "",
          "[Removed Lines]",
          "565:       Stat4Sample *pOld = &p->a[i];",
          "",
          "[Added Lines]",
          "567:       StatSample *pOld = &p->a[i];",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "583:   if( p->nSample>=p->mxSample ){",
          "585:     tRowcnt *anEq = pMin->anEq;",
          "586:     tRowcnt *anLt = pMin->anLt;",
          "587:     tRowcnt *anDLt = pMin->anDLt;",
          "",
          "[Removed Lines]",
          "584:     Stat4Sample *pMin = &p->a[p->iMin];",
          "",
          "[Added Lines]",
          "586:     StatSample *pMin = &p->a[p->iMin];",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "624: }",
          "635:   int i;",
          "639:   for(i=(p->nCol-2); i>=iChng; i--){",
          "641:     pBest->anEq[i] = p->current.anEq[i];",
          "642:     if( p->nSample<p->mxSample || sampleIsBetter(p, pBest, &p->a[p->iMin]) ){",
          "643:       sampleInsert(p, pBest, i);",
          "",
          "[Removed Lines]",
          "633: static void samplePushPrevious(Stat4Accum *p, int iChng){",
          "634: #ifdef SQLITE_ENABLE_STAT4",
          "640:     Stat4Sample *pBest = &p->aBest[i];",
          "",
          "[Added Lines]",
          "629: #ifdef SQLITE_ENABLE_STAT4",
          "636: static void samplePushPrevious(StatAccum *p, int iChng){",
          "642:     StatSample *pBest = &p->aBest[i];",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "661:     }",
          "662:     p->nMaxEqZero = iChng;",
          "663:   }",
          "670: }",
          "",
          "[Removed Lines]",
          "664: #endif",
          "666: #ifndef SQLITE_ENABLE_STAT4",
          "667:   UNUSED_PARAMETER( p );",
          "668:   UNUSED_PARAMETER( iChng );",
          "669: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "693:   int i;",
          "697:   int iChng = sqlite3_value_int(argv[1]);",
          "699:   UNUSED_PARAMETER( argc );",
          "",
          "[Removed Lines]",
          "696:   Stat4Accum *p = (Stat4Accum*)sqlite3_value_blob(argv[0]);",
          "",
          "[Added Lines]",
          "693:   StatAccum *p = (StatAccum*)sqlite3_value_blob(argv[0]);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "706:     for(i=0; i<p->nCol; i++) p->current.anEq[i] = 1;",
          "707:   }else{",
          "709:     samplePushPrevious(p, iChng);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "706: #ifdef SQLITE_ENABLE_STAT4",
          "708: #endif",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "796:   int argc,",
          "797:   sqlite3_value **argv",
          "798: ){",
          "800: #ifdef SQLITE_ENABLE_STAT4",
          "802:   int eCall = sqlite3_value_int(argv[1]);",
          "",
          "[Removed Lines]",
          "799:   Stat4Accum *p = (Stat4Accum*)sqlite3_value_blob(argv[0]);",
          "",
          "[Added Lines]",
          "798:   StatAccum *p = (StatAccum*)sqlite3_value_blob(argv[0]);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "860:       p->iGet = 0;",
          "861:     }",
          "862:     if( p->iGet<p->nSample ){",
          "864:       if( pS->nRowid==0 ){",
          "865:         sqlite3_result_int64(context, pS->u.iRowid);",
          "866:       }else{",
          "",
          "[Removed Lines]",
          "863:       Stat4Sample *pS = p->a + p->iGet;",
          "",
          "[Added Lines]",
          "862:       StatSample *pS = p->a + p->iGet;",
          "",
          "---------------"
        ]
      }
    }
  ]
}