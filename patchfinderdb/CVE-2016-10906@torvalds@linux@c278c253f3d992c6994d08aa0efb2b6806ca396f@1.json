{
  "cve_id": "CVE-2016-10906",
  "cve_desc": "An issue was discovered in drivers/net/ethernet/arc/emac_main.c in the Linux kernel before 4.5. A use-after-free is caused by a race condition between the functions arc_emac_tx and arc_emac_tx_clean.",
  "repo": "torvalds/linux",
  "patch_hash": "c278c253f3d992c6994d08aa0efb2b6806ca396f",
  "patch_info": {
    "commit_hash": "c278c253f3d992c6994d08aa0efb2b6806ca396f",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/c278c253f3d992c6994d08aa0efb2b6806ca396f",
    "files": [
      "drivers/net/ethernet/arc/emac_main.c"
    ],
    "message": "net: arc_emac: fix koops caused by sk_buff free\n\nThere is a race between arc_emac_tx() and arc_emac_tx_clean().\nsk_buff got freed by arc_emac_tx_clean() while arc_emac_tx()\nsubmitting sk_buff.\n\nIn order to free sk_buff arc_emac_tx_clean() checks:\n    if ((info & FOR_EMAC) || !txbd->data)\n        break;\n    ...\n    dev_kfree_skb_irq(skb);\n\nIf condition false, arc_emac_tx_clean() free sk_buff.\n\nIn order to submit txbd, arc_emac_tx() do:\n    priv->tx_buff[*txbd_curr].skb = skb;\n    ...\n    priv->txbd[*txbd_curr].data = cpu_to_le32(addr);\n    ...\n    ...  <== arc_emac_tx_clean() check condition here\n    ...  <== (info & FOR_EMAC) is false\n    ...  <== !txbd->data is false\n    ...\n    *info = cpu_to_le32(FOR_EMAC | FIRST_OR_LAST_MASK | len);\n\nIn order to reproduce the situation,\nrun device:\n    # iperf -s\nrun on host:\n    # iperf -t 600 -c <device-ip-addr>\n\n[   28.396284] ------------[ cut here ]------------\n[   28.400912] kernel BUG at .../net/core/skbuff.c:1355!\n[   28.414019] Internal error: Oops - BUG: 0 [#1] SMP ARM\n[   28.419150] Modules linked in:\n[   28.422219] CPU: 0 PID: 0 Comm: swapper/0 Tainted: G    B           4.4.0+ #120\n[   28.429516] Hardware name: Rockchip (Device Tree)\n[   28.434216] task: c0665070 ti: c0660000 task.ti: c0660000\n[   28.439622] PC is at skb_put+0x10/0x54\n[   28.443381] LR is at arc_emac_poll+0x260/0x474\n[   28.447821] pc : [<c03af580>]    lr : [<c028fec4>]    psr: a0070113\n[   28.447821] sp : c0661e58  ip : eea68502  fp : ef377000\n[   28.459280] r10: 0000012c  r9 : f08b2000  r8 : eeb57100\n[   28.464498] r7 : 00000000  r6 : ef376594  r5 : 00000077  r4 : ef376000\n[   28.471015] r3 : 0030488b  r2 : ef13e880  r1 : 000005ee  r0 : eeb57100\n[   28.477534] Flags: NzCv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment none\n[   28.484658] Control: 10c5387d  Table: 8eaf004a  DAC: 00000051\n[   28.490396] Process swapper/0 (pid: 0, stack limit = 0xc0660210)\n[   28.496393] Stack: (0xc0661e58 to 0xc0662000)\n[   28.500745] 1e40:                                                       00000002 00000000\n[   28.508913] 1e60: 00000000 ef376520 00000028 f08b23b8 00000000 ef376520 ef7b6900 c028fc64\n[   28.517082] 1e80: 2f158000 c0661ea8 c0661eb0 0000012c c065e900 c03bdeac ffff95e9 c0662100\n[   28.525250] 1ea0: c0663924 00000028 c0661ea8 c0661ea8 c0661eb0 c0661eb0 0000001e c0660000\n[   28.533417] 1ec0: 40000003 00000008 c0695a00 0000000a c066208c 00000100 c0661ee0 c0027410\n[   28.541584] 1ee0: ef0fb700 2f158000 00200000 ffff95e8 00000004 c0662100 c0662080 00000003\n[   28.549751] 1f00: 00000000 00000000 00000000 c065b45c 0000001e ef005000 c0647a30 00000000\n[   28.557919] 1f20: 00000000 c0027798 00000000 c005cf40 f0802100 c0662ffc c0661f60 f0803100\n[   28.566088] 1f40: c0661fb8 c00093bc c000ffb4 60070013 ffffffff c0661f94 c0661fb8 c00137d4\n[   28.574267] 1f60: 00000001 00000000 00000000 c001ffa0 00000000 c0660000 00000000 c065a364\n[   28.582441] 1f80: c0661fb8 c0647a30 00000000 00000000 00000000 c0661fb0 c000ffb0 c000ffb4\n[   28.590608] 1fa0: 60070013 ffffffff 00000051 00000000 00000000 c005496c c0662400 c061bc40\n[   28.598776] 1fc0: ffffffff ffffffff 00000000 c061b680 00000000 c0647a30 00000000 c0695294\n[   28.606943] 1fe0: c0662488 c0647a2c c066619c 6000406a 413fc090 6000807c 00000000 00000000\n[   28.615127] [<c03af580>] (skb_put) from [<ef376520>] (0xef376520)\n[   28.621218] Code: e5902054 e590c090 e3520000 0a000000 (e7f001f2)\n[   28.627307] ---[ end trace 4824734e2243fdb6 ]---\n\n[   34.377068] Internal error: Oops: 17 [#1] SMP ARM\n[   34.382854] Modules linked in:\n[   34.385947] CPU: 0 PID: 3 Comm: ksoftirqd/0 Not tainted 4.4.0+ #120\n[   34.392219] Hardware name: Rockchip (Device Tree)\n[   34.396937] task: ef02d040 ti: ef05c000 task.ti: ef05c000\n[   34.402376] PC is at __dev_kfree_skb_irq+0x4/0x80\n[   34.407121] LR is at arc_emac_poll+0x130/0x474\n[   34.411583] pc : [<c03bb640>]    lr : [<c028fd94>]    psr: 60030013\n[   34.411583] sp : ef05de68  ip : 0008e83c  fp : ef377000\n[   34.423062] r10: c001bec4  r9 : 00000000  r8 : f08b24c8\n[   34.428296] r7 : f08b2400  r6 : 00000075  r5 : 00000019  r4 : ef376000\n[   34.434827] r3 : 00060000  r2 : 00000042  r1 : 00000001  r0 : 00000000\n[   34.441365] Flags: nZCv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment none\n[   34.448507] Control: 10c5387d  Table: 8f25c04a  DAC: 00000051\n[   34.454262] Process ksoftirqd/0 (pid: 3, stack limit = 0xef05c210)\n[   34.460449] Stack: (0xef05de68 to 0xef05e000)\n[   34.464827] de60:                   ef376000 c028fd94 00000000 c0669480 c0669480 ef376520\n[   34.473022] de80: 00000028 00000001 00002ae4 ef376520 ef7b6900 c028fc64 2f158000 ef05dec0\n[   34.481215] dea0: ef05dec8 0000012c c065e900 c03bdeac ffff983f c0662100 c0663924 00000028\n[   34.489409] dec0: ef05dec0 ef05dec0 ef05dec8 ef05dec8 ef7b6000 ef05c000 40000003 00000008\n[   34.497600] dee0: c0695a00 0000000a c066208c 00000100 ef05def8 c0027410 ef7b6000 40000000\n[   34.505795] df00: 04208040 ffff983e 00000004 c0662100 c0662080 00000003 ef05c000 ef027340\n[   34.513985] df20: ef05c000 c0666c2c 00000000 00000001 00000002 00000000 00000000 c0027568\n[   34.522176] df40: ef027340 c003ef48 ef027300 00000000 ef027340 c003edd4 00000000 00000000\n[   34.530367] df60: 00000000 c003c37c ffffff7f 00000001 00000000 ef027340 00000000 00030003\n[   34.538559] df80: ef05df80 ef05df80 00000000 00000000 ef05df90 ef05df90 ef05dfac ef027300\n[   34.546750] dfa0: c003c2a4 00000000 00000000 c000f578 00000000 00000000 00000000 00000000\n[   34.554939] dfc0: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000\n[   34.563129] dfe0: 00000000 00000000 00000000 00000000 00000013 00000000 ffffffff dfff7fff\n[   34.571360] [<c03bb640>] (__dev_kfree_skb_irq) from [<c028fd94>] (arc_emac_poll+0x130/0x474)\n[   34.579840] [<c028fd94>] (arc_emac_poll) from [<c03bdeac>] (net_rx_action+0xdc/0x28c)\n[   34.587712] [<c03bdeac>] (net_rx_action) from [<c0027410>] (__do_softirq+0xcc/0x1f8)\n[   34.595482] [<c0027410>] (__do_softirq) from [<c0027568>] (run_ksoftirqd+0x2c/0x50)\n[   34.603168] [<c0027568>] (run_ksoftirqd) from [<c003ef48>] (smpboot_thread_fn+0x174/0x18c)\n[   34.611466] [<c003ef48>] (smpboot_thread_fn) from [<c003c37c>] (kthread+0xd8/0xec)\n[   34.619075] [<c003c37c>] (kthread) from [<c000f578>] (ret_from_fork+0x14/0x3c)\n[   34.626317] Code: e8bd8010 e3a00000 e12fff1e e92d4010 (e59030a4)\n[   34.632572] ---[ end trace cca5a3d86a82249a ]---\n\nSigned-off-by: Alexander Kochetkov <al.kochet@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "drivers/net/ethernet/arc/emac_main.c||drivers/net/ethernet/arc/emac_main.c"
    ]
  },
  "patch_diff": {
    "drivers/net/ethernet/arc/emac_main.c||drivers/net/ethernet/arc/emac_main.c": [
      "File: drivers/net/ethernet/arc/emac_main.c -> drivers/net/ethernet/arc/emac_main.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "163:   struct sk_buff *skb = tx_buff->skb;",
      "164:   unsigned int info = le32_to_cpu(txbd->info);",
      "167:    break;",
      "169:   if (unlikely(info & (DROP | DEFR | LTCL | UFLO))) {",
      "",
      "[Removed Lines]",
      "166:   if ((info & FOR_EMAC) || !txbd->data)",
      "",
      "[Added Lines]",
      "166:   if ((info & FOR_EMAC) || !txbd->data || !skb)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "192:   txbd->data = 0;",
      "193:   txbd->info = 0;",
      "196:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "194:   tx_buff->skb = NULL;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "610:  dma_unmap_addr_set(&priv->tx_buff[*txbd_curr], addr, addr);",
      "611:  dma_unmap_len_set(&priv->tx_buff[*txbd_curr], len, len);",
      "614:  priv->txbd[*txbd_curr].data = cpu_to_le32(addr);",
      "",
      "[Removed Lines]",
      "613:  priv->tx_buff[*txbd_curr].skb = skb;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "624:  wmb();",
      "626:  priv->tx_buff[*txbd_curr].skb = skb;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "14a03cf80edf3e19953bb744938e48bc9d496d30",
      "candidate_info": {
        "commit_hash": "14a03cf80edf3e19953bb744938e48bc9d496d30",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/14a03cf80edf3e19953bb744938e48bc9d496d30",
        "files": [
          "drivers/net/hyperv/netvsc_drv.c"
        ],
        "message": "hv_netvsc: Restore needed_headroom request\n\nCommit c0eb454034aa (\"hv_netvsc: Don't ask for additional head room in the\nskb\") got rid of needed_headroom setting for the driver. With the change I\nhit the following issue trying to use ptkgen module:\n\n[   57.522021] kernel BUG at net/core/skbuff.c:1128!\n[   57.522021] invalid opcode: 0000 [#1] SMP DEBUG_PAGEALLOC\n...\n[   58.721068] Call Trace:\n[   58.721068]  [<ffffffffa0144e86>] netvsc_start_xmit+0x4c6/0x8e0 [hv_netvsc]\n...\n[   58.721068]  [<ffffffffa02f87fc>] ? pktgen_finalize_skb+0x25c/0x2a0 [pktgen]\n[   58.721068]  [<ffffffff814f5760>] ? __netdev_alloc_skb+0xc0/0x100\n[   58.721068]  [<ffffffffa02f9907>] pktgen_thread_worker+0x257/0x1920 [pktgen]\n\nBasically, we're calling skb_cow_head(skb, RNDIS_AND_PPI_SIZE) and crash on\n    if (skb_shared(skb))\n        BUG();\n\nWe probably need to restore needed_headroom setting (but shrunk to\nRNDIS_AND_PPI_SIZE as we don't need more) to request the required headroom\nspace. In theory, it should not give us performance penalty.\n\nSigned-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "drivers/net/hyperv/netvsc_drv.c||drivers/net/hyperv/netvsc_drv.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/net/hyperv/netvsc_drv.c||drivers/net/hyperv/netvsc_drv.c": [
          "File: drivers/net/hyperv/netvsc_drv.c -> drivers/net/hyperv/netvsc_drv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1089:  net->ethtool_ops = &ethtool_ops;",
          "1090:  SET_NETDEV_DEV(net, &dev->device);",
          "1093:  memset(&device_info, 0, sizeof(device_info));",
          "1094:  device_info.ring_size = ring_size;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1093:  net->needed_headroom = RNDIS_AND_PPI_SIZE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "52b4b950b50740bff507a62907e86710743c22e7",
      "candidate_info": {
        "commit_hash": "52b4b950b50740bff507a62907e86710743c22e7",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/52b4b950b50740bff507a62907e86710743c22e7",
        "files": [
          "mm/slab.c",
          "mm/slab.h",
          "mm/slab_common.c",
          "mm/slob.c",
          "mm/slub.c"
        ],
        "message": "mm: slab: free kmem_cache_node after destroy sysfs file\n\nWhen slub_debug alloc_calls_show is enabled we will try to track\nlocation and user of slab object on each online node, kmem_cache_node\nstructure and cpu_cache/cpu_slub shouldn't be freed till there is the\nlast reference to sysfs file.\n\nThis fixes the following panic:\n\n   BUG: unable to handle kernel NULL pointer dereference at 0000000000000020\n   IP:  list_locations+0x169/0x4e0\n   PGD 257304067 PUD 438456067 PMD 0\n   Oops: 0000 [#1] SMP\n   CPU: 3 PID: 973074 Comm: cat ve: 0 Not tainted 3.10.0-229.7.2.ovz.9.30-00007-japdoll-dirty #2 9.30\n   Hardware name: DEPO Computers To Be Filled By O.E.M./H67DE3, BIOS L1.60c 07/14/2011\n   task: ffff88042a5dc5b0 ti: ffff88037f8d8000 task.ti: ffff88037f8d8000\n   RIP: list_locations+0x169/0x4e0\n   Call Trace:\n     alloc_calls_show+0x1d/0x30\n     slab_attr_show+0x1b/0x30\n     sysfs_read_file+0x9a/0x1a0\n     vfs_read+0x9c/0x170\n     SyS_read+0x58/0xb0\n     system_call_fastpath+0x16/0x1b\n   Code: 5e 07 12 00 b9 00 04 00 00 3d 00 04 00 00 0f 4f c1 3d 00 04 00 00 89 45 b0 0f 84 c3 00 00 00 48 63 45 b0 49 8b 9c c4 f8 00 00 00 <48> 8b 43 20 48 85 c0 74 b6 48 89 df e8 46 37 44 00 48 8b 53 10\n   CR2: 0000000000000020\n\nSeparated __kmem_cache_release from __kmem_cache_shutdown which now\ncalled on slab_kmem_cache_release (after the last reference to sysfs\nfile object has dropped).\n\nReintroduced locking in free_partial as sysfs file might access cache's\npartial list after shutdowning - partial revert of the commit\n69cb8e6b7c29 (\"slub: free slabs without holding locks\").  Zap\n__remove_partial and use remove_partial (w/o underscores) as\nfree_partial now takes list_lock which s partial revert for commit\n1e4dd9461fab (\"slub: do not assert not having lock in removing freed\npartial\")\n\nSigned-off-by: Dmitry Safonov <dsafonov@virtuozzo.com>\nSuggested-by: Vladimir Davydov <vdavydov@virtuozzo.com>\nAcked-by: Vladimir Davydov <vdavydov@virtuozzo.com>\nCc: Christoph Lameter <cl@linux.com>\nCc: Pekka Enberg <penberg@kernel.org>\nCc: David Rientjes <rientjes@google.com>\nCc: Joonsoo Kim <iamjoonsoo.kim@lge.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
        "before_after_code_files": [
          "mm/slab.c||mm/slab.c",
          "mm/slab.h||mm/slab.h",
          "mm/slab_common.c||mm/slab_common.c",
          "mm/slob.c||mm/slob.c",
          "mm/slub.c||mm/slub.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "mm/slab.c||mm/slab.c": [
          "File: mm/slab.c -> mm/slab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2276:  err = setup_cpu_cache(cachep, gfp);",
          "2277:  if (err) {",
          "2279:   return err;",
          "2280:  }",
          "",
          "[Removed Lines]",
          "2278:   __kmem_cache_shutdown(cachep);",
          "",
          "[Added Lines]",
          "2278:   __kmem_cache_release(cachep);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2413: }",
          "2415: int __kmem_cache_shutdown(struct kmem_cache *cachep)",
          "2416: {",
          "2417:  int i;",
          "2418:  struct kmem_cache_node *n;",
          "2424:  free_percpu(cachep->cpu_cache);",
          "",
          "[Removed Lines]",
          "2419:  int rc = __kmem_cache_shrink(cachep, false);",
          "2421:  if (rc)",
          "2422:   return rc;",
          "",
          "[Added Lines]",
          "2416: {",
          "2417:  return __kmem_cache_shrink(cachep, false);",
          "2418: }",
          "2420: void __kmem_cache_release(struct kmem_cache *cachep)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2430:   kfree(n);",
          "2431:   cachep->node[i] = NULL;",
          "2432:  }",
          "2434: }",
          "",
          "[Removed Lines]",
          "2433:  return 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "mm/slab.h||mm/slab.h": [
          "File: mm/slab.h -> mm/slab.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "140: #define CACHE_CREATE_MASK (SLAB_CORE_FLAGS | SLAB_DEBUG_FLAGS | SLAB_CACHE_FLAGS)",
          "142: int __kmem_cache_shutdown(struct kmem_cache *);",
          "143: int __kmem_cache_shrink(struct kmem_cache *, bool);",
          "144: void slab_kmem_cache_release(struct kmem_cache *);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143: void __kmem_cache_release(struct kmem_cache *);",
          "",
          "---------------"
        ],
        "mm/slab_common.c||mm/slab_common.c": [
          "File: mm/slab_common.c -> mm/slab_common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "694: void slab_kmem_cache_release(struct kmem_cache *s)",
          "695: {",
          "696:  destroy_memcg_params(s);",
          "697:  kfree_const(s->name);",
          "698:  kmem_cache_free(kmem_cache, s);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "696:  __kmem_cache_release(s);",
          "",
          "---------------"
        ],
        "mm/slob.c||mm/slob.c": [
          "File: mm/slob.c -> mm/slob.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "630:  return 0;",
          "631: }",
          "633: int __kmem_cache_shrink(struct kmem_cache *d, bool deactivate)",
          "634: {",
          "635:  return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "633: void __kmem_cache_release(struct kmem_cache *c)",
          "634: {",
          "635: }",
          "",
          "---------------"
        ],
        "mm/slub.c||mm/slub.c": [
          "File: mm/slub.c -> mm/slub.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1592:  __add_partial(n, page, tail);",
          "1593: }",
          "1602: static inline void remove_partial(struct kmem_cache_node *n,",
          "1603:      struct page *page)",
          "1604: {",
          "1605:  lockdep_assert_held(&n->list_lock);",
          "1607: }",
          "",
          "[Removed Lines]",
          "1595: static inline void",
          "1596: __remove_partial(struct kmem_cache_node *n, struct page *page)",
          "1597: {",
          "1598:  list_del(&page->lru);",
          "1599:  n->nr_partial--;",
          "1600: }",
          "1606:  __remove_partial(n, page);",
          "",
          "[Added Lines]",
          "1599:  list_del(&page->lru);",
          "1600:  n->nr_partial--;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3184:  }",
          "3185: }",
          "3187: static int init_kmem_cache_nodes(struct kmem_cache *s)",
          "3188: {",
          "3189:  int node;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3181: void __kmem_cache_release(struct kmem_cache *s)",
          "3182: {",
          "3183:  free_percpu(s->cpu_slab);",
          "3184:  free_kmem_cache_nodes(s);",
          "3185: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3449: static void free_partial(struct kmem_cache *s, struct kmem_cache_node *n)",
          "3450: {",
          "3451:  struct page *page, *h;",
          "3453:  list_for_each_entry_safe(page, h, &n->partial, lru) {",
          "3454:   if (!page->inuse) {",
          "3456:    discard_slab(s, page);",
          "3457:   } else {",
          "3458:    list_slab_objects(s, page,",
          "3460:   }",
          "3461:  }",
          "3462: }",
          "3468: {",
          "3469:  int node;",
          "3470:  struct kmem_cache_node *n;",
          "",
          "[Removed Lines]",
          "3455:    __remove_partial(n, page);",
          "3459:    \"Objects remaining in %s on kmem_cache_close()\");",
          "3467: static inline int kmem_cache_close(struct kmem_cache *s)",
          "",
          "[Added Lines]",
          "3453:  BUG_ON(irqs_disabled());",
          "3454:  spin_lock_irq(&n->list_lock);",
          "3457:    remove_partial(n, page);",
          "3461:    \"Objects remaining in %s on __kmem_cache_shutdown()\");",
          "3464:  spin_unlock_irq(&n->list_lock);",
          "3470: int __kmem_cache_shutdown(struct kmem_cache *s)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3476:   if (n->nr_partial || slabs_node(s, node))",
          "3477:    return 1;",
          "3478:  }",
          "3481:  return 0;",
          "3482: }",
          "",
          "[Removed Lines]",
          "3479:  free_percpu(s->cpu_slab);",
          "3480:  free_kmem_cache_nodes(s);",
          "3484: int __kmem_cache_shutdown(struct kmem_cache *s)",
          "3485: {",
          "3486:  return kmem_cache_close(s);",
          "3487: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3980:  memcg_propagate_slab_attrs(s);",
          "3981:  err = sysfs_slab_add(s);",
          "3982:  if (err)",
          "3985:  return err;",
          "3986: }",
          "",
          "[Removed Lines]",
          "3983:   kmem_cache_close(s);",
          "",
          "[Added Lines]",
          "3979:   __kmem_cache_release(s);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cfdd28beb3205dbd1e91571516807199c8ab84ca",
      "candidate_info": {
        "commit_hash": "cfdd28beb3205dbd1e91571516807199c8ab84ca",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/cfdd28beb3205dbd1e91571516807199c8ab84ca",
        "files": [
          "include/linux/netdevice.h",
          "net/core/dev.c"
        ],
        "message": "net: make netdev_for_each_lower_dev safe for device removal\n\nWhen I used netdev_for_each_lower_dev in commit bad531623253 (\"vrf:\nremove slave queue and private slave struct\") I thought that it acts\nlike netdev_for_each_lower_private and can be used to remove the current\ndevice from the list while walking, but unfortunately it acts more like\nnetdev_for_each_lower_private_rcu and doesn't allow it. The difference\nis where the \"iter\" points to, right now it points to the current element\nand that makes it impossible to remove it. Change the logic to be\nsimilar to netdev_for_each_lower_private and make it point to the \"next\"\nelement so we can safely delete the current one. VRF is the only such\nuser right now, there's no change for the read-only users.\n\nHere's what can happen now:\n[98423.249858] general protection fault: 0000 [#1] SMP\n[98423.250175] Modules linked in: vrf bridge(O) stp llc nfsd auth_rpcgss\noid_registry nfs_acl nfs lockd grace sunrpc crct10dif_pclmul\ncrc32_pclmul crc32c_intel ghash_clmulni_intel jitterentropy_rng\nsha256_generic hmac drbg ppdev aesni_intel aes_x86_64 glue_helper lrw\ngf128mul ablk_helper cryptd evdev serio_raw pcspkr virtio_balloon\nparport_pc parport i2c_piix4 i2c_core virtio_console acpi_cpufreq button\n9pnet_virtio 9p 9pnet fscache ipv6 autofs4 ext4 crc16 mbcache jbd2 sg\nvirtio_blk virtio_net sr_mod cdrom e1000 ata_generic ehci_pci uhci_hcd\nehci_hcd usbcore usb_common virtio_pci ata_piix libata floppy\nvirtio_ring virtio scsi_mod [last unloaded: bridge]\n[98423.255040] CPU: 1 PID: 14173 Comm: ip Tainted: G           O\n4.5.0-rc2+ #81\n[98423.255386] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996),\nBIOS 1.8.1-20150318_183358- 04/01/2014\n[98423.255777] task: ffff8800547f5540 ti: ffff88003428c000 task.ti:\nffff88003428c000\n[98423.256123] RIP: 0010:[<ffffffff81514f3e>]  [<ffffffff81514f3e>]\nnetdev_lower_get_next+0x1e/0x30\n[98423.256534] RSP: 0018:ffff88003428f940  EFLAGS: 00010207\n[98423.256766] RAX: 0002000100000004 RBX: ffff880054ff9000 RCX:\n0000000000000000\n[98423.257039] RDX: ffff88003428f8b8 RSI: ffff88003428f950 RDI:\nffff880054ff90c0\n[98423.257287] RBP: ffff88003428f940 R08: 0000000000000000 R09:\n0000000000000000\n[98423.257537] R10: 0000000000000001 R11: 0000000000000000 R12:\nffff88003428f9e0\n[98423.257802] R13: ffff880054a5fd00 R14: ffff88003428f970 R15:\n0000000000000001\n[98423.258055] FS:  00007f3d76881700(0000) GS:ffff88005d000000(0000)\nknlGS:0000000000000000\n[98423.258418] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[98423.258650] CR2: 00007ffe5951ffa8 CR3: 0000000052077000 CR4:\n00000000000406e0\n[98423.258902] Stack:\n[98423.259075]  ffff88003428f960 ffffffffa0442636 0002000100000004\nffff880054ff9000\n[98423.259647]  ffff88003428f9b0 ffffffff81518205 ffff880054ff9000\nffff88003428f978\n[98423.260208]  ffff88003428f978 ffff88003428f9e0 ffff88003428f9e0\nffff880035b35f00\n[98423.260739] Call Trace:\n[98423.260920]  [<ffffffffa0442636>] vrf_dev_uninit+0x76/0xa0 [vrf]\n[98423.261156]  [<ffffffff81518205>]\nrollback_registered_many+0x205/0x390\n[98423.261401]  [<ffffffff815183ec>] unregister_netdevice_many+0x1c/0x70\n[98423.261641]  [<ffffffff8153223c>] rtnl_delete_link+0x3c/0x50\n[98423.271557]  [<ffffffff815335bb>] rtnl_dellink+0xcb/0x1d0\n[98423.271800]  [<ffffffff811cd7da>] ? __inc_zone_state+0x4a/0x90\n[98423.272049]  [<ffffffff815337b4>] rtnetlink_rcv_msg+0x84/0x200\n[98423.272279]  [<ffffffff810cfe7d>] ? trace_hardirqs_on+0xd/0x10\n[98423.272513]  [<ffffffff8153370b>] ? rtnetlink_rcv+0x1b/0x40\n[98423.272755]  [<ffffffff81533730>] ? rtnetlink_rcv+0x40/0x40\n[98423.272983]  [<ffffffff8155d6e7>] netlink_rcv_skb+0x97/0xb0\n[98423.273209]  [<ffffffff8153371a>] rtnetlink_rcv+0x2a/0x40\n[98423.273476]  [<ffffffff8155ce8b>] netlink_unicast+0x11b/0x1a0\n[98423.273710]  [<ffffffff8155d2f1>] netlink_sendmsg+0x3e1/0x610\n[98423.273947]  [<ffffffff814fbc98>] sock_sendmsg+0x38/0x70\n[98423.274175]  [<ffffffff814fc253>] ___sys_sendmsg+0x2e3/0x2f0\n[98423.274416]  [<ffffffff810d841e>] ? do_raw_spin_unlock+0xbe/0x140\n[98423.274658]  [<ffffffff811e1bec>] ? handle_mm_fault+0x26c/0x2210\n[98423.274894]  [<ffffffff811e19cd>] ? handle_mm_fault+0x4d/0x2210\n[98423.275130]  [<ffffffff81269611>] ? __fget_light+0x91/0xb0\n[98423.275365]  [<ffffffff814fcd42>] __sys_sendmsg+0x42/0x80\n[98423.275595]  [<ffffffff814fcd92>] SyS_sendmsg+0x12/0x20\n[98423.275827]  [<ffffffff81611bb6>] entry_SYSCALL_64_fastpath+0x16/0x7a\n[98423.276073] Code: c3 31 c0 5d c3 0f 1f 84 00 00 00 00 00 66 66 66 66\n90 48 8b 06 55 48 81 c7 c0 00 00 00 48 89 e5 48 8b 00 48 39 f8 74 09 48\n89 06 <48> 8b 40 e8 5d c3 31 c0 5d c3 0f 1f 84 00 00 00 00 00 66 66 66\n[98423.279639] RIP  [<ffffffff81514f3e>] netdev_lower_get_next+0x1e/0x30\n[98423.279920]  RSP <ffff88003428f940>\n\nCC: David Ahern <dsa@cumulusnetworks.com>\nCC: David S. Miller <davem@davemloft.net>\nCC: Roopa Prabhu <roopa@cumulusnetworks.com>\nCC: Vlad Yasevich <vyasevic@redhat.com>\nFixes: bad531623253 (\"vrf: remove slave queue and private slave struct\")\nSigned-off-by: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>\nReviewed-by: David Ahern <dsa@cumulusnetworks.com>\nTested-by: David Ahern <dsa@cumulusnetworks.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "include/linux/netdevice.h||include/linux/netdevice.h",
          "net/core/dev.c||net/core/dev.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/linux/netdevice.h||include/linux/netdevice.h": [
          "File: include/linux/netdevice.h -> include/linux/netdevice.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3718: void *netdev_lower_get_next(struct net_device *dev,",
          "3719:     struct list_head **iter);",
          "3720: #define netdev_for_each_lower_dev(dev, ldev, iter) \\",
          "3722:       ldev = netdev_lower_get_next(dev, &(iter)); \\",
          "3723:       ldev; \\",
          "3724:       ldev = netdev_lower_get_next(dev, &(iter)))",
          "",
          "[Removed Lines]",
          "3721:  for (iter = &(dev)->adj_list.lower, \\",
          "",
          "[Added Lines]",
          "3721:  for (iter = (dev)->adj_list.lower.next, \\",
          "",
          "---------------"
        ],
        "net/core/dev.c||net/core/dev.c": [
          "File: net/core/dev.c -> net/core/dev.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5379: {",
          "5380:  struct netdev_adjacent *lower;",
          "5384:  if (&lower->list == &dev->adj_list.lower)",
          "5385:   return NULL;",
          "5389:  return lower->dev;",
          "5390: }",
          "",
          "[Removed Lines]",
          "5382:  lower = list_entry((*iter)->next, struct netdev_adjacent, list);",
          "",
          "[Added Lines]",
          "5382:  lower = list_entry(*iter, struct netdev_adjacent, list);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5988818008257ca42010d6b43a3e0e48afec9898",
      "candidate_info": {
        "commit_hash": "5988818008257ca42010d6b43a3e0e48afec9898",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/5988818008257ca42010d6b43a3e0e48afec9898",
        "files": [
          "net/vmw_vsock/af_vsock.c"
        ],
        "message": "vsock: Fix blocking ops call in prepare_to_wait\n\nWe receoved a bug report from someone using vmware:\n\nWARNING: CPU: 3 PID: 660 at kernel/sched/core.c:7389\n__might_sleep+0x7d/0x90()\ndo not call blocking ops when !TASK_RUNNING; state=1 set at\n[<ffffffff810fa68d>] prepare_to_wait+0x2d/0x90\nModules linked in: vmw_vsock_vmci_transport vsock snd_seq_midi\nsnd_seq_midi_event snd_ens1371 iosf_mbi gameport snd_rawmidi\nsnd_ac97_codec ac97_bus snd_seq coretemp snd_seq_device snd_pcm\nsnd_timer snd soundcore ppdev crct10dif_pclmul crc32_pclmul\nghash_clmulni_intel vmw_vmci vmw_balloon i2c_piix4 shpchp parport_pc\nparport acpi_cpufreq nfsd auth_rpcgss nfs_acl lockd grace sunrpc btrfs\nxor raid6_pq 8021q garp stp llc mrp crc32c_intel serio_raw mptspi vmwgfx\ndrm_kms_helper ttm drm scsi_transport_spi mptscsih e1000 ata_generic\nmptbase pata_acpi\nCPU: 3 PID: 660 Comm: vmtoolsd Not tainted\n4.2.0-0.rc1.git3.1.fc23.x86_64 #1\nHardware name: VMware, Inc. VMware Virtual Platform/440BX Desktop\nReference Platform, BIOS 6.00 05/20/2014\n 0000000000000000 0000000049e617f3 ffff88006ac37ac8 ffffffff818641f5\n 0000000000000000 ffff88006ac37b20 ffff88006ac37b08 ffffffff810ab446\n ffff880068009f40 ffffffff81c63bc0 0000000000000061 0000000000000000\nCall Trace:\n [<ffffffff818641f5>] dump_stack+0x4c/0x65\n [<ffffffff810ab446>] warn_slowpath_common+0x86/0xc0\n [<ffffffff810ab4d5>] warn_slowpath_fmt+0x55/0x70\n [<ffffffff8112551d>] ? debug_lockdep_rcu_enabled+0x1d/0x20\n [<ffffffff810fa68d>] ? prepare_to_wait+0x2d/0x90\n [<ffffffff810fa68d>] ? prepare_to_wait+0x2d/0x90\n [<ffffffff810da2bd>] __might_sleep+0x7d/0x90\n [<ffffffff812163b3>] __might_fault+0x43/0xa0\n [<ffffffff81430477>] copy_from_iter+0x87/0x2a0\n [<ffffffffa039460a>] __qp_memcpy_to_queue+0x9a/0x1b0 [vmw_vmci]\n [<ffffffffa0394740>] ? qp_memcpy_to_queue+0x20/0x20 [vmw_vmci]\n [<ffffffffa0394757>] qp_memcpy_to_queue_iov+0x17/0x20 [vmw_vmci]\n [<ffffffffa0394d50>] qp_enqueue_locked+0xa0/0x140 [vmw_vmci]\n [<ffffffffa039593f>] vmci_qpair_enquev+0x4f/0xd0 [vmw_vmci]\n [<ffffffffa04847bb>] vmci_transport_stream_enqueue+0x1b/0x20\n[vmw_vsock_vmci_transport]\n [<ffffffffa047ae05>] vsock_stream_sendmsg+0x2c5/0x320 [vsock]\n [<ffffffff810fabd0>] ? wake_atomic_t_function+0x70/0x70\n [<ffffffff81702af8>] sock_sendmsg+0x38/0x50\n [<ffffffff81702ff4>] SYSC_sendto+0x104/0x190\n [<ffffffff8126e25a>] ? vfs_read+0x8a/0x140\n [<ffffffff817042ee>] SyS_sendto+0xe/0x10\n [<ffffffff8186d9ae>] entry_SYSCALL_64_fastpath+0x12/0x76\n\ntransport->stream_enqueue may call copy_to_user so it should\nnot be called inside a prepare_to_wait. Narrow the scope of\nthe prepare_to_wait to avoid the bad call. This also applies\nto vsock_stream_recvmsg as well.\n\nReported-by: Vinson Lee <vlee@freedesktop.org>\nTested-by: Vinson Lee <vlee@freedesktop.org>\nSigned-off-by: Laura Abbott <labbott@fedoraproject.org>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/vmw_vsock/af_vsock.c||net/vmw_vsock/af_vsock.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/vmw_vsock/af_vsock.c||net/vmw_vsock/af_vsock.c": [
          "File: net/vmw_vsock/af_vsock.c -> net/vmw_vsock/af_vsock.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1557:  if (err < 0)",
          "1558:   goto out;",
          "1562:  while (total_written < len) {",
          "1563:   ssize_t written;",
          "",
          "[Removed Lines]",
          "1560:  prepare_to_wait(sk_sleep(sk), &wait, TASK_INTERRUPTIBLE);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1578:     goto out_wait;",
          "1580:    release_sock(sk);",
          "1581:    timeout = schedule_timeout(timeout);",
          "1582:    lock_sock(sk);",
          "1583:    if (signal_pending(current)) {",
          "1584:     err = sock_intr_errno(timeout);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1579:    prepare_to_wait(sk_sleep(sk), &wait, TASK_INTERRUPTIBLE);",
          "1581:    finish_wait(sk_sleep(sk), &wait);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1588:     goto out_wait;",
          "1589:    }",
          "1593:   }",
          "",
          "[Removed Lines]",
          "1591:    prepare_to_wait(sk_sleep(sk), &wait,",
          "1592:      TASK_INTERRUPTIBLE);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1635: out_wait:",
          "1636:  if (total_written > 0)",
          "1637:   err = total_written;",
          "1639: out:",
          "1640:  release_sock(sk);",
          "1641:  return err;",
          "",
          "[Removed Lines]",
          "1638:  finish_wait(sk_sleep(sk), &wait);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1716:  if (err < 0)",
          "1717:   goto out;",
          "1721:  while (1) {",
          "1722:   s64 ready = vsock_stream_has_data(vsk);",
          "",
          "[Removed Lines]",
          "1719:  prepare_to_wait(sk_sleep(sk), &wait, TASK_INTERRUPTIBLE);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1729:    err = -ENOMEM;",
          "1731:   } else if (ready > 0) {",
          "1732:    ssize_t read;",
          "",
          "[Removed Lines]",
          "1730:    goto out_wait;",
          "",
          "[Added Lines]",
          "1726:    goto out;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1750:      vsk, target, read,",
          "1751:      !(flags & MSG_PEEK), &recv_data);",
          "1752:    if (err < 0)",
          "1755:    if (read >= target || flags & MSG_PEEK)",
          "1756:     break;",
          "",
          "[Removed Lines]",
          "1753:     goto out_wait;",
          "",
          "[Added Lines]",
          "1749:     goto out;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1773:     break;",
          "1775:    release_sock(sk);",
          "1776:    timeout = schedule_timeout(timeout);",
          "1777:    lock_sock(sk);",
          "1779:    if (signal_pending(current)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1772:    prepare_to_wait(sk_sleep(sk), &wait, TASK_INTERRUPTIBLE);",
          "1774:    finish_wait(sk_sleep(sk), &wait);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1783:     err = -EAGAIN;",
          "1784:     break;",
          "1785:    }",
          "1789:   }",
          "1790:  }",
          "",
          "[Removed Lines]",
          "1787:    prepare_to_wait(sk_sleep(sk), &wait,",
          "1788:      TASK_INTERRUPTIBLE);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1816:   err = copied;",
          "1817:  }",
          "1821: out:",
          "1822:  release_sock(sk);",
          "1823:  return err;",
          "",
          "[Removed Lines]",
          "1819: out_wait:",
          "1820:  finish_wait(sk_sleep(sk), &wait);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "08bc327629cbd63bb2f66677e4b33b643695097c",
      "candidate_info": {
        "commit_hash": "08bc327629cbd63bb2f66677e4b33b643695097c",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/08bc327629cbd63bb2f66677e4b33b643695097c",
        "files": [
          "drivers/infiniband/ulp/ipoib/ipoib_multicast.c"
        ],
        "message": "IB/ipoib: fix for rare multicast join race condition\n\nA narrow window for race condition still exist between\nmulticast join thread and *dev_flush workers.\nA kernel crash caused by prolong erratic link state changes\nwas observed (most likely a faulty cabling):\n\n[167275.656270] BUG: unable to handle kernel NULL pointer dereference at\n0000000000000020\n[167275.665973] IP: [<ffffffffa05f8f2e>] ipoib_mcast_join+0xae/0x1d0 [ib_ipoib]\n[167275.674443] PGD 0\n[167275.677373] Oops: 0000 [#1] SMP\n...\n[167275.977530] Call Trace:\n[167275.982225]  [<ffffffffa05f92f0>] ? ipoib_mcast_free+0x200/0x200 [ib_ipoib]\n[167275.992024]  [<ffffffffa05fa1b7>] ipoib_mcast_join_task+0x2a7/0x490\n[ib_ipoib]\n[167276.002149]  [<ffffffff8109d5fb>] process_one_work+0x17b/0x470\n[167276.010754]  [<ffffffff8109e3cb>] worker_thread+0x11b/0x400\n[167276.019088]  [<ffffffff8109e2b0>] ? rescuer_thread+0x400/0x400\n[167276.027737]  [<ffffffff810a5aef>] kthread+0xcf/0xe0\nHere was a hit spot:\nipoib_mcast_join() {\n..............\n      rec.qkey      = priv->broadcast->mcmember.qkey;\n                                       ^^^^^^^\n.....\n }\nProposed patch should prevent multicast join task to continue\nif link state change is detected.\n\nSigned-off-by: Alex Estrin <alex.estrin@intel.com>\n\nChanges from v4:\n- as suggested by Doug Ledford, optimized spinlock usage,\ni.e. ipoib_mcast_join() is called with lock held.\nChanges from v3:\n- sync with priv->lock before flag check.\nChages from v2:\n- Move check for OPER_UP flag state to mcast_join() to\nensure no event worker is in progress.\n- minor style fixes.\nChanges from v1:\n- No need to lock again if error detected.\nSigned-off-by: Doug Ledford <dledford@redhat.com>",
        "before_after_code_files": [
          "drivers/infiniband/ulp/ipoib/ipoib_multicast.c||drivers/infiniband/ulp/ipoib/ipoib_multicast.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/infiniband/ulp/ipoib/ipoib_multicast.c||drivers/infiniband/ulp/ipoib/ipoib_multicast.c": [
          "File: drivers/infiniband/ulp/ipoib/ipoib_multicast.c -> drivers/infiniband/ulp/ipoib/ipoib_multicast.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "456:  return status;",
          "457: }",
          "460: {",
          "461:  struct ipoib_dev_priv *priv = netdev_priv(dev);",
          "462:  struct ib_sa_multicast *multicast;",
          "",
          "[Removed Lines]",
          "459: static void ipoib_mcast_join(struct net_device *dev, struct ipoib_mcast *mcast)",
          "",
          "[Added Lines]",
          "462: static int ipoib_mcast_join(struct net_device *dev, struct ipoib_mcast *mcast)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "466:  ib_sa_comp_mask comp_mask;",
          "467:  int ret = 0;",
          "469:  ipoib_dbg_mcast(priv, \"joining MGID %pI6\\n\", mcast->mcmember.mgid.raw);",
          "471:  rec.mgid     = mcast->mcmember.mgid;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "472:  if (!priv->broadcast ||",
          "473:      !test_bit(IPOIB_FLAG_OPER_UP, &priv->flags))",
          "474:   return -EINVAL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "525:    rec.join_state = 4;",
          "526: #endif",
          "527:  }",
          "529:  multicast = ib_sa_join_multicast(&ipoib_sa_client, priv->ca, priv->port,",
          "530:       &rec, comp_mask, GFP_KERNEL,",
          "531:       ipoib_mcast_join_complete, mcast);",
          "532:  if (IS_ERR(multicast)) {",
          "533:   ret = PTR_ERR(multicast);",
          "534:   ipoib_warn(priv, \"ib_sa_join_multicast failed, status %d\\n\", ret);",
          "537:   __ipoib_mcast_schedule_join_thread(priv, mcast, 1);",
          "538:   clear_bit(IPOIB_MCAST_FLAG_BUSY, &mcast->flags);",
          "539:   spin_unlock_irq(&priv->lock);",
          "540:   complete(&mcast->done);",
          "541:  }",
          "542: }",
          "544: void ipoib_mcast_join_task(struct work_struct *work)",
          "",
          "[Removed Lines]",
          "535:   spin_lock_irq(&priv->lock);",
          "",
          "[Added Lines]",
          "535:  spin_unlock_irq(&priv->lock);",
          "540:  spin_lock_irq(&priv->lock);",
          "549:   spin_lock_irq(&priv->lock);",
          "551:  return 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "621:     init_completion(&mcast->done);",
          "622:     set_bit(IPOIB_MCAST_FLAG_BUSY, &mcast->flags);",
          "626:    } else if (!delay_until ||",
          "627:      time_before(mcast->delay_until, delay_until))",
          "628:     delay_until = mcast->delay_until;",
          "",
          "[Removed Lines]",
          "623:     spin_unlock_irq(&priv->lock);",
          "624:     ipoib_mcast_join(dev, mcast);",
          "625:     spin_lock_irq(&priv->lock);",
          "",
          "[Added Lines]",
          "633:     if (ipoib_mcast_join(dev, mcast)) {",
          "634:      spin_unlock_irq(&priv->lock);",
          "635:      return;",
          "636:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "641:  if (mcast) {",
          "642:   init_completion(&mcast->done);",
          "643:   set_bit(IPOIB_MCAST_FLAG_BUSY, &mcast->flags);",
          "644:  }",
          "645:  spin_unlock_irq(&priv->lock);",
          "648: }",
          "650: int ipoib_mcast_start_thread(struct net_device *dev)",
          "",
          "[Removed Lines]",
          "646:  if (mcast)",
          "647:   ipoib_mcast_join(dev, mcast);",
          "",
          "[Added Lines]",
          "655:   ipoib_mcast_join(dev, mcast);",
          "",
          "---------------"
        ]
      }
    }
  ]
}