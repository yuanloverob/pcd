{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a790882d63af27deca8a2cf63577ae909fe08d6c",
      "candidate_info": {
        "commit_hash": "a790882d63af27deca8a2cf63577ae909fe08d6c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a790882d63af27deca8a2cf63577ae909fe08d6c",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/dbfuzz2.c"
        ],
        "message": "Add the -memtrace option to dbfuzz2.\n\nFossilOrigin-Name: 67fecbc79d3e927a7e22f3589be3184114322635874e4b3170666e352d0bfe9d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/dbfuzz2.c||test/dbfuzz2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3a127ef9f7feafe6ba8c75e4eb29e28aa61a30249082cc8767ada1ec0cc0b7f1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/dbfuzz2.c||test/dbfuzz2.c": [
          "File: test/dbfuzz2.c -> test/dbfuzz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: static sqlite3_int64 szMax = 104857600;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77: static sqlite3_mem_methods memtraceBase;",
          "78: static FILE *memtraceOut;",
          "81: static void *memtraceMalloc(int n){",
          "82:   if( memtraceOut ){",
          "83:     fprintf(memtraceOut, \"MEMTRACE: allocate %d bytes\\n\",",
          "84:             memtraceBase.xRoundup(n));",
          "85:   }",
          "86:   return memtraceBase.xMalloc(n);",
          "87: }",
          "88: static void memtraceFree(void *p){",
          "89:   if( p==0 ) return;",
          "90:   if( memtraceOut ){",
          "91:     fprintf(memtraceOut, \"MEMTRACE: free %d bytes\\n\", memtraceBase.xSize(p));",
          "92:   }",
          "93:   memtraceBase.xFree(p);",
          "94: }",
          "95: static void *memtraceRealloc(void *p, int n){",
          "96:   if( p==0 ) return memtraceMalloc(n);",
          "97:   if( n==0 ){",
          "98:     memtraceFree(p);",
          "99:     return 0;",
          "100:   }",
          "101:   if( memtraceOut ){",
          "102:     fprintf(memtraceOut, \"MEMTRACE: resize %d -> %d bytes\\n\",",
          "103:             memtraceBase.xSize(p), memtraceBase.xRoundup(n));",
          "104:   }",
          "105:   return memtraceBase.xRealloc(p, n);",
          "106: }",
          "107: static int memtraceSize(void *p){",
          "108:   return memtraceBase.xSize(p);",
          "109: }",
          "110: static int memtraceRoundup(int n){",
          "111:   return memtraceBase.xRoundup(n);",
          "112: }",
          "113: static int memtraceInit(void *p){",
          "114:   return memtraceBase.xInit(p);",
          "115: }",
          "116: static void memtraceShutdown(void *p){",
          "117:   memtraceBase.xShutdown(p);",
          "118: }",
          "121: static sqlite3_mem_methods ersaztMethods = {",
          "122:   memtraceMalloc,",
          "123:   memtraceFree,",
          "124:   memtraceRealloc,",
          "125:   memtraceSize,",
          "126:   memtraceRoundup,",
          "127:   memtraceInit,",
          "128:   memtraceShutdown",
          "129: };",
          "132: int sqlite3MemTraceActivate(FILE *out){",
          "133:   int rc = SQLITE_OK;",
          "134:   if( memtraceBase.xMalloc==0 ){",
          "135:     rc = sqlite3_config(SQLITE_CONFIG_GETMALLOC, &memtraceBase);",
          "136:     if( rc==SQLITE_OK ){",
          "137:       rc = sqlite3_config(SQLITE_CONFIG_MALLOC, &ersaztMethods);",
          "138:     }",
          "139:   }",
          "140:   memtraceOut = out;",
          "141:   return rc;",
          "142: }",
          "145: int sqlite3MemTraceDeactivate(void){",
          "146:   int rc = SQLITE_OK;",
          "147:   if( memtraceBase.xMalloc!=0 ){",
          "148:     rc = sqlite3_config(SQLITE_CONFIG_MALLOC, &memtraceBase);",
          "149:     if( rc==SQLITE_OK ){",
          "150:       memset(&memtraceBase, 0, sizeof(memtraceBase));",
          "151:     }",
          "152:   }",
          "153:   memtraceOut = 0;",
          "154:   return rc;",
          "155: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "162:         bVdbeDebug = 1;",
          "163:         continue;",
          "164:       }",
          "165:       if( strcmp(z,\"max-db-size\")==0 ){",
          "166:         if( i+1==argc ){",
          "167:           fprintf(stderr, \"missing argument to %s\\n\", argv[i]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "248:       if( strcmp(z,\"memtrace\")==0 ){",
          "249:         sqlite3MemTraceActivate(stdout);",
          "250:         continue;",
          "251:       }",
          "252:       if( strcmp(z,\"mem\")==0 ){",
          "253:         bVdbeDebug = 1;",
          "254:         continue;",
          "255:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0971ef45abb33fd7f44510aa095efcdae776301b",
      "candidate_info": {
        "commit_hash": "0971ef45abb33fd7f44510aa095efcdae776301b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0971ef45abb33fd7f44510aa095efcdae776301b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "test/corruptL.test"
        ],
        "message": "Fix an assert() in the OP_Delete opcode that could fail with a corrupt database.\n\nFossilOrigin-Name: 915388ab39ba3ca8681cd2613b91314aa965967f23a5bface90f54a3d6423300",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "test/corruptL.test||test/corruptL.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5dfc4fe98a4821cbdbfd7dfddf221b00251b2a26bf58767a3956b64e9a4e92da",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4786:     i64 iKey = sqlite3BtreeIntegerKey(pC->uc.pCursor);",
          "4788:   }",
          "4789: #endif",
          "",
          "[Removed Lines]",
          "4787:     assert( pC->movetoTarget==iKey );",
          "",
          "[Added Lines]",
          "4787:     assert( CORRUPT_DB || pC->movetoTarget==iKey );",
          "",
          "---------------"
        ],
        "test/corruptL.test||test/corruptL.test": [
          "File: test/corruptL.test -> test/corruptL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1008: } {1 {database disk image is malformed}}",
          "1011: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1011: #-------------------------------------------------------------------------",
          "1012: reset_db",
          "1013: do_test 11.0 {",
          "1014:   sqlite3 db {}",
          "1015:   db deserialize [decode_hexdb {",
          "1016: | size 595 pagesize 512 filename x.db",
          "1017: | page 1 offset 0",
          "1018: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "1019: |     16: 02 00 00 01 00 40 20 20 00 01 00 0c 00 00 00 07   .....@  ........",
          "1020: |     32: 00 00 00 05 07 a1 1f fa 00 00 00 08 00 00 00 04   ................",
          "1021: |     48: 00 00 01 00 00 49 00 00 00 00 00 05 00 00 00 00   .....I..........",
          "1022: |     80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1c   ................",
          "1023: |     96: 00 2e 2c 50 0d 00 00 00 06 01 06 00 01 da 01 b0   ..,P............",
          "1024: |    112: 01 56 01 86 01 2a 01 06 00 00 62 00 00 00 00 00   .V...*....b.....",
          "1025: |    128: 00 ed e2 78 74 64 33 ff 43 52 45 41 54 45 20 49   ...xtd3.CREATE I",
          "1026: |    144: 4e 44 45 58 20 74 33 78 20 4f 4e 20 74 33 28 38   NDEX t3x ON t3(8",
          "1027: |    160: 29 2e 04 06 17 15 11 01 45 69 6e 64 65 68 74 32   ).......Eindeht2",
          "1028: |    176: 63 64 74 31 e5 43 52 45 41 54 45 20 49 4e 44 45   cdt1.CREATE INDE",
          "1029: |    192: 58 20 74 32 63 c4 20 4f 4e 20 74 32 28 63 2c 64   X t2c. ON t2(c,d",
          "1030: |    208: 29 28 05 06 17 01 11 11 3d 74 61 6c 36 74 62 74   )(......=tal6tbt",
          "1031: |    224: 65 32 04 43 52 45 41 54 45 20 54 41 42 4c 45 20   e2.CREATE TABLE",
          "1032: |    240: 74 00 04 00 00 00 00 00 00 00 00 00 00 00 00 00   t...............",
          "1033: |    256: 00 00 00 00 00 00 22 07 06 17 11 11 01 30 e8 03   .............0..",
          "1034: |    272: 62 6c 65 74 34 74 35 02 43 52 45 41 54 45 20 54   blet4t5.CREATE T",
          "1035: |    288: 41 42 4c 45 20 74 34 28 94 29 2a 06 06 17 13 11   ABLE t4(.)*.....",
          "1036: |    304: 01 3f 69 33 74 6e 65 78 78 74 64 33 ff 43 52 45   .?i3tnexxtd3.CRE",
          "1037: |    320: 41 54 45 20 49 4e 44 45 58 20 74 33 78 20 4f 4e   ATE INDEX t3x ON",
          "1038: |    336: 20 74 31 28 38 29 2e 04 06 17 15 11 01 45 69 6e    t1(8).......Ein",
          "1039: |    352: 64 65 68 74 32 63 64 74 31 e5 43 52 45 41 54 45   deht2cdt1.CREATE",
          "1040: |    368: 20 49 4e 44 45 58 20 74 32 63 c4 20 4f 4e 20 74    INDEX t2c. ON t",
          "1041: |    384: 32 28 63 2c 64 29 28 05 06 17 01 11 11 3d 74 61   2(c,d)(......=ta",
          "1042: |    400: 6c 32 74 62 74 65 32 04 43 52 45 41 54 45 20 54   l2tbte2.CREATE T",
          "1043: |    416: 41 42 4c 45 20 74 33 28 63 2c 78 2c 65 2c 66 29   ABLE t3(c,x,e,f)",
          "1044: |    432: 28 02 06 17 11 11 01 3d 74 61 9e 93 65 74 32 74   (......=ta..et2t",
          "1045: |    448: 32 03 43 52 45 41 54 45 20 54 41 42 4c 45 20 74   2.CREATE TABLE t",
          "1046: |    464: 32 28 63 2c 64 2c 65 2c 66 29 24 01 06 17 11 11   2(c,d,e,f)$.....",
          "1047: |    480: 01 35 55 61 62 6c 88 74 31 74 31 02 43 52 45 41   .5Uabl.t1t1.CREA",
          "1048: |    496: 54 45 20 54 41 42 4c 45 20 74 31 28 61 2c 62 29   TE TABLE t1(a,b)",
          "1049: | page 2 offset 512",
          "1050: |      0: 0d 00 00 00 0d 25 00 01 cf 00 01 fa 01 f3 01 de   .....%..........",
          "1051: |     16: 01 00 00 00 fd 00 00 0d 00 00 00 00 45 20 54 41   ............E TA",
          "1052: |     32: 42 4c 45 20 74 34 28 94 29 2a 06 06 17 13 11 01   BLE t4(.)*......",
          "1053: |     48: 3f 69 33 74 6e 65 78 78 74 64 33 ff 43 52 45 a0   ?i3tnexxtd3.CRE.",
          "1054: |     64: a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 74 13 11 01   ............t...",
          "1055: |     80: 49 45 74 00 00 00 00 00 00 00 00 00 00 00 00 00   IEt.............",
          "1056: | end x.db",
          "1057: }]} {}",
          "1059: do_catchsql_test 11.1 {",
          "1060:   DELETE FROM t3 WHERE x IN (SELECT x FROM t4);",
          "1061: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "554a9dc78ab23f3831dd689fe33fb87f2d60626d",
      "candidate_info": {
        "commit_hash": "554a9dc78ab23f3831dd689fe33fb87f2d60626d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/554a9dc78ab23f3831dd689fe33fb87f2d60626d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/sqliteInt.h",
          "test/rowvalue7.test"
        ],
        "message": "Improved detection of number of column mismatch for vector assignment in UPDATE statements.  Ticket [78acc9d40f0786e8]\n\nFossilOrigin-Name: bd4bda73df3794eef424eb13e08fc7cc54347d1ac69febaeec41f6b6cb4a42bc",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/rowvalue7.test||test/rowvalue7.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d0cc06d8a30444125e5655f6587a6355471c3447c08a2e5f7a046a4ed5cc5f09",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1633:   for(i=0; i<pColumns->nId; i++){",
          "1634:     Expr *pSubExpr = sqlite3ExprForVectorField(pParse, pExpr, i);",
          "1635:     pList = sqlite3ExprListAppend(pParse, pList, pSubExpr);",
          "1636:     if( pList ){",
          "1637:       assert( pList->nExpr==iFirst+i+1 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1635:     assert( pSubExpr!=0 || db->mallocFailed );",
          "1636:     assert( pSubExpr==0 || pSubExpr->iTable==0 );",
          "1637:     if( pSubExpr==0 ) continue;",
          "1638:     pSubExpr->iTable = pColumns->nId;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3906:         pExpr->pLeft->iTable = sqlite3CodeSubselect(pParse, pExpr->pLeft);",
          "3907:       }",
          "3908:       assert( pExpr->iTable==0 || pExpr->pLeft->op==TK_SELECT );",
          "3911:       ){",
          "3912:         sqlite3ErrorMsg(pParse, \"%d columns assigned %d values\",",
          "3913:                                 pExpr->iTable, n);",
          "",
          "[Removed Lines]",
          "3909:       if( pExpr->iTable",
          "3910:        && pExpr->iTable!=(n = sqlite3ExprVectorSize(pExpr->pLeft))",
          "",
          "[Added Lines]",
          "3913:       if( pExpr->iTable!=0",
          "3914:        && pExpr->iTable!=(n = sqlite3ExprVectorSize(pExpr->pLeft))",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "test/rowvalue7.test||test/rowvalue7.test": [
          "File: test/rowvalue7.test -> test/rowvalue7.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:   UPDATE t1 SET (b,c,d) = (SELECT x,y FROM t2 WHERE w=a);",
          "56: } {1 {3 columns assigned 2 values}}",
          "58: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: # 2019-08-26",
          "59: # ticket https://www.sqlite.org/src/info/78acc9d40f0786e8",
          "60: #",
          "61: do_catchsql_test 3.0 {",
          "62:   DROP TABLE IF EXISTS t1;",
          "63:   CREATE TABLE t1(a,b);",
          "64:   INSERT INTO t1 VALUES(1,2);",
          "65:   UPDATE t1 SET (a,a,a,b)=(SELECT 99,100);",
          "66: } {1 {4 columns assigned 2 values}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9e9374b2e20a2221f8fdfb940d6d82064d641283",
      "candidate_info": {
        "commit_hash": "9e9374b2e20a2221f8fdfb940d6d82064d641283",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9e9374b2e20a2221f8fdfb940d6d82064d641283",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/update.c"
        ],
        "message": "Avoid an excess register allocation in UPDATE, when possible.  This improves speed (slightly) and reduces the code footprint.\n\nFossilOrigin-Name: 8658574e3f435f03a87c04f398bd05078ebc53ecb4a477d3b24902d701d935c4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/update.c||src/update.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ecb56b75a0e66462acdcce285b93f9fc56944c42902d886d6bada419059519a9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "357:   if( onError==OE_Replace ) bReplace = 1;",
          "359:     int reg;",
          "360:     if( chngKey || hasFK>1 || pIdx==pPk",
          "361:      || indexWhereClauseMightChange(pIdx,aXRef,chngRowid)",
          "",
          "[Removed Lines]",
          "358:   for(j=0, pIdx=pTab->pIndex; pIdx; pIdx=pIdx->pNext, j++){",
          "",
          "[Added Lines]",
          "359:   for(nAllIdx=0, pIdx=pTab->pIndex; pIdx; pIdx=pIdx->pNext, nAllIdx++){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "375:         }",
          "376:       }",
          "377:     }",
          "380:   }",
          "382:   if( bReplace ){",
          "",
          "[Removed Lines]",
          "378:     if( reg==0 ) aToOpen[j+1] = 0;",
          "379:     aRegIdx[j] = reg;",
          "",
          "[Added Lines]",
          "379:     if( reg==0 ) aToOpen[nAllIdx+1] = 0;",
          "380:     aRegIdx[nAllIdx] = reg;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "395:   if( !IsVirtual(pTab) ){",
          "397:     regOldRowid = regNewRowid = ++pParse->nMem;",
          "398:     if( chngPk || pTrigger || hasFK ){",
          "399:       regOld = pParse->nMem + 1;",
          "",
          "[Removed Lines]",
          "396:     regRowSet = ++pParse->nMem;",
          "",
          "[Added Lines]",
          "402:     assert( aRegIdx[nAllIdx]==pParse->nMem );",
          "403:     regRowSet = aRegIdx[nAllIdx];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "524:     sqlite3VdbeAddOp2(v, OP_Rowid, iDataCur, regOldRowid);",
          "525:     if( eOnePass==ONEPASS_OFF ){",
          "526:       sqlite3VdbeAddOp2(v, OP_RowSetAdd, regRowSet, regOldRowid);",
          "527:     }",
          "528:   }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "534:       aRegIdx[nAllIdx] = ++pParse->nMem;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0e3c50c5dc156fd5f05d7284510c5905494f04db",
      "candidate_info": {
        "commit_hash": "0e3c50c5dc156fd5f05d7284510c5905494f04db",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0e3c50c5dc156fd5f05d7284510c5905494f04db",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/window9.test"
        ],
        "message": "Eliminate some more cases of redundant sorting in window-function queries.\n\nFossilOrigin-Name: 8158d2aca68c5a253054376fdf1b8eaab2db874f4b93524742be7340e9c50dd5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/window9.test||test/window9.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 193c87fc96f964984a144c1a4506ef9db033ab2b80e64dd4d09d820fef466407",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "935:     pSort = sqlite3ExprListDup(db, pMWin->pPartition, 0);",
          "936:     pSort = exprListAppendList(pParse, pSort, pMWin->pOrderBy, 1);",
          "938:       if( sqlite3ExprListCompare(pSort, p->pOrderBy, -1)==0 ){",
          "939:         sqlite3ExprListDelete(db, p->pOrderBy);",
          "940:         p->pOrderBy = 0;",
          "941:       }",
          "942:     }",
          "",
          "[Removed Lines]",
          "937:     if( pSort && p->pOrderBy ){",
          "",
          "[Added Lines]",
          "937:     if( pSort && p->pOrderBy && p->pOrderBy->nExpr<=pSort->nExpr ){",
          "938:       int nSave = pSort->nExpr;",
          "939:       pSort->nExpr = p->pOrderBy->nExpr;",
          "944:       pSort->nExpr = nSave;",
          "",
          "---------------"
        ],
        "test/window9.test||test/window9.test": [
          "File: test/window9.test -> test/window9.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:   SELECT b, b=count(*), group_concat(b) OVER () FROM t1 GROUP BY b;",
          "146: } {1 0 1,2 2 1 1,2}",
          "150: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148: #--------------------------------------------------------------------------",
          "149: reset_db",
          "150: do_execsql_test 5.0 {",
          "151:   CREATE TABLE t1(a, b, c, d, e);",
          "152:   CREATE INDEX i1 ON t1(a, b, c, d, e);",
          "153: }",
          "155: foreach {tn sql} {",
          "156:   1 {",
          "157:     SELECT",
          "158:       sum(e) OVER (),",
          "159:       sum(e) OVER (ORDER BY a),",
          "160:       sum(e) OVER (PARTITION BY a ORDER BY b),",
          "161:       sum(e) OVER (PARTITION BY a, b ORDER BY c),",
          "162:       sum(e) OVER (PARTITION BY a, b, c ORDER BY d)",
          "163:     FROM t1;",
          "164:   }",
          "165:   2 {",
          "166:     SELECT sum(e) OVER (PARTITION BY a ORDER BY b) FROM t1 ORDER BY a;",
          "167:   }",
          "168: } {",
          "169:   do_test 5.1.$tn {",
          "170:     execsql \"EXPLAIN QUERY PLAN $sql\"",
          "171:   } {~/ORDER/}",
          "172: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}