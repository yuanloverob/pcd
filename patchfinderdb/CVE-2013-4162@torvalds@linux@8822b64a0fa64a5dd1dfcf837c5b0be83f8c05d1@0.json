{
  "cve_id": "CVE-2013-4162",
  "cve_desc": "The udp_v6_push_pending_frames function in net/ipv6/udp.c in the IPv6 implementation in the Linux kernel through 3.10.3 makes an incorrect function call for pending data, which allows local users to cause a denial of service (BUG and system crash) via a crafted application that uses the UDP_CORK option in a setsockopt system call.",
  "repo": "torvalds/linux",
  "patch_hash": "8822b64a0fa64a5dd1dfcf837c5b0be83f8c05d1",
  "patch_info": {
    "commit_hash": "8822b64a0fa64a5dd1dfcf837c5b0be83f8c05d1",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/8822b64a0fa64a5dd1dfcf837c5b0be83f8c05d1",
    "files": [
      "include/net/udp.h",
      "net/ipv4/udp.c",
      "net/ipv6/udp.c"
    ],
    "message": "ipv6: call udp_push_pending_frames when uncorking a socket with AF_INET pending data\n\nWe accidentally call down to ip6_push_pending_frames when uncorking\npending AF_INET data on a ipv6 socket. This results in the following\nsplat (from Dave Jones):\n\nskbuff: skb_under_panic: text:ffffffff816765f6 len:48 put:40 head:ffff88013deb6df0 data:ffff88013deb6dec tail:0x2c end:0xc0 dev:<NULL>\n------------[ cut here ]------------\nkernel BUG at net/core/skbuff.c:126!\ninvalid opcode: 0000 [#1] PREEMPT SMP DEBUG_PAGEALLOC\nModules linked in: dccp_ipv4 dccp 8021q garp bridge stp dlci mpoa snd_seq_dummy sctp fuse hidp tun bnep nfnetlink scsi_transport_iscsi rfcomm can_raw can_bcm af_802154 appletalk caif_socket can caif ipt_ULOG x25 rose af_key pppoe pppox ipx phonet irda llc2 ppp_generic slhc p8023 psnap p8022 llc crc_ccitt atm bluetooth\n+netrom ax25 nfc rfkill rds af_rxrpc coretemp hwmon kvm_intel kvm crc32c_intel snd_hda_codec_realtek ghash_clmulni_intel microcode pcspkr snd_hda_codec_hdmi snd_hda_intel snd_hda_codec snd_hwdep usb_debug snd_seq snd_seq_device snd_pcm e1000e snd_page_alloc snd_timer ptp snd pps_core soundcore xfs libcrc32c\nCPU: 2 PID: 8095 Comm: trinity-child2 Not tainted 3.10.0-rc7+ #37\ntask: ffff8801f52c2520 ti: ffff8801e6430000 task.ti: ffff8801e6430000\nRIP: 0010:[<ffffffff816e759c>]  [<ffffffff816e759c>] skb_panic+0x63/0x65\nRSP: 0018:ffff8801e6431de8  EFLAGS: 00010282\nRAX: 0000000000000086 RBX: ffff8802353d3cc0 RCX: 0000000000000006\nRDX: 0000000000003b90 RSI: ffff8801f52c2ca0 RDI: ffff8801f52c2520\nRBP: ffff8801e6431e08 R08: 0000000000000000 R09: 0000000000000000\nR10: 0000000000000001 R11: 0000000000000001 R12: ffff88022ea0c800\nR13: ffff88022ea0cdf8 R14: ffff8802353ecb40 R15: ffffffff81cc7800\nFS:  00007f5720a10740(0000) GS:ffff880244c00000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 0000000005862000 CR3: 000000022843c000 CR4: 00000000001407e0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\nDR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000600\nStack:\n ffff88013deb6dec 000000000000002c 00000000000000c0 ffffffff81a3f6e4\n ffff8801e6431e18 ffffffff8159a9aa ffff8801e6431e90 ffffffff816765f6\n ffffffff810b756b 0000000700000002 ffff8801e6431e40 0000fea9292aa8c0\nCall Trace:\n [<ffffffff8159a9aa>] skb_push+0x3a/0x40\n [<ffffffff816765f6>] ip6_push_pending_frames+0x1f6/0x4d0\n [<ffffffff810b756b>] ? mark_held_locks+0xbb/0x140\n [<ffffffff81694919>] udp_v6_push_pending_frames+0x2b9/0x3d0\n [<ffffffff81694660>] ? udplite_getfrag+0x20/0x20\n [<ffffffff8162092a>] udp_lib_setsockopt+0x1aa/0x1f0\n [<ffffffff811cc5e7>] ? fget_light+0x387/0x4f0\n [<ffffffff816958a4>] udpv6_setsockopt+0x34/0x40\n [<ffffffff815949f4>] sock_common_setsockopt+0x14/0x20\n [<ffffffff81593c31>] SyS_setsockopt+0x71/0xd0\n [<ffffffff816f5d54>] tracesys+0xdd/0xe2\nCode: 00 00 48 89 44 24 10 8b 87 d8 00 00 00 48 89 44 24 08 48 8b 87 e8 00 00 00 48 c7 c7 c0 04 aa 81 48 89 04 24 31 c0 e8 e1 7e ff ff <0f> 0b 55 48 89 e5 0f 0b 55 48 89 e5 0f 0b 55 48 89 e5 0f 0b 55\nRIP  [<ffffffff816e759c>] skb_panic+0x63/0x65\n RSP <ffff8801e6431de8>\n\nThis patch adds a check if the pending data is of address family AF_INET\nand directly calls udp_push_ending_frames from udp_v6_push_pending_frames\nif that is the case.\n\nThis bug was found by Dave Jones with trinity.\n\n(Also move the initialization of fl6 below the AF_INET check, even if\nnot strictly necessary.)\n\nCc: Dave Jones <davej@redhat.com>\nCc: YOSHIFUJI Hideaki <yoshfuji@linux-ipv6.org>\nSigned-off-by: Hannes Frederic Sowa <hannes@stressinduktion.org>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "include/net/udp.h||include/net/udp.h",
      "net/ipv4/udp.c||net/ipv4/udp.c",
      "net/ipv6/udp.c||net/ipv6/udp.c"
    ]
  },
  "patch_diff": {
    "include/net/udp.h||include/net/udp.h": [
      "File: include/net/udp.h -> include/net/udp.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "181: extern void udp_err(struct sk_buff *, u32);",
      "182: extern int udp_sendmsg(struct kiocb *iocb, struct sock *sk,",
      "183:        struct msghdr *msg, size_t len);",
      "184: extern void udp_flush_pending_frames(struct sock *sk);",
      "185: extern int udp_rcv(struct sk_buff *skb);",
      "186: extern int udp_ioctl(struct sock *sk, int cmd, unsigned long arg);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "184: extern int udp_push_pending_frames(struct sock *sk);",
      "",
      "---------------"
    ],
    "net/ipv4/udp.c||net/ipv4/udp.c": [
      "File: net/ipv4/udp.c -> net/ipv4/udp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "804: {",
      "805:  struct udp_sock  *up = udp_sk(sk);",
      "806:  struct inet_sock *inet = inet_sk(sk);",
      "",
      "[Removed Lines]",
      "803: static int udp_push_pending_frames(struct sock *sk)",
      "",
      "[Added Lines]",
      "803: int udp_push_pending_frames(struct sock *sk)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "819:  up->pending = 0;",
      "820:  return err;",
      "821: }",
      "823: int udp_sendmsg(struct kiocb *iocb, struct sock *sk, struct msghdr *msg,",
      "824:   size_t len)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "822: EXPORT_SYMBOL(udp_push_pending_frames);",
      "",
      "---------------"
    ],
    "net/ipv6/udp.c||net/ipv6/udp.c": [
      "File: net/ipv6/udp.c -> net/ipv6/udp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "959:  struct udphdr *uh;",
      "960:  struct udp_sock  *up = udp_sk(sk);",
      "961:  struct inet_sock *inet = inet_sk(sk);",
      "963:  int err = 0;",
      "964:  int is_udplite = IS_UDPLITE(sk);",
      "965:  __wsum csum = 0;",
      "968:  if ((skb = skb_peek(&sk->sk_write_queue)) == NULL)",
      "969:   goto out;",
      "",
      "[Removed Lines]",
      "962:  struct flowi6 *fl6 = &inet->cork.fl.u.ip6;",
      "",
      "[Added Lines]",
      "962:  struct flowi6 *fl6;",
      "967:  if (up->pending == AF_INET)",
      "968:   return udp_push_pending_frames(sk);",
      "970:  fl6 = &inet->cork.fl.u.ip6;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "384816051ca9125cd54750e59c780c2a2655fa4f",
      "candidate_info": {
        "commit_hash": "384816051ca9125cd54750e59c780c2a2655fa4f",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/384816051ca9125cd54750e59c780c2a2655fa4f",
        "files": [
          "net/sunrpc/clnt.c",
          "net/sunrpc/rpc_pipe.c"
        ],
        "message": "SUNRPC: fix races on PipeFS MOUNT notifications\n\nBelow are races, when RPC client can be created without PiepFS dentries\n\nCPU#0\t\t\t\t\tCPU#1\n-----------------------------\t\t-----------------------------\nrpc_new_client\t\t\t\trpc_fill_super\nrpc_setup_pipedir\nmutex_lock(&sn->pipefs_sb_lock)\nrpc_get_sb_net == NULL\n(no per-net PipeFS superblock)\n\t\t\t\t\tsn->pipefs_sb = sb;\n\t\t\t\t\tnotifier_call_chain(MOUNT)\n\t\t\t\t\t(client is not in the list)\nrpc_register_client\n(client without pipes dentries)\n\nTo fix this patch:\n1) makes PipeFS mount notification call with pipefs_sb_lock being held.\n2) releases pipefs_sb_lock on new SUNRPC client creation only after\nregistration.\n\nSigned-off-by: Stanislav Kinsbursky <skinsbursky@parallels.com>\nCc: stable@vger.kernel.org\nSigned-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>",
        "before_after_code_files": [
          "net/sunrpc/clnt.c||net/sunrpc/clnt.c",
          "net/sunrpc/rpc_pipe.c||net/sunrpc/rpc_pipe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/sunrpc/clnt.c||net/sunrpc/clnt.c": [
          "File: net/sunrpc/clnt.c -> net/sunrpc/clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "157: }",
          "159: static int",
          "161: {",
          "164:  struct dentry *dentry;",
          "166:  clnt->cl_dentry = NULL;",
          "167:  if (dir_name == NULL)",
          "168:   return 0;",
          "172:  dentry = rpc_setup_pipedir_sb(pipefs_sb, clnt, dir_name);",
          "174:  if (IS_ERR(dentry))",
          "175:   return PTR_ERR(dentry);",
          "176:  clnt->cl_dentry = dentry;",
          "",
          "[Removed Lines]",
          "160: rpc_setup_pipedir(struct rpc_clnt *clnt, const char *dir_name)",
          "162:  struct net *net = rpc_net_ns(clnt);",
          "163:  struct super_block *pipefs_sb;",
          "169:  pipefs_sb = rpc_get_sb_net(net);",
          "170:  if (!pipefs_sb)",
          "171:   return 0;",
          "173:  rpc_put_sb_net(net);",
          "",
          "[Added Lines]",
          "160: rpc_setup_pipedir(struct rpc_clnt *clnt, const char *dir_name,",
          "161:     struct super_block *pipefs_sb)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "296:  struct rpc_clnt  *clnt = NULL;",
          "297:  struct rpc_auth  *auth;",
          "298:  int err;",
          "301:  dprintk(\"RPC:       creating %s client for %s (xprt %p)\\n\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "294:  struct super_block *pipefs_sb;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "355:  atomic_set(&clnt->cl_count, 1);",
          "361:  auth = rpcauth_create(args->authflavor, clnt);",
          "362:  if (IS_ERR(auth)) {",
          "",
          "[Removed Lines]",
          "357:  err = rpc_setup_pipedir(clnt, program->pipe_dir_name);",
          "358:  if (err < 0)",
          "359:   goto out_no_path;",
          "",
          "[Added Lines]",
          "353:  pipefs_sb = rpc_get_sb_net(rpc_net_ns(clnt));",
          "354:  if (pipefs_sb) {",
          "355:   err = rpc_setup_pipedir(clnt, program->pipe_dir_name, pipefs_sb);",
          "356:   if (err)",
          "357:    goto out_no_path;",
          "358:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "370:  rpc_clnt_set_nodename(clnt, utsname()->nodename);",
          "371:  rpc_register_client(clnt);",
          "372:  return clnt;",
          "374: out_no_auth:",
          "376: out_no_path:",
          "377:  kfree(clnt->cl_principal);",
          "378: out_no_principal:",
          "379:  rpc_free_iostats(clnt->cl_metrics);",
          "",
          "[Removed Lines]",
          "375:  rpc_clnt_remove_pipedir(clnt);",
          "",
          "[Added Lines]",
          "371:  if (pipefs_sb)",
          "372:   rpc_put_sb_net(rpc_net_ns(clnt));",
          "376:  if (pipefs_sb)",
          "377:   __rpc_clnt_remove_pipedir(clnt);",
          "379:  if (pipefs_sb)",
          "380:   rpc_put_sb_net(rpc_net_ns(clnt));",
          "",
          "---------------"
        ],
        "net/sunrpc/rpc_pipe.c||net/sunrpc/rpc_pipe.c": [
          "File: net/sunrpc/rpc_pipe.c -> net/sunrpc/rpc_pipe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1127:   return -ENOMEM;",
          "1128:  dprintk(\"RPC:       sending pipefs MOUNT notification for net %p%s\\n\",",
          "1129:   net, NET_NAME(net));",
          "1130:  sn->pipefs_sb = sb;",
          "1131:  err = blocking_notifier_call_chain(&rpc_pipefs_notifier_list,",
          "1132:         RPC_PIPEFS_MOUNT,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1130:  mutex_lock(&sn->pipefs_sb_lock);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1134:  if (err)",
          "1135:   goto err_depopulate;",
          "1136:  sb->s_fs_info = get_net(net);",
          "1137:  return 0;",
          "1139: err_depopulate:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1138:  mutex_unlock(&sn->pipefs_sb_lock);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1142:         sb);",
          "1143:  sn->pipefs_sb = NULL;",
          "1144:  __rpc_depopulate(root, files, RPCAUTH_lockd, RPCAUTH_RootEOF);",
          "1145:  return err;",
          "1146: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1147:  mutex_unlock(&sn->pipefs_sb_lock);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5446429630257f4723829409337a26c076907d5d",
      "candidate_info": {
        "commit_hash": "5446429630257f4723829409337a26c076907d5d",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/5446429630257f4723829409337a26c076907d5d",
        "files": [
          "fs/ceph/super.c"
        ],
        "message": "ceph: avoid accessing invalid memory\n\nwhen mounting ceph with a dev name that starts with a slash, ceph\nwould attempt to access the character before that slash. Since we\ndon't actually own that byte of memory, we would trigger an\ninvalid access:\n\n[   43.499934] BUG: unable to handle kernel paging request at ffff880fa3a97fff\n[   43.500984] IP: [<ffffffff818f3884>] parse_mount_options+0x1a4/0x300\n[   43.501491] PGD 743b067 PUD 10283c4067 PMD 10282a6067 PTE 8000000fa3a97060\n[   43.502301] Oops: 0000 [#1] PREEMPT SMP DEBUG_PAGEALLOC\n[   43.503006] Dumping ftrace buffer:\n[   43.503596]    (ftrace buffer empty)\n[   43.504046] CPU: 0 PID: 10879 Comm: mount Tainted: G        W    3.10.0-sasha #1129\n[   43.504851] task: ffff880fa625b000 ti: ffff880fa3412000 task.ti: ffff880fa3412000\n[   43.505608] RIP: 0010:[<ffffffff818f3884>]  [<ffffffff818f3884>] parse_mount_options$\n[   43.506552] RSP: 0018:ffff880fa3413d08  EFLAGS: 00010286\n[   43.507133] RAX: ffff880fa3a98000 RBX: ffff880fa3a98000 RCX: 0000000000000000\n[   43.507893] RDX: ffff880fa3a98001 RSI: 000000000000002f RDI: ffff880fa3a98000\n[   43.508610] RBP: ffff880fa3413d58 R08: 0000000000001f99 R09: ffff880fa3fe64c0\n[   43.509426] R10: ffff880fa3413d98 R11: ffff880fa38710d8 R12: ffff880fa3413da0\n[   43.509792] R13: ffff880fa3a97fff R14: 0000000000000000 R15: ffff880fa3413d90\n[   43.509792] FS:  00007fa9c48757e0(0000) GS:ffff880fd2600000(0000) knlGS:000000000000$\n[   43.509792] CS:  0010 DS: 0000 ES: 0000 CR0: 000000008005003b\n[   43.509792] CR2: ffff880fa3a97fff CR3: 0000000fa3bb9000 CR4: 00000000000006b0\n[   43.509792] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\n[   43.509792] DR3: 0000000000000000 DR6: 00000000ffff0ff0 DR7: 0000000000000400\n[   43.509792] Stack:\n[   43.509792]  0000e5180000000e ffffffff85ca1900 ffff880fa38710d8 ffff880fa3413d98\n[   43.509792]  0000000000000120 0000000000000000 ffff880fa3a98000 0000000000000000\n[   43.509792]  ffffffff85cf32a0 0000000000000000 ffff880fa3413dc8 ffffffff818f3c72\n[   43.509792] Call Trace:\n[   43.509792]  [<ffffffff818f3c72>] ceph_mount+0xa2/0x390\n[   43.509792]  [<ffffffff81226314>] ? pcpu_alloc+0x334/0x3c0\n[   43.509792]  [<ffffffff81282f8d>] mount_fs+0x8d/0x1a0\n[   43.509792]  [<ffffffff812263d0>] ? __alloc_percpu+0x10/0x20\n[   43.509792]  [<ffffffff8129f799>] vfs_kern_mount+0x79/0x100\n[   43.509792]  [<ffffffff812a224d>] do_new_mount+0xcd/0x1c0\n[   43.509792]  [<ffffffff812a2e8d>] do_mount+0x15d/0x210\n[   43.509792]  [<ffffffff81220e55>] ? strndup_user+0x45/0x60\n[   43.509792]  [<ffffffff812a2fdd>] SyS_mount+0x9d/0xe0\n[   43.509792]  [<ffffffff83fd816c>] tracesys+0xdd/0xe2\n[   43.509792] Code: 4c 8b 5d c0 74 0a 48 8d 50 01 49 89 14 24 eb 17 31 c0 48 83 c9 ff $\n[   43.509792] RIP  [<ffffffff818f3884>] parse_mount_options+0x1a4/0x300\n[   43.509792]  RSP <ffff880fa3413d08>\n[   43.509792] CR2: ffff880fa3a97fff\n[   43.509792] ---[ end trace 22469cd81e93af51 ]---\n\nSigned-off-by: Sasha Levin <sasha.levin@oracle.com>\nReviewed-by: Sage Weil <sage@inktan.com>",
        "before_after_code_files": [
          "fs/ceph/super.c||fs/ceph/super.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fs/ceph/super.c||fs/ceph/super.c": [
          "File: fs/ceph/super.c -> fs/ceph/super.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "357:  }",
          "358:  err = -EINVAL;",
          "361:   pr_err(\"device name is missing path (no : separator in %s)\\n\",",
          "362:     dev_name);",
          "363:   goto out;",
          "",
          "[Removed Lines]",
          "360:  if (*dev_name_end != ':') {",
          "",
          "[Added Lines]",
          "360:  if (dev_name_end < dev_name || *dev_name_end != ':') {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "adb6fa7ffe9031857ec14b8aab75c9ab65556cbc",
      "candidate_info": {
        "commit_hash": "adb6fa7ffe9031857ec14b8aab75c9ab65556cbc",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/adb6fa7ffe9031857ec14b8aab75c9ab65556cbc",
        "files": [
          "net/sunrpc/clnt.c",
          "net/sunrpc/rpc_pipe.c"
        ],
        "message": "SUNRPC: fix races on PipeFS UMOUNT notifications\n\nCPU#0                                   CPU#1\n-----------------------------           -----------------------------\nrpc_kill_sb\nsn->pipefs_sb = NULL                    rpc_release_client\n(UMOUNT_EVENT)                          rpc_free_auth\nrpc_pipefs_event\nrpc_get_client_for_event\n!atomic_inc_not_zero(cl_count)\n<skip the client>\n                                        atomic_inc(cl_count)\n                                        rpc_free_client\n                                        rpc_clnt_remove_pipedir\n                                        <skip client dir removing>\n\nTo fix this, this patch does the following:\n\n1) Calls RPC_PIPEFS_UMOUNT notification with sn->pipefs_sb_lock being held.\n2) Removes SUNRPC client from the list AFTER pipes destroying.\n3) Doesn't hold RPC client on notification: if client in the list, then it\ncan't be destroyed while sn->pipefs_sb_lock in hold by notification caller.\n\nSigned-off-by: Stanislav Kinsbursky <skinsbursky@parallels.com>\nCc: stable@vger.kernel.org\nSigned-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>",
        "before_after_code_files": [
          "net/sunrpc/clnt.c||net/sunrpc/clnt.c",
          "net/sunrpc/rpc_pipe.c||net/sunrpc/rpc_pipe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/sunrpc/clnt.c||net/sunrpc/clnt.c": [
          "File: net/sunrpc/clnt.c -> net/sunrpc/clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "236:    continue;",
          "237:   if (rpc_clnt_skip_event(clnt, event))",
          "238:    continue;",
          "241:   spin_unlock(&sn->rpc_client_lock);",
          "242:   return clnt;",
          "243:  }",
          "",
          "[Removed Lines]",
          "239:   if (atomic_inc_not_zero(&clnt->cl_count) == 0)",
          "240:    continue;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "255:  while ((clnt = rpc_get_client_for_event(sb->s_fs_info, event))) {",
          "256:   error = __rpc_pipefs_event(clnt, event, sb);",
          "258:   if (error)",
          "259:    break;",
          "260:  }",
          "",
          "[Removed Lines]",
          "257:   rpc_release_client(clnt);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "641:    rcu_dereference(clnt->cl_xprt)->servername);",
          "642:  if (clnt->cl_parent != clnt)",
          "643:   rpc_release_client(clnt->cl_parent);",
          "645:  rpc_clnt_remove_pipedir(clnt);",
          "646:  rpc_free_iostats(clnt->cl_metrics);",
          "647:  kfree(clnt->cl_principal);",
          "648:  clnt->cl_metrics = NULL;",
          "",
          "[Removed Lines]",
          "644:  rpc_unregister_client(clnt);",
          "",
          "[Added Lines]",
          "642:  rpc_unregister_client(clnt);",
          "",
          "---------------"
        ],
        "net/sunrpc/rpc_pipe.c||net/sunrpc/rpc_pipe.c": [
          "File: net/sunrpc/rpc_pipe.c -> net/sunrpc/rpc_pipe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1166:   goto out;",
          "1167:  }",
          "1168:  sn->pipefs_sb = NULL;",
          "1170:  dprintk(\"RPC:       sending pipefs UMOUNT notification for net %p%s\\n\",",
          "1171:   net, NET_NAME(net));",
          "1172:  blocking_notifier_call_chain(&rpc_pipefs_notifier_list,",
          "1173:         RPC_PIPEFS_UMOUNT,",
          "1174:         sb);",
          "1175:  put_net(net);",
          "1176: out:",
          "1177:  kill_litter_super(sb);",
          "",
          "[Removed Lines]",
          "1169:  mutex_unlock(&sn->pipefs_sb_lock);",
          "",
          "[Added Lines]",
          "1174:  mutex_unlock(&sn->pipefs_sb_lock);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5a008ffa73b4401251d548c10cadac6f8a67cfb5",
      "candidate_info": {
        "commit_hash": "5a008ffa73b4401251d548c10cadac6f8a67cfb5",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/5a008ffa73b4401251d548c10cadac6f8a67cfb5",
        "files": [
          "drivers/net/usb/qmi_wwan.c"
        ],
        "message": "net: qmi_wwan: fixup Sierra Wireless MC8305 entry\n\nThe MC8305 module got an additional entry added based solely on\ninformation from a Windows driver *.inf file. We now have the\nactual descriptor layout from one of these modules, and it\nconsists of two alternate configurations where cfg #1 is a\nnormal Gobi 2k layout and cfg #2 is MBIM only, using interface\nnumbers 5 and 6 for MBIM control and data. The extra Windows\ndriver entry for interface number 5 was most likely a bug.\n\nDeleting the bogus entry to avoid unnecessary qmi_wwan probe\nfailures when using the MBIM configuration.\n\nReported-by: Lana Black <sickmind@lavabit.com>\nSigned-off-by: Bj\u00f8rn Mork <bjorn@mork.no>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "drivers/net/usb/qmi_wwan.c||drivers/net/usb/qmi_wwan.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/net/usb/qmi_wwan.c||drivers/net/usb/qmi_wwan.c": [
          "File: drivers/net/usb/qmi_wwan.c -> drivers/net/usb/qmi_wwan.c"
        ]
      }
    },
    {
      "candidate_hash": "960fd856fdc3b08b3638f3f9b6b4bfceb77660c7",
      "candidate_info": {
        "commit_hash": "960fd856fdc3b08b3638f3f9b6b4bfceb77660c7",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/960fd856fdc3b08b3638f3f9b6b4bfceb77660c7",
        "files": [
          "fs/ext4/balloc.c",
          "fs/ext4/super.c"
        ],
        "message": "ext4: fix ext4_get_group_number()\n\nThe function ext4_get_group_number() was introduced as an optimization\nin commit bd86298e60b8.  Unfortunately, this commit incorrectly\ncalculate the group number for file systems with a 1k block size (when\ns_first_data_block is 1 instead of zero).  This could cause the\nfollowing kernel BUG:\n\n[  568.877799] ------------[ cut here ]------------\n[  568.877833] kernel BUG at fs/ext4/mballoc.c:3728!\n[  568.877840] Oops: Exception in kernel mode, sig: 5 [#1]\n[  568.877845] SMP NR_CPUS=32 NUMA pSeries\n[  568.877852] Modules linked in: binfmt_misc\n[  568.877861] CPU: 1 PID: 3516 Comm: fs_mark Not tainted 3.10.0-03216-g7c6809f-dirty #1\n[  568.877867] task: c0000001fb0b8000 ti: c0000001fa954000 task.ti: c0000001fa954000\n[  568.877873] NIP: c0000000002f42a4 LR: c0000000002f4274 CTR: c000000000317ef8\n[  568.877879] REGS: c0000001fa956ed0 TRAP: 0700   Not tainted  (3.10.0-03216-g7c6809f-dirty)\n[  568.877884] MSR: 8000000000029032 <SF,EE,ME,IR,DR,RI>  CR: 24000428  XER: 00000000\n[  568.877902] SOFTE: 1\n[  568.877905] CFAR: c0000000002b5464\n[  568.877908]\nGPR00: 0000000000000001 c0000001fa957150 c000000000c6a408 c0000001fb588000\nGPR04: 0000000000003fff c0000001fa9571c0 c0000001fa9571c4 000138098c50625f\nGPR08: 1301200000000000 0000000000000002 0000000000000001 0000000000000000\nGPR12: 0000000024000422 c00000000f33a300 0000000000008000 c0000001fa9577f0\nGPR16: c0000001fb7d0100 c000000000c29190 c0000000007f46e8 c000000000a14672\nGPR20: 0000000000000001 0000000000000008 ffffffffffffffff 0000000000000000\nGPR24: 0000000000000100 c0000001fa957278 c0000001fdb2bc78 c0000001fa957288\nGPR28: 0000000000100100 c0000001fa957288 c0000001fb588000 c0000001fdb2bd10\n[  568.877993] NIP [c0000000002f42a4] .ext4_mb_release_group_pa+0xec/0x1c0\n[  568.877999] LR [c0000000002f4274] .ext4_mb_release_group_pa+0xbc/0x1c0\n[  568.878004] Call Trace:\n[  568.878008] [c0000001fa957150] [c0000000002f4274] .ext4_mb_release_group_pa+0xbc/0x1c0 (unreliable)\n[  568.878017] [c0000001fa957200] [c0000000002fb070] .ext4_mb_discard_lg_preallocations+0x394/0x444\n[  568.878025] [c0000001fa957340] [c0000000002fb45c] .ext4_mb_release_context+0x33c/0x734\n[  568.878032] [c0000001fa957440] [c0000000002fbcf8] .ext4_mb_new_blocks+0x4a4/0x5f4\n[  568.878039] [c0000001fa957510] [c0000000002ef56c] .ext4_ext_map_blocks+0xc28/0x1178\n[  568.878047] [c0000001fa957640] [c0000000002c1a94] .ext4_map_blocks+0x2c8/0x490\n[  568.878054] [c0000001fa957730] [c0000000002c536c] .ext4_writepages+0x738/0xc60\n[  568.878062] [c0000001fa957950] [c000000000168a78] .do_writepages+0x5c/0x80\n[  568.878069] [c0000001fa9579d0] [c00000000015d1c4] .__filemap_fdatawrite_range+0x88/0xb0\n[  568.878078] [c0000001fa957aa0] [c00000000015d23c] .filemap_write_and_wait_range+0x50/0xfc\n[  568.878085] [c0000001fa957b30] [c0000000002b8edc] .ext4_sync_file+0x220/0x3c4\n[  568.878092] [c0000001fa957be0] [c0000000001f849c] .vfs_fsync_range+0x64/0x80\n[  568.878098] [c0000001fa957c70] [c0000000001f84f0] .vfs_fsync+0x38/0x4c\n[  568.878105] [c0000001fa957d00] [c0000000001f87f4] .do_fsync+0x54/0x90\n[  568.878111] [c0000001fa957db0] [c0000000001f8894] .SyS_fsync+0x28/0x3c\n[  568.878120] [c0000001fa957e30] [c000000000009c88] syscall_exit+0x0/0x7c\n[  568.878125] Instruction dump:\n[  568.878130] 60000000 813d0034 81610070 38000000 7f8b4800 419e001c 813f007c 7d2bfe70\n[  568.878144] 7d604a78 7c005850 54000ffe 7c0007b4 <0b000000> e8a10076 e87f0090 7fa4eb78\n[  568.878160] ---[ end trace 594d911d9654770b ]---\n\nIn addition fix the STD_GROUP optimization so that it works for\nbigalloc file systems as well.\n\nSigned-off-by: \"Theodore Ts'o\" <tytso@mit.edu>\nReported-by: Li Zhong <lizhongfs@gmail.com>\nReviewed-by: Lukas Czerner <lczerner@redhat.com>\nCc: stable@vger.kernel.org  # 3.10",
        "before_after_code_files": [
          "fs/ext4/balloc.c||fs/ext4/balloc.c",
          "fs/ext4/super.c||fs/ext4/super.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fs/ext4/balloc.c||fs/ext4/balloc.c": [
          "File: fs/ext4/balloc.c -> fs/ext4/balloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:  ext4_group_t group;",
          "40:  if (test_opt2(sb, STD_GROUP_SIZE))",
          "43:    (EXT4_BLOCK_SIZE_BITS(sb) + EXT4_CLUSTER_BITS(sb) + 3);",
          "44:  else",
          "45:   ext4_get_group_no_and_offset(sb, block, &group, NULL);",
          "",
          "[Removed Lines]",
          "41:   group = (le32_to_cpu(EXT4_SB(sb)->s_es->s_first_data_block) +",
          "42:     block) >>",
          "",
          "[Added Lines]",
          "41:   group = (block -",
          "42:     le32_to_cpu(EXT4_SB(sb)->s_es->s_first_data_block)) >>",
          "",
          "---------------"
        ],
        "fs/ext4/super.c||fs/ext4/super.c": [
          "File: fs/ext4/super.c -> fs/ext4/super.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3624:  sbi->s_addr_per_block_bits = ilog2(EXT4_ADDR_PER_BLOCK(sb));",
          "3625:  sbi->s_desc_per_block_bits = ilog2(EXT4_DESC_PER_BLOCK(sb));",
          "3631:  for (i = 0; i < 4; i++)",
          "3632:   sbi->s_hash_seed[i] = le32_to_cpu(es->s_hash_seed[i]);",
          "3633:  sbi->s_def_hash_version = es->s_def_hash_version;",
          "",
          "[Removed Lines]",
          "3628:  if (sbi->s_blocks_per_group == blocksize << 3)",
          "3629:   set_opt2(sb, STD_GROUP_SIZE);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3697:   goto failed_mount;",
          "3698:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3697:  if (sbi->s_blocks_per_group == clustersize << 3)",
          "3698:   set_opt2(sb, STD_GROUP_SIZE);",
          "",
          "---------------"
        ]
      }
    }
  ]
}