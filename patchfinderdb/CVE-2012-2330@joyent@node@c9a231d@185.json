{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f86359cc3fa689a991c1c102423bd349901cb61a",
      "candidate_info": {
        "commit_hash": "f86359cc3fa689a991c1c102423bd349901cb61a",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/f86359cc3fa689a991c1c102423bd349901cb61a",
        "files": [
          "src/udp_wrap.cc"
        ],
        "message": "udp: root JS objects in HandleScope with Local<>",
        "before_after_code_files": [
          "src/udp_wrap.cc||src/udp_wrap.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/udp_wrap.cc||src/udp_wrap.cc": [
          "File: src/udp_wrap.cc -> src/udp_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "421:   UDPWrap* wrap = reinterpret_cast<UDPWrap*>(handle->data);",
          "425:     Integer::New(nread),",
          "428:   };",
          "430:   if (nread == -1) {",
          "",
          "[Removed Lines]",
          "423:   Handle<Value> argv[4] = {",
          "424:     wrap->object_,",
          "426:     Null(),",
          "427:     Null()",
          "",
          "[Added Lines]",
          "423:   Local<Value> argv[4] = {",
          "424:     Local<Object>::New(wrap->object_),",
          "426:     Local<Value>::New(Null()),",
          "427:     Local<Value>::New(Null())",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "433:   else {",
          "434:     Local<Object> rinfo = Object::New();",
          "435:     AddressToJS(rinfo, addr, sizeof *addr);",
          "437:     argv[3] = rinfo;",
          "438:   }",
          "439:   free(buf.base);",
          "",
          "[Removed Lines]",
          "436:     argv[2] = Buffer::New(buf.base, nread, NULL, NULL)->handle_;",
          "",
          "[Added Lines]",
          "436:     argv[2] = Local<Object>::New(",
          "437:         Buffer::New(buf.base, nread, NULL, NULL)->handle_);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6141386f7eaedc66aafd39a5a842772e91b414af",
      "candidate_info": {
        "commit_hash": "6141386f7eaedc66aafd39a5a842772e91b414af",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/6141386f7eaedc66aafd39a5a842772e91b414af",
        "files": [
          "lib/http.js",
          "test/simple/test-http-server-multiheaders.js"
        ],
        "message": "http: allow multiple WWW-Authenticate headers",
        "before_after_code_files": [
          "lib/http.js||lihttp.js",
          "test/simple/test-http-server-multiheaders.js||test/simple/test-http-server-multiheaders.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/http.js||lihttp.js": [
          "File: lib/http.js -> lihttp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "345:     case 'cookie':",
          "346:     case 'pragma':",
          "347:     case 'link':",
          "348:       if (field in dest) {",
          "349:         dest[field] += ', ' + value;",
          "350:       } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-http-server-multiheaders.js||test/simple/test-http-server-multiheaders.js": [
          "File: test/simple/test-http-server-multiheaders.js -> test/simple/test-http-server-multiheaders.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: var srv = http.createServer(function(req, res) {",
          "31:   assert.equal(req.headers.accept, 'abc, def, ghijklmnopqrst');",
          "32:   assert.equal(req.headers.host, 'foo');",
          "33:   assert.equal(req.headers['x-foo'], 'bingo');",
          "34:   assert.equal(req.headers['x-bar'], 'banjo, bango');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33:   assert.equal(req.headers['www-authenticate'], 'foo, bar, baz');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:       ['host', 'foo'],",
          "52:       ['Host', 'bar'],",
          "53:       ['hOst', 'baz'],",
          "54:       ['x-foo', 'bingo'],",
          "55:       ['x-bar', 'banjo'],",
          "56:       ['x-bar', 'bango']",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:       ['www-authenticate', 'foo'],",
          "56:       ['WWW-Authenticate', 'bar'],",
          "57:       ['WWW-AUTHENTICATE', 'baz'],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "41f2725639dd10378cb0a5a57fe29157d7b926e9",
      "candidate_info": {
        "commit_hash": "41f2725639dd10378cb0a5a57fe29157d7b926e9",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/41f2725639dd10378cb0a5a57fe29157d7b926e9",
        "files": [
          "deps/uv/LICENSE",
          "deps/uv/include/uv-private/uv-win.h",
          "deps/uv/src/unix/kqueue.c",
          "deps/uv/src/unix/linux.c",
          "deps/uv/src/unix/sunos.c",
          "deps/uv/src/win/fs-event.c",
          "deps/uv/src/win/fs.c",
          "deps/uv/test/test-fs-event.c",
          "deps/uv/test/test-fs.c",
          "deps/uv/test/test-list.h"
        ],
        "message": "uv: upgrade to 38fc6ad",
        "before_after_code_files": [
          "deps/uv/include/uv-private/uv-win.h||deps/uv/include/uv-private/uv-win.h",
          "deps/uv/src/unix/kqueue.c||deps/uv/src/unix/kqueue.c",
          "deps/uv/src/unix/linux.c||deps/uv/src/unix/linux.c",
          "deps/uv/src/unix/sunos.c||deps/uv/src/unix/sunos.c",
          "deps/uv/src/win/fs-event.c||deps/uv/src/win/fs-event.c",
          "deps/uv/src/win/fs.c||deps/uv/src/win/fs.c",
          "deps/uv/test/test-fs-event.c||deps/uv/test/test-fs-event.c",
          "deps/uv/test/test-fs.c||deps/uv/test/test-fs.c",
          "deps/uv/test/test-list.h||deps/uv/test/test-list.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/include/uv-private/uv-win.h||deps/uv/include/uv-private/uv-win.h": [
          "File: deps/uv/include/uv-private/uv-win.h -> deps/uv/include/uv-private/uv-win.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "414:   uv_fs_event_cb cb;                      \\",
          "415:   wchar_t* filew;                         \\",
          "416:   wchar_t* short_filew;                   \\",
          "418:   char* buffer;",
          "420: int uv_utf16_to_utf8(const wchar_t* utf16Buffer, size_t utf16Size,",
          "",
          "[Removed Lines]",
          "417:   int is_path_dir;                        \\",
          "",
          "[Added Lines]",
          "417:   wchar_t* dirw;                          \\",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/kqueue.c||deps/uv/src/unix/kqueue.c": [
          "File: deps/uv/src/unix/kqueue.c -> deps/uv/src/unix/kqueue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:              handle->fd,",
          "44:              EV_LIBUV_KQUEUE_HACK);",
          "45:   ev_io_start(handle->loop->ev, &handle->event_watcher);",
          "46: }",
          "49: static void uv__fs_event_stop(uv_fs_event_t* handle) {",
          "50:   ev_io_stop(handle->loop->ev, &handle->event_watcher);",
          "51: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:   ev_unref(handle->loop->ev);",
          "51:   ev_ref(handle->loop->ev);",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/linux.c||deps/uv/src/unix/linux.c": [
          "File: deps/uv/src/unix/linux.c -> deps/uv/src/unix/linux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "284:   ev_io_init(&handle->read_watcher, uv__inotify_read, fd, EV_READ);",
          "285:   ev_io_start(loop->ev, &handle->read_watcher);",
          "287:   return 0;",
          "288: }",
          "291: void uv__fs_event_destroy(uv_fs_event_t* handle) {",
          "292:   ev_io_stop(handle->loop->ev, &handle->read_watcher);",
          "293:   uv__close(handle->fd);",
          "294:   handle->fd = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "286:   ev_unref(loop->ev);",
          "293:   ev_ref(handle->loop->ev);",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/sunos.c||deps/uv/src/unix/sunos.c": [
          "File: deps/uv/src/unix/sunos.c -> deps/uv/src/unix/sunos.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:   ev_io_init(&handle->event_watcher, uv__fs_event_read, portfd, EV_READ);",
          "168:   ev_io_start(loop->ev, &handle->event_watcher);",
          "170:   return 0;",
          "171: }",
          "174: void uv__fs_event_destroy(uv_fs_event_t* handle) {",
          "175:   ev_io_stop(handle->loop->ev, &handle->event_watcher);",
          "176:   uv__close(handle->fd);",
          "177:   handle->fd = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169:   ev_unref(loop->ev);",
          "176:   ev_ref(handle->loop->ev);",
          "",
          "---------------"
        ],
        "deps/uv/src/win/fs-event.c||deps/uv/src/win/fs-event.c": [
          "File: deps/uv/src/win/fs-event.c -> deps/uv/src/win/fs-event.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <assert.h>",
          "23: #include <malloc.h>",
          "24: #include <errno.h>",
          "25: #include <string.h>",
          "26: #include \"uv.h\"",
          "27: #include \"internal.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #include <stdio.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:   handle->loop = loop;",
          "37:   handle->flags = 0;",
          "38:   handle->cb = cb;",
          "40:   handle->dir_handle = INVALID_HANDLE_VALUE;",
          "41:   handle->buffer = NULL;",
          "42:   handle->req_pending = 0;",
          "43:   handle->filew = NULL;",
          "44:   handle->short_filew = NULL;",
          "46:   uv_req_init(loop, (uv_req_t*)&handle->req);",
          "47:   handle->req.type = UV_FS_EVENT_REQ;",
          "",
          "[Removed Lines]",
          "39:   handle->is_path_dir = 0;",
          "",
          "[Added Lines]",
          "45:   handle->dirw = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "135: int uv_fs_event_init(uv_loop_t* loop, uv_fs_event_t* handle,",
          "136:     const char* filename, uv_fs_event_cb cb, int flags) {",
          "138:   DWORD attr, last_error;",
          "140:   wchar_t short_path[MAX_PATH];",
          "",
          "[Removed Lines]",
          "137:   int name_size;",
          "139:   wchar_t* dir = NULL, *dir_to_watch, *filenamew;",
          "",
          "[Added Lines]",
          "138:   int name_size, is_path_dir;",
          "140:   wchar_t* dir = NULL, *dir_to_watch, *filenamew = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "164:     goto error;",
          "165:   }",
          "171:     dir_to_watch = filenamew;",
          "172:   } else {",
          "",
          "[Removed Lines]",
          "167:   handle->is_path_dir = (attr & FILE_ATTRIBUTE_DIRECTORY) ? 1 : 0;",
          "169:   if (handle->is_path_dir) {",
          "",
          "[Added Lines]",
          "168:   is_path_dir = (attr & FILE_ATTRIBUTE_DIRECTORY) ? 1 : 0;",
          "170:   if (is_path_dir) {",
          "172:     handle->dirw = filenamew;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "192:     }",
          "194:     dir_to_watch = dir;",
          "195:   }",
          "197:   handle->dir_handle = CreateFileW(dir_to_watch,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "197:     free(filenamew);",
          "198:     filenamew = NULL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "268:     handle->short_filew = NULL;",
          "269:   }",
          "271:   if (handle->dir_handle != INVALID_HANDLE_VALUE) {",
          "272:     CloseHandle(handle->dir_handle);",
          "273:     handle->dir_handle = INVALID_HANDLE_VALUE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "275:   free(filenamew);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "286: void uv_process_fs_event_req(uv_loop_t* loop, uv_req_t* req,",
          "287:     uv_fs_event_t* handle) {",
          "288:   FILE_NOTIFY_INFORMATION* file_info;",
          "289:   char* filename = NULL;",
          "291:   DWORD offset = 0;",
          "293:   assert(req->type == UV_FS_EVENT_REQ);",
          "",
          "[Removed Lines]",
          "290:   int utf8size;",
          "",
          "[Added Lines]",
          "295:   int sizew, size, result;",
          "297:   wchar_t* filenamew, *long_filenamew = NULL;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "300:     if (req->overlapped.InternalHigh > 0) {",
          "301:       do {",
          "302:         file_info = (FILE_NOTIFY_INFORMATION*)((char*)file_info + offset);",
          "309:           _wcsnicmp(handle->filew, file_info->FileName,",
          "310:             file_info->FileNameLength / sizeof(wchar_t)) == 0 ||",
          "311:           _wcsnicmp(handle->short_filew, file_info->FileName,",
          "312:             file_info->FileNameLength / sizeof(wchar_t)) == 0) {",
          "333:             } else {",
          "336:             }",
          "337:           }",
          "",
          "[Removed Lines]",
          "308:         if (handle->is_path_dir ||",
          "315:           utf8size = uv_utf16_to_utf8(file_info->FileName,",
          "316:                                       file_info->FileNameLength /",
          "317:                                         sizeof(wchar_t),",
          "318:                                       NULL,",
          "319:                                       0);",
          "320:           if (utf8size) {",
          "321:             filename = (char*)malloc(utf8size + 1);",
          "322:             if (!filename) {",
          "323:               uv_fatal_error(ERROR_OUTOFMEMORY, \"malloc\");",
          "324:             }",
          "326:             utf8size = uv_utf16_to_utf8(file_info->FileName,",
          "327:                                         file_info->FileNameLength /",
          "328:                                           sizeof(wchar_t),",
          "329:                                         filename,",
          "330:                                         utf8size);",
          "331:             if (utf8size) {",
          "332:               filename[utf8size] = '\\0';",
          "334:               free(filename);",
          "335:               filename = NULL;",
          "",
          "[Added Lines]",
          "310:         assert(!filename);",
          "311:         assert(!long_filenamew);",
          "317:         if (handle->dirw ||",
          "323:           if (handle->dirw) {",
          "329:             if (file_info->Action != FILE_ACTION_REMOVED &&",
          "330:               file_info->Action != FILE_ACTION_RENAMED_OLD_NAME) {",
          "332:               size = wcslen(handle->dirw) +",
          "333:                 file_info->FileNameLength / sizeof(wchar_t) + 2;",
          "335:               filenamew = (wchar_t*)malloc(size * sizeof(wchar_t));",
          "336:               if (!filenamew) {",
          "337:                 uv_fatal_error(ERROR_OUTOFMEMORY, \"malloc\");",
          "338:               }",
          "340:               _snwprintf(filenamew, size, L\"%s\\\\%s\", handle->dirw,",
          "341:                 file_info->FileName);",
          "343:               filenamew[size - 1] = L'\\0';",
          "346:               size = GetLongPathNameW(filenamew, NULL, 0);",
          "348:               if (size) {",
          "349:                 long_filenamew = (wchar_t*)malloc(size * sizeof(wchar_t));",
          "350:                 if (!long_filenamew) {",
          "351:                   uv_fatal_error(ERROR_OUTOFMEMORY, \"malloc\");",
          "352:                 }",
          "354:                 size = GetLongPathNameW(filenamew, long_filenamew, size);",
          "355:                 if (size) {",
          "356:                   long_filenamew[size] = '\\0';",
          "357:                 } else {",
          "358:                   free(long_filenamew);",
          "359:                   long_filenamew = NULL;",
          "360:                 }",
          "361:               }",
          "363:               free(filenamew);",
          "365:               if (long_filenamew) {",
          "367:                 result = uv_split_path(long_filenamew, NULL, &filenamew);",
          "368:                 free(long_filenamew);",
          "370:                 if (result == 0) {",
          "371:                   long_filenamew = filenamew;",
          "372:                   sizew = -1;",
          "373:                 } else {",
          "374:                   long_filenamew = NULL;",
          "375:                 }",
          "376:               }",
          "382:               if (!long_filenamew) {",
          "383:                 filenamew = file_info->FileName;",
          "384:                 sizew = file_info->FileNameLength / sizeof(wchar_t);",
          "385:               }",
          "388:               filenamew = NULL;",
          "389:             }",
          "390:           } else {",
          "392:             filenamew = handle->filew;",
          "393:             sizew = -1;",
          "394:           }",
          "396:           if (filenamew) {",
          "398:             size = uv_utf16_to_utf8(filenamew,",
          "399:                                     sizew,",
          "400:                                     NULL,",
          "401:                                     0);",
          "402:             if (size) {",
          "403:               filename = (char*)malloc(size + 1);",
          "404:               if (!filename) {",
          "405:                 uv_fatal_error(ERROR_OUTOFMEMORY, \"malloc\");",
          "406:               }",
          "408:               size = uv_utf16_to_utf8(filenamew,",
          "409:                                       sizew,",
          "410:                                       filename,",
          "411:                                       size);",
          "412:               if (size) {",
          "413:                 filename[size] = '\\0';",
          "414:               } else {",
          "415:                 free(filename);",
          "416:                 filename = NULL;",
          "417:               }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "352:           free(filename);",
          "353:           filename = NULL;",
          "354:         }",
          "356:         offset = file_info->NextEntryOffset;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "436:           free(long_filenamew);",
          "437:           long_filenamew = NULL;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "411:       handle->filename = NULL;",
          "412:     }",
          "414:     if (handle->close_cb) {",
          "415:       handle->close_cb((uv_handle_t*)handle);",
          "416:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "498:     if (handle->dirw) {",
          "499:       free(handle->dirw);",
          "500:       handle->dirw = NULL;",
          "501:     }",
          "",
          "---------------"
        ],
        "deps/uv/src/win/fs.c||deps/uv/src/win/fs.c": [
          "File: deps/uv/src/win/fs.c -> deps/uv/src/win/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "544: void fs__rename(uv_fs_t* req, const wchar_t* path, const wchar_t* new_path) {",
          "547: }",
          "",
          "[Removed Lines]",
          "545:   int result = _wrename(path, new_path);",
          "546:   SET_REQ_RESULT(req, result);",
          "",
          "[Added Lines]",
          "545:   if (!MoveFileExW(path, new_path, MOVEFILE_REPLACE_EXISTING)) {",
          "546:     SET_REQ_RESULT_WIN32_ERROR(req, GetLastError());",
          "547:     return;",
          "548:   }",
          "550:   SET_REQ_RESULT(req, 0);",
          "",
          "---------------"
        ],
        "deps/uv/test/test-fs-event.c||deps/uv/test/test-fs-event.c": [
          "File: deps/uv/test/test-fs-event.c -> deps/uv/test/test-fs-event.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "282:   ASSERT(status == 0);",
          "284:   r = uv_fs_event_init(handle->loop, &fs_event, \".\", fs_event_fail, 0);",
          "287:   uv_close((uv_handle_t*)&fs_event, close_cb);",
          "288:   uv_close((uv_handle_t*)handle, close_cb);",
          "",
          "[Removed Lines]",
          "285:   ASSERT(r != -1);",
          "",
          "[Added Lines]",
          "285:   ASSERT(r == 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "309:   return 0;",
          "310: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "313: TEST_IMPL(fs_event_unref) {",
          "314:   uv_loop_t* loop;",
          "315:   int r;",
          "317:   loop = uv_default_loop();",
          "319:   r = uv_fs_event_init(loop, &fs_event, \".\", fs_event_fail, 0);",
          "320:   ASSERT(r == 0);",
          "322:   uv_unref(loop);",
          "324:   r = uv_run(loop);",
          "325:   ASSERT(r == 0);",
          "327:   return 0;",
          "328: }",
          "",
          "---------------"
        ],
        "deps/uv/test/test-fs.c||deps/uv/test/test-fs.c": [
          "File: deps/uv/test/test-fs.c -> deps/uv/test/test-fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1477:   return 0;",
          "1478: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1481: TEST_IMPL(fs_rename_to_existing_file) {",
          "1482:   int r;",
          "1485:   unlink(\"test_file\");",
          "1486:   unlink(\"test_file2\");",
          "1488:   loop = uv_default_loop();",
          "1490:   r = uv_fs_open(loop, &open_req1, \"test_file\", O_WRONLY | O_CREAT,",
          "1491:       S_IWRITE | S_IREAD, NULL);",
          "1492:   ASSERT(r != -1);",
          "1493:   ASSERT(open_req1.result != -1);",
          "1494:   uv_fs_req_cleanup(&open_req1);",
          "1496:   r = uv_fs_write(loop, &write_req, open_req1.result, test_buf,",
          "1497:       sizeof(test_buf), -1, NULL);",
          "1498:   ASSERT(r != -1);",
          "1499:   ASSERT(write_req.result != -1);",
          "1500:   uv_fs_req_cleanup(&write_req);",
          "1502:   r = uv_fs_close(loop, &close_req, open_req1.result, NULL);",
          "1503:   ASSERT(r != -1);",
          "1504:   ASSERT(close_req.result != -1);",
          "1505:   uv_fs_req_cleanup(&close_req);",
          "1507:   r = uv_fs_open(loop, &open_req1, \"test_file2\", O_WRONLY | O_CREAT,",
          "1508:       S_IWRITE | S_IREAD, NULL);",
          "1509:   ASSERT(r != -1);",
          "1510:   ASSERT(open_req1.result != -1);",
          "1511:   uv_fs_req_cleanup(&open_req1);",
          "1513:   r = uv_fs_close(loop, &close_req, open_req1.result, NULL);",
          "1514:   ASSERT(r != -1);",
          "1515:   ASSERT(close_req.result != -1);",
          "1516:   uv_fs_req_cleanup(&close_req);",
          "1518:   r = uv_fs_rename(loop, &rename_req, \"test_file\", \"test_file2\", NULL);",
          "1519:   ASSERT(r != -1);",
          "1520:   ASSERT(rename_req.result != -1);",
          "1521:   uv_fs_req_cleanup(&rename_req);",
          "1523:   r = uv_fs_open(loop, &open_req1, \"test_file2\", O_RDONLY, 0, NULL);",
          "1524:   ASSERT(r != -1);",
          "1525:   ASSERT(open_req1.result != -1);",
          "1526:   uv_fs_req_cleanup(&open_req1);",
          "1528:   memset(buf, 0, sizeof(buf));",
          "1529:   r = uv_fs_read(loop, &read_req, open_req1.result, buf, sizeof(buf), -1,",
          "1530:       NULL);",
          "1531:   ASSERT(r != -1);",
          "1532:   ASSERT(read_req.result != -1);",
          "1533:   ASSERT(strcmp(buf, test_buf) == 0);",
          "1534:   uv_fs_req_cleanup(&read_req);",
          "1536:   r = uv_fs_close(loop, &close_req, open_req1.result, NULL);",
          "1537:   ASSERT(r != -1);",
          "1538:   ASSERT(close_req.result != -1);",
          "1539:   uv_fs_req_cleanup(&close_req);",
          "1542:   unlink(\"test_file\");",
          "1543:   unlink(\"test_file2\");",
          "1545:   return 0;",
          "1546: }",
          "",
          "---------------"
        ],
        "deps/uv/test/test-list.h||deps/uv/test/test-list.h": [
          "File: deps/uv/test/test-list.h -> deps/uv/test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "112: TEST_DECLARE   (fs_event_watch_file_current_dir)",
          "113: TEST_DECLARE   (fs_event_no_callback_on_close)",
          "114: TEST_DECLARE   (fs_event_immediate_close)",
          "115: TEST_DECLARE   (fs_readdir_empty_dir)",
          "116: TEST_DECLARE   (fs_readdir_file)",
          "117: TEST_DECLARE   (fs_open_dir)",
          "118: TEST_DECLARE   (threadpool_queue_work_simple)",
          "119: TEST_DECLARE   (counters_init)",
          "120: #ifdef _WIN32",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115: TEST_DECLARE   (fs_event_unref)",
          "119: TEST_DECLARE   (fs_rename_to_existing_file)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "267:   TEST_ENTRY  (fs_event_watch_file_current_dir)",
          "268:   TEST_ENTRY  (fs_event_no_callback_on_close)",
          "269:   TEST_ENTRY  (fs_event_immediate_close)",
          "270:   TEST_ENTRY  (fs_readdir_empty_dir)",
          "271:   TEST_ENTRY  (fs_readdir_file)",
          "272:   TEST_ENTRY  (fs_open_dir)",
          "273:   TEST_ENTRY  (threadpool_queue_work_simple)",
          "274:   TEST_ENTRY  (counters_init)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "272:   TEST_ENTRY  (fs_event_unref)",
          "276:   TEST_ENTRY  (fs_rename_to_existing_file)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "491ec171ec6b940536e77af0c61c50e10a1848d5",
      "candidate_info": {
        "commit_hash": "491ec171ec6b940536e77af0c61c50e10a1848d5",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/491ec171ec6b940536e77af0c61c50e10a1848d5",
        "files": [
          "common.gypi"
        ],
        "message": "build: change default BUILDTYPE of gyp to Release",
        "before_after_code_files": [
          "common.gypi||common.gypi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "common.gypi||common.gypi": [
          "File: common.gypi -> common.gypi",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:   },",
          "12:   'target_defaults': {",
          "14:     'configurations': {",
          "15:       'Debug': {",
          "16:         'defines': [ 'DEBUG', '_DEBUG' ],",
          "",
          "[Removed Lines]",
          "13:     'default_configuration': 'Debug',",
          "",
          "[Added Lines]",
          "13:     'default_configuration': 'Release',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "27061cc9f45afbc4ddc1efa8bed1ea22df7cb0f4",
      "candidate_info": {
        "commit_hash": "27061cc9f45afbc4ddc1efa8bed1ea22df7cb0f4",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/27061cc9f45afbc4ddc1efa8bed1ea22df7cb0f4",
        "files": [
          "src/stream_wrap.cc",
          "src/udp_wrap.cc"
        ],
        "message": "udp_wrap, stream_wrap: lazy init slab allocator\n\nCreate slab allocator when binding is initialized.\n\nAdd an AtExit handler to destroy the slab before the VM shuts down, it can't be\ndisposed when V8 is dead and Valgrind will complain about memory leaks.",
        "before_after_code_files": [
          "src/stream_wrap.cc||src/stream_wrap.cc",
          "src/udp_wrap.cc||src/udp_wrap.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/stream_wrap.cc||src/stream_wrap.cc": [
          "File: src/stream_wrap.cc -> src/stream_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "76: static Persistent<String> write_queue_size_sym;",
          "77: static Persistent<String> onread_sym;",
          "78: static Persistent<String> oncomplete_sym;",
          "80: static bool initialized;",
          "83: void StreamWrap::Initialize(Handle<Object> target) {",
          "84:   if (initialized) return;",
          "85:   initialized = true;",
          "87:   HandleScope scope;",
          "89:   HandleWrap::Initialize(target);",
          "",
          "[Removed Lines]",
          "79: static SlabAllocator slab_allocator(SLAB_SIZE);",
          "",
          "[Added Lines]",
          "79: static SlabAllocator* slab_allocator;",
          "83: static void DeleteSlabAllocator(void*) {",
          "84:   delete slab_allocator;",
          "85:   slab_allocator = NULL;",
          "86: }",
          "93:   slab_allocator = new SlabAllocator(SLAB_SIZE);",
          "94:   AtExit(DeleteSlabAllocator, NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "156: uv_buf_t StreamWrap::OnAlloc(uv_handle_t* handle, size_t suggested_size) {",
          "157:   StreamWrap* wrap = static_cast<StreamWrap*>(handle->data);",
          "158:   assert(wrap->stream_ == reinterpret_cast<uv_stream_t*>(handle));",
          "160:   return uv_buf_init(buf, suggested_size);",
          "161: }",
          "",
          "[Removed Lines]",
          "159:   char* buf = slab_allocator.Allocate(wrap->object_, suggested_size);",
          "",
          "[Added Lines]",
          "168:   char* buf = slab_allocator->Allocate(wrap->object_, suggested_size);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "177:     if (buf.base != NULL) {",
          "179:     }",
          "181:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Removed Lines]",
          "178:       slab_allocator.Shrink(wrap->object_, buf.base, 0);",
          "",
          "[Added Lines]",
          "187:       slab_allocator->Shrink(wrap->object_, buf.base, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "184:   }",
          "186:   assert(buf.base != NULL);",
          "191:   if (nread == 0) return;",
          "192:   assert(static_cast<size_t>(nread) <= buf.len);",
          "",
          "[Removed Lines]",
          "187:   Local<Object> slab = slab_allocator.Shrink(wrap->object_,",
          "188:                                              buf.base,",
          "189:                                              nread);",
          "",
          "[Added Lines]",
          "196:   Local<Object> slab = slab_allocator->Shrink(wrap->object_,",
          "197:                                               buf.base,",
          "198:                                               nread);",
          "",
          "---------------"
        ],
        "src/udp_wrap.cc||src/udp_wrap.cc": [
          "File: src/udp_wrap.cc -> src/udp_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: static Persistent<String> buffer_sym;",
          "59: static Persistent<String> oncomplete_sym;",
          "60: static Persistent<String> onmessage_sym;",
          "64: UDPWrap::UDPWrap(Handle<Object> object): HandleWrap(object,",
          "",
          "[Removed Lines]",
          "61: static SlabAllocator slab_allocator(SLAB_SIZE);",
          "",
          "[Added Lines]",
          "61: static SlabAllocator* slab_allocator;",
          "64: static void DeleteSlabAllocator(void*) {",
          "65:   delete slab_allocator;",
          "66:   slab_allocator = NULL;",
          "67: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76: void UDPWrap::Initialize(Handle<Object> target) {",
          "77:   HandleWrap::Initialize(target);",
          "79:   HandleScope scope;",
          "81:   buffer_sym = NODE_PSYMBOL(\"buffer\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85:   slab_allocator = new SlabAllocator(SLAB_SIZE);",
          "86:   AtExit(DeleteSlabAllocator, NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "353: uv_buf_t UDPWrap::OnAlloc(uv_handle_t* handle, size_t suggested_size) {",
          "354:   UDPWrap* wrap = static_cast<UDPWrap*>(handle->data);",
          "356:   return uv_buf_init(buf, suggested_size);",
          "357: }",
          "",
          "[Removed Lines]",
          "355:   char* buf = slab_allocator.Allocate(wrap->object_, suggested_size);",
          "",
          "[Added Lines]",
          "364:   char* buf = slab_allocator->Allocate(wrap->object_, suggested_size);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "365:   HandleScope scope;",
          "367:   UDPWrap* wrap = reinterpret_cast<UDPWrap*>(handle->data);",
          "371:   if (nread == 0) return;",
          "373:   if (nread < 0) {",
          "",
          "[Removed Lines]",
          "368:   Local<Object> slab = slab_allocator.Shrink(wrap->object_,",
          "369:                                              buf.base,",
          "370:                                              nread < 0 ? 0 : nread);",
          "",
          "[Added Lines]",
          "377:   Local<Object> slab = slab_allocator->Shrink(wrap->object_,",
          "378:                                               buf.base,",
          "379:                                               nread < 0 ? 0 : nread);",
          "",
          "---------------"
        ]
      }
    }
  ]
}