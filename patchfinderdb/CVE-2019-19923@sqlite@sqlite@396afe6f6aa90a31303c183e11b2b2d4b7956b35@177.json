{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "39e04f83b95f9ab6b2f579c1da716ab051c5b054",
      "candidate_info": {
        "commit_hash": "39e04f83b95f9ab6b2f579c1da716ab051c5b054",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/39e04f83b95f9ab6b2f579c1da716ab051c5b054",
        "files": [
          "ext/misc/dbdata.c",
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix a problem in the \".recover\" command allowing a circular loop of b-tree pages in a database file to cause an infinite loop.\n\nFossilOrigin-Name: 8d2a062eb8a3e6fdc6a61b571c8da0070382bf208c53e797151eac8679c975a1",
        "before_after_code_files": [
          "ext/misc/dbdata.c||ext/misc/dbdata.c",
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/dbdata.c||ext/misc/dbdata.c": [
          "File: ext/misc/dbdata.c -> ext/misc/dbdata.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "301:   return (a[0]<<8)|a[1];",
          "302: }",
          "303: static unsigned int get_uint32(unsigned char *a){",
          "305: }",
          "",
          "[Removed Lines]",
          "304:   return (a[0]<<24)|(a[1]<<16)|(a[2]<<8)|a[3];",
          "",
          "[Added Lines]",
          "304:   return ((unsigned int)a[0]<<24)",
          "305:        | ((unsigned int)a[1]<<16)",
          "306:        | ((unsigned int)a[2]<<8)",
          "307:        | ((unsigned int)a[3]);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f22c7e229ea4626c5268d61de3964521cf6a2735290cbd1518d68731ba6cca90",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6633:     \"  SELECT i, maxlen, NULL, (\"",
          "6634:     \"    WITH p(orig, pgno, parent) AS (\"",
          "6635:     \"      SELECT 0, i, (SELECT pgno FROM recovery.dbptr WHERE child=i)\"",
          "6637:     \"      SELECT i, p.parent, \"",
          "6638:     \"        (SELECT pgno FROM recovery.dbptr WHERE child=p.parent) FROM p\"",
          "6639:     \"    )\"",
          "",
          "[Removed Lines]",
          "6636:     \"        UNION ALL\"",
          "",
          "[Added Lines]",
          "6636:     \"        UNION \"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3756d59bc3bc788b5c5c5c1ca5463b883a5150d6",
      "candidate_info": {
        "commit_hash": "3756d59bc3bc788b5c5c5c1ca5463b883a5150d6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3756d59bc3bc788b5c5c5c1ca5463b883a5150d6",
        "files": [
          "README.md",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Update the README.md file at the top level to talk about how to deal with version names and how to verify the code in Git mirrors.\n\nFossilOrigin-Name: e8c87a0ac1bf434c12a8ab602e7913a89a51898e818f30fa541a9b5708864212",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1d801a3b2c48dc8a918d6da047bc877acf033d5f5c4e1d4b412ba7678ed6f8b3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "666a42ffb3ad492e049ad3e1020299218f66a53b",
      "candidate_info": {
        "commit_hash": "666a42ffb3ad492e049ad3e1020299218f66a53b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/666a42ffb3ad492e049ad3e1020299218f66a53b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Minor performance improvement for balance_nonroot().\n\nFossilOrigin-Name: d7434cae3edc321e2f1f8d340a0e656b1613b736f8400fb271a0e80f59401b9e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 156d612800a7282fe0ebb20feb31d3fd577f4ab60fab8c00940c87143997aefb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6992:   while( 1 /*Exit by break*/ ){",
          "6993:     int sz, rc;",
          "6994:     u8 *pSlot;",
          "6996:     if( (aData[1]==0 && aData[2]==0) || (pSlot = pageFindSlot(pPg,sz,&rc))==0 ){",
          "6997:       if( (pData - pBegin)<sz ) return 1;",
          "6998:       pData -= sz;",
          "",
          "[Removed Lines]",
          "6995:     sz = cachedCellSize(pCArray, i);",
          "",
          "[Added Lines]",
          "6995:     assert( pCArray->szCell[i]!=0 );",
          "6996:     sz = pCArray->szCell[i];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7153:         memmove(&pCellptr[2], pCellptr, (nCell - iCell) * 2);",
          "7154:       }",
          "7155:       nCell++;",
          "7156:       if( pageInsertArray(",
          "7157:             pPg, pBegin, &pData, pCellptr,",
          "7158:             iCell+iNew, 1, pCArray",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7157:       cachedCellSize(pCArray, iCell+iNew);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2d4e720579192f378a3e407e390010de38bfcdcd",
      "candidate_info": {
        "commit_hash": "2d4e720579192f378a3e407e390010de38bfcdcd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2d4e720579192f378a3e407e390010de38bfcdcd",
        "files": [
          "ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5update.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Have fts5 reject attempts to insert a non-integer, non-null value into a rowid column with SQLITE_MISMATCH.\n\nFossilOrigin-Name: 4a9483f81e9ca1aa41d6ca33cb3171370418ccc71fdee9741bbf6f694bf4fbaa",
        "before_after_code_files": [
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5update.test||ext/fts5/test/fts5update.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1498:   assert( pVtab->zErrMsg==0 );",
          "1499:   assert( nArg==1 || nArg==(2+pConfig->nCol+2) );",
          "1503:   );",
          "1504:   assert( pTab->pConfig->pzErrmsg==0 );",
          "1505:   pTab->pConfig->pzErrmsg = &pTab->base.zErrMsg;",
          "",
          "[Removed Lines]",
          "1500:   assert( nArg==1",
          "1501:       || sqlite3_value_type(apVal[1])==SQLITE_INTEGER",
          "1502:       || sqlite3_value_type(apVal[1])==SQLITE_NULL",
          "",
          "[Added Lines]",
          "1500:   assert( sqlite3_value_type(apVal[0])==SQLITE_INTEGER",
          "1501:        || sqlite3_value_type(apVal[0])==SQLITE_NULL",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1556:       rc = sqlite3Fts5StorageDelete(pTab->pStorage, iDel, 0);",
          "1557:     }",
          "1567:       }",
          "1585:             rc = sqlite3Fts5StorageDelete(pTab->pStorage, iOld, 0);",
          "1586:           }",
          "1590:         }",
          "1594:       }",
          "1595:     }",
          "1596:   }",
          "",
          "[Removed Lines]",
          "1560:     else if( eType0!=SQLITE_INTEGER ){",
          "1562:       if( eConflict==SQLITE_REPLACE",
          "1563:        && sqlite3_value_type(apVal[1])==SQLITE_INTEGER",
          "1564:       ){",
          "1566:         rc = sqlite3Fts5StorageDelete(pTab->pStorage, iNew, 0);",
          "1568:       fts5StorageInsert(&rc, pTab, apVal, pRowid);",
          "1569:     }",
          "1572:     else{",
          "1575:       if( iOld!=iNew ){",
          "1576:         if( eConflict==SQLITE_REPLACE ){",
          "1577:           rc = sqlite3Fts5StorageDelete(pTab->pStorage, iOld, 0);",
          "1578:           if( rc==SQLITE_OK ){",
          "1579:             rc = sqlite3Fts5StorageDelete(pTab->pStorage, iNew, 0);",
          "1580:           }",
          "1581:           fts5StorageInsert(&rc, pTab, apVal, pRowid);",
          "1582:         }else{",
          "1583:           rc = sqlite3Fts5StorageContentInsert(pTab->pStorage, apVal, pRowid);",
          "1584:           if( rc==SQLITE_OK ){",
          "1587:           if( rc==SQLITE_OK ){",
          "1588:             rc = sqlite3Fts5StorageIndexInsert(pTab->pStorage, apVal, *pRowid);",
          "1589:           }",
          "1591:       }else{",
          "1592:         rc = sqlite3Fts5StorageDelete(pTab->pStorage, iOld, 0);",
          "1593:         fts5StorageInsert(&rc, pTab, apVal, pRowid);",
          "",
          "[Added Lines]",
          "1559:     else{",
          "1560:       int eType1 = sqlite3_value_numeric_type(apVal[1]);",
          "1562:       if( eType1!=SQLITE_INTEGER && eType1!=SQLITE_NULL ){",
          "1563:         rc = SQLITE_MISMATCH;",
          "1566:       else if( eType0!=SQLITE_INTEGER ){",
          "1568:         if( eConflict==SQLITE_REPLACE && eType1==SQLITE_INTEGER ){",
          "1570:           rc = sqlite3Fts5StorageDelete(pTab->pStorage, iNew, 0);",
          "1571:         }",
          "1572:         fts5StorageInsert(&rc, pTab, apVal, pRowid);",
          "1573:       }",
          "1576:       else{",
          "1579:         if( eType1==SQLITE_INTEGER && iOld!=iNew ){",
          "1580:           if( eConflict==SQLITE_REPLACE ){",
          "1582:             if( rc==SQLITE_OK ){",
          "1583:               rc = sqlite3Fts5StorageDelete(pTab->pStorage, iNew, 0);",
          "1584:             }",
          "1585:             fts5StorageInsert(&rc, pTab, apVal, pRowid);",
          "1586:           }else{",
          "1587:             rc = sqlite3Fts5StorageContentInsert(pTab->pStorage, apVal, pRowid);",
          "1588:             if( rc==SQLITE_OK ){",
          "1589:               rc = sqlite3Fts5StorageDelete(pTab->pStorage, iOld, 0);",
          "1590:             }",
          "1591:             if( rc==SQLITE_OK ){",
          "1592:               rc = sqlite3Fts5StorageIndexInsert(pTab->pStorage, apVal,*pRowid);",
          "1593:             }",
          "1595:         }else{",
          "1596:           rc = sqlite3Fts5StorageDelete(pTab->pStorage, iOld, 0);",
          "1597:           fts5StorageInsert(&rc, pTab, apVal, pRowid);",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5update.test||ext/fts5/test/fts5update.test": [
          "File: ext/fts5/test/fts5update.test -> ext/fts5/test/fts5update.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:   }",
          "135: } {}",
          "138: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137: do_execsql_test 4.0 {",
          "138:   CREATE VIRTUAL TABLE x4 USING fts5(a, detail=%DETAIL%);",
          "139:   INSERT INTO x4 VALUES('one two three');",
          "140:   INSERT INTO x4(rowid, a) VALUES('2', 'one two three');",
          "141:   INSERT INTO x4(rowid, a) VALUES('3.0', 'one two three');",
          "142: }",
          "143: do_catchsql_test 4.1 {",
          "144:   INSERT INTO x4(rowid, a) VALUES('four', 'one two three');",
          "145: } {1 {datatype mismatch}}",
          "147: do_catchsql_test 4.2 {",
          "148:   UPDATE x4 SET rowid = 'four' WHERE rowid=1;",
          "149: } {1 {datatype mismatch}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1caff0fb0b2051e205e7a8cfd5dadf92680c52a88a441ded95b1ea6542db5f83",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "935d9d8260e34e01873ac51988b23f017434a5f7",
      "candidate_info": {
        "commit_hash": "935d9d8260e34e01873ac51988b23f017434a5f7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/935d9d8260e34e01873ac51988b23f017434a5f7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c"
        ],
        "message": "Expand on header comment for sqlite3WindowCodeStep(). Further simplify the implementation of the same.\n\nFossilOrigin-Name: 5129bcc996b3c9f78ab6b674a4364787e7b353b90f15f027cad4431012022c30",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 081263538332bb9c07e62630629007ccbba31bef5dc890f60b4ba58a355f70ac",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1498:   Parse *pParse,",
          "1499:   ExprList *pOrderBy,",
          "1502: ){",
          "1503:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "1505:   if( pOrderBy ){",
          "1506:     int nVal = pOrderBy->nExpr;",
          "1507:     KeyInfo *pKeyInfo = sqlite3KeyInfoFromExprList(pParse, pOrderBy, 0, 0);",
          "1508:     sqlite3VdbeAddOp3(v, OP_Compare, regOld, regNew, nVal);",
          "1509:     sqlite3VdbeAppendP4(v, (void*)pKeyInfo, P4_KEYINFO);",
          "1512:     );",
          "1513:     VdbeCoverageEqNe(v);",
          "1514:     sqlite3VdbeAddOp3(v, OP_Copy, regNew, regOld, nVal-1);",
          "1515:   }else{",
          "1517:   }",
          "1519: }",
          "1521: typedef struct WindowCodeArg WindowCodeArg;",
          "",
          "[Removed Lines]",
          "1497: static int windowIfNewPeer(",
          "1504:   int addr;",
          "1510:     addr = sqlite3VdbeAddOp3(",
          "1511:         v, OP_Jump, sqlite3VdbeCurrentAddr(v)+1, 0, sqlite3VdbeCurrentAddr(v)+1",
          "1516:     addr = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1518:   return addr;",
          "",
          "[Added Lines]",
          "1497: static void windowIfNewPeer(",
          "1510:     sqlite3VdbeAddOp3(v, OP_Jump,",
          "1511:       sqlite3VdbeCurrentAddr(v)+1, addr, sqlite3VdbeCurrentAddr(v)+1",
          "1516:     sqlite3VdbeAddOp2(v, OP_Goto, 0, addr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1708:     int nReg = (pMWin->pOrderBy ? pMWin->pOrderBy->nExpr : 0);",
          "1709:     int regTmp = (nReg ? sqlite3GetTempRange(pParse, nReg) : 0);",
          "1710:     windowReadPeerValues(p, csr, regTmp);",
          "1713:     sqlite3ReleaseTempRange(pParse, regTmp, nReg);",
          "1714:   }",
          "",
          "[Removed Lines]",
          "1711:     addr = windowIfNewPeer(pParse, pMWin->pOrderBy, regTmp, reg);",
          "1712:     sqlite3VdbeChangeP2(v, addr, addrContinue);",
          "",
          "[Added Lines]",
          "1710:     windowIfNewPeer(pParse, pMWin->pOrderBy, regTmp, reg, addrContinue);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1969:   int addrShortcut = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1985:        || pMWin->eEnd==TK_UNBOUNDED || pMWin->eEnd==TK_PRECEDING",
          "1986:   );",
          "1992:   memset(&s, 0, sizeof(WindowCodeArg));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2134:   lblWhereEnd = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2083:     sqlite3VdbeAddOp2(v, OP_Rewind, s.current.csr, 1);",
          "2084:     windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "2085:     sqlite3VdbeAddOp1(v, OP_ResetSorter, s.current.csr);",
          "2087:     sqlite3VdbeJumpHere(v, addrGe);",
          "2088:   }",
          "2089:   if( pMWin->eStart==TK_FOLLOWING && pMWin->eType!=TK_RANGE && regEnd ){",
          "",
          "[Removed Lines]",
          "2086:     addrShortcut = sqlite3VdbeAddOp0(v, OP_Goto);",
          "",
          "[Added Lines]",
          "2231:     sqlite3VdbeAddOp2(v, OP_Goto, 0, lblWhereEnd);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2104:   }",
          "2106:   sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regFirst);",
          "2110:   VdbeModuleComment((pParse->pVdbe, \"Begin WindowCodeStep.SECOND_ROW\"));",
          "2111:   sqlite3VdbeJumpHere(v, addrIfNot);",
          "2112:   if( regPeer ){",
          "2114:   }",
          "2115:   if( pMWin->eStart==TK_FOLLOWING ){",
          "2116:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "",
          "[Removed Lines]",
          "2107:   addrGoto = sqlite3VdbeAddOp0(v, OP_Goto);",
          "2113:     addrPeerJump = windowIfNewPeer(pParse, pOrderBy, regNewPeer, regPeer);",
          "",
          "[Added Lines]",
          "2252:   sqlite3VdbeAddOp2(v, OP_Goto, 0, lblWhereEnd);",
          "2258:     windowIfNewPeer(pParse, pOrderBy, regNewPeer, regPeer, lblWhereEnd);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2158:       }",
          "2159:     }",
          "2160:   }",
          "2164:   VdbeModuleComment((pParse->pVdbe, \"End WindowCodeStep.SECOND_ROW\"));",
          "2169:   sqlite3WhereEnd(pWInfo);",
          "",
          "[Removed Lines]",
          "2161:   if( addrPeerJump ){",
          "2162:     sqlite3VdbeJumpHere(v, addrPeerJump);",
          "2163:   }",
          "2167:   sqlite3VdbeJumpHere(v, addrGoto);",
          "2168:   if( addrShortcut>0 ) sqlite3VdbeJumpHere(v, addrShortcut);",
          "",
          "[Added Lines]",
          "2309:   sqlite3VdbeResolveLabel(v, lblWhereEnd);",
          "",
          "---------------"
        ]
      }
    }
  ]
}