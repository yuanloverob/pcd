{
  "cve_id": "CVE-2021-41203",
  "cve_desc": "TensorFlow is an open source platform for machine learning. In affected versions an attacker can trigger undefined behavior, integer overflows, segfaults and `CHECK`-fail crashes if they can change saved checkpoints from outside of TensorFlow. This is because the checkpoints loading infrastructure is missing validation for invalid file formats. The fixes will be included in TensorFlow 2.7.0. We will also cherrypick these commits on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "e8dc63704c88007ee4713076605c90188d66f3d2",
  "patch_info": {
    "commit_hash": "e8dc63704c88007ee4713076605c90188d66f3d2",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/e8dc63704c88007ee4713076605c90188d66f3d2",
    "files": [
      "tensorflow/core/framework/tensor_slice.cc",
      "tensorflow/core/framework/tensor_slice.h",
      "tensorflow/core/framework/tensor_slice_test.cc",
      "tensorflow/core/util/tensor_slice_reader.cc",
      "tensorflow/core/util/tensor_slice_reader_test.cc"
    ],
    "message": "Add BuildTensorSlice for building from unvalidated TensorSliceProtos.\n\nThis avoids several sources of crashes and undefined behavior when loading\ninvalid checkpoints.\n\nPiperOrigin-RevId: 392785704\nChange-Id: Icd9713c768b882f3b58b427eddac376060696833",
    "before_after_code_files": [
      "tensorflow/core/framework/tensor_slice.cc||tensorflow/core/framework/tensor_slice.cc",
      "tensorflow/core/framework/tensor_slice.h||tensorflow/core/framework/tensor_slice.h",
      "tensorflow/core/framework/tensor_slice_test.cc||tensorflow/core/framework/tensor_slice_test.cc",
      "tensorflow/core/util/tensor_slice_reader.cc||tensorflow/core/util/tensor_slice_reader.cc",
      "tensorflow/core/util/tensor_slice_reader_test.cc||tensorflow/core/util/tensor_slice_reader_test.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/framework/tensor_slice.cc||tensorflow/core/framework/tensor_slice.cc": [
      "File: tensorflow/core/framework/tensor_slice.cc -> tensorflow/core/framework/tensor_slice.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: #include \"tensorflow/core/framework/tensor_slice.h\"",
      "17: #include <vector>",
      "18: #include \"tensorflow/core/lib/core/errors.h\"",
      "19: #include \"tensorflow/core/lib/strings/numbers.h\"",
      "20: #include \"tensorflow/core/lib/strings/str_util.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: #include <limits>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "44:   }",
      "45: }",
      "47: Status TensorSlice::Parse(const string& str, TensorSlice* slice) {",
      "48:   std::vector<string> items = str_util::Split(str, ':', str_util::SkipEmpty());",
      "49:   slice->starts_.reserve(items.size());",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "50: Status TensorSlice::BuildTensorSlice(const TensorSliceProto& proto,",
      "51:                                      TensorSlice* output) {",
      "52:   output->Clear();",
      "53:   output->starts_.reserve(proto.extent_size());",
      "54:   output->lengths_.reserve(proto.extent_size());",
      "55:   for (const auto& e : proto.extent()) {",
      "56:     int64_t l = GetExtentLength(e);",
      "57:     if (e.start() != 0 || l != kFullExtent) {",
      "58:       if (e.start() < 0 || l <= 0) {",
      "59:         return errors::InvalidArgument(",
      "60:             \"Expected non-negative start and positive length but got start = \",",
      "61:             e.start(), \", length = \", l, \": extent = \", e.ShortDebugString());",
      "62:       }",
      "64:       if (static_cast<uint64_t>(e.start()) + static_cast<uint64_t>(e.length()) >",
      "65:           std::numeric_limits<int64_t>::max()) {",
      "66:         return errors::InvalidArgument(",
      "67:             \"Extent end exceeds the maximum possible size: extent = \",",
      "68:             e.ShortDebugString());",
      "69:       }",
      "70:     }",
      "71:     output->starts_.push_back(e.start());",
      "72:     output->lengths_.push_back(l);",
      "73:   }",
      "75:   return Status::OK();",
      "76: }",
      "",
      "---------------"
    ],
    "tensorflow/core/framework/tensor_slice.h||tensorflow/core/framework/tensor_slice.h": [
      "File: tensorflow/core/framework/tensor_slice.h -> tensorflow/core/framework/tensor_slice.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "48:   explicit TensorSlice(",
      "49:       std::initializer_list<std::pair<int64_t, int64_t>> extents);",
      "51:   static Status Parse(const string& str, TensorSlice* output);",
      "52:   static TensorSlice ParseOrDie(const string& str) {",
      "53:     TensorSlice ret;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "54:   static Status BuildTensorSlice(const TensorSliceProto& proto,",
      "55:                                  TensorSlice* output);",
      "",
      "---------------"
    ],
    "tensorflow/core/framework/tensor_slice_test.cc||tensorflow/core/framework/tensor_slice_test.cc": [
      "File: tensorflow/core/framework/tensor_slice_test.cc -> tensorflow/core/framework/tensor_slice_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: #include \"tensorflow/core/framework/tensor_slice.h\"",
      "18: #include \"tensorflow/core/lib/core/status_test_util.h\"",
      "19: #include \"tensorflow/core/platform/logging.h\"",
      "20: #include \"tensorflow/core/platform/protobuf.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: #include <limits>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "125:   }",
      "126: }",
      "129: TEST(TensorSliceTest, Intersection) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "131: TEST(TensorSliceTest, BuildTensorSlice) {",
      "132:   TensorSliceProto proto;",
      "133:   TensorSlice({{0, -1}, {0, 10}, {14, 1}}).AsProto(&proto);",
      "134:   TensorSlice s;",
      "137:   {",
      "138:     TF_ASSERT_OK(TensorSlice::BuildTensorSlice(proto, &s));",
      "139:     EXPECT_EQ(\"-:0,10:14,1\", s.DebugString());",
      "140:   }",
      "143:   {",
      "144:     TensorSliceProto invalid_proto = proto;",
      "145:     invalid_proto.mutable_extent(0)->set_start(-1);",
      "146:     EXPECT_FALSE(TensorSlice::BuildTensorSlice(invalid_proto, &s).ok());",
      "147:   }",
      "150:   {",
      "151:     TensorSliceProto invalid_proto = proto;",
      "152:     invalid_proto.mutable_extent(2)->set_length(-1);",
      "153:     EXPECT_FALSE(TensorSlice::BuildTensorSlice(invalid_proto, &s).ok());",
      "154:   }",
      "157:   {",
      "158:     TensorSliceProto invalid_proto = proto;",
      "159:     invalid_proto.mutable_extent(2)->clear_length();",
      "160:     EXPECT_FALSE(TensorSlice::BuildTensorSlice(invalid_proto, &s).ok());",
      "161:   }",
      "164:   {",
      "165:     TensorSliceProto invalid_proto = proto;",
      "166:     invalid_proto.mutable_extent(2)->set_length(",
      "167:         std::numeric_limits<int64_t>::max());",
      "168:     EXPECT_FALSE(TensorSlice::BuildTensorSlice(invalid_proto, &s).ok());",
      "169:   }",
      "170: }",
      "",
      "---------------"
    ],
    "tensorflow/core/util/tensor_slice_reader.cc||tensorflow/core/util/tensor_slice_reader.cc": [
      "File: tensorflow/core/util/tensor_slice_reader.cc -> tensorflow/core/util/tensor_slice_reader.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "172:     status_ = TensorShape::BuildTensorShapeBase(ssm.shape(), &ssm_shape);",
      "173:     if (!status_.ok()) return;",
      "174:     for (const TensorSliceProto& tsp : ssm.slice()) {",
      "176:       status_ = RegisterTensorSlice(ssm.name(), ssm_shape, ssm.type(), fname,",
      "177:                                     ss_slice, &tensors_);",
      "178:       if (!status_.ok()) return;",
      "",
      "[Removed Lines]",
      "175:       TensorSlice ss_slice(tsp);",
      "",
      "[Added Lines]",
      "175:       TensorSlice ss_slice;",
      "176:       status_ = TensorSlice::BuildTensorSlice(tsp, &ss_slice);",
      "177:       if (!status_.ok()) return;",
      "",
      "---------------"
    ],
    "tensorflow/core/util/tensor_slice_reader_test.cc||tensorflow/core/util/tensor_slice_reader_test.cc": [
      "File: tensorflow/core/util/tensor_slice_reader_test.cc -> tensorflow/core/util/tensor_slice_reader_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "436:   EXPECT_FALSE(reader.status().ok());",
      "437: }",
      "439: void CachedTensorSliceReaderTesterHelper(",
      "440:     const TensorSliceWriter::CreateBuilderFunction& create_function,",
      "441:     const TensorSliceReader::OpenTableFunction& open_function) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "439: TEST(TensorSliceReaderTest, InvalidTensorSlice) {",
      "440:   const string fname =",
      "441:       io::JoinPath(testing::TmpDir(), \"invalid_slice_checkpoint\");",
      "442:   TensorSliceWriter writer(fname, CreateTableTensorSliceBuilder);",
      "443:   const int32 data[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};",
      "444:   TF_CHECK_OK(writer.Add(\"test\", TensorShape({4, 5}),",
      "445:                          TensorSlice::ParseOrDie(\"0,2:-\"), data));",
      "446:   TF_CHECK_OK(writer.Finish());",
      "448:   MutateSavedTensorSlices(fname, [](SavedTensorSlices sts) {",
      "449:     if (sts.has_meta()) {",
      "450:       for (auto& tensor : *sts.mutable_meta()->mutable_tensor()) {",
      "451:         tensor.mutable_slice(0)->mutable_extent(0)->set_length(-10);",
      "452:       }",
      "453:     }",
      "454:     return sts.SerializeAsString();",
      "455:   });",
      "457:   TensorSliceReader reader(fname, OpenTableTensorSliceReader);",
      "459:   EXPECT_FALSE(reader.status().ok());",
      "460: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9f66b3b23346fb93820bdebbcd91b987da567811",
      "candidate_info": {
        "commit_hash": "9f66b3b23346fb93820bdebbcd91b987da567811",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/9f66b3b23346fb93820bdebbcd91b987da567811",
        "files": [
          "tensorflow/core/framework/tensor_slice.cc",
          "tensorflow/core/framework/tensor_slice.h",
          "tensorflow/core/framework/tensor_slice_test.cc",
          "tensorflow/core/util/tensor_slice_reader.cc",
          "tensorflow/core/util/tensor_slice_reader_test.cc"
        ],
        "message": "Add BuildTensorSlice for building from unvalidated TensorSliceProtos.\n\nThis avoids several sources of crashes and undefined behavior when loading\ninvalid checkpoints.\n\nPiperOrigin-RevId: 392785704\nChange-Id: Icd9713c768b882f3b58b427eddac376060696833",
        "before_after_code_files": [
          "tensorflow/core/framework/tensor_slice.cc||tensorflow/core/framework/tensor_slice.cc",
          "tensorflow/core/framework/tensor_slice.h||tensorflow/core/framework/tensor_slice.h",
          "tensorflow/core/framework/tensor_slice_test.cc||tensorflow/core/framework/tensor_slice_test.cc",
          "tensorflow/core/util/tensor_slice_reader.cc||tensorflow/core/util/tensor_slice_reader.cc",
          "tensorflow/core/util/tensor_slice_reader_test.cc||tensorflow/core/util/tensor_slice_reader_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/framework/tensor_slice.cc||tensorflow/core/framework/tensor_slice.cc",
            "tensorflow/core/framework/tensor_slice.h||tensorflow/core/framework/tensor_slice.h",
            "tensorflow/core/framework/tensor_slice_test.cc||tensorflow/core/framework/tensor_slice_test.cc",
            "tensorflow/core/util/tensor_slice_reader.cc||tensorflow/core/util/tensor_slice_reader.cc",
            "tensorflow/core/util/tensor_slice_reader_test.cc||tensorflow/core/util/tensor_slice_reader_test.cc"
          ],
          "candidate": [
            "tensorflow/core/framework/tensor_slice.cc||tensorflow/core/framework/tensor_slice.cc",
            "tensorflow/core/framework/tensor_slice.h||tensorflow/core/framework/tensor_slice.h",
            "tensorflow/core/framework/tensor_slice_test.cc||tensorflow/core/framework/tensor_slice_test.cc",
            "tensorflow/core/util/tensor_slice_reader.cc||tensorflow/core/util/tensor_slice_reader.cc",
            "tensorflow/core/util/tensor_slice_reader_test.cc||tensorflow/core/util/tensor_slice_reader_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/framework/tensor_slice.cc||tensorflow/core/framework/tensor_slice.cc": [
          "File: tensorflow/core/framework/tensor_slice.cc -> tensorflow/core/framework/tensor_slice.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include \"tensorflow/core/framework/tensor_slice.h\"",
          "17: #include <vector>",
          "18: #include \"tensorflow/core/lib/core/errors.h\"",
          "19: #include \"tensorflow/core/lib/strings/numbers.h\"",
          "20: #include \"tensorflow/core/lib/strings/str_util.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #include <limits>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:   }",
          "45: }",
          "47: Status TensorSlice::Parse(const string& str, TensorSlice* slice) {",
          "48:   std::vector<string> items = str_util::Split(str, ':', str_util::SkipEmpty());",
          "49:   slice->starts_.reserve(items.size());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: Status TensorSlice::BuildTensorSlice(const TensorSliceProto& proto,",
          "51:                                      TensorSlice* output) {",
          "52:   output->Clear();",
          "53:   output->starts_.reserve(proto.extent_size());",
          "54:   output->lengths_.reserve(proto.extent_size());",
          "55:   for (const auto& e : proto.extent()) {",
          "56:     int64_t l = GetExtentLength(e);",
          "57:     if (e.start() != 0 || l != kFullExtent) {",
          "58:       if (e.start() < 0 || l <= 0) {",
          "59:         return errors::InvalidArgument(",
          "60:             \"Expected non-negative start and positive length but got start = \",",
          "61:             e.start(), \", length = \", l, \": extent = \", e.ShortDebugString());",
          "62:       }",
          "64:       if (static_cast<uint64_t>(e.start()) + static_cast<uint64_t>(e.length()) >",
          "65:           std::numeric_limits<int64_t>::max()) {",
          "66:         return errors::InvalidArgument(",
          "67:             \"Extent end exceeds the maximum possible size: extent = \",",
          "68:             e.ShortDebugString());",
          "69:       }",
          "70:     }",
          "71:     output->starts_.push_back(e.start());",
          "72:     output->lengths_.push_back(l);",
          "73:   }",
          "75:   return Status::OK();",
          "76: }",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/tensor_slice.h||tensorflow/core/framework/tensor_slice.h": [
          "File: tensorflow/core/framework/tensor_slice.h -> tensorflow/core/framework/tensor_slice.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:   explicit TensorSlice(const TensorSliceProto& proto);",
          "48:   explicit TensorSlice(std::initializer_list<std::pair<int64, int64>> extents);",
          "50:   static Status Parse(const string& str, TensorSlice* output);",
          "51:   static TensorSlice ParseOrDie(const string& str) {",
          "52:     TensorSlice ret;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:   static Status BuildTensorSlice(const TensorSliceProto& proto,",
          "54:                                  TensorSlice* output);",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/tensor_slice_test.cc||tensorflow/core/framework/tensor_slice_test.cc": [
          "File: tensorflow/core/framework/tensor_slice_test.cc -> tensorflow/core/framework/tensor_slice_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include \"tensorflow/core/framework/tensor_slice.h\"",
          "18: #include \"tensorflow/core/lib/core/status_test_util.h\"",
          "19: #include \"tensorflow/core/platform/logging.h\"",
          "20: #include \"tensorflow/core/platform/protobuf.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #include <limits>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123:   }",
          "124: }",
          "127: TEST(TensorSliceTest, Intersection) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129: TEST(TensorSliceTest, BuildTensorSlice) {",
          "130:   TensorSliceProto proto;",
          "131:   TensorSlice({{0, -1}, {0, 10}, {14, 1}}).AsProto(&proto);",
          "132:   TensorSlice s;",
          "135:   {",
          "136:     TF_ASSERT_OK(TensorSlice::BuildTensorSlice(proto, &s));",
          "137:     EXPECT_EQ(\"-:0,10:14,1\", s.DebugString());",
          "138:   }",
          "141:   {",
          "142:     TensorSliceProto invalid_proto = proto;",
          "143:     invalid_proto.mutable_extent(0)->set_start(-1);",
          "144:     EXPECT_FALSE(TensorSlice::BuildTensorSlice(invalid_proto, &s).ok());",
          "145:   }",
          "148:   {",
          "149:     TensorSliceProto invalid_proto = proto;",
          "150:     invalid_proto.mutable_extent(2)->set_length(-1);",
          "151:     EXPECT_FALSE(TensorSlice::BuildTensorSlice(invalid_proto, &s).ok());",
          "152:   }",
          "155:   {",
          "156:     TensorSliceProto invalid_proto = proto;",
          "157:     invalid_proto.mutable_extent(2)->clear_length();",
          "158:     EXPECT_FALSE(TensorSlice::BuildTensorSlice(invalid_proto, &s).ok());",
          "159:   }",
          "162:   {",
          "163:     TensorSliceProto invalid_proto = proto;",
          "164:     invalid_proto.mutable_extent(2)->set_length(",
          "165:         std::numeric_limits<int64_t>::max());",
          "166:     EXPECT_FALSE(TensorSlice::BuildTensorSlice(invalid_proto, &s).ok());",
          "167:   }",
          "168: }",
          "",
          "---------------"
        ],
        "tensorflow/core/util/tensor_slice_reader.cc||tensorflow/core/util/tensor_slice_reader.cc": [
          "File: tensorflow/core/util/tensor_slice_reader.cc -> tensorflow/core/util/tensor_slice_reader.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "172:     status_ = TensorShape::BuildTensorShapeBase(ssm.shape(), &ssm_shape);",
          "173:     if (!status_.ok()) return;",
          "174:     for (const TensorSliceProto& tsp : ssm.slice()) {",
          "176:       status_ = RegisterTensorSlice(ssm.name(), ssm_shape, ssm.type(), fname,",
          "177:                                     ss_slice, &tensors_);",
          "178:       if (!status_.ok()) return;",
          "",
          "[Removed Lines]",
          "175:       TensorSlice ss_slice(tsp);",
          "",
          "[Added Lines]",
          "175:       TensorSlice ss_slice;",
          "176:       status_ = TensorSlice::BuildTensorSlice(tsp, &ss_slice);",
          "177:       if (!status_.ok()) return;",
          "",
          "---------------"
        ],
        "tensorflow/core/util/tensor_slice_reader_test.cc||tensorflow/core/util/tensor_slice_reader_test.cc": [
          "File: tensorflow/core/util/tensor_slice_reader_test.cc -> tensorflow/core/util/tensor_slice_reader_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "436:   EXPECT_FALSE(reader.status().ok());",
          "437: }",
          "439: void CachedTensorSliceReaderTesterHelper(",
          "440:     const TensorSliceWriter::CreateBuilderFunction& create_function,",
          "441:     const TensorSliceReader::OpenTableFunction& open_function) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "439: TEST(TensorSliceReaderTest, InvalidTensorSlice) {",
          "440:   const string fname =",
          "441:       io::JoinPath(testing::TmpDir(), \"invalid_slice_checkpoint\");",
          "442:   TensorSliceWriter writer(fname, CreateTableTensorSliceBuilder);",
          "443:   const int32 data[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};",
          "444:   TF_CHECK_OK(writer.Add(\"test\", TensorShape({4, 5}),",
          "445:                          TensorSlice::ParseOrDie(\"0,2:-\"), data));",
          "446:   TF_CHECK_OK(writer.Finish());",
          "448:   MutateSavedTensorSlices(fname, [](SavedTensorSlices sts) {",
          "449:     if (sts.has_meta()) {",
          "450:       for (auto& tensor : *sts.mutable_meta()->mutable_tensor()) {",
          "451:         tensor.mutable_slice(0)->mutable_extent(0)->set_length(-10);",
          "452:       }",
          "453:     }",
          "454:     return sts.SerializeAsString();",
          "455:   });",
          "457:   TensorSliceReader reader(fname, OpenTableTensorSliceReader);",
          "459:   EXPECT_FALSE(reader.status().ok());",
          "460: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c5ce903b8092bab7fdf703c88d9cf90231bd22d0",
      "candidate_info": {
        "commit_hash": "c5ce903b8092bab7fdf703c88d9cf90231bd22d0",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/c5ce903b8092bab7fdf703c88d9cf90231bd22d0",
        "files": [
          "tensorflow/core/framework/tensor_slice.cc",
          "tensorflow/core/framework/tensor_slice.h",
          "tensorflow/core/framework/tensor_slice_test.cc",
          "tensorflow/core/util/tensor_slice_reader.cc",
          "tensorflow/core/util/tensor_slice_reader_test.cc"
        ],
        "message": "Add BuildTensorSlice for building from unvalidated TensorSliceProtos.\n\nThis avoids several sources of crashes and undefined behavior when loading\ninvalid checkpoints.\n\nPiperOrigin-RevId: 392785704\nChange-Id: Icd9713c768b882f3b58b427eddac376060696833",
        "before_after_code_files": [
          "tensorflow/core/framework/tensor_slice.cc||tensorflow/core/framework/tensor_slice.cc",
          "tensorflow/core/framework/tensor_slice.h||tensorflow/core/framework/tensor_slice.h",
          "tensorflow/core/framework/tensor_slice_test.cc||tensorflow/core/framework/tensor_slice_test.cc",
          "tensorflow/core/util/tensor_slice_reader.cc||tensorflow/core/util/tensor_slice_reader.cc",
          "tensorflow/core/util/tensor_slice_reader_test.cc||tensorflow/core/util/tensor_slice_reader_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/framework/tensor_slice.cc||tensorflow/core/framework/tensor_slice.cc",
            "tensorflow/core/framework/tensor_slice.h||tensorflow/core/framework/tensor_slice.h",
            "tensorflow/core/framework/tensor_slice_test.cc||tensorflow/core/framework/tensor_slice_test.cc",
            "tensorflow/core/util/tensor_slice_reader.cc||tensorflow/core/util/tensor_slice_reader.cc",
            "tensorflow/core/util/tensor_slice_reader_test.cc||tensorflow/core/util/tensor_slice_reader_test.cc"
          ],
          "candidate": [
            "tensorflow/core/framework/tensor_slice.cc||tensorflow/core/framework/tensor_slice.cc",
            "tensorflow/core/framework/tensor_slice.h||tensorflow/core/framework/tensor_slice.h",
            "tensorflow/core/framework/tensor_slice_test.cc||tensorflow/core/framework/tensor_slice_test.cc",
            "tensorflow/core/util/tensor_slice_reader.cc||tensorflow/core/util/tensor_slice_reader.cc",
            "tensorflow/core/util/tensor_slice_reader_test.cc||tensorflow/core/util/tensor_slice_reader_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/framework/tensor_slice.cc||tensorflow/core/framework/tensor_slice.cc": [
          "File: tensorflow/core/framework/tensor_slice.cc -> tensorflow/core/framework/tensor_slice.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include \"tensorflow/core/framework/tensor_slice.h\"",
          "17: #include <vector>",
          "18: #include \"tensorflow/core/lib/core/errors.h\"",
          "19: #include \"tensorflow/core/lib/strings/numbers.h\"",
          "20: #include \"tensorflow/core/lib/strings/str_util.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #include <limits>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:   }",
          "45: }",
          "47: Status TensorSlice::Parse(const string& str, TensorSlice* slice) {",
          "48:   std::vector<string> items = str_util::Split(str, ':', str_util::SkipEmpty());",
          "49:   slice->starts_.reserve(items.size());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: Status TensorSlice::BuildTensorSlice(const TensorSliceProto& proto,",
          "51:                                      TensorSlice* output) {",
          "52:   output->Clear();",
          "53:   output->starts_.reserve(proto.extent_size());",
          "54:   output->lengths_.reserve(proto.extent_size());",
          "55:   for (const auto& e : proto.extent()) {",
          "56:     int64_t l = GetExtentLength(e);",
          "57:     if (e.start() != 0 || l != kFullExtent) {",
          "58:       if (e.start() < 0 || l <= 0) {",
          "59:         return errors::InvalidArgument(",
          "60:             \"Expected non-negative start and positive length but got start = \",",
          "61:             e.start(), \", length = \", l, \": extent = \", e.ShortDebugString());",
          "62:       }",
          "64:       if (static_cast<uint64_t>(e.start()) + static_cast<uint64_t>(e.length()) >",
          "65:           std::numeric_limits<int64_t>::max()) {",
          "66:         return errors::InvalidArgument(",
          "67:             \"Extent end exceeds the maximum possible size: extent = \",",
          "68:             e.ShortDebugString());",
          "69:       }",
          "70:     }",
          "71:     output->starts_.push_back(e.start());",
          "72:     output->lengths_.push_back(l);",
          "73:   }",
          "75:   return Status::OK();",
          "76: }",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/tensor_slice.h||tensorflow/core/framework/tensor_slice.h": [
          "File: tensorflow/core/framework/tensor_slice.h -> tensorflow/core/framework/tensor_slice.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:   explicit TensorSlice(const TensorSliceProto& proto);",
          "48:   explicit TensorSlice(std::initializer_list<std::pair<int64, int64>> extents);",
          "50:   static Status Parse(const string& str, TensorSlice* output);",
          "51:   static TensorSlice ParseOrDie(const string& str) {",
          "52:     TensorSlice ret;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:   static Status BuildTensorSlice(const TensorSliceProto& proto,",
          "54:                                  TensorSlice* output);",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/tensor_slice_test.cc||tensorflow/core/framework/tensor_slice_test.cc": [
          "File: tensorflow/core/framework/tensor_slice_test.cc -> tensorflow/core/framework/tensor_slice_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include \"tensorflow/core/framework/tensor_slice.h\"",
          "18: #include \"tensorflow/core/lib/core/status_test_util.h\"",
          "19: #include \"tensorflow/core/platform/logging.h\"",
          "20: #include \"tensorflow/core/platform/protobuf.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #include <limits>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123:   }",
          "124: }",
          "127: TEST(TensorSliceTest, Intersection) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129: TEST(TensorSliceTest, BuildTensorSlice) {",
          "130:   TensorSliceProto proto;",
          "131:   TensorSlice({{0, -1}, {0, 10}, {14, 1}}).AsProto(&proto);",
          "132:   TensorSlice s;",
          "135:   {",
          "136:     TF_ASSERT_OK(TensorSlice::BuildTensorSlice(proto, &s));",
          "137:     EXPECT_EQ(\"-:0,10:14,1\", s.DebugString());",
          "138:   }",
          "141:   {",
          "142:     TensorSliceProto invalid_proto = proto;",
          "143:     invalid_proto.mutable_extent(0)->set_start(-1);",
          "144:     EXPECT_FALSE(TensorSlice::BuildTensorSlice(invalid_proto, &s).ok());",
          "145:   }",
          "148:   {",
          "149:     TensorSliceProto invalid_proto = proto;",
          "150:     invalid_proto.mutable_extent(2)->set_length(-1);",
          "151:     EXPECT_FALSE(TensorSlice::BuildTensorSlice(invalid_proto, &s).ok());",
          "152:   }",
          "155:   {",
          "156:     TensorSliceProto invalid_proto = proto;",
          "157:     invalid_proto.mutable_extent(2)->clear_length();",
          "158:     EXPECT_FALSE(TensorSlice::BuildTensorSlice(invalid_proto, &s).ok());",
          "159:   }",
          "162:   {",
          "163:     TensorSliceProto invalid_proto = proto;",
          "164:     invalid_proto.mutable_extent(2)->set_length(",
          "165:         std::numeric_limits<int64_t>::max());",
          "166:     EXPECT_FALSE(TensorSlice::BuildTensorSlice(invalid_proto, &s).ok());",
          "167:   }",
          "168: }",
          "",
          "---------------"
        ],
        "tensorflow/core/util/tensor_slice_reader.cc||tensorflow/core/util/tensor_slice_reader.cc": [
          "File: tensorflow/core/util/tensor_slice_reader.cc -> tensorflow/core/util/tensor_slice_reader.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "172:     status_ = TensorShape::BuildTensorShapeBase(ssm.shape(), &ssm_shape);",
          "173:     if (!status_.ok()) return;",
          "174:     for (const TensorSliceProto& tsp : ssm.slice()) {",
          "176:       status_ = RegisterTensorSlice(ssm.name(), ssm_shape, ssm.type(), fname,",
          "177:                                     ss_slice, &tensors_);",
          "178:       if (!status_.ok()) return;",
          "",
          "[Removed Lines]",
          "175:       TensorSlice ss_slice(tsp);",
          "",
          "[Added Lines]",
          "175:       TensorSlice ss_slice;",
          "176:       status_ = TensorSlice::BuildTensorSlice(tsp, &ss_slice);",
          "177:       if (!status_.ok()) return;",
          "",
          "---------------"
        ],
        "tensorflow/core/util/tensor_slice_reader_test.cc||tensorflow/core/util/tensor_slice_reader_test.cc": [
          "File: tensorflow/core/util/tensor_slice_reader_test.cc -> tensorflow/core/util/tensor_slice_reader_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "436:   EXPECT_FALSE(reader.status().ok());",
          "437: }",
          "439: void CachedTensorSliceReaderTesterHelper(",
          "440:     const TensorSliceWriter::CreateBuilderFunction& create_function,",
          "441:     const TensorSliceReader::OpenTableFunction& open_function) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "439: TEST(TensorSliceReaderTest, InvalidTensorSlice) {",
          "440:   const string fname =",
          "441:       io::JoinPath(testing::TmpDir(), \"invalid_slice_checkpoint\");",
          "442:   TensorSliceWriter writer(fname, CreateTableTensorSliceBuilder);",
          "443:   const int32 data[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};",
          "444:   TF_CHECK_OK(writer.Add(\"test\", TensorShape({4, 5}),",
          "445:                          TensorSlice::ParseOrDie(\"0,2:-\"), data));",
          "446:   TF_CHECK_OK(writer.Finish());",
          "448:   MutateSavedTensorSlices(fname, [](SavedTensorSlices sts) {",
          "449:     if (sts.has_meta()) {",
          "450:       for (auto& tensor : *sts.mutable_meta()->mutable_tensor()) {",
          "451:         tensor.mutable_slice(0)->mutable_extent(0)->set_length(-10);",
          "452:       }",
          "453:     }",
          "454:     return sts.SerializeAsString();",
          "455:   });",
          "457:   TensorSliceReader reader(fname, OpenTableTensorSliceReader);",
          "459:   EXPECT_FALSE(reader.status().ok());",
          "460: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "021f7655fc1a8f34b92f009ee89498c95993ac76",
      "candidate_info": {
        "commit_hash": "021f7655fc1a8f34b92f009ee89498c95993ac76",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/021f7655fc1a8f34b92f009ee89498c95993ac76",
        "files": [
          "tensorflow/core/framework/tensor_slice.cc",
          "tensorflow/core/framework/tensor_slice.h",
          "tensorflow/core/framework/tensor_slice_test.cc",
          "tensorflow/core/util/tensor_slice_reader.cc",
          "tensorflow/core/util/tensor_slice_reader_test.cc"
        ],
        "message": "Add BuildTensorSlice for building from unvalidated TensorSliceProtos.\n\nThis avoids several sources of crashes and undefined behavior when loading\ninvalid checkpoints.\n\nPiperOrigin-RevId: 392785704\nChange-Id: Icd9713c768b882f3b58b427eddac376060696833",
        "before_after_code_files": [
          "tensorflow/core/framework/tensor_slice.cc||tensorflow/core/framework/tensor_slice.cc",
          "tensorflow/core/framework/tensor_slice.h||tensorflow/core/framework/tensor_slice.h",
          "tensorflow/core/framework/tensor_slice_test.cc||tensorflow/core/framework/tensor_slice_test.cc",
          "tensorflow/core/util/tensor_slice_reader.cc||tensorflow/core/util/tensor_slice_reader.cc",
          "tensorflow/core/util/tensor_slice_reader_test.cc||tensorflow/core/util/tensor_slice_reader_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/framework/tensor_slice.cc||tensorflow/core/framework/tensor_slice.cc",
            "tensorflow/core/framework/tensor_slice.h||tensorflow/core/framework/tensor_slice.h",
            "tensorflow/core/framework/tensor_slice_test.cc||tensorflow/core/framework/tensor_slice_test.cc",
            "tensorflow/core/util/tensor_slice_reader.cc||tensorflow/core/util/tensor_slice_reader.cc",
            "tensorflow/core/util/tensor_slice_reader_test.cc||tensorflow/core/util/tensor_slice_reader_test.cc"
          ],
          "candidate": [
            "tensorflow/core/framework/tensor_slice.cc||tensorflow/core/framework/tensor_slice.cc",
            "tensorflow/core/framework/tensor_slice.h||tensorflow/core/framework/tensor_slice.h",
            "tensorflow/core/framework/tensor_slice_test.cc||tensorflow/core/framework/tensor_slice_test.cc",
            "tensorflow/core/util/tensor_slice_reader.cc||tensorflow/core/util/tensor_slice_reader.cc",
            "tensorflow/core/util/tensor_slice_reader_test.cc||tensorflow/core/util/tensor_slice_reader_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/framework/tensor_slice.cc||tensorflow/core/framework/tensor_slice.cc": [
          "File: tensorflow/core/framework/tensor_slice.cc -> tensorflow/core/framework/tensor_slice.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include \"tensorflow/core/framework/tensor_slice.h\"",
          "17: #include <vector>",
          "18: #include \"tensorflow/core/lib/core/errors.h\"",
          "19: #include \"tensorflow/core/lib/strings/numbers.h\"",
          "20: #include \"tensorflow/core/lib/strings/str_util.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #include <limits>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:   }",
          "45: }",
          "47: Status TensorSlice::Parse(const string& str, TensorSlice* slice) {",
          "48:   std::vector<string> items = str_util::Split(str, ':', str_util::SkipEmpty());",
          "49:   slice->starts_.reserve(items.size());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: Status TensorSlice::BuildTensorSlice(const TensorSliceProto& proto,",
          "51:                                      TensorSlice* output) {",
          "52:   output->Clear();",
          "53:   output->starts_.reserve(proto.extent_size());",
          "54:   output->lengths_.reserve(proto.extent_size());",
          "55:   for (const auto& e : proto.extent()) {",
          "56:     int64_t l = GetExtentLength(e);",
          "57:     if (e.start() != 0 || l != kFullExtent) {",
          "58:       if (e.start() < 0 || l <= 0) {",
          "59:         return errors::InvalidArgument(",
          "60:             \"Expected non-negative start and positive length but got start = \",",
          "61:             e.start(), \", length = \", l, \": extent = \", e.ShortDebugString());",
          "62:       }",
          "64:       if (static_cast<uint64_t>(e.start()) + static_cast<uint64_t>(e.length()) >",
          "65:           std::numeric_limits<int64_t>::max()) {",
          "66:         return errors::InvalidArgument(",
          "67:             \"Extent end exceeds the maximum possible size: extent = \",",
          "68:             e.ShortDebugString());",
          "69:       }",
          "70:     }",
          "71:     output->starts_.push_back(e.start());",
          "72:     output->lengths_.push_back(l);",
          "73:   }",
          "75:   return Status::OK();",
          "76: }",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/tensor_slice.h||tensorflow/core/framework/tensor_slice.h": [
          "File: tensorflow/core/framework/tensor_slice.h -> tensorflow/core/framework/tensor_slice.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:   explicit TensorSlice(const TensorSliceProto& proto);",
          "48:   explicit TensorSlice(std::initializer_list<std::pair<int64, int64>> extents);",
          "50:   static Status Parse(const string& str, TensorSlice* output);",
          "51:   static TensorSlice ParseOrDie(const string& str) {",
          "52:     TensorSlice ret;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:   static Status BuildTensorSlice(const TensorSliceProto& proto,",
          "54:                                  TensorSlice* output);",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/tensor_slice_test.cc||tensorflow/core/framework/tensor_slice_test.cc": [
          "File: tensorflow/core/framework/tensor_slice_test.cc -> tensorflow/core/framework/tensor_slice_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include \"tensorflow/core/framework/tensor_slice.h\"",
          "18: #include \"tensorflow/core/lib/core/status_test_util.h\"",
          "19: #include \"tensorflow/core/platform/logging.h\"",
          "20: #include \"tensorflow/core/platform/protobuf.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #include <limits>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123:   }",
          "124: }",
          "127: TEST(TensorSliceTest, Intersection) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129: TEST(TensorSliceTest, BuildTensorSlice) {",
          "130:   TensorSliceProto proto;",
          "131:   TensorSlice({{0, -1}, {0, 10}, {14, 1}}).AsProto(&proto);",
          "132:   TensorSlice s;",
          "135:   {",
          "136:     TF_ASSERT_OK(TensorSlice::BuildTensorSlice(proto, &s));",
          "137:     EXPECT_EQ(\"-:0,10:14,1\", s.DebugString());",
          "138:   }",
          "141:   {",
          "142:     TensorSliceProto invalid_proto = proto;",
          "143:     invalid_proto.mutable_extent(0)->set_start(-1);",
          "144:     EXPECT_FALSE(TensorSlice::BuildTensorSlice(invalid_proto, &s).ok());",
          "145:   }",
          "148:   {",
          "149:     TensorSliceProto invalid_proto = proto;",
          "150:     invalid_proto.mutable_extent(2)->set_length(-1);",
          "151:     EXPECT_FALSE(TensorSlice::BuildTensorSlice(invalid_proto, &s).ok());",
          "152:   }",
          "155:   {",
          "156:     TensorSliceProto invalid_proto = proto;",
          "157:     invalid_proto.mutable_extent(2)->clear_length();",
          "158:     EXPECT_FALSE(TensorSlice::BuildTensorSlice(invalid_proto, &s).ok());",
          "159:   }",
          "162:   {",
          "163:     TensorSliceProto invalid_proto = proto;",
          "164:     invalid_proto.mutable_extent(2)->set_length(",
          "165:         std::numeric_limits<int64_t>::max());",
          "166:     EXPECT_FALSE(TensorSlice::BuildTensorSlice(invalid_proto, &s).ok());",
          "167:   }",
          "168: }",
          "",
          "---------------"
        ],
        "tensorflow/core/util/tensor_slice_reader.cc||tensorflow/core/util/tensor_slice_reader.cc": [
          "File: tensorflow/core/util/tensor_slice_reader.cc -> tensorflow/core/util/tensor_slice_reader.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "172:     status_ = TensorShape::BuildTensorShapeBase(ssm.shape(), &ssm_shape);",
          "173:     if (!status_.ok()) return;",
          "174:     for (const TensorSliceProto& tsp : ssm.slice()) {",
          "176:       status_ = RegisterTensorSlice(ssm.name(), ssm_shape, ssm.type(), fname,",
          "177:                                     ss_slice, &tensors_);",
          "178:       if (!status_.ok()) return;",
          "",
          "[Removed Lines]",
          "175:       TensorSlice ss_slice(tsp);",
          "",
          "[Added Lines]",
          "175:       TensorSlice ss_slice;",
          "176:       status_ = TensorSlice::BuildTensorSlice(tsp, &ss_slice);",
          "177:       if (!status_.ok()) return;",
          "",
          "---------------"
        ],
        "tensorflow/core/util/tensor_slice_reader_test.cc||tensorflow/core/util/tensor_slice_reader_test.cc": [
          "File: tensorflow/core/util/tensor_slice_reader_test.cc -> tensorflow/core/util/tensor_slice_reader_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "436:   EXPECT_FALSE(reader.status().ok());",
          "437: }",
          "439: void CachedTensorSliceReaderTesterHelper(",
          "440:     const TensorSliceWriter::CreateBuilderFunction& create_function,",
          "441:     const TensorSliceReader::OpenTableFunction& open_function) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "439: TEST(TensorSliceReaderTest, InvalidTensorSlice) {",
          "440:   const string fname =",
          "441:       io::JoinPath(testing::TmpDir(), \"invalid_slice_checkpoint\");",
          "442:   TensorSliceWriter writer(fname, CreateTableTensorSliceBuilder);",
          "443:   const int32 data[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};",
          "444:   TF_CHECK_OK(writer.Add(\"test\", TensorShape({4, 5}),",
          "445:                          TensorSlice::ParseOrDie(\"0,2:-\"), data));",
          "446:   TF_CHECK_OK(writer.Finish());",
          "448:   MutateSavedTensorSlices(fname, [](SavedTensorSlices sts) {",
          "449:     if (sts.has_meta()) {",
          "450:       for (auto& tensor : *sts.mutable_meta()->mutable_tensor()) {",
          "451:         tensor.mutable_slice(0)->mutable_extent(0)->set_length(-10);",
          "452:       }",
          "453:     }",
          "454:     return sts.SerializeAsString();",
          "455:   });",
          "457:   TensorSliceReader reader(fname, OpenTableTensorSliceReader);",
          "459:   EXPECT_FALSE(reader.status().ok());",
          "460: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}