{
  "cve_id": "CVE-2022-36752",
  "cve_desc": "png2webp v1.0.4 was discovered to contain an out-of-bounds write via the function w2p. This vulnerability is exploitable via a crafted png file.",
  "repo": "landfillbaby/png2webp",
  "patch_hash": "8f21ad79b0cd98fc22d5b49734543101946abbff",
  "patch_info": {
    "commit_hash": "8f21ad79b0cd98fc22d5b49734543101946abbff",
    "repo": "landfillbaby/png2webp",
    "commit_url": "https://github.com/landfillbaby/png2webp/commit/8f21ad79b0cd98fc22d5b49734543101946abbff",
    "files": [
      "png2webp.c"
    ],
    "message": "v1.0.5: fix buffer overrun when reading bad WebPs",
    "before_after_code_files": [
      "png2webp.c||png2webp.c"
    ]
  },
  "patch_diff": {
    "png2webp.c||png2webp.c": [
      "File: png2webp.c -> png2webp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: #include <errno.h>",
      "5: #include <inttypes.h>",
      "6: #include <limits.h>",
      "",
      "[Removed Lines]",
      "3: #define VERSION \"v1.0.4\"",
      "",
      "[Added Lines]",
      "3: #define VERSION \"v1.0.5\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "319:   }",
      "320:   size_t l = ((uint32_t)(i[4] | (i[5] << 8) | (i[6] << 16) | (i[7] << 24))) + 8;",
      "322:   x = malloc(l);",
      "323:   if(!x) {",
      "324:     PF(\"ERROR reading %s: %s\", IP, *k);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "322:   if(l <= 12",
      "323: #ifdef SSIZE_MAX",
      "324:     || l - 12 > SSIZE_MAX",
      "325: #endif",
      "326:   ) {",
      "327:     PF(\"ERROR reading %s: %s\", IP, k[2]);",
      "328:     goto w2p_close;",
      "329:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "02259cc178cbb83b64bc5cd438494ffe10fd3746",
      "candidate_info": {
        "commit_hash": "02259cc178cbb83b64bc5cd438494ffe10fd3746",
        "repo": "landfillbaby/png2webp",
        "commit_url": "https://github.com/landfillbaby/png2webp/commit/02259cc178cbb83b64bc5cd438494ffe10fd3746",
        "files": [
          ".gitignore",
          "README.md",
          "TODO.txt",
          "exestamp.c",
          "png2webp.c"
        ],
        "message": "v1.1.2: simpify help slightly; putc -> fputc\n\nexestamp error tweaks, fix .gitignore, todos",
        "before_after_code_files": [
          "exestamp.c||exestamp.c",
          "png2webp.c||png2webp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "png2webp.c||png2webp.c"
          ],
          "candidate": [
            "png2webp.c||png2webp.c"
          ]
        }
      },
      "candidate_diff": {
        "exestamp.c||exestamp.c": [
          "File: exestamp.c -> exestamp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #endif",
          "23: #define P(x) fputs(x \"\\n\", stderr)",
          "24: int main(int argc, char **argv) {",
          "27:     P(\"Usage: exestamp EXE STAMP\\nEXE: Windows PE32(+) file\\nSTAMP: \\",
          "28: Decimal, octal (leading 0), or hexadecimal (leading 0x) Unix timestamp\");",
          "29:     return -1;",
          "30:   }",
          "34:   FILE *f = fopen(argv[1], \"rb+\");",
          "35:   if(!f) {",
          "36:     P(\"Couldn't open file\");",
          "37:     return 1;",
          "38:   }",
          "39:   uint8_t b[4];",
          "42:     P(\"Invalid Windows PE32(+) file\");",
          "43:     fclose(f);",
          "44:     return 1;",
          "45:   }",
          "53:   fprintf(stderr, \"Original timestamp: %\" PRIu32 \"\\n\", B);",
          "58:     P(\"Couldn't write new timestamp\");",
          "59:     fclose(f);",
          "60:     return 1;",
          "",
          "[Removed Lines]",
          "25:   if(argc != 3 || *argv[2] < '0' || *argv[2] > '9') {",
          "26:   h:",
          "31:   char *n;",
          "32:   uint32_t t = (uint32_t)strtoll(argv[2], &n, 0);",
          "33:   if(*n || errno) goto h;",
          "40:   if(!fread(b, 2, 1, f)) {",
          "41:   e:",
          "46: #define B (uint32_t)(*b | (b[1] << 8) | (b[2] << 16) | (b[3] << 24))",
          "47:   if(memcmp(b, (char[2]){\"MZ\"}, 2) || F(f, 60, SEEK_SET) ||",
          "48:     !fread(b, 4, 1, f) || F(f, B, SEEK_SET) || !fread(b, 4, 1, f) ||",
          "49:     memcmp(b, \"PE\\0\", 4) || F(f, 4, SEEK_CUR))",
          "50:     goto e;",
          "51: #ifndef NO_PRINT_ORIG",
          "52:   if(!fread(b, 4, 1, f)) goto e;",
          "54:   if(F(f, -4, SEEK_CUR)) goto e;",
          "55: #endif",
          "56:   if(!fwrite((uint8_t[]){t & 255, (t >> 8) & 255, (t >> 16) & 255, t >> 24}, 4,",
          "57:        1, f)) {",
          "",
          "[Added Lines]",
          "25:   char *n;",
          "26:   uint32_t t;",
          "27:   if(argc != 3 || *argv[2] < '0' || *argv[2] > '9' ||",
          "28:     ((void)(t = (uint32_t)strtoll(argv[2], &n, 0)), *n) || errno) {",
          "39: #define B (uint32_t)(*b | (b[1] << 8) | (b[2] << 16) | (b[3] << 24))",
          "40:   if(!fread(b, 2, 1, f) || memcmp(b, (char[2]){\"MZ\"}, 2) ||",
          "41:     F(f, 60, SEEK_SET) || !fread(b, 4, 1, f) || F(f, B, SEEK_SET) ||",
          "42:     !fread(b, 4, 1, f) || memcmp(b, \"PE\\0\", 4) || F(f, 4, SEEK_CUR) ||",
          "43:     !fread(b, 4, 1, f)) {",
          "49:   if(F(f, -4, SEEK_CUR) ||",
          "50:     !fwrite((uint8_t[]){t & 255, (t >> 8) & 255, (t >> 16) & 255, t >> 24}, 4,",
          "51:       1, f)) {",
          "",
          "---------------"
        ],
        "png2webp.c||png2webp.c": [
          "File: png2webp.c -> png2webp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include <errno.h>",
          "5: #include <inttypes.h>",
          "6: #include <limits.h>",
          "",
          "[Removed Lines]",
          "3: #define VERSION \"v1.1.1\"",
          "",
          "[Added Lines]",
          "3: #define VERSION \"v1.1.2\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41: \\n\\",
          "42: Usage:\\n\\",
          "43: png2webp [-refv-] INFILE ...\\n\\",
          "45: \\n\\",
          "46: -p: Work with a single file, allowing piping from stdin or to stdout,\\n\\",
          "47:     or using a different output filename to the input.\\n\\",
          "",
          "[Removed Lines]",
          "44: png2webp -p[refv-] [{INFILE|-} [OUTFILE|-]]\\n\\",
          "",
          "[Added Lines]",
          "44: png2webp -p[refv-] [INFILE [OUTFILE]]\\n\\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "272:   WebPPicture o = {1, .width = (int)width, (int)height, .argb = b,",
          "273:     .argb_stride = (int)width, .writer = webpwrite, .custom_ptr = fp,",
          "274:     .stats = verbose ? &s : 0, .progress_hook = doprogress ? progress : 0};",
          "275:   trns = (trns || (colortype & PNG_COLOR_MASK_ALPHA)) &&",
          "276:     WebPPictureHasTransparency(&o);",
          "277:   int r = WebPEncode(&c, &o);",
          "279:   if(!r) {",
          "280:     P(\"ERROR writing: %s\", k[o.error_code - 1]);",
          "281:     fclose(fp);",
          "",
          "[Removed Lines]",
          "278:   if(doprogress) putc('\\n', stderr);",
          "",
          "[Added Lines]",
          "279:   if(doprogress) fputc('\\n', stderr);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "322531afb83f2488f77dd8a98c9946efd61fcdef",
      "candidate_info": {
        "commit_hash": "322531afb83f2488f77dd8a98c9946efd61fcdef",
        "repo": "landfillbaby/png2webp",
        "commit_url": "https://github.com/landfillbaby/png2webp/commit/322531afb83f2488f77dd8a98c9946efd61fcdef",
        "files": [
          "Makefile",
          "README.md",
          "png2webp.c",
          "png2webp.h",
          "webp2png.c"
        ],
        "message": "v0.8: better file extension handling\n\nplus some other tweaks and formatting",
        "before_after_code_files": [
          "png2webp.c||png2webp.c",
          "png2webp.h||png2webp.h",
          "webp2png.c||webp2png.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "png2webp.c||png2webp.c"
          ],
          "candidate": [
            "png2webp.c||png2webp.c"
          ]
        }
      },
      "candidate_diff": {
        "png2webp.c||png2webp.c": [
          "File: png2webp.c -> png2webp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include <webp/encode.h>",
          "4: #ifdef PAM",
          "5: #include <pam.h>",
          "23: #endif",
          "25: #define OUTEXT \"webp\"",
          "26: #define EXTRALETTERS \"e\"",
          "27: #define EXTRAHELP \"-e: Keep RGB data on pixels where alpha is 0.\\n\"",
          "28: #define EXTRAFLAGS case 'e': exact = 1; break;",
          "29: #include \"png2webp.h\"",
          "34: }",
          "36:   bool exact = 0;",
          "37:   GETARGS",
          "39: #ifdef PAM",
          "41:     struct pam i;",
          "42:     pnm_readpaminit(fp, &i, PAM_STRUCT_SIZE(opacity_plane));",
          "43:     E(i.visual, \"nonstandard tuple type: \\\"%s\\\"\", i.tuple_type);",
          "45: #else",
          "46: #ifdef USEADVANCEDPNG",
          "47: #error // TODO",
          "48: #else",
          "50: #define EP(f, s, d) \\",
          "56:     EP(png_image_begin_read_from_stdio(&i, fp), \"info\", 1);",
          "57:     if(i.format & PNG_FORMAT_FLAG_LINEAR)",
          "59:     bool A = !!(i.format & PNG_FORMAT_FLAG_ALPHA);",
          "61: #endif",
          "62: #endif",
          "64:     WebPAuxStats s;",
          "68:  \"out of RAM flushing bitstream\", \"something was null\", \"broken config\",",
          "73:  es[o.error_code - 1], o.error_code);",
          "74: #ifdef PAM",
          "81: #define A i.have_opacity",
          "82: #define D (i.depth > 2)",
          "88:     pnm_freepamrow(r);",
          "89: #else",
          "90: #ifdef USEADVANCEDPNG",
          "",
          "[Removed Lines]",
          "6: #define GETEXT \\",
          "7:   if((argv[0][len + 1] | 32) != 'p') { \\",
          "8:     len++; \\",
          "9:     continue; \\",
          "10:   } \\",
          "11:   switch(argv[0][len + 2] | 32) { \\",
          "12:     case 'b': \\",
          "13:     case 'g': \\",
          "14:     case 'p': \\",
          "15:     case 'n': \\",
          "16:     case 'a': break; \\",
          "17:     default: len += 2; goto endgetext; \\",
          "18:   } \\",
          "19:   if((argv[0][len + 3] | 32) != 'm') { \\",
          "20:     len += 3; \\",
          "21:     continue; \\",
          "22:   }",
          "24: #define INEXT Z",
          "30: static FILE *fp;",
          "31: static int w(const uint8_t *d, size_t s, const WebPPicture *x) {",
          "32:   (void)x;",
          "33:   return s ? (int)fwrite(d, s, 1, fp) : 1;",
          "35: int main(int argc, char **argv) {",
          "38:   while(1) {",
          "40:     pm_init(\"ERROR\", 0); // TODO: maybe *argv or (INEXT \"2\" OUTEXT) ?",
          "44:     tuple *r = pnm_allocpamrow(&i);",
          "49:     png_image i = {.version = 1};",
          "51:   E(f, \"reading PNG %s: %s\", s, i.message); \\",
          "52:   if(i.warning_or_error) { \\",
          "53:     PF(\"PNG info warning: %s\", i.message); \\",
          "54:     if(d) i.warning_or_error = 0; \\",
          "55:   }",
          "58:       P(\"Warning: input PNG is 16bpc, will be downsampled to 8bpc\");",
          "60:     i.format = (*(uint8_t *)&(uint16_t){1}) ? PNG_FORMAT_BGRA : PNG_FORMAT_ARGB;",
          "63:     WebPPicture o = {1, .width = i.width, i.height, .writer = w};",
          "65:     if(verbose) { o.stats = &s; }",
          "67:     char *es[VP8_ENC_ERROR_LAST - 1] = {\"out of RAM\",",
          "69:  \"image too big (max. 16383x16383 px)\", \"partition >512KiB\",",
          "70:  \"partition >16MiB\", \"couldn't write\", \"output >4GiB\",",
          "71:  \"you cancelled it\"};",
          "72:     E(WebPPictureAlloc(&o), \"%sing WebP: %s (%d)\", \"allocat\",",
          "75:     if(255 % i.maxval) {",
          "76:       PF(\"Warning: scaling from maxval %lu to 255\", i.maxval);",
          "77:     }",
          "78:     for(uint32_t y = 0; y < (uint32_t)i.height; y++) {",
          "79:       pnm_readpamrow(&i, r);",
          "80:       pnm_scaletuplerow(&i, r, r, 255);",
          "83:       for(uint32_t x = 0; x < (uint32_t)i.width; x++) {",
          "84:  o.argb[y * i.width + x] = ((A ? r[x][i.opacity_plane] : 255) << 24) |",
          "85:      (r[x][0] << 16) | (r[x][D ? 1 : 0] << 8) | r[x][D ? 2 : 0];",
          "87:     } }",
          "",
          "[Added Lines]",
          "6: #define INEXT \"pam\"",
          "7: #define X(x) ((argv[0][len - 2] | 32) == x)",
          "8: #define ISINEXT (len > 3 && EXTMASK(0, \"\\0 \\xff \", \".p\\xffm\") && \\",
          "9:  (X('b') || X('g') || X('p') || X('n') || X('a')))",
          "10: #else",
          "11: #include <png.h>",
          "12: #define INEXT \"png\"",
          "13: #define ISINEXT ISPNG(0)",
          "16: #define ISOUTEXT ISWEBP(1)",
          "21: static FILE* fp;",
          "22: static int w(const uint8_t* d, size_t s, const WebPPicture* x) {",
          "23:  (void)x;",
          "24:  return s ? (int)fwrite(d, s, 1, fp) : 1;",
          "26: int main(int argc, char** argv) {",
          "27: #if !defined(PAM) && !defined(USEADVANCEDPNG)",
          "28: #define X U(\"\\xAA\\xBB\\xCC\\xDD\")",
          "29:   E(X == 0xAABBCCDD || X == 0xDDCCBBAA,",
          "30:  \"32-bit mixed-endianness (%X) not supported\", X);",
          "31: #endif",
          "32: #ifdef PAM",
          "33:   pm_init(\"ERROR\", 0); // TODO: maybe *argv or (INEXT \"2\" OUTEXT) ?",
          "34: #endif",
          "37:   for(;;) {",
          "42:     E((unsigned)i.width < 16384 && (unsigned)i.height < 16384,",
          "43:  \"image too big (%ux%u, max. 16383x16383 px)\", i.width, i.height);",
          "44:     if(255 % i.maxval) PF(\"Warning: scaling from maxval %lu to 255\", i.maxval);",
          "45:     tuple* r = pnm_allocpamrow(&i);",
          "50:     png_image i = {.version = PNG_IMAGE_VERSION}; // TODO: memset?",
          "52:  E(f, \"reading PNG %s: %s\", s, i.message); \\",
          "53:  if(i.warning_or_error) { \\",
          "54:   PF(\"PNG %s warning: %s\", s, i.message); \\",
          "55:   if(d) i.warning_or_error = 0; \\",
          "56:  }",
          "58:     E(i.width < 16384 && i.height < 16384,",
          "59:  \"image too big (%ux%u, max. 16383x16383 px)\", i.width, i.height);",
          "61:  P(\"Warning: input PNG is 16bpc, will be downsampled to 8bpc\");",
          "63:     i.format = (*(uint8_t*)&(uint16_t){1}) ? PNG_FORMAT_BGRA : PNG_FORMAT_ARGB;",
          "66: #define W ((uint16_t)i.width)",
          "67: #define H ((uint16_t)i.height)",
          "68:     WebPPicture o = {1, .width = W, H, .writer = w};",
          "71:     if(verbose) o.stats = &s;",
          "73:     char* es[VP8_ENC_ERROR_LAST - 1] = {\"out of RAM\",",
          "76:  \"partition >16MiB\", \"couldn't write\", \"output >4GiB\", \"cancelled\"};",
          "77:     E(WebPPictureAlloc(&o), \"%sing WebP: %s (%u)\", \"allocat\",",
          "80:     for(unsigned y = 0; y < H; y++) {",
          "81:  pnm_readpamrow(&i, r);",
          "82:  pnm_scaletuplerow(&i, r, r, 255);",
          "85:  for(unsigned x = 0; x < W; x++)",
          "86:   o.argb[y * W + x] = ((A ? r[x][i.opacity_plane] : 255) << 24) |",
          "87:    (r[x][0] << 16) | (r[x][D] << 8) | r[x][D * 2];",
          "89:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96: #ifdef NOTHREADS",
          "97: #define THREADLEVEL",
          "98: #else",
          "100: #endif",
          "101:     GETOUTFILE",
          "114: #define F s.lossless_features",
          "115: #define C s.palette_size",
          "121:  \"Precision bits: histogram=%u transform=%u cache=%u\\n\"",
          "124:  o.width, o.height, s.coded_size,",
          "126:  s.lossless_hdr_size, s.lossless_data_size,",
          "127:  A && WebPPictureHasTransparency(&o) ? \"yes\" : \"no\",",
          "128:  s.histogram_bits, s.transform_bits, s.cache_bits,",
          "129:  F ? F & 1 ? \" prediction\" : \"\" : \" none\",",
          "134:     WebPPictureFree(&o);",
          "135:     GETINFILE",
          "136: } }",
          "",
          "[Removed Lines]",
          "99: #define THREADLEVEL .thread_level = 1, // doesn't seem to affect output",
          "102:     ED(WebPEncode(",
          "103:     &(WebPConfig){",
          "104:         1, 100, 6, // lossless, max",
          "105:         WEBP_HINT_GRAPH, /* see vp8l_enc.c#L1841",
          "107:         THREADLEVEL",
          "108:         .near_lossless = 100, // don't modify visible pixels",
          "109:         .exact = exact, // see EXTRAHELP",
          "110:         .pass = 1, .segments = 1 // unused, for WebPValidateConfig",
          "111:     },",
          "112:     &o),",
          "113:  \"%sing WebP: %s (%d)\", \"encod\", es[o.error_code - 1], o.error_code);",
          "116:     PFV(\"Output WebP info:\\n\"",
          "117:  \"Dimensions: %u x %u\\n\"",
          "118:  \"Size: %u bytes (%.17g bpp)\\n\"",
          "119:  \"Header size: %u, image data size: %u\\n\"",
          "120:  \"Uses alpha: %s\\n\"",
          "122:  \"Lossless features:%s%s%s%s\\n\"",
          "123:  \"Colors: %s%u\",",
          "125:  (s.coded_size * 8.) / ((uint32_t)o.width * (uint32_t)o.height),",
          "130:  F && F & 2 ? \" cross-color\" : \"\",",
          "131:  F && F & 4 ? \" subtract-green\" : \"\",",
          "132:  F && F & 8 ? \" palette\" : \"\",",
          "133:  C ? \"\" : \">\", C ? C : 256);",
          "",
          "[Added Lines]",
          "101: #define THREADLEVEL .thread_level = 1,",
          "104:     E(WebPEncode(",
          "105:  &(WebPConfig){ // TODO: memset? WebpConfigInit?",
          "106:   1, 100, 6, // lossless, max",
          "107:   WEBP_HINT_GRAPH, /* see VP8LEncodeImage source",
          "109:   THREADLEVEL // doesn't seem to affect output",
          "110:   .near_lossless = 100, // don't modify visible pixels",
          "111:   .exact = exact, // see EXTRAHELP",
          "112:   .pass = 1, .segments = 1 // unused, for WebPValidateConfig",
          "113:  }, &o),",
          "114:  \"%sing WebP: %s (%u)\", \"encod\", es[o.error_code - 1], o.error_code);",
          "117:     PFV(\"Output WebP info:\\nDimensions: %u x %u\\nSize: %u bytes (%.17g bpp)\\n\"",
          "118:  \"Header size: %u, image data size: %u\\nUses alpha: %s\\n\"",
          "120:  \"Lossless features:%s%s%s%s\\nColors: %s%u\",",
          "122:  8. * (unsigned)s.coded_size / (uint32_t)(o.width * o.height),",
          "127:  F && F & 2 ? \" cross-color\" : \"\", F && F & 4 ? \" subtract-green\" : \"\",",
          "128:  F && F & 8 ? \" palette\" : \"\", C ? \"\" : \">\", C ? C : 256);",
          "",
          "---------------"
        ],
        "png2webp.h||png2webp.h": [
          "File: png2webp.h -> png2webp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include <errno.h>",
          "11: #include <stdbool.h>",
          "12: #include <stdio.h>",
          "",
          "[Removed Lines]",
          "3: #define VERSION \"v0.7\"",
          "4: #ifdef PAM",
          "5: #define Z \"pam\"",
          "6: #else",
          "7: #include <png.h>",
          "8: #define Z \"png\"",
          "9: #endif",
          "",
          "[Added Lines]",
          "3: #define VERSION \"v0.8\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16: #include <fcntl.h>",
          "17: #include <io.h>",
          "18: #define O(x) _##x",
          "21: #else",
          "22: #include <unistd.h>",
          "23: #define _setmode(x, y) 0",
          "24: #define _O_BINARY 0",
          "25: #define O(x) x",
          "26: #endif",
          "27: #define P(x) fputs(x \"\\n\", stderr)",
          "28: #define PF(x, ...) fprintf(stderr, x \"\\n\", __VA_ARGS__)",
          "29: #define PV(x) if(verbose) P(x);",
          "44: #ifndef EXTRAHELP",
          "45: #define EXTRALETTERS",
          "46: #define EXTRAHELP",
          "47: #define EXTRAFLAGS",
          "48: #endif",
          "49: #define EO(x) E(x, \"opening \\\"%s\\\" for %s: %s\", outname, \\",
          "51: #if __STDC_VERSION__ < 201112L || defined(NOFOPENX)",
          "52: #include <fcntl.h>",
          "53: #include <sys/stat.h>",
          "54: #define OPENW \\",
          "61: #else",
          "62: #define OPENW EO(fp = fopen(outname, force ? \"wb\" : \"wbx\"));",
          "63: #endif",
          "64: #define HELP \\",
          "71:     \"    Constructs output filenames by removing the .\" INEXT \\",
          "74:     \"-p: Work with a single file, allowing Piping from stdin or to stdout,\\n\" \\",
          "77:     \" default to stdin and stdout respectively,\\n\" \\",
          "80:     EXTRAHELP \\",
          "81:     \"-f: Force overwrite of output files (has no effect on stdout).\\n\" \\",
          "84:     \"Without -b or -p, and with 1 or 2 filenames, there is some ambiguity.\\n\" \\",
          "85:     \"In this case it will tell you what its guess is.\"); \\",
          "86:   return -1;",
          "87: #define FLAGLIST \\",
          "88:   case 'p': usepipe = 1; /* fall through */ \\",
          "89:   case 'b': \\",
          "93:   EXTRAFLAGS \\",
          "94:   case 'f': force = 1; break; \\",
          "95:   case 'v': verbose = 1; break;",
          "",
          "[Removed Lines]",
          "19: #define S_IRUSR _S_IREAD",
          "20: #define S_IWUSR _S_IWRITE",
          "30: #define PFV(x, ...) if(verbose) PF(x, __VA_ARGS__);",
          "31: #define E(f, s, ...) \\",
          "32:   if(!(f)) { \\",
          "33:     PF(\"ERROR \" s, __VA_ARGS__); \\",
          "34:     return 1; \\",
          "35:   }",
          "36: #define Q(x) \\",
          "37:   if(outnamealloced) free(outname); \\",
          "38:   return x",
          "39: #define ED(f, s, ...) \\",
          "40:   if(!(f)) { \\",
          "41:     PF(\"ERROR \" s, __VA_ARGS__); \\",
          "42:     Q(1); \\",
          "43:   }",
          "50:     force ? \"writing\" : \"creation\", strerror(errno));",
          "55:   int fd = O(open)(outname, \\",
          "56:       O(O_WRONLY) | O(O_CREAT) | _O_BINARY | O(O_TRUNC) | \\",
          "57:    (force ? 0 : O(O_EXCL)), \\",
          "58:       S_IRUSR | S_IWUSR); \\",
          "59:   EO(fd != -1); \\",
          "60:   EO(fp = O(fdopen)(fd, \"wb\"));",
          "65:   P(INEXT \"2\" OUTEXT \" \" VERSION \", by Lucy Phipps\\n\\n\" \\",
          "66:     \"Usage:\\n\" \\",
          "67:     INEXT \"2\" OUTEXT \" [-b\" EXTRALETTERS \"fv-] infile.\" INEXT \" ...\\n\" \\",
          "68:     INEXT \"2\" OUTEXT \" [-p\" EXTRALETTERS \"fv-] [{infile.\" INEXT \\",
          "69:     \"|-} [outfile.\" OUTEXT \"|-]]\\n\\n\" \\",
          "70:     \"-b: Work with many input files (Batch mode).\\n\" \\",
          "72:     \" extension if possible,\\n\" \\",
          "73:     \"    and appending \\\".\" OUTEXT \"\\\".\\n\" \\",
          "75:     \"    or using a different output filename to the input.\\n\" \\",
          "76:     \"    infile.\" INEXT \" and outfile.\" OUTEXT \\",
          "78:     \"    or explicitly as \\\"-\\\".\" \\",
          "79:     \" Will error if stdin/stdout is used and is a terminal.\\n\" \\",
          "82:     \"-v: Be verbose.\\n\" \\",
          "83:     \"--: Explicitly stop parsing options.\\n\\n\" \\",
          "90:     if(chosen) { HELP } \\",
          "91:     chosen = 1; \\",
          "92:     break; \\",
          "",
          "[Added Lines]",
          "13: #define M _S_IREAD | _S_IWRITE",
          "19: #define M 0666",
          "21: typedef union {",
          "22:  uint8_t x[4];",
          "23:  uint32_t y;",
          "24: } c32;",
          "25: #define U(...) ((c32){{__VA_ARGS__}}.y)",
          "26: #define EXTMASK(x, y, z) ((U(argv[x][len - 4], argv[x][len - 3], \\",
          "27:  argv[x][len - 2], argv[x][len - 1]) | U(y)) == U(z))",
          "28: #define ISPNG(x) (len > 3 && EXTMASK(x, \"\\0   \", \".png\"))",
          "29: #define ISWEBP(x) \\",
          "30:  (len > 4 && argv[x][len - 5] == '.' && EXTMASK(x, \"    \", \"webp\"))",
          "34: #define PFV(...) if(verbose) PF(__VA_ARGS__);",
          "35: #define E(f, ...) \\",
          "36:  if(!(f)) { \\",
          "37:   PF(\"ERROR \" __VA_ARGS__); \\",
          "38:   return 1; \\",
          "39:  }",
          "46:  force ? \"writing\" : \"creation\", strerror(errno))",
          "51:  int fd = O(open)(outname, O(O_WRONLY) | O(O_CREAT) | _O_BINARY | \\",
          "52:   O(O_TRUNC) | (!force * O(O_EXCL)), M); \\",
          "53:  EO(fd != -1 && (fp = O(fdopen)(fd, \"wb\")));",
          "58:   P(INEXT \"2\" OUTEXT \" \" VERSION \"\\n\\nUsage:\\n\" INEXT \"2\" OUTEXT \\",
          "59:     \" [-b\" EXTRALETTERS \"fv-] infile.\" INEXT \" ...\\n\" INEXT \"2\" OUTEXT \\",
          "60:     \" [-p\" EXTRALETTERS \"fv-] [{infile.\" INEXT \"|-} [outfile.\" OUTEXT \\",
          "61:     \"|-]]\\n\\n-b: Work with many input files (Batch mode).\\n\" \\",
          "63:     \" extension if possible,\\n    and appending \\\".\" OUTEXT \"\\\".\\n\" \\",
          "65:     \"    or using a different output filename to the input.\\n    infile.\" \\",
          "66:     INEXT \" and outfile.\" OUTEXT \\",
          "68:     \"    or explicitly as \\\"-\\\".\\n\" \\",
          "69:     \"    Will show this message if stdin/stdout is used and is a terminal.\\n\" \\",
          "72:     \"-v: Be verbose.\\n--: Explicitly stop parsing options.\\n\\n\" \\",
          "79:  if(chosen) { HELP } \\",
          "80:  chosen = 1; \\",
          "81:  break; \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97: #define FLAGLOOP \\",
          "98:   int c; \\",
          "99:   while((c = getopt(argc, argv, \":bp\" EXTRALETTERS \"fv\")) != -1) switch(c) { \\",
          "103:   argc -= optind; \\",
          "104:   argv += optind;",
          "105: #else",
          "",
          "[Removed Lines]",
          "100:       FLAGLIST \\",
          "101:       default: HELP \\",
          "102:     } \\",
          "",
          "[Added Lines]",
          "89:  FLAGLIST \\",
          "90:  default: HELP \\",
          "91:   } \\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "109:  FLAGLIST \\",
          "110:  case '-': \\",
          "111:    if(!argv[0][1]) { \\",
          "116:  default: HELP \\",
          "118:   endflagloop:",
          "119: #endif",
          "120: #define OPENR(x) \\",
          "126: #define PIPEARG(x) (*argv[x] == '-' && !argv[x][1])",
          "127: #define PIPECHK(x, y) \\",
          "128:   if(use##y) { \\",
          "131:   }",
          "132: #define URGC (unsigned)argc",
          "133: #define GETARGS \\",
          "134:   bool usepipe = 0, usestdin = 0, usestdout = 0, force = 0, verbose = 0, \\",
          "137:   FLAGLOOP \\",
          "139:   if(usepipe) { \\",
          "140:     usestdin = !argc || PIPEARG(0); \\",
          "141:     usestdout = URGC < 2 || PIPEARG(1); \\",
          "142:   } else if(!chosen && URGC < 3) { \\",
          "143:     usestdin = !argc || PIPEARG(0); \\",
          "169:  } \\",
          "171:   } } \\",
          "172:   PIPECHK(0, stdin); \\",
          "173:   PIPECHK(1, stdout); \\",
          "174:   OPENR(usestdin);",
          "175: #define EC(x) E(!fclose(fp), \"closing %s: %s\", x, strerror(errno))",
          "184: #define GETOUTFILE \\",
          "185:   EC(usestdin ? \"stdin\" : *argv); \\",
          "186:   if(usestdout) { \\",
          "189:   } else { \\",
          "190:     if(usepipe) outname = argv[1]; \\",
          "191:     else { \\",
          "211:     } \\",
          "212:     PFV(\"%scoding %s ...\", \"En\", outname); \\",
          "213:     OPENW \\",
          "214:   }",
          "215: #define GETINFILE \\",
          "",
          "[Removed Lines]",
          "112:      argc--; \\",
          "113:      argv++; \\",
          "114:      goto endflagloop; /* break nested or fall through */ \\",
          "115:    } \\",
          "117:       } \\",
          "121:   PFV(\"%scoding %s ...\", \"De\", x ? \"stdin\" : *argv); \\",
          "122:   if(x) fp = stdin; \\",
          "123:   else \\",
          "124:     E(fp = fopen(*argv, \"rb\"), \"opening \\\"%s\\\" for %s: %s\", *argv, \"reading\", \\",
          "125:  strerror(errno));",
          "129:     E((x && skipstdoutchk) || !O(isatty)(x), \"%s is a terminal\", #y); \\",
          "130:     E(_setmode(x, _O_BINARY) != -1, \"setting %s to binary mode\", #y); \\",
          "135:        chosen = 0, outnamealloced = 0, skipstdoutchk = 0; \\",
          "136:   char *outname; \\",
          "138:   if(chosen && ((usepipe && URGC > 2) || (!usepipe && !argc))) { HELP } \\",
          "144:     usestdout = (usestdin && URGC < 2) || (argc == 2 && PIPEARG(1)); \\",
          "145:     usepipe = usestdin || usestdout; \\",
          "146:     if(!usepipe) { \\",
          "147:       PF(\"Warning: %d file%s given and neither -b or -p specified.\", argc, \\",
          "148:    argc == 1 ? \"\" : \"s\"); \\",
          "149:       if(argc == 1) { \\",
          "150:  if(!O(isatty)(1)) usepipe = usestdout = skipstdoutchk = 1; \\",
          "151:       } else /* argc == 2: -p if argv[1] ends in \".\" OUTEXT */ \\",
          "152:  for(size_t len = 0; argv[1][len];) { \\",
          "153:    if(argv[1][len] != '.') { \\",
          "154:      len++; \\",
          "155:      continue; \\",
          "156:    } \\",
          "157:    for(size_t extlen = 0; extlen < sizeof(OUTEXT) - 1; extlen++) \\",
          "158:      if((argv[1][len + extlen + 1] | 32) != OUTEXT[extlen]) { \\",
          "159:        len += extlen + 1; \\",
          "160:        goto endtestext; \\",
          "161:      } \\",
          "162:    if(argv[1][len + sizeof(OUTEXT)]) { \\",
          "163:      len += sizeof(OUTEXT); \\",
          "164:      continue; \\",
          "165:    } \\",
          "166:    usepipe = 1; \\",
          "167:    break; \\",
          "168:  endtestext:; \\",
          "170:       PF(\"Guessed -%c.\", usepipe ? 'p' : 'b'); \\",
          "176: #ifndef GETEXT",
          "177: #define GETEXT \\",
          "178:   for(size_t extlen = 0; extlen < sizeof(INEXT) - 1; extlen++) \\",
          "179:     if((argv[0][len + extlen + 1] | 32) != INEXT[extlen]) { \\",
          "180:       len += extlen + 1; \\",
          "181:       goto endgetext; \\",
          "182:     }",
          "183: #endif",
          "187:     PFV(\"%scoding %s ...\", \"En\", \"stdout\"); \\",
          "188:     fp = stdout; \\",
          "192:       size_t len = 0; \\",
          "193:       while(argv[0][len]) { \\",
          "194:  if(argv[0][len] != '.') { \\",
          "195:    len++; \\",
          "196:    continue; \\",
          "197:  } \\",
          "198:  GETEXT \\",
          "199:  if(argv[0][len + sizeof(INEXT)]) { \\",
          "200:    len += sizeof(INEXT); \\",
          "201:    continue; \\",
          "202:  } \\",
          "203:  break; \\",
          "204:       endgetext:; \\",
          "205:       } \\",
          "206:       outname = malloc(len + sizeof(\".\" OUTEXT)); \\",
          "207:       E(outname, \"adding .\" OUTEXT \" extension to %s: out of RAM\", *argv); \\",
          "208:       outnamealloced = 1; \\",
          "209:       memcpy(outname, *argv, len); \\",
          "210:       memcpy(outname + len, \".\" OUTEXT, sizeof(\".\" OUTEXT)); \\",
          "216:   EC(usestdout ? \"stdout\" : outname); \\",
          "217:   if(outnamealloced) { \\",
          "218:     free(outname); \\",
          "219:     outnamealloced = 0; \\",
          "220:   } \\",
          "221:   if(usepipe || !--argc) return 0; \\",
          "222:   argv++; \\",
          "223:   OPENR(0);",
          "",
          "[Added Lines]",
          "101:   argc--; \\",
          "102:   argv++; \\",
          "103:   goto endflagloop; \\",
          "104:    } /* fall through */ \\",
          "106:     } \\",
          "110:  PFV(\"%scoding %s ...\", \"De\", x ? \"stdin\" : *argv); \\",
          "111:  if(x) fp = stdin; \\",
          "112:  else E(fp = fopen(*argv, \"rb\"), \"opening \\\"%s\\\" for %s: %s\", *argv, \\",
          "113:   \"reading\", strerror(errno));",
          "117:  if(!(x && skipstdoutchk) && O(isatty)(x)) { HELP } \\",
          "118:  E(_setmode(x, _O_BINARY) != -1, \"setting %s to binary mode\", #y); \\",
          "123:  chosen = 0, outnamealloced = 0, skipstdoutchk = 0; \\",
          "124:   char* outname; \\",
          "126:   if(chosen && (usepipe ? URGC > 2 : !argc)) { HELP } \\",
          "132:     usestdout = (argc == 2 ? PIPEARG(1) : usestdin); \\",
          "133:     if(!(usepipe = usestdin || usestdout)) { \\",
          "134:  PF(\"Warning: %d file%s given and neither -b or -p specified.\", argc, \\",
          "135:   argc == 1 ? \"\" : \"s\"); \\",
          "136:  if(argc == 1) { \\",
          "137:   if(!O(isatty)(1)) usepipe = usestdout = skipstdoutchk = 1; \\",
          "138:  } else { \\",
          "139:   size_t len = strlen(argv[1]); \\",
          "140:   usepipe = ISOUTEXT; \\",
          "142:  PF(\"Guessed -%c.\", usepipe ? 'p' : 'b'); \\",
          "151:  PFV(\"%scoding %s ...\", \"En\", \"stdout\"); \\",
          "152:  fp = stdout; \\",
          "156:  size_t len = strlen(*argv); \\",
          "157:  if(ISINEXT) len -= sizeof(INEXT); \\",
          "158:  outname = malloc(len + sizeof(\".\" OUTEXT)); \\",
          "159:  E(outname, \"adding .\" OUTEXT \" extension to %s: out of RAM\", *argv); \\",
          "160:  outnamealloced = 1; \\",
          "161:  memcpy(outname, *argv, len); \\",
          "162:  memcpy(outname + len, \".\" OUTEXT, sizeof(\".\" OUTEXT)); \\",
          "168:  EC(usestdout ? \"stdout\" : outname); \\",
          "169:  if(usepipe || !--argc) return 0; \\",
          "170:  if(outnamealloced) { \\",
          "171:   free(outname); \\",
          "172:   outnamealloced = 0; \\",
          "173:  } \\",
          "174:  argv++; \\",
          "175:  OPENR(0);",
          "",
          "---------------"
        ],
        "webp2png.c||webp2png.c": [
          "File: webp2png.c -> webp2png.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: TODO: Try to compress somewhat better",
          "6: Ideally should palette if <=256 colors (in order of appearance),",
          "7: or at least try to palette when input WebP was,",
          "",
          "[Removed Lines]",
          "3: #include <webp/decode.h>",
          "",
          "[Added Lines]",
          "2: vi: sw=2 tw=80",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9: Maybe do this:",
          "10: #include <webp/encode.h> // for WebPPicture",
          "11: WEBP_EXTERN int WebPGetColorPalette( // declared in libwebp utils/utils.h",
          "14: #define INEXT \"webp\"",
          "16: #include \"webp2png.h\"",
          "19:   GETARGS",
          "22: #ifdef NOTHREADS",
          "23:  0",
          "24: #else",
          "",
          "[Removed Lines]",
          "12: const struct WebPPicture *const, uint32_t *const);",
          "15: #define OUTEXT Z",
          "17: int main(int argc, char **argv) {",
          "18:   FILE *fp;",
          "20:   while(1) {",
          "21:     WebPDecoderConfig c = {",
          "",
          "[Added Lines]",
          "11: #include <webp/decode.h>",
          "13: #define ISINEXT ISWEBP(0)",
          "14: #ifdef PAM",
          "15: #define OUTEXT \"pam\"",
          "16: #define ISOUTEXT (len > 3 && EXTMASK(1, \"\\0   \", \".pam\"))",
          "17: #else",
          "18: #include <png.h>",
          "19: #define OUTEXT \"png\"",
          "20: #define ISOUTEXT ISPNG(1)",
          "21: #endif",
          "23: int main(int argc, char** argv) {",
          "24:   FILE* fp;",
          "26:   for(;;) {",
          "27:     WebPDecoderConfig c = { // TODO: memset? WebPInitDecoderConfig?",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "30: #endif",
          "31:     uint8_t i[IDEC_BUFSIZE];",
          "32:     size_t l = fread(i, 1, IDEC_BUFSIZE, fp);",
          "36: #define F c.input",
          "37: #define A F.has_alpha",
          "41: #define V F.format",
          "42: #define W F.width",
          "43: #define H F.height",
          "49: #ifdef LOSSYISERROR",
          "55: #endif",
          "57:     if(A) c.output.colorspace = MODE_RGBA;",
          "59:     E(d, \"initializing WebP decoder: 1 (%s)\", k[0]);",
          "60:     for(size_t x = l; (r = WebPIAppend(d, i, x)); l += x) {",
          "64:     }",
          "65:     WebPIDelete(d);",
          "68:     GETOUTFILE",
          "69: #define D c.output.u.RGBA",
          "70: #ifdef PAM",
          "80:     fwrite(D.rgba, D.size, 1, fp);",
          "81: #else",
          "83:     png_structp png_ptr =",
          "84:  png_create_write_struct(PNG_LIBPNG_VER_STRING, 0, 0, 0);",
          "86:     png_infop info_ptr = png_create_info_struct(png_ptr);",
          "88: #ifdef PNG_SETJMP_SUPPORTED",
          "91: #endif",
          "92:     png_init_io(png_ptr, fp);",
          "93:     png_set_filter(png_ptr, 0, PNG_ALL_FILTERS);",
          "",
          "[Removed Lines]",
          "33:     char *k[] = {\"out of RAM\", \"invalid params\", \"bitstream broke\",",
          "34:  \"unsupported feature\", \"suspended\", \"you cancelled it\",",
          "35:  \"not enough data\"};",
          "38:     int r = WebPGetFeatures(i, l, &F);",
          "39:     E(!r, \"reading WebP header: %d (%s)\", r, r & ~7 ? \"???\" : k[r - 1]);",
          "40:     char *formats[] = {\"undefined/mixed\", \"lossy\", \"lossless\"};",
          "44:     PFV(\"Input WebP info:\\n\"",
          "45:  \"Dimensions: %u x %u\\n\"",
          "46:  \"Uses alpha: %s\\n\"",
          "47:  \"Format: %s (%d)\",",
          "48:  W, H, A ? \"yes\" : \"no\", (unsigned)V < 3 ? formats[V] : \"???\", V);",
          "50:     E(V == 2,",
          "51:  \"reading WebP header: 4 (%s:\\n\"",
          "52:  \"                              compression is %s (%d),\\n\"",
          "53:  \"                              instead of lossless (2))\",",
          "54:  k[3], (unsigned)V < 3 ? formats[V] : \"???\", V);",
          "56:     E(!F.has_animation, \"reading WebP header: 4 (%s: animation)\", k[3]);",
          "58:     WebPIDecoder *d = WebPIDecode(i, l, &c);",
          "61:       E(r == 5 && !feof(fp), \"reading WebP data: %d (%s)\", r == 5 ? 7 : r,",
          "62:    r == 5 ? k[6] : (r & ~7 ? \"???\" : k[r - 1]));",
          "63:       x = fread(i, 1, IDEC_BUFSIZE, fp);",
          "66:     PFV(\"Size: %zu bytes (%.17g bpp)\", l,",
          "67:  (l * 8.) / ((uint32_t)W * (uint32_t)H));",
          "71:     fprintf(fp,",
          "72:  \"P7\\n\"",
          "73:  \"WIDTH %u\\n\"",
          "74:  \"HEIGHT %u\\n\"",
          "75:  \"DEPTH %c\\n\"",
          "76:  \"MAXVAL 255\\n\"",
          "77:  \"TUPLTYPE RGB%s\\n\"",
          "78:  \"ENDHDR\\n\",",
          "79:  W, H, A ? '4' : '3', A ? \"_ALPHA\" : \"\");",
          "85:     ED(png_ptr, \"writing PNG: %s\", k[0]);",
          "87:     ED(info_ptr, \"writing PNG: %s\", k[0]);",
          "90:     if(setjmp(png_jmpbuf(png_ptr))) { Q(1); }",
          "",
          "[Added Lines]",
          "39:     char* k[] = {\"out of RAM\", \"invalid params\", \"bitstream broke\",",
          "40:  \"unsupported feature\", \"suspended\", \"cancelled\", \"not enough data\"};",
          "43:     VP8StatusCode r = WebPGetFeatures(i, l, &F);",
          "44:     E(!r, \"reading WebP header: %u (%s)\", r, r < 8 ? k[r - 1] : \"???\");",
          "45: #ifdef LOSSYISERROR",
          "46: #define FORMATSTR",
          "47: #define GETFORMAT",
          "48: #define ANIMARGS \"%sion)\", k[3], \"animat\"",
          "49: #else",
          "50:     char* formats[] = {\"undefined/mixed\", \"lossy\", \"lossless\"};",
          "51: #define FORMATSTR \"\\nFormat: %s (%d)\"",
          "52: #define GETFORMAT , (unsigned)V < 3 ? formats[V] : \"???\", V",
          "53: #define ANIMARGS \"animation)\", k[3]",
          "54: #endif",
          "58:     PFV(\"Input WebP info:\\nDimensions: %u x %u\\nUses alpha: %s\" FORMATSTR,",
          "59:  W, H, A ? \"yes\" : \"no\" GETFORMAT);",
          "60:     E(!F.has_animation, \"reading WebP header: 4 (%s: \" ANIMARGS);",
          "62:     E(V == 2, \"reading WebP header: 4 (%s: %sion)\", k[3], \"lossy compress\");",
          "65:     WebPIDecoder* d = WebPIDecode(i, l, &c);",
          "68:  E(r == 5 && !feof(fp), \"reading WebP data: %d (%s)\", r == 5 ? 7 : r,",
          "69:   r == 5 ? k[6] : (r < 8 ? k[r - 1] : \"???\"));",
          "70:  x = fread(i, 1, IDEC_BUFSIZE, fp);",
          "73:     PFV(\"Size: %zu bytes (%.17g bpp)\", l, 8. * l / (uint32_t)(W * H));",
          "77:     fprintf(fp, \"P7\\nWIDTH %u\\nHEIGHT %u\\nDEPTH %c\\nMAXVAL 255\\n\"",
          "78:  \"TUPLTYPE RGB%s\\nENDHDR\\n\", W, H, A ? '4' : '3', A ? \"_ALPHA\" : \"\");",
          "84:     E(png_ptr, \"writing PNG: %s\", k[0]);",
          "86:     E(info_ptr, \"writing PNG: %s\", k[0]);",
          "89:     if(setjmp(png_jmpbuf(png_ptr))) return 1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "99:     png_write_info(png_ptr, info_ptr);",
          "100:     png_bytep px = D.rgba;",
          "101:     for(uint32_t y = 0; y < (uint32_t)H; y++) {",
          "104:     }",
          "105:     png_write_end(png_ptr, info_ptr);",
          "106:     png_destroy_write_struct(&png_ptr, &info_ptr);",
          "",
          "[Removed Lines]",
          "102:       png_write_rows(png_ptr, &px, 1);",
          "103:       px += D.stride;",
          "",
          "[Added Lines]",
          "101:  png_write_row(png_ptr, px);",
          "102:  px += D.stride;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b6b9d7a7d87ad3b877f59ede52a88318b84ea0a9",
      "candidate_info": {
        "commit_hash": "b6b9d7a7d87ad3b877f59ede52a88318b84ea0a9",
        "repo": "landfillbaby/png2webp",
        "commit_url": "https://github.com/landfillbaby/png2webp/commit/b6b9d7a7d87ad3b877f59ede52a88318b84ea0a9",
        "files": [
          "png2webp.c"
        ],
        "message": "v1.1.9",
        "before_after_code_files": [
          "png2webp.c||png2webp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "png2webp.c||png2webp.c"
          ],
          "candidate": [
            "png2webp.c||png2webp.c"
          ]
        }
      },
      "candidate_diff": {
        "png2webp.c||png2webp.c": [
          "File: png2webp.c -> png2webp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include \"p2wconf.h\"",
          "5: #endif",
          "6: #ifndef VERSION",
          "8: #endif",
          "9: #define _FILE_OFFSET_BITS 64",
          "10: #include <inttypes.h>",
          "",
          "[Removed Lines]",
          "7: #define VERSION \"v1.1.8\"",
          "",
          "[Added Lines]",
          "7: #define VERSION \"v1.1.9\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "30867b5b782f8b1fc1addfa27d71807989d76d78",
      "candidate_info": {
        "commit_hash": "30867b5b782f8b1fc1addfa27d71807989d76d78",
        "repo": "landfillbaby/png2webp",
        "commit_url": "https://github.com/landfillbaby/png2webp/commit/30867b5b782f8b1fc1addfa27d71807989d76d78",
        "files": [
          "png2webp.c"
        ],
        "message": "v1.1.4",
        "before_after_code_files": [
          "png2webp.c||png2webp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "png2webp.c||png2webp.c"
          ],
          "candidate": [
            "png2webp.c||png2webp.c"
          ]
        }
      },
      "candidate_diff": {
        "png2webp.c||png2webp.c": [
          "File: png2webp.c -> png2webp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include <errno.h>",
          "5: #include <inttypes.h>",
          "6: #include <limits.h>",
          "",
          "[Removed Lines]",
          "3: #define VERSION \"v1.1.3\"",
          "",
          "[Added Lines]",
          "3: #define VERSION \"v1.1.4\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "247b4a8769e0aed16836ee81988885817a873ba2",
      "candidate_info": {
        "commit_hash": "247b4a8769e0aed16836ee81988885817a873ba2",
        "repo": "landfillbaby/png2webp",
        "commit_url": "https://github.com/landfillbaby/png2webp/commit/247b4a8769e0aed16836ee81988885817a873ba2",
        "files": [
          "Makefile",
          "Makefile.static",
          "README.md",
          "compile_msvc.bat",
          "png2webp.c",
          "png2webp.h",
          "webp2png.c",
          "webp2png.h"
        ],
        "message": "single source file (wip), fix a few warnings",
        "before_after_code_files": [
          "Makefile.static||Makefile.static",
          "compile_msvc.bat||compile_msvc.bat",
          "png2webp.c||png2webp.c",
          "png2webp.h||png2webp.h",
          "webp2png.c||webp2png.c",
          "webp2png.h||webp2png.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "png2webp.c||png2webp.c"
          ],
          "candidate": [
            "png2webp.c||png2webp.c"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.static||Makefile.static": [
          "File: Makefile.static -> Makefile.static",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: SHELL = /bin/sh",
          "3: PREFIX ?= /usr/local",
          "4: INSTALL ?= install",
          "",
          "[Removed Lines]",
          "1: #TODO: pam, optimizations",
          "",
          "[Added Lines]",
          "1: #TODO: zlib 1.2.12 hardware crc32, pam, optimizations",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:  libwebp/src/utils/quant_levels_dec_utils.o",
          "84: OBJS := png2webp.o webp2png.o ${LIBPNG_OBJS} ${ZLIB_OBJS} \\",
          "85:  ${LIBWEBPBASE_OBJS} ${LIBWEBPENC_OBJS} ${LIBWEBPDEC_OBJS}",
          "87: PROGS := png2webp.static webp2png.static",
          "88: .PHONY: all install clean",
          "89: all install: ${PROGS}",
          "90: png2webp.static: png2webp.o ${LIBWEBPENC_OBJS}",
          "91: webp2png.static: webp2png.o ${LIBWEBPDEC_OBJS}",
          "92: ${PROGS}: ${LIBPNG_OBJS} ${ZLIB_OBJS} ${LIBWEBPBASE_OBJS}",
          "93:  ${LINK.o} $^ ${LOADLIBES} ${LDLIBS} -o $@",
          "94: install:",
          "95:  ${INSTALL} $^ ${DESTDIR}${PREFIX}/bin/",
          "96: clean:",
          "97:  ${RM} ${PROGS} ${OBJS}",
          "",
          "[Removed Lines]",
          "86: SRCS := ${OBJS:o=c}",
          "98: %.o: %.c",
          "99:  ${COMPILE.c} ${OUTPUT_OPTION} $<",
          "",
          "[Added Lines]",
          "86: SRCS := png2webp.c ${LIBPNG_OBJS:o=c} ${ZLIB_OBJS:o=c} \\",
          "87:  ${LIBWEBPBASE_OBJS:o=c} ${LIBWEBPENC_OBJS:o=c} ${LIBWEBPDEC_OBJS:o=c}",
          "93: %.o: %.c",
          "94:  ${COMPILE.c} ${OUTPUT_OPTION} $<",
          "95: webp2png.o: png2webp.c",
          "96:  ${COMPILE.c} ${OUTPUT_OPTION} -o $@ -DFROMWEBP $<",
          "",
          "---------------"
        ],
        "compile_msvc.bat||compile_msvc.bat": [
          "File: compile_msvc.bat -> compile_msvc.bat",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: pushd \"%~dp0\"",
          "2: copy libpng\\scripts\\pnglibconf.h.prebuilt libpng\\pnglibconf.h",
          "3: del libpng\\pngtest.c",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: rem TODO: zlib 1.2.12 hardware crc32, pam, optimizations",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7:     libwebp\\src\\enc\\*.c libwebp\\src\\utils\\*.c libwebp\\src\\dsp\\*.c",
          "8: cl.exe /nologo /std:c11 /W2 /Brepro /O2 /Ob3 /GL /Gw /Qpar /DNDEBUG ^",
          "9:     /Ilibpng /Izlib /Ilibwebp /Ilibwebp\\src /DWEBP_USE_THREAD ^",
          "11:     libwebp\\src\\dec\\*.c libwebp\\src\\utils\\*.c libwebp\\src\\dsp\\*.c",
          "12: del *.obj",
          "13: popd",
          "",
          "[Removed Lines]",
          "10:     %* webp2png.c libpng\\png*.c zlib\\*.c ^",
          "",
          "[Added Lines]",
          "11:     /DFROMWEBP %* png2webp.c libpng\\png*.c zlib\\*.c ^",
          "",
          "---------------"
        ],
        "png2webp.c||png2webp.c": [
          "File: png2webp.c -> png2webp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include <webp/encode.h>",
          "4: #ifdef PAM",
          "5: #include <pam.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: #define VERSION \"v0.8\"",
          "5: #ifdef FROMWEBP",
          "7: Ideally should palette if <=256 colors (in order of appearance),",
          "8: or at least try to palette when input WebP was,",
          "9: but that's not part of either libpng encoding or libwebp decoding.",
          "10: Maybe do this:",
          "11: #include <webp/encode.h> // for WebPPicture",
          "12: WEBP_EXTERN int WebPGetColorPalette( // declared in libwebp utils/utils.h",
          "14: #include <webp/decode.h>",
          "15: #define INEXT \"webp\"",
          "16: #define INEXTCHK INEXT",
          "17: #ifdef PAM",
          "18: #define OUTEXT \"pam\"",
          "19: #else",
          "20: #include <png.h>",
          "21: #define OUTEXT \"png\"",
          "22: #endif",
          "23: #define OUTEXTCHK \".\" OUTEXT",
          "24: #define EXTRALETTERS",
          "25: #define EXTRAHELP",
          "26: #else // FROMWEBP",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17: #else",
          "18: #include <png.h>",
          "19: #define INEXT \"png\"",
          "20: #endif",
          "21: #define OUTEXT \"webp\"",
          "23: #define EXTRALETTERS \"e\"",
          "24: #define EXTRAHELP \"-e: Keep RGB data on pixels where alpha is 0.\\n\"",
          "27: static FILE* fp;",
          "28: static int w(const uint8_t* d, size_t s, const WebPPicture* x) {",
          "29:  (void)x;",
          "30:  return s ? (int)fwrite(d, s, 1, fp) : 1;",
          "31: }",
          "32: int main(int argc, char** argv) {",
          "33: #ifdef PAM",
          "34:   pm_init(\"ERROR\", 0); // TODO: maybe *argv or (INEXT \"2\" OUTEXT) ?",
          "35: #elif !defined(USEADVANCEDPNG)",
          "",
          "[Removed Lines]",
          "22: #define OUTEXTCHK OUTEXT",
          "25: #define EXTRAFLAGS case 'e': exact = 1; break;",
          "26: #include \"png2webp.h\"",
          "",
          "[Added Lines]",
          "44: #define INEXTCHK \".png\"",
          "47: #define OUTEXTCHK \"webp\"",
          "50: #endif // FROMWEBP",
          "51: #include <errno.h>",
          "52: #include <stdbool.h>",
          "53: #include <stdio.h>",
          "54: #include <stdlib.h>",
          "55: #include <string.h>",
          "56: #ifdef _WIN32",
          "57: #include <fcntl.h>",
          "58: #include <io.h>",
          "59: #define O(x) _##x",
          "60: #else",
          "61: #include <unistd.h>",
          "62: #define setmode(x, y) 0",
          "63: #define O(x) x",
          "64: #endif",
          "65: #ifndef ISINEXT",
          "66: #define ISINEXT \\",
          "67:  if(len >= sizeof INEXT) { \\",
          "68:   uint32_t ext, extmask, extmatch; \\",
          "69:   memcpy(&ext, *argv + len - 4, 4); \\",
          "70:   memcpy(&extmask, (char[4]){(sizeof INEXT > 4) * 32, 32, 32, \\",
          "71:    32}, 4); \\",
          "72:   memcpy(&extmatch, (char[4]){INEXTCHK}, 4); \\",
          "73:   if((sizeof INEXT < 5 || argv[0][len - 5] == '.') && \\",
          "74:    (ext | extmask) == extmatch) len -= sizeof INEXT; \\",
          "75:  }",
          "76: #endif",
          "77: #define P(x) fputs(x \"\\n\", stderr)",
          "78: #define PF(x, ...) fprintf(stderr, x \"\\n\", __VA_ARGS__)",
          "80: #define PFV(...) if(verbose) PF(__VA_ARGS__);",
          "81: #define E(f, ...) \\",
          "82:  if(!(f)) { \\",
          "83:   PF(\"ERROR \" __VA_ARGS__); \\",
          "84:   return 1; \\",
          "85:  }",
          "86: #if __STDC_VERSION__ < 201112L || defined(NOFOPENX)",
          "87: #include <fcntl.h>",
          "88: #include <sys/stat.h>",
          "89: #endif",
          "90: #define HELP \\",
          "91:   P(INEXT \"2\" OUTEXT \" \" VERSION \"\\n\\nUsage:\\n\" INEXT \"2\" OUTEXT \\",
          "92:     \" [-b\" EXTRALETTERS \"fv-] infile.\" INEXT \" ...\\n\" INEXT \"2\" OUTEXT \\",
          "93:     \" [-p\" EXTRALETTERS \"fv-] [{infile.\" INEXT \"|-} [outfile.\" OUTEXT \\",
          "94:     \"|-]]\\n\\n-b: Work with many input files (Batch mode).\\n\" \\",
          "95:     \"    Constructs output filenames by removing the .\" INEXT \\",
          "96:     \" extension if possible,\\n    and appending \\\".\" OUTEXT \"\\\".\\n\" \\",
          "97:     \"-p: Work with a single file, allowing Piping from stdin or to stdout,\\n\" \\",
          "98:     \"    or using a different output filename to the input.\\n    infile.\" \\",
          "99:     INEXT \" and outfile.\" OUTEXT \\",
          "100:     \" default to stdin and stdout respectively,\\n\" \\",
          "101:     \"    or explicitly as \\\"-\\\".\\n\" \\",
          "102:     \"    Will show this message if stdin/stdout is used and is a terminal.\\n\" \\",
          "103:     EXTRAHELP \\",
          "104:     \"-f: Force overwrite of output files (has no effect on stdout).\\n\" \\",
          "105:     \"-v: Be verbose.\\n--: Explicitly stop parsing options.\\n\\n\" \\",
          "106:     \"Without -b or -p, and with 1 or 2 filenames, there is some ambiguity.\\n\" \\",
          "107:     \"In this case it will tell you what its guess is.\"); \\",
          "108:   return -1;",
          "109: #define OPENR(x) \\",
          "110:  PFV(\"%scoding %s ...\", \"De\", x ? \"stdin\" : *argv); \\",
          "111:  if(x) fp = stdin; \\",
          "112:  else E(fp = fopen(*argv, \"rb\"), \"opening \\\"%s\\\" for %s: %s\", *argv, \\",
          "113:   \"reading\", strerror(errno));",
          "114: #define PIPEARG(x) (*argv[x] == '-' && !argv[x][1])",
          "115: #define PIPECHK(x, y) \\",
          "116:   if(use##y) { \\",
          "117:  if(!(x && skipstdoutchk) && O(isatty)(x)) { HELP } \\",
          "118:  E(O(setmode)(x, _O_BINARY) != -1, \"setting %s to binary mode\", #y); \\",
          "119:   }",
          "120: #define URGC (unsigned)argc",
          "121: #define EC(x) E(!fclose(fp), \"closing %s: %s\", x, strerror(errno))",
          "122: #ifndef FROMWEBP",
          "128: #endif",
          "130: #ifdef FROMWEBP",
          "131:   FILE* fp;",
          "132: #else // FROMWEBP",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "39:  \"32-bit mixed-endianness (%X) not supported\", endian);",
          "40: #endif",
          "41:   bool exact = 0;",
          "43:   for(;;) {",
          "44: #ifdef PAM",
          "45:     struct pam i;",
          "46:     pnm_readpaminit(fp, &i, PAM_STRUCT_SIZE(tuple_type));",
          "",
          "[Removed Lines]",
          "42:   GETARGS",
          "",
          "[Added Lines]",
          "142: #endif // FROMWEBP",
          "143:   bool usepipe = 0, usestdin = 0, usestdout = 0, force = 0, verbose = 0,",
          "144:  chosen = 0, skipstdoutchk = 0;",
          "145:   char* outname = 0;",
          "146: #ifdef USEGETOPT",
          "147:   int c;",
          "148:   while((c = getopt(argc, argv, \":bp\" EXTRALETTERS \"fv\")) != -1) switch(c)",
          "149: #else",
          "150:   while(--argc && **++argv == '-' && argv[0][1])",
          "151:     while(*++*argv) switch(**argv)",
          "152: #endif",
          "153:     {",
          "154:  case 'p': usepipe = 1; // FALLTHRU",
          "155:  case 'b':",
          "156:   if(chosen) { HELP }",
          "157:   chosen = 1;",
          "158:   break;",
          "159: #ifndef FROMWEBP",
          "160:  case 'e': exact = 1; break;",
          "161: #endif",
          "162:  case 'f': force = 1; break;",
          "163:  case 'v': verbose = 1; break;",
          "164: #ifndef USEGETOPT",
          "165:  case '-':",
          "166:    if(!argv[0][1]) {",
          "167:   argc--;",
          "168:   argv++;",
          "169:   goto endflagloop;",
          "170:    } // FALLTHRU",
          "171: #endif",
          "172:  default: HELP",
          "173:     }",
          "174: #ifdef USEGETOPT",
          "175:   argc -= optind;",
          "176:   argv += optind;",
          "177: #else",
          "178: endflagloop:",
          "179: #endif",
          "180:   if(chosen && (usepipe ? URGC > 2 : !argc)) { HELP }",
          "181:   if(usepipe) {",
          "182:  usestdin = !argc || PIPEARG(0);",
          "183:  usestdout = URGC < 2 || PIPEARG(1);",
          "184:   } else if(!chosen && URGC < 3) {",
          "185:     usestdin = !argc || PIPEARG(0);",
          "186:     usestdout = argc == 2 ? PIPEARG(1) : usestdin;",
          "187:     if(!(usepipe = usestdin || usestdout)) {",
          "188:       PF(\"Warning: %u file%s given and neither -b or -p specified.\", URGC,",
          "189:  argc == 1 ? \"\" : \"s\");",
          "190:       if(argc == 1) {",
          "191:  if(!O(isatty)(1)) usepipe = usestdout = skipstdoutchk = 1;",
          "192:       } else {",
          "193:  size_t len = strlen(argv[1]);",
          "194:  if(len >= sizeof OUTEXT) {",
          "195:    uint32_t ext, extmask, extmatch;",
          "196:    memcpy(&ext, argv[1] + len - 4, 4);",
          "197:    memcpy(&extmask, (char[4]){(sizeof OUTEXT > 4) * 32, 32, 32, 32}, 4);",
          "198:    memcpy(&extmatch, (char[4]){OUTEXTCHK}, 4);",
          "199:    usepipe = (sizeof OUTEXT < 5 || argv[1][len - 5] == '.') &&",
          "200:   (ext | extmask) == extmatch;",
          "201:       } }",
          "202:       PF(\"Guessed -%c.\", usepipe ? 'p' : 'b');",
          "203:   } }",
          "204:   PIPECHK(0, stdin);",
          "205:   PIPECHK(1, stdout);",
          "206:   OPENR(usestdin);",
          "208: #ifdef FROMWEBP",
          "209:     WebPDecoderConfig c = { // TODO: memset? WebPInitDecoderConfig?",
          "210: #ifdef NOTHREADS",
          "211:  0",
          "212: #else",
          "213:  .options.use_threads = 1",
          "214: #endif",
          "215:     };",
          "216: #ifndef IDEC_BUFSIZE",
          "217: #define IDEC_BUFSIZE 65536",
          "218: #endif",
          "219:     uint8_t i[IDEC_BUFSIZE];",
          "220:     size_t l = fread(i, 1, IDEC_BUFSIZE, fp);",
          "221:     char* k[] = {\"out of RAM\", \"invalid params\", \"bitstream broke\",",
          "222:  \"unsupported feature\", \"suspended\", \"cancelled\", \"not enough data\"};",
          "223: #define F c.input",
          "224: #define A F.has_alpha",
          "225:     VP8StatusCode r = WebPGetFeatures(i, l, &F);",
          "226:     E(!r, \"reading WebP header: %u (%s)\", r, r < 8 ? k[r - 1] : \"???\");",
          "227: #ifdef LOSSYISERROR",
          "228: #define FORMATSTR",
          "229: #define GETFORMAT",
          "230: #define ANIMARGS \"%sion)\", k[3], \"animat\"",
          "231: #else",
          "232:     char* formats[] = {\"undefined/mixed\", \"lossy\", \"lossless\"};",
          "233: #define FORMATSTR \"\\nFormat: %s (%d)\"",
          "234: #define GETFORMAT , (unsigned)V < 3 ? formats[V] : \"???\", V",
          "235: #define ANIMARGS \"animation)\", k[3]",
          "236: #endif",
          "237: #define V F.format",
          "238: #define W (unsigned)F.width",
          "239: #define H (unsigned)F.height",
          "240:     PFV(\"Input WebP info:\\nDimensions: %u x %u\\nUses alpha: %s\" FORMATSTR,",
          "241:  W, H, A ? \"yes\" : \"no\" GETFORMAT);",
          "242:     E(!F.has_animation, \"reading WebP header: 4 (%s: \" ANIMARGS);",
          "243: #ifdef LOSSYISERROR",
          "244:     E(V == 2, \"reading WebP header: 4 (%s: %sion)\", k[3], \"lossy compress\");",
          "245: #endif",
          "246:     if(A) c.output.colorspace = MODE_RGBA;",
          "247:     WebPIDecoder* d = WebPIDecode(i, l, &c);",
          "248:     E(d, \"initializing WebP decoder: 1 (%s)\", *k);",
          "249:     for(size_t x = l; (r = WebPIAppend(d, i, x)); l += x) {",
          "250:  E(r == 5 && !feof(fp), \"reading WebP data: %d (%s)\", r == 5 ? 7 : r,",
          "251:   r == 5 ? k[6] : r < 8 ? k[r - 1] : \"???\");",
          "252:  x = fread(i, 1, IDEC_BUFSIZE, fp);",
          "253:     }",
          "254:     WebPIDelete(d);",
          "255:     PFV(\"Size: %zu bytes (%.15g bpp)\", l, (double)l * 8 / (uint32_t)(W * H));",
          "256: #else // FROMWEBP",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "88:  pnm_scaletuplerow(&i, r, r, 255);",
          "89: #define A (~i.depth & 1)",
          "90: #define D (i.depth > 2)",
          "92:   (((A ? r[x][i.depth - 1] : 255) & 255) << 24) |",
          "93:   ((*r[x] & 255) << 16) | ((r[x][D] & 255) << 8) |",
          "95:     }",
          "96:     pnm_freepamrow(r);",
          "97: #else",
          "",
          "[Removed Lines]",
          "91:  for(unsigned x = 0; x < W; x++) o.argb[y * W + x] =",
          "94:   (r[x][D * 2] & 255);",
          "",
          "[Added Lines]",
          "304:  for(unsigned x = 0; x < W; x++) o.argb[y * W + x] = (uint32_t)(",
          "307:   (r[x][D * 2] & 255));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "101:     EP(png_image_finish_read(&i, 0, o.argb, 0, 0), \"data\", 0);",
          "102: #endif",
          "103: #endif",
          "104: #ifdef NOTHREADS",
          "105: #define THREADLEVEL",
          "106: #else",
          "107: #define THREADLEVEL .thread_level = 1,",
          "108: #endif",
          "110:     E(WebPEncode(",
          "111:  &(WebPConfig){ // TODO: memset? WebpConfigInit?",
          "112:   1, 100, 6, // lossless, max",
          "",
          "[Removed Lines]",
          "109:     GETOUTFILE",
          "",
          "[Added Lines]",
          "317: #endif // FROMWEBP",
          "318:     EC(usestdin ? \"stdin\" : *argv);",
          "319:     if(usestdout) {",
          "320:  PFV(\"%scoding %s ...\", \"En\", \"stdout\");",
          "321:  fp = stdout;",
          "322:     } else {",
          "323:       if(usepipe) outname = argv[1];",
          "324:       else {",
          "325:  size_t len = strlen(*argv);",
          "326:  ISINEXT;",
          "327:  outname = malloc(len + sizeof \".\" OUTEXT);",
          "328:  E(outname, \"adding .\" OUTEXT \" extension to %s: out of RAM\", *argv);",
          "329:  memcpy(outname, *argv, len);",
          "330:  memcpy(outname + len, \".\" OUTEXT, sizeof \".\" OUTEXT);",
          "331:       }",
          "332:       PFV(\"%scoding %s ...\", \"En\", outname);",
          "333: #define EO(x) E(x, \"opening \\\"%s\\\" for %s: %s\", outname, \\",
          "334:  force ? \"writing\" : \"creation\", strerror(errno))",
          "335: #if __STDC_VERSION__ < 201112L || defined(NOFOPENX)",
          "336: #ifndef O_BINARY",
          "337: #define O_BINARY 0",
          "338: #endif",
          "339:       int fd = O(open)(outname, O(O_WRONLY) | O(O_CREAT) | O(O_BINARY) |",
          "340:  O(O_TRUNC) | (!force * O(O_EXCL)),",
          "341: #ifdef _WIN32",
          "342:  _S_IREAD | _S_IWRITE",
          "343: #else",
          "344:  0666",
          "345: #endif",
          "346:  );",
          "347:       EO(fd != -1 && (fp = O(fdopen)(fd, \"wb\")));",
          "348: #else",
          "349:       EO(fp = fopen(outname, force ? \"wb\" : \"wbx\"));",
          "350: #endif",
          "351:     }",
          "352: #ifdef FROMWEBP",
          "353: #define D c.output.u.RGBA",
          "354: #ifdef PAM",
          "355:     fprintf(fp, \"P7\\nWIDTH %u\\nHEIGHT %u\\nDEPTH %c\\nMAXVAL 255\\n\"",
          "356:  \"TUPLTYPE RGB%s\\nENDHDR\\n\", W, H, A ? '4' : '3', A ? \"_ALPHA\" : \"\");",
          "357:     fwrite(D.rgba, D.size, 1, fp);",
          "358: #else",
          "360:     png_structp png_ptr =",
          "361:  png_create_write_struct(PNG_LIBPNG_VER_STRING, 0, 0, 0);",
          "362:     E(png_ptr, \"writing PNG: %s\", *k);",
          "363:     png_infop info_ptr = png_create_info_struct(png_ptr);",
          "364:     E(info_ptr, \"writing PNG: %s\", *k);",
          "365: #ifdef PNG_SETJMP_SUPPORTED",
          "367:     if(setjmp(png_jmpbuf(png_ptr))) return 1;",
          "368: #endif",
          "369:     png_init_io(png_ptr, fp);",
          "370:     png_set_filter(png_ptr, 0, PNG_ALL_FILTERS);",
          "371:     png_set_compression_level(png_ptr, 9);",
          "373:     png_set_IHDR(png_ptr, info_ptr, W, H, 8,",
          "374:  A ? PNG_COLOR_TYPE_RGBA : PNG_COLOR_TYPE_RGB, PNG_INTERLACE_NONE,",
          "375:  PNG_COMPRESSION_TYPE_DEFAULT, PNG_FILTER_TYPE_DEFAULT);",
          "376:     png_write_info(png_ptr, info_ptr);",
          "377:     png_bytep px = D.rgba;",
          "378:     for(unsigned y = 0; y < H; y++) {",
          "379:  png_write_row(png_ptr, px);",
          "380:  px += D.stride;",
          "381:     }",
          "382:     png_write_end(png_ptr, info_ptr);",
          "383:     png_destroy_write_struct(&png_ptr, &info_ptr);",
          "384: #endif",
          "385:     WebPFreeDecBuffer(&c.output);",
          "386: #else // FROMWEBP",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "125:  \"Precision bits: histogram=%u transform=%u cache=%u\\n\"",
          "126:  \"Lossless features:%s%s%s%s\\nColors: %s%u\",",
          "127:  o.width, o.height, s.coded_size,",
          "129:  s.lossless_hdr_size, s.lossless_data_size,",
          "130:  A && WebPPictureHasTransparency(&o) ? \"yes\" : \"no\",",
          "131:  s.histogram_bits, s.transform_bits, s.cache_bits,",
          "",
          "[Removed Lines]",
          "128:  8. * (unsigned)s.coded_size / (uint32_t)(o.width * o.height),",
          "",
          "[Added Lines]",
          "410:  (unsigned)s.coded_size * 8. / (uint32_t)(o.width * o.height),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "133:  F && F & 2 ? \" cross-color\" : \"\", F && F & 4 ? \" subtract-green\" : \"\",",
          "134:  F && F & 8 ? \" palette\" : \"\", C ? \"\" : \">\", C ? C : 256);",
          "135:     WebPPictureFree(&o);",
          "137: } }",
          "",
          "[Removed Lines]",
          "136:     GETINFILE",
          "",
          "[Added Lines]",
          "418: #endif // FROMWEBP",
          "419:     EC(usestdout ? \"stdout\" : outname);",
          "420:     if(usepipe || !--argc) return 0;",
          "421:     if(outname) {",
          "422:  free(outname);",
          "423:  outname = 0;",
          "424:     }",
          "425:     argv++;",
          "426:     OPENR(0);",
          "",
          "---------------"
        ],
        "png2webp.h||png2webp.h": [
          "File: png2webp.h -> png2webp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "webp2png.c||webp2png.c": [
          "File: webp2png.c -> webp2png.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "webp2png.h||webp2png.h": [
          "File: webp2png.h -> webp2png.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}