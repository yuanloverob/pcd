{
  "cve_id": "CVE-2018-7321",
  "cve_desc": "In Wireshark 2.4.0 to 2.4.4 and 2.2.0 to 2.2.12, epan/dissectors/packet-thrift.c had a large loop that was addressed by not proceeding with dissection after encountering an unexpected type.",
  "repo": "wireshark/wireshark",
  "patch_hash": "8ab3060aace7b20c2845f2f725d4f306cca61dd4",
  "patch_info": {
    "commit_hash": "8ab3060aace7b20c2845f2f725d4f306cca61dd4",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/8ab3060aace7b20c2845f2f725d4f306cca61dd4",
    "files": [
      "epan/dissectors/packet-thrift.c"
    ],
    "message": "Thrift: stop dissection when encountering an unknown/unexpected type\n\nLet's add an expert info, and set offset to the end of the current tvb.\n\nBug: 14379\nChange-Id: Iaccf862c451eef58aaed11b26fceebf26bc2c818\nReviewed-on: https://code.wireshark.org/review/25619\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-thrift.c||epan/dissectors/packet-thrift.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-thrift.c||epan/dissectors/packet-thrift.c": [
      "File: epan/dissectors/packet-thrift.c -> epan/dissectors/packet-thrift.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "116:     { 0, NULL },",
      "117: };",
      "121: int",
      "122: dissect_thrift_t_stop(tvbuff_t* tvb, packet_info* pinfo _U_, proto_tree* tree, int offset)",
      "",
      "[Removed Lines]",
      "119: static int dissect_thrift_type(tvbuff_t* tvb, packet_info* pinfo _U_, proto_tree* tree, int type, int offset, int length);",
      "",
      "[Added Lines]",
      "119: static int dissect_thrift_type(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, proto_item* pi, int type, int* offset, int length);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "315: dissect_thrift_list(tvbuff_t* tvb, packet_info* pinfo _U_, proto_tree* tree, int offset, int length)",
      "316: {",
      "317:     proto_tree *sub_tree;",
      "319:     guint32 type;",
      "320:     int start_offset = offset, i;",
      "321:     guint32 list_len;",
      "323:     sub_tree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_thrift, &ti, \"List\");",
      "325:     offset++;",
      "326:     proto_tree_add_item_ret_uint(sub_tree, hf_thrift_num_list_item, tvb, offset, 4, ENC_BIG_ENDIAN, &list_len);",
      "327:     offset += 4;",
      "329:     for (i = 0; i < (int)list_len; ++i) {",
      "331:     }",
      "332:     list_len = offset - start_offset;",
      "333:     proto_item_set_len(ti, list_len);",
      "",
      "[Removed Lines]",
      "318:     proto_item *ti;",
      "324:     proto_tree_add_item_ret_uint(sub_tree, hf_thrift_type, tvb, offset, 1, ENC_BIG_ENDIAN, &type);",
      "330:         offset = dissect_thrift_type(tvb, pinfo, sub_tree, type, offset, length);",
      "",
      "[Added Lines]",
      "318:     proto_item *ti, *type_pi;",
      "324:     type_pi = proto_tree_add_item_ret_uint(sub_tree, hf_thrift_type, tvb, offset, 1, ENC_BIG_ENDIAN, &type);",
      "330:         if (dissect_thrift_type(tvb, pinfo, sub_tree, type_pi, type, &offset, length) < 0) {",
      "331:             break;",
      "332:         }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "340: dissect_thrift_struct(tvbuff_t* tvb, packet_info* pinfo _U_, proto_tree* tree, int offset, int length)",
      "341: {",
      "342:     proto_tree *sub_tree;",
      "345:     int start_offset = offset, struct_len;",
      "347:     sub_tree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_thrift, &ti, \"Struct\");",
      "",
      "[Removed Lines]",
      "343:     proto_item *ti;",
      "344:     guint8 type;",
      "",
      "[Added Lines]",
      "345:     proto_item *ti, *type_pi;",
      "346:     guint32 type;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "354:     while (offset < length) {",
      "358:         offset++;",
      "359:         if (type == 0){",
      "",
      "[Removed Lines]",
      "356:         type = tvb_get_guint8(tvb, offset);",
      "357:         proto_tree_add_item(sub_tree, hf_thrift_type, tvb, offset, 1, ENC_BIG_ENDIAN);",
      "",
      "[Added Lines]",
      "358:         type_pi = proto_tree_add_item_ret_uint(sub_tree, hf_thrift_type, tvb, offset, 1, ENC_BIG_ENDIAN, &type);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "364:         }",
      "365:         proto_tree_add_item(sub_tree, hf_thrift_fid, tvb, offset, 2, ENC_BIG_ENDIAN);",
      "366:         offset += 2;",
      "368:     }",
      "370:     return offset;",
      "",
      "[Removed Lines]",
      "367:         offset = dissect_thrift_type(tvb, pinfo, sub_tree, type, offset, length);",
      "",
      "[Added Lines]",
      "368:         if (dissect_thrift_type(tvb, pinfo, sub_tree, type_pi, type, &offset, length) < 0) {",
      "369:             break;",
      "370:         }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "374: dissect_thrift_map(tvbuff_t* tvb, packet_info* pinfo _U_, proto_tree* tree, int offset, int length)",
      "375: {",
      "376:     proto_tree *sub_tree;",
      "378:     guint32 ktype;",
      "379:     guint32 vtype;",
      "380:     guint32 map_len;",
      "381:     int start_offset = offset, i;",
      "383:     sub_tree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_thrift, &ti, \"Map\");",
      "385:     offset++;",
      "387:     offset++;",
      "388:     proto_tree_add_item_ret_uint(sub_tree, hf_thrift_num_map_item, tvb, offset, 4, ENC_BIG_ENDIAN, &map_len);",
      "389:     offset += 4;",
      "391:     for (i = 0; i < (int)map_len; ++i) {",
      "394:     }",
      "395:     map_len = offset - start_offset;",
      "396:     proto_item_set_len(ti, map_len);",
      "",
      "[Removed Lines]",
      "377:     proto_item *ti;",
      "384:     proto_tree_add_item_ret_uint(sub_tree, hf_thrift_type, tvb, offset, 1, ENC_BIG_ENDIAN, &ktype);",
      "386:     proto_tree_add_item_ret_uint(sub_tree, hf_thrift_type, tvb, offset, 1, ENC_BIG_ENDIAN, &vtype);",
      "392:         offset = dissect_thrift_type(tvb, pinfo, sub_tree, ktype, offset, length);",
      "393:         offset = dissect_thrift_type(tvb, pinfo, sub_tree, vtype, offset, length);",
      "",
      "[Added Lines]",
      "380:     proto_item *ti, *ktype_pi, *vtype_pi;",
      "387:     ktype_pi = proto_tree_add_item_ret_uint(sub_tree, hf_thrift_type, tvb, offset, 1, ENC_BIG_ENDIAN, &ktype);",
      "389:     vtype_pi = proto_tree_add_item_ret_uint(sub_tree, hf_thrift_type, tvb, offset, 1, ENC_BIG_ENDIAN, &vtype);",
      "395:         if (dissect_thrift_type(tvb, pinfo, sub_tree, ktype_pi, ktype, &offset, length) < 0) {",
      "396:             break;",
      "397:         }",
      "398:         if (dissect_thrift_type(tvb, pinfo, sub_tree, vtype_pi, vtype, &offset, length) < 0) {",
      "399:             break;",
      "400:         }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "399: }",
      "401: static int",
      "403: {",
      "404:     switch (type){",
      "405:     case 2:",
      "409:         break;",
      "410:     case 3:",
      "414:         break;",
      "415:     case 4:",
      "419:         break;",
      "420:     case 6:",
      "424:         break;",
      "425:     case 8:",
      "429:         break;",
      "430:     case 9:",
      "434:         break;",
      "435:     case 10:",
      "439:         break;",
      "440:     case 11:",
      "443:         break;",
      "444:     case 12:",
      "447:         break;",
      "448:     case 13:",
      "451:         break;",
      "452:     case 15:",
      "455:         break;",
      "456:     default:",
      "459:     }",
      "462: }",
      "464: static int",
      "465: dissect_thrift_common(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, void *data _U_)",
      "466: {",
      "467:     proto_tree *sub_tree;",
      "468:     int offset = 0;",
      "469:     int str_len;",
      "470:     guint8 mtype;",
      "",
      "[Removed Lines]",
      "402: dissect_thrift_type(tvbuff_t* tvb, packet_info* pinfo _U_, proto_tree* tree, int type, int offset, int length)",
      "407:         proto_tree_add_item(tree, hf_thrift_bool, tvb, offset, 1, ENC_BIG_ENDIAN);",
      "408:         offset += 1;",
      "412:         proto_tree_add_item(tree, hf_thrift_byte, tvb, offset, 1, ENC_BIG_ENDIAN);",
      "413:         offset += 1;",
      "417:         proto_tree_add_item(tree, hf_thrift_double, tvb, offset, 8, ENC_BIG_ENDIAN);",
      "418:         offset += 8;",
      "422:         proto_tree_add_item(tree, hf_thrift_i16, tvb, offset, 2, ENC_BIG_ENDIAN);",
      "423:         offset += 2;",
      "427:         proto_tree_add_item(tree, hf_thrift_i32, tvb, offset, 4, ENC_BIG_ENDIAN);",
      "428:         offset += 4;",
      "432:         proto_tree_add_item(tree, hf_thrift_u64, tvb, offset, 8, ENC_BIG_ENDIAN);",
      "433:         offset += 8;",
      "437:         proto_tree_add_item(tree, hf_thrift_i64, tvb, offset, 8, ENC_BIG_ENDIAN);",
      "438:         offset += 8;",
      "442:         offset = dissect_thrift_utf7(tvb, pinfo, tree, offset, length);",
      "446:         offset = dissect_thrift_struct(tvb, pinfo, tree, offset, length);",
      "450:         offset = dissect_thrift_map(tvb, pinfo, tree, offset, length);",
      "454:         offset = dissect_thrift_list(tvb, pinfo, tree, offset, length);",
      "458:         return length;",
      "461:     return offset;",
      "",
      "[Added Lines]",
      "409: dissect_thrift_type(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree,",
      "410:                     proto_item* pi, int type, int* offset, int length)",
      "415:         proto_tree_add_item(tree, hf_thrift_bool, tvb, *offset, 1, ENC_BIG_ENDIAN);",
      "420:         proto_tree_add_item(tree, hf_thrift_byte, tvb, *offset, 1, ENC_BIG_ENDIAN);",
      "425:         proto_tree_add_item(tree, hf_thrift_double, tvb, *offset, 8, ENC_BIG_ENDIAN);",
      "430:         proto_tree_add_item(tree, hf_thrift_i16, tvb, *offset, 2, ENC_BIG_ENDIAN);",
      "435:         proto_tree_add_item(tree, hf_thrift_i32, tvb, *offset, 4, ENC_BIG_ENDIAN);",
      "440:         proto_tree_add_item(tree, hf_thrift_u64, tvb, *offset, 8, ENC_BIG_ENDIAN);",
      "445:         proto_tree_add_item(tree, hf_thrift_i64, tvb, *offset, 8, ENC_BIG_ENDIAN);",
      "466:         expert_add_info(pinfo, pi, &ei_thrift_wrong_type);",
      "468:         return -1;",
      "471:     return *offset;",
      "478:     proto_item *type_pi;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "472:     guint32 seq_id;",
      "473:     guint8 *method_str;",
      "474:     int length = tvb_reported_length(tvb);",
      "476:     tvbuff_t *msg_tvb;",
      "477:     int len;",
      "",
      "[Removed Lines]",
      "475:     guint8 type;",
      "",
      "[Added Lines]",
      "486:     guint32 type;",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "528:     sub_tree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_thrift, NULL, \"Data\");",
      "529:     while (offset < length){",
      "533:         if (type == 0){",
      "534:             return tvb_reported_length(tvb);",
      "535:         }",
      "",
      "[Removed Lines]",
      "531:         type = tvb_get_guint8(tvb, offset);",
      "532:         proto_tree_add_item(sub_tree, hf_thrift_type, tvb, offset, 1, ENC_BIG_ENDIAN);",
      "",
      "[Added Lines]",
      "542:         type_pi = proto_tree_add_item_ret_uint(sub_tree, hf_thrift_type, tvb, offset, 1, ENC_BIG_ENDIAN, &type);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "537:         proto_tree_add_item(sub_tree, hf_thrift_fid, tvb, offset, 2, ENC_BIG_ENDIAN);",
      "538:         offset += 2;",
      "541:     }",
      "543:     pinfo->desegment_offset = 0;",
      "",
      "[Removed Lines]",
      "540:         offset = dissect_thrift_type(tvb, pinfo, sub_tree, type, offset, length);",
      "",
      "[Added Lines]",
      "550:         if (dissect_thrift_type(tvb, pinfo, sub_tree, type_pi, type, &offset, length) < 0) {",
      "551:             break;",
      "552:         }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "57e218cdb2729aebecb6494a786de31ba4a3698b",
      "candidate_info": {
        "commit_hash": "57e218cdb2729aebecb6494a786de31ba4a3698b",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/57e218cdb2729aebecb6494a786de31ba4a3698b",
        "files": [
          "epan/dissectors/packet-thrift.c"
        ],
        "message": "Thrift: stop dissection when encountering an unknown/unexpected type\n\nLet's add an expert info, and set offset to the end of the current tvb.\n\nBug: 14379\nChange-Id: Iaccf862c451eef58aaed11b26fceebf26bc2c818\nReviewed-on: https://code.wireshark.org/review/25619\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 8ab3060aace7b20c2845f2f725d4f306cca61dd4)\n Conflicts:\n\tepan/dissectors/packet-thrift.c\nReviewed-on: https://code.wireshark.org/review/25629",
        "before_after_code_files": [
          "epan/dissectors/packet-thrift.c||epan/dissectors/packet-thrift.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-thrift.c||epan/dissectors/packet-thrift.c"
          ],
          "candidate": [
            "epan/dissectors/packet-thrift.c||epan/dissectors/packet-thrift.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-thrift.c||epan/dissectors/packet-thrift.c": [
          "File: epan/dissectors/packet-thrift.c -> epan/dissectors/packet-thrift.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include \"config.h\"",
          "32: #include <epan/packet.h>",
          "34: void proto_register_thrift(void);",
          "35: void proto_reg_handoff_thrift(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #include <epan/expert.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59: static int ett_thrift = -1;",
          "61: static const value_string thrift_type_vals[] = {",
          "62:     {  0, \"T_STOP\" },",
          "63:     {  1, \"T_VOID\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: static expert_field ei_thrift_wrong_type = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95:     { 0, NULL },",
          "96: };",
          "100: static int",
          "101: dissect_thrift_utf7(tvbuff_t* tvb, packet_info* pinfo _U_, proto_tree* tree, int offset, int length _U_)",
          "",
          "[Removed Lines]",
          "98: static int dissect_thrift_type(tvbuff_t* tvb, packet_info* pinfo _U_, proto_tree* tree, int type, int offset, int length);",
          "",
          "[Added Lines]",
          "101: static int dissect_thrift_type(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, proto_item* pi, int type, int* offset, int length);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "116: dissect_thrift_list(tvbuff_t* tvb, packet_info* pinfo _U_, proto_tree* tree, int offset, int length)",
          "117: {",
          "118:     proto_tree *sub_tree;",
          "120:     guint32 type;",
          "121:     int start_offset = offset, i;",
          "122:     guint32 list_len;",
          "124:     sub_tree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_thrift, &ti, \"List\");",
          "126:     offset++;",
          "127:     proto_tree_add_item_ret_uint(sub_tree, hf_thrift_num_list_item, tvb, offset, 4, ENC_BIG_ENDIAN, &list_len);",
          "128:     offset += 4;",
          "130:     for (i = 0; i < (int)list_len; ++i) {",
          "132:     }",
          "133:     list_len = offset - start_offset;",
          "134:     proto_item_set_len(ti, list_len);",
          "",
          "[Removed Lines]",
          "119:     proto_item *ti;",
          "125:     proto_tree_add_item_ret_uint(sub_tree, hf_thrift_type, tvb, offset, 1, ENC_BIG_ENDIAN, &type);",
          "131:         offset = dissect_thrift_type(tvb, pinfo, sub_tree, type, offset, length);",
          "",
          "[Added Lines]",
          "122:     proto_item *ti, *type_pi;",
          "128:     type_pi = proto_tree_add_item_ret_uint(sub_tree, hf_thrift_type, tvb, offset, 1, ENC_BIG_ENDIAN, &type);",
          "134:         if (dissect_thrift_type(tvb, pinfo, sub_tree, type_pi, type, &offset, length) < 0) {",
          "135:             break;",
          "136:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "141: dissect_thrift_struct(tvbuff_t* tvb, packet_info* pinfo _U_, proto_tree* tree, int offset, int length)",
          "142: {",
          "143:     proto_tree *sub_tree;",
          "146:     int start_offset = offset, struct_len;",
          "148:     sub_tree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_thrift, &ti, \"Struct\");",
          "",
          "[Removed Lines]",
          "144:     proto_item *ti;",
          "145:     guint8 type;",
          "",
          "[Added Lines]",
          "149:     proto_item *ti, *type_pi;",
          "150:     guint32 type;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "155:     while (offset < length) {",
          "159:         offset++;",
          "160:         if (type == 0){",
          "",
          "[Removed Lines]",
          "157:         type = tvb_get_guint8(tvb, offset);",
          "158:         proto_tree_add_item(sub_tree, hf_thrift_type, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "162:         type_pi = proto_tree_add_item_ret_uint(sub_tree, hf_thrift_type, tvb, offset, 1, ENC_BIG_ENDIAN, &type);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "165:         }",
          "166:         proto_tree_add_item(sub_tree, hf_thrift_fid, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "167:         offset += 2;",
          "169:     }",
          "171:     return offset;",
          "",
          "[Removed Lines]",
          "168:         offset = dissect_thrift_type(tvb, pinfo, sub_tree, type, offset, length);",
          "",
          "[Added Lines]",
          "172:         if (dissect_thrift_type(tvb, pinfo, sub_tree, type_pi, type, &offset, length) < 0) {",
          "173:             break;",
          "174:         }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "175: dissect_thrift_map(tvbuff_t* tvb, packet_info* pinfo _U_, proto_tree* tree, int offset, int length)",
          "176: {",
          "177:     proto_tree *sub_tree;",
          "179:     guint32 ktype;",
          "180:     guint32 vtype;",
          "181:     guint32 map_len;",
          "182:     int start_offset = offset, i;",
          "184:     sub_tree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_thrift, &ti, \"Map\");",
          "186:     offset++;",
          "188:     offset++;",
          "189:     proto_tree_add_item_ret_uint(sub_tree, hf_thrift_num_map_item, tvb, offset, 4, ENC_BIG_ENDIAN, &map_len);",
          "190:     offset += 4;",
          "192:     for (i = 0; i < (int)map_len; ++i) {",
          "195:     }",
          "196:     map_len = offset - start_offset;",
          "197:     proto_item_set_len(ti, map_len);",
          "",
          "[Removed Lines]",
          "178:     proto_item *ti;",
          "185:     proto_tree_add_item_ret_uint(sub_tree, hf_thrift_type, tvb, offset, 1, ENC_BIG_ENDIAN, &ktype);",
          "187:     proto_tree_add_item_ret_uint(sub_tree, hf_thrift_type, tvb, offset, 1, ENC_BIG_ENDIAN, &vtype);",
          "193:         offset = dissect_thrift_type(tvb, pinfo, sub_tree, ktype, offset, length);",
          "194:         offset = dissect_thrift_type(tvb, pinfo, sub_tree, vtype, offset, length);",
          "",
          "[Added Lines]",
          "184:     proto_item *ti, *ktype_pi, *vtype_pi;",
          "191:     ktype_pi = proto_tree_add_item_ret_uint(sub_tree, hf_thrift_type, tvb, offset, 1, ENC_BIG_ENDIAN, &ktype);",
          "193:     vtype_pi = proto_tree_add_item_ret_uint(sub_tree, hf_thrift_type, tvb, offset, 1, ENC_BIG_ENDIAN, &vtype);",
          "199:         if (dissect_thrift_type(tvb, pinfo, sub_tree, ktype_pi, ktype, &offset, length) < 0) {",
          "200:             break;",
          "201:         }",
          "202:         if (dissect_thrift_type(tvb, pinfo, sub_tree, vtype_pi, vtype, &offset, length) < 0) {",
          "203:             break;",
          "204:         }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "200: }",
          "202: static int",
          "204: {",
          "205:     switch (type){",
          "206:     case 2:",
          "210:         break;",
          "211:     case 3:",
          "215:         break;",
          "216:     case 4:",
          "220:         break;",
          "221:     case 6:",
          "225:         break;",
          "226:     case 8:",
          "230:         break;",
          "231:     case 9:",
          "235:         break;",
          "236:     case 10:",
          "240:         break;",
          "241:     case 11:",
          "244:         break;",
          "245:     case 12:",
          "248:         break;",
          "249:     case 13:",
          "252:         break;",
          "253:     case 15:",
          "256:         break;",
          "257:     default:",
          "260:     }",
          "263: }",
          "265: static void",
          "266: dissect_thrift_common(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree)",
          "267: {",
          "268:     proto_tree *sub_tree;",
          "269:     int offset = 0;",
          "270:     guint32 str_len;",
          "271:     guint8 mtype;",
          "",
          "[Removed Lines]",
          "203: dissect_thrift_type(tvbuff_t* tvb, packet_info* pinfo _U_, proto_tree* tree, int type, int offset, int length)",
          "208:         proto_tree_add_item(tree, hf_thrift_bool, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "209:         offset += 1;",
          "213:         proto_tree_add_item(tree, hf_thrift_byte, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "214:         offset += 1;",
          "218:         proto_tree_add_item(tree, hf_thrift_double, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "219:         offset += 8;",
          "223:         proto_tree_add_item(tree, hf_thrift_i16, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "224:         offset += 2;",
          "228:         proto_tree_add_item(tree, hf_thrift_i32, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "229:         offset += 4;",
          "233:         proto_tree_add_item(tree, hf_thrift_u64, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "234:         offset += 8;",
          "238:         proto_tree_add_item(tree, hf_thrift_i64, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "239:         offset += 8;",
          "243:         offset = dissect_thrift_utf7(tvb, pinfo, tree, offset, length);",
          "247:         offset = dissect_thrift_struct(tvb, pinfo, tree, offset, length);",
          "251:         offset = dissect_thrift_map(tvb, pinfo, tree, offset, length);",
          "255:         offset = dissect_thrift_list(tvb, pinfo, tree, offset, length);",
          "259:         return length;",
          "262:     return offset;",
          "",
          "[Added Lines]",
          "213: dissect_thrift_type(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree,",
          "214:                     proto_item* pi, int type, int* offset, int length)",
          "219:         proto_tree_add_item(tree, hf_thrift_bool, tvb, *offset, 1, ENC_BIG_ENDIAN);",
          "224:         proto_tree_add_item(tree, hf_thrift_byte, tvb, *offset, 1, ENC_BIG_ENDIAN);",
          "229:         proto_tree_add_item(tree, hf_thrift_double, tvb, *offset, 8, ENC_BIG_ENDIAN);",
          "234:         proto_tree_add_item(tree, hf_thrift_i16, tvb, *offset, 2, ENC_BIG_ENDIAN);",
          "239:         proto_tree_add_item(tree, hf_thrift_i32, tvb, *offset, 4, ENC_BIG_ENDIAN);",
          "244:         proto_tree_add_item(tree, hf_thrift_u64, tvb, *offset, 8, ENC_BIG_ENDIAN);",
          "249:         proto_tree_add_item(tree, hf_thrift_i64, tvb, *offset, 8, ENC_BIG_ENDIAN);",
          "270:         expert_add_info(pinfo, pi, &ei_thrift_wrong_type);",
          "272:         return -1;",
          "275:     return *offset;",
          "282:     proto_item *type_pi;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "273:     guint32 seq_id;",
          "274:     guint8 *method_str;",
          "275:     int length = tvb_reported_length(tvb);",
          "278:     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"THRIFT\");",
          "279:     col_clear(pinfo->cinfo, COL_INFO);",
          "",
          "[Removed Lines]",
          "276:     guint8 type;",
          "",
          "[Added Lines]",
          "290:     guint32 type;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "317:     if (tree){",
          "318:         while (offset < length){",
          "322:             if (type == 0){",
          "323:                 return;",
          "324:             }",
          "",
          "[Removed Lines]",
          "320:             type = tvb_get_guint8(tvb, offset);",
          "321:             proto_tree_add_item(sub_tree, hf_thrift_type, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "334:             type_pi = proto_tree_add_item_ret_uint(sub_tree, hf_thrift_type, tvb, offset, 1, ENC_BIG_ENDIAN, &type);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "326:             proto_tree_add_item(sub_tree, hf_thrift_fid, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "327:             offset += 2;",
          "330:         }",
          "331:     }",
          "332: }",
          "",
          "[Removed Lines]",
          "329:             offset = dissect_thrift_type(tvb, pinfo, sub_tree, type, offset, length);",
          "",
          "[Added Lines]",
          "342:             if (dissect_thrift_type(tvb, pinfo, sub_tree, type_pi, type, &offset, length) < 0) {",
          "343:                 break;",
          "344:             }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "491:         &ett_thrift,",
          "492:     };",
          "495:     proto_thrift = proto_register_protocol(\"Thrift Protocol\", \"Thrift\", \"thrift\");",
          "498:     proto_register_field_array(proto_thrift, hf, array_length(hf));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "509:     static ei_register_info ei[] = {",
          "510:         { &ei_thrift_wrong_type,{ \"thrift.wrong_type\", PI_PROTOCOL, PI_ERROR, \"Type value not expected\", EXPFILL } }",
          "511:     };",
          "513:     expert_module_t* expert_thrift;",
          "518:     expert_thrift = expert_register_protocol(proto_thrift);",
          "519:     expert_register_field_array(expert_thrift, ei, array_length(ei));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c784d551ad50864de1035ce54e72837301cf6aca",
      "candidate_info": {
        "commit_hash": "c784d551ad50864de1035ce54e72837301cf6aca",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/c784d551ad50864de1035ce54e72837301cf6aca",
        "files": [
          "epan/dissectors/packet-thrift.c"
        ],
        "message": "Thrift: stop dissection when encountering an unknown/unexpected type\n\nLet's add an expert info, and set offset to the end of the current tvb.\n\nBug: 14379\nChange-Id: Iaccf862c451eef58aaed11b26fceebf26bc2c818\nReviewed-on: https://code.wireshark.org/review/25619\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 8ab3060aace7b20c2845f2f725d4f306cca61dd4)\n Conflicts:\n\tepan/dissectors/packet-thrift.c\nReviewed-on: https://code.wireshark.org/review/25629\n(cherry picked from commit 57e218cdb2729aebecb6494a786de31ba4a3698b)\nReviewed-on: https://code.wireshark.org/review/25632",
        "before_after_code_files": [
          "epan/dissectors/packet-thrift.c||epan/dissectors/packet-thrift.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-thrift.c||epan/dissectors/packet-thrift.c"
          ],
          "candidate": [
            "epan/dissectors/packet-thrift.c||epan/dissectors/packet-thrift.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-thrift.c||epan/dissectors/packet-thrift.c": [
          "File: epan/dissectors/packet-thrift.c -> epan/dissectors/packet-thrift.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include \"config.h\"",
          "32: #include <epan/packet.h>",
          "34: void proto_register_thrift(void);",
          "35: void proto_reg_handoff_thrift(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #include <epan/expert.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59: static int ett_thrift = -1;",
          "61: static const value_string thrift_type_vals[] = {",
          "62:     {  0, \"T_STOP\" },",
          "63:     {  1, \"T_VOID\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: static expert_field ei_thrift_wrong_type = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95:     { 0, NULL },",
          "96: };",
          "100: static int",
          "101: dissect_thrift_utf7(tvbuff_t* tvb, packet_info* pinfo _U_, proto_tree* tree, int offset, int length _U_)",
          "",
          "[Removed Lines]",
          "98: static int dissect_thrift_type(tvbuff_t* tvb, packet_info* pinfo _U_, proto_tree* tree, int type, int offset, int length);",
          "",
          "[Added Lines]",
          "101: static int dissect_thrift_type(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, proto_item* pi, int type, int* offset, int length);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "116: dissect_thrift_list(tvbuff_t* tvb, packet_info* pinfo _U_, proto_tree* tree, int offset, int length)",
          "117: {",
          "118:     proto_tree *sub_tree;",
          "120:     guint32 type;",
          "121:     int start_offset = offset, i;",
          "122:     guint32 list_len;",
          "124:     sub_tree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_thrift, &ti, \"List\");",
          "126:     offset++;",
          "127:     proto_tree_add_item_ret_uint(sub_tree, hf_thrift_num_list_item, tvb, offset, 4, ENC_BIG_ENDIAN, &list_len);",
          "128:     offset += 4;",
          "130:     for (i = 0; i < (int)list_len; ++i) {",
          "132:     }",
          "133:     list_len = offset - start_offset;",
          "134:     proto_item_set_len(ti, list_len);",
          "",
          "[Removed Lines]",
          "119:     proto_item *ti;",
          "125:     proto_tree_add_item_ret_uint(sub_tree, hf_thrift_type, tvb, offset, 1, ENC_BIG_ENDIAN, &type);",
          "131:         offset = dissect_thrift_type(tvb, pinfo, sub_tree, type, offset, length);",
          "",
          "[Added Lines]",
          "122:     proto_item *ti, *type_pi;",
          "128:     type_pi = proto_tree_add_item_ret_uint(sub_tree, hf_thrift_type, tvb, offset, 1, ENC_BIG_ENDIAN, &type);",
          "134:         if (dissect_thrift_type(tvb, pinfo, sub_tree, type_pi, type, &offset, length) < 0) {",
          "135:             break;",
          "136:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "141: dissect_thrift_struct(tvbuff_t* tvb, packet_info* pinfo _U_, proto_tree* tree, int offset, int length)",
          "142: {",
          "143:     proto_tree *sub_tree;",
          "146:     int start_offset = offset, struct_len;",
          "148:     sub_tree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_thrift, &ti, \"Struct\");",
          "",
          "[Removed Lines]",
          "144:     proto_item *ti;",
          "145:     guint8 type;",
          "",
          "[Added Lines]",
          "149:     proto_item *ti, *type_pi;",
          "150:     guint32 type;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "155:     while (offset < length) {",
          "159:         offset++;",
          "160:         if (type == 0){",
          "",
          "[Removed Lines]",
          "157:         type = tvb_get_guint8(tvb, offset);",
          "158:         proto_tree_add_item(sub_tree, hf_thrift_type, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "162:         type_pi = proto_tree_add_item_ret_uint(sub_tree, hf_thrift_type, tvb, offset, 1, ENC_BIG_ENDIAN, &type);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "165:         }",
          "166:         proto_tree_add_item(sub_tree, hf_thrift_fid, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "167:         offset += 2;",
          "169:     }",
          "171:     return offset;",
          "",
          "[Removed Lines]",
          "168:         offset = dissect_thrift_type(tvb, pinfo, sub_tree, type, offset, length);",
          "",
          "[Added Lines]",
          "172:         if (dissect_thrift_type(tvb, pinfo, sub_tree, type_pi, type, &offset, length) < 0) {",
          "173:             break;",
          "174:         }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "175: dissect_thrift_map(tvbuff_t* tvb, packet_info* pinfo _U_, proto_tree* tree, int offset, int length)",
          "176: {",
          "177:     proto_tree *sub_tree;",
          "179:     guint32 ktype;",
          "180:     guint32 vtype;",
          "181:     guint32 map_len;",
          "182:     int start_offset = offset, i;",
          "184:     sub_tree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_thrift, &ti, \"Map\");",
          "186:     offset++;",
          "188:     offset++;",
          "189:     proto_tree_add_item_ret_uint(sub_tree, hf_thrift_num_map_item, tvb, offset, 4, ENC_BIG_ENDIAN, &map_len);",
          "190:     offset += 4;",
          "192:     for (i = 0; i < (int)map_len; ++i) {",
          "195:     }",
          "196:     map_len = offset - start_offset;",
          "197:     proto_item_set_len(ti, map_len);",
          "",
          "[Removed Lines]",
          "178:     proto_item *ti;",
          "185:     proto_tree_add_item_ret_uint(sub_tree, hf_thrift_type, tvb, offset, 1, ENC_BIG_ENDIAN, &ktype);",
          "187:     proto_tree_add_item_ret_uint(sub_tree, hf_thrift_type, tvb, offset, 1, ENC_BIG_ENDIAN, &vtype);",
          "193:         offset = dissect_thrift_type(tvb, pinfo, sub_tree, ktype, offset, length);",
          "194:         offset = dissect_thrift_type(tvb, pinfo, sub_tree, vtype, offset, length);",
          "",
          "[Added Lines]",
          "184:     proto_item *ti, *ktype_pi, *vtype_pi;",
          "191:     ktype_pi = proto_tree_add_item_ret_uint(sub_tree, hf_thrift_type, tvb, offset, 1, ENC_BIG_ENDIAN, &ktype);",
          "193:     vtype_pi = proto_tree_add_item_ret_uint(sub_tree, hf_thrift_type, tvb, offset, 1, ENC_BIG_ENDIAN, &vtype);",
          "199:         if (dissect_thrift_type(tvb, pinfo, sub_tree, ktype_pi, ktype, &offset, length) < 0) {",
          "200:             break;",
          "201:         }",
          "202:         if (dissect_thrift_type(tvb, pinfo, sub_tree, vtype_pi, vtype, &offset, length) < 0) {",
          "203:             break;",
          "204:         }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "200: }",
          "202: static int",
          "204: {",
          "205:     switch (type){",
          "206:     case 2:",
          "210:         break;",
          "211:     case 3:",
          "215:         break;",
          "216:     case 4:",
          "220:         break;",
          "221:     case 6:",
          "225:         break;",
          "226:     case 8:",
          "230:         break;",
          "231:     case 9:",
          "235:         break;",
          "236:     case 10:",
          "240:         break;",
          "241:     case 11:",
          "244:         break;",
          "245:     case 12:",
          "248:         break;",
          "249:     case 13:",
          "252:         break;",
          "253:     case 15:",
          "256:         break;",
          "257:     default:",
          "260:     }",
          "263: }",
          "265: static void",
          "266: dissect_thrift_common(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree)",
          "267: {",
          "268:     proto_tree *sub_tree;",
          "269:     int offset = 0;",
          "270:     guint32 str_len;",
          "271:     guint8 mtype;",
          "",
          "[Removed Lines]",
          "203: dissect_thrift_type(tvbuff_t* tvb, packet_info* pinfo _U_, proto_tree* tree, int type, int offset, int length)",
          "208:         proto_tree_add_item(tree, hf_thrift_bool, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "209:         offset += 1;",
          "213:         proto_tree_add_item(tree, hf_thrift_byte, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "214:         offset += 1;",
          "218:         proto_tree_add_item(tree, hf_thrift_double, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "219:         offset += 8;",
          "223:         proto_tree_add_item(tree, hf_thrift_i16, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "224:         offset += 2;",
          "228:         proto_tree_add_item(tree, hf_thrift_i32, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "229:         offset += 4;",
          "233:         proto_tree_add_item(tree, hf_thrift_u64, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "234:         offset += 8;",
          "238:         proto_tree_add_item(tree, hf_thrift_i64, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "239:         offset += 8;",
          "243:         offset = dissect_thrift_utf7(tvb, pinfo, tree, offset, length);",
          "247:         offset = dissect_thrift_struct(tvb, pinfo, tree, offset, length);",
          "251:         offset = dissect_thrift_map(tvb, pinfo, tree, offset, length);",
          "255:         offset = dissect_thrift_list(tvb, pinfo, tree, offset, length);",
          "259:         return length;",
          "262:     return offset;",
          "",
          "[Added Lines]",
          "213: dissect_thrift_type(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree,",
          "214:                     proto_item* pi, int type, int* offset, int length)",
          "219:         proto_tree_add_item(tree, hf_thrift_bool, tvb, *offset, 1, ENC_BIG_ENDIAN);",
          "224:         proto_tree_add_item(tree, hf_thrift_byte, tvb, *offset, 1, ENC_BIG_ENDIAN);",
          "229:         proto_tree_add_item(tree, hf_thrift_double, tvb, *offset, 8, ENC_BIG_ENDIAN);",
          "234:         proto_tree_add_item(tree, hf_thrift_i16, tvb, *offset, 2, ENC_BIG_ENDIAN);",
          "239:         proto_tree_add_item(tree, hf_thrift_i32, tvb, *offset, 4, ENC_BIG_ENDIAN);",
          "244:         proto_tree_add_item(tree, hf_thrift_u64, tvb, *offset, 8, ENC_BIG_ENDIAN);",
          "249:         proto_tree_add_item(tree, hf_thrift_i64, tvb, *offset, 8, ENC_BIG_ENDIAN);",
          "270:         expert_add_info(pinfo, pi, &ei_thrift_wrong_type);",
          "272:         return -1;",
          "275:     return *offset;",
          "282:     proto_item *type_pi;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "273:     guint32 seq_id;",
          "274:     guint8 *method_str;",
          "275:     int length = tvb_reported_length(tvb);",
          "278:     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"THRIFT\");",
          "279:     col_clear(pinfo->cinfo, COL_INFO);",
          "",
          "[Removed Lines]",
          "276:     guint8 type;",
          "",
          "[Added Lines]",
          "290:     guint32 type;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "317:     if (tree){",
          "318:         while (offset < length){",
          "322:             if (type == 0){",
          "323:                 return;",
          "324:             }",
          "",
          "[Removed Lines]",
          "320:             type = tvb_get_guint8(tvb, offset);",
          "321:             proto_tree_add_item(sub_tree, hf_thrift_type, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "334:             type_pi = proto_tree_add_item_ret_uint(sub_tree, hf_thrift_type, tvb, offset, 1, ENC_BIG_ENDIAN, &type);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "326:             proto_tree_add_item(sub_tree, hf_thrift_fid, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "327:             offset += 2;",
          "330:         }",
          "331:     }",
          "332: }",
          "",
          "[Removed Lines]",
          "329:             offset = dissect_thrift_type(tvb, pinfo, sub_tree, type, offset, length);",
          "",
          "[Added Lines]",
          "342:             if (dissect_thrift_type(tvb, pinfo, sub_tree, type_pi, type, &offset, length) < 0) {",
          "343:                 break;",
          "344:             }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "491:         &ett_thrift,",
          "492:     };",
          "495:     proto_thrift = proto_register_protocol(\"Thrift Protocol\", \"Thrift\", \"thrift\");",
          "498:     proto_register_field_array(proto_thrift, hf, array_length(hf));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "509:     static ei_register_info ei[] = {",
          "510:         { &ei_thrift_wrong_type,{ \"thrift.wrong_type\", PI_PROTOCOL, PI_ERROR, \"Type value not expected\", EXPFILL } }",
          "511:     };",
          "513:     expert_module_t* expert_thrift;",
          "518:     expert_thrift = expert_register_protocol(proto_thrift);",
          "519:     expert_register_field_array(expert_thrift, ei, array_length(ei));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ddf8d8704d333454ca0e8ba3650835aa86f6abfc",
      "candidate_info": {
        "commit_hash": "ddf8d8704d333454ca0e8ba3650835aa86f6abfc",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/ddf8d8704d333454ca0e8ba3650835aa86f6abfc",
        "files": [
          "epan/dissectors/Makefile.am",
          "epan/dissectors/packet-thrift.c",
          "epan/dissectors/packet-thrift.h"
        ],
        "message": "[Thrift] Make it easier to make specific Thrift dissectors\n\nIntroduce functionallity simmilar to packet-ber.c\n\nChange-Id: Ibb76e2db870c9a9dd8b26067b59a20044aafbd85\nReviewed-on: https://code.wireshark.org/review/25266\nPetri-Dish: Anders Broman <a.broman58@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/Makefile.am||epan/dissectors/Makefile.am",
          "epan/dissectors/packet-thrift.c||epan/dissectors/packet-thrift.c",
          "epan/dissectors/packet-thrift.h||epan/dissectors/packet-thrift.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-thrift.c||epan/dissectors/packet-thrift.c"
          ],
          "candidate": [
            "epan/dissectors/packet-thrift.c||epan/dissectors/packet-thrift.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/Makefile.am||epan/dissectors/Makefile.am": [
          "File: epan/dissectors/Makefile.am -> epan/dissectors/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "1800:  packet-tcp.h  \\",
          "1801:  packet-tetra.h  \\",
          "1802:  packet-tftp.h  \\",
          "1803:  packet-tn3270.h  \\",
          "1804:  packet-tn5250.h  \\",
          "1805:  packet-tpkt.h  \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1803:  packet-thrift.h  \\",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-thrift.c||epan/dissectors/packet-thrift.c": [
          "File: epan/dissectors/packet-thrift.c -> epan/dissectors/packet-thrift.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include \"config.h\"",
          "20: #include <epan/packet.h>",
          "22: #include \"packet-ssl.h\"",
          "25: void proto_register_thrift(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #include <epan/expert.h>",
          "24: #include \"packet-thrift.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28: #define THRIFT_VERSION_MASK     0xffff0000",
          "29: #define THRIFT_VERSION_1        0x80010000",
          "31: static dissector_handle_t thrift_handle;",
          "32: static guint thrift_tls_port = 0;",
          "34: static int proto_thrift = -1;",
          "35: static int hf_thrift_version = -1;",
          "36: static int hf_thrift_mtype = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #define THRIFT_COMPACT          0x80020000",
          "34: #define THRIFT_T_STOP 0",
          "35: #define THRIFT_T_VOID 1",
          "36: #define THRIFT_T_BOL 2",
          "37: #define THRIFT_T_BYTE 3",
          "38: #define THRIFT_T_DOUBLE 4",
          "39: #define THRIFT_T_I16 6",
          "40: #define THRIFT_T_I32 8",
          "41: #define THRIFT_T_U64 9",
          "42: #define THRIFT_T_I64 10",
          "43: #define THRIFT_T_UTF7 11",
          "44: #define THRIFT_T_STRUCT 12",
          "45: #define THRIFT_T_MAP 13",
          "46: #define THRIFT_T_SET 14",
          "47: #define THRIFT_T_LIST 15",
          "48: #define THRIFT_T_UTF8 16",
          "49: #define THRIFT_T_UTF16 17",
          "54: static gboolean show_internal_thrift_fields = FALSE;",
          "56: static dissector_table_t thrift_method_name_dissector_table;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "53: static int ett_thrift = -1;",
          "55: static const value_string thrift_type_vals[] = {",
          "56:     {  0, \"T_STOP\" },",
          "57:     {  1, \"T_VOID\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79: static expert_field ei_thrift_wrong_type = EI_INIT;",
          "80: static expert_field ei_thrift_struct_type_not_imp = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "92: static int dissect_thrift_type(tvbuff_t* tvb, packet_info* pinfo _U_, proto_tree* tree, int type, int offset, int length);",
          "94: static int",
          "95: dissect_thrift_utf7(tvbuff_t* tvb, packet_info* pinfo _U_, proto_tree* tree, int offset, int length _U_)",
          "96: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121: int",
          "122: dissect_thrift_t_stop(tvbuff_t* tvb, packet_info* pinfo _U_, proto_tree* tree, int offset)",
          "123: {",
          "124:     guint32 type;",
          "126:     proto_tree_add_item_ret_uint(tree, hf_thrift_type, tvb, offset, 1, ENC_BIG_ENDIAN, &type);",
          "127:     if (type != THRIFT_T_STOP) {",
          "128:         proto_tree_add_expert(tree, pinfo, &ei_thrift_wrong_type, tvb, offset, 1);",
          "129:     }",
          "130:     offset++;",
          "132:     return offset;",
          "133: }",
          "135: int",
          "136: dissect_thrift_t_byte(tvbuff_t* tvb, packet_info* pinfo _U_, proto_tree* tree, int offset, int field_id _U_, gint hf_id)",
          "137: {",
          "138:     guint8 type;",
          "140:     type = tvb_get_guint8(tvb, offset);",
          "141:     if (type != THRIFT_T_BYTE) {",
          "142:         proto_tree_add_expert(tree, pinfo, &ei_thrift_wrong_type, tvb, offset, 1);",
          "143:     }",
          "145:     if(show_internal_thrift_fields){",
          "146:         proto_tree_add_item(tree, hf_thrift_type, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "147:         offset++;",
          "149:         proto_tree_add_item(tree, hf_thrift_fid, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "150:         offset += 2;",
          "151:     } else {",
          "152:         offset += 3;",
          "153:     }",
          "156:     proto_tree_add_item(tree, hf_id, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "157:     offset += 1;",
          "159:     return offset;",
          "160: }",
          "162: int",
          "163: dissect_thrift_t_i32(tvbuff_t* tvb, packet_info* pinfo _U_, proto_tree* tree, int offset, int field_id _U_, gint hf_id)",
          "164: {",
          "165:     guint8 type;",
          "167:     type = tvb_get_guint8(tvb, offset);",
          "168:     if (type != THRIFT_T_I32) {",
          "169:         proto_tree_add_expert(tree, pinfo, &ei_thrift_wrong_type, tvb, offset, 1);",
          "170:     }",
          "172:     if (show_internal_thrift_fields) {",
          "173:         proto_tree_add_item(tree, hf_thrift_type, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "174:         offset++;",
          "176:         proto_tree_add_item(tree, hf_thrift_fid, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "177:         offset += 2;",
          "178:     } else {",
          "179:         offset += 3;",
          "180:     }",
          "182:     proto_tree_add_item(tree, hf_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "183:     offset += 4;",
          "185:     return offset;",
          "186: }",
          "188: int",
          "189: dissect_thrift_t_utf7(tvbuff_t* tvb, packet_info* pinfo _U_, proto_tree* tree, int offset, int field_id _U_, gint hf_id)",
          "190: {",
          "191:     guint32 str_len;",
          "192:     guint8 type;",
          "194:     type = tvb_get_guint8(tvb, offset);",
          "195:     if (type != THRIFT_T_UTF7) {",
          "196:         proto_tree_add_expert(tree, pinfo, &ei_thrift_wrong_type, tvb, offset, 1);",
          "197:     }",
          "198:     if (show_internal_thrift_fields) {",
          "199:         proto_tree_add_item(tree, hf_thrift_type, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "200:         offset++;",
          "202:         proto_tree_add_item(tree, hf_thrift_fid, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "203:         offset += 2;",
          "205:         proto_tree_add_item_ret_uint(tree, hf_thrift_str_len, tvb, offset, 4, ENC_BIG_ENDIAN, &str_len);",
          "206:         offset += 4;",
          "207:     } else {",
          "208:         offset += 3;",
          "209:         str_len = tvb_get_ntohl(tvb, offset);",
          "210:         offset += 4;",
          "211:     }",
          "213:     proto_tree_add_item(tree, hf_id, tvb, offset, str_len, ENC_ASCII | ENC_NA);",
          "214:     offset = offset + str_len;",
          "216:     return offset;",
          "218: }",
          "220: int",
          "221: dissect_thrift_t_struct(tvbuff_t* tvb, packet_info* pinfo _U_, proto_tree* tree, int offset, const thrift_struct_t *seq, int field_id _U_, gint hf_id, gint ett_id)",
          "222: {",
          "223:     proto_item *ti;",
          "224:     proto_tree *sub_tree;",
          "226:     guint8 type;",
          "227:     int start_offset = offset;",
          "230:     ti = proto_tree_add_item(tree, hf_id, tvb, offset, -1, ENC_BIG_ENDIAN);",
          "231:     sub_tree = proto_item_add_subtree(ti, ett_id);",
          "233:     type = tvb_get_guint8(tvb, offset);",
          "234:     if (type != THRIFT_T_STRUCT) {",
          "235:         proto_tree_add_expert(sub_tree, pinfo, &ei_thrift_wrong_type, tvb, offset, 1);",
          "236:     }",
          "237:     if (show_internal_thrift_fields) {",
          "238:         proto_tree_add_item(sub_tree, hf_thrift_type, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "239:         offset++;",
          "241:         proto_tree_add_item(sub_tree, hf_thrift_fid, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "242:         offset += 2;",
          "243:     }",
          "244:     else {",
          "245:         offset += 3;",
          "246:     }",
          "248:     while (seq->fid) {",
          "249:         switch (seq->type) {",
          "250:         case DE_THRIFT_T_STOP:",
          "251:             offset = dissect_thrift_t_stop(tvb, pinfo, sub_tree, offset);",
          "252:             break;",
          "253:         case DE_THRIFT_T_VOID:",
          "254:         case DE_THRIFT_T_BOL:",
          "255:             proto_tree_add_expert(sub_tree, pinfo, &ei_thrift_struct_type_not_imp, tvb, offset, 1);",
          "256:             break;",
          "257:         case DE_THRIFT_T_BYTE:",
          "258:             offset = dissect_thrift_t_byte(tvb, pinfo, sub_tree, offset, seq->fid, *seq->p_id);",
          "259:             break;",
          "260:         case DE_THRIFT_T_DOUBLE:",
          "261:         case DE_THRIFT_T_UNUSED_5:",
          "262:         case DE_THRIFT_T_I16:",
          "263:         case DE_THRIFT_T_UNUSED_7:",
          "264:             proto_tree_add_expert(sub_tree, pinfo, &ei_thrift_struct_type_not_imp, tvb, offset, 1);",
          "265:             break;",
          "266:         case DE_THRIFT_T_I32:",
          "267:             offset = dissect_thrift_t_i32(tvb, pinfo, sub_tree, offset, seq->fid, *seq->p_id);",
          "268:             break;",
          "269:         case DE_THRIFT_T_U64:",
          "270:         case DE_THRIFT_T_I64:",
          "271:             proto_tree_add_expert(sub_tree, pinfo, &ei_thrift_struct_type_not_imp, tvb, offset, 1);",
          "272:             break;",
          "273:         case DE_THRIFT_T_UTF7:",
          "274:             offset = dissect_thrift_t_utf7(tvb, pinfo, sub_tree, offset, seq->fid, *seq->p_id);",
          "275:             break;",
          "276:         case DE_THRIFT_T_STRUCT:",
          "277:         case DE_THRIFT_T_MAP:",
          "278:         case DE_THRIFT_T_SET:",
          "279:         case DE_THRIFT_T_LIST:",
          "280:         case DE_THRIFT_T_UTF8:",
          "281:         case DE_THRIFT_T_UTF16:",
          "282:         default:",
          "283:             proto_tree_add_expert(sub_tree, pinfo, &ei_thrift_struct_type_not_imp, tvb, offset, 1);",
          "284:             break;",
          "285:         }",
          "286:         seq++;",
          "287:     }",
          "289:     if (show_internal_thrift_fields) {",
          "290:         proto_tree_add_item(sub_tree, hf_thrift_type, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "291:     }",
          "292:     offset++;",
          "294:     proto_item_set_len(ti, offset - start_offset);",
          "296:     return offset;",
          "297: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "261: {",
          "262:     proto_tree *sub_tree;",
          "263:     int offset = 0;",
          "265:     guint8 mtype;",
          "266:     guint16 version;",
          "267:     guint32 seq_id;",
          "268:     guint8 *method_str;",
          "269:     int length = tvb_reported_length(tvb);",
          "270:     guint8 type;",
          "272:     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"THRIFT\");",
          "273:     col_clear(pinfo->cinfo, COL_INFO);",
          "",
          "[Removed Lines]",
          "264:     guint32 str_len;",
          "",
          "[Added Lines]",
          "469:     int str_len;",
          "476:     tvbuff_t *msg_tvb;",
          "477:     int len;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "307:     }",
          "310:     sub_tree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_thrift, NULL, \"Data\");",
          "324:         }",
          "325:     }",
          "327: }",
          "329: static gboolean",
          "",
          "[Removed Lines]",
          "311:     if (tree){",
          "312:         while (offset < length){",
          "314:             type = tvb_get_guint8(tvb, offset);",
          "315:             proto_tree_add_item(sub_tree, hf_thrift_type, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "316:             if (type == 0){",
          "317:                 return tvb_reported_length(tvb);",
          "318:             }",
          "319:             offset++;",
          "320:             proto_tree_add_item(sub_tree, hf_thrift_fid, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "321:             offset += 2;",
          "323:             offset = dissect_thrift_type(tvb, pinfo, sub_tree, type, offset, length);",
          "326:     return tvb_reported_length(tvb);",
          "",
          "[Added Lines]",
          "518:     msg_tvb = tvb_new_subset_length(tvb, offset, length - offset);",
          "519:     len = dissector_try_string(thrift_method_name_dissector_table, method_str, msg_tvb, pinfo, tree, NULL);",
          "520:     if (len > 0) {",
          "522:         return tvb_reported_length(tvb);",
          "523:     } else if (len < 0) {",
          "525:         return len;",
          "526:     }",
          "529:     while (offset < length){",
          "531:         type = tvb_get_guint8(tvb, offset);",
          "532:         proto_tree_add_item(sub_tree, hf_thrift_type, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "533:         if (type == 0){",
          "534:             return tvb_reported_length(tvb);",
          "536:         offset++;",
          "537:         proto_tree_add_item(sub_tree, hf_thrift_fid, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "538:         offset += 2;",
          "540:         offset = dissect_thrift_type(tvb, pinfo, sub_tree, type, offset, length);",
          "543:     pinfo->desegment_offset = 0;",
          "544:     pinfo->desegment_len = DESEGMENT_ONE_MORE_SEGMENT;",
          "545:     return 0;",
          "546: }",
          "549: Binary protocol Message, strict encoding, 12+ bytes:",
          "550:    +--------+--------+--------+--------+--------+--------+--------+--------+--------+...+--------+--------+--------+--------+--------+",
          "551:    |1vvvvvvv|vvvvvvvv|unused  |00000mmm| name length                       | name                | seq id                            |",
          "552:    +--------+--------+--------+--------+--------+--------+--------+--------+--------+...+--------+--------+--------+--------+--------+",
          "553:    '''",
          "555:    Where:",
          "558:    The leading bit is '1'.",
          "561:    java in 0.9.1) take the whole byte.",
          "565: Compact protocol Message (4+ bytes):",
          "566:    +--------+--------+--------+...+--------+--------+...+--------+--------+...+--------+",
          "567:    |pppppppp|mmmvvvvv| seq id              | name length         | name                |",
          "568:    +--------+--------+--------+...+--------+--------+...+--------+--------+...+--------+",
          "571:    Where:",
          "574:    3 * 'mmm' is the message type, an unsigned 3 bit integer.",
          "580:    Message types are encoded with the following values:",
          "587: static int",
          "588: dissect_thrift_tcp(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, void *data)",
          "589: {",
          "590:     int str_len, length = tvb_reported_length(tvb);",
          "594:     if (length < 13) {",
          "595:         pinfo->desegment_offset = 0;",
          "596:         pinfo->desegment_len = DESEGMENT_ONE_MORE_SEGMENT;",
          "597:         return 0;",
          "598:     }",
          "600:     str_len = tvb_get_ntohl(tvb, 4);",
          "603:     if (length < str_len + 8 + 4 + 4) {",
          "604:         pinfo->desegment_offset = 0;",
          "605:         pinfo->desegment_len = DESEGMENT_ONE_MORE_SEGMENT;",
          "606:         return 0;",
          "607:     }",
          "609:     return dissect_thrift_common(tvb, pinfo, tree, data);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "486:         &ett_thrift,",
          "487:     };",
          "489:     module_t *thrift_module;",
          "492:     proto_thrift = proto_register_protocol(\"Thrift Protocol\", \"Thrift\", \"thrift\");",
          "495:     proto_register_field_array(proto_thrift, hf, array_length(hf));",
          "498:     proto_register_subtree_array(ett, array_length(ett));",
          "503:     thrift_module = prefs_register_protocol(proto_thrift, proto_reg_handoff_thrift);",
          "505:     prefs_register_uint_preference(thrift_module, \"tls.port\",",
          "506:         \"Thrift TLS Port\",",
          "507:         \"Thrift TLS Port\",",
          "508:         10, &thrift_tls_port);",
          "511: }",
          "513: void proto_reg_handoff_thrift(void) {",
          "",
          "[Removed Lines]",
          "501:     thrift_handle = register_dissector(\"thrift\", dissect_thrift_common, proto_thrift);",
          "",
          "[Added Lines]",
          "772:     static ei_register_info ei[] = {",
          "773:         { &ei_thrift_wrong_type,{ \"thrift.wrong_type\", PI_PROTOCOL, PI_ERROR, \"Type value not expected\", EXPFILL } },",
          "774:         { &ei_thrift_struct_type_not_imp,{ \"thrift.struct_type_not_imp\", PI_PROTOCOL, PI_ERROR, \"Struct type handling not implemented in Wireshak yet\", EXPFILL } },",
          "775:     };",
          "779:     expert_module_t* expert_thrift;",
          "785:     expert_thrift = expert_register_protocol(proto_thrift);",
          "793:     expert_register_field_array(expert_thrift, ei, array_length(ei));",
          "796:     thrift_handle = register_dissector(\"thrift\", dissect_thrift_tcp, proto_thrift);",
          "800:     thrift_method_name_dissector_table = register_dissector_table(\"thrift.method_names\", \"Thrift Metod names\",",
          "801:         proto_thrift, FT_STRING, BASE_NONE);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-thrift.h||epan/dissectors/packet-thrift.h": [
          "File: epan/dissectors/packet-thrift.h -> epan/dissectors/packet-thrift.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: #ifndef __PACKET_THRIFT_H__",
          "13: #define __PACKET_THRIFT_H__",
          "15: #include \"ws_symbol_export.h\"",
          "18: typedef enum",
          "19: {",
          "20:     DE_THRIFT_T_STOP = 0,",
          "21:     DE_THRIFT_T_VOID,",
          "22:     DE_THRIFT_T_BOL,",
          "23:     DE_THRIFT_T_BYTE,",
          "24:     DE_THRIFT_T_DOUBLE,",
          "25:     DE_THRIFT_T_UNUSED_5,",
          "26:     DE_THRIFT_T_I16,",
          "27:     DE_THRIFT_T_UNUSED_7,",
          "28:     DE_THRIFT_T_I32,",
          "29:     DE_THRIFT_T_U64,",
          "30:     DE_THRIFT_T_I64,",
          "31:     DE_THRIFT_T_UTF7,",
          "32:     DE_THRIFT_T_STRUCT,",
          "33:     DE_THRIFT_T_MAP,",
          "34:     DE_THRIFT_T_SET,",
          "35:     DE_THRIFT_T_LIST,",
          "36:     DE_THRIFT_T_UTF8,",
          "37:     DE_THRIFT_T_UTF16",
          "38: } trift_type_enum_t;",
          "40: typedef struct _thrift_struct_t {",
          "44: } thrift_struct_t;",
          "47: These functions are to be used by dissectors dissecting Thrift based protocols sinilar to packet-ber.c",
          "50: WS_DLL_PUBLIC int dissect_thrift_t_stop(tvbuff_t* tvb, packet_info* pinfo _U_, proto_tree* tree, int offset);",
          "52: WS_DLL_PUBLIC int dissect_thrift_t_byte(tvbuff_t* tvb, packet_info* pinfo _U_, proto_tree* tree, int offset, int field_id _U_, gint hf_id);",
          "53: WS_DLL_PUBLIC int dissect_thrift_t_i32(tvbuff_t* tvb, packet_info* pinfo _U_, proto_tree* tree, int offset, int field_id _U_, gint hf_id);",
          "54: WS_DLL_PUBLIC int dissect_thrift_t_utf7(tvbuff_t* tvb, packet_info* pinfo _U_, proto_tree* tree, int offset, int field_id _U_, gint hf_id);",
          "69: WS_DLL_PUBLIC int dissect_thrift_t_struct(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, int offset, const thrift_struct_t *seq,",
          "70:     int field_id _U_, gint hf_id, gint ett_id);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3cd661d6e035cd5283b1168a1860771c59bb8bcb",
      "candidate_info": {
        "commit_hash": "3cd661d6e035cd5283b1168a1860771c59bb8bcb",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/3cd661d6e035cd5283b1168a1860771c59bb8bcb",
        "files": [
          "epan/dissectors/packet-thrift.c"
        ],
        "message": "Thrift: Update to distinguish between map key and value types\n\nChange-Id: I153d906ed7b464a961d2e8f061135d06b9088cb7\nReviewed-on: https://code.wireshark.org/review/31122\nPetri-Dish: Anders Broman <a.broman58@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-thrift.c||epan/dissectors/packet-thrift.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-thrift.c||epan/dissectors/packet-thrift.c"
          ],
          "candidate": [
            "epan/dissectors/packet-thrift.c||epan/dissectors/packet-thrift.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-thrift.c||epan/dissectors/packet-thrift.c": [
          "File: epan/dissectors/packet-thrift.c -> epan/dissectors/packet-thrift.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "62: static int hf_thrift_method = -1;",
          "63: static int hf_thrift_seq_id = -1;",
          "64: static int hf_thrift_type = -1;",
          "65: static int hf_thrift_fid = -1;",
          "66: static int hf_thrift_i16 = -1;",
          "67: static int hf_thrift_i32 = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65: static int hf_thrift_key_type = -1;",
          "66: static int hf_thrift_value_type = -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "482:     int start_offset = offset;",
          "484:     sub_tree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_thrift, &ti, \"Map\");",
          "486:     offset++;",
          "488:     offset++;",
          "489:     proto_tree_add_item_ret_uint(sub_tree, hf_thrift_num_map_item, tvb, offset, 4, ENC_BIG_ENDIAN, &map_len);",
          "490:     offset += 4;",
          "",
          "[Removed Lines]",
          "485:     ktype_pi = proto_tree_add_item_ret_uint(sub_tree, hf_thrift_type, tvb, offset, 1, ENC_BIG_ENDIAN, &ktype);",
          "487:     vtype_pi = proto_tree_add_item_ret_uint(sub_tree, hf_thrift_type, tvb, offset, 1, ENC_BIG_ENDIAN, &vtype);",
          "",
          "[Added Lines]",
          "487:     ktype_pi = proto_tree_add_item_ret_uint(sub_tree, hf_thrift_key_type, tvb, offset, 1, ENC_BIG_ENDIAN, &ktype);",
          "489:     vtype_pi = proto_tree_add_item_ret_uint(sub_tree, hf_thrift_value_type, tvb, offset, 1, ENC_BIG_ENDIAN, &vtype);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "820:         FT_UINT8, BASE_DEC, VALS(thrift_type_vals), 0x0,",
          "821:         NULL, HFILL }",
          "822:         },",
          "823:         { &hf_thrift_fid,",
          "824:         { \"Field Id\", \"thrift.fid\",",
          "825:         FT_UINT16, BASE_DEC, NULL, 0x0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "825:         { &hf_thrift_key_type,",
          "826:         { \"Key Type\", \"thrift.type\",",
          "827:         FT_UINT8, BASE_DEC, VALS(thrift_type_vals), 0x0,",
          "828:         NULL, HFILL }",
          "829:         },",
          "830:         { &hf_thrift_value_type,",
          "831:         { \"Value Type\", \"thrift.type\",",
          "832:         FT_UINT8, BASE_DEC, VALS(thrift_type_vals), 0x0,",
          "833:         NULL, HFILL }",
          "834:         },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7a19320df18adae30d974949f20cbae976b4b0ed",
      "candidate_info": {
        "commit_hash": "7a19320df18adae30d974949f20cbae976b4b0ed",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/7a19320df18adae30d974949f20cbae976b4b0ed",
        "files": [
          "epan/dissectors/packet-thrift.c"
        ],
        "message": "[Thrift] Dissect Thrift over SSL.\n\nChange-Id: Ifa7676decc3b853a41c16bd962a25da6ccfac7c7\nReviewed-on: https://code.wireshark.org/review/25193\nPetri-Dish: Anders Broman <a.broman58@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-thrift.c||epan/dissectors/packet-thrift.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-thrift.c||epan/dissectors/packet-thrift.c"
          ],
          "candidate": [
            "epan/dissectors/packet-thrift.c||epan/dissectors/packet-thrift.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-thrift.c||epan/dissectors/packet-thrift.c": [
          "File: epan/dissectors/packet-thrift.c -> epan/dissectors/packet-thrift.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include <epan/packet.h>",
          "34: void proto_register_thrift(void);",
          "35: void proto_reg_handoff_thrift(void);",
          "37: #define THRIFT_VERSION_MASK     0xffff0000",
          "38: #define THRIFT_VERSION_1        0x80010000",
          "40: static int proto_thrift = -1;",
          "41: static int hf_thrift_version = -1;",
          "42: static int hf_thrift_mtype = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"packet-ssl.h\"",
          "31: static dissector_handle_t thrift_handle;",
          "32: static guint thrift_tls_port = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "262:     return offset;",
          "263: }",
          "267: {",
          "268:     proto_tree *sub_tree;",
          "269:     int offset = 0;",
          "",
          "[Removed Lines]",
          "265: static void",
          "266: dissect_thrift_common(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree)",
          "",
          "[Added Lines]",
          "259: static int",
          "260: dissect_thrift_common(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, void *data _U_)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "320:             type = tvb_get_guint8(tvb, offset);",
          "321:             proto_tree_add_item(sub_tree, hf_thrift_type, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "322:             if (type == 0){",
          "324:             }",
          "325:             offset++;",
          "326:             proto_tree_add_item(sub_tree, hf_thrift_fid, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "",
          "[Removed Lines]",
          "323:                 return;",
          "",
          "[Added Lines]",
          "317:                 return tvb_reported_length(tvb);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "329:             offset = dissect_thrift_type(tvb, pinfo, sub_tree, type, offset, length);",
          "330:         }",
          "331:     }",
          "332: }",
          "334: static gboolean",
          "336:     int offset = 0;",
          "337:     guint32 header;",
          "338:     gint tframe_length;",
          "",
          "[Removed Lines]",
          "335: dissect_thrift_heur(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, void *data _U_) {",
          "",
          "[Added Lines]",
          "326:     return tvb_reported_length(tvb);",
          "330: dissect_thrift_heur(tvbuff_t* tvb, packet_info* pinfo, proto_tree* tree, void *data) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "389:         offset++;",
          "390:     }",
          "394:     return TRUE;",
          "",
          "[Removed Lines]",
          "392:     dissect_thrift_common(tvb, pinfo, tree);",
          "",
          "[Added Lines]",
          "387:     dissect_thrift_common(tvb, pinfo, tree, data);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "491:         &ett_thrift,",
          "492:     };",
          "495:     proto_thrift = proto_register_protocol(\"Thrift Protocol\", \"Thrift\", \"thrift\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "489:     module_t *thrift_module;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "501:     proto_register_subtree_array(ett, array_length(ett));",
          "505: }",
          "507: void proto_reg_handoff_thrift(void) {",
          "508:     static dissector_handle_t thrift_http_handle;",
          "511:     thrift_http_handle = create_dissector_handle(dissect_thrift_heur, proto_thrift);",
          "514: }",
          "",
          "[Removed Lines]",
          "510:     heur_dissector_add(\"tcp\", dissect_thrift_heur, \"Thrift over TCP\", \"thrift_tcp\", proto_thrift, HEURISTIC_ENABLE);",
          "512:     dissector_add_string(\"media_type\", \"application/x-thrift\", thrift_http_handle);",
          "",
          "[Added Lines]",
          "501:     thrift_handle = register_dissector(\"thrift\", dissect_thrift_common, proto_thrift);",
          "503:     thrift_module = prefs_register_protocol(proto_thrift, proto_reg_handoff_thrift);",
          "505:     prefs_register_uint_preference(thrift_module, \"tls.port\",",
          "506:         \"Thrift TLS Port\",",
          "507:         \"Thrift TLS Port\",",
          "508:         10, &thrift_tls_port);",
          "514:     static guint saved_thrift_tls_port;",
          "516:     static gboolean thrift_initialized = FALSE;",
          "520:     if (!thrift_initialized) {",
          "521:         thrift_initialized = TRUE;",
          "522:         heur_dissector_add(\"tcp\", dissect_thrift_heur, \"Thrift over TCP\", \"thrift_tcp\", proto_thrift, HEURISTIC_ENABLE);",
          "523:         dissector_add_string(\"media_type\", \"application/x-thrift\", thrift_http_handle);",
          "524:     } else {",
          "525:         ssl_dissector_delete(saved_thrift_tls_port, thrift_handle);",
          "526:     }",
          "528:     ssl_dissector_add(thrift_tls_port, thrift_handle);",
          "529:     saved_thrift_tls_port = thrift_tls_port;",
          "",
          "---------------"
        ]
      }
    }
  ]
}