{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "217ca657d82f2324d6c5a97598bf4f77ebbb1fe7",
      "candidate_info": {
        "commit_hash": "217ca657d82f2324d6c5a97598bf4f77ebbb1fe7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/217ca657d82f2324d6c5a97598bf4f77ebbb1fe7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/attach.c",
          "src/main.c",
          "src/resolve.c",
          "src/sqlite.h.in",
          "src/sqliteInt.h",
          "src/tclsqlite.c",
          "src/treeview.c",
          "test/func.test",
          "test/tclsqlite.test"
        ],
        "message": "The SQLITE_DIRECTONLY flag, when added to sqlite3_create_function() prevents the function from being used inside a trigger or view.\n\nFossilOrigin-Name: de767376987f7668b0770c4920f1532e341b5a27f797d69c0f5e92b87d036170",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/attach.c||src/attach.c",
          "src/main.c||src/main.c",
          "src/resolve.c||src/resolve.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/tclsqlite.c||src/tclsqlite.c",
          "src/treeview.c||src/treeview.c",
          "test/func.test||test/func.test",
          "test/tclsqlite.test||test/tclsqlite.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 31e34fa3390196cdc3178bf120224b08df5ec58fa2c77079ede6e9461a430dad",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/attach.c||src/attach.c": [
          "File: src/attach.c -> src/attach.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "561: ){",
          "562:   while( pExpr ){",
          "563:     if( pExpr->op==TK_VARIABLE ){",
          "564:       if( pFix->pParse->db->init.busy ){",
          "565:         pExpr->op = TK_NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "563:     ExprSetProperty(pExpr, EP_Indirect);",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1718:   }",
          "1720:   assert( SQLITE_FUNC_CONSTANT==SQLITE_DETERMINISTIC );",
          "1722:   enc &= (SQLITE_FUNC_ENCMASK|SQLITE_ANY);",
          "1724: #ifndef SQLITE_OMIT_UTF16",
          "",
          "[Removed Lines]",
          "1721:   extraFlags = enc &  SQLITE_DETERMINISTIC;",
          "",
          "[Added Lines]",
          "1721:   assert( SQLITE_FUNC_DIRECT==SQLITE_DIRECTONLY );",
          "1722:   extraFlags = enc &  (SQLITE_DETERMINISTIC|SQLITE_DIRECTONLY);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1781:   p->u.pDestructor = pDestructor;",
          "1782:   p->funcFlags = (p->funcFlags & SQLITE_FUNC_ENCMASK) | extraFlags;",
          "1783:   testcase( p->funcFlags & SQLITE_DETERMINISTIC );",
          "1784:   p->xSFunc = xSFunc ? xSFunc : xStep;",
          "1785:   p->xFinalize = xFinal;",
          "1786:   p->xValue = xValue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1785:   testcase( p->funcFlags & SQLITE_DIRECTONLY );",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "824:           no_such_func = 1;",
          "825:           pDef = 0;",
          "826:         }",
          "827:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "826:         }else",
          "827:         if( (pDef->funcFlags & SQLITE_FUNC_DIRECT)!=0",
          "828:          && ExprHasProperty(pExpr, EP_Indirect)",
          "829:          && !IN_RENAME_OBJECT",
          "830:         ){",
          "833:           sqlite3ErrorMsg(pParse, \"%s() prohibited in triggers and views\",",
          "834:                           pDef->zName);",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "4981: #define SQLITE_DETERMINISTIC    0x800",
          "",
          "[Added Lines]",
          "4991: #define SQLITE_DETERMINISTIC    0x000000800",
          "4992: #define SQLITE_DIRECTONLY       0x000080000",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/tclsqlite.c||src/tclsqlite.c": [
          "File: src/tclsqlite.c -> src/tclsqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2845:       if( n>1 && strncmp(z, \"-deterministic\",n)==0 ){",
          "2846:         flags |= SQLITE_DETERMINISTIC;",
          "2847:       }else",
          "2848:       if( n>1 && strncmp(z, \"-returntype\", n)==0 ){",
          "2849:         const char *azType[] = {\"integer\", \"real\", \"text\", \"blob\", \"any\", 0};",
          "2850:         assert( SQLITE_INTEGER==1 && SQLITE_FLOAT==2 && SQLITE_TEXT==3 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2854:       if( n>1 && strncmp(z, \"-directonly\",n)==0 ){",
          "2855:         flags |= SQLITE_DIRECTONLY;",
          "2856:       }else",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2860:         eType++;",
          "2861:       }else{",
          "2862:         Tcl_AppendResult(interp, \"bad option \\\"\", z,",
          "2864:         );",
          "2865:         return TCL_ERROR;",
          "2866:       }",
          "",
          "[Removed Lines]",
          "2863:             \"\\\": must be -argcount, -deterministic or -returntype\", (char*)0",
          "",
          "[Added Lines]",
          "2872:             \"\\\": must be -argcount, -deterministic, -directonly,\"",
          "2873:             \" or -returntype\", (char*)0",
          "",
          "---------------"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "557: #endif",
          "558:       }",
          "559:       if( pExpr->op==TK_AGG_FUNCTION ){",
          "562:       }else{",
          "564:       }",
          "565:       if( pFarg ){",
          "566:         sqlite3TreeViewExprList(pView, pFarg, pWin!=0, 0);",
          "",
          "[Removed Lines]",
          "560:         sqlite3TreeViewLine(pView, \"AGG_FUNCTION%d %Q\",",
          "561:                              pExpr->op2, pExpr->u.zToken);",
          "563:         sqlite3TreeViewLine(pView, \"FUNCTION %Q\", pExpr->u.zToken);",
          "",
          "[Added Lines]",
          "560:         sqlite3TreeViewLine(pView, \"AGG_FUNCTION%d %Q%s\",",
          "561:                              pExpr->op2, pExpr->u.zToken, zFlgs);",
          "563:         sqlite3TreeViewLine(pView, \"FUNCTION %Q%s\", pExpr->u.zToken, zFlgs);",
          "",
          "---------------"
        ],
        "test/func.test||test/func.test": [
          "File: test/func.test -> test/func.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1419:   SELECT test_frombind(x.a,y.b,x.c,:123,y.e,x.f,$xyz+y.f) FROM t1 x, t1 y;",
          "1420: } {8}",
          "1425: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1422: # 2019-08-15",
          "1423: # Direct-only functions.",
          "1424: #",
          "1425: proc testdirectonly {x} {return [expr {$x*2}]}",
          "1426: do_test func-33.1 {",
          "1427:   db func testdirectonly -directonly testdirectonly",
          "1428:   db eval {SELECT testdirectonly(15)}",
          "1429: } {30}",
          "1430: do_catchsql_test func-33.2 {",
          "1431:   CREATE VIEW v33(y) AS SELECT testdirectonly(15);",
          "1432:   SELECT * FROM v33;",
          "1433: } {1 {testdirectonly() prohibited in triggers and views}}",
          "1434: do_execsql_test func-33.3 {",
          "1435:   SELECT * FROM (SELECT testdirectonly(15)) AS v33;",
          "1436: } {30}",
          "1437: do_execsql_test func-33.4 {",
          "1438:   WITH c(x) AS (SELECT testdirectonly(15))",
          "1439:   SELECT * FROM c;",
          "1440: } {30}",
          "1441: do_catchsql_test func-33.5 {",
          "1442:   WITH c(x) AS (SELECT * FROM v33)",
          "1443:   SELECT * FROM c;",
          "1444: } {1 {testdirectonly() prohibited in triggers and views}}",
          "1445: do_execsql_test func-33.10 {",
          "1446:   CREATE TABLE t33a(a,b);",
          "1447:   CREATE TABLE t33b(x,y);",
          "1448:   CREATE TRIGGER r1 AFTER INSERT ON t33a BEGIN",
          "1449:     INSERT INTO t33b(x,y) VALUES(testdirectonly(new.a),new.b);",
          "1450:   END;",
          "1451: } {}",
          "1452: do_catchsql_test func-33.11 {",
          "1453:   INSERT INTO t33a VALUES(1,2);",
          "1454: } {1 {testdirectonly() prohibited in triggers and views}}",
          "1455: do_execsql_test func-33.20 {",
          "1456:   ALTER TABLE t33a RENAME COLUMN a TO aaa;",
          "1457:   SELECT sql FROM sqlite_master WHERE name='r1';",
          "1458: } {{CREATE TRIGGER r1 AFTER INSERT ON t33a BEGIN",
          "1459:     INSERT INTO t33b(x,y) VALUES(testdirectonly(new.aaa),new.b);",
          "1460:   END}}",
          "",
          "---------------"
        ],
        "test/tclsqlite.test||test/tclsqlite.test": [
          "File: test/tclsqlite.test -> test/tclsqlite.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "790: do_test 17.6.3 {",
          "791:   list [catch { db function xyz -n object ret } msg] $msg",
          "794: # 2019-02-28: The \"bind_fallback\" command.",
          "795: #",
          "",
          "[Removed Lines]",
          "792: } {1 {bad option \"-n\": must be -argcount, -deterministic or -returntype}}",
          "",
          "[Added Lines]",
          "792: } {1 {bad option \"-n\": must be -argcount, -deterministic, -directonly, or -returntype}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "38f9c7194df5d9c86cbeaa04c22bdee56c3c5635",
      "candidate_info": {
        "commit_hash": "38f9c7194df5d9c86cbeaa04c22bdee56c3c5635",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/38f9c7194df5d9c86cbeaa04c22bdee56c3c5635",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "test/recover.test"
        ],
        "message": "Fixes for the \".recover\" shell command.\n\nFossilOrigin-Name: 8dcc1d89d955bf58c80a8c30a37960f0cf95719953951a92626cc332cc75ec60",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "test/recover.test||test/recover.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f193ca587f9e4f925f4f2343b0b07053bd6f93dd87fc6f8f41cf4479e90cf562",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6113:     sqlite3_stmt *pStmt = 0;",
          "6115:     rc = sqlite3_open(\"\", &dbtmp);",
          "6116:     if( rc==SQLITE_OK ){",
          "6117:       rc = sqlite3_exec(dbtmp, zSql, 0, 0, 0);",
          "6118:       if( rc==SQLITE_ERROR ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6116:     if( rc==SQLITE_OK ){",
          "6117:       rc = sqlite3_exec(dbtmp, \"PRAGMA writable_schema = on\", 0, 0, 0);",
          "6118:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6361:   if( rc==SQLITE_OK ){",
          "6362:     sqlite3_stmt *pStmt = 0;",
          "6363:     raw_printf(pState->out, \"BEGIN;\\n\");",
          "6365:         \"SELECT sql FROM recovery.schema \"",
          "6370:     );",
          "6371:     while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){",
          "6372:       const char *zCreateTable = (const char*)sqlite3_column_text(pStmt, 0);",
          "6374:     }",
          "6375:     shellFinalize(&rc, pStmt);",
          "6376:   }",
          "",
          "[Removed Lines]",
          "6364:     shellPrepare(pState->db, &rc,",
          "6366:         \"WHERE type='table' \"",
          "6367:         \"  AND length(sql)>6\"",
          "6368:         \"  AND sql LIKE 'create table%'\"",
          "6369:         \"  AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'\", &pStmt",
          "6373:       raw_printf(pState->out, \"%s;\\n\", zCreateTable);",
          "",
          "[Added Lines]",
          "6367:     raw_printf(pState->out, \"PRAGMA writable_schema = on;\\n\");",
          "6368:     shellPrepare(pState->db, &rc,",
          "6370:         \"WHERE type='table' AND sql LIKE 'create table%'\", &pStmt",
          "6374:       raw_printf(pState->out, \"CREATE TABLE IF NOT EXISTS %s;\\n\",",
          "6375:           &zCreateTable[12]",
          "6376:       );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6379:   shellPrepare(pState->db, &rc,",
          "6380:       \"SELECT root, intkey, max(maxlen) FROM recovery.map\"",
          "6382:   );",
          "6383:   while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pLoop) ){",
          "6384:     int iRoot = sqlite3_column_int(pLoop, 0);",
          "",
          "[Removed Lines]",
          "6381:       \" WHERE root>1 GROUP BY root, intkey\", &pLoop",
          "",
          "[Added Lines]",
          "6384:       \" WHERE root>1 GROUP BY root, intkey ORDER BY root=(\"",
          "6385:       \"  SELECT rootpage FROM recovery.schema WHERE name='sqlite_sequence'\"",
          "6386:       \")\", &pLoop",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6389:     pTab = recoverNewTable(pState, &rc, iRoot, bIntkey, nCol);",
          "6390:     if( pTab ){",
          "6391:       sqlite3_stmt *pData = 0;",
          "6392:       shellPreparePrintf(pState->db, &rc, &pData,",
          "6393:         \"SELECT max(field), group_concat(quote(value), ', ') \"",
          "6394:         \"FROM sqlite_dbdata WHERE pgno IN (\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6397:       if( 0==sqlite3_stricmp(pTab->zName, \"sqlite_sequence\") ){",
          "6398:         raw_printf(pState->out, \"DELETE FROM sqlite_sequence;\\n\");",
          "6399:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6410:   }",
          "6411:   shellFinalize(&rc, pLoop);",
          "6413:   if( rc==SQLITE_OK ){",
          "6414:     raw_printf(pState->out, \"COMMIT;\\n\");",
          "6415:   }",
          "6416:   sqlite3_exec(pState->db, \"DETACH recovery\", 0, 0, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6422:   if( rc==SQLITE_OK ){",
          "6423:     sqlite3_stmt *pStmt = 0;",
          "6424:     shellPrepare(pState->db, &rc,",
          "6425:         \"SELECT sql, name FROM recovery.schema \"",
          "6426:         \"WHERE (type='table' AND sql LIKE 'create table%') IS NOT TRUE\", &pStmt",
          "6427:     );",
          "6428:     while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){",
          "6429:       const char *zSql = (const char*)sqlite3_column_text(pStmt, 0);",
          "6430:       if( sqlite3_strnicmp(zSql, \"create virt\", 11)==0 ){",
          "6431:         const char *zName = (const char*)sqlite3_column_text(pStmt, 1);",
          "6432:         char *zPrint = shellMPrintf(&rc,",
          "6433:           \"INSERT INTO sqlite_master VALUES('table', %Q, %Q, 0, %Q)\",",
          "6434:           zName, zName, zSql",
          "6435:         );",
          "6436:         raw_printf(pState->out, \"%s;\\n\", zPrint);",
          "6437:         sqlite3_free(zPrint);",
          "6438:       }else{",
          "6439:         raw_printf(pState->out, \"%s;\\n\", zSql);",
          "6440:       }",
          "6441:     }",
          "6442:     shellFinalize(&rc, pStmt);",
          "6443:   }",
          "6446:     raw_printf(pState->out, \"PRAGMA writable_schema = off;\\n\");",
          "",
          "---------------"
        ],
        "test/recover.test||test/recover.test": [
          "File: test/recover.test -> test/recover.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 April 23",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "12: # Test the shell tool \".ar\" command.",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "17: set testprefix recover",
          "19: ifcapable !vtab {",
          "20:   finish_test; return",
          "21: }",
          "22: set CLI [test_find_cli]",
          "24: proc compare_result {db1 db2 sql} {",
          "25:   set r1 [$db1 eval $sql]",
          "26:   set r2 [$db2 eval $sql]",
          "27:   if {$r1 != $r2} {",
          "28:   puts \"r1: $r1\"",
          "29:   puts \"r2: $r2\"",
          "30:     error \"mismatch for $sql\"",
          "31:   }",
          "32:   return \"\"",
          "33: }",
          "35: proc compare_dbs {db1 db2} {",
          "36:   compare_result $db1 $db2 \"SELECT sql FROM sqlite_master ORDER BY 1\"",
          "37:   foreach tbl [$db1 eval {SELECT name FROM sqlite_master WHERE type='table'}] {",
          "38:     compare_result $db1 $db2 \"SELECT * FROM $tbl\"",
          "39:   }",
          "40: }",
          "42: proc do_recover_test {tn} {",
          "43:   set fd [open \"|$::CLI test.db .recover\"]",
          "44:   fconfigure $fd -encoding binary",
          "45:   fconfigure $fd -translation binary",
          "46:   set sql [read $fd]",
          "47:   close $fd",
          "49:   forcedelete test.db2",
          "50:   sqlite3 db2 test.db2",
          "51:   breakpoint",
          "52:   execsql $sql db2",
          "53:   uplevel [list do_test $tn [list compare_dbs db db2] {}]",
          "54:   db2 close",
          "55: }",
          "57: set doc {",
          "58:   hello",
          "59:   world",
          "60: }",
          "61: do_execsql_test 1.1.1 {",
          "62:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b, c);",
          "63:   INSERT INTO t1 VALUES(1, 4, X'1234567800');",
          "64:   INSERT INTO t1 VALUES(2, 'test', 8.1);",
          "65:   INSERT INTO t1 VALUES(3, $doc, 8.4);",
          "66: }",
          "67: do_recover_test 1.1.2",
          "69: do_execsql_test 1.2.1 \"",
          "70:   DELETE FROM t1;",
          "71:   INSERT INTO t1 VALUES(13, 'hello\\r\\nworld', 13);",
          "72: \"",
          "73: do_recover_test 1.2.2",
          "75: do_execsql_test 1.3.1 \"",
          "76:   CREATE TABLE t2(i INTEGER PRIMARY KEY AUTOINCREMENT, b, c);",
          "77:   INSERT INTO t2 VALUES(NULL, 1, 2);",
          "78:   INSERT INTO t2 VALUES(NULL, 3, 4);",
          "79:   INSERT INTO t2 VALUES(NULL, 5, 6);",
          "80:   CREATE TABLE t3(i INTEGER PRIMARY KEY AUTOINCREMENT, b, c);",
          "81:   INSERT INTO t3 VALUES(NULL, 1, 2);",
          "82:   INSERT INTO t3 VALUES(NULL, 3, 4);",
          "83:   INSERT INTO t3 VALUES(NULL, 5, 6);",
          "84:   DELETE FROM t2;",
          "85: \"",
          "86: do_recover_test 1.3.2",
          "88: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9877965f56dd0391242dab7617f2d8f06f3b4549",
      "candidate_info": {
        "commit_hash": "9877965f56dd0391242dab7617f2d8f06f3b4549",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9877965f56dd0391242dab7617f2d8f06f3b4549",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Have \".recover\" handle cases where the sqlite_master table contains malformed SQL statements.\n\nFossilOrigin-Name: e736da9c18fad138c5502d354c3553373cba15358b69e44b257f60def59422e2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 47fa65343e46c7782a173174952c637c5621e16229ece258dc7e7a556683ca0c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6388:  finished:",
          "6389:   sqlite3_close(dbtmp);",
          "6392:     recoverFreeTable(pTab);",
          "6393:     pTab = 0;",
          "6394:   }",
          "",
          "[Removed Lines]",
          "6391:   if( rc!=SQLITE_OK ){",
          "",
          "[Added Lines]",
          "6391:   if( rc!=SQLITE_OK || (pTab && pTab->zQuoted==0) ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6682:   shellPrepare(pState->db, &rc,",
          "6685:       , &pLoop",
          "6686:   );",
          "6687:   if( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pLoop) ){",
          "",
          "[Removed Lines]",
          "6683:       \"SELECT coalesce(max(maxlen), -2) FROM recovery.map\"",
          "6684:       \"  WHERE root>1 AND root NOT IN (SELECT rootpage FROM recovery.schema)\"",
          "",
          "[Added Lines]",
          "6683:       \"SELECT coalesce(max(maxlen), -2) FROM recovery.map WHERE root>1\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6689:   }",
          "6690:   shellFinalize(&rc, pLoop);",
          "6691:   pLoop = 0;",
          "6694:   shellPrepare(pState->db, &rc,",
          "6695:       \"SELECT pgno FROM recovery.map WHERE root=?\", &pPages",
          "",
          "[Removed Lines]",
          "6692:   pOrphan = recoverOrphanTable(pState, &rc, zLostAndFound, nOrphan);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6717:     pTab = recoverFindTable(pState, &rc, iRoot, bIntkey, nCol, &bNoop);",
          "6718:     if( bNoop || rc ) continue;",
          "6721:     if( 0==sqlite3_stricmp(pTab->zQuoted, \"'sqlite_sequence'\") ){",
          "6722:       raw_printf(pState->out, \"DELETE FROM sqlite_sequence;\\n\");",
          "",
          "[Removed Lines]",
          "6719:     if( pTab==0 ) pTab = pOrphan;",
          "",
          "[Added Lines]",
          "6717:     if( pTab==0 ){",
          "6718:       if( pOrphan==0 ){",
          "6719:         pOrphan = recoverOrphanTable(pState, &rc, zLostAndFound, nOrphan);",
          "6720:       }",
          "6721:       pTab = pOrphan;",
          "6722:       if( pTab==0 ) break;",
          "6723:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e5989723ba9b6510728d8a50f35347dc8aa4ee6b",
      "candidate_info": {
        "commit_hash": "e5989723ba9b6510728d8a50f35347dc8aa4ee6b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e5989723ba9b6510728d8a50f35347dc8aa4ee6b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/attach.c",
          "src/main.c",
          "src/sqliteInt.h"
        ],
        "message": "Honor key query parameters for SEE on the URI filename for ATTACH and VACUUM INTO.\n\nFossilOrigin-Name: 2e01096b8933a2315e3dffcd7d0de84c744c1b4be1d909388c61f0fd636ddb99",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/attach.c||src/attach.c",
          "src/main.c||src/main.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 69b0b2ee536fda8975f60643f7f1891db4649958aca476822ea2a632ce731992",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/attach.c||src/attach.c": [
          "File: src/attach.c -> src/attach.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:     assert( pVfs );",
          "156:     flags |= SQLITE_OPEN_MAIN_DB;",
          "157:     rc = sqlite3BtreeOpen(pVfs, zPath, db, &pNew->pBt, 0, flags);",
          "159:     db->nDb++;",
          "160:   }",
          "161:   db->noSharedCache = 0;",
          "162:   if( rc==SQLITE_CONSTRAINT ){",
          "",
          "[Removed Lines]",
          "158:     sqlite3_free( zPath );",
          "",
          "[Added Lines]",
          "159:     pNew->zDbSName = sqlite3DbStrDup(db, zName);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "184:     sqlite3BtreeLeave(pNew->pBt);",
          "185:   }",
          "186:   pNew->safety_level = SQLITE_DEFAULT_SYNCHRONOUS+1;",
          "188:   if( rc==SQLITE_OK && pNew->zDbSName==0 ){",
          "189:     rc = SQLITE_NOMEM_BKPT;",
          "190:   }",
          "",
          "[Removed Lines]",
          "187:   if( !REOPEN_AS_MEMDB(db) ) pNew->zDbSName = sqlite3DbStrDup(db, zName);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "212:         break;",
          "214:       case SQLITE_NULL:",
          "219:         }",
          "220:         break;",
          "221:     }",
          "222:   }",
          "223: #endif",
          "",
          "[Removed Lines]",
          "216:         sqlite3CodecGetKey(db, 0, (void**)&zKey, &nKey);",
          "217:         if( nKey || sqlite3BtreeGetOptimalReserve(db->aDb[0].pBt)>0 ){",
          "218:           rc = sqlite3CodecAttach(db, db->nDb-1, zKey, nKey);",
          "",
          "[Added Lines]",
          "216:         if( sqlite3CodecQueryParameters(db, zName, zPath)==0 ){",
          "217:           sqlite3CodecGetKey(db, 0, (void**)&zKey, &nKey);",
          "218:           if( nKey || sqlite3BtreeGetOptimalReserve(db->aDb[0].pBt)>0 ){",
          "219:             rc = sqlite3CodecAttach(db, db->nDb-1, zKey, nKey);",
          "220:           }",
          "226:   sqlite3_free( zPath );",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2942:   return rc;",
          "2943: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2945: #if defined(SQLITE_HAS_CODEC)",
          "2951: int sqlite3CodecQueryParameters(",
          "2955: ){",
          "2956:   const char *zKey;",
          "2957:   if( (zKey = sqlite3_uri_parameter(zUri, \"hexkey\"))!=0 && zKey[0] ){",
          "2958:     u8 iByte;",
          "2959:     int i;",
          "2960:     char zDecoded[40];",
          "2961:     for(i=0, iByte=0; i<sizeof(zDecoded)*2 && sqlite3Isxdigit(zKey[i]); i++){",
          "2962:       iByte = (iByte<<4) + sqlite3HexToInt(zKey[i]);",
          "2963:       if( (i&1)!=0 ) zDecoded[i/2] = iByte;",
          "2964:     }",
          "2965:     sqlite3_key_v2(db, zDb, zDecoded, i/2);",
          "2966:     return 1;",
          "2967:   }else if( (zKey = sqlite3_uri_parameter(zUri, \"key\"))!=0 ){",
          "2968:     sqlite3_key_v2(db, zDb, zKey, sqlite3Strlen30(zKey));",
          "2969:     return 1;",
          "2970:   }else if( (zKey = sqlite3_uri_parameter(zUri, \"textkey\"))!=0 ){",
          "2971:     sqlite3_key_v2(db, zDb, zKey, -1);",
          "2972:     return 1;",
          "2973:   }else{",
          "2974:     return 0;",
          "2975:   }",
          "2976: }",
          "2977: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3287:   }",
          "3288: #endif",
          "3289: #if defined(SQLITE_HAS_CODEC)",
          "3305: #endif",
          "3306:   sqlite3_free(zOpen);",
          "3307:   return rc & 0xff;",
          "3308: }",
          "",
          "[Removed Lines]",
          "3290:   if( rc==SQLITE_OK ){",
          "3291:     const char *zKey;",
          "3292:     if( (zKey = sqlite3_uri_parameter(zOpen, \"hexkey\"))!=0 && zKey[0] ){",
          "3293:       u8 iByte;",
          "3294:       int i;",
          "3295:       char zDecoded[40];",
          "3296:       for(i=0, iByte=0; i<sizeof(zDecoded)*2 && sqlite3Isxdigit(zKey[i]); i++){",
          "3297:         iByte = (iByte<<4) + sqlite3HexToInt(zKey[i]);",
          "3298:         if( (i&1)!=0 ) zDecoded[i/2] = iByte;",
          "3299:       }",
          "3300:       sqlite3_key_v2(db, 0, zDecoded, i/2);",
          "3301:     }else if( (zKey = sqlite3_uri_parameter(zOpen, \"key\"))!=0 ){",
          "3302:       sqlite3_key_v2(db, 0, zKey, sqlite3Strlen30(zKey));",
          "3303:     }",
          "3304:   }",
          "",
          "[Added Lines]",
          "3324:   if( rc==SQLITE_OK ) sqlite3CodecQueryParameters(db, 0, zOpen);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3882: void sqlite3EndTable(Parse*,Token*,Token*,u8,Select*);",
          "3883: int sqlite3ParseUri(const char*,const char*,unsigned int*,",
          "3884:                     sqlite3_vfs**,char**,char **);",
          "3885: Btree *sqlite3DbNameToBtree(sqlite3*,const char*);",
          "3887: #ifdef SQLITE_UNTESTABLE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3885: #ifdef SQLITE_HAS_CODEC",
          "3886:   int sqlite3CodecQueryParameters(sqlite3*,const char*,const char*);",
          "3887: #else",
          "3888: # define sqlite3CodecQueryParameters(A,B,C) 0",
          "3889: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e3bd232e2df1f4e6f537ba25764ba7428b6acb22",
      "candidate_info": {
        "commit_hash": "e3bd232e2df1f4e6f537ba25764ba7428b6acb22",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e3bd232e2df1f4e6f537ba25764ba7428b6acb22",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "Add the ability to override the new corruption detection logic of the previous checkin, in order to exercise downstream corruption detection during testing.\n\nFossilOrigin-Name: e859d3184606dd453b9fc4ee388922d7be4b61aad84a66ac82107935ffd56f3a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: af1e5873d44d31466023ae145bdfc6b4191eb48b62e5752c6e683bcf571980e7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2275:     if( pSrcIdx==0 ){",
          "2277:     }",
          "2280:     }",
          "2281:   }",
          "",
          "[Removed Lines]",
          "2278:     if( pSrcIdx->tnum==pDestIdx->tnum && pSrc->pSchema==pDest->pSchema ){",
          "",
          "[Added Lines]",
          "2278:     if( pSrcIdx->tnum==pDestIdx->tnum && pSrc->pSchema==pDest->pSchema",
          "2279:          && sqlite3FaultSim(411)==SQLITE_OK ){",
          "",
          "---------------"
        ]
      }
    }
  ]
}