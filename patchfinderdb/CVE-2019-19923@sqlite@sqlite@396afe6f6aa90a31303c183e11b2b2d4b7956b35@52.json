{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f4b331535d7a1f55eb5eb4fdab5ec0a50d1dd73a",
      "candidate_info": {
        "commit_hash": "f4b331535d7a1f55eb5eb4fdab5ec0a50d1dd73a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f4b331535d7a1f55eb5eb4fdab5ec0a50d1dd73a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "Improvement on the previous check-in.  Parse.rc is less reliable than Parse.nErr for detecting SQLITE_TOOBIG errors.\n\nFossilOrigin-Name: 8d478cfb92fdeb87591403fe1713b290fee309a38b71abee0002012935d1db98",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5d85d80ef8b216639244c6f4e6a2c0050af3cf9c3998f372bae4a19c0430f2fd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4797:   pTab->nRowLogEst = 200; assert( 200==sqlite3LogEst(1048576) );",
          "4798:   pTab->tabFlags |= TF_Ephemeral;",
          "4801: }",
          "",
          "[Removed Lines]",
          "4800:   return pParse->rc;",
          "",
          "[Added Lines]",
          "4800:   return pParse->nErr ? SQLITE_ERROR : SQLITE_OK;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7bf3133fef1265b9d600554fb8c3b72ecd3bf509",
      "candidate_info": {
        "commit_hash": "7bf3133fef1265b9d600554fb8c3b72ecd3bf509",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7bf3133fef1265b9d600554fb8c3b72ecd3bf509",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata7.db"
        ],
        "message": "New dbfuzz2 test cases added to test/fuzzdata7.db\n\nFossilOrigin-Name: 25975e1fb2be0c011542c0a6b001385cec8113662df93dc618f725f2a4692bc2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c1ac00706bae45fe9735061ada025880606cdfb8ecfdaa36b4e2d04275820861",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a1bd5c6aae64da59b5ef91f0fd08200cec8de359",
      "candidate_info": {
        "commit_hash": "a1bd5c6aae64da59b5ef91f0fd08200cec8de359",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a1bd5c6aae64da59b5ef91f0fd08200cec8de359",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c"
        ],
        "message": "Move a local variable declaration into the outermost scope in which it is used. This fixes an ASAN warning.\n\nFossilOrigin-Name: ac3b6021d9437ab1c027850d321f0a3e575b008763d8d515e2347f7d4e7c294b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0f850a25d67a752fe1e9059c0c3f78e00c222113e556a7605fd3c50817b573cb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1081:   Trigger *pNew = pParse->pNewTrigger;",
          "1082:   TriggerStep *pStep;",
          "1083:   NameContext sNC;",
          "1084:   int rc = SQLITE_OK;",
          "1086:   memset(&sNC, 0, sizeof(sNC));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1084:   SrcList sSrc;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1111:       if( pTarget==0 ){",
          "1112:         rc = SQLITE_ERROR;",
          "1113:       }else if( SQLITE_OK==(rc = sqlite3ViewGetColumnNames(pParse, pTarget)) ){",
          "1115:         memset(&sSrc, 0, sizeof(sSrc));",
          "1116:         sSrc.nSrc = 1;",
          "1117:         sSrc.a[0].zName = pStep->zTarget;",
          "",
          "[Removed Lines]",
          "1114:         SrcList sSrc;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ba7bd0200231c41f7683f123da019180ac371930",
      "candidate_info": {
        "commit_hash": "ba7bd0200231c41f7683f123da019180ac371930",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ba7bd0200231c41f7683f123da019180ac371930",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/index_usage.c"
        ],
        "message": "Fix an off-by-one error when parsing the names of indexes that do not have arguments in the index_usage utility.\n\nFossilOrigin-Name: dc794d8f518ed46536928a77a560d46e4f9365c30a00cd108f000d8556a66c00",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/index_usage.c||tool/index_usage.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a5e6be7cbc5d931308ddcc073c9cd6275c9711cae055d72a7c4aa71c1d15914c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/index_usage.c||tool/index_usage.c": [
          "File: tool/index_usage.c -> tool/index_usage.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "186:         z1 = strstr(zExplain, \" USING INDEX \");",
          "187:         if( z1==0 ) continue;",
          "188:         z1 += 13;",
          "190:         n = z2 - z1;",
          "191:         if( zUsing && sqlite3_strnicmp(zUsing, z1, n)==0 ){",
          "192:           printf(\"Using %s:\\n%s\\n\", zUsing, zLog);",
          "",
          "[Removed Lines]",
          "189:         for(z2=z1+1; z2[1] && z2[1]!='('; z2++){}",
          "",
          "[Added Lines]",
          "189:         for(z2=z1+1; z2[0] && z2[1]!='('; z2++){}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e94006eb4290b428c0fe16b2979540fdcc22a213",
      "candidate_info": {
        "commit_hash": "e94006eb4290b428c0fe16b2979540fdcc22a213",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e94006eb4290b428c0fe16b2979540fdcc22a213",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y",
          "tool/lemon.c"
        ],
        "message": "Enhance LEMON to provide the ability to mark a rules as one that will never reduce due to intervention of actions.  Use this new capability to designate the EXPLAIN rule as NEVER-REDUCES.\n\nFossilOrigin-Name: 136cdefb2f7b582ff1771ac7f9e733dc24c357605526cbfb1834937697c8a922",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y",
          "tool/lemon.c||tool/lemon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: aa3b0eb8c3438ddd3b660bc6bce4b1f4a0e3b5ec897079445231ee1b61210d6a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "120: ecmd ::= SEMI.",
          "121: ecmd ::= cmdx SEMI.",
          "122: %ifndef SQLITE_OMIT_EXPLAIN",
          "124: explain ::= EXPLAIN.              { pParse->explain = 1; }",
          "125: explain ::= EXPLAIN QUERY PLAN.   { pParse->explain = 2; }",
          "126: %endif  SQLITE_OMIT_EXPLAIN",
          "",
          "[Removed Lines]",
          "123: ecmd ::= explain cmdx SEMI.",
          "",
          "[Added Lines]",
          "123: ecmd ::= explain cmdx SEMI.       {NEVER-REDUCE}",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "304: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "302:   Boolean neverReduce;     /* Reduce is theoretically possible, but prevented",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2278: \"Code fragment beginning on this line is not the first \\",
          "2279: to follow the previous rule.\");",
          "2280:           psp->errorcnt++;",
          "2281:         }else{",
          "2282:           psp->prevrule->line = psp->tokenlineno;",
          "2283:           psp->prevrule->code = &x[1];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2283:         }else if( strcmp(x, \"{NEVER-REDUCE\")==0 ){",
          "2284:           psp->prevrule->neverReduce = 1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4745:     assert( rp->noCode );",
          "4746:     fprintf(out,\"      /* (%d) \", rp->iRule);",
          "4747:     writeRuleText(out, rp);",
          "4749:       fprintf(out, \" */ yytestcase(yyruleno==%d);\\n\", rp->iRule); lineno++;",
          "4750:     }else{",
          "4751:       fprintf(out, \" (OPTIMIZED OUT) */ assert(yyruleno!=%d);\\n\",",
          "",
          "[Removed Lines]",
          "4748:     if( rp->doesReduce ){",
          "",
          "[Added Lines]",
          "4752:     if( rp->neverReduce ){",
          "4753:       fprintf(out, \" (NEVER REDUCES) */ assert(yyruleno!=%d);\\n\",",
          "4754:               rp->iRule); lineno++;",
          "4755:     }else if( rp->doesReduce ){",
          "",
          "---------------"
        ]
      }
    }
  ]
}