{
  "cve_id": "CVE-2021-36084",
  "cve_desc": "The CIL compiler in SELinux 3.2 has a use-after-free in __cil_verify_classperms (called from __cil_verify_classpermission and __cil_pre_verify_helper).",
  "repo": "SELinuxProject/selinux",
  "patch_hash": "f34d3d30c8325e4847a6b696fe7a3936a8a361f3",
  "patch_info": {
    "commit_hash": "f34d3d30c8325e4847a6b696fe7a3936a8a361f3",
    "repo": "SELinuxProject/selinux",
    "commit_url": "https://github.com/SELinuxProject/selinux/commit/f34d3d30c8325e4847a6b696fe7a3936a8a361f3",
    "files": [
      "libsepol/cil/src/cil_reset_ast.c"
    ],
    "message": "libsepol/cil: Destroy classperms list when resetting classpermission\n\nNicolas Iooss reports:\n  A few months ago, OSS-Fuzz found a crash in the CIL compiler, which\n  got reported as\n  https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=28648 (the title\n  is misleading, or is caused by another issue that conflicts with the\n  one I report in this message). Here is a minimized CIL policy which\n  reproduces the issue:\n\n  (class CLASS (PERM))\n  (classorder (CLASS))\n  (sid SID)\n  (sidorder (SID))\n  (user USER)\n  (role ROLE)\n  (type TYPE)\n  (category CAT)\n  (categoryorder (CAT))\n  (sensitivity SENS)\n  (sensitivityorder (SENS))\n  (sensitivitycategory SENS (CAT))\n  (allow TYPE self (CLASS (PERM)))\n  (roletype ROLE TYPE)\n  (userrole USER ROLE)\n  (userlevel USER (SENS))\n  (userrange USER ((SENS)(SENS (CAT))))\n  (sidcontext SID (USER ROLE TYPE ((SENS)(SENS))))\n\n  (classpermission CLAPERM)\n\n  (optional OPT\n      (roletype nonexistingrole nonexistingtype)\n      (classpermissionset CLAPERM (CLASS (PERM)))\n  )\n\n  The CIL policy fuzzer (which mimics secilc built with clang Address\n  Sanitizer) reports:\n\n  ==36541==ERROR: AddressSanitizer: heap-use-after-free on address\n  0x603000004f98 at pc 0x56445134c842 bp 0x7ffe2a256590 sp\n  0x7ffe2a256588\n  READ of size 8 at 0x603000004f98 thread T0\n      #0 0x56445134c841 in __cil_verify_classperms\n  /selinux/libsepol/src/../cil/src/cil_verify.c:1620:8\n      #1 0x56445134a43e in __cil_verify_classpermission\n  /selinux/libsepol/src/../cil/src/cil_verify.c:1650:9\n      #2 0x56445134a43e in __cil_pre_verify_helper\n  /selinux/libsepol/src/../cil/src/cil_verify.c:1715:8\n      #3 0x5644513225ac in cil_tree_walk_core\n  /selinux/libsepol/src/../cil/src/cil_tree.c:272:9\n      #4 0x564451322ab1 in cil_tree_walk\n  /selinux/libsepol/src/../cil/src/cil_tree.c:316:7\n      #5 0x5644513226af in cil_tree_walk_core\n  /selinux/libsepol/src/../cil/src/cil_tree.c:284:9\n      #6 0x564451322ab1 in cil_tree_walk\n  /selinux/libsepol/src/../cil/src/cil_tree.c:316:7\n      #7 0x5644512b88fd in cil_pre_verify\n  /selinux/libsepol/src/../cil/src/cil_post.c:2510:7\n      #8 0x5644512b88fd in cil_post_process\n  /selinux/libsepol/src/../cil/src/cil_post.c:2524:7\n      #9 0x5644511856ff in cil_compile\n  /selinux/libsepol/src/../cil/src/cil.c:564:7\n\nThe classperms list of a classpermission rule is created and filled\nin when classpermissionset rules are processed, so it doesn't own any\npart of the list and shouldn't retain any of it when it is reset.\n\nDestroy the classperms list (without destroying the data in it)  when\nresetting a classpermission rule.\n\nReported-by: Nicolas Iooss <nicolas.iooss@m4x.org>\nSigned-off-by: James Carter <jwcart2@gmail.com>",
    "before_after_code_files": [
      "libsepol/cil/src/cil_reset_ast.c||libsepol/cil/src/cil_reset_ast.c"
    ]
  },
  "patch_diff": {
    "libsepol/cil/src/cil_reset_ast.c||libsepol/cil/src/cil_reset_ast.c": [
      "File: libsepol/cil/src/cil_reset_ast.c -> libsepol/cil/src/cil_reset_ast.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:   return;",
      "55:  }",
      "58: }",
      "60: static void cil_reset_classperms_set(struct cil_classperms_set *cp_set)",
      "",
      "[Removed Lines]",
      "57:  cil_reset_classperms_list(cp->classperms);",
      "",
      "[Added Lines]",
      "57:  cil_list_destroy(&cp->classperms, CIL_FALSE);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "521e6a2f478a4c7a7c198c017d4d12e8667d89e7",
      "candidate_info": {
        "commit_hash": "521e6a2f478a4c7a7c198c017d4d12e8667d89e7",
        "repo": "SELinuxProject/selinux",
        "commit_url": "https://github.com/SELinuxProject/selinux/commit/521e6a2f478a4c7a7c198c017d4d12e8667d89e7",
        "files": [
          "checkpolicy/policy_define.c",
          "libsepol/cil/src/cil_binary.c"
        ],
        "message": "libsepol/cil: fix signed overflow caused by using (1 << 31) - 1\n\nWhen compiling SELinux userspace tools with -ftrapv (this option\ngenerates traps for signed overflow on addition, subtraction,\nmultiplication operations, instead of silently wrapping around),\nsemodule crashes when running the tests from\nscripts/ci/fedora-test-runner.sh in a Fedora 32 virtual machine:\n\n    [root@localhost selinux-testsuite]# make test\n    make -C policy load\n    make[1]: Entering directory '/root/selinux-testsuite/policy'\n    # Test for \"expand-check = 0\" in /etc/selinux/semanage.conf\n    # General policy build\n    make[2]: Entering directory '/root/selinux-testsuite/policy/test_policy'\n    Compiling targeted test_policy module\n    Creating targeted test_policy.pp policy package\n    rm tmp/test_policy.mod.fc\n    make[2]: Leaving directory '/root/selinux-testsuite/policy/test_policy'\n    # General policy load\n    domain_fd_use --> off\n    /usr/sbin/semodule -i test_policy/test_policy.pp test_mlsconstrain.cil test_overlay_defaultrange.cil test_add_levels.cil test_glblub.cil\n    make[1]: *** [Makefile:174: load] Aborted (core dumped)\n\nUsing \"coredumpctl gdb\" leads to the following strack trace:\n\n    (gdb) bt\n    #0  0x00007f608fe4fa25 in raise () from /lib64/libc.so.6\n    #1  0x00007f608fe38895 in abort () from /lib64/libc.so.6\n    #2  0x00007f6090028aca in __addvsi3.cold () from /lib64/libsepol.so.1\n    #3  0x00007f6090096f59 in __avrule_xperm_setrangebits (low=30, high=30, xperms=0x8b9eea0)\n        at ../cil/src/cil_binary.c:1551\n    #4  0x00007f60900970dd in __cil_permx_bitmap_to_sepol_xperms_list (xperms=0xb650a30, xperms_list=0x7ffce2653b18)\n        at ../cil/src/cil_binary.c:1596\n    #5  0x00007f6090097286 in __cil_avrulex_ioctl_to_policydb (k=0xb8ec200 \"@\\023\\214\\022\\006\", datum=0xb650a30,\n        args=0x239a640) at ../cil/src/cil_binary.c:1649\n    #6  0x00007f609003f1e5 in hashtab_map (h=0x41f8710, apply=0x7f60900971da <__cil_avrulex_ioctl_to_policydb>,\n        args=0x239a640) at hashtab.c:234\n    #7  0x00007f609009ea19 in cil_binary_create_allocated_pdb (db=0x2394f10, policydb=0x239a640)\n        at ../cil/src/cil_binary.c:4969\n    #8  0x00007f609009d19d in cil_binary_create (db=0x2394f10, policydb=0x7ffce2653d30) at ../cil/src/cil_binary.c:4329\n    #9  0x00007f609008ec23 in cil_build_policydb_create_pdb (db=0x2394f10, sepol_db=0x7ffce2653d30)\n        at ../cil/src/cil.c:631\n    #10 0x00007f608fff4bf3 in semanage_direct_commit () from /lib64/libsemanage.so.1\n    #11 0x00007f608fff9fae in semanage_commit () from /lib64/libsemanage.so.1\n    #12 0x0000000000403e2b in main (argc=7, argv=0x7ffce2655058) at semodule.c:753\n\n    (gdb) f 3\n    #3  0x00007f6090096f59 in __avrule_xperm_setrangebits (low=30, high=30, xperms=0x8b9eea0)\n        at ../cil/src/cil_binary.c:1551\n    1551     xperms->perms[i] |= XPERM_SETBITS(h) - XPERM_SETBITS(low);\n\nA signed integer overflow therefore occurs in XPERM_SETBITS(h):\n\n    #define XPERM_SETBITS(x) ((1 << (x & 0x1f)) - 1)\n\nThis macro is expanded with h=31, so \"(1 << 31) - 1\" is computed:\n\n* (1 << 31) = -0x80000000 is the lowest signed 32-bit integer value\n* (1 << 31) - 1 overflows the capacity of a signed 32-bit integer and\n  results in 0x7fffffff (which is unsigned)\n\nUsing unsigned integers (with \"1U\") fixes the crash, as\n(1U << 31) = 0x80000000U has no overflowing issues.\n\nSigned-off-by: Nicolas Iooss <nicolas.iooss@m4x.org>\nAcked-by: Petr Lautrbach <plautrba@redhat.com>",
        "before_after_code_files": [
          "checkpolicy/policy_define.c||checkpolicy/policy_define.c",
          "libsepol/cil/src/cil_binary.c||libsepol/cil/src/cil_binary.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "checkpolicy/policy_define.c||checkpolicy/policy_define.c": [
          "File: checkpolicy/policy_define.c -> checkpolicy/policy_define.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2148: #define XPERM_IDX(x) (x >> 5)",
          "2152: #define XPERM_LOW(x) (x << 5)",
          "",
          "[Removed Lines]",
          "2150: #define XPERM_SETBITS(x) ((1 << (x & 0x1f)) - 1)",
          "",
          "[Added Lines]",
          "2150: #define XPERM_SETBITS(x) ((1U << (x & 0x1f)) - 1)",
          "",
          "---------------"
        ],
        "libsepol/cil/src/cil_binary.c||libsepol/cil/src/cil_binary.c": [
          "File: libsepol/cil/src/cil_binary.c -> libsepol/cil/src/cil_binary.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1527: #define XPERM_IDX(x) (x >> 5)",
          "1531: #define XPERM_LOW(x) (x << 5)",
          "",
          "[Removed Lines]",
          "1529: #define XPERM_SETBITS(x) ((1 << (x & 0x1f)) - 1)",
          "",
          "[Added Lines]",
          "1529: #define XPERM_SETBITS(x) ((1U << (x & 0x1f)) - 1)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8750fb68e693411dd1547dc20c2a30adc113f128",
      "candidate_info": {
        "commit_hash": "8750fb68e693411dd1547dc20c2a30adc113f128",
        "repo": "SELinuxProject/selinux",
        "commit_url": "https://github.com/SELinuxProject/selinux/commit/8750fb68e693411dd1547dc20c2a30adc113f128",
        "files": [
          "libsepol/src/policydb.c"
        ],
        "message": "libsepol: reject abnormal huge sid ids\n\nCheck if the sid value is saturated to guard dependent allocations.\n\n    ==19967== ERROR: libFuzzer: out-of-memory (malloc(7784628224))\n        #0 0x52dc61 in __sanitizer_print_stack_trace (./out/binpolicy-fuzzer+0x52dc61)\n        #1 0x475618 in fuzzer::PrintStackTrace() fuzzer.o\n        #2 0x458855 in fuzzer::Fuzzer::HandleMalloc(unsigned long) fuzzer.o\n        #3 0x45876a in fuzzer::MallocHook(void const volatile*, unsigned long) fuzzer.o\n        #4 0x534557 in __sanitizer::RunMallocHooks(void const*, unsigned long) (./out/binpolicy-fuzzer+0x534557)\n        #5 0x4aa7d7 in __asan::Allocator::Allocate(unsigned long, unsigned long, __sanitizer::BufferedStackTrace*, __asan::AllocType, bool) (./out/binpolicy-fuzzer+0x4aa7d7)\n        #6 0x4aabe3 in __asan::Allocator::Reallocate(void*, unsigned long, __sanitizer::BufferedStackTrace*) (./out/binpolicy-fuzzer+0x4aabe3)\n        #7 0x4aaa32 in __asan::asan_reallocarray(void*, unsigned long, unsigned long, __sanitizer::BufferedStackTrace*) (./out/binpolicy-fuzzer+0x4aaa32)\n        #8 0x525f8e in __interceptor_reallocarray (./out/binpolicy-fuzzer+0x525f8e)\n        #9 0x5ebad3 in strs_add_at_index ./libsepol/src/kernel_to_common.c:224:9\n        #10 0x5680eb in write_sids_to_conf ./libsepol/src/kernel_to_conf.c:466:8\n        #11 0x55c1c0 in write_sid_decl_rules_to_conf ./libsepol/src/kernel_to_conf.c:498:8\n        #12 0x55ad36 in sepol_kernel_policydb_to_conf ./libsepol/src/kernel_to_conf.c:3083:7\n        #13 0x55a34f in LLVMFuzzerTestOneInput ./libsepol/fuzz/binpolicy-fuzzer.c:38:9\n        #14 0x45aed3 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) fuzzer.o\n        #15 0x446a12 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) fuzzer.o\n        #16 0x44c93b in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) fuzzer.o\n        #17 0x475dd2 in main (./out/binpolicy-fuzzer+0x475dd2)\n        #18 0x7f085ac657ec in __libc_start_main csu/../csu/libc-start.c:332:16\n        #19 0x423689 in _start (./out/binpolicy-fuzzer+0x423689)\n\nSigned-off-by: Christian G\u00f6ttsche <cgzones@googlemail.com>",
        "before_after_code_files": [
          "libsepol/src/policydb.c||libsepol/src/policydb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libsepol/src/policydb.c||libsepol/src/policydb.c": [
          "File: libsepol/src/policydb.c -> libsepol/src/policydb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2883:     if (rc < 0)",
          "2884:      return -1;",
          "2885:     c->sid[0] = le32_to_cpu(buf[0]);",
          "2886:     if (context_read_and_validate",
          "2887:         (&c->context[0], p, fp))",
          "2888:      return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2886:     if (is_saturated(c->sid[0]))",
          "2887:      return -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2994:     if (rc < 0)",
          "2995:      return -1;",
          "2996:     c->sid[0] = le32_to_cpu(buf[0]);",
          "2997:     if (context_read_and_validate",
          "2998:         (&c->context[0], p, fp))",
          "2999:      return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2999:     if (is_saturated(c->sid[0]))",
          "3000:      return -1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "474b271b1b4962356eaff891bcbd6422b965b564",
      "candidate_info": {
        "commit_hash": "474b271b1b4962356eaff891bcbd6422b965b564",
        "repo": "SELinuxProject/selinux",
        "commit_url": "https://github.com/SELinuxProject/selinux/commit/474b271b1b4962356eaff891bcbd6422b965b564",
        "files": [
          "libsepol/src/policydb_validate.c"
        ],
        "message": "libsepol: free memory after policy validation\n\nFound while running the checkpolicy/test/dispol binary.\n\n    Direct leak of 24 byte(s) in 1 object(s) allocated from:\n        #0 0x49bacd in __interceptor_malloc (./checkpolicy/test/dispol+0x49bacd)\n        #1 0x5551e1 in ebitmap_set_bit ./libsepol/src/ebitmap.c:326:27\n        #2 0x517873 in create_gap_ebitmap ./libsepol/src/policydb_validate.c:23:8\n        #3 0x517873 in validate_init ./libsepol/src/policydb_validate.c:34:6\n        #4 0x50fa47 in validate_array_init ./libsepol/src/policydb_validate.c:44:6\n        #5 0x50fa47 in validate_policydb ./libsepol/src/policydb_validate.c:732:6\n        #6 0x4f22df in policydb_read ./libsepol/src/policydb.c:4538:6\n        #7 0x4cddb3 in main ./checkpolicy/test/dispol.c:437:8\n        #8 0x7f5980e47e49 in __libc_start_main csu/../csu/libc-start.c:314:16\n\n    Indirect leak of 48 byte(s) in 2 object(s) allocated from:\n        #0 0x49bacd in __interceptor_malloc (./checkpolicy/test/dispol+0x49bacd)\n        #1 0x5551e1 in ebitmap_set_bit ./libsepol/src/ebitmap.c:326:27\n        #2 0x517873 in create_gap_ebitmap ./libsepol/src/policydb_validate.c:23:8\n        #3 0x517873 in validate_init ./libsepol/src/policydb_validate.c:34:6\n        #4 0x50fa47 in validate_array_init ./libsepol/src/policydb_validate.c:44:6\n        #5 0x50fa47 in validate_policydb ./libsepol/src/policydb_validate.c:732:6\n        #6 0x4f22df in policydb_read ./libsepol/src/policydb.c:4538:6\n        #7 0x4cddb3 in main ./checkpolicy/test/dispol.c:437:8\n        #8 0x7f5980e47e49 in __libc_start_main csu/../csu/libc-start.c:314:16\n\nSigned-off-by: Christian G\u00f6ttsche <cgzones@googlemail.com>",
        "before_after_code_files": [
          "libsepol/src/policydb_validate.c||libsepol/src/policydb_validate.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libsepol/src/policydb_validate.c||libsepol/src/policydb_validate.c": [
          "File: libsepol/src/policydb_validate.c -> libsepol/src/policydb_validate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "722:  return -1;",
          "723: }",
          "728: int validate_policydb(sepol_handle_t *handle, policydb_t *p)",
          "729: {",
          "732:  if (validate_array_init(p, flavors))",
          "733:   goto bad;",
          "",
          "[Removed Lines]",
          "730:  validate_t flavors[SYM_NUM];",
          "",
          "[Added Lines]",
          "725: static void validate_array_destroy(validate_t flavors[])",
          "726: {",
          "727:  unsigned int i;",
          "729:  for (i = 0; i < SYM_NUM; i++) {",
          "730:   ebitmap_destroy(&flavors[i].gaps);",
          "731:  }",
          "732: }",
          "739:  validate_t flavors[SYM_NUM] = {};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "756:  if (validate_datum_arrays(handle, p, flavors))",
          "757:   goto bad;",
          "759:  return 0;",
          "761: bad:",
          "762:  ERR(handle, \"Invalid policydb\");",
          "763:  return -1;",
          "764: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "768:  validate_array_destroy(flavors);",
          "774:  validate_array_destroy(flavors);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c3d52a6a306ee5a99dd4524305176df9cdcbf30e",
      "candidate_info": {
        "commit_hash": "c3d52a6a306ee5a99dd4524305176df9cdcbf30e",
        "repo": "SELinuxProject/selinux",
        "commit_url": "https://github.com/SELinuxProject/selinux/commit/c3d52a6a306ee5a99dd4524305176df9cdcbf30e",
        "files": [
          "libsepol/src/policydb.c"
        ],
        "message": "libsepol: check for saturated class name length\n\nCheck the from the polciy read length value to guard allocations.\n\nIn the fuzzer build the value will also be bounded to avoid oom reports.\n\n    ==143646==ERROR: AddressSanitizer: allocator is out of memory trying to allocate 0xd60000000 bytes\n        #0 0x4dac18 in __interceptor_calloc (./out/binpolicy-fuzzer+0x4dac18)\n        #1 0x55d388 in scope_index_read ./libsepol/src/policydb.c:3945:7\n        #2 0x550097 in avrule_decl_read ./libsepol/src/policydb.c:3984:6\n        #3 0x550097 in avrule_block_read ./libsepol/src/policydb.c:4044:8\n        #4 0x54b3ac in policydb_read ./libsepol/src/policydb.c:4456:7\n        #5 0x518fd9 in LLVMFuzzerTestOneInput ./libsepol/fuzz/binpolicy-fuzzer.c:35:6\n        #6 0x43f623 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) (./out/binpolicy-fuzzer+0x43f623)\n        #7 0x42910f in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) (./out/binpolicy-fuzzer+0x42910f)\n        #8 0x42ee76 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (./out/binpolicy-fuzzer+0x42ee76)\n        #9 0x458ff2 in main (./out/binpolicy-fuzzer+0x458ff2)\n        #10 0x7fd37b7931c9 in __libc_start_call_main csu/../sysdeps/nptl/libc_start_call_main.h:58:16\n\nFound by oss-fuzz (#42909)\n\nSigned-off-by: Christian G\u00f6ttsche <cgzones@googlemail.com>",
        "before_after_code_files": [
          "libsepol/src/policydb.c||libsepol/src/policydb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libsepol/src/policydb.c||libsepol/src/policydb.c": [
          "File: libsepol/src/policydb.c -> libsepol/src/policydb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3937:  if (rc < 0)",
          "3938:   return -1;",
          "3939:  scope_index->class_perms_len = le32_to_cpu(buf[0]);",
          "3941:   scope_index->class_perms_map = NULL;",
          "3942:   return 0;",
          "3943:  }",
          "",
          "[Removed Lines]",
          "3940:  if (scope_index->class_perms_len == 0) {",
          "",
          "[Added Lines]",
          "3940:  if (zero_or_saturated(scope_index->class_perms_len)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2331dcaf8eaac2f4837546e25db6578c1eda070e",
      "candidate_info": {
        "commit_hash": "2331dcaf8eaac2f4837546e25db6578c1eda070e",
        "repo": "SELinuxProject/selinux",
        "commit_url": "https://github.com/SELinuxProject/selinux/commit/2331dcaf8eaac2f4837546e25db6578c1eda070e",
        "files": [
          "libsepol/src/avtab.c"
        ],
        "message": "libsepol: enforce avtab item limit\n\nCheck the current item count does not exceed the maximum allowed to\navoid stack overflows.\n\n    ==33660==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7fa64b8fc070 at pc 0x0000005acba0 bp 0x7ffc1f0b2870 sp 0x7ffc1f0b2868\n    READ of size 4 at 0x7fa64b8fc070 thread T0\n        #0 0x5acb9f in avtab_read_item ./libsepol/src/avtab.c:507:18\n        #1 0x5acec4 in avtab_read ./libsepol/src/avtab.c:611:8\n        #2 0x576ae3 in policydb_read ./libsepol/src/policydb.c:4433:7\n        #3 0x55a1fe in LLVMFuzzerTestOneInput ./libsepol/fuzz/binpolicy-fuzzer.c:24:6\n        #4 0x45aed3 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) fuzzer.o\n        #5 0x446a12 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) fuzzer.o\n        #6 0x44c93b in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) fuzzer.o\n        #7 0x475dd2 in main (./out/binpolicy-fuzzer+0x475dd2)\n        #8 0x7fa64cc867ec in __libc_start_main csu/../csu/libc-start.c:332:16\n        #9 0x423689 in _start (./out/binpolicy-fuzzer+0x423689)\n\n    Address 0x7fa64b8fc070 is located in stack of thread T0 at offset 112 in frame\n        #0 0x5aabdf in avtab_read_item ./libsepol/src/avtab.c:437\n\n      This frame has 6 object(s):\n        [32, 33) 'buf8' (line 438)\n        [48, 56) 'buf16' (line 439)\n        [80, 112) 'buf32' (line 440) <== Memory access at offset 112 overflows this variable\n        [144, 152) 'key' (line 441)\n        [176, 192) 'datum' (line 442)\n        [208, 244) 'xperms' (line 443)\n    HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n          (longjmp and C++ exceptions *are* supported)\n    SUMMARY: AddressSanitizer: stack-buffer-overflow ./libsepol/src/avtab.c:507:18 in avtab_read_item\n    Shadow bytes around the buggy address:\n      0x0ff5497177b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n      0x0ff5497177c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n      0x0ff5497177d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n      0x0ff5497177e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n      0x0ff5497177f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n    =>0x0ff549717800: f1 f1 f1 f1 01 f2 00 f2 f2 f2 00 00 00 00[f2]f2\n      0x0ff549717810: f2 f2 00 f2 f2 f2 00 00 f2 f2 00 00 00 00 04 f3\n      0x0ff549717820: f3 f3 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00\n      0x0ff549717830: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n      0x0ff549717840: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n      0x0ff549717850: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n    Shadow byte legend (one shadow byte represents 8 application bytes):\n      Addressable:           00\n      Partially addressable: 01 02 03 04 05 06 07\n      Heap left redzone:       fa\n      Freed heap region:       fd\n      Stack left redzone:      f1\n      Stack mid redzone:       f2\n      Stack right redzone:     f3\n      Stack after return:      f5\n      Stack use after scope:   f8\n      Global redzone:          f9\n      Global init order:       f6\n      Poisoned by user:        f7\n      Container overflow:      fc\n      Array cookie:            ac\n      Intra object redzone:    bb\n      ASan internal:           fe\n      Left alloca redzone:     ca\n      Right alloca redzone:    cb\n    ==33660==ABORTING\n\nSigned-off-by: Christian G\u00f6ttsche <cgzones@googlemail.com>",
        "before_after_code_files": [
          "libsepol/src/avtab.c||libsepol/src/avtab.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libsepol/src/avtab.c||libsepol/src/avtab.c": [
          "File: libsepol/src/avtab.c -> libsepol/src/avtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "504:   for (i = 0; i < ARRAY_SIZE(spec_order); i++) {",
          "505:    if (val & spec_order[i]) {",
          "506:     key.specified = spec_order[i] | enabled;",
          "507:     datum.data = le32_to_cpu(buf32[items++]);",
          "508:     rc = insertf(a, &key, &datum, p);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "507:      ERR(fp->handle, \"entry has too many items (%d/%d)\",",
          "508:          items + 1, items2);",
          "509:      return -1;",
          "510:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}