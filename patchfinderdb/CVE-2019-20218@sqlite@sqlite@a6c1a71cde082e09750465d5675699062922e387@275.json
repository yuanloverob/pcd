{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "aa243aa7cdf69b1e5bdecb4358517aa10681c235",
      "candidate_info": {
        "commit_hash": "aa243aa7cdf69b1e5bdecb4358517aa10681c235",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/aa243aa7cdf69b1e5bdecb4358517aa10681c235",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/btree02.test"
        ],
        "message": "Modify the btree02.test module so that it does not depend on whether TCL interprets a value as a string or as an integer.\n\nFossilOrigin-Name: d9e4f9574659c6285deba3dca68eca9989e615971cea3a901ffcda12fb4ee36f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/btree02.test||test/btree02.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ff45f9dd69fe1e1c7875e5bb73ac3dde2a31746475d3765cda9233f8e06e26ca",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/btree02.test||test/btree02.test": [
          "File: test/btree02.test -> test/btree02.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: do_execsql_test btree02-100 {",
          "22:   CREATE TABLE t1(a TEXT, ax INTEGER, b INT, PRIMARY KEY(a,ax)) WITHOUT ROWID;",
          "23:   WITH RECURSIVE c(i) AS (VALUES(1) UNION ALL SELECT i+1 FROM c WHERE i<10)",
          "25:   CREATE INDEX t1a ON t1(a);",
          "26:   CREATE TABLE t2(x,y);",
          "27:   CREATE TABLE t3(cnt);",
          "",
          "[Removed Lines]",
          "24:     INSERT INTO t1(a,ax,b) SELECT printf('%02x',i), random(), i FROM c;",
          "",
          "[Added Lines]",
          "24:     INSERT INTO t1(a,ax,b) SELECT printf('%02x',i+160), random(), i FROM c;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:     INSERT INTO t3(cnt) SELECT i FROM c;",
          "30:   SELECT count(*) FROM t1;",
          "31: } {10}",
          "32: do_test btree02-110 {",
          "33:   db eval BEGIN",
          "34:   set i 0",
          "35:   db eval {SELECT a, ax, b, cnt FROM t1 CROSS JOIN t3 WHERE b IS NOT NULL} {",
          "38:     db eval {INSERT INTO t2(x,y) VALUES($b,$cnt)}",
          "39:     # puts \"a,b,cnt = ($a,$b,$cnt)\"",
          "40:     incr i",
          "41:     if {$i%2==1} {",
          "42:       set bx [expr {$b+1000}]",
          "44:       db eval {INSERT INTO t1(a,ax,b) VALUES(printf('(%s)',$a),random(),$bx)}",
          "45:     } else {",
          "46:       # puts \"DELETE a=$a\"",
          "47:       db eval {DELETE FROM t1 WHERE a=$a}",
          "48:     }",
          "49:     db eval {COMMIT; BEGIN}",
          "50:   }",
          "51:   db one {COMMIT; SELECT count(*) FROM t1;}",
          "54: finish_test",
          "",
          "[Removed Lines]",
          "36:     if {$a==\"\"} {set a 0}",
          "37:     if {$b==\"\"} {set b 0}",
          "43:       # puts \"INSERT ($a),$bx\"",
          "52: } {27}",
          "",
          "[Added Lines]",
          "33: proc showt1 {} {",
          "34:   puts -nonewline \"t1: \"",
          "35:   puts [db eval {SELECT printf('(%s,%s)',quote(a),quote(b)) FROM t1}]",
          "36: }",
          "41:   # showt1",
          "43:     if {$a==\"\"} continue",
          "49:       #  puts \"INSERT ($a),$bx\"",
          "51:       # showt1",
          "55:       # showt1",
          "60: } {10}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2eb2ca839185e9bd5ef57da7078adecbd2e56994",
      "candidate_info": {
        "commit_hash": "2eb2ca839185e9bd5ef57da7078adecbd2e56994",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2eb2ca839185e9bd5ef57da7078adecbd2e56994",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbesort.c"
        ],
        "message": "Avoid a sanitizer error (pointer arithmatic overflow) in vdbesort.c.\n\nFossilOrigin-Name: af61a2fc45a0fa1277d7453779238b77de4c298a9f60714b7dc62ddca5874f80",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbesort.c||src/vdbesort.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4de4480ffdea1e923c4b964692ccde92d713c8b6c056bb04bddf1ff55ee891ec",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbesort.c||src/vdbesort.c": [
          "File: src/vdbesort.c -> src/vdbesort.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1829:     if( nMin>pSorter->nMemory ){",
          "1830:       u8 *aNew;",
          "1832:       sqlite3_int64 nNew = 2 * (sqlite3_int64)pSorter->nMemory;",
          "1833:       while( nNew < nMin ) nNew = nNew*2;",
          "1834:       if( nNew > pSorter->mxPmaSize ) nNew = pSorter->mxPmaSize;",
          "1835:       if( nNew < nMin ) nNew = nMin;",
          "1837:       aNew = sqlite3Realloc(pSorter->list.aMemory, nNew);",
          "1838:       if( !aNew ) return SQLITE_NOMEM_BKPT;",
          "1840:       pSorter->list.aMemory = aNew;",
          "1841:       pSorter->nMemory = nNew;",
          "1842:     }",
          "",
          "[Removed Lines]",
          "1831:       int iListOff = (u8*)pSorter->list.pList - pSorter->list.aMemory;",
          "1839:       pSorter->list.pList = (SorterRecord*)&aNew[iListOff];",
          "",
          "[Added Lines]",
          "1832:       int iListOff = -1;",
          "1833:       if( pSorter->list.pList ){",
          "1834:         iListOff = (u8*)pSorter->list.pList - pSorter->list.aMemory;",
          "1835:       }",
          "1841:       if( iListOff>=0 ){",
          "1842:         pSorter->list.pList = (SorterRecord*)&aNew[iListOff];",
          "1843:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3fee9de239901b9e71110c448e5876617e3b2940",
      "candidate_info": {
        "commit_hash": "3fee9de239901b9e71110c448e5876617e3b2940",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3fee9de239901b9e71110c448e5876617e3b2940",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5misc.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix another case where malformed utf-8 was being mishandled in fts5. Fix for [df46a6f3].\n\nFossilOrigin-Name: 1c0a05b09a97e6e2e9b11c31ed6ec7e6484686614b587ebfd0cfe27d973ba461",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5318:   for(i=0; i<nChar; i++){",
          "5320:     if( (unsigned char)p[n++]>=0xc0 ){",
          "5322:       while( (p[n] & 0xc0)==0x80 ){",
          "5323:         n++;",
          "5325:       }",
          "5326:     }",
          "5327:   }",
          "",
          "[Removed Lines]",
          "5321:       if( n>=nByte ) break;",
          "5324:         if( n>=nByte ) break;",
          "",
          "[Added Lines]",
          "5321:       if( n>=nByte ) return 0;",
          "5324:         if( n>=nByte ){",
          "5325:           if( i+1==nChar ) break;",
          "5326:           return 0;",
          "5327:         }",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test": [
          "File: ext/fts5/test/fts5misc.test -> ext/fts5/test/fts5misc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "266:   INSERT INTO vt1(vt1) VALUES('integrity-check');",
          "267: }",
          "269: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "269: #-------------------------------------------------------------------------",
          "270: #",
          "271: reset_db",
          "272: do_execsql_test 11.0 {",
          "273:   CREATE VIRTUAL TABLE vt0 USING fts5(",
          "274:       c0, prefix = 71, tokenize = \"porter ascii\", prefix = 9",
          "275:   );",
          "276: } {}",
          "278: do_execsql_test 11.1 {",
          "279:   BEGIN;",
          "280:   INSERT INTO vt0(c0) VALUES (x'e8');",
          "281: }",
          "282: do_execsql_test 11.2 {",
          "283:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "284: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4630c1ec013a4c2e54a34c9a64b2c803ac3912450de660497eb34ee21c91f426",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6bab6f2b4d4acc11ed8b4f420b84bcdc7d95799c",
      "candidate_info": {
        "commit_hash": "6bab6f2b4d4acc11ed8b4f420b84bcdc7d95799c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6bab6f2b4d4acc11ed8b4f420b84bcdc7d95799c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c",
          "test/select3.test"
        ],
        "message": "Disable the optimization where a REAL value with no fractional part is stored as an INTEGER when the integer uses as much space as the real value it proposes to stand in for (8 bytes).  This avoids corner cases of comparing integers against real values that are beyond the resolution of an IEEE 754 double.  Fix for ticket [6c1d3febc00b22d457c78c2]\n\nFossilOrigin-Name: 9b0915272f4d4052aa31e9297424a7db9a0234b676e8e2a44c3f2dc54236705a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c",
          "test/select3.test||test/select3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 20f06bf2e659212a68dcf138e444da7bd4220548ec15a97cfd7eb82e028b3630",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3458:     if( u<=2147483647 ){ *pLen = 4; return 4; }",
          "3459:     if( u<=MAX_6BYTE ){ *pLen = 6; return 5; }",
          "3461:     return 6;",
          "3462:   }",
          "3463:   if( flags&MEM_Real ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3463:     if( flags&MEM_IntReal ){",
          "3467:       pMem->u.r = (double)pMem->u.i;",
          "3468:       pMem->flags &= ~MEM_IntReal;",
          "3469:       pMem->flags |= MEM_Real;",
          "3470:       return 7;",
          "3471:     }",
          "",
          "---------------"
        ],
        "test/select3.test||test/select3.test": [
          "File: test/select3.test -> test/select3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "261:   }",
          "262: } {real}",
          "264: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "264: # 2019-05-09 ticket https://www.sqlite.org/src/tktview/6c1d3febc00b22d457c7",
          "265: #",
          "266: unset -nocomplain x",
          "267: foreach {id x} {",
          "268:   100 127",
          "269:   101 128",
          "270:   102 -127",
          "271:   103 -128",
          "272:   104 -129",
          "273:   110 32767",
          "274:   111 32768",
          "275:   112 -32767",
          "276:   113 -32768",
          "277:   114 -32769",
          "278:   120 2147483647",
          "279:   121 2147483648",
          "280:   122 -2147483647",
          "281:   123 -2147483648",
          "282:   124 -2147483649",
          "283:   130 140737488355327",
          "284:   131 140737488355328",
          "285:   132 -140737488355327",
          "286:   133 -140737488355328",
          "287:   134 -140737488355329",
          "288:   140 9223372036854775807",
          "289:   141 -9223372036854775807",
          "290:   142 -9223372036854775808",
          "291:   143 9223372036854775806",
          "292:   144 9223372036854775805",
          "293:   145 -9223372036854775806",
          "294:   146 -9223372036854775805",
          "296: } {",
          "297:   set x [expr {$x+0}]",
          "298:   do_execsql_test select3-8.$id {",
          "299:      DROP TABLE IF EXISTS t1;",
          "300:      CREATE TABLE t1 (c0, c1 REAL PRIMARY KEY);",
          "301:      INSERT INTO t1(c0, c1) VALUES (0, $x), (0, 0);",
          "302:      UPDATE t1 SET c0 = NULL;",
          "303:      UPDATE OR REPLACE t1 SET c1 = 1;",
          "304:      SELECT DISTINCT * FROM t1 WHERE (t1.c0 IS NULL);",
          "305:      PRAGMA integrity_check;",
          "306:   } {{} 1.0 ok}",
          "307: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "82642f815bc9f31af3403fbbdf94d6f8d9ab3615",
      "candidate_info": {
        "commit_hash": "82642f815bc9f31af3403fbbdf94d6f8d9ab3615",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/82642f815bc9f31af3403fbbdf94d6f8d9ab3615",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Ensure that the nProgressLimit variable is always initialized in sqlite3VdbeExec(), even if the routine jumps to its exit processing early.\n\nFossilOrigin-Name: 167b91df77fff1a84791f6ab5f72239b90475475be690a838248119b6dd312f0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 68cce272e7f7cbc0c319ee8b7ff674d652cb1e95e903d99d848c41dff2b5d304",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "624:   sqlite3VdbeEnter(p);",
          "625:   if( p->rc==SQLITE_NOMEM ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "625: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK",
          "626:   if( db->xProgress ){",
          "627:     u32 iPrior = p->aCounter[SQLITE_STMTSTATUS_VM_STEP];",
          "628:     assert( 0 < db->nProgressOps );",
          "629:     nProgressLimit = db->nProgressOps - (iPrior % db->nProgressOps);",
          "630:   }else{",
          "631:     nProgressLimit = 0xffffffff;",
          "632:   }",
          "633: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "635:   db->busyHandler.nBusy = 0;",
          "636:   if( db->u1.isInterrupted ) goto abort_due_to_interrupt;",
          "637:   sqlite3VdbeIOTraceSql(p);",
          "647: #ifdef SQLITE_DEBUG",
          "648:   sqlite3BeginBenignMalloc();",
          "649:   if( p->pc==0",
          "",
          "[Removed Lines]",
          "638: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK",
          "639:   if( db->xProgress ){",
          "640:     u32 iPrior = p->aCounter[SQLITE_STMTSTATUS_VM_STEP];",
          "641:     assert( 0 < db->nProgressOps );",
          "642:     nProgressLimit = db->nProgressOps - (iPrior % db->nProgressOps);",
          "643:   }else{",
          "644:     nProgressLimit = 0xffffffff;",
          "645:   }",
          "646: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}