{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "418454c63fe1d6f3083542110d17cf561b8f369f",
      "candidate_info": {
        "commit_hash": "418454c63fe1d6f3083542110d17cf561b8f369f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/418454c63fe1d6f3083542110d17cf561b8f369f",
        "files": [
          "ext/session/sessionwor.test",
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "For SQLITE_ENABLE_PREUPDATE_HOOK builds, disable the optimization for a REPLACE command on a WITHOUT ROWID table with no indexes, triggers or foreign key constraints that causes SQLite to clobber any existing row without separately checking for it. This optimization causes SQLite to omit the expected pre-update-hook callbacks.\n\nFossilOrigin-Name: 6281ef974c0ac7a7133c9e1e04c09fdbd627c019c6ff3227293548caf8283864",
        "before_after_code_files": [
          "ext/session/sessionwor.test||ext/session/sessionwor.test",
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/session/sessionwor.test||ext/session/sessionwor.test": [
          "File: ext/session/sessionwor.test -> ext/session/sessionwor.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:   sqlite3 db2 test.db2",
          "31: }",
          "40: } {",
          "48: }",
          "52: } {",
          "54: }",
          "56: finish_test",
          "",
          "[Removed Lines]",
          "34: do_execsql_test 1.0 {",
          "35:   CREATE TABLE t1(a PRIMARY KEY, b) WITHOUT ROWID;",
          "36: }",
          "38: do_iterator_test 1.1 t1 {",
          "39:   INSERT INTO t1 VALUES('one', 'two');",
          "41:   {INSERT t1 0 X. {} {t one t two}}",
          "42: }",
          "44: do_iterator_test 1.2 t1 {",
          "45:   UPDATE t1 SET b='three'",
          "46: } {",
          "47:   {UPDATE t1 0 X. {t one t two} {{} {} t three}}",
          "50: do_iterator_test 1.3 t1 {",
          "51:   DELETE FROM t1;",
          "53:   {DELETE t1 0 X. {t one t three} {}}",
          "",
          "[Added Lines]",
          "33: foreach {tn wo} {",
          "34:   1 \"\"",
          "35:   2 \"WITHOUT ROWID\"",
          "37:   reset_db",
          "39:   do_execsql_test 1.$tn.0 \"CREATE TABLE t1(a PRIMARY KEY, b) $wo ;\"",
          "41:   do_iterator_test 1.$tn.1 t1 {",
          "42:     INSERT INTO t1 VALUES('one', 'two');",
          "43:   } {",
          "44:     {INSERT t1 0 X. {} {t one t two}}",
          "45:   }",
          "47:   do_iterator_test 1.$tn.2 t1 {",
          "48:     UPDATE t1 SET b='three'",
          "49:   } {",
          "50:     {UPDATE t1 0 X. {t one t two} {{} {} t three}}",
          "51:   }",
          "53:   do_iterator_test 1.$tn.3 t1 {",
          "54:     REPLACE INTO t1 VALUES('one', 'four');",
          "55:   } {",
          "56:     {UPDATE t1 0 X. {t one t three} {{} {} t four}}",
          "57:   }",
          "59:   do_iterator_test 1.$tn.4 t1 {",
          "60:     DELETE FROM t1;",
          "61:   } {",
          "62:     {DELETE t1 0 X. {t one t four} {}}",
          "63:   }",
          "66: foreach {tn wo} {",
          "67:   1 \"\"",
          "68:   2 \"WITHOUT ROWID\"",
          "70:   reset_db",
          "72:   do_execsql_test 2.$tn.0 \"CREATE TABLE t1(a INTEGER PRIMARY KEY, b) $wo ;\"",
          "74:   do_iterator_test 1.1 t1 {",
          "75:     INSERT INTO t1 VALUES(1, 'two');",
          "76:   } {",
          "77:     {INSERT t1 0 X. {} {i 1 t two}}",
          "78:   }",
          "80:   do_iterator_test 2.$tn.2 t1 {",
          "81:     UPDATE t1 SET b='three'",
          "82:   } {",
          "83:     {UPDATE t1 0 X. {i 1 t two} {{} {} t three}}",
          "84:   }",
          "86:   do_iterator_test 2.$tn.3 t1 {",
          "87:     REPLACE INTO t1 VALUES(1, 'four');",
          "88:   } {",
          "89:     {UPDATE t1 0 X. {i 1 t three} {{} {} t four}}",
          "90:   }",
          "92:   do_iterator_test 2.$tn.4 t1 {",
          "93:     DELETE FROM t1;",
          "94:   } {",
          "95:     {DELETE t1 0 X. {i 1 t four} {}}",
          "96:   }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6064584d578f0ac7aba3f67912a5d9eb1a3c6001469f6b9becbe68871131f887",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1719: #ifndef SQLITE_ENABLE_PREUPDATE_HOOK",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "72b9fdcf207adbf9632958d4e7ffb83d37fb452f",
      "candidate_info": {
        "commit_hash": "72b9fdcf207adbf9632958d4e7ffb83d37fb452f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/72b9fdcf207adbf9632958d4e7ffb83d37fb452f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/pg_common.tcl",
          "test/window6.test",
          "test/window8.tcl",
          "test/window8.test",
          "test/windowerr.tcl",
          "test/windowerr.test"
        ],
        "message": "Add support for RANGE window frames. Some cases still do not work.\n\nFossilOrigin-Name: ffc32b246d92d53c66094afe11950b53ffab6a1c230c602eebbfedafb2eb57f4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/pg_common.tcl||test/pg_common.tcl",
          "test/window6.test||test/window6.test",
          "test/window8.tcl||test/window8.tcl",
          "test/window8.test||test/window8.test",
          "test/windowerr.tcl||test/windowerr.tcl",
          "test/windowerr.test||test/windowerr.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 53ea550ce759ae4683bcf0ae3af655bfe04f85db70f74edee6bcab56d83bb041",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "559:   }else{",
          "560:     sqlite3WindowChain(pParse, pWin, pList);",
          "561:   }",
          "562:   if( pFunc->funcFlags & SQLITE_FUNC_WINDOW ){",
          "563:     sqlite3 *db = pParse->db;",
          "564:     if( pWin->pFilter ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "562:   if( (pWin->eType==TK_RANGE)",
          "563:    && (pWin->pStart || pWin->pEnd)",
          "564:    && (pWin->pOrderBy==0 || pWin->pOrderBy->nExpr!=1)",
          "565:   ){",
          "566:     sqlite3ErrorMsg(pParse,",
          "567:       \"RANGE with offset PRECEDING/FOLLOWING requires one ORDER BY expression\"",
          "568:     );",
          "569:   }else",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "927:     eType = TK_RANGE;",
          "928:   }",
          "",
          "[Removed Lines]",
          "933:   if( eType==TK_RANGE && (pStart!=0 || pEnd!=0) ){",
          "934:     sqlite3ErrorMsg(pParse, \"RANGE must use only UNBOUNDED or CURRENT ROW\");",
          "935:     goto windowAllocErr;",
          "936:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "952:   if( (eStart==TK_CURRENT && eEnd==TK_PRECEDING)",
          "953:    || (eStart==TK_FOLLOWING && (eEnd==TK_PRECEDING || eEnd==TK_CURRENT))",
          "954:   ){",
          "956:     goto windowAllocErr;",
          "957:   }",
          "",
          "[Removed Lines]",
          "955:     sqlite3ErrorMsg(pParse, \"unsupported frame delimiter for ROWS\");",
          "",
          "[Added Lines]",
          "955:     sqlite3ErrorMsg(pParse, \"unsupported frame specification\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1485:     sqlite3VdbeAppendP4(v, (void*)pKeyInfo, P4_KEYINFO);",
          "1486:     addr = sqlite3VdbeAddOp3(",
          "1487:         v, OP_Jump, sqlite3VdbeCurrentAddr(v)+1, 0, sqlite3VdbeCurrentAddr(v)+1",
          "1489:     VdbeCoverageEqNe(v);",
          "1490:     sqlite3VdbeAddOp3(v, OP_Copy, regNew, regOld, nVal-1);",
          "1491:   }else{",
          "",
          "[Removed Lines]",
          "1488:         );",
          "",
          "[Added Lines]",
          "1488:     );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1539:   }",
          "1540: }",
          "1542: static int windowCodeOp(",
          "1543:  WindowCodeArg *p,",
          "1544:  int op,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1550: static void windowCodeRangeTest(",
          "1551:   WindowCodeArg *p,",
          "1553:   int csr1,",
          "1554:   int regVal,",
          "1555:   int csr2,",
          "1556:   int lbl",
          "1557: ){",
          "1558:   Parse *pParse = p->pParse;",
          "1559:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "1560:   int reg1 = sqlite3GetTempReg(pParse);",
          "1561:   int reg2 = sqlite3GetTempReg(pParse);",
          "1562:   windowReadPeerValues(p, csr1, reg1);",
          "1563:   windowReadPeerValues(p, csr2, reg2);",
          "1564:   sqlite3VdbeAddOp3(v, OP_Add, reg1, regVal, reg1);",
          "1565:   sqlite3VdbeAddOp3(v, op, reg2, lbl, reg1);",
          "1566:   sqlite3VdbeAddOp2(v, OP_Rowid, csr1, reg1);",
          "1567:   sqlite3VdbeAddOp2(v, OP_Rowid, csr2, reg2);",
          "1568:   sqlite3VdbeAddOp3(v, OP_Gt, reg2, lbl, reg1);",
          "1569:   sqlite3ReleaseTempReg(pParse, reg1);",
          "1570:   sqlite3ReleaseTempReg(pParse, reg2);",
          "1572:   assert( op==OP_Ge || op==OP_Gt || op==OP_Lt || op==OP_Le );",
          "1573: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1555:   int addrGoto = 0;",
          "1556:   int bPeer = (pMWin->eType!=TK_ROWS);",
          "1560:   if( op==WINDOW_AGGINVERSE && pMWin->eStart==TK_UNBOUNDED ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1591:   int lblDone = sqlite3VdbeMakeLabel(pParse);",
          "1592:   int addrNextRange = 0;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1563:   }",
          "1565:   if( regCountdown>0 ){",
          "1567:   }",
          "1569:   if( op==WINDOW_RETURN_ROW ){",
          "",
          "[Removed Lines]",
          "1566:     addrIf = sqlite3VdbeAddOp3(v, OP_IfPos, regCountdown, 0, 1);",
          "",
          "[Added Lines]",
          "1602:     if( pMWin->eType==TK_RANGE ){",
          "1603:       addrNextRange = sqlite3VdbeCurrentAddr(v);",
          "1605:       switch( op ){",
          "1606:         case WINDOW_RETURN_ROW: {",
          "1607:           assert( 0 );",
          "1608:           break;",
          "1609:         }",
          "1611:         case WINDOW_AGGINVERSE: {",
          "1612:           if( pMWin->eStart==TK_FOLLOWING ){",
          "1613:             windowCodeRangeTest(",
          "1614:                 p, OP_Le, p->current.csr, regCountdown, p->start.csr, lblDone",
          "1615:             );",
          "1616:           }else{",
          "1617:             windowCodeRangeTest(",
          "1618:                 p, OP_Ge, p->start.csr, regCountdown, p->current.csr, lblDone",
          "1619:             );",
          "1620:           }",
          "1621:           break;",
          "1622:         }",
          "1624:         case WINDOW_AGGSTEP: {",
          "1625:           windowCodeRangeTest(",
          "1626:             p, OP_Gt, p->end.csr, regCountdown, p->current.csr, lblDone",
          "1627:           );",
          "1628:           break;",
          "1629:         }",
          "1630:       }",
          "1632:     }else{",
          "1633:       addrIf = sqlite3VdbeAddOp3(v, OP_IfPos, regCountdown, 0, 1);",
          "1634:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1610:     sqlite3ReleaseTempRange(pParse, regTmp, nReg);",
          "1611:   }",
          "1613:   if( addrGoto ) sqlite3VdbeJumpHere(v, addrGoto);",
          "1614:   if( addrIf ) sqlite3VdbeJumpHere(v, addrIf);",
          "1615:   return ret;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1681:   if( addrNextRange ){",
          "1682:     sqlite3VdbeAddOp2(v, OP_Goto, 0, addrNextRange);",
          "1683:   }",
          "1684:   sqlite3VdbeResolveLabel(v, lblDone);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1724:   int regNewPeer = 0;",
          "1725:   WindowCodeArg s;",
          "1727:   memset(&s, 0, sizeof(WindowCodeArg));",
          "1728:   s.pParse = pParse;",
          "1729:   s.pMWin = pMWin;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1799:   assert( pMWin->eStart==TK_PRECEDING || pMWin->eStart==TK_CURRENT",
          "1800:        || pMWin->eStart==TK_FOLLOWING || pMWin->eStart==TK_UNBOUNDED",
          "1801:   );",
          "1802:   assert( pMWin->eEnd==TK_FOLLOWING || pMWin->eEnd==TK_CURRENT",
          "1803:        || pMWin->eEnd==TK_UNBOUNDED || pMWin->eEnd==TK_PRECEDING",
          "1804:   );",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1758:     s.end.reg = pParse->nMem+1;     pParse->nMem += nPeer;",
          "1759:   }",
          "",
          "[Removed Lines]",
          "1761:   assert( pMWin->eStart==TK_PRECEDING",
          "1762:        || pMWin->eStart==TK_CURRENT",
          "1763:        || pMWin->eStart==TK_FOLLOWING",
          "1764:        || pMWin->eStart==TK_UNBOUNDED",
          "1765:   );",
          "1766:   assert( pMWin->eEnd==TK_FOLLOWING",
          "1767:        || pMWin->eEnd==TK_CURRENT",
          "1768:        || pMWin->eEnd==TK_UNBOUNDED",
          "1769:        || pMWin->eEnd==TK_PRECEDING",
          "1770:   );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1791:     int regNewPart = reg + pMWin->nBufferCol;",
          "1792:     KeyInfo *pKeyInfo = sqlite3KeyInfoFromExprList(pParse, pPart, 0, 0);",
          "1795:     addr = sqlite3VdbeAddOp3(v, OP_Compare, regNewPart, pMWin->regPart, nPart);",
          "1796:     sqlite3VdbeAppendP4(v, (void*)pKeyInfo, P4_KEYINFO);",
          "1797:     sqlite3VdbeAddOp3(v, OP_Jump, addr+2, addr+4, addr+2);",
          "1798:     VdbeCoverageEqNe(v);",
          "1799:     addrGosubFlush = sqlite3VdbeAddOp1(v, OP_Gosub, regFlushPart);",
          "1800:     VdbeComment((v, \"call flush_partition\"));",
          "1802:     sqlite3VdbeAddOp3(v, OP_Copy, regNewPart, pMWin->regPart, nPart-1);",
          "1803:   }",
          "",
          "[Removed Lines]",
          "1794:     addrIf = sqlite3VdbeAddOp1(v, OP_If, pMWin->regFirst);",
          "1801:     sqlite3VdbeJumpHere(v, addrIf);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1848:     addrShortcut = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1849:     sqlite3VdbeJumpHere(v, addrGe);",
          "1850:   }",
          "1852:     assert( pMWin->eEnd==TK_FOLLOWING );",
          "1853:     sqlite3VdbeAddOp3(v, OP_Subtract, regStart, regEnd, regStart);",
          "1854:   }",
          "",
          "[Removed Lines]",
          "1851:   if( pMWin->eStart==TK_FOLLOWING && regEnd ){",
          "",
          "[Added Lines]",
          "1917:   if( pMWin->eStart==TK_FOLLOWING && pMWin->eType!=TK_RANGE && regEnd ){",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1888:   if( pMWin->eStart==TK_FOLLOWING ){",
          "1889:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "1890:     if( pMWin->eEnd!=TK_UNBOUNDED ){",
          "1893:     }",
          "1894:   }else",
          "1895:   if( pMWin->eEnd==TK_PRECEDING ){",
          "",
          "[Removed Lines]",
          "1891:       windowCodeOp(&s, WINDOW_RETURN_ROW, regEnd, 0);",
          "1892:       windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "",
          "[Added Lines]",
          "1957:       if( pMWin->eType==TK_RANGE ){",
          "1958:         int lbl = sqlite3VdbeMakeLabel(pParse);",
          "1959:         int addrNext = sqlite3VdbeCurrentAddr(v);",
          "1960:         windowCodeRangeTest(&s, OP_Ge, s.current.csr, regEnd, s.end.csr, lbl);",
          "1961:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "1962:         windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "1963:         sqlite3VdbeAddOp2(v, OP_Goto, 0, addrNext);",
          "1964:         sqlite3VdbeResolveLabel(v, lbl);",
          "1965:       }else{",
          "1966:         windowCodeOp(&s, WINDOW_RETURN_ROW, regEnd, 0);",
          "1967:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "1968:       }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1900:     int addr;",
          "1901:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "1902:     if( pMWin->eEnd!=TK_UNBOUNDED ){",
          "1907:     }",
          "1908:   }",
          "1909:   if( addrPeerJump ){",
          "",
          "[Removed Lines]",
          "1903:       if( regEnd ) addr = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "1904:       windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "1905:       windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "1906:       if( regEnd ) sqlite3VdbeJumpHere(v, addr);",
          "",
          "[Added Lines]",
          "1979:       if( pMWin->eType==TK_RANGE ){",
          "1980:         int lbl;",
          "1981:         addr = sqlite3VdbeCurrentAddr(v);",
          "1982:         if( regEnd ){",
          "1983:           lbl = sqlite3VdbeMakeLabel(pParse);",
          "1984:           windowCodeRangeTest(&s, OP_Ge, s.current.csr, regEnd, s.end.csr, lbl);",
          "1985:         }",
          "1986:         windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "1987:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "1988:         if( regEnd ){",
          "1989:           sqlite3VdbeAddOp2(v, OP_Goto, 0, addr);",
          "1990:           sqlite3VdbeResolveLabel(v, lbl);",
          "1991:         }",
          "1992:       }else{",
          "1993:         if( regEnd ) addr = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "1994:         windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "1995:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "1996:         if( regEnd ) sqlite3VdbeJumpHere(v, addr);",
          "1997:       }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1938:     int addrBreak2;",
          "1939:     int addrBreak3;",
          "1940:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "1941:     if( pMWin->eEnd==TK_UNBOUNDED ){",
          "1942:       addrStart = sqlite3VdbeCurrentAddr(v);",
          "1943:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, regStart, 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2032:     if( pMWin->eType==TK_RANGE ){",
          "2033:       addrStart = sqlite3VdbeCurrentAddr(v);",
          "2034:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 1);",
          "2035:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 1);",
          "2036:     }else",
          "",
          "---------------"
        ],
        "test/pg_common.tcl||test/pg_common.tcl": [
          "File: test/pg_common.tcl -> test/pg_common.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:   if {$rc==0} {",
          "73:     error \"errorsql_test SQL did not cause an error!\"",
          "74:   }",
          "76:   set sql [string map {string_agg group_concat} $sql]",
          "77:   puts $::fd \"do_test $tn { catch { execsql {\"",
          "78:   puts $::fd \"  [string trim $sql]\"",
          "",
          "[Removed Lines]",
          "75:   puts $::fd \"# PG says \\\"[string trim $msg]\\\"\"",
          "",
          "[Added Lines]",
          "75:   set msg [lindex [split [string trim $msg] \"\\n\"] 0]",
          "76:   puts $::fd \"# PG says $msg\"",
          "",
          "---------------"
        ],
        "test/window6.test||test/window6.test": [
          "File: test/window6.test -> test/window6.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "219: } {",
          "220:   1 1  2 1,2  3 1,2,3  4 2,3,4  5 3,4,5",
          "221: }",
          "234: do_catchsql_test 9.3 {",
          "235:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<5)",
          "",
          "[Removed Lines]",
          "222: do_catchsql_test 9.1 {",
          "223:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<5)",
          "224:   SELECT x, group_concat(x) OVER (ORDER BY x RANGE 2 PRECEDING)",
          "225:   FROM c;",
          "226: } {1 {RANGE must use only UNBOUNDED or CURRENT ROW}}",
          "228: do_catchsql_test 9.2 {",
          "229:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<5)",
          "230:   SELECT x, group_concat(x) OVER (ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND 2 FOLLOWING)",
          "231:   FROM c;",
          "232: } {1 {RANGE must use only UNBOUNDED or CURRENT ROW}}",
          "",
          "[Added Lines]",
          "222: #do_catchsql_test 9.1 {",
          "223: #  WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<5)",
          "224: #  SELECT x, group_concat(x) OVER (ORDER BY x RANGE 2 PRECEDING)",
          "225: #  FROM c;",
          "226: #} {1 {RANGE must use only UNBOUNDED or CURRENT ROW}}",
          "227: #",
          "228: #do_catchsql_test 9.2 {",
          "229: #  WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<5)",
          "230: #  SELECT x, group_concat(x) OVER (ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND 2 FOLLOWING)",
          "231: #  FROM c;",
          "232: #} {1 {RANGE must use only UNBOUNDED or CURRENT ROW}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "262:     SELECT count() OVER (",
          "263:         ORDER BY x ROWS $frame",
          "264:     ) FROM c;",
          "266: }",
          "268: do_catchsql_test 9.8.1 {",
          "",
          "[Removed Lines]",
          "265:   \" {1 {unsupported frame delimiter for ROWS}}",
          "",
          "[Added Lines]",
          "265:   \" {1 {unsupported frame specification}}",
          "",
          "---------------"
        ],
        "test/window8.tcl||test/window8.tcl": [
          "File: test/window8.tcl -> test/window8.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:   \"",
          "90: }",
          "92: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92: ==========",
          "94: execsql_test 2.0 {",
          "95:   DROP TABLE IF EXISTS t1;",
          "96:   CREATE TABLE t1(a INTEGER, b INTEGER);",
          "97:   INSERT INTO t1 VALUES",
          "98:       (13, 26), (15, 30);",
          "99: }",
          "101: foreach {tn frame} {",
          "102:   1 { ORDER BY a RANGE BETWEEN 5 PRECEDING AND 5 FOLLOWING }",
          "103:   2 { ORDER BY a RANGE BETWEEN 10 PRECEDING AND 5 PRECEDING }",
          "104:   3 { ORDER BY a RANGE BETWEEN 2 FOLLOWING AND 3 FOLLOWING }",
          "105: } {",
          "106:   execsql_test 2.$tn \"SELECT a, sum(b) OVER win FROM t1 WINDOW win AS ($frame)\"",
          "107: }",
          "",
          "---------------"
        ],
        "test/window8.test||test/window8.test": [
          "File: test/window8.test -> test/window8.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "433:   SELECT a, b, min(c) OVER (ORDER BY a,b  GROUPS BETWEEN 1 FOLLOWING         AND UNBOUNDED FOLLOWING ) FROM t3 ORDER BY 1, 2, 3;",
          "434: } {AA aa 102   AA aa 102   AA aa 102   AA aa 102   AA bb 102   AA bb 102   AA bb 102   AA bb 102   BB aa 102   BB aa 102   BB aa 102   BB aa 102   BB aa 102   BB aa 102   BB bb 102   BB bb 102   BB bb 102   BB bb 102   BB bb 102   BB bb 102   CC aa 102   CC aa 102   CC aa 102   CC aa 102   CC bb 102   CC bb 102   DD aa 102   DD aa 102   DD aa 102   DD bb 102   DD bb 102   DD bb 102   DD bb 102   EE aa 102   EE aa 102   EE bb 102   EE bb 102   EE bb 102   FF aa 102   FF aa 102   FF aa 102   FF aa 102   FF bb 113   FF bb 113   FF bb 113   FF bb 113   FF bb 113   FF bb 113   GG aa 113   GG aa 113   GG aa 113   GG aa 113   GG bb 113   GG bb 113   GG bb 113   GG bb 113   HH aa 113   HH aa 113   HH aa 113   HH bb 113   HH bb 113   HH bb 113   HH bb 113   HH bb 113   HH bb 113   II aa 113   II aa 113   II bb 113   II bb 113   II bb 113   II bb 113   II bb 113   JJ aa 257   JJ aa 257   JJ aa 257   JJ aa 257   JJ bb {}   JJ bb {}   JJ bb {}   JJ bb {}}",
          "436: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "436: #==========================================================================",
          "438: do_execsql_test 2.0 {",
          "439:   DROP TABLE IF EXISTS t1;",
          "440:   CREATE TABLE t1(a INTEGER, b INTEGER);",
          "441:   INSERT INTO t1 VALUES",
          "442:       (13, 26), (15, 30);",
          "443: } {}",
          "445: do_execsql_test 2.1 {",
          "446:   SELECT a, sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 5 PRECEDING AND 5 FOLLOWING )",
          "447: } {13 56   15 56}",
          "449: do_execsql_test 2.2 {",
          "450:   SELECT a, sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 10 PRECEDING AND 5 PRECEDING )",
          "451: } {13 {}   15 {}}",
          "453: do_execsql_test 2.3 {",
          "454:   SELECT a, sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 2 FOLLOWING AND 3 FOLLOWING )",
          "455: } {13 30   15 {}}",
          "",
          "---------------"
        ],
        "test/windowerr.tcl||test/windowerr.tcl": [
          "File: test/windowerr.tcl -> test/windowerr.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: execsql_test 1.0 {",
          "21:   DROP TABLE IF EXISTS t1;",
          "22:   CREATE TABLE t1(a INTEGER, b INTEGER);",
          "23: }",
          "25: foreach {tn frame} {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23:   INSERT INTO t1 VALUES(1, 1);",
          "24:   INSERT INTO t1 VALUES(2, 2);",
          "25:   INSERT INTO t1 VALUES(3, 3);",
          "26:   INSERT INTO t1 VALUES(4, 4);",
          "27:   INSERT INTO t1 VALUES(5, 5);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:   5 \"ORDER BY a GROUPS BETWEEN -1 PRECEDING AND 1 FOLLOWING\"",
          "33:   6 \"ORDER BY a GROUPS BETWEEN  1 PRECEDING AND -1 FOLLOWING\"",
          "34: } {",
          "35:   errorsql_test 1.$tn \"",
          "36:   SELECT a, sum(b) OVER (",
          "37:     $frame",
          "39:   \"",
          "40: }",
          "",
          "[Removed Lines]",
          "38:   ) FROM t3 ORDER BY 1",
          "",
          "[Added Lines]",
          "40:   7 \"ORDER BY a,b RANGE BETWEEN  1 PRECEDING AND 1 FOLLOWING\"",
          "45:   ) FROM t1 ORDER BY 1",
          "",
          "---------------"
        ],
        "test/windowerr.test||test/windowerr.test": [
          "File: test/windowerr.test -> test/windowerr.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: do_execsql_test 1.0 {",
          "24:   DROP TABLE IF EXISTS t1;",
          "25:   CREATE TABLE t1(a INTEGER, b INTEGER);",
          "26: } {}",
          "29: do_test 1.1 { catch { execsql {",
          "30:   SELECT a, sum(b) OVER (",
          "31:     ORDER BY a ROWS BETWEEN -1 PRECEDING AND 1 FOLLOWING",
          "33: } } } 1",
          "36: do_test 1.2 { catch { execsql {",
          "37:   SELECT a, sum(b) OVER (",
          "38:     ORDER BY a ROWS BETWEEN  1 PRECEDING AND -1 FOLLOWING",
          "40: } } } 1",
          "43: do_test 1.3 { catch { execsql {",
          "44:   SELECT a, sum(b) OVER (",
          "45:     ORDER BY a RANGE BETWEEN -1 PRECEDING AND 1 FOLLOWING",
          "47: } } } 1",
          "50: do_test 1.4 { catch { execsql {",
          "51:   SELECT a, sum(b) OVER (",
          "52:     ORDER BY a RANGE BETWEEN  1 PRECEDING AND -1 FOLLOWING",
          "54: } } } 1",
          "57: do_test 1.5 { catch { execsql {",
          "58:   SELECT a, sum(b) OVER (",
          "59:     ORDER BY a GROUPS BETWEEN -1 PRECEDING AND 1 FOLLOWING",
          "61: } } } 1",
          "64: do_test 1.6 { catch { execsql {",
          "65:   SELECT a, sum(b) OVER (",
          "66:     ORDER BY a GROUPS BETWEEN  1 PRECEDING AND -1 FOLLOWING",
          "68: } } } 1",
          "70: finish_test",
          "",
          "[Removed Lines]",
          "28: # PG says \"ERROR:  frame starting offset must not be negative\"",
          "32:   ) FROM t3 ORDER BY 1",
          "35: # PG says \"ERROR:  frame ending offset must not be negative\"",
          "39:   ) FROM t3 ORDER BY 1",
          "42: # PG says \"ERROR:  invalid preceding or following size in window function\"",
          "46:   ) FROM t3 ORDER BY 1",
          "49: # PG says \"ERROR:  invalid preceding or following size in window function\"",
          "53:   ) FROM t3 ORDER BY 1",
          "56: # PG says \"ERROR:  frame starting offset must not be negative\"",
          "60:   ) FROM t3 ORDER BY 1",
          "63: # PG says \"ERROR:  frame ending offset must not be negative\"",
          "67:   ) FROM t3 ORDER BY 1",
          "",
          "[Added Lines]",
          "26:   INSERT INTO t1 VALUES(1, 1);",
          "27:   INSERT INTO t1 VALUES(2, 2);",
          "28:   INSERT INTO t1 VALUES(3, 3);",
          "29:   INSERT INTO t1 VALUES(4, 4);",
          "30:   INSERT INTO t1 VALUES(5, 5);",
          "33: # PG says ERROR:  frame starting offset must not be negative",
          "37:   ) FROM t1 ORDER BY 1",
          "40: # PG says ERROR:  frame ending offset must not be negative",
          "44:   ) FROM t1 ORDER BY 1",
          "47: # PG says ERROR:  invalid preceding or following size in window function",
          "51:   ) FROM t1 ORDER BY 1",
          "54: # PG says ERROR:  invalid preceding or following size in window function",
          "58:   ) FROM t1 ORDER BY 1",
          "61: # PG says ERROR:  frame starting offset must not be negative",
          "65:   ) FROM t1 ORDER BY 1",
          "68: # PG says ERROR:  frame ending offset must not be negative",
          "72:   ) FROM t1 ORDER BY 1",
          "73: } } } 1",
          "75: # PG says ERROR:  RANGE with offset PRECEDING/FOLLOWING requires exactly one ORDER BY column",
          "76: do_test 1.7 { catch { execsql {",
          "77:   SELECT a, sum(b) OVER (",
          "78:     ORDER BY a,b RANGE BETWEEN  1 PRECEDING AND 1 FOLLOWING",
          "79:   ) FROM t1 ORDER BY 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6ad0e25fa41bf51f6ee5302ac62842cf5546223d",
      "candidate_info": {
        "commit_hash": "6ad0e25fa41bf51f6ee5302ac62842cf5546223d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6ad0e25fa41bf51f6ee5302ac62842cf5546223d",
        "files": [
          "ext/misc/regexp.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix the regexp extension so that it correctly translates all over-length 3-byte UTF8 sequences into 0xfffd.\n\nFossilOrigin-Name: 3d4c0bf8904135fa68c75801bfa738715cacc3b19dc8ad6ef550b11798d4b121",
        "before_after_code_files": [
          "ext/misc/regexp.c||ext/misc/regexp.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/regexp.c||ext/misc/regexp.c": [
          "File: ext/misc/regexp.c -> ext/misc/regexp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:            && (p->z[p->i+1]&0xc0)==0x80 ){",
          "157:       c = (c&0x0f)<<12 | ((p->z[p->i]&0x3f)<<6) | (p->z[p->i+1]&0x3f);",
          "158:       p->i += 2;",
          "160:     }else if( (c&0xf8)==0xf0 && p->i+3<p->mx && (p->z[p->i]&0xc0)==0x80",
          "161:            && (p->z[p->i+1]&0xc0)==0x80 && (p->z[p->i+2]&0xc0)==0x80 ){",
          "162:       c = (c&0x07)<<18 | ((p->z[p->i]&0x3f)<<12) | ((p->z[p->i+1]&0x3f)<<6)",
          "",
          "[Removed Lines]",
          "159:       if( c<=0x3ff || (c>=0xd800 && c<=0xdfff) ) c = 0xfffd;",
          "",
          "[Added Lines]",
          "159:       if( c<=0x7ff || (c>=0xd800 && c<=0xdfff) ) c = 0xfffd;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e2bddcd4c55ba3cbe0130332679ff4b048630d0ced9a8899982edb5a3569ba7f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0933aad72c5ac1a763891c03b231ce72b1d19b03",
      "candidate_info": {
        "commit_hash": "0933aad72c5ac1a763891c03b231ce72b1d19b03",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0933aad72c5ac1a763891c03b231ce72b1d19b03",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/os_unix.c",
          "src/os_win.c",
          "src/pager.c",
          "src/shell.c.in",
          "src/sqlite.h.in",
          "src/tclsqlite.c",
          "src/test_demovfs.c",
          "src/test_vfs.c",
          "test/symlink.test",
          "test/tclsqlite.test"
        ],
        "message": "Add support for SQLITE_OPEN_NOFOLLOW.\n\nFossilOrigin-Name: cb79c828496a703f1410f61458ebc1e15a92a63412b36f51945b2b5a32ec6e88",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/os_unix.c||src/os_unix.c",
          "src/os_win.c||src/os_win.c",
          "src/pager.c||src/pager.c",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/tclsqlite.c||src/tclsqlite.c",
          "src/test_demovfs.c||src/test_demovfs.c",
          "src/test_vfs.c||src/test_vfs.c",
          "test/symlink.test||test/symlink.test",
          "test/tclsqlite.test||test/tclsqlite.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6b67eba54e7b4887a8cdab7537b12a95e9f17bcdaa0b423af5ed5bd91f69f2c6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/os_unix.c||src/os_unix.c": [
          "File: src/os_unix.c -> src/os_unix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6251:   SimulateIOError( return SQLITE_IOERR_ACCESS; );",
          "6252:   assert( pResOut!=0 );",
          "6258:   if( flags==SQLITE_ACCESS_EXISTS ){",
          "6259:     struct stat buf;",
          "6263:   }",
          "6264:   return SQLITE_OK;",
          "6265: }",
          "",
          "[Removed Lines]",
          "6256:   assert( flags==SQLITE_ACCESS_EXISTS || flags==SQLITE_ACCESS_READWRITE );",
          "6261:   }else{",
          "",
          "[Added Lines]",
          "6256:   assert( flags==SQLITE_ACCESS_EXISTS",
          "6257:        || flags==SQLITE_ACCESS_READWRITE",
          "6258:        || flags==SQLITE_ACCESS_SYMLINK );",
          "6263:   }else if( flags==SQLITE_ACCESS_READWRITE ){",
          "6265:   }else{",
          "6266: #if !defined(HAVE_LSTAT)",
          "6268: #else",
          "6269:     struct stat buf;",
          "6271: #endif",
          "6272:     assert( flags==SQLITE_ACCESS_SYMLINK );",
          "",
          "---------------"
        ],
        "src/os_win.c||src/os_win.c": [
          "File: src/os_win.c -> src/os_win.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5472:       rc = attr!=INVALID_FILE_ATTRIBUTES &&",
          "5473:              (attr & FILE_ATTRIBUTE_READONLY)==0;",
          "5474:       break;",
          "5475:     default:",
          "5476:       assert(!\"Invalid flags argument\");",
          "5477:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5475:     case SQLITE_ACCESS_SYMLINK:",
          "5477:       break;",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4789:   if( zFilename && zFilename[0] ){",
          "4790:     const char *z;",
          "4791:     nPathname = pVfs->mxPathname+1;",
          "4792:     zPathname = sqlite3DbMallocRaw(0, nPathname*2);",
          "4793:     if( zPathname==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4791:     if( (vfsFlags & SQLITE_OPEN_NOFOLLOW)!=0 ){",
          "4792:       int isLink = 0;",
          "4793:       if( sqlite3OsAccess(pVfs, zFilename, SQLITE_ACCESS_SYMLINK, &isLink)==0",
          "4794:        && isLink",
          "4795:       ){",
          "4796:         return SQLITE_CANTOPEN_SYMLINK;",
          "4797:       }",
          "4798:     }",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3562:   \"        --maxsize N     Maximum size for --hexdb or --deserialized database\",",
          "3563: #endif",
          "3564:   \"        --new           Initialize FILE to an empty database\",",
          "3565:   \"        --readonly      Open FILE readonly\",",
          "3566:   \"        --zip           FILE is a ZIP archive\",",
          "3567:   \".output ?FILE?           Send output to FILE or stdout if FILE is omitted\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3566:   \"        --nofollow      Do not follow symbolic links\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4126:     switch( p->openMode ){",
          "4127:       case SHELL_OPEN_APPENDVFS: {",
          "4128:         sqlite3_open_v2(p->zDbFilename, &p->db,",
          "4130:         break;",
          "4131:       }",
          "4132:       case SHELL_OPEN_HEXDB:",
          "",
          "[Removed Lines]",
          "4129:            SQLITE_OPEN_READWRITE|SQLITE_OPEN_CREATE, \"apndvfs\");",
          "",
          "[Added Lines]",
          "4131:            SQLITE_OPEN_READWRITE|SQLITE_OPEN_CREATE|p->openFlags, \"apndvfs\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4139:         break;",
          "4140:       }",
          "4141:       case SHELL_OPEN_READONLY: {",
          "4143:         break;",
          "4144:       }",
          "4145:       case SHELL_OPEN_UNSPEC:",
          "4146:       case SHELL_OPEN_NORMAL: {",
          "4148:         break;",
          "4149:       }",
          "4150:     }",
          "",
          "[Removed Lines]",
          "4142:         sqlite3_open_v2(p->zDbFilename, &p->db, SQLITE_OPEN_READONLY, 0);",
          "4147:         sqlite3_open(p->zDbFilename, &p->db);",
          "",
          "[Added Lines]",
          "4144:         sqlite3_open_v2(p->zDbFilename, &p->db,",
          "4145:             SQLITE_OPEN_READONLY|p->openFlags, 0);",
          "4150:         sqlite3_open_v2(p->zDbFilename, &p->db,",
          "4151:            SQLITE_OPEN_READWRITE|SQLITE_OPEN_CREATE|p->openFlags, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "8042:     sqlite3_free(p->zFreeOnClose);",
          "8043:     p->zFreeOnClose = 0;",
          "8044:     p->openMode = SHELL_OPEN_UNSPEC;",
          "8045:     p->szMax = 0;",
          "8047:     for(iName=1; iName<nArg && azArg[iName][0]=='-'; iName++){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8049:     p->openFlags = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "8056:         p->openMode = SHELL_OPEN_APPENDVFS;",
          "8057:       }else if( optionMatch(z, \"readonly\") ){",
          "8058:         p->openMode = SHELL_OPEN_READONLY;",
          "8059: #ifdef SQLITE_ENABLE_DESERIALIZE",
          "8060:       }else if( optionMatch(z, \"deserialize\") ){",
          "8061:         p->openMode = SHELL_OPEN_DESERIALIZE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8064:       }else if( optionMatch(z, \"nofollow\") ){",
          "8065:         p->openFlags |= SQLITE_OPEN_NOFOLLOW;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "9976:   \"   -multiplex           enable the multiplexor VFS\\n\"",
          "9977: #endif",
          "9978:   \"   -newline SEP         set output row separator. Default: '\\\\n'\\n\"",
          "9979:   \"   -nullvalue TEXT      set text string for NULL values. Default ''\\n\"",
          "9980:   \"   -pagecache SIZE N    use N slots of SZ bytes each for page cache memory\\n\"",
          "9981:   \"   -quote               set output mode to 'quote'\\n\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9986:   \"   -nofollow            refuse to open symbolic links to database files\\n\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "10286: #endif",
          "10287:     }else if( strcmp(z,\"-readonly\")==0 ){",
          "10288:       data.openMode = SHELL_OPEN_READONLY;",
          "10289: #if !defined(SQLITE_OMIT_VIRTUALTABLE) && defined(SQLITE_HAVE_ZLIB)",
          "10290:     }else if( strncmp(z, \"-A\",2)==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10297:     }else if( strcmp(z,\"-nofollow\")==0 ){",
          "10298:       data.openFlags = SQLITE_OPEN_NOFOLLOW;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "10389: #endif",
          "10390:     }else if( strcmp(z,\"-readonly\")==0 ){",
          "10391:       data.openMode = SHELL_OPEN_READONLY;",
          "10392:     }else if( strcmp(z,\"-ascii\")==0 ){",
          "10393:       data.mode = MODE_Ascii;",
          "10394:       sqlite3_snprintf(sizeof(data.colSeparator), data.colSeparator,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10402:     }else if( strcmp(z,\"-nofollow\")==0 ){",
          "10403:       data.openFlags |= SQLITE_OPEN_NOFOLLOW;",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "516: #define SQLITE_CANTOPEN_FULLPATH       (SQLITE_CANTOPEN | (3<<8))",
          "517: #define SQLITE_CANTOPEN_CONVPATH       (SQLITE_CANTOPEN | (4<<8))",
          "519: #define SQLITE_CORRUPT_VTAB            (SQLITE_CORRUPT | (1<<8))",
          "520: #define SQLITE_CORRUPT_SEQUENCE        (SQLITE_CORRUPT | (2<<8))",
          "521: #define SQLITE_READONLY_RECOVERY       (SQLITE_READONLY | (1<<8))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "519: #define SQLITE_CANTOPEN_SYMLINK        (SQLITE_CANTOPEN | (6<<8))",
          "",
          "---------------"
        ],
        "src/tclsqlite.c||src/tclsqlite.c": [
          "File: src/tclsqlite.c -> src/tclsqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3670: ){",
          "3671:   Tcl_WrongNumArgs(interp, 1, objv,",
          "3672:     \"HANDLE ?FILENAME? ?-vfs VFSNAME? ?-readonly BOOLEAN? ?-create BOOLEAN?\"",
          "3673:     \" ?-nomutex BOOLEAN? ?-fullmutex BOOLEAN? ?-uri BOOLEAN?\"",
          "3674: #if defined(SQLITE_HAS_CODEC) && !defined(SQLITE_OMIT_CODEC_FROM_TCL)",
          "3675:     \" ?-key CODECKEY?\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3673:     \" ?-nofollow BOOLEAN?\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3779:       }else{",
          "3780:         flags &= ~SQLITE_OPEN_CREATE;",
          "3781:       }",
          "3782:     }else if( strcmp(zArg, \"-nomutex\")==0 ){",
          "3783:       int b;",
          "3784:       if( Tcl_GetBooleanFromObj(interp, objv[i], &b) ) return TCL_ERROR;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3784:     }else if( strcmp(zArg, \"-nofollow\")==0 ){",
          "3785:       int b;",
          "3786:       if( Tcl_GetBooleanFromObj(interp, objv[i], &b) ) return TCL_ERROR;",
          "3787:       if( b ){",
          "3788:         flags |= SQLITE_OPEN_NOFOLLOW;",
          "3789:       }else{",
          "3790:         flags &= ~SQLITE_OPEN_NOFOLLOW;",
          "3791:       }",
          "",
          "---------------"
        ],
        "src/test_demovfs.c||src/test_demovfs.c": [
          "File: src/test_demovfs.c -> src/test_demovfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "511:   );",
          "513:   if( flags==SQLITE_ACCESS_READWRITE ) eAccess = R_OK|W_OK;",
          "514:   if( flags==SQLITE_ACCESS_READ )      eAccess = R_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "514:   if( flags==SQLITE_ACCESS_SYMLINK ){",
          "517:     return SQLITE_OK;",
          "518:   }",
          "",
          "---------------"
        ],
        "src/test_vfs.c||src/test_vfs.c": [
          "File: src/test_vfs.c -> src/test_vfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "732:     if( flags==SQLITE_ACCESS_EXISTS ) zArg = \"SQLITE_ACCESS_EXISTS\";",
          "733:     if( flags==SQLITE_ACCESS_READWRITE ) zArg = \"SQLITE_ACCESS_READWRITE\";",
          "734:     if( flags==SQLITE_ACCESS_READ ) zArg = \"SQLITE_ACCESS_READ\";",
          "735:     tvfsExecTcl(p, \"xAccess\",",
          "736:         Tcl_NewStringObj(zPath, -1), Tcl_NewStringObj(zArg, -1), 0, 0",
          "737:     );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "735:     if( flags==SQLITE_ACCESS_SYMLINK ) zArg = \"SQLITE_ACCESS_SYMLINK\";",
          "",
          "---------------"
        ],
        "test/symlink.test||test/symlink.test": [
          "File: test/symlink.test -> test/symlink.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:   sqlite3_db_filename db2 main",
          "38: } [file join [pwd] test.db]",
          "40: # Test that if the symlink points to a file that does not exists, it is",
          "41: # created when it is opened.",
          "42: #",
          "43: do_test 1.2.1 {",
          "45:   db close",
          "46:   forcedelete test.db",
          "47:   file exists test.db",
          "",
          "[Removed Lines]",
          "44:   db2 close",
          "",
          "[Added Lines]",
          "40: # But not with the -nofollow flag",
          "41: #",
          "42: do_test 1.1.2 {",
          "43:   db2 close",
          "44:   set rc [catch {sqlite3 db2 test.db2 -nofollow 1} msg]",
          "45:   lappend rc $msg",
          "46: } {1 {unable to open database file}}",
          "48: # If the main database is successfully opened with -nofollow, then -nofollow",
          "49: # is also used for ATTACH.",
          "50: #",
          "51: do_test 1.1.3 {",
          "52:   catch {db2 close}",
          "53:   sqlite3 db2 test.db -nofollow 1",
          "54: } {}",
          "55: do_test 1.1.4 {",
          "56:   catchsql {ATTACH 'test.db2' AS aux1;} db2",
          "57: } {1 {unable to open database: test.db2}}",
          "63:   catch {db2 close}",
          "",
          "---------------"
        ],
        "test/tclsqlite.test||test/tclsqlite.test": [
          "File: test/tclsqlite.test -> test/tclsqlite.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: # Check the error messages generated by tclsqlite",
          "27: #",
          "29: if {[sqlite3 -has-codec]} {",
          "30:   append r \" ?-key CODECKEY?\"",
          "31: }",
          "",
          "[Removed Lines]",
          "28: set r \"sqlite_orig HANDLE ?FILENAME? ?-vfs VFSNAME? ?-readonly BOOLEAN? ?-create BOOLEAN? ?-nomutex BOOLEAN? ?-fullmutex BOOLEAN? ?-uri BOOLEAN?\"",
          "",
          "[Added Lines]",
          "28: set r \"sqlite_orig HANDLE ?FILENAME? ?-vfs VFSNAME? ?-readonly BOOLEAN? ?-create BOOLEAN? ?-nofollow BOOLEAN? ?-nomutex BOOLEAN? ?-fullmutex BOOLEAN? ?-uri BOOLEAN?\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2ce9b6bcd500c8836748aa5b34bcb02b7f145e90",
      "candidate_info": {
        "commit_hash": "2ce9b6bcd500c8836748aa5b34bcb02b7f145e90",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2ce9b6bcd500c8836748aa5b34bcb02b7f145e90",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Improved comments and extra assert() statements on the OP_Savepoint opcode, just to make the code a little easier to read and reason about.\n\nFossilOrigin-Name: e80b2d9fcbc82ae5dc8a1fc13196f9a30bdb504eb5a5c131d136a78bbd5bbe7b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3cc55e09e6c1de2059d97bdddf2fdfbdcc62c584b513f56faf9d3a39ef80cddd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3099:       }",
          "3100:     }",
          "3101:   }else{",
          "3102:     iSavepoint = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3103:     assert( p1==SAVEPOINT_RELEASE || p1==SAVEPOINT_ROLLBACK );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3152:             if( rc!=SQLITE_OK ) goto abort_due_to_error;",
          "3153:           }",
          "3154:         }else{",
          "3155:           isSchemaChange = 0;",
          "3156:         }",
          "3157:         for(ii=0; ii<db->nDb; ii++){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3157:           assert( p1==SAVEPOINT_RELEASE );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3188:           db->nSavepoint--;",
          "3189:         }",
          "3190:       }else{",
          "3191:         db->nDeferredCons = pSavepoint->nDeferredCons;",
          "3192:         db->nDeferredImmCons = pSavepoint->nDeferredImmCons;",
          "3193:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3194:         assert( p1==SAVEPOINT_ROLLBACK );",
          "",
          "---------------"
        ]
      }
    }
  ]
}