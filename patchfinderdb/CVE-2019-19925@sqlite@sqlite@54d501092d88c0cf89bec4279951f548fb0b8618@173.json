{
  "cve_id": "CVE-2019-19925",
  "cve_desc": "zipfileUpdate in ext/misc/zipfile.c in SQLite 3.30.1 mishandles a NULL pathname during an update of a ZIP archive.",
  "repo": "sqlite/sqlite",
  "patch_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
  "patch_info": {
    "commit_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/54d501092d88c0cf89bec4279951f548fb0b8618",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid",
      "test/zipfile.test"
    ],
    "message": "Fix the zipfile extension so that INSERT works even if the pathname of the file being inserted is a NULL.  Bug discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid",
      "test/zipfile.test||test/zipfile.test"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1620:     if( rc==SQLITE_OK ){",
      "1621:       zPath = (const char*)sqlite3_value_text(apVal[2]);",
      "1622:       nPath = (int)strlen(zPath);",
      "1623:       mTime = zipfileGetTime(apVal[4]);",
      "1624:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1622:       if( zPath==0 ) zPath = \"\";",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/zipfile.test||test/zipfile.test": [
      "File: test/zipfile.test -> test/zipfile.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "795:   } {. ./x1.txt ./x2.txt}",
      "796: }",
      "798: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "798: # 2019-12-18 Yongheng and Rui fuzzer",
      "799: #",
      "800: do_execsql_test 13.10 {",
      "801:   DROP TABLE IF EXISTS t0;",
      "802:   DROP TABLE IF EXISTS t1;",
      "803:   CREATE TABLE t0(a,b,c,d,e,f,g);",
      "804:   REPLACE INTO t0(c,b,f) VALUES(10,10,10);",
      "805:   CREATE VIRTUAL TABLE t1 USING zipfile('h.zip');",
      "806:   REPLACE INTO t1 SELECT * FROM t0;",
      "807:   SELECT quote(name),quote(mode),quote(mtime),quote(sz),quote(rawdata),",
      "808:          quote(data),quote(method) FROM t1;",
      "809: } {'' 10 10 2 X'3130' X'3130' 0}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9cb02640419614ae3771ebbffce076474380029b",
      "candidate_info": {
        "commit_hash": "9cb02640419614ae3771ebbffce076474380029b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9cb02640419614ae3771ebbffce076474380029b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Add the \".parameter\" command to the CLI.\n\nFossilOrigin-Name: 1f9fa58541dc974989eee9c9a5d453956f7dbcf42965ece2db2cb5dee3f3f5e2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c7f70b6d96338dba201e005104e7f7148c1a8cd767ab05e35b44617c4c797bc5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "2751: #define BIND_PARAM_TABLE \"$Parameters\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2754: static void bind_table_init(ShellState *p){",
          "2755:   sqlite3_exec(p->db,",
          "2756:     \"CREATE TABLE IF NOT EXISTS temp.[\" BIND_PARAM_TABLE \"](\\n\"",
          "2757:     \"  key TEXT PRIMARY KEY,\\n\"",
          "2758:     \"  value ANY\\n\"",
          "2759:     \") WITHOUT ROWID;\",",
          "2760:     0, 0, 0);",
          "2761: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3547:   \"        --zip           FILE is a ZIP archive\",",
          "3548:   \".output ?FILE?           Send output to FILE or stdout if FILE is omitted\",",
          "3549:   \"     If FILE begins with '|' then open it as a pipe.\",",
          "3550:   \".print STRING...         Print literal STRING\",",
          "3551: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK",
          "3552:   \".progress N              Invoke progress handler after every N opcodes\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3560:   \".parameter CMD ...       Manage SQL parameter bindings\",",
          "3561:   \"   clear                   Erase all bindings\",",
          "3562:   \"   init                    Initialize the TEMP table that holds bindings\",",
          "3563:   \"   list                    List the current parameter bindings\",",
          "3564:   \"   set PARAMETER VALUE     Given SQL parameter PARAMETER a value of VALUE\",",
          "3565:   \"                           PARAMETER should start with '$', ':', '@', or '?'\",",
          "3566:   \"   unset PARAMETER         Remove PARAMETER from the binding table\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7078:     }",
          "7079:   }else",
          "7081:   if( c=='p' && n>=3 && strncmp(azArg[0], \"print\", n)==0 ){",
          "7082:     int i;",
          "7083:     for(i=1; i<nArg; i++){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7098:   if( c=='p' && n>=3 && strncmp(azArg[0], \"parameter\", n)==0 ){",
          "7099:     open_db(p,0);",
          "7100:     if( nArg<=1 ) goto parameter_syntax_error;",
          "7105:     if( nArg==2 && strcmp(azArg[1],\"clear\")==0 ){",
          "7106:       sqlite3_exec(p->db, \"DROP TABLE IF EXISTS temp.[\" BIND_PARAM_TABLE \"];\",",
          "7107:                    0, 0, 0);",
          "7108:     }else",
          "7113:     if( nArg==2 && strcmp(azArg[1],\"list\")==0 ){",
          "7114:       sqlite3_stmt *pStmt = 0;",
          "7115:       int rx;",
          "7116:       int len = 0;",
          "7117:       rx = sqlite3_prepare_v2(p->db,",
          "7118:              \"SELECT max(length(key)) \"",
          "7119:              \"FROM temp.[\" BIND_PARAM_TABLE \"];\", -1, &pStmt, 0);",
          "7120:       if( rx==SQLITE_OK && sqlite3_step(pStmt)==SQLITE_ROW ){",
          "7121:         len = sqlite3_column_int(pStmt, 0);",
          "7122:         if( len>40 ) len = 40;",
          "7123:       }",
          "7124:       sqlite3_finalize(pStmt);",
          "7125:       pStmt = 0;",
          "7126:       if( len ){",
          "7127:         rx = sqlite3_prepare_v2(p->db,",
          "7128:              \"SELECT key, quote(value) \"",
          "7129:              \"FROM temp.[\" BIND_PARAM_TABLE \"];\", -1, &pStmt, 0);",
          "7130:         while( sqlite3_step(pStmt)==SQLITE_ROW ){",
          "7131:           utf8_printf(p->out, \"%-*s %s\\n\", len, sqlite3_column_text(pStmt,0),",
          "7132:                       sqlite3_column_text(pStmt,1));",
          "7133:         }",
          "7134:         sqlite3_finalize(pStmt);",
          "7135:       }",
          "7136:     }else",
          "7142:     if( nArg==2 && strcmp(azArg[1],\"init\")==0 ){",
          "7143:       bind_table_init(p);",
          "7144:     }else",
          "7152:     if( nArg==4 && strcmp(azArg[1],\"set\")==0 ){",
          "7153:       int rx;",
          "7154:       char *zSql;",
          "7155:       sqlite3_stmt *pStmt;",
          "7156:       const char *zKey = azArg[2];",
          "7157:       const char *zValue = azArg[3];",
          "7158:       bind_table_init(p);",
          "7159:       zSql = sqlite3_mprintf(",
          "7160:                   \"REPLACE INTO temp.[\" BIND_PARAM_TABLE \"](key,value)\"",
          "7161:                   \"VALUES(%Q,%s);\", zKey, zValue);",
          "7162:       if( zSql==0 ) shell_out_of_memory();",
          "7163:       pStmt = 0;",
          "7164:       rx = sqlite3_prepare_v2(p->db, zSql, -1, &pStmt, 0);",
          "7165:       sqlite3_free(zSql);",
          "7166:       if( rx!=SQLITE_OK ){",
          "7167:         sqlite3_finalize(pStmt);",
          "7168:         pStmt = 0;",
          "7169:         zSql = sqlite3_mprintf(",
          "7170:                    \"REPLACE INTO temp.[\" BIND_PARAM_TABLE \"](key,value)\"",
          "7171:                    \"VALUES(%Q,%Q);\", zKey, zValue);",
          "7172:         if( zSql==0 ) shell_out_of_memory();",
          "7173:         rx = sqlite3_prepare_v2(p->db, zSql, -1, &pStmt, 0);",
          "7174:         sqlite3_free(zSql);",
          "7175:         if( rx!=SQLITE_OK ){",
          "7176:           utf8_printf(p->out, \"Error: %s\\n\", sqlite3_errmsg(p->db));",
          "7177:           sqlite3_finalize(pStmt);",
          "7178:           pStmt = 0;",
          "7179:           rc = 1;",
          "7180:         }",
          "7181:       }",
          "7182:       sqlite3_step(pStmt);",
          "7183:       sqlite3_finalize(pStmt);",
          "7184:     }else",
          "7190:     if( nArg==3 && strcmp(azArg[1],\"unset\")==0 ){",
          "7191:       char *zSql = sqlite3_mprintf(",
          "7192:           \"DELETE FROM temp.[\" BIND_PARAM_TABLE \"] WHERE key=%Q\", azArg[2]);",
          "7193:       if( zSql==0 ) shell_out_of_memory();",
          "7194:       sqlite3_exec(p->db, zSql, 0, 0, 0);",
          "7195:       sqlite3_free(zSql);",
          "7196:     }else",
          "7198:     parameter_syntax_error:",
          "7199:     showHelp(p->out, \"parameter\");",
          "7200:   }else",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7ac0e562a384a45458aa66c8cffeabaf532e111c",
      "candidate_info": {
        "commit_hash": "7ac0e562a384a45458aa66c8cffeabaf532e111c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7ac0e562a384a45458aa66c8cffeabaf532e111c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/join5.test"
        ],
        "message": "Fix an assert() failure that could occur in a join query if the RHS of an IN() operator is a list containing correlated expressions. This problem was introduced by checkin [e130319317e7611938] which was part of the fix for ticket [787fa716be3a7f650c] - so this commit is part of that ticket's fix too.\n\nFossilOrigin-Name: 778b1224a318d0137c7dab8361128f593506d3677267898119b934b4d66dfe38",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/join5.test||test/join5.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d91095ba7130e974f0c95334760c679a31479b07a3d458e15994a24eee474752",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2809:       if( addrOnce && !sqlite3ExprIsConstant(pE2) ){",
          "2810:         sqlite3VdbeChangeToNoop(v, addrOnce);",
          "2811:         addrOnce = 0;",
          "2812:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2811:         ExprClearProperty(pExpr, EP_Subrtn);",
          "",
          "---------------"
        ],
        "test/join5.test||test/join5.test": [
          "File: test/join5.test -> test/join5.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "306:   `--SEARCH TABLE t4 USING INDEX t4xz (x=?)",
          "307: }",
          "309: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "309: reset_db",
          "310: do_execsql_test 8.0 {",
          "311:   CREATE TABLE t0 (c0, c1, PRIMARY KEY (c0, c1));",
          "312:   CREATE TABLE t1 (c0);",
          "314:   INSERT INTO t1 VALUES (2);",
          "316:   INSERT INTO t0 VALUES(0, 10);",
          "317:   INSERT INTO t0 VALUES(1, 10);",
          "318:   INSERT INTO t0 VALUES(2, 10);",
          "319:   INSERT INTO t0 VALUES(3, 10);",
          "320: }",
          "322: do_execsql_test 8.1 {",
          "323:   SELECT * FROM t0, t1",
          "324:   WHERE (t0.c1 >= 1 OR t0.c1 < 1) AND t0.c0 IN (1, t1.c0) ORDER BY 1;",
          "325: } {",
          "326:   1 10 2",
          "327:   2 10 2",
          "328: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ec3e820a00c5372972a0f1b143b2797b21ffb9f",
      "candidate_info": {
        "commit_hash": "4ec3e820a00c5372972a0f1b143b2797b21ffb9f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4ec3e820a00c5372972a0f1b143b2797b21ffb9f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "Formatting change on a multi-line conditional, for improved clarity. No logic changes.\n\nFossilOrigin-Name: 7248e3476511ecd317f54edcfe1e87443bfdcc1b10c89c7734eefcabafec6c0b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bc751fb64d5b08e5ca4c85cd1c6fbf09590fa9dad7e176ba373082ea373655b5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1308:       if( (pTerm->eOperator & WO_IN)!=0 ) iIn--;",
          "1309:       if( j<16 && (pLoop->u.vtab.omitMask>>j)&1 ){",
          "1310:         disableTerm(pLevel, pTerm);",
          "1313:       ){",
          "",
          "[Removed Lines]",
          "1311:       }else if( (pTerm->eOperator & WO_IN)!=0 &&",
          "1312:           sqlite3ExprVectorSize(pTerm->pExpr->pLeft)==1",
          "",
          "[Added Lines]",
          "1311:       }else if( (pTerm->eOperator & WO_IN)!=0",
          "1312:         && sqlite3ExprVectorSize(pTerm->pExpr->pLeft)==1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "060b7fa9745e1439ce1d9be96bb921b98b0a6da3",
      "candidate_info": {
        "commit_hash": "060b7fa9745e1439ce1d9be96bb921b98b0a6da3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/060b7fa9745e1439ce1d9be96bb921b98b0a6da3",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/whereexpr.c",
          "test/like3.test",
          "test/tkt-78e04e52ea.test",
          "test/vtab1.test",
          "test/vtabH.test"
        ],
        "message": "Refactor the LIKE optimization decision logic so that it uses sqlite3AtoF() on both boundary keys to determine if the optimization can be used when the LHS is something that might not have TEXT affinity. Ticket [ce8717f0885af975].  See also [c94369cae9b561b1], [b043a54c3de54b28], [fd76310a5e843e07], and [158290c0abafde67].\n\nFossilOrigin-Name: b4a9e09e60213ccff925d09f0b6e549e2a3e3862856c710f108779e2867dec76",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/whereexpr.c||src/whereexpr.c",
          "test/like3.test||test/like3.test",
          "test/tkt-78e04e52ea.test||test/tkt-78e04e52ea.test",
          "test/vtab1.test||test/vtab1.test",
          "test/vtabH.test||test/vtabH.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c4b405687b010ee20ec02c42913a0540909d0155c88a4a56194fda99c704279e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "264:         zNew[iTo] = 0;",
          "265:         assert( iTo>0 );",
          "284:         ){",
          "289:             sqlite3ExprDelete(db, pPrefix);",
          "290:             sqlite3ValueFree(pVal);",
          "291:             return 0;",
          "",
          "[Removed Lines]",
          "279:         if( sqlite3Isdigit(zNew[0])",
          "280:          || sqlite3Isspace(zNew[0])",
          "281:          || zNew[0]=='-'",
          "282:          || zNew[0]=='+'",
          "283:          || zNew[iTo-1]=='0'-1",
          "285:           if( pLeft->op!=TK_COLUMN",
          "286:            || sqlite3ExprAffinity(pLeft)!=SQLITE_AFF_TEXT",
          "288:           ){",
          "",
          "[Added Lines]",
          "279:         if( pLeft->op!=TK_COLUMN",
          "280:          || sqlite3ExprAffinity(pLeft)!=SQLITE_AFF_TEXT",
          "283:           int isNum;",
          "284:           double rDummy;",
          "285:           isNum = sqlite3AtoF(zNew, &rDummy, iTo, SQLITE_UTF8);",
          "286:           if( isNum<=0 ){",
          "287:             zNew[iTo-1]++;",
          "288:             isNum = sqlite3AtoF(zNew, &rDummy, iTo, SQLITE_UTF8);",
          "289:             zNew[iTo-1]--;",
          "290:           }",
          "291:           if( isNum>0 ){",
          "",
          "---------------"
        ],
        "test/like3.test||test/like3.test": [
          "File: test/like3.test -> test/like3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "198:   SELECT * FROM t0 WHERE t0.c0 LIKE './';",
          "199: } {./}",
          "202: # 2019-02-27",
          "203: # Verify that the LIKE optimization works with an ESCAPE clause when",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "201: # 2019-06-14",
          "202: # Ticket https://www.sqlite.org/src/info/ce8717f0885af975",
          "203: do_execsql_test like3-5.410 {",
          "204:   DROP TABLE IF EXISTS t0;",
          "205:   CREATE TABLE t0(c0 INT UNIQUE COLLATE NOCASE);",
          "206:   INSERT INTO t0(c0) VALUES ('.1%');",
          "207:   SELECT * FROM t0 WHERE t0.c0 LIKE '.1%';",
          "208: } {.1%}",
          "",
          "---------------"
        ],
        "test/tkt-78e04e52ea.test||test/tkt-78e04e52ea.test": [
          "File: test/tkt-78e04e52ea.test -> test/tkt-78e04e52ea.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:   }",
          "42: } {}",
          "43: do_test tkt-78e04-1.4 {",
          "45: } {/*SCAN TABLE  USING COVERING INDEX i1*/}",
          "46: do_test tkt-78e04-1.5 {",
          "47:   execsql {",
          "",
          "[Removed Lines]",
          "44:  db eval {EXPLAIN QUERY PLAN SELECT \"\" FROM \"\" WHERE \"\" LIKE '1abc%';}",
          "",
          "[Added Lines]",
          "44:  db eval {EXPLAIN QUERY PLAN SELECT \"\" FROM \"\" WHERE \"\" LIKE '1e5%';}",
          "",
          "---------------"
        ],
        "test/vtab1.test||test/vtab1.test": [
          "File: test/vtab1.test -> test/vtab1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1311:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ?} 8 9}",
          "1313:   1.3 \"SELECT a FROM e6 WHERE b LIKE '8J%'\" {3 4}",
          "1316:   1.4 \"SELECT a FROM e6 WHERE b LIKE '8j%'\" {3 4}",
          "1318: } {",
          "1319:   set echo_module {}",
          "1320:   do_execsql_test 18.$tn.1 $sql $res",
          "",
          "[Removed Lines]",
          "1314:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b like ?} 8J%}",
          "1317:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b like ?} 8j%}",
          "",
          "[Added Lines]",
          "1314:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b like ?} 8J 8k 8J%}",
          "1317:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b like ?} 8J 8k 8j%}",
          "1319:   1.5 \"SELECT a FROM e6 WHERE b LIKE '8%'\" {3 4}",
          "1320:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b like ?} 8%}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1324: do_execsql_test 18.2.0 {  PRAGMA case_sensitive_like = ON }",
          "1325: foreach {tn sql res filter} {",
          "1329:   2.2 \"SELECT a FROM e6 WHERE b LIKE '8j%'\" {}",
          "1331: } {",
          "1332:   set echo_module {}",
          "1333:   do_execsql_test 18.$tn.1 $sql $res",
          "",
          "[Removed Lines]",
          "1326:   2.1 \"SELECT a FROM e6 WHERE b LIKE '8J%'\" {3 4}",
          "1327:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b like ?} 8J%}",
          "1330:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b like ?} 8j%}",
          "",
          "[Added Lines]",
          "1329:   2.1 \"SELECT a FROM e6 WHERE b LIKE '8%'\" {3 4}",
          "1330:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b like ?} 8%}",
          "1333:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b like ?} 8j 8k 8j%}",
          "1335:   2.3 \"SELECT a FROM e6 WHERE b LIKE '8J%'\" {3 4}",
          "1336:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b like ?} 8J 8K 8J%}",
          "",
          "---------------"
        ],
        "test/vtabH.test||test/vtabH.test": [
          "File: test/vtabH.test -> test/vtabH.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: foreach {tn sql expect} {",
          "34:   1 \"SELECT * FROM e6 WHERE b LIKE '8abc'\" {",
          "37:   }",
          "39:   2 \"SELECT * FROM e6 WHERE b GLOB '8abc'\" {",
          "40:     xBestIndex {SELECT rowid, a, b FROM 't6' WHERE b glob ?}",
          "42:   }",
          "43: } {",
          "44:   do_test 1.$tn {",
          "",
          "[Removed Lines]",
          "35:     xBestIndex {SELECT rowid, a, b FROM 't6' WHERE b like ?}",
          "36:     xFilter {SELECT rowid, a, b FROM 't6' WHERE b like ?} 8abc",
          "41:     xFilter {SELECT rowid, a, b FROM 't6' WHERE b glob ?} 8abc",
          "",
          "[Added Lines]",
          "35:     xBestIndex",
          "36:        {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b like ?}",
          "37:     xFilter",
          "38:        {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b like ?}",
          "39:        8ABC 8abd 8abc",
          "43:      xBestIndex",
          "44:        {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b glob ?}",
          "45:      xFilter",
          "46:        {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b glob ?}",
          "47:        8abc 8abd 8abc",
          "48:   }",
          "49:   3 \"SELECT * FROM e6 WHERE b LIKE '8e/'\" {",
          "50:     xBestIndex {SELECT rowid, a, b FROM 't6' WHERE b like ?}",
          "51:     xFilter {SELECT rowid, a, b FROM 't6' WHERE b like ?} 8e/",
          "52:   }",
          "53:   4 \"SELECT * FROM e6 WHERE b GLOB '8e/'\" {",
          "55:     xFilter {SELECT rowid, a, b FROM 't6' WHERE b glob ?} 8e/",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c06ede105dd2789a595b59ab2a6b7add3396f9e8",
      "candidate_info": {
        "commit_hash": "c06ede105dd2789a595b59ab2a6b7add3396f9e8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c06ede105dd2789a595b59ab2a6b7add3396f9e8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/tclsqlite.c",
          "test/tclsqlite.test"
        ],
        "message": "Add the new \"bind_fallback\" method to the \"sqlite3\" object in the TCL interface.\n\nFossilOrigin-Name: c7f70b6d96338dba201e005104e7f7148c1a8cd767ab05e35b44617c4c797bc5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/tclsqlite.c||src/tclsqlite.c",
          "test/tclsqlite.test||test/tclsqlite.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 00ae0c6c4815366bd2f36bc054b13bc7b568dd0a3caceddf0eba4db33f010ee4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/tclsqlite.c||src/tclsqlite.c": [
          "File: src/tclsqlite.c -> src/tclsqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "549:   if( pDb->zProfile ){",
          "550:     Tcl_Free(pDb->zProfile);",
          "551:   }",
          "552:   if( pDb->zAuth ){",
          "553:     Tcl_Free(pDb->zAuth);",
          "554:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "553:   if( pDb->zBindFallback ){",
          "554:     Tcl_Free(pDb->zBindFallback);",
          "555:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1388:     const char *zVar = sqlite3_bind_parameter_name(pStmt, i);",
          "1389:     if( zVar!=0 && (zVar[0]=='$' || zVar[0]==':' || zVar[0]=='@') ){",
          "1390:       Tcl_Obj *pVar = Tcl_GetVar2Ex(interp, &zVar[1], 0, 0);",
          "1391:       if( pVar ){",
          "1392:         int n;",
          "1393:         u8 *data;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1397:       if( pVar==0 && pDb->zBindFallback!=0 ){",
          "1398:         Tcl_Obj *pCmd;",
          "1399:         int rx;",
          "1400:         pCmd = Tcl_NewStringObj(pDb->zBindFallback, -1);",
          "1401:         Tcl_IncrRefCount(pCmd);",
          "1402:         Tcl_ListObjAppendElement(interp, pCmd, Tcl_NewStringObj(zVar,-1));",
          "1403:         if( needResultReset ) Tcl_ResetResult(interp);",
          "1404:         needResultReset = 1;",
          "1405:         rx = Tcl_EvalObjEx(interp, pCmd, TCL_EVAL_DIRECT);",
          "1406:         Tcl_DecrRefCount(pCmd);",
          "1407:         if( rx==TCL_OK ){",
          "1408:           pVar = Tcl_GetObjResult(interp);",
          "1409:         }else if( rx==TCL_ERROR ){",
          "1410:           rc = TCL_ERROR;",
          "1411:           break;",
          "1412:         }else{",
          "1413:           pVar = 0;",
          "1414:         }",
          "1415:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1423:       }else{",
          "1424:         sqlite3_bind_null(pStmt, i);",
          "1425:       }",
          "1426:     }",
          "1427:   }",
          "1428:   pPreStmt->nParm = iParm;",
          "1432: }",
          "",
          "[Removed Lines]",
          "1431:   return TCL_OK;",
          "",
          "[Added Lines]",
          "1451:       if( needResultReset ) Tcl_ResetResult(pDb->interp);",
          "1456:   if( needResultReset && rc==TCL_OK ) Tcl_ResetResult(pDb->interp);",
          "1458:   return rc;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1887:   int choice;",
          "1888:   int rc = TCL_OK;",
          "1889:   static const char *DB_strs[] = {",
          "1904:   };",
          "1905:   enum DB_enum {",
          "1919:   };",
          "",
          "[Removed Lines]",
          "1890:     \"authorizer\",             \"backup\",                \"busy\",",
          "1891:     \"cache\",                  \"changes\",               \"close\",",
          "1892:     \"collate\",                \"collation_needed\",      \"commit_hook\",",
          "1893:     \"complete\",               \"copy\",                  \"deserialize\",",
          "1894:     \"enable_load_extension\",  \"errorcode\",             \"eval\",",
          "1895:     \"exists\",                 \"function\",              \"incrblob\",",
          "1896:     \"interrupt\",              \"last_insert_rowid\",     \"nullvalue\",",
          "1897:     \"onecolumn\",              \"preupdate\",             \"profile\",",
          "1898:     \"progress\",               \"rekey\",                 \"restore\",",
          "1899:     \"rollback_hook\",          \"serialize\",             \"status\",",
          "1900:     \"timeout\",                \"total_changes\",         \"trace\",",
          "1901:     \"trace_v2\",               \"transaction\",           \"unlock_notify\",",
          "1902:     \"update_hook\",            \"version\",               \"wal_hook\",",
          "1903:     0",
          "1906:     DB_AUTHORIZER,            DB_BACKUP,               DB_BUSY,",
          "1907:     DB_CACHE,                 DB_CHANGES,              DB_CLOSE,",
          "1908:     DB_COLLATE,               DB_COLLATION_NEEDED,     DB_COMMIT_HOOK,",
          "1909:     DB_COMPLETE,              DB_COPY,                 DB_DESERIALIZE,",
          "1910:     DB_ENABLE_LOAD_EXTENSION, DB_ERRORCODE,            DB_EVAL,",
          "1911:     DB_EXISTS,                DB_FUNCTION,             DB_INCRBLOB,",
          "1912:     DB_INTERRUPT,             DB_LAST_INSERT_ROWID,    DB_NULLVALUE,",
          "1913:     DB_ONECOLUMN,             DB_PREUPDATE,            DB_PROFILE,",
          "1914:     DB_PROGRESS,              DB_REKEY,                DB_RESTORE,",
          "1915:     DB_ROLLBACK_HOOK,         DB_SERIALIZE,            DB_STATUS,",
          "1916:     DB_TIMEOUT,               DB_TOTAL_CHANGES,        DB_TRACE,",
          "1917:     DB_TRACE_V2,              DB_TRANSACTION,          DB_UNLOCK_NOTIFY,",
          "1918:     DB_UPDATE_HOOK,           DB_VERSION,              DB_WAL_HOOK",
          "",
          "[Added Lines]",
          "1917:     \"authorizer\",             \"backup\",                \"bind_fallback\",",
          "1918:     \"busy\",                   \"cache\",                 \"changes\",",
          "1919:     \"close\",                  \"collate\",               \"collation_needed\",",
          "1920:     \"commit_hook\",            \"complete\",              \"copy\",",
          "1921:     \"deserialize\",            \"enable_load_extension\", \"errorcode\",",
          "1922:     \"eval\",                   \"exists\",                \"function\",",
          "1923:     \"incrblob\",               \"interrupt\",             \"last_insert_rowid\",",
          "1924:     \"nullvalue\",              \"onecolumn\",             \"preupdate\",",
          "1925:     \"profile\",                \"progress\",              \"rekey\",",
          "1926:     \"restore\",                \"rollback_hook\",         \"serialize\",",
          "1927:     \"status\",                 \"timeout\",               \"total_changes\",",
          "1928:     \"trace\",                  \"trace_v2\",              \"transaction\",",
          "1929:     \"unlock_notify\",          \"update_hook\",           \"version\",",
          "1930:     \"wal_hook\",               0",
          "1933:     DB_AUTHORIZER,            DB_BACKUP,               DB_BIND_FALLBACK,",
          "1934:     DB_BUSY,                  DB_CACHE,                DB_CHANGES,",
          "1935:     DB_CLOSE,                 DB_COLLATE,              DB_COLLATION_NEEDED,",
          "1936:     DB_COMMIT_HOOK,           DB_COMPLETE,             DB_COPY,",
          "1937:     DB_DESERIALIZE,           DB_ENABLE_LOAD_EXTENSION,DB_ERRORCODE,",
          "1938:     DB_EVAL,                  DB_EXISTS,               DB_FUNCTION,",
          "1939:     DB_INCRBLOB,              DB_INTERRUPT,            DB_LAST_INSERT_ROWID,",
          "1940:     DB_NULLVALUE,             DB_ONECOLUMN,            DB_PREUPDATE,",
          "1941:     DB_PROFILE,               DB_PROGRESS,             DB_REKEY,",
          "1942:     DB_RESTORE,               DB_ROLLBACK_HOOK,        DB_SERIALIZE,",
          "1943:     DB_STATUS,                DB_TIMEOUT,              DB_TOTAL_CHANGES,",
          "1944:     DB_TRACE,                 DB_TRACE_V2,             DB_TRANSACTION,",
          "1945:     DB_UNLOCK_NOTIFY,         DB_UPDATE_HOOK,          DB_VERSION,",
          "1946:     DB_WAL_HOOK",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2037:     break;",
          "2038:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2086:   case DB_BIND_FALLBACK: {",
          "2087:     if( objc>3 ){",
          "2088:       Tcl_WrongNumArgs(interp, 2, objv, \"?CALLBACK?\");",
          "2089:       return TCL_ERROR;",
          "2090:     }else if( objc==2 ){",
          "2091:       if( pDb->zBindFallback ){",
          "2092:         Tcl_AppendResult(interp, pDb->zBindFallback, (char*)0);",
          "2093:       }",
          "2094:     }else{",
          "2095:       char *zCallback;",
          "2096:       int len;",
          "2097:       if( pDb->zBindFallback ){",
          "2098:         Tcl_Free(pDb->zBindFallback);",
          "2099:       }",
          "2100:       zCallback = Tcl_GetStringFromObj(objv[2], &len);",
          "2101:       if( zCallback && len>0 ){",
          "2102:         pDb->zBindFallback = Tcl_Alloc( len + 1 );",
          "2103:         memcpy(pDb->zBindFallback, zCallback, len+1);",
          "2104:       }else{",
          "2105:         pDb->zBindFallback = 0;",
          "2106:       }",
          "2107:     }",
          "2108:     break;",
          "2109:   }",
          "",
          "---------------"
        ],
        "test/tclsqlite.test||test/tclsqlite.test": [
          "File: test/tclsqlite.test -> test/tclsqlite.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: do_test tcl-1.2 {",
          "43:   set v [catch {db bogus} msg]",
          "44:   lappend v $msg",
          "46: do_test tcl-1.2.1 {",
          "47:   set v [catch {db cache bogus} msg]",
          "48:   lappend v $msg",
          "",
          "[Removed Lines]",
          "45: } {1 {bad option \"bogus\": must be authorizer, backup, busy, cache, changes, close, collate, collation_needed, commit_hook, complete, copy, deserialize, enable_load_extension, errorcode, eval, exists, function, incrblob, interrupt, last_insert_rowid, nullvalue, onecolumn, preupdate, profile, progress, rekey, restore, rollback_hook, serialize, status, timeout, total_changes, trace, trace_v2, transaction, unlock_notify, update_hook, version, or wal_hook}}",
          "",
          "[Added Lines]",
          "45: } {1 {bad option \"bogus\": must be authorizer, backup, bind_fallback, busy, cache, changes, close, collate, collation_needed, commit_hook, complete, copy, deserialize, enable_load_extension, errorcode, eval, exists, function, incrblob, interrupt, last_insert_rowid, nullvalue, onecolumn, preupdate, profile, progress, rekey, restore, rollback_hook, serialize, status, timeout, total_changes, trace, trace_v2, transaction, unlock_notify, update_hook, version, or wal_hook}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "791:   list [catch { db function xyz -n object ret } msg] $msg",
          "792: } {1 {bad option \"-n\": must be -argcount, -deterministic or -returntype}}",
          "",
          "[Removed Lines]",
          "794: finish_test",
          "",
          "[Added Lines]",
          "794: # 2019-02-28: The \"bind_fallback\" command.",
          "795: #",
          "796: do_test 18.100 {",
          "797:   unset -nocomplain bindings abc def ghi jkl mno e01 e02",
          "798:   set bindings(abc) [expr {1+2}]",
          "799:   set bindings(def) {hello}",
          "800:   set bindings(ghi) [expr {3.1415926*1.0}]",
          "801:   proc bind_callback {nm} {",
          "802:     global bindings",
          "803:     set n2 [string range $nm 1 end]",
          "804:     if {[info exists bindings($n2)]} {",
          "805:       return $bindings($n2)",
          "806:     }",
          "807:     if {[string match e* $n2]} {",
          "808:       error \"no such variable: $nm\"",
          "809:     }",
          "810:     return -code return {}",
          "811:   }",
          "812:   db bind_fallback bind_callback",
          "813:   db eval {SELECT $abc, typeof($abc), $def, typeof($def), $ghi, typeof($ghi)}",
          "814: } {3 integer hello text 3.1415926 real}",
          "815: do_test 18.110 {",
          "816:   db eval {SELECT quote(@def), typeof(@def)}",
          "817: } {X'68656C6C6F' blob}",
          "818: do_execsql_test 18.120 {",
          "819:   SELECT typeof($mno);",
          "820: } {null}",
          "821: do_catchsql_test 18.130 {",
          "822:   SELECT $e01;",
          "823: } {1 {no such variable: $e01}}",
          "824: do_test 18.140 {",
          "825:   db bind_fallback",
          "826: } {bind_callback}",
          "827: do_test 18.200 {",
          "828:   db bind_fallback {}",
          "829:   db eval {SELECT $abc, typeof($abc), $def, typeof($def), $ghi, typeof($ghi)}",
          "830: } {{} null {} null {} null}",
          "831: do_test 18.300 {",
          "832:   unset -nocomplain bindings",
          "833:   proc bind_callback {nm} {lappend ::bindings $nm}",
          "834:   db bind_fallback bind_callback",
          "835:   db eval {SELECT $abc, @def, $ghi(123), :mno}",
          "836:   set bindings",
          "837: } {{$abc} @def {$ghi(123)} :mno}",
          "838: do_test 18.900 {",
          "839:   set rc [catch {db bind_fallback a b} msg]",
          "840:   lappend rc $msg",
          "841: } {1 {wrong # args: should be \"db bind_fallback ?CALLBACK?\"}}",
          "842: do_test 18.910 {",
          "843:   db bind_fallback bind_fallback_does_not_exist",
          "844: } {}",
          "845: do_catchsql_test 19.911 {",
          "846:   SELECT $abc, typeof($abc), $def, typeof($def), $ghi, typeof($ghi);",
          "847: } {1 {invalid command name \"bind_fallback_does_not_exist\"}}",
          "848: db bind_fallback {}",
          "850: finish_test",
          "",
          "---------------"
        ]
      }
    }
  ]
}