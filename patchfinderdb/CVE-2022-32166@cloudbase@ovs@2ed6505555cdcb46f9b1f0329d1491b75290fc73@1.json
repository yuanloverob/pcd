{
  "cve_id": "CVE-2022-32166",
  "cve_desc": "In ovs versions v0.90.0 through v2.5.0 are vulnerable to heap buffer over-read in flow.c. An unsafe comparison of \u201cminimasks\u201d function could lead access to an unmapped region of memory. This vulnerability is capable of crashing the software, memory modification, and possible remote execution.",
  "repo": "cloudbase/ovs",
  "patch_hash": "2ed6505555cdcb46f9b1f0329d1491b75290fc73",
  "patch_info": {
    "commit_hash": "2ed6505555cdcb46f9b1f0329d1491b75290fc73",
    "repo": "cloudbase/ovs",
    "commit_url": "https://github.com/cloudbase/ovs/commit/2ed6505555cdcb46f9b1f0329d1491b75290fc73",
    "files": [
      "lib/flow.c"
    ],
    "message": "flow: Avoid unsafe comparison of minimasks.\n\nThe following, run inside the OVS sandbox, caused OVS to abort when\nAddress Sanitizer was used:\n\n    ovs-vsctl add-br br-int\n    ovs-ofctl add-flow br-int \"table=0,cookie=0x1234,priority=10000,icmp,actions=drop\"\n    ovs-ofctl --strict del-flows br-int \"table=0,cookie=0x1234/-1,priority=10000\"\n\nSample report from Address Sanitizer:\n\n==3029==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x603000043260 at pc 0x7f6b09c2459b bp 0x7ffcb67e7540 sp 0x7ffcb67e6cf0\nREAD of size 40 at 0x603000043260 thread T0\n    #0 0x7f6b09c2459a  (/lib/x86_64-linux-gnu/libasan.so.5+0xb859a)\n    #1 0x565110a748a5 in minimask_equal ../lib/flow.c:3510\n    #2 0x565110a9ea41 in minimatch_equal ../lib/match.c:1821\n    #3 0x56511091e864 in collect_rules_strict ../ofproto/ofproto.c:4516\n    #4 0x56511093d526 in delete_flow_start_strict ../ofproto/ofproto.c:5959\n    #5 0x56511093d526 in ofproto_flow_mod_start ../ofproto/ofproto.c:7949\n    #6 0x56511093d77b in handle_flow_mod__ ../ofproto/ofproto.c:6122\n    #7 0x56511093db71 in handle_flow_mod ../ofproto/ofproto.c:6099\n    #8 0x5651109407f6 in handle_single_part_openflow ../ofproto/ofproto.c:8406\n    #9 0x5651109407f6 in handle_openflow ../ofproto/ofproto.c:8587\n    #10 0x5651109e40da in ofconn_run ../ofproto/connmgr.c:1318\n    #11 0x5651109e40da in connmgr_run ../ofproto/connmgr.c:355\n    #12 0x56511092b129 in ofproto_run ../ofproto/ofproto.c:1826\n    #13 0x5651108f23cd in bridge_run__ ../vswitchd/bridge.c:2965\n    #14 0x565110904887 in bridge_run ../vswitchd/bridge.c:3023\n    #15 0x5651108e659c in main ../vswitchd/ovs-vswitchd.c:127\n    #16 0x7f6b093b709a in __libc_start_main ../csu/libc-start.c:308\n    #17 0x5651108e9009 in _start (/home/blp/nicira/ovs/_build/vswitchd/ovs-vswitchd+0x11d009)\n\nThis fixes the problem, which although largely theoretical could crop up\nwith odd implementations of memcmp(), perhaps ones optimized in various\n\"clever\" ways.  All in all, it seems best to avoid the theoretical problem.\n\nAcked-by: Dumitru Ceara <dceara@redhat.com>\nSigned-off-by: Ben Pfaff <blp@ovn.org>",
    "before_after_code_files": [
      "lib/flow.c||lib/flow.c"
    ]
  },
  "patch_diff": {
    "lib/flow.c||lib/flow.c": [
      "File: lib/flow.c -> lib/flow.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3511: {",
      "3512:     return !memcmp(a, b, sizeof *a",
      "3513:                    + MINIFLOW_VALUES_SIZE(miniflow_n_values(&a->masks)));",
      "",
      "[Removed Lines]",
      "3509: bool",
      "3510: minimask_equal(const struct minimask *a, const struct minimask *b)",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d2ede8c07d5dfe2c009ba0ec54d5156c7a420fb2",
      "candidate_info": {
        "commit_hash": "d2ede8c07d5dfe2c009ba0ec54d5156c7a420fb2",
        "repo": "cloudbase/ovs",
        "commit_url": "https://github.com/cloudbase/ovs/commit/d2ede8c07d5dfe2c009ba0ec54d5156c7a420fb2",
        "files": [
          "ofproto/ofproto.c"
        ],
        "message": "ofproto: Fix for ovs-vswitchd crash on flow-mod with unsupported action\n\nProblem Description:\nThe ovs-vswitchd is crashing while invoking flow-mod with upsupported\naction(Tested with ovs2.10.1)\n\nSteps to recreate:\nStep 1) Create a flow\novs-ofctl add-flow switch1\npriority=228,dl_type=0x0800,dl_vlan=\"600\",in_port=25,actions=output:ALL\nThis step is successful.\n\nStep 2) Invoke flow-mod with incorrect contents.\novs-ofctl mod-flows switch1\npriority=228,dl_type=0x0800,dl_vlan=\"600\",in_port=25,actions=output:ALL,mod_vlan_vid:50,mod_vlan_pcp=6,mod_nw_tos=16\n\nIn the above example, the ofproto provider I have, will return error for\nrule_construct as set_fields come after Output.\n\nHowever the OVS is ignoring the error (The return value of add_flow_init\nis ignored in modify_flow_init_strict) and eventually the ovs-vswitched\ncrashes.\n\nCrash backtrace:\n-----------------------\n\nThread 1 \"ovs-vswitchd\" received signal SIGSEGV, Segmentation fault.\n\n 0x00007f6a06e785fb in modify_flows_start__ (\n   ofproto=ofproto@entry=0x55b289cecc28, ofm=ofm@entry=0x7ffdf7d57b70)\n     at ofproto/ofproto.c:5402\n 5402    in ofproto/ofproto.c\n (gdb) bt\n #0  0x00007f6a06e785fb in modify_flows_start__ (\n   ofproto=ofproto@entry=0x55b289cecc28, ofm=ofm@entry=0x7ffdf7d57b70)\n    at ofproto/ofproto.c:5402\n #1  0x00007f6a06e790db in modify_flows_start_loose (ofm=0x7ffdf7d57b70,\n    ofproto=0x55b289cecc28) at ofproto/ofproto.c:5443\n #2  ofproto_flow_mod_start (ofproto=ofproto@entry=0x55b289cecc28,\n     ofm=ofm@entry=0x7ffdf7d57b70) at ofproto/ofproto.c:7672\n #3  0x00007f6a06e79164 in handle_flow_mod__ (\n    ofproto=ofproto@entry=0x55b289cecc28, fm=fm@entry=0x7ffdf7d57d20,\n    req=req@entry=0x7ffdf7d57cd0) at ofproto/ofproto.c:5858\n #4  0x00007f6a06e792c2 in handle_flow_mod (ofconn=ofconn@entry\n =0x55b289d528c0,\noh=oh@entry=0x55b289d5a410) at ofproto/ofproto.c:5835\n #5  0x00007f6a06e7a173 in handle_openflow__ (msg=0x55b289d351d0,\n    ofconn=0x55b289d528c0) at ofproto/ofproto.c:8127\n #6  handle_openflow (ofconn=0x55b289d528c0, ofp_msg=0x55b289d351d0)\n  at ofproto/ofproto.c:8296\n #7  0x00007f6a06e6a013 in ofconn_run (\n  handle_openflow=0x7f6a06e796f0 <handle_openflow>,\n ofconn=0x55b289d528c0)\n at ofproto/connmgr.c:1446\n #8  connmgr_run (mgr=0x55b289d14fe0,\n handle_openflow=handle_openflow@entry=0x7f6a06e796f0\nhandle_openflow>)\nat ofproto/connmgr.c:365\n\nWith this fix, OVS does not crash.\n\nSigned-off-by: Parameswaran Krishnamurthy <parkrish@gmail.com>\nSigned-off-by: Ben Pfaff <blp@ovn.org>",
        "before_after_code_files": [
          "ofproto/ofproto.c||ofproto/ofproto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ofproto/ofproto.c||ofproto/ofproto.c": [
          "File: ofproto/ofproto.c -> ofproto/ofproto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5652: }",
          "5654: static enum ofperr",
          "5658:     OVS_EXCLUDED(ofproto_mutex)",
          "5659: {",
          "5660:     rule_criteria_init(&ofm->criteria, fm->table_id, &fm->match, 0,",
          "",
          "[Removed Lines]",
          "5655: modify_flows_init_loose(struct ofproto *ofproto,",
          "5656:                         struct ofproto_flow_mod *ofm,",
          "5657:                         const struct ofputil_flow_mod *fm)",
          "",
          "[Added Lines]",
          "5655: modify_flows_init_loose(struct ofproto *ofproto,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5737: }",
          "5739: static enum ofperr",
          "5743:     OVS_EXCLUDED(ofproto_mutex)",
          "5744: {",
          "5745:     rule_criteria_init(&ofm->criteria, fm->table_id, &fm->match, fm->priority,",
          "",
          "[Removed Lines]",
          "5740: modify_flow_init_strict(struct ofproto *ofproto OVS_UNUSED,",
          "5741:                         struct ofproto_flow_mod *ofm,",
          "5742:                         const struct ofputil_flow_mod *fm)",
          "",
          "[Added Lines]",
          "5738: modify_flow_init_strict(struct ofproto *ofproto OVS_UNUSED,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aa02ac640851215742f077f568ed41cddd7ac2fd",
      "candidate_info": {
        "commit_hash": "aa02ac640851215742f077f568ed41cddd7ac2fd",
        "repo": "cloudbase/ovs",
        "commit_url": "https://github.com/cloudbase/ovs/commit/aa02ac640851215742f077f568ed41cddd7ac2fd",
        "files": [
          "ovsdb/jsonrpc-server.c",
          "ovsdb/ovsdb-server.c"
        ],
        "message": "ovsdb-server: Don't log closing session at program termination.\n\nWhen ovsdb-server closes a remote connection, it logs a message about it\nthat includes the reason.  Until now this has included sessions that it\ncloses when it exits.  That meant that, when --run was used, there was a\nrace between noticing that the subprocess exited and noticing that the\nsession that that subprocess (presumably) had open had been closed.  If\nit noticed the latter first, nothing was logged (because it didn't log\nanything if a session was closed in the ordinary way by the client).  If\nit noticed the former first, it logged a message about closing the session\nitself.\n\nThis is a benign race that causes no real problems--except that the tests\ndidn't expect to see the log message from the former case and fail with\nerrors like the following:\n\n    1826. ovsdb-server.at:92: testing truncating database log with bad transaction ...\n    ./ovsdb-server.at:96: ovsdb-tool create db schema\n    stderr:\n    stdout:\n    ./ovsdb-server.at:104: ovsdb-server --remote=punix:socket db --run=\"sh txnfile\"\n    --- /dev/null   2018-04-24 08:50:58.769000000 +0000\n    +++ /root/openvswitch-2.9.2/rpm/rpmbuild/BUILD/openvswitch-2.9.2/tests/testsuite.dir/at-groups/1826/stderr      2018-05-29 14:29:56.529257295 +0000\n    @@ -0,0 +1,2 @@\n    +2018-05-29T14:29:56Z|00001|ovsdb_jsonrpc_server|INFO|unix#0: disconnecting (removing ordinals database due to server termination)\n    +2018-05-29T14:29:56Z|00002|ovsdb_jsonrpc_server|INFO|unix#0: disconnecting (removing _Server database due to server termination)\n\nThis fixes the race.  This particular log message isn't too useful since\nit's pretty obvious that ovsdb-server is closing those sessions, since\nafter all it's exiting!\n\nReported-by: Sanket Sudake <sanket@infracloud.io>\nReported-at: https://mail.openvswitch.org/pipermail/ovs-discuss/2018-May/046840.html\nSigned-off-by: Ben Pfaff <blp@ovn.org>\nAcked-by: Numan Siddique <nusiddiq@redhat.com>",
        "before_after_code_files": [
          "ovsdb/jsonrpc-server.c||ovsdb/jsonrpc-server.c",
          "ovsdb/ovsdb-server.c||ovsdb/ovsdb-server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ovsdb/jsonrpc-server.c||ovsdb/jsonrpc-server.c": [
          "File: ovsdb/jsonrpc-server.c -> ovsdb/jsonrpc-server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "657:     struct ovsdb_jsonrpc_session *s, *next;",
          "659:     LIST_FOR_EACH_SAFE (s, next, node, &remote->sessions) {",
          "661:             jsonrpc_session_force_reconnect(s->js);",
          "662:             if (jsonrpc_session_is_connected(s->js)) {",
          "663:                 VLOG_INFO(\"%s: disconnecting (%s)\",",
          "",
          "[Removed Lines]",
          "660:         if (force || !s->db_change_aware) {",
          "",
          "[Added Lines]",
          "662:         if (force || !s->db_change_aware) {",
          "",
          "---------------"
        ],
        "ovsdb/ovsdb-server.c||ovsdb/ovsdb-server.c": [
          "File: ovsdb/ovsdb-server.c -> ovsdb/ovsdb-server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "460:     SHASH_FOR_EACH_SAFE(node, next, &all_dbs) {",
          "461:         struct db *db = node->data;",
          "465:         shash_delete(&all_dbs, node);",
          "466:     }",
          "467:     ovsdb_jsonrpc_server_destroy(jsonrpc);",
          "",
          "[Removed Lines]",
          "462:         close_db(&server_config, db,",
          "463:                  xasprintf(\"removing %s database due to server termination\",",
          "464:                            db->db->name));",
          "",
          "[Added Lines]",
          "462:         close_db(&server_config, db, NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4c1b4d11f8e6af44d8b22fd2837c1dfeda2cd399",
      "candidate_info": {
        "commit_hash": "4c1b4d11f8e6af44d8b22fd2837c1dfeda2cd399",
        "repo": "cloudbase/ovs",
        "commit_url": "https://github.com/cloudbase/ovs/commit/4c1b4d11f8e6af44d8b22fd2837c1dfeda2cd399",
        "files": [
          "lib/odp-util.c"
        ],
        "message": "odp-util: Fix passing uninitialized bytes in OVS_KEY_ATTR_CT_ORIG_TUPLE_IPV*.\n\nBoth ovs_key_ct_tuple_ipv* structures contains padding at the end\nthat mast be cleared before passing attributes to kernel:\n\n Syscall param sendmsg(msg.msg_iov[0]) points to uninitialised byte(s)\n    at 0x566A607: sendmsg (sendmsg.c:28)\n    by 0xFC95CE: nl_sock_transact_multiple__ (netlink-socket.c:858)\n    by 0xFC8580: nl_sock_transact_multiple (netlink-socket.c:1079)\n    by 0xFC83FF: nl_transact_multiple (netlink-socket.c:1839)\n    by 0xFA8648: dpif_netlink_operate__ (dpif-netlink.c:1926)\n    by 0xFA789F: dpif_netlink_operate_chunks (dpif-netlink.c:2219)\n    by 0xFA25CB: dpif_netlink_operate (dpif-netlink.c:2278)\n    by 0xE5BB4C: dpif_operate (dpif.c:1377)\n    by 0xE5B7F6: dpif_flow_put (dpif.c:1048)\n    by 0xE5B49A: dpif_probe_feature (dpif.c:965)\n    by 0xDD6BF5: check_ct_orig_tuple (ofproto-dpif.c:1557)\n    by 0xDD41EC: check_support (ofproto-dpif.c:1590)\n    by 0xDD3BF3: open_dpif_backer (ofproto-dpif.c:818)\n    by 0xDC8467: construct (ofproto-dpif.c:1605)\n    by 0xDAD6BB: ofproto_create (ofproto.c:549)\n    by 0xD96A19: bridge_reconfigure (bridge.c:877)\n    by 0xD9625D: bridge_run (bridge.c:3324)\n    by 0xDA5829: main (ovs-vswitchd.c:127)\n  Address 0x1ffefe36a5 is on thread 1's stack\n  in frame #4, created by dpif_netlink_operate__ (dpif-netlink.c:1839)\n  Uninitialised value was created by a stack allocation\n    at 0xEB87D0: odp_flow_key_from_flow__ (odp-util.c:5996)\n\nFixes: daf4d3c18da4 (\"odp: Support conntrack orig tuple key.\")\nSigned-off-by: Ilya Maximets <i.maximets@ovn.org>\nAcked-by: Ben Pfaff <blp@ovn.org>",
        "before_after_code_files": [
          "lib/odp-util.c||lib/odp-util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/odp-util.c||lib/odp-util.c": [
          "File: lib/odp-util.c -> lib/odp-util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6001:     }",
          "6002:     if (flow->ct_nw_proto) {",
          "6003:         if (parms->support.ct_orig_tuple",
          "6013:                               sizeof ct);",
          "6014:         } else if (parms->support.ct_orig_tuple6",
          "6024:                               sizeof ct);",
          "6025:         }",
          "6026:     }",
          "",
          "[Removed Lines]",
          "6004:             && flow->dl_type == htons(ETH_TYPE_IP)) {",
          "6005:             struct ovs_key_ct_tuple_ipv4 ct = {",
          "6006:                 data->ct_nw_src,",
          "6007:                 data->ct_nw_dst,",
          "6008:                 data->ct_tp_src,",
          "6009:                 data->ct_tp_dst,",
          "6010:                 data->ct_nw_proto,",
          "6011:             };",
          "6012:             nl_msg_put_unspec(buf, OVS_KEY_ATTR_CT_ORIG_TUPLE_IPV4, &ct,",
          "6015:                    && flow->dl_type == htons(ETH_TYPE_IPV6)) {",
          "6016:             struct ovs_key_ct_tuple_ipv6 ct = {",
          "6017:                 data->ct_ipv6_src,",
          "6018:                 data->ct_ipv6_dst,",
          "6019:                 data->ct_tp_src,",
          "6020:                 data->ct_tp_dst,",
          "6021:                 data->ct_nw_proto,",
          "6022:             };",
          "6023:             nl_msg_put_unspec(buf, OVS_KEY_ATTR_CT_ORIG_TUPLE_IPV6, &ct,",
          "",
          "[Added Lines]",
          "6004:             && flow->dl_type == htons(ETH_TYPE_IP)) {",
          "6005:             struct ovs_key_ct_tuple_ipv4 *ct;",
          "6008:             ct = nl_msg_put_unspec_zero(buf, OVS_KEY_ATTR_CT_ORIG_TUPLE_IPV4,",
          "6009:                                         sizeof *ct);",
          "6010:             ct->ipv4_src = data->ct_nw_src;",
          "6011:             ct->ipv4_dst = data->ct_nw_dst;",
          "6012:             ct->src_port = data->ct_tp_src;",
          "6013:             ct->dst_port = data->ct_tp_dst;",
          "6016:                    && flow->dl_type == htons(ETH_TYPE_IPV6)) {",
          "6017:             struct ovs_key_ct_tuple_ipv6 *ct;",
          "6020:             ct = nl_msg_put_unspec_zero(buf, OVS_KEY_ATTR_CT_ORIG_TUPLE_IPV6,",
          "6021:                                         sizeof *ct);",
          "6022:             ct->ipv6_src = data->ct_ipv6_src;",
          "6023:             ct->ipv6_dst = data->ct_ipv6_dst;",
          "6024:             ct->src_port = data->ct_tp_src;",
          "6025:             ct->dst_port = data->ct_tp_dst;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c9336012c2e00b046c1facf989fb59e6832d4e21",
      "candidate_info": {
        "commit_hash": "c9336012c2e00b046c1facf989fb59e6832d4e21",
        "repo": "cloudbase/ovs",
        "commit_url": "https://github.com/cloudbase/ovs/commit/c9336012c2e00b046c1facf989fb59e6832d4e21",
        "files": [
          "datapath/flow_netlink.c"
        ],
        "message": "datapath: Don't swap table in nlattr_set() after OVS_ATTR_NESTED is found\n\nUpstream commit:\n\n    commit 72f17baf2352ded6a1d3f4bb2d15da8c678cd2cb\n    Author: Stefano Brivio <sbrivio@redhat.com>\n    Date:   Thu May 3 18:13:25 2018 +0200\n\n    openvswitch: Don't swap table in nlattr_set() after OVS_ATTR_NESTED is found\n\n    If an OVS_ATTR_NESTED attribute type is found while walking\n    through netlink attributes, we call nlattr_set() recursively\n    passing the length table for the following nested attributes, if\n    different from the current one.\n\n    However, once we're done with those sub-nested attributes, we\n    should continue walking through attributes using the current\n    table, instead of using the one related to the sub-nested\n    attributes.\n\n    For example, given this sequence:\n\n    1  OVS_KEY_ATTR_PRIORITY\n    2  OVS_KEY_ATTR_TUNNEL\n    3\tOVS_TUNNEL_KEY_ATTR_ID\n    4\tOVS_TUNNEL_KEY_ATTR_IPV4_SRC\n    5\tOVS_TUNNEL_KEY_ATTR_IPV4_DST\n    6\tOVS_TUNNEL_KEY_ATTR_TTL\n    7\tOVS_TUNNEL_KEY_ATTR_TP_SRC\n    8\tOVS_TUNNEL_KEY_ATTR_TP_DST\n    9  OVS_KEY_ATTR_IN_PORT\n    10 OVS_KEY_ATTR_SKB_MARK\n    11 OVS_KEY_ATTR_MPLS\n\n    we switch to the 'ovs_tunnel_key_lens' table on attribute #3,\n    and we don't switch back to 'ovs_key_lens' while setting\n    attributes #9 to #11 in the sequence. As OVS_KEY_ATTR_MPLS\n    evaluates to 21, and the array size of 'ovs_tunnel_key_lens' is\n    15, we also get this kind of KASan splat while accessing the\n    wrong table:\n\n    [ 7654.586496] ==================================================================\n    [ 7654.594573] BUG: KASAN: global-out-of-bounds in nlattr_set+0x164/0xde9 [openvswitch]\n    [ 7654.603214] Read of size 4 at addr ffffffffc169ecf0 by task handler29/87430\n    [ 7654.610983]\n    [ 7654.612644] CPU: 21 PID: 87430 Comm: handler29 Kdump: loaded Not tainted 3.10.0-866.el7.test.x86_64 #1\n    [ 7654.623030] Hardware name: Dell Inc. PowerEdge R730/072T6D, BIOS 2.1.7 06/16/2016\n    [ 7654.631379] Call Trace:\n    [ 7654.634108]  [<ffffffffb65a7c50>] dump_stack+0x19/0x1b\n    [ 7654.639843]  [<ffffffffb53ff373>] print_address_description+0x33/0x290\n    [ 7654.647129]  [<ffffffffc169b37b>] ? nlattr_set+0x164/0xde9 [openvswitch]\n    [ 7654.654607]  [<ffffffffb53ff812>] kasan_report.part.3+0x242/0x330\n    [ 7654.661406]  [<ffffffffb53ff9b4>] __asan_report_load4_noabort+0x34/0x40\n    [ 7654.668789]  [<ffffffffc169b37b>] nlattr_set+0x164/0xde9 [openvswitch]\n    [ 7654.676076]  [<ffffffffc167ef68>] ovs_nla_get_match+0x10c8/0x1900 [openvswitch]\n    [ 7654.684234]  [<ffffffffb61e9cc8>] ? genl_rcv+0x28/0x40\n    [ 7654.689968]  [<ffffffffb61e7733>] ? netlink_unicast+0x3f3/0x590\n    [ 7654.696574]  [<ffffffffc167dea0>] ? ovs_nla_put_tunnel_info+0xb0/0xb0 [openvswitch]\n    [ 7654.705122]  [<ffffffffb4f41b50>] ? unwind_get_return_address+0xb0/0xb0\n    [ 7654.712503]  [<ffffffffb65d9355>] ? system_call_fastpath+0x1c/0x21\n    [ 7654.719401]  [<ffffffffb4f41d79>] ? update_stack_state+0x229/0x370\n    [ 7654.726298]  [<ffffffffb4f41d79>] ? update_stack_state+0x229/0x370\n    [ 7654.733195]  [<ffffffffb53fe4b5>] ? kasan_unpoison_shadow+0x35/0x50\n    [ 7654.740187]  [<ffffffffb53fe62a>] ? kasan_kmalloc+0xaa/0xe0\n    [ 7654.746406]  [<ffffffffb53fec32>] ? kasan_slab_alloc+0x12/0x20\n    [ 7654.752914]  [<ffffffffb53fe711>] ? memset+0x31/0x40\n    [ 7654.758456]  [<ffffffffc165bf92>] ovs_flow_cmd_new+0x2b2/0xf00 [openvswitch]\n\n    [snip]\n\n    [ 7655.132484] The buggy address belongs to the variable:\n    [ 7655.138226]  ovs_tunnel_key_lens+0xf0/0xffffffffffffd400 [openvswitch]\n    [ 7655.145507]\n    [ 7655.147166] Memory state around the buggy address:\n    [ 7655.152514]  ffffffffc169eb80: 00 00 00 00 00 00 00 00 00 00 fa fa fa fa fa fa\n    [ 7655.160585]  ffffffffc169ec00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n    [ 7655.168644] >ffffffffc169ec80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 fa fa\n    [ 7655.176701]                                                              ^\n    [ 7655.184372]  ffffffffc169ed00: fa fa fa fa 00 00 00 00 fa fa fa fa 00 00 00 05\n    [ 7655.192431]  ffffffffc169ed80: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 00\n    [ 7655.200490] ==================================================================\n\n    Reported-by: Hangbin Liu <liuhangbin@gmail.com>\n    Fixes: 982b52700482 (\"openvswitch: Fix mask generation for nested attributes.\")\n    Signed-off-by: Stefano Brivio <sbrivio@redhat.com>\n    Reviewed-by: Sabrina Dubroca <sd@queasysnail.net>\n    Signed-off-by: David S. Miller <davem@davemloft.net>\n\nSigned-off-by: Yi-Hung Wei <yihung.wei@gmail.com>\nReviewed-by: Greg Rose <gvrose8192@gmail.com>\nTested-by: Greg Rose <gvrose8192@gmail.com>\nSigned-off-by: Justin Pettit <jpettit@ovn.org>",
        "before_after_code_files": [
          "datapath/flow_netlink.c||datapath/flow_netlink.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "datapath/flow_netlink.c||datapath/flow_netlink.c": [
          "File: datapath/flow_netlink.c -> datapath/flow_netlink.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1716:  nla_for_each_nested(nla, attr, rem) {",
          "1722:    memset(nla_data(nla), val, nla_len(nla));",
          "1725:   if (nla_type(nla) == OVS_KEY_ATTR_CT_STATE)",
          "",
          "[Removed Lines]",
          "1717:   if (tbl[nla_type(nla)].len == OVS_ATTR_NESTED) {",
          "1718:    if (tbl[nla_type(nla)].next)",
          "1719:     tbl = tbl[nla_type(nla)].next;",
          "1720:    nlattr_set(nla, val, tbl);",
          "1721:   } else {",
          "1723:   }",
          "",
          "[Added Lines]",
          "1717:   if (tbl[nla_type(nla)].len == OVS_ATTR_NESTED)",
          "1718:    nlattr_set(nla, val, tbl[nla_type(nla)].next ? : tbl);",
          "1719:   else",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6d917cd2bad1bfc1483f8cff7ef348fd30ed1a21",
      "candidate_info": {
        "commit_hash": "6d917cd2bad1bfc1483f8cff7ef348fd30ed1a21",
        "repo": "cloudbase/ovs",
        "commit_url": "https://github.com/cloudbase/ovs/commit/6d917cd2bad1bfc1483f8cff7ef348fd30ed1a21",
        "files": [
          "ofproto/ofproto.c"
        ],
        "message": "ofproto: Fix coredump in ofproto_destroy__().\n\nThere is a coredump when I add and delete bridges. When the rcu thread call\nofproto_destroy__, the main thread may call ofproto_create. But the\nofproto_destroy__ fun doesn't have the ofproto_mutex when access the\nall_ofprotos.\n\n #0  0x00007f824aa0d197 in raise () from /usr/lib64/libc.so.6\n #1  0x00007f824aa0e888 in abort () from /usr/lib64/libc.so.6\n #2  0x0000000000658249 in PAT_abort ()\n #3  0x000000000065538d in patchIllInsHandler ()\n #4  <signal handler called>\n #5  0x0000000000478a5b in hmap_remove (node=0x3320150, hmap=0x95fc40 <all_ofprotos>) at include/openvswitch/hmap.h:287\n #6  ofproto_destroy__ (ofproto=0x3320150) at ofproto/ofproto.c:1642\n #7  0x0000000000535e46 in ovsrcu_call_postponed () at lib/ovs_rcu.c:323\n #8  0x0000000000536014 in ovsrcu_postpone_thread (arg=<optimized out>) at lib/ovs_rcu.c:338\n #9  0x0000000000538488 in ovsthread_wrapper (aux_=<optimized out>) at lib/ovs_thread.c:682\n #10 0x00007f824c130dc5 in start_thread () from /usr/lib64/libpthread.so.0\n #11 0x00007f824aacf7bd in clone () from /usr/lib64/libc.so.6\n\nSigned-off-by: Cheng Liu <liucheng11@huawei.com>\nSigned-off-by: Ben Pfaff <blp@ovn.org>",
        "before_after_code_files": [
          "ofproto/ofproto.c||ofproto/ofproto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ofproto/ofproto.c||ofproto/ofproto.c": [
          "File: ofproto/ofproto.c -> ofproto/ofproto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1593: }",
          "1595: static void",
          "1596: ofproto_destroy__(struct ofproto *ofproto)",
          "1597:     OVS_EXCLUDED(ofproto_mutex)",
          "1598: {",
          "1599:     struct oftable *table;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1596: ofproto_destroy__(struct ofproto *ofproto)",
          "1598: {",
          "",
          "---------------"
        ]
      }
    }
  ]
}