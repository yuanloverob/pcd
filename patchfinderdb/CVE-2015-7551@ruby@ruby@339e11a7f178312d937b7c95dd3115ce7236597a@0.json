{
  "cve_id": "CVE-2015-7551",
  "cve_desc": "The Fiddle::Handle implementation in ext/fiddle/handle.c in Ruby before 2.0.0-p648, 2.1 before 2.1.8, and 2.2 before 2.2.4, as distributed in Apple OS X before 10.11.4 and other products, mishandles tainting, which allows context-dependent attackers to execute arbitrary code or cause a denial of service (application crash) via a crafted string, related to the DL module and the libffi library.  NOTE: this vulnerability exists because of a CVE-2009-5147 regression.",
  "repo": "ruby/ruby",
  "patch_hash": "339e11a7f178312d937b7c95dd3115ce7236597a",
  "patch_info": {
    "commit_hash": "339e11a7f178312d937b7c95dd3115ce7236597a",
    "repo": "ruby/ruby",
    "commit_url": "https://github.com/ruby/ruby/commit/339e11a7f178312d937b7c95dd3115ce7236597a",
    "files": [
      "ChangeLog",
      "ext/fiddle/handle.c",
      "test/fiddle/test_handle.rb",
      "version.h"
    ],
    "message": "merge revision(s): 53153 and 23405@ruby_1_9_1\n\n\t* ext/fiddle/handle.c: check tainted string arguments.\n\t  Patch provided by tenderlove and nobu.\n\n\t* test/fiddle/test_handle.rb (class TestHandle): add test for above.\n\n\t* ext/dl/handle.c (rb_dlhandle_initialize): prohibits DL::dlopen\n\t  with a tainted name of library.\n\t  Patch by sheepman <sheepman AT sheepman.sakura.ne.jp>.\n\n\t* ext/dl/handle.c (rb_dlhandle_sym): ditto\n\n\n\ngit-svn-id: svn+ssh://ci.ruby-lang.org/ruby/branches/ruby_2_1@53156 b2dd03c8-39d4-4d8f-98ff-823fe69b080e",
    "before_after_code_files": [
      "ext/fiddle/handle.c||ext/fiddle/handle.c",
      "test/fiddle/test_handle.rb||test/fiddle/test_handle.rb",
      "version.h||version.h"
    ]
  },
  "patch_diff": {
    "ext/fiddle/handle.c||ext/fiddle/handle.c": [
      "File: ext/fiddle/handle.c -> ext/fiddle/handle.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: #include <ruby.h>",
      "2: #include <fiddle.h>",
      "4: VALUE rb_cHandle;",
      "6: struct dl_handle {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4: #define SafeStringValueCStr(v) (rb_check_safe_obj(rb_string_value(&v)), StringValueCStr(v))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "143:  cflag = RTLD_LAZY | RTLD_GLOBAL;",
      "144:  break;",
      "145:       case 1:",
      "147:  cflag = RTLD_LAZY | RTLD_GLOBAL;",
      "148:  break;",
      "149:       case 2:",
      "151:  cflag = NUM2INT(flag);",
      "152:  break;",
      "153:       default:",
      "",
      "[Removed Lines]",
      "146:  clib = NIL_P(lib) ? NULL : StringValuePtr(lib);",
      "150:  clib = NIL_P(lib) ? NULL : StringValuePtr(lib);",
      "",
      "[Added Lines]",
      "148:  clib = NIL_P(lib) ? NULL : SafeStringValueCStr(lib);",
      "152:  clib = NIL_P(lib) ? NULL : SafeStringValueCStr(lib);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "263:     return PTR2NUM(fiddle_handle);",
      "264: }",
      "",
      "[Removed Lines]",
      "266: static VALUE fiddle_handle_sym(void *handle, const char *symbol);",
      "",
      "[Added Lines]",
      "268: static VALUE fiddle_handle_sym(void *handle, VALUE symbol);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "282:  rb_raise(rb_eFiddleError, \"closed handle\");",
      "283:     }",
      "286: }",
      "288: #ifndef RTLD_NEXT",
      "",
      "[Removed Lines]",
      "285:     return fiddle_handle_sym(fiddle_handle->ptr, StringValueCStr(sym));",
      "",
      "[Added Lines]",
      "287:     return fiddle_handle_sym(fiddle_handle->ptr, sym);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "305: static VALUE",
      "306: rb_fiddle_handle_s_sym(VALUE self, VALUE sym)",
      "307: {",
      "309: }",
      "311: static VALUE",
      "313: {",
      "314: #if defined(HAVE_DLERROR)",
      "315:     const char *err;",
      "",
      "[Removed Lines]",
      "308:     return fiddle_handle_sym(RTLD_NEXT, StringValueCStr(sym));",
      "312: fiddle_handle_sym(void *handle, const char *name)",
      "",
      "[Added Lines]",
      "310:     return fiddle_handle_sym(RTLD_NEXT, sym);",
      "314: fiddle_handle_sym(void *handle, VALUE symbol)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "318: # define CHECK_DLERROR",
      "319: #endif",
      "320:     void (*func)();",
      "322:     rb_secure(2);",
      "323: #ifdef HAVE_DLERROR",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "323:     const char *name = SafeStringValueCStr(symbol);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "367:     }",
      "368: #endif",
      "369:     if( !func ){",
      "371:     }",
      "373:     return PTR2NUM(func);",
      "",
      "[Removed Lines]",
      "370:  rb_raise(rb_eFiddleError, \"unknown symbol \\\"%s\\\"\", name);",
      "",
      "[Added Lines]",
      "373:  rb_raise(rb_eFiddleError, \"unknown symbol \\\"%\"PRIsVALUE\"\\\"\", symbol);",
      "",
      "---------------"
    ],
    "test/fiddle/test_handle.rb||test/fiddle/test_handle.rb": [
      "File: test/fiddle/test_handle.rb -> test/fiddle/test_handle.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "11:     include Test::Unit::Assertions",
      "13:     def test_to_i",
      "14:       handle = Fiddle::Handle.new(LIBC_SO)",
      "15:       assert_kind_of Integer, handle.to_i",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13:     def test_safe_handle_open",
      "14:       t = Thread.new do",
      "15:         $SAFE = 1",
      "16:         Fiddle::Handle.new(LIBC_SO.taint)",
      "17:       end",
      "18:       assert_raise(SecurityError) { t.value }",
      "19:     end",
      "21:     def test_safe_function_lookup",
      "22:       t = Thread.new do",
      "23:         h = Fiddle::Handle.new(LIBC_SO)",
      "24:         $SAFE = 1",
      "25:         h[\"qsort\".taint]",
      "26:       end",
      "27:       assert_raise(SecurityError) { t.value }",
      "28:     end",
      "",
      "---------------"
    ],
    "version.h||version.h": [
      "File: version.h -> version.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: #define RUBY_VERSION \"2.1.8\"",
      "2: #define RUBY_RELEASE_DATE \"2015-12-16\"",
      "5: #define RUBY_RELEASE_YEAR 2015",
      "6: #define RUBY_RELEASE_MONTH 12",
      "",
      "[Removed Lines]",
      "3: #define RUBY_PATCHLEVEL 438",
      "",
      "[Added Lines]",
      "3: #define RUBY_PATCHLEVEL 439",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "847b7bcfb3db371acb552200913e5302c3759796",
      "candidate_info": {
        "commit_hash": "847b7bcfb3db371acb552200913e5302c3759796",
        "repo": "ruby/ruby",
        "commit_url": "https://github.com/ruby/ruby/commit/847b7bcfb3db371acb552200913e5302c3759796",
        "files": [
          "ChangeLog",
          "marshal.c",
          "test/ruby/test_marshal.rb",
          "version.h"
        ],
        "message": "* marshal.c (r_symreal): register the symbol name first so that   r_symlink always returns valid names. [Bug #10991]\n\ngit-svn-id: svn+ssh://ci.ruby-lang.org/ruby/branches/ruby_2_1@50667 b2dd03c8-39d4-4d8f-98ff-823fe69b080e",
        "before_after_code_files": [
          "marshal.c||marshal.c",
          "test/ruby/test_marshal.rb||test/ruby/test_marshal.rb",
          "version.h||version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.h||version.h"
          ],
          "candidate": [
            "version.h||version.h"
          ]
        }
      },
      "candidate_diff": {
        "marshal.c||marshal.c": [
          "File: marshal.c -> marshal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1272:     int idx = -1;",
          "1273:     st_index_t n = arg->symbols->num_entries;",
          "1276:     if (ivar) {",
          "1277:  long num = r_long(arg);",
          "1278:  while (num-- > 0) {",
          "",
          "[Removed Lines]",
          "1275:     st_insert(arg->symbols, (st_data_t)n, (st_data_t)0);",
          "",
          "[Added Lines]",
          "1275:     if (rb_enc_str_asciionly_p(s)) rb_enc_associate_index(s, ENCINDEX_US_ASCII);",
          "1276:     id = rb_intern_str(s);",
          "1277:     st_insert(arg->symbols, (st_data_t)n, (st_data_t)id);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1282:     }",
          "1283:     if (idx > 0) rb_enc_associate_index(s, idx);",
          "1284:     id = rb_intern_str(s);",
          "1287:     return id;",
          "1288: }",
          "",
          "[Removed Lines]",
          "1285:     st_insert(arg->symbols, (st_data_t)n, (st_data_t)id);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/ruby/test_marshal.rb||test/ruby/test_marshal.rb": [
          "File: test/ruby/test_marshal.rb -> test/ruby/test_marshal.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "246:     assert_equal(ary, Marshal.load(Marshal.dump(ary)), bug2548)",
          "247:   end",
          "249:   ClassUTF8 = eval(\"class R\\u{e9}sum\\u{e9}; self; end\")",
          "251:   iso_8859_1 = Encoding::ISO_8859_1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "249:   def test_symlink_in_ivar",
          "250:     bug10991 = '[ruby-core:68587] [Bug #10991]'",
          "251:     sym = Marshal.load(\"\\x04\\x08\" +",
          "252:                        \"I\" \":\\x0bKernel\" +",
          "253:                        (\"\\x06\" +",
          "254:                         (\"I\" \":\\x07@a\" +",
          "255:                          (\"\\x06\" \":\\x07@b\" \"e;\\x0\"\"o:\\x0bObject\"\"\\x0\")) +",
          "256:                         \"0\"))",
          "257:     assert_equal(:Kernel, sym, bug10991)",
          "258:   end",
          "",
          "---------------"
        ],
        "version.h||version.h": [
          "File: version.h -> version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #define RUBY_VERSION \"2.1.7\"",
          "5: #define RUBY_RELEASE_YEAR 2015",
          "6: #define RUBY_RELEASE_MONTH 5",
          "9: #include \"ruby/version.h\"",
          "",
          "[Removed Lines]",
          "2: #define RUBY_RELEASE_DATE \"2015-05-28\"",
          "3: #define RUBY_PATCHLEVEL 358",
          "7: #define RUBY_RELEASE_DAY 28",
          "",
          "[Added Lines]",
          "2: #define RUBY_RELEASE_DATE \"2015-05-29\"",
          "3: #define RUBY_PATCHLEVEL 359",
          "7: #define RUBY_RELEASE_DAY 29",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e8dc702f5e725fe6b168e1a5702a9443fbf88f4d",
      "candidate_info": {
        "commit_hash": "e8dc702f5e725fe6b168e1a5702a9443fbf88f4d",
        "repo": "ruby/ruby",
        "commit_url": "https://github.com/ruby/ruby/commit/e8dc702f5e725fe6b168e1a5702a9443fbf88f4d",
        "files": [
          "test/rubygems/test_gem_ext_cmake_builder.rb",
          "version.h"
        ],
        "message": "Partially merge revision 49195: [Bug #10717]\n\nSupport cmake 2.6 which is used by RHEL6/ CentOS 6\nhttps://github.com/rubygems/rubygems/pull/1124\n\n\ngit-svn-id: svn+ssh://ci.ruby-lang.org/ruby/branches/ruby_2_1@50668 b2dd03c8-39d4-4d8f-98ff-823fe69b080e",
        "before_after_code_files": [
          "test/rubygems/test_gem_ext_cmake_builder.rb||test/rubygems/test_gem_ext_cmake_builder.rb",
          "version.h||version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.h||version.h"
          ],
          "candidate": [
            "version.h||version.h"
          ]
        }
      },
      "candidate_diff": {
        "test/rubygems/test_gem_ext_cmake_builder.rb||test/rubygems/test_gem_ext_cmake_builder.rb": [
          "File: test/rubygems/test_gem_ext_cmake_builder.rb -> test/rubygems/test_gem_ext_cmake_builder.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:   def test_self_build",
          "21:     File.open File.join(@ext, 'CMakeLists.txt'), 'w' do |cmakelists|",
          "22:       cmakelists.write <<-eo_cmake",
          "24: install (FILES test.txt DESTINATION bin)",
          "25:       eo_cmake",
          "26:     end",
          "",
          "[Removed Lines]",
          "23: cmake_minimum_required(VERSION 2.8)",
          "",
          "[Added Lines]",
          "23: cmake_minimum_required(VERSION 2.6)",
          "",
          "---------------"
        ],
        "version.h||version.h": [
          "File: version.h -> version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #define RUBY_VERSION \"2.1.7\"",
          "2: #define RUBY_RELEASE_DATE \"2015-05-29\"",
          "5: #define RUBY_RELEASE_YEAR 2015",
          "6: #define RUBY_RELEASE_MONTH 5",
          "",
          "[Removed Lines]",
          "3: #define RUBY_PATCHLEVEL 359",
          "",
          "[Added Lines]",
          "3: #define RUBY_PATCHLEVEL 360",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "784005805cd879ef3e51111f778e74741fb0ba0b",
      "candidate_info": {
        "commit_hash": "784005805cd879ef3e51111f778e74741fb0ba0b",
        "repo": "ruby/ruby",
        "commit_url": "https://github.com/ruby/ruby/commit/784005805cd879ef3e51111f778e74741fb0ba0b",
        "files": [
          "ChangeLog",
          "process.c",
          "test/ruby/test_process.rb",
          "version.h"
        ],
        "message": "merge revision(s) 53346,53347,53348,53349,53391,53928: [Backport #11898]\n\n\t* process.c: use rb_w32_uchdir() instead of plain chdir() on Windows.\n\t  reported by naruse via twitter.\n\n\t* process.c (rb_execarg_addopt): need to convert to ospath.\n\n\t* process.c (rb_execarg_parent_start1): need to convert the encoding to\n          ospath's one.\n\n\t* process.c (rb_execarg_addopt): need to convert the encoding to\n          ospath's one.\n\n\ngit-svn-id: svn+ssh://ci.ruby-lang.org/ruby/branches/ruby_2_1@53929 b2dd03c8-39d4-4d8f-98ff-823fe69b080e",
        "before_after_code_files": [
          "process.c||process.c",
          "test/ruby/test_process.rb||test/ruby/test_process.rb",
          "version.h||version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.h||version.h"
          ],
          "candidate": [
            "version.h||version.h"
          ]
        }
      },
      "candidate_diff": {
        "process.c||process.c": [
          "File: process.c -> process.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1753:                 rb_raise(rb_eArgError, \"chdir option specified twice\");",
          "1754:             }",
          "1755:             FilePathValue(val);",
          "1756:             eargp->chdir_given = 1;",
          "1757:             eargp->chdir_dir = hide_obj(EXPORT_DUP(val));",
          "1758:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1756:      val = rb_str_encode_ospath(val);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2793:         VALUE elt = RARRAY_AREF(ary, i);",
          "2794:         int fd = FIX2INT(RARRAY_AREF(elt, 0));",
          "2795:         VALUE param = RARRAY_AREF(elt, 1);",
          "2797:         int flags = NUM2INT(RARRAY_AREF(param, 1));",
          "2798:         int perm = NUM2INT(RARRAY_AREF(param, 2));",
          "2799:         int need_close = 1;",
          "2801:         if (fd2 == -1) {",
          "2802:             ERRMSG(\"open\");",
          "2803:             return -1;",
          "",
          "[Removed Lines]",
          "2796:         char *path = RSTRING_PTR(RARRAY_AREF(param, 0));",
          "",
          "[Added Lines]",
          "2797:  VALUE vpath = RARRAY_AREF(param, 0);",
          "2801:  int fd2;",
          "2802:  FilePathValue(vpath);",
          "2803:  vpath = rb_str_encode_ospath(vpath);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2952: }",
          "2953: #endif",
          "2956: int",
          "2957: rb_execarg_run_options(const struct rb_execarg *eargp, struct rb_execarg *sargp, char *errmsg, size_t errmsg_buflen)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2959: #ifdef _WIN32",
          "2960: #undef chdir",
          "2961: #define chdir(p) rb_w32_uchdir(p)",
          "2962: #endif",
          "",
          "---------------"
        ],
        "test/ruby/test_process.rb||test/ruby/test_process.rb": [
          "File: test/ruby/test_process.rb -> test/ruby/test_process.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "413:     }",
          "414:   end",
          "416:   UMASK = [RUBY, '-e', 'printf \"%04o\\n\", File.umask']",
          "418:   def test_execopts_umask",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "416:   def test_execopts_open_chdir_m17n_path",
          "417:     with_tmpchdir {|d|",
          "418:       Dir.mkdir \"\u30c6\u30b9\u30c8\"",
          "419:       system(*PWD, :chdir => \"\u30c6\u30b9\u30c8\", :out => \"open_chdir_\u30c6\u30b9\u30c8\")",
          "420:       assert_file.exist?(\"open_chdir_\u30c6\u30b9\u30c8\")",
          "421:       assert_file.not_exist?(\"\u30c6\u30b9\u30c8/open_chdir_\u30c6\u30b9\u30c8\")",
          "422:       assert_equal(\"#{d}/\u30c6\u30b9\u30c8\", File.read(\"open_chdir_\u30c6\u30b9\u30c8\").chomp.encode(__ENCODING__))",
          "423:     }",
          "424:   end if windows? || Encoding.find('locale') == Encoding::UTF_8",
          "",
          "---------------"
        ],
        "version.h||version.h": [
          "File: version.h -> version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #define RUBY_VERSION \"2.1.9\"",
          "2: #define RUBY_RELEASE_DATE \"2016-02-25\"",
          "5: #define RUBY_RELEASE_YEAR 2016",
          "6: #define RUBY_RELEASE_MONTH 2",
          "",
          "[Removed Lines]",
          "3: #define RUBY_PATCHLEVEL 449",
          "",
          "[Added Lines]",
          "3: #define RUBY_PATCHLEVEL 450",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "79881c94c2e66b1d3e98c5defb7919ba9e77d187",
      "candidate_info": {
        "commit_hash": "79881c94c2e66b1d3e98c5defb7919ba9e77d187",
        "repo": "ruby/ruby",
        "commit_url": "https://github.com/ruby/ruby/commit/79881c94c2e66b1d3e98c5defb7919ba9e77d187",
        "files": [
          "ChangeLog",
          "iseq.c",
          "test/ruby/test_iseq.rb",
          "version.h"
        ],
        "message": "merge revision(s) 50541,50542: [Backport #11159]\n\n\t* iseq.c (rb_iseq_compile_with_option): check srouce type, must be\n\t  an IO or a String.  [ruby-core:69219] [Bug #11159]\n\n\t* iseq.c (rb_iseq_compile_with_option): check source type, must be\n\n\ngit-svn-id: svn+ssh://ci.ruby-lang.org/ruby/branches/ruby_2_1@50559 b2dd03c8-39d4-4d8f-98ff-823fe69b080e",
        "before_after_code_files": [
          "iseq.c||iseq.c",
          "test/ruby/test_iseq.rb||test/ruby/test_iseq.rb",
          "version.h||version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.h||version.h"
          ],
          "candidate": [
            "version.h||version.h"
          ]
        }
      },
      "candidate_diff": {
        "iseq.c||iseq.c": [
          "File: iseq.c -> iseq.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "610:  if (RB_TYPE_P((src), T_FILE))",
          "611:      node = rb_parser_compile_file_path(parser, file, src, ln);",
          "612:  else {",
          "613:      node = rb_parser_compile_string_path(parser, file, src, ln);",
          "615:      if (!node) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "613:      StringValue(src);",
          "",
          "---------------"
        ],
        "test/ruby/test_iseq.rb||test/ruby/test_iseq.rb": [
          "File: test/ruby/test_iseq.rb -> test/ruby/test_iseq.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:            ISeq.of(c.instance_method(:foobar)).label",
          "125:     assert_same a, b",
          "126:   end",
          "127: end",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128:   def test_invalid_source",
          "129:     bug11159 = '[ruby-core:69219] [Bug #11159]'",
          "130:     assert_raise(TypeError, bug11159) {ISeq.compile(nil)}",
          "131:     assert_raise(TypeError, bug11159) {ISeq.compile(:foo)}",
          "132:     assert_raise(TypeError, bug11159) {ISeq.compile(1)}",
          "133:   end",
          "",
          "---------------"
        ],
        "version.h||version.h": [
          "File: version.h -> version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #define RUBY_VERSION \"2.1.7\"",
          "5: #define RUBY_RELEASE_YEAR 2015",
          "6: #define RUBY_RELEASE_MONTH 5",
          "9: #include \"ruby/version.h\"",
          "",
          "[Removed Lines]",
          "2: #define RUBY_RELEASE_DATE \"2015-05-13\"",
          "3: #define RUBY_PATCHLEVEL 344",
          "7: #define RUBY_RELEASE_DAY 13",
          "",
          "[Added Lines]",
          "2: #define RUBY_RELEASE_DATE \"2015-05-20\"",
          "3: #define RUBY_PATCHLEVEL 345",
          "7: #define RUBY_RELEASE_DAY 20",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "25ce249db6f2ccf6e7feea0619eb5c41ae4e6372",
      "candidate_info": {
        "commit_hash": "25ce249db6f2ccf6e7feea0619eb5c41ae4e6372",
        "repo": "ruby/ruby",
        "commit_url": "https://github.com/ruby/ruby/commit/25ce249db6f2ccf6e7feea0619eb5c41ae4e6372",
        "files": [
          "ChangeLog",
          "enc/iso_8859_1.c",
          "enc/iso_8859_13.c",
          "enc/iso_8859_2.c",
          "enc/iso_8859_4.c",
          "enc/windows_1250.c",
          "enc/windows_1252.c",
          "test/ruby/enc/test_windows_1252.rb",
          "version.h"
        ],
        "message": "merge revision(s) 52883,52884,53046,53198: [Backport #11838]\n\n\t* enc/iso_8859_4.c: Added missing lower/upper-case character\n\t  pair (U+014A and U+014B, LATIN CAPITAL/SMALL LETTER ENG)\n\n\t* enc/iso_8859_13.c: Added three missing lower/upper-case\n\t  character pairs (from Kimihito Matsui)\n\t  (from Kimihito Matsui)\n\n\t* enc/windows_1252.c: separate from ISO-8859-1 to fix 0x80..0x9e\n\t  range.  [ruby-core:64049] [Bug #10097]\n\n\t* enc/iso_8859_2.c, enc/windows_1250.c: separate Windows-1250\n\t  from ISO-8859-2 to fix 0x80..0x9e range (from Kimihito Matsui)\n\n\ngit-svn-id: svn+ssh://ci.ruby-lang.org/ruby/branches/ruby_2_1@54261 b2dd03c8-39d4-4d8f-98ff-823fe69b080e",
        "before_after_code_files": [
          "enc/iso_8859_1.c||enc/iso_8859_1.c",
          "enc/iso_8859_13.c||enc/iso_8859_13.c",
          "enc/iso_8859_2.c||enc/iso_8859_2.c",
          "enc/iso_8859_4.c||enc/iso_8859_4.c",
          "enc/windows_1250.c||enc/windows_1250.c",
          "enc/windows_1252.c||enc/windows_1252.c",
          "test/ruby/enc/test_windows_1252.rb||test/ruby/enc/test_windows_1252.rb",
          "version.h||version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.h||version.h"
          ],
          "candidate": [
            "version.h||version.h"
          ]
        }
      },
      "candidate_diff": {
        "enc/iso_8859_1.c||enc/iso_8859_1.c": [
          "File: enc/iso_8859_1.c -> enc/iso_8859_1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "277:   ONIGENC_FLAG_NONE,",
          "278: };",
          "279: ENC_ALIAS(\"ISO8859-1\", \"ISO-8859-1\")",
          "",
          "[Removed Lines]",
          "288: ENC_REPLICATE(\"Windows-1252\", \"ISO-8859-1\")",
          "289: ENC_ALIAS(\"CP1252\", \"Windows-1252\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "enc/iso_8859_13.c||enc/iso_8859_13.c": [
          "File: enc/iso_8859_13.c -> enc/iso_8859_13.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "158: }",
          "160: static const OnigPairCaseFoldCodes CaseFoldMap[] = {",
          "161:  { 0xc0, 0xe0 },",
          "162:  { 0xc1, 0xe1 },",
          "163:  { 0xc2, 0xe2 },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161:  { 0xa8, 0xb8 },",
          "162:  { 0xaa, 0xba },",
          "163:  { 0xaf, 0xbf },",
          "",
          "---------------"
        ],
        "enc/iso_8859_2.c||enc/iso_8859_2.c": [
          "File: enc/iso_8859_2.c -> enc/iso_8859_2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "242:   ONIGENC_FLAG_NONE,",
          "243: };",
          "244: ENC_ALIAS(\"ISO8859-2\", \"ISO-8859-2\")",
          "",
          "[Removed Lines]",
          "253: ENC_REPLICATE(\"Windows-1250\", \"ISO-8859-2\")",
          "254: ENC_ALIAS(\"CP1250\", \"Windows-1250\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "enc/iso_8859_4.c||enc/iso_8859_4.c": [
          "File: enc/iso_8859_4.c -> enc/iso_8859_4.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "166:  { 0xab, 0xbb },",
          "167:  { 0xac, 0xbc },",
          "168:  { 0xae, 0xbe },",
          "170:  { 0xc0, 0xe0 },",
          "171:  { 0xc1, 0xe1 },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169:  { 0xbd, 0xbf },",
          "",
          "---------------"
        ],
        "enc/windows_1250.c||enc/windows_1250.c": [
          "File: enc/windows_1250.c -> enc/windows_1250.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2:   cp1250.c -  Oniguruma (regular expression library)",
          "31: #include \"regenc.h\"",
          "33: #define ENC_CP1250_TO_LOWER_CASE(c) EncCP1250_ToLowerCaseTable[c]",
          "34: #define ENC_IS_CP1250_CTYPE(code,ctype) \\",
          "35:   ((EncCP1250_CtypeTable[code] & CTYPE_TO_BIT(ctype)) != 0)",
          "37: static const UChar EncCP1250_ToLowerCaseTable[256] = {",
          "38:   '\\000', '\\001', '\\002', '\\003', '\\004', '\\005', '\\006', '\\007',",
          "39:   '\\010', '\\011', '\\012', '\\013', '\\014', '\\015', '\\016', '\\017',",
          "40:   '\\020', '\\021', '\\022', '\\023', '\\024', '\\025', '\\026', '\\027',",
          "41:   '\\030', '\\031', '\\032', '\\033', '\\034', '\\035', '\\036', '\\037',",
          "42:   '\\040', '\\041', '\\042', '\\043', '\\044', '\\045', '\\046', '\\047',",
          "43:   '\\050', '\\051', '\\052', '\\053', '\\054', '\\055', '\\056', '\\057',",
          "44:   '\\060', '\\061', '\\062', '\\063', '\\064', '\\065', '\\066', '\\067',",
          "45:   '\\070', '\\071', '\\072', '\\073', '\\074', '\\075', '\\076', '\\077',",
          "46:   '\\100', '\\141', '\\142', '\\143', '\\144', '\\145', '\\146', '\\147',",
          "47:   '\\150', '\\151', '\\152', '\\153', '\\154', '\\155', '\\156', '\\157',",
          "48:   '\\160', '\\161', '\\162', '\\163', '\\164', '\\165', '\\166', '\\167',",
          "49:   '\\170', '\\171', '\\172', '\\133', '\\134', '\\135', '\\136', '\\137',",
          "50:   '\\140', '\\141', '\\142', '\\143', '\\144', '\\145', '\\146', '\\147',",
          "51:   '\\150', '\\151', '\\152', '\\153', '\\154', '\\155', '\\156', '\\157',",
          "52:   '\\160', '\\161', '\\162', '\\163', '\\164', '\\165', '\\166', '\\167',",
          "53:   '\\170', '\\171', '\\172', '\\173', '\\174', '\\175', '\\176', '\\177',",
          "54:   '\\200', '\\201', '\\202', '\\203', '\\204', '\\205', '\\206', '\\207',",
          "55:   '\\210', '\\211', '\\232', '\\213', '\\234', '\\235', '\\236', '\\237',",
          "56:   '\\220', '\\221', '\\222', '\\223', '\\224', '\\225', '\\226', '\\227',",
          "57:   '\\230', '\\231', '\\232', '\\233', '\\234', '\\235', '\\236', '\\237',",
          "58:   '\\240', '\\241', '\\242', '\\263', '\\244', '\\271', '\\246', '\\247',",
          "59:   '\\250', '\\251', '\\272', '\\253', '\\254', '\\255', '\\256', '\\277',",
          "60:   '\\260', '\\261', '\\262', '\\263', '\\264', '\\265', '\\266', '\\267',",
          "61:   '\\270', '\\271', '\\272', '\\273', '\\276', '\\275', '\\276', '\\277',",
          "62:   '\\340', '\\341', '\\342', '\\343', '\\344', '\\345', '\\346', '\\347',",
          "63:   '\\350', '\\351', '\\352', '\\353', '\\354', '\\355', '\\356', '\\357',",
          "64:   '\\360', '\\361', '\\362', '\\363', '\\364', '\\365', '\\366', '\\367',",
          "65:   '\\370', '\\371', '\\372', '\\373', '\\374', '\\375', '\\376', '\\337',",
          "66:   '\\340', '\\341', '\\342', '\\343', '\\344', '\\345', '\\346', '\\347',",
          "67:   '\\350', '\\351', '\\352', '\\353', '\\354', '\\355', '\\356', '\\357',",
          "68:   '\\360', '\\361', '\\362', '\\363', '\\364', '\\365', '\\366', '\\367',",
          "69:   '\\370', '\\371', '\\372', '\\373', '\\374', '\\375', '\\376', '\\377',",
          "70: };",
          "72: static const unsigned short EncCP1250_CtypeTable[256] = {",
          "73:   0x4008, 0x4008, 0x4008, 0x4008, 0x4008, 0x4008, 0x4008, 0x4008,",
          "74:   0x4008, 0x420c, 0x4209, 0x4208, 0x4208, 0x4208, 0x4008, 0x4008,",
          "75:   0x4008, 0x4008, 0x4008, 0x4008, 0x4008, 0x4008, 0x4008, 0x4008,",
          "76:   0x4008, 0x4008, 0x4008, 0x4008, 0x4008, 0x4008, 0x4008, 0x4008,",
          "77:   0x4284, 0x41a0, 0x41a0, 0x41a0, 0x41a0, 0x41a0, 0x41a0, 0x41a0,",
          "78:   0x41a0, 0x41a0, 0x41a0, 0x41a0, 0x41a0, 0x41a0, 0x41a0, 0x41a0,",
          "79:   0x78b0, 0x78b0, 0x78b0, 0x78b0, 0x78b0, 0x78b0, 0x78b0, 0x78b0,",
          "80:   0x78b0, 0x78b0, 0x41a0, 0x41a0, 0x41a0, 0x41a0, 0x41a0, 0x41a0,",
          "81:   0x41a0, 0x7ca2, 0x7ca2, 0x7ca2, 0x7ca2, 0x7ca2, 0x7ca2, 0x74a2,",
          "82:   0x74a2, 0x74a2, 0x74a2, 0x74a2, 0x74a2, 0x74a2, 0x74a2, 0x74a2,",
          "83:   0x74a2, 0x74a2, 0x74a2, 0x74a2, 0x74a2, 0x74a2, 0x74a2, 0x74a2,",
          "84:   0x74a2, 0x74a2, 0x74a2, 0x41a0, 0x41a0, 0x41a0, 0x41a0, 0x51a0,",
          "85:   0x41a0, 0x78e2, 0x78e2, 0x78e2, 0x78e2, 0x78e2, 0x78e2, 0x70e2,",
          "86:   0x70e2, 0x70e2, 0x70e2, 0x70e2, 0x70e2, 0x70e2, 0x70e2, 0x70e2,",
          "87:   0x70e2, 0x70e2, 0x70e2, 0x70e2, 0x70e2, 0x70e2, 0x70e2, 0x70e2,",
          "88:   0x70e2, 0x70e2, 0x70e2, 0x41a0, 0x41a0, 0x41a0, 0x41a0, 0x4008,",
          "89:   0x00a0, 0x0000, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008,//8",
          "90:   0x0008, 0x0008, 0x34a2, 0x0008, 0x34a2, 0x34a2, 0x34a2, 0x34a2,",
          "91:   0x0000, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008,//9",
          "92:   0x0008, 0x0008, 0x30e2, 0x0008, 0x30e2, 0x30e2, 0x30e2, 0x30e2,",
          "93:   0x0284, 0x01a0, 0x00a0, 0x34a2, 0x00a0, 0x34a2, 0x00a0, 0x00a0,//A",
          "94:   0x00a0, 0x00a0, 0x34a2, 0x01a0, 0x00a0, 0x01a0, 0x00a0, 0x34a2,",
          "95:   0x00a0, 0x00a0, 0x10a0, 0x30e2, 0x00a0, 0x30e2, 0x00a0, 0x01a0,//B",
          "96:   0x00a0, 0x30e2, 0x30e2, 0x01a0, 0x34a2, 0x10a0, 0x30e2, 0x30e2,",
          "97:   0x34a2, 0x34a2, 0x34a2, 0x34a2, 0x34a2, 0x34a2, 0x34a2, 0x34a2,//C",
          "98:   0x34a2, 0x34a2, 0x34a2, 0x34a2, 0x34a2, 0x34a2, 0x34a2, 0x34a2,",
          "99:   0x34a2, 0x34a2, 0x34a2, 0x34a2, 0x34a2, 0x34a2, 0x34a2, 0x00a0,//D",
          "100:   0x34a2, 0x34a2, 0x34a2, 0x34a2, 0x34a2, 0x34a2, 0x34a2, 0x30e2,",
          "101:   0x30e2, 0x30e2, 0x30e2, 0x30e2, 0x30e2, 0x30e2, 0x30e2, 0x30e2,//E",
          "102:   0x30e2, 0x30e2, 0x30e2, 0x30e2, 0x30e2, 0x30e2, 0x30e2, 0x30e2,",
          "103:   0x30e2, 0x30e2, 0x30e2, 0x30e2, 0x30e2, 0x30e2, 0x30e2, 0x00a0,//F",
          "104:   0x30e2, 0x30e2, 0x30e2, 0x30e2, 0x30e2, 0x30e2, 0x30e2, 0x30e2,",
          "105: };",
          "107: static int",
          "108: cp1250_mbc_case_fold(OnigCaseFoldType flag ARG_UNUSED,",
          "109:              const UChar** pp, const UChar* end ARG_UNUSED, UChar* lower, OnigEncoding enc ARG_UNUSED)",
          "110: {",
          "111:   const UChar* p = *pp;",
          "114:   (*pp)++;",
          "115:   return 1;",
          "116: }",
          "118: static int",
          "119: cp1250_is_code_ctype(OnigCodePoint code, unsigned int ctype, OnigEncoding enc ARG_UNUSED)",
          "120: {",
          "121:   if (code < 256)",
          "122:     return ENC_IS_CP1250_CTYPE(code, ctype);",
          "123:   else",
          "124:     return FALSE;",
          "125: }",
          "127: static const OnigPairCaseFoldCodes CaseFoldMap[] = {",
          "128:   { 0x8a, 0x9a },",
          "129:   { 0x8c, 0x9c },",
          "130:   { 0x8d, 0x9d },",
          "131:   { 0x8e, 0x9e },",
          "132:   { 0x8f, 0x9f },",
          "134:   { 0xa3, 0xb3 },",
          "135:   { 0xa5, 0xb9 },",
          "136:   { 0xaa, 0xba },",
          "137:   { 0xaf, 0xbf },",
          "139:   { 0xbc, 0xbe },",
          "141:   { 0xc0, 0xe0 },",
          "142:   { 0xc1, 0xe1 },",
          "143:   { 0xc2, 0xe2 },",
          "144:   { 0xc3, 0xe3 },",
          "145:   { 0xc4, 0xe4 },",
          "146:   { 0xc5, 0xe5 },",
          "147:   { 0xc6, 0xe6 },",
          "148:   { 0xc7, 0xe7 },",
          "149:   { 0xc8, 0xe8 },",
          "150:   { 0xc9, 0xe9 },",
          "151:   { 0xca, 0xea },",
          "152:   { 0xcb, 0xeb },",
          "153:   { 0xcc, 0xec },",
          "154:   { 0xcd, 0xed },",
          "155:   { 0xce, 0xee },",
          "156:   { 0xcf, 0xef },",
          "158:   { 0xd0, 0xf0 },",
          "159:   { 0xd1, 0xf1 },",
          "160:   { 0xd2, 0xf2 },",
          "161:   { 0xd3, 0xf3 },",
          "162:   { 0xd4, 0xf4 },",
          "163:   { 0xd5, 0xf5 },",
          "164:   { 0xd6, 0xf6 },",
          "165:   { 0xd8, 0xf8 },",
          "166:   { 0xd9, 0xf9 },",
          "167:   { 0xda, 0xfa },",
          "168:   { 0xdb, 0xfb },",
          "169:   { 0xdc, 0xfc },",
          "170:   { 0xdd, 0xfd },",
          "171:   { 0xde, 0xfe },",
          "172: };",
          "174: static int",
          "175: cp1250_apply_all_case_fold(OnigCaseFoldType flag,",
          "176:           OnigApplyAllCaseFoldFunc f, void* arg, OnigEncoding enc ARG_UNUSED)",
          "177: {",
          "178:   return onigenc_apply_all_case_fold_with_map(",
          "179:              sizeof(CaseFoldMap)/sizeof(OnigPairCaseFoldCodes), CaseFoldMap, 1,",
          "180:              flag, f, arg);",
          "181: }",
          "183: static int",
          "184: cp1250_get_case_fold_codes_by_str(OnigCaseFoldType flag,",
          "185:     const OnigUChar* p, const OnigUChar* end, OnigCaseFoldCodeItem items[], OnigEncoding enc ARG_UNUSED)",
          "186: {",
          "187:   return onigenc_get_case_fold_codes_by_str_with_map(",
          "188:       sizeof(CaseFoldMap)/sizeof(OnigPairCaseFoldCodes), CaseFoldMap, 1,",
          "189:       flag, p, end, items);",
          "190: }",
          "192: OnigEncodingDefine(windows_1250, Windows_1250) = {",
          "193:   onigenc_single_byte_mbc_enc_len,",
          "197:   onigenc_is_mbc_newline_0x0a,",
          "198:   onigenc_single_byte_mbc_to_code,",
          "199:   onigenc_single_byte_code_to_mbclen,",
          "200:   onigenc_single_byte_code_to_mbc,",
          "201:   cp1250_mbc_case_fold,",
          "202:   cp1250_apply_all_case_fold,",
          "203:   cp1250_get_case_fold_codes_by_str,",
          "204:   onigenc_minimum_property_name_to_ctype,",
          "205:   cp1250_is_code_ctype,",
          "206:   onigenc_not_support_get_ctype_code_range,",
          "207:   onigenc_single_byte_left_adjust_char_head,",
          "208:   onigenc_always_true_is_allowed_reverse_match,",
          "209:   0,",
          "210:   ONIGENC_FLAG_NONE,",
          "211: };",
          "219: ENC_ALIAS(\"CP1250\", \"Windows-1250\")",
          "",
          "---------------"
        ],
        "enc/windows_1252.c||enc/windows_1252.c": [
          "File: enc/windows_1252.c -> enc/windows_1252.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2:   cp1252.c -  Oniguruma (regular expression library)",
          "31: #include \"regenc.h\"",
          "33: #define ENC_CP1252_TO_LOWER_CASE(c) EncCP1252_ToLowerCaseTable[c]",
          "34: #define ENC_IS_CP1252_CTYPE(code,ctype) \\",
          "35:   ((EncCP1252_CtypeTable[code] & CTYPE_TO_BIT(ctype)) != 0)",
          "37: static const UChar EncCP1252_ToLowerCaseTable[256] = {",
          "38:   '\\000', '\\001', '\\002', '\\003', '\\004', '\\005', '\\006', '\\007',",
          "39:   '\\010', '\\011', '\\012', '\\013', '\\014', '\\015', '\\016', '\\017',",
          "40:   '\\020', '\\021', '\\022', '\\023', '\\024', '\\025', '\\026', '\\027',",
          "41:   '\\030', '\\031', '\\032', '\\033', '\\034', '\\035', '\\036', '\\037',",
          "42:   '\\040', '\\041', '\\042', '\\043', '\\044', '\\045', '\\046', '\\047',",
          "43:   '\\050', '\\051', '\\052', '\\053', '\\054', '\\055', '\\056', '\\057',",
          "44:   '\\060', '\\061', '\\062', '\\063', '\\064', '\\065', '\\066', '\\067',",
          "45:   '\\070', '\\071', '\\072', '\\073', '\\074', '\\075', '\\076', '\\077',",
          "46:   '\\100', '\\141', '\\142', '\\143', '\\144', '\\145', '\\146', '\\147',",
          "47:   '\\150', '\\151', '\\152', '\\153', '\\154', '\\155', '\\156', '\\157',",
          "48:   '\\160', '\\161', '\\162', '\\163', '\\164', '\\165', '\\166', '\\167',",
          "49:   '\\170', '\\171', '\\172', '\\133', '\\134', '\\135', '\\136', '\\137',",
          "50:   '\\140', '\\141', '\\142', '\\143', '\\144', '\\145', '\\146', '\\147',",
          "51:   '\\150', '\\151', '\\152', '\\153', '\\154', '\\155', '\\156', '\\157',",
          "52:   '\\160', '\\161', '\\162', '\\163', '\\164', '\\165', '\\166', '\\167',",
          "53:   '\\170', '\\171', '\\172', '\\173', '\\174', '\\175', '\\176', '\\177',",
          "54:   '\\200', '\\201', '\\202', '\\203', '\\204', '\\205', '\\206', '\\207',",
          "55:   '\\210', '\\211', '\\232', '\\213', '\\234', '\\215', '\\236', '\\217',",
          "56:   '\\220', '\\221', '\\222', '\\223', '\\224', '\\225', '\\226', '\\227',",
          "57:   '\\230', '\\231', '\\232', '\\233', '\\234', '\\235', '\\236', '\\377',",
          "58:   '\\240', '\\241', '\\242', '\\243', '\\244', '\\245', '\\246', '\\247',",
          "59:   '\\250', '\\251', '\\252', '\\253', '\\254', '\\255', '\\256', '\\277',",
          "60:   '\\260', '\\261', '\\262', '\\263', '\\264', '\\265', '\\266', '\\267',",
          "61:   '\\270', '\\271', '\\272', '\\273', '\\274', '\\275', '\\276', '\\277',",
          "62:   '\\340', '\\341', '\\342', '\\343', '\\344', '\\345', '\\346', '\\347',",
          "63:   '\\350', '\\351', '\\352', '\\353', '\\354', '\\355', '\\356', '\\357',",
          "64:   '\\360', '\\361', '\\362', '\\363', '\\364', '\\365', '\\366', '\\367',",
          "65:   '\\370', '\\371', '\\372', '\\373', '\\374', '\\375', '\\376', '\\337',",
          "66:   '\\340', '\\341', '\\342', '\\343', '\\344', '\\345', '\\346', '\\347',",
          "67:   '\\350', '\\351', '\\352', '\\353', '\\354', '\\355', '\\356', '\\357',",
          "68:   '\\360', '\\361', '\\362', '\\363', '\\364', '\\365', '\\366', '\\367',",
          "69:   '\\370', '\\371', '\\372', '\\373', '\\374', '\\375', '\\376', '\\377',",
          "70: };",
          "72: static const unsigned short EncCP1252_CtypeTable[256] = {",
          "73:   0x4008, 0x4008, 0x4008, 0x4008, 0x4008, 0x4008, 0x4008, 0x4008,",
          "74:   0x4008, 0x420c, 0x4209, 0x4208, 0x4208, 0x4208, 0x4008, 0x4008,",
          "75:   0x4008, 0x4008, 0x4008, 0x4008, 0x4008, 0x4008, 0x4008, 0x4008,",
          "76:   0x4008, 0x4008, 0x4008, 0x4008, 0x4008, 0x4008, 0x4008, 0x4008,",
          "77:   0x4284, 0x41a0, 0x41a0, 0x41a0, 0x41a0, 0x41a0, 0x41a0, 0x41a0,",
          "78:   0x41a0, 0x41a0, 0x41a0, 0x41a0, 0x41a0, 0x41a0, 0x41a0, 0x41a0,",
          "79:   0x78b0, 0x78b0, 0x78b0, 0x78b0, 0x78b0, 0x78b0, 0x78b0, 0x78b0,",
          "80:   0x78b0, 0x78b0, 0x41a0, 0x41a0, 0x41a0, 0x41a0, 0x41a0, 0x41a0,",
          "81:   0x41a0, 0x7ca2, 0x7ca2, 0x7ca2, 0x7ca2, 0x7ca2, 0x7ca2, 0x74a2,",
          "82:   0x74a2, 0x74a2, 0x74a2, 0x74a2, 0x74a2, 0x74a2, 0x74a2, 0x74a2,",
          "83:   0x74a2, 0x74a2, 0x74a2, 0x74a2, 0x74a2, 0x74a2, 0x74a2, 0x74a2,",
          "84:   0x74a2, 0x74a2, 0x74a2, 0x41a0, 0x41a0, 0x41a0, 0x41a0, 0x51a0,",
          "85:   0x41a0, 0x78e2, 0x78e2, 0x78e2, 0x78e2, 0x78e2, 0x78e2, 0x70e2,",
          "86:   0x70e2, 0x70e2, 0x70e2, 0x70e2, 0x70e2, 0x70e2, 0x70e2, 0x70e2,",
          "87:   0x70e2, 0x70e2, 0x70e2, 0x70e2, 0x70e2, 0x70e2, 0x70e2, 0x70e2,",
          "88:   0x70e2, 0x70e2, 0x70e2, 0x41a0, 0x41a0, 0x41a0, 0x41a0, 0x4008,",
          "89:   0x00a0, 0x0000, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008,",
          "90:   0x0008, 0x0008, 0x34a2, 0x0008, 0x34a2, 0x0000, 0x34a2, 0x0000,",
          "91:   0x0000, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008,",
          "92:   0x0008, 0x0008, 0x30e2, 0x0008, 0x30e2, 0x0000, 0x30e2, 0x34a2,",
          "93:   0x0284, 0x01a0, 0x00a0, 0x00a0, 0x00a0, 0x00a0, 0x00a0, 0x00a0,",
          "94:   0x00a0, 0x00a0, 0x30e2, 0x01a0, 0x00a0, 0x01a0, 0x00a0, 0x00a0,",
          "95:   0x00a0, 0x00a0, 0x10a0, 0x10a0, 0x00a0, 0x30e2, 0x00a0, 0x01a0,",
          "96:   0x00a0, 0x10a0, 0x30e2, 0x01a0, 0x10a0, 0x10a0, 0x10a0, 0x01a0,",
          "97:   0x34a2, 0x34a2, 0x34a2, 0x34a2, 0x34a2, 0x34a2, 0x34a2, 0x34a2,",
          "98:   0x34a2, 0x34a2, 0x34a2, 0x34a2, 0x34a2, 0x34a2, 0x34a2, 0x34a2,",
          "99:   0x34a2, 0x34a2, 0x34a2, 0x34a2, 0x34a2, 0x34a2, 0x34a2, 0x00a0,",
          "100:   0x34a2, 0x34a2, 0x34a2, 0x34a2, 0x34a2, 0x34a2, 0x34a2, 0x30e2,",
          "101:   0x30e2, 0x30e2, 0x30e2, 0x30e2, 0x30e2, 0x30e2, 0x30e2, 0x30e2,",
          "102:   0x30e2, 0x30e2, 0x30e2, 0x30e2, 0x30e2, 0x30e2, 0x30e2, 0x30e2,",
          "103:   0x30e2, 0x30e2, 0x30e2, 0x30e2, 0x30e2, 0x30e2, 0x30e2, 0x00a0,",
          "104:   0x30e2, 0x30e2, 0x30e2, 0x30e2, 0x30e2, 0x30e2, 0x30e2, 0x30e2,",
          "105: };",
          "107: static int",
          "108: cp1252_mbc_case_fold(OnigCaseFoldType flag ARG_UNUSED,",
          "109:              const UChar** pp, const UChar* end ARG_UNUSED, UChar* lower, OnigEncoding enc ARG_UNUSED)",
          "110: {",
          "111:   const UChar* p = *pp;",
          "114:   (*pp)++;",
          "115:   return 1;",
          "116: }",
          "118: static int",
          "119: cp1252_is_code_ctype(OnigCodePoint code, unsigned int ctype, OnigEncoding enc ARG_UNUSED)",
          "120: {",
          "121:   if (code < 256)",
          "122:     return ENC_IS_CP1252_CTYPE(code, ctype);",
          "123:   else",
          "124:     return FALSE;",
          "125: }",
          "127: static const OnigPairCaseFoldCodes CaseFoldMap[] = {",
          "128:   { 0x8a, 0x9a },",
          "129:   { 0x8c, 0x9c },",
          "130:   { 0x8e, 0x9e },",
          "131:   { 0x9f, 0xff },",
          "133:   { 0xc0, 0xe0 },",
          "134:   { 0xc1, 0xe1 },",
          "135:   { 0xc2, 0xe2 },",
          "136:   { 0xc3, 0xe3 },",
          "137:   { 0xc4, 0xe4 },",
          "138:   { 0xc5, 0xe5 },",
          "139:   { 0xc6, 0xe6 },",
          "140:   { 0xc7, 0xe7 },",
          "141:   { 0xc8, 0xe8 },",
          "142:   { 0xc9, 0xe9 },",
          "143:   { 0xca, 0xea },",
          "144:   { 0xcb, 0xeb },",
          "145:   { 0xcc, 0xec },",
          "146:   { 0xcd, 0xed },",
          "147:   { 0xce, 0xee },",
          "148:   { 0xcf, 0xef },",
          "150:   { 0xd0, 0xf0 },",
          "151:   { 0xd1, 0xf1 },",
          "152:   { 0xd2, 0xf2 },",
          "153:   { 0xd3, 0xf3 },",
          "154:   { 0xd4, 0xf4 },",
          "155:   { 0xd5, 0xf5 },",
          "156:   { 0xd6, 0xf6 },",
          "157:   { 0xd8, 0xf8 },",
          "158:   { 0xd9, 0xf9 },",
          "159:   { 0xda, 0xfa },",
          "160:   { 0xdb, 0xfb },",
          "161:   { 0xdc, 0xfc },",
          "162:   { 0xdd, 0xfd },",
          "163:   { 0xde, 0xfe },",
          "164: };",
          "166: static int",
          "167: cp1252_apply_all_case_fold(OnigCaseFoldType flag,",
          "168:           OnigApplyAllCaseFoldFunc f, void* arg, OnigEncoding enc ARG_UNUSED)",
          "169: {",
          "170:   return onigenc_apply_all_case_fold_with_map(",
          "171:              sizeof(CaseFoldMap)/sizeof(OnigPairCaseFoldCodes), CaseFoldMap, 1,",
          "172:              flag, f, arg);",
          "173: }",
          "175: static int",
          "176: cp1252_get_case_fold_codes_by_str(OnigCaseFoldType flag,",
          "177:     const OnigUChar* p, const OnigUChar* end, OnigCaseFoldCodeItem items[], OnigEncoding enc ARG_UNUSED)",
          "178: {",
          "179:   return onigenc_get_case_fold_codes_by_str_with_map(",
          "180:       sizeof(CaseFoldMap)/sizeof(OnigPairCaseFoldCodes), CaseFoldMap, 1,",
          "181:       flag, p, end, items);",
          "182: }",
          "184: OnigEncodingDefine(windows_1252, Windows_1252) = {",
          "185:   onigenc_single_byte_mbc_enc_len,",
          "189:   onigenc_is_mbc_newline_0x0a,",
          "190:   onigenc_single_byte_mbc_to_code,",
          "191:   onigenc_single_byte_code_to_mbclen,",
          "192:   onigenc_single_byte_code_to_mbc,",
          "193:   cp1252_mbc_case_fold,",
          "194:   cp1252_apply_all_case_fold,",
          "195:   cp1252_get_case_fold_codes_by_str,",
          "196:   onigenc_minimum_property_name_to_ctype,",
          "197:   cp1252_is_code_ctype,",
          "198:   onigenc_not_support_get_ctype_code_range,",
          "199:   onigenc_single_byte_left_adjust_char_head,",
          "200:   onigenc_always_true_is_allowed_reverse_match,",
          "201:   0,",
          "202:   ONIGENC_FLAG_NONE,",
          "203: };",
          "211: ENC_ALIAS(\"CP1252\", \"Windows-1252\")",
          "",
          "---------------"
        ],
        "test/ruby/enc/test_windows_1252.rb||test/ruby/enc/test_windows_1252.rb": [
          "File: test/ruby/enc/test_windows_1252.rb -> test/ruby/enc/test_windows_1252.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # encoding:windows-1252",
          "3: require \"test/unit\"",
          "5: class TestWindows1252 < Test::Unit::TestCase",
          "6:   def test_stset",
          "7:     assert_match(/^(\\xdf)\\1$/i, \"\\xdf\\xdf\")",
          "8:     assert_match(/^(\\xdf)\\1$/i, \"ssss\")",
          "9:     # assert_match(/^(\\xdf)\\1$/i, \"\\xdfss\") # this must be bug...",
          "10:     assert_match(/^[\\xdfz]+$/i, \"sszzsszz\")",
          "11:     assert_match(/^SS$/i, \"\\xdf\")",
          "12:     assert_match(/^Ss$/i, \"\\xdf\")",
          "13:   end",
          "15:   def test_windows_1252",
          "16:     [0x8a, 0x8c, 0x8e, *0xc0..0xd6, *0xd8..0xde, 0x9f].zip([0x9a, 0x9c, 0x9e, *0xe0..0xf6, *0xf8..0xfe, 0xff]).each do |c1, c2|",
          "17:       c1 = c1.chr(\"windows-1252\")",
          "18:       c2 = c2.chr(\"windows-1252\")",
          "19:       assert_match(/^(#{ c1 })\\1$/i, c2 + c1)",
          "20:       assert_match(/^(#{ c2 })\\1$/i, c1 + c2)",
          "21:       assert_match(/^[#{ c1 }]+$/i, c2 + c1)",
          "22:       assert_match(/^[#{ c2 }]+$/i, c1 + c2)",
          "23:     end",
          "24:   end",
          "25: end",
          "",
          "---------------"
        ],
        "version.h||version.h": [
          "File: version.h -> version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #define RUBY_VERSION \"2.1.9\"",
          "2: #define RUBY_RELEASE_DATE \"2016-03-25\"",
          "5: #define RUBY_RELEASE_YEAR 2016",
          "6: #define RUBY_RELEASE_MONTH 3",
          "",
          "[Removed Lines]",
          "3: #define RUBY_PATCHLEVEL 458",
          "",
          "[Added Lines]",
          "3: #define RUBY_PATCHLEVEL 459",
          "",
          "---------------"
        ]
      }
    }
  ]
}