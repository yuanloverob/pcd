{
  "cve_id": "CVE-2020-13974",
  "cve_desc": "An issue was discovered in the Linux kernel 4.4 through 5.7.1. drivers/tty/vt/keyboard.c has an integer overflow if k_ascii is called several times in a row, aka CID-b86dab054059. NOTE: Members in the community argue that the integer overflow does not lead to a security issue in this case.",
  "repo": "torvalds/linux",
  "patch_hash": "b86dab054059b970111b5516ae548efaae5b3aae",
  "patch_info": {
    "commit_hash": "b86dab054059b970111b5516ae548efaae5b3aae",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/b86dab054059b970111b5516ae548efaae5b3aae",
    "files": [
      "drivers/tty/vt/keyboard.c"
    ],
    "message": "vt: keyboard: avoid signed integer overflow in k_ascii\n\nWhen k_ascii is invoked several times in a row there is a potential for\nsigned integer overflow:\n\nUBSAN: Undefined behaviour in drivers/tty/vt/keyboard.c:888:19 signed integer overflow:\n10 * 1111111111 cannot be represented in type 'int'\nCPU: 0 PID: 0 Comm: swapper/0 Not tainted 5.6.11 #1\nHardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011\nCall Trace:\n <IRQ>\n __dump_stack lib/dump_stack.c:77 [inline]\n dump_stack+0xce/0x128 lib/dump_stack.c:118\n ubsan_epilogue+0xe/0x30 lib/ubsan.c:154\n handle_overflow+0xdc/0xf0 lib/ubsan.c:184\n __ubsan_handle_mul_overflow+0x2a/0x40 lib/ubsan.c:205\n k_ascii+0xbf/0xd0 drivers/tty/vt/keyboard.c:888\n kbd_keycode drivers/tty/vt/keyboard.c:1477 [inline]\n kbd_event+0x888/0x3be0 drivers/tty/vt/keyboard.c:1495\n\nWhile it can be worked around by using check_mul_overflow()/\ncheck_add_overflow(), it is better to introduce a separate flag to\nsignal that number pad is being used to compose a symbol, and\nchange type of the accumulator from signed to unsigned, thus\navoiding undefined behavior when it overflows.\n\nReported-by: Kyungtae Kim <kt0755@gmail.com>\nSigned-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>\nCc: stable <stable@vger.kernel.org>\nLink: https://lore.kernel.org/r/20200525232740.GA262061@dtor-ws\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
    "before_after_code_files": [
      "drivers/tty/vt/keyboard.c||drivers/tty/vt/keyboard.c"
    ]
  },
  "patch_diff": {
    "drivers/tty/vt/keyboard.c||drivers/tty/vt/keyboard.c": [
      "File: drivers/tty/vt/keyboard.c -> drivers/tty/vt/keyboard.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "129: static bool dead_key_next;",
      "131: static unsigned int diacr;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "132: static bool npadch_active;",
      "133: static unsigned int npadch_value;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "845:   shift_state &= ~(1 << value);",
      "849:   if (kbd->kbdmode == VC_UNICODE)",
      "851:   else",
      "854:  }",
      "855: }",
      "",
      "[Removed Lines]",
      "848:  if (up_flag && shift_state != old_state && npadch != -1) {",
      "850:    to_utf8(vc, npadch);",
      "852:    put_queue(vc, npadch & 0xff);",
      "853:   npadch = -1;",
      "",
      "[Added Lines]",
      "852:  if (up_flag && shift_state != old_state && npadch_active) {",
      "854:    to_utf8(vc, npadch_value);",
      "856:    put_queue(vc, npadch_value & 0xff);",
      "857:   npadch_active = false;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "869: static void k_ascii(struct vc_data *vc, unsigned char value, char up_flag)",
      "870: {",
      "873:  if (up_flag)",
      "874:   return;",
      "",
      "[Removed Lines]",
      "871:  int base;",
      "",
      "[Added Lines]",
      "875:  unsigned int base;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "882:   base = 16;",
      "883:  }",
      "889: }",
      "891: static void k_lock(struct vc_data *vc, unsigned char value, char up_flag)",
      "",
      "[Removed Lines]",
      "885:  if (npadch == -1)",
      "886:   npadch = value;",
      "887:  else",
      "888:   npadch = npadch * base + value;",
      "",
      "[Added Lines]",
      "889:  if (!npadch_active) {",
      "890:   npadch_value = 0;",
      "891:   npadch_active = true;",
      "892:  }",
      "894:  npadch_value = npadch_value * base + value;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "06ec313eea4f7dcda209b7136618b802c5b30ef8",
      "candidate_info": {
        "commit_hash": "06ec313eea4f7dcda209b7136618b802c5b30ef8",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/06ec313eea4f7dcda209b7136618b802c5b30ef8",
        "files": [
          "drivers/net/vxlan.c"
        ],
        "message": "vxlan: Do not assume RTNL is held in vxlan_fdb_info()\n\nvxlan_fdb_info() is not always called with RTNL held or from an RCU\nread-side critical section. For example, in the following call path:\n\nvxlan_cleanup()\n  vxlan_fdb_destroy()\n    vxlan_fdb_notify()\n      __vxlan_fdb_notify()\n        vxlan_fdb_info()\n\nThe use of rtnl_dereference() can therefore result in the following\nsplat [1].\n\nFix this by dereferencing the nexthop under RCU read-side critical\nsection.\n\n[1]\n[May24 22:56] =============================\n[  +0.004676] WARNING: suspicious RCU usage\n[  +0.004614] 5.7.0-rc5-custom-16219-g201392003491 #2772 Not tainted\n[  +0.007116] -----------------------------\n[  +0.004657] drivers/net/vxlan.c:276 suspicious rcu_dereference_check() usage!\n[  +0.008164]\n              other info that might help us debug this:\n\n[  +0.009126]\n              rcu_scheduler_active = 2, debug_locks = 1\n[  +0.007504] 5 locks held by bash/6892:\n[  +0.004392]  #0: ffff8881d47e3410 (&sig->cred_guard_mutex){+.+.}-{3:3}, at: __do_execve_file.isra.27+0x392/0x23c0\n[  +0.011795]  #1: ffff8881d47e34b0 (&sig->exec_update_mutex){+.+.}-{3:3}, at: flush_old_exec+0x510/0x2030\n[  +0.010947]  #2: ffff8881a141b0b0 (ptlock_ptr(page)#2){+.+.}-{2:2}, at: unmap_page_range+0x9c0/0x2590\n[  +0.010585]  #3: ffff888230009d50 ((&vxlan->age_timer)){+.-.}-{0:0}, at: call_timer_fn+0xe8/0x800\n[  +0.010192]  #4: ffff888183729bc8 (&vxlan->hash_lock[h]){+.-.}-{2:2}, at: vxlan_cleanup+0x133/0x4a0\n[  +0.010382]\n              stack backtrace:\n[  +0.005103] CPU: 1 PID: 6892 Comm: bash Not tainted 5.7.0-rc5-custom-16219-g201392003491 #2772\n[  +0.009675] Hardware name: Mellanox Technologies Ltd. MSN2100-CB2FO/SA001017, BIOS 5.6.5 06/07/2016\n[  +0.010155] Call Trace:\n[  +0.002775]  <IRQ>\n[  +0.002313]  dump_stack+0xfd/0x178\n[  +0.003895]  lockdep_rcu_suspicious+0x14a/0x153\n[  +0.005157]  vxlan_fdb_info+0xe39/0x12a0\n[  +0.004775]  __vxlan_fdb_notify+0xb8/0x160\n[  +0.004672]  vxlan_fdb_notify+0x8e/0xe0\n[  +0.004370]  vxlan_fdb_destroy+0x117/0x330\n[  +0.004662]  vxlan_cleanup+0x1aa/0x4a0\n[  +0.004329]  call_timer_fn+0x1c4/0x800\n[  +0.004357]  run_timer_softirq+0x129d/0x17e0\n[  +0.004762]  __do_softirq+0x24c/0xaef\n[  +0.004232]  irq_exit+0x167/0x190\n[  +0.003767]  smp_apic_timer_interrupt+0x1dd/0x6a0\n[  +0.005340]  apic_timer_interrupt+0xf/0x20\n[  +0.004620]  </IRQ>\n\nFixes: 1274e1cc4226 (\"vxlan: ecmp support for mac fdb entries\")\nSigned-off-by: Ido Schimmel <idosch@mellanox.com>\nReported-by: Amit Cohen <amitc@mellanox.com>\nAcked-by: Roopa Prabhu <roopa@cumulusnetworks.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "drivers/net/vxlan.c||drivers/net/vxlan.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/net/vxlan.c||drivers/net/vxlan.c": [
          "File: drivers/net/vxlan.c -> drivers/net/vxlan.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "263:  struct nlmsghdr *nlh;",
          "264:  struct nexthop *nh;",
          "265:  struct ndmsg *ndm;",
          "267:  nlh = nlmsg_put(skb, portid, seq, type, sizeof(*ndm), flags);",
          "268:  if (nlh == NULL)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "266:  int nh_family;",
          "267:  u32 nh_id;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "274:  send_eth = send_ip = true;",
          "277:  if (type == RTM_GETNEIGH) {",
          "278:   if (rdst) {",
          "279:    send_ip = !vxlan_addr_any(&rdst->remote_ip);",
          "280:    ndm->ndm_family = send_ip ? rdst->remote_ip.sa.sa_family : AF_INET;",
          "281:   } else if (nh) {",
          "283:   }",
          "284:   send_eth = !is_zero_ether_addr(fdb->eth_addr);",
          "285:  } else",
          "",
          "[Removed Lines]",
          "276:  nh = rcu_dereference_rtnl(fdb->nh);",
          "282:    ndm->ndm_family = nexthop_get_family(nh);",
          "",
          "[Added Lines]",
          "278:  rcu_read_lock();",
          "279:  nh = rcu_dereference(fdb->nh);",
          "280:  if (nh) {",
          "281:   nh_family = nexthop_get_family(nh);",
          "282:   nh_id = nh->id;",
          "283:  }",
          "284:  rcu_read_unlock();",
          "291:    ndm->ndm_family = nh_family;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "299:  if (send_eth && nla_put(skb, NDA_LLADDR, ETH_ALEN, &fdb->eth_addr))",
          "300:   goto nla_put_failure;",
          "301:  if (nh) {",
          "303:    goto nla_put_failure;",
          "304:  } else if (rdst) {",
          "305:   if (send_ip && vxlan_nla_put_addr(skb, NDA_DST,",
          "",
          "[Removed Lines]",
          "302:   if (nla_put_u32(skb, NDA_NH_ID, nh->id))",
          "",
          "[Added Lines]",
          "311:   if (nla_put_u32(skb, NDA_NH_ID, nh_id))",
          "",
          "---------------"
        ]
      }
    }
  ]
}