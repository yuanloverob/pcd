{
  "cve_id": "CVE-2013-1833",
  "cve_desc": "Multiple cross-site scripting (XSS) vulnerabilities in the File Picker module in Moodle 2.x through 2.1.10, 2.2.x before 2.2.8, 2.3.x before 2.3.5, and 2.4.x before 2.4.2 allow remote authenticated users to inject arbitrary web script or HTML via a crafted filename.",
  "repo": "moodle/moodle",
  "patch_hash": "954b35451112c333c0ae77dff25dafbf41587c26",
  "patch_info": {
    "commit_hash": "954b35451112c333c0ae77dff25dafbf41587c26",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/954b35451112c333c0ae77dff25dafbf41587c26",
    "files": [
      "lib/form/filemanager.js",
      "lib/outputrequirementslib.php",
      "repository/filepicker.js",
      "repository/filepicker.php"
    ],
    "message": "MDL-37507 repositories: improved formatting of external resources",
    "before_after_code_files": [
      "lib/form/filemanager.js||lib/form/filemanager.js",
      "lib/outputrequirementslib.php||lib/outputrequirementslib.php",
      "repository/filepicker.js||repository/filepicker.js",
      "repository/filepicker.php||repository/filepicker.php"
    ]
  },
  "patch_diff": {
    "lib/form/filemanager.js||lib/form/filemanager.js": [
      "File: lib/form/filemanager.js -> lib/form/filemanager.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "255:             this.msg_dlg.set('headerContent', header);",
      "256:             this.msg_dlg_node.removeClass('fp-msg-info').removeClass('fp-msg-error').addClass('fp-msg-'+type)",
      "258:             this.msg_dlg.show();",
      "259:         },",
      "260:         is_disabled: function() {",
      "",
      "[Removed Lines]",
      "257:             this.msg_dlg_node.one('.fp-msg-text').setContent(msg);",
      "",
      "[Added Lines]",
      "257:             this.msg_dlg_node.one('.fp-msg-text').setContent(Y.Escape.html(msg));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "325:                     }",
      "326:                     this.mkdir_dialog.show();",
      "327:                     Y.one('#fm-newname-'+scope.client_id).focus();",
      "329:                 }, this);",
      "330:             } else {",
      "331:                 this.filemanager.addClass('fm-nomkdir');",
      "",
      "[Removed Lines]",
      "328:                     Y.all('#fm-curpath-'+scope.client_id).setContent(this.currentpath)",
      "",
      "[Added Lines]",
      "328:                     Y.all('#fm-curpath-'+scope.client_id).setContent(Y.Escape.html(this.currentpath))",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "412:                     } else {",
      "413:                         el.addClass('odd');",
      "414:                     }",
      "416:                         on('click', function(e, path) {",
      "417:                             e.preventDefault();",
      "418:                             if (!this.is_disabled()) {",
      "",
      "[Removed Lines]",
      "415:                     el.one('.fp-path-folder-name').setContent(p[i].name).",
      "",
      "[Added Lines]",
      "415:                     el.one('.fp-path-folder-name').setContent(Y.Escape.html(p[i].name)).",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "602:             for (var i in licenses) {",
      "603:                 var option = Y.Node.create('<option/>').",
      "604:                     set('value', licenses[i].shortname).",
      "606:                 node.appendChild(option)",
      "607:             }",
      "608:         },",
      "",
      "[Removed Lines]",
      "605:                     setContent(licenses[i].fullname);",
      "",
      "[Added Lines]",
      "605:                     setContent(Y.Escape.html(licenses[i].fullname));",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "621:             node.setContent('');",
      "622:             for (var i in list) {",
      "623:                 node.appendChild(Y.Node.create('<option/>').",
      "625:             }",
      "626:         },",
      "627:         update_file: function(confirmed) {",
      "",
      "[Removed Lines]",
      "624:                     set('value', list[i]).setContent(list[i]))",
      "",
      "[Added Lines]",
      "624:                     set('value', list[i]).setContent(Y.Escape.html(list[i])));",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "923:                 if (selectnode.one('.fp-'+attrs[i])) {",
      "924:                     var value = (node[attrs[i]+'_f']) ? node[attrs[i]+'_f'] : (node[attrs[i]] ? node[attrs[i]] : '');",
      "925:                     selectnode.one('.fp-'+attrs[i]).addClassIf('fp-unknown', ''+value == '')",
      "927:                 }",
      "928:             }",
      "",
      "[Removed Lines]",
      "926:                         .one('.fp-value').setContent(value);",
      "",
      "[Added Lines]",
      "926:                         .one('.fp-value').setContent(Y.Escape.html(value));",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "948:                             selectnode.one('.fp-original').removeClass('fp-loading');",
      "949:                             if (obj.original) {",
      "950:                                 node.original = obj.original;",
      "952:                             } else {",
      "953:                                 selectnode.one('.fp-original .fp-value').setContent(M.str.repository.unknownsource);",
      "954:                             }",
      "",
      "[Removed Lines]",
      "951:                                 selectnode.one('.fp-original .fp-value').setContent(node.original);",
      "",
      "[Added Lines]",
      "951:                                 selectnode.one('.fp-original .fp-value').setContent(Y.Escape.html(node.original));",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "976:                                 for (var i in obj.references) {",
      "977:                                     node.reflist += '<li>'+obj.references[i]+'</li>';",
      "978:                                 }",
      "980:                             } else {",
      "981:                                 selectnode.one('.fp-reflist .fp-value').setContent('');",
      "982:                             }",
      "",
      "[Removed Lines]",
      "979:                                 selectnode.one('.fp-reflist .fp-value').setContent(node.reflist);",
      "",
      "[Added Lines]",
      "979:                                 selectnode.one('.fp-reflist .fp-value').setContent(Y.Escape.html(node.reflist));",
      "",
      "---------------"
    ],
    "lib/outputrequirementslib.php||lib/outputrequirementslib.php": [
      "File: lib/outputrequirementslib.php -> lib/outputrequirementslib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:                 case 'core_filepicker':",
      "396:                     $module = array('name'     => 'core_filepicker',",
      "397:                                     'fullpath' => '/repository/filepicker.js',",
      "399:                                     'strings'  => array(array('lastmodified', 'moodle'), array('name', 'moodle'), array('type', 'repository'), array('size', 'repository'),",
      "400:                                                         array('invalidjson', 'repository'), array('error', 'moodle'), array('info', 'moodle'),",
      "401:                                                         array('nofilesattached', 'repository'), array('filepicker', 'repository'), array('logout', 'repository'),",
      "",
      "[Removed Lines]",
      "398:                                     'requires' => array('base', 'node', 'node-event-simulate', 'json', 'async-queue', 'io-base', 'io-upload-iframe', 'io-form', 'yui2-treeview', 'panel', 'cookie', 'datatable', 'datatable-sort', 'resize-plugin', 'dd-plugin', 'moodle-core_filepicker'),",
      "",
      "[Added Lines]",
      "398:                                     'requires' => array('base', 'node', 'node-event-simulate', 'json', 'async-queue', 'io-base', 'io-upload-iframe', 'io-form', 'yui2-treeview', 'panel', 'cookie', 'datatable', 'datatable-sort', 'resize-plugin', 'dd-plugin', 'escape', 'moodle-core_filepicker'),",
      "",
      "---------------"
    ],
    "repository/filepicker.js||repository/filepicker.js": [
      "File: repository/filepicker.js -> repository/filepicker.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "176:         var file_get_filename = function(node) {",
      "177:             return node.title ? node.title : node.fullname;",
      "180:         var file_get_displayname = function(node) {",
      "184:         var file_get_description = function(node) {",
      "188:         var build_tree = function(node, level) {",
      "",
      "[Removed Lines]",
      "178:         }",
      "181:             return node.shorttitle ? node.shorttitle : file_get_filename(node);",
      "182:         }",
      "185:             return node.description ? node.description : (node.thumbnail_title ? node.thumbnail_title : file_get_filename(node));",
      "186:         }",
      "",
      "[Added Lines]",
      "178:         };",
      "181:             var displayname = node.shorttitle ? node.shorttitle : file_get_filename(node);",
      "182:             return Y.Escape.html(displayname);",
      "183:         };",
      "186:             var description = '';",
      "187:             if (node.description) {",
      "188:                 description = node.description;",
      "189:             } else if (node.thumbnail_title) {",
      "190:                 description = node.thumbnail_title;",
      "191:             } else {",
      "192:                 description = file_get_filename(node);",
      "193:             }",
      "194:             return Y.Escape.html(description);",
      "195:         };",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "401:                 imgdiv.setStyleAdv('width', width).setStyleAdv('height', height);",
      "402:                 var img = Y.Node.create('<img/>').setAttrs({",
      "403:                         title: file_get_description(node),",
      "405:                     setStyle('maxWidth', ''+width+'px').",
      "406:                     setStyle('maxHeight', ''+height+'px');",
      "407:                 img.setImgSrc(src, node.realthumbnail, lazyloading);",
      "",
      "[Removed Lines]",
      "404:                         alt: node.thumbnail_alt ? node.thumbnail_alt : file_get_filename(node)}).",
      "",
      "[Added Lines]",
      "413:                         alt: Y.Escape.html(node.thumbnail_alt ? node.thumbnail_alt : file_get_filename(node))}).",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "738:             this.fpnode.one('.fp-content').setContent(M.core_filepicker.templates.error);",
      "739:             this.fpnode.one('.fp-content .fp-error').",
      "740:                 addClass(errorcode).",
      "742:         },",
      "744:         print_msg: function(msg, type) {",
      "",
      "[Removed Lines]",
      "741:                 setContent(errortext);",
      "",
      "[Added Lines]",
      "750:                 setContent(Y.Escape.html(errortext));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "769:             this.msg_dlg.set('headerContent', header);",
      "770:             this.msg_dlg_node.removeClass('fp-msg-info').removeClass('fp-msg-error').addClass('fp-msg-'+type)",
      "772:             this.msg_dlg.show();",
      "773:         },",
      "774:         view_files: function(appenditems) {",
      "",
      "[Removed Lines]",
      "771:             this.msg_dlg_node.one('.fp-msg-text').setContent(msg);",
      "",
      "[Added Lines]",
      "780:             this.msg_dlg_node.one('.fp-msg-text').setContent(Y.Escape.html(msg));",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1106:                 if (selectnode.one('.fp-'+attrs[i])) {",
      "1107:                     var value = (args[attrs[i]+'_f']) ? args[attrs[i]+'_f'] : (args[attrs[i]] ? args[attrs[i]] : '');",
      "1108:                     selectnode.one('.fp-'+attrs[i]).addClassIf('fp-unknown', ''+value == '')",
      "1110:                 }",
      "1111:             }",
      "1112:         },",
      "",
      "[Removed Lines]",
      "1109:                         .one('.fp-value').setContent(value);",
      "",
      "[Added Lines]",
      "1118:                         .one('.fp-value').setContent(Y.Escape.html(value));",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1354:                             this.hide_header();",
      "1355:                             this.list({'repo_id':repository_id});",
      "1356:                         }, this /*handler running scope*/, repository.id/*second argument of handler*/);",
      "1358:                     node.one('.fp-repo-icon').set('src', repository.icon);",
      "1359:                     if (i==0) {",
      "1360:                         node.addClass('first');",
      "",
      "[Removed Lines]",
      "1357:                     node.one('.fp-repo-name').setContent(repository.name);",
      "",
      "[Added Lines]",
      "1366:                     node.one('.fp-repo-name').setContent(Y.Escape.html(repository.name));",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1609:                 var option = Y.Node.create('<option/>').",
      "1610:                     set('selected', (this.options.defaultlicense==licenses[i].shortname)).",
      "1611:                     set('value', licenses[i].shortname).",
      "1613:                 node.appendChild(option)",
      "1614:             }",
      "1615:         },",
      "",
      "[Removed Lines]",
      "1612:                     setContent(licenses[i].fullname);",
      "",
      "[Added Lines]",
      "1621:                     setContent(Y.Escape.html(licenses[i].fullname));",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1869:                     } else {",
      "1870:                         el.addClass('odd');",
      "1871:                     }",
      "1873:                     el.on('click',",
      "1874:                             function(e, path) {",
      "1875:                                 e.preventDefault();",
      "",
      "[Removed Lines]",
      "1872:                     el.all('.fp-path-folder-name').setContent(p[i].name);",
      "",
      "[Added Lines]",
      "1881:                     el.all('.fp-path-folder-name').setContent(Y.Escape.html(p[i].name));",
      "",
      "---------------"
    ],
    "repository/filepicker.php||repository/filepicker.php": [
      "File: repository/filepicker.php -> repository/filepicker.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "142:             if (isset($item['thumbnail_width'])) {",
      "143:                 $style .= 'max-width:'.$item['thumbnail_width'].'px;';",
      "144:             }",
      "146:             echo '</td><td>';",
      "147:             if (!empty($item['url'])) {",
      "149:             } else {",
      "151:             }",
      "152:             echo '</td>';",
      "153:             echo '<td>';",
      "",
      "[Removed Lines]",
      "145:             echo html_writer::empty_tag('img', array('src' => $item['thumbnail'], 'style' => $style));",
      "148:                 echo html_writer::link($item['url'], $item['title'], array('target'=>'_blank'));",
      "150:                 echo $item['title'];",
      "",
      "[Added Lines]",
      "145:             echo html_writer::empty_tag('img', array('src' => $item['thumbnail'], 'alt' => '', 'style' => $style));",
      "148:                 echo html_writer::link($item['url'], s($item['title']), array('target'=>'_blank'));",
      "150:                 echo s($item['title']);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "204:                         'draftpath'=>$draftpath,",
      "205:                         'savepath'=>$savepath",
      "206:                         ));",
      "208:                     echo '<span> / </span>';",
      "209:                 }",
      "210:             }",
      "",
      "[Removed Lines]",
      "207:                     echo '<strong>' . html_writer::link($pathurl, $p['name']) . '</strong>';",
      "",
      "[Added Lines]",
      "207:                     echo '<strong>' . html_writer::link($pathurl, s($p['name'])) . '</strong>';",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "241:                 echo html_writer::empty_tag('img', array('src' => $item['thumbnail'], 'style' => $style));",
      "242:                 echo '</td><td>';",
      "243:                 if (!empty($item['url'])) {",
      "245:                 } else {",
      "247:                 }",
      "248:                 echo '</td>';",
      "249:                 echo '<td>';",
      "",
      "[Removed Lines]",
      "244:                     echo html_writer::link($item['url'], $item['title'], array('target'=>'_blank'));",
      "246:                     echo $item['title'];",
      "",
      "[Added Lines]",
      "244:                     echo html_writer::link($item['url'], s($item['title']), array('target'=>'_blank'));",
      "246:                     echo s($item['title']);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "393:         $aurl->params(array('savepath'=>$savepath, 'action' => 'list', 'repo_id' => $info->id, 'draftpath'=>$draftpath));",
      "395:         echo '<li>';",
      "398:         echo '</li>';",
      "399:     }",
      "400:     echo '</ul>';",
      "",
      "[Removed Lines]",
      "396:         echo '<img src=\"'.$info->icon.'\" alt=\"'.$info->name.'\" width=\"16\" height=\"16\" /> ';",
      "397:         echo html_writer::link($aurl, $info->name);",
      "",
      "[Added Lines]",
      "396:         echo html_writer::empty_tag('img', array('src'=>$info->icon, 'alt'=>$info->name, 'class'=>'icon icon-pre'));",
      "397:         echo html_writer::link($aurl, s($info->name));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5bdf63cce094e1e5cbf5bde056192934530e96ed",
      "candidate_info": {
        "commit_hash": "5bdf63cce094e1e5cbf5bde056192934530e96ed",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/5bdf63cce094e1e5cbf5bde056192934530e96ed",
        "files": [
          "lang/en/repository.php",
          "lib/outputrequirementslib.php",
          "repository/coursefiles/lib.php",
          "repository/filepicker.js",
          "repository/filesystem/lang/en/repository_filesystem.php",
          "repository/filesystem/lib.php",
          "repository/lib.php",
          "repository/local/lib.php",
          "repository/recent/lib.php",
          "repository/renderer.php",
          "repository/repository_ajax.php",
          "repository/user/lib.php"
        ],
        "message": "MDL-14636: Support table view in Filepicker, provide more info about files\n\n- Added table view in Filepicker where for each file we show Name, Last modified, Size and Type. Sortable by column\n- Preprocess list of files returned from repositories to include formatted size, dates, type and also add filetype icon\n- Make sure that local repositories (coursefiles, filesystem, local, recent, user) return information about file size, datemodified, datecreated, author, license",
        "before_after_code_files": [
          "lang/en/repository.php||lang/en/repository.php",
          "lib/outputrequirementslib.php||lib/outputrequirementslib.php",
          "repository/coursefiles/lib.php||repository/coursefiles/lib.php",
          "repository/filepicker.js||repository/filepicker.js",
          "repository/filesystem/lang/en/repository_filesystem.php||repository/filesystem/lang/en/repository_filesystem.php",
          "repository/filesystem/lib.php||repository/filesystem/lib.php",
          "repository/lib.php||repository/lib.php",
          "repository/local/lib.php||repository/local/lib.php",
          "repository/recent/lib.php||repository/recent/lib.php",
          "repository/renderer.php||repository/renderer.php",
          "repository/repository_ajax.php||repository/repository_ajax.php",
          "repository/user/lib.php||repository/user/lib.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/outputrequirementslib.php||lib/outputrequirementslib.php",
            "repository/filepicker.js||repository/filepicker.js"
          ],
          "candidate": [
            "lib/outputrequirementslib.php||lib/outputrequirementslib.php",
            "repository/filepicker.js||repository/filepicker.js"
          ]
        }
      },
      "candidate_diff": {
        "lang/en/repository.php||lang/en/repository.php": [
          "File: lang/en/repository.php -> lang/en/repository.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "179: $string['sync'] = 'Sync';",
          "180: $string['thumbview'] = 'View as icons';",
          "181: $string['title'] = 'Choose a file...';",
          "182: $string['typenotvisible'] = 'Type not visible';",
          "183: $string['upload'] = 'Upload this file';",
          "184: $string['uploading'] = 'Uploading...';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "182: $string['type'] = 'Type';",
          "",
          "---------------"
        ],
        "lib/outputrequirementslib.php||lib/outputrequirementslib.php": [
          "File: lib/outputrequirementslib.php -> lib/outputrequirementslib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "439:                 case 'core_filepicker':",
          "440:                     $module = array('name'     => 'core_filepicker',",
          "441:                                     'fullpath' => '/repository/filepicker.js',",
          "444:                                     'strings'  => array(array('add', 'repository'), array('back', 'repository'), array('cancel', 'moodle'), array('close', 'repository'),",
          "445:                                                         array('cleancache', 'repository'), array('copying', 'repository'), array('date', 'repository'), array('downloadsucc', 'repository'),",
          "",
          "[Removed Lines]",
          "442:                                     'requires' => array('base', 'node', 'node-event-simulate', 'json', 'async-queue', 'io-base', 'io-upload-iframe', 'io-form', 'yui2-menu', 'yui2-treeview', 'yui2-dragdrop', 'panel', 'cookie'),",
          "",
          "[Added Lines]",
          "442:                                     'requires' => array('base', 'node', 'node-event-simulate', 'json', 'async-queue', 'io-base', 'io-upload-iframe', 'io-form', 'yui2-menu', 'yui2-treeview', 'yui2-dragdrop', 'panel', 'cookie', 'datatable', 'datatable-sort'),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "459:                                                         array('renameto', 'repository'), array('fileexists', 'repository'),",
          "460:                                                         array('fileexistsdialogheader', 'repository'), array('fileexistsdialog_editor', 'repository'),",
          "461:                                                         array('fileexistsdialog_filemanager', 'repository'), array('uselatestfile', 'repository')",
          "462:                                                     ));",
          "463:                     break;",
          "464:                 case 'core_comment':",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "462:                                                         array('lastmodified', 'moodle'), array('name', 'moodle'), array('type', 'repository')",
          "",
          "---------------"
        ],
        "repository/coursefiles/lib.php||repository/coursefiles/lib.php": [
          "File: repository/coursefiles/lib.php -> repository/coursefiles/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:                     $encodedpath = base64_encode(serialize($params));",
          "106:                     $node = array(",
          "107:                         'title' => $child->get_visible_name(),",
          "110:                         'path' => $encodedpath,",
          "111:                         'children'=>array(),",
          "112:                         'thumbnail' => $OUTPUT->pix_url('f/folder-32')->out(false)",
          "",
          "[Removed Lines]",
          "108:                         'size' => 0,",
          "109:                         'date' => '',",
          "",
          "[Added Lines]",
          "108:                         'datemodified' => $child->get_timemodified(),",
          "109:                         'datecreated' => $child->get_timecreated(),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "116:                     $encodedpath = base64_encode(serialize($child->get_params()));",
          "117:                     $node = array(",
          "118:                         'title' => $child->get_visible_name(),",
          "121:                         'source'=> $encodedpath,",
          "122:                         'thumbnail' => $OUTPUT->pix_url(file_extension_icon($child->get_visible_name(), 32))->out(false)",
          "123:                     );",
          "",
          "[Removed Lines]",
          "119:                         'size' => 0,",
          "120:                         'date' => '',",
          "",
          "[Added Lines]",
          "119:                         'size' => $child->get_filesize(),",
          "120:                         'author' => $child->get_author(),",
          "121:                         'license' => $child->get_license(),",
          "122:                         'datemodified' => $child->get_timemodified(),",
          "123:                         'datecreated' => $child->get_timecreated(),",
          "",
          "---------------"
        ],
        "repository/filepicker.js||repository/filepicker.js": [
          "File: repository/filepicker.js -> repository/filepicker.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "350:         build_tree: function(node, level) {",
          "351:             var client_id = this.options.client_id;",
          "352:             var dynload = this.active_repo.dynload;",
          "360:             if (node.dynamicLoadComplete) {",
          "362:             }",
          "365:             tmpNode.isLeaf = node.children ? false : true;",
          "366:             if (!tmpNode.isLeaf) {",
          "367:                 if(node.expanded) {",
          "",
          "[Removed Lines]",
          "353:             var info = {",
          "354:                 label:node.title,",
          "355:                 filename:node.title,",
          "356:                 source:node.source?node.source:'',",
          "357:                 thumbnail:node.thumbnail,",
          "358:                 path:node.path?node.path:''",
          "359:             };",
          "361:                 info.dynamicLoadComplete = true;",
          "363:             var tmpNode = new YAHOO.widget.TextNode(info, level, false);",
          "364:             tmpNode.repo_id = node.repo_id ? node.repo_id : this.active_repo.id;",
          "",
          "[Added Lines]",
          "354:             var el = Y.Node.create('<div/>').setContent(M.core_filepicker.templates.listfilename);",
          "355:             el.one('.fp-filename').setContent(node.title);",
          "356:             if (node.icon && !node.children) {",
          "357:                 el.one('.fp-icon').appendChild(Y.Node.create('<img/>').set('src', node.icon));",
          "358:             }",
          "360:             var tmpNode = new YAHOO.widget.HTMLNode(el.getContent(), level, false);",
          "362:                 tmpNode.dynamicLoadComplete = true;",
          "364:             tmpNode.fileinfo = node;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "370:                 if (dynload) {",
          "371:                     tmpNode.scope = this;",
          "372:                 }",
          "375:                 for(var c in node.children) {",
          "376:                     this.build_tree(node.children[c], tmpNode);",
          "377:                 }",
          "",
          "[Removed Lines]",
          "373:                 tmpNode.client_id = client_id;",
          "374:                 tmpNode.path = info.path;",
          "",
          "[Added Lines]",
          "373:                 tmpNode.path = node.path ? node.path : '';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "385:             } else {",
          "386:                 this.viewbar_set_enabled(true);",
          "387:                 this.print_path();",
          "391:                     this.view_as_list();",
          "392:                 } else {",
          "393:                     this.view_as_icons();",
          "394:                 }",
          "",
          "[Removed Lines]",
          "388:                 if (this.viewmode == 1) {",
          "389:                     this.view_as_icons();",
          "390:                 } else if (this.viewmode == 2) {",
          "",
          "[Added Lines]",
          "387:                 if (this.viewmode == 2) {",
          "389:                 } else if (this.viewmode == 3) {",
          "390:                     this.view_as_table();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "446:             var dynload = scope.active_repo.dynload;",
          "447:             var list = this.filelist;",
          "448:             scope.viewmode = 2;",
          "450:                 this.display_error(M.str.repository.nofilesavailable, 'nofilesavailable');",
          "451:                 return;",
          "452:             }",
          "",
          "[Removed Lines]",
          "449:             if (list && list.length==0 && (!this.filepath || !this.filepath.length)) {",
          "",
          "[Added Lines]",
          "448:             if (!list || list.length==0 && (!this.filepath || !this.filepath.length)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "485:                     var root = scope.treeview.getRoot();",
          "486:                     while (root && root.children && root.children.length) {",
          "487:                         root = root.children[0];",
          "489:                             scope.treeview_dynload(root, null);",
          "490:                         }",
          "491:                     }",
          "",
          "[Removed Lines]",
          "488:                         if (!root.isLeaf && root.expanded && root.path != mytreeel.path) {",
          "",
          "[Added Lines]",
          "487:                         if (root.path == mytreeel.path) {",
          "488:                             root.origpath = scope.filepath;",
          "489:                             root.origlist = scope.filelist;",
          "490:                         } else if (!root.isLeaf && root.expanded) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "498:             }",
          "499:             scope.treeview.subscribe('clickEvent', function(e){",
          "500:                 if(e.node.isLeaf){",
          "505:                     if (e.node.parent && e.node.parent.origpath) {",
          "507:                         scope.filepath = e.node.parent.origpath;",
          "508:                         scope.filelist = e.node.parent.origlist;",
          "509:                         scope.print_path();",
          "510:                     }",
          "513:                 } else {",
          "515:                     scope.filepath = e.node.origpath;",
          "",
          "[Removed Lines]",
          "501:                     var fileinfo = {};",
          "502:                     fileinfo['title'] = e.node.data.filename;",
          "503:                     fileinfo['source'] = e.node.data.source;",
          "504:                     fileinfo['thumbnail'] = e.node.data.thumbnail;",
          "511:                     e.node.highlight(false)",
          "512:                     scope.select_file(fileinfo);",
          "",
          "[Added Lines]",
          "509:                     e.node.highlight(false);",
          "510:                     scope.select_file(e.node.fileinfo);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "524:             var list = this.filelist;",
          "525:             this.viewmode = 1;",
          "528:                 this.display_error(M.str.repository.nofilesavailable, 'nofilesavailable');",
          "529:                 return;",
          "530:             }",
          "",
          "[Removed Lines]",
          "527:             if (list && list.length==0) {",
          "",
          "[Added Lines]",
          "525:             if (!list || list.length==0) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "576:                     element.on('click', function(e, p) {",
          "577:                         e.preventDefault();",
          "578:                         if(dynload) {",
          "581:                         }else{",
          "582:                             this.filelist = p.children;",
          "583:                             this.view_files();",
          "584:                         }",
          "585:                     }, this, node);",
          "586:                 } else {",
          "593:                     element.on('click', function(e, args) {",
          "594:                         e.preventDefault();",
          "595:                         this.select_file(args);",
          "597:                 }",
          "598:                 count++;",
          "599:             }",
          "600:         },",
          "601:         select_file: function(args) {",
          "602:             this.selectui.show();",
          "603:             var client_id = this.options.client_id;",
          "",
          "[Removed Lines]",
          "579:                             var params = {'path':p.path};",
          "580:                             scope.list(params);",
          "587:                     var fileinfo = {};",
          "588:                     fileinfo['title'] = list[k].title;",
          "589:                     fileinfo['source'] = list[k].source;",
          "590:                     fileinfo['thumbnail'] = list[k].thumbnail;",
          "591:                     fileinfo['haslicense'] = list[k].haslicense?true:false;",
          "592:                     fileinfo['hasauthor'] = list[k].hasauthor?true:false;",
          "596:                     }, this, fileinfo);",
          "",
          "[Added Lines]",
          "577:                             scope.list({'path':p.path});",
          "579:                             this.filepath = p.path;",
          "588:                     }, this, list[k]);",
          "593:         view_as_table: function() {",
          "594:             var list = this.filelist;",
          "595:             var client_id = this.options.client_id;",
          "596:             this.viewmode = 3;",
          "598:             if (!list || list.length==0) {",
          "599:                 this.display_error(M.str.repository.nofilesavailable, 'nofilesavailable');",
          "600:                 return;",
          "601:             }",
          "602:             var treeviewnode = Y.Node.create('<div/>').",
          "603:                     setAttrs({'class':'fp-tableview', id:'tableview-'+client_id});",
          "604:             this.fpnode.one('.fp-content').setContent('').appendChild(treeviewnode);",
          "605:                 var formatValue = function (o){",
          "606:                     if (o.data[''+o.field+'_f_s']) { return o.data[''+o.field+'_f_s']; }",
          "607:                     else if (o.data[''+o.field+'_f']) { return o.data[''+o.field+'_f']; }",
          "608:                     else if (o.value) { return o.value; }",
          "609:                     else { return ''; }",
          "610:                 };",
          "611:                 var formatTitle = function(o) {",
          "612:                     var el = Y.Node.create('<div/>').setContent(M.core_filepicker.templates.listfilename);",
          "613:                     el.one('.fp-filename').setContent(o.value);",
          "614:                     el.one('.fp-icon').appendChild(Y.Node.create('<img/>').set('src', o.data['icon']));",
          "615:                     return el.getContent();",
          "616:                 }",
          "618:                 var cols = [",
          "619:                     {key: \"title\", label: M.str.moodle.name, sortable: true, formatter: formatTitle},",
          "620:                     {key: \"datemodified\", label: M.str.moodle.lastmodified, sortable: true, formatter: formatValue},",
          "621:                     {key: \"size\", label: M.str.repository.size, sortable: true, formatter: formatValue},",
          "622:                     {key: \"type\", label: M.str.repository.type, sortable: true}",
          "623:                 ];",
          "624:                 var table = new Y.DataTable.Base({",
          "625:                     columnset: cols,",
          "626:                     recordset: list",
          "627:                 });",
          "629:                 table.plug(Y.Plugin.DataTableSort/*, { lastSortedBy: {key: \"title\", dir: \"asc\"} }*/);",
          "631:                 table.render('#tableview-'+client_id);",
          "632:                 table.delegate('click', function (e) {",
          "633:                     var rs = table.get('recordset');",
          "634:                     var id = e.currentTarget.get('id'), len = rs.size(), i;",
          "635:                     for (i = 0; i < len; ++i) {",
          "636:                         var record = rs.item(i);",
          "637:                         if (record.get('id') == id) {",
          "639:                             var data = record.getValue();",
          "640:                             if (data.children) {",
          "641:                                 if (this.active_repo.dynload) {",
          "642:                                     this.list({'path':data.path});",
          "643:                                 } else {",
          "644:                                     this.filepath = data.path;",
          "645:                                     this.filelist = data.children;",
          "646:                                     this.view_files();",
          "647:                                 }",
          "648:                             } else {",
          "649:                                 this.select_file(data);",
          "650:                             }",
          "651:                         }",
          "652:                     }",
          "653:                 }, 'tr', this);",
          "654:         },",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1391:             this.viewbar_set_enabled(false);",
          "1392:             var repository_id = Y.Cookie.get('recentrepository');",
          "1393:             this.viewmode = Y.Cookie.get('recentviewmode', Number);",
          "1395:                 this.viewmode = 1;",
          "1396:             }",
          "1397:             if (this.options.repositories[repository_id]) {",
          "",
          "[Removed Lines]",
          "1394:             if (this.viewmode != 1 && this.viewmode != 2 && this.viewmode != 3) {",
          "",
          "[Added Lines]",
          "1448:             if (this.viewmode != 2 && this.viewmode != 3) {",
          "",
          "---------------"
        ],
        "repository/filesystem/lang/en/repository_filesystem.php||repository/filesystem/lang/en/repository_filesystem.php": [
          "File: repository/filesystem/lang/en/repository_filesystem.php -> repository/filesystem/lang/en/repository_filesystem.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: $string['information'] = 'These folders are within the <b>{$a}</b> directory.';",
          "31: $string['invalidpath'] = 'Invalid root path';",
          "32: $string['path'] = 'Select a subdirectory';",
          "33: $string['nosubdir'] = 'You need to create at least one folder inside the <b>{$a}</b> directory so you can select it here.';",
          "34: $string['pluginname_help'] = 'Create repository from local directory';",
          "35: $string['pluginname'] = 'File system';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: $string['root'] = 'Root';",
          "",
          "---------------"
        ],
        "repository/filesystem/lib.php||repository/filesystem/lib.php": [
          "File: repository/filesystem/lib.php -> repository/filesystem/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:         $list['list'] = array();",
          "72:         $list['path'] = array(",
          "74:         );",
          "75:         $trail = '';",
          "76:         if (!empty($path)) {",
          "",
          "[Removed Lines]",
          "73:             array('name'=>'Root', 'path'=>'')",
          "",
          "[Added Lines]",
          "73:             array('name'=>get_string('root', 'repository_filesystem'), 'path'=>'')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:                             'title' => $file,",
          "100:                             'source' => $path.'/'.$file,",
          "101:                             'size' => filesize($this->root_path.$file),",
          "103:                             'thumbnail' => $OUTPUT->pix_url(file_extension_icon($this->root_path.$file, 32))->out(false)",
          "104:                         );",
          "105:                     } else {",
          "",
          "[Removed Lines]",
          "102:                             'date' => time(),",
          "",
          "[Added Lines]",
          "102:                             'datecreated' => filectime($this->root_path.$file),",
          "103:                             'datemodified' => filemtime($this->root_path.$file),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "111:                         $list['list'][] = array(",
          "112:                             'title' => $file,",
          "113:                             'children' => array(),",
          "114:                             'thumbnail' => $OUTPUT->pix_url('f/folder-32')->out(false),",
          "115:                             'path' => $current_path",
          "116:                             );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115:                             'datecreated' => filectime($this->root_path.$file),",
          "116:                             'datemodified' => filemtime($this->root_path.$file),",
          "",
          "---------------"
        ],
        "repository/lib.php||repository/lib.php": [
          "File: repository/lib.php -> repository/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1780:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1789:     public static function prepare_listing($listing) {",
          "1790:         global $OUTPUT;",
          "1791:         if (!is_array($listing) || !isset($listing['list'])) {",
          "1792:             return $listing;",
          "1793:         }",
          "1794:         $len = count($listing['list']);",
          "1795:         for ($i=0; $i<$len; $i++) {",
          "1796:             if (isset($listing['list'][$i]['size'])) {",
          "1797:                 $listing['list'][$i]['size'] = (int)$listing['list'][$i]['size'];",
          "1798:                 $listing['list'][$i]['size_f'] = display_size($listing['list'][$i]['size']);",
          "1799:             }",
          "1800:             foreach (array('date', 'datemodified', 'datecreated') as $key) {",
          "1801:                 if (!isset($listing['list'][$i][$key]) && isset($listing['list'][$i]['date'])) {",
          "1802:                     $listing['list'][$i][$key] = $listing['list'][$i]['date'];",
          "1803:                 }",
          "1804:                 if (isset($listing['list'][$i][$key])) {",
          "1806:                     $listing['list'][$i][$key] = (int)$listing['list'][$i][$key];",
          "1807:                     if (!$listing['list'][$i][$key]) {",
          "1808:                         unset($listing['list'][$i][$key]);",
          "1809:                     } else {",
          "1810:                         $listing['list'][$i][$key.'_f'] = userdate($listing['list'][$i][$key], get_string('strftimedatetime', 'langconfig'));",
          "1811:                         $listing['list'][$i][$key.'_f_s'] = userdate($listing['list'][$i][$key], get_string('strftimedatetimeshort', 'langconfig'));",
          "1812:                     }",
          "1813:                 }",
          "1814:             }",
          "1815:             if (!isset($listing['list'][$i]['type']) && !array_key_exists('children', $listing['list'][$i]) && isset($listing['list'][$i]['title'])) {",
          "1816:                 $mimetype = mimeinfo('type', $listing['list'][$i]['title']);",
          "1817:                 if (get_string_manager()->string_exists($mimetype, 'mimetypes')) {",
          "1818:                     $mimetype = get_string($mimetype, 'mimetypes');",
          "1819:                 }",
          "1820:                 $listing['list'][$i]['type'] = $mimetype;",
          "1821:             }",
          "1822:             if (!isset($listing['list'][$i]['icon']) && isset($listing['list'][$i]['title'])) {",
          "1823:                 if (array_key_exists('children', $listing['list'][$i])) {",
          "1824:                     $listing['list'][$i]['icon'] = $OUTPUT->pix_url('f/folder')->out(false);",
          "1825:                 } else {",
          "1826:                     $listing['list'][$i]['icon'] = $OUTPUT->pix_url('f/'.mimeinfo('icon', $listing['list'][$i]['title']))->out(false);",
          "1827:                 }",
          "1828:             }",
          "1829:         }",
          "1830:         return $listing;",
          "1831:     }",
          "",
          "---------------"
        ],
        "repository/local/lib.php||repository/local/lib.php": [
          "File: repository/local/lib.php -> repository/local/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "208:         $encodedpath = base64_encode(serialize($this->fileinfo->get_params()));",
          "209:         $node = array(",
          "210:             'title' => $this->fileinfo->get_visible_name(),",
          "213:         if ($this->isdir) {",
          "214:             $node['path'] = $encodedpath;",
          "215:             $node['thumbnail'] = $OUTPUT->pix_url('f/folder-32')->out(false);",
          "216:             $node['children'] = array();",
          "217:         } else {",
          "218:             $node['source'] = $encodedpath;",
          "219:             $node['thumbnail'] = $OUTPUT->pix_url(file_extension_icon($node['title'], 32))->out(false);",
          "220:         }",
          "",
          "[Removed Lines]",
          "211:             'size' => 0,",
          "212:             'date' => '');",
          "",
          "[Added Lines]",
          "211:             'datemodified' => $this->fileinfo->get_timemodified(),",
          "212:             'datecreated' => $this->fileinfo->get_timecreated()",
          "213:         );",
          "219:             $node['size'] = $this->fileinfo->get_filesize();",
          "220:             $node['author'] = $this->fileinfo->get_author();",
          "221:             $node['license'] = $this->fileinfo->get_license();",
          "",
          "---------------"
        ],
        "repository/recent/lib.php||repository/recent/lib.php": [
          "File: repository/recent/lib.php -> repository/recent/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:         try {",
          "117:             foreach ($files as $file) {",
          "122:                     $node = array(",
          "123:                         'title' => $file['filename'],",
          "126:                         'source'=> $params,",
          "127:                         'thumbnail' => $OUTPUT->pix_url(file_extension_icon($file['filename'], 32))->out(false),",
          "128:                     );",
          "",
          "[Removed Lines]",
          "118:                 $params = base64_encode(serialize($file));",
          "120:                 $filesize = $this->get_file_size($params);",
          "121:                 if (!empty($filesize)) {",
          "124:                         'size' => $filesize,",
          "125:                         'date' => '',",
          "",
          "[Added Lines]",
          "119:                 $browser = get_file_browser();",
          "120:                 $context = get_context_instance_by_id($file['contextid']);",
          "121:                 $fileinfo = $browser->get_file_info($context, $file['component'],",
          "122:                         $file['filearea'], $file['itemid'], $file['filepath'], $file['filename']);",
          "123:                 if ($fileinfo) {",
          "124:                     $params = base64_encode(serialize($file));",
          "127:                         'size' => $fileinfo->get_filesize(),",
          "128:                         'datemodified' => $fileinfo->get_timemodified(),",
          "129:                         'datecreated' => $fileinfo->get_timecreated(),",
          "130:                         'author' => $fileinfo->get_author(),",
          "131:                         'license' => $fileinfo->get_license(),",
          "",
          "---------------"
        ],
        "repository/renderer.php||repository/renderer.php": [
          "File: repository/renderer.php -> repository/renderer.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:         return preg_replace('/\\{\\!\\}/', '', $rv);",
          "145:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161:     public function js_template_listfilename() {",
          "162:         $rv = '<span class=\"{!}fp-icon\"></span> <span class=\"{!}fp-filename\"></span>';",
          "163:         return preg_replace('/\\{\\!\\}/', '', $rv);",
          "164:     }",
          "",
          "---------------"
        ],
        "repository/repository_ajax.php||repository/repository_ajax.php": [
          "File: repository/repository_ajax.php -> repository/repository_ajax.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:     case 'signin':",
          "143:     case 'list':",
          "144:         if ($repo->check_login()) {",
          "146:             $listing['repo_id'] = $repo_id;",
          "147:             echo json_encode($listing);",
          "148:             break;",
          "",
          "[Removed Lines]",
          "145:             $listing = $repo->get_listing($req_path, $page);",
          "",
          "[Added Lines]",
          "145:             $listing = repository::prepare_listing($repo->get_listing($req_path, $page));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "166:         echo json_encode($search_form);",
          "167:         break;",
          "168:     case 'search':",
          "170:         $search_result['repo_id'] = $repo_id;",
          "171:         $search_result['issearchresult'] = true;",
          "172:         echo json_encode($search_result);",
          "",
          "[Removed Lines]",
          "169:         $search_result = $repo->search($search_text, (int)$page);",
          "",
          "[Added Lines]",
          "169:         $search_result = repository::prepare_listing($repo->search($search_text, (int)$page));",
          "",
          "---------------"
        ],
        "repository/user/lib.php||repository/user/lib.php": [
          "File: repository/user/lib.php -> repository/user/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:                         $encodedpath = base64_encode(serialize($child->get_params()));",
          "97:                         $node = array(",
          "98:                             'title' => $child->get_visible_name(),",
          "101:                             'path' => $encodedpath,",
          "102:                             'children'=>array(),",
          "103:                             'thumbnail' => $OUTPUT->pix_url('f/folder-32')->out(false)",
          "",
          "[Removed Lines]",
          "99:                             'size' => 0,",
          "100:                             'date' => '',",
          "",
          "[Added Lines]",
          "99:                             'datemodified' => $child->get_timemodified(),",
          "100:                             'datecreated' => $child->get_timecreated(),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107:                         $encodedpath = base64_encode(serialize($child->get_params()));",
          "108:                         $node = array(",
          "109:                             'title' => $child->get_visible_name(),",
          "112:                             'source'=> $encodedpath,",
          "113:                             'thumbnail' => $OUTPUT->pix_url(file_extension_icon($child->get_visible_name(), 32))->out(false)",
          "114:                         );",
          "",
          "[Removed Lines]",
          "110:                             'size' => 0,",
          "111:                             'date' => '',",
          "",
          "[Added Lines]",
          "110:                             'size' => $child->get_filesize(),",
          "111:                             'datemodified' => $child->get_timemodified(),",
          "112:                             'datecreated' => $child->get_timecreated(),",
          "113:                             'author' => $child->get_author(),",
          "114:                             'license' => $child->get_license(),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "20ee5084993de789d15ae57108d075a382255503",
      "candidate_info": {
        "commit_hash": "20ee5084993de789d15ae57108d075a382255503",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/20ee5084993de789d15ae57108d075a382255503",
        "files": [
          "lib/outputrequirementslib.php",
          "repository/filepicker.js",
          "repository/filepicker.php",
          "repository/wikimedia/lib.php",
          "repository/wikimedia/wikimedia.php",
          "repository/youtube/lib.php"
        ],
        "message": "MDL-31929: Repositories wikimedia and youtube lack paging\n\nrepositories wikimedia and youtube:\n- save last search in\n- process parameter 'page'\n- remove buttons 'Refresh', 'Search' and 'Logout' since they don't have meaning\nfilepicker:\n- allow unknown number of pages (['pages'] = -1), show one 'Next' page after the current (both JS and non-JS modes)\nrepository wikimedia:\n- add non-AJAX search form to make it work with JS disabled",
        "before_after_code_files": [
          "lib/outputrequirementslib.php||lib/outputrequirementslib.php",
          "repository/filepicker.js||repository/filepicker.js",
          "repository/filepicker.php||repository/filepicker.php",
          "repository/wikimedia/lib.php||repository/wikimedia/lib.php",
          "repository/wikimedia/wikimedia.php||repository/wikimedia/wikimedia.php",
          "repository/youtube/lib.php||repository/youtube/lib.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/outputrequirementslib.php||lib/outputrequirementslib.php",
            "repository/filepicker.js||repository/filepicker.js",
            "repository/filepicker.php||repository/filepicker.php"
          ],
          "candidate": [
            "lib/outputrequirementslib.php||lib/outputrequirementslib.php",
            "repository/filepicker.js||repository/filepicker.js",
            "repository/filepicker.php||repository/filepicker.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/outputrequirementslib.php||lib/outputrequirementslib.php": [
          "File: lib/outputrequirementslib.php -> lib/outputrequirementslib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "441:                                                         array('saving', 'repository'), array('search', 'repository'), array('searching', 'repository'), array('size', 'repository'),",
          "442:                                                         array('submit', 'repository'), array('sync', 'repository'), array('title', 'repository'), array('upload', 'repository'),",
          "443:                                                         array('uploading', 'repository'), array('xhtmlerror', 'repository'),",
          "445:                                                         array('ok', 'moodle'), array('error', 'moodle'), array('info', 'moodle'), array('norepositoriesavailable', 'repository'), array('norepositoriesexternalavailable', 'repository'),",
          "446:                                                         array('nofilesattached', 'repository'), array('filepicker', 'repository'),",
          "447:                                                         array('nofilesavailable', 'repository'), array('overwrite', 'repository'),",
          "",
          "[Removed Lines]",
          "444:                                                         array('cancel'), array('chooselicense', 'repository'), array('author', 'repository'),",
          "",
          "[Added Lines]",
          "444:                                                         array('cancel'), array('chooselicense', 'repository'), array('author', 'repository'),array('next', 'moodle'),",
          "",
          "---------------"
        ],
        "repository/filepicker.js||repository/filepicker.js": [
          "File: repository/filepicker.js -> repository/filepicker.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1370:             var r = this.active_repo;",
          "1371:             var str = '';",
          "1372:             var action = '';",
          "1374:                 str += '<div class=\"fp-paging\" id=\"paging-'+html_id+'-'+client_id+'\">';",
          "1375:                 str += this.get_page_button(1)+'1</a> ';",
          "1377:                 var span = 5;",
          "1378:                 var ex = (span-1)/2;",
          "1382:                 } else {",
          "1383:                     if (r.page<span) {",
          "1384:                         var max = span;",
          "",
          "[Removed Lines]",
          "1373:             if(r.pages > 1) {",
          "1380:                 if (r.page+ex>=r.pages) {",
          "1381:                     var max = r.pages;",
          "",
          "[Added Lines]",
          "1373:             var lastpage = r.pages",
          "1374:             var lastpagetext = r.pages",
          "1375:             if (r.pages == -1) {",
          "1376:                 lastpage = r.page + 1",
          "1377:                 lastpagetext = M.str.moodle.next",
          "1378:             }",
          "1379:             if(lastpage > 1) {",
          "1386:                 if (r.page+ex>=lastpage) {",
          "1387:                     var max = lastpage;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1405:                 }",
          "1410:                 } else {",
          "1411:                     str += this.get_page_button(max)+max+'</a>';",
          "1413:                 }",
          "1414:                 str += '</div>';",
          "1415:             }",
          "",
          "[Removed Lines]",
          "1408:                 if (max==r.pages) {",
          "1409:                     str += this.get_page_button(r.pages)+r.pages+'</a>';",
          "1412:                     str += ' ... '+this.get_page_button(r.pages)+r.pages+'</a>';",
          "",
          "[Added Lines]",
          "1414:                 if (max==lastpage) {",
          "1415:                     str += this.get_page_button(lastpage)+lastpagetext+'</a>';",
          "1418:                     str += ' ... '+this.get_page_button(lastpage)+lastpagetext+'</a>';",
          "",
          "---------------"
        ],
        "repository/filepicker.php||repository/filepicker.php": [
          "File: repository/filepicker.php -> repository/filepicker.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "206:                 }",
          "207:             }",
          "208:             if (!empty($list['page'])) {",
          "212:             }",
          "213:             echo '<table>';",
          "214:             foreach ($list['list'] as $item) {",
          "",
          "[Removed Lines]",
          "210:                 $pagingurl = new moodle_url(\"$CFG->httpswwwroot/repository/filepicker.php?action=list&itemid=$itemid&ctx_id=$contextid&repo_id=$repo_id&course=$courseid\");",
          "211:                 echo $OUTPUT->paging_bar($list['total'], $list['page'] - 1, $list['perpage'], $pagingurl);",
          "",
          "[Added Lines]",
          "212:                 $pagingurl = new moodle_url(\"$CFG->httpswwwroot/repository/filepicker.php?action=list&itemid=$itemid&ctx_id=$contextid&repo_id=$repo_id&course=$courseid&sesskey=\".  sesskey());",
          "213:                 if (!isset($list['perpage']) && !isset($list['total'])) {",
          "214:                     $list['perpage'] = 10; // instead of setting perpage&total we use number of pages, the result is the same",
          "215:                 }",
          "216:                 if (empty($list['total'])) {",
          "217:                     if ($list['pages'] == -1) {",
          "218:                         $total = ($list['page'] + 2) * $list['perpage'];",
          "219:                     } else {",
          "220:                         $total = $list['pages'] * $list['perpage'];",
          "221:                     }",
          "222:                 } else {",
          "223:                     $total = $list['total'];",
          "224:                 }",
          "225:                 echo $OUTPUT->paging_bar($total, $list['page'], $list['perpage'], $pagingurl);",
          "",
          "---------------"
        ],
        "repository/wikimedia/lib.php||repository/wikimedia/lib.php": [
          "File: repository/wikimedia/lib.php -> repository/wikimedia/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: class repository_wikimedia extends repository {",
          "33:     public function __construct($repositoryid, $context = SYSCONTEXTID, $options = array()) {",
          "34:         parent::__construct($repositoryid, $context, $options);",
          "35:         $this->keyword = optional_param('wikimedia_keyword', '', PARAM_RAW);",
          "36:         if (empty($this->keyword)) {",
          "37:             $this->keyword = optional_param('s', '', PARAM_RAW);",
          "38:         }",
          "39:     }",
          "40:     public function get_listing($path = '', $page = '') {",
          "41:         $client = new wikimedia;",
          "42:         $list = array();",
          "44:         $list['nologin'] = true;",
          "45:         return $list;",
          "46:     }",
          "",
          "[Removed Lines]",
          "43:         $list['list'] = $client->search_images($this->keyword);",
          "",
          "[Added Lines]",
          "34:         global $SESSION;",
          "40:         $sess_keyword = 'wikimedia_'.$this->id.'_keyword';",
          "41:         if (empty($this->keyword) && optional_param('page', '', PARAM_RAW)) {",
          "43:             if (isset($SESSION->{$sess_keyword})) {",
          "44:                 $this->keyword = $SESSION->{$sess_keyword};",
          "45:             }",
          "46:         } else if (!empty($this->keyword)) {",
          "48:             $SESSION->{$sess_keyword} = $this->keyword;",
          "49:         }",
          "54:         $list['page'] = (int)$page;",
          "55:         if ($list['page'] < 1) {",
          "56:             $list['page'] = 1;",
          "57:         }",
          "58:         $list['list'] = $client->search_images($this->keyword, $list['page'] - 1);",
          "60:         $list['norefresh'] = true;",
          "61:         $list['nosearch'] = true;",
          "62:         if (!empty($list['list'])) {",
          "63:             $list['pages'] = -1; // means we don't know exactly how many pages there are but we can always jump to the next page",
          "64:         } else if ($list['page'] > 1) {",
          "65:             $list['pages'] = $list['page']; // no images available on this page, this is the last page",
          "66:         } else {",
          "67:             $list['pages'] = 0; // no paging",
          "68:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:         $keyword->type  = 'text';",
          "58:         $keyword->name  = 'wikimedia_keyword';",
          "59:         $keyword->value = '';",
          "64:     }",
          "",
          "[Removed Lines]",
          "61:         $form = array();",
          "62:         $form['login'] = array($keyword);",
          "63:         return $form;",
          "",
          "[Added Lines]",
          "84:         if ($this->options['ajax']) {",
          "85:             $form = array();",
          "86:             $form['login'] = array($keyword);",
          "87:             $form['nologin'] = true;",
          "88:             $form['norefresh'] = true;",
          "89:             $form['nosearch'] = true;",
          "90:             $form['allowcaching'] = true; // indicates that login form can be cached in filepicker.js",
          "91:             return $form;",
          "92:         } else {",
          "93:             echo <<<EOD",
          "94: <table>",
          "95: <tr>",
          "96: <td>{$keyword->label}</td><td><input name=\"{$keyword->name}\" type=\"text\" /></td>",
          "97: </tr>",
          "98: </table>",
          "99: <input type=\"submit\" />",
          "100: EOD;",
          "101:         }",
          "",
          "---------------"
        ],
        "repository/wikimedia/wikimedia.php||repository/wikimedia/wikimedia.php": [
          "File: repository/wikimedia/wikimedia.php -> repository/wikimedia/wikimedia.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:         $files_array = array();",
          "146:         $this->_param['action'] = 'query';",
          "147:         $this->_param['generator'] = 'search';",
          "148:         $this->_param['gsrsearch'] = $keyword;",
          "149:         $this->_param['gsrnamespace'] = WIKIMEDIA_FILE_NS;",
          "150:         $this->_param['gsrlimit'] = WIKIMEDIA_THUMBS_PER_PAGE;",
          "151:         $this->_param['prop']   = 'imageinfo';",
          "152:         $this->_param['iiprop'] = 'url|dimensions|mime';",
          "153:         $this->_param['iiurlwidth'] = WIKIMEDIA_IMAGE_SIDE_LENGTH;",
          "",
          "[Removed Lines]",
          "144:     public function search_images($keyword) {",
          "",
          "[Added Lines]",
          "144:     public function search_images($keyword, $page = 0) {",
          "151:         $this->_param['gsroffset'] = $page * WIKIMEDIA_THUMBS_PER_PAGE;",
          "",
          "---------------"
        ],
        "repository/youtube/lib.php||repository/youtube/lib.php": [
          "File: repository/youtube/lib.php -> repository/youtube/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: class repository_youtube extends repository {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31:     const YOUTUBE_THUMBS_PER_PAGE = 27;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:     public function __construct($repositoryid, $context = SYSCONTEXTID, $options = array()) {",
          "41:         parent::__construct($repositoryid, $context, $options);",
          "42:     }",
          "",
          "[Removed Lines]",
          "38:         $this->start =1;",
          "39:         $this->max = 27;",
          "40:         $this->sort = optional_param('youtube_sort', 'relevance', PARAM_TEXT);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54:         $this->keyword = $search_text;",
          "55:         $ret  = array();",
          "56:         $ret['nologin'] = true;",
          "58:         return $ret;",
          "59:     }",
          "",
          "[Removed Lines]",
          "53:     public function search($search_text) {",
          "57:         $ret['list'] = $this->_get_collection($search_text, $this->start, $this->max, $this->sort);",
          "",
          "[Added Lines]",
          "52:     public function search($search_text, $page) {",
          "53:         global $SESSION;",
          "54:         $sort = optional_param('youtube_sort', '', PARAM_TEXT);",
          "55:         $sess_keyword = 'youtube_'.$this->id.'_keyword';",
          "56:         $sess_sort = 'youtube_'.$this->id.'_sort';",
          "59:         if ($page && !$search_text && isset($SESSION->{$sess_keyword})) {",
          "60:             $search_text = $SESSION->{$sess_keyword};",
          "61:         }",
          "62:         if ($page && !$sort && isset($SESSION->{$sess_sort})) {",
          "63:             $sort = $SESSION->{$sess_sort};",
          "64:         }",
          "65:         if (!$sort) {",
          "66:             $sort = 'relevance'; // default",
          "67:         }",
          "70:         $SESSION->{$sess_keyword} = $search_text;",
          "71:         $SESSION->{$sess_sort} = $sort;",
          "76:         $ret['page'] = (int)$page;",
          "77:         if ($ret['page'] < 1) {",
          "78:             $ret['page'] = 1;",
          "79:         }",
          "80:         $start = ($ret['page'] - 1) * self::YOUTUBE_THUMBS_PER_PAGE + 1;",
          "81:         $max = self::YOUTUBE_THUMBS_PER_PAGE;",
          "82:         $ret['list'] = $this->_get_collection($search_text, $start, $max, $sort);",
          "83:         $ret['norefresh'] = true;",
          "84:         $ret['nosearch'] = true;",
          "85:         $ret['pages'] = -1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "142:         $ret['login'] = array($search, $sort);",
          "143:         $ret['login_btn_label'] = get_string('search');",
          "144:         $ret['login_btn_action'] = 'search';",
          "145:         return $ret;",
          "146:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "173:         $ret['allowcaching'] = true; // indicates that login form can be cached in filepicker.js",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e709ddd29ca87dec945a21f4d2a0cbd7efdcadbe",
      "candidate_info": {
        "commit_hash": "e709ddd29ca87dec945a21f4d2a0cbd7efdcadbe",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/e709ddd29ca87dec945a21f4d2a0cbd7efdcadbe",
        "files": [
          "files/renderer.php",
          "lang/en/moodle.php",
          "lib/filelib.php",
          "lib/form/filemanager.js",
          "lib/form/filemanager.php",
          "lib/outputrequirementslib.php",
          "repository/draftfiles_ajax.php",
          "repository/filepicker.js",
          "repository/lib.php",
          "repository/local/lib.php",
          "theme/base/style/filemanager.css"
        ],
        "message": "MDL-31901: Allow FileManager to re-use FilePicker JS code for view modes:\n\n- when loading core_filepicker we extend the Node element with functions necessary to display files list in different view modes;\n- repository/filepicker.js is changed to use those functions;\n- FileManager now has three different view modes (icon view, tree view and table view), JS code is re-used from FilePicker;\n- files in FileManager no longer have context menu, they have one popup Widget with different actions instead;\n- Added more templates for JS code to FileManager, use similar CSS class names as FilePicker;\n- lib/filelib.php : fixed double slashes in path, return more data about files;\n- lib/form/filemanager.php : pass information to FileManager about available licenses and default author;\n- repository/draftfiles_ajax.php : return information about directory tree for file moving UI in FileManager, return formatted information;\n- repository/lib.php : function repository::prepare_listing() now can work also with draftarea files listing;",
        "before_after_code_files": [
          "files/renderer.php||files/renderer.php",
          "lang/en/moodle.php||lang/en/moodle.php",
          "lib/filelib.php||lib/filelib.php",
          "lib/form/filemanager.js||lib/form/filemanager.js",
          "lib/form/filemanager.php||lib/form/filemanager.php",
          "lib/outputrequirementslib.php||lib/outputrequirementslib.php",
          "repository/draftfiles_ajax.php||repository/draftfiles_ajax.php",
          "repository/filepicker.js||repository/filepicker.js",
          "repository/lib.php||repository/lib.php",
          "repository/local/lib.php||repository/local/lib.php",
          "theme/base/style/filemanager.css||theme/base/style/filemanager.css"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/form/filemanager.js||lib/form/filemanager.js",
            "lib/outputrequirementslib.php||lib/outputrequirementslib.php",
            "repository/filepicker.js||repository/filepicker.js"
          ],
          "candidate": [
            "lib/form/filemanager.js||lib/form/filemanager.js",
            "lib/outputrequirementslib.php||lib/outputrequirementslib.php",
            "repository/filepicker.js||repository/filepicker.js"
          ]
        }
      },
      "candidate_diff": {
        "files/renderer.php||files/renderer.php": [
          "File: files/renderer.php -> files/renderer.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:         if (empty($filemanagertemplateloaded)) {",
          "117:             $filemanagertemplateloaded = true;",
          "118:             $this->page->requires->js_init_call('M.form_filemanager.set_templates',",
          "122:         }",
          "123:         $this->page->requires->js_init_call('M.form_filemanager.init', array($fm->options), true, $module);",
          "",
          "[Removed Lines]",
          "119:                     array(array(",
          "120:                         'onefile' => '___fullname___ ___action___'",
          "121:                     )), true, $module);",
          "",
          "[Added Lines]",
          "119:                     array($this->filemanager_js_templates()), true, $module);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "181:         $strdndenabledinbox = get_string('dndenabled_inbox', 'moodle');",
          "182:         $loading = get_string('loading', 'repository');",
          "188:     <div class=\"filemanager-toolbar\">",
          "194:     </div>",
          "195:     <div class=\"filemanager-container\" >",
          "199:         </div>",
          "203:     </div>",
          "204: </div>",
          "205: <div class=\"clearer\"></div>",
          "208:     }",
          "",
          "[Removed Lines]",
          "184:         $html .= <<<FMHTML",
          "185: <div id=\"filemanager-{$client_id}\" class=\"filemanager fm-loading\">",
          "186:     <div class=\"filemanager-loading mdl-align\">{$icon_progress}</div>",
          "187:     <div class=\"fm-breadcrumb\"></div>",
          "189:         <input type=\"button\" class=\"fm-btn-add\" value=\"{$straddfile}\" />",
          "190:         <input type=\"button\" class=\"fm-btn-mkdir\" value=\"{$strmakedir}\" />",
          "191:         <input type=\"button\" class=\"fm-btn-download\" value=\"{$strdownload}\" />",
          "192:         {$restrictions}",
          "193:         <span class=\"dndupload-message\"> - $strdndenabled </span>",
          "196:         <ul class=\"fm-filelist\"></ul>",
          "197:         <div class=\"fm-empty-container mdl-align\">{$strnofilesattached}",
          "198:             <span class=\"dndupload-message\">{$strdndenabledinbox}</span>",
          "200:         <div class=\"dndupload-target\">{$strdroptoupload}</div>",
          "201:         <div class=\"dndupload-uploadinprogress\">{$icon_progress}</div>",
          "202:         <div class=\"filemanager-updating\">{$icon_progress}</div>",
          "206: FMHTML;",
          "207:         return $html;",
          "",
          "[Added Lines]",
          "192:         $html = '",
          "193: <div id=\"filemanager-'.$client_id.'\" class=\"filemanager fm-loading\">",
          "194:     <div class=\"filemanager-loading mdl-align\">'.$icon_progress.'</div>",
          "195:     <div class=\"fp-pathbar\">",
          "196:         <span class=\"{!}fp-path-folder\"><a class=\"{!}fp-path-folder-name\"></a><span>/</span></span>",
          "197:     </div>",
          "199:         <input type=\"button\" class=\"{!}fp-btn-add\" value=\"'.$straddfile.'\" />",
          "200:         <input type=\"button\" class=\"{!}fp-btn-mkdir\" value=\"'.$strmakedir.'\" />",
          "201:         <input type=\"button\" class=\"{!}fp-btn-download\" value=\"'.$strdownload.'\" />",
          "202:         '.$restrictions.'",
          "203:         <span class=\"dndupload-message\"> - '.$strdndenabled.' </span>",
          "204:         <div class=\"{!}fp-viewbar\" style=\"float:none;\">",
          "205:            <span class=\"\"><button class=\"{!}fp-vb-icons\">'.get_string('iconview', 'repository').'</button></span>",
          "206:            <span class=\"\"><button class=\"{!}fp-vb-tree\">'.get_string('listview', 'repository').'</button></span>",
          "207:            <span class=\"\"><button class=\"{!}fp-vb-details\">'.get_string('detailview', 'repository').'</button></span>",
          "208:         </div>",
          "211:         <div class=\"fm-content-wrapper\">",
          "212:             <ul class=\"fp-content\"></ul>",
          "213:             <div class=\"fm-empty-container mdl-align\">'.$strnofilesattached.'",
          "214:                 <span class=\"dndupload-message\">'.$strdndenabledinbox.'</span>",
          "215:             </div>",
          "216:             <div class=\"dndupload-target\">'.$strdroptoupload.'</div>",
          "217:             <div class=\"dndupload-uploadinprogress\">'.$icon_progress.'</div>",
          "219:         <div class=\"filemanager-updating\">'.$icon_progress.'</div>",
          "223: ';",
          "224:         return preg_replace('/\\{\\!\\}/', '', $html);",
          "225:     }",
          "233:     private function fm_js_template_iconfilename() {",
          "234:         return $this->fp_js_template_iconfilename();",
          "235:     }",
          "243:     private function fm_js_template_listfilename() {",
          "244:         return $this->fp_js_template_listfilename();",
          "245:     }",
          "280:     private function fm_js_template_fileselectlayout() {",
          "281:         $rv = '<div class=\"{!}fp-select\">",
          "282: <div class=\"fp-select-loading\">",
          "283: <img src=\"'.$this->pix_url('i/loading').'\" />",
          "284: <p>'.get_string('loading', 'repository').'</p>",
          "285: </div>",
          "286: <form>",
          "287: <p class=\"{!}fp-thumbnail\"></p>",
          "288: <table width=\"100%\">",
          "289: <tr class=\"{!}fp-saveas\"><td class=\"mdl-right\"><label>'.get_string('name', 'moodle').'</label>:</td>",
          "290: <td class=\"mdl-left\"><input type=\"text\"/></td></tr>",
          "291: <tr class=\"{!}fp-author\"><td class=\"mdl-right\"><label>'.get_string('author', 'repository').'</label>:</td>",
          "292: <td class=\"mdl-left\"><input type=\"text\" /></td></tr>",
          "293: <tr class=\"{!}fp-license\"><td class=\"mdl-right\"><label>'.get_string('chooselicense', 'repository').'</label>:</td>",
          "294: <td class=\"mdl-left\"><select></select></td></tr>",
          "295: <tr class=\"{!}fp-path\"><td class=\"mdl-right\"><label>'.get_string('path', 'moodle').'</label>:</td>",
          "296: <td class=\"mdl-left\"><select></select></td></tr>",
          "297: <tr class=\"{!}fp-origpath\"><td class=\"mdl-right\"><label>'.get_string('originalpath', 'moodle').'</label>:</td>",
          "298: <td class=\"mdl-left\"><span class=\"fp-value\"/></td></tr>",
          "299: </table>",
          "300: <p><button class=\"{!}fp-file-update\" >'.get_string('update', 'moodle').'</button>",
          "301: <button class=\"{!}fp-file-download\" >'.get_string('download').'</button>",
          "302: <button class=\"{!}fp-file-delete\" >'.get_string('delete').'</button>",
          "303: <button class=\"{!}fp-file-zip\" >'.get_string('zip', 'editor').'</button>",
          "304: <button class=\"{!}fp-file-unzip\" >'.get_string('unzip').'</button>",
          "305: <button class=\"{!}fp-file-setmain\" >'.get_string('setmainfile', 'repository').'</button>",
          "306: <button class=\"{!}fp-file-cancel\" >'.get_string('cancel').'</button>",
          "307: </p>",
          "308: </form>",
          "309: <div class=\"{!}fp-datemodified\">'.get_string('lastmodified', 'moodle').': <span class=\"fp-value\"/></div>",
          "310: <div class=\"{!}fp-datecreated\">'.get_string('datecreated', 'repository').': <span class=\"fp-value\"/></div>",
          "311: <div class=\"{!}fp-size\">'.get_string('size', 'repository').': <span class=\"fp-value\"/></div>",
          "312: <div class=\"{!}fp-dimensions\">'.get_string('dimensions', 'repository').': <span class=\"fp-value\"/></div>",
          "313: </div>';",
          "314:         return preg_replace('/\\{\\!\\}/', '', $rv);",
          "315:     }",
          "322:     public function filemanager_js_templates() {",
          "323:         $class_methods = get_class_methods($this);",
          "324:         $templates = array();",
          "325:         foreach ($class_methods as $method_name) {",
          "326:             if (preg_match('/^fm_js_template_(.*)$/', $method_name, $matches))",
          "327:             $templates[$matches[1]] = $this->$method_name();",
          "328:         }",
          "329:         return $templates;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "331:     <div class=\"{!}fp-thumbnail\"></div>",
          "332:     <div class=\"{!}fp-filename\"></div>",
          "335:         return preg_replace('/\\{\\!\\}/', '', $rv);",
          "336:     }",
          "",
          "[Removed Lines]",
          "328:     private function fp_js_template_iconview() {",
          "329:         $rv = '<div class=\"fp-iconview\">",
          "330: <div class=\"{!}fp-file\">",
          "333: </div>",
          "334:             </div>';",
          "",
          "[Added Lines]",
          "451:     private function fp_js_template_iconfilename() {",
          "452:         $rv = '<div class=\"fp-file\">",
          "455: </div>';",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "352:     private function fp_js_template_listfilename() {",
          "354:         return preg_replace('/\\{\\!\\}/', '', $rv);",
          "355:     }",
          "",
          "[Removed Lines]",
          "353:         $rv = '<span class=\"{!}fp-icon\"></span> <span class=\"{!}fp-filename\"></span>';",
          "",
          "[Added Lines]",
          "476:         $rv = '<span><span class=\"{!}fp-icon\"></span> <span class=\"{!}fp-filename\"></span></span>';",
          "",
          "---------------"
        ],
        "lang/en/moodle.php||lang/en/moodle.php": [
          "File: lang/en/moodle.php -> lang/en/moodle.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1242: $string['opentoguests'] = 'Guest access';",
          "1243: $string['optional'] = 'optional';",
          "1244: $string['order'] = 'Order';",
          "1245: $string['orphanedactivities'] = 'Orphaned activities';",
          "1246: $string['other'] = 'Other';",
          "1247: $string['outline'] = 'Outline';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1245: $string['originalpath'] = 'Original path';",
          "",
          "---------------"
        ],
        "lib/filelib.php||lib/filelib.php": [
          "File: lib/filelib.php -> lib/filelib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "566:     $data->path[] = array('name'=>get_string('files'), 'path'=>'/');",
          "570:     if ($filepath !== '/') {",
          "571:         $filepath = file_correct_filepath($filepath);",
          "572:         $parts = explode('/', $filepath);",
          "573:         foreach ($parts as $part) {",
          "574:             if ($part != '' && $part != null) {",
          "576:                 $data->path[] = array('name'=>$part, 'path'=>$trail);",
          "577:             }",
          "578:         }",
          "",
          "[Removed Lines]",
          "569:     $trail = '';",
          "575:                 $trail .= ('/'.$part.'/');",
          "",
          "[Added Lines]",
          "569:     $trail = '/';",
          "575:                 $trail .= ($part.'/');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "587:             $item->filepath = $file->get_filepath();",
          "588:             $item->fullname = trim($item->filename, '/');",
          "589:             $filesize = $file->get_filesize();",
          "590:             $item->filesize = $filesize ? display_size($filesize) : '';",
          "592:             $icon = mimeinfo_from_type('icon', $file->get_mimetype());",
          "593:             $item->icon = $OUTPUT->pix_url('f/' . $icon)->out();",
          "594:             $item->sortorder = $file->get_sortorder();",
          "596:             if ($icon == 'zip') {",
          "597:                 $item->type = 'zip';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "590:             $item->size = $filesize ? $filesize : null;",
          "596:             $item->author = $file->get_author();",
          "597:             $item->license = $file->get_license();",
          "598:             $item->datemodified = $file->get_timemodified();",
          "599:             $item->datecreated = $file->get_timecreated();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "605:                 $item->type = 'folder';",
          "606:                 $foldername = explode('/', trim($item->filepath, '/'));",
          "607:                 $item->fullname = trim(array_pop($foldername), '/');",
          "608:             } else {",
          "610:                 $item->url = moodle_url::make_draftfile_url($draftitemid, $item->filepath, $item->filename)->out();",
          "611:             }",
          "612:             $list[] = $item;",
          "613:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "613:                 $item->thumbnail = $OUTPUT->pix_url('f/folder-32')->out(false);",
          "617:                 $item->thumbnail = $OUTPUT->pix_url(file_extension_icon($item->filename, 32))->out(false);",
          "",
          "---------------"
        ],
        "lib/form/filemanager.js||lib/form/filemanager.js": [
          "File: lib/form/filemanager.js -> lib/form/filemanager.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:                     this.dndcontainer.generateID();",
          "90:                 }",
          "91:             }",
          "92:             this.setup_buttons();",
          "93:             this.refresh(this.currentpath); // MDL-31113 get latest list from server",
          "94:         },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94:             if (this.filemanager.one('.fp-path-folder')) {",
          "95:                 this.pathnode = this.filemanager.one('.fp-path-folder');",
          "96:                 this.pathbar = this.pathnode.get('parentNode');",
          "97:                 this.pathbar.removeChild(this.pathnode);",
          "98:             }",
          "100:             var fpselectnode = Y.Node.create(M.form_filemanager.templates.fileselectlayout);",
          "101:             this.filemanager.appendChild(fpselectnode);",
          "102:             this.selectui = new Y.Panel({",
          "103:                 srcNode      : fpselectnode,",
          "104:                 zIndex       : 600000,",
          "105:                 centered     : true,",
          "106:                 modal        : true,",
          "107:                 close        : true,",
          "108:                 render       : true",
          "109:             });",
          "110:             this.selectui.hide();",
          "111:             this.setup_select_file();",
          "115:             this.viewmode = 1; // TODO take from cookies?",
          "116:             this.filemanager.all('.fp-vb-icons,.fp-vb-tree,.fp-vb-details').removeClass('checked')",
          "117:             this.filemanager.all('.fp-vb-icons').addClass('checked')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:                             alert('IO FATAL');",
          "121:                             return;",
          "122:                         }",
          "124:                         args.callback(id,data,p);",
          "125:                     }",
          "126:                 },",
          "",
          "[Removed Lines]",
          "123:                         var data = Y.JSON.parse(o.responseText);",
          "",
          "[Added Lines]",
          "148:                         var data = null;",
          "149:                         try {",
          "150:                             data = Y.JSON.parse(o.responseText);",
          "151:                         } catch(e) {",
          "155:                             return;",
          "156:                         }",
          "157:                         if (data && data.tree && scope.set_current_tree) {",
          "158:                             scope.set_current_tree(data.tree);",
          "159:                         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "177:             }, true);",
          "178:         },",
          "179:         setup_buttons: function() {",
          "",
          "[Removed Lines]",
          "180:             var button_download = this.filemanager.one('.fm-btn-download');",
          "181:             var button_create   = this.filemanager.one('.fm-btn-mkdir');",
          "182:             var button_addfile  = this.filemanager.one('.fm-btn-add');",
          "",
          "[Added Lines]",
          "216:             var button_download = this.filemanager.one('.fp-btn-download');",
          "217:             var button_create   = this.filemanager.one('.fp-btn-mkdir');",
          "218:             var button_addfile  = this.filemanager.one('.fp-btn-add');",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "263:                     }",
          "264:                 });",
          "265:             }, this);",
          "266:         },",
          "282:                     } else {",
          "284:                     }",
          "314:                 }",
          "337:             this.filemanager.removeClass('fm-updating').removeClass('fm-noitems');",
          "339:                 this.filemanager.addClass('fm-noitems');",
          "340:                 return;",
          "341:             }",
          "399:                 }",
          "403:             }",
          "418:         },",
          "449:             }",
          "454:             }",
          "459:             }",
          "461:         },",
          "469:                 var params = {};",
          "472:                 this.request({",
          "475:                     params: params,",
          "476:                     callback: function(id, obj, args) {",
          "478:                     }",
          "479:                 });",
          "480:             }",
          "493:                 var params = {};",
          "494:                 params['filepath'] = fileinfo.filepath;",
          "495:                 params['filename'] = fileinfo.fullname;",
          "496:                 this.request({",
          "499:                     params: params,",
          "500:                     callback: function(id, obj, args) {",
          "521:                     }",
          "522:                 });",
          "523:             }",
          "530:         },",
          "535:                 var dialog_options = {};",
          "536:                 var params = {};",
          "537:                 dialog_options.message = M.str.repository.confirmdeletefile;",
          "538:                 dialog_options.scope = this;",
          "542:                     params.filename = '.';",
          "544:                 } else {",
          "546:                 }",
          "547:                 dialog_options.callbackargs = [params];",
          "548:                 dialog_options.callback = function(params) {",
          "549:                     this.request({",
          "550:                         action: 'delete',",
          "551:                         scope: this,",
          "552:                         params: params,",
          "553:                         callback: function(id, obj, args) {",
          "556:                             if (typeof M.core_formchangechecker != 'undefined') {",
          "557:                                 M.core_formchangechecker.set_form_changed();",
          "558:                             }",
          "559:                         }",
          "560:                     });",
          "561:                 };",
          "584:                     }",
          "653:                     }",
          "659:                     }",
          "692:                 });",
          "728:             }",
          "742:             });",
          "744:         }",
          "745:     });",
          "",
          "[Removed Lines]",
          "267:         render: function() {",
          "268:             var options = this.options;",
          "269:             var path = this.options.path;",
          "270:             var list = this.options.list;",
          "271:             var breadcrumb = this.filemanager.one('.fm-breadcrumb');",
          "273:             breadcrumb.set('innerHTML', '').addClass('fm-empty');",
          "275:             if (path && path.length) {",
          "276:                 breadcrumb.removeClass('fm-empty');",
          "277:                 var count = 0;",
          "278:                 for(var p in path) {",
          "279:                     var arrow = '';",
          "280:                     if (count==0) {",
          "281:                         arrow = Y.Node.create('<span>'+M.str.moodle.path + ': </span>');",
          "283:                         arrow = Y.Node.create('<span> \u25b6 </span>');",
          "285:                     count++;",
          "287:                     var pathid  = 'fm-path-node-'+this.client_id;",
          "288:                     pathid += ('-'+count);",
          "290:                     var crumb = Y.Node.create('<a href=\"###\" id=\"'+pathid+'\">'+path[p].name+'</a>');",
          "291:                     breadcrumb.appendChild(arrow);",
          "292:                     breadcrumb.appendChild(crumb);",
          "294:                     var args = {};",
          "295:                     args.requestpath = path[p].path;",
          "296:                     args.client_id = this.client_id;",
          "297:                     Y.one('#'+pathid).on('click', function(e, args) {",
          "298:                         var scope = this;",
          "299:                         var params = {};",
          "300:                         params['filepath'] = args.requestpath;",
          "301:                         this.currentpath = args.requestpath;",
          "302:                         this.request({",
          "303:                             action: 'list',",
          "304:                             scope: scope,",
          "305:                             params: params,",
          "306:                             callback: function(id, obj, args) {",
          "307:                                 scope.filecount = obj.filecount;",
          "308:                                 scope.check_buttons();",
          "309:                                 scope.options = obj;",
          "310:                                 scope.render(obj);",
          "311:                             }",
          "312:                         }, true);",
          "313:                     }, this, args);",
          "315:             }",
          "316:             var listhtml = '';",
          "319:             var folder_ids = [];",
          "320:             var folder_data = {};",
          "323:             var file_ids   = [];",
          "324:             var file_data  = {};",
          "327:             var zip_ids    = [];",
          "328:             var zip_data = {};",
          "330:             var html_ids = [];",
          "331:             var html_data = {};",
          "333:             file_data.itemid = folder_data.itemid = zip_data.itemid = options.itemid;",
          "334:             file_data.client_id = folder_data.client_id = zip_data.client_id = this.client_id;",
          "336:             var foldername_ids = [];",
          "338:             if (!list || list.length == 0) {",
          "343:             var count = 0;",
          "344:             for(var i in list) {",
          "345:                 count++;",
          "347:                 var htmlid = 'fileitem-'+this.client_id+'-'+count;",
          "349:                 var fileid = 'filename-'+this.client_id+'-'+count;",
          "351:                 var action = 'action-'  +this.client_id+'-'+count;",
          "353:                 var html = M.form_filemanager.templates.onefile;",
          "355:                 html_ids.push('#'+htmlid);",
          "356:                 html_data[htmlid] = action;",
          "358:                 list[i].htmlid = htmlid;",
          "359:                 list[i].fileid = fileid;",
          "360:                 list[i].action = action;",
          "362:                 var url = \"###\";",
          "364:                 switch (list[i].type) {",
          "365:                     case 'folder':",
          "367:                         foldername_ids.push('#'+fileid);",
          "369:                         folder_ids.push('#'+action);",
          "370:                         folder_data[action] = list[i];",
          "371:                         folder_data[fileid] = list[i];",
          "372:                         break;",
          "373:                     case 'file':",
          "374:                         file_ids.push('#'+action);",
          "376:                         file_ids.push('#'+fileid);",
          "377:                         file_data[action] = list[i];",
          "378:                         file_data[fileid] = list[i];",
          "379:                         if (list[i].url) {",
          "380:                             url = list[i].url;",
          "381:                         }",
          "382:                     break;",
          "383:                     case 'zip':",
          "384:                         zip_ids.push('#'+action);",
          "385:                         zip_ids.push('#'+fileid);",
          "386:                         zip_data[action] = list[i];",
          "387:                         zip_data[fileid] = list[i];",
          "388:                         if (list[i].url) {",
          "389:                             url = list[i].url;",
          "390:                         }",
          "391:                     break;",
          "392:                 }",
          "393:                 var fullname = list[i].fullname;",
          "395:                 if (list[i].sortorder == 1) {",
          "396:                     html = html.replace('___fullname___', '<strong><a title=\"'+fullname+'\" href=\"'+url+'\" id=\"'+fileid+'\"><img src=\"'+list[i].icon+'\" /> ' + fullname + '</a></strong>');",
          "397:                 } else {",
          "398:                     html = html.replace('___fullname___', '<a title=\"'+fullname+'\" href=\"'+url+'\" id=\"'+fileid+'\"><img src=\"'+list[i].icon+'\" /> ' + fullname + '</a>');",
          "400:                 html = html.replace('___action___', '<span class=\"fm-menuicon\" id=\"'+action+'\"><img alt=\"\u25b6\" src=\"'+M.util.image_url('i/menu')+'\" /></span>');",
          "401:                 html = '<li id=\"'+htmlid+'\">'+html+'</li>';",
          "402:                 listhtml += html;",
          "404:             this.filemanager.one('.fm-filelist').set('innerHTML', listhtml);",
          "407:             Y.on('click', this.create_filemenu, file_ids, this, file_data);",
          "408:             Y.on('contextmenu', this.create_filemenu, file_ids, this, file_data);",
          "410:             Y.on('click', this.create_foldermenu, folder_ids, this, folder_data);",
          "411:             Y.on('contextmenu', this.create_foldermenu, folder_ids, this, folder_data);",
          "412:             Y.on('contextmenu', this.create_foldermenu, foldername_ids, this, folder_data);",
          "414:             Y.on('click', this.create_zipmenu, zip_ids, this, zip_data);",
          "415:             Y.on('contextmenu', this.create_zipmenu, zip_ids, this, zip_data);",
          "417:             Y.on('click', this.enter_folder, foldername_ids, this, folder_data);",
          "419:         enter_folder: function(e, data) {",
          "420:             var node = e.currentTarget;",
          "421:             var file = data[node.get('id')];",
          "422:             e.preventDefault();",
          "423:             this.refresh(file.filepath);",
          "424:         },",
          "425:         create_filemenu: function(e, data) {",
          "426:             e.preventDefault();",
          "427:             var options = this.options;",
          "428:             var node = e.currentTarget;",
          "429:             var file = data[node.get('id')];",
          "430:             var scope = this;",
          "432:             var menuitems = [",
          "433:                 {text: M.str.moodle.download, onclick:{fn:open_file_in_new_window, obj:file, scope:this}}",
          "434:                 ];",
          "435:             function setmainfile(type, ev, obj) {",
          "436:                 var file = obj[node.get('id')];",
          "438:                 var params = {};",
          "439:                 params['filepath']   = file.filepath;",
          "440:                 params['filename']   = file.filename;",
          "441:                 this.request({",
          "442:                     action: 'setmainfile',",
          "443:                     scope: scope,",
          "444:                     params: params,",
          "445:                     callback: function(id, obj, args) {",
          "446:                         scope.refresh(scope.currentpath);",
          "447:                     }",
          "448:                 });",
          "450:             function open_file_in_new_window(type, ev, obj) {",
          "453:                 window.open(obj.url, 'fm-download-file');",
          "455:             if (this.enablemainfile && (file.sortorder != 1)) {",
          "456:                 var mainid = '#id_'+this.enablemainfile;",
          "457:                 var menu = {text: M.str.repository.setmainfile, onclick:{fn: setmainfile, obj:data, scope:this}};",
          "458:                 menuitems.push(menu);",
          "460:             this.create_menu(e, 'filemenu', menuitems, file, data);",
          "462:         create_foldermenu: function(e, data) {",
          "463:             e.preventDefault();",
          "464:             var scope = this;",
          "465:             var node = e.currentTarget;",
          "466:             var fileinfo = data[node.get('id')];",
          "468:             function archive_folder(type,ev,obj) {",
          "470:                 params['filepath']   = fileinfo.filepath;",
          "471:                 params['filename']   = '.';",
          "473:                     action: 'zip',",
          "474:                     scope: scope,",
          "477:                         scope.refresh(obj.filepath);",
          "481:             var menuitems = [",
          "482:                 {text: M.str.editor.zip, onclick: {fn: archive_folder, obj: data, scope: this}},",
          "483:                 ];",
          "484:             this.create_menu(e, 'foldermenu', menuitems, fileinfo, data);",
          "485:         },",
          "486:         create_zipmenu: function(e, data) {",
          "487:             e.preventDefault();",
          "488:             var scope = this;",
          "489:             var node = e.currentTarget;",
          "490:             var fileinfo = data[node.get('id')];",
          "492:             function unzip(type, ev, obj) {",
          "497:                     action: 'unzip',",
          "498:                     scope: scope,",
          "501:                         scope.refresh(obj.filepath);",
          "502:                     }",
          "503:                 });",
          "504:             }",
          "505:             var menuitems = [",
          "506:                 {text: M.str.moodle.download, url:fileinfo.url},",
          "507:                 {text: M.str.moodle.unzip, onclick: {fn: unzip, obj: data, scope: this}}",
          "508:                 ];",
          "509:             function setmainfile(type, ev, obj) {",
          "510:                 var file = obj[node.get('id')];",
          "512:                 var params = {};",
          "513:                 params['filepath']   = file.filepath;",
          "514:                 params['filename']   = file.filename;",
          "515:                 this.request({",
          "516:                     action: 'setmainfile',",
          "517:                     scope: scope,",
          "518:                     params: params,",
          "519:                     callback: function(id, obj, args) {",
          "520:                         scope.refresh(scope.currentpath);",
          "524:             if (this.enablemainfile && (fileinfo.sortorder != 1)) {",
          "525:                 var mainid = '#id_'+this.enablemainfile;",
          "526:                 var menu = {text: M.str.repository.setmainfile, onclick:{fn: setmainfile, obj:data, scope:this}};",
          "527:                 menuitems.push(menu);",
          "528:             }",
          "529:             this.create_menu(e, 'zipmenu', menuitems, fileinfo, data);",
          "531:         create_menu: function(ev, menuid, menuitems, fileinfo, options) {",
          "532:             var position = [ev.pageX, ev.pageY];",
          "533:             var scope = this;",
          "534:             function remove(type, ev, obj) {",
          "539:                 var filename = '';",
          "540:                 var filepath = '';",
          "541:                 if (fileinfo.type == 'folder') {",
          "543:                     params.filepath = fileinfo.filepath;",
          "545:                     params.filename = fileinfo.fullname;",
          "554:                             scope.filecount--;",
          "555:                             scope.refresh(obj.filepath);",
          "562:                 M.util.show_confirm_dialog(ev, dialog_options);",
          "563:             }",
          "564:             function rename (type, ev, obj) {",
          "565:                 var scope = this;",
          "566:                 var perform = function(e) {",
          "567:                     var newfilename = Y.one('#fm-rename-input').get('value');",
          "568:                     if (!newfilename) {",
          "569:                         return;",
          "570:                     }",
          "572:                     var action = '';",
          "573:                     var params = {};",
          "574:                     if (fileinfo.type == 'folder') {",
          "575:                         params['filepath']   = fileinfo.filepath;",
          "576:                         params['filename']   = '.';",
          "577:                         params['newdirname'] = newfilename;",
          "578:                         action = 'renamedir';",
          "579:                     } else {",
          "580:                         params['filepath']   = fileinfo.filepath;",
          "581:                         params['filename']   = fileinfo.fullname;",
          "582:                         params['newfilename'] = newfilename;",
          "583:                         action = 'rename';",
          "585:                     scope.request({",
          "586:                         action: action,",
          "587:                         scope: scope,",
          "588:                         params: params,",
          "589:                         callback: function(id, obj, args) {",
          "590:                             if (obj == false) {",
          "591:                                 alert(M.str.repository.fileexists);",
          "592:                             } else {",
          "593:                                 scope.refresh(obj.filepath);",
          "594:                                 if (typeof M.core_formchangechecker != 'undefined') {",
          "595:                                     M.core_formchangechecker.set_form_changed();",
          "596:                                 }",
          "597:                             }",
          "598:                             Y.one('#fm-rename-input').set('value', '');",
          "599:                             scope.rename_dialog.hide();",
          "600:                         }",
          "601:                     });",
          "602:                 };",
          "604:                 var dialog = Y.one('#fm-rename-dlg');",
          "605:                 if (!dialog) {",
          "606:                     dialog = Y.Node.create('<div id=\"fm-rename-dlg\"><div class=\"hd\">'+M.str.repository.enternewname+'</div><div class=\"bd\"><input type=\"text\" id=\"fm-rename-input\" /></div></div>');",
          "607:                     Y.one(document.body).appendChild(dialog);",
          "608:                     this.rename_dialog = new YAHOO.widget.Dialog(\"fm-rename-dlg\", {",
          "609:                          width: \"300px\",",
          "610:                          fixedcenter: true,",
          "611:                          visible: true,",
          "612:                          constraintoviewport : true",
          "613:                          });",
          "615:                 }",
          "616:                 var buttons = [ { text:M.str.moodle.rename, handler:perform, isDefault:true},",
          "617:                                   { text:M.str.moodle.cancel, handler:function(){this.cancel();}}];",
          "619:                 this.rename_dialog.cfg.queueProperty('buttons', buttons);",
          "620:                 this.rename_dialog.render();",
          "621:                 this.rename_dialog.show();",
          "624:                 Y.one('#fm-rename-input').set('value', fileinfo.fullname);",
          "625:             }",
          "626:             function move(type, ev, obj) {",
          "627:                 var scope = this;",
          "628:                 var itemid = this.options.itemid;",
          "630:                 var dialog = null;",
          "631:                 if (!Y.one('#fm-move-dlg')) {",
          "632:                     dialog = Y.Node.create('<div id=\"fm-move-dlg\"></div>');",
          "633:                     Y.one(document.body).appendChild(dialog);",
          "634:                 } else {",
          "635:                     dialog = Y.one('#fm-move-dlg');",
          "636:                 }",
          "638:                 dialog.set('innerHTML', '<div class=\"hd\">'+M.str.repository.moving+'</div><div class=\"bd\"><div id=\"fm-move-div\">'+M.str.repository.nopathselected+'</div><div id=\"fm-tree\"></div></div>');",
          "640:                 this.movefile_dialog = new YAHOO.widget.Dialog(\"fm-move-dlg\", {",
          "641:                      width : \"600px\",",
          "642:                      fixedcenter : true,",
          "643:                      visible : false,",
          "644:                      constraintoviewport : true",
          "645:                      });",
          "647:                 var treeview = new YAHOO.widget.TreeView(\"fm-tree\");",
          "649:                 var dialog = this.movefile_dialog;",
          "650:                 function _move(e) {",
          "651:                     if (!treeview.targetpath) {",
          "652:                         return;",
          "654:                     var params = {};",
          "655:                     if (fileinfo.type == 'folder') {",
          "656:                         action = 'movedir';",
          "657:                     } else {",
          "658:                         action = 'movefile';",
          "660:                     params['filepath'] = fileinfo.filepath;",
          "661:                     params['filename'] = fileinfo.fullname;",
          "662:                     params['newfilepath'] = treeview.targetpath;",
          "663:                     scope.request({",
          "664:                         action: action,",
          "665:                         scope: scope,",
          "666:                         params: params,",
          "667:                         callback: function(id, obj, args) {",
          "668:                             var p = '/';",
          "669:                             if (obj) {",
          "670:                                 p = obj.filepath;",
          "671:                             }",
          "672:                             dialog.cancel();",
          "673:                             scope.refresh(p);",
          "674:                             if (typeof M.core_formchangechecker != 'undefined') {",
          "675:                                 M.core_formchangechecker.set_form_changed();",
          "676:                             }",
          "677:                         }",
          "678:                     });",
          "679:                 }",
          "681:                 var buttons = [ { text:M.str.moodle.move, handler:_move, isDefault:true },",
          "682:                                   { text:M.str.moodle.cancel, handler:function(){this.cancel();}}];",
          "684:                 this.movefile_dialog.cfg.queueProperty(\"buttons\", buttons);",
          "685:                 this.movefile_dialog.render();",
          "687:                 treeview.subscribe(\"dblClickEvent\", function(e) {",
          "689:                     this.targetpath = e.node.data.path;",
          "690:                     var title = Y.one('#fm-move-div');",
          "691:                     title.set('innerHTML', '<strong>\"' + this.targetpath + '\"</strong> has been selected.');",
          "694:                 function loadDataForNode(node, onCompleteCallback) {",
          "695:                     var params = {};",
          "696:                     params['filepath'] = node.data.path;",
          "697:                     var obj = {",
          "698:                         action: 'dir',",
          "699:                         scope: scope,",
          "700:                         params: params,",
          "701:                         callback: function(id, obj, args) {",
          "702:                             data = obj.children;",
          "703:                             if (data.length == 0) {",
          "705:                             } else {",
          "706:                                 for (var i in data) {",
          "707:                                     var textnode = {label: data[i].fullname, path: data[i].filepath, itemid: this.itemid};",
          "708:                                     var tmpNode = new YAHOO.widget.TextNode(textnode, node, false);",
          "709:                                 }",
          "710:                             }",
          "711:                             this.oncomplete();",
          "712:                         }",
          "713:                     };",
          "714:                     obj.oncomplete = onCompleteCallback;",
          "715:                     scope.request(obj);",
          "716:                 }",
          "718:                 this.movefile_dialog.subscribe('show', function(){",
          "719:                     var rootNode = treeview.getRoot();",
          "720:                     treeview.setDynamicLoad(loadDataForNode);",
          "721:                     treeview.removeChildren(rootNode);",
          "722:                     var textnode = {label: M.str.moodle.files, path: '/'};",
          "723:                     var tmpNode = new YAHOO.widget.TextNode(textnode, rootNode, true);",
          "724:                     treeview.draw();",
          "725:                 }, this, true);",
          "727:                 this.movefile_dialog.show();",
          "729:             var shared_items = [",
          "730:                 {text: M.str.moodle.rename+'...', onclick: {fn: rename, obj: options, scope: this}},",
          "731:                 {text: M.str.moodle.move+'...', onclick: {fn: move, obj: options, scope: this}}",
          "732:             ];",
          "734:             shared_items.push({text: M.str.moodle['delete']+'...', onclick: {fn: remove, obj: options, scope: this}});",
          "735:             var menu = new YAHOO.widget.Menu(menuid, {xy:position, clicktohide:true});",
          "736:             menu.clearContent();",
          "737:             menu.addItems(menuitems);",
          "738:             menu.addItems(shared_items);",
          "739:             menu.render(document.body);",
          "740:             menu.subscribe('hide', function(){",
          "741:                 this.fireEvent('destroy');",
          "743:             menu.show();",
          "",
          "[Added Lines]",
          "303:             this.filemanager.all('.fp-vb-icons,.fp-vb-tree,.fp-vb-details').",
          "304:                 on('click', function(e) {",
          "305:                     e.preventDefault();",
          "306:                     var viewbar = this.filemanager.one('.fp-viewbar')",
          "307:                     if (!viewbar || !viewbar.hasClass('disabled')) {",
          "308:                         this.filemanager.all('.fp-vb-icons,.fp-vb-tree,.fp-vb-details').removeClass('checked')",
          "309:                         if (e.currentTarget.hasClass('fp-vb-tree')) {",
          "310:                             this.viewmode = 2;",
          "311:                         } else if (e.currentTarget.hasClass('fp-vb-details')) {",
          "312:                             this.viewmode = 3;",
          "313:                         } else {",
          "314:                             this.viewmode = 1;",
          "315:                         }",
          "316:                         e.currentTarget.addClass('checked')",
          "317:                         this.render();",
          "319:                     }",
          "320:                 }, this);",
          "322:         print_path: function() {",
          "323:             var p = this.options.path;",
          "324:             this.pathbar.setContent('').addClass('empty');",
          "325:             if (p && p.length!=0 && this.viewmode != 2) {",
          "326:                 for(var i = 0; i < p.length; i++) {",
          "327:                     var el = this.pathnode.cloneNode(true);",
          "328:                     this.pathbar.appendChild(el);",
          "329:                     if (i == 0) {el.addClass('first');}",
          "330:                     if (i == p.length-1) {el.addClass('last');}",
          "331:                     if (i%2) {el.addClass('even');} else {el.addClass('odd');}",
          "332:                     el.one('.fp-path-folder-name').setContent(p[i].name).",
          "333:                         on('click', function(e, path) {",
          "334:                             e.preventDefault();",
          "335:                             var scope = this;",
          "336:                             this.currentpath = path;",
          "337:                             this.request({",
          "338:                                 action: 'list',",
          "339:                                 scope: scope,",
          "340:                                 params: {filepath:path},",
          "341:                                 callback: function(id, obj, args) {",
          "342:                                     scope.filecount = obj.filecount;",
          "343:                                     scope.check_buttons();",
          "344:                                     scope.options = obj;",
          "345:                                     scope.render(obj);",
          "346:                                 }",
          "347:                             }, true);",
          "348:                         }, this, p[i].path);",
          "349:                 }",
          "350:                 this.pathbar.removeClass('empty');",
          "351:             }",
          "352:         },",
          "353:         get_filepath: function(obj) {",
          "354:             if (obj.path && obj.path.length) {",
          "355:                 return obj.path[obj.path.length-1].path;",
          "356:             }",
          "357:             return '';",
          "358:         },",
          "359:         treeview_dynload: function(node, cb) {",
          "360:             var retrieved_children = {};",
          "361:             if (node.children) {",
          "362:                 for (var i in node.children) {",
          "363:                     retrieved_children[node.children[i].path] = node.children[i];",
          "364:                 }",
          "365:             }",
          "366:             this.request({",
          "367:                 action:'list',",
          "368:                 params: {filepath:node.path?node.path:''},",
          "369:                 scope:this,",
          "370:                 callback: function(id, obj, args) {",
          "371:                     var list = obj.list;",
          "372:                     var scope = args.scope;",
          "374:                     if (!(scope.viewmode == 2 && node && node.getChildrenEl())) {",
          "375:                         return;",
          "376:                     }",
          "377:                     if (cb != null) { // (in manual mode do not update current path)",
          "378:                         scope.options = obj;",
          "379:                     }",
          "380:                     node.highlight(false);",
          "381:                     node.origlist = obj.list?obj.list:null;",
          "382:                     node.origpath = obj.path?obj.path:null;",
          "383:                     node.children = [];",
          "384:                     for(k in list) {",
          "385:                         if (list[k].type == 'folder' && retrieved_children[list[k].filepath]) {",
          "387:                             node.children[node.children.length] = retrieved_children[list[k].filepath];",
          "388:                         } else {",
          "390:                             scope.view_files([list[k]]);",
          "391:                         }",
          "392:                     }",
          "393:                     if (cb == null) {",
          "394:                         node.refresh();",
          "397:                         cb();",
          "401:             }, false);",
          "402:         },",
          "403:         view_files: function(appendfiles) {",
          "405:             if ((appendfiles == null) && (!this.options.list || this.options.list.length == 0)) {",
          "409:             var list = (appendfiles != null) ? appendfiles : this.options.list;",
          "410:             var element_template;",
          "411:             if (this.viewmode == 2 || this.viewmode == 3) {",
          "412:                 element_template = Y.Node.create(M.form_filemanager.templates.listfilename);",
          "413:             } else {",
          "414:                 this.viewmode = 1;",
          "415:                 element_template = Y.Node.create(M.form_filemanager.templates.iconfilename);",
          "416:             }",
          "417:             var options = {",
          "418:                 viewmode : this.viewmode,",
          "419:                 appendonly : appendfiles != null,",
          "420:                 filenode : element_template,",
          "421:                 callbackcontext : this,",
          "422:                 callback : function(e, node) {",
          "423:                     e.preventDefault();",
          "424:                     if (node.type == 'folder') {",
          "425:                         this.refresh(node.filepath);",
          "426:                     } else {",
          "427:                         this.select_file(node);",
          "428:                     }",
          "429:                 },",
          "430:                 rightclickcallback : function(e, node) {",
          "431:                     this.select_file(node);",
          "432:                     e.preventDefault();",
          "434:             };",
          "435:             if (this.viewmode == 2) {",
          "436:                 options.dynload = true;",
          "437:                 options.filepath = this.options.path;",
          "438:                 options.treeview_dynload = this.treeview_dynload;",
          "439:                 options.callback = function(e, node) {",
          "440:                     if (node.type != 'folder') {",
          "441:                         if (e.node.parent && e.node.parent.origpath) {",
          "443:                             this.options.path = e.node.parent.origpath;",
          "444:                             this.options.list = e.node.parent.origlist;",
          "445:                             this.print_path();",
          "446:                         }",
          "447:                         this.select_file(node);",
          "448:                     } else {",
          "450:                         this.options.path = e.node.origpath;",
          "451:                         this.options.list = e.node.origlist;",
          "452:                         this.print_path();",
          "454:                     }",
          "455:                 };",
          "457:             if (!this.lazyloading) {this.lazyloading={};}",
          "458:             this.filemanager.one('.fp-content').fp_display_filelist(options, list, this.lazyloading);",
          "460:         populate_licenses_select: function(node) {",
          "461:             if (!node) {return;}",
          "462:             node.setContent('');",
          "463:             var licenses = this.options.licenses;",
          "464:             for (var i in licenses) {",
          "465:                 var option = Y.Node.create('<option/>').",
          "466:                     set('value', licenses[i].shortname).",
          "467:                     setContent(licenses[i].fullname);",
          "468:                 node.appendChild(option)",
          "470:         },",
          "471:         set_current_tree: function(tree) {",
          "472:             var appendfilepaths = function(list, node) {",
          "473:                 if (!node || !node.children || !node.children.length) {return;}",
          "474:                 for (var i in node.children) {",
          "475:                     list[list.length] = node.children[i].filepath;",
          "476:                     appendfilepaths(list, node.children[i]);",
          "477:                 }",
          "479:             var list = ['/'];",
          "480:             appendfilepaths(list, tree);",
          "481:             var selectnode = this.filemanager.one('.fp-select');",
          "482:             node = selectnode.one('.fp-path select');",
          "483:             node.setContent('');",
          "484:             for (var i in list) {",
          "485:                 node.appendChild(Y.Node.create('<option/>').",
          "486:                     set('value', list[i]).setContent(list[i]))",
          "489:         update_file: function() {",
          "490:             var selectnode = this.filemanager.one('.fp-select');",
          "491:             var fileinfo = this.selectui.fileinfo;",
          "493:             var newfilename = selectnode.one('.fp-saveas input').get('value');",
          "494:             var filenamechanged = (newfilename && newfilename != fileinfo.fullname);",
          "495:             var pathselect = selectnode.one('.fp-path select'),",
          "496:                     pathindex = pathselect.get('selectedIndex'),",
          "497:                     targetpath = pathselect.get(\"options\").item(pathindex).get('value');",
          "498:             var filepathchanged = (targetpath != this.get_parent_folder_name(fileinfo));",
          "500:             if (filenamechanged && filepathchanged) {",
          "501:                 alert('Sorry, simultaneous changing of name and path is not supported yet'); // TODO",
          "502:                 return;",
          "503:             }",
          "504:             if (!filenamechanged && !filepathchanged) {",
          "506:                 this.selectui.hide();",
          "507:             }",
          "509:             selectnode.addClass('loading');",
          "512:             if (filenamechanged) {",
          "513:                 var action = '';",
          "515:                 if (fileinfo.type == 'folder') {",
          "516:                     params['filepath']   = fileinfo.filepath;",
          "517:                     params['filename']   = '.';",
          "518:                     params['newdirname'] = newfilename;",
          "519:                     action = 'renamedir';",
          "520:                 } else {",
          "521:                     params['filepath']   = fileinfo.filepath;",
          "522:                     params['filename']   = fileinfo.fullname;",
          "523:                     params['newfilename'] = newfilename;",
          "524:                     action = 'rename';",
          "525:                 }",
          "527:                     action: action,",
          "528:                     scope: this,",
          "531:                         args.scope.selectui.hide();",
          "532:                         if (obj == false) {",
          "533:                             alert(M.str.repository.fileexists); // TODO!",
          "534:                         } else {",
          "535:                             args.scope.refresh(obj.filepath);",
          "536:                             if (typeof M.core_formchangechecker != 'undefined') {",
          "537:                                 M.core_formchangechecker.set_form_changed();",
          "538:                             }",
          "539:                         }",
          "545:             if (filepathchanged) {",
          "547:                 if (fileinfo.type == 'folder') {",
          "548:                     action = 'movedir';",
          "549:                 } else {",
          "550:                     action = 'movefile';",
          "551:                 }",
          "554:                 params['newfilepath'] = targetpath;",
          "556:                     action: action,",
          "557:                     scope: this,",
          "560:                         args.scope.selectui.hide();",
          "561:                         args.scope.refresh((obj && obj.filepath) ? obj.filepath : '/');",
          "562:                         if (typeof M.core_formchangechecker != 'undefined') {",
          "563:                             M.core_formchangechecker.set_form_changed();",
          "564:                         }",
          "569:         setup_select_file: function() {",
          "570:             var selectnode = this.filemanager.one('.fp-select');",
          "572:             selectnode.all('.fp-saveas,.fp-path,.fp-author,.fp-license').each(function (node) {",
          "573:                 node.all('label').set('for', node.one('input,select').generateID());",
          "574:             });",
          "575:             this.populate_licenses_select(selectnode.one('.fp-license select'));",
          "577:             selectnode.one('.fp-file-update').on('click', function(e) {",
          "578:                 e.preventDefault();",
          "579:                 this.update_file();",
          "580:             }, this);",
          "581:             selectnode.one('.fp-file-download').on('click', function(e) {",
          "582:                 e.preventDefault();",
          "583:                 window.open(this.selectui.fileinfo.url, 'fm-download-file');",
          "584:             }, this);",
          "585:             selectnode.one('.fp-file-delete').on('click', function(e) {",
          "586:                 e.preventDefault();",
          "591:                 if (this.selectui.fileinfo.type == 'folder') {",
          "593:                     params.filepath = this.selectui.fileinfo.filepath;",
          "595:                     params.filename = this.selectui.fileinfo.fullname;",
          "606:                             args.scope.filecount--;",
          "607:                             args.scope.refresh(obj.filepath);",
          "614:                 this.selectui.hide(); // TODO remove this after confirm dialog is replaced with YUI3",
          "615:                 M.util.show_confirm_dialog(e, dialog_options);",
          "616:             }, this);",
          "617:             selectnode.one('.fp-file-zip').on('click', function(e) {",
          "618:                 e.preventDefault();",
          "619:                 var params = {};",
          "620:                 var fileinfo = this.selectui.fileinfo;",
          "621:                 params['filepath']   = fileinfo.filepath;",
          "622:                 params['filename']   = '.';",
          "623:                 selectnode.addClass('loading');",
          "624:                 this.request({",
          "625:                     action: 'zip',",
          "626:                     scope: this,",
          "627:                     params: params,",
          "628:                     callback: function(id, obj, args) {",
          "629:                         args.scope.selectui.hide();",
          "630:                         args.scope.refresh(obj.filepath);",
          "632:                 });",
          "633:             }, this);",
          "634:             selectnode.one('.fp-file-unzip').on('click', function(e) {",
          "635:                 e.preventDefault();",
          "636:                 var params = {};",
          "637:                 var fileinfo = this.selectui.fileinfo;",
          "638:                 params['filepath'] = fileinfo.filepath;",
          "639:                 params['filename'] = fileinfo.fullname;",
          "640:                 selectnode.addClass('loading');",
          "641:                 this.request({",
          "642:                     action: 'unzip',",
          "643:                     scope: this,",
          "644:                     params: params,",
          "645:                     callback: function(id, obj, args) {",
          "646:                         args.scope.selectui.hide();",
          "647:                         args.scope.refresh(obj.filepath);",
          "649:                 });",
          "650:             }, this);",
          "651:             selectnode.one('.fp-file-setmain').on('click', function(e) {",
          "652:                 e.preventDefault();",
          "653:                 var params = {};",
          "654:                 var fileinfo = this.selectui.fileinfo;",
          "655:                 params['filepath'] = fileinfo.filepath;",
          "656:                 params['filename'] = fileinfo.fullname;",
          "657:                 selectnode.addClass('loading');",
          "658:                 this.request({",
          "659:                     action: 'setmainfile',",
          "660:                     scope: this,",
          "661:                     params: params,",
          "662:                     callback: function(id, obj, args) {",
          "663:                         args.scope.selectui.hide();",
          "664:                         args.scope.refresh(obj.filepath);",
          "667:             }, this);",
          "668:             selectnode.all('.fp-file-cancel').on('click', function(e) {",
          "669:                 e.preventDefault();",
          "671:                 this.selectui.hide();",
          "672:             }, this);",
          "673:         },",
          "674:         get_parent_folder_name: function(node) {",
          "675:             if (node.type != 'folder' || node.filepath.length < node.fullname.length+1) { return node.filepath; }",
          "676:             var basedir = node.filepath.substr(0, node.filepath.length - node.fullname.length - 1);",
          "677:             var lastdir = node.filepath.substr(node.filepath.length - node.fullname.length - 2);",
          "678:             if (lastdir == '/' + node.fullname + '/') { return basedir; }",
          "679:             return node.filepath;",
          "680:         },",
          "681:         select_file: function(node) {",
          "682:             var selectnode = this.filemanager.one('.fp-select');",
          "683:             selectnode.removeClass('loading').removeClass('fp-folder').",
          "684:                 removeClass('fp-file').removeClass('fp-zip').removeClass('fp-cansetmain');",
          "685:             if (node.type == 'folder' || node.type == 'zip') {selectnode.addClass('fp-'+node.type);}",
          "686:             else {selectnode.addClass('fp-file');}",
          "687:             if (this.enablemainfile && (node.sortorder != 1)) {",
          "688:                 selectnode.addClass('fp-cansetmain');",
          "690:             this.selectui.fileinfo = node;",
          "691:             selectnode.one('.fp-saveas input').set('value', node.fullname);",
          "692:             var foldername = this.get_parent_folder_name(node);",
          "693:             selectnode.all('.fp-origpath .fp-value').setContent(foldername);",
          "694:             selectnode.all('.fp-author input').set('value', node.author);",
          "695:             selectnode.all('.fp-license select option[selected]').set('selected', false);",
          "696:             selectnode.all('.fp-license select option[value='+node.license+']').set('selected', true);",
          "697:             selectnode.all('.fp-path select option[selected]').set('selected', false);",
          "698:             selectnode.all('.fp-path select option').each(function(el){",
          "699:                 if (el.get('value') == foldername) {el.set('selected', true);}",
          "701:             selectnode.all('.fp-author input').set('disabled','disabled'); //TODO",
          "702:             selectnode.all('.fp-license select').set('disabled','disabled'); //TODO",
          "704:             var attrs = ['datemodified','datecreated','size','dimensions'];",
          "705:             for (var i in attrs) {",
          "706:                 if (selectnode.one('.fp-'+attrs[i])) {",
          "707:                     var value = (node[attrs[i]+'_f']) ? node[attrs[i]+'_f'] : (node[attrs[i]] ? node[attrs[i]] : '');",
          "708:                     selectnode.one('.fp-'+attrs[i]).addClassIf('fp-unknown', ''+value == '')",
          "709:                         .one('.fp-value').setContent(value);",
          "710:                 }",
          "711:             }",
          "713:             var imgnode = Y.Node.create('<img/>').",
          "714:                 set('src', node.realthumbnail ? node.realthumbnail : node.thumbnail).",
          "715:                 setStyle('maxHeight', ''+(node.thumbnail_height ? node.thumbnail_height : 90)+'px').",
          "716:                 setStyle('maxWidth', ''+(node.thumbnail_width ? node.thumbnail_width : 90)+'px');",
          "717:             selectnode.one('.fp-thumbnail').setContent('').appendChild(imgnode);",
          "719:             this.selectui.show();",
          "720:         },",
          "721:         render: function() {",
          "722:             this.print_path();",
          "723:             this.view_files();",
          "",
          "---------------"
        ],
        "lib/form/filemanager.php||lib/form/filemanager.php": [
          "File: lib/form/filemanager.php -> lib/form/filemanager.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "303:             'client_id'=>uniqid(),",
          "304:             'accepted_types'=>'*',",
          "305:             'return_types'=>FILE_INTERNAL,",
          "307:             );",
          "308:         foreach ($defaults as $key=>$value) {",
          "309:             if (empty($options->$key)) {",
          "310:                 $options->$key = $value;",
          "",
          "[Removed Lines]",
          "306:             'context'=>$PAGE->context",
          "",
          "[Added Lines]",
          "309:             'context'=>$PAGE->context,",
          "310:             'author'=>fullname($USER),",
          "311:             'licenses'=>array()",
          "313:         if (!empty($CFG->licenses)) {",
          "314:             $array = explode(',', $CFG->licenses);",
          "315:             foreach ($array as $license) {",
          "316:                 $l = new stdClass();",
          "317:                 $l->shortname = $license;",
          "318:                 $l->fullname = get_string($license, 'license');",
          "319:                 $defaults['licenses'][] = $l;",
          "320:             }",
          "321:         }",
          "322:         if (!empty($CFG->sitedefaultlicense)) {",
          "323:             $defaults['defaultlicense'] = $CFG->sitedefaultlicense;",
          "324:         }",
          "",
          "---------------"
        ],
        "lib/outputrequirementslib.php||lib/outputrequirementslib.php": [
          "File: lib/outputrequirementslib.php -> lib/outputrequirementslib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "439:                 case 'core_filepicker':",
          "440:                     $module = array('name'     => 'core_filepicker',",
          "441:                                     'fullpath' => '/repository/filepicker.js',",
          "444:                                     'strings'  => array(array('add', 'repository'), array('back', 'repository'), array('cancel', 'moodle'), array('close', 'repository'),",
          "445:                                                         array('cleancache', 'repository'), array('copying', 'repository'), array('date', 'repository'), array('downloadsucc', 'repository'),",
          "",
          "[Removed Lines]",
          "442:                                     'requires' => array('base', 'node', 'node-event-simulate', 'json', 'async-queue', 'io-base', 'io-upload-iframe', 'io-form', 'yui2-menu', 'yui2-treeview', 'yui2-dragdrop', 'panel', 'cookie', 'datatable', 'datatable-sort', 'resize-plugin', 'dd-plugin', 'resize-constrain'),",
          "",
          "[Added Lines]",
          "442:                                     'requires' => array('base', 'node', 'node-event-simulate', 'json', 'async-queue', 'io-base', 'io-upload-iframe', 'io-form', 'yui2-menu', 'yui2-treeview', 'yui2-dragdrop', 'panel', 'cookie', 'datatable', 'datatable-sort', 'resize-plugin', 'dd-plugin', 'moodle-core_filepicker'),",
          "",
          "---------------"
        ],
        "repository/draftfiles_ajax.php||repository/draftfiles_ajax.php": [
          "File: repository/draftfiles_ajax.php -> repository/draftfiles_ajax.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: require('../config.php');",
          "30: require_once($CFG->libdir.'/filelib.php');",
          "31: require_once($CFG->libdir.'/adminlib.php');",
          "32: $PAGE->set_context(get_system_context());",
          "33: require_login();",
          "34: if (isguestuser()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: require_once($CFG->dirroot.'/repository/lib.php');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:     case 'list':",
          "59:         $filepath = optional_param('filepath', '/', PARAM_PATH);",
          "62:         $info = file_get_draft_area_info($draftid);",
          "63:         $data->filecount = $info['filecount'];",
          "64:         $data->filesize = $info['filesize'];",
          "65:         echo json_encode($data);",
          "66:         die;",
          "",
          "[Removed Lines]",
          "61:         $data = file_get_drafarea_files($draftid, $filepath);",
          "",
          "[Added Lines]",
          "62:         $data = repository::prepare_listing(file_get_drafarea_files($draftid, $filepath));",
          "66:         $data->tree = new stdClass();",
          "67:         file_get_drafarea_folders($draftid, '/', $data->tree);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:         $fs->create_directory($user_context->id, 'user', 'draft', $draftid, file_correct_filepath(file_correct_filepath($filepath).$newdirname));",
          "74:         $return = new stdClass();",
          "75:         $return->filepath = $filepath;",
          "76:         echo json_encode($return);",
          "77:         die;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79:         $return->tree = new stdClass();",
          "80:         file_get_drafarea_folders($draftid, '/', $return->tree);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "190:         } else {",
          "191:             $return->filepath = $newfilepath;",
          "192:         }",
          "193:         echo json_encode($return);",
          "194:         die;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "198:         $return->tree = new stdClass();",
          "199:         file_get_drafarea_folders($draftid, '/', $return->tree);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "277:         if ($newfile = $file->extract_to_storage($zipper, $user_context->id, 'user', 'draft', $draftid, $filepath, $USER->id)) {",
          "278:             $return = new stdClass();",
          "279:             $return->filepath = $filepath;",
          "280:             echo json_encode($return);",
          "281:         } else {",
          "282:             echo json_encode(false);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "287:             $return->tree = new stdClass();",
          "288:             file_get_drafarea_folders($draftid, '/', $return->tree);",
          "",
          "---------------"
        ],
        "repository/filepicker.js||repository/filepicker.js": [
          "File: repository/filepicker.js -> repository/filepicker.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: M.core_filepicker = M.core_filepicker || {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: YUI.add('moodle-core_filepicker', function(Y) {",
          "47:     Y.Node.prototype.getStylePx = function(attr) {",
          "48:         var style = this.getStyle(attr);",
          "49:         if (''+style == '0' || ''+style == '0px') {",
          "50:             return 0;",
          "51:         }",
          "52:         var matches = style.match(/^([\\d\\.]+)px$/)",
          "53:         if (matches && parseFloat(matches[1])) {",
          "54:             return parseFloat(matches[1]);",
          "55:         }",
          "56:         return null;",
          "57:     }",
          "60:     Y.Node.prototype.addClassIf = function(className, condition) {",
          "61:         if (condition) {",
          "62:             this.addClass(className);",
          "63:         } else {",
          "64:             this.removeClass(className);",
          "65:         }",
          "66:         return this;",
          "67:     }",
          "70:     Y.Node.prototype.setStyleAdv = function(stylename, value) {",
          "71:         var stylenameCap = stylename.substr(0,1).toUpperCase() + stylename.substr(1, stylename.length-1).toLowerCase();",
          "72:         this.setStyle(stylename, '' + Math.max(value, this.getStylePx('min'+stylenameCap)) + 'px')",
          "73:         return this;",
          "74:     }",
          "101:     Y.Node.prototype.fp_display_filelist = function(options, fileslist, lazyloading) {",
          "102:         var viewmodeclassnames = {1:'fp-iconview', 2:'fp-treeview', 3:'fp-tableview'};",
          "103:         var classname = viewmodeclassnames[options.viewmode];",
          "104:         var scope = this;",
          "106:         var file_is_folder = function(node) {",
          "107:             if (node.children) {return true;}",
          "108:             if (node.type && node.type == 'folder') {return true;}",
          "109:             return false;",
          "110:         };",
          "112:         var file_get_filename = function(node) {",
          "113:             return node.title ? node.title : node.fullname;",
          "114:         }",
          "116:         var file_get_displayname = function(node) {",
          "117:             return node.shorttitle ? node.shorttitle : file_get_filename(node);",
          "118:         }",
          "120:         var file_get_description = function(node) {",
          "121:             return node.description ? node.description : (node.thumbnail_title ? node.thumbnail_title : file_get_filename(node));",
          "122:         }",
          "124:         var build_tree = function(node, level) {",
          "126:             var el = Y.Node.create('<div/>');",
          "127:             el.appendChild(options.filenode.cloneNode(true));",
          "129:             el.one('.fp-filename').setContent(file_get_displayname(node));",
          "131:             if (file_is_folder(node)) {",
          "132:                 el.get('children').addClass('fp-folder');",
          "133:             }",
          "134:             if (node.icon) {",
          "135:                 el.one('.fp-icon').appendChild(Y.Node.create('<img/>').set('src', node.icon));",
          "136:                 if (node.realicon) {",
          "137:                     lazyloading[el.one('.fp-icon img').generateID()] = node.realicon;",
          "138:                 }",
          "139:             }",
          "141:             var tmpNode = new YAHOO.widget.HTMLNode(el.getContent(), level, false);",
          "142:             if (node.dynamicLoadComplete) {",
          "143:                 tmpNode.dynamicLoadComplete = true;",
          "144:             }",
          "145:             tmpNode.fileinfo = node;",
          "146:             tmpNode.isLeaf = !file_is_folder(node);",
          "147:             if (!tmpNode.isLeaf) {",
          "148:                 if(node.expanded) {",
          "149:                     tmpNode.expand();",
          "150:                 }",
          "151:                 tmpNode.path = node.path ? node.path : (node.filepath ? node.filepath : '');",
          "152:                 for(var c in node.children) {",
          "153:                     build_tree(node.children[c], tmpNode);",
          "154:                 }",
          "155:             }",
          "156:         };",
          "158:         var initialize_tree_view = function() {",
          "159:             var parentid = scope.one('.'+classname).get('id');",
          "160:             scope.treeview = new YAHOO.widget.TreeView(parentid);",
          "161:             if (options.dynload) {",
          "162:                 scope.treeview.setDynamicLoad(Y.bind(options.treeview_dynload, options.callbackcontext), 1);",
          "163:             }",
          "164:             scope.treeview.singleNodeHighlight = true;",
          "165:             if (options.filepath && options.filepath.length) {",
          "169:                 var mytree = {};",
          "170:                 var mytreeel = null;",
          "171:                 for (var i in options.filepath) {",
          "172:                     if (mytreeel == null) {",
          "173:                         mytreeel = mytree;",
          "174:                     } else {",
          "175:                         mytreeel.children = [{}];",
          "176:                         mytreeel = mytreeel.children[0];",
          "177:                     }",
          "178:                     var pathelement = options.filepath[i];",
          "179:                     mytreeel.path = pathelement.path;",
          "180:                     mytreeel.title = pathelement.name;",
          "181:                     mytreeel.dynamicLoadComplete = true; // we will call it manually",
          "182:                     mytreeel.expanded = true;",
          "183:                 }",
          "184:                 mytreeel.children = fileslist;",
          "185:                 build_tree(mytree, scope.treeview.getRoot());",
          "187:                 if (options.dynload) {",
          "188:                     var root = scope.treeview.getRoot();",
          "189:                     while (root && root.children && root.children.length) {",
          "190:                         root = root.children[0];",
          "191:                         if (root.path == mytreeel.path) {",
          "192:                             root.origpath = options.filepath;",
          "193:                             root.origlist = fileslist;",
          "194:                         } else if (!root.isLeaf && root.expanded) {",
          "195:                             Y.bind(options.treeview_dynload, options.callbackcontext)(root, null);",
          "196:                         }",
          "197:                     }",
          "198:                 }",
          "199:             } else {",
          "201:                 for(k in fileslist) {",
          "202:                     build_tree(fileslist[k], scope.treeview.getRoot());",
          "203:                 }",
          "204:             }",
          "205:             scope.treeview.subscribe('clickEvent', function(e){",
          "206:                 e.node.highlight(false);",
          "207:                 Y.bind(options.callback, options.callbackcontext)(e, e.node.fileinfo);",
          "208:             });",
          "209:             if (options.rightclickcallback) {",
          "210:                 scope.treeview.subscribe('dblClickEvent', function(e){ // TODO right click!",
          "211:                     e.node.highlight(false);",
          "212:                     if (e.node.path != '/') {",
          "213:                         Y.bind(options.rightclickcallback, options.callbackcontext)(e, e.node.fileinfo);",
          "214:                     }",
          "215:                 });",
          "216:             }",
          "217:             scope.treeview.draw();",
          "218:         };",
          "220:         var formatValue = function (o){",
          "221:             if (o.data[''+o.column.key+'_f_s']) {return o.data[''+o.column.key+'_f_s'];}",
          "222:             else if (o.data[''+o.column.key+'_f']) {return o.data[''+o.column.key+'_f'];}",
          "223:             else if (o.value) {return o.value;}",
          "224:             else {return '';}",
          "225:         };",
          "227:         var formatTitle = function(o) {",
          "228:             var el = Y.Node.create('<div/>');",
          "229:             el.appendChild(options.filenode.cloneNode(true)); // TODO not node but string!",
          "230:             if (o.data['isfolder']) {",
          "231:                 el.get('children').addClass('fp-folder');",
          "232:             }",
          "233:             el.one('.fp-filename').setContent(o.value);",
          "234:             if (o.data['icon']) {",
          "235:                 el.one('.fp-icon').appendChild(Y.Node.create('<img/>').set('src', o.data['icon']));",
          "236:                 if (o.data['realicon']) {",
          "237:                     lazyloading[el.one('.fp-icon img').generateID()] = o.data['realicon'];",
          "238:                 }",
          "239:             }",
          "241:             return el.getContent();",
          "242:         }",
          "244:         var sortFoldersFirst = function(a, b, desc) {",
          "245:             if (a.get('isfolder') && !b.get('isfolder')) {return -1;}",
          "246:             if (!a.get('isfolder') && b.get('isfolder')) {return 1;}",
          "247:             var aa = a.get(this.key), bb = b.get(this.key), dir = desc?-1:1;",
          "248:             return (aa > bb) ? dir : ((aa < bb) ? -dir : 0);",
          "249:         }",
          "251:         var initialize_table_view = function() {",
          "252:             var parentid = scope.one('.'+classname).get('id');",
          "253:             var cols = [",
          "254:                 {key: \"displayname\", label: M.str.moodle.name, allowHTML: true, formatter: formatTitle,",
          "255:                     sortable: true, sortFn: sortFoldersFirst},",
          "256:                 {key: \"datemodified\", label: M.str.moodle.lastmodified, allowHTML: true, formatter: formatValue,",
          "257:                     sortable: true, sortFn: sortFoldersFirst},",
          "258:                 {key: \"size\", label: M.str.repository.size, allowHTML: true, formatter: formatValue,",
          "259:                     sortable: true, sortFn: sortFoldersFirst},",
          "260:                 {key: \"mimetype\", label: M.str.repository.type, allowHTML: true,",
          "261:                     sortable: true, sortFn: sortFoldersFirst}",
          "262:             ];",
          "263:             scope.tableview = new Y.DataTable({columns: cols});",
          "264:             scope.tableview.render('#'+parentid);",
          "265:             scope.tableview.delegate('click', function (e, tableview) {",
          "266:                 var record = tableview.getRecord(e.currentTarget.get('id'));",
          "267:                 if (record) { Y.bind(options.callback, this)(e, record.getAttrs()); }",
          "268:             }, 'tr', options.callbackcontext, scope.tableview);",
          "269:             if (options.rightclickcallback) {",
          "270:                 scope.tableview.delegate('contextmenu', function (e, tableview) {",
          "271:                     var record = tableview.getRecord(e.currentTarget.get('id'));",
          "272:                     if (record) { Y.bind(options.rightclickcallback, this)(e, record.getAttrs()); }",
          "273:                 }, 'tr', options.callbackcontext, scope.tableview);",
          "274:             }",
          "275:         }",
          "277:         var append_files_table = function() {",
          "278:             for (var k in fileslist) {",
          "280:                 fileslist[k].displayname = file_get_displayname(fileslist[k]);",
          "281:                 fileslist[k].isfolder = file_is_folder(fileslist[k]);",
          "282:             }",
          "283:             scope.tableview.addRows(fileslist);",
          "284:             scope.tableview.sortable = options.sortable ? true : false;",
          "285:         };",
          "287:         var append_files_tree = function() {",
          "288:             if (options.appendonly) {",
          "289:                 var parentnode = scope.treeview.getRoot();",
          "290:                 if (scope.treeview.getHighlightedNode()) {",
          "291:                     parentnode = scope.treeview.getHighlightedNode();",
          "292:                     if (parentnode.isLeaf) {parentnode = parentnode.parent;}",
          "293:                 }",
          "294:                 for (var k in fileslist) {",
          "295:                     build_tree(fileslist[k], parentnode);",
          "296:                 }",
          "297:                 scope.treeview.draw();",
          "298:             } else {",
          "300:             }",
          "301:         }",
          "303:         var append_files_icons = function() {",
          "304:             parent = scope.one('.'+classname);",
          "305:             for (var k in fileslist) {",
          "306:                 var node = fileslist[k];",
          "307:                 var element = options.filenode.cloneNode(true);",
          "308:                 parent.appendChild(element);",
          "309:                 if (file_is_folder(node)) {",
          "310:                     element.addClass('fp-folder');",
          "311:                 }",
          "312:                 var filenamediv = element.one('.fp-filename');",
          "313:                 filenamediv.setContent(file_get_displayname(node));",
          "314:                 var imgdiv = element.one('.fp-thumbnail'), width, height, src;",
          "315:                 if (node.thumbnail) {",
          "316:                     width = node.thumbnail_width ? node.thumbnail_width : 90;",
          "317:                     height = node.thumbnail_height ? node.thumbnail_height : 90;",
          "318:                     src = node.thumbnail;",
          "319:                 } else {",
          "320:                     width = 16;",
          "321:                     height = 16;",
          "322:                     src = node.icon;",
          "323:                 }",
          "324:                 filenamediv.setStyleAdv('width', width);",
          "325:                 imgdiv.setStyleAdv('width', width).setStyleAdv('height', height);",
          "326:                 var img = Y.Node.create('<img/>').setAttrs({",
          "327:                         src: src,",
          "328:                         title: file_get_description(node),",
          "329:                         alt: node.thumbnail_alt ? node.thumbnail_alt : file_get_filename(node)}).",
          "330:                     setStyle('maxWidth', ''+width+'px').",
          "331:                     setStyle('maxHeight', ''+height+'px');",
          "332:                 if (node.realthumbnail) {",
          "333:                     lazyloading[img.generateID()] = node.realthumbnail;",
          "334:                 }",
          "335:                 imgdiv.appendChild(img);",
          "336:                 element.on('click', options.callback, options.callbackcontext, node);",
          "337:                 if (options.rightclickcallback) {",
          "338:                     element.on('contextmenu', options.rightclickcallback, options.callbackcontext, node);",
          "339:                 }",
          "340:             }",
          "341:         }",
          "344:         if (!options.appendonly) {",
          "345:             var parent = Y.Node.create('<div/>').addClass(classname);",
          "346:             this.setContent('').appendChild(parent);",
          "347:             parent.generateID();",
          "348:             if (options.viewmode == 2) {",
          "349:                 initialize_tree_view();",
          "350:             } else if (options.viewmode == 3) {",
          "351:                 initialize_table_view();",
          "352:             } else {",
          "354:             }",
          "355:         }",
          "358:         if (options.viewmode == 2) {",
          "359:             append_files_tree();",
          "360:         } else if (options.viewmode == 3) {",
          "361:             append_files_table();",
          "362:         } else {",
          "363:             append_files_icons();",
          "364:         }",
          "366:     }",
          "367: }, '@VERSION@', {",
          "368:     requires:['base','node'] // TODO TreeView, Table, etc.",
          "369: });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77: M.core_filepicker.init = function(Y, options) {",
          "108:     var FilePickerHelper = function(options) {",
          "109:         FilePickerHelper.superclass.constructor.apply(this, arguments);",
          "110:     };",
          "",
          "[Removed Lines]",
          "79:     Y.Node.prototype.getStylePx = function(attr) {",
          "80:         var style = this.getStyle(attr);",
          "81:         if (''+style == '0' || ''+style == '0px') {",
          "82:             return 0;",
          "83:         }",
          "84:         var matches = style.match(/^([\\d\\.]+)px$/)",
          "85:         if (matches && parseFloat(matches[1])) {",
          "86:             return parseFloat(matches[1]);",
          "87:         }",
          "88:         return null;",
          "89:     }",
          "92:     Y.Node.prototype.addClassIf = function(className, condition) {",
          "93:         if (condition) {",
          "94:             this.addClass(className);",
          "95:         } else {",
          "96:             this.removeClass(className);",
          "97:         }",
          "98:         return this;",
          "99:     }",
          "102:     Y.Node.prototype.setStyleAdv = function(stylename, value) {",
          "103:         var stylenameCap = stylename.substr(0,1).toUpperCase() + stylename.substr(1, stylename.length-1).toLowerCase();",
          "104:         this.setStyle(stylename, '' + Math.max(value, this.getStylePx('min'+stylenameCap)) + 'px')",
          "105:         return this;",
          "106:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "378:             this.fpnode.one('.fp-msg .fp-msg-text').setContent(msg);",
          "379:             this.msg_dlg.show();",
          "380:         },",
          "413:         view_files: function(appenditems) {",
          "414:             this.viewbar_set_enabled(true);",
          "415:             this.print_path();",
          "416:             if (this.viewmode == 2) {",
          "417:                 this.view_as_list(appenditems);",
          "418:             } else if (this.viewmode == 3) {",
          "",
          "[Removed Lines]",
          "381:         build_tree: function(node, level) {",
          "382:             var dynload = this.active_repo.dynload;",
          "384:             var el = Y.Node.create('<div/>').setContent(M.core_filepicker.templates.listfilename);",
          "385:             el.one('.fp-filename').setContent(node.shorttitle ? node.shorttitle : node.title);",
          "387:             if (node.icon && !node.children) {",
          "388:                 el.one('.fp-icon').appendChild(Y.Node.create('<img/>').set('src', node.icon));",
          "389:                 if (node.realicon) {",
          "390:                     this.lazyloading[el.one('.fp-icon img').generateID()] = node.realicon;",
          "391:                 }",
          "392:             }",
          "394:             var tmpNode = new YAHOO.widget.HTMLNode(el.getContent(), level, false);",
          "395:             if (node.dynamicLoadComplete) {",
          "396:                 tmpNode.dynamicLoadComplete = true;",
          "397:             }",
          "398:             tmpNode.fileinfo = node;",
          "399:             tmpNode.isLeaf = node.children ? false : true;",
          "400:             if (!tmpNode.isLeaf) {",
          "401:                 if(node.expanded) {",
          "402:                     tmpNode.expand();",
          "403:                 }",
          "404:                 if (dynload) {",
          "405:                     tmpNode.scope = this;",
          "406:                 }",
          "407:                 tmpNode.path = node.path ? node.path : '';",
          "408:                 for(var c in node.children) {",
          "409:                     this.build_tree(node.children[c], tmpNode);",
          "410:                 }",
          "411:             }",
          "412:         },",
          "",
          "[Added Lines]",
          "683:                 this.display_error(M.str.repository.nofilesavailable, 'nofilesavailable');",
          "684:                 return;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "472:             }, this), 200)",
          "473:         },",
          "474:         treeview_dynload: function(node, cb) {",
          "478:             var retrieved_children = {};",
          "479:             if (node.children) {",
          "480:                 for (var i in node.children) {",
          "481:                     retrieved_children[node.children[i].path] = node.children[i];",
          "482:                 }",
          "483:             }",
          "485:                 action:'list',",
          "488:                 path:node.path?node.path:'',",
          "489:                 page:node.page?args.page:'',",
          "490:                 callback: function(id, obj, args) {",
          "491:                     var list = obj.list;",
          "493:                     if (!(scope.active_repo.id == obj.repo_id && scope.viewmode == 2 && node && node.getChildrenEl())) {",
          "494:                         return;",
          "",
          "[Removed Lines]",
          "475:             var scope = node.scope;",
          "476:             var client_id = scope.options.client_id;",
          "477:             var repository_id = scope.active_repo.id;",
          "484:             scope.request({",
          "486:                 client_id: client_id,",
          "487:                 repository_id: repository_id,",
          "",
          "[Added Lines]",
          "751:             this.request({",
          "753:                 client_id: this.options.client_id,",
          "754:                 repository_id: this.active_repo.id,",
          "757:                 scope:this,",
          "760:                     var scope = args.scope;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "496:                     if (cb != null) { // (in manual mode do not update current path)",
          "497:                         scope.viewbar_set_enabled(true);",
          "498:                         scope.parse_repository_options(obj);",
          "500:                     }",
          "501:                     node.origlist = obj.list?obj.list:null;",
          "502:                     node.origpath = obj.path?obj.path:null;",
          "503:                     node.children = [];",
          "",
          "[Removed Lines]",
          "499:                         node.highlight(false);",
          "",
          "[Added Lines]",
          "769:                     node.highlight(false);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "507:                             node.children[node.children.length] = retrieved_children[list[k].path];",
          "508:                         } else {",
          "510:                         }",
          "511:                     }",
          "512:                     if (cb == null) {",
          "513:                         node.refresh();",
          "514:                     } else {",
          "516:                         cb();",
          "517:                     }",
          "518:                     scope.content_scrolled();",
          "",
          "[Removed Lines]",
          "509:                             scope.build_tree(list[k], node);",
          "",
          "[Added Lines]",
          "779:                             scope.view_as_list([list[k]]);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "525:         view_as_list: function(appenditems) {",
          "544:                 this.display_error(M.str.repository.nofilesavailable, 'nofilesavailable');",
          "545:                 return;",
          "546:             }",
          "588:                         }",
          "589:                     }",
          "616:         },",
          "620:         view_as_icons: function(appenditems) {",
          "622:             this.viewmode = 1;",
          "637:             }",
          "674:                             this.view_files();",
          "675:                         }",
          "682:                 }",
          "685:         },",
          "689:         view_as_table: function(appenditems) {",
          "692:             this.viewmode = 3;",
          "700:                 this.display_error(M.str.repository.nofilesavailable, 'nofilesavailable');",
          "701:                 return;",
          "702:             }",
          "753:                         if (this.active_repo.dynload) {",
          "755:                         } else {",
          "758:                             this.view_files();",
          "759:                         }",
          "760:                     } else {",
          "762:                     }",
          "763:                 }",
          "765:         },",
          "767:         request_next_page: function() {",
          "",
          "[Removed Lines]",
          "526:             var scope = this;",
          "527:             var client_id = scope.options.client_id;",
          "528:             var dynload = scope.active_repo.dynload;",
          "529:             var list = this.filelist;",
          "530:             scope.viewmode = 2;",
          "531:             if (appenditems) {",
          "532:                 var parentnode = scope.treeview.getRoot();",
          "533:                 if (scope.treeview.getHighlightedNode()) {",
          "534:                     parentnode = scope.treeview.getHighlightedNode();",
          "535:                     if (parentnode.isLeaf) {parentnode = parentnode.parent;}",
          "536:                 }",
          "537:                 for (var k in appenditems) {",
          "538:                     scope.build_tree(appenditems[k], parentnode);",
          "539:                 }",
          "540:                 scope.treeview.draw();",
          "541:                 return;",
          "542:             }",
          "543:             if (!list || list.length==0 && (!this.filepath || !this.filepath.length)) {",
          "548:             var treeviewnode = Y.Node.create('<div/>').",
          "549:                 setAttrs({'class':'fp-treeview', id:'treeview-'+client_id});",
          "550:             this.fpnode.one('.fp-content').setContent('').appendChild(treeviewnode);",
          "552:             scope.treeview = new YAHOO.widget.TreeView('treeview-'+client_id);",
          "553:             if (dynload) {",
          "554:                 scope.treeview.setDynamicLoad(scope.treeview_dynload, 1);",
          "555:             }",
          "556:             scope.treeview.singleNodeHighlight = true;",
          "557:             if (scope.filepath && scope.filepath.length) {",
          "561:                 var mytree = {};",
          "562:                 var mytreeel = null;",
          "563:                 for (var i in scope.filepath) {",
          "564:                     if (mytreeel == null) {",
          "565:                         mytreeel = mytree;",
          "566:                     } else {",
          "567:                         mytreeel.children = [{}];",
          "568:                         mytreeel = mytreeel.children[0];",
          "569:                     }",
          "570:                     var parent = scope.filepath[i];",
          "571:                     mytreeel.path = parent.path;",
          "572:                     mytreeel.title = parent.name;",
          "573:                     mytreeel.dynamicLoadComplete = true; // we will call it manually",
          "574:                     mytreeel.expanded = true;",
          "575:                 }",
          "576:                 mytreeel.children = scope.filelist",
          "577:                 scope.build_tree(mytree, scope.treeview.getRoot());",
          "579:                 if (dynload) {",
          "580:                     var root = scope.treeview.getRoot();",
          "581:                     while (root && root.children && root.children.length) {",
          "582:                         root = root.children[0];",
          "583:                         if (root.path == mytreeel.path) {",
          "584:                             root.origpath = scope.filepath;",
          "585:                             root.origlist = scope.filelist;",
          "586:                         } else if (!root.isLeaf && root.expanded) {",
          "587:                             scope.treeview_dynload(root, null);",
          "590:                 }",
          "591:             } else {",
          "593:                 for(k in list) {",
          "594:                     scope.build_tree(list[k], scope.treeview.getRoot());",
          "595:                 }",
          "596:             }",
          "597:             scope.treeview.subscribe('clickEvent', function(e){",
          "598:                 e.node.highlight(false);",
          "599:                 if(e.node.isLeaf){",
          "600:                     if (e.node.parent && e.node.parent.origpath) {",
          "602:                         scope.filepath = e.node.parent.origpath;",
          "603:                         scope.filelist = e.node.parent.origlist;",
          "604:                         scope.print_path();",
          "605:                     }",
          "606:                     scope.select_file(e.node.fileinfo);",
          "607:                 } else {",
          "609:                     scope.filepath = e.node.origpath;",
          "610:                     scope.filelist = e.node.origlist;",
          "611:                     scope.print_path();",
          "612:                     scope.content_scrolled();",
          "613:                 }",
          "614:             });",
          "615:             scope.treeview.draw();",
          "621:             var scope = this;",
          "623:             var list = this.filelist, container, element_template;",
          "624:             if (!appenditems || !this.filelist || !this.filelist.length) {",
          "625:                 if (!list || list.length==0) {",
          "626:                     this.display_error(M.str.repository.nofilesavailable, 'nofilesavailable');",
          "627:                     return;",
          "628:                 }",
          "629:                 this.fpnode.one('.fp-content').setContent(M.core_filepicker.templates.iconview);",
          "630:                 element_template = this.fpnode.one('.fp-content').one('.fp-file');",
          "631:                 container = element_template.get('parentNode');",
          "632:                 container.removeChild(element_template);",
          "633:             } else {",
          "634:                 list = appenditems;",
          "635:                 element_template = Y.Node.create(M.core_filepicker.templates.iconview).one('.fp-file');",
          "636:                 container = this.fpnode.one('.fp-content').one('.fp-file').get('parentNode')",
          "639:             var count = 0;",
          "640:             for(var k in list) {",
          "641:                 var node = list[k];",
          "642:                 var element = element_template.cloneNode(true);",
          "643:                 container.appendChild(element);",
          "644:                 var filename = node.shorttitle ? node.shorttitle : node.title;",
          "645:                 var filenamediv = element.one('.fp-filename');",
          "646:                 filenamediv.setContent(filename);",
          "647:                 var imgdiv = element.one('.fp-thumbnail');",
          "648:                 var width = node.thumbnail_width ? node.thumbnail_width : 90;",
          "649:                 var height = node.thumbnail_height ? node.thumbnail_height : 90;",
          "650:                 filenamediv.setStyleAdv('width', width);",
          "651:                 imgdiv.setStyleAdv('width', width).setStyleAdv('height', height);",
          "652:                 var img = Y.Node.create('<img/>').setAttrs({src:node.thumbnail,title:node.title});",
          "653:                 if(node.thumbnail_alt) {",
          "654:                     img.set('alt', node.thumbnail_alt);",
          "655:                 }",
          "656:                 if(node.thumbnail_title) {",
          "657:                     img.set('title', node.thumbnail_title);",
          "658:                 }",
          "659:                 img.setStyle('maxWidth', ''+width+'px').setStyle('maxHeight', ''+height+'px');",
          "660:                 if (node.realthumbnail) {",
          "661:                     this.lazyloading[img.generateID()] = node.realthumbnail;",
          "662:                 }",
          "663:                 imgdiv.appendChild(img)",
          "665:                 var dynload = this.active_repo.dynload;",
          "666:                 if(node.children) {",
          "667:                     element.on('click', function(e, p) {",
          "668:                         e.preventDefault();",
          "669:                         if(dynload) {",
          "670:                             scope.list({'path':p.path});",
          "671:                         }else{",
          "672:                             this.filepath = p.path;",
          "673:                             this.filelist = p.children;",
          "676:                     }, this, node);",
          "677:                 } else {",
          "678:                     element.on('click', function(e, args) {",
          "679:                         e.preventDefault();",
          "680:                         this.select_file(args);",
          "681:                     }, this, list[k]);",
          "683:                 count++;",
          "684:             }",
          "690:             var list = this.filelist, scope = this;",
          "691:             var client_id = this.options.client_id;",
          "693:             if (appenditems != null) {",
          "694:                 this.tableview.addRows(appenditems);",
          "695:                 this.tableview.sortable = !this.active_repo.hasmorepages;",
          "696:                 return;",
          "697:             }",
          "699:             if (!list || list.length==0) {",
          "703:             var treeviewnode = Y.Node.create('<div/>').",
          "704:                     setAttrs({'class':'fp-tableview', id:'tableview-'+client_id});",
          "705:             this.fpnode.one('.fp-content').setContent('').appendChild(treeviewnode);",
          "706:             var formatValue = function (o){",
          "707:                 if (o.data[''+o.column.key+'_f_s']) { return o.data[''+o.column.key+'_f_s']; }",
          "708:                 else if (o.data[''+o.column.key+'_f']) { return o.data[''+o.column.key+'_f']; }",
          "709:                 else if (o.value) { return o.value; }",
          "710:                 else { return ''; }",
          "711:             };",
          "712:             var formatTitle = function(o) {",
          "713:                 var el = Y.Node.create('<div/>').setContent(M.core_filepicker.templates.listfilename);",
          "714:                 el.one('.fp-filename').setContent(o.data['shorttitle'] ? o.data['shorttitle'] : o.value);",
          "715:                 el.one('.fp-icon').appendChild(Y.Node.create('<img/>').set('src', o.data['icon']));",
          "716:                 if (o.data['realicon']) {",
          "717:                     scope.lazyloading[el.one('.fp-icon img').generateID()] = o.data['realicon'];",
          "718:                 }",
          "720:                 return el.getContent();",
          "721:             }",
          "722:             var sortFoldersFirst = function(a, b, desc) {",
          "723:                 if (a.get('children') && !b.get('children')) {return -1;}",
          "724:                 if (!a.get('children') && b.get('children')) {return 1;}",
          "725:                 var aa = a.get(this.key), bb = b.get(this.key), dir = desc?-1:1;",
          "726:                 if (this.key == 'title' && a.get('shorttitle')) {aa=a.get('shorttitle');}",
          "727:                 if (this.key == 'title' && b.get('shorttitle')) {bb=b.get('shorttitle');}",
          "728:                 return (aa > bb) ? dir : ((aa < bb) ? -dir : 0);",
          "729:             }",
          "731:             var cols = [",
          "732:                 {key: \"title\", label: M.str.moodle.name, allowHTML: true, formatter: formatTitle,",
          "733:                     sortable: true, sortFn: sortFoldersFirst},",
          "734:                 {key: \"datemodified\", label: M.str.moodle.lastmodified, allowHTML: true, formatter: formatValue,",
          "735:                     sortable: true, sortFn: sortFoldersFirst},",
          "736:                 {key: \"size\", label: M.str.repository.size, allowHTML: true, formatter: formatValue,",
          "737:                     sortable: true, sortFn: sortFoldersFirst},",
          "738:                 {key: \"type\", label: M.str.repository.type, allowHTML: true,",
          "739:                     sortable: true, sortFn: sortFoldersFirst}",
          "740:             ];",
          "741:             this.tableview = new Y.DataTable({",
          "742:                 columns: cols,",
          "743:                 data: list,",
          "744:                 sortable: !this.active_repo.hasmorepages // allow sorting only if there are no more pages to load",
          "745:             });",
          "747:             this.tableview.render('#tableview-'+client_id);",
          "748:             this.tableview.delegate('click', function (e) {",
          "749:                 var record = this.tableview.getRecord(e.currentTarget.get('id'));",
          "750:                 if (record) {",
          "751:                     var data = record.getAttrs();",
          "752:                     if (data.children) {",
          "754:                             this.list({'path':data.path});",
          "756:                             this.filepath = data.path;",
          "757:                             this.filelist = data.children;",
          "761:                         this.select_file(data);",
          "764:             }, 'tr', this);",
          "",
          "[Added Lines]",
          "796:             var list = (appenditems != null) ? appenditems : this.filelist;",
          "797:             this.viewmode = 2;",
          "798:             if (!this.filelist || this.filelist.length==0 && (!this.filepath || !this.filepath.length)) {",
          "803:             var element_template = Y.Node.create(M.core_filepicker.templates.listfilename);",
          "804:             var options = {",
          "805:                 viewmode : this.viewmode,",
          "806:                 appendonly : (appenditems != null),",
          "807:                 filenode : element_template,",
          "808:                 callbackcontext : this,",
          "809:                 callback : function(e, node) {",
          "810:                     if (!node.children) {",
          "811:                         if (e.node.parent && e.node.parent.origpath) {",
          "813:                             this.filepath = e.node.parent.origpath;",
          "814:                             this.filelist = e.node.parent.origlist;",
          "815:                             this.print_path();",
          "817:                         this.select_file(node);",
          "818:                     } else {",
          "820:                         this.filepath = e.node.origpath;",
          "821:                         this.filelist = e.node.origlist;",
          "822:                         this.print_path();",
          "823:                         this.content_scrolled();",
          "825:                 },",
          "826:                 dynload : this.active_repo.dynload,",
          "827:                 filepath : this.filepath,",
          "828:                 treeview_dynload : this.treeview_dynload",
          "829:             };",
          "830:             this.fpnode.one('.fp-content').fp_display_filelist(options, list, this.lazyloading);",
          "837:             var list = (appenditems != null) ? appenditems : this.filelist;",
          "838:             var element_template = Y.Node.create(M.core_filepicker.templates.iconfilename);",
          "839:             if ((appenditems == null) && (!this.filelist || !this.filelist.length)) {",
          "840:                 this.display_error(M.str.repository.nofilesavailable, 'nofilesavailable');",
          "841:                 return;",
          "843:             var options = {",
          "844:                 viewmode : this.viewmode,",
          "845:                 appendonly : (appenditems != null),",
          "846:                 filenode : element_template,",
          "847:                 callbackcontext : this,",
          "848:                 callback : function(e, node) {",
          "849:                     e.preventDefault();",
          "850:                     if(node.children) {",
          "851:                         if (this.active_repo.dynload) {",
          "852:                             this.list({'path':node.path});",
          "853:                         } else {",
          "854:                             this.filepath = node.path;",
          "855:                             this.filelist = node.children;",
          "858:                     } else {",
          "859:                         this.select_file(node);",
          "860:                     }",
          "862:             };",
          "863:             this.fpnode.one('.fp-content').fp_display_filelist(options, list, this.lazyloading);",
          "870:             var list = (appenditems != null) ? appenditems : this.filelist;",
          "871:             if (!appenditems && (!this.filelist || this.filelist.length==0) && !this.active_repo.hasmorepages) {",
          "875:             var element_template = Y.Node.create(M.core_filepicker.templates.listfilename);",
          "876:             var options = {",
          "877:                 viewmode : this.viewmode,",
          "878:                 appendonly : (appenditems != null),",
          "879:                 filenode : element_template,",
          "880:                 callbackcontext : this,",
          "881:                 sortable : !this.active_repo.hasmorepages,",
          "882:                 callback : function(e, node) {",
          "883:                     e.preventDefault();",
          "884:                     if (node.children) {",
          "886:                             this.list({'path':node.path});",
          "888:                             this.filepath = node.path;",
          "889:                             this.filelist = node.children;",
          "893:                         this.select_file(node);",
          "896:             };",
          "897:             this.fpnode.one('.fp-content').fp_display_filelist(options, list, this.lazyloading);",
          "",
          "---------------"
        ],
        "repository/lib.php||repository/lib.php": [
          "File: repository/lib.php -> repository/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1789:     public static function prepare_listing($listing) {",
          "1790:         global $OUTPUT;",
          "1792:             return $listing;",
          "1793:         }",
          "1795:         for ($i=0; $i<$len; $i++) {",
          "1797:             if (isset($file['size'])) {",
          "1798:                 $file['size'] = (int)$file['size'];",
          "1799:                 $file['size_f'] = display_size($file['size']);",
          "",
          "[Removed Lines]",
          "1791:         if (!is_array($listing) || !isset($listing['list'])) {",
          "1794:         $len = count($listing['list']);",
          "1796:             $file = & $listing['list'][$i];",
          "",
          "[Added Lines]",
          "1791:         if (is_array($listing) && isset($listing['list'])) {",
          "1792:             $files = &$listing['list'];",
          "1793:         } else if (is_object($listing) && isset($listing->list)) {",
          "1794:             $files = &$listing->list;",
          "1795:         } else {",
          "1798:         $len = count($files);",
          "1800:             if (is_object($files[$i])) {",
          "1801:                 $file = (array)$files[$i];",
          "1802:                 $converttoobject = true;",
          "1803:             } else {",
          "1804:                 $file = & $files[$i];",
          "1805:                 $converttoobject = false;",
          "1806:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1820:                     }",
          "1821:                 }",
          "1822:             }",
          "1825:                 if (get_string_manager()->string_exists($mimetype, 'mimetypes')) {",
          "1826:                     $mimetype = get_string($mimetype, 'mimetypes');",
          "1827:                 }",
          "1829:             }",
          "1832:                     $file['icon'] = $OUTPUT->pix_url('f/folder')->out(false);",
          "1835:                 }",
          "1836:             }",
          "1837:         }",
          "1838:         return $listing;",
          "1839:     }",
          "",
          "[Removed Lines]",
          "1823:             if (!isset($file['type']) && !array_key_exists('children', $file) && isset($file['title'])) {",
          "1824:                 $mimetype = mimeinfo('type', $file['title']);",
          "1828:                 $file['type'] = $mimetype;",
          "1830:             if (!isset($file['icon']) && isset($file['title'])) {",
          "1831:                 if (array_key_exists('children', $file)) {",
          "1833:                 } else {",
          "1834:                     $file['icon'] = $OUTPUT->pix_url('f/'.mimeinfo('icon', $file['title']))->out(false);",
          "",
          "[Added Lines]",
          "1833:             $isfolder = (array_key_exists('children', $file) || (isset($file['type']) && $file['type'] == 'folder'));",
          "1834:             $filename = null;",
          "1835:             if (isset($file['title'])) {",
          "1836:                 $filename = $file['title'];",
          "1837:             }",
          "1838:             else if (isset($file['fullname'])) {",
          "1839:                 $filename = $file['fullname'];",
          "1840:             }",
          "1841:             if (!isset($file['mimetype']) && !$isfolder && $filename) {",
          "1842:                 $mimetype = mimeinfo('type', $filename);",
          "1846:                 $file['mimetype'] = $mimetype;",
          "1848:             if (!isset($file['icon'])) {",
          "1849:                 if ($isfolder) {",
          "1851:                 } else if ($filename) {",
          "1852:                     $file['icon'] = $OUTPUT->pix_url('f/'.mimeinfo('icon', $filename))->out(false);",
          "1855:             if ($converttoobject) {",
          "1856:                 $files[$i] = (object)$file;",
          "1857:             }",
          "",
          "---------------"
        ],
        "repository/local/lib.php||repository/local/lib.php": [
          "File: repository/local/lib.php -> repository/local/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "221:             $node['license'] = $this->fileinfo->get_license();",
          "222:             $node['source'] = $encodedpath;",
          "223:             $node['thumbnail'] = $OUTPUT->pix_url(file_extension_icon($node['title'], 32))->out(false);",
          "224:         }",
          "225:         return $node;",
          "226:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "224:             $node['realthumbnail'] = $this->fileinfo->get_url();",
          "",
          "---------------"
        ],
        "theme/base/style/filemanager.css||theme/base/style/filemanager.css": [
          "File: theme/base/style/filemanager.css -> theme/base/style/filemanager.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: .file-picker .ygtvlabel,",
          "36: .file-picker .ygtvlabel:link,",
          "37: .file-picker .ygtvlabel:visited,",
          "39: .file-picker {font-size:12px;}",
          "40: .file-picker.fp-generallayout {width:700px;height:480px;}",
          "41: .file-picker strong {background:#FFFFCC;}",
          "",
          "[Removed Lines]",
          "5: .file-picker .ygtvtn {background: url([[pix:moodle|y/tn]]) 0 0 no-repeat;width:17px;height:22px;}",
          "7: .file-picker .ygtvtm {background: url([[pix:moodle|y/tm]]) 0 0 no-repeat;width:34px;height:22px;cursor:pointer;}",
          "9: .file-picker .ygtvtmh {background: url([[pix:moodle|y/tmh]]) 0 0 no-repeat;width:34px;height:22px;cursor:pointer;}",
          "11: .file-picker .ygtvtp {background: url([[pix:moodle|y/tp]]) 0 0 no-repeat;width:34px;height:22px;cursor:pointer;}",
          "13: .file-picker .ygtvtph {background: url([[pix:moodle|y/tph]]) 0 0 no-repeat;width:34px;height:22px;cursor:pointer;}",
          "15: .file-picker .ygtvln {background: url([[pix:moodle|y/ln]]) 0 0 no-repeat;width:17px;height:22px;}",
          "17: .file-picker .ygtvlm {background: url([[pix:moodle|y/lm]]) 0 0 no-repeat;width:34px;height:22px;cursor:pointer;}",
          "19: .file-picker .ygtvlmh {background: url([[pix:moodle|y/lmh]]) 0 0 no-repeat;width:34px;height:22px;cursor:pointer;}",
          "21: .file-picker .ygtvlp {background: url([[pix:moodle|y/lp]]) 0 0 no-repeat;width:34px;height:22px;cursor:pointer;}",
          "23: .file-picker .ygtvlph {background: url([[pix:moodle|y/lph]]) 0 0 no-repeat;width:34px;height:22px;cursor:pointer;}",
          "25: .file-picker .ygtvloading {background: url([[pix:moodle|y/loading]]) 0 0 no-repeat;width:16px;height:22px;}",
          "27: .file-picker .ygtvdepthcell {background: url([[pix:moodle|y/vline]]) 0 0 no-repeat;width:17px;height:22px;}",
          "28: .file-picker .ygtvblankdepthcell {width:17px;height:22px;}",
          "30: .file-picker .ygtvitem  table{margin-bottom:0;}",
          "31: .file-picker .ygtvitem  td {border:none;padding:0;}",
          "38: .file-picker .ygtvlabel:hover {margin-left:2px;text-decoration: none;}",
          "",
          "[Added Lines]",
          "5: .file-picker .ygtvtn, .filemanager .ygtvtn {background: url([[pix:moodle|y/tn]]) 0 0 no-repeat;width:17px;height:22px;}",
          "7: .file-picker .ygtvtm, .filemanager .ygtvtm {background: url([[pix:moodle|y/tm]]) 0 0 no-repeat;width:34px;height:22px;cursor:pointer;}",
          "9: .file-picker .ygtvtmh, .filemanager .ygtvtmh {background: url([[pix:moodle|y/tmh]]) 0 0 no-repeat;width:34px;height:22px;cursor:pointer;}",
          "11: .file-picker .ygtvtp, .filemanager .ygtvtp {background: url([[pix:moodle|y/tp]]) 0 0 no-repeat;width:34px;height:22px;cursor:pointer;}",
          "13: .file-picker .ygtvtph, .filemanager .ygtvtph {background: url([[pix:moodle|y/tph]]) 0 0 no-repeat;width:34px;height:22px;cursor:pointer;}",
          "15: .file-picker .ygtvln, .filemanager .ygtvln {background: url([[pix:moodle|y/ln]]) 0 0 no-repeat;width:17px;height:22px;}",
          "17: .file-picker .ygtvlm, .filemanager .ygtvlm {background: url([[pix:moodle|y/lm]]) 0 0 no-repeat;width:34px;height:22px;cursor:pointer;}",
          "19: .file-picker .ygtvlmh, .filemanager .ygtvlmh {background: url([[pix:moodle|y/lmh]]) 0 0 no-repeat;width:34px;height:22px;cursor:pointer;}",
          "21: .file-picker .ygtvlp, .filemanager .ygtvlp {background: url([[pix:moodle|y/lp]]) 0 0 no-repeat;width:34px;height:22px;cursor:pointer;}",
          "23: .file-picker .ygtvlph, .filemanager .ygtvlph {background: url([[pix:moodle|y/lph]]) 0 0 no-repeat;width:34px;height:22px;cursor:pointer;}",
          "25: .file-picker .ygtvloading, .filemanager .ygtvloading {background: url([[pix:moodle|y/loading]]) 0 0 no-repeat;width:16px;height:22px;}",
          "27: .file-picker .ygtvdepthcell, .filemanager .ygtvdepthcell {background: url([[pix:moodle|y/vline]]) 0 0 no-repeat;width:17px;height:22px;}",
          "28: .file-picker .ygtvblankdepthcell, .filemanager .ygtvblankdepthcell {width:17px;height:22px;}",
          "30: .file-picker .ygtvitem  table, .filemanager .ygtvitem  table{margin-bottom:0;}",
          "31: .file-picker .ygtvitem  td, .filemanager .ygtvitem  td {border:none;padding:0;}",
          "38: .file-picker .ygtvlabel:hover,",
          "39: .filemanager .ygtvlabel,",
          "40: .filemanager .ygtvlabel:link,",
          "41: .filemanager .ygtvlabel:visited,",
          "42: .filemanager .ygtvlabel:hover {margin-left:2px;text-decoration: none;}",
          "43: .file-picker .fp-treeview .fp-folder .fp-icon,",
          "44: .filemanager .fp-treeview .fp-folder .fp-icon {display:none;}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89: .filemanager-toolbar a {border: 1px solid #AACCEE;background: #F4FAFF;color: black;padding: 3px;}",
          "90: .filemanager-toolbar a:hover {background: #FFFFFF;}",
          "91: .filemanager-toolbar .helplink a {border: 0px; background: transparent;}",
          "94: .filemanager-container {padding: 5px;margin: 6px 0;background: #E9F4FF;border: #AACCEE 1px solid;position: relative;}",
          "95: .filemanager-container ul{margin:0;padding:0;}",
          "96: .filemanager-container ul li{white-space:nowrap;list-style-type:none;}",
          "",
          "[Removed Lines]",
          "92: .fm-breadcrumb {margin:0;}",
          "93: .filemanager .fm-breadcrumb.fm-empty {display:none;}",
          "",
          "[Added Lines]",
          "99: .fp-pathbar {margin:0;}",
          "100: .filemanager .fp-pathbar.empty {display:none;}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "106: .filemanager-container,",
          "107: .filepicker-filelist {overflow:hidden;}",
          "110: .filemanager.fm-loading .filemanager-toolbar,",
          "112: .filemanager.fm-loading .filemanager-container {display:none;}",
          "114: .filemanager.fm-loaded .filemanager-loading {display:none;}",
          "121: .filemanager.fm-maxfiles .dndupload-message {display:none;}",
          "123: .filemanager .fm-empty-container {display:none;}",
          "124: .filemanager.fm-noitems .fm-empty-container {display:block;}",
          "127: .filemanager .filemanager-updating {display:none;text-align:center;}",
          "128: .filemanager.fm-updating .filemanager-updating {display:block;}",
          "",
          "[Removed Lines]",
          "109: .filemanager.fm-loading .fm-breadcrumb,",
          "111: .filemanager.fm-loading .filemanager-updating,",
          "116: .filemanager.fm-nofiles .fm-btn-download {display:none;}",
          "118: .filemanager.fm-nomkdir .fm-btn-mkdir {display:none;}",
          "120: .filemanager.fm-maxfiles .fm-btn-add {display:none;}",
          "125: .filemanager.fm-noitems .filemanager-container .fm-filelist {display:none;}",
          "129: .filemanager.fm-updating .filemanager-container {display:none;}",
          "",
          "[Added Lines]",
          "116: .filemanager.fm-loading .fp-pathbar,",
          "122: .filemanager.fm-nofiles .fp-btn-download {display:none;}",
          "124: .filemanager.fm-nomkdir .fp-btn-mkdir {display:none;}",
          "126: .filemanager.fm-maxfiles .fp-btn-add {display:none;}",
          "131: .filemanager.fm-noitems .filemanager-container .fp-content {display:none;}",
          "135: .filemanager.fm-updating .fm-content-wrapper {display:none;}",
          "136: .filemanager .fp-iconview .fp-file {float:left;text-align:center;}",
          "137: .filemanager .fp-iconview .fp-file div {overflow: hidden;}",
          "138: .filemanager .fp-iconview .fp-file .fp-filename {height:48px;text-align:center;min-width:50px;}",
          "140: .filemanager .fp-select .fp-select-loading {display:none;}",
          "141: .filemanager .fp-select.loading .fp-select-loading {display:block;}",
          "142: .filemanager .fp-select.loading form {display:none;}",
          "146: .filemanager .fp-select.fp-folder .fp-license,",
          "148: .filemanager .fp-select.fp-folder .fp-author,",
          "149: .filemanager .fp-select.fp-file .fp-file-unzip,",
          "150: .filemanager .fp-select.fp-folder .fp-file-unzip,",
          "151: .filemanager .fp-select.fp-file .fp-file-zip,",
          "152: .filemanager .fp-select.fp-zip .fp-file-zip {display:none;}",
          "153: .filemanager .fp-select .fp-file-setmain {display:none;}",
          "154: .filemanager .fp-select.fp-cansetmain .fp-file-setmain {display:inline-block;}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9dbdf31f8c1569af0bead5bf47a58d74acd2fb64",
      "candidate_info": {
        "commit_hash": "9dbdf31f8c1569af0bead5bf47a58d74acd2fb64",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/9dbdf31f8c1569af0bead5bf47a58d74acd2fb64",
        "files": [
          "files/renderer.php",
          "lang/en/repository.php",
          "lib/filebrowser/file_info.php",
          "lib/form/filemanager.js",
          "lib/outputrequirementslib.php",
          "repository/draftfiles_ajax.php",
          "theme/base/style/filemanager.css"
        ],
        "message": "MDL-32867 Display a list of references pointing to the file in filemanager",
        "before_after_code_files": [
          "files/renderer.php||files/renderer.php",
          "lang/en/repository.php||lang/en/repository.php",
          "lib/filebrowser/file_info.php||lib/filebrowser/file_info.php",
          "lib/form/filemanager.js||lib/form/filemanager.js",
          "lib/outputrequirementslib.php||lib/outputrequirementslib.php",
          "repository/draftfiles_ajax.php||repository/draftfiles_ajax.php",
          "theme/base/style/filemanager.css||theme/base/style/filemanager.css"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/form/filemanager.js||lib/form/filemanager.js",
            "lib/outputrequirementslib.php||lib/outputrequirementslib.php"
          ],
          "candidate": [
            "lib/form/filemanager.js||lib/form/filemanager.js",
            "lib/outputrequirementslib.php||lib/outputrequirementslib.php"
          ]
        }
      },
      "candidate_diff": {
        "files/renderer.php||files/renderer.php": [
          "File: files/renderer.php -> files/renderer.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "371:             <td class=\"mdl-left\"><select></select></td></tr>",
          "372:             <tr class=\"{!}fp-original\"><td class=\"mdl-right\"><label>'.get_string('original', 'repository').'</label>:</td>",
          "373:             <td class=\"mdl-left\"><span class=\"fp-originloading\">'.$icon_progress.' '.$strloading.'</span><span class=\"fp-value\"/></td></tr>",
          "374:         </table>",
          "375:     </form>",
          "376:     <p class=\"{!}fp-thumbnail\"></p>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "379:             <tr class=\"{!}fp-reflist\"><td class=\"mdl-right\"><label>'.get_string('referenceslist', 'repository').'</label>:</td>",
          "380:             <td class=\"mdl-left\"><p class=\"{!}fp-refcount\"/><span class=\"fp-reflistloading\">'.$icon_progress.' '.$strloading.'</span><ul class=\"fp-value\"/></td></tr>",
          "",
          "---------------"
        ],
        "lang/en/repository.php||lang/en/repository.php": [
          "File: lang/en/repository.php -> lang/en/repository.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "168: $string['popupblockeddownload'] = 'The downloading window is blocked, please allow the popup window, and try again.';",
          "169: $string['preview'] = 'Preview';",
          "170: $string['readonlyinstance'] = 'You cannot edit/delete a read-only instance';",
          "171: $string['refresh'] = 'Refresh';",
          "172: $string['refreshnonjsfilepicker'] = 'Please close this window and refresh non-javascript file picker';",
          "173: $string['removed'] = 'Repository removed';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "171: $string['referencesexist'] = 'There are {$a} alias/shortcut files that use this file as their source';",
          "172: $string['referenceslist'] = 'Aliases/Shortcuts';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "199: $string['upload'] = 'Upload this file';",
          "200: $string['uploading'] = 'Uploading...';",
          "201: $string['uploadsucc'] = 'The file has been uploaded successfully';",
          "202: $string['uselatestfile'] = 'Use latest file';",
          "203: $string['usercontextrepositorydisabled'] = 'You cannot edit this repository in user context';",
          "204: $string['usenonjsfilemanager'] = 'Open file manager in new window';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204: $string['undisclosedreference'] = '(Undisclosed)';",
          "",
          "---------------"
        ],
        "lib/filebrowser/file_info.php||lib/filebrowser/file_info.php": [
          "File: lib/filebrowser/file_info.php -> lib/filebrowser/file_info.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "226:         return 0;",
          "227:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "235:     public function get_readable_fullname() {",
          "236:         $fpath = array();",
          "237:         for ($parent = $this; $parent; $parent = $parent->get_parent()) {",
          "238:             array_unshift($fpath, $parent->get_visible_name());",
          "239:         }",
          "240:         return join('/', $fpath);",
          "241:     }",
          "",
          "---------------"
        ],
        "lib/form/filemanager.js||lib/form/filemanager.js": [
          "File: lib/form/filemanager.js -> lib/form/filemanager.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "831:             });",
          "832:             selectnode.all('.fp-author input, .fp-license select').set('disabled',(node.type == 'folder')?'disabled':'');",
          "835:             for (var i in attrs) {",
          "836:                 if (selectnode.one('.fp-'+attrs[i])) {",
          "837:                     var value = (node[attrs[i]+'_f']) ? node[attrs[i]+'_f'] : (node[attrs[i]] ? node[attrs[i]] : '');",
          "",
          "[Removed Lines]",
          "834:             var attrs = ['datemodified','datecreated','size','dimensions','original'];",
          "",
          "[Added Lines]",
          "834:             var attrs = ['datemodified','datecreated','size','dimensions','original','reflist'];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "869:                     }",
          "870:                 }, false);",
          "871:             }",
          "873:             this.selectui.show();",
          "874:         },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "873:             selectnode.one('.fp-refcount').setContent(node.refcount ? M.util.get_string('referencesexist', 'repository', node.refcount) : '');",
          "874:             if (node.refcount && !node.reflist) {",
          "875:                 selectnode.one('.fp-reflist').removeClass('fp-unknown').addClass('fp-loading');",
          "876:                 this.request({",
          "877:                     action: 'getreferences',",
          "878:                     scope: this,",
          "879:                     params: {'filepath':node.filepath,'filename':node.fullname},",
          "880:                     callback: function(id, obj, args) {",
          "882:                         var scope = args.scope;",
          "883:                         if (scope.selectui.fileinfo && node &&",
          "884:                                 scope.selectui.fileinfo.filepath == node.filepath &&",
          "885:                                 scope.selectui.fileinfo.fullname == node.fullname) {",
          "886:                             selectnode.one('.fp-reflist').removeClass('fp-loading');",
          "887:                             if (obj.references) {",
          "888:                                 node.reflist = '';",
          "889:                                 for (var i in obj.references) {",
          "890:                                     node.reflist += '<li>'+obj.references[i]+'</li>';",
          "891:                                 }",
          "892:                                 selectnode.one('.fp-reflist .fp-value').setContent(node.reflist);",
          "893:                             } else {",
          "894:                                 selectnode.one('.fp-reflist .fp-value').setContent('');",
          "895:                             }",
          "896:                         }",
          "897:                     }",
          "898:                 }, false);",
          "899:             }",
          "",
          "---------------"
        ],
        "lib/outputrequirementslib.php||lib/outputrequirementslib.php": [
          "File: lib/outputrequirementslib.php -> lib/outputrequirementslib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "445:                                                         array('nofilesattached', 'repository'), array('filepicker', 'repository'), array('logout', 'repository'),",
          "446:                                                         array('nofilesavailable', 'repository'), array('norepositoriesavailable', 'repository'),",
          "447:                                                         array('fileexistsdialogheader', 'repository'), array('fileexistsdialog_editor', 'repository'),",
          "449:                                                     ));",
          "450:                     break;",
          "451:                 case 'core_comment':",
          "",
          "[Removed Lines]",
          "448:                                                         array('fileexistsdialog_filemanager', 'repository'), array('renameto', 'repository')",
          "",
          "[Added Lines]",
          "448:                                                         array('fileexistsdialog_filemanager', 'repository'), array('renameto', 'repository'),",
          "449:                                                         array('referencesexist', 'repository')",
          "",
          "---------------"
        ],
        "repository/draftfiles_ajax.php||repository/draftfiles_ajax.php": [
          "File: repository/draftfiles_ajax.php -> repository/draftfiles_ajax.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "395:         }",
          "396:         die;",
          "398:     default:",
          "400:         echo json_encode(false);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "398:     case 'getreferences':",
          "399:         $filename    = required_param('filename', PARAM_FILE);",
          "400:         $filepath    = required_param('filepath', PARAM_PATH);",
          "402:         $fs = get_file_storage();",
          "403:         $file = $fs->get_file($user_context->id, 'user', 'draft', $draftid, $filepath, $filename);",
          "404:         if (!$file) {",
          "405:             echo json_encode(false);",
          "406:         } else {",
          "407:             $source = unserialize($file->get_source());",
          "408:             $return = array('filename' => $filename, 'filepath' => $filepath, 'references' => array());",
          "409:             $browser = get_file_browser();",
          "410:             if (isset($source->original)) {",
          "411:                 $reffiles = $fs->search_references($source->original);",
          "412:                 foreach ($reffiles as $reffile) {",
          "413:                     $refcontext = get_context_instance_by_id($reffile->get_contextid());",
          "414:                     $fileinfo = $browser->get_file_info($refcontext, $reffile->get_component(), $reffile->get_filearea(), $reffile->get_itemid(), $reffile->get_filepath(), $reffile->get_filename());",
          "415:                     if (empty($fileinfo)) {",
          "416:                         $return['references'][] = get_string('undisclosedreference', 'repository');",
          "417:                     } else {",
          "418:                         $return['references'][] = $fileinfo->get_readable_fullname();",
          "419:                     }",
          "420:                 }",
          "421:             }",
          "422:             echo json_encode((object)$return);",
          "423:         }",
          "424:         die;",
          "",
          "---------------"
        ],
        "theme/base/style/filemanager.css||theme/base/style/filemanager.css": [
          "File: theme/base/style/filemanager.css -> theme/base/style/filemanager.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "291: .filemanager.fp-select .fp-original .fp-originloading {display:none;}",
          "292: .filemanager.fp-select .fp-original.fp-loading .fp-originloading {display:inline;}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "294: .filemanager.fp-select .fp-reflist.fp-unknown {display:none;}",
          "295: .filemanager.fp-select .fp-reflist .fp-reflistloading {display:none;}",
          "296: .filemanager.fp-select .fp-reflist.fp-loading .fp-reflistloading {display:inline;}",
          "297: .filemanager.fp-select .fp-reflist .fp-value {max-width:400px;max-height:50px;overflow:auto;}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4adecd7beb1ef29691e61d4f568b4f0f6fec7dbd",
      "candidate_info": {
        "commit_hash": "4adecd7beb1ef29691e61d4f568b4f0f6fec7dbd",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/4adecd7beb1ef29691e61d4f568b4f0f6fec7dbd",
        "files": [
          "repository/filepicker.js"
        ],
        "message": "MDL-31901: brushing the filepicker code\n\n- use the same function for displaying request result for list/search/login/logout commands since sometimes we can not predict what kind of result is going to be returned\n- prevent default behaviour for links, so ### does not appear in URL\n- use flag issearchresult as received in the response from repository because we can't guess it right sometimes\n- do not make excessive AJAX request when user switches to list view",
        "before_after_code_files": [
          "repository/filepicker.js||repository/filepicker.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "repository/filepicker.js||repository/filepicker.js"
          ],
          "candidate": [
            "repository/filepicker.js||repository/filepicker.js"
          ]
        }
      },
      "candidate_diff": {
        "repository/filepicker.js||repository/filepicker.js": [
          "File: repository/filepicker.js -> repository/filepicker.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: M.core_filepicker.instances = M.core_filepicker.instances || {};",
          "47: M.core_filepicker.active_filepicker = null;",
          "",
          "[Removed Lines]",
          "54: M.core_filepicker.select_file = function(file) {",
          "55:     var fileinfo = {};",
          "56:     fileinfo['title'] = file.title;",
          "57:     fileinfo['source'] = file.reference;",
          "58:     fileinfo['thumbnail'] = file.thumbnail;",
          "59:     M.core_filepicker.active_filepicker.select_file(fileinfo);",
          "60: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "381:                 tmpNode.isLeaf = true;",
          "382:             }",
          "383:         },",
          "386:             if (this.active_repo.issearchresult) {",
          "389:                 this.view_as_icons();",
          "390:             } else {",
          "394:                 } else {",
          "403:                 }",
          "404:             }",
          "405:         },",
          "",
          "[Removed Lines]",
          "384:         view_files: function(page) {",
          "385:             var p= page?page:null;",
          "391:                 if (this.objecttag) {",
          "393:                     this.create_object_container(this.objecttag);",
          "395:                     this.viewbar.set('disabled', false);",
          "396:                     if (this.viewmode == 1) {",
          "397:                         this.view_as_icons();",
          "398:                     } else if (this.viewmode == 2) {",
          "399:                         this.view_as_list(p);",
          "400:                     } else {",
          "401:                         this.view_as_icons();",
          "402:                     }",
          "",
          "[Added Lines]",
          "371:         view_files: function() {",
          "377:                 this.viewbar.set('disabled', false);",
          "378:                 if (this.viewmode == 1) {",
          "379:                     this.view_as_icons();",
          "380:                 } else if (this.viewmode == 2) {",
          "381:                     this.view_as_list();",
          "383:                     this.view_as_icons();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "414:                 path:node.path?node.path:'',",
          "415:                 page:node.page?args.page:'',",
          "416:                 callback: function(id, obj, args) {",
          "418:                     var list = obj.list;",
          "419:                     scope.viewbar.set('disabled', false);",
          "420:                     scope.parse_repository_options(obj);",
          "",
          "[Removed Lines]",
          "417:                     obj.issearchresult = false;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "425:                 }",
          "426:             }, false);",
          "427:         },",
          "429:             var scope = this;",
          "490:                 }",
          "492:         },",
          "493:         view_as_icons: function() {",
          "494:             var scope = this;",
          "",
          "[Removed Lines]",
          "428:         view_as_list: function(p) {",
          "430:             var page = null;",
          "431:             if (!p) {",
          "432:                 if (scope.active_repo.page) {",
          "433:                     page = scope.active_repo.page;",
          "434:                 }",
          "435:             } else {",
          "436:                 page = p;",
          "437:             }",
          "438:             scope.request({",
          "439:                 action:'list',",
          "440:                 client_id: scope.options.client_id,",
          "441:                 repository_id: scope.active_repo.id,",
          "442:                 path:'',",
          "443:                 page:page,",
          "444:                 callback: function(id, obj, args) {",
          "445:                     scope.parse_repository_options(obj);",
          "446:                     if (obj.login) {",
          "447:                         scope.viewbar.set('disabled', true);",
          "448:                         scope.print_login(obj);",
          "449:                         return;",
          "450:                     }",
          "451:                     var client_id = scope.options.client_id;",
          "452:                     var dynload = scope.active_repo.dynload;",
          "453:                     var list = obj.list;",
          "454:                     var panel_id = '#panel-'+client_id;",
          "455:                     scope.viewmode = 2;",
          "456:                     Y.one(panel_id).set('innerHTML', '');",
          "458:                     scope.print_header();",
          "460:                     var html = '<div class=\"fp-tree-panel\" id=\"treeview-'+client_id+'\">';",
          "461:                     if (list && list.length==0) {",
          "462:                         html += '<div class=\"fp-emptylist mdl-align\">' +M.str.repository.nofilesavailable+'</div>';",
          "463:                     }",
          "464:                     html += '</div>';",
          "466:                     var tree = Y.Node.create(html);",
          "467:                     Y.one(panel_id).appendChild(tree);",
          "468:                     if (!list || list.length==0) {",
          "469:                         return;",
          "470:                     }",
          "472:                     scope.treeview = new YAHOO.widget.TreeView('treeview-'+client_id);",
          "473:                     if (dynload) {",
          "474:                         scope.treeview.setDynamicLoad(scope.treeview_dynload, 1);",
          "475:                     }",
          "477:                     for(k in list) {",
          "478:                         scope.build_tree(list[k], scope.treeview.getRoot());",
          "479:                     }",
          "480:                     scope.treeview.subscribe('clickEvent', function(e){",
          "481:                         if(e.node.isLeaf){",
          "482:                             var fileinfo = {};",
          "483:                             fileinfo['title'] = e.node.data.filename;",
          "484:                             fileinfo['source'] = e.node.data.source;",
          "485:                             fileinfo['thumbnail'] = e.node.data.thumbnail;",
          "486:                             scope.select_file(fileinfo);",
          "487:                         }",
          "488:                     });",
          "489:                     scope.treeview.draw();",
          "491:             }, true);",
          "",
          "[Added Lines]",
          "408:         view_as_list: function() {",
          "410:             var client_id = scope.options.client_id;",
          "411:             var dynload = scope.active_repo.dynload;",
          "412:             var list = this.filelist;",
          "413:             var panel_id = '#panel-'+client_id;",
          "414:             scope.viewmode = 2;",
          "415:             Y.one(panel_id).set('innerHTML', '');",
          "416:             scope.print_header();",
          "418:             var html = '<div class=\"fp-tree-panel\" id=\"treeview-'+client_id+'\">';",
          "419:             if (list && list.length==0) {",
          "420:                 html += '<div class=\"fp-emptylist mdl-align\">' +M.str.repository.nofilesavailable+'</div>';",
          "421:             }",
          "422:             html += '</div>';",
          "424:             var tree = Y.Node.create(html);",
          "425:             Y.one(panel_id).appendChild(tree);",
          "426:             if (!list || list.length==0) {",
          "427:                 return;",
          "428:             }",
          "430:             scope.treeview = new YAHOO.widget.TreeView('treeview-'+client_id);",
          "431:             if (dynload) {",
          "432:                 scope.treeview.setDynamicLoad(scope.treeview_dynload, 1);",
          "433:             }",
          "435:             for(k in list) {",
          "436:                 scope.build_tree(list[k], scope.treeview.getRoot());",
          "437:             }",
          "438:             scope.treeview.subscribe('clickEvent', function(e){",
          "439:                 if(e.node.isLeaf){",
          "440:                     var fileinfo = {};",
          "441:                     fileinfo['title'] = e.node.data.filename;",
          "442:                     fileinfo['source'] = e.node.data.source;",
          "443:                     fileinfo['thumbnail'] = e.node.data.thumbnail;",
          "444:                     scope.select_file(fileinfo);",
          "446:             });",
          "447:             scope.treeview.draw();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "564:                 var dynload = this.active_repo.dynload;",
          "565:                 if(node.children) {",
          "566:                     y_file.on('click', function(e, p) {",
          "567:                         if(dynload) {",
          "568:                             var params = {'path':p.path};",
          "569:                             scope.list(params);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "523:                         e.preventDefault();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "573:                         }",
          "574:                     }, this, node);",
          "575:                     y_title.on('click', function(e, p, id){",
          "576:                         var icon = Y.one(id);",
          "577:                         icon.simulate('click');",
          "578:                     }, this, node, '#'+link.id);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "533:                         e.preventDefault();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "584:                     fileinfo['haslicense'] = list[k].haslicense?true:false;",
          "585:                     fileinfo['hasauthor'] = list[k].hasauthor?true:false;",
          "586:                     y_title.on('click', function(e, args) {",
          "587:                         this.select_file(args);",
          "588:                     }, this, fileinfo);",
          "589:                     y_file.on('click', function(e, args) {",
          "590:                         this.select_file(args);",
          "591:                     }, this, fileinfo);",
          "592:                 }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "545:                         e.preventDefault();",
          "549:                         e.preventDefault();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "612:                 path.setStyle('display', 'none');",
          "613:             }",
          "614:             var panel = Y.one('#panel-'+client_id);",
          "616:             var form_id = 'fp-rename-form-'+client_id;",
          "617:             var html = '<div class=\"fp-rename-form\" id=\"'+form_id+'\">';",
          "618:             html += '<p><img src=\"'+args.thumbnail+'\" /></p>';",
          "",
          "[Removed Lines]",
          "615:             panel.set('innerHTML', '');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "623:             var le_checked = '';",
          "624:             var le_style = '';",
          "647:             }",
          "649:             if (!args.hasauthor) {",
          "",
          "[Removed Lines]",
          "625:             var returntypes = this.options.repositories[this.active_repo.id].return_types;",
          "627:             if (returntypes == 1) {",
          "629:                 html += '<input type=\"checkbox\" id=\"linkexternal-'+client_id+'\" style=\"display:none\" value=\"checked\" checked />';",
          "630:             } else if (returntypes == 4) {",
          "631:                 html += '<input type=\"checkbox\" id=\"filereference-'+client_id+'\" style=\"display:none\" value=\"checked\" checked />';",
          "632:             } else {",
          "633:                 if (((returntypes & 1) == 1) && ((this.options.return_types & 1) == 1)) {",
          "635:                     html += '<tr><td></td><td class=\"mdl-left\"><input type=\"checkbox\" id=\"linkexternal-'+client_id+'\" value=\"\" />'+M.str.repository.linkexternal+'</td></tr>';",
          "636:                 }",
          "638:                 if (((returntypes & 4) == 4) && ((this.options.return_types & 4) == 4)) {",
          "640:                     html += '<tr><td></td><td class=\"mdl-left\"><input type=\"checkbox\" id=\"filereference-'+client_id+'\" value=\"\" />'+M.str.repository.uselatestfile+'</td></tr>';",
          "641:                 }",
          "643:                 if (((returntypes & 4) != 4) && ((returntypes & 1) != 1)) {",
          "644:                     html += '<input type=\"checkbox\" id=\"linkexternal-'+client_id+'\" style=\"display:none\" value=\"checked\" />';",
          "645:                     html += '<input type=\"checkbox\" id=\"filereference-'+client_id+'\" style=\"display:none\" value=\"checked\" />';",
          "646:                 }",
          "",
          "[Added Lines]",
          "584:             if (this.options.repositories[this.active_repo.id].return_types == 1) {",
          "586:                 le_checked = 'checked';",
          "587:                 le_style = ' style=\"display:none;\"';",
          "588:             } else if(this.options.repositories[this.active_repo.id].return_types == 2) {",
          "590:                 le_style = ' style=\"display:none;\"';",
          "591:             }",
          "592:             if ((this.options.externallink && this.options.env == 'editor' && this.options.return_types != 1)) {",
          "593:                 html += '<tr'+le_style+'><td></td><td class=\"mdl-left\"><input type=\"checkbox\" id=\"linkexternal-'+client_id+'\" value=\"\" '+le_checked+' />'+M.str.repository.linkexternal+'</td></tr>';",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "705:                     params.savepath = '/';",
          "708:                         var linkexternal = Y.one('#linkexternal-'+client_id);",
          "709:                         if (linkexternal && linkexternal.get('checked')) {",
          "710:                             params['linkexternal'] = 'yes';",
          "",
          "[Removed Lines]",
          "707:                     if (this.options.return_types != 1) {",
          "",
          "[Added Lines]",
          "654:                     if ( this.options.return_types != 1 ) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "719:                     params['linkexternal'] = 'yes';",
          "720:                 }",
          "731:                 this.wait('download', title);",
          "732:                 this.request({",
          "733:                     action:'download',",
          "",
          "[Removed Lines]",
          "722:                 if (this.options.return_types != 4) {",
          "723:                     var usefilereference = Y.one('#filereference-'+client_id);",
          "724:                     if (usefilereference && usefilereference.get('checked')) {",
          "725:                         params['usefilereference'] = 'yes';",
          "726:                     }",
          "727:                 } else {",
          "728:                     params['usefilereference'] = 'yes';",
          "729:                 }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "833:             var view_icons = {label: M.str.repository.iconview, value: 't', 'checked': true,",
          "834:                 onclick: {",
          "837:                     }",
          "838:                 }",
          "839:             };",
          "840:             var view_listing = {label: M.str.repository.listview, value: 'l',",
          "841:                 onclick: {",
          "844:                     }",
          "845:                 }",
          "846:             };",
          "",
          "[Removed Lines]",
          "835:                     fn: function(){",
          "836:                         scope.view_as_icons();",
          "842:                     fn: function(){",
          "843:                         scope.view_as_list();",
          "",
          "[Added Lines]",
          "773:                     fn: function(e){",
          "774:                         e.preventDefault();",
          "775:                         scope.viewmode = 1;",
          "776:                         scope.view_files();",
          "782:                     fn: function(e){",
          "783:                         e.preventDefault();",
          "784:                         scope.viewmode = 2;",
          "785:                         scope.view_files();",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "868:                     list.append('<li id=\"'+id+'\"><a class=\"fp-repo-name\" id=\"'+link_id+'\" href=\"###\">'+repository.name+'</a></li>');",
          "869:                     Y.one('#'+link_id).prepend('<img src=\"'+repository.icon+'\" width=\"16\" height=\"16\" />&nbsp;');",
          "870:                     Y.one('#'+link_id).on('click', function(e, scope, repository_id) {",
          "871:                         YAHOO.util.Cookie.set('recentrepository', repository_id);",
          "872:                         scope.repository_id = repository_id;",
          "873:                         this.list({'repo_id':repository_id});",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "813:                         e.preventDefault();",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "886:         parse_repository_options: function(data) {",
          "887:             this.filelist = data.list?data.list:null;",
          "888:             this.filepath = data.path?data.path:null;",
          "890:             this.active_repo = {};",
          "892:             this.active_repo.dynload = data.dynload?data.dynload:false;",
          "893:             this.active_repo.pages = Number(data.pages?data.pages:null);",
          "894:             this.active_repo.page = Number(data.page?data.page:null);",
          "",
          "[Removed Lines]",
          "889:             this.objecttag = data.object?data.object:null;",
          "891:             this.active_repo.issearchresult = Boolean(data.issearchresult);",
          "",
          "[Added Lines]",
          "833:             this.active_repo.issearchresult = data.issearchresult?true:false;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1035:                         'path': '',",
          "1036:                         'client_id': client_id,",
          "1037:                         'repository_id': repository_id,",
          "1042:                     }, true);",
          "1043:                 }, this);",
          "1044:             }",
          "",
          "[Removed Lines]",
          "1038:                         'callback': function(id, o, args) {",
          "1039:                             scope.parse_repository_options(o);",
          "1040:                             scope.view_files();",
          "1041:                         }",
          "",
          "[Added Lines]",
          "980:                         'callback': this.display_response",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1072:                             client_id: client_id,",
          "1073:                             repository_id: repository_id,",
          "1074:                             form: {id: 'fp-form-'+scope.options.client_id,upload:false,useDisabled:true},",
          "1080:                     }, true);",
          "1081:                 }, this);",
          "1082:             }",
          "",
          "[Removed Lines]",
          "1075:                             callback: function(id, o, args) {",
          "1076:                                 o.issearchresult = true;",
          "1077:                                 scope.parse_repository_options(o);",
          "1078:                                 scope.view_files();",
          "1079:                             }",
          "",
          "[Added Lines]",
          "1014:                             callback: scope.display_response",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1110:             }, this);",
          "1112:         },",
          "1134:             }",
          "1147:         },",
          "1148:         list: function(args) {",
          "1150:             if (!args) {",
          "1151:                 args = {};",
          "1152:             }",
          "1153:             if (!args.repo_id) {",
          "1155:             }",
          "1159:                 repository_id: args.repo_id,",
          "1189:             }, true);",
          "1190:         },",
          "1201:         create_upload_form: function(data) {",
          "1202:             var client_id = this.options.client_id;",
          "1203:             Y.one('#panel-'+client_id).set('innerHTML', '');",
          "",
          "[Removed Lines]",
          "1113:         search: function(args) {",
          "1114:             var data = this.logindata;",
          "1115:             var params = {};",
          "1117:             for (var k in data) {",
          "1118:                 if(data[k].type!='popup') {",
          "1119:                     var el = document.getElementsByName(data[k].name)[0];",
          "1120:                     params[data[k].name] = '';",
          "1121:                     if(el.type == 'checkbox') {",
          "1122:                         params[data[k].name] = el.checked;",
          "1123:                     } else if(el.type == 'radio') {",
          "1124:                         var tmp = document.getElementsByName(data[k].name);",
          "1125:                         for(var i in tmp) {",
          "1126:                             if (tmp[i].checked) {",
          "1127:                                 params[data[k].name] = tmp[i].value;",
          "1128:                             }",
          "1129:                         }",
          "1130:                     } else {",
          "1131:                         params[data[k].name] = el.value;",
          "1132:                     }",
          "1133:                 }",
          "1135:             this.request({",
          "1136:                     scope: scope,",
          "1137:                     action:'search',",
          "1138:                     client_id: client_id,",
          "1139:                     repository_id: repository_id,",
          "1140:                     form: {id: 'fp-form-'+scope.options.client_id,upload:false,useDisabled:true},",
          "1141:                     callback: function(id, o, args) {",
          "1142:                         o.issearchresult = true;",
          "1143:                         scope.parse_repository_options(o);",
          "1144:                         scope.view_files();",
          "1145:                     }",
          "1146:             }, true);",
          "1149:             var scope = this;",
          "1154:                 args.repo_id = scope.active_repo.id;",
          "1156:             scope.request({",
          "1157:                 action:'list',",
          "1158:                 client_id: scope.options.client_id,",
          "1160:                 path:args.path?args.path:'',",
          "1161:                 page:args.page?args.page:'',",
          "1162:                 callback: function(id, obj, args) {",
          "1163:                     Y.all('#fp-list-'+scope.options.client_id+' li a').setStyle('backgroundColor', 'transparent');",
          "1164:                     var el = Y.one('#repository-'+scope.options.client_id+'-'+obj.repo_id+'-link');",
          "1165:                     if (el) {",
          "1166:                         el.setStyle('backgroundColor', '#AACCEE');",
          "1167:                     }",
          "1168:                     if (obj.login) {",
          "1169:                         scope.viewbar.set('disabled', true);",
          "1170:                         scope.print_login(obj);",
          "1171:                     } else if (obj.upload) {",
          "1172:                         scope.viewbar.set('disabled', true);",
          "1173:                         scope.parse_repository_options(obj);",
          "1174:                         scope.create_upload_form(obj);",
          "1176:                     } else if (obj.object) {",
          "1177:                         M.core_filepicker.active_filepicker = scope;",
          "1178:                         scope.viewbar.set('disabled', true);",
          "1179:                         scope.parse_repository_options(obj);",
          "1180:                         scope.create_object_container(obj.object);",
          "1182:                     } else if (obj.list) {",
          "1183:                         obj.issearchresult = false;",
          "1184:                         scope.viewbar.set('disabled', false);",
          "1185:                         scope.parse_repository_options(obj);",
          "1186:                         scope.view_files();",
          "1187:                     }",
          "1188:                 }",
          "1191:         create_object_container: function(data) {",
          "1192:             var client_id = this.options.client_id;",
          "1193:             Y.one('#panel-'+client_id).set('innerHTML', '');",
          "1194:             var types = this.options.accepted_types;",
          "1195:             var panel = Y.one('#panel-'+client_id);",
          "1196:             var str = '<object data=\"'+data.src+'\" type=\"'+data.type+'\" width=\"98%\" height=\"98%\" id=\"container_object\" class=\"fp-object-container mdl-align\">';",
          "1197:             str += '</object>';",
          "1198:             var container = Y.Node.create(str);",
          "1199:             Y.one('#panel-'+client_id).appendChild(container);",
          "1200:         },",
          "",
          "[Added Lines]",
          "1048:         display_response: function(id, obj, args) {",
          "1049:             var scope = args.scope",
          "1051:             Y.all('#fp-list-'+scope.options.client_id+' li a').setStyle('backgroundColor', 'transparent');",
          "1052:             var el = Y.one('#repository-'+scope.options.client_id+'-'+obj.repo_id+'-link');",
          "1053:             if (el) {",
          "1054:                 el.setStyle('backgroundColor', '#AACCEE');",
          "1055:             }",
          "1057:             if (obj.login) {",
          "1058:                 scope.viewbar.set('disabled', true);",
          "1059:                 scope.print_login(obj);",
          "1060:             } else if (obj.upload) {",
          "1061:                 scope.viewbar.set('disabled', true);",
          "1062:                 scope.parse_repository_options(obj);",
          "1063:                 scope.create_upload_form(obj);",
          "1064:             } else if (obj.iframe) {",
          "1066:             } else if (obj.list) {",
          "1067:                 scope.viewbar.set('disabled', false);",
          "1068:                 scope.parse_repository_options(obj);",
          "1069:                 scope.view_files();",
          "1077:                 args.repo_id = this.active_repo.id;",
          "1079:             this.request({",
          "1080:                 action: 'list',",
          "1081:                 client_id: this.options.client_id,",
          "1083:                 path: args.path,",
          "1084:                 page: args.page,",
          "1085:                 scope: this,",
          "1086:                 callback: this.display_response",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1303:             if(!r.nosearch) {",
          "1304:                 var html = '<a href=\"###\"><img src=\"'+M.util.image_url('a/search')+'\" /> '+M.str.repository.search+'</a>';",
          "1305:                 var search = Y.Node.create(html);",
          "1307:                     scope.request({",
          "1308:                         scope: scope,",
          "1309:                         action:'searchform',",
          "",
          "[Removed Lines]",
          "1306:                 search.on('click', function() {",
          "",
          "[Added Lines]",
          "1194:                 search.on('click', function(e) {",
          "1195:                     e.preventDefault();",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1345:                                         client_id: client_id,",
          "1346:                                         repository_id: repository_id,",
          "1347:                                         form: {id: 'fp-search-form',upload:false,useDisabled:true},",
          "1352:                                 }, true);",
          "1353:                                 search_dialog.cancel();",
          "1354:                             }",
          "",
          "[Removed Lines]",
          "1348:                                         callback: function(id, o, args) {",
          "1349:                                             scope.parse_repository_options(o);",
          "1350:                                             scope.view_files();",
          "1351:                                         }",
          "",
          "[Added Lines]",
          "1237:                                         callback: scope.display_response",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1391:             if(!r.norefresh) {",
          "1392:                 var html = '<a href=\"###\"><img src=\"'+M.util.image_url('a/refresh')+'\" /> '+M.str.repository.refresh+'</a>';",
          "1393:                 var refresh = Y.Node.create(html);",
          "1395:                     this.list();",
          "1396:                 }, this);",
          "1397:                 toolbar.appendChild(refresh);",
          "",
          "[Removed Lines]",
          "1394:                 refresh.on('click', function() {",
          "",
          "[Added Lines]",
          "1280:                 refresh.on('click', function(e) {",
          "1281:                     e.preventDefault();",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1400:                 var label = r.logouttext?r.logouttext:M.str.repository.logout;",
          "1401:                 var html = '<a href=\"###\"><img src=\"'+M.util.image_url('a/logout')+'\" /> '+label+'</a>';",
          "1402:                 var logout = Y.Node.create(html);",
          "1404:                     this.request({",
          "1405:                         action:'logout',",
          "1406:                         client_id: client_id,",
          "1407:                         repository_id: repository_id,",
          "1408:                         path:'',",
          "1413:                     }, true);",
          "1414:                 }, this);",
          "1415:                 toolbar.appendChild(logout);",
          "",
          "[Removed Lines]",
          "1403:                 logout.on('click', function() {",
          "1409:                         callback: function(id, obj, args) {",
          "1410:                             scope.viewbar.set('disabled', true);",
          "1411:                             scope.print_login(obj);",
          "1412:                         }",
          "",
          "[Added Lines]",
          "1290:                 logout.on('click', function(e) {",
          "1291:                     e.preventDefault();",
          "1297:                         callback: this.display_response",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1503:                 Y.all('#fp-header-'+client_id+' .fp-paging a').each(",
          "1504:                     function(node, id) {",
          "1505:                         node.on('click', function(e) {",
          "1506:                             var id = node.get('id');",
          "1507:                             var re = new RegExp(\"repo-page-(\\\\d+)\", \"i\");",
          "1508:                             var result = id.match(re);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1391:                             e.preventDefault();",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1515:                                         client_id: client_id,",
          "1516:                                         repository_id: r.id,",
          "1517:                                         params: {'page':result[1]},",
          "1523:                                 }, true);",
          "1525:                             } else {",
          "1531:                             }",
          "1532:                         });",
          "1533:                     });",
          "",
          "[Removed Lines]",
          "1518:                                         callback: function(id, o, args) {",
          "1519:                                             o.issearchresult = true;",
          "1520:                                             scope.parse_repository_options(o);",
          "1521:                                             scope.view_files(result[1]);",
          "1522:                                         }",
          "1526:                                 if (scope.viewmode == 2) {",
          "1527:                                     scope.view_as_list(result[1]);",
          "1528:                                 } else {",
          "1529:                                     scope.list(args);",
          "1530:                                 }",
          "",
          "[Added Lines]",
          "1404:                                         callback: scope.display_response",
          "1408:                                 scope.list(args);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1549:                     var sep = Y.Node.create('<span>/</span>');",
          "1550:                     path.appendChild(link);",
          "1551:                     path.appendChild(sep);",
          "1553:                         this.list({'path':path});",
          "1554:                         }, this, link_path)",
          "1555:                 }",
          "",
          "[Removed Lines]",
          "1552:                     Y.one('#'+link.id).on('click', function(Y, path){",
          "",
          "[Added Lines]",
          "1430:                     Y.one('#'+link.id).on('click', function(e, path){",
          "1431:                         e.preventDefault();",
          "",
          "---------------"
        ]
      }
    }
  ]
}