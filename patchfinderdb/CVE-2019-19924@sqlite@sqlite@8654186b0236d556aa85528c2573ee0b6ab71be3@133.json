{
  "cve_id": "CVE-2019-19924",
  "cve_desc": "SQLite 3.30.1 mishandles certain parser-tree rewriting, related to expr.c, vdbeaux.c, and window.c. This is caused by incorrect sqlite3WindowRewrite() error handling.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
  "patch_info": {
    "commit_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8654186b0236d556aa85528c2573ee0b6ab71be3",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/vdbeaux.c",
      "src/window.c"
    ],
    "message": "When an error occurs while rewriting the parser tree for window functions in the sqlite3WindowRewrite() routine, make sure that pParse->nErr is set, and make sure that this shuts down any subsequent code generation that might depend on the transformations that were implemented.  This fixes a problem discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: e2bddcd4c55ba3cbe0130332679ff4b048630d0ced9a8899982edb5a3569ba7f",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/vdbeaux.c||src/vdbeaux.c",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4417c5bf0aabb34ed174f01afd981c924ae965a42128719d8d6735536631d12f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "376:   int addr;",
      "377:   CollSeq *p4;",
      "379:   if( isCommuted ){",
      "380:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
      "381:   }else{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:   if( pParse->nErr ) return 0;",
      "",
      "---------------"
    ],
    "src/vdbeaux.c||src/vdbeaux.c": [
      "File: src/vdbeaux.c -> src/vdbeaux.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1304: static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){",
      "1305:   assert( p->nOp>0 || p->aOp==0 );",
      "1307:   if( p->nOp ){",
      "1308:     assert( p->aOp );",
      "1309:     sqlite3DbFree(p->db, p->aOp[p->nOp-1].zComment);",
      "",
      "[Removed Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );",
      "",
      "[Added Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed",
      "1307:           || p->pParse->nErr>0 );",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "935:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
      "936:     if( pTab==0 ){",
      "938:     }",
      "940:     p->pSrc = 0;",
      "",
      "[Removed Lines]",
      "937:       return SQLITE_NOMEM;",
      "",
      "[Added Lines]",
      "937:       return sqlite3ErrorToParser(db, SQLITE_NOMEM);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1039:     sqlite3DbFree(db, pTab);",
      "1040:   }",
      "1042:   return rc;",
      "1043: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1042:   if( rc && pParse->nErr==0 ){",
      "1043:     assert( pParse->db->mallocFailed );",
      "1044:     return sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
      "1045:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6f1644c0f963c8d1d7388d6e52f60a6604aae2c1",
      "candidate_info": {
        "commit_hash": "6f1644c0f963c8d1d7388d6e52f60a6604aae2c1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6f1644c0f963c8d1d7388d6e52f60a6604aae2c1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/treeview.c"
        ],
        "message": "Show the pointer address for Window objects in the TreeView display.\n\nFossilOrigin-Name: 1ae70ad2ffd36c27b154940126c5e3ed00c05c0d8761d9320a65a03b1b4e4dc6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/treeview.c||src/treeview.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d6a07433421ac9a475ff0014587f0beefdf88ce89aef9443f8a20cd26083731f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "317:   }",
          "318:   pView = sqlite3TreeViewPush(pView, more);",
          "319:   if( pWin->zName ){",
          "321:   }else{",
          "323:   }",
          "324:   if( pWin->zBase )    nElement++;",
          "325:   if( pWin->pOrderBy ) nElement++;",
          "",
          "[Removed Lines]",
          "320:     sqlite3TreeViewLine(pView, \"OVER %s\", pWin->zName);",
          "322:     sqlite3TreeViewLine(pView, \"OVER\");",
          "",
          "[Added Lines]",
          "320:     sqlite3TreeViewLine(pView, \"OVER %s (%p)\", pWin->zName, pWin);",
          "322:     sqlite3TreeViewLine(pView, \"OVER (%p)\", pWin);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "01ef55e0f55e3dd49f4d70177e6e03e540a1eae5",
      "candidate_info": {
        "commit_hash": "01ef55e0f55e3dd49f4d70177e6e03e540a1eae5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/01ef55e0f55e3dd49f4d70177e6e03e540a1eae5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "Fix sqlite3ColumnOfIndex() to account for virtual columns.\n\nFossilOrigin-Name: 447271123e3b467d9271a4c0cf27f47af2f865c9298b8c355d9e766411a1f422",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 450c48766c8e62653d074c95f69b0576de3880d183a1d1e5992d88b6fce6cc39",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "883: i16 sqlite3ColumnOfIndex(Index *pIdx, i16 iCol){",
          "884:   int i;",
          "885:   for(i=0; i<pIdx->nColumn; i++){",
          "886:     if( iCol==pIdx->aiColumn[i] ) return i;",
          "887:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "885: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "886:   Table *pTab = pIdx->pTable;",
          "887:   if( pTab->tabFlags & TF_HasVirtual ){",
          "888:     for(i=0; i<=iCol; i++){",
          "889:       if( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL ) iCol++;",
          "890:     }",
          "891:   }",
          "892: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b70b0df8eb8cea79074289826079699a00a0aef4",
      "candidate_info": {
        "commit_hash": "b70b0df8eb8cea79074289826079699a00a0aef4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b70b0df8eb8cea79074289826079699a00a0aef4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Slightly smaller and faster implementation of the OP_MakeRecord opcode.\n\nFossilOrigin-Name: 3bdce7ef1a6bb03affe978243fec603d5a55c071aa6d87c469a3c199d23f3b5e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a27b0b880d76c6838c0365f66bcd69b1b49b7594470993b608f4e490cbdc4882",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2933:       goto no_mem;",
          "2934:     }",
          "2935:   }",
          "2941:   assert( pData0<=pLast );",
          "2942:   pRec = pData0;",
          "2943:   do{",
          "2944:     serial_type = pRec->uTemp;",
          "2951:   }while( (++pRec)<=pLast );",
          "2955:   assert( pOp->p3>0 && pOp->p3<=(p->nMem+1 - p->nCursor) );",
          "2962:   REGISTER_TRACE(pOp->p3, pOut);",
          "2964:   break;",
          "2965: }",
          "",
          "[Removed Lines]",
          "2936:   zNewRecord = (u8 *)pOut->z;",
          "2939:   i = putVarint32(zNewRecord, nHdr);",
          "2940:   j = nHdr;",
          "2952:   assert( i==nHdr );",
          "2953:   assert( j==nByte );",
          "2956:   pOut->n = (int)nByte;",
          "2957:   pOut->flags = MEM_Blob;",
          "2958:   if( nZero ){",
          "2959:     pOut->u.nZero = nZero;",
          "2960:     pOut->flags |= MEM_Zero;",
          "2961:   }",
          "2963:   UPDATE_MAX_BLOBSIZE(pOut);",
          "",
          "[Added Lines]",
          "2935:   pOut->n = (int)nByte;",
          "2936:   pOut->flags = MEM_Blob;",
          "2937:   if( nZero ){",
          "2938:     pOut->u.nZero = nZero;",
          "2939:     pOut->flags |= MEM_Zero;",
          "2940:   }",
          "2941:   UPDATE_MAX_BLOBSIZE(pOut);",
          "2942:   zHdr = (u8 *)pOut->z;",
          "2943:   zPayload = zHdr + nHdr;",
          "2946:   zHdr += putVarint32(zHdr, nHdr);",
          "2958:   assert( nHdr==(int)(zHdr - (u8*)pOut->z) );",
          "2959:   assert( nByte==(int)(zPayload - (u8*)pOut->z) );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "11d88e68abdf23f131dca81ad8d3517a5cf8449b",
      "candidate_info": {
        "commit_hash": "11d88e68abdf23f131dca81ad8d3517a5cf8449b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/11d88e68abdf23f131dca81ad8d3517a5cf8449b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/select.c",
          "src/shell.c.in",
          "src/sqlite.h.in",
          "src/sqliteInt.h",
          "src/tclsqlite.c",
          "test/tclsqlite.test",
          "test/view.test"
        ],
        "message": "Add the SQLITE_DBCONFIG_ENABLE_VIEW option, together with a \"db config\" command in the TCL interface that can access that option as well as all the other sqlite3_db_config() boolean options.\n\nFossilOrigin-Name: 61b4bccd2984f4c2cf50f58ef08677588e57aa7e079af07473b2e188d9ce4f52",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/select.c||src/select.c",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/tclsqlite.c||src/tclsqlite.c",
          "test/tclsqlite.test||test/tclsqlite.test",
          "test/view.test||test/view.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 98357d8c1263920b33a3648ef9214a63c99728bafa7a8d3dd6a1241b2303fd42",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "836:       } aFlagOp[] = {",
          "837:         { SQLITE_DBCONFIG_ENABLE_FKEY,           SQLITE_ForeignKeys    },",
          "838:         { SQLITE_DBCONFIG_ENABLE_TRIGGER,        SQLITE_EnableTrigger  },",
          "839:         { SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER, SQLITE_Fts3Tokenizer  },",
          "840:         { SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION, SQLITE_LoadExtension  },",
          "841:         { SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE,      SQLITE_NoCkptOnClose  },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "839:         { SQLITE_DBCONFIG_ENABLE_VIEW,           SQLITE_EnableView     },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3075:   db->nMaxSorterMmap = 0x7FFFFFFF;",
          "3076:   db->flags |= SQLITE_ShortColNames",
          "3077:                  | SQLITE_EnableTrigger",
          "3078:                  | SQLITE_CacheSpill",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3079:                  | SQLITE_EnableView",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4906:         u8 eCodeOrig = pWalker->eCode;",
          "4907:         if( sqlite3ViewGetColumnNames(pParse, pTab) ) return WRC_Abort;",
          "4908:         assert( pFrom->pSelect==0 );",
          "4909:         pFrom->pSelect = sqlite3SelectDup(db, pTab->pSelect, 0);",
          "4910:         nCol = pTab->nCol;",
          "4911:         pTab->nCol = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4909:         if( pTab->pSelect && (db->flags & SQLITE_EnableView)==0 ){",
          "4910:           sqlite3ErrorMsg(pParse, \"access to view \\\"%s\\\" prohibited\",",
          "4911:               pTab->zName);",
          "4912:         }",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "7135:     } aDbConfig[] = {",
          "7136:         { \"enable_fkey\",        SQLITE_DBCONFIG_ENABLE_FKEY           },",
          "7137:         { \"enable_trigger\",     SQLITE_DBCONFIG_ENABLE_TRIGGER        },",
          "7138:         { \"fts3_tokenizer\",     SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER },",
          "7139:         { \"load_extension\",     SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION },",
          "7140:         { \"no_ckpt_on_close\",   SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE      },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7138:         { \"enable_view\",        SQLITE_DBCONFIG_ENABLE_VIEW           },",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/tclsqlite.c||src/tclsqlite.c": [
          "File: src/tclsqlite.c -> src/tclsqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1917:     \"authorizer\",             \"backup\",                \"bind_fallback\",",
          "1918:     \"busy\",                   \"cache\",                 \"changes\",",
          "1919:     \"close\",                  \"collate\",               \"collation_needed\",",
          "1931:   };",
          "1932:   enum DB_enum {",
          "1933:     DB_AUTHORIZER,            DB_BACKUP,               DB_BIND_FALLBACK,",
          "1934:     DB_BUSY,                  DB_CACHE,                DB_CHANGES,",
          "1935:     DB_CLOSE,                 DB_COLLATE,              DB_COLLATION_NEEDED,",
          "1947:   };",
          "",
          "[Removed Lines]",
          "1920:     \"commit_hook\",            \"complete\",              \"copy\",",
          "1921:     \"deserialize\",            \"enable_load_extension\", \"errorcode\",",
          "1922:     \"eval\",                   \"exists\",                \"function\",",
          "1923:     \"incrblob\",               \"interrupt\",             \"last_insert_rowid\",",
          "1924:     \"nullvalue\",              \"onecolumn\",             \"preupdate\",",
          "1925:     \"profile\",                \"progress\",              \"rekey\",",
          "1926:     \"restore\",                \"rollback_hook\",         \"serialize\",",
          "1927:     \"status\",                 \"timeout\",               \"total_changes\",",
          "1928:     \"trace\",                  \"trace_v2\",              \"transaction\",",
          "1929:     \"unlock_notify\",          \"update_hook\",           \"version\",",
          "1930:     \"wal_hook\",               0",
          "1936:     DB_COMMIT_HOOK,           DB_COMPLETE,             DB_COPY,",
          "1937:     DB_DESERIALIZE,           DB_ENABLE_LOAD_EXTENSION,DB_ERRORCODE,",
          "1938:     DB_EVAL,                  DB_EXISTS,               DB_FUNCTION,",
          "1939:     DB_INCRBLOB,              DB_INTERRUPT,            DB_LAST_INSERT_ROWID,",
          "1940:     DB_NULLVALUE,             DB_ONECOLUMN,            DB_PREUPDATE,",
          "1941:     DB_PROFILE,               DB_PROGRESS,             DB_REKEY,",
          "1942:     DB_RESTORE,               DB_ROLLBACK_HOOK,        DB_SERIALIZE,",
          "1943:     DB_STATUS,                DB_TIMEOUT,              DB_TOTAL_CHANGES,",
          "1944:     DB_TRACE,                 DB_TRACE_V2,             DB_TRANSACTION,",
          "1945:     DB_UNLOCK_NOTIFY,         DB_UPDATE_HOOK,          DB_VERSION,",
          "1946:     DB_WAL_HOOK",
          "",
          "[Added Lines]",
          "1920:     \"commit_hook\",            \"complete\",              \"config\",",
          "1921:     \"copy\",                   \"deserialize\",           \"enable_load_extension\",",
          "1922:     \"errorcode\",              \"eval\",                  \"exists\",",
          "1923:     \"function\",               \"incrblob\",              \"interrupt\",",
          "1924:     \"last_insert_rowid\",      \"nullvalue\",             \"onecolumn\",",
          "1925:     \"preupdate\",              \"profile\",               \"progress\",",
          "1926:     \"rekey\",                  \"restore\",               \"rollback_hook\",",
          "1927:     \"serialize\",              \"status\",                \"timeout\",",
          "1928:     \"total_changes\",          \"trace\",                 \"trace_v2\",",
          "1929:     \"transaction\",            \"unlock_notify\",         \"update_hook\",",
          "1930:     \"version\",                \"wal_hook\",              0",
          "1936:     DB_COMMIT_HOOK,           DB_COMPLETE,             DB_CONFIG,",
          "1937:     DB_COPY,                  DB_DESERIALIZE,          DB_ENABLE_LOAD_EXTENSION,",
          "1938:     DB_ERRORCODE,             DB_EVAL,                 DB_EXISTS,",
          "1939:     DB_FUNCTION,              DB_INCRBLOB,             DB_INTERRUPT,",
          "1940:     DB_LAST_INSERT_ROWID,     DB_NULLVALUE,            DB_ONECOLUMN,",
          "1941:     DB_PREUPDATE,             DB_PROFILE,              DB_PROGRESS,",
          "1942:     DB_REKEY,                 DB_RESTORE,              DB_ROLLBACK_HOOK,",
          "1943:     DB_SERIALIZE,             DB_STATUS,               DB_TIMEOUT,",
          "1944:     DB_TOTAL_CHANGES,         DB_TRACE,                DB_TRACE_V2,",
          "1945:     DB_TRANSACTION,           DB_UNLOCK_NOTIFY,        DB_UPDATE_HOOK,",
          "1946:     DB_VERSION,               DB_WAL_HOOK",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2331:     break;",
          "2332:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2339:   case DB_CONFIG: {",
          "2340:     static const struct DbConfigChoices {",
          "2341:       const char *zName;",
          "2342:       int op;",
          "2343:     } aDbConfig[] = {",
          "2344:         { \"enable_fkey\",        SQLITE_DBCONFIG_ENABLE_FKEY           },",
          "2345:         { \"enable_trigger\",     SQLITE_DBCONFIG_ENABLE_TRIGGER        },",
          "2346:         { \"enable_view\",        SQLITE_DBCONFIG_ENABLE_VIEW           },",
          "2347:         { \"fts3_tokenizer\",     SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER },",
          "2348:         { \"load_extension\",     SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION },",
          "2349:         { \"no_ckpt_on_close\",   SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE      },",
          "2350:         { \"enable_qpsg\",        SQLITE_DBCONFIG_ENABLE_QPSG           },",
          "2351:         { \"trigger_eqp\",        SQLITE_DBCONFIG_TRIGGER_EQP           },",
          "2352:         { \"reset_database\",     SQLITE_DBCONFIG_RESET_DATABASE        },",
          "2353:         { \"defensive\",          SQLITE_DBCONFIG_DEFENSIVE             },",
          "2354:         { \"writable_schema\",    SQLITE_DBCONFIG_WRITABLE_SCHEMA       },",
          "2355:         { \"legacy_alter_table\", SQLITE_DBCONFIG_LEGACY_ALTER_TABLE    },",
          "2356:         { \"dqs_dml\",            SQLITE_DBCONFIG_DQS_DML               },",
          "2357:         { \"dqs_ddl\",            SQLITE_DBCONFIG_DQS_DDL               },",
          "2358:     };",
          "2359:     Tcl_Obj *pResult;",
          "2360:     int ii;",
          "2361:     if( objc>4 ){",
          "2362:       Tcl_WrongNumArgs(interp, 2, objv, \"?OPTION? ?BOOLEAN?\");",
          "2363:       return TCL_ERROR;",
          "2364:     }",
          "2365:     if( objc==2 ){",
          "2368:       pResult = Tcl_NewListObj(0,0);",
          "2369:       for(ii=0; ii<sizeof(aDbConfig)/sizeof(aDbConfig[0]); ii++){",
          "2370:         int v = 0;",
          "2371:         int rc = sqlite3_db_config(pDb->db, aDbConfig[ii].op, -1, &v);",
          "2372:         if( rc!=SQLITE_OK ) continue;",
          "2373:         Tcl_ListObjAppendElement(interp, pResult,",
          "2374:            Tcl_NewStringObj(aDbConfig[ii].zName,-1));",
          "2375:         Tcl_ListObjAppendElement(interp, pResult,",
          "2376:            Tcl_NewIntObj(v));",
          "2377:       }",
          "2378:     }else{",
          "2379:       const char *zOpt = Tcl_GetString(objv[2]);",
          "2380:       int rc;",
          "2381:       int onoff = -1;",
          "2382:       int v = 0;",
          "2383:       if( zOpt[0]=='-' ) zOpt++;",
          "2384:       for(ii=0; ii<sizeof(aDbConfig)/sizeof(aDbConfig[0]); ii++){",
          "2385:         if( strcmp(aDbConfig[ii].zName, zOpt)==0 ) break;",
          "2386:       }",
          "2387:       if( ii>=sizeof(aDbConfig)/sizeof(aDbConfig[0]) ){",
          "2388:         Tcl_AppendResult(interp, \"unknown config option: \\\"\", zOpt,",
          "2389:                                 \"\\\"\", (void*)0);",
          "2390:         return TCL_ERROR;",
          "2391:       }",
          "2392:       if( objc==4 ){",
          "2393:         if( Tcl_GetBooleanFromObj(interp, objv[3], &onoff) ){",
          "2394:           return TCL_ERROR;",
          "2395:         }",
          "2396:       }",
          "2397:       rc = sqlite3_db_config(pDb->db, aDbConfig[ii].op, onoff, &v);",
          "2398:       pResult = Tcl_NewIntObj(v);",
          "2399:     }",
          "2400:     Tcl_SetObjResult(interp, pResult);",
          "2401:     break;",
          "2402:   }",
          "",
          "---------------"
        ],
        "test/tclsqlite.test||test/tclsqlite.test": [
          "File: test/tclsqlite.test -> test/tclsqlite.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: do_test tcl-1.2 {",
          "43:   set v [catch {db bogus} msg]",
          "44:   lappend v $msg",
          "46: do_test tcl-1.2.1 {",
          "47:   set v [catch {db cache bogus} msg]",
          "48:   lappend v $msg",
          "",
          "[Removed Lines]",
          "45: } {1 {bad option \"bogus\": must be authorizer, backup, bind_fallback, busy, cache, changes, close, collate, collation_needed, commit_hook, complete, copy, deserialize, enable_load_extension, errorcode, eval, exists, function, incrblob, interrupt, last_insert_rowid, nullvalue, onecolumn, preupdate, profile, progress, rekey, restore, rollback_hook, serialize, status, timeout, total_changes, trace, trace_v2, transaction, unlock_notify, update_hook, version, or wal_hook}}",
          "",
          "[Added Lines]",
          "45: } {1 {bad option \"bogus\": must be authorizer, backup, bind_fallback, busy, cache, changes, close, collate, collation_needed, commit_hook, complete, config, copy, deserialize, enable_load_extension, errorcode, eval, exists, function, incrblob, interrupt, last_insert_rowid, nullvalue, onecolumn, preupdate, profile, progress, rekey, restore, rollback_hook, serialize, status, timeout, total_changes, trace, trace_v2, transaction, unlock_notify, update_hook, version, or wal_hook}}",
          "",
          "---------------"
        ],
        "test/view.test||test/view.test": [
          "File: test/view.test -> test/view.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:     SELECT * FROM v1 ORDER BY a;",
          "39:   }",
          "40: } {1 2 4 5 7 8}",
          "41: do_test view-1.2 {",
          "42:   catchsql {",
          "43:     ROLLBACK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: do_test view-1.1.100 {",
          "42:   db config enable_view off",
          "43:   catchsql {",
          "44:     SELECT * FROM v1 ORDER BY a;",
          "45:   }",
          "46: } {1 {access to view \"v1\" prohibited}}",
          "47: do_test view-1.1.110 {",
          "48:   db config enable_view on",
          "49:   catchsql {",
          "50:     SELECT * FROM v1 ORDER BY a;",
          "51:   }",
          "52: } {0 {1 2 4 5 7 8}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7d0a3fd340b3a74d3811ccd70d9df58b4f772aac",
      "candidate_info": {
        "commit_hash": "7d0a3fd340b3a74d3811ccd70d9df58b4f772aac",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7d0a3fd340b3a74d3811ccd70d9df58b4f772aac",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/index.test"
        ],
        "message": "Add a test case for ticket [ae0f637bddc5290b44669e066a].\n\nFossilOrigin-Name: ece481695fc3c959c3eba0fb485cdda43a10b06d17259b0121e15bfc5e8e8b9f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/index.test||test/index.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5997d075665faca6b70fa647e877ebc84c473b32887b96235865d59ce80247f8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/index.test||test/index.test": [
          "File: test/index.test -> test/index.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "747:   INSERT INTO t1(a,b) VALUES('a',1),('a',0);",
          "748:   SELECT a, b, '|' FROM t1;",
          "749: } {a 1 | a 0 |}",
          "752: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "751: # 2019-05-10 ticket https://www.sqlite.org/src/info/ae0f637bddc5290b",
          "752: do_execsql_test index-23.0 {",
          "753:   DROP TABLE t1;",
          "754:   CREATE TABLE t1(a TEXT, b REAL);",
          "755:   CREATE UNIQUE INDEX t1x1 ON t1(a GLOB b);",
          "756:   INSERT INTO t1(a,b) VALUES('0.0','1'),('1.0','1');",
          "757:   SELECT * FROM t1;",
          "758:   REINDEX;",
          "759: } {0.0 1.0 1.0 1.0}",
          "",
          "---------------"
        ]
      }
    }
  ]
}