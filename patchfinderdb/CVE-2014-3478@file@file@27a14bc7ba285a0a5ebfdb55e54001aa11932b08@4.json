{
  "cve_id": "CVE-2014-3478",
  "cve_desc": "Buffer overflow in the mconvert function in softmagic.c in file before 5.19, as used in the Fileinfo component in PHP before 5.4.30 and 5.5.x before 5.5.14, allows remote attackers to cause a denial of service (application crash) via a crafted Pascal string in a FILE_PSTRING conversion.",
  "repo": "file/file",
  "patch_hash": "27a14bc7ba285a0a5ebfdb55e54001aa11932b08",
  "patch_info": {
    "commit_hash": "27a14bc7ba285a0a5ebfdb55e54001aa11932b08",
    "repo": "file/file",
    "commit_url": "https://github.com/file/file/commit/27a14bc7ba285a0a5ebfdb55e54001aa11932b08",
    "files": [
      "src/softmagic.c"
    ],
    "message": "Correctly compute the truncated pascal string size (Francisco Alonso and Jan Kaluza at RedHat)",
    "before_after_code_files": [
      "src/softmagic.c||src/softmagic.c"
    ]
  },
  "patch_diff": {
    "src/softmagic.c||src/softmagic.c": [
      "File: src/softmagic.c -> src/softmagic.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: #include \"file.h\"",
      "34: #ifndef lint",
      "38: #include \"magic.h\"",
      "",
      "[Removed Lines]",
      "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.189 2014/05/30 16:47:44 christos Exp $\")",
      "",
      "[Added Lines]",
      "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.190 2014/06/03 19:01:34 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "940:   return 1;",
      "941:  }",
      "942:  case FILE_PSTRING: {",
      "944:   size_t len = file_pstring_get_length(m, ptr1);",
      "947:   while (len--)",
      "",
      "[Removed Lines]",
      "943:   char *ptr1 = p->s, *ptr2 = ptr1 + file_pstring_length_size(m);",
      "945:   if (len >= sizeof(p->s))",
      "946:    len = sizeof(p->s) - 1;",
      "",
      "[Added Lines]",
      "943:   size_t sz = file_pstring_length_size(m);",
      "944:   char *ptr1 = p->s, *ptr2 = ptr1 + sz;",
      "946:   if (len >= sizeof(p->s)) {",
      "953:    len = sizeof(p->s) - sz;",
      "954:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4075d47c8debe0b2d413c1cf0f01b8f48813756c",
      "candidate_info": {
        "commit_hash": "4075d47c8debe0b2d413c1cf0f01b8f48813756c",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/4075d47c8debe0b2d413c1cf0f01b8f48813756c",
        "files": [
          "src/softmagic.c"
        ],
        "message": "indirect offsets should be relative to the beginning of the current magic.",
        "before_after_code_files": [
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/softmagic.c||src/softmagic.c"
          ],
          "candidate": [
            "src/softmagic.c||src/softmagic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.203 2014/12/04 15:22:05 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.204 2014/12/11 12:34:24 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1665:   break;",
          "1667:  case FILE_INDIRECT:",
          "1668:   if (offset == 0)",
          "1669:    return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1668:   offset += o;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "43137d87ebe726757ff4b91cd8aae9b8e355fc5a",
      "candidate_info": {
        "commit_hash": "43137d87ebe726757ff4b91cd8aae9b8e355fc5a",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/43137d87ebe726757ff4b91cd8aae9b8e355fc5a",
        "files": [
          "ChangeLog",
          "src/softmagic.c"
        ],
        "message": "Make strings from files always printable.",
        "before_after_code_files": [
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/softmagic.c||src/softmagic.c"
          ],
          "candidate": [
            "src/softmagic.c||src/softmagic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.194 2014/09/22 18:26:19 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.195 2014/09/24 19:49:07 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "397: }",
          "400: private int32_t",
          "401: mprint(struct magic_set *ms, struct magic *m)",
          "402: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "400: static char *",
          "401: printable(char *buf, size_t bufsiz, const char *str)",
          "402: {",
          "403:  char *ptr, *eptr;",
          "404:  const unsigned char *s = (const unsigned char *)str;",
          "406:  for (ptr = buf, eptr = ptr + bufsiz - 1; ptr < eptr && *s; s++) {",
          "407:   if (isprint(*s)) {",
          "409:    continue;",
          "410:   }",
          "411:   if (ptr >= eptr + 4)",
          "412:    break;",
          "417:  }",
          "419:  return buf;",
          "420: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "503:    t = ms->offset + m->vallen;",
          "504:   }",
          "505:   else {",
          "506:    char *str = p->s;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "528:    char sbuf[512];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "525:    }",
          "528:     return -1;",
          "530:    if (m->type == FILE_PSTRING)",
          "",
          "[Removed Lines]",
          "527:    if (file_printf(ms, F(ms, m, \"%s\"), str) == -1)",
          "",
          "[Added Lines]",
          "550:    if (file_printf(ms, F(ms, m, \"%s\"),",
          "551:        printable(sbuf, sizeof(sbuf), str)) == -1)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "809020889c857afb776a67cc73b1c4fa217adc0b",
      "candidate_info": {
        "commit_hash": "809020889c857afb776a67cc73b1c4fa217adc0b",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/809020889c857afb776a67cc73b1c4fa217adc0b",
        "files": [
          "src/apprentice.c",
          "src/cdf_time.c",
          "src/file.h",
          "src/fsmagic.c",
          "src/funcs.c",
          "src/magic.c",
          "src/softmagic.c"
        ],
        "message": "PR/347: Windows patches.",
        "before_after_code_files": [
          "src/apprentice.c||src/apprentice.c",
          "src/cdf_time.c||src/cdf_time.c",
          "src/file.h||src/file.h",
          "src/fsmagic.c||src/fsmagic.c",
          "src/funcs.c||src/funcs.c",
          "src/magic.c||src/magic.c",
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/softmagic.c||src/softmagic.c"
          ],
          "candidate": [
            "src/softmagic.c||src/softmagic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/apprentice.c||src/apprentice.c": [
          "File: src/apprentice.c -> src/apprentice.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.208 2014/05/06 16:07:23 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.209 2014/05/13 16:42:17 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2767:  }",
          "2768:  entries = (uint32_t)(st.st_size / sizeof(struct magic));",
          "2769:  if ((off_t)(entries * sizeof(struct magic)) != st.st_size) {",
          "2771:       dbname, (unsigned long long)st.st_size,",
          "2772:       sizeof(struct magic));",
          "2773:   goto error;",
          "",
          "[Removed Lines]",
          "2770:   file_error(ms, 0, \"Size of `%s' %llu is not a multiple of %zu\",",
          "",
          "[Added Lines]",
          "2770:   file_error(ms, 0, \"Size of `%s' %\" INT64_T_FORMAT \"u is not \"",
          "2771:       \"a multiple of %\" SIZE_T_FORMAT \"u\",",
          "",
          "---------------"
        ],
        "src/cdf_time.c||src/cdf_time.c": [
          "File: src/cdf_time.c -> src/cdf_time.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #include <time.h>",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: cdf_time.c,v 1.13 2014/02/25 20:52:02 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: cdf_time.c,v 1.14 2014/04/17 12:44:01 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "171:  char *ptr = ctime_r(sec, buf);",
          "172:  if (ptr != NULL)",
          "173:   return buf;",
          "175:  return buf;",
          "176: }",
          "",
          "[Removed Lines]",
          "174:  (void)snprintf(buf, 26, \"*Bad* 0x%16.16llx\\n\", (long long)*sec);",
          "",
          "[Added Lines]",
          "174:  (void)snprintf(buf, 26, \"*Bad* 0x%16.16\" INT64_T_FORMAT \"x\\n\",",
          "175:      (long long)*sec);",
          "",
          "---------------"
        ],
        "src/file.h||src/file.h": [
          "File: src/file.h -> src/file.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "84: #define private static",
          "87: #define public  __attribute__ ((__visibility__(\"default\")))",
          "88: #ifndef protected",
          "89: #define protected __attribute__ ((__visibility__(\"hidden\")))",
          "",
          "[Removed Lines]",
          "86: #if HAVE_VISIBILITY",
          "",
          "[Added Lines]",
          "86: #if HAVE_VISIBILITY && !defined(WIN32)",
          "",
          "---------------"
        ],
        "src/fsmagic.c||src/fsmagic.c": [
          "File: src/fsmagic.c -> src/fsmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: fsmagic.c,v 1.71 2013/12/01 18:01:07 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: fsmagic.c,v 1.72 2014/04/17 12:47:11 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54: # define HAVE_MAJOR",
          "55: #endif",
          "57: #ifndef HAVE_MAJOR",
          "58: # define major(dev)  (((dev) >> 8) & 0xff)",
          "59: # define minor(dev)  ((dev) & 0xff)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: #ifdef WIN32",
          "57: # define WIN32_LEAN_AND_MEAN",
          "58: # include <windows.h>",
          "59: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123: #endif",
          "126:  if (ret) {",
          "127:   if (ms->flags & MAGIC_ERROR) {",
          "128:    file_error(ms, errno, \"cannot stat `%s'\", fn);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130: #ifdef WIN32",
          "131:  {",
          "132:   HANDLE hFile = CreateFile(fn, 0, FILE_SHARE_DELETE |",
          "133:       FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0,",
          "134:       NULL);",
          "135:   if (hFile != INVALID_HANDLE_VALUE) {",
          "140:    if (ret) {",
          "141:     sb->st_mode = S_IFBLK;",
          "142:     ret = 0;",
          "143:    }",
          "144:    switch (GetFileType(hFile)) {",
          "145:    case FILE_TYPE_CHAR:",
          "146:     sb->st_mode |= S_IFCHR;",
          "147:     sb->st_mode &= ~S_IFREG;",
          "148:     break;",
          "149:    case FILE_TYPE_PIPE:",
          "150:     sb->st_mode |= S_IFIFO;",
          "151:     sb->st_mode &= ~S_IFREG;",
          "152:     break;",
          "153:    }",
          "154:    CloseHandle(hFile);",
          "155:   }",
          "156:  }",
          "157: #endif",
          "",
          "---------------"
        ],
        "src/funcs.c||src/funcs.c": [
          "File: src/funcs.c -> src/funcs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "33: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.70 2014/03/14 19:02:37 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.71 2014/05/05 20:53:10 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "280:   if (file_printf(ms, \"%s\", code_mime) == -1)",
          "281:    rv = -1;",
          "282:  }",
          "283:  done_encoding:",
          "284:  free(u8buf);",
          "285:  if (rv)",
          "286:   return rv;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "283: #if HAVE_FORK",
          "285: #endif",
          "",
          "---------------"
        ],
        "src/magic.c||src/magic.c": [
          "File: src/magic.c -> src/magic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #include \"file.h\"",
          "35: #ifndef lint",
          "39: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "36: FILE_RCSID(\"@(#)$File: magic.c,v 1.82 2014/05/13 16:38:23 christos Exp $\")",
          "",
          "[Added Lines]",
          "36: FILE_RCSID(\"@(#)$File: magic.c,v 1.83 2014/05/13 16:44:24 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126:  free(hmagicpath);",
          "127:  return MAGIC;",
          "128: #else",
          "130:  char *tmppath = NULL;",
          "132: #define APPENDPATH() \\",
          "133:  do { \\",
          "",
          "[Removed Lines]",
          "129:  char *hmagicp = hmagicpath;",
          "",
          "[Added Lines]",
          "129:  char *hmagicp;",
          "131:  hmagicpath = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "368:   goto done;",
          "369:  }",
          "371:  if (inname == NULL) {",
          "372:   if (fstat(fd, &sb) == 0 && S_ISFIFO(sb.st_mode))",
          "373:    ispipe = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "372: #ifdef WIN32",
          "374:  if (fd == STDIN_FILENO)",
          "375:   _setmode(STDIN_FILENO, O_BINARY);",
          "376: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "387:   errno = 0;",
          "388:   if ((fd = open(inname, flags)) < 0) {",
          "389:    if (okstat &&",
          "390:        unreadable_info(ms, sb.st_mode, inname) == -1)",
          "391:     goto done;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "396: #ifdef WIN32",
          "403:    if (!okstat && errno == EACCES) {",
          "404:     sb.st_mode = S_IFBLK;",
          "405:     okstat = 1;",
          "406:    }",
          "407: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "421:   }",
          "423:  } else {",
          "426:    goto done;",
          "427:   }",
          "428:  }",
          "",
          "[Removed Lines]",
          "424:   if ((nbytes = read(fd, (char *)buf, HOWMANY)) == -1) {",
          "425:    file_error(ms, errno, \"cannot read `%s'\", inname);",
          "",
          "[Added Lines]",
          "444:   size_t howmany =",
          "445: #if defined(WIN32) && HOWMANY > 8 * 1024",
          "446:     _isatty(fd) ? 8 * 1024 :",
          "447: #endif",
          "448:     HOWMANY;",
          "449:   if ((nbytes = read(fd, (char *)buf, howmany)) == -1) {",
          "450:    if (inname == NULL && fd != STDIN_FILENO)",
          "451:     file_error(ms, errno, \"cannot read fd %d\", fd);",
          "452:    else",
          "453:     file_error(ms, errno, \"cannot read `%s'\",",
          "454:         inname == NULL ? \"/dev/stdin\" : inname);",
          "",
          "---------------"
        ],
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.186 2014/05/05 20:53:10 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.187 2014/05/13 16:42:17 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "482:   case -1:",
          "483:    return -1;",
          "484:   case 1:",
          "486:        (unsigned long long)v);",
          "487:    if (file_printf(ms, F(ms, m, \"%s\"), buf) == -1)",
          "488:     return -1;",
          "489:    break;",
          "490:   default:",
          "492:        (unsigned long long) v) == -1)",
          "493:     return -1;",
          "494:    break;",
          "",
          "[Removed Lines]",
          "485:    (void)snprintf(buf, sizeof(buf), \"%llu\",",
          "491:    if (file_printf(ms, F(ms, m, \"%llu\"),",
          "",
          "[Added Lines]",
          "485:    (void)snprintf(buf, sizeof(buf), \"%\" INT64_T_FORMAT \"u\",",
          "491:    if (file_printf(ms, F(ms, m, \"%\" INT64_T_FORMAT \"u\"),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "24afd020b48d38d90350579b707773bf9d08c6ba",
      "candidate_info": {
        "commit_hash": "24afd020b48d38d90350579b707773bf9d08c6ba",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/24afd020b48d38d90350579b707773bf9d08c6ba",
        "files": [
          "ChangeLog",
          "doc/magic.man",
          "magic/Magdir/jpeg",
          "src/apprentice.c",
          "src/file.h",
          "src/softmagic.c"
        ],
        "message": "Add indirect relative offsets; make Exif use them. All other indirect magic is absolute by default.",
        "before_after_code_files": [
          "src/apprentice.c||src/apprentice.c",
          "src/file.h||src/file.h",
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/softmagic.c||src/softmagic.c"
          ],
          "candidate": [
            "src/softmagic.c||src/softmagic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/apprentice.c||src/apprentice.c": [
          "File: src/apprentice.c -> src/apprentice.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.227 2014/11/28 02:46:39 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.228 2014/12/16 23:18:40 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1605: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1608: private int",
          "1609: parse_indirect_modifier(struct magic_set *ms, struct magic *m, const char **lp)",
          "1610: {",
          "1611:  const char *l = *lp;",
          "1613:  while (!isspace((unsigned char)*++l))",
          "1614:   switch (*l) {",
          "1615:   case CHAR_INDIRECT_RELATIVE:",
          "1616:    m->str_flags |= INDIRECT_RELATIVE;",
          "1617:    break;",
          "1618:   default:",
          "1619:    if (ms->flags & MAGIC_CHECK)",
          "1620:     file_magwarn(ms, \"indirect modifier `%c' \"",
          "1621:      \"invalid\", *l);",
          "1623:    return -1;",
          "1624:   }",
          "1626:  return 0;",
          "1627: }",
          "1629: private void",
          "1630: parse_op_modifier(struct magic_set *ms, struct magic *m, const char **lp,",
          "1631:     int op)",
          "1632: {",
          "1633:  const char *l = *lp;",
          "1634:  char *t;",
          "1635:  uint64_t val;",
          "1637:  ++l;",
          "1638:  m->mask_op |= op;",
          "1639:  val = (uint64_t)strtoull(l, &t, 0);",
          "1640:  l = t;",
          "1641:  m->num_mask = file_signextend(ms, m, val);",
          "1642:  eatsize(&l);",
          "1644: }",
          "1646: private int",
          "1647: parse_string_modifier(struct magic_set *ms, struct magic *m, const char **lp)",
          "1648: {",
          "1649:  const char *l = *lp;",
          "1650:  char *t;",
          "1651:  int have_range = 0;",
          "1653:  while (!isspace((unsigned char)*++l)) {",
          "1654:   switch (*l) {",
          "1655:   case '0':  case '1':  case '2':",
          "1656:   case '3':  case '4':  case '5':",
          "1657:   case '6':  case '7':  case '8':",
          "1658:   case '9':",
          "1659:    if (have_range && (ms->flags & MAGIC_CHECK))",
          "1660:     file_magwarn(ms, \"multiple ranges\");",
          "1661:    have_range = 1;",
          "1662:    m->str_range = CAST(uint32_t, strtoul(l, &t, 0));",
          "1663:    if (m->str_range == 0)",
          "1664:     file_magwarn(ms, \"zero range\");",
          "1665:    l = t - 1;",
          "1666:    break;",
          "1667:   case CHAR_COMPACT_WHITESPACE:",
          "1668:    m->str_flags |= STRING_COMPACT_WHITESPACE;",
          "1669:    break;",
          "1670:   case CHAR_COMPACT_OPTIONAL_WHITESPACE:",
          "1671:    m->str_flags |= STRING_COMPACT_OPTIONAL_WHITESPACE;",
          "1672:    break;",
          "1673:   case CHAR_IGNORE_LOWERCASE:",
          "1674:    m->str_flags |= STRING_IGNORE_LOWERCASE;",
          "1675:    break;",
          "1676:   case CHAR_IGNORE_UPPERCASE:",
          "1677:    m->str_flags |= STRING_IGNORE_UPPERCASE;",
          "1678:    break;",
          "1679:   case CHAR_REGEX_OFFSET_START:",
          "1680:    m->str_flags |= REGEX_OFFSET_START;",
          "1681:    break;",
          "1682:   case CHAR_BINTEST:",
          "1683:    m->str_flags |= STRING_BINTEST;",
          "1684:    break;",
          "1685:   case CHAR_TEXTTEST:",
          "1686:    m->str_flags |= STRING_TEXTTEST;",
          "1687:    break;",
          "1688:   case CHAR_TRIM:",
          "1689:    m->str_flags |= STRING_TRIM;",
          "1690:    break;",
          "1691:   case CHAR_PSTRING_1_LE:",
          "1692: #define SET_LENGTH(a) m->str_flags = (m->str_flags & ~PSTRING_LEN) | (a)",
          "1693:    if (m->type != FILE_PSTRING)",
          "1694:     goto bad;",
          "1695:    SET_LENGTH(PSTRING_1_LE);",
          "1696:    break;",
          "1697:   case CHAR_PSTRING_2_BE:",
          "1698:    if (m->type != FILE_PSTRING)",
          "1699:     goto bad;",
          "1700:    SET_LENGTH(PSTRING_2_BE);",
          "1701:    break;",
          "1702:   case CHAR_PSTRING_2_LE:",
          "1703:    if (m->type != FILE_PSTRING)",
          "1704:     goto bad;",
          "1705:    SET_LENGTH(PSTRING_2_LE);",
          "1706:    break;",
          "1707:   case CHAR_PSTRING_4_BE:",
          "1708:    if (m->type != FILE_PSTRING)",
          "1709:     goto bad;",
          "1710:    SET_LENGTH(PSTRING_4_BE);",
          "1711:    break;",
          "1712:   case CHAR_PSTRING_4_LE:",
          "1713:    switch (m->type) {",
          "1714:    case FILE_PSTRING:",
          "1715:    case FILE_REGEX:",
          "1716:     break;",
          "1717:    default:",
          "1718:     goto bad;",
          "1719:    }",
          "1720:    SET_LENGTH(PSTRING_4_LE);",
          "1721:    break;",
          "1722:   case CHAR_PSTRING_LENGTH_INCLUDES_ITSELF:",
          "1723:    if (m->type != FILE_PSTRING)",
          "1724:     goto bad;",
          "1725:    m->str_flags |= PSTRING_LENGTH_INCLUDES_ITSELF;",
          "1726:    break;",
          "1727:   default:",
          "1728:   bad:",
          "1729:    if (ms->flags & MAGIC_CHECK)",
          "1730:     file_magwarn(ms, \"string modifier `%c' \"",
          "1731:      \"invalid\", *l);",
          "1732:    goto out;",
          "1733:   }",
          "1735:   if (l[1] == '/' && !isspace((unsigned char)l[2]))",
          "1736:    l++;",
          "1737:  }",
          "1738:  if (string_modifier_check(ms, m) == -1)",
          "1739:   goto out;",
          "1741:  return 0;",
          "1742: out:",
          "1744:  return -1;",
          "1745: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1874:  m->str_range = 0;",
          "1875:  m->str_flags = m->type == FILE_PSTRING ? PSTRING_1_LE : 0;",
          "1876:  if ((op = get_op(*l)) != -1) {",
          "1979:    }",
          "1981:     return -1;",
          "1988:  }",
          "",
          "[Removed Lines]",
          "1877:   if (!IS_STRING(m->type)) {",
          "1878:    uint64_t val;",
          "1879:    ++l;",
          "1880:    m->mask_op |= op;",
          "1881:    val = (uint64_t)strtoull(l, &t, 0);",
          "1882:    l = t;",
          "1883:    m->num_mask = file_signextend(ms, m, val);",
          "1884:    eatsize(&l);",
          "1885:   }",
          "1886:   else if (op == FILE_OPDIVIDE) {",
          "1887:    int have_range = 0;",
          "1888:    while (!isspace((unsigned char)*++l)) {",
          "1889:     switch (*l) {",
          "1890:     case '0':  case '1':  case '2':",
          "1891:     case '3':  case '4':  case '5':",
          "1892:     case '6':  case '7':  case '8':",
          "1893:     case '9':",
          "1894:      if (have_range &&",
          "1895:          (ms->flags & MAGIC_CHECK))",
          "1896:       file_magwarn(ms,",
          "1897:           \"multiple ranges\");",
          "1898:      have_range = 1;",
          "1899:      m->str_range = CAST(uint32_t,",
          "1900:          strtoul(l, &t, 0));",
          "1901:      if (m->str_range == 0)",
          "1902:       file_magwarn(ms,",
          "1903:           \"zero range\");",
          "1904:      l = t - 1;",
          "1905:      break;",
          "1906:     case CHAR_COMPACT_WHITESPACE:",
          "1907:      m->str_flags |=",
          "1908:          STRING_COMPACT_WHITESPACE;",
          "1909:      break;",
          "1910:     case CHAR_COMPACT_OPTIONAL_WHITESPACE:",
          "1911:      m->str_flags |=",
          "1912:          STRING_COMPACT_OPTIONAL_WHITESPACE;",
          "1913:      break;",
          "1914:     case CHAR_IGNORE_LOWERCASE:",
          "1915:      m->str_flags |= STRING_IGNORE_LOWERCASE;",
          "1916:      break;",
          "1917:     case CHAR_IGNORE_UPPERCASE:",
          "1918:      m->str_flags |= STRING_IGNORE_UPPERCASE;",
          "1919:      break;",
          "1920:     case CHAR_REGEX_OFFSET_START:",
          "1921:      m->str_flags |= REGEX_OFFSET_START;",
          "1922:      break;",
          "1923:     case CHAR_BINTEST:",
          "1924:      m->str_flags |= STRING_BINTEST;",
          "1925:      break;",
          "1926:     case CHAR_TEXTTEST:",
          "1927:      m->str_flags |= STRING_TEXTTEST;",
          "1928:      break;",
          "1929:     case CHAR_TRIM:",
          "1930:      m->str_flags |= STRING_TRIM;",
          "1931:      break;",
          "1932:     case CHAR_PSTRING_1_LE:",
          "1933:      if (m->type != FILE_PSTRING)",
          "1934:       goto bad;",
          "1935:      m->str_flags = (m->str_flags & ~PSTRING_LEN) | PSTRING_1_LE;",
          "1936:      break;",
          "1937:     case CHAR_PSTRING_2_BE:",
          "1938:      if (m->type != FILE_PSTRING)",
          "1939:       goto bad;",
          "1940:      m->str_flags = (m->str_flags & ~PSTRING_LEN) | PSTRING_2_BE;",
          "1941:      break;",
          "1942:     case CHAR_PSTRING_2_LE:",
          "1943:      if (m->type != FILE_PSTRING)",
          "1944:       goto bad;",
          "1945:      m->str_flags = (m->str_flags & ~PSTRING_LEN) | PSTRING_2_LE;",
          "1946:      break;",
          "1947:     case CHAR_PSTRING_4_BE:",
          "1948:      if (m->type != FILE_PSTRING)",
          "1949:       goto bad;",
          "1950:      m->str_flags = (m->str_flags & ~PSTRING_LEN) | PSTRING_4_BE;",
          "1951:      break;",
          "1952:     case CHAR_PSTRING_4_LE:",
          "1953:      switch (m->type) {",
          "1954:      case FILE_PSTRING:",
          "1955:      case FILE_REGEX:",
          "1956:       break;",
          "1957:      default:",
          "1958:       goto bad;",
          "1959:      }",
          "1960:      m->str_flags = (m->str_flags & ~PSTRING_LEN) | PSTRING_4_LE;",
          "1961:      break;",
          "1962:     case CHAR_PSTRING_LENGTH_INCLUDES_ITSELF:",
          "1963:      if (m->type != FILE_PSTRING)",
          "1964:       goto bad;",
          "1965:      m->str_flags |= PSTRING_LENGTH_INCLUDES_ITSELF;",
          "1966:      break;",
          "1967:     default:",
          "1968:     bad:",
          "1969:      if (ms->flags & MAGIC_CHECK)",
          "1970:       file_magwarn(ms,",
          "1971:           \"string extension `%c' \"",
          "1972:           \"invalid\", *l);",
          "1973:      return -1;",
          "1974:     }",
          "1976:     if (l[1] == '/' &&",
          "1977:         !isspace((unsigned char)l[2]))",
          "1978:      l++;",
          "1980:    if (string_modifier_check(ms, m) == -1)",
          "1982:   }",
          "1983:   else {",
          "1984:    if (ms->flags & MAGIC_CHECK)",
          "1985:     file_magwarn(ms, \"invalid string op: %c\", *t);",
          "1986:    return -1;",
          "1987:   }",
          "",
          "[Added Lines]",
          "2016:   if (IS_STRING(m->type)) {",
          "2017:    int r;",
          "2019:    if (op != FILE_OPDIVIDE) {",
          "2020:     if (ms->flags & MAGIC_CHECK)",
          "2021:      file_magwarn(ms,",
          "2022:          \"invalid string/indirect op: \"",
          "2023:          \"`%c'\", *t);",
          "2024:     return -1;",
          "2027:    if (m->type == FILE_INDIRECT)",
          "2028:     r = parse_indirect_modifier(ms, m, &l);",
          "2029:    else",
          "2030:     r = parse_string_modifier(ms, m, &l);",
          "2031:    if (r == -1)",
          "2033:   } else",
          "2034:    parse_op_modifier(ms, m, &l, op);",
          "",
          "---------------"
        ],
        "src/file.h||src/file.h": [
          "File: src/file.h -> src/file.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "234:   (t) == FILE_LESTRING16 || \\",
          "235:   (t) == FILE_REGEX || \\",
          "236:   (t) == FILE_SEARCH || \\",
          "237:   (t) == FILE_NAME || \\",
          "238:   (t) == FILE_USE)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "237:   (t) == FILE_INDIRECT || \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "346: #define STRING_IGNORE_CASE  (STRING_IGNORE_LOWERCASE|STRING_IGNORE_UPPERCASE)",
          "347: #define STRING_DEFAULT_RANGE  100",
          "351: struct mlist {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "350: #define INDIRECT_RELATIVE   BIT(0)",
          "351: #define CHAR_INDIRECT_RELATIVE   'r'",
          "",
          "---------------"
        ],
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.204 2014/12/11 12:34:24 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.205 2015/01/01 04:12:23 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1665:   break;",
          "1667:  case FILE_INDIRECT:",
          "1669:   if (offset == 0)",
          "1670:    return 0;",
          "",
          "[Removed Lines]",
          "1668:   offset += o;",
          "",
          "[Added Lines]",
          "1668:   if (m->str_flags & INDIRECT_RELATIVE)",
          "1669:    offset += o;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "af7c95ec08af7bf7e5f03fb38af8e14b64116123",
      "candidate_info": {
        "commit_hash": "af7c95ec08af7bf7e5f03fb38af8e14b64116123",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/af7c95ec08af7bf7e5f03fb38af8e14b64116123",
        "files": [
          "src/softmagic.c"
        ],
        "message": "- Add some debugging code to print incorrect formats. - Fix \"long\" formats which in magic \"long\" == 32 bit, which is not   what \"long\" means in \"C\".",
        "before_after_code_files": [
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/softmagic.c||src/softmagic.c"
          ],
          "candidate": [
            "src/softmagic.c||src/softmagic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "40: #include <assert.h>",
          "41: #include <string.h>",
          "42: #include <ctype.h>",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.179 2014/03/06 15:23:16 christos Exp $\")",
          "39: #define F(a, b) fmtcheck((a), (b))",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.180 2014/03/15 21:47:40 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:  return 0;",
          "89: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90: #define FILE_FMTDEBUG",
          "91: #ifdef FILE_FMTDEBUG",
          "92: #define F(a, b, c) file_fmtcheck((a), (b), (c), __FILE__, __LINE__)",
          "93: #else",
          "94: #define F(a, b) fmtcheck((b)->desc, (c))",
          "95: #endif",
          "97: private const char * __attribute__((__format_arg__(3)))",
          "98: file_fmtcheck(struct magic_set *ms, const struct magic *m, const char *def,",
          "99:  const char *file, size_t line)",
          "100: {",
          "101:  const char *ptr = fmtcheck(m->desc, def);",
          "102:  if (ptr == def)",
          "103:   file_magerror(ms,",
          "104:       \"%s, %zu: format `%s' does not match with `%s'\",",
          "105:       file, line, m->desc, def);",
          "106:  return ptr;",
          "107: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "411:   case 1:",
          "412:    (void)snprintf(buf, sizeof(buf), \"%c\",",
          "413:        (unsigned char)v);",
          "415:     return -1;",
          "416:    break;",
          "417:   default:",
          "419:        (unsigned char) v) == -1)",
          "420:     return -1;",
          "421:    break;",
          "",
          "[Removed Lines]",
          "414:    if (file_printf(ms, F(m->desc, \"%s\"), buf) == -1)",
          "418:    if (file_printf(ms, F(m->desc, \"%c\"),",
          "",
          "[Added Lines]",
          "432:    if (file_printf(ms, F(ms, m, \"%s\"), buf) == -1)",
          "436:    if (file_printf(ms, F(ms, m, \"%c\"),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "433:   case 1:",
          "434:    (void)snprintf(buf, sizeof(buf), \"%hu\",",
          "435:        (unsigned short)v);",
          "437:     return -1;",
          "438:    break;",
          "439:   default:",
          "441:        (unsigned short) v) == -1)",
          "442:     return -1;",
          "443:    break;",
          "",
          "[Removed Lines]",
          "436:    if (file_printf(ms, F(m->desc, \"%s\"), buf) == -1)",
          "440:    if (file_printf(ms, F(m->desc, \"%hu\"),",
          "",
          "[Added Lines]",
          "454:    if (file_printf(ms, F(ms, m, \"%s\"), buf) == -1)",
          "458:    if (file_printf(ms, F(ms, m, \"%hu\"),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "454:   case -1:",
          "455:    return -1;",
          "456:   case 1:",
          "459:     return -1;",
          "460:    break;",
          "461:   default:",
          "464:     return -1;",
          "465:    break;",
          "466:   }",
          "",
          "[Removed Lines]",
          "457:    (void)snprintf(buf, sizeof(buf), \"%u\", (uint32_t)v);",
          "458:    if (file_printf(ms, F(m->desc, \"%s\"), buf) == -1)",
          "462:    if (file_printf(ms, F(m->desc, \"%u\"),",
          "463:        (uint32_t) v) == -1)",
          "",
          "[Added Lines]",
          "475:    (void)snprintf(buf, sizeof(buf), \"%lu\",",
          "476:        (unsigned long)(uint32_t) v);",
          "477:    if (file_printf(ms, F(ms, m, \"%s\"), buf) == -1)",
          "481:    if (file_printf(ms, F(ms, m, \"%lu\"),",
          "482:        (unsigned long)(uint32_t) v) == -1)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "477:   case 1:",
          "478:    (void)snprintf(buf, sizeof(buf), \"%llu\",",
          "479:        (unsigned long long)v);",
          "481:     return -1;",
          "482:    break;",
          "483:   default:",
          "485:        (unsigned long long) v) == -1)",
          "486:     return -1;",
          "487:    break;",
          "",
          "[Removed Lines]",
          "480:    if (file_printf(ms, F(m->desc, \"%s\"), buf) == -1)",
          "484:    if (file_printf(ms, F(m->desc, \"%llu\"),",
          "",
          "[Added Lines]",
          "499:    if (file_printf(ms, F(ms, m, \"%s\"), buf) == -1)",
          "503:    if (file_printf(ms, F(ms, m, \"%llu\"),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "494:    case FILE_BESTRING16:",
          "495:    case FILE_LESTRING16:",
          "496:   if (m->reln == '=' || m->reln == '!') {",
          "498:     return -1;",
          "499:    t = ms->offset + m->vallen;",
          "500:   }",
          "",
          "[Removed Lines]",
          "497:    if (file_printf(ms, F(m->desc, \"%s\"), m->value.s) == -1)",
          "",
          "[Added Lines]",
          "516:    if (file_printf(ms, F(ms, m, \"%s\"), m->value.s) == -1)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "521:    }",
          "524:     return -1;",
          "526:    if (m->type == FILE_PSTRING)",
          "",
          "[Removed Lines]",
          "523:    if (file_printf(ms, F(m->desc, \"%s\"), str) == -1)",
          "",
          "[Added Lines]",
          "542:    if (file_printf(ms, F(ms, m, \"%s\"), str) == -1)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "532:  case FILE_BEDATE:",
          "533:  case FILE_LEDATE:",
          "534:  case FILE_MEDATE:",
          "536:       file_fmttime(p->l, FILE_T_LOCAL, tbuf)) == -1)",
          "537:    return -1;",
          "538:   t = ms->offset + sizeof(uint32_t);",
          "",
          "[Removed Lines]",
          "535:   if (file_printf(ms, F(m->desc, \"%s\"),",
          "",
          "[Added Lines]",
          "554:   if (file_printf(ms, F(ms, m, \"%s\"),",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "542:  case FILE_BELDATE:",
          "543:  case FILE_LELDATE:",
          "544:  case FILE_MELDATE:",
          "546:       file_fmttime(p->l, 0, tbuf)) == -1)",
          "547:    return -1;",
          "548:   t = ms->offset + sizeof(uint32_t);",
          "",
          "[Removed Lines]",
          "545:   if (file_printf(ms, F(m->desc, \"%s\"),",
          "",
          "[Added Lines]",
          "564:   if (file_printf(ms, F(ms, m, \"%s\"),",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "551:  case FILE_QDATE:",
          "552:  case FILE_BEQDATE:",
          "553:  case FILE_LEQDATE:",
          "555:       file_fmttime(p->q, FILE_T_LOCAL, tbuf)) == -1)",
          "556:    return -1;",
          "557:   t = ms->offset + sizeof(uint64_t);",
          "",
          "[Removed Lines]",
          "554:   if (file_printf(ms, F(m->desc, \"%s\"),",
          "",
          "[Added Lines]",
          "573:   if (file_printf(ms, F(ms, m, \"%s\"),",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "560:  case FILE_QLDATE:",
          "561:  case FILE_BEQLDATE:",
          "562:  case FILE_LEQLDATE:",
          "564:       file_fmttime(p->q, 0, tbuf)) == -1)",
          "565:    return -1;",
          "566:   t = ms->offset + sizeof(uint64_t);",
          "",
          "[Removed Lines]",
          "563:   if (file_printf(ms, F(m->desc, \"%s\"),",
          "",
          "[Added Lines]",
          "582:   if (file_printf(ms, F(ms, m, \"%s\"),",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "569:  case FILE_QWDATE:",
          "570:  case FILE_BEQWDATE:",
          "571:  case FILE_LEQWDATE:",
          "573:       file_fmttime(p->q, FILE_T_WINDOWS, tbuf)) == -1)",
          "574:    return -1;",
          "575:   t = ms->offset + sizeof(uint64_t);",
          "",
          "[Removed Lines]",
          "572:   if (file_printf(ms, F(m->desc, \"%s\"),",
          "",
          "[Added Lines]",
          "591:   if (file_printf(ms, F(ms, m, \"%s\"),",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "584:    return -1;",
          "585:   case 1:",
          "586:    (void)snprintf(buf, sizeof(buf), \"%g\", vf);",
          "588:     return -1;",
          "589:    break;",
          "590:   default:",
          "592:     return -1;",
          "593:    break;",
          "594:   }",
          "",
          "[Removed Lines]",
          "587:    if (file_printf(ms, F(m->desc, \"%s\"), buf) == -1)",
          "591:    if (file_printf(ms, F(m->desc, \"%g\"), vf) == -1)",
          "",
          "[Added Lines]",
          "606:    if (file_printf(ms, F(ms, m, \"%s\"), buf) == -1)",
          "610:    if (file_printf(ms, F(ms, m, \"%g\"), vf) == -1)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "604:    return -1;",
          "605:   case 1:",
          "606:    (void)snprintf(buf, sizeof(buf), \"%g\", vd);",
          "608:     return -1;",
          "609:    break;",
          "610:   default:",
          "612:     return -1;",
          "613:    break;",
          "614:   }",
          "",
          "[Removed Lines]",
          "607:    if (file_printf(ms, F(m->desc, \"%s\"), buf) == -1)",
          "611:    if (file_printf(ms, F(m->desc, \"%g\"), vd) == -1)",
          "",
          "[Added Lines]",
          "626:    if (file_printf(ms, F(ms, m, \"%s\"), buf) == -1)",
          "630:    if (file_printf(ms, F(ms, m, \"%g\"), vd) == -1)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "624:    file_oomem(ms, ms->search.rm_len);",
          "625:    return -1;",
          "626:   }",
          "628:   free(cp);",
          "630:   if (rval == -1)",
          "",
          "[Removed Lines]",
          "627:   rval = file_printf(ms, F(m->desc, \"%s\"), cp);",
          "",
          "[Added Lines]",
          "646:   rval = file_printf(ms, F(ms, m, \"%s\"), cp);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "638:  }",
          "640:  case FILE_SEARCH:",
          "642:    return -1;",
          "643:   if ((m->str_flags & REGEX_OFFSET_START))",
          "644:    t = ms->search.offset;",
          "",
          "[Removed Lines]",
          "641:     if (file_printf(ms, F(m->desc, \"%s\"), m->value.s) == -1)",
          "",
          "[Added Lines]",
          "660:     if (file_printf(ms, F(ms, m, \"%s\"), m->value.s) == -1)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1756:   ms->offset = soffset;",
          "1757:   if (rv == 1) {",
          "1758:    if ((ms->flags & (MAGIC_MIME|MAGIC_APPLE)) == 0 &&",
          "1760:     free(rbuf);",
          "1761:     return -1;",
          "1762:    }",
          "",
          "[Removed Lines]",
          "1759:        file_printf(ms, F(m->desc, \"%u\"), offset) == -1) {",
          "",
          "[Added Lines]",
          "1778:        file_printf(ms, F(ms, m, \"%u\"), offset) == -1) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}