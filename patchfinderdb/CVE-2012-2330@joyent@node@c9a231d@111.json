{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ef3a874f41b617e9531909b2b6bbd6b02f1775a7",
      "candidate_info": {
        "commit_hash": "ef3a874f41b617e9531909b2b6bbd6b02f1775a7",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/ef3a874f41b617e9531909b2b6bbd6b02f1775a7",
        "files": [
          "src/node.cc"
        ],
        "message": "process: set _print_eval even when --eval is not passed\n\nThis is for scripts being fed from stdin:\n\n  $ echo \"{ foo: 'bar' }\" | node -p",
        "before_after_code_files": [
          "src/node.cc||src/node.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2210:   if (eval_string) {",
          "2211:     process->Set(String::NewSymbol(\"_eval\"), String::New(eval_string));",
          "2213:   }",
          "2215:   if (force_repl) {",
          "",
          "[Removed Lines]",
          "2212:     process->Set(String::NewSymbol(\"_print_eval\"), Boolean::New(print_eval));",
          "",
          "[Added Lines]",
          "2212:   }",
          "2215:   if (print_eval) {",
          "2216:     process->Set(String::NewSymbol(\"_print_eval\"), True());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6999fb3d1e342cc5bcd41c5ff41ff0c88ddfb250",
      "candidate_info": {
        "commit_hash": "6999fb3d1e342cc5bcd41c5ff41ff0c88ddfb250",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/6999fb3d1e342cc5bcd41c5ff41ff0c88ddfb250",
        "files": [
          "lib/dgram.js"
        ],
        "message": "dgram: make addMembership() and dropMembership() conform to v0.4 API\n\n- throw on error, don't return an error code",
        "before_after_code_files": [
          "lib/dgram.js||lidgram.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/dgram.js||lidgram.js": [
          "File: lib/dgram.js -> lidgram.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "260:     throw new Error('multicast address must be specified');",
          "261:   }",
          "264: };",
          "",
          "[Removed Lines]",
          "263:   return this._handle.addMembership(multicastAddress, interfaceAddress);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "272:     throw new Error('multicast address must be specified');",
          "273:   }",
          "276: };",
          "",
          "[Removed Lines]",
          "275:   return this._handle.dropMembership(multicastAddress, interfaceAddress);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "01d46f3a204edd56465b970e1c6ca79bcc15de2e",
      "candidate_info": {
        "commit_hash": "01d46f3a204edd56465b970e1c6ca79bcc15de2e",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/01d46f3a204edd56465b970e1c6ca79bcc15de2e",
        "files": [
          "lib/zlib.js",
          "src/node_zlib.cc",
          "test/simple/test-zlib-invalid-input.js"
        ],
        "message": "Fix #3052 Handle errors properly in zlib",
        "before_after_code_files": [
          "lib/zlib.js||lizlib.js",
          "src/node_zlib.cc||src/node_zlib.cc",
          "test/simple/test-zlib-invalid-input.js||test/simple/test-zlib-invalid-input.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/zlib.js||lizlib.js": [
          "File: lib/zlib.js -> lizlib.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:   if (k.match(/^Z/)) exports[k] = binding[k];",
          "51: });",
          "54: exports.Deflate = Deflate;",
          "55: exports.Inflate = Inflate;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "270:   }",
          "272:   this._binding = new binding.Zlib(mode);",
          "273:   this._binding.init(opts.windowBits || exports.Z_DEFAULT_WINDOWBITS,",
          "274:                      opts.level || exports.Z_DEFAULT_COMPRESSION,",
          "275:                      opts.memLevel || exports.Z_DEFAULT_MEMLEVEL,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "285: util.inherits(Zlib, stream.Stream);",
          "287: Zlib.prototype.write = function write(chunk, cb) {",
          "288:   if (this._ended) {",
          "289:     return this.emit('error', new Error('Cannot write after end'));",
          "290:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "323: };",
          "325: Zlib.prototype.end = function end(chunk, cb) {",
          "326:   var self = this;",
          "327:   this._ending = true;",
          "328:   var ret = this.write(chunk, function() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "334: };",
          "336: Zlib.prototype._process = function() {",
          "337:   if (this._processing || this._paused) return;",
          "339:   if (this._queue.length === 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "371:   this._processing = req;",
          "373:   function callback(availInAfter, availOutAfter, buffer) {",
          "374:     var have = availOutBefore - availOutAfter;",
          "376:     assert(have >= 0, 'have should not go down');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/node_zlib.cc||src/node_zlib.cc": [
          "File: src/node_zlib.cc -> src/node_zlib.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: static Persistent<String> callback_sym;",
          "40: enum node_zlib_mode {",
          "41:   DEFLATE = 1,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: static Persistent<String> onerror_sym;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146:     switch (ctx->mode_) {",
          "147:       case DEFLATE:",
          "148:       case GZIP:",
          "149:       case DEFLATERAW:",
          "151:         break;",
          "152:       case UNZIP:",
          "153:       case INFLATE:",
          "154:       case GUNZIP:",
          "155:       case INFLATERAW:",
          "160:           assert(ctx->dictionary_ != NULL && \"Stream has no dictionary\");",
          "170:         }",
          "171:         break;",
          "172:       default:",
          "173:         assert(0 && \"wtf?\");",
          "174:     }",
          "",
          "[Removed Lines]",
          "145:     int err = Z_STREAM_ERROR;",
          "150:         err = deflate(&ctx->strm_, ctx->flush_);",
          "156:         err = inflate(&ctx->strm_, ctx->flush_);",
          "159:         if (err == Z_NEED_DICT) {",
          "163:           err = inflateSetDictionary(&ctx->strm_,",
          "164:                                      ctx->dictionary_,",
          "165:                                      ctx->dictionary_len_);",
          "166:           assert(err == Z_OK && \"Failed to set dictionary\");",
          "169:           err = inflate(&ctx->strm_, ctx->flush_);",
          "175:     assert(err != Z_STREAM_ERROR);",
          "",
          "[Added Lines]",
          "150:         ctx->err_ = deflate(&ctx->strm_, ctx->flush_);",
          "156:         ctx->err_ = inflate(&ctx->strm_, ctx->flush_);",
          "159:         if (ctx->err_ == Z_NEED_DICT) {",
          "161:           if (ctx->dictionary_ != NULL) {",
          "164:             ctx->err_ = inflateSetDictionary(&ctx->strm_,",
          "165:                                              ctx->dictionary_,",
          "166:                                              ctx->dictionary_len_);",
          "167:             assert(ctx->err_ == Z_OK && \"Failed to set dictionary\");",
          "168:             if (ctx->err_ == Z_OK) {",
          "171:               ctx->err_ = inflate(&ctx->strm_, ctx->flush_);",
          "172:             }",
          "173:           }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "184:     HandleScope scope;",
          "185:     ZCtx *ctx = container_of(work_req, ZCtx, work_req_);",
          "187:     Local<Integer> avail_out = Integer::New(ctx->strm_.avail_out);",
          "188:     Local<Integer> avail_in = Integer::New(ctx->strm_.avail_in);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "193:     switch (ctx->err_) {",
          "194:       case Z_OK:",
          "195:       case Z_STREAM_END:",
          "196:       case Z_BUF_ERROR:",
          "198:         break;",
          "199:       default:",
          "201:         ZCtx::Error(ctx, \"Zlib error\");",
          "202:         return;",
          "203:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "198:     ctx->Unref();",
          "199:   }",
          "201:   static Handle<Value> New(const Arguments& args) {",
          "202:     HandleScope scope;",
          "203:     if (args.Length() < 1 || !args[0]->IsInt32()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "219:   static void Error(ZCtx *ctx, const char *msg_) {",
          "220:     const char *msg;",
          "221:     if (ctx->strm_.msg != NULL) {",
          "222:       msg = ctx->strm_.msg;",
          "223:     } else {",
          "224:       msg = msg_;",
          "225:     }",
          "227:     assert(ctx->handle_->Get(onerror_sym)->IsFunction() &&",
          "228:            \"Invalid error handler\");",
          "229:     HandleScope scope;",
          "230:     Local<Value> args[2] = { String::New(msg),",
          "231:                              Local<Value>::New(Number::New(ctx->err_)) };",
          "232:     MakeCallback(ctx->handle_, \"onerror\", ARRAY_SIZE(args), args);",
          "235:     ctx->Unref();",
          "236:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "280:     ctx->flush_ = Z_NO_FLUSH;",
          "282:     if (ctx->mode_ == GZIP || ctx->mode_ == GUNZIP) {",
          "283:       ctx->windowBits_ += 16;",
          "284:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "319:     ctx->err_ = Z_OK;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "291:       ctx->windowBits_ *= -1;",
          "292:     }",
          "295:     switch (ctx->mode_) {",
          "296:       case DEFLATE:",
          "297:       case GZIP:",
          "298:       case DEFLATERAW:",
          "305:         break;",
          "306:       case INFLATE:",
          "307:       case GUNZIP:",
          "308:       case INFLATERAW:",
          "309:       case UNZIP:",
          "311:         break;",
          "312:       default:",
          "313:         assert(0 && \"wtf?\");",
          "314:     }",
          "318:     ctx->dictionary_ = reinterpret_cast<Bytef *>(dictionary);",
          "319:     ctx->dictionary_len_ = dictionary_len;",
          "",
          "[Removed Lines]",
          "294:     int err;",
          "299:         err = deflateInit2(&ctx->strm_,",
          "300:                            ctx->level_,",
          "301:                            Z_DEFLATED,",
          "302:                            ctx->windowBits_,",
          "303:                            ctx->memLevel_,",
          "304:                            ctx->strategy_);",
          "310:         err = inflateInit2(&ctx->strm_, ctx->windowBits_);",
          "316:     assert(err == Z_OK);",
          "",
          "[Added Lines]",
          "337:         ctx->err_ = deflateInit2(&ctx->strm_,",
          "338:                                  ctx->level_,",
          "339:                                  Z_DEFLATED,",
          "340:                                  ctx->windowBits_,",
          "341:                                  ctx->memLevel_,",
          "342:                                  ctx->strategy_);",
          "348:         ctx->err_ = inflateInit2(&ctx->strm_, ctx->windowBits_);",
          "354:     if (ctx->err_ != Z_OK) {",
          "355:       ZCtx::Error(ctx, \"Init error\");",
          "356:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "325:   static void SetDictionary(ZCtx* ctx) {",
          "326:     if (ctx->dictionary_ == NULL) return;",
          "330:     switch (ctx->mode_) {",
          "331:       case DEFLATE:",
          "332:       case DEFLATERAW:",
          "336:         break;",
          "337:       default:",
          "338:         break;",
          "339:     }",
          "342:   }",
          "344:   static void Reset(ZCtx* ctx) {",
          "347:     switch (ctx->mode_) {",
          "348:       case DEFLATE:",
          "349:       case DEFLATERAW:",
          "351:         break;",
          "352:       case INFLATE:",
          "353:       case INFLATERAW:",
          "355:         break;",
          "356:       default:",
          "357:         break;",
          "358:     }",
          "361:   }",
          "363:  private:",
          "",
          "[Removed Lines]",
          "328:     int err = Z_OK;",
          "333:         err = deflateSetDictionary(&ctx->strm_,",
          "334:                                    ctx->dictionary_,",
          "335:                                    ctx->dictionary_len_);",
          "341:     assert(err == Z_OK && \"Failed to set dictionary\");",
          "345:     int err = Z_OK;",
          "350:         err = deflateReset(&ctx->strm_);",
          "354:         err = inflateReset(&ctx->strm_);",
          "360:     assert(err == Z_OK && \"Failed to reset stream\");",
          "",
          "[Added Lines]",
          "369:     ctx->err_ = Z_OK;",
          "374:         ctx->err_ = deflateSetDictionary(&ctx->strm_,",
          "375:                                          ctx->dictionary_,",
          "376:                                          ctx->dictionary_len_);",
          "382:     if (ctx->err_ != Z_OK) {",
          "383:       ZCtx::Error(ctx, \"Failed to set dictionary\");",
          "384:     }",
          "388:     ctx->err_ = Z_OK;",
          "393:         ctx->err_ = deflateReset(&ctx->strm_);",
          "397:         ctx->err_ = inflateReset(&ctx->strm_);",
          "403:     if (ctx->err_ != Z_OK) {",
          "404:       ZCtx::Error(ctx, \"Failed to reset stream\");",
          "405:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "370:   int memLevel_;",
          "371:   int strategy_;",
          "373:   Bytef* dictionary_;",
          "374:   size_t dictionary_len_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "418:   int err_;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "399:   target->Set(String::NewSymbol(\"Zlib\"), z->GetFunction());",
          "401:   callback_sym = NODE_PSYMBOL(\"callback\");",
          "403:   NODE_DEFINE_CONSTANT(target, Z_NO_FLUSH);",
          "404:   NODE_DEFINE_CONSTANT(target, Z_PARTIAL_FLUSH);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "449:   onerror_sym = NODE_PSYMBOL(\"onerror\");",
          "",
          "---------------"
        ],
        "test/simple/test-zlib-invalid-input.js||test/simple/test-zlib-invalid-input.js": [
          "File: test/simple/test-zlib-invalid-input.js -> test/simple/test-zlib-invalid-input.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: var nonStringInputs = [1, true, {a: 1}, ['a']];",
          "30: nonStringInputs.forEach(function(input) {",
          "32:   assert.doesNotThrow(function() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: console.error('Doing the non-strings');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:     });",
          "37:   });",
          "38: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: console.error('Doing the unzips');",
          "43: var unzips = [ zlib.Unzip(),",
          "44:                zlib.Gunzip(),",
          "45:                zlib.Inflate(),",
          "46:                zlib.InflateRaw() ];",
          "47: var hadError = [];",
          "48: unzips.forEach(function (uz, i) {",
          "49:   console.error('Error for '+uz.constructor.name);",
          "50:   uz.on('error', function(er) {",
          "51:     console.error('Error event', er);",
          "52:     hadError[i] = true;",
          "58:     assert.equal(uz.write('also invalid'), true);",
          "59:     assert.equal(uz.end(), true);",
          "60:   });",
          "62:   uz.on('end', function(er) {",
          "63:     throw new Error('end event should not be emitted '+uz.constructor.name);",
          "64:   });",
          "67:   uz.write('this is not valid compressed data.');",
          "68: });",
          "70: process.on('exit', function() {",
          "71:   assert.deepEqual(hadError, [true, true, true, true], 'expect 4 errors');",
          "72: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "051908e023f87894fa68f5b64d0b99a19a7db01e",
      "candidate_info": {
        "commit_hash": "051908e023f87894fa68f5b64d0b99a19a7db01e",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/051908e023f87894fa68f5b64d0b99a19a7db01e",
        "files": [
          "ChangeLog",
          "doc/about/index.html",
          "doc/community/index.html",
          "doc/index.html",
          "doc/logos/index.html",
          "doc/template.html",
          "src/node_version.h"
        ],
        "message": "2012.02.02, Version 0.6.10 (stable)\n\n* Update V8 to 3.6.6.20\n\n* Add npm msysgit bash shim to msi installer (isaacs)\n\n* buffers: fix intermittent out of bounds error (Ben Noordhuis)\n\n* buffers: honor length argument in base64 decoder (Ben Noordhuis)\n\n* windows: Fix path.exists regression (Bert Belder)\n\n* Make QueryString.parse run faster (Philip Tellis)\n\n* http: avoid freeing http-parser objects too early (koichik)\n\n* timers: add v0.4 compatibility hack (Ben Noordhuis)\n\n* Proper EPERM error code support (Igor Zinkovsky, Brandon Philips)\n\n* dgram: Implement udp multicast methods on windows (Bert Belder)",
        "before_after_code_files": [
          "src/node_version.h||src/node_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_version.h||src/node_version.h": [
          "File: src/node_version.h -> src/node_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #define NODE_MAJOR_VERSION 0",
          "30: #define NODE_MINOR_VERSION 6",
          "31: #define NODE_PATCH_VERSION 10",
          "34: #ifndef NODE_STRINGIFY",
          "35: #define NODE_STRINGIFY(n) NODE_STRINGIFY_HELPER(n)",
          "",
          "[Removed Lines]",
          "32: #define NODE_VERSION_IS_RELEASE 0",
          "",
          "[Added Lines]",
          "32: #define NODE_VERSION_IS_RELEASE 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9d792f3183be5490f5c3b3d579524fdf246795b9",
      "candidate_info": {
        "commit_hash": "9d792f3183be5490f5c3b3d579524fdf246795b9",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/9d792f3183be5490f5c3b3d579524fdf246795b9",
        "files": [
          "src/cares_wrap.cc",
          "src/fs_event_wrap.cc",
          "src/handle_wrap.cc",
          "src/node.cc",
          "src/node.h",
          "src/node_crypto.cc",
          "src/node_file.cc",
          "src/node_zlib.cc",
          "src/pipe_wrap.cc",
          "src/process_wrap.cc",
          "src/stream_wrap.cc",
          "src/tcp_wrap.cc",
          "src/timer_wrap.cc",
          "src/tty_wrap.cc",
          "src/udp_wrap.cc"
        ],
        "message": "Add node::Loop() and don't inc node_isolate.h in *.cc\n\nnode::Loop() replaces the NODE_LOOP macro. This avoids hitting\nv8::Isolate::GetCurrent() for each loop lookup when HAVE_ISOLATE==0",
        "before_after_code_files": [
          "src/cares_wrap.cc||src/cares_wrap.cc",
          "src/fs_event_wrap.cc||src/fs_event_wrap.cc",
          "src/handle_wrap.cc||src/handle_wrap.cc",
          "src/node.cc||src/node.cc",
          "src/node.h||src/node.h",
          "src/node_crypto.cc||src/node_crypto.cc",
          "src/node_file.cc||src/node_file.cc",
          "src/node_zlib.cc||src/node_zlib.cc",
          "src/pipe_wrap.cc||src/pipe_wrap.cc",
          "src/process_wrap.cc||src/process_wrap.cc",
          "src/stream_wrap.cc||src/stream_wrap.cc",
          "src/tcp_wrap.cc||src/tcp_wrap.cc",
          "src/timer_wrap.cc||src/timer_wrap.cc",
          "src/tty_wrap.cc||src/tty_wrap.cc",
          "src/udp_wrap.cc||src/udp_wrap.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/cares_wrap.cc||src/cares_wrap.cc": [
          "File: src/cares_wrap.cc -> src/cares_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <assert.h>",
          "23: #include <node.h>",
          "24: #include <req_wrap.h>",
          "26: #include <uv.h>",
          "28: #include <string.h>",
          "",
          "[Removed Lines]",
          "25: #include <node_isolate.h>",
          "",
          "[Added Lines]",
          "25: #include <node_vars.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "609:   if (status) {",
          "612:     argv[0] = Local<Value>::New(Null());",
          "613:   } else {",
          "",
          "[Removed Lines]",
          "611:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "611:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "711:   hints.ai_family = fam;",
          "712:   hints.ai_socktype = SOCK_STREAM;",
          "715:                          &req_wrap->req_,",
          "716:                          AfterGetAddrInfo,",
          "",
          "[Removed Lines]",
          "714:   int r = uv_getaddrinfo(NODE_LOOP(),",
          "",
          "[Added Lines]",
          "714:   int r = uv_getaddrinfo(Loop(),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "720:   req_wrap->Dispatched();",
          "722:   if (r) {",
          "724:     delete req_wrap;",
          "725:     return scope.Close(v8::Null());",
          "726:   } else {",
          "",
          "[Removed Lines]",
          "723:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "723:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "737:   assert(r == ARES_SUCCESS);",
          "739:   struct ares_options options;",
          "741:   assert(r == 0);",
          "743:   NODE_SET_METHOD(target, \"queryA\", Query<QueryAWrap>);",
          "",
          "[Removed Lines]",
          "740:   uv_ares_init_options(NODE_LOOP(), &ares_channel, &options, 0);",
          "",
          "[Added Lines]",
          "740:   uv_ares_init_options(Loop(), &ares_channel, &options, 0);",
          "",
          "---------------"
        ],
        "src/fs_event_wrap.cc||src/fs_event_wrap.cc": [
          "File: src/fs_event_wrap.cc -> src/fs_event_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <node.h>",
          "23: #include <handle_wrap.h>",
          "26: #include <stdlib.h>",
          "",
          "[Removed Lines]",
          "24: #include <node_isolate.h>",
          "",
          "[Added Lines]",
          "24: #include <node_vars.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:   String::Utf8Value path(args[0]->ToString());",
          "114:   if (r == 0) {",
          "116:     if (!args[1]->IsTrue()) {",
          "118:     }",
          "119:     wrap->initialized_ = true;",
          "120:   } else {",
          "122:   }",
          "124:   return scope.Close(Integer::New(r));",
          "",
          "[Removed Lines]",
          "113:   int r = uv_fs_event_init(NODE_LOOP(), &wrap->handle_, *path, OnEvent, 0);",
          "117:       uv_unref(NODE_LOOP());",
          "121:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "113:   int r = uv_fs_event_init(Loop(), &wrap->handle_, *path, OnEvent, 0);",
          "117:       uv_unref(Loop());",
          "121:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "148:   if (status) {",
          "150:     eventStr = String::Empty();",
          "151:   }",
          "152:   else if (events & UV_RENAME) {",
          "",
          "[Removed Lines]",
          "149:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "149:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------"
        ],
        "src/handle_wrap.cc||src/handle_wrap.cc": [
          "File: src/handle_wrap.cc -> src/handle_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <node.h>",
          "23: #include <handle_wrap.h>",
          "26: namespace node {",
          "",
          "[Removed Lines]",
          "24: #include <node_isolate.h>",
          "",
          "[Added Lines]",
          "24: #include <node_vars.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:   }",
          "73:   wrap->unref = true;",
          "76:   return v8::Undefined();",
          "77: }",
          "",
          "[Removed Lines]",
          "74:   uv_unref(NODE_LOOP());",
          "",
          "[Added Lines]",
          "74:   uv_unref(Loop());",
          "",
          "---------------"
        ],
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:                  char** argv);",
          "150: static void StartGCTimer () {",
          "151:   if (!uv_is_active((uv_handle_t*) &gc_timer)) {",
          "152:     uv_timer_start(&gc_timer, node::CheckStatus, 5000, 5000);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150: uv_loop_t* Loop() {",
          "151: #if defined(HAVE_ISOLATES) && HAVE_ISOLATES",
          "152:   return Isolate::GetCurrent()->GetLoop();",
          "153: #else",
          "154:   return uv_default_loop();",
          "155: #endif",
          "156: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "173: static void Check(uv_check_t* watcher, int status) {",
          "174:   assert(watcher == &gc_check);",
          "177:   tick_time_head = (tick_time_head + 1) % RPM_SAMPLES;",
          "179:   StartGCTimer();",
          "",
          "[Removed Lines]",
          "176:   tick_times[tick_time_head] = uv_now(NODE_LOOP());",
          "",
          "[Added Lines]",
          "185:   tick_times[tick_time_head] = uv_now(Loop());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "203:   need_tick_cb = false;",
          "204:   if (uv_is_active((uv_handle_t*) &tick_spinner)) {",
          "205:     uv_idle_stop(&tick_spinner);",
          "207:   }",
          "209:   HandleScope scope;",
          "",
          "[Removed Lines]",
          "206:     uv_unref(NODE_LOOP());",
          "",
          "[Added Lines]",
          "215:     uv_unref(Loop());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "246:   if (!uv_is_active((uv_handle_t*) &tick_spinner)) {",
          "247:     uv_idle_start(&tick_spinner, Spin);",
          "249:   }",
          "250:   return Undefined();",
          "251: }",
          "",
          "[Removed Lines]",
          "248:     uv_ref(NODE_LOOP());",
          "",
          "[Added Lines]",
          "257:     uv_ref(Loop());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1497:     }",
          "1498:   }",
          "",
          "[Removed Lines]",
          "1500:   double d = uv_now(NODE_LOOP()) - TICK_TIME(3);",
          "",
          "[Added Lines]",
          "1509:   double d = uv_now(Loop()) - TICK_TIME(3);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1526: v8::Handle<v8::Value> UVCounters(const v8::Arguments& args) {",
          "1527:   HandleScope scope;",
          "1531:   Local<Object> obj = Object::New();",
          "",
          "[Removed Lines]",
          "1529:   uv_counters_t* c = &NODE_LOOP()->counters;",
          "",
          "[Added Lines]",
          "1538:   uv_counters_t* c = &Loop()->counters;",
          "",
          "---------------"
        ],
        "src/node.h||src/node.h": [
          "File: src/node.h -> src/node.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "75: #define NODE_STRINGIFY_HELPER(n) #n",
          "76: #endif",
          "80: namespace node {",
          "82: int Start(int argc, char *argv[]);",
          "",
          "[Removed Lines]",
          "78: #define NODE_LOOP() (node::Isolate::GetCurrent()->GetLoop())",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86: void Load(v8::Handle<v8::Object> process);",
          "87: void EmitExit(v8::Handle<v8::Object> process);",
          "89: #define NODE_PSYMBOL(s) \\",
          "90:   v8::Persistent<v8::String>::New(v8::String::NewSymbol(s))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89: uv_loop_t* Loop();",
          "",
          "---------------"
        ],
        "src/node_crypto.cc||src/node_crypto.cc": [
          "File: src/node_crypto.cc -> src/node_crypto.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include <node.h>",
          "26: #include <node_buffer.h>",
          "28: #include <node_root_certs.h>",
          "30: #include <string.h>",
          "",
          "[Removed Lines]",
          "27: #include <node_isolate.h>",
          "",
          "[Added Lines]",
          "27: #include <node_vars.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4119:   req = new uv_work_t();",
          "4120:   req->data = request;",
          "4123:   return Undefined();",
          "",
          "[Removed Lines]",
          "4121:   uv_queue_work(NODE_LOOP(), req, EIO_PBKDF2, EIO_PBKDF2After);",
          "",
          "[Added Lines]",
          "4121:   uv_queue_work(Loop(), req, EIO_PBKDF2, EIO_PBKDF2After);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4241:     Local<Function> callback_v = Local<Function>(Function::Cast(*args[1]));",
          "4242:     req->callback_ = Persistent<Function>::New(callback_v);",
          "4245:                   &req->work_req_,",
          "4246:                   RandomBytesWork<generator>,",
          "4247:                   RandomBytesAfter<generator>);",
          "",
          "[Removed Lines]",
          "4244:     uv_queue_work(NODE_LOOP(),",
          "",
          "[Added Lines]",
          "4244:     uv_queue_work(Loop(),",
          "",
          "---------------"
        ],
        "src/node_file.cc||src/node_file.cc": [
          "File: src/node_file.cc -> src/node_file.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"node.h\"",
          "23: #include \"node_file.h\"",
          "24: #include \"node_buffer.h\"",
          "26: #ifdef __POSIX__",
          "27: # include \"node_stat_watcher.h\"",
          "28: #endif",
          "",
          "[Removed Lines]",
          "25: #include <node_isolate.h>",
          "",
          "[Added Lines]",
          "25: #include <node_vars.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227: #define ASYNC_CALL(func, callback, ...)                           \\",
          "228:   FSReqWrap* req_wrap = new FSReqWrap();                          \\",
          "230:       __VA_ARGS__, After);                                        \\",
          "231:   assert(r == 0);                                                 \\",
          "232:   req_wrap->object_->Set(oncomplete_sym, callback);               \\",
          "",
          "[Removed Lines]",
          "229:   int r = uv_fs_##func(NODE_LOOP(), &req_wrap->req_,              \\",
          "",
          "[Added Lines]",
          "229:   int r = uv_fs_##func(Loop(), &req_wrap->req_,              \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "236: #define SYNC_CALL(func, path, ...)                                \\",
          "237:   fs_req_wrap req_wrap;                                           \\",
          "239:   if (result < 0) {                                               \\",
          "241:     return ThrowException(UVException(code, #func, \"\", path));    \\",
          "242:   }",
          "",
          "[Removed Lines]",
          "238:   int result = uv_fs_##func(NODE_LOOP(), &req_wrap.req, __VA_ARGS__, NULL); \\",
          "240:     int code = uv_last_error(NODE_LOOP()).code;             \\",
          "",
          "[Added Lines]",
          "238:   int result = uv_fs_##func(Loop(), &req_wrap.req, __VA_ARGS__, NULL); \\",
          "240:     int code = uv_last_error(Loop()).code;             \\",
          "",
          "---------------"
        ],
        "src/node_zlib.cc||src/node_zlib.cc": [
          "File: src/node_zlib.cc -> src/node_zlib.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include <node.h>",
          "31: #include <node_buffer.h>",
          "33: #include <req_wrap.h>",
          "35: #include <node_vars.h>",
          "",
          "[Removed Lines]",
          "32: #include <node_isolate.h>",
          "",
          "[Added Lines]",
          "32: #include <node_vars.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134:     uv_work_t* work_req = new uv_work_t();",
          "135:     work_req->data = req_wrap;",
          "138:                   work_req,",
          "139:                   ZCtx<mode>::Process,",
          "140:                   ZCtx<mode>::After);",
          "",
          "[Removed Lines]",
          "137:     uv_queue_work(NODE_LOOP(),",
          "",
          "[Added Lines]",
          "137:     uv_queue_work(Loop(),",
          "",
          "---------------"
        ],
        "src/pipe_wrap.cc||src/pipe_wrap.cc": [
          "File: src/pipe_wrap.cc -> src/pipe_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <node.h>",
          "23: #include <node_buffer.h>",
          "25: #include <req_wrap.h>",
          "26: #include <handle_wrap.h>",
          "27: #include <stream_wrap.h>",
          "",
          "[Removed Lines]",
          "24: #include <node_isolate.h>",
          "",
          "[Added Lines]",
          "24: #include <node_vars.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125: PipeWrap::PipeWrap(Handle<Object> object, bool ipc)",
          "126:     : StreamWrap(object, (uv_stream_t*) &handle_) {",
          "128:   assert(r == 0); // How do we proxy this error up to javascript?",
          "130:   handle_.data = reinterpret_cast<void*>(this);",
          "",
          "[Removed Lines]",
          "127:   int r = uv_pipe_init(NODE_LOOP(), &handle_, ipc);",
          "",
          "[Added Lines]",
          "127:   int r = uv_pipe_init(Loop(), &handle_, ipc);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "142:   int r = uv_pipe_bind(&wrap->handle_, *name);",
          "147:   return scope.Close(Integer::New(r));",
          "148: }",
          "",
          "[Removed Lines]",
          "145:   if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "145:   if (r) SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "173:   int r = uv_listen((uv_stream_t*)&wrap->handle_, backlog, OnConnection);",
          "178:   return scope.Close(Integer::New(r));",
          "179: }",
          "",
          "[Removed Lines]",
          "176:   if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "176:   if (r) SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "226:   assert(wrap->object_.IsEmpty() == false);",
          "228:   if (status) {",
          "230:   }",
          "232:   Local<Value> argv[3] = {",
          "",
          "[Removed Lines]",
          "229:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "229:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------"
        ],
        "src/process_wrap.cc||src/process_wrap.cc": [
          "File: src/process_wrap.cc -> src/process_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <node.h>",
          "23: #include <handle_wrap.h>",
          "25: #include <pipe_wrap.h>",
          "26: #include <string.h>",
          "27: #include <stdlib.h>",
          "",
          "[Removed Lines]",
          "24: #include <node_isolate.h>",
          "",
          "[Added Lines]",
          "24: #include <node_vars.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "176:         Get(String::NewSymbol(\"windowsVerbatimArguments\"))->IsTrue();",
          "177: #endif",
          "181:     wrap->SetHandle((uv_handle_t*)&wrap->process_);",
          "182:     assert(wrap->process_.data == wrap);",
          "",
          "[Removed Lines]",
          "179:     int r = uv_spawn(NODE_LOOP(), &wrap->process_, options);",
          "",
          "[Added Lines]",
          "179:     int r = uv_spawn(Loop(), &wrap->process_, options);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "196:       delete [] options.env;",
          "197:     }",
          "201:     return scope.Close(Integer::New(r));",
          "202:   }",
          "",
          "[Removed Lines]",
          "199:     if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "199:     if (r) SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "211:     int r = uv_process_kill(&wrap->process_, signal);",
          "215:     return scope.Close(Integer::New(r));",
          "216:   }",
          "",
          "[Removed Lines]",
          "213:     if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "213:     if (r) SetErrno(uv_last_error(Loop()));",
          "",
          "---------------"
        ],
        "src/stream_wrap.cc||src/stream_wrap.cc": [
          "File: src/stream_wrap.cc -> src/stream_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <node.h>",
          "23: #include <node_buffer.h>",
          "25: #include <handle_wrap.h>",
          "26: #include <stream_wrap.h>",
          "27: #include <tcp_wrap.h>",
          "",
          "[Removed Lines]",
          "24: #include <node_isolate.h>",
          "",
          "[Added Lines]",
          "24: #include <node_vars.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "133:   }",
          "138:   return scope.Close(Integer::New(r));",
          "139: }",
          "",
          "[Removed Lines]",
          "136:   if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "136:   if (r) SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "147:   int r = uv_read_stop(wrap->stream_);",
          "152:   return scope.Close(Integer::New(r));",
          "153: }",
          "",
          "[Removed Lines]",
          "150:   if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "150:   if (r) SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "226:       slab_used -= buf.len;",
          "227:     }",
          "230:     MakeCallback(wrap->object_, \"onread\", 0, NULL);",
          "231:     return;",
          "232:   }",
          "",
          "[Removed Lines]",
          "229:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "229:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "339:   wrap->UpdateWriteQueueSize();",
          "341:   if (r) {",
          "343:     delete req_wrap;",
          "344:     return scope.Close(v8::Null());",
          "345:   } else {",
          "",
          "[Removed Lines]",
          "342:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "342:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "359:   assert(wrap->object_.IsEmpty() == false);",
          "361:   if (status) {",
          "363:   }",
          "365:   wrap->UpdateWriteQueueSize();",
          "",
          "[Removed Lines]",
          "362:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "362:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "389:   req_wrap->Dispatched();",
          "391:   if (r) {",
          "393:     delete req_wrap;",
          "394:     return scope.Close(v8::Null());",
          "395:   } else {",
          "",
          "[Removed Lines]",
          "392:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "392:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "409:   HandleScope scope;",
          "411:   if (status) {",
          "413:   }",
          "415:   Local<Value> argv[3] = {",
          "",
          "[Removed Lines]",
          "412:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "412:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------"
        ],
        "src/tcp_wrap.cc||src/tcp_wrap.cc": [
          "File: src/tcp_wrap.cc -> src/tcp_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <node.h>",
          "23: #include <node_buffer.h>",
          "25: #include <req_wrap.h>",
          "26: #include <handle_wrap.h>",
          "27: #include <stream_wrap.h>",
          "",
          "[Removed Lines]",
          "24: #include <node_isolate.h>",
          "",
          "[Added Lines]",
          "24: #include <node_vars.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "156: TCPWrap::TCPWrap(Handle<Object> object)",
          "157:     : StreamWrap(object, (uv_stream_t*) &handle_) {",
          "159:   assert(r == 0); // How do we proxy this error up to javascript?",
          "161:   UpdateWriteQueueSize();",
          "",
          "[Removed Lines]",
          "158:   int r = uv_tcp_init(NODE_LOOP(), &handle_);",
          "",
          "[Added Lines]",
          "158:   int r = uv_tcp_init(Loop(), &handle_);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "184:   Local<Object> sockname = Object::New();",
          "185:   if (r != 0) {",
          "187:   } else {",
          "188:     family = address.ss_family;",
          "",
          "[Removed Lines]",
          "186:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "186:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "226:   Local<Object> sockname = Object::New();",
          "227:   if (r != 0) {",
          "229:   } else {",
          "230:     family = address.ss_family;",
          "",
          "[Removed Lines]",
          "228:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "228:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "259:   int r = uv_tcp_nodelay(&wrap->handle_, 1);",
          "260:   if (r)",
          "263:   return Undefined();",
          "264: }",
          "",
          "[Removed Lines]",
          "261:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "261:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "275:   int r = uv_tcp_keepalive(&wrap->handle_, enable, delay);",
          "276:   if (r)",
          "279:   return Undefined();",
          "280: }",
          "",
          "[Removed Lines]",
          "277:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "277:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "291:   int r = uv_tcp_simultaneous_accepts(&wrap->handle_, enable ? 1 : 0);",
          "292:   if (r)",
          "295:   return Undefined();",
          "296: }",
          "",
          "[Removed Lines]",
          "293:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "293:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "309:   int r = uv_tcp_bind(&wrap->handle_, address);",
          "314:   return scope.Close(Integer::New(r));",
          "315: }",
          "",
          "[Removed Lines]",
          "312:   if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "312:   if (r) SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "327:   int r = uv_tcp_bind6(&wrap->handle_, address);",
          "332:   return scope.Close(Integer::New(r));",
          "333: }",
          "",
          "[Removed Lines]",
          "330:   if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "330:   if (r) SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "343:   int r = uv_listen((uv_stream_t*)&wrap->handle_, backlog, OnConnection);",
          "348:   return scope.Close(Integer::New(r));",
          "349: }",
          "",
          "[Removed Lines]",
          "346:   if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "346:   if (r) SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "379:     argv[0] = client_obj;",
          "380:   } else {",
          "382:     argv[0] = v8::Null();",
          "383:   }",
          "",
          "[Removed Lines]",
          "381:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "381:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "397:   assert(wrap->object_.IsEmpty() == false);",
          "399:   if (status) {",
          "401:   }",
          "403:   Local<Value> argv[3] = {",
          "",
          "[Removed Lines]",
          "400:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "400:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "433:   req_wrap->Dispatched();",
          "435:   if (r) {",
          "437:     delete req_wrap;",
          "438:     return scope.Close(v8::Null());",
          "439:   } else {",
          "",
          "[Removed Lines]",
          "436:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "436:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "460:   req_wrap->Dispatched();",
          "462:   if (r) {",
          "464:     delete req_wrap;",
          "465:     return scope.Close(v8::Null());",
          "466:   } else {",
          "",
          "[Removed Lines]",
          "463:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "463:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------"
        ],
        "src/timer_wrap.cc||src/timer_wrap.cc": [
          "File: src/timer_wrap.cc -> src/timer_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <node.h>",
          "23: #include <handle_wrap.h>",
          "26: #define UNWRAP \\",
          "27:   assert(!args.Holder().IsEmpty()); \\",
          "",
          "[Removed Lines]",
          "24: #include <node_isolate.h>",
          "",
          "[Added Lines]",
          "24: #include <node_vars.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:       : HandleWrap(object, (uv_handle_t*) &handle_) {",
          "93:     active_ = false;",
          "96:     assert(r == 0);",
          "98:     handle_.data = this;",
          "",
          "[Removed Lines]",
          "95:     int r = uv_timer_init(NODE_LOOP(), &handle_);",
          "",
          "[Added Lines]",
          "95:     int r = uv_timer_init(Loop(), &handle_);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "104:   }",
          "106:   ~TimerWrap() {",
          "108:   }",
          "110:   void StateChange() {",
          "",
          "[Removed Lines]",
          "103:     uv_unref(NODE_LOOP());",
          "107:     if (!active_) uv_ref(NODE_LOOP());",
          "",
          "[Added Lines]",
          "103:     uv_unref(Loop());",
          "107:     if (!active_) uv_ref(Loop());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "114:     if (!was_active && active_) {",
          "118:     } else if (was_active && !active_) {",
          "122:     }",
          "123:   }",
          "",
          "[Removed Lines]",
          "117:       uv_ref(NODE_LOOP());",
          "121:       uv_unref(NODE_LOOP());",
          "",
          "[Added Lines]",
          "117:       uv_ref(Loop());",
          "121:       uv_unref(Loop());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "133:     int r = uv_timer_start(&wrap->handle_, OnTimeout, timeout, repeat);",
          "138:     wrap->StateChange();",
          "",
          "[Removed Lines]",
          "136:     if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "136:     if (r) SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "148:     int r = uv_timer_stop(&wrap->handle_);",
          "152:     wrap->StateChange();",
          "",
          "[Removed Lines]",
          "150:     if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "150:     if (r) SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "162:     int r = uv_timer_again(&wrap->handle_);",
          "166:     wrap->StateChange();",
          "",
          "[Removed Lines]",
          "164:     if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "164:     if (r) SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "188:     int64_t repeat = uv_timer_get_repeat(&wrap->handle_);",
          "192:     return scope.Close(Integer::New(repeat));",
          "193:   }",
          "",
          "[Removed Lines]",
          "190:     if (repeat < 0) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "190:     if (repeat < 0) SetErrno(uv_last_error(Loop()));",
          "",
          "---------------"
        ],
        "src/tty_wrap.cc||src/tty_wrap.cc": [
          "File: src/tty_wrap.cc -> src/tty_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <node.h>",
          "23: #include <node_buffer.h>",
          "25: #include <req_wrap.h>",
          "26: #include <handle_wrap.h>",
          "27: #include <stream_wrap.h>",
          "",
          "[Removed Lines]",
          "24: #include <node_isolate.h>",
          "",
          "[Added Lines]",
          "24: #include <node_vars.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:     int r = uv_tty_get_winsize(&wrap->handle_, &width, &height);",
          "127:     if (r) {",
          "129:       return v8::Undefined();",
          "130:     }",
          "",
          "[Removed Lines]",
          "128:       SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "128:       SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144:     int r = uv_tty_set_mode(&wrap->handle_, args[0]->IsTrue());",
          "146:     if (r) {",
          "148:     }",
          "150:     return scope.Close(Integer::New(r));",
          "",
          "[Removed Lines]",
          "147:       SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "147:       SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "171:   TTYWrap(Handle<Object> object, int fd, bool readable)",
          "172:       : StreamWrap(object, (uv_stream_t*)&handle_) {",
          "174:   }",
          "176:   uv_tty_t handle_;",
          "",
          "[Removed Lines]",
          "173:     uv_tty_init(NODE_LOOP(), &handle_, fd, readable);",
          "",
          "[Added Lines]",
          "173:     uv_tty_init(Loop(), &handle_, fd, readable);",
          "",
          "---------------"
        ],
        "src/udp_wrap.cc||src/udp_wrap.cc": [
          "File: src/udp_wrap.cc -> src/udp_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <node.h>",
          "23: #include <node_buffer.h>",
          "26: #include <req_wrap.h>",
          "27: #include <handle_wrap.h>",
          "",
          "[Removed Lines]",
          "24: #include <node_isolate.h>",
          "",
          "[Added Lines]",
          "24: #include <node_vars.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105: UDPWrap::UDPWrap(Handle<Object> object): HandleWrap(object,",
          "106:                                                     (uv_handle_t*)&handle_) {",
          "108:   assert(r == 0); // can't fail anyway",
          "109:   handle_.data = reinterpret_cast<void*>(this);",
          "110: }",
          "",
          "[Removed Lines]",
          "107:   int r = uv_udp_init(NODE_LOOP(), &handle_);",
          "",
          "[Added Lines]",
          "107:   int r = uv_udp_init(Loop(), &handle_);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "177:   }",
          "179:   if (r)",
          "182:   return scope.Close(Integer::New(r));",
          "183: }",
          "",
          "[Removed Lines]",
          "180:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "180:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "234:   req_wrap->Dispatched();",
          "236:   if (r) {",
          "238:     delete req_wrap;",
          "239:     return Null();",
          "240:   }",
          "",
          "[Removed Lines]",
          "237:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "237:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "263:   int r = uv_udp_recv_start(&wrap->handle_, OnAlloc, OnRecv);",
          "266:     return False();",
          "267:   }",
          "",
          "[Removed Lines]",
          "264:   if (r && uv_last_error(NODE_LOOP()).code != UV_EALREADY) {",
          "265:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "264:   if (r && uv_last_error(Loop()).code != UV_EALREADY) {",
          "265:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "298:     return scope.Close(sockname);",
          "299:   }",
          "300:   else {",
          "302:     return Null();",
          "303:   }",
          "304: }",
          "",
          "[Removed Lines]",
          "301:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "301:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "317:   assert(wrap->object_.IsEmpty() == false);",
          "319:   if (status) {",
          "321:   }",
          "323:   Local<Value> argv[4] = {",
          "",
          "[Removed Lines]",
          "320:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "320:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "365:   };",
          "367:   if (nread == -1) {",
          "369:   }",
          "370:   else {",
          "371:     Local<Object> rinfo = Object::New();",
          "",
          "[Removed Lines]",
          "368:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "[Added Lines]",
          "368:     SetErrno(uv_last_error(Loop()));",
          "",
          "---------------"
        ]
      }
    }
  ]
}