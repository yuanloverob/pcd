{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c5f808d85ef130717aee1bc7e7ffcd934c84ab66",
      "candidate_info": {
        "commit_hash": "c5f808d85ef130717aee1bc7e7ffcd934c84ab66",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c5f808d85ef130717aee1bc7e7ffcd934c84ab66",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/insert.c",
          "src/where.c"
        ],
        "message": "Add testcase macros.\n\nFossilOrigin-Name: fb9c9bb284d441bd7aa34c87b6fd8ce57d036c17623d82354154fc6286bdd134",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 27ab41c9102e7801ff829488fc123a8040da008bef373d6704efbe2f93e1da90",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3410:       return;",
          "3411: #endif",
          "3412:     }else if( !HasRowid(pTab) ){",
          "3413:       x = sqlite3TableColumnToIndex(sqlite3PrimaryKeyIndex(pTab), iCol);",
          "3414:       op = OP_Column;",
          "3415:     }else{",
          "3416:       x = sqlite3TableColumnToStorage(pTab,iCol);",
          "3417:       op = OP_Column;",
          "3418:     }",
          "3419:     sqlite3VdbeAddOp3(v, op, iTabCur, x, regOut);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3413:       testcase( iCol!=sqlite3TableColumnToStorage(pTab, iCol) );",
          "3418:       testcase( x!=iCol );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3584:           Column *pCol;",
          "3585:           Table *pTab = pExpr->y.pTab;",
          "3586:           int iSrc;",
          "3587:           assert( pTab!=0 );",
          "3591:             return -1-pParse->iSelfTab;",
          "3592:           }",
          "3596: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "3597:           if( pCol->colFlags & COLFLAG_GENERATED ){",
          "3598:             if( pCol->colFlags & COLFLAG_BUSY ){",
          "",
          "[Removed Lines]",
          "3588:           assert( pExpr->iColumn>=XN_ROWID );",
          "3589:           assert( pExpr->iColumn<pExpr->y.pTab->nCol );",
          "3590:           if( pExpr->iColumn<0 ){",
          "3593:           pCol = pTab->aCol + pExpr->iColumn;",
          "3594:           iSrc = sqlite3TableColumnToStorage(pTab, pExpr->iColumn)",
          "3595:                       - pParse->iSelfTab;",
          "",
          "[Added Lines]",
          "3589:           int iCol = pExpr->iColumn;",
          "3591:           assert( iCol>=XN_ROWID );",
          "3592:           assert( iCol<pExpr->y.pTab->nCol );",
          "3593:           if( iCol<0 ){",
          "3596:           pCol = pTab->aCol + iCol;",
          "3597:           testcase( iCol!=sqlite3TableColumnToStorage(pTab,iCol) );",
          "3598:           iSrc = sqlite3TableColumnToStorage(pTab, iCol) - pParse->iSelfTab;",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1464:       pParse->iSelfTab = 0;",
          "1465:       if( onError==OE_Replace ) onError = OE_Abort;",
          "1466:     }else{",
          "1467:       iReg = sqlite3TableColumnToStorage(pTab, i) + regNewData + 1;",
          "1468:     }",
          "1469:     switch( onError ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1467:       testcase( i!=sqlite3TableColumnToStorage(pTab, i) );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1782:         VdbeComment((v, \"%s column %d\", pIdx->zName, i));",
          "1783: #endif",
          "1784:       }else{",
          "1785:         x = sqlite3TableColumnToStorage(pTab, iField) + regNewData + 1;",
          "1786:         sqlite3VdbeAddOp2(v, OP_SCopy, x, regIdx+i);",
          "1787:         VdbeComment((v, \"%s\", pTab->aCol[iField].zName));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1786:         testcase( sqlite3TableColumnToStorage(pTab, iField)!=iField );",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5379:             x = pPk->aiColumn[x];",
          "5380:             assert( x>=0 );",
          "5381:           }else{",
          "5382:             x = sqlite3StorageColumnToTable(pTab,x);",
          "5383:           }",
          "5384:           x = sqlite3TableColumnToIndex(pIdx, x);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5382:             testcase( x!=sqlite3StorageColumnToTable(pTab,x) );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8a3884efae47b8f762fdd7c3b0751ddca8e41243",
      "candidate_info": {
        "commit_hash": "8a3884efae47b8f762fdd7c3b0751ddca8e41243",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8a3884efae47b8f762fdd7c3b0751ddca8e41243",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/util.c",
          "src/vdbe.c",
          "src/vdbemem.c"
        ],
        "message": "Much faster implementation of applyNumericAffinity() by avoiding some unnecessary calls to sqlite3Atoi64().\n\nFossilOrigin-Name: c1d8a3f65490eef2216f360d708b1746cbaa6dadce42c0950dc8e09b9ab28ee2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/util.c||src/util.c",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f9e85e6c79162081f8f512d22951931a89d157a32b24afdc48b7eb865379abe7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4175: int sqlite3FixExpr(DbFixer*, Expr*);",
          "4176: int sqlite3FixExprList(DbFixer*, ExprList*);",
          "4177: int sqlite3FixTriggerStep(DbFixer*, TriggerStep*);",
          "4178: int sqlite3AtoF(const char *z, double*, int, u8);",
          "4179: int sqlite3GetInt32(const char *, int*);",
          "4180: int sqlite3Atoi(const char*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4178: int sqlite3RealSameAsInt(double,sqlite3_int64);",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "436:     incr = 2;",
          "437:     assert( SQLITE_UTF16LE==2 && SQLITE_UTF16BE==3 );",
          "438:     for(i=3-enc; i<length && z[i]==0; i+=2){}",
          "440:     zEnd = &z[i^1];",
          "441:     z += (enc&1);",
          "442:   }",
          "",
          "[Removed Lines]",
          "439:     nonNum = i<length;",
          "",
          "[Added Lines]",
          "444:     if( i<length ) eType = -100;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "469:   if( *z=='.' ){",
          "470:     z+=incr;",
          "473:     while( z<zEnd && sqlite3Isdigit(*z) ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "476:     eType++;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "485:   if( *z=='e' || *z=='E' ){",
          "486:     z+=incr;",
          "487:     eValid = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "494:     eType++;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "587: #else",
          "588:   return !sqlite3Atoi64(z, pResult, length, enc);",
          "",
          "[Removed Lines]",
          "586:   return z==zEnd && nDigit>0 && eValid && nonNum==0;",
          "",
          "[Added Lines]",
          "593:   return z==zEnd && nDigit>0 && eValid && eType>0 ? eType : 0;",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "276:   return pCx;",
          "277: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "285: static int alsoAnInt(Mem *pRec, double rValue, i64 *piValue){",
          "286:   i64 iValue = (double)rValue;",
          "287:   if( sqlite3RealSameAsInt(rValue,iValue) ){",
          "288:     testcase( iValue<-2251799813685248 );",
          "289:     testcase( iValue==-2251799813685248 );",
          "290:     testcase( iValue==-2251799813685247 );",
          "291:     testcase( iValue>-2251799813685247 && iValue<+2251799813685247 );",
          "292:     testcase( iValue==+2251799813685247 );",
          "293:     testcase( iValue==+2251799813685248 );",
          "294:     testcase( iValue>+2251799813685248 );",
          "295:     if( iValue > -2251799813685248 && iValue < 2251799813685248 ){",
          "297:       return 1;",
          "298:     }",
          "299:   }",
          "300:   return 0==sqlite3Atoi64(pRec->z, piValue, pRec->n, pRec->enc);",
          "301: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "294: static void applyNumericAffinity(Mem *pRec, int bTryForInt){",
          "295:   double rValue;",
          "297:   u8 enc = pRec->enc;",
          "298:   assert( (pRec->flags & (MEM_Str|MEM_Int|MEM_Real|MEM_IntReal))==MEM_Str );",
          "302:     pRec->flags |= MEM_Int;",
          "303:   }else{",
          "304:     pRec->u.r = rValue;",
          "",
          "[Removed Lines]",
          "296:   i64 iValue;",
          "299:   if( sqlite3AtoF(pRec->z, &rValue, pRec->n, enc)==0 ) return;",
          "300:   if( 0==sqlite3Atoi64(pRec->z, &iValue, pRec->n, enc) ){",
          "301:     pRec->u.i = iValue;",
          "",
          "[Added Lines]",
          "321:   int rc;",
          "323:   rc = sqlite3AtoF(pRec->z, &rValue, pRec->n, enc);",
          "324:   if( rc==0 ) return;",
          "325:   if( rc==1 && alsoAnInt(pRec, rValue, &pRec->u.i) ){",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "701:   double r2 = (double)i;",
          "702:   return memcmp(&r1, &r2, sizeof(r1))==0;",
          "703: }",
          "",
          "[Removed Lines]",
          "700: static int sqlite3RealSameAsInt(double r1, sqlite3_int64 i){",
          "",
          "[Added Lines]",
          "700: int sqlite3RealSameAsInt(double r1, sqlite3_int64 i){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8fc4a11c94a7ef822d69f6a171583a3a3327f72a",
      "candidate_info": {
        "commit_hash": "8fc4a11c94a7ef822d69f6a171583a3a3327f72a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8fc4a11c94a7ef822d69f6a171583a3a3327f72a",
        "files": [
          "ext/fts3/fts3_unicode2.c",
          "ext/fts3/unicode/mkunicode.tcl",
          "ext/fts5/fts5_unicode2.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix harmless compiler warnings in the unicode2 logic of FTS3 and FTS5.\n\nFossilOrigin-Name: 703029ac6d24860230a8c30fcbf5e7e1da619e84f1cc9b9e65ebc74879a184d2",
        "before_after_code_files": [
          "ext/fts3/fts3_unicode2.c||ext/fts3/fts3_unicode2.c",
          "ext/fts3/unicode/mkunicode.tcl||ext/fts3/unicode/mkunicode.tcl",
          "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_unicode2.c||ext/fts3/fts3_unicode2.c": [
          "File: ext/fts3/fts3_unicode2.c -> ext/fts3/fts3_unicode2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:     62830, 62890, 62924, 62974, 63032, 63050, 63082, 63118,",
          "179:     63182, 63242, 63274, 63310, 63368, 63390,",
          "180:   };",
          "183:     '\\0',      'a',       'c',       'e',       'i',       'n',",
          "184:     'o',       'u',       'y',       'y',       'a',       'c',",
          "185:     'd',       'e',       'e',       'g',       'h',       'i',",
          "",
          "[Removed Lines]",
          "181: #define HIBIT ((char)0x80)",
          "182:   char aChar[] = {",
          "",
          "[Added Lines]",
          "181: #define HIBIT ((unsigned char)0x80)",
          "182:   unsigned char aChar[] = {",
          "",
          "---------------"
        ],
        "ext/fts3/unicode/mkunicode.tcl||ext/fts3/unicode/mkunicode.tcl": [
          "File: ext/fts3/unicode/mkunicode.tcl -> ext/fts3/unicode/mkunicode.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:   }",
          "64:   puts \"\"",
          "65:   puts \"  \\};\"",
          "68:   puts -nonewline \"    '\\\\0',      \"",
          "69:   set i 1",
          "70:   foreach c $aChar f $aFlag {",
          "",
          "[Removed Lines]",
          "66:   puts \"#define HIBIT ((char)0x80)\"",
          "67:   puts \"  char aChar\\[\\] = \\{\"",
          "",
          "[Added Lines]",
          "66:   puts \"#define HIBIT ((unsigned char)0x80)\"",
          "67:   puts \"  unsigned char aChar\\[\\] = \\{\"",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
          "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     62830, 62890, 62924, 62974, 63032, 63050, 63082, 63118,",
          "48:     63182, 63242, 63274, 63310, 63368, 63390,",
          "49:   };",
          "52:     '\\0',      'a',       'c',       'e',       'i',       'n',",
          "53:     'o',       'u',       'y',       'y',       'a',       'c',",
          "54:     'd',       'e',       'e',       'g',       'h',       'i',",
          "",
          "[Removed Lines]",
          "50: #define HIBIT ((char)0x80)",
          "51:   char aChar[] = {",
          "",
          "[Added Lines]",
          "50: #define HIBIT ((unsigned char)0x80)",
          "51:   unsigned char aChar[] = {",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0465d2fc0d3f8beaa1b6b0bd7bd51d69a524f30d889c9402e7d02cc06164a310",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cde342df7063b09a47e960da640d03ca3e3a5e8f",
      "candidate_info": {
        "commit_hash": "cde342df7063b09a47e960da640d03ca3e3a5e8f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cde342df7063b09a47e960da640d03ca3e3a5e8f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/dbstat.c",
          "test/stat.test"
        ],
        "message": "Enhancements to DBSTAT:  (1) Make name=? queries efficient.  (2) Add the ability to aggregate results across each individual btree using the aggregate=TRUE constraint in the WHERE clause.\n\nFossilOrigin-Name: a48f6e17599d7ec794cfcd60858d6a69cf05caaae9321048b111fedd86a3b5b2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/dbstat.c||src/dbstat.c",
          "test/stat.test||test/stat.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4330f0795dbc2ab41dddd41d5979331fb9b78c477c66367c4be52f929531a45f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/dbstat.c||src/dbstat.c": [
          "File: src/dbstat.c -> src/dbstat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "75: typedef struct StatTable StatTable;",
          "76: typedef struct StatCursor StatCursor;",
          "77: typedef struct StatPage StatPage;",
          "78: typedef struct StatCell StatCell;",
          "80: struct StatCell {",
          "",
          "[Removed Lines]",
          "59: #define VTAB_SCHEMA                                                         \\",
          "60:   \"CREATE TABLE xx( \"                                                       \\",
          "61:   \"  name       TEXT,             /* Name of table or index */\"             \\",
          "62:   \"  path       TEXT,             /* Path to page from root */\"             \\",
          "63:   \"  pageno     INTEGER,          /* Page number */\"                        \\",
          "64:   \"  pagetype   TEXT,             /* 'internal', 'leaf' or 'overflow' */\"   \\",
          "65:   \"  ncell      INTEGER,          /* Cells on page (0 for overflow) */\"     \\",
          "66:   \"  payload    INTEGER,          /* Bytes of payload on this page */\"      \\",
          "67:   \"  unused     INTEGER,          /* Bytes of unused space on this page */\" \\",
          "68:   \"  mx_payload INTEGER,          /* Largest payload size of all cells */\"  \\",
          "69:   \"  pgoffset   INTEGER,          /* Offset of page in file */\"             \\",
          "70:   \"  pgsize     INTEGER,          /* Size of the page */\"                   \\",
          "71:   \"  schema     TEXT HIDDEN       /* Database schema being analyzed */\"     \\",
          "72:   \");\"",
          "",
          "[Added Lines]",
          "59: static const char zDbstatSchema[] =",
          "60:   \"CREATE TABLE x(\"",
          "73:   \")\"",
          "74: ;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87: };",
          "89: struct StatPage {",
          "",
          "[Removed Lines]",
          "90:   u32 iPgno;",
          "91:   DbPage *pPg;",
          "92:   int iCell;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "103: };",
          "105: struct StatCursor {",
          "125: };",
          "127: struct StatTable {",
          "131: };",
          "",
          "[Removed Lines]",
          "106:   sqlite3_vtab_cursor base;",
          "111:   StatPage aPage[32];",
          "128:   sqlite3_vtab base;",
          "129:   sqlite3 *db;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "159:   }else{",
          "160:     iDb = 0;",
          "161:   }",
          "163:   if( rc==SQLITE_OK ){",
          "164:     pTab = (StatTable *)sqlite3_malloc64(sizeof(StatTable));",
          "165:     if( pTab==0 ) rc = SQLITE_NOMEM_BKPT;",
          "",
          "[Removed Lines]",
          "162:   rc = sqlite3_declare_vtab(db, VTAB_SCHEMA);",
          "",
          "[Added Lines]",
          "170:   rc = sqlite3_declare_vtab(db, zDbstatSchema);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "185: }",
          "194: static int statBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){",
          "195:   int i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207:   int iSchema = -1;",
          "208:   int iName = -1;",
          "209:   int iAgg = -1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "202:   for(i=0; i<pIdxInfo->nConstraint; i++){",
          "205:     if( pIdxInfo->aConstraint[i].op!=SQLITE_INDEX_CONSTRAINT_EQ ) continue;",
          "211:   }",
          "",
          "[Removed Lines]",
          "203:     if( pIdxInfo->aConstraint[i].iColumn!=10 ) continue;",
          "204:     if( pIdxInfo->aConstraint[i].usable==0 ) return SQLITE_CONSTRAINT;",
          "206:     pIdxInfo->idxNum = 1;",
          "207:     pIdxInfo->estimatedCost = 1.0;",
          "208:     pIdxInfo->aConstraintUsage[i].argvIndex = 1;",
          "209:     pIdxInfo->aConstraintUsage[i].omit = 1;",
          "210:     break;",
          "",
          "[Added Lines]",
          "218:     if( pIdxInfo->aConstraint[i].usable==0 ){",
          "220:       return SQLITE_CONSTRAINT;",
          "221:     }",
          "222:     switch( pIdxInfo->aConstraint[i].iColumn ){",
          "224:         iName = i;",
          "225:         break;",
          "226:       }",
          "228:         iSchema = i;",
          "229:         break;",
          "230:       }",
          "232:         iAgg = i;",
          "233:         break;",
          "234:       }",
          "235:     }",
          "237:   i = 0;",
          "238:   if( iSchema>=0 ){",
          "239:     pIdxInfo->aConstraintUsage[iSchema].argvIndex = ++i;",
          "240:     pIdxInfo->aConstraintUsage[iSchema].omit = 1;",
          "241:     pIdxInfo->idxNum |= 0x01;",
          "242:   }",
          "243:   if( iName>=0 ){",
          "244:     pIdxInfo->aConstraintUsage[iName].argvIndex = ++i;",
          "245:     pIdxInfo->aConstraintUsage[iName].omit = 1;",
          "246:     pIdxInfo->idxNum |= 0x02;",
          "247:   }",
          "248:   if( iAgg>=0 ){",
          "249:     pIdxInfo->aConstraintUsage[iAgg].argvIndex = ++i;",
          "250:     pIdxInfo->aConstraintUsage[iAgg].omit = 1;",
          "251:     pIdxInfo->idxNum |= 0x04;",
          "252:   }",
          "253:   pIdxInfo->estimatedCost = 1.0;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "227:      )",
          "228:   ){",
          "229:     pIdxInfo->orderByConsumed = 1;",
          "230:   }",
          "232:   return SQLITE_OK;",
          "233: }",
          "238: static int statOpen(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor){",
          "239:   StatTable *pTab = (StatTable *)pVTab;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "271:     pIdxInfo->idxNum |= 0x08;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "283:   pCsr->isEof = 0;",
          "284: }",
          "289: static int statClose(sqlite3_vtab_cursor *pCursor){",
          "290:   StatCursor *pCsr = (StatCursor *)pCursor;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329: static void statResetCounts(StatCursor *pCsr){",
          "330:   pCsr->nCell = 0;",
          "331:   pCsr->nMxPayload = 0;",
          "332:   pCsr->nUnused = 0;",
          "333:   pCsr->nPayload = 0;",
          "334:   pCsr->szPage = 0;",
          "335:   pCsr->nPage = 0;",
          "336: }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "294:   return SQLITE_OK;",
          "295: }",
          "302: ){",
          "303:   int nLocal;",
          "304:   int nMinLocal;",
          "",
          "[Removed Lines]",
          "297: static void getLocalPayload(",
          "",
          "[Added Lines]",
          "354: static int getLocalPayload(",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "315:   nLocal = nMinLocal + (nTotal - nMinLocal) % (nUsable - 4);",
          "316:   if( nLocal>nMaxLocal ) nLocal = nMinLocal;",
          "318: }",
          "320: static int statDecodePage(Btree *pBt, StatPage *p){",
          "321:   int nUnused;",
          "322:   int iOff;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "373:   return nLocal;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "387:           iOff += sqlite3GetVarint(&aData[iOff], &dummy);",
          "388:         }",
          "389:         if( nPayload>(u32)p->nMxPayload ) p->nMxPayload = nPayload;",
          "391:         if( nLocal<0 ) goto statPageIsCorrupt;",
          "392:         pCell->nLocal = nLocal;",
          "393:         assert( nPayload>=(u32)nLocal );",
          "",
          "[Removed Lines]",
          "390:         getLocalPayload(nUsable, p->flags, nPayload, &nLocal);",
          "",
          "[Added Lines]",
          "449:         nLocal = getLocalPayload(nUsable, p->flags, nPayload);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "437:   sqlite3_file *fd;",
          "438:   sqlite3_int64 x[2];",
          "447:   fd = sqlite3PagerFile(pPager);",
          "448:   x[0] = pCsr->iPageno;",
          "449:   if( sqlite3OsFileControl(fd, 230440, &x)==SQLITE_OK ){",
          "450:     pCsr->iOffset = x[0];",
          "452:   }",
          "453: }",
          "458: static int statNext(sqlite3_vtab_cursor *pCursor){",
          "459:   int rc;",
          "",
          "[Removed Lines]",
          "441:   pCsr->szPage = sqlite3BtreeGetPageSize(pBt);",
          "442:   pCsr->iOffset = (i64)pCsr->szPage * (pCsr->iPageno - 1);",
          "451:     pCsr->szPage = (int)x[1];",
          "",
          "[Added Lines]",
          "506:     pCsr->szPage += x[1];",
          "507:   }else{",
          "509:     pCsr->szPage += sqlite3BtreeGetPageSize(pBt);",
          "510:     pCsr->iOffset = (i64)pCsr->szPage * (pCsr->iPageno - 1);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "470: statNextRestart:",
          "471:   if( pCsr->aPage[0].pPg==0 ){",
          "472:     rc = sqlite3_step(pCsr->pStmt);",
          "473:     if( rc==SQLITE_ROW ){",
          "474:       int nPage;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "534:     statResetCounts(pCsr);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "481:       rc = sqlite3PagerGet(pPager, iRoot, &pCsr->aPage[0].pPg, 0);",
          "482:       pCsr->aPage[0].iPgno = iRoot;",
          "483:       pCsr->aPage[0].iCell = 0;",
          "485:       pCsr->iPage = 0;",
          "487:     }else{",
          "488:       pCsr->isEof = 1;",
          "489:       return sqlite3_reset(pCsr->pStmt);",
          "490:     }",
          "491:   }else{",
          "494:     StatPage *p = &pCsr->aPage[pCsr->iPage];",
          "496:     while( p->iCell<p->nCell ){",
          "497:       StatCell *pCell = &p->aCell[p->iCell];",
          "500:         sqlite3BtreeEnter(pBt);",
          "501:         nUsable = sqlite3BtreeGetPageSize(pBt) -",
          "502:                         sqlite3BtreeGetReserveNoMutex(pBt);",
          "503:         sqlite3BtreeLeave(pBt);",
          "512:         if( pCell->iOvfl<pCell->nOvfl-1 ){",
          "515:         }else{",
          "518:         }",
          "519:         pCell->iOvfl++;",
          "522:       }",
          "523:       if( p->iRightChildPg ) break;",
          "524:       p->iCell++;",
          "",
          "[Removed Lines]",
          "484:       pCsr->aPage[0].zPath = z = sqlite3_mprintf(\"/\");",
          "486:       if( z==0 ) rc = SQLITE_NOMEM_BKPT;",
          "498:       if( pCell->iOvfl<pCell->nOvfl ){",
          "499:         int nUsable;",
          "504:         pCsr->zName = (char *)sqlite3_column_text(pCsr->pStmt, 0);",
          "505:         pCsr->iPageno = pCell->aOvfl[pCell->iOvfl];",
          "506:         pCsr->zPagetype = \"overflow\";",
          "507:         pCsr->nCell = 0;",
          "508:         pCsr->nMxPayload = 0;",
          "509:         pCsr->zPath = z = sqlite3_mprintf(",
          "510:             \"%s%.3x+%.6x\", p->zPath, p->iCell, pCell->iOvfl",
          "511:         );",
          "513:           pCsr->nUnused = 0;",
          "514:           pCsr->nPayload = nUsable - 4;",
          "516:           pCsr->nPayload = pCell->nLastOvfl;",
          "517:           pCsr->nUnused = nUsable - 4 - pCsr->nPayload;",
          "520:         statSizeAndOffset(pCsr);",
          "521:         return z==0 ? SQLITE_NOMEM_BKPT : SQLITE_OK;",
          "",
          "[Added Lines]",
          "547:       if( !pCsr->isAgg ){",
          "548:         pCsr->aPage[0].zPath = z = sqlite3_mprintf(\"/\");",
          "549:         if( z==0 ) rc = SQLITE_NOMEM_BKPT;",
          "550:       }",
          "552:       pCsr->nPage = 1;",
          "560:     if( !pCsr->isAgg ) statResetCounts(pCsr);",
          "563:       while( pCell->iOvfl<pCell->nOvfl ){",
          "564:         int nUsable, iOvfl;",
          "569:         pCsr->nPage++;",
          "570:         statSizeAndOffset(pCsr);",
          "572:           pCsr->nPayload += nUsable - 4;",
          "574:           pCsr->nPayload += pCell->nLastOvfl;",
          "575:           pCsr->nUnused += nUsable - 4 - pCell->nLastOvfl;",
          "577:         iOvfl = pCell->iOvfl;",
          "579:         if( !pCsr->isAgg ){",
          "580:           pCsr->zName = (char *)sqlite3_column_text(pCsr->pStmt, 0);",
          "581:           pCsr->iPageno = pCell->aOvfl[iOvfl];",
          "582:           pCsr->zPagetype = \"overflow\";",
          "583:           pCsr->zPath = z = sqlite3_mprintf(",
          "584:               \"%s%.3x+%.6x\", p->zPath, p->iCell, iOvfl",
          "585:           );",
          "586:           return z==0 ? SQLITE_NOMEM_BKPT : SQLITE_OK;",
          "587:         }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "527:     if( !p->iRightChildPg || p->iCell>p->nCell ){",
          "528:       statClearPage(p);",
          "532:     }",
          "533:     pCsr->iPage++;",
          "",
          "[Removed Lines]",
          "529:       if( pCsr->iPage==0 ) return statNext(pCursor);",
          "530:       pCsr->iPage--;",
          "",
          "[Added Lines]",
          "595:       if( pCsr->iPage>0 ){",
          "596:         pCsr->iPage--;",
          "597:       }else if( pCsr->isAgg ){",
          "600:         return SQLITE_OK;",
          "601:       }",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "543:       p[1].iPgno = p->aCell[p->iCell].iChildPg;",
          "544:     }",
          "545:     rc = sqlite3PagerGet(pPager, p[1].iPgno, &p[1].pPg, 0);",
          "546:     p[1].iCell = 0;",
          "548:     p->iCell++;",
          "550:   }",
          "",
          "[Removed Lines]",
          "547:     p[1].zPath = z = sqlite3_mprintf(\"%s%.3x/\", p->zPath, p->iCell);",
          "549:     if( z==0 ) rc = SQLITE_NOMEM_BKPT;",
          "",
          "[Added Lines]",
          "617:     pCsr->nPage++;",
          "619:     if( !pCsr->isAgg ){",
          "620:       p[1].zPath = z = sqlite3_mprintf(\"%s%.3x/\", p->zPath, p->iCell);",
          "621:       if( z==0 ) rc = SQLITE_NOMEM_BKPT;",
          "622:     }",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "576:           pCsr->zPagetype = \"corrupted\";",
          "577:           break;",
          "578:       }",
          "584:       nPayload = 0;",
          "585:       for(i=0; i<p->nCell; i++){",
          "586:         nPayload += p->aCell[i].nLocal;",
          "587:       }",
          "589:     }",
          "590:   }",
          "",
          "[Removed Lines]",
          "579:       pCsr->nCell = p->nCell;",
          "580:       pCsr->nUnused = p->nUnused;",
          "581:       pCsr->nMxPayload = p->nMxPayload;",
          "582:       pCsr->zPath = z = sqlite3_mprintf(\"%s\", p->zPath);",
          "583:       if( z==0 ) rc = SQLITE_NOMEM_BKPT;",
          "588:       pCsr->nPayload = nPayload;",
          "",
          "[Added Lines]",
          "653:       pCsr->nCell += p->nCell;",
          "654:       pCsr->nUnused += p->nUnused;",
          "655:       if( p->nMxPayload>pCsr->nMxPayload ) pCsr->nMxPayload = p->nMxPayload;",
          "656:       if( !pCsr->isAgg ){",
          "657:         pCsr->zPath = z = sqlite3_mprintf(\"%s\", p->zPath);",
          "658:         if( z==0 ) rc = SQLITE_NOMEM_BKPT;",
          "659:       }",
          "664:       pCsr->nPayload += nPayload;",
          "669:       if( pCsr->isAgg ) goto statNextRestart;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "604: ){",
          "605:   StatCursor *pCsr = (StatCursor *)pCursor;",
          "606:   StatTable *pTab = (StatTable*)(pCursor->pVtab);",
          "612:     pCsr->iDb = sqlite3FindDbName(pTab->db, zDbase);",
          "613:     if( pCsr->iDb<0 ){",
          "614:       sqlite3_free(pCursor->pVtab->zErrMsg);",
          "",
          "[Removed Lines]",
          "607:   char *zSql;",
          "608:   int rc = SQLITE_OK;",
          "610:   if( idxNum==1 ){",
          "611:     const char *zDbase = (const char*)sqlite3_value_text(argv[0]);",
          "",
          "[Added Lines]",
          "698:   statResetCsr(pCsr);",
          "699:   sqlite3_finalize(pCsr->pStmt);",
          "700:   pCsr->pStmt = 0;",
          "701:   if( idxNum & 0x01 ){",
          "703:     const char *zDbase = (const char*)sqlite3_value_text(argv[iArg++]);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "618:   }else{",
          "619:     pCsr->iDb = pTab->iDb;",
          "620:   }",
          "630:   if( zSql==0 ){",
          "631:     return SQLITE_NOMEM_BKPT;",
          "632:   }else{",
          "",
          "[Removed Lines]",
          "621:   statResetCsr(pCsr);",
          "622:   sqlite3_finalize(pCsr->pStmt);",
          "623:   pCsr->pStmt = 0;",
          "624:   zSql = sqlite3_mprintf(",
          "625:       \"SELECT 'sqlite_master' AS name, 1 AS rootpage, 'table' AS type\"",
          "626:       \"  UNION ALL  \"",
          "627:       \"SELECT name, rootpage, type\"",
          "628:       \"  FROM \\\"%w\\\".sqlite_master WHERE rootpage!=0\"",
          "629:       \"  ORDER BY name\", pTab->db->aDb[pCsr->iDb].zDbSName);",
          "",
          "[Added Lines]",
          "713:   if( idxNum & 0x02 ){",
          "715:     zName = (const char*)sqlite3_value_text(argv[iArg++]);",
          "716:   }",
          "717:   if( idxNum & 0x04 ){",
          "719:     pCsr->isAgg = sqlite3_value_double(argv[iArg++])!=0.0;",
          "720:   }else{",
          "721:     pCsr->isAgg = 0;",
          "722:   }",
          "723:   pSql = sqlite3_str_new(pTab->db);",
          "724:   sqlite3_str_appendf(pSql,",
          "725:       \"SELECT * FROM (\"",
          "726:         \"SELECT 'sqlite_master' AS name,1 AS rootpage,'table' AS type\"",
          "727:         \" UNION ALL \"",
          "728:         \"SELECT name,rootpage,type\"",
          "729:         \" FROM \\\"%w\\\".sqlite_master WHERE rootpage!=0)\",",
          "730:       pTab->db->aDb[pCsr->iDb].zDbSName);",
          "731:   if( zName ){",
          "732:     sqlite3_str_appendf(pSql, \"WHERE name=%Q\", zName);",
          "733:   }",
          "734:   if( idxNum & 0x08 ){",
          "735:     sqlite3_str_appendf(pSql, \" ORDER BY name\");",
          "736:   }",
          "737:   zSql = sqlite3_str_finish(pSql);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "651:       sqlite3_result_text(ctx, pCsr->zName, -1, SQLITE_TRANSIENT);",
          "652:       break;",
          "655:       break;",
          "658:       break;",
          "661:       break;",
          "663:       sqlite3_result_int(ctx, pCsr->nCell);",
          "",
          "[Removed Lines]",
          "654:       sqlite3_result_text(ctx, pCsr->zPath, -1, SQLITE_TRANSIENT);",
          "657:       sqlite3_result_int64(ctx, pCsr->iPageno);",
          "660:       sqlite3_result_text(ctx, pCsr->zPagetype, -1, SQLITE_STATIC);",
          "",
          "[Added Lines]",
          "762:       if( !pCsr->isAgg ){",
          "763:         sqlite3_result_text(ctx, pCsr->zPath, -1, SQLITE_TRANSIENT);",
          "764:       }",
          "767:       if( pCsr->isAgg ){",
          "768:         sqlite3_result_int64(ctx, pCsr->nPage);",
          "769:       }else{",
          "770:         sqlite3_result_int64(ctx, pCsr->iPageno);",
          "771:       }",
          "774:       if( !pCsr->isAgg ){",
          "775:         sqlite3_result_text(ctx, pCsr->zPagetype, -1, SQLITE_STATIC);",
          "776:       }",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "672:       sqlite3_result_int(ctx, pCsr->nMxPayload);",
          "673:       break;",
          "676:       break;",
          "678:       sqlite3_result_int(ctx, pCsr->szPage);",
          "679:       break;",
          "681:       sqlite3 *db = sqlite3_context_db_handle(ctx);",
          "682:       int iDb = pCsr->iDb;",
          "683:       sqlite3_result_text(ctx, db->aDb[iDb].zDbSName, -1, SQLITE_STATIC);",
          "684:       break;",
          "685:     }",
          "686:   }",
          "687:   return SQLITE_OK;",
          "688: }",
          "",
          "[Removed Lines]",
          "675:       sqlite3_result_int64(ctx, pCsr->iOffset);",
          "",
          "[Added Lines]",
          "791:       if( !pCsr->isAgg ){",
          "792:         sqlite3_result_int64(ctx, pCsr->iOffset);",
          "793:       }",
          "805:       sqlite3_result_int(ctx, pCsr->isAgg);",
          "806:       break;",
          "807:     }",
          "",
          "---------------"
        ],
        "test/stat.test||test/stat.test": [
          "File: test/stat.test -> test/stat.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:   INSERT INTO t3 SELECT a_string(110+rowid), a_string(221+rowid) FROM t3",
          "109:    ORDER BY rowid;",
          "110:   SELECT name, path, pageno, pagetype, ncell, payload, unused, mx_payload",
          "112: } [list \\",
          "113:   sqlite_autoindex_t3_1 / 3 internal 3 368 623 125       \\",
          "114:   sqlite_autoindex_t3_1 /000/ 8 leaf 8 946 46 123        \\",
          "",
          "[Removed Lines]",
          "111:     FROM stat WHERE name != 'sqlite_master';",
          "",
          "[Added Lines]",
          "111:     FROM stat WHERE name != 'sqlite_master' ORDER BY name;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134:   t3 /00f/ 23 leaf 2 738 268 370                         \\",
          "135: ]",
          "137: # With every index entry overflowing, make sure no pages are missed",
          "138: # (other than the locking page which is 64 in this test build.)",
          "139: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137: do_execsql_test stat-2.1agg {",
          "138:   SELECT * FROM dbstat WHERE aggregate=TRUE ORDER BY name;",
          "139: } [list \\",
          "140:   sqlite_autoindex_t3_1 {}  5 {} 32  3898 1065 132 {}  5120 \\",
          "141:   sqlite_master         {}  1 {}  2    84  824  49 {}  1024 \\",
          "142:   t3                    {} 17 {} 47 11188 5815 370 {} 17408 \\",
          "143: ]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "150:   CREATE INDEX i4 ON t4(x);",
          "151:   INSERT INTO t4(rowid, x) VALUES(2, a_string(7777));",
          "152:   SELECT name, path, pageno, pagetype, ncell, payload, unused, mx_payload",
          "154: } [list \\",
          "155:   i4 / 3 leaf 1 103 905 7782                 \\",
          "156:   i4 /000+000000 4 overflow 0 1020 0 0       \\",
          "",
          "[Removed Lines]",
          "153:     FROM stat WHERE name != 'sqlite_master';",
          "",
          "[Added Lines]",
          "161:     FROM stat WHERE name != 'sqlite_master' ORDER BY name;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "171:   t4 /000+000006 18 overflow 0 1020 0 0      \\",
          "172: ]",
          "174: do_execsql_test stat-4.1 {",
          "175:   CREATE TABLE t5(x);",
          "176:   CREATE INDEX i5 ON t5(x);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "182: do_execsql_test stat-3.2 {",
          "183:   SELECT *, '|' FROM dbstat WHERE aggregate=TRUE ORDER BY name;",
          "184: } [list \\",
          "185:   i4            {} 9 {} 1 7782 1386 7782 {} 9216 | \\",
          "186:   sqlite_master {} 1 {} 2   74  834   40 {} 1024 | \\",
          "187:   t4            {} 8 {} 1 7780  367 7780 {} 8192 | \\",
          "188: ]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "201:   t1 /001+000000 4 overflow 0 1020 0 0    \\",
          "202: ]",
          "204: do_catchsql_test stat-6.1 {",
          "205:   CREATE VIRTUAL TABLE temp.s2 USING dbstat(mainx);",
          "206: } {1 {no such database: mainx}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221: do_execsql_test stat-5.20 {",
          "222:   SELECT name, quote(path), pageno, quote(pagetype), ncell, payload,",
          "223:          unused, mx_payload, '|' FROM dbstat('main',1);",
          "224: } {sqlite_master NULL 1 NULL 1 34 878 34 | tx NULL 1 NULL 0 0 1016 0 |}",
          "225: do_execsql_test stat-5.21 {",
          "226:   SELECT name, quote(path), pageno, quote(pagetype), ncell, payload,",
          "227:          unused, mx_payload, '|' FROM dbstat('aux1',1);",
          "228: } {sqlite_master NULL 1 NULL 1 34 878 34 | t1 NULL 3 NULL 2 3033 5 1517 |}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2fa619a3a86d554551f4fc6b868dcf0402e59dd5",
      "candidate_info": {
        "commit_hash": "2fa619a3a86d554551f4fc6b868dcf0402e59dd5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2fa619a3a86d554551f4fc6b868dcf0402e59dd5",
        "files": [
          "ext/fts3/fts3_write.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid",
          "test/fts3corrupt4.test"
        ],
        "message": "Change a few assert() statements in fts3 that might fail if the database is corrupt.\n\nFossilOrigin-Name: db74a56af73d92b7a9d43ceda7e4540915c580c68a0266b4ddefb9e0d5cbcbeb",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid",
          "test/fts3corrupt4.test||test/fts3corrupt4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3235:   if( rc!=SQLITE_OK ) goto finished;",
          "3237:   assert( csr.nSegment>0 );",
          "3241:   memset(&filter, 0, sizeof(Fts3SegFilter));",
          "3242:   filter.flags = FTS3_SEGMENT_REQUIRE_POS;",
          "",
          "[Removed Lines]",
          "3238:   assert( iNewLevel>=getAbsoluteLevel(p, iLangid, iIndex, 0) );",
          "3239:   assert( iNewLevel<getAbsoluteLevel(p, iLangid, iIndex,FTS3_SEGDIR_MAXLEVEL) );",
          "",
          "[Added Lines]",
          "3238:   assert_fts3_nc( iNewLevel>=getAbsoluteLevel(p, iLangid, iIndex, 0) );",
          "3239:   assert_fts3_nc(",
          "3240:     iNewLevel<getAbsoluteLevel(p, iLangid, iIndex,FTS3_SEGDIR_MAXLEVEL)",
          "3241:   );",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1969372ac72d25cc642a0268f4bb0ae4b59f2dca568c119ef61b67183b3a8bd9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "3052:   SELECT rowid,a,c,snippet(t1,85101090932165,-1,10) FROM t1 WHERE a MATCH 'rtree';",
          "3053: } {1 {database disk image is malformed}}",
          "3055: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3055: #-------------------------------------------------------------------------",
          "3056: reset_db",
          "3057: do_test 20.0 {",
          "3058:   sqlite3 db {}",
          "3059:   db deserialize [decode_hexdb {",
          "3060: .open --hexdb",
          "3061: | size 28672 pagesize 4096 filename crash-afecd03c862e58.db",
          "3062: | page 1 offset 0",
          "3063: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "3064: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 07   .....@  ........",
          "3065: |     32: 00 00 00 00 00 00 00 00 00 00 00 06 00 00 00 04   ................",
          "3066: |     96: 00 00 00 00 0d 0e ef 00 07 0d 4d 00 0f bd 0f 5f   ..........M...._",
          "3067: |    112: 0e f7 0e 06 0e bc 0d a4 0d 4d 00 00 01 00 00 00   .........M......",
          "3068: |   3392: 00 00 00 00 00 00 00 00 00 00 00 00 00 55 07 07   .............U..",
          "3069: |   3408: 17 1b 1b 01 81 01 74 61 62 6c 65 74 31 5f 73 74   ......tablet1_st",
          "3070: |   3424: 61 74 74 31 5f 73 74 61 74 07 43 52 45 41 54 45   att1_stat.CREATE",
          "3071: |   3440: 20 54 41 42 4c 45 20 27 74 31 5f 73 74 61 74 27    TABLE 't1_stat'",
          "3072: |   3456: 28 69 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d   (id INTEGER PRIM",
          "3073: |   3472: 41 52 59 20 4b 45 59 2c 20 76 61 6c 75 65 20 42   ARY KEY, value B",
          "3074: |   3488: 4c 4f 42 29 60 06 07 17 21 21 01 81 0b 74 61 62   LOB)`...!!...tab",
          "3075: |   3504: 6c 65 74 31 5f 64 6f 63 73 69 7a 65 74 31 5f 64   let1_docsizet1_d",
          "3076: |   3520: 6f 63 73 69 7a 65 06 43 52 45 41 54 45 20 54 41   ocsize.CREATE TA",
          "3077: |   3536: 42 4c 45 20 27 74 31 5f 64 6f 63 73 69 7a 65 27   BLE 't1_docsize'",
          "3078: |   3552: 28 64 6f 63 69 64 20 49 4e 54 45 47 45 52 20 50   (docid INTEGER P",
          "3079: |   3568: 52 49 4d 41 52 59 30 4b 45 59 2c 20 73 69 7a 65   RIMARY0KEY, size",
          "3080: |   3584: 20 42 4c 4f 42 29 81 33 04 07 17 1f 1f 01 82 35    BLOB).3.......5",
          "3081: |   3600: 74 61 62 6c 65 74 31 5f 73 65 67 64 69 72 74 31   tablet1_segdirt1",
          "3082: |   3616: 5f 73 65 67 64 69 25 04 43 52 45 41 54 45 20 54   _segdi%.CREATE T",
          "3083: |   3632: 41 42 4c 45 20 27 74 31 5f 73 65 67 64 69 72 27   ABLE 't1_segdir'",
          "3084: |   3648: 28 6c 65 76 65 6c 20 49 4e 54 45 47 45 52 2c 69   (level INTEGER,i",
          "3085: |   3664: 64 78 20 49 4e 54 45 47 45 52 2c 73 74 61 72 74   dx INTEGER,start",
          "3086: |   3680: 5f 62 6c 6f 63 6b 20 49 4e 54 45 47 45 52 2c 6c   _block INTEGER,l",
          "3087: |   3696: 65 61 76 65 73 5f 65 6e 64 5f 62 6c 6f 63 6b 20   eaves_end_block",
          "3088: |   3712: 49 4d 54 45 47 45 52 2c 65 6e 64 5f 62 6c 6f 63   IMTEGER,end_bloc",
          "3089: |   3728: 6b 20 49 4e 54 45 47 45 52 2c 72 6f 6f 74 20 42   k INTEGER,root B",
          "3090: |   3744: 4c 4f 42 2c 50 52 49 4d 41 52 59 20 4b 45 59 28   LOB,PRIMARY KEY(",
          "3091: |   3760: 6c 65 76 65 6c 2c 20 69 64 78 29 29 31 05 06 17   level, idx))1...",
          "3092: |   3776: 45 1f 01 00 69 6e 64 65 78 73 71 6c 69 74 65 5f   E...indexsqlite_",
          "3093: |   3792: 61 75 74 6f 69 6e 64 65 78 5f 74 31 5f 73 65 67   autoindex_t1_seg",
          "3094: |   3808: 64 69 72 5f 31 74 31 5f 73 65 67 64 69 72 05 00   dir_1t1_segdir..",
          "3095: |   3824: 00 00 08 00 00 00 00 66 03 07 17 23 23 01 81 13   .......f...##...",
          "3096: |   3840: 74 61 62 6c 65 74 31 5f 73 65 67 6d 65 6e 74 73   tablet1_segments",
          "3097: |   3856: 74 31 5f 73 65 67 6d 65 6e 74 73 03 43 52 45 41   t1_segments.CREA",
          "3098: |   3872: 54 45 20 54 41 42 4c 45 20 27 74 31 5f 73 65 67   TE TABLE 't1_seg",
          "3099: |   3888: 6d 65 6e 74 73 27 28 62 6c 6f 63 6b 69 64 20 49   ments'(blockid I",
          "3100: |   3904: 4e 54 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b   NTEGER PRIMARY K",
          "3101: |   3920: 45 59 2c 20 62 6c 6f 63 6b 20 42 4c 4f 42 29 5c   EY, block BLOB).",
          "3102: |   3936: 02 07 17 21 21 01 81 03 74 61 62 6c 65 74 31 5f   ...!!...tablet1_",
          "3103: |   3952: 63 6f 6e 74 65 6e 74 74 31 5f 63 6f 6e 74 65 6e   contentt1_conten",
          "3104: |   3968: 74 02 43 52 45 41 54 45 20 54 41 42 4c 45 20 27   t.CREATE TABLE '",
          "3105: |   3984: 74 31 5f 63 6f 6e 74 65 6e 74 27 28 64 6f 63 69   t1_content'(doci",
          "3106: |   4000: 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d 41 52   d INTEGER PRIMAR",
          "3107: |   4016: 59 20 4b 45 59 2c 20 27 63 30 61 27 29 41 01 06   Y KEY, 'c0a')A..",
          "3108: |   4032: 17 11 11 08 71 74 61 62 6c 65 74 31 74 31 43 52   ....qtablet1t1CR",
          "3109: |   4048: 45 41 54 45 20 56 49 52 54 55 41 4c 20 54 41 42   EATE VIRTUAL TAB",
          "3110: |   4064: 4c 45 20 74 31 20 55 53 49 4e 47 20 66 74 73 34   LE t1 USING fts4",
          "3111: |   4080: 28 61 2c 70 72 65 66 69 78 3d 27 31 2c 32 27 29   (a,prefix='1,2')",
          "3112: | page 2 offset 4096",
          "3113: |      0: 0d 00 00 00 08 0e 1f 00 0f c4 0f 7c 0f 34 0f 07   ...........|.4..",
          "3114: |     16: 0e c3 0e 97 0e 63 0e 1f 00 00 00 00 00 00 00 00   .....c..........",
          "3115: |   3600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 42   ...............B",
          "3116: |   3616: 08 04 00 81 09 73 75 6e 74 20 69 6e 20 63 75 6c   .....sunt in cul",
          "3117: |   3632: 70 61 20 71 75 68 20 6f 66 66 69 63 69 61 20 64   pa quh officia d",
          "3118: |   3648: 65 73 65 72 75 6e 74 20 6d 6f 6c 6c 69 74 20 61   eserunt mollit a",
          "3119: |   3664: 6e 69 6d 20 69 64 20 65 73 74 20 6c 61 62 6f 72   nim id est labor",
          "3120: |   3680: 75 6d 2e 32 07 03 01 6b 45 78 63 65 70 74 65 75   um.2...kExcepteu",
          "3121: |   3696: 72 20 73 69 6e 74 20 6f 63 63 61 65 63 61 74 20   r sint occaecat",
          "3122: |   3712: 63 75 70 69 64 61 74 61 74 20 6e 6f 6e 20 70 72   cupidatat non pr",
          "3123: |   3728: 6f 69 64 65 6e 74 2c 2a 06 03 00 5b 63 69 6c 6c   oident,*...[cill",
          "3124: |   3744: 75 6d 20 64 6f 6c 6f 72 65 20 65 75 20 66 75 67   um dolore eu fug",
          "3125: |   3760: 69 61 74 20 6e 75 6c 6c 61 20 70 61 72 69 61 74   iat nulla pariat",
          "3126: |   3776: 75 72 2e 43 05 04 00 81 09 44 75 69 73 20 61 75   ur.C.....Duis au",
          "3127: |   3792: 74 65 20 69 72 75 72 65 20 64 6f 6c 6f 72 20 69   te irure dolor i",
          "3128: |   3808: 6e 20 72 65 70 72 65 68 65 6e 64 65 72 69 74 20   n reprehenderit",
          "3129: |   3824: 69 6e 20 76 6f 6c 75 70 74 61 74 65 20 76 65 6c   in voluptate vel",
          "3130: |   3840: 69 74 20 65 73 73 65 2b 14 03 00 5d 6e 69 73 69   it esse+...]nisi",
          "3131: |   3856: 20 75 74 20 61 6c 69 71 75 69 70 20 65 78 20 65    ut aliquip ex e",
          "3132: |   3872: 61 20 63 6f 6d 6d 6f 64 6f 20 63 6f 6e 73 65 71   a commodo conseq",
          "3133: |   3888: 75 61 74 2e 46 03 04 00 81 11 55 74 20 65 6e 69   uat.F.....Ut eni",
          "3134: |   3904: 6d 20 61 63 20 6d 69 6e 69 6d 20 76 65 6e 69 61   m ac minim venia",
          "3135: |   3920: 6d 2c 20 71 75 69 73 20 6e 6f 73 74 72 75 64 20   m, quis nostrud",
          "3136: |   3936: 65 78 65 72 63 69 74 61 74 69 6f 6e 20 75 6c 6c   exercitation ull",
          "3137: |   3952: 61 6d 63 6f 20 6c 61 62 6f 72 69 73 46 02 04 00   amco laborisF...",
          "3138: |   3968: 81 11 73 65 64 20 64 6f 20 65 69 75 73 6d 6f 64   ..sed do eiusmod",
          "3139: |   3984: 20 74 65 6d 70 6f 72 20 69 6e 63 69 64 69 64 75    tempor incididu",
          "3140: |   4000: 6e 74 20 75 74 20 6c 61 62 6f 72 65 20 65 74 20   nt ut labore et",
          "3141: |   4016: 64 6f 6c 6f 72 65 20 6d 61 67 6e 61 20 61 6c 69   dolore magna ali",
          "3142: |   4032: 71 75 61 2e 3a 01 03 00 7b 4c 6f 72 65 6d 20 69   qua.:....Lorem i",
          "3143: |   4048: 70 73 75 6d 20 64 6f 6c 6f 72 20 73 69 74 20 61   psum dolor sit a",
          "3144: |   4064: 6d 65 74 2c 20 63 6f 6e 73 65 63 74 65 74 75 72   met, consectetur",
          "3145: |   4080: 20 61 64 69 70 69 73 63 69 6e 67 20 65 6c 69 74    adipiscing elit",
          "3146: | page 3 offset 8192",
          "3147: |      0: 0d 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00   ................",
          "3148: | page 4 offset 12288",
          "3149: |      0: 0d 00 00 00 03 0a a6 00 0d 57 0c 4a 0a a6 00 00   .........W.J....",
          "3150: |   2720: 00 00 00 00 00 00 83 21 03 08 02 08 08 08 17 86   .......!........",
          "3151: |   2736: 30 08 00 30 20 34 30 32 00 02 61 64 06 01 08 00   0..0 402..ad....",
          "3152: |   2752: 02 04 00 01 01 6c 06 02 0c 00 02 04 00 01 01 6d   .....l.........m",
          "3153: |   2768: 03 01 06 00 01 01 6e 03 08 09 00 01 01 75 03 05   ......n......u..",
          "3154: |   2784: 03 00 00 02 63 69 03 06 01 00 01 01 6f 07 01 07   ....ci......o...",
          "3155: |   2800: 00 03 07 03 00 01 01 75 06 07 05 00 01 04 00 00   .......u........",
          "3156: |   2816: 02 64 65 03 08 07 00 01 01 6f 0d 01 04 00 01 03   .de......o......",
          "3157: |   2832: 09 00 03 05 00 01 03 00 01 01 75 03 05 02 00 00   ..........u.....",
          "3158: |   2848: 02 65 61 03 04 06 00 01 01 69 03 02 04 00 01 01   .ea......i......",
          "3159: |   2864: 6c 03 01 09 00 01 01 6e 03 03 03 00 01 01 73 06   l......n......s.",
          "3160: |   2880: 05 0b 00 03 0b 00 01 01 74 03 02 09 00 01 01 75   ........t......u",
          "3161: |   2896: 03 06 04 00 01 01 78 09 03 09 00 01 05 00 03 02   ......x.........",
          "3162: |   2912: 00 00 02 66 75 03 06 05 00 00 02 69 64 03 08 0a   ...fu......id...",
          "3163: |   2928: 00 01 01 6e 0a 02 06 00 03 06 04 00 03 03 00 01   ...n............",
          "3164: |   2944: 01 70 03 01 13 00 01 01 72 03 05 04 00 00 02 6c   .p......r......l",
          "3165: |   2960: 61 09 02 08 00 01 0b 00 05 0c 00 01 01 6f 03 01   a............o..",
          "3166: |   2976: 02 00 00 02 6d 61 03 02 0b 00 01 01 69 03 03 05   ....ma......i...",
          "3167: |   2992: 00 01 01 6f 03 08 08 00 00 02 6e 69 03 04 02 00   ...o......ni....",
          "3168: |   3008: 01 01 6f 06 03 08 00 04 06 00 01 01 75 03 06 06   ..o.........u...",
          "3169: |   3024: 00 00 02 6f 63 03 07 04 00 01 01 66 03 08 06 00   ...oc......f....",
          "3170: |   3040: 00 02 70 61 03 06 07 00 01 01 72 03 07 07 00 00   ..pa......r.....",
          "3171: |   3056: 02 71 75 06 03 07 00 05 05 00 00 02 72 65 03 05   .qu.........re..",
          "3172: |   3072: 07 00 00 02 73 65 03 02 02 00 01 01 69 06 01 05   ....se......i...",
          "3173: |   3088: 00 06 03 00 01 01 75 03 08 02 00 00 02 74 65 03   ......u......te.",
          "3174: |   3104: 03 05 00 00 02 72 bc 03 03 0a 00 01 01 74 09 02   .....r.......t..",
          "3175: |   3120: 07 00 01 02 00 01 03 00 00 02 76 65 06 03 06 00   ..........ve....",
          "3176: |   3136: 02 0a 00 01 01 6f 03 05 09 00 82 0a 02 08 02 08   .....o..........",
          "3177: |   3152: 08 08 17 84 02 04 00 30 20 32 35 31 00 01 61 13   .......0 251..a.",
          "3178: |   3168: 01 06 04 00 01 0c 00 01 04 00 01 04 00 01 03 00   ................",
          "3179: |   3184: 03 09 00 00 01 63 10 01 07 00 03 07 03 00 02 02   .....c..........",
          "3180: |   3200: 00 01 05 00 01 04 00 00 01 64 11 01 04 00 01 03   .........d......",
          "3181: |   3216: 09 00 03 02 05 00 01 03 00 02 07 00 00 01 65 1b   ..............e.",
          "3182: |   3232: 01 09 00 01 04 07 00 01 03 08 00 01 05 03 00 01   ................",
          "3183: |   3248: 0b 00 01 04 00 01 02 00 01 0b 00 00 01 66 03 06   .............f..",
          "3184: |   3264: 05 00 00 01 69 0f 01 03 00 01 06 00 02 04 04 04   ....i...........",
          "3185: |   3280: 00 03 03 09 00 00 01 6c 0c 01 02 00 01 08 00 01   .......l........",
          "3186: |   3296: 0b 00 05 0c 00 00 01 6d 09 02 0b 00 01 05 00 05   .......m........",
          "3187: |   3312: 08 00 00 01 6e 0c 03 08 00 01 02 00 02 06 00 01   ....n...........",
          "3188: |   3328: 06 00 f0 01 6f 06 07 04 00 01 06 00 00 01 70 06   ....o.........p.",
          "3189: |   3344: 06 07 00 01 07 00 00 01 71 06 03 07 00 05 05 00   ........q.......",
          "3190: |   3360: 00 01 72 03 05 08 00 00 01 73 0c 01 05 00 01 02   ..r......s......",
          "3191: |   3376: 00 05 03 00 01 02 00 00 01 74 03 02 05 00 00 01   .........t......",
          "3192: |   3392: 75 0a 02 07 00 01 02 0a 00 01 03 00 00 01 76 07   u.............v.",
          "3193: |   3408: 03 06 00 02 09 03 00 85 26 01 08 08 08 08 08 17   ........&.......",
          "3194: |   3424: 8a 3e 30 21 36 36 35 00 02 61 64 03 03 04 00 02   .>0!665..ad.....",
          "3195: |   3440: 08 69 70 69 73 63 69 6e 67 03 01 08 00 01 05 6c   .ipiscing......l",
          "3196: |   3456: 69 71 75 61 03 02 0c 00 05 02 69 70 03 04 04 00   iqua......ip....",
          "3197: |   3472: 01 03 6d 65 74 03 01 06 00 01 03 6e 69 6d 03 08   ..met......nim..",
          "3198: |   3488: 09 00 01 03 75 74 65 03 05 03 00 00 06 63 69 6c   ....ute......cil",
          "3199: |   3504: 6c 75 6d 03 06 02 00 01 06 6f 6d 6d 6f 64 6f 03   lum......ommodo.",
          "3200: |   3520: 04 07 00 02 09 6e 73 65 63 74 65 74 75 72 03 01   .....nsectetur..",
          "3201: |   3536: 07 00 05 04 71 75 61 74 03 04 08 00 01 04 75 6c   ....quat......ul",
          "3202: |   3552: 70 61 03 08 04 00 02 07 70 69 64 61 74 61 74 03   pa......pidatat.",
          "3203: |   3568: 07 05 00 00 08 64 65 73 65 72 75 6e 74 03 08 07   .....deserunt...",
          "3204: |   3584: 00 01 01 6f 03 02 03 00 02 03 6c 6f 72 06 01 04   ...o......lor...",
          "3205: |   3600: 00 04 05 00 05 01 65 06 02 0a 00 04 03 00 01 03   ......e.........",
          "3206: |   3616: 75 69 73 03 05 02 00 00 02 65 61 03 04 06 00 01   uis......ea.....",
          "3207: |   3632: 06 69 75 73 6d 6f 64 03 02 04 00 01 03 6c 69 74   .iusmod......lit",
          "3208: |   3648: 03 01 09 00 01 03 6e 69 6d 03 03 03 00 01 03 73   ......nim......s",
          "3209: |   3664: 73 65 03 05 0b 00 02 01 74 03 08 0b 00 01 01 74   se......t......t",
          "3210: |   3680: 03 02 09 00 01 01 75 03 06 04 00 01 01 78 03 04   ......u......x..",
          "3211: |   3696: 05 00 02 07 63 65 70 74 65 75 72 03 07 02 00 02   ....cepteur.....",
          "3212: |   3712: 0a 65 72 63 69 74 61 74 69 6f 6e 03 03 09 00 00   .ercitation.....",
          "3213: |   3728: 06 66 75 67 69 61 74 03 06 05 00 00 02 69 64 03   .fugiat......id.",
          "3214: |   3744: 08 0a 00 01 01 6e 07 05 06 04 00 03 03 00 02 08   .....n..........",
          "3215: |   3760: 63 69 64 69 64 75 6e 74 03 02 06 00 01 04 70 73   cididunt......ps",
          "3216: |   3776: 75 6d 03 01 03 00 01 04 72 75 72 65 03 05 04 00   um......rure....",
          "3217: |   3792: 00 06 6c 61 62 6f 72 65 03 02 08 00 05 02 69 73   ..labore......is",
          "3218: |   3808: 03 03 0b 00 05 02 75 6d 03 08 0c 00 01 04 6f 72   ......um......or",
          "3219: |   3824: 65 6d 03 01 02 00 00 05 6d 61 67 6e 61 03 02 0b   em......magna...",
          "3220: |   3840: 00 01 04 69 6e 69 6d 03 03 05 00 01 05 6f 6c 6c   ...inim......oll",
          "3221: |   3856: 69 74 03 08 08 00 00 04 6e 69 73 69 03 04 02 00   it......nisi....",
          "3222: |   3872: 01 02 6f 6e 03 07 06 00 02 05 73 74 72 75 64 03   ..on......strud.",
          "3223: |   3888: 03 08 00 01 04 75 6c 6c 61 03 06 06 00 00 08 6f   .....ulla......o",
          "3224: |   3904: 63 63 61 65 63 61 74 03 07 04 00 01 06 66 66 69   ccaecat......ffi",
          "3225: |   3920: 63 69 61 03 08 06 00 00 08 70 61 72 69 61 74 75   cia......pariatu",
          "3226: |   3936: 72 03 06 07 00 01 07 72 6f 69 64 65 6e 74 03 07   r......roident..",
          "3227: |   3952: 07 00 00 03 71 75 69 03 08 05 00 03 01 73 03 03   ....qui......s..",
          "3228: |   3968: 07 00 00 0d 72 65 41 72 65 68 65 6e 64 65 72 69   ....reArehenderi",
          "3229: |   3984: 74 03 05 07 00 00 03 73 65 64 03 02 02 00 01 03   t......sed......",
          "3230: |   4000: 69 6e 74 03 07 03 00 02 01 74 03 01 05 00 01 03   int......t......",
          "3231: |   4016: 75 6e 74 03 08 02 00 00 06 74 65 6d 70 6f 72 03   unt......tempor.",
          "3232: |   4032: 02 05 00 00 07 75 6c 6c 61 6d 63 6f 03 03 0a 00   .....ullamco....",
          "3233: |   4048: 01 01 74 09 02 07 00 01 02 00 01 03 00 00 05 76   ..t............v",
          "3234: |   4064: 65 6c 69 74 03 05 0a 00 02 04 6e 69 61 6d 03 03   elit......niam..",
          "3235: |   4080: 06 00 01 08 70 6c 75 70 74 61 74 65 03 05 09 00   ....pluptate....",
          "3236: | page 5 offset 16384",
          "3237: |      0: 0a 00 00 00 03 0f eb 00 0f fb 0f f3 0f eb 00 00   ................",
          "3238: |   4064: 00 00 00 00 00 00 00 00 00 00 00 07 04 02 08 01   ................",
          "3239: |   4080: 08 00 03 07 04 0a 98 01 04 00 02 04 04 08 08 09   ................",
          "3240: | page 6 offset 20480",
          "3241: |      0: 0d 00 00 00 08 0f d0 00 0f fa 0f f4 0f ee 0f e8   ................",
          "3242: |     16: 0f e2 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................",
          "3243: |   4048: 04 08 03 00 0e 0b 04 07 03 00 0e 06 04 06 03 00   ................",
          "3244: |   4064: 0e 06 04 05 03 00 0e 0a 04 04 03 00 0e 07 04 03   ................",
          "3245: |   4080: 03 00 0e 0a 04 02 03 00 0e 0b 04 01 03 00 0e 08   ................",
          "3246: | page 7 offset 24576",
          "3247: |      0: 0d 00 00 00 01 0f f7 00 0f f7 00 00 00 00 00 00   ................",
          "3248: |   4080: 00 00 00 00 00 00 00 07 00 03 00 14 08 45 b5 03   .............E..",
          "3249: | end crash-afecd03c862e58.db",
          "3250: }]} {}",
          "3252: do_execsql_test 20.1 {",
          "3253:   BEGIN;",
          "3254:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<10)",
          "3255:     INSERT INTO t1(a) SELECT randomblob(3000) FROM c;",
          "3256: }",
          "3258: do_execsql_test 20.2 {",
          "3259:   INSERT INTO t1(t1) VALUES('optimize');",
          "3260: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}