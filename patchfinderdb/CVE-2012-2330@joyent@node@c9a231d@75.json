{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7397ab2cf13555a9f0aa3ccc50f9e76fc54fdcec",
      "candidate_info": {
        "commit_hash": "7397ab2cf13555a9f0aa3ccc50f9e76fc54fdcec",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/7397ab2cf13555a9f0aa3ccc50f9e76fc54fdcec",
        "files": [
          "deps/uv/config-unix.mk",
          "deps/uv/include/uv-private/uv-unix.h",
          "deps/uv/src/unix/darwin.c",
          "deps/uv/src/unix/freebsd.c",
          "deps/uv/src/unix/linux/linux-core.c",
          "deps/uv/src/unix/openbsd.c",
          "deps/uv/src/unix/proctitle.c",
          "deps/uv/src/unix/sunos.c",
          "deps/uv/src/unix/thread.c",
          "deps/uv/test/test-process-title.c",
          "deps/uv/uv.gyp"
        ],
        "message": "uv: Upgrade to a9f6f06",
        "before_after_code_files": [
          "deps/uv/config-unix.mk||deps/uv/config-unix.mk",
          "deps/uv/include/uv-private/uv-unix.h||deps/uv/include/uv-private/uv-unix.h",
          "deps/uv/src/unix/darwin.c||deps/uv/src/unix/darwin.c",
          "deps/uv/src/unix/freebsd.c||deps/uv/src/unix/freebsd.c",
          "deps/uv/src/unix/linux/linux-core.c||deps/uv/src/unix/linux/linux-core.c",
          "deps/uv/src/unix/openbsd.c||deps/uv/src/unix/openbsd.c",
          "deps/uv/src/unix/proctitle.c||deps/uv/src/unix/proctitle.c",
          "deps/uv/src/unix/sunos.c||deps/uv/src/unix/sunos.c",
          "deps/uv/src/unix/thread.c||deps/uv/src/unix/thread.c",
          "deps/uv/test/test-process-title.c||deps/uv/test/test-process-title.c",
          "deps/uv/uv.gyp||deps/uv/uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/config-unix.mk||deps/uv/config-unix.mk": [
          "File: deps/uv/config-unix.mk -> deps/uv/config-unix.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "128: RUNNER_LINKFLAGS += -pthread",
          "129: endif",
          "131: RUNNER_LIBS=",
          "132: RUNNER_SRC=test/runner-unix.c",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131: ifneq (FreeBSD,$(uname_S))",
          "132: OBJS += src/unix/proctitle.o",
          "133: endif",
          "",
          "---------------"
        ],
        "deps/uv/include/uv-private/uv-unix.h||deps/uv/include/uv-private/uv-unix.h": [
          "File: deps/uv/include/uv-private/uv-unix.h -> deps/uv/include/uv-private/uv-unix.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: #include <termios.h>",
          "41: #include <pwd.h>",
          "44: #include <pthread.h>",
          "45: #include <signal.h>",
          "47: #if __sun",
          "48: # include <sys/port.h>",
          "49: # include <port.h>",
          "",
          "[Removed Lines]",
          "43: #include <semaphore.h>",
          "",
          "[Added Lines]",
          "46: #if defined(__APPLE__) && defined(__MACH__)",
          "47: # include <mach/mach.h>",
          "48: # include <mach/task.h>",
          "49: # include <mach/semaphore.h>",
          "50: #else",
          "51: # include <semaphore.h>",
          "52: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67: typedef pthread_t uv_thread_t;",
          "68: typedef pthread_mutex_t uv_mutex_t;",
          "69: typedef pthread_rwlock_t uv_rwlock_t;",
          "70: typedef sem_t uv_sem_t;",
          "73: typedef gid_t uv_gid_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77: #if defined(__APPLE__) && defined(__MACH__)",
          "78: typedef semaphore_t uv_sem_t;",
          "79: #else",
          "81: #endif",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/darwin.c||deps/uv/src/unix/darwin.c": [
          "File: deps/uv/src/unix/darwin.c -> deps/uv/src/unix/darwin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: #include <sys/sysctl.h>",
          "46: #if TARGET_OS_IPHONE",
          "48: uint64_t uv_hrtime() {",
          "",
          "[Removed Lines]",
          "44: static char *process_title;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138: }",
          "166: uv_err_t uv_resident_set_memory(size_t* rss) {",
          "167:   struct task_basic_info t_info;",
          "168:   mach_msg_type_number_t t_info_count = TASK_BASIC_INFO_COUNT;",
          "",
          "[Removed Lines]",
          "141: char** uv_setup_args(int argc, char** argv) {",
          "142:   process_title = argc ? strdup(argv[0]) : NULL;",
          "143:   return argv;",
          "144: }",
          "147: uv_err_t uv_set_process_title(const char* title) {",
          "149:   return uv__new_artificial_error(UV_ENOSYS);",
          "150: }",
          "153: uv_err_t uv_get_process_title(char* buffer, size_t size) {",
          "154:   if (process_title) {",
          "155:     strncpy(buffer, process_title, size);",
          "156:   } else {",
          "157:     if (size > 0) {",
          "158:       buffer[0] = '\\0';",
          "159:     }",
          "160:   }",
          "162:   return uv_ok_;",
          "163: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/freebsd.c||deps/uv/src/unix/freebsd.c": [
          "File: deps/uv/src/unix/freebsd.c -> deps/uv/src/unix/freebsd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "141: uv_err_t uv_set_process_title(const char* title) {",
          "142:   if (process_title) free(process_title);",
          "143:   process_title = strdup(title);",
          "145:   return uv_ok_;",
          "146: }",
          "",
          "[Removed Lines]",
          "144:   setproctitle(title);",
          "",
          "[Added Lines]",
          "142:   int oid[4];",
          "147:   oid[0] = CTL_KERN;",
          "148:   oid[1] = KERN_PROC;",
          "149:   oid[2] = KERN_PROC_ARGS;",
          "150:   oid[3] = getpid();",
          "152:   sysctl(oid,",
          "153:          ARRAY_SIZE(oid),",
          "154:          NULL,",
          "155:          NULL,",
          "156:          process_title,",
          "157:          strlen(process_title) + 1);",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/linux/linux-core.c||deps/uv/src/unix/linux/linux-core.c": [
          "File: deps/uv/src/unix/linux/linux-core.c -> deps/uv/src/unix/linux/linux-core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: static char buf[MAXPATHLEN + 1];",
          "",
          "[Removed Lines]",
          "61: static struct {",
          "62:   char *str;",
          "63:   size_t len;",
          "64: } process_title;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112: }",
          "182: uv_err_t uv_resident_set_memory(size_t* rss) {",
          "183:   FILE* f;",
          "184:   int itmp;",
          "",
          "[Removed Lines]",
          "115: char** uv_setup_args(int argc, char** argv) {",
          "116:   char **new_argv;",
          "117:   char **new_env;",
          "118:   size_t size;",
          "119:   int envc;",
          "120:   char *s;",
          "121:   int i;",
          "123:   for (envc = 0; environ[envc]; envc++);",
          "125:   s = envc ? environ[envc - 1] : argv[argc - 1];",
          "127:   process_title.str = argv[0];",
          "128:   process_title.len = s + strlen(s) + 1 - argv[0];",
          "130:   size = process_title.len;",
          "131:   size += (argc + 1) * sizeof(char **);",
          "132:   size += (envc + 1) * sizeof(char **);",
          "134:   if ((s = (char *) malloc(size)) == NULL) {",
          "135:     process_title.str = NULL;",
          "136:     process_title.len = 0;",
          "137:     return argv;",
          "138:   }",
          "140:   new_argv = (char **) s;",
          "141:   new_env = new_argv + argc + 1;",
          "142:   s = (char *) (new_env + envc + 1);",
          "143:   memcpy(s, process_title.str, process_title.len);",
          "145:   for (i = 0; i < argc; i++)",
          "146:     new_argv[i] = s + (argv[i] - argv[0]);",
          "147:   new_argv[argc] = NULL;",
          "149:   s += environ[0] - argv[0];",
          "151:   for (i = 0; i < envc; i++)",
          "152:     new_env[i] = s + (environ[i] - environ[0]);",
          "153:   new_env[envc] = NULL;",
          "155:   environ = new_env;",
          "156:   return new_argv;",
          "157: }",
          "160: uv_err_t uv_set_process_title(const char* title) {",
          "162:   if (process_title.len)",
          "163:     strncpy(process_title.str, title, process_title.len - 1);",
          "165:   return uv_ok_;",
          "166: }",
          "169: uv_err_t uv_get_process_title(char* buffer, size_t size) {",
          "170:   if (process_title.str) {",
          "171:     strncpy(buffer, process_title.str, size);",
          "172:   } else {",
          "173:     if (size > 0) {",
          "174:       buffer[0] = '\\0';",
          "175:     }",
          "176:   }",
          "178:   return uv_ok_;",
          "179: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/openbsd.c||deps/uv/src/unix/openbsd.c": [
          "File: deps/uv/src/unix/openbsd.c -> deps/uv/src/unix/openbsd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: #define NANOSEC ((uint64_t) 1e9)",
          "46: uint64_t uv_hrtime(void) {",
          "47:   struct timespec ts;",
          "48:   clock_gettime(CLOCK_MONOTONIC, &ts);",
          "",
          "[Removed Lines]",
          "43: static char *process_title;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "137: }",
          "167: uv_err_t uv_resident_set_memory(size_t* rss) {",
          "168:   kvm_t *kd = NULL;",
          "169:   struct kinfo_proc *kinfo = NULL;",
          "",
          "[Removed Lines]",
          "140: char** uv_setup_args(int argc, char** argv) {",
          "141:   process_title = argc ? strdup(argv[0]) : NULL;",
          "142:   return argv;",
          "143: }",
          "146: uv_err_t uv_set_process_title(const char* title) {",
          "147:   if (process_title) free(process_title);",
          "148:   process_title = strdup(title);",
          "149:   setproctitle(title);",
          "150:   return uv_ok_;",
          "151: }",
          "154: uv_err_t uv_get_process_title(char* buffer, size_t size) {",
          "155:   if (process_title) {",
          "156:     strncpy(buffer, process_title, size);",
          "157:   } else {",
          "158:     if (size > 0) {",
          "159:       buffer[0] = '\\0';",
          "160:     }",
          "161:   }",
          "163:   return uv_ok_;",
          "164: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/proctitle.c||deps/uv/src/unix/proctitle.c": [
          "File: deps/uv/src/unix/proctitle.c -> deps/uv/src/unix/proctitle.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #include \"uv.h\"",
          "22: #include \"internal.h\"",
          "24: #include <stdlib.h>",
          "25: #include <string.h>",
          "26: #include <assert.h>",
          "30: static struct {",
          "31:   char *str;",
          "32:   size_t len;",
          "33: } process_title;",
          "35: extern char** environ;",
          "38: char** uv_setup_args(int argc, char** argv) {",
          "39:   char **new_argv;",
          "40:   char **new_env;",
          "41:   size_t size;",
          "42:   int envc;",
          "43:   char *s;",
          "44:   int i;",
          "46:   for (envc = 0; environ[envc]; envc++);",
          "48:   s = envc ? environ[envc - 1] : argv[argc - 1];",
          "50:   process_title.str = argv[0];",
          "51:   process_title.len = s + strlen(s) + 1 - argv[0];",
          "53:   size = process_title.len;",
          "54:   size += (argc + 1) * sizeof(char **);",
          "55:   size += (envc + 1) * sizeof(char **);",
          "57:   if ((s = (char *) malloc(size)) == NULL) {",
          "58:     process_title.str = NULL;",
          "59:     process_title.len = 0;",
          "60:     return argv;",
          "61:   }",
          "63:   new_argv = (char **) s;",
          "64:   new_env = new_argv + argc + 1;",
          "65:   s = (char *) (new_env + envc + 1);",
          "66:   memcpy(s, process_title.str, process_title.len);",
          "68:   for (i = 0; i < argc; i++)",
          "69:     new_argv[i] = s + (argv[i] - argv[0]);",
          "70:   new_argv[argc] = NULL;",
          "72:   s += environ[0] - argv[0];",
          "74:   for (i = 0; i < envc; i++)",
          "75:     new_env[i] = s + (environ[i] - environ[0]);",
          "76:   new_env[envc] = NULL;",
          "78:   environ = new_env;",
          "79:   return new_argv;",
          "80: }",
          "83: uv_err_t uv_set_process_title(const char* title) {",
          "84:   uv_strlcpy(process_title.str, title, process_title.len);",
          "85:   return uv_ok_;",
          "86: }",
          "89: uv_err_t uv_get_process_title(char* buffer, size_t size) {",
          "90:   uv_strlcpy(buffer, process_title.str ? process_title.str : \"\", size);",
          "91:   return uv_ok_;",
          "92: }",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/sunos.c||deps/uv/src/unix/sunos.c": [
          "File: deps/uv/src/unix/sunos.c -> deps/uv/src/unix/sunos.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "259: uv_err_t uv_resident_set_memory(size_t* rss) {",
          "260:   psinfo_t psinfo;",
          "261:   uv_err_t err;",
          "",
          "[Removed Lines]",
          "241: char** uv_setup_args(int argc, char** argv) {",
          "242:   return argv;",
          "243: }",
          "246: uv_err_t uv_set_process_title(const char* title) {",
          "247:   return uv_ok_;",
          "248: }",
          "251: uv_err_t uv_get_process_title(char* buffer, size_t size) {",
          "252:   if (size > 0) {",
          "253:     buffer[0] = '\\0';",
          "254:   }",
          "255:   return uv_ok_;",
          "256: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/thread.c||deps/uv/src/unix/thread.c": [
          "File: deps/uv/src/unix/thread.c -> deps/uv/src/unix/thread.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:     abort();",
          "168: }",
          "171: int uv_sem_init(uv_sem_t* sem, unsigned int value) {",
          "172:   return sem_init(sem, 0, value);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "170: #if defined(__APPLE__) && defined(__MACH__)",
          "172: int uv_sem_init(uv_sem_t* sem, unsigned int value) {",
          "173:   return semaphore_create(mach_task_self(), sem, SYNC_POLICY_FIFO, value);",
          "174: }",
          "177: void uv_sem_destroy(uv_sem_t* sem) {",
          "178:   if (semaphore_destroy(mach_task_self(), *sem))",
          "179:     abort();",
          "180: }",
          "183: void uv_sem_post(uv_sem_t* sem) {",
          "184:   if (semaphore_signal(*sem))",
          "185:     abort();",
          "186: }",
          "189: void uv_sem_wait(uv_sem_t* sem) {",
          "190:   if (semaphore_wait(*sem))",
          "191:     abort();",
          "192: }",
          "195: int uv_sem_trywait(uv_sem_t* sem) {",
          "196:   mach_timespec_t interval;",
          "198:   interval.tv_sec = 0;",
          "199:   interval.tv_nsec = 0;",
          "201:   if (semaphore_timedwait(*sem, interval) == KERN_SUCCESS)",
          "202:     return 0;",
          "203:   else",
          "204:     return -1;",
          "205: }",
          "",
          "---------------"
        ],
        "deps/uv/test/test-process-title.c||deps/uv/test/test-process-title.c": [
          "File: deps/uv/test/test-process-title.c -> deps/uv/test/test-process-title.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #include \"task.h\"",
          "24: #include <string.h>",
          "27:   char buffer[512];",
          "28:   uv_err_t err;",
          "30:   err = uv_get_process_title(buffer, sizeof(buffer));",
          "31:   ASSERT(UV_OK == err.code);",
          "34:   ASSERT(UV_OK == err.code);",
          "36:   err = uv_get_process_title(buffer, sizeof(buffer));",
          "37:   ASSERT(UV_OK == err.code);",
          "41:   return 0;",
          "42: }",
          "",
          "[Removed Lines]",
          "26: TEST_IMPL(process_title) {",
          "33:   err = uv_set_process_title(\"new title\");",
          "39:   ASSERT(strcmp(buffer, \"new title\") == 0);",
          "",
          "[Added Lines]",
          "27: static void set_title(const char* title) {",
          "34:   err = uv_set_process_title(title);",
          "40:   ASSERT(strcmp(buffer, title) == 0);",
          "41: }",
          "44: TEST_IMPL(process_title) {",
          "46:   set_title(\"%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s\");",
          "47:   set_title(\"new title\");",
          "",
          "---------------"
        ],
        "deps/uv/uv.gyp||deps/uv/uv.gyp": [
          "File: deps/uv/uv.gyp -> deps/uv/uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "287:         [ 'OS==\"mac\" or OS==\"freebsd\" or OS==\"openbsd\" or OS==\"netbsd\"', {",
          "288:           'sources': [ 'src/unix/kqueue.c' ],",
          "289:         }],",
          "290:       ]",
          "291:     },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "290:         [ 'OS!=\"win\" and OS!=\"freebsd\"', {",
          "291:           'sources': [ 'src/unix/proctitle.c' ],",
          "292:         }],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e6b6075024e9f1330575b10d7e6552e1ea6dad56",
      "candidate_info": {
        "commit_hash": "e6b6075024e9f1330575b10d7e6552e1ea6dad56",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/e6b6075024e9f1330575b10d7e6552e1ea6dad56",
        "files": [
          "lib/http.js",
          "test/simple/test-http-pause.js"
        ],
        "message": "http: Avoid 'data'/'end' events after pause()\n\nFixes #1040.",
        "before_after_code_files": [
          "lib/http.js||lihttp.js",
          "test/simple/test-http-pause.js||test/simple/test-http-pause.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/http.js||lihttp.js": [
          "File: lib/http.js -> lihttp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: var FreeList = require('freelist').FreeList;",
          "27: var HTTPParser = process.binding('http_parser').HTTPParser;",
          "28: var assert = require('assert').ok;",
          "31: var debug;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:   parser.onBody = function(b, start, len) {",
          "110:     var slice = b.slice(start, start + len);",
          "114:     } else {",
          "116:     }",
          "117:   };",
          "",
          "[Removed Lines]",
          "111:     if (parser.incoming._decoder) {",
          "112:       var string = parser.incoming._decoder.write(slice);",
          "113:       if (string.length) parser.incoming.emit('data', string);",
          "115:       parser.incoming.emit('data', slice);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "134:     if (!parser.incoming.upgrade) {",
          "138:     }",
          "139:   };",
          "",
          "[Removed Lines]",
          "136:       parser.incoming.readable = false;",
          "137:       parser.incoming.emit('end');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "225:   this.readable = true;",
          "228:   this.url = '';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "253: IncomingMessage.prototype.pause = function() {",
          "254:   this.socket.pause();",
          "255: };",
          "258: IncomingMessage.prototype.resume = function() {",
          "260: };",
          "",
          "[Removed Lines]",
          "259:   this.socket.resume();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-http-pause.js||test/simple/test-http-pause.js": [
          "File: test/simple/test-http-pause.js -> test/simple/test-http-pause.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var http = require('http');",
          "26: var expectedServer = 'Request Body from Client';",
          "27: var resultServer = '';",
          "28: var expectedClient = 'Response Body from Server';",
          "29: var resultClient = '';",
          "31: var server = http.createServer(function(req, res) {",
          "32:   common.debug('pause server request');",
          "33:   req.pause();",
          "34:   setTimeout(function() {",
          "35:     common.debug('resume server request');",
          "36:     req.resume();",
          "37:     req.setEncoding('utf8');",
          "38:     req.on('data', function(chunk) {",
          "39:       resultServer += chunk;",
          "40:     });",
          "41:     req.on('end', function() {",
          "42:       common.debug(resultServer);",
          "43:       res.writeHead(200);",
          "44:       res.end(expectedClient);",
          "45:     });",
          "46:   }, 100);",
          "47: });",
          "49: server.listen(common.PORT, function() {",
          "50:   var req = http.request({",
          "51:     port: common.PORT,",
          "52:     path: '/',",
          "53:     method: 'POST'",
          "54:   }, function(res) {",
          "55:     common.debug('pause client response');",
          "56:     res.pause();",
          "57:     setTimeout(function() {",
          "58:       common.debug('resume client response');",
          "59:       res.resume();",
          "60:       res.on('data', function(chunk) {",
          "61:         resultClient += chunk;",
          "62:       });",
          "63:       res.on('end', function() {",
          "64:         common.debug(resultClient);",
          "65:         server.close();",
          "66:       });",
          "67:     }, 100);",
          "68:   });",
          "69:   req.end(expectedServer);",
          "70: });",
          "72: process.on('exit', function() {",
          "73:   assert.equal(expectedServer, resultServer);",
          "74:   assert.equal(expectedClient, resultClient);",
          "75: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "443071db5749603f816199b9ec8bc512fb441d98",
      "candidate_info": {
        "commit_hash": "443071db5749603f816199b9ec8bc512fb441d98",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/443071db5749603f816199b9ec8bc512fb441d98",
        "files": [
          "lib/readline.js"
        ],
        "message": "readline: add multiline support",
        "before_after_code_files": [
          "lib/readline.js||lireadline.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/readline.js||lireadline.js": [
          "File: lib/readline.js -> lireadline.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:     this.history = [];",
          "96:     this.historyIndex = -1;",
          "98:     var winSize = output.getWindowSize();",
          "99:     exports.columns = winSize[0];",
          "101:     if (process.listeners('SIGWINCH').length === 0) {",
          "102:       process.on('SIGWINCH', function() {",
          "103:         var winSize = output.getWindowSize();",
          "104:         exports.columns = winSize[0];",
          "105:       });",
          "106:     }",
          "107:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:   return exports.columns;",
          "114: });",
          "116: Interface.prototype.setPrompt = function(prompt, length) {",
          "117:   this._prompt = prompt;",
          "118:   if (length) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "178: };",
          "181: Interface.prototype._refreshLine = function() {",
          "190:   this.output.clearLine(1);",
          "194: };",
          "",
          "[Removed Lines]",
          "183:   this.output.cursorTo(0);",
          "186:   this.output.write(this._prompt);",
          "187:   this.output.write(this.line);",
          "193:   this.output.cursorTo(this._promptLength + this.cursor);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "242:     this.line += c;",
          "243:     this.cursor += c.length;",
          "244:     this.output.write(c);",
          "245:   }",
          "246: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "415: Interface.prototype._line = function() {",
          "416:   var line = this._addHistory();",
          "417:   this.output.write('\\r\\n');",
          "418:   this._onLine(line);",
          "419: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "446: };",
          "450: Interface.prototype._ttyWrite = function(s, key) {",
          "451:   var next_word, next_non_word, previous_word, previous_non_word;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "617:       case 'left':",
          "618:         if (this.cursor > 0) {",
          "621:         }",
          "622:         break;",
          "624:       case 'right':",
          "625:         if (this.cursor != this.line.length) {",
          "628:         }",
          "629:         break;",
          "",
          "[Removed Lines]",
          "619:           this.cursor--;",
          "620:           this.output.moveCursor(-1, 0);",
          "626:           this.cursor++;",
          "627:           this.output.moveCursor(1, 0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d483acc5d9c67052366f10a23ebd46a96f989e05",
      "candidate_info": {
        "commit_hash": "d483acc5d9c67052366f10a23ebd46a96f989e05",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/d483acc5d9c67052366f10a23ebd46a96f989e05",
        "files": [
          "test/simple/test-c-ares.js"
        ],
        "message": "test: remove internet test from test/simple/",
        "before_after_code_files": [
          "test/simple/test-c-ares.js||test/simple/test-c-ares.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-c-ares.js||test/simple/test-c-ares.js": [
          "File: test/simple/test-c-ares.js -> test/simple/test-c-ares.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:   assert.equal(6, addressType);",
          "43: });",
          "",
          "[Removed Lines]",
          "45: dns.lookup('ipv6.google.com', function(error, result, addressType) {",
          "46:   if (error) throw error;",
          "47:   console.dir(arguments);",
          "49:   assert.equal(6, addressType);",
          "50: });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ff4096f958fcf1fb19f17159393bb8037f3db071",
      "candidate_info": {
        "commit_hash": "ff4096f958fcf1fb19f17159393bb8037f3db071",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/ff4096f958fcf1fb19f17159393bb8037f3db071",
        "files": [
          "src/node_version.h"
        ],
        "message": "Now working on v0.6.8",
        "before_after_code_files": [
          "src/node_version.h||src/node_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_version.h||src/node_version.h": [
          "File: src/node_version.h -> src/node_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #define NODE_MAJOR_VERSION 0",
          "30: #define NODE_MINOR_VERSION 6",
          "34: #ifndef NODE_STRINGIFY",
          "35: #define NODE_STRINGIFY(n) NODE_STRINGIFY_HELPER(n)",
          "",
          "[Removed Lines]",
          "31: #define NODE_PATCH_VERSION 7",
          "32: #define NODE_VERSION_IS_RELEASE 1",
          "",
          "[Added Lines]",
          "31: #define NODE_PATCH_VERSION 8",
          "32: #define NODE_VERSION_IS_RELEASE 0",
          "",
          "---------------"
        ]
      }
    }
  ]
}