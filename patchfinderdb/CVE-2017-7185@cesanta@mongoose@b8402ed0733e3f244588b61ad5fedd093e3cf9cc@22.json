{
  "cve_id": "CVE-2017-7185",
  "cve_desc": "Use-after-free vulnerability in the mg_http_multipart_wait_for_boundary function in mongoose.c in Cesanta Mongoose Embedded Web Server Library 6.7 and earlier and Mongoose OS 1.2 and earlier allows remote attackers to cause a denial of service (crash) via a multipart/form-data POST request without a MIME boundary string.",
  "repo": "cesanta/mongoose",
  "patch_hash": "b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
  "patch_info": {
    "commit_hash": "b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
    "repo": "cesanta/mongoose",
    "commit_url": "https://github.com/cesanta/mongoose/commit/b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
    "files": [
      "mongoose.c"
    ],
    "message": "Fix crash in multipart handling\n\nClose cesanta/dev#6974\n\nPUBLISHED_FROM=4d4e4a46eceba10aec8dacb7f8f58bd078c92307",
    "before_after_code_files": [
      "mongoose.c||mongoose.c"
    ]
  },
  "patch_diff": {
    "mongoose.c||mongoose.c": [
      "File: mongoose.c -> mongoose.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "5961:   struct mbuf *io = &c->recv_mbuf;",
      "5962:   struct mg_http_proto_data *pd = mg_http_get_proto_data(c);",
      "5964:   if ((int) io->len < pd->mp_stream.boundary_len + 2) {",
      "5965:     return 0;",
      "5966:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5964:   if (pd->mp_stream.boundary == NULL) {",
      "5965:     pd->mp_stream.state = MPS_FINALIZE;",
      "5966:     DBG((\"Invalid request: boundary not initilaized\"));",
      "5967:     return 0;",
      "5968:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "97d733e129b9f9c624472bc423c21affebd8aca0",
      "candidate_info": {
        "commit_hash": "97d733e129b9f9c624472bc423c21affebd8aca0",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/97d733e129b9f9c624472bc423c21affebd8aca0",
        "files": [
          "mongoose.c",
          "mongoose.h"
        ],
        "message": "Fix MQTT broker SUBSCRIBE request parsing\n\nAdd checks on the number of subscribe requests per packet and overall per-session subscription limit.\n\nPUBLISHED_FROM=faaf5c50af31a0694c9308a664f2e418dbb0eb18",
        "before_after_code_files": [
          "mongoose.c||mongoose.c",
          "mongoose.h||mongoose.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "10424: static void mg_mqtt_broker_handle_subscribe(struct mg_connection *nc,",
          "10425:                                             struct mg_mqtt_message *msg) {",
          "10426:   struct mg_mqtt_session *ss = (struct mg_mqtt_session *) nc->user_data;",
          "10429:   struct mg_str topic;",
          "10430:   uint8_t qos;",
          "10431:   int pos;",
          "",
          "[Removed Lines]",
          "10427:   uint8_t qoss[512];",
          "10428:   size_t qoss_len = 0;",
          "",
          "[Added Lines]",
          "10427:   uint8_t qoss[MG_MQTT_MAX_SESSION_SUBSCRIPTIONS];",
          "10428:   size_t num_subs = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10434:   for (pos = 0;",
          "10435:        (pos = mg_mqtt_next_subscribe_topic(msg, &topic, &qos, pos)) != -1;) {",
          "10437:   }",
          "10441:   for (pos = 0;",
          "10442:        (pos = mg_mqtt_next_subscribe_topic(msg, &topic, &qos, pos)) != -1;",
          "10443:        ss->num_subscriptions++) {",
          "",
          "[Removed Lines]",
          "10436:     qoss[qoss_len++] = qos;",
          "10439:   ss->subscriptions = (struct mg_mqtt_topic_expression *) MG_REALLOC(",
          "10440:       ss->subscriptions, sizeof(*ss->subscriptions) * qoss_len);",
          "",
          "[Added Lines]",
          "10436:     if (num_subs >= sizeof(MG_MQTT_MAX_SESSION_SUBSCRIPTIONS) ||",
          "10437:         (ss->num_subscriptions + num_subs >=",
          "10438:          MG_MQTT_MAX_SESSION_SUBSCRIPTIONS)) {",
          "10439:       nc->flags |= MG_F_CLOSE_IMMEDIATELY;",
          "10440:       return;",
          "10441:     }",
          "10442:     qoss[num_subs++] = qos;",
          "10445:   te = (struct mg_mqtt_topic_expression *) MG_REALLOC(",
          "10446:       ss->subscriptions,",
          "10447:       sizeof(*ss->subscriptions) * (ss->num_subscriptions + num_subs));",
          "10448:   if (te == NULL) {",
          "10449:     nc->flags |= MG_F_CLOSE_IMMEDIATELY;",
          "10450:     return;",
          "10451:   }",
          "10452:   ss->subscriptions = te;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "10447:     strncpy((char *) te->topic, topic.p, topic.len + 1);",
          "10448:   }",
          "10451: }",
          "10453: static void mg_mqtt_broker_handle_publish(struct mg_mqtt_broker *brk,",
          "",
          "[Removed Lines]",
          "10450:   mg_mqtt_suback(nc, qoss, qoss_len, msg->message_id);",
          "",
          "[Added Lines]",
          "10462:   mg_mqtt_suback(nc, qoss, num_subs, msg->message_id);",
          "",
          "---------------"
        ],
        "mongoose.h||mongoose.h": [
          "File: mongoose.h -> mongoose.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5380: extern \"C\" {",
          "5385: struct mg_mqtt_broker;",
          "",
          "[Removed Lines]",
          "5383: #define MG_MQTT_MAX_SESSION_SUBSCRIPTIONS 512;",
          "",
          "[Added Lines]",
          "5383: #ifndef MG_MQTT_MAX_SESSION_SUBSCRIPTIONS",
          "5384: #define MG_MQTT_MAX_SESSION_SUBSCRIPTIONS 512",
          "5385: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f868fc861b68bfdd59cc193b893966061c8aa5a3",
      "candidate_info": {
        "commit_hash": "f868fc861b68bfdd59cc193b893966061c8aa5a3",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/f868fc861b68bfdd59cc193b893966061c8aa5a3",
        "files": [
          "mongoose.c",
          "mongoose.h"
        ],
        "message": "Enable hosts and resolv.conf lookups on UNIX only\n\nNot relevant for other platforms\n\nPUBLISHED_FROM=65b8959ee677555e2fb330c84d443e0a93d9fd1c",
        "before_after_code_files": [
          "mongoose.c||mongoose.c",
          "mongoose.h||mongoose.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "10872:     }",
          "10873:     RegCloseKey(hKey);",
          "10874:   }",
          "10876:   FILE *fp;",
          "10877:   char line[512];",
          "10880:     ret = -1;",
          "10881:   } else {",
          "",
          "[Removed Lines]",
          "10875: #elif MG_ENABLE_FILESYSTEM",
          "10879:   if ((fp = mg_fopen(\"/etc/resolv.conf\", \"r\")) == NULL) {",
          "",
          "[Added Lines]",
          "10875: #elif MG_ENABLE_FILESYSTEM && defined(MG_RESOLV_CONF_FILE_NAME)",
          "10879:   if ((fp = mg_fopen(MG_RESOLV_CONF_FILE_NAME, \"r\")) == NULL) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10898: }",
          "10900: int mg_resolve_from_hosts_file(const char *name, union socket_address *usa) {",
          "10903:   FILE *fp;",
          "10904:   char line[1024];",
          "",
          "[Removed Lines]",
          "10901: #if MG_ENABLE_FILESYSTEM",
          "",
          "[Added Lines]",
          "10901: #if MG_ENABLE_FILESYSTEM && defined(MG_HOSTS_FILE_NAME)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "10907:   unsigned int a, b, c, d;",
          "10908:   int len = 0;",
          "10911:     return -1;",
          "10912:   }",
          "",
          "[Removed Lines]",
          "10910:   if ((fp = mg_fopen(\"/etc/hosts\", \"r\")) == NULL) {",
          "",
          "[Added Lines]",
          "10910:   if ((fp = mg_fopen(MG_HOSTS_FILE_NAME, \"r\")) == NULL) {",
          "",
          "---------------"
        ],
        "mongoose.h||mongoose.h": [
          "File: mongoose.h -> mongoose.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "460: #define MG_NET_IF MG_NET_IF_SOCKET",
          "461: #endif",
          "465: #ifdef MG_MODULE_LINES",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "463: #ifndef MG_HOSTS_FILE_NAME",
          "464: #define MG_HOSTS_FILE_NAME \"/etc/hosts\"",
          "465: #endif",
          "467: #ifndef MG_RESOLV_CONF_FILE_NAME",
          "468: #define MG_RESOLV_CONF_FILE_NAME \"/etc/resolv.conf\"",
          "469: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aab857a66e78251222552d709ade9c99b4ca673d",
      "candidate_info": {
        "commit_hash": "aab857a66e78251222552d709ade9c99b4ca673d",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/aab857a66e78251222552d709ade9c99b4ca673d",
        "files": [
          "examples/big_upload/ajax_upload_demo/index.html",
          "examples/big_upload/big_upload.c"
        ],
        "message": "Add ajax_upload to big_upload\n\nPUBLISHED_FROM=7c919ba3a2afa74cec9947e78299b4bb7a64b4bc",
        "before_after_code_files": [
          "examples/big_upload/ajax_upload_demo/index.html||examples/big_upload/ajax_upload_demo/index.html",
          "examples/big_upload/big_upload.c||examples/big_upload/big_upload.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/big_upload/ajax_upload_demo/index.html||examples/big_upload/ajax_upload_demo/index.html": [
          "File: examples/big_upload/ajax_upload_demo/index.html -> examples/big_upload/ajax_upload_demo/index.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <!DOCTYPE html>",
          "2: <html>",
          "3: <head>",
          "4:   <title>AJAX Upload Example</title>",
          "5:   <script src=\"//code.jquery.com/jquery-1.9.1.js\"></script>",
          "6:   <script type=\"text/javascript\">",
          "7:     function updateProgress(evt) {",
          "8:       if (evt.lengthComputable) {",
          "9:         document.getElementById(\"output\").textContent =",
          "10:               \"Uploaded \" + evt.loaded + \" of \" + evt.total + \" bytes\";",
          "11:       }",
          "12:     }",
          "13:     function uploadFile() {",
          "14:       var file_data = new FormData(document.getElementById('filename'));",
          "15:       $.ajax({",
          "16:         url: \"/upload\",",
          "17:         type: \"POST\",",
          "18:         data: file_data,",
          "19:         processData: false,",
          "20:         contentType: false,",
          "21:         cache: false,",
          "22:         xhr: function() {",
          "23:           myXhr = $.ajaxSettings.xhr();",
          "24:           if(myXhr.upload){",
          "25:             myXhr.upload.addEventListener('progress',updateProgress, false); // for handling the progress of the upload",
          "26:           }",
          "27:           return myXhr;",
          "28:         },",
          "29:       }).done(function(data) {",
          "30:           document.getElementById(\"output\").textContent = \"Result: \" + data;",
          "31:       });",
          "32:       return false;",
          "33:     }",
          "34:   </script>",
          "35: </head>",
          "37: <body>",
          "38:   <form method=\"post\" id=\"filename\" name=\"filename\" onsubmit=\"return uploadFile();\">",
          "39:     <label>Select a file:</label><br>",
          "40:     <input type=\"file\" id=\"file\" name=\"file\" required />",
          "41:     <input type=\"submit\" value=\"Upload\" />",
          "42:   </form>",
          "43:   <br><br><div id=\"output\"></div>",
          "44: </body>",
          "45: </html>",
          "",
          "---------------"
        ],
        "examples/big_upload/big_upload.c||examples/big_upload/big_upload.c": [
          "File: examples/big_upload/big_upload.c -> examples/big_upload/big_upload.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include \"mongoose.h\"",
          "12: static const char *s_http_port = \"8000\";",
          "14: struct file_writer_data {",
          "15:   FILE *fp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: static struct mg_serve_http_opts s_http_server_opts;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84: static void ev_handler(struct mg_connection *nc, int ev, void *ev_data) {",
          "85:   (void) ev_data;",
          "91:   }",
          "92: }",
          "",
          "[Removed Lines]",
          "86:   switch (ev) {",
          "87:     case MG_EV_HTTP_REQUEST:",
          "89:       handle_request(nc);",
          "90:       break;",
          "",
          "[Added Lines]",
          "87:   if (ev == MG_EV_HTTP_REQUEST) {",
          "88:     mg_printf(nc, \"%s\",",
          "89:               \"HTTP/1.1 200 OK\\r\\n\"",
          "90:               \"Content-Type: text/html\\r\\n\"",
          "91:               \"Connection: close\\r\\n\"",
          "92:               \"\\r\\n\"",
          "93:               \"<html><body>Upload example.\"",
          "94:               \"Navigate to <a \"",
          "95:               \"href=\\\"simple_upload_demo\\\">/simple_upload_demo</a> for \"",
          "96:               \"uploading using submit \"",
          "97:               \"or to <a href=\\\"/ajax_upload_demo\\\">/ajax_upload_demo</a> for \"",
          "98:               \"uploading using ajax\"",
          "99:               \"</form></body></html>\");",
          "100:     nc->flags |= MG_F_SEND_AND_CLOSE;",
          "101:   }",
          "102: }",
          "104: static void upload_demo_handler(struct mg_connection *nc, int ev, void *p) {",
          "105:   if (ev == MG_EV_HTTP_REQUEST) {",
          "106:     (void) p;",
          "107:     handle_request(nc);",
          "108:   }",
          "109: }",
          "111: static void ajax_demo_handler(struct mg_connection *nc, int ev, void *p) {",
          "112:   if (ev == MG_EV_HTTP_REQUEST) {",
          "113:     mg_serve_http(nc, (struct http_message *) p, s_http_server_opts);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "98:   mg_mgr_init(&mgr, NULL);",
          "99:   nc = mg_bind(&mgr, s_http_port, ev_handler);",
          "101:   mg_register_http_endpoint(nc, \"/upload\", handle_upload MG_UD_ARG(NULL));",
          "103:   mg_set_protocol_http_websocket(nc);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124:   s_http_server_opts.document_root = \".\";  // Serve current directory",
          "127:   mg_register_http_endpoint(nc, \"/ajax_upload_demo\",",
          "128:                             ajax_demo_handler MG_UD_ARG(NULL));",
          "129:   mg_register_http_endpoint(nc, \"/simple_upload_demo\",",
          "130:                             upload_demo_handler MG_UD_ARG(NULL));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "77e44c7c0e0538d7c85d7870dc3ffad0c4508ae4",
      "candidate_info": {
        "commit_hash": "77e44c7c0e0538d7c85d7870dc3ffad0c4508ae4",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/77e44c7c0e0538d7c85d7870dc3ffad0c4508ae4",
        "files": [
          "mongoose.c"
        ],
        "message": "Harden MQTT variable length parsing\n\nPUBLISHED_FROM=e16ee57bc30277e5b5684e53da78e69baaf9f779",
        "before_after_code_files": [
          "mongoose.c||mongoose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "9943:     lc = *((const unsigned char *) p++);",
          "9944:     len += (lc & 0x7f) << 7 * len_len;",
          "9945:     len_len++;",
          "9947:   }",
          "9949:   end = p + len;",
          "9951:     return -1;",
          "9952:   }",
          "",
          "[Removed Lines]",
          "9946:     if (!(lc & 0x80) || (len_len > sizeof(len))) break;",
          "9950:   if (lc & 0x80 || end > io->buf + io->len) {",
          "",
          "[Added Lines]",
          "9946:     if (!(lc & 0x80)) break;",
          "9947:     if (len_len > 4) return -2;",
          "9951:   if (lc & 0x80 || len > (io->len - (p - io->buf))) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fea648496cf134a1aedddd81ee35bbc05e39853a",
      "candidate_info": {
        "commit_hash": "fea648496cf134a1aedddd81ee35bbc05e39853a",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/fea648496cf134a1aedddd81ee35bbc05e39853a",
        "files": [
          "mongoose.c"
        ],
        "message": "Fix https://github.com/cesanta/mongoose-os/issues/318\n\nPUBLISHED_FROM=2fc7b59b2edd0f473acd22067439471778acef8e",
        "before_after_code_files": [
          "mongoose.c||mongoose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7919:     goto out;",
          "7920:   }",
          "7922:   if (scheme.len == 0 || mg_vcmp(&scheme, scheme1) == 0 ||",
          "7923:       (scheme2 != NULL && mg_vcmp(&scheme, scheme2) == 0)) {",
          "7924:     use_ssl = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7923:   if (query.len > 0) path->len += query.len + 1;",
          "",
          "---------------"
        ]
      }
    }
  ]
}