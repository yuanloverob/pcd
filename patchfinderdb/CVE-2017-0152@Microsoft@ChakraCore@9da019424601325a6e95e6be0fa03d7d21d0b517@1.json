{
  "cve_id": "CVE-2017-0152",
  "cve_desc": "A remote code execution vulnerability exists in the way affected Microsoft scripting engine render when handling objects in memory in Microsoft browsers. The vulnerability could corrupt memory in such a way that an attacker could execute arbitrary code in the context of the current user. An attacker who successfully exploited the vulnerability could gain the same user rights as the current user, aka \"Scripting Engine Memory Corruption Vulnerability.\"",
  "repo": "Microsoft/ChakraCore",
  "patch_hash": "9da019424601325a6e95e6be0fa03d7d21d0b517",
  "patch_info": {
    "commit_hash": "9da019424601325a6e95e6be0fa03d7d21d0b517",
    "repo": "Microsoft/ChakraCore",
    "commit_url": "https://github.com/Microsoft/ChakraCore/commit/9da019424601325a6e95e6be0fa03d7d21d0b517",
    "files": [
      "lib/Parser/Parse.cpp",
      "lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
      "test/es6/default-splitscope.js"
    ],
    "message": "[CVE-2017-0152] MSFT: 10592731 : Issue with Function name capturing in param scope\n\nIn a function expression with name, where the name is captured in one\nof the param scope functions, if there is a function or var declaration\nwith the same name as the function expression name we were marking the\nfunction expression name as shadowed. In non-eval case this causes\nissue because the name symbol won't get added to the body. This change is to\nfix it in such a way if the name is captured in the param scope then we\nsplit the param and body scope such that the name symbol is added to the\nparam scope not body scope.",
    "before_after_code_files": [
      "lib/Parser/Parse.cpp||lib/Parser/Parse.cpp",
      "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
      "test/es6/default-splitscope.js||test/es6/default-splitscope.js"
    ]
  },
  "patch_diff": {
    "lib/Parser/Parse.cpp||lib/Parser/Parse.cpp": [
      "File: lib/Parser/Parse.cpp -> lib/Parser/Parse.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "5198:                         paramScope->SetCannotMergeWithBodyScope();",
      "5199:                     }",
      "5200:                 }",
      "5201:             }",
      "5202:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5201:                 if (paramScope->GetCanMergeWithBodyScope() && !fDeclaration && pnodeFnc->sxFnc.pnodeName != nullptr)",
      "5202:                 {",
      "5203:                     Symbol* funcSym = pnodeFnc->sxFnc.pnodeName->sxVar.sym;",
      "5204:                     if (funcSym->GetPid()->GetTopRef()->GetFuncScopeId() > pnodeFnc->sxFnc.functionId)",
      "5205:                     {",
      "5210:                         paramScope->SetCannotMergeWithBodyScope();",
      "5211:                     }",
      "5212:                 }",
      "",
      "---------------"
    ],
    "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp": [
      "File: lib/Runtime/ByteCode/ByteCodeEmitter.cpp -> lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "3319:         {",
      "3322:             paramScope->ForEachSymbol([&](Symbol* param) {",
      "3323:                 Symbol* varSym = funcInfo->GetBodyScope()->FindLocalSymbol(param->GetName());",
      "3324:                 Assert(varSym || pnode->sxFnc.pnodeName->sxVar.sym == param);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3322:             Symbol* funcSym = funcInfo->root->sxFnc.GetFuncSymbol();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3327:                 {",
      "3329:                 }",
      "3331:                 {",
      "",
      "[Removed Lines]",
      "3330:                 else if (varSym && varSym->GetSymbolType() == STVariable && (varSym->IsInSlot(funcInfo) || varSym->GetLocation() != Js::Constants::NoRegister))",
      "",
      "[Added Lines]",
      "3331:                 else if ((funcSym == nullptr || funcSym != param)    // Do not copy the symbol over to body as the function expression symbol",
      "3333:                     && (varSym && varSym->GetSymbolType() == STVariable && (varSym->IsInSlot(funcInfo) || varSym->GetLocation() != Js::Constants::NoRegister)))",
      "",
      "---------------"
    ],
    "test/es6/default-splitscope.js||test/es6/default-splitscope.js": [
      "File: test/es6/default-splitscope.js -> test/es6/default-splitscope.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "159:             return a;",
      "160:         }",
      "161:         assert.areEqual(10, f11()(), \"Recursive call to the function from the body scope returns the right value when eval is there in the body\");",
      "162:     }",
      "163:  },",
      "164:  {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "163:         function f13() {",
      "164:             var a = function jnvgfg(sfgnmj = function ccunlk() { jnvgfg(undefined, 1); }, b) {",
      "165:                 if (b) {",
      "166:                     assert.areEqual(undefined, jnvgfg, \"This refers to the instance in the body and the value of the function expression is not copied over\");",
      "167:                 }",
      "168:                 var jnvgfg = 10;",
      "169:                 if (!b) {",
      "170:                     sfgnmj();",
      "171:                     return 100;",
      "172:                 }",
      "173:             };",
      "174:             assert.areEqual(100, a(), \"After the recursion the right value is returned by the split scoped function\");",
      "175:         };",
      "176:         f13();",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "720bacde5d547b01561e68344cde6a67e44739fc",
      "candidate_info": {
        "commit_hash": "720bacde5d547b01561e68344cde6a67e44739fc",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/720bacde5d547b01561e68344cde6a67e44739fc",
        "files": [
          "lib/Runtime/Language/InterpreterStackFrame.cpp",
          "lib/Runtime/Language/ProfilingHelpers.cpp",
          "lib/Runtime/Library/JavascriptFunction.cpp"
        ],
        "message": "[CVE-2017-0015] Fix SpreadArgs uninitialized memory",
        "before_after_code_files": [
          "lib/Runtime/Language/InterpreterStackFrame.cpp||lib/Runtime/Language/InterpreterStackFrame.cpp",
          "lib/Runtime/Language/ProfilingHelpers.cpp||lib/Runtime/Language/ProfilingHelpers.cpp",
          "lib/Runtime/Library/JavascriptFunction.cpp||lib/Runtime/Library/JavascriptFunction.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/2697"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Runtime/Language/InterpreterStackFrame.cpp||lib/Runtime/Language/InterpreterStackFrame.cpp": [
          "File: lib/Runtime/Language/InterpreterStackFrame.cpp -> lib/Runtime/Language/InterpreterStackFrame.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "6348:                 PROBE_STACK(scriptContext, outArgs.Info.Count * sizeof(Var) + Js::Constants::MinStackDefault); // args + function call",
          "6349:                 outArgsSize = outArgs.Info.Count * sizeof(Var);",
          "6350:                 outArgs.Values = (Var*)_alloca(outArgsSize);",
          "6351:             }",
          "6352:             else",
          "6353:             {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6351:                 ZeroMemory(outArgs.Values, outArgsSize);",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/ProfilingHelpers.cpp||lib/Runtime/Language/ProfilingHelpers.cpp": [
          "File: lib/Runtime/Language/ProfilingHelpers.cpp -> lib/Runtime/Language/ProfilingHelpers.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "487:                 PROBE_STACK(scriptContext, outArgs.Info.Count * sizeof(Var) + Js::Constants::MinStackDefault); // args + function call",
          "488:                 outArgsSize = outArgs.Info.Count * sizeof(Var);",
          "489:                 outArgs.Values = (Var*)_alloca(outArgsSize);",
          "490:             }",
          "491:             else",
          "492:             {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "490:                 ZeroMemory(outArgs.Values, outArgsSize);",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptFunction.cpp||lib/Runtime/Library/JavascriptFunction.cpp": [
          "File: lib/Runtime/Library/JavascriptFunction.cpp -> lib/Runtime/Library/JavascriptFunction.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1104:             PROBE_STACK(scriptContext, outArgs.Info.Count * sizeof(Var) + Js::Constants::MinStackDefault); // args + function call",
          "1105:             outArgsSize = outArgs.Info.Count * sizeof(Var);",
          "1106:             outArgs.Values = (Var*)_alloca(outArgsSize);",
          "1107:         }",
          "1108:         else",
          "1109:         {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1107:             ZeroMemory(outArgs.Values, outArgsSize);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ff21352270c174ea21606369432909fcb1d9a0e9",
      "candidate_info": {
        "commit_hash": "ff21352270c174ea21606369432909fcb1d9a0e9",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/ff21352270c174ea21606369432909fcb1d9a0e9",
        "files": [
          "lib/Backend/Lower.cpp",
          "lib/Backend/LowerMDShared.cpp",
          "lib/Backend/LowerMDShared.h",
          "lib/Backend/amd64/LowererMDArch.cpp",
          "lib/Backend/amd64/LowererMDArch.h",
          "lib/Backend/arm/LowerMD.cpp",
          "lib/Backend/arm/LowerMD.h",
          "lib/Backend/arm64/LowerMD.h",
          "lib/Backend/i386/LowererMDArch.cpp",
          "lib/Backend/i386/LowererMDArch.h",
          "test/Array/array_conv_src.js",
          "test/Array/rlexe.xml"
        ],
        "message": "[CVE-2017-0071] Handle conversion of src operand on store to a typed array if the bailout kind tells us to bail out on helper calls.",
        "before_after_code_files": [
          "lib/Backend/Lower.cpp||lib/Backend/Lower.cpp",
          "lib/Backend/LowerMDShared.cpp||lib/Backend/LowerMDShared.cpp",
          "lib/Backend/LowerMDShared.h||lib/Backend/LowerMDShared.h",
          "lib/Backend/amd64/LowererMDArch.cpp||lib/Backend/amd64/LowererMDArch.cpp",
          "lib/Backend/amd64/LowererMDArch.h||lib/Backend/amd64/LowererMDArch.h",
          "lib/Backend/arm/LowerMD.cpp||lib/Backend/arm/LowerMD.cpp",
          "lib/Backend/arm/LowerMD.h||lib/Backend/arm/LowerMD.h",
          "lib/Backend/arm64/LowerMD.h||lib/Backend/arm64/LowerMD.h",
          "lib/Backend/i386/LowererMDArch.cpp||lib/Backend/i386/LowererMDArch.cpp",
          "lib/Backend/i386/LowererMDArch.h||lib/Backend/i386/LowererMDArch.h",
          "test/Array/array_conv_src.js||test/Array/array_conv_src.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/2697"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Backend/Lower.cpp||lib/Backend/Lower.cpp": [
          "File: lib/Backend/Lower.cpp -> lib/Backend/Lower.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "17082:                     InsertMove(indirOpnd, reg, stElem);",
          "",
          "[Removed Lines]",
          "17079:                     m_lowererMD.EmitLoadInt32(instr, true /*conversionFromObjectAllowed*/);",
          "",
          "[Added Lines]",
          "17079:                     bool bailOutOnHelperCall = (stElem->HasBailOutInfo() && (stElem->GetBailOutKind() & IR::BailOutOnArrayAccessHelperCall));",
          "17080:                     m_lowererMD.EmitLoadInt32(instr, true /*conversionFromObjectAllowed*/, bailOutOnHelperCall, labelHelper);",
          "",
          "---------------"
        ],
        "lib/Backend/LowerMDShared.cpp||lib/Backend/LowerMDShared.cpp": [
          "File: lib/Backend/LowerMDShared.cpp -> lib/Backend/LowerMDShared.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "7932: }",
          "7934: bool",
          "7936: {",
          "7938: }",
          "7940: void",
          "",
          "[Removed Lines]",
          "7935: LowererMD::EmitLoadInt32(IR::Instr *instrLoad, bool conversionFromObjectAllowed)",
          "7937:     return lowererMDArch.EmitLoadInt32(instrLoad, conversionFromObjectAllowed);",
          "",
          "[Added Lines]",
          "7935: LowererMD::EmitLoadInt32(IR::Instr *instrLoad, bool conversionFromObjectAllowed, bool bailOutOnHelper, IR::LabelInstr * labelBailOut)",
          "7937:     return lowererMDArch.EmitLoadInt32(instrLoad, conversionFromObjectAllowed, bailOutOnHelper, labelBailOut);",
          "",
          "---------------"
        ],
        "lib/Backend/LowerMDShared.h||lib/Backend/LowerMDShared.h": [
          "File: lib/Backend/LowerMDShared.h -> lib/Backend/LowerMDShared.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "210:      static void            EmitPtrInstr(IR::Instr *instr);",
          "211:             void            EmitLoadVar(IR::Instr *instr, bool isFromUint32 = false, bool isHelper = false);",
          "212:             void            EmitLoadVarNoCheck(IR::RegOpnd * dst, IR::RegOpnd * src, IR::Instr *instrLoad, bool isFromUint32, bool isHelper);",
          "214:             void            EmitIntToFloat(IR::Opnd *dst, IR::Opnd *src, IR::Instr *instrInsert);",
          "215:             void            EmitUIntToFloat(IR::Opnd *dst, IR::Opnd *src, IR::Instr *instrInsert);",
          "216:             void            EmitIntToLong(IR::Opnd *dst, IR::Opnd *src, IR::Instr *instrInsert);",
          "",
          "[Removed Lines]",
          "213:             bool            EmitLoadInt32(IR::Instr *instr, bool conversionFromObjectAllowed);",
          "",
          "[Added Lines]",
          "213:             bool            EmitLoadInt32(IR::Instr *instr, bool conversionFromObjectAllowed, bool bailOutOnHelper = false, IR::LabelInstr * labelBailOut = nullptr);",
          "",
          "---------------"
        ],
        "lib/Backend/amd64/LowererMDArch.cpp||lib/Backend/amd64/LowererMDArch.cpp": [
          "File: lib/Backend/amd64/LowererMDArch.cpp -> lib/Backend/amd64/LowererMDArch.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2605: }",
          "2607: bool",
          "2609: {",
          "",
          "[Removed Lines]",
          "2608: LowererMDArch::EmitLoadInt32(IR::Instr *instrLoad, bool conversionFromObjectAllowed)",
          "",
          "[Added Lines]",
          "2608: LowererMDArch::EmitLoadInt32(IR::Instr *instrLoad, bool conversionFromObjectAllowed, bool bailOutOnHelper, IR::LabelInstr * labelBailOut)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2658:         (src1ValueType.IsLikelyFloat() || src1ValueType.IsLikelyUntaggedInt()) &&",
          "2659:                 !(instrLoad->HasBailOutInfo() && (instrLoad->GetBailOutKind() == IR::BailOutIntOnly || instrLoad->GetBailOutKind() == IR::BailOutExpectingInteger));",
          "2662:     {",
          "2663:         if (!isInt)",
          "2664:         {",
          "2665:             if(doFloatToIntFastPath)",
          "",
          "[Removed Lines]",
          "2661:     if (!isNotInt)",
          "",
          "[Added Lines]",
          "2661:     if (isNotInt)",
          "2664:         if (!doFloatToIntFastPath && bailOutOnHelper)",
          "2665:         {",
          "2666:             if(!GlobOpt::DoAggressiveIntTypeSpec(this->m_func))",
          "2667:             {",
          "2670:                 if(PHASE_TRACE(Js::BailOutPhase, this->m_func))",
          "2671:                 {",
          "2672:                     Output::Print(_u(\"    Aborting JIT because AggressiveIntTypeSpec is already off\\n\"));",
          "2673:                     Output::Flush();",
          "2674:                 }",
          "2675:                 throw Js::OperationAbortedException();",
          "2676:             }",
          "2678:             throw Js::RejitException(RejitReason::AggressiveIntTypeSpecDisabled);",
          "2679:         }",
          "2680:     }",
          "2681:     else",
          "2682:     {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2747:             return true;",
          "2748:         }",
          "2751:         {",
          "2752:             lowererMD->m_lowerer->LowerUnaryHelperMem(instrLoad, IR::HelperConv_ToInt32);",
          "2753:         }",
          "",
          "[Removed Lines]",
          "2750:         if (conversionFromObjectAllowed)",
          "",
          "[Added Lines]",
          "2771:         if (bailOutOnHelper)",
          "2772:         {",
          "2773:             Assert(labelBailOut);",
          "2774:             lowererMD->m_lowerer->InsertBranch(Js::OpCode::Br, labelBailOut, instrLoad);",
          "2775:             instrLoad->Remove();",
          "2776:         }",
          "2777:         else if (conversionFromObjectAllowed)",
          "",
          "---------------"
        ],
        "lib/Backend/amd64/LowererMDArch.h||lib/Backend/amd64/LowererMDArch.h": [
          "File: lib/Backend/amd64/LowererMDArch.h -> lib/Backend/amd64/LowererMDArch.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:     void                EmitIntToLong(IR::Opnd *dst, IR::Opnd *src, IR::Instr *instrInsert);",
          "98:     void                EmitUIntToLong(IR::Opnd *dst, IR::Opnd *src, IR::Instr *instrInsert);",
          "99:     void                EmitLongToInt(IR::Opnd *dst, IR::Opnd *src, IR::Instr *instrInsert);",
          "102:     IR::Instr *         LoadCheckedFloat(IR::RegOpnd *opndOrig, IR::RegOpnd *opndFloat, IR::LabelInstr *labelInline, IR::LabelInstr *labelHelper, IR::Instr *instrInsert, const bool checkForNullInLoopBody = false);",
          "",
          "[Removed Lines]",
          "100:     bool                EmitLoadInt32(IR::Instr *instrLoad, bool conversionFromObjectAllowed);",
          "",
          "[Added Lines]",
          "100:     bool                EmitLoadInt32(IR::Instr *instrLoad, bool conversionFromObjectAllowed, bool bailOnHelperCall, IR::LabelInstr * labelBailOut);",
          "",
          "---------------"
        ],
        "lib/Backend/arm/LowerMD.cpp||lib/Backend/arm/LowerMD.cpp": [
          "File: lib/Backend/arm/LowerMD.cpp -> lib/Backend/arm/LowerMD.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "7336: }",
          "7338: bool",
          "7340: {",
          "",
          "[Removed Lines]",
          "7339: LowererMD::EmitLoadInt32(IR::Instr *instrLoad, bool conversionFromObjectAllowed)",
          "",
          "[Added Lines]",
          "7339: LowererMD::EmitLoadInt32(IR::Instr *instrLoad, bool conversionFromObjectAllowed, bool bailOutOnHelper, IR::LabelInstr * labelBailOut)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7380:             (src1ValueType.IsLikelyFloat() || src1ValueType.IsLikelyUntaggedInt()) &&",
          "7381:             !(instrLoad->HasBailOutInfo() && (instrLoad->GetBailOutKind() == IR::BailOutIntOnly || instrLoad->GetBailOutKind() == IR::BailOutExpectingInteger));",
          "7384:         {",
          "7385:             if (!isInt)",
          "7386:             {",
          "7387:                 if(doFloatToIntFastPath)",
          "",
          "[Removed Lines]",
          "7383:         if (!isNotInt)",
          "",
          "[Added Lines]",
          "7383:         if (isNotInt)",
          "7386:             if (!doFloatToIntFastPath && bailOutOnHelper)",
          "7387:             {",
          "7388:                 if(!GlobOpt::DoAggressiveIntTypeSpec(this->m_func))",
          "7389:                 {",
          "7392:                     if(PHASE_TRACE(Js::BailOutPhase, this->m_func))",
          "7393:                     {",
          "7394:                         Output::Print(_u(\"    Aborting JIT because AggressiveIntTypeSpec is already off\\n\"));",
          "7395:                         Output::Flush();",
          "7396:                     }",
          "7397:                     throw Js::OperationAbortedException();",
          "7398:                 }",
          "7400:                 throw Js::RejitException(RejitReason::AggressiveIntTypeSpecDisabled);",
          "7401:             }",
          "7402:         }",
          "7403:         else",
          "7404:         {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7438:             return true;",
          "7439:         }",
          "7442:         {",
          "7443:             this->m_lowerer->LowerUnaryHelperMem(instrLoad, IR::HelperConv_ToInt32);",
          "7444:         }",
          "",
          "[Removed Lines]",
          "7441:         if (conversionFromObjectAllowed)",
          "",
          "[Added Lines]",
          "7462:         if (bailOutOnHelper)",
          "7463:         {",
          "7464:             Assert(labelBailOut);",
          "7465:             this->m_lowerer->InsertBranch(Js::OpCode::Br, labelBailOut, instrLoad);",
          "7466:             instrLoad->Remove();",
          "7467:         }",
          "7468:         else if (conversionFromObjectAllowed)",
          "",
          "---------------"
        ],
        "lib/Backend/arm/LowerMD.h||lib/Backend/arm/LowerMD.h": [
          "File: lib/Backend/arm/LowerMD.h -> lib/Backend/arm/LowerMD.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "143:      static void            EmitInt4Instr(IR::Instr *instr);",
          "144:      static void            EmitPtrInstr(IR::Instr *instr);",
          "145:             void            EmitLoadVar(IR::Instr *instr, bool isFromUint32 = false, bool isHelper = false);",
          "147:             IR::Instr *     LowerInt64Assign(IR::Instr * instr) { Assert(UNREACHED); return nullptr; }",
          "149:      static void            LowerInt4NegWithBailOut(IR::Instr *const instr, const IR::BailOutKind bailOutKind, IR::LabelInstr *const bailOutLabel, IR::LabelInstr *const skipBailOutLabel);",
          "",
          "[Removed Lines]",
          "146:             bool            EmitLoadInt32(IR::Instr *instr, bool conversionFromObjectAllowed);",
          "",
          "[Added Lines]",
          "146:             bool            EmitLoadInt32(IR::Instr *instr, bool conversionFromObjectAllowed, bool bailOutOnHelper = false, IR::LabelInstr * labelBailOut = nullptr);",
          "",
          "---------------"
        ],
        "lib/Backend/arm64/LowerMD.h||lib/Backend/arm64/LowerMD.h": [
          "File: lib/Backend/arm64/LowerMD.h -> lib/Backend/arm64/LowerMD.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "140:        static void            EmitInt4Instr(IR::Instr *instr) { __debugbreak(); }",
          "141:        static void            EmitPtrInstr(IR::Instr *instr) { __debugbreak(); }",
          "142:               void            EmitLoadVar(IR::Instr *instr, bool isFromUint32 = false, bool isHelper = false) { __debugbreak(); }",
          "144:               IR::Instr *     LowerInt64Assign(IR::Instr * instr) { __debugbreak(); return nullptr; }",
          "146:        static void            LowerInt4NegWithBailOut(IR::Instr *const instr, const IR::BailOutKind bailOutKind, IR::LabelInstr *const bailOutLabel, IR::LabelInstr *const skipBailOutLabel) { __debugbreak(); }",
          "",
          "[Removed Lines]",
          "143:               bool            EmitLoadInt32(IR::Instr *instr, bool conversionFromObjectAllowed) { __debugbreak(); return 0; }",
          "",
          "[Added Lines]",
          "143:               bool            EmitLoadInt32(IR::Instr *instr, bool conversionFromObjectAllowed, bool bailOutOnHelper = false, IR::LabelInstr * labelBailOut = nullptr) { __debugbreak(); return 0; }",
          "",
          "---------------"
        ],
        "lib/Backend/i386/LowererMDArch.cpp||lib/Backend/i386/LowererMDArch.cpp": [
          "File: lib/Backend/i386/LowererMDArch.cpp -> lib/Backend/i386/LowererMDArch.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2605: }",
          "2607: bool",
          "2609: {",
          "",
          "[Removed Lines]",
          "2608: LowererMDArch::EmitLoadInt32(IR::Instr *instrLoad, bool conversionFromObjectAllowed)",
          "",
          "[Added Lines]",
          "2608: LowererMDArch::EmitLoadInt32(IR::Instr *instrLoad, bool conversionFromObjectAllowed, bool bailOutOnHelper, IR::LabelInstr * labelBailOut)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2663:         instrLoad->InsertBefore(instr);",
          "2664:     }",
          "2668:     {",
          "2669:         if(doShiftFirst)",
          "2670:         {",
          "",
          "[Removed Lines]",
          "2667:     if (!isNotInt)",
          "",
          "[Added Lines]",
          "2666:     if (isNotInt)",
          "2669:         if (!doFloatToIntFastPath && bailOutOnHelper)",
          "2670:         {",
          "2671:             if(!GlobOpt::DoAggressiveIntTypeSpec(this->m_func))",
          "2672:             {",
          "2675:                 if(PHASE_TRACE(Js::BailOutPhase, this->m_func))",
          "2676:                 {",
          "2677:                     Output::Print(_u(\"    Aborting JIT because AggressiveIntTypeSpec is already off\\n\"));",
          "2678:                     Output::Flush();",
          "2679:                 }",
          "2680:                 throw Js::OperationAbortedException();",
          "2681:             }",
          "2683:             throw Js::RejitException(RejitReason::AggressiveIntTypeSpecDisabled);",
          "2684:         }",
          "2685:     }",
          "2686:     else",
          "2687:     {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2781:             return true;",
          "2782:         }",
          "2785:         {",
          "2786:             lowererMD->m_lowerer->LowerUnaryHelperMem(instrLoad, IR::HelperConv_ToInt32);",
          "2787:         }",
          "",
          "[Removed Lines]",
          "2784:         if (conversionFromObjectAllowed)",
          "",
          "[Added Lines]",
          "2804:         if (bailOutOnHelper)",
          "2805:         {",
          "2806:             Assert(labelBailOut);",
          "2807:             lowererMD->m_lowerer->InsertBranch(Js::OpCode::Br, labelBailOut, instrLoad);",
          "2808:             instrLoad->Remove();",
          "2809:         }",
          "2810:         else if (conversionFromObjectAllowed)",
          "",
          "---------------"
        ],
        "lib/Backend/i386/LowererMDArch.h||lib/Backend/i386/LowererMDArch.h": [
          "File: lib/Backend/i386/LowererMDArch.h -> lib/Backend/i386/LowererMDArch.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:             void                EmitIntToLong(IR::Opnd *dst, IR::Opnd *src, IR::Instr *instrInsert);",
          "86:             void                EmitUIntToLong(IR::Opnd *dst, IR::Opnd *src, IR::Instr *instrInsert);",
          "87:             void                EmitLongToInt(IR::Opnd *dst, IR::Opnd *src, IR::Instr *instrInsert);",
          "90:             IR::Instr *         LoadCheckedFloat(IR::RegOpnd *opndOrig, IR::RegOpnd *opndFloat, IR::LabelInstr *labelInline, IR::LabelInstr *labelHelper, IR::Instr *instrInsert, const bool checkForNullInLoopBody = false);",
          "",
          "[Removed Lines]",
          "88:             bool                EmitLoadInt32(IR::Instr *instrLoad, bool conversionFromObjectAllowed);",
          "",
          "[Added Lines]",
          "88:             bool                EmitLoadInt32(IR::Instr *instrLoad, bool conversionFromObjectAllowed, bool bailOutOnHelper = false, IR::LabelInstr * labelBailOut = nullptr);",
          "",
          "---------------"
        ],
        "test/Array/array_conv_src.js||test/Array/array_conv_src.js": [
          "File: test/Array/array_conv_src.js -> test/Array/array_conv_src.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \"use strict\";",
          "3: function func(a, b, c) {",
          "4:     a[0] = 1.2;",
          "5:     b[0] = c;",
          "6:     a[1] = 2.2;",
          "7:     a[0] = 2.3023e-320;",
          "8: }",
          "10: function main() {",
          "11:     var a = [1.1, 2.2];",
          "12:     var b = new Uint32Array(100);",
          "15:     for (var i = 0; i < 0x10000; i++)",
          "16:         func(a, b, i);",
          "18:     func(a, b, {",
          "19:         valueOf: function () {",
          "20:             a[0] = {};",
          "22:             return 0;",
          "23:         }",
          "24:     });",
          "26:     a[0].toString();",
          "27: }",
          "29: main();",
          "31: WScript.Echo('pass');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b75b9e8b95bf077c4787d53e4f8b3e226edb8c7c",
      "candidate_info": {
        "commit_hash": "b75b9e8b95bf077c4787d53e4f8b3e226edb8c7c",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/b75b9e8b95bf077c4787d53e4f8b3e226edb8c7c",
        "files": [
          "lib/Runtime/Base/ScriptContext.cpp",
          "lib/Runtime/Library/JavascriptLibrary.cpp"
        ],
        "message": "[CVE-2017-0136] UAF of ScriptContext in OOM scenario",
        "before_after_code_files": [
          "lib/Runtime/Base/ScriptContext.cpp||lib/Runtime/Base/ScriptContext.cpp",
          "lib/Runtime/Library/JavascriptLibrary.cpp||lib/Runtime/Library/JavascriptLibrary.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/2697"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Runtime/Base/ScriptContext.cpp||lib/Runtime/Base/ScriptContext.cpp": [
          "File: lib/Runtime/Base/ScriptContext.cpp -> lib/Runtime/Base/ScriptContext.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "468:             }",
          "469:         }",
          "471: #if ENABLE_BACKGROUND_PARSING",
          "472:         if (this->backgroundParser != nullptr)",
          "473:         {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "473:         threadContext->UnregisterScriptContext(this);",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptLibrary.cpp||lib/Runtime/Library/JavascriptLibrary.cpp": [
          "File: lib/Runtime/Library/JavascriptLibrary.cpp -> lib/Runtime/Library/JavascriptLibrary.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1054:             scriptContext->ResetWeakReferenceDictionaryList();",
          "1055:             scriptContext->SetIsFinalized();",
          "1057:         }",
          "1058:     }",
          "",
          "[Removed Lines]",
          "1056:             scriptContext->GetThreadContext()->UnregisterScriptContext(scriptContext);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aba05079c1cbb4b09039655a3e4195578f7c5031",
      "candidate_info": {
        "commit_hash": "aba05079c1cbb4b09039655a3e4195578f7c5031",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/aba05079c1cbb4b09039655a3e4195578f7c5031",
        "files": [
          "lib/Runtime/Library/JavascriptArray.cpp"
        ],
        "message": "[CVE-2017-0134 CVE-2017-0137] add conversion checks after calls to IsConcatSpreadable\n\nSigned-off-by: Michael Holman <Michael.Holman@microsoft.com>",
        "before_after_code_files": [
          "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/2697"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp": [
          "File: lib/Runtime/Library/JavascriptArray.cpp -> lib/Runtime/Library/JavascriptArray.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "3149:         {",
          "3150:             Var aItem = args[idxArg];",
          "3153:             {",
          "3154:                 pDestArray->SetItem(idxDest, aItem, PropertyOperation_ThrowIfNotExtensible);",
          "3155:                 idxDest = idxDest + 1;",
          "",
          "[Removed Lines]",
          "3152:             if (scriptContext->GetConfig()->IsES6IsConcatSpreadableEnabled() && !JavascriptOperators::IsConcatSpreadable(aItem))",
          "",
          "[Added Lines]",
          "3152:             bool concatSpreadable = !scriptContext->GetConfig()->IsES6IsConcatSpreadableEnabled() || JavascriptOperators::IsConcatSpreadable(aItem);",
          "3153:             if (!JavascriptNativeIntArray::Is(pDestArray))",
          "3154:             {",
          "3155:                 ConcatArgs<uint>(pDestArray, remoteTypeIds, args, scriptContext, idxArg, idxDest);",
          "3156:                 return pDestArray;",
          "3157:             }",
          "3158:             if(!concatSpreadable)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3213:         {",
          "3214:             Var aItem = args[idxArg];",
          "3217:             {",
          "3219:                 pDestArray->SetItem(idxDest, aItem, PropertyOperation_ThrowIfNotExtensible);",
          "3221:                 idxDest = idxDest + 1;",
          "",
          "[Removed Lines]",
          "3216:             if (scriptContext->GetConfig()->IsES6IsConcatSpreadableEnabled() && !JavascriptOperators::IsConcatSpreadable(aItem))",
          "",
          "[Added Lines]",
          "3222:             bool concatSpreadable = !scriptContext->GetConfig()->IsES6IsConcatSpreadableEnabled() || JavascriptOperators::IsConcatSpreadable(aItem);",
          "3223:             if (!JavascriptNativeFloatArray::Is(pDestArray))",
          "3224:             {",
          "3225:                 ConcatArgs<uint>(pDestArray, remoteTypeIds, args, scriptContext, idxArg, idxDest);",
          "3226:                 return pDestArray;",
          "3227:             }",
          "3228:             if (!concatSpreadable)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "94993f2e342af4f792da7022e4e1e43bd122b91b",
      "candidate_info": {
        "commit_hash": "94993f2e342af4f792da7022e4e1e43bd122b91b",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/94993f2e342af4f792da7022e4e1e43bd122b91b",
        "files": [
          "lib/Backend/GlobOptFields.cpp"
        ],
        "message": "[CVE-2017-0132] fix incorrect assumption in JIT about array nativeness",
        "before_after_code_files": [
          "lib/Backend/GlobOptFields.cpp||lib/Backend/GlobOptFields.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/2697"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Backend/GlobOptFields.cpp||lib/Backend/GlobOptFields.cpp": [
          "File: lib/Backend/GlobOptFields.cpp -> lib/Backend/GlobOptFields.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "3194:             }",
          "3195:             break;",
          "3196:         case Js::TypeIds_Array:",
          "3201:             if (!DoArrayCheckHoist() ||",
          "",
          "[Removed Lines]",
          "3197:         case Js::TypeIds_NativeFloatArray:",
          "3198:         case Js::TypeIds_NativeIntArray:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}