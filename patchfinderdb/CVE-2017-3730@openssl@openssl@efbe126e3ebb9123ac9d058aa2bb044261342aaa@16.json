{
  "cve_id": "CVE-2017-3730",
  "cve_desc": "In OpenSSL 1.1.0 before 1.1.0d, if a malicious server supplies bad parameters for a DHE or ECDHE key exchange then this can result in the client attempting to dereference a NULL pointer leading to a client crash. This could be exploited in a Denial of Service attack.",
  "repo": "openssl/openssl",
  "patch_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
  "patch_info": {
    "commit_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "files": [
      "ssl/statem/statem_clnt.c"
    ],
    "message": "Fix missing NULL checks in CKE processing\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c"
    ]
  },
  "patch_diff": {
    "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
      "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2258:         return 0;",
      "2259:     }",
      "2260:     ckey = ssl_generate_pkey(skey);",
      "2261:     dh_clnt = EVP_PKEY_get0_DH(ckey);",
      "2263:     if (dh_clnt == NULL || ssl_derive(s, ckey, skey) == 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2261:     if (ckey == NULL) {",
      "2262:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_DHE, ERR_R_INTERNAL_ERROR);",
      "2263:         return 0;",
      "2264:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2296:     }",
      "2298:     ckey = ssl_generate_pkey(skey);",
      "2300:     if (ssl_derive(s, ckey, skey) == 0) {",
      "2301:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_EVP_LIB);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2304:     if (ckey == NULL) {",
      "2305:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_INTERNAL_ERROR);",
      "2306:         goto err;",
      "2307:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5be6f71858a66060c7dcb46d0c015a55fc0b569d",
      "candidate_info": {
        "commit_hash": "5be6f71858a66060c7dcb46d0c015a55fc0b569d",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/5be6f71858a66060c7dcb46d0c015a55fc0b569d",
        "files": [
          "Configure",
          "engines/e_padlock.c"
        ],
        "message": "Only build the body of e_padlock when there are lower level routines\n\nengines/e_padlock.c assumes that for all x86 and x86_64 platforms, the\nlower level routines will be present.  However, that's not always\ntrue, for example for solaris-x86-cc, and that leads to build errors.\n\nThe better solution is to have configure detect if the lower level\npadlock routines are being built, and define the macro PADLOCK_ASM if\nthey are, and use that macro in our C code.\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1510)\n(cherry picked from commit 7b176a549ea374fc9b64c3fa7f0812239528b696)",
        "before_after_code_files": [
          "engines/e_padlock.c||engines/e_padlock.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "engines/e_padlock.c||engines/e_padlock.c": [
          "File: engines/e_padlock.c -> engines/e_padlock.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: #  undef COMPILE_HW_PADLOCK",
          "50: static ENGINE *ENGINE_padlock(void);",
          "52: #   endif",
          "53: #  endif",
          "",
          "[Removed Lines]",
          "44: #  if !defined(I386_ONLY) && !defined(OPENSSL_NO_ASM)",
          "45: #   if    defined(__i386__) || defined(__i386) ||    \\",
          "46:         defined(__x86_64__) || defined(__x86_64) || \\",
          "47:         defined(_M_IX86) || defined(_M_AMD64) || defined(_M_X64)",
          "48: #    define COMPILE_HW_PADLOCK",
          "49: #    ifdef OPENSSL_NO_DYNAMIC_ENGINE",
          "51: #    endif",
          "",
          "[Added Lines]",
          "44: #  if !defined(I386_ONLY) && defined(PADLOCK_ASM)",
          "45: #   define COMPILE_HW_PADLOCK",
          "46: #   ifdef OPENSSL_NO_DYNAMIC_ENGINE",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b5c8f42c9b9fce5d1b14866306e7a11e16275942",
      "candidate_info": {
        "commit_hash": "b5c8f42c9b9fce5d1b14866306e7a11e16275942",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/b5c8f42c9b9fce5d1b14866306e7a11e16275942",
        "files": [
          "doc/ssl/SSL_COMP_add_compression_method.pod",
          "include/openssl/ssl.h",
          "ssl/ssl_ciph.c",
          "test/ssltest_old.c",
          "util/libssl.num"
        ],
        "message": "Remove a hack from ssl_test_old\n\nssl_test_old was reaching inside the SSL structure and changing the internal\nBIO values. This is completely unneccessary, and was causing an abort in the\ntest when enabling TLSv1.3.\n\nI also removed the need for ssl_test_old to include ssl_locl.h. This\nrequired the addition of some missing accessors for SSL_COMP name and id\nfields.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit e304d3e20f45243f9e643607edfe4db49c329596)",
        "before_after_code_files": [
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "ssl/ssl_ciph.c||ssl/ssl_ciph.c",
          "test/ssltest_old.c||test/ssltest_old.c",
          "util/libssl.num||util/libssl.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1777: __owur const COMP_METHOD *SSL_get_current_compression(SSL *s);",
          "1778: __owur const COMP_METHOD *SSL_get_current_expansion(SSL *s);",
          "1779: __owur const char *SSL_COMP_get_name(const COMP_METHOD *comp);",
          "1780: STACK_OF(SSL_COMP) *SSL_COMP_get_compression_methods(void);",
          "1781: __owur STACK_OF(SSL_COMP) *SSL_COMP_set0_compression_methods(STACK_OF(SSL_COMP)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1780: __owur const char *SSL_COMP_get0_name(const SSL_COMP *comp);",
          "1781: __owur int SSL_COMP_get_id(const SSL_COMP *comp);",
          "",
          "---------------"
        ],
        "ssl/ssl_ciph.c||ssl/ssl_ciph.c": [
          "File: ssl/ssl_ciph.c -> ssl/ssl_ciph.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1868: #endif",
          "1869: }",
          "1872: int ssl_cipher_get_cert_index(const SSL_CIPHER *c)",
          "1873: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1871: const char *SSL_COMP_get0_name(const SSL_COMP *comp)",
          "1872: {",
          "1873: #ifndef OPENSSL_NO_COMP",
          "1874:     return comp->name;",
          "1875: #else",
          "1876:     return NULL;",
          "1877: #endif",
          "1878: }",
          "1880: int SSL_COMP_get_id(const SSL_COMP *comp)",
          "1881: {",
          "1882: #ifndef OPENSSL_NO_COMP",
          "1883:     return comp->id;",
          "1884: #else",
          "1885:     return -1;",
          "1886: #endif",
          "1887: }",
          "",
          "---------------"
        ],
        "test/ssltest_old.c||test/ssltest_old.c": [
          "File: test/ssltest_old.c -> test/ssltest_old.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "92: # include <openssl/ct.h>",
          "93: #endif",
          "",
          "[Removed Lines]",
          "95: #include \"../ssl/ssl_locl.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1421:         printf(\"Available compression methods:\");",
          "1422:         for (j = 0; j < n; j++) {",
          "1423:             SSL_COMP *c = sk_SSL_COMP_value(ssl_comp_methods, j);",
          "1425:         }",
          "1426:         printf(\"\\n\");",
          "1427:     }",
          "",
          "[Removed Lines]",
          "1424:             printf(\"  %s:%d\", c->name, c->id);",
          "",
          "[Added Lines]",
          "1422:             printf(\"  %s:%d\", SSL_COMP_get0_name(c), SSL_COMP_get_id(c));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2664:     SSL_set_max_send_fragment(c_ssl, max_frag);",
          "2665:     BIO_set_ssl(c_bio, c_ssl, BIO_NOCLOSE);",
          "2667:     SSL_set_accept_state(s_ssl);",
          "2668:     SSL_set_bio(s_ssl, c_to_s, s_to_c);",
          "2669:     SSL_set_max_send_fragment(s_ssl, max_frag);",
          "2670:     BIO_set_ssl(s_bio, s_ssl, BIO_NOCLOSE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2669:     if (!BIO_up_ref(c_to_s)) {",
          "2671:         c_to_s = NULL;",
          "2672:         s_to_c = NULL;",
          "2673:         goto err;",
          "2674:     }",
          "2675:     if (!BIO_up_ref(s_to_c)) {",
          "2677:         s_to_c = NULL;",
          "2678:         goto err;",
          "2679:     }",
          "2685:     c_to_s = NULL;",
          "2686:     s_to_c = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2878:     }",
          "2879:     ret = 0;",
          "2880:  err:",
          "2898:     BIO_free(c_to_s);",
          "2899:     BIO_free(s_to_c);",
          "2900:     BIO_free_all(c_bio);",
          "",
          "[Removed Lines]",
          "2889:     if (s_ssl != NULL) {",
          "2890:         s_ssl->rbio = NULL;",
          "2891:         s_ssl->wbio = NULL;",
          "2892:     }",
          "2893:     if (c_ssl != NULL) {",
          "2894:         c_ssl->rbio = NULL;",
          "2895:         c_ssl->wbio = NULL;",
          "2896:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "util/libssl.num||util/libssl.num": [
          "File: util/libssl.num -> util/libssl.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "403: SSL_SESSION_get0_cipher                 404 1_1_0 EXIST::FUNCTION:",
          "404: SSL_SESSION_get0_id_context             405 1_1_0 EXIST::FUNCTION:",
          "405: SSL_SESSION_set1_id                     406 1_1_0 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "406: SSL_COMP_get_id                         412 1_1_0d EXIST::FUNCTION:",
          "407: SSL_COMP_get0_name                      413 1_1_0d EXIST::FUNCTION:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cc0a813f23136fb1f1aff8bf4cdc831ae3d360d4",
      "candidate_info": {
        "commit_hash": "cc0a813f23136fb1f1aff8bf4cdc831ae3d360d4",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/cc0a813f23136fb1f1aff8bf4cdc831ae3d360d4",
        "files": [
          "crypto/pkcs12/p12_mutl.c"
        ],
        "message": "Fix memory leak in pkcs12 -export\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2676)\n(cherry picked from commit 1b8f19379a521ec11ce37e12316dd3edc0acfb82)",
        "before_after_code_files": [
          "crypto/pkcs12/p12_mutl.c||crypto/pkcs12/p12_mutl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/pkcs12/p12_mutl.c||crypto/pkcs12/p12_mutl.c": [
          "File: crypto/pkcs12/p12_mutl.c -> crypto/pkcs12/p12_mutl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "204: {",
          "205:     X509_ALGOR *macalg;",
          "207:     if ((p12->mac = PKCS12_MAC_DATA_new()) == NULL)",
          "208:         return PKCS12_ERROR;",
          "209:     if (iter > 1) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207:     PKCS12_MAC_DATA_free(p12->mac);",
          "208:     p12->mac = NULL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4e7a0fa104b0eb60a60f2d4cc4d7f8d9852a910c",
      "candidate_info": {
        "commit_hash": "4e7a0fa104b0eb60a60f2d4cc4d7f8d9852a910c",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/4e7a0fa104b0eb60a60f2d4cc4d7f8d9852a910c",
        "files": [
          "test/build.info",
          "test/recipes/80-test_sslcorrupt.t",
          "test/sslcorrupttest.c",
          "test/ssltestlib.c"
        ],
        "message": "test: add TLS application data corruption test.\n\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>",
        "before_after_code_files": [
          "test/build.info||test/build.info",
          "test/recipes/80-test_sslcorrupt.t||test/recipes/80-test_sslcorrupt.t",
          "test/sslcorrupttest.c||test/sslcorrupttest.c",
          "test/ssltestlib.c||test/ssltestlib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/build.info||test/build.info": [
          "File: test/build.info -> test/build.info",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:           packettest asynctest secmemtest srptest memleaktest \\",
          "17:           dtlsv1listentest ct_test threadstest afalgtest d2i_test \\",
          "18:           ssl_test_ctx_test ssl_test x509aux cipherlist_test asynciotest \\",
          "21:   SOURCE[aborttest]=aborttest.c",
          "22:   INCLUDE[aborttest]=../include",
          "",
          "[Removed Lines]",
          "19:           bioprinttest sslapitest dtlstest bio_enc_test",
          "",
          "[Added Lines]",
          "19:           bioprinttest sslapitest dtlstest sslcorrupttest bio_enc_test",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "271:   INCLUDE[dtlstest]=../include .",
          "272:   DEPEND[dtlstest]=../libcrypto ../libssl",
          "274:   SOURCE[bio_enc_test]=bio_enc_test.c",
          "275:   INCLUDE[bio_enc_test]=../include",
          "276:   DEPEND[bio_enc_test]=../libcrypto",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "274:   SOURCE[sslcorrupttest]=sslcorrupttest.c ssltestlib.c testutil.c",
          "275:   INCLUDE[sslcorrupttest]=../include .",
          "276:   DEPEND[sslcorrupttest]=../libcrypto ../libssl",
          "",
          "---------------"
        ],
        "test/recipes/80-test_sslcorrupt.t||test/recipes/80-test_sslcorrupt.t": [
          "File: test/recipes/80-test_sslcorrupt.t -> test/recipes/80-test_sslcorrupt.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #! /usr/bin/env perl",
          "2: # Copyright 2016 The OpenSSL Project Authors. All Rights Reserved.",
          "3: #",
          "4: # Licensed under the OpenSSL license (the \"License\").  You may not use",
          "5: # this file except in compliance with the License.  You can obtain a copy",
          "6: # in the file LICENSE in the source distribution or at",
          "7: # https://www.openssl.org/source/license.html",
          "9: use OpenSSL::Test qw/:DEFAULT srctop_file/;",
          "11: setup(\"test_sslcorrupt\");",
          "13: plan tests => 1;",
          "15: ok(run(test([\"sslcorrupttest\", srctop_file(\"apps\", \"server.pem\"),",
          "16:              srctop_file(\"apps\", \"server.pem\")])), \"running sslcorrupttest\");",
          "",
          "---------------"
        ],
        "test/sslcorrupttest.c||test/sslcorrupttest.c": [
          "File: test/sslcorrupttest.c -> test/sslcorrupttest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: #include \"ssltestlib.h\"",
          "11: #include \"testutil.h\"",
          "13: static void copy_flags(BIO *bio)",
          "14: {",
          "15:     int flags;",
          "16:     BIO *next = BIO_next(bio);",
          "18:     flags = BIO_test_flags(next, BIO_FLAGS_SHOULD_RETRY | BIO_FLAGS_RWS);",
          "19:     BIO_clear_flags(bio, BIO_FLAGS_SHOULD_RETRY | BIO_FLAGS_RWS);",
          "20:     BIO_set_flags(bio, flags);",
          "21: }",
          "23: static int tls_corrupt_read(BIO *bio, char *out, int outl)",
          "24: {",
          "25:     int ret;",
          "26:     BIO *next = BIO_next(bio);",
          "28:     ret = BIO_read(next, out, outl);",
          "29:     copy_flags(bio);",
          "31:     return ret;",
          "32: }",
          "34: static int tls_corrupt_write(BIO *bio, const char *in, int inl)",
          "35: {",
          "36:     int ret;",
          "37:     BIO *next = BIO_next(bio);",
          "38:     char *copy;",
          "40:     if (in[0] == SSL3_RT_APPLICATION_DATA) {",
          "41:         copy = BUF_memdup(in, inl);",
          "42:         TEST_check(copy != NULL);",
          "44:         copy[inl-1] ^= 1;",
          "45:         ret = BIO_write(next, copy, inl);",
          "46:         OPENSSL_free(copy);",
          "47:     } else {",
          "48:         ret = BIO_write(next, in, inl);",
          "49:     }",
          "50:     copy_flags(bio);",
          "52:     return ret;",
          "53: }",
          "55: static long tls_corrupt_ctrl(BIO *bio, int cmd, long num, void *ptr)",
          "56: {",
          "57:     long ret;",
          "58:     BIO *next = BIO_next(bio);",
          "60:     if (next == NULL)",
          "61:         return 0;",
          "63:     switch (cmd) {",
          "64:     case BIO_CTRL_DUP:",
          "65:         ret = 0L;",
          "66:         break;",
          "67:     default:",
          "68:         ret = BIO_ctrl(next, cmd, num, ptr);",
          "69:         break;",
          "70:     }",
          "71:     return ret;",
          "72: }",
          "74: static int tls_corrupt_gets(BIO *bio, char *buf, int size)",
          "75: {",
          "77:     return -1;",
          "78: }",
          "80: static int tls_corrupt_puts(BIO *bio, const char *str)",
          "81: {",
          "83:     return -1;",
          "84: }",
          "86: static int tls_corrupt_new(BIO *bio)",
          "87: {",
          "88:     BIO_set_init(bio, 1);",
          "90:     return 1;",
          "91: }",
          "93: static int tls_corrupt_free(BIO *bio)",
          "94: {",
          "95:     BIO_set_init(bio, 0);",
          "97:     return 1;",
          "98: }",
          "100: #define BIO_TYPE_CUSTOM_FILTER  (0x80 | BIO_TYPE_FILTER)",
          "102: static BIO_METHOD *method_tls_corrupt = NULL;",
          "105: static const BIO_METHOD *bio_f_tls_corrupt_filter(void)",
          "106: {",
          "107:     if (method_tls_corrupt == NULL) {",
          "108:         method_tls_corrupt = BIO_meth_new(BIO_TYPE_CUSTOM_FILTER,",
          "109:                                           \"TLS corrupt filter\");",
          "110:         if (   method_tls_corrupt == NULL",
          "111:             || !BIO_meth_set_write(method_tls_corrupt, tls_corrupt_write)",
          "112:             || !BIO_meth_set_read(method_tls_corrupt, tls_corrupt_read)",
          "113:             || !BIO_meth_set_puts(method_tls_corrupt, tls_corrupt_puts)",
          "114:             || !BIO_meth_set_gets(method_tls_corrupt, tls_corrupt_gets)",
          "115:             || !BIO_meth_set_ctrl(method_tls_corrupt, tls_corrupt_ctrl)",
          "116:             || !BIO_meth_set_create(method_tls_corrupt, tls_corrupt_new)",
          "117:             || !BIO_meth_set_destroy(method_tls_corrupt, tls_corrupt_free))",
          "118:             return NULL;",
          "119:     }",
          "120:     return method_tls_corrupt;",
          "121: }",
          "123: static void bio_f_tls_corrupt_filter_free(void)",
          "124: {",
          "125:     BIO_meth_free(method_tls_corrupt);",
          "126: }",
          "135: static const char **cipher_list = NULL;",
          "137: static int setup_cipher_list()",
          "138: {",
          "139:     SSL_CTX *ctx = NULL;",
          "140:     SSL *ssl = NULL;",
          "141:     static STACK_OF(SSL_CIPHER) *sk_ciphers = NULL;",
          "142:     int i, numciphers;",
          "144:     ctx = SSL_CTX_new(TLS_server_method());",
          "145:     TEST_check(ctx != NULL);",
          "146:     ssl = SSL_new(ctx);",
          "147:     TEST_check(ssl != NULL);",
          "148:     sk_ciphers = SSL_get1_supported_ciphers(ssl);",
          "149:     TEST_check(sk_ciphers != NULL);",
          "156:     cipher_list = OPENSSL_malloc(sk_SSL_CIPHER_num(sk_ciphers) *",
          "157:                                  sizeof(cipher_list[0]));",
          "158:     TEST_check(cipher_list != NULL);",
          "160:     for (numciphers = 0, i = 0; i < sk_SSL_CIPHER_num(sk_ciphers); i++) {",
          "161:         const SSL_CIPHER *cipher = sk_SSL_CIPHER_value(sk_ciphers, i);",
          "163:         if (SSL_CIPHER_get_auth_nid(cipher) == NID_auth_rsa)",
          "164:             cipher_list[numciphers++] = SSL_CIPHER_get_name(cipher);",
          "165:     }",
          "166:     TEST_check(numciphers != 0);",
          "168:     sk_SSL_CIPHER_free(sk_ciphers);",
          "169:     SSL_free(ssl);",
          "170:     SSL_CTX_free(ctx);",
          "172:     return numciphers;",
          "173: }",
          "175: static char *cert = NULL;",
          "176: static char *privkey = NULL;",
          "178: static int test_ssl_corrupt(int testidx)",
          "179: {",
          "180:     SSL_CTX *sctx = NULL, *cctx = NULL;",
          "181:     SSL *server = NULL, *client = NULL;",
          "182:     BIO *c_to_s_fbio;",
          "183:     int testresult = 0;",
          "184:     static unsigned char junk[16000] = { 0 };",
          "186:     printf(\"Starting Test %d, %s\\n\", testidx, cipher_list[testidx]);",
          "188:     if (!create_ssl_ctx_pair(TLS_server_method(), TLS_client_method(), &sctx,",
          "189:                              &cctx, cert, privkey)) {",
          "190:         printf(\"Unable to create SSL_CTX pair\\n\");",
          "191:         return 0;",
          "192:     }",
          "194:     if (!SSL_CTX_set_cipher_list(cctx, cipher_list[testidx])) {",
          "195:         printf(\"Failed setting cipher list\\n\");",
          "196:         goto end;",
          "197:     }",
          "199:     c_to_s_fbio = BIO_new(bio_f_tls_corrupt_filter());",
          "200:     if (c_to_s_fbio == NULL) {",
          "201:         printf(\"Failed to create filter BIO\\n\");",
          "202:         goto end;",
          "203:     }",
          "206:     if (!create_ssl_objects(sctx, cctx, &server, &client, NULL,",
          "207:                             c_to_s_fbio)) {",
          "208:         printf(\"Unable to create SSL objects\\n\");",
          "209:         ERR_print_errors_fp(stdout);",
          "210:         goto end;",
          "211:     }",
          "213:     if (!create_ssl_connection(server, client)) {",
          "214:         printf(\"Unable to create SSL connection\\n\");",
          "215:         ERR_print_errors_fp(stdout);",
          "216:         goto end;",
          "217:     }",
          "219:     if (SSL_write(client, junk, sizeof(junk)) < 0) {",
          "220:         printf(\"Unable to SSL_write\\n\");",
          "221:         ERR_print_errors_fp(stdout);",
          "222:         goto end;",
          "223:     }",
          "225:     if (SSL_read(server, junk, sizeof(junk)) >= 0) {",
          "226:         printf(\"Read should have failed with \\\"bad record mac\\\"\\n\");",
          "227:         goto end;",
          "228:     }",
          "230:     if (ERR_GET_REASON(ERR_peek_error()) !=",
          "231:         SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC) {",
          "232:         ERR_print_errors_fp(stdout);",
          "233:         goto end;",
          "234:     }",
          "236:     testresult = 1;",
          "237:  end:",
          "238:     SSL_free(server);",
          "239:     SSL_free(client);",
          "240:     SSL_CTX_free(sctx);",
          "241:     SSL_CTX_free(cctx);",
          "243:     return testresult;",
          "244: }",
          "246: int main(int argc, char *argv[])",
          "247: {",
          "248:     BIO *err = NULL;",
          "249:     int testresult = 1;",
          "251:     if (argc != 3) {",
          "252:         printf(\"Invalid argument count\\n\");",
          "253:         return 1;",
          "254:     }",
          "256:     cert = argv[1];",
          "257:     privkey = argv[2];",
          "259:     err = BIO_new_fp(stderr, BIO_NOCLOSE | BIO_FP_TEXT);",
          "261:     CRYPTO_set_mem_debug(1);",
          "262:     CRYPTO_mem_ctrl(CRYPTO_MEM_CHECK_ON);",
          "264:     ADD_ALL_TESTS(test_ssl_corrupt, setup_cipher_list());",
          "266:     testresult = run_tests(argv[0]);",
          "268:     bio_f_tls_corrupt_filter_free();",
          "270:     OPENSSL_free(cipher_list);",
          "272: #ifndef OPENSSL_NO_CRYPTO_MDEBUG",
          "273:     if (CRYPTO_mem_leaks(err) <= 0)",
          "274:         testresult = 1;",
          "275: #endif",
          "276:     BIO_free(err);",
          "278:     if (!testresult)",
          "279:         printf(\"PASS\\n\");",
          "281:     return testresult;",
          "282: }",
          "",
          "---------------"
        ],
        "test/ssltestlib.c||test/ssltestlib.c": [
          "File: test/ssltestlib.c -> test/ssltestlib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "550:         goto err;",
          "551:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "553: #ifndef OPENSSL_NO_DH",
          "554:     SSL_CTX_set_dh_auto(serverctx, 1);",
          "555: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ce7d2e152e721643bd93e331d627a4576521d058",
      "candidate_info": {
        "commit_hash": "ce7d2e152e721643bd93e331d627a4576521d058",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/ce7d2e152e721643bd93e331d627a4576521d058",
        "files": [
          "crypto/bn/bn_lcl.h"
        ],
        "message": "bn/bn_lcl.h: improve interoperability with clang and Android NDK.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit cc2cb7bf63c62aaebd387f546a2fd673f367d9a8)",
        "before_after_code_files": [
          "crypto/bn/bn_lcl.h||crypto/bn/bn_lcl.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/bn/bn_lcl.h||crypto/bn/bn_lcl.h": [
          "File: crypto/bn/bn_lcl.h -> crypto/bn/bn_lcl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "428: #   endif",
          "429: #  elif defined(__mips) && (defined(SIXTY_FOUR_BIT) || defined(SIXTY_FOUR_BIT_LONG))",
          "430: #   if defined(__GNUC__) && __GNUC__>=2",
          "433: #     define BN_UMULT_HIGH(a,b)          (((__uint128_t)(a)*(b))>>64)",
          "434: #     define BN_UMULT_LOHI(low,high,a,b) ({     \\",
          "435:         __uint128_t ret=(__uint128_t)(a)*(b);   \\",
          "",
          "[Removed Lines]",
          "431: #    if __GNUC__>4 || (__GNUC__>=4 && __GNUC_MINOR__>=4)",
          "",
          "[Added Lines]",
          "431: #    if defined(__SIZEOF_INT128__) && __SIZEOF_INT128__==16",
          "",
          "---------------"
        ]
      }
    }
  ]
}