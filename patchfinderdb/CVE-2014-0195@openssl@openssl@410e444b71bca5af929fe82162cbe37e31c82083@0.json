{
  "cve_id": "CVE-2014-0195",
  "cve_desc": "The dtls1_reassemble_fragment function in d1_both.c in OpenSSL before 0.9.8za, 1.0.0 before 1.0.0m, and 1.0.1 before 1.0.1h does not properly validate fragment lengths in DTLS ClientHello messages, which allows remote attackers to execute arbitrary code or cause a denial of service (buffer overflow and application crash) via a long non-initial fragment.",
  "repo": "openssl/openssl",
  "patch_hash": "410e444b71bca5af929fe82162cbe37e31c82083",
  "patch_info": {
    "commit_hash": "410e444b71bca5af929fe82162cbe37e31c82083",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/410e444b71bca5af929fe82162cbe37e31c82083",
    "files": [
      "ssl/d1_both.c"
    ],
    "message": "Fix for CVE-2014-0195\n\nA buffer overrun attack can be triggered by sending invalid DTLS fragments\nto an OpenSSL DTLS client or server. This is potentially exploitable to\nrun arbitrary code on a vulnerable client or server.\n\nFixed by adding consistency check for DTLS fragments.\n\nThanks to J\u00fcri Aedla for reporting this issue.\n(cherry picked from commit 1632ef744872edc2aa2a53d487d3e79c965a4ad3)",
    "before_after_code_files": [
      "ssl/d1_both.c||ssl/d1_both.c"
    ]
  },
  "patch_diff": {
    "ssl/d1_both.c||ssl/d1_both.c": [
      "File: ssl/d1_both.c -> ssl/d1_both.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "632:   frag->msg_header.frag_off = 0;",
      "633:   }",
      "634:  else",
      "635:   frag = (hm_fragment*) item->data;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "635:   {",
      "637:   if (frag->msg_header.msg_len != msg_hdr->msg_len)",
      "638:    {",
      "639:    item = NULL;",
      "640:    frag = NULL;",
      "641:    goto err;",
      "642:    }",
      "643:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "eb6508d50c9a314b88ac155bd378cbd79a117c92",
      "candidate_info": {
        "commit_hash": "eb6508d50c9a314b88ac155bd378cbd79a117c92",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/eb6508d50c9a314b88ac155bd378cbd79a117c92",
        "files": [
          "ssl/d1_both.c"
        ],
        "message": "Fix for CVE-2014-0195\n\nA buffer overrun attack can be triggered by sending invalid DTLS fragments\nto an OpenSSL DTLS client or server. This is potentially exploitable to\nrun arbitrary code on a vulnerable client or server.\n\nFixed by adding consistency check for DTLS fragments.\n\nThanks to J\u00fcri Aedla for reporting this issue.\n(cherry picked from commit 1632ef744872edc2aa2a53d487d3e79c965a4ad3)",
        "before_after_code_files": [
          "ssl/d1_both.c||ssl/d1_both.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ],
          "candidate": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/d1_both.c||ssl/d1_both.c": [
          "File: ssl/d1_both.c -> ssl/d1_both.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "632:   frag->msg_header.frag_off = 0;",
          "633:   }",
          "634:  else",
          "635:   frag = (hm_fragment*) item->data;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "635:   {",
          "637:   if (frag->msg_header.msg_len != msg_hdr->msg_len)",
          "638:    {",
          "639:    item = NULL;",
          "640:    frag = NULL;",
          "641:    goto err;",
          "642:    }",
          "643:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1632ef744872edc2aa2a53d487d3e79c965a4ad3",
      "candidate_info": {
        "commit_hash": "1632ef744872edc2aa2a53d487d3e79c965a4ad3",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/1632ef744872edc2aa2a53d487d3e79c965a4ad3",
        "files": [
          "ssl/d1_both.c"
        ],
        "message": "Fix for CVE-2014-0195\n\nA buffer overrun attack can be triggered by sending invalid DTLS fragments\nto an OpenSSL DTLS client or server. This is potentially exploitable to\nrun arbitrary code on a vulnerable client or server.\n\nFixed by adding consistency check for DTLS fragments.\n\nThanks to J\u00fcri Aedla for reporting this issue.",
        "before_after_code_files": [
          "ssl/d1_both.c||ssl/d1_both.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ],
          "candidate": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/d1_both.c||ssl/d1_both.c": [
          "File: ssl/d1_both.c -> ssl/d1_both.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "627:   frag->msg_header.frag_off = 0;",
          "628:   }",
          "629:  else",
          "630:   frag = (hm_fragment*) item->data;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "630:   {",
          "632:   if (frag->msg_header.msg_len != msg_hdr->msg_len)",
          "633:    {",
          "634:    item = NULL;",
          "635:    frag = NULL;",
          "636:    goto err;",
          "637:    }",
          "638:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1250f12613b61758675848f6600ebd914ccd7636",
      "candidate_info": {
        "commit_hash": "1250f12613b61758675848f6600ebd914ccd7636",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/1250f12613b61758675848f6600ebd914ccd7636",
        "files": [
          "ssl/d1_both.c"
        ],
        "message": "Fix DTLS handshake message size checks.\n\nIn |dtls1_reassemble_fragment|, the value of\n|msg_hdr->frag_off+frag_len| was being checked against the maximum\nhandshake message size, but then |msg_len| bytes were allocated for the\nfragment buffer. This means that so long as the fragment was within the\nallowed size, the pending handshake message could consume 16MB + 2MB\n(for the reassembly bitmap). Approx 10 outstanding handshake messages\nare allowed, meaning that an attacker could consume ~180MB per DTLS\nconnection.\n\nIn the non-fragmented path (in |dtls1_process_out_of_seq_message|), no\ncheck was applied.\n\nFixes CVE-2014-3506\n\nWholly based on patch by Adam Langley with one minor amendment.\n\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>",
        "before_after_code_files": [
          "ssl/d1_both.c||ssl/d1_both.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ],
          "candidate": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/d1_both.c||ssl/d1_both.c": [
          "File: ssl/d1_both.c -> ssl/d1_both.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "592:   return 0;",
          "593:  }",
          "596: static int",
          "597: dtls1_reassemble_fragment(SSL *s, struct hm_header_st* msg_hdr, int *ok)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "598: static unsigned long dtls1_max_handshake_message_len(const SSL *s)",
          "599:  {",
          "600:  unsigned long max_len = DTLS1_HM_HEADER_LENGTH + SSL3_RT_MAX_ENCRYPTED_LENGTH;",
          "601:  if (max_len < (unsigned long)s->max_cert_list)",
          "602:   return s->max_cert_list;",
          "603:  return max_len;",
          "604:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "600:  pitem *item = NULL;",
          "601:  int i = -1, is_complete;",
          "602:  unsigned char seq64be[8];",
          "617:   goto err;",
          "",
          "[Removed Lines]",
          "603:  unsigned long frag_len = msg_hdr->frag_len, max_len;",
          "605:  if ((msg_hdr->frag_off+frag_len) > msg_hdr->msg_len)",
          "606:   goto err;",
          "611:  if (DTLS1_HM_HEADER_LENGTH + SSL3_RT_MAX_ENCRYPTED_LENGTH < s->max_cert_list)",
          "612:   max_len = s->max_cert_list;",
          "613:  else",
          "614:   max_len = DTLS1_HM_HEADER_LENGTH + SSL3_RT_MAX_ENCRYPTED_LENGTH;",
          "616:  if ((msg_hdr->frag_off+frag_len) > max_len)",
          "",
          "[Added Lines]",
          "613:  unsigned long frag_len = msg_hdr->frag_len;",
          "615:  if ((msg_hdr->frag_off+frag_len) > msg_hdr->msg_len ||",
          "616:      msg_hdr->msg_len > dtls1_max_handshake_message_len(s))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "754:   if (frag_len && frag_len < msg_hdr->msg_len)",
          "755:    return dtls1_reassemble_fragment(s, msg_hdr, ok);",
          "757:   frag = dtls1_hm_fragment_new(frag_len, 0);",
          "758:   if ( frag == NULL)",
          "759:    goto err;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "757:   if (frag_len > dtls1_max_handshake_message_len(s))",
          "758:    goto err;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d0a4b7d1a2948fce38515b8d862f43e7ba0ebf74",
      "candidate_info": {
        "commit_hash": "d0a4b7d1a2948fce38515b8d862f43e7ba0ebf74",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/d0a4b7d1a2948fce38515b8d862f43e7ba0ebf74",
        "files": [
          "ssl/d1_both.c"
        ],
        "message": "Fix memory leak from zero-length DTLS fragments.\n\nThe |pqueue_insert| function can fail if one attempts to insert a\nduplicate sequence number. When handling a fragment of an out of\nsequence message, |dtls1_process_out_of_seq_message| would not call\n|dtls1_reassemble_fragment| if the fragment's length was zero. It would\nthen allocate a fresh fragment and attempt to insert it, but ignore the\nreturn value, leaking the fragment.\n\nThis allows an attacker to exhaust the memory of a DTLS peer.\n\nFixes CVE-2014-3507\n\nReviewed-by: Matt Caswell <matt@openssl.org>\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>",
        "before_after_code_files": [
          "ssl/d1_both.c||ssl/d1_both.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ],
          "candidate": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/d1_both.c||ssl/d1_both.c": [
          "File: ssl/d1_both.c -> ssl/d1_both.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "616:      msg_hdr->msg_len > dtls1_max_handshake_message_len(s))",
          "617:   goto err;",
          "620:  memset(seq64be,0,sizeof(seq64be));",
          "621:  seq64be[6] = (unsigned char) (msg_hdr->seq>>8);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "619:  if (frag_len == 0)",
          "620:   return DTLS1_HM_FRAGMENT_RETRY;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "693:    goto err;",
          "694:    }",
          "697:   }",
          "699:  return DTLS1_HM_FRAGMENT_RETRY;",
          "",
          "[Removed Lines]",
          "696:   pqueue_insert(s->d1->buffered_messages, item);",
          "",
          "[Added Lines]",
          "699:   item = pqueue_insert(s->d1->buffered_messages, item);",
          "704:   OPENSSL_assert(item != NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "751:   }",
          "752:  else",
          "753:   {",
          "755:    return dtls1_reassemble_fragment(s, msg_hdr, ok);",
          "757:   if (frag_len > dtls1_max_handshake_message_len(s))",
          "",
          "[Removed Lines]",
          "754:   if (frag_len && frag_len < msg_hdr->msg_len)",
          "",
          "[Added Lines]",
          "762:   if (frag_len < msg_hdr->msg_len)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "780:   if ( item == NULL)",
          "781:    goto err;",
          "784:   }",
          "786:  return DTLS1_HM_FRAGMENT_RETRY;",
          "",
          "[Removed Lines]",
          "783:   pqueue_insert(s->d1->buffered_messages, item);",
          "",
          "[Added Lines]",
          "791:   item = pqueue_insert(s->d1->buffered_messages, item);",
          "799:   OPENSSL_assert(item != NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "11e7982a7cc6cbbcbb13046ceed37639c26a0bc1",
      "candidate_info": {
        "commit_hash": "11e7982a7cc6cbbcbb13046ceed37639c26a0bc1",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/11e7982a7cc6cbbcbb13046ceed37639c26a0bc1",
        "files": [
          "ssl/d1_both.c"
        ],
        "message": "Added comment for the frag->reassembly == NULL case as per feedback from Emilia\n\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>",
        "before_after_code_files": [
          "ssl/d1_both.c||ssl/d1_both.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ],
          "candidate": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/d1_both.c||ssl/d1_both.c": [
          "File: ssl/d1_both.c -> ssl/d1_both.c"
        ]
      }
    }
  ]
}