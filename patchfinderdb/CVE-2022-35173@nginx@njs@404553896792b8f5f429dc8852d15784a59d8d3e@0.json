{
  "cve_id": "CVE-2022-35173",
  "cve_desc": "An issue was discovered in Nginx NJS v0.7.5. The JUMP offset for a break instruction was not set to a correct offset during code generation, leading to a segmentation violation.",
  "repo": "nginx/njs",
  "patch_hash": "404553896792b8f5f429dc8852d15784a59d8d3e",
  "patch_info": {
    "commit_hash": "404553896792b8f5f429dc8852d15784a59d8d3e",
    "repo": "nginx/njs",
    "commit_url": "https://github.com/nginx/njs/commit/404553896792b8f5f429dc8852d15784a59d8d3e",
    "files": [
      "src/njs_generator.c",
      "src/test/njs_unit_test.c"
    ],
    "message": "Fixed break instruction in a try-catch block.\n\nPreviously, JUMP offset for a break instruction inside a try-catch\nblock was not set to a correct offset during code generation\nwhen a return instruction was present in inner try-catch block.\n\nThe fix is to update the JUMP offset appropriately.\n\nThis closes #553 issue on Github.",
    "before_after_code_files": [
      "src/njs_generator.c||src/njs_generator.c",
      "src/test/njs_unit_test.c||src/test/njs_unit_test.c"
    ]
  },
  "patch_diff": {
    "src/njs_generator.c||src/njs_generator.c": [
      "File: src/njs_generator.c -> src/njs_generator.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4503:                 if (njs_slow_path(patch == NULL)) {",
      "4504:                     return NJS_ERROR;",
      "4505:                 }",
      "4506:             }",
      "4507:         }",
      "4508:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4512:             } else {",
      "4519:                 block = njs_generate_find_block(vm, generator->block,",
      "4520:                                                 NJS_GENERATOR_ALL,",
      "4521:                                                 &no_label);",
      "4523:                 if (block != NULL) {",
      "4524:                     patch = njs_generate_make_exit_patch(vm, block, &no_label,",
      "4525:                                 njs_code_offset(generator, finally)",
      "4526:                                 + offsetof(njs_vmcode_finally_t, break_offset));",
      "4527:                     if (njs_slow_path(patch == NULL)) {",
      "4528:                         return NJS_ERROR;",
      "4529:                     }",
      "4530:                 }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4671:         block = njs_generate_find_block(vm, generator->block,",
      "4674:         if (block != NULL) {",
      "4675:             patch = njs_generate_make_exit_patch(vm, block, dest_label,",
      "4676:                             njs_code_offset(generator, finally)",
      "",
      "[Removed Lines]",
      "4672:                                         NJS_GENERATOR_ALL",
      "4673:                                         | NJS_GENERATOR_TRY, dest_label);",
      "",
      "[Added Lines]",
      "4697:                                         NJS_GENERATOR_ALL, dest_label);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "4678:             if (njs_slow_path(patch == NULL)) {",
      "4679:                 return NJS_ERROR;",
      "4680:             }",
      "4681:         }",
      "4682:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4706:         } else {",
      "4708:             block = njs_generate_find_block(vm, generator->block,",
      "4709:                                             NJS_GENERATOR_ALL, &no_label);",
      "4710:             if (block != NULL) {",
      "4711:                 patch = njs_generate_make_exit_patch(vm, block, &no_label,",
      "4712:                                 njs_code_offset(generator, finally)",
      "4713:                                 + offsetof(njs_vmcode_finally_t, break_offset));",
      "4714:                 if (njs_slow_path(patch == NULL)) {",
      "4715:                     return NJS_ERROR;",
      "4716:                 }",
      "4717:             }",
      "",
      "---------------"
    ],
    "src/test/njs_unit_test.c||src/test/njs_unit_test.c": [
      "File: src/test/njs_unit_test.c -> src/test/njs_unit_test.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3411:       njs_str(\"a,2\") },",
      "3413:     { njs_str(\"function f(n) { \"",
      "3426:       njs_str(\"[[1,1,0],[1,1,0],[1,1,1]]\") },",
      "3430:     { njs_str(\"function f() { Object.prototype.toString = 1; };\"",
      "",
      "[Removed Lines]",
      "3414:                  \"  var r1 = 0, r2 = 0, r3 = 0;\"",
      "3415:                  \"  a:{ try { try { \"",
      "3416:                  \"              if (n == 0) { break a; } \"",
      "3417:                  \"              if (n == 1) { throw 'a'; } \"",
      "3418:                  \"            } \"",
      "3419:                  \"            catch (e) { break a; } finally { r1++; } } \"",
      "3420:                  \"      catch (e) {} \"",
      "3421:                  \"      finally { r2++; } \"",
      "3422:                  \"      r3++;  \"",
      "3423:                  \"  }; \"",
      "3424:                  \"return [r1, r2, r3]\"",
      "3425:                  \"}; njs.dump([f(0), f(1), f(3)])\"),",
      "",
      "[Added Lines]",
      "3414:               \"  var r1 = 0, r2 = 0, r3 = 0;\"",
      "3415:               \"  a:{ try { try { \"",
      "3416:               \"              if (n == 0) { break a; } \"",
      "3417:               \"              if (n == 1) { throw 'a'; } \"",
      "3418:               \"            } \"",
      "3419:               \"            catch (e) { break a; } finally { r1++; } } \"",
      "3420:               \"      catch (e) {} \"",
      "3421:               \"      finally { r2++; } \"",
      "3422:               \"      r3++;  \"",
      "3423:               \"  }; \"",
      "3424:               \"return [r1, r2, r3]\"",
      "3425:               \"}; njs.dump([f(0), f(1), f(3)])\"),",
      "3429:     { njs_str(\"function f(n) {\"",
      "3430:               \"    while (1)\"",
      "3431:               \"           try {\"",
      "3432:               \"              if (n == 0) { break; }\"",
      "3433:               \"              if (n == 1) { throw 'a'; }\"",
      "3434:               \"\"",
      "3435:               \"              try { return 42; }\"",
      "3436:               \"              catch (a) {}\"",
      "3437:               \"\"",
      "3438:               \"            } catch (b) { return b; }\"",
      "3439:               \"};\"",
      "3440:               \"njs.dump([f(0), f(1), f(2)])\"),",
      "3441:       njs_str(\"[undefined,'a',42]\") },",
      "3443:     { njs_str(\"function f(n, r) {\"",
      "3444:               \"    while (1)\"",
      "3445:               \"           try {\"",
      "3446:               \"              if (n == 0) { break; }\"",
      "3447:               \"              if (n == 1) { throw 'a'; }\"",
      "3448:               \"\"",
      "3449:               \"              try { return 42; }\"",
      "3450:               \"              catch (a) {}\"",
      "3451:               \"              finally { r.push('in');}\"",
      "3452:               \"\"",
      "3453:               \"            } catch (b) { return b; }\"",
      "3454:               \"            finally { r.push('out'); }\"",
      "3455:               \"};\"",
      "3456:               \"function g(n) { var r = []; return [f(n, r), r]}\"",
      "3457:               \"njs.dump([g(0), g(1), g(2)])\"),",
      "3458:       njs_str(\"[[undefined,['out']],['a',['out']],[42,['in','out']]]\") },",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3e7d070acc6b7c3d17862048ad754a9f16a1738a",
      "candidate_info": {
        "commit_hash": "3e7d070acc6b7c3d17862048ad754a9f16a1738a",
        "repo": "nginx/njs",
        "commit_url": "https://github.com/nginx/njs/commit/3e7d070acc6b7c3d17862048ad754a9f16a1738a",
        "files": [
          "src/njs_generator.c",
          "src/njs_generator.h",
          "src/test/njs_unit_test.c"
        ],
        "message": "Removed recursion from code generator.",
        "before_after_code_files": [
          "src/njs_generator.c||src/njs_generator.c",
          "src/njs_generator.h||src/njs_generator.h",
          "src/test/njs_unit_test.c||src/test/njs_unit_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/njs_generator.c||src/njs_generator.c",
            "src/test/njs_unit_test.c||src/test/njs_unit_test.c"
          ],
          "candidate": [
            "src/njs_generator.c||src/njs_generator.c",
            "src/test/njs_unit_test.c||src/test/njs_unit_test.c"
          ]
        }
      },
      "candidate_diff": {
        "src/njs_generator.c||src/njs_generator.c": [
          "File: src/njs_generator.c -> src/njs_generator.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: typedef struct njs_generator_patch_s   njs_generator_patch_t;",
          "15: struct njs_generator_patch_s {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: typedef enum {",
          "16:     NJS_GENERATOR_LOOP = 1,",
          "17:     NJS_GENERATOR_SWITCH = 2,",
          "18:     NJS_GENERATOR_BLOCK = 4,",
          "19:     NJS_GENERATOR_TRY = 8,",
          "20: #define NJS_GENERATOR_ALL          (NJS_GENERATOR_LOOP | NJS_GENERATOR_SWITCH)",
          "21: } njs_generator_block_type_t;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26: };",
          "38: struct njs_generator_block_s {",
          "40:     njs_str_t                       label;",
          "",
          "[Removed Lines]",
          "29: typedef enum {",
          "30:     NJS_GENERATOR_LOOP = 1,",
          "31:     NJS_GENERATOR_SWITCH = 2,",
          "32:     NJS_GENERATOR_BLOCK = 4,",
          "33:     NJS_GENERATOR_TRY = 8,",
          "34: #define NJS_GENERATOR_ALL          (NJS_GENERATOR_LOOP | NJS_GENERATOR_SWITCH)",
          "35: } njs_generator_block_type_t;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54: };",
          "59: static u_char *njs_generate_reserve(njs_vm_t *vm, njs_generator_t *generator,",
          "60:     size_t size);",
          "61: static njs_int_t njs_generate_code_map(njs_vm_t *vm, njs_generator_t *generator,",
          "62:     njs_parser_node_t *node, u_char *code);",
          "63: static njs_int_t njs_generate_name(njs_vm_t *vm, njs_generator_t *generator,",
          "64:     njs_parser_node_t *node);",
          "65: static njs_int_t njs_generate_variable(njs_vm_t *vm, njs_generator_t *generator,",
          "",
          "[Removed Lines]",
          "57: static njs_int_t njs_generator(njs_vm_t *vm, njs_generator_t *generator,",
          "58:     njs_parser_node_t *node);",
          "",
          "[Added Lines]",
          "57: typedef struct {",
          "58:     njs_generator_state_func_t  state;",
          "59:     njs_queue_link_t            link;",
          "60:     njs_parser_node_t           *node;",
          "61:     void                        *context;",
          "62: } njs_generator_stack_entry_t;",
          "65: typedef struct {",
          "66:     njs_generator_patch_t       *patch;",
          "67:     njs_generator_patch_t       **last;",
          "68:     njs_vmcode_jump_t           *jump;",
          "69:     njs_jump_off_t              jump_offset;",
          "70:     njs_index_t                 index;",
          "71: } njs_generator_switch_ctx_t;",
          "74: typedef struct {",
          "75:     njs_jump_off_t              jump_offset;",
          "76:     njs_jump_off_t              loop_offset;",
          "77:     njs_vmcode_jump_t           *jump;",
          "78:     njs_variable_t              *var;",
          "79:     njs_index_t                 index;",
          "80: } njs_generator_loop_ctx_t;",
          "83: typedef struct {",
          "84:     njs_index_t                 exception_index;",
          "85:     njs_jump_off_t              try_offset;",
          "86:     njs_jump_off_t              catch_offset;",
          "87:     njs_generator_block_t       *try_block;",
          "88:     njs_generator_block_t       *catch_block;",
          "89:     njs_str_t                   try_cont_label;",
          "90:     njs_str_t                   try_exit_label;",
          "91:     njs_str_t                   catch_cont_label;",
          "92:     njs_str_t                   catch_exit_label;",
          "93: } njs_generator_try_ctx_t;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "67:     njs_variable_t **retvar);",
          "68: static njs_int_t njs_generate_var_statement(njs_vm_t *vm,",
          "69:     njs_generator_t *generator, njs_parser_node_t *node);",
          "70: static njs_int_t njs_generate_let(njs_vm_t *vm, njs_generator_t *generator,",
          "71:     njs_parser_node_t *node, njs_variable_t *var);",
          "72: static njs_int_t njs_generate_if_statement(njs_vm_t *vm,",
          "73:     njs_generator_t *generator, njs_parser_node_t *node);",
          "74: static njs_int_t njs_generate_cond_expression(njs_vm_t *vm,",
          "75:     njs_generator_t *generator, njs_parser_node_t *node);",
          "76: static njs_int_t njs_generate_switch_statement(njs_vm_t *vm,",
          "77:     njs_generator_t *generator, njs_parser_node_t *node);",
          "78: static njs_int_t njs_generate_while_statement(njs_vm_t *vm,",
          "79:     njs_generator_t *generator, njs_parser_node_t *node);",
          "80: static njs_int_t njs_generate_do_while_statement(njs_vm_t *vm,",
          "81:     njs_generator_t *generator, njs_parser_node_t *node);",
          "82: static njs_int_t njs_generate_for_statement(njs_vm_t *vm,",
          "83:     njs_generator_t *generator, njs_parser_node_t *node);",
          "84: static njs_int_t njs_generate_for_let_update(njs_vm_t *vm,",
          "85:     njs_generator_t *generator, njs_parser_node_t *node, size_t depth);",
          "86: static njs_int_t njs_generate_for_resolve_closure(njs_vm_t *vm,",
          "87:     njs_parser_node_t *node, size_t depth);",
          "88: static njs_int_t njs_generate_for_in_statement(njs_vm_t *vm,",
          "89:     njs_generator_t *generator, njs_parser_node_t *node);",
          "90: static njs_int_t njs_generate_start_block(njs_vm_t *vm,",
          "91:     njs_generator_t *generator, njs_generator_block_type_t type,",
          "92:     const njs_str_t *label);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108: static njs_int_t njs_generate_var_statement_after(njs_vm_t *vm,",
          "109:     njs_generator_t *generator, njs_parser_node_t *node);",
          "114: static njs_int_t njs_generate_if_statement_cond(njs_vm_t *vm,",
          "115:     njs_generator_t *generator, njs_parser_node_t *node);",
          "116: static njs_int_t njs_generate_if_statement_then(njs_vm_t *vm,",
          "117:     njs_generator_t *generator, njs_parser_node_t *node);",
          "118: static njs_int_t njs_generate_if_statement_else(njs_vm_t *vm,",
          "119:     njs_generator_t *generator, njs_parser_node_t *node);",
          "122: static njs_int_t njs_generate_cond_expression_handler(njs_vm_t *vm,",
          "123:     njs_generator_t *generator, njs_parser_node_t *node);",
          "124: static njs_int_t njs_generate_cond_expression_true(njs_vm_t *vm,",
          "125:     njs_generator_t *generator, njs_parser_node_t *node);",
          "126: static njs_int_t njs_generate_cond_expression_false(njs_vm_t *vm,",
          "127:     njs_generator_t *generator, njs_parser_node_t *node);",
          "130: static njs_int_t njs_generate_switch_expression(njs_vm_t *vm,",
          "131:     njs_generator_t *generator, njs_parser_node_t *swtch);",
          "132: static njs_int_t njs_generate_switch_case(njs_vm_t *vm,",
          "133:     njs_generator_t *generator, njs_parser_node_t *swtch);",
          "134: static njs_int_t njs_generate_switch_case_after(njs_vm_t *vm,",
          "135:     njs_generator_t *generator, njs_parser_node_t *branch);",
          "136: static njs_int_t njs_generate_switch_case_end(njs_vm_t *vm,",
          "137:     njs_generator_t *generator, njs_parser_node_t *branch);",
          "138: static njs_int_t njs_generate_switch_default(njs_vm_t *vm,",
          "139:     njs_generator_t *generator, njs_parser_node_t *branch);",
          "140: static njs_int_t njs_generate_switch_end(njs_vm_t *vm,",
          "141:     njs_generator_t *generator, njs_parser_node_t *swtch);",
          "144: static njs_int_t njs_generate_while_condition(njs_vm_t *vm,",
          "145:     njs_generator_t *generator, njs_parser_node_t *node);",
          "146: static njs_int_t njs_generate_while_end(njs_vm_t *vm,",
          "147:     njs_generator_t *generator, njs_parser_node_t *node);",
          "150: static njs_int_t njs_generate_do_while_condition(njs_vm_t *vm,",
          "151:     njs_generator_t *generator, njs_parser_node_t *node);",
          "152: static njs_int_t njs_generate_do_while_end(njs_vm_t *vm,",
          "153:     njs_generator_t *generator, njs_parser_node_t *node);",
          "156: static njs_int_t njs_generate_for_init(njs_vm_t *vm, njs_generator_t *generator,",
          "157:     njs_parser_node_t *node);",
          "158: static njs_int_t njs_generate_for_body(njs_vm_t *vm, njs_generator_t *generator,",
          "159:     njs_parser_node_t *node);",
          "160: static njs_int_t njs_generate_for_update(njs_vm_t *vm,",
          "161:     njs_generator_t *generator, njs_parser_node_t *node);",
          "162: static njs_int_t njs_generate_for_end(njs_vm_t *vm, njs_generator_t *generator,",
          "163:     njs_parser_node_t *node);",
          "170: static njs_int_t njs_generate_for_in_object(njs_vm_t *vm,",
          "171:     njs_generator_t *generator, njs_parser_node_t *node);",
          "172: static njs_int_t njs_generate_for_in_body(njs_vm_t *vm,",
          "173:     njs_generator_t *generator, njs_parser_node_t *node);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "117:     njs_generator_t *generator, njs_parser_node_t *node);",
          "118: static njs_int_t njs_generate_block_statement(njs_vm_t *vm,",
          "119:     njs_generator_t *generator, njs_parser_node_t *node);",
          "120: static njs_int_t njs_generate_children(njs_vm_t *vm, njs_generator_t *generator,",
          "121:     njs_parser_node_t *node);",
          "122: static njs_int_t njs_generate_stop_statement(njs_vm_t *vm,",
          "123:     njs_generator_t *generator, njs_parser_node_t *node);",
          "124: static njs_int_t njs_generate_comma_expression(njs_vm_t *vm,",
          "125:     njs_generator_t *generator, njs_parser_node_t *node);",
          "126: static njs_int_t njs_generate_assignment(njs_vm_t *vm,",
          "127:     njs_generator_t *generator, njs_parser_node_t *node);",
          "128: static njs_int_t njs_generate_operation_assignment(njs_vm_t *vm,",
          "129:     njs_generator_t *generator, njs_parser_node_t *node);",
          "130: static njs_int_t njs_generate_object(njs_vm_t *vm, njs_generator_t *generator,",
          "131:     njs_parser_node_t *node);",
          "132: static njs_int_t njs_generate_property_accessor(njs_vm_t *vm,",
          "133:     njs_generator_t *generator, njs_parser_node_t *node);",
          "134: static njs_int_t njs_generate_array(njs_vm_t *vm, njs_generator_t *generator,",
          "135:     njs_parser_node_t *node);",
          "136: static njs_int_t njs_generate_function_expression(njs_vm_t *vm,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204: static njs_int_t njs_generate_block_statement_end(njs_vm_t *vm,",
          "205:     njs_generator_t *generator, njs_parser_node_t *node);",
          "210: static njs_int_t njs_generate_stop_statement_end(njs_vm_t *vm,",
          "211:     njs_generator_t *generator, njs_parser_node_t *node);",
          "214: static njs_int_t njs_generate_comma_expression_end(njs_vm_t *vm,",
          "215:     njs_generator_t *generator, njs_parser_node_t *node);",
          "218: static njs_int_t njs_generate_assignment_name(njs_vm_t *vm,",
          "219:     njs_generator_t *generator, njs_parser_node_t *node);",
          "220: static njs_int_t njs_generate_assignment_prop(njs_vm_t *vm,",
          "221:     njs_generator_t *generator, njs_parser_node_t *node);",
          "222: static njs_int_t njs_generate_assignment_end(njs_vm_t *vm,",
          "223:     njs_generator_t *generator, njs_parser_node_t *node);",
          "226: static njs_int_t njs_generate_operation_assignment_name(njs_vm_t *vm,",
          "227:     njs_generator_t *generator, njs_parser_node_t *node);",
          "228: static njs_int_t njs_generate_operation_assignment_prop(njs_vm_t *vm,",
          "229:     njs_generator_t *generator, njs_parser_node_t *node);",
          "230: static njs_int_t njs_generate_operation_assignment_end(njs_vm_t *vm,",
          "231:     njs_generator_t *generator, njs_parser_node_t *node);",
          "236: static njs_int_t njs_generate_property_accessor_end(njs_vm_t *vm,",
          "237:     njs_generator_t *generator, njs_parser_node_t *node);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "141:     njs_parser_node_t *node);",
          "142: static njs_int_t njs_generate_template_literal(njs_vm_t *vm,",
          "143:     njs_generator_t *generator, njs_parser_node_t *node);",
          "144: static njs_int_t njs_generate_test_jump_expression(njs_vm_t *vm,",
          "145:     njs_generator_t *generator, njs_parser_node_t *node);",
          "146: static njs_int_t njs_generate_3addr_operation(njs_vm_t *vm,",
          "147:     njs_generator_t *generator, njs_parser_node_t *node, njs_bool_t swap);",
          "148: static njs_int_t njs_generate_2addr_operation(njs_vm_t *vm,",
          "149:     njs_generator_t *generator, njs_parser_node_t *node);",
          "150: static njs_int_t njs_generate_typeof_operation(njs_vm_t *vm,",
          "151:     njs_generator_t *generator, njs_parser_node_t *node);",
          "152: static njs_int_t njs_generate_inc_dec_operation(njs_vm_t *vm,",
          "153:     njs_generator_t *generator, njs_parser_node_t *node, njs_bool_t post);",
          "154: static njs_int_t njs_generate_function_declaration(njs_vm_t *vm,",
          "155:     njs_generator_t *generator, njs_parser_node_t *node);",
          "156: static njs_int_t njs_generate_function_scope(njs_vm_t *vm,",
          "157:     njs_function_lambda_t *lambda, njs_parser_node_t *node,",
          "158:     const njs_str_t *name);",
          "159: static int64_t njs_generate_lambda_variables(njs_vm_t *vm,",
          "160:     njs_generator_t *generator, njs_parser_node_t *node);",
          "161: static njs_int_t njs_generate_return_statement(njs_vm_t *vm,",
          "162:     njs_generator_t *generator, njs_parser_node_t *node);",
          "163: static njs_int_t njs_generate_function_call(njs_vm_t *vm,",
          "164:     njs_generator_t *generator, njs_parser_node_t *node);",
          "165: static njs_int_t njs_generate_method_call(njs_vm_t *vm,",
          "166:     njs_generator_t *generator, njs_parser_node_t *node);",
          "167: static njs_int_t njs_generate_call(njs_vm_t *vm, njs_generator_t *generator,",
          "168:     njs_parser_node_t *node);",
          "169: static njs_int_t njs_generate_move_arguments(njs_vm_t *vm,",
          "170:     njs_generator_t *generator, njs_parser_node_t *node);",
          "171: static njs_int_t njs_generate_try_statement(njs_vm_t *vm,",
          "172:     njs_generator_t *generator, njs_parser_node_t *node);",
          "173: static njs_int_t njs_generate_throw_statement(njs_vm_t *vm,",
          "174:     njs_generator_t *generator, njs_parser_node_t *node);",
          "175: static njs_int_t njs_generate_import_statement(njs_vm_t *vm,",
          "176:     njs_generator_t *generator, njs_parser_node_t *node);",
          "177: static njs_int_t njs_generate_export_statement(njs_vm_t *vm,",
          "178:     njs_generator_t *generator, njs_parser_node_t *node);",
          "179: static njs_index_t njs_generate_dest_index(njs_vm_t *vm,",
          "180:     njs_generator_t *generator, njs_parser_node_t *node);",
          "181: static njs_index_t njs_generate_object_dest_index(njs_vm_t *vm,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "248: static njs_int_t njs_generate_template_literal_end(njs_vm_t *vm,",
          "249:     njs_generator_t *generator, njs_parser_node_t *node);",
          "252: static njs_int_t njs_generate_test_jump_expression_after(njs_vm_t *vm,",
          "253:     njs_generator_t *generator, njs_parser_node_t *node);",
          "254: static njs_int_t njs_generate_test_jump_expression_end(njs_vm_t *vm,",
          "255:     njs_generator_t *generator, njs_parser_node_t *node);",
          "258: static njs_int_t njs_generate_3addr_operation_name(njs_vm_t *vm,",
          "259:     njs_generator_t *generator, njs_parser_node_t *node);",
          "260: static njs_int_t njs_generate_3addr_operation_end(njs_vm_t *vm,",
          "261:     njs_generator_t *generator, njs_parser_node_t *node);",
          "264: static njs_int_t njs_generate_2addr_operation_end(njs_vm_t *vm,",
          "265:     njs_generator_t *generator, njs_parser_node_t *node);",
          "268: static njs_int_t njs_generate_typeof_operation_end(njs_vm_t *vm,",
          "269:     njs_generator_t *generator, njs_parser_node_t *node);",
          "272: static njs_int_t njs_generate_inc_dec_operation_prop(njs_vm_t *vm,",
          "273:     njs_generator_t *generator, njs_parser_node_t *node);",
          "279: static njs_int_t njs_generate_scope_end(njs_vm_t *vm,",
          "280:     njs_generator_t *generator, njs_parser_node_t *node);",
          "285: static njs_int_t njs_generate_return_statement_end(njs_vm_t *vm,",
          "286:     njs_generator_t *generator, njs_parser_node_t *node);",
          "289: static njs_int_t njs_generate_function_call_arguments(njs_vm_t *vm,",
          "290:     njs_generator_t *generator, njs_parser_node_t *node);",
          "291: static njs_int_t njs_generate_function_call_end(njs_vm_t *vm,",
          "292:     njs_generator_t *generator, njs_parser_node_t *node);",
          "295: static njs_int_t njs_generate_method_call_arguments(njs_vm_t *vm,",
          "296:     njs_generator_t *generator, njs_parser_node_t *node);",
          "297: static njs_int_t njs_generate_method_call_end(njs_vm_t *vm,",
          "298:     njs_generator_t *generator, njs_parser_node_t *node);",
          "305: static njs_int_t njs_generate_try_left(njs_vm_t *vm, njs_generator_t *generator,",
          "306:     njs_parser_node_t *node);",
          "307: static njs_int_t njs_generate_try_catch(njs_vm_t *vm,",
          "308:     njs_generator_t *generator, njs_parser_node_t *node);",
          "309: static njs_int_t njs_generate_try_finally(njs_vm_t *vm,",
          "310:     njs_generator_t *generator, njs_parser_node_t *node);",
          "311: static njs_int_t njs_generate_try_end(njs_vm_t *vm, njs_generator_t *generator,",
          "312:     njs_parser_node_t *node);",
          "315: static njs_int_t njs_generate_throw_end(njs_vm_t *vm,",
          "316:     njs_generator_t *generator, njs_parser_node_t *node);",
          "319: static njs_int_t njs_generate_import_statement_end(njs_vm_t *vm,",
          "320:     njs_generator_t *generator, njs_parser_node_t *node);",
          "323: static njs_int_t njs_generate_export_statement_end(njs_vm_t *vm,",
          "324:     njs_generator_t *generator, njs_parser_node_t *node);",
          "325: static njs_int_t njs_generate_wo_dest(njs_vm_t *vm,",
          "326:     njs_generator_t *generator, njs_parser_node_t *node);",
          "327: static njs_int_t njs_generate_wo_dest_after(njs_vm_t *vm,",
          "328:     njs_generator_t *generator, njs_parser_node_t *node);",
          "329: static njs_int_t njs_generate_global_reference(njs_vm_t *vm,",
          "330:     njs_generator_t *generator, njs_parser_node_t *node, njs_bool_t exception);",
          "331: static njs_int_t njs_generate_reference_error(njs_vm_t *vm,",
          "332:     njs_generator_t *generator, njs_parser_node_t *node);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "186:     njs_generator_t *generator, njs_parser_node_t *node);",
          "187: static njs_int_t njs_generate_children_indexes_release(njs_vm_t *vm,",
          "188:     njs_generator_t *generator, njs_parser_node_t *node);",
          "189: static njs_int_t njs_generate_node_index_release(njs_vm_t *vm,",
          "190:     njs_generator_t *generator, njs_parser_node_t *node);",
          "191: static njs_int_t njs_generate_index_release(njs_vm_t *vm,",
          "192:     njs_generator_t *generator, njs_index_t index);",
          "199: #define njs_generate_code(generator, type, _code, _op, nargs, nd)             \\",
          "",
          "[Removed Lines]",
          "193: static njs_int_t njs_generate_global_reference(njs_vm_t *vm,",
          "194:     njs_generator_t *generator, njs_parser_node_t *node, njs_bool_t exception);",
          "195: static njs_int_t njs_generate_reference_error(njs_vm_t *vm,",
          "196:     njs_generator_t *generator, njs_parser_node_t *node);",
          "",
          "[Added Lines]",
          "344: static njs_int_t njs_generate_children_indexes_release_pop(njs_vm_t *vm,",
          "345:     njs_generator_t *generator, njs_parser_node_t *node);",
          "348: static njs_int_t njs_generate_node_index_release_pop(njs_vm_t *vm,",
          "349:     njs_generator_t *generator, njs_parser_node_t *node);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "278: static const njs_str_t  undef_label  = { 0xffffffff, (u_char *) \"\" };",
          "281: static njs_int_t",
          "282: njs_generate(njs_vm_t *vm, njs_generator_t *generator, njs_parser_node_t *node)",
          "283: {",
          "284:     if (node == NULL) {",
          "286:     }",
          "288:     switch (node->token_type) {",
          "",
          "[Removed Lines]",
          "285:         return NJS_OK;",
          "",
          "[Added Lines]",
          "436: njs_inline void",
          "437: njs_generator_next(njs_generator_t *generator, njs_generator_state_func_t state,",
          "438:     njs_parser_node_t *node)",
          "439: {",
          "440:     generator->state = state;",
          "441:     generator->node = node;",
          "442: }",
          "445: njs_inline njs_int_t",
          "446: njs_generator_after(njs_vm_t *vm, njs_generator_t *generator,",
          "447:     njs_queue_link_t *link, njs_parser_node_t *node,",
          "448:     njs_generator_state_func_t state, void *ctx, size_t size)",
          "449: {",
          "450:     njs_generator_stack_entry_t  *entry;",
          "452:     entry = njs_mp_alloc(vm->mem_pool, sizeof(njs_parser_stack_entry_t));",
          "453:     if (njs_slow_path(entry == NULL)) {",
          "454:         return NJS_ERROR;",
          "455:     }",
          "457:     entry->state = state;",
          "458:     entry->node = node;",
          "459:     entry->context = ctx;",
          "461:     njs_queue_insert_before(link, &entry->link);",
          "463:     if (size > 0) {",
          "464:         entry->context = njs_mp_alloc(vm->mem_pool, size);",
          "465:         if (njs_slow_path(entry->context == NULL)) {",
          "466:             return NJS_ERROR;",
          "467:         }",
          "469:         memcpy(entry->context, ctx, size);",
          "470:     }",
          "472:     return NJS_OK;",
          "473: }",
          "476: njs_inline njs_int_t",
          "477: njs_generator_stack_pop(njs_vm_t *vm, njs_generator_t *generator, void *ctx)",
          "478: {",
          "479:     njs_queue_link_t             *link;",
          "480:     njs_generator_stack_entry_t  *entry;",
          "482:     entry = njs_queue_link_data(njs_queue_first(&generator->stack),",
          "483:                                 njs_generator_stack_entry_t, link);",
          "485:     link = njs_queue_first(&generator->stack);",
          "486:     njs_queue_remove(link);",
          "488:     if (ctx != NULL) {",
          "489:         njs_mp_free(vm->mem_pool, ctx);",
          "490:     }",
          "492:     generator->context = entry->context;",
          "494:     njs_generator_next(generator, entry->state, entry->node);",
          "496:     njs_mp_free(vm->mem_pool, entry);",
          "498:     return NJS_OK;",
          "499: }",
          "506:         return njs_generator_stack_pop(vm, generator, NULL);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "420:             return NJS_ERROR;",
          "421:         }",
          "425:     case NJS_TOKEN_OBJECT_VALUE:",
          "426:         node->index = node->u.object->index;",
          "429:     case NJS_TOKEN_OBJECT:",
          "430:         return njs_generate_object(vm, generator, node);",
          "",
          "[Removed Lines]",
          "423:         return NJS_OK;",
          "427:         return NJS_OK;",
          "",
          "[Added Lines]",
          "644:         return njs_generator_stack_pop(vm, generator, NULL);",
          "648:         return njs_generator_stack_pop(vm, generator, NULL);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "449:         return njs_generate_template_literal(vm, generator, node);",
          "451:     case NJS_TOKEN_EXTERNAL:",
          "454:     case NJS_TOKEN_NAME:",
          "455:     case NJS_TOKEN_ARGUMENTS:",
          "",
          "[Removed Lines]",
          "452:         return NJS_OK;",
          "",
          "[Added Lines]",
          "673:         return njs_generator_stack_pop(vm, generator, NULL);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "490: }",
          "511: static njs_int_t",
          "513:     njs_parser_node_t *node)",
          "514: {",
          "527: }",
          "",
          "[Removed Lines]",
          "493: njs_inline njs_int_t",
          "494: njs_generator(njs_vm_t *vm, njs_generator_t *generator, njs_parser_node_t *node)",
          "495: {",
          "496:     njs_int_t  ret;",
          "498:     if (njs_slow_path(generator->count++ > NJS_GENERATE_MAX_DEPTH)) {",
          "499:         njs_range_error(vm, \"Maximum call stack size exceeded\");",
          "500:         return NJS_ERROR;",
          "501:     }",
          "503:     ret = njs_generate(vm, generator, node);",
          "505:     generator->count--;",
          "507:     return ret;",
          "508: }",
          "512: njs_generate_wo_dest(njs_vm_t *vm, njs_generator_t *generator,",
          "515:     njs_int_t           ret;",
          "516:     njs_parser_scope_t  *scope;",
          "518:     scope = njs_function_scope(node->scope);",
          "520:     scope->dest_disable = 1;",
          "522:     ret = njs_generator(vm, generator, node);",
          "524:     scope->dest_disable = 0;",
          "526:     return ret;",
          "",
          "[Added Lines]",
          "715: njs_generator_pop(njs_vm_t *vm, njs_generator_t *generator,",
          "718:     return njs_generator_stack_pop(vm, generator, NULL);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "625: njs_generate_name(njs_vm_t *vm, njs_generator_t *generator,",
          "626:     njs_parser_node_t *node)",
          "627: {",
          "628:     njs_variable_t              *var;",
          "629:     njs_parser_scope_t          *scope;",
          "630:     njs_vmcode_variable_t       *variable;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "820:     njs_int_t                   ret;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "633:     var = njs_variable_reference(vm, node);",
          "634:     if (njs_slow_path(var == NULL)) {",
          "636:     }",
          "638:     if (var->function && var->type == NJS_VARIABLE_FUNCTION) {",
          "",
          "[Removed Lines]",
          "635:         return njs_generate_global_reference(vm, generator, node, 1);",
          "",
          "[Added Lines]",
          "828:         ret = njs_generate_global_reference(vm, generator, node, 1);",
          "829:         if (njs_slow_path(ret != NJS_OK)) {",
          "830:             return ret;",
          "831:         }",
          "833:         return njs_generator_stack_pop(vm, generator, NULL);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "643:     }",
          "645:     if (var->init) {",
          "647:     }",
          "649:     if (var->type == NJS_VARIABLE_LET || var->type == NJS_VARIABLE_CONST) {",
          "",
          "[Removed Lines]",
          "646:         return NJS_OK;",
          "",
          "[Added Lines]",
          "844:         return njs_generator_stack_pop(vm, generator, NULL);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "656:         }",
          "657:     }",
          "660: }",
          "",
          "[Removed Lines]",
          "659:     return NJS_OK;",
          "",
          "[Added Lines]",
          "857:     return njs_generator_stack_pop(vm, generator, NULL);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "738:     njs_int_t          ret;",
          "739:     njs_variable_t     *var;",
          "740:     njs_parser_node_t  *lvalue, *expr;",
          "743:     lvalue = node->left;",
          "",
          "[Removed Lines]",
          "741:     njs_vmcode_move_t  *move;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "768:         var->init = 1;",
          "771:     }",
          "773:     if (var->type == NJS_VARIABLE_LET || var->type == NJS_VARIABLE_CONST) {",
          "",
          "[Removed Lines]",
          "770:         return NJS_OK;",
          "",
          "[Added Lines]",
          "967:         return njs_generator_stack_pop(vm, generator, NULL);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "776:             return ret;",
          "777:         }",
          "784:     } else {",
          "785:         expr->dest = lvalue;",
          "788:         if (njs_slow_path(ret != NJS_OK)) {",
          "789:             return ret;",
          "790:         }",
          "",
          "[Removed Lines]",
          "779:         ret = njs_generate_let(vm, generator, node, var);",
          "780:         if (njs_slow_path(ret != NJS_OK)) {",
          "781:             return ret;",
          "782:         }",
          "787:         ret = njs_generator(vm, generator, expr);",
          "",
          "[Added Lines]",
          "979:         njs_generator_next(generator, njs_generate, expr);",
          "980:     }",
          "982:     return njs_generator_after(vm, generator,",
          "983:                                njs_queue_first(&generator->stack), node,",
          "984:                                njs_generate_var_statement_after, var, 0);",
          "985: }",
          "988: static njs_int_t",
          "989: njs_generate_var_statement_after(njs_vm_t *vm, njs_generator_t *generator,",
          "990:     njs_parser_node_t *node)",
          "991: {",
          "992:     njs_int_t          ret;",
          "993:     njs_variable_t     *var;",
          "994:     njs_parser_node_t  *lvalue, *expr;",
          "995:     njs_vmcode_move_t  *move;",
          "997:     lvalue = node->left;",
          "998:     expr = node->right;",
          "999:     var = generator->context;",
          "1001:     if (var->type == NJS_VARIABLE_LET || var->type == NJS_VARIABLE_CONST) {",
          "1002:         ret = njs_generate_let(vm, generator, node, var);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "804:     node->index = expr->index;",
          "805:     node->temporary = expr->temporary;",
          "808: }",
          "",
          "[Removed Lines]",
          "807:     return NJS_OK;",
          "",
          "[Added Lines]",
          "1022:     return njs_generator_stack_pop(vm, generator, NULL);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "826: njs_generate_if_statement(njs_vm_t *vm, njs_generator_t *generator,",
          "827:     njs_parser_node_t *node)",
          "828: {",
          "841:     njs_generate_code(generator, njs_vmcode_cond_jump_t, cond_jump,",
          "842:                       NJS_VMCODE_IF_FALSE_JUMP, 2, node);",
          "",
          "[Removed Lines]",
          "829:     njs_int_t               ret;",
          "830:     njs_jump_off_t          jump_offset, label_offset;",
          "831:     njs_vmcode_jump_t       *jump;",
          "832:     njs_vmcode_cond_jump_t  *cond_jump;",
          "836:     ret = njs_generator(vm, generator, node->left);",
          "837:     if (njs_slow_path(ret != NJS_OK)) {",
          "838:         return ret;",
          "839:     }",
          "",
          "[Added Lines]",
          "1046:     njs_generator_next(generator, njs_generate, node->left);",
          "1048:     return njs_generator_after(vm, generator,",
          "1049:                                njs_queue_first(&generator->stack), node,",
          "1050:                                njs_generate_if_statement_cond, NULL, 0);",
          "1051: }",
          "1054: static njs_int_t",
          "1055: njs_generate_if_statement_cond(njs_vm_t *vm, njs_generator_t *generator,",
          "1056:     njs_parser_node_t *node)",
          "1057: {",
          "1058:     njs_int_t               ret;",
          "1059:     njs_jump_off_t          jump_offset;",
          "1060:     njs_vmcode_cond_jump_t  *cond_jump;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "848:     }",
          "850:     jump_offset = njs_code_offset(generator, cond_jump);",
          "853:     if (node->right != NULL && node->right->token_type == NJS_TOKEN_BRANCHING) {",
          "",
          "[Removed Lines]",
          "851:     label_offset = jump_offset + offsetof(njs_vmcode_cond_jump_t, offset);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "857:         node = node->right;",
          "875:     }",
          "",
          "[Removed Lines]",
          "859:         ret = njs_generator(vm, generator, node->left);",
          "860:         if (njs_slow_path(ret != NJS_OK)) {",
          "861:             return ret;",
          "862:         }",
          "864:         ret = njs_generate_node_index_release(vm, generator, node->left);",
          "865:         if (njs_slow_path(ret != NJS_OK)) {",
          "866:             return ret;",
          "867:         }",
          "869:         njs_generate_code_jump(generator, jump, 0);",
          "871:         njs_code_set_offset(generator, label_offset, jump_offset);",
          "873:         jump_offset = njs_code_offset(generator, jump);",
          "874:         label_offset = jump_offset + offsetof(njs_vmcode_jump_t, offset);",
          "",
          "[Added Lines]",
          "1079:         njs_generator_next(generator, njs_generate, node->left);",
          "1081:         return njs_generator_after(vm, generator,",
          "1082:                                    njs_queue_first(&generator->stack), node,",
          "1083:                                    njs_generate_if_statement_then,",
          "1084:                                    &jump_offset, sizeof(njs_jump_off_t));",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "883:     if (njs_slow_path(ret != NJS_OK)) {",
          "884:         return ret;",
          "885:     }",
          "887:     ret = njs_generate_node_index_release(vm, generator, node->right);",
          "888:     if (njs_slow_path(ret != NJS_OK)) {",
          "889:         return ret;",
          "890:     }",
          "895: }",
          "",
          "[Removed Lines]",
          "882:     ret = njs_generator(vm, generator, node->right);",
          "892:     njs_code_set_offset(generator, label_offset, jump_offset);",
          "894:     return NJS_OK;",
          "",
          "[Added Lines]",
          "1092:     njs_generator_next(generator, njs_generate, node->right);",
          "1094:     return njs_generator_after(vm, generator,",
          "1095:                                njs_queue_first(&generator->stack), node,",
          "1096:                                njs_generate_if_statement_else,",
          "1097:                                &jump_offset, sizeof(njs_jump_off_t));",
          "1098: }",
          "1101: static njs_int_t",
          "1102: njs_generate_if_statement_then(njs_vm_t *vm, njs_generator_t *generator,",
          "1103:     njs_parser_node_t *node)",
          "1104: {",
          "1105:     njs_int_t          ret;",
          "1106:     njs_jump_off_t     *jump_offset, label_offset;",
          "1107:     njs_vmcode_jump_t  *jump;",
          "1109:     ret = njs_generate_node_index_release(vm, generator, node->left);",
          "1114:     jump_offset = (njs_jump_off_t *) generator->context;",
          "1115:     label_offset = *jump_offset + offsetof(njs_vmcode_cond_jump_t, offset);",
          "1117:     njs_generate_code_jump(generator, jump, 0);",
          "1118:     njs_code_set_offset(generator, label_offset, *jump_offset);",
          "1122:     njs_generator_next(generator, njs_generate, node->right);",
          "1124:     return njs_generator_after(vm, generator,",
          "1125:                                njs_queue_first(&generator->stack), node,",
          "1126:                                njs_generate_if_statement_else,",
          "1127:                                jump_offset, 0);",
          "1128: }",
          "1131: static njs_int_t",
          "1132: njs_generate_if_statement_else(njs_vm_t *vm, njs_generator_t *generator,",
          "1133:     njs_parser_node_t *node)",
          "1134: {",
          "1135:     njs_int_t       ret;",
          "1136:     njs_jump_off_t  *jump_offset, label_offset;",
          "1138:     jump_offset = (njs_jump_off_t *) generator->context;",
          "1139:     label_offset = *jump_offset + offsetof(njs_vmcode_cond_jump_t, offset);",
          "1146:     njs_code_set_offset(generator, label_offset, *jump_offset);",
          "1148:     return njs_generator_stack_pop(vm, generator, generator->context);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "899: njs_generate_cond_expression(njs_vm_t *vm, njs_generator_t *generator,",
          "900:     njs_parser_node_t *node)",
          "901: {",
          "916:     njs_generate_code(generator, njs_vmcode_cond_jump_t, cond_jump,",
          "917:                       NJS_VMCODE_IF_FALSE_JUMP, 2, node);",
          "920:     cond_jump->cond = node->left->index;",
          "922:     node->index = njs_generate_dest_index(vm, generator, node);",
          "923:     if (njs_slow_path(node->index == NJS_INDEX_ERROR)) {",
          "925:     }",
          "",
          "[Removed Lines]",
          "902:     njs_int_t               ret;",
          "903:     njs_jump_off_t          jump_offset, cond_jump_offset;",
          "904:     njs_parser_node_t       *branch;",
          "905:     njs_vmcode_move_t       *move;",
          "906:     njs_vmcode_jump_t       *jump;",
          "907:     njs_vmcode_cond_jump_t  *cond_jump;",
          "911:     ret = njs_generator(vm, generator, node->left);",
          "912:     if (njs_slow_path(ret != NJS_OK)) {",
          "913:         return ret;",
          "914:     }",
          "919:     cond_jump_offset = njs_code_offset(generator, cond_jump);",
          "924:         return node->index;",
          "927:     branch = node->right;",
          "931:     ret = njs_generator(vm, generator, branch->left);",
          "932:     if (njs_slow_path(ret != NJS_OK)) {",
          "933:         return ret;",
          "934:     }",
          "",
          "[Added Lines]",
          "1156:     njs_generator_next(generator, njs_generate, node->left);",
          "1158:     return njs_generator_after(vm, generator,",
          "1159:                                njs_queue_first(&generator->stack), node,",
          "1160:                                njs_generate_cond_expression_handler, NULL, 0);",
          "1161: }",
          "1164: static njs_int_t",
          "1165: njs_generate_cond_expression_handler(njs_vm_t *vm, njs_generator_t *generator,",
          "1166:     njs_parser_node_t *node)",
          "1167: {",
          "1168:     njs_jump_off_t          jump_offset;",
          "1169:     njs_vmcode_cond_jump_t  *cond_jump;",
          "1174:     jump_offset = njs_code_offset(generator, cond_jump);",
          "1179:         return NJS_ERROR;",
          "1182:     njs_generator_next(generator, njs_generate, node->right->left);",
          "1184:     return njs_generator_after(vm, generator,",
          "1185:                                njs_queue_first(&generator->stack), node,",
          "1186:                                njs_generate_cond_expression_true,",
          "1187:                                &jump_offset, sizeof(njs_jump_off_t));",
          "1188: }",
          "1191: static njs_int_t",
          "1192: njs_generate_cond_expression_true(njs_vm_t *vm, njs_generator_t *generator,",
          "1193:     njs_parser_node_t *node)",
          "1194: {",
          "1195:     njs_int_t          ret;",
          "1196:     njs_jump_off_t     jump_offset;",
          "1197:     njs_parser_node_t  *branch;",
          "1198:     njs_vmcode_move_t  *move;",
          "1199:     njs_vmcode_jump_t  *jump;",
          "1201:     branch = node->right;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "953:     jump_offset = njs_code_offset(generator, jump);",
          "955:     njs_code_set_jump_offset(generator, njs_vmcode_cond_jump_t,",
          "965:     if (node->index != branch->right->index) {",
          "966:         njs_generate_code_move(generator, move, node->index,",
          "967:                                branch->right->index, node);",
          "968:     }",
          "972:     ret = njs_generate_node_index_release(vm, generator, branch->right);",
          "973:     if (njs_slow_path(ret != NJS_OK)) {",
          "974:         return ret;",
          "975:     }",
          "978: }",
          "",
          "[Removed Lines]",
          "956:                              cond_jump_offset);",
          "960:     ret = njs_generator(vm, generator, branch->right);",
          "961:     if (njs_slow_path(ret != NJS_OK)) {",
          "962:         return ret;",
          "963:     }",
          "970:     njs_code_set_jump_offset(generator, njs_vmcode_cond_jump_t, jump_offset);",
          "977:     return NJS_OK;",
          "",
          "[Added Lines]",
          "1225:     njs_generator_next(generator, njs_generate, branch->right);",
          "1227:     return njs_generator_after(vm, generator,",
          "1228:                                njs_queue_first(&generator->stack), node,",
          "1229:                                njs_generate_cond_expression_false,",
          "1230:                                &jump_offset, sizeof(njs_jump_off_t));",
          "1231: }",
          "1234: static njs_int_t",
          "1235: njs_generate_cond_expression_false(njs_vm_t *vm, njs_generator_t *generator,",
          "1236:     njs_parser_node_t *node)",
          "1237: {",
          "1238:     njs_int_t          ret;",
          "1239:     njs_parser_node_t  *branch;",
          "1240:     njs_vmcode_move_t  *move;",
          "1242:     branch = node->right;",
          "1249:     njs_code_set_jump_offset(generator, njs_vmcode_cond_jump_t,",
          "1257:     return njs_generator_stack_pop(vm, generator, generator->context);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "982: njs_generate_switch_statement(njs_vm_t *vm, njs_generator_t *generator,",
          "983:     njs_parser_node_t *swtch)",
          "984: {",
          "1005:     if (!expr->temporary) {",
          "1008:             return NJS_ERROR;",
          "1009:         }",
          "1012:     }",
          "1014:     ret = njs_generate_start_block(vm, generator, NJS_GENERATOR_SWITCH,",
          "",
          "[Removed Lines]",
          "985:     njs_int_t                ret;",
          "986:     njs_jump_off_t           jump_offset;",
          "987:     njs_index_t              index;",
          "988:     njs_parser_node_t        *node, *expr, *branch;",
          "989:     njs_vmcode_move_t        *move;",
          "990:     njs_vmcode_jump_t        *jump;",
          "991:     njs_generator_patch_t    *patch, *next, *patches, **last;",
          "992:     njs_vmcode_equal_jump_t  *equal;",
          "996:     expr = swtch->left;",
          "998:     ret = njs_generator(vm, generator, expr);",
          "999:     if (njs_slow_path(ret != NJS_OK)) {",
          "1000:         return ret;",
          "1001:     }",
          "1003:     index = expr->index;",
          "1006:         index = njs_generate_temp_index_get(vm, generator, swtch);",
          "1007:         if (njs_slow_path(index == NJS_INDEX_ERROR)) {",
          "1011:         njs_generate_code_move(generator, move, index, expr->index, swtch);",
          "",
          "[Added Lines]",
          "1265:     njs_generator_switch_ctx_t  ctx;",
          "1269:     njs_generator_next(generator, njs_generate, swtch->left);",
          "1271:     return njs_generator_after(vm, generator,",
          "1272:                                njs_queue_first(&generator->stack), swtch,",
          "1273:                                njs_generate_switch_expression,",
          "1274:                                &ctx, sizeof(njs_generator_switch_ctx_t));",
          "1275: }",
          "1278: static njs_int_t",
          "1279: njs_generate_switch_expression(njs_vm_t *vm, njs_generator_t *generator,",
          "1280:     njs_parser_node_t *swtch)",
          "1281: {",
          "1282:     njs_int_t                   ret;",
          "1283:     njs_parser_node_t           *expr;",
          "1284:     njs_vmcode_move_t           *move;",
          "1285:     njs_generator_switch_ctx_t  *ctx;",
          "1287:     ctx = generator->context;",
          "1289:     expr = swtch->left;",
          "1290:     ctx->index = expr->index;",
          "1293:         ctx->index = njs_generate_temp_index_get(vm, generator, swtch);",
          "1294:         if (njs_slow_path(ctx->index == NJS_INDEX_ERROR)) {",
          "1298:         njs_generate_code_move(generator, move, ctx->index, expr->index, swtch);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1017:         return ret;",
          "1018:     }",
          "1058:         }",
          "1059:     }",
          "1063:     if (njs_slow_path(ret != NJS_OK)) {",
          "1064:         return ret;",
          "1065:     }",
          "1068:                            offsetof(njs_vmcode_jump_t, offset));",
          "1098:     }",
          "1103:     }",
          "1106:     njs_generate_patch_block_exit(vm, generator);",
          "1109: }",
          "",
          "[Removed Lines]",
          "1020:     patches = NULL;",
          "1021:     last = &patches;",
          "1023:     for (branch = swtch->right; branch != NULL; branch = branch->left) {",
          "1025:         if (branch->token_type != NJS_TOKEN_DEFAULT) {",
          "1029:             node = branch->right;",
          "1031:             ret = njs_generator(vm, generator, node->left);",
          "1032:             if (njs_slow_path(ret != NJS_OK)) {",
          "1033:                 return ret;",
          "1034:             }",
          "1036:             njs_generate_code(generator, njs_vmcode_equal_jump_t, equal,",
          "1037:                               NJS_VMCODE_IF_EQUAL_JUMP, 3, branch);",
          "1038:             equal->offset = offsetof(njs_vmcode_equal_jump_t, offset);",
          "1039:             equal->value1 = index;",
          "1040:             equal->value2 = node->left->index;",
          "1042:             ret = njs_generate_node_index_release(vm, generator, node->left);",
          "1043:             if (njs_slow_path(ret != NJS_OK)) {",
          "1044:                 return ret;",
          "1045:             }",
          "1047:             patch = njs_mp_alloc(vm->mem_pool, sizeof(njs_generator_patch_t));",
          "1048:             if (njs_slow_path(patch == NULL)) {",
          "1049:                 return NJS_ERROR;",
          "1050:             }",
          "1052:             patch->jump_offset = njs_code_offset(generator, equal)",
          "1053:                                  + offsetof(njs_vmcode_equal_jump_t, offset);",
          "1054:             patch->label = no_label;",
          "1057:             last = &patch->next;",
          "1062:     ret = njs_generate_index_release(vm, generator, index);",
          "1067:     njs_generate_code_jump(generator, jump,",
          "1070:     jump_offset = njs_code_offset(generator, jump);",
          "1072:     patch = patches;",
          "1074:     for (branch = swtch->right; branch != NULL; branch = branch->left) {",
          "1076:         if (branch->token_type == NJS_TOKEN_DEFAULT) {",
          "1077:             njs_code_set_jump_offset(generator, njs_vmcode_jump_t, jump_offset);",
          "1078:             jump = NULL;",
          "1079:             node = branch;",
          "1081:         } else {",
          "1082:             njs_code_update_offset(generator, patch);",
          "1084:             next = patch->next;",
          "1086:             njs_mp_free(vm->mem_pool, patch);",
          "1088:             patch = next;",
          "1089:             node = branch->right;",
          "1090:         }",
          "1094:         ret = njs_generator(vm, generator, node->right);",
          "1095:         if (njs_slow_path(ret != NJS_OK)) {",
          "1096:             return ret;",
          "1097:         }",
          "1100:     if (jump != NULL) {",
          "1102:         njs_code_set_jump_offset(generator, njs_vmcode_jump_t, jump_offset);",
          "1108:     return NJS_OK;",
          "",
          "[Added Lines]",
          "1307:     ctx->patch = NULL;",
          "1308:     ctx->last = &ctx->patch;",
          "1310:     if (swtch->right != NULL) {",
          "1314:         njs_generator_next(generator, njs_generate_switch_case, swtch->right);",
          "1316:         return njs_generator_after(vm, generator,",
          "1317:                                    njs_queue_first(&generator->stack), swtch,",
          "1318:                                    njs_generate_switch_case_end, ctx, 0);",
          "1319:     }",
          "1321:     return njs_generate_switch_case_end(vm, generator, swtch);",
          "1322: }",
          "1325: static njs_int_t",
          "1326: njs_generate_switch_case(njs_vm_t *vm, njs_generator_t *generator,",
          "1327:     njs_parser_node_t *branch)",
          "1328: {",
          "1329:     if (branch->token_type == NJS_TOKEN_DEFAULT) {",
          "1330:         if (branch->left == NULL) {",
          "1331:             return njs_generator_stack_pop(vm, generator, NULL);",
          "1332:         }",
          "1334:         branch = branch->left;",
          "1335:     }",
          "1337:     njs_generator_next(generator, njs_generate, branch->right->left);",
          "1339:     return njs_generator_after(vm, generator,",
          "1340:                                njs_queue_first(&generator->stack), branch,",
          "1341:                                njs_generate_switch_case_after,",
          "1342:                                generator->context, 0);",
          "1343: }",
          "1346: static njs_int_t",
          "1347: njs_generate_switch_case_after(njs_vm_t *vm, njs_generator_t *generator,",
          "1348:     njs_parser_node_t *branch)",
          "1349: {",
          "1350:     njs_int_t                   ret;",
          "1351:     njs_parser_node_t           *node;",
          "1352:     njs_generator_patch_t       *patch;",
          "1353:     njs_vmcode_equal_jump_t     *equal;",
          "1354:     njs_generator_switch_ctx_t  *ctx;",
          "1356:     ctx = generator->context;",
          "1357:     node = branch->right;",
          "1359:     njs_generate_code(generator, njs_vmcode_equal_jump_t, equal,",
          "1360:                       NJS_VMCODE_IF_EQUAL_JUMP, 3, branch);",
          "1361:     equal->offset = offsetof(njs_vmcode_equal_jump_t, offset);",
          "1362:     equal->value1 = ctx->index;",
          "1363:     equal->value2 = node->left->index;",
          "1365:     ret = njs_generate_node_index_release(vm, generator, node->left);",
          "1366:     if (njs_slow_path(ret != NJS_OK)) {",
          "1367:         return ret;",
          "1368:     }",
          "1370:     patch = njs_mp_alloc(vm->mem_pool, sizeof(njs_generator_patch_t));",
          "1371:     if (njs_slow_path(patch == NULL)) {",
          "1372:         return NJS_ERROR;",
          "1373:     }",
          "1375:     patch->jump_offset = njs_code_offset(generator, equal)",
          "1376:                          + offsetof(njs_vmcode_equal_jump_t, offset);",
          "1377:     patch->label = no_label;",
          "1380:     ctx->last = &patch->next;",
          "1382:     if (branch->left == NULL) {",
          "1383:         return njs_generator_stack_pop(vm, generator, NULL);",
          "1384:     }",
          "1386:     branch = branch->left;",
          "1388:     if (branch->token_type == NJS_TOKEN_DEFAULT) {",
          "1389:         branch = branch->left;",
          "1391:         if (branch == NULL) {",
          "1392:             return njs_generator_stack_pop(vm, generator, NULL);",
          "1396:     njs_generator_next(generator, njs_generate, branch->right->left);",
          "1398:     return njs_generator_after(vm, generator,",
          "1399:                                njs_queue_first(&generator->stack), branch,",
          "1400:                                njs_generate_switch_case_after, ctx, 0);",
          "1401: }",
          "1403: static njs_int_t",
          "1404: njs_generate_switch_case_end(njs_vm_t *vm, njs_generator_t *generator,",
          "1405:     njs_parser_node_t *swtch)",
          "1406: {",
          "1407:     njs_int_t                   ret;",
          "1408:     njs_parser_node_t           *branch;",
          "1409:     njs_generator_switch_ctx_t  *ctx;",
          "1411:     ctx = generator->context;",
          "1414:     ret = njs_generate_index_release(vm, generator, ctx->index);",
          "1419:     njs_generate_code_jump(generator, ctx->jump,",
          "1422:     ctx->jump_offset = njs_code_offset(generator, ctx->jump);",
          "1424:     branch = swtch->right;",
          "1426:     if (branch != NULL) {",
          "1427:         njs_generator_next(generator, njs_generate_switch_default, branch);",
          "1429:         return njs_generator_after(vm, generator,",
          "1430:                                    njs_queue_first(&generator->stack), swtch,",
          "1431:                                    njs_generate_switch_end, ctx, 0);",
          "1432:     }",
          "1434:     return njs_generate_switch_end(vm, generator, swtch);",
          "1435: }",
          "1438: static njs_int_t",
          "1439: njs_generate_switch_default(njs_vm_t *vm, njs_generator_t *generator,",
          "1440:     njs_parser_node_t *branch)",
          "1441: {",
          "1442:     njs_parser_node_t           *node;",
          "1443:     njs_generator_patch_t       *next;",
          "1444:     njs_generator_switch_ctx_t  *ctx;",
          "1446:     ctx = generator->context;",
          "1448:     if (branch->token_type == NJS_TOKEN_DEFAULT) {",
          "1449:         njs_code_set_jump_offset(generator, njs_vmcode_jump_t,",
          "1450:                                  ctx->jump_offset);",
          "1451:         ctx->jump = NULL;",
          "1452:         node = branch;",
          "1454:     } else {",
          "1455:         njs_code_update_offset(generator, ctx->patch);",
          "1457:         next = ctx->patch->next;",
          "1459:         njs_mp_free(vm->mem_pool, ctx->patch);",
          "1461:         ctx->patch = next;",
          "1462:         node = branch->right;",
          "1463:     }",
          "1465:     njs_generator_next(generator, njs_generate, node->right);",
          "1467:     branch = branch->left;",
          "1469:     if (branch == NULL) {",
          "1470:         return njs_generator_after(vm, generator,",
          "1471:                                    njs_queue_first(&generator->stack), branch,",
          "1472:                                    njs_generator_pop, NULL, 0);",
          "1475:     return njs_generator_after(vm, generator,",
          "1476:                                njs_queue_first(&generator->stack), branch,",
          "1477:                                njs_generate_switch_default, ctx, 0);",
          "1478: }",
          "1481: static njs_int_t",
          "1482: njs_generate_switch_end(njs_vm_t *vm, njs_generator_t *generator,",
          "1483:     njs_parser_node_t *swtch)",
          "1484: {",
          "1485:     njs_generator_switch_ctx_t  *ctx;",
          "1487:     ctx = generator->context;",
          "1489:     if (ctx->jump != NULL) {",
          "1491:         njs_code_set_jump_offset(generator, njs_vmcode_jump_t,",
          "1492:                                  ctx->jump_offset);",
          "1498:     return njs_generator_stack_pop(vm, generator, ctx);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1113: njs_generate_while_statement(njs_vm_t *vm, njs_generator_t *generator,",
          "1114:     njs_parser_node_t *node)",
          "1115: {",
          "",
          "[Removed Lines]",
          "1116:     njs_int_t               ret;",
          "1117:     njs_jump_off_t          jump_offset, loop_offset;",
          "1118:     njs_parser_node_t       *condition;",
          "1119:     njs_vmcode_jump_t       *jump;",
          "1120:     njs_vmcode_cond_jump_t  *cond_jump;",
          "",
          "[Added Lines]",
          "1506:     njs_int_t                 ret;",
          "1507:     njs_vmcode_jump_t         *jump;",
          "1508:     njs_generator_loop_ctx_t  ctx;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1128:     njs_generate_code_jump(generator, jump, 0);",
          "1133:     ret = njs_generate_start_block(vm, generator, NJS_GENERATOR_LOOP,",
          "1134:                                    &node->name);",
          "",
          "[Removed Lines]",
          "1129:     jump_offset = njs_code_offset(generator, jump);",
          "",
          "[Added Lines]",
          "1517:     ctx.jump_offset = njs_code_offset(generator, jump);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1136:         return ret;",
          "1137:     }",
          "1148:     njs_generate_patch_block(vm, generator, generator->block->continuation);",
          "1159:     njs_generate_code(generator, njs_vmcode_cond_jump_t, cond_jump,",
          "1164:     njs_generate_patch_block_exit(vm, generator);",
          "1167: }",
          "",
          "[Removed Lines]",
          "1139:     loop_offset = njs_code_offset(generator, generator->code_end);",
          "1141:     ret = njs_generator(vm, generator, node->left);",
          "1142:     if (njs_slow_path(ret != NJS_OK)) {",
          "1143:         return ret;",
          "1144:     }",
          "1150:     njs_code_set_jump_offset(generator, njs_vmcode_jump_t, jump_offset);",
          "1152:     condition = node->right;",
          "1154:     ret = njs_generator(vm, generator, condition);",
          "1155:     if (njs_slow_path(ret != NJS_OK)) {",
          "1156:         return ret;",
          "1157:     }",
          "1160:                       NJS_VMCODE_IF_TRUE_JUMP, 2, condition);",
          "1161:     cond_jump->offset = loop_offset - njs_code_offset(generator, cond_jump);",
          "1162:     cond_jump->cond = condition->index;",
          "1166:     return njs_generate_node_index_release(vm, generator, condition);",
          "",
          "[Added Lines]",
          "1525:     ctx.loop_offset = njs_code_offset(generator, generator->code_end);",
          "1527:     njs_generator_next(generator, njs_generate, node->left);",
          "1529:     return njs_generator_after(vm, generator,",
          "1530:                                njs_queue_first(&generator->stack), node,",
          "1531:                                njs_generate_while_condition,",
          "1532:                                &ctx, sizeof(njs_generator_loop_ctx_t));",
          "1533: }",
          "1536: static njs_int_t",
          "1537: njs_generate_while_condition(njs_vm_t *vm, njs_generator_t *generator,",
          "1538:     njs_parser_node_t *node)",
          "1539: {",
          "1540:     njs_generator_loop_ctx_t  *ctx;",
          "1542:     ctx = generator->context;",
          "1546:     njs_code_set_jump_offset(generator, njs_vmcode_jump_t, ctx->jump_offset);",
          "1548:     njs_generator_next(generator, njs_generate, node->right);",
          "1550:     return njs_generator_after(vm, generator,",
          "1551:                                njs_queue_first(&generator->stack), node,",
          "1552:                                njs_generate_while_end, ctx, 0);",
          "1553: }",
          "1556: static njs_int_t",
          "1557: njs_generate_while_end(njs_vm_t *vm, njs_generator_t *generator,",
          "1558:     njs_parser_node_t *node)",
          "1559: {",
          "1560:     njs_int_t                 ret;",
          "1561:     njs_vmcode_cond_jump_t    *cond_jump;",
          "1562:     njs_generator_loop_ctx_t  *ctx;",
          "1564:     ctx = generator->context;",
          "1567:                       NJS_VMCODE_IF_TRUE_JUMP, 2, node->right);",
          "1568:     cond_jump->offset = ctx->loop_offset - njs_code_offset(generator,",
          "1569:                                                            cond_jump);",
          "1570:     cond_jump->cond = node->right->index;",
          "1574:     ret = njs_generate_node_index_release(vm, generator, node->right);",
          "1575:     if (njs_slow_path(ret != NJS_OK)) {",
          "1576:         return ret;",
          "1577:     }",
          "1579:     return njs_generator_stack_pop(vm, generator, ctx);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1171: njs_generate_do_while_statement(njs_vm_t *vm, njs_generator_t *generator,",
          "1172:     njs_parser_node_t *node)",
          "1173: {",
          "1181:     ret = njs_generate_start_block(vm, generator, NJS_GENERATOR_LOOP,",
          "1182:                                    &node->name);",
          "",
          "[Removed Lines]",
          "1174:     njs_int_t               ret;",
          "1175:     njs_jump_off_t          loop_offset;",
          "1176:     njs_parser_node_t       *condition;",
          "1177:     njs_vmcode_cond_jump_t  *cond_jump;",
          "",
          "[Added Lines]",
          "1587:     njs_int_t                 ret;",
          "1588:     njs_generator_loop_ctx_t  ctx;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1184:         return ret;",
          "1185:     }",
          "1196:     njs_generate_patch_block(vm, generator, generator->block->continuation);",
          "1205:     njs_generate_code(generator, njs_vmcode_cond_jump_t, cond_jump,",
          "1210:     njs_generate_patch_block_exit(vm, generator);",
          "1213: }",
          "",
          "[Removed Lines]",
          "1187:     loop_offset = njs_code_offset(generator, generator->code_end);",
          "1189:     ret = njs_generator(vm, generator, node->left);",
          "1190:     if (njs_slow_path(ret != NJS_OK)) {",
          "1191:         return ret;",
          "1192:     }",
          "1198:     condition = node->right;",
          "1200:     ret = njs_generator(vm, generator, condition);",
          "1201:     if (njs_slow_path(ret != NJS_OK)) {",
          "1202:         return ret;",
          "1203:     }",
          "1206:                       NJS_VMCODE_IF_TRUE_JUMP, 2, condition);",
          "1207:     cond_jump->offset = loop_offset - njs_code_offset(generator, cond_jump);",
          "1208:     cond_jump->cond = condition->index;",
          "1212:     return njs_generate_node_index_release(vm, generator, condition);",
          "",
          "[Added Lines]",
          "1596:     ctx.loop_offset = njs_code_offset(generator, generator->code_end);",
          "1598:     njs_generator_next(generator, njs_generate, node->left);",
          "1600:     return njs_generator_after(vm, generator,",
          "1601:                                njs_queue_first(&generator->stack), node,",
          "1602:                                njs_generate_do_while_condition,",
          "1603:                                &ctx, sizeof(njs_generator_loop_ctx_t));",
          "1604: }",
          "1607: static njs_int_t",
          "1608: njs_generate_do_while_condition(njs_vm_t *vm, njs_generator_t *generator,",
          "1609:     njs_parser_node_t *node)",
          "1610: {",
          "1613:     njs_generator_next(generator, njs_generate, node->right);",
          "1615:     return njs_generator_after(vm, generator,",
          "1616:                                njs_queue_first(&generator->stack), node,",
          "1617:                                njs_generate_do_while_end,",
          "1618:                                generator->context, 0);",
          "1619: }",
          "1622: static njs_int_t",
          "1623: njs_generate_do_while_end(njs_vm_t *vm, njs_generator_t *generator,",
          "1624:     njs_parser_node_t *node)",
          "1625: {",
          "1626:     njs_int_t                 ret;",
          "1627:     njs_vmcode_cond_jump_t    *cond_jump;",
          "1628:     njs_generator_loop_ctx_t  *ctx;",
          "1630:     ctx = generator->context;",
          "1633:                       NJS_VMCODE_IF_TRUE_JUMP, 2, node->right);",
          "1634:     cond_jump->offset = ctx->loop_offset",
          "1635:                         - njs_code_offset(generator, cond_jump);",
          "1636:     cond_jump->cond = node->right->index;",
          "1640:     ret = njs_generate_node_index_release(vm, generator, node->right);",
          "1641:     if (njs_slow_path(ret != NJS_OK)) {",
          "1642:         return ret;",
          "1643:     }",
          "1645:     return njs_generator_stack_pop(vm, generator, ctx);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1217: njs_generate_for_statement(njs_vm_t *vm, njs_generator_t *generator,",
          "1218:     njs_parser_node_t *node)",
          "1219: {",
          "1226:     ret = njs_generate_start_block(vm, generator, NJS_GENERATOR_LOOP,",
          "1227:                                    &node->name);",
          "",
          "[Removed Lines]",
          "1220:     njs_int_t               ret;",
          "1221:     njs_jump_off_t          jump_offset, loop_offset;",
          "1222:     njs_parser_node_t       *condition, *update, *init;",
          "1223:     njs_vmcode_jump_t       *jump;",
          "1224:     njs_vmcode_cond_jump_t  *cond_jump;",
          "",
          "[Added Lines]",
          "1653:     njs_int_t                 ret;",
          "1654:     njs_generator_loop_ctx_t  ctx;",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1229:         return ret;",
          "1230:     }",
          "1241:     ret = njs_generate_node_index_release(vm, generator, node->left);",
          "1242:     if (njs_slow_path(ret != NJS_OK)) {",
          "1243:         return ret;",
          "1244:     }",
          "",
          "[Removed Lines]",
          "1232:     jump = NULL;",
          "1236:     ret = njs_generator(vm, generator, node->left);",
          "1237:     if (njs_slow_path(ret != NJS_OK)) {",
          "1238:         return ret;",
          "1239:     }",
          "1246:     init = node->left;",
          "1247:     node = node->right;",
          "1248:     condition = node->left;",
          "",
          "[Added Lines]",
          "1662:     ctx.jump = NULL;",
          "1664:     njs_generator_next(generator, njs_generate, node->left);",
          "1666:     return njs_generator_after(vm, generator,",
          "1667:                                njs_queue_first(&generator->stack), node,",
          "1668:                                njs_generate_for_init,",
          "1669:                                &ctx, sizeof(njs_generator_loop_ctx_t));",
          "1670: }",
          "1673: static njs_int_t",
          "1674: njs_generate_for_init(njs_vm_t *vm, njs_generator_t *generator,",
          "1675:     njs_parser_node_t *node)",
          "1676: {",
          "1677:     njs_int_t                 ret;",
          "1678:     njs_parser_node_t         *condition;",
          "1679:     njs_generator_loop_ctx_t  *ctx;",
          "1681:     ctx = generator->context;",
          "1688:     condition = node->right->left;",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1257:         return ret;",
          "1258:     }",
          "1263:     if (condition != NULL) {",
          "",
          "[Removed Lines]",
          "1261:     jump_offset = 0;",
          "",
          "[Added Lines]",
          "1700:     ctx->jump_offset = 0;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1271:     }",
          "1288:     ret = njs_generate_for_resolve_closure(vm, update, generator->count);",
          "1289:     if (njs_slow_path(ret != NJS_OK)) {",
          "",
          "[Removed Lines]",
          "1269:         njs_generate_code_jump(generator, jump, 0);",
          "1270:         jump_offset = njs_code_offset(generator, jump);",
          "1275:     loop_offset = njs_code_offset(generator, generator->code_end);",
          "1277:     node = node->right;",
          "1279:     ret = njs_generator(vm, generator, node->left);",
          "1280:     if (njs_slow_path(ret != NJS_OK)) {",
          "1281:         return ret;",
          "1282:     }",
          "1286:     update = node->right;",
          "",
          "[Added Lines]",
          "1708:         njs_generate_code_jump(generator, ctx->jump, 0);",
          "1709:         ctx->jump_offset = njs_code_offset(generator, ctx->jump);",
          "1714:     ctx->loop_offset = njs_code_offset(generator, generator->code_end);",
          "1716:     njs_generator_next(generator, njs_generate, node->right->right->left);",
          "1718:     return njs_generator_after(vm, generator,",
          "1719:                                njs_queue_first(&generator->stack), node,",
          "1720:                                njs_generate_for_body, ctx, 0);",
          "1721: }",
          "1724: static njs_int_t",
          "1725: njs_generate_for_body(njs_vm_t *vm, njs_generator_t *generator,",
          "1726:     njs_parser_node_t *node)",
          "1727: {",
          "1728:     njs_int_t                 ret;",
          "1729:     njs_parser_node_t         *update, *init;",
          "1730:     njs_generator_loop_ctx_t  *ctx;",
          "1732:     ctx = generator->context;",
          "1736:     init = node->left;",
          "1737:     update = node->right->right->right;",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1298:     njs_generate_patch_block(vm, generator, generator->block->continuation);",
          "1305:     ret = njs_generate_node_index_release(vm, generator, update);",
          "1306:     if (njs_slow_path(ret != NJS_OK)) {",
          "",
          "[Removed Lines]",
          "1300:     ret = njs_generator(vm, generator, update);",
          "1301:     if (njs_slow_path(ret != NJS_OK)) {",
          "1302:         return ret;",
          "1303:     }",
          "",
          "[Added Lines]",
          "1751:     njs_generator_next(generator, njs_generate, update);",
          "1753:     return njs_generator_after(vm, generator,",
          "1754:                                njs_queue_first(&generator->stack), node,",
          "1755:                                njs_generate_for_update, ctx, 0);",
          "1756: }",
          "1759: static njs_int_t",
          "1760: njs_generate_for_update(njs_vm_t *vm, njs_generator_t *generator,",
          "1761:     njs_parser_node_t *node)",
          "1762: {",
          "1763:     njs_int_t                 ret;",
          "1764:     njs_parser_node_t         *condition, *update;",
          "1765:     njs_generator_loop_ctx_t  *ctx;",
          "1767:     ctx = generator->context;",
          "1769:     update = node->right->right->right;",
          "1770:     condition = node->right->left;",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1312:     if (condition != NULL) {",
          "1320:         njs_generate_code(generator, njs_vmcode_cond_jump_t, cond_jump,",
          "1321:                           NJS_VMCODE_IF_TRUE_JUMP, 2, condition);",
          "1323:         cond_jump->cond = condition->index;",
          "1325:         njs_generate_patch_block_exit(vm, generator);",
          "1328:     }",
          "1333:     njs_generate_patch_block_exit(vm, generator);",
          "1336: }",
          "",
          "[Removed Lines]",
          "1313:         njs_code_set_jump_offset(generator, njs_vmcode_jump_t, jump_offset);",
          "1315:         ret = njs_generator(vm, generator, condition);",
          "1316:         if (njs_slow_path(ret != NJS_OK)) {",
          "1317:             return ret;",
          "1318:         }",
          "1322:         cond_jump->offset = loop_offset - njs_code_offset(generator, cond_jump);",
          "1327:         return njs_generate_node_index_release(vm, generator, condition);",
          "1330:     njs_generate_code_jump(generator, jump,",
          "1331:                            loop_offset - njs_code_offset(generator, jump));",
          "1335:     return NJS_OK;",
          "",
          "[Added Lines]",
          "1780:         njs_code_set_jump_offset(generator, njs_vmcode_jump_t,",
          "1781:                                  ctx->jump_offset);",
          "1783:         njs_generator_next(generator, njs_generate, condition);",
          "1785:         return njs_generator_after(vm, generator,",
          "1786:                                    njs_queue_first(&generator->stack), node,",
          "1787:                                    njs_generate_for_end, ctx, 0);",
          "1788:     }",
          "1790:     return njs_generate_for_end(vm, generator, node);",
          "1791: }",
          "1794: static njs_int_t",
          "1795: njs_generate_for_end(njs_vm_t *vm, njs_generator_t *generator,",
          "1796:     njs_parser_node_t *node)",
          "1797: {",
          "1798:     njs_int_t                 ret;",
          "1799:     njs_parser_node_t         *condition;",
          "1800:     njs_vmcode_cond_jump_t    *cond_jump;",
          "1801:     njs_generator_loop_ctx_t  *ctx;",
          "1803:     ctx = generator->context;",
          "1805:     condition = node->right->left;",
          "1807:     if (condition != NULL) {",
          "1810:         cond_jump->offset = ctx->loop_offset",
          "1811:                             - njs_code_offset(generator, cond_jump);",
          "1816:         ret = njs_generate_node_index_release(vm, generator, condition);",
          "1817:         if (njs_slow_path(ret != NJS_OK)) {",
          "1818:             return ret;",
          "1819:         }",
          "1821:         return njs_generator_stack_pop(vm, generator, ctx);",
          "1824:     njs_generate_code_jump(generator, ctx->jump,",
          "1825:                            ctx->loop_offset - njs_code_offset(generator,",
          "1826:                                                               ctx->jump));",
          "1830:     return njs_generator_stack_pop(vm, generator, ctx);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1423: njs_generate_for_in_statement(njs_vm_t *vm, njs_generator_t *generator,",
          "1424:     njs_parser_node_t *node)",
          "1425: {",
          "1434:     ret = njs_generate_start_block(vm, generator, NJS_GENERATOR_LOOP,",
          "1435:                                    &node->name);",
          "",
          "[Removed Lines]",
          "1426:     njs_int_t                  ret;",
          "1427:     njs_index_t                index;",
          "1428:     njs_variable_t             *var;",
          "1429:     njs_jump_off_t             loop_offset, prop_offset;",
          "1430:     njs_parser_node_t          *foreach, *name;",
          "1431:     njs_vmcode_prop_next_t     *prop_next;",
          "1432:     njs_vmcode_prop_foreach_t  *prop_foreach;",
          "",
          "[Added Lines]",
          "1921:     njs_int_t                 ret;",
          "1922:     njs_parser_node_t         *foreach, *name;",
          "1923:     njs_generator_loop_ctx_t  ctx;",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1446:         name = name->left;",
          "1448:         ret = njs_generate_variable_wo_dest(vm, generator, name,",
          "1450:         if (njs_slow_path(ret != NJS_OK)) {",
          "1451:             return NJS_ERROR;",
          "1452:         }",
          "1454:         foreach->left->index = name->index;",
          "1473:     }",
          "1475:     njs_generate_code(generator, njs_vmcode_prop_foreach_t, prop_foreach,",
          "1476:                       NJS_VMCODE_PROPERTY_FOREACH, 2, foreach);",
          "1478:     prop_foreach->object = foreach->right->index;",
          "1482:         return NJS_ERROR;",
          "1483:     }",
          "",
          "[Removed Lines]",
          "1449:                                             NJS_DECLARATION, &var);",
          "1456:         ret = njs_generator(vm, generator, foreach->right);",
          "1457:         if (njs_slow_path(ret != NJS_OK)) {",
          "1458:             return ret;",
          "1459:         }",
          "1461:         var->init = 1;",
          "1463:     } else {",
          "1464:         ret = njs_generator(vm, generator, foreach->left);",
          "1465:         if (njs_slow_path(ret != NJS_OK)) {",
          "1466:             return ret;",
          "1467:         }",
          "1469:         ret = njs_generator(vm, generator, foreach->right);",
          "1470:         if (njs_slow_path(ret != NJS_OK)) {",
          "1471:             return ret;",
          "1472:         }",
          "1477:     prop_offset = njs_code_offset(generator, prop_foreach);",
          "1480:     index = njs_generate_temp_index_get(vm, generator, foreach->right);",
          "1481:     if (njs_slow_path(index == NJS_INDEX_ERROR)) {",
          "1485:     prop_foreach->next = index;",
          "1489:     loop_offset = njs_code_offset(generator, generator->code_end);",
          "1491:     ret = njs_generator(vm, generator, node->right);",
          "1492:     if (njs_slow_path(ret != NJS_OK)) {",
          "1493:         return ret;",
          "1494:     }",
          "",
          "[Added Lines]",
          "1940:                                             NJS_DECLARATION, &ctx.var);",
          "1947:         njs_generator_next(generator, njs_generate, foreach->right);",
          "1949:         return njs_generator_after(vm, generator,",
          "1950:                                    njs_queue_first(&generator->stack), node,",
          "1951:                                    njs_generate_for_in_object,",
          "1952:                                    &ctx, sizeof(njs_generator_loop_ctx_t));",
          "1953:     }",
          "1955:     njs_generator_next(generator, njs_generate, foreach->left);",
          "1957:     ret = njs_generator_after(vm, generator,",
          "1958:                               njs_queue_first(&generator->stack), node,",
          "1959:                               njs_generate_for_in_object,",
          "1960:                               &ctx, sizeof(njs_generator_loop_ctx_t));",
          "1961:     if (njs_slow_path(ret != NJS_OK)) {",
          "1962:         return ret;",
          "1963:     }",
          "1965:     return njs_generator_after(vm, generator,",
          "1966:                                njs_queue_first(&generator->stack),",
          "1967:                                foreach->right, njs_generate, NULL, 0);",
          "1968: }",
          "1971: static njs_int_t",
          "1972: njs_generate_for_in_object(njs_vm_t *vm, njs_generator_t *generator,",
          "1973:     njs_parser_node_t *node)",
          "1974: {",
          "1975:     njs_parser_node_t          *foreach, *name;",
          "1976:     njs_generator_loop_ctx_t   *ctx;",
          "1977:     njs_vmcode_prop_foreach_t  *prop_foreach;",
          "1979:     ctx = generator->context;",
          "1981:     foreach = node->left;",
          "1982:     name = foreach->left->right;",
          "1984:     if (name != NULL) {",
          "1985:         ctx->var->init = 1;",
          "1990:     ctx->jump_offset = njs_code_offset(generator, prop_foreach);",
          "1993:     ctx->index = njs_generate_temp_index_get(vm, generator, foreach->right);",
          "1994:     if (njs_slow_path(ctx->index == NJS_INDEX_ERROR)) {",
          "1998:     prop_foreach->next = ctx->index;",
          "2002:     ctx->loop_offset = njs_code_offset(generator, generator->code_end);",
          "2004:     njs_generator_next(generator, njs_generate, node->right);",
          "2006:     return njs_generator_after(vm, generator,",
          "2007:                                njs_queue_first(&generator->stack), node,",
          "2008:                                njs_generate_for_in_body, ctx, 0);",
          "2009: }",
          "2012: static njs_int_t",
          "2013: njs_generate_for_in_body(njs_vm_t *vm, njs_generator_t *generator,",
          "2014:     njs_parser_node_t *node)",
          "2015: {",
          "2016:     njs_int_t                 ret;",
          "2017:     njs_jump_off_t            prop_offset;",
          "2018:     njs_parser_node_t         *foreach, *name;",
          "2019:     njs_vmcode_prop_next_t    *prop_next;",
          "2020:     njs_generator_loop_ctx_t  *ctx;",
          "2022:     ctx = generator->context;",
          "2024:     foreach = node->left;",
          "2025:     name = foreach->left->right;",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1506:     njs_generate_patch_block(vm, generator, generator->block->continuation);",
          "1510:     njs_generate_code(generator, njs_vmcode_prop_next_t, prop_next,",
          "1511:                       NJS_VMCODE_PROPERTY_NEXT, 3, node->left->left);",
          "1512:     prop_offset = njs_code_offset(generator, prop_next);",
          "1513:     prop_next->retval = foreach->left->index;",
          "1514:     prop_next->object = foreach->right->index;",
          "1518:     njs_generate_patch_block_exit(vm, generator);",
          "",
          "[Removed Lines]",
          "1508:     njs_code_set_jump_offset(generator, njs_vmcode_prop_foreach_t, prop_offset);",
          "1515:     prop_next->next = index;",
          "1516:     prop_next->offset = loop_offset - prop_offset;",
          "",
          "[Added Lines]",
          "2039:     njs_code_set_jump_offset(generator, njs_vmcode_prop_foreach_t,",
          "2040:                              ctx->jump_offset);",
          "2047:     prop_next->next = ctx->index;",
          "2048:     prop_next->offset = ctx->loop_offset - prop_offset;",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1526:         return ret;",
          "1527:     }",
          "1530: }",
          "",
          "[Removed Lines]",
          "1529:     return njs_generate_index_release(vm, generator, index);",
          "",
          "[Added Lines]",
          "2061:     ret = njs_generate_index_release(vm, generator, ctx->index);",
          "2062:     if (njs_slow_path(ret != NJS_OK)) {",
          "2063:         return ret;",
          "2064:     }",
          "2066:     return njs_generator_stack_pop(vm, generator, ctx);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1769:         return NJS_ERROR;",
          "1770:     }",
          "1774: syntax_error:",
          "",
          "[Removed Lines]",
          "1772:     return NJS_OK;",
          "",
          "[Added Lines]",
          "2309:     return njs_generator_stack_pop(vm, generator, NULL);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1814:         return NJS_ERROR;",
          "1815:     }",
          "1819: syntax_error:",
          "",
          "[Removed Lines]",
          "1817:     return NJS_OK;",
          "",
          "[Added Lines]",
          "2354:     return njs_generator_stack_pop(vm, generator, NULL);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1838:         return debugger->retval;",
          "1839:     }",
          "1842: }",
          "",
          "[Removed Lines]",
          "1841:     return NJS_OK;",
          "",
          "[Added Lines]",
          "2378:     return njs_generator_stack_pop(vm, generator, NULL);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1848: {",
          "1849:     njs_int_t              ret;",
          "1850:     njs_variable_t         *var;",
          "1851:     njs_parser_node_t      *right;",
          "1852:     njs_vmcode_variable_t  *code;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2388:     njs_queue_link_t       *link;",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1868:         }",
          "1870:         if (node->left == NULL) {",
          "1872:         }",
          "1874:         node = node->left;",
          "",
          "[Removed Lines]",
          "1871:             return NJS_OK;",
          "",
          "[Added Lines]",
          "2409:             return njs_generator_stack_pop(vm, generator, NULL);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1877: statement:",
          "1883:     }",
          "1886: }",
          "1889: static njs_int_t",
          "1890: njs_generate_block_statement(njs_vm_t *vm, njs_generator_t *generator,",
          "1891:     njs_parser_node_t *node)",
          "1892: {",
          "1895:     ret = njs_generate_start_block(vm, generator, NJS_GENERATOR_BLOCK,",
          "1896:                                    &node->name);",
          "",
          "[Removed Lines]",
          "1879:     ret = njs_generate_children(vm, generator, node);",
          "1881:     if (njs_fast_path(ret == NJS_OK)) {",
          "1882:         return njs_generate_node_index_release(vm, generator, right);",
          "1885:     return ret;",
          "1893:     njs_int_t  ret;",
          "",
          "[Added Lines]",
          "2417:     link = njs_queue_first(&generator->stack);",
          "2419:     ret = njs_generate_children(vm, generator, node);",
          "2420:     if (njs_slow_path(ret != NJS_OK)) {",
          "2421:         return ret;",
          "2424:     return njs_generator_after(vm, generator, link, right,",
          "2425:                                njs_generate_node_index_release_pop, NULL, 0);",
          "2432:     njs_int_t         ret;",
          "2433:     njs_queue_link_t  *link;",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1898:         return ret;",
          "1899:     }",
          "1901:     ret = njs_generate_statement(vm, generator, node);",
          "1902:     if (njs_slow_path(ret != NJS_OK)) {",
          "1903:         return ret;",
          "1904:     }",
          "1906:     njs_generate_patch_block_exit(vm, generator);",
          "1909: }",
          "",
          "[Removed Lines]",
          "1908:     return ret;",
          "",
          "[Added Lines]",
          "2441:     link = njs_queue_first(&generator->stack);",
          "2448:     return njs_generator_after(vm, generator, link, node,",
          "2449:                                njs_generate_block_statement_end, NULL, 0);",
          "2450: }",
          "2453: static njs_int_t",
          "2454: njs_generate_block_statement_end(njs_vm_t *vm, njs_generator_t *generator,",
          "2455:     njs_parser_node_t *node)",
          "2456: {",
          "2459:     return njs_generator_stack_pop(vm, generator, NULL);",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1915: {",
          "1916:     njs_int_t  ret;",
          "1924:     if (njs_slow_path(ret != NJS_OK)) {",
          "1925:         return ret;",
          "1926:     }",
          "1929: }",
          "",
          "[Removed Lines]",
          "1918:     ret = njs_generator(vm, generator, node->left);",
          "1919:     if (njs_slow_path(ret != NJS_OK)) {",
          "1920:         return ret;",
          "1921:     }",
          "1923:     ret = njs_generate_node_index_release(vm, generator, node->left);",
          "1928:     return njs_generator(vm, generator, node->right);",
          "",
          "[Added Lines]",
          "2469:     njs_generator_next(generator, njs_generate, node->left);",
          "2471:     ret = njs_generator_after(vm, generator,",
          "2472:                               njs_queue_first(&generator->stack), node->right,",
          "2473:                               njs_generate, NULL, 0);",
          "2478:     return njs_generator_after(vm, generator,",
          "2479:                                njs_queue_first(&generator->stack), node->left,",
          "2480:                                njs_generate_node_index_release_pop, NULL, 0);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1934:     njs_parser_node_t *node)",
          "1935: {",
          "1936:     njs_int_t          ret;",
          "1940:     ret = njs_generate_children(vm, generator, node);",
          "1959:     }",
          "1962: }",
          "",
          "[Removed Lines]",
          "1937:     njs_index_t        index;",
          "1938:     njs_vmcode_stop_t  *stop;",
          "1942:     if (njs_fast_path(ret == NJS_OK)) {",
          "1943:         njs_generate_code(generator, njs_vmcode_stop_t, stop,",
          "1944:                           NJS_VMCODE_STOP, 1, node);",
          "1946:         index = njs_scope_undefined_index(vm, 0);",
          "1947:         node = node->right;",
          "1949:         if (node != NULL) {",
          "1950:             if ((node->index != NJS_INDEX_NONE",
          "1951:                  && node->token_type != NJS_TOKEN_FUNCTION_DECLARATION)",
          "1952:                 || node->token_type == NJS_TOKEN_THIS)",
          "1953:             {",
          "1954:                 index = node->index;",
          "1955:             }",
          "1956:         }",
          "1958:         stop->retval = index;",
          "1961:     return ret;",
          "",
          "[Added Lines]",
          "2489:     njs_queue_link_t   *link;",
          "2491:     link = njs_queue_first(&generator->stack);",
          "2494:     if (njs_fast_path(ret != NJS_OK)) {",
          "2495:         return ret;",
          "2496:     }",
          "2498:     return njs_generator_after(vm, generator, link, node,",
          "2499:                                njs_generate_stop_statement_end, NULL, 0);",
          "2500: }",
          "2503: static njs_int_t",
          "2504: njs_generate_stop_statement_end(njs_vm_t *vm, njs_generator_t *generator,",
          "2505:     njs_parser_node_t *node)",
          "2506: {",
          "2507:     njs_index_t        index;",
          "2508:     njs_vmcode_stop_t  *stop;",
          "2510:     njs_generate_code(generator, njs_vmcode_stop_t, stop,",
          "2511:                       NJS_VMCODE_STOP, 1, node);",
          "2513:     index = njs_scope_undefined_index(vm, 0);",
          "2514:     node = node->right;",
          "2516:     if (node != NULL) {",
          "2517:         if ((node->index != NJS_INDEX_NONE",
          "2518:              && node->token_type != NJS_TOKEN_FUNCTION_DECLARATION)",
          "2519:             || node->token_type == NJS_TOKEN_THIS)",
          "2520:         {",
          "2521:             index = node->index;",
          "2522:         }",
          "2525:     stop->retval = index;",
          "2527:     return njs_generator_stack_pop(vm, generator, NULL);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1966: njs_generate_comma_expression(njs_vm_t *vm, njs_generator_t *generator,",
          "1967:     njs_parser_node_t *node)",
          "1968: {",
          "1975:     }",
          "1978: }",
          "",
          "[Removed Lines]",
          "1969:     njs_int_t  ret;",
          "1971:     ret = njs_generate_children(vm, generator, node);",
          "1973:     if (njs_fast_path(ret == NJS_OK)) {",
          "1974:         node->index = node->right->index;",
          "1977:     return ret;",
          "",
          "[Added Lines]",
          "2535:     njs_int_t         ret;",
          "2536:     njs_queue_link_t  *link;",
          "2538:     link = njs_queue_first(&generator->stack);",
          "2540:     ret = njs_generate_children(vm, generator, node);",
          "2541:     if (njs_fast_path(ret != NJS_OK)) {",
          "2542:         return ret;",
          "2545:     return njs_generator_after(vm, generator, link, node,",
          "2546:                                njs_generate_comma_expression_end, NULL, 0);",
          "2547: }",
          "2550: static njs_int_t",
          "2551: njs_generate_comma_expression_end(njs_vm_t *vm, njs_generator_t *generator,",
          "2552:     njs_parser_node_t *node)",
          "2553: {",
          "2554:     node->index = node->right->index;",
          "2556:     return njs_generator_stack_pop(vm, generator, NULL);",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1983:     njs_parser_node_t *node)",
          "1984: {",
          "1985:     njs_int_t              ret;",
          "1987:     njs_variable_t         *var;",
          "1990:     njs_vmcode_variable_t  *var_code;",
          "1993:     lvalue = node->left;",
          "1994:     expr = node->right;",
          "",
          "[Removed Lines]",
          "1986:     njs_index_t            index, src;",
          "1988:     njs_parser_node_t      *lvalue, *expr, *object, *property;",
          "1989:     njs_vmcode_move_t      *move;",
          "1991:     njs_vmcode_prop_set_t  *prop_set;",
          "",
          "[Added Lines]",
          "2566:     njs_parser_node_t      *lvalue, *expr;",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "2007:                               NJS_VMCODE_ASSIGNMENT_ERROR, 0, node);",
          "2008:             var_code->dst = var->index;",
          "2011:         }",
          "2013:         expr->dest = lvalue;",
          "2033:     }",
          "2042:     if (njs_slow_path(ret != NJS_OK)) {",
          "2043:         return ret;",
          "2044:     }",
          "2053:     }",
          "2055:     if (njs_slow_path(njs_parser_has_side_effect(expr))) {",
          "",
          "[Removed Lines]",
          "2010:             return NJS_OK;",
          "2015:         ret = njs_generator(vm, generator, expr);",
          "2016:         if (njs_slow_path(ret != NJS_OK)) {",
          "2017:             return ret;",
          "2018:         }",
          "2024:         if (lvalue->index != expr->index) {",
          "2025:             njs_generate_code_move(generator, move, lvalue->index, expr->index,",
          "2026:                                    expr);",
          "2027:         }",
          "2029:         node->index = expr->index;",
          "2030:         node->temporary = expr->temporary;",
          "2032:         return NJS_OK;",
          "2039:     object = lvalue->left;",
          "2041:     ret = njs_generator(vm, generator, object);",
          "2048:     property = lvalue->right;",
          "2050:     ret = njs_generator(vm, generator, property);",
          "2051:     if (njs_slow_path(ret != NJS_OK)) {",
          "2052:         return ret;",
          "",
          "[Added Lines]",
          "2586:             return njs_generator_stack_pop(vm, generator, NULL);",
          "2591:         njs_generator_next(generator, njs_generate, expr);",
          "2593:         return njs_generator_after(vm, generator,",
          "2594:                                    njs_queue_first(&generator->stack), node,",
          "2595:                                    njs_generate_assignment_name, NULL, 0);",
          "2602:     njs_generator_next(generator, njs_generate, lvalue->left);",
          "2604:     ret = njs_generator_after(vm, generator,",
          "2605:                               njs_queue_first(&generator->stack), node,",
          "2606:                               njs_generate_assignment_prop, NULL, 0);",
          "2613:     return njs_generator_after(vm, generator,",
          "2614:                                njs_queue_first(&generator->stack),",
          "2615:                                lvalue->right, njs_generate, NULL, 0);",
          "2616: }",
          "2619: static njs_int_t",
          "2620: njs_generate_assignment_name(njs_vm_t *vm, njs_generator_t *generator,",
          "2621:     njs_parser_node_t *node)",
          "2622: {",
          "2623:     njs_parser_node_t  *lvalue, *expr;",
          "2624:     njs_vmcode_move_t  *move;",
          "2626:     lvalue = node->left;",
          "2627:     expr = node->right;",
          "2633:     if (lvalue->index != expr->index) {",
          "2634:         njs_generate_code_move(generator, move, lvalue->index, expr->index,",
          "2635:                                expr);",
          "2638:     node->index = expr->index;",
          "2639:     node->temporary = expr->temporary;",
          "2641:     return njs_generator_stack_pop(vm, generator, NULL);",
          "2642: }",
          "2645: static njs_int_t",
          "2646: njs_generate_assignment_prop(njs_vm_t *vm, njs_generator_t *generator,",
          "2647:     njs_parser_node_t *node)",
          "2648: {",
          "2649:     njs_index_t        index, src;",
          "2650:     njs_parser_node_t  *lvalue, *expr, *object, *property;",
          "2651:     njs_vmcode_move_t  *move;",
          "2653:     lvalue = node->left;",
          "2654:     expr = node->right;",
          "2656:     object = lvalue->left;",
          "2657:     property = lvalue->right;",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "2080:         }",
          "2081:     }",
          "2088:     switch (lvalue->token_type) {",
          "2089:     case NJS_TOKEN_PROPERTY_INIT:",
          "",
          "[Removed Lines]",
          "2083:     ret = njs_generator(vm, generator, expr);",
          "2084:     if (njs_slow_path(ret != NJS_OK)) {",
          "2085:         return ret;",
          "2086:     }",
          "",
          "[Added Lines]",
          "2687:     njs_generator_next(generator, njs_generate, expr);",
          "2689:     return njs_generator_after(vm, generator,",
          "2690:                                njs_queue_first(&generator->stack), node,",
          "2691:                                njs_generate_assignment_end, NULL, 0);",
          "2692: }",
          "2695: static njs_int_t",
          "2696: njs_generate_assignment_end(njs_vm_t *vm, njs_generator_t *generator,",
          "2697:     njs_parser_node_t *node)",
          "2698: {",
          "2699:     njs_parser_node_t      *lvalue, *expr, *object, *property;",
          "2700:     njs_vmcode_prop_set_t  *prop_set;",
          "2702:     lvalue = node->left;",
          "2703:     expr = node->right;",
          "2705:     object = lvalue->left;",
          "2706:     property = lvalue->right;",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "2109:     node->index = expr->index;",
          "2110:     node->temporary = expr->temporary;",
          "2113: }",
          "",
          "[Removed Lines]",
          "2112:     return njs_generate_children_indexes_release(vm, generator, lvalue);",
          "",
          "[Added Lines]",
          "2732:     return njs_generate_children_indexes_release_pop(vm, generator, lvalue);",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "2118:     njs_parser_node_t *node)",
          "2119: {",
          "2120:     njs_int_t              ret;",
          "2122:     njs_variable_t         *var;",
          "2124:     njs_vmcode_move_t      *move;",
          "2126:     njs_vmcode_variable_t  *var_code;",
          "2130:     lvalue = node->left;",
          "",
          "[Removed Lines]",
          "2121:     njs_index_t            index, src;",
          "2123:     njs_parser_node_t      *lvalue, *expr, *object, *property;",
          "2125:     njs_vmcode_3addr_t     *code;",
          "2127:     njs_vmcode_prop_get_t  *prop_get;",
          "2128:     njs_vmcode_prop_set_t  *prop_set;",
          "",
          "[Added Lines]",
          "2741:     njs_index_t            index;",
          "2743:     njs_parser_node_t      *lvalue, *expr;",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "2142:                               NJS_VMCODE_ASSIGNMENT_ERROR, 0, node);",
          "2143:             var_code->dst = var->index;",
          "2146:         }",
          "2148:         index = lvalue->index;",
          "",
          "[Removed Lines]",
          "2145:             return NJS_OK;",
          "",
          "[Added Lines]",
          "2762:             return njs_generator_stack_pop(vm, generator, NULL);",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "2163:             move->dst = index;",
          "2164:         }",
          "2187:     }",
          "2196:     if (njs_slow_path(ret != NJS_OK)) {",
          "2197:         return ret;",
          "2198:     }",
          "2207:     }",
          "2209:     if (njs_slow_path(njs_parser_has_side_effect(node->right))) {",
          "",
          "[Removed Lines]",
          "2166:         ret = njs_generator(vm, generator, expr);",
          "2167:         if (njs_slow_path(ret != NJS_OK)) {",
          "2168:             return ret;",
          "2169:         }",
          "2171:         njs_generate_code(generator, njs_vmcode_3addr_t, code,",
          "2172:                           node->u.operation, 3, expr);",
          "2173:         code->dst = lvalue->index;",
          "2174:         code->src1 = index;",
          "2175:         code->src2 = expr->index;",
          "2177:         node->index = lvalue->index;",
          "2179:         if (lvalue->index != index) {",
          "2180:             ret = njs_generate_index_release(vm, generator, index);",
          "2181:             if (njs_slow_path(ret != NJS_OK)) {",
          "2182:                 return ret;",
          "2183:             }",
          "2184:         }",
          "2186:         return njs_generate_node_index_release(vm, generator, expr);",
          "2193:     object = lvalue->left;",
          "2195:     ret = njs_generator(vm, generator, object);",
          "2202:     property = lvalue->right;",
          "2204:     ret = njs_generator(vm, generator, property);",
          "2205:     if (njs_slow_path(ret != NJS_OK)) {",
          "2206:         return ret;",
          "",
          "[Added Lines]",
          "2783:         njs_generator_next(generator, njs_generate, expr);",
          "2785:         return njs_generator_after(vm, generator,",
          "2786:                                    njs_queue_first(&generator->stack), node,",
          "2787:                                    njs_generate_operation_assignment_name,",
          "2788:                                    &index, sizeof(njs_index_t));",
          "2795:     njs_generator_next(generator, njs_generate, lvalue->left);",
          "2797:     ret = njs_generator_after(vm, generator,",
          "2798:                               njs_queue_first(&generator->stack), node,",
          "2799:                               njs_generate_operation_assignment_prop, NULL, 0);",
          "2806:     return njs_generator_after(vm, generator,",
          "2807:                                njs_queue_first(&generator->stack),",
          "2808:                                lvalue->right, njs_generate, NULL, 0);",
          "2809: }",
          "2812: static njs_int_t",
          "2813: njs_generate_operation_assignment_name(njs_vm_t *vm, njs_generator_t *generator,",
          "2814:     njs_parser_node_t *node)",
          "2815: {",
          "2816:     njs_int_t           ret;",
          "2817:     njs_index_t         index;",
          "2818:     njs_parser_node_t   *lvalue, *expr;",
          "2819:     njs_vmcode_3addr_t  *code;",
          "2821:     lvalue = node->left;",
          "2822:     expr = node->right;",
          "2824:     index = *((njs_index_t *) generator->context);",
          "2826:     njs_generate_code(generator, njs_vmcode_3addr_t, code,",
          "2827:                       node->u.operation, 3, expr);",
          "2828:     code->dst = lvalue->index;",
          "2829:     code->src1 = index;",
          "2830:     code->src2 = expr->index;",
          "2832:     node->index = lvalue->index;",
          "2834:     if (lvalue->index != index) {",
          "2835:         ret = njs_generate_index_release(vm, generator, index);",
          "2836:         if (njs_slow_path(ret != NJS_OK)) {",
          "2837:             return ret;",
          "2838:         }",
          "2841:     njs_mp_free(vm->mem_pool, generator->context);",
          "2843:     return njs_generate_node_index_release_pop(vm, generator, expr);",
          "2844: }",
          "2847: static njs_int_t",
          "2848: njs_generate_operation_assignment_prop(njs_vm_t *vm, njs_generator_t *generator,",
          "2849:     njs_parser_node_t *node)",
          "2850: {",
          "2851:     njs_index_t            index, src;",
          "2852:     njs_parser_node_t      *lvalue, *object, *property;",
          "2853:     njs_vmcode_move_t      *move;",
          "2854:     njs_vmcode_prop_get_t  *prop_get;",
          "2856:     lvalue = node->left;",
          "2857:     object = lvalue->left;",
          "2858:     property = lvalue->right;",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "2245:     prop_get->object = object->index;",
          "2246:     prop_get->property = property->index;",
          "2255:     njs_generate_code(generator, njs_vmcode_3addr_t, code,",
          "2256:                       node->u.operation, 3, expr);",
          "",
          "[Removed Lines]",
          "2248:     expr = node->right;",
          "2250:     ret = njs_generator(vm, generator, expr);",
          "2251:     if (njs_slow_path(ret != NJS_OK)) {",
          "2252:         return ret;",
          "2253:     }",
          "",
          "[Added Lines]",
          "2899:     njs_generator_next(generator, njs_generate, node->right);",
          "2901:     return njs_generator_after(vm, generator,",
          "2902:                                njs_queue_first(&generator->stack), node,",
          "2903:                                njs_generate_operation_assignment_end, NULL, 0);",
          "2904: }",
          "2907: static njs_int_t",
          "2908: njs_generate_operation_assignment_end(njs_vm_t *vm, njs_generator_t *generator,",
          "2909:     njs_parser_node_t *node)",
          "2910: {",
          "2911:     njs_int_t              ret;",
          "2912:     njs_parser_node_t      *lvalue, *expr;",
          "2913:     njs_vmcode_3addr_t     *code;",
          "2914:     njs_vmcode_prop_set_t  *prop_set;",
          "2916:     lvalue = node->left;",
          "2917:     expr = node->right;",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "2261:     njs_generate_code(generator, njs_vmcode_prop_set_t, prop_set,",
          "2262:                       NJS_VMCODE_PROPERTY_SET, 3, expr);",
          "2263:     prop_set->value = node->index;",
          "2267:     ret = njs_generate_children_indexes_release(vm, generator, lvalue);",
          "2268:     if (njs_slow_path(ret != NJS_OK)) {",
          "2269:         return ret;",
          "2270:     }",
          "2273: }",
          "",
          "[Removed Lines]",
          "2264:     prop_set->object = object->index;",
          "2265:     prop_set->property = property->index;",
          "2272:     return njs_generate_node_index_release(vm, generator, expr);",
          "",
          "[Added Lines]",
          "2928:     prop_set->object = lvalue->left->index;",
          "2929:     prop_set->property = lvalue->right->index;",
          "2936:     return njs_generate_node_index_release_pop(vm, generator, expr);",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "2289:     object->retval = node->index;",
          "2293: }",
          "",
          "[Removed Lines]",
          "2292:     return njs_generator(vm, generator, node->left);",
          "",
          "[Added Lines]",
          "2957:     njs_generator_next(generator, njs_generate, node->left);",
          "2959:     return njs_generator_after(vm, generator,",
          "2960:                                njs_queue_first(&generator->stack),",
          "2961:                                NULL, njs_generator_pop, NULL, 0);",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "2297: njs_generate_property_accessor(njs_vm_t *vm, njs_generator_t *generator,",
          "2298:     njs_parser_node_t *node)",
          "2299: {",
          "2310:     if (njs_slow_path(ret != NJS_OK)) {",
          "2311:         return ret;",
          "2312:     }",
          "2317:     if (njs_slow_path(ret != NJS_OK)) {",
          "2318:         return ret;",
          "2319:     }",
          "2326:     njs_generate_code(generator, njs_vmcode_prop_accessor_t, accessor,",
          "2327:                       NJS_VMCODE_PROPERTY_ACCESSOR, 3, function);",
          "2329:     accessor->value = function->index;",
          "2332:     accessor->type = (node->token_type == NJS_TOKEN_PROPERTY_GETTER)",
          "2333:                      ? NJS_OBJECT_PROP_GETTER : NJS_OBJECT_PROP_SETTER;",
          "2336: }",
          "",
          "[Removed Lines]",
          "2300:     njs_int_t                   ret;",
          "2301:     njs_parser_node_t           *lvalue, *function, *object, *property;",
          "2302:     njs_vmcode_prop_accessor_t  *accessor;",
          "2304:     lvalue = node->left;",
          "2305:     function = node->right;",
          "2307:     object = lvalue->left;",
          "2309:     ret = njs_generator(vm, generator, object);",
          "2314:     property = lvalue->right;",
          "2316:     ret = njs_generator(vm, generator, property);",
          "2321:     ret = njs_generator(vm, generator, function);",
          "2322:     if (njs_slow_path(ret != NJS_OK)) {",
          "2323:         return ret;",
          "2324:     }",
          "2330:     accessor->object = object->index;",
          "2331:     accessor->property = property->index;",
          "2335:     return NJS_OK;",
          "",
          "[Added Lines]",
          "2969:     njs_int_t  ret;",
          "2971:     njs_generator_next(generator, njs_generate, node->left->left);",
          "2973:     ret = njs_generator_after(vm, generator,",
          "2974:                               njs_queue_first(&generator->stack), node,",
          "2975:                               njs_generate_property_accessor_end, NULL, 0);",
          "2980:     ret = njs_generator_after(vm, generator,",
          "2981:                               njs_queue_first(&generator->stack),",
          "2982:                               node->right, njs_generate, NULL, 0);",
          "2987:     return njs_generator_after(vm, generator,",
          "2988:                                njs_queue_first(&generator->stack),",
          "2989:                                node->left->right, njs_generate, NULL, 0);",
          "2990: }",
          "2993: static njs_int_t",
          "2994: njs_generate_property_accessor_end(njs_vm_t *vm, njs_generator_t *generator,",
          "2995:     njs_parser_node_t *node)",
          "2996: {",
          "2997:     njs_parser_node_t           *lvalue, *function;",
          "2998:     njs_vmcode_prop_accessor_t  *accessor;",
          "3000:     lvalue = node->left;",
          "3001:     function = node->right;",
          "3007:     accessor->object = lvalue->left->index;",
          "3008:     accessor->property = lvalue->right->index;",
          "3012:     return njs_generator_stack_pop(vm, generator, NULL);",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "2354:     array->length = node->u.length;",
          "2358: }",
          "",
          "[Removed Lines]",
          "2357:     return njs_generator(vm, generator, node->left);",
          "",
          "[Added Lines]",
          "3035:     njs_generator_next(generator, njs_generate, node->left);",
          "3037:     return njs_generator_after(vm, generator,",
          "3038:                                njs_queue_first(&generator->stack),",
          "3039:                                NULL, njs_generator_pop, NULL, 0);",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "2371:     var = njs_variable_reference(vm, node->left);",
          "2372:     if (njs_slow_path(var == NULL)) {",
          "2374:     }",
          "2376:     lambda = node->u.value.data.u.lambda;",
          "",
          "[Removed Lines]",
          "2373:         return njs_generate_reference_error(vm, generator, node->left);",
          "",
          "[Added Lines]",
          "3055:         ret = njs_generate_reference_error(vm, generator, node->left);",
          "3056:         if (njs_slow_path(ret != NJS_OK)) {",
          "3057:             return ret;",
          "3058:         }",
          "3060:         return njs_generator_stack_pop(vm, generator, NULL);",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "2397:     function->retval = node->index;",
          "2400: }",
          "",
          "[Removed Lines]",
          "2399:     return NJS_OK;",
          "",
          "[Added Lines]",
          "3086:     return njs_generator_stack_pop(vm, generator, NULL);",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "2432:     function->retval = node->index;",
          "2435: }",
          "",
          "[Removed Lines]",
          "2434:     return NJS_OK;",
          "",
          "[Added Lines]",
          "3121:     return njs_generator_stack_pop(vm, generator, NULL);",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "2451:     regexp->retval = node->index;",
          "2452:     regexp->pattern = node->u.value.data.u.data;",
          "2455: }",
          "",
          "[Removed Lines]",
          "2454:     return NJS_OK;",
          "",
          "[Added Lines]",
          "3141:     return njs_generator_stack_pop(vm, generator, NULL);",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "2459: njs_generate_template_literal(njs_vm_t *vm, njs_generator_t *generator,",
          "2460:     njs_parser_node_t *node)",
          "2461: {",
          "2470:     njs_generate_code(generator, njs_vmcode_template_literal_t, code,",
          "2471:                       NJS_VMCODE_TEMPLATE_LITERAL, 1, node);",
          "",
          "[Removed Lines]",
          "2462:     njs_int_t                      ret;",
          "2463:     njs_vmcode_template_literal_t  *code;",
          "2465:     ret = njs_generator(vm, generator, node->left);",
          "2466:     if (njs_slow_path(ret != NJS_OK)) {",
          "2467:         return ret;",
          "2468:     }",
          "",
          "[Added Lines]",
          "3149:     njs_generator_next(generator, njs_generate, node->left);",
          "3151:     return njs_generator_after(vm, generator,",
          "3152:                                njs_queue_first(&generator->stack), node,",
          "3153:                                njs_generate_template_literal_end, NULL, 0);",
          "3154: }",
          "3157: static njs_int_t",
          "3158: njs_generate_template_literal_end(njs_vm_t *vm, njs_generator_t *generator,",
          "3159:     njs_parser_node_t *node)",
          "3160: {",
          "3161:     njs_vmcode_template_literal_t  *code;",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "2474:     node->index = node->left->index;",
          "2477: }",
          "",
          "[Removed Lines]",
          "2476:     return NJS_OK;",
          "",
          "[Added Lines]",
          "3169:     return njs_generator_stack_pop(vm, generator, NULL);",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "2481: njs_generate_test_jump_expression(njs_vm_t *vm, njs_generator_t *generator,",
          "2482:     njs_parser_node_t *node)",
          "2483: {",
          "2485:     njs_jump_off_t          jump_offset;",
          "2487:     njs_vmcode_test_jump_t  *test_jump;",
          "2494:     njs_generate_code(generator, njs_vmcode_test_jump_t, test_jump,",
          "2495:                       node->u.operation, 2, node);",
          "2496:     jump_offset = njs_code_offset(generator, test_jump);",
          "",
          "[Removed Lines]",
          "2484:     njs_int_t               ret;",
          "2486:     njs_vmcode_move_t       *move;",
          "2489:     ret = njs_generator(vm, generator, node->left);",
          "2490:     if (njs_slow_path(ret != NJS_OK)) {",
          "2491:         return ret;",
          "2492:     }",
          "",
          "[Added Lines]",
          "3177:     njs_generator_next(generator, njs_generate, node->left);",
          "3179:     return njs_generator_after(vm, generator,",
          "3180:                                njs_queue_first(&generator->stack), node,",
          "3181:                                njs_generate_test_jump_expression_after,",
          "3182:                                NULL, 0);",
          "3183: }",
          "3186: static njs_int_t",
          "3187: njs_generate_test_jump_expression_after(njs_vm_t *vm,",
          "3188:     njs_generator_t *generator, njs_parser_node_t *node)",
          "3189: {",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "2504:     test_jump->retval = node->index;",
          "",
          "[Removed Lines]",
          "2506:     ret = njs_generator(vm, generator, node->right);",
          "2507:     if (njs_slow_path(ret != NJS_OK)) {",
          "2508:         return ret;",
          "2509:     }",
          "",
          "[Added Lines]",
          "3205:     njs_generator_next(generator, njs_generate, node->right);",
          "3207:     return njs_generator_after(vm, generator,",
          "3208:                                njs_queue_first(&generator->stack), node,",
          "3209:                                njs_generate_test_jump_expression_end,",
          "3210:                                &jump_offset, sizeof(njs_jump_off_t));",
          "3211: }",
          "3214: static njs_int_t",
          "3215: njs_generate_test_jump_expression_end(njs_vm_t *vm, njs_generator_t *generator,",
          "3216:     njs_parser_node_t *node)",
          "3217: {",
          "3218:     njs_int_t          ret;",
          "3219:     njs_vmcode_move_t  *move;",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "2519:                                node->right->index, node);",
          "2520:     }",
          "2525: }",
          "",
          "[Removed Lines]",
          "2522:     njs_code_set_jump_offset(generator, njs_vmcode_test_jump_t, jump_offset);",
          "2524:     return njs_generate_children_indexes_release(vm, generator, node);",
          "",
          "[Added Lines]",
          "3232:     njs_code_set_jump_offset(generator, njs_vmcode_test_jump_t,",
          "3235:     ret = njs_generate_children_indexes_release(vm, generator, node);",
          "3236:     if (njs_slow_path(ret != NJS_OK)) {",
          "3237:         return ret;",
          "3238:     }",
          "3240:     return njs_generator_stack_pop(vm, generator, generator->context);",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "2529: njs_generate_3addr_operation(njs_vm_t *vm, njs_generator_t *generator,",
          "2530:     njs_parser_node_t *node, njs_bool_t swap)",
          "2531: {",
          "2538:     left = node->left;",
          "2541:     if (njs_slow_path(ret != NJS_OK)) {",
          "2542:         return ret;",
          "2543:     }",
          "2560:         }",
          "2566:     }",
          "2568:     njs_generate_code(generator, njs_vmcode_3addr_t, code,",
          "2569:                       node->u.operation, 3, node);",
          "2571:     if (!swap) {",
          "2572:         code->src1 = left->index;",
          "2573:         code->src2 = right->index;",
          "",
          "[Removed Lines]",
          "2532:     njs_int_t           ret;",
          "2533:     njs_index_t         index;",
          "2534:     njs_parser_node_t   *left, *right;",
          "2535:     njs_vmcode_move_t   *move;",
          "2536:     njs_vmcode_3addr_t  *code;",
          "2540:     ret = njs_generator(vm, generator, left);",
          "2545:     right = node->right;",
          "2547:     if (left->token_type == NJS_TOKEN_NAME) {",
          "2549:         if (njs_slow_path(njs_parser_has_side_effect(right))) {",
          "2550:             njs_generate_code(generator, njs_vmcode_move_t, move,",
          "2551:                               NJS_VMCODE_MOVE, 2, node);",
          "2552:             move->src = left->index;",
          "2554:             index = njs_generate_node_temp_index_get(vm, generator, left);",
          "2555:             if (njs_slow_path(index == NJS_INDEX_ERROR)) {",
          "2556:                 return NJS_ERROR;",
          "2557:             }",
          "2559:             move->dst = index;",
          "2561:     }",
          "2563:     ret = njs_generator(vm, generator, right);",
          "2564:     if (njs_slow_path(ret != NJS_OK)) {",
          "2565:         return ret;",
          "",
          "[Added Lines]",
          "3248:     njs_int_t          ret;",
          "3249:     njs_parser_node_t  *left, *right;",
          "3252:     right = node->right;",
          "3254:     njs_generator_next(generator, njs_generate, left);",
          "3256:     if (left->token_type == NJS_TOKEN_NAME) {",
          "3257:         return njs_generator_after(vm, generator,",
          "3258:                                    njs_queue_first(&generator->stack), node,",
          "3259:                                    njs_generate_3addr_operation_name,",
          "3260:                                    &swap, sizeof(njs_bool_t));",
          "3261:     }",
          "3263:     ret = njs_generator_after(vm, generator,",
          "3264:                               njs_queue_first(&generator->stack), node,",
          "3265:                               njs_generate_3addr_operation_end, &swap,",
          "3266:                               sizeof(njs_bool_t));",
          "3271:     return njs_generator_after(vm, generator,",
          "3272:                                njs_queue_first(&generator->stack), right,",
          "3273:                                njs_generate, NULL, 0);",
          "3274: }",
          "3277: static njs_int_t",
          "3278: njs_generate_3addr_operation_name(njs_vm_t *vm, njs_generator_t *generator,",
          "3279:     njs_parser_node_t *node)",
          "3280: {",
          "3281:     njs_index_t        index;",
          "3282:     njs_parser_node_t  *left;",
          "3283:     njs_vmcode_move_t  *move;",
          "3285:     left = node->left;",
          "3287:     if (njs_slow_path(njs_parser_has_side_effect(node->right))) {",
          "3288:         njs_generate_code(generator, njs_vmcode_move_t, move,",
          "3289:                           NJS_VMCODE_MOVE, 2, node);",
          "3290:         move->src = left->index;",
          "3292:         index = njs_generate_node_temp_index_get(vm, generator, left);",
          "3293:         if (njs_slow_path(index == NJS_INDEX_ERROR)) {",
          "3294:             return NJS_ERROR;",
          "3297:         move->dst = index;",
          "3300:     njs_generator_next(generator, njs_generate, node->right);",
          "3302:     return njs_generator_after(vm, generator,",
          "3303:                                njs_queue_first(&generator->stack), node,",
          "3304:                                njs_generate_3addr_operation_end,",
          "3305:                                generator->context, 0);",
          "3306: }",
          "3309: static njs_int_t",
          "3310: njs_generate_3addr_operation_end(njs_vm_t *vm, njs_generator_t *generator,",
          "3311:     njs_parser_node_t *node)",
          "3312: {",
          "3313:     njs_bool_t          swap;",
          "3314:     njs_parser_node_t   *left, *right;",
          "3315:     njs_vmcode_3addr_t  *code;",
          "3317:     left = node->left;",
          "3318:     right = node->right;",
          "3323:     swap = *((njs_bool_t *) generator->context);",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "2591:     njs_thread_log_debug(\"CODE3  %p, %p, %p\",",
          "2592:                          code->dst, code->src1, code->src2);",
          "2595: }",
          "",
          "[Removed Lines]",
          "2594:     return NJS_OK;",
          "",
          "[Added Lines]",
          "3348:     return njs_generator_stack_pop(vm, generator, generator->context);",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "2599: njs_generate_2addr_operation(njs_vm_t *vm, njs_generator_t *generator,",
          "2600:     njs_parser_node_t *node)",
          "2601: {",
          "2610:     njs_generate_code(generator, njs_vmcode_2addr_t, code,",
          "2611:                       node->u.operation, 2, node);",
          "",
          "[Removed Lines]",
          "2602:     njs_int_t           ret;",
          "2603:     njs_vmcode_2addr_t  *code;",
          "2605:     ret = njs_generator(vm, generator, node->left);",
          "2606:     if (njs_slow_path(ret != NJS_OK)) {",
          "2607:         return ret;",
          "2608:     }",
          "",
          "[Added Lines]",
          "3356:     njs_generator_next(generator, njs_generate, node->left);",
          "3358:     return njs_generator_after(vm, generator,",
          "3359:                                njs_queue_first(&generator->stack), node,",
          "3360:                                njs_generate_2addr_operation_end, NULL, 0);",
          "3361: }",
          "3364: static njs_int_t",
          "3365: njs_generate_2addr_operation_end(njs_vm_t *vm, njs_generator_t *generator,",
          "3366:     njs_parser_node_t *node)",
          "3367: {",
          "3368:     njs_vmcode_2addr_t  *code;",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "2621:     njs_thread_log_debug(\"CODE2  %p, %p\", code->dst, code->src);",
          "2624: }",
          "",
          "[Removed Lines]",
          "2623:     return NJS_OK;",
          "",
          "[Added Lines]",
          "3383:     return njs_generator_stack_pop(vm, generator, NULL);",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "2628: njs_generate_typeof_operation(njs_vm_t *vm, njs_generator_t *generator,",
          "2629:     njs_parser_node_t *node)",
          "2630: {",
          "2635:     expr = node->left;",
          "2648:     }",
          "2650:     njs_generate_code(generator, njs_vmcode_2addr_t, code,",
          "2652:     code->src = node->left->index;",
          "2654:     node->index = njs_generate_dest_index(vm, generator, node);",
          "",
          "[Removed Lines]",
          "2631:     njs_int_t           ret;",
          "2632:     njs_parser_node_t   *expr;",
          "2633:     njs_vmcode_2addr_t  *code;",
          "2637:     if (expr->token_type == NJS_TOKEN_NAME) {",
          "2638:         ret = njs_generate_variable(vm, generator, expr, NJS_TYPEOF, NULL);",
          "2639:         if (njs_slow_path(ret != NJS_OK)) {",
          "2640:             return NJS_ERROR;",
          "2641:         }",
          "2643:     } else {",
          "2644:         ret = njs_generator(vm, generator, node->left);",
          "2645:         if (njs_slow_path(ret != NJS_OK)) {",
          "2646:             return ret;",
          "2647:         }",
          "2651:                       node->u.operation, 2, expr);",
          "",
          "[Added Lines]",
          "3391:     njs_int_t          ret;",
          "3392:     njs_parser_node_t  *expr;",
          "3396:     if (expr->token_type != NJS_TOKEN_NAME) {",
          "3397:         njs_generator_next(generator, njs_generate, node->left);",
          "3399:         return njs_generator_after(vm, generator,",
          "3400:                                    njs_queue_first(&generator->stack), node,",
          "3401:                                    njs_generate_typeof_operation_end, NULL, 0);",
          "3402:     }",
          "3404:     ret = njs_generate_variable(vm, generator, expr, NJS_TYPEOF, NULL);",
          "3405:     if (njs_slow_path(ret != NJS_OK)) {",
          "3406:         return NJS_ERROR;",
          "3409:     return njs_generate_typeof_operation_end(vm, generator, node);",
          "3410: }",
          "3413: static njs_int_t",
          "3414: njs_generate_typeof_operation_end(njs_vm_t *vm, njs_generator_t *generator,",
          "3415:     njs_parser_node_t *node)",
          "3416: {",
          "3417:     njs_vmcode_2addr_t  *code;",
          "3420:                       node->u.operation, 2, node->left);",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "2661:     njs_thread_log_debug(\"CODE2  %p, %p\", code->dst, code->src);",
          "2664: }",
          "",
          "[Removed Lines]",
          "2663:     return NJS_OK;",
          "",
          "[Added Lines]",
          "3432:     return njs_generator_stack_pop(vm, generator, NULL);",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "2669:     njs_parser_node_t *node, njs_bool_t post)",
          "2670: {",
          "2671:     njs_int_t              ret;",
          "2673:     njs_variable_t         *var;",
          "2674:     njs_parser_node_t      *lvalue;",
          "2675:     njs_vmcode_3addr_t     *code;",
          "2676:     njs_vmcode_variable_t  *var_code;",
          "2680:     lvalue = node->left;",
          "",
          "[Removed Lines]",
          "2672:     njs_index_t            index, dest_index;",
          "2677:     njs_vmcode_prop_get_t  *prop_get;",
          "2678:     njs_vmcode_prop_set_t  *prop_set;",
          "",
          "[Added Lines]",
          "3441:     njs_index_t            index;",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "2692:                               NJS_VMCODE_ASSIGNMENT_ERROR, 0, node);",
          "2693:             var_code->dst = var->index;",
          "2696:         }",
          "2698:         index = njs_generate_dest_index(vm, generator, node);",
          "",
          "[Removed Lines]",
          "2695:             return NJS_OK;",
          "",
          "[Added Lines]",
          "3462:             return njs_generator_stack_pop(vm, generator, NULL);",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "2708:         code->src1 = lvalue->index;",
          "2709:         code->src2 = lvalue->index;",
          "2712:     }",
          "2719:     if (njs_slow_path(ret != NJS_OK)) {",
          "2720:         return ret;",
          "2721:     }",
          "2730:     if (node->dest != NULL) {",
          "2731:         dest_index = node->dest->index;",
          "",
          "[Removed Lines]",
          "2711:         return NJS_OK;",
          "2718:     ret = njs_generator(vm, generator, lvalue->left);",
          "2725:     ret = njs_generator(vm, generator, lvalue->right);",
          "2726:     if (njs_slow_path(ret != NJS_OK)) {",
          "2727:         return ret;",
          "2728:     }",
          "",
          "[Added Lines]",
          "3478:         return njs_generator_stack_pop(vm, generator, NULL);",
          "3485:     njs_generator_next(generator, njs_generate, lvalue->left);",
          "3487:     ret = njs_generator_after(vm, generator,",
          "3488:                               njs_queue_first(&generator->stack), node,",
          "3489:                               njs_generate_inc_dec_operation_prop,",
          "3490:                               &post, sizeof(njs_bool_t));",
          "3497:     return njs_generator_after(vm, generator,",
          "3498:                                njs_queue_first(&generator->stack),",
          "3499:                                lvalue->right, njs_generate, NULL, 0);",
          "3500: }",
          "3503: static njs_int_t",
          "3504: njs_generate_inc_dec_operation_prop(njs_vm_t *vm, njs_generator_t *generator,",
          "3505:     njs_parser_node_t *node)",
          "3506: {",
          "3507:     njs_int_t              ret;",
          "3508:     njs_bool_t             post;",
          "3509:     njs_index_t            index, dest_index;",
          "3510:     njs_parser_node_t      *lvalue;",
          "3511:     njs_vmcode_3addr_t     *code;",
          "3512:     njs_vmcode_prop_get_t  *prop_get;",
          "3513:     njs_vmcode_prop_set_t  *prop_set;",
          "3515:     lvalue = node->left;",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "2744: found:",
          "2746:     index = post ? njs_generate_temp_index_get(vm, generator, node)",
          "2747:                  : dest_index;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3533:     post = *((njs_bool_t *) generator->context);",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "2775:         }",
          "2776:     }",
          "2779: }",
          "",
          "[Removed Lines]",
          "2778:     return njs_generate_children_indexes_release(vm, generator, lvalue);",
          "",
          "[Added Lines]",
          "3567:     njs_mp_free(vm->mem_pool, generator->context);",
          "3569:     return njs_generate_children_indexes_release_pop(vm, generator, lvalue);",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "2792:     var = njs_variable_reference(vm, node);",
          "2793:     if (njs_slow_path(var == NULL)) {",
          "2795:     }",
          "2797:     if (njs_is_function(&var->value)) {",
          "",
          "[Removed Lines]",
          "2794:         return njs_generate_reference_error(vm, generator, node);",
          "",
          "[Added Lines]",
          "3585:         ret = njs_generate_reference_error(vm, generator, node);",
          "3586:         if (njs_slow_path(ret != NJS_OK)) {",
          "3587:             return ret;",
          "3588:         }",
          "3590:         return njs_generator_stack_pop(vm, generator, NULL);",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "2822:     njs_set_function(&var->value, function);",
          "2825: }",
          "",
          "[Removed Lines]",
          "2824:     return ret;",
          "",
          "[Added Lines]",
          "3620:     return njs_generator_stack_pop(vm, generator, NULL);",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "2875: {",
          "2876:     u_char         *p;",
          "2877:     int64_t        nargs;",
          "2878:     njs_uint_t     index;",
          "2879:     njs_vm_code_t  *code;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3674:     njs_int_t      ret;",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "2929:     scope->closures = generator->closures;",
          "2932:         return NULL;",
          "2933:     }",
          "2935:     code = njs_arr_item(vm->codes, index);",
          "2936:     code->start = generator->code_start;",
          "2937:     code->end = generator->code_end;",
          "",
          "[Removed Lines]",
          "2931:     if (njs_slow_path(njs_generator(vm, generator, scope->top) != NJS_OK)) {",
          "",
          "[Added Lines]",
          "3728:     njs_queue_init(&generator->stack);",
          "3730:     njs_generator_next(generator, njs_generate, scope->top);",
          "3732:     ret = njs_generator_after(vm, generator,",
          "3733:                               njs_queue_first(&generator->stack), NULL,",
          "3734:                               njs_generate_scope_end, NULL, 0);",
          "3735:     if (njs_slow_path(ret != NJS_OK)) {",
          "3739:     do {",
          "3740:         ret = generator->state(vm, generator, generator->node);",
          "3741:         if (njs_slow_path(ret != NJS_OK)) {",
          "3742:             return NULL;",
          "3743:         }",
          "3745:     } while (generator->state != NULL);",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "2944: }",
          "2947: static int64_t",
          "2948: njs_generate_lambda_variables(njs_vm_t *vm, njs_generator_t *generator,",
          "2949:     njs_parser_node_t *node)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3759: static njs_int_t",
          "3760: njs_generate_scope_end(njs_vm_t *vm, njs_generator_t *generator,",
          "3761:     njs_parser_node_t *node)",
          "3762: {",
          "3763:     generator->state = NULL;",
          "3764:     return NJS_OK;",
          "3765: }",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "2987: njs_generate_return_statement(njs_vm_t *vm, njs_generator_t *generator,",
          "2988:     njs_parser_node_t *node)",
          "2989: {",
          "2991:     njs_index_t              index;",
          "2992:     const njs_str_t          *dest;",
          "2993:     njs_vmcode_return_t      *code;",
          "",
          "[Removed Lines]",
          "2990:     njs_int_t                ret;",
          "",
          "[Added Lines]",
          "3811:     njs_generator_next(generator, njs_generate, node->right);",
          "3813:     return njs_generator_after(vm, generator,",
          "3814:                                njs_queue_first(&generator->stack), node,",
          "3815:                                njs_generate_return_statement_end, NULL, 0);",
          "3816: }",
          "3819: static njs_int_t",
          "3820: njs_generate_return_statement_end(njs_vm_t *vm, njs_generator_t *generator,",
          "3821:     njs_parser_node_t *node)",
          "3822: {",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "2995:     njs_generator_block_t    *block, *immediate, *top;",
          "2996:     njs_vmcode_try_return_t  *try_return;",
          "3003:     if (node->right != NULL) {",
          "3004:         index = node->right->index;",
          "",
          "[Removed Lines]",
          "2998:     ret = njs_generator(vm, generator, node->right);",
          "2999:     if (njs_slow_path(ret != NJS_OK)) {",
          "3000:         return ret;",
          "3001:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "3021:         code->retval = index;",
          "3022:         node->index = index;",
          "3025:     }",
          "3027:     if (immediate->type == NJS_GENERATOR_TRY && immediate->exit != NULL) {",
          "",
          "[Removed Lines]",
          "3024:         return NJS_OK;",
          "",
          "[Added Lines]",
          "3851:         return njs_generator_stack_pop(vm, generator, NULL);",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "3060:         return NJS_ERROR;",
          "3061:     }",
          "3064: }",
          "",
          "[Removed Lines]",
          "3063:     return NJS_OK;",
          "",
          "[Added Lines]",
          "3890:     return njs_generator_stack_pop(vm, generator, NULL);",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "3068: njs_generate_function_call(njs_vm_t *vm, njs_generator_t *generator,",
          "3069:     njs_parser_node_t *node)",
          "3070: {",
          "3077:     var = NULL;",
          "3079:     if (node->left != NULL) {",
          "3095:     }",
          "3097:     njs_generate_code(generator, njs_vmcode_function_frame_t, func,",
          "",
          "[Removed Lines]",
          "3071:     njs_int_t                    ret, nargs;",
          "3072:     njs_jump_off_t               func_offset;",
          "3073:     njs_variable_t               *var;",
          "3074:     njs_parser_node_t            *name;",
          "3075:     njs_vmcode_function_frame_t  *func;",
          "3081:         ret = njs_generator(vm, generator, node->left);",
          "3082:         if (njs_slow_path(ret != NJS_OK)) {",
          "3083:             return ret;",
          "3084:         }",
          "3086:         name = node->left;",
          "3088:     } else {",
          "3089:         ret = njs_generate_variable(vm, generator, node, NJS_REFERENCE, &var);",
          "3090:         if (njs_slow_path(ret != NJS_OK)) {",
          "3091:             return ret;",
          "3092:         }",
          "3094:         name = node;",
          "",
          "[Added Lines]",
          "3898:     njs_int_t       ret;",
          "3899:     njs_variable_t  *var;",
          "3906:         njs_generator_next(generator, njs_generate, node->left);",
          "3908:         return njs_generator_after(vm, generator,",
          "3909:                                    njs_queue_first(&generator->stack), node,",
          "3910:                                    njs_generate_function_call_arguments,",
          "3911:                                    NULL, 0);",
          "3912:     }",
          "3914:     ret = njs_generate_variable(vm, generator, node, NJS_REFERENCE, &var);",
          "3915:     if (njs_slow_path(ret != NJS_OK)) {",
          "3916:         return ret;",
          "3917:     }",
          "3919:     return njs_generate_function_call_arguments(vm, generator, node);",
          "3920: }",
          "3923: static njs_int_t",
          "3924: njs_generate_function_call_arguments(njs_vm_t *vm, njs_generator_t *generator,",
          "3925:     njs_parser_node_t *node)",
          "3926: {",
          "3927:     njs_int_t                    ret;",
          "3928:     njs_jump_off_t               func_offset;",
          "3929:     njs_parser_node_t            *name;",
          "3930:     njs_vmcode_function_frame_t  *func;",
          "3932:     name = node;",
          "3934:     if (node->left != NULL) {",
          "3935:         name = node->left;",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "3099:     func_offset = njs_code_offset(generator, func);",
          "3100:     func->ctor = node->ctor;",
          "3101:     func->name = name->index;",
          "3113:         return ret;",
          "3114:     }",
          "3117: }",
          "3120: static njs_int_t",
          "3122:     njs_parser_node_t *node)",
          "3123: {",
          "3129:     prop = node->left;",
          "3134:     if (njs_slow_path(ret != NJS_OK)) {",
          "3135:         return ret;",
          "3136:     }",
          "3145:     njs_generate_code(generator, njs_vmcode_method_frame_t, method,",
          "3146:                       NJS_VMCODE_METHOD_FRAME, 3, prop);",
          "",
          "[Removed Lines]",
          "3103:     nargs = njs_generate_move_arguments(vm, generator, node);",
          "3104:     if (njs_slow_path(nargs < 0)) {",
          "3105:         return nargs;",
          "3106:     }",
          "3108:     func = njs_code_ptr(generator, njs_vmcode_function_frame_t, func_offset);",
          "3109:     func->nargs = nargs;",
          "3111:     ret = njs_generate_call(vm, generator, node);",
          "3112:     if (njs_fast_path(ret != NJS_OK)) {",
          "3116:     return NJS_OK;",
          "3121: njs_generate_method_call(njs_vm_t *vm, njs_generator_t *generator,",
          "3124:     njs_int_t                  ret, nargs;",
          "3125:     njs_jump_off_t             method_offset;",
          "3126:     njs_parser_node_t          *prop;",
          "3127:     njs_vmcode_method_frame_t  *method;",
          "3133:     ret = njs_generator(vm, generator, prop->left);",
          "3140:     ret = njs_generator(vm, generator, prop->right);",
          "3141:     if (njs_slow_path(ret != NJS_OK)) {",
          "3142:         return ret;",
          "3143:     }",
          "",
          "[Added Lines]",
          "3943:     func->nargs = 0;",
          "3945:     njs_generator_next(generator, njs_generate,",
          "3946:                        (node->right != NULL ? node->right->left : NULL));",
          "3948:     ret = njs_generator_after(vm, generator,",
          "3949:                               njs_queue_first(&generator->stack), node,",
          "3950:                               njs_generate_function_call_end, NULL, 0);",
          "3951:     if (njs_slow_path(ret != NJS_OK)) {",
          "3955:     if (node->right == NULL) {",
          "3956:         return NJS_OK;",
          "3957:     }",
          "3959:     return njs_generator_after(vm, generator,",
          "3960:                                njs_queue_first(&generator->stack), node->right,",
          "3961:                                njs_generate_move_arguments,",
          "3962:                                &func_offset, sizeof(njs_jump_off_t));",
          "3967: njs_generate_function_call_end(njs_vm_t *vm, njs_generator_t *generator,",
          "3970:     njs_int_t  ret;",
          "3972:     ret = njs_generate_call(vm, generator, node);",
          "3973:     if (njs_fast_path(ret != NJS_OK)) {",
          "3974:         return ret;",
          "3975:     }",
          "3977:     return njs_generator_stack_pop(vm, generator, generator->context);",
          "3978: }",
          "3981: static njs_int_t",
          "3982: njs_generate_method_call(njs_vm_t *vm, njs_generator_t *generator,",
          "3983:     njs_parser_node_t *node)",
          "3984: {",
          "3985:     njs_int_t          ret;",
          "3986:     njs_parser_node_t  *prop;",
          "3992:     njs_generator_next(generator, njs_generate, prop->left);",
          "3994:     ret = njs_generator_after(vm, generator,",
          "3995:                               njs_queue_first(&generator->stack), node,",
          "3996:                               njs_generate_method_call_arguments, NULL, 0);",
          "4003:     return njs_generator_after(vm, generator,",
          "4004:                                njs_queue_first(&generator->stack), prop->right,",
          "4005:                                njs_generate, NULL, 0);",
          "4006: }",
          "4009: static njs_int_t",
          "4010: njs_generate_method_call_arguments(njs_vm_t *vm, njs_generator_t *generator,",
          "4011:     njs_parser_node_t *node)",
          "4012: {",
          "4013:     njs_int_t                  ret;",
          "4014:     njs_jump_off_t             method_offset;",
          "4015:     njs_parser_node_t          *prop;",
          "4016:     njs_vmcode_method_frame_t  *method;",
          "4018:     prop = node->left;",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "3148:     method->ctor = node->ctor;",
          "3149:     method->object = prop->left->index;",
          "3150:     method->method = prop->right->index;",
          "3155:     }",
          "3160:     ret = njs_generate_call(vm, generator, node);",
          "3161:     if (njs_fast_path(ret != NJS_OK)) {",
          "3162:         return ret;",
          "3163:     }",
          "3166: }",
          "",
          "[Removed Lines]",
          "3152:     nargs = njs_generate_move_arguments(vm, generator, node);",
          "3153:     if (njs_slow_path(nargs < 0)) {",
          "3154:         return nargs;",
          "3157:     method = njs_code_ptr(generator, njs_vmcode_method_frame_t, method_offset);",
          "3158:     method->nargs = nargs;",
          "3165:     return NJS_OK;",
          "",
          "[Added Lines]",
          "4026:     method->nargs = 0;",
          "4028:     njs_generator_next(generator, njs_generate,",
          "4029:                        (node->right != NULL ? node->right->left : node->right));",
          "4031:     ret = njs_generator_after(vm, generator,",
          "4032:                               njs_queue_first(&generator->stack), node,",
          "4033:                               njs_generate_method_call_end, NULL, 0);",
          "4034:     if (njs_slow_path(ret != NJS_OK)) {",
          "4035:         return ret;",
          "4036:     }",
          "4038:     if (node->right == NULL) {",
          "4039:         return NJS_OK;",
          "4042:     return njs_generator_after(vm, generator,",
          "4043:                                njs_queue_first(&generator->stack), node->right,",
          "4044:                                njs_generate_move_arguments,",
          "4045:                                &method_offset, sizeof(njs_jump_off_t));",
          "4046: }",
          "4049: static njs_int_t",
          "4050: njs_generate_method_call_end(njs_vm_t *vm, njs_generator_t *generator,",
          "4051:     njs_parser_node_t *node)",
          "4052: {",
          "4053:     njs_int_t  ret;",
          "4060:     return njs_generator_stack_pop(vm, generator, generator->context);",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "3192: njs_generate_move_arguments(njs_vm_t *vm, njs_generator_t *generator,",
          "3193:     njs_parser_node_t *node)",
          "3194: {",
          "3214:     }",
          "3217: }",
          "",
          "[Removed Lines]",
          "3195:     njs_int_t              ret;",
          "3196:     njs_uint_t             nargs;",
          "3197:     njs_parser_node_t      *arg;",
          "3198:     njs_vmcode_move_arg_t  *move_arg;",
          "3200:     nargs = 0;",
          "3202:     for (arg = node->right; arg != NULL; arg = arg->right) {",
          "3203:         ret = njs_generator(vm, generator, arg->left);",
          "3204:         if (njs_slow_path(ret != NJS_OK)) {",
          "3205:             return ret;",
          "3206:         }",
          "3208:         njs_generate_code(generator, njs_vmcode_move_arg_t, move_arg,",
          "3209:                           NJS_VMCODE_MOVE_ARG, 0, node);",
          "3210:         move_arg->src = arg->left->index;",
          "3211:         move_arg->dst = nargs;",
          "3213:         nargs++;",
          "3216:     return nargs;",
          "",
          "[Added Lines]",
          "4090:     njs_jump_off_t               func_offset;",
          "4091:     njs_vmcode_move_arg_t        *move_arg;",
          "4092:     njs_vmcode_function_frame_t  *func;",
          "4094:     if (node == NULL) {",
          "4095:         return njs_generator_stack_pop(vm, generator, generator->context);",
          "4096:     }",
          "4098:     njs_generate_code(generator, njs_vmcode_move_arg_t, move_arg,",
          "4099:                       NJS_VMCODE_MOVE_ARG, 0, node);",
          "4100:     move_arg->src = node->left->index;",
          "4102:     func_offset = *((njs_jump_off_t *) generator->context);",
          "4103:     func = njs_code_ptr(generator, njs_vmcode_function_frame_t, func_offset);",
          "4105:     move_arg->dst = (njs_uint_t) func->nargs;",
          "4107:     func->nargs++;",
          "4109:     if (node->right == NULL) {",
          "4110:         return njs_generator_stack_pop(vm, generator, generator->context);",
          "4113:     njs_generator_next(generator, njs_generate, node->right->left);",
          "4115:     return njs_generator_after(vm, generator,",
          "4116:                                njs_queue_first(&generator->stack), node->right,",
          "4117:                                njs_generate_move_arguments,",
          "4118:                                generator->context, 0);",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "3243: njs_generate_try_statement(njs_vm_t *vm, njs_generator_t *generator,",
          "3244:     njs_parser_node_t *node)",
          "3245: {",
          "3262:     njs_generate_code(generator, njs_vmcode_try_start_t, try_start,",
          "3263:                       NJS_VMCODE_TRY_START, 2, node);",
          "3266:     exception_index = njs_generate_temp_index_get(vm, generator, node);",
          "3267:     if (njs_slow_path(exception_index == NJS_INDEX_ERROR)) {",
          "",
          "[Removed Lines]",
          "3246:     njs_int_t                    ret;",
          "3247:     njs_str_t                    try_cont_label, try_exit_label,",
          "3248:                                  catch_cont_label, catch_exit_label;",
          "3249:     njs_index_t                  exception_index, exit_index, catch_index;",
          "3250:     njs_jump_off_t               try_offset, try_end_offset, catch_offset,",
          "3251:                                  catch_end_offset;",
          "3252:     njs_variable_t               *var;",
          "3253:     const njs_str_t              *dest_label;",
          "3254:     njs_vmcode_catch_t           *catch;",
          "3255:     njs_vmcode_finally_t         *finally;",
          "3256:     njs_vmcode_try_end_t         *try_end, *catch_end;",
          "3257:     njs_generator_patch_t        *patch;",
          "3258:     njs_generator_block_t        *block, *try_block, *catch_block;",
          "3259:     njs_vmcode_try_start_t       *try_start;",
          "3260:     njs_vmcode_try_trampoline_t  *try_break, *try_continue;",
          "3264:     try_offset = njs_code_offset(generator, try_start);",
          "",
          "[Added Lines]",
          "4148:     njs_int_t                ret;",
          "4149:     njs_index_t              exception_index, exit_index;",
          "4150:     njs_vmcode_try_start_t   *try_start;",
          "4151:     njs_generator_try_ctx_t  ctx;",
          "4153:     njs_memzero(&ctx, sizeof(njs_generator_try_ctx_t));",
          "4157:     ctx.try_offset = njs_code_offset(generator, try_start);",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "3288:         return ret;",
          "3289:     }",
          "3302:     njs_generate_code(generator, njs_vmcode_try_end_t, try_end,",
          "3303:                       NJS_VMCODE_TRY_END, 0, NULL);",
          "3304:     try_end_offset = njs_code_offset(generator, try_end);",
          "3306:     if (try_block->exit != NULL) {",
          "3309:         njs_generate_patch_block(vm, generator, try_block->exit);",
          "",
          "[Removed Lines]",
          "3291:     try_block = generator->block;",
          "3292:     try_block->index = exit_index;",
          "3294:     ret = njs_generator(vm, generator, node->left);",
          "3295:     if (njs_slow_path(ret != NJS_OK)) {",
          "3296:         return ret;",
          "3297:     }",
          "3299:     try_exit_label = undef_label;",
          "3300:     try_cont_label = undef_label;",
          "3307:         try_exit_label = try_block->exit->label;",
          "",
          "[Added Lines]",
          "4184:     ctx.try_block = generator->block;",
          "4185:     ctx.try_block->index = exit_index;",
          "4186:     ctx.exception_index = exception_index;",
          "4188:     ctx.catch_cont_label = undef_label;",
          "4189:     ctx.catch_exit_label = undef_label;",
          "4190:     ctx.try_cont_label = undef_label;",
          "4191:     ctx.try_exit_label = undef_label;",
          "4193:     njs_generator_next(generator, njs_generate, node->left);",
          "4195:     return njs_generator_after(vm, generator,",
          "4196:                                njs_queue_first(&generator->stack), node,",
          "4197:                                njs_generate_try_left,",
          "4198:                                &ctx, sizeof(njs_generator_try_ctx_t));",
          "4199: }",
          "4202: static njs_int_t",
          "4203: njs_generate_try_left(njs_vm_t *vm, njs_generator_t *generator,",
          "4204:     njs_parser_node_t *node)",
          "4205: {",
          "4206:     njs_int_t                    ret;",
          "4207:     njs_index_t                  exit_index, catch_index;",
          "4208:     njs_jump_off_t               try_end_offset;",
          "4209:     njs_variable_t               *var;",
          "4210:     njs_vmcode_catch_t           *catch;",
          "4211:     njs_vmcode_try_end_t         *try_end;",
          "4212:     njs_generator_block_t        *try_block;",
          "4213:     njs_generator_try_ctx_t      *ctx;",
          "4214:     njs_vmcode_try_trampoline_t  *try_break, *try_continue;",
          "4216:     ctx = generator->context;",
          "4218:     try_block = ctx->try_block;",
          "4219:     exit_index = try_block->index;",
          "4226:         ctx->try_exit_label = try_block->exit->label;",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "3319:     }",
          "3321:     if (try_block->continuation != NULL) {",
          "3324:         njs_generate_patch_block(vm, generator, try_block->continuation);",
          "",
          "[Removed Lines]",
          "3322:         try_cont_label = try_block->continuation->label;",
          "",
          "[Added Lines]",
          "4241:         ctx->try_cont_label = try_block->continuation->label;",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "3337:     generator->block = try_block->next;",
          "3342:     node = node->right;",
          "3347:     if (node->token_type == NJS_TOKEN_CATCH) {",
          "",
          "[Removed Lines]",
          "3339:     njs_code_set_jump_offset(generator, njs_vmcode_try_start_t, try_offset);",
          "3340:     try_offset = try_end_offset;",
          "3344:     catch_exit_label = undef_label;",
          "3345:     catch_cont_label = undef_label;",
          "",
          "[Added Lines]",
          "4258:     njs_code_set_jump_offset(generator, njs_vmcode_try_start_t,",
          "4259:                              ctx->try_offset);",
          "4260:     ctx->try_offset = try_end_offset;",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "3357:         njs_generate_code_catch(generator, catch, catch_index, node);",
          "3360:         if (njs_slow_path(ret != NJS_OK)) {",
          "3361:             return ret;",
          "3362:         }",
          "3381:                             njs_code_offset(generator, finally)",
          "3383:                 if (njs_slow_path(patch == NULL)) {",
          "3384:                     return NJS_ERROR;",
          "3385:                 }",
          "3386:             }",
          "3403:         }",
          "3499:         }",
          "3526:             if (njs_slow_path(patch == NULL)) {",
          "3527:                 return NJS_ERROR;",
          "3528:             }",
          "3529:         }",
          "3560:     }",
          "3563: }",
          "",
          "[Removed Lines]",
          "3359:         ret = njs_generator(vm, generator, node->right);",
          "3364:         njs_code_set_jump_offset(generator, njs_vmcode_try_end_t, try_offset);",
          "3366:         if (try_block->continuation != NULL || try_block->exit != NULL) {",
          "3367:             njs_generate_code_finally(generator, finally, exception_index,",
          "3368:                                       exit_index, NULL);",
          "3370:             if (try_block->continuation != NULL) {",
          "3375:                 block = njs_generate_find_block(generator->block,",
          "3376:                                                 NJS_GENERATOR_LOOP,",
          "3377:                                                 &try_cont_label);",
          "3379:                 patch = njs_generate_make_continuation_patch(vm, block,",
          "3380:                                                              &try_cont_label,",
          "3382:                              + offsetof(njs_vmcode_finally_t, continue_offset));",
          "3388:             if (try_block->exit != NULL) {",
          "3389:                 block = njs_generate_find_block(generator->block,",
          "3390:                                                 NJS_GENERATOR_ALL,",
          "3391:                                                 &try_exit_label);",
          "3393:                 if (block != NULL) {",
          "3394:                     patch = njs_generate_make_exit_patch(vm, block,",
          "3395:                                                          &try_exit_label,",
          "3396:                                 njs_code_offset(generator, finally)",
          "3397:                                 + offsetof(njs_vmcode_finally_t, break_offset));",
          "3398:                     if (njs_slow_path(patch == NULL)) {",
          "3399:                         return NJS_ERROR;",
          "3400:                     }",
          "3401:                 }",
          "3402:             }",
          "3407:     } else {",
          "3408:         if (node->left != NULL) {",
          "3411:             var = njs_variable_reference(vm, node->left->left);",
          "3412:             if (njs_slow_path(var == NULL)) {",
          "3413:                 return NJS_ERROR;",
          "3414:             }",
          "3416:             catch_index = node->left->left->index;",
          "3418:             njs_generate_code_catch(generator, catch, catch_index, node);",
          "3419:             catch_offset = njs_code_offset(generator, catch);",
          "3421:             ret = njs_generate_start_block(vm, generator, NJS_GENERATOR_TRY,",
          "3422:                                            &no_label);",
          "3423:             if (njs_slow_path(ret != NJS_OK)) {",
          "3424:                 return ret;",
          "3425:             }",
          "3427:             catch_block = generator->block;",
          "3428:             catch_block->index = exit_index;",
          "3430:             ret = njs_generator(vm, generator, node->left->right);",
          "3431:             if (njs_slow_path(ret != NJS_OK)) {",
          "3432:                 return ret;",
          "3433:             }",
          "3435:             njs_generate_code(generator, njs_vmcode_try_end_t, catch_end,",
          "3436:                               NJS_VMCODE_TRY_END, 0, node->left->right);",
          "3437:             catch_end_offset = njs_code_offset(generator, catch_end);",
          "3439:             if (catch_block->exit != NULL) {",
          "3440:                 catch_exit_label = catch_block->exit->label;",
          "3442:                 njs_generate_patch_block(vm, generator, catch_block->exit);",
          "3444:                 njs_generate_code(generator, njs_vmcode_try_trampoline_t,",
          "3445:                                   try_break, NJS_VMCODE_TRY_BREAK, 1, NULL);",
          "3447:                 try_break->exit_value = exit_index;",
          "3449:                 try_break->offset = -sizeof(njs_vmcode_try_end_t);",
          "3451:             } else {",
          "3452:                 try_break = NULL;",
          "3453:             }",
          "3455:             if (catch_block->continuation != NULL) {",
          "3456:                 catch_cont_label = catch_block->continuation->label;",
          "3458:                 njs_generate_patch_block(vm, generator,",
          "3459:                                          catch_block->continuation);",
          "3461:                 njs_generate_code(generator, njs_vmcode_try_trampoline_t,",
          "3462:                                   try_continue, NJS_VMCODE_TRY_CONTINUE, 1,",
          "3463:                                   NULL);",
          "3465:                 try_continue->exit_value = exit_index;",
          "3467:                 try_continue->offset = -sizeof(njs_vmcode_try_end_t);",
          "3469:                 if (try_break != NULL) {",
          "3470:                     try_continue->offset -= sizeof(njs_vmcode_try_trampoline_t);",
          "3471:                 }",
          "3472:             }",
          "3474:             generator->block = catch_block->next;",
          "3476:             njs_code_set_jump_offset(generator, njs_vmcode_catch_t,",
          "3477:                                      catch_offset);",
          "3481:             njs_generate_code_catch(generator, catch, exception_index, NULL);",
          "3483:             njs_code_set_jump_offset(generator, njs_vmcode_try_end_t,",
          "3484:                                      catch_end_offset);",
          "3486:         } else {",
          "3489:             njs_generate_code_catch(generator, catch, exception_index, NULL);",
          "3491:             catch_block = NULL;",
          "3492:         }",
          "3494:         njs_code_set_jump_offset(generator, njs_vmcode_try_end_t, try_offset);",
          "3496:         ret = njs_generator(vm, generator, node->right);",
          "3497:         if (njs_slow_path(ret != NJS_OK)) {",
          "3498:             return ret;",
          "3501:         njs_generate_code_finally(generator, finally, exception_index,",
          "3502:                                   exit_index, node);",
          "3504:         if (try_block->continuation != NULL",
          "3505:             || (catch_block && catch_block->continuation != NULL))",
          "3506:         {",
          "3507:             dest_label = njs_generate_jump_destination(vm, generator->block,",
          "3508:                                                        \"try continue\",",
          "3509:                                                        NJS_GENERATOR_LOOP,",
          "3510:                                                        &try_cont_label,",
          "3511:                                                        &catch_cont_label);",
          "3512:             if (njs_slow_path(dest_label == NULL)) {",
          "3513:                 return NJS_ERROR;",
          "3514:             }",
          "3520:             block = njs_generate_find_block(generator->block,",
          "3521:                                             NJS_GENERATOR_LOOP, dest_label);",
          "3523:             patch = njs_generate_make_continuation_patch(vm, block, dest_label,",
          "3524:                              njs_code_offset(generator, finally)",
          "3525:                              + offsetof(njs_vmcode_finally_t, continue_offset));",
          "3531:         if (try_block->exit != NULL",
          "3532:             || (catch_block != NULL && catch_block->exit != NULL))",
          "3533:         {",
          "3534:             dest_label = njs_generate_jump_destination(vm, generator->block,",
          "3535:                                                        \"try break/return\",",
          "3536:                                                        NJS_GENERATOR_ALL",
          "3537:                                                        | NJS_GENERATOR_TRY,",
          "3538:                                                        &try_exit_label,",
          "3539:                                                        &catch_exit_label);",
          "3540:             if (njs_slow_path(dest_label == NULL)) {",
          "3541:                 return NJS_ERROR;",
          "3542:             }",
          "3548:             block = njs_generate_find_block(generator->block,",
          "3549:                                             NJS_GENERATOR_ALL",
          "3550:                                             | NJS_GENERATOR_TRY, dest_label);",
          "3551:             if (block != NULL) {",
          "3552:                 patch = njs_generate_make_exit_patch(vm, block, dest_label,",
          "3553:                                 njs_code_offset(generator, finally)",
          "3554:                                 + offsetof(njs_vmcode_finally_t, break_offset));",
          "3555:                 if (njs_slow_path(patch == NULL)) {",
          "3556:                     return NJS_ERROR;",
          "3557:                 }",
          "3558:             }",
          "3559:         }",
          "3562:     return njs_generate_index_release(vm, generator, exception_index);",
          "",
          "[Added Lines]",
          "4276:         njs_generator_next(generator, njs_generate, node->right);",
          "4278:         return njs_generator_after(vm, generator,",
          "4279:                                    njs_queue_first(&generator->stack), node,",
          "4280:                                    njs_generate_try_catch, ctx, 0);",
          "4281:     }",
          "4283:     if (node->left != NULL) {",
          "4286:         var = njs_variable_reference(vm, node->left->left);",
          "4287:         if (njs_slow_path(var == NULL)) {",
          "4288:             return NJS_ERROR;",
          "4289:         }",
          "4291:         catch_index = node->left->left->index;",
          "4293:         njs_generate_code_catch(generator, catch, catch_index, node);",
          "4294:         ctx->catch_offset = njs_code_offset(generator, catch);",
          "4296:         ret = njs_generate_start_block(vm, generator, NJS_GENERATOR_TRY,",
          "4297:                                        &no_label);",
          "4302:         ctx->catch_block = generator->block;",
          "4303:         ctx->catch_block->index = exit_index;",
          "4305:         njs_generator_next(generator, njs_generate, node->left->right);",
          "4307:         return njs_generator_after(vm, generator,",
          "4308:                                    njs_queue_first(&generator->stack), node,",
          "4309:                                    njs_generate_try_finally, ctx, 0);",
          "4310:     }",
          "4314:     njs_generate_code_catch(generator, catch, ctx->exception_index, NULL);",
          "4316:     ctx->catch_block = NULL;",
          "4318:     njs_code_set_jump_offset(generator, njs_vmcode_try_end_t,",
          "4319:                              ctx->try_offset);",
          "4321:     njs_generator_next(generator, njs_generate, node->right);",
          "4323:     return njs_generator_after(vm, generator,",
          "4324:                                njs_queue_first(&generator->stack), node,",
          "4325:                                njs_generate_try_end, ctx, 0);",
          "4326: }",
          "4329: static njs_int_t",
          "4330: njs_generate_try_catch(njs_vm_t *vm, njs_generator_t *generator,",
          "4331:     njs_parser_node_t *node)",
          "4332: {",
          "4333:     njs_int_t                ret;",
          "4334:     njs_index_t              exit_index;",
          "4335:     njs_vmcode_finally_t     *finally;",
          "4336:     njs_generator_patch_t    *patch;",
          "4337:     njs_generator_block_t    *block, *try_block;",
          "4338:     njs_generator_try_ctx_t  *ctx;",
          "4340:     ctx = generator->context;",
          "4342:     try_block = ctx->try_block;",
          "4343:     exit_index = try_block->index;",
          "4345:     njs_code_set_jump_offset(generator, njs_vmcode_try_end_t,",
          "4346:                              ctx->try_offset);",
          "4348:     if (try_block->continuation != NULL || try_block->exit != NULL) {",
          "4349:         njs_generate_code_finally(generator, finally, ctx->exception_index,",
          "4350:                                   exit_index, NULL);",
          "4352:         if (try_block->continuation != NULL) {",
          "4357:             block = njs_generate_find_block(generator->block,",
          "4358:                                             NJS_GENERATOR_LOOP,",
          "4359:                                             &ctx->try_cont_label);",
          "4361:             patch = njs_generate_make_continuation_patch(vm, block,",
          "4362:                                                          &ctx->try_cont_label,",
          "4363:                         njs_code_offset(generator, finally)",
          "4364:                          + offsetof(njs_vmcode_finally_t, continue_offset));",
          "4365:             if (njs_slow_path(patch == NULL)) {",
          "4366:                 return NJS_ERROR;",
          "4367:             }",
          "4368:         }",
          "4370:         if (try_block->exit != NULL) {",
          "4371:             block = njs_generate_find_block(generator->block,",
          "4372:                                             NJS_GENERATOR_ALL,",
          "4373:                                             &ctx->try_exit_label);",
          "4375:             if (block != NULL) {",
          "4376:                 patch = njs_generate_make_exit_patch(vm, block,",
          "4377:                                                      &ctx->try_exit_label,",
          "4379:                             + offsetof(njs_vmcode_finally_t, break_offset));",
          "4385:     }",
          "4389:     ret = njs_generate_index_release(vm, generator, ctx->exception_index);",
          "4390:     if (njs_slow_path(ret != NJS_OK)) {",
          "4391:         return ret;",
          "4392:     }",
          "4394:     return njs_generator_stack_pop(vm, generator, ctx);",
          "4395: }",
          "4398: static njs_int_t",
          "4399: njs_generate_try_finally(njs_vm_t *vm, njs_generator_t *generator,",
          "4400:     njs_parser_node_t *node)",
          "4401: {",
          "4402:     njs_index_t                  exit_index;",
          "4403:     njs_jump_off_t               catch_end_offset;",
          "4404:     njs_vmcode_catch_t           *catch;",
          "4405:     njs_vmcode_try_end_t         *catch_end;",
          "4406:     njs_generator_block_t        *try_block, *catch_block;",
          "4407:     njs_generator_try_ctx_t      *ctx;",
          "4408:     njs_vmcode_try_trampoline_t  *try_break, *try_continue;",
          "4410:     ctx = generator->context;",
          "4412:     try_block = ctx->try_block;",
          "4413:     exit_index = try_block->index;",
          "4414:     catch_block = ctx->catch_block;",
          "4416:     njs_generate_code(generator, njs_vmcode_try_end_t, catch_end,",
          "4417:                       NJS_VMCODE_TRY_END, 0, node->left->right);",
          "4418:     catch_end_offset = njs_code_offset(generator, catch_end);",
          "4420:     if (catch_block->exit != NULL) {",
          "4421:         ctx->catch_exit_label = catch_block->exit->label;",
          "4423:         njs_generate_patch_block(vm, generator, catch_block->exit);",
          "4425:         njs_generate_code(generator, njs_vmcode_try_trampoline_t,",
          "4426:                           try_break, NJS_VMCODE_TRY_BREAK, 1, NULL);",
          "4428:         try_break->exit_value = exit_index;",
          "4430:         try_break->offset = -sizeof(njs_vmcode_try_end_t);",
          "4432:     } else {",
          "4433:         try_break = NULL;",
          "4434:     }",
          "4436:     if (catch_block->continuation != NULL) {",
          "4437:         ctx->catch_cont_label = catch_block->continuation->label;",
          "4439:         njs_generate_patch_block(vm, generator,",
          "4440:                                  catch_block->continuation);",
          "4442:         njs_generate_code(generator, njs_vmcode_try_trampoline_t,",
          "4443:                           try_continue, NJS_VMCODE_TRY_CONTINUE, 1,",
          "4444:                           NULL);",
          "4446:         try_continue->exit_value = exit_index;",
          "4448:         try_continue->offset = -sizeof(njs_vmcode_try_end_t);",
          "4450:         if (try_break != NULL) {",
          "4451:             try_continue->offset -= sizeof(njs_vmcode_try_trampoline_t);",
          "4452:         }",
          "4453:     }",
          "4455:     generator->block = catch_block->next;",
          "4457:     njs_code_set_jump_offset(generator, njs_vmcode_catch_t,",
          "4458:                              ctx->catch_offset);",
          "4462:     njs_generate_code_catch(generator, catch, ctx->exception_index, NULL);",
          "4464:     njs_code_set_jump_offset(generator, njs_vmcode_try_end_t,",
          "4465:                              catch_end_offset);",
          "4467:     njs_code_set_jump_offset(generator, njs_vmcode_try_end_t,",
          "4468:                              ctx->try_offset);",
          "4470:     njs_generator_next(generator, njs_generate, node->right);",
          "4472:     return njs_generator_after(vm, generator,",
          "4473:                                njs_queue_first(&generator->stack), node,",
          "4474:                                njs_generate_try_end, ctx, 0);",
          "4475: }",
          "4478: static njs_int_t",
          "4479: njs_generate_try_end(njs_vm_t *vm, njs_generator_t *generator,",
          "4480:     njs_parser_node_t *node)",
          "4481: {",
          "4482:     njs_int_t                ret;",
          "4483:     njs_index_t              exit_index;",
          "4484:     const njs_str_t          *dest_label;",
          "4485:     njs_vmcode_finally_t     *finally;",
          "4486:     njs_generator_patch_t    *patch;",
          "4487:     njs_generator_block_t    *block, *try_block, *catch_block;",
          "4488:     njs_generator_try_ctx_t  *ctx;",
          "4490:     ctx = generator->context;",
          "4492:     try_block = ctx->try_block;",
          "4493:     exit_index = try_block->index;",
          "4494:     catch_block = ctx->catch_block;",
          "4496:     njs_generate_code_finally(generator, finally, ctx->exception_index,",
          "4497:                               exit_index, node);",
          "4499:     if (try_block->continuation != NULL",
          "4500:         || (catch_block && catch_block->continuation != NULL))",
          "4501:     {",
          "4502:         dest_label = njs_generate_jump_destination(vm, generator->block,",
          "4503:                                                    \"try continue\",",
          "4504:                                                    NJS_GENERATOR_LOOP,",
          "4505:                                                    &ctx->try_cont_label,",
          "4506:                                                    &ctx->catch_cont_label);",
          "4507:         if (njs_slow_path(dest_label == NULL)) {",
          "4508:             return NJS_ERROR;",
          "4515:         block = njs_generate_find_block(generator->block,",
          "4516:                                         NJS_GENERATOR_LOOP, dest_label);",
          "4518:         patch = njs_generate_make_continuation_patch(vm, block, dest_label,",
          "4519:                          njs_code_offset(generator, finally)",
          "4520:                          + offsetof(njs_vmcode_finally_t, continue_offset));",
          "4521:         if (njs_slow_path(patch == NULL)) {",
          "4522:             return NJS_ERROR;",
          "4523:         }",
          "4524:     }",
          "4526:     if (try_block->exit != NULL",
          "4527:         || (catch_block != NULL && catch_block->exit != NULL))",
          "4528:     {",
          "4529:         dest_label = njs_generate_jump_destination(vm, generator->block,",
          "4530:                                                    \"try break/return\",",
          "4531:                                                    NJS_GENERATOR_ALL",
          "4532:                                                    | NJS_GENERATOR_TRY,",
          "4533:                                                    &ctx->try_exit_label,",
          "4534:                                                    &ctx->catch_exit_label);",
          "4535:         if (njs_slow_path(dest_label == NULL)) {",
          "4536:             return NJS_ERROR;",
          "4537:         }",
          "4543:         block = njs_generate_find_block(generator->block,",
          "4544:                                         NJS_GENERATOR_ALL",
          "4545:                                         | NJS_GENERATOR_TRY, dest_label);",
          "4546:         if (block != NULL) {",
          "4547:             patch = njs_generate_make_exit_patch(vm, block, dest_label,",
          "4548:                             njs_code_offset(generator, finally)",
          "4549:                             + offsetof(njs_vmcode_finally_t, break_offset));",
          "4554:     }",
          "4556:     ret = njs_generate_index_release(vm, generator, ctx->exception_index);",
          "4557:     if (njs_slow_path(ret != NJS_OK)) {",
          "4558:         return ret;",
          "4561:     return njs_generator_stack_pop(vm, generator, ctx);",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "3567: njs_generate_throw_statement(njs_vm_t *vm, njs_generator_t *generator,",
          "3568:     njs_parser_node_t *node)",
          "3569: {",
          "3584: }",
          "",
          "[Removed Lines]",
          "3570:     njs_int_t           ret;",
          "3571:     njs_vmcode_throw_t  *throw;",
          "3573:     ret = njs_generator(vm, generator, node->right);",
          "3575:     if (njs_fast_path(ret == NJS_OK)) {",
          "3576:         njs_generate_code(generator, njs_vmcode_throw_t, throw,",
          "3577:                           NJS_VMCODE_THROW, 1, node);",
          "3579:         node->index = node->right->index;",
          "3580:         throw->retval = node->index;",
          "3581:     }",
          "3583:     return ret;",
          "",
          "[Added Lines]",
          "4569:     njs_generator_next(generator, njs_generate, node->right);",
          "4571:     return njs_generator_after(vm, generator,",
          "4572:                                njs_queue_first(&generator->stack), node,",
          "4573:                                njs_generate_throw_end, NULL, 0);",
          "4574: }",
          "4576: static njs_int_t",
          "4577: njs_generate_throw_end(njs_vm_t *vm, njs_generator_t *generator,",
          "4578:     njs_parser_node_t *node)",
          "4579: {",
          "4580:     njs_vmcode_throw_t  *throw;",
          "4582:     njs_generate_code(generator, njs_vmcode_throw_t, throw,",
          "4583:                       NJS_VMCODE_THROW, 1, node);",
          "4585:     node->index = node->right->index;",
          "4586:     throw->retval = node->index;",
          "4588:     return njs_generator_stack_pop(vm, generator, NULL);",
          "",
          "---------------",
          "--- Hunk 104 ---",
          "[Context before]",
          "3588: njs_generate_import_statement(njs_vm_t *vm, njs_generator_t *generator,",
          "3589:     njs_parser_node_t *node)",
          "3590: {",
          "3598:     lvalue = node->left;",
          "3599:     expr = node->right;",
          "",
          "[Removed Lines]",
          "3591:     njs_int_t                 ret;",
          "3592:     njs_index_t               index;",
          "3593:     njs_module_t              *module;",
          "3594:     njs_variable_t            *var;",
          "3595:     njs_parser_node_t         *lvalue, *expr;",
          "3596:     njs_vmcode_object_copy_t  *copy;",
          "",
          "[Added Lines]",
          "4596:     njs_variable_t     *var;",
          "4597:     njs_parser_node_t  *lvalue, *expr;",
          "",
          "---------------",
          "--- Hunk 105 ---",
          "[Context before]",
          "3603:         return NJS_ERROR;",
          "3604:     }",
          "3608:     if (expr->left != NULL) {",
          "3613:     }",
          "3615:     module = (njs_module_t *) expr->index;",
          "3617:     njs_generate_code(generator, njs_vmcode_object_copy_t, copy,",
          "3618:                       NJS_VMCODE_OBJECT_COPY, 2, node);",
          "3620:     copy->object = module->index;",
          "3623: }",
          "",
          "[Removed Lines]",
          "3606:     index = lvalue->index;",
          "3609:         ret = njs_generator(vm, generator, expr->left);",
          "3610:         if (njs_slow_path(ret != NJS_OK)) {",
          "3611:             return ret;",
          "3612:         }",
          "3619:     copy->retval = index;",
          "3622:     return NJS_OK;",
          "",
          "[Added Lines]",
          "4608:         njs_generator_next(generator, njs_generate, expr->left);",
          "4610:         return njs_generator_after(vm, generator,",
          "4611:                                    njs_queue_first(&generator->stack), node,",
          "4612:                                    njs_generate_import_statement_end, NULL, 0);",
          "4615:     return njs_generate_import_statement_end(vm, generator, node);",
          "4616: }",
          "4619: static njs_int_t",
          "4620: njs_generate_import_statement_end(njs_vm_t *vm, njs_generator_t *generator,",
          "4621:     njs_parser_node_t *node)",
          "4622: {",
          "4623:     njs_module_t              *module;",
          "4624:     njs_parser_node_t         *expr;",
          "4625:     njs_vmcode_object_copy_t  *copy;",
          "4627:     expr = node->right;",
          "4633:     copy->retval = node->left->index;",
          "4636:     return njs_generator_stack_pop(vm, generator, NULL);",
          "",
          "---------------",
          "--- Hunk 106 ---",
          "[Context before]",
          "3627: njs_generate_export_statement(njs_vm_t *vm, njs_generator_t *generator,",
          "3628:     njs_parser_node_t *node)",
          "3629: {",
          "3631:     njs_parser_node_t    *obj;",
          "3632:     njs_vmcode_return_t  *code;",
          "3634:     obj = node->right;",
          "3641:     njs_generate_code(generator, njs_vmcode_return_t, code,",
          "3642:                       NJS_VMCODE_RETURN, 1, NULL);",
          "3643:     code->retval = obj->index;",
          "3644:     node->index = obj->index;",
          "3647: }",
          "",
          "[Removed Lines]",
          "3630:     njs_int_t            ret;",
          "3636:     ret = njs_generator(vm, generator, obj);",
          "3637:     if (njs_slow_path(ret != NJS_OK)) {",
          "3638:         return ret;",
          "3639:     }",
          "3646:     return NJS_OK;",
          "",
          "[Added Lines]",
          "4644:     njs_generator_next(generator, njs_generate, node->right);",
          "4646:     return njs_generator_after(vm, generator,",
          "4647:                                njs_queue_first(&generator->stack), node,",
          "4648:                                njs_generate_export_statement_end, NULL, 0);",
          "4649: }",
          "4652: static njs_int_t",
          "4653: njs_generate_export_statement_end(njs_vm_t *vm, njs_generator_t *generator,",
          "4654:     njs_parser_node_t *node)",
          "4655: {",
          "4666:     return njs_generator_stack_pop(vm, generator, NULL);",
          "4667: }",
          "4670: static njs_int_t",
          "4671: njs_generate_wo_dest(njs_vm_t *vm, njs_generator_t *generator,",
          "4672:     njs_parser_node_t *node)",
          "4673: {",
          "4674:     njs_parser_scope_t  *scope;",
          "4676:     scope = njs_function_scope(node->scope);",
          "4678:     scope->dest_disable = 1;",
          "4680:     njs_generator_next(generator, njs_generate, node);",
          "4682:     return njs_generator_after(vm, generator,",
          "4683:                                njs_queue_first(&generator->stack), node,",
          "4684:                                njs_generate_wo_dest_after, NULL, 0);",
          "4685: }",
          "4688: static njs_int_t",
          "4689: njs_generate_wo_dest_after(njs_vm_t *vm, njs_generator_t *generator,",
          "4690:     njs_parser_node_t *node)",
          "4691: {",
          "4692:     njs_parser_scope_t  *scope;",
          "4694:     scope = njs_function_scope(node->scope);",
          "4696:     scope->dest_disable = 0;",
          "4698:     return njs_generator_stack_pop(vm, generator, NULL);",
          "4699: }",
          "4702: static njs_int_t",
          "4703: njs_generate_global_reference(njs_vm_t *vm, njs_generator_t *generator,",
          "4704:     njs_parser_node_t *node, njs_bool_t exception)",
          "4705: {",
          "4706:     njs_int_t                ret;",
          "4707:     njs_index_t              index;",
          "4708:     njs_value_t              property;",
          "4709:     njs_vmcode_prop_get_t    *prop_get;",
          "4710:     const njs_lexer_entry_t  *lex_entry;",
          "4712:     index = njs_generate_temp_index_get(vm, generator, node);",
          "4713:     if (njs_slow_path(index == NJS_INDEX_ERROR)) {",
          "4714:         return NJS_ERROR;",
          "4715:     }",
          "4717:     njs_generate_code(generator, njs_vmcode_prop_get_t, prop_get,",
          "4718:                  exception ? NJS_VMCODE_GLOBAL_GET: NJS_VMCODE_PROPERTY_GET,",
          "4719:                  3, node);",
          "4721:     prop_get->value = index;",
          "4723:     prop_get->object = njs_scope_global_this_index();",
          "4724:     if (njs_slow_path(prop_get->object == NJS_INDEX_ERROR)) {",
          "4725:         return NJS_ERROR;",
          "4726:     }",
          "4728:     lex_entry = njs_lexer_entry(node->u.reference.unique_id);",
          "4729:     if (njs_slow_path(lex_entry == NULL)) {",
          "4730:         return NJS_ERROR;",
          "4731:     }",
          "4733:     ret = njs_string_set(vm, &property, lex_entry->name.start,",
          "4734:                          lex_entry->name.length);",
          "4735:     if (njs_slow_path(ret != NJS_OK)) {",
          "4736:         return NJS_ERROR;",
          "4737:     }",
          "4739:     prop_get->property = njs_scope_global_index(vm, &property,",
          "4740:                                                 generator->runtime);",
          "4741:     if (njs_slow_path(prop_get->property == NJS_INDEX_ERROR)) {",
          "4742:         return NJS_ERROR;",
          "4743:     }",
          "4745:     node->index = index;",
          "4747:     if (!exception) {",
          "4748:         return NJS_OK;",
          "4749:     }",
          "4751:     return njs_generate_reference_error(vm, generator, node);",
          "4752: }",
          "4755: static njs_int_t",
          "4756: njs_generate_reference_error(njs_vm_t *vm, njs_generator_t *generator,",
          "4757:     njs_parser_node_t *node)",
          "4758: {",
          "4759:     njs_vmcode_error_t       *ref_err;",
          "4760:     const njs_lexer_entry_t  *lex_entry;",
          "4762:     if (njs_slow_path(!node->u.reference.not_defined)) {",
          "4763:         njs_internal_error(vm, \"variable is not defined but not_defined \"",
          "4764:                                \"is not set\");",
          "4765:         return NJS_ERROR;",
          "4766:     }",
          "4768:     njs_generate_code(generator, njs_vmcode_error_t, ref_err, NJS_VMCODE_ERROR,",
          "4769:                       0, NULL);",
          "4771:     ref_err->type = NJS_OBJ_TYPE_REF_ERROR;",
          "4772:     lex_entry = njs_lexer_entry(node->u.reference.unique_id);",
          "4773:     if (njs_slow_path(lex_entry == NULL)) {",
          "4774:         return NJS_ERROR;",
          "4775:     }",
          "4777:     return njs_name_copy(vm, &ref_err->u.name, &lex_entry->name);",
          "",
          "---------------",
          "--- Hunk 107 ---",
          "[Context before]",
          "3752: }",
          "3755: static njs_int_t",
          "3756: njs_generate_node_index_release(njs_vm_t *vm, njs_generator_t *generator,",
          "3757:     njs_parser_node_t *node)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4886: static njs_int_t",
          "4887: njs_generate_children_indexes_release_pop(njs_vm_t *vm,",
          "4888:     njs_generator_t *generator, njs_parser_node_t *node)",
          "4889: {",
          "4890:     njs_int_t  ret;",
          "4892:     ret = njs_generate_node_index_release(vm, generator, node->left);",
          "4894:     if (njs_fast_path(ret == NJS_OK)) {",
          "4895:         return njs_generate_node_index_release_pop(vm, generator, node->right);",
          "4896:     }",
          "4898:     return ret;",
          "4899: }",
          "",
          "---------------",
          "--- Hunk 108 ---",
          "[Context before]",
          "3763:     return NJS_OK;",
          "3764: }",
          "3767: static njs_int_t",
          "3768: njs_generate_index_release(njs_vm_t *vm, njs_generator_t *generator,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4913: static njs_int_t",
          "4914: njs_generate_node_index_release_pop(njs_vm_t *vm, njs_generator_t *generator,",
          "4915:     njs_parser_node_t *node)",
          "4916: {",
          "4917:     njs_int_t  ret;",
          "4919:     if (node != NULL && node->temporary) {",
          "4920:         ret = njs_generate_index_release(vm, generator, node->index);",
          "4921:         if (njs_slow_path(ret != NJS_OK)) {",
          "4922:             return ret;",
          "4923:         }",
          "4924:     }",
          "4926:     return njs_generator_stack_pop(vm, generator, NULL);",
          "4927: }",
          "",
          "---------------",
          "--- Hunk 109 ---",
          "[Context before]",
          "3793:     return NJS_ERROR;",
          "3794: }",
          "",
          "[Removed Lines]",
          "3797: static njs_int_t",
          "3798: njs_generate_global_reference(njs_vm_t *vm, njs_generator_t *generator,",
          "3799:     njs_parser_node_t *node, njs_bool_t exception)",
          "3800: {",
          "3801:     njs_int_t                ret;",
          "3802:     njs_index_t              index;",
          "3803:     njs_value_t              property;",
          "3804:     njs_vmcode_prop_get_t    *prop_get;",
          "3805:     const njs_lexer_entry_t  *lex_entry;",
          "3807:     index = njs_generate_temp_index_get(vm, generator, node);",
          "3808:     if (njs_slow_path(index == NJS_INDEX_ERROR)) {",
          "3809:         return NJS_ERROR;",
          "3810:     }",
          "3812:     njs_generate_code(generator, njs_vmcode_prop_get_t, prop_get,",
          "3813:                  exception ? NJS_VMCODE_GLOBAL_GET: NJS_VMCODE_PROPERTY_GET,",
          "3814:                  3, node);",
          "3816:     prop_get->value = index;",
          "3818:     prop_get->object = njs_scope_global_this_index();",
          "3819:     if (njs_slow_path(prop_get->object == NJS_INDEX_ERROR)) {",
          "3820:         return NJS_ERROR;",
          "3821:     }",
          "3823:     lex_entry = njs_lexer_entry(node->u.reference.unique_id);",
          "3824:     if (njs_slow_path(lex_entry == NULL)) {",
          "3825:         return NJS_ERROR;",
          "3826:     }",
          "3828:     ret = njs_string_set(vm, &property, lex_entry->name.start,",
          "3829:                          lex_entry->name.length);",
          "3830:     if (njs_slow_path(ret != NJS_OK)) {",
          "3831:         return NJS_ERROR;",
          "3832:     }",
          "3834:     prop_get->property = njs_scope_global_index(vm, &property,",
          "3835:                                                 generator->runtime);",
          "3836:     if (njs_slow_path(prop_get->property == NJS_INDEX_ERROR)) {",
          "3837:         return NJS_ERROR;",
          "3838:     }",
          "3840:     node->index = index;",
          "3842:     if (!exception) {",
          "3843:         return NJS_OK;",
          "3844:     }",
          "3846:     return njs_generate_reference_error(vm, generator, node);",
          "3847: }",
          "3850: static njs_int_t",
          "3851: njs_generate_reference_error(njs_vm_t *vm, njs_generator_t *generator,",
          "3852:     njs_parser_node_t *node)",
          "3853: {",
          "3854:     njs_vmcode_error_t       *ref_err;",
          "3855:     const njs_lexer_entry_t  *lex_entry;",
          "3857:     if (njs_slow_path(!node->u.reference.not_defined)) {",
          "3858:         njs_internal_error(vm, \"variable is not defined but not_defined \"",
          "3859:                                \"is not set\");",
          "3860:         return NJS_ERROR;",
          "3861:     }",
          "3863:     njs_generate_code(generator, njs_vmcode_error_t, ref_err, NJS_VMCODE_ERROR,",
          "3864:                       0, NULL);",
          "3866:     ref_err->type = NJS_OBJ_TYPE_REF_ERROR;",
          "3867:     lex_entry = njs_lexer_entry(node->u.reference.unique_id);",
          "3868:     if (njs_slow_path(lex_entry == NULL)) {",
          "3869:         return NJS_ERROR;",
          "3870:     }",
          "3872:     return njs_name_copy(vm, &ref_err->u.name, &lex_entry->name);",
          "3873: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/njs_generator.h||src/njs_generator.h": [
          "File: src/njs_generator.h -> src/njs_generator.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: typedef struct njs_generator_block_s   njs_generator_block_t;",
          "13: struct njs_generator_s {",
          "14:     njs_value_t                     *local_scope;",
          "16:     njs_generator_block_t           *block;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: typedef njs_int_t (*njs_generator_state_func_t)(njs_vm_t *vm,",
          "15:     njs_generator_t *generator, njs_parser_node_t *node);",
          "19:     njs_generator_state_func_t      state;",
          "20:     njs_queue_t                     stack;",
          "21:     njs_parser_node_t               *node;",
          "22:     void                            *context;",
          "",
          "---------------"
        ],
        "src/test/njs_unit_test.c||src/test/njs_unit_test.c": [
          "File: src/test/njs_unit_test.c -> src/test/njs_unit_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12957:       njs_str(\"true\") },",
          "12959: #if NJS_HAVE_LARGE_STACK",
          "12961:       njs_str(\"SyntaxError: Unexpected token \\\"}\\\" in runtime:1\") },",
          "12964:       njs_str(\"SyntaxError: Unexpected token \\\")\\\" in runtime:1\") },",
          "12967:       njs_str(\"SyntaxError: Unexpected token \\\"}\\\" in runtime:1\") },",
          "12973:       njs_str(\"SyntaxError: Unexpected token \\\"}\\\" in runtime:1\") },",
          "12976:       njs_str(\"SyntaxError: Unexpected token \\\")\\\" in runtime:1\") },",
          "12988:       njs_str(\"SyntaxError: Unexpected token \\\"}\\\" in runtime:1\") },",
          "12995: #endif",
          "12997:     { njs_str(\"var f = new Function('return 1;'); f();\"),",
          "",
          "[Removed Lines]",
          "12960:     { njs_str(\"new Function(\\\"(\\\".repeat(2**13));\"),",
          "12963:     { njs_str(\"new Function(\\\"{\\\".repeat(2**13));\"),",
          "12966:     { njs_str(\"new Function(\\\"[\\\".repeat(2**13));\"),",
          "12969:     { njs_str(\"new Function(\\\"`\\\".repeat(2**13));\"),",
          "12970:       njs_str(\"RangeError: Maximum call stack size exceeded\") },",
          "12972:     { njs_str(\"new Function(\\\"{[\\\".repeat(2**13));\"),",
          "12975:     { njs_str(\"new Function(\\\"{;\\\".repeat(2**13));\"),",
          "12978:     { njs_str(\"new Function(\\\"1;\\\".repeat(2**13));\"),",
          "12979:       njs_str(\"RangeError: Maximum call stack size exceeded\") },",
          "12981:     { njs_str(\"new Function(\\\"~\\\".repeat(2**13));\"),",
          "12982:       njs_str(\"SyntaxError: Unexpected token \\\"}\\\" in runtime:1\") },",
          "12984:     { njs_str(\"new Function(\\\"new \\\".repeat(2**13));\"),",
          "12985:       njs_str(\"SyntaxError: Unexpected token \\\"}\\\" in runtime:1\") },",
          "12987:     { njs_str(\"new Function(\\\"typeof \\\".repeat(2**13));\"),",
          "12990:     { njs_str(\"new Function(\\\"1\\\" + \\\"** 1\\\".repeat(2**13));\"),",
          "12991:       njs_str(\"RangeError: Maximum call stack size exceeded\") },",
          "12993:     { njs_str(\"new Function(\\\"var a; a\\\" + \\\"= a\\\".repeat(2**13));\"),",
          "12994:       njs_str(\"RangeError: Maximum call stack size exceeded\") },",
          "",
          "[Added Lines]",
          "12960:     { njs_str(\"new Function('('.repeat(2**13));\"),",
          "12963:     { njs_str(\"new Function('{'.repeat(2**13));\"),",
          "12966:     { njs_str(\"new Function('['.repeat(2**13));\"),",
          "12969:     { njs_str(\"new Function('`'.repeat(2**13));\"),",
          "12970:       njs_str(\"[object Function]\") },",
          "12972:     { njs_str(\"new Function('{['.repeat(2**13));\"),",
          "12975:     { njs_str(\"new Function('{;'.repeat(2**13));\"),",
          "12978:     { njs_str(\"(new Function('1;'.repeat(2**13) + 'return 2'))()\"),",
          "12979:       njs_str(\"2\") },",
          "12981:     { njs_str(\"(new Function('return' + '~'.repeat(2**13) + '3'))()\"),",
          "12982:       njs_str(\"3\") },",
          "12984:     { njs_str(\"(new Function('return' + '~'.repeat(2**13+1) + '3'))()\"),",
          "12985:       njs_str(\"-4\") },",
          "12987:     { njs_str(\"new Function('new '.repeat(2**13));\"),",
          "12990:     { njs_str(\"(new Function('return ' + 'typeof '.repeat(2**13) + 'x'))()\"),",
          "12991:       njs_str(\"string\") },",
          "12993:     { njs_str(\"(new Function('return 5' + '** 1'.repeat(2**13)))()\"),",
          "12994:       njs_str(\"5\") },",
          "12996:     { njs_str(\"(new Function('var a = 7; return a' + '= a'.repeat(2**13)))()\"),",
          "12997:       njs_str(\"7\") },",
          "12999:     { njs_str(\"var a = (new Function('return [' + '1,'.repeat(2**13) + ']'))();\"",
          "13000:               \"a.push(5); [a[2**13 - 1], a[2**13]]\"),",
          "13001:       njs_str(\"1,5\") },",
          "",
          "---------------"
        ]
      }
    }
  ]
}