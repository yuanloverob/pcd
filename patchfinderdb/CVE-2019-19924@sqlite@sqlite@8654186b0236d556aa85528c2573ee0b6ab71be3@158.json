{
  "cve_id": "CVE-2019-19924",
  "cve_desc": "SQLite 3.30.1 mishandles certain parser-tree rewriting, related to expr.c, vdbeaux.c, and window.c. This is caused by incorrect sqlite3WindowRewrite() error handling.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
  "patch_info": {
    "commit_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8654186b0236d556aa85528c2573ee0b6ab71be3",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/vdbeaux.c",
      "src/window.c"
    ],
    "message": "When an error occurs while rewriting the parser tree for window functions in the sqlite3WindowRewrite() routine, make sure that pParse->nErr is set, and make sure that this shuts down any subsequent code generation that might depend on the transformations that were implemented.  This fixes a problem discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: e2bddcd4c55ba3cbe0130332679ff4b048630d0ced9a8899982edb5a3569ba7f",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/vdbeaux.c||src/vdbeaux.c",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4417c5bf0aabb34ed174f01afd981c924ae965a42128719d8d6735536631d12f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "376:   int addr;",
      "377:   CollSeq *p4;",
      "379:   if( isCommuted ){",
      "380:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
      "381:   }else{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:   if( pParse->nErr ) return 0;",
      "",
      "---------------"
    ],
    "src/vdbeaux.c||src/vdbeaux.c": [
      "File: src/vdbeaux.c -> src/vdbeaux.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1304: static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){",
      "1305:   assert( p->nOp>0 || p->aOp==0 );",
      "1307:   if( p->nOp ){",
      "1308:     assert( p->aOp );",
      "1309:     sqlite3DbFree(p->db, p->aOp[p->nOp-1].zComment);",
      "",
      "[Removed Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );",
      "",
      "[Added Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed",
      "1307:           || p->pParse->nErr>0 );",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "935:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
      "936:     if( pTab==0 ){",
      "938:     }",
      "940:     p->pSrc = 0;",
      "",
      "[Removed Lines]",
      "937:       return SQLITE_NOMEM;",
      "",
      "[Added Lines]",
      "937:       return sqlite3ErrorToParser(db, SQLITE_NOMEM);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1039:     sqlite3DbFree(db, pTab);",
      "1040:   }",
      "1042:   return rc;",
      "1043: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1042:   if( rc && pParse->nErr==0 ){",
      "1043:     assert( pParse->db->mallocFailed );",
      "1044:     return sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
      "1045:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "490e6f2506a1ebd37c2acdddcd2484d7b59d8071",
      "candidate_info": {
        "commit_hash": "490e6f2506a1ebd37c2acdddcd2484d7b59d8071",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/490e6f2506a1ebd37c2acdddcd2484d7b59d8071",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/altertab3.test"
        ],
        "message": "Fix a stack overflow that could occur when renaming a table that has a trigger containing a window function invocation that itself contains a specific syntax error.\n\nFossilOrigin-Name: c621fc668c6538f9f5bdac204f012c64998679a61aa8e224d212503820224c09",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 50fe48458942fa7a6bcc76316c6321f95b23dc34f2f8e0a483826483b2fb16f6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "866: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "867:         if( pExpr->y.pWin ){",
          "868:           Select *pSel = pNC->pWinSelect;",
          "870:           sqlite3WalkExprList(pWalker, pExpr->y.pWin->pPartition);",
          "871:           sqlite3WalkExprList(pWalker, pExpr->y.pWin->pOrderBy);",
          "872:           sqlite3WalkExpr(pWalker, pExpr->y.pWin->pFilter);",
          "",
          "[Removed Lines]",
          "869:           sqlite3WindowUpdate(pParse, pSel->pWinDefn, pExpr->y.pWin, pDef);",
          "",
          "[Added Lines]",
          "869:           if( IN_RENAME_OBJECT==0 ){",
          "870:             sqlite3WindowUpdate(pParse, pSel->pWinDefn, pExpr->y.pWin, pDef);",
          "871:           }",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:   ALTER TABLE Table0 RENAME Col0 TO Col0;",
          "143: }",
          "145: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "145: #-------------------------------------------------------------------------",
          "146: reset_db",
          "147: do_execsql_test 7.1.0 {",
          "148:   CREATE TABLE t1(a,b,c);",
          "149:   CREATE TRIGGER AFTER INSERT ON t1 BEGIN",
          "150:     SELECT a, rank() OVER w1 FROM t1",
          "151:     WINDOW w1 AS (PARTITION BY b, percent_rank() OVER w1);",
          "152:   END;",
          "153: }",
          "155: do_execsql_test 7.1.2 {",
          "156:   ALTER TABLE t1 RENAME TO t1x;",
          "157:   SELECT sql FROM sqlite_master;",
          "158: } {",
          "159:   {CREATE TABLE \"t1x\"(a,b,c)}",
          "160:   {CREATE TRIGGER AFTER INSERT ON \"t1x\" BEGIN",
          "161:     SELECT a, rank() OVER w1 FROM \"t1x\"",
          "162:     WINDOW w1 AS (PARTITION BY b, percent_rank() OVER w1);",
          "163:   END}",
          "164: }",
          "166: do_execsql_test 7.2.1 {",
          "167:   DROP TRIGGER after;",
          "168:   CREATE TRIGGER AFTER INSERT ON t1x BEGIN",
          "169:     SELECT a, rank() OVER w1 FROM t1x",
          "170:     WINDOW w1 AS (PARTITION BY b, percent_rank() OVER w1 ORDER BY d);",
          "171:   END;",
          "172: }",
          "174: do_catchsql_test 7.2.2 {",
          "175:   ALTER TABLE t1x RENAME TO t1;",
          "176: } {1 {error in trigger AFTER: no such column: d}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b042d921280d839ca891cd15ff0d880379c19aaa",
      "candidate_info": {
        "commit_hash": "b042d921280d839ca891cd15ff0d880379c19aaa",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b042d921280d839ca891cd15ff0d880379c19aaa",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "test/misc7.test"
        ],
        "message": "Give a meaningful error on an attempt to use UPSERT on a virtual table, rather than simply not working.\n\nFossilOrigin-Name: fa98748f956cff95fcfda3a513cea4df27aa573ae795a6855c40bfeca661d0b2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "test/misc7.test||test/misc7.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d7f55c62c3fa053b9b930a044b60076a8278cbf679d8e5116b95f2ff19247f6b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "826:   }",
          "827: #ifndef SQLITE_OMIT_UPSERT",
          "828:   if( pUpsert ){",
          "829:     pTabList->a[0].iCursor = iDataCur;",
          "830:     pUpsert->pUpsertSrc = pTabList;",
          "831:     pUpsert->regData = regData;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "829:     if( IsVirtual(pTab) ){",
          "830:       sqlite3ErrorMsg(pParse, \"UPSERT not implemented for virtual table \\\"%s\\\"\",",
          "831:               pTab->zName);",
          "832:       goto insert_cleanup;",
          "833:     }",
          "",
          "---------------"
        ],
        "test/misc7.test||test/misc7.test": [
          "File: test/misc7.test -> test/misc7.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "227:     }",
          "228:   } {1}",
          "229:   set sqlite_where_trace 0",
          "231:   # Specify an ORDER BY clause that cannot be indexed.",
          "232:   do_test misc7-11 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "230:   do_catchsql_test misc7-10.1 {",
          "231:     INSERT INTO t1(a,b,c) VALUES(12345,2,3) ON CONFLICT(a) DO NOTHING;",
          "232:   } {1 {UPSERT not implemented for virtual table \"t1\"}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7e35e81dcbf150df7e3c26d59c1c2dddf0f147ab",
      "candidate_info": {
        "commit_hash": "7e35e81dcbf150df7e3c26d59c1c2dddf0f147ab",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7e35e81dcbf150df7e3c26d59c1c2dddf0f147ab",
        "files": [
          "ext/misc/json1.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Do not allow the json_set() function to overwrite the same element more than once.\n\nFossilOrigin-Name: f237f60e4fa9171dfe9a77c8637595c2701e971034d41bd6018944e8b2b27a6f",
        "before_after_code_files": [
          "ext/misc/json1.c||ext/misc/json1.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/json1.c||ext/misc/json1.c": [
          "File: ext/misc/json1.c -> ext/misc/json1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1083:   const char *zKey;",
          "1084:   JsonNode *pRoot = &pParse->aNode[iRoot];",
          "1085:   if( zPath[0]==0 ) return pRoot;",
          "1086:   if( zPath[0]=='.' ){",
          "1087:     if( pRoot->eType!=JSON_OBJECT ) return 0;",
          "1088:     zPath++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1086:   if( pRoot->jnFlags & JNODE_REPLACE ) return 0;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b9eda2249ab5cf523093e4849c317d9a4b1743f7e15d96bdd6bb6cc423302914",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "27a037354c9bc67a65f84e45584dc67c24c15f58",
      "candidate_info": {
        "commit_hash": "27a037354c9bc67a65f84e45584dc67c24c15f58",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/27a037354c9bc67a65f84e45584dc67c24c15f58",
        "files": [
          "ext/fts5/fts5_aux.c",
          "ext/fts5/fts5_storage.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Avoid a division-by-zero error in fts5 caused by a corrupt database.\n\nFossilOrigin-Name: 928e622178bd004be52b2271ac554176aebe9d6e115ecac4e7072eccbb4262b5",
        "before_after_code_files": [
          "ext/fts5/fts5_aux.c||ext/fts5/fts5_aux.c",
          "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_aux.c||ext/fts5/fts5_aux.c": [
          "File: ext/fts5/fts5_aux.c -> ext/fts5/fts5_aux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "588:     if( rc==SQLITE_OK ) rc = pApi->xRowCount(pFts, &nRow);",
          "589:     if( rc==SQLITE_OK ) rc = pApi->xColumnTotalSize(pFts, -1, &nToken);",
          "590:     if( rc==SQLITE_OK ) p->avgdl = (double)nToken  / (double)nRow;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "589:     assert( rc!=SQLITE_OK || nRow>0 );",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c": [
          "File: ext/fts5/fts5_storage.c -> ext/fts5/fts5_storage.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1078: int sqlite3Fts5StorageRowCount(Fts5Storage *p, i64 *pnRow){",
          "1079:   int rc = fts5StorageLoadTotals(p, 0);",
          "1080:   if( rc==SQLITE_OK ){",
          "1082:   }",
          "1083:   return rc;",
          "1084: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1087:     if( p->nTotalRow<=0 ) rc = FTS5_CORRUPT;",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "4652:   SELECT rowid FROM t1('a');",
          "4653: } {1}",
          "4657: sqlite3_fts5_may_be_corrupt 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4655: #-------------------------------------------------------------------------",
          "4656: reset_db",
          "4657: do_execsql_test 38.0 {",
          "4658:   CREATE VIRTUAL TABLE t1 USING fts5(b, c);",
          "4659:   INSERT INTO t1 VALUES('a', 'b');",
          "4660:   INSERT INTO t1 VALUES('a', 'b');",
          "4661:   SELECT quote(block) FROM t1_data WHERE rowid=1;",
          "4662: } {X'020202'}",
          "4664: do_execsql_test 38.1 {",
          "4665:   SELECT * FROM t1('a b') ORDER BY rank;",
          "4666: } {a b a b}",
          "4668: do_execsql_test 38.2 {",
          "4669:   UPDATE t1_data SET block = X'000202' WHERE rowid=1;",
          "4670: }",
          "4671: breakpoint",
          "4672: do_catchsql_test 38.3 {",
          "4673:   SELECT * FROM t1('a b') ORDER BY rank;",
          "4674: } {1 {database disk image is malformed}}",
          "4676: db close",
          "4677: sqlite3 db test.db",
          "4678: do_catchsql_test 38.4 {",
          "4679:   SELECT * FROM t1('a b') ORDER BY rank;",
          "4680: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7cd56cad5efead5097e9918c87313bb46e583fe62bae0df1be60e10117e2c3cb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9d23ea74d44f458f39b51ae39a9b0d617947a90d",
      "candidate_info": {
        "commit_hash": "9d23ea74d44f458f39b51ae39a9b0d617947a90d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9d23ea74d44f458f39b51ae39a9b0d617947a90d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/indexexpr2.test"
        ],
        "message": "Fix other problems similar to ticket [c0390363].\n\nFossilOrigin-Name: 96ff2ba9c4bb71d5f7c6f359986a76a5364b7ac3e1a612441543a9eabecf31df",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/indexexpr2.test||test/indexexpr2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 33da6092d3d04b6eb6ab396b8c4f668e3529e26bf11e26f5fcb9b61fe3470197",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5014:     case TK_GE:",
          "5015:     case TK_PLUS:",
          "5016:     case TK_MINUS:",
          "5020:     case TK_BITOR:",
          "5022:     case TK_LSHIFT:",
          "5023:     case TK_RSHIFT:",
          "5025:       if( exprImpliesNotNull(pParse, p->pRight, pNN, iTab, seenNot) ) return 1;",
          "5027:     }",
          "",
          "[Removed Lines]",
          "5017:     case TK_STAR:",
          "5018:     case TK_REM:",
          "5019:     case TK_BITAND:",
          "5021:     case TK_SLASH:",
          "5024:     case TK_CONCAT: {",
          "",
          "[Added Lines]",
          "5020:     case TK_CONCAT:",
          "5021:       seenNot = 1;",
          "5023:     case TK_STAR:",
          "5024:     case TK_REM:",
          "5025:     case TK_BITAND:",
          "5026:     case TK_SLASH: {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5102:   if( ExprHasProperty(pExpr, EP_FromJoin) ) return WRC_Prune;",
          "5103:   switch( pExpr->op ){",
          "5104:     case TK_ISNOT:",
          "5107:     case TK_ISNULL:",
          "5108:     case TK_NOTNULL:",
          "5109:     case TK_IS:",
          "",
          "[Removed Lines]",
          "5105:     case TK_NOT:",
          "5106:     case TK_BITNOT:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5128:       }",
          "5129:       return WRC_Prune;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5131:     case TK_AND:",
          "5132:       if( sqlite3ExprImpliesNonNullRow(pExpr->pLeft, pWalker->u.iCur)",
          "5133:        && sqlite3ExprImpliesNonNullRow(pExpr->pRight, pWalker->u.iCur)",
          "5134:       ){",
          "5135:         pWalker->eCode = 1;",
          "5136:       }",
          "5137:       return WRC_Prune;",
          "5139:     case TK_BETWEEN:",
          "5140:       sqlite3WalkExpr(pWalker, pExpr->pLeft);",
          "5141:       return WRC_Prune;",
          "",
          "---------------"
        ],
        "test/indexexpr2.test||test/indexexpr2.test": [
          "File: test/indexexpr2.test -> test/indexexpr2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "303:   INSERT INTO t0(c0) VALUES (NULL);",
          "304: }",
          "308:   SELECT * FROM t0 WHERE ~('' BETWEEN t0.c0 AND TRUE);",
          "309: } {{}}",
          "312:   SELECT ~('' BETWEEN t0.c0 AND TRUE) FROM t0;",
          "313: } {-1}",
          "317: finish_test",
          "",
          "[Removed Lines]",
          "306: breakpoint",
          "307: do_execsql_test 8.1 {",
          "311: do_execsql_test 8.2 {",
          "",
          "[Added Lines]",
          "306: do_execsql_test 8.1.1 {",
          "309: do_execsql_test 8.1.2 {",
          "313: foreach {tn expr} {",
          "314:   1 \" 0  ==  (34 BETWEEN c0 AND 33)\"",
          "315:   2 \" 1  !=  (34 BETWEEN c0 AND 33)\"",
          "316:   3 \"-1   <  (34 BETWEEN c0 AND 33)\"",
          "317:   4 \"-1  <=  (34 BETWEEN c0 AND 33)\"",
          "318:   5 \" 1   >  (34 BETWEEN c0 AND 33)\"",
          "319:   6 \" 1  >=  (34 BETWEEN c0 AND 33)\"",
          "320:   7 \" 1   -  (34 BETWEEN c0 AND 33)\"",
          "321:   8 \"-1   +  (34 BETWEEN c0 AND 33)\"",
          "322:   9 \" 1   |  (34 BETWEEN c0 AND 33)\"",
          "323:  10 \" 1  <<  (34 BETWEEN c0 AND 33)\"",
          "324:  11 \" 1  >>  (34 BETWEEN c0 AND 33)\"",
          "325:  12 \" 1  ||  (34 BETWEEN c0 AND 33)\"",
          "326: } {",
          "327:   do_execsql_test 8.3.$tn.1 \"SELECT * FROM t0 WHERE $expr ORDER BY c0\" { {} }",
          "328:   do_execsql_test 8.3.$tn.2 \"SELECT ($expr) IS TRUE FROM t0\"           { 1 }",
          "329: }",
          "331: do_execsql_test 8.4 {",
          "332:   CREATE TABLE t1(a, b);",
          "333:   INSERT INTO t1 VALUES(1, 2), (3, 4);",
          "334:   CREATE TABLE t2(x, y);",
          "335: }",
          "337: foreach {tn expr} {",
          "338:   1 \" 0  ==  (a=0 AND y=1)\"",
          "339:   2 \" 1  !=  (a=0 AND y=1)\"",
          "340:   3 \"-1  <   (a=0 AND y=1)\"",
          "341:   4 \"-1  <=  (a=0 AND y=1)\"",
          "342:   5 \" 1   >  (a=0 AND y=1)\"",
          "343:   6 \" 1  >=  (a=0 AND y=1)\"",
          "344:   7 \" 1   -  (a=0 AND y=1)\"",
          "345:   8 \"-1   +  (a=0 AND y=1)\"",
          "346:   9 \" 1   |  (a=0 AND y=1)\"",
          "347:   10 \"1  <<  (a=0 AND y=1)\"",
          "348:   11 \"1  >>  (a=0 AND y=1)\"",
          "349:   12 \"1  ||  (a=0 AND y=1)\"",
          "351:   13 \" 0  ==  (10 BETWEEN y AND b)\"",
          "352:   14 \" 1  !=  (10 BETWEEN y AND b)\"",
          "353:   15 \"-1  <   (10 BETWEEN y AND b)\"",
          "354:   16 \"-1  <=  (10 BETWEEN y AND b)\"",
          "355:   17 \" 1   >  (10 BETWEEN y AND b)\"",
          "356:   18 \" 1  >=  (10 BETWEEN y AND b)\"",
          "357:   19 \" 1   -  (10 BETWEEN y AND b)\"",
          "358:   20 \"-1   +  (10 BETWEEN y AND b)\"",
          "359:   21 \" 1   |  (10 BETWEEN y AND b)\"",
          "360:   22 \" 1  <<  (10 BETWEEN y AND b)\"",
          "361:   23 \" 1  >>  (10 BETWEEN y AND b)\"",
          "362:   24 \" 1  ||  (10 BETWEEN y AND b)\"",
          "364:   25 \" 1  ||  (10 BETWEEN y AND b)\"",
          "365: } {",
          "366:   do_execsql_test 8.5.$tn.1 \"",
          "367:     SELECT * FROM t1 LEFT JOIN t2 WHERE $expr",
          "368:   \" {1 2 {} {} 3 4 {} {}}",
          "370:   do_execsql_test 8.5.$tn.2 \"",
          "371:     SELECT ($expr) IS TRUE FROM t1 LEFT JOIN t2",
          "372:   \" {1 1}",
          "373: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}