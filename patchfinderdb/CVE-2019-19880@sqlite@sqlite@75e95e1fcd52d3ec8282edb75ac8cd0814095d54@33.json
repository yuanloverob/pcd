{
  "cve_id": "CVE-2019-19880",
  "cve_desc": "exprListAppendList in window.c in SQLite 3.30.1 allows attackers to trigger an invalid pointer dereference because constant integer values in ORDER BY clauses of window definitions are mishandled.",
  "repo": "sqlite/sqlite",
  "patch_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
  "patch_info": {
    "commit_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/window.c"
    ],
    "message": "When processing constant integer values in ORDER BY clauses of window definitions (see check-in [7e4809eadfe99ebf]) be sure to fully disable the constant value to avoid an invalid pointer dereference if the expression is ever duplicated. This fixes a crash report from Yongheng and Rui.\n\nFossilOrigin-Name: 1ca0bd982ab1183bbafce0d260e4dceda5eb766ed2e7793374a88d1ae0bdd2ca",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8223e79f987feda5c8e51ec52cec6798cca16d070b10558939e2888ca1a25b8e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "895:     int nInit = pList ? pList->nExpr : 0;",
      "896:     for(i=0; i<pAppend->nExpr; i++){",
      "897:       Expr *pDup = sqlite3ExprDup(pParse->db, pAppend->a[i].pExpr, 0);",
      "898:       if( bIntToNull && pDup && pDup->op==TK_INTEGER ){",
      "899:         pDup->op = TK_NULL;",
      "900:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
      "901:       }",
      "902:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
      "903:       if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "898:       assert( pDup==0 || !ExprHasProperty(pDup, EP_MemToken) );",
      "902:         pDup->u.zToken = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7b8ab230dce94ccbca56a204589066bca1201d28",
      "candidate_info": {
        "commit_hash": "7b8ab230dce94ccbca56a204589066bca1201d28",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7b8ab230dce94ccbca56a204589066bca1201d28",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/rowvalue.test"
        ],
        "message": "Merge the row-value fix from trunk.\n\nFossilOrigin-Name: 1fbd7438611174aa594485241c8cc2f4ea6d09c57ef2fc16c8995e8061fdfdd6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/rowvalue.test||test/rowvalue.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1a54743a3d327efc8ecc45b9fde91ddfea3fca36408f9b753453c31f2e4cc69c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:         pExpr->pLeft->x.pSelect->pEList->a[pExpr->iColumn].pExpr",
          "71:     );",
          "72:   }",
          "73:   return pExpr->affExpr;",
          "74: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:   if( op==TK_VECTOR ){",
          "74:     return sqlite3ExprAffinity(pExpr->x.pList->a[0].pExpr);",
          "75:   }",
          "",
          "---------------"
        ],
        "test/rowvalue.test||test/rowvalue.test": [
          "File: test/rowvalue.test -> test/rowvalue.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "586:   SELECT 3 FROM t0 WHERE (aa,1) <= (SELECT +bb,1);",
          "587: } {0 1 3}",
          "589: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "589: # 2019-10-22 Ticket 6ef984af8972c2eb",
          "590: do_execsql_test 24.100 {",
          "591:   DROP TABLE t0;",
          "592:   CREATE TABLE t0(c0 TEXT PRIMARY KEY);",
          "593:   INSERT INTO t0(c0) VALUES ('');",
          "594:   SELECT (t0.c0, TRUE) > (CAST(0 AS REAL), FALSE) FROM t0;",
          "595:   SELECT 2 FROM t0 WHERE (t0.c0, TRUE) > (CAST('' AS REAL), FALSE);",
          "596: } {1 2}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c332e04310c111eeb3354900e3001b6760279980",
      "candidate_info": {
        "commit_hash": "c332e04310c111eeb3354900e3001b6760279980",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c332e04310c111eeb3354900e3001b6760279980",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Enhancement the progress callback mechanism so that the progress callback is always invoked at least once at the end of a prepared statement if the opcode count has been exceeded.  This makes the progress callback more effective at limiting run times.  This check-in also includes and unrelated performance enhancement to OP_Column.\n\nFossilOrigin-Name: 68cce272e7f7cbc0c319ee8b7ff674d652cb1e95e903d99d848c41dff2b5d304",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 93ae382e97c23c90312739481e47ef7f9bc475a8382c063a2de2986c950c0aec",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "823:     assert( db->nProgressOps!=0 );",
          "824:     nProgressLimit = nVmStep + db->nProgressOps - (nVmStep%db->nProgressOps);",
          "825:     if( db->xProgress(db->pProgressArg) ){",
          "826:       rc = SQLITE_INTERRUPT;",
          "827:       goto abort_due_to_error;",
          "828:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "826:       nProgressLimit = 0xffffffff;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1368:   assert( pOp->p1>0 );",
          "1369:   assert( pOp->p1+pOp->p2<=(p->nMem+1 - p->nCursor)+1 );",
          "",
          "[Removed Lines]",
          "1371: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK",
          "1374:   if( db->xProgress!=0",
          "1375:    && nVmStep>=nProgressLimit",
          "1376:    && db->xProgress(db->pProgressArg)!=0",
          "1377:   ){",
          "1378:     rc = SQLITE_INTERRUPT;",
          "1379:     goto abort_due_to_error;",
          "1380:   }",
          "1381: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2606:       zEndHdr = zData + aOffset[0];",
          "2607:       testcase( zHdr>=zEndHdr );",
          "2608:       do{",
          "2610:           zHdr++;",
          "2611:           offset64 += sqlite3VdbeOneByteSerialTypeLen(t);",
          "2612:         }else{",
          "2613:           zHdr += sqlite3GetVarint32(zHdr, &t);",
          "2614:           offset64 += sqlite3VdbeSerialTypeLen(t);",
          "2615:         }",
          "2618:       }while( i<=p2 && zHdr<zEndHdr );",
          "",
          "[Removed Lines]",
          "2609:         if( (t = zHdr[0])<0x80 ){",
          "2616:         pC->aType[i++] = t;",
          "2617:         aOffset[i] = (u32)(offset64 & 0xffffffff);",
          "",
          "[Added Lines]",
          "2598:         if( (pC->aType[i] = t = zHdr[0])<0x80 ){",
          "2603:           pC->aType[i] = t;",
          "2606:         aOffset[++i] = (u32)(offset64 & 0xffffffff);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7597: vdbe_return:",
          "7599:   p->aCounter[SQLITE_STMTSTATUS_VM_STEP] += (int)nVmStep;",
          "7600:   sqlite3VdbeLeave(p);",
          "7601:   assert( rc!=SQLITE_OK || nExtraDelete==0",
          "",
          "[Removed Lines]",
          "7598:   testcase( nVmStep>0 );",
          "",
          "[Added Lines]",
          "7587: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK",
          "7588:   if( nVmStep>=nProgressLimit && db->xProgress!=0 ){",
          "7589:     if( db->xProgress(db->pProgressArg) ){",
          "7590:       nProgressLimit = 0xffffffff;",
          "7591:       rc = SQLITE_INTERRUPT;",
          "7592:       goto abort_due_to_error;",
          "7593:     }",
          "7594:   }",
          "7595: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a22d2fca3315822f16c20cdb3738ac637f31b44a",
      "candidate_info": {
        "commit_hash": "a22d2fca3315822f16c20cdb3738ac637f31b44a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a22d2fca3315822f16c20cdb3738ac637f31b44a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/prepare.c"
        ],
        "message": "Call sqlite3Prepare() directly, rather than going through sqlite3_prepare(), when processing the sqlite_master.sql column for a schema.\n\nFossilOrigin-Name: cc49380ea76a4a05843d3a0bdfb925464dc9d72c33cf5ab5243dd07d161ad038",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/prepare.c||src/prepare.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d7667f6560318272c8b35b478e29b0ed134105dfd119a2fd53ef0490442c60cc",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:   return 0;",
          "58: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: static int sqlite3Prepare(",
          "69: );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:     db->init.newTnum = sqlite3Atoi(argv[3]);",
          "107:     db->init.orphanTrigger = 0;",
          "108:     db->init.azInit = argv;",
          "110:     rc = db->errCode;",
          "111:     assert( (rc&0xFF)==(rcp&0xFF) );",
          "112:     db->init.iDb = saved_iDb;",
          "",
          "[Removed Lines]",
          "109:     TESTONLY(rcp = ) sqlite3_prepare(db, argv[4], -1, &pStmt, 0);",
          "",
          "[Added Lines]",
          "121:     pStmt = 0;",
          "122:     TESTONLY(rcp = ) sqlite3Prepare(db, argv[4], -1, 0, 0, &pStmt, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "83a1dafb03af90f40c75e4839c81cf74b5cbfbc0",
      "candidate_info": {
        "commit_hash": "83a1dafb03af90f40c75e4839c81cf74b5cbfbc0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/83a1dafb03af90f40c75e4839c81cf74b5cbfbc0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/vdbeInt.h",
          "src/vdbemem.c"
        ],
        "message": "When values have real affinity and are converted into strings for CHECK constraints or index expressions, do the conversions into a real-number format even if the values are stored as integers for efficiency. This appears to fix ticket [ae0f637bddc5290b446].\n\nFossilOrigin-Name: 5997d075665faca6b70fa647e877ebc84c473b32887b96235865d59ce80247f8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbeInt.h||src/vdbeInt.h",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a77cd85b1a8b86e71b511f05f8c67faa046d24a48684139d2f64e51249203411",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "514:     printf(p->flags & MEM_Zero ? \" NULL-nochng\" : \" NULL\");",
          "515:   }else if( (p->flags & (MEM_Int|MEM_Str))==(MEM_Int|MEM_Str) ){",
          "516:     printf(\" si:%lld\", p->u.i);",
          "517:   }else if( p->flags & MEM_Int ){",
          "518:     printf(\" i:%lld\", p->u.i);",
          "519: #ifndef SQLITE_OMIT_FLOATING_POINT",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "517:   }else if( (p->flags & (MEM_Int|MEM_IntReal))==(MEM_Int|MEM_IntReal) ){",
          "518:     printf(\" ir:%lld\", p->u.i);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2776:   assert( pOp->p2>0 );",
          "2777:   assert( zAffinity[pOp->p2]==0 );",
          "2778:   pIn1 = &aMem[pOp->p1];",
          "2780:     assert( pIn1 <= &p->aMem[(p->nMem+1 - p->nCursor)] );",
          "2781:     assert( memIsValid(pIn1) );",
          "2783:     REGISTER_TRACE((int)(pIn1-aMem), pIn1);",
          "2784:     pIn1++;",
          "2786:   break;",
          "2787: }",
          "",
          "[Removed Lines]",
          "2779:   do{",
          "2782:     applyAffinity(pIn1, *(zAffinity++), encoding);",
          "2785:   }while( zAffinity[0] );",
          "",
          "[Added Lines]",
          "2781:   while( 1 /*edit-by-break*/ ){",
          "2784:     applyAffinity(pIn1, zAffinity[0], encoding);",
          "2785:     if( zAffinity[0]==SQLITE_AFF_REAL && (pIn1->flags & MEM_Int)!=0 ){",
          "2788:       pIn1->flags |= MEM_IntReal;",
          "2789:     }",
          "2791:     zAffinity++;",
          "2792:     if( zAffinity[0]==0 ) break;",
          "2794:   }",
          "",
          "---------------"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "92: }",
          "93: #endif",
          "95: #ifdef SQLITE_DEBUG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99: static void vdbeMemRenderNum(int sz, char *zBuf, Mem *p){",
          "100:   StrAccum acc;",
          "101:   assert( p->flags & (MEM_Int|MEM_Real) );",
          "102:   sqlite3StrAccumInit(&acc, 0, zBuf, sz, 0);",
          "103:   if( p->flags & MEM_IntReal ){",
          "104:     sqlite3_str_appendf(&acc, \"%!.15g\", (double)p->u.i);",
          "105:   }else if( p->flags & MEM_Int ){",
          "106:     sqlite3_str_appendf(&acc, \"%lld\", p->u.i);",
          "107:   }else{",
          "108:     sqlite3_str_appendf(&acc, \"%!.15g\", p->u.r);",
          "109:   }",
          "110:   assert( acc.zText==zBuf && acc.mxAlloc<=0 );",
          "112: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:   int i, j, incr;",
          "119:   if( (p->flags & MEM_Str)==0 ) return 1;",
          "120:   if( (p->flags & (MEM_Int|MEM_Real))==0 ) return 1;",
          "126:   z = p->z;",
          "127:   i = j = 0;",
          "128:   incr = 1;",
          "",
          "[Removed Lines]",
          "121:   if( p->flags & MEM_Int ){",
          "122:     sqlite3_snprintf(sizeof(zBuf),zBuf,\"%lld\",p->u.i);",
          "123:   }else{",
          "124:     sqlite3_snprintf(sizeof(zBuf),zBuf,\"%!.15g\",p->u.r);",
          "125:   }",
          "",
          "[Added Lines]",
          "140:   vdbeMemRenderNum(sizeof(zBuf), zBuf, p);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "248:   }",
          "249:   assert( (pMem->flags & MEM_Dyn)==0 );",
          "250:   pMem->z = pMem->zMalloc;",
          "252:   return SQLITE_OK;",
          "253: }",
          "",
          "[Removed Lines]",
          "251:   pMem->flags &= (MEM_Null|MEM_Int|MEM_Real);",
          "",
          "[Added Lines]",
          "266:   pMem->flags &= (MEM_Null|MEM_Int|MEM_Real|MEM_IntReal);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "351: int sqlite3VdbeMemStringify(Mem *pMem, u8 enc, u8 bForce){",
          "353:   const int nByte = 32;",
          "355:   assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );",
          "359:   assert( !sqlite3VdbeMemIsRowSet(pMem) );",
          "360:   assert( EIGHT_BYTE_ALIGNMENT(pMem) );",
          "",
          "[Removed Lines]",
          "352:   int fg = pMem->flags;",
          "356:   assert( !(fg&MEM_Zero) );",
          "357:   assert( !(fg&(MEM_Str|MEM_Blob)) );",
          "358:   assert( fg&(MEM_Int|MEM_Real) );",
          "",
          "[Added Lines]",
          "370:   assert( !(pMem->flags&MEM_Zero) );",
          "371:   assert( !(pMem->flags&(MEM_Str|MEM_Blob)) );",
          "372:   assert( pMem->flags&(MEM_Int|MEM_Real) );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "365:     return SQLITE_NOMEM_BKPT;",
          "366:   }",
          "380:   assert( pMem->z!=0 );",
          "381:   pMem->n = sqlite3Strlen30NN(pMem->z);",
          "382:   pMem->enc = SQLITE_UTF8;",
          "383:   pMem->flags |= MEM_Str|MEM_Term;",
          "385:   sqlite3VdbeChangeEncoding(pMem, enc);",
          "386:   return SQLITE_OK;",
          "387: }",
          "",
          "[Removed Lines]",
          "374:   if( fg & MEM_Int ){",
          "375:     sqlite3_snprintf(nByte, pMem->z, \"%lld\", pMem->u.i);",
          "376:   }else{",
          "377:     assert( fg & MEM_Real );",
          "378:     sqlite3_snprintf(nByte, pMem->z, \"%!.15g\", pMem->u.r);",
          "379:   }",
          "384:   if( bForce ) pMem->flags &= ~(MEM_Int|MEM_Real);",
          "",
          "[Added Lines]",
          "382:   vdbeMemRenderNum(nByte, pMem->z, pMem);",
          "387:   if( bForce ) pMem->flags &= ~(MEM_Int|MEM_Real|MEM_IntReal);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "741:       pMem->flags |= (pMem->flags&MEM_Blob)>>3;",
          "742:       sqlite3ValueApplyAffinity(pMem, SQLITE_AFF_TEXT, encoding);",
          "743:       assert( pMem->flags & MEM_Str || pMem->db->mallocFailed );",
          "745:       break;",
          "746:     }",
          "747:   }",
          "",
          "[Removed Lines]",
          "744:       pMem->flags &= ~(MEM_Int|MEM_Real|MEM_Blob|MEM_Zero);",
          "",
          "[Added Lines]",
          "747:       pMem->flags &= ~(MEM_Int|MEM_Real|MEM_IntReal|MEM_Blob|MEM_Zero);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a50f4c72a072892f830b7bf09a787bc2486c0ca",
      "candidate_info": {
        "commit_hash": "9a50f4c72a072892f830b7bf09a787bc2486c0ca",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9a50f4c72a072892f830b7bf09a787bc2486c0ca",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/releasetest.tcl"
        ],
        "message": "Update error detection logic in releasetest.tcl to account for new output formats in USAN.\n\nFossilOrigin-Name: 3f36b988360204628d5ad1df2db34818b9a2d6ba989018d4c17757229f4b0f65",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/releasetest.tcl||test/releasetest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cb9470fc064aad72a4e42c6a021410401b3b1a32446ae8b9cd9c759f0a2a01ef",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/releasetest.tcl||test/releasetest.tcl": [
          "File: test/releasetest.tcl -> test/releasetest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "412:       # skip over \"value is outside range\" errors",
          "413:       if {[regexp {value .* is outside the range of representable} $line]} {",
          "414:          # noop",
          "415:       } else {",
          "416:         incr ::NERRCASE",
          "417:         if {$rc==0} {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "415:       } elseif {[regexp {overflow: .* cannot be represented} $line]} {",
          "416:          # noop",
          "",
          "---------------"
        ]
      }
    }
  ]
}