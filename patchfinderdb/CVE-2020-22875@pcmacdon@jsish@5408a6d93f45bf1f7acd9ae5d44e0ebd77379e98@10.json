{
  "cve_id": "CVE-2020-22875",
  "cve_desc": "Integer overflow vulnerability in function Jsi_ObjSetLength in jsish before 3.0.6, allows remote attackers to execute arbitrary code.",
  "repo": "pcmacdon/jsish",
  "patch_hash": "5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
  "patch_info": {
    "commit_hash": "5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
    "repo": "pcmacdon/jsish",
    "commit_url": "https://github.com/pcmacdon/jsish/commit/5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
    "files": [
      "md/Reference.md",
      "src/jsi.h",
      "src/jsiArray.c",
      "src/jsiCmds.c",
      "tests/locals.jsi",
      "tools/protos.jsi",
      "www/reference.wiki"
    ],
    "message": "Release \"3.0.6\": Fix crashes in Array for \"integer overflow #10\"\n\nFossilOrigin-Name: 50642d64b8f0a4e62df68e59fcb2ef0923c3dbec8fc8a15d38b1ddbe655c38d6",
    "before_after_code_files": [
      "src/jsi.h||src/jsi.h",
      "src/jsiArray.c||src/jsiArray.c",
      "src/jsiCmds.c||src/jsiCmds.c",
      "tests/locals.jsi||tests/locals.jsi",
      "tools/protos.jsi||tools/protos.jsi",
      "www/reference.wiki||www/reference.wiki"
    ]
  },
  "patch_diff": {
    "src/jsi.h||src/jsi.h": [
      "File: src/jsi.h -> src/jsi.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: #define JSI_VERSION_MAJOR   3",
      "6: #define JSI_VERSION_MINOR   0",
      "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
      "",
      "[Removed Lines]",
      "7: #define JSI_VERSION_RELEASE 4",
      "",
      "[Added Lines]",
      "7: #define JSI_VERSION_RELEASE 6",
      "",
      "---------------"
    ],
    "src/jsiArray.c||src/jsiArray.c": [
      "File: src/jsiArray.c -> src/jsiArray.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: #define NO_QSORT_R 1",
      "8: #endif",
      "10: static Jsi_RC jsi_ArrayPushCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "11:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "12: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "10: static uint jsi_SizeOfArray(Jsi_Interp *interp, Jsi_Obj *obj) {",
      "11:     if (!obj || !obj->arr)",
      "12:         return 0;",
      "13:     return obj->arrCnt;",
      "14: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "19:     obj = _this->d.obj;",
      "21:     int argc = Jsi_ValueGetLength(interp, args);",
      "27:     int i;",
      "28:     for (i = 0; i < argc; ++i) {",
      "29:         Jsi_Value *ov = Jsi_ValueArrayIndex(interp, args, i);",
      "",
      "[Removed Lines]",
      "22:     int curlen = Jsi_ObjGetLength(interp, obj);",
      "23:     if (curlen < 0) {",
      "24:         Jsi_ObjSetLength(interp, obj, 0);",
      "25:     }",
      "",
      "[Added Lines]",
      "28:     int curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "31:         Jsi_ValueInsertArray(interp, _this, curlen + i, ov, 0);",
      "32:     }",
      "35:     return JSI_OK;",
      "36: }",
      "",
      "[Removed Lines]",
      "34:     Jsi_ValueMakeNumber(interp, ret, Jsi_ObjGetLength(interp, obj));",
      "",
      "[Added Lines]",
      "36:     Jsi_ValueMakeNumber(interp, ret, jsi_SizeOfArray(interp, obj));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "45:     Jsi_Value *v;",
      "46:     Jsi_Obj *obj;",
      "47:     obj = _this->d.obj;",
      "50:     if (i < 0) {",
      "51:         Jsi_ValueMakeUndef(interp, ret);",
      "",
      "[Removed Lines]",
      "48:     int i = Jsi_ObjGetLength(interp, obj) - 1;",
      "",
      "[Added Lines]",
      "50:     int i = jsi_SizeOfArray(interp, obj) - 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "78:     int argc, curlen;",
      "79:     Jsi_DString dStr = {};",
      "82:     if (curlen == 0) {",
      "83:         goto bail;",
      "84:     }",
      "",
      "[Removed Lines]",
      "81:     curlen = Jsi_ObjGetLength(interp, _this->d.obj);",
      "",
      "[Added Lines]",
      "83:     curlen = jsi_SizeOfArray(interp, _this->d.obj);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "89:             jstr = Jsi_ValueToString(interp, sc, NULL);",
      "90:     }",
      "93:         goto bail;",
      "94:     }",
      "95:     int i;",
      "",
      "[Removed Lines]",
      "92:     if (0 == (argc=Jsi_ObjGetLength(interp, _this->d.obj))) {",
      "",
      "[Added Lines]",
      "94:     if (0 == (argc=jsi_SizeOfArray(interp, _this->d.obj))) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "233:         return;",
      "234:     }",
      "237:     if (len <= 0) return;",
      "239:     Jsi_Value *v0 = Jsi_ValueArrayIndex(interp, v, 0);",
      "",
      "[Removed Lines]",
      "236:     int len = Jsi_ObjGetLength(interp, v->d.obj);",
      "",
      "[Added Lines]",
      "238:     int len = jsi_SizeOfArray(interp, v->d.obj);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "256: static Jsi_RC jsi_ArrayFlatSub(Jsi_Interp *interp, Jsi_Obj* nobj, Jsi_Value *arr, int depth) {",
      "259:     if (len <= 0) return JSI_OK;",
      "260:     Jsi_RC rc = JSI_OK;",
      "262:     for (i = 0; i < len && rc == JSI_OK; i++) {",
      "263:         Jsi_Value *t = Jsi_ValueArrayIndex(interp, arr, i);",
      "264:         if (t && depth>0 && Jsi_ValueIsArray(interp, t))",
      "",
      "[Removed Lines]",
      "258:     int i, n = 0, len = Jsi_ObjGetLength(interp, arr->d.obj);",
      "261:     int clen = Jsi_ObjGetLength(interp, nobj);",
      "",
      "[Added Lines]",
      "260:     int i, n = 0, len = jsi_SizeOfArray(interp, arr->d.obj);",
      "263:     int clen = jsi_SizeOfArray(interp, nobj);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "302:     obj = _this->d.obj;",
      "304:     argc = Jsi_ValueGetLength(interp, args);",
      "309:     Jsi_ObjListifyArray(interp, obj);",
      "311:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
      "",
      "[Removed Lines]",
      "305:     curlen = Jsi_ObjGetLength(interp, obj);",
      "306:     if (curlen < 0) {",
      "307:         Jsi_ObjSetLength(interp, obj, 0);",
      "308:     }",
      "",
      "[Added Lines]",
      "307:     curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "377:     if (!sthis)",
      "378:         sthis = nthis = Jsi_ValueNew1(interp);",
      "379:     obj = _this->d.obj;",
      "384:     Jsi_ObjListifyArray(interp, obj);",
      "385:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
      "386:     nsiz = obj->arrCnt;",
      "",
      "[Removed Lines]",
      "380:     curlen = Jsi_ObjGetLength(interp, obj);",
      "381:     if (curlen < 0) {",
      "382:         Jsi_ObjSetLength(interp, obj, 0);",
      "383:     }",
      "",
      "[Added Lines]",
      "379:     curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "439:     if (!sthis)",
      "440:         sthis = nthis = Jsi_ValueNew1(interp);",
      "441:     obj = _this->d.obj;",
      "446:     Jsi_ObjListifyArray(interp, obj);",
      "447:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
      "448:     nsiz = obj->arrCnt;",
      "",
      "[Removed Lines]",
      "442:     curlen = Jsi_ObjGetLength(interp, obj);",
      "443:     if (curlen < 0) {",
      "444:         Jsi_ObjSetLength(interp, obj, 0);",
      "445:     }",
      "",
      "[Added Lines]",
      "438:     curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "522:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "523:         return Jsi_LogError(\"expected array object\");",
      "524:     Jsi_Obj *obj;",
      "526:     uint i;",
      "527:     Jsi_Value *func, *vpargs;",
      "",
      "[Removed Lines]",
      "525:     int curlen;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "535:         sthis = nthis = Jsi_ValueNew1(interp);",
      "537:     obj = _this->d.obj;",
      "542:     Jsi_ObjListifyArray(interp, obj);",
      "543:     Jsi_RC rc = JSI_OK;",
      "",
      "[Removed Lines]",
      "538:     curlen = Jsi_ObjGetLength(interp, obj);",
      "539:     if (curlen < 0) {",
      "540:         Jsi_ObjSetLength(interp, obj, 0);",
      "541:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "566:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "567:         return Jsi_LogError(\"expected array\");",
      "568:     Jsi_Obj *obj;",
      "570:     uint i;",
      "571:     Jsi_RC rc = JSI_OK;",
      "572:     Jsi_Value *func, *vpargs, *sthis = Jsi_ValueArrayIndex(interp, args, 1);",
      "",
      "[Removed Lines]",
      "569:     int curlen;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "579:         sthis = nthis = Jsi_ValueNew1(interp);",
      "581:     obj = _this->d.obj;",
      "586:     Jsi_ObjListifyArray(interp, obj);",
      "587:     int fval = 0;",
      "588:     Jsi_Value *nrPtr = Jsi_ValueNew1(interp);",
      "",
      "[Removed Lines]",
      "582:     curlen = Jsi_ObjGetLength(interp, obj);",
      "583:     if (curlen < 0) {",
      "584:         Jsi_ObjSetLength(interp, obj, 0);",
      "585:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "628:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "629:         return Jsi_LogError(\"expected array\");",
      "630:     Jsi_RC rc = JSI_OK;",
      "632:     Jsi_Obj *obj;",
      "633:     Jsi_Value *func, *vpargs, *ini = Jsi_ValueArrayIndex(interp, args, 1);",
      "",
      "[Removed Lines]",
      "631:     int curlen, i;",
      "",
      "[Added Lines]",
      "614:     int i;",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "639:     Jsi_Value *nrPtr = Jsi_ValueNew1(interp);",
      "640:     obj = _this->d.obj;",
      "644:     Jsi_ObjListifyArray(interp, obj);",
      "645:     Jsi_Value *vobjs[4];",
      "646:     int n, rev = (op==2);",
      "",
      "[Removed Lines]",
      "641:     curlen = Jsi_ObjGetLength(interp, obj);",
      "642:     if (curlen < 0)",
      "643:         Jsi_ObjSetLength(interp, obj, 0);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "717:         goto bail;",
      "718:     }",
      "721:     if (n == 0) {",
      "722:         goto bail;",
      "723:     }",
      "",
      "[Removed Lines]",
      "720:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "700:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "769: static Jsi_RC jsi_ArraySizeOfCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,Jsi_Value **ret, Jsi_Func *funcPtr) {",
      "770:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "771:         return Jsi_LogError(\"expected array object\");",
      "773:     Jsi_ValueMakeNumber(interp, ret, i);",
      "774:     return JSI_OK;",
      "775: }",
      "",
      "[Removed Lines]",
      "772:     int i = Jsi_ObjGetLength(interp, _this->d.obj);",
      "",
      "[Added Lines]",
      "752:     int i = jsi_SizeOfArray(interp, _this->d.obj);",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "780:     Jsi_Value *v;",
      "781:     Jsi_Obj *obj = _this->d.obj;",
      "782:     Jsi_ObjListifyArray(interp, obj);",
      "785:     if (n<=0) {",
      "786:         Jsi_ValueMakeUndef(interp, ret);",
      "787:     } else {",
      "",
      "[Removed Lines]",
      "783:     uint n = Jsi_ObjGetLength(interp, obj);",
      "784:     assert(n <= obj->arrCnt);",
      "",
      "[Added Lines]",
      "763:     uint n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "803:     Jsi_Obj *obj = _this->d.obj;",
      "804:     int argc = Jsi_ValueGetLength(interp, args);",
      "809:     if (argc <= 0) {",
      "810:         Jsi_ValueMakeNumber(interp, ret, 0);",
      "811:         return JSI_OK;",
      "",
      "[Removed Lines]",
      "805:     int curlen = Jsi_ObjGetLength(interp, obj);",
      "806:     if (curlen < 0) {",
      "807:         Jsi_ObjSetLength(interp, obj, 0);",
      "808:     }",
      "",
      "[Added Lines]",
      "784:     int curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "825:     }",
      "826:     Jsi_ObjSetLength(interp, obj, curlen+argc);",
      "829:     return JSI_OK;",
      "830: }",
      "",
      "[Removed Lines]",
      "828:     Jsi_ValueMakeNumber(interp, ret, Jsi_ObjGetLength(interp, obj));",
      "",
      "[Added Lines]",
      "804:     Jsi_ValueMakeNumber(interp, ret, jsi_SizeOfArray(interp, obj));",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "841:     Jsi_Obj *obj = _this->d.obj;",
      "844:     if (start && Jsi_GetNumberFromValue(interp, start, &nstart) == JSI_OK) {",
      "845:         istart = (int)nstart;",
      "",
      "[Removed Lines]",
      "842:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "818:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "902:         goto bail;",
      "903:     }",
      "904:     obj = _this->d.obj;",
      "906:     if (Jsi_GetNumberFromValue(interp,start, &nstart) == JSI_OK) {",
      "907:         istart = (int)nstart;",
      "908:         if (istart > n)",
      "",
      "[Removed Lines]",
      "905:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "881:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "1166:     argc = Jsi_ValueGetLength(interp, args);",
      "1167:     istart = 0;",
      "1168:     ilen = (argc>=2 ? argc - 2 : 0);",
      "1170:     curlen = n;",
      "1172:     if (!start) {",
      "",
      "[Removed Lines]",
      "1169:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "1145:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "1202:     }",
      "1204:     if (curlen < 0) {",
      "1206:     }",
      "1207:     Jsi_ObjListifyArray(interp, obj);",
      "",
      "[Removed Lines]",
      "1205:         Jsi_ObjSetLength(interp, obj, 0);",
      "",
      "[Added Lines]",
      "1181:         Jsi_ObjSetLength(interp, obj, curlen=0);",
      "",
      "---------------"
    ],
    "src/jsiCmds.c||src/jsiCmds.c": [
      "File: src/jsiCmds.c -> src/jsiCmds.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4509:     return rc;",
      "4510: }",
      "4512: static const char *jsi_FindHelpStr(const char *fstr, const char *key, Jsi_DString *dPtr) {",
      "4513:     if (!fstr) return \"\";",
      "4514:     Jsi_DSSetLength(dPtr, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4512: static Jsi_RC SysRunMainCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "4513:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "4514: {",
      "4515:     if (jsi_isMain(interp))",
      "4516:         return SysRunModuleCmd(interp, args, _this, ret, funcPtr);",
      "4517:     return JSI_OK;",
      "4518: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4762:     { \"execZip\",    InfoExecZipCmd,     0,  0, \"\", .help=\"If executing a .zip file, return file name\", .retType=(uint)JSI_TT_STRING|JSI_TT_VOID },",
      "4763:     { \"files\",      InfoFilesCmd,       0,  0, \"\", .help=\"Return list of all sourced files\", .retType=(uint)JSI_TT_ARRAY },",
      "4764:     { \"funcs\",      InfoFuncsCmd,       0,  1, \"string|regexp|object=void\", .help=\"Return details or list of matching functions\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_OBJECT },",
      "4766:     { \"interp\",     jsi_InterpInfo,     0,  1, \"interp:userobj=void\", .help=\"Return info on given or current interp\", .retType=(uint)JSI_TT_OBJECT },",
      "4767:     { \"isMain\",     InfoIsMainCmd,      0,  0, \"\", .help=\"Return true if current script was the main script invoked from command-line\", .retType=(uint)JSI_TT_BOOLEAN },",
      "4768:     { \"keywords\",   InfoKeywordsCmd,    0,  2, \"isSql=false, name:string=void\", .help=\"Return/lookup reserved keyword\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_BOOLEAN },",
      "",
      "[Removed Lines]",
      "4765:     { \"locals\",     InfoLocalsCmd,      0,  1, \"varsOnly:boolean=void\", .help=\"Return functions/vars inside local function\", .retType=(uint)JSI_TT_OBJECT },",
      "",
      "[Added Lines]",
      "4773:     { \"locals\",     InfoLocalsCmd,      0,  1, \"filter:boolean=void\", .help=\"Return locals; use filter=true/false just vars/functions\", .retType=(uint)JSI_TT_OBJECT },",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "4863:     { \"puts\",       SysPutsCmd,      1, -1, \"val, ...\", .help=\"Output one or more values to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_puts },",
      "4864:     { \"quote\",      SysQuoteCmd,     1,  1, \"val:string\", .help=\"Return quoted string\", .retType=(uint)JSI_TT_STRING },",
      "4865:     { \"require\",    SysRequireCmd,   0,  3, \"name:string=void, version:number|string=1, options:object=void\", .help=\"Load/query packages\", .retType=(uint)JSI_TT_NUMBER|JSI_TT_OBJECT|JSI_TT_ARRAY, .flags=0, .info=FN_require, .opts=jsiModuleOptions },",
      "4866:     { \"runModule\",  SysRunModuleCmd, 0,  2, \"cmd:string|null|function=void, conf:array=undefined\", .help=\"Invoke named module. If name is empty, uses file basename. If isMain and no args givine parses console.args\", .retType=(uint)JSI_TT_ANY, .flags=0},",
      "4867:     { \"sleep\",      SysSleepCmd,     0,  1, \"secs:number=1.0\",  .help=\"sleep for N milliseconds, minimum .001\", .retType=(uint)JSI_TT_VOID },",
      "4868: #ifndef JSI_OMIT_EVENT",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4874:     { \"runMain\",    SysRunMainCmd,   0,  2, \"cmd:string|null|function=void, conf:array=undefined\", .help=\"If isMain invokes runModule\", .retType=(uint)JSI_TT_ANY, .flags=0},",
      "",
      "---------------"
    ],
    "tests/locals.jsi||tests/locals.jsi": [
      "File: tests/locals.jsi -> tests/locals.jsi",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: function foo() {",
      "4:   function bar() { }",
      "5:   var x = 1;",
      "6: ;  Info.locals();",
      "7: ;  Info.locals(false);",
      "8: ;  Info.locals(true);",
      "9: }",
      "11: foo();",
      "14: =!EXPECTSTART!=",
      "15: Info.locals() ==> { bar:\"function bar() {...}\", x:1 }",
      "16: Info.locals(false) ==> { bar:\"function bar() {...}\" }",
      "17: Info.locals(true) ==> { x:1 }",
      "18: =!EXPECTEND!=",
      "",
      "---------------"
    ],
    "tools/protos.jsi||tools/protos.jsi": [
      "File: tools/protos.jsi -> tools/protos.jsi",
      "--- Hunk 1 ---",
      "[Context before]",
      "140: Info.prototype.isMain = function():boolean {};",
      "141: Info.prototype.keywords = function(isSql=false, name:string=void):boolean|array {};",
      "142: Info.prototype.level = function(level:number=void):number|array|object {};",
      "144: Info.prototype.lookup = function(name:string):any {};",
      "145: Info.prototype.methods = function(val:string|regexp):array|object {};",
      "146: Info.prototype.named = function(name:string=void):array|userobj {};",
      "",
      "[Removed Lines]",
      "143: Info.prototype.locals = function(varsOnly:boolean=void):object {};",
      "",
      "[Added Lines]",
      "143: Info.prototype.locals = function(filter:boolean=void):object {};",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "303: System.prototype.puts = function(val, ...):void {};",
      "304: System.prototype.quote = function(val:string):string {};",
      "305: System.prototype.require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
      "306: System.prototype.runModule = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "307: System.prototype.setInterval = function(callback:function, ms:number):number {};",
      "308: System.prototype.setTimeout = function(callback:function, ms:number):number {};",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "306: System.prototype.runMain = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "394: var puts = function(val, ...):void {};",
      "395: var quote = function(val:string):string {};",
      "396: var require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
      "397: var runModule = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "398: var setInterval = function(callback:function, ms:number):number {};",
      "399: var setTimeout = function(callback:function, ms:number):number {};",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "398: var runMain = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "",
      "---------------"
    ],
    "www/reference.wiki||www/reference.wiki": [
      "File: www/reference.wiki -> www/reference.wiki",
      "--- Hunk 1 ---",
      "[Context before]",
      "552: <tr><td>level</td><td>level(level:number=void):number|array|object </td><td>Return current level or details of a call-stack frame. With no arg, returns the number of the current stack frame level.",
      "553: Otherwise returns details on the specified level.",
      "554: The topmost level is 1, and 0 is the current level, and a negative level translates as relative to the current level.</td></tr>",
      "556: <tr><td>lookup</td><td>lookup(name:string) </td><td>Given string name, lookup and return value, eg: function.</td></tr>",
      "557: <tr><td>methods</td><td>methods(val:string|regexp):array|object </td><td>Return functions and commands.</td></tr>",
      "558: <tr><td>named</td><td>named(name:string=void):array|userobj </td><td>Returns command names for builtin Objects, eg: 'File', 'Interp', sub-Object names, or the named object.</td></tr>",
      "",
      "[Removed Lines]",
      "555: <tr><td>locals</td><td>locals(varsOnly:boolean=void):object </td><td>Return functions/vars inside local function.</td></tr>",
      "",
      "[Added Lines]",
      "555: <tr><td>locals</td><td>locals(filter:boolean=void):object </td><td>Return locals; use filter=true/false just vars/functions.</td></tr>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1361: With two arguments, returns object containing: version, loadFile, func.",
      "1362: A third argument sets options for package or module.",
      "1363: Note an error is thrown if requested version is greater than actual version.</td></tr>",
      "1364: <tr><td>runModule</td><td>runModule(cmd:string|null|function=void, conf:array=undefined) </td><td>Invoke named module. If name is empty, uses file basename. If isMain and no args givine parses console.args.</td></tr>",
      "1365: <tr><td>setInterval</td><td>setInterval(callback:function, ms:number):number </td><td>Setup recurring function to run every given millisecs.</td></tr>",
      "1366: <tr><td>setTimeout</td><td>setTimeout(callback:function, ms:number):number </td><td>Setup function to run after given millisecs.</td></tr>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1364: <tr><td>runMain</td><td>runMain(cmd:string|null|function=void, conf:array=undefined) </td><td>If isMain invokes runModule.</td></tr>",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3db8e8818f383af885d77528d961f7187269bd7e",
      "candidate_info": {
        "commit_hash": "3db8e8818f383af885d77528d961f7187269bd7e",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/3db8e8818f383af885d77528d961f7187269bd7e",
        "files": [
          "lib/Archive.jsi",
          "lib/Cdata.jsi",
          "lib/Debug.jsi",
          "lib/Help.jsi",
          "lib/Jsi_Vfs.jsi",
          "lib/Safe.jsi",
          "lib/UnitTest.jsi",
          "lib/Websrv.jsi",
          "lib/Wget.jsi",
          "lib/Zip.jsi",
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiEval.c",
          "src/jsiInt.h",
          "src/jsiInterp.c",
          "src/jsiProto.c",
          "src/jsiUtils.c",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.43\": moduleOpts freeze is not default.  Fix dup error msgs.\n\nFossilOrigin-Name: 0f3f68f4f87d0945211e01fefa8cd709701d40313dedf664a4a7881a8205fccb",
        "before_after_code_files": [
          "lib/Archive.jsi||lib/Archive.jsi",
          "lib/Cdata.jsi||lib/Cdata.jsi",
          "lib/Debug.jsi||lib/Debug.jsi",
          "lib/Help.jsi||lib/Help.jsi",
          "lib/Jsi_Vfs.jsi||lib/Jsi_Vfs.jsi",
          "lib/Safe.jsi||lib/Safe.jsi",
          "lib/UnitTest.jsi||lib/UnitTest.jsi",
          "lib/Websrv.jsi||lib/Websrv.jsi",
          "lib/Wget.jsi||lib/Wget.jsi",
          "lib/Zip.jsi||lib/Zip.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiProto.c||src/jsiProto.c",
          "src/jsiUtils.c||src/jsiUtils.c",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ]
        }
      },
      "candidate_diff": {
        "lib/Archive.jsi||lib/Archive.jsi": [
          "File: lib/Archive.jsi -> lib/Archive.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:     return main();",
          "103: }",
          "106: moduleRun(Archive);",
          "",
          "[Removed Lines]",
          "105: provide(Archive, 1,  {freeze:true, logmask:'debug,trace'});",
          "",
          "[Added Lines]",
          "105: provide(Archive, 1,  {logmask:'debug,trace'});",
          "",
          "---------------"
        ],
        "lib/Cdata.jsi||lib/Cdata.jsi": [
          "File: lib/Cdata.jsi -> lib/Cdata.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "1710:     return retval;",
          "1711: }",
          "1714: moduleRun(Cdata);",
          "",
          "[Removed Lines]",
          "1713: provide(Cdata, \"2\", {freeze:true, logmask:'debug,trace'});",
          "",
          "[Added Lines]",
          "1713: provide(Cdata, \"2\", {logmask:'debug,trace'});",
          "",
          "---------------"
        ],
        "lib/Debug.jsi||lib/Debug.jsi": [
          "File: lib/Debug.jsi -> lib/Debug.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "494:     return main();",
          "495: }",
          "499: if (isMain())",
          "500:     exit( moduleRun(Debug) );",
          "",
          "[Removed Lines]",
          "497: provide(Debug, 1.0, {freeze:true, logmask:'debug,trace'});",
          "",
          "[Added Lines]",
          "497: provide(Debug, 1.0, {logmask:'debug,trace'});",
          "",
          "---------------"
        ],
        "lib/Help.jsi||lib/Help.jsi": [
          "File: lib/Help.jsi -> lib/Help.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "371:     return main();",
          "372: }",
          "375: moduleRun(Help);",
          "",
          "[Removed Lines]",
          "374: provide(Help, 1, {freeze:true, logmask:'trace'});",
          "",
          "[Added Lines]",
          "374: provide(Help, 1, {logmask:'trace'});",
          "",
          "---------------"
        ],
        "lib/Jsi_Vfs.jsi||lib/Jsi_Vfs.jsi": [
          "File: lib/Jsi_Vfs.jsi -> lib/Jsi_Vfs.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:     var self = {",
          "13:         exec:System.exec,",
          "15:     };",
          "17:     moduleOpts(self, options);",
          "",
          "[Removed Lines]",
          "14:         Trace       :false,",
          "",
          "[Added Lines]",
          "14:         uuid:null,",
          "15:         parent:null,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:                 version :''",
          "63:             };",
          "66:             if (self.version === '')",
          "67:                 self.version = mnt.version;",
          "",
          "[Removed Lines]",
          "65:             moduleOpts(info, moptions, mnt.param);",
          "",
          "[Added Lines]",
          "66:             parseOpts(info, moptions, mnt.param);",
          "67:             Object.freeze(info, false);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "236:     Vfs.type('sqlar',  {callback:Sqlar});",
          "237: }",
          "241: if (isMain())",
          "242:     moduleRun(Jsi_Vfs);",
          "",
          "[Removed Lines]",
          "239: provide(Jsi_Vfs, 1);",
          "",
          "[Added Lines]",
          "241: provide(Jsi_Vfs, 1, {logmask:'trace'});",
          "",
          "---------------"
        ],
        "lib/Safe.jsi||lib/Safe.jsi": [
          "File: lib/Safe.jsi -> lib/Safe.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:     return main();",
          "130: }",
          "133: moduleRun(Safe);",
          "",
          "[Removed Lines]",
          "132: provide(Safe, 1, {freeze:true, logmask:'trace'});",
          "",
          "[Added Lines]",
          "132: provide(Safe, 1, {logmask:'trace'});",
          "",
          "---------------"
        ],
        "lib/UnitTest.jsi||lib/UnitTest.jsi": [
          "File: lib/UnitTest.jsi -> lib/UnitTest.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "288:     return main();",
          "289: }",
          "293: if (Info.isMain())",
          "294:     exit(moduleRun(UnitTest));",
          "",
          "[Removed Lines]",
          "291: provide(UnitTest, 1, {freeze:true, logmask:'trace'});",
          "",
          "[Added Lines]",
          "291: provide(UnitTest, 1, {logmask:'trace'});",
          "",
          "---------------"
        ],
        "lib/Websrv.jsi||lib/Websrv.jsi": [
          "File: lib/Websrv.jsi -> lib/Websrv.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "528: }",
          "531: moduleRun(Websrv);",
          "",
          "[Removed Lines]",
          "530: provide(Websrv, '1.2.3', {freeze:true, logmask:'debug,trace'});",
          "",
          "[Added Lines]",
          "530: provide(Websrv, '1.2.3', {nofreeze:false, logmask:'debug,trace'});",
          "",
          "---------------"
        ],
        "lib/Wget.jsi||lib/Wget.jsi": [
          "File: lib/Wget.jsi -> lib/Wget.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:     return main();",
          "145: }",
          "149: moduleRun(Wget);",
          "",
          "[Removed Lines]",
          "147: provide(Wget, \"1.2\", {freeze:true, logmask:'trace'});",
          "",
          "[Added Lines]",
          "147: provide(Wget, \"1.2\", {logmask:'trace'});",
          "",
          "---------------"
        ],
        "lib/Zip.jsi||lib/Zip.jsi": [
          "File: lib/Zip.jsi -> lib/Zip.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:     throw(emsg);",
          "159: }",
          "162: runModule(Zip);",
          "",
          "[Removed Lines]",
          "161: provide(Zip, 1, {freeze:true});",
          "",
          "[Added Lines]",
          "161: provide(Zip, 1);",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 42",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 43",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "398:     int traceCall;",
          "399:     bool coverage;",
          "400:     bool profile;",
          "402:     Jsi_Value *udata;",
          "403: } Jsi_ModuleConf;",
          "",
          "[Removed Lines]",
          "401:     bool freeze;",
          "",
          "[Added Lines]",
          "401:     bool nofreeze;",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "855:     JSI_OPT(CUSTOM,Jsi_ModuleConf, log,     .help=\"Logging flags\", .flags=JSI_OPT_CUST_NOCASE,  .custom=Jsi_Opt_SwitchBitset,  .data=jsi_LogCodes),",
          "856:     JSI_OPT(CUSTOM,Jsi_ModuleConf, logmask, .help=\"Logging mask flags\", .flags=JSI_OPT_CUST_NOCASE,  .custom=Jsi_Opt_SwitchBitset,  .data=jsi_LogCodes),",
          "857:     JSI_OPT(BOOL,  Jsi_ModuleConf, coverage,.help=\"On exit generate detailed code coverage for function calls (with profile)\" ),",
          "859:     JSI_OPT(OBJ,   Jsi_ModuleConf, info,    .help=\"Info provided by module\", .flags=JSI_OPT_INIT_ONLY ),",
          "860:     JSI_OPT(BOOL,  Jsi_ModuleConf, profile, .help=\"On exit generate profile of function calls\" ),",
          "861:     JSI_OPT(CUSTOM,Jsi_ModuleConf, traceCall,.help=\"Trace commands\", .flags=0,  .custom=Jsi_Opt_SwitchBitset,  .data=jsi_callTraceStrs),",
          "",
          "[Removed Lines]",
          "858:     JSI_OPT(BOOL,  Jsi_ModuleConf, freeze,  .help=\"Freeze self object: first arg to moduleOpts\" ),",
          "",
          "[Added Lines]",
          "858:     JSI_OPT(BOOL,  Jsi_ModuleConf, nofreeze,.help=\"Disable moduleOpts freeze of first arg (self)\" ),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1086:             return JSI_ERROR;",
          "1087:         if (rc == JSI_OK) {",
          "1088:             Jsi_PkgOpts po = {};",
          "1090:             v = Jsi_ValueArrayIndex(interp, args, 2);",
          "1091:             if (v && Jsi_OptionsProcess(interp, jsiModuleOptions, &po.conf, v, 0) < 0)",
          "1092:                 rc = JSI_ERROR;",
          "",
          "[Removed Lines]",
          "1089:             po.conf.freeze = interp->subOpts.freeze;",
          "",
          "[Added Lines]",
          "1089:             po.conf.nofreeze = interp->subOpts.nofreeze;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4609:     return \"\";",
          "4610: }",
          "4614: {",
          "4616:     Jsi_TreeEntry *tPtr, *tPtr2;",
          "4617:     Jsi_TreeSearch search = {};",
          "4618:     Jsi_RC rc = JSI_OK;",
          "",
          "[Removed Lines]",
          "4612: static Jsi_RC SysModuleOptsCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "4613:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "4615:     bool freeze = interp->subOpts.freeze;",
          "",
          "[Added Lines]",
          "4612: static Jsi_RC SysModuleOptsCmdEx(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "4613:     Jsi_Value **ret, Jsi_Func *funcPtr, bool parse)",
          "4615:     bool nofreeze = interp->subOpts.nofreeze;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4641:     }",
          "4642:     if (v2)",
          "4643:         Jsi_TreeSearchDone(&search);",
          "4645:         if (Jsi_ValueIsObjType(interp, v3, JSI_OT_ARRAY))",
          "4646:             v3 = Jsi_ValueArrayIndex(interp, v3, 1);",
          "4647:         else {",
          "",
          "[Removed Lines]",
          "4644:     if (!v3 && pf && pf->funcName && !Jsi_Strcmp(pf->funcName, \"moduleRun\") && ((v3=pf->arguments))) {",
          "",
          "[Added Lines]",
          "4644:     if (!parse && !v3 && pf && pf->funcName && !Jsi_Strcmp(pf->funcName, \"moduleRun\") && ((v3=pf->arguments))) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4667:                 break;",
          "4668:             }",
          "4671:                 int isLong = 1;//Jsi_ValueIsTrue(interp, val);",
          "4672:                 const char *help = \"\", *es = NULL, *fstr = NULL, *fname = fp->ip->filePtr->fileName;",
          "4673:                 Jsi_TreeSearchDone(&search);",
          "",
          "[Removed Lines]",
          "4670:             if (cnt == 1 && !Jsi_Strcmp(key, \"help\") && v3->d.obj->tree->numEntries==1) {",
          "",
          "[Added Lines]",
          "4670:             if (!parse && cnt == 1 && !Jsi_Strcmp(key, \"help\") && v3->d.obj->tree->numEntries==1) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4721:                 break;",
          "4722:             }",
          "4723:             Jsi_vtype oTyp, vTyp = jsi_getValType(val);",
          "4725:                 oTyp = JSI_VT_BOOL; // Accept these as builtin options.",
          "4726:                 oVal = NULL;",
          "4727:             } else if (!v2) {",
          "",
          "[Removed Lines]",
          "4724:             if (!Jsi_Strcmp(key, \"Debug\") || !Jsi_Strcmp(key, \"Test\") || !Jsi_Strcmp(key, \"Trace\")  || !Jsi_Strcmp(key, \"Assert\")) {",
          "",
          "[Added Lines]",
          "4724:             if (!parse && (!Jsi_Strcmp(key, \"Debug\") || !Jsi_Strcmp(key, \"Test\") || !Jsi_Strcmp(key, \"Trace\")  || !Jsi_Strcmp(key, \"Assert\"))) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4760:         Jsi_TreeSearchDone(&search);",
          "4761:     }",
          "4765:         Jsi_Func *pf = interp->prevActiveFunc;",
          "4766:         Jsi_ModuleConf *mo = NULL;",
          "",
          "[Removed Lines]",
          "4763:     if (rc == JSI_OK && fp->filePtr && evfunc) {",
          "",
          "[Added Lines]",
          "4763:     if (!parse && rc == JSI_OK && fp->filePtr && evfunc) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4768:             mo = &pf->pkg->popts.conf;",
          "4769:             pf->pkg->logmask = mo->logmask;",
          "4770:             pf->pkg->log = mo->log;",
          "4772:         }",
          "4773:         uint i;",
          "4774:         for (i=JSI_LOG_ASSERT; mo && i<=JSI_LOG_TEST; i++) {",
          "",
          "[Removed Lines]",
          "4771:             freeze = mo->freeze;",
          "",
          "[Added Lines]",
          "4771:             nofreeze = mo->nofreeze;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4785:             }",
          "4786:         }",
          "4787:     }",
          "4789:         Jsi_Obj *obj = v1->d.obj;",
          "4790:         obj->freeze = 1;",
          "4791:         obj->freezeModifyOk = 1;",
          "4793:     }",
          "4794:     return rc;",
          "4795: }",
          "4797: static Jsi_CmdSpec consoleCmds[] = {",
          "4798:     { \"assert\", jsi_AssertCmd,      1,  3, \"expr:boolean|number|function, msg:string=void, options:object=void\",  .help=\"Same as System.assert()\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=0, .opts=AssertOptions},",
          "4799:     { \"error\",  consoleErrorCmd,    1, -1, \"val, ...\", .help=\"Same as log but adding prefix ERROR:\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "",
          "[Removed Lines]",
          "4788:     if (rc == JSI_OK && freeze) {",
          "4792:         obj->freezeReadBad = 1;",
          "",
          "[Added Lines]",
          "4788:     if (rc == JSI_OK && !nofreeze) {",
          "4792:         obj->freezeReadCheck = 1;",
          "4797: static Jsi_RC SysParseOptsCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "4798:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "4799: {",
          "4800:     return SysModuleOptsCmdEx(interp, args, _this, ret, funcPtr, 1);",
          "4801: }",
          "4802: static Jsi_RC SysModuleOptsCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "4803:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "4804: {",
          "4805:     return SysModuleOptsCmdEx(interp, args, _this, ret, funcPtr, 0);",
          "4806: }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4952:     { \"noOp\",       jsi_NoOpCmd,     0, -1, \"\", .help=\"A No-Op. A zero overhead command call that is useful for debugging\" },",
          "4953:     { \"parseInt\",   parseIntCmd,     1,  2, \"val:any, base:number=10\", .help=\"Convert string to an integer\", .retType=(uint)JSI_TT_NUMBER },",
          "4954:     { \"parseFloat\", parseFloatCmd,   1,  1, \"val\", .help=\"Convert string to a double\", .retType=(uint)JSI_TT_NUMBER },",
          "4956:     { \"printf\",     SysPrintfCmd,    1, -1, \"format:string, ...\", .help=\"Formatted output to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "4957:     { \"provide\",    SysProvideCmd,   0,  3, \"name:string|null|function=void, version:number|string=void, options:object|function=void\", .help=\"Provide a package for use with require.\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_provide, .opts=jsiModuleOptions  },",
          "4958:     { \"puts\",       SysPutsCmd,      1, -1, \"val, ...\", .help=\"Output one or more values to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_puts },",
          "",
          "[Removed Lines]",
          "4955:     { \"parseOpts\",  SysModuleOptsCmd,2,  3, \"self:object|userobj, options:object, conf:object|null|undefined=void\", .help=\"Parse module options: same as moduleOpts\", .retType=(uint)JSI_TT_OBJECT, .flags=0},",
          "",
          "[Added Lines]",
          "4966:     { \"parseOpts\",  SysParseOptsCmd, 2,  3, \"self:object|userobj, options:object, conf:object|null|undefined=void\", .help=\"Parse module options: similar to moduleOpts but for non-modules\", .retType=(uint)JSI_TT_OBJECT, .flags=0},",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "348: }",
          "353:      jsi_ScopeChain **scope, Jsi_Value **currentScope, int *context_id, Jsi_Value *top, const char *nam) {",
          "354:     if (Jsi_InterpGone(interp))",
          "355:         return JSI_ERROR;",
          "",
          "[Removed Lines]",
          "350: #define JSI_DO_THROW(nam) if ((rc=jsiDoThrow(interp, ps, &ip, &trylist,&scope, &currentScope, &context_id, (interp->framePtr->Sp?_jsi_TOP:NULL), nam)) != JSI_OK) break;",
          "352: static int jsiDoThrow(Jsi_Interp *interp, jsi_Pstate *ps, jsi_OpCode **ipp, jsi_TryList **tlp,",
          "",
          "[Added Lines]",
          "350: static Jsi_RC jsiDoThrow(Jsi_Interp *interp, jsi_Pstate *ps, jsi_OpCode **ipp, jsi_TryList **tlp,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "361:                 if (!Jsi_Strcmp(nam, \"help\"))",
          "362:                     Jsi_LogError(\"...%s\", str);",
          "363:                 else",
          "365:             }",
          "366:             return JSI_ERROR;",
          "367:         }",
          "",
          "[Removed Lines]",
          "364:                     Jsi_LogError(\"%s: %s\", nam, str);",
          "",
          "[Added Lines]",
          "362:                     Jsi_LogError(\"%s near %s\", nam, str);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "949:         arrayindex = (int)idx->d.num;",
          "950:     }",
          "953:         Jsi_Value *v;",
          "954:         char keyBuf[100], *keyStr = keyBuf;",
          "955:         if (arrayindex>=0)",
          "",
          "[Removed Lines]",
          "952:     if (src->vt == JSI_VT_OBJECT && src->d.obj->ot == JSI_OT_OBJECT && src->d.obj->freeze && src->d.obj->freezeReadBad) {",
          "",
          "[Added Lines]",
          "950:     if (src->vt == JSI_VT_OBJECT && src->d.obj->ot == JSI_OT_OBJECT && src->d.obj->freeze && src->d.obj->freezeReadCheck) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1059:     jsi_TryList  *trylist = NULL;",
          "1060:     jsi_Frame *fp = interp->framePtr;",
          "1061:     bool strict = interp->typeCheck.strict;",
          "1064:     if (currentScope->vt != JSI_VT_OBJECT) {",
          "1065:         Jsi_LogBug(\"Eval: current scope is not a object\");",
          "",
          "[Removed Lines]",
          "1062:     const char *curFile = NULL;",
          "",
          "[Added Lines]",
          "1060:     const char *curFile = NULL, *throwStr;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1158:             if ((rc = (*interp->debugOpts.hook)(interp, curFile, curLine, fp->level, interp->curFunction, jsi_opcode_string(ip->op), ip, NULL)) != JSI_OK)",
          "1159:                 break;",
          "1160:         }",
          "1162:         switch(ip->op) {",
          "1163:             case OP_NOP:",
          "1164:             case OP_LASTOP:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1159:         throwStr = \"error\";",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1219:                     case JSI_BREAK:",
          "1220:                         if (fp->tryDepth<=0)",
          "1221:                             interp->isHelp = 1;",
          "1223:                         break;",
          "1224:                     default:",
          "1226:                 }",
          "1227:                 strict = interp->typeCheck.strict;",
          "",
          "[Removed Lines]",
          "1222:                         JSI_DO_THROW(\"help\");",
          "1225:                         JSI_DO_THROW(\"fcall\");",
          "",
          "[Added Lines]",
          "1220:                         rc = JSI_ERROR;",
          "1221:                         throwStr = \"help\";",
          "1224:                         throwStr = \"fcall\";",
          "1225:                         rc = JSI_ERROR;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1752:                 jsiPush(interp,1);",
          "1754:                 if (r) {",
          "1756:                 }",
          "1757:                 break;",
          "1758:             }",
          "",
          "[Removed Lines]",
          "1755:                     JSI_DO_THROW(\"eval\");",
          "",
          "[Added Lines]",
          "1755:                     rc = JSI_ERROR;",
          "1756:                     throwStr = \"eval\";",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1853:                     Jsi_LogBug(\"Unexpected SCATCH opcode??\");",
          "1855:                 if (!ip->data) {",
          "1857:                 } else {",
          "1858:                     trylist->inCatch=1;",
          "",
          "[Removed Lines]",
          "1856:                     JSI_DO_THROW(\"catch\");",
          "",
          "[Added Lines]",
          "1857:                     throwStr = \"catch\";",
          "1858:                     rc = JSI_ERROR;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1907:                 pop_try(trylist);",
          "1909:                 if (last_op == jsi_LOP_THROW) {",
          "1911:                 } else if (last_op == jsi_LOP_JMP) {",
          "1912:                     while (1) {",
          "1913:                         if (trylist == NULL) {",
          "",
          "[Removed Lines]",
          "1910:                     JSI_DO_THROW(\"finally\");",
          "",
          "[Added Lines]",
          "1912:                     throwStr = \"finally\";",
          "1913:                     rc = JSI_ERROR;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1946:                 jsiVarDeref(interp,1);",
          "1947:                 Jsi_ValueDup2(interp,&ps->last_exception, _jsi_TOP);",
          "1950:                 break;",
          "1951:             }",
          "1952:             case OP_WITH: {",
          "",
          "[Removed Lines]",
          "1949:                 JSI_DO_THROW(\"throw\");",
          "",
          "[Added Lines]",
          "1952:                 throwStr = \"throw\";",
          "1953:                 rc = JSI_ERROR;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2007:             }",
          "2008: #ifndef __cplusplus",
          "2009:             default:",
          "2011: #endif",
          "2012:         }",
          "2013:         if (rc == JSI_ERROR) {",
          "2016:         }",
          "2017:         lop = plop;",
          "2018:         ip++;",
          "",
          "[Removed Lines]",
          "2010:                 Jsi_LogBug(\"invalid op ceod: %d\", ip->op);",
          "2014:             JSI_DO_THROW(\"error\");",
          "2015:             rc = JSI_OK;",
          "",
          "[Added Lines]",
          "2014:                 Jsi_LogBug(\"invalid op code: %d\", ip->op);",
          "2018:             rc = jsiDoThrow(interp, ps, &ip, &trylist,&scope, &currentScope, &context_id,",
          "2019:                 (interp->framePtr->Sp?_jsi_TOP:NULL), throwStr);",
          "2020:             if (rc != JSI_OK)",
          "2021:                 break;",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "523:     uint isBlob:1;",
          "524:     uint freeze:1;",
          "525:     uint freezeModifyOk:1;",
          "527:     uint unused2:13;",
          "529:         int val;",
          "",
          "[Removed Lines]",
          "526:     uint freezeReadBad:1;",
          "",
          "[Added Lines]",
          "526:     uint freezeReadCheck:1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1030:     bool outUndef;",
          "1031:     bool logAllowDups;",
          "1032:     bool logColNums;",
          "1034:     bool privKeys;",
          "1035:     bool compat;",
          "1036:     bool mutexUnlock;",
          "",
          "[Removed Lines]",
          "1033:     bool freeze;",
          "",
          "[Added Lines]",
          "1033:     bool nofreeze;",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:     JSI_OPT(BOOL,  jsi_SubOptions, compat,      .help=\"Ignore unknown options via JSI_OPTS_IGNORE_EXTRA in option parser\" ),",
          "64:     JSI_OPT(INT,   jsi_SubOptions, dblPrec,     .help=\"Format precision of double where 0=max, -1=max-1, ... (max-1)\" ),",
          "65:     JSI_OPT(BOOL,  jsi_SubOptions, istty,       .help=\"Indicates interp is in interactive mode\", jsi_IIRO),",
          "67:     JSI_OPT(BOOL,  jsi_SubOptions, logColNums,  .help=\"Display column numbers in error messages\"),",
          "68:     JSI_OPT(BOOL,  jsi_SubOptions, logAllowDups,.help=\"Log should not filter out duplicate messages\"),",
          "69:     JSI_OPT(BOOL,  jsi_SubOptions, mutexUnlock, .help=\"Unlock own mutex when evaling in other interps (true)\", jsi_IIOF),",
          "",
          "[Removed Lines]",
          "66:     JSI_OPT(BOOL,  jsi_SubOptions, freeze,      .help=\"Default freeze self object in: first arg to moduleOpts\" ),",
          "",
          "[Added Lines]",
          "66:     JSI_OPT(BOOL,  jsi_SubOptions, nofreeze,    .help=\"moduleOpts freeze disabled by default\" ),",
          "",
          "---------------"
        ],
        "src/jsiProto.c||src/jsiProto.c": [
          "File: src/jsiProto.c -> src/jsiProto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "366:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "367: {",
          "368:     Jsi_Value *val = Jsi_ValueArrayIndex(interp, args, 0),",
          "372:     if (!val || !Jsi_ValueIsObjType(interp, val, JSI_OT_OBJECT))",
          "373:         return Jsi_LogError(\"arg 1: expected object\");",
          "375:         return Jsi_LogError(\"arg 2: expected bool\");",
          "377:         return Jsi_LogError(\"arg 3: expected bool\");",
          "379:     if (bval)",
          "380:         Jsi_GetBoolFromValue(interp, bval, &bnum);",
          "381:     if (rval)",
          "",
          "[Removed Lines]",
          "374:     if (bval && !Jsi_ValueIsBoolean(interp, bval))",
          "376:     if (rval && !Jsi_ValueIsBoolean(interp, rval))",
          "378:     bool bnum = 0, rnum = 0, fnum = 0;",
          "",
          "[Added Lines]",
          "374:     if (fval && !Jsi_ValueIsBoolean(interp, fval))",
          "376:     if (bval && !Jsi_ValueIsBoolean(interp, bval))",
          "378:     if (rval && !Jsi_ValueIsBoolean(interp, rval))",
          "379:         return Jsi_LogError(\"arg 4: expected bool\");",
          "380:     bool bnum = 1, rnum = 1, fnum = 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "383:     if (fval)",
          "384:         Jsi_GetBoolFromValue(interp, fval, &fnum);",
          "385:     Jsi_Obj *obj = val->d.obj;",
          "387:     obj->freezeModifyOk = bnum;",
          "389:     return JSI_OK;",
          "391: }",
          "",
          "[Removed Lines]",
          "386:     obj->freeze = !fnum;",
          "388:     obj->freezeReadBad = rnum;",
          "",
          "[Added Lines]",
          "388:     obj->freeze = fnum;",
          "390:     obj->freezeReadCheck = rnum;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "700:     { \"hasOwnProperty\", jsi_HasOwnPropertyCmd,  1, 1, \"name:string\", .help=\"Returns a true if object has the specified property\", .retType=(uint)JSI_TT_BOOLEAN },",
          "701:     { \"is\",             ObjectIsCmd, 2, 2, \"value1, value2\", .help=\"Tests if two values are equal\", .retType=(uint)JSI_TT_BOOLEAN },",
          "702:     { \"isPrototypeOf\",  ObjectIsPrototypeOfCmd, 1, 1, \"name\", .help=\"Tests for an object in another object's prototype chain\", .retType=(uint)JSI_TT_BOOLEAN },",
          "704:     { \"keys\",           ObjectKeysCmd,          0, 1, \"obj:object|function=void\", .help=\"Return the keys of an object or array\", .retType=(uint)JSI_TT_ARRAY },",
          "705:     { \"merge\",          ObjectMergeCmd,         1, 1, \"obj:object|function\", .help=\"Return new object containing merged values\", .retType=(uint)JSI_TT_OBJECT },",
          "706:     { \"propertyIsEnumerable\", ObjectPropertyIsEnumerableCmd,1, 1, \"name\", .help=\"Determine if a property is enumerable\", .retType=(uint)JSI_TT_BOOLEAN },",
          "",
          "[Removed Lines]",
          "703:     { \"freeze\",         ObjectFreezeCmd,        1, 4, \"obj:object, modify:boolean=false, badread:boolean=false, unfreeze:boolean=false\", .help=\"Freeze an object optionally allowing modify (but not add)\", .retType=(uint)JSI_TT_VOID },",
          "",
          "[Added Lines]",
          "705:     { \"freeze\",         ObjectFreezeCmd,        1, 4, \"obj:object, freeze:boolean=true, modifyok:boolean=true, readcheck:boolean=true\", .help=\"Freeze/unfreeze an object with optionally\", .retType=(uint)JSI_TT_VOID },",
          "",
          "---------------"
        ],
        "src/jsiUtils.c||src/jsiUtils.c": [
          "File: src/jsiUtils.c -> src/jsiUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:     }",
          "145:     if (!log)",
          "146:         return (code==JSI_LOG_ERROR?JSI_ERROR:JSI_OK);",
          "148:     char pbuf[JSI_BUFSIZ/8] = \"\";",
          "149:     char buf[JSI_BUFSIZ/2];",
          "150:     const char *term = \"\", *pterm=pbuf;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147:     if (code == JSI_LOG_ERROR) {",
          "148:         if (interp->curIpLastError == interp->curIp)",
          "149:             return JSI_ERROR;",
          "150:         interp->curIpLastError = interp->curIp;",
          "151:     }",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "217: Number.prototype.toString = function(radix:number=10):string {};",
          "218: var Object = function(cmd,args) {};",
          "219: Object.prototype.create = function(proto:null|object, properties:object=void):object {};",
          "221: Object.prototype.getPrototypeOf = function(name:object|function):function|object {};",
          "222: Object.prototype.hasOwnProperty = function(name:string):boolean {};",
          "223: Object.prototype.is = function(value1, value2):boolean {};",
          "",
          "[Removed Lines]",
          "220: Object.prototype.freeze = function(obj:object, modify:boolean=false, badread:boolean=false, unfreeze:boolean=false):void {};",
          "",
          "[Added Lines]",
          "220: Object.prototype.freeze = function(obj:object, freeze:boolean=true, modifyok:boolean=true, readcheck:boolean=true):void {};",
          "",
          "---------------"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "722: <tr><td>compat</td><td><i>BOOL</i></td><td>Ignore unknown options via JSI_OPTS_IGNORE_EXTRA in option parser.</td><td><i></i></td></tr>",
          "723: <tr><td>dblPrec</td><td><i>INT</i></td><td>Format precision of double where 0=max, -1=max-1, ... (max-1).</td><td><i></i></td></tr>",
          "724: <tr><td>istty</td><td><i>BOOL</i></td><td>Indicates interp is in interactive mode.</td><td><i>readOnly</i></td></tr>",
          "726: <tr><td>logColNums</td><td><i>BOOL</i></td><td>Display column numbers in error messages.</td><td><i></i></td></tr>",
          "727: <tr><td>logAllowDups</td><td><i>BOOL</i></td><td>Log should not filter out duplicate messages.</td><td><i></i></td></tr>",
          "728: <tr><td>mutexUnlock</td><td><i>BOOL</i></td><td>Unlock own mutex when evaling in other interps (true).</td><td><i>initOnly</i></td></tr>",
          "",
          "[Removed Lines]",
          "725: <tr><td>freeze</td><td><i>BOOL</i></td><td>Default freeze self object in: first arg to moduleOpts.</td><td><i></i></td></tr>",
          "",
          "[Added Lines]",
          "725: <tr><td>nofreeze</td><td><i>BOOL</i></td><td>moduleOpts freeze disabled by default.</td><td><i></i></td></tr>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "965: <tr><th>Method</th><th>Prototype</th><th>Description</th></tr>",
          "966: <tr><td>Object</td><td>new Object(val:object|function|null=void):object </td><td>Object constructor.</td></tr>",
          "967: <tr><td>create</td><td>create(proto:null|object, properties:object=void):object </td><td>Create a new object with prototype object and properties.</td></tr>",
          "969: <tr><td>getPrototypeOf</td><td>getPrototypeOf(name:object|function):function|object </td><td>Return prototype of an object.</td></tr>",
          "970: <tr><td>hasOwnProperty</td><td>hasOwnProperty(name:string):boolean </td><td>Returns a true if object has the specified property.</td></tr>",
          "971: <tr><td>is</td><td>is(value1, value2):boolean </td><td>Tests if two values are equal.</td></tr>",
          "",
          "[Removed Lines]",
          "968: <tr><td>freeze</td><td>freeze(obj:object, modify:boolean=false, badread:boolean=false, unfreeze:boolean=false):void </td><td>Freeze an object optionally allowing modify (but not add).</td></tr>",
          "",
          "[Added Lines]",
          "968: <tr><td>freeze</td><td>freeze(obj:object, freeze:boolean=true, modifyok:boolean=true, readcheck:boolean=true):void </td><td>Freeze/unfreeze an object with optionally.</td></tr>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1372: <tr><td>noOp</td><td>noOp() </td><td>A No-Op. A zero overhead command call that is useful for debugging.</td></tr>",
          "1373: <tr><td>parseFloat</td><td>parseFloat(val):number </td><td>Convert string to a double.</td></tr>",
          "1374: <tr><td>parseInt</td><td>parseInt(val:any, base:number=10):number </td><td>Convert string to an integer.</td></tr>",
          "1376: <tr><td>printf</td><td>printf(format:string, ...):void </td><td>Formatted output to stdout.</td></tr>",
          "1377: <tr><td>provide</td><td>provide(name:string|null|function=void, version:number|string=void, <a href='#System.provideOptions'>options</a>:object|function=void):void </td><td>Provide a package for use with require.. Default is the file tail-rootname</td></tr>",
          "1378: <tr><td>puts</td><td>puts(val, ...):void </td><td>Output one or more values to stdout. Each argument is quoted.  Use Interp.logOpts to control source line and/or timestamps output.</td></tr>",
          "",
          "[Removed Lines]",
          "1375: <tr><td>parseOpts</td><td>parseOpts(self:object|userobj, options:object, conf:object|null|undefined=void):object </td><td>Parse module options: same as moduleOpts.</td></tr>",
          "",
          "[Added Lines]",
          "1375: <tr><td>parseOpts</td><td>parseOpts(self:object|userobj, options:object, conf:object|null|undefined=void):object </td><td>Parse module options: similar to moduleOpts but for non-modules.</td></tr>",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1431: <tr><td>log</td><td><i>ARRAY</i></td><td>Logging flags. (zero or more of: <b>bug</b>, <b>assert</b>, <b>debug</b>, <b>trace</b>, <b>test</b>, <b>info</b>, <b>warn</b>, <b>error</b>, <b>parse</b>)</td><td><i>noCase</i></td></tr>",
          "1432: <tr><td>logmask</td><td><i>ARRAY</i></td><td>Logging mask flags. (zero or more of: <b>bug</b>, <b>assert</b>, <b>debug</b>, <b>trace</b>, <b>test</b>, <b>info</b>, <b>warn</b>, <b>error</b>, <b>parse</b>)</td><td><i>noCase</i></td></tr>",
          "1433: <tr><td>coverage</td><td><i>BOOL</i></td><td>On exit generate detailed code coverage for function calls (with profile).</td><td><i></i></td></tr>",
          "1435: <tr><td>info</td><td><i>OBJ</i></td><td>Info provided by module.</td><td><i>initOnly</i></td></tr>",
          "1436: <tr><td>profile</td><td><i>BOOL</i></td><td>On exit generate profile of function calls.</td><td><i></i></td></tr>",
          "1437: <tr><td>traceCall</td><td><i>ARRAY</i></td><td>Trace commands. (zero or more of: <b>funcs</b>, <b>cmds</b>, <b>new</b>, <b>return</b>, <b>args</b>, <b>notrunc</b>, <b>noparent</b>, <b>full</b>, <b>before</b>)</td><td><i></i></td></tr>",
          "",
          "[Removed Lines]",
          "1434: <tr><td>freeze</td><td><i>BOOL</i></td><td>Freeze self object: first arg to moduleOpts.</td><td><i></i></td></tr>",
          "",
          "[Added Lines]",
          "1434: <tr><td>nofreeze</td><td><i>BOOL</i></td><td>Disable moduleOpts freeze of first arg (self).</td><td><i></i></td></tr>",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1447: <tr><td>log</td><td><i>ARRAY</i></td><td>Logging flags. (zero or more of: <b>bug</b>, <b>assert</b>, <b>debug</b>, <b>trace</b>, <b>test</b>, <b>info</b>, <b>warn</b>, <b>error</b>, <b>parse</b>)</td><td><i>noCase</i></td></tr>",
          "1448: <tr><td>logmask</td><td><i>ARRAY</i></td><td>Logging mask flags. (zero or more of: <b>bug</b>, <b>assert</b>, <b>debug</b>, <b>trace</b>, <b>test</b>, <b>info</b>, <b>warn</b>, <b>error</b>, <b>parse</b>)</td><td><i>noCase</i></td></tr>",
          "1449: <tr><td>coverage</td><td><i>BOOL</i></td><td>On exit generate detailed code coverage for function calls (with profile).</td><td><i></i></td></tr>",
          "1451: <tr><td>info</td><td><i>OBJ</i></td><td>Info provided by module.</td><td><i>initOnly</i></td></tr>",
          "1452: <tr><td>profile</td><td><i>BOOL</i></td><td>On exit generate profile of function calls.</td><td><i></i></td></tr>",
          "1453: <tr><td>traceCall</td><td><i>ARRAY</i></td><td>Trace commands. (zero or more of: <b>funcs</b>, <b>cmds</b>, <b>new</b>, <b>return</b>, <b>args</b>, <b>notrunc</b>, <b>noparent</b>, <b>full</b>, <b>before</b>)</td><td><i></i></td></tr>",
          "",
          "[Removed Lines]",
          "1450: <tr><td>freeze</td><td><i>BOOL</i></td><td>Freeze self object: first arg to moduleOpts.</td><td><i></i></td></tr>",
          "",
          "[Added Lines]",
          "1450: <tr><td>nofreeze</td><td><i>BOOL</i></td><td>Disable moduleOpts freeze of first arg (self).</td><td><i></i></td></tr>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "51abbe4a942e406133022d900df8dcb3e18b4031",
      "candidate_info": {
        "commit_hash": "51abbe4a942e406133022d900df8dcb3e18b4031",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/51abbe4a942e406133022d900df8dcb3e18b4031",
        "files": [
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiJSON.c",
          "src/jsiSqlite.c",
          "src/parser.y",
          "tests/export.jsi",
          "tests/imports/imp1.jsi",
          "tests/imports/imp2.jsi",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.50\": fix sqlite memleak, export/import update and tests.\n\nFossilOrigin-Name: 8674e05d00c540fac8b45e405b1f3b8ed79636a47df2b48d46a1635412860cb5",
        "before_after_code_files": [
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiJSON.c||src/jsiJSON.c",
          "src/jsiSqlite.c||src/jsiSqlite.c",
          "src/parser.y||src/parser.y",
          "tests/export.jsi||tests/export.jsi",
          "tests/imports/imp1.jsi||tests/imports/imp1.jsi",
          "tests/imports/imp2.jsi||tests/imports/imp2.jsi",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ]
        }
      },
      "candidate_diff": {
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 49",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 50",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:     JSI_OPT(BOOL,   SourceData, autoIndex,  .help=\"Look for and load Jsi_Auto.jsi auto-index file\" ),",
          "82:     JSI_OPT(BOOL,   SourceData, exists, .help=\"Source file only if exists\" ),",
          "83:     JSI_OPT(BOOL,   SourceData, global, .help=\"File is to be sourced in global frame rather than local\" ),",
          "85:     JSI_OPT(BOOL,   SourceData, isMain, .help=\"Coerce to true the value of Info.isMain()\" ),",
          "86:     JSI_OPT(UINT,   SourceData, level,  .help=\"Frame to source file in\" ),",
          "87:     JSI_OPT(BOOL,   SourceData, noEval, .help=\"Disable eval: just parses file to check syntax\" ),",
          "",
          "[Removed Lines]",
          "84:     JSI_OPT(BOOL,   SourceData, import, .help=\"Wrap in a function closure\" ),",
          "",
          "[Added Lines]",
          "84:     JSI_OPT(BOOL,   SourceData, import, .help=\"Wrap file contents in a return/function closure\" ),",
          "",
          "---------------"
        ],
        "src/jsiJSON.c||src/jsiJSON.c": [
          "File: src/jsiJSON.c -> src/jsiJSON.c"
        ],
        "src/jsiSqlite.c||src/jsiSqlite.c": [
          "File: src/jsiSqlite.c -> src/jsiSqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1888:                 str = (char*)sqlite3_column_text(pStmt, iCol );",
          "1889:                 if (JSI_OK != Jsi_JSONParse(interp, str, &v, 0))",
          "1890:                     Jsi_LogWarnExt(\"JSON parse failure for CHARJSON column\");",
          "1891:                 return v;",
          "1892:             }",
          "1893:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1891:                 if (!v)",
          "1892:                     v = Jsi_ValueNew(interp);",
          "",
          "---------------"
        ],
        "src/parser.y||src/parser.y": [
          "File: src/parser.y -> src/parser.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: %type <opcodes> array commonstatement delete_statement do_statement expr expr_opt exprlist exprlist_opt itemident itemfunc",
          "45: %type <opcodes> fcall_exprs for_cond for_init for_statement func_expr func_statement func_statement_block if_statement item items iterstatement lvalue",
          "47: %type <scopes> args args_opt argsa arrowargs",
          "48: %type <inum> typeid inof rettype argtype localvar",
          "49: %type <sstr> identifier_opt label_opt func_prefix",
          "",
          "[Removed Lines]",
          "46: %type <opcodes> object objectident statement statements statement_or_empty switch_statement try_statement value vardec vardecs while_statement with_statement",
          "",
          "[Added Lines]",
          "46: %type <opcodes> object objexport statement statements statement_or_empty switch_statement try_statement value vardec vardecs while_statement with_statement",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "152:     | LOCALCONST { $$ = LOCALCONST; }",
          "153: ;",
          "156:     object { $$ = $1; }",
          "158:         Jsi_OpCodes *lval = code_push_index(pstate, &@1, $1, 0);",
          "159:         $$ = lval;",
          "160:         lval->lvalue_flag = 1;",
          "161:         lval->lvalue_name = $1;",
          "163:     | '*' {",
          "164:         $$ = code_push_null();",
          "165:     }",
          "",
          "[Removed Lines]",
          "155: objectident:",
          "",
          "[Added Lines]",
          "155: objexport:",
          "157:     | IDENTIFIER {",
          "162:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "186:     | ';'                   { $$ = code_nop(); }",
          "187:     | '{' statements '}'    { $$ = $2; }",
          "188:     | func_statement        { $$ = $1; }",
          "190: ;",
          "192: func_statement:",
          "",
          "[Removed Lines]",
          "189:     | EXPORT DEFAULT objectident { $$ = codes_join($3, code_export(pstate, &@3, 1)); }",
          "",
          "[Added Lines]",
          "189:     | EXPORT DEFAULT objexport { $$ = codes_join($3, code_export(pstate, &@3, 1)); }",
          "",
          "---------------"
        ],
        "tests/export.jsi||tests/export.jsi": [
          "File: tests/export.jsi -> tests/export.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: var a = (function() {",
          "3:    var x = 1;",
          "4:    function foo() {}",
          "5:    function bar() {}",
          "6:    export default *;",
          "7: })();",
          "8: ;a;",
          "10: var b = (function() {",
          "11:    var x = 1;",
          "12:    function foo() {}",
          "13:    function bar() {}",
          "14:    export default +;",
          "15: })();",
          "16: ;b;",
          "18: var c = (function() {",
          "19:    var x = 1;",
          "20:    function foo() {}",
          "21:    function bar() {}",
          "22:    export default { x:x, foo };",
          "23: })();",
          "24: ;c;",
          "26: var d = (function() {",
          "27:    var x = 1;",
          "28:    function foo() {}",
          "29:    function bar() {}",
          "30:    var e = {x:x, bar};",
          "31:    export default e;",
          "32: })();",
          "33: ;d;",
          "35: var i1 = import('imports/imp1.jsi');",
          "36: ;i1;",
          "38: var i2 = import('imports/imp2.jsi');",
          "39: ;i2;",
          "41: var i3 = source('imports/imp1.jsi');",
          "42: ;i3;",
          "44: var i4 = source('imports/imp2.jsi');",
          "45: ;i4;",
          "48: =!EXPECTSTART!=",
          "49: a ==> { bar:\"function bar() {...}\", foo:\"function foo() {...}\" }",
          "50: b ==> { bar:\"function bar() {...}\", foo:\"function foo() {...}\", x:1 }",
          "51: c ==> { foo:\"function foo() {...}\", x:1 }",
          "52: d ==> { bar:\"function bar() {...}\", x:1 }",
          "53: i1 ==> { foo:\"function foo() {...}\", x:1 }",
          "54: i2 ==> { bar2:\"function bar2() {...}\", foo2:\"function foo2() {...}\" }",
          "55: i3 ==> { foo:\"function foo() {...}\", x:1 }",
          "56: i4 ==> null",
          "57: =!EXPECTEND!=",
          "",
          "---------------"
        ],
        "tests/imports/imp1.jsi||tests/imports/imp1.jsi": [
          "File: tests/imports/imp1.jsi -> tests/imports/imp1.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: var x = 1;",
          "2: function foo() {}",
          "3: function bar() {}",
          "4: export default { x:x, foo };",
          "",
          "---------------"
        ],
        "tests/imports/imp2.jsi||tests/imports/imp2.jsi": [
          "File: tests/imports/imp2.jsi -> tests/imports/imp2.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: var x2 = 1;",
          "2: function foo2() {}",
          "3: function bar2() {}",
          "4: export default *",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "1082: |autoIndex|*BOOL*|Look for and load Jsi_Auto.jsi auto-index file.||",
          "1083: |exists|*BOOL*|Source file only if exists.||",
          "1084: |global|*BOOL*|File is to be sourced in global frame rather than local.||",
          "1086: |isMain|*BOOL*|Coerce to true the value of Info.isMain().||",
          "1087: |level|*UINT*|Frame to source file in.||",
          "1088: |noEval|*BOOL*|Disable eval: just parses file to check syntax.||",
          "",
          "[Removed Lines]",
          "1085: |import|*BOOL*|Wrap in a function closure.||",
          "",
          "[Added Lines]",
          "1085: |import|*BOOL*|Wrap file contents in a return/function closure.||",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1117: |autoIndex|*BOOL*|Look for and load Jsi_Auto.jsi auto-index file.||",
          "1118: |exists|*BOOL*|Source file only if exists.||",
          "1119: |global|*BOOL*|File is to be sourced in global frame rather than local.||",
          "1121: |isMain|*BOOL*|Coerce to true the value of Info.isMain().||",
          "1122: |level|*UINT*|Frame to source file in.||",
          "1123: |noEval|*BOOL*|Disable eval: just parses file to check syntax.||",
          "",
          "[Removed Lines]",
          "1120: |import|*BOOL*|Wrap in a function closure.||",
          "",
          "[Added Lines]",
          "1120: |import|*BOOL*|Wrap file contents in a return/function closure.||",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e4c4b6507559b78318429ff4c249bd6bd9cf41e4",
      "candidate_info": {
        "commit_hash": "e4c4b6507559b78318429ff4c249bd6bd9cf41e4",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/e4c4b6507559b78318429ff4c249bd6bd9cf41e4",
        "files": [
          "lib/www/js/Jsish.js",
          "lib/www/md/Reference.md",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiInt.h",
          "src/jsiInterp.c",
          "src/jsiJSON.c",
          "src/jsiSqlite.c",
          "src/jsiUtils.c",
          "tools/mkref.jsi",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.4.6\": add getOpts, JSON stringify format\n\nFossilOrigin-Name: 302024614cdf8b34de0ad9f15ba734b4d0214d3a90102fcce89e4c3bc34f7d46",
        "before_after_code_files": [
          "lib/www/js/Jsish.js||lib/www/js/Jsish.js",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiJSON.c||src/jsiJSON.c",
          "src/jsiSqlite.c||src/jsiSqlite.c",
          "src/jsiUtils.c||src/jsiUtils.c",
          "tools/mkref.jsi||tools/mkref.jsi",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "lib/www/js/Jsish.js||lib/www/js/Jsish.js": [
          "File: lib/www/js/Jsish.js -> lib/www/js/Jsish.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "345:         if (msg)",
          "346:             throw msg;",
          "347:     },",
          "348:     ajax:function(opts) { // Ajax",
          "349:         function none(){};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "348:     getUrl:function(url, success, error) {",
          "349:         return jsi.ajax({url:url, success:success, error:error});",
          "350:     },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "467:         }",
          "468:     },",
          "471:     filesave: function(filename, data, mime) {  $jsig(\"filename:string, data:string, mime='text/html'\", arguments)();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "473:      getOpts: function(opts, vals, target) {",
          "475:         if (typeof(target) == 'undefined')",
          "476:             target = Object.assign(opts);",
          "477:         else",
          "478:             for (var i in opts)",
          "479:                 if (typeof(target[i]) === 'undefined')",
          "480:                     target[i] = opts[i];",
          "481:         for (var i in vals) {",
          "482:             var ti, tt = gettype(opts[i]);",
          "483:             if (tt == 'undefined')",
          "484:                 LogWarn(\"option \"+i+\" not one of: \"+Object.keys(opts).join(', '));",
          "485:             else {",
          "486:                 if (opts[i] !== null && tt !== (ti=gettype(vals[i])))",
          "487:                     LogWarn('type mismatch of '+i+': '+tt+'!='+ti);",
          "488:                 target[i] = vals[i];",
          "489:             }",
          "490:         }",
          "491:         return target;",
          "492:     },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "507:         if (onload)",
          "508:             f.onload = onload;",
          "509:         if (onerror)",
          "511:         var h = document.querySelector(\"head\");",
          "512:         h.appendChild(f);",
          "513:     },",
          "",
          "[Removed Lines]",
          "510:             f.onload = onerror;",
          "",
          "[Added Lines]",
          "532:             f.onerror = onerror;",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   4",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 5",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 6",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "199:     JSI_OUTPUT_STDERR = 0x8,",
          "200:     JSI_JSON_STATIC_DEFAULT =100,",
          "202:     JSI_STUBS_STRICT  = 0x1, JSI_STUBS_SIG = 0xdeadaa00, JSI_SIG_TYPEDEF,",
          "203:     JSI_SIG_OPTS = 0xdeadab00,",
          "204:     JSI_SIG_OPTS_STRUCT, JSI_SIG_OPTS_ENUM, JSI_SIG_OPTS_VARDEF, JSI_SIG_OPTS_FIELD,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "202:     JSI_JSON_FORMAT   = 0x200,",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4715: }",
          "4717: static Jsi_RC SysModuleOptsCmdEx(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "4719: {",
          "4720:     bool nofreeze = interp->subOpts.nofreeze;",
          "4721:     Jsi_TreeEntry *tPtr, *tPtr2;",
          "",
          "[Removed Lines]",
          "4718:     Jsi_Value **ret, Jsi_Func *funcPtr, bool parse)",
          "",
          "[Added Lines]",
          "4718:     Jsi_Value **ret, Jsi_Func *funcPtr, int parse)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4723:     Jsi_RC rc = JSI_OK;",
          "4724:     jsi_Frame *fp = interp->framePtr, *pf = fp->parent;",
          "4725:     Jsi_Func *evfunc = fp->evalFuncPtr;",
          "4732:         return Jsi_LogError(\"arg 1: expected object 'self'\");",
          "4733:     else",
          "4737:         return Jsi_LogError(\"arg 2: expected object 'options'\");",
          "4740:         tPtr; tPtr = Jsi_TreeSearchNext(&search)) {",
          "4741:         Jsi_Value *v = (Jsi_Value*)Jsi_TreeValueGet(tPtr);",
          "4742:         if (v==NULL) continue;",
          "4743:         const char *key = (char*)Jsi_TreeKeyGet(tPtr);",
          "4746:     }",
          "4748:         Jsi_TreeSearchDone(&search);",
          "4752:         else {",
          "4754:         }",
          "4755:     }",
          "4759:         else {",
          "4761:         }",
          "4762:     }",
          "4766:             return Jsi_LogError(\"arg 3: expected object|null|undefined\");",
          "4768:         Jsi_Value *oVal;",
          "4769:         int cnt = 0;",
          "4771:             tPtr && rc == JSI_OK; tPtr = Jsi_TreeSearchNext(&search)) {",
          "4772:             Jsi_Value *val;",
          "4773:             const char *key;",
          "",
          "[Removed Lines]",
          "4726:     Jsi_Value *v1 = Jsi_ValueArrayIndex(interp, args, (parse?0:1)),",
          "4729:     if (!v1)",
          "4730:         v1 = Jsi_ValueMakeObject(interp, ret,  Jsi_ObjNewType(interp, JSI_OT_OBJECT));",
          "4731:     else if (!Jsi_ValueIsObjType(interp, v1, JSI_OT_OBJECT))",
          "4734:         Jsi_ValueMakeObject(interp, ret, v1->d.obj);",
          "4736:     if (v2 && !Jsi_ValueIsObjType(interp, v2, JSI_OT_OBJECT))",
          "4739:     for (tPtr = (v2?Jsi_TreeSearchFirst(v2->d.obj->tree, &search, 0, NULL):NULL);",
          "4744:         if (!Jsi_ValueObjLookup(interp, v1, key, 1))",
          "4745:             Jsi_ValueInsert(interp, v1, key, v, 0);",
          "4747:     if (v2)",
          "4749:     if (!parse && !v3 && pf && pf->funcName && !Jsi_Strcmp(pf->funcName, \"moduleRun\") && ((v3=pf->arguments))) {",
          "4750:         if (Jsi_ValueIsObjType(interp, v3, JSI_OT_ARRAY))",
          "4751:             v3 = Jsi_ValueArrayIndex(interp, v3, 1);",
          "4753:             v3 = NULL;",
          "4756:     if (!parse && !v3 && (v3=interp->framePtr->fargs)) {",
          "4757:         if (Jsi_ValueIsObjType(interp, v3, JSI_OT_ARRAY))",
          "4758:             v3 = Jsi_ValueArrayIndex(interp, v3, 1);",
          "4760:             v3 = NULL;",
          "4764:     if (v3 && !Jsi_ValueIsNull(interp, v3) && !Jsi_ValueIsUndef(interp, v3)) {",
          "4765:         if (!Jsi_ValueIsObjType(interp, v3, JSI_OT_OBJECT))",
          "4770:         for (tPtr = Jsi_TreeSearchFirst(v3->d.obj->tree, &search, 0, NULL);",
          "",
          "[Added Lines]",
          "4729:     enum { VO_OPTS, VO_SELF, VO_CONF};",
          "4730:     int vi[3] = {VO_OPTS, VO_SELF, VO_CONF};",
          "4731:     switch (parse) {",
          "4732:         case 0: break; // moduleOpts",
          "4733:         case 1: vi[VO_CONF]=0; vi[VO_OPTS]=1; break; // parseOpts",
          "4734:         case 2: // modOpts",
          "4735:         case 3: vi[VO_CONF]=1; vi[VO_SELF]=2; break; // getOpts",
          "4736:         default: Jsi_LogBug(\"bad index\");",
          "4737:     }",
          "4738:     Jsi_Value *vopts = Jsi_ValueArrayIndex(interp, args, vi[VO_OPTS]),",
          "4741:     if (!vself)",
          "4742:         vself = Jsi_ValueMakeObject(interp, ret,  Jsi_ObjNewType(interp, JSI_OT_OBJECT));",
          "4743:     else if (!Jsi_ValueIsObjType(interp, vself, JSI_OT_OBJECT))",
          "4746:         Jsi_ValueMakeObject(interp, ret, vself->d.obj);",
          "4748:     if (vopts && !Jsi_ValueIsObjType(interp, vopts, JSI_OT_OBJECT))",
          "4751:     for (tPtr = (vopts?Jsi_TreeSearchFirst(vopts->d.obj->tree, &search, 0, NULL):NULL);",
          "4756:         if (!Jsi_ValueObjLookup(interp, vself, key, 1))",
          "4757:             Jsi_ValueInsert(interp, vself, key, v, 0);",
          "4759:     if (vopts)",
          "4761:     if (!parse && !vconf && pf && pf->funcName && !Jsi_Strcmp(pf->funcName, \"moduleRun\") && ((vconf=pf->arguments))) {",
          "4762:         if (Jsi_ValueIsObjType(interp, vconf, JSI_OT_ARRAY))",
          "4763:             vconf = Jsi_ValueArrayIndex(interp, vconf, 1);",
          "4765:             vconf = NULL;",
          "4768:     if (!parse && !vconf && (vconf=interp->framePtr->fargs)) {",
          "4769:         if (Jsi_ValueIsObjType(interp, vconf, JSI_OT_ARRAY))",
          "4770:             vconf = Jsi_ValueArrayIndex(interp, vconf, 1);",
          "4772:             vconf = NULL;",
          "4776:     if (vconf && !Jsi_ValueIsNull(interp, vconf) && !Jsi_ValueIsUndef(interp, vconf)) {",
          "4777:         if (!Jsi_ValueIsObjType(interp, vconf, JSI_OT_OBJECT))",
          "4782:         for (tPtr = Jsi_TreeSearchFirst(vconf->d.obj->tree, &search, 0, NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4780:                 break;",
          "4781:             }",
          "4784:                 int isLong = 1;//Jsi_ValueIsTrue(interp, val);",
          "4785:                 const char *help = \"\", *es = NULL, *fstr = NULL, *fname = fp->ip->filePtr->fileName;",
          "4786:                 Jsi_TreeSearchDone(&search);",
          "",
          "[Removed Lines]",
          "4783:             if (!parse && cnt == 1 && !Jsi_Strcmp(key, \"help\") && v3->d.obj->tree->numEntries==1) {",
          "",
          "[Added Lines]",
          "4795:             if (!parse && cnt == 1 && !Jsi_Strcmp(key, \"help\") && vconf->d.obj->tree->numEntries==1) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4811:                     Jsi_DSPrintf(&dStr, \"\\n%s\\nOptions are:\\n\", help);",
          "4812:                 else",
          "4813:                     Jsi_DSPrintf(&dStr, \"\\n%s.  Options are:\\n    \", help);",
          "4815:                     tPtr; tPtr = Jsi_TreeSearchNext(&search)) {",
          "4816:                     Jsi_Value *v = (Jsi_Value*)Jsi_TreeValueGet(tPtr);",
          "4817:                     const char *vstr, *key = (char*)Jsi_TreeKeyGet(tPtr);",
          "",
          "[Removed Lines]",
          "4814:                 for (tPtr = (v2?Jsi_TreeSearchFirst(v2->d.obj->tree, &search, 0, NULL):NULL);",
          "",
          "[Added Lines]",
          "4826:                 for (tPtr = (vopts?Jsi_TreeSearchFirst(vopts->d.obj->tree, &search, 0, NULL):NULL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4842:             if (!parse && jsi_isDebugKey(key)) {",
          "4843:                 oTyp = JSI_VT_BOOL; // Accept these as builtin options.",
          "4844:                 oVal = NULL;",
          "4846:                 continue;",
          "4848:                 Jsi_TreeSearchDone(&search);",
          "4849:                 Jsi_DString dStr = {};",
          "4850:                 int cnt = 0;",
          "4852:                     tPtr; tPtr = Jsi_TreeSearchNext(&search)) {",
          "4853:                     const char *key = (char*)Jsi_TreeKeyGet(tPtr);",
          "4854:                     if (!key) continue;",
          "",
          "[Removed Lines]",
          "4845:             } else if (!v2) {",
          "4847:             } else if (!(tPtr2=Jsi_TreeEntryFind(v2->d.obj->tree, key)) || !(oVal = (Jsi_Value*)Jsi_TreeValueGet(tPtr2))) {",
          "4851:                 for (tPtr = Jsi_TreeSearchFirst(v2->d.obj->tree, &search, 0, NULL);",
          "",
          "[Added Lines]",
          "4857:             } else if (!vopts) {",
          "4859:             } else if (!(tPtr2=Jsi_TreeEntryFind(vopts->d.obj->tree, key)) || !(oVal = (Jsi_Value*)Jsi_TreeValueGet(tPtr2))) {",
          "4863:                 for (tPtr = Jsi_TreeSearchFirst(vopts->d.obj->tree, &search, 0, NULL);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4878:                     }",
          "4879:             }",
          "4880:             if (rc == JSI_OK)",
          "4882:         }",
          "4883:         Jsi_TreeSearchDone(&search);",
          "4884:     }",
          "",
          "[Removed Lines]",
          "4881:                 Jsi_ValueInsert(interp, v1, key, val, 0);",
          "",
          "[Added Lines]",
          "4893:                 Jsi_ValueInsert(interp, vself, key, val, 0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4899:             uint iff = (1<<i);",
          "4900:             if ((mo->log&iff))",
          "4901:                 continue;",
          "4903:                  if (Jsi_ValueIsFalse(interp, vlv)) {",
          "4904:                      pf->pkg->logmask |= iff;",
          "4905:                  } else {",
          "",
          "[Removed Lines]",
          "4902:             if ((vlv = Jsi_ValueObjLookup(interp, v1, jsi_LogCodesU[i], 0))) {",
          "",
          "[Added Lines]",
          "4914:             if ((vlv = Jsi_ValueObjLookup(interp, vself, jsi_LogCodesU[i], 0))) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4909:         }",
          "4910:     }",
          "4911:     if (rc == JSI_OK && !nofreeze) {",
          "4913:         obj->freeze = 1;",
          "4914:         obj->freezeNoModify = 0;",
          "4915:         obj->freezeReadCheck = 1;",
          "",
          "[Removed Lines]",
          "4912:         Jsi_Obj *obj = v1->d.obj;",
          "",
          "[Added Lines]",
          "4924:         Jsi_Obj *obj = vself->d.obj;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4927: {",
          "4928:     return SysModuleOptsCmdEx(interp, args, _this, ret, funcPtr, 0);",
          "4929: }",
          "4931: static Jsi_CmdSpec consoleCmds[] = {",
          "4932:     { \"assert\", jsi_AssertCmd,      1,  3, \"expr:boolean|number|function, msg:string=void, options:object=void\",  .help=\"Same as System.assert()\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=0, .opts=AssertOptions},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4942: static Jsi_RC SysGetOptsCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "4943:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "4944: {",
          "4945:     return SysModuleOptsCmdEx(interp, args, _this, ret, funcPtr, 3);",
          "4946: }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "5070:     { \"exec\",       SysExecCmd,      1,  2, \"val:string, options:string|object=void\", .help=\"Execute an OS command\", .retType=(uint)JSI_TT_ANY, .flags=0, .info=FN_exec, .opts=ExecOptions},",
          "5071:     { \"exit\",       SysExitCmd,      0,  1, \"code:number=0\", .help=\"Exit the current interpreter\", .retType=(uint)JSI_TT_VOID },",
          "5072:     { \"format\",     SysFormatCmd,    1, -1, \"format:string, ...\", .help=\"Printf style formatting: adds %q and %S\", .retType=(uint)JSI_TT_STRING },",
          "5073:     { \"import\",     SysImportCmd,    1,  2, \"file:string, options:object=void\",  .help=\"Same as source with {import:true}\", .retType=(uint)JSI_TT_ANY, .flags=0, .info=0, .opts=SourceOptions},",
          "5074:     { \"isFinite\",   isFiniteCmd,     1,  1, \"val\", .help=\"Return true if is a finite number\", .retType=(uint)JSI_TT_BOOLEAN },",
          "5075:     { \"isMain\",     InfoIsMainCmd,   0,  0, \"\", .help=\"Return true if current script was the main script invoked from command-line\", .retType=(uint)JSI_TT_BOOLEAN },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5090:     { \"getOpts\",    SysGetOptsCmd,   2,  3, \"options:object, conf:object, self:object\", .help=\"Get options\", .retType=(uint)JSI_TT_OBJECT, .flags=0},",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "5080:     { \"log\",        SysLogCmd,       1, -1, \"val, ...\", .help=\"Same as puts, but includes file:line\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "5081:     { \"matchObj\",   SysMatchObjCmd,  1,  4, \"obj:object, match:string=void, partial=false, noerror=false\", .help=\"Validate that object matches given name:type string. With single arg returns generated string\", .retType=(uint)JSI_TT_BOOLEAN|JSI_TT_STRING },",
          "5082:     { \"module\",     SysModuleCmd,    1,  3, \"cmd:string|function, version:number|string=1, options:object=void\", .help=\"Same as provide, but will invoke cmd if isMain is true\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=0, .opts=jsiModuleOptions },",
          "5084:     { \"moduleRun\",  SysModuleRunCmd, 1,  2, \"cmd:string|function, args:array=undefined\", .help=\"Invoke named module with given args or command-line args\", .retType=(uint)JSI_TT_ANY},",
          "5085:     { \"noOp\",       jsi_NoOpCmd,     0, -1, \"\", .help=\"A No-Op. A zero overhead command call that is useful for debugging\" },",
          "5086:     { \"parseInt\",   parseIntCmd,     1,  2, \"val:any, base:number=10\", .help=\"Convert string to an integer\", .retType=(uint)JSI_TT_NUMBER },",
          "5087:     { \"parseFloat\", parseFloatCmd,   1,  1, \"val\", .help=\"Convert string to a double\", .retType=(uint)JSI_TT_NUMBER },",
          "5089:     { \"printf\",     SysPrintfCmd,    1, -1, \"format:string, ...\", .help=\"Formatted output to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "5090:     { \"provide\",    SysProvideCmd,   0,  3, \"cmd:string|function=void, version:number|string=1, options:object=void\", .help=\"Make a package available for use by require\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=0, .opts=jsiModuleOptions  },",
          "5091:     { \"puts\",       SysPutsCmd,      1, -1, \"val:any, ...\", .help=\"Output one or more values to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_puts },",
          "",
          "[Removed Lines]",
          "5083:     { \"moduleOpts\", SysModuleOptsCmd,1,  3, \"options:object, self:object|userobj=void, conf:object|null|undefined=void\", .help=\"Parse module options\", .retType=(uint)JSI_TT_OBJECT, .flags=0},",
          "5088:     { \"parseOpts\",  SysParseOptsCmd, 3,  3, \"self:object|userobj, options:object, conf:object|null|undefined\", .help=\"Parse module options: similar to moduleOpts but arg order different and no freeze\", .retType=(uint)JSI_TT_OBJECT, .flags=0},",
          "",
          "[Added Lines]",
          "5101:     { \"moduleOpts\", SysModuleOptsCmd,1,  3, \"options:object, self:object|userobj=void, conf:object|null|undefined=void\", .help=\"Parse module options\", .retType=(uint)JSI_TT_OBJECT},",
          "5106:     { \"parseOpts\",  SysParseOptsCmd, 3,  3, \"self:object|userobj, options:object, conf:object|null|undefined\", .help=\"Parse module options: similar to moduleOpts but arg order different and no freeze\", .retType=(uint)JSI_TT_OBJECT, .flags=JSI_OPT_DEPRECATED},",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1018:     bool time;    // Prefix with time",
          "1019:     bool date;    // Prefix with date",
          "1020:     bool before;  // Print file:line before message instead of at end.",
          "1021:     bool isUTC;",
          "1022:     const char* timeFmt;",
          "1023:     Jsi_Value *chan;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1021:     bool capture; // Capture first error.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1505: extern Jsi_RC jsi_GetterCall(Jsi_Interp *interp, Jsi_HashEntry *hPtr, Jsi_Value **vres, Jsi_Value *_this, int flags);",
          "1506: extern bool jsi_isDebugKey(const char *key);",
          "1507: extern Jsi_TreeEntry *jsi_TreeObjSetValue(Jsi_Obj *obj, const char *key, Jsi_Value *val, int isstrkey, bool unique);",
          "1509: #if !defined(_JSI_MEMCLEAR) && defined(JSI_MEM_DEBUG)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1509: extern const char* jsiValueGetDString(Jsi_Interp *interp, Jsi_Value* v, Jsi_DString *dStr, int quote, int indent);",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:     JSI_OPT(BOOL,   jsi_LogOptions, before,  .help=\"Output file:line before message string\" ),",
          "50:     JSI_OPT(BOOL,   jsi_LogOptions, isUTC,   .help=\"Time is to be UTC\" ),",
          "51:     JSI_OPT(STRKEY, jsi_LogOptions, timeFmt, .help=\"A format string to use with strftime\" ),",
          "52:     JSI_OPT(USEROBJ,jsi_LogOptions, chan,    .help=\"Channel to send output to\", .flags=0, .custom=0, .data=(void*)\"Channel\" ),",
          "53:     JSI_OPT_END(jsi_LogOptions, .help=\"Interp options for logging\")",
          "54: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:     JSI_OPT(BOOL,   jsi_LogOptions, capture, .help=\"Capture first error\" ),",
          "",
          "---------------"
        ],
        "src/jsiJSON.c||src/jsiJSON.c": [
          "File: src/jsiJSON.c -> src/jsiJSON.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "443: static Jsi_RC JSONStringifyCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "444:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "445: {",
          "447:     Jsi_Value *jsv = Jsi_ValueArrayIndex(interp, args, 1);",
          "450:     int quote = JSI_OUTPUT_JSON;",
          "451:     if (strict) quote|=JSI_JSON_STRICT;",
          "452:     Jsi_DString dStr = {};",
          "453:     Jsi_Value *arg = Jsi_ValueArrayIndex(interp, args, 0);",
          "455:         return JSI_ERROR;",
          "456:     Jsi_ValueFromDS(interp, &dStr, ret);",
          "457:     return JSI_OK;",
          "",
          "[Removed Lines]",
          "446:     bool strict = 1;",
          "448:     if (jsv && Jsi_ValueGetBoolean(interp, jsv, &strict) != JSI_OK)",
          "449:         return Jsi_LogError(\"Expected boolean\");",
          "454:     if (!Jsi_ValueGetDString(interp, arg, &dStr, quote))",
          "",
          "[Added Lines]",
          "446:     bool strict = 1, fmt = 0;",
          "447:     int indent = 2;",
          "448:     Jsi_Number num;",
          "450:     Jsi_Value *jsi = Jsi_ValueArrayIndex(interp, args, 2);",
          "451:     if (jsv) {",
          "452:         if (Jsi_ValueIsNull(interp, jsv))",
          "453:             fmt = 1;",
          "454:         else if (Jsi_ValueGetBoolean(interp, jsv, &strict) != JSI_OK)",
          "455:             return Jsi_LogError(\"Expected boolean|null\");",
          "456:     }",
          "457:     if (jsi) {",
          "458:         if (Jsi_ValueGetNumber(interp, jsi, &num) != JSI_OK)",
          "459:             return Jsi_LogError(\"Expected number\");",
          "460:         fmt = 1;",
          "461:         indent = num;",
          "462:     }",
          "465:     if (fmt) quote|=JSI_JSON_FORMAT;",
          "468:     if (!jsiValueGetDString(interp, arg, &dStr, quote, indent))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "468: static Jsi_CmdSpec jsonCmds[] = {",
          "469:     { \"check\",      JSONCheckCmd,       1, 2, \"str:string, strict:boolean=true\", .help=\"Return true if str is JSON\", .retType=(uint)JSI_TT_BOOLEAN },",
          "470:     { \"parse\",      JSONParseCmd,       1, 2, \"str:string, strict:boolean=true\", .help=\"Parse JSON and return js\", .retType=(uint)JSI_TT_ANY },",
          "472:     { NULL, 0,0,0,0, .help=\"Commands for handling JSON data\" }",
          "473: };",
          "",
          "[Removed Lines]",
          "471:     { \"stringify\",  JSONStringifyCmd,   1, 2, \"value:any,  strict:boolean=true\", .help=\"Return JSON from a js object\", .retType=(uint)JSI_TT_STRING },",
          "",
          "[Added Lines]",
          "485:     { \"stringify\",  JSONStringifyCmd,   1, 3, \"value:any,  strict:null|boolean=true, indent:number=2\", .help=\"Return JSON from a js object\", .retType=(uint)JSI_TT_STRING },",
          "",
          "---------------"
        ],
        "src/jsiSqlite.c||src/jsiSqlite.c": [
          "File: src/jsiSqlite.c -> src/jsiSqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "715:     if( pPreStmt==0 ) {",
          "716:         int nByte;",
          "721:         if( pStmt==0 ) {",
          "722:             if( SQLITE_OK!=sqlite3_errcode(db->db) ) {",
          "",
          "[Removed Lines]",
          "718:         if( SQLITE_OK!=sqlite3_prepare_v2(db->db, zSql, -1, &pStmt, pzOut) )",
          "720:             return Jsi_LogErrorExt(\"PREPARE: %s\", sqlite3_errmsg(db->db));",
          "",
          "[Added Lines]",
          "718:         if( SQLITE_OK!=sqlite3_prepare_v2(db->db, zSql, -1, &pStmt, pzOut) ) {",
          "719:             const char *em2 = \"\", *emsg = sqlite3_errmsg(db->db);",
          "720:             if (emsg && Jsi_Strstr(emsg, \"near \\\"%\\\":\") && Jsi_Strstr(zSql, \"%v\"))",
          "721:                 em2 = \".  Note use of %v requires an \\\"obj\\\" option?\";",
          "722:             return Jsi_LogErrorExt(\"PREPARE: %s%s\", emsg, em2 );",
          "723:         }",
          "",
          "---------------"
        ],
        "src/jsiUtils.c||src/jsiUtils.c": [
          "File: src/jsiUtils.c -> src/jsiUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:         log &= (1<<maskidx);",
          "124:     return log;",
          "125: }",
          "127: static void (*logHook)(const char *buf, va_list va) = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127: void jsi_GetLineOfs(Jsi_Interp *interp, jsi_Frame* fp, int *line, int *lofs, const char** curFile) {",
          "128:     if (interp->inParse && interp->parseLine) {",
          "131:     } else if (interp->inParse && interp->parsePs) {",
          "134:     } else if (interp->curIp) {",
          "135:         if (interp->callerErr && fp && fp->parent) {",
          "136:             jsi_Frame *fptr = fp->parent;",
          "140:         } else {",
          "143:             if (*line<=0)",
          "145:         }",
          "146:     }",
          "147: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189:             && (!interp->tryList || !(interp->tryList->inCatch|interp->tryList->inFinal))) {",
          "191:             if (!interp->errMsgBuf[0]) {",
          "192:                 vsnprintf(interp->errMsgBuf, sizeof(interp->errMsgBuf), format, va);",
          "196:                 emsg = interp->errMsgBuf;",
          "197:             }",
          "198:             goto done;",
          "",
          "[Removed Lines]",
          "194:                 interp->errFile =  jsi_GetCurFile(interp);",
          "195:                 interp->errLine = (interp->curIp?interp->curIp->Line:0);",
          "",
          "[Added Lines]",
          "216:                 interp->errFile =  curFile;",
          "217:                 interp->errLine = line;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "227:             snprintf(pbuf, sizeof(pbuf), \"    (at or near \\\"%s\\\")\\n\", ss);",
          "228:     }",
          "229:     pbuf[sizeof(pbuf)-1] = 0;",
          "249:     islog = (interp->parent && interp->debugOpts.msgCallback && code != JSI_LOG_BUG);",
          "250:     Jsi_DString pStr;",
          "251:     Jsi_DSInit(&pStr);",
          "",
          "[Removed Lines]",
          "230:     if (interp->inParse && interp->parseLine) {",
          "231:         line = interp->parseLine->first_line;",
          "232:         lofs = interp->parseLine->first_column;",
          "233:     } else if (interp->inParse && interp->parsePs) {",
          "234:         line = interp->parsePs->lexer->cur_line;",
          "235:         lofs = interp->parsePs->lexer->cur_char;",
          "236:     } else if (interp->curIp) {",
          "237:         if (interp->callerErr && fp && fp->parent) {",
          "238:             jsi_Frame *fptr = fp->parent;",
          "239:             line = fptr->line;",
          "240:             lofs = 0;",
          "241:             curFile = fptr->filePtr->fileName;",
          "242:         } else {",
          "243:             line = interp->curIp->Line;",
          "244:             lofs = interp->curIp->Lofs;",
          "245:             if (line<=0)",
          "246:                 line = fp->line;",
          "247:         }",
          "248:     }",
          "",
          "[Added Lines]",
          "252:     jsi_GetLineOfs(interp, fp, &line, &lofs, &curFile);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "274:     if (logHook)",
          "275:         (*logHook)(buf, va);",
          "276:     else if (interp->subOpts.logAllowDups)",
          "277:         vfprintf(stderr, buf, va);",
          "278:     else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "281:     else if (code == JSI_LOG_ERROR && interp->logOpts.capture && !interp->errMsgBuf[0])",
          "282:         vsnprintf(interp->errMsgBuf, sizeof(interp->errMsgBuf), buf, va);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "492:     Jsi_DString *dStr;",
          "494:     int depth;",
          "495: } objwalker;",
          "497: bool Jsi_StrIsAlnum(const char *cp)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "502:     int indent;",
          "503:     int subcnt;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "655: static Jsi_RC jsiValueGetString(Jsi_Interp *interp, Jsi_Value* v, Jsi_DString *dStr, objwalker *owPtr);",
          "657: static Jsi_RC jsi_ObjectGetFmt(Jsi_Interp *interp, const char *key, Jsi_Value *v, objwalker *ow)",
          "658: {",
          "659:     Jsi_DString *dStr = ow->dStr;",
          "661:     if ((ow->quote&JSI_OUTPUT_JSON) && v && v->vt == JSI_VT_UNDEF)",
          "662:         return JSI_OK;",
          "666:         Jsi_DSAppend(dStr, \", \", NULL);",
          "667:     if (((ow->quote&JSI_OUTPUT_JSON) == 0 || (ow->quote&JSI_JSON_STRICT) == 0) && Jsi_StrIsAlnum(key)",
          "668:         && !Jsi_HashEntryFind(interp->lexkeyTbl, key))",
          "669:         Jsi_DSAppend(dStr, key, NULL);",
          "",
          "[Removed Lines]",
          "660:     int len;",
          "663:     char *cp = Jsi_DSValue(dStr);",
          "664:     len = Jsi_DSLength(dStr);",
          "665:     if (len>=2 && (cp[len-2] != '{' || cp[len-1] == '}'))",
          "",
          "[Added Lines]",
          "666: static void jsiJsonIndent(objwalker *ow) {",
          "667:     Jsi_DString *dStr = ow->dStr;",
          "668:     int i, n, ind = ow->indent;",
          "669:     if (ind<=0) ind = 2;",
          "670:     Jsi_DSAppend(dStr, \"\\n\", NULL);",
          "671:     for (i=0; i<ow->depth; i++) {",
          "672:         for (n=0; n<ind; n++)",
          "673:             Jsi_DSAppend(dStr, \" \", NULL);",
          "674:     }",
          "675: }",
          "679:     int isfmt = ow->quote&JSI_JSON_FORMAT;",
          "680:     ow->subcnt++;",
          "683:     if (ow->subcnt>1)",
          "685:     if (isfmt)",
          "686:         jsiJsonIndent(ow);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "672:         Jsi_DSAppend(dStr, \"\\\"\", key, \"\\\"\", NULL);",
          "673:     Jsi_DSAppend(dStr, \":\", NULL);",
          "675:     Jsi_RC rc = jsiValueGetString(interp, v, dStr, ow);",
          "677:     return rc;",
          "678: }",
          "",
          "[Removed Lines]",
          "674:     ow->depth++;",
          "676:     ow->depth--;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "709:         return Jsi_LogError(\"recursive ToString\");",
          "710:     int quote = owPtr->quote, len = -1, i;",
          "711:     int isjson = owPtr->quote&JSI_OUTPUT_JSON;",
          "712:     Jsi_Number num;",
          "713:     switch(v->vt) {",
          "714:         case JSI_VT_UNDEF:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "730:     int isfmt = owPtr->quote&JSI_JSON_FORMAT;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "827:                 if (!o->arr)",
          "828:                     len = Jsi_ValueGetLength(interp, v);",
          "830:                 for (i = 0; i < len; ++i) {",
          "831:                     nv = Jsi_ValueArrayIndex(interp, v, i);",
          "832:                     if (i) Jsi_DSAppend(dStr,\", \", NULL);",
          "",
          "[Removed Lines]",
          "829:                 Jsi_DSAppend(dStr,\"[\",len?\" \":\"\", NULL);",
          "",
          "[Added Lines]",
          "848:                 Jsi_DSAppend(dStr,\"[\",(len?\" \":\"\"), NULL);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "840:                     else Jsi_DSAppend(dStr, \"undefined\", NULL);",
          "841:                     owPtr->depth--;",
          "842:                 }",
          "844:             } else {",
          "845:                 int len = Jsi_TreeSize(o->tree);",
          "846:                 if (len==0 && o->getters && o->accessorSpec && (len=o->getters->numEntries)) {",
          "847:                     Jsi_HashEntry *hPtr;",
          "848:                     Jsi_HashSearch search;",
          "850:                     for (hPtr = Jsi_HashSearchFirst(o->getters, &search);",
          "851:                         hPtr != NULL && rc == JSI_OK; hPtr = Jsi_HashSearchNext(&search)) {",
          "852:                         rc = jsi_objectGetterFmt(interp, hPtr, owPtr, v);",
          "853:                     }",
          "854:                 } else {",
          "856:                     owPtr->depth++;",
          "857:                     rc = Jsi_TreeWalk(o->tree, _object_get_callback, owPtr, 0);",
          "858:                     owPtr->depth--;",
          "859:                 }",
          "861:             }",
          "862:             return rc;",
          "863:         }",
          "",
          "[Removed Lines]",
          "843:                 Jsi_DSAppend(dStr,len?\" \":\"\",\"]\", NULL);",
          "849:                     Jsi_DSAppend(dStr,\"{\",len?\" \":\"\", NULL);",
          "855:                     Jsi_DSAppend(dStr,\"{\",len?\" \":\"\", NULL);",
          "860:                 Jsi_DSAppend(dStr,len?\" \":\"\",\"}\", NULL);",
          "",
          "[Added Lines]",
          "862:                 Jsi_DSAppend(dStr,(len?\" \":\"\"),\"]\", NULL);",
          "865:                 if (len<=0) {",
          "866:                     Jsi_DSAppend(dStr, \"{}\", NULL);",
          "867:                     return rc;",
          "868:                 }",
          "869:                 Jsi_DSAppend(dStr, \"{\", (isfmt?\"\":\" \"), NULL);",
          "879:                     int oldcnt = owPtr->subcnt;",
          "880:                     owPtr->subcnt = 0;",
          "882:                     owPtr->subcnt = oldcnt;",
          "885:                 if (isfmt)",
          "886:                     jsiJsonIndent(owPtr);",
          "887:                 Jsi_DSAppend(dStr, (isfmt?\"\":\" \"), \"}\", NULL);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "870: }",
          "874: {",
          "875:     objwalker ow;",
          "876:     ow.quote = quote;",
          "877:     ow.depth = 0;",
          "878:     ow.dStr = dStr;",
          "879:     if (jsiValueGetString(interp, v, dStr, &ow) != JSI_OK)",
          "880:         return NULL;",
          "881:     return Jsi_DSValue(dStr);",
          "882: }",
          "884: char* jsi_KeyFind(Jsi_Interp *interp, const char *str, int nocreate, int *isKey)",
          "885: {",
          "886:     Jsi_MapEntry *hPtr;",
          "",
          "[Removed Lines]",
          "873: const char* Jsi_ValueGetDString(Jsi_Interp *interp, Jsi_Value* v, Jsi_DString *dStr, int quote)",
          "",
          "[Added Lines]",
          "900: const char* jsiValueGetDString(Jsi_Interp *interp, Jsi_Value* v, Jsi_DString *dStr, int quote, int indent)",
          "906:     ow.indent = indent;",
          "912: const char* Jsi_ValueGetDString(Jsi_Interp *interp, Jsi_Value* v, Jsi_DString *dStr, int quote) {",
          "913:     return jsiValueGetDString(interp, v, dStr, quote, 4);",
          "914: }",
          "",
          "---------------"
        ],
        "tools/mkref.jsi||tools/mkref.jsi": [
          "File: tools/mkref.jsi -> tools/mkref.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "139:             rv += \"|\"+cnam+\"|(\"+tblEsc(aastr)+\")\"+tblEsc(tret)+\" |\"+conhelp.map(['\\n',' '])+'|\\n';",
          "140:         }",
          "141:         if (cmds !== undefined) {",
          "142:             for (var cmd of cmds) {",
          "143:                 var namspl = cmd.split('.'), nam = namspl[namspl.length-1];",
          "144:                 tret = '';",
          "145:                 if (nam == cnam)",
          "146:                     continue;",
          "147:                 ci = Info.cmds(cnam+'.'+nam);",
          "148:                 if (ci.retType !== \"any\")",
          "149:                     tret = ':'+ci.retType;",
          "150:                 conhelp = (ci.help?ci.help+'.':'');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142:             var deprecated = (1<<17);",
          "149:                 var cflags = ci.flags;",
          "150:                 if (cflags&deprecated)",
          "151:                     continue;",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "131: var JSON = function(cmd,args) {};",
          "132: JSON.prototype.check = function(str:string, strict:boolean=true):boolean {};",
          "133: JSON.prototype.parse = function(str:string, strict:boolean=true):any {};",
          "135: var LogDebug = function(str:string|boolean,...):void {};",
          "136: var LogError = function(str:string|boolean,...):void {};",
          "137: var LogInfo = function(str:string|boolean,...):void {};",
          "",
          "[Removed Lines]",
          "134: JSON.prototype.stringify = function(value:any,  strict:boolean=true):string {};",
          "",
          "[Added Lines]",
          "134: JSON.prototype.stringify = function(value:any,  strict:null|boolean=true, indent:number=2):string {};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "271: System.prototype.exec = function(val:string, options:string|object=void):any {};",
          "272: System.prototype.exit = function(code:number=0):void {};",
          "273: System.prototype.format = function(format:string, ...):string {};",
          "274: System.prototype.import = function(file:string, options:object=void):any {};",
          "275: System.prototype.isFinite = function(val):boolean {};",
          "276: System.prototype.isMain = function():boolean {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "274: System.prototype.getOpts = function(options:object, conf:object, self:object):object {};",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "370: var exec = function(val:string, options:string|object=void):any {};",
          "371: var exit = function(code:number=0):void {};",
          "372: var format = function(format:string, ...):string {};",
          "373: var import = function(file:string, options:object=void):any {};",
          "374: var isFinite = function(val):boolean {};",
          "375: var isMain = function():boolean {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "374: var getOpts = function(options:object, conf:object, self:object):object {};",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0b439f1babf3e6a32147acefb09638a5aafea12e",
      "candidate_info": {
        "commit_hash": "0b439f1babf3e6a32147acefb09638a5aafea12e",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/0b439f1babf3e6a32147acefb09638a5aafea12e",
        "files": [
          "src/jsi.h",
          "src/jsiEval.c",
          "src/jsiFunc.c",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.0.18\": Fixes for issue #16. It is now an error to redefine or assign result of assert/LogDebug/...\n\nFossilOrigin-Name: 9f3a8079d766d1513c2e8e9f5aae19758bafbd336d40f10028088bd61983db3e",
        "before_after_code_files": [
          "src/jsi.h||src/jsi.h",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiFunc.c||src/jsiFunc.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 17",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 18",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1062: #define _JSI_BI_OP_SKIP_SUB(n) {\\",
          "1063:     ip++;\\",
          "1065:         ip++;\\",
          "1066:     continue;\\",
          "1067: }",
          "1068: #define _JSI_BI_OP_SKIP(N,n)  if (!interp->logOpts.N && !(interp->framePtr->logflag &(1<<n))) _JSI_BI_OP_SKIP_SUB(n)",
          "",
          "[Removed Lines]",
          "1064:     if (ip->logflag != n && (ip->op == OP_POP || ip->op == OP_RET || ip->op == OP_ASSIGN))\\",
          "",
          "[Added Lines]",
          "1064:     if (ip->logflag != n)  {\\",
          "1065:         if (ip->op == OP_POP) ip++; \\",
          "1066:         else if (ip->op == OP_RET || ip->op == OP_ASSIGN) { \\",
          "1067:           rc = Jsi_LogError(\"invalid use of return/= here\"); \\",
          "1069:       }}\\",
          "",
          "---------------"
        ],
        "src/jsiFunc.c||src/jsiFunc.c": [
          "File: src/jsiFunc.c -> src/jsiFunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "548:         }",
          "549:     }",
          "550:     if (name) {",
          "551:         f->name = Jsi_KeyAdd(interp, name);",
          "552:         if ((interp->typeCheck.run|interp->typeCheck.parse|interp->typeCheck.all|interp->typeCheck.funcsig)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "551:         if ((name[0] == 'a' && !Jsi_Strcmp(name,\"assert\"))",
          "552:             || (name[0] == 'L' && (!Jsi_Strcmp(name,\"LogDebug\") || !Jsi_Strcmp(name,\"LogTrace\") || !Jsi_Strcmp(name,\"LogTest\")))) {",
          "553:                 if (line)",
          "554:                     interp->parseLine = line;",
          "555:                 Jsi_LogError(\"invalid redefine of builtin: %s\", name);",
          "556:                 if (line)",
          "557:                     interp->parseLine = NULL;",
          "558:                 pstate->err_count++;",
          "559:         }",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "430ea27accd4d4ffddc946c9402e7c9064835a18",
      "candidate_info": {
        "commit_hash": "430ea27accd4d4ffddc946c9402e7c9064835a18",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/430ea27accd4d4ffddc946c9402e7c9064835a18",
        "files": [
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiCode.c",
          "src/jsiEval.c",
          "src/jsiFilesys.c",
          "src/jsiFunc.c",
          "src/jsiHash.c",
          "src/jsiInterp.c",
          "src/jsiJSON.c",
          "src/jsiMySql.c",
          "src/jsiNumber.c",
          "src/jsiOptions.c",
          "src/jsiPstate.c",
          "src/jsiRegexp.c",
          "src/jsiSqlite.c",
          "src/jsiString.c",
          "src/jsiTree.c",
          "src/jsiUtils.c",
          "src/jsiValue.c",
          "src/jsiWebSocket.c"
        ],
        "message": "Release \"3.0.7\": Fix toPrecision bug \"stack overflow #4\".\n\nFossilOrigin-Name: 6c7f0c37027d7f890b57cb38f776af39b8f81f03e60ceeb0a231a1d21e24b5de",
        "before_after_code_files": [
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiCode.c||src/jsiCode.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiFilesys.c||src/jsiFilesys.c",
          "src/jsiFunc.c||src/jsiFunc.c",
          "src/jsiHash.c||src/jsiHash.c",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiJSON.c||src/jsiJSON.c",
          "src/jsiMySql.c||src/jsiMySql.c",
          "src/jsiNumber.c||src/jsiNumber.c",
          "src/jsiOptions.c||src/jsiOptions.c",
          "src/jsiPstate.c||src/jsiPstate.c",
          "src/jsiRegexp.c||src/jsiRegexp.c",
          "src/jsiSqlite.c||src/jsiSqlite.c",
          "src/jsiString.c||src/jsiString.c",
          "src/jsiTree.c||src/jsiTree.c",
          "src/jsiUtils.c||src/jsiUtils.c",
          "src/jsiValue.c||src/jsiValue.c",
          "src/jsiWebSocket.c||src/jsiWebSocket.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c"
          ]
        }
      },
      "candidate_diff": {
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 6",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 7",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "217:     JSI_BUFSIZ=8192",
          "",
          "[Removed Lines]",
          "216:     JSI_MAX_NUMBER_STRING=50,",
          "",
          "[Added Lines]",
          "216:     JSI_MAX_NUMBER_STRING=100,",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "845:         Jsi_ObjInsert(interp, nobj, \"name\", Jsi_ValueNewStringDup(interp, name), 0);",
          "846:         Jsi_ObjInsert(interp, nobj, \"version\", Jsi_ValueNewNumber(interp, ptr->version), 0);",
          "847:         Jsi_ObjInsert(interp, nobj, \"lastReq\", Jsi_ValueNewNumber(interp, ptr->lastReq), 0);",
          "849:         jsi_VersionNormalize(ptr->version, buf, sizeof(buf));",
          "850:         Jsi_ObjInsert(interp, nobj, \"verStr\", Jsi_ValueNewStringDup(interp, buf), 0);",
          "851:         const char *cp = (ptr->loadFile?ptr->loadFile:\"\");",
          "",
          "[Removed Lines]",
          "848:         char buf[200];",
          "",
          "[Added Lines]",
          "848:         char buf[JSI_MAX_NUMBER_STRING*2];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1192:     Jsi_Value *vres;",
          "1193:     Jsi_Obj  *ores = Jsi_ObjNew(interp);",
          "1194:     Jsi_Value *nnv;",
          "1197:     vres = Jsi_ValueMakeObject(interp, NULL, ores);",
          "",
          "[Removed Lines]",
          "1195:     char *val, nam[200];",
          "",
          "[Added Lines]",
          "1195:     char *val, nam[JSI_BUFSIZ/2];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2700:     }",
          "2701:     if (bp.line<=0 && !bp.func)",
          "2702:         return Jsi_LogError(\"bad number\");",
          "2704:     bp.id = ++interp->debugOpts.breakIdx;",
          "2705:     bp.enabled = 1;",
          "2706:     snprintf(nbuf, sizeof(nbuf), \"%d\", bp.id);",
          "",
          "[Removed Lines]",
          "2703:     char nbuf[100];",
          "",
          "[Added Lines]",
          "2703:     char nbuf[JSI_MAX_NUMBER_STRING];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2718:     if (interp->breakpointHash)",
          "2719:     {",
          "2720:         int num;",
          "2722:         if (Jsi_GetIntFromValue(interp, val, &num) != JSI_OK)",
          "2723:             return Jsi_LogError(\"bad number\");",
          "",
          "[Removed Lines]",
          "2721:         char nbuf[100];",
          "",
          "[Added Lines]",
          "2721:         char nbuf[JSI_MAX_NUMBER_STRING];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2766:         return Jsi_HashKeysDump(interp, interp->breakpointHash, ret, 0);",
          "2767:     Jsi_Value *val = Jsi_ValueArrayIndex(interp, args, 0);",
          "2768:     int num;",
          "2770:     if (Jsi_GetIntFromValue(interp, val, &num) != JSI_OK)",
          "2771:         return Jsi_LogError(\"bad number\");",
          "",
          "[Removed Lines]",
          "2769:     char nbuf[100];",
          "",
          "[Added Lines]",
          "2769:     char nbuf[JSI_MAX_NUMBER_STRING];",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3800:     Jsi_Value *flag = Jsi_ValueArrayIndex(interp, args, 1);",
          "3801:     if (!val) goto bail;",
          "3802:     if (Jsi_ValueIsNumber(interp, val)) {",
          "3804:         Jsi_Number n;",
          "3805:         if (Jsi_GetNumberFromValue(interp, val, &n) != JSI_OK)",
          "3806:             goto bail;",
          "",
          "[Removed Lines]",
          "3803:         char buf[200];",
          "",
          "[Added Lines]",
          "3803:         char buf[JSI_MAX_NUMBER_STRING*2];",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3953:         if (bv)",
          "3954:             interp->timesStart = now;",
          "3955:         else {",
          "3957:             snprintf(buf, sizeof(buf), \" (times = %.6f sec)\\n\", (now-interp->timesStart));",
          "3958:             Jsi_Puts(interp, jsi_Stderr, buf, -1);",
          "3959:         }",
          "",
          "[Removed Lines]",
          "3956:             char buf[100];",
          "",
          "[Added Lines]",
          "3956:             char buf[JSI_MAX_NUMBER_STRING];",
          "",
          "---------------"
        ],
        "src/jsiCode.c||src/jsiCode.c": [
          "File: src/jsiCode.c -> src/jsiCode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "436:     if (_JSICASTINT(op->op) < 0 || op->op >= OP_LASTOP) {",
          "437:         snprintf(buf, bsiz, \"Bad opcode[%d] at %d\", op->op, currentip);",
          "438:     }",
          "440:     snprintf(nbuf, sizeof(nbuf), \"%d#%d\", currentip, op->Line);",
          "441:     snprintf(buf, bsiz, \"%-8s %s \", nbuf, jsi_op_names[op->op]);",
          "",
          "[Removed Lines]",
          "439:     char nbuf[100];",
          "",
          "[Added Lines]",
          "439:     char nbuf[JSI_MAX_NUMBER_STRING];",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "288: static const char *jsi_evalprint(Jsi_Value *v)",
          "289: {",
          "291:     if (!v)",
          "292:         return \"nil\";",
          "293:     if (v->vt == JSI_VT_NUMBER) {",
          "295:     } else if (v->vt == JSI_VT_BOOL) {",
          "297:     } else if (v->vt == JSI_VT_STRING) {",
          "299:     } else if (v->vt == JSI_VT_VARIABLE) {",
          "301:     } else if (v->vt == JSI_VT_NULL) {",
          "303:     } else if (v->vt == JSI_VT_OBJECT) {",
          "305:     } else if (v->vt == JSI_VT_UNDEF) {",
          "307:     }",
          "308:     return buf;",
          "309: }",
          "",
          "[Removed Lines]",
          "290:     static char buf[100];",
          "294:         snprintf(buf, 100, \"NUM:%\" JSI_NUMGFMT \" \", v->d.num);",
          "296:         snprintf(buf, 100, \"BOO:%d\", v->d.val);",
          "298:         snprintf(buf, 100, \"STR:'%s'\", v->d.s.str);",
          "300:         snprintf(buf, 100, \"VAR:%p\", v->d.lval);",
          "302:         snprintf(buf, 100, \"NULL\");",
          "304:         snprintf(buf, 100, \"OBJ:%p\", v->d.obj);",
          "306:         snprintf(buf, 100, \"UNDEFINED\");",
          "",
          "[Added Lines]",
          "290:     static char buf[JSI_MAX_NUMBER_STRING];",
          "294:         snprintf(buf, sizeof(buf), \"NUM:%\" JSI_NUMGFMT \" \", v->d.num);",
          "296:         snprintf(buf, sizeof(buf), \"BOO:%d\", v->d.val);",
          "298:         snprintf(buf, sizeof(buf), \"STR:'%s'\", v->d.s.str);",
          "300:         snprintf(buf, sizeof(buf), \"VAR:%p\", v->d.lval);",
          "302:         snprintf(buf, sizeof(buf), \"NULL\");",
          "304:         snprintf(buf, sizeof(buf), \"OBJ:%p\", v->d.obj);",
          "306:         snprintf(buf, sizeof(buf), \"UNDEFINED\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "403:     jsi_TryList *trylist, jsi_OpCode *ip, Jsi_OpCodes *opcodes)",
          "404: {",
          "405:     int i;",
          "407:     jsi_code_decode(interp, ip, ip - opcodes->codes, buf, sizeof(buf));",
          "408:     Jsi_Printf(interp, jsi_Stderr, \"%p: %-30.200s : THIS=%s, STACK=[\", ip, buf, jsi_evalprint(_this));",
          "409:     for (i = 0; i < interp->framePtr->Sp; ++i) {",
          "",
          "[Removed Lines]",
          "406:     char buf[200];",
          "",
          "[Added Lines]",
          "406:     char buf[JSI_MAX_NUMBER_STRING*2];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1538:                     break;",
          "1539:                 }",
          "1540:                 int bval = 0;",
          "1542:                 Jsi_Value *vv;",
          "1543:                 Jsi_Obj *obj = v->d.obj;",
          "1544:                 if (!cp) {",
          "",
          "[Removed Lines]",
          "1541:                 char nbuf[100];",
          "",
          "[Added Lines]",
          "1541:                 char nbuf[JSI_MAX_NUMBER_STRING];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2155:     Jsi_IncrRefCount(interp, fargs);",
          "2156:     rc = jsi_evalcode_sub(ps, opcodes, scope, fargs, _this, *vret);",
          "2157:     Jsi_DecrRefCount(interp, fargs);",
          "2159:         if ((interp->evalFlags&JSI_EVAL_RETURN)==0)",
          "2160:             Jsi_ValueMakeUndef(interp, vret);",
          "",
          "[Removed Lines]",
          "2158:     if (interp->didReturn == 0 && !interp->exited) {",
          "",
          "[Added Lines]",
          "2158:     if (interp->didReturn == 0 && !interp->exited && rc == JSI_OK) {",
          "",
          "---------------"
        ],
        "src/jsiFilesys.c||src/jsiFilesys.c": [
          "File: src/jsiFilesys.c -> src/jsiFilesys.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1178:     if ((str = getenv(\"HOME\")) == NULL) {",
          "1179:         struct passwd pwd, *pw;",
          "1181:         if (getpwuid_r(getuid(), &pwd, buf, sizeof(buf), &pw) == 0 && pw->pw_dir)",
          "1182:             str = pw->pw_dir;",
          "1183:     }",
          "",
          "[Removed Lines]",
          "1180:         char buf[20000];",
          "",
          "[Added Lines]",
          "1180:         char buf[JSI_BUFSIZ*3];",
          "",
          "---------------"
        ],
        "src/jsiFunc.c||src/jsiFunc.c": [
          "File: src/jsiFunc.c -> src/jsiFunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "189: Jsi_RC jsi_ArgTypeCheck(Jsi_Interp *interp, int typ,  Jsi_Value *arg, const char *p1,",
          "190:     const char *p2, int index, Jsi_Func *func, bool isdefault) {",
          "191:     Jsi_RC rc = JSI_OK;",
          "193:     idxBuf[0] = 0;",
          "194:     if (func && arg->vt == JSI_VT_UNDEF && !interp->typeCheck.noundef && index>0 && !isdefault && !(typ&JSI_TT_UNDEFINED)) {",
          "195:         snprintf(idxBuf, sizeof(idxBuf), \" arg %d\", index);",
          "",
          "[Removed Lines]",
          "192:     char idxBuf[200];",
          "",
          "[Added Lines]",
          "192:     char idxBuf[JSI_MAX_NUMBER_STRING*2];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "295:         Jsi_DString dStr = {};",
          "296:         const char *exp = jsi_typeName(interp, typ, &dStr);",
          "297:         const char *vtyp = jsi_TypeName(interp, (Jsi_ttype)atyp);",
          "299:         idxBuf[0] = 0;",
          "300:         if (index>0)",
          "301:             snprintf(idxBuf, sizeof(idxBuf), \" arg %d\", index);",
          "",
          "[Removed Lines]",
          "298:         char idxBuf[200];",
          "",
          "[Added Lines]",
          "298:         char idxBuf[JSI_MAX_NUMBER_STRING*2];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "339:     if (ss==NULL && spec == NULL)",
          "340:         return JSI_OK;",
          "341:     int i, minArgs, maxArgs, mis = 0, varargs = 0;",
          "343:     if (func->type == FC_BUILDIN) {",
          "344:         varargs =  (spec->maxArgs<0);",
          "345:         maxArgs = spec->maxArgs + func->callflags.bits.addargs;",
          "",
          "[Removed Lines]",
          "342:     char nbuf[100];",
          "",
          "[Added Lines]",
          "342:     char nbuf[JSI_MAX_NUMBER_STRING];",
          "",
          "---------------"
        ],
        "src/jsiHash.c||src/jsiHash.c": [
          "File: src/jsiHash.c -> src/jsiHash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "623:     void *key = Jsi_HashKeyGet(hPtr);",
          "624:     if (opts->keyType == JSI_KEYS_ONEWORD)",
          "625:         return Jsi_ValueNewNumber(opts->interp, (Jsi_Number)(intptr_t)key);",
          "627:     snprintf(nbuf, sizeof(nbuf), \"%p\", key);",
          "628:     return Jsi_ValueNewStringDup(opts->interp, nbuf);",
          "629: }",
          "",
          "[Removed Lines]",
          "626:     char nbuf[100];",
          "",
          "[Added Lines]",
          "626:     char nbuf[JSI_MAX_NUMBER_STRING];",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "701: Jsi_Interp* Jsi_Main(Jsi_InterpOpts *opts)",
          "702: {",
          "704:     Jsi_Interp* interp = NULL;",
          "705:     int argc = 0, first = 1;",
          "706:     char **argv = NULL;",
          "",
          "[Removed Lines]",
          "703:     int rc = 0;",
          "",
          "[Added Lines]",
          "703:     Jsi_RC rc = JSI_OK;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "929:     }",
          "930:     if (jsi_deleted) //TODO: rationalize jsi_deleted, jsi_exitCode, etc",
          "931:         return jsi_DoExit(rc==JSI_EXIT?NULL:interp, jsi_exitCode);",
          "934:         Jsi_Value *ret = Jsi_ReturnValue(interp);",
          "935:         if (!Jsi_ValueIsType(interp, ret, JSI_VT_UNDEF)) {",
          "",
          "[Removed Lines]",
          "932:     if (rc == 0) {",
          "",
          "[Added Lines]",
          "932:     if (rc == JSI_OK) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "940:         }",
          "941:     } else {",
          "942:         if (!interp->parent && !interp->isHelp)",
          "944:         return jsi_DoExit(interp, 1);",
          "945:     }",
          "",
          "[Removed Lines]",
          "943:             fputs(\"ERROR\\n\", stderr);",
          "",
          "[Added Lines]",
          "943:             fprintf(stderr, \"ERROR: %s\\n\", interp->errMsgBuf);",
          "",
          "---------------"
        ],
        "src/jsiJSON.c||src/jsiJSON.c": [
          "File: src/jsiJSON.c -> src/jsiJSON.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: static void jsonNewDString(Jsi_Interp *interp, Jsi_DString *dStr, const char* str, int len)",
          "8: {",
          "10:     const char *cp = str;",
          "11:     int ulen;",
          "",
          "[Removed Lines]",
          "9:     char buf[100], *dp = buf;",
          "",
          "[Added Lines]",
          "9:     char buf[JSI_MAX_NUMBER_STRING], *dp = buf;",
          "",
          "---------------"
        ],
        "src/jsiMySql.c||src/jsiMySql.c": [
          "File: src/jsiMySql.c -> src/jsiMySql.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1170: static void mdbEvalSetColumnJSON(MyDbEvalContext *p, int iCol, Jsi_DString *dStr) {",
          "1171:     Jsi_Interp *interp = p->jdb->interp;",
          "1173:     MysqlPrep *prep = p->prep;",
          "1174:     SqlFieldResults *field = prep->fieldResult+iCol;",
          "1175:     if (field->isnull) {",
          "",
          "[Removed Lines]",
          "1172:     char nbuf[200];",
          "",
          "[Added Lines]",
          "1172:     char nbuf[JSI_MAX_NUMBER_STRING];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1220: static void mdbEvalSetColumn(MyDbEvalContext *p, int iCol, Jsi_DString *dStr) {",
          "1223:     MysqlPrep *prep = p->prep;",
          "1224:     SqlFieldResults *field = prep->fieldResult+iCol;",
          "1225:     Jsi_Interp *interp = p->jdb->interp;",
          "",
          "[Removed Lines]",
          "1222:     char nbuf[200];",
          "",
          "[Added Lines]",
          "1222:     char nbuf[JSI_MAX_NUMBER_STRING];",
          "",
          "---------------"
        ],
        "src/jsiNumber.c||src/jsiNumber.c": [
          "File: src/jsiNumber.c -> src/jsiNumber.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "123: static Jsi_RC NumberToFixedCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "124:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "125: {",
          "127:     int prec = 0, skip = 0;",
          "128:     Jsi_Number num;",
          "129:     Jsi_Value *v;",
          "",
          "[Removed Lines]",
          "126:     char buf[100];",
          "",
          "[Added Lines]",
          "126:     char buf[JSI_MAX_NUMBER_STRING+1];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141: static Jsi_RC NumberToPrecisionCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "142:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "143: {",
          "145:     int prec = 0, skip = 0;",
          "146:     Jsi_Number num;",
          "147:     Jsi_Value *v;",
          "148:     ChkStringN(_this, funcPtr, v);",
          "149:     if (Jsi_GetIntFromValue(interp, Jsi_ValueArrayIndex(interp, args, skip), &prec) != JSI_OK)",
          "150:         return JSI_ERROR;",
          "152:     Jsi_GetDoubleFromValue(interp, v, &num);",
          "153:     snprintf(buf, sizeof(buf),\"%.*\" JSI_NUMFFMT, prec, num);",
          "154:     if (num<0)",
          "",
          "[Removed Lines]",
          "144:     char buf[100];",
          "151:     if (prec<=0) return JSI_ERROR;",
          "",
          "[Added Lines]",
          "144:     char buf[JSI_MAX_NUMBER_STRING*2];",
          "151:     if (prec<=0 || prec>JSI_MAX_NUMBER_STRING) return Jsi_LogError(\"precision must be between 1 and %d\", JSI_MAX_NUMBER_STRING);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "163: static Jsi_RC NumberToExponentialCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "164:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "165: {",
          "167:     int prec = 0, skip = 0;",
          "168:     Jsi_Number num;",
          "169:     Jsi_Value *v;",
          "",
          "[Removed Lines]",
          "166:     char buf[100];",
          "",
          "[Added Lines]",
          "166:     char buf[JSI_MAX_NUMBER_STRING+1];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "191: static Jsi_RC NumberToStringCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "192:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "193: {",
          "195:     int radix = 10, skip = 0, argc = Jsi_ValueGetLength(interp, args);",
          "196:     Jsi_Number num;",
          "197:     Jsi_Value *v;",
          "",
          "[Removed Lines]",
          "194:     char buf[500];",
          "",
          "[Added Lines]",
          "194:     char buf[JSI_MAX_NUMBER_STRING+1];",
          "",
          "---------------"
        ],
        "src/jsiOptions.c||src/jsiOptions.c": [
          "File: src/jsiOptions.c -> src/jsiOptions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1876:         if (JSI_OK != jsi_EnumToValue(interp, eSpec, outValue, outStr, (void*)&nval, flags))",
          "1877:             return JSI_ERROR;",
          "1878:     } else if (outStr) {",
          "1880:         snprintf(obuf, sizeof(obuf), \"%\" PRId64, inum);",
          "1881:         Jsi_DSAppend(outStr, obuf, NULL);",
          "1882:     } else {",
          "",
          "[Removed Lines]",
          "1879:         char obuf[100];",
          "",
          "[Added Lines]",
          "1879:         char obuf[JSI_MAX_NUMBER_STRING];",
          "",
          "---------------"
        ],
        "src/jsiPstate.c||src/jsiPstate.c": [
          "File: src/jsiPstate.c -> src/jsiPstate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "239:     l->d.fp = fp;",
          "240:     Jsi_Rewind(ps->interp, fp);",
          "241:     if (skipbang) {",
          "244:             Jsi_Rewind(ps->interp, fp);",
          "245:         }",
          "246:     }",
          "",
          "[Removed Lines]",
          "242:         char buf[1000];",
          "243:         if (Jsi_Gets(ps->interp, fp, buf, 1000) && (buf[0] != '#' || buf[1] != '!')) {",
          "",
          "[Added Lines]",
          "242:         char buf[JSI_BUFSIZ];",
          "243:         if (Jsi_Gets(ps->interp, fp, buf, sizeof(buf)) && (buf[0] != '#' || buf[1] != '!')) {",
          "",
          "---------------"
        ],
        "src/jsiRegexp.c||src/jsiRegexp.c": [
          "File: src/jsiRegexp.c -> src/jsiRegexp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "162:     int r  = regexec(reg, v, 1, &pos, regexec_flags);",
          "164:     if (r >= REG_BADPAT) {",
          "167:         regerror(r, reg, buf, sizeof(buf));",
          "168:         return Jsi_LogError(\"error while matching pattern: %s\", buf);",
          "",
          "[Removed Lines]",
          "165:         char buf[100];",
          "",
          "[Added Lines]",
          "165:         char buf[JSI_MAX_NUMBER_STRING];",
          "",
          "---------------"
        ],
        "src/jsiSqlite.c||src/jsiSqlite.c": [
          "File: src/jsiSqlite.c -> src/jsiSqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1396:     bool b;",
          "1397:     if( rc != JSI_OK) {",
          "1399:         snprintf(buf, sizeof(buf), \"error in function: %.200s\", p->zName);",
          "1400:         sqlite3_result_error(context, buf, -1);",
          "",
          "[Removed Lines]",
          "1398:         char buf[250];",
          "",
          "[Added Lines]",
          "1398:         char buf[JSI_BUFSIZ];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1761: static void dbEvalSetColumnJSON(DbEvalContext *p, int iCol, Jsi_DString *dStr) {",
          "1762:     Jsi_Interp *interp = p->jdb->interp;",
          "1765:     sqlite3_stmt *pStmt = p->pPreStmt->pStmt;",
          "",
          "[Removed Lines]",
          "1763:     char nbuf[200];",
          "",
          "[Added Lines]",
          "1763:     char nbuf[JSI_MAX_NUMBER_STRING];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1811: static void dbEvalSetColumn(DbEvalContext *p, int iCol, Jsi_DString *dStr) {",
          "1812:     Jsi_Interp *interp = p->jdb->interp;",
          "1815:     sqlite3_stmt *pStmt = p->pPreStmt->pStmt;",
          "",
          "[Removed Lines]",
          "1813:     char nbuf[200];",
          "",
          "[Added Lines]",
          "1813:     char nbuf[JSI_MAX_NUMBER_STRING];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2561: static void dbOutputHexBlob(Jsi_DString *dStr, const void *pBlob, int nBlob){",
          "2562:   int i;",
          "2564:   Jsi_DSAppend(dStr, \"X'\", NULL);",
          "2565:   for(i=0; i<nBlob; i++){ snprintf(out, sizeof(out),\"%02x\",zBlob[i]&0xff);Jsi_DSAppend(dStr, out, NULL); }",
          "2566:   Jsi_DSAppend(dStr, \"'\", NULL);",
          "",
          "[Removed Lines]",
          "2563:   char out[100], *zBlob = (char *)pBlob;",
          "",
          "[Added Lines]",
          "2563:   char out[JSI_MAX_NUMBER_STRING], *zBlob = (char *)pBlob;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4394:     DbEvalContext sEval = {};",
          "4395:     int insert = 0, replace = 0, update = 0;",
          "4397: #ifdef JSI_DB_DSTRING_SIZE",
          "4398:     JSI_DSTRING_VAR(dStr, JSI_DB_DSTRING_SIZE);",
          "4399: #else",
          "",
          "[Removed Lines]",
          "4396:     char nbuf[100], *bPtr;",
          "",
          "[Added Lines]",
          "4396:     char nbuf[JSI_MAX_NUMBER_STRING], *bPtr;",
          "",
          "---------------"
        ],
        "src/jsiString.c||src/jsiString.c": [
          "File: src/jsiString.c -> src/jsiString.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "724:         int match = regexec(regex, p, MAX_SUBREGEX, pmatch, regexec_flags);",
          "726:         if (match >= REG_BADPAT) {",
          "729:             regerror(match, regex, buf, sizeof(buf));",
          "730:             Jsi_LogError(\"error while matching pattern: %s\", buf);",
          "",
          "[Removed Lines]",
          "727:             char buf[100];",
          "",
          "[Added Lines]",
          "727:             char buf[JSI_MAX_NUMBER_STRING];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "895:             return JSI_OK;",
          "896:         }",
          "897:         if (r >= REG_BADPAT) {",
          "900:             regerror(r, reg, buf, sizeof(buf));",
          "901:             Jsi_LogError(\"error while matching pattern: %s\", buf);",
          "",
          "[Removed Lines]",
          "898:             char buf[100];",
          "",
          "[Added Lines]",
          "898:             char buf[JSI_MAX_NUMBER_STRING];",
          "",
          "---------------"
        ],
        "src/jsiTree.c||src/jsiTree.c": [
          "File: src/jsiTree.c -> src/jsiTree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "946:         int n;",
          "947:         int m;",
          "948:     } t1, t2;",
          "951:     wt = Jsi_TreeNew(interp, JSI_KEYS_ONEWORD, NULL);",
          "952:     mt = Jsi_TreeNew(interp, sizeof(struct tdata), NULL);",
          "",
          "[Removed Lines]",
          "949:     char nbuf[100];",
          "",
          "[Added Lines]",
          "949:     char nbuf[JSI_MAX_NUMBER_STRING];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1038:     void *key = Jsi_TreeKeyGet(hPtr);",
          "1039:     if (opts->keyType == JSI_KEYS_ONEWORD)",
          "1040:         return Jsi_ValueNewNumber(opts->interp, (Jsi_Number)(intptr_t)key);",
          "1042:     snprintf(nbuf, sizeof(nbuf), \"%p\", key);",
          "1043:     return Jsi_ValueNewStringDup(opts->interp, nbuf);",
          "1044: }",
          "",
          "[Removed Lines]",
          "1041:     char nbuf[100];",
          "",
          "[Added Lines]",
          "1041:     char nbuf[JSI_MAX_NUMBER_STRING];",
          "",
          "---------------"
        ],
        "src/jsiUtils.c||src/jsiUtils.c": [
          "File: src/jsiUtils.c -> src/jsiUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "626: static Jsi_RC jsiValueGetString(Jsi_Interp *interp, Jsi_Value* v, Jsi_DString *dStr, objwalker *owPtr)",
          "627: {",
          "629:     Jsi_DString eStr;",
          "630:     Jsi_DSInit(&eStr);",
          "631:     if (interp->maxDepth>0 && owPtr->depth > interp->maxDepth)",
          "",
          "[Removed Lines]",
          "628:     char buf[100], *str;",
          "",
          "[Added Lines]",
          "628:     char buf[JSI_MAX_NUMBER_STRING], *str;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "943: }",
          "945: static void jsiLNGetMatches(const char *str, linenoiseCompletions *lc) {",
          "947:     const char *cp, *fnam = \"Info.completions\";",
          "948:     int i = 0, len;",
          "949:     int rc, isfile = 0, start = 0, end = Jsi_Strlen(str);",
          "",
          "[Removed Lines]",
          "946:     char buf[1000], pre[1000], hpre[6] = {};",
          "",
          "[Added Lines]",
          "946:     char buf[JSI_BUFSIZ], pre[JSI_BUFSIZ], hpre[6] = {};",
          "",
          "---------------"
        ],
        "src/jsiValue.c||src/jsiValue.c": [
          "File: src/jsiValue.c -> src/jsiValue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "401:     assert(args->vt == JSI_VT_OBJECT);",
          "402:     if (obj->isarrlist && obj->arr)",
          "403:         return ((index < 0 || (uint)index >= obj->arrCnt) ? NULL : obj->arr[index]);",
          "405:     Jsi_NumberItoA10(index, unibuf, sizeof(unibuf));",
          "406:     v = Jsi_TreeObjGetValue(args->d.obj, unibuf, 0);",
          "407:     return v;",
          "",
          "[Removed Lines]",
          "404:     char unibuf[100];",
          "",
          "[Added Lines]",
          "404:     char unibuf[JSI_MAX_NUMBER_STRING];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "531:     if (!v)",
          "532:         goto done;",
          "533:     if (lenPtr) *lenPtr = 0;",
          "535:     switch(v->vt) {",
          "536:         case JSI_VT_STRING:",
          "537:             ntxt = v->d.s.str;",
          "",
          "[Removed Lines]",
          "534:     char unibuf[200];",
          "",
          "[Added Lines]",
          "534:     char unibuf[JSI_MAX_NUMBER_STRING*2];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1182:             if (Jsi_ValueIsString(interp, key)) {",
          "1183:                 char *kstr = Jsi_ValueString(interp, key, NULL);",
          "1184:                 if (!Jsi_Strcmp(kstr,\"call\") || !Jsi_Strcmp(kstr,\"apply\") || !Jsi_Strcmp(kstr,\"bind\")) {",
          "1186:                     snprintf(fbuf, sizeof(fbuf), \"Function.%s\", kstr);",
          "1187:                     Jsi_Value *vv = Jsi_NameLookup(interp, fbuf);",
          "1188:                     if (vv)",
          "",
          "[Removed Lines]",
          "1185:                     char fbuf[100];",
          "",
          "[Added Lines]",
          "1185:                     char fbuf[JSI_MAX_NUMBER_STRING];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1379:         }",
          "1380:         return JSI_ERROR;",
          "1381:     }",
          "1383:     Jsi_NumberItoA10(key, unibuf, sizeof(unibuf));",
          "1384:     Jsi_ObjInsert(interp, obj, unibuf, val, flags);",
          "1385:     return JSI_OK;",
          "",
          "[Removed Lines]",
          "1382:     char unibuf[100];",
          "",
          "[Added Lines]",
          "1382:     char unibuf[JSI_MAX_NUMBER_STRING];",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "208:     Jsi_DString recvBuf; // To buffer recv when recvJSON is true.",
          "209:     Jsi_Value *onClose, *onFilter, *onRecv, *onUpload, *onGet, *onUnknown, *rootdir, *headers;",
          "210:     char *lastData;",
          "212: #if (LWS_LIBRARY_VERSION_MAJOR>1)",
          "213:     char filename[PATH_MAX];",
          "214:     long file_length;",
          "",
          "[Removed Lines]",
          "211:     char key[100]; // Lookup key.",
          "",
          "[Added Lines]",
          "211:     char key[JSI_MAX_NUMBER_STRING]; // Lookup key.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "569: jsi_wsGetHeaders(jsi_wsPss *pss, struct lws *wsi, Jsi_DString* dStr, int lens[], int hmax)",
          "570: {",
          "571:     int n = 0, i = 0, nlen;",
          "573:     const char *cp;",
          "574:     while ((cp = (char*)lws_token_to_string((enum lws_token_indexes)n))) {",
          "575:         int len = lws_hdr_copy(wsi, buf, sizeof(buf), ( enum lws_token_indexes)n);",
          "",
          "[Removed Lines]",
          "572:     char buf[1000];",
          "",
          "[Added Lines]",
          "572:     char buf[JSI_BUFSIZ];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1344:     Jsi_DSFree(&sStr);",
          "1345:     if (cmdPtr->debug>1)",
          "1346:         fprintf(stderr, \"FILE: %s in %s | %s\\n\", buf, cmdPtr->curRoot, Jsi_ValueString(interp, cmdPtr->rootdir, NULL));",
          "1348:     isJsiWeb = (cpde && cmdPtr->jsiFnPattern && Jsi_GlobMatch(cmdPtr->jsiFnPattern, cpde+1, 0));",
          "1349:     bool isgzip = 0;",
          "1350:     if (!ext || !ext[1])",
          "",
          "[Removed Lines]",
          "1347:     char extBuf[100], *cpde = Jsi_Strrchr(buf, '/');",
          "",
          "[Added Lines]",
          "1347:     char extBuf[JSI_BUFSIZ], *cpde = Jsi_Strrchr(buf, '/');",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1836:         if (cmdPtr->post) {",
          "1837:             unsigned char **p = (unsigned char **)in, *end = (*p) + len;",
          "1838:             int n = 0;",
          "1840:             Jsi_ValueString(interp, cmdPtr->post, &n);",
          "1841:             snprintf(buf, sizeof(buf), \"%d\", n);",
          "",
          "[Removed Lines]",
          "1839:             char buf[100];",
          "",
          "[Added Lines]",
          "1839:             char buf[JSI_MAX_NUMBER_STRING];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2228:     case LWS_CALLBACK_CLIENT_ESTABLISHED:",
          "2229:     case LWS_CALLBACK_ESTABLISHED:",
          "2230:         if (cmdPtr->bufferPwr2>0) {",
          "2232:             snprintf(nbuf, sizeof(nbuf), \"%d\", cmdPtr->bufferPwr2);",
          "2233:             lws_set_extension_option(wsi, \"permessage-deflate\", \"rx_buf_size\", nbuf);",
          "2234:             lws_set_extension_option(wsi, \"permessage-deflate\", \"tx_buf_size\", nbuf);",
          "",
          "[Removed Lines]",
          "2231:             char nbuf[100];",
          "",
          "[Added Lines]",
          "2231:             char nbuf[JSI_MAX_NUMBER_STRING];",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2870:     const char *verStr = NULL;",
          "2871:     verStr = lws_get_library_version();",
          "2872:     if (verStr) {",
          "2874:         snprintf(buf, sizeof(buf), \"%s\", verStr);",
          "2875:         cp = Jsi_Strchr(buf, ' ');",
          "2876:         if (cp) *cp = 0;",
          "",
          "[Removed Lines]",
          "2873:         char buf[100], *cp;",
          "",
          "[Added Lines]",
          "2873:         char buf[JSI_MAX_NUMBER_STRING], *cp;",
          "",
          "---------------"
        ]
      }
    }
  ]
}