{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2c487669f74aabff30d85813461ae9877fe913a3",
      "candidate_info": {
        "commit_hash": "2c487669f74aabff30d85813461ae9877fe913a3",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/2c487669f74aabff30d85813461ae9877fe913a3",
        "files": [
          "deps/v8/build/common.gypi"
        ],
        "message": "v8: Reapply floating patches",
        "before_after_code_files": [
          "deps/v8/build/common.gypi||deps/v8/build/common.gypi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/v8/build/common.gypi||deps/v8/build/common.gypi": [
          "File: deps/v8/build/common.gypi -> deps/v8/build/common.gypi",
          "--- Hunk 1 ---",
          "[Context before]",
          "239:           'WIN32',",
          "240:         ],",
          "241:         'msvs_configuration_attributes': {",
          "243:           'IntermediateDirectory': '$(OutDir)\\\\obj\\\\$(ProjectName)',",
          "244:           'CharacterSet': '1',",
          "245:         },",
          "",
          "[Removed Lines]",
          "242:           'OutputDirectory': '<(DEPTH)\\\\build\\\\$(ConfigurationName)',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "271:         'target_conditions': [",
          "272:           ['_toolset==\"host\"', {",
          "273:             'variables': {",
          "275:             },",
          "276:             'cflags': [ '<(m32flag)' ],",
          "277:             'ldflags': [ '<(m32flag)' ],",
          "",
          "[Removed Lines]",
          "274:               'm32flag': '<!((echo | $(echo ${CXX_host:-$(which g++)}) -m32 -E - > /dev/null 2>&1) && echo -n \"-m32\" || true)',",
          "",
          "[Added Lines]",
          "273:               'm32flag': '<!((echo | $(echo ${CXX_host:-$(which g++)}) -m32 -E - > /dev/null 2>&1) && echo \"-m32\" || true)',",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "281:           }],",
          "282:           ['_toolset==\"target\"', {",
          "283:             'variables': {",
          "285:             },",
          "286:             'cflags': [ '<(m32flag)' ],",
          "287:             'ldflags': [ '<(m32flag)' ],",
          "",
          "[Removed Lines]",
          "284:               'm32flag': '<!((echo | $(echo ${CXX_target:-${CXX:-$(which g++)}}) -m32 -E - > /dev/null 2>&1) && echo -n \"-m32\" || true)',",
          "",
          "[Added Lines]",
          "283:               'm32flag': '<!((echo | $(echo ${CXX_target:-${CXX:-$(which g++)}}) -m32 -E - > /dev/null 2>&1) && echo \"-m32\" || true)',",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "324:         },",
          "325:         'conditions': [",
          "326:           ['OS==\"linux\" or OS==\"freebsd\" or OS==\"openbsd\" or OS==\"netbsd\"', {",
          "328:                         '-Wnon-virtual-dtor', '-Woverloaded-virtual' ],",
          "329:           }],",
          "330:         ],",
          "",
          "[Removed Lines]",
          "327:             'cflags': [ '-Wall', '<(werror)', '-W', '-Wno-unused-parameter',",
          "",
          "[Added Lines]",
          "326:             'cflags': [ '-Wno-unused-parameter',",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "333:         'conditions': [",
          "334:           ['OS==\"linux\" or OS==\"freebsd\" or OS==\"openbsd\" or OS==\"netbsd\" \\",
          "335:             or OS==\"android\"', {",
          "340:             'cflags': [",
          "341:               '-fdata-sections',",
          "342:               '-ffunction-sections',",
          "",
          "[Removed Lines]",
          "336:             'cflags!': [",
          "337:               '-O2',",
          "338:               '-Os',",
          "339:             ],",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9364699be194cf9175d1bc421050b17ac9875447",
      "candidate_info": {
        "commit_hash": "9364699be194cf9175d1bc421050b17ac9875447",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/9364699be194cf9175d1bc421050b17ac9875447",
        "files": [
          "src/node.cc"
        ],
        "message": "Revert \"Windows: support non-ansi command line arguments\"\n\nCommandLineToArgvW doesn't behave exactly the same as the crt, which makes it useless.\nThis reverts commit ef032cbe85b46584304c665b539b4f7561c4c26c.",
        "before_after_code_files": [
          "src/node.cc||src/node.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2032:   process->Set(String::NewSymbol(\"platform\"), String::New(PLATFORM));",
          "2062:   Local<Array> arguments = Array::New(argc - option_end_index + 1);",
          "2063:   arguments->Set(Integer::New(0), String::New(argv[0]));",
          "2064:   for (j = 1, i = option_end_index; i < argc; j++, i++) {",
          "2065:     Local<String> arg = String::New(argv[i]);",
          "2066:     arguments->Set(Integer::New(j), arg);",
          "2067:   }",
          "2070:   process->Set(String::NewSymbol(\"argv\"), arguments);",
          "",
          "[Removed Lines]",
          "2035: #ifdef _WIN32",
          "2037:   WCHAR* command_line = GetCommandLineW();",
          "2038:   if (command_line == NULL) {",
          "2039:     winapi_perror(\"GetCommandLineW\");",
          "2040:     exit(1);",
          "2041:   }",
          "2043:   int wargc = 0;",
          "2044:   WCHAR** wargv = CommandLineToArgvW(command_line, &wargc);",
          "2045:   if (wargv == NULL || wargc <= 0) {",
          "2046:     winapi_perror(\"CommandLineToArgvW\");",
          "2047:     exit(1);",
          "2048:   }",
          "2050:   assert(wargc == argc);",
          "2052:   Local<Array> arguments = Array::New(wargc - option_end_index + 1);",
          "2053:   arguments->Set(Integer::New(0), String::New(reinterpret_cast<uint16_t*>(wargv[0])));",
          "2054:   for (j = 1, i = option_end_index; i < wargc; j++, i++) {",
          "2055:     Local<String> arg = String::New(reinterpret_cast<uint16_t*>(wargv[i]));",
          "2056:     arguments->Set(Integer::New(j), arg);",
          "2057:   }",
          "2059:   LocalFree(wargv);",
          "2060: #else",
          "2068: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5e1d844f3ddfd0a8acbad4a263ae128de4b03eea",
      "candidate_info": {
        "commit_hash": "5e1d844f3ddfd0a8acbad4a263ae128de4b03eea",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/5e1d844f3ddfd0a8acbad4a263ae128de4b03eea",
        "files": [
          "deps/uv/src/win/process.c"
        ],
        "message": "uv: upgrade to 67090653",
        "before_after_code_files": [
          "deps/uv/src/win/process.c||deps/uv/src/win/process.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/src/win/process.c||deps/uv/src/win/process.c": [
          "File: deps/uv/src/win/process.c -> deps/uv/src/win/process.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "748: int uv_spawn(uv_loop_t* loop, uv_process_t* process,",
          "749:     uv_process_options_t options) {",
          "751:   wchar_t* path = NULL;",
          "752:   BOOL result;",
          "753:   wchar_t* application_path = NULL, *application = NULL, *arguments = NULL,",
          "",
          "[Removed Lines]",
          "750:   int size, err = 0, keep_child_stdio_open = 0;",
          "",
          "[Added Lines]",
          "750:   int i, size, err = 0, keep_child_stdio_open = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "850:     process->process_handle = info.hProcess;",
          "851:     process->pid = info.dwProcessId;",
          "858:     }",
          "",
          "[Removed Lines]",
          "853:     if (options.stdio_count > 0 &&",
          "854:         options.stdio[0].flags & UV_CREATE_PIPE &&",
          "855:         options.stdio[0].data.stream->type == UV_NAMED_PIPE &&",
          "856:         ((uv_pipe_t*)options.stdio[0].data.stream)->ipc) {",
          "857:       ((uv_pipe_t*)options.stdio[0].data.stream)->ipc_pid = info.dwProcessId;",
          "",
          "[Added Lines]",
          "854:     for (i = 0; i < options.stdio_count; i++) {",
          "855:       const uv_stdio_container_t* fdopt = &options.stdio[i];",
          "856:       if (fdopt->flags & UV_CREATE_PIPE &&",
          "857:           fdopt->data.stream->type == UV_NAMED_PIPE &&",
          "858:           ((uv_pipe_t*) fdopt->data.stream)->ipc) {",
          "859:         ((uv_pipe_t*) fdopt->data.stream)->ipc_pid = info.dwProcessId;",
          "860:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "93eca95aece9804d22b012cc89487f4b0064a86d",
      "candidate_info": {
        "commit_hash": "93eca95aece9804d22b012cc89487f4b0064a86d",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/93eca95aece9804d22b012cc89487f4b0064a86d",
        "files": [
          "common.gypi"
        ],
        "message": "Revert \"build: target OSX 10.5 when building on darwin\"\n\nThis reverts commit b6d6a54f8057d0adad13d4bcc11eb3f443079ddc,\nwhich fixed #3072, so we'll have to figure out another way\nto make that work.",
        "before_after_code_files": [
          "common.gypi||common.gypi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "common.gypi||common.gypi": [
          "File: common.gypi -> common.gypi",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:           'GCC_VERSION': '4.2',",
          "172:           'GCC_WARN_ABOUT_MISSING_NEWLINE': 'YES',  # -Wnewline-eof",
          "173:           'PREBINDING': 'NO',                       # No -Wl,-prebind",
          "175:           'USE_HEADERMAP': 'NO',",
          "176:           'OTHER_CFLAGS': [",
          "177:             '-fno-strict-aliasing',",
          "",
          "[Removed Lines]",
          "174:           'MACOSX_DEPLOYMENT_TARGET': '10.5',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c80abfa0e4b5ae234e53a2fc088eb8344a182820",
      "candidate_info": {
        "commit_hash": "c80abfa0e4b5ae234e53a2fc088eb8344a182820",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/c80abfa0e4b5ae234e53a2fc088eb8344a182820",
        "files": [
          "src/node_zlib.cc"
        ],
        "message": "zlib: fix `Failed to set dictionary` issue",
        "before_after_code_files": [
          "src/node_zlib.cc||src/node_zlib.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_zlib.cc||src/node_zlib.cc": [
          "File: src/node_zlib.cc -> src/node_zlib.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "322:   static void SetDictionary(ZCtx* ctx) {",
          "323:     if (ctx->dictionary_ == NULL) return;",
          "327:     switch (mode) {",
          "328:       case DEFLATE:",
          "",
          "[Removed Lines]",
          "325:     int err;",
          "",
          "[Added Lines]",
          "325:     int err = Z_OK;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "339:   }",
          "341:   static void Reset(ZCtx* ctx) {",
          "344:     switch (mode) {",
          "345:       case DEFLATE:",
          "",
          "[Removed Lines]",
          "342:     int err;",
          "",
          "[Added Lines]",
          "342:     int err = Z_OK;",
          "",
          "---------------"
        ]
      }
    }
  ]
}