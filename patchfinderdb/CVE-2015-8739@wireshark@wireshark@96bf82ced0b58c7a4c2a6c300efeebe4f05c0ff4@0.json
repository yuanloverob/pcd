{
  "cve_id": "CVE-2015-8739",
  "cve_desc": "The ipmi_fmt_udpport function in epan/dissectors/packet-ipmi.c in the IPMI dissector in Wireshark 2.0.x before 2.0.1 improperly attempts to access a packet scope, which allows remote attackers to cause a denial of service (assertion failure and application exit) via a crafted packet.",
  "repo": "wireshark/wireshark",
  "patch_hash": "96bf82ced0b58c7a4c2a6c300efeebe4f05c0ff4",
  "patch_info": {
    "commit_hash": "96bf82ced0b58c7a4c2a6c300efeebe4f05c0ff4",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/96bf82ced0b58c7a4c2a6c300efeebe4f05c0ff4",
    "files": [
      "epan/dissectors/packet-ipmi.c"
    ],
    "message": "[IPMI]  packet-scope isn't valid for use in BASE_CUSTOM functions.\n\nBug: 11831\nChange-Id: Ic4b963bf5a790c2f57b26a15f6226924f742fa55\nReviewed-on: https://code.wireshark.org/review/12340\nReviewed-by: Michael Mann <mmann78@netscape.net>",
    "before_after_code_files": [
      "epan/dissectors/packet-ipmi.c||epan/dissectors/packet-ipmi.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-ipmi.c||epan/dissectors/packet-ipmi.c": [
      "File: epan/dissectors/packet-ipmi.c -> epan/dissectors/packet-ipmi.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1280: void",
      "1281: ipmi_fmt_udpport(gchar *s, guint32 v)",
      "1282: {",
      "1284: }",
      "1286: void",
      "",
      "[Removed Lines]",
      "1283:  g_snprintf(s, ITEM_LABEL_LENGTH, \"%s (%d)\", udp_port_to_display(wmem_packet_scope(), v), v);",
      "",
      "[Added Lines]",
      "1283:  gchar* port_str = udp_port_to_display(NULL, v);",
      "1284:  g_snprintf(s, ITEM_LABEL_LENGTH, \"%s (%d)\", port_str, v);",
      "1285:  wmem_free(NULL, port_str);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "74612cb0c2e593f7100b693522268f44613512fe",
      "candidate_info": {
        "commit_hash": "74612cb0c2e593f7100b693522268f44613512fe",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/74612cb0c2e593f7100b693522268f44613512fe",
        "files": [
          "epan/dissectors/packet-ipmi.c"
        ],
        "message": "[IPMI]  packet-scope isn't valid for use in BASE_CUSTOM functions.\n\nBug: 11831\nChange-Id: Ic4b963bf5a790c2f57b26a15f6226924f742fa55\nReviewed-on: https://code.wireshark.org/review/12340\nReviewed-by: Michael Mann <mmann78@netscape.net>\n(cherry picked from commit 96bf82ced0b58c7a4c2a6c300efeebe4f05c0ff4)\nReviewed-on: https://code.wireshark.org/review/12348",
        "before_after_code_files": [
          "epan/dissectors/packet-ipmi.c||epan/dissectors/packet-ipmi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-ipmi.c||epan/dissectors/packet-ipmi.c"
          ],
          "candidate": [
            "epan/dissectors/packet-ipmi.c||epan/dissectors/packet-ipmi.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-ipmi.c||epan/dissectors/packet-ipmi.c": [
          "File: epan/dissectors/packet-ipmi.c -> epan/dissectors/packet-ipmi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1280: void",
          "1281: ipmi_fmt_udpport(gchar *s, guint32 v)",
          "1282: {",
          "1284: }",
          "1286: void",
          "",
          "[Removed Lines]",
          "1283:  g_snprintf(s, ITEM_LABEL_LENGTH, \"%s (%d)\", udp_port_to_display(wmem_packet_scope(), v), v);",
          "",
          "[Added Lines]",
          "1283:  gchar* port_str = udp_port_to_display(NULL, v);",
          "1284:  g_snprintf(s, ITEM_LABEL_LENGTH, \"%s (%d)\", port_str, v);",
          "1285:  wmem_free(NULL, port_str);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "22096781499c7159ff504f7baa743d295aad06bc",
      "candidate_info": {
        "commit_hash": "22096781499c7159ff504f7baa743d295aad06bc",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/22096781499c7159ff504f7baa743d295aad06bc",
        "files": [
          "debian/libwireshark0.symbols",
          "epan/addr_resolv.c",
          "epan/addr_resolv.h",
          "epan/column-utils.c",
          "epan/conversation_table.c",
          "epan/conversation_table.h",
          "epan/dissectors/packet-dccp.c",
          "epan/dissectors/packet-dns.c",
          "epan/dissectors/packet-dvbci.c",
          "epan/dissectors/packet-ipmi.c",
          "epan/dissectors/packet-nt-tpcp.c",
          "epan/dissectors/packet-rx.c",
          "epan/dissectors/packet-sctp.c",
          "epan/dissectors/packet-tcp.c",
          "epan/dissectors/packet-udp.c",
          "epan/dissectors/packet-xmcp.c",
          "ui/cli/tap-endpoints.c",
          "ui/cli/tap-iousers.c",
          "ui/gtk/conversations_table.c",
          "ui/gtk/follow_ssl.c",
          "ui/gtk/follow_tcp.c",
          "ui/gtk/follow_udp.c",
          "ui/gtk/hostlist_table.c",
          "ui/qt/conversation_dialog.cpp",
          "ui/qt/endpoint_dialog.cpp",
          "ui/qt/follow_stream_dialog.cpp"
        ],
        "message": "ep_<protocol>_port_to_display -> <protocol>_port_to_display\n\nAdjust any other ep_ related APIs related to the transition.\n\nChange-Id: I961b371c2c4bda557e0f1817705c27eef0dae66c\nReviewed-on: https://code.wireshark.org/review/6388\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "debian/libwireshark0.symbols||debian/libwireshark0.symbols",
          "epan/addr_resolv.c||epan/addr_resolv.c",
          "epan/addr_resolv.h||epan/addr_resolv.h",
          "epan/column-utils.c||epan/column-utils.c",
          "epan/conversation_table.c||epan/conversation_table.c",
          "epan/conversation_table.h||epan/conversation_table.h",
          "epan/dissectors/packet-dccp.c||epan/dissectors/packet-dccp.c",
          "epan/dissectors/packet-dns.c||epan/dissectors/packet-dns.c",
          "epan/dissectors/packet-dvbci.c||epan/dissectors/packet-dvbci.c",
          "epan/dissectors/packet-ipmi.c||epan/dissectors/packet-ipmi.c",
          "epan/dissectors/packet-nt-tpcp.c||epan/dissectors/packet-nt-tpcp.c",
          "epan/dissectors/packet-rx.c||epan/dissectors/packet-rx.c",
          "epan/dissectors/packet-sctp.c||epan/dissectors/packet-sctp.c",
          "epan/dissectors/packet-tcp.c||epan/dissectors/packet-tcp.c",
          "epan/dissectors/packet-udp.c||epan/dissectors/packet-udp.c",
          "epan/dissectors/packet-xmcp.c||epan/dissectors/packet-xmcp.c",
          "ui/cli/tap-endpoints.c||ui/cli/tap-endpoints.c",
          "ui/cli/tap-iousers.c||ui/cli/tap-iousers.c",
          "ui/gtk/conversations_table.c||ui/gtk/conversations_table.c",
          "ui/gtk/follow_ssl.c||ui/gtk/follow_ssl.c",
          "ui/gtk/follow_tcp.c||ui/gtk/follow_tcp.c",
          "ui/gtk/follow_udp.c||ui/gtk/follow_udp.c",
          "ui/gtk/hostlist_table.c||ui/gtk/hostlist_table.c",
          "ui/qt/conversation_dialog.cpp||ui/qt/conversation_dialog.cpp",
          "ui/qt/endpoint_dialog.cpp||ui/qt/endpoint_dialog.cpp",
          "ui/qt/follow_stream_dialog.cpp||ui/qt/follow_stream_dialog.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-ipmi.c||epan/dissectors/packet-ipmi.c"
          ],
          "candidate": [
            "epan/dissectors/packet-ipmi.c||epan/dissectors/packet-ipmi.c"
          ]
        }
      },
      "candidate_diff": {
        "debian/libwireshark0.symbols||debian/libwireshark0.symbols": [
          "File: debian/libwireshark0.symbols -> debian/libwireshark0.symbols",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:  build_follow_index_filter@Base 1.12.0~rc1",
          "76:  byte_array_dup@Base 1.9.1",
          "77:  byte_array_equal@Base 1.9.1",
          "79:  bytes_to_str@Base 1.99.2",
          "80:  bytestring_to_str@Base 1.9.1",
          "81:  call_ber_oid_callback@Base 1.9.1",
          "",
          "[Removed Lines]",
          "78:  bytes_to_ep_str@Base 1.12.0~rc1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "443:  ep_alloc0@Base 1.9.1",
          "444:  ep_alloc@Base 1.9.1",
          "445:  ep_memdup@Base 1.9.1",
          "447:  ep_strbuf_append_printf@Base 1.9.1",
          "448:  ep_strbuf_new@Base 1.9.1",
          "449:  ep_strbuf_printf@Base 1.9.1",
          "",
          "[Removed Lines]",
          "446:  ep_sctp_port_to_display@Base 1.12.0~rc1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "453:  ep_strdup_vprintf@Base 1.9.1",
          "454:  ep_strndup@Base 1.9.1",
          "455:  ep_strsplit@Base 1.9.1",
          "458:  epan_cleanup@Base 1.9.1",
          "459:  epan_dissect_cleanup@Base 1.9.1",
          "460:  epan_dissect_fake_protocols@Base 1.9.1",
          "",
          "[Removed Lines]",
          "456:  ep_tcp_port_to_display@Base 1.12.0~rc1",
          "457:  ep_udp_port_to_display@Base 1.12.0~rc1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1128:  scsi_sbc_vals_ext@Base 1.12.0~rc1",
          "1129:  scsi_smc_vals_ext@Base 1.12.0~rc1",
          "1130:  scsi_ssc_vals_ext@Base 1.12.0~rc1",
          "1131:  se_alloc0@Base 1.9.1",
          "1132:  se_alloc@Base 1.9.1",
          "1133:  set_actual_length@Base 1.9.1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1127:  sctp_port_to_display@Base 1.99.2",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1211:  tap_listeners_require_dissection@Base 1.9.1",
          "1212:  tap_queue_packet@Base 1.9.1",
          "1213:  tcp_dissect_pdus@Base 1.9.1",
          "1214:  tfs_accept_reject@Base 1.9.1",
          "1215:  tfs_accepted_not_accepted@Base 1.9.1",
          "1216:  tfs_ack_nack@Base 1.9.1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1211:  tcp_port_to_display@Base 1.99.2",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1435:  uat_remove_record_idx@Base 1.9.1",
          "1436:  uat_save@Base 1.9.1",
          "1437:  uat_swap@Base 1.9.1",
          "1438:  union_of_tap_listener_flags@Base 1.9.1",
          "1439:  update_crc10_by_bytes_tvb@Base 1.99.0",
          "1440:  uri_str_to_bytes@Base 1.9.1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1436:  udp_port_to_display@Base 1.99.2",
          "",
          "---------------"
        ],
        "epan/addr_resolv.c||epan/addr_resolv.c": [
          "File: epan/addr_resolv.c -> epan/addr_resolv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "603: static gchar *",
          "605: {",
          "609:     guint32_to_str_buf(port, bp, MAXNAMELEN);",
          "",
          "[Removed Lines]",
          "604: ep_utoa(guint port)",
          "606:     gchar *bp = (gchar *)ep_alloc(MAXNAMELEN);",
          "",
          "[Added Lines]",
          "604: wmem_utoa(wmem_allocator_t *allocator, guint port)",
          "606:     gchar *bp = (gchar *)wmem_alloc(allocator, MAXNAMELEN);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2834: }",
          "2836: gchar *",
          "2838: {",
          "2840:     if (!gbl_resolv_flags.transport_name) {",
          "2842:     }",
          "2844:     return serv_name_lookup(port, PT_UDP);",
          "2848: gchar *",
          "2850: {",
          "2852:     if (!gbl_resolv_flags.transport_name) {",
          "2854:     }",
          "2856:     return serv_name_lookup(port, PT_DCCP);",
          "2860: gchar *",
          "2862: {",
          "2864:     if (!gbl_resolv_flags.transport_name) {",
          "2866:     }",
          "2868:     return serv_name_lookup(port, PT_TCP);",
          "2872: gchar *",
          "2874: {",
          "2876:     if (!gbl_resolv_flags.transport_name) {",
          "2878:     }",
          "2880:     return serv_name_lookup(port, PT_SCTP);",
          "2884: const gchar *",
          "2885: address_to_display(wmem_allocator_t *allocator, const address *addr)",
          "",
          "[Removed Lines]",
          "2837: ep_udp_port_to_display(guint port)",
          "2841:         return ep_utoa(port);",
          "2849: ep_dccp_port_to_display(guint port)",
          "2853:         return ep_utoa(port);",
          "2861: ep_tcp_port_to_display(guint port)",
          "2865:         return ep_utoa(port);",
          "2873: ep_sctp_port_to_display(guint port)",
          "2877:         return ep_utoa(port);",
          "",
          "[Added Lines]",
          "2837: udp_port_to_display(wmem_allocator_t *allocator, guint port)",
          "2841:         return wmem_utoa(allocator, port);",
          "2849: dccp_port_to_display(wmem_allocator_t *allocator, guint port)",
          "2853:         return wmem_utoa(allocator, port);",
          "2861: tcp_port_to_display(wmem_allocator_t *allocator, guint port)",
          "2865:         return wmem_utoa(allocator, port);",
          "2873: sctp_port_to_display(wmem_allocator_t *allocator, guint port)",
          "2877:         return wmem_utoa(allocator, port);",
          "",
          "---------------"
        ],
        "epan/addr_resolv.h||epan/addr_resolv.h": [
          "File: epan/addr_resolv.h -> epan/addr_resolv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "115: WS_DLL_PUBLIC gchar *ep_udp_port_to_display(guint port);",
          "121: WS_DLL_PUBLIC gchar *ep_tcp_port_to_display(guint port);",
          "127: extern gchar *ep_dccp_port_to_display(guint port);",
          "133: WS_DLL_PUBLIC gchar *ep_sctp_port_to_display(guint port);",
          "",
          "[Added Lines]",
          "115: WS_DLL_PUBLIC gchar *udp_port_to_display(wmem_allocator_t *allocator, guint port);",
          "121: WS_DLL_PUBLIC gchar *tcp_port_to_display(wmem_allocator_t *allocator, guint port);",
          "127: extern gchar *dccp_port_to_display(wmem_allocator_t *allocator, guint port);",
          "133: WS_DLL_PUBLIC gchar *sctp_port_to_display(wmem_allocator_t *allocator, guint port);",
          "",
          "---------------"
        ],
        "epan/column-utils.c||epan/column-utils.c": [
          "File: epan/column-utils.c -> epan/column-utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1946:   switch (pinfo->ptype) {",
          "1947:   case PT_SCTP:",
          "1948:     if (is_res)",
          "1950:     else",
          "1951:       guint32_to_str_buf(port, pinfo->cinfo->col_buf[col], COL_MAX_LEN);",
          "1952:     break;",
          "",
          "[Removed Lines]",
          "1949:       g_strlcpy(pinfo->cinfo->col_buf[col], ep_sctp_port_to_display(port), COL_MAX_LEN);",
          "",
          "[Added Lines]",
          "1949:       g_strlcpy(pinfo->cinfo->col_buf[col], sctp_port_to_display(pinfo->pool, port), COL_MAX_LEN);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1954:   case PT_TCP:",
          "1955:     guint32_to_str_buf(port, pinfo->cinfo->col_expr.col_expr_val[col], COL_MAX_LEN);",
          "1956:     if (is_res)",
          "1958:     else",
          "1959:       g_strlcpy(pinfo->cinfo->col_buf[col], pinfo->cinfo->col_expr.col_expr_val[col], COL_MAX_LEN);",
          "1960:     if (is_src)",
          "",
          "[Removed Lines]",
          "1957:       g_strlcpy(pinfo->cinfo->col_buf[col], ep_tcp_port_to_display(port), COL_MAX_LEN);",
          "",
          "[Added Lines]",
          "1957:       g_strlcpy(pinfo->cinfo->col_buf[col], tcp_port_to_display(pinfo->pool, port), COL_MAX_LEN);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1966:   case PT_UDP:",
          "1967:     guint32_to_str_buf(port, pinfo->cinfo->col_expr.col_expr_val[col], COL_MAX_LEN);",
          "1968:     if (is_res)",
          "1970:     else",
          "1971:       g_strlcpy(pinfo->cinfo->col_buf[col], pinfo->cinfo->col_expr.col_expr_val[col], COL_MAX_LEN);",
          "1972:     if (is_src)",
          "",
          "[Removed Lines]",
          "1969:       g_strlcpy(pinfo->cinfo->col_buf[col], ep_udp_port_to_display(port), COL_MAX_LEN);",
          "",
          "[Added Lines]",
          "1969:       g_strlcpy(pinfo->cinfo->col_buf[col], udp_port_to_display(pinfo->pool, port), COL_MAX_LEN);",
          "",
          "---------------"
        ],
        "epan/conversation_table.c||epan/conversation_table.c": [
          "File: epan/conversation_table.c -> epan/conversation_table.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "341:     }",
          "342: }",
          "345: {",
          "347:     if(!resolve_names) ptype = PT_NONE;",
          "349:     switch(ptype) {",
          "350:     case(PT_TCP):",
          "352:     case(PT_UDP):",
          "354:     case(PT_SCTP):",
          "356:     default:",
          "358:     }",
          "359: }",
          "",
          "[Removed Lines]",
          "344: const char *get_conversation_port(guint32 port, port_type ptype, gboolean resolve_names)",
          "351:         return ep_tcp_port_to_display(port);",
          "353:         return ep_udp_port_to_display(port);",
          "355:         return ep_sctp_port_to_display(port);",
          "357:         return ep_strdup_printf(\"%d\", port);",
          "",
          "[Added Lines]",
          "344: const char *get_conversation_port(wmem_allocator_t *allocator, guint32 port, port_type ptype, gboolean resolve_names)",
          "351:         return tcp_port_to_display(allocator, port);",
          "353:         return udp_port_to_display(allocator, port);",
          "355:         return sctp_port_to_display(allocator, port);",
          "357:         return wmem_strdup_printf(allocator, \"%d\", port);",
          "",
          "---------------"
        ],
        "epan/conversation_table.h||epan/conversation_table.h": [
          "File: epan/conversation_table.h -> epan/conversation_table.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "269: WS_DLL_PUBLIC const char *get_conversation_port(guint32 port, port_type ptype, gboolean resolve_names);",
          "",
          "[Added Lines]",
          "269: WS_DLL_PUBLIC const char *get_conversation_port(wmem_allocator_t *allocator, guint32 port, port_type ptype, gboolean resolve_names);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-dccp.c||epan/dissectors/packet-dccp.c": [
          "File: epan/dissectors/packet-dccp.c -> epan/dissectors/packet-dccp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "650:     proto_tree_add_uint_format_value(dccp_tree, hf_dccp_srcport, tvb,",
          "651:                                      offset, 2, dccph->sport,",
          "652:                                      \"%s (%u)\",",
          "654:                                      dccph->sport);",
          "655:     if (dccp_summary_in_tree) {",
          "656:         proto_item_append_text(dccp_item, \", Src Port: %s (%u)\",",
          "658:     }",
          "659:     col_add_fstr(pinfo->cinfo, COL_INFO,",
          "661:     hidden_item =",
          "662:         proto_tree_add_uint(dccp_tree, hf_dccp_port, tvb, offset, 2,",
          "663:                             dccph->sport);",
          "",
          "[Removed Lines]",
          "653:                                      ep_dccp_port_to_display(dccph->sport),",
          "657:                                ep_dccp_port_to_display(dccph->sport), dccph->sport);",
          "660:                  \"%s \", ep_dccp_port_to_display(dccph->sport));",
          "",
          "[Added Lines]",
          "653:                                      dccp_port_to_display(wmem_packet_scope(), dccph->sport),",
          "657:                                dccp_port_to_display(wmem_packet_scope(), dccph->sport), dccph->sport);",
          "660:                  \"%s \", dccp_port_to_display(wmem_packet_scope(), dccph->sport));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "668:     proto_tree_add_uint_format_value(dccp_tree, hf_dccp_dstport, tvb,",
          "669:                                      offset, 2, dccph->dport,",
          "670:                                      \"%s (%u)\",",
          "672:                                      dccph->dport);",
          "673:     if (dccp_summary_in_tree) {",
          "674:         proto_item_append_text(dccp_item, \", Dst Port: %s (%u)\",",
          "676:     }",
          "677:     col_append_fstr(pinfo->cinfo, COL_INFO, \" > %s\",",
          "679:     hidden_item =",
          "680:         proto_tree_add_uint(dccp_tree, hf_dccp_port, tvb, offset, 2,",
          "681:                             dccph->dport);",
          "",
          "[Removed Lines]",
          "671:                                      ep_dccp_port_to_display(dccph->dport),",
          "675:                                ep_dccp_port_to_display(dccph->dport), dccph->dport);",
          "678:                     ep_dccp_port_to_display(dccph->dport));",
          "",
          "[Added Lines]",
          "671:                                      dccp_port_to_display(wmem_packet_scope(), dccph->dport),",
          "675:                                dccp_port_to_display(wmem_packet_scope(), dccph->dport), dccph->dport);",
          "678:                     dccp_port_to_display(wmem_packet_scope(), dccph->dport));",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-dns.c||epan/dissectors/packet-dns.c": [
          "File: epan/dissectors/packet-dns.c -> epan/dissectors/packet-dns.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2008:               switch (protocol) {",
          "2010:                 case IP_PROTO_TCP:",
          "2012:                   break;",
          "2014:                 case IP_PROTO_UDP:",
          "2016:                   break;",
          "2018:                 default:",
          "",
          "[Removed Lines]",
          "2011:                   wmem_strbuf_append(bitnames, ep_tcp_port_to_display(port_num));",
          "2015:                   wmem_strbuf_append(bitnames, ep_udp_port_to_display(port_num));",
          "",
          "[Added Lines]",
          "2011:                   wmem_strbuf_append(bitnames, tcp_port_to_display(wmem_packet_scope(), port_num));",
          "2015:                   wmem_strbuf_append(bitnames, udp_port_to_display(wmem_packet_scope(), port_num));",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-dvbci.c||epan/dissectors/packet-dvbci.c": [
          "File: epan/dissectors/packet-dvbci.c -> epan/dissectors/packet-dvbci.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1888:                     tvb, offset, 1, ENC_BIG_ENDIAN);",
          "1889:         offset ++;",
          "1890:         if (port_item) {",
          "1892:                 proto_item_append_text(port_item, \" (%s)\",",
          "1894:             }",
          "1896:                 proto_item_append_text(port_item, \" (%s)\",",
          "1898:             }",
          "1899:         }",
          "1900:         store_lsc_msg_dissector(circuit, ip_proto, port);",
          "",
          "[Removed Lines]",
          "1891:             if (ip_proto==LSC_TCP && ep_tcp_port_to_display(port)) {",
          "1893:                         ep_tcp_port_to_display(port));",
          "1895:             else if (ip_proto==LSC_UDP && ep_udp_port_to_display(port)) {",
          "1897:                         ep_udp_port_to_display(port));",
          "",
          "[Added Lines]",
          "1891:             if (ip_proto==LSC_TCP && tcp_port_to_display(wmem_packet_scope(), port)) {",
          "1893:                         tcp_port_to_display(wmem_packet_scope(), port));",
          "1895:             else if (ip_proto==LSC_UDP && udp_port_to_display(wmem_packet_scope(), port)) {",
          "1897:                         udp_port_to_display(wmem_packet_scope(), port));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1915:                 hf_dvbci_lsc_dst_port, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "1916:         offset +=2;",
          "1917:         if (port_item) {",
          "1919:                 proto_item_append_text(port_item, \" (%s)\",",
          "1921:             }",
          "1923:                 proto_item_append_text(port_item, \" (%s)\",",
          "1925:             }",
          "1926:         }",
          "1927:         store_lsc_msg_dissector(circuit, ip_proto, port);",
          "",
          "[Removed Lines]",
          "1918:             if (ip_proto==LSC_TCP && ep_tcp_port_to_display(port)) {",
          "1920:                         ep_tcp_port_to_display(port));",
          "1922:             else if (ip_proto==LSC_UDP && ep_udp_port_to_display(port)) {",
          "1924:                         ep_udp_port_to_display(port));",
          "",
          "[Added Lines]",
          "1918:             if (ip_proto==LSC_TCP && tcp_port_to_display(wmem_packet_scope(), port)) {",
          "1920:                         tcp_port_to_display(wmem_packet_scope(), port));",
          "1922:             else if (ip_proto==LSC_UDP && udp_port_to_display(wmem_packet_scope(), port)) {",
          "1924:                         udp_port_to_display(wmem_packet_scope(), port));",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ipmi.c||epan/dissectors/packet-ipmi.c": [
          "File: epan/dissectors/packet-ipmi.c -> epan/dissectors/packet-ipmi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1277: void",
          "1278: ipmi_fmt_udpport(gchar *s, guint32 v)",
          "1279: {",
          "1281: }",
          "1283: void",
          "",
          "[Removed Lines]",
          "1280:  g_snprintf(s, ITEM_LABEL_LENGTH, \"%s (%d)\", ep_udp_port_to_display(v), v);",
          "",
          "[Added Lines]",
          "1280:  g_snprintf(s, ITEM_LABEL_LENGTH, \"%s (%d)\", udp_port_to_display(wmem_packet_scope(), v), v);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-nt-tpcp.c||epan/dissectors/packet-nt-tpcp.c": [
          "File: epan/dissectors/packet-nt-tpcp.c -> epan/dissectors/packet-nt-tpcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:  cport = tvb_get_ntohs(tvb, 6);",
          "143:  proto_tree_add_uint_format_value(tpcp_tree, hf_tpcp_cport, tvb, 6, 2, cport,",
          "146:  proto_tree_add_item(tpcp_tree, hf_tpcp_caddr, tvb, 8, 4, ENC_BIG_ENDIAN);",
          "147:  proto_tree_add_item(tpcp_tree, hf_tpcp_saddr, tvb, 12, 4, ENC_BIG_ENDIAN);",
          "",
          "[Removed Lines]",
          "144:       \"%s\", ep_udp_port_to_display(cport));",
          "",
          "[Added Lines]",
          "144:       \"%s\", udp_port_to_display(wmem_packet_scope(), cport));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155:  col_add_fstr(pinfo->cinfo, COL_INFO,\"%s id %d CPort %s CIP %s SIP %s\",",
          "156:    val_to_str_const(type, type_vals, \"Unknown\"),",
          "157:    id,",
          "159:    tvb_ip_to_str(tvb, 8),",
          "160:    tvb_ip_to_str(tvb, 12));",
          "",
          "[Removed Lines]",
          "158:    ep_udp_port_to_display(cport),",
          "",
          "[Added Lines]",
          "158:    udp_port_to_display(wmem_packet_scope(), cport),",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-rx.c||epan/dissectors/packet-rx.c": [
          "File: epan/dissectors/packet-rx.c -> epan/dissectors/packet-rx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:    \"Destination Port: %s  \",",
          "204:    (unsigned long)seq,",
          "205:    (unsigned long)callnumber,",
          "208:   );",
          "210:  item = proto_tree_add_item(parent_tree, hf_rx_response, tvb, offset, -1, ENC_NA);",
          "",
          "[Removed Lines]",
          "206:    ep_udp_port_to_display(pinfo->srcport),",
          "207:    ep_udp_port_to_display(pinfo->destport)",
          "",
          "[Added Lines]",
          "206:    udp_port_to_display(wmem_packet_scope(), pinfo->srcport),",
          "207:    udp_port_to_display(wmem_packet_scope(), pinfo->destport)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "255:    \"Destination Port: %s  \",",
          "256:    (unsigned long)seq,",
          "257:    (unsigned long)callnumber,",
          "260:   );",
          "262:  item = proto_tree_add_item(parent_tree, hf_rx_abort, tvb, offset, -1, ENC_NA);",
          "",
          "[Removed Lines]",
          "258:    ep_udp_port_to_display(pinfo->srcport),",
          "259:    ep_udp_port_to_display(pinfo->destport)",
          "",
          "[Added Lines]",
          "258:    udp_port_to_display(wmem_packet_scope(), pinfo->srcport),",
          "259:    udp_port_to_display(wmem_packet_scope(), pinfo->destport)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "287:    \"Destination Port: %s  \",",
          "288:    (unsigned long)seq,",
          "289:    (unsigned long)callnumber,",
          "292:   );",
          "294:  item = proto_tree_add_item(parent_tree, hf_rx_challenge, tvb, offset, -1, ENC_NA);",
          "",
          "[Removed Lines]",
          "290:    ep_udp_port_to_display(pinfo->srcport),",
          "291:    ep_udp_port_to_display(pinfo->destport)",
          "",
          "[Added Lines]",
          "290:    udp_port_to_display(wmem_packet_scope(), pinfo->srcport),",
          "291:    udp_port_to_display(wmem_packet_scope(), pinfo->destport)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "327:    \"Destination Port: %s  \",",
          "328:    (unsigned long)seq,",
          "329:    (unsigned long)callnumber,",
          "332:   );",
          "334:  item = proto_tree_add_item(parent_tree, hf_rx_ack, tvb, offset, -1, ENC_NA);",
          "",
          "[Removed Lines]",
          "330:    ep_udp_port_to_display(pinfo->srcport),",
          "331:    ep_udp_port_to_display(pinfo->destport)",
          "",
          "[Added Lines]",
          "330:    udp_port_to_display(wmem_packet_scope(), pinfo->srcport),",
          "331:    udp_port_to_display(wmem_packet_scope(), pinfo->destport)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "539:     \"Destination Port: %s  \",",
          "540:     (unsigned long)seq,",
          "541:     (unsigned long)callnumber,",
          "544:    );",
          "545:   break;",
          "546:  case RX_PACKET_TYPE_CHALLENGE:",
          "",
          "[Removed Lines]",
          "542:     ep_udp_port_to_display(pinfo->srcport),",
          "543:     ep_udp_port_to_display(pinfo->destport)",
          "",
          "[Added Lines]",
          "542:     udp_port_to_display(wmem_packet_scope(), pinfo->srcport),",
          "543:     udp_port_to_display(wmem_packet_scope(), pinfo->destport)",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-sctp.c||epan/dissectors/packet-sctp.c": [
          "File: epan/dissectors/packet-sctp.c -> epan/dissectors/packet-sctp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4501:     if (show_port_numbers)",
          "4502:       sctp_item = proto_tree_add_protocol_format(tree, proto_sctp, tvb, 0, -1,",
          "4503:                                                  \"Stream Control Transmission Protocol, Src Port: %s (%u), Dst Port: %s (%u)\",",
          "4506:     else",
          "4507:       sctp_item = proto_tree_add_item(tree, proto_sctp, tvb, 0, -1, ENC_NA);",
          "",
          "[Removed Lines]",
          "4504:                                                  ep_sctp_port_to_display(source_port), source_port,",
          "4505:                                                  ep_sctp_port_to_display(destination_port), destination_port);",
          "",
          "[Added Lines]",
          "4504:                                                  sctp_port_to_display(wmem_packet_scope(), source_port), source_port,",
          "4505:                                                  sctp_port_to_display(wmem_packet_scope(), destination_port), destination_port);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-tcp.c||epan/dissectors/packet-tcp.c": [
          "File: epan/dissectors/packet-tcp.c -> epan/dissectors/packet-tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4355:     tcph->th_sport = tvb_get_ntohs(tvb, offset);",
          "4356:     tcph->th_dport = tvb_get_ntohs(tvb, offset + 2);",
          "4360:     col_add_lstr(pinfo->cinfo, COL_INFO,",
          "4361:         src_port_str,",
          "",
          "[Removed Lines]",
          "4358:     src_port_str = ep_tcp_port_to_display(tcph->th_sport);",
          "4359:     dst_port_str = ep_tcp_port_to_display(tcph->th_dport);",
          "",
          "[Added Lines]",
          "4358:     src_port_str = tcp_port_to_display(wmem_packet_scope(), tcph->th_sport);",
          "4359:     dst_port_str = tcp_port_to_display(wmem_packet_scope(), tcph->th_dport);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-udp.c||epan/dissectors/packet-udp.c": [
          "File: epan/dissectors/packet-udp.c -> epan/dissectors/packet-udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "581:   udph->uh_sport=tvb_get_ntohs(tvb, offset);",
          "582:   udph->uh_dport=tvb_get_ntohs(tvb, offset+2);",
          "587:   col_add_lstr(pinfo->cinfo, COL_INFO,",
          "588:     \"Source port: \", src_port_str, \"  \"",
          "",
          "[Removed Lines]",
          "584:   src_port_str = ep_udp_port_to_display(udph->uh_sport);",
          "585:   dst_port_str = ep_udp_port_to_display(udph->uh_dport);",
          "",
          "[Added Lines]",
          "584:   src_port_str = udp_port_to_display(wmem_packet_scope(), udph->uh_sport);",
          "585:   dst_port_str = udp_port_to_display(wmem_packet_scope(), udph->uh_dport);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-xmcp.c||epan/dissectors/packet-xmcp.c": [
          "File: epan/dissectors/packet-xmcp.c -> epan/dissectors/packet-xmcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "404:   switch(xmcp_service_protocol) {",
          "405:   case IP_PROTO_TCP:",
          "406:     proto_item_append_text(xmcp_it_service_port, \" (TCP: %s)\",",
          "408:     break;",
          "409:   case IP_PROTO_UDP:",
          "410:     proto_item_append_text(xmcp_it_service_port, \" (UDP: %s)\",",
          "412:     break;",
          "413:   case IP_PROTO_DCCP:",
          "414:     proto_item_append_text(xmcp_it_service_port, \" (DCCP: %s)\",",
          "416:     break;",
          "417:   case IP_PROTO_SCTP:",
          "418:     proto_item_append_text(xmcp_it_service_port, \" (SCTP: %s)\",",
          "420:     break;",
          "421:   default:",
          "422:     break;",
          "",
          "[Removed Lines]",
          "407:                            ep_tcp_port_to_display(xmcp_service_port));",
          "411:                            ep_udp_port_to_display(xmcp_service_port));",
          "415:                            ep_dccp_port_to_display(xmcp_service_port));",
          "419:                            ep_sctp_port_to_display(xmcp_service_port));",
          "",
          "[Added Lines]",
          "407:                            tcp_port_to_display(wmem_packet_scope(), xmcp_service_port));",
          "411:                            udp_port_to_display(wmem_packet_scope(), xmcp_service_port));",
          "415:                            dccp_port_to_display(wmem_packet_scope(), xmcp_service_port));",
          "419:                            sctp_port_to_display(wmem_packet_scope(), xmcp_service_port));",
          "",
          "---------------"
        ],
        "ui/cli/tap-endpoints.c||ui/cli/tap-endpoints.c": [
          "File: ui/cli/tap-endpoints.c -> ui/cli/tap-endpoints.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:   for (i=0; (iu->hash.conv_array && i < iu->hash.conv_array->len); i++) {",
          "73:    guint64 tot_frames;",
          "76:    host = &g_array_index(iu->hash.conv_array, hostlist_talker_t, i);",
          "77:    tot_frames = host->rx_frames + host->tx_frames;",
          "",
          "[Removed Lines]",
          "74:    gchar*  conversation_str;",
          "",
          "[Added Lines]",
          "74:    gchar *conversation_str, *port_str;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:     conversation_str = (char*)get_conversation_address(NULL, &host->myaddress, TRUE);",
          "82:     if (display_port) {",
          "83:      printf(\"%-20s      %5s     %6\" G_GINT64_MODIFIER \"u     %9\" G_GINT64_MODIFIER",
          "84:             \"u     %6\" G_GINT64_MODIFIER \"u       %9\" G_GINT64_MODIFIER \"u      %6\"",
          "85:             G_GINT64_MODIFIER \"u       %9\" G_GINT64_MODIFIER \"u   \\n\",",
          "86:       conversation_str,",
          "89:       host->tx_frames+host->rx_frames, host->tx_bytes+host->rx_bytes,",
          "90:       host->tx_frames, host->tx_bytes,",
          "91:       host->rx_frames, host->rx_bytes);",
          "92:     } else {",
          "93:      printf(\"%-20s      %6\" G_GINT64_MODIFIER \"u     %9\" G_GINT64_MODIFIER",
          "94:             \"u     %6\" G_GINT64_MODIFIER \"u       %9\" G_GINT64_MODIFIER \"u      %6\"",
          "",
          "[Removed Lines]",
          "88:       get_conversation_port(host->port, host->ptype, TRUE),",
          "",
          "[Added Lines]",
          "84:      port_str = (char*)get_conversation_port(NULL, host->port, host->ptype, TRUE);",
          "89:       port_str,",
          "93:      wmem_free(NULL, port_str);",
          "",
          "---------------"
        ],
        "ui/cli/tap-iousers.c||ui/cli/tap-iousers.c": [
          "File: ui/cli/tap-iousers.c -> ui/cli/tap-iousers.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:     src_addr = (char*)get_conversation_address(NULL, &iui->src_address, TRUE);",
          "105:     dst_addr = (char*)get_conversation_address(NULL, &iui->dst_address, TRUE);",
          "106:     if (display_ports) {",
          "112:      printf(\"%-26s <-> %-26s  %6\" G_GINT64_MODIFIER \"u %9\" G_GINT64_MODIFIER",
          "113:             \"u  %6\" G_GINT64_MODIFIER \"u %9\" G_GINT64_MODIFIER \"u  %6\"",
          "114:             G_GINT64_MODIFIER \"u %9\" G_GINT64_MODIFIER \"u  \",",
          "",
          "[Removed Lines]",
          "107:      char *src, *dst;",
          "108:      src = wmem_strconcat(NULL, src_addr,",
          "109:       \":\", get_conversation_port(iui->src_port, iui->ptype, TRUE), NULL);",
          "110:      dst = wmem_strconcat(NULL, dst_addr,",
          "111:       \":\", get_conversation_port(iui->dst_port, iui->ptype, TRUE), NULL);",
          "",
          "[Added Lines]",
          "107:      char *src, *dst, *src_port, *dst_port;",
          "108:      src_port = (char*)get_conversation_port(NULL, iui->src_port, iui->ptype, TRUE);",
          "109:      dst_port = (char*)get_conversation_port(NULL, iui->dst_port, iui->ptype, TRUE);",
          "110:      src = wmem_strconcat(NULL, src_addr, \":\", src_port, NULL);",
          "111:      dst = wmem_strconcat(NULL, dst_addr, \":\", dst_port, NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:       iui->tx_frames+iui->rx_frames,",
          "119:       iui->tx_bytes+iui->rx_bytes",
          "120:      );",
          "121:      wmem_free(NULL, src);",
          "122:      wmem_free(NULL, dst);",
          "123:     } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:      wmem_free(NULL, src_port);",
          "122:      wmem_free(NULL, dst_port);",
          "",
          "---------------"
        ],
        "ui/gtk/conversations_table.c||ui/gtk/conversations_table.c": [
          "File: ui/gtk/conversations_table.c -> ui/gtk/conversations_table.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1594:     while (iter_valid) {",
          "1595:         conv_item_t *conv_item;",
          "1598:         gtk_tree_model_get(GTK_TREE_MODEL(store), &iter, CONV_INDEX_COLUMN, &idx, -1);",
          "1599:         conv_item = &g_array_index(ct->hash.conv_array, conv_item_t, idx);",
          "1600:         src_addr = (char*)get_conversation_address(NULL, &conv_item->src_address, ct->resolve_names);",
          "1601:         dst_addr = (char*)get_conversation_address(NULL, &conv_item->dst_address, ct->resolve_names);",
          "1602:         gtk_list_store_set (store, &iter,",
          "1603:                   CONV_COLUMN_SRC_ADDR, src_addr,",
          "1605:                   CONV_COLUMN_DST_ADDR, dst_addr,",
          "1607:                     -1);",
          "1608:         iter_valid = gtk_tree_model_iter_next(GTK_TREE_MODEL(store), &iter);",
          "1609:         wmem_free(NULL, src_addr);",
          "1610:         wmem_free(NULL, dst_addr);",
          "1611:     }",
          "1613:     gtk_tree_view_set_model(GTK_TREE_VIEW(ct->table), GTK_TREE_MODEL(store));",
          "",
          "[Removed Lines]",
          "1596:   char *src_addr, *dst_addr;",
          "1604:                   CONV_COLUMN_SRC_PORT, get_conversation_port(conv_item->src_port, conv_item->ptype, ct->resolve_names),",
          "1606:                   CONV_COLUMN_DST_PORT, get_conversation_port(conv_item->dst_port, conv_item->ptype, ct->resolve_names),",
          "",
          "[Added Lines]",
          "1596:   char *src_addr, *dst_addr, *src_port, *dst_port;",
          "1602:         src_port = (char*)get_conversation_port(NULL, conv_item->src_port, conv_item->ptype, ct->resolve_names);",
          "1603:         dst_port = (char*)get_conversation_port(NULL, conv_item->dst_port, conv_item->ptype, ct->resolve_names);",
          "1606:                   CONV_COLUMN_SRC_PORT, src_port,",
          "1608:                   CONV_COLUMN_DST_PORT, dst_port,",
          "1613:         wmem_free(NULL, src_port);",
          "1614:         wmem_free(NULL, dst_port);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1712:                     CONV_COLUMN_BPS_BA,   rx_ptr,",
          "1713:                     -1);",
          "1714:         } else {",
          "1717:             src_addr = (char*)get_conversation_address(NULL, &conv_item->src_address, ct->resolve_names);",
          "1718:             dst_addr = (char*)get_conversation_address(NULL, &conv_item->dst_address, ct->resolve_names);",
          "1720:             gtk_list_store_insert_with_values(store, &iter, G_MAXINT,",
          "1721:                     CONV_COLUMN_SRC_ADDR, src_addr,",
          "1723:                     CONV_COLUMN_DST_ADDR, dst_addr,",
          "1725:                     CONV_COLUMN_PACKETS,  conv_item->tx_frames+conv_item->rx_frames,",
          "1726:                     CONV_COLUMN_BYTES,    conv_item->tx_bytes+conv_item->rx_bytes,",
          "1727:                     CONV_COLUMN_PKT_AB,   conv_item->tx_frames,",
          "",
          "[Removed Lines]",
          "1715:             char *src_addr, *dst_addr;",
          "1722:                     CONV_COLUMN_SRC_PORT, get_conversation_port(conv_item->src_port, conv_item->ptype, ct->resolve_names),",
          "1724:                     CONV_COLUMN_DST_PORT, get_conversation_port(conv_item->dst_port, conv_item->ptype, ct->resolve_names),",
          "",
          "[Added Lines]",
          "1719:             char *src_addr, *dst_addr, *src_port, *dst_port;",
          "1723:             src_port = (char*)get_conversation_port(NULL, conv_item->src_port, conv_item->ptype, ct->resolve_names);",
          "1724:             dst_port = (char*)get_conversation_port(NULL, conv_item->dst_port, conv_item->ptype, ct->resolve_names);",
          "1728:                     CONV_COLUMN_SRC_PORT, src_port,",
          "1730:                     CONV_COLUMN_DST_PORT, dst_port,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1736:                     -1);",
          "1737:             wmem_free(NULL, src_addr);",
          "1738:             wmem_free(NULL, dst_addr);",
          "1739:         }",
          "1741:         iter_valid = gtk_tree_model_iter_next(GTK_TREE_MODEL(store), &iter);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1745:             wmem_free(NULL, src_port);",
          "1746:             wmem_free(NULL, dst_port);",
          "",
          "---------------"
        ],
        "ui/gtk/follow_ssl.c||ui/gtk/follow_ssl.c": [
          "File: ui/gtk/follow_ssl.c -> ui/gtk/follow_ssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:     int             previous_filter_len;",
          "134:     const char *    hostname0;",
          "135:     const char *    hostname1;",
          "138:     const char *    client_hostname;",
          "139:     const char *    server_hostname;",
          "140:     const char *    client_port;",
          "",
          "[Removed Lines]",
          "136:     const char *    port0;",
          "137:     const char *    port1;",
          "",
          "[Added Lines]",
          "136:     char           *port0, *port1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "237:         hostname1 = get_hostname(ipaddr);",
          "238:     }",
          "243:     follow_info->is_ipv6 = stats.is_ipv6;",
          "",
          "[Removed Lines]",
          "240:     port0 = ep_tcp_port_to_display(stats.port[0]);",
          "241:     port1 = ep_tcp_port_to_display(stats.port[1]);",
          "",
          "[Added Lines]",
          "239:     port0 = (char*)tcp_port_to_display(NULL, stats.port[0]);",
          "240:     port1 = (char*)tcp_port_to_display(NULL, stats.port[1]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "275:     follow_stream(\"Follow SSL Stream\", follow_info, both_directions_string,",
          "276:                     server_to_client_string, client_to_server_string);",
          "278:     g_free(both_directions_string);",
          "279:     g_free(server_to_client_string);",
          "280:     g_free(client_to_server_string);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "277:     wmem_free(NULL, port0);",
          "278:     wmem_free(NULL, port1);",
          "",
          "---------------"
        ],
        "ui/gtk/follow_tcp.c||ui/gtk/follow_tcp.c": [
          "File: ui/gtk/follow_tcp.c -> ui/gtk/follow_tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "258:     follow_info->is_ipv6 = stats.is_ipv6;",
          "264:     if ((sc.src_port == stats.port[0]) &&",
          "",
          "[Removed Lines]",
          "260:     port0 = ep_tcp_port_to_display(stats.port[0]);",
          "261:     port1 = ep_tcp_port_to_display(stats.port[1]);",
          "",
          "[Added Lines]",
          "260:     port0 = (char*)tcp_port_to_display(NULL, stats.port[0]);",
          "261:     port1 = (char*)tcp_port_to_display(NULL, stats.port[1]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "305:     g_free(follow_filter);",
          "307:     g_free(both_directions_string);",
          "308:     g_free(server_to_client_string);",
          "309:     g_free(client_to_server_string);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "307:     wmem_free(NULL, port0);",
          "308:     wmem_free(NULL, port1);",
          "",
          "---------------"
        ],
        "ui/gtk/follow_udp.c||ui/gtk/follow_udp.c": [
          "File: ui/gtk/follow_udp.c -> ui/gtk/follow_udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "183:         hostname1 = get_hostname(ipaddr);",
          "184:     }",
          "189:     follow_info->is_ipv6 = stats.is_ipv6;",
          "",
          "[Removed Lines]",
          "186:     port0 = ep_udp_port_to_display(stats.port[0]);",
          "187:     port1 = ep_udp_port_to_display(stats.port[1]);",
          "",
          "[Added Lines]",
          "186:     port0 = udp_port_to_display(NULL, stats.port[0]);",
          "187:     port1 = udp_port_to_display(NULL, stats.port[1]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "222:     follow_stream(\"Follow UDP Stream\", follow_info, both_directions_string,",
          "223:                   server_to_client_string, client_to_server_string);",
          "225:     g_free(both_directions_string);",
          "226:     g_free(server_to_client_string);",
          "227:     g_free(client_to_server_string);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "225:     wmem_free(NULL, port0);",
          "226:     wmem_free(NULL, port1);",
          "",
          "---------------"
        ],
        "ui/gtk/hostlist_table.c||ui/gtk/hostlist_table.c": [
          "File: ui/gtk/hostlist_table.c -> ui/gtk/hostlist_table.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "477:     while (iter_valid) {",
          "478:         hostlist_talker_t *host;",
          "481:         gtk_tree_model_get(GTK_TREE_MODEL(store), &iter, ENDP_INDEX_COLUMN, &idx, -1);",
          "482:         host = &g_array_index(hl->hash.conv_array, hostlist_talker_t, idx);",
          "484:         addr_str = (char*)get_conversation_address(NULL, &host->myaddress, hl->resolve_names);",
          "485:         gtk_list_store_set (store, &iter,",
          "486:                   ENDP_COLUMN_ADDR, addr_str,",
          "488:                     -1);",
          "490:         iter_valid = gtk_tree_model_iter_next(GTK_TREE_MODEL(store), &iter);",
          "491:         wmem_free(NULL, addr_str);",
          "492:     }",
          "493:     gtk_tree_view_set_model(GTK_TREE_VIEW(hl->table), GTK_TREE_MODEL(store));",
          "494:     g_object_unref(store);",
          "",
          "[Removed Lines]",
          "479:         char* addr_str;",
          "487:                   ENDP_COLUMN_PORT, get_conversation_port(host->port, host->ptype, hl->resolve_names),",
          "",
          "[Added Lines]",
          "479:         char *addr_str, *port_str;",
          "485:         port_str = (char*)get_conversation_port(NULL, host->port, host->ptype, hl->resolve_names);",
          "488:                   ENDP_COLUMN_PORT, port_str,",
          "493:         wmem_free(NULL, port_str);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "554:         }",
          "555:         host->modified = FALSE;",
          "556:         if (!iter_valid) {",
          "558: #ifdef HAVE_GEOIP",
          "559:             char *geoip[ENDP_NUM_GEOIP_COLUMNS];",
          "560:             guint j;",
          "",
          "[Removed Lines]",
          "557:             char* addr_str;",
          "",
          "[Added Lines]",
          "559:             char *addr_str, *port_str;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "600:             addr_str = (char*)get_conversation_address(NULL, &host->myaddress, hl->resolve_names);",
          "601:             gtk_list_store_insert_with_values( store, &iter, G_MAXINT,",
          "602:                   ENDP_COLUMN_ADDR, addr_str,",
          "604:                   ENDP_COLUMN_PACKETS,  host->tx_frames+host->rx_frames,",
          "605:                   ENDP_COLUMN_BYTES,    host->tx_bytes+host->rx_bytes,",
          "606:                   ENDP_COLUMN_PKT_AB,   host->tx_frames,",
          "",
          "[Removed Lines]",
          "603:                   ENDP_COLUMN_PORT, get_conversation_port(host->port, host->ptype, hl->resolve_names),",
          "",
          "[Added Lines]",
          "603:             port_str = (char*)get_conversation_port(NULL, host->port, host->ptype, hl->resolve_names);",
          "606:                   ENDP_COLUMN_PORT, port_str,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "625:                   ENDP_INDEX_COLUMN,    idx,",
          "626:                     -1);",
          "627:             wmem_free(NULL, addr_str);",
          "628: #ifdef HAVE_GEOIP",
          "629:             for (j = 0; j < ENDP_NUM_GEOIP_COLUMNS; j++)",
          "630:                 g_free(geoip[j]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "631:             wmem_free(NULL, port_str);",
          "",
          "---------------"
        ],
        "ui/qt/conversation_dialog.cpp||ui/qt/conversation_dialog.cpp": [
          "File: ui/qt/conversation_dialog.cpp -> ui/qt/conversation_dialog.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "339:         conv_item_t *conv_item = data(ci_col_, Qt::UserRole).value<conv_item_t *>();",
          "340:         bool ok;",
          "341:         quint64 cur_packets = data(pkts_col_, Qt::UserRole).toULongLong(&ok);",
          "344:         if (!conv_item) {",
          "345:             return;",
          "",
          "[Removed Lines]",
          "342:         char *src_addr, *dst_addr;",
          "",
          "[Added Lines]",
          "342:         char *src_addr, *dst_addr, *src_port, *dst_port;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "353:         src_addr = (char*)get_conversation_address(NULL, &conv_item->src_address, resolve_names);",
          "354:         dst_addr = (char*)get_conversation_address(NULL, &conv_item->dst_address, resolve_names);",
          "355:         setText(CONV_COLUMN_SRC_ADDR, src_addr);",
          "357:         setText(CONV_COLUMN_DST_ADDR, dst_addr);",
          "359:         wmem_free(NULL, src_addr);",
          "360:         wmem_free(NULL, dst_addr);",
          "362:         double duration = nstime_to_sec(&conv_item->stop_time) - nstime_to_sec(&conv_item->start_time);",
          "363:         QString col_str, bps_ab = bps_na_, bps_ba = bps_na_;",
          "",
          "[Removed Lines]",
          "356:         setText(CONV_COLUMN_SRC_PORT, get_conversation_port(conv_item->src_port, conv_item->ptype, resolve_names));",
          "358:         setText(CONV_COLUMN_DST_PORT, get_conversation_port(conv_item->dst_port, conv_item->ptype, resolve_names));",
          "",
          "[Added Lines]",
          "355:         src_port = (char*)get_conversation_port(NULL, conv_item->src_port, conv_item->ptype, resolve_names);",
          "356:         dst_port = (char*)get_conversation_port(NULL, conv_item->dst_port, conv_item->ptype, resolve_names);",
          "358:         setText(CONV_COLUMN_SRC_PORT, src_port);",
          "360:         setText(CONV_COLUMN_DST_PORT, dst_port);",
          "363:         wmem_free(NULL, src_port);",
          "364:         wmem_free(NULL, dst_port);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "410:             }",
          "411:         case CONV_COLUMN_SRC_PORT:",
          "412:             if (resolve_names) {",
          "414:             } else {",
          "415:                 return quint32(conv_item->src_port);",
          "416:             }",
          "",
          "[Removed Lines]",
          "413:                 return get_conversation_port(conv_item->src_port, conv_item->ptype, resolve_names);",
          "",
          "[Added Lines]",
          "417:                 char* port_str = (char*)get_conversation_port(NULL, conv_item->src_port, conv_item->ptype, resolve_names);",
          "418:                 QString q_port_str(port_str);",
          "419:                 wmem_free(NULL, port_str);",
          "420:                 return q_port_str;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "423:             }",
          "424:         case CONV_COLUMN_DST_PORT:",
          "425:             if (resolve_names) {",
          "427:             } else {",
          "428:                 return quint32(conv_item->dst_port);",
          "429:             }",
          "",
          "[Removed Lines]",
          "426:                 return get_conversation_port(conv_item->dst_port, conv_item->ptype, resolve_names);",
          "",
          "[Added Lines]",
          "433:                 char* port_str = (char*)get_conversation_port(NULL, conv_item->dst_port, conv_item->ptype, resolve_names);",
          "434:                 QString q_port_str(port_str);",
          "435:                 wmem_free(NULL, port_str);",
          "436:                 return q_port_str;",
          "",
          "---------------"
        ],
        "ui/qt/endpoint_dialog.cpp||ui/qt/endpoint_dialog.cpp": [
          "File: ui/qt/endpoint_dialog.cpp -> ui/qt/endpoint_dialog.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "228:         hostlist_talker_t *endp_item = data(ei_col_, Qt::UserRole).value<hostlist_talker_t *>();",
          "229:         bool ok;",
          "230:         quint64 cur_packets = data(pkts_col_, Qt::UserRole).toULongLong(&ok);",
          "233:         if (!endp_item) {",
          "234:             return;",
          "",
          "[Removed Lines]",
          "231:         char* addr_str;",
          "",
          "[Added Lines]",
          "231:         char *addr_str, *port_str;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "240:         }",
          "242:         addr_str = (char*)get_conversation_address(NULL, &endp_item->myaddress, resolve_names);",
          "243:         setText(ENDP_COLUMN_ADDR, addr_str);",
          "245:         wmem_free(NULL, addr_str);",
          "247:         QString col_str;",
          "",
          "[Removed Lines]",
          "244:         setText(ENDP_COLUMN_PORT, get_conversation_port(endp_item->port, endp_item->ptype, resolve_names));",
          "",
          "[Added Lines]",
          "243:         port_str = (char*)get_conversation_port(NULL, endp_item->port, endp_item->ptype, resolve_names);",
          "245:         setText(ENDP_COLUMN_PORT, port_str);",
          "247:         wmem_free(NULL, port_str);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "301:             }",
          "302:         case ENDP_COLUMN_PORT:",
          "303:             if (resolve_names) {",
          "305:             } else {",
          "306:                 return quint32(endp_item->port);",
          "307:             }",
          "",
          "[Removed Lines]",
          "304:                 return get_conversation_port(endp_item->port, endp_item->ptype, resolve_names);",
          "",
          "[Added Lines]",
          "306:                 char* port_str = (char*)get_conversation_port(NULL, endp_item->port, endp_item->ptype, resolve_names);",
          "307:                 QString q_port_str(port_str);",
          "308:                 wmem_free(NULL, port_str);",
          "309:                 return q_port_str;",
          "",
          "---------------"
        ],
        "ui/qt/follow_stream_dialog.cpp||ui/qt/follow_stream_dialog.cpp": [
          "File: ui/qt/follow_stream_dialog.cpp -> ui/qt/follow_stream_dialog.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1088:     switch (follow_type_)",
          "1089:     {",
          "1090:     case FOLLOW_TCP:",
          "1093:         break;",
          "1094:     case FOLLOW_UDP:",
          "1097:         break;",
          "1098:     case FOLLOW_SSL:",
          "1101:         break;",
          "1102:     }",
          "",
          "[Removed Lines]",
          "1091:         port0 = ep_tcp_port_to_display(stats.port[0]);",
          "1092:         port1 = ep_tcp_port_to_display(stats.port[1]);",
          "1095:         port0 = ep_udp_port_to_display(stats.port[0]);",
          "1096:         port1 = ep_udp_port_to_display(stats.port[1]);",
          "1099:         port0 = ep_tcp_port_to_display(stats.port[0]);",
          "1100:         port1 = ep_tcp_port_to_display(stats.port[1]);",
          "",
          "[Added Lines]",
          "1091:         port0 = tcp_port_to_display(NULL, stats.port[0]);",
          "1092:         port1 = tcp_port_to_display(NULL, stats.port[1]);",
          "1095:         port0 = udp_port_to_display(NULL, stats.port[0]);",
          "1096:         port1 = udp_port_to_display(NULL, stats.port[1]);",
          "1099:         port0 = tcp_port_to_display(NULL, stats.port[0]);",
          "1100:         port1 = tcp_port_to_display(NULL, stats.port[1]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1195:         }",
          "1196:     }",
          "1199:     switch (follow_type_)",
          "1200:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1198:     wmem_free(NULL, port0);",
          "1199:     wmem_free(NULL, port1);",
          "",
          "---------------"
        ]
      }
    }
  ]
}