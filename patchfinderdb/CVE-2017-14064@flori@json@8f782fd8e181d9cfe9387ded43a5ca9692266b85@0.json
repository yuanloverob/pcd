{
  "cve_id": "CVE-2017-14064",
  "cve_desc": "Ruby through 2.2.7, 2.3.x through 2.3.4, and 2.4.x through 2.4.1 can expose arbitrary memory during a JSON.generate call. The issues lies in using strdup in ext/json/ext/generator/generator.c, which will stop after encountering a '\\0' byte, returning a pointer to a string of length zero, which is not the length stored in space_len.",
  "repo": "flori/json",
  "patch_hash": "8f782fd8e181d9cfe9387ded43a5ca9692266b85",
  "patch_info": {
    "commit_hash": "8f782fd8e181d9cfe9387ded43a5ca9692266b85",
    "repo": "flori/json",
    "commit_url": "https://github.com/flori/json/commit/8f782fd8e181d9cfe9387ded43a5ca9692266b85",
    "files": [
      "ext/json/ext/generator/generator.c",
      "ext/json/ext/generator/generator.h"
    ],
    "message": "Fix arbitrary heap exposure problem",
    "before_after_code_files": [
      "ext/json/ext/generator/generator.c||ext/json/ext/generator/generator.c",
      "ext/json/ext/generator/generator.h||ext/json/ext/generator/generator.h"
    ]
  },
  "patch_diff": {
    "ext/json/ext/generator/generator.c||ext/json/ext/generator/generator.c": [
      "File: ext/json/ext/generator/generator.c -> ext/json/ext/generator/generator.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "308:   char *result;",
      "309:   if (len <= 0) return NULL;",
      "310:   result = ALLOC_N(char, len);",
      "312:   return result;",
      "313: }",
      "",
      "[Removed Lines]",
      "311:   memccpy(result, ptr, 0, len);",
      "",
      "[Added Lines]",
      "311:   memcpy(result, ptr, len);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1062:         }",
      "1063:     } else {",
      "1064:         if (state->indent) ruby_xfree(state->indent);",
      "1066:         state->indent_len = len;",
      "1067:     }",
      "1068:     return Qnil;",
      "",
      "[Removed Lines]",
      "1065:         state->indent = strdup(RSTRING_PTR(indent));",
      "",
      "[Added Lines]",
      "1065:         state->indent = fstrndup(RSTRING_PTR(indent), len);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1100:         }",
      "1101:     } else {",
      "1102:         if (state->space) ruby_xfree(state->space);",
      "1104:         state->space_len = len;",
      "1105:     }",
      "1106:     return Qnil;",
      "",
      "[Removed Lines]",
      "1103:         state->space = strdup(RSTRING_PTR(space));",
      "",
      "[Added Lines]",
      "1103:         state->space = fstrndup(RSTRING_PTR(space), len);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1136:         }",
      "1137:     } else {",
      "1138:         if (state->space_before) ruby_xfree(state->space_before);",
      "1140:         state->space_before_len = len;",
      "1141:     }",
      "1142:     return Qnil;",
      "",
      "[Removed Lines]",
      "1139:         state->space_before = strdup(RSTRING_PTR(space_before));",
      "",
      "[Added Lines]",
      "1139:         state->space_before = fstrndup(RSTRING_PTR(space_before), len);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1173:         }",
      "1174:     } else {",
      "1175:         if (state->object_nl) ruby_xfree(state->object_nl);",
      "1177:         state->object_nl_len = len;",
      "1178:     }",
      "1179:     return Qnil;",
      "",
      "[Removed Lines]",
      "1176:         state->object_nl = strdup(RSTRING_PTR(object_nl));",
      "",
      "[Added Lines]",
      "1176:         state->object_nl = fstrndup(RSTRING_PTR(object_nl), len);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1208:         }",
      "1209:     } else {",
      "1210:         if (state->array_nl) ruby_xfree(state->array_nl);",
      "1212:         state->array_nl_len = len;",
      "1213:     }",
      "1214:     return Qnil;",
      "",
      "[Removed Lines]",
      "1211:         state->array_nl = strdup(RSTRING_PTR(array_nl));",
      "",
      "[Added Lines]",
      "1211:         state->array_nl = fstrndup(RSTRING_PTR(array_nl), len);",
      "",
      "---------------"
    ],
    "ext/json/ext/generator/generator.h||ext/json/ext/generator/generator.h": [
      "File: ext/json/ext/generator/generator.h -> ext/json/ext/generator/generator.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: #ifndef _GENERATOR_H_",
      "2: #define _GENERATOR_H_",
      "5: #include <math.h>",
      "6: #include <ctype.h>",
      "",
      "[Removed Lines]",
      "4: #include <string.h>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e3faab528d402dda126df5cb9468fea15ba58ce0",
      "candidate_info": {
        "commit_hash": "e3faab528d402dda126df5cb9468fea15ba58ce0",
        "repo": "flori/json",
        "commit_url": "https://github.com/flori/json/commit/e3faab528d402dda126df5cb9468fea15ba58ce0",
        "files": [
          "ext/json/ext/generator/generator.c",
          "ext/json/ext/generator/generator.h"
        ],
        "message": "Fix arbitrary heap exposure problem",
        "before_after_code_files": [
          "ext/json/ext/generator/generator.c||ext/json/ext/generator/generator.c",
          "ext/json/ext/generator/generator.h||ext/json/ext/generator/generator.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ext/json/ext/generator/generator.c||ext/json/ext/generator/generator.c",
            "ext/json/ext/generator/generator.h||ext/json/ext/generator/generator.h"
          ],
          "candidate": [
            "ext/json/ext/generator/generator.c||ext/json/ext/generator/generator.c",
            "ext/json/ext/generator/generator.h||ext/json/ext/generator/generator.h"
          ]
        }
      },
      "candidate_diff": {
        "ext/json/ext/generator/generator.c||ext/json/ext/generator/generator.c": [
          "File: ext/json/ext/generator/generator.c -> ext/json/ext/generator/generator.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "308:   char *result;",
          "309:   if (len <= 0) return NULL;",
          "310:   result = ALLOC_N(char, len);",
          "312:   return result;",
          "313: }",
          "",
          "[Removed Lines]",
          "311:   memccpy(result, ptr, 0, len);",
          "",
          "[Added Lines]",
          "311:   memcpy(result, ptr, len);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1062:         }",
          "1063:     } else {",
          "1064:         if (state->indent) ruby_xfree(state->indent);",
          "1066:         state->indent_len = len;",
          "1067:     }",
          "1068:     return Qnil;",
          "",
          "[Removed Lines]",
          "1065:         state->indent = strdup(RSTRING_PTR(indent));",
          "",
          "[Added Lines]",
          "1065:         state->indent = fstrndup(RSTRING_PTR(indent), len);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1100:         }",
          "1101:     } else {",
          "1102:         if (state->space) ruby_xfree(state->space);",
          "1104:         state->space_len = len;",
          "1105:     }",
          "1106:     return Qnil;",
          "",
          "[Removed Lines]",
          "1103:         state->space = strdup(RSTRING_PTR(space));",
          "",
          "[Added Lines]",
          "1103:         state->space = fstrndup(RSTRING_PTR(space), len);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1136:         }",
          "1137:     } else {",
          "1138:         if (state->space_before) ruby_xfree(state->space_before);",
          "1140:         state->space_before_len = len;",
          "1141:     }",
          "1142:     return Qnil;",
          "",
          "[Removed Lines]",
          "1139:         state->space_before = strdup(RSTRING_PTR(space_before));",
          "",
          "[Added Lines]",
          "1139:         state->space_before = fstrndup(RSTRING_PTR(space_before), len);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1173:         }",
          "1174:     } else {",
          "1175:         if (state->object_nl) ruby_xfree(state->object_nl);",
          "1177:         state->object_nl_len = len;",
          "1178:     }",
          "1179:     return Qnil;",
          "",
          "[Removed Lines]",
          "1176:         state->object_nl = strdup(RSTRING_PTR(object_nl));",
          "",
          "[Added Lines]",
          "1176:         state->object_nl = fstrndup(RSTRING_PTR(object_nl), len);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1208:         }",
          "1209:     } else {",
          "1210:         if (state->array_nl) ruby_xfree(state->array_nl);",
          "1212:         state->array_nl_len = len;",
          "1213:     }",
          "1214:     return Qnil;",
          "",
          "[Removed Lines]",
          "1211:         state->array_nl = strdup(RSTRING_PTR(array_nl));",
          "",
          "[Added Lines]",
          "1211:         state->array_nl = fstrndup(RSTRING_PTR(array_nl), len);",
          "",
          "---------------"
        ],
        "ext/json/ext/generator/generator.h||ext/json/ext/generator/generator.h": [
          "File: ext/json/ext/generator/generator.h -> ext/json/ext/generator/generator.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #ifndef _GENERATOR_H_",
          "2: #define _GENERATOR_H_",
          "5: #include <math.h>",
          "6: #include <ctype.h>",
          "",
          "[Removed Lines]",
          "4: #include <string.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}