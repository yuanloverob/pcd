{
  "cve_id": "CVE-2014-3569",
  "cve_desc": "The ssl23_get_client_hello function in s23_srvr.c in OpenSSL 0.9.8zc, 1.0.0o, and 1.0.1j does not properly handle attempts to use unsupported protocols, which allows remote attackers to cause a denial of service (NULL pointer dereference and daemon crash) via an unexpected handshake, as demonstrated by an SSLv3 handshake to a no-ssl3 application with certain error handling.  NOTE: this issue became relevant after the CVE-2014-3568 fix.",
  "repo": "openssl/openssl",
  "patch_hash": "392fa7a952e97d82eac6958c81ed1e256e6b8ca5",
  "patch_info": {
    "commit_hash": "392fa7a952e97d82eac6958c81ed1e256e6b8ca5",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/392fa7a952e97d82eac6958c81ed1e256e6b8ca5",
    "files": [
      "ssl/s23_srvr.c"
    ],
    "message": "Keep old method in case of an unsupported protocol\n\nWhen we're configured with no-ssl3 and we receive an SSL v3 Client Hello, we set\nthe method to NULL.  We didn't used to do that, and it breaks things.  This is a\nregression introduced in 62f45cc27d07187b59551e4fad3db4e52ea73f2c.  Keep the old\nmethod since the code is not able to deal with a NULL method at this time.\n\nCVE-2014-3569, PR#3571\n\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>",
    "before_after_code_files": [
      "ssl/s23_srvr.c||ssl/s23_srvr.c"
    ]
  },
  "patch_diff": {
    "ssl/s23_srvr.c||ssl/s23_srvr.c": [
      "File: ssl/s23_srvr.c -> ssl/s23_srvr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "615:  if ((type == 2) || (type == 3))",
      "616:   {",
      "620:    {",
      "621:    SSLerr(SSL_F_SSL23_GET_CLIENT_HELLO,SSL_R_UNSUPPORTED_PROTOCOL);",
      "622:    goto err;",
      "623:    }",
      "625:   if (!ssl_init_wbio_buffer(s,1)) goto err;",
      "",
      "[Removed Lines]",
      "618:                 s->method = ssl23_get_server_method(s->version);",
      "619:   if (s->method == NULL)",
      "",
      "[Added Lines]",
      "618:   const SSL_METHOD *new_method;",
      "619:   new_method = ssl23_get_server_method(s->version);",
      "620:   if (new_method == NULL)",
      "625:   s->method = new_method;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b6ece4c1fcceb2ed740b75acc74463e92e363de6",
      "candidate_info": {
        "commit_hash": "b6ece4c1fcceb2ed740b75acc74463e92e363de6",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/b6ece4c1fcceb2ed740b75acc74463e92e363de6",
        "files": [
          "ssl/s23_srvr.c"
        ],
        "message": "Keep old method in case of an unsupported protocol\n\nWhen we're configured with no-ssl3 and we receive an SSL v3 Client Hello, we set\nthe method to NULL.  We didn't used to do that, and it breaks things.  This is a\nregression introduced in 62f45cc27d07187b59551e4fad3db4e52ea73f2c.  Keep the old\nmethod since the code is not able to deal with a NULL method at this time.\n\nCVE-2014-3569, PR#3571\n\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>\n(cherry picked from commit 392fa7a952e97d82eac6958c81ed1e256e6b8ca5)",
        "before_after_code_files": [
          "ssl/s23_srvr.c||ssl/s23_srvr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s23_srvr.c||ssl/s23_srvr.c"
          ],
          "candidate": [
            "ssl/s23_srvr.c||ssl/s23_srvr.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/s23_srvr.c||ssl/s23_srvr.c": [
          "File: ssl/s23_srvr.c -> ssl/s23_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "609:  if ((type == 2) || (type == 3))",
          "610:   {",
          "614:    {",
          "615:    SSLerr(SSL_F_SSL23_GET_CLIENT_HELLO,SSL_R_UNSUPPORTED_PROTOCOL);",
          "616:    goto err;",
          "617:    }",
          "619:   if (!ssl_init_wbio_buffer(s,1)) goto err;",
          "",
          "[Removed Lines]",
          "612:                 s->method = ssl23_get_server_method(s->version);",
          "613:   if (s->method == NULL)",
          "",
          "[Added Lines]",
          "612:   const SSL_METHOD *new_method;",
          "613:   new_method = ssl23_get_server_method(s->version);",
          "614:   if (new_method == NULL)",
          "619:   s->method = new_method;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "69c163ac811ab593e5ace4d409601fef9f8258b5",
      "candidate_info": {
        "commit_hash": "69c163ac811ab593e5ace4d409601fef9f8258b5",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/69c163ac811ab593e5ace4d409601fef9f8258b5",
        "files": [
          "ssl/s23_srvr.c"
        ],
        "message": "Keep old method in case of an unsupported protocol\n\nWhen we're configured with no-ssl3 and we receive an SSL v3 Client Hello, we set\nthe method to NULL.  We didn't used to do that, and it breaks things.  This is a\nregression introduced in 62f45cc27d07187b59551e4fad3db4e52ea73f2c.  Keep the old\nmethod since the code is not able to deal with a NULL method at this time.\n\nCVE-2014-3569, PR#3571\n\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>\n(cherry picked from commit 392fa7a952e97d82eac6958c81ed1e256e6b8ca5)",
        "before_after_code_files": [
          "ssl/s23_srvr.c||ssl/s23_srvr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s23_srvr.c||ssl/s23_srvr.c"
          ],
          "candidate": [
            "ssl/s23_srvr.c||ssl/s23_srvr.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/s23_srvr.c||ssl/s23_srvr.c": [
          "File: ssl/s23_srvr.c -> ssl/s23_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "561:  if ((type == 2) || (type == 3))",
          "562:   {",
          "566:    {",
          "567:    SSLerr(SSL_F_SSL23_GET_CLIENT_HELLO,SSL_R_UNSUPPORTED_PROTOCOL);",
          "568:    goto err;",
          "569:    }",
          "571:   if (!ssl_init_wbio_buffer(s,1)) goto err;",
          "",
          "[Removed Lines]",
          "564:                 s->method = ssl23_get_server_method(s->version);",
          "565:   if (s->method == NULL)",
          "",
          "[Added Lines]",
          "564:   const SSL_METHOD *new_method;",
          "565:   new_method = ssl23_get_server_method(s->version);",
          "566:   if (new_method == NULL)",
          "571:   s->method = new_method;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b82924741b4bd590da890619be671f4635e46c2b",
      "candidate_info": {
        "commit_hash": "b82924741b4bd590da890619be671f4635e46c2b",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/b82924741b4bd590da890619be671f4635e46c2b",
        "files": [
          "ssl/s23_srvr.c"
        ],
        "message": "Keep old method in case of an unsupported protocol\n\nWhen we're configured with no-ssl3 and we receive an SSL v3 Client Hello, we set\nthe method to NULL.  We didn't used to do that, and it breaks things.  This is a\nregression introduced in 62f45cc27d07187b59551e4fad3db4e52ea73f2c.  Keep the old\nmethod since the code is not able to deal with a NULL method at this time.\n\nCVE-2014-3569, PR#3571\n\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>\n(cherry picked from commit 392fa7a952e97d82eac6958c81ed1e256e6b8ca5)",
        "before_after_code_files": [
          "ssl/s23_srvr.c||ssl/s23_srvr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s23_srvr.c||ssl/s23_srvr.c"
          ],
          "candidate": [
            "ssl/s23_srvr.c||ssl/s23_srvr.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/s23_srvr.c||ssl/s23_srvr.c": [
          "File: ssl/s23_srvr.c -> ssl/s23_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "559:  if ((type == 2) || (type == 3))",
          "560:   {",
          "564:    {",
          "565:    SSLerr(SSL_F_SSL23_GET_CLIENT_HELLO,SSL_R_UNSUPPORTED_PROTOCOL);",
          "566:    goto err;",
          "567:    }",
          "569:   if (!ssl_init_wbio_buffer(s,1)) goto err;",
          "",
          "[Removed Lines]",
          "562:                 s->method = ssl23_get_server_method(s->version);",
          "563:   if (s->method == NULL)",
          "",
          "[Added Lines]",
          "562:   const SSL_METHOD *new_method;",
          "563:   new_method = ssl23_get_server_method(s->version);",
          "564:   if (new_method == NULL)",
          "569:   s->method = new_method;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6ce9687b5aba5391fc0de50e18779eb676d0e04d",
      "candidate_info": {
        "commit_hash": "6ce9687b5aba5391fc0de50e18779eb676d0e04d",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/6ce9687b5aba5391fc0de50e18779eb676d0e04d",
        "files": [
          "ssl/s23_srvr.c"
        ],
        "message": "Keep old method in case of an unsupported protocol\n\nWhen we're configured with no-ssl3 and we receive an SSL v3 Client Hello, we set\nthe method to NULL.  We didn't used to do that, and it breaks things.  This is a\nregression introduced in 62f45cc27d07187b59551e4fad3db4e52ea73f2c.  Keep the old\nmethod since the code is not able to deal with a NULL method at this time.\n\nCVE-2014-3569, PR#3571\n\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>\n(cherry picked from commit 392fa7a952e97d82eac6958c81ed1e256e6b8ca5)",
        "before_after_code_files": [
          "ssl/s23_srvr.c||ssl/s23_srvr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s23_srvr.c||ssl/s23_srvr.c"
          ],
          "candidate": [
            "ssl/s23_srvr.c||ssl/s23_srvr.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/s23_srvr.c||ssl/s23_srvr.c": [
          "File: ssl/s23_srvr.c -> ssl/s23_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "602:  if ((type == 2) || (type == 3))",
          "603:   {",
          "607:    {",
          "608:    SSLerr(SSL_F_SSL23_GET_CLIENT_HELLO,SSL_R_UNSUPPORTED_PROTOCOL);",
          "609:    goto err;",
          "610:    }",
          "612:   if (!ssl_init_wbio_buffer(s,1)) goto err;",
          "",
          "[Removed Lines]",
          "605:                 s->method = ssl23_get_server_method(s->version);",
          "606:   if (s->method == NULL)",
          "",
          "[Added Lines]",
          "605:   const SSL_METHOD *new_method;",
          "606:   new_method = ssl23_get_server_method(s->version);",
          "607:   if (new_method == NULL)",
          "612:   s->method = new_method;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "62f45cc27d07187b59551e4fad3db4e52ea73f2c",
      "candidate_info": {
        "commit_hash": "62f45cc27d07187b59551e4fad3db4e52ea73f2c",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/62f45cc27d07187b59551e4fad3db4e52ea73f2c",
        "files": [
          "ssl/s23_clnt.c",
          "ssl/s23_srvr.c"
        ],
        "message": "Fix no-ssl3 configuration option\n\nCVE-2014-3568\n\nReviewed-by: Emilia Kasper <emilia@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "ssl/s23_clnt.c||ssl/s23_clnt.c",
          "ssl/s23_srvr.c||ssl/s23_srvr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s23_srvr.c||ssl/s23_srvr.c"
          ],
          "candidate": [
            "ssl/s23_srvr.c||ssl/s23_srvr.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/s23_clnt.c||ssl/s23_clnt.c": [
          "File: ssl/s23_clnt.c -> ssl/s23_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:  if (ver == SSL2_VERSION)",
          "126:   return(SSLv2_client_method());",
          "127: #endif",
          "128:  if (ver == SSL3_VERSION)",
          "129:   return(SSLv3_client_method());",
          "131:   return(TLSv1_client_method());",
          "132:  else if (ver == TLS1_1_VERSION)",
          "133:   return(TLSv1_1_client_method());",
          "",
          "[Removed Lines]",
          "130:  else if (ver == TLS1_VERSION)",
          "",
          "[Added Lines]",
          "128: #ifndef OPENSSL_NO_SSL3",
          "131: #endif",
          "132:  if (ver == TLS1_VERSION)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "714:   {",
          "717:   if ((p[2] == SSL3_VERSION_MINOR) &&",
          "718:    !(s->options & SSL_OP_NO_SSLv3))",
          "719:    {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "719: #ifndef OPENSSL_NO_SSL3",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "728:    s->version=SSL3_VERSION;",
          "729:    s->method=SSLv3_client_method();",
          "730:    }",
          "732:    !(s->options & SSL_OP_NO_TLSv1))",
          "733:    {",
          "734:    s->version=TLS1_VERSION;",
          "",
          "[Removed Lines]",
          "731:   else if ((p[2] == TLS1_VERSION_MINOR) &&",
          "",
          "[Added Lines]",
          "734:   else",
          "735: #endif",
          "736:   if ((p[2] == TLS1_VERSION_MINOR) &&",
          "",
          "---------------"
        ],
        "ssl/s23_srvr.c||ssl/s23_srvr.c": [
          "File: ssl/s23_srvr.c -> ssl/s23_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:  if (ver == SSL2_VERSION)",
          "128:   return(SSLv2_server_method());",
          "129: #endif",
          "130:  if (ver == SSL3_VERSION)",
          "131:   return(SSLv3_server_method());",
          "133:   return(TLSv1_server_method());",
          "134:  else if (ver == TLS1_1_VERSION)",
          "135:   return(TLSv1_1_server_method());",
          "",
          "[Removed Lines]",
          "132:  else if (ver == TLS1_VERSION)",
          "",
          "[Added Lines]",
          "130: #ifndef OPENSSL_NO_SSL3",
          "133: #endif",
          "134:  if (ver == TLS1_VERSION)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "613:  if ((type == 2) || (type == 3))",
          "614:   {",
          "617:   if (!ssl_init_wbio_buffer(s,1)) goto err;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "618:                 s->method = ssl23_get_server_method(s->version);",
          "619:   if (s->method == NULL)",
          "620:    {",
          "621:    SSLerr(SSL_F_SSL23_GET_CLIENT_HELLO,SSL_R_UNSUPPORTED_PROTOCOL);",
          "622:    goto err;",
          "623:    }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "640:    s->s3->rbuf.left=0;",
          "641:    s->s3->rbuf.offset=0;",
          "642:    }",
          "652:   s->client_version=(v[0]<<8)|v[1];",
          "653: #endif",
          "",
          "[Removed Lines]",
          "643:   if (s->version == TLS1_2_VERSION)",
          "644:    s->method = TLSv1_2_server_method();",
          "645:   else if (s->version == TLS1_1_VERSION)",
          "646:    s->method = TLSv1_1_server_method();",
          "647:   else if (s->version == TLS1_VERSION)",
          "648:    s->method = TLSv1_server_method();",
          "649:   else",
          "650:    s->method = SSLv3_server_method();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}