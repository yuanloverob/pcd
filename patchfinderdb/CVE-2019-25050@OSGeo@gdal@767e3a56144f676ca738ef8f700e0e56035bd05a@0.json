{
  "cve_id": "CVE-2019-25050",
  "cve_desc": "netCDF in GDAL 2.4.2 through 3.0.4 has a stack-based buffer overflow in nc4_get_att (called from nc4_get_att_tc and nc_get_att_text) and in uffd_cleanup (called from netCDFDataset::~netCDFDataset and netCDFDataset::~netCDFDataset).",
  "repo": "OSGeo/gdal",
  "patch_hash": "767e3a56144f676ca738ef8f700e0e56035bd05a",
  "patch_info": {
    "commit_hash": "767e3a56144f676ca738ef8f700e0e56035bd05a",
    "repo": "OSGeo/gdal",
    "commit_url": "https://github.com/OSGeo/gdal/commit/767e3a56144f676ca738ef8f700e0e56035bd05a",
    "files": [
      "gdal/frmts/netcdf/netcdfsg.cpp"
    ],
    "message": "netCDF: avoid buffer overflow. master only. Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=15143. Credit to OSS Fuzz",
    "before_after_code_files": [
      "gdal/frmts/netcdf/netcdfsg.cpp||gdal/frmts/netcdf/netcdfsg.cpp"
    ]
  },
  "patch_diff": {
    "gdal/frmts/netcdf/netcdfsg.cpp||gdal/frmts/netcdf/netcdfsg.cpp": [
      "File: gdal/frmts/netcdf/netcdfsg.cpp -> gdal/frmts/netcdf/netcdfsg.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "55:     std::string& attrf(int ncid, int varId, const char * attrName, std::string& alloc)",
      "56:     {",
      "59:         size_t len = 0;",
      "60:         nc_inq_attlen(ncid, varId, attrName, &len);",
      "62:         if(len < 1)",
      "63:         {",
      "64:             return alloc;",
      "65:         }",
      "77:         return alloc;",
      "78:     }",
      "",
      "[Removed Lines]",
      "57:         alloc = \"\";",
      "67:         char attr_vals[NC_MAX_NAME + 1];",
      "68:         memset(attr_vals, 0, NC_MAX_NAME + 1);",
      "71:         if(nc_get_att_text(ncid, varId, attrName, attr_vals) != NC_NOERR)",
      "72:         {",
      "73:             return alloc;",
      "74:         }",
      "76:         alloc = std::string(attr_vals);",
      "",
      "[Added Lines]",
      "62:             alloc.clear();",
      "66:         alloc.resize(len);",
      "67:         memset(&alloc[0], 0, len);",
      "70:         nc_get_att_text(ncid, varId, attrName, &alloc[0]);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f956a3c6ff43a877a63ee1199c5e0092c11a8c31",
      "candidate_info": {
        "commit_hash": "f956a3c6ff43a877a63ee1199c5e0092c11a8c31",
        "repo": "OSGeo/gdal",
        "commit_url": "https://github.com/OSGeo/gdal/commit/f956a3c6ff43a877a63ee1199c5e0092c11a8c31",
        "files": [
          "autotest/gdrivers/data/netcdf-sg/Yahara_alb.nc",
          "autotest/gdrivers/data/netcdf-sg/arbitrary_axis_order_test.nc",
          "autotest/gdrivers/data/netcdf-sg/bad_feature_test.nc",
          "autotest/gdrivers/data/netcdf-sg/cf1.8_states.nc",
          "autotest/gdrivers/data/netcdf-sg/flipped_axes_test.nc",
          "autotest/gdrivers/data/netcdf-sg/line3D_test.nc",
          "autotest/gdrivers/data/netcdf-sg/line_test.nc",
          "autotest/gdrivers/data/netcdf-sg/missing_node_counts_test.nc",
          "autotest/gdrivers/data/netcdf-sg/multiline3D_test.nc",
          "autotest/gdrivers/data/netcdf-sg/multiline_test.nc",
          "autotest/gdrivers/data/netcdf-sg/multiple_containers.nc",
          "autotest/gdrivers/data/netcdf-sg/multipoint3D_test.nc",
          "autotest/gdrivers/data/netcdf-sg/multipoint_test.nc",
          "autotest/gdrivers/data/netcdf-sg/multipolygon3D_test.nc",
          "autotest/gdrivers/data/netcdf-sg/multipolygon_test.nc",
          "autotest/gdrivers/data/netcdf-sg/no_geometry_type.nc",
          "autotest/gdrivers/data/netcdf-sg/no_nodecoords.nc",
          "autotest/gdrivers/data/netcdf-sg/point3D_test.nc",
          "autotest/gdrivers/data/netcdf-sg/point_test.nc",
          "autotest/gdrivers/data/netcdf-sg/polygon3D_test.nc",
          "autotest/gdrivers/data/netcdf-sg/polygon_test.nc",
          "autotest/gdrivers/data/netcdf-sg/serpenski3D_2nd.nc",
          "autotest/gdrivers/data/netcdf-sg/serpenski_2nd.nc",
          "autotest/gdrivers/data/netcdf-sg/unequal_xy.nc",
          "autotest/gdrivers/netcdf.py",
          "gdal/doc/source/drivers/vector/netcdf.rst",
          "gdal/frmts/netcdf/GNUmakefile",
          "gdal/frmts/netcdf/makefile.vc",
          "gdal/frmts/netcdf/netcdfdataset.cpp",
          "gdal/frmts/netcdf/netcdfdataset.h",
          "gdal/frmts/netcdf/netcdflayer.cpp",
          "gdal/frmts/netcdf/netcdflayersg.cpp",
          "gdal/frmts/netcdf/netcdfsg.cpp",
          "gdal/frmts/netcdf/netcdfsg.h"
        ],
        "message": "netCDF: allow Reading from CF-1.8 Encoded Geometries (#1287) (#1541)",
        "before_after_code_files": [
          "autotest/gdrivers/netcdf.py||autotest/gdrivers/netcdf.py",
          "gdal/frmts/netcdf/makefile.vc||gdal/frmts/netcdf/makefile.vc",
          "gdal/frmts/netcdf/netcdfdataset.cpp||gdal/frmts/netcdf/netcdfdataset.cpp",
          "gdal/frmts/netcdf/netcdfdataset.h||gdal/frmts/netcdf/netcdfdataset.h",
          "gdal/frmts/netcdf/netcdflayer.cpp||gdal/frmts/netcdf/netcdflayer.cpp",
          "gdal/frmts/netcdf/netcdflayersg.cpp||gdal/frmts/netcdf/netcdflayersg.cpp",
          "gdal/frmts/netcdf/netcdfsg.cpp||gdal/frmts/netcdf/netcdfsg.cpp",
          "gdal/frmts/netcdf/netcdfsg.h||gdal/frmts/netcdf/netcdfsg.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "autotest/gdrivers/netcdf.py||autotest/gdrivers/netcdf.py": [
          "File: autotest/gdrivers/netcdf.py -> autotest/gdrivers/netcdf.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3064:     ut = gdaltest.GDALTest('netcdf', filename, 1, checksum, options=options)",
          "3065:     getattr(ut, testfunction)()",
          "3067: ###############################################################################",
          "",
          "[Removed Lines]",
          "3068: #  other tests",
          "",
          "[Added Lines]",
          "3069: #  simple geometry tests",
          "3071: #  basic tests",
          "3072: def test_bad_cf1_8():",
          "3073:     # basic resilience test, make sure it can exit \"gracefully\"",
          "3074:     # if not it will abort all tests",
          "3075:     bad_geometry = ogr.Open(\"data/netcdf-sg/no_geometry_type.nc\")",
          "3076:     bad_feature = ogr.Open(\"data/netcdf-sg/bad_feature_test.nc\")",
          "3077:     missing_node_counts_test = ogr.Open(\"data/netcdf-sg/missing_node_counts_test.nc\")",
          "3078:     uneq_x_y = ogr.Open(\"data/netcdf-sg/unequal_xy.nc\")",
          "3080:     # error IS fatal",
          "3081:     assert(bad_geometry == None)",
          "3082:     assert(bad_feature == None)",
          "3083:     assert(missing_node_counts_test == None)",
          "3084:     assert(uneq_x_y == None)",
          "3086: def test_point_read():",
          "3087:     if gdaltest.netcdf_drv is None:",
          "3088:         pytest.skip()",
          "3089:     singleton_pt = ogr.Open(\"data/netcdf-sg/point_test.nc\")",
          "3091:     lc = singleton_pt.GetLayerCount()",
          "3092:     assert(lc == 1)",
          "3093:     layer = singleton_pt.GetLayerByName(\"names_geometry\")",
          "3094:     assert(layer != None)",
          "3096:     # Test each geometry directly",
          "3098:     ft = layer.GetNextFeature()",
          "3099:     ft_geo = ft.GetGeometryRef()",
          "3100:     ft_wkt = ft_geo.ExportToWkt()",
          "3101:     assert(ft_wkt == \"POINT (1 -1)\")",
          "3103:     ft = layer.GetNextFeature()",
          "3104:     ft_geo = ft.GetGeometryRef()",
          "3105:     ft_wkt = ft_geo.ExportToWkt()",
          "3106:     assert(ft_wkt == \"POINT (2 -2)\")",
          "3108:     ft = layer.GetNextFeature()",
          "3109:     ft_geo = ft.GetGeometryRef()",
          "3110:     ft_wkt = ft_geo.ExportToWkt()",
          "3111:     assert(ft_wkt == \"POINT (3 -3)\")",
          "3113:     ft = layer.GetNextFeature()",
          "3114:     ft_geo = ft.GetGeometryRef()",
          "3115:     ft_wkt = ft_geo.ExportToWkt()",
          "3116:     assert(ft_wkt == \"POINT (4 -4)\")",
          "3118:     ft = layer.GetNextFeature()",
          "3119:     ft_geo = ft.GetGeometryRef()",
          "3120:     ft_wkt = ft_geo.ExportToWkt()",
          "3121:     assert(ft_wkt == \"POINT (5 -5)\")",
          "3123: def test_point3D_read():",
          "3124:     if gdaltest.netcdf_drv is None:",
          "3125:         pytest.skip()",
          "3126:     singleton_pt = ogr.Open(\"data/netcdf-sg/point3D_test.nc\")",
          "3128:     lc = singleton_pt.GetLayerCount()",
          "3129:     assert(lc == 1)",
          "3130:     layer = singleton_pt.GetLayerByName(\"names_geometry\")",
          "3131:     assert(layer != None)",
          "3133:     # Test each geometry directly",
          "3135:     ft = layer.GetNextFeature()",
          "3136:     ft_geo = ft.GetGeometryRef()",
          "3137:     ft_wkt = ft_geo.ExportToWkt()",
          "3138:     assert(ft_wkt == \"POINT (1 -1 1)\")",
          "3140:     ft = layer.GetNextFeature()",
          "3141:     ft_geo = ft.GetGeometryRef()",
          "3142:     ft_wkt = ft_geo.ExportToWkt()",
          "3143:     assert(ft_wkt == \"POINT (2 -2 -2)\")",
          "3145:     ft = layer.GetNextFeature()",
          "3146:     ft_geo = ft.GetGeometryRef()",
          "3147:     ft_wkt = ft_geo.ExportToWkt()",
          "3148:     assert(ft_wkt == \"POINT (3 -3 3)\")",
          "3150:     ft = layer.GetNextFeature()",
          "3151:     ft_geo = ft.GetGeometryRef()",
          "3152:     ft_wkt = ft_geo.ExportToWkt()",
          "3153:     assert(ft_wkt == \"POINT (4 -4 -4)\")",
          "3155:     ft = layer.GetNextFeature()",
          "3156:     ft_geo = ft.GetGeometryRef()",
          "3157:     ft_wkt = ft_geo.ExportToWkt()",
          "3158:     assert(ft_wkt == \"POINT (5 -5 5)\")",
          "3160: def test_multipoint_read():",
          "3161:     if gdaltest.netcdf_drv is None:",
          "3162:         pytest.skip()",
          "3163:     multipoints = ogr.Open(\"data/netcdf-sg/multipoint_test.nc\")",
          "3164:     assert(multipoints != None)",
          "3166:     lc = multipoints.GetLayerCount()",
          "3167:     assert(lc == 1)",
          "3168:     layer = multipoints.GetLayerByName(\"names_geometry\")",
          "3169:     assert(layer != None)",
          "3171:     ft = layer.GetNextFeature()",
          "3172:     ft_geo = ft.GetGeometryRef()",
          "3173:     ft_wkt = ft_geo.ExportToWkt()",
          "3174:     assert(ft_wkt == \"MULTIPOINT (1 -1,2 -2,3 -3,4 -4)\")",
          "3176:     ft = layer.GetNextFeature()",
          "3177:     ft_geo = ft.GetGeometryRef()",
          "3178:     ft_wkt = ft_geo.ExportToWkt()",
          "3179:     assert(ft_wkt == \"MULTIPOINT (5 -5,6 -6,7 -7,8 -8)\")",
          "3181:     ft = layer.GetNextFeature()",
          "3182:     ft_geo = ft.GetGeometryRef()",
          "3183:     ft_wkt = ft_geo.ExportToWkt()",
          "3184:     assert(ft_wkt == \"MULTIPOINT (9 -9,10 -10,-1 1,-2 2)\")",
          "3186:     ft = layer.GetNextFeature()",
          "3187:     ft_geo = ft.GetGeometryRef()",
          "3188:     ft_wkt = ft_geo.ExportToWkt()",
          "3189:     assert(ft_wkt == \"MULTIPOINT (-3 3,-4 4,-5 5,-6 6)\")",
          "3191:     ft = layer.GetNextFeature()",
          "3192:     ft_geo = ft.GetGeometryRef()",
          "3193:     ft_wkt = ft_geo.ExportToWkt()",
          "3194:     assert(ft_wkt == \"MULTIPOINT (-7 7,-8 8,-9 9,-10 10)\")",
          "3196: def test_multipoint3D_read():",
          "3197:     if gdaltest.netcdf_drv is None:",
          "3198:         pytest.skip()",
          "3199:     multipoints = ogr.Open(\"data/netcdf-sg/multipoint3D_test.nc\")",
          "3200:     assert(multipoints != None)",
          "3202:     lc = multipoints.GetLayerCount()",
          "3203:     assert(lc == 1)",
          "3204:     layer = multipoints.GetLayerByName(\"names_geometry\")",
          "3205:     assert(layer != None)",
          "3207:     ft = layer.GetNextFeature()",
          "3208:     ft_geo = ft.GetGeometryRef()",
          "3209:     ft_wkt = ft_geo.ExportToWkt()",
          "3210:     assert(ft_wkt == \"MULTIPOINT (1 -1 1,2 -2 -2,3 -3 3,4 -4 -4)\")",
          "3212:     ft = layer.GetNextFeature()",
          "3213:     ft_geo = ft.GetGeometryRef()",
          "3214:     ft_wkt = ft_geo.ExportToWkt()",
          "3215:     assert(ft_wkt == \"MULTIPOINT (5 -5 5,6 -6 -6,7 -7 7,8 -8 -8)\")",
          "3217:     ft = layer.GetNextFeature()",
          "3218:     ft_geo = ft.GetGeometryRef()",
          "3219:     ft_wkt = ft_geo.ExportToWkt()",
          "3220:     assert(ft_wkt == \"MULTIPOINT (9 -9 9,10 -10 -10,-1 1 -1,-2 2 2)\")",
          "3222:     ft = layer.GetNextFeature()",
          "3223:     ft_geo = ft.GetGeometryRef()",
          "3224:     ft_wkt = ft_geo.ExportToWkt()",
          "3225:     assert(ft_wkt == \"MULTIPOINT (-3 3 -3,-4 4 4,-5 5 -5,-6 6 6)\")",
          "3227:     ft = layer.GetNextFeature()",
          "3228:     ft_geo = ft.GetGeometryRef()",
          "3229:     ft_wkt = ft_geo.ExportToWkt()",
          "3230:     assert(ft_wkt == \"MULTIPOINT (-7 7 -7,-8 8 8,-9 9 -9,-10 10 10)\")",
          "3232: def test_line_read():",
          "3233:     if gdaltest.netcdf_drv is None:",
          "3234:         pytest.skip()",
          "3235:     line = ogr.Open(\"data/netcdf-sg/line_test.nc\")",
          "3236:     assert(line != None)",
          "3238:     lc = line.GetLayerCount()",
          "3239:     assert(lc == 1)",
          "3240:     layer = line.GetLayerByName(\"names_geometry\")",
          "3241:     assert(layer != None)",
          "3243:     ft = layer.GetNextFeature()",
          "3244:     ft_geo = ft.GetGeometryRef()",
          "3245:     ft_wkt = ft_geo.ExportToWkt()",
          "3246:     assert(ft_wkt == \"LINESTRING (1 -1,2 -2,3 -3,4 -4)\")",
          "3248:     ft = layer.GetNextFeature()",
          "3249:     ft_geo = ft.GetGeometryRef()",
          "3250:     ft_wkt = ft_geo.ExportToWkt()",
          "3251:     assert(ft_wkt == \"LINESTRING (5 -5,6 -6,7 -7,8 -8)\")",
          "3253:     ft = layer.GetNextFeature()",
          "3254:     ft_geo = ft.GetGeometryRef()",
          "3255:     ft_wkt = ft_geo.ExportToWkt()",
          "3256:     assert(ft_wkt == \"LINESTRING (9 -9,10 -10,-1 1,-2 2)\")",
          "3258:     ft = layer.GetNextFeature()",
          "3259:     ft_geo = ft.GetGeometryRef()",
          "3260:     ft_wkt = ft_geo.ExportToWkt()",
          "3261:     assert(ft_wkt == \"LINESTRING (-3 3,-4 4,-5 5,-6 6)\")",
          "3263:     ft = layer.GetNextFeature()",
          "3264:     ft_geo = ft.GetGeometryRef()",
          "3265:     ft_wkt = ft_geo.ExportToWkt()",
          "3266:     assert(ft_wkt == \"LINESTRING (-7 7,-8 8,-9 9,-10 10)\")",
          "3268: def test_line3D_read():",
          "3269:     if gdaltest.netcdf_drv is None:",
          "3270:         pytest.skip()",
          "3271:     line = ogr.Open(\"data/netcdf-sg/line3D_test.nc\")",
          "3272:     assert(line != None)",
          "3274:     lc = line.GetLayerCount()",
          "3275:     assert(lc == 1)",
          "3276:     layer = line.GetLayerByName(\"names_geometry\")",
          "3277:     assert(layer != None)",
          "3279:     ft = layer.GetNextFeature()",
          "3280:     ft_geo = ft.GetGeometryRef()",
          "3281:     ft_wkt = ft_geo.ExportToWkt()",
          "3282:     assert(ft_wkt == \"LINESTRING (1 -1 1,2 -2 -2,3 -3 3,4 -4 -4)\")",
          "3284:     ft = layer.GetNextFeature()",
          "3285:     ft_geo = ft.GetGeometryRef()",
          "3286:     ft_wkt = ft_geo.ExportToWkt()",
          "3287:     assert(ft_wkt == \"LINESTRING (5 -5 5,6 -6 -6,7 -7 7,8 -8 -8)\")",
          "3289:     ft = layer.GetNextFeature()",
          "3290:     ft_geo = ft.GetGeometryRef()",
          "3291:     ft_wkt = ft_geo.ExportToWkt()",
          "3292:     assert(ft_wkt == \"LINESTRING (9 -9 9,10 -10 -10,-1 1 1,-2 2 -2)\")",
          "3294:     ft = layer.GetNextFeature()",
          "3295:     ft_geo = ft.GetGeometryRef()",
          "3296:     ft_wkt = ft_geo.ExportToWkt()",
          "3297:     assert(ft_wkt == \"LINESTRING (-3 3 3,-4 4 -4,-5 5 5,-6 6 -6)\")",
          "3299:     ft = layer.GetNextFeature()",
          "3300:     ft_geo = ft.GetGeometryRef()",
          "3301:     ft_wkt = ft_geo.ExportToWkt()",
          "3302:     assert(ft_wkt == \"LINESTRING (-7 7 7,-8 8 -8,-9 9 9,-10 10 -10)\")",
          "3304: def test_multiline_read():",
          "3305:     if gdaltest.netcdf_drv is None:",
          "3306:         pytest.skip()",
          "3307:     multiline = ogr.Open(\"data/netcdf-sg/multiline_test.nc\")",
          "3308:     assert(multiline != None)",
          "3310:     lc = multiline.GetLayerCount()",
          "3311:     assert(lc == 1)",
          "3312:     layer = multiline.GetLayerByName(\"names_geometry\")",
          "3313:     assert(layer != None)",
          "3315:     ft = layer.GetNextFeature()",
          "3316:     ft_geo = ft.GetGeometryRef()",
          "3317:     ft_wkt = ft_geo.ExportToWkt()",
          "3318:     assert(ft_wkt == \"MULTILINESTRING ((1 -1),(2 -2,3 -3,4 -4))\")",
          "3320:     ft = layer.GetNextFeature()",
          "3321:     ft_geo = ft.GetGeometryRef()",
          "3322:     ft_wkt = ft_geo.ExportToWkt()",
          "3323:     assert(ft_wkt == \"MULTILINESTRING ((5 -5,6 -6,7 -7,8 -8))\")",
          "3325:     ft = layer.GetNextFeature()",
          "3326:     ft_geo = ft.GetGeometryRef()",
          "3327:     ft_wkt = ft_geo.ExportToWkt()",
          "3328:     assert(ft_wkt == \"MULTILINESTRING ((9 -9,10 -10,-1 1),(-2 2))\")",
          "3330:     ft = layer.GetNextFeature()",
          "3331:     ft_geo = ft.GetGeometryRef()",
          "3332:     ft_wkt = ft_geo.ExportToWkt()",
          "3333:     assert(ft_wkt == \"MULTILINESTRING ((-3 3,-4 4),(-5 5,-6 6))\")",
          "3335:     ft = layer.GetNextFeature()",
          "3336:     ft_geo = ft.GetGeometryRef()",
          "3337:     ft_wkt = ft_geo.ExportToWkt()",
          "3338:     assert(ft_wkt == \"MULTILINESTRING ((-7 7,-8 8,-9 9,-10 10))\")",
          "3340: def test_multiline3D_read():",
          "3341:     if gdaltest.netcdf_drv is None:",
          "3342:         pytest.skip()",
          "3343:     multiline = ogr.Open(\"data/netcdf-sg/multiline3D_test.nc\")",
          "3344:     assert(multiline != None)",
          "3346:     lc = multiline.GetLayerCount()",
          "3347:     assert(lc == 1)",
          "3348:     layer = multiline.GetLayerByName(\"names_geometry\")",
          "3349:     assert(layer != None)",
          "3351:     ft = layer.GetNextFeature()",
          "3352:     ft_geo = ft.GetGeometryRef()",
          "3353:     ft_wkt = ft_geo.ExportToWkt()",
          "3354:     assert(ft_wkt == \"MULTILINESTRING ((1 -1 -1),(2 -2 2,3 -3 -3,4 -4 4))\")",
          "3356:     ft = layer.GetNextFeature()",
          "3357:     ft_geo = ft.GetGeometryRef()",
          "3358:     ft_wkt = ft_geo.ExportToWkt()",
          "3359:     assert(ft_wkt == \"MULTILINESTRING ((5 -5 -5,6 -6 6,7 -7 -7,8 -8 8))\")",
          "3361:     ft = layer.GetNextFeature()",
          "3362:     ft_geo = ft.GetGeometryRef()",
          "3363:     ft_wkt = ft_geo.ExportToWkt()",
          "3364:     assert(ft_wkt == \"MULTILINESTRING ((9 -9 -9,10 -10 10,-1 1 -1),(-2 2 2))\")",
          "3366:     ft = layer.GetNextFeature()",
          "3367:     ft_geo = ft.GetGeometryRef()",
          "3368:     ft_wkt = ft_geo.ExportToWkt()",
          "3369:     assert(ft_wkt == \"MULTILINESTRING ((-3 3 -3,-4 4 4),(-5 5 -5,-6 6 6))\")",
          "3371:     ft = layer.GetNextFeature()",
          "3372:     ft_geo = ft.GetGeometryRef()",
          "3373:     ft_wkt = ft_geo.ExportToWkt()",
          "3374:     assert(ft_wkt == \"MULTILINESTRING ((-7 7 -7,-8 8 8,-9 9 -9,-10 10 10))\")",
          "3376: def test_polygon_read():",
          "3377:     if gdaltest.netcdf_drv is None:",
          "3378:         pytest.skip()",
          "3379:     polygon = ogr.Open(\"data/netcdf-sg/polygon_test.nc\")",
          "3380:     assert(polygon != None)",
          "3382:     lc = polygon.GetLayerCount()",
          "3383:     assert(lc == 1)",
          "3384:     layer = polygon.GetLayerByName(\"names_geometry\")",
          "3386:     ft = layer.GetNextFeature()",
          "3387:     ft_geo = ft.GetGeometryRef()",
          "3388:     ft_wkt = ft_geo.ExportToWkt()",
          "3389:     assert(ft_wkt == \"POLYGON ((0 0,1 0,1 1,0 0))\")",
          "3391:     ft = layer.GetNextFeature()",
          "3392:     ft_geo = ft.GetGeometryRef()",
          "3393:     ft_wkt = ft_geo.ExportToWkt()",
          "3394:     assert(ft_wkt == \"POLYGON ((3 0,4 0,4 1,3 1,3 0))\")",
          "3396: def test_polygon3D_read():",
          "3397:     if gdaltest.netcdf_drv is None:",
          "3398:         pytest.skip()",
          "3399:     polygon = ogr.Open(\"data/netcdf-sg/polygon3D_test.nc\")",
          "3400:     assert(polygon != None)",
          "3402:     lc = polygon.GetLayerCount()",
          "3403:     assert(lc == 1)",
          "3404:     layer = polygon.GetLayerByName(\"names_geometry\")",
          "3406:     ft = layer.GetNextFeature()",
          "3407:     ft_geo = ft.GetGeometryRef()",
          "3408:     ft_wkt = ft_geo.ExportToWkt()",
          "3409:     assert(ft_wkt == \"POLYGON ((0 0 1,1 0 2,1 1 2,0 0 1))\")",
          "3411:     ft = layer.GetNextFeature()",
          "3412:     ft_geo = ft.GetGeometryRef()",
          "3413:     ft_wkt = ft_geo.ExportToWkt()",
          "3414:     assert(ft_wkt == \"POLYGON ((3 0 1,4 0 1,4 1 1,3 1 1,3 0 1))\")",
          "3416: def test_multipolygon_read():",
          "3417:     if gdaltest.netcdf_drv is None:",
          "3418:         pytest.skip()",
          "3419:     multipolygon = ogr.Open(\"data/netcdf-sg/multipolygon_test.nc\")",
          "3420:     assert(multipolygon != None)",
          "3422:     lc = multipolygon.GetLayerCount()",
          "3423:     assert(lc == 1)",
          "3424:     layer = multipolygon.GetLayerByName(\"names_geometry\")",
          "3426:     ft = layer.GetNextFeature()",
          "3427:     ft_geo = ft.GetGeometryRef()",
          "3428:     ft_wkt = ft_geo.ExportToWkt()",
          "3429:     assert(ft_wkt == \"MULTIPOLYGON (((0 0,1 0,1 1,0 0)))\")",
          "3431:     ft = layer.GetNextFeature()",
          "3432:     ft_geo = ft.GetGeometryRef()",
          "3433:     ft_wkt = ft_geo.ExportToWkt()",
          "3434:     assert(ft_wkt == \"MULTIPOLYGON (((3 0,4 0,4 1,3 0)),((3 0,4 1,3 1,3 0)))\")",
          "3436: def test_multipolygon3D_read():",
          "3437:     if gdaltest.netcdf_drv is None:",
          "3438:         pytest.skip()",
          "3439:     multipolygon = ogr.Open(\"data/netcdf-sg/multipolygon3D_test.nc\")",
          "3440:     assert(multipolygon != None)",
          "3442:     lc = multipolygon.GetLayerCount()",
          "3443:     assert(lc == 1)",
          "3444:     layer = multipolygon.GetLayerByName(\"names_geometry\")",
          "3446:     ft = layer.GetNextFeature()",
          "3447:     ft_geo = ft.GetGeometryRef()",
          "3448:     ft_wkt = ft_geo.ExportToWkt()",
          "3449:     assert(ft_wkt == \"MULTIPOLYGON (((0 0 0,1 0 5,1 1 5,0 0 0)))\")",
          "3451:     ft = layer.GetNextFeature()",
          "3452:     ft_geo = ft.GetGeometryRef()",
          "3453:     ft_wkt = ft_geo.ExportToWkt()",
          "3454:     assert(ft_wkt == \"MULTIPOLYGON (((3 0 5,4 0 10,4 1 10,3 0 5)),((3 0 10,4 1 15,3 1 15,3 0 10)))\")",
          "3456: def test_serpenski_two_ring():",
          "3457:     if gdaltest.netcdf_drv is None:",
          "3458:         pytest.skip()",
          "3459:     s = ogr.Open(\"data/netcdf-sg/serpenski_2nd.nc\")",
          "3461:     assert(s != None)",
          "3463:     lc = s.GetLayerCount()",
          "3464:     assert(lc == 1)",
          "3465:     good_layer = s.GetLayerByName(\"serpenski\")",
          "3466:     assert(good_layer != None) # real layer",
          "3468:     assert(good_layer.GetFeatureCount() == 1)",
          "3469:     assert(good_layer.GetGeomType() == ogr.wkbMultiPolygon)",
          "3471:     serpenski = good_layer.GetNextFeature()",
          "3472:     triangle = serpenski.GetGeometryRef()",
          "3473:     st_wkt = triangle.ExportToWkt()",
          "3475:     assert(st_wkt == \\",
          "3476:  \"MULTIPOLYGON (((0 0,1 0,0.5 0.866025403784439,0 0),(0.5 0.0,0.75 0.433012701892219,0.25 0.433012701892219,0.5 0.0)))\")",
          "3478: def test_serpenski3D_two_ring():",
          "3479:     if gdaltest.netcdf_drv is None:",
          "3480:         pytest.skip()",
          "3481:     s = ogr.Open(\"data/netcdf-sg/serpenski3D_2nd.nc\")",
          "3483:     assert(s != None)",
          "3485:     lc = s.GetLayerCount();",
          "3486:     assert(lc == 1)",
          "3487:     good_layer = s.GetLayerByName(\"serpenski\")",
          "3488:     assert(good_layer != None) # real layer",
          "3490:     assert(good_layer.GetFeatureCount() == 1)",
          "3491:     assert(good_layer.GetGeomType() == ogr.wkbMultiPolygon25D)",
          "3493:     serpenski = good_layer.GetNextFeature()",
          "3494:     triangle = serpenski.GetGeometryRef()",
          "3495:     st_wkt = triangle.ExportToWkt()",
          "3497:     assert(st_wkt == \\",
          "3498:  \"MULTIPOLYGON (((0 0 1,1 0 1,0.5 0.866025403784439 1,0 0 1),(0.5 0.0 1,0.75 0.433012701892219 1,0.25 0.433012701892219 1,0.5 0.0 1)))\")",
          "3500: def test_flipped_axis():",
          "3501:     if gdaltest.netcdf_drv is None:",
          "3502:         pytest.skip()",
          "3503:     # similar to simple polygon test, but with flipped axis",
          "3505:     polygon = ogr.Open(\"data/netcdf-sg/flipped_axes_test.nc\")",
          "3506:     assert(polygon != None)",
          "3508:     layer = polygon.GetLayerByName(\"names_geometry\")",
          "3510:     ft = layer.GetNextFeature()",
          "3511:     ft_geo = ft.GetGeometryRef()",
          "3512:     ft_wkt = ft_geo.ExportToWkt()",
          "3513:     assert(ft_wkt == \"POLYGON ((0 0,1 0,1 1,0 0))\")",
          "3515: def test_arbitrary_3Daxis_order_():",
          "3516:     if gdaltest.netcdf_drv is None:",
          "3517:         pytest.skip()",
          "3518:     polygon = ogr.Open(\"data/netcdf-sg/arbitrary_axis_order_test.nc\")",
          "3519:     assert(polygon != None)",
          "3521:     layer = polygon.GetLayerByName(\"names_geometry\")",
          "3523:     ft = layer.GetNextFeature()",
          "3524:     ft_geo = ft.GetGeometryRef()",
          "3525:     ft_wkt = ft_geo.ExportToWkt()",
          "3526:     assert(ft_wkt == \"POLYGON ((0 0 1,1 0 2,1 1 2,0 0 1))\")",
          "3528:     ft = layer.GetNextFeature()",
          "3529:     ft_geo = ft.GetGeometryRef()",
          "3530:     ft_wkt = ft_geo.ExportToWkt()",
          "3531:     assert(ft_wkt == \"POLYGON ((3 0 1,4 0 1,4 1 1,3 1 1,3 0 1))\")",
          "3533: def test_multiple_layers_one_nc():",
          "3534:     if gdaltest.netcdf_drv is None:",
          "3535:         pytest.skip()",
          "3536:     # tests whether or not an NC with multiple geometry containers can be read",
          "3537:     # each geometry container a layer",
          "3539:     s = ogr.Open(\"data/netcdf-sg/multiple_containers.nc\")",
          "3541:     lc = s.GetLayerCount()",
          "3542:     assert(lc == 2)",
          "3543:     s_triangle = s.GetLayerByName(\"serpenski\")",
          "3544:     s_outline = s.GetLayerByName(\"serpenski_outline\")",
          "3546:     assert(s_triangle != None)",
          "3547:     assert(s_outline != None)",
          "3549:     triangle_ft = s_triangle.GetNextFeature()",
          "3550:     triangle = triangle_ft.GetGeometryRef()",
          "3551:     assert(triangle.GetGeometryType() == ogr.wkbMultiPolygon)",
          "3552:     st_wkt = triangle.ExportToWkt()",
          "3553:     assert(st_wkt == \\",
          "3554:  \"MULTIPOLYGON (((0 0,1 0,0.5 0.866025403784439,0 0),(0.5 0.0,0.75 0.433012701892219,0.25 0.433012701892219,0.5 0.0)))\")",
          "3556:     outline_ft = s_outline.GetNextFeature()",
          "3557:     outline = outline_ft.GetGeometryRef()",
          "3558:     assert(outline.GetGeometryType() == ogr.wkbMultiLineString)",
          "3559:     so_wkt = outline.ExportToWkt()",
          "3560:     assert(so_wkt == \\",
          "3561:  \"MULTILINESTRING ((0 0,1 0,0.5 0.866025403784439,0 0),(0.5 0.0,0.75 0.433012701892219,0.25 0.433012701892219,0.5 0.0))\")",
          "3563: #  advanced tests",
          "3565: def test_yahara():",
          "3566:     if gdaltest.netcdf_drv is None:",
          "3567:         pytest.skip()",
          "3568:     yahara = ogr.Open(\"data/netcdf-sg/Yahara_alb.nc\")",
          "3569:     assert(yahara != None)",
          "3571:     y_layer = yahara.GetLayerByName(\"geometry_container\")",
          "3572:     assert(y_layer != None)",
          "3574:     # Assert some basic properties",
          "3575:     assert(y_layer.GetFeatureCount() == 71)",
          "3576:     assert(y_layer.GetGeomType() == ogr.wkbMultiPolygon)",
          "3578:     # Test getting a single feature through iteration",
          "3579:     first = y_layer.GetNextFeature()",
          "3581:     # Check fields are set correctly",
          "3582:     assert(first.GetFieldAsInteger(\"ID\") == 1)",
          "3583:     assert(first.GetFieldAsInteger(\"GRIDCODE\") == 55)",
          "3584:     assert(first.GetFieldAsDouble(\"X_COORD\") == 577251.43302)",
          "3585:     assert(first.GetFieldAsDouble(\"Y_COORD\") == 319799.04918)",
          "3587: def test_states_full_layer():",
          "3588:     if gdaltest.netcdf_drv is None:",
          "3589:         pytest.skip()",
          "3590:     states = ogr.Open(\"data/netcdf-sg/cf1.8_states.nc\")",
          "3591:     assert(states != None)",
          "3593:     s_layer = states.GetLayerByName(\"geometry_container\")",
          "3594:     assert(s_layer != None)",
          "3596:     # Assert some basic properties (again)",
          "3597:     assert(s_layer.GetFeatureCount() == 49)",
          "3598:     assert(s_layer.GetGeomType() == ogr.wkbMultiPolygon)",
          "3600:     # Test getting two features",
          "3601:     first = s_layer.GetNextFeature()",
          "3602:     second = s_layer.GetNextFeature()",
          "3604:     # try resetting and then trying again",
          "3605:     s_layer.ResetReading()",
          "3607:     first_2 = s_layer.GetNextFeature()",
          "3609:     # Did reset work correctly?",
          "3610:     assert(first.Equal(first_2))",
          "3612:     # Sanity check",
          "3613:     assert(first.Equal(second) != True)",
          "3615:     # Check fields are set correctly",
          "3616:     assert(second.GetFieldAsString(\"STATE_NAME\") == \"Montana\")",
          "3617:     assert(second.GetFieldAsInteger(\"DRAWSEQ\") == 3)",
          "3618:     assert(second.GetFieldAsString(\"STATE_FIPS\") == \"30\")",
          "3619:     assert(second.GetFieldAsString(\"STATE_ABBR\") == \"MT\")",
          "3621: ###############################################################################",
          "3622: #  other tests",
          "",
          "---------------"
        ],
        "gdal/frmts/netcdf/makefile.vc||gdal/frmts/netcdf/makefile.vc": [
          "File: gdal/frmts/netcdf/makefile.vc -> gdal/frmts/netcdf/makefile.vc",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: !INCLUDE $(GDAL_ROOT)\\nmake.opt",
          "8: PLUGIN_DLL  = gdal_netCDF.dll",
          "",
          "[Removed Lines]",
          "6: OBJ  = netcdfdataset.obj netcdflayer.obj netcdfwriterconfig.obj gmtdataset.obj",
          "",
          "[Added Lines]",
          "6: OBJ  = netcdfdataset.obj netcdflayer.obj netcdfwriterconfig.obj gmtdataset.obj netcdfsg.obj netcdflayersg.obj",
          "",
          "---------------"
        ],
        "gdal/frmts/netcdf/netcdfdataset.cpp||gdal/frmts/netcdf/netcdfdataset.cpp": [
          "File: gdal/frmts/netcdf/netcdfdataset.cpp -> gdal/frmts/netcdf/netcdfdataset.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: #include \"netcdfdataset.h\"",
          "54: #include \"netcdfuffd.h\"",
          "56: #include \"cpl_conv.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54: #include \"netcdfsg.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2103:     eFormat(NCDF_FORMAT_NONE),",
          "2104:     bIsGdalFile(false),",
          "2105:     bIsGdalCfFile(false),",
          "2107:     pszCFProjection(nullptr),",
          "2108:     pszCFCoordinates(nullptr),",
          "2109:     eMultipleLayerBehaviour(SINGLE_LAYER),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2109:     nCFVersion(1.6),",
          "2110:     bSGSupport(false),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2415: void netCDFDataset::SetProjectionFromVar( int nGroupId, int nVarId,",
          "2417: {",
          "2418:     bool bGotGeogCS = false;",
          "2419:     bool bGotCfSRS = false;",
          "",
          "[Removed Lines]",
          "2416:                                           bool bReadSRSOnly )",
          "",
          "[Added Lines]",
          "2419:                                           bool bReadSRSOnly, const char * pszGivenGM)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2456:     }",
          "2460:     char *pszGridMappingValue = CPLStrdup(pszValue ? pszValue : \"\");",
          "2462:     if( !EQUAL(pszGridMappingValue, \"\") )",
          "",
          "[Removed Lines]",
          "2459:     const char *pszValue = FetchAttr(nGroupId, nVarId, CF_GRD_MAPPING);",
          "",
          "[Added Lines]",
          "2462:     const char *pszValue = pszGivenGM != nullptr ? pszGivenGM",
          "2463:                                                  : FetchAttr(nGroupId, nVarId, CF_GRD_MAPPING);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3872: #endif",
          "3873: }",
          "3875: int netCDFDataset::ProcessCFGeolocation( int nGroupId, int nVarId )",
          "3876: {",
          "3877:     bool bAddGeoloc = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3879: void netCDFDataset::SetProjectionFromVar( int nGroupId, int nVarId,",
          "3880:                                           bool bReadSRSOnly )",
          "3881: {",
          "3882:     SetProjectionFromVar(nGroupId, nVarId, bReadSRSOnly, nullptr);",
          "3883: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "7127:         }",
          "7128:     }",
          "7130:     char szConventions[NC_MAX_NAME + 1];",
          "7131:     szConventions[0] = '\\0';",
          "7132:     nc_type nAttype = NC_NAT;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7141:     poDS->nCFVersion = nccfdriver::getCFVersion(cdfid);",
          "7142:     if(poDS->nCFVersion >= 1.8)",
          "7143:     {",
          "7144:         poDS->bSGSupport = true;",
          "7145:     }",
          "7146:     else poDS->bSGSupport = false;",
          "7148:     if(poDS->bSGSupport)",
          "7149:     {",
          "7150:          poDS->DetectAndFillSGLayers(cdfid);",
          "7151:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "10910:     }",
          "10913:     {",
          "10915:         if( !(oMapDimIdToCount.size() == 1 ||",
          "",
          "[Removed Lines]",
          "10912:     if( !anPotentialVectorVarID.empty() && bKeepVectors )",
          "",
          "[Added Lines]",
          "10935:     if( !anPotentialVectorVarID.empty() && bKeepVectors && !bSGSupport)",
          "",
          "---------------"
        ],
        "gdal/frmts/netcdf/netcdfdataset.h||gdal/frmts/netcdf/netcdfdataset.h": [
          "File: gdal/frmts/netcdf/netcdfdataset.h -> gdal/frmts/netcdf/netcdfdataset.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: #include \"gdal_pam.h\"",
          "40: #include \"gdal_priv.h\"",
          "41: #include \"netcdf.h\"",
          "42: #include \"ogr_spatialref.h\"",
          "43: #include \"ogrsf_frmts.h\"",
          "44: #include \"netcdfuffd.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: #include \"netcdfsg.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49: #define ENABLE_NCDUMP",
          "50: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53: #if CPL_IS_LSB",
          "54: #define PLATFORM_HEADER 1",
          "55: #else",
          "56: #define PLATFORM_HEADER 0",
          "57: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86: static const size_t NCDF_MAX_STR_LEN = 8192;",
          "87: #define NCDF_CONVENTIONS_CF_V1_5  \"CF-1.5\"",
          "88: #define NCDF_CONVENTIONS_CF_V1_6  \"CF-1.6\"",
          "89: #define NCDF_SPATIAL_REF     \"spatial_ref\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93: #define NCDF_CONVENTIONS     \"Conventions\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "250: #define CF_PP_GRID_NORTH_POLE_LATITUDE  \"grid_north_pole_latitude\"",
          "251: #define CF_PP_NORTH_POLE_GRID_LONGITUDE \"north_pole_grid_longitude\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "261: #define CF_SG_GEOMETRY               \"geometry\"",
          "262: #define CF_SG_GEOMETRY_DIMENSION     \"geometry_dimension\"",
          "263: #define CF_SG_GEOMETRY_TYPE          \"geometry_type\"",
          "264: #define CF_SG_INTERIOR_RING          \"interior_ring\"",
          "265: #define CF_SG_NODES                  \"nodes\"",
          "266: #define CF_SG_NODE_COORDINATES       \"node_coordinates\"",
          "267: #define CF_SG_NODE_COUNT             \"node_count\"",
          "268: #define CF_SG_PART_NODE_COUNT        \"part_node_count\"",
          "269: #define CF_SG_TYPE_LINE              \"line\"",
          "270: #define CF_SG_TYPE_POINT             \"point\"",
          "271: #define CF_SG_TYPE_POLY              \"polygon\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "809:     char         *pszCFProjection;",
          "810:     const char   *pszCFCoordinates;",
          "811:     MultipleLayerBehaviour eMultipleLayerBehaviour;",
          "812:     std::vector<netCDFDataset*> apoVectorDatasets;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "831:     double        nCFVersion;",
          "832:     bool          bSGSupport;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "869:     void  CreateSubDatasetList( int nGroupId );",
          "871:     void  SetProjectionFromVar( int nGroupId, int nVarId, bool bReadSRSOnly );",
          "873:     int ProcessCFGeolocation( int nGroupId, int nVarId );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "893:     void  SetProjectionFromVar( int nGroupId, int nVarId, bool bReadSRSOnly, const char * pszGivenGM);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "889:                                   int nVarXId, int nVarYId, int nVarZId,",
          "890:                                   int nProfileDimId, int nParentIndexVarID,",
          "891:                                   bool bKeepRasters );",
          "892:   protected:",
          "894:     CPLXMLNode *SerializeToXML( const char *pszVRTPath ) override;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "916:     CPLErr DetectAndFillSGLayers( int ncid );",
          "917:     CPLErr LoadSGVarIntoLayer( int ncid, int nc_basevarId );",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "945: class netCDFLayer final: public OGRLayer",
          "946: {",
          "947:         typedef union",
          "948:         {",
          "949:             signed char chVal;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "974:         friend class netCDFDataset;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "994:         nc_type         m_nWKTNCDFType;",
          "995:         CPLString       m_osCoordinatesValue;",
          "996:         std::vector<FieldDesc> m_aoFieldDesc;",
          "997:         int             m_nCurFeatureId;",
          "998:         CPLString       m_osGridMapping;",
          "999:         bool            m_bWriteGDALTags;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1025:         std::vector<std::unique_ptr<OGRFeature>> m_sgFeatureList;",
          "1026:         std::vector<std::unique_ptr<OGRFeature>>::iterator m_sgFeatItr;",
          "1027:         bool            m_sgItrInit;",
          "1028:         bool            m_HasCFSG1_8;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1019:         void            GetNoDataValueForFloat( int nVarId, NCDFNoDataUnion* puNoData );",
          "1020:         void            GetNoDataValueForDouble( int nVarId, NCDFNoDataUnion* puNoData );",
          "1021:         void            GetNoDataValue( int nVarId, nc_type nVarType, NCDFNoDataUnion* puNoData );",
          "1023:         bool            FillVarFromFeature(OGRFeature* poFeature, int nMainDimId, size_t nIndex);",
          "1025:     public:",
          "1026:                 netCDFLayer(netCDFDataset* poDS,",
          "1027:                             int nLayerCDFId,",
          "",
          "[Removed Lines]",
          "1022:         bool            FillFeatureFromVar(OGRFeature* poFeature, int nMainDimId, size_t nIndex);",
          "",
          "[Added Lines]",
          "1056:     protected:",
          "1057:         bool            FillFeatureFromVar(OGRFeature* poFeature, int nMainDimId, size_t nIndex);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1036:         void            SetWKTGeometryField(const char* pszWKTVarName);",
          "1037:         void            SetGridMapping(const char* pszGridMapping);",
          "1038:         void            SetProfile(int nProfileDimID, int nParentIndexVarID);",
          "1039:         bool            AddField(int nVarId);",
          "1041:         int             GetCDFID() const { return m_nLayerCDFId; }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1072:         void            AddSimpleGeometryFeature(OGRFeature* sg) { this->m_sgFeatureList.push_back(std::unique_ptr<OGRFeature>(sg)); }",
          "1073:         void            EnableSGBypass() { this-> m_HasCFSG1_8 = true; }",
          "",
          "---------------"
        ],
        "gdal/frmts/netcdf/netcdflayer.cpp||gdal/frmts/netcdf/netcdflayer.cpp": [
          "File: gdal/frmts/netcdf/netcdflayer.cpp -> gdal/frmts/netcdf/netcdflayer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include \"netcdfdataset.h\"",
          "30: #include \"cpl_time.h\"",
          "32: CPL_CVSID(\"$Id$\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: #include \"netcdfsg.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:         m_nWKTMaxWidthDimId(-1),",
          "60:         m_nWKTVarID(-1),",
          "61:         m_nWKTNCDFType(NC_NAT),",
          "62:         m_nCurFeatureId(1),",
          "63:         m_bWriteGDALTags(true),",
          "64:         m_bUseStringInNC4(true),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:         m_sgItrInit(false),",
          "64:         m_HasCFSG1_8(false),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "86: netCDFLayer::~netCDFLayer() { m_poFeatureDefn->Release(); }",
          "",
          "[Added Lines]",
          "89: netCDFLayer::~netCDFLayer()",
          "90: {",
          "91:     m_poFeatureDefn->Release();",
          "92: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "701: void netCDFLayer::ResetReading() { m_nCurFeatureId = 1; }",
          "",
          "[Added Lines]",
          "708: void netCDFLayer::ResetReading()",
          "709: {",
          "710:     if( m_HasCFSG1_8 )",
          "711:     {",
          "712:         if( m_sgItrInit )",
          "713:         {",
          "714:            this->m_sgFeatItr = m_sgFeatureList.begin();",
          "715:         }",
          "716:     }",
          "717:     else",
          "718:     {",
          "719:         m_nCurFeatureId = 1;",
          "720:     }",
          "721: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "735: OGRFeature *netCDFLayer::GetNextRawFeature()",
          "736: {",
          "737:     m_poDS->SetDefineMode(false);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "757:     if( !m_sgItrInit && m_sgFeatureList.size() > 0 )",
          "758:     {",
          "759:         this->m_sgFeatItr = m_sgFeatureList.begin();",
          "760:         this->m_sgItrInit = true;",
          "761:     }",
          "763:     if( m_sgItrInit && m_sgFeatItr != m_sgFeatureList.end() )",
          "764:     {",
          "765:         OGRFeature * ret = (*(m_sgFeatItr))->Clone();",
          "766:         ++m_sgFeatItr;",
          "767:         return ret;",
          "768:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1062:         }",
          "1063:     }",
          "1065:     if( m_nXVarID >= 0 && m_nYVarID >= 0 &&",
          "1066:         (m_osProfileDimName.empty() || nMainDimId == m_nProfileDimID) )",
          "1067:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1100:     if( m_HasCFSG1_8 ) return true;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2382: {",
          "2383:     if( m_poFilterGeom == nullptr && m_poAttrQuery == nullptr )",
          "2384:     {",
          "2385:         size_t nDimLen;",
          "2386:         nc_inq_dimlen(m_nLayerCDFId, m_nRecordDimID, &nDimLen);",
          "2387:         return static_cast<GIntBig>(nDimLen);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2423:         if( m_HasCFSG1_8 )",
          "2424:         {",
          "2425:             return m_sgFeatureList.size();",
          "2426:         }",
          "",
          "---------------"
        ],
        "gdal/frmts/netcdf/netcdflayersg.cpp||gdal/frmts/netcdf/netcdflayersg.cpp": [
          "File: gdal/frmts/netcdf/netcdflayersg.cpp -> gdal/frmts/netcdf/netcdflayersg.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #include \"netcdfsg.h\"",
          "29: #include \"netcdfdataset.h\"",
          "30: #include \"ogr_core.h\"",
          "32: namespace nccfdriver",
          "33: {",
          "34:     static OGRwkbGeometryType RawToOGR(geom_t type, int axis_count)",
          "35:     {",
          "36:         OGRwkbGeometryType ret = wkbNone;",
          "38:         switch(type)",
          "39:         {",
          "40:             case NONE:",
          "41:                 break;",
          "42:             case LINE:",
          "43:                 ret = axis_count == 2 ? wkbLineString :",
          "44:                       axis_count == 3 ? wkbLineString25D: wkbNone;",
          "45:                 break;",
          "46:             case MULTILINE:",
          "47:                 ret = axis_count == 2 ? wkbMultiLineString :",
          "48:                       axis_count == 3 ? wkbMultiLineString25D : wkbNone;",
          "49:                 break;",
          "50:             case POLYGON:",
          "51:                 ret = axis_count == 2 ? wkbPolygon :",
          "52:                       axis_count == 3 ? wkbPolygon25D : wkbNone;",
          "53:                 break;",
          "54:             case MULTIPOLYGON:",
          "55:                 ret = axis_count == 2 ? wkbMultiPolygon :",
          "56:                       axis_count == 3 ? wkbMultiPolygon25D : wkbNone;",
          "57:                 break;",
          "58:             case POINT:",
          "59:                 ret = axis_count == 2 ? wkbPoint :",
          "60:                       axis_count == 3 ? wkbPoint25D: wkbNone;",
          "61:                 break;",
          "62:             case MULTIPOINT:",
          "63:                 ret = axis_count == 2 ? wkbMultiPoint :",
          "64:                       axis_count == 3 ? wkbMultiPoint25D : wkbNone;",
          "65:                 break;",
          "66:             case UNSUPPORTED:",
          "67:                 break;",
          "68:         }",
          "70:         return ret;",
          "71:     }",
          "73: }",
          "75: CPLErr netCDFDataset::DetectAndFillSGLayers(int ncid)",
          "76: {",
          "78:     int var_count;",
          "79:     nc_inq_nvars(ncid, &var_count);",
          "80:     std::vector<int> vidList;",
          "82:     nccfdriver::scanForGeometryContainers(ncid, vidList);",
          "84:     for(size_t itr = 0; itr < vidList.size(); itr++)",
          "85:     {",
          "86:         try",
          "87:         {",
          "88:             LoadSGVarIntoLayer(ncid, vidList[itr]);",
          "90:         }",
          "92:         catch(nccfdriver::SG_Exception& e)",
          "93:         {",
          "94:             CPLError(CE_Warning, CPLE_AppDefined,",
          "95:                 \"Translation of a simple geometry layer has been terminated prematurely due to an error.\\n%s\", e.get_err_msg());",
          "96:         }",
          "97:     }",
          "99:     return CE_None;",
          "100: }",
          "102: CPLErr netCDFDataset::LoadSGVarIntoLayer(int ncid, int nc_basevarId)",
          "103: {",
          "104:     std::unique_ptr<nccfdriver::SGeometry> sg (new nccfdriver::SGeometry(ncid, nc_basevarId));",
          "105:     int cont_id = sg->getContainerId();",
          "106:     nccfdriver::SGeometry_PropertyScanner pr(ncid, cont_id);",
          "107:     OGRwkbGeometryType owgt = nccfdriver::RawToOGR(sg->getGeometryType(), sg->get_axisCount());",
          "109:     if(sg->getGridMappingVarID() != nccfdriver::INVALID_VAR_ID)",
          "110:         SetProjectionFromVar(ncid, nc_basevarId, true, sg->getGridMappingName().c_str());",
          "113:     if(owgt == wkbNone)",
          "114:     {",
          "115:         throw nccfdriver::SG_Exception_BadFeature();",
          "116:     }",
          "118:     char baseName[NC_MAX_CHAR + 1];",
          "119:     memset(baseName, 0, NC_MAX_CHAR + 1);",
          "120:     nc_inq_varname(ncid, nc_basevarId, baseName);",
          "122:     OGRSpatialReference * poSRS = nullptr;",
          "124:     if(pszCFProjection != nullptr)",
          "125:     {",
          "126:         poSRS = new OGRSpatialReference();",
          "127:         if(poSRS->importFromWkt(pszCFProjection) != OGRERR_NONE)",
          "128:         {",
          "129:             delete poSRS;",
          "130:             throw nccfdriver::SG_Exception_General_Malformed(\"SRS settings\");",
          "131:         }",
          "133:         poSRS -> Release();",
          "134:     }",
          "136:     netCDFLayer * poL = new netCDFLayer(this, ncid, baseName, owgt, poSRS);",
          "138:     poL->EnableSGBypass();",
          "139:     OGRFeatureDefn * defn = poL->GetLayerDefn();",
          "140:     defn->SetGeomType(owgt);",
          "142:     size_t shape_count = sg->get_geometry_count();",
          "145:     std::vector<int> props = pr.ids();",
          "146:     for(size_t itr = 0; itr < props.size(); itr++)",
          "147:     {",
          "148:         poL->AddField(props[itr]);",
          "149:     }",
          "151:     for(size_t featCt = 0; featCt < shape_count; featCt++)",
          "152:     {",
          "153:         OGRGeometry * geometry;",
          "155:         try",
          "156:         {",
          "157:             switch(sg->getGeometryType())",
          "158:             {",
          "159:                 case nccfdriver::POINT:",
          "160:                     geometry = new OGRPoint;",
          "161:                     break;",
          "162:                 case nccfdriver::LINE:",
          "163:                     geometry = new OGRLineString;",
          "164:                     break;",
          "165:                 case nccfdriver::POLYGON:",
          "166:                     geometry = new OGRPolygon;",
          "167:                     break;",
          "168:                 case nccfdriver::MULTIPOINT:",
          "169:                     geometry = new OGRMultiPoint;",
          "170:                     break;",
          "171:                 case nccfdriver::MULTILINE:",
          "172:                     geometry = new OGRMultiLineString;",
          "173:                     break;",
          "174:                 case nccfdriver::MULTIPOLYGON:",
          "175:                     geometry = new OGRMultiPolygon;",
          "176:                     break;",
          "177:                 default:",
          "178:                     throw nccfdriver::SG_Exception_BadFeature();",
          "179:                     break;",
          "180:             }",
          "181:         }",
          "183:         catch(nccfdriver::SG_Exception&)",
          "184:         {",
          "185:             delete poL;",
          "186:             throw;",
          "187:         }",
          "189:         int r_size = 0;",
          "190:         std::unique_ptr<unsigned char, std::default_delete<unsigned char[]>> wkb_rep(sg->serializeToWKB(featCt, r_size));",
          "191:         geometry->importFromWkb(static_cast<const unsigned char*>(wkb_rep.get()), r_size, wkbVariantIso);",
          "192:         OGRFeature * feat = new OGRFeature(defn);",
          "193:         feat -> SetGeometryDirectly(geometry);",
          "195:         int dimId = sg->getInstDim();",
          "196:         size_t dim_len = sg->getInstDimLen();",
          "199:         for(size_t itr = 0; itr < props.size() && itr < dim_len; itr++)",
          "200:         {",
          "201:             poL->FillFeatureFromVar(feat, dimId, featCt);",
          "202:         }",
          "204:         feat -> SetFID(featCt);",
          "205:         poL->AddSimpleGeometryFeature(feat);",
          "206:     }",
          "208:     papoLayers = (netCDFLayer**)CPLRealloc(papoLayers, (nLayers + 1) * sizeof(netCDFLayer *));",
          "209:     papoLayers[nLayers] = poL;",
          "210:     nLayers++;",
          "212:     return CE_None;",
          "213: }",
          "",
          "---------------"
        ],
        "gdal/frmts/netcdf/netcdfsg.cpp||gdal/frmts/netcdf/netcdfsg.cpp": [
          "File: gdal/frmts/netcdf/netcdfsg.cpp -> gdal/frmts/netcdf/netcdfsg.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #include <cstdio>",
          "29: #include <cstring>",
          "30: #include <vector>",
          "31: #include \"netcdf.h\"",
          "32: #include \"netcdfdataset.h\"",
          "33: #include \"netcdfsg.h\"",
          "34: namespace nccfdriver",
          "35: {",
          "39:     static void* memcpy_jump(void *dest, const void *src, size_t n)",
          "40:     {",
          "41:         memcpy(dest, src, n);",
          "42:         int8_t * byte_pointer = static_cast<int8_t*>(dest);",
          "43:         return static_cast<void*>(byte_pointer + n);",
          "44:     }",
          "55:     std::string& attrf(int ncid, int varId, const char * attrName, std::string& alloc)",
          "56:     {",
          "57:         alloc = \"\";",
          "59:         size_t len = 0;",
          "60:         nc_inq_attlen(ncid, varId, attrName, &len);",
          "62:         if(len < 1)",
          "63:         {",
          "64:             return alloc;",
          "65:         }",
          "67:         char attr_vals[NC_MAX_NAME + 1];",
          "68:         memset(attr_vals, 0, NC_MAX_NAME + 1);",
          "71:         if(nc_get_att_text(ncid, varId, attrName, attr_vals) != NC_NOERR)",
          "72:         {",
          "73:             return alloc;",
          "74:         }",
          "76:         alloc = std::string(attr_vals);",
          "77:         return alloc;",
          "78:     }",
          "85:     SGeometry::SGeometry(int ncId, int geoVarId)",
          "86:         : gc_varId(geoVarId), touple_order(0), current_vert_ind(0), cur_geometry_ind(0), cur_part_ind(0)",
          "87:     {",
          "89:         char container_name[NC_MAX_NAME + 1];",
          "90:         memset(container_name, 0, NC_MAX_NAME + 1);",
          "93:         if(nc_inq_varname(ncId, geoVarId, container_name) != NC_NOERR)",
          "94:         {",
          "95:             throw SG_Exception_Existential(\"new geometry container\", \"the variable of the given ID\");",
          "96:         }",
          "99:         container_name_s = std::string(container_name);",
          "102:         this->type = nccfdriver::getGeometryType(ncId, geoVarId);",
          "104:         if(this->type == NONE)",
          "105:         {",
          "106:             throw SG_Exception_Existential(static_cast<const char*>(container_name), CF_SG_GEOMETRY_TYPE);",
          "107:         }",
          "110:         this->gm_varId = INVALID_VAR_ID;",
          "111:         if(attrf(ncId, geoVarId, CF_GRD_MAPPING, gm_name_s) != \"\")",
          "112:         {",
          "113:             const char * gm_name = gm_name_s.c_str();",
          "114:             int gmVID;",
          "115:             if(nc_inq_varid(ncId, gm_name, &gmVID) == NC_NOERR)",
          "116:             {",
          "117:                 this->gm_varId = gmVID;",
          "118:             }",
          "119:         }",
          "122:         std::string nc_name_s;",
          "123:         std::string pnc_name_s;",
          "124:         std::string ir_name_s;",
          "125:         int pnc_vid = INVALID_VAR_ID;",
          "126:         int nc_vid = INVALID_VAR_ID;",
          "127:         int ir_vid = INVALID_VAR_ID;",
          "128:         int buf;",
          "129:         size_t bound = 0;",
          "130:         size_t total_node_count = 0; // used in error checks later",
          "131:         if(attrf(ncId, geoVarId, CF_SG_NODE_COUNT, nc_name_s) != \"\")",
          "132:         {",
          "133:             const char * nc_name = nc_name_s.c_str();",
          "134:             nc_inq_varid(ncId, nc_name, &nc_vid);",
          "135:             while(nc_get_var1_int(ncId, nc_vid, &bound, &buf) == NC_NOERR)",
          "136:             {",
          "137:                 this->node_counts.push_back(buf);",
          "138:                 total_node_count += buf;",
          "139:                 bound++;",
          "140:             }",
          "142:         }",
          "144:         if(attrf(ncId, geoVarId, CF_SG_PART_NODE_COUNT, pnc_name_s) != \"\")",
          "145:         {",
          "146:             const char * pnc_name = pnc_name_s.c_str();",
          "147:             bound = 0;",
          "148:             nc_inq_varid(ncId, pnc_name, &pnc_vid);",
          "149:             while(nc_get_var1_int(ncId, pnc_vid, &bound, &buf) == NC_NOERR)",
          "150:             {",
          "151:                 this->pnode_counts.push_back(buf);",
          "152:                 bound++;",
          "153:             }",
          "154:         }",
          "156:         if(attrf(ncId, geoVarId, CF_SG_INTERIOR_RING, ir_name_s) != \"\")",
          "157:         {",
          "158:             const char * ir_name = ir_name_s.c_str();",
          "159:             bound = 0;",
          "160:             nc_inq_varid(ncId, ir_name, &ir_vid);",
          "161:             while(nc_get_var1_int(ncId, ir_vid, &bound, &buf) == NC_NOERR)",
          "162:             {",
          "163:                 bool store = buf == 0 ? false : true;",
          "164:                 this->int_rings.push_back(store);",
          "165:                 bound++;",
          "166:             }",
          "167:         }",
          "177:         if(pnode_counts.size() > 0 && node_counts.size() == 0)",
          "178:         {",
          "179:             throw SG_Exception_Dep(static_cast<const char *>(container_name), CF_SG_PART_NODE_COUNT, CF_SG_NODE_COUNT);",
          "180:         }",
          "183:         if(int_rings.size() > 0 && pnode_counts.size() == 0)",
          "184:         {",
          "185:             throw SG_Exception_Dep(static_cast<const char *>(container_name), CF_SG_INTERIOR_RING, CF_SG_PART_NODE_COUNT);",
          "186:         }",
          "190:         if(int_rings.size() > 0)",
          "191:         {",
          "192:             if(int_rings.size() != pnode_counts.size())",
          "193:             {",
          "194:                 throw SG_Exception_Dim_MM(static_cast<const char *>(container_name), CF_SG_INTERIOR_RING, CF_SG_PART_NODE_COUNT);",
          "195:             }",
          "196:         }",
          "199:         if(this->type == POLYGON || this->type == LINE)",
          "200:         {",
          "201:             if(node_counts.size() < 1)",
          "202:             {",
          "203:                 throw SG_Exception_Existential(static_cast<const char*>(container_name), CF_SG_NODE_COUNT);",
          "204:             }",
          "205:         }",
          "211:         size_t rc = 0;",
          "212:         bound_list.push_back(0);// start with 0",
          "214:         if(node_counts.size() > 0)",
          "215:         {",
          "216:             for(size_t i = 0; i < node_counts.size() - 1; i++)",
          "217:             {",
          "218:                 rc = rc + node_counts[i];",
          "219:                 bound_list.push_back(rc);",
          "220:             }",
          "221:         }",
          "224:         std::string cart_s;",
          "226:         if(attrf(ncId, geoVarId, CF_SG_NODE_COORDINATES, cart_s) == \"\")",
          "227:         {",
          "228:             throw SG_Exception_Existential(container_name, CF_SG_NODE_COORDINATES);",
          "229:         }",
          "232:         if(this->node_counts.size() > 0)",
          "233:         {",
          "234:             int ind = 0;",
          "235:             int parts = 0;",
          "236:             int prog = 0;",
          "237:             int c = 0;",
          "239:             for(size_t pcnt = 0; pcnt < pnode_counts.size() ; pcnt++)",
          "240:             {",
          "241:                 if(prog == 0) pnc_bl.push_back(pcnt);",
          "243:                 if(int_rings.size() > 0 && !int_rings[pcnt])",
          "244:                     c++;",
          "246:                 prog = prog + pnode_counts[pcnt];",
          "247:                 parts++;",
          "249:                 if(prog == node_counts[ind])",
          "250:                 {",
          "251:                     ind++;",
          "252:                     this->parts_count.push_back(parts);",
          "253:                     if(int_rings.size() > 0)",
          "254:                         this->poly_count.push_back(c);",
          "255:                     c = 0;",
          "256:                     prog = 0; parts = 0;",
          "257:                 }",
          "258:                 else if(prog > node_counts[ind])",
          "259:                 {",
          "260:                     throw SG_Exception_BadSum(container_name, CF_SG_PART_NODE_COUNT, CF_SG_NODE_COUNT);",
          "261:                 }",
          "262:             }",
          "263:         }",
          "267:         int X = INVALID_VAR_ID;",
          "268:         int Y = INVALID_VAR_ID;",
          "269:         int Z = INVALID_VAR_ID;",
          "271:         char cart[NC_MAX_NAME + 1];",
          "272:         memset(cart, 0, NC_MAX_NAME + 1);",
          "273:         strncpy(cart, cart_s.c_str(), NC_MAX_NAME);",
          "275:         char * dim = strtok(cart,  \" \");",
          "276:         int axis_id = 0;",
          "278:         while(dim != nullptr)",
          "279:         {",
          "280:             if(nc_inq_varid(ncId, dim, &axis_id) == NC_NOERR)",
          "281:             {",
          "284:                 std::string a_sig;",
          "285:                 attrf(ncId, axis_id, CF_AXIS, a_sig);",
          "288:                 if(a_sig == \"X\")",
          "289:                 {",
          "290:                     X = axis_id;",
          "291:                 }",
          "292:                 else if(a_sig == \"Y\")",
          "293:                 {",
          "294:                     Y = axis_id;",
          "295:                 }",
          "296:                 else if(a_sig == \"Z\")",
          "297:                 {",
          "298:                     Z = axis_id;",
          "299:                 }",
          "300:                 else",
          "301:                 {",
          "302:                     throw SG_Exception_Dep(container_name, \"A node_coordinates variable\", CF_AXIS);",
          "303:                 }",
          "305:                 this->touple_order++;",
          "306:             }",
          "307:             else",
          "308:             {",
          "309:                 throw SG_Exception_Existential(container_name, dim);",
          "310:             }",
          "312:             dim = strtok(nullptr, \" \");",
          "313:         }",
          "317:         if(X != INVALID_VAR_ID)",
          "318:             this->nodec_varIds.push_back(X);",
          "319:         else",
          "320:         {",
          "321:             throw SG_Exception_Existential(container_name, \"node_coordinates: X-axis\");",
          "322:         }",
          "323:         if(Y != INVALID_VAR_ID)",
          "324:             this->nodec_varIds.push_back(Y);",
          "325:         else",
          "326:         {",
          "327:             throw SG_Exception_Existential(container_name, \"node_coordinates: Y-axis\");",
          "328:         }",
          "329:         if(Z != INVALID_VAR_ID)",
          "330:             this->nodec_varIds.push_back(Z);",
          "338:         int all_dim = INVALID_VAR_ID; bool dim_set = false;",
          "339:         int dimC = 0;",
          "341:         for(size_t nvitr = 0; nvitr < nodec_varIds.size(); nvitr++)",
          "342:         {",
          "343:             dimC = 0;",
          "344:             nc_inq_varndims(ncId, nodec_varIds[nvitr], &dimC);",
          "346:             if(dimC != 1)",
          "347:             {",
          "348:                 throw SG_Exception_Not1D();",
          "349:             }",
          "352:             int inter_dim[1];",
          "353:             if(nc_inq_vardimid(ncId, nodec_varIds[nvitr], inter_dim) != NC_NOERR)",
          "354:             {",
          "355:                 throw SG_Exception_Existential(container_name, \"one or more node_coordinate dimensions\");",
          "356:             }",
          "358:             if(!dim_set)",
          "359:             {",
          "360:                 all_dim = inter_dim[0];",
          "361:             }",
          "363:             else",
          "364:             {",
          "365:                 if (inter_dim[0] != all_dim)",
          "366:                     throw SG_Exception_Dim_MM(container_name, \"X, Y\", \"in general all node coordinate axes\");",
          "367:             }",
          "368:         }",
          "371:         if(node_counts.size() > 0)",
          "372:         {",
          "373:             size_t diml = 0;",
          "374:             nc_inq_dimlen(ncId, all_dim, &diml);",
          "376:             if(diml != total_node_count)",
          "377:                 throw SG_Exception_BadSum(container_name, \"node_count\", \"node coordinate dimension length\");",
          "378:         }",
          "382:         if(this->touple_order < 2)",
          "383:         {",
          "384:             throw SG_Exception_Existential(container_name, \"insufficent node coordinates must have at least two axis\");",
          "385:         }",
          "393:         size_t instance_dim_len = 0;",
          "395:         if(node_counts.size() >= 1)",
          "396:         {",
          "397:             int nc_dims = 0;",
          "398:             nc_inq_varndims(ncId, nc_vid, &nc_dims);",
          "400:             if(nc_dims != 1) throw SG_Exception_Not1D();",
          "402:             int nc_dim_id[1];",
          "404:             if(nc_inq_vardimid(ncId, nc_vid, nc_dim_id) != NC_NOERR)",
          "405:             {",
          "406:                 throw SG_Exception_Existential(container_name, \"node_count dimension\");",
          "407:             }",
          "409:             this->inst_dimId = nc_dim_id[0];",
          "410:         }",
          "412:         else",
          "413:         {",
          "414:             this->inst_dimId = all_dim;",
          "415:         }",
          "417:         nc_inq_dimlen(ncId, this->inst_dimId, &instance_dim_len);",
          "419:         if(instance_dim_len == 0)",
          "420:             throw SG_Exception_EmptyDim();",
          "423:         this->inst_dimLen = instance_dim_len;",
          "424:         this->pt_buffer = std::unique_ptr<Point>(new Point(this->touple_order));",
          "425:         this->gc_varId = geoVarId;",
          "426:         this->current_vert_ind = 0;",
          "427:         this->ncid = ncId;",
          "428:     }",
          "430:     Point& SGeometry::next_pt()",
          "431:     {",
          "432:         if(!this->has_next_pt())",
          "433:         {",
          "434:             throw SG_Exception_BadPoint();",
          "435:         }",
          "439:         for(int order = 0; order < touple_order; order++)",
          "440:         {",
          "441:             Point& pt = *(this->pt_buffer);",
          "442:             double data;",
          "443:             size_t full_ind = bound_list[cur_geometry_ind] + current_vert_ind;",
          "446:             int err = nc_get_var1_double(ncid, nodec_varIds[order], &full_ind, &data);",
          "449:             if(err != NC_NOERR)",
          "450:             {",
          "451:                 throw SG_Exception_BadPoint();",
          "452:             }",
          "454:             pt[order] = data;",
          "455:         }",
          "457:         this->current_vert_ind++;",
          "458:         return *(this->pt_buffer);",
          "459:     }",
          "461:     bool SGeometry::has_next_pt()",
          "462:     {",
          "463:         if(this->current_vert_ind < node_counts[cur_geometry_ind])",
          "464:         {",
          "465:             return true;",
          "466:         }",
          "468:         else return false;",
          "469:     }",
          "471:     void SGeometry::next_geometry()",
          "472:     {",
          "475:         this->cur_geometry_ind++;",
          "476:         this->cur_part_ind = 0;",
          "477:         this->current_vert_ind = 0;",
          "478:     }",
          "480:     bool SGeometry::has_next_geometry()",
          "481:     {",
          "482:         if(this->cur_geometry_ind < node_counts.size())",
          "483:         {",
          "484:             return true;",
          "485:         }",
          "486:         else return false;",
          "487:     }",
          "489:     Point& SGeometry::operator[](size_t index)",
          "490:     {",
          "491:         for(int order = 0; order < touple_order; order++)",
          "492:         {",
          "493:             Point& pt = *(this->pt_buffer);",
          "494:             double data;",
          "495:             size_t real_ind = index;",
          "498:             int err = nc_get_var1_double(ncid, nodec_varIds[order], &real_ind, &data);",
          "500:             if(err != NC_NOERR)",
          "501:             {",
          "502:                 throw SG_Exception_BadPoint();",
          "503:             }",
          "505:             pt[order] = data;",
          "506:         }",
          "508:         return *(this->pt_buffer);",
          "509:     }",
          "511:     size_t SGeometry::get_geometry_count()",
          "512:     {",
          "513:         if(type == POINT)",
          "514:         {",
          "519:             if(this->nodec_varIds.size() < 1) return 0;",
          "522:             int dims;",
          "523:             if(nc_inq_varndims(this->ncid, nodec_varIds[0], &dims) != NC_NOERR) return 0;",
          "524:             if(dims != 1) return 0;",
          "527:             int index;",
          "528:             if(nc_inq_vardimid(this->ncid, nodec_varIds[0], &index) != NC_NOERR)",
          "529:             {",
          "530:                 return 0;",
          "531:             }",
          "534:             size_t len;",
          "535:             if(nc_inq_dimlen(this->ncid, index, &len) != NC_NOERR)",
          "536:             {",
          "537:                 return 0;",
          "538:             }",
          "539:             return len;",
          "540:         }",
          "542:         else return this->node_counts.size();",
          "543:     }",
          "550:     unsigned char * SGeometry::serializeToWKB(size_t featureInd, int& wkbSize)",
          "551:     {",
          "552:         unsigned char * ret = nullptr;",
          "553:         int nc = 0; size_t sb = 0;",
          "556:         if(this->getGeometryType() != POINT)",
          "557:         {",
          "558:             nc = node_counts[featureInd];",
          "559:             sb = bound_list[featureInd];",
          "560:         }",
          "564:         switch(this->getGeometryType())",
          "565:         {",
          "566:             case POINT:",
          "567:                 wkbSize = 1 + 4 + this->touple_order * 8;",
          "568:                 ret = new uint8_t[wkbSize];",
          "569:                 inPlaceSerialize_Point(this, featureInd, ret);",
          "570:                 break;",
          "572:             case LINE:",
          "573:                 wkbSize = 1 + 4 + 4 + this->touple_order * 8 * nc;",
          "574:                 ret = new uint8_t[wkbSize];",
          "575:                 inPlaceSerialize_LineString(this, nc, sb, ret);",
          "576:                 break;",
          "578:             case POLYGON:",
          "589:                 wkbSize = 1 + 4 + 4 + 4 + this->touple_order * 8 * nc;",
          "590:                 ret = new uint8_t[wkbSize];",
          "591:                 inPlaceSerialize_PolygonExtOnly(this, nc, sb, ret);",
          "592:                 break;",
          "594:             case MULTIPOINT:",
          "595:                 {",
          "596:                     wkbSize = 1 + 4 + 4 + nc * (1 + 4 + this->touple_order * 8);",
          "597:                     ret = new uint8_t[wkbSize];",
          "599:                     void * worker = ret;",
          "600:                     int8_t header = PLATFORM_HEADER;",
          "601:                     uint32_t t = this->touple_order == 2 ? wkbMultiPoint :",
          "602:                                  this->touple_order == 3 ? wkbMultiPoint25D : wkbNone;",
          "604:                     if(t == wkbNone) throw SG_Exception_BadFeature();",
          "607:                     worker = memcpy_jump(worker, &header, 1);",
          "608:                     worker = memcpy_jump(worker, &t, 4);",
          "609:                     worker = memcpy_jump(worker, &nc, 4);",
          "612:                     for(int pts = 0; pts < nc; pts++)",
          "613:                     {",
          "614:                         worker = inPlaceSerialize_Point(this, static_cast<size_t>(sb + pts), worker);",
          "615:                     }",
          "616:                 }",
          "618:                 break;",
          "620:             case MULTILINE:",
          "621:                 {",
          "622:                     int8_t header = PLATFORM_HEADER;",
          "623:                     uint32_t t = this->touple_order == 2 ? wkbMultiLineString :",
          "624:                                 this->touple_order == 3 ? wkbMultiLineString25D : wkbNone;",
          "626:                     if(t == wkbNone) throw SG_Exception_BadFeature();",
          "627:                     int32_t lc = parts_count[featureInd];",
          "628:                     size_t seek_begin = sb;",
          "629:                     size_t pc_begin = pnc_bl[featureInd]; // initialize with first part count, list of part counts is contiguous",
          "630:                     wkbSize = 1 + 4 + 4;",
          "631:                     std::vector<int> pnc;",
          "635:                     for(int itr = 0; itr < lc; itr++)",
          "636:                     {",
          "637:                         pnc.push_back(pnode_counts[pc_begin + itr]);",
          "638:                          wkbSize += this->touple_order * 8 * pnc[itr] + 1 + 4 + 4;",
          "639:                     }",
          "642:                     size_t cur_point = seek_begin;",
          "643:                     size_t pcount = pnc.size();",
          "646:                     ret = new uint8_t[wkbSize];",
          "647:                     void * worker = ret;",
          "650:                     worker = memcpy_jump(worker, &header, 1);",
          "651:                     worker = memcpy_jump(worker, &t, 4);",
          "652:                     worker = memcpy_jump(worker, &pcount, 4);",
          "654:                     for(size_t itr = 0; itr < pcount; itr++)",
          "655:                     {",
          "656:                             worker = inPlaceSerialize_LineString(this, pnc[itr], cur_point, worker);",
          "657:                             cur_point = pnc[itr] + cur_point;",
          "658:                     }",
          "659:                 }",
          "661:                 break;",
          "663:             case MULTIPOLYGON:",
          "664:                 {",
          "665:                     int8_t header = PLATFORM_HEADER;",
          "666:                     uint32_t t = this->touple_order == 2 ? wkbMultiPolygon:",
          "667:                                  this->touple_order == 3 ? wkbMultiPolygon25D: wkbNone;",
          "669:                     if(t == wkbNone) throw SG_Exception_BadFeature();",
          "670:                     bool noInteriors = this->int_rings.size() == 0 ? true : false;",
          "671:                     int32_t rc = parts_count[featureInd];",
          "672:                     size_t seek_begin = sb;",
          "673:                     size_t pc_begin = pnc_bl[featureInd]; // initialize with first part count, list of part counts is contiguous",
          "674:                     wkbSize = 1 + 4 + 4;",
          "675:                     std::vector<int> pnc;",
          "678:                     for(int itr = 0; itr < rc; itr++)",
          "679:                     {",
          "680:                         pnc.push_back(pnode_counts[pc_begin + itr]);",
          "681:                     }",
          "684:                     if(noInteriors)",
          "685:                     {",
          "686:                         for(int ss = 0; ss < rc; ss++)",
          "687:                         {",
          "688:                              wkbSize += 8 * this->touple_order * pnc[ss] + 1 + 4 + 4 + 4;",
          "689:                         }",
          "690:                     }",
          "692:                     else",
          "693:                     {",
          "701:                         wkbSize += (1 + 4 + 4) * poly_count[featureInd]; // (headers)",
          "704:                         wkbSize += 4 * parts_count[featureInd];",
          "707:                         wkbSize += 8 * this->touple_order * nc;",
          "708:                     }",
          "711:                     ret = new uint8_t[wkbSize];",
          "714:                     void * worker = (void*)ret;",
          "715:                     worker = memcpy_jump(worker, &header, 1);",
          "716:                     worker = memcpy_jump(worker, &t, 4);",
          "718:                     if(noInteriors)",
          "719:                     {",
          "720:                         size_t cur_point = seek_begin;",
          "721:                         size_t pcount = pnc.size();",
          "722:                         worker = memcpy_jump(worker, &pcount, 4);",
          "724:                         for(size_t itr = 0; itr < pcount; itr++)",
          "725:                         {",
          "726:                             worker = inPlaceSerialize_PolygonExtOnly(this, pnc[itr], cur_point, worker);",
          "727:                             cur_point = pnc[itr] + cur_point;",
          "728:                         }",
          "729:                     }",
          "731:                     else",
          "732:                     {",
          "733:                         int32_t polys = poly_count[featureInd];",
          "734:                         worker = memcpy_jump(worker, &polys, 4);",
          "736:                         size_t base = pnc_bl[featureInd]; // beginning of parts_count for this multigeometry",
          "737:                         size_t seek = seek_begin; // beginning of node range for this multigeometry",
          "738:                         size_t ir_base = base + 1;",
          "739:                         int rc_m = 1;",
          "742:                         for(int32_t itr = 0; itr < polys; itr++)",
          "743:                         {",
          "744:                             rc_m = 1;",
          "747:                             while(ir_base < int_rings.size() && int_rings[ir_base])",
          "748:                             {",
          "749:                                 rc_m++;",
          "750:                                 ir_base++;",
          "751:                             }",
          "753:                             if(rc_m == 1) ir_base++;    // single polygon case",
          "755:                             std::vector<int> poly_parts;",
          "758:                             for(int itr_2 = 0; itr_2 < rc_m; itr_2++)",
          "759:                             {",
          "760:                                 poly_parts.push_back(pnode_counts[base + itr_2]);",
          "761:                             }",
          "763:                             worker = inPlaceSerialize_Polygon(this, poly_parts, rc_m, seek, worker);",
          "766:                             for(size_t itr_3 = 0; itr_3 < poly_parts.size(); itr_3++)",
          "767:                             {",
          "768:                                 seek += poly_parts[itr_3];",
          "769:                             }",
          "770:                         }",
          "771:                     }",
          "772:                 }",
          "773:                 break;",
          "775:                 default:",
          "777:                     throw SG_Exception_BadFeature();",
          "778:                     break;",
          "779:         }",
          "781:         return ret;",
          "782:     }",
          "784:     void SGeometry_PropertyScanner::open(int container_id)",
          "785:     {",
          "787:         if(nc_inq_var(this->nc, container_id, nullptr, nullptr, nullptr, nullptr, nullptr) != NC_NOERR)",
          "788:         {",
          "789:             return;    // change to exception",
          "790:         }",
          "794:         char contname[NC_MAX_NAME + 1];",
          "795:         memset(contname, 0, NC_MAX_NAME + 1);",
          "796:         if(nc_inq_varname(this->nc, container_id, contname) != NC_NOERR)",
          "797:         {",
          "798:             return;",
          "799:         }",
          "803:         int varCount = 0;",
          "804:         if(nc_inq_nvars(this->nc, &varCount) != NC_NOERR)",
          "805:         {",
          "806:             return;",
          "807:         }",
          "809:         for(int curr = 0; curr < varCount; curr++)",
          "810:         {",
          "811:             size_t contname2_len = 0;",
          "814:             if(nc_inq_attlen(this->nc, curr, CF_SG_GEOMETRY, &contname2_len) != NC_NOERR)",
          "815:             {",
          "817:                 continue;",
          "818:             }",
          "821:             if(contname2_len == 0) continue;",
          "824:             char buf[NC_MAX_CHAR + 1];",
          "825:             memset(buf, 0, NC_MAX_CHAR + 1);",
          "827:             if(nc_get_att_text(this->nc, curr, CF_SG_GEOMETRY, buf)!= NC_NOERR)",
          "828:             {",
          "829:                 continue;",
          "830:             }",
          "833:             if(!strcmp(contname, buf))",
          "834:             {",
          "835:                 char property_name[NC_MAX_NAME];",
          "836:                 nc_inq_varname(this->nc, curr, property_name);",
          "838:                 std::string n(property_name);",
          "839:                 v_ids.push_back(curr);",
          "840:                 v_headers.push_back(n);",
          "841:             }",
          "842:         }",
          "843:     }",
          "846:     SG_Exception_Dim_MM::SG_Exception_Dim_MM(const char* container_name, const char* field_1, const char* field_2)",
          "847:     {",
          "848:         std::string cn_s(container_name);",
          "849:         std::string field1_s(field_1);",
          "850:         std::string field2_s(field_2);",
          "852:         this -> err_msg = \"[\" + cn_s + \"] One or more dimensions of \"",
          "853:                 + field1_s",
          "854:                 + \" and \"",
          "855:                 + field2_s",
          "856:                 + \" do not match but must match.\";",
          "857:     }",
          "859:     SG_Exception_Existential::SG_Exception_Existential(const char* container_name, const char* missing_name)",
          "860:     {",
          "861:         std::string cn_s(container_name);",
          "862:         std::string mn_s(missing_name);",
          "864:         this -> err_msg = \"[\" + cn_s + \"] The property or the variable associated with \"",
          "865:                 + mn_s",
          "866:                 + \" is missing.\";",
          "867:     }",
          "869:     SG_Exception_Dep::SG_Exception_Dep(const char* container_name, const char* arg1, const char* arg2)",
          "870:     {",
          "871:         std::string cn_s(container_name);",
          "872:         std::string arg1_s(arg1);",
          "873:         std::string arg2_s(arg2);",
          "875:         this -> err_msg = \"[\" + cn_s + \"] The attribute \"",
          "876:                 + arg1_s",
          "877:                 + \" may not exist without the attribute \"",
          "878:                 + arg2_s",
          "879:                 + \" existing.\";",
          "880:     }",
          "882:     SG_Exception_BadSum::SG_Exception_BadSum(const char* container_name, const char* arg1, const char* arg2)",
          "883:     {",
          "884:         std::string cn_s(container_name);",
          "885:         std::string arg1_s(arg1);",
          "886:         std::string arg2_s(arg2);",
          "888:         this -> err_msg = \"[\" + cn_s + \"]\"",
          "889:                 + \" The sum of all values in \"",
          "890:                 + arg1_s",
          "891:                 + \" and \"",
          "892:                 + arg2_s",
          "893:                 + \" do not match.\";",
          "894:     }",
          "896:     SG_Exception_General_Malformed",
          "897:         ::SG_Exception_General_Malformed(const char * arg)",
          "898:     {",
          "899:         std::string arg1_s(arg);",
          "901:         this -> err_msg = \"Corruption or malformed formatting has been detected in: \" + arg1_s;",
          "902:     }",
          "905:     SG_Exception::~SG_Exception() {}",
          "909:     double getCFVersion(int ncid)",
          "910:     {",
          "911:         double ver = -1.0;",
          "912:         std::string attrVal;",
          "915:         if(attrf(ncid, NC_GLOBAL, NCDF_CONVENTIONS, attrVal) == \"\")",
          "916:         {",
          "917:             return ver;",
          "918:         }",
          "920:         if(sscanf(attrVal.c_str(), \"CF-%lf\", &ver) != 1)",
          "921:         {",
          "922:             return -1.0;",
          "923:         }",
          "925:         return ver;",
          "926:     }",
          "928:     geom_t getGeometryType(int ncid, int varid)",
          "929:     {",
          "930:         geom_t ret = UNSUPPORTED;",
          "931:         std::string gt_name_s;",
          "932:         const char * gt_name= attrf(ncid, varid, CF_SG_GEOMETRY_TYPE, gt_name_s).c_str();",
          "934:         if(gt_name == nullptr)",
          "935:         {",
          "936:             return NONE;",
          "937:         }",
          "940:         if(!strcmp(gt_name, CF_SG_TYPE_POINT))",
          "941:         {",
          "943:             if(nc_inq_att(ncid, varid, CF_SG_NODE_COUNT, nullptr, nullptr) == NC_ENOTATT)",
          "944:             {",
          "945:                 ret = POINT;",
          "946:             }",
          "947:             else ret = MULTIPOINT;",
          "948:         }",
          "951:         else if(!strcmp(gt_name, CF_SG_TYPE_LINE))",
          "952:         {",
          "954:             if(nc_inq_att(ncid, varid, CF_SG_PART_NODE_COUNT, nullptr, nullptr) == NC_ENOTATT)",
          "955:             {",
          "956:                 ret = LINE;",
          "957:             }",
          "958:             else ret = MULTILINE;",
          "959:         }",
          "962:         else if(!strcmp(gt_name, CF_SG_TYPE_POLY))",
          "963:         {",
          "969:             int pnc_present = nc_inq_att(ncid, varid, CF_SG_PART_NODE_COUNT, nullptr, nullptr);",
          "970:             int ir_present = nc_inq_att(ncid, varid, CF_SG_INTERIOR_RING, nullptr, nullptr);",
          "972:             if(pnc_present == NC_ENOTATT && ir_present == NC_ENOTATT)",
          "973:             {",
          "974:                 ret = POLYGON;",
          "975:             }",
          "976:             else ret = MULTIPOLYGON;",
          "977:         }",
          "979:         return ret;",
          "980:     }",
          "982:     void* inPlaceSerialize_Point(SGeometry * ge, size_t seek_pos, void * serializeBegin)",
          "983:     {",
          "984:         uint8_t order = 1;",
          "985:         uint32_t t = ge->get_axisCount() == 2 ? wkbPoint:",
          "986:                      ge->get_axisCount() == 3 ? wkbPoint25D: wkbNone;",
          "988:         if(t == wkbNone) throw SG_Exception_BadFeature();",
          "990:         serializeBegin = memcpy_jump(serializeBegin, &order, 1);",
          "991:         serializeBegin = memcpy_jump(serializeBegin, &t, 4);",
          "994:         Point & p = (*ge)[seek_pos];",
          "995:         double x = p[0];",
          "996:         double y = p[1];",
          "997:         serializeBegin = memcpy_jump(serializeBegin, &x, 8);",
          "998:         serializeBegin = memcpy_jump(serializeBegin, &y, 8);",
          "1000:         if(ge->get_axisCount() >= 3)",
          "1001:         {",
          "1002:             double z = p[2];",
          "1003:             serializeBegin = memcpy_jump(serializeBegin, &z, 8);",
          "1004:         }",
          "1006:         return serializeBegin;",
          "1007:     }",
          "1009:     void* inPlaceSerialize_LineString(SGeometry * ge, int node_count, size_t seek_begin, void * serializeBegin)",
          "1010:     {",
          "1011:         uint8_t order = PLATFORM_HEADER;",
          "1012:         uint32_t t = ge->get_axisCount() == 2 ? wkbLineString:",
          "1013:                      ge->get_axisCount() == 3 ? wkbLineString25D: wkbNone;",
          "1015:         if(t == wkbNone) throw SG_Exception_BadFeature();",
          "1016:         uint32_t nc = (uint32_t) node_count;",
          "1018:         serializeBegin = memcpy_jump(serializeBegin, &order, 1);",
          "1019:         serializeBegin = memcpy_jump(serializeBegin, &t, 4);",
          "1020:         serializeBegin = memcpy_jump(serializeBegin, &nc, 4);",
          "1023:         for(int ind = 0; ind < node_count; ind++)",
          "1024:         {",
          "1025:             Point & p = (*ge)[seek_begin + ind];",
          "1026:             double x = p[0];",
          "1027:             double y = p[1];",
          "1028:             serializeBegin = memcpy_jump(serializeBegin, &x, 8);",
          "1029:             serializeBegin = memcpy_jump(serializeBegin, &y, 8);",
          "1031:             if(ge->get_axisCount() >= 3)",
          "1032:             {",
          "1033:                 double z = p[2];",
          "1034:                 serializeBegin = memcpy_jump(serializeBegin, &z, 8);",
          "1035:             }",
          "1036:         }",
          "1038:         return serializeBegin;",
          "1039:     }",
          "1041:     void* inPlaceSerialize_PolygonExtOnly(SGeometry * ge, int node_count, size_t seek_begin, void * serializeBegin)",
          "1042:     {",
          "1043:         int8_t header = PLATFORM_HEADER;",
          "1044:         uint32_t t = ge->get_axisCount() == 2 ? wkbPolygon:",
          "1045:                      ge->get_axisCount() == 3 ? wkbPolygon25D: wkbNone;",
          "1047:         if(t == wkbNone) throw SG_Exception_BadFeature();",
          "1048:         int32_t rc = 1;",
          "1050:         void * writer = serializeBegin;",
          "1051:         writer = memcpy_jump(writer, &header, 1);",
          "1052:         writer = memcpy_jump(writer, &t, 4);",
          "1053:         writer = memcpy_jump(writer, &rc, 4);",
          "1055:         int32_t nc = (int32_t)node_count;",
          "1056:         writer = memcpy_jump(writer, &node_count, 4);",
          "1058:         for(int pind = 0; pind < nc; pind++)",
          "1059:         {",
          "1060:             Point & pt= (*ge)[seek_begin + pind];",
          "1061:             double x = pt[0]; double y = pt[1];",
          "1062:             writer = memcpy_jump(writer, &x, 8);",
          "1063:             writer = memcpy_jump(writer, &y, 8);",
          "1065:             if(ge->get_axisCount() >= 3)",
          "1066:             {",
          "1067:                 double z = pt[2];",
          "1068:                 writer = memcpy_jump(writer, &z, 8);",
          "1069:             }",
          "1070:         }",
          "1072:         return writer;",
          "1073:     }",
          "1075:     void* inPlaceSerialize_Polygon(SGeometry * ge, std::vector<int>& pnc, int ring_count, size_t seek_begin, void * serializeBegin)",
          "1076:     {",
          "1078:         int8_t header = PLATFORM_HEADER;",
          "1079:         uint32_t t = ge->get_axisCount() == 2 ? wkbPolygon:",
          "1080:                      ge->get_axisCount() == 3 ? wkbPolygon25D: wkbNone;",
          "1082:         if(t == wkbNone) throw SG_Exception_BadFeature();",
          "1083:         int32_t rc = static_cast<int32_t>(ring_count);",
          "1085:         void * writer = serializeBegin;",
          "1086:         writer = memcpy_jump(writer, &header, 1);",
          "1087:         writer = memcpy_jump(writer, &t, 4);",
          "1088:         writer = memcpy_jump(writer, &rc, 4);",
          "1089:         int cmoffset = 0;",
          "1091:         for(int ring_c = 0; ring_c < ring_count; ring_c++)",
          "1092:         {",
          "1093:             int32_t node_count = pnc[ring_c];",
          "1094:             writer = memcpy_jump(writer, &node_count, 4);",
          "1096:             int pind = 0;",
          "1097:             for(pind = 0; pind < pnc[ring_c]; pind++)",
          "1098:             {",
          "1099:                 Point & pt= (*ge)[seek_begin + cmoffset + pind];",
          "1100:                 double x = pt[0]; double y = pt[1];",
          "1101:                 writer = memcpy_jump(writer, &x, 8);",
          "1102:                 writer = memcpy_jump(writer, &y, 8);",
          "1104:                 if(ge->get_axisCount() >= 3)",
          "1105:                 {",
          "1106:                      double z = pt[2];",
          "1107:                      writer = memcpy_jump(writer, &z, 8);",
          "1108:                 }",
          "1109:             }",
          "1111:             cmoffset += pind;",
          "1112:         }",
          "1114:         return writer;",
          "1115:     }",
          "1117:     int scanForGeometryContainers(int ncid, std::vector<int> & r_ids)",
          "1118:     {",
          "1119:         int nvars;",
          "1120:         if(nc_inq_nvars(ncid, &nvars) != NC_NOERR)",
          "1121:         {",
          "1122:             return -1;",
          "1123:         }",
          "1125:         r_ids.clear();",
          "1130:         for(int itr = 0; itr < nvars; itr++)",
          "1131:         {",
          "1132:             char c[NC_MAX_CHAR];",
          "1133:             memset(c, 0, NC_MAX_CHAR);",
          "1134:             if(nc_get_att_text(ncid, itr, CF_SG_GEOMETRY, c) != NC_NOERR)",
          "1135:             {",
          "1136:                 continue;",
          "1137:             }",
          "1139:             int varID;",
          "1140:             if(nc_inq_varid(ncid, c, &varID) != NC_NOERR)",
          "1141:             {",
          "1142:                 continue;",
          "1143:             }",
          "1147:             bool contains = false;",
          "1148:             for(size_t itr_1 = 0; itr_1 < r_ids.size(); itr_1++)",
          "1149:             {",
          "1150:                 if(r_ids[itr_1] == varID) contains = true;",
          "1151:             }",
          "1153:             if(!contains)",
          "1154:             {",
          "1155:                 r_ids.push_back(varID);",
          "1156:             }",
          "1157:         }",
          "1159:         return 0 ;",
          "1160:     }",
          "1162:     SGeometry* getGeometryRef(int ncid, const char * varName )",
          "1163:     {",
          "1164:         int varId = 0;",
          "1165:         nc_inq_varid(ncid, varName, &varId);",
          "1166:         return new SGeometry(ncid, varId);",
          "1167:     }",
          "1169: }",
          "",
          "---------------"
        ],
        "gdal/frmts/netcdf/netcdfsg.h||gdal/frmts/netcdf/netcdfsg.h": [
          "File: gdal/frmts/netcdf/netcdfsg.h -> gdal/frmts/netcdf/netcdfsg.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #ifndef __NETCDFSG_H__",
          "29: #define __NETCDFSG_H__",
          "30: #include <cstring>",
          "31: #include <memory>",
          "32: #include <string>",
          "33: #include <vector>",
          "34: #include \"netcdf.h\"",
          "40: namespace nccfdriver",
          "41: {",
          "43:     const int INVALID_VAR_ID = -2;",
          "44:     const int INVALID_DIM_ID = INVALID_VAR_ID;",
          "47:     enum geom_t",
          "48:     {",
          "49:         NONE,        // no geometry found",
          "50:         POLYGON,    // OGRPolygon",
          "51:         MULTIPOLYGON,    // OGRMultipolygon",
          "52:         LINE,        // OGRLineString",
          "53:         MULTILINE,    // OGRMultiLineString",
          "54:         POINT,        // OGRPoint",
          "55:         MULTIPOINT,    // OGRMultiPoint",
          "56:         UNSUPPORTED    // Unsupported feature type",
          "57:     };",
          "60:     class Point",
          "61:     {",
          "62:         int size;",
          "63:         std::unique_ptr<double, std::default_delete<double[]>> values;",
          "64:         Point(Point&);",
          "65:         Point operator=(const Point &);",
          "67:         public:",
          "68:         explicit Point(int dim) : size(dim), values(std::unique_ptr<double, std::default_delete<double[]>>(new double[dim])) {}",
          "69:         double& operator[](size_t i) { return this->values.get()[i]; }",
          "70:         int getOrder() { return this->size; }",
          "71:     };",
          "77:     class SGeometry",
          "78:     {",
          "79:         std::string container_name_s;        // name of the underlying geometry container",
          "80:         geom_t type;         // internal geometry type structure",
          "81:         int ncid;        // ncid - as used in netcdf.h",
          "82:         int gc_varId;        // the id of the underlying geometry_container variable",
          "83:         std::string gm_name_s; // grid mapping variable name",
          "84:         int gm_varId;        // id used for grid mapping",
          "85:         int inst_dimId;        // dimension id for geometry instance dimension",
          "86:         size_t inst_dimLen;    // value of instance dimension",
          "87:         int touple_order;    // amount of \"coordinates\" in a point",
          "88:         std::vector<int> nodec_varIds;    // varIds for each node_coordinate entry",
          "89:         std::vector<int> node_counts;    // node counts of each geometry in a container",
          "90:         std::vector<int> pnode_counts;    // part node counts of each geometry in a container",
          "91:         std::vector<bool> int_rings;    // list of parts that are interior rings",
          "92:         std::vector<size_t> bound_list;    // a quick list used to store the real beginning indicies of shapes",
          "93:         std::vector<size_t> pnc_bl;    // a quick list of indicies for part counts corresponding to a geometry",
          "94:         std::vector<int> parts_count;    // a count of total parts in a single geometry instance",
          "95:         std::vector<int> poly_count;    // count of polygons, for use only when interior rings are present",
          "96:         int current_vert_ind;    // used to keep track of current point being used",
          "97:         size_t cur_geometry_ind;    // used to keep track of current geometry index",
          "98:         size_t cur_part_ind;        // used to keep track of current part index",
          "99:         std::unique_ptr<Point> pt_buffer;    // holds the current point",
          "100:         SGeometry(SGeometry&);",
          "101:         SGeometry operator=(const SGeometry&);",
          "103:         public:",
          "108:         int get_axisCount() { return this->touple_order; }",
          "113:         int getInstDim() { return this->inst_dimId; }",
          "118:         size_t getInstDimLen() { return this->inst_dimLen; }",
          "125:         Point& next_pt();",
          "126:         bool has_next_pt(); // returns whether or not the geometry has another point",
          "134:         void next_geometry(); // simply reuses the host structure",
          "135:         bool has_next_geometry();",
          "140:         std::string& getGridMappingName() { return this->gm_name_s; }",
          "145:         int getGridMappingVarID() { return this->gm_varId; }",
          "150:         geom_t getGeometryType() { return this->type; }",
          "156:         size_t get_geometry_count();",
          "161:         std::string& getContainerName() { return container_name_s; }",
          "166:         int getContainerId() { return gc_varId; }",
          "172:         unsigned char * serializeToWKB(size_t featureInd, int& wkbSize);",
          "178:         Point& operator[](size_t ind);",
          "183:         SGeometry(int ncId, int baseVarId);",
          "184:     };",
          "192:     class SGeometry_PropertyScanner",
          "193:     {",
          "194:         std::vector<int> v_ids;",
          "195:         std::vector<std::string> v_headers;",
          "196:         int nc;",
          "198:         void open(int container_id);    // opens and intializes a geometry_container into the scanner",
          "200:         public:",
          "201:             std::vector<std::string>& headers() { return this->v_headers; }",
          "202:             std::vector<int>& ids() { return this->v_ids; }",
          "203:             SGeometry_PropertyScanner(int ncid, int cid) : nc(ncid) { this->open(cid); }",
          "204:     };",
          "208:     class SG_Exception",
          "209:     {",
          "210:         public:",
          "211:             virtual const char * get_err_msg() = 0;",
          "212:             virtual ~SG_Exception();",
          "213:     };",
          "216:     class SG_Exception_Dim_MM : public SG_Exception",
          "217:     {",
          "218:         std::string err_msg;",
          "220:         public:",
          "221:             const char* get_err_msg() override { return err_msg.c_str(); }",
          "223:         SG_Exception_Dim_MM(const char* geometry_container, const char* field_1, const char *field_2);",
          "224:     };",
          "227:     class SG_Exception_Existential: public SG_Exception",
          "228:     {",
          "229:         std::string err_msg;",
          "231:         public:",
          "232:             const char* get_err_msg() override { return err_msg.c_str(); }",
          "234:         SG_Exception_Existential(const char* geometry_container, const char* missing_name);",
          "235:     };",
          "238:     class SG_Exception_Dep: public SG_Exception",
          "239:     {",
          "240:         std::string err_msg;",
          "242:         public:",
          "243:             const char* get_err_msg() override { return err_msg.c_str(); }",
          "245:         SG_Exception_Dep(const char* geometry_container, const char* arg_1, const char* arg_2);",
          "246:     };",
          "249:     class SG_Exception_BadSum : public SG_Exception",
          "250:     {",
          "251:         std::string err_msg;",
          "253:         public:",
          "254:             const char* get_err_msg() override { return err_msg.c_str(); }",
          "256:         SG_Exception_BadSum(const char* geometry_container, const char* arg_1, const char* arg_2);",
          "257:     };",
          "260:     class SG_Exception_BadFeature : public SG_Exception",
          "261:     {",
          "262:         std::string err_msg;",
          "264:         public:",
          "265:             const char* get_err_msg() override { return err_msg.c_str(); }",
          "267:         SG_Exception_BadFeature() : err_msg(\"Unsupported or unrecognized feature type.\") {}",
          "268:     };",
          "271:     class SG_Exception_BadPoint : public SG_Exception",
          "272:     {",
          "273:         std::string err_msg;",
          "275:         public:",
          "276:             const char* get_err_msg() override { return err_msg.c_str(); }",
          "278:         SG_Exception_BadPoint() : err_msg(\"An attempt was made to read an invalid point (likely index out of bounds).\") {}",
          "279:     };",
          "282:     class SG_Exception_Not1D : public SG_Exception",
          "283:     {",
          "284:         std::string err_msg;",
          "286:         public:",
          "287:             const char* get_err_msg() override { return err_msg.c_str(); }",
          "289:         SG_Exception_Not1D() : err_msg(\"A node coordinates axis variable or node_counts is not one dimensional.\") {}",
          "290:     };",
          "293:     class SG_Exception_EmptyDim : public SG_Exception",
          "294:     {",
          "295:         std::string err_msg;",
          "297:         public:",
          "298:             const char* get_err_msg() override { return err_msg.c_str(); }",
          "300:         SG_Exception_EmptyDim() : err_msg(\"A dimension has length <= 0, but it must have length > 0\") {}",
          "301:     };",
          "304:     class SG_Exception_General_Malformed: public SG_Exception",
          "305:     {",
          "306:         std::string err_msg;",
          "308:         public:",
          "309:             const char* get_err_msg() override { return err_msg.c_str(); }",
          "311:         explicit SG_Exception_General_Malformed(const char*);",
          "312:     };",
          "319:     double getCFVersion(int ncid);",
          "324:     geom_t getGeometryType(int ncid, int varid);",
          "326:     void* inPlaceSerialize_Point(SGeometry * ge, size_t seek_pos, void * serializeBegin);",
          "327:     void* inPlaceSerialize_LineString(SGeometry * ge, int node_count, size_t seek_begin, void * serializeBegin);",
          "328:     void* inPlaceSerialize_PolygonExtOnly(SGeometry * ge, int node_count, size_t seek_begin, void * serializeBegin);",
          "329:     void* inPlaceSerialize_Polygon(SGeometry * ge, std::vector<int>& pnc, int ring_count, size_t seek_begin, void * serializeBegin);",
          "337:     int scanForGeometryContainers(int ncid, std::vector<int> & r_ids);",
          "343:     SGeometry* getGeometryRef(int ncid, const char * varName );",
          "354:     std::string& attrf(int ncid, int varId, const char * attrName, std::string & alloc);",
          "355: }",
          "357: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}