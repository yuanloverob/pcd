{
  "cve_id": "CVE-2018-17082",
  "cve_desc": "The Apache2 component in PHP before 5.6.38, 7.0.x before 7.0.32, 7.1.x before 7.1.22, and 7.2.x before 7.2.10 allows XSS via the body of a \"Transfer-Encoding: chunked\" request, because the bucket brigade is mishandled in the php_handler function in sapi/apache2handler/sapi_apache2.c.",
  "repo": "php/php-src",
  "patch_hash": "23b057742e3cf199612fa8050ae86cae675e214e",
  "patch_info": {
    "commit_hash": "23b057742e3cf199612fa8050ae86cae675e214e",
    "repo": "php/php-src",
    "commit_url": "https://github.com/php/php-src/commit/23b057742e3cf199612fa8050ae86cae675e214e",
    "files": [
      "sapi/apache2handler/sapi_apache2.c"
    ],
    "message": "Fix for bug #76582\n\nThe brigade seems to end up in a messed up state if something fails\nin shutdown, so we clean it up.",
    "before_after_code_files": [
      "sapi/apache2handler/sapi_apache2.c||sapi/apache2handler/sapi_apache2.c"
    ]
  },
  "patch_diff": {
    "sapi/apache2handler/sapi_apache2.c||sapi/apache2handler/sapi_apache2.c": [
      "File: sapi/apache2handler/sapi_apache2.c -> sapi/apache2handler/sapi_apache2.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "678:  if (!parent_req) {",
      "679:   php_apache_request_dtor(r TSRMLS_CC);",
      "680:   ctx->request_processed = 1;",
      "681:   bucket = apr_bucket_eos_create(r->connection->bucket_alloc);",
      "682:   APR_BRIGADE_INSERT_TAIL(brigade, bucket);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "681:   apr_brigade_cleanup(brigade);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3a249e769b293afa454b18b8d894c3395683d26c",
      "candidate_info": {
        "commit_hash": "3a249e769b293afa454b18b8d894c3395683d26c",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/3a249e769b293afa454b18b8d894c3395683d26c",
        "files": [
          "UPGRADING.INTERNALS",
          "Zend/tests/bug70873.phpt",
          "Zend/zend_builtin_functions.c",
          "Zend/zend_compile.h",
          "Zend/zend_inheritance.c",
          "Zend/zend_object_handlers.c",
          "Zend/zend_opcode.c",
          "ext/reflection/php_reflection.c",
          "ext/tidy/tests/027.phpt"
        ],
        "message": "Squashed commit of the following:\n\ncommit 2d3cac9e005d6bef9aa73ab57cc674aa53125954\nAuthor: Dmitry Stogov <dmitry@zend.com>\nDate:   Tue Sep 11 11:54:47 2018 +0300\n\n    Fixed static property access\n\ncommit 31786ee27282f319f3ef2a07635b1f325cbd67c6\nAuthor: Dmitry Stogov <dmitry@zend.com>\nDate:   Tue Sep 11 11:05:29 2018 +0300\n\n    Avoid duplicate checks\n\ncommit 5ae502b979ea33d058d01a9421eec5afd0084e8d\nAuthor: Dmitry Stogov <dmitry@zend.com>\nDate:   Tue Sep 11 10:39:17 2018 +0300\n\n    Optimization\n\ncommit 82c17f0e8af02c9cf7d1bbdae4e3158330148203\nAuthor: Dmitry Stogov <dmitry@zend.com>\nDate:   Tue Sep 11 09:26:50 2018 +0300\n\n    Removed unused zend_duplicate_property_info()\n\ncommit ba53d1d0dd91d5530328a11cac93ff9e75c462b5\nMerge: eacc11b8fd c4b14370cf\nAuthor: Dmitry Stogov <dmitry@zend.com>\nDate:   Tue Sep 11 09:24:13 2018 +0300\n\n    Merge branch 'master' into shadow\n\n    * master:\n      7.0.33 next\n      Sync NEWS [ci skip]\n      add NEWS for 76582\n      Enforce ordering of property compare in object comparisons\n      Fixed wrong assertion\n      Skip test on unsuitable env\n\ncommit eacc11b8fdeb002ee6a149defd8b5a8c3412896a\nAuthor: Dmitry Stogov <dmitry@zend.com>\nDate:   Mon Sep 10 13:12:39 2018 +0300\n\n    Fixed failure of ext/spl/tests/array_017.phpt\n\ncommit 62d1871430a1b81c84b790460afff0682648689a\nAuthor: Dmitry Stogov <dmitry@zend.com>\nDate:   Mon Sep 10 11:55:07 2018 +0300\n\n    Fixed issues\n\ncommit 1d37e3a40e4d07c4b933ed6f9d2e649dd01180f0\nMerge: d6c3f098b6 1e550e6f7e\nAuthor: Dmitry Stogov <dmitry@zend.com>\nDate:   Mon Sep 10 10:21:20 2018 +0300\n\n    Merge branch 'master' into shadow\n\n    * master:\n      Update NEWS\n      Fix for bug #76582\n      Fix ssl stream reneg limit test to print only after first renegotiation\n      Make a copy unconditionally\n      Fix memory leak in pcre cache\n      Remove not needed checking for <errno.h>\n      Remove HAVE_ASSERT_H\n      Add test for bug #76850\n      Fixed bug #76850 Exit code mangled by set locale/preg_match\n      Remove empty PHP tags from test\n      Fix #75273: php_zlib_inflate_filter() may not update bytes_consumed\n      Fix PCRE2 exclusion and remove dead libs in Makefile.gcov\n      Report mem leaks to stderr if no Win debugger is present\n      Use combined assignment contanation operator\n      Fixed bug #76796\n      Support fixed address mmap without replacement\n\ncommit d6c3f098b6015e76d042691de0af2e1426c66829\nAuthor: Dmitry Stogov <dmitry@zend.com>\nDate:   Fri Sep 7 13:56:30 2018 +0300\n\n    Get rid of ZEND_ACC_SHADOW",
        "before_after_code_files": [
          "UPGRADING.INTERNALS||UPGRADING.INTERNALS",
          "Zend/tests/bug70873.phpt||Zend/tests/bug70873.phpt",
          "Zend/zend_builtin_functions.c||Zend/zend_builtin_functions.c",
          "Zend/zend_compile.h||Zend/zend_compile.h",
          "Zend/zend_inheritance.c||Zend/zend_inheritance.c",
          "Zend/zend_object_handlers.c||Zend/zend_object_handlers.c",
          "Zend/zend_opcode.c||Zend/zend_opcode.c",
          "ext/reflection/php_reflection.c||ext/reflection/php_reflection.c",
          "ext/tidy/tests/027.phpt||ext/tidy/tests/027.phpt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "UPGRADING.INTERNALS||UPGRADING.INTERNALS": [
          "File: UPGRADING.INTERNALS -> UPGRADING.INTERNALS",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: 1. Internal API changes",
          "4:   a. php_sys_symlink() and php_sys_link()",
          "5:   b. zend_lookup_class_ex() and zend_fetch_class_by_name()",
          "8: 2. Build system changes",
          "9:   a. Unix build system changes",
          "",
          "[Removed Lines]",
          "6:   c. Function flags",
          "",
          "[Added Lines]",
          "6:   c. Function/property flags",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23:     changed to accept optional lower-case class name as zend_string*,",
          "24:     instead of zval*.",
          "27:     - ZEND_ACC_CTOR and ZEND_ACC_DTOR are removed. It's possible to check if",
          "28:       method is a constructor/destructor using the following condition",
          "29:       (func->commpon.scope->constructor == func).",
          "30:     - ZEND_ACC_IMPLEMENTED_ABSTRACT is removed (it was used only internally",
          "31:       during inheritance).",
          "33: ========================",
          "34: 2. Build system changes",
          "",
          "[Removed Lines]",
          "26:  c. Function flags changes",
          "",
          "[Added Lines]",
          "26:  c. Function/property flags changes",
          "32:     - ZEND_ACC_SHADOW property flag is removed. Instead of creating shadow",
          "33:       clone, now we use the same private property_info, and should also",
          "34:       check property_info->ce (in the same way as with methods).",
          "",
          "---------------"
        ],
        "Zend/tests/bug70873.phpt||Zend/tests/bug70873.phpt": [
          "File: Zend/tests/bug70873.phpt -> Zend/tests/bug70873.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: $b->bar();",
          "28: ?>",
          "29: --EXPECTF--",
          "31: Stack trace:",
          "32: #0 %sbug70873.php(%d): B->bar()",
          "33: #1 {main}",
          "",
          "[Removed Lines]",
          "30: Fatal error: Uncaught Error: Cannot access  property B::$x in %sbug70873.php:%d",
          "",
          "[Added Lines]",
          "30: Fatal error: Uncaught Error: Cannot access private property B::$x in %sbug70873.php:%d",
          "",
          "---------------"
        ],
        "Zend/zend_builtin_functions.c||Zend/zend_builtin_functions.c": [
          "File: Zend/zend_builtin_functions.c -> Zend/zend_builtin_functions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1097:  zend_string *key;",
          "1099:  ZEND_HASH_FOREACH_STR_KEY_PTR(&ce->properties_info, key, prop_info) {",
          "1103:        !zend_check_protected(prop_info->ce, scope)) ||",
          "1104:       ((prop_info->flags & ZEND_ACC_PRIVATE) &&",
          "1107:    continue;",
          "1108:   }",
          "1109:   prop = NULL;",
          "",
          "[Removed Lines]",
          "1100:   if (((prop_info->flags & ZEND_ACC_SHADOW) &&",
          "1101:        prop_info->ce != scope) ||",
          "1102:       ((prop_info->flags & ZEND_ACC_PROTECTED) &&",
          "1105:         ce != scope &&",
          "1106:      prop_info->ce != scope)) {",
          "",
          "[Added Lines]",
          "1100:   if (((prop_info->flags & ZEND_ACC_PROTECTED) &&",
          "1103:         prop_info->ce != scope)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1403:   RETURN_NULL();",
          "1404:  }",
          "1408:   RETURN_TRUE;",
          "1409:  }",
          "",
          "[Removed Lines]",
          "1406:  if ((property_info = zend_hash_find_ptr(&ce->properties_info, property)) != NULL",
          "1407:   && (property_info->flags & ZEND_ACC_SHADOW) == 0) {",
          "",
          "[Added Lines]",
          "1403:  property_info = zend_hash_find_ptr(&ce->properties_info, property);",
          "1404:  if (property_info != NULL",
          "1405:   && (!(property_info->flags & ZEND_ACC_PRIVATE)",
          "1406:    || property_info->ce == ce)) {",
          "",
          "---------------"
        ],
        "Zend/zend_compile.h||Zend/zend_compile.h": [
          "File: Zend/zend_compile.h -> Zend/zend_compile.h"
        ],
        "Zend/zend_inheritance.c||Zend/zend_inheritance.c": [
          "File: Zend/zend_inheritance.c -> Zend/zend_inheritance.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: }",
          "49: {",
          "50:  zend_property_info* new_property_info = pemalloc(sizeof(zend_property_info), 1);",
          "",
          "[Removed Lines]",
          "35: {",
          "36:  zend_property_info* new_property_info;",
          "38:  new_property_info = zend_arena_alloc(&CG(arena), sizeof(zend_property_info));",
          "39:  memcpy(new_property_info, property_info, sizeof(zend_property_info));",
          "40:  zend_string_addref(new_property_info->name);",
          "41:  if (new_property_info->doc_comment) {",
          "42:   zend_string_addref(new_property_info->doc_comment);",
          "43:  }",
          "44:  return new_property_info;",
          "45: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "173: {",
          "180:  if (fn_flags & ZEND_ACC_PUBLIC) {",
          "181:   return \"public\";",
          "182:  }",
          "184: }",
          "",
          "[Removed Lines]",
          "174:  if (fn_flags & ZEND_ACC_PRIVATE) {",
          "175:   return \"private\";",
          "176:  }",
          "177:  if (fn_flags & ZEND_ACC_PROTECTED) {",
          "178:   return \"protected\";",
          "179:  }",
          "183:  return \"\";",
          "",
          "[Added Lines]",
          "162:  } else if (fn_flags & ZEND_ACC_PRIVATE) {",
          "163:   return \"private\";",
          "164:  } else {",
          "165:   ZEND_ASSERT(fn_flags & ZEND_ACC_PROTECTED);",
          "166:   return \"protected\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "685:  if (UNEXPECTED(child)) {",
          "686:   child_info = Z_PTR_P(child);",
          "688:    child_info->flags |= ZEND_ACC_CHANGED;",
          "689:   } else {",
          "690:    if (UNEXPECTED((parent_info->flags & ZEND_ACC_STATIC) != (child_info->flags & ZEND_ACC_STATIC))) {",
          "",
          "[Removed Lines]",
          "687:   if (UNEXPECTED(parent_info->flags & (ZEND_ACC_PRIVATE|ZEND_ACC_SHADOW))) {",
          "",
          "[Added Lines]",
          "671:   if (UNEXPECTED(parent_info->flags & ZEND_ACC_PRIVATE)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "711:    }",
          "712:   }",
          "713:  } else {",
          "722:   } else {",
          "728:   }",
          "729:   _zend_hash_append_ptr(&ce->properties_info, key, child_info);",
          "730:  }",
          "",
          "[Removed Lines]",
          "714:   if (UNEXPECTED(parent_info->flags & ZEND_ACC_PRIVATE)) {",
          "715:    if (UNEXPECTED(ce->type & ZEND_INTERNAL_CLASS)) {",
          "716:     child_info = zend_duplicate_property_info_internal(parent_info);",
          "717:    } else {",
          "718:     child_info = zend_duplicate_property_info(parent_info);",
          "719:    }",
          "723:    if (UNEXPECTED(ce->type & ZEND_INTERNAL_CLASS)) {",
          "724:     child_info = zend_duplicate_property_info_internal(parent_info);",
          "725:    } else {",
          "726:     child_info = parent_info;",
          "727:    }",
          "",
          "[Added Lines]",
          "698:   if (UNEXPECTED(ce->type & ZEND_INTERNAL_CLASS)) {",
          "699:    child_info = zend_duplicate_property_info_internal(parent_info);",
          "701:    child_info = parent_info;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1683:    if ((coliding_prop = zend_hash_find_ptr(&ce->properties_info, prop_name)) != NULL) {",
          "1689:      zend_hash_del(&ce->properties_info, prop_name);",
          "1690:      flags |= ZEND_ACC_CHANGED;",
          "1691:     } else {",
          "",
          "[Removed Lines]",
          "1684:     if (coliding_prop->flags & ZEND_ACC_SHADOW) {",
          "1685:      zend_string_release_ex(coliding_prop->name, 0);",
          "1686:      if (coliding_prop->doc_comment) {",
          "1687:       zend_string_release_ex(coliding_prop->doc_comment, 0);",
          "1688:                     }",
          "",
          "[Added Lines]",
          "1658:     if ((coliding_prop->flags & ZEND_ACC_PRIVATE) && coliding_prop->ce != ce) {",
          "",
          "---------------"
        ],
        "Zend/zend_object_handlers.c||Zend/zend_object_handlers.c": [
          "File: Zend/zend_object_handlers.c -> Zend/zend_object_handlers.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "326:  if (property_info->flags & ZEND_ACC_PUBLIC) {",
          "327:   return 1;",
          "329:   if (EG(fake_scope)) {",
          "330:    scope = EG(fake_scope);",
          "331:   } else {",
          "332:    scope = zend_get_executed_scope();",
          "333:   }",
          "338:   } else {",
          "340:   }",
          "342:  }",
          "344: }",
          "",
          "[Removed Lines]",
          "328:  } else if (property_info->flags & ZEND_ACC_PRIVATE) {",
          "334:   return (ce == scope || property_info->ce == scope);",
          "335:  } else if (property_info->flags & ZEND_ACC_PROTECTED) {",
          "336:   if (EG(fake_scope)) {",
          "337:    scope = EG(fake_scope);",
          "339:    scope = zend_get_executed_scope();",
          "341:   return zend_check_protected(property_info->ce, scope);",
          "343:  return 0;",
          "",
          "[Added Lines]",
          "328:  } else {",
          "334:   if (property_info->flags & ZEND_ACC_PRIVATE) {",
          "335:    return property_info->ce == scope;",
          "337:    ZEND_ASSERT(property_info->flags & ZEND_ACC_PROTECTED);",
          "338:    return zend_check_protected(property_info->ce, scope);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "377:  if (EXPECTED(zv != NULL)) {",
          "378:   property_info = (zend_property_info*)Z_PTR_P(zv);",
          "379:   flags = property_info->flags;",
          "392:      }",
          "394:     }",
          "395:    } else {",
          "398:    }",
          "399:   }",
          "404:  } else {",
          "406:  }",
          "408:  if (scope != ce",
          "409:   && scope",
          "410:   && is_derived_class(ce, scope)",
          "411:   && (zv = zend_hash_find(&scope->properties_info, member)) != NULL",
          "413:   property_info = (zend_property_info*)Z_PTR_P(zv);",
          "414:   if (UNEXPECTED((property_info->flags & ZEND_ACC_STATIC) != 0)) {",
          "415:    return ZEND_DYNAMIC_PROPERTY_OFFSET;",
          "",
          "[Removed Lines]",
          "380:   if (UNEXPECTED((flags & ZEND_ACC_SHADOW) != 0)) {",
          "382:    property_info = NULL;",
          "383:   } else {",
          "384:    if (EXPECTED(zend_verify_property_access(property_info, ce) != 0)) {",
          "385:     if (UNEXPECTED(!(flags & ZEND_ACC_CHANGED))",
          "386:      || UNEXPECTED((flags & ZEND_ACC_PRIVATE))) {",
          "387:      if (UNEXPECTED((flags & ZEND_ACC_STATIC) != 0)) {",
          "388:       if (!silent) {",
          "389:        zend_error(E_NOTICE, \"Accessing static property %s::$%s as non static\", ZSTR_VAL(ce->name), ZSTR_VAL(member));",
          "390:       }",
          "391:       return ZEND_DYNAMIC_PROPERTY_OFFSET;",
          "393:      goto exit;",
          "397:     property_info = ZEND_WRONG_PROPERTY_INFO;",
          "400:  }",
          "402:  if (EG(fake_scope)) {",
          "403:   scope = EG(fake_scope);",
          "405:   scope = zend_get_executed_scope();",
          "412:   && ((zend_property_info*)Z_PTR_P(zv))->flags & ZEND_ACC_PRIVATE) {",
          "",
          "[Added Lines]",
          "378:   if (flags & ZEND_ACC_PUBLIC) {",
          "379:    if (!(flags & ZEND_ACC_CHANGED)) {",
          "380: no_changed:",
          "381:     if (UNEXPECTED((flags & ZEND_ACC_STATIC) != 0)) {",
          "382:      if (!silent) {",
          "383:       zend_error(E_NOTICE, \"Accessing static property %s::$%s as non static\", ZSTR_VAL(ce->name), ZSTR_VAL(member));",
          "385:      return ZEND_DYNAMIC_PROPERTY_OFFSET;",
          "387:     goto exit;",
          "388:    }",
          "389:    goto check_scope;",
          "390:   } else {",
          "391:    if (EG(fake_scope)) {",
          "392:     scope = EG(fake_scope);",
          "394:     scope = zend_get_executed_scope();",
          "395:    }",
          "396:    if (flags & ZEND_ACC_PRIVATE) {",
          "397:     if (property_info->ce == scope) {",
          "398:      goto no_changed;",
          "399:     } else if (property_info->ce != ce) {",
          "401:      property_info = NULL;",
          "402:     } else {",
          "404:      property_info = ZEND_WRONG_PROPERTY_INFO;",
          "405:     }",
          "406:    } else {",
          "407:     ZEND_ASSERT(flags & ZEND_ACC_PROTECTED);",
          "408:     if (zend_check_protected(property_info->ce, scope)) {",
          "409:      if (!(flags & ZEND_ACC_CHANGED)) {",
          "410:       goto no_changed;",
          "411:      }",
          "412:     } else {",
          "414:      property_info = ZEND_WRONG_PROPERTY_INFO;",
          "415:     }",
          "419: check_scope:",
          "420:   if (EG(fake_scope)) {",
          "421:    scope = EG(fake_scope);",
          "422:   } else {",
          "423:    scope = zend_get_executed_scope();",
          "424:   }",
          "431:   && ((zend_property_info*)Z_PTR_P(zv))->flags & ZEND_ACC_PRIVATE",
          "432:   && ((zend_property_info*)Z_PTR_P(zv))->ce == scope) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "457:  if (EXPECTED(zv != NULL)) {",
          "458:   property_info = (zend_property_info*)Z_PTR_P(zv);",
          "459:   flags = property_info->flags;",
          "471:      }",
          "473:     }",
          "474:    } else {",
          "477:    }",
          "478:   }",
          "483:  } else {",
          "485:  }",
          "487:  if (scope != ce",
          "488:   && scope",
          "489:   && is_derived_class(ce, scope)",
          "490:   && (zv = zend_hash_find(&scope->properties_info, member)) != NULL",
          "492:   property_info = (zend_property_info*)Z_PTR_P(zv);",
          "493:  } else if (UNEXPECTED(property_info == NULL)) {",
          "494: exit_dynamic:",
          "",
          "[Removed Lines]",
          "460:   if (UNEXPECTED((flags & ZEND_ACC_SHADOW) != 0)) {",
          "462:    property_info = NULL;",
          "463:   } else {",
          "464:    if (EXPECTED(zend_verify_property_access(property_info, ce) != 0)) {",
          "465:     if (UNEXPECTED(!(flags & ZEND_ACC_CHANGED))",
          "466:      || UNEXPECTED((flags & ZEND_ACC_PRIVATE))) {",
          "467:      if (UNEXPECTED((flags & ZEND_ACC_STATIC) != 0)) {",
          "468:       if (!silent) {",
          "469:        zend_error(E_NOTICE, \"Accessing static property %s::$%s as non static\", ZSTR_VAL(ce->name), ZSTR_VAL(member));",
          "470:       }",
          "472:      goto exit;",
          "476:     property_info = ZEND_WRONG_PROPERTY_INFO;",
          "479:  }",
          "481:  if (EG(fake_scope)) {",
          "482:   scope = EG(fake_scope);",
          "484:   scope = zend_get_executed_scope();",
          "491:   && ((zend_property_info*)Z_PTR_P(zv))->flags & ZEND_ACC_PRIVATE) {",
          "",
          "[Added Lines]",
          "481:   if (flags & ZEND_ACC_PUBLIC) {",
          "482:    if (!(flags & ZEND_ACC_CHANGED)) {",
          "483: no_changed:",
          "484:     if (UNEXPECTED((flags & ZEND_ACC_STATIC) != 0)) {",
          "485:      if (!silent) {",
          "486:       zend_error(E_NOTICE, \"Accessing static property %s::$%s as non static\", ZSTR_VAL(ce->name), ZSTR_VAL(member));",
          "488:     }",
          "489:     goto exit;",
          "490:    }",
          "491:    goto check_scope;",
          "492:   } else {",
          "493:    if (EG(fake_scope)) {",
          "494:     scope = EG(fake_scope);",
          "495:    } else {",
          "496:     scope = zend_get_executed_scope();",
          "497:    }",
          "498:    if (flags & ZEND_ACC_PRIVATE) {",
          "499:     if (property_info->ce == scope) {",
          "500:      goto no_changed;",
          "501:     } else if (property_info->ce != ce) {",
          "503:      property_info = NULL;",
          "504:     } else {",
          "506:      property_info = ZEND_WRONG_PROPERTY_INFO;",
          "509:     ZEND_ASSERT(flags & ZEND_ACC_PROTECTED);",
          "510:     if (zend_check_protected(property_info->ce, scope)) {",
          "511:      if (!(flags & ZEND_ACC_CHANGED)) {",
          "512:       goto no_changed;",
          "513:      }",
          "514:     } else {",
          "516:      property_info = ZEND_WRONG_PROPERTY_INFO;",
          "517:     }",
          "521: check_scope:",
          "522:   if (EG(fake_scope)) {",
          "523:    scope = EG(fake_scope);",
          "524:   } else {",
          "525:    scope = zend_get_executed_scope();",
          "526:   }",
          "533:   && ((zend_property_info*)Z_PTR_P(zv))->flags & ZEND_ACC_PRIVATE",
          "534:   && ((zend_property_info*)Z_PTR_P(zv))->ce == scope) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "519:  const char *prop_name;",
          "520:  zend_string *member;",
          "521:  size_t prop_name_len;",
          "523:  if (ZSTR_VAL(prop_info_name)[0] == 0) {",
          "524:   zend_unmangle_property_name_ex(prop_info_name, &class_name, &prop_name, &prop_name_len);",
          "525:   member = zend_string_init(prop_name, prop_name_len, 0);",
          "535:    return FAILURE;",
          "536:   }",
          "547:    return FAILURE;",
          "548:   }",
          "549:  }",
          "551: }",
          "",
          "[Removed Lines]",
          "526:  } else {",
          "527:   member = zend_string_copy(prop_info_name);",
          "528:  }",
          "529:  property_info = zend_get_property_info(zobj->ce, member, 1);",
          "530:  zend_string_release_ex(member, 0);",
          "531:  if (property_info == NULL) {",
          "533:   if (class_name && class_name[0] != '*') {",
          "537:   return SUCCESS;",
          "538:  } else if (property_info == ZEND_WRONG_PROPERTY_INFO) {",
          "539:   return FAILURE;",
          "540:  }",
          "541:  if (class_name && class_name[0] != '*') {",
          "542:   if (!(property_info->flags & ZEND_ACC_PRIVATE)) {",
          "544:    return FAILURE;",
          "545:   } else if (strcmp(ZSTR_VAL(prop_info_name)+1, ZSTR_VAL(property_info->name)+1)) {",
          "550:  return zend_verify_property_access(property_info, zobj->ce) ? SUCCESS : FAILURE;",
          "",
          "[Added Lines]",
          "565:  zend_class_entry *scope;",
          "570:   property_info = zend_get_property_info(zobj->ce, member, 1);",
          "571:   zend_string_release_ex(member, 0);",
          "572:   if (property_info == NULL) {",
          "573:    if (class_name[0] != '*') {",
          "575:     return FAILURE;",
          "576:    }",
          "577:    return SUCCESS;",
          "578:   } else if (property_info == ZEND_WRONG_PROPERTY_INFO) {",
          "581:   if (class_name[0] != '*') {",
          "582:    if (!(property_info->flags & ZEND_ACC_PRIVATE)) {",
          "584:     return FAILURE;",
          "585:    } else if (strcmp(ZSTR_VAL(prop_info_name)+1, ZSTR_VAL(property_info->name)+1)) {",
          "587:     return FAILURE;",
          "588:    }",
          "589:   } else {",
          "590:    ZEND_ASSERT(property_info->flags & ZEND_ACC_PROTECTED);",
          "591:   }",
          "592:  } else {",
          "593:   property_info = zend_get_property_info(zobj->ce, prop_info_name, 1);",
          "594:   if (property_info == NULL) {",
          "595:    return SUCCESS;",
          "596:   } else if (property_info == ZEND_WRONG_PROPERTY_INFO) {",
          "599:   ZEND_ASSERT(property_info->flags & ZEND_ACC_PUBLIC);",
          "601:  return SUCCESS;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1457:  if (constructor) {",
          "1458:   if (constructor->op_array.fn_flags & ZEND_ACC_PUBLIC) {",
          "1463:    if (EG(fake_scope)) {",
          "1464:     scope = EG(fake_scope);",
          "1465:    } else {",
          "1466:     scope = zend_get_executed_scope();",
          "1467:    }",
          "1475:     }",
          "1484:    } else {",
          "1494:     }",
          "1495:    }",
          "1496:   }",
          "",
          "[Removed Lines]",
          "1460:   } else if (constructor->op_array.fn_flags & ZEND_ACC_PRIVATE) {",
          "1468:    if (UNEXPECTED(constructor->common.scope != scope)) {",
          "1469:     if (scope) {",
          "1470:      zend_throw_error(NULL, \"Call to private %s::%s() from context '%s'\", ZSTR_VAL(constructor->common.scope->name), ZSTR_VAL(constructor->common.function_name), ZSTR_VAL(scope->name));",
          "1471:      constructor = NULL;",
          "1472:     } else {",
          "1473:      zend_throw_error(NULL, \"Call to private %s::%s() from invalid context\", ZSTR_VAL(constructor->common.scope->name), ZSTR_VAL(constructor->common.function_name));",
          "1474:      constructor = NULL;",
          "1476:    }",
          "1477:   } else if ((constructor->common.fn_flags & ZEND_ACC_PROTECTED)) {",
          "1482:    if (EG(fake_scope)) {",
          "1483:     scope = EG(fake_scope);",
          "1485:     scope = zend_get_executed_scope();",
          "1486:    }",
          "1487:    if (UNEXPECTED(!zend_check_protected(zend_get_function_root_class(constructor), scope))) {",
          "1488:     if (scope) {",
          "1489:      zend_throw_error(NULL, \"Call to protected %s::%s() from context '%s'\", ZSTR_VAL(constructor->common.scope->name), ZSTR_VAL(constructor->common.function_name), ZSTR_VAL(scope->name));",
          "1490:      constructor = NULL;",
          "1491:     } else {",
          "1492:      zend_throw_error(NULL, \"Call to protected %s::%s() from invalid context\", ZSTR_VAL(constructor->common.scope->name), ZSTR_VAL(constructor->common.function_name));",
          "1493:      constructor = NULL;",
          "",
          "[Added Lines]",
          "1511:   } else {",
          "1517:    if (constructor->op_array.fn_flags & ZEND_ACC_PRIVATE) {",
          "1520:     if (UNEXPECTED(constructor->common.scope != scope)) {",
          "1521:      if (scope) {",
          "1522:       zend_throw_error(NULL, \"Call to private %s::%s() from context '%s'\", ZSTR_VAL(constructor->common.scope->name), ZSTR_VAL(constructor->common.function_name), ZSTR_VAL(scope->name));",
          "1523:       constructor = NULL;",
          "1524:      } else {",
          "1525:       zend_throw_error(NULL, \"Call to private %s::%s() from invalid context\", ZSTR_VAL(constructor->common.scope->name), ZSTR_VAL(constructor->common.function_name));",
          "1526:       constructor = NULL;",
          "1527:      }",
          "1530:     ZEND_ASSERT(constructor->common.fn_flags & ZEND_ACC_PROTECTED);",
          "1535:     if (UNEXPECTED(!zend_check_protected(zend_get_function_root_class(constructor), scope))) {",
          "1536:      if (scope) {",
          "1537:       zend_throw_error(NULL, \"Call to protected %s::%s() from context '%s'\", ZSTR_VAL(constructor->common.scope->name), ZSTR_VAL(constructor->common.function_name), ZSTR_VAL(scope->name));",
          "1538:       constructor = NULL;",
          "1539:      } else {",
          "1540:       zend_throw_error(NULL, \"Call to protected %s::%s() from invalid context\", ZSTR_VAL(constructor->common.scope->name), ZSTR_VAL(constructor->common.function_name));",
          "1541:       constructor = NULL;",
          "1542:      }",
          "",
          "---------------"
        ],
        "Zend/zend_opcode.c||Zend/zend_opcode.c": [
          "File: Zend/zend_opcode.c -> Zend/zend_opcode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "242:     efree(ce->default_static_members_table);",
          "243:    }",
          "244:    ZEND_HASH_FOREACH_PTR(&ce->properties_info, prop_info) {",
          "246:      zend_string_release_ex(prop_info->name, 0);",
          "247:      if (prop_info->doc_comment) {",
          "248:       zend_string_release_ex(prop_info->doc_comment, 0);",
          "",
          "[Removed Lines]",
          "245:     if (prop_info->ce == ce || (prop_info->flags & ZEND_ACC_SHADOW)) {",
          "",
          "[Added Lines]",
          "245:     if (prop_info->ce == ce) {",
          "",
          "---------------"
        ],
        "ext/reflection/php_reflection.c||ext/reflection/php_reflection.c": [
          "File: ext/reflection/php_reflection.c -> ext/reflection/php_reflection.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "366:   zend_property_info *prop;",
          "368:   ZEND_HASH_FOREACH_PTR(&ce->properties_info, prop) {",
          "370:     count_shadow_props++;",
          "371:    } else if (prop->flags & ZEND_ACC_STATIC) {",
          "372:     count_static_props++;",
          "",
          "[Removed Lines]",
          "369:    if(prop->flags & ZEND_ACC_SHADOW) {",
          "",
          "[Added Lines]",
          "369:    if ((prop->flags & ZEND_ACC_PRIVATE) && prop->ce != ce) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "380:   zend_property_info *prop;",
          "382:   ZEND_HASH_FOREACH_PTR(&ce->properties_info, prop) {",
          "384:     _property_string(str, prop, NULL, ZSTR_VAL(sub_indent));",
          "385:    }",
          "386:   } ZEND_HASH_FOREACH_END();",
          "",
          "[Removed Lines]",
          "383:    if ((prop->flags & ZEND_ACC_STATIC) && !(prop->flags & ZEND_ACC_SHADOW)) {",
          "",
          "[Added Lines]",
          "383:    if ((prop->flags & ZEND_ACC_STATIC) && (!(prop->flags & ZEND_ACC_PRIVATE) || prop->ce == ce)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "427:   zend_property_info *prop;",
          "429:   ZEND_HASH_FOREACH_PTR(&ce->properties_info, prop) {",
          "431:     _property_string(str, prop, NULL, ZSTR_VAL(sub_indent));",
          "432:    }",
          "433:   } ZEND_HASH_FOREACH_END();",
          "",
          "[Removed Lines]",
          "430:    if (!(prop->flags & (ZEND_ACC_STATIC|ZEND_ACC_SHADOW))) {",
          "",
          "[Added Lines]",
          "430:    if (!(prop->flags & ZEND_ACC_STATIC)",
          "431:     && (!(prop->flags & ZEND_ACC_PRIVATE) || prop->ce == ce)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3764:  zend_string *key;",
          "3766:  ZEND_HASH_FOREACH_STR_KEY_PTR(&ce->properties_info, key, prop_info) {",
          "3770:        !zend_check_protected(prop_info->ce, ce)) ||",
          "3771:       ((prop_info->flags & ZEND_ACC_PRIVATE) &&",
          "3772:        prop_info->ce != ce)) {",
          "",
          "[Removed Lines]",
          "3767:   if (((prop_info->flags & ZEND_ACC_SHADOW) &&",
          "3768:        prop_info->ce != ce) ||",
          "3769:       ((prop_info->flags & ZEND_ACC_PROTECTED) &&",
          "",
          "[Added Lines]",
          "3768:   if (((prop_info->flags & ZEND_ACC_PROTECTED) &&",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4221:  GET_REFLECTION_OBJECT_PTR(ce);",
          "4222:  if ((property_info = zend_hash_find_ptr(&ce->properties_info, name)) != NULL) {",
          "4224:    RETURN_FALSE;",
          "4225:   }",
          "4226:   RETURN_TRUE;",
          "",
          "[Removed Lines]",
          "4223:   if (property_info->flags & ZEND_ACC_SHADOW) {",
          "",
          "[Added Lines]",
          "4222:   if ((property_info->flags & ZEND_ACC_PRIVATE) && property_info->ce != ce) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4256:  GET_REFLECTION_OBJECT_PTR(ce);",
          "4257:  if ((property_info = zend_hash_find_ptr(&ce->properties_info, name)) != NULL) {",
          "4259:    reflection_property_factory(ce, name, property_info, return_value);",
          "4260:    return;",
          "4261:   }",
          "",
          "[Removed Lines]",
          "4258:   if ((property_info->flags & ZEND_ACC_SHADOW) == 0) {",
          "",
          "[Added Lines]",
          "4257:   if (!(property_info->flags & ZEND_ACC_PRIVATE) || property_info->ce == ce) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4297:   }",
          "4298:   ce = ce2;",
          "4301:    reflection_property_factory_str(ce, str_name, str_name_len, property_info, return_value);",
          "4302:    return;",
          "4303:   }",
          "",
          "[Removed Lines]",
          "4300:   if ((property_info = zend_hash_str_find_ptr(&ce->properties_info, str_name, str_name_len)) != NULL && (property_info->flags & ZEND_ACC_SHADOW) == 0) {",
          "",
          "[Added Lines]",
          "4299:   property_info = zend_hash_str_find_ptr(&ce->properties_info, str_name, str_name_len);",
          "4300:   if (property_info != NULL",
          "4301:    && (!(property_info->flags & ZEND_ACC_PRIVATE)",
          "4302:     || property_info->ce == ce)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4316:  zval *retval = va_arg(args, zval*);",
          "4317:  long filter = va_arg(args, long);",
          "4320:   return 0;",
          "4321:  }",
          "",
          "[Removed Lines]",
          "4319:  if (pptr->flags & ZEND_ACC_SHADOW) {",
          "",
          "[Added Lines]",
          "4321:  if ((pptr->flags & ZEND_ACC_PRIVATE) && pptr->ce != ce) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "5279:  }",
          "5283:   if (property_info == NULL && Z_TYPE_P(classname) == IS_OBJECT && Z_OBJ_HT_P(classname)->get_properties) {",
          "5284:    if (zend_hash_exists(Z_OBJ_HT_P(classname)->get_properties(classname), name)) {",
          "",
          "[Removed Lines]",
          "5281:  if ((property_info = zend_hash_find_ptr(&ce->properties_info, name)) == NULL || (property_info->flags & ZEND_ACC_SHADOW)) {",
          "",
          "[Added Lines]",
          "5283:  property_info = zend_hash_find_ptr(&ce->properties_info, name);",
          "5284:  if (property_info == NULL",
          "5285:   || ((property_info->flags & ZEND_ACC_PRIVATE)",
          "5286:    && property_info->ce != ce)) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "5531:  ce = tmp_ce = ref->ce;",
          "5532:  while (tmp_ce && (tmp_info = zend_hash_find_ptr(&tmp_ce->properties_info, ref->unmangled_name)) != NULL) {",
          "5535:    break;",
          "5536:   }",
          "",
          "[Removed Lines]",
          "5533:   if (tmp_info->flags & ZEND_ACC_PRIVATE || tmp_info->flags & ZEND_ACC_SHADOW) {",
          "",
          "[Added Lines]",
          "5538:   if (tmp_info->flags & ZEND_ACC_PRIVATE) {",
          "",
          "---------------"
        ],
        "ext/tidy/tests/027.phpt||ext/tidy/tests/027.phpt": [
          "File: ext/tidy/tests/027.phpt -> ext/tidy/tests/027.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:         private static $tidyconfig;",
          "13:         public function __construct() {",
          "15:                         'indent'                        => false,",
          "16:                         'clean'                         => true,",
          "17:                         'merge-divs'            => false,",
          "",
          "[Removed Lines]",
          "14:                 $this->tidyconfig = array(",
          "",
          "[Added Lines]",
          "14:                 self::$tidyconfig = array(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:                 $data = \"awerawer\"; // in my code, $data is downloaded from a site",
          "31:                 $tidy = new tidy;",
          "33:                 $tidy->cleanRepair();",
          "35:                 return $tidy;",
          "",
          "[Removed Lines]",
          "32:                 $tidy->parseString($data, $this->tidyconfig, 'utf8');",
          "",
          "[Added Lines]",
          "32:                 $tidy->parseString($data, self::$tidyconfig, 'utf8');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7d16058be7c7ae1471a6ec1e5855496261603252",
      "candidate_info": {
        "commit_hash": "7d16058be7c7ae1471a6ec1e5855496261603252",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/7d16058be7c7ae1471a6ec1e5855496261603252",
        "files": [
          "sapi/apache2handler/sapi_apache2.c"
        ],
        "message": "Fix for bug #76582\n\nThe brigade seems to end up in a messed up state if something fails\nin shutdown, so we clean it up.",
        "before_after_code_files": [
          "sapi/apache2handler/sapi_apache2.c||sapi/apache2handler/sapi_apache2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "sapi/apache2handler/sapi_apache2.c||sapi/apache2handler/sapi_apache2.c"
          ],
          "candidate": [
            "sapi/apache2handler/sapi_apache2.c||sapi/apache2handler/sapi_apache2.c"
          ]
        }
      },
      "candidate_diff": {
        "sapi/apache2handler/sapi_apache2.c||sapi/apache2handler/sapi_apache2.c": [
          "File: sapi/apache2handler/sapi_apache2.c -> sapi/apache2handler/sapi_apache2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "723:  if (!parent_req) {",
          "724:   php_apache_request_dtor(r);",
          "725:   ctx->request_processed = 1;",
          "726:   bucket = apr_bucket_eos_create(r->connection->bucket_alloc);",
          "727:   APR_BRIGADE_INSERT_TAIL(brigade, bucket);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "726:   apr_brigade_cleanup(brigade);",
          "",
          "---------------"
        ]
      }
    }
  ]
}