{
  "cve_id": "CVE-2017-8929",
  "cve_desc": "The sized_string_cmp function in libyara/sizedstr.c in YARA 3.5.0 allows remote attackers to cause a denial of service (use-after-free and application crash) via a crafted rule.",
  "repo": "VirusTotal/yara",
  "patch_hash": "053e67e3ec81cc9268ce30eaf0d6663d8639ed1e",
  "patch_info": {
    "commit_hash": "053e67e3ec81cc9268ce30eaf0d6663d8639ed1e",
    "repo": "VirusTotal/yara",
    "commit_url": "https://github.com/VirusTotal/yara/commit/053e67e3ec81cc9268ce30eaf0d6663d8639ed1e",
    "files": [
      "libyara/arena.c",
      "libyara/exec.c",
      "libyara/include/yara/object.h",
      "libyara/include/yara/sizedstr.h",
      "libyara/modules/tests.c",
      "libyara/object.c",
      "libyara/sizedstr.c",
      "tests/test-rules.c"
    ],
    "message": "Fix issue #658",
    "before_after_code_files": [
      "libyara/arena.c||libyara/arena.c",
      "libyara/exec.c||libyara/exec.c",
      "libyara/include/yara/object.h||libyara/include/yara/object.h",
      "libyara/include/yara/sizedstr.h||libyara/include/yara/sizedstr.h",
      "libyara/modules/tests.c||libyara/modules/tests.c",
      "libyara/object.c||libyara/object.c",
      "libyara/sizedstr.c||libyara/sizedstr.c",
      "tests/test-rules.c||tests/test-rules.c"
    ]
  },
  "patch_diff": {
    "libyara/arena.c||libyara/arena.c": [
      "File: libyara/arena.c -> libyara/arena.c"
    ],
    "libyara/exec.c||libyara/exec.c": [
      "File: libyara/exec.c -> libyara/exec.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "34: #include <time.h>",
      "35: #include <math.h>",
      "37: #include <yara/endian.h>",
      "38: #include <yara/exec.h>",
      "39: #include <yara/limits.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "37: #include <yara/arena.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "177:   YR_RULE* rule;",
      "178:   YR_MATCH* match;",
      "179:   YR_OBJECT_FUNCTION* function;",
      "181:   char* identifier;",
      "182:   char* args_fmt;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "181:   YR_OBJECT** obj_ptr;",
      "182:   YR_ARENA* obj_arena;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "201:   if (stack == NULL)",
      "202:     return ERROR_INSUFFICIENT_MEMORY;",
      "204:   while(!stop)",
      "205:   {",
      "206:     switch(*ip)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "207:   FAIL_ON_ERROR_WITH_CLEANUP(",
      "208:       yr_arena_create(1024, 0, &obj_arena),",
      "209:       yr_free(stack));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "437:         rule->clock_ticks += clock() - start;",
      "438:         start = clock();",
      "439:         #endif",
      "440:         break;",
      "442:       case OP_OBJ_LOAD:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "448:         assert(sp == 0);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "577:           }",
      "578:         }",
      "580:         assert(i < MAX_OVERLOADED_FUNCTIONS);",
      "582:         if (result == ERROR_SUCCESS)",
      "592:         break;",
      "594:       case OP_FOUND:",
      "",
      "[Removed Lines]",
      "583:         {",
      "584:           r1.o = function->return_obj;",
      "585:           push(r1);",
      "586:         }",
      "587:         else",
      "588:         {",
      "589:           stop = TRUE;",
      "590:         }",
      "",
      "[Added Lines]",
      "599:           result = yr_object_copy(function->return_obj, &r1.o);",
      "604:         if (result == ERROR_SUCCESS)",
      "605:           result = yr_arena_write_data(obj_arena, &r1.o, sizeof(r1.o), NULL);",
      "607:         stop = (result != ERROR_SUCCESS);",
      "608:         push(r1);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1146:     ip++;",
      "1147:   }",
      "1149:   yr_modules_unload_all(context);",
      "1150:   yr_free(stack);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1166:   obj_ptr = (YR_OBJECT**) yr_arena_base_address(obj_arena);",
      "1168:   while (obj_ptr != NULL)",
      "1169:   {",
      "1170:     yr_object_destroy(*obj_ptr);",
      "1172:     obj_ptr = (YR_OBJECT**) yr_arena_next_address(",
      "1173:         obj_arena, obj_ptr, sizeof(YR_OBJECT*));",
      "1174:   }",
      "1176:   yr_arena_destroy(obj_arena);",
      "",
      "---------------"
    ],
    "libyara/include/yara/object.h||libyara/include/yara/object.h": [
      "File: libyara/include/yara/object.h -> libyara/include/yara/object.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "86:     YR_OBJECT* object);",
      "89: YR_OBJECT* yr_object_lookup_field(",
      "90:     YR_OBJECT* object,",
      "91:     const char* field_name);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "89: int yr_object_copy(",
      "90:     YR_OBJECT* object,",
      "91:     YR_OBJECT** object_copy);",
      "",
      "---------------"
    ],
    "libyara/include/yara/sizedstr.h||libyara/include/yara/sizedstr.h": [
      "File: libyara/include/yara/sizedstr.h -> libyara/include/yara/sizedstr.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "62: int sized_string_cmp(",
      "66: #endif",
      "",
      "[Removed Lines]",
      "63:   SIZED_STRING* s1,",
      "64:   SIZED_STRING* s2);",
      "",
      "[Added Lines]",
      "63:     SIZED_STRING* s1,",
      "64:     SIZED_STRING* s2);",
      "67: SIZED_STRING* sized_string_dup(",
      "68:     SIZED_STRING* s);",
      "",
      "---------------"
    ],
    "libyara/modules/tests.c||libyara/modules/tests.c": [
      "File: libyara/modules/tests.c -> libyara/modules/tests.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "88: }",
      "91: begin_declarations;",
      "93:   begin_struct(\"constants\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "91: define_function(foobar)",
      "92: {",
      "93:   int64_t arg = integer_argument(1);",
      "95:   switch (arg)",
      "96:   {",
      "97:     case 1:",
      "98:       return_string(\"foo\");",
      "99:       break;",
      "100:     case 2:",
      "101:       return_string(\"bar\");",
      "102:       break;",
      "103:   }",
      "105:   return_string(\"oops\")",
      "106: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "125:   declare_function(\"fsum\", \"fff\", \"f\", fsum_3);",
      "126:   declare_function(\"length\", \"s\", \"i\", length);",
      "127:   declare_function(\"empty\", \"\", \"s\", empty);",
      "129: end_declarations;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "145:   declare_function(\"foobar\", \"i\", \"s\", foobar);",
      "",
      "---------------"
    ],
    "libyara/object.c||libyara/object.c": [
      "File: libyara/object.c -> libyara/object.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "573:   switch(object->type)",
      "574:   {",
      "575:     case OBJECT_TYPE_INTEGER:",
      "577:       break;",
      "579:     case OBJECT_TYPE_STRING:",
      "581:       break;",
      "583:     case OBJECT_TYPE_FUNCTION:",
      "",
      "[Removed Lines]",
      "576:       ((YR_OBJECT_INTEGER*) copy)->value = UNDEFINED;",
      "580:       ((YR_OBJECT_STRING*) copy)->value = NULL;",
      "",
      "[Added Lines]",
      "576:       ((YR_OBJECT_INTEGER*) copy)->value = ((YR_OBJECT_INTEGER*) object)->value;",
      "580:       if (((YR_OBJECT_STRING*) object)->value != NULL)",
      "581:       {",
      "582:         ((YR_OBJECT_STRING*) copy)->value = sized_string_dup(",
      "583:             ((YR_OBJECT_STRING*) object)->value);",
      "584:       }",
      "585:       else",
      "586:       {",
      "587:         ((YR_OBJECT_STRING*) copy)->value = NULL;",
      "588:       }",
      "589:       break;",
      "591:     case OBJECT_TYPE_FLOAT:",
      "592:       ((YR_OBJECT_DOUBLE*) copy)->value = ((YR_OBJECT_DOUBLE*) object)->value;",
      "",
      "---------------"
    ],
    "libyara/sizedstr.c||libyara/sizedstr.c": [
      "File: libyara/sizedstr.c -> libyara/sizedstr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
      "30: #include <yara/sizedstr.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "30: #include <string.h>",
      "31: #include <yara/mem.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "54:   else",
      "55:     return 1;",
      "56: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "61: SIZED_STRING* sized_string_dup(",
      "62:     SIZED_STRING* s)",
      "63: {",
      "64:   SIZED_STRING* result = (SIZED_STRING*) yr_malloc(",
      "65:       sizeof(SIZED_STRING) + s->length);",
      "67:   if (result == NULL)",
      "68:     return NULL;",
      "70:   result->length = s->length;",
      "71:   result->flags = s->flags;",
      "73:   strncpy(result->c_string, s->c_string, s->length + 1);",
      "75:   return result;",
      "76: }",
      "",
      "---------------"
    ],
    "tests/test-rules.c||tests/test-rules.c": [
      "File: tests/test-rules.c -> tests/test-rules.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1439:       }\",",
      "1440:       NULL);",
      "1442:   assert_true_rule(",
      "1443:       \"import \\\"tests\\\" \\",
      "1444:        rule test { \\",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1442:   assert_true_rule(",
      "1443:       \"import \\\"tests\\\" \\",
      "1444:        rule test { \\",
      "1445:         condition: tests.foobar(1) == tests.foobar(1) \\",
      "1446:       }\",",
      "1447:       NULL);",
      "1449:   assert_true_rule(",
      "1450:       \"import \\\"tests\\\" \\",
      "1451:        rule test { \\",
      "1452:         condition: tests.foobar(1) != tests.foobar(2) \\",
      "1453:       }\",",
      "1454:       NULL);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c3a6f1ef45e87828e02c73203a8745041594ae0e",
      "candidate_info": {
        "commit_hash": "c3a6f1ef45e87828e02c73203a8745041594ae0e",
        "repo": "VirusTotal/yara",
        "commit_url": "https://github.com/VirusTotal/yara/commit/c3a6f1ef45e87828e02c73203a8745041594ae0e",
        "files": [
          "libyara/arena.c",
          "libyara/exec.c",
          "libyara/object.c",
          "libyara/re.c"
        ],
        "message": "Fix warnings and minor code re-styling",
        "before_after_code_files": [
          "libyara/arena.c||libyara/arena.c",
          "libyara/exec.c||libyara/exec.c",
          "libyara/object.c||libyara/object.c",
          "libyara/re.c||libyara/re.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libyara/arena.c||libyara/arena.c",
            "libyara/exec.c||libyara/exec.c",
            "libyara/object.c||libyara/object.c"
          ],
          "candidate": [
            "libyara/arena.c||libyara/arena.c",
            "libyara/exec.c||libyara/exec.c",
            "libyara/object.c||libyara/object.c"
          ]
        }
      },
      "candidate_diff": {
        "libyara/arena.c||libyara/arena.c": [
          "File: libyara/arena.c -> libyara/arena.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "450:     reloc = page->reloc_list_head;",
          "453:     {",
          "454:       reloc->offset += (uint32_t) big_page->used;",
          "455:       reloc = reloc->next;",
          "",
          "[Removed Lines]",
          "452:     while(reloc != NULL)",
          "",
          "[Added Lines]",
          "453:     while (reloc != NULL)",
          "",
          "---------------"
        ],
        "libyara/exec.c||libyara/exec.c": [
          "File: libyara/exec.c -> libyara/exec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "445:         start = clock();",
          "446:         #endif",
          "449:         break;",
          "451:       case OP_OBJ_LOAD:",
          "",
          "[Removed Lines]",
          "448:         assert(sp == 0);",
          "",
          "[Added Lines]",
          "448:         assert(sp == 0); // at this point the stack should be empty.",
          "",
          "---------------"
        ],
        "libyara/object.c||libyara/object.c": [
          "File: libyara/object.c -> libyara/object.c"
        ],
        "libyara/re.c||libyara/re.c": [
          "File: libyara/re.c -> libyara/re.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "147: int _yr_re_is_word_char(",
          "148:     uint8_t* input,",
          "150: {",
          "151:   int result = ((isalnum(*input) || (*input) == '_'));",
          "",
          "[Removed Lines]",
          "149:     int character_size)",
          "",
          "[Added Lines]",
          "149:     uint8_t character_size)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "968:     FAIL_ON_ERROR(_yr_emit_split(",
          "969:         emit_context,",
          "970:         re_node->greedy ? RE_OPCODE_SPLIT_B : RE_OPCODE_SPLIT_A,",
          "972:         NULL,",
          "973:         &split_offset_addr,",
          "974:         &split_size));",
          "",
          "[Removed Lines]",
          "971:         -branch_size,",
          "",
          "[Added Lines]",
          "971:         -((int16_t) branch_size),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1009:     FAIL_ON_ERROR(_yr_emit_inst_arg_int16(",
          "1010:         emit_context,",
          "1011:         RE_OPCODE_JUMP,",
          "1013:         NULL,",
          "1014:         &jmp_offset_addr,",
          "1015:         &jmp_size));",
          "",
          "[Removed Lines]",
          "1012:         -(branch_size + split_size),",
          "",
          "[Added Lines]",
          "1012:         -((uint16_t)(branch_size + split_size)),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1873:   uint8_t* input;",
          "1874:   uint8_t mask;",
          "1875:   uint8_t value;",
          "1877:   RE_FIBER_LIST fibers;",
          "1878:   RE_THREAD_STORAGE* storage;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1876:   uint8_t character_size;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1882:   int bytes_matched;",
          "1883:   int max_bytes_matched;",
          "1884:   int match;",
          "1886:   int input_incr;",
          "1887:   int kill;",
          "1888:   int action;",
          "",
          "[Removed Lines]",
          "1885:   int character_size;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fc36b064096233b959b958d7cd51a2edb2f563e7",
      "candidate_info": {
        "commit_hash": "fc36b064096233b959b958d7cd51a2edb2f563e7",
        "repo": "VirusTotal/yara",
        "commit_url": "https://github.com/VirusTotal/yara/commit/fc36b064096233b959b958d7cd51a2edb2f563e7",
        "files": [
          "libyara/exec.c",
          "libyara/include/yara/modules.h",
          "libyara/include/yara/types.h"
        ],
        "message": "Use a union instead of a int64_t for arguments to module functions. This makes the code clearer, reduce typecasting and solve warnings.",
        "before_after_code_files": [
          "libyara/exec.c||libyara/exec.c",
          "libyara/include/yara/modules.h||libyara/include/yara/modules.h",
          "libyara/include/yara/types.h||libyara/include/yara/types.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libyara/exec.c||libyara/exec.c"
          ],
          "candidate": [
            "libyara/exec.c||libyara/exec.c"
          ]
        }
      },
      "candidate_diff": {
        "libyara/exec.c||libyara/exec.c": [
          "File: libyara/exec.c -> libyara/exec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: #define MEM_SIZE   MAX_LOOP_NESTING * LOOP_LOCAL_VARS",
          "65: #define push(x)  \\",
          "66:     if (sp < stack_size) \\",
          "",
          "[Removed Lines]",
          "53: typedef union _STACK_ITEM {",
          "55:   int64_t i;",
          "56:   double d;",
          "57:   void* p;",
          "58:   YR_OBJECT* o;",
          "59:   YR_STRING* s;",
          "60:   SIZED_STRING* ss;",
          "62: } STACK_ITEM;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "172:     time_t start_time)",
          "173: {",
          "174:   int64_t mem[MEM_SIZE];",
          "176:   int32_t sp = 0;",
          "177:   uint8_t* ip = rules->code_start;",
          "184:   #ifdef PROFILING_ENABLED",
          "185:   YR_RULE* current_rule = NULL;",
          "",
          "[Removed Lines]",
          "175:   int64_t args[MAX_FUNCTION_ARGS];",
          "179:   STACK_ITEM *stack;",
          "180:   STACK_ITEM r1;",
          "181:   STACK_ITEM r2;",
          "182:   STACK_ITEM r3;",
          "",
          "[Added Lines]",
          "167:   YR_VALUE args[MAX_FUNCTION_ARGS];",
          "168:   YR_VALUE *stack;",
          "169:   YR_VALUE r1;",
          "170:   YR_VALUE r2;",
          "171:   YR_VALUE r3;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "208:   yr_get_configuration(YR_CONFIG_STACK_SIZE, (void*) &stack_size);",
          "212:   if (stack == NULL)",
          "213:     return ERROR_INSUFICIENT_MEMORY;",
          "",
          "[Removed Lines]",
          "210:   stack = (STACK_ITEM*) yr_malloc(stack_size * sizeof(STACK_ITEM));",
          "",
          "[Added Lines]",
          "199:   stack = (YR_VALUE*) yr_malloc(stack_size * sizeof(YR_VALUE));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "553:           if (is_undef(r1))  // count the number of undefined args",
          "554:             count++;",
          "557:           i--;",
          "558:         }",
          "",
          "[Removed Lines]",
          "556:           args[i - 1] = r1.i;",
          "",
          "[Added Lines]",
          "545:           args[i - 1] = r1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "581:           if (strcmp(function->prototypes[i].arguments_fmt, args_fmt) == 0)",
          "582:           {",
          "588:             break;",
          "589:           }",
          "590:         }",
          "",
          "[Removed Lines]",
          "583:             result = function->prototypes[i].code(",
          "584:                 (void*) args,",
          "585:                 context,",
          "586:                 function);",
          "",
          "[Added Lines]",
          "572:             result = function->prototypes[i].code(args, context, function);",
          "",
          "---------------"
        ],
        "libyara/include/yara/modules.h||libyara/include/yara/modules.h": [
          "File: libyara/include/yara/modules.h -> libyara/include/yara/modules.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "267: #define define_function(func) \\",
          "268:     int func ( \\",
          "270:         YR_SCAN_CONTEXT* __context, \\",
          "271:         YR_OBJECT_FUNCTION* __function_obj)",
          "274: #define sized_string_argument(n) \\",
          "277: #define string_argument(n) \\",
          "278:     (sized_string_argument(n)->c_string)",
          "280: #define integer_argument(n) \\",
          "283: #define float_argument(n) \\",
          "286: #define regexp_argument(n) \\",
          "290: #define module()        yr_object_get_root((YR_OBJECT*) __function_obj)",
          "",
          "[Removed Lines]",
          "269:         void* __args, \\",
          "275:     (*(SIZED_STRING**) &(((int64_t*) __args)[n-1]))",
          "281:     (((int64_t*) __args)[n-1])",
          "284:     (((double*) __args)[n-1])",
          "287:     ((RE_CODE)((int64_t*) __args)[n-1])",
          "",
          "[Added Lines]",
          "269:         YR_VALUE* __args, \\",
          "275:     (__args[n-1].ss)",
          "281:     (__args[n-1].i)",
          "284:     (__args[n-1].d)",
          "287:     ((RE_CODE)(__args[n-1].p))",
          "",
          "---------------"
        ],
        "libyara/include/yara/types.h||libyara/include/yara/types.h": [
          "File: libyara/include/yara/types.h -> libyara/include/yara/types.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "514: } YR_OBJECT_DICTIONARY;",
          "517: struct _YR_OBJECT_FUNCTION;",
          "520: typedef int (*YR_MODULE_FUNC)(",
          "522:     YR_SCAN_CONTEXT* context,",
          "523:     struct _YR_OBJECT_FUNCTION* function_obj);",
          "",
          "[Removed Lines]",
          "521:     void* args,",
          "",
          "[Added Lines]",
          "516: typedef union _YR_VALUE {",
          "518:   int64_t i;",
          "519:   double d;",
          "520:   void* p;",
          "521:   YR_OBJECT* o;",
          "522:   YR_STRING* s;",
          "523:   SIZED_STRING* ss;",
          "525: } YR_VALUE;",
          "532:     YR_VALUE* args,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7be98d1489e8f6645ba2b8d624e33dac6f0bfe79",
      "candidate_info": {
        "commit_hash": "7be98d1489e8f6645ba2b8d624e33dac6f0bfe79",
        "repo": "VirusTotal/yara",
        "commit_url": "https://github.com/VirusTotal/yara/commit/7be98d1489e8f6645ba2b8d624e33dac6f0bfe79",
        "files": [
          "libyara/exec.c",
          "libyara/grammar.c",
          "libyara/grammar.h",
          "libyara/grammar.y",
          "libyara/include/yara/types.h",
          "libyara/object.c"
        ],
        "message": "Improve legibility of object-related code",
        "before_after_code_files": [
          "libyara/exec.c||libyara/exec.c",
          "libyara/grammar.c||libyara/grammar.c",
          "libyara/grammar.h||libyara/grammar.h",
          "libyara/grammar.y||libyara/grammar.y",
          "libyara/include/yara/types.h||libyara/include/yara/types.h",
          "libyara/object.c||libyara/object.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libyara/exec.c||libyara/exec.c",
            "libyara/object.c||libyara/object.c"
          ],
          "candidate": [
            "libyara/exec.c||libyara/exec.c",
            "libyara/object.c||libyara/object.c"
          ]
        }
      },
      "candidate_diff": {
        "libyara/exec.c||libyara/exec.c": [
          "File: libyara/exec.c -> libyara/exec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "481:         switch(r1.o->type)",
          "482:         {",
          "483:           case OBJECT_TYPE_INTEGER:",
          "485:             break;",
          "487:           case OBJECT_TYPE_FLOAT:",
          "489:               r1.i = UNDEFINED;",
          "490:             else",
          "492:             break;",
          "494:           case OBJECT_TYPE_STRING:",
          "496:               r1.i = UNDEFINED;",
          "497:             else",
          "499:             break;",
          "501:           default:",
          "",
          "[Removed Lines]",
          "484:             r1.i = ((YR_OBJECT_INTEGER*) r1.o)->value;",
          "488:             if (isnan(((YR_OBJECT_DOUBLE*) r1.o)->value))",
          "491:               r1.d = ((YR_OBJECT_DOUBLE*) r1.o)->value;",
          "495:             if (((YR_OBJECT_STRING*) r1.o)->value == NULL)",
          "498:               r1.p = ((YR_OBJECT_STRING*) r1.o)->value;",
          "",
          "[Added Lines]",
          "484:             r1.i = r1.o->value.i;",
          "488:             if (isnan(r1.o->value.d))",
          "491:               r1.d = r1.o->value.d;",
          "495:             if (r1.o->value.ss == NULL)",
          "498:               r1.ss = r1.o->value.ss;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "571:           break;",
          "572:         }",
          "575:         result = ERROR_INTERNAL_FATAL_ERROR;",
          "577:         for (i = 0; i < MAX_OVERLOADED_FUNCTIONS; i++)",
          "",
          "[Removed Lines]",
          "574:         function = (YR_OBJECT_FUNCTION*) r2.o;",
          "",
          "[Added Lines]",
          "574:         function = object_as_function(r2.o);",
          "",
          "---------------"
        ],
        "libyara/grammar.c||libyara/grammar.c": [
          "File: libyara/grammar.c -> libyara/grammar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2242:           compiler->last_result = yr_parser_emit(",
          "2243:               yyscanner, OP_INDEX_ARRAY, NULL);",
          "2247:           (yyval.expression).type = EXPRESSION_TYPE_OBJECT;",
          "2248:           (yyval.expression).value.object = array->prototype_item;",
          "",
          "[Removed Lines]",
          "2245:           array = (YR_OBJECT_ARRAY*) (yyvsp[-3].expression).value.object;",
          "",
          "[Added Lines]",
          "2245:           array = object_as_array((yyvsp[-3].expression).value.object);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2263:           compiler->last_result = yr_parser_emit(",
          "2264:               yyscanner, OP_LOOKUP_DICT, NULL);",
          "2268:           (yyval.expression).type = EXPRESSION_TYPE_OBJECT;",
          "2269:           (yyval.expression).value.object = dict->prototype_item;",
          "",
          "[Removed Lines]",
          "2266:           dict = (YR_OBJECT_DICTIONARY*) (yyvsp[-3].expression).value.object;",
          "",
          "[Added Lines]",
          "2266:           dict = object_as_dictionary((yyvsp[-3].expression).value.object);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2292:             (yyvsp[-3].expression).value.object->type == OBJECT_TYPE_FUNCTION)",
          "2293:         {",
          "2294:           compiler->last_result = yr_parser_check_types(",
          "2297:           if (compiler->last_result == ERROR_SUCCESS)",
          "2298:             compiler->last_result = yr_arena_write_string(",
          "",
          "[Removed Lines]",
          "2295:               compiler, (YR_OBJECT_FUNCTION*) (yyvsp[-3].expression).value.object, (yyvsp[-1].c_string));",
          "",
          "[Added Lines]",
          "2295:               compiler, object_as_function((yyvsp[-3].expression).value.object), (yyvsp[-1].c_string));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2306:                 NULL,",
          "2307:                 NULL);",
          "2311:           (yyval.expression).type = EXPRESSION_TYPE_OBJECT;",
          "2312:           (yyval.expression).value.object = function->return_obj;",
          "",
          "[Removed Lines]",
          "2309:           function = (YR_OBJECT_FUNCTION*) (yyvsp[-3].expression).value.object;",
          "",
          "[Added Lines]",
          "2309:           function = object_as_function((yyvsp[-3].expression).value.object);",
          "",
          "---------------"
        ],
        "libyara/grammar.h||libyara/grammar.h": [
          "File: libyara/grammar.h -> libyara/grammar.h"
        ],
        "libyara/grammar.y||libyara/grammar.y": [
          "File: libyara/grammar.y -> libyara/grammar.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "715:           compiler->last_result = yr_parser_emit(",
          "716:               yyscanner, OP_INDEX_ARRAY, NULL);",
          "720:           $$.type = EXPRESSION_TYPE_OBJECT;",
          "721:           $$.value.object = array->prototype_item;",
          "",
          "[Removed Lines]",
          "718:           array = (YR_OBJECT_ARRAY*) $1.value.object;",
          "",
          "[Added Lines]",
          "718:           array = object_as_array($1.value.object);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "736:           compiler->last_result = yr_parser_emit(",
          "737:               yyscanner, OP_LOOKUP_DICT, NULL);",
          "741:           $$.type = EXPRESSION_TYPE_OBJECT;",
          "742:           $$.value.object = dict->prototype_item;",
          "",
          "[Removed Lines]",
          "739:           dict = (YR_OBJECT_DICTIONARY*) $1.value.object;",
          "",
          "[Added Lines]",
          "739:           dict = object_as_dictionary($1.value.object);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "762:             $1.value.object->type == OBJECT_TYPE_FUNCTION)",
          "763:         {",
          "764:           compiler->last_result = yr_parser_check_types(",
          "767:           if (compiler->last_result == ERROR_SUCCESS)",
          "768:             compiler->last_result = yr_arena_write_string(",
          "",
          "[Removed Lines]",
          "765:               compiler, (YR_OBJECT_FUNCTION*) $1.value.object, $3);",
          "",
          "[Added Lines]",
          "765:               compiler, object_as_function($1.value.object), $3);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "776:                 NULL,",
          "777:                 NULL);",
          "781:           $$.type = EXPRESSION_TYPE_OBJECT;",
          "782:           $$.value.object = function->return_obj;",
          "",
          "[Removed Lines]",
          "779:           function = (YR_OBJECT_FUNCTION*) $1.value.object;",
          "",
          "[Added Lines]",
          "779:           function = object_as_function($1.value.object);",
          "",
          "---------------"
        ],
        "libyara/include/yara/types.h||libyara/include/yara/types.h": [
          "File: libyara/include/yara/types.h -> libyara/include/yara/types.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "442: } YR_SCAN_CONTEXT;",
          "469: {",
          "485: {",
          "486:   OBJECT_COMMON_FIELDS",
          "492: typedef struct _YR_OBJECT_STRUCTURE",
          "",
          "[Removed Lines]",
          "446: #define OBJECT_COMMON_FIELDS \\",
          "447:     int8_t type; \\",
          "448:     const char* identifier; \\",
          "449:     void* data; \\",
          "450:     struct _YR_OBJECT* parent;",
          "453: typedef struct _YR_OBJECT",
          "454: {",
          "455:   OBJECT_COMMON_FIELDS",
          "457: } YR_OBJECT;",
          "460: typedef struct _YR_OBJECT_INTEGER",
          "461: {",
          "462:   OBJECT_COMMON_FIELDS",
          "463:   int64_t value;",
          "465: } YR_OBJECT_INTEGER;",
          "468: typedef struct _YR_OBJECT_DOUBLE",
          "470:   OBJECT_COMMON_FIELDS",
          "471:   double value;",
          "473: } YR_OBJECT_DOUBLE;",
          "476: typedef struct _YR_OBJECT_STRING",
          "477: {",
          "478:   OBJECT_COMMON_FIELDS",
          "479:   SIZED_STRING* value;",
          "481: } YR_OBJECT_STRING;",
          "484: typedef struct _YR_OBJECT_REGEXP",
          "487:   RE_AST* value;",
          "489: } YR_OBJECT_REGEXP;",
          "",
          "[Added Lines]",
          "445: struct _YR_OBJECT;",
          "448: typedef union _YR_VALUE",
          "450:   int64_t i;",
          "451:   double d;",
          "452:   void* p;",
          "453:   struct _YR_OBJECT* o;",
          "454:   YR_STRING* s;",
          "455:   SIZED_STRING* ss;",
          "456:   RE* re;",
          "458: } YR_VALUE;",
          "461: #define OBJECT_COMMON_FIELDS \\",
          "462:     int8_t type; \\",
          "463:     const char* identifier; \\",
          "464:     struct _YR_OBJECT* parent; \\",
          "465:     void* data;",
          "468: typedef struct _YR_OBJECT",
          "471:   YR_VALUE value;",
          "473: } YR_OBJECT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "515: } YR_OBJECT_DICTIONARY;",
          "531: struct _YR_OBJECT_FUNCTION;",
          "",
          "[Removed Lines]",
          "518: typedef union _YR_VALUE {",
          "520:   int64_t i;",
          "521:   double d;",
          "522:   void* p;",
          "523:   YR_OBJECT* o;",
          "524:   YR_STRING* s;",
          "525:   SIZED_STRING* ss;",
          "526:   RE* re;",
          "528: } YR_VALUE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "540: typedef struct _YR_OBJECT_FUNCTION",
          "541: {",
          "542:   OBJECT_COMMON_FIELDS",
          "544:   YR_OBJECT* return_obj;",
          "547:     const char* arguments_fmt;",
          "548:     YR_MODULE_FUNC code;",
          "549:   } prototypes[MAX_OVERLOADED_FUNCTIONS];",
          "551: } YR_OBJECT_FUNCTION;",
          "554: typedef struct _YR_STRUCTURE_MEMBER",
          "555: {",
          "556:   YR_OBJECT* object;",
          "",
          "[Removed Lines]",
          "546:   struct {",
          "",
          "[Added Lines]",
          "516:   struct",
          "517:   {",
          "526: #define object_as_structure(obj)  ((YR_OBJECT_STRUCTURE*) (obj))",
          "527: #define object_as_array(obj)      ((YR_OBJECT_ARRAY*) (obj))",
          "528: #define object_as_dictionary(obj) ((YR_OBJECT_DICTIONARY*) (obj))",
          "529: #define object_as_function(obj)   ((YR_OBJECT_FUNCTION*) (obj))",
          "",
          "---------------"
        ],
        "libyara/object.c||libyara/object.c": [
          "File: libyara/object.c -> libyara/object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:       object_size = sizeof(YR_OBJECT_DICTIONARY);",
          "73:       break;",
          "74:     case OBJECT_TYPE_INTEGER:",
          "76:       break;",
          "77:     case OBJECT_TYPE_FLOAT:",
          "79:       break;",
          "80:     case OBJECT_TYPE_STRING:",
          "82:       break;",
          "83:     case OBJECT_TYPE_FUNCTION:",
          "84:       object_size = sizeof(YR_OBJECT_FUNCTION);",
          "",
          "[Removed Lines]",
          "75:       object_size = sizeof(YR_OBJECT_INTEGER);",
          "78:       object_size = sizeof(YR_OBJECT_DOUBLE);",
          "81:       object_size = sizeof(YR_OBJECT_STRING);",
          "",
          "[Added Lines]",
          "75:       object_size = sizeof(YR_OBJECT);",
          "78:       object_size = sizeof(YR_OBJECT);",
          "81:       object_size = sizeof(YR_OBJECT);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:   switch(type)",
          "101:   {",
          "113:     case OBJECT_TYPE_INTEGER:",
          "115:       break;",
          "116:     case OBJECT_TYPE_FLOAT:",
          "118:       break;",
          "119:     case OBJECT_TYPE_STRING:",
          "121:       break;",
          "122:     case OBJECT_TYPE_FUNCTION:",
          "124:       for (i = 0; i < MAX_OVERLOADED_FUNCTIONS; i++)",
          "125:       {",
          "128:       }",
          "129:       break;",
          "130:   }",
          "",
          "[Removed Lines]",
          "102:     case OBJECT_TYPE_STRUCTURE:",
          "103:       ((YR_OBJECT_STRUCTURE*) obj)->members = NULL;",
          "104:       break;",
          "105:     case OBJECT_TYPE_ARRAY:",
          "106:       ((YR_OBJECT_ARRAY*) obj)->items = NULL;",
          "107:       ((YR_OBJECT_ARRAY*) obj)->prototype_item = NULL;",
          "108:       break;",
          "109:     case OBJECT_TYPE_DICTIONARY:",
          "110:       ((YR_OBJECT_DICTIONARY*) obj)->items = NULL;",
          "111:       ((YR_OBJECT_DICTIONARY*) obj)->prototype_item = NULL;",
          "112:       break;",
          "114:       ((YR_OBJECT_INTEGER*) obj)->value = UNDEFINED;",
          "117:       ((YR_OBJECT_DOUBLE*) obj)->value = NAN;",
          "120:       ((YR_OBJECT_STRING*) obj)->value = NULL;",
          "123:       ((YR_OBJECT_FUNCTION*) obj)->return_obj = NULL;",
          "126:         ((YR_OBJECT_FUNCTION*) obj)->prototypes[i].arguments_fmt = NULL;",
          "127:         ((YR_OBJECT_FUNCTION*) obj)->prototypes[i].code = NULL;",
          "",
          "[Added Lines]",
          "103:       obj->value.i = UNDEFINED;",
          "106:       obj->value.d = NAN;",
          "109:       obj->value.ss = NULL;",
          "110:       break;",
          "111:     case OBJECT_TYPE_STRUCTURE:",
          "112:       object_as_structure(obj)->members = NULL;",
          "113:       break;",
          "114:     case OBJECT_TYPE_ARRAY:",
          "115:       object_as_array(obj)->items = NULL;",
          "116:       object_as_array(obj)->prototype_item = NULL;",
          "117:       break;",
          "118:     case OBJECT_TYPE_DICTIONARY:",
          "119:       object_as_dictionary(obj)->items = NULL;",
          "120:       object_as_dictionary(obj)->prototype_item = NULL;",
          "123:       object_as_function(obj)->return_obj = NULL;",
          "126:         object_as_function(obj)->prototypes[i].arguments_fmt = NULL;",
          "127:         object_as_function(obj)->prototypes[i].code = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "154:         break;",
          "156:       case OBJECT_TYPE_ARRAY:",
          "158:         break;",
          "160:       case OBJECT_TYPE_DICTIONARY:",
          "162:         break;",
          "164:       case OBJECT_TYPE_FUNCTION:",
          "166:         break;",
          "167:     }",
          "168:   }",
          "",
          "[Removed Lines]",
          "157:         ((YR_OBJECT_ARRAY*) parent)->prototype_item = obj;",
          "161:         ((YR_OBJECT_DICTIONARY*) parent)->prototype_item = obj;",
          "165:         ((YR_OBJECT_FUNCTION*) parent)->return_obj = obj;",
          "",
          "[Added Lines]",
          "157:         object_as_array(parent)->prototype_item = obj;",
          "161:         object_as_dictionary(parent)->prototype_item = obj;",
          "165:         object_as_function(parent)->return_obj = obj;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "216:     f = (YR_OBJECT_FUNCTION*) yr_object_lookup_field(parent, identifier);",
          "",
          "[Added Lines]",
          "216:     f = object_as_function(yr_object_lookup_field(parent, identifier));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "238:             &return_obj),",
          "239:         yr_object_destroy(o));",
          "242:   }",
          "244:   for (i = 0; i < MAX_OVERLOADED_FUNCTIONS; i++)",
          "",
          "[Removed Lines]",
          "241:     f = (YR_OBJECT_FUNCTION*) o;",
          "",
          "[Added Lines]",
          "241:     f = object_as_function(o);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "328:   YR_ARRAY_ITEMS* array_items;",
          "329:   YR_DICTIONARY_ITEMS* dict_items;",
          "332:   int i;",
          "334:   if (object == NULL)",
          "",
          "[Removed Lines]",
          "331:   SIZED_STRING* str;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "337:   switch(object->type)",
          "338:   {",
          "339:     case OBJECT_TYPE_STRUCTURE:",
          "342:       while (member != NULL)",
          "343:       {",
          "",
          "[Removed Lines]",
          "340:       member = ((YR_OBJECT_STRUCTURE*) object)->members;",
          "",
          "[Added Lines]",
          "339:       member = object_as_structure(object)->members;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "349:       break;",
          "351:     case OBJECT_TYPE_STRING:",
          "355:       break;",
          "357:     case OBJECT_TYPE_ARRAY:",
          "363:       if (array_items != NULL)",
          "364:       {",
          "",
          "[Removed Lines]",
          "352:       str = ((YR_OBJECT_STRING*) object)->value;",
          "353:       if (str != NULL)",
          "354:         yr_free(str);",
          "358:       if (((YR_OBJECT_ARRAY*) object)->prototype_item != NULL)",
          "359:         yr_object_destroy(((YR_OBJECT_ARRAY*) object)->prototype_item);",
          "361:       array_items = ((YR_OBJECT_ARRAY*) object)->items;",
          "",
          "[Added Lines]",
          "351:       if (object->value.ss != NULL)",
          "352:         yr_free(object->value.ss);",
          "356:       if (object_as_array(object)->prototype_item != NULL)",
          "357:         yr_object_destroy(object_as_array(object)->prototype_item);",
          "359:       array_items = object_as_array(object)->items;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "371:       break;",
          "373:     case OBJECT_TYPE_DICTIONARY:",
          "379:       if (dict_items != NULL)",
          "380:       {",
          "",
          "[Removed Lines]",
          "374:       if (((YR_OBJECT_DICTIONARY*) object)->prototype_item != NULL)",
          "375:         yr_object_destroy(((YR_OBJECT_DICTIONARY*) object)->prototype_item);",
          "377:       dict_items = ((YR_OBJECT_DICTIONARY*) object)->items;",
          "",
          "[Added Lines]",
          "372:       if (object_as_dictionary(object)->prototype_item != NULL)",
          "373:         yr_object_destroy(object_as_dictionary(object)->prototype_item);",
          "375:       dict_items = object_as_dictionary(object)->items;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "392:       break;",
          "394:     case OBJECT_TYPE_FUNCTION:",
          "396:       break;",
          "397:   }",
          "",
          "[Removed Lines]",
          "395:       yr_object_destroy(((YR_OBJECT_FUNCTION*) object)->return_obj);",
          "",
          "[Added Lines]",
          "393:       yr_object_destroy(object_as_function(object)->return_obj);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "410:   assert(object != NULL);",
          "411:   assert(object->type == OBJECT_TYPE_STRUCTURE);",
          "415:   while (member != NULL)",
          "416:   {",
          "",
          "[Removed Lines]",
          "413:   member = ((YR_OBJECT_STRUCTURE*) object)->members;",
          "",
          "[Added Lines]",
          "411:   member = object_as_structure(object)->members;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "557:   YR_OBJECT* o;",
          "559:   YR_STRUCTURE_MEMBER* structure_member;",
          "563:   int i;",
          "",
          "[Removed Lines]",
          "560:   YR_OBJECT_FUNCTION* func;",
          "561:   YR_OBJECT_FUNCTION* func_copy;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "573:   switch(object->type)",
          "574:   {",
          "575:     case OBJECT_TYPE_INTEGER:",
          "577:       break;",
          "589:       break;",
          "593:       break;",
          "595:     case OBJECT_TYPE_FUNCTION:",
          "600:       FAIL_ON_ERROR_WITH_CLEANUP(",
          "604:       for (i = 0; i < MAX_OVERLOADED_FUNCTIONS; i++)",
          "607:       break;",
          "609:     case OBJECT_TYPE_STRUCTURE:",
          "613:       while (structure_member != NULL)",
          "614:       {",
          "",
          "[Removed Lines]",
          "576:       ((YR_OBJECT_INTEGER*) copy)->value = ((YR_OBJECT_INTEGER*) object)->value;",
          "579:     case OBJECT_TYPE_STRING:",
          "580:       if (((YR_OBJECT_STRING*) object)->value != NULL)",
          "581:       {",
          "582:         ((YR_OBJECT_STRING*) copy)->value = sized_string_dup(",
          "583:             ((YR_OBJECT_STRING*) object)->value);",
          "584:       }",
          "585:       else",
          "586:       {",
          "587:         ((YR_OBJECT_STRING*) copy)->value = NULL;",
          "588:       }",
          "591:     case OBJECT_TYPE_FLOAT:",
          "592:       ((YR_OBJECT_DOUBLE*) copy)->value = ((YR_OBJECT_DOUBLE*) object)->value;",
          "597:       func = (YR_OBJECT_FUNCTION*) object;",
          "598:       func_copy = (YR_OBJECT_FUNCTION*) copy;",
          "601:         yr_object_copy(func->return_obj, &func_copy->return_obj),",
          "602:         yr_object_destroy(copy));",
          "605:         func_copy->prototypes[i] = func->prototypes[i];",
          "611:       structure_member = ((YR_OBJECT_STRUCTURE*) object)->members;",
          "",
          "[Added Lines]",
          "572:       copy->value.i = object->value.i;",
          "575:     case OBJECT_TYPE_FLOAT:",
          "576:       copy->value.d = object->value.d;",
          "579:     case OBJECT_TYPE_STRING:",
          "580:       if (object->value.ss != NULL)",
          "581:         copy->value.ss = sized_string_dup(object->value.ss);",
          "582:       else",
          "583:         copy->value.ss = NULL;",
          "589:           yr_object_copy(",
          "590:               object_as_function(object)->return_obj,",
          "591:               &object_as_function(copy)->return_obj),",
          "592:           yr_object_destroy(copy));",
          "595:         object_as_function(copy)->prototypes[i] = \\",
          "596:             object_as_function(object)->prototypes[i];",
          "602:       structure_member = object_as_structure(object)->members;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "629:     case OBJECT_TYPE_ARRAY:",
          "637:       break;",
          "639:     case OBJECT_TYPE_DICTIONARY:",
          "647:       break;",
          "",
          "[Removed Lines]",
          "631:       yr_object_copy(",
          "632:         ((YR_OBJECT_ARRAY *) object)->prototype_item,",
          "633:         &o);",
          "635:       ((YR_OBJECT_ARRAY *)copy)->prototype_item = o;",
          "641:       yr_object_copy(",
          "642:         ((YR_OBJECT_DICTIONARY *) object)->prototype_item,",
          "643:         &o);",
          "645:       ((YR_OBJECT_DICTIONARY *)copy)->prototype_item = o;",
          "",
          "[Added Lines]",
          "622:       FAIL_ON_ERROR_WITH_CLEANUP(",
          "623:           yr_object_copy(object_as_array(object)->prototype_item, &o),",
          "624:           yr_object_destroy(copy));",
          "626:       object_as_array(copy)->prototype_item = o;",
          "632:       FAIL_ON_ERROR_WITH_CLEANUP(",
          "633:           yr_object_copy(object_as_dictionary(object)->prototype_item, &o),",
          "634:           yr_object_destroy(copy));",
          "636:       object_as_dictionary(copy)->prototype_item = o;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "678:   member->parent = object;",
          "679:   sm->object = member;",
          "684:   return ERROR_SUCCESS;",
          "685: }",
          "",
          "[Removed Lines]",
          "680:   sm->next = ((YR_OBJECT_STRUCTURE*) object)->members;",
          "682:   ((YR_OBJECT_STRUCTURE*) object)->members = sm;",
          "",
          "[Added Lines]",
          "671:   sm->next = object_as_structure(object)->members;",
          "673:   object_as_structure(object)->members = sm;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "698:   if (index < 0)",
          "699:     return NULL;",
          "703:   if (array->items != NULL && array->items->count > index)",
          "704:       result = array->items->objects[index];",
          "",
          "[Removed Lines]",
          "701:   array = (YR_OBJECT_ARRAY*) object;",
          "",
          "[Added Lines]",
          "692:   array = object_as_array(object);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "728:   assert(index >= 0);",
          "729:   assert(object->type == OBJECT_TYPE_ARRAY);",
          "733:   if (array->items == NULL)",
          "734:   {",
          "",
          "[Removed Lines]",
          "731:   array = ((YR_OBJECT_ARRAY*) object);",
          "",
          "[Added Lines]",
          "722:   array = object_as_array(object);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "780:   assert(object->type == OBJECT_TYPE_DICTIONARY);",
          "784:   if (dict->items != NULL)",
          "785:   {",
          "",
          "[Removed Lines]",
          "782:   dict = (YR_OBJECT_DICTIONARY*) object;",
          "",
          "[Added Lines]",
          "773:   dict = object_as_dictionary(object);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "815:   assert(object->type == OBJECT_TYPE_DICTIONARY);",
          "819:   if (dict->items == NULL)",
          "820:   {",
          "",
          "[Removed Lines]",
          "817:   dict = ((YR_OBJECT_DICTIONARY*) object);",
          "",
          "[Added Lines]",
          "808:   dict = object_as_dictionary(object);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "885:   switch(field_obj->type)",
          "886:   {",
          "887:     case OBJECT_TYPE_FLOAT:",
          "889:     case OBJECT_TYPE_STRING:",
          "891:     case OBJECT_TYPE_INTEGER:",
          "893:   }",
          "895:   return FALSE;",
          "",
          "[Removed Lines]",
          "888:       return isnan(((YR_OBJECT_DOUBLE*) field_obj)->value);",
          "890:       return ((YR_OBJECT_STRING*) field_obj)->value == NULL;",
          "892:       return ((YR_OBJECT_INTEGER*) field_obj)->value == UNDEFINED;",
          "",
          "[Added Lines]",
          "879:       return isnan(field_obj->value.d);",
          "881:       return field_obj->value.ss == NULL;",
          "883:       return field_obj->value.i == UNDEFINED;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "919:   assertf(integer_obj->type == OBJECT_TYPE_INTEGER,",
          "920:           \"type of \\\"%s\\\" is not integer\\n\", field);",
          "923: }",
          "",
          "[Removed Lines]",
          "922:   return ((YR_OBJECT_INTEGER*) integer_obj)->value;",
          "",
          "[Added Lines]",
          "913:   return integer_obj->value.i;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "946:   assertf(double_obj->type == OBJECT_TYPE_FLOAT,",
          "947:           \"type of \\\"%s\\\" is not double\\n\", field);",
          "950: }",
          "",
          "[Removed Lines]",
          "949:   return ((YR_OBJECT_DOUBLE*) double_obj)->value;",
          "",
          "[Added Lines]",
          "940:   return double_obj->value.d;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "973:   assertf(string_obj->type == OBJECT_TYPE_STRING,",
          "974:           \"type of \\\"%s\\\" is not string\\n\", field);",
          "977: }",
          "",
          "[Removed Lines]",
          "976:   return ((YR_OBJECT_STRING*) string_obj)->value;",
          "",
          "[Added Lines]",
          "967:   return string_obj->value.ss;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "989:   va_start(args, field);",
          "991:   if (field != NULL)",
          "994:   else",
          "995:     integer_obj = object;",
          "",
          "[Removed Lines]",
          "992:     integer_obj = _yr_object_lookup(",
          "993:         object, OBJECT_CREATE, field, args);",
          "",
          "[Added Lines]",
          "983:     integer_obj = _yr_object_lookup(object, OBJECT_CREATE, field, args);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "999:   assert(integer_obj != NULL);",
          "1000:   assert(integer_obj->type == OBJECT_TYPE_INTEGER);",
          "1004:   return ERROR_SUCCESS;",
          "1005: }",
          "",
          "[Removed Lines]",
          "1002:   ((YR_OBJECT_INTEGER*) integer_obj)->value = value;",
          "",
          "[Added Lines]",
          "992:   integer_obj->value.i = value;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1017:   va_start(args, field);",
          "1019:   if (field != NULL)",
          "1022:   else",
          "1023:     double_obj = object;",
          "",
          "[Removed Lines]",
          "1020:     double_obj = _yr_object_lookup(",
          "1021:         object, OBJECT_CREATE, field, args);",
          "",
          "[Added Lines]",
          "1010:     double_obj = _yr_object_lookup(object, OBJECT_CREATE, field, args);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1027:   assert(double_obj != NULL);",
          "1028:   assert(double_obj->type == OBJECT_TYPE_FLOAT);",
          "1032:   return ERROR_SUCCESS;",
          "1033: }",
          "",
          "[Removed Lines]",
          "1030:   ((YR_OBJECT_DOUBLE*) double_obj)->value = value;",
          "",
          "[Added Lines]",
          "1019:   double_obj->value.d = value;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1040:     const char* field,",
          "1041:     ...)",
          "1042: {",
          "1045:   va_list args;",
          "1046:   va_start(args, field);",
          "1048:   if (field != NULL)",
          "1051:   else",
          "1054:   va_end(args);",
          "1056:   assert(string_obj != NULL);",
          "1057:   assert(string_obj->type == OBJECT_TYPE_STRING);",
          "1062:   if (value != NULL)",
          "1063:   {",
          "1067:       return ERROR_INSUFFICIENT_MEMORY;",
          "1074:   }",
          "1075:   else",
          "1076:   {",
          "1078:   }",
          "1080:   return ERROR_SUCCESS;",
          "",
          "[Removed Lines]",
          "1043:   YR_OBJECT_STRING* string_obj;",
          "1049:     string_obj = (YR_OBJECT_STRING*) _yr_object_lookup(",
          "1050:         object, OBJECT_CREATE, field, args);",
          "1052:     string_obj = (YR_OBJECT_STRING*) object;",
          "1059:   if (string_obj->value != NULL)",
          "1060:     yr_free(string_obj->value);",
          "1064:     string_obj->value = (SIZED_STRING*) yr_malloc(len + sizeof(SIZED_STRING));",
          "1066:     if (string_obj->value == NULL)",
          "1069:     string_obj->value->length = (uint32_t) len;",
          "1070:     string_obj->value->flags = 0;",
          "1072:     memcpy(string_obj->value->c_string, value, len);",
          "1073:     string_obj->value->c_string[len] = '\\0';",
          "1077:     string_obj->value = NULL;",
          "",
          "[Added Lines]",
          "1032:   YR_OBJECT* string_obj;",
          "1038:     string_obj = _yr_object_lookup(object, OBJECT_CREATE, field, args);",
          "1040:     string_obj = object;",
          "1047:   if (string_obj->value.ss != NULL)",
          "1048:     yr_free(string_obj->value.ss);",
          "1052:     string_obj->value.ss = (SIZED_STRING*) yr_malloc(",
          "1053:         len + sizeof(SIZED_STRING));",
          "1055:     if (string_obj->value.ss == NULL)",
          "1058:     string_obj->value.ss->length = (uint32_t) len;",
          "1059:     string_obj->value.ss->flags = 0;",
          "1061:     memcpy(string_obj->value.ss->c_string, value, len);",
          "1062:     string_obj->value.ss->c_string[len] = '\\0';",
          "1066:     string_obj->value.ss = NULL;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1115:   switch(object->type)",
          "1116:   {",
          "1117:     case OBJECT_TYPE_INTEGER:",
          "1120:       else",
          "1121:         printf(\" = UNDEFINED\");",
          "1122:       break;",
          "1124:     case OBJECT_TYPE_STRING:",
          "1126:       {",
          "1127:         size_t l;",
          "1128:         printf(\" = \\\"\");",
          "1131:         {",
          "1134:           if (isprint((unsigned char) c))",
          "1135:             printf(\"%c\", c);",
          "",
          "[Removed Lines]",
          "1118:       if (((YR_OBJECT_INTEGER*) object)->value != UNDEFINED)",
          "1119:         printf(\" = %\" PRIu64, ((YR_OBJECT_INTEGER*) object)->value);",
          "1125:       if (((YR_OBJECT_STRING*) object)->value != NULL)",
          "1130:         for (l = 0; l < ((YR_OBJECT_STRING*) object)->value->length; l++)",
          "1132:           char c = ((YR_OBJECT_STRING*) object)->value->c_string[l];",
          "",
          "[Added Lines]",
          "1108:       if (object->value.i != UNDEFINED)",
          "1109:         printf(\" = %\" PRIu64, object->value.i);",
          "1117:       if (object->value.ss != NULL)",
          "1122:         for (l = 0; l < object->value.ss->length; l++)",
          "1124:           char c = object->value.ss->c_string[l];",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1149:     case OBJECT_TYPE_STRUCTURE:",
          "1153:       while (member != NULL)",
          "1154:       {",
          "",
          "[Removed Lines]",
          "1151:       member = ((YR_OBJECT_STRUCTURE*) object)->members;",
          "",
          "[Added Lines]",
          "1143:       member = object_as_structure(object)->members;",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1163:       break;",
          "1165:     case OBJECT_TYPE_ARRAY:",
          "1168:       if (array_items != NULL)",
          "1169:       {",
          "",
          "[Removed Lines]",
          "1166:       array_items = ((YR_OBJECT_ARRAY*) object)->items;",
          "",
          "[Added Lines]",
          "1159:       array_items = object_as_array(object)->items;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1182:     case OBJECT_TYPE_DICTIONARY:",
          "1186:       if (dict_items != NULL)",
          "1187:       {",
          "",
          "[Removed Lines]",
          "1184:       dict_items = ((YR_OBJECT_DICTIONARY*) object)->items;",
          "",
          "[Added Lines]",
          "1177:       dict_items = object_as_dictionary(object)->items;",
          "",
          "---------------"
        ]
      }
    }
  ]
}