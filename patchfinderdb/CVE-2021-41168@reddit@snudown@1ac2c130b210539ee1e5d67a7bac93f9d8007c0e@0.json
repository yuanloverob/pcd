{
  "cve_id": "CVE-2021-41168",
  "cve_desc": "Snudown is a reddit-specific fork of the Sundown Markdown parser used by GitHub, with Python integration added. In affected versions snudown was found to be vulnerable to denial of service attacks to its reference table implementation. References written in markdown ` [reference_name]: https://www.example.com` are inserted into a hash table which was found to have a weak hash function, meaning that an attacker can reliably generate a large number of collisions for it. This makes the hash table vulnerable to a hash-collision DoS attack, a type of algorithmic complexity attack. Further the hash table allowed for duplicate entries resulting in long retrieval times. Proofs of concept and further discussion of the hash collision issue are discussed on the snudown GHSA(https://github.com/reddit/snudown/security/advisories/GHSA-6gvv-9q92-w5f6). Users are advised to update to version 1.7.0.",
  "repo": "reddit/snudown",
  "patch_hash": "1ac2c130b210539ee1e5d67a7bac93f9d8007c0e",
  "patch_info": {
    "commit_hash": "1ac2c130b210539ee1e5d67a7bac93f9d8007c0e",
    "repo": "reddit/snudown",
    "commit_url": "https://github.com/reddit/snudown/commit/1ac2c130b210539ee1e5d67a7bac93f9d8007c0e",
    "files": [
      "Dockerfile.wheel",
      "Makefile",
      "README.markdown",
      "snudown.c",
      "src/markdown.c",
      "src/siphash.c",
      "src/siphash.h"
    ],
    "message": "Hash-collision denial-of-service vulnerabilities (#87)\n\n* Add case insensitive SipHash implementation\n* Replace ref hash function with SipHash\n* Add label to link_ref struct.\n* Update find_link_ref to compare link labels as well as hashes\n* Update add_link_ref to disallow duplicate entries.\n* cast to char from uint8_t for strncasecmp\n* update README markdown, remove TODO\n* add py2 wheel generation\n* fix: add logic for older glibc not having getrandom, impacting staging\n\nCo-authored-by: Nicolaas <nweidema@usc.edu>",
    "before_after_code_files": [
      "Dockerfile.wheel||Dockerfile.wheel",
      "snudown.c||snudown.c",
      "src/markdown.c||src/markdown.c",
      "src/siphash.c||src/siphash.c",
      "src/siphash.h||src/siphash.h"
    ]
  },
  "patch_diff": {
    "Dockerfile.wheel||Dockerfile.wheel": [
      "File: Dockerfile.wheel -> Dockerfile.wheel",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: RUN apt-get update && \\",
      "6:     apt-get install -y \\",
      "7:         build-essential \\",
      "8:         gperf \\",
      "9:         software-properties-common",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7:         python \\",
      "8:         python-dev \\",
      "9:         python-pip \\",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "15: WORKDIR $SRC_DIR",
      "17: ADD . $SRC_DIR",
      "",
      "[Removed Lines]",
      "18: CMD pip3 wheel --wheel-dir=$WHEEL_OUTPUT_DIR .",
      "",
      "[Added Lines]",
      "21: CMD pip3 wheel --wheel-dir=$WHEEL_OUTPUT_DIR . ; pip2 wheel --wheel-dir=$WHEEL_OUTPUT_DIR .",
      "",
      "---------------"
    ],
    "snudown.c||snudown.c": [
      "File: snudown.c -> snudown.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: #include \"html.h\"",
      "6: #include \"autolink.h\"",
      "10: enum snudown_renderer_mode {",
      "11:  RENDERER_USERTEXT = 0,",
      "",
      "[Removed Lines]",
      "8: #define SNUDOWN_VERSION \"1.6.0\"",
      "",
      "[Added Lines]",
      "8: #define SNUDOWN_VERSION \"1.7.0\"",
      "",
      "---------------"
    ],
    "src/markdown.c||src/markdown.c": [
      "File: src/markdown.c -> src/markdown.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "20: #include \"markdown.h\"",
      "21: #include \"stack.h\"",
      "23: #include <assert.h>",
      "24: #include <string.h>",
      "25: #include <ctype.h>",
      "26: #include <stdio.h>",
      "28: #if defined(_WIN32)",
      "29: #define strncasecmp _strnicmp",
      "30: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: #include \"siphash.h\"",
      "29: #if __GLIBC__ >= 2 && __GLIBC_MINOR >= 25",
      "30: #include <sys/random.h>",
      "31: #else",
      "32: # define getrandom backport_getrandom",
      "33: # include <sys/syscall.h>",
      "34: #endif",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "51:  unsigned int id;",
      "53:  struct buf *link;",
      "54:  struct buf *title;",
      "56:  struct link_ref *next;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "62:  struct buf *label;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "123:  int in_link_body;",
      "124: };",
      "130: static inline struct buf *",
      "131: rndr_newbuf(struct sd_markdown *rndr, int type)",
      "132: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "135: int sip_hash_key_init = 0;",
      "136: uint8_t sip_hash_key[SIP_HASH_KEY_LEN];",
      "142: int backport_getrandom(void *buf, size_t buflen, unsigned int flags)",
      "143: {",
      "144:  return (int)syscall(SYS_getrandom, buf, buflen, flags);",
      "145: }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "175: static unsigned int",
      "176: hash_link_ref(const uint8_t *link_ref, size_t length)",
      "177: {",
      "185: }",
      "187: static struct link_ref *",
      "",
      "[Removed Lines]",
      "178:  size_t i;",
      "179:  unsigned int hash = 0;",
      "181:  for (i = 0; i < length; ++i)",
      "182:   hash = tolower(link_ref[i]) + (hash << 6) + (hash << 16) - hash;",
      "184:  return hash;",
      "",
      "[Added Lines]",
      "195:  return siphash_nocase(link_ref, length, sip_hash_key);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "189:  struct link_ref **references,",
      "190:  const uint8_t *name, size_t name_size)",
      "191: {",
      "194:  if (!ref)",
      "195:   return NULL;",
      "198:  ref->next = references[ref->id % REF_TABLE_SIZE];",
      "200:  references[ref->id % REF_TABLE_SIZE] = ref;",
      "",
      "[Removed Lines]",
      "192:  struct link_ref *ref = calloc(1, sizeof(struct link_ref));",
      "197:  ref->id = hash_link_ref(name, name_size);",
      "",
      "[Added Lines]",
      "203:  unsigned int hash;",
      "204:  struct link_ref *ref;",
      "205:  hash = hash_link_ref(name, name_size);",
      "206:  ref = references[hash % REF_TABLE_SIZE];",
      "207:  while (ref != NULL) {",
      "209:   if (ref->id == hash && ref->label->size == name_size) {",
      "210:    if (strncasecmp((char *)ref->label->data, (char *) name, name_size) == 0) {",
      "211:     bufrelease(ref->label);",
      "212:     bufrelease(ref->link);",
      "213:     bufrelease(ref->title);",
      "214:     return ref;",
      "215:    }",
      "216:   }",
      "218:   ref = ref->next;",
      "219:  }",
      "220:  ref = calloc(1, sizeof(struct link_ref));",
      "223:  ref->id = hash;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "210:  ref = references[hash % REF_TABLE_SIZE];",
      "212:  while (ref != NULL) {",
      "216:   ref = ref->next;",
      "217:  }",
      "",
      "[Removed Lines]",
      "213:   if (ref->id == hash)",
      "214:    return ref;",
      "",
      "[Added Lines]",
      "239:   if (ref->id == hash && ref->label->size == length) {",
      "240:    if (strncasecmp((char *)ref->label->data, (char *) name, length) == 0) {",
      "241:     return ref;",
      "242:    }",
      "243:   }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "231:   while (r) {",
      "232:    next = r->next;",
      "233:    bufrelease(r->link);",
      "234:    bufrelease(r->title);",
      "235:    free(r);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "262:    bufrelease(r->label);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "2565:   if (!ref)",
      "2566:    return 0;",
      "2568:   ref->link = bufnew(link_end - link_offset);",
      "2569:   bufput(ref->link, data + link_offset, link_end - link_offset);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2598:   ref->label = bufnew(id_end - id_offset);",
      "2599:   bufput(ref->label, data + id_offset, id_end - id_offset);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "2622:  if (!md)",
      "2623:   return NULL;",
      "2625:  memcpy(&md->cb, callbacks, sizeof(struct sd_callbacks));",
      "2627:  stack_init(&md->work_bufs[BUFFER_BLOCK], 4);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2657:  if (!sip_hash_key_init) {",
      "2658:   if (getrandom(sip_hash_key, SIP_HASH_KEY_LEN, 0) < SIP_HASH_KEY_LEN)",
      "2659:    return NULL;",
      "2660:   sip_hash_key_init = 1;",
      "2661:  }",
      "",
      "---------------"
    ],
    "src/siphash.c||src/siphash.c": [
      "File: src/siphash.c -> src/siphash.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2:    SipHash reference C implementation",
      "4:    Copyright (c) 2012-2016 Jean-Philippe Aumasson",
      "5:    <jeanphilippe.aumasson@gmail.com>",
      "6:    Copyright (c) 2012-2014 Daniel J. Bernstein <djb@cr.yp.to>",
      "7:    Copyright (c) 2017 Salvatore Sanfilippo <antirez@gmail.com>",
      "9:    To the extent possible under law, the author(s) have dedicated all copyright",
      "10:    and related and neighboring rights to this software to the public domain",
      "11:    worldwide. This software is distributed without any warranty.",
      "13:    You should have received a copy of the CC0 Public Domain Dedication along",
      "14:    with this software. If not, see",
      "15:    <http://creativecommons.org/publicdomain/zero/1.0/>.",
      "17:    ----------------------------------------------------------------------------",
      "19:    This version was modified by Salvatore Sanfilippo <antirez@gmail.com>",
      "20:    in the following ways:",
      "22:    1. Hard-code 2-4 rounds in the hope the compiler can optimize it more",
      "23:       in this raw from. Anyway we always want the standard 2-4 variant.",
      "24:    2. Modify the prototype and implementation so that the function directly",
      "25:       returns an uint64_t value, the hash itself, instead of receiving an",
      "26:       output buffer. This also means that the output size is set to 8 bytes",
      "27:       and the 16 bytes output code handling was removed.",
      "28:    3. Provide a case insensitive variant to be used when hashing strings that",
      "29:       must be considered identical by the hash table regardless of the case.",
      "30:       If we don't have directly a case insensitive hash function, we need to",
      "31:       perform a text transformation in some temporary buffer, which is costly.",
      "32:    4. Remove debugging code.",
      "33:    5. Modified the original test.c file to be a stand-alone function testing",
      "34:       the function in the new form (returing an uint64_t) using just the",
      "35:       relevant test vector.",
      "37: #include <assert.h>",
      "38: #include <stdint.h>",
      "39: #include <stdio.h>",
      "40: #include <string.h>",
      "41: #include <ctype.h>",
      "43: #define ROTL(x, b) (uint64_t)(((x) << (b)) | ((x) >> (64 - (b))))",
      "45: #define U32TO8_LE(p, v)                                                        \\",
      "46:     (p)[0] = (uint8_t)((v));                                                   \\",
      "47:     (p)[1] = (uint8_t)((v) >> 8);                                              \\",
      "48:     (p)[2] = (uint8_t)((v) >> 16);                                             \\",
      "49:     (p)[3] = (uint8_t)((v) >> 24);",
      "51: #define U64TO8_LE(p, v)                                                        \\",
      "52:     U32TO8_LE((p), (uint32_t)((v)));                                           \\",
      "53:     U32TO8_LE((p) + 4, (uint32_t)((v) >> 32));",
      "55: #define U8TO64_LE(p)                                                           \\",
      "56:     (((uint64_t)((p)[0])) | ((uint64_t)((p)[1]) << 8) |                        \\",
      "57:      ((uint64_t)((p)[2]) << 16) | ((uint64_t)((p)[3]) << 24) |                 \\",
      "58:      ((uint64_t)((p)[4]) << 32) | ((uint64_t)((p)[5]) << 40) |                 \\",
      "59:      ((uint64_t)((p)[6]) << 48) | ((uint64_t)((p)[7]) << 56))",
      "61: #define U8TO64_LE_NOCASE(p)                                                    \\",
      "62:     (((uint64_t)(tolower((p)[0]))) |                                           \\",
      "63:      ((uint64_t)(tolower((p)[1])) << 8) |                                      \\",
      "64:      ((uint64_t)(tolower((p)[2])) << 16) |                                     \\",
      "65:      ((uint64_t)(tolower((p)[3])) << 24) |                                     \\",
      "66:      ((uint64_t)(tolower((p)[4])) << 32) |                                              \\",
      "67:      ((uint64_t)(tolower((p)[5])) << 40) |                                              \\",
      "68:      ((uint64_t)(tolower((p)[6])) << 48) |                                              \\",
      "69:      ((uint64_t)(tolower((p)[7])) << 56))",
      "71: #define SIPROUND                                                               \\",
      "72:     do {                                                                       \\",
      "73:         v0 += v1;                                                              \\",
      "74:         v1 = ROTL(v1, 13);                                                     \\",
      "75:         v1 ^= v0;                                                              \\",
      "76:         v0 = ROTL(v0, 32);                                                     \\",
      "77:         v2 += v3;                                                              \\",
      "78:         v3 = ROTL(v3, 16);                                                     \\",
      "79:         v3 ^= v2;                                                              \\",
      "80:         v0 += v3;                                                              \\",
      "81:         v3 = ROTL(v3, 21);                                                     \\",
      "82:         v3 ^= v0;                                                              \\",
      "83:         v2 += v1;                                                              \\",
      "84:         v1 = ROTL(v1, 17);                                                     \\",
      "85:         v1 ^= v2;                                                              \\",
      "86:         v2 = ROTL(v2, 32);                                                     \\",
      "87:     } while (0)",
      "89: uint64_t siphash(const uint8_t *in, const size_t inlen, const uint8_t *k) {",
      "90:     uint64_t hash;",
      "91:     uint8_t *out = (uint8_t*) &hash;",
      "92:     uint64_t v0 = 0x736f6d6570736575ULL;",
      "93:     uint64_t v1 = 0x646f72616e646f6dULL;",
      "94:     uint64_t v2 = 0x6c7967656e657261ULL;",
      "95:     uint64_t v3 = 0x7465646279746573ULL;",
      "96:     uint64_t k0 = U8TO64_LE(k);",
      "97:     uint64_t k1 = U8TO64_LE(k + 8);",
      "98:     uint64_t m;",
      "99:     const uint8_t *end = in + inlen - (inlen % sizeof(uint64_t));",
      "100:     const int left = inlen & 7;",
      "101:     uint64_t b = ((uint64_t)inlen) << 56;",
      "102:     v3 ^= k1;",
      "103:     v2 ^= k0;",
      "104:     v1 ^= k1;",
      "105:     v0 ^= k0;",
      "107:     for (; in != end; in += 8) {",
      "108:         m = U8TO64_LE(in);",
      "109:         v3 ^= m;",
      "111:         SIPROUND;",
      "112:         SIPROUND;",
      "114:         v0 ^= m;",
      "115:     }",
      "117:     switch (left) {",
      "118:     case 7: b |= ((uint64_t)in[6]) << 48;",
      "119:     case 6: b |= ((uint64_t)in[5]) << 40;",
      "120:     case 5: b |= ((uint64_t)in[4]) << 32;",
      "121:     case 4: b |= ((uint64_t)in[3]) << 24;",
      "122:     case 3: b |= ((uint64_t)in[2]) << 16;",
      "123:     case 2: b |= ((uint64_t)in[1]) << 8;",
      "124:     case 1: b |= ((uint64_t)in[0]); break;",
      "125:     case 0: break;",
      "126:     }",
      "128:     v3 ^= b;",
      "130:     SIPROUND;",
      "131:     SIPROUND;",
      "133:     v0 ^= b;",
      "134:     v2 ^= 0xff;",
      "136:     SIPROUND;",
      "137:     SIPROUND;",
      "138:     SIPROUND;",
      "139:     SIPROUND;",
      "141:     b = v0 ^ v1 ^ v2 ^ v3;",
      "142:     U64TO8_LE(out, b);",
      "144:     return hash;",
      "145: }",
      "147: uint64_t siphash_nocase(const uint8_t *in, const size_t inlen, const uint8_t *k)",
      "148: {",
      "149:     uint64_t hash;",
      "150:     uint8_t *out = (uint8_t*) &hash;",
      "151:     uint64_t v0 = 0x736f6d6570736575ULL;",
      "152:     uint64_t v1 = 0x646f72616e646f6dULL;",
      "153:     uint64_t v2 = 0x6c7967656e657261ULL;",
      "154:     uint64_t v3 = 0x7465646279746573ULL;",
      "155:     uint64_t k0 = U8TO64_LE(k);",
      "156:     uint64_t k1 = U8TO64_LE(k + 8);",
      "157:     uint64_t m;",
      "158:     const uint8_t *end = in + inlen - (inlen % sizeof(uint64_t));",
      "159:     const int left = inlen & 7;",
      "160:     uint64_t b = ((uint64_t)inlen) << 56;",
      "161:     v3 ^= k1;",
      "162:     v2 ^= k0;",
      "163:     v1 ^= k1;",
      "164:     v0 ^= k0;",
      "166:     for (; in != end; in += 8) {",
      "167:         m = U8TO64_LE_NOCASE(in);",
      "168:         v3 ^= m;",
      "170:         SIPROUND;",
      "171:         SIPROUND;",
      "173:         v0 ^= m;",
      "174:     }",
      "176:     switch (left) {",
      "177:     case 7: b |= ((uint64_t)tolower(in[6])) << 48;",
      "178:     case 6: b |= ((uint64_t)tolower(in[5])) << 40;",
      "179:     case 5: b |= ((uint64_t)tolower(in[4])) << 32;",
      "180:     case 4: b |= ((uint64_t)tolower(in[3])) << 24;",
      "181:     case 3: b |= ((uint64_t)tolower(in[2])) << 16;",
      "182:     case 2: b |= ((uint64_t)tolower(in[1])) << 8;",
      "183:     case 1: b |= ((uint64_t)tolower(in[0])); break;",
      "184:     case 0: break;",
      "185:     }",
      "187:     v3 ^= b;",
      "189:     SIPROUND;",
      "190:     SIPROUND;",
      "192:     v0 ^= b;",
      "193:     v2 ^= 0xff;",
      "195:     SIPROUND;",
      "196:     SIPROUND;",
      "197:     SIPROUND;",
      "198:     SIPROUND;",
      "200:     b = v0 ^ v1 ^ v2 ^ v3;",
      "201:     U64TO8_LE(out, b);",
      "203:     return hash;",
      "204: }",
      "209: #ifdef SIPHASH_TEST",
      "211: const uint8_t vectors_sip64[64][8] = {",
      "212:     { 0x31, 0x0e, 0x0e, 0xdd, 0x47, 0xdb, 0x6f, 0x72, },",
      "213:     { 0xfd, 0x67, 0xdc, 0x93, 0xc5, 0x39, 0xf8, 0x74, },",
      "214:     { 0x5a, 0x4f, 0xa9, 0xd9, 0x09, 0x80, 0x6c, 0x0d, },",
      "215:     { 0x2d, 0x7e, 0xfb, 0xd7, 0x96, 0x66, 0x67, 0x85, },",
      "216:     { 0xb7, 0x87, 0x71, 0x27, 0xe0, 0x94, 0x27, 0xcf, },",
      "217:     { 0x8d, 0xa6, 0x99, 0xcd, 0x64, 0x55, 0x76, 0x18, },",
      "218:     { 0xce, 0xe3, 0xfe, 0x58, 0x6e, 0x46, 0xc9, 0xcb, },",
      "219:     { 0x37, 0xd1, 0x01, 0x8b, 0xf5, 0x00, 0x02, 0xab, },",
      "220:     { 0x62, 0x24, 0x93, 0x9a, 0x79, 0xf5, 0xf5, 0x93, },",
      "221:     { 0xb0, 0xe4, 0xa9, 0x0b, 0xdf, 0x82, 0x00, 0x9e, },",
      "222:     { 0xf3, 0xb9, 0xdd, 0x94, 0xc5, 0xbb, 0x5d, 0x7a, },",
      "223:     { 0xa7, 0xad, 0x6b, 0x22, 0x46, 0x2f, 0xb3, 0xf4, },",
      "224:     { 0xfb, 0xe5, 0x0e, 0x86, 0xbc, 0x8f, 0x1e, 0x75, },",
      "225:     { 0x90, 0x3d, 0x84, 0xc0, 0x27, 0x56, 0xea, 0x14, },",
      "226:     { 0xee, 0xf2, 0x7a, 0x8e, 0x90, 0xca, 0x23, 0xf7, },",
      "227:     { 0xe5, 0x45, 0xbe, 0x49, 0x61, 0xca, 0x29, 0xa1, },",
      "228:     { 0xdb, 0x9b, 0xc2, 0x57, 0x7f, 0xcc, 0x2a, 0x3f, },",
      "229:     { 0x94, 0x47, 0xbe, 0x2c, 0xf5, 0xe9, 0x9a, 0x69, },",
      "230:     { 0x9c, 0xd3, 0x8d, 0x96, 0xf0, 0xb3, 0xc1, 0x4b, },",
      "231:     { 0xbd, 0x61, 0x79, 0xa7, 0x1d, 0xc9, 0x6d, 0xbb, },",
      "232:     { 0x98, 0xee, 0xa2, 0x1a, 0xf2, 0x5c, 0xd6, 0xbe, },",
      "233:     { 0xc7, 0x67, 0x3b, 0x2e, 0xb0, 0xcb, 0xf2, 0xd0, },",
      "234:     { 0x88, 0x3e, 0xa3, 0xe3, 0x95, 0x67, 0x53, 0x93, },",
      "235:     { 0xc8, 0xce, 0x5c, 0xcd, 0x8c, 0x03, 0x0c, 0xa8, },",
      "236:     { 0x94, 0xaf, 0x49, 0xf6, 0xc6, 0x50, 0xad, 0xb8, },",
      "237:     { 0xea, 0xb8, 0x85, 0x8a, 0xde, 0x92, 0xe1, 0xbc, },",
      "238:     { 0xf3, 0x15, 0xbb, 0x5b, 0xb8, 0x35, 0xd8, 0x17, },",
      "239:     { 0xad, 0xcf, 0x6b, 0x07, 0x63, 0x61, 0x2e, 0x2f, },",
      "240:     { 0xa5, 0xc9, 0x1d, 0xa7, 0xac, 0xaa, 0x4d, 0xde, },",
      "241:     { 0x71, 0x65, 0x95, 0x87, 0x66, 0x50, 0xa2, 0xa6, },",
      "242:     { 0x28, 0xef, 0x49, 0x5c, 0x53, 0xa3, 0x87, 0xad, },",
      "243:     { 0x42, 0xc3, 0x41, 0xd8, 0xfa, 0x92, 0xd8, 0x32, },",
      "244:     { 0xce, 0x7c, 0xf2, 0x72, 0x2f, 0x51, 0x27, 0x71, },",
      "245:     { 0xe3, 0x78, 0x59, 0xf9, 0x46, 0x23, 0xf3, 0xa7, },",
      "246:     { 0x38, 0x12, 0x05, 0xbb, 0x1a, 0xb0, 0xe0, 0x12, },",
      "247:     { 0xae, 0x97, 0xa1, 0x0f, 0xd4, 0x34, 0xe0, 0x15, },",
      "248:     { 0xb4, 0xa3, 0x15, 0x08, 0xbe, 0xff, 0x4d, 0x31, },",
      "249:     { 0x81, 0x39, 0x62, 0x29, 0xf0, 0x90, 0x79, 0x02, },",
      "250:     { 0x4d, 0x0c, 0xf4, 0x9e, 0xe5, 0xd4, 0xdc, 0xca, },",
      "251:     { 0x5c, 0x73, 0x33, 0x6a, 0x76, 0xd8, 0xbf, 0x9a, },",
      "252:     { 0xd0, 0xa7, 0x04, 0x53, 0x6b, 0xa9, 0x3e, 0x0e, },",
      "253:     { 0x92, 0x59, 0x58, 0xfc, 0xd6, 0x42, 0x0c, 0xad, },",
      "254:     { 0xa9, 0x15, 0xc2, 0x9b, 0xc8, 0x06, 0x73, 0x18, },",
      "255:     { 0x95, 0x2b, 0x79, 0xf3, 0xbc, 0x0a, 0xa6, 0xd4, },",
      "256:     { 0xf2, 0x1d, 0xf2, 0xe4, 0x1d, 0x45, 0x35, 0xf9, },",
      "257:     { 0x87, 0x57, 0x75, 0x19, 0x04, 0x8f, 0x53, 0xa9, },",
      "258:     { 0x10, 0xa5, 0x6c, 0xf5, 0xdf, 0xcd, 0x9a, 0xdb, },",
      "259:     { 0xeb, 0x75, 0x09, 0x5c, 0xcd, 0x98, 0x6c, 0xd0, },",
      "260:     { 0x51, 0xa9, 0xcb, 0x9e, 0xcb, 0xa3, 0x12, 0xe6, },",
      "261:     { 0x96, 0xaf, 0xad, 0xfc, 0x2c, 0xe6, 0x66, 0xc7, },",
      "262:     { 0x72, 0xfe, 0x52, 0x97, 0x5a, 0x43, 0x64, 0xee, },",
      "263:     { 0x5a, 0x16, 0x45, 0xb2, 0x76, 0xd5, 0x92, 0xa1, },",
      "264:     { 0xb2, 0x74, 0xcb, 0x8e, 0xbf, 0x87, 0x87, 0x0a, },",
      "265:     { 0x6f, 0x9b, 0xb4, 0x20, 0x3d, 0xe7, 0xb3, 0x81, },",
      "266:     { 0xea, 0xec, 0xb2, 0xa3, 0x0b, 0x22, 0xa8, 0x7f, },",
      "267:     { 0x99, 0x24, 0xa4, 0x3c, 0xc1, 0x31, 0x57, 0x24, },",
      "268:     { 0xbd, 0x83, 0x8d, 0x3a, 0xaf, 0xbf, 0x8d, 0xb7, },",
      "269:     { 0x0b, 0x1a, 0x2a, 0x32, 0x65, 0xd5, 0x1a, 0xea, },",
      "270:     { 0x13, 0x50, 0x79, 0xa3, 0x23, 0x1c, 0xe6, 0x60, },",
      "271:     { 0x93, 0x2b, 0x28, 0x46, 0xe4, 0xd7, 0x06, 0x66, },",
      "272:     { 0xe1, 0x91, 0x5f, 0x5c, 0xb1, 0xec, 0xa4, 0x6c, },",
      "273:     { 0xf3, 0x25, 0x96, 0x5c, 0xa1, 0x6d, 0x62, 0x9f, },",
      "274:     { 0x57, 0x5f, 0xf2, 0x8e, 0x60, 0x38, 0x1b, 0xe5, },",
      "275:     { 0x72, 0x45, 0x06, 0xeb, 0x4c, 0x32, 0x8a, 0x95, },",
      "276: };",
      "281: int siphash_test(void) {",
      "282:     uint8_t in[64], k[16];",
      "283:     int i;",
      "284:     int fails = 0;",
      "286:     for (i = 0; i < 16; ++i)",
      "287:         k[i] = i;",
      "289:     for (i = 0; i < 64; ++i) {",
      "290:         in[i] = i;",
      "291:         uint64_t hash = siphash(in, i, k);",
      "292:         const uint8_t *v = NULL;",
      "293:         v = (uint8_t *)vectors_sip64;",
      "294:         if (memcmp(&hash, v + (i * 8), 8)) {",
      "296:             fails++;",
      "297:         }",
      "298:     }",
      "301:     uint64_t h1, h2;",
      "302:     h1 = siphash((uint8_t*)\"hello world\",11,(uint8_t*)\"1234567812345678\");",
      "303:     h2 = siphash_nocase((uint8_t*)\"hello world\",11,(uint8_t*)\"1234567812345678\");",
      "304:     if (h1 != h2) fails++;",
      "306:     h1 = siphash((uint8_t*)\"hello world\",11,(uint8_t*)\"1234567812345678\");",
      "307:     h2 = siphash_nocase((uint8_t*)\"HELLO world\",11,(uint8_t*)\"1234567812345678\");",
      "308:     if (h1 != h2) fails++;",
      "310:     h1 = siphash((uint8_t*)\"HELLO world\",11,(uint8_t*)\"1234567812345678\");",
      "311:     h2 = siphash_nocase((uint8_t*)\"HELLO world\",11,(uint8_t*)\"1234567812345678\");",
      "312:     if (h1 == h2) fails++;",
      "314:     if (!fails) return 0;",
      "315:     return 1;",
      "316: }",
      "318: int main(void) {",
      "319:     if (siphash_test() == 0) {",
      "320:         printf(\"SipHash test: OK\\n\");",
      "321:         return 0;",
      "322:     } else {",
      "323:         printf(\"SipHash test: FAILED\\n\");",
      "324:         return 1;",
      "325:     }",
      "326: }",
      "328: #endif",
      "",
      "---------------"
    ],
    "src/siphash.h||src/siphash.h": [
      "File: src/siphash.h -> src/siphash.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2:    SipHash reference C implementation",
      "4:    Copyright (c) 2012-2016 Jean-Philippe Aumasson",
      "5:    <jeanphilippe.aumasson@gmail.com>",
      "6:    Copyright (c) 2012-2014 Daniel J. Bernstein <djb@cr.yp.to>",
      "7:    Copyright (c) 2017 Salvatore Sanfilippo <antirez@gmail.com>",
      "9:    To the extent possible under law, the author(s) have dedicated all copyright",
      "10:    and related and neighboring rights to this software to the public domain",
      "11:    worldwide. This software is distributed without any warranty.",
      "13:    You should have received a copy of the CC0 Public Domain Dedication along",
      "14:    with this software. If not, see",
      "15:    <http://creativecommons.org/publicdomain/zero/1.0/>.",
      "17:    ----------------------------------------------------------------------------",
      "19:    This version was modified by Salvatore Sanfilippo <antirez@gmail.com>",
      "20:    in the following ways:",
      "22:    1. Hard-code 2-4 rounds in the hope the compiler can optimize it more",
      "23:       in this raw from. Anyway we always want the standard 2-4 variant.",
      "24:    2. Modify the prototype and implementation so that the function directly",
      "25:       returns an uint64_t value, the hash itself, instead of receiving an",
      "26:       output buffer. This also means that the output size is set to 8 bytes",
      "27:       and the 16 bytes output code handling was removed.",
      "28:    3. Provide a case insensitive variant to be used when hashing strings that",
      "29:       must be considered identical by the hash table regardless of the case.",
      "30:       If we don't have directly a case insensitive hash function, we need to",
      "31:       perform a text transformation in some temporary buffer, which is costly.",
      "32:    4. Remove debugging code.",
      "33:    5. Modified the original test.c file to be a stand-alone function testing",
      "34:       the function in the new form (returing an uint64_t) using just the",
      "35:       relevant test vector.",
      "38: #define SIP_HASH_KEY_LEN 16",
      "40: uint64_t siphash(const uint8_t *in, const size_t inlen, const uint8_t *k);",
      "41: uint64_t siphash_nocase(const uint8_t *in, const size_t inlen, const uint8_t *k);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d7601cd0fe157fa201b2a4b7736f2ee8550ce959",
      "candidate_info": {
        "commit_hash": "d7601cd0fe157fa201b2a4b7736f2ee8550ce959",
        "repo": "reddit/snudown",
        "commit_url": "https://github.com/reddit/snudown/commit/d7601cd0fe157fa201b2a4b7736f2ee8550ce959",
        "files": [
          "README.markdown",
          "snudown.c",
          "test_snudown.py"
        ],
        "message": "Make Snudown compatible with Python3",
        "before_after_code_files": [
          "snudown.c||snudown.c",
          "test_snudown.py||test_snudown.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/reddit/snudown/pull/88"
        ],
        "olp_code_files": {
          "patch": [
            "snudown.c||snudown.c"
          ],
          "candidate": [
            "snudown.c||snudown.c"
          ]
        }
      },
      "candidate_diff": {
        "snudown.c||snudown.c": [
          "File: snudown.c -> snudown.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "197: };",
          "200: {",
          "201:  PyObject *module;",
          "204:  if (module == NULL)",
          "205:   return;",
          "207:  init_default_renderer(module);",
          "208:  init_wiki_renderer(module);",
          "211:  PyModule_AddStringConstant(module, \"__version__\", SNUDOWN_VERSION);",
          "212: }",
          "",
          "[Removed Lines]",
          "199: PyMODINIT_FUNC initsnudown(void)",
          "203:  module = Py_InitModule3(\"snudown\", snudown_methods, snudown_module__doc__);",
          "",
          "[Added Lines]",
          "199: #if PY_MAJOR_VERSION >= 3",
          "200:  static struct PyModuleDef snudown_module = {",
          "201:   PyModuleDef_HEAD_INIT,",
          "202:   \"snudown\",",
          "203:   snudown_module__doc__,",
          "204:   -1,",
          "205:   snudown_methods",
          "206:  };",
          "208:  PyMODINIT_FUNC PyInit_snudown(void)",
          "209: #else",
          "210:  PyMODINIT_FUNC initsnudown(void)",
          "211: #endif",
          "216: #if PY_MAJOR_VERSION >= 3",
          "217:     module = PyModule_Create(&snudown_module);",
          "218: #else",
          "219:     module = Py_InitModule3(\"snudown\", snudown_methods, snudown_module__doc__);",
          "220: #endif",
          "222: #if PY_MAJOR_VERSION >= 3",
          "223:  if (module == NULL)",
          "224:   return module;",
          "225: #else",
          "228: #endif",
          "236: #if PY_MAJOR_VERSION >= 3",
          "237:     return module;",
          "238: #endif",
          "",
          "---------------"
        ],
        "test_snudown.py||test_snudown.py": [
          "File: test_snudown.py -> test_snudown.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/usr/bin/python",
          "2: # -*- coding: utf-8 -*-",
          "4: import snudown",
          "5: import unittest",
          "6: import itertools",
          "10: cases = {",
          "11:     '': '',",
          "",
          "[Removed Lines]",
          "7: import cStringIO as StringIO",
          "",
          "[Added Lines]",
          "4: from __future__ import print_function",
          "6: import sys",
          "10: try:",
          "11:     from StringIO import StringIO  # For Python 2",
          "12: except ImportError:",
          "13:     from io import StringIO  # For Python 3",
          "16: if sys.version_info.major == 2:  # For Python 2",
          "17:     test_range = xrange",
          "19:     unicode_cases = {",
          "20:         # Don't treat unicode punctuation as a word boundary for now",
          "21:         u'a\u3002u/reddit'.encode('utf8'):",
          "22:             u'<p>a\u3002u/reddit</p>\\n'.encode('utf8'),",
          "23:         u'a\u3002r/reddit.com'.encode('utf8'):",
          "24:             u'<p>a\u3002r/reddit.com</p>\\n'.encode('utf8'),",
          "25:     }",
          "26: elif sys.version_info.major == 3:  # For Python 3",
          "27:     test_range = range",
          "29:     # In Python 3, snudown.markdown returns unicode instead of a bytestring",
          "30:     unicode_cases = {",
          "31:         # Don't treat unicode punctuation as a word boundary for now",
          "32:         u'a\u3002u/reddit'.encode('utf8'):",
          "33:             u'<p>a\u3002u/reddit</p>\\n',",
          "34:         u'a\u3002r/reddit.com'.encode('utf8'):",
          "35:             u'<p>a\u3002r/reddit.com</p>\\n',",
          "36:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "153:     'fuu/reddit':",
          "154:         '<p>fuu/reddit</p>\\n',",
          "160:     '\\\\/u/me':",
          "161:         '<p>/u/me</p>\\n',",
          "",
          "[Removed Lines]",
          "156:     # Don't treat unicode punctuation as a word boundary for now",
          "157:     u'a\u3002u/reddit'.encode('utf8'):",
          "158:         u'<p>a\u3002u/reddit</p>\\n'.encode('utf8'),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "241:     'foobar/reddit.com':",
          "242:         '<p>foobar/reddit.com</p>\\n',",
          "247:     '/R/reddit.com':",
          "248:         '<p>/R/reddit.com</p>\\n',",
          "",
          "[Removed Lines]",
          "244:     u'a\u3002r/reddit.com'.encode('utf8'):",
          "245:         u'<p>a\u3002r/reddit.com</p>\\n'.encode('utf8'),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "328:     '&#;':",
          "329:         '<p>&amp;#;</p>\\n',",
          "334:     '&#x;':",
          "335:         '<p>&amp;#x;</p>\\n',",
          "336:     '> quotey mcquoteface':",
          "",
          "[Removed Lines]",
          "331:     '&#;':",
          "332:         '<p>&amp;#;</p>\\n',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "410:         '<p>This is an <span class=\"md-spoiler-text\">inline spoiler with some &gt;!additional</span> text!&lt;</p>\\n'",
          "411: }",
          "414: # Test that every numeric entity is encoded as",
          "415: # it should be.",
          "416: ILLEGAL_NUMERIC_ENTS = frozenset(itertools.chain(",
          "422: ))",
          "424: ent_test_key = ''",
          "425: ent_test_val = ''",
          "427:     ent_testcase = '&#%d;&#x%x;' % (i, i)",
          "428:     ent_test_key += ent_testcase",
          "429:     if i in ILLEGAL_NUMERIC_ENTS:",
          "",
          "[Removed Lines]",
          "417:     xrange(0, 9),",
          "418:     xrange(11, 13),",
          "419:     xrange(14, 32),",
          "420:     xrange(55296, 57344),",
          "421:     xrange(65534, 65536),",
          "426: for i in xrange(65550):",
          "",
          "[Added Lines]",
          "431: cases.update(unicode_cases)",
          "437:     test_range(0, 9),",
          "438:     test_range(11, 13),",
          "439:     test_range(14, 32),",
          "440:     test_range(55296, 57344),",
          "441:     test_range(65534, 65536),",
          "446: for i in test_range(65550):",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "506:     def runTest(self):",
          "507:         output = snudown.markdown(self.input, renderer=self.renderer)",
          "509:         for i, (a, b) in enumerate(zip(repr(self.expected_output),",
          "510:                                        repr(output))):",
          "511:             if a != b:",
          "522: def test_snudown():",
          "523:     suite = unittest.TestSuite()",
          "526:         case = SnudownTestCase(renderer=snudown.RENDERER_WIKI)",
          "527:         case.input = input",
          "528:         case.expected_output = expected_output",
          "529:         suite.addTest(case)",
          "532:         case = SnudownTestCase()",
          "533:         case.input = input",
          "534:         case.expected_output = expected_output",
          "",
          "[Removed Lines]",
          "512:                 io = StringIO.StringIO()",
          "513:                 print >> io, \"TEST FAILED:\"",
          "514:                 print >> io, \"       input: %s\" % repr(self.input)",
          "515:                 print >> io, \"    expected: %s\" % repr(self.expected_output)",
          "516:                 print >> io, \"      actual: %s\" % repr(output)",
          "517:                 print >> io, \"              %s\" % (' ' * i + '^')",
          "518:                 self.fail(io.getvalue())",
          "525:     for input, expected_output in wiki_cases.iteritems():",
          "531:     for input, expected_output in cases.iteritems():",
          "",
          "[Added Lines]",
          "531:                 test_io = StringIO()",
          "532:                 print(\"TEST FAILED:\", file=test_io)",
          "533:                 print(\"       input: %r\" % self.input, file=test_io)",
          "534:                 print(\"    expected: %r\" % self.expected_output, file=test_io)",
          "535:                 print(\"      actual: %r\" % output, file=test_io)",
          "536:                 print(\"              %s\" % (' ' * i + '^'), file=test_io)",
          "538:                 self.fail(test_io.getvalue())",
          "544:     for input, expected_output in wiki_cases.items():",
          "550:     for input, expected_output in cases.items():",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bdf3417421e57eef6f844585c3fbbc3aae7dd209",
      "candidate_info": {
        "commit_hash": "bdf3417421e57eef6f844585c3fbbc3aae7dd209",
        "repo": "reddit/snudown",
        "commit_url": "https://github.com/reddit/snudown/commit/bdf3417421e57eef6f844585c3fbbc3aae7dd209",
        "files": [
          "debian/changelog",
          "snudown.c"
        ],
        "message": "Update version to 1.6.0\n\n- Add compatability for Python 3",
        "before_after_code_files": [
          "snudown.c||snudown.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "snudown.c||snudown.c"
          ],
          "candidate": [
            "snudown.c||snudown.c"
          ]
        }
      },
      "candidate_diff": {
        "snudown.c||snudown.c": [
          "File: snudown.c -> snudown.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include \"html.h\"",
          "6: #include \"autolink.h\"",
          "10: enum snudown_renderer_mode {",
          "11:  RENDERER_USERTEXT = 0,",
          "",
          "[Removed Lines]",
          "8: #define SNUDOWN_VERSION \"1.5.0\"",
          "",
          "[Added Lines]",
          "8: #define SNUDOWN_VERSION \"1.6.0\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4a16cf0b1798a1c7433fb4757aee1945347db682",
      "candidate_info": {
        "commit_hash": "4a16cf0b1798a1c7433fb4757aee1945347db682",
        "repo": "reddit/snudown",
        "commit_url": "https://github.com/reddit/snudown/commit/4a16cf0b1798a1c7433fb4757aee1945347db682",
        "files": [
          "Dockerfile.wheel",
          "Makefile",
          "README.markdown"
        ],
        "message": "Add Dockerfile.wheel and Makefile for packaging (#86)\n\n* Add Dockerfile.wheel and Makefile for packaging\n* Use Artifactory 3.8 base image\n* Readme: Fix typo\n* Add building instructions\n* Autoremove byte order mark",
        "before_after_code_files": [
          "Dockerfile.wheel||Dockerfile.wheel"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Dockerfile.wheel||Dockerfile.wheel"
          ],
          "candidate": [
            "Dockerfile.wheel||Dockerfile.wheel"
          ]
        }
      },
      "candidate_diff": {
        "Dockerfile.wheel||Dockerfile.wheel": [
          "File: Dockerfile.wheel -> Dockerfile.wheel",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: FROM python:3.8-buster",
          "3: ENV DEBIAN_FRONTEND noninteractive",
          "5: RUN apt-get update && \\",
          "6:     apt-get install -y \\",
          "7:         build-essential \\",
          "8:         gperf \\",
          "9:         software-properties-common",
          "11: ENV SRC_DIR /opt/snudown",
          "12: ENV WHEEL_OUTPUT_DIR /tmp/dist",
          "14: RUN mkdir -p $SRC_DIR $WHEEL_OUTPUT_DIR",
          "15: WORKDIR $SRC_DIR",
          "17: ADD . $SRC_DIR",
          "18: CMD pip3 wheel --wheel-dir=$WHEEL_OUTPUT_DIR .",
          "",
          "---------------"
        ]
      }
    }
  ]
}