{
  "cve_id": "CVE-2019-10664",
  "cve_desc": "Domoticz before 4.10578 allows SQL Injection via the idx parameter in CWebServer::GetFloorplanImage in WebServer.cpp.",
  "repo": "domoticz/domoticz",
  "patch_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
  "patch_info": {
    "commit_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/ee70db46f81afa582c96b887b73bcd2a86feda00",
    "files": [
      "main/WebServer.cpp"
    ],
    "message": "Fixed possible SQL Injection Vulnerability (Thanks to Fabio Carretto!)",
    "before_after_code_files": [
      "main/WebServer.cpp||main/WebServer.cpp"
    ]
  },
  "patch_diff": {
    "main/WebServer.cpp||main/WebServer.cpp": [
      "File: main/WebServer.cpp -> main/WebServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10772:     return;",
      "10773:    }",
      "10774:    std::vector<std::vector<std::string> > result;",
      "10776:    if (result.empty())",
      "10777:     return;",
      "10778:    reply::set_content(&rep, result[0][0].begin(), result[0][0].end());",
      "",
      "[Removed Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%s\", idx.c_str());",
      "",
      "[Added Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%d\", atol(idx.c_str()));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "931126a4da70b91e5458f810d0a003e7be311968",
      "candidate_info": {
        "commit_hash": "931126a4da70b91e5458f810d0a003e7be311968",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/931126a4da70b91e5458f810d0a003e7be311968",
        "files": [
          "www/app/TemperatureController.js",
          "www/views/temperature_widget.html"
        ],
        "message": "Global angular tend functions",
        "before_after_code_files": [
          "www/app/TemperatureController.js||www/app/TemperatureController.js",
          "www/views/temperature_widget.html||www/views/temperature_widget.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "www/app/TemperatureController.js||www/app/TemperatureController.js": [
          "File: www/app/TemperatureController.js -> www/app/TemperatureController.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "590:       return backgroundClass;",
          "591:      };",
          "594:      ctrl.displayTemp = function () {",
          "595:       return typeof item.Temp != 'undefined';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "593:      ctrl.displayTrend = $rootScope.DisplayTrend;",
          "594:      ctrl.trendState  = $rootScope.TrendState;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "620:       return typeof item.Chill != 'undefined';",
          "621:      };",
          "639:      ctrl.image = function () {",
          "640:       if (typeof item.Temp != 'undefined') {",
          "641:        return GetTemp48Item(item.Temp);",
          "",
          "[Removed Lines]",
          "623:      ctrl.DisplayTrend = function () {",
          "625:       if (typeof item.trend != 'undefined') {",
          "626:        if (item.trend > 1)",
          "627:         return true;",
          "628:       }",
          "629:       return false;",
          "630:      };",
          "631:      ctrl.TrendState = function () {",
          "632:       if (item.trend == 0) return \"unk\";",
          "633:       if (item.trend == 1) return \"stable\";",
          "634:       if (item.trend == 2) return \"up\";",
          "635:       if (item.trend == 3) return \"down\";",
          "636:       return \"unk\";",
          "637:      };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "www/views/temperature_widget.html||www/views/temperature_widget.html": [
          "File: www/views/temperature_widget.html -> www/views/temperature_widget.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:             <tr>",
          "5:                 <td id=\"name\" ng-bind=\"item.Name\"></td>",
          "6:                 <td id=\"bigtext\" class=\"ng-cloak\">",
          "8:                     <span ng-show=\"ctrl.displayTemp()\">{{item.Temp}}&#176; {{tempsign}}</span>",
          "9:                     <span ng-show=\"ctrl.displaySetPoint() && ctrl.isSetPointOn()\">({{item.SetPoint}}&#176; {{tempsign}})</span>",
          "10:                     <span ng-show=\"ctrl.displaySetPoint() && !ctrl.isSetPointOn()\">(Off)</span>",
          "",
          "[Removed Lines]",
          "7:      <img ng-show=\"ctrl.DisplayTrend()\" height=\"12\" ng-src=\"images/arrow_{{ctrl.TrendState()}}.png\">",
          "",
          "[Added Lines]",
          "7:      <img ng-show=\"ctrl.displayTrend({{item.trend}})\" height=\"12\" ng-src=\"images/arrow_{{ctrl.trendState(item.trend)}}.png\">",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aa3058c51fad88708f4bf2ffe93b027d60c816dc",
      "candidate_info": {
        "commit_hash": "aa3058c51fad88708f4bf2ffe93b027d60c816dc",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/aa3058c51fad88708f4bf2ffe93b027d60c816dc",
        "files": [
          "main/domoticz.cpp"
        ],
        "message": "Fix double version display",
        "before_after_code_files": [
          "main/domoticz.cpp||main/domoticz.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/domoticz.cpp||main/domoticz.cpp": [
          "File: main/domoticz.cpp -> main/domoticz.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "870:   }",
          "871:   if ((cmdLine.HasSwitch(\"-version\")) || (cmdLine.HasSwitch(\"--version\")))",
          "872:   {",
          "874:    return 0;",
          "875:   }",
          "876:   if (cmdLine.HasSwitch(\"-userdata\"))",
          "",
          "[Removed Lines]",
          "873:    DisplayAppVersion();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e2e22449a0861434e7ce6e0a9bd0c5811e61a6a6",
      "candidate_info": {
        "commit_hash": "e2e22449a0861434e7ce6e0a9bd0c5811e61a6a6",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/e2e22449a0861434e7ce6e0a9bd0c5811e61a6a6",
        "files": [
          "CMakeLists.txt",
          "hardware/DomoticzHardware.cpp",
          "hardware/DomoticzHardware.h",
          "hardware/TTNMQTT.cpp",
          "hardware/TTNMQTT.h",
          "hardware/cayenne_lpp/CayenneLPP.cpp",
          "hardware/cayenne_lpp/CayenneLPP.h",
          "hardware/cayenne_lpp/CayenneLPP_Dec.cpp",
          "hardware/cayenne_lpp/CayenneLPP_Dec.h",
          "hardware/cayenne_lpp/LICENSE",
          "hardware/cayenne_lpp/README.md",
          "main/RFXNames.cpp",
          "main/RFXNames.h",
          "main/WebServer.cpp",
          "main/mainworker.cpp",
          "msbuild/domoticz.vcxproj",
          "msbuild/domoticz.vcxproj.filters",
          "www/app/HardwareController.js",
          "www/views/hardware.html"
        ],
        "message": "New Hardware, The Things Network with CayenneLPP application(s)",
        "before_after_code_files": [
          "hardware/DomoticzHardware.cpp||hardware/DomoticzHardware.cpp",
          "hardware/DomoticzHardware.h||hardware/DomoticzHardware.h",
          "hardware/TTNMQTT.cpp||hardware/TTNMQTT.cpp",
          "hardware/TTNMQTT.h||hardware/TTNMQTT.h",
          "hardware/cayenne_lpp/CayenneLPP.cpp||hardware/cayenne_lpp/CayenneLPP.cpp",
          "hardware/cayenne_lpp/CayenneLPP.h||hardware/cayenne_lpp/CayenneLPP.h",
          "hardware/cayenne_lpp/CayenneLPP_Dec.cpp||hardware/cayenne_lpp/CayenneLPP_Dec.cpp",
          "hardware/cayenne_lpp/CayenneLPP_Dec.h||hardware/cayenne_lpp/CayenneLPP_Dec.h",
          "main/RFXNames.cpp||main/RFXNames.cpp",
          "main/RFXNames.h||main/RFXNames.h",
          "main/WebServer.cpp||main/WebServer.cpp",
          "main/mainworker.cpp||main/mainworker.cpp",
          "msbuild/domoticz.vcxproj||msbuild/domoticz.vcxproj",
          "msbuild/domoticz.vcxproj.filters||msbuild/domoticz.vcxproj.filters",
          "www/app/HardwareController.js||www/app/HardwareController.js",
          "www/views/hardware.html||www/views/hardware.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [
            "main/WebServer.cpp||main/WebServer.cpp"
          ],
          "candidate": [
            "main/WebServer.cpp||main/WebServer.cpp"
          ]
        }
      },
      "candidate_diff": {
        "hardware/DomoticzHardware.cpp||hardware/DomoticzHardware.cpp": [
          "File: hardware/DomoticzHardware.cpp -> hardware/DomoticzHardware.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "858:  sDecodeRXMessage(this, (const unsigned char *)&gDevice, defaultname.c_str(), BatteryLevel);",
          "859: }",
          "862: {",
          "863:  _tGeneralSwitch gSwitch;",
          "864:  gSwitch.id = NodeID;",
          "865:  gSwitch.unitcode = ChildID;",
          "866:  gSwitch.cmnd = SwitchState;",
          "867:  gSwitch.level = Level;",
          "869:  sDecodeRXMessage(this, (const unsigned char *)&gSwitch, defaultname.c_str(), BatteryLevel);",
          "870: }",
          "",
          "[Removed Lines]",
          "861: void CDomoticzHardwareBase::SendGeneralSwitch(const int NodeID, const int ChildID, const int BatteryLevel, const uint8_t SwitchState, const uint8_t Level, const std::string &defaultname, const uint8_t RssiLevel)",
          "868:  gSwitch.rssi = RssiLevel;",
          "",
          "[Added Lines]",
          "861: void CDomoticzHardwareBase::SendGeneralSwitch(const int NodeID, const int ChildID, const int BatteryLevel, const uint8_t SwitchState, const uint8_t Level, const std::string &defaultname, const int RssiLevel)",
          "868:  gSwitch.rssi = (uint8_t)RssiLevel;",
          "",
          "---------------"
        ],
        "hardware/DomoticzHardware.h||hardware/DomoticzHardware.h": [
          "File: hardware/DomoticzHardware.h -> hardware/DomoticzHardware.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:  void SendSwitch(const int NodeID, const uint8_t ChildID, const int BatteryLevel, const bool bOn, const double Level, const std::string &defaultname, const int RssiLevel = 12);",
          "70:  void SendSwitchIfNotExists(const int NodeID, const uint8_t ChildID, const int BatteryLevel, const bool bOn, const double Level, const std::string &defaultname);",
          "71:  void SendRGBWSwitch(const int NodeID, const uint8_t ChildID, const int BatteryLevel, const int Level, const bool bIsRGBW, const std::string &defaultname);",
          "73:  void SendVoltageSensor(const int NodeID, const uint8_t ChildID, const int BatteryLevel, const float Volt, const std::string &defaultname);",
          "74:  void SendCurrentSensor(const int NodeID, const int BatteryLevel, const float Current1, const float Current2, const float Current3, const std::string &defaultname, const int RssiLevel = 12);",
          "75:  void SendPercentageSensor(const int NodeID, const uint8_t ChildID, const int BatteryLevel, const float Percentage, const std::string &defaultname);",
          "",
          "[Removed Lines]",
          "72:  void SendGeneralSwitch(const int NodeID, const int ChildID, const int BatteryLevel, const uint8_t SwitchState, const uint8_t Level, const std::string &defaultname, const uint8_t RssiLevel = 12);",
          "",
          "[Added Lines]",
          "72:  void SendGeneralSwitch(const int NodeID, const int ChildID, const int BatteryLevel, const uint8_t SwitchState, const uint8_t Level, const std::string &defaultname, const int RssiLevel = 12);",
          "",
          "---------------"
        ],
        "hardware/TTNMQTT.cpp||hardware/TTNMQTT.cpp": [
          "File: hardware/TTNMQTT.cpp -> hardware/TTNMQTT.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include \"stdafx.h\"",
          "2: #include \"TTNMQTT.h\"",
          "3: #include \"../main/Logger.h\"",
          "4: #include \"../main/Helper.h\"",
          "5: #include <iostream>",
          "6: #include \"../main/localtime_r.h\"",
          "7: #include \"../main/mainworker.h\"",
          "8: #include \"../main/SQLHelper.h\"",
          "9: #include \"../json/json.h\"",
          "10: #include \"../webserver/Base64.h\"",
          "11: #include \"cayenne_lpp/CayenneLPP_Dec.h\"",
          "13: #define RETRY_DELAY 30",
          "15: #define CLIENTID \"Domoticz\"",
          "16: #define QOS         1",
          "18: #ifdef _DEBUG",
          "21: #endif",
          "23: #ifdef DEBUG_TTN_W",
          "24: void SaveString2Disk(std::string str, std::string filename)",
          "25: {",
          "26:  FILE *fOut = fopen(filename.c_str(), \"wb+\");",
          "27:  if (fOut)",
          "28:  {",
          "29:   fwrite(str.c_str(), 1, str.size(), fOut);",
          "30:   fclose(fOut);",
          "31:  }",
          "32: }",
          "33: #endif",
          "34: #ifdef DEBUG_TTN_R",
          "35: std::string ReadFile(std::string filename)",
          "36: {",
          "37:  std::ifstream file;",
          "38:  std::string sResult = \"\";",
          "39:  file.open(filename.c_str());",
          "40:  if (!file.is_open())",
          "41:   return \"\";",
          "42:  std::string sLine;",
          "43:  while (!file.eof())",
          "44:  {",
          "45:   getline(file, sLine);",
          "46:   sResult += sLine;",
          "47:  }",
          "48:  file.close();",
          "49:  return sResult;",
          "50: }",
          "51: #endif",
          "54: CTTNMQTT::CTTNMQTT(const int ID, const std::string &IPAddress, const unsigned short usIPPort, const std::string &Username, const std::string &Password, const std::string &CAfilename) :",
          "55:  mosquittopp(CLIENTID),",
          "56:  m_szIPAddress(IPAddress),",
          "57:  m_UserName(Username),",
          "58:  m_Password(Password),",
          "59:  m_CAFilename(CAfilename)",
          "60: {",
          "61:  m_HwdID = ID;",
          "62:  m_IsConnected = false;",
          "63:  m_bDoReconnect = false;",
          "65:  m_stoprequested = false;",
          "66:  m_usIPPort = usIPPort;",
          "67:  m_TopicIn = Username + \"/devices/+/up\";",
          "69: #ifdef DEBUG_TTN_R",
          "70:  std::string sResult = ReadFile(\"E:\\\\ttn_mqtt.json\");",
          "71:  mosquitto_message mqtt_msg;",
          "72:  mqtt_msg.topic = \"domo_rob/devices/lopy4/up\";",
          "73:  mqtt_msg.payload = (void*)sResult.c_str();",
          "74:  mqtt_msg.payloadlen = sResult.size();",
          "75:  on_message(&mqtt_msg);",
          "76: #endif",
          "78:  mosqpp::lib_init();",
          "79: }",
          "81: CTTNMQTT::~CTTNMQTT(void)",
          "82: {",
          "83:  mosqpp::lib_cleanup();",
          "84: }",
          "86: bool CTTNMQTT::StartHardware()",
          "87: {",
          "88:  StartHeartbeatThread();",
          "90:  m_stoprequested = false;",
          "93:  m_IsConnected = false;",
          "95:  m_bIsStarted = true;",
          "98:  m_thread = std::make_shared<std::thread>(&CTTNMQTT::Do_Work, this);",
          "99:  SetThreadName(m_thread->native_handle(), \"TTN_MQTT\");",
          "100:  return (m_thread != nullptr);",
          "101: }",
          "103: void CTTNMQTT::StopMQTT()",
          "104: {",
          "105:  disconnect();",
          "106:  m_bIsStarted = false;",
          "107: }",
          "109: bool CTTNMQTT::StopHardware()",
          "110: {",
          "111:  StopHeartbeatThread();",
          "112:  m_stoprequested = true;",
          "113:  try {",
          "114:   if (m_thread)",
          "115:   {",
          "116:    m_thread->join();",
          "117:    m_thread.reset();",
          "118:   }",
          "119:  }",
          "120:  catch (...)",
          "121:  {",
          "123:  }",
          "124:  m_IsConnected = false;",
          "125:  return true;",
          "126: }",
          "128: void CTTNMQTT::on_subscribe(int mid, int qos_count, const int *granted_qos)",
          "129: {",
          "130:  _log.Log(LOG_STATUS, \"TTN_MQTT: Subscribed\");",
          "131:  m_IsConnected = true;",
          "132: }",
          "134: void CTTNMQTT::on_connect(int rc)",
          "135: {",
          "143:  if (rc == 0) {",
          "144:   if (m_IsConnected) {",
          "145:    _log.Log(LOG_STATUS, \"TTN_MQTT: re-connected to: %s:%d\", m_szIPAddress.c_str(), m_usIPPort);",
          "146:   }",
          "147:   else {",
          "148:    _log.Log(LOG_STATUS, \"TTN_MQTT: connected to: %s:%d\", m_szIPAddress.c_str(), m_usIPPort);",
          "149:    m_IsConnected = true;",
          "150:    sOnConnected(this);",
          "151:   }",
          "152:   subscribe(NULL, m_TopicIn.c_str());",
          "153:  }",
          "154:  else {",
          "155:   _log.Log(LOG_ERROR, \"TTN_MQTT: Connection failed!, restarting (rc=%d)\", rc);",
          "156:   m_bDoReconnect = true;",
          "157:  }",
          "158: }",
          "160: void CTTNMQTT::on_disconnect(int rc)",
          "161: {",
          "162:  if (rc != 0)",
          "163:  {",
          "164:   if (!m_stoprequested)",
          "165:   {",
          "166:    if (rc == 5)",
          "167:    {",
          "168:     _log.Log(LOG_ERROR, \"TTN_MQTT: disconnected, Invalid Username/Password (rc=%d)\", rc);",
          "169:    }",
          "170:    else",
          "171:    {",
          "172:     _log.Log(LOG_ERROR, \"TTN_MQTT: disconnected, restarting (rc=%d)\", rc);",
          "173:    }",
          "174:    m_bDoReconnect = true;",
          "175:   }",
          "176:  }",
          "177: }",
          "180: bool CTTNMQTT::ConnectInt()",
          "181: {",
          "182:  StopMQTT();",
          "183:  return ConnectIntEx();",
          "184: }",
          "186: bool CTTNMQTT::ConnectIntEx()",
          "187: {",
          "188:  m_bDoReconnect = false;",
          "189:  _log.Log(LOG_STATUS, \"TTN_MQTT: Connecting to %s:%d\", m_szIPAddress.c_str(), m_usIPPort);",
          "191:  int rc;",
          "192:  int keepalive = 60;",
          "194:  if (!m_CAFilename.empty()) {",
          "195:   rc = tls_set(m_CAFilename.c_str());",
          "197:   if (rc != MOSQ_ERR_SUCCESS)",
          "198:   {",
          "199:    _log.Log(LOG_ERROR, \"TTN_MQTT: Failed enabling TLS mode, return code: %d (CA certificate: '%s')\", rc, m_CAFilename.c_str());",
          "200:    return false;",
          "201:   }",
          "202:   else {",
          "203:    _log.Log(LOG_STATUS, \"TTN_MQTT: enabled TLS mode\");",
          "204:   }",
          "205:  }",
          "206:  rc = username_pw_set((!m_UserName.empty()) ? m_UserName.c_str() : NULL, (!m_Password.empty()) ? m_Password.c_str() : NULL);",
          "208:  rc = connect(m_szIPAddress.c_str(), m_usIPPort, keepalive);",
          "209:  if (rc != MOSQ_ERR_SUCCESS)",
          "210:  {",
          "211:   _log.Log(LOG_ERROR, \"TTN_MQTT: Failed to start, return code: %d (Check IP/Port)\", rc);",
          "212:   m_bDoReconnect = true;",
          "213:   return false;",
          "214:  }",
          "215:  return true;",
          "216: }",
          "218: void CTTNMQTT::Do_Work()",
          "219: {",
          "220:  bool bFirstTime = true;",
          "221:  int msec_counter = 0;",
          "222:  int sec_counter = 0;",
          "224:  while (!m_stoprequested)",
          "225:  {",
          "226:   sleep_milliseconds(100);",
          "227:   if (!bFirstTime)",
          "228:   {",
          "229:    int rc = loop();",
          "230:    if (rc) {",
          "231:     if (rc != MOSQ_ERR_NO_CONN)",
          "232:     {",
          "233:      if (!m_stoprequested)",
          "234:      {",
          "235:       if (!m_bDoReconnect)",
          "236:       {",
          "237:        reconnect();",
          "238:       }",
          "239:      }",
          "240:     }",
          "241:    }",
          "242:   }",
          "244:   msec_counter++;",
          "245:   if (msec_counter == 10)",
          "246:   {",
          "247:    msec_counter = 0;",
          "249:    sec_counter++;",
          "251:    if (sec_counter % 12 == 0) {",
          "252:     m_LastHeartbeat = mytime(NULL);",
          "253:    }",
          "255:    if (bFirstTime)",
          "256:    {",
          "257:     bFirstTime = false;",
          "258:     ConnectInt();",
          "259:    }",
          "260:    else",
          "261:    {",
          "262:     if (sec_counter % 30 == 0)",
          "263:     {",
          "264:      if (m_bDoReconnect)",
          "265:       ConnectIntEx();",
          "266:     }",
          "267:     if (isConnected() && sec_counter % 10 == 0)",
          "268:     {",
          "269:      SendHeartbeat();",
          "270:     }",
          "271:    }",
          "272:   }",
          "273:  }",
          "274:  _log.Log(LOG_STATUS, \"TTN_MQTT: Worker stopped...\");",
          "275: }",
          "277: void CTTNMQTT::SendHeartbeat()",
          "278: {",
          "280: }",
          "282: void CTTNMQTT::SendMessage(const std::string &Topic, const std::string &Message)",
          "283: {",
          "284:  try {",
          "285:   if (!m_IsConnected)",
          "286:   {",
          "287:    _log.Log(LOG_STATUS, \"TTN_MQTT: Not Connected, failed to send message: %s\", Message.c_str());",
          "288:    return;",
          "289:   }",
          "290:   publish(NULL, Topic.c_str(), Message.size(), Message.c_str());",
          "291:  }",
          "292:  catch (...)",
          "293:  {",
          "294:   _log.Log(LOG_ERROR, \"TTN_MQTT: Failed to send message: %s\", Message.c_str());",
          "295:  }",
          "296: }",
          "298: void CTTNMQTT::WriteInt(const std::string &sendStr)",
          "299: {",
          "300:  if (sendStr.size() < 2)",
          "301:   return;",
          "305: }",
          "307: Json::Value CTTNMQTT::GetSensorWithChannel(const Json::Value &root, const std::string &stype, const int sChannel)",
          "308: {",
          "309:  Json::Value ret;",
          "310:  for (auto itt = root.begin(); itt != root.end(); ++itt)",
          "311:  {",
          "312:   uint8_t channel = (uint8_t)(*itt)[\"channel\"].asInt();",
          "313:   std::string type = (*itt)[\"type\"].asString();",
          "315:   if ((type == stype) && (channel == sChannel))",
          "316:    return (*itt);",
          "317:  }",
          "318:  return ret;",
          "319: }",
          "321: void CTTNMQTT::FlasgSensorWithChannelUsed(Json::Value &root, const std::string &stype, const int sChannel)",
          "322: {",
          "323:  for (auto itt = root.begin(); itt != root.end(); ++itt)",
          "324:  {",
          "325:   uint8_t channel = (uint8_t)(*itt)[\"channel\"].asInt();",
          "326:   std::string type = (*itt)[\"type\"].asString();",
          "328:   if ((type == stype) && (channel == sChannel))",
          "329:   {",
          "330:    (*itt)[\"used\"] = true;",
          "331:    return;",
          "332:   }",
          "333:  }",
          "334: }",
          "337: void CTTNMQTT::on_message(const struct mosquitto_message *message)",
          "338: {",
          "339:  std::string topic = message->topic;",
          "341:  if (topic.find(\"/up/\") != std::string::npos)",
          "342:   return; //not interested in sub-topics",
          "344:  std::string qMessage = std::string((char*)message->payload, (char*)message->payload + message->payloadlen);",
          "346: #ifdef DEBUG_TTN_W",
          "347:  SaveString2Disk(qMessage, \"E:\\\\ttn_mqtt.json\");",
          "348: #endif",
          "350:  _log.Log(LOG_NORM, \"TTN_MQTT: Topic: %s\", topic.c_str());",
          "352:  if (qMessage.empty())",
          "353:   return;",
          "355:  try {",
          "356:   Json::Value root;",
          "357:   Json::Reader jReader;",
          "358:   bool ret = jReader.parse(qMessage, root);",
          "359:   if ((!ret) || (!root.isObject()))",
          "360:   {",
          "361:    _log.Log(LOG_ERROR, \"TTN_MQTT: Invalid data received!\");",
          "362:    return;",
          "363:   }",
          "364:   if (root[\"payload_raw\"].empty())",
          "365:   {",
          "366:    _log.Log(LOG_ERROR, \"TTN_MQTT: Invalid data received!\");",
          "367:    return;",
          "368:   }",
          "371:   std::vector<std::string> strarray;",
          "372:   StringSplit(topic, \"/\", strarray);",
          "374:   std::string DeviceName = strarray[2];",
          "376:   int DeviceID = 0;",
          "379:   std::vector<std::vector<std::string> > result;",
          "380:   result = m_sql.safe_query(\"SELECT ID FROM WOLNodes WHERE (HardwareID==%d) AND (MacAddress==\\\"%q\\\")\", m_HwdID, DeviceName.c_str());",
          "381:   if (result.empty())",
          "382:   {",
          "384:    m_sql.safe_query(\"INSERT INTO WOLNodes (HardwareID, Name, MacAddress) VALUES (%d, '%q', '%q')\", m_HwdID, DeviceName.c_str(), DeviceName.c_str());",
          "385:    result = m_sql.safe_query(\"SELECT ID FROM WOLNodes WHERE (HardwareID==%d) AND (MacAddress==\\\"%q\\\")\", m_HwdID, DeviceName.c_str());",
          "386:    if (result.empty())",
          "387:    {",
          "388:     _log.Log(LOG_ERROR, \"TTN_MQTT Hue: Problem adding new Device!!\");",
          "389:     return;",
          "390:    }",
          "391:   }",
          "392:   DeviceID = atoi(result[0][0].c_str());",
          "395:   int rssi = 12; //Get the best RSSI from the Gateways received",
          "398:   std::string lpp = base64_decode(root[\"payload_raw\"].asString());",
          "399:   Json::Value payload;",
          "401:   if (!CayenneLPPDec::ParseLPP((const uint8_t*)lpp.c_str(), lpp.size(), payload))",
          "402:   {",
          "403:    _log.Log(LOG_ERROR, \"TTN_MQTT: Invalid data received!\");",
          "404:    return;",
          "405:   }",
          "407:   if ((payload.empty()) || (!payload.isArray()))",
          "408:   {",
          "409:    _log.Log(LOG_ERROR, \"TTN_MQTT: Invalid data received!\");",
          "410:    return;",
          "411:   }",
          "412:   for (auto itt = payload.begin(); itt != payload.end(); ++itt)",
          "413:   {",
          "414:    if (!(*itt)[\"used\"].empty())",
          "415:     continue;",
          "416:    uint8_t channel = (uint8_t)(*itt)[\"channel\"].asInt();",
          "417:    std::string type = (*itt)[\"type\"].asString();",
          "419:    int BatteryLevel = 255;",
          "421:    if (",
          "422:     (type == \"temp\")",
          "423:     || (type == \"humidity\")",
          "424:     || (type == \"baro\")",
          "425:     )",
          "426:    {",
          "427:     Json::Value vTemp = GetSensorWithChannel(payload, \"temp\", channel);",
          "428:     Json::Value vHum = GetSensorWithChannel(payload, \"humidity\", channel);",
          "429:     Json::Value vBaro = GetSensorWithChannel(payload, \"baro\", channel);",
          "431:     bool bHaveTemp = vTemp.isObject();",
          "432:     bool bHaveHumidity = vHum.isObject();",
          "433:     bool bHaveBaro = vBaro.isObject();",
          "434:     int nforecast = wsbaroforcast_some_clouds;",
          "435:     float temp, hum, baro;",
          "436:     if (bHaveTemp)",
          "437:     {",
          "438:      temp = vTemp[\"value\"].asFloat();",
          "439:     }",
          "440:     if (bHaveHumidity)",
          "441:     {",
          "442:      hum = vHum[\"value\"].asFloat();",
          "443:     }",
          "444:     if (bHaveBaro)",
          "445:     {",
          "446:      baro = vBaro[\"value\"].asFloat();",
          "448:      if (baro <= 980)",
          "449:       nforecast = wsbaroforcast_heavy_rain;",
          "450:      else if (baro <= 995)",
          "451:      {",
          "452:       if (temp > 1)",
          "453:        nforecast = wsbaroforcast_rain;",
          "454:       else",
          "455:        nforecast = wsbaroforcast_snow;",
          "456:      }",
          "457:      else if (baro >= 1029)",
          "458:       nforecast = wsbaroforcast_sunny;",
          "459:     }",
          "460:     if (bHaveTemp && bHaveHumidity && bHaveBaro)",
          "461:     {",
          "462:      SendTempHumBaroSensorFloat(DeviceID, BatteryLevel, temp, (int)rint(hum), baro, nforecast, DeviceName, rssi);",
          "463:     }",
          "464:     else if (bHaveTemp && bHaveHumidity)",
          "465:     {",
          "466:      SendTempHumSensor(DeviceID, BatteryLevel, temp, (int)rint(hum), DeviceName, rssi);",
          "467:     }",
          "468:     else if (bHaveTemp && bHaveBaro)",
          "469:     {",
          "470:      SendTempBaroSensor(DeviceID, BatteryLevel, temp, baro, DeviceName);",
          "471:     }",
          "472:     else {",
          "473:      if (bHaveTemp)",
          "474:      {",
          "475:       SendTempSensor(DeviceID, BatteryLevel, temp, DeviceName, rssi);",
          "476:      }",
          "477:      if (bHaveHumidity)",
          "478:      {",
          "479:       SendHumiditySensor(DeviceID, BatteryLevel, (int)rint(hum), DeviceName, rssi);",
          "480:      }",
          "481:      if (bHaveBaro)",
          "482:      {",
          "483:       SendBaroSensor(DeviceID, 1, BatteryLevel, baro, CalculateBaroForecast(baro), DeviceName);",
          "484:      }",
          "485:     }",
          "486:     if (bHaveTemp)",
          "487:      FlasgSensorWithChannelUsed(payload, \"temp\", channel);",
          "488:     if (bHaveHumidity)",
          "489:      FlasgSensorWithChannelUsed(payload, \"humidity\", channel);",
          "490:     if (bHaveBaro)",
          "491:      FlasgSensorWithChannelUsed(payload, \"baro\", channel);",
          "492:    }",
          "493:    else if (type == \"gps\")",
          "494:    {",
          "496:     _log.Log(LOG_STATUS, \"TTN_MQTT: GPS not implemented yet!\");",
          "497:     float height = (*itt)[\"alt\"].asFloat();",
          "498:     SendPercentageSensor(DeviceID, 1, BatteryLevel, height, DeviceName + \" Altitude\");",
          "499:    }",
          "500:    else if ((type == \"digital_input\") || (type == \"digital_output\"))",
          "501:    {",
          "502:     SendGeneralSwitch(DeviceID, 1, BatteryLevel, (*itt)[\"value\"].asInt(), 0, DeviceName, rssi);",
          "503:    }",
          "504:    else if ((type == \"analog_input\") || (type == \"analog_output\") || (type == \"presence\"))",
          "505:    {",
          "506:     SendVoltageSensor(DeviceID, 1, BatteryLevel, (*itt)[\"value\"].asFloat(), DeviceName);",
          "507:    }",
          "508:    else if (type == \"luminosity\")",
          "509:    {",
          "510:     SendLuxSensor(DeviceID, 1, BatteryLevel, (*itt)[\"value\"].asFloat(), DeviceName);",
          "511:    }",
          "512:    else",
          "513:    {",
          "514:     _log.Log(LOG_STATUS, \"TTN_MQTT: Unhandled type: %s (Please report!)\", type.c_str());",
          "515:    }",
          "517:    (*itt)[\"used\"] = true;",
          "518:   }",
          "519:  }",
          "520:  catch (...)",
          "521:  {",
          "522:   _log.Log(LOG_ERROR, \"TTN_MQTT: Error parsing message!!!\");",
          "523:  }",
          "524: }",
          "",
          "---------------"
        ],
        "hardware/TTNMQTT.h||hardware/TTNMQTT.h": [
          "File: hardware/TTNMQTT.h -> hardware/TTNMQTT.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #pragma once",
          "3: #include \"MySensorsBase.h\"",
          "4: #ifdef BUILTIN_MQTT",
          "5: #include \"../MQTT/mosquittopp.h\"",
          "6: #else",
          "7: #ifdef WIN32",
          "8: #include \"../MQTT/mosquittopp.h\"",
          "9: #else",
          "10: #include <mosquittopp.h>",
          "11: #endif",
          "12: #endif",
          "14: namespace Json",
          "15: {",
          "16:  class Value;",
          "17: };",
          "19: class CTTNMQTT : public MySensorsBase, mosqpp::mosquittopp",
          "20: {",
          "21: public:",
          "22:  CTTNMQTT(const int ID, const std::string &IPAddress, const unsigned short usIPPort, const std::string &Username, const std::string &Password, const std::string &CAFile);",
          "23:  ~CTTNMQTT(void);",
          "24:  bool isConnected(){ return m_IsConnected; };",
          "26:  virtual void on_connect(int rc) override;",
          "27:  void on_disconnect(int rc) override;",
          "28:  virtual void on_message(const struct mosquitto_message *message) override;",
          "29:  void on_subscribe(int mid, int qos_count, const int *granted_qos) override;",
          "31:  void SendMessage(const std::string &Topic, const std::string &Message);",
          "33: public:",
          "34:  bool m_bDoReconnect;",
          "35:  bool m_IsConnected;",
          "36:  boost::signals2::signal<void()> sDisconnected;",
          "37: private:",
          "38:  bool ConnectInt();",
          "39:  bool ConnectIntEx();",
          "40:  Json::Value GetSensorWithChannel(const Json::Value &root, const std::string &stype, const int sChannel);",
          "41:  void FlasgSensorWithChannelUsed(Json::Value &root, const std::string &stype, const int sChannel);",
          "42: protected:",
          "43:  std::string m_szIPAddress;",
          "44:  unsigned short m_usIPPort;",
          "45:  std::string m_UserName;",
          "46:  std::string m_Password;",
          "47:  std::string m_CAFilename;",
          "48:  std::string m_TopicIn;",
          "49:  virtual bool StartHardware() override;",
          "50:  virtual bool StopHardware() override;",
          "51:  void StopMQTT();",
          "52:  void Do_Work();",
          "53:  virtual void SendHeartbeat();",
          "54:  void WriteInt(const std::string &sendStr) override;",
          "55:  std::shared_ptr<std::thread> m_thread;",
          "56:  volatile bool m_stoprequested;",
          "57: };",
          "",
          "---------------"
        ],
        "hardware/cayenne_lpp/CayenneLPP.cpp||hardware/cayenne_lpp/CayenneLPP.cpp": [
          "File: hardware/cayenne_lpp/CayenneLPP.cpp -> hardware/cayenne_lpp/CayenneLPP.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include \"stdafx.h\"",
          "2: #include \"CayenneLPP.h\"",
          "3: #include <memory>",
          "5: CayenneLPP::CayenneLPP(uint8_t size) : maxsize(size) {",
          "6:     buffer = (uint8_t*) malloc(size);",
          "7:     cursor = 0;",
          "8: }",
          "10: CayenneLPP::~CayenneLPP(void) {",
          "11:     free(buffer);",
          "12: }",
          "14: void CayenneLPP::reset(void) {",
          "15:     cursor = 0;",
          "16: }",
          "18: uint8_t CayenneLPP::getSize(void) {",
          "19:     return cursor;",
          "20: }",
          "22: uint8_t* CayenneLPP::getBuffer(void) {",
          "26:     return buffer;",
          "27: }",
          "29: uint8_t CayenneLPP::copy(uint8_t* dst) {",
          "30:     memcpy(dst, buffer, cursor);",
          "31:     return cursor;",
          "32: }",
          "34: uint8_t CayenneLPP::addDigitalInput(uint8_t channel, uint8_t value) {",
          "35:     if ((cursor + LPP_DIGITAL_INPUT_SIZE) > maxsize) {",
          "36:         return 0;",
          "37:     }",
          "38:     buffer[cursor++] = channel;",
          "39:     buffer[cursor++] = LPP_DIGITAL_INPUT;",
          "40:     buffer[cursor++] = value;",
          "42:     return cursor;",
          "43: }",
          "45: uint8_t CayenneLPP::addDigitalOutput(uint8_t channel, uint8_t value) {",
          "46:     if ((cursor + LPP_DIGITAL_OUTPUT_SIZE) > maxsize) {",
          "47:         return 0;",
          "48:     }",
          "49:     buffer[cursor++] = channel;",
          "50:     buffer[cursor++] = LPP_DIGITAL_OUTPUT;",
          "51:     buffer[cursor++] = value;",
          "53:     return cursor;",
          "54: }",
          "56: uint8_t CayenneLPP::addAnalogInput(uint8_t channel, float value) {",
          "57:     if ((cursor + LPP_ANALOG_INPUT_SIZE) > maxsize) {",
          "58:         return 0;",
          "59:     }",
          "61:     int16_t val = value * 100;",
          "62:     buffer[cursor++] = channel;",
          "63:     buffer[cursor++] = LPP_ANALOG_INPUT;",
          "64:     buffer[cursor++] = val >> 8;",
          "65:     buffer[cursor++] = val;",
          "67:     return cursor;",
          "68: }",
          "70: uint8_t CayenneLPP::addAnalogOutput(uint8_t channel, float value) {",
          "71:     if ((cursor + LPP_ANALOG_OUTPUT_SIZE) > maxsize) {",
          "72:         return 0;",
          "73:     }",
          "74:     int16_t val = value * 100;",
          "75:     buffer[cursor++] = channel;",
          "76:     buffer[cursor++] = LPP_ANALOG_OUTPUT;",
          "77:     buffer[cursor++] = val >> 8;",
          "78:     buffer[cursor++] = val;",
          "80:     return cursor;",
          "81: }",
          "83: uint8_t CayenneLPP::addLuminosity(uint8_t channel, uint16_t lux) {",
          "84:     if ((cursor + LPP_LUMINOSITY_SIZE) > maxsize) {",
          "85:         return 0;",
          "86:     }",
          "87:     buffer[cursor++] = channel;",
          "88:     buffer[cursor++] = LPP_LUMINOSITY;",
          "89:     buffer[cursor++] = lux >> 8;",
          "90:     buffer[cursor++] = lux;",
          "92:     return cursor;",
          "93: }",
          "95: uint8_t CayenneLPP::addPresence(uint8_t channel, uint8_t value) {",
          "96:     if ((cursor + LPP_PRESENCE_SIZE) > maxsize) {",
          "97:         return 0;",
          "98:     }",
          "99:     buffer[cursor++] = channel;",
          "100:     buffer[cursor++] = LPP_PRESENCE;",
          "101:     buffer[cursor++] = value;",
          "103:     return cursor;",
          "104: }",
          "106: uint8_t CayenneLPP::addTemperature(uint8_t channel, float celsius) {",
          "107:     if ((cursor + LPP_TEMPERATURE_SIZE) > maxsize) {",
          "108:         return 0;",
          "109:     }",
          "110:     int16_t val = celsius * 10;",
          "111:     buffer[cursor++] = channel;",
          "112:     buffer[cursor++] = LPP_TEMPERATURE;",
          "113:     buffer[cursor++] = val >> 8;",
          "114:     buffer[cursor++] = val;",
          "116:     return cursor;",
          "117: }",
          "119: uint8_t CayenneLPP::addRelativeHumidity(uint8_t channel, float rh) {",
          "120:     if ((cursor + LPP_RELATIVE_HUMIDITY_SIZE) > maxsize) {",
          "121:         return 0;",
          "122:     }",
          "123:     buffer[cursor++] = channel;",
          "124:     buffer[cursor++] = LPP_RELATIVE_HUMIDITY;",
          "125:     buffer[cursor++] = rh * 2;",
          "127:     return cursor;",
          "128: }",
          "130: uint8_t CayenneLPP::addAccelerometer(uint8_t channel, float x, float y, float z) {",
          "131:     if ((cursor + LPP_ACCELEROMETER_SIZE) > maxsize) {",
          "132:         return 0;",
          "133:     }",
          "134:     int16_t vx = x * 1000;",
          "135:     int16_t vy = y * 1000;",
          "136:     int16_t vz = z * 1000;",
          "138:     buffer[cursor++] = channel;",
          "139:     buffer[cursor++] = LPP_ACCELEROMETER;",
          "140:     buffer[cursor++] = vx >> 8;",
          "141:     buffer[cursor++] = vx;",
          "142:     buffer[cursor++] = vy >> 8;",
          "143:     buffer[cursor++] = vy;",
          "144:     buffer[cursor++] = vz >> 8;",
          "145:     buffer[cursor++] = vz;",
          "147:     return cursor;",
          "148: }",
          "150: uint8_t CayenneLPP::addBarometricPressure(uint8_t channel, float hpa) {",
          "151:     if ((cursor + LPP_BAROMETRIC_PRESSURE_SIZE) > maxsize) {",
          "152:         return 0;",
          "153:     }",
          "154:     int16_t val = hpa * 10;",
          "156:     buffer[cursor++] = channel;",
          "157:     buffer[cursor++] = LPP_BAROMETRIC_PRESSURE;",
          "158:     buffer[cursor++] = val >> 8;",
          "159:     buffer[cursor++] = val;",
          "161:     return cursor;",
          "162: }",
          "164: uint8_t CayenneLPP::addGyrometer(uint8_t channel, float x, float y, float z) {",
          "165:     if ((cursor + LPP_GYROMETER_SIZE) > maxsize) {",
          "166:         return 0;",
          "167:     }",
          "168:     int16_t vx = x * 100;",
          "169:     int16_t vy = y * 100;",
          "170:     int16_t vz = z * 100;",
          "172:     buffer[cursor++] = channel;",
          "173:     buffer[cursor++] = LPP_GYROMETER;",
          "174:     buffer[cursor++] = vx >> 8;",
          "175:     buffer[cursor++] = vx;",
          "176:     buffer[cursor++] = vy >> 8;",
          "177:     buffer[cursor++] = vy;",
          "178:     buffer[cursor++] = vz >> 8;",
          "179:     buffer[cursor++] = vz;",
          "181:     return cursor;",
          "182: }",
          "184: uint8_t CayenneLPP::addGPS(uint8_t channel, float latitude, float longitude, float meters) {",
          "185:     if ((cursor + LPP_GPS_SIZE) > maxsize) {",
          "186:         return 0;",
          "187:     }",
          "188:     int32_t lat = latitude * 10000;",
          "189:     int32_t lon = longitude * 10000;",
          "190:     int32_t alt = meters * 100;",
          "192:     buffer[cursor++] = channel;",
          "193:     buffer[cursor++] = LPP_GPS;",
          "195:     buffer[cursor++] = lat >> 16;",
          "196:     buffer[cursor++] = lat >> 8;",
          "197:     buffer[cursor++] = lat;",
          "198:     buffer[cursor++] = lon >> 16;",
          "199:     buffer[cursor++] = lon >> 8;",
          "200:     buffer[cursor++] = lon;",
          "201:     buffer[cursor++] = alt >> 16;",
          "202:     buffer[cursor++] = alt >> 8;",
          "203:     buffer[cursor++] = alt;",
          "205:     return cursor;",
          "206: }",
          "",
          "---------------"
        ],
        "hardware/cayenne_lpp/CayenneLPP.h||hardware/cayenne_lpp/CayenneLPP.h": [
          "File: hardware/cayenne_lpp/CayenneLPP.h -> hardware/cayenne_lpp/CayenneLPP.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #ifndef _CAYENNE_LPP_H_",
          "2: #define _CAYENNE_LPP_H_",
          "9: #define LPP_DIGITAL_INPUT       0       // 1 byte",
          "10: #define LPP_DIGITAL_OUTPUT      1       // 1 byte",
          "11: #define LPP_ANALOG_INPUT        2       // 2 bytes, 0.01 signed",
          "12: #define LPP_ANALOG_OUTPUT       3       // 2 bytes, 0.01 signed",
          "13: #define LPP_LUMINOSITY          101     // 2 bytes, 1 lux unsigned",
          "14: #define LPP_PRESENCE            102     // 1 byte, 1",
          "15: #define LPP_TEMPERATURE         103     // 2 bytes, 0.1\u00b0C signed",
          "16: #define LPP_RELATIVE_HUMIDITY   104     // 1 byte, 0.5% unsigned",
          "17: #define LPP_ACCELEROMETER       113     // 2 bytes per axis, 0.001G",
          "18: #define LPP_BAROMETRIC_PRESSURE 115     // 2 bytes 0.1 hPa Unsigned",
          "19: #define LPP_GYROMETER           134     // 2 bytes per axis, 0.01 \u00b0/s",
          "20: #define LPP_GPS                 136     // 3 byte lon/lat 0.0001 \u00b0, 3 bytes alt 0.01 meter",
          "24: #define LPP_DIGITAL_INPUT_SIZE       3       // 1 byte",
          "25: #define LPP_DIGITAL_OUTPUT_SIZE      3       // 1 byte",
          "26: #define LPP_ANALOG_INPUT_SIZE        4       // 2 bytes, 0.01 signed",
          "27: #define LPP_ANALOG_OUTPUT_SIZE       4       // 2 bytes, 0.01 signed",
          "28: #define LPP_LUMINOSITY_SIZE          4       // 2 bytes, 1 lux unsigned",
          "29: #define LPP_PRESENCE_SIZE            3       // 1 byte, 1",
          "30: #define LPP_TEMPERATURE_SIZE         4       // 2 bytes, 0.1\u00b0C signed",
          "31: #define LPP_RELATIVE_HUMIDITY_SIZE   3       // 1 byte, 0.5% unsigned",
          "32: #define LPP_ACCELEROMETER_SIZE       8       // 2 bytes per axis, 0.001G",
          "33: #define LPP_BAROMETRIC_PRESSURE_SIZE 4       // 2 bytes 0.1 hPa Unsigned",
          "34: #define LPP_GYROMETER_SIZE           8       // 2 bytes per axis, 0.01 \u00b0/s",
          "35: #define LPP_GPS_SIZE                 11      // 3 byte lon/lat 0.0001 \u00b0, 3 bytes alt 0.01 meter",
          "38: class CayenneLPP {",
          "39:     public:",
          "40:         CayenneLPP(uint8_t size);",
          "41:         ~CayenneLPP();",
          "43:         void reset(void);",
          "44:         uint8_t getSize(void);",
          "45:         uint8_t* getBuffer(void);",
          "46:         uint8_t copy(uint8_t* buffer);",
          "48:         uint8_t addDigitalInput(uint8_t channel, uint8_t value);",
          "49:         uint8_t addDigitalOutput(uint8_t channel, uint8_t value);",
          "51:         uint8_t addAnalogInput(uint8_t channel, float value);",
          "52:         uint8_t addAnalogOutput(uint8_t channel, float value);",
          "54:         uint8_t addLuminosity(uint8_t channel, uint16_t lux);",
          "55:         uint8_t addPresence(uint8_t channel, uint8_t value);",
          "56:         uint8_t addTemperature(uint8_t channel, float celsius);",
          "57:         uint8_t addRelativeHumidity(uint8_t channel, float rh);",
          "58:         uint8_t addAccelerometer(uint8_t channel, float x, float y, float z);",
          "59:         uint8_t addBarometricPressure(uint8_t channel, float hpa);",
          "60:         uint8_t addGyrometer(uint8_t channel, float x, float y, float z);",
          "61:         uint8_t addGPS(uint8_t channel, float latitude, float longitude, float meters);",
          "63:     private:",
          "64:         uint8_t *buffer;",
          "65:         uint8_t maxsize;",
          "66:         uint8_t cursor;",
          "69: };",
          "72: #endif",
          "",
          "---------------"
        ],
        "hardware/cayenne_lpp/CayenneLPP_Dec.cpp||hardware/cayenne_lpp/CayenneLPP_Dec.cpp": [
          "File: hardware/cayenne_lpp/CayenneLPP_Dec.cpp -> hardware/cayenne_lpp/CayenneLPP_Dec.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: #include \"stdafx.h\"",
          "15: #include \"CayenneLPP_Dec.h\"",
          "16: #include \"../../json/json.h\"",
          "19: Example Usage:",
          "20: CayenneLPP lpp(200);",
          "22: lpp.addTemperature(1, 10.4f);",
          "23: lpp.addTemperature(2, -23.5f);",
          "25: lpp.addDigitalInput(1, 0);",
          "26: lpp.addDigitalOutput(1, 1);",
          "28: lpp.addAnalogInput(1, 1.23f);",
          "29: lpp.addAnalogOutput(1, 3.45f);",
          "31: lpp.addLuminosity(1, 20304);",
          "32: lpp.addPresence(1, 1);",
          "33: lpp.addTemperature(3, 26.5f);",
          "34: lpp.addRelativeHumidity(1, 86.6f);",
          "35: lpp.addAccelerometer(1, 1.234f, -1.234f, 0.567f);",
          "36: lpp.addBarometricPressure(1, 1023.4f);",
          "37: lpp.addGyrometer(1, -12.34f, 45.56f, 89.01f);",
          "38: lpp.addGPS(1, 54.184668f, 7.886778f , -6.3f);",
          "41: Json::Value root;",
          "43: if (CayenneLPPDec::ParseLPP(lpp.getBuffer(), lpp.getSize(), root))",
          "44: {",
          "45:  std::cout << \"Found \" << root.size() << \" entries:\\n\\n\";",
          "46:  std::cout << root.toStyledString();",
          "47: }",
          "50: bool CayenneLPPDec::ParseLPP(const uint8_t *pBuffer, size_t Len, Json::Value &root)",
          "51: {",
          "52:  int iIndex = 0;",
          "53:  while (Len > 2)",
          "54:  {",
          "55:   uint8_t channel = pBuffer[0];",
          "56:   uint8_t lpp_type = pBuffer[1];",
          "58:   if (lpp_type == LPP_DIGITAL_INPUT) {",
          "59:    if (Len < LPP_DIGITAL_INPUT_SIZE)",
          "60:     return false;",
          "62:    root[iIndex][\"channel\"] = channel;",
          "63:    root[iIndex][\"type\"] = \"digital_input\";",
          "65:    root[iIndex++][\"value\"] = pBuffer[2];",
          "67:    pBuffer += LPP_DIGITAL_INPUT_SIZE;",
          "68:    Len -= LPP_DIGITAL_INPUT_SIZE;",
          "69:   }",
          "70:   else if (lpp_type == LPP_DIGITAL_OUTPUT) {",
          "71:    if (Len < LPP_DIGITAL_OUTPUT_SIZE)",
          "72:     return false;",
          "74:    root[iIndex][\"channel\"] = channel;",
          "75:    root[iIndex][\"type\"] = \"digital_output\";",
          "77:    root[iIndex++][\"value\"] = pBuffer[2];",
          "79:    pBuffer += LPP_DIGITAL_OUTPUT_SIZE;",
          "80:    Len -= LPP_DIGITAL_OUTPUT_SIZE;",
          "81:   }",
          "82:   else if (lpp_type == LPP_ANALOG_INPUT) {",
          "83:    if (Len < LPP_ANALOG_INPUT_SIZE)",
          "84:     return false;",
          "86:    root[iIndex][\"channel\"] = channel;",
          "87:    root[iIndex][\"type\"] = \"analog_input\";",
          "89:    float value = float((pBuffer[2] << 8) | pBuffer[3]) / 100.0f;",
          "90:    root[iIndex++][\"value\"] = value;",
          "92:    pBuffer += LPP_ANALOG_INPUT_SIZE;",
          "93:    Len -= LPP_ANALOG_INPUT_SIZE;",
          "94:   }",
          "95:   else if (lpp_type == LPP_ANALOG_OUTPUT) {",
          "96:    if (Len < LPP_ANALOG_OUTPUT_SIZE)",
          "97:     return false;",
          "99:    root[iIndex][\"channel\"] = channel;",
          "100:    root[iIndex][\"type\"] = \"analog_output\";",
          "102:    float value = float((pBuffer[2] << 8) | pBuffer[3]) / 100.0f;",
          "103:    root[iIndex++][\"value\"] = value;",
          "105:    pBuffer += LPP_ANALOG_OUTPUT_SIZE;",
          "106:    Len -= LPP_ANALOG_OUTPUT_SIZE;",
          "107:   }",
          "108:   else if (lpp_type == LPP_LUMINOSITY) {",
          "109:    if (Len < LPP_LUMINOSITY_SIZE)",
          "110:     return false;",
          "112:    root[iIndex][\"channel\"] = channel;",
          "113:    root[iIndex][\"type\"] = \"luminosity\";",
          "115:    uint16_t value = (pBuffer[2] << 8) | pBuffer[3];",
          "116:    root[iIndex++][\"value\"] = value;",
          "118:    pBuffer += LPP_LUMINOSITY_SIZE;",
          "119:    Len -= LPP_LUMINOSITY_SIZE;",
          "120:   }",
          "121:   else if (lpp_type == LPP_PRESENCE) {",
          "122:    if (Len < LPP_PRESENCE_SIZE)",
          "123:     return false;",
          "125:    root[iIndex][\"channel\"] = channel;",
          "126:    root[iIndex][\"type\"] = \"presence\";",
          "128:    root[iIndex++][\"value\"] = pBuffer[2];",
          "130:    pBuffer += LPP_PRESENCE_SIZE;",
          "131:    Len -= LPP_PRESENCE_SIZE;",
          "132:   }",
          "133:   else if (lpp_type == LPP_TEMPERATURE) {",
          "134:    if (Len < LPP_TEMPERATURE_SIZE)",
          "135:     return false;",
          "137:    root[iIndex][\"channel\"] = channel;",
          "138:    root[iIndex][\"type\"] = \"temp\";",
          "140:    float value = float(int16_t((pBuffer[2] << 8) | pBuffer[3])) / 10.0f;",
          "141:    root[iIndex++][\"value\"] = value;",
          "143:    pBuffer += LPP_TEMPERATURE_SIZE;",
          "144:    Len -= LPP_TEMPERATURE_SIZE;",
          "145:   }",
          "146:   else if (lpp_type == LPP_RELATIVE_HUMIDITY) {",
          "147:    if (Len < LPP_RELATIVE_HUMIDITY_SIZE)",
          "148:     return false;",
          "150:    root[iIndex][\"channel\"] = channel;",
          "151:    root[iIndex][\"type\"] = \"humidity\";",
          "153:    float value = float(pBuffer[2]) / 2.0f;",
          "154:    root[iIndex++][\"value\"] = value;",
          "156:    pBuffer += LPP_RELATIVE_HUMIDITY_SIZE;",
          "157:    Len -= LPP_RELATIVE_HUMIDITY_SIZE;",
          "158:   }",
          "159:   else if (lpp_type == LPP_ACCELEROMETER) {",
          "160:    if (Len < LPP_ACCELEROMETER_SIZE)",
          "161:     return false;",
          "163:    root[iIndex][\"channel\"] = channel;",
          "164:    root[iIndex][\"type\"] = \"accel\";",
          "166:    int16_t tvalue = (pBuffer[2] << 8) | pBuffer[3];",
          "167:    float value = float(tvalue) / 1000.0f;",
          "168:    root[iIndex][\"X\"] = value;",
          "169:    tvalue = (pBuffer[4] << 8) | pBuffer[5];",
          "170:    value = float(tvalue) / 1000.0f;",
          "171:    root[iIndex][\"Y\"] = value;",
          "172:    tvalue = (pBuffer[6] << 8) | pBuffer[7];",
          "173:    value = float(tvalue) / 1000.0f;",
          "174:    root[iIndex++][\"Z\"] = value;",
          "176:    pBuffer += LPP_ACCELEROMETER_SIZE;",
          "177:    Len -= LPP_ACCELEROMETER_SIZE;",
          "178:   }",
          "179:   else if (lpp_type == LPP_BAROMETRIC_PRESSURE) {",
          "180:    if (Len < LPP_BAROMETRIC_PRESSURE_SIZE)",
          "181:     return false;",
          "183:    root[iIndex][\"channel\"] = channel;",
          "184:    root[iIndex][\"type\"] = \"baro\";",
          "186:    float value = float(int16_t((pBuffer[2] << 8) | pBuffer[3])) / 10.0f;",
          "187:    root[iIndex++][\"value\"] = value;",
          "189:    pBuffer += LPP_BAROMETRIC_PRESSURE_SIZE;",
          "190:    Len -= LPP_BAROMETRIC_PRESSURE_SIZE;",
          "191:   }",
          "192:   else if (lpp_type == LPP_GYROMETER) {",
          "193:    if (Len < LPP_GYROMETER_SIZE)",
          "194:     return false;",
          "196:    root[iIndex][\"channel\"] = channel;",
          "197:    root[iIndex][\"type\"] = \"gyro\";",
          "199:    int16_t tvalue = (pBuffer[2] << 8) | pBuffer[3];",
          "200:    float value = float(tvalue) / 100.0f;",
          "201:    root[iIndex][\"X\"] = value;",
          "202:    tvalue = (pBuffer[4] << 8) | pBuffer[5];",
          "203:    value = float(tvalue) / 100.0f;",
          "204:    root[iIndex][\"Y\"] = value;",
          "205:    tvalue = (pBuffer[6] << 8) | pBuffer[7];",
          "206:    value = float(tvalue) / 100.0f;",
          "207:    root[iIndex++][\"Z\"] = value;",
          "209:    pBuffer += LPP_GYROMETER_SIZE;",
          "210:    Len -= LPP_GYROMETER_SIZE;",
          "211:   }",
          "212:   else if (lpp_type == LPP_GPS) {",
          "213:    if (Len < LPP_GPS_SIZE)",
          "214:     return false;",
          "216:    root[iIndex][\"channel\"] = channel;",
          "217:    root[iIndex][\"type\"] = \"gps\";",
          "219:    int32_t tvalue = (int32_t)(pBuffer[2] << 16) | (pBuffer[3] << 8) | pBuffer[4];",
          "220:    if ((pBuffer[2]&0xF0) == 0xF0)",
          "221:     tvalue |= 0xFF000000;",
          "222:    float value = float(tvalue) / 10000.0f;",
          "223:    root[iIndex][\"lat\"] = value;",
          "224:    tvalue = (pBuffer[5] << 16) | (pBuffer[6] << 8) | pBuffer[7];",
          "225:    if ((pBuffer[5] & 0xF0) == 0xF0)",
          "226:     tvalue |= 0xFF000000;",
          "227:    value = float(tvalue) / 10000.0f;",
          "228:    root[iIndex][\"lon\"] = value;",
          "229:    tvalue = (int32_t)((pBuffer[8] << 16) | (pBuffer[9] << 8) | pBuffer[10]);",
          "230:    if ((pBuffer[8] & 0xF0) == 0xF0)",
          "231:     tvalue |= 0xFF000000;",
          "232:    value = float(tvalue) / 100.0f;",
          "233:    root[iIndex++][\"alt\"] = value;",
          "235:    pBuffer += LPP_GPS_SIZE;",
          "236:    Len -= LPP_GPS_SIZE;",
          "237:   }",
          "238:   else {",
          "239:    return false;",
          "240:   }",
          "241:  }",
          "242:  return (Len==0);",
          "243: }",
          "",
          "---------------"
        ],
        "hardware/cayenne_lpp/CayenneLPP_Dec.h||hardware/cayenne_lpp/CayenneLPP_Dec.h": [
          "File: hardware/cayenne_lpp/CayenneLPP_Dec.h -> hardware/cayenne_lpp/CayenneLPP_Dec.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: #pragma once",
          "12: #include \"CayenneLPP.h\"",
          "14: namespace Json",
          "15: {",
          "16:  class Value;",
          "17: };",
          "19: class CayenneLPPDec",
          "20: {",
          "21: public:",
          "22:  static bool ParseLPP(const uint8_t *pBuffer, size_t Len, Json::Value &root);",
          "23: };",
          "",
          "---------------"
        ],
        "main/RFXNames.cpp||main/RFXNames.cpp": [
          "File: main/RFXNames.cpp -> main/RFXNames.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "170:  { HTYPE_WINDDELEN, \"Winddelen\" },",
          "171:  { HTYPE_TE923, \"TE923 USB Compatible Weather Station\" },",
          "172:  { HTYPE_Rego6XX, \"Rego 6XX USB/serial interface\" },",
          "174:  { HTYPE_DavisVantage, \"Davis Vantage Weather Station USB\" },",
          "175:  { HTYPE_VOLCRAFTCO20, \"Volcraft CO-20 USB air quality sensor\" },",
          "176:  { HTYPE_1WIRE, \"1-Wire (System)\" },",
          "",
          "[Removed Lines]",
          "173:  { HTYPE_FreeToUse, \"Can be used for a feature hardware class\" },",
          "",
          "[Added Lines]",
          "173:  { HTYPE_TTN_MQTT, \"The Things Network (MQTT/CayenneLPP) with LAN interface\" },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3613:  case HTYPE_ZIBLUETCP:",
          "3614:  case HTYPE_OnkyoAVTCP:",
          "3615:  case HTYPE_eHouseTCP:",
          "3616:   return true;",
          "3617:  default:",
          "3618:   return false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3616:  case HTYPE_TTN_MQTT:",
          "",
          "---------------"
        ],
        "main/RFXNames.h||main/RFXNames.h": [
          "File: main/RFXNames.h -> main/RFXNames.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:  HTYPE_YouLess,    //6",
          "107:  HTYPE_TE923,    //7",
          "108:  HTYPE_Rego6XX,    //8",
          "110:  HTYPE_DavisVantage,   //10",
          "111:  HTYPE_VOLCRAFTCO20,   //11",
          "112:  HTYPE_1WIRE,    //12",
          "",
          "[Removed Lines]",
          "109:  HTYPE_FreeToUse,   //9",
          "",
          "[Added Lines]",
          "109:  HTYPE_TTN_MQTT,    //9",
          "",
          "---------------"
        ],
        "main/WebServer.cpp||main/WebServer.cpp": [
          "File: main/WebServer.cpp -> main/WebServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1019: #endif",
          "1020:     if (ii == HTYPE_PythonPlugin)",
          "1021:      bDoAdd = false;",
          "1024:     if (bDoAdd)",
          "1025:      _htypes[Hardware_Type_Desc(ii)] = ii;",
          "1026:  }",
          "",
          "[Removed Lines]",
          "1022:     else if (ii == HTYPE_FreeToUse) //Safe to remove when you changed this type for a new hardware class!",
          "1023:      bDoAdd = false;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1489:     (htype == HTYPE_RFXLAN) || (htype == HTYPE_P1SmartMeterLAN) ||",
          "1490:     (htype == HTYPE_YouLess) || (htype == HTYPE_OpenThermGatewayTCP) || (htype == HTYPE_LimitlessLights) ||",
          "1491:     (htype == HTYPE_SolarEdgeTCP) || (htype == HTYPE_WOL) || (htype == HTYPE_S0SmartMeterTCP) || (htype == HTYPE_ECODEVICES) || (htype == HTYPE_Mochad) ||",
          "1493:     (htype == HTYPE_KMTronicTCP) || (htype == HTYPE_KMTronicUDP) || (htype == HTYPE_SOLARMAXTCP) || (htype == HTYPE_RelayNet) || (htype == HTYPE_SatelIntegra) || (htype == HTYPE_eHouseTCP) || (htype == HTYPE_RFLINKTCP) ||",
          "1494:     (htype == HTYPE_Comm5TCP || (htype == HTYPE_Comm5SMTCP) || (htype == HTYPE_CurrentCostMeterLAN)) ||",
          "1495:     (htype == HTYPE_NefitEastLAN) || (htype == HTYPE_DenkoviHTTPDevices) || (htype == HTYPE_DenkoviTCPDevices) || (htype == HTYPE_Ec3kMeterTCP) || (htype == HTYPE_MultiFun) || (htype == HTYPE_ZIBLUETCP) || (htype == HTYPE_OnkyoAVTCP)",
          "",
          "[Removed Lines]",
          "1492:     (htype == HTYPE_MySensorsTCP) || (htype == HTYPE_MySensorsMQTT) || (htype == HTYPE_MQTT) || (htype == HTYPE_FRITZBOX) || (htype == HTYPE_ETH8020) || (htype == HTYPE_Sterbox) ||",
          "",
          "[Added Lines]",
          "1490:     (htype == HTYPE_MySensorsTCP) || (htype == HTYPE_MySensorsMQTT) || (htype == HTYPE_MQTT) || (htype == HTYPE_TTN_MQTT) || (htype == HTYPE_FRITZBOX) || (htype == HTYPE_ETH8020) || (htype == HTYPE_Sterbox) ||",
          "",
          "---------------"
        ],
        "main/mainworker.cpp||main/mainworker.cpp": [
          "File: main/mainworker.cpp -> main/mainworker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "137: #include \"../hardware/eHouseTCP.h\"",
          "138: #include \"../hardware/EcoCompteur.h\"",
          "139: #include \"../hardware/Honeywell.h\"",
          "141: #include \"../notifications/NotificationHelper.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140: #include \"../hardware/TTNMQTT.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1065:  case HTYPE_EcoCompteur:",
          "1066:   pHardware = new CEcoCompteur(ID, Address, Port);",
          "1067:   break;",
          "1068:  }",
          "1070:  if (pHardware)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1070:  case HTYPE_TTN_MQTT:",
          "1072:   pHardware = new CTTNMQTT(ID, Address, Port, Username, Password, Filename);",
          "1073:   break;",
          "",
          "---------------"
        ],
        "msbuild/domoticz.vcxproj||msbuild/domoticz.vcxproj": [
          "File: msbuild/domoticz.vcxproj -> msbuild/domoticz.vcxproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "413:     <ClInclude Include=\"..\\hardware\\Arilux.h\" />",
          "414:     <ClInclude Include=\"..\\hardware\\ASyncTCP.h\" />",
          "415:     <ClInclude Include=\"..\\hardware\\AtagOne.h\" />",
          "416:     <ClInclude Include=\"..\\hardware\\Comm5Serial.h\" />",
          "417:     <ClInclude Include=\"..\\hardware\\Comm5SMTCP.h\" />",
          "418:     <ClInclude Include=\"..\\hardware\\Comm5TCP.h\" />",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "416:     <ClInclude Include=\"..\\hardware\\cayenne_lpp\\CayenneLPP.h\" />",
          "417:     <ClInclude Include=\"..\\hardware\\cayenne_lpp\\CayenneLPP_Dec.h\" />",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "534:     <ClInclude Include=\"..\\hardware\\Tellstick.h\" />",
          "535:     <ClInclude Include=\"..\\hardware\\Thermosmart.h\" />",
          "536:     <ClInclude Include=\"..\\hardware\\ToonThermostat.h\" />",
          "537:     <ClInclude Include=\"..\\hardware\\USBtin.h\" />",
          "538:     <ClInclude Include=\"..\\hardware\\USBtin_MultiblocV8.h\" />",
          "539:     <ClInclude Include=\"..\\hardware\\VolcraftCO20.h\" />",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "539:     <ClInclude Include=\"..\\hardware\\TTNMQTT.h\" />",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "695:     <ClCompile Include=\"..\\hardware\\ASyncSerial.cpp\" />",
          "696:     <ClCompile Include=\"..\\hardware\\ASyncTCP.cpp\" />",
          "697:     <ClCompile Include=\"..\\hardware\\AtagOne.cpp\" />",
          "698:     <ClCompile Include=\"..\\hardware\\ColorSwitch.cpp\" />",
          "699:     <ClCompile Include=\"..\\hardware\\Comm5Serial.cpp\" />",
          "700:     <ClCompile Include=\"..\\hardware\\Comm5SMTCP.cpp\" />",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "701:     <ClCompile Include=\"..\\hardware\\cayenne_lpp\\CayenneLPP_Dec.cpp\" />",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "827:     <ClCompile Include=\"..\\hardware\\Tellstick.cpp\" />",
          "828:     <ClCompile Include=\"..\\hardware\\Thermosmart.cpp\" />",
          "829:     <ClCompile Include=\"..\\hardware\\ToonThermostat.cpp\" />",
          "830:     <ClCompile Include=\"..\\hardware\\USBtin.cpp\" />",
          "831:     <ClCompile Include=\"..\\hardware\\USBtin_MultiblocV8.cpp\" />",
          "832:     <ClCompile Include=\"..\\hardware\\VolcraftCO20.cpp\" />",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "834:     <ClCompile Include=\"..\\hardware\\TTNMQTT.cpp\" />",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1418:   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />",
          "1419:   <ImportGroup Label=\"ExtensionTargets\">",
          "1420:   </ImportGroup>",
          "",
          "[Removed Lines]",
          "1421: </Project>",
          "",
          "[Added Lines]",
          "1426: </Project>",
          "",
          "---------------"
        ],
        "msbuild/domoticz.vcxproj.filters||msbuild/domoticz.vcxproj.filters": [
          "File: msbuild/domoticz.vcxproj.filters -> msbuild/domoticz.vcxproj.filters",
          "--- Hunk 1 ---",
          "[Context before]",
          "492:     <Filter Include=\"Devices\\Tado\">",
          "493:       <UniqueIdentifier>{5905109f-f97e-4e18-a1dd-8baf541d6f13}</UniqueIdentifier>",
          "494:     </Filter>",
          "495:   </ItemGroup>",
          "496:   <ItemGroup>",
          "497:     <None Include=\"..\\CMakeLists.txt\">",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "495:     <Filter Include=\"Devices\\The Things Network\">",
          "496:       <UniqueIdentifier>{e0229d23-0d03-456e-8b42-ef664c588bde}</UniqueIdentifier>",
          "497:     </Filter>",
          "498:     <Filter Include=\"Devices\\The Things Network\\CayenneLPP\">",
          "499:       <UniqueIdentifier>{a5d41479-757d-4c56-bc6c-2943c4ada95a}</UniqueIdentifier>",
          "500:     </Filter>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1909:     <ClInclude Include=\"..\\hardware\\S0MeterTCP.h\">",
          "1910:       <Filter>Devices\\S0 Meter</Filter>",
          "1911:     </ClInclude>",
          "1915:     <ClInclude Include=\"..\\hardware\\AccuWeather.h\">",
          "1916:       <Filter>Devices\\AccuWeather</Filter>",
          "1917:     </ClInclude>",
          "",
          "[Removed Lines]",
          "1912:     <ClInclude Include=\"..\\hardware\\DenkoviSmartdenLan.h\">",
          "1913:       <Filter>Devices\\Denkovi</Filter>",
          "1914:     </ClInclude>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2029:     <ClInclude Include=\"..\\main\\IFTTT.h\">",
          "2030:       <Filter>IFTTT</Filter>",
          "2031:     </ClInclude>",
          "2035:     <ClInclude Include=\"..\\hardware\\USBtin.h\">",
          "2036:       <Filter>Devices\\USBtin</Filter>",
          "2037:     </ClInclude>",
          "",
          "[Removed Lines]",
          "2032:     <ClInclude Include=\"..\\hardware\\DenkoviSmartdenIPInOut.h\">",
          "2033:       <Filter>Devices\\Denkovi</Filter>",
          "2034:     </ClInclude>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2110:     <ClInclude Include=\"..\\main\\Noncopyable.h\">",
          "2111:       <Filter>Header Files</Filter>",
          "2112:     </ClInclude>",
          "2113:   </ItemGroup>",
          "2114:   <ItemGroup>",
          "2115:     <ClCompile Include=\"..\\webserver\\Base64.cpp\">",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2113:     <ClInclude Include=\"..\\hardware\\DenkoviTCPDevices.h\">",
          "2114:       <Filter>Header Files</Filter>",
          "2115:     </ClInclude>",
          "2116:     <ClInclude Include=\"..\\hardware\\DenkoviUSBDevices.h\">",
          "2117:       <Filter>Header Files</Filter>",
          "2118:     </ClInclude>",
          "2119:     <ClInclude Include=\"..\\hardware\\TTNMQTT.h\">",
          "2120:       <Filter>Devices\\The Things Network</Filter>",
          "2121:     </ClInclude>",
          "2122:     <ClInclude Include=\"..\\hardware\\cayenne_lpp\\CayenneLPP_Dec.h\">",
          "2123:       <Filter>Devices\\The Things Network\\CayenneLPP</Filter>",
          "2124:     </ClInclude>",
          "2125:     <ClInclude Include=\"..\\hardware\\cayenne_lpp\\CayenneLPP.h\">",
          "2126:       <Filter>Devices\\The Things Network\\CayenneLPP</Filter>",
          "2127:     </ClInclude>",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2685:     <ClCompile Include=\"..\\hardware\\S0MeterTCP.cpp\">",
          "2686:       <Filter>Devices\\S0 Meter</Filter>",
          "2687:     </ClCompile>",
          "2691:     <ClCompile Include=\"..\\hardware\\AccuWeather.cpp\">",
          "2692:       <Filter>Devices\\AccuWeather</Filter>",
          "2693:     </ClCompile>",
          "",
          "[Removed Lines]",
          "2688:     <ClCompile Include=\"..\\hardware\\DenkoviSmartdenLan.cpp\">",
          "2689:       <Filter>Devices\\Denkovi</Filter>",
          "2690:     </ClCompile>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2799:     <ClCompile Include=\"..\\main\\IFTTT.cpp\">",
          "2800:       <Filter>IFTTT</Filter>",
          "2801:     </ClCompile>",
          "2805:     <ClCompile Include=\"..\\hardware\\USBtin.cpp\">",
          "2806:       <Filter>Devices\\USBtin</Filter>",
          "2807:     </ClCompile>",
          "",
          "[Removed Lines]",
          "2802:     <ClCompile Include=\"..\\hardware\\DenkoviSmartdenIPInOut.cpp\">",
          "2803:       <Filter>Devices\\Denkovi</Filter>",
          "2804:     </ClCompile>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2874:     <ClCompile Include=\"..\\zip\\unzip.c\">",
          "2875:       <Filter>zip\\Base</Filter>",
          "2876:     </ClCompile>",
          "2877:   </ItemGroup>",
          "2878:   <ItemGroup>",
          "2879:     <ResourceCompile Include=\"domoticz.rc\">",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2886:     <ClCompile Include=\"..\\hardware\\DenkoviTCPDevices.cpp\">",
          "2887:       <Filter>Source Files</Filter>",
          "2888:     </ClCompile>",
          "2889:     <ClCompile Include=\"..\\hardware\\DenkoviUSBDevices.cpp\">",
          "2890:       <Filter>Source Files</Filter>",
          "2891:     </ClCompile>",
          "2892:     <ClCompile Include=\"..\\hardware\\TTNMQTT.cpp\">",
          "2893:       <Filter>Devices\\The Things Network</Filter>",
          "2894:     </ClCompile>",
          "2895:     <ClCompile Include=\"..\\hardware\\cayenne_lpp\\CayenneLPP_Dec.cpp\">",
          "2896:       <Filter>Devices\\The Things Network\\CayenneLPP</Filter>",
          "2897:     </ClCompile>",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4023:       <Filter>www\\media</Filter>",
          "4024:     </Media>",
          "4025:   </ItemGroup>",
          "",
          "[Removed Lines]",
          "4026: </Project>",
          "",
          "[Added Lines]",
          "4047: </Project>",
          "",
          "---------------"
        ],
        "www/app/HardwareController.js||www/app/HardwareController.js": [
          "File: www/app/HardwareController.js -> www/app/HardwareController.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "6133:     $(\"#hardwarecontent #divmysensorsmqtt\").show();",
          "6134:    }",
          "6135:    else if (text.indexOf(\"MQTT\") >= 0) {",
          "6137:    }",
          "6138:   }",
          "",
          "[Removed Lines]",
          "6136:     $(\"#hardwarecontent #divmqtt\").show();",
          "",
          "[Added Lines]",
          "6136:        $(\"#hardwarecontent #divmqtt\").show();",
          "6137:        if (text.indexOf(\"The Things Network (MQTT\") >= 0) {",
          "6138:            $(\"#hardwarecontent #divmqtt #mqtt_publish\").hide();",
          "6139:        }",
          "6140:        else {",
          "6141:            $(\"#hardwarecontent #divmqtt #mqtt_publish\").show();",
          "6142:        }",
          "",
          "---------------"
        ],
        "www/views/hardware.html||www/views/hardware.html": [
          "File: www/views/hardware.html -> www/views/hardware.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "1716:   <div id=\"divmqtt\">",
          "1717:    <br>",
          "1718:    <table class=\"display\" id=\"hardwareparamsmqtt\" border=\"0\" cellpadding=\"0\" cellspacing=\"20\">",
          "1720:      <td align=\"right\" style=\"width:110px\"><label for=\"combotopicselect\"><span data-i18n=\"Publish Topic\">Publish Topic</span>:</label></td>",
          "1721:      <td><select id=\"combotopicselect\" style=\"width:200px\" class=\"combobox ui-corner-all\">",
          "1722:       <option value=\"1\">out</option>",
          "",
          "[Removed Lines]",
          "1719:     <tr valign=\"top\">",
          "",
          "[Added Lines]",
          "1719:     <tr id=\"mqtt_publish\" valign=\"top\">",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cdd602038ad59cae92901a456cbbafb9d912df13",
      "candidate_info": {
        "commit_hash": "cdd602038ad59cae92901a456cbbafb9d912df13",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/cdd602038ad59cae92901a456cbbafb9d912df13",
        "files": [
          "hardware/plugins/PluginProtocols.cpp",
          "hardware/plugins/PluginProtocols.h"
        ],
        "message": "JSON Protocol now returns Python structured objects rather than text",
        "before_after_code_files": [
          "hardware/plugins/PluginProtocols.cpp||hardware/plugins/PluginProtocols.cpp",
          "hardware/plugins/PluginProtocols.h||hardware/plugins/PluginProtocols.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/plugins/PluginProtocols.cpp||hardware/plugins/PluginProtocols.cpp": [
          "File: hardware/plugins/PluginProtocols.cpp -> hardware/plugins/PluginProtocols.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #include \"../webserver/Base64.h\"",
          "13: #include \"icmp_header.hpp\"",
          "14: #include \"ipv4_header.hpp\"",
          "16: namespace Plugins {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: #include \"../json/json.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107:   m_sRetainedData.assign(sData.c_str(), sData.c_str() + sData.length()); // retain any residual for next time",
          "108:  }",
          "110:  void CPluginProtocolJSON::ProcessInbound(const ReadEvent* Message)",
          "111:  {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:  static void AddBytesToDict(PyObject* pDict, const char* key, const std::string &value)",
          "112:  {",
          "113:   PyObject* pObj = Py_BuildValue(\"y#\", value.c_str(), value.length());",
          "114:   if (PyDict_SetItemString(pDict, key, pObj) == -1)",
          "115:    _log.Log(LOG_ERROR, \"(%s) failed to add key '%s', value '%s' to dictionary.\", __func__, key, value.c_str());",
          "116:   Py_DECREF(pObj);",
          "117:  }",
          "119:  static void AddStringToDict(PyObject* pDict, const char* key, const std::string &value)",
          "120:  {",
          "121:   PyObject* pObj = Py_BuildValue(\"s#\", value.c_str(), value.length());",
          "122:   if (PyDict_SetItemString(pDict, key, pObj) == -1)",
          "123:    _log.Log(LOG_ERROR, \"(%s) failed to add key '%s', value '%s' to dictionary.\", __func__, key, value.c_str());",
          "124:   Py_DECREF(pObj);",
          "125:  }",
          "127:  static void AddIntToDict(PyObject* pDict, const char* key, const int value)",
          "128:  {",
          "129:   PyObject* pObj = Py_BuildValue(\"i\", value);",
          "130:   if (PyDict_SetItemString(pDict, key, pObj) == -1)",
          "131:    _log.Log(LOG_ERROR, \"(%s) failed to add key '%s', value '%d' to dictionary.\", __func__, key, value);",
          "132:   Py_DECREF(pObj);",
          "133:  }",
          "135:  static void AddUIntToDict(PyObject* pDict, const char* key, const unsigned int value)",
          "136:  {",
          "137:   PyObject* pObj = Py_BuildValue(\"I\", value);",
          "138:   if (PyDict_SetItemString(pDict, key, pObj) == -1)",
          "139:    _log.Log(LOG_ERROR, \"(%s) failed to add key '%s', value '%d' to dictionary.\", __func__, key, value);",
          "140:   Py_DECREF(pObj);",
          "141:  }",
          "143:  static void AddDoubleToDict(PyObject* pDict, const char* key, const double value)",
          "144:  {",
          "145:   PyObject* pObj = Py_BuildValue(\"d\", value);",
          "146:   if (PyDict_SetItemString(pDict, key, pObj) == -1)",
          "147:    _log.Log(LOG_ERROR, \"(%s) failed to add key '%s', value '%f' to dictionary.\", __func__, key, value);",
          "148:   Py_DECREF(pObj);",
          "149:  }",
          "151:  PyObject* CPluginProtocolJSON::JSONtoPython(Json::Value* pJSON)",
          "152:  {",
          "153:   PyObject* pRetVal = NULL;",
          "155:   if (pJSON->isArray())",
          "156:   {",
          "157:    pRetVal = PyList_New(pJSON->size());",
          "158:    Py_ssize_t Index = 0;",
          "159:    for (Json::ValueIterator it = pJSON->begin(); it != pJSON->end(); ++it)",
          "160:    {",
          "161:     Json::ValueIterator::reference pRef = *it;",
          "162:     if (it->isArray() || it->isObject())",
          "163:     {",
          "164:      PyObject* pObj = JSONtoPython(&pRef);",
          "165:      if (!pObj || (PyList_SetItem(pRetVal, Index++, pObj) == -1))",
          "166:       _log.Log(LOG_ERROR, \"(%s) failed to add item '%d', to list for object.\", __func__, Index - 1);",
          "167:     }",
          "168:     else if (it->isUInt())",
          "169:     {",
          "170:      PyObject* pObj = Py_BuildValue(\"I\", it->asUInt());",
          "171:      if (!pObj || (PyList_SetItem(pRetVal, Index++, pObj) == -1))",
          "172:       _log.Log(LOG_ERROR, \"(%s) failed to add item '%d', to list for unsigned integer.\", __func__, Index - 1);",
          "173:     }",
          "174:     else if (it->isInt())",
          "175:     {",
          "176:      PyObject* pObj = Py_BuildValue(\"i\", it->asInt());",
          "177:      if (!pObj || (PyList_SetItem(pRetVal, Index++, pObj) == -1))",
          "178:       _log.Log(LOG_ERROR, \"(%s) failed to add item '%d', to list for integer.\", __func__, Index - 1);",
          "179:     }",
          "180:     else if (it->isDouble())",
          "181:     {",
          "182:      PyObject* pObj = Py_BuildValue(\"d\", it->asDouble());",
          "183:      if (!pObj || (PyList_SetItem(pRetVal, Index++, pObj) == -1))",
          "184:       _log.Log(LOG_ERROR, \"(%s) failed to add item '%d', to list for double.\", __func__, Index - 1);",
          "185:     }",
          "186:     else if (it->isConvertibleTo(Json::stringValue))",
          "187:     {",
          "188:      std::string sString = it->asString();",
          "189:      PyObject* pObj = Py_BuildValue(\"s#\", sString.c_str(), sString.length());",
          "190:      if (!pObj || (PyList_SetItem(pRetVal, Index++, pObj) == -1))",
          "191:       _log.Log(LOG_ERROR, \"(%s) failed to add item '%d', to list for string.\", __func__, Index - 1);",
          "192:     }",
          "193:     else",
          "194:      _log.Log(LOG_ERROR, \"(%s) failed to process entry.\", __func__);",
          "195:    }",
          "196:   }",
          "197:   else if (pJSON->isObject())",
          "198:   {",
          "199:    pRetVal = PyDict_New();",
          "200:    for (Json::ValueIterator it = pJSON->begin(); it != pJSON->end(); ++it)",
          "201:    {",
          "202:     std::string      KeyName = it.name();",
          "203:     Json::ValueIterator::reference pRef = *it;",
          "204:     if (it->isArray() || it->isObject())",
          "205:     {",
          "206:      PyObject* pObj = JSONtoPython(&pRef);",
          "207:      if (!pObj || (PyDict_SetItemString(pRetVal, KeyName.c_str(), pObj) == -1))",
          "208:       _log.Log(LOG_ERROR, \"(%s) failed to add key '%s', to dictionary for object.\", __func__, KeyName.c_str());",
          "209:     }",
          "210:     else if (it->isUInt()) AddUIntToDict(pRetVal, KeyName.c_str(), it->asUInt());",
          "211:     else if (it->isInt()) AddIntToDict(pRetVal, KeyName.c_str(), it->asInt());",
          "212:     else if (it->isDouble()) AddDoubleToDict(pRetVal, KeyName.c_str(), it->asDouble());",
          "213:     else if (it->isConvertibleTo(Json::stringValue)) AddStringToDict(pRetVal, KeyName.c_str(), it->asString());",
          "214:     else _log.Log(LOG_ERROR, \"(%s) failed to process entry for '%s'.\", __func__, KeyName.c_str());",
          "215:    }",
          "216:   }",
          "217:   return pRetVal;",
          "218:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "118:   std::string  sData(vData.begin(), vData.end());",
          "119:   int iPos = 1;",
          "120:   while (iPos) {",
          "121:    iPos = sData.find(\"}{\", 0) + 1;  //  Look for message separater in case there is more than one",
          "122:    if (!iPos) // no, just one or part of one",
          "123:    {",
          "124:     if ((sData.substr(sData.length() - 1, 1) == \"}\") &&",
          "125:      (std::count(sData.begin(), sData.end(), '{') == std::count(sData.begin(), sData.end(), '}'))) // whole message so queue the whole buffer",
          "126:     {",
          "128:      sData.clear();",
          "129:     }",
          "130:    }",
          "",
          "[Removed Lines]",
          "127:      Message->m_pPlugin->MessagePlugin(new onMessageCallback(Message->m_pPlugin, Message->m_pConnection, sData));",
          "",
          "[Added Lines]",
          "231:    Json::Reader jReader;",
          "232:    Json::Value  root;",
          "239:      bool bRet = jReader.parse(sData, root);",
          "240:      if ((!bRet) || (!root.isObject()))",
          "241:      {",
          "242:       _log.Log(LOG_ERROR, \"JSON Protocol: Parse Error on '%s'\", sData.c_str());",
          "243:       Message->m_pPlugin->MessagePlugin(new onMessageCallback(Message->m_pPlugin, Message->m_pConnection, sData));",
          "244:      }",
          "245:      else",
          "246:      {",
          "247:       PyObject* pMessage = JSONtoPython(&root);",
          "248:       Message->m_pPlugin->MessagePlugin(new onMessageCallback(Message->m_pPlugin, Message->m_pConnection, pMessage));",
          "249:      }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "132:    {",
          "133:     std::string sMessage = sData.substr(0, iPos);",
          "134:     sData = sData.substr(iPos);",
          "136:    }",
          "137:   }",
          "",
          "[Removed Lines]",
          "135:     Message->m_pPlugin->MessagePlugin(new onMessageCallback(Message->m_pPlugin, Message->m_pConnection, sMessage));",
          "",
          "[Added Lines]",
          "257:     bool bRet = jReader.parse(sMessage, root);",
          "258:     if ((!bRet) || (!root.isObject()))",
          "259:     {",
          "260:      _log.Log(LOG_ERROR, \"JSON Protocol: Parse Error on '%s'\", sData.c_str());",
          "261:      Message->m_pPlugin->MessagePlugin(new onMessageCallback(Message->m_pPlugin, Message->m_pConnection, sMessage));",
          "262:     }",
          "263:     else",
          "264:     {",
          "265:      PyObject* pMessage = JSONtoPython(&root);",
          "266:      Message->m_pPlugin->MessagePlugin(new onMessageCallback(Message->m_pPlugin, Message->m_pConnection, pMessage));",
          "267:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "255:   }",
          "256:  }",
          "282:  void CPluginProtocolHTTP::ProcessInbound(const ReadEvent* Message)",
          "283:  {",
          "284:   m_sRetainedData.insert(m_sRetainedData.end(), Message->m_Buffer.begin(), Message->m_Buffer.end());",
          "",
          "[Removed Lines]",
          "258: static void AddBytesToDict(PyObject* pDict, const char* key, const std::string &value)",
          "259: {",
          "260:  PyObject* pObj = Py_BuildValue(\"y#\", value.c_str(), value.length());",
          "261:  if (PyDict_SetItemString(pDict, key, pObj) == -1)",
          "262:   _log.Log(LOG_ERROR, \"(%s) failed to add key '%s', value '%s' to dictionary.\", __func__, key, value.c_str());",
          "263:  Py_DECREF(pObj);",
          "264: }",
          "266: static void AddStringToDict(PyObject* pDict, const char* key, const std::string &value)",
          "267: {",
          "268:  PyObject* pObj = Py_BuildValue(\"s#\", value.c_str(), value.length());",
          "269:  if (PyDict_SetItemString(pDict, key, pObj) == -1)",
          "270:   _log.Log(LOG_ERROR, \"(%s) failed to add key '%s', value '%s' to dictionary.\", __func__, key, value.c_str());",
          "271:  Py_DECREF(pObj);",
          "272: }",
          "274: static void AddIntToDict(PyObject* pDict, const char* key, const int value)",
          "275: {",
          "276:  PyObject* pObj = Py_BuildValue(\"i\", value);",
          "277:  if (PyDict_SetItemString(pDict, key, pObj) == -1)",
          "278:   _log.Log(LOG_ERROR, \"(%s) failed to add key '%s', value '%d' to dictionary.\", __func__, key, value);",
          "279:  Py_DECREF(pObj);",
          "280: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hardware/plugins/PluginProtocols.h||hardware/plugins/PluginProtocols.h": [
          "File: hardware/plugins/PluginProtocols.h -> hardware/plugins/PluginProtocols.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:  class CPluginProtocolJSON : CPluginProtocol",
          "38:  {",
          "39:   virtual void ProcessInbound(const ReadEvent* Message);",
          "40:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:  private:",
          "40:   PyObject * JSONtoPython(Json::Value * pJSON);",
          "41:  public:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fb60a00be52c46ac42d83d04d63b39000e28b428",
      "candidate_info": {
        "commit_hash": "fb60a00be52c46ac42d83d04d63b39000e28b428",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/fb60a00be52c46ac42d83d04d63b39000e28b428",
        "files": [
          "Config/aeotec/zw122.xml",
          "Config/ge/28169-plugin-switch.xml",
          "Config/manufacturer_specific.xml",
          "Config/qubino/ZMNHLDx.xml",
          "Config/shenzen_neo/nas-pd02z.xml",
          "Config/thermofloor/heatit033.xml",
          "Config/zipato/RGBBulb2.xml",
          "hardware/openzwave/command_classes/ZWavePlusInfo.h",
          "msbuild/Debug/OpenZWaved.dll"
        ],
        "message": "Updated OZW configuration files",
        "before_after_code_files": [
          "hardware/openzwave/command_classes/ZWavePlusInfo.h||hardware/openzwave/command_classes/ZWavePlusInfo.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/openzwave/command_classes/ZWavePlusInfo.h||hardware/openzwave/command_classes/ZWavePlusInfo.h": [
          "File: hardware/openzwave/command_classes/ZWavePlusInfo.h -> hardware/openzwave/command_classes/ZWavePlusInfo.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:   virtual ~ZWavePlusInfo(){}",
          "43:   static uint8 const StaticGetCommandClassId(){ return 0x5E; }",
          "47:   virtual bool RequestState( uint32 const _requestFlags, uint8 const _instance, Driver::MsgQueue const _queue );",
          "",
          "[Removed Lines]",
          "44:   static string const StaticGetCommandClassName(){ return \"COMMAND_CLASS_ZWAVE_PLUS_INFO\"; }",
          "",
          "[Added Lines]",
          "44:   static string const StaticGetCommandClassName(){ return \"COMMAND_CLASS_ZWAVEPLUS_INFO\"; }",
          "",
          "---------------"
        ]
      }
    }
  ]
}