{
  "cve_id": "CVE-2017-16358",
  "cve_desc": "In radare 2.0.1, an out-of-bounds read vulnerability exists in string_scan_range() in libr/bin/bin.c when doing a string search.",
  "repo": "radare/radare2",
  "patch_hash": "d31c4d3cbdbe01ea3ded16a584de94149ecd31d9",
  "patch_info": {
    "commit_hash": "d31c4d3cbdbe01ea3ded16a584de94149ecd31d9",
    "repo": "radare/radare2",
    "commit_url": "https://github.com/radare/radare2/commit/d31c4d3cbdbe01ea3ded16a584de94149ecd31d9",
    "files": [
      "libr/bin/bin.c"
    ],
    "message": "Fix #8748 - Fix oobread on string search",
    "before_after_code_files": [
      "libr/bin/bin.c||libr/bin/bin.c"
    ]
  },
  "patch_diff": {
    "libr/bin/bin.c||libr/bin/bin.c": [
      "File: libr/bin/bin.c -> libr/bin/bin.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "353:     switch (str_type) {",
      "354:     case R_STRING_TYPE_WIDE:",
      "357:       if (p[0] == 0xff && p[1] == 0xfe) {",
      "358:        str_start -= 2; // \\xff\\xfe",
      "359:       }",
      "360:      }",
      "361:      break;",
      "362:     case R_STRING_TYPE_WIDE32:",
      "365:       if (p[0] == 0xff && p[1] == 0xfe) {",
      "366:        str_start -= 4; // \\xff\\xfe\\x00\\x00",
      "367:       }",
      "",
      "[Removed Lines]",
      "355:      {",
      "356:       const ut8 *p = buf  + str_start - 2;",
      "363:      {",
      "364:       const ut8 *p = buf  + str_start - 4;",
      "",
      "[Added Lines]",
      "355:      if (str_start > 1) {",
      "356:       const ut8 *p = buf + str_start - 2;",
      "363:      if (str_start > 3) {",
      "364:       const ut8 *p = buf + str_start - 4;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "74a5b55925c61b06206b9539cd756b71f5a39d76",
      "candidate_info": {
        "commit_hash": "74a5b55925c61b06206b9539cd756b71f5a39d76",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/74a5b55925c61b06206b9539cd756b71f5a39d76",
        "files": [
          "binr/rabin2/rabin2.c",
          "libr/bin/bin.c",
          "libr/core/cmd_info.c",
          "libr/include/r_bin.h"
        ],
        "message": "Honor *q in izzz",
        "before_after_code_files": [
          "binr/rabin2/rabin2.c||binr/rabin2/rabin2.c",
          "libr/bin/bin.c||libr/bin/bin.c",
          "libr/core/cmd_info.c||libr/core/cmd_info.c",
          "libr/include/r_bin.h||libr/include/r_bin.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/bin.c||libr/bin/bin.c"
          ],
          "candidate": [
            "libr/bin/bin.c||libr/bin/bin.c"
          ]
        }
      },
      "candidate_diff": {
        "binr/rabin2/rabin2.c||binr/rabin2/rabin2.c": [
          "File: binr/rabin2/rabin2.c -> binr/rabin2/rabin2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "992:  }",
          "993:  if (rawstr == 2) {",
          "994:   rawstr = false;",
          "996:  }",
          "997:  if (query) {",
          "998:   if (rad) {",
          "",
          "[Removed Lines]",
          "995:   r_bin_dump_strings (core.bin->cur, bin->minstrlen);",
          "",
          "[Added Lines]",
          "995:   RBinFile *bf = r_core_bin_cur (&core);",
          "996:   if (bf) {",
          "997:    bf->strmode = rad;",
          "998:    r_bin_dump_strings (bf, bin->minstrlen);",
          "999:   }",
          "",
          "---------------"
        ],
        "libr/bin/bin.c||libr/bin/bin.c": [
          "File: libr/bin/bin.c -> libr/bin/bin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "231:  return false;",
          "232: }",
          "235: #define R_STRING_SCAN_BUFFER_SIZE 2048",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "234: #define MODE_PRINT 0x000",
          "235: #define MODE_RADARE 0x001",
          "236: #define MODE_SIMPLE 0x004",
          "238: static void print_string(RBinString *string, RBinFile *bf) {",
          "239:  int mode = bf->strmode;",
          "240:  ut64 addr , vaddr;",
          "241:  RBin *bin = bf->rbin;",
          "242:  const char *section_name, *type_string;",
          "243:  RIOBind *iob;",
          "245:  if (!bin || !(iob = &(bin->iob))) {",
          "246:   return;",
          "247:  }",
          "248:  RIO *io = iob? iob->io: NULL;",
          "249:  if (!io) {",
          "250:   return;",
          "251:  }",
          "252:  RBinSection *s = r_bin_get_section_at (bf->o, string->paddr, false);",
          "253:  if (s) {",
          "254:   string->vaddr = s->vaddr + (string->paddr - s->paddr);",
          "255:  }",
          "256:  section_name = s ? s->name : \"\";",
          "257:  type_string = r_bin_string_type (string->type);",
          "258:  vaddr = addr = r_bin_get_vaddr (bin, string->paddr, string->vaddr);",
          "260:  switch(mode) {",
          "261:  case MODE_SIMPLE :",
          "262:   io->cb_printf (\"0x%08\" PFMT64x \" %s\\n\", addr, string->string);",
          "263:   break;",
          "264:  case MODE_RADARE :",
          "265:   {",
          "266:   char *f_name, *nstr;",
          "267:   f_name = strdup (string->string);",
          "268:   r_name_filter (f_name, 512);",
          "269:   if (bin->prefix) {",
          "270:    nstr = r_str_newf (\"%s.str.%s\", bin->prefix, f_name);",
          "271:    io->cb_printf (\"f %s.str.%s %\"PFMT64d\" @ 0x%08\"PFMT64x\"\\n\"",
          "272:      \"Cs %\"PFMT64d\" @ 0x%08\"PFMT64x\"\\n\",",
          "273:      bin->prefix, f_name, string->size, addr,",
          "274:      string->size, addr);",
          "275:   } else {",
          "276:    nstr = r_str_newf (\"str.%s\", f_name);",
          "277:    io->cb_printf (\"f str.%s %\"PFMT64d\" @ 0x%08\"PFMT64x\"\\n\"",
          "278:      \"Cs %\"PFMT64d\" @ 0x%08\"PFMT64x\"\\n\",",
          "279:      f_name, string->size, addr,",
          "280:      string->size, addr);",
          "281:   }",
          "282:   free (nstr);",
          "283:   free (f_name);",
          "284:   break;",
          "285:   }",
          "286:  case MODE_PRINT :",
          "287:   io->cb_printf (\"%03u 0x%08\"PFMT64x\" 0x%08\"",
          "288:     PFMT64x\" %3u %3u \"",
          "289:     \"(%s) %5s %s\\n\",",
          "290:     string->ordinal, string->paddr, vaddr,",
          "291:     string->length, string->size,",
          "292:     section_name, type_string, string->string);",
          "293:   break;",
          "294:  }",
          "295: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "350:      }",
          "351:     }",
          "352:    }",
          "370:      }",
          "378:      }",
          "380:     }",
          "383:     r_list_append (list, new);",
          "384:    } else {",
          "397:    }",
          "398:   }",
          "399:  }",
          "",
          "[Removed Lines]",
          "353:    if (list) {",
          "354:     RBinString *new = R_NEW0 (RBinString);",
          "355:     if (!new) {",
          "356:      break;",
          "357:     }",
          "358:     new->type = str_type;",
          "359:     new->length = runes;",
          "360:     new->size = needle - str_start;",
          "361:     new->ordinal = count++;",
          "363:     switch (str_type) {",
          "364:     case R_STRING_TYPE_WIDE:",
          "365:      if (str_start > 1) {",
          "366:       const ut8 *p = buf + str_start - 2;",
          "367:       if (p[0] == 0xff && p[1] == 0xfe) {",
          "368:        str_start -= 2; // \\xff\\xfe",
          "369:       }",
          "371:      break;",
          "372:     case R_STRING_TYPE_WIDE32:",
          "373:      if (str_start > 3) {",
          "374:       const ut8 *p = buf + str_start - 4;",
          "375:       if (p[0] == 0xff && p[1] == 0xfe) {",
          "376:        str_start -= 4; // \\xff\\xfe\\x00\\x00",
          "377:       }",
          "379:      break;",
          "381:     new->paddr = new->vaddr = str_start;",
          "382:     new->string = r_str_ndup ((const char *)tmp, i);",
          "386:     if (!bf->rbin || !(iob = &(bf->rbin->iob))) {",
          "387:      return false;",
          "388:     }",
          "389:     if (iob) {",
          "390:      io = iob->io;",
          "391:     }",
          "392:     if (io) {",
          "393:      io->cb_printf (\"0x%08\" PFMT64x \" %s\\n\", str_start, tmp);",
          "394:     } else {",
          "395:      return false;",
          "396:     }",
          "",
          "[Added Lines]",
          "417:    RBinString *new = R_NEW0 (RBinString);",
          "418:    if (!new) {",
          "419:     break;",
          "420:    }",
          "421:    new->type = str_type;",
          "422:    new->length = runes;",
          "423:    new->size = needle - str_start;",
          "424:    new->ordinal = count++;",
          "426:    switch (str_type) {",
          "427:    case R_STRING_TYPE_WIDE:",
          "428:     if (str_start > 1) {",
          "429:      const ut8 *p = buf + str_start - 2;",
          "430:      if (p[0] == 0xff && p[1] == 0xfe) {",
          "431:       str_start -= 2; // \\xff\\xfe",
          "433:     }",
          "434:     break;",
          "435:    case R_STRING_TYPE_WIDE32:",
          "436:     if (str_start > 3) {",
          "437:      const ut8 *p = buf + str_start - 4;",
          "438:      if (p[0] == 0xff && p[1] == 0xfe) {",
          "439:       str_start -= 4; // \\xff\\xfe\\x00\\x00",
          "442:     break;",
          "443:    }",
          "444:    new->paddr = new->vaddr = str_start;",
          "445:    new->string = r_str_ndup ((const char *)tmp, i);",
          "446:    if (list) {",
          "449:     print_string (new,bf);",
          "",
          "---------------"
        ],
        "libr/core/cmd_info.c||libr/core/cmd_info.c": [
          "File: libr/core/cmd_info.c -> libr/core/cmd_info.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "313:  RIODesc *desc = r_io_desc_get (core->io, fd);",
          "314:  int i, va = core->io->va || core->io->debug;",
          "315:  int mode = 0; //R_CORE_BIN_SIMPLE;",
          "316:  int is_array = 0;",
          "317:  Sdb *db;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "316:  bool rdump = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "644:    if (input[1] == 'z') { //izz",
          "645:     switch (input[2]) {",
          "646:     case 'z'://izzz",
          "658:     case '*':",
          "659:      mode = R_CORE_BIN_RADARE;",
          "660:      break;",
          "",
          "[Removed Lines]",
          "647:      {",
          "648:      RBinFile *bf = r_core_bin_cur (core);",
          "649:      int min = r_config_get_i (core->config, \"bin.minstr\");",
          "650:      if (bf) {",
          "651:       int tmp = bf->rawstr;",
          "652:       bf->rawstr = 2;",
          "653:       r_bin_dump_strings (bf, min);",
          "654:       bf->rawstr = tmp;",
          "655:      }",
          "656:      goto done;",
          "657:      }",
          "",
          "[Added Lines]",
          "648:      rdump = true;",
          "649:      break;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "674:      break;",
          "675:     }",
          "676:     input++;",
          "677:     RBININFO (\"strings\", R_CORE_BIN_ACC_RAW_STRINGS, NULL, 0);",
          "678:    } else {",
          "679:     RBinObject *obj = r_bin_cur_object (core->bin);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "669:     if (rdump) {",
          "670:      RBinFile *bf = r_core_bin_cur (core);",
          "671:      int min = r_config_get_i (core->config, \"bin.minstr\");",
          "672:      if (bf) {",
          "673:       int tmp = bf->rawstr;",
          "674:       bf->rawstr = 2;",
          "675:       bf->strmode = mode;",
          "676:       r_bin_dump_strings (bf, min);",
          "677:       bf->rawstr = tmp;",
          "678:      }",
          "679:      goto done;",
          "680:     }",
          "",
          "---------------"
        ],
        "libr/include/r_bin.h||libr/include/r_bin.h": [
          "File: libr/include/r_bin.h -> libr/include/r_bin.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "227:  int fd;",
          "228:  int size;",
          "229:  int rawstr;",
          "230:  ut32 id;",
          "231:  RBuffer *buf;",
          "232:  ut64 offset;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "230:  int strmode;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "69f9584095924b682456641d9743408c6e6d3dc5",
      "candidate_info": {
        "commit_hash": "69f9584095924b682456641d9743408c6e6d3dc5",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/69f9584095924b682456641d9743408c6e6d3dc5",
        "files": [
          "libr/bin/bin.c"
        ],
        "message": "Fix last covs",
        "before_after_code_files": [
          "libr/bin/bin.c||libr/bin/bin.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/bin.c||libr/bin/bin.c"
          ],
          "candidate": [
            "libr/bin/bin.c||libr/bin/bin.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/bin.c||libr/bin/bin.c": [
          "File: libr/bin/bin.c -> libr/bin/bin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "236: #define MODE_SIMPLE 0x004",
          "238: static void print_string(RBinString *string, RBinFile *bf) {",
          "239:  int mode = bf->strmode;",
          "240:  ut64 addr , vaddr;",
          "241:  RBin *bin = bf->rbin;",
          "242:  const char *section_name, *type_string;",
          "249:  if (!io) {",
          "250:   return;",
          "251:  }",
          "",
          "[Removed Lines]",
          "243:  RIOBind *iob;",
          "245:  if (!bin || !(iob = &(bin->iob))) {",
          "246:   return;",
          "247:  }",
          "248:  RIO *io = iob? iob->io: NULL;",
          "",
          "[Added Lines]",
          "239:  if (!string || !bf) {",
          "240:   return;",
          "241:  }",
          "246:  RIO *io = bin->iob.io;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "304:  ut64 str_start, needle = from;",
          "305:  int count = 0, i, rc, runes;",
          "306:  const ut8 *buf = r_buf_buffer (bf->buf);",
          "309:  int str_type = R_STRING_TYPE_DETECT;",
          "311:  if (type == -1) {",
          "",
          "[Removed Lines]",
          "307:  RIOBind *iob;",
          "308:  RIO *io;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "414:      }",
          "415:     }",
          "416:    }",
          "419:     break;",
          "420:    }",
          "426:    switch (str_type) {",
          "427:    case R_STRING_TYPE_WIDE:",
          "",
          "[Removed Lines]",
          "417:    RBinString *new = R_NEW0 (RBinString);",
          "418:    if (!new) {",
          "421:    new->type = str_type;",
          "422:    new->length = runes;",
          "423:    new->size = needle - str_start;",
          "424:    new->ordinal = count++;",
          "",
          "[Added Lines]",
          "413:    RBinString *bs = R_NEW0 (RBinString);",
          "414:    if (!bs) {",
          "417:    bs->type = str_type;",
          "418:    bs->length = runes;",
          "419:    bs->size = needle - str_start;",
          "420:    bs->ordinal = count++;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "441:     }",
          "442:     break;",
          "443:    }",
          "446:    if (list) {",
          "448:    } else {",
          "450:    }",
          "451:   }",
          "452:  }",
          "",
          "[Removed Lines]",
          "444:    new->paddr = new->vaddr = str_start;",
          "445:    new->string = r_str_ndup ((const char *)tmp, i);",
          "447:     r_list_append (list, new);",
          "449:     print_string (new,bf);",
          "",
          "[Added Lines]",
          "440:    bs->paddr = bs->vaddr = str_start;",
          "441:    bs->string = r_str_ndup ((const char *)tmp, i);",
          "443:     r_list_append (list, bs);",
          "445:     print_string (bs, bf);",
          "446:     r_bin_string_free (bs);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "457:  RBinPlugin *plugin = r_bin_file_cur_plugin (bf);",
          "458:  RBinString *ptr;",
          "459:  RListIter *it;",
          "462:  if (!bf || !bf->buf || !bf->buf->buf) {",
          "463:   return;",
          "",
          "[Removed Lines]",
          "460:  int type = -1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1d4499ebdc7e1b2e7ad7c2e86f5afc00414bd3a5",
      "candidate_info": {
        "commit_hash": "1d4499ebdc7e1b2e7ad7c2e86f5afc00414bd3a5",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/1d4499ebdc7e1b2e7ad7c2e86f5afc00414bd3a5",
        "files": [
          "libr/bin/bin.c",
          "libr/util/print.c"
        ],
        "message": "Detect utf32 (wide32) strings with rabin2 -z\n\n* Detect utf32 (wide32) strings with rabin2 -z\n* Make r_print_hexdump happy with NULL RPrint\n* Adjust wide string starting address if its starts with fffe\n* Fix regression on null bytes confusing utf32 strings detection",
        "before_after_code_files": [
          "libr/bin/bin.c||libr/bin/bin.c",
          "libr/util/print.c||libr/util/print.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/bin.c||libr/bin/bin.c"
          ],
          "candidate": [
            "libr/bin/bin.c||libr/bin/bin.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/bin.c||libr/bin/bin.c": [
          "File: libr/bin/bin.c -> libr/bin/bin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "226:  return false;",
          "227: }",
          "229: #define R_STRING_SCAN_BUFFER_SIZE 2048",
          "231: static int string_scan_range(RList *list, const ut8 *buf, int min,",
          "232:          const ut64 from, const ut64 to, int type) {",
          "233:  ut8 tmp[R_STRING_SCAN_BUFFER_SIZE];",
          "237:  if (type == -1) {",
          "238:   type = R_STRING_TYPE_DETECT;",
          "",
          "[Removed Lines]",
          "234:  ut64 needle = from, str_start;",
          "235:  int count = 0, i, rc, runes, str_type = R_STRING_TYPE_DETECT;",
          "",
          "[Added Lines]",
          "235:  ut64 str_start, needle = from;",
          "236:  int count = 0, i, rc, runes;",
          "237:  int str_type = R_STRING_TYPE_DETECT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "247:    continue;",
          "248:   }",
          "253:    char *w = (char *)buf + needle + rc;",
          "256:     if (is_wide32) {",
          "257:      str_type = R_STRING_TYPE_WIDE32;",
          "258:     } else {",
          "",
          "[Removed Lines]",
          "250:   str_type = type;",
          "252:   if (str_type == R_STRING_TYPE_DETECT) {",
          "254:    if ((to - needle) > 2) {",
          "255:     bool is_wide32 = needle + rc + 2 < to && !w[0] && !w[1] && !w[2] && w[3];",
          "",
          "[Added Lines]",
          "252:   if (type == R_STRING_TYPE_DETECT) {",
          "254:    if ((to - needle) > 4) {",
          "255:     bool is_wide32 = needle + rc + 2 < to && !w[0] && !w[1] && !w[2] && w[3] && !w[4];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "262:    } else {",
          "263:     str_type = R_STRING_TYPE_ASCII;",
          "264:    }",
          "265:   }",
          "267:   runes = 0;",
          "268:   str_start = needle;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265:   } else {",
          "266:    str_type = type;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "349:     new->length = runes;",
          "350:     new->size = needle - str_start;",
          "351:     new->ordinal = count++;",
          "352:     new->paddr = new->vaddr = str_start;",
          "353:     new->string = r_str_ndup ((const char *)tmp, i);",
          "354:     r_list_append (list, new);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "356:     switch (str_type) {",
          "357:     case R_STRING_TYPE_WIDE:",
          "358:      {",
          "359:       const ut8 *p = buf  + str_start - 2;",
          "360:       if (p[0] == 0xff && p[1] == 0xfe) {",
          "361:        str_start -= 2; // \\xff\\xfe",
          "362:       }",
          "363:      }",
          "364:      break;",
          "365:     case R_STRING_TYPE_WIDE32:",
          "366:      {",
          "367:       const ut8 *p = buf  + str_start - 4;",
          "368:       if (p[0] == 0xff && p[1] == 0xfe) {",
          "369:        str_start -= 4; // \\xff\\xfe\\x00\\x00",
          "370:       }",
          "371:      }",
          "372:      break;",
          "373:     }",
          "",
          "---------------"
        ],
        "libr/util/print.c||libr/util/print.c": [
          "File: libr/util/print.c -> libr/util/print.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "810:     printfmt (\"|\");",
          "811:    }",
          "814:     if (col != 2) {",
          "815:      printfmt (\" \");",
          "816:     }",
          "",
          "[Removed Lines]",
          "813:    if (p->use_comments && !compact) {",
          "",
          "[Added Lines]",
          "813:    if (p && p->use_comments && !compact) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "983:     }",
          "984:    }",
          "985:   }",
          "987:    for (; j < i + inc; j++) {",
          "988:     printfmt (\" \");",
          "989:    }",
          "",
          "[Removed Lines]",
          "986:   if (p->use_comments) {",
          "",
          "[Added Lines]",
          "986:   if (p && p->use_comments) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e8edb953045416b231d8e13af984dddfd587d29d",
      "candidate_info": {
        "commit_hash": "e8edb953045416b231d8e13af984dddfd587d29d",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/e8edb953045416b231d8e13af984dddfd587d29d",
        "files": [
          "libr/bin/bin.c",
          "libr/core/cbin.c",
          "libr/core/cconfig.c"
        ],
        "message": "Extend str.escbslash to work with iz (#8882)",
        "before_after_code_files": [
          "libr/bin/bin.c||libr/bin/bin.c",
          "libr/core/cbin.c||libr/core/cbin.c",
          "libr/core/cconfig.c||libr/core/cconfig.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/bin.c||libr/bin/bin.c"
          ],
          "candidate": [
            "libr/bin/bin.c||libr/bin/bin.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/bin.c||libr/bin/bin.c": [
          "File: libr/bin/bin.c -> libr/bin/bin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "301:    needle += rc;",
          "304:     if (str_type == R_STRING_TYPE_WIDE32) {",
          "305:      if (r == 0xff) {",
          "306:       r = 0;",
          "",
          "[Removed Lines]",
          "303:    if (r_isprint (r)) {",
          "",
          "[Added Lines]",
          "303:    if (r_isprint (r) && r != '\\\\') {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "309:     rc = r_utf8_encode (&tmp[i], r);",
          "310:     runes++;",
          "314:      tmp[i + 0] = '\\\\';",
          "316:     } else {",
          "318:      break;",
          "",
          "[Removed Lines]",
          "312:    } else if (r && r < 0x100 && strchr (\"\\b\\v\\f\\n\\r\\t\\a\\e\", (char)r)) {",
          "313:     if ((i + 32) < sizeof (tmp) && r < 28) {",
          "315:      tmp[i + 1] = \"       abtnvfr             e\"[r];",
          "",
          "[Added Lines]",
          "312:    } else if (r && r < 0x100 && strchr (\"\\b\\v\\f\\n\\r\\t\\a\\e\\\\\", (char)r)) {",
          "313:     if ((i + 32) < sizeof (tmp) && r < 93) {",
          "315:      tmp[i + 1] = \"       abtnvfr             e  \"",
          "316:                   \"                              \"",
          "317:                   \"                              \"",
          "318:                   \"  \\\\\"[r];",
          "",
          "---------------"
        ],
        "libr/core/cbin.c||libr/core/cbin.c": [
          "File: libr/core/cbin.c -> libr/core/cbin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "440:    free (f_name);",
          "441:   } else {",
          "442:    int *block_list;",
          "443:    r_cons_printf (\"vaddr=0x%08\"PFMT64x\" paddr=0x%08\"",
          "444:     PFMT64x\" ordinal=%03u sz=%u len=%u \"",
          "445:     \"section=%s type=%s string=%s\",",
          "446:     vaddr, paddr, string->ordinal, string->size,",
          "449:    switch (string->type) {",
          "450:    case R_STRING_TYPE_UTF8:",
          "451:    case R_STRING_TYPE_WIDE:",
          "",
          "[Removed Lines]",
          "447:     string->length, section_name, type_string,",
          "448:     string->string);",
          "",
          "[Added Lines]",
          "443:    char *str = string->string;",
          "444:    char *no_dbl_bslash_str = NULL;",
          "445:    if (!r->print->esc_bslash) {",
          "446:     char *ptr;",
          "447:     for (ptr = str; *ptr; ptr++) {",
          "448:      if (*ptr != '\\\\') {",
          "449:       continue;",
          "450:      }",
          "451:      if (*(ptr + 1) == '\\\\') {",
          "452:       if (!no_dbl_bslash_str) {",
          "453:        no_dbl_bslash_str = strdup (str);",
          "454:        if (!no_dbl_bslash_str) {",
          "455:         break;",
          "456:        }",
          "457:        ptr = no_dbl_bslash_str + (ptr - str);",
          "458:       }",
          "459:       memmove (ptr + 1, ptr + 2, strlen (ptr + 2) + 1);",
          "460:      }",
          "461:     }",
          "462:     if (no_dbl_bslash_str) {",
          "463:      str = no_dbl_bslash_str;",
          "464:     }",
          "465:    }",
          "470:     string->length, section_name, type_string, str);",
          "471:    if (str == no_dbl_bslash_str) {",
          "472:     R_FREE (str);",
          "473:    }",
          "",
          "---------------"
        ],
        "libr/core/cconfig.c||libr/core/cconfig.c": [
          "File: libr/core/cconfig.c -> libr/core/cconfig.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2684:  SETPREF (\"scr.histsave\", \"true\", \"Always save history on exit\");",
          "2690:  SETCB (\"search.contiguous\", \"true\", &cb_contiguous, \"Accept contiguous/adjacent search hits\");",
          "",
          "[Removed Lines]",
          "2687:  SETCB (\"str.escbslash\", \"false\", &cb_str_escbslash, \"Escape the backslash (Cs output only)\");",
          "",
          "[Added Lines]",
          "2687:  SETCB (\"str.escbslash\", \"false\", &cb_str_escbslash, \"Escape the backslash (iz and Cs-based output only)\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}