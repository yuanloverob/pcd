{
  "cve_id": "CVE-2016-7142",
  "cve_desc": "The m_sasl module in InspIRCd before 2.0.23, when used with a service that supports SASL_EXTERNAL authentication, allows remote attackers to spoof certificate fingerprints and consequently log in as another user via a crafted SASL message.",
  "repo": "inspircd/inspircd",
  "patch_hash": "74fafb7f11b06747f69f182ad5e3769b665eea7a",
  "patch_info": {
    "commit_hash": "74fafb7f11b06747f69f182ad5e3769b665eea7a",
    "repo": "inspircd/inspircd",
    "commit_url": "https://github.com/inspircd/inspircd/commit/74fafb7f11b06747f69f182ad5e3769b665eea7a",
    "files": [
      "src/modules/m_sasl.cpp"
    ],
    "message": "m_sasl: don't allow AUTHENTICATE with mechanisms with a space",
    "before_after_code_files": [
      "src/modules/m_sasl.cpp||src/modules/m_sasl.cpp"
    ]
  },
  "patch_diff": {
    "src/modules/m_sasl.cpp||src/modules/m_sasl.cpp": [
      "File: src/modules/m_sasl.cpp -> src/modules/m_sasl.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "189:   : Command(Creator, \"AUTHENTICATE\", 1), authExt(ext), cap(Cap)",
      "190:  {",
      "191:   works_before_reg = true;",
      "192:  }",
      "194:  CmdResult Handle (const std::vector<std::string>& parameters, User *user)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "192:   allow_empty_last_param = false;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "199:    if (!cap.ext.get(user))",
      "200:     return CMD_FAILURE;",
      "202:    SaslAuthenticator *sasl = authExt.get(user);",
      "203:    if (!sasl)",
      "204:     authExt.set(user, new SaslAuthenticator(user, parameters[0]));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "203:    if (parameters[0].find(' ') != std::string::npos || parameters[0][0] == ':')",
      "204:     return CMD_FAILURE;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c165759fbe0dc1c1632cd5369dd1550f28f45a3b",
      "candidate_info": {
        "commit_hash": "c165759fbe0dc1c1632cd5369dd1550f28f45a3b",
        "repo": "inspircd/inspircd",
        "commit_url": "https://github.com/inspircd/inspircd/commit/c165759fbe0dc1c1632cd5369dd1550f28f45a3b",
        "files": [
          "src/users.cpp"
        ],
        "message": "Fix users receiving a QUIT with themselves as source when host cycling in certain cases\n\nThe OnBuildNeighborList handler in m_auditorium can add the cycling user to the exceptions as an always send exception. To fix, remove the user from the exceptions before processing them.\n\nReported by @genius3000 on IRC",
        "before_after_code_files": [
          "src/users.cpp||src/users.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/inspircd/inspircd/pull/1337"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/users.cpp||src/users.cpp": [
          "File: src/users.cpp -> src/users.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1399:  FOREACH_MOD(I_OnBuildNeighborList,OnBuildNeighborList(this, include_c, exceptions));",
          "1401:  for (std::map<User*,bool>::iterator i = exceptions.begin(); i != exceptions.end(); ++i)",
          "1402:  {",
          "1403:   LocalUser* u = IS_LOCAL(i->first);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1402:  exceptions.erase(this);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "032077534232a4fa97736595bdfcfe3c8b9beb58",
      "candidate_info": {
        "commit_hash": "032077534232a4fa97736595bdfcfe3c8b9beb58",
        "repo": "inspircd/inspircd",
        "commit_url": "https://github.com/inspircd/inspircd/commit/032077534232a4fa97736595bdfcfe3c8b9beb58",
        "files": [
          "src/commands/cmd_who.cpp"
        ],
        "message": "cmd_who: don't show +p channels or channels hidden with m_hidechans\n\nFixes #1276",
        "before_after_code_files": [
          "src/commands/cmd_who.cpp||src/commands/cmd_who.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/inspircd/inspircd/pull/1337"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/commands/cmd_who.cpp||src/commands/cmd_who.cpp": [
          "File: src/commands/cmd_who.cpp -> src/commands/cmd_who.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: };",
          "62: {",
          "63:  UCListIter i = u->chans.begin();",
          "64:  while (i != u->chans.end())",
          "65:  {",
          "66:   Channel* c = *i++;",
          "68:    return c;",
          "69:  }",
          "70:  return NULL;",
          "",
          "[Removed Lines]",
          "61: static Channel* get_first_visible_channel(User *u)",
          "67:   if (!c->IsModeSet('s'))",
          "",
          "[Added Lines]",
          "61: static Channel* get_first_visible_channel(User *source, User *u)",
          "69:   if (source == u || !(c->IsModeSet('s') || c->IsModeSet('p') || u->IsModeSet('I')) || c->HasUser(source))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189: void CommandWho::SendWhoLine(User* user, const std::vector<std::string>& parms, const std::string &initial, Channel* ch, User* u, std::vector<std::string> &whoresults)",
          "190: {",
          "191:  if (!ch)",
          "194:  std::string wholine = initial + (ch ? ch->name : \"*\") + \" \" + u->ident + \" \" +",
          "195:   (opt_showrealhost ? u->host : u->dhost) + \" \";",
          "",
          "[Removed Lines]",
          "192:   ch = get_first_visible_channel(u);",
          "",
          "[Added Lines]",
          "194:   ch = get_first_visible_channel(user, u);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a92b6b7af463135ed5f84f0ed640b9416db684ef",
      "candidate_info": {
        "commit_hash": "a92b6b7af463135ed5f84f0ed640b9416db684ef",
        "repo": "inspircd/inspircd",
        "commit_url": "https://github.com/inspircd/inspircd/commit/a92b6b7af463135ed5f84f0ed640b9416db684ef",
        "files": [
          "src/modules/m_override.cpp"
        ],
        "message": "m_override: fix parentheses compiler warning",
        "before_after_code_files": [
          "src/modules/m_override.cpp||src/modules/m_override.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/inspircd/inspircd/pull/1337"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/modules/m_override.cpp||src/modules/m_override.cpp": [
          "File: src/modules/m_override.cpp -> src/modules/m_override.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:   {",
          "104:    if ((memb->chan->GetPrefixValue(source) < memb->getRank()) || (memb->chan->GetPrefixValue(source) <= VOICE_VALUE) ||",
          "106:    {",
          "107:     ServerInstance->SNO->WriteGlobalSno('v',source->nick+\" used oper override to kick \"+memb->user->nick+\" on \"+memb->chan->name+\" (\"+reason+\")\");",
          "108:     return MOD_RES_ALLOW;",
          "",
          "[Removed Lines]",
          "105:        (memb->chan->GetPrefixValue(source) == HALFOP_VALUE) && (memb->getRank() == HALFOP_VALUE))",
          "",
          "[Added Lines]",
          "105:        (memb->chan->GetPrefixValue(source) == HALFOP_VALUE && memb->getRank() == HALFOP_VALUE))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3f1eb79c7fa82737fda9c9a712724ba2f27651e9",
      "candidate_info": {
        "commit_hash": "3f1eb79c7fa82737fda9c9a712724ba2f27651e9",
        "repo": "inspircd/inspircd",
        "commit_url": "https://github.com/inspircd/inspircd/commit/3f1eb79c7fa82737fda9c9a712724ba2f27651e9",
        "files": [
          "src/modules/extra/m_ldapauth.cpp"
        ],
        "message": "m_ldapauth: fix providing username in PASS\n\nThis has never worked because it never prepended attribute= to the\nsearch string. It also would prefer matching nick/ident over the user\nstring provided which is inconsistent, since your ability to\nauthenticate using PASS would depend on a ldap entry not existing with\nyour current nick/ident.\n\nInstead, use username provided in PASS and then fallback to nick/ident.",
        "before_after_code_files": [
          "src/modules/extrm_ldapauth.cpp||src/modules/extra/m_ldapauth.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/inspircd/inspircd/pull/1337"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/modules/extrm_ldapauth.cpp||src/modules/extra/m_ldapauth.cpp": [
          "File: src/modules/extrm_ldapauth.cpp -> src/modules/extra/m_ldapauth.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "313:   std::string what;",
          "314:   std::string::size_type pos = user->password.find(':');",
          "316:   if (pos != std::string::npos)",
          "318:    what = (attribute + \"=\" + user->password.substr(0, pos));",
          "321:    user->password = user->password.substr(pos + 1);",
          "322:   }",
          "323:   else",
          "324:   {",
          "325:    what = (attribute + \"=\" + (useusername ? user->ident : user->nick));",
          "326:   }",
          "327:   if ((res = ldap_search_ext_s(conn, base.c_str(), searchscope, what.c_str(), NULL, 0, NULL, NULL, NULL, 0, &msg)) != LDAP_SUCCESS)",
          "328:   {",
          "329:    if (verbose)",
          "330:     ServerInstance->SNO->WriteToSnoMask('c', \"Forbidden connection from %s (LDAP search failed: %s)\", user->GetFullRealHost().c_str(), ldap_err2string(res));",
          "331:    return false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "396:     pos = dnPart.find('=');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ef23e4c07320fbbbf9d142878aae05a3e87eff0f",
      "candidate_info": {
        "commit_hash": "ef23e4c07320fbbbf9d142878aae05a3e87eff0f",
        "repo": "inspircd/inspircd",
        "commit_url": "https://github.com/inspircd/inspircd/commit/ef23e4c07320fbbbf9d142878aae05a3e87eff0f",
        "files": [
          "src/version.sh"
        ],
        "message": "Release v2.0.23",
        "before_after_code_files": [
          "src/version.sh||src/version.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/inspircd/inspircd/pull/1337"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/version.sh||src/version.sh": [
          "File: src/version.sh -> src/version.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/bin/sh",
          "",
          "[Removed Lines]",
          "2: echo \"InspIRCd-2.0.22\"",
          "",
          "[Added Lines]",
          "2: echo \"InspIRCd-2.0.23\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}