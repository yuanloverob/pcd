{
  "cve_id": "CVE-2022-29967",
  "cve_desc": "static_compressed_inmemory_website_callback.c in Glewlwyd through 2.6.2 allows directory traversal.",
  "repo": "babelouest/glewlwyd",
  "patch_hash": "e3f7245c33897bf9b3a75acfcdb8b7b93974bf11",
  "patch_info": {
    "commit_hash": "e3f7245c33897bf9b3a75acfcdb8b7b93974bf11",
    "repo": "babelouest/glewlwyd",
    "commit_url": "https://github.com/babelouest/glewlwyd/commit/e3f7245c33897bf9b3a75acfcdb8b7b93974bf11",
    "files": [
      "src/static_compressed_inmemory_website_callback.c",
      "src/static_compressed_inmemory_website_callback.h"
    ],
    "message": "Fix file access check for directory traversal, and fix call for callback_static_file_uncompressed if header not set",
    "before_after_code_files": [
      "src/static_compressed_inmemory_website_callback.c||src/static_compressed_inmemory_website_callback.c",
      "src/static_compressed_inmemory_website_callback.h||src/static_compressed_inmemory_website_callback.h"
    ]
  },
  "patch_diff": {
    "src/static_compressed_inmemory_website_callback.c||src/static_compressed_inmemory_website_callback.c": [
      "File: src/static_compressed_inmemory_website_callback.c -> src/static_compressed_inmemory_website_callback.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "90: #include <pthread.h>",
      "91: #include <zlib.h>",
      "92: #include <string.h>",
      "93: #include <ulfius.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "92: #include <limits.h>",
      "93: #include <stdlib.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "158: static int callback_static_file_uncompressed (const struct _u_request * request, struct _u_response * response, void * user_data) {",
      "159:   size_t length;",
      "160:   FILE * f;",
      "162:   const char * content_type;",
      "163:   int ret = U_CALLBACK_CONTINUE;",
      "",
      "[Removed Lines]",
      "161:   char * file_requested, * file_path, * url_dup_save;",
      "",
      "[Added Lines]",
      "163:   char * file_requested, * file_path, * url_dup_save, * real_path = NULL;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "185:     }",
      "187:     file_path = msprintf(\"%s/%s\", ((struct _u_compressed_inmemory_website_config *)user_data)->files_path, file_requested);",
      "209:       } else {",
      "212:       }",
      "213:     }",
      "214:     o_free(file_path);",
      "216:   } else {",
      "217:     y_log_message(Y_LOG_LEVEL_ERROR, \"Static File Server - Error, user_data is NULL or inconsistent\");",
      "218:     ret = U_CALLBACK_ERROR;",
      "",
      "[Removed Lines]",
      "189:     f = fopen (file_path, \"rb\");",
      "190:     if (f) {",
      "191:       fseek (f, 0, SEEK_END);",
      "192:       length = ftell (f);",
      "193:       fseek (f, 0, SEEK_SET);",
      "195:       content_type = u_map_get_case(&((struct _u_compressed_inmemory_website_config *)user_data)->mime_types, get_filename_ext(file_requested));",
      "196:       if (content_type == NULL) {",
      "197:         content_type = u_map_get(&((struct _u_compressed_inmemory_website_config *)user_data)->mime_types, \"*\");",
      "198:         y_log_message(Y_LOG_LEVEL_WARNING, \"Static File Server - Unknown mime type for extension %s\", get_filename_ext(file_requested));",
      "199:       }",
      "200:       u_map_put(response->map_header, \"Content-Type\", content_type);",
      "201:       u_map_copy_into(response->map_header, &((struct _u_compressed_inmemory_website_config *)user_data)->map_header);",
      "203:       if (ulfius_set_stream_response(response, 200, callback_static_file_uncompressed_stream, callback_static_file_uncompressed_stream_free, length, CHUNK, f) != U_OK) {",
      "204:         y_log_message(Y_LOG_LEVEL_ERROR, \"Static File Server - Error ulfius_set_stream_response\");",
      "205:       }",
      "206:     } else {",
      "207:       if (((struct _u_compressed_inmemory_website_config *)user_data)->redirect_on_404 == NULL) {",
      "208:         ret = U_CALLBACK_IGNORE;",
      "210:         ulfius_add_header_to_response(response, \"Location\", ((struct _u_compressed_inmemory_website_config *)user_data)->redirect_on_404);",
      "211:         response->status = 302;",
      "215:     o_free(url_dup_save);",
      "",
      "[Added Lines]",
      "190:     real_path = realpath(file_path, NULL);",
      "191:     if (0 == o_strncmp(((struct _u_compressed_inmemory_website_config *)user_data)->files_path, real_path, o_strlen(((struct _u_compressed_inmemory_website_config *)user_data)->files_path))) {",
      "192:       f = fopen (file_path, \"rb\");",
      "193:       if (f) {",
      "194:         fseek (f, 0, SEEK_END);",
      "195:         length = ftell (f);",
      "196:         fseek (f, 0, SEEK_SET);",
      "198:         content_type = u_map_get_case(&((struct _u_compressed_inmemory_website_config *)user_data)->mime_types, get_filename_ext(file_requested));",
      "199:         if (content_type == NULL) {",
      "200:           content_type = u_map_get(&((struct _u_compressed_inmemory_website_config *)user_data)->mime_types, \"*\");",
      "201:           y_log_message(Y_LOG_LEVEL_WARNING, \"Static File Server - Unknown mime type for extension %s\", get_filename_ext(file_requested));",
      "202:         }",
      "203:         u_map_put(response->map_header, \"Content-Type\", content_type);",
      "204:         u_map_copy_into(response->map_header, &((struct _u_compressed_inmemory_website_config *)user_data)->map_header);",
      "206:         if (ulfius_set_stream_response(response, 200, callback_static_file_uncompressed_stream, callback_static_file_uncompressed_stream_free, length, CHUNK, f) != U_OK) {",
      "207:           y_log_message(Y_LOG_LEVEL_ERROR, \"Static File Server - Error ulfius_set_stream_response\");",
      "208:         }",
      "210:         if (((struct _u_compressed_inmemory_website_config *)user_data)->redirect_on_404 == NULL) {",
      "211:           ret = U_CALLBACK_IGNORE;",
      "212:         } else {",
      "213:           ulfius_add_header_to_response(response, \"Location\", ((struct _u_compressed_inmemory_website_config *)user_data)->redirect_on_404);",
      "214:           response->status = 302;",
      "215:         }",
      "217:       o_free(url_dup_save);",
      "218:     } else {",
      "219:       response->status = 403;",
      "222:     free(real_path); // realpath uses malloc",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "290:   unsigned char * file_content, * file_content_orig = NULL;",
      "291:   size_t length, read_length, offset, data_zip_len = 0;",
      "292:   FILE * f;",
      "294:   const char * content_type;",
      "",
      "[Removed Lines]",
      "293:   char * file_requested, * file_path, * url_dup_save, * data_zip = NULL;",
      "",
      "[Added Lines]",
      "301:   char * file_requested, * file_path, * url_dup_save, * data_zip = NULL, * real_path = NULL;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "352:             u_map_copy_into(response->map_header, &config->map_header);",
      "353:           } else {",
      "354:             file_path = msprintf(\"%s/%s\", ((struct _u_compressed_inmemory_website_config *)user_data)->files_path, file_requested);",
      "401:                       }",
      "421:                           ret = U_CALLBACK_ERROR;",
      "422:                         }",
      "425:                       if (ret == U_CALLBACK_CONTINUE) {",
      "429:                           }",
      "434:                           }",
      "436:                         }",
      "438:                       }",
      "439:                     }",
      "442:                   } else {",
      "445:                   }",
      "447:                 }",
      "449:               } else {",
      "456:               }",
      "458:             } else {",
      "461:             }",
      "462:             o_free(file_path);",
      "463:           }",
      "464:         } else {",
      "465:           ret = callback_static_file_uncompressed(request, response, user_data);",
      "466:         }",
      "467:         free_string_array(accept_list);",
      "468:       }",
      "469:     }",
      "470:     o_free(url_dup_save);",
      "471:   }",
      "",
      "[Removed Lines]",
      "356:             if (!pthread_mutex_lock(&config->lock)) {",
      "357:               f = fopen (file_path, \"rb\");",
      "358:               if (f) {",
      "359:                 content_type = u_map_get_case(&config->mime_types, get_filename_ext(file_requested));",
      "360:                 if (content_type == NULL) {",
      "361:                   content_type = u_map_get(&config->mime_types, \"*\");",
      "362:                   y_log_message(Y_LOG_LEVEL_WARNING, \"Static File Server - Unknown mime type for extension %s\", get_filename_ext(file_requested));",
      "363:                 }",
      "364:                 if (!string_array_has_value((const char **)config->mime_types_compressed, content_type)) {",
      "365:                   compress_mode = U_COMPRESS_NONE;",
      "366:                 }",
      "368:                 u_map_put(response->map_header, \"Content-Type\", content_type);",
      "369:                 u_map_copy_into(response->map_header, &config->map_header);",
      "371:                 fseek (f, 0, SEEK_END);",
      "372:                 offset = length = ftell (f);",
      "373:                 fseek (f, 0, SEEK_SET);",
      "375:                 if (length) {",
      "376:                   if ((file_content_orig = file_content = o_malloc(length)) != NULL && (data_zip = o_malloc((2*length)+20)) != NULL) {",
      "377:                     defstream.zalloc = u_zalloc;",
      "378:                     defstream.zfree = u_zfree;",
      "379:                     defstream.opaque = Z_NULL;",
      "380:                     defstream.avail_in = (uInt)length;",
      "381:                     defstream.next_in = (Bytef *)file_content;",
      "382:                     while ((read_length = fread(file_content, sizeof(char), offset, f))) {",
      "383:                       file_content += read_length;",
      "384:                       offset -= read_length;",
      "385:                     }",
      "387:                     if (compress_mode == U_COMPRESS_GZIP) {",
      "388:                       if (deflateInit2(&defstream,",
      "389:                                        Z_DEFAULT_COMPRESSION,",
      "390:                                        Z_DEFLATED,",
      "391:                                        U_GZIP_WINDOW_BITS | U_GZIP_ENCODING,",
      "392:                                        8,",
      "393:                                        Z_DEFAULT_STRATEGY) != Z_OK) {",
      "394:                         y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error deflateInit (gzip)\");",
      "395:                         ret = U_CALLBACK_ERROR;",
      "396:                       }",
      "397:                     } else {",
      "398:                       if (deflateInit(&defstream, Z_BEST_COMPRESSION) != Z_OK) {",
      "399:                         y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error deflateInit (deflate)\");",
      "400:                         ret = U_CALLBACK_ERROR;",
      "402:                     }",
      "403:                     if (ret == U_CALLBACK_CONTINUE) {",
      "404:                       do {",
      "405:                         if ((data_zip = o_realloc(data_zip, data_zip_len+_U_W_BLOCK_SIZE)) != NULL) {",
      "406:                           defstream.avail_out = _U_W_BLOCK_SIZE;",
      "407:                           defstream.next_out = ((Bytef *)data_zip)+data_zip_len;",
      "408:                           switch ((res = deflate(&defstream, Z_FINISH))) {",
      "409:                             case Z_OK:",
      "410:                             case Z_STREAM_END:",
      "411:                             case Z_BUF_ERROR:",
      "412:                               break;",
      "413:                             default:",
      "414:                               y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error deflate %d\", res);",
      "415:                               ret = U_CALLBACK_ERROR;",
      "416:                               break;",
      "417:                           }",
      "418:                           data_zip_len += _U_W_BLOCK_SIZE - defstream.avail_out;",
      "419:                         } else {",
      "420:                           y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error allocating resources for data_zip\");",
      "423:                       } while (U_CALLBACK_CONTINUE == ret && defstream.avail_out == 0);",
      "426:                         if (compress_mode == U_COMPRESS_GZIP) {",
      "427:                           if (config->allow_cache_compressed) {",
      "428:                             u_map_put_binary(&config->gzip_files, file_requested, data_zip, 0, defstream.total_out);",
      "430:                           ulfius_set_binary_body_response(response, 200, u_map_get(&config->gzip_files, file_requested), u_map_get_length(&config->gzip_files, file_requested));",
      "431:                         } else {",
      "432:                           if (config->allow_cache_compressed) {",
      "433:                             u_map_put_binary(&config->deflate_files, file_requested, data_zip, 0, defstream.total_out);",
      "435:                           ulfius_set_binary_body_response(response, 200, u_map_get(&config->deflate_files, file_requested), u_map_get_length(&config->deflate_files, file_requested));",
      "437:                         u_map_put(response->map_header, U_CONTENT_HEADER, compress_mode==U_COMPRESS_GZIP?U_ACCEPT_GZIP:U_ACCEPT_DEFLATE);",
      "440:                     deflateEnd(&defstream);",
      "441:                     o_free(data_zip);",
      "443:                     y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error allocating resource for file_content or data_zip\");",
      "444:                     ret = U_CALLBACK_ERROR;",
      "446:                   o_free(file_content_orig);",
      "448:                 fclose(f);",
      "450:                 if (((struct _u_compressed_inmemory_website_config *)user_data)->redirect_on_404 == NULL) {",
      "451:                   ret = U_CALLBACK_IGNORE;",
      "452:                 } else {",
      "453:                   ulfius_add_header_to_response(response, \"Location\", ((struct _u_compressed_inmemory_website_config *)user_data)->redirect_on_404);",
      "454:                   response->status = 302;",
      "455:                 }",
      "457:               pthread_mutex_unlock(&config->lock);",
      "459:               y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error pthread_lock_mutex\");",
      "460:               ret = U_CALLBACK_ERROR;",
      "",
      "[Added Lines]",
      "362:             real_path = realpath(file_path, NULL);",
      "363:             if (0 == o_strncmp(((struct _u_compressed_inmemory_website_config *)user_data)->files_path, real_path, o_strlen(((struct _u_compressed_inmemory_website_config *)user_data)->files_path))) {",
      "364:               if (!pthread_mutex_lock(&config->lock)) {",
      "365:                 f = fopen (file_path, \"rb\");",
      "366:                 if (f) {",
      "367:                   content_type = u_map_get_case(&config->mime_types, get_filename_ext(file_requested));",
      "368:                   if (content_type == NULL) {",
      "369:                     content_type = u_map_get(&config->mime_types, \"*\");",
      "370:                     y_log_message(Y_LOG_LEVEL_WARNING, \"Static File Server - Unknown mime type for extension %s\", get_filename_ext(file_requested));",
      "371:                   }",
      "372:                   if (!string_array_has_value((const char **)config->mime_types_compressed, content_type)) {",
      "373:                     compress_mode = U_COMPRESS_NONE;",
      "374:                   }",
      "376:                   u_map_put(response->map_header, \"Content-Type\", content_type);",
      "377:                   u_map_copy_into(response->map_header, &config->map_header);",
      "379:                   fseek (f, 0, SEEK_END);",
      "380:                   offset = length = ftell (f);",
      "381:                   fseek (f, 0, SEEK_SET);",
      "383:                   if (length) {",
      "384:                     if ((file_content_orig = file_content = o_malloc(length)) != NULL && (data_zip = o_malloc((2*length)+20)) != NULL) {",
      "385:                       defstream.zalloc = u_zalloc;",
      "386:                       defstream.zfree = u_zfree;",
      "387:                       defstream.opaque = Z_NULL;",
      "388:                       defstream.avail_in = (uInt)length;",
      "389:                       defstream.next_in = (Bytef *)file_content;",
      "390:                       while ((read_length = fread(file_content, sizeof(char), offset, f))) {",
      "391:                         file_content += read_length;",
      "392:                         offset -= read_length;",
      "395:                       if (compress_mode == U_COMPRESS_GZIP) {",
      "396:                         if (deflateInit2(&defstream,",
      "397:                                          Z_DEFAULT_COMPRESSION,",
      "398:                                          Z_DEFLATED,",
      "399:                                          U_GZIP_WINDOW_BITS | U_GZIP_ENCODING,",
      "400:                                          8,",
      "401:                                          Z_DEFAULT_STRATEGY) != Z_OK) {",
      "402:                           y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error deflateInit (gzip)\");",
      "405:                       } else {",
      "406:                         if (deflateInit(&defstream, Z_BEST_COMPRESSION) != Z_OK) {",
      "407:                           y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error deflateInit (deflate)\");",
      "408:                           ret = U_CALLBACK_ERROR;",
      "409:                         }",
      "410:                       }",
      "412:                         do {",
      "413:                           if ((data_zip = o_realloc(data_zip, data_zip_len+_U_W_BLOCK_SIZE)) != NULL) {",
      "414:                             defstream.avail_out = _U_W_BLOCK_SIZE;",
      "415:                             defstream.next_out = ((Bytef *)data_zip)+data_zip_len;",
      "416:                             switch ((res = deflate(&defstream, Z_FINISH))) {",
      "417:                               case Z_OK:",
      "418:                               case Z_STREAM_END:",
      "419:                               case Z_BUF_ERROR:",
      "420:                                 break;",
      "421:                               default:",
      "422:                                 y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error deflate %d\", res);",
      "423:                                 ret = U_CALLBACK_ERROR;",
      "424:                                 break;",
      "425:                             }",
      "426:                             data_zip_len += _U_W_BLOCK_SIZE - defstream.avail_out;",
      "427:                           } else {",
      "428:                             y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error allocating resources for data_zip\");",
      "429:                             ret = U_CALLBACK_ERROR;",
      "431:                         } while (U_CALLBACK_CONTINUE == ret && defstream.avail_out == 0);",
      "433:                         if (ret == U_CALLBACK_CONTINUE) {",
      "434:                           if (compress_mode == U_COMPRESS_GZIP) {",
      "435:                             if (config->allow_cache_compressed) {",
      "436:                               u_map_put_binary(&config->gzip_files, file_requested, data_zip, 0, defstream.total_out);",
      "437:                             }",
      "438:                             ulfius_set_binary_body_response(response, 200, u_map_get(&config->gzip_files, file_requested), u_map_get_length(&config->gzip_files, file_requested));",
      "439:                           } else {",
      "440:                             if (config->allow_cache_compressed) {",
      "441:                               u_map_put_binary(&config->deflate_files, file_requested, data_zip, 0, defstream.total_out);",
      "442:                             }",
      "443:                             ulfius_set_binary_body_response(response, 200, u_map_get(&config->deflate_files, file_requested), u_map_get_length(&config->deflate_files, file_requested));",
      "445:                           u_map_put(response->map_header, U_CONTENT_HEADER, compress_mode==U_COMPRESS_GZIP?U_ACCEPT_GZIP:U_ACCEPT_DEFLATE);",
      "448:                       deflateEnd(&defstream);",
      "449:                       o_free(data_zip);",
      "450:                     } else {",
      "451:                       y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error allocating resource for file_content or data_zip\");",
      "452:                       ret = U_CALLBACK_ERROR;",
      "454:                     o_free(file_content_orig);",
      "455:                   }",
      "456:                   fclose(f);",
      "457:                 } else {",
      "458:                   if (((struct _u_compressed_inmemory_website_config *)user_data)->redirect_on_404 == NULL) {",
      "459:                     ret = U_CALLBACK_IGNORE;",
      "461:                     ulfius_add_header_to_response(response, \"Location\", ((struct _u_compressed_inmemory_website_config *)user_data)->redirect_on_404);",
      "462:                     response->status = 302;",
      "465:                 pthread_mutex_unlock(&config->lock);",
      "467:                 y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error pthread_lock_mutex\");",
      "468:                 ret = U_CALLBACK_ERROR;",
      "471:               response->status = 403;",
      "474:             free(real_path); // realpath uses malloc",
      "480:       } else {",
      "481:         ret = callback_static_file_uncompressed(request, response, user_data);",
      "483:     } else {",
      "484:       ret = callback_static_file_uncompressed(request, response, user_data);",
      "",
      "---------------"
    ],
    "src/static_compressed_inmemory_website_callback.h||src/static_compressed_inmemory_website_callback.h": [
      "File: src/static_compressed_inmemory_website_callback.h -> src/static_compressed_inmemory_website_callback.h"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6e8cf850938d80c1ba9dc1f714f8ee80ecea0090",
      "candidate_info": {
        "commit_hash": "6e8cf850938d80c1ba9dc1f714f8ee80ecea0090",
        "repo": "babelouest/glewlwyd",
        "commit_url": "https://github.com/babelouest/glewlwyd/commit/6e8cf850938d80c1ba9dc1f714f8ee80ecea0090",
        "files": [
          "docs/resources/ulfius/glewlwyd_resource.c",
          "docs/resources/ulfius/glewlwyd_resource.h",
          "docs/resources/ulfius/iddawc_resource.c",
          "docs/resources/ulfius/iddawc_resource.h",
          "src/api_key.c",
          "src/client/database.c",
          "src/client/ldap.c",
          "src/glewlwyd.c",
          "src/http_compression_callback.c",
          "src/http_compression_callback.h",
          "src/misc.c",
          "src/module.c",
          "src/plugin/protocol_oauth2.c",
          "src/plugin/protocol_oidc.c",
          "src/plugin/register.c",
          "src/scheme/certificate.c",
          "src/scheme/email.c",
          "src/scheme/http.c",
          "src/scheme/oauth2.c",
          "src/scheme/otp.c",
          "src/scheme/webauthn.c",
          "src/scope.c",
          "src/session.c",
          "src/static_compressed_inmemory_website_callback.c",
          "src/static_compressed_inmemory_website_callback.h",
          "src/user.c",
          "src/user/database.c",
          "src/user/ldap.c",
          "src/user/mock.c",
          "src/webservice.c"
        ],
        "message": "Fix for conversion warnings",
        "before_after_code_files": [
          "src/api_key.c||src/api_key.c",
          "src/client/database.c||src/client/database.c",
          "src/client/ldap.c||src/client/ldap.c",
          "src/glewlwyd.c||src/glewlwyd.c",
          "src/http_compression_callback.c||src/http_compression_callback.c",
          "src/http_compression_callback.h||src/http_compression_callback.h",
          "src/misc.c||src/misc.c",
          "src/module.c||src/module.c",
          "src/plugin/protocol_oauth2.c||src/plugin/protocol_oauth2.c",
          "src/plugin/protocol_oidc.c||src/plugin/protocol_oidc.c",
          "src/plugin/register.c||src/plugin/register.c",
          "src/scheme/certificate.c||src/scheme/certificate.c",
          "src/scheme/email.c||src/scheme/email.c",
          "src/scheme/http.c||src/scheme/http.c",
          "src/scheme/oauth2.c||src/scheme/oauth2.c",
          "src/scheme/otp.c||src/scheme/otp.c",
          "src/scheme/webauthn.c||src/scheme/webauthn.c",
          "src/scope.c||src/scope.c",
          "src/session.c||src/session.c",
          "src/static_compressed_inmemory_website_callback.c||src/static_compressed_inmemory_website_callback.c",
          "src/static_compressed_inmemory_website_callback.h||src/static_compressed_inmemory_website_callback.h",
          "src/user.c||src/user.c",
          "src/user/database.c||src/user/database.c",
          "src/user/ldap.c||src/user/ldap.c",
          "src/user/mock.c||src/user/mock.c",
          "src/webservice.c||src/webservice.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/static_compressed_inmemory_website_callback.c||src/static_compressed_inmemory_website_callback.c",
            "src/static_compressed_inmemory_website_callback.h||src/static_compressed_inmemory_website_callback.h"
          ],
          "candidate": [
            "src/static_compressed_inmemory_website_callback.c||src/static_compressed_inmemory_website_callback.c",
            "src/static_compressed_inmemory_website_callback.h||src/static_compressed_inmemory_website_callback.h"
          ]
        }
      },
      "candidate_diff": {
        "src/api_key.c||src/api_key.c": [
          "File: src/api_key.c -> src/api_key.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:                       \"order_by\",",
          "113:                       \"gak_issued_at\");",
          "114:   if (limit) {",
          "116:   }",
          "117:   if (!o_strnullempty(pattern)) {",
          "118:     pattern_escaped = h_escape_string_with_quotes(config->conn, pattern);",
          "",
          "[Removed Lines]",
          "115:     json_object_set_new(j_query, \"limit\", json_integer(limit));",
          "",
          "[Added Lines]",
          "115:     json_object_set_new(j_query, \"limit\", json_integer((json_int_t)limit));",
          "",
          "---------------"
        ],
        "src/client/database.c||src/client/database.c": [
          "File: src/client/database.c -> src/client/database.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "455:   if (res == H_OK) {",
          "456:     if (json_array_size(j_result) && !json_string_null_or_empty(json_object_get(json_array_get(j_result, 0), \"gc_password\"))) {",
          "457:       if ((str_iterator = o_strchr(json_string_value(json_object_get(json_array_get(j_result, 0), \"gc_password\")), G_PBKDF2_ITERATOR_SEP)) != NULL) {",
          "460:       } else {",
          "461:         gc_password_len = json_string_length(json_object_get(json_array_get(j_result, 0), \"gc_password\"));",
          "",
          "[Removed Lines]",
          "458:         gc_password_len = o_strchr(json_string_value(json_object_get(json_array_get(j_result, 0), \"gc_password\")), G_PBKDF2_ITERATOR_SEP) - json_string_value(json_object_get(json_array_get(j_result, 0), \"gc_password\"));",
          "",
          "[Added Lines]",
          "458:         gc_password_len = (size_t)(o_strchr(json_string_value(json_object_get(json_array_get(j_result, 0), \"gc_password\")), G_PBKDF2_ITERATOR_SEP) - json_string_value(json_object_get(json_array_get(j_result, 0), \"gc_password\")));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "744:         if (0 == o_strcmp(json_string_value(json_object_get(j_parameters, \"connection-type\")), \"sqlite\")) {",
          "745:           ((struct mod_parameters *)*cls)->conn = h_connect_sqlite(json_string_value(json_object_get(j_parameters, \"sqlite-dbpath\")));",
          "746:         } else if (0 == o_strcmp(json_string_value(json_object_get(j_parameters, \"connection-type\")), \"mariadb\")) {",
          "748:         } else if (0 == o_strcmp(json_string_value(json_object_get(j_parameters, \"connection-type\")), \"postgre\")) {",
          "749:           ((struct mod_parameters *)*cls)->conn = h_connect_pgsql(json_string_value(json_object_get(j_parameters, \"postgre-conninfo\")));",
          "750:         }",
          "",
          "[Removed Lines]",
          "747:           ((struct mod_parameters *)*cls)->conn = h_connect_mariadb(json_string_value(json_object_get(j_parameters, \"mariadb-host\")), json_string_value(json_object_get(j_parameters, \"mariadb-user\")), json_string_value(json_object_get(j_parameters, \"mariadb-password\")), json_string_value(json_object_get(j_parameters, \"mariadb-dbname\")), json_integer_value(json_object_get(j_parameters, \"mariadb-port\")), NULL);",
          "",
          "[Added Lines]",
          "747:           ((struct mod_parameters *)*cls)->conn = h_connect_mariadb(json_string_value(json_object_get(j_parameters, \"mariadb-host\")), json_string_value(json_object_get(j_parameters, \"mariadb-user\")), json_string_value(json_object_get(j_parameters, \"mariadb-password\")), json_string_value(json_object_get(j_parameters, \"mariadb-dbname\")), (unsigned int)json_integer_value(json_object_get(j_parameters, \"mariadb-port\")), NULL);",
          "",
          "---------------"
        ],
        "src/client/ldap.c||src/client/ldap.c": [
          "File: src/client/ldap.c -> src/client/ldap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "281:     to_return = strdup(\"\");",
          "282:     len = o_strlen(input);",
          "283:     for (i=0; i < len && to_return != NULL; i++) {",
          "285:       if (c == '*') {",
          "287:         tmp = msprintf(\"%s\\\\2a\", to_return);",
          "",
          "[Removed Lines]",
          "284:       unsigned char c = input[i];",
          "",
          "[Added Lines]",
          "284:       unsigned char c = (unsigned char)input[i];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1097:     if ((result = ldap_search_ext_s(ldap, json_string_value(json_object_get(j_params, \"base-search\")), scope, filter, attrs, attrsonly, NULL, NULL, NULL, LDAP_NO_LIMIT, &answer)) != LDAP_SUCCESS) {",
          "1098:       y_log_message(Y_LOG_LEVEL_ERROR, \"client_module_count_total ldap - Error ldap search, base search: %s, filter: %s: %s\", json_string_value(json_object_get(j_params, \"base-search\")), filter, ldap_err2string(result));",
          "1099:     } else {",
          "1101:     }",
          "1102:     ldap_msgfree(answer);",
          "1103:     ldap_unbind_ext(ldap, NULL, NULL);",
          "",
          "[Removed Lines]",
          "1100:       counter = ldap_count_entries(ldap, answer);",
          "",
          "[Added Lines]",
          "1100:       counter = (size_t)ldap_count_entries(ldap, answer);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1138:     attrs = get_ldap_read_attributes(j_params, 0, (j_properties_client = json_object()));",
          "1139:     j_client_list = json_array();",
          "1140:     do {",
          "1142:       if (ldap_result != LDAP_SUCCESS) {",
          "1143:         y_log_message(Y_LOG_LEVEL_ERROR, \"client_module_get_list ldap - Error ldap_create_page_control, message: %s\", ldap_err2string(ldap_result));",
          "1144:         break;",
          "",
          "[Removed Lines]",
          "1141:       ldap_result = ldap_create_page_control(ldap, json_integer_value(json_object_get(j_params, \"page-size\")), cookie, 0, &page_control);",
          "",
          "[Added Lines]",
          "1141:       ldap_result = ldap_create_page_control(ldap, (ber_int_t)json_integer_value(json_object_get(j_params, \"page-size\")), cookie, 0, &page_control);",
          "",
          "---------------"
        ],
        "src/glewlwyd.c||src/glewlwyd.c": [
          "File: src/glewlwyd.c -> src/glewlwyd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "295:   if (config->bind_address != NULL) {",
          "296:     bind_address.sin_family = AF_INET;",
          "298:     inet_aton(config->bind_address, (struct in_addr *)&bind_address.sin_addr.s_addr);",
          "299:     if (ulfius_init_instance(config->instance, config->port, &bind_address, NULL) != U_OK) {",
          "300:       fprintf(stderr, \"Error initializing webservice instance with bind address %s\\n\", config->bind_address);",
          "",
          "[Removed Lines]",
          "297:     bind_address.sin_port = htons(config->port);",
          "",
          "[Added Lines]",
          "297:     bind_address.sin_port = htons((uint16_t)config->port);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "323:     }",
          "324:     if (config->bind_address_metrics != NULL) {",
          "325:       bind_address_metrics.sin_family = AF_INET;",
          "327:       inet_aton(config->bind_address_metrics, (struct in_addr *)&bind_address_metrics.sin_addr.s_addr);",
          "328:       if (ulfius_init_instance(config->instance_metrics, config->metrics_endpoint_port, &bind_address_metrics, NULL) != U_OK) {",
          "329:         fprintf(stderr, \"Error initializing metrics instance_metrics with bind address %s\\n\", config->bind_address_metrics);",
          "",
          "[Removed Lines]",
          "326:       bind_address_metrics.sin_port = htons(config->metrics_endpoint_port);",
          "",
          "[Added Lines]",
          "326:       bind_address_metrics.sin_port = htons((uint16_t)config->metrics_endpoint_port);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "828:           break;",
          "829:         case 'p':",
          "830:           if (optarg != NULL) {",
          "832:             if (config->port <= 0 || config->port > 65535) {",
          "833:               fprintf(stderr, \"Error!\\nInvalid TCP Port number\\n\\tPlease specify an integer value between 1 and 65535\");",
          "834:               ret = G_ERROR_PARAM;",
          "",
          "[Removed Lines]",
          "831:             config->port = strtol(optarg, NULL, 10);",
          "",
          "[Added Lines]",
          "831:             config->port = (unsigned int)strtol(optarg, NULL, 10);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "935:   int int_value = 0,",
          "936:       int_value_2 = 0,",
          "937:       int_value_3 = 0,",
          "939:       ret = G_OK;",
          "940:   char * one_log_mode, * real_path, ** splitted = NULL;",
          "942:   config_init(&cfg);",
          "",
          "[Removed Lines]",
          "938:       i,",
          "",
          "[Added Lines]",
          "939:   unsigned int i;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1169:     mime_type_list = config_lookup(&cfg, \"static_files_mime_types\");",
          "1170:     if (mime_type_list != NULL) {",
          "1172:       for (i=0; i<len; i++) {",
          "1173:         mime_type = config_setting_get_elem(mime_type_list, i);",
          "1174:         if (mime_type != NULL) {",
          "",
          "[Removed Lines]",
          "1171:       int len = config_setting_length(mime_type_list);",
          "",
          "[Added Lines]",
          "1171:       unsigned int len = (unsigned int)config_setting_length(mime_type_list);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1190:     if (config_lookup_bool(&cfg, \"use_secure_connection\", &int_value) == CONFIG_TRUE) {",
          "1191:       if (config_lookup_string(&cfg, \"secure_connection_key_file\", &str_value) == CONFIG_TRUE &&",
          "1192:           config_lookup_string(&cfg, \"secure_connection_pem_file\", &str_value_2) == CONFIG_TRUE) {",
          "1194:         config->secure_connection_key_file = o_strdup(str_value);",
          "1195:         config->secure_connection_pem_file = o_strdup(str_value_2);",
          "1196:         if (config_lookup_string(&cfg, \"secure_connection_ca_file\", &str_value) == CONFIG_TRUE) {",
          "",
          "[Removed Lines]",
          "1193:         config->use_secure_connection = int_value;",
          "",
          "[Added Lines]",
          "1193:         config->use_secure_connection = (unsigned int)int_value;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1253:           config_setting_lookup_string(database, \"password\", &str_value_4);",
          "1254:           config_setting_lookup_string(database, \"dbname\", &str_value_5);",
          "1255:           config_setting_lookup_int(database, \"port\", &int_value);",
          "1257:           if (config->conn == NULL) {",
          "1258:             fprintf(stderr, \"Error opening mariadb database %s\\n\", str_value_5);",
          "1259:             ret = G_ERROR_PARAM;",
          "",
          "[Removed Lines]",
          "1256:           config->conn = h_connect_mariadb(str_value_2, str_value_3, str_value_4, str_value_5, int_value, NULL);",
          "",
          "[Added Lines]",
          "1256:           config->conn = h_connect_mariadb(str_value_2, str_value_3, str_value_4, str_value_5, (unsigned int)int_value, NULL);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1791:     } else if (0 == o_strcmp(value, \"mariadb\")) {",
          "1792:       lvalue = strtol(getenv(GLEWLWYD_ENV_DATABASE_MARIADB_PORT), &endptr, 10);",
          "1793:       if (!(*endptr) && lvalue > 0 && lvalue < 65535) {",
          "1795:           fprintf(stderr, \"Error opening mariadb database '%s'\\n\", getenv(GLEWLWYD_ENV_DATABASE_MARIADB_DBNAME));",
          "1796:           ret = G_ERROR_PARAM;",
          "1797:         } else {",
          "",
          "[Removed Lines]",
          "1794:         if ((config->conn = h_connect_mariadb(getenv(GLEWLWYD_ENV_DATABASE_MARIADB_HOST), getenv(GLEWLWYD_ENV_DATABASE_MARIADB_USER), getenv(GLEWLWYD_ENV_DATABASE_MARIADB_PASSWORD), getenv(GLEWLWYD_ENV_DATABASE_MARIADB_DBNAME), lvalue, NULL)) == NULL) {",
          "",
          "[Added Lines]",
          "1794:         if ((config->conn = h_connect_mariadb(getenv(GLEWLWYD_ENV_DATABASE_MARIADB_HOST), getenv(GLEWLWYD_ENV_DATABASE_MARIADB_USER), getenv(GLEWLWYD_ENV_DATABASE_MARIADB_PASSWORD), getenv(GLEWLWYD_ENV_DATABASE_MARIADB_DBNAME), (unsigned int)lvalue, NULL)) == NULL) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2269:               cur_instance->cls = NULL;",
          "2270:               cur_instance->name = o_strdup(json_string_value(json_object_get(j_instance, \"name\")));",
          "2271:               cur_instance->module = module;",
          "2274:               if (pointer_list_append(config->user_module_instance_list, cur_instance)) {",
          "2275:                 if (json_integer_value(json_object_get(j_instance, \"enabled\"))) {",
          "2276:                   j_parameters = json_loads(json_string_value(json_object_get(j_instance, \"parameters\")), JSON_DECODE_ANY, NULL);",
          "",
          "[Removed Lines]",
          "2272:               cur_instance->readonly = json_integer_value(json_object_get(j_instance, \"readonly\"));",
          "2273:               cur_instance->multiple_passwords = json_integer_value(json_object_get(j_instance, \"multiple_passwords\"));",
          "",
          "[Added Lines]",
          "2272:               cur_instance->readonly = (short int)json_integer_value(json_object_get(j_instance, \"readonly\"));",
          "2273:               cur_instance->multiple_passwords = (short int)json_integer_value(json_object_get(j_instance, \"multiple_passwords\"));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2966:               cur_instance->guasmi_id = json_integer_value(json_object_get(j_instance, \"guasmi_id\"));",
          "2967:               cur_instance->guasmi_expiration = json_integer_value(json_object_get(j_instance, \"guasmi_expiration\"));",
          "2968:               cur_instance->guasmi_max_use = json_integer_value(json_object_get(j_instance, \"guasmi_max_use\"));",
          "2970:               if (pointer_list_append(config->user_auth_scheme_module_instance_list, cur_instance)) {",
          "2971:                 if (json_integer_value(json_object_get(j_instance, \"enabled\"))) {",
          "2972:                   j_parameters = json_loads(json_string_value(json_object_get(j_instance, \"parameters\")), JSON_DECODE_ANY, NULL);",
          "",
          "[Removed Lines]",
          "2969:               cur_instance->guasmi_allow_user_register = json_integer_value(json_object_get(j_instance, \"guasmi_allow_user_register\"));",
          "",
          "[Added Lines]",
          "2969:               cur_instance->guasmi_allow_user_register = (short int)json_integer_value(json_object_get(j_instance, \"guasmi_allow_user_register\"));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3306:             if (cur_instance != NULL) {",
          "3307:               cur_instance->cls = NULL;",
          "3308:               cur_instance->name = o_strdup(json_string_value(json_object_get(j_instance, \"name\")));",
          "3310:               cur_instance->module = module;",
          "3311:               if (pointer_list_append(config->client_module_instance_list, cur_instance)) {",
          "3312:                 if (json_integer_value(json_object_get(j_instance, \"enabled\"))) {",
          "",
          "[Removed Lines]",
          "3309:               cur_instance->readonly = json_integer_value(json_object_get(j_instance, \"readonly\"));",
          "",
          "[Added Lines]",
          "3309:               cur_instance->readonly = (short int)json_integer_value(json_object_get(j_instance, \"readonly\"));",
          "",
          "---------------"
        ],
        "src/http_compression_callback.c||src/http_compression_callback.c": [
          "File: src/http_compression_callback.c -> src/http_compression_callback.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: #include <string.h>",
          "37: #include <ulfius.h>",
          "39: #include \"http_compression_callback.h\"",
          "",
          "[Removed Lines]",
          "35: #include <zlib.h>",
          "",
          "[Added Lines]",
          "37: #include <zlib.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:   char * data_zip = NULL;",
          "72:   size_t data_zip_len = 0;",
          "75:     if (split_string(u_map_get_case(request->map_header, U_ACCEPT_HEADER), \",\", &accept_list)) {",
          "76:       if ((config == NULL || config->allow_gzip) && string_array_has_trimmed_value((const char **)accept_list, U_ACCEPT_GZIP)) {",
          "77:         compress_mode = U_COMPRESS_GZIP;",
          "",
          "[Removed Lines]",
          "74:   if (response->binary_body_length && u_map_has_key_case(request->map_header, U_ACCEPT_HEADER) && !u_map_has_key_case(response->map_header, U_CONTENT_HEADER)) {",
          "",
          "[Added Lines]",
          "74:   if (response->binary_body_length && u_map_has_key_case(request->map_header, U_ACCEPT_HEADER)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "125:           } while (U_CALLBACK_IGNORE == ret && defstream.avail_out == 0);",
          "127:           if (ret == U_CALLBACK_IGNORE) {",
          "129:             u_map_put(response->map_header, U_CONTENT_HEADER, compress_mode==U_COMPRESS_GZIP?U_ACCEPT_GZIP:U_ACCEPT_DEFLATE);",
          "130:           }",
          "131:           deflateEnd(&defstream);",
          "",
          "[Removed Lines]",
          "128:             ulfius_set_binary_body_response(response, response->status, (const char *)data_zip, defstream.total_out);",
          "",
          "[Added Lines]",
          "128:             ulfius_set_binary_body_response(response, (unsigned int)response->status, (const char *)data_zip, defstream.total_out);",
          "",
          "---------------"
        ],
        "src/http_compression_callback.h||src/http_compression_callback.h": [
          "File: src/http_compression_callback.h -> src/http_compression_callback.h"
        ],
        "src/misc.c||src/misc.c": [
          "File: src/misc.c -> src/misc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:   f = fopen (file_path, \"rb\");",
          "58:   if (f) {",
          "59:     fseek (f, 0, SEEK_END);",
          "61:     fseek (f, 0, SEEK_SET);",
          "62:     buffer = o_malloc((length+1));",
          "63:     if (buffer) {",
          "",
          "[Removed Lines]",
          "60:     length = ftell (f);",
          "",
          "[Added Lines]",
          "60:     length = (size_t)ftell (f);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128: unsigned char random_at_most(unsigned char max, int nonce, int * is_error) {",
          "129:   unsigned char",
          "131:   num_rand = (unsigned char) 0xff,",
          "132:   bin_size = num_rand / num_bins,",
          "133:   defect   = num_rand % num_bins;",
          "",
          "[Removed Lines]",
          "130:   num_bins = (unsigned char) max + 1,",
          "",
          "[Added Lines]",
          "130:   num_bins = (unsigned char) (max + 1),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "168:   if (str_size && str != NULL) {",
          "169:     for (n = 0; n < str_size; n++) {",
          "171:       if (is_error) {",
          "172:         return NULL;",
          "173:       }",
          "",
          "[Removed Lines]",
          "170:       rnd = random_at_most((o_strlen(charset)) - 2, 0, &is_error);",
          "",
          "[Added Lines]",
          "170:       rnd = random_at_most((unsigned char)(o_strlen(charset) - 2), 0, &is_error);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "192:   if (str_size && str != NULL) {",
          "193:     for (n = 0; n < str_size; n++) {",
          "195:       if (is_error) {",
          "196:         return NULL;",
          "197:       }",
          "",
          "[Removed Lines]",
          "194:       rnd = random_at_most((o_strlen(charset)) - 2, 1, &is_error);",
          "",
          "[Added Lines]",
          "194:       rnd = random_at_most((unsigned char)(o_strlen(charset) - 2), 1, &is_error);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "259: int generate_digest(digest_algorithm digest, const char * data, int use_salt, char * out_digest) {",
          "261:   int alg, dig_res;",
          "262:   gnutls_datum_t key_data;",
          "263:   char * intermediate = NULL, salt[GLEWLWYD_DEFAULT_SALT_LENGTH + 1] = {0};",
          "",
          "[Removed Lines]",
          "260:   unsigned int res = 1;",
          "",
          "[Added Lines]",
          "260:   int res = 1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "302:         }",
          "303:         if (res) {",
          "304:           key_data.data = (unsigned char*)intermediate;",
          "306:           if (key_data.data != NULL && (dig_res = gnutls_fingerprint(alg, &key_data, encoded_key, &encoded_key_size)) == GNUTLS_E_SUCCESS) {",
          "307:             if (use_salt) {",
          "308:               memcpy(encoded_key+encoded_key_size, salt, GLEWLWYD_DEFAULT_SALT_LENGTH);",
          "",
          "[Removed Lines]",
          "305:           key_data.size = o_strlen(intermediate);",
          "",
          "[Added Lines]",
          "305:           key_data.size = (unsigned int)o_strlen(intermediate);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "336: int generate_digest_raw(digest_algorithm digest, const unsigned char * data, size_t data_len, unsigned char * out_digest, size_t * out_digest_len) {",
          "338:   int alg, dig_res;",
          "339:   gnutls_datum_t key_data;",
          "",
          "[Removed Lines]",
          "337:   unsigned int res = 0;",
          "",
          "[Added Lines]",
          "337:   int res = 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "366:     if(alg != GNUTLS_DIG_UNKNOWN) {",
          "367:       if (data_len > 0) {",
          "368:         key_data.data = (unsigned char *)data;",
          "370:         if (key_data.data != NULL) {",
          "371:           if ((dig_res = gnutls_fingerprint(alg, &key_data, out_digest, out_digest_len)) == GNUTLS_E_SUCCESS) {",
          "372:             res = 1;",
          "",
          "[Removed Lines]",
          "369:         key_data.size = data_len;",
          "",
          "[Added Lines]",
          "369:         key_data.size = (unsigned int)data_len;",
          "",
          "---------------"
        ],
        "src/module.c||src/module.c": [
          "File: src/module.c -> src/module.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "318:   if (json_object_get(j_module, \"order_rank\") != NULL) {",
          "319:     json_object_set(json_object_get(j_query, \"values\"), \"gumi_order\", json_object_get(j_module, \"order_rank\"));",
          "320:   } else {",
          "322:   }",
          "323:   res = h_insert(config->conn, j_query, NULL);",
          "324:   json_decref(j_query);",
          "",
          "[Removed Lines]",
          "321:     json_object_set_new(json_object_get(j_query, \"values\"), \"gumi_order\", json_integer(pointer_list_size(config->user_module_list)));",
          "",
          "[Added Lines]",
          "321:     json_object_set_new(json_object_get(j_query, \"values\"), \"gumi_order\", json_integer((json_int_t)pointer_list_size(config->user_module_list)));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "407:   if (json_object_get(j_module, \"order_rank\") != NULL) {",
          "408:     json_object_set(json_object_get(j_query, \"set\"), \"gumi_order\", json_object_get(j_module, \"order_rank\"));",
          "409:   } else {",
          "411:   }",
          "412:   if (json_object_get(j_module, \"readonly\") != NULL) {",
          "413:     json_object_set_new(json_object_get(j_query, \"set\"), \"gumi_readonly\", json_object_get(j_module, \"readonly\")==json_true()?json_integer(1):json_integer(0));",
          "",
          "[Removed Lines]",
          "410:     json_object_set_new(json_object_get(j_query, \"set\"), \"gumi_order\", json_integer(pointer_list_size(config->user_module_list)));",
          "",
          "[Added Lines]",
          "410:     json_object_set_new(json_object_get(j_query, \"set\"), \"gumi_order\", json_integer((json_int_t)pointer_list_size(config->user_module_list)));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "745:   if (json_object_get(j_module, \"order_rank\") != NULL) {",
          "746:     json_object_set(json_object_get(j_query, \"values\"), \"gummi_order\", json_object_get(j_module, \"order_rank\"));",
          "747:   } else {",
          "749:   }",
          "750:   res = h_insert(config->conn, j_query, NULL);",
          "751:   json_decref(j_query);",
          "",
          "[Removed Lines]",
          "748:     json_object_set_new(json_object_get(j_query, \"values\"), \"gummi_order\", json_integer(pointer_list_size(config->user_middleware_module_list)));",
          "",
          "[Added Lines]",
          "748:     json_object_set_new(json_object_get(j_query, \"values\"), \"gummi_order\", json_integer((json_int_t)pointer_list_size(config->user_middleware_module_list)));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "782:   if (json_object_get(j_module, \"order_rank\") != NULL) {",
          "783:     json_object_set(json_object_get(j_query, \"set\"), \"gummi_order\", json_object_get(j_module, \"order_rank\"));",
          "784:   } else {",
          "786:   }",
          "787:   res = h_update(config->conn, j_query, NULL);",
          "788:   json_decref(j_query);",
          "",
          "[Removed Lines]",
          "785:     json_object_set_new(json_object_get(j_query, \"set\"), \"gummi_order\", json_integer(pointer_list_size(config->user_middleware_module_list)));",
          "",
          "[Added Lines]",
          "785:     json_object_set_new(json_object_get(j_query, \"set\"), \"gummi_order\", json_integer((json_int_t)pointer_list_size(config->user_middleware_module_list)));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1573:   if (json_object_get(j_module, \"order_rank\") != NULL) {",
          "1574:     json_object_set(json_object_get(j_query, \"values\"), \"gcmi_order\", json_object_get(j_module, \"order_rank\"));",
          "1575:   } else {",
          "1577:   }",
          "1578:   res = h_insert(config->conn, j_query, NULL);",
          "1579:   json_decref(j_query);",
          "",
          "[Removed Lines]",
          "1576:     json_object_set_new(json_object_get(j_query, \"values\"), \"gcmi_order\", json_integer(pointer_list_size(config->client_module_list)));",
          "",
          "[Added Lines]",
          "1576:     json_object_set_new(json_object_get(j_query, \"values\"), \"gcmi_order\", json_integer((json_int_t)pointer_list_size(config->client_module_list)));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1638: int set_client_module(struct config_elements * config, const char * name, json_t * j_module) {",
          "1639:   json_t * j_query;",
          "1641:   int ret;",
          "1642:   char * parameters = json_dumps(json_object_get(j_module, \"parameters\"), JSON_COMPACT);",
          "1643:   struct _client_module_instance * cur_instance;",
          "",
          "[Removed Lines]",
          "1640:   size_t res;",
          "",
          "[Added Lines]",
          "1640:   int res;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1660:   if (json_object_get(j_module, \"order_rank\") != NULL) {",
          "1661:     json_object_set(json_object_get(j_query, \"set\"), \"gcmi_order\", json_object_get(j_module, \"order_rank\"));",
          "1662:   } else {",
          "1664:   }",
          "1665:   if (json_object_get(j_module, \"readonly\") != NULL) {",
          "1666:     json_object_set_new(json_object_get(j_query, \"set\"), \"gcmi_readonly\", json_object_get(j_module, \"readonly\")==json_true()?json_integer(1):json_integer(0));",
          "",
          "[Removed Lines]",
          "1663:     json_object_set_new(json_object_get(j_query, \"set\"), \"gcmi_order\", json_integer(pointer_list_size(config->client_module_list)));",
          "",
          "[Added Lines]",
          "1663:     json_object_set_new(json_object_get(j_query, \"set\"), \"gcmi_order\", json_integer((json_int_t)pointer_list_size(config->client_module_list)));",
          "",
          "---------------"
        ],
        "src/plugin/protocol_oauth2.c||src/plugin/protocol_oauth2.c": [
          "File: src/plugin/protocol_oauth2.c -> src/plugin/protocol_oauth2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "565:         last_seen_clause = msprintf(\"%u\", (now));",
          "566:       }",
          "567:       if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_MARIADB) {",
          "569:       } else if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_PGSQL) {",
          "571:       } else { // HOEL_DB_TYPE_SQLITE",
          "573:       }",
          "574:       j_query = json_pack_ex(&error, 0, \"{sss{ss si so ss so s{ss} s{ss} s{ss} sI si ss ss ss}}\",",
          "575:                           \"table\",",
          "",
          "[Removed Lines]",
          "568:         expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (unsigned int)duration));",
          "570:         expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (unsigned int)duration ));",
          "572:         expires_at_clause = msprintf(\"%u\", (now + (unsigned int)duration));",
          "",
          "[Added Lines]",
          "568:         expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (time_t)duration));",
          "570:         expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (time_t)duration ));",
          "572:         expires_at_clause = msprintf(\"%u\", (now + (time_t)duration));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "779:         if (code_hash != NULL) {",
          "780:           time(&now);",
          "781:           if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_MARIADB) {",
          "783:           } else if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_PGSQL) {",
          "785:           } else { // HOEL_DB_TYPE_SQLITE",
          "787:           }",
          "788:           j_query = json_pack(\"{sss{sssssssssssssss{ss}ss}}\",",
          "789:                               \"table\",",
          "",
          "[Removed Lines]",
          "782:             expiration_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (unsigned int)config->code_duration ));",
          "784:             expiration_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (unsigned int)config->code_duration ));",
          "786:             expiration_clause = msprintf(\"%u\", (now + (unsigned int)config->code_duration ));",
          "",
          "[Added Lines]",
          "782:             expiration_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (time_t)config->code_duration ));",
          "784:             expiration_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (time_t)config->code_duration ));",
          "786:             expiration_clause = msprintf(\"%u\", (now + (time_t)config->code_duration ));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "948:     if (is_pkce_char_valid(code_verifier)) {",
          "949:       if (0 == o_strncmp(GLEWLWYD_CODE_CHALLENGE_S256_PREFIX, json_string_value(json_object_get(j_result_code, \"code_challenge\")), o_strlen(GLEWLWYD_CODE_CHALLENGE_S256_PREFIX))) {",
          "950:         key_data.data = (unsigned char *)code_verifier;",
          "952:         if (gnutls_fingerprint(GNUTLS_DIG_SHA256, &key_data, code_verifier_hash, &code_verifier_hash_len) == GNUTLS_E_SUCCESS) {",
          "953:           if (o_base64url_encode(code_verifier_hash, code_verifier_hash_len, code_verifier_hash_b64, &code_verifier_hash_b64_len)) {",
          "954:             code_verifier_hash_b64[code_verifier_hash_b64_len] = '\\0';",
          "",
          "[Removed Lines]",
          "951:         key_data.size = o_strlen(code_verifier);",
          "",
          "[Added Lines]",
          "951:         key_data.size = (unsigned int)o_strlen(code_verifier);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1537:   o_free(last_seen_clause);",
          "1538:   if (refresh_token_duration) {",
          "1539:     if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_MARIADB) {",
          "1541:     } else if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_PGSQL) {",
          "1543:     } else { // HOEL_DB_TYPE_SQLITE",
          "1545:     }",
          "1546:     json_object_set_new(json_object_get(j_query, \"set\"), \"gpgr_expires_at\", json_pack(\"{ss}\", \"raw\", expires_at_clause));",
          "1547:     o_free(expires_at_clause);",
          "",
          "[Removed Lines]",
          "1540:       expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (unsigned int)refresh_token_duration));",
          "1542:       expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (unsigned int)refresh_token_duration));",
          "1544:       expires_at_clause = msprintf(\"%u\", (now + (unsigned int)refresh_token_duration));",
          "",
          "[Added Lines]",
          "1540:       expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (time_t)refresh_token_duration));",
          "1542:       expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (time_t)refresh_token_duration));",
          "1544:       expires_at_clause = msprintf(\"%u\", (now + (time_t)refresh_token_duration));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2032:   if (o_strlen(user_code) == GLEWLWYD_DEVICE_AUTH_USER_CODE_LENGTH+1 && user_code[4] == '-') {",
          "2033:     for (index=0; index<(GLEWLWYD_DEVICE_AUTH_USER_CODE_LENGTH+1); index++) {",
          "2035:     }",
          "2036:     user_code_ucase[GLEWLWYD_DEVICE_AUTH_USER_CODE_LENGTH+1] = '\\0';",
          "2037:     time(&now);",
          "",
          "[Removed Lines]",
          "2034:       user_code_ucase[index] = toupper(user_code[index]);",
          "",
          "[Added Lines]",
          "2034:       user_code_ucase[index] = (char)toupper(user_code[index]);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3013:               if (scope_allowed == NULL) {",
          "3014:                 scope_allowed = o_malloc(2 * sizeof(char*));",
          "3015:               } else {",
          "3017:               }",
          "3018:               scope_allowed[i_scope_allowed] = scope_array[i];",
          "3019:               scope_allowed[i_scope_allowed+1] = NULL;",
          "",
          "[Removed Lines]",
          "3016:                 scope_allowed = o_realloc(scope_allowed, (2 + i_scope_allowed) * sizeof(char*));",
          "",
          "[Added Lines]",
          "3016:                 scope_allowed = o_realloc(scope_allowed, (2 + (size_t)i_scope_allowed) * sizeof(char*));",
          "",
          "---------------"
        ],
        "src/plugin/protocol_oidc.c||src/plugin/protocol_oidc.c": [
          "File: src/plugin/protocol_oidc.c -> src/plugin/protocol_oidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1383: }",
          "1385: static int check_scope_list(const char * scope_expected, const char * scope_token) {",
          "1387:   char ** scope_expected_list = NULL, ** scope_token_list = NULL;",
          "1390:   if (scope_expected == NULL) {",
          "1391:     return 1;",
          "",
          "[Removed Lines]",
          "1386:   int ret = 1, scope_expected_count, scope_token_count;",
          "1388:   size_t i;",
          "",
          "[Added Lines]",
          "1386:   int ret = 1;",
          "1387:   size_t scope_expected_count, scope_token_count, i;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1706:             }",
          "1707:             if (access_token != NULL) {",
          "1708:               hash_data.data = (unsigned char*)access_token;",
          "1710:               if (gnutls_fingerprint(GNUTLS_DIG_SHA256, &hash_data, ath, &ath_len) != GNUTLS_E_SUCCESS) {",
          "1711:                 y_log_message(Y_LOG_LEVEL_ERROR, \"oidc_verify_dpop_proof - Error gnutls_fingerprint\");",
          "1712:                 j_return = json_pack(\"{si}\", \"result\", G_ERROR);",
          "",
          "[Removed Lines]",
          "1709:               hash_data.size = o_strlen(access_token);",
          "",
          "[Added Lines]",
          "1709:               hash_data.size = (unsigned int)o_strlen(access_token);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2455:         y_log_message(Y_LOG_LEVEL_ERROR, \"get_session_token - Error o_strncpy\");",
          "2456:         ret = G_ERROR;",
          "2457:       } else {",
          "2459:           y_log_message(Y_LOG_LEVEL_DEBUG, \"get_session_token - Error ulfius_add_same_site_cookie_to_response (1)\");",
          "2460:           ret = G_ERROR;",
          "2461:         }",
          "",
          "[Removed Lines]",
          "2458:         if (ulfius_add_same_site_cookie_to_response(response, json_string_value(json_object_get(config->j_params, \"session-cookie-name\")), sid, expires, 0, config->glewlwyd_config->glewlwyd_config->cookie_domain, \"/\", config->glewlwyd_config->glewlwyd_config->cookie_secure, 0, config->glewlwyd_config->glewlwyd_config->cookie_same_site) != U_OK) {",
          "",
          "[Added Lines]",
          "2458:         if (ulfius_add_same_site_cookie_to_response(response, json_string_value(json_object_get(config->j_params, \"session-cookie-name\")), sid, expires, 0, config->glewlwyd_config->glewlwyd_config->cookie_domain, \"/\", (int)config->glewlwyd_config->glewlwyd_config->cookie_secure, 0, (int)config->glewlwyd_config->glewlwyd_config->cookie_same_site) != U_OK) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2464:       if (rand_string_nonce(sid, OIDC_SID_LENGTH) == NULL) {",
          "2465:         ret = G_ERROR;",
          "2466:       } else {",
          "2468:           y_log_message(Y_LOG_LEVEL_DEBUG, \"get_session_token - Error ulfius_add_same_site_cookie_to_response (2)\");",
          "2469:           ret = G_ERROR;",
          "2470:         }",
          "",
          "[Removed Lines]",
          "2467:         if (ulfius_add_same_site_cookie_to_response(response, json_string_value(json_object_get(config->j_params, \"session-cookie-name\")), sid, expires, 0, config->glewlwyd_config->glewlwyd_config->cookie_domain, \"/\", config->glewlwyd_config->glewlwyd_config->cookie_secure, 0, config->glewlwyd_config->glewlwyd_config->cookie_same_site) != U_OK) {",
          "",
          "[Added Lines]",
          "2467:         if (ulfius_add_same_site_cookie_to_response(response, json_string_value(json_object_get(config->j_params, \"session-cookie-name\")), sid, expires, 0, config->glewlwyd_config->glewlwyd_config->cookie_domain, \"/\", (int)config->glewlwyd_config->glewlwyd_config->cookie_secure, 0, (int)config->glewlwyd_config->glewlwyd_config->cookie_same_site) != U_OK) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2489:     else if (key_size == 512) dig_alg = GNUTLS_DIG_SHA512;",
          "2490:     if (dig_alg != GNUTLS_DIG_UNKNOWN) {",
          "2491:       hash_data.data = (unsigned char*)value;",
          "2493:       if (gnutls_fingerprint(dig_alg, &hash_data, x_hash, &x_hash_len) == GNUTLS_E_SUCCESS) {",
          "2494:         if (o_base64url_encode(x_hash, x_hash_len/2, (unsigned char *)x_hash_encoded, &x_hash_encoded_len)) {",
          "2495:           to_return = o_strndup(x_hash_encoded, x_hash_encoded_len);",
          "",
          "[Removed Lines]",
          "2492:       hash_data.size = o_strlen(value);",
          "",
          "[Added Lines]",
          "2492:       hash_data.size = (unsigned int)o_strlen(value);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3034:           str_authorization_details = json_dumps(j_authorization_details, JSON_COMPACT);",
          "3035:         }",
          "3036:         if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_MARIADB) {",
          "3038:         } else if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_PGSQL) {",
          "3040:         } else { // HOEL_DB_TYPE_SQLITE",
          "3042:         }",
          "3043:         if (u_map_count(additional_parameters)) {",
          "3044:           if ((j_additional_parameters = json_object()) != NULL) {",
          "",
          "[Removed Lines]",
          "3037:           expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (unsigned int)config->request_uri_duration));",
          "3039:           expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (unsigned int)config->request_uri_duration ));",
          "3041:           expires_at_clause = msprintf(\"%u\", (now + (unsigned int)config->request_uri_duration));",
          "",
          "[Added Lines]",
          "3037:           expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (time_t)config->request_uri_duration));",
          "3039:           expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (time_t)config->request_uri_duration ));",
          "3041:           expires_at_clause = msprintf(\"%u\", (now + (time_t)config->request_uri_duration));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3279:               if (dig_alg != GNUTLS_DIG_UNKNOWN) {",
          "3280:                 hash_data.data = (unsigned char*)access_token;",
          "3282:                 if (gnutls_fingerprint(dig_alg, &hash_data, at_hash, &at_hash_len) == GNUTLS_E_SUCCESS) {",
          "3283:                   if (o_base64url_encode(at_hash, at_hash_len/2, (unsigned char *)at_hash_encoded, &at_hash_encoded_len)) {",
          "3284:                     json_object_set_new(j_user_info, \"at_hash\", json_stringn(at_hash_encoded, at_hash_encoded_len));",
          "",
          "[Removed Lines]",
          "3281:                 hash_data.size = o_strlen(access_token);",
          "",
          "[Added Lines]",
          "3281:                 hash_data.size = (unsigned int)o_strlen(access_token);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3298:               if (dig_alg != GNUTLS_DIG_UNKNOWN) {",
          "3299:                 hash_data.data = (unsigned char*)code;",
          "3301:                 if (gnutls_fingerprint(dig_alg, &hash_data, c_hash, &c_hash_len) == GNUTLS_E_SUCCESS) {",
          "3302:                   if (o_base64url_encode(c_hash, c_hash_len/2, (unsigned char *)c_hash_encoded, &c_hash_encoded_len)) {",
          "3303:                     json_object_set_new(j_user_info, \"c_hash\", json_stringn(c_hash_encoded, c_hash_encoded_len));",
          "",
          "[Removed Lines]",
          "3300:                 hash_data.size = o_strlen(code);",
          "",
          "[Added Lines]",
          "3300:                 hash_data.size = (unsigned int)o_strlen(code);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3323:               if (dig_alg != GNUTLS_DIG_UNKNOWN) {",
          "3324:                 hash_data.data = (unsigned char*)refresh_token;",
          "3326:                 if (gnutls_fingerprint(dig_alg, &hash_data, rt_hash, &rt_hash_len) == GNUTLS_E_SUCCESS) {",
          "3327:                   if (o_base64url_encode(rt_hash, rt_hash_len/2, (unsigned char *)rt_hash_encoded, &rt_hash_encoded_len)) {",
          "3328:                     json_object_set_new(j_user_info, \"urn:openid:params:jwt:claim:rt_hash\", json_stringn(rt_hash_encoded, rt_hash_encoded_len));",
          "",
          "[Removed Lines]",
          "3325:                 hash_data.size = o_strlen(refresh_token);",
          "",
          "[Added Lines]",
          "3325:                 hash_data.size = (unsigned int)o_strlen(refresh_token);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3655:         last_seen_clause = msprintf(\"%u\", (now));",
          "3656:       }",
          "3657:       if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_MARIADB) {",
          "3659:       } else if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_PGSQL) {",
          "3661:       } else { // HOEL_DB_TYPE_SQLITE",
          "3663:       }",
          "3664:       if (j_claims_request != NULL) {",
          "3665:         if ((str_claims_request = json_dumps(j_claims_request, JSON_COMPACT)) == NULL) {",
          "",
          "[Removed Lines]",
          "3658:         expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (unsigned int)duration));",
          "3660:         expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (unsigned int)duration ));",
          "3662:         expires_at_clause = msprintf(\"%u\", (now + (unsigned int)duration));",
          "",
          "[Added Lines]",
          "3658:         expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (time_t)duration));",
          "3660:         expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (time_t)duration ));",
          "3662:         expires_at_clause = msprintf(\"%u\", (now + (time_t)duration));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4135:         }",
          "4136:         time(&now);",
          "4137:         if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_MARIADB) {",
          "4139:         } else if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_PGSQL) {",
          "4141:         } else { // HOEL_DB_TYPE_SQLITE",
          "4143:         }",
          "4144:         if (j_authorization_details != NULL) {",
          "4145:           str_authorization_details = json_dumps(j_authorization_details, JSON_COMPACT);",
          "",
          "[Removed Lines]",
          "4138:           expiration_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (unsigned int)config->code_duration ));",
          "4140:           expiration_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (unsigned int)config->code_duration ));",
          "4142:           expiration_clause = msprintf(\"%u\", (now + (unsigned int)config->code_duration ));",
          "",
          "[Added Lines]",
          "4138:           expiration_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (time_t)config->code_duration ));",
          "4140:           expiration_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (time_t)config->code_duration ));",
          "4142:           expiration_clause = msprintf(\"%u\", (now + (time_t)config->code_duration ));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4406:     if (is_pkce_char_valid(code_verifier)) {",
          "4407:       if (0 == o_strncmp(GLEWLWYD_CODE_CHALLENGE_S256_PREFIX, json_string_value(json_object_get(j_result_code, \"code_challenge\")), o_strlen(GLEWLWYD_CODE_CHALLENGE_S256_PREFIX))) {",
          "4408:         key_data.data = (unsigned char *)code_verifier;",
          "4410:         if (gnutls_fingerprint(GNUTLS_DIG_SHA256, &key_data, code_verifier_hash, &code_verifier_hash_len) == GNUTLS_E_SUCCESS) {",
          "4411:           if (o_base64url_encode(code_verifier_hash, code_verifier_hash_len, code_verifier_hash_b64, &code_verifier_hash_b64_len)) {",
          "4412:             code_verifier_hash_b64[code_verifier_hash_b64_len] = '\\0';",
          "",
          "[Removed Lines]",
          "4409:         key_data.size = o_strlen(code_verifier);",
          "",
          "[Added Lines]",
          "4409:         key_data.size = (unsigned int)o_strlen(code_verifier);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4929:       json_decref(j_query);",
          "4930:       if (res == H_OK) {",
          "4931:         if (json_array_size(j_result) > 0) {",
          "4933:           json_object_set(json_array_get(j_result, 0), \"rolling_expiration\", json_integer_value(json_object_get(json_array_get(j_result, 0), \"gpor_rolling_expiration\"))?json_true():json_false());",
          "4934:           json_object_del(json_array_get(j_result, 0), \"gpor_rolling_expiration\");",
          "4935:           json_object_del(json_array_get(j_result, 0), \"gpor_enabled\");",
          "",
          "[Removed Lines]",
          "4932:           enabled = json_integer_value(json_object_get(json_array_get(j_result, 0), \"gpor_enabled\"));",
          "",
          "[Added Lines]",
          "4932:           enabled = (int)json_integer_value(json_object_get(json_array_get(j_result, 0), \"gpor_enabled\"));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "5198:   o_free(last_seen_clause);",
          "5199:   if (refresh_token_duration) {",
          "5200:     if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_MARIADB) {",
          "5202:     } else if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_PGSQL) {",
          "5204:     } else { // HOEL_DB_TYPE_SQLITE",
          "5206:     }",
          "5207:     json_object_set_new(json_object_get(j_query, \"set\"), \"gpor_expires_at\", json_pack(\"{ss}\", \"raw\", expires_at_clause));",
          "5208:     o_free(expires_at_clause);",
          "",
          "[Removed Lines]",
          "5201:       expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (unsigned int)refresh_token_duration));",
          "5203:       expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (unsigned int)refresh_token_duration));",
          "5205:       expires_at_clause = msprintf(\"%u\", (now + (unsigned int)refresh_token_duration));",
          "",
          "[Added Lines]",
          "5201:       expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (time_t)refresh_token_duration));",
          "5203:       expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (time_t)refresh_token_duration));",
          "5205:       expires_at_clause = msprintf(\"%u\", (now + (time_t)refresh_token_duration));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "7101:     after_slash = o_strstr(redirect_uri, \"://\")+o_strlen(\"://\");",
          "7103:     if (o_strchr(after_slash, '/') != NULL) {",
          "7105:     } else {",
          "7106:       len = o_strlen(after_slash);",
          "7107:     }",
          "",
          "[Removed Lines]",
          "7104:       len = o_strchr(after_slash, '/') - after_slash;",
          "",
          "[Added Lines]",
          "7104:       len = (size_t)(o_strchr(after_slash, '/') - after_slash);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "8184:   if (o_strlen(user_code) == GLEWLWYD_DEVICE_AUTH_USER_CODE_LENGTH+1 && user_code[4] == '-') {",
          "8185:     for (index=0; index<(GLEWLWYD_DEVICE_AUTH_USER_CODE_LENGTH+1); index++) {",
          "8187:     }",
          "8188:     user_code_ucase[GLEWLWYD_DEVICE_AUTH_USER_CODE_LENGTH+1] = '\\0';",
          "8189:     time(&now);",
          "",
          "[Removed Lines]",
          "8186:       user_code_ucase[index] = toupper(user_code[index]);",
          "",
          "[Added Lines]",
          "8186:       user_code_ucase[index] = (char)toupper(user_code[index]);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "8858:         if (!gnutls_x509_crt_init(&cert)) {",
          "8859:           clean_cert = 1;",
          "8860:           cert_dat.data = (unsigned char *)header_cert;",
          "8862:           if (gnutls_x509_crt_import(cert, &cert_dat, GNUTLS_X509_FMT_PEM) < 0) {",
          "8863:             y_log_message(Y_LOG_LEVEL_ERROR, \"check_client_certificate_valid - Error gnutls_x509_crt_import\");",
          "8864:           }",
          "",
          "[Removed Lines]",
          "8861:           cert_dat.size = o_strlen(header_cert);",
          "",
          "[Added Lines]",
          "8861:           cert_dat.size = (unsigned int)o_strlen(header_cert);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "11441:     } else if (j_request != NULL) {",
          "11442:       j_client = json_pack(\"{sisO}\", \"result\", G_OK, \"client\", json_object_get(j_request, \"client\"));",
          "11443:     } else {",
          "11445:     }",
          "11447:     if (!check_result_value(j_client, G_OK)) {",
          "",
          "[Removed Lines]",
          "11444:       j_client = check_client_valid(config, client_id, client_secret, redirect_uri, auth_type, 0, ip_source);",
          "",
          "[Added Lines]",
          "11444:       j_client = check_client_valid(config, client_id, client_secret, redirect_uri, (short unsigned int)auth_type, 0, ip_source);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "11663:     j_email_template = get_ciba_email_content_from_template(config, j_user, j_client, user_req_id, binding_message);",
          "11664:     if (check_result_value(j_email_template, G_OK)) {",
          "11665:       if (ulfius_send_smtp_rich_email(json_string_value(json_object_get(config->j_params, \"oauth-ciba-email-host\")),",
          "11667:                                      json_object_get(config->j_params, \"oauth-ciba-email-use-tls\")==json_true()?1:0,",
          "11668:                                      json_object_get(config->j_params, \"oauth-ciba-email-verify-certificate\")==json_false()?0:1,",
          "11669:                                      !json_string_null_or_empty(json_object_get(config->j_params, \"oauth-ciba-email-user\"))?json_string_value(json_object_get(config->j_params, \"oauth-ciba-email-user\")):NULL,",
          "",
          "[Removed Lines]",
          "11666:                                      json_integer_value(json_object_get(config->j_params, \"oauth-ciba-email-port\")),",
          "",
          "[Added Lines]",
          "11666:                                      (int)json_integer_value(json_object_get(config->j_params, \"oauth-ciba-email-port\")),",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "11730:     if (res == H_OK) {",
          "11731:       time(&now);",
          "11732:       if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_MARIADB) {",
          "11734:       } else if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_PGSQL) {",
          "11736:       } else { // HOEL_DB_TYPE_SQLITE",
          "11738:       }",
          "11739:       j_query = json_pack(\"{sss{ss ss ss* sO ss* ss* ss ss ss* s{ss} ss ss* ss*}}\",",
          "11740:                           \"table\", GLEWLWYD_PLUGIN_OIDC_TABLE_CIBA,",
          "",
          "[Removed Lines]",
          "11733:         expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (unsigned int)requested_expiry));",
          "11735:         expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (unsigned int)requested_expiry ));",
          "11737:         expires_at_clause = msprintf(\"%u\", (now + (unsigned int)requested_expiry));",
          "",
          "[Added Lines]",
          "11733:         expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (time_t)requested_expiry));",
          "11735:         expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (time_t)requested_expiry ));",
          "11737:         expires_at_clause = msprintf(\"%u\", (now + (time_t)requested_expiry));",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "14394:       }",
          "14395:     }",
          "14398:     if (!check_result_value(j_client_checked, G_OK)) {",
          "14399:       u_map_put(&map_redirect, \"error\", \"unauthorized_client\");",
          "14400:       u_map_put(&map_redirect, \"error_description\", json_string_value(json_object_get(j_client, \"error_description\")));",
          "",
          "[Removed Lines]",
          "14397:     j_client_checked = check_client_valid_without_secret(config, client_id, redirect_uri, auth_type, ip_source);",
          "",
          "[Added Lines]",
          "14397:     j_client_checked = check_client_valid_without_secret(config, client_id, redirect_uri, (short unsigned int)auth_type, ip_source);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "14828:                                                   j_authorization_details_processed,",
          "14829:                                                   get_ip_source(request))) != NULL) {",
          "14830:           if (serialize_access_token(config,",
          "14832:                                      0,",
          "14833:                                      json_string_value(json_object_get(json_object_get(json_object_get(j_session, \"session\"), \"user\"), \"username\")),",
          "14834:                                      client_id,",
          "",
          "[Removed Lines]",
          "14831:                                      auth_type,",
          "",
          "[Added Lines]",
          "14831:                                      (unsigned int)auth_type,",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "15311:   if (o_strlen(u_map_get(request->map_url, \"sid\")) == OIDC_SID_LENGTH) {",
          "15312:     if (run_backchannel_logout(config, json_string_value(json_object_get((json_t *)response->shared_data, \"username\")), u_map_get(request->map_url, \"sid\")) == G_OK &&",
          "15313:         disable_tokens_from_session(config, json_string_value(json_object_get((json_t *)response->shared_data, \"username\")), u_map_get(request->map_url, \"sid\")) == G_OK) {",
          "15315:         y_log_message(Y_LOG_LEVEL_DEBUG, \"callback_oidc_end_session_list - Error ulfius_add_same_site_cookie_to_response\");",
          "15316:         response->status = 500;",
          "15317:       }",
          "",
          "[Removed Lines]",
          "15314:       if (ulfius_add_same_site_cookie_to_response(response, json_string_value(json_object_get(config->j_params, \"session-cookie-name\")), \"\", expires, 0, config->glewlwyd_config->glewlwyd_config->cookie_domain, \"/\", config->glewlwyd_config->glewlwyd_config->cookie_secure, 0, config->glewlwyd_config->glewlwyd_config->cookie_same_site) != U_OK) {",
          "",
          "[Added Lines]",
          "15314:       if (ulfius_add_same_site_cookie_to_response(response, json_string_value(json_object_get(config->j_params, \"session-cookie-name\")), \"\", expires, 0, config->glewlwyd_config->glewlwyd_config->cookie_domain, \"/\", (int)config->glewlwyd_config->glewlwyd_config->cookie_secure, 0, (int)config->glewlwyd_config->glewlwyd_config->cookie_same_site) != U_OK) {",
          "",
          "---------------"
        ],
        "src/plugin/register.c||src/plugin/register.c": [
          "File: src/plugin/register.c -> src/plugin/register.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "251:     res = h_update(config->glewlwyd_config->glewlwyd_config->conn, j_query, NULL);",
          "252:     json_decref(j_query);",
          "253:     if (res == H_OK) {",
          "255:       if ((code = o_malloc((code_len+1))) != NULL) {",
          "256:         if (rand_code(code, code_len)) {",
          "257:           if ((code_hash = config->glewlwyd_config->glewlwyd_callback_generate_hash(config->glewlwyd_config, code)) != NULL) {",
          "",
          "[Removed Lines]",
          "254:       code_len = json_integer_value(json_object_get(config->j_parameters, \"verification-code-length\"));",
          "",
          "[Added Lines]",
          "254:       code_len = (size_t)json_integer_value(json_object_get(config->j_parameters, \"verification-code-length\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "260:                 if ((tmp_body = str_replace(get_template_property(config->j_parameters, lang, \"body-pattern\"), \"{TOKEN}\", token)) != NULL) {",
          "261:                   if ((body = str_replace(tmp_body, \"{CODE}\", code)) != NULL) {",
          "262:                     if (ulfius_send_smtp_rich_email(json_string_value(json_object_get(config->j_parameters, \"host\")),",
          "264:                                                    json_object_get(config->j_parameters, \"use-tls\")==json_true()?1:0,",
          "265:                                                    json_object_get(config->j_parameters, \"verify-certificate\")==json_false()?0:1,",
          "266:                                                    !json_string_null_or_empty(json_object_get(config->j_parameters, \"user\"))?json_string_value(json_object_get(config->j_parameters, \"user\")):NULL,",
          "",
          "[Removed Lines]",
          "263:                                                    json_integer_value(json_object_get(config->j_parameters, \"port\")),",
          "",
          "[Added Lines]",
          "263:                                                    (int)json_integer_value(json_object_get(config->j_parameters, \"port\")),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "274:                                                    body) == U_OK) {",
          "275:                       y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Register new user - code sent to email %s at IP Address %s\", email, ip_source);",
          "276:                       if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_MARIADB) {",
          "278:                       } else if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_PGSQL) {",
          "280:                       } else { // HOEL_DB_TYPE_SQLITE",
          "282:                       }",
          "283:                       j_query = json_pack(\"{sss{ssssssssss?sss{ss}ssss}}\",",
          "284:                                           \"table\",",
          "",
          "[Removed Lines]",
          "277:                         expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (unsigned int)json_integer_value(json_object_get(config->j_parameters, \"verification-code-duration\"))));",
          "279:                         expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (unsigned int)json_integer_value(json_object_get(config->j_parameters, \"verification-code-duration\"))));",
          "281:                         expires_at_clause = msprintf(\"%u\", (now + (unsigned int)json_integer_value(json_object_get(config->j_parameters, \"verification-code-duration\"))));",
          "",
          "[Added Lines]",
          "277:                         expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (time_t)json_integer_value(json_object_get(config->j_parameters, \"verification-code-duration\"))));",
          "279:                         expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (time_t)json_integer_value(json_object_get(config->j_parameters, \"verification-code-duration\"))));",
          "281:                         expires_at_clause = msprintf(\"%u\", (now + (time_t)json_integer_value(json_object_get(config->j_parameters, \"verification-code-duration\"))));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "413:             if ((session_hash = config->glewlwyd_config->glewlwyd_callback_generate_hash(config->glewlwyd_config, session)) != NULL) {",
          "414:               time(&now);",
          "415:               if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_MARIADB) {",
          "417:               } else if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_PGSQL) {",
          "419:               } else { // HOEL_DB_TYPE_SQLITE",
          "421:               }",
          "422:               j_query = json_pack(\"{sss{sss{ss}ss}s{sssO}}\",",
          "423:                                   \"table\",",
          "",
          "[Removed Lines]",
          "416:                 expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (unsigned int)json_integer_value(json_object_get(config->j_parameters, \"session-duration\"))));",
          "418:                 expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (unsigned int)json_integer_value(json_object_get(config->j_parameters, \"session-duration\"))));",
          "420:                 expires_at_clause = msprintf(\"%u\", (now + (unsigned int)json_integer_value(json_object_get(config->j_parameters, \"session-duration\"))));",
          "",
          "[Added Lines]",
          "416:                 expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (time_t)json_integer_value(json_object_get(config->j_parameters, \"session-duration\"))));",
          "418:                 expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (time_t)json_integer_value(json_object_get(config->j_parameters, \"session-duration\"))));",
          "420:                 expires_at_clause = msprintf(\"%u\", (now + (time_t)json_integer_value(json_object_get(config->j_parameters, \"session-duration\"))));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "525:             if ((session_hash = config->glewlwyd_config->glewlwyd_callback_generate_hash(config->glewlwyd_config, session)) != NULL) {",
          "526:               time(&now);",
          "527:               if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_MARIADB) {",
          "529:               } else if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_PGSQL) {",
          "531:               } else { // HOEL_DB_TYPE_SQLITE",
          "533:               }",
          "534:               j_query = json_pack(\"{sss{sss{ss}ss}s{sssO}}\",",
          "535:                                   \"table\",",
          "",
          "[Removed Lines]",
          "528:                 expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (unsigned int)json_integer_value(json_object_get(config->j_parameters, \"session-duration\"))));",
          "530:                 expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (unsigned int)json_integer_value(json_object_get(config->j_parameters, \"session-duration\"))));",
          "532:                 expires_at_clause = msprintf(\"%u\", (now + (unsigned int)json_integer_value(json_object_get(config->j_parameters, \"session-duration\"))));",
          "",
          "[Added Lines]",
          "528:                 expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (time_t)json_integer_value(json_object_get(config->j_parameters, \"session-duration\"))));",
          "530:                 expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (time_t)json_integer_value(json_object_get(config->j_parameters, \"session-duration\"))));",
          "532:                 expires_at_clause = msprintf(\"%u\", (now + (time_t)json_integer_value(json_object_get(config->j_parameters, \"session-duration\"))));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "733:             if ((session_hash = config->glewlwyd_config->glewlwyd_callback_generate_hash(config->glewlwyd_config, session)) != NULL) {",
          "734:               time(&now);",
          "735:               if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_MARIADB) {",
          "737:               } else if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_PGSQL) {",
          "739:               } else { // HOEL_DB_TYPE_SQLITE",
          "741:               }",
          "742:               j_query = json_pack(\"{sss{sssssss{ss}ssss}}\",",
          "743:                                   \"table\",",
          "",
          "[Removed Lines]",
          "736:                 expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (unsigned int)json_integer_value(json_object_get(config->j_parameters, \"session-duration\"))));",
          "738:                 expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (unsigned int)json_integer_value(json_object_get(config->j_parameters, \"session-duration\"))));",
          "740:                 expires_at_clause = msprintf(\"%u\", (now + (unsigned int)json_integer_value(json_object_get(config->j_parameters, \"session-duration\"))));",
          "",
          "[Added Lines]",
          "736:                 expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (time_t)json_integer_value(json_object_get(config->j_parameters, \"session-duration\"))));",
          "738:                 expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (time_t)json_integer_value(json_object_get(config->j_parameters, \"session-duration\"))));",
          "740:                 expires_at_clause = msprintf(\"%u\", (now + (time_t)json_integer_value(json_object_get(config->j_parameters, \"session-duration\"))));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1013:         if ((token_hash = config->glewlwyd_config->glewlwyd_callback_generate_hash(config->glewlwyd_config, token)) != NULL) {",
          "1014:           if ((body = str_replace(get_template_email_update_property(config->j_parameters, lang, \"body-pattern\"), \"{TOKEN}\", token)) != NULL) {",
          "1015:             if (ulfius_send_smtp_rich_email(json_string_value(json_object_get(config->j_parameters, \"host\")),",
          "1017:                                            json_object_get(config->j_parameters, \"use-tls\")==json_true()?1:0,",
          "1018:                                            json_object_get(config->j_parameters, \"verify-certificate\")==json_false()?0:1,",
          "1019:                                            !json_string_null_or_empty(json_object_get(config->j_parameters, \"user\"))?json_string_value(json_object_get(config->j_parameters, \"user\")):NULL,",
          "",
          "[Removed Lines]",
          "1016:                                            json_integer_value(json_object_get(config->j_parameters, \"port\")),",
          "",
          "[Added Lines]",
          "1016:                                            (int)json_integer_value(json_object_get(config->j_parameters, \"port\")),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1027:                                            body) == U_OK) {",
          "1028:               y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Update e-mail - token sent to email %s at IP Address %s\", email, ip_source);",
          "1029:               if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_MARIADB) {",
          "1031:               } else if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_PGSQL) {",
          "1033:               } else { // HOEL_DB_TYPE_SQLITE",
          "1035:               }",
          "1036:               j_query = json_pack(\"{sss{sssssssss{ss}ssss}}\",",
          "1037:                                   \"table\",",
          "",
          "[Removed Lines]",
          "1030:                 expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (unsigned int)json_integer_value(json_object_get(config->j_parameters, \"update-email-token-duration\"))));",
          "1032:                 expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (unsigned int)json_integer_value(json_object_get(config->j_parameters, \"update-email-token-duration\"))));",
          "1034:                 expires_at_clause = msprintf(\"%u\", (now + (unsigned int)json_integer_value(json_object_get(config->j_parameters, \"update-email-token-duration\"))));",
          "",
          "[Added Lines]",
          "1030:                 expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (time_t)json_integer_value(json_object_get(config->j_parameters, \"update-email-token-duration\"))));",
          "1032:                 expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (time_t)json_integer_value(json_object_get(config->j_parameters, \"update-email-token-duration\"))));",
          "1034:                 expires_at_clause = msprintf(\"%u\", (now + (time_t)json_integer_value(json_object_get(config->j_parameters, \"update-email-token-duration\"))));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1340:           if ((token_hash = config->glewlwyd_config->glewlwyd_callback_generate_hash(config->glewlwyd_config, token)) != NULL) {",
          "1341:             if ((body = str_replace(get_template_reset_credentials_property(config->j_parameters, lang, \"body-pattern\"), \"{TOKEN}\", token)) != NULL) {",
          "1342:               if (ulfius_send_smtp_rich_email(json_string_value(json_object_get(config->j_parameters, \"host\")),",
          "1344:                                              json_object_get(config->j_parameters, \"use-tls\")==json_true()?1:0,",
          "1345:                                              json_object_get(config->j_parameters, \"verify-certificate\")==json_false()?0:1,",
          "1346:                                              !json_string_null_or_empty(json_object_get(config->j_parameters, \"user\"))?json_string_value(json_object_get(config->j_parameters, \"user\")):NULL,",
          "",
          "[Removed Lines]",
          "1343:                                              json_integer_value(json_object_get(config->j_parameters, \"port\")),",
          "",
          "[Added Lines]",
          "1343:                                              (int)json_integer_value(json_object_get(config->j_parameters, \"port\")),",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1354:                                              body) == U_OK) {",
          "1355:                 y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Reset credentials - token sent to email %s at IP Address %s\", email, ip_source);",
          "1356:                 if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_MARIADB) {",
          "1358:                 } else if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_PGSQL) {",
          "1360:                 } else { // HOEL_DB_TYPE_SQLITE",
          "1362:                 }",
          "1363:                 j_query = json_pack(\"{sss{ssssssss?s{ss}ssss}}\",",
          "1364:                                     \"table\",",
          "",
          "[Removed Lines]",
          "1357:                   expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (unsigned int)json_integer_value(json_object_get(config->j_parameters, \"reset-credentials-token-duration\"))));",
          "1359:                   expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (unsigned int)json_integer_value(json_object_get(config->j_parameters, \"reset-credentials-token-duration\"))));",
          "1361:                   expires_at_clause = msprintf(\"%u\", (now + (unsigned int)json_integer_value(json_object_get(config->j_parameters, \"reset-credentials-token-duration\"))));",
          "",
          "[Added Lines]",
          "1357:                   expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (time_t)json_integer_value(json_object_get(config->j_parameters, \"reset-credentials-token-duration\"))));",
          "1359:                   expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (time_t)json_integer_value(json_object_get(config->j_parameters, \"reset-credentials-token-duration\"))));",
          "1361:                   expires_at_clause = msprintf(\"%u\", (now + (time_t)json_integer_value(json_object_get(config->j_parameters, \"reset-credentials-token-duration\"))));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1513:     if ((token_hash = config->glewlwyd_config->glewlwyd_callback_generate_hash(config->glewlwyd_config, token)) != NULL) {",
          "1514:       time(&now);",
          "1515:       if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_MARIADB) {",
          "1517:       } else if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_PGSQL) {",
          "1519:       } else { // HOEL_DB_TYPE_SQLITE",
          "1521:       }",
          "1522:       j_query = json_pack(\"{sss{ssssssss?s{ss}ssss}}\",",
          "1523:                           \"table\",",
          "",
          "[Removed Lines]",
          "1516:         expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (unsigned int)json_integer_value(json_object_get(config->j_parameters, \"reset-credentials-session-duration\"))));",
          "1518:         expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (unsigned int)json_integer_value(json_object_get(config->j_parameters, \"reset-credentials-session-duration\"))));",
          "1520:         expires_at_clause = msprintf(\"%u\", (now + (unsigned int)json_integer_value(json_object_get(config->j_parameters, \"reset-credentials-session-duration\"))));",
          "",
          "[Added Lines]",
          "1516:         expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (time_t)json_integer_value(json_object_get(config->j_parameters, \"reset-credentials-session-duration\"))));",
          "1518:         expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (time_t)json_integer_value(json_object_get(config->j_parameters, \"reset-credentials-session-duration\"))));",
          "1520:         expires_at_clause = msprintf(\"%u\", (now + (time_t)json_integer_value(json_object_get(config->j_parameters, \"reset-credentials-session-duration\"))));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1639:         if (o_strlen(code_deformatted) == GLEWLWYD_RESET_CREDENTIALS_CODE_LENGTH) {",
          "1640:           code_deformatted_offset = code_deformatted;",
          "1641:           while (*code_deformatted_offset != '\\0') {",
          "1643:             code_deformatted_offset++;",
          "1644:           }",
          "1645:           if ((code_hash = config->glewlwyd_config->glewlwyd_callback_generate_hash(config->glewlwyd_config, code_deformatted)) != NULL) {",
          "1647:               if (0 == o_strcmp(json_string_value(json_array_get(json_object_get(json_object_get(j_user, \"user\"), code_property), i)), code_hash)) {",
          "1648:                 json_array_set_new(json_object_get(json_object_get(j_user, \"user\"), code_property), i, json_pack(\"s+\", \"**USED**\", json_string_value(json_array_get(json_object_get(json_object_get(j_user, \"user\"), code_property), i))));",
          "1649:                 found = 1;",
          "",
          "[Removed Lines]",
          "1646:             for (i=(array_size - json_integer_value(json_object_get(config->j_parameters, \"reset-credentials-code-list-size\"))); !found && i<array_size; i++) {",
          "",
          "[Added Lines]",
          "1646:             for (i=(array_size - (size_t)json_integer_value(json_object_get(config->j_parameters, \"reset-credentials-code-list-size\"))); !found && i<array_size; i++) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1795:   struct tm ts;",
          "1797:   time(&now);",
          "1799:   gmtime_r(&now, &ts);",
          "1800:   strftime(expires, GLEWLWYD_DATE_BUFFER, \"%a, %d %b %Y %T %Z\", &ts);",
          "",
          "[Removed Lines]",
          "1798:   now += json_integer_value(json_object_get(config->j_parameters, \"session-duration\"));",
          "",
          "[Added Lines]",
          "1798:   now += (time_t)json_integer_value(json_object_get(config->j_parameters, \"session-duration\"));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1812:                                         0,",
          "1813:                                         config->glewlwyd_config->glewlwyd_config->cookie_domain,",
          "1814:                                         \"/\",",
          "1816:                                         0,",
          "1818:           config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_REGISTRATION_STARTED, 1, \"plugin\", config->name, NULL);",
          "1819:           y_log_message(Y_LOG_LEVEL_INFO, \"Event register - Plugin '%s' - user '%s' started registration, origin: %s\", config->name, json_string_value(json_object_get(j_parameters, \"username\")), get_ip_source(request));",
          "1820:         } else if (check_result_value(j_result, G_ERROR_PARAM)) {",
          "",
          "[Removed Lines]",
          "1815:                                         config->glewlwyd_config->glewlwyd_config->cookie_secure,",
          "1817:                                         config->glewlwyd_config->glewlwyd_config->cookie_same_site);",
          "",
          "[Added Lines]",
          "1815:                                         (int)config->glewlwyd_config->glewlwyd_config->cookie_secure,",
          "1817:                                         (int)config->glewlwyd_config->glewlwyd_config->cookie_same_site);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1899:                                              get_ip_source(request));",
          "1900:       if (check_result_value(j_result, G_OK)) {",
          "1901:         time(&now);",
          "1903:         gmtime_r(&now, &ts);",
          "1904:         strftime(expires, GLEWLWYD_DATE_BUFFER, \"%a, %d %b %Y %T %Z\", &ts);",
          "1905:         ulfius_add_same_site_cookie_to_response(response,",
          "",
          "[Removed Lines]",
          "1902:         now += json_integer_value(json_object_get(config->j_parameters, \"session-duration\"));",
          "",
          "[Added Lines]",
          "1902:         now += (time_t)json_integer_value(json_object_get(config->j_parameters, \"session-duration\"));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1909:                                       0,",
          "1910:                                       config->glewlwyd_config->glewlwyd_config->cookie_domain,",
          "1911:                                       \"/\",",
          "1913:                                       0,",
          "1915:       } else if (check_result_value(j_result, G_ERROR_PARAM)) {",
          "1916:         response->status = 401;",
          "1917:       } else {",
          "",
          "[Removed Lines]",
          "1912:                                       config->glewlwyd_config->glewlwyd_config->cookie_secure,",
          "1914:                                       config->glewlwyd_config->glewlwyd_config->cookie_same_site);",
          "",
          "[Added Lines]",
          "1912:                                       (int)config->glewlwyd_config->glewlwyd_config->cookie_secure,",
          "1914:                                       (int)config->glewlwyd_config->glewlwyd_config->cookie_same_site);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1928:                                                get_ip_source(request));",
          "1929:         if (check_result_value(j_result, G_OK)) {",
          "1930:           time(&now);",
          "1932:           gmtime_r(&now, &ts);",
          "1933:           strftime(expires, GLEWLWYD_DATE_BUFFER, \"%a, %d %b %Y %T %Z\", &ts);",
          "1934:           ulfius_add_same_site_cookie_to_response(response,",
          "",
          "[Removed Lines]",
          "1931:           now += json_integer_value(json_object_get(config->j_parameters, \"session-duration\"));",
          "",
          "[Added Lines]",
          "1931:           now += (time_t)json_integer_value(json_object_get(config->j_parameters, \"session-duration\"));",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1938:                                         0,",
          "1939:                                         config->glewlwyd_config->glewlwyd_config->cookie_domain,",
          "1940:                                         \"/\",",
          "1942:                                         0,",
          "1944:         } else if (check_result_value(j_result, G_ERROR_PARAM)) {",
          "1945:           response->status = 401;",
          "1946:         } else {",
          "",
          "[Removed Lines]",
          "1941:                                         config->glewlwyd_config->glewlwyd_config->cookie_secure,",
          "1943:                                         config->glewlwyd_config->glewlwyd_config->cookie_same_site);",
          "",
          "[Added Lines]",
          "1941:                                         (int)config->glewlwyd_config->glewlwyd_config->cookie_secure,",
          "1943:                                         (int)config->glewlwyd_config->glewlwyd_config->cookie_same_site);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2043:                                   0,",
          "2044:                                   config->glewlwyd_config->glewlwyd_config->cookie_domain,",
          "2045:                                   \"/\",",
          "2047:                                   0,",
          "2049:     config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_REGISTRATION_CANCELLED, 1, \"plugin\", config->name, NULL);",
          "2050:   }",
          "",
          "[Removed Lines]",
          "2046:                                   config->glewlwyd_config->glewlwyd_config->cookie_secure,",
          "2048:                                   config->glewlwyd_config->glewlwyd_config->cookie_same_site);",
          "",
          "[Added Lines]",
          "2046:                                   (int)config->glewlwyd_config->glewlwyd_config->cookie_secure,",
          "2048:                                   (int)config->glewlwyd_config->glewlwyd_config->cookie_same_site);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2209:                                           0,",
          "2210:                                           config->glewlwyd_config->glewlwyd_config->cookie_domain,",
          "2211:                                           \"/\",",
          "2213:                                           0,",
          "2215:             y_log_message(Y_LOG_LEVEL_INFO, \"Event register - Plugin '%s' - user '%s' registered, origin: %s\", config->name, json_string_value(json_object_get((json_t *)response->shared_data, \"username\")), get_ip_source(request));",
          "2216:             config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_REGISTRATION_COMPLETED, 1, \"plugin\", config->name, NULL);",
          "2217:           } else {",
          "",
          "[Removed Lines]",
          "2212:                                           config->glewlwyd_config->glewlwyd_config->cookie_secure,",
          "2214:                                           config->glewlwyd_config->glewlwyd_config->cookie_same_site);",
          "",
          "[Added Lines]",
          "2212:                                           (int)config->glewlwyd_config->glewlwyd_config->cookie_secure,",
          "2214:                                           (int)config->glewlwyd_config->glewlwyd_config->cookie_same_site);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2374:                                   0,",
          "2375:                                   config->glewlwyd_config->glewlwyd_config->cookie_domain,",
          "2376:                                   \"/\",",
          "2378:                                   0,",
          "2380:     config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_RESET_CREDENTIALS_COMPLETED, 1, \"plugin\", config->name, NULL);",
          "2381:   } else if (res == G_ERROR_PARAM) {",
          "2382:     response->status = 400;",
          "",
          "[Removed Lines]",
          "2377:                                   config->glewlwyd_config->glewlwyd_config->cookie_secure,",
          "2379:                                   config->glewlwyd_config->glewlwyd_config->cookie_same_site);",
          "",
          "[Added Lines]",
          "2377:                                   (int)config->glewlwyd_config->glewlwyd_config->cookie_secure,",
          "2379:                                   (int)config->glewlwyd_config->glewlwyd_config->cookie_same_site);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2423:     j_session = reset_credentials_create_session(config, json_string_value(json_object_get(j_result, \"username\")), json_string_value(json_object_get(j_result, \"callback_url\")), issued_for, u_map_get_case(request->map_header, \"user-agent\"));",
          "2424:     if (check_result_value(j_session, G_OK)) {",
          "2425:       time(&now);",
          "2427:       gmtime_r(&now, &ts);",
          "2428:       strftime(expires, GLEWLWYD_DATE_BUFFER, \"%a, %d %b %Y %T %Z\", &ts);",
          "2429:       ulfius_add_same_site_cookie_to_response(response,",
          "",
          "[Removed Lines]",
          "2426:       now += json_integer_value(json_object_get(config->j_parameters, \"reset-credentials-session-duration\"));",
          "",
          "[Added Lines]",
          "2426:       now += (time_t)json_integer_value(json_object_get(config->j_parameters, \"reset-credentials-session-duration\"));",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2433:                                     0,",
          "2434:                                     config->glewlwyd_config->glewlwyd_config->cookie_domain,",
          "2435:                                     \"/\",",
          "2437:                                     0,",
          "2439:       y_log_message(Y_LOG_LEVEL_INFO, \"Event register - Plugin '%s' - user '%s' opened a reset credential session with e-mail token, origin: %s\", config->name, json_string_value(json_object_get(j_result, \"username\")), get_ip_source(request));",
          "2440:       config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_RESET_CREDENTIALS_STARTED, 1, \"plugin\", config->name, \"verification\", \"email\", NULL);",
          "2441:       config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_RESET_CREDENTIALS_STARTED, 1, \"plugin\", config->name, NULL);",
          "",
          "[Removed Lines]",
          "2436:                                     config->glewlwyd_config->glewlwyd_config->cookie_secure,",
          "2438:                                     config->glewlwyd_config->glewlwyd_config->cookie_same_site);",
          "",
          "[Added Lines]",
          "2436:                                     (int)config->glewlwyd_config->glewlwyd_config->cookie_secure,",
          "2438:                                     (int)config->glewlwyd_config->glewlwyd_config->cookie_same_site);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2469:     j_session = reset_credentials_create_session(config, json_string_value(json_object_get(j_parameters, \"username\")), NULL, issued_for, u_map_get_case(request->map_header, \"user-agent\"));",
          "2470:     if (check_result_value(j_session, G_OK)) {",
          "2471:       time(&now);",
          "2473:       gmtime_r(&now, &ts);",
          "2474:       strftime(expires, GLEWLWYD_DATE_BUFFER, \"%a, %d %b %Y %T %Z\", &ts);",
          "2475:       ulfius_add_same_site_cookie_to_response(response,",
          "",
          "[Removed Lines]",
          "2472:       now += json_integer_value(json_object_get(config->j_parameters, \"reset-credentials-session-duration\"));",
          "",
          "[Added Lines]",
          "2472:       now += (time_t)json_integer_value(json_object_get(config->j_parameters, \"reset-credentials-session-duration\"));",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2479:                                     0,",
          "2480:                                     config->glewlwyd_config->glewlwyd_config->cookie_domain,",
          "2481:                                     \"/\",",
          "2483:                                     0,",
          "2485:       y_log_message(Y_LOG_LEVEL_INFO, \"Event register - Plugin '%s' - user '%s' opened a reset credential session with code, origin: %s\", config->name, json_string_value(json_object_get(j_parameters, \"username\")), get_ip_source(request));",
          "2486:       config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_RESET_CREDENTIALS_STARTED, 1, \"plugin\", config->name, \"verification\", \"code\", NULL);",
          "2487:       config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_RESET_CREDENTIALS_STARTED, 1, \"plugin\", config->name, NULL);",
          "",
          "[Removed Lines]",
          "2482:                                     config->glewlwyd_config->glewlwyd_config->cookie_secure,",
          "2484:                                     config->glewlwyd_config->glewlwyd_config->cookie_same_site);",
          "",
          "[Added Lines]",
          "2482:                                     (int)config->glewlwyd_config->glewlwyd_config->cookie_secure,",
          "2484:                                     (int)config->glewlwyd_config->glewlwyd_config->cookie_same_site);",
          "",
          "---------------"
        ],
        "src/scheme/certificate.c||src/scheme/certificate.c": [
          "File: src/scheme/certificate.c -> src/scheme/certificate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:         cert_dat.size = 0;",
          "143:         if (o_base64_decode_alloc((const unsigned char *)x509_data, o_strlen(x509_data), &dat)) {",
          "144:           cert_dat.data = dat.data;",
          "146:         } else {",
          "147:           y_log_message(Y_LOG_LEVEL_ERROR, \"parse_certificate - Error o_base64_decode_alloc\");",
          "148:         }",
          "149:       } else {",
          "150:         cert_dat.data = (unsigned char *)x509_data;",
          "152:       }",
          "153:       if (gnutls_x509_crt_import(cert, &cert_dat, der_format?GNUTLS_X509_FMT_DER:GNUTLS_X509_FMT_PEM) >= 0) {",
          "154:         ret = gnutls_x509_crt_get_issuer_dn(cert, NULL, &issuer_dn_len);",
          "",
          "[Removed Lines]",
          "145:           cert_dat.size = dat.size;",
          "151:         cert_dat.size = o_strlen(x509_data);",
          "",
          "[Added Lines]",
          "145:           cert_dat.size = (unsigned int)dat.size;",
          "151:         cert_dat.size = (unsigned int)o_strlen(x509_data);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "669:           }",
          "670:           if (!gnutls_x509_trust_list_init(&tlist, 0)) {",
          "671:             if (gnutls_x509_trust_list_add_cas(tlist, &root_x509, 1, 0) >= 0) {",
          "673:                 if (!result) {",
          "674:                   ret = G_OK;",
          "675:                 } else {",
          "",
          "[Removed Lines]",
          "672:               if (gnutls_x509_trust_list_verify_crt(tlist, cert_chain, cert_chain_len, 0, &result, NULL) >= 0) {",
          "",
          "[Added Lines]",
          "672:               if (gnutls_x509_trust_list_verify_crt(tlist, cert_chain, (unsigned int)cert_chain_len, 0, &result, NULL) >= 0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "909:       cur_status = G_OK;",
          "910:       if (!gnutls_x509_crt_init(&cert)) {",
          "911:         cert_dat.data = (unsigned char *)json_string_value(json_object_get(j_element, \"cert-file\"));",
          "913:         if ((res = gnutls_x509_crt_import(cert, &cert_dat, GNUTLS_X509_FMT_PEM)) < 0) {",
          "914:           y_log_message(Y_LOG_LEVEL_ERROR, \"parse_ca_chain - Error gnutls_x509_crt_import: %d\", res);",
          "915:           cur_status = G_ERROR;",
          "",
          "[Removed Lines]",
          "912:         cert_dat.size = json_string_length(json_object_get(j_element, \"cert-file\"));",
          "",
          "[Added Lines]",
          "912:         cert_dat.size = (unsigned int)json_string_length(json_object_get(j_element, \"cert-file\"));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1274:         if (!gnutls_x509_crt_init(&cert)) {",
          "1275:           clean_cert = 1;",
          "1276:           cert_dat.data = (unsigned char *)header_cert;",
          "1278:           if (gnutls_x509_crt_import(cert, &cert_dat, GNUTLS_X509_FMT_PEM) < 0) {",
          "1279:             y_log_message(Y_LOG_LEVEL_DEBUG, \"user_auth_scheme_module_validate certificate - Error gnutls_x509_crt_import\");",
          "1280:             ret = G_ERROR_UNAUTHORIZED;",
          "",
          "[Removed Lines]",
          "1277:           cert_dat.size = o_strlen(header_cert);",
          "",
          "[Added Lines]",
          "1277:           cert_dat.size = (unsigned int)o_strlen(header_cert);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1571:     if (!gnutls_x509_crt_init(&cert)) {",
          "1572:       clean_cert = 1;",
          "1573:       cert_dat.data = (unsigned char *)header_cert;",
          "1575:       if (gnutls_x509_crt_import(cert, &cert_dat, GNUTLS_X509_FMT_PEM) < 0) {",
          "1576:         y_log_message(Y_LOG_LEVEL_DEBUG, \"user_auth_scheme_module_validate certificate - Error gnutls_x509_crt_import\");",
          "1577:         ret = G_ERROR_UNAUTHORIZED;",
          "",
          "[Removed Lines]",
          "1574:       cert_dat.size = o_strlen(header_cert);",
          "",
          "[Added Lines]",
          "1574:       cert_dat.size = (unsigned int)o_strlen(header_cert);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1676:     if (!gnutls_x509_crt_init(&cert)) {",
          "1677:       clean_cert = 1;",
          "1678:       cert_dat.data = (unsigned char *)header_cert;",
          "1680:       if (gnutls_x509_crt_import(cert, &cert_dat, GNUTLS_X509_FMT_PEM) < 0) {",
          "1681:         y_log_message(Y_LOG_LEVEL_DEBUG, \"user_auth_scheme_module_identify certificate - Error gnutls_x509_crt_import\");",
          "1682:       }",
          "",
          "[Removed Lines]",
          "1679:       cert_dat.size = o_strlen(header_cert);",
          "",
          "[Added Lines]",
          "1679:       cert_dat.size = (unsigned int)o_strlen(header_cert);",
          "",
          "---------------"
        ],
        "src/scheme/email.c||src/scheme/email.c": [
          "File: src/scheme/email.c -> src/scheme/email.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "560:   if (user_auth_scheme_module_can_use(config, username, cls) == GLEWLWYD_IS_REGISTERED) {",
          "561:     j_user = config->glewlwyd_module_callback_get_user(config, username);",
          "562:     if (check_result_value(j_user, G_OK)) {",
          "566:           if ((body = str_replace(get_template_property(j_param, json_object_get(j_user, \"user\"), \"body-pattern\"), \"{CODE}\", code)) != NULL) {",
          "567:             if (ulfius_send_smtp_rich_email(json_string_value(json_object_get(j_param, \"host\")),",
          "569:                                            json_object_get(j_param, \"use-tls\")==json_true()?1:0,",
          "570:                                            json_object_get(j_param, \"verify-certificate\")==json_false()?0:1,",
          "571:                                            !json_string_null_or_empty(json_object_get(j_param, \"user\"))?json_string_value(json_object_get(j_param, \"user\")):NULL,",
          "",
          "[Removed Lines]",
          "563:       if ((code = o_malloc((json_integer_value(json_object_get(j_param, \"code-length\")) + 1)*sizeof(char))) != NULL) {",
          "564:         memset(code, 0, (json_integer_value(json_object_get(j_param, \"code-length\")) + 1));",
          "565:         if (generate_new_code(config, j_param, username, code, json_integer_value(json_object_get(j_param, \"code-length\"))) == G_OK) {",
          "568:                                            json_integer_value(json_object_get(j_param, \"port\")),",
          "",
          "[Added Lines]",
          "563:       if ((code = o_malloc(((size_t)json_integer_value(json_object_get(j_param, \"code-length\")) + 1)*sizeof(char))) != NULL) {",
          "564:         memset(code, 0, ((size_t)json_integer_value(json_object_get(j_param, \"code-length\")) + 1));",
          "565:         if (generate_new_code(config, j_param, username, code, (size_t)json_integer_value(json_object_get(j_param, \"code-length\"))) == G_OK) {",
          "568:                                            (int)json_integer_value(json_object_get(j_param, \"port\")),",
          "",
          "---------------"
        ],
        "src/scheme/http.c||src/scheme/http.c": [
          "File: src/scheme/http.c -> src/scheme/http.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:       result = mstrcatf(result, \"%.*s\", (o_strchr(format_offset, '{') - format_offset), format_offset);",
          "77:     }",
          "81:     if (json_is_string(json_object_get(j_user, sub))) {",
          "82:       result = mstrcatf(result, \"%s\", json_string_value(json_object_get(j_user, sub)));",
          "",
          "[Removed Lines]",
          "79:     sub = o_strndup(o_strchr(format_offset, '{')+1, (o_strchr(format_offset, '}')-o_strchr(format_offset, '{')-1));",
          "",
          "[Added Lines]",
          "79:     sub = o_strndup(o_strchr(format_offset, '{')+1, (size_t)(o_strchr(format_offset, '}')-o_strchr(format_offset, '{')-1));",
          "",
          "---------------"
        ],
        "src/scheme/oauth2.c||src/scheme/oauth2.c": [
          "File: src/scheme/oauth2.c -> src/scheme/oauth2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "459:             if (i_build_auth_url_get(&i_session) == I_OK) {",
          "460:               time(&now);",
          "461:               if (config->conn->type==HOEL_DB_TYPE_MARIADB) {",
          "463:               } else if (config->conn->type==HOEL_DB_TYPE_PGSQL) {",
          "465:               } else { // HOEL_DB_TYPE_SQLITE",
          "467:               }",
          "468:               i_export = i_export_session_str(&i_session);",
          "469:               j_query = json_pack(\"{sss{sOs{ss}sssssi}}\",",
          "",
          "[Removed Lines]",
          "462:                 expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "464:                 expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "466:                 expires_at_clause = msprintf(\"%u\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "",
          "[Added Lines]",
          "462:                 expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (time_t)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "464:                 expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (time_t)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "466:                 expires_at_clause = msprintf(\"%u\", (now + (time_t)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "572:               if (i_build_auth_url_get(&i_session) == I_OK) {",
          "573:                 time(&now);",
          "574:                 if (config->conn->type==HOEL_DB_TYPE_MARIADB) {",
          "576:                 } else if (config->conn->type==HOEL_DB_TYPE_PGSQL) {",
          "578:                 } else { // HOEL_DB_TYPE_SQLITE",
          "580:                 }",
          "581:                 i_export = i_export_session_str(&i_session);",
          "582:                 j_query = json_pack(\"{sss{sOs{ss}sssssi}}\",",
          "",
          "[Removed Lines]",
          "575:                   expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "577:                   expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "579:                   expires_at_clause = msprintf(\"%u\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "",
          "[Added Lines]",
          "575:                   expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (time_t)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "577:                   expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (time_t)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "579:                   expires_at_clause = msprintf(\"%u\", (now + (time_t)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "766:                 if (res == H_OK) {",
          "767:                   time(&now);",
          "768:                   if (config->conn->type==HOEL_DB_TYPE_MARIADB) {",
          "770:                   } else if (config->conn->type==HOEL_DB_TYPE_PGSQL) {",
          "772:                   } else { // HOEL_DB_TYPE_SQLITE",
          "774:                   }",
          "775:                   j_last_id = h_last_insert_id(config->conn);",
          "776:                   i_export = i_export_session_str(&i_session);",
          "",
          "[Removed Lines]",
          "769:                     expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "771:                     expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "773:                     expires_at_clause = msprintf(\"%u\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "",
          "[Added Lines]",
          "769:                     expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (time_t)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "771:                     expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (time_t)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "773:                     expires_at_clause = msprintf(\"%u\", (now + (time_t)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "",
          "---------------"
        ],
        "src/scheme/otp.c||src/scheme/otp.c": [
          "File: src/scheme/otp.c -> src/scheme/otp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "533:   if (json_is_object(j_scheme_data)) {",
          "534:     if (json_object_get(j_scheme_data, \"generate-secret\") == json_true()) {",
          "536:       if ((secret = o_malloc(secret_len)) != NULL) {",
          "537:         if (!gnutls_rnd(GNUTLS_RND_KEY, secret, secret_len)) {",
          "538:           if (oath_base32_encode(secret, secret_len, &secret_b32, &secret_b32_len) == OATH_OK) {",
          "",
          "[Removed Lines]",
          "535:       secret_len = json_integer_value(json_object_get((json_t *)cls, \"secret-minimum-size\"))*sizeof(unsigned char);",
          "",
          "[Added Lines]",
          "535:       secret_len = (size_t)json_integer_value(json_object_get((json_t *)cls, \"secret-minimum-size\"))*sizeof(unsigned char);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "743:         if (0 == o_strcmp(json_string_value(json_object_get(json_object_get(j_otp, \"otp\"), \"type\")), \"HOTP\")) {",
          "744:           if ((ret = oath_hotp_validate(secret_decoded,",
          "745:                                         secret_decoded_len,",
          "748:                                         json_string_value(json_object_get(j_scheme_data, \"value\")))) >= 0) {",
          "749:             if (update_otp(config, (json_t *)cls, username, 1) == G_OK) {",
          "750:               ret = G_OK;",
          "",
          "[Removed Lines]",
          "746:                                         json_integer_value(json_object_get(json_object_get(j_otp, \"otp\"), \"moving_factor\")),",
          "747:                                         json_integer_value(json_object_get((json_t *)cls, \"window\")),",
          "",
          "[Added Lines]",
          "746:                                         (uint64_t)json_integer_value(json_object_get(json_object_get(j_otp, \"otp\"), \"moving_factor\")),",
          "747:                                         (size_t)json_integer_value(json_object_get((json_t *)cls, \"window\")),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "763:             if ((ret = oath_totp_validate(secret_decoded,",
          "764:                                           secret_decoded_len,",
          "765:                                           time(NULL),",
          "769:                                           json_string_value(json_object_get(j_scheme_data, \"value\")))) >= 0) {",
          "770:               if (update_otp(config, (json_t *)cls, username, 0) == G_OK) {",
          "771:                 ret = G_OK;",
          "",
          "[Removed Lines]",
          "766:                                           json_integer_value(json_object_get(json_object_get(j_otp, \"otp\"), \"time_step_size\")),",
          "767:                                           json_integer_value(json_object_get((json_t *)cls, \"totp-start-offset\")),",
          "768:                                           json_integer_value(json_object_get((json_t *)cls, \"window\")),",
          "",
          "[Added Lines]",
          "766:                                           (unsigned int)json_integer_value(json_object_get(json_object_get(j_otp, \"otp\"), \"time_step_size\")),",
          "767:                                           (time_t)json_integer_value(json_object_get((json_t *)cls, \"totp-start-offset\")),",
          "768:                                           (size_t)json_integer_value(json_object_get((json_t *)cls, \"window\")),",
          "",
          "---------------"
        ],
        "src/scheme/webauthn.c||src/scheme/webauthn.c": [
          "File: src/scheme/webauthn.c -> src/scheme/webauthn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:   fl = fopen(path, \"r\");",
          "86:   if (fl != NULL) {",
          "87:     fseek(fl, 0, SEEK_END);",
          "89:     if (len) {",
          "90:       cert_content = o_malloc(len);",
          "91:       if (cert_content != NULL) {",
          "",
          "[Removed Lines]",
          "88:     len = ftell(fl);",
          "",
          "[Added Lines]",
          "88:     len = (size_t)ftell(fl);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:           j_return = json_pack(\"{si}\", \"result\", G_ERROR);",
          "98:         } else {",
          "99:           cert_dat.data = (unsigned char *)cert_content;",
          "101:           if (!gnutls_x509_crt_init(&cert)) {",
          "102:             if (gnutls_x509_crt_import(cert, &cert_dat, GNUTLS_X509_FMT_DER) >= 0 || gnutls_x509_crt_import(cert, &cert_dat, GNUTLS_X509_FMT_PEM) >= 0) {",
          "103:               if (!gnutls_x509_crt_get_dn(cert, issued_for, &issued_for_len)) {",
          "",
          "[Removed Lines]",
          "100:           cert_dat.size = len;",
          "",
          "[Added Lines]",
          "100:           cert_dat.size = (unsigned int)len;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "586:       mod_name_escaped = h_escape_string_with_quotes(config->conn, json_string_value(json_object_get(j_params, \"mod_name\")));",
          "587:       username_clause = msprintf(\" = (SELECT gswu_id FROM \"G_TABLE_WEBAUTHN_USER\" WHERE UPPER(gswu_username) = UPPER(%s) AND gswu_mod_name = %s)\", username_escaped, mod_name_escaped);",
          "588:       if (config->conn->type==HOEL_DB_TYPE_MARIADB) {",
          "590:       } else if (config->conn->type==HOEL_DB_TYPE_PGSQL) {",
          "592:       } else { // HOEL_DB_TYPE_SQLITE",
          "594:       }",
          "595:       j_query = json_pack(\"{sss[ssssss]s{sss{ssss}sis{ssss}}}\",",
          "596:                           \"table\",",
          "",
          "[Removed Lines]",
          "589:         expiration_clause = msprintf(\"> FROM_UNIXTIME(%u)\", (now - (unsigned int)json_integer_value(json_object_get(j_params, \"credential-expiration\"))));",
          "591:         expiration_clause = msprintf(\"> TO_TIMESTAMP(%u)\", (now - (unsigned int)json_integer_value(json_object_get(j_params, \"credential-expiration\"))));",
          "593:         expiration_clause = msprintf(\"> %u\", (now - (unsigned int)json_integer_value(json_object_get(j_params, \"credential-expiration\"))));",
          "",
          "[Added Lines]",
          "589:         expiration_clause = msprintf(\"> FROM_UNIXTIME(%u)\", (now - (time_t)json_integer_value(json_object_get(j_params, \"credential-expiration\"))));",
          "591:         expiration_clause = msprintf(\"> TO_TIMESTAMP(%u)\", (now - (time_t)json_integer_value(json_object_get(j_params, \"credential-expiration\"))));",
          "593:         expiration_clause = msprintf(\"> %u\", (now - (time_t)json_integer_value(json_object_get(j_params, \"credential-expiration\"))));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "782:       mod_name_escaped = h_escape_string_with_quotes(config->conn, json_string_value(json_object_get(j_params, \"mod_name\")));",
          "783:       username_clause = msprintf(\" = (SELECT gswu_id FROM \"G_TABLE_WEBAUTHN_USER\" WHERE UPPER(gswu_username) = UPPER(%s) AND gswu_mod_name = %s)\", username_escaped, mod_name_escaped);",
          "784:       if (config->conn->type==HOEL_DB_TYPE_MARIADB) {",
          "786:       } else if (config->conn->type==HOEL_DB_TYPE_PGSQL) {",
          "788:       } else { // HOEL_DB_TYPE_SQLITE",
          "790:       }",
          "791:       j_query = json_pack(\"{sss[ssss]s{sss{ssss}sis{ssss}si}}\",",
          "792:                           \"table\",",
          "",
          "[Removed Lines]",
          "785:         expiration_clause = msprintf(\"> FROM_UNIXTIME(%u)\", (now - (unsigned int)json_integer_value(json_object_get(j_params, \"credential-assertion\"))));",
          "787:         expiration_clause = msprintf(\"> TO_TIMESTAMP(%u)\", (now - (unsigned int)json_integer_value(json_object_get(j_params, \"credential-assertion\"))));",
          "789:         expiration_clause = msprintf(\"> %u\", (now - (unsigned int)json_integer_value(json_object_get(j_params, \"credential-assertion\"))));",
          "",
          "[Added Lines]",
          "785:         expiration_clause = msprintf(\"> FROM_UNIXTIME(%u)\", (now - (time_t)json_integer_value(json_object_get(j_params, \"credential-assertion\"))));",
          "787:         expiration_clause = msprintf(\"> TO_TIMESTAMP(%u)\", (now - (time_t)json_integer_value(json_object_get(j_params, \"credential-assertion\"))));",
          "789:         expiration_clause = msprintf(\"> %u\", (now - (time_t)json_integer_value(json_object_get(j_params, \"credential-assertion\"))));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "900:   for (i=1; i<x5c_array_size; i++) {",
          "901:     cbor_cert = cbor_array_get(x5c_array, i);",
          "902:     cert_dat.data = cbor_bytestring_handle(cbor_cert);",
          "904:     if (gnutls_x509_crt_init(&cert_x509[i]) < 0 || gnutls_x509_crt_import(cert_x509[i], &cert_dat, GNUTLS_X509_FMT_DER) < 0) {",
          "905:       y_log_message(Y_LOG_LEVEL_ERROR, \"validate_apple_certificate_chain - Error import chain cert at index %zu\", i);",
          "906:       ret = G_ERROR;",
          "",
          "[Removed Lines]",
          "903:     cert_dat.size = cbor_bytestring_length(cbor_cert);",
          "",
          "[Added Lines]",
          "903:     cert_dat.size = (unsigned int)cbor_bytestring_length(cbor_cert);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "911:   if (ret == G_OK) {",
          "912:     cert_dat.data = (unsigned char *)json_string_value(json_object_get(json_object_get(j_params, \"apple-root-ca-content\"), \"x509\"));",
          "914:     if (gnutls_x509_crt_init(&root_x509) || gnutls_x509_crt_import(root_x509, &cert_dat, GNUTLS_X509_FMT_PEM)) {",
          "915:       y_log_message(Y_LOG_LEVEL_ERROR, \"validate_apple_certificate_chain - Error import root cert\");",
          "916:       ret = G_ERROR;",
          "",
          "[Removed Lines]",
          "913:     cert_dat.size = json_string_length(json_object_get(json_object_get(j_params, \"apple-root-ca-content\"), \"x509\"));",
          "",
          "[Added Lines]",
          "913:     cert_dat.size = (unsigned int)json_string_length(json_object_get(json_object_get(j_params, \"apple-root-ca-content\"), \"x509\"));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "920:   if (ret == G_OK) {",
          "921:     if (!gnutls_x509_trust_list_init(&tlist, 0)) {",
          "922:       if (gnutls_x509_trust_list_add_cas(tlist, &root_x509, 1, 0) >= 0) {",
          "924:           if (result) {",
          "925:             y_log_message(Y_LOG_LEVEL_DEBUG, \"validate_apple_certificate_chain - certificate chain invalid\");",
          "926:             ret = G_ERROR_UNAUTHORIZED;",
          "",
          "[Removed Lines]",
          "923:         if (gnutls_x509_trust_list_verify_crt(tlist, cert_x509, x5c_array_size, 0, &result, NULL) >= 0) {",
          "",
          "[Added Lines]",
          "923:         if (gnutls_x509_trust_list_verify_crt(tlist, cert_x509, (unsigned int)x5c_array_size, 0, &result, NULL) >= 0) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "965:     json_array_foreach(json_object_get(j_params, \"root-ca-array\"), index, j_cert) {",
          "966:       if (0 == o_strcmp(issuer, json_string_value(json_object_get(j_cert, \"dn\")))) {",
          "967:         cert_dat.data = (unsigned char *)json_string_value(json_object_get(j_cert, \"x509\"));",
          "969:         if (!gnutls_x509_crt_init(&root_x509) && !gnutls_x509_crt_import(root_x509, &cert_dat, GNUTLS_X509_FMT_PEM)) {",
          "970:           cert_x509[0] = cert_leaf;",
          "971:           for (i=1; i<x5c_array_size; i++) {",
          "972:             cbor_cert = cbor_array_get(x5c_array, i);",
          "973:             cert_dat.data = cbor_bytestring_handle(cbor_cert);",
          "975:             if (gnutls_x509_crt_init(&cert_x509[i]) < 0 || gnutls_x509_crt_import(cert_x509[i], &cert_dat, GNUTLS_X509_FMT_DER) < 0) {",
          "976:               y_log_message(Y_LOG_LEVEL_ERROR, \"validate_certificate_from_root - Error import chain cert at index %zu\", i);",
          "977:               ret = G_ERROR;",
          "",
          "[Removed Lines]",
          "968:         cert_dat.size = json_string_length(json_object_get(j_cert, \"x509\"));",
          "974:             cert_dat.size = cbor_bytestring_length(cbor_cert);",
          "",
          "[Added Lines]",
          "968:         cert_dat.size = (unsigned int)json_string_length(json_object_get(j_cert, \"x509\"));",
          "974:             cert_dat.size = (unsigned int)cbor_bytestring_length(cbor_cert);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "996:   if (ret == G_OK) {",
          "997:     if (!gnutls_x509_trust_list_init(&tlist, 0)) {",
          "998:       if (gnutls_x509_trust_list_add_cas(tlist, &root_x509, 1, 0) >= 0) {",
          "1000:           if (result) {",
          "1001:             y_log_message(Y_LOG_LEVEL_DEBUG, \"validate_certificate_from_root - certificate chain invalid\");",
          "1002:             ret = G_ERROR;",
          "",
          "[Removed Lines]",
          "999:         if (gnutls_x509_trust_list_verify_crt(tlist, cert_x509, x5c_array_size+1, 0, &result, NULL) >= 0) {",
          "",
          "[Added Lines]",
          "999:         if (gnutls_x509_trust_list_verify_crt(tlist, cert_x509, (unsigned int)x5c_array_size+1, 0, &result, NULL) >= 0) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1041:         if (o_base64_decode((const unsigned char *)json_string_value(j_cert), json_string_length(j_cert), header_cert_decoded, &header_cert_decoded_len)) {",
          "1042:           if (!gnutls_x509_crt_init(&cert_x509[i])) {",
          "1043:             cert_dat.data = header_cert_decoded;",
          "1045:             if ((ret = gnutls_x509_crt_import(cert_x509[i], &cert_dat, GNUTLS_X509_FMT_DER)) < 0) {",
          "1046:               y_log_message(Y_LOG_LEVEL_ERROR, \"validate_safetynet_ca_root - Error gnutls_x509_crt_import: %d\", ret);",
          "1047:               ret = G_ERROR;",
          "",
          "[Removed Lines]",
          "1044:             cert_dat.size = header_cert_decoded_len;",
          "",
          "[Added Lines]",
          "1044:             cert_dat.size = (unsigned int)header_cert_decoded_len;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1068:   if (ret == G_OK) {",
          "1069:     cert_dat.data = (unsigned char *)json_string_value(json_object_get(json_object_get(j_params, \"google-root-ca-r2-content\"), \"x509\"));",
          "1071:     if (!gnutls_x509_crt_init(&cert_x509[json_array_size(j_header_x5c)]) &&",
          "1072:         !gnutls_x509_crt_import(cert_x509[json_array_size(j_header_x5c)], &cert_dat, GNUTLS_X509_FMT_PEM)) {",
          "1073:       if (!gnutls_x509_crt_init(&root_x509) &&",
          "1074:           !gnutls_x509_crt_import(root_x509, &cert_dat, GNUTLS_X509_FMT_PEM)) {",
          "1075:         if (!gnutls_x509_trust_list_init(&tlist, 0)) {",
          "1076:           if (gnutls_x509_trust_list_add_cas(tlist, &root_x509, 1, 0) >= 0) {",
          "1078:               if (!result) {",
          "1079:                 ret = G_OK;",
          "1080:               } else {",
          "",
          "[Removed Lines]",
          "1070:     cert_dat.size = json_string_length(json_object_get(json_object_get(j_params, \"google-root-ca-r2-content\"), \"x509\"));",
          "1077:             if (gnutls_x509_trust_list_verify_crt(tlist, cert_x509, (json_array_size(j_header_x5c)+1), 0, &result, NULL) >= 0) {",
          "",
          "[Added Lines]",
          "1070:     cert_dat.size = (unsigned int)json_string_length(json_object_get(json_object_get(j_params, \"google-root-ca-r2-content\"), \"x509\"));",
          "1077:             if (gnutls_x509_trust_list_verify_crt(tlist, cert_x509, ((unsigned int)json_array_size(j_header_x5c)+1), 0, &result, NULL) >= 0) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1264:       cert_leaf = cbor_array_get(x5c_array, 0);",
          "1265:       cert_dat.data = cbor_bytestring_handle(cert_leaf);",
          "1268:       if ((ret = gnutls_x509_crt_import(cert, &cert_dat, GNUTLS_X509_FMT_DER)) < 0) {",
          "1269:         json_array_append_new(j_error, json_string(\"Error importing x509 certificate\"));",
          "",
          "[Removed Lines]",
          "1266:       cert_dat.size = cbor_bytestring_length(cert_leaf);",
          "",
          "[Added Lines]",
          "1266:       cert_dat.size = (unsigned int)cbor_bytestring_length(cert_leaf);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1459:       }",
          "1461:       signature.data = cbor_bytestring_handle(sig);",
          "1464:       memcpy(data.data, cbor_bytestring_handle(auth_data), cbor_bytestring_length(auth_data));",
          "1465:       memcpy(data.data + cbor_bytestring_length(auth_data), client_data_hash, client_data_hash_len);",
          "1469:       if (x5c_array == NULL) {",
          "",
          "[Removed Lines]",
          "1462:       signature.size = cbor_bytestring_length(sig);",
          "1466:       data.size = cbor_bytestring_length(auth_data) + client_data_hash_len;",
          "",
          "[Added Lines]",
          "1462:       signature.size = (unsigned int)cbor_bytestring_length(sig);",
          "1466:       data.size = (unsigned int)(cbor_bytestring_length(auth_data) + client_data_hash_len);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1487:         cert_leaf = cbor_array_get(x5c_array, 0);",
          "1488:         cert_dat.data = cbor_bytestring_handle(cert_leaf);",
          "1491:         if ((ret = gnutls_x509_crt_import(cert, &cert_dat, GNUTLS_X509_FMT_DER)) < 0) {",
          "1492:           json_array_append_new(j_error, json_string(\"Error importing x509 certificate\"));",
          "",
          "[Removed Lines]",
          "1489:         cert_dat.size = cbor_bytestring_length(cert_leaf);",
          "",
          "[Added Lines]",
          "1489:         cert_dat.size = (unsigned int)cbor_bytestring_length(cert_leaf);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1727:         break;",
          "1728:       }",
          "1729:       cert_dat.data = header_cert_decoded;",
          "1731:       if ((ret = gnutls_x509_crt_import(cert, &cert_dat, GNUTLS_X509_FMT_DER)) < 0) {",
          "1732:         json_array_append_new(j_error, json_string(\"Error importing x509 certificate\"));",
          "1733:         y_log_message(Y_LOG_LEVEL_DEBUG, \"check_attestation_android_safetynet - Error gnutls_pcert_import_x509_raw: %d\", ret);",
          "",
          "[Removed Lines]",
          "1730:       cert_dat.size = header_cert_decoded_len;",
          "",
          "[Added Lines]",
          "1730:       cert_dat.size = (unsigned int)header_cert_decoded_len;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1866:       }",
          "1867:       att_cert = cbor_array_get(x5c, 0);",
          "1868:       cert_dat.data = cbor_bytestring_handle(att_cert);",
          "1870:       if ((ret = gnutls_x509_crt_import(cert, &cert_dat, GNUTLS_X509_FMT_DER)) < 0) {",
          "1871:         json_array_append_new(j_error, json_string(\"Error importing x509 certificate\"));",
          "1872:         y_log_message(Y_LOG_LEVEL_DEBUG, \"check_attestation_fido_u2f - Error gnutls_pcert_import_x509_raw: %d\", ret);",
          "",
          "[Removed Lines]",
          "1869:       cert_dat.size = cbor_bytestring_length(att_cert);",
          "",
          "[Added Lines]",
          "1869:       cert_dat.size = (unsigned int)cbor_bytestring_length(att_cert);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1942:       data.data = data_signed;",
          "1945:       signature.data = cbor_bytestring_handle(sig);",
          "1948:       if (gnutls_pubkey_verify_data2(pubkey, GNUTLS_SIGN_ECDSA_SHA256, 0, &data, &signature)) {",
          "1949:         json_array_append_new(j_error, json_string(\"Invalid signature\"));",
          "",
          "[Removed Lines]",
          "1943:       data.size = data_signed_offset;",
          "1946:       signature.size = cbor_bytestring_length(sig);",
          "",
          "[Added Lines]",
          "1943:       data.size = (unsigned int)data_signed_offset;",
          "1946:       signature.size = (unsigned int)cbor_bytestring_length(sig);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2169:           rpid = json_string_value(json_object_get(j_params, \"rp-origin\"));",
          "2170:         }",
          "2171:         if (o_strchr(rpid, ':') != NULL) {",
          "2173:         } else {",
          "2174:           rpid_len = o_strlen(rpid);",
          "2175:         }",
          "",
          "[Removed Lines]",
          "2172:           rpid_len = o_strchr(rpid, ':') - rpid;",
          "",
          "[Added Lines]",
          "2172:           rpid_len = (size_t)(o_strchr(rpid, ':') - rpid);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2209:         if (cbor_bs_handle_len < CRED_ID_L_OFFSET+2+credential_id_len) {",
          "2210:           json_array_append_new(j_error, json_string(\"auth_data invalid size\"));",
          "2211:           ret = G_ERROR_PARAM;",
          "",
          "[Removed Lines]",
          "2208:         credential_id_len = cbor_bs_handle[CRED_ID_L_OFFSET+1] | (cbor_bs_handle[CRED_ID_L_OFFSET] << 8);",
          "",
          "[Added Lines]",
          "2208:         credential_id_len = (size_t)(cbor_bs_handle[CRED_ID_L_OFFSET+1] | (cbor_bs_handle[CRED_ID_L_OFFSET] << 8));",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2265:             memcpy(cert_x, cbor_bytestring_handle(cbor_value), cbor_bytestring_length(cbor_value));",
          "2266:             cert_x_len = cbor_bytestring_length(cbor_value);",
          "2267:             g_x.data = cert_x;",
          "2269:           } else if (cbor_isa_negint(cbor_key) && cbor_get_int(cbor_key) == 2 && cbor_isa_bytestring(cbor_value)) {",
          "2270:             has_y = 1;",
          "2271:             memcpy(cert_y, cbor_bytestring_handle(cbor_value), cbor_bytestring_length(cbor_value));",
          "2272:             cert_y_len = cbor_bytestring_length(cbor_value);",
          "2273:             g_y.data = cert_y;",
          "2275:           } else if (cbor_isa_uint(cbor_key) && cbor_get_int(cbor_key) == 1 && cbor_isa_uint(cbor_value) && cbor_get_int(cbor_value) == 2) {",
          "2276:             key_type_valid = 1;",
          "2277:           } else if (cbor_isa_uint(cbor_key) && cbor_get_int(cbor_key) == 3 && cbor_isa_negint(cbor_value)) {",
          "",
          "[Removed Lines]",
          "2268:             g_x.size = cbor_bytestring_length(cbor_value);",
          "2274:             g_y.size = cbor_bytestring_length(cbor_value);",
          "",
          "[Added Lines]",
          "2268:             g_x.size = (unsigned int)cbor_bytestring_length(cbor_value);",
          "2274:             g_y.size = (unsigned int)cbor_bytestring_length(cbor_value);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2414:           j_return = json_pack(\"{si}\", \"result\", G_OK);",
          "2415:           status = 1;",
          "2416:         }",
          "2419:         j_query = json_pack(\"{sss{siss%sOss%sOsi}s{sO}}\",",
          "2420:                             \"table\",",
          "",
          "[Removed Lines]",
          "2417:         counter = cbor_bs_handle[COUNTER_OFFSET+3] | (cbor_bs_handle[COUNTER_OFFSET+2] << 8) | (cbor_bs_handle[COUNTER_OFFSET+1] << 16) | (cbor_bs_handle[COUNTER_OFFSET] << 24);",
          "",
          "[Added Lines]",
          "2417:         counter = (uint32_t)(cbor_bs_handle[COUNTER_OFFSET+3] | (cbor_bs_handle[COUNTER_OFFSET+2] << 8) | (cbor_bs_handle[COUNTER_OFFSET+1] << 16) | (cbor_bs_handle[COUNTER_OFFSET] << 24));",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2595:         rpid = json_string_value(json_object_get(j_params, \"rp-origin\"));",
          "2596:       }",
          "2597:       if (o_strchr(rpid, ':') != NULL) {",
          "2599:       } else {",
          "2600:         rpid_len = o_strlen(rpid);",
          "2601:       }",
          "",
          "[Removed Lines]",
          "2598:         rpid_len = o_strchr(rpid, ':') - rpid;",
          "",
          "[Added Lines]",
          "2598:         rpid_len = (size_t)(o_strchr(rpid, ':') - rpid);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2633:         break;",
          "2634:       }",
          "2635:       counter = auth_data + COUNTER_OFFSET;",
          "2638:       if (gnutls_pubkey_init(&pubkey) < 0) {",
          "2639:         y_log_message(Y_LOG_LEVEL_ERROR, \"check_assertion - Error gnutls_pubkey_init\");",
          "",
          "[Removed Lines]",
          "2636:       counter_value = counter[3] | (counter[2] << 8) | (counter[1] << 16) | (counter[0] << 24);",
          "",
          "[Added Lines]",
          "2636:       counter_value = (size_t)(counter[3] | (counter[2] << 8) | (counter[1] << 16) | (counter[0] << 24));",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2641:         break;",
          "2642:       }",
          "2643:       pubkey_dat.data = (unsigned char *)json_string_value(json_object_get(json_object_get(j_credential, \"credential\"), \"public_key\"));",
          "2645:       if ((ret = gnutls_pubkey_import(pubkey, &pubkey_dat, GNUTLS_X509_FMT_PEM)) < 0) {",
          "2646:         y_log_message(Y_LOG_LEVEL_DEBUG, \"check_assertion - Error gnutls_pubkey_import: %d\", ret);",
          "2647:         ret = G_ERROR;",
          "",
          "[Removed Lines]",
          "2644:       pubkey_dat.size = json_string_length(json_object_get(json_object_get(j_credential, \"credential\"), \"public_key\"));",
          "",
          "[Added Lines]",
          "2644:       pubkey_dat.size = (unsigned int)json_string_length(json_object_get(json_object_get(j_credential, \"credential\"), \"public_key\"));",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2667:       data.data = data_signed;",
          "2670:       signature.data = dat.data;",
          "2673:       if ((res = gnutls_pubkey_verify_data2(pubkey, GNUTLS_SIGN_ECDSA_SHA256, 0, &data, &signature)) < 0) {",
          "2674:         y_log_message(Y_LOG_LEVEL_DEBUG, \"check_assertion - Invalid signature: %d\", res);",
          "",
          "[Removed Lines]",
          "2668:       data.size = (auth_data_len+cdata_hash_len);",
          "2671:       signature.size = dat.size;",
          "",
          "[Added Lines]",
          "2668:       data.size = (unsigned int)(auth_data_len+cdata_hash_len);",
          "2671:       signature.size = (unsigned int)dat.size;",
          "",
          "---------------"
        ],
        "src/scope.c||src/scope.c": [
          "File: src/scope.c -> src/scope.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:                       \"order_by\",",
          "135:                       \"gs_name\");",
          "136:   if (limit) {",
          "138:   }",
          "139:   if (!o_strnullempty(pattern)) {",
          "140:     pattern_escaped = h_escape_string_with_quotes(config->conn, pattern);",
          "",
          "[Removed Lines]",
          "137:     json_object_set_new(j_query, \"limit\", json_integer(limit));",
          "",
          "[Added Lines]",
          "137:     json_object_set_new(j_query, \"limit\", json_integer((json_int_t)limit));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "463:                             json_object_set(j_scheme, \"scheme_registered\", json_false());",
          "464:                           }",
          "465:                         } else {",
          "467:                         }",
          "468:                       } else {",
          "470:                         y_log_message(Y_LOG_LEVEL_ERROR, \"get_validated_auth_scheme_list_from_scope_list - Error get_user_auth_scheme_module_instance\");",
          "471:                       }",
          "472:                     }",
          "",
          "[Removed Lines]",
          "466:                           json_array_append_new(j_scheme_remove, json_integer(index_scheme));",
          "469:                         json_array_append_new(j_scheme_remove, json_integer(index_scheme));",
          "",
          "[Added Lines]",
          "466:                           json_array_append_new(j_scheme_remove, json_integer((json_int_t)index_scheme));",
          "469:                         json_array_append_new(j_scheme_remove, json_integer((json_int_t)index_scheme));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "474:                       index_scheme = json_array_size(j_scheme_remove);",
          "475:                       do {",
          "476:                         index_scheme--;",
          "478:                       } while (index_scheme != 0);",
          "479:                     }",
          "480:                     json_decref(j_scheme_remove);",
          "",
          "[Removed Lines]",
          "477:                         json_array_remove(j_group, json_integer_value(json_array_get(j_scheme_remove, index_scheme)));",
          "",
          "[Added Lines]",
          "477:                         json_array_remove(j_group, (size_t)json_integer_value(json_array_get(j_scheme_remove, index_scheme)));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "668:                       \"offset\", offset,",
          "669:                       \"order_by\", \"client_id\");",
          "670:   if (limit) {",
          "672:   }",
          "673:   res = h_select(config->conn, j_query, &j_result, NULL);",
          "674:   json_decref(j_query);",
          "",
          "[Removed Lines]",
          "671:     json_object_set_new(j_query, \"limit\", json_integer(limit));",
          "",
          "[Added Lines]",
          "671:     json_object_set_new(j_query, \"limit\", json_integer((json_int_t)limit));",
          "",
          "---------------"
        ],
        "src/session.c||src/session.c": [
          "File: src/session.c -> src/session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "391:                                 \"gus_current\", 1);",
          "392:           if (update_login) {",
          "393:             if (config->conn->type==HOEL_DB_TYPE_MARIADB) {",
          "395:             } else if (config->conn->type==HOEL_DB_TYPE_PGSQL) {",
          "397:             } else { // HOEL_DB_TYPE_SQLITE",
          "399:             }",
          "400:             if (config->conn->type==HOEL_DB_TYPE_MARIADB) {",
          "401:               last_login_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now));",
          "",
          "[Removed Lines]",
          "394:               expiration_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + config->session_expiration));",
          "396:               expiration_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + config->session_expiration));",
          "398:               expiration_clause = msprintf(\"%u\", (now + config->session_expiration));",
          "",
          "[Added Lines]",
          "394:               expiration_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (time_t)config->session_expiration));",
          "396:               expiration_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (time_t)config->session_expiration));",
          "398:               expiration_clause = msprintf(\"%u\", (now + (time_t)config->session_expiration));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "464:         if (update_login) {",
          "466:           if (config->conn->type==HOEL_DB_TYPE_MARIADB) {",
          "468:           } else if (config->conn->type==HOEL_DB_TYPE_PGSQL) {",
          "470:           } else { // HOEL_DB_TYPE_SQLITE",
          "472:           }",
          "473:           if (config->conn->type==HOEL_DB_TYPE_MARIADB) {",
          "474:             last_login_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now));",
          "",
          "[Removed Lines]",
          "467:             expiration_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + config->session_expiration));",
          "469:             expiration_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + config->session_expiration));",
          "471:             expiration_clause = msprintf(\"%u\", (now + config->session_expiration));",
          "",
          "[Added Lines]",
          "467:             expiration_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (time_t)config->session_expiration));",
          "469:             expiration_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (time_t)config->session_expiration));",
          "471:             expiration_clause = msprintf(\"%u\", (now + (time_t)config->session_expiration));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "520:             if (res == H_OK) {",
          "522:               if (config->conn->type==HOEL_DB_TYPE_MARIADB) {",
          "524:               } else if (config->conn->type==HOEL_DB_TYPE_PGSQL) {",
          "526:               } else { // HOEL_DB_TYPE_SQLITE",
          "528:               }",
          "529:               j_query = json_pack(\"{sss{sOsIs{ss}}}\",",
          "530:                                   \"table\",",
          "",
          "[Removed Lines]",
          "523:                 expiration_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (unsigned int)scheme_instance->guasmi_expiration));",
          "525:                 expiration_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (unsigned int)scheme_instance->guasmi_expiration));",
          "527:                 expiration_clause = msprintf(\"%u\", (now + (unsigned int)scheme_instance->guasmi_expiration));",
          "",
          "[Added Lines]",
          "523:                 expiration_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (time_t)scheme_instance->guasmi_expiration));",
          "525:                 expiration_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (time_t)scheme_instance->guasmi_expiration));",
          "527:                 expiration_clause = msprintf(\"%u\", (now + (time_t)scheme_instance->guasmi_expiration));",
          "",
          "---------------"
        ],
        "src/static_compressed_inmemory_website_callback.c||src/static_compressed_inmemory_website_callback.c": [
          "File: src/static_compressed_inmemory_website_callback.c -> src/static_compressed_inmemory_website_callback.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "139: static ssize_t callback_static_file_uncompressed_stream(void * cls, uint64_t pos, char * buf, size_t max) {",
          "140:   (void)(pos);",
          "141:   if (cls != NULL) {",
          "143:   } else {",
          "145:   }",
          "146: }",
          "",
          "[Removed Lines]",
          "142:     return fread (buf, sizeof(char), max, (FILE *)cls);",
          "144:     return U_STREAM_END;",
          "",
          "[Added Lines]",
          "142:     return (ssize_t)fread (buf, sizeof(char), max, (FILE *)cls);",
          "144:     return (ssize_t)U_STREAM_END;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "192:       f = fopen (file_path, \"rb\");",
          "193:       if (f) {",
          "194:         fseek (f, 0, SEEK_END);",
          "196:         fseek (f, 0, SEEK_SET);",
          "198:         content_type = u_map_get_case(&((struct _u_compressed_inmemory_website_config *)user_data)->mime_types, get_filename_ext(file_requested));",
          "",
          "[Removed Lines]",
          "195:         length = ftell (f);",
          "",
          "[Added Lines]",
          "195:         length = (size_t)ftell (f);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "344:         if (compress_mode != U_COMPRESS_NONE) {",
          "345:           if (compress_mode == U_COMPRESS_GZIP && config->allow_cache_compressed && u_map_has_key(&config->gzip_files, file_requested)) {",
          "347:             u_map_put(response->map_header, U_CONTENT_HEADER, U_ACCEPT_GZIP);",
          "349:             content_type = u_map_get_case(&config->mime_types, get_filename_ext(file_requested));",
          "",
          "[Removed Lines]",
          "346:             ulfius_set_binary_body_response(response, 200, u_map_get(&config->gzip_files, file_requested), u_map_get_length(&config->gzip_files, file_requested));",
          "",
          "[Added Lines]",
          "346:             ulfius_set_binary_body_response(response, 200, u_map_get(&config->gzip_files, file_requested), (size_t)u_map_get_length(&config->gzip_files, file_requested));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "353:             u_map_put(response->map_header, \"Content-Type\", content_type);",
          "354:             u_map_copy_into(response->map_header, &config->map_header);",
          "355:           } else if (compress_mode == U_COMPRESS_DEFL && config->allow_cache_compressed && u_map_has_key(&config->deflate_files, file_requested)) {",
          "357:             u_map_put(response->map_header, U_CONTENT_HEADER, U_ACCEPT_DEFLATE);",
          "359:             content_type = u_map_get_case(&config->mime_types, get_filename_ext(file_requested));",
          "",
          "[Removed Lines]",
          "356:             ulfius_set_binary_body_response(response, 200, u_map_get(&config->deflate_files, file_requested), u_map_get_length(&config->deflate_files, file_requested));",
          "",
          "[Added Lines]",
          "356:             ulfius_set_binary_body_response(response, 200, u_map_get(&config->deflate_files, file_requested), (size_t)u_map_get_length(&config->deflate_files, file_requested));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "381:                     u_map_copy_into(response->map_header, &config->map_header);",
          "383:                     fseek (f, 0, SEEK_END);",
          "385:                     fseek (f, 0, SEEK_SET);",
          "387:                     if (length) {",
          "",
          "[Removed Lines]",
          "384:                     offset = length = ftell (f);",
          "",
          "[Added Lines]",
          "384:                     offset = length = (size_t)ftell (f);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "438:                             if (compress_mode == U_COMPRESS_GZIP) {",
          "439:                               if (config->allow_cache_compressed) {",
          "440:                                 u_map_put_binary(&config->gzip_files, file_requested, data_zip, 0, defstream.total_out);",
          "442:                               } else {",
          "443:                                 ulfius_set_binary_body_response(response, 200, data_zip, defstream.total_out);",
          "444:                               }",
          "445:                             } else {",
          "446:                               if (config->allow_cache_compressed) {",
          "447:                                 u_map_put_binary(&config->deflate_files, file_requested, data_zip, 0, defstream.total_out);",
          "449:                               } else {",
          "450:                                 ulfius_set_binary_body_response(response, 200, data_zip, defstream.total_out);",
          "451:                               }",
          "",
          "[Removed Lines]",
          "441:                                 ulfius_set_binary_body_response(response, 200, u_map_get(&config->gzip_files, file_requested), u_map_get_length(&config->gzip_files, file_requested));",
          "448:                                 ulfius_set_binary_body_response(response, 200, u_map_get(&config->deflate_files, file_requested), u_map_get_length(&config->deflate_files, file_requested));",
          "",
          "[Added Lines]",
          "441:                                 ulfius_set_binary_body_response(response, 200, u_map_get(&config->gzip_files, file_requested), (size_t)u_map_get_length(&config->gzip_files, file_requested));",
          "448:                                 ulfius_set_binary_body_response(response, 200, u_map_get(&config->deflate_files, file_requested), (size_t)u_map_get_length(&config->deflate_files, file_requested));",
          "",
          "---------------"
        ],
        "src/static_compressed_inmemory_website_callback.h||src/static_compressed_inmemory_website_callback.h": [
          "File: src/static_compressed_inmemory_website_callback.h -> src/static_compressed_inmemory_website_callback.h"
        ],
        "src/user.c||src/user.c": [
          "File: src/user.c -> src/user.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1200:   j_result = auth_check_user_credentials(config->glewlwyd_config, username, password);",
          "1201:   if (json_is_integer(json_object_get(j_result, \"result\"))) {",
          "1203:   } else {",
          "1204:     y_log_message(Y_LOG_LEVEL_ERROR, \"glewlwyd_module_callback_check_user_password - Error auth_check_user_credentials\");",
          "1205:     ret = G_ERROR;",
          "",
          "[Removed Lines]",
          "1202:     ret = json_integer_value(json_object_get(j_result, \"result\"));",
          "",
          "[Added Lines]",
          "1202:     ret = (int)json_integer_value(json_object_get(j_result, \"result\"));",
          "",
          "---------------"
        ],
        "src/user/database.c||src/user/database.c": [
          "File: src/user/database.c -> src/user/database.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "538:         if ((salt_list = o_malloc((json_array_size(j_result)+1)*sizeof(char *))) != NULL) {",
          "539:           json_array_foreach(j_result, index, j_element) {",
          "540:             if ((str_iterator = o_strchr(json_string_value(json_object_get(j_element, \"guw_password\")), G_PBKDF2_ITERATOR_SEP)) != NULL) {",
          "542:               json_array_append_new(j_iterations, json_integer(strtol(str_iterator+1, NULL, 10)));",
          "543:             } else {",
          "544:               gc_password_len = json_string_length(json_object_get(j_element, \"guw_password\"));",
          "",
          "[Removed Lines]",
          "541:               gc_password_len = o_strchr(json_string_value(json_object_get(j_element, \"guw_password\")), G_PBKDF2_ITERATOR_SEP) - json_string_value(json_object_get(j_element, \"guw_password\"));",
          "",
          "[Added Lines]",
          "541:               gc_password_len = (size_t)(o_strchr(json_string_value(json_object_get(j_element, \"guw_password\")), G_PBKDF2_ITERATOR_SEP) - json_string_value(json_object_get(j_element, \"guw_password\")));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "845:         if (0 == o_strcmp(json_string_value(json_object_get(j_parameters, \"connection-type\")), \"sqlite\")) {",
          "846:           ((struct mod_parameters *)*cls)->conn = h_connect_sqlite(json_string_value(json_object_get(j_parameters, \"sqlite-dbpath\")));",
          "847:         } else if (0 == o_strcmp(json_string_value(json_object_get(j_parameters, \"connection-type\")), \"mariadb\")) {",
          "849:         } else if (0 == o_strcmp(json_string_value(json_object_get(j_parameters, \"connection-type\")), \"postgre\")) {",
          "850:           ((struct mod_parameters *)*cls)->conn = h_connect_pgsql(json_string_value(json_object_get(j_parameters, \"postgre-conninfo\")));",
          "851:         }",
          "",
          "[Removed Lines]",
          "848:           ((struct mod_parameters *)*cls)->conn = h_connect_mariadb(json_string_value(json_object_get(j_parameters, \"mariadb-host\")), json_string_value(json_object_get(j_parameters, \"mariadb-user\")), json_string_value(json_object_get(j_parameters, \"mariadb-password\")), json_string_value(json_object_get(j_parameters, \"mariadb-dbname\")), json_integer_value(json_object_get(j_parameters, \"mariadb-port\")), NULL);",
          "",
          "[Added Lines]",
          "848:           ((struct mod_parameters *)*cls)->conn = h_connect_mariadb(json_string_value(json_object_get(j_parameters, \"mariadb-host\")), json_string_value(json_object_get(j_parameters, \"mariadb-user\")), json_string_value(json_object_get(j_parameters, \"mariadb-password\")), json_string_value(json_object_get(j_parameters, \"mariadb-dbname\")), (unsigned int)json_integer_value(json_object_get(j_parameters, \"mariadb-port\")), NULL);",
          "",
          "---------------"
        ],
        "src/user/ldap.c||src/user/ldap.c": [
          "File: src/user/ldap.c -> src/user/ldap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:     to_return = strdup(\"\");",
          "51:     len = o_strlen(input);",
          "52:     for (i=0; i < len && to_return != NULL; i++) {",
          "54:       if (c == '*') {",
          "56:         tmp = msprintf(\"%s\\\\2a\", to_return);",
          "",
          "[Removed Lines]",
          "53:       unsigned char c = input[i];",
          "",
          "[Added Lines]",
          "53:       unsigned char c = (unsigned char)input[i];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1249:     if ((result = ldap_search_ext_s(ldap, json_string_value(json_object_get(j_params, \"base-search\")), scope, filter, attrs, attrsonly, NULL, NULL, NULL, LDAP_NO_LIMIT, &answer)) != LDAP_SUCCESS) {",
          "1250:       y_log_message(Y_LOG_LEVEL_ERROR, \"user_module_count_total ldap - Error ldap search, base search: %s, filter: %s: %s\", json_string_value(json_object_get(j_params, \"base-search\")), filter, ldap_err2string(result));",
          "1251:     } else {",
          "1253:     }",
          "1254:     ldap_msgfree(answer);",
          "1255:     ldap_unbind_ext(ldap, NULL, NULL);",
          "",
          "[Removed Lines]",
          "1252:       counter = ldap_count_entries(ldap, answer);",
          "",
          "[Added Lines]",
          "1252:       counter = (size_t)ldap_count_entries(ldap, answer);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1291:     attrs = get_ldap_read_attributes(j_params, 0, (j_properties_user = json_object()));",
          "1292:     j_user_list = json_array();",
          "1293:     do {",
          "1295:       if (ldap_result != LDAP_SUCCESS) {",
          "1296:         y_log_message(Y_LOG_LEVEL_ERROR, \"user_module_get_list ldap - Error ldap_create_page_control, message: %s\", ldap_err2string(ldap_result));",
          "1297:         break;",
          "",
          "[Removed Lines]",
          "1294:       ldap_result = ldap_create_page_control(ldap, json_integer_value(json_object_get(j_params, \"page-size\")), cookie, 0, &page_control);",
          "",
          "[Added Lines]",
          "1294:       ldap_result = ldap_create_page_control(ldap, (ber_int_t)json_integer_value(json_object_get(j_params, \"page-size\")), cookie, 0, &page_control);",
          "",
          "---------------"
        ],
        "src/user/mock.c||src/user/mock.c": [
          "File: src/user/mock.c -> src/user/mock.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "415:       if (0 == o_strcmp(username, json_string_value(json_object_get(j_user, \"username\")))) {",
          "416:         j_new_user = json_deep_copy(j_user);",
          "417:         if (json_is_array(json_object_get((json_t *)cls, \"password\"))) {",
          "419:         }",
          "420:         return json_pack(\"{siso}\", \"result\", G_OK, \"user\", j_new_user);",
          "421:         break;",
          "",
          "[Removed Lines]",
          "418:           json_object_set_new(j_new_user, \"password\", json_integer(json_array_size(json_object_get((json_t *)cls, \"password\"))));",
          "",
          "[Added Lines]",
          "418:           json_object_set_new(j_new_user, \"password\", json_integer((json_int_t)json_array_size(json_object_get((json_t *)cls, \"password\"))));",
          "",
          "---------------"
        ],
        "src/webservice.c||src/webservice.c": [
          "File: src/webservice.c -> src/webservice.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "278:               y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_auth - Error user_session_update (1)\");",
          "279:               response->status = 500;",
          "280:             } else {",
          "282:               y_log_message(Y_LOG_LEVEL_INFO, \"Event - User '%s' authenticated with password\", json_string_value(json_object_get(j_param, \"username\")));",
          "283:             }",
          "284:             o_free(session_uid);",
          "",
          "[Removed Lines]",
          "281:               ulfius_add_same_site_cookie_to_response(response, config->session_key, session_uid, expires, 0, config->cookie_domain, \"/\", config->cookie_secure, 0, config->cookie_same_site);",
          "",
          "[Added Lines]",
          "281:               ulfius_add_same_site_cookie_to_response(response, config->session_key, session_uid, expires, 0, config->cookie_domain, \"/\", (int)config->cookie_secure, 0, (int)config->cookie_same_site);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "304:               y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_auth - Error user_session_update (2)\");",
          "305:               response->status = 500;",
          "306:             } else {",
          "308:             }",
          "309:           } else if (check_result_value(j_result, G_ERROR_NOT_FOUND)) {",
          "310:             response->status = 401;",
          "",
          "[Removed Lines]",
          "307:               ulfius_add_same_site_cookie_to_response(response, config->session_key, session_uid, expires, 0, config->cookie_domain, \"/\", config->cookie_secure, 0, config->cookie_same_site);",
          "",
          "[Added Lines]",
          "307:               ulfius_add_same_site_cookie_to_response(response, config->session_key, session_uid, expires, 0, config->cookie_domain, \"/\", (int)config->cookie_secure, 0, (int)config->cookie_same_site);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "335:               y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_auth - Error user_session_update (3)\");",
          "336:               response->status = 500;",
          "337:             } else {",
          "339:               y_log_message(Y_LOG_LEVEL_INFO, \"Event - User '%s' authenticated with scheme '%s/%s'\", json_string_value(json_object_get(j_param, \"username\")), json_string_value(json_object_get(j_param, \"scheme_type\")), json_string_value(json_object_get(j_param, \"scheme_name\")));",
          "340:             }",
          "341:             o_free(session_uid);",
          "",
          "[Removed Lines]",
          "338:               ulfius_add_same_site_cookie_to_response(response, config->session_key, session_uid, expires, 0, config->cookie_domain, \"/\", config->cookie_secure, 0, config->cookie_same_site);",
          "",
          "[Added Lines]",
          "338:               ulfius_add_same_site_cookie_to_response(response, config->session_key, session_uid, expires, 0, config->cookie_domain, \"/\", (int)config->cookie_secure, 0, (int)config->cookie_same_site);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "368:             y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_auth - Error user_session_update (4)\");",
          "369:             response->status = 500;",
          "370:           } else {",
          "372:             y_log_message(Y_LOG_LEVEL_INFO, \"Event - User '%s' authenticated with scheme '%s/%s'\", json_string_value(json_object_get(j_result, \"username\")), json_string_value(json_object_get(j_param, \"scheme_type\")), json_string_value(json_object_get(j_param, \"scheme_name\")));",
          "373:           }",
          "374:           o_free(session_uid);",
          "",
          "[Removed Lines]",
          "371:             ulfius_add_same_site_cookie_to_response(response, config->session_key, session_uid, expires, 0, config->cookie_domain, \"/\", config->cookie_secure, 0, config->cookie_same_site);",
          "",
          "[Added Lines]",
          "371:             ulfius_add_same_site_cookie_to_response(response, config->session_key, session_uid, expires, 0, config->cookie_domain, \"/\", (int)config->cookie_secure, 0, (int)config->cookie_same_site);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "667:         }",
          "668:         if (json_array_size(json_object_get(j_session, \"session\")) == 1) {",
          "671:         } else {",
          "673:         }",
          "674:       } else {",
          "675:         if (user_session_delete(config, session_uid, NULL) != G_OK) {",
          "",
          "[Removed Lines]",
          "670:           ulfius_add_same_site_cookie_to_response(response, config->session_key, \"\", expires, 0, config->cookie_domain, \"/\", config->cookie_secure, 0, config->cookie_same_site);",
          "672:           ulfius_add_same_site_cookie_to_response(response, config->session_key, session_uid, expires, 0, config->cookie_domain, \"/\", config->cookie_secure, 0, config->cookie_same_site);",
          "",
          "[Added Lines]",
          "670:           ulfius_add_same_site_cookie_to_response(response, config->session_key, \"\", expires, 0, config->cookie_domain, \"/\", (int)config->cookie_secure, 0, (int)config->cookie_same_site);",
          "672:           ulfius_add_same_site_cookie_to_response(response, config->session_key, session_uid, expires, 0, config->cookie_domain, \"/\", (int)config->cookie_secure, 0, (int)config->cookie_same_site);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "677:           response->status = 500;",
          "678:         }",
          "681:       }",
          "682:     }",
          "683:     json_decref(j_session);",
          "",
          "[Removed Lines]",
          "680:         ulfius_add_same_site_cookie_to_response(response, config->session_key, \"\", expires, 0, config->cookie_domain, \"/\", config->cookie_secure, 0, config->cookie_same_site);",
          "",
          "[Added Lines]",
          "680:         ulfius_add_same_site_cookie_to_response(response, config->session_key, \"\", expires, 0, config->cookie_domain, \"/\", (int)config->cookie_secure, 0, (int)config->cookie_same_site);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2371:       j_session = get_users_for_session(config, session_uid);",
          "2372:       if (check_result_value(j_session, G_OK)) {",
          "2373:         ulfius_set_json_body_response(response, 200, json_object_get(j_session, \"session\"));",
          "2375:       } else if (check_result_value(j_session, G_ERROR_NOT_FOUND)) {",
          "2376:         response->status = 401;",
          "2377:       } else {",
          "",
          "[Removed Lines]",
          "2374:         ulfius_add_same_site_cookie_to_response(response, config->session_key, session_uid, expires, 0, config->cookie_domain, \"/\", config->cookie_secure, 0, config->cookie_same_site);",
          "",
          "[Added Lines]",
          "2374:         ulfius_add_same_site_cookie_to_response(response, config->session_key, session_uid, expires, 0, config->cookie_domain, \"/\", (int)config->cookie_secure, 0, (int)config->cookie_same_site);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cf69663b0aab74372ceb97470320238e6e996add",
      "candidate_info": {
        "commit_hash": "cf69663b0aab74372ceb97470320238e6e996add",
        "repo": "babelouest/glewlwyd",
        "commit_url": "https://github.com/babelouest/glewlwyd/commit/cf69663b0aab74372ceb97470320238e6e996add",
        "files": [
          "src/static_compressed_inmemory_website_callback.c",
          "src/static_compressed_inmemory_website_callback.h"
        ],
        "message": "Update static_compressed_inmemory_website_callback",
        "before_after_code_files": [
          "src/static_compressed_inmemory_website_callback.c||src/static_compressed_inmemory_website_callback.c",
          "src/static_compressed_inmemory_website_callback.h||src/static_compressed_inmemory_website_callback.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/static_compressed_inmemory_website_callback.c||src/static_compressed_inmemory_website_callback.c",
            "src/static_compressed_inmemory_website_callback.h||src/static_compressed_inmemory_website_callback.h"
          ],
          "candidate": [
            "src/static_compressed_inmemory_website_callback.c||src/static_compressed_inmemory_website_callback.c",
            "src/static_compressed_inmemory_website_callback.h||src/static_compressed_inmemory_website_callback.h"
          ]
        }
      },
      "candidate_diff": {
        "src/static_compressed_inmemory_website_callback.c||src/static_compressed_inmemory_website_callback.c": [
          "File: src/static_compressed_inmemory_website_callback.c -> src/static_compressed_inmemory_website_callback.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "375:                     y_log_message(Y_LOG_LEVEL_WARNING, \"Static File Server - Unknown mime type for extension %s\", get_filename_ext(file_requested));",
          "376:                   }",
          "377:                   if (!string_array_has_value((const char **)config->mime_types_compressed, content_type)) {",
          "414:                         }",
          "434:                             ret = U_CALLBACK_ERROR;",
          "435:                           }",
          "438:                         if (ret == U_CALLBACK_CONTINUE) {",
          "442:                             }",
          "447:                             }",
          "449:                           }",
          "451:                         }",
          "452:                       }",
          "458:                     }",
          "460:                   }",
          "462:                 } else {",
          "463:                   if (((struct _u_compressed_inmemory_website_config *)user_data)->redirect_on_404 == NULL) {",
          "464:                     ret = U_CALLBACK_IGNORE;",
          "",
          "[Removed Lines]",
          "378:                     compress_mode = U_COMPRESS_NONE;",
          "379:                   }",
          "381:                   u_map_put(response->map_header, \"Content-Type\", content_type);",
          "382:                   u_map_copy_into(response->map_header, &config->map_header);",
          "384:                   fseek (f, 0, SEEK_END);",
          "385:                   offset = length = ftell (f);",
          "386:                   fseek (f, 0, SEEK_SET);",
          "388:                   if (length) {",
          "389:                     if ((file_content_orig = file_content = o_malloc(length)) != NULL && (data_zip = o_malloc((2*length)+20)) != NULL) {",
          "390:                       defstream.zalloc = u_zalloc;",
          "391:                       defstream.zfree = u_zfree;",
          "392:                       defstream.opaque = Z_NULL;",
          "393:                       defstream.avail_in = (uInt)length;",
          "394:                       defstream.next_in = (Bytef *)file_content;",
          "395:                       while ((read_length = fread(file_content, sizeof(char), offset, f))) {",
          "396:                         file_content += read_length;",
          "397:                         offset -= read_length;",
          "398:                       }",
          "400:                       if (compress_mode == U_COMPRESS_GZIP) {",
          "401:                         if (deflateInit2(&defstream,",
          "402:                                          Z_DEFAULT_COMPRESSION,",
          "403:                                          Z_DEFLATED,",
          "404:                                          U_GZIP_WINDOW_BITS | U_GZIP_ENCODING,",
          "405:                                          8,",
          "406:                                          Z_DEFAULT_STRATEGY) != Z_OK) {",
          "407:                           y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error deflateInit (gzip)\");",
          "408:                           ret = U_CALLBACK_ERROR;",
          "409:                         }",
          "410:                       } else {",
          "411:                         if (deflateInit(&defstream, Z_BEST_COMPRESSION) != Z_OK) {",
          "412:                           y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error deflateInit (deflate)\");",
          "413:                           ret = U_CALLBACK_ERROR;",
          "415:                       }",
          "416:                       if (ret == U_CALLBACK_CONTINUE) {",
          "417:                         do {",
          "418:                           if ((data_zip = o_realloc(data_zip, data_zip_len+_U_W_BLOCK_SIZE)) != NULL) {",
          "419:                             defstream.avail_out = _U_W_BLOCK_SIZE;",
          "420:                             defstream.next_out = ((Bytef *)data_zip)+data_zip_len;",
          "421:                             switch ((res = deflate(&defstream, Z_FINISH))) {",
          "422:                               case Z_OK:",
          "423:                               case Z_STREAM_END:",
          "424:                               case Z_BUF_ERROR:",
          "425:                                 break;",
          "426:                               default:",
          "427:                                 y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error deflate %d\", res);",
          "428:                                 ret = U_CALLBACK_ERROR;",
          "429:                                 break;",
          "430:                             }",
          "431:                             data_zip_len += _U_W_BLOCK_SIZE - defstream.avail_out;",
          "432:                           } else {",
          "433:                             y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error allocating resources for data_zip\");",
          "436:                         } while (U_CALLBACK_CONTINUE == ret && defstream.avail_out == 0);",
          "439:                           if (compress_mode == U_COMPRESS_GZIP) {",
          "440:                             if (config->allow_cache_compressed) {",
          "441:                               u_map_put_binary(&config->gzip_files, file_requested, data_zip, 0, defstream.total_out);",
          "443:                             ulfius_set_binary_body_response(response, 200, u_map_get(&config->gzip_files, file_requested), u_map_get_length(&config->gzip_files, file_requested));",
          "444:                           } else {",
          "445:                             if (config->allow_cache_compressed) {",
          "446:                               u_map_put_binary(&config->deflate_files, file_requested, data_zip, 0, defstream.total_out);",
          "448:                             ulfius_set_binary_body_response(response, 200, u_map_get(&config->deflate_files, file_requested), u_map_get_length(&config->deflate_files, file_requested));",
          "450:                           u_map_put(response->map_header, U_CONTENT_HEADER, compress_mode==U_COMPRESS_GZIP?U_ACCEPT_GZIP:U_ACCEPT_DEFLATE);",
          "453:                       deflateEnd(&defstream);",
          "454:                       o_free(data_zip);",
          "455:                     } else {",
          "456:                       y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error allocating resource for file_content or data_zip\");",
          "457:                       ret = U_CALLBACK_ERROR;",
          "459:                     o_free(file_content_orig);",
          "461:                   fclose(f);",
          "",
          "[Added Lines]",
          "378:                     ret = callback_static_file_uncompressed(request, response, user_data);",
          "379:                   } else {",
          "380:                     u_map_put(response->map_header, \"Content-Type\", content_type);",
          "381:                     u_map_copy_into(response->map_header, &config->map_header);",
          "383:                     fseek (f, 0, SEEK_END);",
          "384:                     offset = length = ftell (f);",
          "385:                     fseek (f, 0, SEEK_SET);",
          "387:                     if (length) {",
          "388:                       if ((file_content_orig = file_content = o_malloc(length)) != NULL && (data_zip = o_malloc((2*length)+20)) != NULL) {",
          "389:                         defstream.zalloc = u_zalloc;",
          "390:                         defstream.zfree = u_zfree;",
          "391:                         defstream.opaque = Z_NULL;",
          "392:                         defstream.avail_in = (uInt)length;",
          "393:                         defstream.next_in = (Bytef *)file_content;",
          "394:                         while ((read_length = fread(file_content, sizeof(char), offset, f))) {",
          "395:                           file_content += read_length;",
          "396:                           offset -= read_length;",
          "399:                         if (compress_mode == U_COMPRESS_GZIP) {",
          "400:                           if (deflateInit2(&defstream,",
          "401:                                            Z_DEFAULT_COMPRESSION,",
          "402:                                            Z_DEFLATED,",
          "403:                                            U_GZIP_WINDOW_BITS | U_GZIP_ENCODING,",
          "404:                                            8,",
          "405:                                            Z_DEFAULT_STRATEGY) != Z_OK) {",
          "406:                             y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error deflateInit (gzip)\");",
          "409:                         } else {",
          "410:                           if (deflateInit(&defstream, Z_BEST_COMPRESSION) != Z_OK) {",
          "411:                             y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error deflateInit (deflate)\");",
          "412:                             ret = U_CALLBACK_ERROR;",
          "413:                           }",
          "414:                         }",
          "416:                           do {",
          "417:                             if ((data_zip = o_realloc(data_zip, data_zip_len+_U_W_BLOCK_SIZE)) != NULL) {",
          "418:                               defstream.avail_out = _U_W_BLOCK_SIZE;",
          "419:                               defstream.next_out = ((Bytef *)data_zip)+data_zip_len;",
          "420:                               switch ((res = deflate(&defstream, Z_FINISH))) {",
          "421:                                 case Z_OK:",
          "422:                                 case Z_STREAM_END:",
          "423:                                 case Z_BUF_ERROR:",
          "424:                                   break;",
          "425:                                 default:",
          "426:                                   y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error deflate %d\", res);",
          "427:                                   ret = U_CALLBACK_ERROR;",
          "428:                                   break;",
          "429:                               }",
          "430:                               data_zip_len += _U_W_BLOCK_SIZE - defstream.avail_out;",
          "431:                             } else {",
          "432:                               y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error allocating resources for data_zip\");",
          "433:                               ret = U_CALLBACK_ERROR;",
          "435:                           } while (U_CALLBACK_CONTINUE == ret && defstream.avail_out == 0);",
          "437:                           if (ret == U_CALLBACK_CONTINUE) {",
          "438:                             if (compress_mode == U_COMPRESS_GZIP) {",
          "439:                               if (config->allow_cache_compressed) {",
          "440:                                 u_map_put_binary(&config->gzip_files, file_requested, data_zip, 0, defstream.total_out);",
          "441:                                 ulfius_set_binary_body_response(response, 200, u_map_get(&config->gzip_files, file_requested), u_map_get_length(&config->gzip_files, file_requested));",
          "442:                               } else {",
          "443:                                 ulfius_set_binary_body_response(response, 200, data_zip, defstream.total_out);",
          "444:                               }",
          "445:                             } else {",
          "446:                               if (config->allow_cache_compressed) {",
          "447:                                 u_map_put_binary(&config->deflate_files, file_requested, data_zip, 0, defstream.total_out);",
          "448:                                 ulfius_set_binary_body_response(response, 200, u_map_get(&config->deflate_files, file_requested), u_map_get_length(&config->deflate_files, file_requested));",
          "449:                               } else {",
          "450:                                 ulfius_set_binary_body_response(response, 200, data_zip, defstream.total_out);",
          "451:                               }",
          "453:                             u_map_put(response->map_header, U_CONTENT_HEADER, compress_mode==U_COMPRESS_GZIP?U_ACCEPT_GZIP:U_ACCEPT_DEFLATE);",
          "456:                         deflateEnd(&defstream);",
          "457:                         o_free(data_zip);",
          "458:                       } else {",
          "459:                         y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error allocating resource for file_content or data_zip\");",
          "460:                         ret = U_CALLBACK_ERROR;",
          "462:                       o_free(file_content_orig);",
          "464:                     fclose(f);",
          "",
          "---------------"
        ],
        "src/static_compressed_inmemory_website_callback.h||src/static_compressed_inmemory_website_callback.h": [
          "File: src/static_compressed_inmemory_website_callback.h -> src/static_compressed_inmemory_website_callback.h"
        ]
      }
    },
    {
      "candidate_hash": "b179ebedc74a5ef7944e33d2e92b2a64c41707b6",
      "candidate_info": {
        "commit_hash": "b179ebedc74a5ef7944e33d2e92b2a64c41707b6",
        "repo": "babelouest/glewlwyd",
        "commit_url": "https://github.com/babelouest/glewlwyd/commit/b179ebedc74a5ef7944e33d2e92b2a64c41707b6",
        "files": [
          "src/misc.c",
          "src/plugin/protocol_oauth2.c",
          "src/plugin/protocol_oidc.c",
          "src/plugin/register.c",
          "src/scheme/oauth2.c",
          "src/scheme/webauthn.c",
          "src/static_compressed_inmemory_website_callback.c",
          "src/static_compressed_inmemory_website_callback.h"
        ],
        "message": "Small refactoring and malloc checks",
        "before_after_code_files": [
          "src/misc.c||src/misc.c",
          "src/plugin/protocol_oauth2.c||src/plugin/protocol_oauth2.c",
          "src/plugin/protocol_oidc.c||src/plugin/protocol_oidc.c",
          "src/plugin/register.c||src/plugin/register.c",
          "src/scheme/oauth2.c||src/scheme/oauth2.c",
          "src/scheme/webauthn.c||src/scheme/webauthn.c",
          "src/static_compressed_inmemory_website_callback.c||src/static_compressed_inmemory_website_callback.c",
          "src/static_compressed_inmemory_website_callback.h||src/static_compressed_inmemory_website_callback.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/static_compressed_inmemory_website_callback.c||src/static_compressed_inmemory_website_callback.c",
            "src/static_compressed_inmemory_website_callback.h||src/static_compressed_inmemory_website_callback.h"
          ],
          "candidate": [
            "src/static_compressed_inmemory_website_callback.c||src/static_compressed_inmemory_website_callback.c",
            "src/static_compressed_inmemory_website_callback.h||src/static_compressed_inmemory_website_callback.h"
          ]
        }
      },
      "candidate_diff": {
        "src/misc.c||src/misc.c": [
          "File: src/misc.c -> src/misc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:     fseek (f, 0, SEEK_END);",
          "60:     length = ftell (f);",
          "61:     fseek (f, 0, SEEK_SET);",
          "63:     if (buffer) {",
          "64:       res = fread (buffer, 1, length, f);",
          "65:       if (res != length) {",
          "",
          "[Removed Lines]",
          "62:     buffer = o_malloc((length+1)*sizeof(char));",
          "",
          "[Added Lines]",
          "62:     buffer = o_malloc((length+1));",
          "",
          "---------------"
        ],
        "src/plugin/protocol_oauth2.c||src/plugin/protocol_oauth2.c": [
          "File: src/plugin/protocol_oauth2.c -> src/plugin/protocol_oauth2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "747:   if (pthread_mutex_lock(&config->insert_lock)) {",
          "748:     y_log_message(Y_LOG_LEVEL_ERROR, \"generate_authorization_code - oauth2 - Error pthread_mutex_lock\");",
          "749:   } else {",
          "751:     if (code != NULL) {",
          "752:       if (rand_string_nonce(code, 32) != NULL) {",
          "753:         code_hash = config->glewlwyd_config->glewlwyd_callback_generate_hash(config->glewlwyd_config, code);",
          "",
          "[Removed Lines]",
          "750:     code = o_malloc(33*sizeof(char));",
          "",
          "[Added Lines]",
          "750:     code = o_malloc(33);",
          "",
          "---------------"
        ],
        "src/plugin/protocol_oidc.c||src/plugin/protocol_oidc.c": [
          "File: src/plugin/protocol_oidc.c -> src/plugin/protocol_oidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1898:     if (json_array_size(j_result)) {",
          "1899:       sub = o_strdup(json_string_value(json_object_get(json_array_get(j_result, 0), \"gposi_sub\")));",
          "1900:     } else {",
          "1902:       if (sub != NULL) {",
          "1904:         rand_string(sub, GLEWLWYD_SUB_LENGTH);",
          "",
          "[Removed Lines]",
          "1901:       sub = o_malloc((GLEWLWYD_SUB_LENGTH+1)*sizeof(char));",
          "",
          "[Added Lines]",
          "1901:       sub = o_malloc((GLEWLWYD_SUB_LENGTH+1));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1966:     if (json_array_size(j_result)) {",
          "1967:       sub = o_strdup(json_string_value(json_object_get(json_array_get(j_result, 0), \"gposi_sub\")));",
          "1968:     } else {",
          "1970:       if (sub != NULL) {",
          "1972:         rand_string(sub, GLEWLWYD_SUB_LENGTH);",
          "",
          "[Removed Lines]",
          "1969:       sub = o_malloc((GLEWLWYD_SUB_LENGTH+1)*sizeof(char));",
          "",
          "[Added Lines]",
          "1969:       sub = o_malloc((GLEWLWYD_SUB_LENGTH+1));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3067: }",
          "3069: static char * generate_pushed_request_uri(struct _oidc_config * config) {",
          "3072:   if (request_uri != NULL) {",
          "3073:     if (!json_string_null_or_empty(json_object_get(config->j_params, \"oauth-par-request_uri-prefix\"))) {",
          "",
          "[Removed Lines]",
          "3070:   char * request_uri = o_malloc((json_string_length(json_object_get(config->j_params, \"oauth-par-request_uri-prefix\"))+OIDC_REQUEST_URI_SUFFIX_LENGTH+1)*sizeof(char));",
          "",
          "[Added Lines]",
          "3070:   char * request_uri = o_malloc((json_string_length(json_object_get(config->j_params, \"oauth-par-request_uri-prefix\"))+OIDC_REQUEST_URI_SUFFIX_LENGTH+1));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3704: static char * generate_refresh_token() {",
          "3707:   if (token != NULL) {",
          "3708:     if (rand_string(token, OIDC_REFRESH_TOKEN_LENGTH) == NULL) {",
          "",
          "[Removed Lines]",
          "3705:   char * token = o_malloc((OIDC_REFRESH_TOKEN_LENGTH+1)*sizeof(char));",
          "",
          "[Added Lines]",
          "3705:   char * token = o_malloc((OIDC_REFRESH_TOKEN_LENGTH+1));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4052:     y_log_message(Y_LOG_LEVEL_ERROR, \"generate_authorization_code - oidc - Error pthread_mutex_lock\");",
          "4053:     j_return = json_pack(\"{si}\", \"result\", G_ERROR);",
          "4054:   } else {",
          "4056:       if (rand_string_nonce(code, 32) != NULL) {",
          "4057:         code_hash = config->glewlwyd_config->glewlwyd_callback_generate_hash(config->glewlwyd_config, code);",
          "4058:         if (code_hash != NULL) {",
          "",
          "[Removed Lines]",
          "4055:     if ((code = o_malloc(33*sizeof(char))) != NULL) {",
          "",
          "[Added Lines]",
          "4055:     if ((code = o_malloc(33)) != NULL) {",
          "",
          "---------------"
        ],
        "src/plugin/register.c||src/plugin/register.c": [
          "File: src/plugin/register.c -> src/plugin/register.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "185:     json_decref(j_query);",
          "186:     if (res == H_OK) {",
          "187:       code_len = json_integer_value(json_object_get(config->j_parameters, \"verification-code-length\"));",
          "189:         if (rand_code(code, code_len)) {",
          "190:           if ((code_hash = config->glewlwyd_config->glewlwyd_callback_generate_hash(config->glewlwyd_config, code)) != NULL) {",
          "191:             if (rand_string_nonce(token, GLEWLWYD_TOKEN_LENGTH)) {",
          "",
          "[Removed Lines]",
          "188:       if ((code = o_malloc((code_len+1)*sizeof(char))) != NULL) {",
          "",
          "[Added Lines]",
          "188:       if ((code = o_malloc((code_len+1))) != NULL) {",
          "",
          "---------------"
        ],
        "src/scheme/oauth2.c||src/scheme/oauth2.c": [
          "File: src/scheme/oauth2.c -> src/scheme/oauth2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "450:   if (i_init_session(&i_session) == I_OK) {",
          "451:     if (i_import_session_json_t(&i_session, json_object_get(j_provider, \"export\")) == I_OK) {",
          "452:       if (i_set_int_parameter(&i_session, I_OPT_STATE_GENERATE, GLEWLWYD_SCHEME_OAUTH2_STATE_ID_LENGTH) == I_OK && i_set_int_parameter(&i_session, I_OPT_NONCE_GENERATE, GLEWLWYD_SCHEME_OAUTH2_NONCE_LENGTH) == I_OK) {",
          "490:               } else {",
          "494:               }",
          "495:             } else {",
          "497:               j_return = json_pack(\"{si}\", \"result\", G_ERROR);",
          "498:             }",
          "499:           } else {",
          "502:           }",
          "503:         } else {",
          "506:         }",
          "510:       } else {",
          "512:         j_return = json_pack(\"{si}\", \"result\", G_ERROR);",
          "513:       }",
          "514:     } else {",
          "516:       j_return = json_pack(\"{si}\", \"result\", G_ERROR);",
          "517:     }",
          "518:     i_clean_session(&i_session);",
          "519:   } else {",
          "521:     j_return = json_pack(\"{si}\", \"result\", G_ERROR);",
          "522:   }",
          "",
          "[Removed Lines]",
          "453:         j_state = json_pack(\"{sssssOsOss*}\", \"id\", i_get_str_parameter(&i_session, I_OPT_STATE), \"type\", GLEWLWYD_SCHEME_OAUTH2_STATE_AUTHENTICATION, \"module\", json_object_get(oauth2_config->j_parameters, \"name\"), \"provider\", json_object_get(j_provider, \"name\"), \"callback_url\", callback_url);",
          "454:         state_export = json_dumps(j_state, JSON_COMPACT);",
          "455:         if ((state_export_b64 = o_malloc(2*o_strlen(state_export))) != NULL) {",
          "456:           if (o_base64url_encode((const unsigned char *)state_export, o_strlen(state_export), (unsigned char *)state_export_b64, &state_export_b64_len)) {",
          "457:             state_export_b64[state_export_b64_len] = '\\0';",
          "458:             i_set_str_parameter(&i_session, I_OPT_STATE, state_export_b64);",
          "459:             if (i_build_auth_url_get(&i_session) == I_OK) {",
          "460:               time(&now);",
          "461:               if (config->conn->type==HOEL_DB_TYPE_MARIADB) {",
          "462:                 expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "463:               } else if (config->conn->type==HOEL_DB_TYPE_PGSQL) {",
          "464:                 expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "465:               } else { // HOEL_DB_TYPE_SQLITE",
          "466:                 expires_at_clause = msprintf(\"%u\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "467:               }",
          "468:               i_export = i_export_session_str(&i_session);",
          "469:               j_query = json_pack(\"{sss{sOs{ss}sssssi}}\",",
          "470:                                   \"table\",",
          "471:                                   GLEWLWYD_SCHEME_OAUTH2_SESSION_TABLE,",
          "472:                                   \"values\",",
          "473:                                     \"gsor_id\",",
          "474:                                      json_null(),",
          "475:                                     \"gsos_expires_at\",",
          "476:                                       \"raw\",",
          "477:                                       expires_at_clause,",
          "478:                                     \"gsos_state\",",
          "479:                                     state_export_b64,",
          "480:                                     \"gsos_session_export\",",
          "481:                                     i_export,",
          "482:                                     \"gsos_status\",",
          "483:                                     GLEWLWYD_SCHEME_OAUTH2_SESSION_AUTHENTICATION);",
          "484:               o_free(expires_at_clause);",
          "485:               res = h_insert(config->conn, j_query, NULL);",
          "486:               json_decref(j_query);",
          "487:               o_free(i_export);",
          "488:               if (res == H_OK) {",
          "489:                 j_return = json_pack(\"{siss}\", \"result\", G_OK, \"session\", i_get_str_parameter(&i_session, I_OPT_REDIRECT_TO));",
          "491:                 y_log_message(Y_LOG_LEVEL_ERROR, \"add_session_for_user - Error executing j_query (2)\");",
          "492:                 config->glewlwyd_module_callback_metrics_increment_counter(config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);",
          "493:                 j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);",
          "496:               y_log_message(Y_LOG_LEVEL_ERROR, \"add_session_for_user - Error i_build_auth_url_get\");",
          "500:             y_log_message(Y_LOG_LEVEL_ERROR, \"add_session_for_user - Error o_base64url_encode\");",
          "501:             j_return = json_pack(\"{si}\", \"result\", G_ERROR);",
          "504:           y_log_message(Y_LOG_LEVEL_ERROR, \"add_session_for_user - Error o_malloc state_export_b64\");",
          "505:           j_return = json_pack(\"{si}\", \"result\", G_ERROR_MEMORY);",
          "507:         o_free(state_export);",
          "508:         o_free(state_export_b64);",
          "509:         json_decref(j_state);",
          "511:         y_log_message(Y_LOG_LEVEL_ERROR, \"add_session_for_user - Error i_set_int_parameter I_OPT_STATE_GENERATE\");",
          "515:       y_log_message(Y_LOG_LEVEL_ERROR, \"add_session_for_user - Error i_import_session_json_t\");",
          "520:     y_log_message(Y_LOG_LEVEL_ERROR, \"add_session_for_user - Error i_init_session\");",
          "",
          "[Added Lines]",
          "453:         if ((j_state = json_pack(\"{sssssOsOss*}\", \"id\", i_get_str_parameter(&i_session, I_OPT_STATE), \"type\", GLEWLWYD_SCHEME_OAUTH2_STATE_AUTHENTICATION, \"module\", json_object_get(oauth2_config->j_parameters, \"name\"), \"provider\", json_object_get(j_provider, \"name\"), \"callback_url\", callback_url)) != NULL) {",
          "454:           state_export = json_dumps(j_state, JSON_COMPACT);",
          "455:           if ((state_export_b64 = o_malloc(2*o_strlen(state_export))) != NULL) {",
          "456:             if (o_base64url_encode((const unsigned char *)state_export, o_strlen(state_export), (unsigned char *)state_export_b64, &state_export_b64_len)) {",
          "457:               state_export_b64[state_export_b64_len] = '\\0';",
          "458:               i_set_str_parameter(&i_session, I_OPT_STATE, state_export_b64);",
          "459:               if (i_build_auth_url_get(&i_session) == I_OK) {",
          "460:                 time(&now);",
          "461:                 if (config->conn->type==HOEL_DB_TYPE_MARIADB) {",
          "462:                   expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "463:                 } else if (config->conn->type==HOEL_DB_TYPE_PGSQL) {",
          "464:                   expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "465:                 } else { // HOEL_DB_TYPE_SQLITE",
          "466:                   expires_at_clause = msprintf(\"%u\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "467:                 }",
          "468:                 i_export = i_export_session_str(&i_session);",
          "469:                 j_query = json_pack(\"{sss{sOs{ss}sssssi}}\",",
          "470:                                     \"table\",",
          "471:                                     GLEWLWYD_SCHEME_OAUTH2_SESSION_TABLE,",
          "472:                                     \"values\",",
          "473:                                       \"gsor_id\",",
          "474:                                        json_null(),",
          "475:                                       \"gsos_expires_at\",",
          "476:                                         \"raw\",",
          "477:                                         expires_at_clause,",
          "478:                                       \"gsos_state\",",
          "479:                                       state_export_b64,",
          "480:                                       \"gsos_session_export\",",
          "481:                                       i_export,",
          "482:                                       \"gsos_status\",",
          "483:                                       GLEWLWYD_SCHEME_OAUTH2_SESSION_AUTHENTICATION);",
          "484:                 o_free(expires_at_clause);",
          "485:                 res = h_insert(config->conn, j_query, NULL);",
          "486:                 json_decref(j_query);",
          "487:                 o_free(i_export);",
          "488:                 if (res == H_OK) {",
          "489:                   j_return = json_pack(\"{siss}\", \"result\", G_OK, \"session\", i_get_str_parameter(&i_session, I_OPT_REDIRECT_TO));",
          "490:                 } else {",
          "491:                   y_log_message(Y_LOG_LEVEL_ERROR, \"add_session_identify - Error executing j_query (2)\");",
          "492:                   config->glewlwyd_module_callback_metrics_increment_counter(config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);",
          "493:                   j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);",
          "494:                 }",
          "496:                 y_log_message(Y_LOG_LEVEL_ERROR, \"add_session_identify - Error i_build_auth_url_get\");",
          "497:                 j_return = json_pack(\"{si}\", \"result\", G_ERROR);",
          "500:               y_log_message(Y_LOG_LEVEL_ERROR, \"add_session_identify - Error o_base64url_encode\");",
          "504:             y_log_message(Y_LOG_LEVEL_ERROR, \"add_session_identify - Error o_malloc state_export_b64\");",
          "505:             j_return = json_pack(\"{si}\", \"result\", G_ERROR_MEMORY);",
          "507:           o_free(state_export);",
          "508:           o_free(state_export_b64);",
          "509:           json_decref(j_state);",
          "511:           y_log_message(Y_LOG_LEVEL_ERROR, \"add_session_identify - Error generating j_state\");",
          "512:           j_return = json_pack(\"{si}\", \"result\", G_ERROR);",
          "515:         y_log_message(Y_LOG_LEVEL_ERROR, \"add_session_identify - Error i_set_int_parameter I_OPT_STATE_GENERATE\");",
          "519:       y_log_message(Y_LOG_LEVEL_ERROR, \"add_session_identify - Error i_import_session_json_t\");",
          "524:     y_log_message(Y_LOG_LEVEL_ERROR, \"add_session_identify - Error i_init_session\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "563:     if (i_init_session(&i_session) == I_OK) {",
          "564:       if (i_import_session_json_t(&i_session, json_object_get(j_provider, \"export\")) == I_OK) {",
          "565:         if (i_set_int_parameter(&i_session, I_OPT_STATE_GENERATE, GLEWLWYD_SCHEME_OAUTH2_STATE_ID_LENGTH) == I_OK && i_set_int_parameter(&i_session, I_OPT_NONCE_GENERATE, GLEWLWYD_SCHEME_OAUTH2_NONCE_LENGTH) == I_OK) {",
          "603:                 } else {",
          "607:                 }",
          "608:               } else {",
          "610:                 j_return = json_pack(\"{si}\", \"result\", G_ERROR);",
          "611:               }",
          "612:             } else {",
          "615:             }",
          "616:           } else {",
          "619:           }",
          "623:         } else {",
          "624:           y_log_message(Y_LOG_LEVEL_ERROR, \"add_session_for_user - Error i_set_int_parameter I_OPT_STATE_GENERATE\");",
          "625:           j_return = json_pack(\"{si}\", \"result\", G_ERROR);",
          "",
          "[Removed Lines]",
          "566:           j_state = json_pack(\"{sssssOsOssss*}\", \"id\", i_get_str_parameter(&i_session, I_OPT_STATE), \"type\", GLEWLWYD_SCHEME_OAUTH2_STATE_AUTHENTICATION, \"module\", json_object_get(oauth2_config->j_parameters, \"name\"), \"provider\", json_object_get(j_provider, \"name\"), \"username\", username, \"callback_url\", callback_url);",
          "567:           state_export = json_dumps(j_state, JSON_COMPACT);",
          "568:           if ((state_export_b64 = o_malloc(2*o_strlen(state_export))) != NULL) {",
          "569:             if (o_base64url_encode((const unsigned char *)state_export, o_strlen(state_export), (unsigned char *)state_export_b64, &state_export_b64_len)) {",
          "570:               state_export_b64[state_export_b64_len] = '\\0';",
          "571:               i_set_str_parameter(&i_session, I_OPT_STATE, state_export_b64);",
          "572:               if (i_build_auth_url_get(&i_session) == I_OK) {",
          "573:                 time(&now);",
          "574:                 if (config->conn->type==HOEL_DB_TYPE_MARIADB) {",
          "575:                   expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "576:                 } else if (config->conn->type==HOEL_DB_TYPE_PGSQL) {",
          "577:                   expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "578:                 } else { // HOEL_DB_TYPE_SQLITE",
          "579:                   expires_at_clause = msprintf(\"%u\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "580:                 }",
          "581:                 i_export = i_export_session_str(&i_session);",
          "582:                 j_query = json_pack(\"{sss{sOs{ss}sssssi}}\",",
          "583:                                     \"table\",",
          "584:                                     GLEWLWYD_SCHEME_OAUTH2_SESSION_TABLE,",
          "585:                                     \"values\",",
          "586:                                       \"gsor_id\",",
          "587:                                        json_object_get(j_registration, \"gsor_id\"),",
          "588:                                       \"gsos_expires_at\",",
          "589:                                         \"raw\",",
          "590:                                         expires_at_clause,",
          "591:                                       \"gsos_state\",",
          "592:                                       state_export_b64,",
          "593:                                       \"gsos_session_export\",",
          "594:                                       i_export,",
          "595:                                       \"gsos_status\",",
          "596:                                       GLEWLWYD_SCHEME_OAUTH2_SESSION_AUTHENTICATION);",
          "597:                 o_free(expires_at_clause);",
          "598:                 res = h_insert(config->conn, j_query, NULL);",
          "599:                 json_decref(j_query);",
          "600:                 o_free(i_export);",
          "601:                 if (res == H_OK) {",
          "602:                   j_return = json_pack(\"{siss}\", \"result\", G_OK, \"session\", i_get_str_parameter(&i_session, I_OPT_REDIRECT_TO));",
          "604:                   y_log_message(Y_LOG_LEVEL_ERROR, \"add_session_for_user - Error executing j_query (2)\");",
          "605:                   config->glewlwyd_module_callback_metrics_increment_counter(config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);",
          "606:                   j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);",
          "609:                 y_log_message(Y_LOG_LEVEL_ERROR, \"add_session_for_user - Error i_build_auth_url_get\");",
          "613:               y_log_message(Y_LOG_LEVEL_ERROR, \"add_session_for_user - Error o_base64url_encode\");",
          "614:               j_return = json_pack(\"{si}\", \"result\", G_ERROR);",
          "617:             y_log_message(Y_LOG_LEVEL_ERROR, \"add_session_for_user - Error o_malloc state_export_b64\");",
          "618:             j_return = json_pack(\"{si}\", \"result\", G_ERROR_MEMORY);",
          "620:           o_free(state_export);",
          "621:           o_free(state_export_b64);",
          "622:           json_decref(j_state);",
          "",
          "[Added Lines]",
          "570:           if ((j_state = json_pack(\"{sssssOsOssss*}\", \"id\", i_get_str_parameter(&i_session, I_OPT_STATE), \"type\", GLEWLWYD_SCHEME_OAUTH2_STATE_AUTHENTICATION, \"module\", json_object_get(oauth2_config->j_parameters, \"name\"), \"provider\", json_object_get(j_provider, \"name\"), \"username\", username, \"callback_url\", callback_url)) != NULL) {",
          "571:             state_export = json_dumps(j_state, JSON_COMPACT);",
          "572:             if ((state_export_b64 = o_malloc(2*o_strlen(state_export))) != NULL) {",
          "573:               if (o_base64url_encode((const unsigned char *)state_export, o_strlen(state_export), (unsigned char *)state_export_b64, &state_export_b64_len)) {",
          "574:                 state_export_b64[state_export_b64_len] = '\\0';",
          "575:                 i_set_str_parameter(&i_session, I_OPT_STATE, state_export_b64);",
          "576:                 if (i_build_auth_url_get(&i_session) == I_OK) {",
          "577:                   time(&now);",
          "578:                   if (config->conn->type==HOEL_DB_TYPE_MARIADB) {",
          "579:                     expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "580:                   } else if (config->conn->type==HOEL_DB_TYPE_PGSQL) {",
          "581:                     expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "582:                   } else { // HOEL_DB_TYPE_SQLITE",
          "583:                     expires_at_clause = msprintf(\"%u\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "584:                   }",
          "585:                   i_export = i_export_session_str(&i_session);",
          "586:                   j_query = json_pack(\"{sss{sOs{ss}sssssi}}\",",
          "587:                                       \"table\",",
          "588:                                       GLEWLWYD_SCHEME_OAUTH2_SESSION_TABLE,",
          "589:                                       \"values\",",
          "590:                                         \"gsor_id\",",
          "591:                                          json_object_get(j_registration, \"gsor_id\"),",
          "592:                                         \"gsos_expires_at\",",
          "593:                                           \"raw\",",
          "594:                                           expires_at_clause,",
          "595:                                         \"gsos_state\",",
          "596:                                         state_export_b64,",
          "597:                                         \"gsos_session_export\",",
          "598:                                         i_export,",
          "599:                                         \"gsos_status\",",
          "600:                                         GLEWLWYD_SCHEME_OAUTH2_SESSION_AUTHENTICATION);",
          "601:                   o_free(expires_at_clause);",
          "602:                   res = h_insert(config->conn, j_query, NULL);",
          "603:                   json_decref(j_query);",
          "604:                   o_free(i_export);",
          "605:                   if (res == H_OK) {",
          "606:                     j_return = json_pack(\"{siss}\", \"result\", G_OK, \"session\", i_get_str_parameter(&i_session, I_OPT_REDIRECT_TO));",
          "607:                   } else {",
          "608:                     y_log_message(Y_LOG_LEVEL_ERROR, \"add_session_for_user - Error executing j_query (2)\");",
          "609:                     config->glewlwyd_module_callback_metrics_increment_counter(config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);",
          "610:                     j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);",
          "611:                   }",
          "613:                   y_log_message(Y_LOG_LEVEL_ERROR, \"add_session_for_user - Error i_build_auth_url_get\");",
          "614:                   j_return = json_pack(\"{si}\", \"result\", G_ERROR);",
          "617:                 y_log_message(Y_LOG_LEVEL_ERROR, \"add_session_for_user - Error o_base64url_encode\");",
          "621:               y_log_message(Y_LOG_LEVEL_ERROR, \"add_session_for_user - Error o_malloc state_export_b64\");",
          "622:               j_return = json_pack(\"{si}\", \"result\", G_ERROR_MEMORY);",
          "624:             o_free(state_export);",
          "625:             o_free(state_export_b64);",
          "626:             json_decref(j_state);",
          "628:             y_log_message(Y_LOG_LEVEL_ERROR, \"add_session_for_user - Error generating j_state\");",
          "629:             j_return = json_pack(\"{si}\", \"result\", G_ERROR);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "742:     if (i_init_session(&i_session) == I_OK) {",
          "743:       if (i_import_session_json_t(&i_session, json_object_get(j_provider, \"export\")) == I_OK) {",
          "744:         if (i_set_int_parameter(&i_session, I_OPT_STATE_GENERATE, GLEWLWYD_SCHEME_OAUTH2_STATE_ID_LENGTH) == I_OK && i_set_int_parameter(&i_session, I_OPT_NONCE_GENERATE, GLEWLWYD_SCHEME_OAUTH2_NONCE_LENGTH) == I_OK) {",
          "778:                                       \"table\",",
          "780:                                       \"values\",",
          "793:                   res = h_insert(config->conn, j_query, NULL);",
          "794:                   json_decref(j_query);",
          "797:                   if (res == H_OK) {",
          "799:                   } else {",
          "801:                     config->glewlwyd_module_callback_metrics_increment_counter(config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);",
          "802:                     j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);",
          "803:                   }",
          "804:                 } else {",
          "808:                 }",
          "809:               } else {",
          "811:                 j_return = json_pack(\"{si}\", \"result\", G_ERROR);",
          "812:               }",
          "813:             } else {",
          "816:             }",
          "817:           } else {",
          "820:           }",
          "824:         } else {",
          "825:           y_log_message(Y_LOG_LEVEL_ERROR, \"add_registration_for_user - Error i_set_int_parameter I_OPT_STATE_GENERATE\");",
          "826:           j_return = json_pack(\"{si}\", \"result\", G_ERROR);",
          "",
          "[Removed Lines]",
          "745:           j_state = json_pack(\"{sssssOsOssss*ss*}\", \"id\", i_get_str_parameter(&i_session, I_OPT_STATE), \"type\", GLEWLWYD_SCHEME_OAUTH2_STATE_REGISTRATION, \"module\", json_object_get(oauth2_config->j_parameters, \"name\"), \"provider\", json_object_get(j_provider, \"name\"), \"username\", username, \"register_url\", register_url, \"complete_url\", complete_url);",
          "746:           state_export = json_dumps(j_state, JSON_COMPACT);",
          "747:           if ((state_export_b64 = o_malloc(2*o_strlen(state_export))) != NULL) {",
          "748:             if (o_base64url_encode((const unsigned char *)state_export, o_strlen(state_export), (unsigned char *)state_export_b64, &state_export_b64_len)) {",
          "749:               state_export_b64[state_export_b64_len] = '\\0';",
          "750:               i_set_str_parameter(&i_session, I_OPT_STATE, state_export_b64);",
          "751:               if (i_build_auth_url_get(&i_session) == I_OK) {",
          "752:                 j_query = json_pack(\"{sss{sOsOssss}}\",",
          "753:                                     \"table\",",
          "754:                                     GLEWLWYD_SCHEME_OAUTH2_REGISTRATION_TABLE,",
          "755:                                     \"values\",",
          "756:                                       \"gsor_mod_name\",",
          "757:                                       json_object_get(oauth2_config->j_parameters, \"name\"),",
          "758:                                       \"gsor_provider\",",
          "759:                                       json_object_get(j_provider, \"name\"),",
          "760:                                       \"gsor_username\",",
          "761:                                       username,",
          "762:                                       \"gsor_userinfo_sub\",",
          "763:                                       \"\");",
          "764:                 res = h_insert(config->conn, j_query, NULL);",
          "765:                 json_decref(j_query);",
          "766:                 if (res == H_OK) {",
          "767:                   time(&now);",
          "768:                   if (config->conn->type==HOEL_DB_TYPE_MARIADB) {",
          "769:                     expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "770:                   } else if (config->conn->type==HOEL_DB_TYPE_PGSQL) {",
          "771:                     expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "772:                   } else { // HOEL_DB_TYPE_SQLITE",
          "773:                     expires_at_clause = msprintf(\"%u\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "774:                   }",
          "775:                   j_last_id = h_last_insert_id(config->conn);",
          "776:                   i_export = i_export_session_str(&i_session);",
          "777:                   j_query = json_pack(\"{sss{sOs{ss}sssssi}}\",",
          "779:                                       GLEWLWYD_SCHEME_OAUTH2_SESSION_TABLE,",
          "781:                                         \"gsor_id\",",
          "782:                                          j_last_id,",
          "783:                                         \"gsos_expires_at\",",
          "784:                                           \"raw\",",
          "785:                                           expires_at_clause,",
          "786:                                         \"gsos_state\",",
          "787:                                         state_export_b64,",
          "788:                                         \"gsos_session_export\",",
          "789:                                         i_export,",
          "790:                                         \"gsos_status\",",
          "791:                                         GLEWLWYD_SCHEME_OAUTH2_SESSION_REGISTRATION);",
          "792:                   o_free(expires_at_clause);",
          "795:                   json_decref(j_last_id);",
          "796:                   o_free(i_export);",
          "798:                     j_return = json_pack(\"{siss}\", \"result\", G_OK, \"registration\", i_get_str_parameter(&i_session, I_OPT_REDIRECT_TO));",
          "800:                     y_log_message(Y_LOG_LEVEL_ERROR, \"add_registration_for_user - Error executing j_query (2)\");",
          "805:                   y_log_message(Y_LOG_LEVEL_ERROR, \"add_registration_for_user - Error executing j_query (1)\");",
          "806:                   config->glewlwyd_module_callback_metrics_increment_counter(config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);",
          "807:                   j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);",
          "810:                 y_log_message(Y_LOG_LEVEL_ERROR, \"add_registration_for_user - Error i_build_auth_url_get\");",
          "814:               y_log_message(Y_LOG_LEVEL_ERROR, \"add_registration_for_user - Error o_base64url_encode\");",
          "815:               j_return = json_pack(\"{si}\", \"result\", G_ERROR);",
          "818:             y_log_message(Y_LOG_LEVEL_ERROR, \"add_registration_for_user - Error o_malloc state_export_b64\");",
          "819:             j_return = json_pack(\"{si}\", \"result\", G_ERROR_MEMORY);",
          "821:           o_free(state_export);",
          "822:           o_free(state_export_b64);",
          "823:           json_decref(j_state);",
          "",
          "[Added Lines]",
          "753:           if ((j_state = json_pack(\"{sssssOsOssss*ss*}\", \"id\", i_get_str_parameter(&i_session, I_OPT_STATE), \"type\", GLEWLWYD_SCHEME_OAUTH2_STATE_REGISTRATION, \"module\", json_object_get(oauth2_config->j_parameters, \"name\"), \"provider\", json_object_get(j_provider, \"name\"), \"username\", username, \"register_url\", register_url, \"complete_url\", complete_url)) != NULL) {",
          "754:             state_export = json_dumps(j_state, JSON_COMPACT);",
          "755:             if ((state_export_b64 = o_malloc(2*o_strlen(state_export))) != NULL) {",
          "756:               if (o_base64url_encode((const unsigned char *)state_export, o_strlen(state_export), (unsigned char *)state_export_b64, &state_export_b64_len)) {",
          "757:                 state_export_b64[state_export_b64_len] = '\\0';",
          "758:                 i_set_str_parameter(&i_session, I_OPT_STATE, state_export_b64);",
          "759:                 if (i_build_auth_url_get(&i_session) == I_OK) {",
          "760:                   j_query = json_pack(\"{sss{sOsOssss}}\",",
          "762:                                       GLEWLWYD_SCHEME_OAUTH2_REGISTRATION_TABLE,",
          "764:                                         \"gsor_mod_name\",",
          "765:                                         json_object_get(oauth2_config->j_parameters, \"name\"),",
          "766:                                         \"gsor_provider\",",
          "767:                                         json_object_get(j_provider, \"name\"),",
          "768:                                         \"gsor_username\",",
          "769:                                         username,",
          "770:                                         \"gsor_userinfo_sub\",",
          "771:                                         \"\");",
          "775:                     time(&now);",
          "776:                     if (config->conn->type==HOEL_DB_TYPE_MARIADB) {",
          "777:                       expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "778:                     } else if (config->conn->type==HOEL_DB_TYPE_PGSQL) {",
          "779:                       expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "780:                     } else { // HOEL_DB_TYPE_SQLITE",
          "781:                       expires_at_clause = msprintf(\"%u\", (now + (unsigned int)json_integer_value(json_object_get(oauth2_config->j_parameters, \"session_expiration\"))));",
          "782:                     }",
          "783:                     j_last_id = h_last_insert_id(config->conn);",
          "784:                     i_export = i_export_session_str(&i_session);",
          "785:                     j_query = json_pack(\"{sss{sOs{ss}sssssi}}\",",
          "786:                                         \"table\",",
          "787:                                         GLEWLWYD_SCHEME_OAUTH2_SESSION_TABLE,",
          "788:                                         \"values\",",
          "789:                                           \"gsor_id\",",
          "790:                                            j_last_id,",
          "791:                                           \"gsos_expires_at\",",
          "792:                                             \"raw\",",
          "793:                                             expires_at_clause,",
          "794:                                           \"gsos_state\",",
          "795:                                           state_export_b64,",
          "796:                                           \"gsos_session_export\",",
          "797:                                           i_export,",
          "798:                                           \"gsos_status\",",
          "799:                                           GLEWLWYD_SCHEME_OAUTH2_SESSION_REGISTRATION);",
          "800:                     o_free(expires_at_clause);",
          "801:                     res = h_insert(config->conn, j_query, NULL);",
          "802:                     json_decref(j_query);",
          "803:                     json_decref(j_last_id);",
          "804:                     o_free(i_export);",
          "805:                     if (res == H_OK) {",
          "806:                       j_return = json_pack(\"{siss}\", \"result\", G_OK, \"registration\", i_get_str_parameter(&i_session, I_OPT_REDIRECT_TO));",
          "807:                     } else {",
          "808:                       y_log_message(Y_LOG_LEVEL_ERROR, \"add_registration_for_user - Error executing j_query (2)\");",
          "809:                       config->glewlwyd_module_callback_metrics_increment_counter(config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);",
          "810:                       j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);",
          "811:                     }",
          "813:                     y_log_message(Y_LOG_LEVEL_ERROR, \"add_registration_for_user - Error executing j_query (1)\");",
          "818:                   y_log_message(Y_LOG_LEVEL_ERROR, \"add_registration_for_user - Error i_build_auth_url_get\");",
          "819:                   j_return = json_pack(\"{si}\", \"result\", G_ERROR);",
          "822:                 y_log_message(Y_LOG_LEVEL_ERROR, \"add_registration_for_user - Error o_base64url_encode\");",
          "826:               y_log_message(Y_LOG_LEVEL_ERROR, \"add_registration_for_user - Error o_malloc state_export_b64\");",
          "827:               j_return = json_pack(\"{si}\", \"result\", G_ERROR_MEMORY);",
          "829:             o_free(state_export);",
          "830:             o_free(state_export_b64);",
          "831:             json_decref(j_state);",
          "833:             y_log_message(Y_LOG_LEVEL_ERROR, \"add_registration_for_user - Error generating j_state\");",
          "834:             j_return = json_pack(\"{si}\", \"result\", G_ERROR);",
          "",
          "---------------"
        ],
        "src/scheme/webauthn.c||src/scheme/webauthn.c": [
          "File: src/scheme/webauthn.c -> src/scheme/webauthn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:   if (fl != NULL) {",
          "87:     fseek(fl, 0, SEEK_END);",
          "88:     len = ftell(fl);",
          "106:               } else {",
          "108:                 j_return = json_pack(\"{si}\", \"result\", G_ERROR);",
          "109:               }",
          "110:             } else {",
          "112:               j_return = json_pack(\"{si}\", \"result\", G_ERROR);",
          "113:             }",
          "114:           } else {",
          "116:             j_return = json_pack(\"{si}\", \"result\", G_ERROR);",
          "117:           }",
          "121:         }",
          "123:       }",
          "127:     }",
          "129:     fclose(fl);",
          "130:   } else {",
          "131:     y_log_message(Y_LOG_LEVEL_ERROR, \"get_cert_from_file_path - Error fopen %s\", path);",
          "",
          "[Removed Lines]",
          "89:     cert_content = o_malloc(len);",
          "90:     if (cert_content != NULL) {",
          "91:       if (fseek(fl, 0, SEEK_SET) == -1) {",
          "92:         y_log_message(Y_LOG_LEVEL_ERROR, \"get_cert_from_file_path - Error fseek\");",
          "93:         j_return = json_pack(\"{si}\", \"result\", G_ERROR);",
          "94:       } else if (fread(cert_content, 1, len, fl) != len) {",
          "95:         y_log_message(Y_LOG_LEVEL_ERROR, \"get_cert_from_file_path - Error fread\");",
          "96:         j_return = json_pack(\"{si}\", \"result\", G_ERROR);",
          "97:       } else {",
          "98:         cert_dat.data = (unsigned char *)cert_content;",
          "99:         cert_dat.size = len;",
          "100:         if (!gnutls_x509_crt_init(&cert)) {",
          "101:           if (gnutls_x509_crt_import(cert, &cert_dat, GNUTLS_X509_FMT_DER) >= 0 || gnutls_x509_crt_import(cert, &cert_dat, GNUTLS_X509_FMT_PEM) >= 0) {",
          "102:             if (!gnutls_x509_crt_get_dn(cert, issued_for, &issued_for_len)) {",
          "103:               if (gnutls_x509_crt_export2(cert, GNUTLS_X509_FMT_PEM, &export_dat) >= 0) {",
          "104:                 j_return = json_pack(\"{sis{ss%ss%}}\", \"result\", G_OK, \"certificate\", \"dn\", issued_for, issued_for_len, \"x509\", export_dat.data, (size_t)export_dat.size);",
          "105:                 gnutls_free(export_dat.data);",
          "107:                 y_log_message(Y_LOG_LEVEL_ERROR, \"get_cert_from_file_path - Error gnutls_x509_crt_export2\");",
          "111:               y_log_message(Y_LOG_LEVEL_ERROR, \"get_cert_from_file_path - Error gnutls_x509_crt_get_dn\");",
          "115:             y_log_message(Y_LOG_LEVEL_ERROR, \"get_cert_from_file_path - Error gnutls_x509_crt_import\");",
          "118:         } else {",
          "119:           y_log_message(Y_LOG_LEVEL_ERROR, \"get_cert_from_file_path - Error gnutls_x509_crt_init\");",
          "120:           j_return = json_pack(\"{si}\", \"result\", G_ERROR);",
          "122:         gnutls_x509_crt_deinit(cert);",
          "124:     } else {",
          "125:       y_log_message(Y_LOG_LEVEL_ERROR, \"get_cert_from_file_path - Error o_malloc cert_content\");",
          "126:       j_return = json_pack(\"{si}\", \"result\", G_ERROR_MEMORY);",
          "128:     o_free(cert_content);",
          "",
          "[Added Lines]",
          "89:     if (len) {",
          "90:       cert_content = o_malloc(len);",
          "91:       if (cert_content != NULL) {",
          "92:         if (fseek(fl, 0, SEEK_SET) == -1) {",
          "93:           y_log_message(Y_LOG_LEVEL_ERROR, \"get_cert_from_file_path - Error fseek\");",
          "94:           j_return = json_pack(\"{si}\", \"result\", G_ERROR);",
          "95:         } else if (fread(cert_content, 1, len, fl) != len) {",
          "96:           y_log_message(Y_LOG_LEVEL_ERROR, \"get_cert_from_file_path - Error fread\");",
          "97:           j_return = json_pack(\"{si}\", \"result\", G_ERROR);",
          "98:         } else {",
          "99:           cert_dat.data = (unsigned char *)cert_content;",
          "100:           cert_dat.size = len;",
          "101:           if (!gnutls_x509_crt_init(&cert)) {",
          "102:             if (gnutls_x509_crt_import(cert, &cert_dat, GNUTLS_X509_FMT_DER) >= 0 || gnutls_x509_crt_import(cert, &cert_dat, GNUTLS_X509_FMT_PEM) >= 0) {",
          "103:               if (!gnutls_x509_crt_get_dn(cert, issued_for, &issued_for_len)) {",
          "104:                 if (gnutls_x509_crt_export2(cert, GNUTLS_X509_FMT_PEM, &export_dat) >= 0) {",
          "105:                   j_return = json_pack(\"{sis{ss%ss%}}\", \"result\", G_OK, \"certificate\", \"dn\", issued_for, issued_for_len, \"x509\", export_dat.data, (size_t)export_dat.size);",
          "106:                   gnutls_free(export_dat.data);",
          "107:                 } else {",
          "108:                   y_log_message(Y_LOG_LEVEL_ERROR, \"get_cert_from_file_path - Error gnutls_x509_crt_export2\");",
          "109:                   j_return = json_pack(\"{si}\", \"result\", G_ERROR);",
          "110:                 }",
          "112:                 y_log_message(Y_LOG_LEVEL_ERROR, \"get_cert_from_file_path - Error gnutls_x509_crt_get_dn\");",
          "116:               y_log_message(Y_LOG_LEVEL_ERROR, \"get_cert_from_file_path - Error gnutls_x509_crt_import\");",
          "120:             y_log_message(Y_LOG_LEVEL_ERROR, \"get_cert_from_file_path - Error gnutls_x509_crt_init\");",
          "123:           gnutls_x509_crt_deinit(cert);",
          "125:       } else {",
          "126:         y_log_message(Y_LOG_LEVEL_ERROR, \"get_cert_from_file_path - Error o_malloc cert_content\");",
          "127:         j_return = json_pack(\"{si}\", \"result\", G_ERROR_MEMORY);",
          "129:       o_free(cert_content);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1028:   for (i=1; i<json_array_size(j_header_x5c); i++) {",
          "1029:     j_cert = json_array_get(j_header_x5c, i);",
          "1038:             ret = G_ERROR;",
          "1039:           }",
          "1040:         } else {",
          "1042:           ret = G_ERROR;",
          "1043:         }",
          "1044:       } else {",
          "1047:       }",
          "1049:     } else {",
          "1052:     }",
          "1053:   }",
          "",
          "[Removed Lines]",
          "1031:     if ((header_cert_decoded = o_malloc(json_string_length(j_cert))) != NULL) {",
          "1032:       if (o_base64_decode((const unsigned char *)json_string_value(j_cert), json_string_length(j_cert), header_cert_decoded, &header_cert_decoded_len)) {",
          "1033:         if (!gnutls_x509_crt_init(&cert_x509[i])) {",
          "1034:           cert_dat.data = header_cert_decoded;",
          "1035:           cert_dat.size = header_cert_decoded_len;",
          "1036:           if ((ret = gnutls_x509_crt_import(cert_x509[i], &cert_dat, GNUTLS_X509_FMT_DER)) < 0) {",
          "1037:             y_log_message(Y_LOG_LEVEL_ERROR, \"validate_safetynet_ca_root - Error gnutls_x509_crt_import: %d\", ret);",
          "1041:           y_log_message(Y_LOG_LEVEL_ERROR, \"validate_safetynet_ca_root - Error gnutls_x509_crt_init\");",
          "1045:         y_log_message(Y_LOG_LEVEL_ERROR, \"validate_safetynet_ca_root - Error o_base64_decode x5c leaf\");",
          "1046:         ret = G_ERROR;",
          "1048:       o_free(header_cert_decoded);",
          "1050:       y_log_message(Y_LOG_LEVEL_ERROR, \"validate_safetynet_ca_root - Error allocating resources for header_cert_decoded\");",
          "1051:       ret = G_ERROR_MEMORY;",
          "",
          "[Added Lines]",
          "1033:     if (!json_string_null_or_empty(j_cert)) {",
          "1034:       if ((header_cert_decoded = o_malloc(json_string_length(j_cert))) != NULL) {",
          "1035:         if (o_base64_decode((const unsigned char *)json_string_value(j_cert), json_string_length(j_cert), header_cert_decoded, &header_cert_decoded_len)) {",
          "1036:           if (!gnutls_x509_crt_init(&cert_x509[i])) {",
          "1037:             cert_dat.data = header_cert_decoded;",
          "1038:             cert_dat.size = header_cert_decoded_len;",
          "1039:             if ((ret = gnutls_x509_crt_import(cert_x509[i], &cert_dat, GNUTLS_X509_FMT_DER)) < 0) {",
          "1040:               y_log_message(Y_LOG_LEVEL_ERROR, \"validate_safetynet_ca_root - Error gnutls_x509_crt_import: %d\", ret);",
          "1041:               ret = G_ERROR;",
          "1042:             }",
          "1043:           } else {",
          "1044:             y_log_message(Y_LOG_LEVEL_ERROR, \"validate_safetynet_ca_root - Error gnutls_x509_crt_init\");",
          "1048:           y_log_message(Y_LOG_LEVEL_ERROR, \"validate_safetynet_ca_root - Error o_base64_decode x5c leaf\");",
          "1051:         o_free(header_cert_decoded);",
          "1053:         y_log_message(Y_LOG_LEVEL_ERROR, \"validate_safetynet_ca_root - Error allocating resources for header_cert_decoded\");",
          "1054:         ret = G_ERROR_MEMORY;",
          "1057:       y_log_message(Y_LOG_LEVEL_ERROR, \"validate_safetynet_ca_root - Error invalid x5c leaf\");",
          "1058:       ret = G_ERROR;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1693:         y_log_message(Y_LOG_LEVEL_DEBUG, \"check_attestation_android_safetynet - Error x5c leaf not a string\");",
          "1694:         break;",
          "1695:       }",
          "1697:       if ((header_cert_decoded = o_malloc(json_string_length(j_cert))) == NULL) {",
          "1698:         y_log_message(Y_LOG_LEVEL_ERROR, \"check_attestation_android_safetynet - Error allocating resources for header_cert_decoded\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1704:       if (json_string_null_or_empty(j_cert)) {",
          "1705:         y_log_message(Y_LOG_LEVEL_ERROR, \"check_attestation_android_safetynet - Error x5c leaf invalid\");",
          "1706:         break;",
          "1707:       }",
          "",
          "---------------"
        ],
        "src/static_compressed_inmemory_website_callback.c||src/static_compressed_inmemory_website_callback.c": [
          "File: src/static_compressed_inmemory_website_callback.c -> src/static_compressed_inmemory_website_callback.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "375:                 offset = length = ftell (f);",
          "376:                 fseek (f, 0, SEEK_SET);",
          "403:                     }",
          "423:                         ret = U_CALLBACK_ERROR;",
          "424:                       }",
          "427:                     if (ret == U_CALLBACK_CONTINUE) {",
          "431:                         }",
          "436:                         }",
          "438:                       }",
          "440:                     }",
          "441:                   }",
          "447:                 }",
          "449:                 fclose(f);",
          "450:               } else {",
          "451:                 if (((struct _u_compressed_inmemory_website_config *)user_data)->redirect_on_404 == NULL) {",
          "",
          "[Removed Lines]",
          "378:                 if ((file_content_orig = file_content = o_malloc(length)) != NULL && (data_zip = o_malloc((2*length)+20)) != NULL) {",
          "379:                   defstream.zalloc = u_zalloc;",
          "380:                   defstream.zfree = u_zfree;",
          "381:                   defstream.opaque = Z_NULL;",
          "382:                   defstream.avail_in = (uInt)length;",
          "383:                   defstream.next_in = (Bytef *)file_content;",
          "384:                   while ((read_length = fread(file_content, sizeof(char), offset, f))) {",
          "385:                     file_content += read_length;",
          "386:                     offset -= read_length;",
          "387:                   }",
          "389:                   if (compress_mode == U_COMPRESS_GZIP) {",
          "390:                     if (deflateInit2(&defstream,",
          "391:                                      Z_DEFAULT_COMPRESSION,",
          "392:                                      Z_DEFLATED,",
          "393:                                      U_GZIP_WINDOW_BITS | U_GZIP_ENCODING,",
          "394:                                      8,",
          "395:                                      Z_DEFAULT_STRATEGY) != Z_OK) {",
          "396:                       y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error deflateInit (gzip)\");",
          "397:                       ret = U_CALLBACK_ERROR;",
          "398:                     }",
          "399:                   } else {",
          "400:                     if (deflateInit(&defstream, Z_BEST_COMPRESSION) != Z_OK) {",
          "401:                       y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error deflateInit (deflate)\");",
          "402:                       ret = U_CALLBACK_ERROR;",
          "404:                   }",
          "405:                   if (ret == U_CALLBACK_CONTINUE) {",
          "406:                     do {",
          "407:                       if ((data_zip = o_realloc(data_zip, data_zip_len+_U_W_BLOCK_SIZE)) != NULL) {",
          "408:                         defstream.avail_out = _U_W_BLOCK_SIZE;",
          "409:                         defstream.next_out = ((Bytef *)data_zip)+data_zip_len;",
          "410:                         switch ((res = deflate(&defstream, Z_FINISH))) {",
          "411:                           case Z_OK:",
          "412:                           case Z_STREAM_END:",
          "413:                           case Z_BUF_ERROR:",
          "414:                             break;",
          "415:                           default:",
          "416:                             y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error deflate %d\", res);",
          "417:                             ret = U_CALLBACK_ERROR;",
          "418:                             break;",
          "419:                         }",
          "420:                         data_zip_len += _U_W_BLOCK_SIZE - defstream.avail_out;",
          "421:                       } else {",
          "422:                         y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error allocating resources for data_zip\");",
          "425:                     } while (U_CALLBACK_CONTINUE == ret && defstream.avail_out == 0);",
          "428:                       if (compress_mode == U_COMPRESS_GZIP) {",
          "429:                         if (config->allow_cache_compressed) {",
          "430:                           u_map_put_binary(&config->gzip_files, file_requested, data_zip, 0, defstream.total_out);",
          "432:                         ulfius_set_binary_body_response(response, 200, u_map_get(&config->gzip_files, file_requested), u_map_get_length(&config->gzip_files, file_requested));",
          "433:                       } else {",
          "434:                         if (config->allow_cache_compressed) {",
          "435:                           u_map_put_binary(&config->deflate_files, file_requested, data_zip, 0, defstream.total_out);",
          "437:                         ulfius_set_binary_body_response(response, 200, u_map_get(&config->deflate_files, file_requested), u_map_get_length(&config->deflate_files, file_requested));",
          "439:                       u_map_put(response->map_header, U_CONTENT_HEADER, compress_mode==U_COMPRESS_GZIP?U_ACCEPT_GZIP:U_ACCEPT_DEFLATE);",
          "442:                   deflateEnd(&defstream);",
          "443:                   o_free(data_zip);",
          "444:                 } else {",
          "445:                   y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error allocating resource for file_content or data_zip\");",
          "446:                   ret = U_CALLBACK_ERROR;",
          "448:                 o_free(file_content_orig);",
          "",
          "[Added Lines]",
          "378:                 if (length) {",
          "379:                   if ((file_content_orig = file_content = o_malloc(length)) != NULL && (data_zip = o_malloc((2*length)+20)) != NULL) {",
          "380:                     defstream.zalloc = u_zalloc;",
          "381:                     defstream.zfree = u_zfree;",
          "382:                     defstream.opaque = Z_NULL;",
          "383:                     defstream.avail_in = (uInt)length;",
          "384:                     defstream.next_in = (Bytef *)file_content;",
          "385:                     while ((read_length = fread(file_content, sizeof(char), offset, f))) {",
          "386:                       file_content += read_length;",
          "387:                       offset -= read_length;",
          "390:                     if (compress_mode == U_COMPRESS_GZIP) {",
          "391:                       if (deflateInit2(&defstream,",
          "392:                                        Z_DEFAULT_COMPRESSION,",
          "393:                                        Z_DEFLATED,",
          "394:                                        U_GZIP_WINDOW_BITS | U_GZIP_ENCODING,",
          "395:                                        8,",
          "396:                                        Z_DEFAULT_STRATEGY) != Z_OK) {",
          "397:                         y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error deflateInit (gzip)\");",
          "400:                     } else {",
          "401:                       if (deflateInit(&defstream, Z_BEST_COMPRESSION) != Z_OK) {",
          "402:                         y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error deflateInit (deflate)\");",
          "403:                         ret = U_CALLBACK_ERROR;",
          "404:                       }",
          "405:                     }",
          "407:                       do {",
          "408:                         if ((data_zip = o_realloc(data_zip, data_zip_len+_U_W_BLOCK_SIZE)) != NULL) {",
          "409:                           defstream.avail_out = _U_W_BLOCK_SIZE;",
          "410:                           defstream.next_out = ((Bytef *)data_zip)+data_zip_len;",
          "411:                           switch ((res = deflate(&defstream, Z_FINISH))) {",
          "412:                             case Z_OK:",
          "413:                             case Z_STREAM_END:",
          "414:                             case Z_BUF_ERROR:",
          "415:                               break;",
          "416:                             default:",
          "417:                               y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error deflate %d\", res);",
          "418:                               ret = U_CALLBACK_ERROR;",
          "419:                               break;",
          "420:                           }",
          "421:                           data_zip_len += _U_W_BLOCK_SIZE - defstream.avail_out;",
          "422:                         } else {",
          "423:                           y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error allocating resources for data_zip\");",
          "424:                           ret = U_CALLBACK_ERROR;",
          "426:                       } while (U_CALLBACK_CONTINUE == ret && defstream.avail_out == 0);",
          "428:                       if (ret == U_CALLBACK_CONTINUE) {",
          "429:                         if (compress_mode == U_COMPRESS_GZIP) {",
          "430:                           if (config->allow_cache_compressed) {",
          "431:                             u_map_put_binary(&config->gzip_files, file_requested, data_zip, 0, defstream.total_out);",
          "432:                           }",
          "433:                           ulfius_set_binary_body_response(response, 200, u_map_get(&config->gzip_files, file_requested), u_map_get_length(&config->gzip_files, file_requested));",
          "434:                         } else {",
          "435:                           if (config->allow_cache_compressed) {",
          "436:                             u_map_put_binary(&config->deflate_files, file_requested, data_zip, 0, defstream.total_out);",
          "437:                           }",
          "438:                           ulfius_set_binary_body_response(response, 200, u_map_get(&config->deflate_files, file_requested), u_map_get_length(&config->deflate_files, file_requested));",
          "440:                         u_map_put(response->map_header, U_CONTENT_HEADER, compress_mode==U_COMPRESS_GZIP?U_ACCEPT_GZIP:U_ACCEPT_DEFLATE);",
          "443:                     deflateEnd(&defstream);",
          "444:                     o_free(data_zip);",
          "445:                   } else {",
          "446:                     y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error allocating resource for file_content or data_zip\");",
          "447:                     ret = U_CALLBACK_ERROR;",
          "449:                   o_free(file_content_orig);",
          "",
          "---------------"
        ],
        "src/static_compressed_inmemory_website_callback.h||src/static_compressed_inmemory_website_callback.h": [
          "File: src/static_compressed_inmemory_website_callback.h -> src/static_compressed_inmemory_website_callback.h"
        ]
      }
    }
  ]
}