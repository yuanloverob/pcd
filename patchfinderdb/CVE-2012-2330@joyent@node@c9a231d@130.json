{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fb400b48682ce717f5f904bd7517324f2775cb2d",
      "candidate_info": {
        "commit_hash": "fb400b48682ce717f5f904bd7517324f2775cb2d",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/fb400b48682ce717f5f904bd7517324f2775cb2d",
        "files": [
          "lib/tty.js"
        ],
        "message": "Return after emitting error in tty.js",
        "before_after_code_files": [
          "lib/tty.js||litty.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/tty.js||litty.js": [
          "File: lib/tty.js -> litty.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:   var winSize = this._handle.getWindowSize();",
          "103:   if (!winSize) {",
          "104:     this.emit('error', errnoException(errno, 'getWindowSize'));",
          "105:   }",
          "106:   var newCols = winSize[0];",
          "107:   var newRows = winSize[1];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "67b10f816c5bc72e1b251b800fa0987bc08d8847",
      "candidate_info": {
        "commit_hash": "67b10f816c5bc72e1b251b800fa0987bc08d8847",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/67b10f816c5bc72e1b251b800fa0987bc08d8847",
        "files": [
          "test/simple/test-net-pipe-connect-errors.js"
        ],
        "message": "fix test-net-pipe-connect-errors for windows",
        "before_after_code_files": [
          "test/simple/test-net-pipe-connect-errors.js||test/simple/test-net-pipe-connect-errors.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-net-pipe-connect-errors.js||test/simple/test-net-pipe-connect-errors.js": [
          "File: test/simple/test-net-pipe-connect-errors.js -> test/simple/test-net-pipe-connect-errors.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: });",
          "64:     assert.ok(false);",
          "65:   });",
          "71:   });",
          "76: process.on('exit', function() {",
          "77:   assert.ok(notSocketErrorFired);",
          "78:   assert.ok(noEntErrorFired);",
          "80: });",
          "",
          "[Removed Lines]",
          "57: var accessServer = net.createServer(function() {",
          "58:   assert.ok(false);",
          "59: });",
          "60: accessServer.listen(common.PIPE, function() {",
          "61:   fs.chmodSync(common.PIPE, 0);",
          "63:   var accessClient = net.createConnection(common.PIPE, function() {",
          "67:   accessClient.on('error', function(err) {",
          "68:     assert.equal(err.code, 'EACCES');",
          "69:     accessErrorFired = true;",
          "70:     accessServer.close();",
          "72: });",
          "79:   assert.ok(accessErrorFired);",
          "",
          "[Added Lines]",
          "57: if (process.platform !== 'win32') {",
          "59:   var accessServer = net.createServer(function() {",
          "62:   accessServer.listen(common.PIPE, function() {",
          "63:     fs.chmodSync(common.PIPE, 0);",
          "65:     var accessClient = net.createConnection(common.PIPE, function() {",
          "66:       assert.ok(false);",
          "67:     });",
          "69:     accessClient.on('error', function(err) {",
          "70:       assert.equal(err.code, 'EACCES');",
          "71:       accessErrorFired = true;",
          "72:       accessServer.close();",
          "73:     });",
          "75: }",
          "82:   if (process.platform !== 'win32') {",
          "83:     assert.ok(accessErrorFired);",
          "84:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ef0ca2affd9f96327c9e72497bd0c74aae5c8861",
      "candidate_info": {
        "commit_hash": "ef0ca2affd9f96327c9e72497bd0c74aae5c8861",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/ef0ca2affd9f96327c9e72497bd0c74aae5c8861",
        "files": [
          "deps/v8/build/common.gypi",
          "deps/v8/tools/gyp/v8.gyp"
        ],
        "message": "v8: reapply floating patches",
        "before_after_code_files": [
          "deps/v8/build/common.gypi||deps/v8/build/common.gypi",
          "deps/v8/tools/gyp/v8.gyp||deps/v8/tools/gyp/v8.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/v8/build/common.gypi||deps/v8/build/common.gypi": [
          "File: deps/v8/build/common.gypi -> deps/v8/build/common.gypi",
          "--- Hunk 1 ---",
          "[Context before]",
          "239:           'WIN32',",
          "240:         ],",
          "241:         'msvs_configuration_attributes': {",
          "243:           'IntermediateDirectory': '$(OutDir)\\\\obj\\\\$(ProjectName)',",
          "244:           'CharacterSet': '1',",
          "245:         },",
          "",
          "[Removed Lines]",
          "242:           'OutputDirectory': '<(DEPTH)\\\\build\\\\$(ConfigurationName)',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "271:         'target_conditions': [",
          "272:           ['_toolset==\"host\"', {",
          "273:             'variables': {",
          "275:             },",
          "276:             'cflags': [ '<(m32flag)' ],",
          "277:             'ldflags': [ '<(m32flag)' ],",
          "",
          "[Removed Lines]",
          "274:               'm32flag': '<!((echo | $(echo ${CXX_host:-$(which g++)}) -m32 -E - > /dev/null 2>&1) && echo -n \"-m32\" || true)',",
          "",
          "[Added Lines]",
          "273:               'm32flag': '<!((echo | $(echo ${CXX_host:-$(which g++)}) -m32 -E - > /dev/null 2>&1) && echo \"-m32\" || true)',",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "281:           }],",
          "282:           ['_toolset==\"target\"', {",
          "283:             'variables': {",
          "285:             },",
          "286:             'cflags': [ '<(m32flag)' ],",
          "287:             'ldflags': [ '<(m32flag)' ],",
          "",
          "[Removed Lines]",
          "284:               'm32flag': '<!((echo | $(echo ${CXX_target:-${CXX:-$(which g++)}}) -m32 -E - > /dev/null 2>&1) && echo -n \"-m32\" || true)',",
          "",
          "[Added Lines]",
          "283:               'm32flag': '<!((echo | $(echo ${CXX_target:-${CXX:-$(which g++)}}) -m32 -E - > /dev/null 2>&1) && echo \"-m32\" || true)',",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "324:         },",
          "325:         'conditions': [",
          "326:           ['OS==\"linux\" or OS==\"freebsd\" or OS==\"openbsd\" or OS==\"netbsd\"', {",
          "328:                         '-Wnon-virtual-dtor', '-Woverloaded-virtual' ],",
          "329:           }],",
          "330:         ],",
          "",
          "[Removed Lines]",
          "327:             'cflags': [ '-Wall', '<(werror)', '-W', '-Wno-unused-parameter',",
          "",
          "[Added Lines]",
          "326:             'cflags': [ '-Wno-unused-parameter',",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "333:         'conditions': [",
          "334:           ['OS==\"linux\" or OS==\"freebsd\" or OS==\"openbsd\" or OS==\"netbsd\" \\",
          "335:             or OS==\"android\"', {",
          "340:             'cflags': [",
          "341:               '-fdata-sections',",
          "342:               '-ffunction-sections',",
          "",
          "[Removed Lines]",
          "336:             'cflags!': [",
          "337:               '-O2',",
          "338:               '-Os',",
          "339:             ],",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/v8/tools/gyp/v8.gyp||deps/v8/tools/gyp/v8.gyp": [
          "File: deps/v8/tools/gyp/v8.gyp -> deps/v8/tools/gyp/v8.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "721:                 '../../src/win32-math.h',",
          "722:               ],",
          "723:               'msvs_disabled_warnings': [4351, 4355, 4800],",
          "724:               'link_settings':  {",
          "725:                 'libraries': [ '-lwinmm.lib', '-lws2_32.lib' ],",
          "726:               },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "724:               'direct_dependent_settings': {",
          "725:                 'msvs_disabled_warnings': [4351, 4355, 4800],",
          "726:               },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c481f97a9c16c812979f8408171a5cece4b1d918",
      "candidate_info": {
        "commit_hash": "c481f97a9c16c812979f8408171a5cece4b1d918",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/c481f97a9c16c812979f8408171a5cece4b1d918",
        "files": [
          "deps/uv/AUTHORS",
          "deps/uv/include/uv-private/eio.h",
          "deps/uv/include/uv.h",
          "deps/uv/src/unix/core.c",
          "deps/uv/src/unix/dl.c",
          "deps/uv/src/unix/eio/eio.c",
          "deps/uv/src/unix/fs.c",
          "deps/uv/src/unix/uv-eio.c",
          "deps/uv/test/test-list.h"
        ],
        "message": "uv: upgrade to d6a06b8",
        "before_after_code_files": [
          "deps/uv/include/uv-private/eio.h||deps/uv/include/uv-private/eio.h",
          "deps/uv/include/uv.h||deps/uv/include/uv.h",
          "deps/uv/src/unix/core.c||deps/uv/src/unix/core.c",
          "deps/uv/src/unix/dl.c||deps/uv/src/unix/dl.c",
          "deps/uv/src/unix/eio/eio.c||deps/uv/src/unix/eio/eio.c",
          "deps/uv/src/unix/fs.c||deps/uv/src/unix/fs.c",
          "deps/uv/src/unix/uv-eio.c||deps/uv/src/unix/uv-eio.c",
          "deps/uv/test/test-list.h||deps/uv/test/test-list.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/include/uv-private/eio.h||deps/uv/include/uv-private/eio.h": [
          "File: deps/uv/include/uv-private/eio.h -> deps/uv/include/uv-private/eio.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "206:   EIO_PRI_DEFAULT =  0",
          "207: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "209: #define ETP_PRI_MIN EIO_PRI_MIN",
          "210: #define ETP_PRI_MAX EIO_PRI_MAX",
          "212: #define ETP_NUM_PRI (ETP_PRI_MAX - ETP_PRI_MIN + 1)",
          "214: #define ETP_REQ eio_req",
          "221: typedef struct {",
          "223:   int size;",
          "224: } etp_reqq;",
          "226: typedef struct {",
          "229: } eio_channel;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "271: void eio_set_max_poll_time (eio_tstamp nseconds);",
          "",
          "[Removed Lines]",
          "264: int eio_init (void (*want_poll)(void), void (*done_poll)(void));",
          "268: int eio_poll (void);",
          "",
          "[Added Lines]",
          "288: int eio_init (void (*want_poll)(eio_channel *), void (*done_poll)(eio_channel *));",
          "291: void eio_channel_init(eio_channel *, void *data);",
          "295: int eio_poll (eio_channel *channel);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "291: #ifndef EIO_NO_WRAPPERS",
          "335: #endif",
          "341: void eio_grp_feed      (eio_req *grp, void (*feed)(eio_req *req), int limit);",
          "342: void eio_grp_limit     (eio_req *grp, int limit);",
          "343: void eio_grp_add       (eio_req *grp, eio_req *req);",
          "",
          "[Removed Lines]",
          "294: eio_req *eio_sync      (int pri, eio_cb cb, void *data);",
          "295: eio_req *eio_fsync     (int fd, int pri, eio_cb cb, void *data);",
          "296: eio_req *eio_fdatasync (int fd, int pri, eio_cb cb, void *data);",
          "297: eio_req *eio_syncfs    (int fd, int pri, eio_cb cb, void *data);",
          "298: eio_req *eio_msync     (void *addr, size_t length, int flags, int pri, eio_cb cb, void *data);",
          "299: eio_req *eio_mtouch    (void *addr, size_t length, int flags, int pri, eio_cb cb, void *data);",
          "300: eio_req *eio_mlock     (void *addr, size_t length, int pri, eio_cb cb, void *data);",
          "301: eio_req *eio_mlockall  (int flags, int pri, eio_cb cb, void *data);",
          "302: eio_req *eio_sync_file_range (int fd, off_t offset, size_t nbytes, unsigned int flags, int pri, eio_cb cb, void *data);",
          "303: eio_req *eio_fallocate (int fd, int mode, off_t offset, size_t len, int pri, eio_cb cb, void *data);",
          "304: eio_req *eio_close     (int fd, int pri, eio_cb cb, void *data);",
          "305: eio_req *eio_readahead (int fd, off_t offset, size_t length, int pri, eio_cb cb, void *data);",
          "306: eio_req *eio_read      (int fd, void *buf, size_t length, off_t offset, int pri, eio_cb cb, void *data);",
          "307: eio_req *eio_write     (int fd, void *buf, size_t length, off_t offset, int pri, eio_cb cb, void *data);",
          "310: eio_req *eio_futime    (int fd, eio_tstamp atime, eio_tstamp mtime, int pri, eio_cb cb, void *data);",
          "311: eio_req *eio_ftruncate (int fd, off_t offset, int pri, eio_cb cb, void *data);",
          "312: eio_req *eio_fchmod    (int fd, eio_mode_t mode, int pri, eio_cb cb, void *data);",
          "313: eio_req *eio_fchown    (int fd, eio_uid_t uid, eio_gid_t gid, int pri, eio_cb cb, void *data);",
          "314: eio_req *eio_dup2      (int fd, int fd2, int pri, eio_cb cb, void *data);",
          "315: eio_req *eio_sendfile  (int out_fd, int in_fd, off_t in_offset, size_t length, int pri, eio_cb cb, void *data);",
          "316: eio_req *eio_open      (const char *path, int flags, eio_mode_t mode, int pri, eio_cb cb, void *data);",
          "317: eio_req *eio_utime     (const char *path, eio_tstamp atime, eio_tstamp mtime, int pri, eio_cb cb, void *data);",
          "318: eio_req *eio_truncate  (const char *path, off_t offset, int pri, eio_cb cb, void *data);",
          "319: eio_req *eio_chown     (const char *path, eio_uid_t uid, eio_gid_t gid, int pri, eio_cb cb, void *data);",
          "320: eio_req *eio_chmod     (const char *path, eio_mode_t mode, int pri, eio_cb cb, void *data);",
          "321: eio_req *eio_mkdir     (const char *path, eio_mode_t mode, int pri, eio_cb cb, void *data);",
          "323: eio_req *eio_rmdir     (const char *path, int pri, eio_cb cb, void *data);",
          "324: eio_req *eio_unlink    (const char *path, int pri, eio_cb cb, void *data);",
          "330: eio_req *eio_mknod     (const char *path, eio_mode_t mode, dev_t dev, int pri, eio_cb cb, void *data);",
          "331: eio_req *eio_link      (const char *path, const char *new_path, int pri, eio_cb cb, void *data);",
          "332: eio_req *eio_symlink   (const char *path, const char *new_path, int pri, eio_cb cb, void *data);",
          "333: eio_req *eio_rename    (const char *path, const char *new_path, int pri, eio_cb cb, void *data);",
          "334: eio_req *eio_custom    (void (*execute)(eio_req *), int pri, eio_cb cb, void *data);",
          "340: eio_req *eio_grp       (eio_cb cb, void *data);",
          "",
          "[Added Lines]",
          "321: eio_req *eio_sync      (int pri, eio_cb cb, void *data, eio_channel *channel);",
          "322: eio_req *eio_fsync     (int fd, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "323: eio_req *eio_fdatasync (int fd, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "324: eio_req *eio_syncfs    (int fd, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "325: eio_req *eio_msync     (void *addr, size_t length, int flags, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "326: eio_req *eio_mtouch    (void *addr, size_t length, int flags, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "327: eio_req *eio_mlock     (void *addr, size_t length, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "328: eio_req *eio_mlockall  (int flags, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "329: eio_req *eio_sync_file_range (int fd, off_t offset, size_t nbytes, unsigned int flags, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "330: eio_req *eio_fallocate (int fd, int mode, off_t offset, size_t len, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "331: eio_req *eio_close     (int fd, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "332: eio_req *eio_readahead (int fd, off_t offset, size_t length, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "333: eio_req *eio_read      (int fd, void *buf, size_t length, off_t offset, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "334: eio_req *eio_write     (int fd, void *buf, size_t length, off_t offset, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "337: eio_req *eio_futime    (int fd, eio_tstamp atime, eio_tstamp mtime, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "338: eio_req *eio_ftruncate (int fd, off_t offset, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "339: eio_req *eio_fchmod    (int fd, eio_mode_t mode, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "340: eio_req *eio_fchown    (int fd, eio_uid_t uid, eio_gid_t gid, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "341: eio_req *eio_dup2      (int fd, int fd2, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "342: eio_req *eio_sendfile  (int out_fd, int in_fd, off_t in_offset, size_t length, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "343: eio_req *eio_open      (const char *path, int flags, eio_mode_t mode, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "344: eio_req *eio_utime     (const char *path, eio_tstamp atime, eio_tstamp mtime, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "345: eio_req *eio_truncate  (const char *path, off_t offset, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "346: eio_req *eio_chown     (const char *path, eio_uid_t uid, eio_gid_t gid, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "347: eio_req *eio_chmod     (const char *path, eio_mode_t mode, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "348: eio_req *eio_mkdir     (const char *path, eio_mode_t mode, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "350: eio_req *eio_rmdir     (const char *path, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "351: eio_req *eio_unlink    (const char *path, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "357: eio_req *eio_mknod     (const char *path, eio_mode_t mode, dev_t dev, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "358: eio_req *eio_link      (const char *path, const char *new_path, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "359: eio_req *eio_symlink   (const char *path, const char *new_path, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "360: eio_req *eio_rename    (const char *path, const char *new_path, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "361: eio_req *eio_custom    (void (*execute)(eio_req *), int pri, eio_cb cb, void *data, eio_channel *channel);",
          "367: eio_req *eio_grp       (eio_cb cb, void *data, eio_channel *channel);",
          "",
          "---------------"
        ],
        "deps/uv/include/uv.h||deps/uv/include/uv.h": [
          "File: deps/uv/include/uv.h -> deps/uv/include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1401:   uv_async_t uv_eio_want_poll_notifier;",
          "1402:   uv_async_t uv_eio_done_poll_notifier;",
          "1403:   uv_idle_t uv_eio_poller;",
          "1405:   uv_counters_t counters;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1404:   eio_channel uv_eio_channel;",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/core.c||deps/uv/src/unix/core.c": [
          "File: deps/uv/src/unix/core.c -> deps/uv/src/unix/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:   loop->ev = ev_loop_new(EVFLAG_AUTO);",
          "168: #endif",
          "169:   ev_set_userdata(loop->ev, loop);",
          "170:   return 0;",
          "171: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "170:   eio_channel_init(&loop->uv_eio_channel, loop);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "709:   uv_ref(loop);",
          "711:   req = eio_custom(getaddrinfo_thread_proc, EIO_PRI_DEFAULT,",
          "713:   assert(req);",
          "714:   assert(req->data == handle);",
          "",
          "[Removed Lines]",
          "712:       uv_getaddrinfo_done, handle);",
          "",
          "[Added Lines]",
          "713:       uv_getaddrinfo_done, handle, &loop->uv_eio_channel);",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/dl.c||deps/uv/src/unix/dl.c": [
          "File: deps/uv/src/unix/dl.c -> deps/uv/src/unix/dl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include <dlfcn.h>",
          "26: #include <errno.h>",
          "35: uv_err_t uv_dlopen(const char* filename, uv_lib_t* library) {",
          "36:   void* handle = dlopen(filename, RTLD_LAZY);",
          "37:   if (handle == NULL) {",
          "39:   }",
          "",
          "[Removed Lines]",
          "32: static const uv_err_t uv_inval_ = { UV_EINVAL, EINVAL };",
          "38:     return uv_inval_;",
          "",
          "[Added Lines]",
          "32:     return uv__new_sys_error(errno);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46: uv_err_t uv_dlclose(uv_lib_t library) {",
          "47:   if (dlclose(library) != 0) {",
          "49:   }",
          "51:   return uv_ok_;",
          "",
          "[Removed Lines]",
          "48:     return uv_inval_;",
          "",
          "[Added Lines]",
          "42:     return uv__new_sys_error(errno);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55: uv_err_t uv_dlsym(uv_lib_t library, const char* name, void** ptr) {",
          "65:   }",
          "",
          "[Removed Lines]",
          "56:   void* address;",
          "59:   dlerror();",
          "61:   address = dlsym(library, name);",
          "63:   if (dlerror()) {",
          "64:     return uv_inval_;",
          "",
          "[Added Lines]",
          "50:   void* address = dlsym(library, name);",
          "51:   if (address == NULL) {",
          "52:     return uv__new_sys_error(errno);",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/eio/eio.c||deps/uv/src/unix/eio/eio.c": [
          "File: deps/uv/src/unix/eio/eio.c -> deps/uv/src/unix/eio/eio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "363: #define EIO_TICKS ((1000000 + 1023) >> 10)",
          "368: struct etp_worker;",
          "371: #define ETP_DESTROY(req) eio_destroy (req)",
          "372: static int eio_finish (eio_req *req);",
          "373: #define ETP_FINISH(req)  eio_finish (req)",
          "",
          "[Removed Lines]",
          "365: #define ETP_PRI_MIN EIO_PRI_MIN",
          "366: #define ETP_PRI_MAX EIO_PRI_MAX",
          "370: #define ETP_REQ eio_req",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "382: ecb_inline int",
          "383: tvdiff (struct timeval *tv1, struct timeval *tv2)",
          "",
          "[Removed Lines]",
          "379: #define ETP_NUM_PRI (ETP_PRI_MAX - ETP_PRI_MIN + 1)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "389: static unsigned int started, idle, wanted = 4;",
          "",
          "[Removed Lines]",
          "391: static void (*want_poll_cb) (void);",
          "392: static void (*done_poll_cb) (void);",
          "",
          "[Added Lines]",
          "385: static void (*want_poll_cb) (eio_channel *);",
          "386: static void (*done_poll_cb) (eio_channel *);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "506:   return retval;",
          "507: }",
          "519: static etp_reqq req_queue;",
          "522: static void ecb_noinline ecb_cold",
          "523: reqq_init (etp_reqq *q)",
          "",
          "[Removed Lines]",
          "514: typedef struct {",
          "516:   int size;",
          "517: } etp_reqq;",
          "520: static etp_reqq res_queue;",
          "",
          "[Added Lines]",
          "504: static eio_channel default_channel;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "574: }",
          "576: static int ecb_cold",
          "578: {",
          "579:   X_MUTEX_CREATE (wrklock);",
          "580:   X_MUTEX_CREATE (reslock);",
          "",
          "[Removed Lines]",
          "577: etp_init (void (*want_poll)(void), void (*done_poll)(void))",
          "",
          "[Added Lines]",
          "561: etp_init (void (*want_poll)(eio_channel *), void (*done_poll)(eio_channel *))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "582:   X_COND_CREATE  (reqwait);",
          "584:   reqq_init (&req_queue);",
          "587:   wrk_first.next =",
          "588:   wrk_first.prev = &wrk_first;",
          "",
          "[Removed Lines]",
          "585:   reqq_init (&res_queue);",
          "",
          "[Added Lines]",
          "569:   eio_channel_init (&default_channel, 0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "656:   X_UNLOCK (wrklock);",
          "657: }",
          "659: static int",
          "661: {",
          "662:   unsigned int maxreqs;",
          "663:   unsigned int maxtime;",
          "664:   struct timeval tv_start, tv_now;",
          "666:   X_LOCK (reslock);",
          "667:   maxreqs = max_poll_reqs;",
          "",
          "[Removed Lines]",
          "660: etp_poll (void)",
          "",
          "[Added Lines]",
          "643: void",
          "644: eio_channel_init(eio_channel *channel, void *data) {",
          "645:   reqq_init(&channel->res_queue);",
          "646:   channel->data = data;",
          "647: }",
          "650: etp_poll (eio_channel *channel)",
          "655:   if(!channel) channel = &default_channel;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "678:       etp_maybe_start_thread ();",
          "680:       X_LOCK (reslock);",
          "683:       if (req)",
          "684:         {",
          "685:           --npending;",
          "689:         }",
          "691:       X_UNLOCK (reslock);",
          "",
          "[Removed Lines]",
          "681:       req = reqq_shift (&res_queue);",
          "687:           if (!res_queue.size && done_poll_cb)",
          "688:             done_poll_cb ();",
          "",
          "[Added Lines]",
          "672:       req = reqq_shift (&channel->res_queue);",
          "678:           if (!channel->res_queue.size && done_poll_cb)",
          "679:             done_poll_cb (channel);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "753:       ++npending;",
          "758:       X_UNLOCK (reslock);",
          "759:     }",
          "",
          "[Removed Lines]",
          "755:       if (!reqq_push (&res_queue, req) && want_poll_cb)",
          "756:         want_poll_cb ();",
          "",
          "[Added Lines]",
          "746:       if (!reqq_push (&req->channel->res_queue, req) && want_poll_cb)",
          "747:         want_poll_cb (req->channel);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "970:   etp_set_max_parallel (nthreads);",
          "971: }",
          "974: {",
          "976: }",
          "",
          "[Removed Lines]",
          "973: int eio_poll (void)",
          "975:   return etp_poll ();",
          "",
          "[Added Lines]",
          "964: int eio_poll (eio_channel *channel)",
          "966:   return etp_poll (channel);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2093:       ++npending;",
          "2098:       self->req = 0;",
          "2099:       etp_worker_clear (self);",
          "",
          "[Removed Lines]",
          "2095:       if (!reqq_push (&res_queue, req) && want_poll_cb)",
          "2096:         want_poll_cb ();",
          "",
          "[Added Lines]",
          "2086:       if (!reqq_push (&req->channel->res_queue, req) && want_poll_cb)",
          "2087:         want_poll_cb (req->channel);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2114: int ecb_cold",
          "2116: {",
          "2117: #if !HAVE_PREADWRITE",
          "2118:   X_MUTEX_CREATE (preadwritelock);",
          "",
          "[Removed Lines]",
          "2115: eio_init (void (*want_poll)(void), void (*done_poll)(void))",
          "",
          "[Added Lines]",
          "2106: eio_init (void (*want_poll)(eio_channel *), void (*done_poll)(eio_channel *))",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2138:   req->pri     = pri;      \\",
          "2139:   req->finish  = cb;      \\",
          "2140:   req->data    = data;      \\",
          "2143: #define SEND eio_submit (req); return req",
          "",
          "[Removed Lines]",
          "2141:   req->destroy = eio_api_destroy;",
          "",
          "[Added Lines]",
          "2132:   req->destroy = eio_api_destroy; \\",
          "2133:   req->channel = channel",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2295: #ifndef EIO_NO_WRAPPERS",
          "2298: {",
          "2299:   REQ (EIO_NOP); SEND;",
          "2300: }",
          "2303: {",
          "2304:   REQ (EIO_BUSY); req->nv1 = delay; SEND;",
          "2305: }",
          "2308: {",
          "2309:   REQ (EIO_SYNC); SEND;",
          "2310: }",
          "2313: {",
          "2314:   REQ (EIO_FSYNC); req->int1 = fd; SEND;",
          "2315: }",
          "2318: {",
          "2319:   REQ (EIO_MSYNC); req->ptr2 = addr; req->size = length; req->int1 = flags; SEND;",
          "2320: }",
          "2323: {",
          "2324:   REQ (EIO_FDATASYNC); req->int1 = fd; SEND;",
          "2325: }",
          "2328: {",
          "2329:   REQ (EIO_SYNCFS); req->int1 = fd; SEND;",
          "2330: }",
          "2333: {",
          "2334:   REQ (EIO_SYNC_FILE_RANGE); req->int1 = fd; req->offs = offset; req->size = nbytes; req->int2 = flags; SEND;",
          "2335: }",
          "2338: {",
          "2339:   REQ (EIO_MTOUCH); req->ptr2 = addr; req->size = length; req->int1 = flags; SEND;",
          "2340: }",
          "2343: {",
          "2344:   REQ (EIO_MLOCK); req->ptr2 = addr; req->size = length; SEND;",
          "2345: }",
          "2348: {",
          "2349:   REQ (EIO_MLOCKALL); req->int1 = flags; SEND;",
          "2350: }",
          "2353: {",
          "2354:   REQ (EIO_FALLOCATE); req->int1 = fd; req->int2 = mode; req->offs = offset; req->size = len; SEND;",
          "2355: }",
          "2358: {",
          "2359:   REQ (EIO_CLOSE); req->int1 = fd; SEND;",
          "2360: }",
          "2363: {",
          "2364:   REQ (EIO_READAHEAD); req->int1 = fd; req->offs = offset; req->size = length; SEND;",
          "2365: }",
          "2368: {",
          "2369:   REQ (EIO_READ); req->int1 = fd; req->offs = offset; req->size = length; req->ptr2 = buf; SEND;",
          "2370: }",
          "2373: {",
          "2374:   REQ (EIO_WRITE); req->int1 = fd; req->offs = offset; req->size = length; req->ptr2 = buf; SEND;",
          "2375: }",
          "2378: {",
          "2379:   REQ (EIO_FSTAT); req->int1 = fd; SEND;",
          "2380: }",
          "2383: {",
          "2384:   REQ (EIO_FSTATVFS); req->int1 = fd; SEND;",
          "2385: }",
          "2388: {",
          "2389:   REQ (EIO_FUTIME); req->int1 = fd; req->nv1 = atime; req->nv2 = mtime; SEND;",
          "2390: }",
          "2393: {",
          "2394:   REQ (EIO_FTRUNCATE); req->int1 = fd; req->offs = offset; SEND;",
          "2395: }",
          "2398: {",
          "2399:   REQ (EIO_FCHMOD); req->int1 = fd; req->int2 = (long)mode; SEND;",
          "2400: }",
          "2403: {",
          "2404:   REQ (EIO_FCHOWN); req->int1 = fd; req->int2 = (long)uid; req->int3 = (long)gid; SEND;",
          "2405: }",
          "2408: {",
          "2409:   REQ (EIO_DUP2); req->int1 = fd; req->int2 = fd2; SEND;",
          "2410: }",
          "2413: {",
          "2414:   REQ (EIO_SENDFILE); req->int1 = out_fd; req->int2 = in_fd; req->offs = in_offset; req->size = length; SEND;",
          "2415: }",
          "2418: {",
          "2419:   REQ (EIO_OPEN); PATH; req->int1 = flags; req->int2 = (long)mode; SEND;",
          "2420: }",
          "2423: {",
          "2424:   REQ (EIO_UTIME); PATH; req->nv1 = atime; req->nv2 = mtime; SEND;",
          "2425: }",
          "2428: {",
          "2429:   REQ (EIO_TRUNCATE); PATH; req->offs = offset; SEND;",
          "2430: }",
          "2433: {",
          "2434:   REQ (EIO_CHOWN); PATH; req->int2 = (long)uid; req->int3 = (long)gid; SEND;",
          "2435: }",
          "2438: {",
          "2439:   REQ (EIO_CHMOD); PATH; req->int2 = (long)mode; SEND;",
          "2440: }",
          "2443: {",
          "2444:   REQ (EIO_MKDIR); PATH; req->int2 = (long)mode; SEND;",
          "2445: }",
          "2447: static eio_req *",
          "2449: {",
          "2450:   REQ (type); PATH; SEND;",
          "2451: }",
          "2454: {",
          "2456: }",
          "2459: {",
          "2461: }",
          "2464: {",
          "2466: }",
          "2469: {",
          "2471: }",
          "2474: {",
          "2476: }",
          "2479: {",
          "2481: }",
          "2484: {",
          "2486: }",
          "2489: {",
          "2490:   REQ (EIO_READDIR); PATH; req->int1 = flags; SEND;",
          "2491: }",
          "2494: {",
          "2495:   REQ (EIO_MKNOD); PATH; req->int2 = (long)mode; req->offs = (off_t)dev; SEND;",
          "2496: }",
          "2498: static eio_req *",
          "2500: {",
          "2501:   REQ (type); PATH;",
          "",
          "[Removed Lines]",
          "2297: eio_req *eio_nop (int pri, eio_cb cb, void *data)",
          "2302: eio_req *eio_busy (double delay, int pri, eio_cb cb, void *data)",
          "2307: eio_req *eio_sync (int pri, eio_cb cb, void *data)",
          "2312: eio_req *eio_fsync (int fd, int pri, eio_cb cb, void *data)",
          "2317: eio_req *eio_msync (void *addr, size_t length, int flags, int pri, eio_cb cb, void *data)",
          "2322: eio_req *eio_fdatasync (int fd, int pri, eio_cb cb, void *data)",
          "2327: eio_req *eio_syncfs (int fd, int pri, eio_cb cb, void *data)",
          "2332: eio_req *eio_sync_file_range (int fd, off_t offset, size_t nbytes, unsigned int flags, int pri, eio_cb cb, void *data)",
          "2337: eio_req *eio_mtouch (void *addr, size_t length, int flags, int pri, eio_cb cb, void *data)",
          "2342: eio_req *eio_mlock (void *addr, size_t length, int pri, eio_cb cb, void *data)",
          "2347: eio_req *eio_mlockall (int flags, int pri, eio_cb cb, void *data)",
          "2352: eio_req *eio_fallocate (int fd, int mode, off_t offset, size_t len, int pri, eio_cb cb, void *data)",
          "2357: eio_req *eio_close (int fd, int pri, eio_cb cb, void *data)",
          "2362: eio_req *eio_readahead (int fd, off_t offset, size_t length, int pri, eio_cb cb, void *data)",
          "2367: eio_req *eio_read (int fd, void *buf, size_t length, off_t offset, int pri, eio_cb cb, void *data)",
          "2372: eio_req *eio_write (int fd, void *buf, size_t length, off_t offset, int pri, eio_cb cb, void *data)",
          "2377: eio_req *eio_fstat (int fd, int pri, eio_cb cb, void *data)",
          "2382: eio_req *eio_fstatvfs (int fd, int pri, eio_cb cb, void *data)",
          "2387: eio_req *eio_futime (int fd, double atime, double mtime, int pri, eio_cb cb, void *data)",
          "2392: eio_req *eio_ftruncate (int fd, off_t offset, int pri, eio_cb cb, void *data)",
          "2397: eio_req *eio_fchmod (int fd, eio_mode_t mode, int pri, eio_cb cb, void *data)",
          "2402: eio_req *eio_fchown (int fd, eio_uid_t uid, eio_gid_t gid, int pri, eio_cb cb, void *data)",
          "2407: eio_req *eio_dup2 (int fd, int fd2, int pri, eio_cb cb, void *data)",
          "2412: eio_req *eio_sendfile (int out_fd, int in_fd, off_t in_offset, size_t length, int pri, eio_cb cb, void *data)",
          "2417: eio_req *eio_open (const char *path, int flags, eio_mode_t mode, int pri, eio_cb cb, void *data)",
          "2422: eio_req *eio_utime (const char *path, double atime, double mtime, int pri, eio_cb cb, void *data)",
          "2427: eio_req *eio_truncate (const char *path, off_t offset, int pri, eio_cb cb, void *data)",
          "2432: eio_req *eio_chown (const char *path, eio_uid_t uid, eio_gid_t gid, int pri, eio_cb cb, void *data)",
          "2437: eio_req *eio_chmod (const char *path, eio_mode_t mode, int pri, eio_cb cb, void *data)",
          "2442: eio_req *eio_mkdir (const char *path, eio_mode_t mode, int pri, eio_cb cb, void *data)",
          "2448: eio__1path (int type, const char *path, int pri, eio_cb cb, void *data)",
          "2453: eio_req *eio_readlink (const char *path, int pri, eio_cb cb, void *data)",
          "2455:   return eio__1path (EIO_READLINK, path, pri, cb, data);",
          "2458: eio_req *eio_realpath (const char *path, int pri, eio_cb cb, void *data)",
          "2460:   return eio__1path (EIO_REALPATH, path, pri, cb, data);",
          "2463: eio_req *eio_stat (const char *path, int pri, eio_cb cb, void *data)",
          "2465:   return eio__1path (EIO_STAT, path, pri, cb, data);",
          "2468: eio_req *eio_lstat (const char *path, int pri, eio_cb cb, void *data)",
          "2470:   return eio__1path (EIO_LSTAT, path, pri, cb, data);",
          "2473: eio_req *eio_statvfs (const char *path, int pri, eio_cb cb, void *data)",
          "2475:   return eio__1path (EIO_STATVFS, path, pri, cb, data);",
          "2478: eio_req *eio_unlink (const char *path, int pri, eio_cb cb, void *data)",
          "2480:   return eio__1path (EIO_UNLINK, path, pri, cb, data);",
          "2483: eio_req *eio_rmdir (const char *path, int pri, eio_cb cb, void *data)",
          "2485:   return eio__1path (EIO_RMDIR, path, pri, cb, data);",
          "2488: eio_req *eio_readdir (const char *path, int flags, int pri, eio_cb cb, void *data)",
          "2493: eio_req *eio_mknod (const char *path, eio_mode_t mode, dev_t dev, int pri, eio_cb cb, void *data)",
          "2499: eio__2path (int type, const char *path, const char *new_path, int pri, eio_cb cb, void *data)",
          "",
          "[Added Lines]",
          "2289: eio_req *eio_nop (int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2294: eio_req *eio_busy (double delay, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2299: eio_req *eio_sync (int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2304: eio_req *eio_fsync (int fd, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2309: eio_req *eio_msync (void *addr, size_t length, int flags, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2314: eio_req *eio_fdatasync (int fd, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2319: eio_req *eio_syncfs (int fd, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2324: eio_req *eio_sync_file_range (int fd, off_t offset, size_t nbytes, unsigned int flags, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2329: eio_req *eio_mtouch (void *addr, size_t length, int flags, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2334: eio_req *eio_mlock (void *addr, size_t length, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2339: eio_req *eio_mlockall (int flags, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2344: eio_req *eio_fallocate (int fd, int mode, off_t offset, size_t len, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2349: eio_req *eio_close (int fd, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2354: eio_req *eio_readahead (int fd, off_t offset, size_t length, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2359: eio_req *eio_read (int fd, void *buf, size_t length, off_t offset, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2364: eio_req *eio_write (int fd, void *buf, size_t length, off_t offset, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2369: eio_req *eio_fstat (int fd, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2374: eio_req *eio_fstatvfs (int fd, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2379: eio_req *eio_futime (int fd, double atime, double mtime, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2384: eio_req *eio_ftruncate (int fd, off_t offset, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2389: eio_req *eio_fchmod (int fd, eio_mode_t mode, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2394: eio_req *eio_fchown (int fd, eio_uid_t uid, eio_gid_t gid, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2399: eio_req *eio_dup2 (int fd, int fd2, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2404: eio_req *eio_sendfile (int out_fd, int in_fd, off_t in_offset, size_t length, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2409: eio_req *eio_open (const char *path, int flags, eio_mode_t mode, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2414: eio_req *eio_utime (const char *path, double atime, double mtime, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2419: eio_req *eio_truncate (const char *path, off_t offset, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2424: eio_req *eio_chown (const char *path, eio_uid_t uid, eio_gid_t gid, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2429: eio_req *eio_chmod (const char *path, eio_mode_t mode, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2434: eio_req *eio_mkdir (const char *path, eio_mode_t mode, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2440: eio__1path (int type, const char *path, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2445: eio_req *eio_readlink (const char *path, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2447:   return eio__1path (EIO_READLINK, path, pri, cb, data, channel);",
          "2450: eio_req *eio_realpath (const char *path, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2452:   return eio__1path (EIO_REALPATH, path, pri, cb, data, channel);",
          "2455: eio_req *eio_stat (const char *path, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2457:   return eio__1path (EIO_STAT, path, pri, cb, data, channel);",
          "2460: eio_req *eio_lstat (const char *path, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2462:   return eio__1path (EIO_LSTAT, path, pri, cb, data, channel);",
          "2465: eio_req *eio_statvfs (const char *path, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2467:   return eio__1path (EIO_STATVFS, path, pri, cb, data, channel);",
          "2470: eio_req *eio_unlink (const char *path, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2472:   return eio__1path (EIO_UNLINK, path, pri, cb, data, channel);",
          "2475: eio_req *eio_rmdir (const char *path, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2477:   return eio__1path (EIO_RMDIR, path, pri, cb, data, channel);",
          "2480: eio_req *eio_readdir (const char *path, int flags, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2485: eio_req *eio_mknod (const char *path, eio_mode_t mode, dev_t dev, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2491: eio__2path (int type, const char *path, const char *new_path, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2511:   SEND;",
          "2512: }",
          "2515: {",
          "2517: }",
          "2520: {",
          "2522: }",
          "2525: {",
          "2527: }",
          "2530: {",
          "2531:   REQ (EIO_CUSTOM); req->feed = execute; SEND;",
          "2532: }",
          "2534: #endif",
          "2537: {",
          "2538:   const int pri = EIO_PRI_MAX;",
          "",
          "[Removed Lines]",
          "2514: eio_req *eio_link (const char *path, const char *new_path, int pri, eio_cb cb, void *data)",
          "2516:   return eio__2path (EIO_LINK, path, new_path, pri, cb, data);",
          "2519: eio_req *eio_symlink (const char *path, const char *new_path, int pri, eio_cb cb, void *data)",
          "2521:   return eio__2path (EIO_SYMLINK, path, new_path, pri, cb, data);",
          "2524: eio_req *eio_rename (const char *path, const char *new_path, int pri, eio_cb cb, void *data)",
          "2526:   return eio__2path (EIO_RENAME, path, new_path, pri, cb, data);",
          "2529: eio_req *eio_custom (void (*execute)(eio_req *), int pri, eio_cb cb, void *data)",
          "2536: eio_req *eio_grp (eio_cb cb, void *data)",
          "",
          "[Added Lines]",
          "2506: eio_req *eio_link (const char *path, const char *new_path, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2508:   return eio__2path (EIO_LINK, path, new_path, pri, cb, data, channel);",
          "2511: eio_req *eio_symlink (const char *path, const char *new_path, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2513:   return eio__2path (EIO_SYMLINK, path, new_path, pri, cb, data, channel);",
          "2516: eio_req *eio_rename (const char *path, const char *new_path, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2518:   return eio__2path (EIO_RENAME, path, new_path, pri, cb, data, channel);",
          "2521: eio_req *eio_custom (void (*execute)(eio_req *), int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2528: eio_req *eio_grp (eio_cb cb, void *data, eio_channel *channel)",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/fs.c||deps/uv/src/unix/fs.c": [
          "File: deps/uv/src/unix/fs.c -> deps/uv/src/unix/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:   uv_fs_req_init(loop, req, type, path, cb); \\",
          "45:   if (cb) { \\",
          "48:     if (!req->eio) { \\",
          "49:       uv__set_sys_error(loop, ENOMEM); \\",
          "50:       return -1; \\",
          "",
          "[Removed Lines]",
          "47:     req->eio = eiofunc(args, EIO_PRI_DEFAULT, uv__fs_after, req); \\",
          "",
          "[Added Lines]",
          "47:     req->eio = eiofunc(args, EIO_PRI_DEFAULT, uv__fs_after, req, &loop->uv_eio_channel); \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "191:   if (cb) {",
          "193:     uv_ref(loop);",
          "195:     if (!req->eio) {",
          "196:       uv__set_sys_error(loop, ENOMEM);",
          "197:       return -1;",
          "",
          "[Removed Lines]",
          "194:     req->eio = eio_open(path, flags, mode, EIO_PRI_DEFAULT, uv__fs_after, req);",
          "",
          "[Added Lines]",
          "194:     req->eio = eio_open(path, flags, mode, EIO_PRI_DEFAULT, uv__fs_after, req, &loop->uv_eio_channel);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "223:     uv_ref(loop);",
          "224:     req->eio = eio_read(fd, buf, length, offset, EIO_PRI_DEFAULT,",
          "227:     if (!req->eio) {",
          "228:       uv__set_sys_error(loop, ENOMEM);",
          "",
          "[Removed Lines]",
          "225:         uv__fs_after, req);",
          "",
          "[Added Lines]",
          "225:         uv__fs_after, req,  &loop->uv_eio_channel);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "261:     uv_ref(loop);",
          "262:     req->eio = eio_write(file, buf, length, offset, EIO_PRI_DEFAULT,",
          "264:     if (!req->eio) {",
          "265:       uv__set_sys_error(loop, ENOMEM);",
          "266:       return -1;",
          "",
          "[Removed Lines]",
          "263:         uv__fs_after, req);",
          "",
          "[Added Lines]",
          "263:         uv__fs_after, req,  &loop->uv_eio_channel);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "307:   if (cb) {",
          "309:     uv_ref(loop);",
          "311:     if (!req->eio) {",
          "312:       uv__set_sys_error(loop, ENOMEM);",
          "313:       return -1;",
          "",
          "[Removed Lines]",
          "310:     req->eio = eio_readdir(path, flags, EIO_PRI_DEFAULT, uv__fs_after, req);",
          "",
          "[Added Lines]",
          "310:     req->eio = eio_readdir(path, flags, EIO_PRI_DEFAULT, uv__fs_after, req,  &loop->uv_eio_channel);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "377:   if (cb) {",
          "379:     uv_ref(loop);",
          "382:     free(pathdup);",
          "",
          "[Removed Lines]",
          "380:     req->eio = eio_stat(pathdup, EIO_PRI_DEFAULT, uv__fs_after, req);",
          "",
          "[Added Lines]",
          "380:     req->eio = eio_stat(pathdup, EIO_PRI_DEFAULT, uv__fs_after, req,  &loop->uv_eio_channel);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "411:   if (cb) {",
          "413:     uv_ref(loop);",
          "416:     if (!req->eio) {",
          "417:       uv__set_sys_error(loop, ENOMEM);",
          "",
          "[Removed Lines]",
          "414:     req->eio = eio_fstat(file, EIO_PRI_DEFAULT, uv__fs_after, req);",
          "",
          "[Added Lines]",
          "414:     req->eio = eio_fstat(file, EIO_PRI_DEFAULT, uv__fs_after, req,  &loop->uv_eio_channel);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "550:   if (cb) {",
          "552:     uv_ref(loop);",
          "555:     free(pathdup);",
          "",
          "[Removed Lines]",
          "553:     req->eio = eio_lstat(pathdup, EIO_PRI_DEFAULT, uv__fs_after, req);",
          "",
          "[Added Lines]",
          "553:     req->eio = eio_lstat(pathdup, EIO_PRI_DEFAULT, uv__fs_after, req,  &loop->uv_eio_channel);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "598:   uv_fs_req_init(loop, req, UV_FS_READLINK, path, cb);",
          "600:   if (cb) {",
          "602:       uv_ref(loop);",
          "603:       return 0;",
          "604:     } else {",
          "",
          "[Removed Lines]",
          "601:     if ((req->eio = eio_readlink(path, EIO_PRI_DEFAULT, uv__fs_after, req))) {",
          "",
          "[Added Lines]",
          "601:     if ((req->eio = eio_readlink(path, EIO_PRI_DEFAULT, uv__fs_after, req,  &loop->uv_eio_channel))) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "692:   req->work_cb = work_cb;",
          "693:   req->after_work_cb = after_work_cb;",
          "697:   if (!req->eio) {",
          "698:     uv__set_sys_error(loop, ENOMEM);",
          "",
          "[Removed Lines]",
          "695:   req->eio = eio_custom(uv__work, EIO_PRI_DEFAULT, uv__after_work, req);",
          "",
          "[Added Lines]",
          "695:   req->eio = eio_custom(uv__work, EIO_PRI_DEFAULT, uv__after_work, req,  &loop->uv_eio_channel);",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/uv-eio.c||deps/uv/src/unix/uv-eio.c": [
          "File: deps/uv/src/unix/uv-eio.c -> deps/uv/src/unix/uv-eio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include <stdio.h>",
          "34: static void uv_eio_do_poll(uv_idle_t* watcher, int status) {",
          "35:   assert(watcher == &(watcher->loop->uv_eio_poller));",
          "41:     uv_idle_stop(watcher);",
          "42:     uv_unref(watcher->loop);",
          "",
          "[Removed Lines]",
          "31: static uv_loop_t* main_loop;",
          "39:   if (eio_poll() != -1 && uv_is_active((uv_handle_t*) watcher)) {",
          "",
          "[Added Lines]",
          "35:   if (eio_poll(&watcher->loop->uv_eio_channel) != -1 && uv_is_active((uv_handle_t*) watcher)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:     uv_idle_start(&loop->uv_eio_poller, uv_eio_do_poll);",
          "58:     uv_ref(loop);",
          "",
          "[Removed Lines]",
          "55:   if (eio_poll() == -1 && !uv_is_active((uv_handle_t*) &loop->uv_eio_poller)) {",
          "",
          "[Added Lines]",
          "51:   if (eio_poll(&watcher->loop->uv_eio_channel) == -1 && !uv_is_active((uv_handle_t*) &loop->uv_eio_poller)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72:     uv_idle_stop(&loop->uv_eio_poller);",
          "73:     uv_unref(loop);",
          "",
          "[Removed Lines]",
          "70:   if (eio_poll() != -1 && uv_is_active((uv_handle_t*) &loop->uv_eio_poller)) {",
          "",
          "[Added Lines]",
          "66:   if (eio_poll(&watcher->loop->uv_eio_channel) != -1 && uv_is_active((uv_handle_t*) &loop->uv_eio_poller)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "82: static void uv_eio_want_poll(void) {",
          "",
          "[Added Lines]",
          "78: static void uv_eio_want_poll(eio_channel *channel) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "91: }",
          "100: }",
          "",
          "[Removed Lines]",
          "90:   uv_async_send(&main_loop->uv_eio_want_poll_notifier);",
          "94: static void uv_eio_done_poll(void) {",
          "99:   uv_async_send(&main_loop->uv_eio_done_poll_notifier);",
          "",
          "[Added Lines]",
          "86:   uv_async_send(&((uv_loop_t *)channel->data)->uv_eio_want_poll_notifier);",
          "90: static void uv_eio_done_poll(eio_channel *channel) {",
          "95:   uv_async_send(&((uv_loop_t *)channel->data)->uv_eio_done_poll_notifier);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "104:   if (loop->counters.eio_init == 0) {",
          "105:     loop->counters.eio_init++;",
          "109:     uv_idle_init(loop, &loop->uv_eio_poller);",
          "110:     uv_idle_start(&loop->uv_eio_poller, uv_eio_do_poll);",
          "",
          "[Removed Lines]",
          "107:     main_loop = loop;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "126:     eio_set_max_poll_reqs(10);",
          "133:   }",
          "134: }",
          "",
          "[Removed Lines]",
          "127:   } else {",
          "132:     assert(main_loop == loop);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/test/test-list.h||deps/uv/test/test-list.h": [
          "File: deps/uv/test/test-list.h -> deps/uv/test/test-list.h"
        ]
      }
    },
    {
      "candidate_hash": "81cd3a3cd6204adbf645bd0538f794c1414511ed",
      "candidate_info": {
        "commit_hash": "81cd3a3cd6204adbf645bd0538f794c1414511ed",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/81cd3a3cd6204adbf645bd0538f794c1414511ed",
        "files": [
          "lib/readline.js"
        ],
        "message": "lint readline.js - single-quotes preferred",
        "before_after_code_files": [
          "lib/readline.js||lireadline.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/readline.js||lireadline.js": [
          "File: lib/readline.js -> lireadline.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:   completer = completer || function() { return []; };",
          "50:   if (typeof completer !== 'function') {",
          "52:   }",
          "54:   var self = this;",
          "",
          "[Removed Lines]",
          "51:     throw new TypeError(\"Argument 'completer' must be a function\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "209:   if (lineCols === 0) {",
          "211:   }",
          "",
          "[Removed Lines]",
          "210:     this.output.write(\" \");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}