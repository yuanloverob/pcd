{
  "cve_id": "CVE-2014-8133",
  "cve_desc": "arch/x86/kernel/tls.c in the Thread Local Storage (TLS) implementation in the Linux kernel through 3.18.1 allows local users to bypass the espfix protection mechanism, and consequently makes it easier for local users to bypass the ASLR protection mechanism, via a crafted application that makes a set_thread_area system call and later reads a 16-bit value.",
  "repo": "torvalds/linux",
  "patch_hash": "41bdc78544b8a93a9c6814b8bbbfef966272abbe",
  "patch_info": {
    "commit_hash": "41bdc78544b8a93a9c6814b8bbbfef966272abbe",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/41bdc78544b8a93a9c6814b8bbbfef966272abbe",
    "files": [
      "arch/x86/kernel/tls.c"
    ],
    "message": "x86/tls: Validate TLS entries to protect espfix\n\nInstalling a 16-bit RW data segment into the GDT defeats espfix.\nAFAICT this will not affect glibc, Wine, or dosemu at all.\n\nSigned-off-by: Andy Lutomirski <luto@amacapital.net>\nAcked-by: H. Peter Anvin <hpa@zytor.com>\nCc: stable@vger.kernel.org\nCc: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: security@kernel.org <security@kernel.org>\nCc: Willy Tarreau <w@1wt.eu>\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
    "before_after_code_files": [
      "arch/x86/kernel/tls.c||arch/x86/kernel/tls.c"
    ]
  },
  "patch_diff": {
    "arch/x86/kernel/tls.c||arch/x86/kernel/tls.c": [
      "File: arch/x86/kernel/tls.c -> arch/x86/kernel/tls.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27:  return -ESRCH;",
      "28: }",
      "30: static void set_tls_desc(struct task_struct *p, int idx,",
      "31:     const struct user_desc *info, int n)",
      "32: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "30: static bool tls_desc_okay(const struct user_desc *info)",
      "31: {",
      "32:  if (LDT_empty(info))",
      "33:   return true;",
      "39:  if (!info->seg_32bit)",
      "40:   return false;",
      "42:  return true;",
      "43: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "66:  if (copy_from_user(&info, u_info, sizeof(info)))",
      "67:   return -EFAULT;",
      "69:  if (idx == -1)",
      "70:   idx = info.entry_number;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "84:  if (!tls_desc_okay(&info))",
      "85:   return -EINVAL;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "192: {",
      "193:  struct user_desc infobuf[GDT_ENTRY_TLS_ENTRIES];",
      "194:  const struct user_desc *info;",
      "196:  if (pos >= GDT_ENTRY_TLS_ENTRIES * sizeof(struct user_desc) ||",
      "197:      (pos % sizeof(struct user_desc)) != 0 ||",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "213:  int i;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "205:  else",
      "206:   info = infobuf;",
      "208:  set_tls_desc(target,",
      "209:        GDT_ENTRY_TLS_MIN + (pos / sizeof(struct user_desc)),",
      "210:        info, count / sizeof(struct user_desc));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "227:  for (i = 0; i < count / sizeof(struct user_desc); i++)",
      "228:   if (!tls_desc_okay(info + i))",
      "229:    return -EINVAL;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3669ef9fa7d35f573ec9c0e0341b29251c2734a7",
      "candidate_info": {
        "commit_hash": "3669ef9fa7d35f573ec9c0e0341b29251c2734a7",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/3669ef9fa7d35f573ec9c0e0341b29251c2734a7",
        "files": [
          "arch/x86/include/asm/desc.h",
          "arch/x86/kernel/tls.c"
        ],
        "message": "x86, tls: Interpret an all-zero struct user_desc as \"no segment\"\n\nThe Witcher 2 did something like this to allocate a TLS segment index:\n\n        struct user_desc u_info;\n        bzero(&u_info, sizeof(u_info));\n        u_info.entry_number = (uint32_t)-1;\n\n        syscall(SYS_set_thread_area, &u_info);\n\nStrictly speaking, this code was never correct.  It should have set\nread_exec_only and seg_not_present to 1 to indicate that it wanted\nto find a free slot without putting anything there, or it should\nhave put something sensible in the TLS slot if it wanted to allocate\na TLS entry for real.  The actual effect of this code was to\nallocate a bogus segment that could be used to exploit espfix.\n\nThe set_thread_area hardening patches changed the behavior, causing\nset_thread_area to return -EINVAL and crashing the game.\n\nThis changes set_thread_area to interpret this as a request to find\na free slot and to leave it empty, which isn't *quite* what the game\nexpects but should be close enough to keep it working.  In\nparticular, using the code above to allocate two segments will\nallocate the same segment both times.\n\nAccording to FrostbittenKing on Github, this fixes The Witcher 2.\n\nIf this somehow still causes problems, we could instead allocate\na limit==0 32-bit data segment, but that seems rather ugly to me.\n\nFixes: 41bdc78544b8 x86/tls: Validate TLS entries to protect espfix\nSigned-off-by: Andy Lutomirski <luto@amacapital.net>\nCc: stable@vger.kernel.org\nCc: torvalds@linux-foundation.org\nLink: http://lkml.kernel.org/r/0cb251abe1ff0958b8e468a9a9a905b80ae3a746.1421954363.git.luto@amacapital.net\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>",
        "before_after_code_files": [
          "arch/x86/include/asm/desc.h||arch/x86/include/asm/desc.h",
          "arch/x86/kernel/tls.c||arch/x86/kernel/tls.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/x86/kernel/tls.c||arch/x86/kernel/tls.c"
          ],
          "candidate": [
            "arch/x86/kernel/tls.c||arch/x86/kernel/tls.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/x86/include/asm/desc.h||arch/x86/include/asm/desc.h": [
          "File: arch/x86/include/asm/desc.h -> arch/x86/include/asm/desc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "262:   (info)->seg_not_present == 1 && \\",
          "263:   (info)->useable  == 0)",
          "265: static inline void clear_LDT(void)",
          "266: {",
          "267:  set_ldt(NULL, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "266: static inline bool LDT_zero(const struct user_desc *info)",
          "267: {",
          "268:  return (info->base_addr  == 0 &&",
          "269:   info->limit  == 0 &&",
          "270:   info->contents  == 0 &&",
          "271:   info->read_exec_only == 0 &&",
          "272:   info->seg_32bit  == 0 &&",
          "273:   info->limit_in_pages == 0 &&",
          "274:   info->seg_not_present == 0 &&",
          "275:   info->useable  == 0);",
          "276: }",
          "",
          "---------------"
        ],
        "arch/x86/kernel/tls.c||arch/x86/kernel/tls.c": [
          "File: arch/x86/kernel/tls.c -> arch/x86/kernel/tls.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: static bool tls_desc_okay(const struct user_desc *info)",
          "31: {",
          "33:   return true;",
          "",
          "[Removed Lines]",
          "32:  if (LDT_empty(info))",
          "",
          "[Added Lines]",
          "53:  if (LDT_empty(info) || LDT_zero(info))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:  cpu = get_cpu();",
          "73:  while (n-- > 0) {",
          "75:    desc->a = desc->b = 0;",
          "76:   else",
          "77:    fill_ldt(desc, info);",
          "",
          "[Removed Lines]",
          "74:   if (LDT_empty(info))",
          "",
          "[Added Lines]",
          "95:   if (LDT_empty(info) || LDT_zero(info))",
          "",
          "---------------"
        ]
      }
    }
  ]
}