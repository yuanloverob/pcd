{
  "cve_id": "CVE-2018-14043",
  "cve_desc": "mstdlib (aka the M Standard Library for C) 1.2.0 has incorrect file access control in situations where M_fs_perms_can_access attempts to delete an existing file (that lacks public read/write access) during a copy operation, related to fs/m_fs.c and fs/m_fs_path.c. An attacker could create the file and then would have access to the data.",
  "repo": "Monetra/mstdlib",
  "patch_hash": "db124b8f607dd0a40a9aef2d4d468fad433522a7",
  "patch_info": {
    "commit_hash": "db124b8f607dd0a40a9aef2d4d468fad433522a7",
    "repo": "Monetra/mstdlib",
    "commit_url": "https://github.com/Monetra/mstdlib/commit/db124b8f607dd0a40a9aef2d4d468fad433522a7",
    "files": [
      "base/fs/m_fs.c",
      "base/fs/m_fs_path.c"
    ],
    "message": "fs: Don't try to delete the file when copying. It could cause a security issue if the file exists and doesn't allow other's to read/write. delete could allow someone to create the file and have access to the data.",
    "before_after_code_files": [
      "base/fs/m_fs.c||base/fs/m_fs.c",
      "base/fs/m_fs_path.c||base/fs/m_fs_path.c"
    ]
  },
  "patch_diff": {
    "base/fs/m_fs.c||base/fs/m_fs.c": [
      "File: base/fs/m_fs.c -> base/fs/m_fs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "130:  if (type != M_FS_TYPE_DIR) {",
      "134:    ret = M_FALSE;",
      "135:    goto done;",
      "136:   }",
      "",
      "[Removed Lines]",
      "132:   if (M_fs_perms_can_access(p2, M_FS_PERMS_MODE_NONE) == M_FS_ERROR_SUCCESS)",
      "133:   {",
      "",
      "[Added Lines]",
      "141:   if (M_fs_perms_can_access(p2, M_FS_PERMS_MODE_NONE) == M_FS_ERROR_SUCCESS) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "209:  size_t         offset;",
      "210:  M_fs_error_t   res;",
      "226:  res = M_fs_file_open(&fd_old, path_old, M_FS_BUF_SIZE, M_FS_FILE_MODE_READ|M_FS_FILE_MODE_NOCREATE, NULL);",
      "227:  if (res != M_FS_ERROR_SUCCESS) {",
      "",
      "[Removed Lines]",
      "214:  if (M_fs_perms_can_access(path_new, M_FS_PERMS_MODE_NONE) == M_FS_ERROR_SUCCESS) {",
      "220:   res = M_fs_delete(path_new, M_FALSE, NULL, M_FS_PROGRESS_NOEXTRA);",
      "221:   if (res != M_FS_ERROR_SUCCESS) {",
      "222:    return res;",
      "223:   }",
      "224:  }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "base/fs/m_fs_path.c||base/fs/m_fs_path.c": [
      "File: base/fs/m_fs_path.c -> base/fs/m_fs_path.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ed91c3bee150131114475ff76c05a600869065d2",
      "candidate_info": {
        "commit_hash": "ed91c3bee150131114475ff76c05a600869065d2",
        "repo": "Monetra/mstdlib",
        "commit_url": "https://github.com/Monetra/mstdlib/commit/ed91c3bee150131114475ff76c05a600869065d2",
        "files": [
          "base/fs/m_fs.c",
          "base/fs/m_fs_path.c"
        ],
        "message": "fs: Don't try to delete the file when copying. It could cause a security issue if the file exists and doesn't allow other's to read/write. delete could allow someone to create the file and have access to the data.",
        "before_after_code_files": [
          "base/fs/m_fs.c||base/fs/m_fs.c",
          "base/fs/m_fs_path.c||base/fs/m_fs_path.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "base/fs/m_fs.c||base/fs/m_fs.c",
            "base/fs/m_fs_path.c||base/fs/m_fs_path.c"
          ],
          "candidate": [
            "base/fs/m_fs.c||base/fs/m_fs.c",
            "base/fs/m_fs_path.c||base/fs/m_fs_path.c"
          ]
        }
      },
      "candidate_diff": {
        "base/fs/m_fs.c||base/fs/m_fs.c": [
          "File: base/fs/m_fs.c -> base/fs/m_fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:  if (type != M_FS_TYPE_DIR) {",
          "134:    ret = M_FALSE;",
          "135:    goto done;",
          "136:   }",
          "",
          "[Removed Lines]",
          "132:   if (M_fs_perms_can_access(p2, M_FS_PERMS_MODE_NONE) == M_FS_ERROR_SUCCESS)",
          "133:   {",
          "",
          "[Added Lines]",
          "141:   if (M_fs_perms_can_access(p2, M_FS_PERMS_MODE_NONE) == M_FS_ERROR_SUCCESS) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "209:  size_t         offset;",
          "210:  M_fs_error_t   res;",
          "226:  res = M_fs_file_open(&fd_old, path_old, M_FS_BUF_SIZE, M_FS_FILE_MODE_READ|M_FS_FILE_MODE_NOCREATE, NULL);",
          "227:  if (res != M_FS_ERROR_SUCCESS) {",
          "",
          "[Removed Lines]",
          "214:  if (M_fs_perms_can_access(path_new, M_FS_PERMS_MODE_NONE) == M_FS_ERROR_SUCCESS) {",
          "220:   res = M_fs_delete(path_new, M_FALSE, NULL, M_FS_PROGRESS_NOEXTRA);",
          "221:   if (res != M_FS_ERROR_SUCCESS) {",
          "222:    return res;",
          "223:   }",
          "224:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "base/fs/m_fs_path.c||base/fs/m_fs_path.c": [
          "File: base/fs/m_fs_path.c -> base/fs/m_fs_path.c"
        ]
      }
    }
  ]
}