{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "451297752c90784f42e5d16b6ccd816fce4a3139",
      "candidate_info": {
        "commit_hash": "451297752c90784f42e5d16b6ccd816fce4a3139",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/451297752c90784f42e5d16b6ccd816fce4a3139",
        "files": [
          "ext/fts3/fts3_snippet.c",
          "manifest",
          "manifest.uuid",
          "test/fts3snippet.test"
        ],
        "message": "Fix problems causing undefined left-shift operations in the fts3 snippet() function.\n\nFossilOrigin-Name: b90dbaed3092236e97f9796fa63989a3648060e16189e1267c430f4a7e799fac",
        "before_after_code_files": [
          "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3snippet.test||test/fts3snippet.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c": [
          "File: ext/fts3/fts3_snippet.c -> ext/fts3/fts3_snippet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "433:         int j;",
          "434:         u64 mPhrase = (u64)1 << i;",
          "435:         u64 mPos = (u64)1 << (iCsr - iStart);",
          "437:         if( (mCover|mCovered)&mPhrase ){",
          "438:           iScore++;",
          "439:         }else{",
          "",
          "[Removed Lines]",
          "436:         assert( iCsr>=iStart );",
          "",
          "[Added Lines]",
          "436:         assert( iCsr>=iStart && (iCsr - iStart)<=64 );",
          "437:         assert( i>=0 && i<=64 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "661:     for(nLeft=0; !(hlmask & ((u64)1 << nLeft)); nLeft++);",
          "662:     for(nRight=0; !(hlmask & ((u64)1 << (nSnippet-1-nRight))); nRight++);",
          "663:     nDesired = (nLeft-nRight)/2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "664:     assert( (nSnippet-1-nRight)<=63 && (nSnippet-1-nRight)>=0 );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1433:     return;",
          "1434:   }",
          "1436:   for(nSnippet=1; 1; nSnippet++){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1439:   if( nToken<-64 ) nToken = -64;",
          "1440:   if( nToken>+64 ) nToken = +64;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b352f1590d20a574b0681e011ececcf4f41fa5b157503d330e03939404aca0e9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3snippet.test||test/fts3snippet.test": [
          "File: test/fts3snippet.test -> test/fts3snippet.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "555:   }]",
          "556: } {64}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "558: do_test 4.3 {",
          "559:   llength [db one {",
          "560:     SELECT snippet(t4, '', '', '', 0, 150) FROM t4 WHERE t4 MATCH 'E'",
          "561:   }]",
          "562: } {64}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3e364802321c67602b2522ac4cde1fdeb2ac5d18",
      "candidate_info": {
        "commit_hash": "3e364802321c67602b2522ac4cde1fdeb2ac5d18",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3e364802321c67602b2522ac4cde1fdeb2ac5d18",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "test/where.test"
        ],
        "message": "Fix the OP_SeekGE, OP_SeekGT, OP_SeekLE, and OP_SeekLT opcodes so that they preserve the datatype of the value in the register used as the key. Ticket [d9f584e936c7a8d0]\n\nFossilOrigin-Name: 81b9f0f55042777b37de78069f7089041a9ee21dd0a0c86b879053fb46e140b4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "test/where.test||test/where.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d02490a2f0cae047087130b4ad8f55f265845c2ffb3bde3b7d507edb54acea6d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4127:   pC->deferredMoveto = 0;",
          "4128:   pC->cacheStatus = CACHE_STALE;",
          "4129:   if( pC->isTable ){",
          "4131:     assert( sqlite3BtreeCursorHasHint(pC->uc.pCursor, BTREE_SEEK_EQ)==0",
          "4132:               || CORRUPT_DB );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4130:     u16 flags3, newType;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4137:     pIn3 = &aMem[pOp->p3];",
          "4139:       applyNumericAffinity(pIn3, 0);",
          "4140:     }",
          "4148:           VdbeBranchTaken(1,2);",
          "4149:           goto jump_to_p2;",
          "4150:         }else{",
          "",
          "[Removed Lines]",
          "4138:     if( (pIn3->flags & (MEM_Int|MEM_Real|MEM_IntReal|MEM_Str))==MEM_Str ){",
          "4141:     iKey = sqlite3VdbeIntValue(pIn3);",
          "4145:     if( (pIn3->flags & (MEM_Int|MEM_IntReal))==0 ){",
          "4146:       if( (pIn3->flags & MEM_Real)==0 ){",
          "4147:         if( (pIn3->flags & MEM_Null) || oc>=OP_SeekGE ){",
          "",
          "[Added Lines]",
          "4139:     flags3 = pIn3->flags;",
          "4140:     if( (flags3 & (MEM_Int|MEM_Real|MEM_IntReal|MEM_Str))==MEM_Str ){",
          "4149:     if( (newType & (MEM_Int|MEM_IntReal))==0 ){",
          "4150:       if( (newType & MEM_Real)==0 ){",
          "4151:         if( (newType & MEM_Null) || oc>=OP_SeekGE ){",
          "",
          "---------------"
        ],
        "test/where.test||test/where.test": [
          "File: test/where.test -> test/where.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1538:     ON CONFLICT(c) DO UPDATE SET b=NULL",
          "1539: } {1 {corrupt database}}",
          "1541: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1541: # 2019-08-21 Ticket https://www.sqlite.org/src/info/d9f584e936c7a8d0",
          "1542: #",
          "1543: db close",
          "1544: sqlite3 db :memory:",
          "1545: do_execsql_test where-26.1 {",
          "1546:   CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1 TEXT);",
          "1547:   INSERT INTO t0(c0, c1) VALUES (1, 'a');",
          "1548:   CREATE TABLE t1(c0 INT PRIMARY KEY, c1 TEXT);",
          "1549:   INSERT INTO t1(c0, c1) VALUES (1, 'a');",
          "1550:   SELECT * FROM t0 WHERE '-1' BETWEEN 0 AND t0.c0;",
          "1551: } {1 a}",
          "1552: do_execsql_test where-26.2 {",
          "1553:   SELECT * FROM t1 WHERE '-1' BETWEEN 0 AND t1.c0;",
          "1554: } {1 a}",
          "1555: do_execsql_test where-26.3 {",
          "1556:   SELECT * FROM t0 WHERE '-1'>=0 AND '-1'<=t0.c0;",
          "1557: } {1 a}",
          "1558: do_execsql_test where-26.4 {",
          "1559:   SELECT * FROM t1 WHERE '-1'>=0 AND '-1'<=t1.c0;",
          "1560: } {1 a}",
          "1561: do_execsql_test where-26.5 {",
          "1562:   SELECT '-1' BETWEEN 0 AND t0.c0 FROM t0;",
          "1563: } {1}",
          "1564: do_execsql_test where-26.6 {",
          "1565:   SELECT '-1' BETWEEN 0 AND t1.c0 FROM t1;",
          "1566: } {1}",
          "1567: do_execsql_test where-26.7 {",
          "1568:   SELECT '-1'>=0 AND '-1'<=t0.c0 FROM t0;",
          "1569: } {1}",
          "1570: do_execsql_test where-26.8 {",
          "1571:   SELECT '-1'>=0 AND '-1'<=t1.c0 FROM t1;",
          "1572: } {1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3c161e07afd4805202319f02de3ab903f4413c65",
      "candidate_info": {
        "commit_hash": "3c161e07afd4805202319f02de3ab903f4413c65",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3c161e07afd4805202319f02de3ab903f4413c65",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/os_win.c",
          "test/symlink2.test"
        ],
        "message": "Add support for the SQLITE_ACCESS_SYMLINK flag in the Win32 VFS.\n\nFossilOrigin-Name: 175c15008e9f19b8f6762c2fe4a545735128765081980eed01d5e46ca4acb500",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/os_win.c||src/os_win.c",
          "test/symlink2.test||test/symlink2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 251230cf43c591cf49cf9d2f392581c57d334b791bc3407814d216b5999c32f4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1390:       case SQLITE_CANTOPEN_ISDIR:     zName = \"SQLITE_CANTOPEN_ISDIR\";    break;",
          "1391:       case SQLITE_CANTOPEN_FULLPATH:  zName = \"SQLITE_CANTOPEN_FULLPATH\"; break;",
          "1392:       case SQLITE_CANTOPEN_CONVPATH:  zName = \"SQLITE_CANTOPEN_CONVPATH\"; break;",
          "1393:       case SQLITE_PROTOCOL:           zName = \"SQLITE_PROTOCOL\";          break;",
          "1394:       case SQLITE_EMPTY:              zName = \"SQLITE_EMPTY\";             break;",
          "1395:       case SQLITE_SCHEMA:             zName = \"SQLITE_SCHEMA\";            break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1393:       case SQLITE_CANTOPEN_SYMLINK:   zName = \"SQLITE_CANTOPEN_SYMLINK\";  break;",
          "",
          "---------------"
        ],
        "src/os_win.c||src/os_win.c": [
          "File: src/os_win.c -> src/os_win.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "80: #  define NTDDI_WINTHRESHOLD                0x06040000",
          "81: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87: #ifndef FILE_ATTRIBUTE_REPARSE_POINT",
          "88: #  define FILE_ATTRIBUTE_REPARSE_POINT      0x00000400",
          "89: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5473:              (attr & FILE_ATTRIBUTE_READONLY)==0;",
          "5474:       break;",
          "5475:     case SQLITE_ACCESS_SYMLINK:",
          "5477:       break;",
          "5478:     default:",
          "5479:       assert(!\"Invalid flags argument\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5484:       rc = attr!=INVALID_FILE_ATTRIBUTES &&",
          "5485:              (attr & FILE_ATTRIBUTE_REPARSE_POINT)!=0;",
          "",
          "---------------"
        ],
        "test/symlink2.test||test/symlink2.test": [
          "File: test/symlink2.test -> test/symlink2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 November 18",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this file is testing that SQLite can follow symbolic links.",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "17: set testprefix symlink2",
          "19: # This only runs on Windows.",
          "20: if {$::tcl_platform(platform)!=\"windows\"} {",
          "21:   finish_test",
          "22:   return",
          "23: }",
          "25: proc createWin32Symlink { link target } {",
          "26:   exec -- $::env(ComSpec) /c mklink \\",
          "27:       [file nativename $link] [file nativename $target]",
          "28:   return \"\"",
          "29: }",
          "31: proc deleteWin32Symlink { link } {",
          "32:   exec -- $::env(ComSpec) /c del [file nativename $link]",
          "33:   return \"\"",
          "34: }",
          "36: proc canCreateWin32Symlink {} {",
          "37:   set link [file join $::testdir lnk[pid].sym]",
          "38:   if {[file exists $link]} { return 0 }",
          "39:   set target [info nameofexecutable]",
          "40:   if {[catch {createWin32Symlink $link $target}] == 0} {",
          "41:     deleteWin32Symlink $link",
          "42:     return 1",
          "43:   }",
          "44:   return 0",
          "45: }",
          "47: # Creating symlinks may require administrator privileges on Windows.",
          "48: if {![canCreateWin32Symlink]} {",
          "49:   finish_test",
          "50:   return",
          "51: }",
          "53: # Ensure that test.db has been created.",
          "54: #",
          "55: do_execsql_test 1.0 {",
          "56:   CREATE TABLE t1(x, y);",
          "57:   INSERT INTO t1 VALUES(1,9999);",
          "58: }",
          "60: do_test 2.0 {",
          "61:   createWin32Symlink link.db test.db",
          "62: } {}",
          "64: do_test 2.1 {",
          "65:   file exists test.db",
          "66: } {1}",
          "68: do_test 2.2 {",
          "69:   file exists link.db",
          "70: } {1}",
          "72: do_test 3.1 {",
          "73:   execsql { SELECT x, y FROM t1; } db",
          "74: } {1 9999}",
          "76: do_test 3.2 {",
          "77:   sqlite3 db2 link.db",
          "78:   execsql { SELECT x, y FROM t1; } db2",
          "79: } {1 9999}",
          "81: do_test 3.3 {",
          "82:   sqlite3 db3 test.db -nofollow true",
          "83:   execsql { SELECT x, y FROM t1; } db3",
          "84: } {1 9999}",
          "86: do_test 3.4 {",
          "87:   db3 close",
          "88: } {}",
          "90: do_test 3.5 {",
          "91:   list [catch {",
          "92:     sqlite3 db4 link.db -nofollow true",
          "93:     execsql { SELECT x, y FROM t1; } db4",
          "94:   } res] $res",
          "95: } {1 {unable to open database file}}",
          "97: catch {db4 close}",
          "99: do_test 4.0 {",
          "100:   db2 close",
          "101:   deleteWin32Symlink link.db",
          "102: } {}",
          "104: do_test 4.1 {",
          "105:   file exists test.db",
          "106: } {1}",
          "108: do_test 4.2 {",
          "109:   file exists link.db",
          "110: } {0}",
          "112: do_test 5.1 {",
          "113:   execsql { SELECT x, y FROM t1; } db",
          "114: } {1 9999}",
          "116: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1a9082f6d773fad00926f64650601104827bd319",
      "candidate_info": {
        "commit_hash": "1a9082f6d773fad00926f64650601104827bd319",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1a9082f6d773fad00926f64650601104827bd319",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "test/gencol1.test"
        ],
        "message": "Omit the optimization that reduces the column-count on rowid-table cursors when the table has generated columns, because we do not know what columns the generator expressions might try to access.\n\nFossilOrigin-Name: e6c96ed91e7a96d2bd30ea9df132644ac02d5a321a62f81f8f3984a8e49ed94b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7c52f5478f9ecf5c078208759143ae9de43c1bf191dfcd74acb8bd169d4dc883",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5014:       assert( pTabItem->iCursor==pLevel->iTabCur );",
          "5015:       testcase( pWInfo->eOnePass==ONEPASS_OFF && pTab->nCol==BMS-1 );",
          "5016:       testcase( pWInfo->eOnePass==ONEPASS_OFF && pTab->nCol==BMS );",
          "5018:         Bitmask b = pTabItem->colUsed;",
          "5019:         int n = 0;",
          "5020:         for(; b; b=b>>1, n++){}",
          "",
          "[Removed Lines]",
          "5017:       if( pWInfo->eOnePass==ONEPASS_OFF && pTab->nCol<BMS && HasRowid(pTab) ){",
          "",
          "[Added Lines]",
          "5017:       if( pWInfo->eOnePass==ONEPASS_OFF",
          "5018:        && pTab->nCol<BMS",
          "5019:        && (pTab->tabFlags & (TF_HasGenerated|TF_WithoutRowid))==0",
          "5020:       ){",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:   REPLACE INTO t0(c0,c2,c3) VALUES(0,0,0),(0,0,0);",
          "177: } {1 {FOREIGN KEY constraint failed}}",
          "179: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179: # 2019-11-01 Problem found while adding new foreign key test cases in TH3.",
          "180: db close",
          "181: sqlite3 db :memory:",
          "182: do_execsql_test gencol1-5.100 {",
          "183:   PRAGMA foreign_keys=ON;",
          "184:   CREATE TABLE t1(",
          "185:     gcb AS (b*1),",
          "186:     a INTEGER PRIMARY KEY,",
          "187:     gcc AS (c+0),",
          "188:     b UNIQUE,",
          "189:     gca AS (1*a+0),",
          "190:     c UNIQUE",
          "191:   ) WITHOUT ROWID;",
          "192:   INSERT INTO t1 VALUES(1,2,3);",
          "193:   INSERT INTO t1 VALUES(4,5,6);",
          "194:   INSERT INTO t1 VALUES(7,8,9);",
          "195:   CREATE TABLE t1a(",
          "196:     gcx AS (x+0) REFERENCES t1(a) ON DELETE CASCADE,",
          "197:     id,",
          "198:     x,",
          "199:     gcid AS (1*id)",
          "200:   );",
          "201:   INSERT INTO t1a VALUES(1, 1);",
          "202:   INSERT INTO t1a VALUES(2, 4);",
          "203:   INSERT INTO t1a VALUES(3, 7);",
          "204:   DELETE FROM t1 WHERE b=5;",
          "205:   SELECT id,x,'|' FROM t1a ORDER BY id;",
          "206: } {1 1 | 3 7 |}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "255a81f10a5885a17d99ea20e13e1641029e6e3b",
      "candidate_info": {
        "commit_hash": "255a81f10a5885a17d99ea20e13e1641029e6e3b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/255a81f10a5885a17d99ea20e13e1641029e6e3b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/printf.c",
          "test/printf.test"
        ],
        "message": "Modify sqlite3_str_finish() and sqlite3VMPrintf() so that they always return NULL on any OOM or SQLITE_LIMIT_LENGTH error.\n\nFossilOrigin-Name: e7144ffd21294d7aebbfa6aa5a262797a6d16de11193f1bf6b75f5f27b04c940",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/printf.c||src/printf.c",
          "test/printf.test||test/printf.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c13d563925db12bc2c91ff9432050261e5bd39d960e2739777a66bf804df2e31",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/printf.c||src/printf.c": [
          "File: src/printf.c -> src/printf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "136: static void setStrAccumError(StrAccum *p, u8 eError){",
          "137:   assert( eError==SQLITE_NOMEM || eError==SQLITE_TOOBIG );",
          "138:   p->accError = eError;",
          "140: }",
          "",
          "[Removed Lines]",
          "139:   p->nAlloc = 0;",
          "",
          "[Added Lines]",
          "139:   if( p->mxAlloc ) sqlite3_str_reset(p);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "167: static char *printfTempBuf(sqlite3_str *pAccum, sqlite3_int64 n){",
          "168:   char *z;",
          "169:   if( n>pAccum->nAlloc && n>pAccum->mxAlloc ){",
          "170:     setStrAccumError(pAccum, SQLITE_TOOBIG);",
          "171:     return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169:   if( pAccum->accError ) return 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "885:     return 0;",
          "886:   }",
          "887:   if( p->mxAlloc==0 ){",
          "889:     setStrAccumError(p, SQLITE_TOOBIG);",
          "891:   }else{",
          "892:     char *zOld = isMalloced(p) ? p->zText : 0;",
          "893:     i64 szNew = p->nChar;",
          "",
          "[Removed Lines]",
          "888:     N = p->nAlloc - p->nChar - 1;",
          "890:     return N;",
          "",
          "[Added Lines]",
          "890:     return p->nAlloc - p->nChar - 1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "959:   assert( z!=0 || N==0 );",
          "960:   assert( p->zText!=0 || p->nChar==0 || p->accError );",
          "961:   assert( N>=0 );",
          "963:   if( p->nChar+N >= p->nAlloc ){",
          "964:     enlargeAndAppend(p,z,N);",
          "965:   }else if( N ){",
          "",
          "[Removed Lines]",
          "962:   assert( p->accError==0 || p->nAlloc==0 );",
          "",
          "[Added Lines]",
          "962:   assert( p->accError==0 || p->nAlloc==0 || p->mxAlloc==0 );",
          "",
          "---------------"
        ],
        "test/printf.test||test/printf.test": [
          "File: test/printf.test -> test/printf.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "540: } {abc: 1 1 (1e-20) :xyz}",
          "541: do_test printf-2.1.2.10 {",
          "542:   sqlite3_mprintf_double {abc: %*.*f}  2000000000 1000000000 1.0e-20",
          "544: do_test printf-2.1.3.1 {",
          "545:   sqlite3_mprintf_double {abc: (%*.*f) :xyz} 1 1 1.0",
          "546: } {abc: (1.0) :xyz}",
          "",
          "[Removed Lines]",
          "543: } {abc: }",
          "",
          "[Added Lines]",
          "543: } {}",
          "",
          "---------------"
        ]
      }
    }
  ]
}