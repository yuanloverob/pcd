{
  "cve_id": "CVE-2022-29198",
  "cve_desc": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, the implementation of `tf.raw_ops.SparseTensorToCSRSparseMatrix` does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack. The code assumes `dense_shape` is a vector and `indices` is a matrix (as part of requirements for sparse tensors) but there is no validation for this. Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "ea50a40e84f6bff15a0912728e35b657548cef11",
  "patch_info": {
    "commit_hash": "ea50a40e84f6bff15a0912728e35b657548cef11",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/ea50a40e84f6bff15a0912728e35b657548cef11",
    "files": [
      "tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc",
      "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py"
    ],
    "message": "Fix failed check in SparseTensorToCSRSparseMatrix\n\nSecurity vulnerability fix. A `CHECK` fails if inputing either an empty `dense_shape`,\nor a non-rank-2 `indices`. Added appropriate checks and tests.\n\nPiperOrigin-RevId: 446053984",
    "before_after_code_files": [
      "tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc||tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc",
      "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py||tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc||tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc": [
      "File: tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc -> tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "67:     const Tensor& values = ctx->input(1);",
      "68:     const Tensor& dense_shape = ctx->input(2);",
      "69:     const int rank = dense_shape.NumElements();",
      "70:     OP_REQUIRES(ctx, rank == 2 || rank == 3,",
      "71:                 errors::InvalidArgument(\"SparseTensor must have rank 2 or 3; \",",
      "72:                                         \"but indices has rank: \", rank));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "70:     OP_REQUIRES(",
      "71:         ctx, TensorShapeUtils::IsVector(dense_shape.shape()),",
      "72:         errors::InvalidArgument(\"dense_shape must be rank 1 but got rank\",",
      "73:                                 dense_shape.shape().dims()));",
      "74:     OP_REQUIRES(ctx, TensorShapeUtils::IsMatrix(indices.shape()),",
      "75:                 errors::InvalidArgument(\"indices must be rank 2 but got rank\",",
      "76:                                         indices.shape().dims()));",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py||tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py": [
      "File: tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py -> tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "168:     self.assertAllClose(a_values, a_st_rt_value.values)",
      "169:     self.assertAllEqual(a_dense_shape, a_st_rt_value.dense_shape)",
      "171:   # TODO(b/139491352): Add handle_data propagation to array_ops.identity.",
      "172:   @test_util.run_deprecated_v1",
      "173:   def testCSRSparseMatrixResourceVariable(self):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "171:   def testSparseTensorConversionInvalidInputShapes(self):",
      "172:     values = constant_op.constant(",
      "173:         0.554979503, shape=[5], dtype=dtypes.float32)",
      "174:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
      "175:                                 \"must be rank 1\"):",
      "176:       indices = constant_op.constant(0, shape=[5, 2], dtype=dtypes.int64)",
      "177:       dense_shape = constant_op.constant(53, shape=[], dtype=dtypes.int64)",
      "178:       csr = sparse_csr_matrix_ops.sparse_tensor_to_csr_sparse_matrix(",
      "179:           indices=indices, values=values, dense_shape=dense_shape)",
      "180:       self.evaluate(csr)",
      "182:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
      "183:                                 \"must be rank 2\"):",
      "184:       indices = constant_op.constant(0, shape=[5], dtype=dtypes.int64)",
      "185:       dense_shape = constant_op.constant(53, shape=[1], dtype=dtypes.int64)",
      "186:       csr = sparse_csr_matrix_ops.sparse_tensor_to_csr_sparse_matrix(",
      "187:           indices=indices, values=values, dense_shape=dense_shape)",
      "188:       self.evaluate(csr)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b72d0d639076ca2ef3c847c8c99dc3c39c98123f",
      "candidate_info": {
        "commit_hash": "b72d0d639076ca2ef3c847c8c99dc3c39c98123f",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/b72d0d639076ca2ef3c847c8c99dc3c39c98123f",
        "files": [
          "tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc",
          "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py"
        ],
        "message": "Add argument check to prevent memory segmentation fault in SparseTensorToCSRSparseMatrix ops\n\nPiperOrigin-RevId: 528496574",
        "before_after_code_files": [
          "tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc||tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc",
          "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py||tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc||tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc",
            "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py||tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc||tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc",
            "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py||tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc||tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc": [
          "File: tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc -> tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: See the License for the specific language governing permissions and",
          "13: limitations under the License.",
          "16: #define EIGEN_USE_THREADS",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: #include <limits>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:     const int64_t num_cols = dense_shape_vec((rank == 2) ? 1 : 2);",
          "84:     const int64_t total_nnz = values.NumElements();",
          "87:     TensorShape batch_ptr_shape;",
          "88:     OP_REQUIRES_OK(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87:     static constexpr int64_t kInt32Max = std::numeric_limits<int32>::max();",
          "88:     OP_REQUIRES(",
          "89:         ctx, batch_size < kInt32Max,",
          "90:         errors::InvalidArgument(\"dense_shape batch_size must be < Int32Max,\"",
          "91:                                 \" but the input value is \",",
          "92:                                 batch_size));",
          "93:     OP_REQUIRES(ctx, total_nnz <= kInt32Max,",
          "94:                 errors::InvalidArgument(\"values number of elements must be <=\"",
          "95:                                         \" Int32Max, but the input value is \",",
          "96:                                         total_nnz));",
          "97:     OP_REQUIRES(",
          "98:         ctx, (num_rows + 1) * batch_size <= kInt32Max,",
          "99:         errors::InvalidArgument(\"The csr row index size, computed based on the\"",
          "100:                                 \" dense_shape, must be <= Int32Max, but is too\"",
          "101:                                 \" large. Current value is \",",
          "102:                                 (num_rows + 1) * batch_size));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "153:     const int64_t rows = dense_shape((rank == 2) ? 0 : 1);",
          "154:     const int64_t cols = dense_shape((rank == 2) ? 1 : 2);",
          "156:     ScratchSpace<int32> nnz_per_batch_host(c, batch_size, /*on_host*/ true);",
          "158:     Tensor nnz_per_batch_device_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "174:     static constexpr int64_t kInt32Max = std::numeric_limits<int32>::max();",
          "175:     OP_REQUIRES_ASYNC(",
          "176:         c, batch_size < kInt32Max,",
          "177:         errors::InvalidArgument(\"dense_shape batch_size must be < Int32Max,\"",
          "178:                                 \" but the input value is \",",
          "179:                                 batch_size),",
          "180:         done);",
          "181:     OP_REQUIRES_ASYNC(",
          "182:         c, values_t.NumElements() <= kInt32Max,",
          "183:         errors::InvalidArgument(\"values number of elements must be <=\"",
          "184:                                 \" Int32Max, but the input value is \",",
          "185:                                 values_t.NumElements()),",
          "186:         done);",
          "187:     OP_REQUIRES_ASYNC(",
          "188:         c, (rows + 1) * batch_size <= kInt32Max,",
          "189:         errors::InvalidArgument(\"The csr row index size, computed based on the\"",
          "190:                                 \" dense_shape, must be <= Int32Max, but is too\"",
          "191:                                 \" large. Current value is \",",
          "192:                                 (rows + 1) * batch_size),",
          "193:         done);",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py||tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py": [
          "File: tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py -> tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "172:     self.assertAllEqual(a_dense_shape, a_st_rt_value.dense_shape)",
          "174:   def testSparseTensorConversionInvalidInputShapes(self):",
          "179:       indices = constant_op.constant(0, shape=[5, 2], dtype=dtypes.int64)",
          "180:       dense_shape = constant_op.constant(53, shape=[], dtype=dtypes.int64)",
          "181:       csr = sparse_csr_matrix_ops.sparse_tensor_to_csr_sparse_matrix(",
          "183:       self.evaluate(csr)",
          "187:       indices = constant_op.constant(0, shape=[5], dtype=dtypes.int64)",
          "188:       dense_shape = constant_op.constant(53, shape=[1], dtype=dtypes.int64)",
          "189:       csr = sparse_csr_matrix_ops.sparse_tensor_to_csr_sparse_matrix(",
          "191:       self.evaluate(csr)",
          "193:   # TODO(b/139491352): Add handle_data propagation to array_ops.identity.",
          "",
          "[Removed Lines]",
          "175:     values = constant_op.constant(",
          "176:         0.554979503, shape=[5], dtype=dtypes.float32)",
          "177:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "178:                                 \"must be rank 1\"):",
          "182:           indices=indices, values=values, dense_shape=dense_shape)",
          "185:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "186:                                 \"must be rank 2\"):",
          "190:           indices=indices, values=values, dense_shape=dense_shape)",
          "",
          "[Added Lines]",
          "175:     values = constant_op.constant(0.554979503, shape=[5], dtype=dtypes.float32)",
          "176:     with self.assertRaisesRegex(",
          "177:         (ValueError, errors.InvalidArgumentError), \"must be rank 1\"",
          "178:     ):",
          "182:           indices=indices, values=values, dense_shape=dense_shape",
          "183:       )",
          "186:     with self.assertRaisesRegex(",
          "187:         (ValueError, errors.InvalidArgumentError), \"must be rank 2\"",
          "188:     ):",
          "192:           indices=indices, values=values, dense_shape=dense_shape",
          "193:       )",
          "194:       self.evaluate(csr)",
          "196:     int32max = 2**31 - 1",
          "197:     with self.assertRaisesRegex(",
          "198:         (ValueError, errors.InvalidArgumentError),",
          "199:         \"batch_size must be < Int32Max\",",
          "200:     ):",
          "201:       indices = constant_op.constant(0, shape=[5, 3], dtype=dtypes.int64)",
          "202:       dense_shape = constant_op.constant(",
          "203:           [int32max, 1, 1], shape=[3], dtype=dtypes.int64",
          "204:       )",
          "205:       csr = sparse_csr_matrix_ops.sparse_tensor_to_csr_sparse_matrix(",
          "206:           indices=indices, values=values, dense_shape=dense_shape",
          "207:       )",
          "208:       self.evaluate(csr)",
          "210:     with self.assertRaisesRegex(",
          "211:         (ValueError, errors.InvalidArgumentError),",
          "212:         \"csr row index size.*must be <= Int32Max\",",
          "213:     ):",
          "214:       indices = constant_op.constant(0, shape=[5, 3], dtype=dtypes.int64)",
          "215:       dense_shape = constant_op.constant(",
          "216:           [(int32max // 2), 10, 1], shape=[3], dtype=dtypes.int64",
          "217:       )",
          "218:       csr = sparse_csr_matrix_ops.sparse_tensor_to_csr_sparse_matrix(",
          "219:           indices=indices, values=values, dense_shape=dense_shape",
          "220:       )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1f2435a833b899b79aa97f2ec4edc165d9933a45",
      "candidate_info": {
        "commit_hash": "1f2435a833b899b79aa97f2ec4edc165d9933a45",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/1f2435a833b899b79aa97f2ec4edc165d9933a45",
        "files": [
          "tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc",
          "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py"
        ],
        "message": "Fix failed check in SparseTensorToCSRSparseMatrix\n\nSecurity vulnerability fix. A `CHECK` fails if inputing either an empty `dense_shape`,\nor a non-rank-2 `indices`. Added appropriate checks and tests.\n\nPiperOrigin-RevId: 446053984",
        "before_after_code_files": [
          "tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc||tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc",
          "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py||tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc||tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc",
            "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py||tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc||tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc",
            "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py||tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc||tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc": [
          "File: tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc -> tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:     const Tensor& values = ctx->input(1);",
          "68:     const Tensor& dense_shape = ctx->input(2);",
          "69:     const int rank = dense_shape.NumElements();",
          "70:     OP_REQUIRES(ctx, rank == 2 || rank == 3,",
          "71:                 errors::InvalidArgument(\"SparseTensor must have rank 2 or 3; \",",
          "72:                                         \"but indices has rank: \", rank));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:     OP_REQUIRES(",
          "71:         ctx, TensorShapeUtils::IsVector(dense_shape.shape()),",
          "72:         errors::InvalidArgument(\"dense_shape must be rank 1 but got rank\",",
          "73:                                 dense_shape.shape().dims()));",
          "74:     OP_REQUIRES(ctx, TensorShapeUtils::IsMatrix(indices.shape()),",
          "75:                 errors::InvalidArgument(\"indices must be rank 2 but got rank\",",
          "76:                                         indices.shape().dims()));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py||tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py": [
          "File: tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py -> tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "168:     self.assertAllClose(a_values, a_st_rt_value.values)",
          "169:     self.assertAllEqual(a_dense_shape, a_st_rt_value.dense_shape)",
          "171:   # TODO(b/139491352): Add handle_data propagation to array_ops.identity.",
          "172:   @test_util.run_deprecated_v1",
          "173:   def testCSRSparseMatrixResourceVariable(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "171:   def testSparseTensorConversionInvalidInputShapes(self):",
          "172:     values = constant_op.constant(",
          "173:         0.554979503, shape=[5], dtype=dtypes.float32)",
          "174:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "175:                                 \"must be rank 1\"):",
          "176:       indices = constant_op.constant(0, shape=[5, 2], dtype=dtypes.int64)",
          "177:       dense_shape = constant_op.constant(53, shape=[], dtype=dtypes.int64)",
          "178:       csr = sparse_csr_matrix_ops.sparse_tensor_to_csr_sparse_matrix(",
          "179:           indices=indices, values=values, dense_shape=dense_shape)",
          "180:       self.evaluate(csr)",
          "182:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "183:                                 \"must be rank 2\"):",
          "184:       indices = constant_op.constant(0, shape=[5], dtype=dtypes.int64)",
          "185:       dense_shape = constant_op.constant(53, shape=[1], dtype=dtypes.int64)",
          "186:       csr = sparse_csr_matrix_ops.sparse_tensor_to_csr_sparse_matrix(",
          "187:           indices=indices, values=values, dense_shape=dense_shape)",
          "188:       self.evaluate(csr)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1ef15e9ee1b95ecce4c7a439f925c2caf671670b",
      "candidate_info": {
        "commit_hash": "1ef15e9ee1b95ecce4c7a439f925c2caf671670b",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/1ef15e9ee1b95ecce4c7a439f925c2caf671670b",
        "files": [
          "tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc",
          "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py"
        ],
        "message": "Fix failed check in SparseTensorToCSRSparseMatrix\n\nSecurity vulnerability fix. A `CHECK` fails if inputing either an empty `dense_shape`,\nor a non-rank-2 `indices`. Added appropriate checks and tests.\n\nPiperOrigin-RevId: 446053984",
        "before_after_code_files": [
          "tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc||tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc",
          "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py||tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc||tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc",
            "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py||tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc||tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc",
            "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py||tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc||tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc": [
          "File: tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc -> tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:     const Tensor& values = ctx->input(1);",
          "68:     const Tensor& dense_shape = ctx->input(2);",
          "69:     const int rank = dense_shape.NumElements();",
          "70:     OP_REQUIRES(ctx, rank == 2 || rank == 3,",
          "71:                 errors::InvalidArgument(\"SparseTensor must have rank 2 or 3; \",",
          "72:                                         \"but indices has rank: \", rank));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:     OP_REQUIRES(",
          "71:         ctx, TensorShapeUtils::IsVector(dense_shape.shape()),",
          "72:         errors::InvalidArgument(\"dense_shape must be rank 1 but got rank\",",
          "73:                                 dense_shape.shape().dims()));",
          "74:     OP_REQUIRES(ctx, TensorShapeUtils::IsMatrix(indices.shape()),",
          "75:                 errors::InvalidArgument(\"indices must be rank 2 but got rank\",",
          "76:                                         indices.shape().dims()));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py||tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py": [
          "File: tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py -> tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "172:     self.assertAllClose(a_values, a_st_rt_value.values)",
          "173:     self.assertAllEqual(a_dense_shape, a_st_rt_value.dense_shape)",
          "175:   # TODO(b/139491352): Add handle_data propagation to array_ops.identity.",
          "176:   @test_util.run_deprecated_v1",
          "177:   def testCSRSparseMatrixResourceVariable(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "175:   def testSparseTensorConversionInvalidInputShapes(self):",
          "176:     values = constant_op.constant(",
          "177:         0.554979503, shape=[5], dtype=dtypes.float32)",
          "178:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "179:                                 \"must be rank 1\"):",
          "180:       indices = constant_op.constant(0, shape=[5, 2], dtype=dtypes.int64)",
          "181:       dense_shape = constant_op.constant(53, shape=[], dtype=dtypes.int64)",
          "182:       csr = sparse_csr_matrix_ops.sparse_tensor_to_csr_sparse_matrix(",
          "183:           indices=indices, values=values, dense_shape=dense_shape)",
          "184:       self.evaluate(csr)",
          "186:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "187:                                 \"must be rank 2\"):",
          "188:       indices = constant_op.constant(0, shape=[5], dtype=dtypes.int64)",
          "189:       dense_shape = constant_op.constant(53, shape=[1], dtype=dtypes.int64)",
          "190:       csr = sparse_csr_matrix_ops.sparse_tensor_to_csr_sparse_matrix(",
          "191:           indices=indices, values=values, dense_shape=dense_shape)",
          "192:       self.evaluate(csr)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4513947dd72c541acf1ae801cc2196b12b355b55",
      "candidate_info": {
        "commit_hash": "4513947dd72c541acf1ae801cc2196b12b355b55",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/4513947dd72c541acf1ae801cc2196b12b355b55",
        "files": [
          "tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc",
          "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py"
        ],
        "message": "Fix failed check in SparseTensorToCSRSparseMatrix\n\nSecurity vulnerability fix. A `CHECK` fails if inputing either an empty `dense_shape`,\nor a non-rank-2 `indices`. Added appropriate checks and tests.\n\nPiperOrigin-RevId: 446053984",
        "before_after_code_files": [
          "tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc||tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc",
          "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py||tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc||tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc",
            "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py||tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc||tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc",
            "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py||tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc||tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc": [
          "File: tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc -> tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:     const Tensor& values = ctx->input(1);",
          "68:     const Tensor& dense_shape = ctx->input(2);",
          "69:     const int rank = dense_shape.NumElements();",
          "70:     OP_REQUIRES(ctx, rank == 2 || rank == 3,",
          "71:                 errors::InvalidArgument(\"SparseTensor must have rank 2 or 3; \",",
          "72:                                         \"but indices has rank: \", rank));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:     OP_REQUIRES(",
          "71:         ctx, TensorShapeUtils::IsVector(dense_shape.shape()),",
          "72:         errors::InvalidArgument(\"dense_shape must be rank 1 but got rank\",",
          "73:                                 dense_shape.shape().dims()));",
          "74:     OP_REQUIRES(ctx, TensorShapeUtils::IsMatrix(indices.shape()),",
          "75:                 errors::InvalidArgument(\"indices must be rank 2 but got rank\",",
          "76:                                         indices.shape().dims()));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py||tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py": [
          "File: tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py -> tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "168:     self.assertAllClose(a_values, a_st_rt_value.values)",
          "169:     self.assertAllEqual(a_dense_shape, a_st_rt_value.dense_shape)",
          "171:   # TODO(b/139491352): Add handle_data propagation to array_ops.identity.",
          "172:   @test_util.run_deprecated_v1",
          "173:   def testCSRSparseMatrixResourceVariable(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "171:   def testSparseTensorConversionInvalidInputShapes(self):",
          "172:     values = constant_op.constant(",
          "173:         0.554979503, shape=[5], dtype=dtypes.float32)",
          "174:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "175:                                 \"must be rank 1\"):",
          "176:       indices = constant_op.constant(0, shape=[5, 2], dtype=dtypes.int64)",
          "177:       dense_shape = constant_op.constant(53, shape=[], dtype=dtypes.int64)",
          "178:       csr = sparse_csr_matrix_ops.sparse_tensor_to_csr_sparse_matrix(",
          "179:           indices=indices, values=values, dense_shape=dense_shape)",
          "180:       self.evaluate(csr)",
          "182:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "183:                                 \"must be rank 2\"):",
          "184:       indices = constant_op.constant(0, shape=[5], dtype=dtypes.int64)",
          "185:       dense_shape = constant_op.constant(53, shape=[1], dtype=dtypes.int64)",
          "186:       csr = sparse_csr_matrix_ops.sparse_tensor_to_csr_sparse_matrix(",
          "187:           indices=indices, values=values, dense_shape=dense_shape)",
          "188:       self.evaluate(csr)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "578792366aa32d672950e5746ea88f15c6703681",
      "candidate_info": {
        "commit_hash": "578792366aa32d672950e5746ea88f15c6703681",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/578792366aa32d672950e5746ea88f15c6703681",
        "files": [
          "tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc",
          "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py"
        ],
        "message": "Fix failed check in SparseTensorToCSRSparseMatrix\n\nSecurity vulnerability fix. A `CHECK` fails if inputing either an empty `dense_shape`,\nor a non-rank-2 `indices`. Added appropriate checks and tests.\n\nPiperOrigin-RevId: 446053984",
        "before_after_code_files": [
          "tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc||tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc",
          "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py||tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc||tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc",
            "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py||tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc||tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc",
            "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py||tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc||tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc": [
          "File: tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc -> tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:     const Tensor& values = ctx->input(1);",
          "68:     const Tensor& dense_shape = ctx->input(2);",
          "69:     const int rank = dense_shape.NumElements();",
          "70:     OP_REQUIRES(ctx, rank == 2 || rank == 3,",
          "71:                 errors::InvalidArgument(\"SparseTensor must have rank 2 or 3; \",",
          "72:                                         \"but indices has rank: \", rank));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:     OP_REQUIRES(",
          "71:         ctx, TensorShapeUtils::IsVector(dense_shape.shape()),",
          "72:         errors::InvalidArgument(\"dense_shape must be rank 1 but got rank\",",
          "73:                                 dense_shape.shape().dims()));",
          "74:     OP_REQUIRES(ctx, TensorShapeUtils::IsMatrix(indices.shape()),",
          "75:                 errors::InvalidArgument(\"indices must be rank 2 but got rank\",",
          "76:                                         indices.shape().dims()));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py||tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py": [
          "File: tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py -> tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "172:     self.assertAllClose(a_values, a_st_rt_value.values)",
          "173:     self.assertAllEqual(a_dense_shape, a_st_rt_value.dense_shape)",
          "175:   # TODO(b/139491352): Add handle_data propagation to array_ops.identity.",
          "176:   @test_util.run_deprecated_v1",
          "177:   def testCSRSparseMatrixResourceVariable(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "175:   def testSparseTensorConversionInvalidInputShapes(self):",
          "176:     values = constant_op.constant(",
          "177:         0.554979503, shape=[5], dtype=dtypes.float32)",
          "178:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "179:                                 \"must be rank 1\"):",
          "180:       indices = constant_op.constant(0, shape=[5, 2], dtype=dtypes.int64)",
          "181:       dense_shape = constant_op.constant(53, shape=[], dtype=dtypes.int64)",
          "182:       csr = sparse_csr_matrix_ops.sparse_tensor_to_csr_sparse_matrix(",
          "183:           indices=indices, values=values, dense_shape=dense_shape)",
          "184:       self.evaluate(csr)",
          "186:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "187:                                 \"must be rank 2\"):",
          "188:       indices = constant_op.constant(0, shape=[5], dtype=dtypes.int64)",
          "189:       dense_shape = constant_op.constant(53, shape=[1], dtype=dtypes.int64)",
          "190:       csr = sparse_csr_matrix_ops.sparse_tensor_to_csr_sparse_matrix(",
          "191:           indices=indices, values=values, dense_shape=dense_shape)",
          "192:       self.evaluate(csr)",
          "",
          "---------------"
        ]
      }
    }
  ]
}