{
  "cve_id": "CVE-2015-4178",
  "cve_desc": "The fs_pin implementation in the Linux kernel before 4.0.5 does not ensure the internal consistency of a certain list data structure, which allows local users to cause a denial of service (system crash) by leveraging user-namespace root access for an MNT_DETACH umount2 system call, related to fs/fs_pin.c and include/linux/fs_pin.h.",
  "repo": "torvalds/linux",
  "patch_hash": "820f9f147dcce2602eefd9b575bbbd9ea14f0953",
  "patch_info": {
    "commit_hash": "820f9f147dcce2602eefd9b575bbbd9ea14f0953",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/820f9f147dcce2602eefd9b575bbbd9ea14f0953",
    "files": [
      "fs/fs_pin.c",
      "include/linux/fs_pin.h"
    ],
    "message": "fs_pin: Allow for the possibility that m_list or s_list go unused.\n\nThis is needed to support lazily umounting locked mounts.  Because the\nentire unmounted subtree needs to stay together until there are no\nusers with references to any part of the subtree.\n\nTo support this guarantee that the fs_pin m_list and s_list nodes\nare initialized by initializing them in init_fs_pin allowing\nfor the possibility that pin_insert_group does not touch them.\n\nFurther use hlist_del_init in pin_remove so that there is\na hlist_unhashed test before the list we attempt to update\nthe previous list item.\n\nSigned-off-by: \"Eric W. Biederman\" <ebiederm@xmission.com>",
    "before_after_code_files": [
      "fs/fs_pin.c||fs/fs_pin.c",
      "include/linux/fs_pin.h||include/linux/fs_pin.h"
    ]
  },
  "patch_diff": {
    "fs/fs_pin.c||fs/fs_pin.c": [
      "File: fs/fs_pin.c -> fs/fs_pin.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: void pin_remove(struct fs_pin *pin)",
      "10: {",
      "11:  spin_lock(&pin_lock);",
      "14:  spin_unlock(&pin_lock);",
      "15:  spin_lock_irq(&pin->wait.lock);",
      "16:  pin->done = 1;",
      "",
      "[Removed Lines]",
      "12:  hlist_del(&pin->m_list);",
      "13:  hlist_del(&pin->s_list);",
      "",
      "[Added Lines]",
      "12:  hlist_del_init(&pin->m_list);",
      "13:  hlist_del_init(&pin->s_list);",
      "",
      "---------------"
    ],
    "include/linux/fs_pin.h||include/linux/fs_pin.h": [
      "File: include/linux/fs_pin.h -> include/linux/fs_pin.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "13: static inline void init_fs_pin(struct fs_pin *p, void (*kill)(struct fs_pin *))",
      "14: {",
      "15:  init_waitqueue_head(&p->wait);",
      "16:  p->kill = kill;",
      "17: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "16:  INIT_HLIST_NODE(&p->s_list);",
      "17:  INIT_HLIST_NODE(&p->m_list);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "efb170c22867cdc6f770de441bdefecec6712199",
      "candidate_info": {
        "commit_hash": "efb170c22867cdc6f770de441bdefecec6712199",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/efb170c22867cdc6f770de441bdefecec6712199",
        "files": [
          "fs/Makefile",
          "fs/fs_pin.c",
          "include/linux/acct.h",
          "include/linux/fs_pin.h",
          "kernel/acct.c"
        ],
        "message": "take fs_pin stuff to fs/*\n\nAdd a new field to fs_pin - kill(pin).  That's what umount and r/o remount\nwill be calling for all pins attached to vfsmount and superblock resp.\nCalled after bumping the refcount, so it won't go away under us.  Dropping\nthe refcount is responsibility of the instance.  All generic stuff moved to\nfs/fs_pin.c; the next step will rip all the knowledge of kernel/acct.c from\nfs/super.c and fs/namespace.c.  After that - death to mnt_pin(); it was\nintended to be usable as generic mechanism for code that wants to attach\nobjects to vfsmount, so that they would not make the sucker busy and\nwould get killed on umount.  Never got it right; it remained acct.c-specific\nall along.  Now it's very close to being killable.\n\nSigned-off-by: Al Viro <viro@zeniv.linux.org.uk>",
        "before_after_code_files": [
          "fs/fs_pin.c||fs/fs_pin.c",
          "include/linux/acct.h||include/linux/acct.h",
          "include/linux/fs_pin.h||include/linux/fs_pin.h",
          "kernel/acct.c||kernel/acct.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/fs_pin.c||fs/fs_pin.c",
            "include/linux/fs_pin.h||include/linux/fs_pin.h"
          ],
          "candidate": [
            "fs/fs_pin.c||fs/fs_pin.c",
            "include/linux/fs_pin.h||include/linux/fs_pin.h"
          ]
        }
      },
      "candidate_diff": {
        "fs/fs_pin.c||fs/fs_pin.c": [
          "File: fs/fs_pin.c -> fs/fs_pin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include <linux/fs.h>",
          "2: #include <linux/slab.h>",
          "3: #include <linux/fs_pin.h>",
          "4: #include \"mount.h\"",
          "6: static void pin_free_rcu(struct rcu_head *head)",
          "7: {",
          "8:  kfree(container_of(head, struct fs_pin, rcu));",
          "9: }",
          "11: static DEFINE_SPINLOCK(pin_lock);",
          "13: void pin_put(struct fs_pin *p)",
          "14: {",
          "15:  if (atomic_long_dec_and_test(&p->count))",
          "16:   call_rcu(&p->rcu, pin_free_rcu);",
          "17: }",
          "19: void pin_remove(struct fs_pin *pin)",
          "20: {",
          "21:  spin_lock(&pin_lock);",
          "22:  hlist_del(&pin->m_list);",
          "23:  hlist_del(&pin->s_list);",
          "24:  spin_unlock(&pin_lock);",
          "25: }",
          "27: void pin_insert(struct fs_pin *pin, struct vfsmount *m)",
          "28: {",
          "29:  spin_lock(&pin_lock);",
          "30:  hlist_add_head(&pin->s_list, &m->mnt_sb->s_pins);",
          "31:  hlist_add_head(&pin->m_list, &real_mount(m)->mnt_pins);",
          "32:  spin_unlock(&pin_lock);",
          "33: }",
          "35: void acct_auto_close_mnt(struct hlist_head *list)",
          "36: {",
          "37:  while (1) {",
          "38:   struct hlist_node *p;",
          "39:   struct fs_pin *pin;",
          "40:   rcu_read_lock();",
          "41:   p = ACCESS_ONCE(list->first);",
          "42:   if (!p) {",
          "43:    rcu_read_unlock();",
          "44:    break;",
          "45:   }",
          "46:   pin = hlist_entry(p, struct fs_pin, m_list);",
          "47:   if (!atomic_long_inc_not_zero(&pin->count)) {",
          "48:    rcu_read_unlock();",
          "49:    cpu_relax();",
          "50:    continue;",
          "51:   }",
          "52:   rcu_read_unlock();",
          "53:   pin->kill(pin);",
          "54:  }",
          "55: }",
          "57: void acct_auto_close(struct hlist_head *list)",
          "58: {",
          "59:  while (1) {",
          "60:   struct hlist_node *p;",
          "61:   struct fs_pin *pin;",
          "62:   rcu_read_lock();",
          "63:   p = ACCESS_ONCE(list->first);",
          "64:   if (!p) {",
          "65:    rcu_read_unlock();",
          "66:    break;",
          "67:   }",
          "68:   pin = hlist_entry(p, struct fs_pin, s_list);",
          "69:   if (!atomic_long_inc_not_zero(&pin->count)) {",
          "70:    rcu_read_unlock();",
          "71:    cpu_relax();",
          "72:    continue;",
          "73:   }",
          "74:   rcu_read_unlock();",
          "75:   pin->kill(pin);",
          "76:  }",
          "77: }",
          "",
          "---------------"
        ],
        "include/linux/acct.h||include/linux/acct.h": [
          "File: include/linux/acct.h -> include/linux/acct.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: struct pacct_struct;",
          "25: struct pid_namespace;",
          "29: extern void acct_collect(long exitcode, int group_dead);",
          "30: extern void acct_process(void);",
          "31: extern void acct_exit_ns(struct pid_namespace *);",
          "32: #else",
          "35: #define acct_collect(x,y) do { } while (0)",
          "36: #define acct_process()  do { } while (0)",
          "37: #define acct_exit_ns(ns) do { } while (0)",
          "38: #endif",
          "",
          "[Removed Lines]",
          "27: extern void acct_auto_close(struct hlist_head *);",
          "28: extern void acct_auto_close_mnt(struct hlist_head *);",
          "33: #define acct_auto_close(x) do { } while (0)",
          "34: #define acct_auto_close_mnt(x) do { } while (0)",
          "",
          "[Added Lines]",
          "35: extern void acct_auto_close(struct hlist_head *);",
          "36: extern void acct_auto_close_mnt(struct hlist_head *);",
          "",
          "---------------"
        ],
        "include/linux/fs_pin.h||include/linux/fs_pin.h": [
          "File: include/linux/fs_pin.h -> include/linux/fs_pin.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include <linux/fs.h>",
          "3: struct fs_pin {",
          "4:  atomic_long_t  count;",
          "5:  union {",
          "6:   struct {",
          "7:    struct hlist_node s_list;",
          "8:    struct hlist_node m_list;",
          "9:   };",
          "10:   struct rcu_head rcu;",
          "11:  };",
          "12:  void (*kill)(struct fs_pin *);",
          "13: };",
          "15: void pin_put(struct fs_pin *);",
          "16: void pin_remove(struct fs_pin *);",
          "17: void pin_insert(struct fs_pin *, struct vfsmount *);",
          "",
          "---------------"
        ],
        "kernel/acct.c||kernel/acct.c": [
          "File: kernel/acct.c -> kernel/acct.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: #include <asm/div64.h>",
          "61: #include <linux/pid_namespace.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: #include <linux/fs_pin.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79: static void do_acct_process(struct bsd_acct_struct *acct);",
          "92: struct bsd_acct_struct {",
          "93:  struct fs_pin  pin;",
          "94:  struct mutex  lock;",
          "",
          "[Removed Lines]",
          "81: struct fs_pin {",
          "82:  atomic_long_t  count;",
          "83:  union {",
          "84:   struct {",
          "85:    struct hlist_node s_list;",
          "86:    struct hlist_node m_list;",
          "87:   };",
          "88:   struct rcu_head rcu;",
          "89:  };",
          "90: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100:  struct completion done;",
          "101: };",
          "",
          "[Removed Lines]",
          "103: static void pin_free_rcu(struct rcu_head *head)",
          "104: {",
          "105:  kfree(container_of(head, struct fs_pin, rcu));",
          "106: }",
          "108: static DEFINE_SPINLOCK(acct_lock);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "142:  return acct->active;",
          "143: }",
          "168: static struct bsd_acct_struct *acct_get(struct pid_namespace *ns)",
          "169: {",
          "170:  struct bsd_acct_struct *res;",
          "",
          "[Removed Lines]",
          "145: static void pin_put(struct fs_pin *p)",
          "146: {",
          "147:  if (atomic_long_dec_and_test(&p->count))",
          "148:   call_rcu(&p->rcu, pin_free_rcu);",
          "149: }",
          "151: static struct bsd_acct_struct *__acct_get(struct bsd_acct_struct *res)",
          "152: {",
          "153:  if (!atomic_long_inc_not_zero(&res->pin.count)) {",
          "154:   rcu_read_unlock();",
          "155:   cpu_relax();",
          "156:   return NULL;",
          "157:  }",
          "158:  rcu_read_unlock();",
          "159:  mutex_lock(&res->lock);",
          "160:  if (!res->ns) {",
          "161:   mutex_unlock(&res->lock);",
          "162:   pin_put(&res->pin);",
          "163:   return NULL;",
          "164:  }",
          "165:  return res;",
          "166: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "176:   rcu_read_unlock();",
          "177:   return NULL;",
          "178:  }",
          "181:   goto again;",
          "182:  return res;",
          "183: }",
          "",
          "[Removed Lines]",
          "179:  res = __acct_get(res);",
          "180:  if (!res)",
          "",
          "[Added Lines]",
          "138:  if (!atomic_long_inc_not_zero(&res->pin.count)) {",
          "139:   rcu_read_unlock();",
          "140:   cpu_relax();",
          "142:  }",
          "143:  rcu_read_unlock();",
          "144:  mutex_lock(&res->lock);",
          "145:  if (!res->ns) {",
          "146:   mutex_unlock(&res->lock);",
          "147:   pin_put(&res->pin);",
          "148:   goto again;",
          "149:  }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "203:   init_completion(&acct->done);",
          "204:   schedule_work(&acct->work);",
          "205:   wait_for_completion(&acct->done);",
          "210:   ns->bacct = new;",
          "219:   acct->ns = NULL;",
          "220:   atomic_long_dec(&acct->pin.count);",
          "221:   mutex_unlock(&acct->lock);",
          "",
          "[Removed Lines]",
          "206:   spin_lock(&acct_lock);",
          "207:   hlist_del(&acct->pin.m_list);",
          "208:   hlist_del(&acct->pin.s_list);",
          "209:   spin_unlock(&acct_lock);",
          "211:   if (new) {",
          "212:    struct vfsmount *m = new->file->f_path.mnt;",
          "213:    spin_lock(&acct_lock);",
          "214:    hlist_add_head(&new->pin.s_list, &m->mnt_sb->s_pins);",
          "215:    hlist_add_head(&new->pin.m_list, &real_mount(m)->mnt_pins);",
          "216:    spin_unlock(&acct_lock);",
          "217:    mutex_unlock(&new->lock);",
          "218:   }",
          "",
          "[Added Lines]",
          "174:   pin_remove(&acct->pin);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "223:  }",
          "224: }",
          "226: static int acct_on(struct filename *pathname)",
          "227: {",
          "228:  struct file *file;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "183: static void acct_pin_kill(struct fs_pin *pin)",
          "184: {",
          "185:  struct bsd_acct_struct *acct;",
          "186:  acct = container_of(pin, struct bsd_acct_struct, pin);",
          "187:  mutex_lock(&acct->lock);",
          "188:  if (!acct->ns) {",
          "189:   mutex_unlock(&acct->lock);",
          "190:   pin_put(pin);",
          "191:   acct = NULL;",
          "192:  }",
          "193:  acct_kill(acct, NULL);",
          "194: }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "254:  }",
          "256:  atomic_long_set(&acct->pin.count, 1);",
          "257:  acct->file = file;",
          "258:  acct->needcheck = jiffies;",
          "259:  acct->ns = ns;",
          "260:  mutex_init(&acct->lock);",
          "261:  mnt = file->f_path.mnt;",
          "262:  mnt_pin(mnt);",
          "264:  old = acct_get(ns);",
          "267:   acct_kill(old, acct);",
          "269:   ns->bacct = acct;",
          "277:  return 0;",
          "278: }",
          "",
          "[Removed Lines]",
          "266:  if (old) {",
          "268:  } else {",
          "270:   spin_lock(&acct_lock);",
          "271:   hlist_add_head(&acct->pin.s_list, &mnt->mnt_sb->s_pins);",
          "272:   hlist_add_head(&acct->pin.m_list, &real_mount(mnt)->mnt_pins);",
          "273:   spin_unlock(&acct_lock);",
          "274:   mutex_unlock(&acct->lock);",
          "275:  }",
          "",
          "[Added Lines]",
          "227:  acct->pin.kill = acct_pin_kill;",
          "235:  pin_insert(&acct->pin, mnt);",
          "238:  if (old)",
          "240:  else",
          "242:  mutex_unlock(&acct->lock);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "312:  return error;",
          "313: }",
          "345: void acct_exit_ns(struct pid_namespace *ns)",
          "346: {",
          "347:  acct_kill(acct_get(ns), NULL);",
          "",
          "[Removed Lines]",
          "315: void acct_auto_close_mnt(struct hlist_head *list)",
          "316: {",
          "317:  rcu_read_lock();",
          "318:  while (1) {",
          "319:   struct hlist_node *p = ACCESS_ONCE(list->first);",
          "320:   if (!p)",
          "321:    break;",
          "322:   acct_kill(__acct_get(hlist_entry(p,",
          "323:        struct bsd_acct_struct,",
          "324:        pin.m_list)), NULL);",
          "325:   rcu_read_lock();",
          "326:  }",
          "327:  rcu_read_unlock();",
          "328: }",
          "330: void acct_auto_close(struct hlist_head *list)",
          "331: {",
          "332:  rcu_read_lock();",
          "333:  while (1) {",
          "334:   struct hlist_node *p = ACCESS_ONCE(list->first);",
          "335:   if (!p)",
          "336:    break;",
          "337:   acct_kill(__acct_get(hlist_entry(p,",
          "338:        struct bsd_acct_struct,",
          "339:        pin.s_list)), NULL);",
          "340:   rcu_read_lock();",
          "341:  }",
          "342:  rcu_read_unlock();",
          "343: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}