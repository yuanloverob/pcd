{
  "cve_id": "CVE-2017-6448",
  "cve_desc": "The dalvik_disassemble function in libr/asm/p/asm_dalvik.c in radare2 1.2.1 allows remote attackers to cause a denial of service (stack-based buffer overflow and application crash) or possibly have unspecified other impact via a crafted DEX file.",
  "repo": "radare/radare2",
  "patch_hash": "f41e941341e44aa86edd4483c4487ec09a074257",
  "patch_info": {
    "commit_hash": "f41e941341e44aa86edd4483c4487ec09a074257",
    "repo": "radare/radare2",
    "commit_url": "https://github.com/radare/radare2/commit/f41e941341e44aa86edd4483c4487ec09a074257",
    "files": [
      "libr/asm/p/asm_dalvik.c"
    ],
    "message": "Fix #6885 - oob write in dalvik_disassemble",
    "before_after_code_files": [
      "libr/asm/p/asm_dalvik.c||libr/asm/p/asm_dalvik.c"
    ]
  },
  "patch_diff": {
    "libr/asm/p/asm_dalvik.c||libr/asm/p/asm_dalvik.c": [
      "File: libr/asm/p/asm_dalvik.c -> libr/asm/p/asm_dalvik.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "26:    {",
      "27:     unsigned short array_size = buf[2] | (buf[3] << 8);",
      "28:     int first_key = buf[4] | (buf[5] << 8) | (buf[6] << 16) | (buf[7] << 24);",
      "30:     size = 8;",
      "31:     payload = 2 * (array_size * 2);",
      "32:     len = 0;",
      "",
      "[Removed Lines]",
      "29:     sprintf (op->buf_asm, \"packed-switch-payload %d, %d\", array_size, first_key);",
      "",
      "[Added Lines]",
      "29:     snprintf (op->buf_asm, sizeof(op->buf_asm), \"packed-switch-payload %d, %d\", array_size, first_key);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "39:    {",
      "40:     unsigned short array_size = buf[2] | (buf[3] << 8);",
      "42:     size = 4;",
      "43:     payload = 2 * (array_size*4);",
      "44:     len = 0;",
      "",
      "[Removed Lines]",
      "41:     sprintf (op->buf_asm, \"sparse-switch-payload %d\", array_size);",
      "",
      "[Added Lines]",
      "41:     snprintf (op->buf_asm, sizeof (op->buf_asm), \"sparse-switch-payload %d\", array_size);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "74:   case fmtopvAvB:",
      "75:    vA = buf[1] & 0x0f;",
      "76:    vB = (buf[1] & 0xf0) >> 4;",
      "78:    strasm = r_str_concat (strasm, str);",
      "79:    break;",
      "80:   case fmtopvAAvBBBB:",
      "81:    vA = (int) buf[1];",
      "82:    vB = (buf[3] << 8) | buf[2];",
      "84:    strasm = r_str_concat (strasm, str);",
      "85:    break;",
      "86:   case fmtopvAAAAvBBBB: // buf[1] seems useless :/",
      "87:    vA = (buf[3] << 8) | buf[2];",
      "88:    vB = (buf[5] << 8) | buf[4];",
      "90:    strasm = r_str_concat (strasm, str);",
      "91:    break;",
      "92:   case fmtopvAA:",
      "93:    vA = (int) buf[1];",
      "95:    strasm = r_str_concat (strasm, str);",
      "96:    break;",
      "97:   case fmtopvAcB:",
      "98:    vA = buf[1] & 0x0f;",
      "99:    vB = (buf[1] & 0xf0) >> 4;",
      "101:    strasm = r_str_concat (strasm, str);",
      "102:    break;",
      "103:   case fmtopvAAcBBBB:",
      "104:    vA = (int) buf[1];",
      "105:    {",
      "106:     short sB = (buf[3] << 8) | buf[2];",
      "108:     strasm = r_str_concat (strasm, str);",
      "109:    }",
      "110:    break;",
      "",
      "[Removed Lines]",
      "77:    sprintf (str, \" v%i, v%i\", vA, vB);",
      "83:    sprintf (str, \" v%i, v%i\", vA, vB);",
      "89:    sprintf (str, \" v%i, v%i\", vA, vB);",
      "94:    sprintf (str, \" v%i\", vA);",
      "100:    sprintf (str, \" v%i, %#x\", vA, vB);",
      "107:     sprintf (str, \" v%i, %#04hx\", vA, sB);",
      "",
      "[Added Lines]",
      "77:    snprintf (str, sizeof (str), \" v%i, v%i\", vA, vB);",
      "83:    snprintf (str, sizeof (str), \" v%i, v%i\", vA, vB);",
      "89:    snprintf (str, sizeof (str), \" v%i, v%i\", vA, vB);",
      "94:    snprintf (str, sizeof (str), \" v%i\", vA);",
      "100:    snprintf (str, sizeof (str), \" v%i, %#x\", vA, vB);",
      "107:     snprintf (str, sizeof (str), \" v%i, %#04hx\", vA, sB);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "137:     ((llint)buf[6] << 32) | ((llint)buf[7] << 40)|",
      "138:     ((llint)buf[8] << 48) | ((llint)buf[9] << 56);",
      "139:    #undef llint",
      "141:    strasm = r_str_concat (strasm, str);",
      "142:    break;",
      "143:   case fmtopvAAvBBvCC:",
      "144:    vA = (int) buf[1];",
      "145:    vB = (int) buf[2];",
      "146:    vC = (int) buf[3];",
      "148:    strasm = r_str_concat (strasm, str);",
      "149:    break;",
      "150:   case fmtopvAAvBBcCC:",
      "151:    vA = (int) buf[1];",
      "152:    vB = (int) buf[2];",
      "153:    vC = (int) buf[3];",
      "155:    strasm = r_str_concat (strasm, str);",
      "156:    break;",
      "157:   case fmtopvAvBcCCCC:",
      "158:    vA = buf[1] & 0x0f;",
      "159:    vB = (buf[1] & 0xf0) >> 4;",
      "160:    vC = (buf[3] << 8) | buf[2];",
      "162:    strasm = r_str_concat (strasm, str);",
      "163:    break;",
      "164:   case fmtoppAA:",
      "165:    vA = (char) buf[1];",
      "167:    snprintf (str, sizeof (str), \" 0x%08\"PFMT64x, a->pc + (vA * 2)); // vA : word -> byte",
      "168:    strasm = r_str_concat (strasm, str);",
      "169:    break;",
      "",
      "[Removed Lines]",
      "140:    sprintf (str, \" v%i:v%i, 0x%\"PFMT64x, vA, vA + 1, lB);",
      "147:    sprintf (str, \" v%i, v%i, v%i\", vA, vB, vC);",
      "154:    sprintf (str, \" v%i, v%i, %#x\", vA, vB, vC);",
      "161:    sprintf (str, \" v%i, v%i, %#x\", vA, vB, vC);",
      "",
      "[Added Lines]",
      "140:    snprintf (str, sizeof (str), \" v%i:v%i, 0x%\"PFMT64x, vA, vA + 1, lB);",
      "147:    snprintf (str, sizeof (str), \" v%i, v%i, v%i\", vA, vB, vC);",
      "154:    snprintf (str, sizeof (str), \" v%i, v%i, %#x\", vA, vB, vC);",
      "161:    snprintf (str, sizeof (str), \" v%i, v%i, %#x\", vA, vB, vC);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "206:    switch (vA) {",
      "207:    case 1:",
      "209:     break;",
      "210:    case 2:",
      "212:     break;",
      "213:    case 3:",
      "215:     break;",
      "216:    case 4:",
      "218:       (buf[4] & 0xf0) >> 4, buf[5] & 0x0f, (buf[5] & 0xf0) >> 4);",
      "219:     break;",
      "220:    default:",
      "222:    }",
      "223:    strasm = r_str_concat (strasm, str);",
      "225:    strasm = r_str_concat (strasm, str);",
      "226:    break;",
      "227:   case fmtoptinlineIR:",
      "",
      "[Removed Lines]",
      "208:     sprintf (str, \" {v%i}\", buf[4] & 0x0f);",
      "211:     sprintf (str, \" {v%i, v%i}\", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4);",
      "214:     sprintf (str, \" {v%i, v%i, v%i}\", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4, buf[5] & 0x0f);",
      "217:     sprintf (str, \" {v%i, v%i, v%i, v%i}\", buf[4] & 0x0f,",
      "221:     sprintf (str, \" {}\");",
      "224:    sprintf (str, \", [%04x]\", vB);",
      "",
      "[Added Lines]",
      "208:     snprintf (str, sizeof (str), \" {v%i}\", buf[4] & 0x0f);",
      "211:     snprintf (str, sizeof (str), \" {v%i, v%i}\", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4);",
      "214:     snprintf (str, sizeof (str), \" {v%i, v%i, v%i}\", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4, buf[5] & 0x0f);",
      "217:     snprintf (str, sizeof (str), \" {v%i, v%i, v%i, v%i}\", buf[4] & 0x0f,",
      "221:     snprintf (str, sizeof (str), \" {}\");",
      "224:    snprintf (str, sizeof (str), \", [%04x]\", vB);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "229:    vA = (int) buf[1];",
      "230:    vB = (buf[3] << 8) | buf[2];",
      "231:    vC = (buf[5] << 8) | buf[4];",
      "233:    strasm = r_str_concat (strasm, str);",
      "234:    break;",
      "235:   case fmtoptinvokeVS:",
      "",
      "[Removed Lines]",
      "232:    sprintf (str, \" {v%i..v%i}, [%04x]\", vC, vC + vA - 1, vB);",
      "",
      "[Added Lines]",
      "232:    snprintf (str, sizeof (str), \" {v%i..v%i}, [%04x]\", vC, vC + vA - 1, vB);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "237:    vB = (buf[3] << 8) | buf[2];",
      "238:    switch (vA) {",
      "239:    case 1:",
      "241:     break;",
      "242:    case 2:",
      "244:     break;",
      "245:    case 3:",
      "247:       (buf[4] & 0xf0) >> 4, buf[5] & 0x0f);",
      "248:     break;",
      "249:    case 4:",
      "251:       (buf[4] & 0xf0) >> 4, buf[5] & 0x0f, (buf[5] & 0xf0) >> 4);",
      "252:     break;",
      "253:    default:",
      "255:     break;",
      "256:    }",
      "257:    strasm = r_str_concat (strasm, str);",
      "259:    strasm = r_str_concat (strasm, str);",
      "260:    break;",
      "261:   case fmtopvAAtBBBB: // \"sput-*\"",
      "",
      "[Removed Lines]",
      "240:     sprintf (str, \" {v%i}\", buf[4] & 0x0f);",
      "243:     sprintf (str, \" {v%i, v%i}\", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4);",
      "246:     sprintf (str, \" {v%i, v%i, v%i}\", buf[4] & 0x0f,",
      "250:     sprintf (str, \" {v%i, v%i, v%i, v%i}\", buf[4] & 0x0f,",
      "254:     sprintf (str, \" {}\");",
      "258:    sprintf (str, \", [%04x]\", vB);",
      "",
      "[Added Lines]",
      "240:     snprintf (str, sizeof (str), \" {v%i}\", buf[4] & 0x0f);",
      "243:     snprintf (str, sizeof (str), \" {v%i, v%i}\", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4);",
      "246:     snprintf (str, sizeof (str), \" {v%i, v%i, v%i}\", buf[4] & 0x0f,",
      "250:     snprintf (str, sizeof (str), \" {v%i, v%i, v%i, v%i}\", buf[4] & 0x0f,",
      "254:     snprintf (str, sizeof (str), \" {}\");",
      "258:    snprintf (str, sizeof (str), \", [%04x]\", vB);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "264:    if (buf[0] == 0x1a) {",
      "265:     offset = R_ASM_GET_OFFSET (a, 's', vB);",
      "266:     if (offset == -1) {",
      "268:     } else {",
      "270:     }",
      "271:    } else if (buf[0] == 0x1c || buf[0] == 0x1f || buf[0] == 0x22) {",
      "272:     flag_str = R_ASM_GET_NAME (a, 'c', vB);",
      "273:     if (!flag_str) {",
      "275:     } else {",
      "277:     }",
      "278:    } else {",
      "279:     flag_str = R_ASM_GET_NAME (a, 'f', vB);",
      "280:     if (!flag_str) {",
      "282:     } else {",
      "284:     }",
      "285:    }",
      "286:    strasm = r_str_concat (strasm, str);",
      "",
      "[Removed Lines]",
      "267:      sprintf (str, \" v%i, string+%i\", vA, vB);",
      "269:      sprintf (str, \" v%i, 0x%\"PFMT64x, vA, offset);",
      "274:      sprintf (str, \" v%i, class+%i\", vA, vB);",
      "276:      sprintf (str, \" v%i, %s\", vA, flag_str);",
      "281:      sprintf (str, \" v%i, field+%i\", vA, vB);",
      "283:      sprintf (str, \" v%i, %s\", vA, flag_str);",
      "",
      "[Added Lines]",
      "267:      snprintf (str, sizeof (str), \" v%i, string+%i\", vA, vB);",
      "269:      snprintf (str, sizeof (str), \" v%i, 0x%\"PFMT64x, vA, offset);",
      "274:      snprintf (str, sizeof (str), \" v%i, class+%i\", vA, vB);",
      "276:      snprintf (str, sizeof (str), \" v%i, %s\", vA, flag_str);",
      "281:      snprintf (str, sizeof (str), \" v%i, field+%i\", vA, vB);",
      "283:      snprintf (str, sizeof (str), \" v%i, %s\", vA, flag_str);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "291:    vC = (buf[3]<<8) | buf[2];",
      "292:    offset = R_ASM_GET_OFFSET (a, 'o', vC);",
      "293:    if (offset == -1) {",
      "295:    } else {",
      "297:    }",
      "298:    strasm = r_str_concat (strasm, str);",
      "299:    break;",
      "",
      "[Removed Lines]",
      "294:     sprintf (str, \" v%i, v%i, [obj+%04x]\", vA, vB, vC);",
      "296:     sprintf (str, \" v%i, v%i, [0x%\"PFMT64x\"]\", vA, vB, offset);",
      "",
      "[Added Lines]",
      "294:     snprintf (str, sizeof (str), \" v%i, v%i, [obj+%04x]\", vA, vB, vC);",
      "296:     snprintf (str, sizeof (str), \" v%i, v%i, [0x%\"PFMT64x\"]\", vA, vB, offset);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "302:    vB = (buf[3] << 8) | buf[2];",
      "303:    offset = R_ASM_GET_OFFSET (a, 't', vB);",
      "304:    if (offset == -1) {",
      "306:    } else {",
      "308:    }",
      "309:    strasm = r_str_concat (strasm, str);",
      "310:    break;",
      "",
      "[Removed Lines]",
      "305:     sprintf (str, \" v%i, thing+%i\", vA, vB);",
      "307:     sprintf (str, \" v%i, 0x%\"PFMT64x, vA, offset);",
      "",
      "[Added Lines]",
      "305:     snprintf (str, sizeof (str), \" v%i, thing+%i\", vA, vB);",
      "307:     snprintf (str, sizeof (str), \" v%i, 0x%\"PFMT64x, vA, offset);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "315:    if (buf[0] == 0x20 || buf[0] == 0x23) { //instance-of & new-array",
      "316:     flag_str = R_ASM_GET_NAME (a, 'c', vC);",
      "317:     if (flag_str) {",
      "319:     }",
      "320:     else {",
      "322:     }",
      "323:    } else {",
      "324:     flag_str = R_ASM_GET_NAME (a, 'f', vC);",
      "325:     if (flag_str) {",
      "327:     }",
      "328:     else {",
      "330:     }",
      "331:    }",
      "332:    strasm = r_str_concat (strasm, str);",
      "",
      "[Removed Lines]",
      "318:      sprintf (str, \" v%i, v%i, %s\", vA, vB, flag_str);",
      "321:      sprintf (str, \" v%i, v%i, class+%i\", vA, vB, vC);",
      "326:      sprintf (str, \" v%i, v%i, %s\", vA, vB, flag_str);",
      "329:      sprintf (str, \" v%i, v%i, field+%i\", vA, vB, vC);",
      "",
      "[Added Lines]",
      "318:      snprintf (str, sizeof (str), \" v%i, v%i, %s\", vA, vB, flag_str);",
      "321:      snprintf (str, sizeof (str), \" v%i, v%i, class+%i\", vA, vB, vC);",
      "326:      snprintf (str, sizeof (str), \" v%i, v%i, %s\", vA, vB, flag_str);",
      "329:      snprintf (str, sizeof (str), \" v%i, v%i, field+%i\", vA, vB, vC);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "336:    vB = (int) (buf[5] | (buf[4] << 8) | (buf[3] << 16) | (buf[2] << 24));",
      "337:    offset = R_ASM_GET_OFFSET (a, 's', vB);",
      "338:    if (offset == -1) {",
      "340:    }",
      "341:    else {",
      "343:    }",
      "344:    strasm = r_str_concat (strasm, str);",
      "345:    break;",
      "",
      "[Removed Lines]",
      "339:     sprintf (str, \" v%i, string+%i\", vA, vB);",
      "342:     sprintf (str, \" v%i, 0x%\"PFMT64x, vA, offset);",
      "",
      "[Added Lines]",
      "339:     snprintf (str, sizeof (str), \" v%i, string+%i\", vA, vB);",
      "342:     snprintf (str, sizeof (str), \" v%i, 0x%\"PFMT64x, vA, offset);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "350:    if (buf[0] == 0x25) { // filled-new-array/range",
      "351:     flag_str = R_ASM_GET_NAME (a, 'c', vB);",
      "352:     if (flag_str) {",
      "354:     }",
      "355:     else {",
      "357:     }",
      "358:    } else {",
      "359:     flag_str = R_ASM_GET_NAME (a, 'm', vB);",
      "360:     if (flag_str) {",
      "362:     }",
      "363:     else {",
      "365:     }",
      "366:    }",
      "367:    strasm = r_str_concat (strasm, str);",
      "",
      "[Removed Lines]",
      "353:      sprintf (str, \" {v%i..v%i}, %s\", vC, vC + vA - 1, flag_str);",
      "356:      sprintf (str, \" {v%i..v%i}, class+%i\", vC, vC + vA - 1, vB);",
      "361:      sprintf (str, \" {v%i..v%i}, %s\", vC, vC + vA - 1, flag_str);",
      "364:      sprintf (str, \" {v%i..v%i}, method+%i\", vC, vC + vA - 1, vB);",
      "",
      "[Added Lines]",
      "353:      snprintf (str, sizeof (str), \" {v%i..v%i}, %s\", vC, vC + vA - 1, flag_str);",
      "356:      snprintf (str, sizeof (str), \" {v%i..v%i}, class+%i\", vC, vC + vA - 1, vB);",
      "361:      snprintf (str, sizeof (str), \" {v%i..v%i}, %s\", vC, vC + vA - 1, flag_str);",
      "364:      snprintf (str, sizeof (str), \" {v%i..v%i}, method+%i\", vC, vC + vA - 1, vB);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "371:    vB = (buf[3] << 8) | buf[2];",
      "372:    switch (vA) {",
      "373:     case 1:",
      "375:      break;",
      "376:     case 2:",
      "378:      break;",
      "379:     case 3:",
      "381:        (buf[4] & 0xf0) >> 4, buf[5] & 0x0f);",
      "382:      break;",
      "383:     case 4:",
      "385:        (buf[4] & 0xf0) >> 4, buf[5] & 0x0f, (buf[5] & 0xf0) >> 4);",
      "386:      break;",
      "387:     case 5:",
      "389:        (buf[4] & 0xf0) >> 4, buf[5] & 0x0f, (buf[5] & 0xf0) >> 4, buf[1] & 0x0f); // TOODO: recheck this",
      "390:      break;",
      "391:     default:",
      "393:    }",
      "394:    strasm = r_str_concat (strasm, str);",
      "395:    if (buf[0] == 0x24) { // filled-new-array",
      "396:     flag_str = R_ASM_GET_NAME (a, 'c', vB);",
      "397:     if (flag_str) {",
      "399:     } else {",
      "401:     }",
      "402:    } else {",
      "403:     flag_str = R_ASM_GET_NAME (a, 'm', vB);",
      "404:     if (flag_str) {",
      "406:     } else {",
      "408:     }",
      "410:    }",
      "",
      "[Removed Lines]",
      "374:      sprintf (str, \" {v%i}\", buf[4] & 0x0f);",
      "377:      sprintf (str, \" {v%i, v%i}\", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4);",
      "380:      sprintf (str, \" {v%i, v%i, v%i}\", buf[4] & 0x0f,",
      "384:      sprintf (str, \" {v%i, v%i, v%i, v%i}\", buf[4] & 0x0f,",
      "388:      sprintf (str, \" {v%i, v%i, v%i, v%i, v%i}\", buf[4] & 0x0f,",
      "392:      sprintf (str, \" {}\");",
      "398:      sprintf (str, \", %s ; 0x%x\", flag_str, vB);",
      "400:      sprintf (str, \", class+%i\", vB);",
      "405:      sprintf (str, \", %s ; 0x%x\", flag_str, vB);",
      "407:      sprintf (str, \", method+%i\", vB);",
      "",
      "[Added Lines]",
      "374:      snprintf (str, sizeof (str), \" {v%i}\", buf[4] & 0x0f);",
      "377:      snprintf (str, sizeof (str), \" {v%i, v%i}\", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4);",
      "380:      snprintf (str, sizeof (str), \" {v%i, v%i, v%i}\", buf[4] & 0x0f,",
      "384:      snprintf (str, sizeof (str), \" {v%i, v%i, v%i, v%i}\", buf[4] & 0x0f,",
      "388:      snprintf (str, sizeof (str), \" {v%i, v%i, v%i, v%i, v%i}\", buf[4] & 0x0f,",
      "392:      snprintf (str, sizeof (str), \" {}\");",
      "398:      snprintf (str, sizeof (str), \", %s ; 0x%x\", flag_str, vB);",
      "400:      snprintf (str, sizeof (str), \", class+%i\", vB);",
      "405:      snprintf (str, sizeof (str), \", %s ; 0x%x\", flag_str, vB);",
      "407:      snprintf (str, sizeof (str), \", method+%i\", vB);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a211c48bd57cb46706a20e5703b6e263295fa5f3",
      "candidate_info": {
        "commit_hash": "a211c48bd57cb46706a20e5703b6e263295fa5f3",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/a211c48bd57cb46706a20e5703b6e263295fa5f3",
        "files": [
          "libr/asm/p/asm_dalvik.c"
        ],
        "message": "Update some indentation in asm.dalvik",
        "before_after_code_files": [
          "libr/asm/p/asm_dalvik.c||libr/asm/p/asm_dalvik.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/asm/p/asm_dalvik.c||libr/asm/p/asm_dalvik.c"
          ],
          "candidate": [
            "libr/asm/p/asm_dalvik.c||libr/asm/p/asm_dalvik.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/asm/p/asm_dalvik.c||libr/asm/p/asm_dalvik.c": [
          "File: libr/asm/p/asm_dalvik.c -> libr/asm/p/asm_dalvik.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include <dalvik/opcode.h>",
          "12: static int dalvik_disassemble (RAsm *a, RAsmOp *op, const ut8 *buf, int len) {",
          "15:  char str[1024], *strasm;",
          "16:  ut64 offset;",
          "20:  op->buf_asm[0] = 0;",
          "",
          "[Removed Lines]",
          "13:  int i = (int) buf[0];",
          "14:  int vA, vB, vC;",
          "17:  int size = dalvik_opcodes[i].len;",
          "18:  int payload = 0;",
          "",
          "[Added Lines]",
          "13:  int vA, vB, vC, payload = 0, i = (int) buf[0];",
          "14:  int size = dalvik_opcodes[i].len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27:    {",
          "28:     unsigned short array_size = buf[2]|(buf[3]<<8);",
          "29:     int first_key = buf[4]|(buf[5]<<8)|(buf[6]<<16)|(buf[7]<<24);",
          "31:     sprintf (op->buf_asm, \"packed-switch-payload %d, %d\",",
          "32:      array_size, first_key);",
          "33:     size = 8;",
          "35:     len = 0;",
          "36:    }",
          "37:    break;",
          "",
          "[Removed Lines]",
          "34:     payload = 2 * (array_size*2);",
          "",
          "[Added Lines]",
          "31:     payload = 2 * (array_size * 2);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "237:    vA = (int) (buf[1] & 0xf0)>>4;",
          "238:    vB = (buf[3]<<8) | buf[2];",
          "239:    switch (vA) {",
          "256:    }",
          "257:    strasm = r_str_concat (strasm, str);",
          "258:    sprintf (str, \", [%04x]\", vB);",
          "259:    strasm = r_str_concat (strasm, str);",
          "260:    break;",
          "262:    vA = (int) buf[1];",
          "264:    if (buf[0] == 0x1a) {",
          "265:     offset = R_ASM_GET_OFFSET(a, 's', vB);",
          "267:      sprintf (str, \" v%i, string+%i\", vA, vB);",
          "269:      sprintf (str, \" v%i, 0x%\"PFMT64x, vA, offset);",
          "270:    } else if (buf[0] == 0x1c || buf[0] == 0x1f || buf[0] == 0x22) {",
          "271:     offset = R_ASM_GET_OFFSET(a, 'c', vB);",
          "273:      sprintf (str, \" v%i, class+%i\", vA, vB);",
          "275:      sprintf (str, \" v%i, 0x%\"PFMT64x, vA, offset);",
          "276:    } else {",
          "277:     offset = R_ASM_GET_OFFSET(a, 'f', vB);",
          "279:      sprintf (str, \" v%i, field+%i\", vA, vB);",
          "281:      sprintf (str, \" v%i, 0x%\"PFMT64x, vA, offset);",
          "282:    }",
          "283:    strasm = r_str_concat (strasm, str);",
          "284:    break;",
          "",
          "[Removed Lines]",
          "240:     case 1:",
          "241:      sprintf (str, \" {v%i}\", buf[4] & 0x0f);",
          "242:      break;",
          "243:     case 2:",
          "244:      sprintf (str, \" {v%i, v%i}\", buf[4]&0x0f, (buf[4]&0xf0)>>4);",
          "245:      break;",
          "246:     case 3:",
          "247:      sprintf (str, \" {v%i, v%i, v%i}\", buf[4]&0x0f,",
          "248:        (buf[4]&0xf0)>>4, buf[5]&0x0f);",
          "249:      break;",
          "250:     case 4:",
          "251:      sprintf (str, \" {v%i, v%i, v%i, v%i}\", buf[4]&0x0f,",
          "252:        (buf[4]&0xf0)>>4, buf[5]&0x0f, (buf[5]&0xf0)>>4);",
          "253:      break;",
          "254:     default:",
          "255:      sprintf (str, \" {}\");",
          "261:   case fmtopvAAtBBBB:",
          "263:    vB = (buf[3]<<8) | buf[2];",
          "266:     if (offset == -1)",
          "268:     else",
          "272:     if (offset == -1)",
          "274:     else",
          "278:     if (offset == -1)",
          "280:     else",
          "",
          "[Added Lines]",
          "237:    case 1:",
          "238:     sprintf (str, \" {v%i}\", buf[4] & 0x0f);",
          "239:     break;",
          "240:    case 2:",
          "241:     sprintf (str, \" {v%i, v%i}\", buf[4]&0x0f, (buf[4]&0xf0)>>4);",
          "242:     break;",
          "243:    case 3:",
          "244:     sprintf (str, \" {v%i, v%i, v%i}\", buf[4]&0x0f,",
          "245:       (buf[4]&0xf0)>>4, buf[5]&0x0f);",
          "246:     break;",
          "247:    case 4:",
          "248:     sprintf (str, \" {v%i, v%i, v%i, v%i}\", buf[4]&0x0f,",
          "249:       (buf[4]&0xf0)>>4, buf[5]&0x0f, (buf[5]&0xf0)>>4);",
          "250:     break;",
          "251:    default:",
          "252:     sprintf (str, \" {}\");",
          "253:     break;",
          "259:   case fmtopvAAtBBBB: // \"sput-*\"",
          "261:    vB = (buf[3] << 8) | buf[2];",
          "264:     if (offset == -1) {",
          "266:     } else {",
          "268:     }",
          "271:     if (offset == -1) {",
          "273:     } else {",
          "275:     }",
          "278:     if (offset == -1) {",
          "280:     } else {",
          "282:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "287:    vB = (buf[1] & 0xf0)>>4;",
          "288:    vC = (buf[3]<<8) | buf[2];",
          "289:    offset = R_ASM_GET_OFFSET(a, 'o', vC);",
          "291:     sprintf (str, \" v%i, v%i, [obj+%04x]\", vA, vB, vC);",
          "293:     sprintf (str, \" v%i, v%i, [0x%\"PFMT64x\"]\", vA, vB, offset);",
          "294:    strasm = r_str_concat (strasm, str);",
          "295:    break;",
          "296:   case fmtopAAtBBBB:",
          "297:    vA = (int) buf[1];",
          "299:    offset = R_ASM_GET_OFFSET(a, 't', vB);",
          "301:     sprintf (str, \" v%i, thing+%i\", vA, vB);",
          "303:     sprintf (str, \" v%i, 0x%\"PFMT64x, vA, offset);",
          "304:    strasm = r_str_concat (strasm, str);",
          "305:    break;",
          "306:   case fmtopvAvBtCCCC:",
          "",
          "[Removed Lines]",
          "290:    if (offset == -1)",
          "292:    else",
          "298:    vB = (buf[3]<<8) | buf[2];",
          "300:    if (offset == -1)",
          "302:    else",
          "",
          "[Added Lines]",
          "291:    if (offset == -1) {",
          "293:    } else {",
          "295:    }",
          "300:    vB = (buf[3] << 8) | buf[2];",
          "302:    if (offset == -1) {",
          "304:    } else {",
          "306:    }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "425: static int dalvik_assemble(RAsm *a, RAsmOp *op, const char *buf) {",
          "426:  int i;",
          "431:   if (!strcmp (dalvik_opcodes[i].name, buf)) {",
          "432:    r_write_ble32 (op->buf, i, a->big_endian);",
          "433:    op->size = dalvik_opcodes[i].len;",
          "434:    return op->size;",
          "435:   }",
          "436:  return 0;",
          "437: }",
          "",
          "[Removed Lines]",
          "427:  char *p = strchr (buf,' ');",
          "428:  if (p) *p = 0;",
          "430:  for (i=0; i<256; i++)",
          "",
          "[Added Lines]",
          "430:  char *p = strchr (buf, ' ');",
          "431:  if (p) {",
          "433:  }",
          "435:  for (i = 0; i < 256; i++) {",
          "441:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e1889b31a18fe9c844b49680de38e2e62806a506",
      "candidate_info": {
        "commit_hash": "e1889b31a18fe9c844b49680de38e2e62806a506",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/e1889b31a18fe9c844b49680de38e2e62806a506",
        "files": [
          "libr/asm/p/asm_dalvik.c"
        ],
        "message": "Fix some BR test from asm.dalvik",
        "before_after_code_files": [
          "libr/asm/p/asm_dalvik.c||libr/asm/p/asm_dalvik.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/asm/p/asm_dalvik.c||libr/asm/p/asm_dalvik.c"
          ],
          "candidate": [
            "libr/asm/p/asm_dalvik.c||libr/asm/p/asm_dalvik.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/asm/p/asm_dalvik.c||libr/asm/p/asm_dalvik.c": [
          "File: libr/asm/p/asm_dalvik.c -> libr/asm/p/asm_dalvik.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:    break;",
          "105:   case fmtopvAAcBBBB:",
          "106:    vA = (int) buf[1];",
          "110:    break;",
          "111:   case fmtopvAAcBBBBBBBB:",
          "112:    vA = (int) buf[1];",
          "114:    vB = buf[2]|(buf[3]<<8)|(buf[4]<<16)|(buf[5]<<24);",
          "119:    }",
          "120:    strasm = r_str_concat (strasm, str);",
          "121:    break;",
          "122:   case fmtopvAAcBBBB0000:",
          "123:    vA = (int) buf[1];",
          "128:    strasm = r_str_concat (strasm, str);",
          "129:    break;",
          "130:   case fmtopvAAcBBBBBBBBBBBBBBBB:",
          "131:    vA = (int) buf[1];",
          "137:    strasm = r_str_concat (strasm, str);",
          "138:    break;",
          "139:   case fmtopvAAvBBvCC:",
          "",
          "[Removed Lines]",
          "107:    short sB = (buf[3]<<8) | buf[2];",
          "108:    sprintf (str, \" v%i, %#04hx\", vA, sB);",
          "109:    strasm = r_str_concat (strasm, str);",
          "115:    {",
          "116:     float f;",
          "117:     memcpy (&f, &vB, sizeof (float));",
          "118:     snprintf (str, sizeof (str), \" v%i, 0x%08x ; %ff\", vA, vB, f);",
          "124:    vB = 0|(buf[3]<<16)|(buf[2]<<24);",
          "125:    sprintf (str, \" v%i, %#08x\", vA, vB);",
          "126:    if (buf[0] == 19)",
          "127:     strcat (str, \"00000000\"); // const-wide/high16",
          "132:    long long int lB = (long long int)buf[9]|((long long int)buf[8]<<8)|",
          "133:     ((long long int)buf[7]<<16)|((long long int)buf[6]<<24)|",
          "134:     ((long long int)buf[5]<<32)|((long long int)buf[4]<<40)|",
          "135:     ((long long int)buf[3]<<48)|((long long int)buf[2]<<56);",
          "136:    sprintf (str, \" v%i, 0x%\"PFMT64x, vA, lB);",
          "",
          "[Added Lines]",
          "107:    {",
          "108:     short sB = (buf[3]<<8) | buf[2];",
          "109:     sprintf (str, \" v%i, %#04hx\", vA, sB);",
          "110:     strasm = r_str_concat (strasm, str);",
          "111:    }",
          "116:    if (buf[0] == 0x17) { //const-wide/32",
          "117:     snprintf (str, sizeof (str), \" v%i:v%i, 0x%08x\", vA, vA + 1, vB);",
          "118:    } else { //const",
          "119:     snprintf (str, sizeof (str), \" v%i, 0x%08x\", vA, vB);",
          "126:    vB = 0|(buf[2]<<16)|(buf[3]<<24);",
          "127:    if (buf[0] == 0x19) { // const-wide/high16",
          "128:     snprintf (str, sizeof (str), \" v%i:v%i, 0x%08x\", vA, vA + 1, vB);",
          "129:    } else {",
          "130:     snprintf (str, sizeof (str), \" v%i, 0x%08x\", vA, vB);",
          "131:    }",
          "136:    long long int lB = (long long int)buf[2]|((long long int)buf[3]<<8)|",
          "137:     ((long long int)buf[4]<<16)|((long long int)buf[5]<<24)|",
          "138:     ((long long int)buf[6]<<32)|((long long int)buf[7]<<40)|",
          "139:     ((long long int)buf[8]<<48)|((long long int)buf[9]<<56);",
          "140:    sprintf (str, \" v%i:v%i, 0x%\"PFMT64x, vA, vA + 1, lB);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "186:    vB = (buf[1] & 0xf0)>>4;",
          "187:    vC = (int) (buf[3] <<8 | buf[2]);",
          "190:     vA, vB, a->pc + (vC*2));",
          "191:    strasm = r_str_concat (strasm, str);",
          "192:    break;",
          "",
          "[Removed Lines]",
          "189:    snprintf (str, sizeof (str),\" v%i, v%i, 0x%\"PFMT64x,",
          "",
          "[Added Lines]",
          "193:    snprintf (str, sizeof (str),\" v%i, v%i, 0x%08\"PFMT64x,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "383:      sprintf (str, \" {v%i, v%i, v%i, v%i}\", buf[4]&0x0f,",
          "384:        (buf[4]&0xf0)>>4, buf[5]&0x0f, (buf[5]&0xf0)>>4);",
          "385:      break;",
          "386:     default:",
          "387:      sprintf (str, \" {}\");",
          "388:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "390:     case 5:",
          "391:      sprintf (str, \" {v%i, v%i, v%i, v%i, v%i}\", buf[4]&0x0f,",
          "392:        (buf[4]&0xf0)>>4, buf[5]&0x0f, (buf[5]&0xf0)>>4, buf[1]&0x0f); // TOODO: recheck this",
          "393:      break;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cc01682132b9dabe32ae196388398c276086f6e8",
      "candidate_info": {
        "commit_hash": "cc01682132b9dabe32ae196388398c276086f6e8",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/cc01682132b9dabe32ae196388398c276086f6e8",
        "files": [
          "libr/asm/p/asm_dalvik.c",
          "libr/bin/format/dex/dex.h",
          "libr/bin/p/bin_dex.c"
        ],
        "message": "Some playground with DEX",
        "before_after_code_files": [
          "libr/asm/p/asm_dalvik.c||libr/asm/p/asm_dalvik.c",
          "libr/bin/format/dex/dex.h||libr/bin/format/dex/dex.h",
          "libr/bin/p/bin_dex.c||libr/bin/p/bin_dex.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/asm/p/asm_dalvik.c||libr/asm/p/asm_dalvik.c"
          ],
          "candidate": [
            "libr/asm/p/asm_dalvik.c||libr/asm/p/asm_dalvik.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/asm/p/asm_dalvik.c||libr/asm/p/asm_dalvik.c": [
          "File: libr/asm/p/asm_dalvik.c -> libr/asm/p/asm_dalvik.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:    vB = (buf[3]<<8) | buf[2];",
          "206:    switch (vA) {",
          "223:    }",
          "224:    strasm = r_str_concat (strasm, str);",
          "225:    sprintf (str, \", [%04x]\", vB);",
          "",
          "[Removed Lines]",
          "207:     case 1:",
          "208:      sprintf (str, \" {v%i}\", buf[4] & 0x0f);",
          "209:      break;",
          "210:     case 2:",
          "211:      sprintf (str, \" {v%i, v%i}\", buf[4]&0x0f, (buf[4]&0xf0)>>4);",
          "212:      break;",
          "213:     case 3:",
          "214:      sprintf (str, \" {v%i, v%i, v%i}\", buf[4]&0x0f,",
          "215:        (buf[4]&0xf0)>>4, buf[5]&0x0f);",
          "216:      break;",
          "217:     case 4:",
          "218:      sprintf (str, \" {v%i, v%i, v%i, v%i}\", buf[4]&0x0f,",
          "219:        (buf[4]&0xf0)>>4, buf[5]&0x0f, (buf[5]&0xf0)>>4);",
          "220:      break;",
          "221:     default:",
          "222:      sprintf (str, \" {}\");",
          "",
          "[Added Lines]",
          "207:    case 1:",
          "208:     sprintf (str, \" {v%i}\", buf[4] & 0x0f);",
          "209:     break;",
          "210:    case 2:",
          "211:     sprintf (str, \" {v%i, v%i}\", buf[4]&0x0f, (buf[4]&0xf0)>>4);",
          "212:     break;",
          "213:    case 3:",
          "214:     sprintf (str, \" {v%i, v%i, v%i}\", buf[4]&0x0f,",
          "215:       (buf[4]&0xf0)>>4, buf[5]&0x0f);",
          "216:     break;",
          "217:    case 4:",
          "218:     sprintf (str, \" {v%i, v%i, v%i, v%i}\", buf[4]&0x0f,",
          "219:       (buf[4]&0xf0)>>4, buf[5]&0x0f, (buf[5]&0xf0)>>4);",
          "220:     break;",
          "221:    default:",
          "222:     sprintf (str, \" {}\");",
          "",
          "---------------"
        ],
        "libr/bin/format/dex/dex.h||libr/bin/format/dex/dex.h": [
          "File: libr/bin/format/dex/dex.h -> libr/bin/format/dex/dex.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "79: typedef struct r_bin_dex_obj_t {",
          "80:  int size;",
          "81:  const char *file;",
          "83:  struct dex_header_t header;",
          "84:  ut32 *strings;",
          "85:  struct dex_class_t *classes;",
          "",
          "[Removed Lines]",
          "82:  struct r_buf_t *b;",
          "",
          "[Added Lines]",
          "82:  RBuffer *b;",
          "",
          "---------------"
        ],
        "libr/bin/p/bin_dex.c||libr/bin/p/bin_dex.c": [
          "File: libr/bin/p/bin_dex.c -> libr/bin/p/bin_dex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "244: static char *get_string (RBinDexObj *bin, int cid, int idx) {",
          "245:  char *c_name, *m_name, *res;",
          "247:   return NULL;",
          "248:  }",
          "250:   return NULL;",
          "251:  }",
          "252:  c_name = getstr (bin, cid);",
          "",
          "[Removed Lines]",
          "246:  if (idx<0 || idx>=bin->header.strings_size) {",
          "249:  if (cid<0 || cid>=bin->header.strings_size) {",
          "",
          "[Added Lines]",
          "246:  if (idx < 0 || idx >= bin->header.strings_size) {",
          "249:  if (cid < 0 || cid >= bin->header.strings_size) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "257:   if (c_name && m_name) {",
          "258:    res = r_str_newf (\"method.%s\", m_name);",
          "259:   } else {",
          "261:     res = r_str_newf (\"unk.%s\", c_name);",
          "262:    } else {",
          "263:     res = r_str_newf (\"UNKNOWN\");",
          "",
          "[Removed Lines]",
          "260:    if (m_name) {",
          "",
          "[Added Lines]",
          "260:    if (c_name && m_name) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "288: static char *dex_class_name_byid (RBinDexObj *bin, int cid) {",
          "289:  int tid;",
          "291:   return NULL;",
          "294:   return NULL;",
          "295:  tid = bin->types [cid].descriptor_id;",
          "297:  return get_string (bin, cid, tid);",
          "",
          "[Removed Lines]",
          "290:  if (!bin || !bin->types)",
          "293:  if (cid<0 || cid >= bin->header.types_size)",
          "",
          "[Added Lines]",
          "290:  if (!bin || !bin->types) {",
          "292:  }",
          "294:  if (cid < 0 || cid >= bin->header.types_size) {",
          "296:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "300: static char *getClassName(const char *name) {",
          "301:  const char *p;",
          "303:   return NULL;",
          "304:  p = strstr (name, \".L\");",
          "305:  if (p) {",
          "307:   q = strchr (r, ';');",
          "308:   if (q) *q = 0;",
          "309:   return r;",
          "",
          "[Removed Lines]",
          "302:  if (!name)",
          "306:   char *q, *r = strdup (p+2);",
          "",
          "[Added Lines]",
          "304:  if (!name) {",
          "306:  }",
          "309:   char *q, *r = strdup (p + 2);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "314: static char *dex_class_name (RBinDexObj *bin, RBinDexClass *c) {",
          "315:  int cid, tid;",
          "317:   return NULL;",
          "318:  cid = c->class_id;",
          "321:   return NULL;",
          "322:  tid = bin->types [cid].descriptor_id;",
          "324:  return get_string (bin, cid, tid);",
          "325: }",
          "327: static char *dex_class_super_name (RBinDexObj *bin, RBinDexClass *c) {",
          "328:  int cid, tid;",
          "330:   return NULL;",
          "331:  cid = c->super_class;",
          "333:   return NULL;",
          "334:  tid = bin->types [cid].descriptor_id;",
          "336:  return get_string (bin, cid, tid);",
          "",
          "[Removed Lines]",
          "316:  if (!bin || !c || !bin->types)",
          "320:  if (cid<0 || cid >= bin->header.types_size)",
          "329:  if (!bin || !c || !bin->types)",
          "332:  if (cid<0 || cid >= bin->header.types_size)",
          "",
          "[Added Lines]",
          "319:  if (!bin || !c || !bin->types) {",
          "321:  }",
          "324:  if (cid < 0 || cid >= bin->header.types_size) {",
          "326:  }",
          "332: static char *dex_type_name (RBinDexObj *bin, int id) {",
          "333:  int cid, tid;",
          "334:  if (!bin || !bin->types) {",
          "335:   return NULL;",
          "336:  }",
          "337:  cid = id;",
          "338:  if (cid < 0 || cid >= bin->header.types_size) {",
          "339:   return NULL;",
          "340:  }",
          "341:  tid = bin->types [cid].descriptor_id;",
          "343:  return get_string (bin, cid, tid);// cid, tid);",
          "344: }",
          "348:  if (!bin || !c || !bin->types) {",
          "350:  }",
          "352:  if (cid<0 || cid >= bin->header.types_size) {",
          "354:  }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "361:  p_end = p + (binfile->buf->length - c->class_data_offset);",
          "370:  dprintf (\"  static fields: %u\\n\", (ut32)SF);",
          "372:  for (i = 0; i < SF; i++) {",
          "376:   dprintf (\"    field_idx: %u\\n\", (ut32)FI);",
          "379:   dprintf (\"    field access_flags: 0x%x\\n\", (ut32)FA);",
          "",
          "[Removed Lines]",
          "364:  p = r_uleb128 (p, p_end-p, &SF);",
          "365:  p = r_uleb128 (p, p_end-p, &IF);",
          "366:  p = r_uleb128 (p, p_end-p, &DM);",
          "367:  p = r_uleb128 (p, p_end-p, &VM);",
          "373:   ut64 FI, FA;",
          "374:   p = r_uleb128 (p, p_end-p, &FI);",
          "375:   p = r_uleb128 (p, p_end-p, &FA);",
          "",
          "[Added Lines]",
          "385:  p = r_uleb128 (p, p_end - p, &SF);",
          "386:  p = r_uleb128 (p, p_end - p, &IF);",
          "387:  p = r_uleb128 (p, p_end - p, &DM);",
          "388:  p = r_uleb128 (p, p_end - p, &VM);",
          "394:   ut64 FI, FA, FN;",
          "395: #if 0",
          "396:   p = r_uleb128 (p, p_end - p, &FI);",
          "397:   p = r_uleb128 (p, p_end - p, &FA);",
          "399:   char *field_name = get_string (bin, c, (ut32)FA); //bin->methods[i].class_id);",
          "400: #endif",
          "402:   p = r_uleb128 (p, p_end - p, &FI); // name",
          "403:   p = r_uleb128 (p, p_end - p, &FA); // access",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "382:  dprintf (\"  instance fields: %u\\n\", (ut32)IF);",
          "383:  for (i = 0; i < IF; i++) {",
          "387:   dprintf (\"    field_idx: %u,\\n\", (ut32)FI);",
          "388:   dprintf (\"    field access_flags: %u,\\n\", (ut32)FA);",
          "389:  }",
          "391:  dprintf (\"  direct methods: %u\\n\", (ut32)DM);",
          "398:  ut64 omi = 0;",
          "399:  for (i = 0; i < DM; i++) {",
          "400:   char *method_name, *flag_name;",
          "",
          "[Removed Lines]",
          "384:   ut64 FI, FA;",
          "385:   p = r_uleb128 (p, p_end-p, &FI);",
          "386:   p = r_uleb128 (p, p_end-p, &FA);",
          "392: #if 0",
          "394:  if (DM>=0xffff) {",
          "395:   DM = 0xFFFF;",
          "396:  }",
          "397: #endif",
          "",
          "[Added Lines]",
          "417:   ut64 FI, FA, FN;",
          "419:   p = r_uleb128 (p, p_end - p, &FI); // type",
          "420:   p = r_uleb128 (p, p_end - p, &FA); // access",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "406: #if 0",
          "407:   index into the method_ids list for the identity of this method (includes the name and descriptor), represented as a difference from the index of previous element in the list. The index of the first element in a list is represented directly.",
          "408: #endif",
          "412:   if (MI<bin->header.method_size) methods[MI] = 1;",
          "416:   method_name = dex_method_name (bin, MI);",
          "417:   dprintf (\"METHOD NAME %u\\n\", (ut32)MI);",
          "",
          "[Removed Lines]",
          "409:   p = r_uleb128 (p, p_end-p, &MA);",
          "410:   p = r_uleb128 (p, p_end-p, &MC);",
          "413:   if (MC > 0 && bin->code_from > MC) bin->code_from = MC;",
          "414:   if (MC > 0 && bin->code_to < MC) bin->code_to = MC;",
          "",
          "[Added Lines]",
          "440:   p = r_uleb128 (p, p_end - p, &MA);",
          "441:   p = r_uleb128 (p, p_end - p, &MC);",
          "444:   if (MC > 0 && bin->code_from > MC) {",
          "445:    bin->code_from = MC;",
          "446:   }",
          "447:   if (MC > 0 && bin->code_to < MC) {",
          "448:    bin->code_to = MC;",
          "449:   }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "508:  int *methods = NULL;",
          "512:   return false;",
          "513:  bin->code_from = UT64_MAX;",
          "514:  bin->code_to = 0;",
          "515:  bin->methods_list = r_list_new ();",
          "",
          "[Removed Lines]",
          "511:  if (!bin || bin->methods_list)",
          "",
          "[Added Lines]",
          "546:  if (!bin || bin->methods_list) {",
          "548:  }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "566:   dprintf (\"imports: \\n\");",
          "567:   for (i = 0; i < bin->header.method_size; i++) {",
          "573:     struct dex_class_t *c = &bin->classes[i];",
          "574:     char *class_name = dex_class_name (bin, c);",
          "579:     char *method_name = dex_method_name (bin, i);",
          "604:     free (method_name);",
          "605:     free (class_name);",
          "606:    }",
          "607:   }",
          "608:   free (methods);",
          "609:  }",
          "",
          "[Removed Lines]",
          "569:    if (!methods[i]) {",
          "570:     if (i >= bin->header.class_size) {",
          "571:      continue;",
          "572:     }",
          "575:     if (class_name) {",
          "576:      free (class_name);",
          "577:      continue;",
          "578:     }",
          "580:     dprintf (\"import %d (%s  %s)\\n\", i, class_name, method_name);",
          "581:     if (method_name && *method_name) {",
          "582:      RBinSymbol *sym = R_NEW0 (RBinSymbol);",
          "583:      sym->name = r_str_newf (\"imp.%s\", method_name);",
          "584:      sym->vaddr = sym->paddr = i; // ordinal",
          "585:      sym->type = r_str_const (\"IMPORT\");",
          "586:      r_list_append (bin->methods_list, sym);",
          "588:      RBinImport *imp = R_NEW0 (RBinImport);",
          "589: #if DEADCODE",
          "590:      if (class_name) {",
          "591:       imp->name = r_str_newf (\"%s.%s\", class_name, method_name);",
          "592:       eprintf (\"ERROR\\n\");",
          "593:      }",
          "594: #endif",
          "595:      imp->name = r_str_newf (\"imp.%s\", method_name);",
          "597:      r_str_replace_char (imp->name, ';', '_');",
          "598:      imp->type = r_str_const (\"FUNC\");",
          "599:      imp->ordinal = i;",
          "600:      imp->bind = \"NONE\";",
          "602:      r_list_append (bin->imports_list, imp);",
          "603:     }",
          "",
          "[Added Lines]",
          "605:    if (methods[i]) {",
          "607: #if 0",
          "611:     free (class_name);",
          "613: #endif",
          "614:     continue;",
          "615:    }",
          "616:    if (i >= bin->header.class_size) {",
          "617:     continue;",
          "618:    }",
          "619:    struct dex_class_t *c = &bin->classes[i];",
          "620:    char *class_name = dex_class_name (bin, c);",
          "621:    if (class_name) {",
          "623:     continue;",
          "625:    char *method_name = dex_method_name (bin, i);",
          "626:    eprintf (\"import %d (%s  %s)\\n\", i, class_name, method_name);",
          "627:    if (method_name && *method_name) {",
          "628:     RBinSymbol *sym = R_NEW0 (RBinSymbol);",
          "629:     sym->name = r_str_newf (\"imp.%s\", method_name);",
          "630:     sym->vaddr = sym->paddr = i; // ordinal",
          "631:     sym->type = r_str_const (\"IMPORT\");",
          "632:     r_list_append (bin->methods_list, sym);",
          "634:     RBinImport *imp = R_NEW0 (RBinImport);",
          "635: #if DEADCODE",
          "636:     if (class_name) {",
          "637:      imp->name = r_str_newf (\"%s.%s\", class_name, method_name);",
          "638:      eprintf (\"ERROR\\n\");",
          "639:     }",
          "640: #endif",
          "641:     imp->name = r_str_newf (\"imp.%s\", method_name);",
          "643:     r_str_replace_char (imp->name, ';', '_');",
          "644:     imp->type = r_str_const (\"FUNC\");",
          "645:     imp->ordinal = i;",
          "646:     imp->bind = \"NONE\";",
          "648:     r_list_append (bin->imports_list, imp);",
          "649:    }",
          "650:    free (method_name);",
          "651:    free (class_name);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "841:   }",
          "842:   break;",
          "843:  case 'f': // fields",
          "845:    return dex->header.fields_offset +",
          "846:     (sizeof (struct dex_field_t)*idx);",
          "847:   break;",
          "848:  case 'o': // objects",
          "849:   break;",
          "",
          "[Removed Lines]",
          "844:   if (dex->header.fields_size > idx)",
          "",
          "[Added Lines]",
          "889:   if (dex->header.fields_size > idx) {",
          "892:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7c8292b9fb6cee988b7e6fee30b8dea8bca6a6b7",
      "candidate_info": {
        "commit_hash": "7c8292b9fb6cee988b7e6fee30b8dea8bca6a6b7",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/7c8292b9fb6cee988b7e6fee30b8dea8bca6a6b7",
        "files": [
          "libr/asm/p/asm_dalvik.c",
          "libr/include/r_asm.h"
        ],
        "message": "Fix warnings and coding style",
        "before_after_code_files": [
          "libr/asm/p/asm_dalvik.c||libr/asm/p/asm_dalvik.c",
          "libr/include/r_asm.h||libr/include/r_asm.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/asm/p/asm_dalvik.c||libr/asm/p/asm_dalvik.c"
          ],
          "candidate": [
            "libr/asm/p/asm_dalvik.c||libr/asm/p/asm_dalvik.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/asm/p/asm_dalvik.c||libr/asm/p/asm_dalvik.c": [
          "File: libr/asm/p/asm_dalvik.c -> libr/asm/p/asm_dalvik.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:  int size = dalvik_opcodes[i].len;",
          "15:  char str[1024], *strasm;",
          "16:  ut64 offset;",
          "19:  op->buf_asm[0] = 0;",
          "",
          "[Removed Lines]",
          "17:  char *flag_str;",
          "",
          "[Added Lines]",
          "17:  const char *flag_str;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:    {",
          "31:     size = 8;",
          "32:     payload = 2 * (array_size * 2);",
          "33:     len = 0;",
          "",
          "[Removed Lines]",
          "27:     unsigned short array_size = buf[2]|(buf[3]<<8);",
          "28:     int first_key = buf[4]|(buf[5]<<8)|(buf[6]<<16)|(buf[7]<<24);",
          "29:     sprintf (op->buf_asm, \"packed-switch-payload %d, %d\",",
          "30:      array_size, first_key);",
          "",
          "[Added Lines]",
          "27:     unsigned short array_size = buf[2] | (buf[3] << 8);",
          "28:     int first_key = buf[4] | (buf[5] << 8) | (buf[6] << 16) | (buf[7] << 24);",
          "29:     sprintf (op->buf_asm, \"packed-switch-payload %d, %d\", array_size, first_key);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "40:    {",
          "44:     size = 4;",
          "45:     payload = 2 * (array_size*4);",
          "46:     len = 0;",
          "",
          "[Removed Lines]",
          "41:     unsigned short array_size = buf[2]|(buf[3]<<8);",
          "42:     sprintf (op->buf_asm, \"sparse-switch-payload %d\",",
          "43:      array_size);",
          "",
          "[Added Lines]",
          "40:     unsigned short array_size = buf[2] | (buf[3] << 8);",
          "41:     sprintf (op->buf_asm, \"sparse-switch-payload %d\", array_size);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "53:    if (len > 7) {",
          "54:     unsigned short elem_width = buf[2] | (buf[3] << 8);",
          "56:     snprintf (op->buf_asm, sizeof (op->buf_asm),",
          "57:      \"fill-array-data-payload %d, %d\",",
          "58:      elem_width, array_size);",
          "",
          "[Removed Lines]",
          "55:     unsigned int array_size = buf[4]|(buf[5]<<8)|(buf[6]<<16)|(buf[7]<<24);",
          "",
          "[Added Lines]",
          "53:     unsigned int array_size = buf[4] | (buf[5] << 8) | (buf[6] << 16) | (buf[7] << 24);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "75:   case fmtop: break;",
          "76:   case fmtopvAvB:",
          "77:    vA = buf[1] & 0x0f;",
          "79:    sprintf (str, \" v%i, v%i\", vA, vB);",
          "80:    strasm = r_str_concat (strasm, str);",
          "81:    break;",
          "82:   case fmtopvAAvBBBB:",
          "83:    vA = (int) buf[1];",
          "85:    sprintf (str, \" v%i, v%i\", vA, vB);",
          "86:    strasm = r_str_concat (strasm, str);",
          "87:    break;",
          "88:   case fmtopvAAAAvBBBB: // buf[1] seems useless :/",
          "91:    sprintf (str, \" v%i, v%i\", vA, vB);",
          "92:    strasm = r_str_concat (strasm, str);",
          "93:    break;",
          "",
          "[Removed Lines]",
          "78:    vB = (buf[1] & 0xf0)>>4;",
          "84:    vB = (buf[3]<<8) | buf[2];",
          "89:    vA = (buf[3]<<8) | buf[2];",
          "90:    vB = (buf[5]<<8) | buf[4];",
          "",
          "[Added Lines]",
          "76:    vB = (buf[1] & 0xf0) >> 4;",
          "82:    vB = (buf[3] << 8) | buf[2];",
          "87:    vA = (buf[3] << 8) | buf[2];",
          "88:    vB = (buf[5] << 8) | buf[4];",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "98:    break;",
          "99:   case fmtopvAcB:",
          "100:    vA = buf[1] & 0x0f;",
          "102:    sprintf (str, \" v%i, %#x\", vA, vB);",
          "103:    strasm = r_str_concat (strasm, str);",
          "104:    break;",
          "105:   case fmtopvAAcBBBB:",
          "106:    vA = (int) buf[1];",
          "107:    {",
          "109:     sprintf (str, \" v%i, %#04hx\", vA, sB);",
          "110:     strasm = r_str_concat (strasm, str);",
          "111:    }",
          "112:    break;",
          "113:   case fmtopvAAcBBBBBBBB:",
          "114:    vA = (int) buf[1];",
          "116:    if (buf[0] == 0x17) { //const-wide/32",
          "117:     snprintf (str, sizeof (str), \" v%i:v%i, 0x%08x\", vA, vA + 1, vB);",
          "118:    } else { //const",
          "",
          "[Removed Lines]",
          "101:    vB = (buf[1] & 0xf0)>>4;",
          "108:     short sB = (buf[3]<<8) | buf[2];",
          "115:    vB = buf[2]|(buf[3]<<8)|(buf[4]<<16)|(buf[5]<<24);",
          "",
          "[Added Lines]",
          "99:    vB = (buf[1] & 0xf0) >> 4;",
          "106:     short sB = (buf[3] << 8) | buf[2];",
          "113:    vB = buf[2] | (buf[3] << 8) | (buf[4] << 16) | (buf[5] << 24);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "123:   case fmtopvAAcBBBB0000:",
          "124:    vA = (int) buf[1];",
          "127:    if (buf[0] == 0x19) { // const-wide/high16",
          "128:     snprintf (str, sizeof (str), \" v%i:v%i, 0x%08x\", vA, vA + 1, vB);",
          "129:    } else {",
          "",
          "[Removed Lines]",
          "126:    vB = 0|(buf[2]<<16)|(buf[3]<<24);",
          "",
          "[Added Lines]",
          "124:    vB = 0 | (buf[2] << 16) | (buf[3] << 24);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "133:    break;",
          "134:   case fmtopvAAcBBBBBBBBBBBBBBBB:",
          "135:    vA = (int) buf[1];",
          "140:    sprintf (str, \" v%i:v%i, 0x%\"PFMT64x, vA, vA + 1, lB);",
          "141:    strasm = r_str_concat (strasm, str);",
          "142:    break;",
          "",
          "[Removed Lines]",
          "136:    long long int lB = (long long int)buf[2]|((long long int)buf[3]<<8)|",
          "137:     ((long long int)buf[4]<<16)|((long long int)buf[5]<<24)|",
          "138:     ((long long int)buf[6]<<32)|((long long int)buf[7]<<40)|",
          "139:     ((long long int)buf[8]<<48)|((long long int)buf[9]<<56);",
          "",
          "[Added Lines]",
          "134:    #define llint long long int",
          "135:    llint lB = (llint)buf[2] | ((llint)buf[3] << 8)|",
          "136:     ((llint)buf[4] << 16) | ((llint)buf[5] << 24)|",
          "137:     ((llint)buf[6] << 32) | ((llint)buf[7] << 40)|",
          "138:     ((llint)buf[8] << 48) | ((llint)buf[9] << 56);",
          "139:    #undef llint",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "156:    break;",
          "157:   case fmtopvAvBcCCCC:",
          "158:    vA = buf[1] & 0x0f;",
          "161:    sprintf (str, \" v%i, v%i, %#x\", vA, vB, vC);",
          "162:    strasm = r_str_concat (strasm, str);",
          "163:    break;",
          "164:   case fmtoppAA:",
          "165:    vA = (char) buf[1];",
          "168:    strasm = r_str_concat (strasm, str);",
          "169:    break;",
          "170:   case fmtoppAAAA:",
          "173:    strasm = r_str_concat (strasm, str);",
          "174:    break;",
          "175:   case fmtopvAApBBBB: // if-*z",
          "176:    vA = (int) buf[1];",
          "180:    strasm = r_str_concat (strasm, str);",
          "181:    break;",
          "182:   case fmtoppAAAAAAAA:",
          "185:    snprintf (str, sizeof (str), \" 0x%08\"PFMT64x, a->pc + (vA*2)); // vA : word -> byte",
          "186:    strasm = r_str_concat (strasm, str);",
          "187:    break;",
          "188:   case fmtopvAvBpCCCC: // if-*",
          "189:    vA = buf[1] & 0x0f;",
          "195:    strasm = r_str_concat (strasm, str);",
          "196:    break;",
          "197:   case fmtopvAApBBBBBBBB:",
          "198:    vA = (int) buf[1];",
          "202:    strasm = r_str_concat (strasm, str);",
          "203:    break;",
          "204:   case fmtoptinlineI:",
          "205:    vA = (int) (buf[1] & 0x0f);",
          "208:    switch (vA) {",
          "209:    case 1:",
          "210:     sprintf (str, \" {v%i}\", buf[4] & 0x0f);",
          "211:     break;",
          "212:    case 2:",
          "214:     break;",
          "215:    case 3:",
          "218:     break;",
          "219:    case 4:",
          "222:     break;",
          "223:    default:",
          "224:     sprintf (str, \" {}\");",
          "",
          "[Removed Lines]",
          "159:    vB = (buf[1] & 0xf0)>>4;",
          "160:    vC = (buf[3]<<8) | buf[2];",
          "167:    snprintf (str, sizeof (str), \" 0x%08\"PFMT64x, a->pc + (vA*2)); // vA : word -> byte",
          "171:    vA = (short) (buf[3] <<8 | buf[2]);",
          "172:    snprintf (str, sizeof (str), \" 0x%08\"PFMT64x, a->pc + (vA*2)); // vA : word -> byte",
          "177:    vB = (int) (buf[3] <<8 | buf[2]);",
          "179:    snprintf (str, sizeof (str), \" v%i, 0x%08\"PFMT64x, vA, a->pc + (vB*2));",
          "183:    vA = (int) (buf[2]|(buf[3]<<8)|(buf[4]<<16)|(buf[5]<<24));",
          "190:    vB = (buf[1] & 0xf0)>>4;",
          "191:    vC = (int) (buf[3] <<8 | buf[2]);",
          "193:    snprintf (str, sizeof (str),\" v%i, v%i, 0x%08\"PFMT64x,",
          "194:     vA, vB, a->pc + (vC*2));",
          "199:    vB = (int) (buf[2]|(buf[3]<<8)|(buf[4]<<16)|(buf[5]<<24));",
          "200:    snprintf (str, sizeof (str), \" v%i, 0x%08\"PFMT64x,",
          "201:     vA, a->pc + vB); // + (vB*2));",
          "206:    vB = (buf[3]<<8) | buf[2];",
          "213:     sprintf (str, \" {v%i, v%i}\", buf[4]&0x0f, (buf[4]&0xf0)>>4);",
          "216:     sprintf (str, \" {v%i, v%i, v%i}\", buf[4]&0x0f,",
          "217:       (buf[4]&0xf0)>>4, buf[5]&0x0f);",
          "220:     sprintf (str, \" {v%i, v%i, v%i, v%i}\", buf[4]&0x0f,",
          "221:       (buf[4]&0xf0)>>4, buf[5]&0x0f, (buf[5]&0xf0)>>4);",
          "",
          "[Added Lines]",
          "159:    vB = (buf[1] & 0xf0) >> 4;",
          "160:    vC = (buf[3] << 8) | buf[2];",
          "167:    snprintf (str, sizeof (str), \" 0x%08\"PFMT64x, a->pc + (vA * 2)); // vA : word -> byte",
          "171:    vA = (short) (buf[3] << 8 | buf[2]);",
          "172:    snprintf (str, sizeof (str), \" 0x%08\"PFMT64x, a->pc + (vA * 2)); // vA : word -> byte",
          "177:    vB = (int) (buf[3] << 8 | buf[2]);",
          "179:    snprintf (str, sizeof (str), \" v%i, 0x%08\"PFMT64x, vA, a->pc + (vB * 2));",
          "183:    vA = (int) (buf[2] | (buf[3] << 8) | (buf[4] << 16) | (buf[5] << 24));",
          "190:    vB = (buf[1] & 0xf0) >> 4;",
          "191:    vC = (int) (buf[3] << 8 | buf[2]);",
          "193:    snprintf (str, sizeof (str),\" v%i, v%i, 0x%08\"PFMT64x, vA, vB, a->pc + (vC * 2));",
          "198:    vB = (int) (buf[2] | (buf[3] << 8) | (buf[4] << 16) | (buf[5] << 24));",
          "199:    snprintf (str, sizeof (str), \" v%i, 0x%08\"PFMT64x, vA, a->pc + vB); // + (vB*2));",
          "204:    vB = (buf[3] << 8) | buf[2];",
          "211:     sprintf (str, \" {v%i, v%i}\", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4);",
          "214:     sprintf (str, \" {v%i, v%i, v%i}\", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4, buf[5] & 0x0f);",
          "217:     sprintf (str, \" {v%i, v%i, v%i, v%i}\", buf[4] & 0x0f,",
          "218:       (buf[4] & 0xf0) >> 4, buf[5] & 0x0f, (buf[5] & 0xf0) >> 4);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "230:   case fmtoptinlineIR:",
          "231:   case fmtoptinvokeVSR:",
          "232:    vA = (int) buf[1];",
          "236:    strasm = r_str_concat (strasm, str);",
          "237:    break;",
          "238:   case fmtoptinvokeVS:",
          "241:    switch (vA) {",
          "242:    case 1:",
          "243:     sprintf (str, \" {v%i}\", buf[4] & 0x0f);",
          "244:     break;",
          "245:    case 2:",
          "247:     break;",
          "248:    case 3:",
          "251:     break;",
          "252:    case 4:",
          "255:     break;",
          "256:    default:",
          "257:     sprintf (str, \" {}\");",
          "",
          "[Removed Lines]",
          "233:    vB = (buf[3]<<8) | buf[2];",
          "234:    vC = (buf[5]<<8) | buf[4];",
          "235:    sprintf (str, \" {v%i..v%i}, [%04x]\", vC, vC+vA-1, vB);",
          "239:    vA = (int) (buf[1] & 0xf0)>>4;",
          "240:    vB = (buf[3]<<8) | buf[2];",
          "246:     sprintf (str, \" {v%i, v%i}\", buf[4]&0x0f, (buf[4]&0xf0)>>4);",
          "249:     sprintf (str, \" {v%i, v%i, v%i}\", buf[4]&0x0f,",
          "250:       (buf[4]&0xf0)>>4, buf[5]&0x0f);",
          "253:     sprintf (str, \" {v%i, v%i, v%i, v%i}\", buf[4]&0x0f,",
          "254:       (buf[4]&0xf0)>>4, buf[5]&0x0f, (buf[5]&0xf0)>>4);",
          "",
          "[Added Lines]",
          "230:    vB = (buf[3] << 8) | buf[2];",
          "231:    vC = (buf[5] << 8) | buf[4];",
          "232:    sprintf (str, \" {v%i..v%i}, [%04x]\", vC, vC + vA - 1, vB);",
          "236:    vA = (int) (buf[1] & 0xf0) >> 4;",
          "237:    vB = (buf[3] << 8) | buf[2];",
          "243:     sprintf (str, \" {v%i, v%i}\", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4);",
          "246:     sprintf (str, \" {v%i, v%i, v%i}\", buf[4] & 0x0f,",
          "247:       (buf[4] & 0xf0) >> 4, buf[5] & 0x0f);",
          "250:     sprintf (str, \" {v%i, v%i, v%i, v%i}\", buf[4] & 0x0f,",
          "251:       (buf[4] & 0xf0) >> 4, buf[5] & 0x0f, (buf[5] & 0xf0) >> 4);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "290:    break;",
          "291:   case fmtoptopvAvBoCCCC:",
          "292:    vA = (buf[1] & 0x0f);",
          "294:    vC = (buf[3]<<8) | buf[2];",
          "295:    offset = R_ASM_GET_OFFSET (a, 'o', vC);",
          "296:    if (offset == -1) {",
          "",
          "[Removed Lines]",
          "293:    vB = (buf[1] & 0xf0)>>4;",
          "",
          "[Added Lines]",
          "290:    vB = (buf[1] & 0xf0) >> 4;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "313:    break;",
          "314:   case fmtopvAvBtCCCC:",
          "315:    vA = (buf[1] & 0x0f);",
          "318:    if (buf[0] == 0x20 || buf[0] == 0x23) { //instance-of & new-array",
          "319:     flag_str = R_ASM_GET_NAME (a, 'c', vC);",
          "320:     if (flag_str) {",
          "",
          "[Removed Lines]",
          "316:    vB = (buf[1] & 0xf0)>>4;",
          "317:    vC = (buf[3]<<8) | buf[2];",
          "",
          "[Added Lines]",
          "313:    vB = (buf[1] & 0xf0) >> 4;",
          "314:    vC = (buf[3] << 8) | buf[2];",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "336:    break;",
          "337:   case fmtopvAAtBBBBBBBB:",
          "338:    vA = (int) buf[1];",
          "340:    offset = R_ASM_GET_OFFSET (a, 's', vB);",
          "341:    if (offset == -1) {",
          "342:     sprintf (str, \" v%i, string+%i\", vA, vB);",
          "",
          "[Removed Lines]",
          "339:    vB = (int) (buf[5]|(buf[4]<<8)|(buf[3]<<16)|(buf[2]<<24));",
          "",
          "[Added Lines]",
          "336:    vB = (int) (buf[5] | (buf[4] << 8) | (buf[3] << 16) | (buf[2] << 24));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "348:    break;",
          "349:   case fmtopvCCCCmBBBB:",
          "350:    vA = (int) buf[1];",
          "353:    if (buf[0] == 0x25) { // filled-new-array/range",
          "354:     flag_str = R_ASM_GET_NAME (a, 'c', vB);",
          "355:     if (flag_str) {",
          "357:     }",
          "358:     else {",
          "360:     }",
          "361:    } else {",
          "362:     flag_str = R_ASM_GET_NAME (a, 'm', vB);",
          "363:     if (flag_str) {",
          "365:     }",
          "366:     else {",
          "368:     }",
          "369:    }",
          "370:    strasm = r_str_concat (strasm, str);",
          "371:    break;",
          "372:   case fmtopvXtBBBB:",
          "375:    switch (vA) {",
          "376:     case 1:",
          "377:      sprintf (str, \" {v%i}\", buf[4] & 0x0f);",
          "378:      break;",
          "379:     case 2:",
          "381:      break;",
          "382:     case 3:",
          "385:      break;",
          "386:     case 4:",
          "389:      break;",
          "390:     case 5:",
          "393:      break;",
          "394:     default:",
          "395:      sprintf (str, \" {}\");",
          "",
          "[Removed Lines]",
          "351:    vB = (buf[3]<<8) | buf[2];",
          "352:    vC = (buf[5]<<8) | buf[4];",
          "356:      sprintf (str, \" {v%i..v%i}, %s\", vC, vC+vA-1, flag_str);",
          "359:      sprintf (str, \" {v%i..v%i}, class+%i\", vC, vC+vA-1, vB);",
          "364:      sprintf (str, \" {v%i..v%i}, %s\", vC, vC+vA-1, flag_str);",
          "367:      sprintf (str, \" {v%i..v%i}, method+%i\", vC, vC+vA-1, vB);",
          "373:    vA = (int) (buf[1] & 0xf0)>>4;",
          "374:    vB = (buf[3]<<8) | buf[2];",
          "380:      sprintf (str, \" {v%i, v%i}\", buf[4]&0x0f, (buf[4]&0xf0)>>4);",
          "383:      sprintf (str, \" {v%i, v%i, v%i}\", buf[4]&0x0f,",
          "384:        (buf[4]&0xf0)>>4, buf[5]&0x0f);",
          "387:      sprintf (str, \" {v%i, v%i, v%i, v%i}\", buf[4]&0x0f,",
          "388:        (buf[4]&0xf0)>>4, buf[5]&0x0f, (buf[5]&0xf0)>>4);",
          "391:      sprintf (str, \" {v%i, v%i, v%i, v%i, v%i}\", buf[4]&0x0f,",
          "392:        (buf[4]&0xf0)>>4, buf[5]&0x0f, (buf[5]&0xf0)>>4, buf[1]&0x0f); // TOODO: recheck this",
          "",
          "[Added Lines]",
          "348:    vB = (buf[3] << 8) | buf[2];",
          "349:    vC = (buf[5] << 8) | buf[4];",
          "353:      sprintf (str, \" {v%i..v%i}, %s\", vC, vC + vA - 1, flag_str);",
          "356:      sprintf (str, \" {v%i..v%i}, class+%i\", vC, vC + vA - 1, vB);",
          "361:      sprintf (str, \" {v%i..v%i}, %s\", vC, vC + vA - 1, flag_str);",
          "364:      sprintf (str, \" {v%i..v%i}, method+%i\", vC, vC + vA - 1, vB);",
          "370:    vA = (int) (buf[1] & 0xf0) >> 4;",
          "371:    vB = (buf[3] << 8) | buf[2];",
          "377:      sprintf (str, \" {v%i, v%i}\", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4);",
          "380:      sprintf (str, \" {v%i, v%i, v%i}\", buf[4] & 0x0f,",
          "381:        (buf[4] & 0xf0) >> 4, buf[5] & 0x0f);",
          "384:      sprintf (str, \" {v%i, v%i, v%i, v%i}\", buf[4] & 0x0f,",
          "385:        (buf[4] & 0xf0) >> 4, buf[5] & 0x0f, (buf[5] & 0xf0) >> 4);",
          "388:      sprintf (str, \" {v%i, v%i, v%i, v%i, v%i}\", buf[4] & 0x0f,",
          "389:        (buf[4] & 0xf0) >> 4, buf[5] & 0x0f, (buf[5] & 0xf0) >> 4, buf[1] & 0x0f); // TOODO: recheck this",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "423:    size = 2;",
          "424:   }",
          "425:   if (strasm) {",
          "428:   } else {",
          "430:    strcpy (op->buf_asm , \"invalid\");",
          "431:   }",
          "433:   strcpy (op->buf_asm, \"invalid \");",
          "434:   op->size = len;",
          "435:   size = len;",
          "",
          "[Removed Lines]",
          "426:    strncpy (op->buf_asm, strasm, sizeof (op->buf_asm)-1);",
          "427:    op->buf_asm[sizeof (op->buf_asm)-1] = 0;",
          "432:  } else if (len>0) {",
          "",
          "[Added Lines]",
          "423:    strncpy (op->buf_asm, strasm, sizeof (op->buf_asm) - 1);",
          "424:    op->buf_asm[sizeof (op->buf_asm) - 1] = 0;",
          "429:  } else if (len > 0) {",
          "",
          "---------------"
        ],
        "libr/include/r_asm.h||libr/include/r_asm.h": [
          "File: libr/include/r_asm.h -> libr/include/r_asm.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: #define R_ASM_GET_NAME(x,y,z) \\",
          "48:  (x && x->binb.bin && x->binb.get_name)? \\",
          "51: enum {",
          "52:  R_ASM_SYNTAX_NONE = 0,",
          "",
          "[Removed Lines]",
          "49:   x->binb.get_name (x->binb.bin, y, z): -1",
          "",
          "[Added Lines]",
          "49:   x->binb.get_name (x->binb.bin, y, z): NULL",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0c8556bb22f378782b932243e11f7493e9e766b5",
      "candidate_info": {
        "commit_hash": "0c8556bb22f378782b932243e11f7493e9e766b5",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/0c8556bb22f378782b932243e11f7493e9e766b5",
        "files": [
          "libr/asm/p/asm_dalvik.c",
          "libr/bin/bin.c",
          "libr/bin/p/bin_dex.c",
          "libr/include/r_asm.h",
          "libr/include/r_bin.h"
        ],
        "message": "Fix some DEX disasm issues (#5829)",
        "before_after_code_files": [
          "libr/asm/p/asm_dalvik.c||libr/asm/p/asm_dalvik.c",
          "libr/bin/bin.c||libr/bin/bin.c",
          "libr/bin/p/bin_dex.c||libr/bin/p/bin_dex.c",
          "libr/include/r_asm.h||libr/include/r_asm.h",
          "libr/include/r_bin.h||libr/include/r_bin.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/asm/p/asm_dalvik.c||libr/asm/p/asm_dalvik.c"
          ],
          "candidate": [
            "libr/asm/p/asm_dalvik.c||libr/asm/p/asm_dalvik.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/asm/p/asm_dalvik.c||libr/asm/p/asm_dalvik.c": [
          "File: libr/asm/p/asm_dalvik.c -> libr/asm/p/asm_dalvik.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:  int size = dalvik_opcodes[i].len;",
          "15:  char str[1024], *strasm;",
          "16:  ut64 offset;",
          "18:  op->buf_asm[0] = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17:  char *flag_str;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "260:    vA = (int) buf[1];",
          "261:    vB = (buf[3] << 8) | buf[2];",
          "262:    if (buf[0] == 0x1a) {",
          "264:     if (offset == -1) {",
          "265:      sprintf (str, \" v%i, string+%i\", vA, vB);",
          "266:     } else {",
          "267:      sprintf (str, \" v%i, 0x%\"PFMT64x, vA, offset);",
          "268:     }",
          "269:    } else if (buf[0] == 0x1c || buf[0] == 0x1f || buf[0] == 0x22) {",
          "272:      sprintf (str, \" v%i, class+%i\", vA, vB);",
          "273:     } else {",
          "275:     }",
          "276:    } else {",
          "279:      sprintf (str, \" v%i, field+%i\", vA, vB);",
          "280:     } else {",
          "282:     }",
          "283:    }",
          "284:    strasm = r_str_concat (strasm, str);",
          "",
          "[Removed Lines]",
          "263:     offset = R_ASM_GET_OFFSET(a, 's', vB);",
          "270:     offset = R_ASM_GET_OFFSET(a, 'c', vB);",
          "271:     if (offset == -1) {",
          "274:      sprintf (str, \" v%i, 0x%\"PFMT64x, vA, offset);",
          "277:     offset = R_ASM_GET_OFFSET(a, 'f', vB);",
          "278:     if (offset == -1) {",
          "281:      sprintf (str, \" v%i, 0x%\"PFMT64x, vA, offset);",
          "",
          "[Added Lines]",
          "264:     offset = R_ASM_GET_OFFSET (a, 's', vB);",
          "271:     flag_str = R_ASM_GET_NAME (a, 'c', vB);",
          "272:     if (!flag_str) {",
          "275:      sprintf (str, \" v%i, %s\", vA, flag_str);",
          "278:     flag_str = R_ASM_GET_NAME (a, 'f', vB);",
          "279:     if (!flag_str) {",
          "282:      sprintf (str, \" v%i, %s\", vA, flag_str);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "287:    vA = (buf[1] & 0x0f);",
          "288:    vB = (buf[1] & 0xf0)>>4;",
          "289:    vC = (buf[3]<<8) | buf[2];",
          "291:    if (offset == -1) {",
          "292:     sprintf (str, \" v%i, v%i, [obj+%04x]\", vA, vB, vC);",
          "293:    } else {",
          "",
          "[Removed Lines]",
          "290:    offset = R_ASM_GET_OFFSET(a, 'o', vC);",
          "",
          "[Added Lines]",
          "291:    offset = R_ASM_GET_OFFSET (a, 'o', vC);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "298:   case fmtopAAtBBBB:",
          "299:    vA = (int) buf[1];",
          "300:    vB = (buf[3] << 8) | buf[2];",
          "302:    if (offset == -1) {",
          "303:     sprintf (str, \" v%i, thing+%i\", vA, vB);",
          "304:    } else {",
          "",
          "[Removed Lines]",
          "301:    offset = R_ASM_GET_OFFSET(a, 't', vB);",
          "",
          "[Added Lines]",
          "302:    offset = R_ASM_GET_OFFSET (a, 't', vB);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "311:    vB = (buf[1] & 0xf0)>>4;",
          "312:    vC = (buf[3]<<8) | buf[2];",
          "313:    if (buf[0] == 0x20 || buf[0] == 0x23) { //instance-of & new-array",
          "316:      sprintf (str, \" v%i, v%i, class+%i\", vA, vB, vC);",
          "319:    } else {",
          "322:      sprintf (str, \" v%i, v%i, field+%i\", vA, vB, vC);",
          "325:    }",
          "326:    strasm = r_str_concat (strasm, str);",
          "327:    break;",
          "328:   case fmtopvAAtBBBBBBBB:",
          "329:    vA = (int) buf[1];",
          "330:    vB = (int) (buf[5]|(buf[4]<<8)|(buf[3]<<16)|(buf[2]<<24));",
          "333:     sprintf (str, \" v%i, string+%i\", vA, vB);",
          "335:     sprintf (str, \" v%i, 0x%\"PFMT64x, vA, offset);",
          "336:    strasm = r_str_concat (strasm, str);",
          "337:    break;",
          "338:   case fmtopvCCCCmBBBB:",
          "",
          "[Removed Lines]",
          "314:     offset = R_ASM_GET_OFFSET(a, 'c', vC);",
          "315:     if (offset == -1)",
          "317:     else",
          "318:      sprintf (str, \" v%i, v%i, 0x%\"PFMT64x, vA, vB, offset);",
          "320:     offset = R_ASM_GET_OFFSET(a, 'f', vC);",
          "321:     if (offset == -1)",
          "323:     else",
          "324:      sprintf (str, \" v%i, v%i, 0x%\"PFMT64x, vA, vB, offset);",
          "331:    offset = R_ASM_GET_OFFSET(a, 's', vB);",
          "332:    if (offset == -1)",
          "334:    else",
          "",
          "[Added Lines]",
          "315:     flag_str = R_ASM_GET_NAME (a, 'c', vC);",
          "316:     if (flag_str) {",
          "317:      sprintf (str, \" v%i, v%i, %s\", vA, vB, flag_str);",
          "318:     }",
          "319:     else {",
          "321:     }",
          "323:     flag_str = R_ASM_GET_NAME (a, 'f', vC);",
          "324:     if (flag_str) {",
          "325:      sprintf (str, \" v%i, v%i, %s\", vA, vB, flag_str);",
          "326:     }",
          "327:     else {",
          "329:     }",
          "336:    offset = R_ASM_GET_OFFSET (a, 's', vB);",
          "337:    if (offset == -1) {",
          "339:    }",
          "340:    else {",
          "342:    }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "340:    vB = (buf[3]<<8) | buf[2];",
          "341:    vC = (buf[5]<<8) | buf[4];",
          "342:    if (buf[0] == 0x25) { // filled-new-array/range",
          "345:      sprintf (str, \" {v%i..v%i}, class+%i\", vC, vC+vA-1, vB);",
          "348:    } else {",
          "352:     else {",
          "354:     }",
          "355:    }",
          "356:    strasm = r_str_concat (strasm, str);",
          "",
          "[Removed Lines]",
          "343:     offset = R_ASM_GET_OFFSET(a, 'c', vB);",
          "344:     if (offset == UT64_MAX)",
          "346:     else",
          "347:      sprintf (str, \" {v%i..v%i}, 0x%\"PFMT64x, vC, vC+vA-1, offset);",
          "349:     offset = R_ASM_GET_OFFSET(a, 'm', vB);",
          "350:     if (offset == UT64_MAX)",
          "351:      sprintf (str, \" {v%i..v%i}, method+%i\", vC, vC+vA-1, vB);",
          "353:      sprintf (str, \" {v%i..v%i}, 0x%\"PFMT64x, vC, vC+vA-1, offset);",
          "",
          "[Added Lines]",
          "350:     flag_str = R_ASM_GET_NAME (a, 'c', vB);",
          "351:     if (flag_str) {",
          "352:      sprintf (str, \" {v%i..v%i}, %s\", vC, vC+vA-1, flag_str);",
          "353:     }",
          "354:     else {",
          "356:     }",
          "358:     flag_str = R_ASM_GET_NAME (a, 'm', vB);",
          "359:     if (flag_str) {",
          "360:      sprintf (str, \" {v%i..v%i}, %s\", vC, vC+vA-1, flag_str);",
          "361:     }",
          "363:      sprintf (str, \" {v%i..v%i}, method+%i\", vC, vC+vA-1, vB);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "378:    }",
          "379:    strasm = r_str_concat (strasm, str);",
          "380:    if (buf[0] == 0x24) { // filled-new-array",
          "384:     } else {",
          "386:     }",
          "387:    } else {",
          "391:     } else {",
          "393:     }",
          "395:    }",
          "",
          "[Removed Lines]",
          "381:     offset = R_ASM_GET_OFFSET(a, 'c', vB);",
          "382:     if (offset == UT64_MAX) {",
          "383:      sprintf (str, \", class+%i\", vB);",
          "385:      sprintf (str, \", 0x%\"PFMT64x\" ; 0x%x\", offset, vB);",
          "388:     offset = R_ASM_GET_OFFSET(a, 'm', vB);",
          "389:     if (offset == UT64_MAX) {",
          "390:      sprintf (str, \", method+%i\", vB);",
          "392:      sprintf (str, \", 0x%\"PFMT64x\" ; 0x%x\", offset, vB);",
          "",
          "[Added Lines]",
          "391:     flag_str = R_ASM_GET_NAME (a, 'c', vB);",
          "392:     if (flag_str) {",
          "393:      sprintf (str, \", %s ; 0x%x\", flag_str, vB);",
          "395:      sprintf (str, \", class+%i\", vB);",
          "398:     flag_str = R_ASM_GET_NAME (a, 'm', vB);",
          "399:     if (flag_str) {",
          "400:      sprintf (str, \", %s ; 0x%x\", flag_str, vB);",
          "402:      sprintf (str, \", method+%i\", vB);",
          "",
          "---------------"
        ],
        "libr/bin/bin.c||libr/bin/bin.c": [
          "File: libr/bin/bin.c -> libr/bin/bin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: static RBinFile *r_bin_file_new(RBin *bin, const char *file, const ut8 *bytes, ut64 sz, ut64 file_sz, int rawstr, int fd, const char *xtrname, Sdb *sdb);",
          "57: static RBinFile *r_bin_file_new_from_bytes(RBin *bin, const char *file, const ut8 *bytes, ut64 sz, ut64 file_sz, int rawstr, ut64 baseaddr, ut64 loadaddr, int fd, const char *pluginname, const char *xtrname, ut64 offset);",
          "58: static int getoffset(RBin *bin, int type, int idx);",
          "60: static int r_bin_file_object_add(RBinFile *binfile, RBinObject *o);",
          "61: static void binobj_set_baddr(RBinObject *o, ut64 baddr);",
          "62: static ut64 binobj_a2b(RBinObject *o, ut64 addr);",
          "",
          "[Removed Lines]",
          "59: static const char *getname(RBin *bin, int off);",
          "",
          "[Added Lines]",
          "59: static const char *getname(RBin *bin, int type, int idx);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1914:  return -1;",
          "1915: }",
          "1919:  return NULL;",
          "1920: }",
          "",
          "[Removed Lines]",
          "1917: static const char *getname(RBin *bin, int off) {",
          "",
          "[Added Lines]",
          "1917: static const char *getname(RBin *bin, int type, int idx) {",
          "1918:  RBinFile *a = r_bin_cur (bin);",
          "1919:  RBinPlugin *plugin = r_bin_file_cur_plugin (a);",
          "1920:  if (plugin && plugin->get_name) {",
          "1921:   return plugin->get_name (a, type, idx);",
          "1922:  }",
          "",
          "---------------"
        ],
        "libr/bin/p/bin_dex.c||libr/bin/p/bin_dex.c": [
          "File: libr/bin/p/bin_dex.c -> libr/bin/p/bin_dex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: static Sdb *mdb = NULL;",
          "21:  ut8 buf[6];",
          "22:  ut64 len;",
          "23:  int uleblen;",
          "",
          "[Removed Lines]",
          "20: static char *getstr(RBinDexObj *bin, int idx) {",
          "",
          "[Added Lines]",
          "20: static char *getstr (RBinDexObj *bin, int idx) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "243:  r = r_str_newf (\"(%s)%s\", signature, return_type);",
          "244:  free (signature);",
          "245:  return r;",
          "247: }",
          "252: static Sdb* get_sdb (RBinObject *o) {",
          "253:  if (!o || !o->bin_obj) return NULL;",
          "",
          "[Removed Lines]",
          "249: static int check(RBinFile *arch);",
          "250: static int check_bytes(const ut8 *buf, ut64 length);",
          "",
          "[Added Lines]",
          "248: static int check (RBinFile *arch);",
          "249: static int check_bytes (const ut8 *buf, ut64 length);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "467:  if (tid < 0 || tid >= bin->header.strings_size) {",
          "468:   return NULL;",
          "469:  }",
          "471: }",
          "474: static char *dex_class_name_byid (RBinDexObj *bin, int cid) {",
          "475:  int tid;",
          "476:  if (!bin || !bin->types) {",
          "",
          "[Removed Lines]",
          "470:  return getstr(bin, tid);",
          "473: #if 0",
          "",
          "[Added Lines]",
          "469:  return getstr (bin, tid);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "480:   return NULL;",
          "481:  }",
          "482:  tid = bin->types[cid].descriptor_id;",
          "484: }",
          "488: static char *getClassName(const char *name) {",
          "",
          "[Removed Lines]",
          "483:  return getstr(bin, tid);",
          "485: #endif",
          "",
          "[Added Lines]",
          "481:  return getstr (bin, tid);",
          "482: }",
          "484: static char *dex_field_name (RBinDexObj *bin, int fid) {",
          "485:  int tid;",
          "486:  if (!bin || !bin->fields) {",
          "487:   return NULL;",
          "488:  }",
          "489:  if (fid < 0 || fid >= bin->header.fields_size) {",
          "490:   return NULL;",
          "491:  }",
          "492:  tid = bin->fields[fid].class_id;",
          "493:  if (tid < 0 || tid >= bin->header.types_size) {",
          "494:   return NULL;",
          "495:  }",
          "496:  return getstr (bin, bin->types[tid].descriptor_id);",
          "497: }",
          "499: static char* dex_method_fullname (RBinDexObj *bin, int method_idx) {",
          "500:  if (!bin || !bin->types) {",
          "501:   return NULL;",
          "502:  }",
          "504:  if (method_idx < 0 || method_idx >= bin->header.method_size) {",
          "505:   return NULL;",
          "506:  }",
          "508:  int cid = bin->methods[method_idx].class_id;",
          "510:  if (cid < 0 || cid >= bin->header.types_size) {",
          "511:   return NULL;",
          "512:  }",
          "514:  char *name = dex_method_name (bin, method_idx);",
          "515:  char *class_name = dex_class_name_byid (bin, cid);",
          "516:  class_name = r_str_replace (class_name, \";\", \"\", 0); //TODO: move to func",
          "517:  char *signature = dex_method_signature (bin, method_idx);",
          "518:  char *flagname = r_str_newf (\"%s%s%s\", class_name, name, signature);",
          "519:  free (name);",
          "520:  free (class_name);",
          "521:  free (signature);",
          "522:  return flagname;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "511:   return NULL;",
          "512:  }",
          "513:  tid = bin->types[cid].descriptor_id;",
          "515: }",
          "519:  r_list_free (p->methods);",
          "520:  r_list_free (p->fields);",
          "521:  r_bin_class_free (p);",
          "",
          "[Removed Lines]",
          "514:  return getstr(bin, tid);",
          "518: static void __r_bin_class_free(RBinClass *p) {",
          "",
          "[Added Lines]",
          "552:  return getstr (bin, tid);",
          "556: static void __r_bin_class_free (RBinClass *p) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "531:   return NULL;",
          "532:  }",
          "533:  tid = bin->types[cid].descriptor_id;",
          "535: }",
          "537: static void parse_class(RBinFile *binfile, RBinDexObj *bin, RBinDexClass *c, int class_index, int *methods) {",
          "538:  ut64 SF, IF, DM, VM, lastIndex;",
          "539:  ut8 ff[sizeof (DexField)] = {0};",
          "540:  char *class_name, *cln = NULL;",
          "541:  int total, i;",
          "542:  const ut8 *p, *p_end;",
          "",
          "[Removed Lines]",
          "534:  return getstr(bin, tid);",
          "",
          "[Added Lines]",
          "572:  return getstr (bin, tid);",
          "578:  ut8 ff2[16] = {0};",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "665:    break;",
          "666:   }",
          "667:   int tid = bin->types[field.type_id].descriptor_id;",
          "670:   if (1) {",
          "671:    RBinSymbol *sym = R_NEW0 (RBinSymbol);",
          "",
          "[Removed Lines]",
          "668:   const char* type_str = getstr(bin, tid);",
          "",
          "[Added Lines]",
          "707:   const char* type_str = getstr (bin, tid);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "741:    sym->name = flag_name;",
          "742:    sym->type = r_str_const (\"FUNC\");",
          "743:    sym->bind = r_str_const (\"GLOBAL\");",
          "747: #if 0",
          "749:     ut16 regsz;",
          "",
          "[Removed Lines]",
          "744:    sym->paddr = MC + 0x10;",
          "745:    sym->vaddr = MC + 0x10;",
          "",
          "[Added Lines]",
          "783:    sym->paddr = MC;// + 0x10;",
          "784:    sym->vaddr = MC;// + 0x10;",
          "785:    if (MC > 0) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "757:     try_item[tries_size] tries",
          "758:     encoded_catch_handler_list handlers",
          "759: #endif",
          "760:     r_list_append (bin->methods_list, sym);",
          "761:     r_list_append (cls->methods, sym);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "802:     if (r_buf_read_at (binfile->buf, binfile->buf->base + MC, ff2, 16) < 1) {",
          "803:      continue;",
          "804:     }",
          "805:     ut16 regsz = r_read_le16 (ff2);",
          "806:     ut16 ins_size = r_read_le16 (ff2 + 2);",
          "807:     ut16 outs_size = r_read_le16 (ff2 + 4);",
          "808:     ut16 tries_size = r_read_le16 (ff2 + 6);",
          "809:     ut32 debug_info_off = r_read_le32 (ff2 + 8);",
          "810:     ut32 insns_size = r_read_le32 (ff2 + 12);",
          "812:     ut64 prolog_size = 2+2+2+2+4+4;",
          "813:     if (tries_size > 0) {",
          "815:     }",
          "818:     sym->paddr = MC + prolog_size;// + 0x10;",
          "819:     sym->vaddr = MC + prolog_size;// + 0x10;",
          "820:     sym->size = insns_size * 2;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "819:    sym->type = r_str_const (\"METH\");",
          "820:    sym->bind = r_str_const (\"GLOBAL\");",
          "822:    r_list_append (bin->methods_list, sym);",
          "823:    r_list_append (cls->methods, sym);",
          "824:   }",
          "825:   free (name);",
          "826:   free(signature);",
          "",
          "[Removed Lines]",
          "821:    sym->paddr = sym->vaddr = MC;",
          "",
          "[Added Lines]",
          "889:    sym->paddr = sym->vaddr = MC + 0x10;",
          "892: ;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "916:    }",
          "917:    class_name[len-1] = 0; // remove last char \";\"",
          "918:    char *method_name = dex_method_name (bin, i);",
          "920:    if (method_name && *method_name) {",
          "921:     RBinImport *imp = R_NEW0 (RBinImport);",
          "922:     imp->name = r_str_newf (\"imp.%s.method.%s%s\", class_name, method_name, signature);",
          "",
          "[Removed Lines]",
          "919:    char *signature = dex_method_signature(bin, i);",
          "",
          "[Added Lines]",
          "989:    char *signature = dex_method_signature (bin, i);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1170:  struct r_bin_dex_obj_t *dex = arch->o->bin_obj;",
          "1171:  switch (type) {",
          "1172:  case 'm': // methods",
          "1175:   return offset_of_method_idx (arch, dex, idx);",
          "1193:  case 'o': // objects",
          "1194:   break;",
          "1195:  case 's': // strings",
          "",
          "[Removed Lines]",
          "1176:   break;",
          "1177:  case 'c': // class",
          "1178:   if (dex->header.class_size > idx) {",
          "1179:    int off = dex->header.class_offset + idx;",
          "1184:    return off;",
          "1185:   }",
          "1186:   break;",
          "1187:  case 'f': // fields",
          "1188:   if (dex->header.fields_size > idx) {",
          "1189:    return dex->header.fields_offset +",
          "1190:     (sizeof (struct dex_field_t)*idx);",
          "1191:   }",
          "1192:   break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1203:  return -1;",
          "1204: }",
          "1206: static RList* sections(RBinFile *arch) {",
          "1207:  struct r_bin_dex_obj_t *bin = arch->o->bin_obj;",
          "1208:  RList *ml = methods (arch);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1258: static char *getname (RBinFile *arch, int type, int idx) {",
          "1259:  struct r_bin_dex_obj_t *dex = arch->o->bin_obj;",
          "1260:  switch (type) {",
          "1261:  case 'm': // methods",
          "1262:   return dex_method_fullname (dex, idx);",
          "1263:  case 'c': // classes",
          "1264:   return dex_class_name_byid (dex, idx);",
          "1265:  case 'f': // fields",
          "1266:   return dex_field_name (dex, idx);",
          "1267:  }",
          "1268:  return NULL;",
          "1269: }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1314:  .strings = strings,",
          "1315:  .info = &info,",
          "1316:  .size = &size,",
          "1318: };",
          "1320: #ifndef CORELIB",
          "",
          "[Removed Lines]",
          "1317:  .get_offset = &getoffset",
          "",
          "[Added Lines]",
          "1382:  .get_offset = &getoffset,",
          "1383:  .get_name = &getname",
          "",
          "---------------"
        ],
        "libr/include/r_asm.h||libr/include/r_asm.h": [
          "File: libr/include/r_asm.h -> libr/include/r_asm.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:  (x && x->binb.bin && x->binb.get_offset)? \\",
          "45:   x->binb.get_offset (x->binb.bin, y, z): -1",
          "47: enum {",
          "48:  R_ASM_SYNTAX_NONE = 0,",
          "49:  R_ASM_SYNTAX_INTEL,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: #define R_ASM_GET_NAME(x,y,z) \\",
          "48:  (x && x->binb.bin && x->binb.get_name)? \\",
          "49:   x->binb.get_name (x->binb.bin, y, z): -1",
          "",
          "---------------"
        ],
        "libr/include/r_bin.h||libr/include/r_bin.h": [
          "File: libr/include/r_bin.h -> libr/include/r_bin.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "315:  struct r_bin_dbginfo_t *dbginfo;",
          "316:  struct r_bin_write_t *write;",
          "317:  int (*get_offset)(RBinFile *arch, int type, int idx);",
          "318:  ut64 (*get_vaddr)(RBinFile *arch, ut64 baddr, ut64 paddr, ut64 vaddr);",
          "319:  RBuffer* (*create)(RBin *bin, const ut8 *code, int codelen, const ut8 *data, int datalen);",
          "320:  char* (*demangle)(const char *str);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "318:  char* (*get_name)(RBinFile *arch, int type, int idx);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "448: typedef int (*RBinGetOffset)(RBin *bin, int type, int idx);",
          "451: typedef struct r_bin_bind_t {",
          "452:  RBin *bin;",
          "",
          "[Removed Lines]",
          "449: typedef const char *(*RBinGetName)(RBin *bin, int off);",
          "",
          "[Added Lines]",
          "450: typedef const char *(*RBinGetName)(RBin *bin, int type, int idx);",
          "",
          "---------------"
        ]
      }
    }
  ]
}