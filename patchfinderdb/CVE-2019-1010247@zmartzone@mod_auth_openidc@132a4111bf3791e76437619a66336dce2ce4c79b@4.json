{
  "cve_id": "CVE-2019-1010247",
  "cve_desc": "ZmartZone IAM mod_auth_openidc 2.3.10.1 and earlier is affected by: Cross Site Scripting (XSS). The impact is: Redirecting the user to a phishing page or interacting with the application on behalf of the user. The component is: File: src/mod_auth_openidc.c, Line: 3109. The fixed version is: 2.3.10.2.",
  "repo": "zmartzone/mod_auth_openidc",
  "patch_hash": "132a4111bf3791e76437619a66336dce2ce4c79b",
  "patch_info": {
    "commit_hash": "132a4111bf3791e76437619a66336dce2ce4c79b",
    "repo": "zmartzone/mod_auth_openidc",
    "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/132a4111bf3791e76437619a66336dce2ce4c79b",
    "files": [
      "ChangeLog",
      "configure.ac",
      "src/mod_auth_openidc.c"
    ],
    "message": "release 2.3.10.2: fix XSS vulnerability for poll parameter\n\nin OIDC Session Management RP iframe; CSNC-2019-001; thanks Mischa\nBachmann\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
    "before_after_code_files": [
      "configure.ac||configure.ac",
      "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
    ]
  },
  "patch_diff": {
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.3.10.1],[hans.zandbelt@zmartzone.eu])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.3.10.2],[hans.zandbelt@zmartzone.eu])",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
      "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3106:    \"\\n\"",
      "3107:    \"      function setTimer() {\\n\"",
      "3108:    \"        checkSession();\\n\"",
      "3110:    \"      }\\n\"",
      "3111:    \"\\n\"",
      "3112:    \"      function receiveMessage(e) {\\n\"",
      "",
      "[Removed Lines]",
      "3109:    \"        timerID = setInterval('checkSession()', %s);\\n\"",
      "",
      "[Added Lines]",
      "3109:    \"        timerID = setInterval('checkSession()', %d);\\n\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3150:  char *s_poll_interval = NULL;",
      "3151:  oidc_util_get_request_parameter(r, \"poll\", &s_poll_interval);",
      "3155:  const char *redirect_uri = oidc_get_redirect_uri(r, c);",
      "3156:  java_script = apr_psprintf(r->pool, java_script, origin, client_id,",
      "3158:    redirect_uri);",
      "3160:  return oidc_util_html_send(r, NULL, java_script, \"setTimer\", NULL, DONE);",
      "",
      "[Removed Lines]",
      "3152:  if (s_poll_interval == NULL)",
      "3153:   s_poll_interval = \"3000\";",
      "3157:    session_state, op_iframe_id, s_poll_interval, redirect_uri,",
      "",
      "[Added Lines]",
      "3152:  int poll_interval = s_poll_interval ? strtol(s_poll_interval, NULL, 10) : 0;",
      "3153:  if ((poll_interval <= 0) || (poll_interval > 3600 * 24))",
      "3154:   poll_interval = 3000;",
      "3158:    session_state, op_iframe_id, poll_interval, redirect_uri,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2b148871ac2a97bbaedef0a0e060ab1b8cffbc13",
      "candidate_info": {
        "commit_hash": "2b148871ac2a97bbaedef0a0e060ab1b8cffbc13",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/2b148871ac2a97bbaedef0a0e060ab1b8cffbc13",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/cache/redis.c"
        ],
        "message": "2.3.6rc3: refactor Redis cache backend to solve issues on AUTH errors\n\na) memory leak and\nb) redisGetReply lagging behind\n\nThese issues would occur when an authenticated Redis connection produces\nand error and the subsequent actual command result is not consumed\nimmediately with redisGetReply but only in the next call/pass to\noidc_cache_redis_command which may result in cache result mixups because\nconsuming responses is now lagging behind.\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/cache/redis.c||src/cache/redis.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.6rc2],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.6rc3],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/cache/redis.c||src/cache/redis.c": [
          "File: src/cache/redis.c -> src/cache/redis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:  return rctx;",
          "220: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "225: static void oidc_cache_redis_reply_free(redisReply **reply) {",
          "226:  if (*reply != NULL) {",
          "227:   freeReplyObject(*reply);",
          "229:  }",
          "230: }",
          "232: #define OIDC_REDIS_MAX_TRIES 2",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:  oidc_cache_redis_ctx_t *rctx = NULL;",
          "229:  redisReply *reply = NULL;",
          "230:  int i = 0;",
          "236:   rctx = oidc_cache_redis_connect(r, context);",
          "237:   if ((rctx == NULL) || (rctx->ctx == NULL))",
          "240:   if (context->passwd != NULL) {",
          "241:    redisAppendCommand(rctx->ctx,",
          "242:      apr_psprintf(r->pool, \"AUTH %s\", context->passwd));",
          "243:   }",
          "246:   va_list args;",
          "247:   va_start(args, format);",
          "248:   redisvAppendCommand(rctx->ctx, format, args);",
          "",
          "[Removed Lines]",
          "233:  for (i = 0; i < 2; i++) {",
          "238:    break;",
          "",
          "[Added Lines]",
          "242:  int rv = REDIS_ERR;",
          "246:  for (i = 0; i < OIDC_REDIS_MAX_TRIES; i++) {",
          "251:    continue;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "251:   if (context->passwd != NULL) {",
          "259:     oidc_error(r,",
          "263:   }",
          "276:    break;",
          "280:   oidc_error(r,",
          "285:   oidc_cache_redis_free(rctx);",
          "",
          "[Removed Lines]",
          "253:    redisGetReply(rctx->ctx, (void **) &reply);",
          "254:    if (reply == NULL) {",
          "255:     oidc_error(r,",
          "256:       \"authentication to the Redis server (%s:%d) failed, reply == NULL\",",
          "257:       context->host_str, context->port);",
          "258:    } else if (reply->type == REDIS_REPLY_ERROR) {",
          "260:       \"authentication to the Redis server (%s:%d) failed, reply.status = %s\",",
          "261:       context->host_str, context->port, reply->str);",
          "262:    }",
          "266:   reply = NULL;",
          "267:   redisGetReply(rctx->ctx, (void **) &reply);",
          "270:   if (reply != NULL) {",
          "271:    if (reply->type == REDIS_REPLY_ERROR) {",
          "272:     oidc_error(r,",
          "273:       \"command to the Redis server (%s:%d) returned an error, reply.status = %s\",",
          "274:       context->host_str, context->port, reply->str);",
          "275:    }",
          "277:   }",
          "281:     \"redisvAppendCommand/redisGetReply (%d) failed, disconnecting: '%s'\",",
          "282:     i, rctx->ctx->errstr);",
          "",
          "[Added Lines]",
          "267:    rv = redisGetReply(rctx->ctx, (void **) &reply);",
          "269:    if ((rv != REDIS_OK) || (reply == NULL)",
          "270:      || (reply->type == REDIS_REPLY_ERROR))",
          "272:       \"Redis AUTH command (attempt=%d to %s:%d) failed: '%s' [%s]\",",
          "273:       i, context->host_str, context->port, rctx->ctx->errstr,",
          "274:       reply ? reply->str : \"<n/a>\");",
          "277:    oidc_cache_redis_reply_free(&reply);",
          "281:   rv = redisGetReply(rctx->ctx, (void **) &reply);",
          "284:   if ((reply != NULL) && (reply->type != REDIS_REPLY_ERROR))",
          "290:     \"Redis command (attempt=%d to %s:%d) failed, disconnecting: '%s' [%s]\",",
          "291:     i, context->host_str, context->port, rctx->ctx->errstr,",
          "292:     reply ? reply->str : \"<n/a>\");",
          "295:   oidc_cache_redis_reply_free(&reply);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "298:    &auth_openidc_module);",
          "299:  oidc_cache_cfg_redis_t *context = (oidc_cache_cfg_redis_t *) cfg->cache_cfg;",
          "300:  redisReply *reply = NULL;",
          "303:  if (oidc_cache_mutex_lock(r, context->mutex) == FALSE)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "314:  apr_byte_t rv = FALSE;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "307:  reply = oidc_cache_redis_command(r, context, \"GET %s\",",
          "308:    oidc_cache_redis_get_key(r->pool, section, key));",
          "320:  }",
          "323:  if (reply->len != strlen(reply->str)) {",
          "324:   oidc_error(r, \"redisCommand reply->len != strlen(reply->str): '%s'\",",
          "325:     reply->str);",
          "329:  }",
          "336:  oidc_cache_mutex_unlock(r, context->mutex);",
          "339: }",
          "",
          "[Removed Lines]",
          "309:  if (reply == NULL) {",
          "310:   oidc_cache_mutex_unlock(r, context->mutex);",
          "311:   return FALSE;",
          "312:  }",
          "315:  if (reply->type != REDIS_REPLY_STRING) {",
          "316:   freeReplyObject(reply);",
          "318:   oidc_cache_mutex_unlock(r, context->mutex);",
          "319:   return TRUE;",
          "326:   freeReplyObject(reply);",
          "327:   oidc_cache_mutex_unlock(r, context->mutex);",
          "328:   return FALSE;",
          "333:  freeReplyObject(reply);",
          "338:  return TRUE;",
          "",
          "[Added Lines]",
          "324:  if (reply == NULL)",
          "325:   goto end;",
          "328:  if (reply->type == REDIS_REPLY_NIL) {",
          "330:   rv = TRUE;",
          "331:   goto end;",
          "338:   goto end;",
          "345:  rv = TRUE;",
          "347: end:",
          "349:  oidc_cache_redis_reply_free(&reply);",
          "355:  return rv;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "348:    &auth_openidc_module);",
          "349:  oidc_cache_cfg_redis_t *context = (oidc_cache_cfg_redis_t *) cfg->cache_cfg;",
          "350:  redisReply *reply = NULL;",
          "353:  if (oidc_cache_mutex_lock(r, context->mutex) == FALSE)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "368:  apr_byte_t rv = FALSE;",
          "369:  apr_uint32_t timeout;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "360:   reply = oidc_cache_redis_command(r, context, \"DEL %s\",",
          "361:     oidc_cache_redis_get_key(r->pool, section, key));",
          "369:  } else {",
          "375:   reply = oidc_cache_redis_command(r, context, \"SETEX %s %d %s\",",
          "376:     oidc_cache_redis_get_key(r->pool, section, key), timeout,",
          "377:     value);",
          "385:  }",
          "388:  oidc_cache_mutex_unlock(r, context->mutex);",
          "391: }",
          "393: static int oidc_cache_redis_destroy(server_rec *s) {",
          "",
          "[Removed Lines]",
          "362:   if (reply == NULL) {",
          "363:    oidc_cache_mutex_unlock(r, context->mutex);",
          "364:    return FALSE;",
          "365:   }",
          "367:   freeReplyObject(reply);",
          "372:   apr_uint32_t timeout = apr_time_sec(expiry - apr_time_now());",
          "378:   if (reply == NULL) {",
          "379:    oidc_cache_mutex_unlock(r, context->mutex);",
          "380:    return FALSE;",
          "381:   }",
          "383:   freeReplyObject(reply);",
          "390:  return TRUE;",
          "",
          "[Added Lines]",
          "385:   timeout = apr_time_sec(expiry - apr_time_now());",
          "394:  rv = (reply != NULL) && (reply->type != REDIS_REPLY_ERROR);",
          "397:  oidc_cache_redis_reply_free(&reply);",
          "403:  return rv;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5c15dfb08106c2451c2c44ce7ace6813c216ba75",
      "candidate_info": {
        "commit_hash": "5c15dfb08106c2451c2c44ce7ace6813c216ba75",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/5c15dfb08106c2451c2c44ce7ace6813c216ba75",
        "files": [
          "AUTHORS",
          "ChangeLog",
          "configure.ac",
          "src/mod_auth_openidc.c"
        ],
        "message": "improve validation of the post-logout URL; closes #449\n\n- to avoid an open redirect; thanks AIMOTO Norihito\n- release 2.4.0.1\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0.1],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3024:  return rc;",
          "3025: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3027: static apr_byte_t oidc_validate_post_logout_url(request_rec *r, const char *url,",
          "3028:   char **err_str, char **err_desc) {",
          "3029:  apr_uri_t uri;",
          "3030:  const char *c_host = NULL;",
          "3032:  if (apr_uri_parse(r->pool, url, &uri) != APR_SUCCESS) {",
          "3035:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
          "3036:   return FALSE;",
          "3037:  }",
          "3039:  c_host = oidc_get_current_url_host(r);",
          "3040:  if ((uri.hostname != NULL)",
          "3041:    && ((strstr(c_host, uri.hostname) == NULL)",
          "3042:      || (strstr(uri.hostname, c_host) == NULL))) {",
          "3045:     apr_psprintf(r->pool,",
          "3046:       \"logout value \\\"%s\\\" does not match the hostname of the current request \\\"%s\\\"\",",
          "3047:       apr_uri_unparse(r->pool, &uri, 0), c_host);",
          "3048:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
          "3049:   return FALSE;",
          "3050:  } else if (strstr(url, \"/\") != url) {",
          "3053:     apr_psprintf(r->pool,",
          "3054:       \"No hostname was parsed and it does not seem to be relative, i.e starting with '/': %s\",",
          "3055:       url);",
          "3056:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
          "3057:   return FALSE;",
          "3058:  }",
          "3061:  if (((strstr(url, \"\\n\") != NULL) || strstr(url, \"\\r\") != NULL)) {",
          "3064:     apr_psprintf(r->pool,",
          "3065:       \"logout value \\\"%s\\\" contains illegal \\\"\\n\\\" or \\\"\\r\\\" character(s)\",",
          "3066:       url);",
          "3067:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
          "3068:   return FALSE;",
          "3069:  }",
          "3071:  return TRUE;",
          "3072: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3033:  oidc_provider_t *provider = NULL;",
          "3035:  char *url = NULL;",
          "3036:  oidc_util_get_request_parameter(r, OIDC_REDIRECT_URI_REQUEST_LOGOUT, &url);",
          "3038:  oidc_debug(r, \"enter (url=%s)\", url);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3083:  char *error_str = NULL;",
          "3084:  char *error_description = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3050:  } else {",
          "3091:   }",
          "3092:  }",
          "",
          "[Removed Lines]",
          "3054:   const char *error_description = NULL;",
          "3055:   apr_uri_t uri;",
          "3057:   if (apr_uri_parse(r->pool, url, &uri) != APR_SUCCESS) {",
          "3058:    const char *error_description = apr_psprintf(r->pool,",
          "3059:      \"Logout URL malformed: %s\", url);",
          "3060:    oidc_error(r, \"%s\", error_description);",
          "3061:    return oidc_util_html_send_error(r, c->error_template,",
          "3062:      \"Malformed URL\", error_description,",
          "3063:      HTTP_INTERNAL_SERVER_ERROR);",
          "3065:   }",
          "3067:   const char *c_host = oidc_get_current_url_host(r);",
          "3068:   if ((uri.hostname != NULL)",
          "3069:     && ((strstr(c_host, uri.hostname) == NULL)",
          "3070:       || (strstr(uri.hostname, c_host) == NULL))) {",
          "3071:    error_description =",
          "3072:      apr_psprintf(r->pool,",
          "3073:        \"logout value \\\"%s\\\" does not match the hostname of the current request \\\"%s\\\"\",",
          "3074:        apr_uri_unparse(r->pool, &uri, 0), c_host);",
          "3075:    oidc_error(r, \"%s\", error_description);",
          "3076:    return oidc_util_html_send_error(r, c->error_template,",
          "3077:      \"Invalid Request\", error_description,",
          "3078:      HTTP_INTERNAL_SERVER_ERROR);",
          "3079:   }",
          "3082:   if (((strstr(url, \"\\n\") != NULL) || strstr(url, \"\\r\") != NULL)) {",
          "3083:    error_description =",
          "3084:      apr_psprintf(r->pool,",
          "3085:        \"logout value \\\"%s\\\" contains illegal \\\"\\n\\\" or \\\"\\r\\\" character(s)\",",
          "3086:        url);",
          "3087:    oidc_error(r, \"%s\", error_description);",
          "3088:    return oidc_util_html_send_error(r, c->error_template,",
          "3089:      \"Invalid Request\", error_description,",
          "3090:      HTTP_INTERNAL_SERVER_ERROR);",
          "",
          "[Added Lines]",
          "3103:   if (oidc_validate_post_logout_url(r, url, &error_str,",
          "3104:     &error_description) == FALSE) {",
          "3105:    return oidc_util_html_send_error(r, c->error_template, error_str,",
          "3106:      error_description,",
          "3107:      HTTP_BAD_REQUEST);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c7f4fb50fa3a5235e3ca4561830164d8654b9346",
      "candidate_info": {
        "commit_hash": "c7f4fb50fa3a5235e3ca4561830164d8654b9346",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/c7f4fb50fa3a5235e3ca4561830164d8654b9346",
        "files": [
          "ChangeLog",
          "Makefile.in",
          "configure.ac",
          "src/jose.c",
          "src/jose.h",
          "src/proto.c"
        ],
        "message": "avoid passing empty key set for JWT decryption\n\n- fixes bug introduced in 2.4.0rc12\n- bump to 2.4.0rc13\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "configure.ac||configure.ac",
          "src/jose.c||src/jose.c",
          "src/jose.h||src/jose.h",
          "src/proto.c||src/proto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "83: install: src/mod_auth_openidc.la",
          "84:  @APXS2@ @APXS2_OPTS@ -i -n mod_auth_openidc src/mod_auth_openidc.la",
          "86: .PHONY: distfile",
          "87: distfile: @NAMEVER@.tar.gz",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86: docker: docker-build docker-run",
          "88: docker-build:",
          "89:  docker build -t mod_auth_openidc .",
          "91: docker-run:",
          "92:  docker run -p 80:80 -p 443:443 --cap-add=SYS_PTRACE --security-opt seccomp=unconfined -it mod_auth_openidc /bin/bash -c \"/root/run.sh\"",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc12],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc13],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/jose.c||src/jose.c": [
          "File: src/jose.c -> src/jose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "661:  const char *kid = cjose_header_get(hdr, CJOSE_HDR_KID, &cjose_err);",
          "662:  const char *alg = cjose_header_get(hdr, CJOSE_HDR_ALG, &cjose_err);",
          "664:  if (kid != NULL) {",
          "666:   jwk = apr_hash_get(keys, kid, APR_HASH_KEY_STRING);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "664:  if ((keys == NULL) || (apr_hash_count(keys) == 0)) {",
          "665:   oidc_jose_error(err, \"no decryption keys configured\");",
          "666:   return NULL;",
          "667:  }",
          "",
          "---------------"
        ],
        "src/jose.h||src/jose.h": [
          "File: src/jose.h -> src/jose.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:   const char *, const char *msg, ...);",
          "91: #define oidc_jose_error(err, msg, ...) _oidc_jose_error_set(err, __FILE__, __LINE__, __FUNCTION__, msg, ##__VA_ARGS__)",
          "92: #define oidc_jose_error_openssl(err, msg, ...) _oidc_jose_error_set(err, __FILE__, __LINE__, __FUNCTION__, \"%s() failed: %s\", msg, ERR_error_string(ERR_get_error(), NULL), ##__VA_ARGS__)",
          "",
          "[Removed Lines]",
          "93: #define oidc_jose_e2s(pool, err) apr_psprintf(pool, \"[%s:%d: %s]: %s\\n\", err.source, err.line, err.function, err.text)",
          "94: #define oidc_cjose_e2s(pool, cjose_err) apr_psprintf(pool, \"%s [file: %s, function: %s, line: %ld]\\n\", cjose_err.message, cjose_err.file, cjose_err.function, cjose_err.line)",
          "",
          "[Added Lines]",
          "93: #define oidc_jose_e2s(pool, err) apr_psprintf(pool, \"[%s:%d: %s]: %s\", err.source, err.line, err.function, err.text)",
          "94: #define oidc_cjose_e2s(pool, cjose_err) apr_psprintf(pool, \"%s [file: %s, function: %s, line: %ld]\", cjose_err.message, cjose_err.file, cjose_err.function, cjose_err.line)",
          "",
          "---------------"
        ],
        "src/proto.c||src/proto.c": [
          "File: src/proto.c -> src/proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1621:    TRUE, &jwk) == FALSE)",
          "1622:   return FALSE;",
          "1627:  if (provider->client_encryption_keys)",
          "1628:   decryption_keys = oidc_util_merge_key_sets(r->pool, decryption_keys,",
          "1629:     provider->client_encryption_keys);",
          "",
          "[Removed Lines]",
          "1624:  if (cfg->private_keys)",
          "1625:   decryption_keys = oidc_util_merge_symmetric_key(r->pool,",
          "1626:     cfg->private_keys, jwk);",
          "",
          "[Added Lines]",
          "1624:  decryption_keys = oidc_util_merge_symmetric_key(r->pool, cfg->private_keys,",
          "1625:    jwk);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cb6d18e0530c42c2c0237ea1220f89f9aaffccf0",
      "candidate_info": {
        "commit_hash": "cb6d18e0530c42c2c0237ea1220f89f9aaffccf0",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/cb6d18e0530c42c2c0237ea1220f89f9aaffccf0",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/util.c",
          "test/test.c"
        ],
        "message": "retain the unparsed URL path in current/original URL determination\n\n- thereby preserve/support URL-encoded characters in paths\n- bump to 2.3.10rc1\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/util.c||src/util.c",
          "test/test.c||test/test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.10rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.10rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "499:  path = r->uri;",
          "501:  if ((path) && (path[0] != '/')) {",
          "502:   memset(&uri, 0, sizeof(apr_uri_t));",
          "503:   if (apr_uri_parse(r->pool, r->uri, &uri) == APR_SUCCESS)",
          "504:    path = uri.path;",
          "505:   else",
          "506:    oidc_warn(r, \"apr_uri_parse failed on non-relative URL: %s\", r->uri);",
          "507:  }",
          "509:  url = apr_pstrcat(r->pool, oidc_get_current_url_base(r), path,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "508:  } else {",
          "510:   path = r->unparsed_uri;",
          "",
          "---------------"
        ],
        "test/test.c||test/test.c": [
          "File: test/test.c -> test/test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1195:  char *url = NULL;",
          "1197:  r->uri = \"/test\";",
          "1199:  url = oidc_get_current_url(r);",
          "1200:  TST_ASSERT_STR(\"test_current_url (1)\", url, \"https://www.example.com/test?foo=bar&param1=value1\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1198:  r->unparsed_uri = r->uri;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bc122ae0df1c033dac6b979e54084304c08d8afa",
      "candidate_info": {
        "commit_hash": "bc122ae0df1c033dac6b979e54084304c08d8afa",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/bc122ae0df1c033dac6b979e54084304c08d8afa",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/config.c",
          "src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h",
          "src/oauth.c",
          "src/util.c",
          "test/stub.c"
        ],
        "message": "fix `OIDCOAuthAcceptTokenAs post`; see #443\n\n- propagate - and do not lose - POST data\n- bump to 2.4.0rc19\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/config.c||src/config.c",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/oauth.c||src/oauth.c",
          "src/util.c||src/util.c",
          "test/stub.c||test/stub.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc18],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc19],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2346:  return OK;",
          "2347: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2349: static const char oidcFilterName[] = \"oidc_filter_in_filter\";",
          "2351: static void oidc_filter_in_insert_filter(request_rec *r) {",
          "2353:  if (oidc_enabled(r) == FALSE)",
          "2354:   return;",
          "2356:  if (ap_is_initial_req(r) == 0)",
          "2357:   return;",
          "2359:  apr_table_t *userdata_post_params = NULL;",
          "2360:  apr_pool_userdata_get((void **) &userdata_post_params,",
          "2361:    OIDC_USERDATA_POST_PARAMS_KEY, r->pool);",
          "2362:  if (userdata_post_params == NULL)",
          "2363:   return;",
          "2365:  ap_add_input_filter(oidcFilterName, NULL, r, r->connection);",
          "2366: }",
          "2368: typedef struct oidc_filter_in_context {",
          "2369:  apr_bucket_brigade *pbbTmp;",
          "2370:  apr_size_t nbytes;",
          "2371: } oidc_filter_in_context;",
          "2373: static apr_status_t oidc_filter_in_filter(ap_filter_t *f,",
          "2374:   apr_bucket_brigade *brigade, ap_input_mode_t mode,",
          "2375:   apr_read_type_e block, apr_off_t nbytes) {",
          "2376:  oidc_filter_in_context *ctx = NULL;",
          "2377:  apr_bucket *b_in = NULL, *b_out = NULL;",
          "2378:  char *buf = NULL;",
          "2379:  apr_table_t *userdata_post_params = NULL;",
          "2380:  apr_status_t rc = APR_SUCCESS;",
          "2382:  if (!(ctx = f->ctx)) {",
          "2383:   f->ctx = ctx = apr_palloc(f->r->pool, sizeof *ctx);",
          "2384:   ctx->pbbTmp = apr_brigade_create(f->r->pool,",
          "2385:     f->r->connection->bucket_alloc);",
          "2386:   ctx->nbytes = 0;",
          "2387:  }",
          "2389:  if (APR_BRIGADE_EMPTY(ctx->pbbTmp)) {",
          "2390:   rc = ap_get_brigade(f->next, ctx->pbbTmp, mode, block, nbytes);",
          "2392:   if (mode == AP_MODE_EATCRLF || rc != APR_SUCCESS)",
          "2393:    return rc;",
          "2394:  }",
          "2396:  while (!APR_BRIGADE_EMPTY(ctx->pbbTmp)) {",
          "2398:   b_in = APR_BRIGADE_FIRST(ctx->pbbTmp);",
          "2400:   if (APR_BUCKET_IS_EOS(b_in)) {",
          "2402:    APR_BUCKET_REMOVE(b_in);",
          "2404:    apr_pool_userdata_get((void **) &userdata_post_params,",
          "2405:      OIDC_USERDATA_POST_PARAMS_KEY, f->r->pool);",
          "2407:    if (userdata_post_params != NULL) {",
          "2408:     buf = apr_psprintf(f->r->pool, \"%s%s\",",
          "2409:       ctx->nbytes > 0 ? \"&\" : \"\",",
          "2410:         oidc_util_http_form_encoded_data(f->r,",
          "2411:           userdata_post_params));",
          "2412:     b_out = apr_bucket_heap_create(buf, strlen(buf), 0,",
          "2413:       f->r->connection->bucket_alloc);",
          "2415:     APR_BRIGADE_INSERT_TAIL(brigade, b_out);",
          "2417:     ctx->nbytes += strlen(buf);",
          "2419:     if (oidc_util_hdr_in_content_length_get(f->r) != NULL)",
          "2420:      oidc_util_hdr_in_set(f->r, OIDC_HTTP_HDR_CONTENT_LENGTH,",
          "2421:        apr_psprintf(f->r->pool, \"%ld\", ctx->nbytes));",
          "2423:     apr_pool_userdata_set(NULL, OIDC_USERDATA_POST_PARAMS_KEY,",
          "2424:       NULL, f->r->pool);",
          "2425:    }",
          "2427:    APR_BRIGADE_INSERT_TAIL(brigade, b_in);",
          "2429:    break;",
          "2430:   }",
          "2432:   APR_BUCKET_REMOVE(b_in);",
          "2433:   APR_BRIGADE_INSERT_TAIL(brigade, b_in);",
          "2434:   ctx->nbytes += b_in->length;",
          "2435:  }",
          "2437:  return rc;",
          "2438: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2354:  ap_hook_child_init(oidc_child_init, NULL, NULL, APR_HOOK_MIDDLE);",
          "2355:  ap_hook_handler(oidc_content_handler, NULL, NULL, APR_HOOK_FIRST);",
          "2356:  ap_hook_fixups(oidc_auth_fixups, NULL, NULL, APR_HOOK_MIDDLE);",
          "2357: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "2358:  ap_hook_check_authn(oidc_check_user_id, NULL, NULL, APR_HOOK_MIDDLE,",
          "2359:    AP_AUTH_INTERNAL_PER_CONF);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2448:  ap_hook_insert_filter(oidc_filter_in_insert_filter, NULL, NULL,",
          "2449:    APR_HOOK_MIDDLE);",
          "2450:  ap_register_input_filter(oidcFilterName, oidc_filter_in_filter, NULL,",
          "2451:    AP_FTYPE_RESOURCE);",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "439:  apr_table_t *params = apr_table_make(r->pool, 8);",
          "441:   oidc_error(r, \"something went wrong when reading the POST parameters\");",
          "442:   return FALSE;",
          "443:  }",
          "",
          "[Removed Lines]",
          "440:  if (oidc_util_read_post_params(r, params) == FALSE) {",
          "",
          "[Added Lines]",
          "440:  if (oidc_util_read_post_params(r, params, FALSE, NULL) == FALSE) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2162:  apr_table_t *params = apr_table_make(r->pool, 8);",
          "2164:   oidc_error(r, \"something went wrong when reading the POST parameters\");",
          "2165:   return HTTP_INTERNAL_SERVER_ERROR;",
          "2166:  }",
          "",
          "[Removed Lines]",
          "2163:  if (oidc_util_read_post_params(r, params) == FALSE) {",
          "",
          "[Added Lines]",
          "2163:  if (oidc_util_read_post_params(r, params, FALSE, NULL) == FALSE) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2844:  int rc = HTTP_BAD_REQUEST;",
          "2846:  apr_table_t *params = apr_table_make(r->pool, 8);",
          "2848:   oidc_error(r,",
          "2849:     \"could not read POST-ed parameters to the logout endpoint\");",
          "2850:   goto out;",
          "",
          "[Removed Lines]",
          "2847:  if (oidc_util_read_post_params(r, params) == FALSE) {",
          "",
          "[Added Lines]",
          "2847:  if (oidc_util_read_post_params(r, params, FALSE, NULL) == FALSE) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4089: #endif",
          "4094: int oidc_content_handler(request_rec *r) {",
          "4095:  oidc_cfg *c = ap_get_module_config(r->server->module_config,",
          "4096:    &auth_openidc_module);",
          "4097:  return oidc_util_request_matches_url(r, oidc_get_redirect_uri(r, c)) ?",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4091: apr_byte_t oidc_enabled(request_rec *r) {",
          "4092:  if (ap_auth_type(r) == NULL)",
          "4093:   return FALSE;",
          "4095:  if (apr_strnatcasecmp((const char *) ap_auth_type(r),",
          "4096:    OIDC_AUTH_TYPE_OPENID_CONNECT) == 0)",
          "4097:   return TRUE;",
          "4099:  if (apr_strnatcasecmp((const char *) ap_auth_type(r),",
          "4100:    OIDC_AUTH_TYPE_OPENID_OAUTH20) == 0)",
          "4101:   return TRUE;",
          "4103:  if (apr_strnatcasecmp((const char *) ap_auth_type(r),",
          "4104:    OIDC_AUTH_TYPE_OPENID_BOTH) == 0)",
          "4105:   return TRUE;",
          "4107:  return FALSE;",
          "4108: }",
          "4113:  if (oidc_enabled(r) == FALSE)",
          "4114:   return DECLINED;",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "171: #define OIDC_USERDATA_KEY \"mod_auth_openidc_state\"",
          "173: #define OIDC_USERDATA_ENV_KEY \"mod_auth_openidc_env\"",
          "176: #define OIDC_UTIL_HTTP_SENDSTRING \"OIDC_UTIL_HTTP_SENDSTRING\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "173: #define OIDC_USERDATA_POST_PARAMS_KEY \"oidc_userdata_post_params\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "742: char *oidc_util_escape_string(const request_rec *r, const char *str);",
          "743: char *oidc_util_unescape_string(const request_rec *r, const char *str);",
          "744: apr_byte_t oidc_util_read_form_encoded_params(request_rec *r, apr_table_t *table, char *data);",
          "746: apr_byte_t oidc_util_file_read(request_rec *r, const char *path, apr_pool_t *pool, char **result);",
          "747: apr_byte_t oidc_util_file_write(request_rec *r, const char *path, const char *data);",
          "748: apr_byte_t oidc_util_issuer_match(const char *a, const char *b);",
          "",
          "[Removed Lines]",
          "745: apr_byte_t oidc_util_read_post_params(request_rec *r, apr_table_t *table);",
          "",
          "[Added Lines]",
          "745: apr_byte_t oidc_util_read_post_params(request_rec *r, apr_table_t *table, apr_byte_t propagate, const char *strip_param_name);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "773: const char *oidc_util_get_provided_token_binding_id(const request_rec *r);",
          "774: char *oidc_util_http_query_encoded_url(request_rec *r, const char *url, const apr_table_t *params);",
          "775: char *oidc_util_get_full_path(apr_pool_t *pool, const char *abs_or_rel_filename);",
          "778: #define OIDC_HTTP_HDR_COOKIE       \"Cookie\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "776: apr_byte_t oidc_enabled(request_rec *r);",
          "777: char *oidc_util_http_form_encoded_data(request_rec *r, const apr_table_t *params);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "780: #define OIDC_HTTP_HDR_USER_AGENT      \"User-Agent\"",
          "781: #define OIDC_HTTP_HDR_X_FORWARDED_FOR     \"X-Forwarded-For\"",
          "782: #define OIDC_HTTP_HDR_CONTENT_TYPE      \"Content-Type\"",
          "783: #define OIDC_HTTP_HDR_X_REQUESTED_WITH     \"X-Requested-With\"",
          "784: #define OIDC_HTTP_HDR_ACCEPT       \"Accept\"",
          "785: #define OIDC_HTTP_HDR_AUTHORIZATION      \"Authorization\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "785: #define OIDC_HTTP_HDR_CONTENT_LENGTH     \"Content-Length\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "804: const char *oidc_util_hdr_in_user_agent_get(const request_rec *r);",
          "805: const char *oidc_util_hdr_in_x_forwarded_for_get(const request_rec *r);",
          "806: const char *oidc_util_hdr_in_content_type_get(const request_rec *r);",
          "807: const char *oidc_util_hdr_in_x_requested_with_get(const request_rec *r);",
          "808: const char *oidc_util_hdr_in_accept_get(const request_rec *r);",
          "809: const char *oidc_util_hdr_in_authorization_get(const request_rec *r);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "810: const char *oidc_util_hdr_in_content_length_get(const request_rec *r);",
          "",
          "---------------"
        ],
        "src/oauth.c||src/oauth.c": [
          "File: src/oauth.c -> src/oauth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "264:  if ((*access_token == NULL) && (r->method_number == M_POST)",
          "265:    && (accept_token_in & OIDC_OAUTH_ACCEPT_TOKEN_IN_POST)) {",
          "266:   apr_table_t *params = apr_table_make(r->pool, 8);",
          "269:   }",
          "270:  }",
          "",
          "[Removed Lines]",
          "267:   if (oidc_util_read_post_params(r, params) == TRUE) {",
          "",
          "[Added Lines]",
          "267:   if (oidc_util_read_post_params(r, params, TRUE,",
          "268:     OIDC_PROTO_ACCESS_TOKEN) == TRUE) {",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "502:  if ((path) && (path[0] != '/')) {",
          "503:   memset(&uri, 0, sizeof(apr_uri_t));",
          "504:   if (apr_uri_parse(r->pool, r->uri, &uri) == APR_SUCCESS)",
          "506:   else",
          "508:  } else {",
          "510:   path = r->unparsed_uri;",
          "",
          "[Removed Lines]",
          "505:    path = apr_pstrcat(r->pool, uri.path, (r->args != NULL && *r->args != '\\0' ? \"?\" : \"\"), r->args, NULL);",
          "507:    oidc_warn(r, \"apr_uri_parse failed on non-relative URL: %s\", r->uri);",
          "",
          "[Added Lines]",
          "505:    path = apr_pstrcat(r->pool, uri.path,",
          "506:      (r->args != NULL && *r->args != '\\0' ? \"?\" : \"\"), r->args,",
          "507:      NULL);",
          "509:    oidc_warn(r, \"apr_uri_parse failed on non-relative URL: %s\",",
          "510:      r->uri);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "653:   const apr_table_t *params) {",
          "654:  char *data = NULL;",
          "655:  if ((params != NULL) && (apr_table_elts(params)->nelts > 0)) {",
          "",
          "[Removed Lines]",
          "652: static char *oidc_util_http_form_encoded_data(request_rec *r,",
          "",
          "[Added Lines]",
          "655: char *oidc_util_http_form_encoded_data(request_rec *r,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1497:  return TRUE;",
          "1498: }",
          "1504:  char *data = NULL;",
          "1506:  if (r->method_number != M_POST)",
          "1509:  if (oidc_util_read(r, &data) != TRUE)",
          "1513: }",
          "",
          "[Removed Lines]",
          "1503: apr_byte_t oidc_util_read_post_params(request_rec *r, apr_table_t *table) {",
          "1507:   return FALSE;",
          "1510:   return FALSE;",
          "1512:  return oidc_util_read_form_encoded_params(r, table, data);",
          "",
          "[Added Lines]",
          "1503: static void oidc_userdata_set_post_param(request_rec *r,",
          "1504:   const char *post_param_name, const char *post_param_value) {",
          "1505:  apr_table_t *userdata_post_params = NULL;",
          "1506:  apr_pool_userdata_get((void **) &userdata_post_params,",
          "1507:    OIDC_USERDATA_POST_PARAMS_KEY, r->pool);",
          "1508:  if (userdata_post_params == NULL)",
          "1509:   userdata_post_params = apr_table_make(r->pool, 1);",
          "1510:  apr_table_set(userdata_post_params, post_param_name, post_param_value);",
          "1511:  apr_pool_userdata_set(userdata_post_params, OIDC_USERDATA_POST_PARAMS_KEY,",
          "1512:    NULL, r->pool);",
          "1514: }",
          "1519: apr_byte_t oidc_util_read_post_params(request_rec *r, apr_table_t *table,",
          "1520:   apr_byte_t propagate, const char *strip_param_name) {",
          "1521:  apr_byte_t rc = FALSE;",
          "1523:  const apr_array_header_t *arr = NULL;",
          "1524:  const apr_table_entry_t *elts = NULL;",
          "1525:  int i = 0;",
          "1528:   goto end;",
          "1531:   goto end;",
          "1533:  rc = oidc_util_read_form_encoded_params(r, table, data);",
          "1534:  if (rc != TRUE)",
          "1535:   goto end;",
          "1537:  if (propagate == FALSE)",
          "1538:   goto end;",
          "1540:  arr = apr_table_elts(table);",
          "1541:  elts = (const apr_table_entry_t*) arr->elts;",
          "1542:  for (i = 0; i < arr->nelts; i++)",
          "1543:   if (apr_strnatcmp(elts[i].key, strip_param_name) != 0)",
          "1544:    oidc_userdata_set_post_param(r, elts[i].key, elts[i].val);",
          "1546: end:",
          "1548:  return rc;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2345:  return oidc_util_hdr_in_get(r, OIDC_HTTP_HDR_CONTENT_TYPE);",
          "2346: }",
          "2348: const char *oidc_util_hdr_in_x_requested_with_get(const request_rec *r) {",
          "2349:  return oidc_util_hdr_in_get(r, OIDC_HTTP_HDR_X_REQUESTED_WITH);",
          "2350: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2384: const char *oidc_util_hdr_in_content_length_get(const request_rec *r) {",
          "2385:  return oidc_util_hdr_in_get(r, OIDC_HTTP_HDR_CONTENT_LENGTH);",
          "2386: }",
          "",
          "---------------"
        ],
        "test/stub.c||test/stub.c": [
          "File: test/stub.c -> test/stub.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:  return 0;",
          "145: }",
          "147: AP_DECLARE(void) ap_hook_post_config(",
          "148:   int (*post_config)(apr_pool_t *pool, apr_pool_t *p1, apr_pool_t *p2,",
          "149:     server_rec *s), const char * const *aszPre,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147: AP_DECLARE(int) ap_hook_insert_filter(request_rec *r) {",
          "148:  return 0;",
          "149: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "263:   AP_DECLARE(char *) ap_server_root_relative(apr_pool_t *p, const char *file) {",
          "264:    return \"\";",
          "265:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "271:   AP_DECLARE(ap_filter_t *) ap_add_input_filter(const char *name, void *ctx,",
          "272:     request_rec *r, conn_rec *c) {",
          "273:    return NULL;",
          "274:   }",
          "276:   AP_DECLARE(apr_status_t) ap_get_brigade(ap_filter_t *filter,",
          "277:     apr_bucket_brigade *bucket, ap_input_mode_t mode, apr_read_type_e block,",
          "278:     apr_off_t readbytes) {",
          "279:    return APR_SUCCESS;",
          "280:   }",
          "282:   AP_DECLARE(ap_filter_rec_t *) ap_register_input_filter(const char *name,",
          "283:     ap_in_filter_func filter_func,",
          "284:     ap_init_filter_func filter_init,",
          "285:     ap_filter_type ftype) {",
          "286:    return NULL;",
          "287:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}