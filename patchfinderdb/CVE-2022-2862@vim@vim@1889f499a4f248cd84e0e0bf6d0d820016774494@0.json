{
  "cve_id": "CVE-2022-2862",
  "cve_desc": "Use After Free in GitHub repository vim/vim prior to 9.0.0221.",
  "repo": "vim/vim",
  "patch_hash": "1889f499a4f248cd84e0e0bf6d0d820016774494",
  "patch_info": {
    "commit_hash": "1889f499a4f248cd84e0e0bf6d0d820016774494",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/1889f499a4f248cd84e0e0bf6d0d820016774494",
    "files": [
      "src/testdir/test_vim9_func.vim",
      "src/version.c",
      "src/vim9compile.c"
    ],
    "message": "patch 9.0.0221: accessing freed memory if compiling nested function fails\n\nProblem:    Accessing freed memory if compiling nested function fails.\nSolution:   Mess up the variable name so that it won't be found.",
    "before_after_code_files": [
      "src/testdir/test_vim9_func.vim||src/testdir/test_vim9_func.vim",
      "src/version.c||src/version.c",
      "src/vim9compile.c||src/vim9compile.c"
    ]
  },
  "patch_diff": {
    "src/testdir/test_vim9_func.vim||src/testdir/test_vim9_func.vim": [
      "File: src/testdir/test_vim9_func.vim -> src/testdir/test_vim9_func.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "911:   v9.CheckScriptFailure(lines, 'E1173: Text found after enddef: burp', 3)",
      "912: enddef",
      "914: def Test_not_nested_function()",
      "915:   echo printf('%d',",
      "916:       function('len')('xxx'))",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "914: def Test_nested_function_fails()",
      "915:   var lines =<< trim END",
      "916:       def T()",
      "917:         def Func(g: string):string",
      "918:         enddef",
      "919:         Func()",
      "920:       enddef",
      "921:       silent! defcompile",
      "922:   END",
      "923:   v9.CheckScriptFailure(lines, 'E1069:')",
      "924: enddef",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "736: static int included_patches[] =",
      "739:     220,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "739:     221,",
      "",
      "---------------"
    ],
    "src/vim9compile.c||src/vim9compile.c": [
      "File: src/vim9compile.c -> src/vim9compile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "830:     int  r = FAIL;",
      "831:     compiletype_T   compile_type;",
      "832:     isn_T *funcref_isn = NULL;",
      "834:     if (eap->forceit)",
      "835:     {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "833:     lvar_T *lvar = NULL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "936:     else",
      "937:     {",
      "940:           TRUE, ufunc->uf_func_type);",
      "942:  if (lvar == NULL)",
      "943:      goto theend;",
      "944:  if (generate_FUNCREF(cctx, ufunc, &funcref_isn) == FAIL)",
      "",
      "[Removed Lines]",
      "939:  lvar_T *lvar = reserve_local(cctx, func_name, name_end - name_start,",
      "",
      "[Added Lines]",
      "940:  lvar = reserve_local(cctx, func_name, name_end - name_start,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "957:      && compile_def_function(ufunc, TRUE, compile_type, cctx) == FAIL)",
      "958:     {",
      "959:  func_ptr_unref(ufunc);",
      "960:  goto theend;",
      "961:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "960:  if (lvar != NULL)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a915fa010330ee7212e06d3511acd363d04d2d28",
      "candidate_info": {
        "commit_hash": "a915fa010330ee7212e06d3511acd363d04d2d28",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/a915fa010330ee7212e06d3511acd363d04d2d28",
        "files": [
          "src/proto/vim9instr.pro",
          "src/testdir/test_vim9_func.vim",
          "src/version.c",
          "src/vim9compile.c",
          "src/vim9expr.c",
          "src/vim9instr.c"
        ],
        "message": "patch 8.2.4612: Vim9: cannot use a recursive call in a nested function\n\nProblem:    Vim9: cannot use a recursive call in a nested function. (Sergey\n            Vlasov)\nSolution:   Define the funcref before compiling the function. (closes #9989)",
        "before_after_code_files": [
          "src/proto/vim9instr.pro||src/proto/vim9instr.pro",
          "src/testdir/test_vim9_func.vim||src/testdir/test_vim9_func.vim",
          "src/version.c||src/version.c",
          "src/vim9compile.c||src/vim9compile.c",
          "src/vim9expr.c||src/vim9expr.c",
          "src/vim9instr.c||src/vim9instr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/testdir/test_vim9_func.vim||src/testdir/test_vim9_func.vim",
            "src/version.c||src/version.c",
            "src/vim9compile.c||src/vim9compile.c"
          ],
          "candidate": [
            "src/testdir/test_vim9_func.vim||src/testdir/test_vim9_func.vim",
            "src/version.c||src/version.c",
            "src/vim9compile.c||src/vim9compile.c"
          ]
        }
      },
      "candidate_diff": {
        "src/proto/vim9instr.pro||src/proto/vim9instr.pro": [
          "File: src/proto/vim9instr.pro -> src/proto/vim9instr.pro",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: int generate_VIM9SCRIPT(cctx_T *cctx, isntype_T isn_type, int sid, int idx, type_T *type);",
          "39: int generate_NEWLIST(cctx_T *cctx, int count);",
          "40: int generate_NEWDICT(cctx_T *cctx, int count);",
          "42: int generate_NEWFUNC(cctx_T *cctx, char_u *lambda_name, char_u *func_name);",
          "43: int generate_DEF(cctx_T *cctx, char_u *name, size_t len);",
          "44: int generate_JUMP(cctx_T *cctx, jumpwhen_T when, int where);",
          "",
          "[Removed Lines]",
          "41: int generate_FUNCREF(cctx_T *cctx, ufunc_T *ufunc);",
          "",
          "[Added Lines]",
          "41: int generate_FUNCREF(cctx_T *cctx, ufunc_T *ufunc, isn_T **isnp);",
          "",
          "---------------"
        ],
        "src/testdir/test_vim9_func.vim||src/testdir/test_vim9_func.vim": [
          "File: src/testdir/test_vim9_func.vim -> src/testdir/test_vim9_func.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "876:   END",
          "877:   v9.CheckScriptSuccess(lines)",
          "879:   lines =<< trim END",
          "880:       vim9script",
          "881:       def Outer()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "879:   # nested function with recursive call",
          "880:   lines =<< trim END",
          "881:       vim9script",
          "883:       def MyFunc(): number",
          "884:         def Fib(n: number): number",
          "885:           if n < 2",
          "886:             return 1",
          "887:           endif",
          "888:           return Fib(n - 2) + Fib(n - 1)",
          "889:         enddef",
          "891:         return Fib(5)",
          "892:       enddef",
          "894:       assert_equal(8, MyFunc())",
          "895:   END",
          "896:   v9.CheckScriptSuccess(lines)",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "751: static int included_patches[] =",
          "754:     4611,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "754:     4612,",
          "",
          "---------------"
        ],
        "src/vim9compile.c||src/vim9compile.c": [
          "File: src/vim9compile.c -> src/vim9compile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "818:     ufunc_T *ufunc;",
          "819:     int  r = FAIL;",
          "820:     compiletype_T   compile_type;",
          "822:     if (eap->forceit)",
          "823:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "821:     isn_T *funcref_isn = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "913:  }",
          "914:     }",
          "916:     compile_type = get_compile_type(ufunc);",
          "917: #ifdef FEAT_PROFILE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "919:     if (is_global)",
          "920:     {",
          "921:  r = generate_NEWFUNC(cctx, lambda_name, func_name);",
          "922:  func_name = NULL;",
          "923:  lambda_name = NULL;",
          "924:     }",
          "925:     else",
          "926:     {",
          "928:  lvar_T *lvar = reserve_local(cctx, func_name, name_end - name_start,",
          "929:           TRUE, ufunc->uf_func_type);",
          "931:  if (lvar == NULL)",
          "932:      goto theend;",
          "933:  if (generate_FUNCREF(cctx, ufunc, &funcref_isn) == FAIL)",
          "934:      goto theend;",
          "935:  r = generate_STORE(cctx, ISN_STORE, lvar->lv_idx, NULL);",
          "936:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "934:  compile_def_function(ufunc, FALSE, CT_NONE, cctx);",
          "935: #endif",
          "956: theend:",
          "957:     vim_free(lambda_name);",
          "",
          "[Removed Lines]",
          "937:     if (is_global)",
          "938:     {",
          "939:  r = generate_NEWFUNC(cctx, lambda_name, func_name);",
          "940:  func_name = NULL;",
          "941:  lambda_name = NULL;",
          "942:     }",
          "943:     else",
          "944:     {",
          "946:  lvar_T *lvar = reserve_local(cctx, func_name, name_end - name_start,",
          "947:           TRUE, ufunc->uf_func_type);",
          "949:  if (lvar == NULL)",
          "950:      goto theend;",
          "951:  if (generate_FUNCREF(cctx, ufunc) == FAIL)",
          "952:      goto theend;",
          "953:  r = generate_STORE(cctx, ISN_STORE, lvar->lv_idx, NULL);",
          "954:     }",
          "",
          "[Added Lines]",
          "960:     if (funcref_isn != NULL && ufunc->uf_def_status == UF_COMPILED)",
          "961:  funcref_isn->isn_arg.funcref.fr_dfunc_idx = ufunc->uf_dfunc_idx;",
          "",
          "---------------"
        ],
        "src/vim9expr.c||src/vim9expr.c": [
          "File: src/vim9expr.c -> src/vim9expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1044:     }",
          "1046:     func_ptr_unref(ufunc);",
          "",
          "[Removed Lines]",
          "1043:  return generate_FUNCREF(cctx, ufunc);",
          "",
          "[Added Lines]",
          "1043:  return generate_FUNCREF(cctx, ufunc, NULL);",
          "",
          "---------------"
        ],
        "src/vim9instr.c||src/vim9instr.c": [
          "File: src/vim9instr.c -> src/vim9instr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1176:     int",
          "1178: {",
          "1179:     isn_T *isn;",
          "1180:     type_T *type;",
          "",
          "[Removed Lines]",
          "1177: generate_FUNCREF(cctx_T *cctx, ufunc_T *ufunc)",
          "",
          "[Added Lines]",
          "1178: generate_FUNCREF(cctx_T *cctx, ufunc_T *ufunc, isn_T **isnp)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1182:     RETURN_OK_IF_SKIP(cctx);",
          "1183:     if ((isn = generate_instr(cctx, ISN_FUNCREF)) == NULL)",
          "1184:  return FAIL;",
          "1185:     if (ufunc->uf_def_status == UF_NOT_COMPILED)",
          "1186:  isn->isn_arg.funcref.fr_func_name = vim_strsave(ufunc->uf_name);",
          "1187:     else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1186:     if (isnp != NULL)",
          "",
          "---------------"
        ]
      }
    }
  ]
}