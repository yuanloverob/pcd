{
  "cve_id": "CVE-2014-6228",
  "cve_desc": "Integer overflow in the string_chunk_split function in hphp/runtime/base/zend-string.cpp in Facebook HipHop Virtual Machine (HHVM) before 3.3.0 allows remote attackers to cause a denial of service (application crash) or possibly have unspecified other impact via crafted arguments to the chunk_split function.",
  "repo": "facebook/hhvm",
  "patch_hash": "1f91e076a585118495b976a413c1df40f6fd3d41",
  "patch_info": {
    "commit_hash": "1f91e076a585118495b976a413c1df40f6fd3d41",
    "repo": "facebook/hhvm",
    "commit_url": "https://github.com/facebook/hhvm/commit/1f91e076a585118495b976a413c1df40f6fd3d41",
    "files": [
      "hphp/runtime/base/zend-string.cpp",
      "hphp/test/slow/ext_string/chunk_split_overflow.php",
      "hphp/test/slow/ext_string/chunk_split_overflow.php.expectf"
    ],
    "message": "Fix integer overflow in chunk_split\n\nReviewed By: @ptarjan\n\nDifferential Revision: D1515947",
    "before_after_code_files": [
      "hphp/runtime/base/zend-string.cpp||hphp/runtime/base/zend-string.cpp",
      "hphp/test/slow/ext_string/chunk_split_overflow.php||hphp/test/slow/ext_string/chunk_split_overflow.php",
      "hphp/test/slow/ext_string/chunk_split_overflow.php.expectf||hphp/test/slow/ext_string/chunk_split_overflow.php.expectf"
    ]
  },
  "patch_diff": {
    "hphp/runtime/base/zend-string.cpp||hphp/runtime/base/zend-string.cpp": [
      "File: hphp/runtime/base/zend-string.cpp -> hphp/runtime/base/zend-string.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "626:   int chunks = srclen / chunklen; // complete chunks!",
      "631:   char *dest = ret.bufferSlice().ptr;",
      "633:   const char *p; char *q;",
      "",
      "[Removed Lines]",
      "629:   int out_len = (chunks + 1) * endlen + srclen;",
      "630:   String ret(out_len, ReserveString);",
      "",
      "[Added Lines]",
      "629:   String ret(",
      "630:     safe_address(",
      "631:       chunks + 1,",
      "632:       endlen,",
      "633:       srclen",
      "634:     ),",
      "635:     ReserveString",
      "636:   );",
      "",
      "---------------"
    ],
    "hphp/test/slow/ext_string/chunk_split_overflow.php||hphp/test/slow/ext_string/chunk_split_overflow.php": [
      "File: hphp/test/slow/ext_string/chunk_split_overflow.php -> hphp/test/slow/ext_string/chunk_split_overflow.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?php",
      "3: chunk_split(str_repeat('*', 2000000), 1.0, str_repeat('*', 2000000));",
      "",
      "---------------"
    ],
    "hphp/test/slow/ext_string/chunk_split_overflow.php.expectf||hphp/test/slow/ext_string/chunk_split_overflow.php.expectf": [
      "File: hphp/test/slow/ext_string/chunk_split_overflow.php.expectf -> hphp/test/slow/ext_string/chunk_split_overflow.php.expectf",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2: Fatal error: String length exceeded 2^31-2: 4000004000000 in %s on line 3",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "36fdad9a6213ac149866f7e621bfa5981debde6b",
      "candidate_info": {
        "commit_hash": "36fdad9a6213ac149866f7e621bfa5981debde6b",
        "repo": "facebook/hhvm",
        "commit_url": "https://github.com/facebook/hhvm/commit/36fdad9a6213ac149866f7e621bfa5981debde6b",
        "files": [
          "hphp/runtime/base/string-util.cpp",
          "hphp/runtime/base/zend-string.cpp",
          "hphp/runtime/base/zend-string.h",
          "hphp/runtime/ext/ext_iconv.cpp",
          "hphp/runtime/ext/ext_process.cpp",
          "hphp/runtime/ext/ext_string.cpp",
          "hphp/runtime/server/replay-transport.cpp"
        ],
        "message": "Replace malloc with smart versions (zend-string)\n\nSummary: Some more conversions.\n\nReviewed By: @scannell\n\nDifferential Revision: D1302545",
        "before_after_code_files": [
          "hphp/runtime/base/string-util.cpp||hphp/runtime/base/string-util.cpp",
          "hphp/runtime/base/zend-string.cpp||hphp/runtime/base/zend-string.cpp",
          "hphp/runtime/base/zend-string.h||hphp/runtime/base/zend-string.h",
          "hphp/runtime/ext/ext_iconv.cpp||hphp/runtime/ext/ext_iconv.cpp",
          "hphp/runtime/ext/ext_process.cpp||hphp/runtime/ext/ext_process.cpp",
          "hphp/runtime/ext/ext_string.cpp||hphp/runtime/ext/ext_string.cpp",
          "hphp/runtime/server/replay-transport.cpp||hphp/runtime/server/replay-transport.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "hphp/runtime/base/zend-string.cpp||hphp/runtime/base/zend-string.cpp"
          ],
          "candidate": [
            "hphp/runtime/base/zend-string.cpp||hphp/runtime/base/zend-string.cpp"
          ]
        }
      },
      "candidate_diff": {
        "hphp/runtime/base/string-util.cpp||hphp/runtime/base/string-util.cpp": [
          "File: hphp/runtime/base/string-util.cpp -> hphp/runtime/base/string-util.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:                        const String& pad_string /* = \" \" */,",
          "34:                        PadType type /* = PadType::Right */) {",
          "35:   int len = input.size();",
          "40: }",
          "42: String StringUtil::StripHTMLTags(const String& input,",
          "",
          "[Removed Lines]",
          "36:   char *ret = string_pad(input.data(), len, final_length, pad_string.data(),",
          "37:                          pad_string.size(), static_cast<int>(type));",
          "38:   if (ret) return String(ret, len, AttachString);",
          "39:   return String();",
          "",
          "[Added Lines]",
          "36:   return string_pad(input.data(), len, final_length, pad_string.data(),",
          "37:                     pad_string.size(), static_cast<int>(type));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "190:     ret = body;",
          "191:     ret += end;",
          "192:   } else {",
          "196:   }",
          "197:   return ret;",
          "198: }",
          "",
          "[Removed Lines]",
          "193:     char *chunked = string_chunk_split(body.data(), len, end.c_str(),",
          "194:                                        end.size(), chunklen);",
          "195:     return String(chunked, len, AttachString);",
          "",
          "[Added Lines]",
          "191:     return string_chunk_split(body.data(), len, end.c_str(),",
          "192:                               end.size(), chunklen);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "335: String StringUtil::QuotedPrintableEncode(const String& input) {",
          "336:   if (input.empty()) return input;",
          "337:   int len = input.size();",
          "340: }",
          "342: String StringUtil::QuotedPrintableDecode(const String& input) {",
          "343:   if (input.empty()) return input;",
          "344:   int len = input.size();",
          "347: }",
          "349: String StringUtil::UUEncode(const String& input) {",
          "350:   if (input.empty()) return input;",
          "355: }",
          "357: String StringUtil::UUDecode(const String& input) {",
          "358:   if (!input.empty()) {",
          "364:   }",
          "365:   return String();",
          "366: }",
          "368: String StringUtil::Base64Encode(const String& input) {",
          "369:   int len = input.size();",
          "372: }",
          "374: String StringUtil::Base64Decode(const String& input,",
          "",
          "[Removed Lines]",
          "338:   char *ret = string_quoted_printable_encode(input.data(), len);",
          "339:   return String(ret, len, AttachString);",
          "345:   char *ret = string_quoted_printable_decode(input.data(), len, false);",
          "346:   return String(ret, len, AttachString);",
          "352:   int len;",
          "353:   char *encoded = string_uuencode(input.data(), input.size(), len);",
          "354:   return String(encoded, len, AttachString);",
          "359:     int len;",
          "360:     char *decoded = string_uudecode(input.data(), input.size(), len);",
          "361:     if (decoded) {",
          "362:       return String(decoded, len, AttachString);",
          "363:     }",
          "370:   char *ret = string_base64_encode(input.data(), len);",
          "371:   return String(ret, len, AttachString);",
          "",
          "[Added Lines]",
          "335:   return string_quoted_printable_encode(input.data(), len);",
          "341:   return string_quoted_printable_decode(input.data(), len, false);",
          "346:   return string_uuencode(input.data(), input.size());",
          "351:     return string_uudecode(input.data(), input.size());",
          "358:   return string_base64_encode(input.data(), len);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "408: String StringUtil::MoneyFormat(const char *format, double value) {",
          "409:   assert(format);",
          "412: }",
          "",
          "[Removed Lines]",
          "410:   char *formatted = string_money_format(format, value);",
          "411:   return formatted ? String(formatted, AttachString) : String();",
          "",
          "[Added Lines]",
          "397:   return string_money_format(format, value);",
          "",
          "---------------"
        ],
        "hphp/runtime/base/zend-string.cpp||hphp/runtime/base/zend-string.cpp": [
          "File: hphp/runtime/base/zend-string.cpp -> hphp/runtime/base/zend-string.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "304: #define STR_PAD_RIGHT           1",
          "305: #define STR_PAD_BOTH            2",
          "310:   assert(input);",
          "311:   int num_pad_chars = pad_length - len;",
          "315:   if (pad_length < 0 || num_pad_chars < 0) {",
          "317:   }",
          "320:   if (pad_str_len == 0) {",
          "321:     throw_invalid_argument(\"pad_string: (empty)\");",
          "323:   }",
          "328:   int left_pad, right_pad;",
          "",
          "[Removed Lines]",
          "307: char *string_pad(const char *input, int &len, int pad_length,",
          "308:                  const char *pad_string, int pad_str_len,",
          "309:                  int pad_type) {",
          "316:     return string_duplicate(input, len);",
          "322:     return nullptr;",
          "325:   char *result = (char *)malloc(pad_length + 1);",
          "",
          "[Added Lines]",
          "307: String string_pad(const char *input, int len, int pad_length,",
          "308:                   const char *pad_string, int pad_str_len,",
          "309:                   int pad_type) {",
          "316:     return String(input, len, CopyString);",
          "322:     return String();",
          "325:   String ret(pad_length, ReserveString);",
          "326:   char *result = ret.bufferSlice().ptr;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "341:     break;",
          "342:   default:",
          "343:     throw_invalid_argument(\"pad_type: %d\", pad_type);",
          "345:   }",
          "",
          "[Removed Lines]",
          "344:     return nullptr;",
          "",
          "[Added Lines]",
          "345:     return String();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "358:   for (int i = 0; i < right_pad; i++) {",
          "359:     result[result_len++] = pad_string[i % pad_str_len];",
          "360:   }",
          "365: }",
          "",
          "[Removed Lines]",
          "361:   result[result_len] = '\\0';",
          "363:   len = result_len;",
          "364:   return result;",
          "",
          "[Added Lines]",
          "362:   ret.setSize(result_len);",
          "364:   return ret;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "648:   int chunks = srclen / chunklen; // complete chunks!",
          "654:   const char *p; char *q;",
          "655:   const char *pMax = src + srclen - chunklen + 1;",
          "",
          "[Removed Lines]",
          "592: char *string_reverse(const char *s, int len) {",
          "593:   assert(s);",
          "594:   char *n = (char *)malloc(len + 1);",
          "595:   char *p = n;",
          "596:   const char *e = s + len;",
          "598:   while (--e >= s) {",
          "600:   }",
          "603:   return n;",
          "604: }",
          "606: char *string_repeat(const char *s, int &len, int count) {",
          "607:   assert(s);",
          "609:   if (len == 0 || count <= 0) {",
          "610:     return nullptr;",
          "611:   }",
          "613:   char *ret = (char *)malloc(len * count + 1);",
          "614:   if (len == 1) {",
          "615:     memset(ret, *s, count);",
          "616:     len = count;",
          "617:   } else {",
          "618:     char *p = ret;",
          "619:     for (int i = 0; i < count; i++) {",
          "620:       memcpy(p, s, len);",
          "621:       p += len;",
          "622:     }",
          "623:     len = p - ret;",
          "624:   }",
          "625:   ret[len] = '\\0';",
          "626:   return ret;",
          "627: }",
          "629: char *string_shuffle(const char *str, int len) {",
          "630:   assert(str);",
          "631:   if (len <= 1) {",
          "632:     return nullptr;",
          "633:   }",
          "635:   char *ret = string_duplicate(str, len);",
          "636:   int n_left = len;",
          "637:   while (--n_left) {",
          "638:     int rnd_idx = rand() % n_left;",
          "639:     char temp = ret[n_left];",
          "640:     ret[n_left] = ret[rnd_idx];",
          "641:     ret[rnd_idx] = temp;",
          "642:   }",
          "643:   return ret;",
          "644: }",
          "646: char *string_chunk_split(const char *src, int &srclen, const char *end,",
          "647:                          int endlen, int chunklen) {",
          "651:   int out_len = (chunks + 1) * endlen + srclen + 1;",
          "652:   char *dest = (char *)malloc(out_len);",
          "",
          "[Added Lines]",
          "592: String string_chunk_split(const char *src, int srclen, const char *end,",
          "593:                           int endlen, int chunklen) {",
          "597:   int out_len = (chunks + 1) * endlen + srclen;",
          "598:   String ret(out_len, ReserveString);",
          "599:   char *dest = ret.bufferSlice().ptr;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "668:     q += endlen;",
          "669:   }",
          "674: }",
          "",
          "[Removed Lines]",
          "672:   srclen = q - dest;",
          "673:   return(dest);",
          "",
          "[Added Lines]",
          "618:   ret.setSize(q - dest);",
          "619:   return ret;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "695:     return 0;",
          "696:   }",
          "700:   n = norm;",
          "701:   t = tag;",
          "",
          "[Removed Lines]",
          "698:   norm = (char *)malloc(len+1);",
          "",
          "[Added Lines]",
          "644:   norm = (char *)smart_malloc(len+1);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "736:   } else {",
          "737:     done=0;",
          "738:   }",
          "740:   return done;",
          "741: }",
          "",
          "[Removed Lines]",
          "739:   free(norm);",
          "",
          "[Added Lines]",
          "685:   smart_free(norm);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "779:     for (char *tmp = allow; *tmp; tmp++) {",
          "781:     }",
          "783:     tp = tbuf;",
          "784:   } else {",
          "785:     tbuf = tp = nullptr;",
          "",
          "[Removed Lines]",
          "782:     tbuf = (char *)malloc(PHP_TAG_BUF_SIZE+1);",
          "",
          "[Added Lines]",
          "728:     tbuf = (char *)smart_malloc(PHP_TAG_BUF_SIZE+1);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "788:   auto move = [&pos, &tbuf, &tp]() {",
          "789:     if (tp - tbuf >= PHP_TAG_BUF_SIZE) {",
          "790:       pos = tp - tbuf;",
          "792:       tp = tbuf + pos;",
          "793:     }",
          "794:   };",
          "",
          "[Removed Lines]",
          "791:       tbuf = (char*)realloc(tbuf, (tp - tbuf) + PHP_TAG_BUF_SIZE + 1);",
          "",
          "[Added Lines]",
          "737:       tbuf = (char*)smart_realloc(tbuf, (tp - tbuf) + PHP_TAG_BUF_SIZE + 1);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "994:   }",
          "995:   free(buf);",
          "996:   if (allow)",
          "998:   if (stateptr)",
          "",
          "[Removed Lines]",
          "997:     free(tbuf);",
          "",
          "[Added Lines]",
          "943:     smart_free(tbuf);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1253: char *string_addslashes(const char *str, int &length) {",
          "1254:   assert(str);",
          "1255:   if (length == 0) {",
          "",
          "[Removed Lines]",
          "1018: char *string_wordwrap(const char *text, int &textlen, int linelength,",
          "1019:                       const char *breakchar, int breakcharlen, bool docut) {",
          "1020:   assert(text);",
          "1021:   assert(breakchar);",
          "1023:   char *newtext;",
          "1024:   int newtextlen, chk;",
          "1025:   size_t alloced;",
          "1026:   long current = 0, laststart = 0, lastspace = 0;",
          "1028:   if (textlen == 0) {",
          "1029:     return strdup(\"\");",
          "1030:   }",
          "1032:   if (breakcharlen == 0) {",
          "1033:     throw_invalid_argument(\"wordbreak: (empty)\");",
          "1034:     return nullptr;",
          "1035:   }",
          "1037:   if (linelength == 0 && docut) {",
          "1038:     throw_invalid_argument(\"width: can't force cut when width = 0\");",
          "1039:     return nullptr;",
          "1040:   }",
          "1044:   if (breakcharlen == 1 && !docut) {",
          "1045:     newtext = string_duplicate(text, textlen);",
          "1047:     laststart = lastspace = 0;",
          "1048:     for (current = 0; current < textlen; current++) {",
          "1049:       if (text[current] == breakchar[0]) {",
          "1050:         laststart = lastspace = current;",
          "1051:       } else if (text[current] == ' ') {",
          "1052:         if (current - laststart >= linelength) {",
          "1053:           newtext[current] = breakchar[0];",
          "1054:           laststart = current + 1;",
          "1055:         }",
          "1056:         lastspace = current;",
          "1057:       } else if (current - laststart >= linelength && laststart != lastspace) {",
          "1058:         newtext[lastspace] = breakchar[0];",
          "1059:         laststart = lastspace + 1;",
          "1060:       }",
          "1061:     }",
          "1063:     return newtext;",
          "1064:   }",
          "1067:   if (linelength > 0) {",
          "1068:     chk = (int)(textlen/linelength + 1);",
          "1069:     alloced = textlen + chk * breakcharlen + 1;",
          "1070:   } else {",
          "1071:     chk = textlen;",
          "1072:     alloced = textlen * (breakcharlen + 1) + 1;",
          "1073:   }",
          "1074:   newtext = (char *)malloc(alloced);",
          "1077:   newtextlen = 0;",
          "1079:   laststart = lastspace = 0;",
          "1080:   for (current = 0; current < textlen; current++) {",
          "1081:     if (chk <= 0) {",
          "1082:       alloced += (int) (((textlen - current + 1)/linelength + 1) *",
          "1083:                         breakcharlen) + 1;",
          "1084:       newtext = (char *)realloc(newtext, alloced);",
          "1085:       chk = (int) ((textlen - current)/linelength) + 1;",
          "1086:     }",
          "1089:     if (text[current] == breakchar[0]",
          "1090:         && current + breakcharlen < textlen",
          "1091:         && !strncmp(text+current, breakchar, breakcharlen)) {",
          "1092:       memcpy(newtext+newtextlen, text+laststart,",
          "1093:              current-laststart+breakcharlen);",
          "1094:       newtextlen += current-laststart+breakcharlen;",
          "1095:       current += breakcharlen - 1;",
          "1096:       laststart = lastspace = current + 1;",
          "1097:       chk--;",
          "1098:     }",
          "1101:     else if (text[current] == ' ') {",
          "1102:       if (current - laststart >= linelength) {",
          "1103:         memcpy(newtext+newtextlen, text+laststart, current-laststart);",
          "1104:         newtextlen += current - laststart;",
          "1105:         memcpy(newtext+newtextlen, breakchar, breakcharlen);",
          "1106:         newtextlen += breakcharlen;",
          "1107:         laststart = current + 1;",
          "1108:         chk--;",
          "1109:       }",
          "1110:       lastspace = current;",
          "1111:     }",
          "1115:     else if (current - laststart >= linelength",
          "1116:              && docut && laststart >= lastspace) {",
          "1117:       memcpy(newtext+newtextlen, text+laststart, current-laststart);",
          "1118:       newtextlen += current - laststart;",
          "1119:       memcpy(newtext+newtextlen, breakchar, breakcharlen);",
          "1120:       newtextlen += breakcharlen;",
          "1121:       laststart = lastspace = current;",
          "1122:       chk--;",
          "1123:     }",
          "1127:     else if (current - laststart >= linelength",
          "1128:              && laststart < lastspace) {",
          "1129:       memcpy(newtext+newtextlen, text+laststart, lastspace-laststart);",
          "1130:       newtextlen += lastspace - laststart;",
          "1131:       memcpy(newtext+newtextlen, breakchar, breakcharlen);",
          "1132:       newtextlen += breakcharlen;",
          "1133:       laststart = lastspace = lastspace + 1;",
          "1134:       chk--;",
          "1135:     }",
          "1136:   }",
          "1139:   if (laststart != current) {",
          "1140:     memcpy(newtext+newtextlen, text+laststart, current-laststart);",
          "1141:     newtextlen += current - laststart;",
          "1142:   }",
          "1144:   textlen = newtextlen;",
          "1145:   newtext[newtextlen] = '\\0';",
          "1146:   return newtext;",
          "1147: }",
          "1151: char *string_addcslashes(const char *str, int &length, const char *what,",
          "1152:                          int wlength) {",
          "1153:   assert(str);",
          "1154:   assert(what);",
          "1156:   char flags[256];",
          "1157:   string_charmask(what, wlength, flags);",
          "1159:   char *new_str = (char *)malloc((length << 2) + 1);",
          "1160:   const char *source;",
          "1161:   const char *end;",
          "1162:   char *target;",
          "1163:   for (source = str, end = source + length, target = new_str; source < end;",
          "1164:        source++) {",
          "1165:     char c = *source;",
          "1166:     if (flags[(unsigned char)c]) {",
          "1167:       if ((unsigned char) c < 32 || (unsigned char) c > 126) {",
          "1169:         switch (c) {",
          "1170:         case '\\n': *target++ = 'n'; break;",
          "1171:         case '\\t': *target++ = 't'; break;",
          "1172:         case '\\r': *target++ = 'r'; break;",
          "1173:         case '\\a': *target++ = 'a'; break;",
          "1174:         case '\\v': *target++ = 'v'; break;",
          "1175:         case '\\b': *target++ = 'b'; break;",
          "1176:         case '\\f': *target++ = 'f'; break;",
          "1177:         default: target += sprintf(target, \"%03o\", (unsigned char) c);",
          "1178:         }",
          "1179:         continue;",
          "1180:       }",
          "1182:     }",
          "1184:   }",
          "1186:   length = target - new_str;",
          "1187:   return new_str;",
          "1188: }",
          "1190: char *string_stripcslashes(const char *input, int &nlen) {",
          "1191:   assert(input);",
          "1192:   if (nlen == 0) {",
          "1193:     return nullptr;",
          "1194:   }",
          "1196:   char *str = string_duplicate(input, nlen);",
          "1198:   char *source, *target, *end;",
          "1199:   int i;",
          "1200:   char numtmp[4];",
          "1202:   for (source=str, end=str+nlen, target=str; source < end; source++) {",
          "1203:     if (*source == '\\\\' && source+1 < end) {",
          "1204:       source++;",
          "1205:       switch (*source) {",
          "1206:       case 'n':  *target++='\\n'; nlen--; break;",
          "1207:       case 'r':  *target++='\\r'; nlen--; break;",
          "1208:       case 'a':  *target++='\\a'; nlen--; break;",
          "1209:       case 't':  *target++='\\t'; nlen--; break;",
          "1210:       case 'v':  *target++='\\v'; nlen--; break;",
          "1211:       case 'b':  *target++='\\b'; nlen--; break;",
          "1212:       case 'f':  *target++='\\f'; nlen--; break;",
          "1213:       case '\\\\': *target++='\\\\'; nlen--; break;",
          "1214:       case 'x':",
          "1215:         if (source+1 < end && isxdigit((int)(*(source+1)))) {",
          "1216:           numtmp[0] = *++source;",
          "1217:           if (source+1 < end && isxdigit((int)(*(source+1)))) {",
          "1218:             numtmp[1] = *++source;",
          "1219:             numtmp[2] = '\\0';",
          "1220:             nlen-=3;",
          "1221:           } else {",
          "1222:             numtmp[1] = '\\0';",
          "1223:             nlen-=2;",
          "1224:           }",
          "1226:           break;",
          "1227:         }",
          "1229:       default:",
          "1230:         i=0;",
          "1231:         while (source < end && *source >= '0' && *source <= '7' && i<3) {",
          "1232:           numtmp[i++] = *source++;",
          "1233:         }",
          "1234:         if (i) {",
          "1235:           numtmp[i]='\\0';",
          "1237:           nlen-=i;",
          "1238:           source--;",
          "1239:         } else {",
          "1241:           nlen--;",
          "1242:         }",
          "1243:       }",
          "1244:     } else {",
          "1246:     }",
          "1247:   }",
          "1249:   nlen = target - str;",
          "1250:   return str;",
          "1251: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1285:   return new_str;",
          "1286: }",
          "1359: static char string_hex2int(int c) {",
          "",
          "[Removed Lines]",
          "1288: char *string_stripslashes(const char *input, int &l) {",
          "1289:   assert(input);",
          "1290:   if (!*input) {",
          "1291:     return nullptr;",
          "1292:   }",
          "1294:   char *str = string_duplicate(input, l);",
          "1295:   char *s, *t;",
          "1296:   s = str;",
          "1297:   t = str;",
          "1299:   while (l > 0) {",
          "1300:     if (*t == '\\\\') {",
          "1302:       l--;",
          "1303:       if (l > 0) {",
          "1304:         if (*t == '0') {",
          "1306:           t++;",
          "1307:         } else {",
          "1309:         }",
          "1310:         l--;",
          "1311:       }",
          "1312:     } else {",
          "1314:       l--;",
          "1315:     }",
          "1316:   }",
          "1317:   if (s != t) {",
          "1319:   }",
          "1320:   l = s - str;",
          "1321:   return str;",
          "1322: }",
          "1324: char *string_quotemeta(const char *input, int &len) {",
          "1325:   assert(input);",
          "1326:   if (len == 0) {",
          "1327:     return nullptr;",
          "1328:   }",
          "1330:   char *ret = (char *)malloc((len << 1) + 1);",
          "1331:   char *q = ret;",
          "1332:   for (const char *p = input; *p; p++) {",
          "1333:     char c = *p;",
          "1334:     switch (c) {",
          "1335:     case '.':",
          "1336:     case '\\\\':",
          "1337:     case '+':",
          "1338:     case '*':",
          "1339:     case '?':",
          "1340:     case '[':",
          "1341:     case '^':",
          "1342:     case ']':",
          "1343:     case '$':",
          "1344:     case '(':",
          "1345:     case ')':",
          "1348:     default:",
          "1350:     }",
          "1351:   }",
          "1353:   len = q - ret;",
          "1354:   return ret;",
          "1355: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1369:   return -1;",
          "1370: }",
          "1373:   size_t length = len;",
          "1374:   const unsigned char *str = (unsigned char*)input;",
          "1376:   unsigned long lp = 0;",
          "1377:   unsigned char c;",
          "1379:   char *hex = \"0123456789ABCDEF\";",
          "1382:     safe_address(",
          "1383:       3,",
          "1384:       length + ((safe_address(3, length, 0)/(PHP_QPRINT_MAXL-9)) + 1),",
          "1386:   );",
          "1389:   while (length--) {",
          "1390:     if (((c = *str++) == '\\015') && (*str == '\\012') && length > 0) {",
          "",
          "[Removed Lines]",
          "1372: char *string_quoted_printable_encode(const char *input, int &len) {",
          "1378:   char *d, *ret;",
          "1381:   ret = (char*)malloc(",
          "1385:       1)",
          "1387:   d = ret;",
          "",
          "[Added Lines]",
          "1014: String string_quoted_printable_encode(const char *input, int len) {",
          "1020:   char *d, *buffer;",
          "1023:   String ret(",
          "1027:       1),",
          "1028:     ReserveString",
          "1030:   d = buffer = ret.bufferSlice().ptr;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1418:       }",
          "1419:     }",
          "1420:   }",
          "1425:   return ret;",
          "1426: }",
          "1429:   assert(input);",
          "1430:   if (len == 0) {",
          "1432:   }",
          "1434:   int i = 0, j = 0, k;",
          "1435:   const char *str_in = input;",
          "1437:   while (i < len && str_in[i]) {",
          "1438:     switch (str_in[i]) {",
          "1439:     case '=':",
          "",
          "[Removed Lines]",
          "1422:   len = d - ret;",
          "1424:   ret = (char*)realloc(ret, len + 1);",
          "1428: char *string_quoted_printable_decode(const char *input, int &len, bool is_q) {",
          "1431:     return nullptr;",
          "1436:   char *str_out = (char *)malloc(len + 1);",
          "",
          "[Added Lines]",
          "1064:   len = d - buffer;",
          "1066:   ret.setSize(len);",
          "1070: String string_quoted_printable_decode(const char *input, int len, bool is_q) {",
          "1073:     return String();",
          "1078:   String ret(len, ReserveString);",
          "1079:   char *str_out = ret.bufferSlice().ptr;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1479:       str_out[j++] = str_in[i++];",
          "1480:     }",
          "1481:   }",
          "1520: }",
          "1522: Variant string_base_to_numeric(const char *s, int len, int base) {",
          "",
          "[Removed Lines]",
          "1482:   str_out[j] = '\\0';",
          "1483:   len = j;",
          "1484:   return str_out;",
          "1485: }",
          "1487: char *string_hex2bin(const char *input, int &len) {",
          "1488:   if (len % 2 != 0) {",
          "1489:     throw InvalidArgumentException(\"hex2bin: odd length input\");",
          "1490:   }",
          "1491:   len >>= 1;",
          "1492:   char *str = (char *)malloc(len + 1);",
          "1493:   int i, j;",
          "1494:   for (i = j = 0; i < len; i++) {",
          "1495:     char c = input[j++];",
          "1496:     if (c >= '0' && c <= '9') {",
          "1497:       str[i] = (c - '0') << 4;",
          "1498:     } else if (c >= 'a' && c <= 'f') {",
          "1499:       str[i] = (c - 'a' + 10) << 4;",
          "1500:     } else if (c >= 'A' && c <= 'F') {",
          "1501:       str[i] = (c - 'A' + 10) << 4;",
          "1502:     } else {",
          "1503:       free(str);",
          "1504:       throw InvalidArgumentException(\"bad encoding at position\", j);",
          "1505:     }",
          "1506:     c = input[j++];",
          "1507:     if (c >= '0' && c <= '9') {",
          "1508:       str[i] |= c - '0';",
          "1509:     } else if (c >= 'a' && c <= 'f') {",
          "1510:       str[i] |= c - 'a' + 10;",
          "1511:     } else if (c >= 'A' && c <= 'F') {",
          "1512:       str[i] |= c - 'A' + 10;",
          "1513:     } else {",
          "1514:       free(str);",
          "1515:       throw InvalidArgumentException(\"bad encoding at position\", j);",
          "1516:     }",
          "1517:   }",
          "1518:   str[len] = '\\0';",
          "1519:   return str;",
          "",
          "[Added Lines]",
          "1125:   ret.setSize(j);",
          "1126:   return ret;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1631: #define PHP_UU_DEC(c) \\",
          "1632:   (((c) - ' ') & 077)",
          "1635:   assert(src);",
          "1636:   assert(src_len);",
          "",
          "[Removed Lines]",
          "1634: char *string_uuencode(const char *src, int src_len, int &dest_len) {",
          "",
          "[Added Lines]",
          "1241: String string_uuencode(const char *src, int src_len) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1641:   char *dest;",
          "1645:   s = src;",
          "1646:   e = src + src_len;",
          "",
          "[Removed Lines]",
          "1644:   p = dest = (char *)malloc((int)ceil(src_len * 1.38) + 46);",
          "",
          "[Added Lines]",
          "1251:   String ret((int)ceil(src_len * 1.38) + 45, ReserveString);",
          "1252:   p = dest = ret.bufferSlice().ptr;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1695: }",
          "1699:   int len;",
          "1700:   const char *s, *e, *ee;",
          "1701:   char *p, *dest;",
          "1704:   s = src;",
          "1705:   e = src + src_len;",
          "",
          "[Removed Lines]",
          "1693:   dest_len = p - dest;",
          "1694:   return dest;",
          "1697: char *string_uudecode(const char *src, int src_len, int &total_len) {",
          "1698:   total_len = 0;",
          "1703:   p = dest = (char *)malloc((int)ceil(src_len * 0.75) + 1);",
          "",
          "[Added Lines]",
          "1301:   ret.setSize(p - dest);",
          "1302:   return ret;",
          "1305: String string_uudecode(const char *src, int src_len) {",
          "1306:   int total_len = 0;",
          "1311:   String ret(ceil(src_len * 0.75), ReserveString);",
          "1312:   p = dest = ret.bufferSlice().ptr;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1746:     }",
          "1747:   }",
          "1753:  err:",
          "1756: }",
          "",
          "[Removed Lines]",
          "1751:   return dest;",
          "1754:   free(dest);",
          "1755:   return nullptr;",
          "",
          "[Added Lines]",
          "1358:   ret.setSize(total_len);",
          "1360:   return ret;",
          "1363:   return String();",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1787:   -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2",
          "1788: };",
          "1792:   const unsigned char *current = str;",
          "1793:   unsigned char *p;",
          "1794:   unsigned char *result;",
          "1796:   if ((length + 2) < 0 || ((length + 2) / 3) >= (1 << (sizeof(int) * 8 - 2))) {",
          "1801:   }",
          "",
          "[Removed Lines]",
          "1790: static unsigned char *php_base64_encode(const unsigned char *str, int length,",
          "1791:                                         int *ret_length) {",
          "1797:     if (ret_length != nullptr) {",
          "1799:     }",
          "1800:     return nullptr;",
          "1803:   result = (unsigned char *)malloc(((length + 2) / 3) * 4 + 1);",
          "1804:   p = result;",
          "",
          "[Added Lines]",
          "1398: static String php_base64_encode(const unsigned char *str, int length) {",
          "1404:     return String();",
          "1407:   String ret(((length + 2) / 3) * 4, ReserveString);",
          "1408:   p = result = (unsigned char *)ret.bufferSlice().ptr;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1827:     }",
          "1828:   }",
          "1834: }",
          "1836: static unsigned char *php_base64_decode(const unsigned char *str,",
          "",
          "[Removed Lines]",
          "1829:   if (ret_length != nullptr) {",
          "1831:   }",
          "1833:   return result;",
          "",
          "[Added Lines]",
          "1433:   ret.setSize(p - result);",
          "1434:   return ret;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1909:   return result;",
          "1910: }",
          "1914: }",
          "1916: char *string_base64_decode(const char *input, int &len, bool strict) {",
          "",
          "[Removed Lines]",
          "1912: char *string_base64_encode(const char *input, int &len) {",
          "1913:   return (char *)php_base64_encode((unsigned char *)input, len, &len);",
          "",
          "[Added Lines]",
          "1513: String string_base64_encode(const char *input, int len) {",
          "1514:   return php_base64_encode((unsigned char *)input, len);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1923:   int x, y, l;",
          "1924:   char *cmd;",
          "1926:   y = 0;",
          "1927:   l = strlen(str);",
          "1931:   cmd[y++] = '\\'';",
          "",
          "[Removed Lines]",
          "1922: char *string_escape_shell_arg(const char *str) {",
          "",
          "[Added Lines]",
          "1523: String string_escape_shell_arg(const char *str) {",
          "1531:   cmd = ret.bufferSlice().ptr;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1942:     }",
          "1943:   }",
          "1944:   cmd[y++] = '\\'';",
          "1947: }",
          "1950:   register int x, y, l;",
          "1951:   char *cmd;",
          "1952:   char *p = nullptr;",
          "1954:   l = strlen(str);",
          "1957:   for (x = 0, y = 0; x < l; x++) {",
          "1958:     switch (str[x]) {",
          "",
          "[Removed Lines]",
          "1945:   cmd[y] = '\\0';",
          "1946:   return cmd;",
          "1949: char *string_escape_shell_cmd(const char *str) {",
          "1955:   cmd = (char *)malloc(safe_address(l, 2, 1));",
          "",
          "[Added Lines]",
          "1547:   ret.setSize(y);",
          "1548:   return ret;",
          "1551: String string_escape_shell_cmd(const char *str) {",
          "1557:   String ret(safe_address(l, 2, 1), ReserveString);",
          "1558:   cmd = ret.bufferSlice().ptr;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1994:       cmd[y++] = str[x];",
          "1995:     }",
          "1996:   }",
          "2031: }",
          "",
          "[Removed Lines]",
          "1997:   cmd[y] = '\\0';",
          "1998:   return cmd;",
          "1999: }",
          "2001: std::string string_cplus_escape(const char *s, int len)",
          "2002: {",
          "2003:   std::string sb;",
          "2004:   static const char digits[] = \"01234567\";",
          "2006:   for (int i = 0; i < len; i++) {",
          "2007:     unsigned char uc = *s++;",
          "2008:     switch (uc) {",
          "2009:       case '\"':  sb.append(\"\\\\\\\"\", 2); break;",
          "2010:       case '\\\\': sb.append(\"\\\\\\\\\", 2); break;",
          "2011:       case '\\b': sb.append(\"\\\\b\", 2);  break;",
          "2012:       case '\\f': sb.append(\"\\\\f\", 2);  break;",
          "2013:       case '\\n': sb.append(\"\\\\n\", 2);  break;",
          "2014:       case '\\r': sb.append(\"\\\\r\", 2);  break;",
          "2015:       case '\\t': sb.append(\"\\\\t\", 2);  break;",
          "2016:       case '?':  sb.append(\"\\\\?\", 2);  break;",
          "2017:       default:",
          "2018:         if (uc >= ' ' && (uc & 127) == uc) {",
          "2019:           sb += (char) uc;",
          "2020:         } else {",
          "2021:           sb += '\\\\';",
          "2022:           sb += digits[(uc >> 6) & 7];",
          "2023:           sb += digits[(uc >> 3) & 7];",
          "2024:           sb += digits[(uc >> 0) & 7];",
          "2025:         }",
          "2026:         break;",
          "2027:     }",
          "2028:   }",
          "2030:   return sb;",
          "",
          "[Added Lines]",
          "1600:   ret.setSize(y);",
          "1601:   return ret;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2102:     return -1;",
          "2103:   }",
          "2108:   for(i2=0;i2<=l2;i2++) {",
          "2109:     p1[i2] = i2*cost_ins;",
          "",
          "[Removed Lines]",
          "2105:   p1 = (int*)malloc((l2+1) * sizeof(int));",
          "2106:   p2 = (int*)malloc((l2+1) * sizeof(int));",
          "",
          "[Added Lines]",
          "1676:   p1 = (int*)smart_malloc((l2+1) * sizeof(int));",
          "1677:   p2 = (int*)smart_malloc((l2+1) * sizeof(int));",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2121:   }",
          "2123:   c0=p1[l2];",
          "2126:   return c0;",
          "2127: }",
          "2132:   bool check = false;",
          "2133:   const char *p = format;",
          "2134:   while ((p = strchr(p, '%'))) {",
          "",
          "[Removed Lines]",
          "2124:   free(p1);",
          "2125:   free(p2);",
          "2131: char *string_money_format(const char *format, double value) {",
          "",
          "[Added Lines]",
          "1695:   smart_free(p1);",
          "1696:   smart_free(p2);",
          "1702: String string_money_format(const char *format, double value) {",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2140:     } else {",
          "2141:       throw_invalid_argument",
          "2142:         (\"format: Only a single %%i or %%n token can be used\");",
          "2144:     }",
          "2145:   }",
          "2147:   int format_len = strlen(format);",
          "2148:   int str_len = safe_address(format_len, 1, 1024);",
          "2150:   if ((str_len = strfmon(str, str_len, format, value)) < 0) {",
          "2153:   }",
          "2156: }",
          "2162:   char *tmpbuf = nullptr, *resbuf;",
          "2164:   char *dp;",
          "",
          "[Removed Lines]",
          "2143:       return nullptr;",
          "2149:   char *str = (char *)malloc(str_len);",
          "2151:     free(str);",
          "2152:     return nullptr;",
          "2154:   str[str_len] = 0;",
          "2155:   return str;",
          "2160: char *string_number_format(double d, int dec, char dec_point,",
          "2161:                            char thousand_sep) {",
          "",
          "[Added Lines]",
          "1714:       return String();",
          "1720:   String ret(str_len, ReserveString);",
          "1721:   char *str = ret.bufferSlice().ptr;",
          "1723:     return String();",
          "1725:   ret.setSize(str_len);",
          "1726:   return ret;",
          "1731: String string_number_format(double d, int dec, char dec_point,",
          "1732:                             char thousand_sep) {",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2176:   d = php_math_round(d, dec);",
          "2180:   snprintf(tmpbuf, 64, \"%.*F\", dec, d);",
          "2181:   tmplen = strlen(tmpbuf);",
          "2182:   if (tmpbuf == nullptr || !isdigit((int)tmpbuf[0])) {",
          "2184:   }",
          "",
          "[Removed Lines]",
          "2179:   tmpbuf = (char *)malloc(64);",
          "2183:     return tmpbuf;",
          "",
          "[Added Lines]",
          "1750:   String tmpstr(63, ReserveString);",
          "1751:   tmpbuf = tmpstr.bufferSlice().ptr;",
          "1755:     tmpstr.setSize(tmplen);",
          "1756:     return tmpstr;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2217:   if (is_negative) {",
          "2218:     reslen++;",
          "2219:   }",
          "2222:   s = tmpbuf+tmplen-1;",
          "",
          "[Removed Lines]",
          "2223:   t = resbuf+reslen;",
          "",
          "[Added Lines]",
          "1793:   String resstr(reslen, ReserveString);",
          "1794:   resbuf = resstr.bufferSlice().ptr;",
          "1797:   t = resbuf+reslen-1;",
          "1798:   resstr.setSize(reslen);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2264:   }",
          "2268: }",
          "",
          "[Removed Lines]",
          "2266:   free(tmpbuf);",
          "2267:   return resbuf;",
          "",
          "[Added Lines]",
          "1840:   return resstr;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2410: #define Prev_Letter (Look_Back_Letter(1))",
          "2413:                            : '\\0')",
          "",
          "[Removed Lines]",
          "2404: #define Next_Letter (toupper(word[w_idx+1]))",
          "2406: #define Curr_Letter (toupper(word[w_idx]))",
          "2408: #define Look_Back_Letter(n)  (w_idx >= n ? toupper(word[w_idx-n]) : '\\0')",
          "2412: #define After_Next_Letter  (Next_Letter != '\\0' ? toupper(word[w_idx+2]) \\",
          "2414: #define Look_Ahead_Letter(n) (toupper(Lookahead(word+w_idx, n)))",
          "",
          "[Added Lines]",
          "1977: #define Next_Letter ((char)toupper(word[w_idx+1]))",
          "1979: #define Curr_Letter ((char)toupper(word[w_idx]))",
          "1981: #define Look_Back_Letter(n)  (w_idx >= n ? (char)toupper(word[w_idx-n]) : '\\0')",
          "1985: #define After_Next_Letter  (Next_Letter != '\\0' ? (char)toupper(word[w_idx+2]) \\",
          "1987: #define Look_Ahead_Letter(n) ((char)toupper(Lookahead(word+w_idx, n)))",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2447: #define Isbreak(c)  (!isalpha(c))",
          "2451:   unsigned char *word = (unsigned char *)input;",
          "2461:   if (max_phonemes < 0)",
          "2468:   if (word == nullptr)",
          "2473:     max_buffer_len = word_len;",
          "2475:   } else {",
          "2476:     max_buffer_len = max_phonemes;",
          "2478:   }",
          "2482:   for (; !isalpha(Curr_Letter); w_idx++) {",
          "2484:     if (Curr_Letter == '\\0') {",
          "2487:     }",
          "2488:   }",
          "",
          "[Removed Lines]",
          "2434: #define Phonize(c)  {                                                   \\",
          "2435:     if (p_idx >= max_buffer_len) {                                      \\",
          "2436:       phoned_word = (char *)realloc(phoned_word, max_buffer_len + 2);   \\",
          "2437:       max_buffer_len += 2;                                              \\",
          "2438:     }                                                                   \\",
          "2439:     phoned_word[p_idx++] = c;                                           \\",
          "2440:   }",
          "2442: #define End_Phoned_Word  { Phonize('\\0'); }",
          "2444: #define Phone_Len  (p_idx)",
          "2449: char *string_metaphone(const char *input, int word_len, long max_phonemes,",
          "2450:                        int traditional) {",
          "2452:   char *phoned_word;",
          "2462:     return nullptr;",
          "2469:     return nullptr;",
          "2474:     phoned_word = (char *)malloc(word_len + 1);",
          "2477:     phoned_word = (char *)malloc(max_phonemes +1);",
          "2485:       End_Phoned_Word",
          "",
          "[Added Lines]",
          "2007: #define Phonize(c)  { buffer.append(c); }",
          "2009: #define Phone_Len  (buffer.size())",
          "2014: String string_metaphone(const char *input, int word_len, long max_phonemes,",
          "2015:                         int traditional) {",
          "2025:     return String();",
          "2032:     return String();",
          "2040:   StringBuffer buffer(max_buffer_len);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2743:     w_idx += skip_letter;",
          "2748: }",
          "",
          "[Removed Lines]",
          "2746:   End_Phoned_Word;",
          "2747:   return phoned_word;",
          "",
          "[Added Lines]",
          "2307:   return buffer.detach();",
          "",
          "---------------"
        ],
        "hphp/runtime/base/zend-string.h||hphp/runtime/base/zend-string.h": [
          "File: hphp/runtime/base/zend-string.h -> hphp/runtime/base/zend-string.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:                  const char *pad_string, int pad_str_len, int pad_type);",
          "",
          "[Removed Lines]",
          "126: char *string_pad(const char *input, int &len, int pad_length,",
          "",
          "[Added Lines]",
          "126: String string_pad(const char *input, int len, int pad_length,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "205:                          int endlen, int chunklen);",
          "",
          "[Removed Lines]",
          "201: char *string_reverse(const char *s, int len);",
          "202: char *string_repeat(const char *s, int &len, int count);",
          "203: char *string_shuffle(const char *str, int len);",
          "204: char *string_chunk_split(const char *src, int &srclen, const char *end,",
          "",
          "[Added Lines]",
          "201: String string_chunk_split(const char *src, int srclen, const char *end,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "210: char *string_strip_tags(const char *s, int &len, const char *allow,",
          "211:                         int allow_len, bool allow_tag_spaces);",
          "225: char *string_addslashes(const char *str, int &length);",
          "233: char *string_base64_decode(const char *input, int &len, bool strict);",
          "",
          "[Removed Lines]",
          "216: char *string_wordwrap(const char *text, int &textlen, int linelength,",
          "217:                       const char *breakchar, int breakcharlen, bool docut);",
          "222: char *string_addcslashes(const char *str, int &length, const char *what,",
          "223:                          int wlength);",
          "224: char *string_stripcslashes(const char *input, int &nlen);",
          "226: char *string_stripslashes(const char *input, int &l);",
          "227: char *string_quotemeta(const char *input, int &len);",
          "228: char *string_quoted_printable_encode(const char *input, int &len);",
          "229: char *string_quoted_printable_decode(const char *input, int &len, bool is_q);",
          "230: char *string_uuencode(const char *src, int src_len, int &dest_len);",
          "231: char *string_uudecode(const char *src, int src_len, int &dest_len);",
          "232: char *string_base64_encode(const char *input, int &len);",
          "234: char *string_escape_shell_arg(const char *str);",
          "235: char *string_escape_shell_cmd(const char *str);",
          "236: std::string string_cplus_escape(const char *s, int len);",
          "",
          "[Added Lines]",
          "214: String string_quoted_printable_encode(const char *input, int len);",
          "215: String string_quoted_printable_decode(const char *input, int len, bool is_q);",
          "216: String string_uuencode(const char *src, int src_len);",
          "217: String string_uudecode(const char *src, int src_len);",
          "218: String string_base64_encode(const char *input, int len);",
          "220: String string_escape_shell_arg(const char *str);",
          "221: String string_escape_shell_cmd(const char *str);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "241: inline bool string_validate_base(int base) {",
          "242:   return (2 <= base && base <= 36);",
          "243: }",
          "245: Variant string_base_to_numeric(const char *s, int len, int base);",
          "246: char *string_long_to_base(unsigned long value, int base);",
          "247: char *string_numeric_to_base(const Variant& value, int base);",
          "",
          "[Removed Lines]",
          "244: char *string_hex2bin(const char *input, int &len);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "259: char *string_money_format(const char *format, double value);",
          "261: char *string_number_format(double d, int dec, char dec_point,",
          "262:                            char thousand_sep);",
          "",
          "[Added Lines]",
          "243: String string_money_format(const char *format, double value);",
          "245: String string_number_format(double d, int dec, char dec_point,",
          "246:                             char thousand_sep);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "270:                         const char *t2, int len2, float *percent);",
          "271: char *string_soundex(const char *str);",
          "",
          "[Removed Lines]",
          "273: char *string_metaphone(const char *input, int word_len, long max_phonemes,",
          "274:                        int traditional);",
          "",
          "[Added Lines]",
          "257: String string_metaphone(const char *input, int word_len, long max_phonemes,",
          "258:                         int traditional);",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/ext_iconv.cpp||hphp/runtime/ext/ext_iconv.cpp": [
          "File: hphp/runtime/ext/ext_iconv.cpp -> hphp/runtime/ext/ext_iconv.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1084:         case PHP_ICONV_ENC_SCHEME_QPRINT:",
          "1085:           {",
          "1086:             int len = encoded_text_len;",
          "1089:           }",
          "1090:           break;",
          "1091:         default:",
          "",
          "[Removed Lines]",
          "1087:             char *ret = string_quoted_printable_decode(encoded_text, len, true);",
          "1088:             decoded = String(ret, len, AttachString);",
          "",
          "[Added Lines]",
          "1087:             decoded = string_quoted_printable_decode(encoded_text, len, true);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1496:         int encoded_len = out_size - out_left;",
          "1499:         if ((int)char_cnt < encoded.size()) {",
          "1501:           err = PHP_ICONV_ERR_UNKNOWN;",
          "",
          "[Removed Lines]",
          "1497:         char *encoded_str = string_base64_encode(buf, encoded_len);",
          "1498:         String encoded(encoded_str, encoded_len, AttachString);",
          "",
          "[Added Lines]",
          "1496:         String encoded = string_base64_encode(buf, encoded_len);",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/ext_process.cpp||hphp/runtime/ext/ext_process.cpp": [
          "File: hphp/runtime/ext/ext_process.cpp -> hphp/runtime/ext/ext_process.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "972: String f_escapeshellarg(const String& arg) {",
          "973:   if (!arg.empty()) {",
          "976:   } else if (!RuntimeOption::EnableHipHopSyntax) {",
          "977:     return String(s_twosinglequotes);",
          "978:   }",
          "",
          "[Removed Lines]",
          "974:     char *ret = string_escape_shell_arg(arg.c_str());",
          "975:     return String(ret, AttachString);",
          "",
          "[Added Lines]",
          "974:     return string_escape_shell_arg(arg.c_str());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "982: String f_escapeshellcmd(const String& command) {",
          "983:   if (!command.empty()) {",
          "986:   }",
          "987:   return command;",
          "988: }",
          "",
          "[Removed Lines]",
          "984:     char *ret = string_escape_shell_cmd(command.c_str());",
          "985:     return String(ret, AttachString);",
          "",
          "[Added Lines]",
          "983:     return string_escape_shell_cmd(command.c_str());",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/ext_string.cpp||hphp/runtime/ext/ext_string.cpp": [
          "File: hphp/runtime/ext/ext_string.cpp -> hphp/runtime/ext/ext_string.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "818:       ch_thousands_sep = 0;",
          "819:     }",
          "820:   }",
          "824: }",
          "826: int64_t f_strcmp(const String& str1, const String& str2) {",
          "",
          "[Removed Lines]",
          "821:   char *ret = string_number_format(number, decimals, ch_dec_point,",
          "822:                                    ch_thousands_sep);",
          "823:   return String(ret, AttachString);",
          "",
          "[Added Lines]",
          "821:   return string_number_format(number, decimals, ch_dec_point,",
          "822:                                ch_thousands_sep);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1327: }",
          "1329: Variant f_metaphone(const String& str, int phones /* = 0 */) {",
          "1335: }",
          "1337: String f_html_entity_decode(const String& str, int flags /* = k_ENT_COMPAT */,",
          "",
          "[Removed Lines]",
          "1330:   char *ret = string_metaphone(str.data(), str.size(), 0, 1);",
          "1331:   if (ret) {",
          "1332:     return String(ret, AttachString);",
          "1333:   }",
          "1334:   return false;",
          "",
          "[Added Lines]",
          "1329:   return string_metaphone(str.data(), str.size(), 0, 1);",
          "",
          "---------------"
        ],
        "hphp/runtime/server/replay-transport.cpp||hphp/runtime/server/replay-transport.cpp": [
          "File: hphp/runtime/server/replay-transport.cpp -> hphp/runtime/server/replay-transport.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:   int size;",
          "58:   const void *data = transport->getPostData(size);",
          "59:   if (size) {",
          "64:   } else {",
          "65:     hdf[\"post\"] = \"\";",
          "66:   }",
          "",
          "[Removed Lines]",
          "60:     int len;",
          "61:     char *encoded = string_uuencode((const char *)data, size, len);",
          "62:     hdf[\"post\"] = encoded;",
          "63:     free(encoded);",
          "",
          "[Added Lines]",
          "60:     String encoded = string_uuencode((const char *)data, size);",
          "61:     hdf[\"post\"] = encoded.get()->data();",
          "",
          "---------------"
        ]
      }
    }
  ]
}