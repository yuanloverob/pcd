{
  "cve_id": "CVE-2019-1010247",
  "cve_desc": "ZmartZone IAM mod_auth_openidc 2.3.10.1 and earlier is affected by: Cross Site Scripting (XSS). The impact is: Redirecting the user to a phishing page or interacting with the application on behalf of the user. The component is: File: src/mod_auth_openidc.c, Line: 3109. The fixed version is: 2.3.10.2.",
  "repo": "zmartzone/mod_auth_openidc",
  "patch_hash": "132a4111bf3791e76437619a66336dce2ce4c79b",
  "patch_info": {
    "commit_hash": "132a4111bf3791e76437619a66336dce2ce4c79b",
    "repo": "zmartzone/mod_auth_openidc",
    "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/132a4111bf3791e76437619a66336dce2ce4c79b",
    "files": [
      "ChangeLog",
      "configure.ac",
      "src/mod_auth_openidc.c"
    ],
    "message": "release 2.3.10.2: fix XSS vulnerability for poll parameter\n\nin OIDC Session Management RP iframe; CSNC-2019-001; thanks Mischa\nBachmann\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
    "before_after_code_files": [
      "configure.ac||configure.ac",
      "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
    ]
  },
  "patch_diff": {
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.3.10.1],[hans.zandbelt@zmartzone.eu])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.3.10.2],[hans.zandbelt@zmartzone.eu])",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
      "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3106:    \"\\n\"",
      "3107:    \"      function setTimer() {\\n\"",
      "3108:    \"        checkSession();\\n\"",
      "3110:    \"      }\\n\"",
      "3111:    \"\\n\"",
      "3112:    \"      function receiveMessage(e) {\\n\"",
      "",
      "[Removed Lines]",
      "3109:    \"        timerID = setInterval('checkSession()', %s);\\n\"",
      "",
      "[Added Lines]",
      "3109:    \"        timerID = setInterval('checkSession()', %d);\\n\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3150:  char *s_poll_interval = NULL;",
      "3151:  oidc_util_get_request_parameter(r, \"poll\", &s_poll_interval);",
      "3155:  const char *redirect_uri = oidc_get_redirect_uri(r, c);",
      "3156:  java_script = apr_psprintf(r->pool, java_script, origin, client_id,",
      "3158:    redirect_uri);",
      "3160:  return oidc_util_html_send(r, NULL, java_script, \"setTimer\", NULL, DONE);",
      "",
      "[Removed Lines]",
      "3152:  if (s_poll_interval == NULL)",
      "3153:   s_poll_interval = \"3000\";",
      "3157:    session_state, op_iframe_id, s_poll_interval, redirect_uri,",
      "",
      "[Added Lines]",
      "3152:  int poll_interval = s_poll_interval ? strtol(s_poll_interval, NULL, 10) : 0;",
      "3153:  if ((poll_interval <= 0) || (poll_interval > 3600 * 24))",
      "3154:   poll_interval = 3000;",
      "3158:    session_state, op_iframe_id, poll_interval, redirect_uri,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6bf91f7f979c13d3c1880e621db8d0256506de84",
      "candidate_info": {
        "commit_hash": "6bf91f7f979c13d3c1880e621db8d0256506de84",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/6bf91f7f979c13d3c1880e621db8d0256506de84",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/mod_auth_openidc.c"
        ],
        "message": "regression: avoid HTTP 500 when rendering the Discovery page\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc15],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc16],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2354:    &javascript_method) == TRUE)",
          "2355:   html_head = apr_psprintf(r->pool, \"%s%s\", html_head, javascript);",
          "2358:  return oidc_util_html_send(r, \"OpenID Connect Provider Discovery\",",
          "2359:    html_head, javascript_method, s, OK);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2361:  r->user = \"\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "93fc5148a068e2c743f486d7bbb2789d06d8ad93",
      "candidate_info": {
        "commit_hash": "93fc5148a068e2c743f486d7bbb2789d06d8ad93",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/93fc5148a068e2c743f486d7bbb2789d06d8ad93",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h",
          "src/session.c"
        ],
        "message": "add client authentication to the revocation endpoint\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/session.c||src/session.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc7],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc8],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "146:  if (apr_strnatcmp(prefix, \"\") == 0) {",
          "147:   if ((cfg->white_listed_claims != NULL)",
          "148:     && (apr_hash_count(cfg->white_listed_claims) > 0))",
          "151:   else",
          "152:    oidc_warn(r,",
          "153:      \"both \" OIDCClaimPrefix \" and \" OIDCWhiteListedClaims \" are empty: this renders an insecure setup!\");",
          "",
          "[Removed Lines]",
          "149:    hdrs = apr_hash_overlay(r->pool, cfg->white_listed_claims,",
          "150:      hdrs);",
          "",
          "[Added Lines]",
          "149:    hdrs = apr_hash_overlay(r->pool, cfg->white_listed_claims, hdrs);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1842:  if ((session_state != NULL) && (provider->check_session_iframe != NULL)) {",
          "1844:   oidc_session_set_session_state(r, session, session_state);",
          "1848:   oidc_debug(r,",
          "1849:     \"session management enabled: stored session_state (%s), check_session_iframe (%s) and client_id (%s) in the session\",",
          "1850:     session_state, provider->check_session_iframe,",
          "",
          "[Removed Lines]",
          "1845:   oidc_session_set_check_session_iframe(r, session,",
          "1846:     provider->check_session_iframe);",
          "1847:   oidc_session_set_client_id(r, session, provider->client_id);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1858:     provider->check_session_iframe);",
          "1859:  }",
          "1869:  oidc_store_userinfo_claims(r, c, session, provider, claims, userinfo_jwt);",
          "",
          "[Removed Lines]",
          "1861:  if (provider->end_session_endpoint != NULL)",
          "1862:   oidc_session_set_logout_endpoint(r, session,",
          "1863:     provider->end_session_endpoint);",
          "1864:  if (provider->revocation_endpoint_url != NULL)",
          "1865:   oidc_session_set_revocation_endpoint(r, session,",
          "1866:     provider->revocation_endpoint_url);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2712: static void oidc_revoke_tokens(request_rec *r, oidc_cfg *c,",
          "2715:  char *response = NULL;",
          "2716:  char *basic_auth = NULL;",
          "2717:  char *bearer_auth = NULL;",
          "2718:  apr_table_t *params = NULL;",
          "2719:  const char *token = NULL;",
          "2723:  oidc_debug(r, \"enter: revocation_endpoint=%s\",",
          "2727:   return;",
          "2729:  params = apr_table_make(r->pool, 4);",
          "2741:  token = oidc_session_get_refresh_token(r, session);",
          "",
          "[Removed Lines]",
          "2713:   oidc_session_t *session) {",
          "2720:  const char *revocation_endpoint = oidc_session_get_revocation_endpoint(r,",
          "2721:    session);",
          "2724:    revocation_endpoint ? revocation_endpoint : \"(null)\");",
          "2726:  if (revocation_endpoint == NULL)",
          "2733:   if (oidc_proto_token_endpoint_auth(r, cfg, provider->token_endpoint_auth,",
          "2734:   provider->client_id, provider->client_secret,",
          "2735:   provider->token_endpoint_url, params,",
          "2736:   NULL, &basic_auth, &bearer_auth) == FALSE)",
          "2737:   return FALSE;",
          "",
          "[Added Lines]",
          "2702:   oidc_session_t *session, oidc_provider_t *provider) {",
          "2711:    provider->revocation_endpoint_url ?",
          "2712:      provider->revocation_endpoint_url : \"(null)\");",
          "2714:  if (provider->revocation_endpoint_url == NULL)",
          "2720:  if (oidc_proto_token_endpoint_auth(r, c, provider->token_endpoint_auth,",
          "2721:    provider->client_id, provider->client_secret,",
          "2722:    provider->token_endpoint_url, params, NULL, &basic_auth,",
          "2723:    &bearer_auth) == FALSE)",
          "2724:   return;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2743:   apr_table_addn(params, \"token_type_hint\", \"refresh_token\");",
          "2744:   apr_table_addn(params, \"token\", token);",
          "2749:     oidc_dir_cfg_pass_cookies(r), NULL,",
          "2750:     NULL) == FALSE) {",
          "2751:    oidc_warn(r, \"revoking refresh token failed\");",
          "",
          "[Removed Lines]",
          "2746:   if (oidc_util_http_post_form(r, revocation_endpoint, params, basic_auth,",
          "2747:     bearer_auth, c->oauth.ssl_validate_server, &response,",
          "2748:     c->http_timeout_long, c->outgoing_proxy,",
          "",
          "[Added Lines]",
          "2732:   if (oidc_util_http_post_form(r, provider->revocation_endpoint_url,",
          "2733:     params, basic_auth, bearer_auth, c->oauth.ssl_validate_server,",
          "2734:     &response, c->http_timeout_long, c->outgoing_proxy,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2758:   apr_table_addn(params, \"token_type_hint\", \"access_token\");",
          "2759:   apr_table_addn(params, \"token\", token);",
          "2764:     oidc_dir_cfg_pass_cookies(r), NULL,",
          "2765:     NULL) == FALSE) {",
          "2766:    oidc_warn(r, \"revoking access token failed\");",
          "",
          "[Removed Lines]",
          "2761:   if (oidc_util_http_post_form(r, revocation_endpoint, params, basic_auth,",
          "2762:     bearer_auth, c->oauth.ssl_validate_server, &response,",
          "2763:     c->http_timeout_long, c->outgoing_proxy,",
          "",
          "[Added Lines]",
          "2747:   if (oidc_util_http_post_form(r, provider->revocation_endpoint_url,",
          "2748:     params, basic_auth, bearer_auth, c->oauth.ssl_validate_server,",
          "2749:     &response, c->http_timeout_long, c->outgoing_proxy,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2774: static int oidc_handle_logout_request(request_rec *r, oidc_cfg *c,",
          "2775:   oidc_session_t *session, const char *url) {",
          "2782:  if (session->remote_user != NULL) {",
          "2785:   oidc_session_kill(r, session);",
          "2786:  }",
          "",
          "[Removed Lines]",
          "2777:  oidc_debug(r, \"enter (url=%s)\", url);",
          "2779:  oidc_revoke_tokens(r, c, session);",
          "",
          "[Added Lines]",
          "2763:  oidc_provider_t *provider = NULL;",
          "2765:  oidc_debug(r, \"enter (url=%s)\", url);",
          "2770:   if (oidc_get_provider_from_session(r, c, session, &provider) == FALSE)",
          "2771:    return HTTP_INTERNAL_SERVER_ERROR;",
          "2773:   oidc_revoke_tokens(r, c, session, provider);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3013: static int oidc_handle_logout(request_rec *r, oidc_cfg *c,",
          "3014:   oidc_session_t *session) {",
          "3017:  char *url = NULL;",
          "3018:  oidc_util_get_request_parameter(r, OIDC_REDIRECT_URI_REQUEST_LOGOUT, &url);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3007:  oidc_provider_t *provider = NULL;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3073:   }",
          "3074:  }",
          "3080:   const char *id_token_hint = oidc_session_get_idtoken(r, session);",
          "3083:   if (id_token_hint != NULL) {",
          "3084:    logout_request = apr_psprintf(r->pool, \"%s%sid_token_hint=%s\",",
          "3085:      logout_request, strchr(logout_request ? logout_request : \"\",",
          "",
          "[Removed Lines]",
          "3076:  const char *end_session_endpoint = oidc_session_get_logout_endpoint(r,",
          "3077:    session);",
          "3078:  if (end_session_endpoint != NULL) {",
          "3082:   char *logout_request = apr_pstrdup(r->pool, end_session_endpoint);",
          "",
          "[Added Lines]",
          "3068:  oidc_get_provider_from_session(r, c, session, &provider);",
          "3070:  if ((provider != NULL) && (provider->end_session_endpoint != NULL)) {",
          "3074:   char *logout_request = apr_pstrdup(r->pool,",
          "3075:     provider->end_session_endpoint);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3236: static int oidc_handle_session_management(request_rec *r, oidc_cfg *c,",
          "3237:   oidc_session_t *session) {",
          "3238:  char *cmd = NULL;",
          "3241:  oidc_provider_t *provider = NULL;",
          "",
          "[Removed Lines]",
          "3239:  const char *id_token_hint = NULL, *client_id = NULL, *check_session_iframe =",
          "3240:    NULL;",
          "",
          "[Added Lines]",
          "3232:  const char *id_token_hint = NULL;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3254:   return oidc_handle_logout_request(r, c, session, c->default_slo_url);",
          "3255:  }",
          "3258:  if (apr_strnatcmp(\"iframe_op\", cmd) == 0) {",
          "3262:    return oidc_handle_session_management_iframe_op(r, c, session,",
          "3264:   }",
          "3265:   return HTTP_NOT_FOUND;",
          "3266:  }",
          "3269:  if (apr_strnatcmp(\"iframe_rp\", cmd) == 0) {",
          "3274:    return oidc_handle_session_management_iframe_rp(r, c, session,",
          "3276:   }",
          "3277:   oidc_debug(r,",
          "3278:     \"iframe_rp command issued but no client (%s) and/or no check_session_iframe (%s) set\",",
          "3280:   return HTTP_NOT_FOUND;",
          "3281:  }",
          "3284:  if (apr_strnatcmp(\"check\", cmd) == 0) {",
          "3285:   id_token_hint = oidc_session_get_idtoken(r, session);",
          "3287:   if ((session->remote_user != NULL) && (provider != NULL)) {",
          "",
          "[Removed Lines]",
          "3259:   check_session_iframe = oidc_session_get_check_session_iframe(r,",
          "3260:     session);",
          "3261:   if (check_session_iframe != NULL) {",
          "3263:      check_session_iframe);",
          "3270:   client_id = oidc_session_get_client_id(r, session);",
          "3271:   check_session_iframe = oidc_session_get_check_session_iframe(r,",
          "3272:     session);",
          "3273:   if ((client_id != NULL) && (check_session_iframe != NULL)) {",
          "3275:      client_id, check_session_iframe);",
          "3279:     client_id, check_session_iframe);",
          "3286:   oidc_get_provider_from_session(r, c, session, &provider);",
          "",
          "[Added Lines]",
          "3249:  oidc_get_provider_from_session(r, c, session, &provider);",
          "3253:   if (provider->check_session_iframe != NULL) {",
          "3255:      provider->check_session_iframe);",
          "3262:   if ((provider->client_id != NULL)",
          "3263:     && (provider->check_session_iframe != NULL)) {",
          "3265:      provider->client_id, provider->check_session_iframe);",
          "3269:     provider->client_id, provider->check_session_iframe);",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "871: void oidc_session_set_issuer(request_rec *r, oidc_session_t *z, const char *issuer);",
          "872: const char * oidc_session_get_issuer(request_rec *r, oidc_session_t *z);",
          "873: void oidc_session_set_client_id(request_rec *r, oidc_session_t *z, const char *client_id);",
          "882: char *oidc_parse_base64(apr_pool_t *pool, const char *input, char **output, int *output_len);",
          "",
          "[Removed Lines]",
          "874: const char * oidc_session_get_client_id(request_rec *r, oidc_session_t *z);",
          "875: void oidc_session_set_check_session_iframe(request_rec *r, oidc_session_t *z, const char *check_session_iframe);",
          "876: const char * oidc_session_get_check_session_iframe(request_rec *r, oidc_session_t *z);",
          "877: void oidc_session_set_logout_endpoint(request_rec *r, oidc_session_t *z, const char *logout_endpoint);",
          "878: const char * oidc_session_get_logout_endpoint(request_rec *r, oidc_session_t *z);",
          "879: void oidc_session_set_revocation_endpoint(request_rec *r, oidc_session_t *z, const char *revocation_endpoint);",
          "880: const char * oidc_session_get_revocation_endpoint(request_rec *r, oidc_session_t *z);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/session.c||src/session.c": [
          "File: src/session.c -> src/session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "447: #define OIDC_SESSION_KEY_SESSION_STATE \"ss\"",
          "449: #define OIDC_SESSION_KEY_ISSUER \"iss\"",
          "",
          "[Removed Lines]",
          "451: #define OIDC_SESSION_KEY_CLIENT_ID \"cid\"",
          "453: #define OIDC_SESSION_KEY_CHECK_SESSION_IFRAME \"csi\"",
          "455: #define OIDC_SESSION_KEY_LOGOUT_ENDPOINT \"ese\"",
          "457: #define OIDC_SESSION_KEY_REVOCATION_ENDPOINT \"re\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "740: const char * oidc_session_get_issuer(request_rec *r, oidc_session_t *z) {",
          "741:  return oidc_session_get_key2string(r, z, OIDC_SESSION_KEY_ISSUER);",
          "742: }",
          "",
          "[Removed Lines]",
          "747: void oidc_session_set_client_id(request_rec *r, oidc_session_t *z,",
          "748:   const char *client_id) {",
          "749:  oidc_session_set(r, z, OIDC_SESSION_KEY_CLIENT_ID, client_id);",
          "750: }",
          "752: const char * oidc_session_get_client_id(request_rec *r, oidc_session_t *z) {",
          "753:  return oidc_session_get_key2string(r, z, OIDC_SESSION_KEY_CLIENT_ID);",
          "754: }",
          "759: void oidc_session_set_check_session_iframe(request_rec *r, oidc_session_t *z,",
          "760:   const char *check_session_iframe) {",
          "761:  oidc_session_set(r, z, OIDC_SESSION_KEY_CHECK_SESSION_IFRAME,",
          "762:    check_session_iframe);",
          "763: }",
          "765: const char * oidc_session_get_check_session_iframe(request_rec *r,",
          "766:   oidc_session_t *z) {",
          "767:  return oidc_session_get_key2string(r, z,",
          "768:    OIDC_SESSION_KEY_CHECK_SESSION_IFRAME);",
          "769: }",
          "774: void oidc_session_set_logout_endpoint(request_rec *r, oidc_session_t *z,",
          "775:   const char *logout_endpoint) {",
          "776:  oidc_session_set(r, z, OIDC_SESSION_KEY_LOGOUT_ENDPOINT, logout_endpoint);",
          "777: }",
          "779: const char * oidc_session_get_logout_endpoint(request_rec *r, oidc_session_t *z) {",
          "780:  return oidc_session_get_key2string(r, z, OIDC_SESSION_KEY_LOGOUT_ENDPOINT);",
          "781: }",
          "786: void oidc_session_set_revocation_endpoint(request_rec *r, oidc_session_t *z,",
          "787:   const char *revocation_endpoint) {",
          "788:  oidc_session_set(r, z, OIDC_SESSION_KEY_REVOCATION_ENDPOINT, revocation_endpoint);",
          "789: }",
          "791: const char * oidc_session_get_revocation_endpoint(request_rec *r, oidc_session_t *z) {",
          "792:  return oidc_session_get_key2string(r, z, OIDC_SESSION_KEY_REVOCATION_ENDPOINT);",
          "793: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eb42628d3a29e117502726ffa0534cdaae5ba318",
      "candidate_info": {
        "commit_hash": "eb42628d3a29e117502726ffa0534cdaae5ba318",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/eb42628d3a29e117502726ffa0534cdaae5ba318",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/pcre_subst.c",
          "src/pcre_subst.h",
          "src/util.c"
        ],
        "message": "release 2.3.7: return error when input is too large for pcre_subst\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/pcre_subst.c||src/pcre_subst.c",
          "src/pcre_subst.h||src/pcre_subst.h",
          "src/util.c||src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.7rc5],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.7],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/pcre_subst.c||src/pcre_subst.c": [
          "File: src/pcre_subst.c -> src/pcre_subst.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: #include <pcre.h>",
          "39: #include \"pcre_subst.h\"",
          "43: #ifdef DEBUG_PCRE_SUBST",
          "44: static void",
          "45: dumpstr(const char *str, int len, int start, int end)",
          "",
          "[Removed Lines]",
          "41: #define MAXCAPTURE 255",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:  int i, slen, rlen;",
          "115:  const int *mvec = ovec;",
          "116:  char *res, *cp;",
          "119:  nmat--;",
          "120:  ovec += 2;",
          "121:  for (i = 0; i < nmat; i++) {",
          "",
          "[Removed Lines]",
          "117:  int replen[MAXCAPTURE];",
          "118:  const char *repstr[MAXCAPTURE];",
          "",
          "[Added Lines]",
          "115:  int replen[OIDC_PCRE_MAXCAPTURE];",
          "116:  const char *repstr[OIDC_PCRE_MAXCAPTURE];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "149:    int offset, int options, const char *rep)",
          "150: {",
          "151:  int nmat;",
          "153:  nmat = pcre_exec(ppat, extra, str, len, offset, options,",
          "154:   ovec, sizeof(ovec));",
          "155: #ifdef DEBUG_PCRE_SUBST",
          "",
          "[Removed Lines]",
          "152:  int ovec[MAXCAPTURE * 3];",
          "",
          "[Added Lines]",
          "150:  int ovec[OIDC_PCRE_MAXCAPTURE * 3];",
          "",
          "---------------"
        ],
        "src/pcre_subst.h||src/pcre_subst.h": [
          "File: src/pcre_subst.h -> src/pcre_subst.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:    supersede any condition above with which it is incompatible.",
          "35: char *pcre_subst(const pcre *, const pcre_extra *, const char *, int, int, int, const char *);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: #define OIDC_PCRE_MAXCAPTURE 255",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2093:   goto out;",
          "2094:  }",
          "2096:  substituted = pcre_subst(preg, NULL, input, (int) strlen(input), 0, 0,",
          "2097:    replace);",
          "2098:  if (substituted == NULL) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2095:  if (strlen(input) >= OIDC_PCRE_MAXCAPTURE - 1) {",
          "2097:     apr_psprintf(pool,",
          "2098:       \"string length (%d) is larger than the maximum allowed for pcre_subst (%d)\",",
          "2099:       (int) strlen(input), OIDC_PCRE_MAXCAPTURE - 1);",
          "2100:   goto out;",
          "2101:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2107:  rc = TRUE;",
          "2111:   pcre_free(substituted);",
          "2112:  if (preg)",
          "2113:   pcre_free(preg);",
          "",
          "[Removed Lines]",
          "2109: out:",
          "2110:  if (substituted)",
          "",
          "[Added Lines]",
          "2116:  out: if (substituted)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "72c3267a251b2a381f4830a0c40b39ae8087f4e3",
      "candidate_info": {
        "commit_hash": "72c3267a251b2a381f4830a0c40b39ae8087f4e3",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/72c3267a251b2a381f4830a0c40b39ae8087f4e3",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/proto.c"
        ],
        "message": "do not pass superfluous parentheses into oidc_proto_html_post\n\nfix oidc_proto_html_post auto-post-submit so it no longer\nresults in duplicate parentheses; closes #440; thanks @gobreak\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/proto.c||src/proto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc9],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc10],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/proto.c||src/proto.c": [
          "File: src/proto.c -> src/proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "604:    \"    </form>\\n\");",
          "606:  return oidc_util_html_send(r, \"Submitting...\", NULL,",
          "608: }",
          "610: void add_auth_request_params(request_rec *r, apr_table_t *params,",
          "",
          "[Removed Lines]",
          "607:    \"document.forms[0].submit()\", html_body, DONE);",
          "",
          "[Added Lines]",
          "607:    \"document.forms[0].submit\", html_body, DONE);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0d47b9886d86090fc9792adf7823f397349d302e",
      "candidate_info": {
        "commit_hash": "0d47b9886d86090fc9792adf7823f397349d302e",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/0d47b9886d86090fc9792adf7823f397349d302e",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/session.c"
        ],
        "message": "2.3.7rc0: clear session cookie and contents on cache corruption\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/session.c||src/session.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.6],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.7rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/session.c||src/session.c": [
          "File: src/session.c -> src/session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:  return TRUE;",
          "102: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107: static void oidc_session_uuid_new(request_rec *r, oidc_session_t *z) {",
          "108:  apr_uuid_t uuid;",
          "109:  apr_uuid_get(&uuid);",
          "110:  apr_uuid_format((char *) &z->uuid, &uuid);",
          "111: }",
          "116: static void oidc_session_clear(request_rec *r, oidc_session_t *z) {",
          "117:  strncpy(z->uuid, \"\", strlen(\"\"));",
          "118:  z->remote_user = NULL;",
          "119:  z->expiry = 0;",
          "120:  if (z->state)",
          "121:   json_decref(z->state);",
          "122:  z->state = json_object();",
          "123: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128:     if ((stored_uuid == NULL)",
          "129:       || (apr_strnatcmp(stored_uuid, uuid) != 0)) {",
          "130:      oidc_error(r,",
          "133:      rc = FALSE;",
          "134:     }",
          "135:    }",
          "",
          "[Removed Lines]",
          "131:        \"cache corruption detected: stored id is not equal to requested id\");",
          "132:      oidc_session_free(r, z);",
          "",
          "[Added Lines]",
          "152:        \"cache corruption detected: stored session id (%s) is not equal to requested session id (%s)\",",
          "153:        stored_uuid, uuid);",
          "156:      oidc_util_set_cookie(r, oidc_cfg_dir_cookie(r), \"\", 0,",
          "157:        NULL);",
          "159:      rc = oidc_cache_set_session(r, z->uuid, NULL, 0);",
          "161:      oidc_session_clear(r, z);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "155:   if (apr_strnatcmp(z->uuid, \"\") == 0) {",
          "162:    oidc_session_set(r, z, OIDC_SESSION_SESSION_ID, z->uuid);",
          "163:   }",
          "",
          "[Removed Lines]",
          "157:    apr_uuid_t uuid;",
          "158:    apr_uuid_get(&uuid);",
          "159:    apr_uuid_format((char *) &z->uuid, &uuid);",
          "",
          "[Added Lines]",
          "187:    oidc_session_uuid_new(r, z);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "240:  oidc_session_t *z = (*zz = apr_pcalloc(r->pool, sizeof(oidc_session_t)));",
          "246:  if (c->session_type == OIDC_SESSION_TYPE_SERVER_CACHE)",
          "",
          "[Removed Lines]",
          "242:  strncpy(z->uuid, \"\", strlen(\"\"));",
          "243:  z->remote_user = NULL;",
          "244:  z->state = NULL;",
          "",
          "[Added Lines]",
          "268:  oidc_session_clear(r, z);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "254:   rc = oidc_session_load_cookie(r, c, z);",
          "258:   json_t *j_expires = json_object_get(z->state, OIDC_SESSION_EXPIRY_KEY);",
          "259:   if (j_expires)",
          "",
          "[Removed Lines]",
          "256:  if (z->state != NULL) {",
          "",
          "[Added Lines]",
          "280:  if (rc == TRUE) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "263:   if (apr_time_now() > z->expiry) {",
          "265:    oidc_warn(r, \"session restored from cache has expired\");",
          "269:   } else {",
          "",
          "[Removed Lines]",
          "266:    oidc_session_free(r, z);",
          "267:    z->state = json_object();",
          "",
          "[Added Lines]",
          "290:    oidc_session_clear(r, z);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "277:       || (apr_strnatcmp(env_p_tb_id, ses_p_tb_id) != 0)) {",
          "278:      oidc_error(r,",
          "279:        \"the Provided Token Binding ID stored in the session doesn't match the one presented by the user agent\");",
          "282:     }",
          "283:    }",
          "285:    oidc_session_get(r, z, OIDC_SESSION_REMOTE_USER_KEY,",
          "286:      &z->remote_user);",
          "287:   }",
          "291:  }",
          "293:  return rc;",
          "",
          "[Removed Lines]",
          "280:      oidc_session_free(r, z);",
          "281:      z->state = json_object();",
          "288:  } else {",
          "290:   z->state = json_object();",
          "",
          "[Added Lines]",
          "303:      oidc_session_clear(r, z);",
          "",
          "---------------"
        ]
      }
    }
  ]
}