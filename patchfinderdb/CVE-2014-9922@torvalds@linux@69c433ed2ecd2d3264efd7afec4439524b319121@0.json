{
  "cve_id": "CVE-2014-9922",
  "cve_desc": "The eCryptfs subsystem in the Linux kernel before 3.18 allows local users to gain privileges via a large filesystem stack that includes an overlayfs layer, related to fs/ecryptfs/main.c and fs/overlayfs/super.c.",
  "repo": "torvalds/linux",
  "patch_hash": "69c433ed2ecd2d3264efd7afec4439524b319121",
  "patch_info": {
    "commit_hash": "69c433ed2ecd2d3264efd7afec4439524b319121",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/69c433ed2ecd2d3264efd7afec4439524b319121",
    "files": [
      "fs/ecryptfs/main.c",
      "fs/overlayfs/super.c",
      "include/linux/fs.h"
    ],
    "message": "fs: limit filesystem stacking depth\n\nAdd a simple read-only counter to super_block that indicates how deep this\nis in the stack of filesystems.  Previously ecryptfs was the only stackable\nfilesystem and it explicitly disallowed multiple layers of itself.\n\nOverlayfs, however, can be stacked recursively and also may be stacked\non top of ecryptfs or vice versa.\n\nTo limit the kernel stack usage we must limit the depth of the\nfilesystem stack.  Initially the limit is set to 2.\n\nSigned-off-by: Miklos Szeredi <mszeredi@suse.cz>",
    "before_after_code_files": [
      "fs/ecryptfs/main.c||fs/ecryptfs/main.c",
      "fs/overlayfs/super.c||fs/overlayfs/super.c",
      "include/linux/fs.h||include/linux/fs.h"
    ]
  },
  "patch_diff": {
    "fs/ecryptfs/main.c||fs/ecryptfs/main.c": [
      "File: fs/ecryptfs/main.c -> fs/ecryptfs/main.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "566:  s->s_maxbytes = path.dentry->d_sb->s_maxbytes;",
      "567:  s->s_blocksize = path.dentry->d_sb->s_blocksize;",
      "568:  s->s_magic = ECRYPTFS_SUPER_MAGIC;",
      "570:  inode = ecryptfs_get_inode(path.dentry->d_inode, s);",
      "571:  rc = PTR_ERR(inode);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "569:  s->s_stack_depth = path.dentry->d_sb->s_stack_depth + 1;",
      "571:  rc = -EINVAL;",
      "572:  if (s->s_stack_depth > FILESYSTEM_MAX_STACK_DEPTH) {",
      "573:   pr_err(\"eCryptfs: maximum fs stacking depth exceeded\\n\");",
      "574:   goto out_free;",
      "575:  }",
      "",
      "---------------"
    ],
    "fs/overlayfs/super.c||fs/overlayfs/super.c": [
      "File: fs/overlayfs/super.c -> fs/overlayfs/super.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "677:  }",
      "678:  ufs->lower_namelen = statfs.f_namelen;",
      "680:  ufs->upper_mnt = clone_private_mount(&upperpath);",
      "681:  err = PTR_ERR(ufs->upper_mnt);",
      "682:  if (IS_ERR(ufs->upper_mnt)) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "680:  sb->s_stack_depth = max(upperpath.mnt->mnt_sb->s_stack_depth,",
      "681:     lowerpath.mnt->mnt_sb->s_stack_depth) + 1;",
      "683:  err = -EINVAL;",
      "684:  if (sb->s_stack_depth > FILESYSTEM_MAX_STACK_DEPTH) {",
      "685:   pr_err(\"overlayfs: maximum fs stacking depth exceeded\\n\");",
      "686:   goto out_put_workpath;",
      "687:  }",
      "",
      "---------------"
    ],
    "include/linux/fs.h||include/linux/fs.h": [
      "File: include/linux/fs.h -> include/linux/fs.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "262: #include <linux/quota.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "268: #define FILESYSTEM_MAX_STACK_DEPTH 2",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1273:  struct list_lru  s_dentry_lru ____cacheline_aligned_in_smp;",
      "1274:  struct list_lru  s_inode_lru ____cacheline_aligned_in_smp;",
      "1275:  struct rcu_head  rcu;",
      "1276: };",
      "1278: extern struct timespec current_fs_time(struct super_block *sb);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1286:  int s_stack_depth;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ab508822cab4c84f07373cd6ad107a1fd1362831",
      "candidate_info": {
        "commit_hash": "ab508822cab4c84f07373cd6ad107a1fd1362831",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/ab508822cab4c84f07373cd6ad107a1fd1362831",
        "files": [
          "fs/overlayfs/super.c"
        ],
        "message": "ovl: improve mount helpers\n\nMove common checks into ovl_mount_dir() helper.\n\nCreate helper for looking up lower directories.\n\nSigned-off-by: Miklos Szeredi <mszeredi@suse.cz>",
        "before_after_code_files": [
          "fs/overlayfs/super.c||fs/overlayfs/super.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/overlayfs/super.c||fs/overlayfs/super.c"
          ],
          "candidate": [
            "fs/overlayfs/super.c||fs/overlayfs/super.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/overlayfs/super.c||fs/overlayfs/super.c": [
          "File: fs/overlayfs/super.c -> fs/overlayfs/super.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "669:  }",
          "670: }",
          "690: static bool ovl_is_allowed_fs_type(struct dentry *root)",
          "691: {",
          "692:  const struct dentry_operations *dop = root->d_op;",
          "",
          "[Removed Lines]",
          "672: static int ovl_mount_dir(const char *name, struct path *path)",
          "673: {",
          "674:  int err;",
          "675:  char *tmp = kstrdup(name, GFP_KERNEL);",
          "677:  if (!tmp)",
          "678:   return -ENOMEM;",
          "680:  ovl_unescape(tmp);",
          "681:  err = kern_path(tmp, LOOKUP_FOLLOW, path);",
          "682:  if (err) {",
          "683:   pr_err(\"overlayfs: failed to resolve '%s': %i\\n\", tmp, err);",
          "684:   err = -EINVAL;",
          "685:  }",
          "686:  kfree(tmp);",
          "687:  return err;",
          "688: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "706:  return true;",
          "707: }",
          "710: static bool ovl_workdir_ok(struct dentry *workdir, struct dentry *upperdir)",
          "711: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "691: static int ovl_mount_dir_noesc(const char *name, struct path *path)",
          "692: {",
          "693:  int err;",
          "695:  err = kern_path(name, LOOKUP_FOLLOW, path);",
          "696:  if (err) {",
          "697:   pr_err(\"overlayfs: failed to resolve '%s': %i\\n\", name, err);",
          "698:   goto out;",
          "699:  }",
          "700:  err = -EINVAL;",
          "701:  if (!ovl_is_allowed_fs_type(path->dentry)) {",
          "702:   pr_err(\"overlayfs: filesystem on '%s' not supported\\n\", name);",
          "703:   goto out_put;",
          "704:  }",
          "705:  if (!S_ISDIR(path->dentry->d_inode->i_mode)) {",
          "706:   pr_err(\"overlayfs: '%s' not a directory\\n\", name);",
          "707:   goto out_put;",
          "708:  }",
          "709:  return 0;",
          "711: out_put:",
          "712:  path_put(path);",
          "713: out:",
          "714:  return err;",
          "715: }",
          "717: static int ovl_mount_dir(const char *name, struct path *path)",
          "718: {",
          "719:  int err = -ENOMEM;",
          "720:  char *tmp = kstrdup(name, GFP_KERNEL);",
          "722:  if (tmp) {",
          "723:   ovl_unescape(tmp);",
          "724:   err = ovl_mount_dir_noesc(tmp, path);",
          "725:   kfree(tmp);",
          "726:  }",
          "727:  return err;",
          "728: }",
          "730: static int ovl_lower_dir(const char *name, struct path *path, long *namelen,",
          "731:     int *stack_depth)",
          "732: {",
          "733:  int err;",
          "734:  struct kstatfs statfs;",
          "736:  err = ovl_mount_dir(name, path);",
          "737:  if (err)",
          "738:   goto out;",
          "740:  err = vfs_statfs(path, &statfs);",
          "741:  if (err) {",
          "742:   pr_err(\"overlayfs: statfs failed on '%s'\\n\", name);",
          "743:   goto out_put;",
          "744:  }",
          "748:  return 0;",
          "750: out_put:",
          "751:  path_put(path);",
          "752: out:",
          "753:  return err;",
          "754: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "726:  struct dentry *root_dentry;",
          "727:  struct ovl_entry *oe;",
          "728:  struct ovl_fs *ufs;",
          "730:  struct vfsmount *mnt;",
          "731:  unsigned int i;",
          "732:  int err;",
          "",
          "[Removed Lines]",
          "729:  struct kstatfs statfs;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "756:  if (err)",
          "757:   goto out_put_upperpath;",
          "771:  if (upperpath.mnt != workpath.mnt) {",
          "772:   pr_err(\"overlayfs: workdir and upperdir must reside under the same mount\\n\");",
          "774:  }",
          "775:  if (!ovl_workdir_ok(workpath.dentry, upperpath.dentry)) {",
          "776:   pr_err(\"overlayfs: workdir and upperdir must be separate subtrees\\n\");",
          "794:  }",
          "800:  err = -EINVAL;",
          "801:  if (sb->s_stack_depth > FILESYSTEM_MAX_STACK_DEPTH) {",
          "802:   pr_err(\"overlayfs: maximum fs stacking depth exceeded\\n\");",
          "803:   goto out_put_lowerpath;",
          "",
          "[Removed Lines]",
          "759:  err = ovl_mount_dir(ufs->config.lowerdir, &lowerpath);",
          "760:  if (err)",
          "761:   goto out_put_workpath;",
          "763:  err = -EINVAL;",
          "764:  if (!S_ISDIR(upperpath.dentry->d_inode->i_mode) ||",
          "765:      !S_ISDIR(lowerpath.dentry->d_inode->i_mode) ||",
          "766:      !S_ISDIR(workpath.dentry->d_inode->i_mode)) {",
          "767:   pr_err(\"overlayfs: upperdir or lowerdir or workdir not a directory\\n\");",
          "768:   goto out_put_lowerpath;",
          "769:  }",
          "773:   goto out_put_lowerpath;",
          "777:   goto out_put_lowerpath;",
          "778:  }",
          "780:  if (!ovl_is_allowed_fs_type(upperpath.dentry)) {",
          "781:   pr_err(\"overlayfs: filesystem of upperdir is not supported\\n\");",
          "782:   goto out_put_lowerpath;",
          "783:  }",
          "785:  if (!ovl_is_allowed_fs_type(lowerpath.dentry)) {",
          "786:   pr_err(\"overlayfs: filesystem of lowerdir is not supported\\n\");",
          "787:   goto out_put_lowerpath;",
          "788:  }",
          "790:  err = vfs_statfs(&lowerpath, &statfs);",
          "791:  if (err) {",
          "792:   pr_err(\"overlayfs: statfs failed on lowerpath\\n\");",
          "793:   goto out_put_lowerpath;",
          "795:  ufs->lower_namelen = statfs.f_namelen;",
          "797:  sb->s_stack_depth = max(upperpath.mnt->mnt_sb->s_stack_depth,",
          "798:     lowerpath.mnt->mnt_sb->s_stack_depth) + 1;",
          "",
          "[Added Lines]",
          "807:   goto out_put_workpath;",
          "811:   goto out_put_workpath;",
          "813:  sb->s_stack_depth = upperpath.mnt->mnt_sb->s_stack_depth;",
          "815:  err = ovl_lower_dir(ufs->config.lowerdir, &lowerpath,",
          "816:        &ufs->lower_namelen, &sb->s_stack_depth);",
          "817:  if (err)",
          "818:   goto out_put_workpath;",
          "821:  sb->s_stack_depth++;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "853b39a7c82826b8413048feec7bf08e98ce7a84",
      "candidate_info": {
        "commit_hash": "853b39a7c82826b8413048feec7bf08e98ce7a84",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/853b39a7c82826b8413048feec7bf08e98ce7a84",
        "files": [
          "fs/super.c",
          "include/linux/fs.h"
        ],
        "message": "shift percpu_counter_destroy() into destroy_super_work()\n\nOf course, this patch is ugly as hell. It will be (partially)\nreverted later. We add it to ensure that other WIP changes in\npercpu_rw_semaphore won't break fs/super.c.\n\nWe do not even need this change right now, percpu_free_rwsem()\nis fine in atomic context. But we are going to change this, it\nwill be might_sleep() after we merge the rcu_sync() patches.\n\nAnd even after that we do not really need destroy_super_work(),\nwe will kill it in any case. Instead, destroy_super_rcu() should\njust check that rss->cb_state == CB_IDLE and do call_rcu() again\nin the (very unlikely) case this is not true.\n\nSo this is just the temporary kludge which helps us to avoid the\nconflicts with the changes which will be (hopefully) routed via\nrcu tree.\n\nSigned-off-by: Oleg Nesterov <oleg@redhat.com>\nReviewed-by: Jan Kara <jack@suse.com>",
        "before_after_code_files": [
          "fs/super.c||fs/super.c",
          "include/linux/fs.h||include/linux/fs.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/linux/fs.h||include/linux/fs.h"
          ],
          "candidate": [
            "include/linux/fs.h||include/linux/fs.h"
          ]
        }
      },
      "candidate_diff": {
        "fs/super.c||fs/super.c": [
          "File: fs/super.c -> fs/super.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:  return total_objects;",
          "136: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138: static void destroy_super_work(struct work_struct *work)",
          "139: {",
          "140:  struct super_block *s = container_of(work, struct super_block,",
          "141:        destroy_work);",
          "142:  int i;",
          "144:  for (i = 0; i < SB_FREEZE_LEVELS; i++)",
          "145:   percpu_counter_destroy(&s->s_writers.counter[i]);",
          "146:  kfree(s);",
          "147: }",
          "149: static void destroy_super_rcu(struct rcu_head *head)",
          "150: {",
          "151:  struct super_block *s = container_of(head, struct super_block, rcu);",
          "152:  INIT_WORK(&s->destroy_work, destroy_super_work);",
          "153:  schedule_work(&s->destroy_work);",
          "154: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144: static void destroy_super(struct super_block *s)",
          "145: {",
          "147:  list_lru_destroy(&s->s_dentry_lru);",
          "148:  list_lru_destroy(&s->s_inode_lru);",
          "151:  security_sb_free(s);",
          "152:  WARN_ON(!list_empty(&s->s_mounts));",
          "153:  kfree(s->s_subtype);",
          "154:  kfree(s->s_options);",
          "156: }",
          "",
          "[Removed Lines]",
          "146:  int i;",
          "149:  for (i = 0; i < SB_FREEZE_LEVELS; i++)",
          "150:   percpu_counter_destroy(&s->s_writers.counter[i]);",
          "155:  kfree_rcu(s, rcu);",
          "",
          "[Added Lines]",
          "170:  call_rcu(&s->rcu, destroy_super_rcu);",
          "",
          "---------------"
        ],
        "include/linux/fs.h||include/linux/fs.h": [
          "File: include/linux/fs.h -> include/linux/fs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include <linux/lockdep.h>",
          "31: #include <linux/percpu-rwsem.h>",
          "32: #include <linux/blk_types.h>",
          "34: #include <asm/byteorder.h>",
          "35: #include <uapi/linux/fs.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #include <linux/workqueue.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1375:  struct list_lru  s_dentry_lru ____cacheline_aligned_in_smp;",
          "1376:  struct list_lru  s_inode_lru ____cacheline_aligned_in_smp;",
          "1377:  struct rcu_head  rcu;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1379:  struct work_struct destroy_work;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a78d9f0d5d5ca9054703376c7c23c901807ddd87",
      "candidate_info": {
        "commit_hash": "a78d9f0d5d5ca9054703376c7c23c901807ddd87",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/a78d9f0d5d5ca9054703376c7c23c901807ddd87",
        "files": [
          "Documentation/filesystems/overlayfs.txt",
          "fs/overlayfs/super.c"
        ],
        "message": "ovl: support multiple lower layers\n\nAllow \"lowerdir=\" option to contain multiple lower directories separated by\na colon (e.g. \"lowerdir=/bin:/usr/bin\").  Colon characters in filenames can\nbe escaped with a backslash.\n\nSigned-off-by: Miklos Szeredi <mszeredi@suse.cz>",
        "before_after_code_files": [
          "fs/overlayfs/super.c||fs/overlayfs/super.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/overlayfs/super.c||fs/overlayfs/super.c"
          ],
          "candidate": [
            "fs/overlayfs/super.c||fs/overlayfs/super.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/overlayfs/super.c||fs/overlayfs/super.c": [
          "File: fs/overlayfs/super.c -> fs/overlayfs/super.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:  struct path lowerstack[];",
          "61: };",
          "63: const char *ovl_opaque_xattr = \"trusted.overlay.opaque\";",
          "65: static struct dentry *__ovl_dentry_lower(struct ovl_entry *oe)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63: #define OVL_MAX_STACK 500",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "693: static int ovl_mount_dir_noesc(const char *name, struct path *path)",
          "694: {",
          "697:  err = kern_path(name, LOOKUP_FOLLOW, path);",
          "698:  if (err) {",
          "699:   pr_err(\"overlayfs: failed to resolve '%s': %i\\n\", name, err);",
          "",
          "[Removed Lines]",
          "695:  int err;",
          "",
          "[Added Lines]",
          "697:  int err = -EINVAL;",
          "699:  if (!*name) {",
          "700:   pr_err(\"overlayfs: empty lowerdir\\n\");",
          "701:   goto out;",
          "702:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "735:  int err;",
          "736:  struct kstatfs statfs;",
          "739:  if (err)",
          "740:   goto out;",
          "",
          "[Removed Lines]",
          "738:  err = ovl_mount_dir(name, path);",
          "",
          "[Added Lines]",
          "744:  err = ovl_mount_dir_noesc(name, path);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "767:  return ok;",
          "768: }",
          "770: static int ovl_fill_super(struct super_block *sb, void *data, int silent)",
          "771: {",
          "773:  struct path upperpath = { NULL, NULL };",
          "774:  struct path workpath = { NULL, NULL };",
          "775:  struct dentry *root_dentry;",
          "776:  struct ovl_entry *oe;",
          "777:  struct ovl_fs *ufs;",
          "779:  unsigned int i;",
          "780:  int err;",
          "",
          "[Removed Lines]",
          "772:  struct path lowerpath;",
          "778:  struct vfsmount *mnt;",
          "",
          "[Added Lines]",
          "776: static unsigned int ovl_split_lowerdirs(char *str)",
          "777: {",
          "778:  unsigned int ctr = 1;",
          "779:  char *s, *d;",
          "781:  for (s = d = str;; s++, d++) {",
          "782:   if (*s == '\\\\') {",
          "783:    s++;",
          "784:   } else if (*s == ':') {",
          "786:    ctr++;",
          "787:    continue;",
          "788:   }",
          "790:   if (!*s)",
          "791:    break;",
          "792:  }",
          "793:  return ctr;",
          "794: }",
          "803:  struct path *stack = NULL;",
          "804:  char *lowertmp;",
          "805:  char *lower;",
          "806:  unsigned int numlower;",
          "807:  unsigned int stacklen = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "820:   }",
          "821:   sb->s_stack_depth = upperpath.mnt->mnt_sb->s_stack_depth;",
          "822:  }",
          "827:   goto out_put_workpath;",
          "829:  err = -EINVAL;",
          "830:  sb->s_stack_depth++;",
          "831:  if (sb->s_stack_depth > FILESYSTEM_MAX_STACK_DEPTH) {",
          "",
          "[Removed Lines]",
          "824:  err = ovl_lower_dir(ufs->config.lowerdir, &lowerpath,",
          "825:        &ufs->lower_namelen, &sb->s_stack_depth);",
          "826:  if (err)",
          "",
          "[Added Lines]",
          "852:  err = -ENOMEM;",
          "853:  lowertmp = kstrdup(ufs->config.lowerdir, GFP_KERNEL);",
          "854:  if (!lowertmp)",
          "857:  err = -EINVAL;",
          "858:  stacklen = ovl_split_lowerdirs(lowertmp);",
          "859:  if (stacklen > OVL_MAX_STACK)",
          "860:   goto out_free_lowertmp;",
          "862:  stack = kcalloc(stacklen, sizeof(struct path), GFP_KERNEL);",
          "863:  if (!stack)",
          "864:   goto out_free_lowertmp;",
          "866:  lower = lowertmp;",
          "867:  for (numlower = 0; numlower < stacklen; numlower++) {",
          "868:   err = ovl_lower_dir(lower, &stack[numlower],",
          "869:         &ufs->lower_namelen, &sb->s_stack_depth);",
          "870:   if (err)",
          "871:    goto out_put_lowerpath;",
          "873:   lower = strchr(lower, '\\0') + 1;",
          "874:  }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "850:   }",
          "851:  }",
          "854:  if (ufs->lower_mnt == NULL)",
          "855:   goto out_put_workdir;",
          "873:  if (!ufs->upper_mnt || (ufs->upper_mnt->mnt_sb->s_flags & MS_RDONLY))",
          "",
          "[Removed Lines]",
          "853:  ufs->lower_mnt = kcalloc(1, sizeof(struct vfsmount *), GFP_KERNEL);",
          "857:  mnt = clone_private_mount(&lowerpath);",
          "858:  err = PTR_ERR(mnt);",
          "859:  if (IS_ERR(mnt)) {",
          "860:   pr_err(\"overlayfs: failed to clone lowerpath\\n\");",
          "861:   goto out_put_lower_mnt;",
          "862:  }",
          "867:  mnt->mnt_flags |= MNT_READONLY;",
          "869:  ufs->lower_mnt[0] = mnt;",
          "870:  ufs->numlower = 1;",
          "",
          "[Added Lines]",
          "900:  ufs->lower_mnt = kcalloc(numlower, sizeof(struct vfsmount *), GFP_KERNEL);",
          "903:  for (i = 0; i < numlower; i++) {",
          "904:   struct vfsmount *mnt = clone_private_mount(&stack[i]);",
          "906:   if (IS_ERR(mnt)) {",
          "907:    pr_err(\"overlayfs: failed to clone lowerpath\\n\");",
          "908:    goto out_put_lower_mnt;",
          "909:   }",
          "914:   mnt->mnt_flags |= MNT_READONLY;",
          "916:   ufs->lower_mnt[ufs->numlower] = mnt;",
          "917:   ufs->numlower++;",
          "918:  }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "876:  sb->s_d_op = &ovl_dentry_operations;",
          "878:  err = -ENOMEM;",
          "880:  if (!oe)",
          "881:   goto out_put_lower_mnt;",
          "",
          "[Removed Lines]",
          "879:  oe = ovl_alloc_entry(1);",
          "",
          "[Added Lines]",
          "927:  oe = ovl_alloc_entry(numlower);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "885:   goto out_free_oe;",
          "887:  mntput(upperpath.mnt);",
          "889:  path_put(&workpath);",
          "891:  oe->__upperdentry = upperpath.dentry;",
          "895:  root_dentry->d_fsdata = oe;",
          "",
          "[Removed Lines]",
          "888:  mntput(lowerpath.mnt);",
          "892:  oe->lowerstack[0].dentry = lowerpath.dentry;",
          "893:  oe->lowerstack[0].mnt = ufs->lower_mnt[0];",
          "",
          "[Added Lines]",
          "936:  for (i = 0; i < numlower; i++)",
          "937:   mntput(stack[i].mnt);",
          "939:  kfree(lowertmp);",
          "942:  for (i = 0; i < numlower; i++) {",
          "943:   oe->lowerstack[i].dentry = stack[i].dentry;",
          "944:   oe->lowerstack[i].mnt = ufs->lower_mnt[i];",
          "945:  }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "912: out_put_upper_mnt:",
          "913:  mntput(ufs->upper_mnt);",
          "914: out_put_lowerpath:",
          "916: out_put_workpath:",
          "917:  path_put(&workpath);",
          "918: out_put_upperpath:",
          "",
          "[Removed Lines]",
          "915:  path_put(&lowerpath);",
          "",
          "[Added Lines]",
          "967:  for (i = 0; i < numlower; i++)",
          "968:   path_put(&stack[i]);",
          "969:  kfree(stack);",
          "970: out_free_lowertmp:",
          "971:  kfree(lowertmp);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3b7a9a249a93e68b7bb318de40e64d3b68ba1a6d",
      "candidate_info": {
        "commit_hash": "3b7a9a249a93e68b7bb318de40e64d3b68ba1a6d",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/3b7a9a249a93e68b7bb318de40e64d3b68ba1a6d",
        "files": [
          "fs/overlayfs/super.c"
        ],
        "message": "ovl: mount: change order of initialization\n\nMove allocation of root entry above to where it's needed.\n\nMove initializations related to upperdir and workdir near each other.\n\nSigned-off-by: Miklos Szeredi <mszeredi@suse.cz>",
        "before_after_code_files": [
          "fs/overlayfs/super.c||fs/overlayfs/super.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/overlayfs/super.c||fs/overlayfs/super.c"
          ],
          "candidate": [
            "fs/overlayfs/super.c||fs/overlayfs/super.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/overlayfs/super.c||fs/overlayfs/super.c": [
          "File: fs/overlayfs/super.c -> fs/overlayfs/super.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "723:  struct path lowerpath;",
          "724:  struct path upperpath;",
          "725:  struct path workpath;",
          "727:  struct dentry *root_dentry;",
          "728:  struct ovl_entry *oe;",
          "729:  struct ovl_fs *ufs;",
          "",
          "[Removed Lines]",
          "726:  struct inode *root_inode;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "749:   goto out_free_config;",
          "750:  }",
          "757:  err = ovl_mount_dir(ufs->config.upperdir, &upperpath);",
          "758:  if (err)",
          "762:  if (err)",
          "763:   goto out_put_upperpath;",
          "766:  if (err)",
          "769:  err = -EINVAL;",
          "770:  if (!S_ISDIR(upperpath.dentry->d_inode->i_mode) ||",
          "771:      !S_ISDIR(lowerpath.dentry->d_inode->i_mode) ||",
          "772:      !S_ISDIR(workpath.dentry->d_inode->i_mode)) {",
          "773:   pr_err(\"overlayfs: upperdir or lowerdir or workdir not a directory\\n\");",
          "775:  }",
          "777:  if (upperpath.mnt != workpath.mnt) {",
          "778:   pr_err(\"overlayfs: workdir and upperdir must reside under the same mount\\n\");",
          "780:  }",
          "781:  if (!ovl_workdir_ok(workpath.dentry, upperpath.dentry)) {",
          "782:   pr_err(\"overlayfs: workdir and upperdir must be separate subtrees\\n\");",
          "784:  }",
          "786:  if (!ovl_is_allowed_fs_type(upperpath.dentry)) {",
          "787:   pr_err(\"overlayfs: filesystem of upperdir is not supported\\n\");",
          "789:  }",
          "791:  if (!ovl_is_allowed_fs_type(lowerpath.dentry)) {",
          "792:   pr_err(\"overlayfs: filesystem of lowerdir is not supported\\n\");",
          "794:  }",
          "796:  err = vfs_statfs(&lowerpath, &statfs);",
          "797:  if (err) {",
          "798:   pr_err(\"overlayfs: statfs failed on lowerpath\\n\");",
          "800:  }",
          "801:  ufs->lower_namelen = statfs.f_namelen;",
          "",
          "[Removed Lines]",
          "752:  err = -ENOMEM;",
          "753:  oe = ovl_alloc_entry(1);",
          "754:  if (oe == NULL)",
          "755:   goto out_free_config;",
          "759:   goto out_free_oe;",
          "761:  err = ovl_mount_dir(ufs->config.lowerdir, &lowerpath);",
          "765:  err = ovl_mount_dir(ufs->config.workdir, &workpath);",
          "767:   goto out_put_lowerpath;",
          "774:   goto out_put_workpath;",
          "779:   goto out_put_workpath;",
          "783:   goto out_put_workpath;",
          "788:   goto out_put_workpath;",
          "793:   goto out_put_workpath;",
          "799:   goto out_put_workpath;",
          "",
          "[Added Lines]",
          "753:   goto out_free_config;",
          "755:  err = ovl_mount_dir(ufs->config.workdir, &workpath);",
          "759:  err = ovl_mount_dir(ufs->config.lowerdir, &lowerpath);",
          "761:   goto out_put_workpath;",
          "768:   goto out_put_lowerpath;",
          "773:   goto out_put_lowerpath;",
          "777:   goto out_put_lowerpath;",
          "782:   goto out_put_lowerpath;",
          "787:   goto out_put_lowerpath;",
          "793:   goto out_put_lowerpath;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "806:  err = -EINVAL;",
          "807:  if (sb->s_stack_depth > FILESYSTEM_MAX_STACK_DEPTH) {",
          "808:   pr_err(\"overlayfs: maximum fs stacking depth exceeded\\n\");",
          "810:  }",
          "812:  ufs->upper_mnt = clone_private_mount(&upperpath);",
          "813:  err = PTR_ERR(ufs->upper_mnt);",
          "814:  if (IS_ERR(ufs->upper_mnt)) {",
          "815:   pr_err(\"overlayfs: failed to clone upperpath\\n\");",
          "817:  }",
          "819:  ufs->lower_mnt = kcalloc(1, sizeof(struct vfsmount *), GFP_KERNEL);",
          "820:  if (ufs->lower_mnt == NULL)",
          "823:  mnt = clone_private_mount(&lowerpath);",
          "824:  err = PTR_ERR(mnt);",
          "",
          "[Removed Lines]",
          "809:   goto out_put_workpath;",
          "816:   goto out_put_workpath;",
          "821:   goto out_put_upper_mnt;",
          "",
          "[Added Lines]",
          "803:   goto out_put_lowerpath;",
          "810:   goto out_put_lowerpath;",
          "811:  }",
          "813:  ufs->workdir = ovl_workdir_create(ufs->upper_mnt, workpath.dentry);",
          "814:  err = PTR_ERR(ufs->workdir);",
          "815:  if (IS_ERR(ufs->workdir)) {",
          "816:   pr_err(\"overlayfs: failed to create directory %s/%s\\n\",",
          "817:          ufs->config.workdir, OVL_WORKDIR_NAME);",
          "818:   goto out_put_upper_mnt;",
          "823:   goto out_put_workdir;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "835:  ufs->lower_mnt[0] = mnt;",
          "836:  ufs->numlower = 1;",
          "847:  if (ufs->upper_mnt->mnt_sb->s_flags & MS_RDONLY)",
          "848:   sb->s_flags |= MS_RDONLY;",
          "",
          "[Removed Lines]",
          "838:  ufs->workdir = ovl_workdir_create(ufs->upper_mnt, workpath.dentry);",
          "839:  err = PTR_ERR(ufs->workdir);",
          "840:  if (IS_ERR(ufs->workdir)) {",
          "841:   pr_err(\"overlayfs: failed to create directory %s/%s\\n\",",
          "842:          ufs->config.workdir, OVL_WORKDIR_NAME);",
          "843:   goto out_put_lower_mnt;",
          "844:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "850:  sb->s_d_op = &ovl_dentry_operations;",
          "852:  err = -ENOMEM;",
          "858:  if (!root_dentry)",
          "861:  mntput(upperpath.mnt);",
          "862:  mntput(lowerpath.mnt);",
          "",
          "[Removed Lines]",
          "853:  root_inode = ovl_new_inode(sb, S_IFDIR, oe);",
          "854:  if (!root_inode)",
          "855:   goto out_put_workdir;",
          "857:  root_dentry = d_make_root(root_inode);",
          "859:   goto out_put_workdir;",
          "",
          "[Added Lines]",
          "847:  oe = ovl_alloc_entry(1);",
          "848:  if (!oe)",
          "849:   goto out_put_lower_mnt;",
          "851:  root_dentry = d_make_root(ovl_new_inode(sb, S_IFDIR, oe));",
          "853:   goto out_free_oe;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "876:  return 0;",
          "880: out_put_lower_mnt:",
          "881:  for (i = 0; i < ufs->numlower; i++)",
          "882:   mntput(ufs->lower_mnt[i]);",
          "883:  kfree(ufs->lower_mnt);",
          "884: out_put_upper_mnt:",
          "885:  mntput(ufs->upper_mnt);",
          "888: out_put_lowerpath:",
          "889:  path_put(&lowerpath);",
          "890: out_put_upperpath:",
          "891:  path_put(&upperpath);",
          "894: out_free_config:",
          "895:  kfree(ufs->config.lowerdir);",
          "896:  kfree(ufs->config.upperdir);",
          "",
          "[Removed Lines]",
          "878: out_put_workdir:",
          "879:  dput(ufs->workdir);",
          "886: out_put_workpath:",
          "887:  path_put(&workpath);",
          "892: out_free_oe:",
          "893:  kfree(oe);",
          "",
          "[Added Lines]",
          "872: out_free_oe:",
          "873:  kfree(oe);",
          "878: out_put_workdir:",
          "879:  dput(ufs->workdir);",
          "884: out_put_workpath:",
          "885:  path_put(&workpath);",
          "",
          "---------------"
        ]
      }
    }
  ]
}