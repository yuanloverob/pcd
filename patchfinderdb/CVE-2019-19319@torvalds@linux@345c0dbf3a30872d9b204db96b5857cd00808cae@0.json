{
  "cve_id": "CVE-2019-19319",
  "cve_desc": "In the Linux kernel before 5.2, a setxattr operation, after a mount of a crafted ext4 image, can cause a slab-out-of-bounds write access because of an ext4_xattr_set_entry use-after-free in fs/ext4/xattr.c when a large old_size value is used in a memset call, aka CID-345c0dbf3a30.",
  "repo": "torvalds/linux",
  "patch_hash": "345c0dbf3a30872d9b204db96b5857cd00808cae",
  "patch_info": {
    "commit_hash": "345c0dbf3a30872d9b204db96b5857cd00808cae",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/345c0dbf3a30872d9b204db96b5857cd00808cae",
    "files": [
      "fs/ext4/block_validity.c",
      "fs/ext4/inode.c"
    ],
    "message": "ext4: protect journal inode's blocks using block_validity\n\nAdd the blocks which belong to the journal inode to block_validity's\nsystem zone so attempts to deallocate or overwrite the journal due a\ncorrupted file system where the journal blocks are also claimed by\nanother inode.\n\nBugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=202879\nSigned-off-by: Theodore Ts'o <tytso@mit.edu>\nCc: stable@kernel.org",
    "before_after_code_files": [
      "fs/ext4/block_validity.c||fs/ext4/block_validity.c",
      "fs/ext4/inode.c||fs/ext4/inode.c"
    ]
  },
  "patch_diff": {
    "fs/ext4/block_validity.c||fs/ext4/block_validity.c": [
      "File: fs/ext4/block_validity.c -> fs/ext4/block_validity.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "137:  printk(KERN_CONT \"\\n\");",
      "138: }",
      "140: int ext4_setup_system_zone(struct super_block *sb)",
      "141: {",
      "142:  ext4_group_t ngroups = ext4_get_groups_count(sb);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "140: static int ext4_protect_reserved_inode(struct super_block *sb, u32 ino)",
      "141: {",
      "142:  struct inode *inode;",
      "143:  struct ext4_sb_info *sbi = EXT4_SB(sb);",
      "144:  struct ext4_map_blocks map;",
      "145:  u32 i = 0, err = 0, num, n;",
      "147:  if ((ino < EXT4_ROOT_INO) ||",
      "148:      (ino > le32_to_cpu(sbi->s_es->s_inodes_count)))",
      "149:   return -EINVAL;",
      "150:  inode = ext4_iget(sb, ino, EXT4_IGET_SPECIAL);",
      "151:  if (IS_ERR(inode))",
      "152:   return PTR_ERR(inode);",
      "153:  num = (inode->i_size + sb->s_blocksize - 1) >> sb->s_blocksize_bits;",
      "154:  while (i < num) {",
      "155:   map.m_lblk = i;",
      "156:   map.m_len = num - i;",
      "157:   n = ext4_map_blocks(NULL, inode, &map, 0);",
      "158:   if (n < 0) {",
      "159:    err = n;",
      "160:    break;",
      "161:   }",
      "162:   if (n == 0) {",
      "163:    i++;",
      "164:   } else {",
      "165:    if (!ext4_data_block_valid(sbi, map.m_pblk, n)) {",
      "166:     ext4_error(sb, \"blocks %llu-%llu from inode %u \"",
      "167:         \"overlap system zone\", map.m_pblk,",
      "168:         map.m_pblk + map.m_len - 1, ino);",
      "169:     err = -EFSCORRUPTED;",
      "170:     break;",
      "171:    }",
      "172:    err = add_system_zone(sbi, map.m_pblk, n);",
      "173:    if (err < 0)",
      "174:     break;",
      "175:    i += n;",
      "176:   }",
      "177:  }",
      "178:  iput(inode);",
      "179:  return err;",
      "180: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "171:   if (ret)",
      "172:    return ret;",
      "173:  }",
      "175:  if (test_opt(sb, DEBUG))",
      "176:   debug_print_tree(sbi);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:  if (ext4_has_feature_journal(sb) && sbi->s_es->s_journal_inum) {",
      "217:   ret = ext4_protect_reserved_inode(sb,",
      "218:     le32_to_cpu(sbi->s_es->s_journal_inum));",
      "219:   if (ret)",
      "220:    return ret;",
      "221:  }",
      "",
      "---------------"
    ],
    "fs/ext4/inode.c||fs/ext4/inode.c": [
      "File: fs/ext4/inode.c -> fs/ext4/inode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "399:     unsigned int line,",
      "400:     struct ext4_map_blocks *map)",
      "401: {",
      "402:  if (!ext4_data_block_valid(EXT4_SB(inode->i_sb), map->m_pblk,",
      "403:        map->m_len)) {",
      "404:   ext4_error_inode(inode, func, line, map->m_pblk,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "402:  if (ext4_has_feature_journal(inode->i_sb) &&",
      "403:      (inode->i_ino ==",
      "404:       le32_to_cpu(EXT4_SB(inode->i_sb)->s_es->s_journal_inum)))",
      "405:   return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fbbbbd2f28aec991f3fbc248df211550fbdfd58c",
      "candidate_info": {
        "commit_hash": "fbbbbd2f28aec991f3fbc248df211550fbdfd58c",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/fbbbbd2f28aec991f3fbc248df211550fbdfd58c",
        "files": [
          "fs/ext4/block_validity.c"
        ],
        "message": "ext4: unsigned int compared against zero\n\nThere are two cases where u32 variables n and err are being checked\nfor less than zero error values, the checks is always false because\nthe variables are not signed. Fix this by making the variables ints.\n\nAddresses-Coverity: (\"Unsigned compared against 0\")\nFixes: 345c0dbf3a30 (\"ext4: protect journal inode's blocks using block_validity\")\nSigned-off-by: Colin Ian King <colin.king@canonical.com>\nSigned-off-by: Theodore Ts'o <tytso@mit.edu>",
        "before_after_code_files": [
          "fs/ext4/block_validity.c||fs/ext4/block_validity.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/ext4/block_validity.c||fs/ext4/block_validity.c"
          ],
          "candidate": [
            "fs/ext4/block_validity.c||fs/ext4/block_validity.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/ext4/block_validity.c||fs/ext4/block_validity.c": [
          "File: fs/ext4/block_validity.c -> fs/ext4/block_validity.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:  struct inode *inode;",
          "143:  struct ext4_sb_info *sbi = EXT4_SB(sb);",
          "144:  struct ext4_map_blocks map;",
          "147:  if ((ino < EXT4_ROOT_INO) ||",
          "148:      (ino > le32_to_cpu(sbi->s_es->s_inodes_count)))",
          "",
          "[Removed Lines]",
          "145:  u32 i = 0, err = 0, num, n;",
          "",
          "[Added Lines]",
          "145:  u32 i = 0, num;",
          "146:  int err = 0, n;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7727ae52975d4f4ef7ff69ed8e6e25f6a4168158",
      "candidate_info": {
        "commit_hash": "7727ae52975d4f4ef7ff69ed8e6e25f6a4168158",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/7727ae52975d4f4ef7ff69ed8e6e25f6a4168158",
        "files": [
          "fs/ext4/block_validity.c",
          "fs/ext4/ext4.h"
        ],
        "message": "ext4: fix potential use after free after remounting with noblock_validity\n\nRemount process will release system zone which was allocated before if\n\"noblock_validity\" is specified. If we mount an ext4 file system to two\nmountpoints with default mount options, and then remount one of them\nwith \"noblock_validity\", it may trigger a use after free problem when\nsomeone accessing the other one.\n\n # mount /dev/sda foo\n # mount /dev/sda bar\n\nUser access mountpoint \"foo\"   |   Remount mountpoint \"bar\"\n                               |\next4_map_blocks()              |   ext4_remount()\ncheck_block_validity()         |   ext4_setup_system_zone()\next4_data_block_valid()        |   ext4_release_system_zone()\n                               |   free system_blks rb nodes\naccess system_blks rb nodes    |\ntrigger use after free         |\n\nThis problem can also be reproduced by one mountpint, At the same time,\nadd_system_zone() can get called during remount as well so there can be\nracing ext4_data_block_valid() reading the rbtree at the same time.\n\nThis patch add RCU to protect system zone from releasing or building\nwhen doing a remount which inverse current \"noblock_validity\" mount\noption. It assign the rbtree after the whole tree was complete and\ndo actual freeing after rcu grace period, avoid any intermediate state.\n\nReported-by: syzbot+1e470567330b7ad711d5@syzkaller.appspotmail.com\nSigned-off-by: zhangyi (F) <yi.zhang@huawei.com>\nSigned-off-by: Theodore Ts'o <tytso@mit.edu>\nReviewed-by: Jan Kara <jack@suse.cz>",
        "before_after_code_files": [
          "fs/ext4/block_validity.c||fs/ext4/block_validity.c",
          "fs/ext4/ext4.h||fs/ext4/ext4.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/ext4/block_validity.c||fs/ext4/block_validity.c"
          ],
          "candidate": [
            "fs/ext4/block_validity.c||fs/ext4/block_validity.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/ext4/block_validity.c||fs/ext4/block_validity.c": [
          "File: fs/ext4/block_validity.c -> fs/ext4/block_validity.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: void ext4_exit_system_zone(void)",
          "40: {",
          "41:  kmem_cache_destroy(ext4_system_zone_cachep);",
          "42: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:  rcu_barrier();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:  return 0;",
          "50: }",
          "58:       ext4_fsblk_t start_blk,",
          "59:       unsigned int count)",
          "60: {",
          "61:  struct ext4_system_zone *new_entry = NULL, *entry;",
          "63:  struct rb_node *parent = NULL, *new_node = NULL;",
          "65:  while (*n) {",
          "",
          "[Removed Lines]",
          "57: static int add_system_zone(struct ext4_sb_info *sbi,",
          "62:  struct rb_node **n = &sbi->system_blks.rb_node, *node;",
          "",
          "[Added Lines]",
          "53: static void release_system_zone(struct ext4_system_blocks *system_blks)",
          "54: {",
          "55:  struct ext4_system_zone *entry, *n;",
          "57:  rbtree_postorder_for_each_entry_safe(entry, n,",
          "58:     &system_blks->root, node)",
          "59:   kmem_cache_free(ext4_system_zone_cachep, entry);",
          "60: }",
          "67: static int add_system_zone(struct ext4_system_blocks *system_blks,",
          "72:  struct rb_node **n = &system_blks->root.rb_node, *node;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91:   new_node = &new_entry->node;",
          "93:   rb_link_node(new_node, parent, n);",
          "95:  }",
          "",
          "[Removed Lines]",
          "94:   rb_insert_color(new_node, &sbi->system_blks);",
          "",
          "[Added Lines]",
          "104:   rb_insert_color(new_node, &system_blks->root);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "101:   if (can_merge(entry, new_entry)) {",
          "102:    new_entry->start_blk = entry->start_blk;",
          "103:    new_entry->count += entry->count;",
          "105:    kmem_cache_free(ext4_system_zone_cachep, entry);",
          "106:   }",
          "107:  }",
          "",
          "[Removed Lines]",
          "104:    rb_erase(node, &sbi->system_blks);",
          "",
          "[Added Lines]",
          "114:    rb_erase(node, &system_blks->root);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "112:   entry = rb_entry(node, struct ext4_system_zone, node);",
          "113:   if (can_merge(new_entry, entry)) {",
          "114:    new_entry->count += entry->count;",
          "116:    kmem_cache_free(ext4_system_zone_cachep, entry);",
          "117:   }",
          "118:  }",
          "",
          "[Removed Lines]",
          "115:    rb_erase(node, &sbi->system_blks);",
          "",
          "[Added Lines]",
          "125:    rb_erase(node, &system_blks->root);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "126:  int first = 1;",
          "128:  printk(KERN_INFO \"System zones: \");",
          "130:  while (node) {",
          "131:   entry = rb_entry(node, struct ext4_system_zone, node);",
          "132:   printk(KERN_CONT \"%s%llu-%llu\", first ? \"\" : \", \",",
          "",
          "[Removed Lines]",
          "129:  node = rb_first(&sbi->system_blks);",
          "",
          "[Added Lines]",
          "139:  node = rb_first(&sbi->system_blks->root);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "137:  printk(KERN_CONT \"\\n\");",
          "138: }",
          "141: {",
          "142:  struct inode *inode;",
          "143:  struct ext4_sb_info *sbi = EXT4_SB(sb);",
          "",
          "[Removed Lines]",
          "140: static int ext4_protect_reserved_inode(struct super_block *sb, u32 ino)",
          "",
          "[Added Lines]",
          "155: static int ext4_data_block_valid_rcu(struct ext4_sb_info *sbi,",
          "156:          struct ext4_system_blocks *system_blks,",
          "157:          ext4_fsblk_t start_blk,",
          "158:          unsigned int count)",
          "159: {",
          "160:  struct ext4_system_zone *entry;",
          "161:  struct rb_node *n;",
          "163:  if ((start_blk <= le32_to_cpu(sbi->s_es->s_first_data_block)) ||",
          "164:      (start_blk + count < start_blk) ||",
          "165:      (start_blk + count > ext4_blocks_count(sbi->s_es))) {",
          "166:   sbi->s_es->s_last_error_block = cpu_to_le64(start_blk);",
          "167:   return 0;",
          "168:  }",
          "170:  if (system_blks == NULL)",
          "171:   return 1;",
          "173:  n = system_blks->root.rb_node;",
          "174:  while (n) {",
          "175:   entry = rb_entry(n, struct ext4_system_zone, node);",
          "176:   if (start_blk + count - 1 < entry->start_blk)",
          "177:    n = n->rb_left;",
          "178:   else if (start_blk >= (entry->start_blk + entry->count))",
          "179:    n = n->rb_right;",
          "180:   else {",
          "181:    sbi->s_es->s_last_error_block = cpu_to_le64(start_blk);",
          "182:    return 0;",
          "183:   }",
          "184:  }",
          "185:  return 1;",
          "186: }",
          "188: static int ext4_protect_reserved_inode(struct super_block *sb,",
          "189:            struct ext4_system_blocks *system_blks,",
          "190:            u32 ino)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "163:   if (n == 0) {",
          "164:    i++;",
          "165:   } else {",
          "167:     ext4_error(sb, \"blocks %llu-%llu from inode %u \"",
          "168:         \"overlap system zone\", map.m_pblk,",
          "169:         map.m_pblk + map.m_len - 1, ino);",
          "170:     err = -EFSCORRUPTED;",
          "171:     break;",
          "172:    }",
          "174:    if (err < 0)",
          "175:     break;",
          "176:    i += n;",
          "",
          "[Removed Lines]",
          "166:    if (!ext4_data_block_valid(sbi, map.m_pblk, n)) {",
          "173:    err = add_system_zone(sbi, map.m_pblk, n);",
          "",
          "[Added Lines]",
          "216:    if (!ext4_data_block_valid_rcu(sbi, system_blks,",
          "217:       map.m_pblk, n)) {",
          "224:    err = add_system_zone(system_blks, map.m_pblk, n);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "180:  return err;",
          "181: }",
          "183: int ext4_setup_system_zone(struct super_block *sb)",
          "184: {",
          "185:  ext4_group_t ngroups = ext4_get_groups_count(sb);",
          "186:  struct ext4_sb_info *sbi = EXT4_SB(sb);",
          "187:  struct ext4_group_desc *gdp;",
          "188:  ext4_group_t i;",
          "189:  int flex_size = ext4_flex_bg_size(sbi);",
          "190:  int ret;",
          "192:  if (!test_opt(sb, BLOCK_VALIDITY)) {",
          "194:    ext4_release_system_zone(sb);",
          "195:   return 0;",
          "196:  }",
          "198:   return 0;",
          "200:  for (i=0; i < ngroups; i++) {",
          "201:   cond_resched();",
          "202:   if (ext4_bg_has_super(sb, i) &&",
          "203:       ((i < 5) || ((i % flex_size) == 0)))",
          "205:      ext4_bg_num_gdb(sb, i) + 1);",
          "206:   gdp = ext4_get_group_desc(sb, i, NULL);",
          "208:   if (ret)",
          "211:   if (ret)",
          "214:     sbi->s_itb_per_group);",
          "215:   if (ret)",
          "217:  }",
          "218:  if (ext4_has_feature_journal(sb) && sbi->s_es->s_journal_inum) {",
          "220:     le32_to_cpu(sbi->s_es->s_journal_inum));",
          "221:   if (ret)",
          "223:  }",
          "225:  if (test_opt(sb, DEBUG))",
          "226:   debug_print_tree(sbi);",
          "227:  return 0;",
          "228: }",
          "231: void ext4_release_system_zone(struct super_block *sb)",
          "232: {",
          "240: }",
          "247: int ext4_data_block_valid(struct ext4_sb_info *sbi, ext4_fsblk_t start_blk,",
          "248:      unsigned int count)",
          "249: {",
          "271: }",
          "273: int ext4_check_blockref(const char *function, unsigned int line,",
          "",
          "[Removed Lines]",
          "193:   if (sbi->system_blks.rb_node)",
          "197:  if (sbi->system_blks.rb_node)",
          "204:    add_system_zone(sbi, ext4_group_first_block_no(sb, i),",
          "207:   ret = add_system_zone(sbi, ext4_block_bitmap(sb, gdp), 1);",
          "209:    return ret;",
          "210:   ret = add_system_zone(sbi, ext4_inode_bitmap(sb, gdp), 1);",
          "212:    return ret;",
          "213:   ret = add_system_zone(sbi, ext4_inode_table(sb, gdp),",
          "216:    return ret;",
          "219:   ret = ext4_protect_reserved_inode(sb,",
          "222:    return ret;",
          "233:  struct ext4_system_zone *entry, *n;",
          "235:  rbtree_postorder_for_each_entry_safe(entry, n,",
          "236:    &EXT4_SB(sb)->system_blks, node)",
          "237:   kmem_cache_free(ext4_system_zone_cachep, entry);",
          "239:  EXT4_SB(sb)->system_blks = RB_ROOT;",
          "250:  struct ext4_system_zone *entry;",
          "251:  struct rb_node *n = sbi->system_blks.rb_node;",
          "253:  if ((start_blk <= le32_to_cpu(sbi->s_es->s_first_data_block)) ||",
          "254:      (start_blk + count < start_blk) ||",
          "255:      (start_blk + count > ext4_blocks_count(sbi->s_es))) {",
          "256:   sbi->s_es->s_last_error_block = cpu_to_le64(start_blk);",
          "257:   return 0;",
          "258:  }",
          "259:  while (n) {",
          "260:   entry = rb_entry(n, struct ext4_system_zone, node);",
          "261:   if (start_blk + count - 1 < entry->start_blk)",
          "262:    n = n->rb_left;",
          "263:   else if (start_blk >= (entry->start_blk + entry->count))",
          "264:    n = n->rb_right;",
          "265:   else {",
          "266:    sbi->s_es->s_last_error_block = cpu_to_le64(start_blk);",
          "267:    return 0;",
          "268:   }",
          "269:  }",
          "270:  return 1;",
          "",
          "[Added Lines]",
          "234: static void ext4_destroy_system_zone(struct rcu_head *rcu)",
          "235: {",
          "236:  struct ext4_system_blocks *system_blks;",
          "238:  system_blks = container_of(rcu, struct ext4_system_blocks, rcu);",
          "239:  release_system_zone(system_blks);",
          "240:  kfree(system_blks);",
          "241: }",
          "256:  struct ext4_system_blocks *system_blks;",
          "263:   if (sbi->system_blks)",
          "267:  if (sbi->system_blks)",
          "270:  system_blks = kzalloc(sizeof(*system_blks), GFP_KERNEL);",
          "271:  if (!system_blks)",
          "272:   return -ENOMEM;",
          "278:    add_system_zone(system_blks,",
          "279:      ext4_group_first_block_no(sb, i),",
          "282:   ret = add_system_zone(system_blks,",
          "283:     ext4_block_bitmap(sb, gdp), 1);",
          "285:    goto err;",
          "286:   ret = add_system_zone(system_blks,",
          "287:     ext4_inode_bitmap(sb, gdp), 1);",
          "289:    goto err;",
          "290:   ret = add_system_zone(system_blks,",
          "291:     ext4_inode_table(sb, gdp),",
          "294:    goto err;",
          "297:   ret = ext4_protect_reserved_inode(sb, system_blks,",
          "300:    goto err;",
          "308:  rcu_assign_pointer(sbi->system_blks, system_blks);",
          "313: err:",
          "314:  release_system_zone(system_blks);",
          "315:  kfree(system_blks);",
          "316:  return ret;",
          "331:  struct ext4_system_blocks *system_blks;",
          "333:  system_blks = rcu_dereference_protected(EXT4_SB(sb)->system_blks,",
          "334:      lockdep_is_held(&sb->s_umount));",
          "335:  rcu_assign_pointer(EXT4_SB(sb)->system_blks, NULL);",
          "337:  if (system_blks)",
          "338:   call_rcu(&system_blks->rcu, ext4_destroy_system_zone);",
          "344:  struct ext4_system_blocks *system_blks;",
          "345:  int ret;",
          "352:  rcu_read_lock();",
          "353:  system_blks = rcu_dereference(sbi->system_blks);",
          "354:  ret = ext4_data_block_valid_rcu(sbi, system_blks, start_blk,",
          "355:      count);",
          "356:  rcu_read_unlock();",
          "357:  return ret;",
          "",
          "---------------"
        ],
        "fs/ext4/ext4.h||fs/ext4/ext4.h": [
          "File: fs/ext4/ext4.h -> fs/ext4/ext4.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "184:  unsigned int m_flags;",
          "185: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "190: struct ext4_system_blocks {",
          "191:  struct rb_root root;",
          "192:  struct rcu_head rcu;",
          "193: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1432: #endif",
          "1436: #ifdef EXTENTS_STATS",
          "",
          "[Removed Lines]",
          "1434:  struct rb_root system_blks;",
          "",
          "[Added Lines]",
          "1442:  struct ext4_system_blocks __rcu *system_blks;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "54d3adbc29f0c7c53890da1683e629cd220d7201",
      "candidate_info": {
        "commit_hash": "54d3adbc29f0c7c53890da1683e629cd220d7201",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/54d3adbc29f0c7c53890da1683e629cd220d7201",
        "files": [
          "fs/ext4/balloc.c",
          "fs/ext4/block_validity.c",
          "fs/ext4/ext4.h",
          "fs/ext4/ext4_jbd2.c",
          "fs/ext4/extents.c",
          "fs/ext4/ialloc.c",
          "fs/ext4/indirect.c",
          "fs/ext4/inline.c",
          "fs/ext4/inode.c",
          "fs/ext4/mballoc.c",
          "fs/ext4/mmp.c",
          "fs/ext4/move_extent.c",
          "fs/ext4/namei.c",
          "fs/ext4/super.c",
          "fs/ext4/xattr.c"
        ],
        "message": "ext4: save all error info in save_error_info() and drop ext4_set_errno()\n\nUsing a separate function, ext4_set_errno() to set the errno is\nproblematic because it doesn't do the right thing once\ns_last_error_errorcode is non-zero.  It's also less racy to set all of\nthe error information all at once.  (Also, as a bonus, it shrinks code\nsize slightly.)\n\nLink: https://lore.kernel.org/r/20200329020404.686965-1-tytso@mit.edu\nFixes: 878520ac45f9 (\"ext4: save the error code which triggered...\")\nSigned-off-by: Theodore Ts'o <tytso@mit.edu>",
        "before_after_code_files": [
          "fs/ext4/balloc.c||fs/ext4/balloc.c",
          "fs/ext4/block_validity.c||fs/ext4/block_validity.c",
          "fs/ext4/ext4.h||fs/ext4/ext4.h",
          "fs/ext4/ext4_jbd2.c||fs/ext4/ext4_jbd2.c",
          "fs/ext4/extents.c||fs/ext4/extents.c",
          "fs/ext4/ialloc.c||fs/ext4/ialloc.c",
          "fs/ext4/indirect.c||fs/ext4/indirect.c",
          "fs/ext4/inline.c||fs/ext4/inline.c",
          "fs/ext4/inode.c||fs/ext4/inode.c",
          "fs/ext4/mballoc.c||fs/ext4/mballoc.c",
          "fs/ext4/mmp.c||fs/ext4/mmp.c",
          "fs/ext4/move_extent.c||fs/ext4/move_extent.c",
          "fs/ext4/namei.c||fs/ext4/namei.c",
          "fs/ext4/super.c||fs/ext4/super.c",
          "fs/ext4/xattr.c||fs/ext4/xattr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/ext4/block_validity.c||fs/ext4/block_validity.c",
            "fs/ext4/inode.c||fs/ext4/inode.c"
          ],
          "candidate": [
            "fs/ext4/block_validity.c||fs/ext4/block_validity.c",
            "fs/ext4/inode.c||fs/ext4/inode.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/ext4/balloc.c||fs/ext4/balloc.c": [
          "File: fs/ext4/balloc.c -> fs/ext4/balloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "516:  wait_on_buffer(bh);",
          "517:  ext4_simulate_fail_bh(sb, bh, EXT4_SIM_BBITMAP_EIO);",
          "518:  if (!buffer_uptodate(bh)) {",
          "523:   ext4_mark_group_bitmap_corrupted(sb, block_group,",
          "524:      EXT4_GROUP_INFO_BBITMAP_CORRUPT);",
          "525:   return -EIO;",
          "",
          "[Removed Lines]",
          "519:   ext4_set_errno(sb, EIO);",
          "520:   ext4_error(sb, \"Cannot read block bitmap - \"",
          "521:       \"block_group = %u, block_bitmap = %llu\",",
          "522:       block_group, (unsigned long long) bh->b_blocknr);",
          "",
          "[Added Lines]",
          "519:   ext4_error_err(sb, EIO, \"Cannot read block bitmap - \"",
          "520:           \"block_group = %u, block_bitmap = %llu\",",
          "521:           block_group, (unsigned long long) bh->b_blocknr);",
          "",
          "---------------"
        ],
        "fs/ext4/block_validity.c||fs/ext4/block_validity.c": [
          "File: fs/ext4/block_validity.c -> fs/ext4/block_validity.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:  if ((start_blk <= le32_to_cpu(sbi->s_es->s_first_data_block)) ||",
          "168:      (start_blk + count < start_blk) ||",
          "171:   return 0;",
          "174:  if (system_blks == NULL)",
          "175:   return 1;",
          "",
          "[Removed Lines]",
          "169:      (start_blk + count > ext4_blocks_count(sbi->s_es))) {",
          "170:   sbi->s_es->s_last_error_block = cpu_to_le64(start_blk);",
          "172:  }",
          "",
          "[Added Lines]",
          "169:      (start_blk + count > ext4_blocks_count(sbi->s_es)))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "181:    n = n->rb_left;",
          "182:   else if (start_blk >= (entry->start_blk + entry->count))",
          "183:    n = n->rb_right;",
          "186:    return 0;",
          "188:  }",
          "189:  return 1;",
          "190: }",
          "",
          "[Removed Lines]",
          "184:   else {",
          "185:    sbi->s_es->s_last_error_block = cpu_to_le64(start_blk);",
          "187:   }",
          "",
          "[Added Lines]",
          "182:   else",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "220:   } else {",
          "221:    if (!ext4_data_block_valid_rcu(sbi, system_blks,",
          "222:       map.m_pblk, n)) {",
          "226:     err = -EFSCORRUPTED;",
          "227:     break;",
          "228:    }",
          "229:    err = add_system_zone(system_blks, map.m_pblk, n);",
          "",
          "[Removed Lines]",
          "223:     ext4_error(sb, \"blocks %llu-%llu from inode %u \"",
          "224:         \"overlap system zone\", map.m_pblk,",
          "225:         map.m_pblk + map.m_len - 1, ino);",
          "",
          "[Added Lines]",
          "220:     __ext4_error(sb, __func__, __LINE__, -err,",
          "221:           map.m_pblk, \"blocks %llu-%llu \"",
          "222:           \"from inode %u overlap system zone\",",
          "223:           map.m_pblk,",
          "224:           map.m_pblk + map.m_len - 1, ino);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "365: int ext4_check_blockref(const char *function, unsigned int line,",
          "366:    struct inode *inode, __le32 *p, unsigned int max)",
          "367: {",
          "369:  __le32 *bref = p;",
          "370:  unsigned int blk;",
          "",
          "[Removed Lines]",
          "368:  struct ext4_super_block *es = EXT4_SB(inode->i_sb)->s_es;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "379:   if (blk &&",
          "380:       unlikely(!ext4_data_block_valid(EXT4_SB(inode->i_sb),",
          "381:           blk, 1))) {",
          "383:    ext4_error_inode(inode, function, line, blk,",
          "384:       \"invalid block\");",
          "385:    return -EFSCORRUPTED;",
          "",
          "[Removed Lines]",
          "382:    es->s_last_error_block = cpu_to_le64(blk);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "fs/ext4/ext4.h||fs/ext4/ext4.h": [
          "File: fs/ext4/ext4.h -> fs/ext4/ext4.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2770: extern void ext4_mark_group_bitmap_corrupted(struct super_block *sb,",
          "2771:           ext4_group_t block_group,",
          "2772:           unsigned int flags);",
          "2777:     const char *, ...);",
          "2781: extern __printf(5, 6)",
          "2782: void __ext4_error_file(struct file *, const char *, unsigned int, ext4_fsblk_t,",
          "2783:        const char *, ...);",
          "2784: extern void __ext4_std_error(struct super_block *, const char *,",
          "2785:         unsigned int, int);",
          "2788:     const char *, ...);",
          "2789: extern __printf(4, 5)",
          "2790: void __ext4_warning(struct super_block *, const char *, unsigned int,",
          "",
          "[Removed Lines]",
          "2773: extern void ext4_set_errno(struct super_block *sb, int err);",
          "2775: extern __printf(4, 5)",
          "2776: void __ext4_error(struct super_block *, const char *, unsigned int,",
          "2778: extern __printf(5, 6)",
          "2779: void __ext4_error_inode(struct inode *, const char *, unsigned int, ext4_fsblk_t,",
          "2780:         const char *, ...);",
          "2786: extern __printf(4, 5)",
          "2787: void __ext4_abort(struct super_block *, const char *, unsigned int,",
          "",
          "[Added Lines]",
          "2774: extern __printf(6, 7)",
          "2775: void __ext4_error(struct super_block *, const char *, unsigned int, int, __u64,",
          "2777: extern __printf(6, 7)",
          "2778: void __ext4_error_inode(struct inode *, const char *, unsigned int,",
          "2779:    ext4_fsblk_t, int, const char *, ...);",
          "2785: extern __printf(5, 6)",
          "2786: void __ext4_abort(struct super_block *, const char *, unsigned int, int,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2805: #define EXT4_ERROR_INODE(inode, fmt, a...) \\",
          "2806:  ext4_error_inode((inode), __func__, __LINE__, 0, (fmt), ## a)",
          "2811: #define EXT4_ERROR_FILE(file, block, fmt, a...)    \\",
          "2812:  ext4_error_file((file), __func__, __LINE__, (block), (fmt), ## a)",
          "",
          "[Removed Lines]",
          "2808: #define EXT4_ERROR_INODE_BLOCK(inode, block, fmt, a...)   \\",
          "2809:  ext4_error_inode((inode), __func__, __LINE__, (block), (fmt), ## a)",
          "",
          "[Added Lines]",
          "2807: #define EXT4_ERROR_INODE_ERR(inode, err, fmt, a...)   \\",
          "2808:  __ext4_error_inode((inode), __func__, __LINE__, 0, (err), (fmt), ## a)",
          "2810: #define ext4_error_inode_block(inode, block, err, fmt, a...)  \\",
          "2811:  __ext4_error_inode((inode), __func__, __LINE__, (block), (err), \\",
          "2812:       (fmt), ## a)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2814: #ifdef CONFIG_PRINTK",
          "2816: #define ext4_error_inode(inode, func, line, block, fmt, ...)  \\",
          "2818: #define ext4_error_file(file, func, line, block, fmt, ...)  \\",
          "2819:  __ext4_error_file(file, func, line, block, fmt, ##__VA_ARGS__)",
          "2820: #define ext4_error(sb, fmt, ...)     \\",
          "2824: #define ext4_warning(sb, fmt, ...)     \\",
          "2825:  __ext4_warning(sb, __func__, __LINE__, fmt, ##__VA_ARGS__)",
          "2826: #define ext4_warning_inode(inode, fmt, ...)    \\",
          "",
          "[Removed Lines]",
          "2817:  __ext4_error_inode(inode, func, line, block, fmt, ##__VA_ARGS__)",
          "2821:  __ext4_error(sb, __func__, __LINE__, fmt, ##__VA_ARGS__)",
          "2822: #define ext4_abort(sb, fmt, ...)     \\",
          "2823:  __ext4_abort(sb, __func__, __LINE__, fmt, ##__VA_ARGS__)",
          "",
          "[Added Lines]",
          "2820:  __ext4_error_inode(inode, func, line, block, 0, fmt, ##__VA_ARGS__)",
          "2821: #define ext4_error_inode_err(inode, func, line, block, err, fmt, ...) \\",
          "2822:  __ext4_error_inode((inode), (func), (line), (block),   \\",
          "2823:       (err), (fmt), ##__VA_ARGS__)",
          "2827:  __ext4_error((sb), __func__, __LINE__, 0, 0, (fmt), ##__VA_ARGS__)",
          "2828: #define ext4_error_err(sb, err, fmt, ...)    \\",
          "2829:  __ext4_error((sb), __func__, __LINE__, (err), 0, (fmt), ##__VA_ARGS__)",
          "2830: #define ext4_abort(sb, err, fmt, ...)     \\",
          "2831:  __ext4_abort((sb), __func__, __LINE__, (err), (fmt), ##__VA_ARGS__)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2838: #define ext4_error_inode(inode, func, line, block, fmt, ...)  \\",
          "2839: do {         \\",
          "2840:  no_printk(fmt, ##__VA_ARGS__);     \\",
          "2842: } while (0)",
          "2843: #define ext4_error_file(file, func, line, block, fmt, ...)  \\",
          "2844: do {         \\",
          "",
          "[Removed Lines]",
          "2841:  __ext4_error_inode(inode, \"\", 0, block, \" \");   \\",
          "",
          "[Added Lines]",
          "2849:  __ext4_error_inode(inode, \"\", 0, block, 0, \" \");  \\",
          "2850: } while (0)",
          "2851: #define ext4_error_inode_err(inode, func, line, block, err, fmt, ...) \\",
          "2852: do {         \\",
          "2853:  no_printk(fmt, ##__VA_ARGS__);     \\",
          "2854:  __ext4_error_inode(inode, \"\", 0, block, err, \" \");  \\",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2848: #define ext4_error(sb, fmt, ...)     \\",
          "2849: do {         \\",
          "2850:  no_printk(fmt, ##__VA_ARGS__);     \\",
          "2852: } while (0)",
          "2854: do {         \\",
          "2855:  no_printk(fmt, ##__VA_ARGS__);     \\",
          "2857: } while (0)",
          "2858: #define ext4_warning(sb, fmt, ...)     \\",
          "2859: do {         \\",
          "",
          "[Removed Lines]",
          "2851:  __ext4_error(sb, \"\", 0, \" \");     \\",
          "2853: #define ext4_abort(sb, fmt, ...)     \\",
          "2856:  __ext4_abort(sb, \"\", 0, \" \");     \\",
          "",
          "[Added Lines]",
          "2864:  __ext4_error(sb, \"\", 0, 0, 0, \" \");    \\",
          "2865: } while (0)",
          "2866: #define ext4_error_err(sb, err, fmt, ...)    \\",
          "2867: do {         \\",
          "2868:  no_printk(fmt, ##__VA_ARGS__);     \\",
          "2869:  __ext4_error(sb, \"\", 0, err, 0, \" \");    \\",
          "2871: #define ext4_abort(sb, err, fmt, ...)     \\",
          "2874:  __ext4_abort(sb, \"\", 0, err, \" \");    \\",
          "",
          "---------------"
        ],
        "fs/ext4/ext4_jbd2.c||fs/ext4/ext4_jbd2.c": [
          "File: fs/ext4/ext4_jbd2.c -> fs/ext4/ext4_jbd2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:  if (journal && is_journal_aborted(journal)) {",
          "85:   return -EROFS;",
          "86:  }",
          "87:  return 0;",
          "",
          "[Removed Lines]",
          "83:   ext4_set_errno(sb, -journal->j_errno);",
          "84:   ext4_abort(sb, \"Detected aborted journal\");",
          "",
          "[Added Lines]",
          "83:   ext4_abort(sb, -journal->j_errno, \"Detected aborted journal\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "272:  if (err) {",
          "273:   ext4_journal_abort_handle(where, line, __func__,",
          "274:        bh, handle, err);",
          "277:       \"error %d when attempting revoke\", err);",
          "278:  }",
          "279:  BUFFER_TRACE(bh, \"exit\");",
          "",
          "[Removed Lines]",
          "275:   ext4_set_errno(inode->i_sb, -err);",
          "276:   __ext4_abort(inode->i_sb, where, line,",
          "",
          "[Added Lines]",
          "274:   __ext4_abort(inode->i_sb, where, line, -err,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "343:     struct ext4_super_block *es;",
          "345:     es = EXT4_SB(inode->i_sb)->s_es;",
          "351:      \"IO error syncing itable block\");",
          "352:     err = -EIO;",
          "353:    }",
          "",
          "[Removed Lines]",
          "346:     es->s_last_error_block =",
          "347:      cpu_to_le64(bh->b_blocknr);",
          "348:     ext4_set_errno(inode->i_sb, EIO);",
          "349:     ext4_error_inode(inode, where, line,",
          "350:        bh->b_blocknr,",
          "",
          "[Added Lines]",
          "344:     ext4_error_inode_err(inode, where, line,",
          "345:            bh->b_blocknr, EIO,",
          "",
          "---------------"
        ],
        "fs/ext4/extents.c||fs/ext4/extents.c": [
          "File: fs/ext4/extents.c -> fs/ext4/extents.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "349: }",
          "351: static int ext4_valid_extent_entries(struct inode *inode,",
          "354: {",
          "355:  unsigned short entries;",
          "356:  if (eh->eh_entries == 0)",
          "",
          "[Removed Lines]",
          "352:     struct ext4_extent_header *eh,",
          "353:     int depth)",
          "",
          "[Added Lines]",
          "352:          struct ext4_extent_header *eh,",
          "353:          ext4_fsblk_t *pblk, int depth)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "361:  if (depth == 0) {",
          "363:   struct ext4_extent *ext = EXT_FIRST_EXTENT(eh);",
          "366:   ext4_lblk_t lblock = 0;",
          "367:   ext4_lblk_t prev = 0;",
          "368:   int len = 0;",
          "",
          "[Removed Lines]",
          "364:   struct ext4_super_block *es = EXT4_SB(inode->i_sb)->s_es;",
          "365:   ext4_fsblk_t pblock = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "374:    lblock = le32_to_cpu(ext->ee_block);",
          "375:    len = ext4_ext_get_actual_len(ext);",
          "376:    if ((lblock <= prev) && prev) {",
          "379:     return 0;",
          "380:    }",
          "381:    ext++;",
          "",
          "[Removed Lines]",
          "377:     pblock = ext4_ext_pblock(ext);",
          "378:     es->s_last_error_block = cpu_to_le64(pblock);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "422:   error_msg = \"invalid eh_entries\";",
          "423:   goto corrupted;",
          "424:  }",
          "426:   error_msg = \"invalid extent entries\";",
          "427:   goto corrupted;",
          "428:  }",
          "",
          "[Removed Lines]",
          "425:  if (!ext4_valid_extent_entries(inode, eh, depth)) {",
          "",
          "[Added Lines]",
          "422:  if (!ext4_valid_extent_entries(inode, eh, &pblk, depth)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "440:  return 0;",
          "442: corrupted:",
          "451:  return err;",
          "452: }",
          "",
          "[Removed Lines]",
          "443:  ext4_set_errno(inode->i_sb, -err);",
          "444:  ext4_error_inode(inode, function, line, 0,",
          "445:     \"pblk %llu bad header/extent: %s - magic %x, \"",
          "446:     \"entries %u, max %u(%u), depth %u(%u)\",",
          "447:     (unsigned long long) pblk, error_msg,",
          "448:     le16_to_cpu(eh->eh_magic),",
          "449:     le16_to_cpu(eh->eh_entries), le16_to_cpu(eh->eh_max),",
          "450:     max, le16_to_cpu(eh->eh_depth), depth);",
          "",
          "[Added Lines]",
          "440:  ext4_error_inode_err(inode, function, line, 0, -err,",
          "441:         \"pblk %llu bad header/extent: %s - magic %x, \"",
          "442:         \"entries %u, max %u(%u), depth %u(%u)\",",
          "443:         (unsigned long long) pblk, error_msg,",
          "444:         le16_to_cpu(eh->eh_magic),",
          "445:         le16_to_cpu(eh->eh_entries),",
          "446:         le16_to_cpu(eh->eh_max),",
          "447:         max, le16_to_cpu(eh->eh_depth), depth);",
          "",
          "---------------"
        ],
        "fs/ext4/ialloc.c||fs/ext4/ialloc.c": [
          "File: fs/ext4/ialloc.c -> fs/ext4/ialloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "196:  ext4_simulate_fail_bh(sb, bh, EXT4_SIM_IBITMAP_EIO);",
          "197:  if (!buffer_uptodate(bh)) {",
          "198:   put_bh(bh);",
          "203:   ext4_mark_group_bitmap_corrupted(sb, block_group,",
          "204:     EXT4_GROUP_INFO_IBITMAP_CORRUPT);",
          "205:   return ERR_PTR(-EIO);",
          "",
          "[Removed Lines]",
          "199:   ext4_set_errno(sb, EIO);",
          "200:   ext4_error(sb, \"Cannot read inode bitmap - \"",
          "201:       \"block_group = %u, inode_bitmap = %llu\",",
          "202:       block_group, bitmap_blk);",
          "",
          "[Added Lines]",
          "199:   ext4_error_err(sb, EIO, \"Cannot read inode bitmap - \"",
          "200:           \"block_group = %u, inode_bitmap = %llu\",",
          "201:           block_group, bitmap_blk);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1244:  inode = ext4_iget(sb, ino, EXT4_IGET_NORMAL);",
          "1245:  if (IS_ERR(inode)) {",
          "1246:   err = PTR_ERR(inode);",
          "1250:   return inode;",
          "1251:  }",
          "",
          "[Removed Lines]",
          "1247:   ext4_set_errno(sb, -err);",
          "1248:   ext4_error(sb, \"couldn't read orphan inode %lu (err %d)\",",
          "1249:       ino, err);",
          "",
          "[Added Lines]",
          "1246:   ext4_error_err(sb, -err,",
          "1247:           \"couldn't read orphan inode %lu (err %d)\",",
          "1248:           ino, err);",
          "",
          "---------------"
        ],
        "fs/ext4/indirect.c||fs/ext4/indirect.c": [
          "File: fs/ext4/indirect.c -> fs/ext4/indirect.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1021:    if (!bh) {",
          "1023:              \"Read failure\");",
          "1024:     continue;",
          "1025:    }",
          "",
          "[Removed Lines]",
          "1022:     EXT4_ERROR_INODE_BLOCK(inode, nr,",
          "",
          "[Added Lines]",
          "1022:     ext4_error_inode_block(inode, nr, EIO,",
          "",
          "---------------"
        ],
        "fs/ext4/inline.c||fs/ext4/inline.c": [
          "File: fs/ext4/inline.c -> fs/ext4/inline.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:  error = ext4_get_inode_loc(inode, &iloc);",
          "100:  if (error) {",
          "105:   return 0;",
          "106:  }",
          "",
          "[Removed Lines]",
          "101:   ext4_set_errno(inode->i_sb, -error);",
          "102:   ext4_error_inode(inode, __func__, __LINE__, 0,",
          "103:      \"can't get inode location %lu\",",
          "104:      inode->i_ino);",
          "",
          "[Added Lines]",
          "101:   ext4_error_inode_err(inode, __func__, __LINE__, 0, -error,",
          "102:          \"can't get inode location %lu\",",
          "103:          inode->i_ino);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1763:  err = ext4_get_inode_loc(dir, &iloc);",
          "1764:  if (err) {",
          "1768:   return true;",
          "1769:  }",
          "",
          "[Removed Lines]",
          "1765:   ext4_set_errno(dir->i_sb, -err);",
          "1766:   EXT4_ERROR_INODE(dir, \"error %d getting inode %lu block\",",
          "1767:      err, dir->i_ino);",
          "",
          "[Added Lines]",
          "1764:   EXT4_ERROR_INODE_ERR(dir, -err,",
          "1765:          \"error %d getting inode %lu block\",",
          "1766:          err, dir->i_ino);",
          "",
          "---------------"
        ],
        "fs/ext4/inode.c||fs/ext4/inode.c": [
          "File: fs/ext4/inode.c -> fs/ext4/inode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "269:  if (inode->i_blocks) {",
          "270:   err = ext4_truncate(inode);",
          "271:   if (err) {",
          "276:    goto stop_handle;",
          "277:   }",
          "278:  }",
          "",
          "[Removed Lines]",
          "272:    ext4_set_errno(inode->i_sb, -err);",
          "273:    ext4_error(inode->i_sb,",
          "274:        \"couldn't truncate inode %lu (err %d)\",",
          "275:        inode->i_ino, err);",
          "",
          "[Added Lines]",
          "272:    ext4_error_err(inode->i_sb, -err,",
          "273:            \"couldn't truncate inode %lu (err %d)\",",
          "274:            inode->i_ino, err);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2478:   up_write(&EXT4_I(inode)->i_data_sem);",
          "2479:   err2 = ext4_mark_inode_dirty(handle, inode);",
          "2480:   if (err2) {",
          "2485:   }",
          "2486:   if (!err)",
          "2487:    err = err2;",
          "",
          "[Removed Lines]",
          "2481:    ext4_set_errno(inode->i_sb, -err2);",
          "2482:    ext4_error(inode->i_sb,",
          "2483:        \"Failed to mark inode %lu dirty\",",
          "2484:        inode->i_ino);",
          "",
          "[Added Lines]",
          "2480:    ext4_error_err(inode->i_sb, -err2,",
          "2481:            \"Failed to mark inode %lu dirty\",",
          "2482:            inode->i_ino);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4382:   wait_on_buffer(bh);",
          "4383:   if (!buffer_uptodate(bh)) {",
          "4384:   simulate_eio:",
          "4387:             \"unable to read itable block\");",
          "4388:    brelse(bh);",
          "4389:    return -EIO;",
          "",
          "[Removed Lines]",
          "4385:    ext4_set_errno(inode->i_sb, EIO);",
          "4386:    EXT4_ERROR_INODE_BLOCK(inode, block,",
          "",
          "[Added Lines]",
          "4383:    ext4_error_inode_block(inode, block, EIO,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4535:      (ino > le32_to_cpu(EXT4_SB(sb)->s_es->s_inodes_count))) {",
          "4536:   if (flags & EXT4_IGET_HANDLE)",
          "4537:    return ERR_PTR(-ESTALE);",
          "4539:         \"inode #%lu: comm %s: iget: illegal inode #\",",
          "4540:         ino, current->comm);",
          "4541:   return ERR_PTR(-EFSCORRUPTED);",
          "",
          "[Removed Lines]",
          "4538:   __ext4_error(sb, function, line,",
          "",
          "[Added Lines]",
          "4535:   __ext4_error(sb, function, line, EFSCORRUPTED, 0,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4599:  if (!ext4_inode_csum_verify(inode, raw_inode, ei) ||",
          "4600:      ext4_simulate_fail(sb, EXT4_SIM_INODE_CRC)) {",
          "4604:   ret = -EFSBADCRC;",
          "4605:   goto bad_inode;",
          "4606:  }",
          "",
          "[Removed Lines]",
          "4601:   ext4_set_errno(inode->i_sb, EFSBADCRC);",
          "4602:   ext4_error_inode(inode, function, line, 0,",
          "4603:      \"iget: checksum invalid\");",
          "",
          "[Added Lines]",
          "4598:   ext4_error_inode_err(inode, function, line, 0, EFSBADCRC,",
          "4599:          \"iget: checksum invalid\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5149:   if (wbc->sync_mode == WB_SYNC_ALL && !wbc->for_sync)",
          "5150:    sync_dirty_buffer(iloc.bh);",
          "5151:   if (buffer_req(iloc.bh) && !buffer_uptodate(iloc.bh)) {",
          "5155:    err = -EIO;",
          "5156:   }",
          "5157:   brelse(iloc.bh);",
          "",
          "[Removed Lines]",
          "5152:    ext4_set_errno(inode->i_sb, EIO);",
          "5153:    EXT4_ERROR_INODE_BLOCK(inode, iloc.bh->b_blocknr,",
          "5154:       \"IO error syncing inode\");",
          "",
          "[Added Lines]",
          "5148:    ext4_error_inode_block(inode, iloc.bh->b_blocknr, EIO,",
          "5149:             \"IO error syncing inode\");",
          "",
          "---------------"
        ],
        "fs/ext4/mballoc.c||fs/ext4/mballoc.c": [
          "File: fs/ext4/mballoc.c -> fs/ext4/mballoc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3921:  bitmap_bh = ext4_read_block_bitmap(sb, group);",
          "3922:  if (IS_ERR(bitmap_bh)) {",
          "3923:   err = PTR_ERR(bitmap_bh);",
          "3927:   return 0;",
          "3928:  }",
          "",
          "[Removed Lines]",
          "3924:   ext4_set_errno(sb, -err);",
          "3925:   ext4_error(sb, \"Error %d reading block bitmap for %u\",",
          "3926:       err, group);",
          "",
          "[Added Lines]",
          "3924:   ext4_error_err(sb, -err,",
          "3925:           \"Error %d reading block bitmap for %u\",",
          "3926:           err, group);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4090:   err = ext4_mb_load_buddy_gfp(sb, group, &e4b,",
          "4091:           GFP_NOFS|__GFP_NOFAIL);",
          "4092:   if (err) {",
          "4096:    continue;",
          "4097:   }",
          "4099:   bitmap_bh = ext4_read_block_bitmap(sb, group);",
          "4100:   if (IS_ERR(bitmap_bh)) {",
          "4101:    err = PTR_ERR(bitmap_bh);",
          "4105:    ext4_mb_unload_buddy(&e4b);",
          "4106:    continue;",
          "4107:   }",
          "",
          "[Removed Lines]",
          "4093:    ext4_set_errno(sb, -err);",
          "4094:    ext4_error(sb, \"Error %d loading buddy information for %u\",",
          "4095:        err, group);",
          "4102:    ext4_set_errno(sb, -err);",
          "4103:    ext4_error(sb, \"Error %d reading block bitmap for %u\",",
          "4104:      err, group);",
          "",
          "[Added Lines]",
          "4093:    ext4_error_err(sb, -err, \"Error %d loading buddy information for %u\",",
          "4094:            err, group);",
          "4101:    ext4_error_err(sb, -err, \"Error %d reading block bitmap for %u\",",
          "4102:            err, group);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4355:   err = ext4_mb_load_buddy_gfp(sb, group, &e4b,",
          "4356:           GFP_NOFS|__GFP_NOFAIL);",
          "4357:   if (err) {",
          "4361:    continue;",
          "4362:   }",
          "4363:   ext4_lock_group(sb, group);",
          "",
          "[Removed Lines]",
          "4358:    ext4_set_errno(sb, -err);",
          "4359:    ext4_error(sb, \"Error %d loading buddy information for %u\",",
          "4360:        err, group);",
          "",
          "[Added Lines]",
          "4356:    ext4_error_err(sb, -err, \"Error %d loading buddy information for %u\",",
          "4357:            err, group);",
          "",
          "---------------"
        ],
        "fs/ext4/mmp.c||fs/ext4/mmp.c": [
          "File: fs/ext4/mmp.c -> fs/ext4/mmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:   if (retval) {",
          "177:    if ((failed_writes % 60) == 0) {",
          "180:    }",
          "181:    failed_writes++;",
          "182:   }",
          "",
          "[Removed Lines]",
          "178:     ext4_set_errno(sb, -retval);",
          "179:     ext4_error(sb, \"Error writing to MMP block\");",
          "",
          "[Added Lines]",
          "178:     ext4_error_err(sb, -retval,",
          "179:             \"Error writing to MMP block\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "209:    retval = read_mmp_block(sb, &bh_check, mmp_block);",
          "210:    if (retval) {",
          "214:     goto exit_thread;",
          "215:    }",
          "",
          "[Removed Lines]",
          "211:     ext4_set_errno(sb, -retval);",
          "212:     ext4_error(sb, \"error reading MMP data: %d\",",
          "213:         retval);",
          "",
          "[Added Lines]",
          "211:     ext4_error_err(sb, -retval,",
          "212:             \"error reading MMP data: %d\",",
          "213:             retval);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "222:           \"Error while updating MMP info. \"",
          "223:           \"The filesystem seems to have been\"",
          "224:           \" multiply mounted.\");",
          "227:     put_bh(bh_check);",
          "228:     retval = -EBUSY;",
          "229:     goto exit_thread;",
          "",
          "[Removed Lines]",
          "225:     ext4_set_errno(sb, EBUSY);",
          "226:     ext4_error(sb, \"abort\");",
          "",
          "[Added Lines]",
          "225:     ext4_error_err(sb, EBUSY, \"abort\");",
          "",
          "---------------"
        ],
        "fs/ext4/move_extent.c||fs/ext4/move_extent.c": [
          "File: fs/ext4/move_extent.c -> fs/ext4/move_extent.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "422:         block_len_in_page, 0, &err2);",
          "423:  ext4_double_up_write_data_sem(orig_inode, donor_inode);",
          "424:  if (replaced_count != block_len_in_page) {",
          "427:            \" data will be lost.\");",
          "429:  }",
          "",
          "[Removed Lines]",
          "425:   EXT4_ERROR_INODE_BLOCK(orig_inode, (sector_t)(orig_blk_offset),",
          "426:            \"Unable to copy data block,\"",
          "",
          "[Added Lines]",
          "425:   ext4_error_inode_block(orig_inode, (sector_t)(orig_blk_offset),",
          "426:            EIO, \"Unable to copy data block,\"",
          "",
          "---------------"
        ],
        "fs/ext4/namei.c||fs/ext4/namei.c": [
          "File: fs/ext4/namei.c -> fs/ext4/namei.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "160:       !ext4_simulate_fail(inode->i_sb, EXT4_SIM_DIRBLOCK_CRC))",
          "161:    set_buffer_verified(bh);",
          "162:   else {",
          "166:    brelse(bh);",
          "167:    return ERR_PTR(-EFSBADCRC);",
          "168:   }",
          "",
          "[Removed Lines]",
          "163:    ext4_set_errno(inode->i_sb, EFSBADCRC);",
          "164:    ext4_error_inode(inode, func, line, block,",
          "165:       \"Directory index failed checksum\");",
          "",
          "[Added Lines]",
          "163:    ext4_error_inode_err(inode, func, line, block,",
          "164:           EFSBADCRC,",
          "165:           \"Directory index failed checksum\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "172:       !ext4_simulate_fail(inode->i_sb, EXT4_SIM_DIRBLOCK_CRC))",
          "173:    set_buffer_verified(bh);",
          "174:   else {",
          "178:    brelse(bh);",
          "179:    return ERR_PTR(-EFSBADCRC);",
          "180:   }",
          "",
          "[Removed Lines]",
          "175:    ext4_set_errno(inode->i_sb, EFSBADCRC);",
          "176:    ext4_error_inode(inode, func, line, block,",
          "177:       \"Directory block failed checksum\");",
          "",
          "[Added Lines]",
          "175:    ext4_error_inode_err(inode, func, line, block,",
          "176:           EFSBADCRC,",
          "177:           \"Directory block failed checksum\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1532:    goto next;",
          "1533:   wait_on_buffer(bh);",
          "1534:   if (!buffer_uptodate(bh)) {",
          "1538:    brelse(bh);",
          "1539:    ret = ERR_PTR(-EIO);",
          "1540:    goto cleanup_and_exit;",
          "",
          "[Removed Lines]",
          "1535:    ext4_set_errno(sb, EIO);",
          "1536:    EXT4_ERROR_INODE(dir, \"reading directory lblock %lu\",",
          "1537:       (unsigned long) block);",
          "",
          "[Added Lines]",
          "1535:    EXT4_ERROR_INODE_ERR(dir, EIO,",
          "1536:           \"reading directory lblock %lu\",",
          "1537:           (unsigned long) block);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1543:       !is_dx_internal_node(dir, block,",
          "1544:       (struct ext4_dir_entry *)bh->b_data) &&",
          "1545:       !ext4_dirblock_csum_verify(dir, bh)) {",
          "1549:    brelse(bh);",
          "1550:    ret = ERR_PTR(-EFSBADCRC);",
          "1551:    goto cleanup_and_exit;",
          "",
          "[Removed Lines]",
          "1546:    ext4_set_errno(sb, EFSBADCRC);",
          "1547:    EXT4_ERROR_INODE(dir, \"checksumming directory \"",
          "1548:       \"block %lu\", (unsigned long)block);",
          "",
          "[Added Lines]",
          "1546:    EXT4_ERROR_INODE_ERR(dir, EFSBADCRC,",
          "1547:           \"checksumming directory \"",
          "1548:           \"block %lu\", (unsigned long)block);",
          "",
          "---------------"
        ],
        "fs/ext4/super.c||fs/ext4/super.c": [
          "File: fs/ext4/super.c -> fs/ext4/super.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "335: #define ext4_get_tstamp(es, tstamp) \\",
          "336:  __ext4_get_tstamp(&(es)->tstamp, &(es)->tstamp ## _hi)",
          "340: {",
          "341:  struct ext4_super_block *es = EXT4_SB(sb)->s_es;",
          "343:  EXT4_SB(sb)->s_mount_state |= EXT4_ERROR_FS;",
          "344:  if (bdev_read_only(sb->s_bdev))",
          "",
          "[Removed Lines]",
          "338: static void __save_error_info(struct super_block *sb, const char *func,",
          "339:        unsigned int line)",
          "",
          "[Added Lines]",
          "338: static void __save_error_info(struct super_block *sb, int error,",
          "339:          __u32 ino, __u64 block,",
          "340:          const char *func, unsigned int line)",
          "343:  int err;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "347:  ext4_update_tstamp(es, s_last_error_time);",
          "348:  strncpy(es->s_last_error_func, func, sizeof(es->s_last_error_func));",
          "349:  es->s_last_error_line = cpu_to_le32(line);",
          "352:  if (!es->s_first_error_time) {",
          "353:   es->s_first_error_time = es->s_last_error_time;",
          "354:   es->s_first_error_time_hi = es->s_last_error_time_hi;",
          "",
          "[Removed Lines]",
          "350:  if (es->s_last_error_errcode == 0)",
          "351:   es->s_last_error_errcode = EXT4_ERR_EFSCORRUPTED;",
          "",
          "[Added Lines]",
          "352:  es->s_last_error_ino = cpu_to_le32(ino);",
          "353:  es->s_last_error_block = cpu_to_le64(block);",
          "354:  switch (error) {",
          "355:  case EIO:",
          "356:   err = EXT4_ERR_EIO;",
          "357:   break;",
          "358:  case ENOMEM:",
          "359:   err = EXT4_ERR_ENOMEM;",
          "360:   break;",
          "361:  case EFSBADCRC:",
          "362:   err = EXT4_ERR_EFSBADCRC;",
          "363:   break;",
          "364:  case 0:",
          "365:  case EFSCORRUPTED:",
          "366:   err = EXT4_ERR_EFSCORRUPTED;",
          "367:   break;",
          "368:  case ENOSPC:",
          "369:   err = EXT4_ERR_ENOSPC;",
          "370:   break;",
          "371:  case ENOKEY:",
          "372:   err = EXT4_ERR_ENOKEY;",
          "373:   break;",
          "374:  case EROFS:",
          "375:   err = EXT4_ERR_EROFS;",
          "376:   break;",
          "377:  case EFBIG:",
          "378:   err = EXT4_ERR_EFBIG;",
          "379:   break;",
          "380:  case EEXIST:",
          "381:   err = EXT4_ERR_EEXIST;",
          "382:   break;",
          "383:  case ERANGE:",
          "384:   err = EXT4_ERR_ERANGE;",
          "385:   break;",
          "386:  case EOVERFLOW:",
          "387:   err = EXT4_ERR_EOVERFLOW;",
          "388:   break;",
          "389:  case EBUSY:",
          "390:   err = EXT4_ERR_EBUSY;",
          "391:   break;",
          "392:  case ENOTDIR:",
          "393:   err = EXT4_ERR_ENOTDIR;",
          "394:   break;",
          "395:  case ENOTEMPTY:",
          "396:   err = EXT4_ERR_ENOTEMPTY;",
          "397:   break;",
          "398:  case ESHUTDOWN:",
          "399:   err = EXT4_ERR_ESHUTDOWN;",
          "400:   break;",
          "401:  case EFAULT:",
          "402:   err = EXT4_ERR_EFAULT;",
          "403:   break;",
          "404:  default:",
          "405:   err = EXT4_ERR_UNKNOWN;",
          "406:  }",
          "407:  es->s_last_error_errcode = err;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "368:  le32_add_cpu(&es->s_error_count, 1);",
          "369: }",
          "373: {",
          "375:  if (!bdev_read_only(sb->s_bdev))",
          "376:   ext4_commit_super(sb, 1);",
          "377: }",
          "",
          "[Removed Lines]",
          "371: static void save_error_info(struct super_block *sb, const char *func,",
          "372:        unsigned int line)",
          "374:  __save_error_info(sb, func, line);",
          "",
          "[Added Lines]",
          "427: static void save_error_info(struct super_block *sb, int error,",
          "428:        __u32 ino, __u64 block,",
          "429:        const char *func, unsigned int line)",
          "431:  __save_error_info(sb, error, ino, block, func, line);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "478:         \"EXT4-fs error\")",
          "480: void __ext4_error(struct super_block *sb, const char *function,",
          "482: {",
          "483:  struct va_format vaf;",
          "484:  va_list args;",
          "",
          "[Removed Lines]",
          "481:     unsigned int line, const char *fmt, ...)",
          "",
          "[Added Lines]",
          "538:     unsigned int line, int error, __u64 block,",
          "539:     const char *fmt, ...)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "496:          sb->s_id, function, line, current->comm, &vaf);",
          "497:   va_end(args);",
          "498:  }",
          "500:  ext4_handle_error(sb);",
          "501: }",
          "503: void __ext4_error_inode(struct inode *inode, const char *function,",
          "505:    const char *fmt, ...)",
          "506: {",
          "507:  va_list args;",
          "508:  struct va_format vaf;",
          "511:  if (unlikely(ext4_forced_shutdown(EXT4_SB(inode->i_sb))))",
          "512:   return;",
          "514:  trace_ext4_error(inode->i_sb, function, line);",
          "517:  if (ext4_error_ratelimit(inode->i_sb)) {",
          "518:   va_start(args, fmt);",
          "519:   vaf.fmt = fmt;",
          "",
          "[Removed Lines]",
          "499:  save_error_info(sb, function, line);",
          "504:    unsigned int line, ext4_fsblk_t block,",
          "509:  struct ext4_super_block *es = EXT4_SB(inode->i_sb)->s_es;",
          "515:  es->s_last_error_ino = cpu_to_le32(inode->i_ino);",
          "516:  es->s_last_error_block = cpu_to_le64(block);",
          "",
          "[Added Lines]",
          "557:  save_error_info(sb, error, 0, block, function, line);",
          "562:    unsigned int line, ext4_fsblk_t block, int error,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "530:           current->comm, &vaf);",
          "531:   va_end(args);",
          "532:  }",
          "534:  ext4_handle_error(inode->i_sb);",
          "535: }",
          "",
          "[Removed Lines]",
          "533:  save_error_info(inode->i_sb, function, line);",
          "",
          "[Added Lines]",
          "588:  save_error_info(inode->i_sb, error, inode->i_ino, block,",
          "589:    function, line);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "550:  trace_ext4_error(inode->i_sb, function, line);",
          "551:  es = EXT4_SB(inode->i_sb)->s_es;",
          "553:  if (ext4_error_ratelimit(inode->i_sb)) {",
          "554:   path = file_path(file, pathname, sizeof(pathname));",
          "555:   if (IS_ERR(path))",
          "",
          "[Removed Lines]",
          "552:  es->s_last_error_ino = cpu_to_le32(inode->i_ino);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "571:           current->comm, path, &vaf);",
          "572:   va_end(args);",
          "573:  }",
          "575:  ext4_handle_error(inode->i_sb);",
          "576: }",
          "",
          "[Removed Lines]",
          "574:  save_error_info(inode->i_sb, function, line);",
          "",
          "[Added Lines]",
          "629:  save_error_info(inode->i_sb, EFSCORRUPTED, inode->i_ino, block,",
          "630:    function, line);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "615:  return errstr;",
          "616: }",
          "",
          "[Removed Lines]",
          "618: void ext4_set_errno(struct super_block *sb, int err)",
          "619: {",
          "620:  if (err < 0)",
          "621:   err = -err;",
          "623:  switch (err) {",
          "624:  case EIO:",
          "625:   err = EXT4_ERR_EIO;",
          "626:   break;",
          "627:  case ENOMEM:",
          "628:   err = EXT4_ERR_ENOMEM;",
          "629:   break;",
          "630:  case EFSBADCRC:",
          "631:   err = EXT4_ERR_EFSBADCRC;",
          "632:   break;",
          "633:  case EFSCORRUPTED:",
          "634:   err = EXT4_ERR_EFSCORRUPTED;",
          "635:   break;",
          "636:  case ENOSPC:",
          "637:   err = EXT4_ERR_ENOSPC;",
          "638:   break;",
          "639:  case ENOKEY:",
          "640:   err = EXT4_ERR_ENOKEY;",
          "641:   break;",
          "642:  case EROFS:",
          "643:   err = EXT4_ERR_EROFS;",
          "644:   break;",
          "645:  case EFBIG:",
          "646:   err = EXT4_ERR_EFBIG;",
          "647:   break;",
          "648:  case EEXIST:",
          "649:   err = EXT4_ERR_EEXIST;",
          "650:   break;",
          "651:  case ERANGE:",
          "652:   err = EXT4_ERR_ERANGE;",
          "653:   break;",
          "654:  case EOVERFLOW:",
          "655:   err = EXT4_ERR_EOVERFLOW;",
          "656:   break;",
          "657:  case EBUSY:",
          "658:   err = EXT4_ERR_EBUSY;",
          "659:   break;",
          "660:  case ENOTDIR:",
          "661:   err = EXT4_ERR_ENOTDIR;",
          "662:   break;",
          "663:  case ENOTEMPTY:",
          "664:   err = EXT4_ERR_ENOTEMPTY;",
          "665:   break;",
          "666:  case ESHUTDOWN:",
          "667:   err = EXT4_ERR_ESHUTDOWN;",
          "668:   break;",
          "669:  case EFAULT:",
          "670:   err = EXT4_ERR_EFAULT;",
          "671:   break;",
          "672:  default:",
          "673:   err = EXT4_ERR_UNKNOWN;",
          "674:  }",
          "675:  EXT4_SB(sb)->s_es->s_last_error_errcode = err;",
          "676: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "699:          sb->s_id, function, line, errstr);",
          "700:  }",
          "704:  ext4_handle_error(sb);",
          "705: }",
          "",
          "[Removed Lines]",
          "702:  ext4_set_errno(sb, -errno);",
          "703:  save_error_info(sb, function, line);",
          "",
          "[Added Lines]",
          "698:  save_error_info(sb, -errno, 0, 0, function, line);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "717: void __ext4_abort(struct super_block *sb, const char *function,",
          "719: {",
          "720:  struct va_format vaf;",
          "721:  va_list args;",
          "",
          "[Removed Lines]",
          "718:   unsigned int line, const char *fmt, ...)",
          "",
          "[Added Lines]",
          "713:     unsigned int line, int error, const char *fmt, ...)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "723:  if (unlikely(ext4_forced_shutdown(EXT4_SB(sb))))",
          "724:   return;",
          "727:  va_start(args, fmt);",
          "728:  vaf.fmt = fmt;",
          "729:  vaf.va = &args;",
          "",
          "[Removed Lines]",
          "726:  save_error_info(sb, function, line);",
          "",
          "[Added Lines]",
          "721:  save_error_info(sb, error, 0, 0, function, line);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "742:   sb->s_flags |= SB_RDONLY;",
          "743:   if (EXT4_SB(sb)->s_journal)",
          "744:    jbd2_journal_abort(EXT4_SB(sb)->s_journal, -EIO);",
          "746:  }",
          "747:  if (test_opt(sb, ERRORS_PANIC) && !system_going_down()) {",
          "748:   if (EXT4_SB(sb)->s_journal &&",
          "",
          "[Removed Lines]",
          "745:   save_error_info(sb, function, line);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "816: {",
          "817:  struct va_format vaf;",
          "818:  va_list args;",
          "821:  if (unlikely(ext4_forced_shutdown(EXT4_SB(sb))))",
          "822:   return;",
          "824:  trace_ext4_error(sb, function, line);",
          "829:  if (ext4_error_ratelimit(sb)) {",
          "830:   va_start(args, fmt);",
          "",
          "[Removed Lines]",
          "819:  struct ext4_super_block *es = EXT4_SB(sb)->s_es;",
          "825:  es->s_last_error_ino = cpu_to_le32(ino);",
          "826:  es->s_last_error_block = cpu_to_le64(block);",
          "827:  __save_error_info(sb, function, line);",
          "",
          "[Added Lines]",
          "818:  __save_error_info(sb, EFSCORRUPTED, ino, block, function, line);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1037:   err = jbd2_journal_destroy(sbi->s_journal);",
          "1038:   sbi->s_journal = NULL;",
          "1039:   if ((err < 0) && !aborted) {",
          "1042:   }",
          "1043:  }",
          "",
          "[Removed Lines]",
          "1040:    ext4_set_errno(sb, -err);",
          "1041:    ext4_abort(sb, \"Couldn't clean up the journal\");",
          "",
          "[Added Lines]",
          "1031:    ext4_abort(sb, -err, \"Couldn't clean up the journal\");",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "5452:  }",
          "5454:  if (sbi->s_mount_flags & EXT4_MF_FS_ABORTED)",
          "5457:  sb->s_flags = (sb->s_flags & ~SB_POSIXACL) |",
          "5458:   (test_opt(sb, POSIX_ACL) ? SB_POSIXACL : 0);",
          "",
          "[Removed Lines]",
          "5455:   ext4_abort(sb, \"Abort forced by user\");",
          "",
          "[Added Lines]",
          "5445:   ext4_abort(sb, EXT4_ERR_ESHUTDOWN, \"Abort forced by user\");",
          "",
          "---------------"
        ],
        "fs/ext4/xattr.c||fs/ext4/xattr.c": [
          "File: fs/ext4/xattr.c -> fs/ext4/xattr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "245:       bh->b_data);",
          "246: errout:",
          "247:  if (error)",
          "249:        \"corrupted xattr block %llu\",",
          "250:        (unsigned long long) bh->b_blocknr);",
          "251:  else",
          "",
          "[Removed Lines]",
          "248:   __ext4_error_inode(inode, function, line, 0,",
          "",
          "[Added Lines]",
          "248:   __ext4_error_inode(inode, function, line, 0, -error,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "269:  error = ext4_xattr_check_entries(IFIRST(header), end, IFIRST(header));",
          "270: errout:",
          "271:  if (error)",
          "273:        \"corrupted in-inode xattr\");",
          "274:  return error;",
          "275: }",
          "",
          "[Removed Lines]",
          "272:   __ext4_error_inode(inode, function, line, 0,",
          "",
          "[Added Lines]",
          "272:   __ext4_error_inode(inode, function, line, 0, -error,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2880:   if (IS_ERR(bh)) {",
          "2881:    error = PTR_ERR(bh);",
          "2882:    if (error == -EIO) {",
          "2886:    }",
          "2887:    bh = NULL;",
          "2888:    goto cleanup;",
          "",
          "[Removed Lines]",
          "2883:     ext4_set_errno(inode->i_sb, EIO);",
          "2884:     EXT4_ERROR_INODE(inode, \"block %llu read error\",",
          "2885:        EXT4_I(inode)->i_file_acl);",
          "",
          "[Added Lines]",
          "2883:     EXT4_ERROR_INODE_ERR(inode, EIO,",
          "2884:            \"block %llu read error\",",
          "2885:            EXT4_I(inode)->i_file_acl);",
          "",
          "---------------"
        ]
      }
    }
  ]
}