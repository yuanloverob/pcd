{
  "cve_id": "CVE-2019-8906",
  "cve_desc": "do_core_note in readelf.c in libmagic.a in file 5.35 has an out-of-bounds read because memcpy is misused.",
  "repo": "file/file",
  "patch_hash": "2858eaf99f6cc5aae129bcbf1e24ad160240185f",
  "patch_info": {
    "commit_hash": "2858eaf99f6cc5aae129bcbf1e24ad160240185f",
    "repo": "file/file",
    "commit_url": "https://github.com/file/file/commit/2858eaf99f6cc5aae129bcbf1e24ad160240185f",
    "files": [
      "src/readelf.c"
    ],
    "message": "Avoid OOB read (found by ASAN reported by F. Alonso)",
    "before_after_code_files": [
      "src/readelf.c||src/readelf.c"
    ]
  },
  "patch_diff": {
    "src/readelf.c||src/readelf.c": [
      "File: src/readelf.c -> src/readelf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"file.h\"",
      "29: #ifndef lint",
      "31: #endif",
      "33: #ifdef BUILTIN_ELF",
      "",
      "[Removed Lines]",
      "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.156 2018/10/19 00:33:04 christos Exp $\")",
      "",
      "[Added Lines]",
      "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.157 2019/01/02 19:44:14 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "752:    char sbuf[512];",
      "753:    struct NetBSD_elfcore_procinfo pi;",
      "754:    memset(&pi, 0, sizeof(pi));",
      "757:    if (file_printf(ms, \", from '%.31s', pid=%u, uid=%u, \"",
      "758:        \"gid=%u, nlwps=%u, lwp=%u (signal %u/code %u)\",",
      "",
      "[Removed Lines]",
      "755:    memcpy(&pi, nbuf + doff, descsz);",
      "",
      "[Added Lines]",
      "755:    memcpy(&pi, nbuf + doff, MIN(descsz, sizeof(pi)));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "818e82a83c2f14833763d99a3e5d5457678f3bf5",
      "candidate_info": {
        "commit_hash": "818e82a83c2f14833763d99a3e5d5457678f3bf5",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/818e82a83c2f14833763d99a3e5d5457678f3bf5",
        "files": [
          "AUTHORS",
          "COPYING",
          "ChangeLog",
          "NEWS",
          "README",
          "doc/libmagic.man",
          "magic/Makefile.am",
          "src/Makefile.am",
          "src/Makefile.std",
          "src/apprentice.c",
          "src/apptype.c",
          "src/ascmagic.c",
          "src/asprintf.c",
          "src/cdf.c",
          "src/cdf.h",
          "src/cdf_time.c",
          "src/compress.c",
          "src/der.c",
          "src/dprintf.c",
          "src/elfclass.h",
          "src/file.h",
          "src/fmtcheck.c",
          "src/fsmagic.c",
          "src/getopt_long.c",
          "src/is_json.c",
          "src/mygetopt.h",
          "src/print.c",
          "src/readcdf.c",
          "src/readelf.c",
          "src/readelf.h",
          "src/seccomp.c",
          "src/softmagic.c",
          "src/vasprintf.c"
        ],
        "message": "Remove trailing whitespace XXX: We can't do this yet from magic files because trailing whitespace is significant.",
        "before_after_code_files": [
          "magic/Makefile.am||magic/Makefile.am",
          "src/Makefile.am||src/Makefile.am",
          "src/Makefile.std||src/Makefile.std",
          "src/apprentice.c||src/apprentice.c",
          "src/apptype.c||src/apptype.c",
          "src/ascmagic.c||src/ascmagic.c",
          "src/asprintf.c||src/asprintf.c",
          "src/cdf.c||src/cdf.c",
          "src/cdf.h||src/cdf.h",
          "src/cdf_time.c||src/cdf_time.c",
          "src/compress.c||src/compress.c",
          "src/der.c||src/der.c",
          "src/dprintf.c||src/dprintf.c",
          "src/elfclass.h||src/elfclass.h",
          "src/file.h||src/file.h",
          "src/fmtcheck.c||src/fmtcheck.c",
          "src/fsmagic.c||src/fsmagic.c",
          "src/getopt_long.c||src/getopt_long.c",
          "src/is_json.c||src/is_json.c",
          "src/mygetopt.h||src/mygetopt.h",
          "src/print.c||src/print.c",
          "src/readcdf.c||src/readcdf.c",
          "src/readelf.c||src/readelf.c",
          "src/readelf.h||src/readelf.h",
          "src/seccomp.c||src/seccomp.c",
          "src/softmagic.c||src/softmagic.c",
          "src/vasprintf.c||src/vasprintf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "magic/Makefile.am||magic/Makefile.am": [
          "File: magic/Makefile.am -> magic/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #",
          "3: #",
          "4: MAGIC_FRAGMENT_BASE = Magdir",
          "5: MAGIC_DIR = $(top_srcdir)/magic",
          "",
          "[Removed Lines]",
          "2: # $File: Makefile.am,v 1.134 2018/08/02 06:33:05 christos Exp $",
          "",
          "[Added Lines]",
          "2: # $File: Makefile.am,v 1.135 2018/09/09 20:33:28 christos Exp $",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "301: $(MAGIC_FRAGMENT_DIR)/zfs \\",
          "302: $(MAGIC_FRAGMENT_DIR)/zilog \\",
          "303: $(MAGIC_FRAGMENT_DIR)/zip \\",
          "306: MAGIC = magic.mgc",
          "307: CLEANFILES = ${MAGIC} $(MAGIC_FRAGMENT_DIR)/Localstuff",
          "",
          "[Removed Lines]",
          "304: $(MAGIC_FRAGMENT_DIR)/zyxel",
          "",
          "[Added Lines]",
          "304: $(MAGIC_FRAGMENT_DIR)/zyxel",
          "",
          "---------------"
        ],
        "src/Makefile.am||src/Makefile.am": [
          "File: src/Makefile.am -> src/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: if MINGW",
          "16: MINGWLIBS = -lgnurx -lshlwapi",
          "17: else",
          "19: endif",
          "20: libmagic_la_LIBADD = $(LTLIBOBJS) $(MINGWLIBS)",
          "",
          "[Removed Lines]",
          "18: MINGWLIBS =",
          "",
          "[Added Lines]",
          "18: MINGWLIBS =",
          "",
          "---------------"
        ],
        "src/Makefile.std||src/Makefile.std": [
          "File: src/Makefile.std -> src/Makefile.std",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: # Copyright (c) Ian F. Darwin 86/09/01 - see LEGAL.NOTICE.",
          "4: #",
          "5: # This software is not subject to any license of the American Telephone",
          "6: # and Telegraph Company or of the Regents of the University of California.",
          "",
          "[Removed Lines]",
          "1: # Makefile for file(1) cmd.",
          "3: # @(#)$Id: Makefile.std,v 1.19 2014-06-03 19:17:27 christos Exp $",
          "",
          "[Added Lines]",
          "1: # Makefile for file(1) cmd.",
          "3: # @(#)$Id: Makefile.std,v 1.20 2018/09/09 20:33:28 christos Exp $",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37: OFILE = /usr/bin/file  # old or distributed version, for comparison",
          "38: # Where new binary lives; typically /usr/local (BSD), /usr/lbin (USG).",
          "39: BINDIR = /usr/local/bin",
          "41: # MANCxxx is manual section for Commands, MANFxxx is section for file formats.",
          "42: # MANxDIR is directory names; MANxEXT is the filename extension. Usual values:",
          "43: # Variable V7  4BSD  Sys V",
          "",
          "[Removed Lines]",
          "40: # For installing our man pages;",
          "",
          "[Added Lines]",
          "40: # For installing our man pages;",
          "",
          "---------------"
        ],
        "src/apprentice.c||src/apprentice.c": [
          "File: src/apprentice.c -> src/apprentice.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.278 2018/09/01 15:52:02 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.279 2018/09/09 20:33:28 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86: #define MAP_TYPE_MMAP 2",
          "88: struct magic_entry {",
          "90:  uint32_t cont_count;",
          "91:  uint32_t max_count;",
          "92: };",
          "",
          "[Removed Lines]",
          "89:  struct magic *mp;",
          "",
          "[Added Lines]",
          "89:  struct magic *mp;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "121: private size_t apprentice_magic_strength(const struct magic *);",
          "122: private int apprentice_sort(const void *, const void *);",
          "123: private void apprentice_list(struct mlist *, int );",
          "125:     const char *, int);",
          "126: private struct mlist *mlist_alloc(void);",
          "127: private void mlist_free(struct mlist *);",
          "",
          "[Removed Lines]",
          "124: private struct magic_map *apprentice_load(struct magic_set *,",
          "",
          "[Added Lines]",
          "124: private struct magic_map *apprentice_load(struct magic_set *,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1290:     file_magwarn(ms,",
          "1291:         \"level 0 \\\"default\\\" did not sort last\");",
          "1292:    }",
          "1294:   }",
          "1295:  }",
          "1296: }",
          "",
          "[Removed Lines]",
          "1293:    return;",
          "",
          "[Added Lines]",
          "1293:    return;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1846:  while (*l == '>') {",
          "1849:  }",
          "1850: #ifdef ENABLE_CONDITIONALS",
          "1851:  if (cont_level == 0 || cont_level > last_cont_level)",
          "",
          "[Removed Lines]",
          "1848:   cont_level++;",
          "",
          "[Added Lines]",
          "1848:   cont_level++;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2030:    }",
          "2031:    l = t;",
          "2032:   }",
          "2034:       ((m->in_op & FILE_OPINDIRECT) && *l++ != ')')) {",
          "2035:    if (ms->flags & MAGIC_CHECK)",
          "2036:     file_magwarn(ms,",
          "",
          "[Removed Lines]",
          "2033:   if (*l++ != ')' ||",
          "",
          "[Added Lines]",
          "2033:   if (*l++ != ')' ||",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2174:   break;",
          "2175:  default:",
          "2178:       isspace((unsigned char)l[1])) || !l[1])) {",
          "2179:    m->reln = *l;",
          "2180:    ++l;",
          "",
          "[Removed Lines]",
          "2177:   if (*l == 'x' && ((isascii((unsigned char)l[1]) &&",
          "",
          "[Added Lines]",
          "2177:   if (*l == 'x' && ((isascii((unsigned char)l[1]) &&",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2309:   file_magwarn(ms, \"Current entry already has a %s type \"",
          "2310:       \"`%.*s', new type `%s'\", name, (int)len, buf, l);",
          "2311:   return -1;",
          "2314:  if (*m->desc == '\\0') {",
          "2315:   file_magwarn(ms, \"Current entry does not yet have a \"",
          "",
          "[Removed Lines]",
          "2312:  }",
          "",
          "[Added Lines]",
          "2312:  }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2597:  if (m->type >= file_nformats) {",
          "2598:   file_magwarn(ms, \"Internal error inconsistency between \"",
          "2600:   return -1;",
          "2601:  }",
          "2602:  if (file_formats[m->type] == FILE_FMT_NONE) {",
          "",
          "[Removed Lines]",
          "2599:       \"m->type and format strings\");",
          "",
          "[Added Lines]",
          "2599:       \"m->type and format strings\");",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2993: {",
          "2994:  const char *l = *p;",
          "2997:   l++;",
          "2999:  switch (LOWCASE(*l)) {",
          "",
          "[Removed Lines]",
          "2996:  if (LOWCASE(*l) == 'u')",
          "",
          "[Added Lines]",
          "2996:  if (LOWCASE(*l) == 'u')",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3192:  dbname = mkdbname(ms, fn, 1);",
          "3195:   goto out;",
          "3198:  {",
          "3199:   file_error(ms, errno, \"cannot open `%s'\", dbname);",
          "3200:   goto out;",
          "",
          "[Removed Lines]",
          "3194:  if (dbname == NULL)",
          "3197:  if ((fd = open(dbname, O_WRONLY|O_CREAT|O_TRUNC|O_BINARY, 0644)) == -1)",
          "",
          "[Added Lines]",
          "3194:  if (dbname == NULL)",
          "3197:  if ((fd = open(dbname, O_WRONLY|O_CREAT|O_TRUNC|O_BINARY, 0644)) == -1)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3292: swap2(uint16_t sv)",
          "3293: {",
          "3294:  uint16_t rv;",
          "3297:  d[0] = s[1];",
          "3298:  d[1] = s[0];",
          "3299:  return rv;",
          "",
          "[Removed Lines]",
          "3295:  uint8_t *s = (uint8_t *)(void *)&sv;",
          "3296:  uint8_t *d = (uint8_t *)(void *)&rv;",
          "",
          "[Added Lines]",
          "3295:  uint8_t *s = (uint8_t *)(void *)&sv;",
          "3296:  uint8_t *d = (uint8_t *)(void *)&rv;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3306: swap4(uint32_t sv)",
          "3307: {",
          "3308:  uint32_t rv;",
          "3311:  d[0] = s[3];",
          "3312:  d[1] = s[2];",
          "3313:  d[2] = s[1];",
          "",
          "[Removed Lines]",
          "3309:  uint8_t *s = (uint8_t *)(void *)&sv;",
          "3310:  uint8_t *d = (uint8_t *)(void *)&rv;",
          "",
          "[Added Lines]",
          "3309:  uint8_t *s = (uint8_t *)(void *)&sv;",
          "3310:  uint8_t *d = (uint8_t *)(void *)&rv;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3322: swap8(uint64_t sv)",
          "3323: {",
          "3324:  uint64_t rv;",
          "3327: #if 0",
          "3328:  d[0] = s[3];",
          "3329:  d[1] = s[2];",
          "",
          "[Removed Lines]",
          "3325:  uint8_t *s = (uint8_t *)(void *)&sv;",
          "3326:  uint8_t *d = (uint8_t *)(void *)&rv;",
          "",
          "[Added Lines]",
          "3325:  uint8_t *s = (uint8_t *)(void *)&sv;",
          "3326:  uint8_t *d = (uint8_t *)(void *)&rv;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3366:  }",
          "3367: }",
          "3370: file_pstring_length_size(const struct magic *m)",
          "3371: {",
          "3372:  switch (m->str_flags & PSTRING_LEN) {",
          "",
          "[Removed Lines]",
          "3369: protected size_t",
          "",
          "[Added Lines]",
          "3369: protected size_t",
          "",
          "---------------"
        ],
        "src/apptype.c||src/apptype.c": [
          "File: src/apptype.c -> src/apptype.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "33: #include <stdlib.h>",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: apptype.c,v 1.12 2011/08/28 07:03:27 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: apptype.c,v 1.14 2018/09/09 20:33:28 christos Exp $\")",
          "",
          "---------------"
        ],
        "src/ascmagic.c||src/ascmagic.c": [
          "File: src/ascmagic.c -> src/ascmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "41: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: ascmagic.c,v 1.98 2017/11/02 20:25:39 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: ascmagic.c,v 1.99 2018/09/09 20:33:28 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96: }",
          "98: protected int",
          "100:     const struct buffer *b, unichar *ubuf, size_t ulen, const char *code,",
          "101:     const char *type, int text)",
          "102: {",
          "",
          "[Removed Lines]",
          "99: file_ascmagic_with_encoding(struct magic_set *ms,",
          "",
          "[Added Lines]",
          "99: file_ascmagic_with_encoding(struct magic_set *ms,",
          "",
          "---------------"
        ],
        "src/asprintf.c||src/asprintf.c": [
          "File: src/asprintf.c -> src/asprintf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include \"file.h\"",
          "31: #ifndef lint",
          "33: #endif",
          "35: int asprintf(char **ptr, const char *fmt, ...)",
          "",
          "[Removed Lines]",
          "32: FILE_RCSID(\"@(#)$File: asprintf.c,v 1.3 2009/02/03 20:27:51 christos Exp $\")",
          "",
          "[Added Lines]",
          "32: FILE_RCSID(\"@(#)$File: asprintf.c,v 1.5 2018/09/09 20:33:28 christos Exp $\")",
          "",
          "---------------"
        ],
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.110 2017/12/19 00:21:21 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.111 2018/09/09 20:33:28 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "859: }",
          "861: static const uint8_t *",
          "863:     const uint8_t *p, const uint8_t *e, size_t i)",
          "864: {",
          "865:  size_t tail = (i << 1) + 1;",
          "",
          "[Removed Lines]",
          "862: cdf_get_property_info_pos(const cdf_stream_t *sst, const cdf_header_t *h,",
          "",
          "[Added Lines]",
          "862: cdf_get_property_info_pos(const cdf_stream_t *sst, const cdf_header_t *h,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "874:      __LINE__) == -1)",
          "875:   return NULL;",
          "876:  ofs = CDF_GETUINT32(p, tail);",
          "878:      ofs - 2 * sizeof(uint32_t)));",
          "880:  if (q < p) {",
          "",
          "[Removed Lines]",
          "877:  q = CAST(const uint8_t *, cdf_offset(CAST(const void *, p),",
          "",
          "[Added Lines]",
          "877:  q = CAST(const uint8_t *, cdf_offset(CAST(const void *, p),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "896:  size_t newcount = *maxcount + incr;",
          "898:  if (newcount > CDF_PROP_LIMIT) {",
          "900:       newcount, CDF_PROP_LIMIT));",
          "901:   goto out;",
          "902:  }",
          "",
          "[Removed Lines]",
          "899:   DPRINTF((\"exceeded property limit %zu > %zu\\n\",",
          "",
          "[Added Lines]",
          "899:   DPRINTF((\"exceeded property limit %zu > %zu\\n\",",
          "",
          "---------------"
        ],
        "src/cdf.h||src/cdf.h": [
          "File: src/cdf.h -> src/cdf.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "272: typedef struct {",
          "273:  uint16_t ce_namlen;",
          "274:  uint32_t ce_num;",
          "276:  uint16_t ce_name[256];",
          "277: } cdf_catalog_entry_t;",
          "",
          "[Removed Lines]",
          "275:  uint64_t ce_timestamp;",
          "",
          "[Added Lines]",
          "275:  uint64_t ce_timestamp;",
          "",
          "---------------"
        ],
        "src/cdf_time.c||src/cdf_time.c": [
          "File: src/cdf_time.c -> src/cdf_time.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #include <time.h>",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: cdf_time.c,v 1.16 2017/03/29 15:57:48 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: cdf_time.c,v 1.17 2018/09/09 20:33:28 christos Exp $\")",
          "",
          "---------------"
        ],
        "src/compress.c||src/compress.c": [
          "File: src/compress.c -> src/compress.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: compress.c,v 1.109 2018/08/01 10:11:16 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: compress.c,v 1.110 2018/09/09 20:33:28 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52: # ifndef HAVE_SIG_T",
          "53: typedef void (*sig_t)(int);",
          "56: #if !defined(__MINGW32__) && !defined(WIN32)",
          "57: #include <sys/ioctl.h>",
          "58: #endif",
          "",
          "[Removed Lines]",
          "55: #endif",
          "",
          "[Added Lines]",
          "55: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62: #if defined(HAVE_SYS_TIME_H)",
          "63: #include <sys/time.h>",
          "64: #endif",
          "65: #if defined(HAVE_ZLIB_H) && defined(ZLIBSUPPORT)",
          "66: #define BUILTIN_DECOMPRESS",
          "67: #include <zlib.h>",
          "68: #endif",
          "69: #ifdef DEBUG",
          "70: int tty = -1;",
          "71: #define DPRINTF(...) do { \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71: #if defined(HAVE_BZLIB_H)",
          "72: #define BUILTIN_BZLIB",
          "73: #include <bzlib.h>",
          "74: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "179: private int uncompressgzipped(const unsigned char *, unsigned char **, size_t,",
          "180:     size_t *);",
          "181: #endif",
          "182: static int makeerror(unsigned char **, size_t *, const char *, ...)",
          "183:     __attribute__((__format__(__printf__, 3, 4)));",
          "184: private const char *methodname(size_t);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "190: #ifdef BUILTIN_BZLIB",
          "191: private int uncompressbzlib(const unsigned char *, unsigned char **, size_t,",
          "192:     size_t *, int);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "514:  int rc;",
          "515:  z_stream z;",
          "518:   return makeerror(newch, n, \"No buffer, %s\", strerror(errno));",
          "520:  z.next_in = CCAST(Bytef *, old);",
          "",
          "[Removed Lines]",
          "517:  if ((*newch = CAST(unsigned char *, malloc(bytes_max + 1))) == NULL)",
          "",
          "[Added Lines]",
          "529:  if ((*newch = CAST(unsigned char *, malloc(bytes_max + 1))) == NULL)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "709:    fdp[STDIN_FILENO][0] = fd;",
          "710:    (void) lseek(fd, (off_t)0, SEEK_SET);",
          "711:   }",
          "713:   for (i = 0; i < __arraycount(fdp); i++)",
          "714:    copydesc(CAST(int, i), fdp[i]);",
          "716:   (void)execvp(compr[method].argv[0],",
          "717:       (char *const *)(intptr_t)compr[method].argv);",
          "719:       compr[method].argv[0], strerror(errno));",
          "720:   exit(1);",
          "",
          "[Removed Lines]",
          "718:   dprintf(STDERR_FILENO, \"exec `%s' failed, %s\",",
          "",
          "[Added Lines]",
          "730:   dprintf(STDERR_FILENO, \"exec `%s' failed, %s\",",
          "",
          "---------------"
        ],
        "src/der.c||src/der.c": [
          "File: src/der.c -> src/der.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "40: #endif",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: der.c,v 1.13 2018/06/23 15:15:26 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: der.c,v 1.14 2018/09/09 20:33:28 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "207: static const char *",
          "208: der_tag(char *buf, size_t len, uint32_t tag)",
          "209: {",
          "211:   strlcpy(buf, der__tag[tag], len);",
          "212:  else",
          "213:   snprintf(buf, len, \"%#x\", tag);",
          "",
          "[Removed Lines]",
          "210:  if (tag < DER_TAG_LONG)",
          "",
          "[Added Lines]",
          "210:  if (tag < DER_TAG_LONG)",
          "",
          "---------------"
        ],
        "src/dprintf.c||src/dprintf.c": [
          "File: src/dprintf.c -> src/dprintf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include \"file.h\"",
          "30: #ifndef lint",
          "34: #include <assert.h>",
          "",
          "[Removed Lines]",
          "31: FILE_RCSID(\"@(#)$File: dprintf.c,v 1.13 2014/12/04 15:56:46 christos Exp $\")",
          "",
          "[Added Lines]",
          "31: FILE_RCSID(\"@(#)$File: dprintf.c,v 1.2 2018/09/09 20:33:28 christos Exp $\")",
          "",
          "---------------"
        ],
        "src/elfclass.h||src/elfclass.h": [
          "File: src/elfclass.h -> src/elfclass.h"
        ],
        "src/file.h||src/file.h": [
          "File: src/file.h -> src/file.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "602: struct tm *localtime_r(const time_t *, struct tm *);",
          "603: #endif",
          "604: #ifndef HAVE_FMTCHECK",
          "606:      __attribute__((__format_arg__(2)));",
          "607: #endif",
          "609: #ifdef HAVE_LIBSECCOMP",
          "613: int enable_sandbox_basic(void);",
          "618: int enable_sandbox_full(void);",
          "",
          "[Removed Lines]",
          "605: const char *fmtcheck(const char *, const char *)",
          "",
          "[Added Lines]",
          "605: const char *fmtcheck(const char *, const char *)",
          "",
          "---------------"
        ],
        "src/fmtcheck.c||src/fmtcheck.c": [
          "File: src/fmtcheck.c -> src/fmtcheck.c"
        ],
        "src/fsmagic.c||src/fsmagic.c": [
          "File: src/fsmagic.c -> src/fsmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: fsmagic.c,v 1.77 2017/05/24 19:17:50 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: fsmagic.c,v 1.78 2018/09/09 20:33:28 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:    file_error(ms, err,",
          "78:        \"broken symbolic link to %s\", buf);",
          "79:    return -1;",
          "81:   if (file_printf(ms, \"broken symbolic link to %s\", buf) == -1)",
          "82:    return -1;",
          "83:  }",
          "",
          "[Removed Lines]",
          "80:   }",
          "",
          "[Added Lines]",
          "80:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "174:     return -1;",
          "175: #endif",
          "176: #ifdef S_ISGID",
          "178:    if (file_printf(ms, \"%ssetgid\", COMMA) == -1)",
          "179:     return -1;",
          "180: #endif",
          "181: #ifdef S_ISVTX",
          "183:    if (file_printf(ms, \"%ssticky\", COMMA) == -1)",
          "184:     return -1;",
          "185: #endif",
          "186:  }",
          "188:  switch (sb->st_mode & S_IFMT) {",
          "189:  case S_IFDIR:",
          "190:   if (mime) {",
          "",
          "[Removed Lines]",
          "177:   if (sb->st_mode & S_ISGID)",
          "182:   if (sb->st_mode & S_ISVTX)",
          "",
          "[Added Lines]",
          "177:   if (sb->st_mode & S_ISGID)",
          "182:   if (sb->st_mode & S_ISVTX)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "320:    } else {",
          "321:     if (tmp - fn + 1 > BUFSIZ) {",
          "322:      if (ms->flags & MAGIC_ERROR) {",
          "324:           \"path too long: `%s'\", buf);",
          "325:       return -1;",
          "326:      }",
          "",
          "[Removed Lines]",
          "323:       file_error(ms, 0,",
          "",
          "[Added Lines]",
          "323:       file_error(ms, 0,",
          "",
          "---------------"
        ],
        "src/getopt_long.c||src/getopt_long.c": [
          "File: src/getopt_long.c -> src/getopt_long.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include <assert.h>",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: getopt_long.c,v 1.5 2009/02/03 20:27:51 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: getopt_long.c,v 1.7 2018/09/09 20:33:28 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "269:  }",
          "273:    return -2;",
          "",
          "[Removed Lines]",
          "272:   if (*place)",
          "",
          "[Added Lines]",
          "272:   if (*place)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "488:   if (long_options[match].flag) {",
          "490:    retval = 0;",
          "492:    retval = long_options[match].val;",
          "493:   if (idx)",
          "",
          "[Removed Lines]",
          "491:   } else",
          "",
          "[Added Lines]",
          "491:   } else",
          "",
          "---------------"
        ],
        "src/is_json.c||src/is_json.c": [
          "File: src/is_json.c -> src/is_json.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "36: #endif",
          "38: #include <string.h>",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: is_json.c,v 1.9 2018/08/27 06:17:23 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: is_json.c,v 1.10 2018/09/09 20:33:28 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85: json_isdigit(unsigned char uc)",
          "86: {",
          "87:  switch (uc) {",
          "89:  case '5': case '6': case '7': case '8': case '9':",
          "90:   return 1;",
          "91:  default:",
          "",
          "[Removed Lines]",
          "88:  case '0': case '1': case '2': case '3': case '4':",
          "",
          "[Added Lines]",
          "88:  case '0': case '1': case '2': case '3': case '4':",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "167: }",
          "169: static int",
          "171:  size_t *st, size_t lvl)",
          "172: {",
          "173:  const unsigned char *uc = *ucp;",
          "",
          "[Removed Lines]",
          "170: json_parse_array(const unsigned char **ucp, const unsigned char *ue,",
          "",
          "[Added Lines]",
          "170: json_parse_array(const unsigned char **ucp, const unsigned char *ue,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "196: }",
          "198: static int",
          "200:  size_t *st, size_t lvl)",
          "201: {",
          "202:  const unsigned char *uc = *ucp;",
          "",
          "[Removed Lines]",
          "199: json_parse_object(const unsigned char **ucp, const unsigned char *ue,",
          "",
          "[Added Lines]",
          "199: json_parse_object(const unsigned char **ucp, const unsigned char *ue,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "314: }",
          "316: static int",
          "318:     size_t *st, size_t lvl)",
          "319: {",
          "320:  const unsigned char *uc;",
          "",
          "[Removed Lines]",
          "317: json_parse(const unsigned char **ucp, const unsigned char *ue,",
          "",
          "[Added Lines]",
          "317: json_parse(const unsigned char **ucp, const unsigned char *ue,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "407: #if JSON_COUNT",
          "408: #define P(n) st[n], st[n] > 1 ? \"s\" : \"\"",
          "409:  if (file_printf(ms, \" (%zu object%s, %zu array%s, %zu string%s, \"",
          "411:      P(JSON_STRING), P(JSON_CONSTANT), P(JSON_NUMBER)) == -1)",
          "412:   return -1;",
          "413: #endif",
          "",
          "[Removed Lines]",
          "410:      \"%zu constant%s, %zu number%s)\", P(JSON_OBJECT), P(JSON_ARRAY),",
          "",
          "[Added Lines]",
          "410:      \"%zu constant%s, %zu number%s)\", P(JSON_OBJECT), P(JSON_ARRAY),",
          "",
          "---------------"
        ],
        "src/mygetopt.h||src/mygetopt.h": [
          "File: src/mygetopt.h -> src/mygetopt.h"
        ],
        "src/print.c||src/print.c": [
          "File: src/print.c -> src/print.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include <string.h>",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: print.c,v 1.81 2016/01/19 15:09:03 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: print.c,v 1.83 2018/09/09 20:33:28 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:  if (IS_STRING(m->type)) {",
          "79:   if (m->str_flags) {",
          "80:    (void) fputc('/', stderr);",
          "82:     (void) fputc(CHAR_COMPACT_WHITESPACE, stderr);",
          "84:     (void) fputc(CHAR_COMPACT_OPTIONAL_WHITESPACE,",
          "85:         stderr);",
          "87:     (void) fputc(CHAR_IGNORE_LOWERCASE, stderr);",
          "89:     (void) fputc(CHAR_IGNORE_UPPERCASE, stderr);",
          "91:     (void) fputc(CHAR_REGEX_OFFSET_START, stderr);",
          "92:    if (m->str_flags & STRING_TEXTTEST)",
          "93:     (void) fputc(CHAR_TEXTTEST, stderr);",
          "",
          "[Removed Lines]",
          "81:    if (m->str_flags & STRING_COMPACT_WHITESPACE)",
          "83:    if (m->str_flags & STRING_COMPACT_OPTIONAL_WHITESPACE)",
          "86:    if (m->str_flags & STRING_IGNORE_LOWERCASE)",
          "88:    if (m->str_flags & STRING_IGNORE_UPPERCASE)",
          "90:    if (m->str_flags & REGEX_OFFSET_START)",
          "",
          "[Added Lines]",
          "81:    if (m->str_flags & STRING_COMPACT_WHITESPACE)",
          "83:    if (m->str_flags & STRING_COMPACT_OPTIONAL_WHITESPACE)",
          "86:    if (m->str_flags & STRING_IGNORE_LOWERCASE)",
          "88:    if (m->str_flags & STRING_IGNORE_UPPERCASE)",
          "90:    if (m->str_flags & REGEX_OFFSET_START)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "217:  va_list va;",
          "222:  if (ms->file)",
          "223:   (void) fprintf(stderr, \"%s, %lu: \", ms->file,",
          "",
          "[Removed Lines]",
          "220:  (void) fflush(stdout);",
          "",
          "[Added Lines]",
          "220:  (void) fflush(stdout);",
          "",
          "---------------"
        ],
        "src/readcdf.c||src/readcdf.c": [
          "File: src/readcdf.c -> src/readcdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"file.h\"",
          "28: #ifndef lint",
          "30: #endif",
          "32: #include <assert.h>",
          "",
          "[Removed Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.69 2018/08/19 10:38:21 christos Exp $\")",
          "",
          "[Added Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.70 2018/09/09 20:33:28 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "353: #ifdef notdef",
          "354: private char *",
          "355: format_clsid(char *buf, size_t len, const uint64_t uuid[2]) {",
          "357:      PRIx64 \"-%.12\" PRIx64,",
          "358:      (uuid[0] >> 32) & (uint64_t)0x000000000ffffffffULL,",
          "359:      (uuid[0] >> 16) & (uint64_t)0x0000000000000ffffULL,",
          "361:      (uuid[1] >> 48) & (uint64_t)0x0000000000000ffffULL,",
          "362:      (uuid[1] >>  0) & (uint64_t)0x0000fffffffffffffULL);",
          "363:  return buf;",
          "",
          "[Removed Lines]",
          "356:  snprintf(buf, len, \"%.8\" PRIx64 \"-%.4\" PRIx64 \"-%.4\" PRIx64 \"-%.4\"",
          "360:      (uuid[0] >>  0) & (uint64_t)0x0000000000000ffffULL,",
          "",
          "[Added Lines]",
          "356:  snprintf(buf, len, \"%.8\" PRIx64 \"-%.4\" PRIx64 \"-%.4\" PRIx64 \"-%.4\"",
          "360:      (uuid[0] >>  0) & (uint64_t)0x0000000000000ffffULL,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "436:  const char *sections[5];",
          "437:  const int  types[5];",
          "438: } sectioninfo[] = {",
          "440:   {",
          "441:    \"EncryptedPackage\", \"EncryptedSummary\",",
          "442:    NULL, NULL, NULL,",
          "",
          "[Removed Lines]",
          "439:  { \"Encrypted\", \"encrypted\",",
          "",
          "[Added Lines]",
          "439:  { \"Encrypted\", \"encrypted\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "449:   },",
          "450:  },",
          "452:   {",
          "453: #if 0",
          "454:    \"TaxForms\", \"PDFTaxForms\", \"modulesInBackup\",",
          "",
          "[Removed Lines]",
          "451:  { \"QuickBooks\", \"quickbooks\",",
          "",
          "[Added Lines]",
          "451:  { \"QuickBooks\", \"quickbooks\",",
          "",
          "---------------"
        ],
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.151 2018/08/03 09:00:13 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.152 2018/09/09 20:33:28 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "616:    break;",
          "617:   default:",
          "618:    if (file_printf(ms, \"<unknown>\") == -1)",
          "620:   }",
          "621:   if (file_printf(ms, \" %d.%d.%d\", elf_getu32(swap, desc[1]),",
          "622:       elf_getu32(swap, desc[2]), elf_getu32(swap, desc[3])) == -1)",
          "",
          "[Removed Lines]",
          "619:     return 1;",
          "",
          "[Added Lines]",
          "619:     return 1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "727:  if ((namesz == 4 && strncmp((char *)&nbuf[noff], \"CORE\", 4) == 0) ||",
          "728:      (namesz == 5 && strcmp((char *)&nbuf[noff], \"CORE\") == 0)) {",
          "729:   os_style = OS_STYLE_SVR4;",
          "732:  if ((namesz == 8 && strcmp((char *)&nbuf[noff], \"FreeBSD\") == 0)) {",
          "733:   os_style = OS_STYLE_FREEBSD;",
          "",
          "[Removed Lines]",
          "730:  }",
          "",
          "[Added Lines]",
          "730:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1358:         CAST(uintmax_t, xsh_size),",
          "1359:         CAST(uintmax_t, fsize)) == -1)",
          "1360:      return -1;",
          "1362:    }",
          "1363:    if ((nbuf = malloc(xsh_size)) == NULL) {",
          "1364:     file_error(ms, errno, \"Cannot allocate memory\"",
          "",
          "[Removed Lines]",
          "1361:     return 0;",
          "",
          "[Added Lines]",
          "1361:     return 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1578:  interp[0] = '\\0';",
          "1579:    for ( ; num; num--) {",
          "1580:   int doread;",
          "1582:       CAST(ssize_t, xph_sizeof)) {",
          "1583:    file_badread(ms);",
          "1584:    return -1;",
          "",
          "[Removed Lines]",
          "1581:   if (pread(fd, xph_addr, xph_sizeof, off) <",
          "",
          "[Added Lines]",
          "1581:   if (pread(fd, xph_addr, xph_sizeof, off) <",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1599:     continue;",
          "1600:    if (((align = xph_align) & 0x80000000UL) != 0 ||",
          "1601:        align < 4) {",
          "1603:         \", invalid note alignment %#lx\",",
          "1604:         CAST(unsigned long, align)) == -1)",
          "1605:      return -1;",
          "",
          "[Removed Lines]",
          "1602:     if (file_printf(ms,",
          "",
          "[Added Lines]",
          "1602:     if (file_printf(ms,",
          "",
          "---------------"
        ],
        "src/readelf.h||src/readelf.h": [
          "File: src/readelf.h -> src/readelf.h"
        ],
        "src/seccomp.c||src/seccomp.c": [
          "File: src/seccomp.c -> src/seccomp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "33: #if HAVE_LIBSECCOMP",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: seccomp.c,v 1.6 2018/06/26 20:29:29 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: seccomp.c,v 1.7 2018/09/09 20:33:28 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "163:  ALLOW_RULE(dup2);",
          "164:  ALLOW_RULE(exit);",
          "165:  ALLOW_RULE(exit_group);",
          "168:  ALLOW_RULE(fstat);",
          "170:  ALLOW_RULE(getdents);",
          "171: #ifdef __NR_getdents64",
          "172:  ALLOW_RULE(getdents64);",
          "",
          "[Removed Lines]",
          "166:  ALLOW_RULE(fcntl);",
          "167:   ALLOW_RULE(fcntl64);",
          "169:   ALLOW_RULE(fstat64);",
          "",
          "[Added Lines]",
          "166:  ALLOW_RULE(fcntl);",
          "167:   ALLOW_RULE(fcntl64);",
          "169:   ALLOW_RULE(fstat64);",
          "",
          "---------------"
        ],
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.269 2018/08/21 08:58:16 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.270 2018/09/09 20:33:28 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:     const struct buffer *, size_t, int, int, int, uint16_t *,",
          "48:     uint16_t *, int *, int *, int *);",
          "49: private int mget(struct magic_set *, struct magic *, const struct buffer *,",
          "51:     size_t, unsigned int, int, int, int, uint16_t *,",
          "52:     uint16_t *, int *, int *, int *);",
          "53: private int msetoffset(struct magic_set *, struct magic *, struct buffer *,",
          "",
          "[Removed Lines]",
          "50:     const unsigned char *, size_t,",
          "",
          "[Added Lines]",
          "50:     const unsigned char *, size_t,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "611:    case FILE_BESTRING16:",
          "612:    case FILE_LESTRING16:",
          "613:   if (m->reln == '=' || m->reln == '!') {",
          "615:        file_printable(sbuf, sizeof(sbuf), m->value.s))",
          "616:        == -1)",
          "617:     return -1;",
          "",
          "[Removed Lines]",
          "614:    if (file_printf(ms, F(ms, desc, \"%s\"),",
          "",
          "[Added Lines]",
          "614:    if (file_printf(ms, F(ms, desc, \"%s\"),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "772:   t = ms->offset;",
          "773:   break;",
          "774:  case FILE_DER:",
          "776:       file_printable(sbuf, sizeof(sbuf), ms->ms_value.s)) == -1)",
          "777:    return -1;",
          "778:   t = ms->offset;",
          "",
          "[Removed Lines]",
          "775:   if (file_printf(ms, F(ms, desc, \"%s\"),",
          "",
          "[Added Lines]",
          "775:   if (file_printf(ms, F(ms, desc, \"%s\"),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1206:    goto out;",
          "1207:   return 1;",
          "1208:  case FILE_BEDOUBLE:",
          "1210:   if (cvt_double(p, m) == -1)",
          "1211:    goto out;",
          "1212:   return 1;",
          "",
          "[Removed Lines]",
          "1209:   p->q = BE64(p);",
          "",
          "[Added Lines]",
          "1209:   p->q = BE64(p);",
          "",
          "---------------"
        ],
        "src/vasprintf.c||src/vasprintf.c": [
          "File: src/vasprintf.c -> src/vasprintf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: the following disclaimer in the documentation and/or other materials",
          "52: provided with the distribution. The name of the author may not be used to",
          "53: endorse or promote products derived from this software without specific",
          "56: THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED",
          "57: WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF",
          "",
          "[Removed Lines]",
          "54: prior written permission.",
          "",
          "[Added Lines]",
          "54: prior written permission.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108: #include \"file.h\"",
          "110: #ifndef lint",
          "114: #include <assert.h>",
          "",
          "[Removed Lines]",
          "111: FILE_RCSID(\"@(#)$File: vasprintf.c,v 1.14 2017/08/13 00:21:47 christos Exp $\")",
          "",
          "[Added Lines]",
          "111: FILE_RCSID(\"@(#)$File: vasprintf.c,v 1.15 2018/09/09 20:33:28 christos Exp $\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "71a15e2f48ecb3d7094260087fda1b1a2a870431",
      "candidate_info": {
        "commit_hash": "71a15e2f48ecb3d7094260087fda1b1a2a870431",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/71a15e2f48ecb3d7094260087fda1b1a2a870431",
        "files": [
          "src/ascmagic.c",
          "src/cdf.c",
          "src/compress.c",
          "src/der.c",
          "src/encoding.c",
          "src/file.h",
          "src/is_json.c",
          "src/is_tar.c",
          "src/readcdf.c",
          "src/readelf.c",
          "src/softmagic.c"
        ],
        "message": "- use SIZE_T_FORMAT instead of 'z' in size_t format strings - compile with c++ again",
        "before_after_code_files": [
          "src/ascmagic.c||src/ascmagic.c",
          "src/cdf.c||src/cdf.c",
          "src/compress.c||src/compress.c",
          "src/der.c||src/der.c",
          "src/encoding.c||src/encoding.c",
          "src/file.h||src/file.h",
          "src/is_json.c||src/is_json.c",
          "src/is_tar.c||src/is_tar.c",
          "src/readcdf.c||src/readcdf.c",
          "src/readelf.c||src/readelf.c",
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/ascmagic.c||src/ascmagic.c": [
          "File: src/ascmagic.c -> src/ascmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "41: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: ascmagic.c,v 1.99 2018/09/09 20:33:28 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: ascmagic.c,v 1.100 2018/10/15 16:29:16 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:  const char *type = NULL;",
          "82:  bb = *b;",
          "86:  if (file_encoding(ms, &bb, &ubuf, &ulen, &code, &code_mime,",
          "",
          "[Removed Lines]",
          "83:  bb.flen = trim_nuls(b->fbuf, b->flen);",
          "",
          "[Added Lines]",
          "83:  bb.flen = trim_nuls(CAST(const unsigned char *, b->fbuf), b->flen);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:     const char *type, int text)",
          "102: {",
          "103:  struct buffer bb;",
          "105:  size_t nbytes = b->flen;",
          "106:  unsigned char *utf8_buf = NULL, *utf8_end;",
          "107:  size_t mlen, i;",
          "",
          "[Removed Lines]",
          "104:  const unsigned char *buf = b->fbuf;",
          "",
          "[Added Lines]",
          "104:  const unsigned char *buf = CAST(const unsigned char *, b->fbuf);",
          "",
          "---------------"
        ],
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.112 2018/10/01 18:45:39 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.113 2018/10/15 16:29:16 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88: cdf_malloc(const char *file __attribute__((__unused__)),",
          "89:     size_t line __attribute__((__unused__)), size_t n)",
          "90: {",
          "92:  return malloc(n);",
          "93: }",
          "",
          "[Removed Lines]",
          "91:  DPRINTF((\"%s,%zu: %s %zu\\n\", file, line, __func__, n));",
          "",
          "[Added Lines]",
          "91:  DPRINTF((\"%s,%\" SIZE_T_FORMAT \"u: %s %\" SIZE_T_FORMAT \"u\\n\",",
          "92:      file, line, __func__, n));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97: cdf_realloc(const char *file __attribute__((__unused__)),",
          "98:     size_t line __attribute__((__unused__)), void *p, size_t n)",
          "99: {",
          "101:  return realloc(p, n);",
          "102: }",
          "",
          "[Removed Lines]",
          "100:  DPRINTF((\"%s,%zu: %s %zu\\n\", file, line, __func__, n));",
          "",
          "[Added Lines]",
          "101:  DPRINTF((\"%s,%\" SIZE_T_FORMAT \"u: %s %\" SIZE_T_FORMAT \"u\\n\",",
          "102:      file, line, __func__, n));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "106: cdf_calloc(const char *file __attribute__((__unused__)),",
          "107:     size_t line __attribute__((__unused__)), size_t n, size_t u)",
          "108: {",
          "110:  return calloc(n, u);",
          "111: }",
          "",
          "[Removed Lines]",
          "109:  DPRINTF((\"%s,%zu: %s %zu %zu\\n\", file, line, __func__, n, u));",
          "",
          "[Added Lines]",
          "111:  DPRINTF((\"%s,%\" SIZE_T_FORMAT \"u: %s %\" SIZE_T_FORMAT \"u %\"",
          "112:      SIZE_T_FORMAT \"u\\n\", file, line, __func__, n, u));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "484:    if (sec < 0)",
          "485:     goto out;",
          "486:    if (i >= sat->sat_len) {",
          "489:        goto out3;",
          "490:    }",
          "491:    if (cdf_read_sector(info, sat->sat_tab, ss * i, ss, h,",
          "",
          "[Removed Lines]",
          "487:        DPRINTF((\"Out of bounds reading MSA %\" SIZE_T_FORMAT",
          "488:     \"u >= %\" SIZE_T_FORMAT \"u\", i, sat->sat_len));",
          "",
          "[Added Lines]",
          "490:        DPRINTF((\"Out of bounds reading MSA %\"",
          "491:     SIZE_T_FORMAT \"u >= %\" SIZE_T_FORMAT \"u\",",
          "492:     i, sat->sat_len));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "894:  size_t newcount = *maxcount + incr;",
          "896:  if (newcount > CDF_PROP_LIMIT) {",
          "899:   goto out;",
          "900:  }",
          "901:  inp = CAST(cdf_property_info_t *,",
          "",
          "[Removed Lines]",
          "897:   DPRINTF((\"exceeded property limit %zu > %zu\\n\",",
          "898:       newcount, CDF_PROP_LIMIT));",
          "",
          "[Added Lines]",
          "901:   DPRINTF((\"exceeded property limit %\" SIZE_T_FORMAT \"u > %\"",
          "902:       SIZE_T_FORMAT \"u\\n\", newcount, CDF_PROP_LIMIT));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1063:     inp[i].pi_str.s_buf = CAST(const char *,",
          "1064:         CAST(const void *, &q[o4]));",
          "1071:     if (l & 1)",
          "1072:      l++;",
          "",
          "[Removed Lines]",
          "1066:     DPRINTF((\"o=%zu l=%d(%\" SIZE_T_FORMAT",
          "1067:         \"u), t=%zu s=%s\\n\", o4, l,",
          "1068:         CDF_ROUND(l, sizeof(l)), left,",
          "1069:         inp[i].pi_str.s_buf));",
          "",
          "[Added Lines]",
          "1070:     DPRINTF((\"o=%\" SIZE_T_FORMAT \"u l=%d(%\"",
          "1071:         SIZE_T_FORMAT \"u), t=%\" SIZE_T_FORMAT",
          "1072:         \"u s=%s\\n\", o4, l, CDF_ROUND(l, sizeof(l)),",
          "1073:         left, inp[i].pi_str.s_buf));",
          "",
          "---------------"
        ],
        "src/compress.c||src/compress.c": [
          "File: src/compress.c -> src/compress.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: compress.c,v 1.112 2018/10/01 18:43:01 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: compress.c,v 1.113 2018/10/15 16:29:16 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149:  const void *magic;",
          "150:  size_t maglen;",
          "151:  const char **argv;",
          "153: } compr[] = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152:  void *unused;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "224:  int urv, prv, rv = 0;",
          "225:  int mime = ms->flags & MAGIC_MIME;",
          "226:  int fd = b->fd;",
          "228:  size_t nbytes = b->flen;",
          "229:  sig_t osigpipe;",
          "",
          "[Removed Lines]",
          "227:  const unsigned char *buf = b->fbuf;",
          "",
          "[Added Lines]",
          "227:  const unsigned char *buf = CAST(const unsigned char *, b->fbuf);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "248:    continue;",
          "249:   nsz = nbytes;",
          "250:   urv = uncompressbuf(fd, ms->bytes_max, i, buf, &newbuf, &nsz);",
          "253:   switch (urv) {",
          "254:   case OKDATA:",
          "255:   case ERRDATA:",
          "",
          "[Removed Lines]",
          "251:   DPRINTF(\"uncompressbuf = %d, %s, %zu\\n\", urv, (char *)newbuf,",
          "252:       nsz);",
          "",
          "[Added Lines]",
          "251:   DPRINTF(\"uncompressbuf = %d, %s, %\" SIZE_T_FORMAT \"u\\n\", urv,",
          "252:       (char *)newbuf, nsz);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "785:  }",
          "787:  closefd(fdp[STDIN_FILENO], 0);",
          "790:  return rv;",
          "791: }",
          "",
          "[Removed Lines]",
          "788:  DPRINTF(\"Returning %p n=%zu rv=%d\\n\", *newch, *n, rv);",
          "",
          "[Added Lines]",
          "788:  DPRINTF(\"Returning %p n=%\" SIZE_T_FORMAT \"u rv=%d\\n\", *newch, *n, rv);",
          "",
          "---------------"
        ],
        "src/der.c||src/der.c": [
          "File: src/der.c -> src/der.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "40: #endif",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: der.c,v 1.14 2018/09/09 20:33:28 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: der.c,v 1.15 2018/10/15 16:29:16 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "246:  if (gettag(b, &offs, len) == DER_BAD)",
          "247:   return -1;",
          "250:  uint32_t tlen = getlength(b, &offs, len);",
          "251:  if (tlen == DER_BAD)",
          "252:   return -1;",
          "255:  offs += ms->offset + m->offset;",
          "256:  DPRINTF((\"cont_level = %d\\n\", m->cont_level));",
          "257: #ifdef DEBUG_DER",
          "258:  for (size_t i = 0; i < m->cont_level; i++)",
          "260: #endif",
          "261:  if (m->cont_level != 0) {",
          "262:   if (offs + tlen > nbytes)",
          "",
          "[Removed Lines]",
          "248:  DPRINTF((\"%s1: %d %zu %u\\n\", __func__, ms->offset, offs, m->offset));",
          "253:  DPRINTF((\"%s2: %d %zu %u\\n\", __func__, ms->offset, offs, tlen));",
          "259:   printf(\"cont_level[%zu] = %u\\n\", i, ms->c.li[i].off);",
          "",
          "[Added Lines]",
          "248:  DPRINTF((\"%s1: %d %\" SIZE_T_FORMAT \"u %u\\n\", __func__, ms->offset,",
          "249:      offs, m->offset));",
          "254:  DPRINTF((\"%s2: %d %\" SIZE_T_FORMAT \"u %u\\n\", __func__, ms->offset,",
          "255:      offs, tlen));",
          "261:   printf(\"cont_level[%\" SIZE_T_FORMAT \"u] = %u\\n\", i,",
          "262:       ms->c.li[i].off);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "312:    slen = slen * 10 + *s - '0';",
          "313:   while (isdigit((unsigned char)*++s));",
          "314:   if ((ms->flags & MAGIC_DEBUG) != 0)",
          "317:   if (tlen != slen)",
          "318:    return 0;",
          "319:   goto again;",
          "320:  }",
          "321: val:",
          "323:  der_data(buf, sizeof(buf), tag, b + offs, tlen);",
          "324:  if ((ms->flags & MAGIC_DEBUG) != 0)",
          "325:   fprintf(stderr, \"%s: data %s %s\\n\", __func__, buf, s);",
          "",
          "[Removed Lines]",
          "315:    fprintf(stderr, \"%s: len %zu %u\\n\", __func__,",
          "316:        slen, tlen);",
          "322:  DPRINTF((\"%s: before data %zu %u\\n\", __func__, offs, tlen));",
          "",
          "[Added Lines]",
          "318:    fprintf(stderr, \"%s: len %\" SIZE_T_FORMAT \"u %u\\n\",",
          "319:        __func__, slen, tlen);",
          "325:  DPRINTF((\"%s: before data %\" SIZE_T_FORMAT \"u %u\\n\", __func__, offs,",
          "326:      tlen));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "368:    break;",
          "369:   uint32_t len = getlength(p, &x, ep - p + x);",
          "372:       der_class[c], der_type[t],",
          "373:       der_tag(buf, sizeof(buf), tag), len);",
          "374:   q = p + x;",
          "",
          "[Removed Lines]",
          "371:   printf(\"%zu %zu-%zu %c,%c,%s,%u:\", level, ox, x,",
          "",
          "[Added Lines]",
          "375:   printf(\"%\" SIZE_T_FORMAT \"u %\" SIZE_T_FORMAT \"u-%\"",
          "376:       SIZE_T_FORMAT \"u %c,%c,%s,%u:\", level, ox, x,",
          "",
          "---------------"
        ],
        "src/encoding.c||src/encoding.c": [
          "File: src/encoding.c -> src/encoding.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "41: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: encoding.c,v 1.14 2017/11/02 20:25:39 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: encoding.c,v 1.15 2018/10/15 16:29:16 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69: file_encoding(struct magic_set *ms, const struct buffer *b, unichar **ubuf,",
          "70:     size_t *ulen, const char **code, const char **code_mime, const char **type)",
          "71: {",
          "73:  size_t nbytes = b->flen;",
          "74:  size_t mlen;",
          "75:  int rv = 1, ucs_type;",
          "",
          "[Removed Lines]",
          "72:  const unsigned char *buf = b->fbuf;",
          "",
          "[Added Lines]",
          "72:  const unsigned char *buf = CAST(const unsigned char *, b->fbuf);",
          "",
          "---------------"
        ],
        "src/file.h||src/file.h": [
          "File: src/file.h -> src/file.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: #ifndef __STDC_LIMIT_MACROS",
          "41: #define __STDC_LIMIT_MACROS",
          "42: #endif",
          "44: #ifdef WIN32",
          "45:   #ifdef _WIN64",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: #ifndef __STDC_FORMAT_MACROS",
          "44: #define __STDC_FORMAT_MACROS",
          "45: #endif",
          "",
          "---------------"
        ],
        "src/is_json.c||src/is_json.c": [
          "File: src/is_json.c -> src/is_json.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "36: #endif",
          "38: #include <string.h>",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: is_json.c,v 1.10 2018/09/09 20:33:28 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: is_json.c,v 1.11 2018/10/15 16:29:16 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "381: int",
          "382: file_is_json(struct magic_set *ms, const struct buffer *b)",
          "383: {",
          "385:  const unsigned char *ue = uc + b->flen;",
          "386:  size_t st[JSON_MAX];",
          "387:  int mime = ms->flags & MAGIC_MIME;",
          "",
          "[Removed Lines]",
          "384:  const unsigned char *uc = b->fbuf;",
          "",
          "[Added Lines]",
          "384:  const unsigned char *uc = CAST(const unsigned char *, b->fbuf);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "406:   return -1;",
          "407: #if JSON_COUNT",
          "408: #define P(n) st[n], st[n] > 1 ? \"s\" : \"\"",
          "412:   return -1;",
          "413: #endif",
          "414:  return 1;",
          "",
          "[Removed Lines]",
          "409:  if (file_printf(ms, \" (%zu object%s, %zu array%s, %zu string%s, \"",
          "410:      \"%zu constant%s, %zu number%s)\", P(JSON_OBJECT), P(JSON_ARRAY),",
          "411:      P(JSON_STRING), P(JSON_CONSTANT), P(JSON_NUMBER)) == -1)",
          "",
          "[Added Lines]",
          "409:  if (file_printf(ms, \" (%\" SIZE_T_FORMAT \"u object%s, %\" SIZE_T_FORMAT",
          "410:      \"u array%s, %\" SIZE_T_FORMAT \"u string%s, %\" SIZE_T_FORMAT",
          "411:      \"u constant%s, %\" SIZE_T_FORMAT \"u number%s)\", P(JSON_OBJECT),",
          "412:      P(JSON_ARRAY), P(JSON_STRING), P(JSON_CONSTANT), P(JSON_NUMBER))",
          "413:      == -1)",
          "",
          "---------------"
        ],
        "src/is_tar.c||src/is_tar.c": [
          "File: src/is_tar.c -> src/is_tar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: #include \"file.h\"",
          "42: #ifndef lint",
          "44: #endif",
          "46: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "43: FILE_RCSID(\"@(#)$File: is_tar.c,v 1.42 2018/08/01 08:50:20 christos Exp $\")",
          "",
          "[Added Lines]",
          "43: FILE_RCSID(\"@(#)$File: is_tar.c,v 1.43 2018/10/15 16:29:16 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62: protected int",
          "63: file_is_tar(struct magic_set *ms, const struct buffer *b)",
          "64: {",
          "66:  size_t nbytes = b->flen;",
          "",
          "[Removed Lines]",
          "65:  const unsigned char *buf = b->fbuf;",
          "",
          "[Added Lines]",
          "65:  const unsigned char *buf = CAST(const unsigned char *, b->fbuf);",
          "",
          "---------------"
        ],
        "src/readcdf.c||src/readcdf.c": [
          "File: src/readcdf.c -> src/readcdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"file.h\"",
          "28: #ifndef lint",
          "30: #endif",
          "32: #include <assert.h>",
          "",
          "[Removed Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.70 2018/09/09 20:33:28 christos Exp $\")",
          "",
          "[Added Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.71 2018/10/15 16:29:16 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "540: file_trycdf(struct magic_set *ms, const struct buffer *b)",
          "541: {",
          "542:  int fd = b->fd;",
          "544:  size_t nbytes = b->flen;",
          "545:  cdf_info_t info;",
          "546:  cdf_header_t h;",
          "",
          "[Removed Lines]",
          "543:  const unsigned char *buf = b->fbuf;",
          "",
          "[Added Lines]",
          "543:  const unsigned char *buf = CAST(const unsigned char *, b->fbuf);",
          "",
          "---------------"
        ],
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.153 2018/09/11 00:37:33 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.154 2018/10/15 16:29:16 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "757:    if (file_printf(ms, \", from '%.31s', pid=%u, uid=%u, \"",
          "758:        \"gid=%u, nlwps=%u, lwp=%u (signal %u/code %u)\",",
          "759:        file_printable(sbuf, sizeof(sbuf),",
          "761:        elf_getu32(swap, (uint32_t)pi.cpi_pid),",
          "762:        elf_getu32(swap, pi.cpi_euid),",
          "763:        elf_getu32(swap, pi.cpi_egid),",
          "",
          "[Removed Lines]",
          "760:        CAST(char *, pi.cpi_name)),",
          "",
          "[Added Lines]",
          "760:        RCAST(char *, pi.cpi_name)),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1203:    return offset;",
          "1204:  }",
          "1207:   int descw, flag;",
          "1208:   const char *str, *tag;",
          "1209:   if (descsz > 100)",
          "",
          "[Removed Lines]",
          "1206:  if (namesz == 7 && strcmp(CAST(char *, &nbuf[noff]), \"NetBSD\") == 0) {",
          "",
          "[Added Lines]",
          "1206:  if (namesz == 7 && strcmp(RCAST(char *, &nbuf[noff]), \"NetBSD\") == 0) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1235:   if (*flags & flag)",
          "1236:    return offset;",
          "1238:   descw = CAST(int, descsz);",
          "1240:   file_printf(ms, \", %s: %.*s\", tag, descw, str);",
          "",
          "[Removed Lines]",
          "1237:   str = CAST(const char *, &nbuf[doff]);",
          "",
          "[Added Lines]",
          "1237:   str = RCAST(const char *, &nbuf[doff]);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1707: file_tryelf(struct magic_set *ms, const struct buffer *b)",
          "1708: {",
          "1709:  int fd = b->fd;",
          "1711:  size_t nbytes = b->flen;",
          "1712:  union {",
          "1713:   int32_t l;",
          "",
          "[Removed Lines]",
          "1710:  const unsigned char *buf = b->fbuf;",
          "",
          "[Added Lines]",
          "1710:  const unsigned char *buf = CAST(const unsigned char *, b->fbuf);",
          "",
          "---------------"
        ],
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.270 2018/09/09 20:33:28 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.271 2018/10/15 16:29:16 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "206:   ms->line = m->lineno;",
          "210:       mode, text, flip, indir_count, name_count,",
          "211:       printed_something, need_separator, returnval)) {",
          "212:   case -1:",
          "",
          "[Removed Lines]",
          "209:   switch (mget(ms, m, b, bb.fbuf, bb.flen, offset, cont_level,",
          "",
          "[Added Lines]",
          "209:   switch (mget(ms, m, b, CAST(const unsigned char *, bb.fbuf),",
          "210:       bb.flen, offset, cont_level,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "299:      continue;",
          "300:    }",
          "301: #endif",
          "303:        cont_level, mode, text, flip, indir_count,",
          "304:        name_count, printed_something, need_separator,",
          "305:        returnval)) {",
          "",
          "[Removed Lines]",
          "302:    switch (mget(ms, m, b, bb.fbuf, bb.flen, offset,",
          "",
          "[Added Lines]",
          "303:    switch (mget(ms, m, b, CAST(const unsigned char *,",
          "304:        bb.fbuf), bb.flen, offset,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "897:    if (o == -1 || (size_t)o > nbytes) {",
          "898:     if ((ms->flags & MAGIC_DEBUG) != 0) {",
          "899:      (void)fprintf(stderr,",
          "902:     }",
          "904:     return 0;",
          "",
          "[Removed Lines]",
          "900:          \"Bad DER offset %d nbytes=%zu\",",
          "901:          o, nbytes);",
          "",
          "[Added Lines]",
          "902:          \"Bad DER offset %d nbytes=%\"",
          "903:          SIZE_T_FORMAT \"u\", o, nbytes);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "914:  if ((size_t)o > nbytes) {",
          "915: #if 0",
          "918: #endif",
          "919:   return -1;",
          "920:  }",
          "",
          "[Removed Lines]",
          "916:   file_error(ms, 0, \"Offset out of range %zu > %zu\",",
          "917:       (size_t)o, nbytes);",
          "",
          "[Added Lines]",
          "918:   file_error(ms, 0, \"Offset out of range %\" SIZE_T_FORMAT",
          "919:       \"u > %\" SIZE_T_FORMAT \"u\", (size_t)o, nbytes);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1426:    return -1;",
          "1427:   if (o != 0) {",
          "1431:    return -1;",
          "1432:   }",
          "1433:   if ((size_t)-m->offset > b->elen)",
          "",
          "[Removed Lines]",
          "1429:    file_magerror(ms, \"non zero offset %zu at\"",
          "1430:        \" level %u\", o, cont_level);",
          "",
          "[Added Lines]",
          "1431:    file_magerror(ms, \"non zero offset %\" SIZE_T_FORMAT",
          "1432:        \"u at level %u\", o, cont_level);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1446:   }",
          "1447:  }",
          "1448:  if ((ms->flags & MAGIC_DEBUG) != 0) {",
          "1450:       bb->fbuf, bb->flen, ms->offset, b->fbuf, b->flen,",
          "1451:       m->offset, cont_level);",
          "1452:  }",
          "",
          "[Removed Lines]",
          "1449:   fprintf(stderr, \"bb=[%p,%zu], %d [b=%p,%zu], [o=%#x, c=%d]\\n\",",
          "",
          "[Added Lines]",
          "1451:   fprintf(stderr, \"bb=[%p,%\" SIZE_T_FORMAT \"u], %d [b=%p,%\"",
          "1452:       SIZE_T_FORMAT \"u], [o=%#x, c=%d]\\n\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "833f6f4ca8570a47bb00cdadadc1f5704e2001d0",
      "candidate_info": {
        "commit_hash": "833f6f4ca8570a47bb00cdadadc1f5704e2001d0",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/833f6f4ca8570a47bb00cdadadc1f5704e2001d0",
        "files": [
          "src/readelf.c"
        ],
        "message": "CID 337782: Consistently return -1 if file_printf() fails.",
        "before_after_code_files": [
          "src/readelf.c||src/readelf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.163 2019/03/12 20:43:05 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.164 2019/04/15 16:49:53 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "410: }",
          "411: #endif",
          "414: do_note_netbsd_version(struct magic_set *ms, int swap, void *v)",
          "415: {",
          "416:  uint32_t desc;",
          "",
          "[Removed Lines]",
          "413: static void",
          "",
          "[Added Lines]",
          "413: static int",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "418:  desc = elf_getu32(swap, desc);",
          "420:  if (file_printf(ms, \", for NetBSD\") == -1)",
          "",
          "[Removed Lines]",
          "421:   return;",
          "",
          "[Added Lines]",
          "421:   return -1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "438:   uint32_t ver_maj = desc / 100000000;",
          "440:   if (file_printf(ms, \" %u.%u\", ver_maj, ver_min) == -1)",
          "442:   if (ver_rel == 0 && ver_patch != 0) {",
          "443:    if (file_printf(ms, \".%u\", ver_patch) == -1)",
          "445:   } else if (ver_rel != 0) {",
          "446:    while (ver_rel > 26) {",
          "447:     if (file_printf(ms, \"Z\") == -1)",
          "449:     ver_rel -= 26;",
          "450:    }",
          "451:    if (file_printf(ms, \"%c\", 'A' + ver_rel - 1)",
          "452:        == -1)",
          "454:   }",
          "455:  }",
          "456: }",
          "459: do_note_freebsd_version(struct magic_set *ms, int swap, void *v)",
          "460: {",
          "461:  uint32_t desc;",
          "",
          "[Removed Lines]",
          "441:    return;",
          "444:     return;",
          "448:      return;",
          "453:     return;",
          "458: static void",
          "",
          "[Added Lines]",
          "441:    return -1;",
          "444:     return -1;",
          "448:      return -1;",
          "453:     return -1;",
          "456:  return 0;",
          "459: static int",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "463:  memcpy(&desc, v, sizeof(desc));",
          "464:  desc = elf_getu32(swap, desc);",
          "465:  if (file_printf(ms, \", for FreeBSD\") == -1)",
          "",
          "[Removed Lines]",
          "466:   return;",
          "",
          "[Added Lines]",
          "467:   return -1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "494:  if (desc == 460002) {",
          "495:   if (file_printf(ms, \" 4.6.2\") == -1)",
          "497:  } else if (desc < 460100) {",
          "498:   if (file_printf(ms, \" %d.%d\", desc / 100000,",
          "499:       desc / 10000 % 10) == -1)",
          "501:   if (desc / 1000 % 10 > 0)",
          "502:    if (file_printf(ms, \".%d\", desc / 1000 % 10) == -1)",
          "504:   if ((desc % 1000 > 0) || (desc % 100000 == 0))",
          "505:    if (file_printf(ms, \" (%d)\", desc) == -1)",
          "507:  } else if (desc < 500000) {",
          "508:   if (file_printf(ms, \" %d.%d\", desc / 100000,",
          "509:       desc / 10000 % 10 + desc / 1000 % 10) == -1)",
          "511:   if (desc / 100 % 10 > 0) {",
          "512:    if (file_printf(ms, \" (%d)\", desc) == -1)",
          "514:   } else if (desc / 10 % 10 > 0) {",
          "515:    if (file_printf(ms, \".%d\", desc / 10 % 10) == -1)",
          "517:   }",
          "518:  } else {",
          "519:   if (file_printf(ms, \" %d.%d\", desc / 100000,",
          "520:       desc / 1000 % 100) == -1)",
          "522:   if ((desc / 100 % 10 > 0) ||",
          "523:       (desc % 100000 / 100 == 0)) {",
          "524:    if (file_printf(ms, \" (%d)\", desc) == -1)",
          "526:   } else if (desc / 10 % 10 > 0) {",
          "527:    if (file_printf(ms, \".%d\", desc / 10 % 10) == -1)",
          "529:   }",
          "530:  }",
          "531: }",
          "533: private int",
          "",
          "[Removed Lines]",
          "496:    return;",
          "500:    return;",
          "503:     return;",
          "506:     return;",
          "510:    return;",
          "513:     return;",
          "516:     return;",
          "521:    return;",
          "525:     return;",
          "528:     return;",
          "",
          "[Added Lines]",
          "497:    return -1;",
          "501:    return -1;",
          "504:     return -1;",
          "507:     return -1;",
          "511:    return -1;",
          "514:     return -1;",
          "517:     return -1;",
          "522:    return -1;",
          "526:     return -1;",
          "529:     return -1;",
          "532:  return 0;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "557:       break;",
          "558:   }",
          "559:   if (file_printf(ms, \", BuildID[%s]=\", btype) == -1)",
          "561:   memcpy(desc, &nbuf[doff], descsz);",
          "562:   for (i = 0; i < descsz; i++)",
          "563:       if (file_printf(ms, \"%02x\", desc[i]) == -1)",
          "565:   return 1;",
          "566:  }",
          "567:  if (namesz == 4 && strcmp(RCAST(char *, &nbuf[noff]), \"Go\") == 0 &&",
          "",
          "[Removed Lines]",
          "560:    return 1;",
          "564:    return 1;",
          "",
          "[Added Lines]",
          "562:    return -1;",
          "566:    return -1;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "599:   if (file_printf(ms, \", for GNU/\") == -1)",
          "601:   switch (elf_getu32(swap, desc[0])) {",
          "602:   case GNU_OS_LINUX:",
          "603:    if (file_printf(ms, \"Linux\") == -1)",
          "605:    break;",
          "606:   case GNU_OS_HURD:",
          "607:    if (file_printf(ms, \"Hurd\") == -1)",
          "609:    break;",
          "610:   case GNU_OS_SOLARIS:",
          "611:    if (file_printf(ms, \"Solaris\") == -1)",
          "613:    break;",
          "614:   case GNU_OS_KFREEBSD:",
          "615:    if (file_printf(ms, \"kFreeBSD\") == -1)",
          "617:    break;",
          "618:   case GNU_OS_KNETBSD:",
          "619:    if (file_printf(ms, \"kNetBSD\") == -1)",
          "621:    break;",
          "622:   default:",
          "623:    if (file_printf(ms, \"<unknown>\") == -1)",
          "625:   }",
          "626:   if (file_printf(ms, \" %d.%d.%d\", elf_getu32(swap, desc[1]),",
          "627:       elf_getu32(swap, desc[2]), elf_getu32(swap, desc[3])) == -1)",
          "629:   return 1;",
          "630:  }",
          "632:  if (namesz == 7 && strcmp(name, \"NetBSD\") == 0) {",
          "633:       if (type == NT_NETBSD_VERSION && descsz == 4) {",
          "636:    return 1;",
          "637:   }",
          "638:  }",
          "",
          "[Removed Lines]",
          "600:    return 1;",
          "604:     return 1;",
          "608:     return 1;",
          "612:     return 1;",
          "616:     return 1;",
          "620:     return 1;",
          "624:     return 1;",
          "628:    return 1;",
          "635:    do_note_netbsd_version(ms, swap, &nbuf[doff]);",
          "",
          "[Added Lines]",
          "602:    return -1;",
          "606:     return -1;",
          "610:     return -1;",
          "614:     return -1;",
          "618:     return -1;",
          "622:     return -1;",
          "626:     return -1;",
          "630:    return -1;",
          "637:    if (do_note_netbsd_version(ms, swap, &nbuf[doff]) == -1)",
          "638:     return -1;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "640:  if (namesz == 8 && strcmp(name, \"FreeBSD\") == 0) {",
          "641:       if (type == NT_FREEBSD_VERSION && descsz == 4) {",
          "644:    return 1;",
          "645:   }",
          "646:  }",
          "",
          "[Removed Lines]",
          "643:    do_note_freebsd_version(ms, swap, &nbuf[doff]);",
          "",
          "[Added Lines]",
          "646:    if (do_note_freebsd_version(ms, swap, &nbuf[doff])",
          "647:        == -1)",
          "648:     return -1;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "649:      type == NT_OPENBSD_VERSION && descsz == 4) {",
          "651:   if (file_printf(ms, \", for OpenBSD\") == -1)",
          "654:   return 1;",
          "655:  }",
          "",
          "[Removed Lines]",
          "652:    return 1;",
          "",
          "[Added Lines]",
          "657:    return -1;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "659:   uint32_t desc;",
          "661:   if (file_printf(ms, \", for DragonFly\") == -1)",
          "663:   memcpy(&desc, &nbuf[doff], sizeof(desc));",
          "664:   desc = elf_getu32(swap, desc);",
          "665:   if (file_printf(ms, \" %d.%d.%d\", desc / 100000,",
          "666:       desc / 10000 % 10, desc % 10000) == -1)",
          "668:   return 1;",
          "669:  }",
          "670:  return 0;",
          "",
          "[Removed Lines]",
          "662:    return 1;",
          "667:    return 1;",
          "",
          "[Added Lines]",
          "667:    return -1;",
          "672:    return -1;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "696:   desc = elf_getu32(swap, desc);",
          "698:   if (desc && file_printf(ms, \", PaX: \") == -1)",
          "701:   for (i = 0; i < __arraycount(pax); i++) {",
          "702:    if (((1 << CAST(int, i)) & desc) == 0)",
          "703:     continue;",
          "704:    if (file_printf(ms, \"%s%s\", did++ ? \",\" : \"\",",
          "705:        pax[i]) == -1)",
          "707:   }",
          "708:   return 1;",
          "709:  }",
          "",
          "[Removed Lines]",
          "699:    return 1;",
          "706:     return 1;",
          "",
          "[Added Lines]",
          "704:    return -1;",
          "711:     return -1;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "750:  if (os_style != -1 && (*flags & FLAGS_DID_CORE_STYLE) == 0) {",
          "751:   if (file_printf(ms, \", %s-style\", os_style_names[os_style])",
          "752:       == -1)",
          "756:  }",
          "",
          "[Removed Lines]",
          "753:    return 1;",
          "",
          "[Added Lines]",
          "758:    return -1;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "774:        elf_getu32(swap, CAST(uint32_t, pi.cpi_siglwp)),",
          "775:        elf_getu32(swap, pi.cpi_signo),",
          "776:        elf_getu32(swap, pi.cpi_sigcode)) == -1)",
          "780:    return 1;",
          "",
          "[Removed Lines]",
          "777:     return 1;",
          "",
          "[Added Lines]",
          "782:     return -1;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "791:     argoff = 4 + 4 + 8 + 17;",
          "792:    if (file_printf(ms, \", from '%.80s'\", nbuf + doff +",
          "793:        argoff) == -1)",
          "795:    pidoff = argoff + 81 + 2;",
          "796:    if (doff + pidoff + 4 <= size) {",
          "797:     if (file_printf(ms, \", pid=%u\",",
          "798:         elf_getu32(swap, *RCAST(uint32_t *, (nbuf +",
          "799:         doff + pidoff)))) == -1)",
          "801:    }",
          "803:   }",
          "",
          "[Removed Lines]",
          "794:     return 1;",
          "800:      return 1;",
          "",
          "[Added Lines]",
          "799:     return -1;",
          "805:      return -1;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "898:      cp--;",
          "899:     if (file_printf(ms, \", from '%.*s'\",",
          "900:         CAST(int, cp - cname), cname) == -1)",
          "903:     return 1;",
          "",
          "[Removed Lines]",
          "901:      return 1;",
          "",
          "[Added Lines]",
          "906:      return -1;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1069:     continue;",
          "1071:    if (file_printf(ms, \", %s: '%s'\", tag, buf) == -1)",
          "1073:   } else {",
          "1074:    if (file_printf(ms, \", %s: %d\", tag,",
          "1075:        CAST(int, xauxv_val)) == -1)",
          "1077:   }",
          "1078:  }",
          "1079:  return 1;",
          "",
          "[Removed Lines]",
          "1072:     return 0;",
          "1076:     return 0;",
          "",
          "[Added Lines]",
          "1077:     return -1;",
          "1081:     return -1;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1152:  if (namesz & 0x80000000) {",
          "1153:   if (file_printf(ms, \", bad note name size %#lx\",",
          "1154:       CAST(unsigned long, namesz)) == -1)",
          "1156:      return 0;",
          "1157:  }",
          "1159:  if (descsz & 0x80000000) {",
          "1160:   if (file_printf(ms, \", bad note description size %#lx\",",
          "1161:       CAST(unsigned long, descsz)) == -1)",
          "1163:      return 0;",
          "1164:  }",
          "",
          "[Removed Lines]",
          "1155:    return 0;",
          "1162:        return 0;",
          "",
          "[Added Lines]",
          "1160:    return -1;",
          "1167:        return -1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a642587a9c9e2dd7feacdf513c3643ce26ad3c22",
      "candidate_info": {
        "commit_hash": "a642587a9c9e2dd7feacdf513c3643ce26ad3c22",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/a642587a9c9e2dd7feacdf513c3643ce26ad3c22",
        "files": [
          "src/readelf.c"
        ],
        "message": "Avoid reading past the end of buffer (Rui Reis)",
        "before_after_code_files": [
          "src/readelf.c||src/readelf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.142 2018/05/24 18:08:01 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.143 2018/06/09 16:00:06 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "843:     cname = (unsigned char *)",
          "844:         &nbuf[doff + prpsoffsets(i)];",
          "846:      continue;",
          "",
          "[Removed Lines]",
          "845:     for (cp = cname; *cp && isprint(*cp); cp++)",
          "",
          "[Added Lines]",
          "845:     for (cp = cname; cp < nbuf + size && *cp",
          "846:         && isprint(*cp); cp++)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9109a696f3289ba00eaa222fd432755ec4287e28",
      "candidate_info": {
        "commit_hash": "9109a696f3289ba00eaa222fd432755ec4287e28",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/9109a696f3289ba00eaa222fd432755ec4287e28",
        "files": [
          "src/readelf.c",
          "src/readelf.h"
        ],
        "message": "- add parsing for dynamic sections - set or clear the mode execute bits depending on DF_1_PIE - fix some casts",
        "before_after_code_files": [
          "src/readelf.c||src/readelf.c",
          "src/readelf.h||src/readelf.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.141 2018/04/12 16:50:52 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.142 2018/05/24 18:08:01 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63: #define MAX_PHNUM 128",
          "64: #define MAX_SHNUM 32768",
          "67: private int",
          "68: toomany(struct magic_set *ms, const char *name, uint16_t num)",
          "69: {",
          "72:   return -1;",
          "73:  return 0;",
          "74: }",
          "",
          "[Removed Lines]",
          "65: #define SIZE_UNKNOWN ((off_t)-1)",
          "70:  if (file_printf(ms, \", too many %s (%u)\", name, num",
          "71:      ) == -1)",
          "",
          "[Added Lines]",
          "65: #define SIZE_UNKNOWN CAST(off_t, -1)",
          "70:  if (file_printf(ms, \", too many %s (%u)\", name, num) == -1)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "143: #define elf_getu64(swap, value) getu64(swap, value)",
          "145: #define xsh_addr (clazz == ELFCLASS32   \\",
          "148: #define xsh_sizeof (clazz == ELFCLASS32   \\",
          "149:     ? sizeof(sh32)    \\",
          "150:     : sizeof(sh64))",
          "152:     ? elf_getu32(swap, sh32.sh_size) \\",
          "155:     ? elf_getu32(swap, sh32.sh_offset) \\",
          "157: #define xsh_type (clazz == ELFCLASS32   \\",
          "158:     ? elf_getu32(swap, sh32.sh_type) \\",
          "159:     : elf_getu32(swap, sh64.sh_type))",
          "160: #define xsh_name     (clazz == ELFCLASS32   \\",
          "161:     ? elf_getu32(swap, sh32.sh_name) \\",
          "162:     : elf_getu32(swap, sh64.sh_name))",
          "163: #define xph_addr (clazz == ELFCLASS32   \\",
          "166: #define xph_sizeof (clazz == ELFCLASS32   \\",
          "167:     ? sizeof(ph32)    \\",
          "168:     : sizeof(ph64))",
          "169: #define xph_type (clazz == ELFCLASS32   \\",
          "170:     ? elf_getu32(swap, ph32.p_type) \\",
          "171:     : elf_getu32(swap, ph64.p_type))",
          "173:     ? elf_getu32(swap, ph32.p_offset) \\",
          "186:     ? elf_getu32(swap, ph32.p_filesz) \\",
          "187:     : elf_getu64(swap, ph64.p_filesz)))",
          "192:     ? elf_getu32(swap, ph32.p_memsz) \\",
          "194: #define xnh_sizeof (clazz == ELFCLASS32   \\",
          "195:     ? sizeof(nh32)    \\",
          "196:     : sizeof(nh64))",
          "",
          "[Removed Lines]",
          "146:     ? (void *)&sh32   \\",
          "147:     : (void *)&sh64)",
          "151: #define xsh_size (size_t)(clazz == ELFCLASS32  \\",
          "153:     : elf_getu64(swap, sh64.sh_size))",
          "154: #define xsh_offset (off_t)(clazz == ELFCLASS32  \\",
          "156:     : elf_getu64(swap, sh64.sh_offset))",
          "164:     ? (void *) &ph32   \\",
          "165:     : (void *) &ph64)",
          "172: #define xph_offset (off_t)(clazz == ELFCLASS32  \\",
          "174:     : elf_getu64(swap, ph64.p_offset))",
          "175: #define xph_align (size_t)((clazz == ELFCLASS32  \\",
          "176:     ? (off_t) (ph32.p_align ?   \\",
          "177:        elf_getu32(swap, ph32.p_align) : 4) \\",
          "178:     : (off_t) (ph64.p_align ?  \\",
          "179:        elf_getu64(swap, ph64.p_align) : 4)))",
          "180: #define xph_vaddr (size_t)((clazz == ELFCLASS32  \\",
          "181:     ? (off_t) (ph32.p_vaddr ?   \\",
          "182:        elf_getu32(swap, ph32.p_vaddr) : 4) \\",
          "183:     : (off_t) (ph64.p_vaddr ?  \\",
          "184:        elf_getu64(swap, ph64.p_vaddr) : 4)))",
          "185: #define xph_filesz (size_t)((clazz == ELFCLASS32  \\",
          "188: #define xnh_addr (clazz == ELFCLASS32   \\",
          "189:     ? (void *)&nh32   \\",
          "190:     : (void *)&nh64)",
          "191: #define xph_memsz (size_t)((clazz == ELFCLASS32  \\",
          "193:     : elf_getu64(swap, ph64.p_memsz)))",
          "",
          "[Added Lines]",
          "145:     ? CAST(void *, &sh32)   \\",
          "146:     : CAST(void *, &sh64))",
          "150: #define xsh_size CAST(size_t, (clazz == ELFCLASS32 \\",
          "152:     : elf_getu64(swap, sh64.sh_size)))",
          "153: #define xsh_offset CAST(off_t, (clazz == ELFCLASS32 \\",
          "155:     : elf_getu64(swap, sh64.sh_offset)))",
          "164:     ? CAST(void *, &ph32)   \\",
          "165:     : CAST(void *, &ph64))",
          "172: #define xph_offset CAST(off_t, (clazz == ELFCLASS32 \\",
          "174:     : elf_getu64(swap, ph64.p_offset)))",
          "175: #define xph_align CAST(size_t, (clazz == ELFCLASS32 \\",
          "176:     ? CAST(off_t, (ph32.p_align ?   \\",
          "177:        elf_getu32(swap, ph32.p_align) : 4))\\",
          "178:     : CAST(off_t, (ph64.p_align ?  \\",
          "179:        elf_getu64(swap, ph64.p_align) : 4))))",
          "180: #define xph_vaddr CAST(size_t, (clazz == ELFCLASS32 \\",
          "181:     ? CAST(off_t, (ph32.p_vaddr ?   \\",
          "182:        elf_getu32(swap, ph32.p_vaddr) : 4))\\",
          "183:     : CAST(off_t, (ph64.p_vaddr ?  \\",
          "184:        elf_getu64(swap, ph64.p_vaddr) : 4))))",
          "185: #define xph_filesz CAST(size_t, (clazz == ELFCLASS32 \\",
          "188: #define xph_memsz CAST(size_t, ((clazz == ELFCLASS32 \\",
          "190:     : elf_getu64(swap, ph64.p_memsz))))",
          "191: #define xnh_addr (clazz == ELFCLASS32   \\",
          "192:     ? CAST(void *, &nh32)   \\",
          "193:     : CAST(void *, &nh64))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "203: #define xnh_descsz (clazz == ELFCLASS32   \\",
          "204:     ? elf_getu32(swap, nh32.n_descsz) \\",
          "205:     : elf_getu32(swap, nh64.n_descsz))",
          "209: #define xcap_addr (clazz == ELFCLASS32   \\",
          "212: #define xcap_sizeof (clazz == ELFCLASS32   \\",
          "215: #define xcap_tag (clazz == ELFCLASS32   \\",
          "216:     ? elf_getu32(swap, cap32.c_tag) \\",
          "217:     : elf_getu64(swap, cap64.c_tag))",
          "218: #define xcap_val (clazz == ELFCLASS32   \\",
          "219:     ? elf_getu32(swap, cap32.c_un.c_val) \\",
          "220:     : elf_getu64(swap, cap64.c_un.c_val))",
          "221: #define xauxv_addr (clazz == ELFCLASS32   \\",
          "224: #define xauxv_sizeof (clazz == ELFCLASS32   \\",
          "225:     ? sizeof(auxv32)   \\",
          "226:     : sizeof(auxv64))",
          "",
          "[Removed Lines]",
          "206: #define prpsoffsets(i) (clazz == ELFCLASS32   \\",
          "207:     ? prpsoffsets32[i]   \\",
          "208:     : prpsoffsets64[i])",
          "210:     ? (void *)&cap32   \\",
          "211:     : (void *)&cap64)",
          "213:     ? sizeof cap32    \\",
          "214:     : sizeof cap64)",
          "222:     ? (void *)&auxv32   \\",
          "223:     : (void *)&auxv64)",
          "",
          "[Added Lines]",
          "207: #define xdh_addr (clazz == ELFCLASS32   \\",
          "208:     ? CAST(void *, &dh32)   \\",
          "209:     : CAST(void *, &dh64))",
          "210: #define xdh_sizeof (clazz == ELFCLASS32   \\",
          "211:     ? sizeof(dh32)    \\",
          "212:     : sizeof(dh64))",
          "213: #define xdh_tag  (clazz == ELFCLASS32   \\",
          "214:     ? elf_getu32(swap, dh32.d_tag)  \\",
          "215:     : elf_getu64(swap, dh64.d_tag))",
          "216: #define xdh_val  (clazz == ELFCLASS32   \\",
          "217:     ? elf_getu32(swap, dh32.d_un.d_val) \\",
          "218:     : elf_getu64(swap, dh64.d_un.d_val))",
          "221:     ? CAST(void *, &cap32)   \\",
          "222:     : CAST(void *, &cap64))",
          "224:     ? sizeof(cap32)   \\",
          "225:     : sizeof(cap64))",
          "234:     ? CAST(void *, &auxv32)  \\",
          "235:     : CAST(void *, &auxv64))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "231:     ? elf_getu32(swap, auxv32.a_v)  \\",
          "232:     : elf_getu64(swap, auxv64.a_v))",
          "234: #ifdef ELFCORE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "246: #define prpsoffsets(i) (clazz == ELFCLASS32   \\",
          "247:     ? prpsoffsets32[i]   \\",
          "248:     : prpsoffsets64[i])",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "267: };",
          "272: #define NOFFSETS (clazz == ELFCLASS32 ? NOFFSETS32 : NOFFSETS64)",
          "",
          "[Removed Lines]",
          "269: #define NOFFSETS32 (sizeof prpsoffsets32 / sizeof prpsoffsets32[0])",
          "270: #define NOFFSETS64 (sizeof prpsoffsets64 / sizeof prpsoffsets64[0])",
          "",
          "[Added Lines]",
          "285: #define NOFFSETS32 (sizeof(prpsoffsets32) / sizeof(prpsoffsets32[0]))",
          "286: #define NOFFSETS64 (sizeof(prpsoffsets64) / sizeof(prpsoffsets64[0]))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "348:  for ( ; num; num--) {",
          "350:    file_badread(ms);",
          "351:    return -1;",
          "352:   }",
          "",
          "[Removed Lines]",
          "349:   if (pread(fd, xph_addr, xph_sizeof, off) < (ssize_t)xph_sizeof) {",
          "",
          "[Added Lines]",
          "365:   if (pread(fd, xph_addr, xph_sizeof, off) <",
          "366:       CAST(ssize_t, xph_sizeof)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "389: do_note_netbsd_version(struct magic_set *ms, int swap, void *v)",
          "390: {",
          "391:  uint32_t desc;",
          "393:  desc = elf_getu32(swap, desc);",
          "395:  if (file_printf(ms, \", for NetBSD\") == -1)",
          "",
          "[Removed Lines]",
          "392:  (void)memcpy(&desc, v, sizeof(desc));",
          "",
          "[Added Lines]",
          "409:  memcpy(&desc, v, sizeof(desc));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "435: {",
          "436:  uint32_t desc;",
          "439:  desc = elf_getu32(swap, desc);",
          "440:  if (file_printf(ms, \", for FreeBSD\") == -1)",
          "441:   return;",
          "",
          "[Removed Lines]",
          "438:  (void)memcpy(&desc, v, sizeof(desc));",
          "",
          "[Added Lines]",
          "455:  memcpy(&desc, v, sizeof(desc));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "533:   }",
          "534:   if (file_printf(ms, \", BuildID[%s]=\", btype) == -1)",
          "535:    return 1;",
          "537:   for (i = 0; i < descsz; i++)",
          "538:       if (file_printf(ms, \"%02x\", desc[i]) == -1)",
          "539:    return 1;",
          "",
          "[Removed Lines]",
          "536:   (void)memcpy(desc, &nbuf[doff], descsz);",
          "",
          "[Added Lines]",
          "553:   memcpy(desc, &nbuf[doff], descsz);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "557:  if (namesz == 4 && strcmp((char *)&nbuf[noff], \"GNU\") == 0 &&",
          "558:      type == NT_GNU_VERSION && descsz == 16) {",
          "559:   uint32_t desc[4];",
          "563:   if (file_printf(ms, \", for GNU/\") == -1)",
          "",
          "[Removed Lines]",
          "560:   (void)memcpy(desc, &nbuf[doff], sizeof(desc));",
          "",
          "[Added Lines]",
          "577:   memcpy(desc, &nbuf[doff], sizeof(desc));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "625:   if (file_printf(ms, \", for DragonFly\") == -1)",
          "626:    return 1;",
          "628:   desc = elf_getu32(swap, desc);",
          "629:   if (file_printf(ms, \" %d.%d.%d\", desc / 100000,",
          "630:       desc / 10000 % 10, desc % 10000) == -1)",
          "",
          "[Removed Lines]",
          "627:   (void)memcpy(&desc, &nbuf[doff], sizeof(desc));",
          "",
          "[Added Lines]",
          "644:   memcpy(&desc, &nbuf[doff], sizeof(desc));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "654:   int did = 0;",
          "658:   desc = elf_getu32(swap, desc);",
          "660:   if (desc && file_printf(ms, \", PaX: \") == -1)",
          "",
          "[Removed Lines]",
          "657:   (void)memcpy(&desc, &nbuf[doff], sizeof(desc));",
          "",
          "[Added Lines]",
          "674:   memcpy(&desc, &nbuf[doff], sizeof(desc));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "954:  nval = 0;",
          "955:  for (size_t off = 0; off + elsize <= descsz; off += elsize) {",
          "958:   if (nval++ >= 50) {",
          "959:    file_error(ms, 0, \"Too many ELF Auxv elements\");",
          "",
          "[Removed Lines]",
          "956:   (void)memcpy(xauxv_addr, &nbuf[doff + off], xauxv_sizeof);",
          "",
          "[Added Lines]",
          "973:   memcpy(xauxv_addr, &nbuf[doff + off], xauxv_sizeof);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1017: #endif",
          "1018: }",
          "1020: private size_t",
          "1021: donote(struct magic_set *ms, void *vbuf, size_t offset, size_t size,",
          "1022:     int clazz, int swap, size_t align, int *flags, uint16_t *notecount,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1037: private size_t",
          "1038: dodynamic(struct magic_set *ms, void *vbuf, size_t offset, size_t size,",
          "1039:     int clazz, int swap)",
          "1040: {",
          "1041:  Elf32_Dyn dh32;",
          "1042:  Elf64_Dyn dh64;",
          "1043:  unsigned char *dbuf = CAST(unsigned char *, vbuf);",
          "1045:  if (xdh_sizeof + offset > size) {",
          "1049:   return xdh_sizeof + offset;",
          "1050:  }",
          "1052:  memcpy(xdh_addr, &dbuf[offset], xdh_sizeof);",
          "1053:  offset += xdh_sizeof;",
          "1055:  switch (xdh_tag) {",
          "1056:  case DT_FLAGS_1:",
          "1057:   if (xdh_val == DF_1_PIE)",
          "1058:    ms->mode |= 0111;",
          "1059:   else",
          "1060:    ms->mode &= ~0111;",
          "1061:   break;",
          "1062:  default:",
          "1063:   break;",
          "1064:  }",
          "1065:  return offset;",
          "1066: }",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1039:   return xnh_sizeof + offset;",
          "1040:  }",
          "1043:  offset += xnh_sizeof;",
          "1045:  namesz = xnh_namesz;",
          "",
          "[Removed Lines]",
          "1042:  (void)memcpy(xnh_addr, &nbuf[offset], xnh_sizeof);",
          "",
          "[Added Lines]",
          "1091:  memcpy(xnh_addr, &nbuf[offset], xnh_sizeof);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1053:  }",
          "1055:  if (namesz & 0x80000000) {",
          "1058:      return 0;",
          "1059:  }",
          "1061:  if (descsz & 0x80000000) {",
          "1064:      return 0;",
          "1065:  }",
          "",
          "[Removed Lines]",
          "1056:      (void)file_printf(ms, \", bad note name size %#lx\",",
          "1057:   (unsigned long)namesz);",
          "1062:      (void)file_printf(ms, \", bad note description size %#lx\",",
          "1063:   (unsigned long)descsz);",
          "",
          "[Added Lines]",
          "1105:      file_printf(ms, \", bad note name size %#lx\",",
          "1106:   CAST(unsigned long, namesz));",
          "1111:      file_printf(ms, \", bad note description size %#lx\",",
          "1112:   CAST(unsigned long, descsz));",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1114:    return offset;",
          "1115:  }",
          "1118:   if (descsz > 100)",
          "1119:    descsz = 100;",
          "1120:   switch (xnh_type) {",
          "1121:       case NT_NETBSD_VERSION:",
          "1122:    return offset;",
          "1123:   case NT_NETBSD_MARCH:",
          "1130:    break;",
          "1131:   case NT_NETBSD_CMODEL:",
          "1138:    break;",
          "1139:   case NT_NETBSD_EMULATION:",
          "1146:    break;",
          "1147:   default:",
          "1148:    if (*flags & FLAGS_DID_NETBSD_UNKNOWN)",
          "",
          "[Removed Lines]",
          "1117:  if (namesz == 7 && strcmp((char *)&nbuf[noff], \"NetBSD\") == 0) {",
          "1124:    if (*flags & FLAGS_DID_NETBSD_MARCH)",
          "1125:     return offset;",
          "1127:    if (file_printf(ms, \", compiled for: %.*s\",",
          "1128:        (int)descsz, (const char *)&nbuf[doff]) == -1)",
          "1129:     return offset;",
          "1132:    if (*flags & FLAGS_DID_NETBSD_CMODEL)",
          "1133:     return offset;",
          "1135:    if (file_printf(ms, \", compiler model: %.*s\",",
          "1136:        (int)descsz, (const char *)&nbuf[doff]) == -1)",
          "1137:     return offset;",
          "1140:    if (*flags & FLAGS_DID_NETBSD_EMULATION)",
          "1141:     return offset;",
          "1143:    if (file_printf(ms, \", emulation: %.*s\",",
          "1144:        (int)descsz, (const char *)&nbuf[doff]) == -1)",
          "1145:     return offset;",
          "",
          "[Added Lines]",
          "1166:  if (namesz == 7 && strcmp(CAST(char *, &nbuf[noff]), \"NetBSD\") == 0) {",
          "1167:   int descw, flag;",
          "1168:   const char *str, *tag;",
          "1175:    flag = FLAGS_DID_NETBSD_MARCH;",
          "1176:    tag = \"compiled for\";",
          "1179:    flag = FLAGS_DID_NETBSD_CMODEL;",
          "1180:    tag = \"compiler model\";",
          "1183:    flag = FLAGS_DID_NETBSD_EMULATION;",
          "1184:    tag = \"emulation:\";",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1151:    if (file_printf(ms, \", note=%u\", xnh_type) == -1)",
          "1152:     return offset;",
          "1154:   }",
          "1155:   return offset;",
          "1156:  }",
          "",
          "[Removed Lines]",
          "1153:    break;",
          "",
          "[Added Lines]",
          "1192:    return offset;",
          "1195:   if (*flags & flag)",
          "1196:    return offset;",
          "1197:   str = CAST(const char *, &nbuf[doff]);",
          "1198:   descw = CAST(int, descsz);",
          "1200:   file_printf(ms, \", %s: %.*s\", tag, descw, str);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1234:  if (pread(fd, xsh_addr, xsh_sizeof, CAST(off_t, (off + size * strtab)))",
          "1236:   if (file_printf(ms, \", missing section headers\") == -1)",
          "1237:    return -1;",
          "1238:   return 0;",
          "",
          "[Removed Lines]",
          "1235:      < (ssize_t)xsh_sizeof) {",
          "",
          "[Added Lines]",
          "1281:      < CAST(ssize_t, xsh_sizeof)) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1242:  for ( ; num; num--) {",
          "1245:    file_badread(ms);",
          "1246:    return -1;",
          "1247:   }",
          "",
          "[Removed Lines]",
          "1244:   if ((namesize = pread(fd, name, sizeof(name) - 1, name_off + xsh_name)) == -1) {",
          "",
          "[Added Lines]",
          "1290:   if ((namesize = pread(fd, name, sizeof(name) - 1,",
          "1291:       name_off + xsh_name)) == -1) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1251:    stripped = 0;",
          "1252:   }",
          "1255:    file_badread(ms);",
          "1256:    return -1;",
          "1257:   }",
          "",
          "[Removed Lines]",
          "1254:   if (pread(fd, xsh_addr, xsh_sizeof, off) < (ssize_t)xsh_sizeof) {",
          "",
          "[Added Lines]",
          "1301:   if (pread(fd, xsh_addr, xsh_sizeof, off) <",
          "1302:       CAST(ssize_t, xsh_sizeof)) {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1278:   switch (xsh_type) {",
          "1279:   case SHT_NOTE:",
          "1282:     if (file_printf(ms,",
          "1283:         \", note offset/size %#\" INTMAX_T_FORMAT",
          "1284:         \"x+%#\" INTMAX_T_FORMAT \"x exceeds\"",
          "1285:         \" file size %#\" INTMAX_T_FORMAT \"x\",",
          "1288:      return -1;",
          "1289:     return 0;",
          "1290:    }",
          "",
          "[Removed Lines]",
          "1280:    if ((uintmax_t)(xsh_size + xsh_offset) >",
          "1281:        (uintmax_t)fsize) {",
          "1286:         (uintmax_t)xsh_offset, (uintmax_t)xsh_size,",
          "1287:         (uintmax_t)fsize) == -1)",
          "",
          "[Added Lines]",
          "1328:    if (CAST(uintmax_t, (xsh_size + xsh_offset)) >",
          "1329:        CAST(uintmax_t, fsize)) {",
          "1334:         CAST(uintmax_t, xsh_offset),",
          "1335:         CAST(uintmax_t, xsh_size),",
          "1336:         CAST(uintmax_t, fsize)) == -1)",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1294:     return -1;",
          "1295:    }",
          "1296:    if (pread(fd, nbuf, xsh_size, xsh_offset) <",
          "1298:     file_badread(ms);",
          "1299:     free(nbuf);",
          "1300:     return -1;",
          "",
          "[Removed Lines]",
          "1297:        (ssize_t)xsh_size) {",
          "",
          "[Added Lines]",
          "1346:        CAST(ssize_t, xsh_size)) {",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1303:    noff = 0;",
          "1304:    for (;;) {",
          "1306:      break;",
          "1308:         xsh_size, clazz, swap, 4, flags, notecount,",
          "1309:         fd, 0, 0, 0);",
          "1310:     if (noff == 0)",
          "",
          "[Removed Lines]",
          "1305:     if (noff >= (off_t)xsh_size)",
          "1307:     noff = donote(ms, nbuf, (size_t)noff,",
          "",
          "[Added Lines]",
          "1354:     if (noff >= CAST(off_t, xsh_size))",
          "1356:     noff = donote(ms, nbuf, CAST(size_t, noff),",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1327:    if (nbadcap > 5)",
          "1328:     break;",
          "1330:     file_badseek(ms);",
          "1331:     return -1;",
          "1332:    }",
          "",
          "[Removed Lines]",
          "1329:    if (lseek(fd, xsh_offset, SEEK_SET) == (off_t)-1) {",
          "",
          "[Added Lines]",
          "1378:    if (lseek(fd, xsh_offset, SEEK_SET)",
          "1379:        == CAST(off_t, -1)) {",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1335:     Elf32_Cap cap32;",
          "1336:     Elf64_Cap cap64;",
          "1340:      break;",
          "1343:      file_badread(ms);",
          "1344:      return -1;",
          "1345:     }",
          "",
          "[Removed Lines]",
          "1338:         MAX(sizeof cap32, sizeof cap64)];",
          "1339:     if ((coff += xcap_sizeof) > (off_t)xsh_size)",
          "1341:     if (read(fd, cbuf, (size_t)xcap_sizeof) !=",
          "1342:         (ssize_t)xcap_sizeof) {",
          "",
          "[Added Lines]",
          "1388:         MAX(sizeof(cap32), sizeof(cap64))];",
          "1389:     if ((coff += xcap_sizeof) >",
          "1390:         CAST(off_t, xsh_size))",
          "1392:     if (read(fd, cbuf, CAST(size_t, xcap_sizeof)) !=",
          "1393:         CAST(ssize_t, xcap_sizeof)) {",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1373: #endif",
          "1374:      break;",
          "1375:     }",
          "1377:     switch (xcap_tag) {",
          "1378:     case CA_SUNW_NULL:",
          "1379:      break;",
          "",
          "[Removed Lines]",
          "1376:     (void)memcpy(xcap_addr, cbuf, xcap_sizeof);",
          "",
          "[Added Lines]",
          "1427:     memcpy(xcap_addr, cbuf, xcap_sizeof);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1388:          \", with unknown capability \"",
          "1389:          \"%#\" INT64_T_FORMAT \"x = %#\"",
          "1390:          INT64_T_FORMAT \"x\",",
          "1393:       return -1;",
          "1394:      if (nbadcap++ > 2)",
          "1395:       coff = xsh_size;",
          "",
          "[Removed Lines]",
          "1391:          (unsigned long long)xcap_tag,",
          "1392:          (unsigned long long)xcap_val) == -1)",
          "",
          "[Added Lines]",
          "1442:          CAST(unsigned long long, xcap_tag),",
          "1443:          CAST(unsigned long long, xcap_val))",
          "1444:          == -1)",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1442:     if (file_printf(ms,",
          "1443:         \" unknown hardware capability %#\"",
          "1444:         INT64_T_FORMAT \"x\",",
          "1446:      return -1;",
          "1447:   } else {",
          "1448:    if (file_printf(ms,",
          "1449:        \" hardware capability %#\" INT64_T_FORMAT \"x\",",
          "1451:     return -1;",
          "1452:   }",
          "1453:  }",
          "",
          "[Removed Lines]",
          "1445:         (unsigned long long)cap_hw1) == -1)",
          "1450:        (unsigned long long)cap_hw1) == -1)",
          "",
          "[Added Lines]",
          "1497:         CAST(unsigned long long, cap_hw1)) == -1)",
          "1502:        CAST(unsigned long long, cap_hw1)) == -1)",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1464:    if (file_printf(ms,",
          "1465:        \", with unknown software capability %#\"",
          "1466:        INT64_T_FORMAT \"x\",",
          "1468:     return -1;",
          "1469:  }",
          "1470:  return 0;",
          "",
          "[Removed Lines]",
          "1467:        (unsigned long long)cap_sf1) == -1)",
          "",
          "[Added Lines]",
          "1519:        CAST(unsigned long long, cap_sf1)) == -1)",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1483:  Elf32_Phdr ph32;",
          "1484:  Elf64_Phdr ph64;",
          "1485:  const char *linking_style = \"statically\";",
          "1487:  unsigned char nbuf[BUFSIZ];",
          "1488:  char ibuf[BUFSIZ];",
          "1489:  ssize_t bufsize;",
          "1490:  size_t offset, align, len;",
          "",
          "[Removed Lines]",
          "1486:  const char *interp = \"\";",
          "",
          "[Added Lines]",
          "1540:  char interp[BUFSIZ];",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1495:   return 0;",
          "1496:  }",
          "1498:    for ( ; num; num--) {",
          "1500:    file_badread(ms);",
          "1501:    return -1;",
          "1502:   }",
          "",
          "[Removed Lines]",
          "1499:   if (pread(fd, xph_addr, xph_sizeof, off) < (ssize_t)xph_sizeof) {",
          "",
          "[Added Lines]",
          "1550:  interp[0] = '\\0';",
          "1552:   int doread;",
          "1553:   if (pread(fd, xph_addr, xph_sizeof, off) <",
          "1554:       CAST(ssize_t, xph_sizeof)) {",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1509:   switch (xph_type) {",
          "1510:   case PT_DYNAMIC:",
          "1511:    linking_style = \"dynamically\";",
          "1512:    break;",
          "1513:   case PT_NOTE:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1567:    doread = 1;",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1517:        align < 4) {",
          "1518:     if (file_printf(ms,",
          "1519:         \", invalid note alignment %#lx\",",
          "1521:      return -1;",
          "1522:     align = 4;",
          "1523:    }",
          "1525:   case PT_INTERP:",
          "1533:    break;",
          "1534:   default:",
          "1535:    if (fsize != SIZE_UNKNOWN && xph_offset > fsize) {",
          "1537:     continue;",
          "",
          "[Removed Lines]",
          "1520:         (unsigned long)align) == -1)",
          "1526:    len = xph_filesz < sizeof(nbuf) ? xph_filesz",
          "1527:        : sizeof(nbuf);",
          "1528:    bufsize = pread(fd, nbuf, len, xph_offset);",
          "1529:    if (bufsize == -1) {",
          "1530:     file_badread(ms);",
          "1531:     return -1;",
          "1532:    }",
          "",
          "[Added Lines]",
          "1576:         CAST(unsigned long, align)) == -1)",
          "1582:    doread = 1;",
          "1585:    doread = 0;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1539:    break;",
          "1540:   }",
          "1543:   switch (xph_type) {",
          "1544:   case PT_INTERP:",
          "1545:    if (bufsize && nbuf[0]) {",
          "1546:     nbuf[bufsize - 1] = '\\0';",
          "1548:    } else",
          "1550:    break;",
          "1551:   case PT_NOTE:",
          "",
          "[Removed Lines]",
          "1547:     interp = (const char *)nbuf;",
          "1549:     interp = \"*empty*\";",
          "",
          "[Added Lines]",
          "1593:   if (doread) {",
          "1594:    len = xph_filesz < sizeof(nbuf) ? xph_filesz",
          "1595:        : sizeof(nbuf);",
          "1596:    bufsize = pread(fd, nbuf, len, xph_offset);",
          "1597:    if (bufsize == -1) {",
          "1598:     file_badread(ms);",
          "1599:     return -1;",
          "1600:    }",
          "1601:   } else",
          "1602:    len = 0;",
          "1606:   case PT_DYNAMIC:",
          "1607:    offset = 0;",
          "1608:    for (;;) {",
          "1609:     if (offset >= (size_t)bufsize)",
          "1610:      break;",
          "1611:     offset = dodynamic(ms, nbuf, offset,",
          "1612:         CAST(size_t, bufsize), clazz, swap);",
          "1613:     if (offset == 0)",
          "1614:      break;",
          "1615:    }",
          "1616:    break;",
          "1621:     memcpy(interp, nbuf, bufsize);",
          "1623:     strlcpy(interp, \"*empty*\", sizeof(interp));",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1558:     if (offset >= (size_t)bufsize)",
          "1559:      break;",
          "1560:     offset = donote(ms, nbuf, offset,",
          "1562:         flags, notecount, fd, 0, 0, 0);",
          "1563:     if (offset == 0)",
          "1564:      break;",
          "",
          "[Removed Lines]",
          "1561:         (size_t)bufsize, clazz, swap, align,",
          "",
          "[Added Lines]",
          "1635:         CAST(size_t, bufsize), clazz, swap, align,",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1587:  size_t nbytes = b->flen;",
          "1588:  union {",
          "1589:   int32_t l;",
          "1591:  } u;",
          "1592:  int clazz;",
          "1593:  int swap;",
          "",
          "[Removed Lines]",
          "1590:   char c[sizeof (int32_t)];",
          "",
          "[Added Lines]",
          "1664:   char c[sizeof(int32_t)];",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1619:   fd = file_pipe2file(ms, fd, buf, nbytes);",
          "1621:  if (fstat(fd, &st) == -1) {",
          "",
          "[Removed Lines]",
          "1618:  if((lseek(fd, (off_t)0, SEEK_SET) == (off_t)-1) && (errno == ESPIPE))",
          "",
          "[Added Lines]",
          "1692:  if((lseek(fd, CAST(off_t, 0), SEEK_SET) == CAST(off_t, -1))",
          "1693:      && (errno == ESPIPE))",
          "",
          "---------------"
        ],
        "src/readelf.h||src/readelf.h": [
          "File: src/readelf.h -> src/readelf.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "430: #define AV_386_SSE4_1  0x00800000",
          "431: #define AV_386_SSE4_2  0x01000000",
          "433: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "436: typedef struct {",
          "438:  union {",
          "439:   Elf32_Addr d_ptr;",
          "440:   Elf32_Word d_val;",
          "441:  } d_un;",
          "442: } Elf32_Dyn;",
          "444: typedef struct {",
          "446:  union {",
          "447:   Elf64_Addr d_ptr;",
          "448:   Elf64_Xword d_val;",
          "449:  } d_un;",
          "450: } Elf64_Dyn;",
          "487: #define DT_NUM  34",
          "496: #define DT_HIOS  0x6fffffff",
          "498: #define DT_HIPROC 0x7fffffff",
          "",
          "---------------"
        ]
      }
    }
  ]
}