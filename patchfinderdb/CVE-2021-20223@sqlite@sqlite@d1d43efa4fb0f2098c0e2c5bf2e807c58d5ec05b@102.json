{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6df54c30fc24b611f756bd38538e0cb122d67040",
      "candidate_info": {
        "commit_hash": "6df54c30fc24b611f756bd38538e0cb122d67040",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6df54c30fc24b611f756bd38538e0cb122d67040",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/speedtest1.c",
          "tool/speed-check.sh"
        ],
        "message": "Improvements to speedtest1.  Added the --memdb and --output options.  The --verify option now outputs a hash of SQL outputs.  The speed-check.sh script disables the hashing feature with --legacy and adds the --verify option.\n\nFossilOrigin-Name: f3455cecf22ea98f9ad48e92d620c8e2ec94877e4581731afff0f2bd32014a1d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/speedtest1.c||test/speedtest1.c",
          "tool/speed-check.sh||tool/speed-check.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c78cbf2e86850cc6882d3f0bd5415f6e731c3c675ffe77bb343682c619cb8cd9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/speedtest1.c||test/speedtest1.c": [
          "File: test/speedtest1.c -> test/speedtest1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:   \"Usage: %s [--options] DATABASE\\n\"",
          "8:   \"Options:\\n\"",
          "9:   \"  --autovacuum        Enable AUTOVACUUM mode\\n\"",
          "11:   \"  --exclusive         Enable locking_mode=EXCLUSIVE\\n\"",
          "12:   \"  --explain           Like --sqlonly but with added EXPLAIN keywords\\n\"",
          "13:   \"  --heap SZ MIN       Memory allocator uses SZ bytes & min allocation MIN\\n\"",
          "",
          "[Removed Lines]",
          "10:   \"  --cachesize N       Set the cache size to N\\n\"",
          "",
          "[Added Lines]",
          "10:   \"  --cachesize N       Set the cache size to N\\n\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15:   \"  --journal M         Set the journal_mode to M\\n\"",
          "16:   \"  --key KEY           Set the encryption key to KEY\\n\"",
          "17:   \"  --lookaside N SZ    Configure lookaside for N slots of SZ bytes each\\n\"",
          "18:   \"  --mmap SZ           MMAP the first SZ bytes of the database file\\n\"",
          "19:   \"  --multithread       Set multithreaded mode\\n\"",
          "20:   \"  --nomemstat         Disable memory statistics\\n\"",
          "21:   \"  --nosync            Set PRAGMA synchronous=OFF\\n\"",
          "22:   \"  --notnull           Add NOT NULL constraints to table columns\\n\"",
          "23:   \"  --pagesize N        Set the page size to N\\n\"",
          "24:   \"  --pcache N SZ       Configure N pages of pagecache each of size SZ bytes\\n\"",
          "25:   \"  --primarykey        Use PRIMARY KEY instead of UNIQUE where appropriate\\n\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:   \"  --memdb             Use an in-memory database\\n\"",
          "24:   \"  --output FILE       Store SQL output in FILE\\n\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61: # define sqlite3_int64 sqlite_int64",
          "62: #endif",
          "65: static struct Global {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65: typedef sqlite3_uint64 u64;",
          "70: typedef struct HashContext HashContext;",
          "71: struct HashContext {",
          "76: };",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "85: } g;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101: #ifndef SPEEDTEST_OMIT_HASH",
          "104: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "100:   exit(1);",
          "101: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122: #ifndef SPEEDTEST_OMIT_HASH",
          "133: static void HashInit(void){",
          "134:   unsigned int k;",
          "135:   g.hash.i = 0;",
          "136:   g.hash.j = 0;",
          "137:   for(k=0; k<256; k++) g.hash.s[k] = k;",
          "138: }",
          "144: static void HashUpdate(",
          "145:   const unsigned char *aData,",
          "146:   unsigned int nData",
          "147: ){",
          "148:   unsigned char t;",
          "149:   unsigned char i = g.hash.i;",
          "150:   unsigned char j = g.hash.j;",
          "151:   unsigned int k;",
          "152:   if( g.hashFile ) fwrite(aData, 1, nData, g.hashFile);",
          "153:   for(k=0; k<nData; k++){",
          "154:     j += g.hash.s[i] + aData[k];",
          "155:     t = g.hash.s[j];",
          "156:     g.hash.s[j] = g.hash.s[i];",
          "157:     g.hash.s[i] = t;",
          "158:     i++;",
          "159:   }",
          "160:   g.hash.i = i;",
          "161:   g.hash.j = j;",
          "162: }",
          "168: static void HashFinal(void){",
          "169:   unsigned int k;",
          "170:   unsigned char t, i, j;",
          "171:   i = g.hash.i;",
          "172:   j = g.hash.j;",
          "173:   for(k=0; k<32; k++){",
          "174:     i++;",
          "175:     t = g.hash.s[i];",
          "176:     j += t;",
          "177:     g.hash.s[i] = g.hash.s[j];",
          "178:     g.hash.s[j] = t;",
          "179:     t += g.hash.s[i];",
          "180:     g.hash.r[k] = g.hash.s[t];",
          "181:   }",
          "182: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "324:     printf(\"       TOTAL%.*s %4d.%03ds\\n\", NAMEWIDTH-5, zDots,",
          "325:            (int)(g.iTotal/1000), (int)(g.iTotal%1000));",
          "326:   }",
          "327: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "412:   if( g.bVerify ){",
          "413: #ifndef SPEEDTEST_OMIT_HASH",
          "414:     int i;",
          "415: #endif",
          "416:     printf(\"Verification Hash: %llu \", g.nResByte);",
          "417: #ifndef SPEEDTEST_OMIT_HASH",
          "418:     HashUpdate((const unsigned char*)\"\\n\", 1);",
          "419:     HashFinal();",
          "420:     for(i=0; i<24; i++){",
          "421:       printf(\"%02x\", g.hash.r[i]);",
          "422:     }",
          "423:     if( g.hashFile && g.hashFile!=stdout ) fclose(g.hashFile);",
          "424: #endif",
          "425:     printf(\"\\n\");",
          "426:   }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "434:       const char *z = (const char*)sqlite3_column_text(g.pStmt, i);",
          "435:       if( z==0 ) z = \"nil\";",
          "436:       len = (int)strlen(z);",
          "437:       if( g.nResult+len<sizeof(g.zResult)-2 ){",
          "438:         if( g.nResult>0 ) g.zResult[g.nResult++] = ' ';",
          "439:         memcpy(g.zResult + g.nResult, z, len+1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "537: #ifndef SPEEDTEST_OMIT_HASH",
          "538:       if( g.bVerify ){",
          "539:         int eType = sqlite3_column_type(g.pStmt, i);",
          "540:         unsigned char zPrefix[2];",
          "541:         zPrefix[0] = '\\n';",
          "542:         zPrefix[1] = \"-IFTBN\"[eType];",
          "543:         if( g.nResByte ){",
          "544:           HashUpdate(zPrefix, 2);",
          "545:         }else{",
          "546:           HashUpdate(zPrefix+1, 1);",
          "547:         }",
          "548:         if( eType==SQLITE_BLOB ){",
          "549:           int nBlob = sqlite3_column_bytes(g.pStmt, i);",
          "550:           const unsigned char *aBlob = sqlite3_column_blob(g.pStmt, i);",
          "551:           HashUpdate(aBlob, nBlob);",
          "552:           g.nResByte += nBlob + 2;",
          "553:         }else{",
          "554:           HashUpdate((unsigned char*)z, len);",
          "555:           g.nResByte += len + 2;",
          "556:         }",
          "557:       }",
          "558: #endif",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2034:          sqlite3_libversion(), sqlite3_sourceid());",
          "",
          "[Removed Lines]",
          "2033:   printf(\"-- Speedtest1 for SQLite %s %.50s\\n\",",
          "",
          "[Added Lines]",
          "2156:   printf(\"-- Speedtest1 for SQLite %s %.48s\\n\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2072:         nLook = integerValue(argv[i+1]);",
          "2073:         szLook = integerValue(argv[i+2]);",
          "2074:         i += 2;",
          "2075: #if SQLITE_VERSION_NUMBER>=3006000",
          "2076:       }else if( strcmp(z,\"multithread\")==0 ){",
          "2077:         sqlite3_config(SQLITE_CONFIG_MULTITHREAD);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2198:       }else if( strcmp(z,\"memdb\")==0 ){",
          "2199:         memDb = 1;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2087:         noSync = 1;",
          "2088:       }else if( strcmp(z,\"notnull\")==0 ){",
          "2089:         g.zNN = \"NOT NULL\";",
          "2090:       }else if( strcmp(z,\"pagesize\")==0 ){",
          "2091:         if( i>=argc-1 ) fatal_error(\"missing argument on %s\\n\", argv[i]);",
          "2092:         pageSize = integerValue(argv[++i]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2215:       }else if( strcmp(z,\"output\")==0 ){",
          "2216: #ifdef SPEEDTEST_OMIT_HASH",
          "2217:         fatal_error(\"The --output option is not supported with\"",
          "2218:                     \" -DSPEEDTEST_OMIT_HASH\\n\");",
          "2219: #else",
          "2220:         if( i>=argc-1 ) fatal_error(\"missing argument on %s\\n\", argv[i]);",
          "2221:         i++;",
          "2222:         if( strcmp(argv[i],\"-\")==0 ){",
          "2223:           g.hashFile = stdout;",
          "2224:         }else{",
          "2225:           g.hashFile = fopen(argv[i], \"wb\");",
          "2226:           if( g.hashFile==0 ){",
          "2227:             fatal_error(\"cannot open \\\"%s\\\" for writing\\n\", argv[i]);",
          "2228:           }",
          "2229:         }",
          "2230: #endif",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2140:         zEncoding = \"utf16be\";",
          "2141:       }else if( strcmp(z,\"verify\")==0 ){",
          "2142:         g.bVerify = 1;",
          "2143:       }else if( strcmp(z,\"without-rowid\")==0 ){",
          "2144:         g.zWR = \"WITHOUT ROWID\";",
          "2145:         g.zPK = \"PRIMARY KEY\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2284: #ifndef SPEEDTEST_OMIT_HASH",
          "2285:         HashInit();",
          "2286: #endif",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2181:   sqlite3_initialize();",
          "2185:     fatal_error(\"Cannot open database file: %s\\n\", zDbName);",
          "2186:   }",
          "2187: #if SQLITE_VERSION_NUMBER>=3006001",
          "2188:   if( nLook>0 && szLook>0 ){",
          "2189:     pLook = malloc( nLook*szLook );",
          "2191:     if( rc ) fatal_error(\"lookaside configuration failed: %d\\n\", rc);",
          "2192:   }",
          "2193: #endif",
          "",
          "[Removed Lines]",
          "2184:   if( sqlite3_open(zDbName, &g.db) ){",
          "2190:     rc = sqlite3_db_config(g.db, SQLITE_DBCONFIG_LOOKASIDE, pLook, szLook,nLook);",
          "",
          "[Added Lines]",
          "2328:   if( sqlite3_open(memDb ? \":memory:\" : zDbName, &g.db) ){",
          "2334:     rc = sqlite3_db_config(g.db, SQLITE_DBCONFIG_LOOKASIDE,pLook,szLook,nLook);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2197: #ifndef SQLITE_OMIT_DEPRECATED",
          "2198:   if( doTrace ) sqlite3_trace(g.db, traceCallback, 0);",
          "2199: #endif",
          "2200:   if( mmapSize>0 ){",
          "2201:     speedtest1_exec(\"PRAGMA mmap_size=%d\", mmapSize);",
          "2202:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2344:   if( memDb>0 ){",
          "2345:     speedtest1_exec(\"PRAGMA temp_store=memory\");",
          "2346:   }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2236:     }else{",
          "2237:       zTSet = \"\";",
          "2238:     }",
          "2239:     if( strcmp(zThisTest,\"main\")==0 ){",
          "2240:       testset_main();",
          "2241:     }else if( strcmp(zThisTest,\"debug1\")==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2386:     if( g.iTotal>0 || zComma!=0 ){",
          "2387:       printf(\"       Begin testset \\\"%s\\\"\\n\", zThisTest);",
          "2388:     }",
          "",
          "---------------"
        ],
        "tool/speed-check.sh||tool/speed-check.sh": [
          "File: tool/speed-check.sh -> tool/speed-check.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:         ;;",
          "80:     --legacy)",
          "81:  doWal=0",
          "82:         ;;",
          "83:     --wal)",
          "84:         doWal=1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:         CC_OPTS=\"$CC_OPTS -DSPEEDTEST_OMIT_HASH\"",
          "83:         ;;",
          "84:     --verify)",
          "85:         SPEEDTEST_OPTS=\"$SPEEDTEST_OPTS --verify\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d0e6d133017d7fb82f0d16071eefc2c962762390",
      "candidate_info": {
        "commit_hash": "d0e6d133017d7fb82f0d16071eefc2c962762390",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d0e6d133017d7fb82f0d16071eefc2c962762390",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/os_unix.c",
          "src/wal.c",
          "test/walsetlk.test"
        ],
        "message": "Add tests for running recovery when opening a write transaction or performing a checkpoint with blocking locks enabled. Fix some failing assert() statements.\n\nFossilOrigin-Name: d096ea3fe20f8af90f9e3f798fd0a69527b32ac8e208ade58b9d0af0e831f41b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/os_unix.c||src/os_unix.c",
          "src/wal.c||src/wal.c",
          "test/walsetlk.test||test/walsetlk.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a3727dba10b476f414f0a049b35f2a5c169a408eccefa6833821560684e07f8b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/os_unix.c||src/os_unix.c": [
          "File: src/os_unix.c -> src/os_unix.c"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2179:   if( badHdr ){",
          "2180:     if( pWal->bShmUnreliable==0 && (pWal->readOnly & WAL_SHM_RDONLY) ){",
          "2181:       if( SQLITE_OK==(rc = walLockShared(pWal, WAL_WRITE_LOCK)) ){",
          "2182:         walUnlockShared(pWal, WAL_WRITE_LOCK);",
          "2183:         rc = SQLITE_READONLY_RECOVERY;",
          "2184:       }",
          "2196:         }",
          "2197:       }",
          "2200:     }",
          "2201:   }",
          "",
          "[Removed Lines]",
          "2178:   assert( badHdr==0 || pWal->writeLock==0 );",
          "2185:     }else if( SQLITE_OK==(rc = walLockExclusive(pWal, WAL_WRITE_LOCK, 1)) ){",
          "2186:       pWal->writeLock = 1;",
          "2187:       if( SQLITE_OK==(rc = walIndexPage(pWal, 0, &page0)) ){",
          "2188:         badHdr = walIndexTryHdr(pWal, pChanged);",
          "2189:         if( badHdr ){",
          "2194:           rc = walIndexRecover(pWal);",
          "2198:       pWal->writeLock = 0;",
          "2199:       walUnlockExclusive(pWal, WAL_WRITE_LOCK, 1);",
          "",
          "[Added Lines]",
          "2184:     }else{",
          "2185:       int bWriteLock = pWal->writeLock;",
          "2186:       if( bWriteLock",
          "2187:        || SQLITE_OK==(rc = walLockExclusive(pWal, WAL_WRITE_LOCK, 1))",
          "2188:       ){",
          "2189:         pWal->writeLock = 1;",
          "2190:         if( SQLITE_OK==(rc = walIndexPage(pWal, 0, &page0)) ){",
          "2191:           badHdr = walIndexTryHdr(pWal, pChanged);",
          "2192:           if( badHdr ){",
          "2197:             rc = walIndexRecover(pWal);",
          "2199:           }",
          "2200:         }",
          "2201:         if( bWriteLock==0 ){",
          "2202:           pWal->writeLock = 0;",
          "2203:           walUnlockExclusive(pWal, WAL_WRITE_LOCK, 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2812: #ifdef SQLITE_ENABLE_SNAPSHOT",
          "2813:   int bChanged = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2817:   assert( pWal->ckptLock==0 );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2832:     if( rc!=SQLITE_OK ){",
          "2833:       return rc;",
          "2834:     }",
          "2835:   }",
          "2836: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2842:     pWal->ckptLock = 1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2895:   }",
          "2899:     walUnlockShared(pWal, WAL_CKPT_LOCK);",
          "2900:   }",
          "2901: #endif",
          "2902:   return rc;",
          "",
          "[Removed Lines]",
          "2898:   if( pSnapshot ){",
          "",
          "[Added Lines]",
          "2906:   if( pWal->ckptLock ){",
          "2907:     assert( pSnapshot );",
          "2909:     pWal->ckptLock = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3700:   if( rc==SQLITE_OK ){",
          "3701:     rc = walIndexReadHdr(pWal, &isChanged);",
          "3702:     if( isChanged && pWal->pDbFd->pMethods->iVersion>=3 ){",
          "3703:       sqlite3OsUnfetch(pWal->pDbFd, 0, 0);",
          "3704:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3711:     walDisableBlocking(pWal);",
          "3713:     walEnableBlocking(db, pWal);",
          "",
          "---------------"
        ],
        "test/walsetlk.test||test/walsetlk.test": [
          "File: test/walsetlk.test -> test/walsetlk.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2020 May 06",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "13: set testdir [file dirname $argv0]",
          "14: source $testdir/tester.tcl",
          "15: set testprefix walsetlk",
          "17: ifcapable !wal {finish_test ; return }",
          "18: db timeout 1000",
          "20: #-------------------------------------------------------------------------",
          "21: # 1.*: Test that nothing goes wrong if recovery is forced while opening",
          "22: #      a write transaction or performing a checkpoint with blocking locks.",
          "23: #",
          "25: do_execsql_test 1.0 {",
          "26:   CREATE TABLE t1(x, y);",
          "27:   PRAGMA journal_mode = wal;",
          "28:   INSERT INTO t1 VALUES(1, 2);",
          "29:   INSERT INTO t1 VALUES(3, 4);",
          "30:   INSERT INTO t1 VALUES(5, 6);",
          "31:   INSERT INTO t1 VALUES(7, 8);",
          "32: } {wal}",
          "34: sqlite3 db2 test.db",
          "35: db2 timeout 1000",
          "37: do_execsql_test -db db2 1.1 {",
          "38:   SELECT * FROM t1",
          "39: } {1 2 3 4 5 6 7 8}",
          "41: set fd [open test.db-shm r+]",
          "42: puts $fd \"blahblahblahblah\"",
          "43: flush $fd",
          "45: do_execsql_test 1.2 {",
          "46:   BEGIN;",
          "47:     INSERT INTO t1 VALUES(9, 10);",
          "48: }",
          "50: do_execsql_test -db db2 1.3 {",
          "51:   SELECT * FROM t1",
          "52: } {1 2 3 4 5 6 7 8}",
          "54: do_test 1.3 {",
          "55:   list [catch {db2 eval { BEGIN EXCLUSIVE }} msg] $msg",
          "56: } {1 {database is locked}}",
          "58: do_execsql_test 1.4 { COMMIT }",
          "59: do_execsql_test -db db2 1.5 {",
          "60:   SELECT * FROM t1",
          "61: } {1 2 3 4 5 6 7 8 9 10}",
          "63: puts $fd \"blahblahblahblah\"",
          "64: flush $fd",
          "66: do_execsql_test -db db2 1.6 {",
          "67:   PRAGMA wal_checkpoint = TRUNCATE",
          "68: } {0 0 0}",
          "70: do_test 1.7 {",
          "71:   file size test.db-wal",
          "72: } 0",
          "74: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ba01634cd393040ade90cf5449e3642663e80699",
      "candidate_info": {
        "commit_hash": "ba01634cd393040ade90cf5449e3642663e80699",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ba01634cd393040ade90cf5449e3642663e80699",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/window.c"
        ],
        "message": "Ensure that the same subquery does not go through the window-function rewrite more than once, even when that subquery is part of a virtual table constraint that lacks the omit flag.\n\nFossilOrigin-Name: d0bc7db6b0a53edc04815622c46250d26f526f56e59f14875f4e18c75b49000d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7e3151855fd4370fb7d4fff20516c2c2d1980134620df924106e6989bc130583",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "904: int sqlite3WindowRewrite(Parse *pParse, Select *p){",
          "905:   int rc = SQLITE_OK;",
          "907:     Vdbe *v = sqlite3GetVdbe(pParse);",
          "908:     sqlite3 *db = pParse->db;",
          "",
          "[Removed Lines]",
          "906:   if( p->pWin && p->pPrior==0 ){",
          "",
          "[Added Lines]",
          "906:   if( p->pWin && p->pPrior==0 && (p->selFlags & SF_WinRewrite)==0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "928:     p->pGroupBy = 0;",
          "929:     p->pHaving = 0;",
          "930:     p->selFlags &= ~SF_Aggregate;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "931:     p->selFlags |= SF_WinRewrite;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "779720755412c162f1863a48af94ace135dd1b18",
      "candidate_info": {
        "commit_hash": "779720755412c162f1863a48af94ace135dd1b18",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/779720755412c162f1863a48af94ace135dd1b18",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbevtab.c"
        ],
        "message": "Optimize the \"subprog IS NULL\" constraint.\n\nFossilOrigin-Name: ca8c5f028b9f6f32639c8bc9df5dc02537e21385fcbe7e1ae600c640977ea0d5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbevtab.c||src/vdbevtab.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c9f3405eeac8aff171b5d76bae954f3b51b353d16286a3d2af43ef942c212abc",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbevtab.c||src/vdbevtab.c": [
          "File: src/vdbevtab.c -> src/vdbevtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:     sqlite3_free(pCur->zP4);",
          "136:     pCur->zP4 = 0;",
          "137:   }",
          "140:   if( rc!=SQLITE_OK ){",
          "141:     sqlite3VdbeMemSetNull(&pCur->sub);",
          "142:     pCur->aOp = 0;",
          "",
          "[Removed Lines]",
          "138:   rc = sqlite3VdbeNextOpcode((Vdbe*)pCur->pStmt, &pCur->sub, 0,",
          "139:                              &pCur->iRowid, &pCur->iAddr, &pCur->aOp);",
          "",
          "[Added Lines]",
          "139:   rc = sqlite3VdbeNextOpcode(",
          "140:            (Vdbe*)pCur->pStmt,",
          "141:            pCur->showSubprograms ? &pCur->sub : 0,",
          "142:            0,",
          "143:            &pCur->iRowid,",
          "144:            &pCur->iAddr,",
          "145:            &pCur->aOp);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "245:   bytecodevtabCursorClear(pCur);",
          "246:   pCur->iRowid = 0;",
          "247:   pCur->iAddr = 0;",
          "248:   assert( argc==1 );",
          "249:   if( sqlite3_value_type(argv[0])==SQLITE_TEXT ){",
          "250:     const char *zSql = (const char*)sqlite3_value_text(argv[0]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "254:   pCur->showSubprograms = idxNum==0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "279: ){",
          "280:   int i;",
          "281:   int rc = SQLITE_CONSTRAINT;",
          "282:   pIdxInfo->estimatedCost = (double)100;",
          "283:   pIdxInfo->estimatedRows = 100;",
          "292:   }",
          "293:   return rc;",
          "294: }",
          "",
          "[Removed Lines]",
          "284:   for(i=0; i<pIdxInfo->nConstraint; i++){",
          "285:     if( pIdxInfo->aConstraint[i].usable==0 ) continue;",
          "286:     if( pIdxInfo->aConstraint[i].op!=SQLITE_INDEX_CONSTRAINT_EQ ) continue;",
          "287:     if( pIdxInfo->aConstraint[i].iColumn!=9 ) continue;",
          "288:     rc = SQLITE_OK;",
          "289:     pIdxInfo->aConstraintUsage[i].omit = 1;",
          "290:     pIdxInfo->aConstraintUsage[i].argvIndex = 1;",
          "291:     break;",
          "",
          "[Added Lines]",
          "289:   struct sqlite3_index_constraint *p;",
          "292:   pIdxInfo->idxNum = 0;",
          "293:   for(i=0, p=pIdxInfo->aConstraint; i<pIdxInfo->nConstraint; i++, p++){",
          "294:     if( p->usable==0 ) continue;",
          "295:     if( p->op==SQLITE_INDEX_CONSTRAINT_EQ && p->iColumn==9 ){",
          "296:       rc = SQLITE_OK;",
          "297:       pIdxInfo->aConstraintUsage[i].omit = 1;",
          "298:       pIdxInfo->aConstraintUsage[i].argvIndex = 1;",
          "299:     }",
          "300:     if( p->op==SQLITE_INDEX_CONSTRAINT_ISNULL && p->iColumn==8 ){",
          "301:       pIdxInfo->aConstraintUsage[i].omit = 1;",
          "302:       pIdxInfo->idxNum = 1;",
          "303:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "06fc24555fd7fc826c68de4b85f2326ada87ea90",
      "candidate_info": {
        "commit_hash": "06fc24555fd7fc826c68de4b85f2326ada87ea90",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/06fc24555fd7fc826c68de4b85f2326ada87ea90",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "Changes an unreachable testcase() into an assert().\n\nFossilOrigin-Name: 5710845b6314f924b490434b4446169f4bb50576aaa940472af68150db16e127",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ea20068e6d97c9349ebcc7d0a01e99ebf08c6f44363f71a0218a1abea209adc5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1903:         whereApplyPartialIndexConstraints(pIdx->pPartIdxWhere, iCur, pWC);",
          "1904:       }",
          "1905:     }else{",
          "1907:       testcase( pIdx->pPartIdxWhere );",
          "1908:     }",
          "",
          "[Removed Lines]",
          "1906:       testcase( (pWInfo->wctrlFlags & WHERE_OR_SUBCLAUSE)==0 );",
          "",
          "[Added Lines]",
          "1910:       assert( (pWInfo->wctrlFlags & WHERE_OR_SUBCLAUSE)==0 );",
          "",
          "---------------"
        ]
      }
    }
  ]
}