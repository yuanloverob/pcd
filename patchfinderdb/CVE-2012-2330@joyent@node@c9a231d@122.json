{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "968b49ba0a6329af83b46c598524d7ae2460df57",
      "candidate_info": {
        "commit_hash": "968b49ba0a6329af83b46c598524d7ae2460df57",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/968b49ba0a6329af83b46c598524d7ae2460df57",
        "files": [
          "src/node.cc",
          "test/message/throw_in_line_with_tabs.js",
          "test/message/throw_in_line_with_tabs.out"
        ],
        "message": "Check for tabs in source line in DisplayExceptionLine\n\nFix for joyent/node#3280",
        "before_after_code_files": [
          "src/node.cc||src/node.cc",
          "test/message/throw_in_line_with_tabs.js||test/message/throw_in_line_with_tabs.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1272:     int start = message->GetStartColumn();",
          "1273:     for (int i = offset; i < start; i++) {",
          "1275:     }",
          "1276:     int end = message->GetEndColumn();",
          "1277:     for (int i = start; i < end; i++) {",
          "1279:     }",
          "1281:   }",
          "1282: }",
          "",
          "[Removed Lines]",
          "1274:       fprintf(stderr, \" \");",
          "1278:       fprintf(stderr, \"^\");",
          "1280:     fprintf(stderr, \"\\n\");",
          "",
          "[Added Lines]",
          "1274:       fputc((sourceline_string[i] == '\\t') ? '\\t' : ' ', stderr);",
          "1278:       fputc('^', stderr);",
          "1280:     fputc('\\n', stderr);",
          "",
          "---------------"
        ],
        "test/message/throw_in_line_with_tabs.js||test/message/throw_in_line_with_tabs.js": [
          "File: test/message/throw_in_line_with_tabs.js -> test/message/throw_in_line_with_tabs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: var common = require('../common');",
          "26: var assert = require('assert');",
          "28: common.error('before');",
          "30: (function () {",
          "32:  throw ({ foo: 'bar' });",
          "33: })();",
          "35: common.error('after');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a10cfba766e2d219b311f12d7854ff448d0d3490",
      "candidate_info": {
        "commit_hash": "a10cfba766e2d219b311f12d7854ff448d0d3490",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/a10cfba766e2d219b311f12d7854ff448d0d3490",
        "files": [
          "lib/module.js",
          "test/simple/test-module-loading.js"
        ],
        "message": "module: remove 'exited', replace 'children' array",
        "before_after_code_files": [
          "lib/module.js||limodule.js",
          "test/simple/test-module-loading.js||test/simple/test-module-loading.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/module.js||limodule.js": [
          "File: lib/module.js -> limodule.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:   this.id = id;",
          "39:   this.exports = {};",
          "40:   this.parent = parent;",
          "42:   this.filename = null;",
          "43:   this.loaded = false;",
          "45:   this.children = [];",
          "46: }",
          "47: module.exports = Module;",
          "",
          "[Removed Lines]",
          "44:   this.exited = false;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-module-loading.js||test/simple/test-module-loading.js": [
          "File: test/simple/test-module-loading.js -> test/simple/test-module-loading.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "206: });",
          "209: process.on('exit', function() {",
          "210:   assert.ok(common.indirectInstanceOf(a.A, Function));",
          "211:   assert.equal('A done', a.A());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "213: var children = module.children.reduce(function red(set, child) {",
          "214:   var id = path.relative(path.dirname(__dirname), child.id);",
          "215:   set[id] = child.children.reduce(red, {});",
          "216:   return set;",
          "217: }, {});",
          "219: assert.deepEqual(children, {",
          "220:   'common.js': {},",
          "221:   'fixtures/not-main-module.js': {},",
          "222:   'fixtures/a.js': {",
          "223:     'fixtures/b/c.js': {",
          "224:       'fixtures/b/d.js': {},",
          "225:       'fixtures/b/package/index.js': {}",
          "226:     }",
          "227:   },",
          "228:   'fixtures/foo': {},",
          "229:   'fixtures/nested-index/one/index.js': {",
          "230:     'fixtures/nested-index/one/hello.js': {}",
          "231:   },",
          "232:   'fixtures/nested-index/two/index.js': {",
          "233:     'fixtures/nested-index/two/hello.js': {}",
          "234:   },",
          "235:   'fixtures/nested-index/three.js': {},",
          "236:   'fixtures/nested-index/three/index.js': {},",
          "237:   'fixtures/packages/main/package-main-module.js': {},",
          "238:   'fixtures/packages/main-index/package-main-module/index.js': {},",
          "239:   'fixtures/cycles/root.js': {",
          "240:     'fixtures/cycles/folder/foo.js': {}",
          "241:   },",
          "242:   'fixtures/node_modules/foo.js': {",
          "243:     'fixtures/node_modules/baz/index.js': {",
          "244:       'fixtures/node_modules/bar.js': {},",
          "245:       'fixtures/node_modules/baz/node_modules/asdf.js': {}",
          "246:     }",
          "247:   },",
          "248:   'simple/path.js': {},",
          "249:   'fixtures/throws_error.js': {},",
          "250:   'fixtures/registerExt.test': {},",
          "251:   'fixtures/registerExt.hello.world': {},",
          "252:   'fixtures/registerExt2.test': {},",
          "253:   'fixtures/empty.js': {},",
          "254:   'fixtures/module-load-order/file1': {},",
          "255:   'fixtures/module-load-order/file2.js': {},",
          "256:   'fixtures/module-load-order/file3.node': {},",
          "257:   'fixtures/module-load-order/file4.reg': {},",
          "258:   'fixtures/module-load-order/file5.reg2': {},",
          "259:   'fixtures/module-load-order/file6/index.js': {},",
          "260:   'fixtures/module-load-order/file7/index.node': {},",
          "261:   'fixtures/module-load-order/file8/index.reg': {},",
          "262:   'fixtures/module-load-order/file9/index.reg2': {},",
          "263:   'fixtures/module-require/parent/index.js': {",
          "264:     'fixtures/module-require/child/index.js': {",
          "265:       'fixtures/module-require/child/node_modules/target.js': {}",
          "266:     }",
          "267:   },",
          "268:   'fixtures/packages/main/package.json': {}",
          "269: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b92a919500daf9ec645cd42cd6a8c99883e5198d",
      "candidate_info": {
        "commit_hash": "b92a919500daf9ec645cd42cd6a8c99883e5198d",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/b92a919500daf9ec645cd42cd6a8c99883e5198d",
        "files": [
          "src/node_buffer.cc",
          "src/node_script.cc",
          "src/v8_typed_array.cc"
        ],
        "message": "Remove unused variables.",
        "before_after_code_files": [
          "src/node_buffer.cc||src/node_buffer.cc",
          "src/node_script.cc||src/node_script.cc",
          "src/v8_typed_array.cc||src/v8_typed_array.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_buffer.cc||src/node_buffer.cc": [
          "File: src/node_buffer.cc -> src/node_buffer.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "172:   HandleScope scope;",
          "175:   if (args[0]->IsInt32()) {",
          "177:     size_t length = args[0]->Uint32Value();",
          "179:   } else {",
          "180:     return ThrowException(Exception::TypeError(String::New(\"Bad argument\")));",
          "181:   }",
          "",
          "[Removed Lines]",
          "174:   Buffer *buffer;",
          "178:     buffer = new Buffer(args.This(), length);",
          "",
          "[Added Lines]",
          "177:     new Buffer(args.This(), length);",
          "",
          "---------------"
        ],
        "src/node_script.cc||src/node_script.cc": [
          "File: src/node_script.cc -> src/node_script.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "358:   } else if (context_flag == userContext) {",
          "361:     WrappedContext *nContext = ObjectWrap::Unwrap<WrappedContext>(sandbox);",
          "362:     context = nContext->GetV8Context();",
          "363:   }",
          "",
          "[Removed Lines]",
          "360:     Local<Object> contextArg = args[sandbox_index]->ToObject();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/v8_typed_array.cc||src/v8_typed_array.cc": [
          "File: src/v8_typed_array.cc -> src/v8_typed_array.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "345:       v8::Handle<v8::Object> obj = v8::Handle<v8::Object>::Cast(args[0]);",
          "347:       if (TypedArray<TBytes, TEAType>::HasInstance(obj)) {  // ArrayBufferView.",
          "353:         if (args[1]->Int32Value() < 0)",
          "354:           return ThrowRangeError(\"Offset may not be negative.\");",
          "",
          "[Removed Lines]",
          "348:         v8::Handle<v8::Object> src_buffer = v8::Handle<v8::Object>::Cast(",
          "349:             obj->Get(v8::String::New(\"buffer\")));",
          "350:         v8::Handle<v8::Object> dst_buffer = v8::Handle<v8::Object>::Cast(",
          "351:             args.This()->Get(v8::String::New(\"buffer\")));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dd0188ec088fc87ee689e4efa193e241199de615",
      "candidate_info": {
        "commit_hash": "dd0188ec088fc87ee689e4efa193e241199de615",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/dd0188ec088fc87ee689e4efa193e241199de615",
        "files": [
          "deps/uv/AUTHORS",
          "deps/uv/include/uv-private/eio.h",
          "deps/uv/include/uv.h",
          "deps/uv/src/unix/core.c",
          "deps/uv/src/unix/dl.c",
          "deps/uv/src/unix/eio/eio.c",
          "deps/uv/src/unix/fs.c",
          "deps/uv/src/unix/uv-eio.c",
          "deps/uv/test/test-list.h"
        ],
        "message": "uv: upgrade to d6a06b8",
        "before_after_code_files": [
          "deps/uv/include/uv-private/eio.h||deps/uv/include/uv-private/eio.h",
          "deps/uv/include/uv.h||deps/uv/include/uv.h",
          "deps/uv/src/unix/core.c||deps/uv/src/unix/core.c",
          "deps/uv/src/unix/dl.c||deps/uv/src/unix/dl.c",
          "deps/uv/src/unix/eio/eio.c||deps/uv/src/unix/eio/eio.c",
          "deps/uv/src/unix/fs.c||deps/uv/src/unix/fs.c",
          "deps/uv/src/unix/uv-eio.c||deps/uv/src/unix/uv-eio.c",
          "deps/uv/test/test-list.h||deps/uv/test/test-list.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/include/uv-private/eio.h||deps/uv/include/uv-private/eio.h": [
          "File: deps/uv/include/uv-private/eio.h -> deps/uv/include/uv-private/eio.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "206:   EIO_PRI_DEFAULT =  0",
          "207: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "209: #define ETP_PRI_MIN EIO_PRI_MIN",
          "210: #define ETP_PRI_MAX EIO_PRI_MAX",
          "212: #define ETP_NUM_PRI (ETP_PRI_MAX - ETP_PRI_MIN + 1)",
          "214: #define ETP_REQ eio_req",
          "221: typedef struct {",
          "223:   int size;",
          "224: } etp_reqq;",
          "226: typedef struct {",
          "229: } eio_channel;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "271: void eio_set_max_poll_time (eio_tstamp nseconds);",
          "",
          "[Removed Lines]",
          "264: int eio_init (void (*want_poll)(void), void (*done_poll)(void));",
          "268: int eio_poll (void);",
          "",
          "[Added Lines]",
          "288: int eio_init (void (*want_poll)(eio_channel *), void (*done_poll)(eio_channel *));",
          "291: void eio_channel_init(eio_channel *, void *data);",
          "295: int eio_poll (eio_channel *channel);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "291: #ifndef EIO_NO_WRAPPERS",
          "335: #endif",
          "341: void eio_grp_feed      (eio_req *grp, void (*feed)(eio_req *req), int limit);",
          "342: void eio_grp_limit     (eio_req *grp, int limit);",
          "343: void eio_grp_add       (eio_req *grp, eio_req *req);",
          "",
          "[Removed Lines]",
          "294: eio_req *eio_sync      (int pri, eio_cb cb, void *data);",
          "295: eio_req *eio_fsync     (int fd, int pri, eio_cb cb, void *data);",
          "296: eio_req *eio_fdatasync (int fd, int pri, eio_cb cb, void *data);",
          "297: eio_req *eio_syncfs    (int fd, int pri, eio_cb cb, void *data);",
          "298: eio_req *eio_msync     (void *addr, size_t length, int flags, int pri, eio_cb cb, void *data);",
          "299: eio_req *eio_mtouch    (void *addr, size_t length, int flags, int pri, eio_cb cb, void *data);",
          "300: eio_req *eio_mlock     (void *addr, size_t length, int pri, eio_cb cb, void *data);",
          "301: eio_req *eio_mlockall  (int flags, int pri, eio_cb cb, void *data);",
          "302: eio_req *eio_sync_file_range (int fd, off_t offset, size_t nbytes, unsigned int flags, int pri, eio_cb cb, void *data);",
          "303: eio_req *eio_fallocate (int fd, int mode, off_t offset, size_t len, int pri, eio_cb cb, void *data);",
          "304: eio_req *eio_close     (int fd, int pri, eio_cb cb, void *data);",
          "305: eio_req *eio_readahead (int fd, off_t offset, size_t length, int pri, eio_cb cb, void *data);",
          "306: eio_req *eio_read      (int fd, void *buf, size_t length, off_t offset, int pri, eio_cb cb, void *data);",
          "307: eio_req *eio_write     (int fd, void *buf, size_t length, off_t offset, int pri, eio_cb cb, void *data);",
          "310: eio_req *eio_futime    (int fd, eio_tstamp atime, eio_tstamp mtime, int pri, eio_cb cb, void *data);",
          "311: eio_req *eio_ftruncate (int fd, off_t offset, int pri, eio_cb cb, void *data);",
          "312: eio_req *eio_fchmod    (int fd, eio_mode_t mode, int pri, eio_cb cb, void *data);",
          "313: eio_req *eio_fchown    (int fd, eio_uid_t uid, eio_gid_t gid, int pri, eio_cb cb, void *data);",
          "314: eio_req *eio_dup2      (int fd, int fd2, int pri, eio_cb cb, void *data);",
          "315: eio_req *eio_sendfile  (int out_fd, int in_fd, off_t in_offset, size_t length, int pri, eio_cb cb, void *data);",
          "316: eio_req *eio_open      (const char *path, int flags, eio_mode_t mode, int pri, eio_cb cb, void *data);",
          "317: eio_req *eio_utime     (const char *path, eio_tstamp atime, eio_tstamp mtime, int pri, eio_cb cb, void *data);",
          "318: eio_req *eio_truncate  (const char *path, off_t offset, int pri, eio_cb cb, void *data);",
          "319: eio_req *eio_chown     (const char *path, eio_uid_t uid, eio_gid_t gid, int pri, eio_cb cb, void *data);",
          "320: eio_req *eio_chmod     (const char *path, eio_mode_t mode, int pri, eio_cb cb, void *data);",
          "321: eio_req *eio_mkdir     (const char *path, eio_mode_t mode, int pri, eio_cb cb, void *data);",
          "323: eio_req *eio_rmdir     (const char *path, int pri, eio_cb cb, void *data);",
          "324: eio_req *eio_unlink    (const char *path, int pri, eio_cb cb, void *data);",
          "330: eio_req *eio_mknod     (const char *path, eio_mode_t mode, dev_t dev, int pri, eio_cb cb, void *data);",
          "331: eio_req *eio_link      (const char *path, const char *new_path, int pri, eio_cb cb, void *data);",
          "332: eio_req *eio_symlink   (const char *path, const char *new_path, int pri, eio_cb cb, void *data);",
          "333: eio_req *eio_rename    (const char *path, const char *new_path, int pri, eio_cb cb, void *data);",
          "334: eio_req *eio_custom    (void (*execute)(eio_req *), int pri, eio_cb cb, void *data);",
          "340: eio_req *eio_grp       (eio_cb cb, void *data);",
          "",
          "[Added Lines]",
          "321: eio_req *eio_sync      (int pri, eio_cb cb, void *data, eio_channel *channel);",
          "322: eio_req *eio_fsync     (int fd, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "323: eio_req *eio_fdatasync (int fd, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "324: eio_req *eio_syncfs    (int fd, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "325: eio_req *eio_msync     (void *addr, size_t length, int flags, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "326: eio_req *eio_mtouch    (void *addr, size_t length, int flags, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "327: eio_req *eio_mlock     (void *addr, size_t length, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "328: eio_req *eio_mlockall  (int flags, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "329: eio_req *eio_sync_file_range (int fd, off_t offset, size_t nbytes, unsigned int flags, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "330: eio_req *eio_fallocate (int fd, int mode, off_t offset, size_t len, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "331: eio_req *eio_close     (int fd, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "332: eio_req *eio_readahead (int fd, off_t offset, size_t length, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "333: eio_req *eio_read      (int fd, void *buf, size_t length, off_t offset, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "334: eio_req *eio_write     (int fd, void *buf, size_t length, off_t offset, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "337: eio_req *eio_futime    (int fd, eio_tstamp atime, eio_tstamp mtime, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "338: eio_req *eio_ftruncate (int fd, off_t offset, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "339: eio_req *eio_fchmod    (int fd, eio_mode_t mode, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "340: eio_req *eio_fchown    (int fd, eio_uid_t uid, eio_gid_t gid, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "341: eio_req *eio_dup2      (int fd, int fd2, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "342: eio_req *eio_sendfile  (int out_fd, int in_fd, off_t in_offset, size_t length, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "343: eio_req *eio_open      (const char *path, int flags, eio_mode_t mode, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "344: eio_req *eio_utime     (const char *path, eio_tstamp atime, eio_tstamp mtime, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "345: eio_req *eio_truncate  (const char *path, off_t offset, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "346: eio_req *eio_chown     (const char *path, eio_uid_t uid, eio_gid_t gid, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "347: eio_req *eio_chmod     (const char *path, eio_mode_t mode, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "348: eio_req *eio_mkdir     (const char *path, eio_mode_t mode, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "350: eio_req *eio_rmdir     (const char *path, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "351: eio_req *eio_unlink    (const char *path, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "357: eio_req *eio_mknod     (const char *path, eio_mode_t mode, dev_t dev, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "358: eio_req *eio_link      (const char *path, const char *new_path, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "359: eio_req *eio_symlink   (const char *path, const char *new_path, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "360: eio_req *eio_rename    (const char *path, const char *new_path, int pri, eio_cb cb, void *data, eio_channel *channel);",
          "361: eio_req *eio_custom    (void (*execute)(eio_req *), int pri, eio_cb cb, void *data, eio_channel *channel);",
          "367: eio_req *eio_grp       (eio_cb cb, void *data, eio_channel *channel);",
          "",
          "---------------"
        ],
        "deps/uv/include/uv.h||deps/uv/include/uv.h": [
          "File: deps/uv/include/uv.h -> deps/uv/include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1401:   uv_async_t uv_eio_want_poll_notifier;",
          "1402:   uv_async_t uv_eio_done_poll_notifier;",
          "1403:   uv_idle_t uv_eio_poller;",
          "1405:   uv_counters_t counters;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1404:   eio_channel uv_eio_channel;",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/core.c||deps/uv/src/unix/core.c": [
          "File: deps/uv/src/unix/core.c -> deps/uv/src/unix/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:   loop->ev = ev_loop_new(EVFLAG_AUTO);",
          "168: #endif",
          "169:   ev_set_userdata(loop->ev, loop);",
          "170:   return 0;",
          "171: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "170:   eio_channel_init(&loop->uv_eio_channel, loop);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "709:   uv_ref(loop);",
          "711:   req = eio_custom(getaddrinfo_thread_proc, EIO_PRI_DEFAULT,",
          "713:   assert(req);",
          "714:   assert(req->data == handle);",
          "",
          "[Removed Lines]",
          "712:       uv_getaddrinfo_done, handle);",
          "",
          "[Added Lines]",
          "713:       uv_getaddrinfo_done, handle, &loop->uv_eio_channel);",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/dl.c||deps/uv/src/unix/dl.c": [
          "File: deps/uv/src/unix/dl.c -> deps/uv/src/unix/dl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include <dlfcn.h>",
          "26: #include <errno.h>",
          "35: uv_err_t uv_dlopen(const char* filename, uv_lib_t* library) {",
          "36:   void* handle = dlopen(filename, RTLD_LAZY);",
          "37:   if (handle == NULL) {",
          "39:   }",
          "",
          "[Removed Lines]",
          "32: static const uv_err_t uv_inval_ = { UV_EINVAL, EINVAL };",
          "38:     return uv_inval_;",
          "",
          "[Added Lines]",
          "32:     return uv__new_sys_error(errno);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46: uv_err_t uv_dlclose(uv_lib_t library) {",
          "47:   if (dlclose(library) != 0) {",
          "49:   }",
          "51:   return uv_ok_;",
          "",
          "[Removed Lines]",
          "48:     return uv_inval_;",
          "",
          "[Added Lines]",
          "42:     return uv__new_sys_error(errno);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55: uv_err_t uv_dlsym(uv_lib_t library, const char* name, void** ptr) {",
          "65:   }",
          "",
          "[Removed Lines]",
          "56:   void* address;",
          "59:   dlerror();",
          "61:   address = dlsym(library, name);",
          "63:   if (dlerror()) {",
          "64:     return uv_inval_;",
          "",
          "[Added Lines]",
          "50:   void* address = dlsym(library, name);",
          "51:   if (address == NULL) {",
          "52:     return uv__new_sys_error(errno);",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/eio/eio.c||deps/uv/src/unix/eio/eio.c": [
          "File: deps/uv/src/unix/eio/eio.c -> deps/uv/src/unix/eio/eio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "363: #define EIO_TICKS ((1000000 + 1023) >> 10)",
          "368: struct etp_worker;",
          "371: #define ETP_DESTROY(req) eio_destroy (req)",
          "372: static int eio_finish (eio_req *req);",
          "373: #define ETP_FINISH(req)  eio_finish (req)",
          "",
          "[Removed Lines]",
          "365: #define ETP_PRI_MIN EIO_PRI_MIN",
          "366: #define ETP_PRI_MAX EIO_PRI_MAX",
          "370: #define ETP_REQ eio_req",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "382: ecb_inline int",
          "383: tvdiff (struct timeval *tv1, struct timeval *tv2)",
          "",
          "[Removed Lines]",
          "379: #define ETP_NUM_PRI (ETP_PRI_MAX - ETP_PRI_MIN + 1)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "389: static unsigned int started, idle, wanted = 4;",
          "",
          "[Removed Lines]",
          "391: static void (*want_poll_cb) (void);",
          "392: static void (*done_poll_cb) (void);",
          "",
          "[Added Lines]",
          "385: static void (*want_poll_cb) (eio_channel *);",
          "386: static void (*done_poll_cb) (eio_channel *);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "506:   return retval;",
          "507: }",
          "519: static etp_reqq req_queue;",
          "522: static void ecb_noinline ecb_cold",
          "523: reqq_init (etp_reqq *q)",
          "",
          "[Removed Lines]",
          "514: typedef struct {",
          "516:   int size;",
          "517: } etp_reqq;",
          "520: static etp_reqq res_queue;",
          "",
          "[Added Lines]",
          "504: static eio_channel default_channel;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "574: }",
          "576: static int ecb_cold",
          "578: {",
          "579:   X_MUTEX_CREATE (wrklock);",
          "580:   X_MUTEX_CREATE (reslock);",
          "",
          "[Removed Lines]",
          "577: etp_init (void (*want_poll)(void), void (*done_poll)(void))",
          "",
          "[Added Lines]",
          "561: etp_init (void (*want_poll)(eio_channel *), void (*done_poll)(eio_channel *))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "582:   X_COND_CREATE  (reqwait);",
          "584:   reqq_init (&req_queue);",
          "587:   wrk_first.next =",
          "588:   wrk_first.prev = &wrk_first;",
          "",
          "[Removed Lines]",
          "585:   reqq_init (&res_queue);",
          "",
          "[Added Lines]",
          "569:   eio_channel_init (&default_channel, 0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "656:   X_UNLOCK (wrklock);",
          "657: }",
          "659: static int",
          "661: {",
          "662:   unsigned int maxreqs;",
          "663:   unsigned int maxtime;",
          "664:   struct timeval tv_start, tv_now;",
          "666:   X_LOCK (reslock);",
          "667:   maxreqs = max_poll_reqs;",
          "",
          "[Removed Lines]",
          "660: etp_poll (void)",
          "",
          "[Added Lines]",
          "643: void",
          "644: eio_channel_init(eio_channel *channel, void *data) {",
          "645:   reqq_init(&channel->res_queue);",
          "646:   channel->data = data;",
          "647: }",
          "650: etp_poll (eio_channel *channel)",
          "655:   if(!channel) channel = &default_channel;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "678:       etp_maybe_start_thread ();",
          "680:       X_LOCK (reslock);",
          "683:       if (req)",
          "684:         {",
          "685:           --npending;",
          "689:         }",
          "691:       X_UNLOCK (reslock);",
          "",
          "[Removed Lines]",
          "681:       req = reqq_shift (&res_queue);",
          "687:           if (!res_queue.size && done_poll_cb)",
          "688:             done_poll_cb ();",
          "",
          "[Added Lines]",
          "672:       req = reqq_shift (&channel->res_queue);",
          "678:           if (!channel->res_queue.size && done_poll_cb)",
          "679:             done_poll_cb (channel);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "753:       ++npending;",
          "758:       X_UNLOCK (reslock);",
          "759:     }",
          "",
          "[Removed Lines]",
          "755:       if (!reqq_push (&res_queue, req) && want_poll_cb)",
          "756:         want_poll_cb ();",
          "",
          "[Added Lines]",
          "746:       if (!reqq_push (&req->channel->res_queue, req) && want_poll_cb)",
          "747:         want_poll_cb (req->channel);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "970:   etp_set_max_parallel (nthreads);",
          "971: }",
          "974: {",
          "976: }",
          "",
          "[Removed Lines]",
          "973: int eio_poll (void)",
          "975:   return etp_poll ();",
          "",
          "[Added Lines]",
          "964: int eio_poll (eio_channel *channel)",
          "966:   return etp_poll (channel);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2093:       ++npending;",
          "2098:       self->req = 0;",
          "2099:       etp_worker_clear (self);",
          "",
          "[Removed Lines]",
          "2095:       if (!reqq_push (&res_queue, req) && want_poll_cb)",
          "2096:         want_poll_cb ();",
          "",
          "[Added Lines]",
          "2086:       if (!reqq_push (&req->channel->res_queue, req) && want_poll_cb)",
          "2087:         want_poll_cb (req->channel);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2114: int ecb_cold",
          "2116: {",
          "2117: #if !HAVE_PREADWRITE",
          "2118:   X_MUTEX_CREATE (preadwritelock);",
          "",
          "[Removed Lines]",
          "2115: eio_init (void (*want_poll)(void), void (*done_poll)(void))",
          "",
          "[Added Lines]",
          "2106: eio_init (void (*want_poll)(eio_channel *), void (*done_poll)(eio_channel *))",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2138:   req->pri     = pri;      \\",
          "2139:   req->finish  = cb;      \\",
          "2140:   req->data    = data;      \\",
          "2143: #define SEND eio_submit (req); return req",
          "",
          "[Removed Lines]",
          "2141:   req->destroy = eio_api_destroy;",
          "",
          "[Added Lines]",
          "2132:   req->destroy = eio_api_destroy; \\",
          "2133:   req->channel = channel",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2295: #ifndef EIO_NO_WRAPPERS",
          "2298: {",
          "2299:   REQ (EIO_NOP); SEND;",
          "2300: }",
          "2303: {",
          "2304:   REQ (EIO_BUSY); req->nv1 = delay; SEND;",
          "2305: }",
          "2308: {",
          "2309:   REQ (EIO_SYNC); SEND;",
          "2310: }",
          "2313: {",
          "2314:   REQ (EIO_FSYNC); req->int1 = fd; SEND;",
          "2315: }",
          "2318: {",
          "2319:   REQ (EIO_MSYNC); req->ptr2 = addr; req->size = length; req->int1 = flags; SEND;",
          "2320: }",
          "2323: {",
          "2324:   REQ (EIO_FDATASYNC); req->int1 = fd; SEND;",
          "2325: }",
          "2328: {",
          "2329:   REQ (EIO_SYNCFS); req->int1 = fd; SEND;",
          "2330: }",
          "2333: {",
          "2334:   REQ (EIO_SYNC_FILE_RANGE); req->int1 = fd; req->offs = offset; req->size = nbytes; req->int2 = flags; SEND;",
          "2335: }",
          "2338: {",
          "2339:   REQ (EIO_MTOUCH); req->ptr2 = addr; req->size = length; req->int1 = flags; SEND;",
          "2340: }",
          "2343: {",
          "2344:   REQ (EIO_MLOCK); req->ptr2 = addr; req->size = length; SEND;",
          "2345: }",
          "2348: {",
          "2349:   REQ (EIO_MLOCKALL); req->int1 = flags; SEND;",
          "2350: }",
          "2353: {",
          "2354:   REQ (EIO_FALLOCATE); req->int1 = fd; req->int2 = mode; req->offs = offset; req->size = len; SEND;",
          "2355: }",
          "2358: {",
          "2359:   REQ (EIO_CLOSE); req->int1 = fd; SEND;",
          "2360: }",
          "2363: {",
          "2364:   REQ (EIO_READAHEAD); req->int1 = fd; req->offs = offset; req->size = length; SEND;",
          "2365: }",
          "2368: {",
          "2369:   REQ (EIO_READ); req->int1 = fd; req->offs = offset; req->size = length; req->ptr2 = buf; SEND;",
          "2370: }",
          "2373: {",
          "2374:   REQ (EIO_WRITE); req->int1 = fd; req->offs = offset; req->size = length; req->ptr2 = buf; SEND;",
          "2375: }",
          "2378: {",
          "2379:   REQ (EIO_FSTAT); req->int1 = fd; SEND;",
          "2380: }",
          "2383: {",
          "2384:   REQ (EIO_FSTATVFS); req->int1 = fd; SEND;",
          "2385: }",
          "2388: {",
          "2389:   REQ (EIO_FUTIME); req->int1 = fd; req->nv1 = atime; req->nv2 = mtime; SEND;",
          "2390: }",
          "2393: {",
          "2394:   REQ (EIO_FTRUNCATE); req->int1 = fd; req->offs = offset; SEND;",
          "2395: }",
          "2398: {",
          "2399:   REQ (EIO_FCHMOD); req->int1 = fd; req->int2 = (long)mode; SEND;",
          "2400: }",
          "2403: {",
          "2404:   REQ (EIO_FCHOWN); req->int1 = fd; req->int2 = (long)uid; req->int3 = (long)gid; SEND;",
          "2405: }",
          "2408: {",
          "2409:   REQ (EIO_DUP2); req->int1 = fd; req->int2 = fd2; SEND;",
          "2410: }",
          "2413: {",
          "2414:   REQ (EIO_SENDFILE); req->int1 = out_fd; req->int2 = in_fd; req->offs = in_offset; req->size = length; SEND;",
          "2415: }",
          "2418: {",
          "2419:   REQ (EIO_OPEN); PATH; req->int1 = flags; req->int2 = (long)mode; SEND;",
          "2420: }",
          "2423: {",
          "2424:   REQ (EIO_UTIME); PATH; req->nv1 = atime; req->nv2 = mtime; SEND;",
          "2425: }",
          "2428: {",
          "2429:   REQ (EIO_TRUNCATE); PATH; req->offs = offset; SEND;",
          "2430: }",
          "2433: {",
          "2434:   REQ (EIO_CHOWN); PATH; req->int2 = (long)uid; req->int3 = (long)gid; SEND;",
          "2435: }",
          "2438: {",
          "2439:   REQ (EIO_CHMOD); PATH; req->int2 = (long)mode; SEND;",
          "2440: }",
          "2443: {",
          "2444:   REQ (EIO_MKDIR); PATH; req->int2 = (long)mode; SEND;",
          "2445: }",
          "2447: static eio_req *",
          "2449: {",
          "2450:   REQ (type); PATH; SEND;",
          "2451: }",
          "2454: {",
          "2456: }",
          "2459: {",
          "2461: }",
          "2464: {",
          "2466: }",
          "2469: {",
          "2471: }",
          "2474: {",
          "2476: }",
          "2479: {",
          "2481: }",
          "2484: {",
          "2486: }",
          "2489: {",
          "2490:   REQ (EIO_READDIR); PATH; req->int1 = flags; SEND;",
          "2491: }",
          "2494: {",
          "2495:   REQ (EIO_MKNOD); PATH; req->int2 = (long)mode; req->offs = (off_t)dev; SEND;",
          "2496: }",
          "2498: static eio_req *",
          "2500: {",
          "2501:   REQ (type); PATH;",
          "",
          "[Removed Lines]",
          "2297: eio_req *eio_nop (int pri, eio_cb cb, void *data)",
          "2302: eio_req *eio_busy (double delay, int pri, eio_cb cb, void *data)",
          "2307: eio_req *eio_sync (int pri, eio_cb cb, void *data)",
          "2312: eio_req *eio_fsync (int fd, int pri, eio_cb cb, void *data)",
          "2317: eio_req *eio_msync (void *addr, size_t length, int flags, int pri, eio_cb cb, void *data)",
          "2322: eio_req *eio_fdatasync (int fd, int pri, eio_cb cb, void *data)",
          "2327: eio_req *eio_syncfs (int fd, int pri, eio_cb cb, void *data)",
          "2332: eio_req *eio_sync_file_range (int fd, off_t offset, size_t nbytes, unsigned int flags, int pri, eio_cb cb, void *data)",
          "2337: eio_req *eio_mtouch (void *addr, size_t length, int flags, int pri, eio_cb cb, void *data)",
          "2342: eio_req *eio_mlock (void *addr, size_t length, int pri, eio_cb cb, void *data)",
          "2347: eio_req *eio_mlockall (int flags, int pri, eio_cb cb, void *data)",
          "2352: eio_req *eio_fallocate (int fd, int mode, off_t offset, size_t len, int pri, eio_cb cb, void *data)",
          "2357: eio_req *eio_close (int fd, int pri, eio_cb cb, void *data)",
          "2362: eio_req *eio_readahead (int fd, off_t offset, size_t length, int pri, eio_cb cb, void *data)",
          "2367: eio_req *eio_read (int fd, void *buf, size_t length, off_t offset, int pri, eio_cb cb, void *data)",
          "2372: eio_req *eio_write (int fd, void *buf, size_t length, off_t offset, int pri, eio_cb cb, void *data)",
          "2377: eio_req *eio_fstat (int fd, int pri, eio_cb cb, void *data)",
          "2382: eio_req *eio_fstatvfs (int fd, int pri, eio_cb cb, void *data)",
          "2387: eio_req *eio_futime (int fd, double atime, double mtime, int pri, eio_cb cb, void *data)",
          "2392: eio_req *eio_ftruncate (int fd, off_t offset, int pri, eio_cb cb, void *data)",
          "2397: eio_req *eio_fchmod (int fd, eio_mode_t mode, int pri, eio_cb cb, void *data)",
          "2402: eio_req *eio_fchown (int fd, eio_uid_t uid, eio_gid_t gid, int pri, eio_cb cb, void *data)",
          "2407: eio_req *eio_dup2 (int fd, int fd2, int pri, eio_cb cb, void *data)",
          "2412: eio_req *eio_sendfile (int out_fd, int in_fd, off_t in_offset, size_t length, int pri, eio_cb cb, void *data)",
          "2417: eio_req *eio_open (const char *path, int flags, eio_mode_t mode, int pri, eio_cb cb, void *data)",
          "2422: eio_req *eio_utime (const char *path, double atime, double mtime, int pri, eio_cb cb, void *data)",
          "2427: eio_req *eio_truncate (const char *path, off_t offset, int pri, eio_cb cb, void *data)",
          "2432: eio_req *eio_chown (const char *path, eio_uid_t uid, eio_gid_t gid, int pri, eio_cb cb, void *data)",
          "2437: eio_req *eio_chmod (const char *path, eio_mode_t mode, int pri, eio_cb cb, void *data)",
          "2442: eio_req *eio_mkdir (const char *path, eio_mode_t mode, int pri, eio_cb cb, void *data)",
          "2448: eio__1path (int type, const char *path, int pri, eio_cb cb, void *data)",
          "2453: eio_req *eio_readlink (const char *path, int pri, eio_cb cb, void *data)",
          "2455:   return eio__1path (EIO_READLINK, path, pri, cb, data);",
          "2458: eio_req *eio_realpath (const char *path, int pri, eio_cb cb, void *data)",
          "2460:   return eio__1path (EIO_REALPATH, path, pri, cb, data);",
          "2463: eio_req *eio_stat (const char *path, int pri, eio_cb cb, void *data)",
          "2465:   return eio__1path (EIO_STAT, path, pri, cb, data);",
          "2468: eio_req *eio_lstat (const char *path, int pri, eio_cb cb, void *data)",
          "2470:   return eio__1path (EIO_LSTAT, path, pri, cb, data);",
          "2473: eio_req *eio_statvfs (const char *path, int pri, eio_cb cb, void *data)",
          "2475:   return eio__1path (EIO_STATVFS, path, pri, cb, data);",
          "2478: eio_req *eio_unlink (const char *path, int pri, eio_cb cb, void *data)",
          "2480:   return eio__1path (EIO_UNLINK, path, pri, cb, data);",
          "2483: eio_req *eio_rmdir (const char *path, int pri, eio_cb cb, void *data)",
          "2485:   return eio__1path (EIO_RMDIR, path, pri, cb, data);",
          "2488: eio_req *eio_readdir (const char *path, int flags, int pri, eio_cb cb, void *data)",
          "2493: eio_req *eio_mknod (const char *path, eio_mode_t mode, dev_t dev, int pri, eio_cb cb, void *data)",
          "2499: eio__2path (int type, const char *path, const char *new_path, int pri, eio_cb cb, void *data)",
          "",
          "[Added Lines]",
          "2289: eio_req *eio_nop (int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2294: eio_req *eio_busy (double delay, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2299: eio_req *eio_sync (int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2304: eio_req *eio_fsync (int fd, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2309: eio_req *eio_msync (void *addr, size_t length, int flags, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2314: eio_req *eio_fdatasync (int fd, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2319: eio_req *eio_syncfs (int fd, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2324: eio_req *eio_sync_file_range (int fd, off_t offset, size_t nbytes, unsigned int flags, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2329: eio_req *eio_mtouch (void *addr, size_t length, int flags, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2334: eio_req *eio_mlock (void *addr, size_t length, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2339: eio_req *eio_mlockall (int flags, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2344: eio_req *eio_fallocate (int fd, int mode, off_t offset, size_t len, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2349: eio_req *eio_close (int fd, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2354: eio_req *eio_readahead (int fd, off_t offset, size_t length, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2359: eio_req *eio_read (int fd, void *buf, size_t length, off_t offset, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2364: eio_req *eio_write (int fd, void *buf, size_t length, off_t offset, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2369: eio_req *eio_fstat (int fd, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2374: eio_req *eio_fstatvfs (int fd, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2379: eio_req *eio_futime (int fd, double atime, double mtime, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2384: eio_req *eio_ftruncate (int fd, off_t offset, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2389: eio_req *eio_fchmod (int fd, eio_mode_t mode, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2394: eio_req *eio_fchown (int fd, eio_uid_t uid, eio_gid_t gid, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2399: eio_req *eio_dup2 (int fd, int fd2, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2404: eio_req *eio_sendfile (int out_fd, int in_fd, off_t in_offset, size_t length, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2409: eio_req *eio_open (const char *path, int flags, eio_mode_t mode, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2414: eio_req *eio_utime (const char *path, double atime, double mtime, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2419: eio_req *eio_truncate (const char *path, off_t offset, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2424: eio_req *eio_chown (const char *path, eio_uid_t uid, eio_gid_t gid, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2429: eio_req *eio_chmod (const char *path, eio_mode_t mode, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2434: eio_req *eio_mkdir (const char *path, eio_mode_t mode, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2440: eio__1path (int type, const char *path, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2445: eio_req *eio_readlink (const char *path, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2447:   return eio__1path (EIO_READLINK, path, pri, cb, data, channel);",
          "2450: eio_req *eio_realpath (const char *path, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2452:   return eio__1path (EIO_REALPATH, path, pri, cb, data, channel);",
          "2455: eio_req *eio_stat (const char *path, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2457:   return eio__1path (EIO_STAT, path, pri, cb, data, channel);",
          "2460: eio_req *eio_lstat (const char *path, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2462:   return eio__1path (EIO_LSTAT, path, pri, cb, data, channel);",
          "2465: eio_req *eio_statvfs (const char *path, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2467:   return eio__1path (EIO_STATVFS, path, pri, cb, data, channel);",
          "2470: eio_req *eio_unlink (const char *path, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2472:   return eio__1path (EIO_UNLINK, path, pri, cb, data, channel);",
          "2475: eio_req *eio_rmdir (const char *path, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2477:   return eio__1path (EIO_RMDIR, path, pri, cb, data, channel);",
          "2480: eio_req *eio_readdir (const char *path, int flags, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2485: eio_req *eio_mknod (const char *path, eio_mode_t mode, dev_t dev, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2491: eio__2path (int type, const char *path, const char *new_path, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2511:   SEND;",
          "2512: }",
          "2515: {",
          "2517: }",
          "2520: {",
          "2522: }",
          "2525: {",
          "2527: }",
          "2530: {",
          "2531:   REQ (EIO_CUSTOM); req->feed = execute; SEND;",
          "2532: }",
          "2534: #endif",
          "2537: {",
          "2538:   const int pri = EIO_PRI_MAX;",
          "",
          "[Removed Lines]",
          "2514: eio_req *eio_link (const char *path, const char *new_path, int pri, eio_cb cb, void *data)",
          "2516:   return eio__2path (EIO_LINK, path, new_path, pri, cb, data);",
          "2519: eio_req *eio_symlink (const char *path, const char *new_path, int pri, eio_cb cb, void *data)",
          "2521:   return eio__2path (EIO_SYMLINK, path, new_path, pri, cb, data);",
          "2524: eio_req *eio_rename (const char *path, const char *new_path, int pri, eio_cb cb, void *data)",
          "2526:   return eio__2path (EIO_RENAME, path, new_path, pri, cb, data);",
          "2529: eio_req *eio_custom (void (*execute)(eio_req *), int pri, eio_cb cb, void *data)",
          "2536: eio_req *eio_grp (eio_cb cb, void *data)",
          "",
          "[Added Lines]",
          "2506: eio_req *eio_link (const char *path, const char *new_path, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2508:   return eio__2path (EIO_LINK, path, new_path, pri, cb, data, channel);",
          "2511: eio_req *eio_symlink (const char *path, const char *new_path, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2513:   return eio__2path (EIO_SYMLINK, path, new_path, pri, cb, data, channel);",
          "2516: eio_req *eio_rename (const char *path, const char *new_path, int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2518:   return eio__2path (EIO_RENAME, path, new_path, pri, cb, data, channel);",
          "2521: eio_req *eio_custom (void (*execute)(eio_req *), int pri, eio_cb cb, void *data, eio_channel *channel)",
          "2528: eio_req *eio_grp (eio_cb cb, void *data, eio_channel *channel)",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/fs.c||deps/uv/src/unix/fs.c": [
          "File: deps/uv/src/unix/fs.c -> deps/uv/src/unix/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:   uv_fs_req_init(loop, req, type, path, cb); \\",
          "45:   if (cb) { \\",
          "48:     if (!req->eio) { \\",
          "49:       uv__set_sys_error(loop, ENOMEM); \\",
          "50:       return -1; \\",
          "",
          "[Removed Lines]",
          "47:     req->eio = eiofunc(args, EIO_PRI_DEFAULT, uv__fs_after, req); \\",
          "",
          "[Added Lines]",
          "47:     req->eio = eiofunc(args, EIO_PRI_DEFAULT, uv__fs_after, req, &loop->uv_eio_channel); \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "191:   if (cb) {",
          "193:     uv_ref(loop);",
          "195:     if (!req->eio) {",
          "196:       uv__set_sys_error(loop, ENOMEM);",
          "197:       return -1;",
          "",
          "[Removed Lines]",
          "194:     req->eio = eio_open(path, flags, mode, EIO_PRI_DEFAULT, uv__fs_after, req);",
          "",
          "[Added Lines]",
          "194:     req->eio = eio_open(path, flags, mode, EIO_PRI_DEFAULT, uv__fs_after, req, &loop->uv_eio_channel);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "223:     uv_ref(loop);",
          "224:     req->eio = eio_read(fd, buf, length, offset, EIO_PRI_DEFAULT,",
          "227:     if (!req->eio) {",
          "228:       uv__set_sys_error(loop, ENOMEM);",
          "",
          "[Removed Lines]",
          "225:         uv__fs_after, req);",
          "",
          "[Added Lines]",
          "225:         uv__fs_after, req,  &loop->uv_eio_channel);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "261:     uv_ref(loop);",
          "262:     req->eio = eio_write(file, buf, length, offset, EIO_PRI_DEFAULT,",
          "264:     if (!req->eio) {",
          "265:       uv__set_sys_error(loop, ENOMEM);",
          "266:       return -1;",
          "",
          "[Removed Lines]",
          "263:         uv__fs_after, req);",
          "",
          "[Added Lines]",
          "263:         uv__fs_after, req,  &loop->uv_eio_channel);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "307:   if (cb) {",
          "309:     uv_ref(loop);",
          "311:     if (!req->eio) {",
          "312:       uv__set_sys_error(loop, ENOMEM);",
          "313:       return -1;",
          "",
          "[Removed Lines]",
          "310:     req->eio = eio_readdir(path, flags, EIO_PRI_DEFAULT, uv__fs_after, req);",
          "",
          "[Added Lines]",
          "310:     req->eio = eio_readdir(path, flags, EIO_PRI_DEFAULT, uv__fs_after, req,  &loop->uv_eio_channel);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "377:   if (cb) {",
          "379:     uv_ref(loop);",
          "382:     free(pathdup);",
          "",
          "[Removed Lines]",
          "380:     req->eio = eio_stat(pathdup, EIO_PRI_DEFAULT, uv__fs_after, req);",
          "",
          "[Added Lines]",
          "380:     req->eio = eio_stat(pathdup, EIO_PRI_DEFAULT, uv__fs_after, req,  &loop->uv_eio_channel);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "411:   if (cb) {",
          "413:     uv_ref(loop);",
          "416:     if (!req->eio) {",
          "417:       uv__set_sys_error(loop, ENOMEM);",
          "",
          "[Removed Lines]",
          "414:     req->eio = eio_fstat(file, EIO_PRI_DEFAULT, uv__fs_after, req);",
          "",
          "[Added Lines]",
          "414:     req->eio = eio_fstat(file, EIO_PRI_DEFAULT, uv__fs_after, req,  &loop->uv_eio_channel);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "550:   if (cb) {",
          "552:     uv_ref(loop);",
          "555:     free(pathdup);",
          "",
          "[Removed Lines]",
          "553:     req->eio = eio_lstat(pathdup, EIO_PRI_DEFAULT, uv__fs_after, req);",
          "",
          "[Added Lines]",
          "553:     req->eio = eio_lstat(pathdup, EIO_PRI_DEFAULT, uv__fs_after, req,  &loop->uv_eio_channel);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "598:   uv_fs_req_init(loop, req, UV_FS_READLINK, path, cb);",
          "600:   if (cb) {",
          "602:       uv_ref(loop);",
          "603:       return 0;",
          "604:     } else {",
          "",
          "[Removed Lines]",
          "601:     if ((req->eio = eio_readlink(path, EIO_PRI_DEFAULT, uv__fs_after, req))) {",
          "",
          "[Added Lines]",
          "601:     if ((req->eio = eio_readlink(path, EIO_PRI_DEFAULT, uv__fs_after, req,  &loop->uv_eio_channel))) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "692:   req->work_cb = work_cb;",
          "693:   req->after_work_cb = after_work_cb;",
          "697:   if (!req->eio) {",
          "698:     uv__set_sys_error(loop, ENOMEM);",
          "",
          "[Removed Lines]",
          "695:   req->eio = eio_custom(uv__work, EIO_PRI_DEFAULT, uv__after_work, req);",
          "",
          "[Added Lines]",
          "695:   req->eio = eio_custom(uv__work, EIO_PRI_DEFAULT, uv__after_work, req,  &loop->uv_eio_channel);",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/uv-eio.c||deps/uv/src/unix/uv-eio.c": [
          "File: deps/uv/src/unix/uv-eio.c -> deps/uv/src/unix/uv-eio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include <stdio.h>",
          "34: static void uv_eio_do_poll(uv_idle_t* watcher, int status) {",
          "35:   assert(watcher == &(watcher->loop->uv_eio_poller));",
          "41:     uv_idle_stop(watcher);",
          "42:     uv_unref(watcher->loop);",
          "",
          "[Removed Lines]",
          "31: static uv_loop_t* main_loop;",
          "39:   if (eio_poll() != -1 && uv_is_active((uv_handle_t*) watcher)) {",
          "",
          "[Added Lines]",
          "35:   if (eio_poll(&watcher->loop->uv_eio_channel) != -1 && uv_is_active((uv_handle_t*) watcher)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:     uv_idle_start(&loop->uv_eio_poller, uv_eio_do_poll);",
          "58:     uv_ref(loop);",
          "",
          "[Removed Lines]",
          "55:   if (eio_poll() == -1 && !uv_is_active((uv_handle_t*) &loop->uv_eio_poller)) {",
          "",
          "[Added Lines]",
          "51:   if (eio_poll(&watcher->loop->uv_eio_channel) == -1 && !uv_is_active((uv_handle_t*) &loop->uv_eio_poller)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72:     uv_idle_stop(&loop->uv_eio_poller);",
          "73:     uv_unref(loop);",
          "",
          "[Removed Lines]",
          "70:   if (eio_poll() != -1 && uv_is_active((uv_handle_t*) &loop->uv_eio_poller)) {",
          "",
          "[Added Lines]",
          "66:   if (eio_poll(&watcher->loop->uv_eio_channel) != -1 && uv_is_active((uv_handle_t*) &loop->uv_eio_poller)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "82: static void uv_eio_want_poll(void) {",
          "",
          "[Added Lines]",
          "78: static void uv_eio_want_poll(eio_channel *channel) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "91: }",
          "100: }",
          "",
          "[Removed Lines]",
          "90:   uv_async_send(&main_loop->uv_eio_want_poll_notifier);",
          "94: static void uv_eio_done_poll(void) {",
          "99:   uv_async_send(&main_loop->uv_eio_done_poll_notifier);",
          "",
          "[Added Lines]",
          "86:   uv_async_send(&((uv_loop_t *)channel->data)->uv_eio_want_poll_notifier);",
          "90: static void uv_eio_done_poll(eio_channel *channel) {",
          "95:   uv_async_send(&((uv_loop_t *)channel->data)->uv_eio_done_poll_notifier);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "104:   if (loop->counters.eio_init == 0) {",
          "105:     loop->counters.eio_init++;",
          "109:     uv_idle_init(loop, &loop->uv_eio_poller);",
          "110:     uv_idle_start(&loop->uv_eio_poller, uv_eio_do_poll);",
          "",
          "[Removed Lines]",
          "107:     main_loop = loop;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "126:     eio_set_max_poll_reqs(10);",
          "133:   }",
          "134: }",
          "",
          "[Removed Lines]",
          "127:   } else {",
          "132:     assert(main_loop == loop);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/test/test-list.h||deps/uv/test/test-list.h": [
          "File: deps/uv/test/test-list.h -> deps/uv/test/test-list.h"
        ]
      }
    },
    {
      "candidate_hash": "35a1421e9670e7b5bc042758170d20673aed666f",
      "candidate_info": {
        "commit_hash": "35a1421e9670e7b5bc042758170d20673aed666f",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/35a1421e9670e7b5bc042758170d20673aed666f",
        "files": [
          "configure",
          "node.gyp",
          "src/node.cc",
          "src/node_dtrace.cc",
          "src/node_win32_etw_provider-inl.h",
          "src/node_win32_etw_provider.cc",
          "src/node_win32_etw_provider.h",
          "src/res/node_etw_provider.man",
          "tools/msvs/msi/nodemsi.wixproj",
          "tools/msvs/msi/product.wxs",
          "vcbuild.bat"
        ],
        "message": "Windows: Enable ETW events. This commit enables ETW events to be fired on Windows for existing DTrace probes.  ETW instrumentation is enabled by default.  It is possible to build node.exe without ETW instrumentation by using --without-etw option with configure script.",
        "before_after_code_files": [
          "node.gyp||node.gyp",
          "src/node.cc||src/node.cc",
          "src/node_dtrace.cc||src/node_dtrace.cc",
          "src/node_win32_etw_provider-inl.h||src/node_win32_etw_provider-inl.h",
          "src/node_win32_etw_provider.cc||src/node_win32_etw_provider.cc",
          "src/node_win32_etw_provider.h||src/node_win32_etw_provider.h",
          "src/res/node_etw_provider.man||src/res/node_etw_provider.man",
          "tools/msvs/msi/nodemsi.wixproj||tools/msvs/msi/nodemsi.wixproj",
          "tools/msvs/msi/product.wxs||tools/msvs/msi/product.wxs",
          "vcbuild.bat||vcbuild.bat"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "node.gyp||node.gyp": [
          "File: node.gyp -> node.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:     # See http://codereview.chromium.org/8159015",
          "6:     'werror': '',",
          "7:     'node_use_dtrace%': 'false',",
          "8:     'node_shared_v8%': 'false',",
          "9:     'node_shared_zlib%': 'false',",
          "10:     'node_use_openssl%': 'true',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8:     'node_use_etw%': 'false',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "163:             }",
          "164:           ] ],",
          "165:         } ],",
          "167:         [ 'node_shared_v8==\"true\"', {",
          "168:           'sources': [",
          "169:             '<(node_shared_v8_includes)/v8.h',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:         [ 'node_use_etw==\"true\"', {",
          "168:           'defines': [ 'HAVE_ETW=1' ],",
          "169:           'dependencies': [ 'node_etw' ],",
          "170:           'sources': [",
          "171:             'src/node_win32_etw_provider.h',",
          "172:             'src/node_win32_etw_provider-inl.h',",
          "173:             'src/node_win32_etw_provider.cc',",
          "174:             'src/node_dtrace.cc',",
          "175:             '<(SHARED_INTERMEDIATE_DIR)/node_etw_provider.h',",
          "176:             '<(SHARED_INTERMEDIATE_DIR)/node_etw_provider.rc',",
          "177:           ]",
          "178:         } ],",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "228:         },",
          "229:       },",
          "230:     },",
          "232:     {",
          "233:       'target_name': 'node_js2c',",
          "234:       'type': 'none',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "243:     # generate ETW header and resource files",
          "244:     {",
          "245:       'target_name': 'node_etw',",
          "246:       'type': 'none',",
          "247:       'conditions': [",
          "248:         [ 'node_use_etw==\"true\"', {",
          "249:           'actions': [",
          "250:             {",
          "251:               'action_name': 'node_etw',",
          "252:               'inputs': [ 'src/res/node_etw_provider.man' ],",
          "253:               'outputs': [ '<(SHARED_INTERMEDIATE_DIR)' ],",
          "254:               'action': [ 'mc <@(_inputs) -h <@(_outputs) -r <@(_outputs)' ]",
          "255:             }",
          "256:           ]",
          "257:         } ]",
          "258:       ]",
          "259:     },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "251:           # action?",
          "253:           'conditions': [",
          "255:               'action': [",
          "256:                 'python',",
          "257:                 'tools/js2c.py',",
          "",
          "[Removed Lines]",
          "254:             [ 'node_use_dtrace==\"true\"', {",
          "",
          "[Added Lines]",
          "282:             [ 'node_use_dtrace==\"true\" or node_use_etw==\"true\"', {",
          "",
          "---------------"
        ],
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"uv.h\"",
          "28: #include \"v8-debug.h\"",
          "30: # include \"node_dtrace.h\"",
          "31: #endif",
          "33: #include <locale.h>",
          "34: #include <signal.h>",
          "35: #include <stdio.h>",
          "",
          "[Removed Lines]",
          "29: #ifdef HAVE_DTRACE",
          "",
          "[Added Lines]",
          "29: #if defined HAVE_DTRACE || defined HAVE_ETW",
          "33: #ifdef HAVE_ETW",
          "34: # include \"node_win32_etw_provider.h\"",
          "35: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2325:   Local<Object> global = v8::Context::GetCurrent()->Global();",
          "2326:   Local<Value> args[1] = { Local<Value>::New(process_l) };",
          "2329:   InitDTrace(global);",
          "2330: #endif",
          "",
          "[Removed Lines]",
          "2328: #ifdef HAVE_DTRACE",
          "",
          "[Added Lines]",
          "2332: #if defined HAVE_DTRACE || defined HAVE_ETW",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2895:     uv_run(uv_default_loop());",
          "2897:     EmitExit(process_l);",
          "2898:     RunAtExit();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2901: #ifdef HAVE_ETW",
          "2902:     shutdown_etw();",
          "2903: #endif",
          "",
          "---------------"
        ],
        "src/node_dtrace.cc||src/node_dtrace.cc": [
          "File: src/node_dtrace.cc -> src/node_dtrace.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #ifdef HAVE_DTRACE",
          "26: #include \"node_provider.h\"",
          "27: #else",
          "28: #define NODE_HTTP_SERVER_REQUEST(arg0, arg1)",
          "29: #define NODE_HTTP_SERVER_REQUEST_ENABLED() (0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #elif HAVE_ETW",
          "28: #include \"node_win32_etw_provider.h\"",
          "29: #include \"node_win32_etw_provider-inl.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "315:     target->Set(String::NewSymbol(tab[i].name), tab[i].templ->GetFunction());",
          "316:   }",
          "319:   v8::V8::AddGCPrologueCallback((GCPrologueCallback)dtrace_gc_start);",
          "320:   v8::V8::AddGCEpilogueCallback((GCEpilogueCallback)dtrace_gc_done);",
          "321: #endif",
          "",
          "[Removed Lines]",
          "318: #ifdef HAVE_DTRACE",
          "",
          "[Added Lines]",
          "321: #ifdef HAVE_ETW",
          "322:   init_etw();",
          "323: #endif",
          "325: #if defined HAVE_DTRACE || defined HAVE_ETW",
          "",
          "---------------"
        ],
        "src/node_win32_etw_provider-inl.h||src/node_win32_etw_provider-inl.h": [
          "File: src/node_win32_etw_provider-inl.h -> src/node_win32_etw_provider-inl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #ifndef SRC_ETW_INL_H_",
          "23: #define SRC_ETW_INL_H_",
          "25: #include \"node_win32_etw_provider.h\"",
          "26: #include \"node_etw_provider.h\"",
          "28: namespace node {",
          "30: using namespace v8;",
          "33: extern REGHANDLE node_provider;",
          "34: extern EventWriteFunc event_write;",
          "35: extern int events_enabled;",
          "37: #define ETW_WRITE_STRING_DATA(data_descriptor, data)                          \\",
          "38:   EventDataDescCreate(data_descriptor,                                        \\",
          "39:                       data,                                                   \\",
          "40:                       (strlen(data) + 1) * sizeof(char));",
          "42: #define ETW_WRITE_INT32_DATA(data_descriptor, data)  \\",
          "43:   EventDataDescCreate(data_descriptor, data, sizeof(int32_t));",
          "45: #define ETW_WRITE_NET_CONNECTION(descriptors, conn)                           \\",
          "46:   ETW_WRITE_INT32_DATA(descriptors, &conn->fd);                               \\",
          "47:   ETW_WRITE_INT32_DATA(descriptors + 1, &conn->port);                         \\",
          "48:   ETW_WRITE_STRING_DATA(descriptors + 2, conn->remote);                       \\",
          "49:   ETW_WRITE_INT32_DATA(descriptors + 3, &conn->buffered);",
          "51: #define ETW_WRITE_HTTP_SERVER_REQUEST(descriptors, req)                       \\",
          "52:   ETW_WRITE_STRING_DATA(descriptors, req->url);                               \\",
          "53:   ETW_WRITE_STRING_DATA(descriptors + 1, req->method);                        \\",
          "54:   ETW_WRITE_STRING_DATA(descriptors + 2, req->forwardedFor);",
          "56: #define ETW_WRITE_HTTP_CLIENT_REQUEST(descriptors, req)                       \\",
          "57:   ETW_WRITE_STRING_DATA(descriptors, req->url);                               \\",
          "58:   ETW_WRITE_STRING_DATA(descriptors + 1, req->method);",
          "60: #define ETW_WRITE_GC(descriptors, type, flags)                                \\",
          "61:   ETW_WRITE_INT32_DATA(descriptors, &type);                                   \\",
          "62:   ETW_WRITE_INT32_DATA(descriptors + 1, &flags);",
          "64: #define ETW_WRITE_EVENT(eventDescriptor, dataDescriptors)                     \\",
          "65:   DWORD status = event_write(node_provider,                                   \\",
          "66:                              &eventDescriptor,                                \\",
          "67:                              sizeof(dataDescriptors)/sizeof(*dataDescriptors),\\",
          "68:                              dataDescriptors);                                \\",
          "69:   assert(status == ERROR_SUCCESS);",
          "72: void NODE_HTTP_SERVER_REQUEST(node_dtrace_http_server_request_t* req,",
          "73:     node_dtrace_connection_t* conn) {",
          "74:   EVENT_DATA_DESCRIPTOR descriptors[7];",
          "75:   ETW_WRITE_HTTP_SERVER_REQUEST(descriptors, req);",
          "76:   ETW_WRITE_NET_CONNECTION(descriptors + 3, conn);",
          "77:   ETW_WRITE_EVENT(NODE_HTTP_SERVER_REQUEST_EVENT, descriptors);",
          "78: }",
          "81: void NODE_HTTP_SERVER_RESPONSE(node_dtrace_connection_t* conn) {",
          "82:   EVENT_DATA_DESCRIPTOR descriptors[4];",
          "83:   ETW_WRITE_NET_CONNECTION(descriptors, conn);",
          "84:   ETW_WRITE_EVENT(NODE_HTTP_SERVER_RESPONSE_EVENT, descriptors);",
          "85: }",
          "88: void NODE_HTTP_CLIENT_REQUEST(node_dtrace_http_client_request_t* req,",
          "89:     node_dtrace_connection_t* conn) {",
          "90:   EVENT_DATA_DESCRIPTOR descriptors[6];",
          "91:   ETW_WRITE_HTTP_CLIENT_REQUEST(descriptors, req);",
          "92:   ETW_WRITE_NET_CONNECTION(descriptors + 2, conn);",
          "93:   ETW_WRITE_EVENT(NODE_HTTP_CLIENT_REQUEST_EVENT, descriptors);",
          "94: }",
          "97: void NODE_HTTP_CLIENT_RESPONSE(node_dtrace_connection_t* conn) {",
          "98:   EVENT_DATA_DESCRIPTOR descriptors[4];",
          "99:   ETW_WRITE_NET_CONNECTION(descriptors, conn);",
          "100:   ETW_WRITE_EVENT(NODE_HTTP_CLIENT_RESPONSE_EVENT, descriptors);",
          "101: }",
          "104: void NODE_NET_SERVER_CONNECTION(node_dtrace_connection_t* conn) {",
          "105:   EVENT_DATA_DESCRIPTOR descriptors[4];",
          "106:   ETW_WRITE_NET_CONNECTION(descriptors, conn);",
          "107:   ETW_WRITE_EVENT(NODE_NET_SERVER_CONNECTION_EVENT, descriptors);",
          "108: }",
          "111: void NODE_NET_STREAM_END(node_dtrace_connection_t* conn) {",
          "112:   EVENT_DATA_DESCRIPTOR descriptors[4];",
          "113:   ETW_WRITE_NET_CONNECTION(descriptors, conn);",
          "114:   ETW_WRITE_EVENT(NODE_NET_STREAM_END_EVENT, descriptors);",
          "115: }",
          "118: void NODE_GC_START(GCType type, GCCallbackFlags flags) {",
          "119:   EVENT_DATA_DESCRIPTOR descriptors[2];",
          "120:   ETW_WRITE_GC(descriptors, type, flags);",
          "121:   ETW_WRITE_EVENT(NODE_GC_START_EVENT, descriptors);",
          "122: }",
          "125: void NODE_GC_DONE(GCType type, GCCallbackFlags flags) {",
          "126:   EVENT_DATA_DESCRIPTOR descriptors[2];",
          "127:   ETW_WRITE_GC(descriptors, type, flags);",
          "128:   ETW_WRITE_EVENT(NODE_GC_DONE_EVENT, descriptors);",
          "129: }",
          "132: bool NODE_HTTP_SERVER_REQUEST_ENABLED() { return events_enabled > 0; }",
          "133: bool NODE_HTTP_SERVER_RESPONSE_ENABLED() { return events_enabled > 0; }",
          "134: bool NODE_HTTP_CLIENT_REQUEST_ENABLED() { return events_enabled > 0; }",
          "135: bool NODE_HTTP_CLIENT_RESPONSE_ENABLED() { return events_enabled > 0; }",
          "136: bool NODE_NET_SERVER_CONNECTION_ENABLED() { return events_enabled > 0; }",
          "137: bool NODE_NET_STREAM_END_ENABLED() { return events_enabled > 0; }",
          "138: bool NODE_NET_SOCKET_READ_ENABLED() { return events_enabled > 0; }",
          "139: bool NODE_NET_SOCKET_WRITE_ENABLED() { return events_enabled > 0; }",
          "140: }",
          "141: #endif  // SRC_ETW_INL_H_",
          "",
          "---------------"
        ],
        "src/node_win32_etw_provider.cc||src/node_win32_etw_provider.cc": [
          "File: src/node_win32_etw_provider.cc -> src/node_win32_etw_provider.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"node_dtrace.h\"",
          "23: #include \"node_win32_etw_provider.h\"",
          "24: #include \"node_etw_provider.h\"",
          "26: namespace node {",
          "28: using namespace v8;",
          "30: HMODULE advapi;",
          "31: REGHANDLE node_provider;",
          "32: EventRegisterFunc event_register;",
          "33: EventUnregisterFunc event_unregister;",
          "34: EventWriteFunc event_write;",
          "35: int events_enabled;",
          "40: void NTAPI etw_events_enable_callback(",
          "41:   LPCGUID SourceId,",
          "42:   ULONG IsEnabled,",
          "43:   UCHAR Level,",
          "44:   ULONGLONG MatchAnyKeyword,",
          "45:   ULONGLONG MatchAllKeywords,",
          "46:   PEVENT_FILTER_DESCRIPTOR FilterData,",
          "47:   PVOID CallbackContext) {",
          "48:   if (IsEnabled) {",
          "49:     events_enabled++;",
          "50:   } else {",
          "51:     events_enabled--;",
          "52:   }",
          "53: }",
          "56: void init_etw() {",
          "57:   events_enabled = 0;",
          "59:   advapi = LoadLibrary(\"advapi32.dll\");",
          "60:   if (advapi) {",
          "61:     event_register = (EventRegisterFunc)",
          "62:       GetProcAddress(advapi, \"EventRegister\");",
          "63:     event_unregister = (EventUnregisterFunc)",
          "64:       GetProcAddress(advapi, \"EventUnregister\");",
          "65:     event_write = (EventWriteFunc)GetProcAddress(advapi, \"EventWrite\");",
          "67:     if (event_register) {",
          "68:       DWORD status = event_register(&NODE_ETW_PROVIDER,",
          "69:                                     etw_events_enable_callback,",
          "70:                                     NULL,",
          "71:                                     &node_provider);",
          "72:       assert(status == ERROR_SUCCESS);",
          "73:     }",
          "74:   }",
          "75: }",
          "78: void shutdown_etw() {",
          "79:   if (advapi && event_unregister && node_provider) {",
          "80:     event_unregister(node_provider);",
          "81:     node_provider = 0;",
          "82:   }",
          "84:   events_enabled = 0;",
          "86:   if (advapi) {",
          "87:     FreeLibrary(advapi);",
          "88:     advapi = NULL;",
          "89:   }",
          "90: }",
          "91: }",
          "",
          "---------------"
        ],
        "src/node_win32_etw_provider.h||src/node_win32_etw_provider.h": [
          "File: src/node_win32_etw_provider.h -> src/node_win32_etw_provider.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #ifndef SRC_ETW_H_",
          "23: #define SRC_ETW_H_",
          "25: #include <evntprov.h>",
          "26: #include \"node_dtrace.h\"",
          "28: namespace node {",
          "30: using namespace v8;",
          "32: #if defined(_MSC_VER)",
          "33: # define INLINE __forceinline",
          "34: #else",
          "35: # define INLINE inline",
          "36: #endif",
          "38: typedef ULONG (NTAPI *EventRegisterFunc)(",
          "39:   LPCGUID ProviderId,",
          "40:   PENABLECALLBACK EnableCallback,",
          "41:   PVOID CallbackContext,",
          "42:   PREGHANDLE RegHandle",
          "43: );",
          "45: typedef ULONG (NTAPI *EventUnregisterFunc)(",
          "46:   REGHANDLE RegHandle",
          "47: );",
          "49: typedef ULONG (NTAPI *EventWriteFunc)(",
          "50:   REGHANDLE RegHandle,",
          "51:   PCEVENT_DESCRIPTOR EventDescriptor,",
          "52:   ULONG UserDataCount,",
          "53:   PEVENT_DATA_DESCRIPTOR UserData",
          "54: );",
          "56: void init_etw();",
          "57: void shutdown_etw();",
          "59: INLINE void NODE_HTTP_SERVER_REQUEST(node_dtrace_http_server_request_t* req,",
          "60:   node_dtrace_connection_t* conn);",
          "61: INLINE void NODE_HTTP_SERVER_RESPONSE(node_dtrace_connection_t* conn);",
          "62: INLINE void NODE_HTTP_CLIENT_REQUEST(node_dtrace_http_client_request_t* req,",
          "63:   node_dtrace_connection_t* conn);",
          "64: INLINE void NODE_HTTP_CLIENT_RESPONSE(node_dtrace_connection_t* conn);",
          "65: INLINE void NODE_NET_SERVER_CONNECTION(node_dtrace_connection_t* conn);",
          "66: INLINE void NODE_NET_STREAM_END(node_dtrace_connection_t* conn);",
          "67: INLINE void NODE_GC_START(GCType type, GCCallbackFlags flags);",
          "68: INLINE void NODE_GC_DONE(GCType type, GCCallbackFlags flags);",
          "70: INLINE bool NODE_HTTP_SERVER_REQUEST_ENABLED();",
          "71: INLINE bool NODE_HTTP_SERVER_RESPONSE_ENABLED();",
          "72: INLINE bool NODE_HTTP_CLIENT_REQUEST_ENABLED();",
          "73: INLINE bool NODE_HTTP_CLIENT_RESPONSE_ENABLED();",
          "74: INLINE bool NODE_NET_SERVER_CONNECTION_ENABLED();",
          "75: INLINE bool NODE_NET_STREAM_END_ENABLED();",
          "76: INLINE bool NODE_NET_SOCKET_READ_ENABLED();",
          "77: INLINE bool NODE_NET_SOCKET_WRITE_ENABLED();",
          "79: #define NODE_NET_SOCKET_READ(arg0, arg1)",
          "80: #define NODE_NET_SOCKET_WRITE(arg0, arg1)",
          "81: }",
          "82: #endif  // SRC_ETW_H_",
          "",
          "---------------"
        ],
        "src/res/node_etw_provider.man||src/res/node_etw_provider.man": [
          "File: src/res/node_etw_provider.man -> src/res/node_etw_provider.man",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <instrumentationManifest",
          "2:     xmlns=\"http://schemas.microsoft.com/win/2004/08/events\"",
          "3:     xmlns:win=\"http://manifests.microsoft.com/win/2004/08/windows/events\"",
          "4:     xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">",
          "5:     <instrumentation>",
          "6:         <events>",
          "7:             <provider name=\"NodeJS-ETW-provider\"",
          "8:                 guid=\"{77754E9B-264B-4D8D-B981-E4135C1ECB0C}\"",
          "9:                 symbol=\"NODE_ETW_PROVIDER\"",
          "10:                 resourceFileName=\"node.exe\"",
          "11:                 messageFileName=\"node.exe\">",
          "13:                 <opcodes>",
          "14:                     <opcode name=\"NODE_HTTP_SERVER_REQUEST\" value=\"10\"/>",
          "15:                     <opcode name=\"NODE_HTTP_SERVER_RESPONSE\" value=\"11\"/>",
          "16:                     <opcode name=\"NODE_HTTP_CLIENT_REQUEST\" value=\"12\"/>",
          "17:                     <opcode name=\"NODE_HTTP_CLIENT_RESPONSE\" value=\"13\"/>",
          "18:                     <opcode name=\"NODE_NET_SERVER_CONNECTION\" value=\"14\"/>",
          "19:                     <opcode name=\"NODE_NET_STREAM_END\" value=\"15\"/>",
          "20:                     <opcode name=\"NODE_GC_START\" value=\"16\"/>",
          "21:                     <opcode name=\"NODE_GC_DONE\" value=\"17\"/>",
          "22:                 </opcodes>",
          "24:                 <templates>",
          "25:                     <template tid=\"node_connection\">",
          "26:                         <data name=\"fd\" inType=\"win:UInt32\" />",
          "27:                         <data name=\"port\" inType=\"win:UInt32\" />",
          "28:                         <data name=\"remote\" inType=\"win:AnsiString\" />",
          "29:                         <data name=\"buffered\" inType=\"win:UInt32\" />",
          "30:                     </template>",
          "32:                     <template tid=\"node_http_client_request\">",
          "33:                         <data name=\"url\" inType=\"win:AnsiString\" />",
          "34:                         <data name=\"method\" inType=\"win:AnsiString\" />",
          "35:                         <data name=\"fd\" inType=\"win:UInt32\" />",
          "36:                         <data name=\"port\" inType=\"win:UInt32\" />",
          "37:                         <data name=\"remote\" inType=\"win:AnsiString\" />",
          "38:                         <data name=\"buffered\" inType=\"win:UInt32\" />",
          "39:                     </template>",
          "41:                     <template tid=\"node_http_server_request\">",
          "42:                         <data name=\"url\" inType=\"win:AnsiString\" />",
          "43:                         <data name=\"method\" inType=\"win:AnsiString\" />",
          "44:                         <data name=\"forwardedFor\" inType=\"win:AnsiString\" />",
          "45:                         <data name=\"fd\" inType=\"win:UInt32\" />",
          "46:                         <data name=\"port\" inType=\"win:UInt32\" />",
          "47:                         <data name=\"remote\" inType=\"win:AnsiString\" />",
          "48:                         <data name=\"buffered\" inType=\"win:UInt32\" />",
          "49:                     </template>",
          "51:                     <template tid=\"node_gc\">",
          "52:                         <data name=\"gctype\" inType=\"win:UInt32\" />",
          "53:                         <data name=\"gccallbackflags\" inType=\"win:UInt32\" />",
          "54:                     </template>",
          "55:                 </templates>",
          "57:                 <events>",
          "58:                     <event value=\"1\"",
          "59:                         opcode=\"NODE_HTTP_SERVER_REQUEST\"",
          "60:                         template=\"node_http_server_request\"",
          "61:                         symbol=\"NODE_HTTP_SERVER_REQUEST_EVENT\"",
          "62:                         level=\"win:Informational\"/>",
          "63:                     <event value=\"2\"",
          "64:                         opcode=\"NODE_HTTP_SERVER_RESPONSE\"",
          "65:                         template=\"node_connection\"",
          "66:                         symbol=\"NODE_HTTP_SERVER_RESPONSE_EVENT\"",
          "67:                         level=\"win:Informational\"/>",
          "68:                     <event value=\"3\"",
          "69:                         opcode=\"NODE_HTTP_CLIENT_REQUEST\"",
          "70:                         template=\"node_http_client_request\"",
          "71:                         symbol=\"NODE_HTTP_CLIENT_REQUEST_EVENT\"",
          "72:                         level=\"win:Informational\"/>",
          "73:                     <event value=\"4\"",
          "74:                         opcode=\"NODE_HTTP_CLIENT_RESPONSE\"",
          "75:                         template=\"node_connection\"",
          "76:                         symbol=\"NODE_HTTP_CLIENT_RESPONSE_EVENT\"",
          "77:                         level=\"win:Informational\"/>",
          "78:                     <event value=\"5\"",
          "79:                         opcode=\"NODE_NET_SERVER_CONNECTION\"",
          "80:                         template=\"node_connection\"",
          "81:                         symbol=\"NODE_NET_SERVER_CONNECTION_EVENT\"",
          "82:                         level=\"win:Informational\"/>",
          "83:                     <event value=\"6\"",
          "84:                         opcode=\"NODE_NET_STREAM_END\"",
          "85:                         template=\"node_connection\"",
          "86:                         symbol=\"NODE_NET_STREAM_END_EVENT\"",
          "87:                         level=\"win:Informational\"/>",
          "88:                     <event value=\"7\"",
          "89:                         opcode=\"NODE_GC_START\"",
          "90:                         template=\"node_gc\"",
          "91:                         symbol=\"NODE_GC_START_EVENT\"",
          "92:                         level=\"win:Informational\"/>",
          "93:                     <event value=\"8\"",
          "94:                         opcode=\"NODE_GC_DONE\"",
          "95:                         template=\"node_gc\"",
          "96:                         symbol=\"NODE_GC_DONE_EVENT\"",
          "97:                         level=\"win:Informational\"/>",
          "98:                 </events>",
          "99:             </provider>",
          "100:         </events>",
          "101:     </instrumentation>",
          "102: </instrumentationManifest>",
          "",
          "---------------"
        ],
        "tools/msvs/msi/nodemsi.wixproj||tools/msvs/msi/nodemsi.wixproj": [
          "File: tools/msvs/msi/nodemsi.wixproj -> tools/msvs/msi/nodemsi.wixproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:   <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Debug|x86' \">",
          "17:     <OutputPath>..\\..\\..\\$(Configuration)\\</OutputPath>",
          "18:     <IntermediateOutputPath>obj\\$(Configuration)\\</IntermediateOutputPath>",
          "20:   </PropertyGroup>",
          "21:   <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Release|x86' \">",
          "22:     <OutputPath>..\\..\\..\\$(Configuration)\\</OutputPath>",
          "23:     <IntermediateOutputPath>obj\\$(Configuration)\\</IntermediateOutputPath>",
          "25:   </PropertyGroup>",
          "26:   <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Debug|x64' \">",
          "27:     <OutputPath>..\\..\\..\\$(Configuration)\\</OutputPath>",
          "28:     <IntermediateOutputPath>obj\\$(Configuration)\\</IntermediateOutputPath>",
          "30:   </PropertyGroup>",
          "31:   <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Release|x64' \">",
          "32:     <OutputPath>..\\..\\..\\$(Configuration)\\</OutputPath>",
          "33:     <IntermediateOutputPath>obj\\$(Configuration)\\</IntermediateOutputPath>",
          "35:   </PropertyGroup>",
          "36:   <ItemGroup>",
          "37:     <Compile Include=\"product.wxs\" />",
          "",
          "[Removed Lines]",
          "19:     <DefineConstants>Debug;ProductVersion=$(NodeVersion);NPMSourceDir=..\\..\\..\\deps\\npm\\;ProgramFilesFolderId=ProgramFilesFolder</DefineConstants>",
          "24:     <DefineConstants>Debug;ProductVersion=$(NodeVersion);NPMSourceDir=..\\..\\..\\deps\\npm\\;ProgramFilesFolderId=ProgramFilesFolder</DefineConstants>",
          "29:     <DefineConstants>Debug;ProductVersion=$(NodeVersion);NPMSourceDir=..\\..\\..\\deps\\npm\\;ProgramFilesFolderId=ProgramFiles64Folder</DefineConstants>",
          "34:     <DefineConstants>Debug;ProductVersion=$(NodeVersion);NPMSourceDir=..\\..\\..\\deps\\npm\\;ProgramFilesFolderId=ProgramFiles64Folder</DefineConstants>",
          "",
          "[Added Lines]",
          "19:     <DefineConstants>Debug;ProductVersion=$(NodeVersion);NoETW=$(NoETW);NPMSourceDir=..\\..\\..\\deps\\npm\\;ProgramFilesFolderId=ProgramFilesFolder</DefineConstants>",
          "24:     <DefineConstants>Debug;ProductVersion=$(NodeVersion);NoETW=$(NoETW);NPMSourceDir=..\\..\\..\\deps\\npm\\;ProgramFilesFolderId=ProgramFilesFolder</DefineConstants>",
          "29:     <DefineConstants>Debug;ProductVersion=$(NodeVersion);NoETW=$(NoETW);NPMSourceDir=..\\..\\..\\deps\\npm\\;ProgramFilesFolderId=ProgramFiles64Folder</DefineConstants>",
          "34:     <DefineConstants>Debug;ProductVersion=$(NodeVersion);NoETW=$(NoETW);NPMSourceDir=..\\..\\..\\deps\\npm\\;ProgramFilesFolderId=ProgramFiles64Folder</DefineConstants>",
          "",
          "---------------"
        ],
        "tools/msvs/msi/product.wxs||tools/msvs/msi/product.wxs": [
          "File: tools/msvs/msi/product.wxs -> tools/msvs/msi/product.wxs",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:           </Directory>",
          "41:           <Component Id=\"nodeexe\" Guid=\"AEC0F08E-89B3-4C35-A286-8DB8598597F2\">",
          "42:             <File Id=\"filenodeexe\" KeyPath=\"yes\" Source=\"$(var.SourceDir)\\node.exe\" />",
          "43:             <Environment Id=\"npm_env\"",
          "44:                          Action=\"set\"",
          "45:                          Name=\"PATH\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:             <?if $(var.NoETW) != 1 ?>",
          "44:             <File Id=\"node_etw_provider_man\" Name=\"node_etw_provider.man\" Source=\"$(var.RepoDir)\\src\\res\\node_etw_provider.man\" >",
          "45:               <util:EventManifest MessageFile=\"[APPLICATIONROOTDIRECTORY]node.exe\" ResourceFile=\"[APPLICATIONROOTDIRECTORY]node.exe\"/>",
          "46:             </File>",
          "47:             <?endif?>",
          "",
          "---------------"
        ],
        "vcbuild.bat||vcbuild.bat": [
          "File: vcbuild.bat -> vcbuild.bat",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: set licensertf=",
          "29: set upload=",
          "30: set jslint=",
          "32: :next-arg",
          "33: if \"%1\"==\"\" goto args-done",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: set noetw=",
          "32: set noetw_arg=",
          "33: set noetw_msi_arg=",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41: if /i \"%1\"==\"nobuild\"       set nobuild=1&goto arg-ok",
          "42: if /i \"%1\"==\"nosign\"        set nosign=1&goto arg-ok",
          "43: if /i \"%1\"==\"nosnapshot\"    set nosnapshot=1&goto arg-ok",
          "44: if /i \"%1\"==\"licensertf\"    set licensertf=1&goto arg-ok",
          "45: if /i \"%1\"==\"test-uv\"       set test=test-uv&goto arg-ok",
          "46: if /i \"%1\"==\"test-internet\" set test=test-internet&goto arg-ok",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: if /i \"%1\"==\"noetw\"         set noetw=1&goto arg-ok",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "65: if \"%config%\"==\"Debug\" set debug_arg=--debug",
          "66: if \"%target_arch%\"==\"x64\" set msiplatform=x64",
          "67: if defined nosnapshot set nosnapshot_arg=--without-snapshot",
          "69: :project-gen",
          "70: @rem Skip project generation if requested.",
          "71: if defined noprojgen goto msbuild",
          "73: @rem Generate the VS project.",
          "75: if errorlevel 1 goto create-msvs-files-failed",
          "76: if not exist node.sln goto create-msvs-files-failed",
          "77: echo Project files generated.",
          "",
          "[Removed Lines]",
          "74: python configure %debug_arg% %nosnapshot_arg% --dest-cpu=%target_arch%",
          "",
          "[Added Lines]",
          "72: if defined noetw set noetw_arg=--without-etw& set noetw_msi_arg=/p:NoETW=1",
          "79: python configure %debug_arg% %nosnapshot_arg% %noetw_arg% --dest-cpu=%target_arch%",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "116: python \"%~dp0tools\\getnodeversion.py\" > \"%temp%\\node_version.txt\"",
          "117: if not errorlevel 0 echo Cannot determine current version of node.js & goto exit",
          "118: for /F \"tokens=*\" %%i in (%temp%\\node_version.txt) do set NODE_VERSION=%%i",
          "120: if errorlevel 1 goto exit",
          "122: if defined nosign goto run",
          "",
          "[Removed Lines]",
          "119: msbuild \"%~dp0tools\\msvs\\msi\\nodemsi.sln\" /m /t:Clean,Build /p:Configuration=%config% /p:Platform=%msiplatform% /p:NodeVersion=%NODE_VERSION% /clp:NoSummary;NoItemAndPropertyList;Verbosity=minimal /nologo",
          "",
          "[Added Lines]",
          "124: msbuild \"%~dp0tools\\msvs\\msi\\nodemsi.sln\" /m /t:Clean,Build /p:Configuration=%config% /p:Platform=%msiplatform% /p:NodeVersion=%NODE_VERSION% %noetw_msi_arg% /clp:NoSummary;NoItemAndPropertyList;Verbosity=minimal /nologo",
          "",
          "---------------"
        ]
      }
    }
  ]
}