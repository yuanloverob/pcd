{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0660884ea02dd51864223f7c31e0293b9bbd7429",
      "candidate_info": {
        "commit_hash": "0660884ea02dd51864223f7c31e0293b9bbd7429",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0660884ea02dd51864223f7c31e0293b9bbd7429",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "test/insert.test"
        ],
        "message": "Add missing VdbeCoverage() macro.  Fix an off-by-one error in partial index handling.  New test cases.  Ticket [c1e19e12046d23fe]\n\nFossilOrigin-Name: 41cc8e3dab998f7efc898d18837ca7fdac94ea3f89954990c5231456bf725fee",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "test/insert.test||test/insert.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fbac0c65d8464b126d385262d176864add55452ec9e3d5eb76ffee06e820cb9c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1905:           if( pIdx->pPartIdxWhere ){",
          "1909:             VdbeCoverage(v);",
          "1910:           }",
          "",
          "[Removed Lines]",
          "1908:             sqlite3VdbeAddOp2(v, OP_IsNull, regIdx, lblRecheckOk);",
          "",
          "[Added Lines]",
          "1908:             sqlite3VdbeAddOp2(v, OP_IsNull, regIdx-1, lblRecheckOk);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1922:               sqlite3VdbeAddOp4(v, pOp->opcode, pOp->p1, p2, pOp->p3,",
          "1923:                                 pOp->p4.z, pOp->p4type);",
          "1924:               sqlite3VdbeChangeP5(v, pOp->p5);",
          "1925:             }",
          "1926:             nConflictCk--;",
          "1927:             pOp++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1925:               VdbeCoverageIf(v, p2!=pOp->p2 );",
          "",
          "---------------"
        ],
        "test/insert.test||test/insert.test": [
          "File: test/insert.test -> test/insert.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "515:   END;",
          "516:   INSERT INTO p1 VALUES(1, 1);",
          "517:   INSERT INTO c1 VALUES(2, 1);",
          "519: } {1 {UNIQUE constraint failed: p1.b}}",
          "520: integrity_check insert-16.7",
          "",
          "[Removed Lines]",
          "518:   REPLACE INTO p1 VALUES(3, 1);",
          "",
          "[Added Lines]",
          "518:   REPLACE INTO p1 VALUES(3, 1);2",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "542:   REPLACE INTO t1(rowid,a,b,c) VALUES(200,1,2,3);",
          "543: } {1 {UNIQUE constraint failed: t1.c}}",
          "544: integrity_check insert-17.4",
          "547: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "545: do_execsql_test insert-17.5 {",
          "546:   CREATE TABLE t2(a INTEGER PRIMARY KEY, b);",
          "547:   CREATE UNIQUE INDEX t2b ON t2(b);",
          "548:   INSERT INTO t2(a,b) VALUES(1,1),(2,2),(3,3),(4,4);",
          "549:   CREATE TABLE fire(x);",
          "550:   CREATE TRIGGER t2r1 AFTER DELETE ON t2 BEGIN",
          "551:     INSERT INTO fire VALUES(old.a);",
          "552:   END;",
          "553:   UPDATE OR REPLACE t2 SET a=4, b=3 WHERE a=1;",
          "554:   SELECT *, 'x' FROM t2 ORDER BY a;",
          "555: } {2 2 x 4 3 x}",
          "556: do_execsql_test insert-17.6 {",
          "557:   SELECT x FROM fire ORDER BY x;",
          "558: } {3 4}",
          "559: do_execsql_test insert-17.7 {",
          "560:   DELETE FROM t2;",
          "561:   DELETE FROM fire;",
          "562:   INSERT INTO t2(a,b) VALUES(1,1),(2,2),(3,3),(4,4);",
          "563:   UPDATE OR REPLACE t2 SET a=1, b=3 WHERE a=1;",
          "564:   SELECT *, 'x' FROM t2 ORDER BY a;",
          "565: } {1 3 x 2 2 x 4 4 x}",
          "566: do_execsql_test insert-17.8 {",
          "567:   SELECT x FROM fire ORDER BY x;",
          "568: } {3}",
          "569: do_execsql_test insert-17.10 {",
          "570:   CREATE TABLE t3(a INTEGER PRIMARY KEY, b INT, c INT, d INT);",
          "571:   CREATE UNIQUE INDEX t3bpi ON t3(b) WHERE c<=d;",
          "572:   CREATE UNIQUE INDEX t3d ON t3(d);",
          "573:   INSERT INTO t3(a,b,c,d) VALUES(1,1,1,1),(2,1,3,2),(3,4,5,6);",
          "574:   CREATE TRIGGER t3r1 AFTER DELETE ON t3 BEGIN",
          "575:     SELECT 'hi';",
          "576:   END;",
          "577:   REPLACE INTO t3(a,b,c,d) VALUES(4,4,8,9);",
          "578: } {}",
          "579: do_execsql_test insert-17.11 {",
          "580:   SELECT *, 'x' FROM t3 ORDER BY a;",
          "581: } {1 1 1 1 x 2 1 3 2 x 4 4 8 9 x}",
          "582: do_execsql_test insert-17.12 {",
          "583:   REPLACE INTO t3(a,b,c,d) VALUES(5,1,11,2);",
          "584:   SELECT *, 'x' FROM t3 ORDER BY a;",
          "585: } {1 1 1 1 x 4 4 8 9 x 5 1 11 2 x}",
          "587: do_execsql_test insert-17.13 {",
          "588:   DELETE FROM t3;",
          "589:   INSERT INTO t3(a,b,c,d) VALUES(1,1,1,1),(2,1,3,2),(3,4,5,6);",
          "590:   DROP TRIGGER t3r1;",
          "591:   CREATE TRIGGER t3r1 AFTER DELETE ON t3 BEGIN",
          "592:     INSERT INTO t3(b,c,d) VALUES(old.b,old.c,old.d);",
          "593:   END;",
          "594: } {}",
          "595: do_catchsql_test insert-17.14 {",
          "596:   REPLACE INTO t3(a,b,c,d) VALUES(4,4,8,9);",
          "597: } {1 {UNIQUE constraint failed: t3.b}}",
          "598: do_catchsql_test insert-17.15 {",
          "599:   REPLACE INTO t3(a,b,c,d) VALUES(5,1,11,2);",
          "600: } {1 {UNIQUE constraint failed: t3.d}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "477f1f12e2b9a13c663aab985d28ad589d37a1ea",
      "candidate_info": {
        "commit_hash": "477f1f12e2b9a13c663aab985d28ad589d37a1ea",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/477f1f12e2b9a13c663aab985d28ad589d37a1ea",
        "files": [
          "ext/misc/carray.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a typo in the carray extension header comment - the comment that serves as the documentation to this extension.\n\nFossilOrigin-Name: 658a42d3633b31fda260f2c5a1a2c7dd8eb4eb0114d322369017c56faf5ecd42",
        "before_after_code_files": [
          "ext/misc/carray.c||ext/misc/carray.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/carray.c||ext/misc/carray.c": [
          "File: ext/misc/carray.c -> ext/misc/carray.c"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 090cd07d37904da4610d6a6787a3cc825c9a8bdcc5f051267d4608bba9b49d03",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9ebe59d6fffc2a4d6799d7c8e9c4071948291a33",
      "candidate_info": {
        "commit_hash": "9ebe59d6fffc2a4d6799d7c8e9c4071948291a33",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9ebe59d6fffc2a4d6799d7c8e9c4071948291a33",
        "files": [
          "Makefile.in",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Update the configure-generated makekfile to generate a portable pkgIndex.tcl.\n\nFossilOrigin-Name: 35cbee7fe4a0b7ca06206ca2f69fc35abe3de4929070d6585ab765af82027438",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1424:  $(INSTALL) -m 0644 sqlite3.pc $(DESTDIR)$(pkgconfigdir)",
          "1426: pkgIndex.tcl:",
          "1428: tcl_install: lib_install libtclsqlite3.la pkgIndex.tcl",
          "1429:  $(INSTALL) -d $(DESTDIR)$(TCLLIBDIR)",
          "1430:  $(LTINSTALL) libtclsqlite3.la $(DESTDIR)$(TCLLIBDIR)",
          "",
          "[Removed Lines]",
          "1427:  echo 'package ifneeded sqlite3 $(RELEASE) [list load $(TCLLIBDIR)/libtclsqlite3$(SHLIB_SUFFIX) sqlite3]' > $@",
          "",
          "[Added Lines]",
          "1427:  echo 'package ifneeded sqlite3 $(RELEASE) [list load [file join $$dir libtclsqlite3[info sharedlibextension]] sqlite3]' > $@",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7c941ce5bcc872ec92cbe0e409fd773f44a5ab1f814e689ad57f756b911e2b96",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aff0fd483c24ea83377824dbcbd17fad374594b2",
      "candidate_info": {
        "commit_hash": "aff0fd483c24ea83377824dbcbd17fad374594b2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/aff0fd483c24ea83377824dbcbd17fad374594b2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pager.c",
          "test/fuzzdata8.db"
        ],
        "message": "Add an \"|| CORRUPT_DB\" term to an assert() that might be false if the database is corrupt.  Also add a branch to have sqlite3PagerMovepage() return SQLITE_CORRUPT in that case.\n\nFossilOrigin-Name: b0d5cf40bba34e459caa7480bc84a1d75496c2ab52029f4bb0a31f2d9369a8ee",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pager.c||src/pager.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3803e750384ec37091b0a6c350f8ef67720e316fd6f74c95e3c5f231c4a01ceb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7178:   pPg->flags &= ~PGHDR_NEED_SYNC;",
          "7179:   pPgOld = sqlite3PagerLookup(pPager, pgno);",
          "7181:   if( pPgOld ){",
          "7182:     pPg->flags |= (pPgOld->flags&PGHDR_NEED_SYNC);",
          "7183:     if( pPager->tempFile ){",
          "",
          "[Removed Lines]",
          "7180:   assert( !pPgOld || pPgOld->nRef==1 );",
          "",
          "[Added Lines]",
          "7180:   assert( !pPgOld || pPgOld->nRef==1 || CORRUPT_DB );",
          "7182:     if( pPgOld->nRef>1 ){",
          "7183:       sqlite3PagerUnrefNotNull(pPgOld);",
          "7184:       return SQLITE_CORRUPT_BKPT;",
          "7185:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fdc75c9f5326dc96c18664674ad00f382adf2177",
      "candidate_info": {
        "commit_hash": "fdc75c9f5326dc96c18664674ad00f382adf2177",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fdc75c9f5326dc96c18664674ad00f382adf2177",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c"
        ],
        "message": "Omit a line of code that has no affect on the outcome.\n\nFossilOrigin-Name: 5d933aa659eb7a13f9ab44fe7762be292a1c3c75b957a3b7e0bc6188257b62f4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 27798f17f567ad065f8a99effcb287bc241df7b450330ef890d192c70528e62b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:     if( pExpr->op==TK_COLLATE ){",
          "81:       pDup = sqlite3ExprAddCollateString(pParse, pDup, pExpr->u.zToken);",
          "82:     }",
          "",
          "[Removed Lines]",
          "83:     ExprSetProperty(pDup, EP_Alias);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}