{
  "cve_id": "CVE-2022-0156",
  "cve_desc": "vim is vulnerable to Use After Free",
  "repo": "vim/vim",
  "patch_hash": "9f1a39a5d1cd7989ada2d1cb32f97d84360e050f",
  "patch_info": {
    "commit_hash": "9f1a39a5d1cd7989ada2d1cb32f97d84360e050f",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/9f1a39a5d1cd7989ada2d1cb32f97d84360e050f",
    "files": [
      "src/alloc.c",
      "src/message.c",
      "src/proto/alloc.pro",
      "src/proto/userfunc.pro",
      "src/testdir/test_vim9_func.vim",
      "src/usercmd.c",
      "src/userfunc.c",
      "src/version.c",
      "src/vim9compile.c",
      "src/viminfo.c"
    ],
    "message": "patch 8.2.4040: keeping track of allocated lines is too complicated\n\nProblem:    Keeping track of allocated lines in user functions is too\n            complicated.\nSolution:   Instead of freeing individual lines keep them all until the end.",
    "before_after_code_files": [
      "src/alloc.c||src/alloc.c",
      "src/message.c||src/message.c",
      "src/proto/alloc.pro||src/proto/alloc.pro",
      "src/proto/userfunc.pro||src/proto/userfunc.pro",
      "src/testdir/test_vim9_func.vim||src/testdir/test_vim9_func.vim",
      "src/usercmd.c||src/usercmd.c",
      "src/userfunc.c||src/userfunc.c",
      "src/version.c||src/version.c",
      "src/vim9compile.c||src/vim9compile.c",
      "src/viminfo.c||src/viminfo.c"
    ]
  },
  "patch_diff": {
    "src/alloc.c||src/alloc.c": [
      "File: src/alloc.c -> src/alloc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "702: }",
      "704:     void",
      "706: {",
      "707:     ga_init(gap);",
      "708:     gap->ga_itemsize = itemsize;",
      "",
      "[Removed Lines]",
      "705: ga_init2(garray_T *gap, int itemsize, int growsize)",
      "",
      "[Added Lines]",
      "705: ga_init2(garray_T *gap, size_t itemsize, int growsize)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "791:     int",
      "793: {",
      "794:     char_u *cp = vim_strsave(p);",
      "",
      "[Removed Lines]",
      "792: ga_add_string(garray_T *gap, char_u *p)",
      "",
      "[Added Lines]",
      "792: ga_copy_string(garray_T *gap, char_u *p)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "805:     return OK;",
      "806: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "812:     int",
      "813: ga_add_string(garray_T *gap, char_u *p)",
      "814: {",
      "815:     if (ga_grow(gap, 1) == FAIL)",
      "816:  return FAIL;",
      "817:     ((char_u **)(gap->ga_data))[gap->ga_len++] = p;",
      "818:     return OK;",
      "819: }",
      "",
      "---------------"
    ],
    "src/message.c||src/message.c": [
      "File: src/message.c -> src/message.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "587:     if (STRCMP(\"RESET\", error) == 0)",
      "588:  ga_clear_strings(&ignore_error_list);",
      "589:     else",
      "591: }",
      "593:     static int",
      "",
      "[Removed Lines]",
      "590:  ga_add_string(&ignore_error_list, error);",
      "",
      "[Added Lines]",
      "590:  ga_copy_string(&ignore_error_list, error);",
      "",
      "---------------"
    ],
    "src/proto/alloc.pro||src/proto/alloc.pro": [
      "File: src/proto/alloc.pro -> src/proto/alloc.pro",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: void ga_clear_strings(garray_T *gap);",
      "18: int ga_copy_strings(garray_T *from, garray_T *to);",
      "19: void ga_init(garray_T *gap);",
      "21: int ga_grow(garray_T *gap, int n);",
      "22: int ga_grow_inner(garray_T *gap, int n);",
      "23: char_u *ga_concat_strings(garray_T *gap, char *sep);",
      "24: int ga_add_string(garray_T *gap, char_u *p);",
      "25: void ga_concat(garray_T *gap, char_u *s);",
      "26: void ga_concat_len(garray_T *gap, char_u *s, size_t len);",
      "",
      "[Removed Lines]",
      "20: void ga_init2(garray_T *gap, int itemsize, int growsize);",
      "",
      "[Added Lines]",
      "20: void ga_init2(garray_T *gap, size_t itemsize, int growsize);",
      "24: int ga_copy_string(garray_T *gap, char_u *p);",
      "",
      "---------------"
    ],
    "src/proto/userfunc.pro||src/proto/userfunc.pro": [
      "File: src/proto/userfunc.pro -> src/proto/userfunc.pro",
      "--- Hunk 1 ---",
      "[Context before]",
      "38: char_u *get_scriptlocal_funcname(char_u *funcname);",
      "39: char_u *save_function_name(char_u **name, int *is_global, int skip, int flags, funcdict_T *fudi);",
      "40: void list_functions(regmatch_T *regmatch);",
      "42: void ex_function(exarg_T *eap);",
      "43: void ex_defcompile(exarg_T *eap);",
      "44: int eval_fname_script(char_u *p);",
      "",
      "[Removed Lines]",
      "41: ufunc_T *define_function(exarg_T *eap, char_u *name_arg, char_u **line_to_free);",
      "",
      "[Added Lines]",
      "41: ufunc_T *define_function(exarg_T *eap, char_u *name_arg, garray_T *lines_to_free);",
      "",
      "---------------"
    ],
    "src/testdir/test_vim9_func.vim||src/testdir/test_vim9_func.vim": [
      "File: src/testdir/test_vim9_func.vim -> src/testdir/test_vim9_func.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "1757:   CheckScriptFailure(lines, 'E1173: Text found after endfunction: BBBB')",
      "1758: enddef",
      "1760: def Test_return_type_wrong()",
      "1761:   CheckScriptFailure([",
      "1762:         'def Func(): number',",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1760: def Test_error_in_function_args()",
      "1761:   var lines =<< trim END",
      "1762:       def FirstFunction()",
      "1763:         def SecondFunction(J  =",
      "1764:         # Nois",
      "1765:         # one",
      "1767:          enddef|BBBB",
      "1768:       enddef",
      "1769:       # Compile all functions",
      "1770:       defcompile",
      "1771:   END",
      "1772:   CheckScriptFailure(lines, 'E488:')",
      "1773: enddef",
      "",
      "---------------"
    ],
    "src/usercmd.c||src/usercmd.c": [
      "File: src/usercmd.c -> src/usercmd.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1021:  char_u     *line = NULL;",
      "1023:  ga_init2(&ga, sizeof(char_u *), 10);",
      "1025:      return retp;",
      "",
      "[Removed Lines]",
      "1024:  if (ga_add_string(&ga, p) == FAIL)",
      "",
      "[Added Lines]",
      "1024:  if (ga_copy_string(&ga, p) == FAIL)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1038:       emsg(_(e_missing_rcurly));",
      "1039:       break;",
      "1040:   }",
      "1042:       break;",
      "1043:   if (*skipwhite(line) == '}')",
      "1044:       break;",
      "",
      "[Removed Lines]",
      "1041:   if (ga_add_string(&ga, line) == FAIL)",
      "",
      "[Added Lines]",
      "1041:   if (ga_copy_string(&ga, line) == FAIL)",
      "",
      "---------------"
    ],
    "src/userfunc.c||src/userfunc.c": [
      "File: src/userfunc.c -> src/userfunc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "172:     static char_u *",
      "173: get_function_line(",
      "174:  exarg_T  *eap,",
      "176:  int  indent,",
      "177:  getline_opt_T getline_options)",
      "178: {",
      "",
      "[Removed Lines]",
      "175:  char_u  **line_to_free,",
      "",
      "[Added Lines]",
      "175:  garray_T *lines_to_free,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "184:  theline = eap->getline(':', eap->cookie, indent, getline_options);",
      "185:     if (theline != NULL)",
      "186:     {",
      "191:     }",
      "193:     return theline;",
      "",
      "[Removed Lines]",
      "187:  if (*eap->cmdlinep == *line_to_free)",
      "189:  vim_free(*line_to_free);",
      "",
      "[Added Lines]",
      "187:  if (lines_to_free->ga_len > 0",
      "188:   && *eap->cmdlinep == ((char_u **)lines_to_free->ga_data)",
      "189:          [lines_to_free->ga_len - 1])",
      "191:  ga_add_string(lines_to_free, theline);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "210:     garray_T *default_args,",
      "211:     int  skip,",
      "212:     exarg_T *eap,",
      "214: {",
      "215:     int  mustend = FALSE;",
      "216:     char_u *arg;",
      "",
      "[Removed Lines]",
      "213:     char_u **line_to_free)",
      "",
      "[Added Lines]",
      "214:     garray_T *lines_to_free)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "241:     && (*p == NUL || (VIM_ISWHITE(*whitep) && *p == '#')))",
      "242:  {",
      "245:          GETLINE_CONCAT_CONT);",
      "247:      if (theline == NULL)",
      "",
      "[Removed Lines]",
      "244:      char_u *theline = get_function_line(eap, line_to_free, 0,",
      "",
      "[Added Lines]",
      "245:      char_u *theline = get_function_line(eap, lines_to_free, 0,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "677:  exarg_T     *eap,",
      "678:  garray_T    *newlines,",
      "679:  char_u     *line_arg_in,",
      "681: {",
      "682:     linenr_T sourcing_lnum_top = SOURCING_LNUM;",
      "683:     linenr_T sourcing_lnum_off;",
      "",
      "[Removed Lines]",
      "680:  char_u     **line_to_free)",
      "",
      "[Added Lines]",
      "681:  garray_T    *lines_to_free)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "744:  }",
      "745:  else",
      "746:  {",
      "748:              getline_options);",
      "749:  }",
      "750:  if (KeyTyped)",
      "",
      "[Removed Lines]",
      "747:      theline = get_function_line(eap, line_to_free, indent,",
      "",
      "[Added Lines]",
      "748:      theline = get_function_line(eap, lines_to_free, indent,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "854:       {",
      "858:    eap->nextcmd = nextcmd;",
      "861:    {",
      "862:        vim_free(*eap->cmdlinep);",
      "865:    }",
      "866:       }",
      "867:       break;",
      "",
      "[Removed Lines]",
      "859:    if (*line_to_free != NULL",
      "860:          && *eap->cmdlinep != *line_to_free)",
      "",
      "[Added Lines]",
      "861:    if (lines_to_free->ga_len > 0",
      "862:     && *eap->cmdlinep !=",
      "863:          ((char_u **)lines_to_free->ga_data)",
      "864:          [lines_to_free->ga_len - 1])",
      "870:          [lines_to_free->ga_len - 1];",
      "871:        --lines_to_free->ga_len;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1118:     garray_T newlines;",
      "1119:     char_u *cmdline = NULL;",
      "1120:     int  ret = FAIL;",
      "1122:     partial_T *pt;",
      "1123:     char_u *name;",
      "1124:     int  lnum_save = -1;",
      "",
      "[Removed Lines]",
      "1121:     char_u *line_to_free = NULL;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1144:     }",
      "1146:     ga_init2(&newlines, (int)sizeof(char_u *), 10);",
      "1151:  goto erret;",
      "1155:     evalarg->eval_break_count += newlines.ga_len;",
      "",
      "[Removed Lines]",
      "1147:     if (get_function_body(&eap, &newlines, NULL, &line_to_free) == FAIL)",
      "1148:     {",
      "1149:  if (cmdline != line_to_free)",
      "1150:      vim_free(cmdline);",
      "1152:     }",
      "",
      "[Added Lines]",
      "1153:     if (get_function_body(&eap, &newlines, NULL,",
      "1154:           &evalarg->eval_tofree_ga) == FAIL)",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1208:  {",
      "1209:      ((char_u **)(tfgap->ga_data))[tfgap->ga_len++] = cmdline;",
      "1210:      evalarg->eval_using_cmdline = TRUE;",
      "1213:  }",
      "1214:     }",
      "1215:     else",
      "",
      "[Removed Lines]",
      "1211:      if (cmdline == line_to_free)",
      "1212:   line_to_free = NULL;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "1278: erret:",
      "1279:     if (lnum_save >= 0)",
      "1280:  SOURCING_LNUM = lnum_save;",
      "1282:     ga_clear_strings(&newlines);",
      "1283:     if (newargs != NULL)",
      "1284:  ga_clear_strings(newargs);",
      "",
      "[Removed Lines]",
      "1281:     vim_free(line_to_free);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "3962:     ufunc_T *",
      "3964: {",
      "3965:     int  j;",
      "3966:     int  c;",
      "",
      "[Removed Lines]",
      "3963: define_function(exarg_T *eap, char_u *name_arg, char_u **line_to_free)",
      "",
      "[Added Lines]",
      "3964: define_function(exarg_T *eap, char_u *name_arg, garray_T *lines_to_free)",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "4229:     if (get_function_args(&p, ')', &newargs,",
      "4230:    eap->cmdidx == CMD_def ? &argtypes : NULL, FALSE,",
      "4231:     NULL, &varargs, &default_args, eap->skip,",
      "4233:  goto errret_2;",
      "4234:     whitep = p;",
      "",
      "[Removed Lines]",
      "4232:     eap, line_to_free) == FAIL)",
      "",
      "[Added Lines]",
      "4233:     eap, lines_to_free) == FAIL)",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "4343:      || eap->skip)",
      "4344:  goto erret;",
      "",
      "[Removed Lines]",
      "4342:     if (get_function_body(eap, &newlines, line_arg, line_to_free) == FAIL",
      "",
      "[Added Lines]",
      "4343:     if (get_function_body(eap, &newlines, line_arg, lines_to_free) == FAIL",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "4645:     void",
      "4646: ex_function(exarg_T *eap)",
      "4647: {",
      "4652: }",
      "",
      "[Removed Lines]",
      "4648:     char_u *line_to_free = NULL;",
      "4650:     (void)define_function(eap, NULL, &line_to_free);",
      "4651:     vim_free(line_to_free);",
      "",
      "[Added Lines]",
      "4649:     garray_T lines_to_free;",
      "4651:     ga_init2(&lines_to_free, sizeof(char_u *), 50);",
      "4652:     (void)define_function(eap, NULL, &lines_to_free);",
      "4653:     ga_clear_strings(&lines_to_free);",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "751: static int included_patches[] =",
      "754:     4039,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "754:     4040,",
      "",
      "---------------"
    ],
    "src/vim9compile.c||src/vim9compile.c": [
      "File: src/vim9compile.c -> src/vim9compile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "812:     static char_u *",
      "814: {",
      "815:     int  is_global = *eap->arg == 'g' && eap->arg[1] == ':';",
      "816:     char_u *name_start = eap->arg;",
      "",
      "[Removed Lines]",
      "813: compile_nested_function(exarg_T *eap, cctx_T *cctx, char_u **line_to_free)",
      "",
      "[Added Lines]",
      "813: compile_nested_function(exarg_T *eap, cctx_T *cctx, garray_T *lines_to_free)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "876:  goto theend;",
      "877:     }",
      "880:     if (ufunc == NULL)",
      "881:     {",
      "882:  r = eap->skip ? OK : FAIL;",
      "",
      "[Removed Lines]",
      "879:     ufunc = define_function(eap, lambda_name, line_to_free);",
      "",
      "[Added Lines]",
      "879:     ufunc = define_function(eap, lambda_name, lines_to_free);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2496:  cctx_T  *outer_cctx)",
      "2497: {",
      "2498:     char_u *line = NULL;",
      "2500:     char_u *p;",
      "2501:     char *errormsg = NULL; // error message",
      "2502:     cctx_T cctx;",
      "",
      "[Removed Lines]",
      "2499:     char_u *line_to_free = NULL;",
      "",
      "[Added Lines]",
      "2499:     garray_T lines_to_free;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2514: #endif",
      "2515:     int  debug_lnum = -1;",
      "2519:     if (ufunc->uf_dfunc_idx > 0)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2518:     ga_init2(&lines_to_free, sizeof(char_u *), 50);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2681:      if (line != NULL)",
      "2682:      {",
      "2683:   line = vim_strsave(line);",
      "2686:      }",
      "2687:  }",
      "",
      "[Removed Lines]",
      "2684:   vim_free(line_to_free);",
      "2685:   line_to_free = line;",
      "",
      "[Added Lines]",
      "2687:   if (ga_add_string(&lines_to_free, line) == FAIL)",
      "2688:       goto erret;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2926:      case CMD_def:",
      "2927:      case CMD_function:",
      "2928:       ea.arg = p;",
      "2930:       break;",
      "2932:      case CMD_return:",
      "",
      "[Removed Lines]",
      "2929:       line = compile_nested_function(&ea, &cctx, &line_to_free);",
      "",
      "[Added Lines]",
      "2932:       line = compile_nested_function(&ea, &cctx, &lines_to_free);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "3236:     if (do_estack_push)",
      "3237:  estack_pop();",
      "3240:     free_imported(&cctx);",
      "3241:     free_locals(&cctx);",
      "3242:     ga_clear(&cctx.ctx_type_stack);",
      "",
      "[Removed Lines]",
      "3239:     vim_free(line_to_free);",
      "",
      "[Added Lines]",
      "3242:     ga_clear_strings(&lines_to_free);",
      "",
      "---------------"
    ],
    "src/viminfo.c||src/viminfo.c": [
      "File: src/viminfo.c -> src/viminfo.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2730:     {",
      "2732:  if (writing)",
      "2734:     }",
      "2735:     else",
      "2736:     {",
      "",
      "[Removed Lines]",
      "2733:      ga_add_string(&virp->vir_barlines, virp->vir_line);",
      "",
      "[Added Lines]",
      "2733:      ga_copy_string(&virp->vir_barlines, virp->vir_line);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2769:      default:",
      "2771:   if (writing)",
      "2773:  }",
      "2774:  for (i = 0; i < values.ga_len; ++i)",
      "2775:  {",
      "",
      "[Removed Lines]",
      "2772:       ga_add_string(&virp->vir_barlines, virp->vir_line);",
      "",
      "[Added Lines]",
      "2772:       ga_copy_string(&virp->vir_barlines, virp->vir_line);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "844fb64a605d60131827503a001b2d1aa232b078",
      "candidate_info": {
        "commit_hash": "844fb64a605d60131827503a001b2d1aa232b078",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/844fb64a605d60131827503a001b2d1aa232b078",
        "files": [
          "src/eval.c",
          "src/globals.h",
          "src/proto/eval.pro",
          "src/structs.h",
          "src/testdir/test_vim9_func.vim",
          "src/userfunc.c",
          "src/version.c",
          "src/vim9compile.c"
        ],
        "message": "patch 8.2.3560: using freed memory with lambda\n\nProblem:    Using freed memory with lambda.\nSolution:   Do not free lines early, keep them until the expression is\n            finished.",
        "before_after_code_files": [
          "src/eval.c||src/eval.c",
          "src/globals.h||src/globals.h",
          "src/proto/eval.pro||src/proto/eval.pro",
          "src/structs.h||src/structs.h",
          "src/testdir/test_vim9_func.vim||src/testdir/test_vim9_func.vim",
          "src/userfunc.c||src/userfunc.c",
          "src/version.c||src/version.c",
          "src/vim9compile.c||src/vim9compile.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/testdir/test_vim9_func.vim||src/testdir/test_vim9_func.vim",
            "src/userfunc.c||src/userfunc.c",
            "src/version.c||src/version.c",
            "src/vim9compile.c||src/vim9compile.c"
          ],
          "candidate": [
            "src/testdir/test_vim9_func.vim||src/testdir/test_vim9_func.vim",
            "src/userfunc.c||src/userfunc.c",
            "src/version.c||src/version.c",
            "src/vim9compile.c||src/vim9compile.c"
          ]
        }
      },
      "candidate_diff": {
        "src/eval.c||src/eval.c": [
          "File: src/eval.c -> src/eval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "143:     void",
          "144: fill_evalarg_from_eap(evalarg_T *evalarg, exarg_T *eap, int skip)",
          "145: {",
          "147:     evalarg->eval_flags = skip ? 0 : EVAL_EVALUATE;",
          "148:     if (eap != NULL)",
          "149:     {",
          "",
          "[Removed Lines]",
          "146:     CLEAR_FIELD(*evalarg);",
          "",
          "[Added Lines]",
          "146:     init_evalarg(evalarg);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2142:     return skipwhite(line);",
          "2143: }",
          "",
          "[Removed Lines]",
          "2140:     VIM_CLEAR(evalarg->eval_tofree_cmdline);",
          "",
          "[Added Lines]",
          "2140:     evalarg->eval_using_cmdline = FALSE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2159:     return p;",
          "2160: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2164:     void",
          "2165: init_evalarg(evalarg_T *evalarg)",
          "2166: {",
          "2167:     CLEAR_POINTER(evalarg);",
          "2168:     ga_init2(&evalarg->eval_tofree_ga, sizeof(char_u *), 20);",
          "2169: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2183:      evalarg->eval_tofree = NULL;",
          "2184:  }",
          "2187:  VIM_CLEAR(evalarg->eval_tofree_lambda);",
          "2188:     }",
          "2189: }",
          "",
          "[Removed Lines]",
          "2186:  VIM_CLEAR(evalarg->eval_tofree_cmdline);",
          "",
          "[Added Lines]",
          "2195:  ga_clear_strings(&evalarg->eval_tofree_ga);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2299:  if (evalarg == NULL)",
          "2300:  {",
          "2302:      evalarg_used = &local_evalarg;",
          "2303:  }",
          "2304:  orig_flags = evalarg_used->eval_flags;",
          "",
          "[Removed Lines]",
          "2301:      CLEAR_FIELD(local_evalarg);",
          "",
          "[Added Lines]",
          "2310:      init_evalarg(&local_evalarg);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2456:  if (evalarg == NULL)",
          "2457:  {",
          "2459:      evalarg_used = &local_evalarg;",
          "2460:  }",
          "2461:  orig_flags = evalarg_used->eval_flags;",
          "",
          "[Removed Lines]",
          "2458:      CLEAR_FIELD(local_evalarg);",
          "",
          "[Added Lines]",
          "2467:      init_evalarg(&local_evalarg);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2582:  if (evalarg == NULL)",
          "2583:  {",
          "2585:      evalarg_used = &local_evalarg;",
          "2586:  }",
          "2587:  orig_flags = evalarg_used->eval_flags;",
          "",
          "[Removed Lines]",
          "2584:      CLEAR_FIELD(local_evalarg);",
          "",
          "[Added Lines]",
          "2593:      init_evalarg(&local_evalarg);",
          "",
          "---------------"
        ],
        "src/globals.h||src/globals.h": [
          "File: src/globals.h -> src/globals.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1868: EXTERN evalarg_T EVALARG_EVALUATE",
          "1869: # ifdef DO_INIT",
          "1872: # endif",
          "1873:  ;",
          "1874: #endif",
          "",
          "[Removed Lines]",
          "1870:  = {EVAL_EVALUATE, 0, NULL, NULL, NULL, NULL, {0, 0, 0, 0, NULL},",
          "1871:        {0, 0, 0, 0, NULL}, NULL, NULL, NULL}",
          "",
          "[Added Lines]",
          "1870:  = {EVAL_EVALUATE, 0, NULL, NULL, NULL, NULL, GA_EMPTY, GA_EMPTY, NULL,",
          "1871:     {0, 0, (int)sizeof(char_u *), 20, NULL}, 0, NULL}",
          "",
          "---------------"
        ],
        "src/proto/eval.pro||src/proto/eval.pro": [
          "File: src/proto/eval.pro -> src/proto/eval.pro",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: void set_context_for_expression(expand_T *xp, char_u *arg, cmdidx_T cmdidx);",
          "35: int pattern_match(char_u *pat, char_u *text, int ic);",
          "36: char_u *skipwhite_and_linebreak(char_u *arg, evalarg_T *evalarg);",
          "37: void clear_evalarg(evalarg_T *evalarg, exarg_T *eap);",
          "38: int eval0(char_u *arg, typval_T *rettv, exarg_T *eap, evalarg_T *evalarg);",
          "39: int eval1(char_u **arg, typval_T *rettv, evalarg_T *evalarg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: void init_evalarg(evalarg_T *evalarg);",
          "",
          "---------------"
        ],
        "src/structs.h||src/structs.h": [
          "File: src/structs.h -> src/structs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1907:     char_u *eval_tofree;",
          "1913:     char_u *eval_tofree_lambda;",
          "",
          "[Removed Lines]",
          "1910:     char_u *eval_tofree_cmdline;",
          "",
          "[Added Lines]",
          "1910:     garray_T eval_tofree_ga;",
          "1913:     int  eval_using_cmdline;",
          "",
          "---------------"
        ],
        "src/testdir/test_vim9_func.vim||src/testdir/test_vim9_func.vim": [
          "File: src/testdir/test_vim9_func.vim -> src/testdir/test_vim9_func.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "1133:   CheckScriptSuccess(lines)",
          "1134: enddef",
          "1136: \" Default arg and varargs",
          "1137: def MyDefVarargs(one: string, two = 'foo', ...rest: list<string>): string",
          "1138:   var res = one .. ',' .. two",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1136: def Test_lambda_in_reduce_line_break()",
          "1137:   # this was using freed memory",
          "1138:   var lines =<< trim END",
          "1139:       vim9script",
          "1140:       const result: dict<number> =",
          "1141:           ['Bob', 'Sam', 'Cat', 'Bob', 'Cat', 'Cat']",
          "1142:           ->reduce((acc, val) => {",
          "1143:               if has_key(acc, val)",
          "1144:                   acc[val] += 1",
          "1145:                   return acc",
          "1146:               else",
          "1147:                   acc[val] = 1",
          "1148:                   return acc",
          "1149:               endif",
          "1150:           }, {})",
          "1151:       assert_equal({Bob: 2, Sam: 1, Cat: 3}, result)",
          "1152:   END",
          "1153:   CheckScriptSuccess(lines)",
          "1154: enddef",
          "",
          "---------------"
        ],
        "src/userfunc.c||src/userfunc.c": [
          "File: src/userfunc.c -> src/userfunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1178:     if (cmdline != NULL)",
          "1179:     {",
          "1186:     }",
          "1187:     else",
          "",
          "[Removed Lines]",
          "1184:  vim_free(evalarg->eval_tofree_cmdline);",
          "1185:  evalarg->eval_tofree_cmdline = cmdline;",
          "",
          "[Added Lines]",
          "1180:  garray_T *tfgap = &evalarg->eval_tofree_ga;",
          "1186:  if (ga_grow(tfgap, 1) == OK)",
          "1187:  {",
          "1188:      ((char_u **)(tfgap->ga_data))[tfgap->ga_len++] = cmdline;",
          "1189:      evalarg->eval_using_cmdline = TRUE;",
          "1190:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4867:  return;",
          "4868:     }",
          "4871:     evalarg.eval_flags = eap->skip ? 0 : EVAL_EVALUATE;",
          "4873:     if (eap->skip)",
          "",
          "[Removed Lines]",
          "4870:     CLEAR_FIELD(evalarg);",
          "",
          "[Added Lines]",
          "4875:     init_evalarg(&evalarg);",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "758: static int included_patches[] =",
          "761:     3559,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "761:     3560,",
          "",
          "---------------"
        ],
        "src/vim9compile.c||src/vim9compile.c": [
          "File: src/vim9compile.c -> src/vim9compile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3702:     ufunc_T *ufunc;",
          "3703:     evalarg_T evalarg;",
          "3706:     evalarg.eval_flags = EVAL_EVALUATE;",
          "3707:     evalarg.eval_cctx = cctx;",
          "",
          "[Removed Lines]",
          "3705:     CLEAR_FIELD(evalarg);",
          "",
          "[Added Lines]",
          "3705:     init_evalarg(&evalarg);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3733:  compile_def_function(ufunc, FALSE, CT_NONE, cctx);",
          "3734: #endif",
          "3739:     {",
          "3743:           + off;",
          "",
          "[Removed Lines]",
          "3738:     if (evalarg.eval_tofree_cmdline != NULL)",
          "3740:  size_t off = *arg - evalarg.eval_tofree_cmdline;",
          "",
          "[Added Lines]",
          "3739:     if (evalarg.eval_using_cmdline)",
          "3741:  garray_T    *gap = &evalarg.eval_tofree_ga;",
          "3742:  size_t     off = *arg - ((char_u **)gap->ga_data)[gap->ga_len - 1];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4201: {",
          "4202:     evalarg_T evalarg;",
          "4205:     evalarg.eval_cctx = cctx;",
          "4206:     skip_expr(arg, &evalarg);",
          "4207: }",
          "",
          "[Removed Lines]",
          "4204:     CLEAR_FIELD(evalarg);",
          "",
          "[Added Lines]",
          "4206:     init_evalarg(&evalarg);",
          "4209:     clear_evalarg(&evalarg, NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e4db17fb6e2d029aa2dddfca703ace9bcf0d85fd",
      "candidate_info": {
        "commit_hash": "e4db17fb6e2d029aa2dddfca703ace9bcf0d85fd",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/e4db17fb6e2d029aa2dddfca703ace9bcf0d85fd",
        "files": [
          "src/ex_docmd.c",
          "src/proto/ex_docmd.pro",
          "src/testdir/test_vim9_script.vim",
          "src/usercmd.c",
          "src/userfunc.c",
          "src/version.c",
          "src/vim9compile.c"
        ],
        "message": "patch 8.2.3271: Vim9: cannot use :command or :au with block in :def function\n\nProblem:    Vim9: cannot use :command or :au with a block in a :def function.\nSolution:   Recognize the start of the block.",
        "before_after_code_files": [
          "src/ex_docmd.c||src/ex_docmd.c",
          "src/proto/ex_docmd.pro||src/proto/ex_docmd.pro",
          "src/testdir/test_vim9_script.vim||src/testdir/test_vim9_script.vim",
          "src/usercmd.c||src/usercmd.c",
          "src/userfunc.c||src/userfunc.c",
          "src/version.c||src/version.c",
          "src/vim9compile.c||src/vim9compile.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/usercmd.c||src/usercmd.c",
            "src/userfunc.c||src/userfunc.c",
            "src/version.c||src/version.c",
            "src/vim9compile.c||src/vim9compile.c"
          ],
          "candidate": [
            "src/usercmd.c||src/usercmd.c",
            "src/userfunc.c||src/userfunc.c",
            "src/version.c||src/version.c",
            "src/vim9compile.c||src/vim9compile.c"
          ]
        }
      },
      "candidate_diff": {
        "src/ex_docmd.c||src/ex_docmd.c": [
          "File: src/ex_docmd.c -> src/ex_docmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2745: checkforcmd_noparen(",
          "2746:     char_u **pp,  // start of command",
          "2747:     char *cmd,  // name of command",
          "",
          "[Removed Lines]",
          "2744:     static int",
          "",
          "[Added Lines]",
          "2744:     int",
          "",
          "---------------"
        ],
        "src/proto/ex_docmd.pro||src/proto/ex_docmd.pro": [
          "File: src/proto/ex_docmd.pro -> src/proto/ex_docmd.pro",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: char_u *getline_peek(char_u *(*fgetline)(int, void *, int, getline_opt_T), void *cookie);",
          "10: char *ex_errmsg(char *msg, char_u *arg);",
          "11: int checkforcmd(char_u **pp, char *cmd, int len);",
          "12: int parse_command_modifiers(exarg_T *eap, char **errormsg, cmdmod_T *cmod, int skip_only);",
          "13: int has_cmdmod(cmdmod_T *cmod);",
          "14: int cmdmod_error(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: int checkforcmd_noparen(char_u **pp, char *cmd, int len);",
          "",
          "---------------"
        ],
        "src/testdir/test_vim9_script.vim||src/testdir/test_vim9_script.vim": [
          "File: src/testdir/test_vim9_script.vim -> src/testdir/test_vim9_script.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "334:   CheckScriptSuccess(lines)",
          "335: enddef",
          "337: func g:NoSuchFunc()",
          "338:   echo 'none'",
          "339: endfunc",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "337: \" legacy func for command that's defined later",
          "338: func InvokeSomeCommand()",
          "339:   SomeCommand",
          "340: endfunc",
          "342: def Test_autocommand_block()",
          "343:   com SomeCommand {",
          "344:       g:someVar = 'some'",
          "345:     }",
          "346:   InvokeSomeCommand()",
          "347:   assert_equal('some', g:someVar)",
          "349:   delcommand SomeCommand",
          "350:   unlet g:someVar",
          "351: enddef",
          "353: def Test_command_block()",
          "354:   au BufNew *.xml {",
          "355:       g:otherVar = 'other'",
          "356:     }",
          "357:   split other.xml",
          "358:   assert_equal('other', g:otherVar)",
          "360:   bwipe!",
          "361:   au! BufNew *.xml",
          "362:   unlet g:otherVar",
          "363: enddef",
          "",
          "---------------"
        ],
        "src/usercmd.c||src/usercmd.c": [
          "File: src/usercmd.c -> src/usercmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "983:     if (*p == '{' && ends_excmd2(eap->arg, skipwhite(p + 1))",
          "984:              && eap->getline != NULL)",
          "985:     {",
          "989:  ga_init2(&ga, sizeof(char_u *), 10);",
          "990:  if (ga_add_string(&ga, p) == FAIL)",
          "991:      return retp;",
          "1000:      {",
          "1003:      }",
          "1009:  vim_free(line);",
          "1010:  retp = *tofree = ga_concat_strings(&ga, \"\\n\");",
          "1011:  ga_clear_strings(&ga);",
          "",
          "[Removed Lines]",
          "986:  garray_T ga;",
          "987:  char_u *line = NULL;",
          "995:  for (;;)",
          "996:  {",
          "997:      vim_free(line);",
          "998:      if ((line = eap->getline(':', eap->cookie,",
          "999:            0, GETLINE_CONCAT_CONTBAR)) == NULL)",
          "1001:   emsg(_(e_missing_rcurly));",
          "1002:   break;",
          "1004:      if (ga_add_string(&ga, line) == FAIL)",
          "1005:   break;",
          "1006:      if (*skipwhite(line) == '}')",
          "1007:   break;",
          "1008:  }",
          "",
          "[Added Lines]",
          "986:  garray_T    ga;",
          "987:  char_u     *line = NULL;",
          "995:  if (p[STRLEN(p) - 1] != '}')",
          "998:      for (;;)",
          "1000:   vim_free(line);",
          "1001:   if ((line = eap->getline(':', eap->cookie,",
          "1002:         0, GETLINE_CONCAT_CONTBAR)) == NULL)",
          "1003:   {",
          "1004:       emsg(_(e_missing_rcurly));",
          "1005:       break;",
          "1006:   }",
          "1007:   if (ga_add_string(&ga, line) == FAIL)",
          "1008:       break;",
          "1009:   if (*skipwhite(line) == '}')",
          "1010:       break;",
          "",
          "---------------"
        ],
        "src/userfunc.c||src/userfunc.c": [
          "File: src/userfunc.c -> src/userfunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "903:       --end;",
          "904:   if (end > p && *end == '{')",
          "905:   {",
          "906:       --end;",
          "907:       while (end > p && VIM_ISWHITE(*end))",
          "908:    --end;",
          "910:       {",
          "912:    if (nesting == MAX_FUNC_NESTING - 1)",
          "913:        emsg(_(e_function_nesting_too_deep));",
          "914:    else",
          "",
          "[Removed Lines]",
          "909:       if (end > p + 2 && end[-1] == '=' && end[0] == '>')",
          "",
          "[Added Lines]",
          "906:       int     is_block;",
          "912:       is_block = end > p + 2 && end[-1] == '=' && end[0] == '>';",
          "913:       if (!is_block)",
          "914:       {",
          "915:    char_u *s = p;",
          "919:    is_block = checkforcmd_noparen(&s, \"autocmd\", 2)",
          "920:           || checkforcmd_noparen(&s, \"command\", 3);",
          "921:       }",
          "923:       if (is_block)",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "756: static int included_patches[] =",
          "759:     3270,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "759:     3271,",
          "",
          "---------------"
        ],
        "src/vim9compile.c||src/vim9compile.c": [
          "File: src/vim9compile.c -> src/vim9compile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8863:     static char_u *",
          "8865: {",
          "8866:     char_u *p;",
          "8867:     int  has_expr = FALSE;",
          "8868:     char_u *nextcmd = (char_u *)\"\";",
          "8870:     if (cctx->ctx_skip == SKIP_YES)",
          "8871:  goto theend;",
          "",
          "[Removed Lines]",
          "8864: compile_exec(char_u *line, exarg_T *eap, cctx_T *cctx)",
          "",
          "[Added Lines]",
          "8864: compile_exec(char_u *line_arg, exarg_T *eap, cctx_T *cctx)",
          "8866:     char_u *line = line_arg;",
          "8870:     char_u *tofree = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8922:   nextcmd = p + 1;",
          "8923:      }",
          "8924:  }",
          "8925:     }",
          "8927:     if (eap->cmdidx == CMD_syntax && STRNCMP(eap->arg, \"include \", 8) == 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8927:  else if (eap->cmdidx == CMD_command || eap->cmdidx == CMD_autocmd)",
          "8928:  {",
          "8930:      p = eap->arg + STRLEN(eap->arg) - 1;",
          "8931:      while (p > eap->arg && VIM_ISWHITE(*p))",
          "8932:   --p;",
          "8933:      if (*p == '{')",
          "8934:      {",
          "8935:   exarg_T ea;",
          "8936:   int flags;  // unused",
          "8937:   int start_lnum = SOURCING_LNUM;",
          "8939:   CLEAR_FIELD(ea);",
          "8940:   ea.arg = eap->arg;",
          "8941:   fill_exarg_from_cctx(&ea, cctx);",
          "8942:   (void)may_get_cmd_block(&ea, p, &tofree, &flags);",
          "8943:   if (tofree != NULL)",
          "8944:   {",
          "8946:       line = concat_str(line, tofree);",
          "8947:       if (line == NULL)",
          "8948:    goto theend;",
          "8949:       vim_free(tofree);",
          "8950:       tofree = line;",
          "8951:       SOURCING_LNUM = start_lnum;",
          "8952:   }",
          "8953:      }",
          "8954:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "9008:  --nextcmd;",
          "9010:     }",
          "9012:     return nextcmd;",
          "9013: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9041:     vim_free(tofree);",
          "",
          "---------------"
        ]
      }
    }
  ]
}