{
  "cve_id": "CVE-2015-5324",
  "cve_desc": "Jenkins before 1.638 and LTS before 1.625.2 allow remote attackers to obtain sensitive information via a direct request to queue/api.",
  "repo": "jenkinsci/jenkins",
  "patch_hash": "581eb9ceb354b8a55c010d0547ff73cb6fd67a75",
  "patch_info": {
    "commit_hash": "581eb9ceb354b8a55c010d0547ff73cb6fd67a75",
    "repo": "jenkinsci/jenkins",
    "commit_url": "https://github.com/jenkinsci/jenkins/commit/581eb9ceb354b8a55c010d0547ff73cb6fd67a75",
    "files": [
      "core/src/main/java/hudson/model/Queue.java",
      "test/src/test/java/hudson/model/QueueTest.java"
    ],
    "message": "[SECURITY-186] check user permissions when calling QUEUE API",
    "before_after_code_files": [
      "core/src/main/java/hudson/model/Queue.java||core/src/main/java/hudson/model/Queue.java",
      "test/src/test/java/hudson/model/QueueTest.java||test/src/test/java/hudson/model/QueueTest.java"
    ]
  },
  "patch_diff": {
    "core/src/main/java/hudson/model/Queue.java||core/src/main/java/hudson/model/Queue.java": [
      "File: core/src/main/java/hudson/model/Queue.java -> core/src/main/java/hudson/model/Queue.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "109: import jenkins.util.AtmostOneTaskExecutor;",
      "110: import org.acegisecurity.AccessDeniedException;",
      "111: import org.acegisecurity.Authentication;",
      "112: import org.kohsuke.stapler.HttpResponse;",
      "113: import org.kohsuke.stapler.HttpResponses;",
      "114: import org.kohsuke.stapler.export.Exported;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "112: import org.kohsuke.accmod.restrictions.NoExternalUse;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "695:     @Exported(inline=true)",
      "696:     public synchronized Item[] getItems() {",
      "706:         return r;",
      "707:     }",
      "",
      "[Removed Lines]",
      "697:         Item[] r = new Item[waitingList.size() + blockedProjects.size() + buildables.size() + pendings.size()];",
      "698:         waitingList.toArray(r);",
      "699:         int idx = waitingList.size();",
      "700:         for (BlockedItem p : blockedProjects.values())",
      "701:             r[idx++] = p;",
      "702:         for (BuildableItem p : reverse(buildables.values()))",
      "703:             r[idx++] = p;",
      "704:         for (BuildableItem p : reverse(pendings.values()))",
      "705:             r[idx++] = p;",
      "",
      "[Added Lines]",
      "698:         List<Item> r = new ArrayList<Item>();",
      "700:         for(WaitingItem p : waitingList) {",
      "701:             r = filterItemListBasedOnPermissions(r, p);",
      "702:         }",
      "703:         for (BlockedItem p : blockedProjects.values()){",
      "704:             r = filterItemListBasedOnPermissions(r, p);",
      "705:         }",
      "706:         for (BuildableItem p : reverse(buildables.values())) {",
      "707:             r = filterItemListBasedOnPermissions(r, p);",
      "708:         }",
      "709:         for (BuildableItem p : reverse(pendings.values())) {",
      "710:             r= filterItemListBasedOnPermissions(r, p);",
      "711:         }",
      "712:         Item[] items = new Item[r.size()];",
      "713:         r.toArray(items);",
      "714:         return items;",
      "715:     }",
      "717:     private List<Item> filterItemListBasedOnPermissions(List<Item> r, Item t) {",
      "718:         if (t.task instanceof hudson.model.Item) {",
      "719:             if (((hudson.model.Item)t.task).hasPermission(hudson.model.Item.READ)) {",
      "720:                 r.add(t);",
      "721:             }",
      "722:         }",
      "723:         return r;",
      "724:     }",
      "732:     @Restricted(NoExternalUse.class)",
      "733:     @Exported(inline=true)",
      "734:     public synchronized StubItem[] getDiscoverableItems() {",
      "735:         List<StubItem> r = new ArrayList<StubItem>();",
      "737:         for(WaitingItem p : waitingList) {",
      "738:             r = filterDiscoverableItemListBasedOnPermissions(r, p);",
      "739:         }",
      "740:         for (BlockedItem p : blockedProjects.values()){",
      "741:             r = filterDiscoverableItemListBasedOnPermissions(r, p);",
      "742:         }",
      "743:         for (BuildableItem p : reverse(buildables.values())) {",
      "744:             r = filterDiscoverableItemListBasedOnPermissions(r, p);",
      "745:         }",
      "746:         for (BuildableItem p : reverse(pendings.values())) {",
      "747:             r= filterDiscoverableItemListBasedOnPermissions(r, p);",
      "748:         }",
      "749:         StubItem[] items = new StubItem[r.size()];",
      "750:         r.toArray(items);",
      "751:         return items;",
      "752:     }",
      "754:     private List<StubItem> filterDiscoverableItemListBasedOnPermissions(List<StubItem> r, Item t) {",
      "755:         if (t.task instanceof hudson.model.Item) {",
      "756:             if (!((hudson.model.Item)t.task).hasPermission(hudson.model.Item.READ) && ((hudson.model.Item)t.task).hasPermission(hudson.model.Item.DISCOVER)) {",
      "757:                 r.add(new StubItem(new StubTask(t.task)));",
      "758:             }",
      "759:         }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1581:         }",
      "1583:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1643:     @Restricted(NoExternalUse.class)",
      "1644:     @ExportedBean(defaultVisibility = 999)",
      "1645:     public static class StubTask {",
      "1647:         private String name;",
      "1649:         public StubTask(@Nonnull Queue.Task base) {",
      "1650:             this.name = base.getName();",
      "1651:         }",
      "1653:         @Exported",
      "1654:         public String getName() {",
      "1655:             return name;",
      "1656:         }",
      "1657:     }",
      "1663:     @Restricted(NoExternalUse.class)",
      "1664:     @ExportedBean(defaultVisibility = 999)",
      "1665:     public class StubItem {",
      "1667:         @Exported public StubTask task;",
      "1669:         public StubItem(StubTask task) {",
      "1670:             this.task = task;",
      "1671:         }",
      "1673:     }",
      "",
      "---------------"
    ],
    "test/src/test/java/hudson/model/QueueTest.java||test/src/test/java/hudson/model/QueueTest.java": [
      "File: test/src/test/java/hudson/model/QueueTest.java -> test/src/test/java/hudson/model/QueueTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: package hudson.model;",
      "26: import com.gargoylesoftware.htmlunit.html.HtmlFileInput;",
      "27: import com.gargoylesoftware.htmlunit.html.HtmlForm;",
      "28: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
      "29: import hudson.Launcher;",
      "30: import hudson.matrix.AxisList;",
      "31: import hudson.matrix.LabelAxis;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "26: import com.gargoylesoftware.htmlunit.html.DomElement;",
      "27: import com.gargoylesoftware.htmlunit.html.DomNode;",
      "31: import com.gargoylesoftware.htmlunit.xml.XmlPage;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "39: import hudson.model.Queue.Executable;",
      "40: import hudson.model.Queue.WaitingItem;",
      "41: import hudson.model.queue.AbstractQueueTask;",
      "42: import hudson.model.queue.QueueTaskFuture;",
      "43: import hudson.model.queue.ScheduleResult;",
      "44: import hudson.model.queue.SubTask;",
      "45: import hudson.security.ACL;",
      "46: import hudson.security.GlobalMatrixAuthorizationStrategy;",
      "47: import hudson.security.SparseACL;",
      "48: import hudson.slaves.DumbSlave;",
      "49: import hudson.slaves.DummyCloudImpl;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "45: import hudson.model.queue.CauseOfBlockage;",
      "46: import hudson.model.queue.QueueTaskDispatcher;",
      "51: import hudson.security.AuthorizationMatrixProperty;",
      "53: import hudson.security.Permission;",
      "54: import hudson.security.ProjectMatrixAuthorizationStrategy;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "58: import java.util.ArrayList;",
      "59: import java.util.Arrays;",
      "60: import java.util.Collections;",
      "61: import java.util.List;",
      "62: import java.util.concurrent.CancellationException;",
      "63: import java.util.concurrent.ExecutionException;",
      "64: import java.util.concurrent.Future;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "69: import java.util.HashMap;",
      "71: import java.util.Map;",
      "72: import java.util.Set;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "84: import org.jvnet.hudson.test.HudsonTestCase;",
      "85: import org.jvnet.hudson.test.MockQueueItemAuthenticator;",
      "86: import org.jvnet.hudson.test.SequenceLock;",
      "87: import org.jvnet.hudson.test.TestBuilder;",
      "88: import org.mortbay.jetty.Server;",
      "89: import org.mortbay.jetty.bio.SocketConnector;",
      "90: import org.mortbay.jetty.servlet.ServletHandler;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "98: import org.jvnet.hudson.test.SleepBuilder;",
      "100: import org.jvnet.hudson.test.TestExtension;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "413:         FreeStyleBuild b = v.waitForStart();",
      "414:         assertEquals(1,b.getNumber());",
      "415:         assertTrue(b.isBuilding());",
      "418:         ev.signal();    // let the build complete",
      "419:         FreeStyleBuild b2 = assertBuildStatusSuccess(v);",
      "421:     }",
      "423:     @Inject",
      "",
      "[Removed Lines]",
      "416:         assertSame(p,b.getProject());",
      "420:         assertSame(b,b2);",
      "",
      "[Added Lines]",
      "429:         assertSame(p, b.getProject());",
      "433:         assertSame(b, b2);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "579:         } catch (CancellationException e) {",
      "580:         }",
      "581:     }",
      "582: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "596:     public void testQueueApiOutputShouldBeFilteredByUserPermission() throws Exception {",
      "598:         jenkins.setSecurityRealm(createDummySecurityRealm());",
      "599:         ProjectMatrixAuthorizationStrategy str = new ProjectMatrixAuthorizationStrategy();",
      "600:         str.add(Jenkins.READ, \"bob\");",
      "601:         str.add(Jenkins.READ, \"alice\");",
      "602:         str.add(Jenkins.READ, \"james\");",
      "603:         jenkins.setAuthorizationStrategy(str);",
      "605:         FreeStyleProject project = createFreeStyleProject(\"project\");",
      "607:         Map<Permission, Set<String>> permissions = new HashMap<Permission, Set<String>>();",
      "608:         permissions.put(Item.READ, Collections.singleton(\"bob\"));",
      "609:         permissions.put(Item.DISCOVER, Collections.singleton(\"james\"));",
      "610:         AuthorizationMatrixProperty prop1 = new AuthorizationMatrixProperty(permissions);",
      "611:         project.addProperty(prop1);",
      "612:         project.getBuildersList().add(new SleepBuilder(10));",
      "613:         project.scheduleBuild2(0);",
      "615:         WebClient webClient = new WebClient();",
      "616:         webClient.login(\"bob\", \"bob\");",
      "617:         XmlPage p = webClient.goToXml(\"/queue/api/xml\");",
      "620:         for (DomNode element: p.getFirstChild().getFirstChild().getChildNodes()){",
      "621:             if(element.getNodeName().equals(\"task\")){",
      "622:                 assertEquals(((DomElement)element).getElementsByTagName(\"name\").size(),1);",
      "623:                 assertEquals(((DomElement) element).getElementsByTagName(\"name\").item(0).getFirstChild().toString(), \"project\");",
      "624:                 assertEquals(((DomElement)element).getElementsByTagName(\"url\").size(),1);",
      "625:             }",
      "626:         }",
      "627:         WebClient webClient2 = new WebClient();",
      "628:         webClient2.login(\"alice\");",
      "629:         XmlPage p2 = webClient2.goToXml(\"/queue/api/xml\");",
      "631:         assertEquals(\"<queue></queue>\", p2.getContent());",
      "633:         WebClient webClient3 = new WebClient();",
      "634:         webClient3.login(\"james\");",
      "635:         XmlPage p3 = webClient3.goToXml(\"/queue/api/xml\");",
      "637:         assertEquals(\"<queue><discoverableItem><task><name>project</name></task></discoverableItem></queue>\",",
      "638:                 p3.getContent());",
      "640:     }",
      "643:     @TestExtension(\"testQueueApiOutputShouldBeFilteredByUserPermission\")",
      "644:     public static class MyQueueTaskDispatcher extends QueueTaskDispatcher {",
      "645:         @Override",
      "646:         public CauseOfBlockage canTake(Node node, Queue.BuildableItem item) {",
      "647:             return new CauseOfBlockage() {",
      "648:                 @Override",
      "649:                 public String getShortDescription() {",
      "650:                     return \"blocked by canTake\";",
      "651:                 }",
      "652:             };",
      "653:         }",
      "654:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e930da45ff4c48dfcaadc57e01485051d2a04b1d",
      "candidate_info": {
        "commit_hash": "e930da45ff4c48dfcaadc57e01485051d2a04b1d",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/e930da45ff4c48dfcaadc57e01485051d2a04b1d",
        "files": [
          "core/src/main/java/hudson/model/Queue.java",
          "core/src/main/java/hudson/model/queue/AbstractQueueTask.java"
        ],
        "message": "[JENKINS-31649] Tidy-up javadoc comments after merge of JENKINS-31649",
        "before_after_code_files": [
          "core/src/main/java/hudson/model/Queue.java||core/src/main/java/hudson/model/Queue.java",
          "core/src/main/java/hudson/model/queue/AbstractQueueTask.java||core/src/main/java/hudson/model/queue/AbstractQueueTask.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/hudson/model/Queue.java||core/src/main/java/hudson/model/Queue.java"
          ],
          "candidate": [
            "core/src/main/java/hudson/model/Queue.java||core/src/main/java/hudson/model/Queue.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/model/Queue.java||core/src/main/java/hudson/model/Queue.java": [
          "File: core/src/main/java/hudson/model/Queue.java -> core/src/main/java/hudson/model/Queue.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: import hudson.model.queue.CauseOfBlockage.BecauseLabelIsOffline;",
          "65: import hudson.model.queue.CauseOfBlockage.BecauseNodeIsBusy;",
          "66: import hudson.model.queue.WorkUnitContext;",
          "67: import jenkins.security.QueueItemAuthenticatorProvider;",
          "68: import jenkins.util.Timer;",
          "69: import hudson.triggers.SafeTimerTask;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: import hudson.security.AccessControlled;",
          "68: import hudson.security.Permission;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "782:         List<Item> r = new ArrayList<Item>();",
          "784:         for(WaitingItem p : s.waitingList) {",
          "786:         }",
          "787:         for (BlockedItem p : s.blockedProjects){",
          "789:         }",
          "790:         for (BuildableItem p : reverse(s.buildables)) {",
          "792:         }",
          "793:         for (BuildableItem p : reverse(s.pendings)) {",
          "795:         }",
          "796:         Item[] items = new Item[r.size()];",
          "797:         r.toArray(items);",
          "798:         return items;",
          "799:     }",
          "802:         if (t.task instanceof hudson.security.AccessControlled) {",
          "803:             if (((hudson.security.AccessControlled)t.task).hasPermission(hudson.model.Item.READ)",
          "804:                     || ((hudson.security.AccessControlled) t.task).hasPermission(hudson.security.Permission.READ)) {",
          "",
          "[Removed Lines]",
          "785:             r = filterItemListBasedOnPermissions(r, p);",
          "788:             r = filterItemListBasedOnPermissions(r, p);",
          "791:             r = filterItemListBasedOnPermissions(r, p);",
          "794:             r= filterItemListBasedOnPermissions(r, p);",
          "801:     private List<Item> filterItemListBasedOnPermissions(List<Item> r, Item t) {",
          "",
          "[Added Lines]",
          "787:             r = checkPermissionsAndAddToList(r, p);",
          "790:             r = checkPermissionsAndAddToList(r, p);",
          "793:             r = checkPermissionsAndAddToList(r, p);",
          "796:             r= checkPermissionsAndAddToList(r, p);",
          "803:     private List<Item> checkPermissionsAndAddToList(List<Item> r, Item t) {",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/model/queue/AbstractQueueTask.java||core/src/main/java/hudson/model/queue/AbstractQueueTask.java": [
          "File: core/src/main/java/hudson/model/queue/AbstractQueueTask.java -> core/src/main/java/hudson/model/queue/AbstractQueueTask.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import hudson.model.Queue;",
          "28: import hudson.model.Queue.Task;",
          "29: import hudson.security.ACL;",
          "30: import org.acegisecurity.Authentication;",
          "32: import javax.annotation.Nonnull;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import hudson.security.AccessControlled;",
          "",
          "---------------"
        ]
      }
    }
  ]
}