{
  "cve_id": "CVE-2017-11408",
  "cve_desc": "In Wireshark 2.2.0 to 2.2.7 and 2.0.0 to 2.0.13, the AMQP dissector could crash. This was addressed in epan/dissectors/packet-amqp.c by checking for successful list dissection.",
  "repo": "wireshark/wireshark",
  "patch_hash": "2de483c0925a5a93cdaee168997f3f3c7949d2d4",
  "patch_info": {
    "commit_hash": "2de483c0925a5a93cdaee168997f3f3c7949d2d4",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/2de483c0925a5a93cdaee168997f3f3c7949d2d4",
    "files": [
      "epan/dissectors/packet-amqp.c"
    ],
    "message": "AMQP: workaround some proto_tree_add_none_format() asserts\n\nPreviously proto_tree_add_none_format() could be called with any type\nof field type, not FT_NONE only.\n\nChange-Id: I78976a168fc1bf606b72ad38d284bb0bd1794b03\nPing-Bug: 13780\nReviewed-on: https://code.wireshark.org/review/22243\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>",
    "before_after_code_files": [
      "epan/dissectors/packet-amqp.c||epan/dissectors/packet-amqp.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-amqp.c||epan/dissectors/packet-amqp.c": [
      "File: epan/dissectors/packet-amqp.c -> epan/dissectors/packet-amqp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "5927:         return 0;",
      "5928:     }",
      "5937:     offset += (count_len*2);",
      "5939:     if (element_count > 0)",
      "",
      "[Removed Lines]",
      "5930:     list_tree = proto_tree_add_none_format(item,",
      "5931:                                            hf_amqp_type,",
      "5932:                                            tvb,",
      "5933:                                            offset-1,",
      "5934:                                            element_size+1+count_len,",
      "5935:                                            \"%s\",",
      "5936:                                            name ? name : proto_registrar_get_name(hf_amqp_type));",
      "",
      "[Added Lines]",
      "5930:     list_tree = proto_tree_add_item(item,",
      "5931:                                     hf_amqp_type,",
      "5932:                                     tvb,",
      "5933:                                     offset-1,",
      "5934:                                     element_size+1+count_len,",
      "5935:                                     ENC_BIG_ENDIAN);",
      "5936:     proto_item_set_text(list_tree, \"%s\", name ? name : proto_registrar_get_name(hf_amqp_type));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "6177:                                                &hf_amqp_subtypes_array,",
      "6178:                                                &decoded_element_size);",
      "6187:     offset += (count_len*2+decoded_element_size);",
      "6189:     if (element_count > 0)",
      "",
      "[Removed Lines]",
      "6180:     array_tree = proto_tree_add_none_format(item,",
      "6181:                                             hf_amqp_type,",
      "6182:                                             tvb,",
      "6183:                                             offset-1,",
      "6184:                                             element_size+1+count_len,",
      "6185:                                             \"%s\",",
      "6186:                                             name ? name : proto_registrar_get_name(hf_amqp_type));",
      "",
      "[Added Lines]",
      "6180:     array_tree = proto_tree_add_item(item,",
      "6181:                                      hf_amqp_type,",
      "6182:                                      tvb,",
      "6183:                                      offset-1,",
      "6184:                                      element_size+1+count_len,",
      "6185:                                      ENC_BIG_ENDIAN);",
      "6186:     proto_item_set_text(array_tree, \"%s\", name ? name : proto_registrar_get_name(hf_amqp_type));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a102c172b0b2fe231fdb49f4f6694603f5b93b0c",
      "candidate_info": {
        "commit_hash": "a102c172b0b2fe231fdb49f4f6694603f5b93b0c",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/a102c172b0b2fe231fdb49f4f6694603f5b93b0c",
        "files": [
          "epan/dissectors/packet-amqp.c"
        ],
        "message": "AMQP: workaround some proto_tree_add_none_format() asserts\n\nPreviously proto_tree_add_none_format() could be called with any type\nof field type, not FT_NONE only.\n\nChange-Id: I78976a168fc1bf606b72ad38d284bb0bd1794b03\nPing-Bug: 13780\nReviewed-on: https://code.wireshark.org/review/22243\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>\n(cherry picked from commit 2de483c0925a5a93cdaee168997f3f3c7949d2d4)\n Conflicts:\n\tepan/dissectors/packet-amqp.c\nReviewed-on: https://code.wireshark.org/review/22258",
        "before_after_code_files": [
          "epan/dissectors/packet-amqp.c||epan/dissectors/packet-amqp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-amqp.c||epan/dissectors/packet-amqp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-amqp.c||epan/dissectors/packet-amqp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-amqp.c||epan/dissectors/packet-amqp.c": [
          "File: epan/dissectors/packet-amqp.c -> epan/dissectors/packet-amqp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6650:         return bound-orig_offset;",
          "6651:     }",
          "6660:     AMQP_INCREMENT(offset, count_len*2, bound);",
          "6662:     if (element_count > 0)",
          "",
          "[Removed Lines]",
          "6653:     list_tree = proto_tree_add_none_format(item,",
          "6654:                                            hf_amqp_type,",
          "6655:                                            tvb,",
          "6656:                                            offset-1,",
          "6657:                                            element_size+1+count_len,",
          "6658:                                            \"%s\",",
          "6659:                                            name ? name : proto_registrar_get_name(hf_amqp_type));",
          "",
          "[Added Lines]",
          "6653:     list_tree = proto_tree_add_item(item,",
          "6654:                                     hf_amqp_type,",
          "6655:                                     tvb,",
          "6656:                                     offset-1,",
          "6657:                                     element_size+1+count_len,",
          "6658:                                     ENC_BIG_ENDIAN);",
          "6659:     proto_item_set_text(list_tree, \"%s\", name ? name : proto_registrar_get_name(hf_amqp_type));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6915:                                                &hf_amqp_subtypes_array,",
          "6916:                                                &decoded_element_size);",
          "6925:     AMQP_INCREMENT(offset, count_len*2+decoded_element_size, bound);",
          "6927:     if (element_count > 0)",
          "",
          "[Removed Lines]",
          "6918:     array_tree = proto_tree_add_none_format(item,",
          "6919:                                             hf_amqp_type,",
          "6920:                                             tvb,",
          "6921:                                             offset-1,",
          "6922:                                             element_size+1+count_len,",
          "6923:                                             \"%s\",",
          "6924:                                             name ? name : proto_registrar_get_name(hf_amqp_type));",
          "",
          "[Added Lines]",
          "6918:     array_tree = proto_tree_add_item(item,",
          "6919:                                      hf_amqp_type,",
          "6920:                                      tvb,",
          "6921:                                      offset-1,",
          "6922:                                      element_size+1+count_len,",
          "6923:                                      ENC_BIG_ENDIAN);",
          "6924:     proto_item_set_text(array_tree, \"%s\", name ? name : proto_registrar_get_name(hf_amqp_type));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1c4b185198ca798b4a27c7213da18b379c919804",
      "candidate_info": {
        "commit_hash": "1c4b185198ca798b4a27c7213da18b379c919804",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/1c4b185198ca798b4a27c7213da18b379c919804",
        "files": [
          "epan/dissectors/packet-amqp.c"
        ],
        "message": "AMQP: workaround some proto_tree_add_none_format() asserts\n\nPreviously proto_tree_add_none_format() could be called with any type\nof field type, not FT_NONE only.\n\nChange-Id: I78976a168fc1bf606b72ad38d284bb0bd1794b03\nPing-Bug: 13780\nReviewed-on: https://code.wireshark.org/review/22243\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>\n(cherry picked from commit 2de483c0925a5a93cdaee168997f3f3c7949d2d4)\nReviewed-on: https://code.wireshark.org/review/22257",
        "before_after_code_files": [
          "epan/dissectors/packet-amqp.c||epan/dissectors/packet-amqp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-amqp.c||epan/dissectors/packet-amqp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-amqp.c||epan/dissectors/packet-amqp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-amqp.c||epan/dissectors/packet-amqp.c": [
          "File: epan/dissectors/packet-amqp.c -> epan/dissectors/packet-amqp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5927:         return 0;",
          "5928:     }",
          "5937:     offset += (count_len*2);",
          "5939:     if (element_count > 0)",
          "",
          "[Removed Lines]",
          "5930:     list_tree = proto_tree_add_none_format(item,",
          "5931:                                            hf_amqp_type,",
          "5932:                                            tvb,",
          "5933:                                            offset-1,",
          "5934:                                            element_size+1+count_len,",
          "5935:                                            \"%s\",",
          "5936:                                            name ? name : proto_registrar_get_name(hf_amqp_type));",
          "",
          "[Added Lines]",
          "5930:     list_tree = proto_tree_add_item(item,",
          "5931:                                     hf_amqp_type,",
          "5932:                                     tvb,",
          "5933:                                     offset-1,",
          "5934:                                     element_size+1+count_len,",
          "5935:                                     ENC_BIG_ENDIAN);",
          "5936:     proto_item_set_text(list_tree, \"%s\", name ? name : proto_registrar_get_name(hf_amqp_type));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6177:                                                &hf_amqp_subtypes_array,",
          "6178:                                                &decoded_element_size);",
          "6187:     offset += (count_len*2+decoded_element_size);",
          "6189:     if (element_count > 0)",
          "",
          "[Removed Lines]",
          "6180:     array_tree = proto_tree_add_none_format(item,",
          "6181:                                             hf_amqp_type,",
          "6182:                                             tvb,",
          "6183:                                             offset-1,",
          "6184:                                             element_size+1+count_len,",
          "6185:                                             \"%s\",",
          "6186:                                             name ? name : proto_registrar_get_name(hf_amqp_type));",
          "",
          "[Added Lines]",
          "6180:     array_tree = proto_tree_add_item(item,",
          "6181:                                      hf_amqp_type,",
          "6182:                                      tvb,",
          "6183:                                      offset-1,",
          "6184:                                      element_size+1+count_len,",
          "6185:                                      ENC_BIG_ENDIAN);",
          "6186:     proto_item_set_text(array_tree, \"%s\", name ? name : proto_registrar_get_name(hf_amqp_type));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b5587379b7e31c8e418f51a7db9d836b33a7efe1",
      "candidate_info": {
        "commit_hash": "b5587379b7e31c8e418f51a7db9d836b33a7efe1",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/b5587379b7e31c8e418f51a7db9d836b33a7efe1",
        "files": [
          "epan/dissectors/packet-amqp.c"
        ],
        "message": "Overhaul AMQP dissector\n\n1. Remove AMQP_INCREMENT macro.  Bounds checking mostly handled already\nby proto_tree_add_xxx and tvb_get_xxx.  Needed to add a few more\ntvb_reported_length_remaining() calls for completeness.\n2. Fill in some of the gaps of unaccounted for bytes.  Still have way\ntoo many instances where bytes aren't claimed by a field.\n3. Some small reordering of functions allowed for massive removal of\nformal declarations.\n4. Add amqp_0_10_get_32bit_size_new to add a field, check for size and\nadd expert info if size > 0xFFFF\n5. Remove \"hf_\" from list type items as they are not real hf_ fields\nand could cause confusion.  Also made items static.\n6. Convert some FT_STRING and FT_BYTES fields to FT_UINT_STRING and\nFT_UINT_BYTES.  Helps account for some \"missing\" bytes.\n\nChange-Id: I7ed269221d294ce89feacc0642b2070681288172\nReviewed-on: https://code.wireshark.org/review/18423\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nReviewed-by: Alexis La Goutte <alexis.lagoutte@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Roland Knall <rknall@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-amqp.c||epan/dissectors/packet-amqp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-amqp.c||epan/dissectors/packet-amqp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-amqp.c||epan/dissectors/packet-amqp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-amqp.c||epan/dissectors/packet-amqp.c": [
          "File: epan/dissectors/packet-amqp.c -> epan/dissectors/packet-amqp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: #include <epan/prefs.h>",
          "46: #include <epan/to_str.h>",
          "47: #include <epan/proto_data.h>",
          "48: #include \"packet-tcp.h\"",
          "49: #include \"packet-ssl.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: #include <wsutil/str_util.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56: #define AMQP_PORT   5672",
          "",
          "[Removed Lines]",
          "61: #define AMQP_INCREMENT(offset, addend, bound) {\\",
          "62:         THROW_ON(                                                       \\",
          "63:             (((unsigned)(offset) + (unsigned)(addend)) < (unsigned)(offset)) || \\",
          "64:             (((unsigned)(offset) + (unsigned)(addend)) > (unsigned)(bound )) \\",
          "65:             , ReportedBoundsError);                                     \\",
          "66:         offset += (addend);                                             \\",
          "67: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "485: static guint",
          "486: dissect_amqp_0_9_field_value(tvbuff_t *tvb, packet_info *pinfo, int offset, guint length,",
          "487:                              const char *name, proto_tree *field_table_tree);",
          "489: static void",
          "502: static void",
          "508: static void",
          "514: static void",
          "520: static void",
          "526: static void",
          "532: static void",
          "607: static int",
          "611: static int",
          "615: static int",
          "619: static int",
          "623: static int",
          "627: static int",
          "631: static int",
          "635: static int",
          "639: static int",
          "643: static int",
          "647: static int",
          "651: static int",
          "655: static int",
          "659: static int",
          "663: static int",
          "667: static int",
          "671: static int",
          "675: static int",
          "679: static int",
          "683: static int",
          "687: static int",
          "691: static int",
          "699: static int",
          "703: static int",
          "707: static int",
          "711: static int",
          "715: static int",
          "719: static int",
          "723: static int",
          "1266: static int hf_amqp_1_0_size = -1;",
          "1267: static int hf_amqp_1_0_doff = -1;",
          "",
          "[Removed Lines]",
          "433: static int",
          "434: dissect_amqp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data);",
          "436: static void",
          "437: check_amqp_version(tvbuff_t *tvb, amqp_conv *conn);",
          "439: static guint",
          "440: get_amqp_1_0_message_len(packet_info *pinfo, tvbuff_t *tvb, int offset, void* data);",
          "442: static guint",
          "443: dissect_amqp_1_0_list(tvbuff_t *tvb,",
          "444:                       packet_info *pinfo,",
          "445:                       int offset,",
          "446:                       int bound,",
          "447:                       proto_item *item,",
          "448:                       int hf_amqp_type,",
          "449:                       guint32 hf_amqp_subtype_count,",
          "450:                       const int **hf_amqp_subtypes,",
          "451:                       const char *name);",
          "453: static guint",
          "454: dissect_amqp_1_0_map(tvbuff_t *tvb,",
          "455:                      packet_info *pinfo,",
          "456:                      int offset,",
          "457:                      int bound,",
          "458:                      proto_item *item,",
          "459:                      int hf_amqp_type,",
          "460:                      const char *name);",
          "462: static guint",
          "463: dissect_amqp_1_0_array(tvbuff_t *tvb,",
          "464:                        packet_info *pinfo,",
          "465:                        int offset,",
          "466:                        int bound,",
          "467:                        proto_item *item,",
          "468:                        int hf_amqp_type,",
          "469:                        guint32 hf_amqp_subtype_count,",
          "470:                        const int **hf_amqp_subtypes,",
          "471:                        const char *name);",
          "473: static guint",
          "474: get_amqp_0_10_message_len(packet_info *pinfo, tvbuff_t *tvb, int offset, void* data);",
          "476: static guint",
          "477: get_amqp_0_9_message_len(packet_info *pinfo, tvbuff_t *tvb, int offset, void* data);",
          "479: static void",
          "480: dissect_amqp_0_9_field_table(tvbuff_t *tvb, packet_info *pinfo, int offset, guint length, proto_item *item);",
          "482: static void",
          "483: dissect_amqp_0_9_field_array(tvbuff_t *tvb, packet_info *pinfo, int offset, guint length, proto_item *item);",
          "490: dissect_amqp_0_10_map(tvbuff_t *tvb,",
          "491:                       int offset,",
          "492:                       int bound,",
          "493:                       int length,",
          "494:                       proto_item *item);",
          "496: static void",
          "497: dissect_amqp_0_10_xid (tvbuff_t *tvb,",
          "498:                        int offset,",
          "499:                        guint16 xid_length,",
          "500:                        proto_item *ti);",
          "503: dissect_amqp_0_10_connection(tvbuff_t *tvb,",
          "504:                              packet_info *pinfo,",
          "505:                              proto_tree *tree,",
          "506:                              int offset, guint16 length);",
          "509: dissect_amqp_0_10_session(tvbuff_t *tvb,",
          "510:                           packet_info *pinfo,",
          "511:                           proto_tree *tree,",
          "512:                           int offset, guint16 length);",
          "515: dissect_amqp_0_10_execution(tvbuff_t *tvb,",
          "516:                             packet_info *pinfo,",
          "517:                             proto_tree *tree,",
          "518:                             int offset, guint16 length);",
          "521: dissect_amqp_0_10_message(tvbuff_t *tvb,",
          "522:                           packet_info *pinfo,",
          "523:                           proto_tree *tree,",
          "524:                           int offset, guint16 length);",
          "527: dissect_amqp_0_10_tx(tvbuff_t *tvb,",
          "528:                      packet_info *pinfo,",
          "529:                      proto_tree *tree,",
          "530:                      int offset, guint16 length);",
          "533: dissect_amqp_0_10_dtx(tvbuff_t *tvb,",
          "534:                       packet_info *pinfo,",
          "535:                       proto_tree *tree,",
          "536:                       int offset, guint16 length);",
          "538: static void",
          "539: dissect_amqp_0_10_exchange(tvbuff_t *tvb,",
          "540:                            packet_info *pinfo,",
          "541:                            proto_tree *tree,",
          "542:                            int offset, guint16 length);",
          "544: static void",
          "545: dissect_amqp_0_10_queue(tvbuff_t *tvb,",
          "546:                         packet_info *pinfo,",
          "547:                         proto_tree *tree,",
          "548:                         int offset, guint16 length);",
          "550: static void",
          "551: dissect_amqp_0_10_file(tvbuff_t *tvb,",
          "552:                        packet_info *pinfo,",
          "553:                        proto_tree *tree,",
          "554:                        int offset, guint16 length);",
          "556: static void",
          "557: dissect_amqp_0_10_stream(tvbuff_t *tvb,",
          "558:                          packet_info *pinfo,",
          "559:                          proto_tree *tree,",
          "560:                          int offset, guint16 length);",
          "562: static void",
          "563: dissect_amqp_0_10_struct32(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "564:                            int offset, guint32 struct_length);",
          "566: static guint32",
          "567: dissect_amqp_1_0_AMQP_frame(tvbuff_t *tvb,",
          "568:                             guint offset,",
          "569:                             guint16 bound,",
          "570:                             proto_item *amqp_tree,",
          "571:                             packet_info *pinfo,",
          "572:                             const gchar **method_name);",
          "574: static guint32",
          "575: dissect_amqp_1_0_SASL_frame(tvbuff_t *tvb,",
          "576:                             guint offset,",
          "577:                             guint16 bound,",
          "578:                             proto_item *amqp_tree,",
          "579:                             packet_info *pinfo,",
          "580:                             const gchar **method_name);",
          "582: static int",
          "583: dissect_amqp_1_0_frame(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data _U_);",
          "585: static int",
          "586: dissect_amqp_0_10_frame(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data _U_);",
          "588: static int",
          "589: dissect_amqp_0_9_frame(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data _U_);",
          "591: static int",
          "592: dissect_amqp_0_9_method_connection_start(tvbuff_t *tvb, packet_info *pinfo,",
          "593:     int offset, proto_tree *args_tree);",
          "595: static int",
          "596: dissect_amqp_0_9_method_connection_start_ok(tvbuff_t *tvb, packet_info *pinfo,",
          "597:     int offset, proto_tree *args_tree);",
          "599: static int",
          "600: dissect_amqp_0_9_method_connection_secure(tvbuff_t *tvb,",
          "601:     int offset, proto_tree *args_tree);",
          "603: static int",
          "604: dissect_amqp_0_9_method_connection_secure_ok(tvbuff_t *tvb,",
          "605:     int offset, proto_tree *args_tree);",
          "608: dissect_amqp_0_9_method_connection_tune(tvbuff_t *tvb,",
          "609:     int offset, proto_tree *args_tree);",
          "612: dissect_amqp_0_9_method_connection_tune_ok(tvbuff_t *tvb,",
          "613:     int offset, proto_tree *args_tree);",
          "616: dissect_amqp_0_9_method_connection_open(tvbuff_t *tvb, packet_info *pinfo,",
          "617:     int offset, proto_tree *args_tree);",
          "620: dissect_amqp_0_9_method_connection_open_ok(tvbuff_t *tvb,",
          "621:     int offset, proto_tree *args_tree);",
          "624: dissect_amqp_0_9_method_connection_redirect(tvbuff_t *tvb,",
          "625:     int offset, proto_tree *args_tree);",
          "628: dissect_amqp_0_9_method_connection_close(tvbuff_t *tvb, packet_info *pinfo,",
          "629:     int offset, proto_tree *args_tree);",
          "632: dissect_amqp_0_9_method_connection_close_ok(tvbuff_t *tvb,",
          "633:     int offset, proto_tree *args_tree);",
          "636: dissect_amqp_0_9_method_connection_blocked(tvbuff_t *tvb,",
          "637:     int offset, proto_tree *args_tree);",
          "640: dissect_amqp_0_9_method_connection_unblocked(tvbuff_t *tvb,",
          "641:     int offset, proto_tree *args_tree);",
          "644: dissect_amqp_0_9_method_channel_open(tvbuff_t *tvb,",
          "645:     int offset, proto_tree *args_tree);",
          "648: dissect_amqp_0_9_method_channel_open_ok(tvbuff_t *tvb,",
          "649:     int offset, proto_tree *args_tree);",
          "652: dissect_amqp_0_9_method_channel_flow(tvbuff_t *tvb,",
          "653:     int offset, proto_tree *args_tree);",
          "656: dissect_amqp_0_9_method_channel_flow_ok(tvbuff_t *tvb,",
          "657:     int offset, proto_tree *args_tree);",
          "660: dissect_amqp_0_9_method_channel_close(guint16 channel_num, tvbuff_t *tvb,",
          "661:     packet_info *pinfo, int offset, proto_tree *args_tree);",
          "664: dissect_amqp_0_9_method_channel_close_ok(tvbuff_t *tvb,",
          "665:     int offset, proto_tree *args_tree);",
          "668: dissect_amqp_0_9_method_channel_resume(tvbuff_t *tvb,",
          "669:     int offset, proto_tree *args_tree);",
          "672: dissect_amqp_0_9_method_channel_ping(tvbuff_t *tvb,",
          "673:     int offset, proto_tree *args_tree);",
          "676: dissect_amqp_0_9_method_channel_pong(tvbuff_t *tvb,",
          "677:     int offset, proto_tree *args_tree);",
          "680: dissect_amqp_0_9_method_channel_ok(tvbuff_t *tvb,",
          "681:     int offset, proto_tree *args_tree);",
          "684: dissect_amqp_0_9_method_access_request(tvbuff_t *tvb,",
          "685:     int offset, proto_tree *args_tree);",
          "688: dissect_amqp_0_9_method_access_request_ok(tvbuff_t *tvb,",
          "689:     int offset, proto_tree *args_tree);",
          "692: dissect_amqp_0_9_method_exchange_declare(tvbuff_t *tvb, packet_info *pinfo,",
          "693:     int offset, proto_tree *args_tree);",
          "695: static int",
          "696: dissect_amqp_0_9_method_exchange_declare_ok(tvbuff_t *tvb,",
          "697:     int offset, proto_tree *args_tree);",
          "700: dissect_amqp_0_9_method_exchange_bind(tvbuff_t *tvb, packet_info *pinfo,",
          "701:     int offset, proto_tree *args_tree);",
          "704: dissect_amqp_0_9_method_exchange_bind_ok(tvbuff_t *tvb,",
          "705:     int offset, proto_tree *args_tree);",
          "708: dissect_amqp_0_9_method_exchange_delete(tvbuff_t *tvb, packet_info *pinfo,",
          "709:     int offset, proto_tree *args_tree);",
          "712: dissect_amqp_0_9_method_exchange_delete_ok(tvbuff_t *tvb,",
          "713:     int offset, proto_tree *args_tree);",
          "716: dissect_amqp_0_9_method_queue_declare(tvbuff_t *tvb, packet_info *pinfo,",
          "717:     int offset, proto_tree *args_tree);",
          "720: dissect_amqp_0_9_method_queue_declare_ok(tvbuff_t *tvb, packet_info *pinfo,",
          "721:     int offset, proto_tree *args_tree);",
          "724: dissect_amqp_0_9_method_queue_bind(tvbuff_t *tvb, packet_info *pinfo,",
          "725:     int offset, proto_tree *args_tree);",
          "727: static int",
          "728: dissect_amqp_0_9_method_queue_bind_ok(tvbuff_t *tvb,",
          "729:     int offset, proto_tree *args_tree);",
          "731: static int",
          "732: dissect_amqp_0_9_method_queue_unbind(tvbuff_t *tvb, packet_info *pinfo,",
          "733:     int offset, proto_tree *args_tree);",
          "735: static int",
          "736: dissect_amqp_0_9_method_queue_unbind_ok(tvbuff_t *tvb,",
          "737:     int offset, proto_tree *args_tree);",
          "739: static int",
          "740: dissect_amqp_0_9_method_queue_purge(tvbuff_t *tvb, packet_info *pinfo,",
          "741:     int offset, proto_tree *args_tree);",
          "743: static int",
          "744: dissect_amqp_0_9_method_queue_purge_ok(tvbuff_t *tvb,",
          "745:     int offset, proto_tree *args_tree);",
          "747: static int",
          "748: dissect_amqp_0_9_method_queue_delete(tvbuff_t *tvb, packet_info *pinfo,",
          "749:     int offset, proto_tree *args_tree);",
          "751: static int",
          "752: dissect_amqp_0_9_method_queue_delete_ok(tvbuff_t *tvb,",
          "753:     int offset, proto_tree *args_tree);",
          "755: static int",
          "756: dissect_amqp_0_9_method_basic_qos(tvbuff_t *tvb,",
          "757:     int offset, proto_tree *args_tree);",
          "759: static int",
          "760: dissect_amqp_0_9_method_basic_qos_ok(tvbuff_t *tvb,",
          "761:     int offset, proto_tree *args_tree);",
          "763: static int",
          "764: dissect_amqp_0_9_method_basic_consume(tvbuff_t *tvb, packet_info *pinfo,",
          "765:     int offset, proto_tree *args_tree);",
          "767: static int",
          "768: dissect_amqp_0_9_method_basic_consume_ok(tvbuff_t *tvb,",
          "769:     int offset, proto_tree *args_tree);",
          "771: static int",
          "772: dissect_amqp_0_9_method_basic_cancel(tvbuff_t *tvb,",
          "773:     int offset, proto_tree *args_tree);",
          "775: static int",
          "776: dissect_amqp_0_9_method_basic_cancel_ok(tvbuff_t *tvb,",
          "777:     int offset, proto_tree *args_tree);",
          "779: static int",
          "780: dissect_amqp_0_9_method_basic_publish(guint16 channel_num,",
          "781:     tvbuff_t *tvb, packet_info *pinfo, int offset, proto_tree *args_tree);",
          "783: static int",
          "784: dissect_amqp_0_9_method_basic_return(tvbuff_t *tvb, packet_info *pinfo,",
          "785:     int offset, proto_tree *args_tree);",
          "787: static int",
          "788: dissect_amqp_0_9_method_basic_deliver(guint16 channel_num,",
          "789:     tvbuff_t *tvb, packet_info *pinfo, int offset, proto_tree *args_tree);",
          "791: static int",
          "792: dissect_amqp_0_9_method_basic_get(tvbuff_t *tvb, packet_info *pinfo,",
          "793:     int offset, proto_tree *args_tree);",
          "795: static int",
          "796: dissect_amqp_0_9_method_basic_get_ok(guint16 channel_num,",
          "797:     tvbuff_t *tvb, packet_info *pinfo, int offset, proto_tree *args_tree);",
          "799: static int",
          "800: dissect_amqp_0_9_method_basic_get_empty(tvbuff_t *tvb,",
          "801:     int offset, proto_tree *args_tree);",
          "803: static int",
          "804: dissect_amqp_0_9_method_basic_ack(guint16 channel_num,",
          "805:     tvbuff_t *tvb, packet_info *pinfo, int offset, proto_tree *args_tree);",
          "807: static int",
          "808: dissect_amqp_0_9_method_basic_reject(guint16 channel_num,",
          "809:     tvbuff_t *tvb, packet_info *pinfo, int offset, proto_tree *args_tree);",
          "811: static int",
          "812: dissect_amqp_0_9_method_basic_recover_async(tvbuff_t *tvb,",
          "813:     int offset, proto_tree *args_tree);",
          "815: static int",
          "816: dissect_amqp_0_9_method_basic_recover(tvbuff_t *tvb,",
          "817:     int offset, proto_tree *args_tree);",
          "819: static int",
          "820: dissect_amqp_0_9_method_basic_recover_ok(tvbuff_t *tvb,",
          "821:     int offset, proto_tree *args_tree);",
          "823: static int",
          "824: dissect_amqp_0_9_method_basic_nack(guint16 channel_num,",
          "825:     tvbuff_t *tvb, packet_info *pinfo, int offset, proto_tree *args_tree);",
          "827: static int",
          "828: dissect_amqp_0_9_method_file_qos(tvbuff_t *tvb,",
          "829:     int offset, proto_tree *args_tree);",
          "831: static int",
          "832: dissect_amqp_0_9_method_file_qos_ok(tvbuff_t *tvb,",
          "833:     int offset, proto_tree *args_tree);",
          "835: static int",
          "836: dissect_amqp_0_9_method_file_consume(tvbuff_t *tvb, packet_info *pinfo,",
          "837:     int offset, proto_tree *args_tree);",
          "839: static int",
          "840: dissect_amqp_0_9_method_file_consume_ok(tvbuff_t *tvb,",
          "841:     int offset, proto_tree *args_tree);",
          "843: static int",
          "844: dissect_amqp_0_9_method_file_cancel(tvbuff_t *tvb,",
          "845:     int offset, proto_tree *args_tree);",
          "847: static int",
          "848: dissect_amqp_0_9_method_file_cancel_ok(tvbuff_t *tvb,",
          "849:     int offset, proto_tree *args_tree);",
          "851: static int",
          "852: dissect_amqp_0_9_method_file_open(tvbuff_t *tvb,",
          "853:     int offset, proto_tree *args_tree);",
          "855: static int",
          "856: dissect_amqp_0_9_method_file_open_ok(tvbuff_t *tvb,",
          "857:     int offset, proto_tree *args_tree);",
          "859: static int",
          "860: dissect_amqp_0_9_method_file_stage(tvbuff_t *tvb,",
          "861:     int offset, proto_tree *args_tree);",
          "863: static int",
          "864: dissect_amqp_0_9_method_file_publish(tvbuff_t *tvb,",
          "865:     int offset, proto_tree *args_tree);",
          "867: static int",
          "868: dissect_amqp_0_9_method_file_return(tvbuff_t *tvb,",
          "869:     int offset, proto_tree *args_tree);",
          "871: static int",
          "872: dissect_amqp_0_9_method_file_deliver(tvbuff_t *tvb,",
          "873:     int offset, proto_tree *args_tree);",
          "875: static int",
          "876: dissect_amqp_0_9_method_file_ack(tvbuff_t *tvb,",
          "877:     int offset, proto_tree *args_tree);",
          "879: static int",
          "880: dissect_amqp_0_9_method_file_reject(tvbuff_t *tvb,",
          "881:     int offset, proto_tree *args_tree);",
          "883: static int",
          "884: dissect_amqp_0_9_method_stream_qos(tvbuff_t *tvb,",
          "885:     int offset, proto_tree *args_tree);",
          "887: static int",
          "888: dissect_amqp_0_9_method_stream_qos_ok(tvbuff_t *tvb,",
          "889:     int offset, proto_tree *args_tree);",
          "891: static int",
          "892: dissect_amqp_0_9_method_stream_consume(tvbuff_t *tvb, packet_info *pinfo,",
          "893:     int offset, proto_tree *args_tree);",
          "895: static int",
          "896: dissect_amqp_0_9_method_stream_consume_ok(tvbuff_t *tvb,",
          "897:     int offset, proto_tree *args_tree);",
          "899: static int",
          "900: dissect_amqp_0_9_method_stream_cancel(tvbuff_t *tvb,",
          "901:     int offset, proto_tree *args_tree);",
          "903: static int",
          "904: dissect_amqp_0_9_method_stream_cancel_ok(tvbuff_t *tvb,",
          "905:     int offset, proto_tree *args_tree);",
          "907: static int",
          "908: dissect_amqp_0_9_method_stream_publish(tvbuff_t *tvb,",
          "909:     int offset, proto_tree *args_tree);",
          "911: static int",
          "912: dissect_amqp_0_9_method_stream_return(tvbuff_t *tvb,",
          "913:     int offset, proto_tree *args_tree);",
          "915: static int",
          "916: dissect_amqp_0_9_method_stream_deliver(tvbuff_t *tvb,",
          "917:     int offset, proto_tree *args_tree);",
          "919: static int",
          "920: dissect_amqp_0_9_method_tx_select(tvbuff_t *tvb,",
          "921:     int offset, proto_tree *args_tree);",
          "923: static int",
          "924: dissect_amqp_0_9_method_tx_select_ok(tvbuff_t *tvb,",
          "925:     int offset, proto_tree *args_tree);",
          "927: static int",
          "928: dissect_amqp_0_9_method_tx_commit(tvbuff_t *tvb,",
          "929:     int offset, proto_tree *args_tree);",
          "931: static int",
          "932: dissect_amqp_0_9_method_tx_commit_ok(tvbuff_t *tvb,",
          "933:     int offset, proto_tree *args_tree);",
          "935: static int",
          "936: dissect_amqp_0_9_method_tx_rollback(tvbuff_t *tvb,",
          "937:     int offset, proto_tree *args_tree);",
          "939: static int",
          "940: dissect_amqp_0_9_method_tx_rollback_ok(tvbuff_t *tvb,",
          "941:     int offset, proto_tree *args_tree);",
          "943: static int",
          "944: dissect_amqp_0_9_method_dtx_select(tvbuff_t *tvb,",
          "945:     int offset, proto_tree *args_tree);",
          "947: static int",
          "948: dissect_amqp_0_9_method_dtx_select_ok(tvbuff_t *tvb,",
          "949:     int offset, proto_tree *args_tree);",
          "951: static int",
          "952: dissect_amqp_0_9_method_dtx_start(tvbuff_t *tvb,",
          "953:     int offset, proto_tree *args_tree);",
          "955: static int",
          "956: dissect_amqp_0_9_method_dtx_start_ok(tvbuff_t *tvb,",
          "957:     int offset, proto_tree *args_tree);",
          "959: static int",
          "960: dissect_amqp_0_9_method_tunnel_request(tvbuff_t *tvb, packet_info *pinfo,",
          "961:     int offset, proto_tree *args_tree);",
          "963: static int",
          "964: dissect_amqp_0_9_method_confirm_select(tvbuff_t *tvb,",
          "965:     int offset, proto_tree *args_tree);",
          "967: static int",
          "968: dissect_amqp_0_9_method_confirm_select_ok(guint16 channel_num,",
          "969:     tvbuff_t *tvb, packet_info *pinfo, int offset, proto_tree *args_tree);",
          "971: static int",
          "972: dissect_amqp_0_9_content_header_basic(tvbuff_t *tvb, packet_info *pinfo,",
          "973:     int offset, proto_tree *prop_tree);",
          "975: static int",
          "976: dissect_amqp_0_9_content_header_file(tvbuff_t *tvb, packet_info *pinfo,",
          "977:     int offset, proto_tree *prop_tree);",
          "979: static int",
          "980: dissect_amqp_0_9_content_header_stream(tvbuff_t *tvb, packet_info *pinfo,",
          "981:     int offset, proto_tree *prop_tree);",
          "983: static int",
          "984: dissect_amqp_0_9_content_header_tunnel(tvbuff_t *tvb, packet_info *pifo,",
          "985:     int offset, proto_tree *prop_tree);",
          "987: static amqp_channel_t*",
          "988: get_conversation_channel(conversation_t *conv, guint16 channel_num);",
          "990: static void",
          "991: record_msg_delivery(tvbuff_t *tvb, packet_info *pinfo, guint16 channel_num,",
          "992:     guint64 delivery_tag);",
          "994: static void",
          "995: record_msg_delivery_c(conversation_t *conv, amqp_channel_t *channel,",
          "996:     tvbuff_t *tvb, packet_info *pinfo, guint64 delivery_tag);",
          "998: static void",
          "999: record_delivery_ack(tvbuff_t *tvb, packet_info *pinfo, guint16 channel_num,",
          "1000:     guint64 delivery_tag, gboolean multiple);",
          "1002: static void",
          "1003: record_delivery_ack_c(conversation_t *conv, amqp_channel_t *channel,",
          "1004:     tvbuff_t *tvb, packet_info *pinfo, guint64 delivery_tag, gboolean multiple);",
          "1006: static void",
          "1007: generate_msg_reference(tvbuff_t *tvb, packet_info *pinfo, proto_tree *prop_tree);",
          "1009: static void",
          "1010: generate_ack_reference(tvbuff_t *tvb, packet_info *pinfo, proto_tree *prop_tree);",
          "1014: typedef int (*type_formatter)(tvbuff_t *tvb,",
          "1019: struct amqp_typeinfo {",
          "1021:     const char     *amqp_typename;",
          "1022:     type_formatter  formatter;",
          "1023:     guint           known_size;",
          "1024: };",
          "1028: typedef int (*type_dissector)(tvbuff_t *tvb,",
          "1029:                               packet_info *pinfo,",
          "1033:                               proto_item *item,",
          "1034:                               int hf_amqp_type);",
          "1036: struct amqp1_typeinfo {",
          "1038:     const char     *amqp_typename;",
          "1039:     const int       ftype;",
          "1040:     guint           known_size;",
          "1041:     type_dissector  dissector;",
          "1042:     type_formatter  formatter;",
          "1043: };",
          "1045: struct amqp_synonym_types_t {",
          "1051: };",
          "1057: struct amqp_defined_types_t {",
          "1058:     const int format_code;",
          "1059:     int       *hf_amqp_type;",
          "1060:     guint32   hf_amqp_subtype_count;",
          "1061:     const int **hf_amqp_subtypes;",
          "1062: };",
          "1067: static struct amqp1_typeinfo* decode_fixed_type(guint8 code);",
          "1069: static void",
          "1070: get_amqp_1_0_value_formatter(tvbuff_t *tvb,",
          "1071:                              packet_info *pinfo,",
          "1072:                              guint8 code,",
          "1073:                              int offset,",
          "1074:                              int bound,",
          "1075:                              int hf_amqp_type,",
          "1076:                              const char *name,",
          "1077:                              guint32 hf_amqp_subtype_count,",
          "1078:                              const int **hf_amqp_subtypes,",
          "1079:                              guint *length_size,",
          "1080:                              proto_item *item);",
          "1082: static guint",
          "1083: get_amqp_1_0_type_formatter(tvbuff_t *tvb,",
          "1084:                             int offset,",
          "1085:                             int bound,",
          "1086:                             int *hf_amqp_type,",
          "1087:                             const char **name,",
          "1088:                             guint32 *hf_amqp_subtype_count,",
          "1089:                             const int ***hf_amqp_subtypes,",
          "1090:                             guint *length_size);",
          "1092: static void",
          "1093: get_amqp_1_0_type_value_formatter(tvbuff_t *tvb,",
          "1094:                                   packet_info *pinfo,",
          "1095:                                   int offset,",
          "1096:                                   int bound,",
          "1097:                                   int hf_amqp_type,",
          "1098:                                   const char *name,",
          "1099:                                   guint *length_size,",
          "1100:                                   proto_item *item);",
          "1104: static int",
          "1105: dissect_amqp_1_0_fixed(tvbuff_t *tvb, packet_info *pinfo,",
          "1106:                        guint offset, guint bound _U_, guint length,",
          "1107:                        proto_item *item, int hf_amqp_type);",
          "1109: static int",
          "1110: dissect_amqp_1_0_variable(tvbuff_t *tvb, packet_info *pinfo,",
          "1111:                           guint offset, guint bound, guint length,",
          "1112:                           proto_item *item, int hf_amqp_type);",
          "1114: static int",
          "1115: dissect_amqp_1_0_timestamp(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "1116:                            guint offset, guint bound _U_, guint length,",
          "1117:                            proto_item *item, int hf_amqp_type);",
          "1119: static int",
          "1120: dissect_amqp_1_0_skip(tvbuff_t *tvb _U_, packet_info *pinfo _U_,",
          "1121:                       guint offset _U_, guint bound _U_, guint length _U_,",
          "1122:                       proto_item *item _U_, int hf_amqp_type _U_);",
          "1124: static int",
          "1125: dissect_amqp_1_0_zero(tvbuff_t *tvb _U_, packet_info *pinfo _U_,",
          "1126:                       guint offset _U_, guint bound _U_, guint length _U_,",
          "1127:                       proto_item *item _U_, int hf_amqp_type _U_);",
          "1129: static int",
          "1130: dissect_amqp_1_0_true(tvbuff_t *tvb, packet_info *pinfo,",
          "1131:                       guint offset, guint bound _U_, guint length _U_,",
          "1132:                       proto_item *item, int hf_amqp_type);",
          "1134: static int",
          "1135: dissect_amqp_1_0_false(tvbuff_t *tvb, packet_info *pinfo,",
          "1136:                                guint offset, guint bound _U_, guint length _U_,",
          "1137:                                proto_item *item, int hf_amqp_type);",
          "1139: static int",
          "1140: format_amqp_1_0_null(tvbuff_t *tvb _U_,",
          "1141:                      guint offset, guint bound _U_, guint length _U_,",
          "1142:                      const char **value _U_);",
          "1144: static int",
          "1145: format_amqp_1_0_boolean_true(tvbuff_t *tvb,",
          "1146:                              guint offset, guint bound _U_, guint length _U_,",
          "1147:                              const char **value);",
          "1149: static int",
          "1150: format_amqp_1_0_boolean_false(tvbuff_t *tvb,",
          "1151:                               guint offset, guint bound _U_, guint length _U_,",
          "1152:                               const char **value);",
          "1154: static int",
          "1155: format_amqp_1_0_boolean(tvbuff_t *tvb,",
          "1156:                         guint offset, guint bound _U_, guint length _U_,",
          "1157:                         const char **value);",
          "1159: static int",
          "1160: format_amqp_1_0_uint(tvbuff_t *tvb,",
          "1161:                      guint offset, guint bound _U_, guint length,",
          "1162:                      const char **value);",
          "1164: static int",
          "1165: format_amqp_1_0_int(tvbuff_t *tvb,",
          "1166:                     guint offset, guint bound _U_, guint length,",
          "1167:                     const char **value);",
          "1169: static int",
          "1170: format_amqp_1_0_float(tvbuff_t *tvb,",
          "1171:                       guint offset, guint bound _U_, guint length _U_,",
          "1172:                       const char **value);",
          "1174: static int",
          "1175: format_amqp_1_0_double(tvbuff_t *tvb,",
          "1176:                        guint offset, guint bound _U_, guint length _U_,",
          "1177:                        const char **value);",
          "1179: static int",
          "1180: format_amqp_1_0_decimal(tvbuff_t *tvb _U_,",
          "1181:                         guint offset _U_, guint bound _U_, guint length,",
          "1182:                         const char **value);",
          "1184: static int",
          "1185: format_amqp_1_0_char(tvbuff_t *tvb,",
          "1186:                      guint offset, guint bound _U_, guint length _U_,",
          "1187:                      const char **value);",
          "1189: static int",
          "1190: format_amqp_1_0_timestamp(tvbuff_t *tvb,",
          "1191:                           guint offset, guint bound _U_, guint length _U_,",
          "1192:                           const char **value);",
          "1194: static int",
          "1195: format_amqp_1_0_uuid(tvbuff_t *tvb,",
          "1196:                      guint offset, guint bound _U_, guint length _U_,",
          "1197:                      const char **value);",
          "1199: static int",
          "1200: format_amqp_1_0_bin(tvbuff_t *tvb,",
          "1201:                     guint offset, guint bound _U_, guint length,",
          "1202:                     const char **value);",
          "1204: static int",
          "1205: format_amqp_1_0_str(tvbuff_t *tvb,",
          "1206:                     guint offset, guint bound, guint length,",
          "1207:                     const char **value);",
          "1209: static int",
          "1210: format_amqp_1_0_symbol(tvbuff_t *tvb,",
          "1211:                        guint offset, guint bound, guint length,",
          "1212:                        const char **value);",
          "1214: static gboolean",
          "1215: get_amqp_0_10_type_formatter(guint8 code,",
          "1216:                              const char **name,",
          "1217:                              type_formatter *decoder,",
          "1218:                              guint *length_size);",
          "1220: static int",
          "1221: format_amqp_0_10_bin(tvbuff_t *tvb,",
          "1222:                      guint offset, guint bound, guint length,",
          "1223:                      const char **value);",
          "1225: static int",
          "1226: format_amqp_0_10_int(tvbuff_t *tvb,",
          "1227:                      guint offset, guint bound, guint length,",
          "1228:                      const char **value);",
          "1230: static int",
          "1231: format_amqp_0_10_uint(tvbuff_t *tvb,",
          "1232:                       guint offset, guint bound, guint length,",
          "1233:                       const char **value);",
          "1235: static int",
          "1236: format_amqp_0_10_char(tvbuff_t *tvb,",
          "1237:                       guint offset, guint bound, guint length,",
          "1238:                       const char **value);",
          "1240: static int",
          "1241: format_amqp_0_10_boolean(tvbuff_t *tvb,",
          "1242:                          guint offset, guint bound, guint length,",
          "1243:                          const char **value);",
          "1245: static int",
          "1246: format_amqp_0_10_vbin(tvbuff_t *tvb,",
          "1247:                       guint offset, guint bound, guint length,",
          "1248:                       const char **value);",
          "1250: static int",
          "1251: format_amqp_0_10_str(tvbuff_t *tvb,",
          "1252:                      guint offset, guint bound, guint length,",
          "1253:                      const char **value);",
          "1255: static void",
          "1256: format_amqp_0_10_sequence_set(tvbuff_t *tvb, guint offset, guint length,",
          "1257:                               proto_item *item);",
          "1261: static int proto_amqp = -1;",
          "",
          "[Added Lines]",
          "429: dissect_amqp_0_10_struct32(tvbuff_t *tvb, packet_info *pinfo, proto_item *ti);",
          "431: static amqp_channel_t*",
          "432: get_conversation_channel(conversation_t *conv, guint16 channel_num);",
          "435: record_msg_delivery(tvbuff_t *tvb, packet_info *pinfo, guint16 channel_num,",
          "436:     guint64 delivery_tag);",
          "439: record_msg_delivery_c(conversation_t *conv, amqp_channel_t *channel,",
          "440:     tvbuff_t *tvb, packet_info *pinfo, guint64 delivery_tag);",
          "443: record_delivery_ack(tvbuff_t *tvb, packet_info *pinfo, guint16 channel_num,",
          "444:     guint64 delivery_tag, gboolean multiple);",
          "447: record_delivery_ack_c(conversation_t *conv, amqp_channel_t *channel,",
          "448:     tvbuff_t *tvb, packet_info *pinfo, guint64 delivery_tag, gboolean multiple);",
          "451: generate_msg_reference(tvbuff_t *tvb, packet_info *pinfo, proto_tree *prop_tree);",
          "454: generate_ack_reference(tvbuff_t *tvb, packet_info *pinfo, proto_tree *prop_tree);",
          "458: typedef int (*type_formatter)(tvbuff_t *tvb,",
          "462: struct amqp_typeinfo {",
          "464:     const char     *amqp_typename;",
          "465:     type_formatter  formatter;",
          "466:     guint           known_size;",
          "467: };",
          "471: typedef int (*type_dissector)(tvbuff_t *tvb,",
          "472:                               packet_info *pinfo,",
          "475:                               proto_item *item,",
          "476:                               int hf_amqp_type);",
          "478: struct amqp1_typeinfo {",
          "480:     const char     *amqp_typename;",
          "481:     const int       ftype;",
          "482:     guint           known_size;",
          "483:     type_dissector  dissector;",
          "484:     type_formatter  formatter;",
          "485: };",
          "487: struct amqp_synonym_types_t {",
          "493: };",
          "499: struct amqp_defined_types_t {",
          "500:     const int format_code;",
          "501:     int       *hf_amqp_type;",
          "502:     guint32   hf_amqp_subtype_count;",
          "503:     const int **hf_amqp_subtypes;",
          "504: };",
          "509: static struct amqp1_typeinfo* decode_fixed_type(guint8 code);",
          "511: static void",
          "512: get_amqp_1_0_value_formatter(tvbuff_t *tvb,",
          "513:                              packet_info *pinfo,",
          "514:                              guint8 code,",
          "515:                              int offset,",
          "516:                              int hf_amqp_type,",
          "517:                              const char *name,",
          "518:                              guint32 hf_amqp_subtype_count,",
          "519:                              const int **hf_amqp_subtypes,",
          "520:                              guint *length_size,",
          "521:                              proto_item *item);",
          "523: static guint",
          "524: get_amqp_1_0_type_formatter(tvbuff_t *tvb,",
          "525:                             int offset,",
          "526:                             int *hf_amqp_type,",
          "527:                             const char **name,",
          "528:                             guint32 *hf_amqp_subtype_count,",
          "529:                             const int ***hf_amqp_subtypes,",
          "530:                             guint *length_size);",
          "532: static void",
          "533: get_amqp_1_0_type_value_formatter(tvbuff_t *tvb,",
          "534:                                   packet_info *pinfo,",
          "535:                                   int offset,",
          "536:                                   int hf_amqp_type,",
          "537:                                   const char *name,",
          "538:                                   guint *length_size,",
          "539:                                   proto_item *item);",
          "544: dissect_amqp_1_0_fixed(tvbuff_t *tvb, packet_info *pinfo,",
          "545:                        guint offset, guint length,",
          "546:                        proto_item *item, int hf_amqp_type);",
          "549: dissect_amqp_1_0_variable(tvbuff_t *tvb, packet_info *pinfo,",
          "550:                           guint offset, guint length,",
          "551:                           proto_item *item, int hf_amqp_type);",
          "554: dissect_amqp_1_0_timestamp(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "555:                            guint offset, guint length,",
          "556:                            proto_item *item, int hf_amqp_type);",
          "559: dissect_amqp_1_0_skip(tvbuff_t *tvb _U_, packet_info *pinfo _U_,",
          "560:                       guint offset _U_, guint length _U_,",
          "561:                       proto_item *item _U_, int hf_amqp_type _U_);",
          "564: dissect_amqp_1_0_zero(tvbuff_t *tvb _U_, packet_info *pinfo _U_,",
          "565:                       guint offset _U_, guint length _U_,",
          "566:                       proto_item *item _U_, int hf_amqp_type _U_);",
          "569: dissect_amqp_1_0_true(tvbuff_t *tvb, packet_info *pinfo,",
          "570:                       guint offset, guint length _U_,",
          "571:                       proto_item *item, int hf_amqp_type);",
          "574: dissect_amqp_1_0_false(tvbuff_t *tvb, packet_info *pinfo,",
          "575:                                guint offset, guint length _U_,",
          "576:                                proto_item *item, int hf_amqp_type);",
          "579: format_amqp_1_0_null(tvbuff_t *tvb _U_,",
          "580:                      guint offset, guint length _U_,",
          "581:                      const char **value _U_);",
          "584: format_amqp_1_0_boolean_true(tvbuff_t *tvb, guint offset, guint length _U_,",
          "585:                              const char **value);",
          "588: format_amqp_1_0_boolean_false(tvbuff_t *tvb, guint offset, guint length _U_,",
          "589:                               const char **value);",
          "592: format_amqp_1_0_boolean(tvbuff_t *tvb, guint offset, guint length _U_,",
          "593:                         const char **value);",
          "596: format_amqp_1_0_uint(tvbuff_t *tvb, guint offset, guint length,",
          "597:                      const char **value);",
          "600: format_amqp_1_0_int(tvbuff_t *tvb, guint offset, guint length,",
          "601:                     const char **value);",
          "604: format_amqp_1_0_float(tvbuff_t *tvb, guint offset, guint length _U_,",
          "605:                       const char **value);",
          "608: format_amqp_1_0_double(tvbuff_t *tvb, guint offset, guint length _U_,",
          "609:                        const char **value);",
          "612: format_amqp_1_0_decimal(tvbuff_t *tvb _U_, guint offset _U_, guint length,",
          "613:                         const char **value);",
          "616: format_amqp_1_0_char(tvbuff_t *tvb, guint offset, guint length _U_,",
          "617:                      const char **value);",
          "620: format_amqp_1_0_timestamp(tvbuff_t *tvb, guint offset, guint length _U_,",
          "621:                           const char **value);",
          "624: format_amqp_1_0_uuid(tvbuff_t *tvb, guint offset, guint length _U_,",
          "625:                      const char **value);",
          "628: format_amqp_1_0_bin(tvbuff_t *tvb, guint offset, guint length,",
          "629:                     const char **value);",
          "632: format_amqp_1_0_str(tvbuff_t *tvb, guint offset, guint length,",
          "633:                     const char **value);",
          "636: format_amqp_1_0_symbol(tvbuff_t *tvb, guint offset, guint length,",
          "637:                        const char **value);",
          "639: static gboolean",
          "640: get_amqp_0_10_type_formatter(guint8 code,",
          "641:                              const char **name,",
          "642:                              type_formatter *decoder,",
          "643:                              guint *length_size);",
          "646: format_amqp_0_10_bin(tvbuff_t *tvb,",
          "647:                      guint offset, guint length,",
          "648:                      const char **value);",
          "651: format_amqp_0_10_int(tvbuff_t *tvb,",
          "652:                      guint offset, guint length,",
          "653:                      const char **value);",
          "656: format_amqp_0_10_uint(tvbuff_t *tvb,",
          "657:                       guint offset, guint length,",
          "658:                       const char **value);",
          "661: format_amqp_0_10_char(tvbuff_t *tvb,",
          "662:                       guint offset, guint length,",
          "663:                       const char **value);",
          "666: format_amqp_0_10_boolean(tvbuff_t *tvb,",
          "667:                          guint offset, guint length,",
          "668:                          const char **value);",
          "671: format_amqp_0_10_vbin(tvbuff_t *tvb,",
          "672:                       guint offset, guint length,",
          "673:                       const char **value);",
          "676: format_amqp_0_10_str(tvbuff_t *tvb,",
          "677:                      guint offset, guint length,",
          "678:                      const char **value);",
          "680: static void",
          "681: format_amqp_0_10_sequence_set(tvbuff_t *tvb, guint offset, guint length,",
          "682:                               proto_item *item);",
          "686: static int proto_amqp = -1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1442:                                              &hf_amqp_1_0_initResponse,",
          "1443:                                              &hf_amqp_1_0_hostname };",
          "1447:                                                 &hf_amqp_1_0_saslAdditionalData };",
          "1449:                                              &hf_amqp_1_0_hostname,",
          "1450:                                              &hf_amqp_1_0_maxFrameSize,",
          "1451:                                              &hf_amqp_1_0_channelMax,",
          "",
          "[Removed Lines]",
          "1440: const int* hf_amqp_1_0_sasl_mechanisms_items[] = { &hf_amqp_1_0_mechanisms };",
          "1441: const int* hf_amqp_1_0_sasl_init_items[] = { &hf_amqp_1_0_mechanism,",
          "1444: const int* hf_amqp_1_0_sasl_challenge_items[] = { &hf_amqp_1_0_saslChallenge };",
          "1445: const int* hf_amqp_1_0_sasl_response_items[] = { &hf_amqp_1_0_saslResponse };",
          "1446: const int* hf_amqp_1_0_sasl_outcome_items[] = { &hf_amqp_1_0_saslCode,",
          "1448: const int* hf_amqp_1_0_amqp_open_items[] = { &hf_amqp_1_0_containerId,",
          "",
          "[Added Lines]",
          "864: static const int* amqp_1_0_sasl_mechanisms_items[] = { &hf_amqp_1_0_mechanisms };",
          "865: static const int* amqp_1_0_sasl_init_items[] = { &hf_amqp_1_0_mechanism,",
          "868: static const int* amqp_1_0_sasl_challenge_items[] = { &hf_amqp_1_0_saslChallenge };",
          "869: static const int* amqp_1_0_sasl_response_items[] = { &hf_amqp_1_0_saslResponse };",
          "870: static const int* amqp_1_0_sasl_outcome_items[] = { &hf_amqp_1_0_saslCode,",
          "872: static const int* amqp_1_0_amqp_open_items[] = { &hf_amqp_1_0_containerId,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1455:                                              &hf_amqp_1_0_offeredCapabilities,",
          "1456:                                              &hf_amqp_1_0_desiredCapabilities,",
          "1457:                                              &hf_amqp_1_0_properties };",
          "1459:                                               &hf_amqp_1_0_nextOutgoingId,",
          "1460:                                               &hf_amqp_1_0_incomingWindow,",
          "1461:                                               &hf_amqp_1_0_outgoingWindow,",
          "",
          "[Removed Lines]",
          "1458: const int* hf_amqp_1_0_amqp_begin_items[] = { &hf_amqp_1_0_remoteChannel,",
          "",
          "[Added Lines]",
          "882: static const int* amqp_1_0_amqp_begin_items[] = { &hf_amqp_1_0_remoteChannel,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1463:                                               &hf_amqp_1_0_offeredCapabilities,",
          "1464:                                               &hf_amqp_1_0_desiredCapabilities,",
          "1465:                                               &hf_amqp_1_0_properties };",
          "1467:                                                &hf_amqp_1_0_handle,",
          "1468:                                                &hf_amqp_1_0_role,",
          "1469:                                                &hf_amqp_1_0_sndSettleMode,",
          "",
          "[Removed Lines]",
          "1466: const int* hf_amqp_1_0_amqp_attach_items[] = { &hf_amqp_1_0_name,",
          "",
          "[Added Lines]",
          "890: static const int* amqp_1_0_amqp_attach_items[] = { &hf_amqp_1_0_name,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1477:                                                &hf_amqp_1_0_offeredCapabilities,",
          "1478:                                                &hf_amqp_1_0_desiredCapabilities,",
          "1479:                                                &hf_amqp_1_0_properties };",
          "1481:                                              &hf_amqp_1_0_incomingWindow,",
          "1482:                                              &hf_amqp_1_0_nextOutgoingId,",
          "1483:                                              &hf_amqp_1_0_outgoingWindow,",
          "",
          "[Removed Lines]",
          "1480: const int* hf_amqp_1_0_amqp_flow_items[] = { &hf_amqp_1_0_nextIncomingId,",
          "",
          "[Added Lines]",
          "904: static const int* amqp_1_0_amqp_flow_items[] = { &hf_amqp_1_0_nextIncomingId,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1488:                                              &hf_amqp_1_0_drain,",
          "1489:                                              &hf_amqp_1_0_echo,",
          "1490:                                              &hf_amqp_1_0_properties };",
          "1492:                                                  &hf_amqp_1_0_deliveryId,",
          "1493:                                                  &hf_amqp_1_0_deliveryTag,",
          "1494:                                                  &hf_amqp_1_0_messageFormat,",
          "",
          "[Removed Lines]",
          "1491: const int* hf_amqp_1_0_amqp_transfer_items[] = { &hf_amqp_1_0_handle,",
          "",
          "[Added Lines]",
          "915: static const int* amqp_1_0_amqp_transfer_items[] = { &hf_amqp_1_0_handle,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1499:                                                  &hf_amqp_1_0_resume,",
          "1500:                                                  &hf_amqp_1_0_aborted,",
          "1501:                                                  &hf_amqp_1_0_batchable };",
          "1503:                                                     &hf_amqp_1_0_first,",
          "1504:                                                     &hf_amqp_1_0_last,",
          "1505:                                                     &hf_amqp_1_0_settled,",
          "1506:                                                     &hf_amqp_1_0_state,",
          "1507:                                                     &hf_amqp_1_0_batchable };",
          "1509:                                                &hf_amqp_1_0_closed,",
          "1510:                                                &hf_amqp_1_0_error };",
          "1514:                                          &hf_amqp_1_0_description,",
          "1515:                                          &hf_amqp_1_0_info };",
          "1517:                                                  &hf_amqp_1_0_priority,",
          "1518:                                                  &hf_amqp_1_0_ttl,",
          "1519:                                                  &hf_amqp_1_0_firstAcquirer,",
          "1520:                                                  &hf_amqp_1_0_deliveryCount };",
          "1522:                                             &hf_amqp_1_0_sectionOffset };",
          "1525:                                             &hf_amqp_1_0_undeliverableHere,",
          "1526:                                             &hf_amqp_1_0_messageAnnotations };",
          "1528:                                           &hf_amqp_1_0_terminusDurable,",
          "1529:                                           &hf_amqp_1_0_expiryPolicy,",
          "1530:                                           &hf_amqp_1_0_timeout,",
          "",
          "[Removed Lines]",
          "1502: const int* hf_amqp_1_0_amqp_disposition_items[] = { &hf_amqp_1_0_role,",
          "1508: const int* hf_amqp_1_0_amqp_detach_items[] = { &hf_amqp_1_0_handle,",
          "1511: const int* hf_amqp_1_0_amqp_end_items[] = { &hf_amqp_1_0_error };",
          "1512: const int* hf_amqp_1_0_amqp_close_items[] = { &hf_amqp_1_0_error };",
          "1513: const int* hf_amqp_1_0_error_items[] = { &hf_amqp_1_0_condition,",
          "1516: const int* hf_amqp_1_0_messageHeader_items[] = { &hf_amqp_1_0_durable,",
          "1521: const int* hf_amqp_1_0_received_items[] = { &hf_amqp_1_0_sectionNumber,",
          "1523: const int* hf_amqp_1_0_rejected_items[] = { &hf_amqp_1_0_error };",
          "1524: const int* hf_amqp_1_0_modified_items[] = { &hf_amqp_1_0_deliveryFailed,",
          "1527: const int* hf_amqp_1_0_source_items[] = { &hf_amqp_1_0_address,",
          "",
          "[Added Lines]",
          "926: static const int* amqp_1_0_amqp_disposition_items[] = { &hf_amqp_1_0_role,",
          "932: static const int* amqp_1_0_amqp_detach_items[] = { &hf_amqp_1_0_handle,",
          "935: static const int* amqp_1_0_amqp_end_items[] = { &hf_amqp_1_0_error };",
          "936: static const int* amqp_1_0_amqp_close_items[] = { &hf_amqp_1_0_error };",
          "937: static const int* amqp_1_0_error_items[] = { &hf_amqp_1_0_condition,",
          "940: static const int* amqp_1_0_messageHeader_items[] = { &hf_amqp_1_0_durable,",
          "945: static const int* amqp_1_0_received_items[] = { &hf_amqp_1_0_sectionNumber,",
          "947: static const int* amqp_1_0_rejected_items[] = { &hf_amqp_1_0_error };",
          "948: static const int* amqp_1_0_modified_items[] = { &hf_amqp_1_0_deliveryFailed,",
          "951: static const int* amqp_1_0_source_items[] = { &hf_amqp_1_0_address,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1535:                                           &hf_amqp_1_0_defaultOutcome,",
          "1536:                                           &hf_amqp_1_0_outcomes,",
          "1537:                                           &hf_amqp_1_0_capabilities };",
          "1539:                                           &hf_amqp_1_0_terminusDurable,",
          "1540:                                           &hf_amqp_1_0_expiryPolicy,",
          "1541:                                           &hf_amqp_1_0_timeout,",
          "1542:                                           &hf_amqp_1_0_dynamic,",
          "1543:                                           &hf_amqp_1_0_dynamicNodeProperties,",
          "1544:                                           &hf_amqp_1_0_capabilities };",
          "1546:                                                      &hf_amqp_1_0_userId,",
          "1547:                                                      &hf_amqp_1_0_to,",
          "1548:                                                      &hf_amqp_1_0_subject,",
          "",
          "[Removed Lines]",
          "1538: const int* hf_amqp_1_0_target_items[] = { &hf_amqp_1_0_address,",
          "1545: const int* hf_amqp_1_0_messageProperties_items[] = { &hf_amqp_1_0_messageId,",
          "",
          "[Added Lines]",
          "962: static const int* amqp_1_0_target_items[] = { &hf_amqp_1_0_address,",
          "969: static const int* amqp_1_0_messageProperties_items[] = { &hf_amqp_1_0_messageId,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1555:                                                      &hf_amqp_1_0_groupId,",
          "1556:                                                      &hf_amqp_1_0_groupSequence,",
          "1557:                                                      &hf_amqp_1_0_replyToGroupId };",
          "1561:                                              &hf_amqp_1_0_fail };",
          "1564:                                                       &hf_amqp_1_0_outcome };",
          "",
          "[Removed Lines]",
          "1558: const int* hf_amqp_1_0_coordinator_items[] = { &hf_amqp_1_0_capabilities };",
          "1559: const int* hf_amqp_1_0_declare_items[] = { &hf_amqp_1_0_globalId };",
          "1560: const int* hf_amqp_1_0_discharge_items[] = { &hf_amqp_1_0_txnId,",
          "1562: const int* hf_amqp_1_0_declared_items[] = { &hf_amqp_1_0_txnId };",
          "1563: const int* hf_amqp_1_0_transactionalState_items[] = { &hf_amqp_1_0_txnId,",
          "",
          "[Added Lines]",
          "982: static const int* amqp_1_0_coordinator_items[] = { &hf_amqp_1_0_capabilities };",
          "983: static const int* amqp_1_0_declare_items[] = { &hf_amqp_1_0_globalId };",
          "984: static const int* amqp_1_0_discharge_items[] = { &hf_amqp_1_0_txnId,",
          "986: static const int* amqp_1_0_declared_items[] = { &hf_amqp_1_0_txnId };",
          "987: static const int* amqp_1_0_transactionalState_items[] = { &hf_amqp_1_0_txnId,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1584: static int hf_amqp_0_10_argument_packing_flags = -1;",
          "1585: static int hf_amqp_0_10_session_header = -1;",
          "1586: static int hf_amqp_0_10_session_header_sync = -1;",
          "1588: static int hf_amqp_0_10_message_body = -1;",
          "1589: static int hf_amqp_0_10_dtx_xid = -1;",
          "1590: static int hf_amqp_0_10_dtx_xid_format = -1;",
          "",
          "[Removed Lines]",
          "1587: static int hf_amqp_0_10_undissected_struct32 = -1;",
          "",
          "[Added Lines]",
          "1011: static int hf_amqp_0_10_struct32_size = -1;",
          "1012: static int hf_amqp_0_10_struct32 = -1;",
          "1013: static int hf_amqp_0_10_struct32_padding = -1;",
          "1014: static int hf_amqp_0_10_struct32_class = -1;",
          "1015: static int hf_amqp_0_10_struct32_struct = -1;",
          "1016: static int hf_amqp_0_10_array_type = -1;",
          "1017: static int hf_amqp_0_10_array_element_count = -1;",
          "1018: static int hf_amqp_0_10_array_string = -1;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1645: static int hf_amqp_0_10_struct_stream_properties_priority = -1;",
          "1646: static int hf_amqp_0_10_struct_stream_properties_timestamp = -1;",
          "1647: static int hf_amqp_0_10_method_session_attach_name = -1;",
          "1648: static int hf_amqp_0_10_method_session_attach_force = -1;",
          "1649: static int hf_amqp_0_10_method_session_detached_code = -1;",
          "1650: static int hf_amqp_0_10_method_session_timeout = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1079: static int hf_amqp_0_10_method_session_attach_name_size = -1;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1753: static int hf_amqp_0_10_method_stream_deliver_exchange = -1;",
          "1754: static int hf_amqp_0_10_method_stream_deliver_queue = -1;",
          "1755: static int hf_amqp_channel = -1;",
          "1756: static int hf_amqp_0_9_type = -1;",
          "1757: static int hf_amqp_0_9_length = -1;",
          "1758: static int hf_amqp_0_9_method_class_id = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1188: static int hf_amqp_reserved = -1;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2031: static int hf_amqp_header_tunnel_data_name = -1;",
          "2032: static int hf_amqp_header_tunnel_durable = -1;",
          "2033: static int hf_amqp_header_tunnel_broadcast = -1;",
          "2034: static int hf_amqp_payload = -1;",
          "2035: static int hf_amqp_init_protocol = -1;",
          "2036: static int hf_amqp_init_id = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1467: static int hf_amqp_0_10_dtx_xa_status = -1;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2041: static int hf_amqp_init_version_revision = -1;",
          "2042: static int hf_amqp_message_in = -1;",
          "2043: static int hf_amqp_ack_in = -1;",
          "2045: static gint ett_amqp = -1;",
          "2046: static gint ett_header = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1478: static int hf_amqp_method_connection_start_server_properties_size = -1;",
          "1479: static int hf_amqp_0_10_method_connection_start_mechanisms_size = -1;",
          "1480: static int hf_amqp_0_10_method_connection_start_locales_size = -1;",
          "1481: static int hf_amqp_method_connection_start_ok_client_properties_size = -1;",
          "1482: static int hf_amqp_0_10_method_connection_open_capabilities_size = -1;",
          "1483: static int hf_amqp_0_10_method_connection_open_ok_known_hosts_size = -1;",
          "1484: static int hf_amqp_0_10_method_connection_redirect_known_hosts_size = -1;",
          "1485: static int hf_amqp_0_10_method_execution_error_info_size = -1;",
          "1486: static int hf_amqp_0_10_method_exchange_declare_arguments_size = -1;",
          "1487: static int hf_amqp_0_10_method_queue_declare_arguments_size = -1;",
          "1488: static int hf_amqp_0_10_method_file_consume_arguments_size = -1;",
          "1489: static int hf_amqp_0_10_method_stream_consume_arguments_size = -1;",
          "1490: static int hf_amqp_0_10_struct_message_properties_application_headers_size = -1;",
          "1491: static int hf_amqp_0_10_struct_file_properties_headers_size = -1;",
          "1492: static int hf_amqp_0_10_struct_stream_properties_headers_size = -1;",
          "1493: static int hf_amqp_0_10_struct_dtx_recover_result_size = -1;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2050: static gint ett_amqp_init = -1;",
          "2051: static gint ett_amqp_0_10_map = -1;",
          "2052: static gint ett_amqp_0_10_array = -1;",
          "2053: static gint ett_amqp_1_0_list = -1;",
          "2054: static gint ett_amqp_1_0_array = -1;",
          "2055: static gint ett_amqp_1_0_map = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1503: static gint ett_amqp_0_10_struct = -1;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2062: static expert_field ei_amqp_unknown_basic_method = EI_INIT;",
          "2063: static expert_field ei_amqp_unknown_frame_type = EI_INIT;",
          "2064: static expert_field ei_amqp_field_short = EI_INIT;",
          "2066: static expert_field ei_amqp_unknown_command_class = EI_INIT;",
          "2067: static expert_field ei_amqp_unknown_tunnel_method = EI_INIT;",
          "2068: static expert_field ei_amqp_unknown_confirm_method = EI_INIT;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1516: static expert_field ei_amqp_bad_length = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2081: static expert_field ei_amqp_unknown_amqp_command = EI_INIT;",
          "2082: static expert_field ei_amqp_unknown_amqp_type = EI_INIT;",
          "2083: static expert_field ei_amqp_invalid_number_of_params = EI_INIT;",
          "2084: static expert_field ei_amqp_amqp_1_0_frame_length_exceeds_65K = EI_INIT;",
          "2087: static const value_string amqp_1_0_SASL_code_value [] = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1535: static expert_field ei_amqp_size_exceeds_65K = EI_INIT;",
          "1537: static expert_field ei_amqp_array_type_unknown = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2434:     {0, NULL}",
          "2435: };",
          "2437: static const value_string amqp_0_9_frame_types [] = {",
          "2438:     {AMQP_0_9_FRAME_TYPE_METHOD,             \"Method\"},",
          "2439:     {AMQP_0_9_FRAME_TYPE_CONTENT_HEADER,     \"Content header\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1891: static const value_string amqp_0_10_struct32_vals[] = {",
          "1892:     { ((AMQP_0_10_CLASS_MESSAGE << 8) | (AMQP_0_10_STRUCT_MESSAGE_DELIVERY_PROPERTIES)), \"message.delivery-properties\" },",
          "1893:     { ((AMQP_0_10_CLASS_MESSAGE << 8) | (AMQP_0_10_STRUCT_MESSAGE_FRAGMENT_PROPERTIES)), \"message.fragment-properties\" },",
          "1894:     { ((AMQP_0_10_CLASS_MESSAGE << 8) | (AMQP_0_10_STRUCT_MESSAGE_MESSAGE_PROPERTIES)), \"message.message-properties\" },",
          "1895:     { ((AMQP_0_10_CLASS_MESSAGE << 8) | (AMQP_0_10_STRUCT_MESSAGE_ACQUIRED)), \"message.acquired\" },",
          "1896:     { ((AMQP_0_10_CLASS_MESSAGE << 8) | (AMQP_0_10_STRUCT_MESSAGE_RESUME_RESULT)), \"message.resume-result\" },",
          "1897:     { ((AMQP_0_10_CLASS_DTX << 8) | (AMQP_0_10_STRUCT_DTX_XA_RESULT)), \"dtx.xa-status\" },",
          "1898:     { ((AMQP_0_10_CLASS_DTX << 8) | (AMQP_0_10_STRUCT_DTX_RECOVER_RESULT)), \"dtx.recover-result\" },",
          "1899:     { ((AMQP_0_10_CLASS_EXCHANGE << 8) | (AMQP_0_10_STRUCT_EXCHANGE_QUERY_RESULT)), \"exchange.exchange-query-result\" },",
          "1900:     { ((AMQP_0_10_CLASS_EXCHANGE << 8) | (AMQP_0_10_STRUCT_EXCHANGE_BOUND_RESULT)), \"exchange.exchange-bound-result\" },",
          "1901:     { ((AMQP_0_10_CLASS_QUEUE << 8) | (AMQP_0_10_STRUCT_QUEUE_QUERY_RESULT)), \"queue.queue-query-result\" },",
          "1902:     { ((AMQP_0_10_CLASS_FILE << 8) | (AMQP_0_10_STRUCT_FILE_PROPERTIES)), \"file.file-properties\" },",
          "1903:     { ((AMQP_0_10_CLASS_STREAM << 8) | (AMQP_0_10_STRUCT_STREAM_PROPERTIES)), \"stream.stream-properties\" },",
          "1904:     { 0, NULL }",
          "1905: };",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2603:     {0, NULL}",
          "2604: };",
          "2606: static const value_string amqp_method_confirm_methods [] = {",
          "2607:     {10, \"Select\"},",
          "2608:     {11, \"Select-Ok\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2076: static const value_string amqp_0_10_array_type_vals [] = {",
          "2077:     {AMQP_0_10_TYPE_STR16, \"str16\"},",
          "2078:     {AMQP_0_10_TYPE_STRUCT32, \"struct32\"},",
          "2079:     {0, NULL}",
          "2080: };",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2672: static struct amqp_defined_types_t amqp_1_0_defined_types[] = {",
          "2675:     {AMQP_1_0_AMQP_TYPE_DELIVERY_ANNOTATIONS,   &hf_amqp_1_0_deliveryAnnotations,   0, NULL },",
          "2676:     {AMQP_1_0_AMQP_TYPE_MESSAGE_ANNOTATIONS,    &hf_amqp_1_0_messageAnnotations,    0, NULL },",
          "2678:     {AMQP_1_0_AMQP_TYPE_APPLICATION_PROPERTIES, &hf_amqp_1_0_applicationProperties, 0, NULL },",
          "2679:     {AMQP_1_0_AMQP_TYPE_DATA,                   &hf_amqp_1_0_data,                  0, NULL },",
          "2680:     {AMQP_1_0_AMQP_TYPE_AMQP_SEQUENCE,          &hf_amqp_1_0_amqp_sequence,         0, NULL },",
          "2681:     {AMQP_1_0_AMQP_TYPE_AMQP_VALUE,             &hf_amqp_1_0_amqp_value,            0, NULL },",
          "2682:     {AMQP_1_0_AMQP_TYPE_FOOTER,                 &hf_amqp_1_0_footer,                0, NULL },",
          "2684:     {AMQP_1_0_AMQP_TYPE_ACCEPTED,               &hf_amqp_1_0_accepted,              0, NULL },",
          "2686:     {AMQP_1_0_AMQP_TYPE_RELEASED,               &hf_amqp_1_0_released,              0, NULL },",
          "2690:     {AMQP_1_0_AMQP_TYPE_DELETE_ON_CLOSE,        &hf_amqp_1_0_deleteOnClose,         0, NULL },",
          "2691:     {AMQP_1_0_AMQP_TYPE_DELETE_ON_NO_LINKS,     &hf_amqp_1_0_deleteOnNoLinks,       0, NULL },",
          "2692:     {AMQP_1_0_AMQP_TYPE_DELETE_ON_NO_MESSAGE,   &hf_amqp_1_0_deleteOnNoMessages,    0, NULL },",
          "2693:     {AMQP_1_0_AMQP_TYPE_DELETE_ON_NO_LINKS_OR_MESSAGE, &hf_amqp_1_0_deleteOnNoLinksOrMessages, 0, NULL },",
          "2699:     { 0, NULL, 0, NULL }",
          "2700: };",
          "2751: static void",
          "2752: check_amqp_version(tvbuff_t *tvb, amqp_conv *conn)",
          "2753: {",
          "",
          "[Removed Lines]",
          "2673:     {AMQP_1_0_AMQP_TYPE_ERROR,                  &hf_amqp_1_0_error,                 3, hf_amqp_1_0_error_items },",
          "2674:     {AMQP_1_0_AMQP_TYPE_HEADER,                 &hf_amqp_1_0_messageHeader,         5, hf_amqp_1_0_messageHeader_items },",
          "2677:     {AMQP_1_0_AMQP_TYPE_PROPERTIES,             &hf_amqp_1_0_messageProperties,     13, hf_amqp_1_0_messageProperties_items },",
          "2683:     {AMQP_1_0_AMQP_TYPE_RECEIVED,               &hf_amqp_1_0_received,              2, hf_amqp_1_0_received_items },",
          "2685:     {AMQP_1_0_AMQP_TYPE_REJECTED,               &hf_amqp_1_0_rejected,              1, hf_amqp_1_0_rejected_items },",
          "2687:     {AMQP_1_0_AMQP_TYPE_MODIFIED,               &hf_amqp_1_0_modified,              3, hf_amqp_1_0_modified_items },",
          "2688:     {AMQP_1_0_AMQP_TYPE_SOURCE,                 &hf_amqp_1_0_source,                11, hf_amqp_1_0_source_items },",
          "2689:     {AMQP_1_0_AMQP_TYPE_TARGET,                 &hf_amqp_1_0_target,                7, hf_amqp_1_0_target_items },",
          "2694:     {AMQP_1_0_AMQP_TYPE_COORDINATOR,            &hf_amqp_1_0_coordinator,           1, hf_amqp_1_0_coordinator_items },",
          "2695:     {AMQP_1_0_AMQP_TYPE_DECLARE,                &hf_amqp_1_0_declare,               1, hf_amqp_1_0_declare_items },",
          "2696:     {AMQP_1_0_AMQP_TYPE_DISCHARGE,              &hf_amqp_1_0_discharge,             2, hf_amqp_1_0_discharge_items },",
          "2697:     {AMQP_1_0_AMQP_TYPE_DECLARED,               &hf_amqp_1_0_declared,              1, hf_amqp_1_0_declared_items },",
          "2698:     {AMQP_1_0_AMQP_TYPE_TRANSACTIONAL_STATE,    &hf_amqp_1_0_transactionalState,    2, hf_amqp_1_0_transactionalState_items },",
          "2704: static int",
          "2705: dissect_amqp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "2706: {",
          "2707:     conversation_t *conv;",
          "2708:     amqp_conv *conn;",
          "2710:     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"AMQP\");",
          "2711:     col_clear(pinfo->cinfo, COL_INFO);",
          "2714:     if (tvb_reported_length (tvb) < 8) {",
          "2716:         pinfo->desegment_len = DESEGMENT_ONE_MORE_SEGMENT;",
          "2718:     }",
          "2721:     conv = find_or_create_conversation(pinfo);",
          "2722:     conn = (amqp_conv *)conversation_get_proto_data(conv, proto_amqp);",
          "2723:     if (conn == NULL) {",
          "2724:         conn = wmem_new0(wmem_file_scope(), amqp_conv);",
          "2725:         conn->channels = wmem_map_new(wmem_file_scope(), g_direct_hash, g_direct_equal);",
          "2726:         conversation_add_proto_data(conv, proto_amqp, conn);",
          "2727:     }",
          "2728:     check_amqp_version(tvb, conn);",
          "2729:     switch(conn->version) {",
          "2730:     case AMQP_V0_9:",
          "2731:         tcp_dissect_pdus(tvb, pinfo, tree, TRUE, 7, get_amqp_0_9_message_len,",
          "2732:                          dissect_amqp_0_9_frame, data);",
          "2733:         break;",
          "2734:     case AMQP_V0_10:",
          "2735:         tcp_dissect_pdus(tvb, pinfo, tree, TRUE, 8, get_amqp_0_10_message_len,",
          "2736:                          dissect_amqp_0_10_frame, data);",
          "2737:         break;",
          "2738:     case AMQP_V1_0:",
          "2739:         tcp_dissect_pdus(tvb, pinfo, tree, TRUE, 8, get_amqp_1_0_message_len,",
          "2740:                          dissect_amqp_1_0_frame, data);",
          "2741:         break;",
          "2742:     default:",
          "2743:         col_append_str(pinfo->cinfo, COL_INFO, \"AMQP (unknown version)\");",
          "2744:         col_set_fence(pinfo->cinfo, COL_INFO);",
          "2745:         break;",
          "2746:     }",
          "2748:     return tvb_captured_length(tvb);",
          "2749: }",
          "",
          "[Added Lines]",
          "2149:     {AMQP_1_0_AMQP_TYPE_ERROR,                  &hf_amqp_1_0_error,                 3, amqp_1_0_error_items },",
          "2150:     {AMQP_1_0_AMQP_TYPE_HEADER,                 &hf_amqp_1_0_messageHeader,         5, amqp_1_0_messageHeader_items },",
          "2153:     {AMQP_1_0_AMQP_TYPE_PROPERTIES,             &hf_amqp_1_0_messageProperties,     13, amqp_1_0_messageProperties_items },",
          "2159:     {AMQP_1_0_AMQP_TYPE_RECEIVED,               &hf_amqp_1_0_received,              2, amqp_1_0_received_items },",
          "2161:     {AMQP_1_0_AMQP_TYPE_REJECTED,               &hf_amqp_1_0_rejected,              1, amqp_1_0_rejected_items },",
          "2163:     {AMQP_1_0_AMQP_TYPE_MODIFIED,               &hf_amqp_1_0_modified,              3, amqp_1_0_modified_items },",
          "2164:     {AMQP_1_0_AMQP_TYPE_SOURCE,                 &hf_amqp_1_0_source,                11, amqp_1_0_source_items },",
          "2165:     {AMQP_1_0_AMQP_TYPE_TARGET,                 &hf_amqp_1_0_target,                7, amqp_1_0_target_items },",
          "2170:     {AMQP_1_0_AMQP_TYPE_COORDINATOR,            &hf_amqp_1_0_coordinator,           1, amqp_1_0_coordinator_items },",
          "2171:     {AMQP_1_0_AMQP_TYPE_DECLARE,                &hf_amqp_1_0_declare,               1, amqp_1_0_declare_items },",
          "2172:     {AMQP_1_0_AMQP_TYPE_DISCHARGE,              &hf_amqp_1_0_discharge,             2, amqp_1_0_discharge_items },",
          "2173:     {AMQP_1_0_AMQP_TYPE_DECLARED,               &hf_amqp_1_0_declared,              1, amqp_1_0_declared_items },",
          "2174:     {AMQP_1_0_AMQP_TYPE_TRANSACTIONAL_STATE,    &hf_amqp_1_0_transactionalState,    2, amqp_1_0_transactionalState_items },",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "3165:     return AMQP_0_10_SIZE_MAX(size);",
          "3166: }",
          "3170: static void",
          "3176: {",
          "3177:     proto_item     *map_tree;",
          "3178:     guint           namelen, size;",
          "",
          "[Removed Lines]",
          "3171: dissect_amqp_0_10_map(tvbuff_t *tvb,",
          "3175:                       proto_item *item)",
          "",
          "[Added Lines]",
          "2597: static guint",
          "2598: amqp_0_10_get_32bit_size_new(proto_tree* tree, packet_info* pinfo, tvbuff_t *tvb, int hf, int offset) {",
          "2599:     guint size;",
          "2600:     proto_item* ti;",
          "2602:     ti = proto_tree_add_item_ret_uint(tree, hf, tvb, offset, 4, ENC_BIG_ENDIAN, &size);",
          "2603:     if (size > 0xFFFF)",
          "2604:     {",
          "2605:         expert_add_info(pinfo, ti, &ei_amqp_size_exceeds_65K);",
          "2606:         size = 0xFFFF;",
          "2607:     }",
          "2609:     return size;",
          "2610: }",
          "2615: dissect_amqp_0_10_map(tvbuff_t *tvb, proto_item *item)",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "3180:     const char     *name;",
          "3181:     const char     *amqp_typename;",
          "3182:     const char     *value;",
          "3184:     type_formatter  formatter;",
          "3186:     map_tree = proto_item_add_subtree(item, ett_amqp_0_10_map);",
          "3187:     field_count = tvb_get_ntohl(tvb, offset);",
          "3190:     proto_item_append_text(item, \" (%d entries)\", field_count);",
          "3192:         guint field_length = 0;",
          "3193:         guint field_start = offset;",
          "3194:         namelen = tvb_get_guint8(tvb, offset);",
          "3197:         name = (char*) tvb_get_string_enc(wmem_packet_scope(), tvb, offset, namelen, ENC_UTF_8|ENC_NA);",
          "3200:         type = tvb_get_guint8(tvb, offset);",
          "3203:         if (get_amqp_0_10_type_formatter(type, &amqp_typename, &formatter, &size)) {",
          "3205:             field_length = AMQP_0_10_SIZE_MAX(field_length);",
          "3206:             proto_tree_add_none_format(map_tree,",
          "3207:                                        hf_amqp_field,",
          "",
          "[Removed Lines]",
          "3183:     guint32         field_count;",
          "3188:     AMQP_INCREMENT(offset, 4, bound);",
          "3189:     length -= 4;",
          "3191:     while ((field_count > 0) && (length > 0)) {",
          "3195:         AMQP_INCREMENT(offset, 1, bound);",
          "3196:         length -= 1;",
          "3198:         AMQP_INCREMENT(offset, namelen, bound);",
          "3199:         length -= namelen;",
          "3201:         AMQP_INCREMENT(offset, 1, bound);",
          "3202:         length -= 1;",
          "",
          "[Added Lines]",
          "2623:     guint32         i, field_count;",
          "2624:     int             offset = 0;",
          "2629:     offset += 4;",
          "2631:     for (i = 0; ((i < field_count) && (tvb_reported_length_remaining(tvb, offset) > 0)); i++) {",
          "2635:         offset += 1;",
          "2637:         offset += namelen;",
          "2639:         offset += 1;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "3210:                                        1 + namelen + 1 + field_length,",
          "3211:                                        \"%s (%s): %s\",",
          "3212:                                        name, amqp_typename, value);",
          "3215:         }",
          "3217:             guint size_field_len = 0;",
          "",
          "[Removed Lines]",
          "3213:             AMQP_INCREMENT(offset, field_length, bound);",
          "3214:             length -= field_length;",
          "",
          "[Added Lines]",
          "2650:             offset += field_length;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "3280:         }",
          "3283:     }",
          "3284: }",
          "3288: static void",
          "3289: dissect_amqp_0_10_array(tvbuff_t *tvb,",
          "3290:                         packet_info *pinfo,",
          "3294:                         proto_item *item)",
          "3295: {",
          "3299:     guint16     len16;",
          "3305:     guint32     struct_length;",
          "3320:         switch (type) {",
          "3321:         case AMQP_0_10_TYPE_STR16:",
          "3323:             len16 = tvb_get_ntohs(tvb, offset);",
          "3329:             break;",
          "3331:         case AMQP_0_10_TYPE_STRUCT32:",
          "3346:             break;",
          "3348:         default:",
          "3358:             return;",
          "3359:         }",
          "3376:     }",
          "3377: }",
          "3379: static void",
          "3380: dissect_amqp_0_10_xid (tvbuff_t *tvb,",
          "3381:                        int offset,",
          "3383:                        proto_item *ti)",
          "3384: {",
          "3385:     proto_item *xid_tree;",
          "3386:     guint8      flag1/*, flag2*/;",
          "3391:     xid_tree = proto_item_add_subtree(ti, ett_args);",
          "3392:     flag1 = tvb_get_guint8(tvb, offset);",
          "3394:     proto_tree_add_item(xid_tree, hf_amqp_0_10_argument_packing_flags,",
          "3395:                         tvb, offset, 2, ENC_BIG_ENDIAN);",
          "3397:     if (flag1 & 0x01) {",
          "3399:         proto_tree_add_item(xid_tree,",
          "3400:                             hf_amqp_0_10_dtx_xid_format,",
          "3401:                             tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3403:     }",
          "3404:     if (flag1 & 0x02) {",
          "3407:         proto_tree_add_item(xid_tree,",
          "3408:                             hf_amqp_0_10_dtx_xid_global_id,",
          "3411:     }",
          "3412:     if (flag1 & 0x04) {",
          "3415:         proto_tree_add_item(xid_tree,",
          "3416:                             hf_amqp_0_10_dtx_xid_branch_id,",
          "3419:     }",
          "3420: }",
          "",
          "[Removed Lines]",
          "3278:             AMQP_INCREMENT(offset, (size_field_len + field_length), bound);",
          "3279:             length -= (size_field_len + field_length);",
          "3282:         field_count -= 1;",
          "3296:     proto_item *array_tree;",
          "3297:     proto_item *sub;",
          "3298:     guint8      type;",
          "3300:     const char *amqp_typename;",
          "3301:     const char *value;",
          "3302:     int         element_start;",
          "3303:     int         externally_formatted;",
          "3304:     guint32     element_count;",
          "3307:     array_tree = 0;",
          "3308:     type = tvb_get_guint8(tvb, offset);",
          "3309:     AMQP_INCREMENT(offset, 1, bound);",
          "3310:     length -= 1;",
          "3311:     element_count = tvb_get_ntohl(tvb, offset);",
          "3312:     AMQP_INCREMENT(offset, 4, bound);",
          "3313:     length -= 4;",
          "3314:     proto_item_append_text(item, \" (array of %d element%s)\", element_count, element_suffix[element_count!=1]);",
          "3315:     if (element_count > 1)",
          "3316:         array_tree = proto_item_add_subtree(item, ett_amqp_0_10_array);",
          "3317:     while ((element_count > 0) && (length > 0)) {",
          "3318:         element_start = offset;",
          "3319:         externally_formatted = 0;",
          "3322:             amqp_typename = \"str16\";",
          "3324:             AMQP_INCREMENT(offset, 2, bound);",
          "3325:             length -= 2;",
          "3326:             value   = (char*) tvb_get_string_enc(wmem_packet_scope(), tvb, offset, len16, ENC_UTF_8|ENC_NA);",
          "3327:             AMQP_INCREMENT(offset, len16, bound);",
          "3328:             length -= len16;",
          "3332:             amqp_typename = \"struct32\";",
          "3333:             value = \"structure\";",
          "3334:             externally_formatted = 1;",
          "3335:             struct_length = amqp_0_10_get_32bit_size(tvb, offset);",
          "3336:             AMQP_INCREMENT(offset, 4, bound);",
          "3337:             length -= 4;",
          "3338:             array_tree = proto_item_add_subtree(item, ett_amqp_0_10_array);",
          "3339:             sub = proto_tree_add_none_format(array_tree, hf_amqp_field, tvb,",
          "3340:                                              element_start,",
          "3341:                                              offset - element_start,",
          "3342:                                              \"(%s): \", amqp_typename);",
          "3343:             dissect_amqp_0_10_struct32(tvb, pinfo, sub, offset, struct_length);",
          "3344:             AMQP_INCREMENT(offset, struct_length, bound);",
          "3345:             length -= struct_length;",
          "3349:             proto_tree_add_none_format(array_tree, hf_amqp_field, tvb,",
          "3350:                                        element_start,",
          "3351:                                        offset - element_start,",
          "3352:                                        \"(unknown type %d)\",",
          "3353:                                        type);",
          "3361:         element_count -= 1;",
          "3362:         if (externally_formatted)",
          "3363:             continue;",
          "3365:         if (array_tree != 0) {",
          "3366:             proto_tree_add_none_format(array_tree, hf_amqp_field, tvb,",
          "3367:                                        element_start,",
          "3368:                                        offset - element_start,",
          "3369:                                        \"(%s): %s\",",
          "3370:                                        amqp_typename,",
          "3371:                                        value);",
          "3372:         }",
          "3373:         else {",
          "3374:             proto_item_append_text(item, \": (%s): %s\", amqp_typename, value);",
          "3375:         }",
          "3382:                        guint16 xid_length,",
          "3387:     guint8      len8;",
          "3388:     int         max_length;",
          "3390:     max_length = offset + xid_length;",
          "3396:     AMQP_INCREMENT(offset, 2, max_length);",
          "3402:         AMQP_INCREMENT(offset, 4, max_length);",
          "3406:         len8 = tvb_get_guint8(tvb, offset);",
          "3409:                             tvb, offset + 1, len8, ENC_NA);",
          "3410:         AMQP_INCREMENT(offset, (1 + len8), max_length);",
          "3414:         len8 = tvb_get_guint8(tvb, offset);",
          "3417:                             tvb, offset + 1, len8, ENC_NA);",
          "3418:         AMQP_INCREMENT(offset, (1 + len8), max_length);",
          "",
          "[Added Lines]",
          "2714:             offset += (size_field_len + field_length);",
          "2726:     proto_item *array_item, *type_item, *struct_item;",
          "2727:     proto_tree *array_tree;",
          "2729:     guint32     type, i, element_count;",
          "2731:     tvbuff_t    *next_tvb;",
          "2733:     element_count = tvb_get_ntohl(tvb, offset+1);",
          "2734:     array_tree = proto_tree_add_subtree_format(item, tvb, offset, 5, ett_amqp_0_10_array, &array_item, \"Array of %d element%s)\", element_count, plurality(element_count, \"\", \"s\"));",
          "2736:     type_item = proto_tree_add_item_ret_uint(array_tree, hf_amqp_0_10_array_type, tvb, offset, 1, ENC_NA, &type);",
          "2737:     offset += 1;",
          "2738:     proto_tree_add_item_ret_uint(array_tree, hf_amqp_0_10_array_element_count, tvb, offset, 4, ENC_BIG_ENDIAN, &element_count);",
          "2739:     offset += 4;",
          "2741:     for (i = 0; ((i < element_count) && (tvb_reported_length_remaining(tvb, offset) > 0)); i++) {",
          "2745:             proto_tree_add_item(array_tree, hf_amqp_0_10_array_string, tvb, offset, 2,  ENC_UTF_8|ENC_BIG_ENDIAN);",
          "2746:             offset += (2 + len16);",
          "2750:             struct_length = amqp_0_10_get_32bit_size_new(array_tree, pinfo, tvb, hf_amqp_0_10_struct32_size, offset);",
          "2751:             offset += 4;",
          "2753:             array_tree = proto_item_add_subtree(array_item, ett_amqp_0_10_array);",
          "2754:             struct_item = proto_tree_add_item(array_tree,",
          "2755:                                      hf_amqp_0_10_struct32,",
          "2756:                                      tvb, offset, 2, ENC_BIG_ENDIAN);",
          "2757:             proto_item_set_len(struct_item, struct_length);",
          "2759:             if (struct_length > (guint32)tvb_reported_length_remaining(tvb, offset))",
          "2760:             {",
          "2761:                 next_tvb = tvb_new_subset_remaining(tvb, offset);",
          "2762:             }",
          "2763:             else",
          "2764:             {",
          "2765:                 next_tvb = tvb_new_subset_length(tvb, offset, struct_length);",
          "2766:             }",
          "2767:             dissect_amqp_0_10_struct32(next_tvb, pinfo, struct_item);",
          "2768:             offset += struct_length;",
          "2772:             expert_add_info(pinfo, type_item, &ei_amqp_array_type_unknown);",
          "2795:     offset += 2;",
          "2801:         offset += 4;",
          "2807:                             tvb, offset, 1, ENC_NA);",
          "2808:         offset += (1 + tvb_get_guint8(tvb, offset));",
          "2814:                             tvb, offset, 1, ENC_NA);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "3424: static void",
          "3425: dissect_amqp_0_10_connection(tvbuff_t *tvb,",
          "3426:                              packet_info *pinfo,",
          "3429: {",
          "3430:     proto_item  *args_tree;",
          "3431:     proto_item  *ti;",
          "",
          "[Removed Lines]",
          "3427:                              proto_tree *tree,",
          "3428:                              int offset, guint16 length)",
          "",
          "[Added Lines]",
          "2824:                              proto_tree *tree)",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "3435:     guint32      arg_length;",
          "3436:     int          flags_offset;",
          "3437:     const gchar *method_name;",
          "3439:     method = tvb_get_guint8(tvb, offset+1);",
          "3440:     method_name = val_to_str_const(method, amqp_0_10_connection_methods,",
          "3441:                                    \"<invalid connection method>\");",
          "3444:     col_set_fence(pinfo->cinfo,  COL_INFO);",
          "3446:     proto_tree_add_item(tree, hf_amqp_0_10_connection_method,",
          "3447:                         tvb, offset+1, 1, ENC_BIG_ENDIAN);",
          "3448:     ti = proto_tree_add_item(tree, hf_amqp_method_arguments,",
          "3450:     args_tree = proto_item_add_subtree(ti, ett_args);",
          "",
          "[Removed Lines]",
          "3442:     col_append_str(pinfo->cinfo, COL_INFO, method_name);",
          "3443:     col_append_str(pinfo->cinfo, COL_INFO, \" \");",
          "3449:                              tvb, offset + 2, length - 2, ENC_NA);",
          "3451:     AMQP_INCREMENT(offset, 2, length);",
          "",
          "[Added Lines]",
          "2834:     int offset = 0;",
          "2835:     tvbuff_t *next_tvb;",
          "2840:     col_append_fstr(pinfo->cinfo, COL_INFO, \"%s \", method_name);",
          "2845:     offset += 2;",
          "2847:                              tvb, offset, -1, ENC_NA);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "3460:     flags_item = proto_tree_add_item(args_tree,",
          "3461:                                      hf_amqp_0_10_argument_packing_flags,",
          "3462:                                      tvb, offset, 2, ENC_BIG_ENDIAN);",
          "3464:     switch (method) {",
          "3465:     case AMQP_0_10_METHOD_CONNECTION_START:",
          "3466:         if ((flag1 & ~0x07) || (flag2 != 0))",
          "3467:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "3468:         if (flag1 & 0x01) {",
          "3472:             ti = proto_tree_add_item(args_tree,",
          "3473:                                      hf_amqp_method_connection_start_server_properties,",
          "3474:                                      tvb,",
          "3475:                                      offset,",
          "3476:                                      arg_length, ENC_NA);",
          "3483:         }",
          "3484:         if (flag1 & 0x02) {",
          "3488:             ti = proto_tree_add_item(args_tree,",
          "3489:                                      hf_amqp_0_10_method_connection_start_mechanisms,",
          "3490:                                      tvb,",
          "",
          "[Removed Lines]",
          "3463:     AMQP_INCREMENT(offset, 2, length);",
          "3470:             arg_length = amqp_0_10_get_32bit_size(tvb, offset);",
          "3471:             AMQP_INCREMENT(offset, 4, length);",
          "3477:             dissect_amqp_0_10_map (tvb,",
          "3478:                                    offset,",
          "3479:                                    offset + arg_length,",
          "3480:                                    arg_length,",
          "3481:                                    ti);",
          "3482:             AMQP_INCREMENT(offset, arg_length, length);",
          "3486:             arg_length = amqp_0_10_get_32bit_size(tvb, offset);",
          "3487:             AMQP_INCREMENT(offset, 4, length);",
          "",
          "[Added Lines]",
          "2860:     offset += 2;",
          "2867:             arg_length = amqp_0_10_get_32bit_size_new(args_tree, pinfo, tvb, hf_amqp_method_connection_start_server_properties_size, offset);",
          "2868:             offset += 4;",
          "2874:             if (arg_length > (guint32)tvb_reported_length_remaining(tvb, offset))",
          "2875:             {",
          "2876:                 next_tvb = tvb_new_subset_remaining(tvb, offset);",
          "2877:             }",
          "2878:             else",
          "2879:             {",
          "2880:                 next_tvb = tvb_new_subset_length(tvb, offset, arg_length);",
          "2881:             }",
          "2882:             dissect_amqp_0_10_map (next_tvb, ti);",
          "2883:             offset += arg_length;",
          "2887:             arg_length = amqp_0_10_get_32bit_size_new(args_tree, pinfo, tvb, hf_amqp_0_10_method_connection_start_mechanisms_size, offset);",
          "2888:             offset += 4;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "3493:             dissect_amqp_0_10_array (tvb,",
          "3494:                                      pinfo,",
          "3495:                                      offset,",
          "3498:                                      ti);",
          "3500:         }",
          "3501:         if (flag1 & 0x04) {",
          "3505:             ti = proto_tree_add_item(args_tree,",
          "3506:                                      hf_amqp_0_10_method_connection_start_locales,",
          "3507:                                      tvb,",
          "",
          "[Removed Lines]",
          "3496:                                      offset + arg_length,",
          "3497:                                      arg_length,",
          "3499:             AMQP_INCREMENT(offset, arg_length, length);",
          "3503:             arg_length = amqp_0_10_get_32bit_size(tvb, offset);",
          "3504:             AMQP_INCREMENT(offset, 4, length);",
          "",
          "[Added Lines]",
          "2898:             offset += arg_length;",
          "2902:             arg_length = amqp_0_10_get_32bit_size_new(args_tree, pinfo, tvb, hf_amqp_0_10_method_connection_start_locales_size, offset);",
          "2903:             offset += 4;",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "3510:             dissect_amqp_0_10_array (tvb,",
          "3511:                                      pinfo,",
          "3512:                                      offset,",
          "3515:                                      ti);",
          "3517:         }",
          "3518:         break;",
          "",
          "[Removed Lines]",
          "3513:                                      offset + arg_length,",
          "3514:                                      arg_length,",
          "3516:             AMQP_INCREMENT(offset, arg_length, length);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "3522:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "3523:         if (flag1 & 0x01) {",
          "3527:             ti = proto_tree_add_item(args_tree,",
          "3528:                                      hf_amqp_method_connection_start_ok_client_properties,",
          "3529:                                      tvb,",
          "3530:                                      offset,",
          "3531:                                      arg_length, ENC_NA);",
          "3538:         }",
          "3539:         if (flag1 & 0x02) {",
          "3541:             proto_tree_add_item(args_tree,",
          "3542:                                 hf_amqp_method_connection_start_ok_mechanism,",
          "3546:         }",
          "3547:         if (flag1 & 0x04) {",
          "3549:             proto_tree_add_item(args_tree,",
          "3550:                                 hf_amqp_method_connection_start_ok_response,",
          "3554:         }",
          "3555:         if (flag1 & 0x08) {",
          "3557:             proto_tree_add_item(args_tree,",
          "3558:                                 hf_amqp_method_connection_start_ok_locale,",
          "3562:         }",
          "3563:         break;",
          "",
          "[Removed Lines]",
          "3525:             arg_length = amqp_0_10_get_32bit_size(tvb, offset);",
          "3526:             AMQP_INCREMENT(offset, 4, length);",
          "3532:             dissect_amqp_0_10_map (tvb,",
          "3533:                                    offset,",
          "3534:                                    offset + arg_length,",
          "3535:                                    arg_length,",
          "3536:                                    ti);",
          "3537:             AMQP_INCREMENT(offset, arg_length, length);",
          "3543:                                 tvb, offset + 1, tvb_get_guint8(tvb, offset),",
          "3544:                                 ENC_ASCII|ENC_NA);",
          "3545:             AMQP_INCREMENT(offset, 1 + tvb_get_guint8(tvb, offset), length);",
          "3551:                                 tvb, offset + 4, amqp_0_10_get_32bit_size(tvb, offset),",
          "3552:                                 ENC_NA);",
          "3553:             AMQP_INCREMENT(offset, 4 + amqp_0_10_get_32bit_size(tvb, offset), length);",
          "3559:                                 tvb, offset + 1, tvb_get_guint8(tvb, offset),",
          "3560:                                 ENC_ASCII|ENC_NA);",
          "3561:             AMQP_INCREMENT(offset, 1 + tvb_get_guint8(tvb, offset), length);",
          "",
          "[Added Lines]",
          "2922:             arg_length = amqp_0_10_get_32bit_size_new(args_tree, pinfo, tvb, hf_amqp_method_connection_start_ok_client_properties_size, offset);",
          "2923:             offset += 4;",
          "2929:             if (arg_length > (guint32)tvb_reported_length_remaining(tvb, offset))",
          "2930:             {",
          "2931:                 next_tvb = tvb_new_subset_remaining(tvb, offset);",
          "2932:             }",
          "2933:             else",
          "2934:             {",
          "2935:                 next_tvb = tvb_new_subset_length(tvb, offset, arg_length);",
          "2936:             }",
          "2937:             dissect_amqp_0_10_map (next_tvb, ti);",
          "2938:             offset += arg_length;",
          "2944:                                 tvb, offset, 1,",
          "2945:                                 ENC_ASCII|ENC_BIG_ENDIAN);",
          "2946:             offset += (1 + tvb_get_guint8(tvb, offset));",
          "2952:                                 tvb, offset, 4,",
          "2953:                                 ENC_BIG_ENDIAN);",
          "2954:             offset += (4 + tvb_get_ntohl(tvb, offset));",
          "2960:                                 tvb, offset + 1, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "3570:             proto_tree_add_item(args_tree,",
          "3571:                                 hf_amqp_method_connection_secure_challenge,",
          "3575:         }",
          "3576:         break;",
          "",
          "[Removed Lines]",
          "3572:                                 tvb, offset + 4, amqp_0_10_get_32bit_size(tvb, offset),",
          "3573:                                 ENC_NA);",
          "3574:             AMQP_INCREMENT(offset, 4 + amqp_0_10_get_32bit_size(tvb, offset), length);",
          "",
          "[Added Lines]",
          "2972:                                 tvb, offset, 4,",
          "2973:                                 ENC_BIG_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "3583:             proto_tree_add_item(args_tree,",
          "3584:                                 hf_amqp_method_connection_secure_ok_response,",
          "3588:         }",
          "3589:         break;",
          "",
          "[Removed Lines]",
          "3585:                                 tvb, offset + 4, amqp_0_10_get_32bit_size(tvb, offset),",
          "3586:                                 ENC_NA);",
          "3587:             AMQP_INCREMENT(offset, 4 + amqp_0_10_get_32bit_size(tvb, offset), length);",
          "",
          "[Added Lines]",
          "2985:                                 tvb, offset, 4,",
          "2986:                                 ENC_BIG_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "3596:             proto_tree_add_item(args_tree,",
          "3597:                                 hf_amqp_method_connection_tune_channel_max,",
          "3598:                                 tvb, offset, 2, ENC_BIG_ENDIAN);",
          "3600:         }",
          "3601:         if (flag1 & 0x02) {",
          "3603:             proto_tree_add_item(args_tree,",
          "3604:                                 hf_amqp_0_10_method_connection_tune_frame_max,",
          "3605:                                 tvb, offset, 2, ENC_BIG_ENDIAN);",
          "3607:         }",
          "3608:         if (flag1 & 0x04) {",
          "3610:             proto_tree_add_item(args_tree,",
          "3611:                                 hf_amqp_0_10_method_connection_tune_heartbeat_min,",
          "3612:                                 tvb, offset, 2, ENC_BIG_ENDIAN);",
          "3614:         }",
          "3615:         if (flag1 & 0x08) {",
          "3617:             proto_tree_add_item(args_tree,",
          "3618:                                 hf_amqp_0_10_method_connection_tune_heartbeat_max,",
          "3619:                                 tvb, offset, 2, ENC_BIG_ENDIAN);",
          "3621:         }",
          "3622:         break;",
          "",
          "[Removed Lines]",
          "3599:             AMQP_INCREMENT(offset, 2, length);",
          "3606:             AMQP_INCREMENT(offset, 2, length);",
          "3613:             AMQP_INCREMENT(offset, 2, length);",
          "3620:             AMQP_INCREMENT(offset, 2, length);",
          "",
          "[Added Lines]",
          "2999:             offset += 2;",
          "3006:             offset += 2;",
          "3013:             offset += 2;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "3625:         if ((flag1 & ~0x07) || (flag2 != 0))",
          "3626:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "3627:         if (flag1 & 0x01) {",
          "3940:         }",
          "3941:         if (flag1 & 0x02) {",
          "3955:         }",
          "3956:         break;",
          "3960:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "3961:         if (flag1 & 0x01) {",
          "3964:             ti = proto_tree_add_item(args_tree,",
          "3970:         }",
          "3974:         proto_tree_add_item(args_tree,",
          "4005:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "4006:         break;",
          "4009:         if ((flag1 & ~0x01) || (flag2 != 0))",
          "4010:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4011:         if (flag1 & 0x01) {",
          "4014:             ti = proto_tree_add_item(args_tree,",
          "4020:         }",
          "4021:         break;",
          "4087:         if ((flag1 & ~0x03) || (flag2 != 0))",
          "4088:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4089:         if (flag1 & 0x01) {",
          "4091:             proto_tree_add_item(args_tree,",
          "4095:         }",
          "4096:         if (flag1 & 0x02) {",
          "4100:             ti = proto_tree_add_item(args_tree,",
          "4105:         }",
          "4106:         break;",
          "4188:         }",
          "4204:         }",
          "4205:         break;",
          "4206:     }",
          "4207: }",
          "4209: static void",
          "4211:                           packet_info *pinfo,",
          "4214: {",
          "4215:     proto_item  *args_tree;",
          "4216:     proto_item  *ti;",
          "4217:     proto_item  *flags_item;",
          "4219:     guint8       flag1, flag2;",
          "4222:     int          flags_offset;",
          "4223:     const gchar *method_name;",
          "4225:     method = tvb_get_guint8(tvb, offset+1);",
          "4230:     col_set_fence(pinfo->cinfo, COL_INFO);",
          "4233:                         tvb, offset+1, 1, ENC_BIG_ENDIAN);",
          "4249:     ti = proto_tree_add_item(tree, hf_amqp_method_arguments,",
          "4251:     args_tree = proto_item_add_subtree(ti, ett_args);",
          "",
          "[Removed Lines]",
          "3629:             proto_tree_add_item(args_tree,",
          "3630:                                 hf_amqp_method_connection_tune_ok_channel_max,",
          "3631:                                 tvb, offset, 2, ENC_BIG_ENDIAN);",
          "3632:             AMQP_INCREMENT(offset, 2, length);",
          "3633:         }",
          "3634:         if (flag1 & 0x02) {",
          "3636:             proto_tree_add_item(args_tree,",
          "3637:                                 hf_amqp_0_10_method_connection_tune_ok_frame_max,",
          "3638:                                 tvb, offset, 2, ENC_BIG_ENDIAN);",
          "3639:             AMQP_INCREMENT(offset, 2, length);",
          "3640:         }",
          "3641:         if (flag1 & 0x04) {",
          "3643:             proto_tree_add_item(args_tree,",
          "3644:                                 hf_amqp_method_connection_tune_ok_heartbeat,",
          "3645:                                 tvb, offset, 2, ENC_BIG_ENDIAN);",
          "3646:             AMQP_INCREMENT(offset, 2, length);",
          "3647:         }",
          "3648:         break;",
          "3650:     case AMQP_0_10_METHOD_CONNECTION_OPEN:",
          "3651:         if ((flag1 & ~0x07) || (flag2 != 0))",
          "3652:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "3653:         if (flag1 & 0x01) {",
          "3655:             proto_tree_add_item(args_tree,",
          "3656:                                      hf_amqp_method_connection_open_virtual_host,",
          "3657:                                      tvb,",
          "3658:                                      offset + 1,",
          "3659:                                      tvb_get_guint8(tvb, offset), ENC_ASCII|ENC_NA);",
          "3660:             AMQP_INCREMENT(offset, tvb_get_guint8(tvb, offset) + 1, length);",
          "3661:         }",
          "3662:         if (flag1 & 0x02) {",
          "3664:             arg_length = amqp_0_10_get_32bit_size(tvb, offset);",
          "3665:             AMQP_INCREMENT(offset, 4, length);",
          "3666:             ti = proto_tree_add_item(args_tree,",
          "3667:                                      hf_amqp_0_10_method_connection_open_capabilities,",
          "3668:                                      tvb,",
          "3669:                                      offset,",
          "3670:                                      arg_length, ENC_ASCII|ENC_NA);",
          "3671:             dissect_amqp_0_10_array (tvb,",
          "3672:                                      pinfo,",
          "3673:                                      offset,",
          "3674:                                      offset + arg_length,",
          "3675:                                      arg_length,",
          "3676:                                      ti);",
          "3677:             AMQP_INCREMENT(offset, arg_length, length);",
          "3678:         }",
          "3682:         proto_tree_add_item(args_tree,",
          "3683:                             hf_amqp_0_10_method_connection_open_insist,",
          "3684:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "3685:         break;",
          "3687:     case AMQP_0_10_METHOD_CONNECTION_OPEN_OK:",
          "3688:         if ((flag1 & ~0x01) || (flag2 != 0))",
          "3689:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "3690:         if (flag1 & 0x01) {",
          "3692:             arg_length = amqp_0_10_get_32bit_size(tvb, offset);",
          "3693:             AMQP_INCREMENT(offset, 4, length);",
          "3694:             ti = proto_tree_add_item(args_tree,",
          "3695:                                      hf_amqp_0_10_method_connection_open_ok_known_hosts,",
          "3696:                                      tvb,",
          "3697:                                      offset,",
          "3698:                                      arg_length, ENC_NA);",
          "3699:             dissect_amqp_0_10_array (tvb,",
          "3700:                                      pinfo,",
          "3701:                                      offset,",
          "3702:                                      offset + arg_length,",
          "3703:                                      arg_length,",
          "3704:                                      ti);",
          "3705:             AMQP_INCREMENT(offset, arg_length, length);",
          "3706:         }",
          "3707:         break;",
          "3709:     case AMQP_0_10_METHOD_CONNECTION_REDIRECT:",
          "3710:         if ((flag1 & ~0x03) || (flag2 != 0))",
          "3711:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "3712:         if (flag1 & 0x01) {",
          "3714:             proto_tree_add_item(args_tree,",
          "3715:                                 hf_amqp_method_connection_redirect_host,",
          "3716:                                 tvb, offset + 2, tvb_get_ntohs(tvb, offset),",
          "3717:                                 ENC_ASCII|ENC_NA);",
          "3718:             AMQP_INCREMENT(offset, 2 + tvb_get_ntohs(tvb, offset), length);",
          "3719:         }",
          "3720:         if (flag1 & 0x02) {",
          "3722:             arg_length = amqp_0_10_get_32bit_size(tvb, offset);",
          "3723:             AMQP_INCREMENT(offset, 4, length);",
          "3724:             ti = proto_tree_add_item(args_tree,",
          "3725:                                      hf_amqp_0_10_method_connection_redirect_known_hosts,",
          "3726:                                      tvb,",
          "3727:                                      offset,",
          "3728:                                      arg_length, ENC_NA);",
          "3729:             dissect_amqp_0_10_array (tvb,",
          "3730:                                      pinfo,",
          "3731:                                      offset,",
          "3732:                                      offset + arg_length,",
          "3733:                                      arg_length,",
          "3734:                                      ti);",
          "3735:             AMQP_INCREMENT(offset, arg_length, length);",
          "3736:         }",
          "3737:         break;",
          "3739:     case AMQP_0_10_METHOD_CONNECTION_HEARTBEAT:",
          "3740:         break;",
          "3742:     case AMQP_0_10_METHOD_CONNECTION_CLOSE:",
          "3743:         if ((flag1 & ~0x03) || (flag2 != 0))",
          "3744:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "3745:         if (flag1 & 0x01) {",
          "3747:             proto_tree_add_item(args_tree,",
          "3748:                                 hf_amqp_0_10_method_connection_close_reply_code,",
          "3749:                                 tvb, offset, 2, ENC_BIG_ENDIAN);",
          "3750:             AMQP_INCREMENT(offset, 2, length);",
          "3751:         }",
          "3752:         if (flag1 & 0x02) {",
          "3754:             proto_tree_add_item(args_tree,",
          "3755:                                 hf_amqp_method_connection_close_reply_text,",
          "3756:                                 tvb, offset + 1, tvb_get_guint8(tvb, offset),",
          "3757:                                 ENC_ASCII|ENC_NA);",
          "3758:             AMQP_INCREMENT(offset, 1 + tvb_get_guint8(tvb, offset), length);",
          "3759:         }",
          "3760:         break;",
          "3762:     case AMQP_0_10_METHOD_CONNECTION_CLOSE_OK:",
          "3763:         break;",
          "3764:     }",
          "3765: }",
          "3767: static void",
          "3768: dissect_amqp_0_10_session(tvbuff_t *tvb,",
          "3769:                           packet_info *pinfo,",
          "3770:                           proto_tree *tree,",
          "3771:                           int offset, guint16 length)",
          "3772: {",
          "3773:     proto_item  *args_tree;",
          "3774:     proto_item  *ti;",
          "3775:     proto_item  *flags_item;",
          "3776:     guint8       method;",
          "3777:     guint8       flag1, flag2;",
          "3778:     guint16      size;",
          "3779:     guint32      array_size;",
          "3780:     int          flags_offset;",
          "3781:     const gchar *method_name;",
          "3783:     method = tvb_get_guint8(tvb, offset+1);",
          "3784:     method_name = val_to_str_const(method, amqp_0_10_session_methods,",
          "3785:                                    \"<invalid session method>\");",
          "3786:     col_append_str(pinfo->cinfo, COL_INFO, method_name);",
          "3787:     col_append_str(pinfo->cinfo, COL_INFO, \" \");",
          "3788:     col_set_fence(pinfo->cinfo, COL_INFO);",
          "3790:     proto_tree_add_item(tree, hf_amqp_0_10_session_method,",
          "3791:                         tvb, offset+1, 1, ENC_BIG_ENDIAN);",
          "3792:     AMQP_INCREMENT(offset, 2, length);",
          "3794:     ti = proto_tree_add_item(tree, hf_amqp_method_arguments,",
          "3795:                              tvb, offset, length - 2, ENC_NA);",
          "3796:     args_tree = proto_item_add_subtree(ti, ett_args);",
          "3802:     flags_offset = offset;",
          "3803:     flag1 = tvb_get_guint8(tvb, offset);",
          "3804:     flag2 = tvb_get_guint8(tvb, offset+1);",
          "3805:     flags_item = proto_tree_add_item(args_tree,",
          "3806:                                      hf_amqp_0_10_argument_packing_flags,",
          "3807:                                      tvb, offset, 2, ENC_BIG_ENDIAN);",
          "3808:     AMQP_INCREMENT(offset, 2, length);",
          "3809:     switch (method) {",
          "3810:     case AMQP_0_10_METHOD_SESSION_ATTACH:",
          "3811:         if ((flag1 & ~0x03) || ((flag2 != 0)))",
          "3812:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "3813:         if (flag1 & 0x01) {",
          "3815:             size = tvb_get_ntohs(tvb, offset);",
          "3816:             AMQP_INCREMENT(offset, 2, length);",
          "3817:             proto_tree_add_item(args_tree,",
          "3818:                                 hf_amqp_0_10_method_session_attach_name,",
          "3819:                                 tvb, offset, size, ENC_NA);",
          "3820:             AMQP_INCREMENT(offset, size, length);",
          "3821:         }",
          "3825:         proto_tree_add_item(args_tree,",
          "3826:                             hf_amqp_0_10_method_session_attach_force,",
          "3827:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "3828:         break;",
          "3830:     case AMQP_0_10_METHOD_SESSION_ATTACHED:",
          "3831:     case AMQP_0_10_METHOD_SESSION_DETACH:",
          "3832:         if ((flag1 != 0x01) || (flag2 != 0))",
          "3833:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "3834:         if (flag1 & 0x01) {",
          "3836:             size = tvb_get_ntohs(tvb, offset);",
          "3837:             AMQP_INCREMENT(offset, 2, length);",
          "3838:             proto_tree_add_item(args_tree,",
          "3839:                                 hf_amqp_0_10_method_session_attach_name,",
          "3840:                                 tvb, offset, size, ENC_NA);",
          "3841:             AMQP_INCREMENT(offset, size, length);",
          "3842:         }",
          "3843:         break;",
          "3845:     case AMQP_0_10_METHOD_SESSION_DETACHED:",
          "3846:         if ((flag1 & ~0x03) || (flag2 != 0))",
          "3847:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "3848:         if (flag1 & 0x01) {",
          "3850:             size = tvb_get_ntohs(tvb, offset);",
          "3851:             AMQP_INCREMENT(offset, 2, length);",
          "3852:             proto_tree_add_item(args_tree,",
          "3853:                                 hf_amqp_0_10_method_session_attach_name,",
          "3854:                                 tvb, offset, size, ENC_NA);",
          "3855:             AMQP_INCREMENT(offset, size, length);",
          "3856:         }",
          "3857:         if (flag1 & 0x02) {",
          "3859:             proto_tree_add_item(args_tree,",
          "3860:                                 hf_amqp_0_10_method_session_detached_code,",
          "3861:                                 tvb, offset, 1, ENC_BIG_ENDIAN);",
          "3862:             AMQP_INCREMENT(offset, 1, length);",
          "3863:         }",
          "3864:         break;",
          "3866:     case AMQP_0_10_METHOD_SESSION_REQUEST_TIMEOUT:",
          "3867:     case AMQP_0_10_METHOD_SESSION_TIMEOUT:",
          "3868:         if ((flag1 & ~0x01) || (flag2 != 0))",
          "3869:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "3870:         if (flag1 & 0x01) {",
          "3872:             proto_tree_add_item(args_tree,",
          "3873:                                 hf_amqp_0_10_method_session_timeout,",
          "3874:                                 tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3875:             AMQP_INCREMENT(offset, 4, length);",
          "3876:         }",
          "3877:         break;",
          "3879:     case AMQP_0_10_METHOD_SESSION_COMMAND_POINT:",
          "3880:         if ((flag1 & ~0x03) || (flag2 != 0))",
          "3881:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "3882:         if (flag1 & 0x01) {",
          "3884:             proto_tree_add_item(args_tree,",
          "3885:                                 hf_amqp_0_10_method_session_command_point_id,",
          "3886:                                 tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3887:             AMQP_INCREMENT(offset, 4, length);",
          "3888:         }",
          "3889:         if (flag1 & 0x02) {",
          "3891:             proto_tree_add_item(args_tree,",
          "3892:                                 hf_amqp_0_10_method_session_command_point_offset,",
          "3893:                                 tvb, offset, 8, ENC_BIG_ENDIAN);",
          "3894:             AMQP_INCREMENT(offset, 8, length);",
          "3895:         }",
          "3896:         break;",
          "3898:     case AMQP_0_10_METHOD_SESSION_EXPECTED:",
          "3899:         if ((flag1 & ~0x03) || (flag2 != 0))",
          "3900:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "3901:         if (flag1 & 0x01) {",
          "3903:             size = tvb_get_ntohs(tvb, offset);",
          "3904:             ti = proto_tree_add_item(args_tree,",
          "3905:                                      hf_amqp_0_10_method_session_commands,",
          "3906:                                      tvb, offset, size + 2, ENC_NA);",
          "3907:             AMQP_INCREMENT(offset, 2, length);",
          "3908:             format_amqp_0_10_sequence_set(tvb, offset, size, ti);",
          "3909:             AMQP_INCREMENT(offset, size, length);",
          "3910:         }",
          "3911:         if (flag1 & 0x02) {",
          "3913:             array_size = amqp_0_10_get_32bit_size(tvb, offset);",
          "3914:             ti = proto_tree_add_item(args_tree,",
          "3915:                                      hf_amqp_0_10_method_session_fragments,",
          "3916:                                      tvb, offset, array_size + 4, ENC_NA);",
          "3917:             AMQP_INCREMENT(offset, 4, length);",
          "3918:             dissect_amqp_0_10_array(tvb,",
          "3919:                                     pinfo,",
          "3920:                                     offset,",
          "3921:                                     offset + array_size,",
          "3922:                                     length,",
          "3923:                                     ti);",
          "3924:             AMQP_INCREMENT(offset, array_size, length);",
          "3925:         }",
          "3926:         break;",
          "3928:     case AMQP_0_10_METHOD_SESSION_CONFIRMED:",
          "3929:         if ((flag1 & ~0x03) || (flag2 != 0))",
          "3930:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "3931:         if (flag1 & 0x01) {",
          "3933:             size = tvb_get_ntohs(tvb, offset);",
          "3934:             ti = proto_tree_add_item(args_tree,",
          "3935:                                      hf_amqp_0_10_method_session_commands,",
          "3936:                                      tvb, offset, size + 2, ENC_NA);",
          "3937:             AMQP_INCREMENT(offset, 2, length);",
          "3938:             format_amqp_0_10_sequence_set(tvb, offset, size, ti);",
          "3939:             AMQP_INCREMENT(offset, size, length);",
          "3943:             array_size = amqp_0_10_get_32bit_size(tvb, offset);",
          "3944:             ti = proto_tree_add_item(args_tree,",
          "3945:                                      hf_amqp_0_10_method_session_fragments,",
          "3946:                                      tvb, offset, array_size + 4, ENC_NA);",
          "3947:             AMQP_INCREMENT(offset, 4, length);",
          "3948:             dissect_amqp_0_10_array(tvb,",
          "3949:                                     pinfo,",
          "3950:                                     offset,",
          "3951:                                     offset + array_size,",
          "3952:                                     length,",
          "3953:                                     ti);",
          "3954:             AMQP_INCREMENT(offset, array_size, length);",
          "3958:     case AMQP_0_10_METHOD_SESSION_COMPLETED:",
          "3959:         if ((flag1 & ~0x03) || (flag2 != 0))",
          "3963:             size = tvb_get_ntohs(tvb, offset);",
          "3965:                                      hf_amqp_0_10_method_session_commands,",
          "3966:                                      tvb, offset, size + 2, ENC_NA);",
          "3967:             AMQP_INCREMENT(offset, 2, length);",
          "3968:             format_amqp_0_10_sequence_set(tvb, offset, size, ti);",
          "3969:             AMQP_INCREMENT(offset, size, length);",
          "3975:                             hf_amqp_0_10_method_session_completed_timely,",
          "3976:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "3977:         break;",
          "3979:     case AMQP_0_10_METHOD_SESSION_KNOWN_COMPLETED:",
          "3980:         if ((flag1 & ~0x01) || (flag2 != 0))",
          "3981:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "3982:         if (flag1 & 0x01) {",
          "3984:             size = tvb_get_ntohs(tvb, offset);",
          "3985:             ti = proto_tree_add_item(args_tree,",
          "3986:                                      hf_amqp_0_10_method_session_commands,",
          "3987:                                      tvb, offset, size + 2, ENC_NA);",
          "3988:             AMQP_INCREMENT(offset, 2, length);",
          "3989:             format_amqp_0_10_sequence_set(tvb, offset, size, ti);",
          "3990:             AMQP_INCREMENT(offset, size, length);",
          "3991:         }",
          "3992:         break;",
          "3994:     case AMQP_0_10_METHOD_SESSION_FLUSH:",
          "3995:         if ((flag1 & ~0x07) || (flag2 != 0))",
          "3996:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "3997:         proto_tree_add_item(args_tree,",
          "3998:                             hf_amqp_0_10_method_session_flush_expected,",
          "3999:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "4000:         proto_tree_add_item(args_tree,",
          "4001:                             hf_amqp_0_10_method_session_flush_confirmed,",
          "4002:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "4003:         proto_tree_add_item(args_tree,",
          "4004:                             hf_amqp_0_10_method_session_flush_completed,",
          "4008:     case AMQP_0_10_METHOD_SESSION_GAP:",
          "4013:             size = tvb_get_ntohs(tvb, offset);",
          "4015:                                      hf_amqp_0_10_method_session_commands,",
          "4016:                                      tvb, offset, size + 2, ENC_NA);",
          "4017:             AMQP_INCREMENT(offset, 2, length);",
          "4018:             format_amqp_0_10_sequence_set(tvb, offset, size, ti);",
          "4019:             AMQP_INCREMENT(offset, size, length);",
          "4023:     }",
          "4024: }",
          "4026: static void",
          "4027: dissect_amqp_0_10_execution(tvbuff_t *tvb,",
          "4028:                             packet_info *pinfo,",
          "4029:                             proto_tree *tree,",
          "4030:                             int offset, guint16 length)",
          "4031: {",
          "4032:     proto_item  *args_tree;",
          "4033:     proto_item  *ti;",
          "4034:     proto_item  *flags_item;",
          "4035:     guint8       amqp_class = 0, method;",
          "4036:     guint8       flag1, flag2;",
          "4037:     guint16      size;",
          "4038:     guint32      struct_size;",
          "4039:     int          class_hf;",
          "4040:     const gchar *method_name;",
          "4042:     method = tvb_get_guint8(tvb, offset+1);",
          "4043:     method_name = val_to_str_const(method, amqp_0_10_execution_methods,",
          "4044:                                    \"<invalid execution method>\");",
          "4045:     col_append_str(pinfo->cinfo, COL_INFO, method_name);",
          "4046:     col_append_str(pinfo->cinfo, COL_INFO, \" \");",
          "4047:     col_set_fence(pinfo->cinfo, COL_INFO);",
          "4049:     proto_tree_add_item(tree, hf_amqp_0_10_execution_method,",
          "4050:                         tvb, offset+1, 1, ENC_BIG_ENDIAN);",
          "4051:     AMQP_INCREMENT(offset, 2, length);",
          "4056:     flag1 = tvb_get_guint8(tvb, offset);",
          "4057:     flag2 = tvb_get_guint8(tvb, offset+1);",
          "4058:     ti = proto_tree_add_item(tree, hf_amqp_0_10_session_header, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "4059:     if ((flag1 != 1) || ((flag2 & 0xfe) != 0))",
          "4060:         proto_item_append_text(ti, \" (Invalid)\");",
          "4061:     else",
          "4062:         proto_tree_add_item(tree, hf_amqp_0_10_session_header_sync,",
          "4063:                             tvb, offset + 1, 1, ENC_BIG_ENDIAN);",
          "4064:     AMQP_INCREMENT(offset, 2, length);",
          "4066:     ti = proto_tree_add_item(tree, hf_amqp_method_arguments,",
          "4067:                              tvb, offset, length - 4, ENC_NA);",
          "4068:     args_tree = proto_item_add_subtree(ti, ett_args);",
          "4074:     flag1 = tvb_get_guint8(tvb, offset);",
          "4075:     flag2 = tvb_get_guint8(tvb, offset+1);",
          "4076:     flags_item = proto_tree_add_item(args_tree,",
          "4077:                                      hf_amqp_0_10_argument_packing_flags,",
          "4078:                                      tvb, offset, 2, ENC_BIG_ENDIAN);",
          "4079:     AMQP_INCREMENT(offset, 2, length);",
          "4080:     switch (method) {",
          "4081:     case AMQP_0_10_METHOD_EXECUTION_SYNC:",
          "4082:         if ((flag1 != 0) || (flag2 != 0))",
          "4083:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4084:         break;",
          "4086:     case AMQP_0_10_METHOD_EXECUTION_RESULT:",
          "4092:                                 hf_amqp_0_10_method_execution_command_id,",
          "4093:                                 tvb, offset, 4, ENC_BIG_ENDIAN);",
          "4094:             AMQP_INCREMENT(offset, 4, length);",
          "4098:             struct_size = amqp_0_10_get_32bit_size(tvb, offset);",
          "4099:             AMQP_INCREMENT(offset, 4, length);",
          "4101:                                      hf_amqp_0_10_undissected_struct32,",
          "4102:                                      tvb, offset, struct_size, ENC_NA);",
          "4103:             dissect_amqp_0_10_struct32(tvb, pinfo, ti, offset, struct_size);",
          "4104:             AMQP_INCREMENT(offset, struct_size, length);",
          "4108:     case AMQP_0_10_METHOD_EXECUTION_EXCEPTION:",
          "4109:         if ((flag1 & ~0x7f) || (flag2 != 0))",
          "4110:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4111:         if (flag1 & 0x01) {",
          "4113:             proto_tree_add_item(args_tree,",
          "4114:                                 hf_amqp_0_10_method_execution_exception_error,",
          "4115:                                 tvb, offset, 2, ENC_BIG_ENDIAN);",
          "4116:             AMQP_INCREMENT(offset, 2, length);",
          "4117:         }",
          "4118:         if (flag1 & 0x02) {",
          "4120:             proto_tree_add_item(args_tree,",
          "4121:                                 hf_amqp_0_10_method_execution_command_id,",
          "4122:                                 tvb, offset, 4, ENC_BIG_ENDIAN);",
          "4123:             AMQP_INCREMENT(offset, 4, length);",
          "4124:         }",
          "4125:         if (flag1 & 0x04) {",
          "4127:             amqp_class = tvb_get_guint8(tvb, offset);",
          "4128:             proto_tree_add_item(args_tree, hf_amqp_0_10_class,",
          "4129:                                 tvb, offset, 1, ENC_BIG_ENDIAN);",
          "4130:             AMQP_INCREMENT(offset, 1, length);",
          "4131:         }",
          "4132:         if (flag1 & 0x08) {",
          "4134:             switch(amqp_class) {",
          "4135:             case AMQP_0_10_CLASS_CONNECTION:",
          "4136:                 class_hf = hf_amqp_0_10_connection_method;",
          "4137:                 break;",
          "4138:             case AMQP_0_10_CLASS_SESSION:",
          "4139:                 class_hf = hf_amqp_0_10_session_method;",
          "4140:                 break;",
          "4141:             case AMQP_0_10_CLASS_EXECUTION:",
          "4142:                 class_hf = hf_amqp_0_10_execution_method;",
          "4143:                 break;",
          "4144:             case AMQP_0_10_CLASS_MESSAGE:",
          "4145:                 class_hf = hf_amqp_0_10_message_method;",
          "4146:                 break;",
          "4147:             case AMQP_0_10_CLASS_TX:",
          "4148:                 class_hf = hf_amqp_0_10_tx_method;",
          "4149:                 break;",
          "4150:             case AMQP_0_10_CLASS_DTX:",
          "4151:                 class_hf = hf_amqp_0_10_dtx_method;",
          "4152:                 break;",
          "4153:             case AMQP_0_10_CLASS_EXCHANGE:",
          "4154:                 class_hf = hf_amqp_0_10_exchange_method;",
          "4155:                 break;",
          "4156:             case AMQP_0_10_CLASS_QUEUE:",
          "4157:                 class_hf = hf_amqp_0_10_queue_method;",
          "4158:                 break;",
          "4159:             case AMQP_0_10_CLASS_FILE:",
          "4160:                 class_hf = hf_amqp_0_10_file_method;",
          "4161:                 break;",
          "4162:             case AMQP_0_10_CLASS_STREAM:",
          "4163:                 class_hf = hf_amqp_0_10_stream_method;",
          "4164:                 break;",
          "4165:             default:",
          "4166:                 class_hf = -1;",
          "4167:                 break;",
          "4168:             }",
          "4169:             if (class_hf != -1)",
          "4170:                 proto_tree_add_item(args_tree, class_hf,",
          "4171:                                     tvb, offset, 1, ENC_BIG_ENDIAN);",
          "4172:             else",
          "4173:                 expert_add_info_format(pinfo, args_tree, &ei_amqp_invalid_class_code, \"Invalid class code %x\", amqp_class);",
          "4174:             AMQP_INCREMENT(offset, 1, length);",
          "4175:         }",
          "4176:         if (flag1 & 0x10) {",
          "4178:             proto_tree_add_item(args_tree, hf_amqp_0_10_method_execution_field_index,",
          "4179:                                 tvb, offset, 1, ENC_BIG_ENDIAN);",
          "4180:             AMQP_INCREMENT(offset, 1, length);",
          "4181:         }",
          "4182:         if (flag1 & 0x20) {",
          "4184:             size = tvb_get_ntohs(tvb, offset);",
          "4185:             proto_tree_add_item(args_tree, hf_amqp_0_10_method_execution_description,",
          "4186:                                 tvb, offset + 2, size, ENC_ASCII|ENC_NA);",
          "4187:             AMQP_INCREMENT(offset, (2 + size), length);",
          "4189:         if (flag1 & 0x40) {",
          "4191:             struct_size = amqp_0_10_get_32bit_size(tvb, offset);",
          "4192:             AMQP_INCREMENT(offset, 4, length);",
          "4193:             ti = proto_tree_add_item(args_tree,",
          "4194:                                      hf_amqp_0_10_method_execution_error_info,",
          "4195:                                      tvb,",
          "4196:                                      offset,",
          "4197:                                      struct_size, ENC_NA);",
          "4198:             dissect_amqp_0_10_map (tvb,",
          "4199:                                    offset,",
          "4200:                                    offset + struct_size,",
          "4201:                                    struct_size,",
          "4202:                                    ti);",
          "4203:             AMQP_INCREMENT(offset, struct_size, length);",
          "4210: dissect_amqp_0_10_message(tvbuff_t *tvb,",
          "4212:                           proto_tree *tree,",
          "4213:                           int offset, guint16 length)",
          "4218:     guint8       method, str_size;",
          "4220:     guint16      size;",
          "4221:     guint32      map_size;",
          "4226:     method_name = val_to_str_const(method, amqp_0_10_message_methods,",
          "4227:                                    \"<invalid message method>\");",
          "4228:     col_append_str(pinfo->cinfo, COL_INFO, method_name);",
          "4229:     col_append_str(pinfo->cinfo, COL_INFO, \" \");",
          "4232:     proto_tree_add_item(tree, hf_amqp_0_10_message_method,",
          "4234:     AMQP_INCREMENT(offset, 2, length);",
          "4239:     flag1 = tvb_get_guint8(tvb, offset);",
          "4240:     flag2 = tvb_get_guint8(tvb, offset+1);",
          "4241:     ti = proto_tree_add_item(tree, hf_amqp_0_10_session_header, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "4242:     if ((flag1 != 1) || ((flag2 & 0xfe) != 0))",
          "4243:         proto_item_append_text(ti, \" (Invalid)\");",
          "4244:     else",
          "4245:         proto_tree_add_item(tree, hf_amqp_0_10_session_header_sync,",
          "4246:                             tvb, offset + 1, 1, ENC_BIG_ENDIAN);",
          "4247:     AMQP_INCREMENT(offset, 2, length);",
          "4250:                              tvb, offset, length - 4, ENC_NA);",
          "",
          "[Added Lines]",
          "3029:             proto_tree_add_item(args_tree,",
          "3030:                                 hf_amqp_method_connection_tune_ok_channel_max,",
          "3031:                                 tvb, offset, 2, ENC_BIG_ENDIAN);",
          "3032:             offset += 2;",
          "3036:             proto_tree_add_item(args_tree,",
          "3037:                                 hf_amqp_0_10_method_connection_tune_ok_frame_max,",
          "3038:                                 tvb, offset, 2, ENC_BIG_ENDIAN);",
          "3039:             offset += 2;",
          "3040:         }",
          "3041:         if (flag1 & 0x04) {",
          "3043:             proto_tree_add_item(args_tree,",
          "3044:                                 hf_amqp_method_connection_tune_ok_heartbeat,",
          "3045:                                 tvb, offset, 2, ENC_BIG_ENDIAN);",
          "3050:     case AMQP_0_10_METHOD_CONNECTION_OPEN:",
          "3051:         if ((flag1 & ~0x07) || (flag2 != 0))",
          "3055:             proto_tree_add_item(args_tree,",
          "3056:                                      hf_amqp_method_connection_open_virtual_host,",
          "3057:                                      tvb,",
          "3058:                                      offset,",
          "3059:                                      1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "3060:             offset += (1 + tvb_get_guint8(tvb, offset));",
          "3061:         }",
          "3062:         if (flag1 & 0x02) {",
          "3064:             arg_length = amqp_0_10_get_32bit_size_new(args_tree, pinfo, tvb, hf_amqp_0_10_method_connection_open_capabilities_size, offset);",
          "3065:             offset += 4;",
          "3067:                                      hf_amqp_0_10_method_connection_open_capabilities,",
          "3068:                                      tvb,",
          "3069:                                      offset,",
          "3070:                                      arg_length, ENC_ASCII|ENC_NA);",
          "3071:             dissect_amqp_0_10_array (tvb,",
          "3072:                                      pinfo,",
          "3073:                                      offset,",
          "3074:                                      ti);",
          "3081:                             hf_amqp_0_10_method_connection_open_insist,",
          "3085:     case AMQP_0_10_METHOD_CONNECTION_OPEN_OK:",
          "3090:             arg_length = amqp_0_10_get_32bit_size_new(args_tree, pinfo, tvb, hf_amqp_0_10_method_connection_open_ok_known_hosts_size, offset);",
          "3091:             offset += 4;",
          "3093:                                      hf_amqp_0_10_method_connection_open_ok_known_hosts,",
          "3094:                                      tvb,",
          "3095:                                      offset,",
          "3096:                                      arg_length, ENC_NA);",
          "3097:             dissect_amqp_0_10_array (tvb,",
          "3098:                                      pinfo,",
          "3099:                                      offset,",
          "3100:                                      ti);",
          "3105:     case AMQP_0_10_METHOD_CONNECTION_REDIRECT:",
          "3111:                                 hf_amqp_method_connection_redirect_host,",
          "3112:                                 tvb, offset, 2,",
          "3113:                                 ENC_ASCII|ENC_BIG_ENDIAN);",
          "3114:             offset += (2 + tvb_get_ntohs(tvb, offset));",
          "3118:             arg_length = amqp_0_10_get_32bit_size_new(args_tree, pinfo, tvb, hf_amqp_0_10_method_connection_redirect_known_hosts_size, offset);",
          "3119:             offset += 4;",
          "3121:                                      hf_amqp_0_10_method_connection_redirect_known_hosts,",
          "3122:                                      tvb,",
          "3123:                                      offset,",
          "3124:                                      arg_length, ENC_NA);",
          "3125:             dissect_amqp_0_10_array (tvb,",
          "3126:                                      pinfo,",
          "3127:                                      offset,",
          "3128:                                      ti);",
          "3133:     case AMQP_0_10_METHOD_CONNECTION_HEARTBEAT:",
          "3134:         break;",
          "3136:     case AMQP_0_10_METHOD_CONNECTION_CLOSE:",
          "3137:         if ((flag1 & ~0x03) || (flag2 != 0))",
          "3138:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "3139:         if (flag1 & 0x01) {",
          "3141:             proto_tree_add_item(args_tree,",
          "3142:                                 hf_amqp_0_10_method_connection_close_reply_code,",
          "3143:                                 tvb, offset, 2, ENC_BIG_ENDIAN);",
          "3144:             offset += 2;",
          "3146:         if (flag1 & 0x02) {",
          "3148:             proto_tree_add_item(args_tree,",
          "3149:                                 hf_amqp_method_connection_close_reply_text,",
          "3150:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "3155:     case AMQP_0_10_METHOD_CONNECTION_CLOSE_OK:",
          "3156:         break;",
          "3161: dissect_amqp_0_10_session(tvbuff_t *tvb,",
          "3163:                           proto_tree *tree)",
          "3168:     guint8       method;",
          "3170:     guint32      size;",
          "3171:     guint32      array_size;",
          "3174:     int offset = 0;",
          "3177:     method_name = val_to_str_const(method, amqp_0_10_session_methods,",
          "3178:                                    \"<invalid session method>\");",
          "3179:     col_append_fstr(pinfo->cinfo, COL_INFO, \"%s \", method_name);",
          "3182:     proto_tree_add_item(tree, hf_amqp_0_10_session_method,",
          "3184:     offset += 2;",
          "3187:                              tvb, offset, -1, ENC_NA);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "4260:     flags_item = proto_tree_add_item(args_tree,",
          "4261:                                      hf_amqp_0_10_argument_packing_flags,",
          "4262:                                      tvb, offset, 2, ENC_BIG_ENDIAN);",
          "4264:     switch (method) {",
          "4291:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4292:         if (flag1 & 0x01) {",
          "4301:         }",
          "4302:         break;",
          "4306:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4307:         if (flag1 & 0x01) {",
          "4325:             proto_tree_add_item(args_tree,",
          "4329:         }",
          "4330:         break;",
          "4333:         if ((flag1 & ~0x03) || (flag2 != 0))",
          "4334:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4335:         if (flag1 & 0x01) {",
          "4338:             proto_tree_add_item(args_tree,",
          "4344:         }",
          "4351:         break;",
          "4354:         if ((flag1 & ~0x01) || (flag2 != 0))",
          "4355:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4356:         if (flag1 & 0x01) {",
          "4359:             proto_tree_add_item(args_tree,",
          "4365:         }",
          "4366:         break;",
          "4369:         if ((flag1 & ~0x03) || (flag2 != 0))",
          "4370:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4371:         if (flag1 & 0x01) {",
          "4374:             proto_tree_add_item(args_tree,",
          "4378:         }",
          "4379:         if (flag1 & 0x02) {",
          "4382:             proto_tree_add_item(args_tree,",
          "4386:         }",
          "4387:         break;",
          "4391:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4392:         if (flag1 & 0x01) {",
          "4428:             size = tvb_get_ntohs(tvb, offset);",
          "4444:             ti = proto_tree_add_item(args_tree,",
          "4455:         }",
          "4468:         }",
          "4469:         break;",
          "4472:         if ((flag1 & ~0x03) || (flag2 != 0))",
          "4473:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4474:         if (flag1 & 0x01) {",
          "4481:         }",
          "4482:         if (flag1 & 0x02) {",
          "4488:         }",
          "4489:         break;",
          "4493:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4494:         if (flag1 & 0x01) {",
          "4515:         }",
          "4516:         break;",
          "4519:         if ((flag1 & ~0x01) || (flag2 != 0))",
          "4520:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4521:         if (flag1 & 0x01) {",
          "4528:         }",
          "4529:         break;",
          "4532:         if ((flag1 & ~0x01) || (flag2 != 0))",
          "4533:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4534:         if (flag1 & 0x01) {",
          "4541:         }",
          "4542:         break;",
          "4582: }",
          "4584: static void",
          "4589: {",
          "4590:     proto_item  *args_tree;",
          "4591:     proto_item  *ti;",
          "4592:     proto_item  *flags_item;",
          "4594:     guint8       flag1, flag2;",
          "4597:     const gchar *method_name;",
          "4599:     method = tvb_get_guint8(tvb, offset+1);",
          "4604:     col_set_fence(pinfo->cinfo, COL_INFO);",
          "4607:                         tvb, offset+1, 1, ENC_BIG_ENDIAN);",
          "",
          "[Removed Lines]",
          "4263:     AMQP_INCREMENT(offset, 2, length);",
          "4265:     case AMQP_0_10_METHOD_MESSAGE_TRANSFER:",
          "4266:         if ((flag1 & ~0x07) || (flag2 != 0))",
          "4267:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4269:             str_size = tvb_get_guint8(tvb, offset);",
          "4270:             proto_tree_add_item(args_tree,",
          "4271:                                 hf_amqp_0_10_method_message_transfer_destination,",
          "4272:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "4273:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "4274:         }",
          "4276:             proto_tree_add_item(args_tree,",
          "4277:                                 hf_amqp_0_10_method_message_transfer_accept_mode,",
          "4278:                                 tvb, offset, 1, ENC_BIG_ENDIAN);",
          "4279:             AMQP_INCREMENT(offset, 1, length);",
          "4280:         }",
          "4282:             proto_tree_add_item(args_tree,",
          "4283:                                 hf_amqp_0_10_method_message_transfer_acquire_mode,",
          "4284:                                 tvb, offset, 1, ENC_BIG_ENDIAN);",
          "4285:             AMQP_INCREMENT(offset, 1, length);",
          "4286:         }",
          "4287:         break;",
          "4289:     case AMQP_0_10_METHOD_MESSAGE_ACCEPT:",
          "4290:         if ((flag1 & ~0x01) || (flag2 != 0))",
          "4294:             size = tvb_get_ntohs(tvb, offset);",
          "4295:             ti = proto_tree_add_item(args_tree,",
          "4296:                                      hf_amqp_0_10_method_message_accept_transfers,",
          "4297:                                      tvb, offset, size + 2, ENC_NA);",
          "4298:             AMQP_INCREMENT(offset, 2, length);",
          "4299:             format_amqp_0_10_sequence_set(tvb, offset, size, ti);",
          "4300:             AMQP_INCREMENT(offset, size, length);",
          "4304:     case AMQP_0_10_METHOD_MESSAGE_REJECT:",
          "4305:         if ((flag1 & ~0x07) || (flag2 != 0))",
          "4309:             size = tvb_get_ntohs(tvb, offset);",
          "4310:             ti = proto_tree_add_item(args_tree,",
          "4311:                                      hf_amqp_0_10_method_message_accept_transfers,",
          "4312:                                      tvb, offset, size + 2, ENC_NA);",
          "4313:             AMQP_INCREMENT(offset, 2, length);",
          "4314:             format_amqp_0_10_sequence_set(tvb, offset, size, ti);",
          "4315:             AMQP_INCREMENT(offset, size, length);",
          "4316:         }",
          "4318:             proto_tree_add_item(args_tree,",
          "4319:                                 hf_amqp_0_10_method_message_transfer_reject_code,",
          "4320:                                 tvb, offset, 2, ENC_BIG_ENDIAN);",
          "4321:             AMQP_INCREMENT(offset, 2, length);",
          "4322:         }",
          "4324:             str_size = tvb_get_guint8(tvb, offset);",
          "4326:                                 hf_amqp_0_10_method_message_reject_text,",
          "4327:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "4328:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "4332:     case AMQP_0_10_METHOD_MESSAGE_RELEASE:",
          "4337:             size = tvb_get_ntohs(tvb, offset);",
          "4339:                                 hf_amqp_0_10_method_message_accept_transfers,",
          "4340:                                 tvb, offset, size + 2, ENC_NA);",
          "4341:             AMQP_INCREMENT(offset, 2, length);",
          "4342:             format_amqp_0_10_sequence_set(tvb, offset, size, ti);",
          "4343:             AMQP_INCREMENT(offset, size, length);",
          "4348:         proto_tree_add_item(args_tree,",
          "4349:                             hf_amqp_0_10_method_message_release_set_redelivered,",
          "4350:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "4353:     case AMQP_0_10_METHOD_MESSAGE_ACQUIRE:",
          "4358:             size = tvb_get_ntohs(tvb, offset);",
          "4360:                                 hf_amqp_0_10_method_message_accept_transfers,",
          "4361:                                 tvb, offset, size + 2, ENC_NA);",
          "4362:             AMQP_INCREMENT(offset, 2, length);",
          "4363:             format_amqp_0_10_sequence_set(tvb, offset, size, ti);",
          "4364:             AMQP_INCREMENT(offset, size, length);",
          "4368:     case AMQP_0_10_METHOD_MESSAGE_RESUME:",
          "4373:             str_size = tvb_get_guint8(tvb, offset);",
          "4375:                                 hf_amqp_0_10_method_message_dest,",
          "4376:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "4377:             AMQP_INCREMENT(offset, 1 + str_size, length);",
          "4381:             size = tvb_get_ntohs(tvb, offset);",
          "4383:                                 hf_amqp_0_10_method_message_resume_id,",
          "4384:                                 tvb, offset + 2, size, ENC_ASCII|ENC_NA);",
          "4385:             AMQP_INCREMENT(offset, 2 + size, length);",
          "4389:     case AMQP_0_10_METHOD_MESSAGE_SUBSCRIBE:",
          "4390:         if (flag2 != 0)",
          "4394:             str_size = tvb_get_guint8(tvb, offset);",
          "4395:             proto_tree_add_item(args_tree,",
          "4396:                                 hf_amqp_0_10_method_message_subscribe_queue,",
          "4397:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "4398:             AMQP_INCREMENT(offset, 1 + str_size, length);",
          "4399:         }",
          "4400:         if (flag1 & 0x02) {",
          "4402:             str_size = tvb_get_guint8(tvb, offset);",
          "4403:             proto_tree_add_item(args_tree,",
          "4404:                                 hf_amqp_0_10_method_message_dest,",
          "4405:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "4406:             AMQP_INCREMENT(offset, 1 + str_size, length);",
          "4407:         }",
          "4409:             proto_tree_add_item(args_tree,",
          "4410:                                 hf_amqp_0_10_method_message_transfer_accept_mode,",
          "4411:                                 tvb, offset, 1, ENC_BIG_ENDIAN);",
          "4412:             AMQP_INCREMENT(offset, 1, length);",
          "4413:         }",
          "4415:             proto_tree_add_item(args_tree,",
          "4416:                                 hf_amqp_0_10_method_message_transfer_acquire_mode,",
          "4417:                                 tvb, offset, 1, ENC_BIG_ENDIAN);",
          "4418:             AMQP_INCREMENT(offset, 1, length);",
          "4419:         }",
          "4423:         proto_tree_add_item(args_tree,",
          "4424:                             hf_amqp_0_10_method_message_subscribe_exclusive,",
          "4425:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "4426:         if (flag1 & 0x20) {",
          "4429:             proto_tree_add_item(args_tree,",
          "4430:                                 hf_amqp_0_10_method_message_resume_id,",
          "4431:                                 tvb, offset, 2 + size, ENC_ASCII|ENC_NA);",
          "4432:             AMQP_INCREMENT(offset, 2 + size, length);",
          "4433:         }",
          "4434:         if (flag1 & 0x40) {",
          "4436:             proto_tree_add_item(args_tree,",
          "4437:                                 hf_amqp_0_10_method_message_subscribe_resume_ttl,",
          "4438:                                 tvb, offset, 8, ENC_BIG_ENDIAN);",
          "4439:             AMQP_INCREMENT(offset, 8, length);",
          "4440:         }",
          "4441:         if (flag1 & 0x80) {",
          "4443:             map_size = amqp_0_10_get_32bit_size(tvb, offset);",
          "4445:                                      hf_amqp_0_10_method_message_subscribe_args,",
          "4446:                                      tvb,",
          "4447:                                      offset,",
          "4448:                                      4 + map_size, ENC_NA);",
          "4449:             dissect_amqp_0_10_map (tvb,",
          "4450:                                    offset + 4,",
          "4451:                                    offset + 4 + map_size,",
          "4452:                                    map_size,",
          "4453:                                    ti);",
          "4454:             AMQP_INCREMENT(offset, 4 + map_size, length);",
          "4456:         break;",
          "4458:     case AMQP_0_10_METHOD_MESSAGE_CANCEL:",
          "4459:         if ((flag1 & ~0x01) || (flag2 != 0))",
          "4460:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4461:         if (flag1 & 0x01) {",
          "4463:             str_size = tvb_get_guint8(tvb, offset);",
          "4464:             proto_tree_add_item(args_tree,",
          "4465:                                 hf_amqp_0_10_method_message_dest,",
          "4466:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "4467:             AMQP_INCREMENT(offset, 1 + str_size, length);",
          "4471:     case AMQP_0_10_METHOD_MESSAGE_SET_FLOW_MODE:",
          "4476:             str_size = tvb_get_guint8(tvb, offset);",
          "4477:             proto_tree_add_item(args_tree,",
          "4478:                                 hf_amqp_0_10_method_message_dest,",
          "4479:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "4480:             AMQP_INCREMENT(offset, 1 + str_size, length);",
          "4484:             proto_tree_add_item(args_tree,",
          "4485:                                 hf_amqp_0_10_method_message_flow_mode,",
          "4486:                                 tvb, offset, 1, ENC_BIG_ENDIAN);",
          "4487:             AMQP_INCREMENT(offset, 1, length);",
          "4491:     case AMQP_0_10_METHOD_MESSAGE_FLOW:",
          "4492:         if ((flag1 & ~0x07) || (flag2 != 0))",
          "4496:             str_size = tvb_get_guint8(tvb, offset);",
          "4497:             proto_tree_add_item(args_tree,",
          "4498:                                 hf_amqp_0_10_method_message_dest,",
          "4499:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "4500:             AMQP_INCREMENT(offset, 1 + str_size, length);",
          "4501:         }",
          "4502:         if (flag1 & 0x02) {",
          "4504:             proto_tree_add_item(args_tree,",
          "4505:                                 hf_amqp_0_10_method_message_credit_unit,",
          "4506:                                 tvb, offset, 1, ENC_BIG_ENDIAN);",
          "4507:             AMQP_INCREMENT(offset, 1, length);",
          "4508:         }",
          "4509:         if (flag1 & 0x04) {",
          "4511:             proto_tree_add_item(args_tree,",
          "4512:                                 hf_amqp_0_10_method_message_credit_value,",
          "4513:                                 tvb, offset, 4, ENC_BIG_ENDIAN);",
          "4514:             AMQP_INCREMENT(offset, 4, length);",
          "4518:     case AMQP_0_10_METHOD_MESSAGE_FLUSH:",
          "4523:             str_size = tvb_get_guint8(tvb, offset);",
          "4524:             proto_tree_add_item(args_tree,",
          "4525:                                 hf_amqp_0_10_method_message_dest,",
          "4526:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "4527:             AMQP_INCREMENT(offset, 1 + str_size, length);",
          "4531:     case AMQP_0_10_METHOD_MESSAGE_STOP:",
          "4536:             str_size = tvb_get_guint8(tvb, offset);",
          "4537:             proto_tree_add_item(args_tree,",
          "4538:                                 hf_amqp_0_10_method_message_dest,",
          "4539:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "4540:             AMQP_INCREMENT(offset, 1 + str_size, length);",
          "4543:     }",
          "4544: }",
          "4546: static void",
          "4547: dissect_amqp_0_10_tx(tvbuff_t *tvb,",
          "4548:                      packet_info *pinfo,",
          "4549:                      proto_tree *tree,",
          "4550:                      int offset, guint16 length)",
          "4551: {",
          "4552:     guint8       method;",
          "4553:     guint8       flag1, flag2;",
          "4554:     const gchar *method_name;",
          "4555:     proto_item *ti;",
          "4557:     method = tvb_get_guint8(tvb, offset+1);",
          "4558:     method_name = val_to_str_const(method, amqp_0_10_tx_methods,",
          "4559:                                    \"<invalid tx method>\");",
          "4560:     col_append_str(pinfo->cinfo, COL_INFO, method_name);",
          "4561:     col_append_str(pinfo->cinfo, COL_INFO, \" \");",
          "4562:     col_set_fence(pinfo->cinfo, COL_INFO);",
          "4564:     proto_tree_add_item(tree, hf_amqp_0_10_tx_method,",
          "4565:                         tvb, offset+1, 1, ENC_BIG_ENDIAN);",
          "4566:     AMQP_INCREMENT(offset, 2, length);",
          "4571:     flag1 = tvb_get_guint8(tvb, offset);",
          "4572:     flag2 = tvb_get_guint8(tvb, offset+1);",
          "4573:     ti = proto_tree_add_item(tree, hf_amqp_0_10_session_header, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "4574:     if ((flag1 != 1) || ((flag2 & 0xfe) != 0))",
          "4575:         proto_item_append_text(ti, \" (Invalid)\");",
          "4576:     else",
          "4577:         proto_tree_add_item(tree, hf_amqp_0_10_session_header_sync,",
          "4578:                             tvb, offset + 1, 1, ENC_BIG_ENDIAN);",
          "4579:     AMQP_INCREMENT(offset, 2, length);",
          "4585: dissect_amqp_0_10_dtx(tvbuff_t *tvb,",
          "4586:                       packet_info *pinfo,",
          "4587:                       proto_tree *tree,",
          "4588:                       int offset, guint16 length)",
          "4593:     guint8       method;",
          "4595:     guint16      xid_length;",
          "4596:     int          flags_offset;",
          "4600:     method_name = val_to_str_const(method, amqp_0_10_dtx_methods,",
          "4601:                                    \"<invalid dtx method>\");",
          "4602:     col_append_str(pinfo->cinfo, COL_INFO, method_name);",
          "4603:     col_append_str(pinfo->cinfo, COL_INFO, \" \");",
          "4606:     proto_tree_add_item(tree, hf_amqp_0_10_dtx_method,",
          "4608:     AMQP_INCREMENT(offset, 2, length);",
          "",
          "[Added Lines]",
          "3200:     offset += 2;",
          "3202:     case AMQP_0_10_METHOD_SESSION_ATTACH:",
          "3203:         if ((flag1 & ~0x03) || ((flag2 != 0)))",
          "3207:             proto_tree_add_item_ret_uint(args_tree, hf_amqp_0_10_method_session_attach_name_size,",
          "3208:                                 tvb, offset, 2, ENC_BIG_ENDIAN, &size);",
          "3209:             offset += 2;",
          "3210:             proto_tree_add_item(args_tree,",
          "3211:                                 hf_amqp_0_10_method_session_attach_name,",
          "3212:                                 tvb, offset, size, ENC_NA);",
          "3218:         proto_tree_add_item(args_tree,",
          "3219:                             hf_amqp_0_10_method_session_attach_force,",
          "3220:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "3223:     case AMQP_0_10_METHOD_SESSION_ATTACHED:",
          "3224:     case AMQP_0_10_METHOD_SESSION_DETACH:",
          "3225:         if ((flag1 != 0x01) || (flag2 != 0))",
          "3229:             proto_tree_add_item_ret_uint(args_tree, hf_amqp_0_10_method_session_attach_name_size,",
          "3230:                                 tvb, offset, 2, ENC_BIG_ENDIAN, &size);",
          "3231:             offset += 2;",
          "3233:                                 hf_amqp_0_10_method_session_attach_name,",
          "3234:                                 tvb, offset, size, ENC_NA);",
          "3239:     case AMQP_0_10_METHOD_SESSION_DETACHED:",
          "3244:             proto_tree_add_item_ret_uint(args_tree, hf_amqp_0_10_method_session_attach_name_size,",
          "3245:                                 tvb, offset, 2, ENC_BIG_ENDIAN, &size);",
          "3246:             offset += 2;",
          "3248:                                 hf_amqp_0_10_method_session_attach_name,",
          "3249:                                 tvb, offset, size, ENC_NA);",
          "3250:             offset += size;",
          "3251:         }",
          "3252:         if (flag1 & 0x02) {",
          "3254:             proto_tree_add_item(args_tree,",
          "3255:                                 hf_amqp_0_10_method_session_detached_code,",
          "3256:                                 tvb, offset, 1, ENC_BIG_ENDIAN);",
          "3261:     case AMQP_0_10_METHOD_SESSION_REQUEST_TIMEOUT:",
          "3262:     case AMQP_0_10_METHOD_SESSION_TIMEOUT:",
          "3268:                                 hf_amqp_0_10_method_session_timeout,",
          "3269:                                 tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3274:     case AMQP_0_10_METHOD_SESSION_COMMAND_POINT:",
          "3280:                                 hf_amqp_0_10_method_session_command_point_id,",
          "3281:                                 tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3282:             offset += 4;",
          "3287:                                 hf_amqp_0_10_method_session_command_point_offset,",
          "3288:                                 tvb, offset, 8, ENC_BIG_ENDIAN);",
          "3293:     case AMQP_0_10_METHOD_SESSION_EXPECTED:",
          "3294:         if ((flag1 & ~0x03) || (flag2 != 0))",
          "3300:                                      hf_amqp_0_10_method_session_commands,",
          "3301:                                      tvb, offset, size + 2, ENC_NA);",
          "3302:             offset += 2;",
          "3303:             format_amqp_0_10_sequence_set(tvb, offset, size, ti);",
          "3304:             offset += size;",
          "3306:         if (flag1 & 0x02) {",
          "3308:             array_size = amqp_0_10_get_32bit_size(tvb, offset);",
          "3309:             ti = proto_tree_add_item(args_tree,",
          "3310:                                      hf_amqp_0_10_method_session_fragments,",
          "3311:                                      tvb, offset, array_size + 4, ENC_NA);",
          "3312:             offset += 4;",
          "3313:             dissect_amqp_0_10_array(tvb,",
          "3314:                                     pinfo,",
          "3315:                                     offset,",
          "3316:                                     ti);",
          "3321:     case AMQP_0_10_METHOD_SESSION_CONFIRMED:",
          "3326:             size = tvb_get_ntohs(tvb, offset);",
          "3327:             ti = proto_tree_add_item(args_tree,",
          "3328:                                      hf_amqp_0_10_method_session_commands,",
          "3329:                                      tvb, offset, size + 2, ENC_NA);",
          "3330:             offset += 2;",
          "3331:             format_amqp_0_10_sequence_set(tvb, offset, size, ti);",
          "3332:             offset += size;",
          "3336:             array_size = amqp_0_10_get_32bit_size(tvb, offset);",
          "3337:             ti = proto_tree_add_item(args_tree,",
          "3338:                                      hf_amqp_0_10_method_session_fragments,",
          "3339:                                      tvb, offset, array_size + 4, ENC_NA);",
          "3340:             offset += 4;",
          "3341:             dissect_amqp_0_10_array(tvb,",
          "3342:                                     pinfo,",
          "3343:                                     offset,",
          "3344:                                     ti);",
          "3349:     case AMQP_0_10_METHOD_SESSION_COMPLETED:",
          "3350:         if ((flag1 & ~0x03) || (flag2 != 0))",
          "3354:             size = tvb_get_ntohs(tvb, offset);",
          "3355:             ti = proto_tree_add_item(args_tree,",
          "3356:                                      hf_amqp_0_10_method_session_commands,",
          "3357:                                      tvb, offset, size + 2, ENC_NA);",
          "3358:             offset += 2;",
          "3359:             format_amqp_0_10_sequence_set(tvb, offset, size, ti);",
          "3365:         proto_tree_add_item(args_tree,",
          "3366:                             hf_amqp_0_10_method_session_completed_timely,",
          "3367:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "3370:     case AMQP_0_10_METHOD_SESSION_KNOWN_COMPLETED:",
          "3375:             size = tvb_get_ntohs(tvb, offset);",
          "3376:             ti = proto_tree_add_item(args_tree,",
          "3377:                                      hf_amqp_0_10_method_session_commands,",
          "3378:                                      tvb, offset, size + 2, ENC_NA);",
          "3379:             offset += 2;",
          "3380:             format_amqp_0_10_sequence_set(tvb, offset, size, ti);",
          "3385:     case AMQP_0_10_METHOD_SESSION_FLUSH:",
          "3386:         if ((flag1 & ~0x07) || (flag2 != 0))",
          "3387:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "3388:         proto_tree_add_item(args_tree,",
          "3389:                             hf_amqp_0_10_method_session_flush_expected,",
          "3390:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "3391:         proto_tree_add_item(args_tree,",
          "3392:                             hf_amqp_0_10_method_session_flush_confirmed,",
          "3393:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "3394:         proto_tree_add_item(args_tree,",
          "3395:                             hf_amqp_0_10_method_session_flush_completed,",
          "3396:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "3397:         break;",
          "3399:     case AMQP_0_10_METHOD_SESSION_GAP:",
          "3404:             size = tvb_get_ntohs(tvb, offset);",
          "3405:             ti = proto_tree_add_item(args_tree,",
          "3406:                                      hf_amqp_0_10_method_session_commands,",
          "3407:                                      tvb, offset, size + 2, ENC_NA);",
          "3408:             offset += 2;",
          "3409:             format_amqp_0_10_sequence_set(tvb, offset, size, ti);",
          "3414:     }",
          "3418: dissect_amqp_0_10_execution(tvbuff_t *tvb,",
          "3419:                             packet_info *pinfo,",
          "3420:                             proto_tree *tree)",
          "3425:     guint8       amqp_class = 0, method;",
          "3427:     guint32      struct_size;",
          "3428:     int          class_hf;",
          "3430:     int offset = 0;",
          "3431:     tvbuff_t *next_tvb;",
          "3434:     method_name = val_to_str_const(method, amqp_0_10_execution_methods,",
          "3435:                                    \"<invalid execution method>\");",
          "3436:     col_append_fstr(pinfo->cinfo, COL_INFO, \"%s \", method_name);",
          "3439:     proto_tree_add_item(tree, hf_amqp_0_10_execution_method,",
          "3441:     offset += 2;",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "4618:     else",
          "4619:         proto_tree_add_item(tree, hf_amqp_0_10_session_header_sync,",
          "4620:                             tvb, offset + 1, 1, ENC_BIG_ENDIAN);",
          "4628:     ti = proto_tree_add_item(tree, hf_amqp_method_arguments,",
          "4630:     args_tree = proto_item_add_subtree(ti, ett_args);",
          "4638:     flag1 = tvb_get_guint8(tvb, offset);",
          "4639:     flag2 = tvb_get_guint8(tvb, offset+1);",
          "4640:     flags_item = proto_tree_add_item(args_tree,",
          "4641:                                      hf_amqp_0_10_argument_packing_flags,",
          "4642:                                      tvb, offset, 2, ENC_BIG_ENDIAN);",
          "4644:     switch (method) {",
          "4647:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4672:         break;",
          "4676:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4680:             ti = proto_tree_add_item(args_tree,",
          "4690:         }",
          "4700:         break;",
          "4704:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4718:         }",
          "4746:         }",
          "4755:             ti = proto_tree_add_item(args_tree,",
          "4757:                                      tvb,",
          "4771:         }",
          "4772:         break;",
          "4774:     }",
          "4775: }",
          "4777: static void",
          "4782: {",
          "4783:     proto_item  *args_tree;",
          "4784:     proto_item  *ti;",
          "4785:     proto_item  *flags_item;",
          "4786:     guint8       method;",
          "4787:     guint8       flag1, flag2;",
          "4790:     int          flags_offset;",
          "4791:     const gchar *method_name;",
          "4793:     method = tvb_get_guint8(tvb, offset+1);",
          "4798:     col_set_fence(pinfo->cinfo, COL_INFO);",
          "4801:                         tvb, offset+1, 1, ENC_BIG_ENDIAN);",
          "",
          "[Removed Lines]",
          "4621:     AMQP_INCREMENT(offset, 2, length);",
          "4624:     if ((method == AMQP_0_10_METHOD_DTX_SELECT) ||",
          "4625:         (method == AMQP_0_10_METHOD_DTX_RECOVER))",
          "4626:         return;",
          "4629:                              tvb, offset, length - 4, ENC_NA);",
          "4637:     flags_offset = offset;",
          "4643:     AMQP_INCREMENT(offset, 2, length);",
          "4645:     case AMQP_0_10_METHOD_DTX_START:",
          "4646:         if ((flag1 & ~0x07) || (flag2 != 0))",
          "4649:             xid_length = tvb_get_ntohs(tvb, offset);",
          "4650:             AMQP_INCREMENT(offset, 2, length);",
          "4651:             ti = proto_tree_add_item(args_tree,",
          "4652:                                      hf_amqp_0_10_dtx_xid,",
          "4653:                                      tvb,",
          "4654:                                      offset - 2,",
          "4655:                                      xid_length + 2, ENC_NA);",
          "4656:             dissect_amqp_0_10_xid (tvb,",
          "4657:                                    offset,",
          "4658:                                    xid_length,",
          "4659:                                    ti);",
          "4660:             AMQP_INCREMENT(offset, xid_length, length);",
          "4661:         }",
          "4665:         proto_tree_add_item(args_tree,",
          "4666:                             hf_amqp_0_10_method_dtx_start_join,",
          "4667:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "4668:         proto_tree_add_item(args_tree,",
          "4669:                             hf_amqp_0_10_method_dtx_start_resume,",
          "4670:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "4674:     case AMQP_0_10_METHOD_DTX_END:",
          "4675:         if ((flag1 & ~0x07) || (flag2 != 0))",
          "4678:             xid_length = tvb_get_ntohs(tvb, offset);",
          "4679:             AMQP_INCREMENT(offset, 2, length);",
          "4681:                                      hf_amqp_0_10_dtx_xid,",
          "4682:                                      tvb,",
          "4683:                                      offset - 2,",
          "4684:                                      xid_length + 2, ENC_NA);",
          "4685:             dissect_amqp_0_10_xid (tvb,",
          "4686:                                    offset,",
          "4687:                                    xid_length,",
          "4688:                                    ti);",
          "4689:             AMQP_INCREMENT(offset, xid_length, length);",
          "4694:         proto_tree_add_item(args_tree,",
          "4695:                             hf_amqp_0_10_method_dtx_end_fail,",
          "4696:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "4697:         proto_tree_add_item(args_tree,",
          "4698:                             hf_amqp_0_10_method_dtx_end_suspend,",
          "4699:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "4702:     case AMQP_0_10_METHOD_DTX_COMMIT:",
          "4703:         if ((flag1 & ~0x03) || (flag2 != 0))",
          "4706:             xid_length = tvb_get_ntohs(tvb, offset);",
          "4707:             AMQP_INCREMENT(offset, 2, length);",
          "4708:             ti = proto_tree_add_item(args_tree,",
          "4709:                                      hf_amqp_0_10_dtx_xid,",
          "4710:                                      tvb,",
          "4711:                                      offset - 2,",
          "4712:                                      xid_length + 2, ENC_NA);",
          "4713:             dissect_amqp_0_10_xid (tvb,",
          "4714:                                    offset,",
          "4715:                                    xid_length,",
          "4716:                                    ti);",
          "4717:             AMQP_INCREMENT(offset, xid_length, length);",
          "4722:         proto_tree_add_item(args_tree,",
          "4723:                             hf_amqp_0_10_method_dtx_commit_one_phase,",
          "4724:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "4725:         break;",
          "4727:     case AMQP_0_10_METHOD_DTX_FORGET:",
          "4728:     case AMQP_0_10_METHOD_DTX_GET_TIMEOUT:",
          "4729:     case AMQP_0_10_METHOD_DTX_PREPARE:",
          "4730:     case AMQP_0_10_METHOD_DTX_ROLLBACK:",
          "4731:         if ((flag1 & ~0x01) || (flag2 != 0))",
          "4732:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4734:             xid_length = tvb_get_ntohs(tvb, offset);",
          "4735:             AMQP_INCREMENT(offset, 2, length);",
          "4736:             ti = proto_tree_add_item(args_tree,",
          "4737:                                      hf_amqp_0_10_dtx_xid,",
          "4738:                                      tvb,",
          "4739:                                      offset - 2,",
          "4740:                                      xid_length + 2, ENC_NA);",
          "4741:             dissect_amqp_0_10_xid (tvb,",
          "4742:                                    offset,",
          "4743:                                    xid_length,",
          "4744:                                    ti);",
          "4745:             AMQP_INCREMENT(offset, xid_length, length);",
          "4747:         break;",
          "4749:     case AMQP_0_10_METHOD_DTX_SET_TIMEOUT:",
          "4750:         if ((flag1 & ~0x03) || (flag2 != 0))",
          "4751:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4753:             xid_length = tvb_get_ntohs(tvb, offset);",
          "4754:             AMQP_INCREMENT(offset, 2, length);",
          "4756:                                      hf_amqp_0_10_dtx_xid,",
          "4758:                                      offset - 2,",
          "4759:                                      xid_length + 2, ENC_NA);",
          "4760:             dissect_amqp_0_10_xid (tvb,",
          "4761:                                    offset,",
          "4762:                                    xid_length,",
          "4763:                                    ti);",
          "4764:             AMQP_INCREMENT(offset, xid_length, length);",
          "4765:         }",
          "4767:             proto_tree_add_item(args_tree,",
          "4768:                                 hf_amqp_0_10_method_dtx_set_timeout_timeout,",
          "4769:                                 tvb, offset, 4, ENC_BIG_ENDIAN);",
          "4770:             AMQP_INCREMENT(offset, 4, length);",
          "4778: dissect_amqp_0_10_exchange(tvbuff_t *tvb,",
          "4779:                            packet_info *pinfo,",
          "4780:                            proto_tree *tree,",
          "4781:                            int offset, guint16 length)",
          "4788:     guint8       str_size;",
          "4789:     guint32      map_length;",
          "4794:     method_name = val_to_str_const(method, amqp_0_10_exchange_methods,",
          "4795:                                    \"<invalid exchange method>\");",
          "4796:     col_append_str(pinfo->cinfo, COL_INFO, method_name);",
          "4797:     col_append_str(pinfo->cinfo, COL_INFO, \" \");",
          "4800:     proto_tree_add_item(tree, hf_amqp_0_10_exchange_method,",
          "4802:     AMQP_INCREMENT(offset, 2, length);",
          "",
          "[Added Lines]",
          "3454:     offset += 2;",
          "3457:                              tvb, offset, -1, ENC_NA);",
          "3469:     offset += 2;",
          "3471:     case AMQP_0_10_METHOD_EXECUTION_SYNC:",
          "3472:         if ((flag1 != 0) || (flag2 != 0))",
          "3476:     case AMQP_0_10_METHOD_EXECUTION_RESULT:",
          "3477:         if ((flag1 & ~0x03) || (flag2 != 0))",
          "3479:         if (flag1 & 0x01) {",
          "3481:             proto_tree_add_item(args_tree,",
          "3482:                                 hf_amqp_0_10_method_execution_command_id,",
          "3483:                                 tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3484:             offset += 4;",
          "3485:         }",
          "3486:         if (flag1 & 0x02) {",
          "3488:             struct_size = amqp_0_10_get_32bit_size_new(args_tree, pinfo, tvb, hf_amqp_0_10_struct32_size, offset);",
          "3489:             offset += 4;",
          "3492:                                      hf_amqp_0_10_struct32,",
          "3493:                                      tvb, offset, 2, ENC_BIG_ENDIAN);",
          "3494:             proto_item_set_len(ti, struct_size);",
          "3495:             if (struct_size > (guint32)tvb_reported_length_remaining(tvb, offset))",
          "3496:             {",
          "3497:                 next_tvb = tvb_new_subset_remaining(tvb, offset);",
          "3498:             }",
          "3499:             else",
          "3500:             {",
          "3501:                 next_tvb = tvb_new_subset_length(tvb, offset, struct_size);",
          "3502:             }",
          "3503:             dissect_amqp_0_10_struct32(next_tvb, pinfo, ti);",
          "3508:     case AMQP_0_10_METHOD_EXECUTION_EXCEPTION:",
          "3509:         if ((flag1 & ~0x7f) || (flag2 != 0))",
          "3511:         if (flag1 & 0x01) {",
          "3513:             proto_tree_add_item(args_tree,",
          "3514:                                 hf_amqp_0_10_method_execution_exception_error,",
          "3515:                                 tvb, offset, 2, ENC_BIG_ENDIAN);",
          "3516:             offset += 2;",
          "3517:         }",
          "3518:         if (flag1 & 0x02) {",
          "3520:             proto_tree_add_item(args_tree,",
          "3521:                                 hf_amqp_0_10_method_execution_command_id,",
          "3522:                                 tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3523:             offset += 4;",
          "3524:         }",
          "3525:         if (flag1 & 0x04) {",
          "3527:             amqp_class = tvb_get_guint8(tvb, offset);",
          "3528:             proto_tree_add_item(args_tree, hf_amqp_0_10_class,",
          "3529:                                 tvb, offset, 1, ENC_BIG_ENDIAN);",
          "3530:             offset += 1;",
          "3531:         }",
          "3532:         if (flag1 & 0x08) {",
          "3534:             switch(amqp_class) {",
          "3535:             case AMQP_0_10_CLASS_CONNECTION:",
          "3536:                 class_hf = hf_amqp_0_10_connection_method;",
          "3537:                 break;",
          "3538:             case AMQP_0_10_CLASS_SESSION:",
          "3539:                 class_hf = hf_amqp_0_10_session_method;",
          "3540:                 break;",
          "3541:             case AMQP_0_10_CLASS_EXECUTION:",
          "3542:                 class_hf = hf_amqp_0_10_execution_method;",
          "3543:                 break;",
          "3544:             case AMQP_0_10_CLASS_MESSAGE:",
          "3545:                 class_hf = hf_amqp_0_10_message_method;",
          "3546:                 break;",
          "3547:             case AMQP_0_10_CLASS_TX:",
          "3548:                 class_hf = hf_amqp_0_10_tx_method;",
          "3549:                 break;",
          "3550:             case AMQP_0_10_CLASS_DTX:",
          "3551:                 class_hf = hf_amqp_0_10_dtx_method;",
          "3552:                 break;",
          "3553:             case AMQP_0_10_CLASS_EXCHANGE:",
          "3554:                 class_hf = hf_amqp_0_10_exchange_method;",
          "3555:                 break;",
          "3556:             case AMQP_0_10_CLASS_QUEUE:",
          "3557:                 class_hf = hf_amqp_0_10_queue_method;",
          "3558:                 break;",
          "3559:             case AMQP_0_10_CLASS_FILE:",
          "3560:                 class_hf = hf_amqp_0_10_file_method;",
          "3561:                 break;",
          "3562:             case AMQP_0_10_CLASS_STREAM:",
          "3563:                 class_hf = hf_amqp_0_10_stream_method;",
          "3564:                 break;",
          "3565:             default:",
          "3566:                 class_hf = -1;",
          "3567:                 break;",
          "3568:             }",
          "3569:             if (class_hf != -1)",
          "3570:                 proto_tree_add_item(args_tree, class_hf,",
          "3571:                                     tvb, offset, 1, ENC_BIG_ENDIAN);",
          "3572:             else",
          "3573:                 expert_add_info_format(pinfo, args_tree, &ei_amqp_invalid_class_code, \"Invalid class code %x\", amqp_class);",
          "3574:             offset += 1;",
          "3576:         if (flag1 & 0x10) {",
          "3578:             proto_tree_add_item(args_tree, hf_amqp_0_10_method_execution_field_index,",
          "3579:                                 tvb, offset, 1, ENC_BIG_ENDIAN);",
          "3580:             offset += 1;",
          "3582:         if (flag1 & 0x20) {",
          "3584:             proto_tree_add_item(args_tree, hf_amqp_0_10_method_execution_description,",
          "3585:                                 tvb, offset, 2, ENC_ASCII|ENC_BIG_ENDIAN);",
          "3586:             offset += (2 + tvb_get_ntohs(tvb, offset));",
          "3587:         }",
          "3588:         if (flag1 & 0x40) {",
          "3590:             struct_size = amqp_0_10_get_32bit_size_new(args_tree, pinfo, tvb, hf_amqp_0_10_method_execution_error_info_size, offset);",
          "3591:             offset += 4;",
          "3593:                                      hf_amqp_0_10_method_execution_error_info,",
          "3595:                                      offset,",
          "3596:                                      struct_size, ENC_NA);",
          "3597:             if (struct_size > (guint32)tvb_reported_length_remaining(tvb, offset))",
          "3598:             {",
          "3599:                 next_tvb = tvb_new_subset_remaining(tvb, offset);",
          "3600:             }",
          "3601:             else",
          "3602:             {",
          "3603:                 next_tvb = tvb_new_subset_length(tvb, offset, struct_size);",
          "3604:             }",
          "3605:             dissect_amqp_0_10_map (next_tvb, ti);",
          "3613: dissect_amqp_0_10_message(tvbuff_t *tvb,",
          "3614:                           packet_info *pinfo,",
          "3615:                           proto_tree *tree)",
          "3622:     guint16      size;",
          "3623:     guint32      map_size;",
          "3626:     int offset = 0;",
          "3627:     tvbuff_t    *next_tvb;",
          "3630:     method_name = val_to_str_const(method, amqp_0_10_message_methods,",
          "3631:                                    \"<invalid message method>\");",
          "3632:     col_append_fstr(pinfo->cinfo, COL_INFO, \"%s \", method_name);",
          "3635:     proto_tree_add_item(tree, hf_amqp_0_10_message_method,",
          "3637:     offset += 2;",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "4812:     else",
          "4813:         proto_tree_add_item(tree, hf_amqp_0_10_session_header_sync,",
          "4814:                             tvb, offset + 1, 1, ENC_BIG_ENDIAN);",
          "4817:     ti = proto_tree_add_item(tree, hf_amqp_method_arguments,",
          "4819:     args_tree = proto_item_add_subtree(ti, ett_args);",
          "",
          "[Removed Lines]",
          "4815:     AMQP_INCREMENT(offset, 2, length);",
          "4818:                              tvb, offset, length - 4, ENC_NA);",
          "",
          "[Added Lines]",
          "3651:     offset += 2;",
          "3654:                              tvb, offset, -1, ENC_NA);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "4829:     flags_item = proto_tree_add_item(args_tree,",
          "4830:                                      hf_amqp_0_10_argument_packing_flags,",
          "4831:                                      tvb, offset, 2, ENC_BIG_ENDIAN);",
          "4833:     switch (method) {",
          "4836:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4839:             proto_tree_add_item(args_tree,",
          "4843:         }",
          "4846:             proto_tree_add_item(args_tree,",
          "4850:         }",
          "4853:             proto_tree_add_item(args_tree,",
          "4857:         }",
          "4861:         proto_tree_add_item(args_tree,",
          "4869:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "4884:         }",
          "4885:         break;",
          "4888:         if ((flag1 & ~0x03) || (flag2 != 0))",
          "4889:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4892:             proto_tree_add_item(args_tree,",
          "4896:         }",
          "4903:         break;",
          "4906:         if ((flag1 & ~0x01) || (flag2 != 0))",
          "4907:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4910:             proto_tree_add_item(args_tree,",
          "4914:         }",
          "4915:         break;",
          "4919:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4929:             proto_tree_add_item(args_tree,",
          "4933:         }",
          "4936:             proto_tree_add_item(args_tree,",
          "4955:         }",
          "4956:         break;",
          "4959:         if ((flag1 & ~0x07) || (flag2 != 0))",
          "4960:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4963:             proto_tree_add_item(args_tree,",
          "4967:         }",
          "4970:             proto_tree_add_item(args_tree,",
          "4974:         }",
          "4977:             proto_tree_add_item(args_tree,",
          "4981:         }",
          "4982:         break;",
          "4986:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4996:             proto_tree_add_item(args_tree,",
          "5000:         }",
          "5003:             proto_tree_add_item(args_tree,",
          "5022:         }",
          "5023:         break;",
          "5024:     }",
          "5025: }",
          "5027: static void",
          "5032: {",
          "5036:     guint8       method;",
          "5037:     guint8       flag1, flag2;",
          "5041:     const gchar *method_name;",
          "5043:     method = tvb_get_guint8(tvb, offset+1);",
          "5048:     col_set_fence(pinfo->cinfo, COL_INFO);",
          "5051:                         tvb, offset+1, 1, ENC_BIG_ENDIAN);",
          "",
          "[Removed Lines]",
          "4832:     AMQP_INCREMENT(offset, 2, length);",
          "4834:     case AMQP_0_10_METHOD_EXCHANGE_DECLARE:",
          "4835:         if ((flag1 & ~0x7f) || (flag2 != 0))",
          "4838:             str_size = tvb_get_guint8(tvb, offset);",
          "4840:                                 hf_amqp_0_10_method_exchange_declare_exchange,",
          "4841:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "4842:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "4845:             str_size = tvb_get_guint8(tvb, offset);",
          "4847:                                 hf_amqp_0_10_method_exchange_declare_type,",
          "4848:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "4849:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "4852:             str_size = tvb_get_guint8(tvb, offset);",
          "4854:                                 hf_amqp_0_10_method_exchange_declare_alt_exchange,",
          "4855:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "4856:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "4862:                             hf_amqp_0_10_method_exchange_declare_passive,",
          "4863:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "4864:         proto_tree_add_item(args_tree,",
          "4865:                             hf_amqp_0_10_method_exchange_declare_durable,",
          "4866:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "4867:         proto_tree_add_item(args_tree,",
          "4868:                             hf_amqp_0_10_method_exchange_declare_auto_delete,",
          "4871:             map_length = amqp_0_10_get_32bit_size(tvb, offset);",
          "4872:             AMQP_INCREMENT(offset, 4, length);",
          "4873:             ti = proto_tree_add_item(args_tree,",
          "4874:                                      hf_amqp_0_10_method_exchange_declare_arguments,",
          "4875:                                      tvb,",
          "4876:                                      offset - 4,",
          "4877:                                      map_length + 4, ENC_NA);",
          "4878:             dissect_amqp_0_10_map (tvb,",
          "4879:                                    offset,",
          "4880:                                    offset + map_length,",
          "4881:                                    map_length,",
          "4882:                                    ti);",
          "4883:             AMQP_INCREMENT(offset, map_length, length);",
          "4887:     case AMQP_0_10_METHOD_EXCHANGE_DELETE:",
          "4891:             str_size = tvb_get_guint8(tvb, offset);",
          "4893:                                 hf_amqp_0_10_method_exchange_declare_exchange,",
          "4894:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "4895:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "4900:         proto_tree_add_item(args_tree,",
          "4901:                             hf_amqp_0_10_method_exchange_delete_if_unused,",
          "4902:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "4905:     case AMQP_0_10_METHOD_EXCHANGE_QUERY:",
          "4909:             str_size = tvb_get_guint8(tvb, offset);",
          "4911:                                 hf_amqp_0_10_method_exchange_declare_exchange,",
          "4912:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "4913:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "4917:     case AMQP_0_10_METHOD_EXCHANGE_BIND:",
          "4918:         if ((flag1 & ~0x0f) || (flag2 != 0))",
          "4921:             str_size = tvb_get_guint8(tvb, offset);",
          "4922:             proto_tree_add_item(args_tree,",
          "4923:                                 hf_amqp_0_10_method_exchange_bind_queue,",
          "4924:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "4925:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "4926:         }",
          "4928:             str_size = tvb_get_guint8(tvb, offset);",
          "4930:                                 hf_amqp_0_10_method_exchange_declare_exchange,",
          "4931:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "4932:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "4935:             str_size = tvb_get_guint8(tvb, offset);",
          "4937:                                 hf_amqp_0_10_method_exchange_binding_key,",
          "4938:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "4939:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "4940:         }",
          "4942:             map_length = amqp_0_10_get_32bit_size(tvb, offset);",
          "4943:             AMQP_INCREMENT(offset, 4, length);",
          "4944:             ti = proto_tree_add_item(args_tree,",
          "4945:                                      hf_amqp_0_10_method_exchange_declare_arguments,",
          "4946:                                      tvb,",
          "4947:                                      offset - 4,",
          "4948:                                      map_length + 4, ENC_NA);",
          "4949:             dissect_amqp_0_10_map (tvb,",
          "4950:                                    offset,",
          "4951:                                    offset + map_length,",
          "4952:                                    map_length,",
          "4953:                                    ti);",
          "4954:             AMQP_INCREMENT(offset, map_length, length);",
          "4958:     case AMQP_0_10_METHOD_EXCHANGE_UNBIND:",
          "4962:             str_size = tvb_get_guint8(tvb, offset);",
          "4964:                                 hf_amqp_0_10_method_exchange_bind_queue,",
          "4965:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "4966:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "4969:             str_size = tvb_get_guint8(tvb, offset);",
          "4971:                                 hf_amqp_0_10_method_exchange_declare_exchange,",
          "4972:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "4973:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "4976:             str_size = tvb_get_guint8(tvb, offset);",
          "4978:                                 hf_amqp_0_10_method_exchange_binding_key,",
          "4979:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "4980:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "4984:     case AMQP_0_10_METHOD_EXCHANGE_BOUND:",
          "4985:         if ((flag1 & ~0x0f) || (flag2 != 0))",
          "4988:             str_size = tvb_get_guint8(tvb, offset);",
          "4989:             proto_tree_add_item(args_tree,",
          "4990:                                 hf_amqp_0_10_method_exchange_declare_exchange,",
          "4991:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "4992:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "4993:         }",
          "4995:             str_size = tvb_get_guint8(tvb, offset);",
          "4997:                                 hf_amqp_0_10_method_exchange_bind_queue,",
          "4998:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "4999:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "5002:             str_size = tvb_get_guint8(tvb, offset);",
          "5004:                                 hf_amqp_0_10_method_exchange_binding_key,",
          "5005:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "5006:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "5007:         }",
          "5009:             map_length = amqp_0_10_get_32bit_size(tvb, offset);",
          "5010:             AMQP_INCREMENT(offset, 4, length);",
          "5011:             ti = proto_tree_add_item(args_tree,",
          "5012:                                      hf_amqp_0_10_method_exchange_declare_arguments,",
          "5013:                                      tvb,",
          "5014:                                      offset - 4,",
          "5015:                                      map_length + 4, ENC_NA);",
          "5016:             dissect_amqp_0_10_map (tvb,",
          "5017:                                    offset,",
          "5018:                                    offset + map_length,",
          "5019:                                    map_length,",
          "5020:                                    ti);",
          "5021:             AMQP_INCREMENT(offset, map_length, length);",
          "5028: dissect_amqp_0_10_queue(tvbuff_t *tvb,",
          "5029:                         packet_info *pinfo,",
          "5030:                         proto_tree *tree,",
          "5031:                         int offset, guint16 length)",
          "5033:     proto_item  *args_tree;",
          "5034:     proto_item  *ti;",
          "5035:     proto_item  *flags_item;",
          "5038:     guint8       str_size;",
          "5039:     guint32      map_length;",
          "5040:     int          flags_offset;",
          "5044:     method_name = val_to_str_const(method, amqp_0_10_queue_methods,",
          "5045:                                    \"<invalid queue method>\");",
          "5046:     col_append_str(pinfo->cinfo, COL_INFO, method_name);",
          "5047:     col_append_str(pinfo->cinfo, COL_INFO, \" \");",
          "5050:     proto_tree_add_item(tree, hf_amqp_0_10_queue_method,",
          "5052:     AMQP_INCREMENT(offset, 2, length);",
          "",
          "[Added Lines]",
          "3667:     offset += 2;",
          "3669:     case AMQP_0_10_METHOD_MESSAGE_TRANSFER:",
          "3670:         if ((flag1 & ~0x07) || (flag2 != 0))",
          "3674:                                 hf_amqp_0_10_method_message_transfer_destination,",
          "3675:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "3676:             offset += (1 + tvb_get_guint8(tvb, offset));",
          "3680:                                 hf_amqp_0_10_method_message_transfer_accept_mode,",
          "3681:                                 tvb, offset, 1, ENC_BIG_ENDIAN);",
          "3682:             offset += 1;",
          "3686:                                 hf_amqp_0_10_method_message_transfer_acquire_mode,",
          "3687:                                 tvb, offset, 1, ENC_BIG_ENDIAN);",
          "3689:         }",
          "3690:         break;",
          "3692:     case AMQP_0_10_METHOD_MESSAGE_ACCEPT:",
          "3693:         if ((flag1 & ~0x01) || (flag2 != 0))",
          "3694:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "3695:         if (flag1 & 0x01) {",
          "3697:             size = tvb_get_ntohs(tvb, offset);",
          "3698:             ti = proto_tree_add_item(args_tree,",
          "3699:                                      hf_amqp_0_10_method_message_accept_transfers,",
          "3700:                                      tvb, offset, size + 2, ENC_NA);",
          "3701:             offset += 2;",
          "3702:             format_amqp_0_10_sequence_set(tvb, offset, size, ti);",
          "3704:         }",
          "3705:         break;",
          "3707:     case AMQP_0_10_METHOD_MESSAGE_REJECT:",
          "3708:         if ((flag1 & ~0x07) || (flag2 != 0))",
          "3709:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "3710:         if (flag1 & 0x01) {",
          "3712:             size = tvb_get_ntohs(tvb, offset);",
          "3713:             ti = proto_tree_add_item(args_tree,",
          "3714:                                      hf_amqp_0_10_method_message_accept_transfers,",
          "3715:                                      tvb, offset, size + 2, ENC_NA);",
          "3716:             offset += 2;",
          "3717:             format_amqp_0_10_sequence_set(tvb, offset, size, ti);",
          "3718:             offset += size;",
          "3719:         }",
          "3721:             proto_tree_add_item(args_tree,",
          "3722:                                 hf_amqp_0_10_method_message_transfer_reject_code,",
          "3723:                                 tvb, offset, 2, ENC_BIG_ENDIAN);",
          "3724:             offset += 2;",
          "3725:         }",
          "3727:             proto_tree_add_item(args_tree,",
          "3728:                                 hf_amqp_0_10_method_message_reject_text,",
          "3729:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "3731:         }",
          "3732:         break;",
          "3734:     case AMQP_0_10_METHOD_MESSAGE_RELEASE:",
          "3735:         if ((flag1 & ~0x03) || (flag2 != 0))",
          "3736:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "3737:         if (flag1 & 0x01) {",
          "3739:             size = tvb_get_ntohs(tvb, offset);",
          "3740:             proto_tree_add_item(args_tree,",
          "3741:                                 hf_amqp_0_10_method_message_accept_transfers,",
          "3742:                                 tvb, offset, size + 2, ENC_NA);",
          "3743:             offset += 2;",
          "3744:             format_amqp_0_10_sequence_set(tvb, offset, size, ti);",
          "3751:                             hf_amqp_0_10_method_message_release_set_redelivered,",
          "3753:         break;",
          "3755:     case AMQP_0_10_METHOD_MESSAGE_ACQUIRE:",
          "3756:         if ((flag1 & ~0x01) || (flag2 != 0))",
          "3757:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "3758:         if (flag1 & 0x01) {",
          "3760:             size = tvb_get_ntohs(tvb, offset);",
          "3761:             proto_tree_add_item(args_tree,",
          "3762:                                 hf_amqp_0_10_method_message_accept_transfers,",
          "3763:                                 tvb, offset, size + 2, ENC_NA);",
          "3764:             offset += 2;",
          "3765:             format_amqp_0_10_sequence_set(tvb, offset, size, ti);",
          "3770:     case AMQP_0_10_METHOD_MESSAGE_RESUME:",
          "3773:         if (flag1 & 0x01) {",
          "3776:                                 hf_amqp_0_10_method_message_dest,",
          "3777:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "3778:             offset += (1 + tvb_get_guint8(tvb, offset));",
          "3779:         }",
          "3780:         if (flag1 & 0x02) {",
          "3782:             proto_tree_add_item(args_tree,",
          "3783:                                 hf_amqp_0_10_method_message_resume_id,",
          "3784:                                 tvb, offset, 2, ENC_ASCII|ENC_BIG_ENDIAN);",
          "3786:         }",
          "3787:         break;",
          "3789:     case AMQP_0_10_METHOD_MESSAGE_SUBSCRIBE:",
          "3790:         if (flag2 != 0)",
          "3791:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "3792:         if (flag1 & 0x01) {",
          "3794:             proto_tree_add_item(args_tree,",
          "3795:                                 hf_amqp_0_10_method_message_subscribe_queue,",
          "3796:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "3797:             offset += (1 + tvb_get_guint8(tvb, offset));",
          "3798:         }",
          "3799:         if (flag1 & 0x02) {",
          "3801:             proto_tree_add_item(args_tree,",
          "3802:                                 hf_amqp_0_10_method_message_dest,",
          "3803:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "3804:             offset += (1 + tvb_get_guint8(tvb, offset));",
          "3805:         }",
          "3807:             proto_tree_add_item(args_tree,",
          "3808:                                 hf_amqp_0_10_method_message_transfer_accept_mode,",
          "3809:                                 tvb, offset, 1, ENC_BIG_ENDIAN);",
          "3810:             offset += 1;",
          "3811:         }",
          "3813:             proto_tree_add_item(args_tree,",
          "3814:                                 hf_amqp_0_10_method_message_transfer_acquire_mode,",
          "3815:                                 tvb, offset, 1, ENC_BIG_ENDIAN);",
          "3816:             offset += 1;",
          "3817:         }",
          "3821:         proto_tree_add_item(args_tree,",
          "3822:                             hf_amqp_0_10_method_message_subscribe_exclusive,",
          "3823:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "3824:         if (flag1 & 0x20) {",
          "3826:             proto_tree_add_item(args_tree,",
          "3827:                                 hf_amqp_0_10_method_message_resume_id,",
          "3828:                                 tvb, offset, 2, ENC_ASCII|ENC_BIG_ENDIAN);",
          "3829:             offset += (2 + tvb_get_ntohs(tvb, offset));",
          "3830:         }",
          "3831:         if (flag1 & 0x40) {",
          "3833:             proto_tree_add_item(args_tree,",
          "3834:                                 hf_amqp_0_10_method_message_subscribe_resume_ttl,",
          "3835:                                 tvb, offset, 8, ENC_BIG_ENDIAN);",
          "3836:             offset += 8;",
          "3837:         }",
          "3838:         if (flag1 & 0x80) {",
          "3840:             map_size = amqp_0_10_get_32bit_size(tvb, offset);",
          "3841:             ti = proto_tree_add_item(args_tree,",
          "3842:                                      hf_amqp_0_10_method_message_subscribe_args,",
          "3843:                                      tvb,",
          "3844:                                      offset,",
          "3845:                                      4 + map_size, ENC_NA);",
          "3846:             if (map_size > (guint32)tvb_reported_length_remaining(tvb, offset))",
          "3847:             {",
          "3848:                 next_tvb = tvb_new_subset_remaining(tvb, offset);",
          "3849:             }",
          "3850:             else",
          "3851:             {",
          "3852:                 next_tvb = tvb_new_subset_length(tvb, offset, map_size);",
          "3853:             }",
          "3854:             dissect_amqp_0_10_map (next_tvb, ti);",
          "3859:     case AMQP_0_10_METHOD_MESSAGE_CANCEL:",
          "3862:         if (flag1 & 0x01) {",
          "3865:                                 hf_amqp_0_10_method_message_dest,",
          "3866:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "3871:     case AMQP_0_10_METHOD_MESSAGE_SET_FLOW_MODE:",
          "3872:         if ((flag1 & ~0x03) || (flag2 != 0))",
          "3874:         if (flag1 & 0x01) {",
          "3877:                                 hf_amqp_0_10_method_message_dest,",
          "3878:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "3879:             offset += (1 + tvb_get_guint8(tvb, offset));",
          "3881:         if (flag1 & 0x02) {",
          "3884:                                 hf_amqp_0_10_method_message_flow_mode,",
          "3885:                                 tvb, offset, 1, ENC_BIG_ENDIAN);",
          "3890:     case AMQP_0_10_METHOD_MESSAGE_FLOW:",
          "3893:         if (flag1 & 0x01) {",
          "3896:                                 hf_amqp_0_10_method_message_dest,",
          "3897:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "3898:             offset += (1 + tvb_get_guint8(tvb, offset));",
          "3900:         if (flag1 & 0x02) {",
          "3903:                                 hf_amqp_0_10_method_message_credit_unit,",
          "3904:                                 tvb, offset, 1, ENC_BIG_ENDIAN);",
          "3905:             offset += 1;",
          "3907:         if (flag1 & 0x04) {",
          "3910:                                 hf_amqp_0_10_method_message_credit_value,",
          "3911:                                 tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3916:     case AMQP_0_10_METHOD_MESSAGE_FLUSH:",
          "3917:         if ((flag1 & ~0x01) || (flag2 != 0))",
          "3919:         if (flag1 & 0x01) {",
          "3922:                                 hf_amqp_0_10_method_message_dest,",
          "3923:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "3926:         break;",
          "3928:     case AMQP_0_10_METHOD_MESSAGE_STOP:",
          "3929:         if ((flag1 & ~0x01) || (flag2 != 0))",
          "3930:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "3931:         if (flag1 & 0x01) {",
          "3934:                                 hf_amqp_0_10_method_message_dest,",
          "3935:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "3943: dissect_amqp_0_10_tx(tvbuff_t *tvb,",
          "3944:                      packet_info *pinfo,",
          "3945:                      proto_tree *tree)",
          "3950:     proto_item *ti;",
          "3951:     int offset = 1;",
          "3954:     method_name = val_to_str_const(method, amqp_0_10_tx_methods,",
          "3955:                                    \"<invalid tx method>\");",
          "3956:     col_append_fstr(pinfo->cinfo, COL_INFO, \"%s \", method_name);",
          "3959:     proto_tree_add_item(tree, hf_amqp_0_10_tx_method,",
          "3961:     offset += 2;",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "5062:     else",
          "5063:         proto_tree_add_item(tree, hf_amqp_0_10_session_header_sync,",
          "5064:                             tvb, offset + 1, 1, ENC_BIG_ENDIAN);",
          "5178: }",
          "5180: static void",
          "5185: {",
          "5186:     proto_item  *args_tree;",
          "5187:     proto_item  *ti;",
          "5188:     proto_item  *flags_item;",
          "5189:     guint8       method;",
          "5190:     guint8       flag1, flag2;",
          "5193:     int          flags_offset;",
          "5194:     const gchar *method_name;",
          "5196:     method = tvb_get_guint8(tvb, offset+1);",
          "5201:     col_set_fence(pinfo->cinfo, COL_INFO);",
          "5204:                         tvb, offset+1, 1, ENC_BIG_ENDIAN);",
          "",
          "[Removed Lines]",
          "5065:     AMQP_INCREMENT(offset, 2, length);",
          "5067:     ti = proto_tree_add_item(tree, hf_amqp_method_arguments,",
          "5068:                              tvb, offset, length - 4, ENC_NA);",
          "5069:     args_tree = proto_item_add_subtree(ti, ett_args);",
          "5076:     flags_offset = offset;",
          "5077:     flag1 = tvb_get_guint8(tvb, offset);",
          "5078:     flag2 = tvb_get_guint8(tvb, offset+1);",
          "5079:     flags_item = proto_tree_add_item(args_tree,",
          "5080:                                      hf_amqp_0_10_argument_packing_flags,",
          "5081:                                      tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5082:     AMQP_INCREMENT(offset, 2, length);",
          "5083:     switch (method) {",
          "5084:     case AMQP_0_10_METHOD_QUEUE_DECLARE:",
          "5085:         if ((flag1 & ~0x7f) || (flag2 != 0))",
          "5086:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "5088:             str_size = tvb_get_guint8(tvb, offset);",
          "5089:             proto_tree_add_item(args_tree,",
          "5090:                                 hf_amqp_0_10_method_queue_name,",
          "5091:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "5092:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "5093:         }",
          "5095:             str_size = tvb_get_guint8(tvb, offset);",
          "5096:             proto_tree_add_item(args_tree,",
          "5097:                                 hf_amqp_0_10_method_queue_alt_exchange,",
          "5098:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "5099:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "5100:         }",
          "5104:         proto_tree_add_item(args_tree,",
          "5105:                             hf_amqp_0_10_method_queue_declare_passive,",
          "5106:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "5107:         proto_tree_add_item(args_tree,",
          "5108:                             hf_amqp_0_10_method_queue_declare_durable,",
          "5109:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "5110:         proto_tree_add_item(args_tree,",
          "5111:                             hf_amqp_0_10_method_queue_declare_exclusive,",
          "5112:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "5113:         proto_tree_add_item(args_tree,",
          "5114:                             hf_amqp_0_10_method_queue_declare_auto_delete,",
          "5115:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "5117:             map_length = amqp_0_10_get_32bit_size(tvb, offset);",
          "5118:             AMQP_INCREMENT(offset, 4, length);",
          "5119:             ti = proto_tree_add_item(args_tree,",
          "5120:                                      hf_amqp_0_10_method_queue_declare_arguments,",
          "5121:                                      tvb,",
          "5122:                                      offset - 4,",
          "5123:                                      map_length + 4, ENC_NA);",
          "5124:             dissect_amqp_0_10_map (tvb,",
          "5125:                                    offset,",
          "5126:                                    offset + map_length,",
          "5127:                                    map_length,",
          "5128:                                    ti);",
          "5129:             AMQP_INCREMENT(offset, map_length, length);",
          "5130:         }",
          "5131:         break;",
          "5133:     case AMQP_0_10_METHOD_QUEUE_DELETE:",
          "5134:         if ((flag1 & ~0x07) || (flag2 != 0))",
          "5135:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "5137:             str_size = tvb_get_guint8(tvb, offset);",
          "5138:             proto_tree_add_item(args_tree,",
          "5139:                                 hf_amqp_0_10_method_queue_name,",
          "5140:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "5141:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "5142:         }",
          "5146:         proto_tree_add_item(args_tree,",
          "5147:                             hf_amqp_0_10_method_queue_delete_if_unused,",
          "5148:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "5149:         proto_tree_add_item(args_tree,",
          "5150:                             hf_amqp_0_10_method_queue_delete_if_empty,",
          "5151:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "5152:         break;",
          "5154:     case AMQP_0_10_METHOD_QUEUE_PURGE:",
          "5155:         if ((flag1 & ~0x01) || (flag2 != 0))",
          "5156:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "5158:             str_size = tvb_get_guint8(tvb, offset);",
          "5159:             proto_tree_add_item(args_tree,",
          "5160:                                 hf_amqp_0_10_method_queue_name,",
          "5161:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "5162:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "5163:         }",
          "5164:         break;",
          "5166:     case AMQP_0_10_METHOD_QUEUE_QUERY:",
          "5167:         if ((flag1 & ~0x01) || (flag2 != 0))",
          "5168:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "5170:             str_size = tvb_get_guint8(tvb, offset);",
          "5171:             proto_tree_add_item(args_tree,",
          "5172:                                 hf_amqp_0_10_method_queue_name,",
          "5173:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "5174:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "5175:         }",
          "5176:         break;",
          "5177:     }",
          "5181: dissect_amqp_0_10_file(tvbuff_t *tvb,",
          "5182:                        packet_info *pinfo,",
          "5183:                        proto_tree *tree,",
          "5184:                        int offset, guint16 length)",
          "5191:     guint8       str_size;",
          "5192:     guint32      map_length;",
          "5197:     method_name = val_to_str_const(method, amqp_0_10_file_methods,",
          "5198:                                    \"<invalid file method>\");",
          "5199:     col_append_str(pinfo->cinfo, COL_INFO, method_name);",
          "5200:     col_append_str(pinfo->cinfo, COL_INFO, \" \");",
          "5203:     proto_tree_add_item(tree, hf_amqp_0_10_file_method,",
          "5205:     AMQP_INCREMENT(offset, 2, length);",
          "",
          "[Added Lines]",
          "3980: dissect_amqp_0_10_dtx(tvbuff_t *tvb,",
          "3981:                       packet_info *pinfo,",
          "3982:                       proto_tree *tree)",
          "3989:     guint16      xid_length;",
          "3992:     int offset = 0;",
          "3995:     method_name = val_to_str_const(method, amqp_0_10_dtx_methods,",
          "3996:                                    \"<invalid dtx method>\");",
          "3997:     col_append_fstr(pinfo->cinfo, COL_INFO, \"%s \", method_name);",
          "4000:     proto_tree_add_item(tree, hf_amqp_0_10_dtx_method,",
          "4002:     offset += 2;",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "5215:     else",
          "5216:         proto_tree_add_item(tree, hf_amqp_0_10_session_header_sync,",
          "5217:                             tvb, offset + 1, 1, ENC_BIG_ENDIAN);",
          "5267:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "5300:             ti = proto_tree_add_item(args_tree,",
          "5302:                                      tvb,",
          "5306:                                    offset,",
          "5309:                                    ti);",
          "5372:         }",
          "5376:         proto_tree_add_item(args_tree,",
          "5378:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "5379:         proto_tree_add_item(args_tree,",
          "5381:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "5421:         break;",
          "5425:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "5438:         }",
          "5442:         proto_tree_add_item(args_tree,",
          "5444:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "5466:         break;",
          "5469:         if ((flag1 & ~0x03) || (flag2 != 0))",
          "5470:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "5476:         }",
          "5480:         proto_tree_add_item(args_tree,",
          "5482:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "5483:         break;",
          "5486:         if ((flag1 & ~0x03) || (flag2 != 0))",
          "5487:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "5489:             proto_tree_add_item(args_tree,",
          "5493:         }",
          "5500:         break;",
          "5501:     }",
          "5502: }",
          "5504: static void",
          "5509: {",
          "5510:     proto_item  *args_tree;",
          "5511:     proto_item  *ti;",
          "5512:     proto_item  *flags_item;",
          "5513:     guint8       method;",
          "5514:     guint8       flag1, flag2;",
          "5516:     guint32      map_length;",
          "5517:     int          flags_offset;",
          "5518:     const gchar *method_name;",
          "5520:     method = tvb_get_guint8(tvb, offset+1);",
          "5525:     col_set_fence(pinfo->cinfo, COL_INFO);",
          "5528:                         tvb, offset+1, 1, ENC_BIG_ENDIAN);",
          "",
          "[Removed Lines]",
          "5218:     AMQP_INCREMENT(offset, 2, length);",
          "5220:     ti = proto_tree_add_item(tree, hf_amqp_method_arguments,",
          "5221:                              tvb, offset, length - 4, ENC_NA);",
          "5222:     args_tree = proto_item_add_subtree(ti, ett_args);",
          "5229:     flags_offset = offset;",
          "5230:     flag1 = tvb_get_guint8(tvb, offset);",
          "5231:     flag2 = tvb_get_guint8(tvb, offset+1);",
          "5232:     flags_item = proto_tree_add_item(args_tree,",
          "5233:                                      hf_amqp_0_10_argument_packing_flags,",
          "5234:                                      tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5235:     AMQP_INCREMENT(offset, 2, length);",
          "5236:     switch (method) {",
          "5237:     case AMQP_0_10_METHOD_FILE_QOS:",
          "5238:         if ((flag1 & ~0x07) || (flag2 != 0))",
          "5239:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "5241:             proto_tree_add_item(args_tree,",
          "5242:                                 hf_amqp_0_10_method_file_qos_prefetch_size,",
          "5243:                                 tvb, offset, 4, ENC_BIG_ENDIAN);",
          "5244:             AMQP_INCREMENT(offset, 4, length);",
          "5245:         }",
          "5247:             proto_tree_add_item(args_tree,",
          "5248:                                 hf_amqp_0_10_method_file_qos_prefetch_count,",
          "5249:                                 tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5250:             AMQP_INCREMENT(offset, 2, length);",
          "5251:         }",
          "5255:         proto_tree_add_item(args_tree,",
          "5256:                             hf_amqp_0_10_method_file_qos_global,",
          "5257:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "5258:         break;",
          "5260:     case AMQP_0_10_METHOD_FILE_QOS_OK:",
          "5261:     case AMQP_0_10_METHOD_FILE_STAGE:",
          "5263:         break;",
          "5265:     case AMQP_0_10_METHOD_FILE_CONSUME:",
          "5266:         if ((flag1 & ~0x7f) || (flag2 != 0))",
          "5269:             str_size = tvb_get_guint8(tvb, offset);",
          "5270:             proto_tree_add_item(args_tree,",
          "5271:                                 hf_amqp_0_10_method_queue_name,",
          "5272:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "5273:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "5274:         }",
          "5276:             str_size = tvb_get_guint8(tvb, offset);",
          "5277:             proto_tree_add_item(args_tree,",
          "5278:                                 hf_amqp_0_10_method_file_consumer_tag,",
          "5279:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "5280:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "5281:         }",
          "5285:         proto_tree_add_item(args_tree,",
          "5286:                             hf_amqp_0_10_method_file_consume_no_local,",
          "5287:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "5288:         proto_tree_add_item(args_tree,",
          "5289:                             hf_amqp_0_10_method_file_consume_no_ack,",
          "5290:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "5291:         proto_tree_add_item(args_tree,",
          "5292:                             hf_amqp_0_10_method_file_consume_exclusive,",
          "5293:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "5294:         proto_tree_add_item(args_tree,",
          "5295:                             hf_amqp_0_10_method_file_consume_nowait,",
          "5296:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "5298:             map_length = amqp_0_10_get_32bit_size(tvb, offset);",
          "5299:             AMQP_INCREMENT(offset, 4, length);",
          "5301:                                      hf_amqp_0_10_method_file_consume_arguments,",
          "5303:                                      offset - 4,",
          "5304:                                      map_length + 4, ENC_NA);",
          "5305:             dissect_amqp_0_10_map (tvb,",
          "5307:                                    offset + map_length,",
          "5308:                                    map_length,",
          "5310:             AMQP_INCREMENT(offset, map_length, length);",
          "5311:         }",
          "5312:         break;",
          "5314:     case AMQP_0_10_METHOD_FILE_CONSUME_OK:",
          "5315:     case AMQP_0_10_METHOD_FILE_CANCEL:",
          "5316:         if ((flag1 & ~0x01) || (flag2 != 0))",
          "5317:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "5319:             str_size = tvb_get_guint8(tvb, offset);",
          "5320:             proto_tree_add_item(args_tree,",
          "5321:                                 hf_amqp_0_10_method_file_consumer_tag,",
          "5322:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "5323:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "5324:         }",
          "5325:         break;",
          "5327:     case AMQP_0_10_METHOD_FILE_OPEN:",
          "5328:         if ((flag1 & ~0x03) || (flag2 != 0))",
          "5329:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "5331:             str_size = tvb_get_guint8(tvb, offset);",
          "5332:             proto_tree_add_item(args_tree,",
          "5333:                                 hf_amqp_0_10_method_file_identifier,",
          "5334:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "5335:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "5336:         }",
          "5338:             proto_tree_add_item(args_tree,",
          "5339:                                 hf_amqp_0_10_method_file_open_content_size,",
          "5340:                                 tvb, offset, 8, ENC_BIG_ENDIAN);",
          "5341:             AMQP_INCREMENT(offset, 8, length);",
          "5342:         }",
          "5343:         break;",
          "5345:     case AMQP_0_10_METHOD_FILE_OPEN_OK:",
          "5346:         if ((flag1 & ~0x01) || (flag2 != 0))",
          "5347:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "5349:             proto_tree_add_item(args_tree,",
          "5350:                                 hf_amqp_0_10_method_file_open_ok_staged_size,",
          "5351:                                 tvb, offset, 8, ENC_BIG_ENDIAN);",
          "5352:             AMQP_INCREMENT(offset, 8, length);",
          "5353:         }",
          "5354:         break;",
          "5356:     case AMQP_0_10_METHOD_FILE_PUBLISH:",
          "5357:         if ((flag1 & ~0x1f) || (flag2 != 0))",
          "5358:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "5360:             str_size = tvb_get_guint8(tvb, offset);",
          "5361:             proto_tree_add_item(args_tree,",
          "5362:                                 hf_amqp_0_10_method_file_publish_exchange,",
          "5363:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "5364:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "5365:         }",
          "5367:             str_size = tvb_get_guint8(tvb, offset);",
          "5368:             proto_tree_add_item(args_tree,",
          "5369:                                 hf_amqp_0_10_method_file_publish_routing_key,",
          "5370:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "5371:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "5377:                             hf_amqp_0_10_method_file_publish_mandatory,",
          "5380:                             hf_amqp_0_10_method_file_publish_immediate,",
          "5383:             str_size = tvb_get_guint8(tvb, offset);",
          "5384:             proto_tree_add_item(args_tree,",
          "5385:                                 hf_amqp_0_10_method_file_identifier,",
          "5386:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "5387:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "5388:         }",
          "5389:         break;",
          "5391:     case AMQP_0_10_METHOD_FILE_RETURN:",
          "5392:         if ((flag1 & ~0x0f) || (flag2 != 0))",
          "5393:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "5395:             proto_tree_add_item(args_tree,",
          "5396:                                 hf_amqp_0_10_method_file_return_reply_code,",
          "5397:                                 tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5398:             AMQP_INCREMENT(offset, 2, length);",
          "5399:         }",
          "5401:             str_size = tvb_get_guint8(tvb, offset);",
          "5402:             proto_tree_add_item(args_tree,",
          "5403:                                 hf_amqp_0_10_method_file_return_reply_text,",
          "5404:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "5405:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "5406:         }",
          "5408:             str_size = tvb_get_guint8(tvb, offset);",
          "5409:             proto_tree_add_item(args_tree,",
          "5410:                                 hf_amqp_0_10_method_file_return_exchange,",
          "5411:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "5412:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "5413:         }",
          "5415:             str_size = tvb_get_guint8(tvb, offset);",
          "5416:             proto_tree_add_item(args_tree,",
          "5417:                                 hf_amqp_0_10_method_file_return_routing_key,",
          "5418:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "5419:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "5420:         }",
          "5423:     case AMQP_0_10_METHOD_FILE_DELIVER:",
          "5424:         if ((flag1 & ~0x3f) || (flag2 != 0))",
          "5427:             str_size = tvb_get_guint8(tvb, offset);",
          "5428:             proto_tree_add_item(args_tree,",
          "5429:                                 hf_amqp_0_10_method_file_deliver_consumer_tag,",
          "5430:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "5431:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "5432:         }",
          "5434:             proto_tree_add_item(args_tree,",
          "5435:                                 hf_amqp_0_10_method_file_deliver_delivery_tag,",
          "5436:                                 tvb, offset, 8, ENC_BIG_ENDIAN);",
          "5437:             AMQP_INCREMENT(offset, 8, length);",
          "5443:                             hf_amqp_0_10_method_file_deliver_redelivered,",
          "5446:             str_size = tvb_get_guint8(tvb, offset);",
          "5447:             proto_tree_add_item(args_tree,",
          "5448:                                 hf_amqp_0_10_method_file_deliver_exchange,",
          "5449:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "5450:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "5451:         }",
          "5453:             str_size = tvb_get_guint8(tvb, offset);",
          "5454:             proto_tree_add_item(args_tree,",
          "5455:                                 hf_amqp_0_10_method_file_deliver_routing_key,",
          "5456:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "5457:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "5458:         }",
          "5460:             str_size = tvb_get_guint8(tvb, offset);",
          "5461:             proto_tree_add_item(args_tree,",
          "5462:                                 hf_amqp_0_10_method_file_identifier,",
          "5463:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "5464:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "5465:         }",
          "5468:     case AMQP_0_10_METHOD_FILE_ACK:",
          "5472:             proto_tree_add_item(args_tree,",
          "5473:                                 hf_amqp_0_10_method_file_ack_delivery_tag,",
          "5474:                                 tvb, offset, 8, ENC_BIG_ENDIAN);",
          "5475:             AMQP_INCREMENT(offset, 8, length);",
          "5481:                             hf_amqp_0_10_method_file_ack_multiple,",
          "5485:     case AMQP_0_10_METHOD_FILE_REJECT:",
          "5490:                                 hf_amqp_0_10_method_file_reject_delivery_tag,",
          "5491:                                 tvb, offset, 8, ENC_BIG_ENDIAN);",
          "5492:             AMQP_INCREMENT(offset, 8, length);",
          "5497:         proto_tree_add_item(args_tree,",
          "5498:                             hf_amqp_0_10_method_file_reject_requeue,",
          "5499:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "5505: dissect_amqp_0_10_stream(tvbuff_t *tvb,",
          "5506:                          packet_info *pinfo,",
          "5507:                          proto_tree *tree,",
          "5508:                          int offset, guint16 length)",
          "5515:     guint8       str_size;",
          "5521:     method_name = val_to_str_const(method, amqp_0_10_stream_methods,",
          "5522:                                    \"<invalid stream method>\");",
          "5523:     col_append_str(pinfo->cinfo, COL_INFO, method_name);",
          "5524:     col_append_str(pinfo->cinfo, COL_INFO, \" \");",
          "5527:     proto_tree_add_item(tree, hf_amqp_0_10_stream_method,",
          "5529:     AMQP_INCREMENT(offset, 2, length);",
          "",
          "[Added Lines]",
          "4015:     offset += 2;",
          "4018:     if ((method == AMQP_0_10_METHOD_DTX_SELECT) ||",
          "4019:         (method == AMQP_0_10_METHOD_DTX_RECOVER))",
          "4020:         return;",
          "4022:     ti = proto_tree_add_item(tree, hf_amqp_method_arguments,",
          "4023:                              tvb, offset, -1, ENC_NA);",
          "4024:     args_tree = proto_item_add_subtree(ti, ett_args);",
          "4031:     flags_offset = offset;",
          "4032:     flag1 = tvb_get_guint8(tvb, offset);",
          "4033:     flag2 = tvb_get_guint8(tvb, offset+1);",
          "4034:     flags_item = proto_tree_add_item(args_tree,",
          "4035:                                      hf_amqp_0_10_argument_packing_flags,",
          "4036:                                      tvb, offset, 2, ENC_BIG_ENDIAN);",
          "4037:     offset += 2;",
          "4038:     switch (method) {",
          "4039:     case AMQP_0_10_METHOD_DTX_START:",
          "4040:         if ((flag1 & ~0x07) || (flag2 != 0))",
          "4043:             xid_length = tvb_get_ntohs(tvb, offset);",
          "4044:             offset += 2;",
          "4046:                                      hf_amqp_0_10_dtx_xid,",
          "4048:                                      offset - 2,",
          "4049:                                      xid_length + 2, ENC_NA);",
          "4050:             dissect_amqp_0_10_xid (tvb,",
          "4059:                             hf_amqp_0_10_method_dtx_start_join,",
          "4062:                             hf_amqp_0_10_method_dtx_start_resume,",
          "4067:     case AMQP_0_10_METHOD_DTX_END:",
          "4068:         if ((flag1 & ~0x07) || (flag2 != 0))",
          "4071:             xid_length = tvb_get_ntohs(tvb, offset);",
          "4072:             offset += 2;",
          "4073:             ti = proto_tree_add_item(args_tree,",
          "4074:                                      hf_amqp_0_10_dtx_xid,",
          "4075:                                      tvb,",
          "4076:                                      offset - 2,",
          "4077:                                      xid_length + 2, ENC_NA);",
          "4078:             dissect_amqp_0_10_xid (tvb,",
          "4079:                                    offset,",
          "4080:                                    ti);",
          "4087:                             hf_amqp_0_10_method_dtx_end_fail,",
          "4088:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "4089:         proto_tree_add_item(args_tree,",
          "4090:                             hf_amqp_0_10_method_dtx_end_suspend,",
          "4094:     case AMQP_0_10_METHOD_DTX_COMMIT:",
          "4098:             xid_length = tvb_get_ntohs(tvb, offset);",
          "4099:             offset += 2;",
          "4100:             ti = proto_tree_add_item(args_tree,",
          "4101:                                      hf_amqp_0_10_dtx_xid,",
          "4102:                                      tvb,",
          "4103:                                      offset - 2,",
          "4104:                                      xid_length + 2, ENC_NA);",
          "4105:             dissect_amqp_0_10_xid (tvb,",
          "4106:                                    offset,",
          "4107:                                    ti);",
          "4114:                             hf_amqp_0_10_method_dtx_commit_one_phase,",
          "4118:     case AMQP_0_10_METHOD_DTX_FORGET:",
          "4119:     case AMQP_0_10_METHOD_DTX_GET_TIMEOUT:",
          "4120:     case AMQP_0_10_METHOD_DTX_PREPARE:",
          "4121:     case AMQP_0_10_METHOD_DTX_ROLLBACK:",
          "4122:         if ((flag1 & ~0x01) || (flag2 != 0))",
          "4123:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4125:             xid_length = tvb_get_ntohs(tvb, offset);",
          "4126:             offset += 2;",
          "4127:             ti = proto_tree_add_item(args_tree,",
          "4128:                                      hf_amqp_0_10_dtx_xid,",
          "4129:                                      tvb,",
          "4130:                                      offset - 2,",
          "4131:                                      xid_length + 2, ENC_NA);",
          "4132:             dissect_amqp_0_10_xid (tvb,",
          "4133:                                    offset,",
          "4134:                                    ti);",
          "4136:         }",
          "4137:         break;",
          "4139:     case AMQP_0_10_METHOD_DTX_SET_TIMEOUT:",
          "4143:             xid_length = tvb_get_ntohs(tvb, offset);",
          "4144:             offset += 2;",
          "4145:             ti = proto_tree_add_item(args_tree,",
          "4146:                                      hf_amqp_0_10_dtx_xid,",
          "4147:                                      tvb,",
          "4148:                                      offset - 2,",
          "4149:                                      xid_length + 2, ENC_NA);",
          "4150:             dissect_amqp_0_10_xid (tvb,",
          "4151:                                    offset,",
          "4152:                                    ti);",
          "4153:             offset += xid_length;",
          "4154:         }",
          "4157:                                 hf_amqp_0_10_method_dtx_set_timeout_timeout,",
          "4158:                                 tvb, offset, 4, ENC_BIG_ENDIAN);",
          "4167: dissect_amqp_0_10_exchange(tvbuff_t *tvb,",
          "4168:                            packet_info *pinfo,",
          "4169:                            proto_tree *tree)",
          "4179:     int offset = 0;",
          "4180:     tvbuff_t *next_tvb;",
          "4183:     method_name = val_to_str_const(method, amqp_0_10_exchange_methods,",
          "4184:                                    \"<invalid exchange method>\");",
          "4185:     col_append_fstr(pinfo->cinfo, COL_INFO, \"%s \", method_name);",
          "4188:     proto_tree_add_item(tree, hf_amqp_0_10_exchange_method,",
          "4190:     offset += 2;",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "5539:     else",
          "5540:         proto_tree_add_item(tree, hf_amqp_0_10_session_header_sync,",
          "5541:                             tvb, offset + 1, 1, ENC_BIG_ENDIAN);",
          "5544:     ti = proto_tree_add_item(tree, hf_amqp_method_arguments,",
          "5546:     args_tree = proto_item_add_subtree(ti, ett_args);",
          "",
          "[Removed Lines]",
          "5542:     AMQP_INCREMENT(offset, 2, length);",
          "5545:                              tvb, offset, length - 4, ENC_NA);",
          "",
          "[Added Lines]",
          "4203:     offset += 2;",
          "4206:                              tvb, offset, -1, ENC_NA);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "5556:     flags_item = proto_tree_add_item(args_tree,",
          "5557:                                      hf_amqp_0_10_argument_packing_flags,",
          "5558:                                      tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5560:     switch (method) {",
          "5563:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "5565:             proto_tree_add_item(args_tree,",
          "5569:         }",
          "5571:             proto_tree_add_item(args_tree,",
          "5575:         }",
          "5577:             proto_tree_add_item(args_tree,",
          "5581:         }",
          "5585:         proto_tree_add_item(args_tree,",
          "5587:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "5588:         break;",
          "5596:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "5606:             proto_tree_add_item(args_tree,",
          "5610:         }",
          "5614:         proto_tree_add_item(args_tree,",
          "5622:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "5638:         break;",
          "5642:         if ((flag1 & ~0x01) || (flag2 != 0))",
          "5643:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "5646:             proto_tree_add_item(args_tree,",
          "5650:         }",
          "5651:         break;",
          "5654:         if ((flag1 & ~0x0f) || (flag2 != 0))",
          "5655:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "5658:             proto_tree_add_item(args_tree,",
          "5662:         }",
          "5665:             proto_tree_add_item(args_tree,",
          "5669:         }",
          "5679:         break;",
          "5683:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "5692:             proto_tree_add_item(args_tree,",
          "5696:         }",
          "5699:             proto_tree_add_item(args_tree,",
          "5703:         }",
          "5706:             proto_tree_add_item(args_tree,",
          "5710:         }",
          "5711:         break;",
          "5714:         if ((flag1 & ~0x0f) || (flag2 != 0))",
          "5715:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "5724:             proto_tree_add_item(args_tree,",
          "5728:         }",
          "5731:             proto_tree_add_item(args_tree,",
          "5735:         }",
          "5738:             proto_tree_add_item(args_tree,",
          "5742:         }",
          "5858:     }",
          "5859: }",
          "5861: static void",
          "5867: {",
          "5878:     flag1 = tvb_get_guint8(tvb, offset);",
          "5879:     flag2 = tvb_get_guint8(tvb, offset+1);",
          "5925:     flag1 = tvb_get_guint8(tvb, offset);",
          "5926:     flag2 = tvb_get_guint8(tvb, offset+1);",
          "5928:                                      hf_amqp_0_10_argument_packing_flags,",
          "5929:                                      tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5976:             proto_tree_add_item(args_tree,",
          "5980:         }",
          "5984:             proto_tree_add_item(args_tree,",
          "5988:         }",
          "6097:     }",
          "6098: }",
          "6100: static void",
          "6106: {",
          "6119:     flags_offset = offset;",
          "6120:     flag1 = tvb_get_guint8(tvb, offset);",
          "6121:     flag2 = tvb_get_guint8(tvb, offset+1);",
          "6123:                                      hf_amqp_0_10_argument_packing_flags,",
          "6124:                                      tvb, offset, 2, ENC_BIG_ENDIAN);",
          "6182:     }",
          "6183: }",
          "6185: static void",
          "6191: {",
          "6205:     flag1 = tvb_get_guint8(tvb, offset);",
          "6206:     flag2 = tvb_get_guint8(tvb, offset+1);",
          "6316:     flag1 = tvb_get_guint8(tvb, offset);",
          "6317:     flag2 = tvb_get_guint8(tvb, offset+1);",
          "6319:                                      hf_amqp_0_10_argument_packing_flags,",
          "6320:                                      tvb, offset, 2, ENC_BIG_ENDIAN);",
          "6449:                                 tvb, offset, 2, ENC_BIG_ENDIAN);",
          "6451:             offset += 2;",
          "6459:         }",
          "6460:         break;",
          "6488:             offset += 4;",
          "6496:         }",
          "6497:         break;",
          "6531:         }",
          "6532:         break;",
          "6544:         }",
          "6557:         }",
          "6558:         break;",
          "6570:         }",
          "6571:         break;",
          "6651:     }",
          "6677:     }",
          "6696:     }",
          "6704: }",
          "6717: {",
          "6738:     }",
          "6765:     }",
          "6785:     }",
          "6795:     }",
          "6824:         }",
          "6835:         }",
          "6837:     }",
          "6839: }",
          "6854: {",
          "6942:     }",
          "6948:         else",
          "6966:     }",
          "6974: }",
          "6988: {",
          "6997:     }",
          "7105:     }",
          "7107: }",
          "7119: {",
          "7185:     }",
          "7187: }",
          "7191: {",
          "7232:     }",
          "7243:     }",
          "7253:         }",
          "7254:     }",
          "7272:     }",
          "7278: }",
          "7282: {",
          "7356:             break;",
          "7360:             break;",
          "7364:             break;",
          "7368:             break;",
          "7372:             break;",
          "7376:             break;",
          "7380:             break;",
          "7383:         }",
          "7384:         break;",
          "7399:         break;",
          "7407:         break;",
          "7414: }",
          "7420: {",
          "7464:     }",
          "7723:             }",
          "7817:             }",
          "7818:             break;",
          "7890:             break;",
          "8014:             break;",
          "8032:             break;",
          "8056:             break;",
          "8079:             break;",
          "8083:             break;",
          "8087:             break;",
          "8091:             break;",
          "8092:         default:",
          "8094:         }",
          "8095:         break;",
          "8104:         break;",
          "8105:     default:",
          "8107:     }",
          "8110:     return tvb_reported_length(tvb);",
          "8111: }",
          "8115: static int",
          "",
          "[Removed Lines]",
          "5559:     AMQP_INCREMENT(offset, 2, length);",
          "5561:     case AMQP_0_10_METHOD_STREAM_QOS:",
          "5562:         if ((flag1 & ~0x0f) || (flag2 != 0))",
          "5566:                                 hf_amqp_0_10_method_stream_qos_prefetch_size,",
          "5567:                                 tvb, offset, 4, ENC_BIG_ENDIAN);",
          "5568:             AMQP_INCREMENT(offset, 4, length);",
          "5572:                                 hf_amqp_0_10_method_stream_qos_prefetch_count,",
          "5573:                                 tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5574:             AMQP_INCREMENT(offset, 2, length);",
          "5578:                                 hf_amqp_0_10_method_stream_qos_prefetch_size,",
          "5579:                                 tvb, offset, 4, ENC_BIG_ENDIAN);",
          "5580:             AMQP_INCREMENT(offset, 4, length);",
          "5586:                             hf_amqp_0_10_method_stream_qos_global,",
          "5590:     case AMQP_0_10_METHOD_STREAM_QOS_OK:",
          "5592:         break;",
          "5594:     case AMQP_0_10_METHOD_STREAM_CONSUME:",
          "5595:         if ((flag1 & ~0x3f) || (flag2 != 0))",
          "5598:             str_size = tvb_get_guint8(tvb, offset);",
          "5599:             proto_tree_add_item(args_tree,",
          "5600:                                 hf_amqp_0_10_method_queue_name,",
          "5601:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "5602:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "5603:         }",
          "5605:             str_size = tvb_get_guint8(tvb, offset);",
          "5607:                                 hf_amqp_0_10_method_stream_consumer_tag,",
          "5608:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "5609:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "5615:                             hf_amqp_0_10_method_stream_consume_no_local,",
          "5616:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "5617:         proto_tree_add_item(args_tree,",
          "5618:                             hf_amqp_0_10_method_stream_consume_exclusive,",
          "5619:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "5620:         proto_tree_add_item(args_tree,",
          "5621:                             hf_amqp_0_10_method_stream_consume_nowait,",
          "5624:             map_length = amqp_0_10_get_32bit_size(tvb, offset);",
          "5625:             AMQP_INCREMENT(offset, 4, length);",
          "5626:             ti = proto_tree_add_item(args_tree,",
          "5627:                                      hf_amqp_0_10_method_stream_consume_arguments,",
          "5628:                                      tvb,",
          "5629:                                      offset - 4,",
          "5630:                                      map_length + 4, ENC_NA);",
          "5631:             dissect_amqp_0_10_map (tvb,",
          "5632:                                    offset,",
          "5633:                                    offset + map_length,",
          "5634:                                    map_length,",
          "5635:                                    ti);",
          "5636:             AMQP_INCREMENT(offset, map_length, length);",
          "5637:         }",
          "5640:     case AMQP_0_10_METHOD_STREAM_CONSUME_OK:",
          "5641:     case AMQP_0_10_METHOD_STREAM_CANCEL:",
          "5645:             str_size = tvb_get_guint8(tvb, offset);",
          "5647:                                 hf_amqp_0_10_method_stream_consumer_tag,",
          "5648:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "5649:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "5653:     case AMQP_0_10_METHOD_STREAM_PUBLISH:",
          "5657:             str_size = tvb_get_guint8(tvb, offset);",
          "5659:                                 hf_amqp_0_10_method_stream_publish_exchange,",
          "5660:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "5661:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "5664:             str_size = tvb_get_guint8(tvb, offset);",
          "5666:                                 hf_amqp_0_10_method_stream_publish_routing_key,",
          "5667:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "5668:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "5673:         proto_tree_add_item(args_tree,",
          "5674:                             hf_amqp_0_10_method_stream_publish_mandatory,",
          "5675:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "5676:         proto_tree_add_item(args_tree,",
          "5677:                             hf_amqp_0_10_method_stream_publish_immediate,",
          "5678:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "5681:     case AMQP_0_10_METHOD_STREAM_RETURN:",
          "5682:         if ((flag1 & ~0x0f) || (flag2 != 0))",
          "5685:             proto_tree_add_item(args_tree,",
          "5686:                                 hf_amqp_0_10_method_stream_return_reply_code,",
          "5687:                                 tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5688:             AMQP_INCREMENT(offset, 2, length);",
          "5689:         }",
          "5691:             str_size = tvb_get_guint8(tvb, offset);",
          "5693:                                 hf_amqp_0_10_method_stream_return_reply_text,",
          "5694:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "5695:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "5698:             str_size = tvb_get_guint8(tvb, offset);",
          "5700:                                 hf_amqp_0_10_method_stream_return_exchange,",
          "5701:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "5702:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "5705:             str_size = tvb_get_guint8(tvb, offset);",
          "5707:                                 hf_amqp_0_10_method_stream_return_routing_key,",
          "5708:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "5709:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "5713:     case AMQP_0_10_METHOD_STREAM_DELIVER:",
          "5717:             str_size = tvb_get_guint8(tvb, offset);",
          "5718:             proto_tree_add_item(args_tree,",
          "5719:                                 hf_amqp_0_10_method_stream_deliver_consumer_tag,",
          "5720:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "5721:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "5722:         }",
          "5725:                                 hf_amqp_0_10_method_stream_deliver_delivery_tag,",
          "5726:                                 tvb, offset, 8, ENC_BIG_ENDIAN);",
          "5727:             AMQP_INCREMENT(offset, 8, length);",
          "5730:             str_size = tvb_get_guint8(tvb, offset);",
          "5732:                                 hf_amqp_0_10_method_stream_deliver_exchange,",
          "5733:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "5734:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "5737:             str_size = tvb_get_guint8(tvb, offset);",
          "5739:                                 hf_amqp_0_10_method_stream_deliver_queue,",
          "5740:                                 tvb, offset + 1, str_size, ENC_ASCII|ENC_NA);",
          "5741:             AMQP_INCREMENT(offset, (1 + str_size), length);",
          "5743:         break;",
          "5744:     }",
          "5745: }",
          "5747: static void",
          "5748: dissect_amqp_0_10_struct_delivery_properties(tvbuff_t *tvb,",
          "5749:                                              packet_info *pinfo,",
          "5750:                                              proto_tree *tree,",
          "5751:                                              int offset,",
          "5752:                                              guint32 struct_length)",
          "5753: {",
          "5754:     proto_item *args_tree;",
          "5755:     proto_item *flags_item;",
          "5756:     guint8      flag1, flag2;",
          "5757:     guint8      len8;",
          "5758:     guint16     len16;",
          "5759:     guint64     timestamp;",
          "5760:     int         flags_offset;",
          "5761:     int         max_length;",
          "5762:     nstime_t    tv;",
          "5764:     max_length = offset + AMQP_0_10_SIZE_MAX(struct_length);",
          "5765:     args_tree = proto_item_add_subtree(tree, ett_args);",
          "5767:     flags_offset = offset;",
          "5768:     flag1 = tvb_get_guint8(tvb, offset);",
          "5769:     flag2 = tvb_get_guint8(tvb, offset+1);",
          "5770:     flags_item = proto_tree_add_item(args_tree,",
          "5771:                                      hf_amqp_0_10_argument_packing_flags,",
          "5772:                                      tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5773:     if (flag2 & ~0x0f)",
          "5774:         expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "5775:     AMQP_INCREMENT(offset, 2, max_length);",
          "5778:     proto_tree_add_item(args_tree,",
          "5779:                         hf_amqp_0_10_struct_delivery_properties_discard_unroutable,",
          "5780:                         tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "5781:     proto_tree_add_item(args_tree,",
          "5782:                         hf_amqp_0_10_struct_delivery_properties_immediate,",
          "5783:                         tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "5784:     proto_tree_add_item(args_tree,",
          "5785:                         hf_amqp_0_10_struct_delivery_properties_redelivered,",
          "5786:                         tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "5787:     if (flag1 & 0x08) {",
          "5789:         proto_tree_add_item(args_tree,",
          "5790:                             hf_amqp_0_10_struct_delivery_properties_priority,",
          "5791:                             tvb, offset, 1, ENC_BIG_ENDIAN);",
          "5792:         AMQP_INCREMENT(offset, 1, max_length);",
          "5793:     }",
          "5794:     if (flag1 & 0x10) {",
          "5796:         proto_tree_add_item(args_tree,",
          "5797:                             hf_amqp_0_10_struct_delivery_properties_mode,",
          "5798:                             tvb, offset, 1, ENC_BIG_ENDIAN);",
          "5799:         AMQP_INCREMENT(offset, 1, max_length);",
          "5800:     }",
          "5801:     if (flag1 & 0x20) {",
          "5803:         proto_tree_add_item(args_tree,",
          "5804:                             hf_amqp_0_10_struct_delivery_properties_ttl,",
          "5805:                             tvb, offset, 8, ENC_BIG_ENDIAN);",
          "5806:         AMQP_INCREMENT(offset, 8, max_length);",
          "5807:     }",
          "5808:     if (flag1 & 0x40) {",
          "5810:         timestamp = tvb_get_ntoh64(tvb, offset);",
          "5811:         tv.secs = (time_t)timestamp;",
          "5812:         tv.nsecs = 0;",
          "5813:         proto_tree_add_time(args_tree,",
          "5814:                             hf_amqp_0_10_struct_delivery_properties_timestamp,",
          "5815:                             tvb, offset, 8, &tv);",
          "5816:         AMQP_INCREMENT(offset, 8, max_length);",
          "5817:     }",
          "5818:     if (flag1 & 0x80) {",
          "5820:         timestamp = tvb_get_ntoh64(tvb, offset);",
          "5821:         tv.secs = (time_t)timestamp;",
          "5822:         tv.nsecs = 0;",
          "5823:         proto_tree_add_time(args_tree,",
          "5824:                             hf_amqp_0_10_struct_delivery_properties_expiration,",
          "5825:                             tvb, offset, 8, &tv);",
          "5826:         AMQP_INCREMENT(offset, 8, max_length);",
          "5827:     }",
          "5828:     if (flag2 & 0x01) {",
          "5830:         len8 = tvb_get_guint8(tvb, offset);",
          "5831:         proto_tree_add_item(args_tree,",
          "5832:                             hf_amqp_0_10_struct_delivery_properties_exchange,",
          "5833:                             tvb, offset + 1, len8, ENC_ASCII|ENC_NA);",
          "5834:         AMQP_INCREMENT(offset, (1 + len8), max_length);",
          "5835:     }",
          "5836:     if (flag2 & 0x02) {",
          "5838:         len8 = tvb_get_guint8(tvb, offset);",
          "5839:         proto_tree_add_item(args_tree,",
          "5840:                             hf_amqp_0_10_struct_delivery_properties_routing_key,",
          "5841:                             tvb, offset + 1, len8, ENC_ASCII|ENC_NA);",
          "5842:         AMQP_INCREMENT(offset, (1 + len8), max_length);",
          "5843:     }",
          "5844:     if (flag2 & 0x04) {",
          "5846:         len16 = tvb_get_ntohs(tvb, offset);",
          "5847:         proto_tree_add_item(args_tree,",
          "5848:                             hf_amqp_0_10_method_message_resume_id,",
          "5849:                             tvb, offset + 2, len16, ENC_ASCII|ENC_NA);",
          "5850:         AMQP_INCREMENT(offset, (2 + len16), max_length);",
          "5851:     }",
          "5852:     if (flag2 & 0x08) {",
          "5854:         proto_tree_add_item(args_tree,",
          "5855:                             hf_amqp_0_10_struct_delivery_properties_resume_ttl,",
          "5856:                             tvb, offset, 8, ENC_BIG_ENDIAN);",
          "5857:         AMQP_INCREMENT(offset, 8, max_length);",
          "5862: dissect_amqp_0_10_struct_fragment_properties(tvbuff_t *tvb,",
          "5863:                                              packet_info *pinfo,",
          "5864:                                              proto_tree *tree,",
          "5865:                                              int offset,",
          "5866:                                              guint32 struct_length)",
          "5868:     proto_item *args_tree;",
          "5869:     proto_item *flags_item;",
          "5870:     guint8      flag1, flag2;",
          "5871:     int         flags_offset;",
          "5872:     int         max_length;",
          "5874:     max_length = offset + AMQP_0_10_SIZE_MAX(struct_length);",
          "5875:     args_tree = proto_item_add_subtree(tree, ett_args);",
          "5877:     flags_offset = offset;",
          "5880:     flags_item = proto_tree_add_item(args_tree,",
          "5881:                                      hf_amqp_0_10_argument_packing_flags,",
          "5882:                                      tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5883:     if ((flag1 & ~0x07) || (flag2 != 0))",
          "5884:         expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "5885:     AMQP_INCREMENT(offset, 2, max_length);",
          "5888:     proto_tree_add_item(args_tree,",
          "5889:                         hf_amqp_0_10_struct_fragment_properties_first,",
          "5890:                         tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "5891:     proto_tree_add_item(args_tree,",
          "5892:                         hf_amqp_0_10_struct_fragment_properties_last,",
          "5893:                         tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "5894:     if (flag1 & 0x04) {",
          "5896:         proto_tree_add_item(args_tree,",
          "5897:                             hf_amqp_0_10_struct_fragment_properties_size,",
          "5898:                             tvb, offset, 8, ENC_BIG_ENDIAN);",
          "5899:         AMQP_INCREMENT(offset, 8, max_length);",
          "5900:     }",
          "5901: }",
          "5903: static void",
          "5904: dissect_amqp_0_10_struct_message_properties(tvbuff_t *tvb,",
          "5905:                                             packet_info *pinfo,",
          "5906:                                             proto_tree *tree,",
          "5907:                                             int offset,",
          "5908:                                             guint32 struct_length)",
          "5909: {",
          "5910:     proto_item *ti;",
          "5911:     proto_item *frag;",
          "5912:     proto_item *args_tree;",
          "5913:     proto_item *flags_item, *subflags_item;",
          "5914:     guint8      flag1, flag2;",
          "5915:     guint8      subflag1, subflag2;",
          "5916:     guint8      len8;",
          "5917:     guint16     len16;",
          "5918:     guint32     map_length;",
          "5919:     e_guid_t    uuid;",
          "5920:     int         max_length;",
          "5922:     max_length = offset + AMQP_0_10_SIZE_MAX(struct_length);",
          "5923:     frag = proto_item_add_subtree(tree, ett_args);",
          "5927:     flags_item = proto_tree_add_item(frag,",
          "5930:     if (flag2 & ~0x01)",
          "5931:         expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "5932:     AMQP_INCREMENT(offset, 2, max_length);",
          "5933:     if (flag1 & 0x01) {",
          "5935:         proto_tree_add_item(frag,",
          "5936:                             hf_amqp_0_10_struct_message_properties_content_len,",
          "5937:                             tvb, offset, 8, ENC_BIG_ENDIAN);",
          "5938:         AMQP_INCREMENT(offset, 8, max_length);",
          "5939:     }",
          "5940:     if (flag1 & 0x02) {",
          "5942:         tvb_get_guid(tvb, offset, &uuid, ENC_BIG_ENDIAN);",
          "5943:         proto_tree_add_guid(frag,",
          "5944:                             hf_amqp_0_10_struct_message_properties_message_id,",
          "5945:                             tvb, offset, 16, &uuid);",
          "5946:         AMQP_INCREMENT(offset, 16, max_length);",
          "5947:     }",
          "5948:     if (flag1 & 0x04) {",
          "5950:         len16 = tvb_get_ntohs(tvb, offset);",
          "5951:         proto_tree_add_item(frag,",
          "5952:                             hf_amqp_0_10_struct_message_properties_correlation,",
          "5953:                             tvb, offset + 2, len16, ENC_NA);",
          "5954:         AMQP_INCREMENT(offset, (2 + len16), max_length);",
          "5955:     }",
          "5956:     if (flag1 & 0x08) {",
          "5959:         len16 = tvb_get_ntohs(tvb, offset);",
          "5960:         AMQP_INCREMENT(offset, 2, max_length);",
          "5961:         ti = proto_tree_add_item(frag,",
          "5962:                                  hf_amqp_0_10_struct_message_properties_reply_to,",
          "5963:                                  tvb, offset, len16, ENC_NA);",
          "5964:         args_tree = proto_item_add_subtree(ti, ett_args);",
          "5965:         subflags_item = proto_tree_add_item(args_tree,",
          "5966:                                             hf_amqp_0_10_argument_packing_flags,",
          "5967:                                             tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5968:         subflag1 = tvb_get_guint8(tvb, offset);",
          "5969:         subflag2 = tvb_get_guint8(tvb, offset + 1);",
          "5970:         if ((subflag1 & ~0x03) || (subflag2 != 0))",
          "5971:             expert_add_info(pinfo, subflags_item, &ei_amqp_bad_flag_value);",
          "5972:         AMQP_INCREMENT(offset, 2, max_length);",
          "5973:         if (subflag1 & 0x01) {",
          "5975:             len8 = tvb_get_guint8(tvb, offset);",
          "5977:                                 hf_amqp_0_10_struct_reply_to_exchange,",
          "5978:                                 tvb, offset + 1, len8, ENC_ASCII|ENC_NA);",
          "5979:             AMQP_INCREMENT(offset, (1 + len8), max_length);",
          "5981:         if (subflag1 & 0x02) {",
          "5983:             len8 = tvb_get_guint8(tvb, offset);",
          "5985:                                 hf_amqp_0_10_struct_reply_to_routing_key,",
          "5986:                                 tvb, offset + 1, len8, ENC_ASCII|ENC_NA);",
          "5987:             AMQP_INCREMENT(offset, (1 + len8), max_length);",
          "5989:     }",
          "5990:     if (flag1 & 0x10) {",
          "5992:         len8 = tvb_get_guint8(tvb, offset);",
          "5993:         proto_tree_add_item(frag,",
          "5994:                             hf_amqp_0_10_struct_message_properties_content_type,",
          "5995:                             tvb, offset + 1, len8, ENC_ASCII|ENC_NA);",
          "5996:         AMQP_INCREMENT(offset, (1 + len8), max_length);",
          "5997:     }",
          "5998:     if (flag1 & 0x20) {",
          "6000:         len8 = tvb_get_guint8(tvb, offset);",
          "6001:         proto_tree_add_item(frag,",
          "6002:                             hf_amqp_0_10_struct_message_properties_content_encoding,",
          "6003:                             tvb, offset + 1, len8, ENC_ASCII|ENC_NA);",
          "6004:         AMQP_INCREMENT(offset, (1 + len8), max_length);",
          "6005:     }",
          "6006:     if (flag1 & 0x40) {",
          "6008:         len16 = tvb_get_ntohs(tvb, offset);",
          "6009:         proto_tree_add_item(frag,",
          "6010:                             hf_amqp_0_10_struct_message_properties_user_id,",
          "6011:                             tvb, offset + 2, len16, ENC_NA);",
          "6012:         AMQP_INCREMENT(offset, (2 + len16), max_length);",
          "6013:     }",
          "6014:     if (flag1 & 0x80) {",
          "6016:         len16 = tvb_get_ntohs(tvb, offset);",
          "6017:         proto_tree_add_item(frag,",
          "6018:                             hf_amqp_0_10_struct_message_properties_app_id,",
          "6019:                             tvb, offset + 2, len16, ENC_NA);",
          "6020:         AMQP_INCREMENT(offset, (2 + len16), max_length);",
          "6021:     }",
          "6022:     if (flag2 & 0x01) {",
          "6024:         map_length = amqp_0_10_get_32bit_size(tvb, offset);",
          "6025:         AMQP_INCREMENT(offset, 4, max_length);",
          "6026:         ti = proto_tree_add_item(frag,",
          "6027:                                  hf_amqp_0_10_struct_message_properties_application_headers,",
          "6028:                                  tvb,",
          "6029:                                  offset,",
          "6030:                                  map_length, ENC_NA);",
          "6031:         dissect_amqp_0_10_map (tvb,",
          "6032:                                offset,",
          "6033:                                offset + map_length,",
          "6034:                                map_length,",
          "6035:                                ti);",
          "6036:         AMQP_INCREMENT(offset, map_length, max_length);",
          "6037:     }",
          "6038: }",
          "6040: static void",
          "6041: dissect_amqp_0_10_struct_exchange_query_result(tvbuff_t *tvb,",
          "6042:                                                packet_info *pinfo,",
          "6043:                                                proto_item *tree,",
          "6044:                                                int offset,",
          "6045:                                                guint32 struct_length)",
          "6046: {",
          "6047:     proto_item *ti;",
          "6048:     proto_item *result;",
          "6049:     proto_item *flags_item;",
          "6050:     guint8      flag1, flag2;",
          "6051:     guint8      len8;",
          "6052:     guint32     map_length;",
          "6053:     int         flags_offset;",
          "6054:     int         max_length;",
          "6056:     max_length = offset + AMQP_0_10_SIZE_MAX(struct_length);",
          "6057:     result = proto_item_add_subtree(tree, ett_args);",
          "6059:     flags_offset = offset;",
          "6060:     flag1 = tvb_get_guint8(tvb, offset);",
          "6061:     flag2 = tvb_get_guint8(tvb, offset+1);",
          "6062:     flags_item = proto_tree_add_item(result,",
          "6063:                                      hf_amqp_0_10_argument_packing_flags,",
          "6064:                                      tvb, offset, 2, ENC_BIG_ENDIAN);",
          "6065:     if (flag2 & ~0x0f)",
          "6066:         expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "6067:     AMQP_INCREMENT(offset, 2, max_length);",
          "6068:     if (flag1 & 0x01) {",
          "6070:         len8 = tvb_get_guint8(tvb, offset);",
          "6071:         proto_tree_add_item(result,",
          "6072:                             hf_amqp_0_10_method_exchange_declare_type,",
          "6073:                             tvb, offset + 1, len8, ENC_ASCII|ENC_NA);",
          "6074:         AMQP_INCREMENT(offset, (1 + len8), max_length);",
          "6075:     }",
          "6076:     proto_tree_add_item(result,",
          "6077:                         hf_amqp_0_10_struct_exchange_query_result_durable,",
          "6078:                         tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "6079:     proto_tree_add_item(result,",
          "6080:                         hf_amqp_0_10_struct_exchange_query_result_not_found,",
          "6081:                         tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "6082:     if (flag1 & 0x08) {",
          "6084:         map_length = amqp_0_10_get_32bit_size(tvb, offset);",
          "6085:         AMQP_INCREMENT(offset, 4, max_length);",
          "6086:         ti = proto_tree_add_item(result,",
          "6087:                                  hf_amqp_0_10_method_exchange_declare_arguments,",
          "6088:                                  tvb,",
          "6089:                                  offset - 4,",
          "6090:                                  map_length + 4, ENC_NA);",
          "6091:         dissect_amqp_0_10_map (tvb,",
          "6092:                                offset,",
          "6093:                                offset + map_length,",
          "6094:                                map_length,",
          "6095:                                ti);",
          "6096:         AMQP_INCREMENT(offset, map_length, max_length);",
          "6101: dissect_amqp_0_10_struct_queue_query_result(tvbuff_t *tvb,",
          "6102:                                             packet_info *pinfo,",
          "6103:                                             proto_item *tree,",
          "6104:                                             int offset,",
          "6105:                                             guint32 struct_length)",
          "6107:     proto_item *ti;",
          "6108:     proto_item *result;",
          "6109:     proto_item *flags_item;",
          "6110:     guint8      flag1, flag2;",
          "6111:     guint8      len8;",
          "6112:     guint32     map_length;",
          "6113:     int         flags_offset;",
          "6114:     int         max_length;",
          "6116:     max_length = offset + AMQP_0_10_SIZE_MAX(struct_length);",
          "6117:     result = proto_item_add_subtree(tree, ett_args);",
          "6122:     flags_item = proto_tree_add_item(result,",
          "6126:     if (flag2 != 0)",
          "6127:         expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "6128:     AMQP_INCREMENT(offset, 2, max_length);",
          "6129:     if (flag1 & 0x01) {",
          "6131:         len8 = tvb_get_guint8(tvb, offset);",
          "6132:         proto_tree_add_item(result,",
          "6133:                             hf_amqp_0_10_method_queue_name,",
          "6134:                             tvb, offset + 1, len8, ENC_ASCII|ENC_NA);",
          "6135:         AMQP_INCREMENT(offset, (1 + len8), max_length);",
          "6136:     }",
          "6138:         len8 = tvb_get_guint8(tvb, offset);",
          "6139:         proto_tree_add_item(result,",
          "6140:                             hf_amqp_0_10_method_queue_alt_exchange,",
          "6141:                             tvb, offset + 1, len8, ENC_ASCII|ENC_NA);",
          "6142:         AMQP_INCREMENT(offset, (1 + len8), max_length);",
          "6143:     }",
          "6147:     proto_tree_add_item(result,",
          "6148:                         hf_amqp_0_10_struct_queue_query_result_durable,",
          "6149:                         tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "6150:     proto_tree_add_item(result,",
          "6151:                         hf_amqp_0_10_struct_queue_query_result_exclusive,",
          "6152:                         tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "6153:     proto_tree_add_item(result,",
          "6154:                         hf_amqp_0_10_struct_queue_query_result_auto_delete,",
          "6155:                         tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "6157:         map_length = amqp_0_10_get_32bit_size(tvb, offset);",
          "6158:         AMQP_INCREMENT(offset, 4, max_length);",
          "6159:         ti = proto_tree_add_item(result,",
          "6160:                                  hf_amqp_0_10_method_queue_declare_arguments,",
          "6161:                                  tvb,",
          "6162:                                  offset - 4,",
          "6163:                                  map_length + 4, ENC_NA);",
          "6164:         dissect_amqp_0_10_map (tvb,",
          "6165:                                offset,",
          "6166:                                offset + map_length,",
          "6167:                                map_length,",
          "6168:                                ti);",
          "6169:         AMQP_INCREMENT(offset, (int)map_length, max_length);",
          "6170:     }",
          "6172:         proto_tree_add_item(result,",
          "6173:                             hf_amqp_0_10_struct_queue_query_result_message_count,",
          "6174:                             tvb, offset, 4, ENC_BIG_ENDIAN);",
          "6175:         AMQP_INCREMENT(offset, 4, max_length);",
          "6176:     }",
          "6178:         proto_tree_add_item(result,",
          "6179:                             hf_amqp_0_10_struct_queue_query_result_subscriber_count,",
          "6180:                             tvb, offset, 4, ENC_BIG_ENDIAN);",
          "6181:         AMQP_INCREMENT(offset, 4, max_length);",
          "6186: dissect_amqp_0_10_struct_file_properties(tvbuff_t *tvb,",
          "6187:                                          packet_info *pinfo,",
          "6188:                                          proto_tree *tree,",
          "6189:                                          int offset,",
          "6190:                                          guint32 struct_length)",
          "6192:     proto_item *ti;",
          "6193:     proto_item *props;",
          "6194:     proto_item *flags_item;",
          "6195:     guint8      flag1, flag2;",
          "6196:     guint8      len8;",
          "6197:     guint32     map_length;",
          "6198:     guint64     timestamp;",
          "6199:     int         max_length;",
          "6200:     nstime_t    tv;",
          "6202:     max_length = offset + AMQP_0_10_SIZE_MAX(struct_length);",
          "6203:     props = proto_item_add_subtree(tree, ett_args);",
          "6207:     flags_item = proto_tree_add_item(props,",
          "6208:                                      hf_amqp_0_10_argument_packing_flags,",
          "6209:                                      tvb, offset, 2, ENC_BIG_ENDIAN);",
          "6210:     if (flag2 & ~0x01)",
          "6211:         expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "6212:     AMQP_INCREMENT(offset, 2, max_length);",
          "6213:     if (flag1 & 0x01) {",
          "6215:         len8 = tvb_get_guint8(tvb, offset);",
          "6216:         proto_tree_add_item(props,",
          "6217:                             hf_amqp_0_10_struct_file_properties_content_type,",
          "6218:                             tvb, offset + 1, len8, ENC_ASCII|ENC_NA);",
          "6219:         AMQP_INCREMENT(offset, (1 + len8), max_length);",
          "6220:     }",
          "6221:     if (flag1 & 0x02) {",
          "6223:         len8 = tvb_get_guint8(tvb, offset);",
          "6224:         proto_tree_add_item(props,",
          "6225:                             hf_amqp_0_10_struct_file_properties_content_encoding,",
          "6226:                             tvb, offset + 1, len8, ENC_ASCII|ENC_NA);",
          "6227:         AMQP_INCREMENT(offset, (1 + len8), max_length);",
          "6228:     }",
          "6229:     if (flag1 & 0x04) {",
          "6231:         map_length = amqp_0_10_get_32bit_size(tvb, offset);",
          "6232:         AMQP_INCREMENT(offset, 4, max_length);",
          "6233:         ti = proto_tree_add_item(props,",
          "6234:                                  hf_amqp_0_10_struct_file_properties_headers,",
          "6235:                                  tvb,",
          "6236:                                  offset,",
          "6237:                                  map_length, ENC_NA);",
          "6238:         dissect_amqp_0_10_map (tvb,",
          "6239:                                offset,",
          "6240:                                offset + map_length,",
          "6241:                                map_length,",
          "6242:                                ti);",
          "6243:         AMQP_INCREMENT(offset, map_length, max_length);",
          "6244:     }",
          "6245:     if (flag1 & 0x08) {",
          "6247:         proto_tree_add_item(props,",
          "6248:                             hf_amqp_0_10_struct_file_properties_priority,",
          "6249:                             tvb, offset, 1, ENC_BIG_ENDIAN);",
          "6250:         AMQP_INCREMENT(offset, 1, max_length);",
          "6251:     }",
          "6252:     if (flag1 & 0x10) {",
          "6254:         len8 = tvb_get_guint8(tvb, offset);",
          "6255:         proto_tree_add_item(props,",
          "6256:                             hf_amqp_0_10_struct_file_properties_reply_to,",
          "6257:                             tvb, offset + 1, len8, ENC_ASCII|ENC_NA);",
          "6258:         AMQP_INCREMENT(offset, (1 + len8), max_length);",
          "6259:     }",
          "6260:     if (flag1 & 0x20) {",
          "6262:         len8 = tvb_get_guint8(tvb, offset);",
          "6263:         proto_tree_add_item(props,",
          "6264:                             hf_amqp_0_10_struct_file_properties_message_id,",
          "6265:                             tvb, offset + 1, len8, ENC_ASCII|ENC_NA);",
          "6266:         AMQP_INCREMENT(offset, (1 + len8), max_length);",
          "6267:     }",
          "6268:     if (flag1 & 0x40) {",
          "6270:         len8 = tvb_get_guint8(tvb, offset);",
          "6271:         proto_tree_add_item(props,",
          "6272:                             hf_amqp_0_10_struct_file_properties_filename,",
          "6273:                             tvb, offset + 1, len8, ENC_ASCII|ENC_NA);",
          "6274:         AMQP_INCREMENT(offset, (1 + len8), max_length);",
          "6275:     }",
          "6276:     if (flag1 & 0x80) {",
          "6278:         timestamp = tvb_get_ntoh64(tvb, offset);",
          "6279:         tv.secs = (time_t)timestamp;",
          "6280:         tv.nsecs = 0;",
          "6281:         proto_tree_add_time(props,",
          "6282:                             hf_amqp_0_10_struct_file_properties_timestamp,",
          "6283:                             tvb, offset, 8, &tv);",
          "6284:         AMQP_INCREMENT(offset, 8, max_length);",
          "6285:     }",
          "6286:     if (flag2 & 0x01) {",
          "6288:         len8 = tvb_get_guint8(tvb, offset);",
          "6289:         proto_tree_add_item(props,",
          "6290:                             hf_amqp_0_10_struct_file_properties_cluster_id,",
          "6291:                             tvb, offset + 1, len8, ENC_ASCII|ENC_NA);",
          "6292:         AMQP_INCREMENT(offset, (1 + len8), max_length);",
          "6293:     }",
          "6294: }",
          "6296: static void",
          "6297: dissect_amqp_0_10_struct_stream_properties(tvbuff_t *tvb,",
          "6298:                                            packet_info *pinfo,",
          "6299:                                            proto_tree *tree,",
          "6300:                                            int offset,",
          "6301:                                            guint32 struct_length)",
          "6302: {",
          "6303:     proto_item *ti;",
          "6304:     proto_item *props;",
          "6305:     proto_item *flags_item;",
          "6306:     guint8      flag1, flag2;",
          "6307:     guint8      len8;",
          "6308:     guint32     map_length;",
          "6309:     guint64     timestamp;",
          "6310:     int         max_length;",
          "6311:     nstime_t    tv;",
          "6313:     max_length = offset + AMQP_0_10_SIZE_MAX(struct_length);",
          "6314:     props = proto_item_add_subtree(tree, ett_args);",
          "6318:     flags_item = proto_tree_add_item(props,",
          "6321:     if ((flag1 & ~0x1f) || (flag2 != 0))",
          "6322:         expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "6323:     AMQP_INCREMENT(offset, 2, max_length);",
          "6324:     if (flag1 & 0x01) {",
          "6326:         len8 = tvb_get_guint8(tvb, offset);",
          "6327:         proto_tree_add_item(props,",
          "6328:                             hf_amqp_0_10_struct_stream_properties_content_type,",
          "6329:                             tvb, offset + 1, len8, ENC_ASCII|ENC_NA);",
          "6330:         AMQP_INCREMENT(offset, (1 + len8), max_length);",
          "6331:     }",
          "6332:     if (flag1 & 0x02) {",
          "6334:         len8 = tvb_get_guint8(tvb, offset);",
          "6335:         proto_tree_add_item(props,",
          "6336:                             hf_amqp_0_10_struct_stream_properties_content_encoding,",
          "6337:                             tvb, offset + 1, len8, ENC_ASCII|ENC_NA);",
          "6338:         AMQP_INCREMENT(offset, (1 + len8), max_length);",
          "6339:     }",
          "6340:     if (flag1 & 0x04) {",
          "6342:         map_length = amqp_0_10_get_32bit_size(tvb, offset);",
          "6343:         AMQP_INCREMENT(offset, 4, max_length);",
          "6344:         ti = proto_tree_add_item(props,",
          "6345:                                  hf_amqp_0_10_struct_stream_properties_headers,",
          "6346:                                  tvb,",
          "6347:                                  offset,",
          "6348:                                  map_length, ENC_NA);",
          "6349:         dissect_amqp_0_10_map (tvb,",
          "6350:                                offset,",
          "6351:                                offset + map_length,",
          "6352:                                map_length,",
          "6353:                                ti);",
          "6354:         AMQP_INCREMENT(offset, map_length, max_length);",
          "6355:     }",
          "6356:     if (flag1 & 0x08) {",
          "6358:         proto_tree_add_item(props,",
          "6359:                             hf_amqp_0_10_struct_stream_properties_priority,",
          "6360:                             tvb, offset, 1, ENC_BIG_ENDIAN);",
          "6361:         AMQP_INCREMENT(offset, 1, max_length);",
          "6362:     }",
          "6363:     if (flag1 & 0x10) {",
          "6365:         timestamp = tvb_get_ntoh64(tvb, offset);",
          "6366:         tv.secs = (time_t)timestamp;",
          "6367:         tv.nsecs = 0;",
          "6368:         proto_tree_add_time(props,",
          "6369:                             hf_amqp_0_10_struct_stream_properties_timestamp,",
          "6370:                             tvb, offset, 8, &tv);",
          "6371:         AMQP_INCREMENT(offset, 8, max_length);",
          "6372:     }",
          "6373: }",
          "6375: static void",
          "6376: dissect_amqp_0_10_struct32(tvbuff_t *tvb,",
          "6377:                            packet_info *pinfo,",
          "6378:                            proto_tree *tree,",
          "6379:                            int offset,",
          "6380:                            guint32 struct_length)",
          "6381: {",
          "6382:     guint8      class_code;",
          "6383:     guint8      struct_code;",
          "6384:     guint8      flag1;",
          "6385:     guint16     size;",
          "6386:     guint16     value;",
          "6387:     guint32     array_length;",
          "6388:     guint32     consumed;",
          "6389:     proto_tree *ti;",
          "6390:     proto_tree *result;",
          "6392:     consumed    = 0;",
          "6393:     class_code  = tvb_get_guint8(tvb, offset);",
          "6394:     struct_code = tvb_get_guint8(tvb, offset + 1);",
          "6396:     switch(class_code) {",
          "6397:     case AMQP_0_10_CLASS_MESSAGE:",
          "6398:         switch (struct_code) {",
          "6399:         case AMQP_0_10_STRUCT_MESSAGE_DELIVERY_PROPERTIES:",
          "6400:             proto_item_set_text(tree, \"message.delivery-properties\");",
          "6401:             dissect_amqp_0_10_struct_delivery_properties(tvb,",
          "6402:                                                          pinfo,",
          "6403:                                                          tree,",
          "6404:                                                          offset,",
          "6405:                                                          struct_length);",
          "6406:             break;",
          "6407:         case AMQP_0_10_STRUCT_MESSAGE_FRAGMENT_PROPERTIES:",
          "6408:             proto_item_set_text(tree, \"message.fragment-properties\");",
          "6409:             dissect_amqp_0_10_struct_fragment_properties(tvb,",
          "6410:                                                          pinfo,",
          "6411:                                                          tree,",
          "6412:                                                          offset,",
          "6413:                                                          struct_length);",
          "6414:             break;",
          "6415:         case AMQP_0_10_STRUCT_MESSAGE_MESSAGE_PROPERTIES:",
          "6416:             proto_item_set_text(tree, \"message.message-properties\");",
          "6417:             dissect_amqp_0_10_struct_message_properties(tvb,",
          "6418:                                                         pinfo,",
          "6419:                                                         tree,",
          "6420:                                                         offset,",
          "6421:                                                         struct_length);",
          "6422:             break;",
          "6423:         case AMQP_0_10_STRUCT_MESSAGE_ACQUIRED:",
          "6424:             proto_item_set_text(tree, \"message.acquired\");",
          "6425:             result = proto_item_add_subtree(tree, ett_args);",
          "6427:             offset += 2;",
          "6428:             flag1 = tvb_get_guint8(tvb, offset);",
          "6429:             proto_tree_add_item(result, hf_amqp_0_10_argument_packing_flags,",
          "6430:                                 tvb, offset, 2, ENC_BIG_ENDIAN);",
          "6431:             AMQP_INCREMENT(consumed, 2, struct_length);",
          "6432:             offset += 2;",
          "6433:             if (flag1 & 0x01) {",
          "6435:                 size = tvb_get_ntohs(tvb, offset);",
          "6436:                 ti = proto_tree_add_item(result,",
          "6437:                                          hf_amqp_0_10_struct_acquired_transfers,",
          "6438:                                          tvb, offset, size + 2, ENC_NA);",
          "6439:                 format_amqp_0_10_sequence_set(tvb, offset + 2, size, ti);",
          "6440:             }",
          "6441:             break;",
          "6442:         case AMQP_0_10_STRUCT_MESSAGE_RESUME_RESULT:",
          "6443:             proto_item_set_text(tree, \"message.resume-result\");",
          "6444:             result = proto_item_add_subtree(tree, ett_args);",
          "6446:             offset += 2;",
          "6447:             flag1 = tvb_get_guint8(tvb, offset);",
          "6448:             proto_tree_add_item(result, hf_amqp_0_10_argument_packing_flags,",
          "6450:             AMQP_INCREMENT(consumed, 2, struct_length);",
          "6452:             if (flag1 & 0x01) {",
          "6454:                 proto_tree_add_item(result,",
          "6455:                                     hf_amqp_0_10_struct_resume_result_offset,",
          "6456:                                     tvb, offset, 8, ENC_BIG_ENDIAN);",
          "6457:             }",
          "6458:             break;",
          "6462:     case AMQP_0_10_CLASS_DTX:",
          "6463:         switch (struct_code) {",
          "6464:         case AMQP_0_10_STRUCT_DTX_XA_RESULT:",
          "6466:             offset += 2;",
          "6469:             offset += 2;",
          "6470:             value = tvb_get_ntohs(tvb, offset);",
          "6473:             proto_item_set_text(tree, \"dtx.xa-status: %s\",",
          "6474:                                 val_to_str(value,",
          "6475:                                            amqp_0_10_xa_status,",
          "6476:                                            \"Invalid xa-status %d\"));",
          "6477:             break;",
          "6479:         case AMQP_0_10_STRUCT_DTX_RECOVER_RESULT:",
          "6480:             proto_item_set_text(tree, \"dtx.recover-result\");",
          "6482:             offset += 2;",
          "6485:             offset += 2;",
          "6486:             array_length = amqp_0_10_get_32bit_size(tvb, offset);",
          "6487:             AMQP_INCREMENT(consumed, 4, struct_length);",
          "6489:             dissect_amqp_0_10_array(tvb,",
          "6490:                                     pinfo,",
          "6491:                                     offset,",
          "6492:                                     offset + array_length,",
          "6493:                                     array_length,",
          "6494:                                     tree);",
          "6495:             break;",
          "6499:     case AMQP_0_10_CLASS_EXCHANGE:",
          "6500:         switch (struct_code) {",
          "6501:         case AMQP_0_10_STRUCT_EXCHANGE_QUERY_RESULT:",
          "6502:             proto_item_set_text(tree, \"exchange.exchange-query-result\");",
          "6503:             dissect_amqp_0_10_struct_exchange_query_result(tvb,",
          "6504:                                                            pinfo,",
          "6505:                                                            tree,",
          "6506:                                                            offset,",
          "6507:                                                            struct_length);",
          "6508:             break;",
          "6510:         case AMQP_0_10_STRUCT_EXCHANGE_BOUND_RESULT:",
          "6511:             proto_item_set_text(tree, \"exchange.exchange-bound-result\");",
          "6512:             result = proto_item_add_subtree(tree, ett_args);",
          "6514:             offset += 2;",
          "6515:             proto_tree_add_item(result,",
          "6516:                                 hf_amqp_0_10_struct_exchange_bound_result_exchange_not_found,",
          "6517:                                 tvb, offset, 1, ENC_BIG_ENDIAN);",
          "6518:             proto_tree_add_item(result,",
          "6519:                                 hf_amqp_0_10_struct_exchange_bound_result_queue_not_found,",
          "6520:                                 tvb, offset, 1, ENC_BIG_ENDIAN);",
          "6521:             proto_tree_add_item(result,",
          "6522:                                 hf_amqp_0_10_struct_exchange_bound_result_queue_not_matched,",
          "6523:                                 tvb, offset, 1, ENC_BIG_ENDIAN);",
          "6524:             proto_tree_add_item(result,",
          "6525:                                 hf_amqp_0_10_struct_exchange_bound_result_key_not_matched,",
          "6526:                                 tvb, offset, 1, ENC_BIG_ENDIAN);",
          "6527:             proto_tree_add_item(result,",
          "6528:                                 hf_amqp_0_10_struct_exchange_bound_result_args_not_matched,",
          "6529:                                 tvb, offset, 1, ENC_BIG_ENDIAN);",
          "6530:             break;",
          "6534:     case AMQP_0_10_CLASS_QUEUE:",
          "6535:         switch (struct_code) {",
          "6536:         case AMQP_0_10_STRUCT_QUEUE_QUERY_RESULT:",
          "6537:             proto_item_set_text(tree, \"queue.queue-query-result\");",
          "6538:             dissect_amqp_0_10_struct_queue_query_result(tvb,",
          "6539:                                                         pinfo,",
          "6540:                                                         tree,",
          "6541:                                                         offset,",
          "6542:                                                         struct_length);",
          "6543:             break;",
          "6545:         break;",
          "6547:     case AMQP_0_10_CLASS_FILE:",
          "6548:         switch (struct_code) {",
          "6549:         case AMQP_0_10_STRUCT_FILE_PROPERTIES:",
          "6550:             proto_item_set_text(tree, \"file.file-properties\");",
          "6551:             dissect_amqp_0_10_struct_file_properties(tvb,",
          "6552:                                                      pinfo,",
          "6553:                                                      tree,",
          "6554:                                                      offset,",
          "6555:                                                      struct_length);",
          "6556:             break;",
          "6560:     case AMQP_0_10_CLASS_STREAM:",
          "6561:         switch (struct_code) {",
          "6562:         case AMQP_0_10_STRUCT_STREAM_PROPERTIES:",
          "6563:             proto_item_set_text(tree, \"stream.stream-properties\");",
          "6564:             dissect_amqp_0_10_struct_stream_properties(tvb,",
          "6565:                                                        pinfo,",
          "6566:                                                        tree,",
          "6567:                                                        offset,",
          "6568:                                                        struct_length);",
          "6569:             break;",
          "6572:     }",
          "6573: }",
          "6587: static guint",
          "6588: dissect_amqp_1_0_list(tvbuff_t *tvb,",
          "6589:                       packet_info *pinfo,",
          "6590:                       int offset,",
          "6591:                       int bound,",
          "6592:                       proto_item *item,",
          "6593:                       int hf_amqp_type,",
          "6594:                       guint32 hf_amqp_subtype_count,",
          "6595:                       const int **hf_amqp_subtypes,",
          "6596:                       const char *name)",
          "6597: {",
          "6598:     proto_item *list_tree;",
          "6599:     guint8      type;",
          "6600:     guint8      count_len;",
          "6601:     guint32     element_count;",
          "6602:     guint32     element_size;",
          "6603:     guint32     decoded_element_size;",
          "6604:     guint32     orig_offset;",
          "6605:     guint32     decoded_elements;",
          "6606:     int         hf_amqp_item;",
          "6608:     list_tree = 0;",
          "6609:     decoded_elements = 0;",
          "6610:     orig_offset = offset;",
          "6612:     if (proto_registrar_get_ftype(hf_amqp_type) != FT_NONE)",
          "6613:     {",
          "6614:         expert_add_info_format(pinfo, item, &ei_amqp_unknown_amqp_type,",
          "6615:                                \"Unexpected list type at frame position %d of field \\\"%s\\\"\",",
          "6616:                                offset,",
          "6617:                                name ? name : proto_registrar_get_name(hf_amqp_type));",
          "6618:         return bound-orig_offset;",
          "6619:     }",
          "6621:     type = tvb_get_guint8(tvb, offset);",
          "6622:     AMQP_INCREMENT(offset, 1, bound);",
          "6623:     switch (type) {",
          "6624:     case AMQP_1_0_TYPE_LIST0:",
          "6625:         count_len = 0;",
          "6626:         element_size = 0;",
          "6627:         element_count = 0;",
          "6628:         break;",
          "6629:     case AMQP_1_0_TYPE_LIST8:",
          "6630:         count_len = 1;",
          "6631:         element_size = tvb_get_guint8(tvb, offset);",
          "6632:         element_count = tvb_get_guint8(tvb, offset+count_len);",
          "6633:         break;",
          "6634:     case AMQP_1_0_TYPE_LIST32:",
          "6635:         count_len = 4;",
          "6636:         element_size = tvb_get_ntohl(tvb, offset);",
          "6637:         element_count = tvb_get_ntohl(tvb, offset+count_len);",
          "6638:         break;",
          "6639:     default:",
          "6640:         proto_tree_add_none_format(list_tree, hf_amqp_1_0_list, tvb,",
          "6641:                                    offset-1,",
          "6642:                                    1,",
          "6643:                                    \"(unknown type %d)\",",
          "6644:                                    type);",
          "6645:         expert_add_info_format(pinfo,",
          "6646:                                list_tree,",
          "6647:                                &ei_amqp_unknown_amqp_type,",
          "6648:                                \"Unknown AMQP list type %d\",",
          "6649:                                type);",
          "6650:         return bound-orig_offset;",
          "6653:     list_tree = proto_tree_add_none_format(item,",
          "6654:                                            hf_amqp_type,",
          "6655:                                            tvb,",
          "6656:                                            offset-1,",
          "6657:                                            element_size+1+count_len,",
          "6658:                                            \"%s\",",
          "6659:                                            name ? name : proto_registrar_get_name(hf_amqp_type));",
          "6660:     AMQP_INCREMENT(offset, count_len*2, bound);",
          "6662:     if (element_count > 0)",
          "6663:         list_tree = proto_item_add_subtree(list_tree, ett_amqp_1_0_list);",
          "6666:     if (hf_amqp_subtype_count == 0)",
          "6667:         proto_item_append_text(list_tree, \" (list of %d element%s)\", element_count, element_suffix[element_count!=1]);",
          "6669:     if (element_count > element_size)",
          "6670:     {",
          "6671:         expert_add_info_format(pinfo,",
          "6672:                                list_tree,",
          "6673:                                &ei_amqp_invalid_number_of_params,",
          "6674:                                \"Number of list elements (%d) bigger than list size (%d)\",",
          "6675:                                element_count, element_size);",
          "6676:         return bound-orig_offset;",
          "6679:     while ((element_count > 0) && (offset < bound)) {",
          "6680:         decoded_element_size = 0;",
          "6681:         if (decoded_elements<hf_amqp_subtype_count)",
          "6682:             hf_amqp_item = *(hf_amqp_subtypes[decoded_elements]);",
          "6683:         else",
          "6685:         get_amqp_1_0_type_value_formatter(tvb,",
          "6686:                                           pinfo,",
          "6687:                                           offset,",
          "6688:                                           bound,",
          "6689:                                           hf_amqp_item,",
          "6690:                                           NULL,",
          "6691:                                           &decoded_element_size,",
          "6692:                                           list_tree);",
          "6693:         element_count -= 1;",
          "6694:         decoded_elements += 1;",
          "6695:         AMQP_INCREMENT(offset, decoded_element_size, bound);",
          "6697:     if (element_count > 0)",
          "6698:         expert_add_info_format(pinfo,",
          "6699:                                list_tree,",
          "6700:                                &ei_amqp_invalid_number_of_params,",
          "6701:                                \"Number of list elements (%d) not matching number of decoded elements (%d)\",",
          "6702:                                element_count+decoded_elements, decoded_elements);",
          "6703:     return offset-orig_offset;",
          "6709: static guint",
          "6710: dissect_amqp_1_0_map(tvbuff_t *tvb,",
          "6711:                      packet_info *pinfo,",
          "6712:                      int offset,",
          "6713:                      int bound,",
          "6714:                      proto_item *item,",
          "6715:                      int hf_amqp_type,",
          "6716:                      const char *name)",
          "6718:     proto_item *map_tree;",
          "6719:     guint8      type;",
          "6720:     guint8      count_len;",
          "6721:     guint32     element_count;",
          "6722:     guint32     element_size;",
          "6723:     struct amqp1_typeinfo* element_type;",
          "6724:     guint32     decoded_element_size;",
          "6725:     guint32     orig_offset;",
          "6726:     const char *value = NULL;",
          "6728:     map_tree = 0;",
          "6729:     orig_offset = offset;",
          "6731:     if (proto_registrar_get_ftype(hf_amqp_type) != FT_NONE)",
          "6732:     {",
          "6733:         expert_add_info_format(pinfo, item, &ei_amqp_unknown_amqp_type,",
          "6734:                                \"Unexpected map type at frame position %d of field \\\"%s\\\"\",",
          "6735:                                offset,",
          "6736:                                name ? name : proto_registrar_get_name(hf_amqp_type));",
          "6737:         return bound-orig_offset;",
          "6740:     type = tvb_get_guint8(tvb, offset);",
          "6741:     AMQP_INCREMENT(offset, 1, bound);",
          "6742:     switch (type) {",
          "6743:     case AMQP_1_0_TYPE_MAP8:",
          "6744:         count_len = 1;",
          "6745:         element_size = tvb_get_guint8(tvb, offset);",
          "6746:         element_count = tvb_get_guint8(tvb, offset+count_len);",
          "6747:         break;",
          "6748:     case AMQP_1_0_TYPE_MAP32:",
          "6749:         count_len = 4;",
          "6750:         element_size = tvb_get_ntohl(tvb, offset);",
          "6751:         element_count = tvb_get_ntohl(tvb, offset+count_len);",
          "6752:         break;",
          "6753:     default:",
          "6754:         proto_tree_add_none_format(map_tree, hf_amqp_1_0_map, tvb,",
          "6755:                                    offset-1,",
          "6756:                                    1,",
          "6757:                                    \"(unknown type %d)\",",
          "6758:                                    type);",
          "6759:         expert_add_info_format(pinfo,",
          "6760:                                map_tree,",
          "6761:                                &ei_amqp_unknown_amqp_type,",
          "6762:                                \"Unknown AMQP map type %d\",",
          "6763:                                type);",
          "6764:         return bound-orig_offset;",
          "6767:     map_tree = proto_tree_add_none_format(item,",
          "6768:                                           hf_amqp_type,",
          "6769:                                           tvb,",
          "6770:                                           offset-1,",
          "6771:                                           element_size+1+count_len,",
          "6772:                                           \"%s\",",
          "6773:                                           name ? name : proto_registrar_get_name(hf_amqp_type));",
          "6774:     AMQP_INCREMENT(offset, count_len*2, bound);",
          "6776:     if (element_count > 0)",
          "6777:         map_tree = proto_item_add_subtree(map_tree, ett_amqp_1_0_map);",
          "6778:     if (element_count%2==1) {",
          "6779:         expert_add_info_format(pinfo,",
          "6780:                                map_tree,",
          "6781:                                &ei_amqp_invalid_number_of_params,",
          "6782:                                \"Odd number of map items: %d\",",
          "6783:                                element_count);",
          "6784:         return bound-orig_offset;",
          "6787:     if (element_count > element_size)",
          "6788:     {",
          "6789:         expert_add_info_format(pinfo,",
          "6790:                                map_tree,",
          "6791:                                &ei_amqp_invalid_number_of_params,",
          "6792:                                \"Number of map elements (%d) bigger than map size (%d)\",",
          "6793:                                element_count, element_size);",
          "6794:         return bound-orig_offset;",
          "6797:     proto_item_append_text(map_tree,",
          "6798:                            \" (map of %d element%s)\",",
          "6799:                            (element_count/2),",
          "6800:                            element_suffix[(element_count/2)!=1]);",
          "6802:     while (element_count > 0) {",
          "6804:             element_type = decode_fixed_type(tvb_get_guint8(tvb, offset));",
          "6805:             if (element_type)",
          "6806:             {",
          "6807:                 decoded_element_size=element_type->formatter(tvb, offset+1, bound, element_type->known_size, &value);",
          "6808:                 AMQP_INCREMENT(offset, decoded_element_size+1, bound);",
          "6809:             }",
          "6810:             else",
          "6812:                 proto_tree_add_none_format(map_tree, hf_amqp_1_0_map, tvb,",
          "6813:                                            offset,",
          "6814:                                            1,",
          "6815:                                            \"(unknown map key type %d)\",",
          "6816:                                            tvb_get_guint8(tvb, offset));",
          "6817:                 expert_add_info_format(pinfo,",
          "6818:                                        map_tree,",
          "6819:                                        &ei_amqp_unknown_amqp_type,",
          "6820:                                        \"Unknown AMQP map key type %d\",",
          "6821:                                        tvb_get_guint8(tvb, offset));",
          "6822:                 AMQP_INCREMENT(offset, 1, bound);",
          "6823:             }",
          "6826:             get_amqp_1_0_type_value_formatter(tvb,",
          "6827:                                               pinfo,",
          "6828:                                               offset,",
          "6829:                                               bound,",
          "6831:                                               value,",
          "6832:                                               &decoded_element_size,",
          "6833:                                               map_tree);",
          "6834:             AMQP_INCREMENT(offset, decoded_element_size, bound);",
          "6836:         element_count--;",
          "6838:     return offset-orig_offset;",
          "6844: static guint",
          "6845: dissect_amqp_1_0_array(tvbuff_t *tvb,",
          "6846:                        packet_info *pinfo,",
          "6847:                        int offset,",
          "6848:                        int bound,",
          "6849:                        proto_item *item,",
          "6850:                        int hf_amqp_type,",
          "6851:                        guint32 hf_amqp_subtype_count,",
          "6852:                        const int **hf_amqp_subtypes,",
          "6853:                        const char *name)",
          "6855:     proto_item *array_tree;",
          "6856:     guint8      type;",
          "6857:     guint8      count_len;",
          "6858:     guint32     element_count;",
          "6859:     guint32     element_size;",
          "6860:     guint32     element_type;",
          "6861:     guint32     decoded_element_size;",
          "6862:     guint32     orig_offset;",
          "6863:     guint32     decoded_elements;",
          "6864:     int         hf_amqp_item;",
          "6865:     guint32     hf_amqp_subtype_count_array = 0;",
          "6866:     const int   **hf_amqp_subtypes_array = NULL;",
          "6867:     const char  *type_name_array = NULL;",
          "6869:     array_tree = 0;",
          "6870:     decoded_elements = 0;",
          "6871:     orig_offset = offset;",
          "6873:     if (proto_registrar_get_ftype(hf_amqp_type) != FT_NONE)",
          "6874:     {",
          "6875:         expert_add_info_format(pinfo, item, &ei_amqp_unknown_amqp_type,",
          "6876:                                \"Unexpected array type at frame position %d of field \\\"%s\\\"\",",
          "6877:                                offset,",
          "6878:                                name ? name : proto_registrar_get_name(hf_amqp_type));",
          "6879:         return bound-orig_offset;",
          "6880:     }",
          "6882:     type = tvb_get_guint8(tvb, offset);",
          "6883:     AMQP_INCREMENT(offset, 1, bound);",
          "6884:     switch (type) {",
          "6885:     case AMQP_1_0_TYPE_ARRAY8:",
          "6886:         count_len = 1;",
          "6887:         element_size = tvb_get_guint8(tvb, offset);",
          "6888:         element_count = tvb_get_guint8(tvb, offset+count_len);",
          "6889:         break;",
          "6890:     case AMQP_1_0_TYPE_ARRAY32:",
          "6891:         count_len = 4;",
          "6892:         element_size = tvb_get_ntohl(tvb, offset);",
          "6893:         element_count = tvb_get_ntohl(tvb, offset+count_len);",
          "6894:         break;",
          "6895:     default:",
          "6896:         proto_tree_add_none_format(array_tree, hf_amqp_1_0_list, tvb,",
          "6897:                                    offset-1,",
          "6898:                                    1,",
          "6899:                                    \"(unknown type %d)\",",
          "6900:                                    type);",
          "6901:         expert_add_info_format(pinfo,",
          "6902:                                array_tree,",
          "6903:                                &ei_amqp_unknown_amqp_type,",
          "6904:                                \"Unknown AMQP array type %d\",",
          "6905:                                type);",
          "6906:         return bound-orig_offset;",
          "6907:     }",
          "6909:     element_type = get_amqp_1_0_type_formatter(tvb,",
          "6910:                                                offset+count_len*2,",
          "6911:                                                bound,",
          "6912:                                                &hf_amqp_type,",
          "6913:                                                &type_name_array,",
          "6914:                                                &hf_amqp_subtype_count_array,",
          "6915:                                                &hf_amqp_subtypes_array,",
          "6916:                                                &decoded_element_size);",
          "6918:     array_tree = proto_tree_add_none_format(item,",
          "6919:                                             hf_amqp_type,",
          "6920:                                             tvb,",
          "6921:                                             offset-1,",
          "6922:                                             element_size+1+count_len,",
          "6923:                                             \"%s\",",
          "6924:                                             name ? name : proto_registrar_get_name(hf_amqp_type));",
          "6925:     AMQP_INCREMENT(offset, count_len*2+decoded_element_size, bound);",
          "6927:     if (element_count > 0)",
          "6928:         array_tree = proto_item_add_subtree(array_tree, ett_amqp_1_0_array);",
          "6931:     if (hf_amqp_subtype_count == 0)",
          "6932:         proto_item_append_text(array_tree, \" (array of %d element%s)\", element_count, element_suffix[element_count!=1]);",
          "6934:     if (element_count > element_size)",
          "6935:     {",
          "6936:         expert_add_info_format(pinfo,",
          "6937:                                array_tree,",
          "6938:                                &ei_amqp_invalid_number_of_params,",
          "6939:                                \"Number of array elements (%d) bigger than array size (%d)\",",
          "6940:                                element_count, element_size);",
          "6941:         return bound-orig_offset;",
          "6944:     while ((element_count > 0) && (offset < bound)) {",
          "6945:         decoded_element_size = 0;",
          "6946:         if (decoded_elements<hf_amqp_subtype_count)",
          "6947:             hf_amqp_item = *(hf_amqp_subtypes[decoded_elements]);",
          "6950:         get_amqp_1_0_value_formatter(tvb,",
          "6951:                                      pinfo,",
          "6953:                                      offset,",
          "6955:                                      hf_amqp_item,",
          "6959:                                      &decoded_element_size,",
          "6960:                                      array_tree);",
          "6961:         element_count -= 1;",
          "6962:         decoded_elements += 1;",
          "6963:         if (decoded_element_size==0)",
          "6965:         AMQP_INCREMENT(offset, decoded_element_size, bound);",
          "6967:     if (element_count > 0)",
          "6968:         expert_add_info_format(pinfo,",
          "6969:                                array_tree,",
          "6970:                                &ei_amqp_invalid_number_of_params,",
          "6971:                                \"Number of array elements (%d) not matching number of decoded elements (%d)\",",
          "6972:                                element_count+decoded_elements, decoded_elements);",
          "6973:     return offset-orig_offset;",
          "6981: static guint32",
          "6982: dissect_amqp_1_0_AMQP_frame(tvbuff_t *tvb,",
          "6983:                             guint offset,",
          "6984:                             guint16 bound,",
          "6985:                             proto_item *amqp_tree,",
          "6986:                             packet_info *pinfo,",
          "6987:                             const gchar **method_name)",
          "6989:     proto_item  *args_tree;",
          "6990:     guint32     arg_length = 0;",
          "6991:     guint8      method;",
          "6992:     guint       orig_offset = offset;",
          "6996:         return 0;",
          "6998:     args_tree = proto_item_add_subtree(amqp_tree, ett_args);",
          "6999:     method = tvb_get_guint8(tvb, offset+2);",
          "7001:                                     \"<invalid AMQP performative>\");",
          "7002:     proto_tree_add_item(args_tree, hf_amqp_1_0_amqp_performative, tvb, offset+2, 1, ENC_BIG_ENDIAN);",
          "7004:     switch(method) {",
          "7005:         case AMQP_1_0_AMQP_OPEN:",
          "7006:             arg_length = dissect_amqp_1_0_list(tvb,",
          "7007:                                                pinfo,",
          "7008:                                                offset,",
          "7009:                                                bound,",
          "7010:                                                args_tree,",
          "7011:                                                hf_amqp_method_arguments,",
          "7012:                                                10, hf_amqp_1_0_amqp_open_items, NULL);",
          "7013:             break;",
          "7014:         case AMQP_1_0_AMQP_BEGIN:",
          "7015:             arg_length = dissect_amqp_1_0_list(tvb,",
          "7016:                                                pinfo,",
          "7017:                                                offset,",
          "7018:                                                bound,",
          "7019:                                                args_tree,",
          "7020:                                                hf_amqp_method_arguments,",
          "7021:                                                8, hf_amqp_1_0_amqp_begin_items, NULL);",
          "7022:             break;",
          "7023:         case AMQP_1_0_AMQP_ATTACH:",
          "7024:             arg_length = dissect_amqp_1_0_list(tvb,",
          "7025:                                                pinfo,",
          "7026:                                                offset,",
          "7027:                                                bound,",
          "7028:                                                args_tree,",
          "7029:                                                hf_amqp_method_arguments,",
          "7030:                                                14, hf_amqp_1_0_amqp_attach_items, NULL);",
          "7031:             break;",
          "7032:         case AMQP_1_0_AMQP_FLOW:",
          "7033:             arg_length = dissect_amqp_1_0_list(tvb,",
          "7034:                                                pinfo,",
          "7035:                                                offset,",
          "7036:                                                bound,",
          "7037:                                                args_tree,",
          "7038:                                                hf_amqp_method_arguments,",
          "7039:                                                11, hf_amqp_1_0_amqp_flow_items, NULL);",
          "7040:             break;",
          "7041:         case AMQP_1_0_AMQP_TRANSFER:",
          "7042:             arg_length = dissect_amqp_1_0_list(tvb,",
          "7043:                                                pinfo,",
          "7044:                                                offset,",
          "7045:                                                bound,",
          "7046:                                                args_tree,",
          "7047:                                                hf_amqp_method_arguments,",
          "7048:                                                11, hf_amqp_1_0_amqp_transfer_items, NULL);",
          "7050:             while (offset+arg_length < bound) {",
          "7051:                 AMQP_INCREMENT(offset, arg_length, bound);",
          "7052:                 get_amqp_1_0_type_value_formatter(tvb,",
          "7053:                                                   pinfo,",
          "7054:                                                   offset,",
          "7055:                                                   bound,",
          "7057:                                                   NULL,",
          "7058:                                                   &arg_length,",
          "7059:                                                   args_tree);",
          "7060:             }",
          "7061:             break;",
          "7062:         case AMQP_1_0_AMQP_DISPOSITION:",
          "7063:             arg_length = dissect_amqp_1_0_list(tvb,",
          "7064:                                                pinfo,",
          "7065:                                                offset,",
          "7066:                                                bound,",
          "7067:                                                args_tree,",
          "7068:                                                hf_amqp_method_arguments,",
          "7069:                                                6, hf_amqp_1_0_amqp_disposition_items, NULL);",
          "7070:             break;",
          "7071:         case AMQP_1_0_AMQP_DETACH:",
          "7072:             arg_length = dissect_amqp_1_0_list(tvb,",
          "7073:                                                pinfo,",
          "7074:                                                offset,",
          "7075:                                                bound,",
          "7076:                                                args_tree,",
          "7077:                                                hf_amqp_method_arguments,",
          "7078:                                                3, hf_amqp_1_0_amqp_detach_items, NULL);",
          "7079:             break;",
          "7080:         case AMQP_1_0_AMQP_END:",
          "7081:             arg_length = dissect_amqp_1_0_list(tvb,",
          "7082:                                                pinfo,",
          "7083:                                                offset,",
          "7084:                                                bound,",
          "7085:                                                args_tree,",
          "7086:                                                hf_amqp_method_arguments,",
          "7087:                                                1, hf_amqp_1_0_amqp_end_items, NULL);",
          "7088:             break;",
          "7089:         case AMQP_1_0_AMQP_CLOSE:",
          "7090:             arg_length = dissect_amqp_1_0_list(tvb,",
          "7091:                                                pinfo,",
          "7092:                                                offset,",
          "7093:                                                bound,",
          "7094:                                                args_tree,",
          "7095:                                                hf_amqp_method_arguments,",
          "7096:                                                1, hf_amqp_1_0_amqp_close_items, NULL);",
          "7097:             break;",
          "7098:         default:",
          "7099:             expert_add_info_format(pinfo,",
          "7100:                                    amqp_tree,",
          "7101:                                    &ei_amqp_unknown_amqp_command,",
          "7102:                                    \"Unknown AMQP performative %d\",",
          "7103:                                    tvb_get_guint8(tvb, offset + 2));",
          "7104:             return bound-orig_offset;",
          "7106:     return (arg_length) + (offset-orig_offset);",
          "7112: static guint32",
          "7113: dissect_amqp_1_0_SASL_frame(tvbuff_t *tvb,",
          "7114:                             guint offset,",
          "7115:                             guint16 bound,",
          "7116:                             proto_item *amqp_tree,",
          "7117:                             packet_info *pinfo,",
          "7118:                             const gchar **method_name)",
          "7120:     proto_item  *args_tree;",
          "7121:     guint32     arg_length = 0;",
          "7122:     guint8      method;",
          "7123:     guint       orig_offset = offset;",
          "7125:     args_tree = proto_item_add_subtree(amqp_tree, ett_args);",
          "7126:     method = tvb_get_guint8(tvb, offset+2);",
          "7128:                                     \"<invalid SASL method>\");",
          "7129:     proto_tree_add_item(args_tree, hf_amqp_1_0_sasl_method, tvb, offset+2, 1, ENC_BIG_ENDIAN);",
          "7132:     switch(method) {",
          "7133:         case AMQP_1_0_SASL_MECHANISMS:",
          "7134:             arg_length = dissect_amqp_1_0_list(tvb,",
          "7135:                                                pinfo,",
          "7136:                                                offset,",
          "7137:                                                bound,",
          "7138:                                                args_tree,",
          "7139:                                                hf_amqp_method_arguments,",
          "7140:                                                1, hf_amqp_1_0_sasl_mechanisms_items, NULL);",
          "7141:             break;",
          "7142:         case AMQP_1_0_SASL_INIT:",
          "7143:             arg_length = dissect_amqp_1_0_list(tvb,",
          "7144:                                                pinfo,",
          "7145:                                                offset,",
          "7146:                                                bound,",
          "7147:                                                args_tree,",
          "7148:                                                hf_amqp_method_arguments,",
          "7149:                                                3, hf_amqp_1_0_sasl_init_items, NULL);",
          "7150:             break;",
          "7151:          case AMQP_1_0_SASL_CHALLENGE:",
          "7152:             arg_length = dissect_amqp_1_0_list(tvb,",
          "7153:                                                pinfo,",
          "7154:                                                offset,",
          "7155:                                                bound,",
          "7156:                                                args_tree,",
          "7157:                                                hf_amqp_method_arguments,",
          "7158:                                                1, hf_amqp_1_0_sasl_challenge_items, NULL);",
          "7159:             break;",
          "7160:         case AMQP_1_0_SASL_RESPONSE:",
          "7161:             arg_length = dissect_amqp_1_0_list(tvb,",
          "7162:                                                pinfo,",
          "7163:                                                offset,",
          "7164:                                                bound,",
          "7165:                                                args_tree,",
          "7166:                                                hf_amqp_method_arguments,",
          "7167:                                                1, hf_amqp_1_0_sasl_response_items, NULL);",
          "7168:             break;",
          "7169:         case AMQP_1_0_SASL_OUTCOME:",
          "7170:             arg_length = dissect_amqp_1_0_list(tvb,",
          "7171:                                                pinfo,",
          "7172:                                                offset,",
          "7173:                                                bound,",
          "7174:                                                args_tree,",
          "7175:                                                hf_amqp_method_arguments,",
          "7176:                                                2, hf_amqp_1_0_sasl_outcome_items, NULL);",
          "7177:             break;",
          "7178:         default:",
          "7179:             expert_add_info_format(pinfo,",
          "7180:                                    amqp_tree,",
          "7181:                                    &ei_amqp_unknown_sasl_command,",
          "7182:                                    \"Unknown SASL command %d\",",
          "7183:                                    tvb_get_guint8(tvb, offset + 2));",
          "7184:             return bound-orig_offset;",
          "7186:     return (arg_length) + (offset-orig_offset);",
          "7189: static int",
          "7190: dissect_amqp_1_0_frame(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data _U_)",
          "7192:     proto_item  *ti = NULL;",
          "7193:     proto_item  *amqp_tree = NULL;",
          "7194:     guint8      frame_type;",
          "7195:     guint16     length;",
          "7196:     guint32     arg_length = 0;",
          "7197:     guint       offset;",
          "7198:     const gchar *method_name = NULL;",
          "7200:     col_clear(pinfo->cinfo, COL_INFO);",
          "7203:     if (tvb_memeql(tvb, 0, \"AMQP\", 4) == 0) {",
          "7204:         guint8         proto_major;",
          "7205:         guint8         proto_minor;",
          "7206:         guint8         proto_revision;",
          "7207:         wmem_strbuf_t *strbuf;",
          "7209:         proto_major    = tvb_get_guint8(tvb, 5);",
          "7210:         proto_minor    = tvb_get_guint8(tvb, 6);",
          "7211:         proto_revision = tvb_get_guint8(tvb, 7);",
          "7212:         strbuf         = wmem_strbuf_new_label(wmem_packet_scope());",
          "7213:         wmem_strbuf_append_printf(strbuf,",
          "7214:                                   \"Protocol-Header%s %d-%d-%d \",",
          "7216:                                   proto_major,",
          "7217:                                   proto_minor,",
          "7218:                                   proto_revision);",
          "7219:         col_append_str(pinfo->cinfo, COL_INFO, wmem_strbuf_get_str(strbuf));",
          "7220:         col_set_fence(pinfo->cinfo, COL_INFO);",
          "7222:         if (tree) {",
          "7223:             ti = proto_tree_add_item(tree, proto_amqp, tvb, 0, -1, ENC_NA);",
          "7224:             amqp_tree = proto_item_add_subtree(ti, ett_amqp_init);",
          "7225:             proto_tree_add_item(amqp_tree, hf_amqp_init_protocol,         tvb, 0, 4, ENC_ASCII|ENC_NA);",
          "7226:             proto_tree_add_item(amqp_tree, hf_amqp_init_id,               tvb, 4, 1, ENC_BIG_ENDIAN);",
          "7227:             proto_tree_add_item(amqp_tree, hf_amqp_init_version_major,    tvb, 5, 1, ENC_BIG_ENDIAN);",
          "7228:             proto_tree_add_item(amqp_tree, hf_amqp_init_version_minor,    tvb, 6, 1, ENC_BIG_ENDIAN);",
          "7229:             proto_tree_add_item(amqp_tree, hf_amqp_init_version_revision, tvb, 7, 1, ENC_BIG_ENDIAN);",
          "7230:         }",
          "7231:         return 8;",
          "7235:     if (tree) {",
          "7237:         ti = proto_tree_add_item(tree, proto_amqp, tvb, 0, -1, ENC_NA);",
          "7238:         amqp_tree = proto_item_add_subtree(ti, ett_amqp);",
          "7239:         proto_tree_add_item(amqp_tree, hf_amqp_1_0_size, tvb, 0, 4, ENC_BIG_ENDIAN);",
          "7240:         proto_tree_add_item(amqp_tree, hf_amqp_1_0_doff, tvb, 4, 1, ENC_BIG_ENDIAN);",
          "7241:         proto_tree_add_item(amqp_tree, hf_amqp_1_0_type, tvb, 5, 1, ENC_BIG_ENDIAN);",
          "7242:         proto_tree_add_item(amqp_tree, hf_amqp_channel,  tvb, 6, 2, ENC_BIG_ENDIAN);",
          "7247:     {",
          "7248:         guint length32;",
          "7249:         length32 = tvb_get_ntohl(tvb, 0);",
          "7250:         length = (length32 < 0x10000U) ? length32 : 0xFFFFU;",
          "7251:         if (length32 > length) {",
          "7252:             expert_add_info(pinfo, ti, &ei_amqp_amqp_1_0_frame_length_exceeds_65K);",
          "7257:     frame_type = tvb_get_guint8(tvb, 5);",
          "7258:     THROW_ON((length < offset), ReportedBoundsError);",
          "7260:     switch(frame_type) {",
          "7261:     case AMQP_1_0_AMQP_FRAME:",
          "7262:         arg_length = dissect_amqp_1_0_AMQP_frame(tvb, offset, length, amqp_tree, pinfo, &method_name);",
          "7263:         break;",
          "7264:     case AMQP_1_0_SASL_FRAME:",
          "7265:         arg_length = dissect_amqp_1_0_SASL_frame(tvb, offset, length, amqp_tree, pinfo, &method_name);",
          "7266:         break;",
          "7267:     case AMQP_1_0_TLS_FRAME:",
          "7269:         break;",
          "7270:     default:",
          "7271:         expert_add_info_format(pinfo, amqp_tree, &ei_amqp_unknown_frame_type, \"Unknown frame type %d\", frame_type);",
          "7273:     AMQP_INCREMENT(offset, arg_length, length);",
          "7274:     col_append_str(pinfo->cinfo, COL_INFO, method_name);",
          "7275:     col_append_str(pinfo->cinfo, COL_INFO, \" \");",
          "7276:     col_set_fence(pinfo->cinfo, COL_INFO);",
          "7277:     return tvb_reported_length(tvb);",
          "7280: static int",
          "7281: dissect_amqp_0_10_frame(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data _U_)",
          "7283:     proto_item *ti;",
          "7284:     proto_item *amqp_tree = NULL;",
          "7285:     guint8      frame_type;",
          "7286:     guint16     length;",
          "7287:     guint32     struct_length;",
          "7288:     guint       offset;",
          "7291:     if (tvb_memeql(tvb, 0, \"AMQP\", 4) == 0) {",
          "7292:         guint8         proto_major;",
          "7293:         guint8         proto_minor;",
          "7294:         wmem_strbuf_t *strbuf;",
          "7296:         proto_major = tvb_get_guint8(tvb, 6);",
          "7297:         proto_minor = tvb_get_guint8(tvb, 7);",
          "7298:         strbuf      = wmem_strbuf_new_label(wmem_packet_scope());",
          "7299:         wmem_strbuf_append_printf(strbuf,",
          "7300:                                   \"Protocol-Header %d-%d \",",
          "7301:                                   proto_major,",
          "7302:                                   proto_minor);",
          "7303:         col_append_str(pinfo->cinfo, COL_INFO, wmem_strbuf_get_str(strbuf));",
          "7304:         col_set_fence(pinfo->cinfo, COL_INFO);",
          "7306:         if (tree) {",
          "7307:             ti = proto_tree_add_item(tree, proto_amqp, tvb, 0, -1, ENC_NA);",
          "7308:             amqp_tree = proto_item_add_subtree(ti, ett_amqp_init);",
          "7309:             proto_tree_add_item(amqp_tree, hf_amqp_init_protocol,      tvb, 0, 4, ENC_ASCII|ENC_NA);",
          "7310:             proto_tree_add_item(amqp_tree, hf_amqp_init_id_major,      tvb, 4, 1, ENC_BIG_ENDIAN);",
          "7311:             proto_tree_add_item(amqp_tree, hf_amqp_init_id_minor,      tvb, 5, 1, ENC_BIG_ENDIAN);",
          "7312:             proto_tree_add_item(amqp_tree, hf_amqp_init_version_major, tvb, 6, 1, ENC_BIG_ENDIAN);",
          "7313:             proto_tree_add_item(amqp_tree, hf_amqp_init_version_minor, tvb, 7, 1, ENC_BIG_ENDIAN);",
          "7314:         }",
          "7315:         return 8;",
          "7316:     }",
          "7319:     if (tree) {",
          "7320:         ti = proto_tree_add_item(tree, proto_amqp, tvb, 0, -1, ENC_NA);",
          "7321:         amqp_tree = proto_item_add_subtree(ti, ett_amqp);",
          "7322:         proto_tree_add_item(amqp_tree, hf_amqp_0_10_format,   tvb, 0, 1, ENC_BIG_ENDIAN);",
          "7323:         proto_tree_add_item(amqp_tree, hf_amqp_0_10_position, tvb, 0, 1, ENC_BIG_ENDIAN);",
          "7324:         proto_tree_add_item(amqp_tree, hf_amqp_0_10_type,     tvb, 1, 1, ENC_BIG_ENDIAN);",
          "7325:         proto_tree_add_item(amqp_tree, hf_amqp_0_10_size,     tvb, 2, 2, ENC_BIG_ENDIAN);",
          "7326:         proto_tree_add_item(amqp_tree, hf_amqp_0_10_track,    tvb, 5, 1, ENC_BIG_ENDIAN);",
          "7327:         proto_tree_add_item(amqp_tree, hf_amqp_channel,       tvb, 6, 2, ENC_BIG_ENDIAN);",
          "7328:     }",
          "7330:     frame_type = tvb_get_guint8(tvb, 1);",
          "7331:     length     = tvb_get_ntohs(tvb, 2);",
          "7332:     offset     = 12;",
          "7333:     THROW_ON((length <= 13), ReportedBoundsError);",
          "7335:     switch(frame_type) {",
          "7336:     case AMQP_0_10_FRAME_COMMAND:",
          "7338:     case AMQP_0_10_FRAME_CONTROL:",
          "7339:         proto_tree_add_item(amqp_tree, hf_amqp_0_10_class, tvb, offset+0, 1, ENC_BIG_ENDIAN);",
          "7340:         switch(tvb_get_guint8(tvb, offset + 0)) {",
          "7341:         case AMQP_0_10_CLASS_CONNECTION:",
          "7342:             dissect_amqp_0_10_connection(tvb, pinfo, amqp_tree,",
          "7343:                                          offset, length);",
          "7344:             break;",
          "7345:         case AMQP_0_10_CLASS_SESSION:",
          "7346:             dissect_amqp_0_10_session(tvb, pinfo, amqp_tree,",
          "7347:                                       offset, length);",
          "7348:             break;",
          "7349:         case AMQP_0_10_CLASS_EXECUTION:",
          "7350:             dissect_amqp_0_10_execution(tvb, pinfo, amqp_tree,",
          "7351:                                         offset, length);",
          "7352:             break;",
          "7353:         case AMQP_0_10_CLASS_MESSAGE:",
          "7354:             dissect_amqp_0_10_message(tvb, pinfo, amqp_tree,",
          "7355:                                       offset, length);",
          "7357:         case AMQP_0_10_CLASS_TX:",
          "7358:             dissect_amqp_0_10_tx(tvb, pinfo, amqp_tree,",
          "7359:                                  offset, length);",
          "7361:         case AMQP_0_10_CLASS_DTX:",
          "7362:             dissect_amqp_0_10_dtx(tvb, pinfo, amqp_tree,",
          "7363:                                   offset, length);",
          "7365:         case AMQP_0_10_CLASS_EXCHANGE:",
          "7366:             dissect_amqp_0_10_exchange(tvb, pinfo, amqp_tree,",
          "7367:                                        offset, length);",
          "7369:         case AMQP_0_10_CLASS_QUEUE:",
          "7370:             dissect_amqp_0_10_queue(tvb, pinfo, amqp_tree,",
          "7371:                                     offset, length);",
          "7373:         case AMQP_0_10_CLASS_FILE:",
          "7374:             dissect_amqp_0_10_file(tvb, pinfo, amqp_tree,",
          "7375:                                    offset, length);",
          "7377:         case AMQP_0_10_CLASS_STREAM:",
          "7378:             dissect_amqp_0_10_stream(tvb, pinfo, amqp_tree,",
          "7379:                                      offset, length);",
          "7381:         default:",
          "7382:             expert_add_info_format(pinfo, amqp_tree, &ei_amqp_unknown_command_class, \"Unknown command/control class %d\", tvb_get_guint8(tvb, offset + 0));",
          "7386:     case AMQP_0_10_FRAME_HEADER:",
          "7387:         col_append_str(pinfo->cinfo, COL_INFO, \"header \");",
          "7388:         col_set_fence(pinfo->cinfo, COL_INFO);",
          "7389:         do {",
          "7390:             struct_length = amqp_0_10_get_32bit_size(tvb, offset);",
          "7391:             AMQP_INCREMENT(offset, 4, length);",
          "7393:             ti = proto_tree_add_item(amqp_tree,",
          "7394:                                      hf_amqp_0_10_undissected_struct32,",
          "7395:                                      tvb, offset, struct_length, ENC_NA);",
          "7396:             dissect_amqp_0_10_struct32(tvb, pinfo, ti, offset, struct_length);",
          "7397:             AMQP_INCREMENT(offset, struct_length, length);",
          "7398:         } while (offset < length);",
          "7401:     case AMQP_0_10_FRAME_BODY:",
          "7402:         col_append_str(pinfo->cinfo, COL_INFO, \"message-body \");",
          "7403:         col_set_fence(pinfo->cinfo, COL_INFO);",
          "7404:         proto_tree_add_item(amqp_tree,",
          "7405:                             hf_amqp_0_10_message_body,",
          "7406:                             tvb, offset, length - 12, ENC_NA);",
          "7409:     default:",
          "7410:         expert_add_info_format(pinfo, amqp_tree, &ei_amqp_unknown_frame_type, \"Unknown frame type %d\", frame_type);",
          "7411:     }",
          "7413:     return tvb_reported_length(tvb);",
          "7418: static int",
          "7419: dissect_amqp_0_9_frame(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data _U_)",
          "7421:     proto_item    *ti;",
          "7422:     proto_item    *amqp_tree = NULL;",
          "7423:     proto_item    *args_tree;",
          "7424:     proto_item    *prop_tree;",
          "7425:     guint          length;",
          "7426:     guint8         frame_type;",
          "7427:     guint16        channel_num, class_id, method_id;",
          "7430:     if (tvb_memeql(tvb, 0, \"AMQP\", 4) == 0) {",
          "7431:         guint8         proto_id, proto_major, proto_minor;",
          "7432:         wmem_strbuf_t *strbuf;",
          "7434:         proto_id = tvb_get_guint8(tvb, 5);",
          "7435:         proto_major = tvb_get_guint8(tvb, 6);",
          "7436:         proto_minor = tvb_get_guint8(tvb, 7);",
          "7437:         strbuf = wmem_strbuf_new_label(wmem_packet_scope());",
          "7438:         wmem_strbuf_append_printf(strbuf,",
          "7439:                                   \"Protocol-Header %u-%u-%u\",",
          "7440:                                   proto_id,",
          "7441:                                   proto_major,",
          "7442:                                   proto_minor);",
          "7443:         col_append_str(pinfo->cinfo, COL_INFO, wmem_strbuf_get_str(strbuf));",
          "7444:         col_set_fence(pinfo->cinfo, COL_INFO);",
          "7446:         if (tree) {",
          "7447:             ti = proto_tree_add_item(tree, proto_amqp, tvb, 0, -1, ENC_NA);",
          "7448:             amqp_tree = proto_item_add_subtree(ti, ett_amqp_init);",
          "7449:             proto_tree_add_item(amqp_tree, hf_amqp_init_protocol, tvb, 0, 4, ENC_ASCII|ENC_NA);",
          "7450:             proto_tree_add_item(amqp_tree, hf_amqp_init_id_major, tvb, 4, 1, ENC_BIG_ENDIAN);",
          "7451:             proto_tree_add_item(amqp_tree, hf_amqp_init_id_minor, tvb, 5, 1, ENC_BIG_ENDIAN);",
          "7452:             proto_tree_add_item(amqp_tree, hf_amqp_init_version_major, tvb, 6, 1, ENC_BIG_ENDIAN);",
          "7453:             proto_tree_add_item(amqp_tree, hf_amqp_init_version_minor, tvb, 7, 1, ENC_BIG_ENDIAN);",
          "7454:         }",
          "7455:         return 8;",
          "7456:     }",
          "7458:     if (tree) {",
          "7459:         ti = proto_tree_add_item(tree, proto_amqp, tvb, 0, -1, ENC_NA);",
          "7460:         amqp_tree = proto_item_add_subtree(ti, ett_amqp);",
          "7461:         proto_tree_add_item(amqp_tree, hf_amqp_0_9_type,   tvb, 0, 1, ENC_BIG_ENDIAN);",
          "7462:         proto_tree_add_item(amqp_tree, hf_amqp_channel,    tvb, 1, 2, ENC_BIG_ENDIAN);",
          "7463:         proto_tree_add_item(amqp_tree, hf_amqp_0_9_length, tvb, 3, 4, ENC_BIG_ENDIAN);",
          "7466:     frame_type = tvb_get_guint8(tvb, 0);",
          "7467:     channel_num = tvb_get_ntohs(tvb, 1);",
          "7468:     length     = tvb_get_ntohl(tvb, 3);",
          "7470:     switch (frame_type) {",
          "7471:     case AMQP_0_9_FRAME_TYPE_METHOD:",
          "7472:         class_id = tvb_get_ntohs(tvb, 7);",
          "7473:         proto_tree_add_item(amqp_tree, hf_amqp_0_9_method_class_id,",
          "7474:                             tvb, 7, 2, ENC_BIG_ENDIAN);",
          "7475:         switch (class_id) {",
          "7476:         case AMQP_0_9_CLASS_CONNECTION:",
          "7477:             method_id = tvb_get_ntohs(tvb, 9);",
          "7478:             proto_tree_add_item(amqp_tree, hf_amqp_method_connection_method_id,",
          "7479:                                 tvb, 9, 2, ENC_BIG_ENDIAN);",
          "7480:             ti = proto_tree_add_item(amqp_tree, hf_amqp_method_arguments,",
          "7481:                                      tvb, 11, length - 4, ENC_NA);",
          "7482:             args_tree = proto_item_add_subtree(ti, ett_args);",
          "7483:             col_append_fstr(pinfo->cinfo, COL_INFO, \"Connection.%s \",",
          "7484:                             val_to_str( method_id, amqp_method_connection_methods, \"Unknown (%u)\"));",
          "7485:             switch (method_id) {",
          "7486:             case AMQP_0_9_METHOD_CONNECTION_START:",
          "7487:                 dissect_amqp_0_9_method_connection_start(tvb,",
          "7488:                                                          pinfo, 11, args_tree);",
          "7489:                 break;",
          "7490:             case AMQP_0_9_METHOD_CONNECTION_START_OK:",
          "7491:                 dissect_amqp_0_9_method_connection_start_ok(tvb,",
          "7492:                                                             pinfo, 11, args_tree);",
          "7493:                 break;",
          "7494:             case AMQP_0_9_METHOD_CONNECTION_SECURE:",
          "7495:                 dissect_amqp_0_9_method_connection_secure(tvb,",
          "7496:                                                           11, args_tree);",
          "7497:                 break;",
          "7498:             case AMQP_0_9_METHOD_CONNECTION_SECURE_OK:",
          "7499:                 dissect_amqp_0_9_method_connection_secure_ok(tvb,",
          "7500:                                                              11, args_tree);",
          "7501:                 break;",
          "7502:             case AMQP_0_9_METHOD_CONNECTION_TUNE:",
          "7503:                 dissect_amqp_0_9_method_connection_tune(tvb,",
          "7504:                                                         11, args_tree);",
          "7505:                 break;",
          "7506:             case AMQP_0_9_METHOD_CONNECTION_TUNE_OK:",
          "7507:                 dissect_amqp_0_9_method_connection_tune_ok(tvb,",
          "7508:                                                            11, args_tree);",
          "7509:                 break;",
          "7510:             case AMQP_0_9_METHOD_CONNECTION_OPEN:",
          "7511:                 dissect_amqp_0_9_method_connection_open(tvb,",
          "7512:                                                         pinfo, 11, args_tree);",
          "7513:                 break;",
          "7514:             case AMQP_0_9_METHOD_CONNECTION_OPEN_OK:",
          "7515:                 dissect_amqp_0_9_method_connection_open_ok(tvb,",
          "7516:                                                            11, args_tree);",
          "7517:                 break;",
          "7518:             case AMQP_0_9_METHOD_CONNECTION_REDIRECT:",
          "7519:                 dissect_amqp_0_9_method_connection_redirect(tvb,",
          "7520:                                                             11, args_tree);",
          "7521:                 break;",
          "7522:             case AMQP_0_9_METHOD_CONNECTION_CLOSE:",
          "7523:                 dissect_amqp_0_9_method_connection_close(tvb,",
          "7524:                                                          pinfo, 11, args_tree);",
          "7525:                 break;",
          "7526:             case AMQP_0_9_METHOD_CONNECTION_CLOSE_OK:",
          "7527:                 dissect_amqp_0_9_method_connection_close_ok(tvb,",
          "7528:                                                             11, args_tree);",
          "7529:                 break;",
          "7530:             case AMQP_0_9_METHOD_CONNECTION_BLOCKED:",
          "7531:                 dissect_amqp_0_9_method_connection_blocked(tvb,",
          "7532:                                                            11, args_tree);",
          "7533:                 break;",
          "7534:             case AMQP_0_9_METHOD_CONNECTION_UNBLOCKED:",
          "7535:                 dissect_amqp_0_9_method_connection_unblocked(tvb,",
          "7536:                                                              11, args_tree);",
          "7537:                 break;",
          "7538:             default:",
          "7539:                 expert_add_info_format(pinfo, amqp_tree, &ei_amqp_unknown_connection_method, \"Unknown connection method %u\", method_id);",
          "7540:             }",
          "7541:             break;",
          "7542:         case AMQP_0_9_CLASS_CHANNEL:",
          "7543:             method_id = tvb_get_ntohs(tvb, 9);",
          "7544:             proto_tree_add_item(amqp_tree, hf_amqp_method_channel_method_id,",
          "7545:                                 tvb, 9, 2, ENC_BIG_ENDIAN);",
          "7546:             ti = proto_tree_add_item(amqp_tree, hf_amqp_method_arguments,",
          "7547:                                      tvb, 11, length - 4, ENC_NA);",
          "7548:             args_tree = proto_item_add_subtree(ti, ett_args);",
          "7550:             col_append_fstr(pinfo->cinfo, COL_INFO, \"Channel.%s \",",
          "7551:                             val_to_str( method_id, amqp_method_channel_methods, \"Unknown (%u)\"));",
          "7553:             switch (method_id) {",
          "7554:             case AMQP_0_9_METHOD_CHANNEL_OPEN:",
          "7555:                 dissect_amqp_0_9_method_channel_open(tvb,",
          "7556:                                                      11, args_tree);",
          "7557:                 break;",
          "7558:             case AMQP_0_9_METHOD_CHANNEL_OPEN_OK:",
          "7559:                 dissect_amqp_0_9_method_channel_open_ok(tvb,",
          "7560:                                                         11, args_tree);",
          "7561:                 break;",
          "7562:             case AMQP_0_9_METHOD_CHANNEL_FLOW:",
          "7563:                 dissect_amqp_0_9_method_channel_flow(tvb,",
          "7564:                                                      11, args_tree);",
          "7565:                 break;",
          "7566:             case AMQP_0_9_METHOD_CHANNEL_FLOW_OK:",
          "7567:                 dissect_amqp_0_9_method_channel_flow_ok(tvb,",
          "7568:                                                         11, args_tree);",
          "7569:                 break;",
          "7570:             case AMQP_0_9_METHOD_CHANNEL_CLOSE:",
          "7571:                 dissect_amqp_0_9_method_channel_close(channel_num, tvb,",
          "7572:                                                       pinfo, 11, args_tree);",
          "7573:                 break;",
          "7574:             case AMQP_0_9_METHOD_CHANNEL_CLOSE_OK:",
          "7575:                 dissect_amqp_0_9_method_channel_close_ok(tvb,",
          "7576:                                                          11, args_tree);",
          "7577:                 break;",
          "7578:             case AMQP_0_9_METHOD_CHANNEL_RESUME:",
          "7579:                 dissect_amqp_0_9_method_channel_resume(tvb,",
          "7580:                                                        11, args_tree);",
          "7581:                 break;",
          "7582:             case AMQP_0_9_METHOD_CHANNEL_PING:",
          "7583:                 dissect_amqp_0_9_method_channel_ping(tvb,",
          "7584:                                                      11, args_tree);",
          "7585:                 break;",
          "7586:             case AMQP_0_9_METHOD_CHANNEL_PONG:",
          "7587:                 dissect_amqp_0_9_method_channel_pong(tvb,",
          "7588:                                                      11, args_tree);",
          "7589:                 break;",
          "7590:             case AMQP_0_9_METHOD_CHANNEL_OK:",
          "7591:                 dissect_amqp_0_9_method_channel_ok(tvb,",
          "7592:                                                    11, args_tree);",
          "7593:                 break;",
          "7594:             default:",
          "7595:                 expert_add_info_format(pinfo, amqp_tree, &ei_amqp_unknown_channel_method, \"Unknown channel method %u\", method_id);",
          "7596:             }",
          "7597:             break;",
          "7598:         case AMQP_0_9_CLASS_ACCESS:",
          "7599:             method_id = tvb_get_ntohs(tvb, 9);",
          "7600:             proto_tree_add_item(amqp_tree, hf_amqp_method_access_method_id,",
          "7601:                                 tvb, 9, 2, ENC_BIG_ENDIAN);",
          "7602:             ti = proto_tree_add_item(amqp_tree, hf_amqp_method_arguments,",
          "7603:                                      tvb, 11, length - 4, ENC_NA);",
          "7604:             args_tree = proto_item_add_subtree(ti, ett_args);",
          "7605:             switch (method_id) {",
          "7606:             case AMQP_0_9_METHOD_ACCESS_REQUEST:",
          "7607:                 dissect_amqp_0_9_method_access_request(tvb,",
          "7608:                                                        11, args_tree);",
          "7609:                 col_append_str(pinfo->cinfo, COL_INFO,",
          "7610:                                \"Access.Request \");",
          "7611:                 break;",
          "7612:             case AMQP_0_9_METHOD_ACCESS_REQUEST_OK:",
          "7613:                 dissect_amqp_0_9_method_access_request_ok(tvb,",
          "7614:                                                           11, args_tree);",
          "7615:                 col_append_str(pinfo->cinfo, COL_INFO,",
          "7616:                                \"Access.Request-Ok \");",
          "7617:                 break;",
          "7618:             default:",
          "7619:                 expert_add_info_format(pinfo, amqp_tree, &ei_amqp_unknown_access_method, \"Unknown access method %u\", method_id);",
          "7620:             }",
          "7621:             break;",
          "7622:         case AMQP_0_9_CLASS_EXCHANGE:",
          "7623:             method_id = tvb_get_ntohs(tvb, 9);",
          "7624:             proto_tree_add_item(amqp_tree, hf_amqp_method_exchange_method_id,",
          "7625:                                 tvb, 9, 2, ENC_BIG_ENDIAN);",
          "7626:             ti = proto_tree_add_item(amqp_tree, hf_amqp_method_arguments,",
          "7627:                                      tvb, 11, length - 4, ENC_NA);",
          "7628:             args_tree = proto_item_add_subtree(ti, ett_args);",
          "7629:             col_append_fstr(pinfo->cinfo, COL_INFO, \"Exchange.%s \",",
          "7630:                             val_to_str( method_id, amqp_method_exchange_methods, \"Unknown (%u)\"));",
          "7631:             switch (method_id) {",
          "7632:             case AMQP_0_9_METHOD_EXCHANGE_DECLARE:",
          "7633:                 dissect_amqp_0_9_method_exchange_declare(tvb,",
          "7634:                                                          pinfo, 11, args_tree);",
          "7635:                 break;",
          "7636:             case AMQP_0_9_METHOD_EXCHANGE_DECLARE_OK:",
          "7637:                 dissect_amqp_0_9_method_exchange_declare_ok(tvb,",
          "7638:                                                             11, args_tree);",
          "7639:                 break;",
          "7640:             case AMQP_0_9_METHOD_EXCHANGE_BIND:",
          "7641:                 dissect_amqp_0_9_method_exchange_bind(tvb,",
          "7642:                                                       pinfo, 11, args_tree);",
          "7643:                 break;",
          "7644:             case AMQP_0_9_METHOD_EXCHANGE_BIND_OK:",
          "7645:                 dissect_amqp_0_9_method_exchange_bind_ok(tvb,",
          "7646:                                                          11, args_tree);",
          "7647:                 break;",
          "7648:             case AMQP_0_9_METHOD_EXCHANGE_DELETE:",
          "7649:                 dissect_amqp_0_9_method_exchange_delete(tvb,",
          "7650:                                                         pinfo, 11, args_tree);",
          "7651:                 break;",
          "7652:             case AMQP_0_9_METHOD_EXCHANGE_DELETE_OK:",
          "7653:                 dissect_amqp_0_9_method_exchange_delete_ok(tvb,",
          "7654:                                                            11, args_tree);",
          "7655:                 break;",
          "7656:             case AMQP_0_9_METHOD_EXCHANGE_UNBIND:",
          "7658:                 dissect_amqp_0_9_method_exchange_bind(tvb,",
          "7659:                                                       pinfo, 11, args_tree);",
          "7660:                 break;",
          "7661:             case AMQP_0_9_METHOD_EXCHANGE_UNBIND_OK:",
          "7663:                 dissect_amqp_0_9_method_exchange_bind_ok(tvb,",
          "7664:                                                          11, args_tree);",
          "7665:                 break;",
          "7666:             default:",
          "7667:                 expert_add_info_format(pinfo, amqp_tree, &ei_amqp_unknown_exchange_method, \"Unknown exchange method %u\", method_id);",
          "7668:             }",
          "7669:             break;",
          "7670:         case AMQP_0_9_CLASS_QUEUE:",
          "7671:             method_id = tvb_get_ntohs(tvb, 9);",
          "7672:             proto_tree_add_item(amqp_tree, hf_amqp_method_queue_method_id,",
          "7673:                                 tvb, 9, 2, ENC_BIG_ENDIAN);",
          "7674:             ti = proto_tree_add_item(amqp_tree, hf_amqp_method_arguments,",
          "7675:                                      tvb, 11, length - 4, ENC_NA);",
          "7676:             args_tree = proto_item_add_subtree(ti, ett_args);",
          "7677:             col_append_fstr(pinfo->cinfo, COL_INFO, \"Queue.%s \",",
          "7678:                             val_to_str( method_id, amqp_method_queue_methods, \"Unknown (%u)\"));",
          "7680:             switch (method_id) {",
          "7681:             case AMQP_0_9_METHOD_QUEUE_DECLARE:",
          "7682:                 dissect_amqp_0_9_method_queue_declare(tvb,",
          "7683:                                                       pinfo, 11, args_tree);",
          "7684:                 break;",
          "7685:             case AMQP_0_9_METHOD_QUEUE_DECLARE_OK:",
          "7686:                 dissect_amqp_0_9_method_queue_declare_ok(tvb,",
          "7687:                                                          pinfo, 11, args_tree);",
          "7688:                 break;",
          "7689:             case AMQP_0_9_METHOD_QUEUE_BIND:",
          "7690:                 dissect_amqp_0_9_method_queue_bind(tvb,",
          "7691:                                                    pinfo, 11, args_tree);",
          "7692:                 break;",
          "7693:             case AMQP_0_9_METHOD_QUEUE_BIND_OK:",
          "7694:                 dissect_amqp_0_9_method_queue_bind_ok(tvb,",
          "7695:                                                       11, args_tree);",
          "7696:                 break;",
          "7697:             case AMQP_0_9_METHOD_QUEUE_UNBIND:",
          "7698:                 dissect_amqp_0_9_method_queue_unbind(tvb,",
          "7699:                                                      pinfo, 11, args_tree);",
          "7700:                 break;",
          "7701:             case AMQP_0_9_METHOD_QUEUE_UNBIND_OK:",
          "7702:                 dissect_amqp_0_9_method_queue_unbind_ok(tvb,",
          "7703:                                                         11, args_tree);",
          "7704:                 break;",
          "7705:             case AMQP_0_9_METHOD_QUEUE_PURGE:",
          "7706:                 dissect_amqp_0_9_method_queue_purge(tvb,",
          "7707:                                                     pinfo, 11, args_tree);",
          "7708:                 break;",
          "7709:             case AMQP_0_9_METHOD_QUEUE_PURGE_OK:",
          "7710:                 dissect_amqp_0_9_method_queue_purge_ok(tvb,",
          "7711:                                                        11, args_tree);",
          "7712:                 break;",
          "7713:             case AMQP_0_9_METHOD_QUEUE_DELETE:",
          "7714:                 dissect_amqp_0_9_method_queue_delete(tvb,",
          "7715:                                                      pinfo, 11, args_tree);",
          "7716:                 break;",
          "7717:             case AMQP_0_9_METHOD_QUEUE_DELETE_OK:",
          "7718:                 dissect_amqp_0_9_method_queue_delete_ok(tvb,",
          "7719:                                                         11, args_tree);",
          "7720:                 break;",
          "7721:             default:",
          "7722:                 expert_add_info_format(pinfo, amqp_tree, &ei_amqp_unknown_queue_method, \"Unknown queue method %u\", method_id);",
          "7724:             break;",
          "7725:         case AMQP_0_9_CLASS_BASIC:",
          "7726:             method_id = tvb_get_ntohs(tvb, 9);",
          "7727:             proto_tree_add_item(amqp_tree, hf_amqp_method_basic_method_id,",
          "7728:                                 tvb, 9, 2, ENC_BIG_ENDIAN);",
          "7729:             ti = proto_tree_add_item(amqp_tree, hf_amqp_method_arguments,",
          "7730:                                      tvb, 11, length - 4, ENC_NA);",
          "7731:             args_tree = proto_item_add_subtree(ti, ett_args);",
          "7733:             col_append_fstr(pinfo->cinfo, COL_INFO, \"Basic.%s \",",
          "7734:                             val_to_str( method_id, amqp_method_basic_methods, \"Unknown (%u)\"));",
          "7736:             switch (method_id) {",
          "7737:             case AMQP_0_9_METHOD_BASIC_QOS:",
          "7738:                 dissect_amqp_0_9_method_basic_qos(tvb,",
          "7739:                                                   11, args_tree);",
          "7740:                 break;",
          "7741:             case AMQP_0_9_METHOD_BASIC_QOS_OK:",
          "7742:                 dissect_amqp_0_9_method_basic_qos_ok(tvb,",
          "7743:                                                      11, args_tree);",
          "7744:                 break;",
          "7745:             case AMQP_0_9_METHOD_BASIC_CONSUME:",
          "7746:                 dissect_amqp_0_9_method_basic_consume(tvb,",
          "7747:                                                       pinfo, 11, args_tree);",
          "7748:                 break;",
          "7749:             case AMQP_0_9_METHOD_BASIC_CONSUME_OK:",
          "7750:                 dissect_amqp_0_9_method_basic_consume_ok(tvb,",
          "7751:                                                          11, args_tree);",
          "7752:                 break;",
          "7753:             case AMQP_0_9_METHOD_BASIC_CANCEL:",
          "7754:                 dissect_amqp_0_9_method_basic_cancel(tvb,",
          "7755:                                                      11, args_tree);",
          "7756:                 break;",
          "7757:             case AMQP_0_9_METHOD_BASIC_CANCEL_OK:",
          "7758:                 dissect_amqp_0_9_method_basic_cancel_ok(tvb,",
          "7759:                                                         11, args_tree);",
          "7760:                 break;",
          "7761:             case AMQP_0_9_METHOD_BASIC_PUBLISH:",
          "7762:                 dissect_amqp_0_9_method_basic_publish(channel_num, tvb,",
          "7763:                                                       pinfo, 11, args_tree);",
          "7764:                 generate_ack_reference(tvb, pinfo, amqp_tree);",
          "7765:                 break;",
          "7766:             case AMQP_0_9_METHOD_BASIC_RETURN:",
          "7767:                 dissect_amqp_0_9_method_basic_return(tvb,",
          "7768:                                                      pinfo, 11, args_tree);",
          "7769:                 break;",
          "7770:             case AMQP_0_9_METHOD_BASIC_DELIVER:",
          "7771:                 dissect_amqp_0_9_method_basic_deliver(channel_num, tvb,",
          "7772:                                                       pinfo, 11, args_tree);",
          "7773:                 generate_ack_reference(tvb, pinfo, amqp_tree);",
          "7774:                 break;",
          "7775:             case AMQP_0_9_METHOD_BASIC_GET:",
          "7776:                 dissect_amqp_0_9_method_basic_get(tvb,",
          "7777:                                                   pinfo, 11, args_tree);",
          "7778:                 break;",
          "7779:             case AMQP_0_9_METHOD_BASIC_GET_OK:",
          "7780:                 dissect_amqp_0_9_method_basic_get_ok(channel_num, tvb,",
          "7781:                                                      pinfo, 11, args_tree);",
          "7782:                 generate_ack_reference(tvb, pinfo, amqp_tree);",
          "7783:                 break;",
          "7784:             case AMQP_0_9_METHOD_BASIC_GET_EMPTY:",
          "7785:                 dissect_amqp_0_9_method_basic_get_empty(tvb,",
          "7786:                                                         11, args_tree);",
          "7787:                 break;",
          "7788:             case AMQP_0_9_METHOD_BASIC_ACK:",
          "7789:                 dissect_amqp_0_9_method_basic_ack(channel_num, tvb,",
          "7790:                                                   pinfo, 11, args_tree);",
          "7791:                 generate_msg_reference(tvb, pinfo, amqp_tree);",
          "7792:                 break;",
          "7793:             case AMQP_0_9_METHOD_BASIC_REJECT:",
          "7794:                 dissect_amqp_0_9_method_basic_reject(channel_num, tvb,",
          "7795:                                                      pinfo, 11, args_tree);",
          "7796:                 generate_msg_reference(tvb, pinfo, amqp_tree);",
          "7797:                 break;",
          "7798:             case AMQP_0_9_METHOD_BASIC_RECOVER_ASYNC:",
          "7799:                 dissect_amqp_0_9_method_basic_recover_async(tvb,",
          "7800:                                                             11, args_tree);",
          "7801:                 break;",
          "7802:             case AMQP_0_9_METHOD_BASIC_RECOVER:",
          "7803:                 dissect_amqp_0_9_method_basic_recover(tvb,",
          "7804:                                                       11, args_tree);",
          "7805:                 break;",
          "7806:             case AMQP_0_9_METHOD_BASIC_RECOVER_OK:",
          "7807:                 dissect_amqp_0_9_method_basic_recover_ok(tvb,",
          "7808:                                                          11, args_tree);",
          "7809:                 break;",
          "7810:             case AMQP_0_9_METHOD_BASIC_NACK:",
          "7811:                 dissect_amqp_0_9_method_basic_nack(channel_num, tvb,",
          "7812:                                                    pinfo, 11, args_tree);",
          "7813:                 generate_msg_reference(tvb, pinfo, amqp_tree);",
          "7814:                 break;",
          "7815:             default:",
          "7816:                 expert_add_info_format(pinfo, amqp_tree, &ei_amqp_unknown_basic_method, \"Unknown basic method %u\", method_id);",
          "7819:         case AMQP_0_9_CLASS_FILE:",
          "7820:             method_id = tvb_get_ntohs(tvb, 9);",
          "7821:             proto_tree_add_item(amqp_tree, hf_amqp_method_file_method_id,",
          "7822:                                 tvb, 9, 2, ENC_BIG_ENDIAN);",
          "7823:             ti = proto_tree_add_item(amqp_tree, hf_amqp_method_arguments,",
          "7824:                                      tvb, 11, length - 4, ENC_NA);",
          "7825:             args_tree = proto_item_add_subtree(ti, ett_args);",
          "7827:             col_append_fstr(pinfo->cinfo, COL_INFO, \"File.%s \",",
          "7828:                             val_to_str( method_id, amqp_method_file_methods, \"Unknown (%u)\"));",
          "7830:             switch (method_id) {",
          "7831:             case AMQP_0_9_METHOD_FILE_QOS:",
          "7832:                 dissect_amqp_0_9_method_file_qos(tvb,",
          "7833:                                                  11, args_tree);",
          "7834:                 break;",
          "7835:             case AMQP_0_9_METHOD_FILE_QOS_OK:",
          "7836:                 dissect_amqp_0_9_method_file_qos_ok(tvb,",
          "7837:                                                     11, args_tree);",
          "7838:                 break;",
          "7839:             case AMQP_0_9_METHOD_FILE_CONSUME:",
          "7840:                 dissect_amqp_0_9_method_file_consume(tvb,",
          "7841:                                                      pinfo, 11, args_tree);",
          "7842:                 break;",
          "7843:             case AMQP_0_9_METHOD_FILE_CONSUME_OK:",
          "7844:                 dissect_amqp_0_9_method_file_consume_ok(tvb,",
          "7845:                                                         11, args_tree);",
          "7846:                 break;",
          "7847:             case AMQP_0_9_METHOD_FILE_CANCEL:",
          "7848:                 dissect_amqp_0_9_method_file_cancel(tvb,",
          "7849:                                                     11, args_tree);",
          "7850:                 break;",
          "7851:             case AMQP_0_9_METHOD_FILE_CANCEL_OK:",
          "7852:                 dissect_amqp_0_9_method_file_cancel_ok(tvb,",
          "7853:                                                        11, args_tree);",
          "7854:                 break;",
          "7855:             case AMQP_0_9_METHOD_FILE_OPEN:",
          "7856:                 dissect_amqp_0_9_method_file_open(tvb,",
          "7857:                                                   11, args_tree);",
          "7858:                 break;",
          "7859:             case AMQP_0_9_METHOD_FILE_OPEN_OK:",
          "7860:                 dissect_amqp_0_9_method_file_open_ok(tvb,",
          "7861:                                                      11, args_tree);",
          "7862:                 break;",
          "7863:             case AMQP_0_9_METHOD_FILE_STAGE:",
          "7864:                 dissect_amqp_0_9_method_file_stage(tvb,",
          "7865:                                                    11, args_tree);",
          "7866:                 break;",
          "7867:             case AMQP_0_9_METHOD_FILE_PUBLISH:",
          "7868:                 dissect_amqp_0_9_method_file_publish(tvb,",
          "7869:                                                      11, args_tree);",
          "7870:                 break;",
          "7871:             case AMQP_0_9_METHOD_FILE_RETURN:",
          "7872:                 dissect_amqp_0_9_method_file_return(tvb,",
          "7873:                                                     11, args_tree);",
          "7874:                 break;",
          "7875:             case AMQP_0_9_METHOD_FILE_DELIVER:",
          "7876:                 dissect_amqp_0_9_method_file_deliver(tvb,",
          "7877:                                                      11, args_tree);",
          "7878:                 break;",
          "7879:             case AMQP_0_9_METHOD_FILE_ACK:",
          "7880:                 dissect_amqp_0_9_method_file_ack(tvb,",
          "7881:                                                  11, args_tree);",
          "7882:                 break;",
          "7883:             case AMQP_0_9_METHOD_FILE_REJECT:",
          "7884:                 dissect_amqp_0_9_method_file_reject(tvb,",
          "7885:                                                     11, args_tree);",
          "7886:                 break;",
          "7887:             default:",
          "7888:                 expert_add_info_format(pinfo, amqp_tree, &ei_amqp_unknown_file_method, \"Unknown file method %u\", method_id);",
          "7889:             }",
          "7891:         case AMQP_0_9_CLASS_STREAM:",
          "7892:             method_id = tvb_get_ntohs(tvb, 9);",
          "7893:             proto_tree_add_item(amqp_tree, hf_amqp_method_stream_method_id,",
          "7894:                                 tvb, 9, 2, ENC_BIG_ENDIAN);",
          "7895:             ti = proto_tree_add_item(amqp_tree, hf_amqp_method_arguments,",
          "7896:                                      tvb, 11, length - 4, ENC_NA);",
          "7897:             args_tree = proto_item_add_subtree(ti, ett_args);",
          "7899:             col_append_fstr(pinfo->cinfo, COL_INFO, \"Stream.%s \",",
          "7900:                             val_to_str( method_id, amqp_method_stream_methods, \"Unknown (%u)\"));",
          "7902:             switch (method_id) {",
          "7903:             case AMQP_0_9_METHOD_STREAM_QOS:",
          "7904:                 dissect_amqp_0_9_method_stream_qos(tvb,",
          "7905:                                                    11, args_tree);",
          "7906:                 break;",
          "7907:             case AMQP_0_9_METHOD_STREAM_QOS_OK:",
          "7908:                 dissect_amqp_0_9_method_stream_qos_ok(tvb,",
          "7909:                                                       11, args_tree);",
          "7910:                 break;",
          "7911:             case AMQP_0_9_METHOD_STREAM_CONSUME:",
          "7912:                 dissect_amqp_0_9_method_stream_consume(tvb,",
          "7913:                                                        pinfo, 11, args_tree);",
          "7914:                 break;",
          "7915:             case AMQP_0_9_METHOD_STREAM_CONSUME_OK:",
          "7916:                 dissect_amqp_0_9_method_stream_consume_ok(tvb,",
          "7917:                                                           11, args_tree);",
          "7918:                 break;",
          "7919:             case AMQP_0_9_METHOD_STREAM_CANCEL:",
          "7920:                 dissect_amqp_0_9_method_stream_cancel(tvb,",
          "7921:                                                       11, args_tree);",
          "7922:                 break;",
          "7923:             case AMQP_0_9_METHOD_STREAM_CANCEL_OK:",
          "7924:                 dissect_amqp_0_9_method_stream_cancel_ok(tvb,",
          "7925:                                                          11, args_tree);",
          "7926:                 break;",
          "7927:             case AMQP_0_9_METHOD_STREAM_PUBLISH:",
          "7928:                 dissect_amqp_0_9_method_stream_publish(tvb,",
          "7929:                                                        11, args_tree);",
          "7930:                 break;",
          "7931:             case AMQP_0_9_METHOD_STREAM_RETURN:",
          "7932:                 dissect_amqp_0_9_method_stream_return(tvb,",
          "7933:                                                       11, args_tree);",
          "7934:                 break;",
          "7935:             case AMQP_0_9_METHOD_STREAM_DELIVER:",
          "7936:                 dissect_amqp_0_9_method_stream_deliver(tvb,",
          "7937:                                                        11, args_tree);",
          "7938:                 break;",
          "7939:             default:",
          "7940:                 expert_add_info_format(pinfo, amqp_tree, &ei_amqp_unknown_stream_method, \"Unknown stream method %u\", method_id);",
          "7941:             }",
          "7942:             break;",
          "7943:         case AMQP_0_9_CLASS_TX:",
          "7944:             method_id = tvb_get_ntohs(tvb, 9);",
          "7945:             proto_tree_add_item(amqp_tree, hf_amqp_method_tx_method_id,",
          "7946:                                 tvb, 9, 2, ENC_BIG_ENDIAN);",
          "7947:             ti = proto_tree_add_item(amqp_tree, hf_amqp_method_arguments,",
          "7948:                                      tvb, 11, length - 4, ENC_NA);",
          "7949:             args_tree = proto_item_add_subtree(ti, ett_args);",
          "7951:             col_append_fstr(pinfo->cinfo, COL_INFO, \"Tx.%s \",",
          "7952:                             val_to_str( method_id, amqp_method_tx_methods, \"Unknown (%u)\"));",
          "7954:             switch (method_id) {",
          "7955:             case AMQP_0_9_METHOD_TX_SELECT:",
          "7956:                 dissect_amqp_0_9_method_tx_select(tvb,",
          "7957:                                                   11, args_tree);",
          "7958:                 break;",
          "7959:             case AMQP_0_9_METHOD_TX_SELECT_OK:",
          "7960:                 dissect_amqp_0_9_method_tx_select_ok(tvb,",
          "7961:                                                      11, args_tree);",
          "7962:                 break;",
          "7963:             case AMQP_0_9_METHOD_TX_COMMIT:",
          "7964:                 dissect_amqp_0_9_method_tx_commit(tvb,",
          "7965:                                                   11, args_tree);",
          "7966:                 break;",
          "7967:             case AMQP_0_9_METHOD_TX_COMMIT_OK:",
          "7968:                 dissect_amqp_0_9_method_tx_commit_ok(tvb,",
          "7969:                                                      11, args_tree);",
          "7970:                 break;",
          "7971:             case AMQP_0_9_METHOD_TX_ROLLBACK:",
          "7972:                 dissect_amqp_0_9_method_tx_rollback(tvb,",
          "7973:                                                     11, args_tree);",
          "7974:                 break;",
          "7975:             case AMQP_0_9_METHOD_TX_ROLLBACK_OK:",
          "7976:                 dissect_amqp_0_9_method_tx_rollback_ok(tvb,",
          "7977:                                                        11, args_tree);",
          "7978:                 break;",
          "7979:             default:",
          "7980:                 expert_add_info_format(pinfo, amqp_tree, &ei_amqp_unknown_tx_method, \"Unknown tx method %u\", method_id);",
          "7981:             }",
          "7982:             break;",
          "7983:         case AMQP_0_9_CLASS_DTX:",
          "7984:             method_id = tvb_get_ntohs(tvb, 9);",
          "7985:             proto_tree_add_item(amqp_tree, hf_amqp_method_dtx_method_id,",
          "7986:                                 tvb, 9, 2, ENC_BIG_ENDIAN);",
          "7987:             ti = proto_tree_add_item(amqp_tree, hf_amqp_method_arguments,",
          "7988:                                      tvb, 11, length - 4, ENC_NA);",
          "7989:             args_tree = proto_item_add_subtree(ti, ett_args);",
          "7991:             col_append_fstr(pinfo->cinfo, COL_INFO, \"Dtx.%s \",",
          "7992:                             val_to_str( method_id, amqp_method_dtx_methods, \"Unknown (%u)\"));",
          "7994:             switch (method_id) {",
          "7995:             case AMQP_0_9_METHOD_DTX_SELECT:",
          "7996:                 dissect_amqp_0_9_method_dtx_select(tvb,",
          "7997:                                                    11, args_tree);",
          "7998:                 break;",
          "7999:             case AMQP_0_9_METHOD_DTX_SELECT_OK:",
          "8000:                 dissect_amqp_0_9_method_dtx_select_ok(tvb,",
          "8001:                                                       11, args_tree);",
          "8002:                 break;",
          "8003:             case AMQP_0_9_METHOD_DTX_START:",
          "8004:                 dissect_amqp_0_9_method_dtx_start(tvb,",
          "8005:                                                   11, args_tree);",
          "8006:                 break;",
          "8007:             case AMQP_0_9_METHOD_DTX_START_OK:",
          "8008:                 dissect_amqp_0_9_method_dtx_start_ok(tvb,",
          "8009:                                                      11, args_tree);",
          "8010:                 break;",
          "8011:             default:",
          "8012:                 expert_add_info_format(pinfo, amqp_tree, &ei_amqp_unknown_dtx_method, \"Unknown dtx method %u\", method_id);",
          "8013:             }",
          "8015:         case AMQP_0_9_CLASS_TUNNEL:",
          "8016:             method_id = tvb_get_ntohs(tvb, 9);",
          "8017:             proto_tree_add_item(amqp_tree, hf_amqp_method_tunnel_method_id,",
          "8018:                                 tvb, 9, 2, ENC_BIG_ENDIAN);",
          "8019:             ti = proto_tree_add_item(amqp_tree, hf_amqp_method_arguments,",
          "8020:                                      tvb, 11, length - 4, ENC_NA);",
          "8021:             args_tree = proto_item_add_subtree(ti, ett_args);",
          "8022:             switch (method_id) {",
          "8023:             case AMQP_0_9_METHOD_TUNNEL_REQUEST:",
          "8024:                 dissect_amqp_0_9_method_tunnel_request(tvb,",
          "8025:                                                        pinfo, 11, args_tree);",
          "8026:                 col_append_str(pinfo->cinfo, COL_INFO,",
          "8027:                                \"Tunnel.Request \");",
          "8028:                 break;",
          "8029:             default:",
          "8030:                 expert_add_info_format(pinfo, amqp_tree, &ei_amqp_unknown_tunnel_method, \"Unknown tunnel method %u\", method_id);",
          "8031:             }",
          "8033:         case AMQP_0_9_CLASS_CONFIRM:",
          "8034:             method_id = tvb_get_ntohs(tvb, 9);",
          "8035:             proto_tree_add_item(amqp_tree, hf_amqp_method_confirm_method_id,",
          "8036:                                 tvb, 9, 2, ENC_BIG_ENDIAN);",
          "8037:             ti = proto_tree_add_item(amqp_tree, hf_amqp_method_arguments,",
          "8038:                                      tvb, 11, length - 4, ENC_NA);",
          "8039:             args_tree = proto_item_add_subtree(ti, ett_args);",
          "8040:             switch (method_id) {",
          "8041:             case AMQP_0_9_METHOD_CONFIRM_SELECT:",
          "8042:                 dissect_amqp_0_9_method_confirm_select(tvb,",
          "8043:                                                        11, args_tree);",
          "8044:                 col_append_str(pinfo->cinfo, COL_INFO,",
          "8045:                                \"Confirm.Select \");",
          "8046:                 break;",
          "8047:             case AMQP_0_9_METHOD_CONFIRM_SELECT_OK:",
          "8048:                 dissect_amqp_0_9_method_confirm_select_ok(channel_num, tvb, pinfo,",
          "8049:                                                           11, args_tree);",
          "8050:                 col_append_str(pinfo->cinfo, COL_INFO,",
          "8051:                                \"Confirm.Select-Ok \");",
          "8052:                 break;",
          "8053:             default:",
          "8054:                 expert_add_info_format(pinfo, amqp_tree, &ei_amqp_unknown_confirm_method, \"Unknown confirm method %u\", method_id);",
          "8055:             }",
          "8057:         default:",
          "8058:             expert_add_info_format(pinfo, amqp_tree, &ei_amqp_unknown_method_class, \"Unknown method class %u\", class_id);",
          "8059:         }",
          "8060:         break;",
          "8061:     case AMQP_0_9_FRAME_TYPE_CONTENT_HEADER:",
          "8062:         class_id = tvb_get_ntohs(tvb, 7);",
          "8063:         proto_tree_add_item(amqp_tree, hf_amqp_header_class_id,",
          "8064:                             tvb, 7, 2, ENC_BIG_ENDIAN);",
          "8065:         proto_tree_add_item(amqp_tree, hf_amqp_header_weight,",
          "8066:                             tvb, 9, 2, ENC_BIG_ENDIAN);",
          "8067:         proto_tree_add_item(amqp_tree, hf_amqp_header_body_size,",
          "8068:                             tvb, 11, 8, ENC_BIG_ENDIAN);",
          "8069:         proto_tree_add_item(amqp_tree, hf_amqp_header_property_flags,",
          "8070:                             tvb, 19, 2, ENC_BIG_ENDIAN);",
          "8071:         ti = proto_tree_add_item(amqp_tree, hf_amqp_header_properties,",
          "8072:                                  tvb, 21, length - 14, ENC_NA);",
          "8073:         prop_tree = proto_item_add_subtree(ti, ett_props);",
          "8074:         col_append_str(pinfo->cinfo, COL_INFO, \"Content-Header \");",
          "8075:         switch (class_id) {",
          "8076:         case AMQP_0_9_CLASS_BASIC:",
          "8077:             dissect_amqp_0_9_content_header_basic(tvb,",
          "8078:                                                   pinfo, 21, prop_tree);",
          "8080:         case AMQP_0_9_CLASS_FILE:",
          "8081:             dissect_amqp_0_9_content_header_file(tvb,",
          "8082:                                                  pinfo, 21, prop_tree);",
          "8084:         case AMQP_0_9_CLASS_STREAM:",
          "8085:             dissect_amqp_0_9_content_header_stream(tvb,",
          "8086:                                                    pinfo, 21, prop_tree);",
          "8088:         case AMQP_0_9_CLASS_TUNNEL:",
          "8089:             dissect_amqp_0_9_content_header_tunnel(tvb,",
          "8090:                                                    pinfo, 21, prop_tree);",
          "8093:             expert_add_info_format(pinfo, amqp_tree, &ei_amqp_unknown_header_class, \"Unknown header class %u\", class_id);",
          "8096:     case AMQP_0_9_FRAME_TYPE_CONTENT_BODY:",
          "8097:         proto_tree_add_item(amqp_tree, hf_amqp_payload,",
          "8098:                             tvb, 7, length, ENC_NA);",
          "8099:         col_append_str(pinfo->cinfo, COL_INFO, \"Content-Body \");",
          "8100:         break;",
          "8101:     case AMQP_0_9_FRAME_TYPE_HEARTBEAT:",
          "8102:         col_append_str(pinfo->cinfo, COL_INFO,",
          "8103:                        \"Heartbeat \");",
          "8106:         expert_add_info_format(pinfo, amqp_tree, &ei_amqp_unknown_frame_type, \"Unknown frame type %u\", frame_type);",
          "8109:     col_set_fence(pinfo->cinfo, COL_INFO);",
          "",
          "[Added Lines]",
          "4220:     offset += 2;",
          "4222:     case AMQP_0_10_METHOD_EXCHANGE_DECLARE:",
          "4223:         if ((flag1 & ~0x7f) || (flag2 != 0))",
          "4227:                                 hf_amqp_0_10_method_exchange_declare_exchange,",
          "4228:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "4229:             offset += (1 + tvb_get_guint8(tvb, offset));",
          "4233:                                 hf_amqp_0_10_method_exchange_declare_type,",
          "4234:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "4235:             offset += (1 + tvb_get_guint8(tvb, offset));",
          "4239:                                 hf_amqp_0_10_method_exchange_declare_alt_exchange,",
          "4240:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "4241:             offset += (1 + tvb_get_guint8(tvb, offset));",
          "4247:                             hf_amqp_0_10_method_exchange_declare_passive,",
          "4249:         proto_tree_add_item(args_tree,",
          "4250:                             hf_amqp_0_10_method_exchange_declare_durable,",
          "4251:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "4252:         proto_tree_add_item(args_tree,",
          "4253:                             hf_amqp_0_10_method_exchange_declare_auto_delete,",
          "4254:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "4256:             map_length = amqp_0_10_get_32bit_size_new(args_tree, pinfo, tvb, hf_amqp_0_10_method_exchange_declare_arguments_size, offset);",
          "4257:             offset += 4;",
          "4258:             ti = proto_tree_add_item(args_tree,",
          "4259:                                      hf_amqp_0_10_method_exchange_declare_arguments,",
          "4260:                                      tvb,",
          "4261:                                      offset,",
          "4262:                                      map_length, ENC_NA);",
          "4263:             if (map_length > (guint32)tvb_reported_length_remaining(tvb, offset))",
          "4264:             {",
          "4265:                 next_tvb = tvb_new_subset_remaining(tvb, offset);",
          "4266:             }",
          "4267:             else",
          "4268:             {",
          "4269:                 next_tvb = tvb_new_subset_length(tvb, offset, map_length);",
          "4270:             }",
          "4271:             dissect_amqp_0_10_map (next_tvb, ti);",
          "4273:         }",
          "4276:     case AMQP_0_10_METHOD_EXCHANGE_DELETE:",
          "4277:         if ((flag1 & ~0x03) || (flag2 != 0))",
          "4281:                                 hf_amqp_0_10_method_exchange_declare_exchange,",
          "4282:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "4289:                             hf_amqp_0_10_method_exchange_delete_if_unused,",
          "4293:     case AMQP_0_10_METHOD_EXCHANGE_QUERY:",
          "4298:                                 hf_amqp_0_10_method_exchange_declare_exchange,",
          "4299:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "4304:     case AMQP_0_10_METHOD_EXCHANGE_BIND:",
          "4309:                                 hf_amqp_0_10_method_exchange_bind_queue,",
          "4310:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "4311:             offset += (1 + tvb_get_guint8(tvb, offset));",
          "4315:                                 hf_amqp_0_10_method_exchange_declare_exchange,",
          "4316:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "4317:             offset += (1 + tvb_get_guint8(tvb, offset));",
          "4318:         }",
          "4320:             proto_tree_add_item(args_tree,",
          "4321:                                 hf_amqp_0_10_method_exchange_binding_key,",
          "4322:                                 tvb, offset, 1, ENC_ASCII|ENC_NA);",
          "4323:             offset += (1 + tvb_get_guint8(tvb, offset));",
          "4324:         }",
          "4326:             map_length = amqp_0_10_get_32bit_size_new(args_tree, pinfo, tvb, hf_amqp_0_10_method_exchange_declare_arguments_size, offset);",
          "4327:             offset += 4;",
          "4328:             ti = proto_tree_add_item(args_tree,",
          "4329:                                      hf_amqp_0_10_method_exchange_declare_arguments,",
          "4330:                                      tvb,",
          "4331:                                      offset,",
          "4332:                                      map_length, ENC_NA);",
          "4333:             if (map_length > (guint32)tvb_reported_length_remaining(tvb, offset))",
          "4334:             {",
          "4335:                 next_tvb = tvb_new_subset_remaining(tvb, offset);",
          "4336:             }",
          "4337:             else",
          "4338:             {",
          "4339:                 next_tvb = tvb_new_subset_length(tvb, offset, map_length);",
          "4340:             }",
          "4341:             dissect_amqp_0_10_map (next_tvb, ti);",
          "4346:     case AMQP_0_10_METHOD_EXCHANGE_UNBIND:",
          "4347:         if ((flag1 & ~0x07) || (flag2 != 0))",
          "4351:                                 hf_amqp_0_10_method_exchange_bind_queue,",
          "4352:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "4353:             offset += (1 + tvb_get_guint8(tvb, offset));",
          "4357:                                 hf_amqp_0_10_method_exchange_declare_exchange,",
          "4358:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "4359:             offset += (1 + tvb_get_guint8(tvb, offset));",
          "4363:                                 hf_amqp_0_10_method_exchange_binding_key,",
          "4364:                                 tvb, offset, 1, ENC_ASCII|ENC_NA);",
          "4369:     case AMQP_0_10_METHOD_EXCHANGE_BOUND:",
          "4374:                                 hf_amqp_0_10_method_exchange_declare_exchange,",
          "4375:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "4376:             offset += (1 + tvb_get_guint8(tvb, offset));",
          "4380:                                 hf_amqp_0_10_method_exchange_bind_queue,",
          "4381:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "4382:             offset += (1 + tvb_get_guint8(tvb, offset));",
          "4386:                                 hf_amqp_0_10_method_exchange_binding_key,",
          "4387:                                 tvb, offset, 1, ENC_ASCII|ENC_NA);",
          "4388:             offset += (1 + tvb_get_guint8(tvb, offset));",
          "4391:             map_length = amqp_0_10_get_32bit_size_new(args_tree, pinfo, tvb, hf_amqp_0_10_method_exchange_declare_arguments_size, offset);",
          "4392:             offset += 4;",
          "4393:             ti = proto_tree_add_item(args_tree,",
          "4394:                                      hf_amqp_0_10_method_exchange_declare_arguments,",
          "4395:                                      tvb,",
          "4396:                                      offset,",
          "4397:                                      map_length, ENC_NA);",
          "4398:             if (map_length > (guint32)tvb_reported_length_remaining(tvb, offset))",
          "4399:             {",
          "4400:                 next_tvb = tvb_new_subset_remaining(tvb, offset);",
          "4401:             }",
          "4402:             else",
          "4403:             {",
          "4404:                 next_tvb = tvb_new_subset_length(tvb, offset, map_length);",
          "4405:             }",
          "4406:             dissect_amqp_0_10_map (next_tvb, ti);",
          "4408:         }",
          "4409:         break;",
          "4414: dissect_amqp_0_10_queue(tvbuff_t *tvb,",
          "4415:                         packet_info *pinfo,",
          "4416:                         proto_tree *tree)",
          "4418:     proto_item  *args_tree;",
          "4419:     proto_item  *ti;",
          "4420:     proto_item  *flags_item;",
          "4421:     guint8       method;",
          "4422:     guint8       flag1, flag2;",
          "4423:     guint32      map_length;",
          "4424:     int          flags_offset;",
          "4425:     const gchar *method_name;",
          "4426:     int offset = 0;",
          "4427:     tvbuff_t *next_tvb;",
          "4429:     method = tvb_get_guint8(tvb, offset+1);",
          "4430:     method_name = val_to_str_const(method, amqp_0_10_queue_methods,",
          "4431:                                    \"<invalid queue method>\");",
          "4432:     col_append_fstr(pinfo->cinfo, COL_INFO, \"%s \", method_name);",
          "4433:     col_set_fence(pinfo->cinfo, COL_INFO);",
          "4435:     proto_tree_add_item(tree, hf_amqp_0_10_queue_method,",
          "4436:                         tvb, offset+1, 1, ENC_BIG_ENDIAN);",
          "4437:     offset += 2;",
          "4444:     ti = proto_tree_add_item(tree, hf_amqp_0_10_session_header, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "4445:     if ((flag1 != 1) || ((flag2 & 0xfe) != 0))",
          "4446:         proto_item_append_text(ti, \" (Invalid)\");",
          "4447:     else",
          "4448:         proto_tree_add_item(tree, hf_amqp_0_10_session_header_sync,",
          "4449:                             tvb, offset + 1, 1, ENC_BIG_ENDIAN);",
          "4450:     offset += 2;",
          "4452:     ti = proto_tree_add_item(tree, hf_amqp_method_arguments,",
          "4453:                              tvb, offset, -1, ENC_NA);",
          "4454:     args_tree = proto_item_add_subtree(ti, ett_args);",
          "4461:     flags_offset = offset;",
          "4464:     flags_item = proto_tree_add_item(args_tree,",
          "4467:     offset += 2;",
          "4468:     switch (method) {",
          "4469:     case AMQP_0_10_METHOD_QUEUE_DECLARE:",
          "4470:         if ((flag1 & ~0x7f) || (flag2 != 0))",
          "4471:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4474:                                 hf_amqp_0_10_method_queue_name,",
          "4475:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "4476:             offset += (1 + tvb_get_guint8(tvb, offset));",
          "4480:                                 hf_amqp_0_10_method_queue_alt_exchange,",
          "4481:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "4482:             offset += (1 + tvb_get_guint8(tvb, offset));",
          "4487:         proto_tree_add_item(args_tree,",
          "4488:                             hf_amqp_0_10_method_queue_declare_passive,",
          "4489:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "4490:         proto_tree_add_item(args_tree,",
          "4491:                             hf_amqp_0_10_method_queue_declare_durable,",
          "4492:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "4493:         proto_tree_add_item(args_tree,",
          "4494:                             hf_amqp_0_10_method_queue_declare_exclusive,",
          "4495:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "4496:         proto_tree_add_item(args_tree,",
          "4497:                             hf_amqp_0_10_method_queue_declare_auto_delete,",
          "4498:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "4500:             map_length = amqp_0_10_get_32bit_size_new(args_tree, pinfo, tvb, hf_amqp_0_10_method_queue_declare_arguments_size, offset);",
          "4501:             offset += 4;",
          "4502:             ti = proto_tree_add_item(args_tree,",
          "4503:                                      hf_amqp_0_10_method_queue_declare_arguments,",
          "4504:                                      tvb,",
          "4505:                                      offset,",
          "4506:                                      map_length, ENC_NA);",
          "4507:             if (map_length > (guint32)tvb_reported_length_remaining(tvb, offset))",
          "4508:             {",
          "4509:                 next_tvb = tvb_new_subset_remaining(tvb, offset);",
          "4510:             }",
          "4511:             else",
          "4512:             {",
          "4513:                 next_tvb = tvb_new_subset_length(tvb, offset, map_length);",
          "4514:             }",
          "4515:             dissect_amqp_0_10_map (next_tvb, ti);",
          "4517:         }",
          "4518:         break;",
          "4520:     case AMQP_0_10_METHOD_QUEUE_DELETE:",
          "4521:         if ((flag1 & ~0x07) || (flag2 != 0))",
          "4522:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4524:             proto_tree_add_item(args_tree,",
          "4525:                                 hf_amqp_0_10_method_queue_name,",
          "4526:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "4528:         }",
          "4532:         proto_tree_add_item(args_tree,",
          "4533:                             hf_amqp_0_10_method_queue_delete_if_unused,",
          "4534:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "4535:         proto_tree_add_item(args_tree,",
          "4536:                             hf_amqp_0_10_method_queue_delete_if_empty,",
          "4537:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "4538:         break;",
          "4540:     case AMQP_0_10_METHOD_QUEUE_PURGE:",
          "4541:         if ((flag1 & ~0x01) || (flag2 != 0))",
          "4542:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4544:             proto_tree_add_item(args_tree,",
          "4545:                                 hf_amqp_0_10_method_queue_name,",
          "4546:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "4548:         }",
          "4549:         break;",
          "4551:     case AMQP_0_10_METHOD_QUEUE_QUERY:",
          "4552:         if ((flag1 & ~0x01) || (flag2 != 0))",
          "4553:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4555:             proto_tree_add_item(args_tree,",
          "4556:                                 hf_amqp_0_10_method_queue_name,",
          "4557:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "4559:         }",
          "4560:         break;",
          "4565: dissect_amqp_0_10_file(tvbuff_t *tvb,",
          "4566:                        packet_info *pinfo,",
          "4567:                        proto_tree *tree)",
          "4569:     proto_item  *args_tree;",
          "4570:     proto_item  *ti;",
          "4571:     proto_item  *flags_item;",
          "4572:     guint8       method;",
          "4573:     guint8       flag1, flag2;",
          "4574:     guint32      map_length;",
          "4575:     int          flags_offset;",
          "4576:     const gchar *method_name;",
          "4577:     int offset = 0;",
          "4578:     tvbuff_t    *next_tvb;",
          "4580:     method = tvb_get_guint8(tvb, offset+1);",
          "4581:     method_name = val_to_str_const(method, amqp_0_10_file_methods,",
          "4582:                                    \"<invalid file method>\");",
          "4583:     col_append_fstr(pinfo->cinfo, COL_INFO, \"%s \", method_name);",
          "4584:     col_set_fence(pinfo->cinfo, COL_INFO);",
          "4586:     proto_tree_add_item(tree, hf_amqp_0_10_file_method,",
          "4587:                         tvb, offset+1, 1, ENC_BIG_ENDIAN);",
          "4588:     offset += 2;",
          "4593:     flag1 = tvb_get_guint8(tvb, offset);",
          "4594:     flag2 = tvb_get_guint8(tvb, offset+1);",
          "4595:     ti = proto_tree_add_item(tree, hf_amqp_0_10_session_header, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "4596:     if ((flag1 != 1) || ((flag2 & 0xfe) != 0))",
          "4597:         proto_item_append_text(ti, \" (Invalid)\");",
          "4598:     else",
          "4599:         proto_tree_add_item(tree, hf_amqp_0_10_session_header_sync,",
          "4600:                             tvb, offset + 1, 1, ENC_BIG_ENDIAN);",
          "4601:     offset += 2;",
          "4603:     ti = proto_tree_add_item(tree, hf_amqp_method_arguments,",
          "4604:                              tvb, offset, -1, ENC_NA);",
          "4605:     args_tree = proto_item_add_subtree(ti, ett_args);",
          "4615:     flags_item = proto_tree_add_item(args_tree,",
          "4618:     offset += 2;",
          "4619:     switch (method) {",
          "4620:     case AMQP_0_10_METHOD_FILE_QOS:",
          "4621:         if ((flag1 & ~0x07) || (flag2 != 0))",
          "4622:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4624:             proto_tree_add_item(args_tree,",
          "4625:                                 hf_amqp_0_10_method_file_qos_prefetch_size,",
          "4626:                                 tvb, offset, 4, ENC_BIG_ENDIAN);",
          "4627:             offset += 4;",
          "4628:         }",
          "4630:             proto_tree_add_item(args_tree,",
          "4631:                                 hf_amqp_0_10_method_file_qos_prefetch_count,",
          "4632:                                 tvb, offset, 2, ENC_BIG_ENDIAN);",
          "4634:         }",
          "4638:         proto_tree_add_item(args_tree,",
          "4639:                             hf_amqp_0_10_method_file_qos_global,",
          "4640:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "4641:         break;",
          "4643:     case AMQP_0_10_METHOD_FILE_QOS_OK:",
          "4644:     case AMQP_0_10_METHOD_FILE_STAGE:",
          "4646:         break;",
          "4648:     case AMQP_0_10_METHOD_FILE_CONSUME:",
          "4649:         if ((flag1 & ~0x7f) || (flag2 != 0))",
          "4650:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4652:             proto_tree_add_item(args_tree,",
          "4653:                                 hf_amqp_0_10_method_queue_name,",
          "4654:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "4655:             offset += (1 + tvb_get_guint8(tvb, offset));",
          "4656:         }",
          "4658:             proto_tree_add_item(args_tree,",
          "4659:                                 hf_amqp_0_10_method_file_consumer_tag,",
          "4660:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "4661:             offset += (1 + tvb_get_guint8(tvb, offset));",
          "4662:         }",
          "4666:         proto_tree_add_item(args_tree,",
          "4667:                             hf_amqp_0_10_method_file_consume_no_local,",
          "4668:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "4669:         proto_tree_add_item(args_tree,",
          "4670:                             hf_amqp_0_10_method_file_consume_no_ack,",
          "4671:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "4672:         proto_tree_add_item(args_tree,",
          "4673:                             hf_amqp_0_10_method_file_consume_exclusive,",
          "4674:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "4675:         proto_tree_add_item(args_tree,",
          "4676:                             hf_amqp_0_10_method_file_consume_nowait,",
          "4677:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "4679:             map_length = amqp_0_10_get_32bit_size_new(args_tree, pinfo, tvb, hf_amqp_0_10_method_file_consume_arguments_size, offset);",
          "4680:             offset += 4;",
          "4681:             ti = proto_tree_add_item(args_tree,",
          "4682:                                      hf_amqp_0_10_method_file_consume_arguments,",
          "4683:                                      tvb,",
          "4684:                                      offset,",
          "4685:                                      map_length, ENC_NA);",
          "4686:             if (map_length > (guint32)tvb_reported_length_remaining(tvb, offset))",
          "4687:             {",
          "4688:                 next_tvb = tvb_new_subset_remaining(tvb, offset);",
          "4689:             }",
          "4690:             else",
          "4691:             {",
          "4692:                 next_tvb = tvb_new_subset_length(tvb, offset, map_length);",
          "4693:             }",
          "4694:             dissect_amqp_0_10_map (next_tvb, ti);",
          "4696:         }",
          "4697:         break;",
          "4699:     case AMQP_0_10_METHOD_FILE_CONSUME_OK:",
          "4700:     case AMQP_0_10_METHOD_FILE_CANCEL:",
          "4701:         if ((flag1 & ~0x01) || (flag2 != 0))",
          "4702:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4704:             proto_tree_add_item(args_tree,",
          "4705:                                 hf_amqp_0_10_method_file_consumer_tag,",
          "4706:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "4708:         }",
          "4709:         break;",
          "4711:     case AMQP_0_10_METHOD_FILE_OPEN:",
          "4712:         if ((flag1 & ~0x03) || (flag2 != 0))",
          "4713:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4715:             proto_tree_add_item(args_tree,",
          "4716:                                 hf_amqp_0_10_method_file_identifier,",
          "4717:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "4718:             offset += (1 + tvb_get_guint8(tvb, offset));",
          "4719:         }",
          "4721:             proto_tree_add_item(args_tree,",
          "4722:                                 hf_amqp_0_10_method_file_open_content_size,",
          "4723:                                 tvb, offset, 8, ENC_BIG_ENDIAN);",
          "4725:         }",
          "4726:         break;",
          "4728:     case AMQP_0_10_METHOD_FILE_OPEN_OK:",
          "4729:         if ((flag1 & ~0x01) || (flag2 != 0))",
          "4730:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4732:             proto_tree_add_item(args_tree,",
          "4733:                                 hf_amqp_0_10_method_file_open_ok_staged_size,",
          "4734:                                 tvb, offset, 8, ENC_BIG_ENDIAN);",
          "4736:         }",
          "4737:         break;",
          "4739:     case AMQP_0_10_METHOD_FILE_PUBLISH:",
          "4740:         if ((flag1 & ~0x1f) || (flag2 != 0))",
          "4741:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4743:             proto_tree_add_item(args_tree,",
          "4744:                                 hf_amqp_0_10_method_file_publish_exchange,",
          "4745:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "4746:             offset += (1 + tvb_get_guint8(tvb, offset));",
          "4747:         }",
          "4749:             proto_tree_add_item(args_tree,",
          "4750:                                 hf_amqp_0_10_method_file_publish_routing_key,",
          "4751:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "4752:             offset += (1 + tvb_get_guint8(tvb, offset));",
          "4753:         }",
          "4757:         proto_tree_add_item(args_tree,",
          "4758:                             hf_amqp_0_10_method_file_publish_mandatory,",
          "4759:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "4760:         proto_tree_add_item(args_tree,",
          "4761:                             hf_amqp_0_10_method_file_publish_immediate,",
          "4762:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "4764:             proto_tree_add_item(args_tree,",
          "4765:                                 hf_amqp_0_10_method_file_identifier,",
          "4766:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "4768:         }",
          "4769:         break;",
          "4771:     case AMQP_0_10_METHOD_FILE_RETURN:",
          "4772:         if ((flag1 & ~0x0f) || (flag2 != 0))",
          "4773:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4775:             proto_tree_add_item(args_tree,",
          "4776:                                 hf_amqp_0_10_method_file_return_reply_code,",
          "4777:                                 tvb, offset, 2, ENC_BIG_ENDIAN);",
          "4778:             offset += 2;",
          "4779:         }",
          "4781:             proto_tree_add_item(args_tree,",
          "4782:                                 hf_amqp_0_10_method_file_return_reply_text,",
          "4783:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "4784:             offset += (1 + tvb_get_guint8(tvb, offset));",
          "4785:         }",
          "4787:             proto_tree_add_item(args_tree,",
          "4788:                                 hf_amqp_0_10_method_file_return_exchange,",
          "4789:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "4790:             offset += (1 + tvb_get_guint8(tvb, offset));",
          "4791:         }",
          "4793:             proto_tree_add_item(args_tree,",
          "4794:                                 hf_amqp_0_10_method_file_return_routing_key,",
          "4795:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "4797:         }",
          "4798:         break;",
          "4800:     case AMQP_0_10_METHOD_FILE_DELIVER:",
          "4801:         if ((flag1 & ~0x3f) || (flag2 != 0))",
          "4802:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4804:             proto_tree_add_item(args_tree,",
          "4805:                                 hf_amqp_0_10_method_file_deliver_consumer_tag,",
          "4806:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "4807:             offset += (1 + tvb_get_guint8(tvb, offset));",
          "4808:         }",
          "4810:             proto_tree_add_item(args_tree,",
          "4811:                                 hf_amqp_0_10_method_file_deliver_delivery_tag,",
          "4812:                                 tvb, offset, 8, ENC_BIG_ENDIAN);",
          "4813:             offset += 8;",
          "4814:         }",
          "4818:         proto_tree_add_item(args_tree,",
          "4819:                             hf_amqp_0_10_method_file_deliver_redelivered,",
          "4820:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "4822:             proto_tree_add_item(args_tree,",
          "4823:                                 hf_amqp_0_10_method_file_deliver_exchange,",
          "4824:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "4825:             offset += (1 + tvb_get_guint8(tvb, offset));",
          "4826:         }",
          "4828:             proto_tree_add_item(args_tree,",
          "4829:                                 hf_amqp_0_10_method_file_deliver_routing_key,",
          "4830:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "4831:             offset += (1 + tvb_get_guint8(tvb, offset));",
          "4832:         }",
          "4834:             proto_tree_add_item(args_tree,",
          "4835:                                 hf_amqp_0_10_method_file_identifier,",
          "4836:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "4838:         }",
          "4839:         break;",
          "4841:     case AMQP_0_10_METHOD_FILE_ACK:",
          "4842:         if ((flag1 & ~0x03) || (flag2 != 0))",
          "4843:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4845:             proto_tree_add_item(args_tree,",
          "4846:                                 hf_amqp_0_10_method_file_ack_delivery_tag,",
          "4847:                                 tvb, offset, 8, ENC_BIG_ENDIAN);",
          "4849:         }",
          "4853:         proto_tree_add_item(args_tree,",
          "4854:                             hf_amqp_0_10_method_file_ack_multiple,",
          "4855:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "4856:         break;",
          "4858:     case AMQP_0_10_METHOD_FILE_REJECT:",
          "4859:         if ((flag1 & ~0x03) || (flag2 != 0))",
          "4860:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4862:             proto_tree_add_item(args_tree,",
          "4863:                                 hf_amqp_0_10_method_file_reject_delivery_tag,",
          "4864:                                 tvb, offset, 8, ENC_BIG_ENDIAN);",
          "4866:         }",
          "4870:         proto_tree_add_item(args_tree,",
          "4871:                             hf_amqp_0_10_method_file_reject_requeue,",
          "4872:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "4873:         break;",
          "4878: dissect_amqp_0_10_stream(tvbuff_t *tvb,",
          "4879:                          packet_info *pinfo,",
          "4880:                          proto_tree *tree)",
          "4882:     proto_item  *args_tree;",
          "4883:     proto_item  *ti;",
          "4884:     proto_item  *flags_item;",
          "4885:     guint8       method;",
          "4886:     guint8       flag1, flag2;",
          "4887:     guint32      map_length;",
          "4888:     int          flags_offset;",
          "4889:     const gchar *method_name;",
          "4890:     int offset = 0;",
          "4891:     tvbuff_t *next_tvb;",
          "4893:     method = tvb_get_guint8(tvb, offset+1);",
          "4894:     method_name = val_to_str_const(method, amqp_0_10_stream_methods,",
          "4895:                                    \"<invalid stream method>\");",
          "4896:     col_append_fstr(pinfo->cinfo, COL_INFO, \"%s \", method_name);",
          "4897:     col_set_fence(pinfo->cinfo, COL_INFO);",
          "4899:     proto_tree_add_item(tree, hf_amqp_0_10_stream_method,",
          "4900:                         tvb, offset+1, 1, ENC_BIG_ENDIAN);",
          "4901:     offset += 2;",
          "4908:     ti = proto_tree_add_item(tree, hf_amqp_0_10_session_header, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "4909:     if ((flag1 != 1) || ((flag2 & 0xfe) != 0))",
          "4910:         proto_item_append_text(ti, \" (Invalid)\");",
          "4911:     else",
          "4912:         proto_tree_add_item(tree, hf_amqp_0_10_session_header_sync,",
          "4913:                             tvb, offset + 1, 1, ENC_BIG_ENDIAN);",
          "4914:     offset += 2;",
          "4916:     ti = proto_tree_add_item(tree, hf_amqp_method_arguments,",
          "4917:                              tvb, offset, -1, ENC_NA);",
          "4918:     args_tree = proto_item_add_subtree(ti, ett_args);",
          "4925:     flags_offset = offset;",
          "4928:     flags_item = proto_tree_add_item(args_tree,",
          "4931:     offset += 2;",
          "4932:     switch (method) {",
          "4933:     case AMQP_0_10_METHOD_STREAM_QOS:",
          "4934:         if ((flag1 & ~0x0f) || (flag2 != 0))",
          "4935:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4937:             proto_tree_add_item(args_tree,",
          "4938:                                 hf_amqp_0_10_method_stream_qos_prefetch_size,",
          "4939:                                 tvb, offset, 4, ENC_BIG_ENDIAN);",
          "4940:             offset += 4;",
          "4941:         }",
          "4943:             proto_tree_add_item(args_tree,",
          "4944:                                 hf_amqp_0_10_method_stream_qos_prefetch_count,",
          "4949:             proto_tree_add_item(args_tree,",
          "4950:                                 hf_amqp_0_10_method_stream_qos_prefetch_size,",
          "4951:                                 tvb, offset, 4, ENC_BIG_ENDIAN);",
          "4953:         }",
          "4957:         proto_tree_add_item(args_tree,",
          "4958:                             hf_amqp_0_10_method_stream_qos_global,",
          "4959:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "4962:     case AMQP_0_10_METHOD_STREAM_QOS_OK:",
          "4964:         break;",
          "4966:     case AMQP_0_10_METHOD_STREAM_CONSUME:",
          "4967:         if ((flag1 & ~0x3f) || (flag2 != 0))",
          "4968:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "4970:             proto_tree_add_item(args_tree,",
          "4971:                                 hf_amqp_0_10_method_queue_name,",
          "4972:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "4973:             offset += (1 + tvb_get_guint8(tvb, offset));",
          "4974:         }",
          "4976:             proto_tree_add_item(args_tree,",
          "4977:                                 hf_amqp_0_10_method_stream_consumer_tag,",
          "4978:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "4979:             offset += (1 + tvb_get_guint8(tvb, offset));",
          "4980:         }",
          "4984:         proto_tree_add_item(args_tree,",
          "4985:                             hf_amqp_0_10_method_stream_consume_no_local,",
          "4986:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "4987:         proto_tree_add_item(args_tree,",
          "4988:                             hf_amqp_0_10_method_stream_consume_exclusive,",
          "4989:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "4990:         proto_tree_add_item(args_tree,",
          "4991:                             hf_amqp_0_10_method_stream_consume_nowait,",
          "4992:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "4994:             map_length = amqp_0_10_get_32bit_size_new(args_tree, pinfo, tvb, hf_amqp_0_10_method_stream_consume_arguments_size, offset);",
          "4996:             ti = proto_tree_add_item(args_tree,",
          "4997:                                      hf_amqp_0_10_method_stream_consume_arguments,",
          "4998:                                      tvb,",
          "4999:                                      offset,",
          "5000:                                      map_length, ENC_NA);",
          "5001:             if (map_length > (guint32)tvb_reported_length_remaining(tvb, offset))",
          "5002:             {",
          "5003:                 next_tvb = tvb_new_subset_remaining(tvb, offset);",
          "5004:             }",
          "5005:             else",
          "5006:             {",
          "5007:                 next_tvb = tvb_new_subset_length(tvb, offset, map_length);",
          "5008:             }",
          "5009:             dissect_amqp_0_10_map (next_tvb, ti);",
          "5014:     case AMQP_0_10_METHOD_STREAM_CONSUME_OK:",
          "5015:     case AMQP_0_10_METHOD_STREAM_CANCEL:",
          "5016:         if ((flag1 & ~0x01) || (flag2 != 0))",
          "5017:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "5019:             proto_tree_add_item(args_tree,",
          "5020:                                 hf_amqp_0_10_method_stream_consumer_tag,",
          "5021:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "5026:     case AMQP_0_10_METHOD_STREAM_PUBLISH:",
          "5027:         if ((flag1 & ~0x0f) || (flag2 != 0))",
          "5028:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "5030:             proto_tree_add_item(args_tree,",
          "5031:                                 hf_amqp_0_10_method_stream_publish_exchange,",
          "5032:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "5033:             offset += (1 + tvb_get_guint8(tvb, offset));",
          "5036:             proto_tree_add_item(args_tree,",
          "5037:                                 hf_amqp_0_10_method_stream_publish_routing_key,",
          "5038:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "5044:         proto_tree_add_item(args_tree,",
          "5045:                             hf_amqp_0_10_method_stream_publish_mandatory,",
          "5046:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "5047:         proto_tree_add_item(args_tree,",
          "5048:                             hf_amqp_0_10_method_stream_publish_immediate,",
          "5049:                             tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "5052:     case AMQP_0_10_METHOD_STREAM_RETURN:",
          "5053:         if ((flag1 & ~0x0f) || (flag2 != 0))",
          "5054:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "5056:             proto_tree_add_item(args_tree,",
          "5057:                                 hf_amqp_0_10_method_stream_return_reply_code,",
          "5058:                                 tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5059:             offset += 2;",
          "5060:         }",
          "5062:             proto_tree_add_item(args_tree,",
          "5063:                                 hf_amqp_0_10_method_stream_return_reply_text,",
          "5064:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "5065:             offset += (1 + tvb_get_guint8(tvb, offset));",
          "5066:         }",
          "5068:             proto_tree_add_item(args_tree,",
          "5069:                                 hf_amqp_0_10_method_stream_return_exchange,",
          "5070:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "5071:             offset += (1 + tvb_get_guint8(tvb, offset));",
          "5072:         }",
          "5074:             proto_tree_add_item(args_tree,",
          "5075:                                 hf_amqp_0_10_method_stream_return_routing_key,",
          "5076:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "5081:     case AMQP_0_10_METHOD_STREAM_DELIVER:",
          "5082:         if ((flag1 & ~0x0f) || (flag2 != 0))",
          "5083:             expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "5085:             proto_tree_add_item(args_tree,",
          "5086:                                 hf_amqp_0_10_method_stream_deliver_consumer_tag,",
          "5087:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "5088:             offset += (1 + tvb_get_guint8(tvb, offset));",
          "5089:         }",
          "5091:             proto_tree_add_item(args_tree,",
          "5092:                                 hf_amqp_0_10_method_stream_deliver_delivery_tag,",
          "5093:                                 tvb, offset, 8, ENC_BIG_ENDIAN);",
          "5094:             offset += 8;",
          "5095:         }",
          "5097:             proto_tree_add_item(args_tree,",
          "5098:                                 hf_amqp_0_10_method_stream_deliver_exchange,",
          "5099:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "5100:             offset += (1 + tvb_get_guint8(tvb, offset));",
          "5101:         }",
          "5103:             proto_tree_add_item(args_tree,",
          "5104:                                 hf_amqp_0_10_method_stream_deliver_queue,",
          "5105:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "5107:         }",
          "5108:         break;",
          "5110: }",
          "5112: static void",
          "5113: dissect_amqp_0_10_struct_delivery_properties(tvbuff_t *tvb,",
          "5114:                                              packet_info *pinfo,",
          "5115:                                              proto_tree *tree)",
          "5116: {",
          "5117:     proto_item *args_tree;",
          "5118:     proto_item *flags_item;",
          "5119:     guint8      flag1, flag2;",
          "5120:     guint64     timestamp;",
          "5121:     int         flags_offset;",
          "5122:     nstime_t    tv;",
          "5123:     int         offset = 0;",
          "5125:     args_tree = proto_item_add_subtree(tree, ett_args);",
          "5127:     flags_offset = offset;",
          "5128:     flag1 = tvb_get_guint8(tvb, offset);",
          "5129:     flag2 = tvb_get_guint8(tvb, offset+1);",
          "5130:     flags_item = proto_tree_add_item(args_tree,",
          "5131:                                      hf_amqp_0_10_argument_packing_flags,",
          "5132:                                      tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5133:     if (flag2 & ~0x0f)",
          "5134:         expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "5135:     offset += 2;",
          "5138:     proto_tree_add_item(args_tree,",
          "5139:                         hf_amqp_0_10_struct_delivery_properties_discard_unroutable,",
          "5140:                         tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "5141:     proto_tree_add_item(args_tree,",
          "5142:                         hf_amqp_0_10_struct_delivery_properties_immediate,",
          "5143:                         tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "5144:     proto_tree_add_item(args_tree,",
          "5145:                         hf_amqp_0_10_struct_delivery_properties_redelivered,",
          "5146:                         tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "5147:     if (flag1 & 0x08) {",
          "5149:         proto_tree_add_item(args_tree,",
          "5150:                             hf_amqp_0_10_struct_delivery_properties_priority,",
          "5151:                             tvb, offset, 1, ENC_BIG_ENDIAN);",
          "5152:         offset += 1;",
          "5154:     if (flag1 & 0x10) {",
          "5156:         proto_tree_add_item(args_tree,",
          "5157:                             hf_amqp_0_10_struct_delivery_properties_mode,",
          "5158:                             tvb, offset, 1, ENC_BIG_ENDIAN);",
          "5159:         offset += 1;",
          "5160:     }",
          "5161:     if (flag1 & 0x20) {",
          "5163:         proto_tree_add_item(args_tree,",
          "5164:                             hf_amqp_0_10_struct_delivery_properties_ttl,",
          "5165:                             tvb, offset, 8, ENC_BIG_ENDIAN);",
          "5166:         offset += 8;",
          "5167:     }",
          "5168:     if (flag1 & 0x40) {",
          "5170:         timestamp = tvb_get_ntoh64(tvb, offset);",
          "5171:         tv.secs = (time_t)timestamp;",
          "5172:         tv.nsecs = 0;",
          "5173:         proto_tree_add_time(args_tree,",
          "5174:                             hf_amqp_0_10_struct_delivery_properties_timestamp,",
          "5175:                             tvb, offset, 8, &tv);",
          "5176:         offset += 8;",
          "5177:     }",
          "5178:     if (flag1 & 0x80) {",
          "5180:         timestamp = tvb_get_ntoh64(tvb, offset);",
          "5181:         tv.secs = (time_t)timestamp;",
          "5182:         tv.nsecs = 0;",
          "5183:         proto_tree_add_time(args_tree,",
          "5184:                             hf_amqp_0_10_struct_delivery_properties_expiration,",
          "5185:                             tvb, offset, 8, &tv);",
          "5186:         offset += 8;",
          "5187:     }",
          "5188:     if (flag2 & 0x01) {",
          "5190:         proto_tree_add_item(args_tree,",
          "5191:                             hf_amqp_0_10_struct_delivery_properties_exchange,",
          "5192:                             tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "5193:         offset += (1 + tvb_get_guint8(tvb, offset));",
          "5194:     }",
          "5195:     if (flag2 & 0x02) {",
          "5197:         proto_tree_add_item(args_tree,",
          "5198:                             hf_amqp_0_10_struct_delivery_properties_routing_key,",
          "5199:                             tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "5200:         offset += (1 + tvb_get_guint8(tvb, offset));",
          "5201:     }",
          "5202:     if (flag2 & 0x04) {",
          "5204:         proto_tree_add_item(args_tree,",
          "5205:                             hf_amqp_0_10_method_message_resume_id,",
          "5206:                             tvb, offset, 2, ENC_ASCII|ENC_BIG_ENDIAN);",
          "5207:         offset += (2 + tvb_get_ntohs(tvb, offset));",
          "5208:     }",
          "5209:     if (flag2 & 0x08) {",
          "5211:         proto_tree_add_item(args_tree,",
          "5212:                             hf_amqp_0_10_struct_delivery_properties_resume_ttl,",
          "5213:                             tvb, offset, 8, ENC_BIG_ENDIAN);",
          "5218: static void",
          "5219: dissect_amqp_0_10_struct_fragment_properties(tvbuff_t *tvb,",
          "5220:                                              packet_info *pinfo,",
          "5221:                                              proto_tree *tree)",
          "5223:     proto_item *args_tree;",
          "5224:     proto_item *flags_item;",
          "5225:     guint8      flag1, flag2;",
          "5226:     int         flags_offset;",
          "5227:     int         offset = 0;",
          "5229:     args_tree = proto_item_add_subtree(tree, ett_args);",
          "5231:     flags_offset = offset;",
          "5232:     flag1 = tvb_get_guint8(tvb, offset);",
          "5233:     flag2 = tvb_get_guint8(tvb, offset+1);",
          "5234:     flags_item = proto_tree_add_item(args_tree,",
          "5235:                                      hf_amqp_0_10_argument_packing_flags,",
          "5236:                                      tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5237:     if ((flag1 & ~0x07) || (flag2 != 0))",
          "5238:         expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "5239:     offset += 2;",
          "5242:     proto_tree_add_item(args_tree,",
          "5243:                         hf_amqp_0_10_struct_fragment_properties_first,",
          "5244:                         tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "5245:     proto_tree_add_item(args_tree,",
          "5246:                         hf_amqp_0_10_struct_fragment_properties_last,",
          "5247:                         tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "5248:     if (flag1 & 0x04) {",
          "5250:         proto_tree_add_item(args_tree,",
          "5251:                             hf_amqp_0_10_struct_fragment_properties_size,",
          "5252:                             tvb, offset, 8, ENC_BIG_ENDIAN);",
          "5254:     }",
          "5255: }",
          "5257: static void",
          "5258: dissect_amqp_0_10_struct_message_properties(tvbuff_t *tvb,",
          "5259:                                             packet_info *pinfo,",
          "5260:                                             proto_tree *tree)",
          "5261: {",
          "5262:     proto_item *ti;",
          "5263:     proto_item *frag;",
          "5264:     proto_item *args_tree;",
          "5265:     proto_item *flags_item, *subflags_item;",
          "5266:     guint8      flag1, flag2;",
          "5267:     guint8      subflag1, subflag2;",
          "5268:     guint16     len16;",
          "5269:     guint32     map_length;",
          "5270:     int         offset = 0;",
          "5271:     tvbuff_t *next_tvb;",
          "5273:     frag = proto_item_add_subtree(tree, ett_args);",
          "5275:     flag1 = tvb_get_guint8(tvb, offset);",
          "5276:     flag2 = tvb_get_guint8(tvb, offset+1);",
          "5277:     flags_item = proto_tree_add_item(frag,",
          "5278:                                      hf_amqp_0_10_argument_packing_flags,",
          "5279:                                      tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5280:     if (flag2 & ~0x01)",
          "5281:         expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "5282:     offset += 2;",
          "5283:     if (flag1 & 0x01) {",
          "5285:         proto_tree_add_item(frag,",
          "5286:                             hf_amqp_0_10_struct_message_properties_content_len,",
          "5287:                             tvb, offset, 8, ENC_BIG_ENDIAN);",
          "5288:         offset += 8;",
          "5289:     }",
          "5290:     if (flag1 & 0x02) {",
          "5292:         proto_tree_add_item(frag,",
          "5293:                             hf_amqp_0_10_struct_message_properties_message_id,",
          "5294:                             tvb, offset, 16, ENC_BIG_ENDIAN);",
          "5295:         offset += 16;",
          "5296:     }",
          "5297:     if (flag1 & 0x04) {",
          "5299:         proto_tree_add_item(frag,",
          "5300:                             hf_amqp_0_10_struct_message_properties_correlation,",
          "5301:                             tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5302:         offset += (2 + tvb_get_ntohs(tvb, offset));",
          "5303:     }",
          "5304:     if (flag1 & 0x08) {",
          "5307:         len16 = tvb_get_ntohs(tvb, offset);",
          "5308:         offset += 2;",
          "5309:         ti = proto_tree_add_item(frag,",
          "5310:                                  hf_amqp_0_10_struct_message_properties_reply_to,",
          "5311:                                  tvb, offset, len16, ENC_NA);",
          "5312:         args_tree = proto_item_add_subtree(ti, ett_args);",
          "5313:         subflags_item = proto_tree_add_item(args_tree,",
          "5314:                                             hf_amqp_0_10_argument_packing_flags,",
          "5315:                                             tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5316:         subflag1 = tvb_get_guint8(tvb, offset);",
          "5317:         subflag2 = tvb_get_guint8(tvb, offset + 1);",
          "5318:         if ((subflag1 & ~0x03) || (subflag2 != 0))",
          "5319:             expert_add_info(pinfo, subflags_item, &ei_amqp_bad_flag_value);",
          "5320:         offset += 2;",
          "5321:         if (subflag1 & 0x01) {",
          "5323:             proto_tree_add_item(args_tree,",
          "5324:                                 hf_amqp_0_10_struct_reply_to_exchange,",
          "5325:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "5326:             offset += (1 + tvb_get_guint8(tvb, offset));",
          "5327:         }",
          "5328:         if (subflag1 & 0x02) {",
          "5330:             proto_tree_add_item(args_tree,",
          "5331:                                 hf_amqp_0_10_struct_reply_to_routing_key,",
          "5332:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "5333:             offset += (1 + tvb_get_guint8(tvb, offset));",
          "5334:         }",
          "5336:     if (flag1 & 0x10) {",
          "5338:         proto_tree_add_item(frag,",
          "5339:                             hf_amqp_0_10_struct_message_properties_content_type,",
          "5340:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "5341:         offset += (1 + tvb_get_guint8(tvb, offset));",
          "5343:     if (flag1 & 0x20) {",
          "5345:         proto_tree_add_item(frag,",
          "5346:                             hf_amqp_0_10_struct_message_properties_content_encoding,",
          "5347:                                 tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "5348:         offset += (1 + tvb_get_guint8(tvb, offset));",
          "5350:     if (flag1 & 0x40) {",
          "5352:         proto_tree_add_item(frag,",
          "5353:                             hf_amqp_0_10_struct_message_properties_user_id,",
          "5354:                             tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5355:         offset += (2 + tvb_get_ntohs(tvb, offset));",
          "5357:     if (flag1 & 0x80) {",
          "5359:         proto_tree_add_item(frag,",
          "5360:                             hf_amqp_0_10_struct_message_properties_app_id,",
          "5361:                             tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5362:         offset += (2 + tvb_get_ntohs(tvb, offset));",
          "5363:     }",
          "5364:     if (flag2 & 0x01) {",
          "5366:         map_length = amqp_0_10_get_32bit_size_new(frag, pinfo, tvb, hf_amqp_0_10_struct_message_properties_application_headers_size, offset);",
          "5367:         offset += 4;",
          "5368:         ti = proto_tree_add_item(frag,",
          "5369:                                  hf_amqp_0_10_struct_message_properties_application_headers,",
          "5370:                                  tvb,",
          "5371:                                  offset,",
          "5372:                                  map_length, ENC_NA);",
          "5373:         if (map_length > (guint32)tvb_reported_length_remaining(tvb, offset))",
          "5374:         {",
          "5375:             next_tvb = tvb_new_subset_remaining(tvb, offset);",
          "5377:         else",
          "5378:         {",
          "5379:             next_tvb = tvb_new_subset_length(tvb, offset, map_length);",
          "5381:         dissect_amqp_0_10_map (next_tvb, ti);",
          "5386: static void",
          "5387: dissect_amqp_0_10_struct_exchange_query_result(tvbuff_t *tvb,",
          "5388:                                                packet_info *pinfo,",
          "5389:                                                proto_item *tree)",
          "5391:     proto_item *ti;",
          "5392:     proto_item *result;",
          "5393:     proto_item *flags_item;",
          "5394:     guint8      flag1, flag2;",
          "5395:     guint32     map_length;",
          "5396:     int         flags_offset;",
          "5397:     int         offset = 0;",
          "5398:     tvbuff_t   *next_tvb;",
          "5400:     result = proto_item_add_subtree(tree, ett_args);",
          "5402:     flags_offset = offset;",
          "5403:     flag1 = tvb_get_guint8(tvb, offset);",
          "5404:     flag2 = tvb_get_guint8(tvb, offset+1);",
          "5405:     flags_item = proto_tree_add_item(result,",
          "5406:                                      hf_amqp_0_10_argument_packing_flags,",
          "5407:                                      tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5408:     if (flag2 & ~0x0f)",
          "5409:         expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "5410:     offset += 2;",
          "5411:     if (flag1 & 0x01) {",
          "5413:         proto_tree_add_item(result,",
          "5414:                             hf_amqp_0_10_method_exchange_declare_type,",
          "5415:                             tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "5416:         offset += (1 + tvb_get_guint8(tvb, offset));",
          "5418:     proto_tree_add_item(result,",
          "5419:                         hf_amqp_0_10_struct_exchange_query_result_durable,",
          "5420:                         tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "5421:     proto_tree_add_item(result,",
          "5422:                         hf_amqp_0_10_struct_exchange_query_result_not_found,",
          "5423:                         tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "5424:     if (flag1 & 0x08) {",
          "5426:         map_length = amqp_0_10_get_32bit_size_new(result, pinfo, tvb, hf_amqp_0_10_method_exchange_declare_arguments_size, offset);",
          "5427:         offset += 4;",
          "5428:         ti = proto_tree_add_item(result,",
          "5429:                                  hf_amqp_0_10_method_exchange_declare_arguments,",
          "5430:                                  tvb,",
          "5431:                                  offset,",
          "5432:                                  map_length, ENC_NA);",
          "5433:         if (map_length > (guint32)tvb_reported_length_remaining(tvb, offset))",
          "5434:         {",
          "5435:             next_tvb = tvb_new_subset_remaining(tvb, offset);",
          "5436:         }",
          "5438:         {",
          "5439:             next_tvb = tvb_new_subset_length(tvb, offset, map_length);",
          "5440:         }",
          "5441:         dissect_amqp_0_10_map (next_tvb, ti);",
          "5446: static void",
          "5447: dissect_amqp_0_10_struct_queue_query_result(tvbuff_t *tvb,",
          "5448:                                             packet_info *pinfo,",
          "5449:                                             proto_item *tree)",
          "5451:     proto_item *ti;",
          "5452:     proto_item *result;",
          "5453:     proto_item *flags_item;",
          "5454:     guint8      flag1, flag2;",
          "5455:     guint32     map_length;",
          "5456:     int         flags_offset;",
          "5457:     int         offset = 0;",
          "5458:     tvbuff_t   *next_tvb;",
          "5460:     result = proto_item_add_subtree(tree, ett_args);",
          "5462:     flags_offset = offset;",
          "5463:     flag1 = tvb_get_guint8(tvb, offset);",
          "5464:     flag2 = tvb_get_guint8(tvb, offset+1);",
          "5465:     flags_item = proto_tree_add_item(result,",
          "5466:                                      hf_amqp_0_10_argument_packing_flags,",
          "5467:                                      tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5469:     if (flag2 != 0)",
          "5470:         expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "5471:     offset += 2;",
          "5472:     if (flag1 & 0x01) {",
          "5474:         proto_tree_add_item(result,",
          "5475:                             hf_amqp_0_10_method_queue_name,",
          "5476:                             tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "5477:         offset += (1 + tvb_get_guint8(tvb, offset));",
          "5480:         proto_tree_add_item(result,",
          "5481:                             hf_amqp_0_10_method_queue_alt_exchange,",
          "5482:                             tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "5483:         offset += (1 + tvb_get_guint8(tvb, offset));",
          "5484:     }",
          "5488:     proto_tree_add_item(result,",
          "5489:                         hf_amqp_0_10_struct_queue_query_result_durable,",
          "5490:                         tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "5491:     proto_tree_add_item(result,",
          "5492:                         hf_amqp_0_10_struct_queue_query_result_exclusive,",
          "5493:                         tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "5494:     proto_tree_add_item(result,",
          "5495:                         hf_amqp_0_10_struct_queue_query_result_auto_delete,",
          "5496:                         tvb, flags_offset, 1, ENC_BIG_ENDIAN);",
          "5498:         map_length = amqp_0_10_get_32bit_size_new(result, pinfo, tvb, hf_amqp_0_10_method_queue_declare_arguments_size, offset);",
          "5499:         offset += 4;",
          "5500:         ti = proto_tree_add_item(result,",
          "5501:                                  hf_amqp_0_10_method_queue_declare_arguments,",
          "5502:                                  tvb,",
          "5503:                                  offset,",
          "5504:                                  map_length, ENC_NA);",
          "5505:         if (map_length > (guint32)tvb_reported_length_remaining(tvb, offset))",
          "5506:         {",
          "5507:             next_tvb = tvb_new_subset_remaining(tvb, offset);",
          "5508:         }",
          "5509:         else",
          "5510:         {",
          "5511:             next_tvb = tvb_new_subset_length(tvb, offset, map_length);",
          "5512:         }",
          "5513:         dissect_amqp_0_10_map (next_tvb, ti);",
          "5514:         offset += map_length;",
          "5515:     }",
          "5517:         proto_tree_add_item(result,",
          "5518:                             hf_amqp_0_10_struct_queue_query_result_message_count,",
          "5519:                             tvb, offset, 4, ENC_BIG_ENDIAN);",
          "5520:         offset += 4;",
          "5521:     }",
          "5523:         proto_tree_add_item(result,",
          "5524:                             hf_amqp_0_10_struct_queue_query_result_subscriber_count,",
          "5525:                             tvb, offset, 4, ENC_BIG_ENDIAN);",
          "5530: static void",
          "5531: dissect_amqp_0_10_struct_file_properties(tvbuff_t *tvb,",
          "5532:                                          packet_info *pinfo,",
          "5533:                                          proto_tree *tree)",
          "5535:     proto_item *ti;",
          "5536:     proto_item *props;",
          "5537:     proto_item *flags_item;",
          "5538:     guint8      flag1, flag2;",
          "5539:     guint32     map_length;",
          "5540:     guint64     timestamp;",
          "5541:     int         offset = 0;",
          "5542:     nstime_t    tv;",
          "5543:     tvbuff_t   *next_tvb;",
          "5545:     props = proto_item_add_subtree(tree, ett_args);",
          "5547:     flag1 = tvb_get_guint8(tvb, offset);",
          "5548:     flag2 = tvb_get_guint8(tvb, offset+1);",
          "5549:     flags_item = proto_tree_add_item(props,",
          "5550:                                      hf_amqp_0_10_argument_packing_flags,",
          "5551:                                      tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5552:     if (flag2 & ~0x01)",
          "5553:         expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "5554:     offset += 2;",
          "5555:     if (flag1 & 0x01) {",
          "5557:         proto_tree_add_item(props,",
          "5558:                             hf_amqp_0_10_struct_file_properties_content_type,",
          "5559:                             tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "5560:         offset += (1 + tvb_get_guint8(tvb, offset));",
          "5561:     }",
          "5562:     if (flag1 & 0x02) {",
          "5564:         proto_tree_add_item(props,",
          "5565:                             hf_amqp_0_10_struct_file_properties_content_encoding,",
          "5566:                             tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "5567:         offset += (1 + tvb_get_guint8(tvb, offset));",
          "5568:     }",
          "5569:     if (flag1 & 0x04) {",
          "5571:         map_length = amqp_0_10_get_32bit_size_new(props, pinfo, tvb, hf_amqp_0_10_struct_file_properties_headers_size, offset);",
          "5572:         offset += 4;",
          "5573:         ti = proto_tree_add_item(props,",
          "5574:                                  hf_amqp_0_10_struct_file_properties_headers,",
          "5575:                                  tvb,",
          "5576:                                  offset,",
          "5577:                                  map_length, ENC_NA);",
          "5578:         if (map_length > (guint32)tvb_reported_length_remaining(tvb, offset))",
          "5579:         {",
          "5580:             next_tvb = tvb_new_subset_remaining(tvb, offset);",
          "5581:         }",
          "5582:         else",
          "5583:         {",
          "5584:             next_tvb = tvb_new_subset_length(tvb, offset, map_length);",
          "5585:         }",
          "5586:         dissect_amqp_0_10_map (next_tvb, ti);",
          "5587:         offset += map_length;",
          "5588:     }",
          "5589:     if (flag1 & 0x08) {",
          "5591:         proto_tree_add_item(props,",
          "5592:                             hf_amqp_0_10_struct_file_properties_priority,",
          "5593:                             tvb, offset, 1, ENC_BIG_ENDIAN);",
          "5594:         offset += 1;",
          "5595:     }",
          "5596:     if (flag1 & 0x10) {",
          "5598:         proto_tree_add_item(props,",
          "5599:                             hf_amqp_0_10_struct_file_properties_reply_to,",
          "5600:                             tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "5601:         offset += (1 + tvb_get_guint8(tvb, offset));",
          "5602:     }",
          "5603:     if (flag1 & 0x20) {",
          "5605:         proto_tree_add_item(props,",
          "5606:                             hf_amqp_0_10_struct_file_properties_message_id,",
          "5607:                             tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "5608:         offset += (1 + tvb_get_guint8(tvb, offset));",
          "5609:     }",
          "5610:     if (flag1 & 0x40) {",
          "5612:         proto_tree_add_item(props,",
          "5613:                             hf_amqp_0_10_struct_file_properties_filename,",
          "5614:                             tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "5615:         offset += (1 + tvb_get_guint8(tvb, offset));",
          "5616:     }",
          "5617:     if (flag1 & 0x80) {",
          "5619:         timestamp = tvb_get_ntoh64(tvb, offset);",
          "5620:         tv.secs = (time_t)timestamp;",
          "5621:         tv.nsecs = 0;",
          "5622:         proto_tree_add_time(props,",
          "5623:                             hf_amqp_0_10_struct_file_properties_timestamp,",
          "5624:                             tvb, offset, 8, &tv);",
          "5625:         offset += 8;",
          "5626:     }",
          "5627:     if (flag2 & 0x01) {",
          "5629:         proto_tree_add_item(props,",
          "5630:                             hf_amqp_0_10_struct_file_properties_cluster_id,",
          "5631:                             tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "5636: static void",
          "5637: dissect_amqp_0_10_struct_stream_properties(tvbuff_t *tvb,",
          "5638:                                            packet_info *pinfo,",
          "5639:                                            proto_tree *tree)",
          "5641:     proto_item *ti;",
          "5642:     proto_item *props;",
          "5643:     proto_item *flags_item;",
          "5644:     guint8      flag1, flag2;",
          "5645:     guint32     map_length;",
          "5646:     guint64     timestamp;",
          "5647:     int         offset = 0;",
          "5648:     nstime_t    tv;",
          "5649:     tvbuff_t   *next_tvb;",
          "5651:     props = proto_item_add_subtree(tree, ett_args);",
          "5653:     flag1 = tvb_get_guint8(tvb, offset);",
          "5654:     flag2 = tvb_get_guint8(tvb, offset+1);",
          "5655:     flags_item = proto_tree_add_item(props,",
          "5656:                                      hf_amqp_0_10_argument_packing_flags,",
          "5657:                                      tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5658:     if ((flag1 & ~0x1f) || (flag2 != 0))",
          "5659:         expert_add_info(pinfo, flags_item, &ei_amqp_bad_flag_value);",
          "5660:     offset += 2;",
          "5661:     if (flag1 & 0x01) {",
          "5663:         proto_tree_add_item(props,",
          "5664:                             hf_amqp_0_10_struct_stream_properties_content_type,",
          "5665:                             tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "5666:         offset += (1 + tvb_get_guint8(tvb, offset));",
          "5668:     if (flag1 & 0x02) {",
          "5670:         proto_tree_add_item(props,",
          "5671:                             hf_amqp_0_10_struct_stream_properties_content_encoding,",
          "5672:                             tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "5673:         offset += (1 + tvb_get_guint8(tvb, offset));",
          "5675:     if (flag1 & 0x04) {",
          "5677:         map_length = amqp_0_10_get_32bit_size_new(props, pinfo, tvb, hf_amqp_0_10_struct_stream_properties_headers_size, offset);",
          "5678:         offset += 4;",
          "5679:         ti = proto_tree_add_item(props,",
          "5680:                                  hf_amqp_0_10_struct_stream_properties_headers,",
          "5681:                                  tvb,",
          "5682:                                  offset,",
          "5683:                                  map_length, ENC_NA);",
          "5684:         if (map_length > (guint32)tvb_reported_length_remaining(tvb, offset))",
          "5685:         {",
          "5686:             next_tvb = tvb_new_subset_remaining(tvb, offset);",
          "5687:         }",
          "5688:         else",
          "5689:         {",
          "5690:             next_tvb = tvb_new_subset_length(tvb, offset, map_length);",
          "5692:         dissect_amqp_0_10_map (next_tvb, ti);",
          "5693:         offset += map_length;",
          "5695:     if (flag1 & 0x08) {",
          "5697:         proto_tree_add_item(props,",
          "5698:                             hf_amqp_0_10_struct_stream_properties_priority,",
          "5699:                             tvb, offset, 1, ENC_BIG_ENDIAN);",
          "5700:         offset += 1;",
          "5701:     }",
          "5702:     if (flag1 & 0x10) {",
          "5704:         timestamp = tvb_get_ntoh64(tvb, offset);",
          "5705:         tv.secs = (time_t)timestamp;",
          "5706:         tv.nsecs = 0;",
          "5707:         proto_tree_add_time(props,",
          "5708:                             hf_amqp_0_10_struct_stream_properties_timestamp,",
          "5709:                             tvb, offset, 8, &tv);",
          "5714: static void",
          "5715: dissect_amqp_0_10_struct32(tvbuff_t *tvb,",
          "5716:                            packet_info *pinfo,",
          "5717:                            proto_item *ti)",
          "5719:     guint32     class_code, struct_code;",
          "5720:     guint8      flag1;",
          "5721:     guint16     size;",
          "5722:     proto_item *ti2, *result;",
          "5723:     proto_tree *tree;",
          "5724:     int offset = 0;",
          "5726:     tree = proto_item_add_subtree(ti, ett_args);",
          "5728:     proto_tree_add_item_ret_uint(tree, hf_amqp_0_10_struct32_class, tvb, offset, 1, ENC_NA, &class_code);",
          "5729:     proto_tree_add_item_ret_uint(tree, hf_amqp_0_10_struct32_struct, tvb, offset+1, 1, ENC_NA, &struct_code);",
          "5731:     switch(class_code) {",
          "5732:     case AMQP_0_10_CLASS_MESSAGE:",
          "5733:         switch (struct_code) {",
          "5734:         case AMQP_0_10_STRUCT_MESSAGE_DELIVERY_PROPERTIES:",
          "5735:             dissect_amqp_0_10_struct_delivery_properties(tvb,",
          "5736:                                                          pinfo,",
          "5737:                                                          tree);",
          "5739:         case AMQP_0_10_STRUCT_MESSAGE_FRAGMENT_PROPERTIES:",
          "5740:             dissect_amqp_0_10_struct_fragment_properties(tvb,",
          "5741:                                                          pinfo,",
          "5742:                                                          tree);",
          "5744:         case AMQP_0_10_STRUCT_MESSAGE_MESSAGE_PROPERTIES:",
          "5745:             dissect_amqp_0_10_struct_message_properties(tvb,",
          "5746:                                                         pinfo,",
          "5747:                                                         tree);",
          "5749:         case AMQP_0_10_STRUCT_MESSAGE_ACQUIRED:",
          "5750:             result = proto_item_add_subtree(tree, ett_args);",
          "5752:             flag1 = tvb_get_guint8(tvb, offset);",
          "5753:             proto_tree_add_item(result, hf_amqp_0_10_argument_packing_flags,",
          "5754:                                 tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5755:             offset += 2;",
          "5756:             if (flag1 & 0x01) {",
          "5758:                 size = tvb_get_ntohs(tvb, offset);",
          "5759:                 ti2 = proto_tree_add_item(result,",
          "5760:                                          hf_amqp_0_10_struct_acquired_transfers,",
          "5761:                                          tvb, offset, size + 2, ENC_NA);",
          "5762:                 format_amqp_0_10_sequence_set(tvb, offset + 2, size, ti2);",
          "5763:             }",
          "5765:         case AMQP_0_10_STRUCT_MESSAGE_RESUME_RESULT:",
          "5766:             result = proto_item_add_subtree(tree, ett_args);",
          "5768:             flag1 = tvb_get_guint8(tvb, offset);",
          "5769:             proto_tree_add_item(result, hf_amqp_0_10_argument_packing_flags,",
          "5770:                                 tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5771:             offset += 2;",
          "5772:             if (flag1 & 0x01) {",
          "5774:                 proto_tree_add_item(result,",
          "5775:                                     hf_amqp_0_10_struct_resume_result_offset,",
          "5776:                                     tvb, offset, 8, ENC_BIG_ENDIAN);",
          "5777:             }",
          "5779:         }",
          "5780:         break;",
          "5782:     case AMQP_0_10_CLASS_DTX:",
          "5783:         switch (struct_code) {",
          "5784:         case AMQP_0_10_STRUCT_DTX_XA_RESULT:",
          "5787:             proto_tree_add_item(tree, hf_amqp_0_10_struct32_padding, tvb, offset, 2, ENC_NA);",
          "5788:             offset += 2;",
          "5789:             proto_tree_add_item(tree, hf_amqp_0_10_dtx_xa_status, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5792:         case AMQP_0_10_STRUCT_DTX_RECOVER_RESULT:",
          "5794:             proto_tree_add_item(tree, hf_amqp_0_10_struct32_padding, tvb, offset, 2, ENC_NA);",
          "5795:             offset += 2;",
          "5796:             amqp_0_10_get_32bit_size_new(tree, pinfo, tvb, hf_amqp_0_10_struct_dtx_recover_result_size, offset);",
          "5797:             offset += 4;",
          "5798:             dissect_amqp_0_10_array(tvb,",
          "5799:                                     pinfo,",
          "5800:                                     offset,",
          "5801:                                     tree);",
          "5806:     case AMQP_0_10_CLASS_EXCHANGE:",
          "5807:         switch (struct_code) {",
          "5808:         case AMQP_0_10_STRUCT_EXCHANGE_QUERY_RESULT:",
          "5809:             dissect_amqp_0_10_struct_exchange_query_result(tvb,",
          "5810:                                                            pinfo,",
          "5811:                                                            tree);",
          "5812:             break;",
          "5814:         case AMQP_0_10_STRUCT_EXCHANGE_BOUND_RESULT:",
          "5815:             result = proto_item_add_subtree(tree, ett_args);",
          "5817:             proto_tree_add_item(result,",
          "5818:                                 hf_amqp_0_10_struct_exchange_bound_result_exchange_not_found,",
          "5819:                                 tvb, offset, 1, ENC_BIG_ENDIAN);",
          "5820:             proto_tree_add_item(result,",
          "5821:                                 hf_amqp_0_10_struct_exchange_bound_result_queue_not_found,",
          "5822:                                 tvb, offset, 1, ENC_BIG_ENDIAN);",
          "5823:             proto_tree_add_item(result,",
          "5824:                                 hf_amqp_0_10_struct_exchange_bound_result_queue_not_matched,",
          "5825:                                 tvb, offset, 1, ENC_BIG_ENDIAN);",
          "5826:             proto_tree_add_item(result,",
          "5827:                                 hf_amqp_0_10_struct_exchange_bound_result_key_not_matched,",
          "5828:                                 tvb, offset, 1, ENC_BIG_ENDIAN);",
          "5829:             proto_tree_add_item(result,",
          "5830:                                 hf_amqp_0_10_struct_exchange_bound_result_args_not_matched,",
          "5831:                                 tvb, offset, 1, ENC_BIG_ENDIAN);",
          "5832:             break;",
          "5833:         }",
          "5836:     case AMQP_0_10_CLASS_QUEUE:",
          "5837:         switch (struct_code) {",
          "5838:         case AMQP_0_10_STRUCT_QUEUE_QUERY_RESULT:",
          "5839:             dissect_amqp_0_10_struct_queue_query_result(tvb, pinfo, tree);",
          "5840:             break;",
          "5841:         }",
          "5844:     case AMQP_0_10_CLASS_FILE:",
          "5845:         switch (struct_code) {",
          "5846:         case AMQP_0_10_STRUCT_FILE_PROPERTIES:",
          "5847:             dissect_amqp_0_10_struct_file_properties(tvb, pinfo, tree);",
          "5848:             break;",
          "5849:         }",
          "5850:         break;",
          "5852:     case AMQP_0_10_CLASS_STREAM:",
          "5853:         switch (struct_code) {",
          "5854:         case AMQP_0_10_STRUCT_STREAM_PROPERTIES:",
          "5855:             dissect_amqp_0_10_struct_stream_properties(tvb, pinfo, tree);",
          "5856:             break;",
          "5857:         }",
          "5858:         break;",
          "5859:     }",
          "5874: static guint",
          "5875: dissect_amqp_1_0_list(tvbuff_t *tvb,",
          "5876:                       packet_info *pinfo,",
          "5877:                       int offset,",
          "5878:                       proto_item *item,",
          "5879:                       int hf_amqp_type,",
          "5880:                       guint32 hf_amqp_subtype_count,",
          "5881:                       const int **hf_amqp_subtypes,",
          "5882:                       const char *name)",
          "5884:     proto_item *list_tree;",
          "5885:     guint8      type;",
          "5886:     guint8      count_len;",
          "5887:     guint32     i, element_count;",
          "5888:     guint32     element_size;",
          "5889:     guint32     decoded_element_size;",
          "5890:     guint32     orig_offset;",
          "5891:     guint32     decoded_elements;",
          "5892:     int         hf_amqp_item;",
          "5894:     list_tree = 0;",
          "5895:     decoded_elements = 0;",
          "5896:     orig_offset = offset;",
          "5898:     type = tvb_get_guint8(tvb, offset);",
          "5899:     offset += 1;",
          "5900:     switch (type) {",
          "5901:     case AMQP_1_0_TYPE_LIST0:",
          "5902:         count_len = 0;",
          "5903:         element_size = 0;",
          "5904:         element_count = 0;",
          "5905:         break;",
          "5906:     case AMQP_1_0_TYPE_LIST8:",
          "5907:         count_len = 1;",
          "5908:         element_size = tvb_get_guint8(tvb, offset);",
          "5909:         element_count = tvb_get_guint8(tvb, offset+count_len);",
          "5910:         break;",
          "5911:     case AMQP_1_0_TYPE_LIST32:",
          "5912:         count_len = 4;",
          "5913:         element_size = tvb_get_ntohl(tvb, offset);",
          "5914:         element_count = tvb_get_ntohl(tvb, offset+count_len);",
          "5915:         break;",
          "5916:     default:",
          "5917:         proto_tree_add_none_format(list_tree, hf_amqp_1_0_list, tvb,",
          "5918:                                    offset-1,",
          "5919:                                    1,",
          "5920:                                    \"(unknown type %d)\",",
          "5921:                                    type);",
          "5922:         expert_add_info_format(pinfo,",
          "5923:                                list_tree,",
          "5924:                                &ei_amqp_unknown_amqp_type,",
          "5925:                                \"Unknown AMQP list type %d\",",
          "5926:                                type);",
          "5927:         return 0;",
          "5930:     list_tree = proto_tree_add_none_format(item,",
          "5931:                                            hf_amqp_type,",
          "5932:                                            tvb,",
          "5933:                                            offset-1,",
          "5934:                                            element_size+1+count_len,",
          "5935:                                            \"%s\",",
          "5936:                                            name ? name : proto_registrar_get_name(hf_amqp_type));",
          "5937:     offset += (count_len*2);",
          "5939:     if (element_count > 0)",
          "5940:         list_tree = proto_item_add_subtree(list_tree, ett_amqp_1_0_list);",
          "5943:     if (hf_amqp_subtype_count == 0)",
          "5944:         proto_item_append_text(list_tree, \" (list of %d element%s)\", element_count, plurality(element_count, \"\", \"s\"));",
          "5946:     if (element_count > element_size)",
          "5947:     {",
          "5948:         expert_add_info_format(pinfo,",
          "5949:                                list_tree,",
          "5950:                                &ei_amqp_invalid_number_of_params,",
          "5951:                                \"Number of list elements (%d) bigger than list size (%d)\",",
          "5952:                                element_count, element_size);",
          "5953:         return 0;",
          "5954:     }",
          "5956:     for (i = 0; ((i < element_count) && (tvb_reported_length_remaining(tvb, offset) > 0)); i++) {",
          "5957:         decoded_element_size = 0;",
          "5958:         if (decoded_elements<hf_amqp_subtype_count)",
          "5959:             hf_amqp_item = *(hf_amqp_subtypes[decoded_elements]);",
          "5960:         else",
          "5962:         get_amqp_1_0_type_value_formatter(tvb,",
          "5963:                                           pinfo,",
          "5964:                                           offset,",
          "5965:                                           hf_amqp_item,",
          "5966:                                           NULL,",
          "5967:                                           &decoded_element_size,",
          "5968:                                           list_tree);",
          "5969:         decoded_elements += 1;",
          "5970:         offset += decoded_element_size;",
          "5971:     }",
          "5972:     if (i != element_count)",
          "5973:         expert_add_info_format(pinfo,",
          "5974:                                list_tree,",
          "5975:                                &ei_amqp_invalid_number_of_params,",
          "5976:                                \"Number of list elements (%d) not matching number of decoded elements (%d)\",",
          "5977:                                element_count+decoded_elements, decoded_elements);",
          "5978:     return offset-orig_offset;",
          "5979: }",
          "5984: static guint",
          "5985: dissect_amqp_1_0_map(tvbuff_t *tvb,",
          "5986:                      packet_info *pinfo,",
          "5987:                      int offset,",
          "5988:                      proto_item *item,",
          "5989:                      int hf_amqp_type,",
          "5990:                      const char *name)",
          "5991: {",
          "5992:     proto_item *map_tree;",
          "5993:     guint8      type;",
          "5994:     guint8      count_len;",
          "5995:     guint32     element_count;",
          "5996:     guint32     element_size;",
          "5997:     struct amqp1_typeinfo* element_type;",
          "5998:     guint32     decoded_element_size;",
          "5999:     guint32     orig_offset;",
          "6000:     const char *value = NULL;",
          "6002:     map_tree = 0;",
          "6003:     orig_offset = offset;",
          "6005:     type = tvb_get_guint8(tvb, offset);",
          "6006:     offset += 1;",
          "6007:     switch (type) {",
          "6008:     case AMQP_1_0_TYPE_MAP8:",
          "6009:         count_len = 1;",
          "6010:         element_size = tvb_get_guint8(tvb, offset);",
          "6011:         element_count = tvb_get_guint8(tvb, offset+count_len);",
          "6012:         break;",
          "6013:     case AMQP_1_0_TYPE_MAP32:",
          "6014:         count_len = 4;",
          "6015:         element_size = tvb_get_ntohl(tvb, offset);",
          "6016:         element_count = tvb_get_ntohl(tvb, offset+count_len);",
          "6017:         break;",
          "6018:     default:",
          "6019:         proto_tree_add_none_format(map_tree, hf_amqp_1_0_map, tvb,",
          "6020:                                    offset-1,",
          "6021:                                    1,",
          "6022:                                    \"(unknown type %d)\",",
          "6023:                                    type);",
          "6024:         expert_add_info_format(pinfo,",
          "6025:                                map_tree,",
          "6026:                                &ei_amqp_unknown_amqp_type,",
          "6027:                                \"Unknown AMQP map type %d\",",
          "6028:                                type);",
          "6029:         return tvb_reported_length_remaining(tvb, orig_offset);",
          "6030:     }",
          "6032:     map_tree = proto_tree_add_none_format(item,",
          "6033:                                           hf_amqp_type,",
          "6034:                                           tvb,",
          "6035:                                           offset-1,",
          "6036:                                           element_size+1+count_len,",
          "6037:                                           \"%s\",",
          "6038:                                           name ? name : proto_registrar_get_name(hf_amqp_type));",
          "6039:     offset += (count_len*2);",
          "6041:     if (element_count > 0)",
          "6042:         map_tree = proto_item_add_subtree(map_tree, ett_amqp_1_0_map);",
          "6043:     if (element_count%2==1) {",
          "6044:         expert_add_info_format(pinfo,",
          "6045:                                map_tree,",
          "6046:                                &ei_amqp_invalid_number_of_params,",
          "6047:                                \"Odd number of map items: %d\",",
          "6048:                                element_count);",
          "6049:         return tvb_reported_length_remaining(tvb, orig_offset);",
          "6050:     }",
          "6052:     if (element_count > element_size)",
          "6053:     {",
          "6054:         expert_add_info_format(pinfo,",
          "6055:                                map_tree,",
          "6056:                                &ei_amqp_invalid_number_of_params,",
          "6057:                                \"Number of map elements (%d) bigger than map size (%d)\",",
          "6058:                                element_count, element_size);",
          "6059:         return tvb_reported_length_remaining(tvb, orig_offset);",
          "6060:     }",
          "6062:     proto_item_append_text(map_tree,",
          "6063:                            \" (map of %d element%s)\",",
          "6064:                            (element_count/2),",
          "6065:                            plurality(element_count/2, \"\", \"s\"));",
          "6067:     while ((element_count > 0) && (tvb_reported_length_remaining(tvb, offset) > 0)) {",
          "6069:             element_type = decode_fixed_type(tvb_get_guint8(tvb, offset));",
          "6070:             if (element_type)",
          "6071:             {",
          "6072:                 decoded_element_size=element_type->formatter(tvb, offset+1, element_type->known_size, &value);",
          "6073:                 offset += (decoded_element_size+1);",
          "6075:             else",
          "6077:                 proto_tree_add_none_format(map_tree, hf_amqp_1_0_map, tvb,",
          "6078:                                            offset,",
          "6079:                                            1,",
          "6080:                                            \"(unknown map key type %d)\",",
          "6081:                                            tvb_get_guint8(tvb, offset));",
          "6082:                 expert_add_info_format(pinfo,",
          "6083:                                        map_tree,",
          "6084:                                        &ei_amqp_unknown_amqp_type,",
          "6085:                                        \"Unknown AMQP map key type %d\",",
          "6086:                                        tvb_get_guint8(tvb, offset));",
          "6087:                 offset += 1;",
          "6088:             }",
          "6089:         }",
          "6091:             get_amqp_1_0_type_value_formatter(tvb,",
          "6092:                                               pinfo,",
          "6093:                                               offset,",
          "6095:                                               value,",
          "6096:                                               &decoded_element_size,",
          "6097:                                               map_tree);",
          "6098:             offset += decoded_element_size;",
          "6099:         }",
          "6100:         element_count--;",
          "6101:     }",
          "6102:     return offset-orig_offset;",
          "6103: }",
          "6108: static guint",
          "6109: dissect_amqp_1_0_array(tvbuff_t *tvb,",
          "6110:                        packet_info *pinfo,",
          "6111:                        int offset,",
          "6112:                        proto_item *item,",
          "6113:                        int hf_amqp_type,",
          "6114:                        guint32 hf_amqp_subtype_count,",
          "6115:                        const int **hf_amqp_subtypes,",
          "6116:                        const char *name)",
          "6117: {",
          "6118:     proto_item *array_tree;",
          "6119:     guint8      type;",
          "6120:     guint8      count_len;",
          "6121:     guint32     i, element_count;",
          "6122:     guint32     element_size;",
          "6123:     guint32     element_type;",
          "6124:     guint32     decoded_element_size;",
          "6125:     guint32     orig_offset;",
          "6126:     guint32     decoded_elements;",
          "6127:     int         hf_amqp_item;",
          "6128:     guint32     hf_amqp_subtype_count_array = 0;",
          "6129:     const int   **hf_amqp_subtypes_array = NULL;",
          "6130:     const char  *type_name_array = NULL;",
          "6132:     array_tree = 0;",
          "6133:     decoded_elements = 0;",
          "6134:     orig_offset = offset;",
          "6136:     type = tvb_get_guint8(tvb, offset);",
          "6137:     offset += 1;",
          "6138:     switch (type) {",
          "6139:     case AMQP_1_0_TYPE_ARRAY8:",
          "6140:         count_len = 1;",
          "6141:         element_size = tvb_get_guint8(tvb, offset);",
          "6142:         element_count = tvb_get_guint8(tvb, offset+count_len);",
          "6143:         break;",
          "6144:     case AMQP_1_0_TYPE_ARRAY32:",
          "6145:         count_len = 4;",
          "6146:         element_size = tvb_get_ntohl(tvb, offset);",
          "6147:         element_count = tvb_get_ntohl(tvb, offset+count_len);",
          "6148:         break;",
          "6149:     default:",
          "6150:         proto_tree_add_none_format(array_tree, hf_amqp_1_0_list, tvb,",
          "6151:                                    offset-1,",
          "6152:                                    1,",
          "6153:                                    \"(unknown type %d)\",",
          "6154:                                    type);",
          "6155:         expert_add_info_format(pinfo,",
          "6156:                                array_tree,",
          "6157:                                &ei_amqp_unknown_amqp_type,",
          "6158:                                \"Unknown AMQP array type %d\",",
          "6159:                                type);",
          "6160:         return tvb_reported_length_remaining(tvb, orig_offset);",
          "6161:     }",
          "6163:     element_type = get_amqp_1_0_type_formatter(tvb,",
          "6164:                                                offset+count_len*2,",
          "6165:                                                &hf_amqp_type,",
          "6166:                                                &type_name_array,",
          "6167:                                                &hf_amqp_subtype_count_array,",
          "6168:                                                &hf_amqp_subtypes_array,",
          "6169:                                                &decoded_element_size);",
          "6171:     array_tree = proto_tree_add_none_format(item,",
          "6172:                                             hf_amqp_type,",
          "6173:                                             tvb,",
          "6174:                                             offset-1,",
          "6175:                                             element_size+1+count_len,",
          "6176:                                             \"%s\",",
          "6177:                                             name ? name : proto_registrar_get_name(hf_amqp_type));",
          "6178:     offset += (count_len*2+decoded_element_size);",
          "6180:     if (element_count > 0)",
          "6181:         array_tree = proto_item_add_subtree(array_tree, ett_amqp_1_0_array);",
          "6184:     if (hf_amqp_subtype_count == 0)",
          "6185:         proto_item_append_text(array_tree, \" (array of %d element%s)\", element_count, plurality(element_count, \"\", \"s\"));",
          "6187:     if (element_count > element_size)",
          "6188:     {",
          "6189:         expert_add_info_format(pinfo,",
          "6190:                                array_tree,",
          "6191:                                &ei_amqp_invalid_number_of_params,",
          "6192:                                \"Number of array elements (%d) bigger than array size (%d)\",",
          "6193:                                element_count, element_size);",
          "6194:         return tvb_reported_length_remaining(tvb, orig_offset);",
          "6195:     }",
          "6197:     for (i = 0; ((i < element_count) && (tvb_reported_length_remaining(tvb, offset) > 0)); i++) {",
          "6198:         decoded_element_size = 0;",
          "6199:         if (decoded_elements<hf_amqp_subtype_count)",
          "6200:             hf_amqp_item = *(hf_amqp_subtypes[decoded_elements]);",
          "6201:         else",
          "6203:         get_amqp_1_0_value_formatter(tvb,",
          "6204:                                      pinfo,",
          "6206:                                      offset,",
          "6207:                                      hf_amqp_item,",
          "6211:                                      &decoded_element_size,",
          "6212:                                      array_tree);",
          "6213:         decoded_elements += 1;",
          "6214:         if (decoded_element_size==0)",
          "6216:         offset += decoded_element_size;",
          "6217:     }",
          "6218:     if (i != element_count)",
          "6219:         expert_add_info_format(pinfo,",
          "6220:                                array_tree,",
          "6221:                                &ei_amqp_invalid_number_of_params,",
          "6222:                                \"Number of array elements (%d) not matching number of decoded elements (%d)\",",
          "6223:                                element_count+decoded_elements, decoded_elements);",
          "6224:     return offset-orig_offset;",
          "6225: }",
          "6232: static void",
          "6233: dissect_amqp_1_0_AMQP_frame(tvbuff_t *tvb,",
          "6234:                             proto_item *amqp_item,",
          "6235:                             packet_info *pinfo)",
          "6236: {",
          "6237:     proto_item  *args_tree;",
          "6238:     guint32     arg_length = 0;",
          "6239:     guint32     method;",
          "6240:     gint        offset = 0;",
          "6241:     proto_item* ti;",
          "6243:     args_tree = proto_item_add_subtree(amqp_item, ett_args);",
          "6246:         col_append_fstr(pinfo->cinfo, COL_INFO, \"(empty)\");",
          "6247:         col_set_fence(pinfo->cinfo, COL_INFO);",
          "6248:         return;",
          "6249:     }",
          "6251:     ti = proto_tree_add_item_ret_uint(args_tree, hf_amqp_1_0_amqp_performative, tvb, offset+2, 1, ENC_BIG_ENDIAN, &method);",
          "6252:     col_append_fstr(pinfo->cinfo, COL_INFO, \"%s \", val_to_str_const(method, amqp_1_0_AMQP_performatives, \"<invalid AMQP performative>\"));",
          "6253:     col_set_fence(pinfo->cinfo, COL_INFO);",
          "6256:     switch(method) {",
          "6257:         case AMQP_1_0_AMQP_OPEN:",
          "6258:             dissect_amqp_1_0_list(tvb,",
          "6259:                                     pinfo,",
          "6260:                                     offset,",
          "6261:                                     args_tree,",
          "6262:                                     hf_amqp_method_arguments,",
          "6263:                                     10, amqp_1_0_amqp_open_items, NULL);",
          "6264:             break;",
          "6265:         case AMQP_1_0_AMQP_BEGIN:",
          "6266:             dissect_amqp_1_0_list(tvb,",
          "6267:                                     pinfo,",
          "6268:                                     offset,",
          "6269:                                     args_tree,",
          "6270:                                     hf_amqp_method_arguments,",
          "6271:                                     8, amqp_1_0_amqp_begin_items, NULL);",
          "6272:             break;",
          "6273:         case AMQP_1_0_AMQP_ATTACH:",
          "6274:             dissect_amqp_1_0_list(tvb,",
          "6275:                                     pinfo,",
          "6276:                                     offset,",
          "6277:                                     args_tree,",
          "6278:                                     hf_amqp_method_arguments,",
          "6279:                                     14, amqp_1_0_amqp_attach_items, NULL);",
          "6280:             break;",
          "6281:         case AMQP_1_0_AMQP_FLOW:",
          "6282:             dissect_amqp_1_0_list(tvb,",
          "6283:                                     pinfo,",
          "6284:                                     offset,",
          "6285:                                     args_tree,",
          "6286:                                     hf_amqp_method_arguments,",
          "6287:                                     11, amqp_1_0_amqp_flow_items, NULL);",
          "6288:             break;",
          "6289:         case AMQP_1_0_AMQP_TRANSFER:",
          "6290:             arg_length = dissect_amqp_1_0_list(tvb,",
          "6291:                                                pinfo,",
          "6292:                                                offset,",
          "6293:                                                args_tree,",
          "6294:                                                hf_amqp_method_arguments,",
          "6295:                                                11, amqp_1_0_amqp_transfer_items, NULL);",
          "6298:             while ((arg_length > 0) && (tvb_reported_length_remaining(tvb, offset + arg_length) > 0)) {",
          "6299:                 offset += arg_length;",
          "6300:                 get_amqp_1_0_type_value_formatter(tvb,",
          "6301:                                                     pinfo,",
          "6302:                                                     offset,",
          "6304:                                                     NULL,",
          "6305:                                                     &arg_length,",
          "6306:                                                     args_tree);",
          "6309:         case AMQP_1_0_AMQP_DISPOSITION:",
          "6310:             dissect_amqp_1_0_list(tvb,",
          "6311:                                     pinfo,",
          "6312:                                     offset,",
          "6313:                                     args_tree,",
          "6314:                                     hf_amqp_method_arguments,",
          "6315:                                     6, amqp_1_0_amqp_disposition_items, NULL);",
          "6316:             break;",
          "6317:         case AMQP_1_0_AMQP_DETACH:",
          "6318:             dissect_amqp_1_0_list(tvb,",
          "6319:                                     pinfo,",
          "6320:                                     offset,",
          "6321:                                     args_tree,",
          "6322:                                     hf_amqp_method_arguments,",
          "6323:                                     3, amqp_1_0_amqp_detach_items, NULL);",
          "6324:             break;",
          "6325:         case AMQP_1_0_AMQP_END:",
          "6326:             dissect_amqp_1_0_list(tvb,",
          "6327:                                     pinfo,",
          "6328:                                     offset,",
          "6329:                                     args_tree,",
          "6330:                                     hf_amqp_method_arguments,",
          "6331:                                     1, amqp_1_0_amqp_end_items, NULL);",
          "6332:             break;",
          "6333:         case AMQP_1_0_AMQP_CLOSE:",
          "6334:             dissect_amqp_1_0_list(tvb,",
          "6335:                                     pinfo,",
          "6336:                                     offset,",
          "6337:                                     args_tree,",
          "6338:                                     hf_amqp_method_arguments,",
          "6339:                                     1, amqp_1_0_amqp_close_items, NULL);",
          "6340:             break;",
          "6341:         default:",
          "6342:             expert_add_info_format(pinfo,",
          "6343:                                    ti,",
          "6344:                                    &ei_amqp_unknown_amqp_command,",
          "6345:                                    \"Unknown AMQP performative %d\",",
          "6346:                                    method);",
          "6347:     }",
          "6348: }",
          "6353: static void",
          "6354: dissect_amqp_1_0_SASL_frame(tvbuff_t *tvb,",
          "6355:                             proto_item *amqp_item,",
          "6356:                             packet_info *pinfo)",
          "6357: {",
          "6358:     proto_item  *args_tree;",
          "6359:     guint32     method;",
          "6360:     gint        offset = 0;",
          "6361:     proto_item *ti;",
          "6363:     args_tree = proto_item_add_subtree(amqp_item, ett_args);",
          "6364:     ti = proto_tree_add_item_ret_uint(args_tree, hf_amqp_1_0_sasl_method, tvb, offset+2, 1, ENC_BIG_ENDIAN, &method);",
          "6366:     col_append_fstr(pinfo->cinfo, COL_INFO, \"%s \", val_to_str_const(method, amqp_1_0_SASL_methods, \"<invalid SASL method>\"));",
          "6367:     col_set_fence(pinfo->cinfo, COL_INFO);",
          "6370:     switch(method) {",
          "6371:         case AMQP_1_0_SASL_MECHANISMS:",
          "6372:             dissect_amqp_1_0_list(tvb,",
          "6373:                                     pinfo,",
          "6374:                                     offset,",
          "6375:                                     args_tree,",
          "6376:                                     hf_amqp_method_arguments,",
          "6377:                                     1, amqp_1_0_sasl_mechanisms_items, NULL);",
          "6379:         case AMQP_1_0_SASL_INIT:",
          "6380:             dissect_amqp_1_0_list(tvb,",
          "6381:                                     pinfo,",
          "6382:                                     offset,",
          "6383:                                     args_tree,",
          "6384:                                     hf_amqp_method_arguments,",
          "6385:                                     3, amqp_1_0_sasl_init_items, NULL);",
          "6386:             break;",
          "6387:          case AMQP_1_0_SASL_CHALLENGE:",
          "6388:             dissect_amqp_1_0_list(tvb,",
          "6389:                                     pinfo,",
          "6390:                                     offset,",
          "6391:                                     args_tree,",
          "6392:                                     hf_amqp_method_arguments,",
          "6393:                                     1, amqp_1_0_sasl_challenge_items, NULL);",
          "6394:             break;",
          "6395:         case AMQP_1_0_SASL_RESPONSE:",
          "6396:             dissect_amqp_1_0_list(tvb,",
          "6397:                                     pinfo,",
          "6398:                                     offset,",
          "6399:                                     args_tree,",
          "6400:                                     hf_amqp_method_arguments,",
          "6401:                                     1, amqp_1_0_sasl_response_items, NULL);",
          "6402:             break;",
          "6403:         case AMQP_1_0_SASL_OUTCOME:",
          "6404:             dissect_amqp_1_0_list(tvb,",
          "6405:                                     pinfo,",
          "6406:                                     offset,",
          "6407:                                     args_tree,",
          "6408:                                     hf_amqp_method_arguments,",
          "6409:                                     2, amqp_1_0_sasl_outcome_items, NULL);",
          "6410:             break;",
          "6411:         default:",
          "6412:             expert_add_info_format(pinfo,",
          "6413:                                    ti,",
          "6414:                                    &ei_amqp_unknown_sasl_command,",
          "6415:                                    \"Unknown SASL command %d\",",
          "6416:                                    method);",
          "6417:     }",
          "6418: }",
          "6420: static int",
          "6421: dissect_amqp_1_0_frame(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data _U_)",
          "6422: {",
          "6423:     proto_item  *ti, *size_item;",
          "6424:     proto_tree  *amqp_tree;",
          "6425:     guint8      frame_type;",
          "6426:     guint32     length;",
          "6427:     guint       offset;",
          "6428:     tvbuff_t    *next_tvb;",
          "6430:     col_clear(pinfo->cinfo, COL_INFO);",
          "6433:     if (tvb_memeql(tvb, 0, \"AMQP\", 4) == 0) {",
          "6434:         guint8         proto_major;",
          "6435:         guint8         proto_minor;",
          "6436:         guint8         proto_revision;",
          "6438:         proto_major    = tvb_get_guint8(tvb, 5);",
          "6439:         proto_minor    = tvb_get_guint8(tvb, 6);",
          "6440:         proto_revision = tvb_get_guint8(tvb, 7);",
          "6441:         col_append_fstr(pinfo->cinfo, COL_INFO, \"Protocol-Header%s %d-%d-%d \",",
          "6443:                                   proto_major,",
          "6444:                                   proto_minor,",
          "6445:                                   proto_revision);",
          "6446:         col_set_fence(pinfo->cinfo, COL_INFO);",
          "6448:         if (tree) {",
          "6449:             ti = proto_tree_add_item(tree, proto_amqp, tvb, 0, -1, ENC_NA);",
          "6450:             amqp_tree = proto_item_add_subtree(ti, ett_amqp_init);",
          "6451:             proto_tree_add_item(amqp_tree, hf_amqp_init_protocol,         tvb, 0, 4, ENC_ASCII|ENC_NA);",
          "6452:             proto_tree_add_item(amqp_tree, hf_amqp_init_id,               tvb, 4, 1, ENC_BIG_ENDIAN);",
          "6453:             proto_tree_add_item(amqp_tree, hf_amqp_init_version_major,    tvb, 5, 1, ENC_BIG_ENDIAN);",
          "6454:             proto_tree_add_item(amqp_tree, hf_amqp_init_version_minor,    tvb, 6, 1, ENC_BIG_ENDIAN);",
          "6455:             proto_tree_add_item(amqp_tree, hf_amqp_init_version_revision, tvb, 7, 1, ENC_BIG_ENDIAN);",
          "6456:         }",
          "6457:         return 8;",
          "6458:     }",
          "6463:     ti = proto_tree_add_item(tree, proto_amqp, tvb, 0, -1, ENC_NA);",
          "6464:     amqp_tree = proto_item_add_subtree(ti, ett_amqp);",
          "6465:     size_item = proto_tree_add_item_ret_uint(amqp_tree, hf_amqp_1_0_size, tvb, 0, 4, ENC_BIG_ENDIAN, &length);",
          "6466:     proto_tree_add_item(amqp_tree, hf_amqp_1_0_doff, tvb, 4, 1, ENC_BIG_ENDIAN);",
          "6467:     proto_tree_add_item(amqp_tree, hf_amqp_1_0_type, tvb, 5, 1, ENC_BIG_ENDIAN);",
          "6468:     proto_tree_add_item(amqp_tree, hf_amqp_channel,  tvb, 6, 2, ENC_BIG_ENDIAN);",
          "6472:     if (length > 0xFFFF)",
          "6473:     {",
          "6474:         length = 0xFFFF;",
          "6475:         expert_add_info(pinfo, size_item, &ei_amqp_amqp_1_0_frame_length_exceeds_65K);",
          "6476:     }",
          "6479:     frame_type = tvb_get_guint8(tvb, 5);",
          "6480:     if (length < offset) {",
          "6481:         expert_add_info(pinfo, size_item, &ei_amqp_bad_length);",
          "6482:         return 8;",
          "6483:     }",
          "6485:     if (length > (guint32)tvb_reported_length_remaining(tvb, offset))",
          "6486:     {",
          "6487:         next_tvb = tvb_new_subset_remaining(tvb, offset);",
          "6488:     }",
          "6489:     else",
          "6490:     {",
          "6491:         next_tvb = tvb_new_subset_length(tvb, offset, length);",
          "6492:     }",
          "6494:     switch(frame_type) {",
          "6495:     case AMQP_1_0_AMQP_FRAME:",
          "6496:         dissect_amqp_1_0_AMQP_frame(next_tvb, amqp_tree, pinfo);",
          "6497:         break;",
          "6498:     case AMQP_1_0_SASL_FRAME:",
          "6499:         dissect_amqp_1_0_SASL_frame(next_tvb, amqp_tree, pinfo);",
          "6500:         break;",
          "6501:     case AMQP_1_0_TLS_FRAME:",
          "6503:         break;",
          "6504:     default:",
          "6505:         expert_add_info_format(pinfo, amqp_tree, &ei_amqp_unknown_frame_type, \"Unknown frame type %d\", frame_type);",
          "6506:     }",
          "6508:     return tvb_reported_length(tvb);",
          "6509: }",
          "6511: static int",
          "6512: dissect_amqp_0_10_frame(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data _U_)",
          "6513: {",
          "6514:     proto_item *ti;",
          "6515:     proto_item *amqp_tree = NULL;",
          "6516:     guint8      frame_type;",
          "6517:     guint16     length;",
          "6518:     guint32     struct_length;",
          "6519:     guint       offset;",
          "6520:     tvbuff_t   *next_tvb;",
          "6523:     if (tvb_memeql(tvb, 0, \"AMQP\", 4) == 0) {",
          "6524:         guint8         proto_major;",
          "6525:         guint8         proto_minor;",
          "6527:         proto_major = tvb_get_guint8(tvb, 6);",
          "6528:         proto_minor = tvb_get_guint8(tvb, 7);",
          "6529:         col_append_fstr(pinfo->cinfo, COL_INFO, \"Protocol-Header %d-%d \",",
          "6530:                                   proto_major,",
          "6531:                                   proto_minor);",
          "6532:         col_set_fence(pinfo->cinfo, COL_INFO);",
          "6534:         if (tree) {",
          "6535:             ti = proto_tree_add_item(tree, proto_amqp, tvb, 0, -1, ENC_NA);",
          "6536:             amqp_tree = proto_item_add_subtree(ti, ett_amqp_init);",
          "6537:             proto_tree_add_item(amqp_tree, hf_amqp_init_protocol,      tvb, 0, 4, ENC_ASCII|ENC_NA);",
          "6538:             proto_tree_add_item(amqp_tree, hf_amqp_init_id_major,      tvb, 4, 1, ENC_BIG_ENDIAN);",
          "6539:             proto_tree_add_item(amqp_tree, hf_amqp_init_id_minor,      tvb, 5, 1, ENC_BIG_ENDIAN);",
          "6540:             proto_tree_add_item(amqp_tree, hf_amqp_init_version_major, tvb, 6, 1, ENC_BIG_ENDIAN);",
          "6541:             proto_tree_add_item(amqp_tree, hf_amqp_init_version_minor, tvb, 7, 1, ENC_BIG_ENDIAN);",
          "6542:         }",
          "6543:         return 8;",
          "6544:     }",
          "6547:     if (tree) {",
          "6548:         ti = proto_tree_add_item(tree, proto_amqp, tvb, 0, -1, ENC_NA);",
          "6549:         amqp_tree = proto_item_add_subtree(ti, ett_amqp);",
          "6550:         proto_tree_add_item(amqp_tree, hf_amqp_0_10_format,   tvb, 0, 1, ENC_BIG_ENDIAN);",
          "6551:         proto_tree_add_item(amqp_tree, hf_amqp_0_10_position, tvb, 0, 1, ENC_BIG_ENDIAN);",
          "6552:         proto_tree_add_item(amqp_tree, hf_amqp_0_10_type,     tvb, 1, 1, ENC_BIG_ENDIAN);",
          "6553:         proto_tree_add_item(amqp_tree, hf_amqp_0_10_size,     tvb, 2, 2, ENC_BIG_ENDIAN);",
          "6554:         proto_tree_add_item(amqp_tree, hf_amqp_0_10_track,    tvb, 5, 1, ENC_BIG_ENDIAN);",
          "6555:         proto_tree_add_item(amqp_tree, hf_amqp_channel,       tvb, 6, 2, ENC_BIG_ENDIAN);",
          "6556:         proto_tree_add_item(amqp_tree, hf_amqp_reserved,      tvb, 8, 4, ENC_BIG_ENDIAN);",
          "6557:     }",
          "6559:     frame_type = tvb_get_guint8(tvb, 1);",
          "6560:     length     = tvb_get_ntohs(tvb, 2);",
          "6561:     offset     = 12;",
          "6562:     next_tvb = tvb_new_subset_remaining(tvb, offset);",
          "6564:     switch(frame_type) {",
          "6565:     case AMQP_0_10_FRAME_COMMAND:",
          "6567:     case AMQP_0_10_FRAME_CONTROL:",
          "6568:         proto_tree_add_item(amqp_tree, hf_amqp_0_10_class, tvb, offset+0, 1, ENC_BIG_ENDIAN);",
          "6569:         switch(tvb_get_guint8(tvb, offset + 0)) {",
          "6570:         case AMQP_0_10_CLASS_CONNECTION:",
          "6571:             dissect_amqp_0_10_connection(next_tvb, pinfo, amqp_tree);",
          "6573:         case AMQP_0_10_CLASS_SESSION:",
          "6574:             dissect_amqp_0_10_session(next_tvb, pinfo, amqp_tree);",
          "6576:         case AMQP_0_10_CLASS_EXECUTION:",
          "6577:             dissect_amqp_0_10_execution(next_tvb, pinfo, amqp_tree);",
          "6579:         case AMQP_0_10_CLASS_MESSAGE:",
          "6580:             dissect_amqp_0_10_message(next_tvb, pinfo, amqp_tree);",
          "6582:         case AMQP_0_10_CLASS_TX:",
          "6583:             dissect_amqp_0_10_tx(next_tvb, pinfo, amqp_tree);",
          "6585:         case AMQP_0_10_CLASS_DTX:",
          "6586:             dissect_amqp_0_10_dtx(next_tvb, pinfo, amqp_tree);",
          "6588:         case AMQP_0_10_CLASS_EXCHANGE:",
          "6589:             dissect_amqp_0_10_exchange(next_tvb, pinfo, amqp_tree);",
          "6590:             break;",
          "6591:         case AMQP_0_10_CLASS_QUEUE:",
          "6592:             dissect_amqp_0_10_queue(next_tvb, pinfo, amqp_tree);",
          "6593:             break;",
          "6594:         case AMQP_0_10_CLASS_FILE:",
          "6595:             dissect_amqp_0_10_file(next_tvb, pinfo, amqp_tree);",
          "6596:             break;",
          "6597:         case AMQP_0_10_CLASS_STREAM:",
          "6598:             dissect_amqp_0_10_stream(next_tvb, pinfo, amqp_tree);",
          "6601:             expert_add_info_format(pinfo, amqp_tree, &ei_amqp_unknown_command_class, \"Unknown command/control class %d\", tvb_get_guint8(tvb, offset + 0));",
          "6602:         }",
          "6603:         break;",
          "6605:     case AMQP_0_10_FRAME_HEADER:",
          "6606:         col_append_str(pinfo->cinfo, COL_INFO, \"header \");",
          "6607:         col_set_fence(pinfo->cinfo, COL_INFO);",
          "6608:         while (tvb_reported_length_remaining(tvb, offset) > 0)",
          "6609:         {",
          "6610:             struct_length = amqp_0_10_get_32bit_size_new(amqp_tree, pinfo, tvb, hf_amqp_0_10_struct32_size, offset);",
          "6611:             offset += 4;",
          "6613:             ti = proto_tree_add_item(amqp_tree,",
          "6614:                                      hf_amqp_0_10_struct32,",
          "6615:                                      tvb, offset, 2, ENC_BIG_ENDIAN);",
          "6616:             proto_item_set_len(ti, struct_length);",
          "6617:             if (struct_length > (guint32)tvb_reported_length_remaining(tvb, offset))",
          "6618:             {",
          "6619:                 next_tvb = tvb_new_subset_remaining(tvb, offset);",
          "6620:             }",
          "6621:             else",
          "6622:             {",
          "6623:                 next_tvb = tvb_new_subset_length(tvb, offset, struct_length);",
          "6624:             }",
          "6625:             dissect_amqp_0_10_struct32(next_tvb, pinfo, ti);",
          "6626:             offset += struct_length;",
          "6630:     case AMQP_0_10_FRAME_BODY:",
          "6631:         col_append_str(pinfo->cinfo, COL_INFO, \"message-body \");",
          "6632:         col_set_fence(pinfo->cinfo, COL_INFO);",
          "6633:         proto_tree_add_item(amqp_tree,",
          "6634:                             hf_amqp_0_10_message_body,",
          "6635:                             tvb, offset, length - 12, ENC_NA);",
          "6639:         expert_add_info_format(pinfo, amqp_tree, &ei_amqp_unknown_frame_type, \"Unknown frame type %d\", frame_type);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "8167:     proto_tree_add_item(args_tree, hf_amqp_method_connection_start_ok_mechanism,",
          "8172:     proto_tree_add_item(args_tree, hf_amqp_method_connection_start_ok_response,",
          "8177:     proto_tree_add_item(args_tree, hf_amqp_method_connection_start_ok_locale,",
          "8181:     return offset;",
          "8182: }",
          "",
          "[Removed Lines]",
          "8168:         tvb, offset + 1, tvb_get_guint8(tvb, offset), ENC_ASCII|ENC_NA);",
          "8169:     offset += 1 + tvb_get_guint8(tvb, offset);",
          "8173:         tvb, offset + 4, tvb_get_ntohl(tvb, offset), ENC_NA);",
          "8174:     offset += 4 + tvb_get_ntohl(tvb, offset);",
          "8178:         tvb, offset + 1, tvb_get_guint8(tvb, offset), ENC_ASCII|ENC_NA);",
          "8179:     offset += 1 + tvb_get_guint8(tvb, offset);",
          "",
          "[Added Lines]",
          "6701:         tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "6702:     offset += (1 + tvb_get_guint8(tvb, offset));",
          "6706:         tvb, offset, 4, ENC_BIG_ENDIAN);",
          "6707:     offset += (4 + tvb_get_ntohl(tvb, offset));",
          "6711:         tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "6712:     offset += (1 + tvb_get_guint8(tvb, offset));",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "8189: {",
          "8191:     proto_tree_add_item(args_tree, hf_amqp_method_connection_secure_challenge,",
          "8195:     return offset;",
          "8196: }",
          "",
          "[Removed Lines]",
          "8192:         tvb, offset + 4, tvb_get_ntohl(tvb, offset), ENC_NA);",
          "8193:     offset += 4 + tvb_get_ntohl(tvb, offset);",
          "",
          "[Added Lines]",
          "6725:         tvb, offset, 4, ENC_BIG_ENDIAN);",
          "6726:     offset += (4 + tvb_get_ntohl(tvb, offset));",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "8203: {",
          "8205:     proto_tree_add_item(args_tree, hf_amqp_method_connection_secure_ok_response,",
          "8209:     return offset;",
          "8210: }",
          "",
          "[Removed Lines]",
          "8206:         tvb, offset + 4, tvb_get_ntohl(tvb, offset), ENC_NA);",
          "8207:     offset += 4 + tvb_get_ntohl(tvb, offset);",
          "",
          "[Added Lines]",
          "6739:         tvb, offset, 4, ENC_BIG_ENDIAN);",
          "6740:     offset += (4 + tvb_get_ntohl(tvb, offset));",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "8266:     const guint8* vhost;",
          "8268:     proto_tree_add_item_ret_string(args_tree, hf_amqp_method_connection_open_virtual_host,",
          "8270:     col_append_fstr(pinfo->cinfo, COL_INFO, \"vhost=%s \", vhost);",
          "8274:     proto_tree_add_item(args_tree, hf_amqp_0_9_method_connection_open_capabilities,",
          "",
          "[Removed Lines]",
          "8269:         tvb, offset + 1, tvb_get_guint8(tvb, offset), ENC_ASCII|ENC_NA, wmem_packet_scope(), &vhost);",
          "8271:     offset += 1 + tvb_get_guint8(tvb, offset);",
          "",
          "[Added Lines]",
          "6802:         tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN, wmem_packet_scope(), &vhost);",
          "6804:     offset += (1 + tvb_get_guint8(tvb, offset));",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "8304: {",
          "8306:     proto_tree_add_item(args_tree, hf_amqp_method_connection_redirect_host,",
          "8311:     proto_tree_add_item(args_tree, hf_amqp_0_9_method_connection_redirect_known_hosts,",
          "",
          "[Removed Lines]",
          "8307:         tvb, offset + 1, tvb_get_guint8(tvb, offset), ENC_ASCII|ENC_NA);",
          "8308:     offset += 1 + tvb_get_guint8(tvb, offset);",
          "",
          "[Added Lines]",
          "6840:         tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN);",
          "6841:     offset += (1 + tvb_get_guint8(tvb, offset));",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "8335:     proto_tree_add_item_ret_string(args_tree, hf_amqp_method_connection_close_reply_text,",
          "8337:     col_append_fstr(pinfo->cinfo, COL_INFO, \"reply=%s \", reply);",
          "8341:     proto_tree_add_item(args_tree, hf_amqp_method_connection_close_class_id,",
          "",
          "[Removed Lines]",
          "8336:         tvb, offset + 1, tvb_get_guint8(tvb, offset), ENC_ASCII|ENC_NA, wmem_packet_scope(), &reply);",
          "8338:     offset += 1 + tvb_get_guint8(tvb, offset);",
          "",
          "[Added Lines]",
          "6869:         tvb, offset, 1, ENC_ASCII|ENC_BIG_ENDIAN, wmem_packet_scope(), &reply);",
          "6871:     offset += (1 + tvb_get_guint8(tvb, offset));",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "10403:     }",
          "10404:     prop_flags <<= 1;",
          "10485:     }",
          "10489: }",
          "10491: static amqp_channel_t*",
          "",
          "[Removed Lines]",
          "10406:     if (prop_flags & 0x8000) {",
          "10408:         ti = proto_tree_add_item(prop_tree, hf_amqp_header_stream_headers,",
          "10409:             tvb, offset + 4, tvb_get_ntohl(tvb, offset), ENC_NA);",
          "10410:         dissect_amqp_0_9_field_table(tvb, pinfo, offset + 4, tvb_get_ntohl(tvb, offset), ti);",
          "10411:         offset += 4 + tvb_get_ntohl(tvb, offset);",
          "10412:     }",
          "10413:     prop_flags <<= 1;",
          "10415:     if (prop_flags & 0x8000) {",
          "10417:         proto_tree_add_item(prop_tree, hf_amqp_header_stream_priority,",
          "10418:             tvb, offset, 1, ENC_BIG_ENDIAN);",
          "10419:         offset += 1;",
          "10420:     }",
          "10421:     prop_flags <<= 1;",
          "10423:     if (prop_flags & 0x8000) {",
          "10425:         tv.secs = (time_t)tvb_get_ntoh64(tvb, offset);",
          "10426:         tv.nsecs = 0;",
          "10427:         proto_tree_add_time(prop_tree, hf_amqp_header_stream_timestamp,",
          "10428:                             tvb, offset, 8, &tv);",
          "10429:         offset += 8;",
          "10430:     }",
          "10433:     return offset;",
          "10434: }",
          "10438: static int",
          "10439: dissect_amqp_0_9_content_header_tunnel(tvbuff_t *tvb, packet_info *pinfo,",
          "10440:     int offset, proto_tree *prop_tree)",
          "10441: {",
          "10442:     proto_item *ti;",
          "10443:     guint16     prop_flags;",
          "10445:     prop_flags = tvb_get_ntohs(tvb, 19);",
          "10447:     if (prop_flags & 0x8000) {",
          "10449:         ti = proto_tree_add_item(prop_tree, hf_amqp_header_tunnel_headers,",
          "10450:             tvb, offset + 4, tvb_get_ntohl(tvb, offset), ENC_NA);",
          "10451:         dissect_amqp_0_9_field_table(tvb, pinfo, offset + 4, tvb_get_ntohl(tvb, offset), ti);",
          "10452:         offset += 4 + tvb_get_ntohl(tvb, offset);",
          "10453:     }",
          "10454:     prop_flags <<= 1;",
          "10456:     if (prop_flags & 0x8000) {",
          "10458:         proto_tree_add_item(prop_tree, hf_amqp_header_tunnel_proxy_name,",
          "10459:             tvb, offset + 1, tvb_get_guint8(tvb, offset), ENC_ASCII|ENC_NA);",
          "10460:         offset += 1 + tvb_get_guint8(tvb, offset);",
          "10461:     }",
          "10462:     prop_flags <<= 1;",
          "10464:     if (prop_flags & 0x8000) {",
          "10466:         proto_tree_add_item(prop_tree, hf_amqp_header_tunnel_data_name,",
          "10467:             tvb, offset + 1, tvb_get_guint8(tvb, offset), ENC_ASCII|ENC_NA);",
          "10468:         offset += 1 + tvb_get_guint8(tvb, offset);",
          "10469:     }",
          "10470:     prop_flags <<= 1;",
          "10472:     if (prop_flags & 0x8000) {",
          "10474:         proto_tree_add_item(prop_tree, hf_amqp_header_tunnel_durable,",
          "10475:             tvb, offset, 1, ENC_BIG_ENDIAN);",
          "10476:         offset += 1;",
          "10477:     }",
          "10478:     prop_flags <<= 1;",
          "10480:     if (prop_flags & 0x8000) {",
          "10482:         proto_tree_add_item(prop_tree, hf_amqp_header_tunnel_broadcast,",
          "10483:             tvb, offset, 1, ENC_BIG_ENDIAN);",
          "10484:         offset += 1;",
          "10488:     return offset;",
          "",
          "[Added Lines]",
          "8939:     if (prop_flags & 0x8000) {",
          "8941:         ti = proto_tree_add_item(prop_tree, hf_amqp_header_stream_headers,",
          "8942:             tvb, offset + 4, tvb_get_ntohl(tvb, offset), ENC_NA);",
          "8943:         dissect_amqp_0_9_field_table(tvb, pinfo, offset + 4, tvb_get_ntohl(tvb, offset), ti);",
          "8944:         offset += 4 + tvb_get_ntohl(tvb, offset);",
          "8945:     }",
          "8946:     prop_flags <<= 1;",
          "8948:     if (prop_flags & 0x8000) {",
          "8950:         proto_tree_add_item(prop_tree, hf_amqp_header_stream_priority,",
          "8951:             tvb, offset, 1, ENC_BIG_ENDIAN);",
          "8952:         offset += 1;",
          "8953:     }",
          "8954:     prop_flags <<= 1;",
          "8956:     if (prop_flags & 0x8000) {",
          "8958:         tv.secs = (time_t)tvb_get_ntoh64(tvb, offset);",
          "8959:         tv.nsecs = 0;",
          "8960:         proto_tree_add_time(prop_tree, hf_amqp_header_stream_timestamp,",
          "8961:                             tvb, offset, 8, &tv);",
          "8962:         offset += 8;",
          "8963:     }",
          "8966:     return offset;",
          "8967: }",
          "8971: static int",
          "8972: dissect_amqp_0_9_content_header_tunnel(tvbuff_t *tvb, packet_info *pinfo,",
          "8973:     int offset, proto_tree *prop_tree)",
          "8974: {",
          "8975:     proto_item *ti;",
          "8976:     guint16     prop_flags;",
          "8978:     prop_flags = tvb_get_ntohs(tvb, 19);",
          "8980:     if (prop_flags & 0x8000) {",
          "8982:         ti = proto_tree_add_item(prop_tree, hf_amqp_header_tunnel_headers,",
          "8983:             tvb, offset + 4, tvb_get_ntohl(tvb, offset), ENC_NA);",
          "8984:         dissect_amqp_0_9_field_table(tvb, pinfo, offset + 4, tvb_get_ntohl(tvb, offset), ti);",
          "8985:         offset += 4 + tvb_get_ntohl(tvb, offset);",
          "8986:     }",
          "8987:     prop_flags <<= 1;",
          "8989:     if (prop_flags & 0x8000) {",
          "8991:         proto_tree_add_item(prop_tree, hf_amqp_header_tunnel_proxy_name,",
          "8992:             tvb, offset + 1, tvb_get_guint8(tvb, offset), ENC_ASCII|ENC_NA);",
          "8993:         offset += 1 + tvb_get_guint8(tvb, offset);",
          "8994:     }",
          "8995:     prop_flags <<= 1;",
          "8997:     if (prop_flags & 0x8000) {",
          "8999:         proto_tree_add_item(prop_tree, hf_amqp_header_tunnel_data_name,",
          "9000:             tvb, offset + 1, tvb_get_guint8(tvb, offset), ENC_ASCII|ENC_NA);",
          "9001:         offset += 1 + tvb_get_guint8(tvb, offset);",
          "9002:     }",
          "9003:     prop_flags <<= 1;",
          "9005:     if (prop_flags & 0x8000) {",
          "9007:         proto_tree_add_item(prop_tree, hf_amqp_header_tunnel_durable,",
          "9008:             tvb, offset, 1, ENC_BIG_ENDIAN);",
          "9009:         offset += 1;",
          "9010:     }",
          "9011:     prop_flags <<= 1;",
          "9013:     if (prop_flags & 0x8000) {",
          "9015:         proto_tree_add_item(prop_tree, hf_amqp_header_tunnel_broadcast,",
          "9016:             tvb, offset, 1, ENC_BIG_ENDIAN);",
          "9017:         offset += 1;",
          "9018:     }",
          "9021:     return offset;",
          "9022: }",
          "9026: static int",
          "9027: dissect_amqp_0_9_frame(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data _U_)",
          "9028: {",
          "9029:     proto_item    *ti;",
          "9030:     proto_item    *amqp_tree = NULL;",
          "9031:     proto_item    *args_tree;",
          "9032:     proto_item    *prop_tree;",
          "9033:     guint          length;",
          "9034:     guint8         frame_type;",
          "9035:     guint16        channel_num, class_id, method_id;",
          "9038:     if (tvb_memeql(tvb, 0, \"AMQP\", 4) == 0) {",
          "9039:         guint8         proto_id, proto_major, proto_minor;",
          "9041:         proto_id = tvb_get_guint8(tvb, 5);",
          "9042:         proto_major = tvb_get_guint8(tvb, 6);",
          "9043:         proto_minor = tvb_get_guint8(tvb, 7);",
          "9044:         col_append_fstr(pinfo->cinfo, COL_INFO, \"Protocol-Header %u-%u-%u\",",
          "9045:                                   proto_id,",
          "9046:                                   proto_major,",
          "9047:                                   proto_minor);",
          "9048:         col_set_fence(pinfo->cinfo, COL_INFO);",
          "9050:         if (tree) {",
          "9051:             ti = proto_tree_add_item(tree, proto_amqp, tvb, 0, -1, ENC_NA);",
          "9052:             amqp_tree = proto_item_add_subtree(ti, ett_amqp_init);",
          "9053:             proto_tree_add_item(amqp_tree, hf_amqp_init_protocol, tvb, 0, 4, ENC_ASCII|ENC_NA);",
          "9054:             proto_tree_add_item(amqp_tree, hf_amqp_init_id_major, tvb, 4, 1, ENC_BIG_ENDIAN);",
          "9055:             proto_tree_add_item(amqp_tree, hf_amqp_init_id_minor, tvb, 5, 1, ENC_BIG_ENDIAN);",
          "9056:             proto_tree_add_item(amqp_tree, hf_amqp_init_version_major, tvb, 6, 1, ENC_BIG_ENDIAN);",
          "9057:             proto_tree_add_item(amqp_tree, hf_amqp_init_version_minor, tvb, 7, 1, ENC_BIG_ENDIAN);",
          "9058:         }",
          "9059:         return 8;",
          "9060:     }",
          "9062:     if (tree) {",
          "9063:         ti = proto_tree_add_item(tree, proto_amqp, tvb, 0, -1, ENC_NA);",
          "9064:         amqp_tree = proto_item_add_subtree(ti, ett_amqp);",
          "9065:         proto_tree_add_item(amqp_tree, hf_amqp_0_9_type,   tvb, 0, 1, ENC_BIG_ENDIAN);",
          "9066:         proto_tree_add_item(amqp_tree, hf_amqp_channel,    tvb, 1, 2, ENC_BIG_ENDIAN);",
          "9067:         proto_tree_add_item(amqp_tree, hf_amqp_0_9_length, tvb, 3, 4, ENC_BIG_ENDIAN);",
          "9068:     }",
          "9070:     frame_type = tvb_get_guint8(tvb, 0);",
          "9071:     channel_num = tvb_get_ntohs(tvb, 1);",
          "9072:     length     = tvb_get_ntohl(tvb, 3);",
          "9074:     switch (frame_type) {",
          "9075:     case AMQP_0_9_FRAME_TYPE_METHOD:",
          "9076:         class_id = tvb_get_ntohs(tvb, 7);",
          "9077:         proto_tree_add_item(amqp_tree, hf_amqp_0_9_method_class_id,",
          "9078:                             tvb, 7, 2, ENC_BIG_ENDIAN);",
          "9079:         switch (class_id) {",
          "9080:         case AMQP_0_9_CLASS_CONNECTION:",
          "9081:             method_id = tvb_get_ntohs(tvb, 9);",
          "9082:             proto_tree_add_item(amqp_tree, hf_amqp_method_connection_method_id,",
          "9083:                                 tvb, 9, 2, ENC_BIG_ENDIAN);",
          "9084:             ti = proto_tree_add_item(amqp_tree, hf_amqp_method_arguments,",
          "9085:                                      tvb, 11, length - 4, ENC_NA);",
          "9086:             args_tree = proto_item_add_subtree(ti, ett_args);",
          "9087:             col_append_fstr(pinfo->cinfo, COL_INFO, \"Connection.%s \",",
          "9088:                             val_to_str( method_id, amqp_method_connection_methods, \"Unknown (%u)\"));",
          "9089:             switch (method_id) {",
          "9090:             case AMQP_0_9_METHOD_CONNECTION_START:",
          "9091:                 dissect_amqp_0_9_method_connection_start(tvb,",
          "9092:                                                          pinfo, 11, args_tree);",
          "9093:                 break;",
          "9094:             case AMQP_0_9_METHOD_CONNECTION_START_OK:",
          "9095:                 dissect_amqp_0_9_method_connection_start_ok(tvb,",
          "9096:                                                             pinfo, 11, args_tree);",
          "9097:                 break;",
          "9098:             case AMQP_0_9_METHOD_CONNECTION_SECURE:",
          "9099:                 dissect_amqp_0_9_method_connection_secure(tvb,",
          "9100:                                                           11, args_tree);",
          "9101:                 break;",
          "9102:             case AMQP_0_9_METHOD_CONNECTION_SECURE_OK:",
          "9103:                 dissect_amqp_0_9_method_connection_secure_ok(tvb,",
          "9104:                                                              11, args_tree);",
          "9105:                 break;",
          "9106:             case AMQP_0_9_METHOD_CONNECTION_TUNE:",
          "9107:                 dissect_amqp_0_9_method_connection_tune(tvb,",
          "9108:                                                         11, args_tree);",
          "9109:                 break;",
          "9110:             case AMQP_0_9_METHOD_CONNECTION_TUNE_OK:",
          "9111:                 dissect_amqp_0_9_method_connection_tune_ok(tvb,",
          "9112:                                                            11, args_tree);",
          "9113:                 break;",
          "9114:             case AMQP_0_9_METHOD_CONNECTION_OPEN:",
          "9115:                 dissect_amqp_0_9_method_connection_open(tvb,",
          "9116:                                                         pinfo, 11, args_tree);",
          "9117:                 break;",
          "9118:             case AMQP_0_9_METHOD_CONNECTION_OPEN_OK:",
          "9119:                 dissect_amqp_0_9_method_connection_open_ok(tvb,",
          "9120:                                                            11, args_tree);",
          "9121:                 break;",
          "9122:             case AMQP_0_9_METHOD_CONNECTION_REDIRECT:",
          "9123:                 dissect_amqp_0_9_method_connection_redirect(tvb,",
          "9124:                                                             11, args_tree);",
          "9125:                 break;",
          "9126:             case AMQP_0_9_METHOD_CONNECTION_CLOSE:",
          "9127:                 dissect_amqp_0_9_method_connection_close(tvb,",
          "9128:                                                          pinfo, 11, args_tree);",
          "9129:                 break;",
          "9130:             case AMQP_0_9_METHOD_CONNECTION_CLOSE_OK:",
          "9131:                 dissect_amqp_0_9_method_connection_close_ok(tvb,",
          "9132:                                                             11, args_tree);",
          "9133:                 break;",
          "9134:             case AMQP_0_9_METHOD_CONNECTION_BLOCKED:",
          "9135:                 dissect_amqp_0_9_method_connection_blocked(tvb,",
          "9136:                                                            11, args_tree);",
          "9137:                 break;",
          "9138:             case AMQP_0_9_METHOD_CONNECTION_UNBLOCKED:",
          "9139:                 dissect_amqp_0_9_method_connection_unblocked(tvb,",
          "9140:                                                              11, args_tree);",
          "9141:                 break;",
          "9142:             default:",
          "9143:                 expert_add_info_format(pinfo, amqp_tree, &ei_amqp_unknown_connection_method, \"Unknown connection method %u\", method_id);",
          "9144:             }",
          "9145:             break;",
          "9146:         case AMQP_0_9_CLASS_CHANNEL:",
          "9147:             method_id = tvb_get_ntohs(tvb, 9);",
          "9148:             proto_tree_add_item(amqp_tree, hf_amqp_method_channel_method_id,",
          "9149:                                 tvb, 9, 2, ENC_BIG_ENDIAN);",
          "9150:             ti = proto_tree_add_item(amqp_tree, hf_amqp_method_arguments,",
          "9151:                                      tvb, 11, length - 4, ENC_NA);",
          "9152:             args_tree = proto_item_add_subtree(ti, ett_args);",
          "9154:             col_append_fstr(pinfo->cinfo, COL_INFO, \"Channel.%s \",",
          "9155:                             val_to_str( method_id, amqp_method_channel_methods, \"Unknown (%u)\"));",
          "9157:             switch (method_id) {",
          "9158:             case AMQP_0_9_METHOD_CHANNEL_OPEN:",
          "9159:                 dissect_amqp_0_9_method_channel_open(tvb,",
          "9160:                                                      11, args_tree);",
          "9161:                 break;",
          "9162:             case AMQP_0_9_METHOD_CHANNEL_OPEN_OK:",
          "9163:                 dissect_amqp_0_9_method_channel_open_ok(tvb,",
          "9164:                                                         11, args_tree);",
          "9165:                 break;",
          "9166:             case AMQP_0_9_METHOD_CHANNEL_FLOW:",
          "9167:                 dissect_amqp_0_9_method_channel_flow(tvb,",
          "9168:                                                      11, args_tree);",
          "9169:                 break;",
          "9170:             case AMQP_0_9_METHOD_CHANNEL_FLOW_OK:",
          "9171:                 dissect_amqp_0_9_method_channel_flow_ok(tvb,",
          "9172:                                                         11, args_tree);",
          "9173:                 break;",
          "9174:             case AMQP_0_9_METHOD_CHANNEL_CLOSE:",
          "9175:                 dissect_amqp_0_9_method_channel_close(channel_num, tvb,",
          "9176:                                                       pinfo, 11, args_tree);",
          "9177:                 break;",
          "9178:             case AMQP_0_9_METHOD_CHANNEL_CLOSE_OK:",
          "9179:                 dissect_amqp_0_9_method_channel_close_ok(tvb,",
          "9180:                                                          11, args_tree);",
          "9181:                 break;",
          "9182:             case AMQP_0_9_METHOD_CHANNEL_RESUME:",
          "9183:                 dissect_amqp_0_9_method_channel_resume(tvb,",
          "9184:                                                        11, args_tree);",
          "9185:                 break;",
          "9186:             case AMQP_0_9_METHOD_CHANNEL_PING:",
          "9187:                 dissect_amqp_0_9_method_channel_ping(tvb,",
          "9188:                                                      11, args_tree);",
          "9189:                 break;",
          "9190:             case AMQP_0_9_METHOD_CHANNEL_PONG:",
          "9191:                 dissect_amqp_0_9_method_channel_pong(tvb,",
          "9192:                                                      11, args_tree);",
          "9193:                 break;",
          "9194:             case AMQP_0_9_METHOD_CHANNEL_OK:",
          "9195:                 dissect_amqp_0_9_method_channel_ok(tvb,",
          "9196:                                                    11, args_tree);",
          "9197:                 break;",
          "9198:             default:",
          "9199:                 expert_add_info_format(pinfo, amqp_tree, &ei_amqp_unknown_channel_method, \"Unknown channel method %u\", method_id);",
          "9200:             }",
          "9201:             break;",
          "9202:         case AMQP_0_9_CLASS_ACCESS:",
          "9203:             method_id = tvb_get_ntohs(tvb, 9);",
          "9204:             proto_tree_add_item(amqp_tree, hf_amqp_method_access_method_id,",
          "9205:                                 tvb, 9, 2, ENC_BIG_ENDIAN);",
          "9206:             ti = proto_tree_add_item(amqp_tree, hf_amqp_method_arguments,",
          "9207:                                      tvb, 11, length - 4, ENC_NA);",
          "9208:             args_tree = proto_item_add_subtree(ti, ett_args);",
          "9209:             switch (method_id) {",
          "9210:             case AMQP_0_9_METHOD_ACCESS_REQUEST:",
          "9211:                 dissect_amqp_0_9_method_access_request(tvb,",
          "9212:                                                        11, args_tree);",
          "9213:                 col_append_str(pinfo->cinfo, COL_INFO,",
          "9214:                                \"Access.Request \");",
          "9215:                 break;",
          "9216:             case AMQP_0_9_METHOD_ACCESS_REQUEST_OK:",
          "9217:                 dissect_amqp_0_9_method_access_request_ok(tvb,",
          "9218:                                                           11, args_tree);",
          "9219:                 col_append_str(pinfo->cinfo, COL_INFO,",
          "9220:                                \"Access.Request-Ok \");",
          "9221:                 break;",
          "9222:             default:",
          "9223:                 expert_add_info_format(pinfo, amqp_tree, &ei_amqp_unknown_access_method, \"Unknown access method %u\", method_id);",
          "9224:             }",
          "9225:             break;",
          "9226:         case AMQP_0_9_CLASS_EXCHANGE:",
          "9227:             method_id = tvb_get_ntohs(tvb, 9);",
          "9228:             proto_tree_add_item(amqp_tree, hf_amqp_method_exchange_method_id,",
          "9229:                                 tvb, 9, 2, ENC_BIG_ENDIAN);",
          "9230:             ti = proto_tree_add_item(amqp_tree, hf_amqp_method_arguments,",
          "9231:                                      tvb, 11, length - 4, ENC_NA);",
          "9232:             args_tree = proto_item_add_subtree(ti, ett_args);",
          "9233:             col_append_fstr(pinfo->cinfo, COL_INFO, \"Exchange.%s \",",
          "9234:                             val_to_str( method_id, amqp_method_exchange_methods, \"Unknown (%u)\"));",
          "9235:             switch (method_id) {",
          "9236:             case AMQP_0_9_METHOD_EXCHANGE_DECLARE:",
          "9237:                 dissect_amqp_0_9_method_exchange_declare(tvb,",
          "9238:                                                          pinfo, 11, args_tree);",
          "9239:                 break;",
          "9240:             case AMQP_0_9_METHOD_EXCHANGE_DECLARE_OK:",
          "9241:                 dissect_amqp_0_9_method_exchange_declare_ok(tvb,",
          "9242:                                                             11, args_tree);",
          "9243:                 break;",
          "9244:             case AMQP_0_9_METHOD_EXCHANGE_BIND:",
          "9245:                 dissect_amqp_0_9_method_exchange_bind(tvb,",
          "9246:                                                       pinfo, 11, args_tree);",
          "9247:                 break;",
          "9248:             case AMQP_0_9_METHOD_EXCHANGE_BIND_OK:",
          "9249:                 dissect_amqp_0_9_method_exchange_bind_ok(tvb,",
          "9250:                                                          11, args_tree);",
          "9251:                 break;",
          "9252:             case AMQP_0_9_METHOD_EXCHANGE_DELETE:",
          "9253:                 dissect_amqp_0_9_method_exchange_delete(tvb,",
          "9254:                                                         pinfo, 11, args_tree);",
          "9255:                 break;",
          "9256:             case AMQP_0_9_METHOD_EXCHANGE_DELETE_OK:",
          "9257:                 dissect_amqp_0_9_method_exchange_delete_ok(tvb,",
          "9258:                                                            11, args_tree);",
          "9259:                 break;",
          "9260:             case AMQP_0_9_METHOD_EXCHANGE_UNBIND:",
          "9262:                 dissect_amqp_0_9_method_exchange_bind(tvb,",
          "9263:                                                       pinfo, 11, args_tree);",
          "9264:                 break;",
          "9265:             case AMQP_0_9_METHOD_EXCHANGE_UNBIND_OK:",
          "9267:                 dissect_amqp_0_9_method_exchange_bind_ok(tvb,",
          "9268:                                                          11, args_tree);",
          "9269:                 break;",
          "9270:             default:",
          "9271:                 expert_add_info_format(pinfo, amqp_tree, &ei_amqp_unknown_exchange_method, \"Unknown exchange method %u\", method_id);",
          "9272:             }",
          "9273:             break;",
          "9274:         case AMQP_0_9_CLASS_QUEUE:",
          "9275:             method_id = tvb_get_ntohs(tvb, 9);",
          "9276:             proto_tree_add_item(amqp_tree, hf_amqp_method_queue_method_id,",
          "9277:                                 tvb, 9, 2, ENC_BIG_ENDIAN);",
          "9278:             ti = proto_tree_add_item(amqp_tree, hf_amqp_method_arguments,",
          "9279:                                      tvb, 11, length - 4, ENC_NA);",
          "9280:             args_tree = proto_item_add_subtree(ti, ett_args);",
          "9281:             col_append_fstr(pinfo->cinfo, COL_INFO, \"Queue.%s \",",
          "9282:                             val_to_str( method_id, amqp_method_queue_methods, \"Unknown (%u)\"));",
          "9284:             switch (method_id) {",
          "9285:             case AMQP_0_9_METHOD_QUEUE_DECLARE:",
          "9286:                 dissect_amqp_0_9_method_queue_declare(tvb,",
          "9287:                                                       pinfo, 11, args_tree);",
          "9288:                 break;",
          "9289:             case AMQP_0_9_METHOD_QUEUE_DECLARE_OK:",
          "9290:                 dissect_amqp_0_9_method_queue_declare_ok(tvb,",
          "9291:                                                          pinfo, 11, args_tree);",
          "9292:                 break;",
          "9293:             case AMQP_0_9_METHOD_QUEUE_BIND:",
          "9294:                 dissect_amqp_0_9_method_queue_bind(tvb,",
          "9295:                                                    pinfo, 11, args_tree);",
          "9296:                 break;",
          "9297:             case AMQP_0_9_METHOD_QUEUE_BIND_OK:",
          "9298:                 dissect_amqp_0_9_method_queue_bind_ok(tvb,",
          "9299:                                                       11, args_tree);",
          "9300:                 break;",
          "9301:             case AMQP_0_9_METHOD_QUEUE_UNBIND:",
          "9302:                 dissect_amqp_0_9_method_queue_unbind(tvb,",
          "9303:                                                      pinfo, 11, args_tree);",
          "9304:                 break;",
          "9305:             case AMQP_0_9_METHOD_QUEUE_UNBIND_OK:",
          "9306:                 dissect_amqp_0_9_method_queue_unbind_ok(tvb,",
          "9307:                                                         11, args_tree);",
          "9308:                 break;",
          "9309:             case AMQP_0_9_METHOD_QUEUE_PURGE:",
          "9310:                 dissect_amqp_0_9_method_queue_purge(tvb,",
          "9311:                                                     pinfo, 11, args_tree);",
          "9312:                 break;",
          "9313:             case AMQP_0_9_METHOD_QUEUE_PURGE_OK:",
          "9314:                 dissect_amqp_0_9_method_queue_purge_ok(tvb,",
          "9315:                                                        11, args_tree);",
          "9316:                 break;",
          "9317:             case AMQP_0_9_METHOD_QUEUE_DELETE:",
          "9318:                 dissect_amqp_0_9_method_queue_delete(tvb,",
          "9319:                                                      pinfo, 11, args_tree);",
          "9320:                 break;",
          "9321:             case AMQP_0_9_METHOD_QUEUE_DELETE_OK:",
          "9322:                 dissect_amqp_0_9_method_queue_delete_ok(tvb,",
          "9323:                                                         11, args_tree);",
          "9324:                 break;",
          "9325:             default:",
          "9326:                 expert_add_info_format(pinfo, amqp_tree, &ei_amqp_unknown_queue_method, \"Unknown queue method %u\", method_id);",
          "9327:             }",
          "9328:             break;",
          "9329:         case AMQP_0_9_CLASS_BASIC:",
          "9330:             method_id = tvb_get_ntohs(tvb, 9);",
          "9331:             proto_tree_add_item(amqp_tree, hf_amqp_method_basic_method_id,",
          "9332:                                 tvb, 9, 2, ENC_BIG_ENDIAN);",
          "9333:             ti = proto_tree_add_item(amqp_tree, hf_amqp_method_arguments,",
          "9334:                                      tvb, 11, length - 4, ENC_NA);",
          "9335:             args_tree = proto_item_add_subtree(ti, ett_args);",
          "9337:             col_append_fstr(pinfo->cinfo, COL_INFO, \"Basic.%s \",",
          "9338:                             val_to_str( method_id, amqp_method_basic_methods, \"Unknown (%u)\"));",
          "9340:             switch (method_id) {",
          "9341:             case AMQP_0_9_METHOD_BASIC_QOS:",
          "9342:                 dissect_amqp_0_9_method_basic_qos(tvb,",
          "9343:                                                   11, args_tree);",
          "9344:                 break;",
          "9345:             case AMQP_0_9_METHOD_BASIC_QOS_OK:",
          "9346:                 dissect_amqp_0_9_method_basic_qos_ok(tvb,",
          "9347:                                                      11, args_tree);",
          "9348:                 break;",
          "9349:             case AMQP_0_9_METHOD_BASIC_CONSUME:",
          "9350:                 dissect_amqp_0_9_method_basic_consume(tvb,",
          "9351:                                                       pinfo, 11, args_tree);",
          "9352:                 break;",
          "9353:             case AMQP_0_9_METHOD_BASIC_CONSUME_OK:",
          "9354:                 dissect_amqp_0_9_method_basic_consume_ok(tvb,",
          "9355:                                                          11, args_tree);",
          "9356:                 break;",
          "9357:             case AMQP_0_9_METHOD_BASIC_CANCEL:",
          "9358:                 dissect_amqp_0_9_method_basic_cancel(tvb,",
          "9359:                                                      11, args_tree);",
          "9360:                 break;",
          "9361:             case AMQP_0_9_METHOD_BASIC_CANCEL_OK:",
          "9362:                 dissect_amqp_0_9_method_basic_cancel_ok(tvb,",
          "9363:                                                         11, args_tree);",
          "9364:                 break;",
          "9365:             case AMQP_0_9_METHOD_BASIC_PUBLISH:",
          "9366:                 dissect_amqp_0_9_method_basic_publish(channel_num, tvb,",
          "9367:                                                       pinfo, 11, args_tree);",
          "9368:                 generate_ack_reference(tvb, pinfo, amqp_tree);",
          "9369:                 break;",
          "9370:             case AMQP_0_9_METHOD_BASIC_RETURN:",
          "9371:                 dissect_amqp_0_9_method_basic_return(tvb,",
          "9372:                                                      pinfo, 11, args_tree);",
          "9373:                 break;",
          "9374:             case AMQP_0_9_METHOD_BASIC_DELIVER:",
          "9375:                 dissect_amqp_0_9_method_basic_deliver(channel_num, tvb,",
          "9376:                                                       pinfo, 11, args_tree);",
          "9377:                 generate_ack_reference(tvb, pinfo, amqp_tree);",
          "9378:                 break;",
          "9379:             case AMQP_0_9_METHOD_BASIC_GET:",
          "9380:                 dissect_amqp_0_9_method_basic_get(tvb,",
          "9381:                                                   pinfo, 11, args_tree);",
          "9382:                 break;",
          "9383:             case AMQP_0_9_METHOD_BASIC_GET_OK:",
          "9384:                 dissect_amqp_0_9_method_basic_get_ok(channel_num, tvb,",
          "9385:                                                      pinfo, 11, args_tree);",
          "9386:                 generate_ack_reference(tvb, pinfo, amqp_tree);",
          "9387:                 break;",
          "9388:             case AMQP_0_9_METHOD_BASIC_GET_EMPTY:",
          "9389:                 dissect_amqp_0_9_method_basic_get_empty(tvb,",
          "9390:                                                         11, args_tree);",
          "9391:                 break;",
          "9392:             case AMQP_0_9_METHOD_BASIC_ACK:",
          "9393:                 dissect_amqp_0_9_method_basic_ack(channel_num, tvb,",
          "9394:                                                   pinfo, 11, args_tree);",
          "9395:                 generate_msg_reference(tvb, pinfo, amqp_tree);",
          "9396:                 break;",
          "9397:             case AMQP_0_9_METHOD_BASIC_REJECT:",
          "9398:                 dissect_amqp_0_9_method_basic_reject(channel_num, tvb,",
          "9399:                                                      pinfo, 11, args_tree);",
          "9400:                 generate_msg_reference(tvb, pinfo, amqp_tree);",
          "9401:                 break;",
          "9402:             case AMQP_0_9_METHOD_BASIC_RECOVER_ASYNC:",
          "9403:                 dissect_amqp_0_9_method_basic_recover_async(tvb,",
          "9404:                                                             11, args_tree);",
          "9405:                 break;",
          "9406:             case AMQP_0_9_METHOD_BASIC_RECOVER:",
          "9407:                 dissect_amqp_0_9_method_basic_recover(tvb,",
          "9408:                                                       11, args_tree);",
          "9409:                 break;",
          "9410:             case AMQP_0_9_METHOD_BASIC_RECOVER_OK:",
          "9411:                 dissect_amqp_0_9_method_basic_recover_ok(tvb,",
          "9412:                                                          11, args_tree);",
          "9413:                 break;",
          "9414:             case AMQP_0_9_METHOD_BASIC_NACK:",
          "9415:                 dissect_amqp_0_9_method_basic_nack(channel_num, tvb,",
          "9416:                                                    pinfo, 11, args_tree);",
          "9417:                 generate_msg_reference(tvb, pinfo, amqp_tree);",
          "9418:                 break;",
          "9419:             default:",
          "9420:                 expert_add_info_format(pinfo, amqp_tree, &ei_amqp_unknown_basic_method, \"Unknown basic method %u\", method_id);",
          "9421:             }",
          "9422:             break;",
          "9423:         case AMQP_0_9_CLASS_FILE:",
          "9424:             method_id = tvb_get_ntohs(tvb, 9);",
          "9425:             proto_tree_add_item(amqp_tree, hf_amqp_method_file_method_id,",
          "9426:                                 tvb, 9, 2, ENC_BIG_ENDIAN);",
          "9427:             ti = proto_tree_add_item(amqp_tree, hf_amqp_method_arguments,",
          "9428:                                      tvb, 11, length - 4, ENC_NA);",
          "9429:             args_tree = proto_item_add_subtree(ti, ett_args);",
          "9431:             col_append_fstr(pinfo->cinfo, COL_INFO, \"File.%s \",",
          "9432:                             val_to_str( method_id, amqp_method_file_methods, \"Unknown (%u)\"));",
          "9434:             switch (method_id) {",
          "9435:             case AMQP_0_9_METHOD_FILE_QOS:",
          "9436:                 dissect_amqp_0_9_method_file_qos(tvb,",
          "9437:                                                  11, args_tree);",
          "9438:                 break;",
          "9439:             case AMQP_0_9_METHOD_FILE_QOS_OK:",
          "9440:                 dissect_amqp_0_9_method_file_qos_ok(tvb,",
          "9441:                                                     11, args_tree);",
          "9442:                 break;",
          "9443:             case AMQP_0_9_METHOD_FILE_CONSUME:",
          "9444:                 dissect_amqp_0_9_method_file_consume(tvb,",
          "9445:                                                      pinfo, 11, args_tree);",
          "9446:                 break;",
          "9447:             case AMQP_0_9_METHOD_FILE_CONSUME_OK:",
          "9448:                 dissect_amqp_0_9_method_file_consume_ok(tvb,",
          "9449:                                                         11, args_tree);",
          "9450:                 break;",
          "9451:             case AMQP_0_9_METHOD_FILE_CANCEL:",
          "9452:                 dissect_amqp_0_9_method_file_cancel(tvb,",
          "9453:                                                     11, args_tree);",
          "9454:                 break;",
          "9455:             case AMQP_0_9_METHOD_FILE_CANCEL_OK:",
          "9456:                 dissect_amqp_0_9_method_file_cancel_ok(tvb,",
          "9457:                                                        11, args_tree);",
          "9458:                 break;",
          "9459:             case AMQP_0_9_METHOD_FILE_OPEN:",
          "9460:                 dissect_amqp_0_9_method_file_open(tvb,",
          "9461:                                                   11, args_tree);",
          "9462:                 break;",
          "9463:             case AMQP_0_9_METHOD_FILE_OPEN_OK:",
          "9464:                 dissect_amqp_0_9_method_file_open_ok(tvb,",
          "9465:                                                      11, args_tree);",
          "9466:                 break;",
          "9467:             case AMQP_0_9_METHOD_FILE_STAGE:",
          "9468:                 dissect_amqp_0_9_method_file_stage(tvb,",
          "9469:                                                    11, args_tree);",
          "9470:                 break;",
          "9471:             case AMQP_0_9_METHOD_FILE_PUBLISH:",
          "9472:                 dissect_amqp_0_9_method_file_publish(tvb,",
          "9473:                                                      11, args_tree);",
          "9474:                 break;",
          "9475:             case AMQP_0_9_METHOD_FILE_RETURN:",
          "9476:                 dissect_amqp_0_9_method_file_return(tvb,",
          "9477:                                                     11, args_tree);",
          "9478:                 break;",
          "9479:             case AMQP_0_9_METHOD_FILE_DELIVER:",
          "9480:                 dissect_amqp_0_9_method_file_deliver(tvb,",
          "9481:                                                      11, args_tree);",
          "9482:                 break;",
          "9483:             case AMQP_0_9_METHOD_FILE_ACK:",
          "9484:                 dissect_amqp_0_9_method_file_ack(tvb,",
          "9485:                                                  11, args_tree);",
          "9486:                 break;",
          "9487:             case AMQP_0_9_METHOD_FILE_REJECT:",
          "9488:                 dissect_amqp_0_9_method_file_reject(tvb,",
          "9489:                                                     11, args_tree);",
          "9490:                 break;",
          "9491:             default:",
          "9492:                 expert_add_info_format(pinfo, amqp_tree, &ei_amqp_unknown_file_method, \"Unknown file method %u\", method_id);",
          "9493:             }",
          "9494:             break;",
          "9495:         case AMQP_0_9_CLASS_STREAM:",
          "9496:             method_id = tvb_get_ntohs(tvb, 9);",
          "9497:             proto_tree_add_item(amqp_tree, hf_amqp_method_stream_method_id,",
          "9498:                                 tvb, 9, 2, ENC_BIG_ENDIAN);",
          "9499:             ti = proto_tree_add_item(amqp_tree, hf_amqp_method_arguments,",
          "9500:                                      tvb, 11, length - 4, ENC_NA);",
          "9501:             args_tree = proto_item_add_subtree(ti, ett_args);",
          "9503:             col_append_fstr(pinfo->cinfo, COL_INFO, \"Stream.%s \",",
          "9504:                             val_to_str( method_id, amqp_method_stream_methods, \"Unknown (%u)\"));",
          "9506:             switch (method_id) {",
          "9507:             case AMQP_0_9_METHOD_STREAM_QOS:",
          "9508:                 dissect_amqp_0_9_method_stream_qos(tvb,",
          "9509:                                                    11, args_tree);",
          "9510:                 break;",
          "9511:             case AMQP_0_9_METHOD_STREAM_QOS_OK:",
          "9512:                 dissect_amqp_0_9_method_stream_qos_ok(tvb,",
          "9513:                                                       11, args_tree);",
          "9514:                 break;",
          "9515:             case AMQP_0_9_METHOD_STREAM_CONSUME:",
          "9516:                 dissect_amqp_0_9_method_stream_consume(tvb,",
          "9517:                                                        pinfo, 11, args_tree);",
          "9518:                 break;",
          "9519:             case AMQP_0_9_METHOD_STREAM_CONSUME_OK:",
          "9520:                 dissect_amqp_0_9_method_stream_consume_ok(tvb,",
          "9521:                                                           11, args_tree);",
          "9522:                 break;",
          "9523:             case AMQP_0_9_METHOD_STREAM_CANCEL:",
          "9524:                 dissect_amqp_0_9_method_stream_cancel(tvb,",
          "9525:                                                       11, args_tree);",
          "9526:                 break;",
          "9527:             case AMQP_0_9_METHOD_STREAM_CANCEL_OK:",
          "9528:                 dissect_amqp_0_9_method_stream_cancel_ok(tvb,",
          "9529:                                                          11, args_tree);",
          "9530:                 break;",
          "9531:             case AMQP_0_9_METHOD_STREAM_PUBLISH:",
          "9532:                 dissect_amqp_0_9_method_stream_publish(tvb,",
          "9533:                                                        11, args_tree);",
          "9534:                 break;",
          "9535:             case AMQP_0_9_METHOD_STREAM_RETURN:",
          "9536:                 dissect_amqp_0_9_method_stream_return(tvb,",
          "9537:                                                       11, args_tree);",
          "9538:                 break;",
          "9539:             case AMQP_0_9_METHOD_STREAM_DELIVER:",
          "9540:                 dissect_amqp_0_9_method_stream_deliver(tvb,",
          "9541:                                                        11, args_tree);",
          "9542:                 break;",
          "9543:             default:",
          "9544:                 expert_add_info_format(pinfo, amqp_tree, &ei_amqp_unknown_stream_method, \"Unknown stream method %u\", method_id);",
          "9545:             }",
          "9546:             break;",
          "9547:         case AMQP_0_9_CLASS_TX:",
          "9548:             method_id = tvb_get_ntohs(tvb, 9);",
          "9549:             proto_tree_add_item(amqp_tree, hf_amqp_method_tx_method_id,",
          "9550:                                 tvb, 9, 2, ENC_BIG_ENDIAN);",
          "9551:             ti = proto_tree_add_item(amqp_tree, hf_amqp_method_arguments,",
          "9552:                                      tvb, 11, length - 4, ENC_NA);",
          "9553:             args_tree = proto_item_add_subtree(ti, ett_args);",
          "9555:             col_append_fstr(pinfo->cinfo, COL_INFO, \"Tx.%s \",",
          "9556:                             val_to_str( method_id, amqp_method_tx_methods, \"Unknown (%u)\"));",
          "9558:             switch (method_id) {",
          "9559:             case AMQP_0_9_METHOD_TX_SELECT:",
          "9560:                 dissect_amqp_0_9_method_tx_select(tvb,",
          "9561:                                                   11, args_tree);",
          "9562:                 break;",
          "9563:             case AMQP_0_9_METHOD_TX_SELECT_OK:",
          "9564:                 dissect_amqp_0_9_method_tx_select_ok(tvb,",
          "9565:                                                      11, args_tree);",
          "9566:                 break;",
          "9567:             case AMQP_0_9_METHOD_TX_COMMIT:",
          "9568:                 dissect_amqp_0_9_method_tx_commit(tvb,",
          "9569:                                                   11, args_tree);",
          "9570:                 break;",
          "9571:             case AMQP_0_9_METHOD_TX_COMMIT_OK:",
          "9572:                 dissect_amqp_0_9_method_tx_commit_ok(tvb,",
          "9573:                                                      11, args_tree);",
          "9574:                 break;",
          "9575:             case AMQP_0_9_METHOD_TX_ROLLBACK:",
          "9576:                 dissect_amqp_0_9_method_tx_rollback(tvb,",
          "9577:                                                     11, args_tree);",
          "9578:                 break;",
          "9579:             case AMQP_0_9_METHOD_TX_ROLLBACK_OK:",
          "9580:                 dissect_amqp_0_9_method_tx_rollback_ok(tvb,",
          "9581:                                                        11, args_tree);",
          "9582:                 break;",
          "9583:             default:",
          "9584:                 expert_add_info_format(pinfo, amqp_tree, &ei_amqp_unknown_tx_method, \"Unknown tx method %u\", method_id);",
          "9585:             }",
          "9586:             break;",
          "9587:         case AMQP_0_9_CLASS_DTX:",
          "9588:             method_id = tvb_get_ntohs(tvb, 9);",
          "9589:             proto_tree_add_item(amqp_tree, hf_amqp_method_dtx_method_id,",
          "9590:                                 tvb, 9, 2, ENC_BIG_ENDIAN);",
          "9591:             ti = proto_tree_add_item(amqp_tree, hf_amqp_method_arguments,",
          "9592:                                      tvb, 11, length - 4, ENC_NA);",
          "9593:             args_tree = proto_item_add_subtree(ti, ett_args);",
          "9595:             col_append_fstr(pinfo->cinfo, COL_INFO, \"Dtx.%s \",",
          "9596:                             val_to_str( method_id, amqp_method_dtx_methods, \"Unknown (%u)\"));",
          "9598:             switch (method_id) {",
          "9599:             case AMQP_0_9_METHOD_DTX_SELECT:",
          "9600:                 dissect_amqp_0_9_method_dtx_select(tvb,",
          "9601:                                                    11, args_tree);",
          "9602:                 break;",
          "9603:             case AMQP_0_9_METHOD_DTX_SELECT_OK:",
          "9604:                 dissect_amqp_0_9_method_dtx_select_ok(tvb,",
          "9605:                                                       11, args_tree);",
          "9606:                 break;",
          "9607:             case AMQP_0_9_METHOD_DTX_START:",
          "9608:                 dissect_amqp_0_9_method_dtx_start(tvb,",
          "9609:                                                   11, args_tree);",
          "9610:                 break;",
          "9611:             case AMQP_0_9_METHOD_DTX_START_OK:",
          "9612:                 dissect_amqp_0_9_method_dtx_start_ok(tvb,",
          "9613:                                                      11, args_tree);",
          "9614:                 break;",
          "9615:             default:",
          "9616:                 expert_add_info_format(pinfo, amqp_tree, &ei_amqp_unknown_dtx_method, \"Unknown dtx method %u\", method_id);",
          "9617:             }",
          "9618:             break;",
          "9619:         case AMQP_0_9_CLASS_TUNNEL:",
          "9620:             method_id = tvb_get_ntohs(tvb, 9);",
          "9621:             proto_tree_add_item(amqp_tree, hf_amqp_method_tunnel_method_id,",
          "9622:                                 tvb, 9, 2, ENC_BIG_ENDIAN);",
          "9623:             ti = proto_tree_add_item(amqp_tree, hf_amqp_method_arguments,",
          "9624:                                      tvb, 11, length - 4, ENC_NA);",
          "9625:             args_tree = proto_item_add_subtree(ti, ett_args);",
          "9626:             switch (method_id) {",
          "9627:             case AMQP_0_9_METHOD_TUNNEL_REQUEST:",
          "9628:                 dissect_amqp_0_9_method_tunnel_request(tvb,",
          "9629:                                                        pinfo, 11, args_tree);",
          "9630:                 col_append_str(pinfo->cinfo, COL_INFO,",
          "9631:                                \"Tunnel.Request \");",
          "9632:                 break;",
          "9633:             default:",
          "9634:                 expert_add_info_format(pinfo, amqp_tree, &ei_amqp_unknown_tunnel_method, \"Unknown tunnel method %u\", method_id);",
          "9635:             }",
          "9636:             break;",
          "9637:         case AMQP_0_9_CLASS_CONFIRM:",
          "9638:             method_id = tvb_get_ntohs(tvb, 9);",
          "9639:             proto_tree_add_item(amqp_tree, hf_amqp_method_confirm_method_id,",
          "9640:                                 tvb, 9, 2, ENC_BIG_ENDIAN);",
          "9641:             ti = proto_tree_add_item(amqp_tree, hf_amqp_method_arguments,",
          "9642:                                      tvb, 11, length - 4, ENC_NA);",
          "9643:             args_tree = proto_item_add_subtree(ti, ett_args);",
          "9644:             switch (method_id) {",
          "9645:             case AMQP_0_9_METHOD_CONFIRM_SELECT:",
          "9646:                 dissect_amqp_0_9_method_confirm_select(tvb,",
          "9647:                                                        11, args_tree);",
          "9648:                 col_append_str(pinfo->cinfo, COL_INFO,",
          "9649:                                \"Confirm.Select \");",
          "9650:                 break;",
          "9651:             case AMQP_0_9_METHOD_CONFIRM_SELECT_OK:",
          "9652:                 dissect_amqp_0_9_method_confirm_select_ok(channel_num, tvb, pinfo,",
          "9653:                                                           11, args_tree);",
          "9654:                 col_append_str(pinfo->cinfo, COL_INFO,",
          "9655:                                \"Confirm.Select-Ok \");",
          "9656:                 break;",
          "9657:             default:",
          "9658:                 expert_add_info_format(pinfo, amqp_tree, &ei_amqp_unknown_confirm_method, \"Unknown confirm method %u\", method_id);",
          "9659:             }",
          "9660:             break;",
          "9661:         default:",
          "9662:             expert_add_info_format(pinfo, amqp_tree, &ei_amqp_unknown_method_class, \"Unknown method class %u\", class_id);",
          "9663:         }",
          "9664:         break;",
          "9665:     case AMQP_0_9_FRAME_TYPE_CONTENT_HEADER:",
          "9666:         class_id = tvb_get_ntohs(tvb, 7);",
          "9667:         proto_tree_add_item(amqp_tree, hf_amqp_header_class_id,",
          "9668:                             tvb, 7, 2, ENC_BIG_ENDIAN);",
          "9669:         proto_tree_add_item(amqp_tree, hf_amqp_header_weight,",
          "9670:                             tvb, 9, 2, ENC_BIG_ENDIAN);",
          "9671:         proto_tree_add_item(amqp_tree, hf_amqp_header_body_size,",
          "9672:                             tvb, 11, 8, ENC_BIG_ENDIAN);",
          "9673:         proto_tree_add_item(amqp_tree, hf_amqp_header_property_flags,",
          "9674:                             tvb, 19, 2, ENC_BIG_ENDIAN);",
          "9675:         ti = proto_tree_add_item(amqp_tree, hf_amqp_header_properties,",
          "9676:                                  tvb, 21, length - 14, ENC_NA);",
          "9677:         prop_tree = proto_item_add_subtree(ti, ett_props);",
          "9678:         col_append_str(pinfo->cinfo, COL_INFO, \"Content-Header \");",
          "9679:         switch (class_id) {",
          "9680:         case AMQP_0_9_CLASS_BASIC:",
          "9681:             dissect_amqp_0_9_content_header_basic(tvb,",
          "9682:                                                   pinfo, 21, prop_tree);",
          "9683:             break;",
          "9684:         case AMQP_0_9_CLASS_FILE:",
          "9685:             dissect_amqp_0_9_content_header_file(tvb,",
          "9686:                                                  pinfo, 21, prop_tree);",
          "9687:             break;",
          "9688:         case AMQP_0_9_CLASS_STREAM:",
          "9689:             dissect_amqp_0_9_content_header_stream(tvb,",
          "9690:                                                    pinfo, 21, prop_tree);",
          "9691:             break;",
          "9692:         case AMQP_0_9_CLASS_TUNNEL:",
          "9693:             dissect_amqp_0_9_content_header_tunnel(tvb,",
          "9694:                                                    pinfo, 21, prop_tree);",
          "9695:             break;",
          "9696:         default:",
          "9697:             expert_add_info_format(pinfo, amqp_tree, &ei_amqp_unknown_header_class, \"Unknown header class %u\", class_id);",
          "9698:         }",
          "9699:         break;",
          "9700:     case AMQP_0_9_FRAME_TYPE_CONTENT_BODY:",
          "9701:         proto_tree_add_item(amqp_tree, hf_amqp_payload,",
          "9702:                             tvb, 7, length, ENC_NA);",
          "9703:         col_append_str(pinfo->cinfo, COL_INFO, \"Content-Body \");",
          "9704:         break;",
          "9705:     case AMQP_0_9_FRAME_TYPE_HEARTBEAT:",
          "9706:         col_append_str(pinfo->cinfo, COL_INFO,",
          "9707:                        \"Heartbeat \");",
          "9708:         break;",
          "9709:     default:",
          "9710:         expert_add_info_format(pinfo, amqp_tree, &ei_amqp_unknown_frame_type, \"Unknown frame type %u\", frame_type);",
          "9713:     col_set_fence(pinfo->cinfo, COL_INFO);",
          "9714:     return tvb_reported_length(tvb);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "10658:                              packet_info *pinfo,",
          "10659:                              guint8 code,",
          "10660:                              int offset,",
          "10662:                              int hf_amqp_type,",
          "10663:                              const char *name,",
          "10664:                              guint32 hf_amqp_subtype_count,",
          "",
          "[Removed Lines]",
          "10661:                              int bound,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "10701:         {",
          "10705:                                                    element_type->known_size,",
          "10706:                                                    item, hf_amqp_type);",
          "10707:         }",
          "",
          "[Removed Lines]",
          "10704:                                                    offset, bound,",
          "",
          "[Added Lines]",
          "9929:                                                    offset,",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "10750:                                                      pinfo,",
          "10753:                                                      item,",
          "10754:                                                      hf_amqp_type,",
          "10755:                                                      hf_amqp_subtype_count,",
          "",
          "[Removed Lines]",
          "10752:                                                      bound,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "10758:             case AMQP_1_0_TYPE_MAP8:",
          "10759:             case AMQP_1_0_TYPE_MAP32:",
          "10762:                 break;",
          "10763:             case AMQP_1_0_TYPE_ARRAY8:",
          "10764:             case AMQP_1_0_TYPE_ARRAY32:",
          "10766:                                                       pinfo,",
          "10769:                                                       item,",
          "10770:                                                       hf_amqp_type,",
          "10771:                                                       hf_amqp_subtype_count,",
          "",
          "[Removed Lines]",
          "10768:                                                       bound,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "10791: static guint",
          "10792: get_amqp_1_0_type_formatter(tvbuff_t *tvb,",
          "10793:                             int offset,",
          "10795:                             int *hf_amqp_type,",
          "10796:                             const char **name,",
          "10797:                             guint32 *hf_amqp_subtype_count,",
          "",
          "[Removed Lines]",
          "10794:                             int bound,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "10805:     guint  orig_offset = offset;",
          "10807:     code = tvb_get_guint8(tvb, offset);",
          "10809:     if (code == AMQP_1_0_TYPE_DESCRIPTOR_CONSTRUCTOR) {",
          "10810:         format_code_type = tvb_get_guint8(tvb, offset);",
          "10814:         }",
          "10815:         switch (format_code_type/16) {",
          "",
          "[Removed Lines]",
          "10808:     AMQP_INCREMENT(offset, 1, bound);",
          "10811:         AMQP_INCREMENT(offset, 1, bound);",
          "10813:             AMQP_INCREMENT(offset, 1, bound);",
          "",
          "[Added Lines]",
          "10030:     offset += 1;",
          "10033:         offset += 1;",
          "10035:             offset += 1;",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "10840:             break;",
          "10843:             break;",
          "10846:             break;",
          "10848:         }",
          "10850:         for (i = 0; amqp_1_0_defined_types[i].format_code != 0x00; ++i) {",
          "10851:             if (amqp_1_0_defined_types[i].format_code == code) {",
          "",
          "[Removed Lines]",
          "10842:             format_len = format_amqp_1_0_str(tvb, offset, bound, 1, name);",
          "10845:             format_len = format_amqp_1_0_str(tvb, offset, bound, 4, name);",
          "10849:         AMQP_INCREMENT(offset, format_len, bound);",
          "",
          "[Added Lines]",
          "10064:             format_len = format_amqp_1_0_str(tvb, offset, 1, name);",
          "10067:             format_len = format_amqp_1_0_str(tvb, offset, 4, name);",
          "10071:         offset += format_len;",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "10856:         }",
          "10858:         code = tvb_get_guint8(tvb, offset);",
          "10860:     }",
          "10862:     return code;",
          "",
          "[Removed Lines]",
          "10859:         AMQP_INCREMENT(offset, 1, bound);",
          "",
          "[Added Lines]",
          "10081:         offset += 1;",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "10870: get_amqp_1_0_type_value_formatter(tvbuff_t *tvb,",
          "10871:                                   packet_info *pinfo,",
          "10872:                                   int offset,",
          "",
          "[Removed Lines]",
          "10873:                                   int bound,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "10886:     code = get_amqp_1_0_type_formatter(tvb,",
          "10887:                                        offset,",
          "10889:                                        &hf_amqp_type,",
          "10890:                                        &type_name,",
          "10891:                                        &hf_amqp_subtype_count,",
          "",
          "[Removed Lines]",
          "10888:                                        bound,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "10902:         format_name = wmem_strdup_printf(wmem_packet_scope(), \"%s : %s\", name, type_name);",
          "10903:       }",
          "10904:     }",
          "10906:     get_amqp_1_0_value_formatter(tvb,",
          "10907:                                  pinfo,",
          "10908:                                  code,",
          "10909:                                  offset,",
          "10911:                                  hf_amqp_type,",
          "10912:                                  format_name,",
          "10913:                                  hf_amqp_subtype_count,",
          "",
          "[Removed Lines]",
          "10905:     AMQP_INCREMENT(offset, type_length_size, bound);",
          "10910:                                  bound,",
          "",
          "[Added Lines]",
          "10125:     offset += type_length_size;",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "10930: static int",
          "10931: dissect_amqp_1_0_fixed(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "10933:                        proto_item *item, int hf_amqp_type)",
          "10934: {",
          "10935:     proto_tree_add_item(item, hf_amqp_type, tvb, offset, length, ENC_BIG_ENDIAN);",
          "",
          "[Removed Lines]",
          "10932:                        guint offset, guint bound _U_, guint length,",
          "",
          "[Added Lines]",
          "10151:                        guint offset, guint length,",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "10939: static int",
          "10940: dissect_amqp_1_0_variable(tvbuff_t *tvb, packet_info *pinfo,",
          "10942:                           proto_item *item, int hf_amqp_type)",
          "10943: {",
          "10944:     guint bin_length;",
          "",
          "[Removed Lines]",
          "10941:                           guint offset, guint bound, guint length,",
          "",
          "[Added Lines]",
          "10160:                           guint offset, guint length,",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "10952:                                \"Invalid size of length indicator %d!\", length);",
          "10953:         return length;",
          "10954:     }",
          "10957:     proto_tree_add_item(item, hf_amqp_type, tvb, offset, bin_length, ENC_NA);",
          "10958:     return length+bin_length;",
          "",
          "[Removed Lines]",
          "10955:     AMQP_INCREMENT(offset, length, bound);",
          "",
          "[Added Lines]",
          "10174:     offset += length;",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "10961: static int",
          "10962: dissect_amqp_1_0_timestamp(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "10964:                            proto_item *item, int hf_amqp_type)",
          "10965: {",
          "10966:     nstime_t nstime;",
          "",
          "[Removed Lines]",
          "10963:                            guint offset, guint bound _U_, guint length,",
          "",
          "[Added Lines]",
          "10182:                            guint offset, guint length,",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "10973: static int",
          "10974: dissect_amqp_1_0_skip(tvbuff_t *tvb _U_, packet_info *pinfo _U_,",
          "10976:                       proto_item *item _U_, int hf_amqp_type _U_)",
          "10977: {",
          "",
          "[Removed Lines]",
          "10975:                       guint offset _U_, guint bound _U_, guint length _U_,",
          "",
          "[Added Lines]",
          "10194:                       guint offset _U_, guint length _U_,",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "10982: static int",
          "10983: dissect_amqp_1_0_zero(tvbuff_t *tvb, packet_info *pinfo,",
          "10985:                       proto_item *item, int hf_amqp_type)",
          "10986: {",
          "10987:     switch(proto_registrar_get_ftype(hf_amqp_type))",
          "",
          "[Removed Lines]",
          "10984:                       guint offset, guint bound _U_, guint length _U_,",
          "",
          "[Added Lines]",
          "10203:                       guint offset, guint length _U_,",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "11023: static int",
          "11024: dissect_amqp_1_0_true(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "11026:                       proto_item *item, int hf_amqp_type)",
          "11027: {",
          "11028:     proto_tree_add_boolean(item, hf_amqp_type, tvb, offset-1, 1, TRUE);",
          "",
          "[Removed Lines]",
          "11025:                       guint offset, guint bound _U_, guint length _U_,",
          "",
          "[Added Lines]",
          "10244:                       guint offset, guint length _U_,",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "11032: static int",
          "11033: dissect_amqp_1_0_false(tvbuff_t *tvb, packet_info *pinfo _U_,",
          "11035:                        proto_item *item, int hf_amqp_type)",
          "11036: {",
          "11037:     proto_tree_add_boolean(item, hf_amqp_type, tvb, offset-1, 1, FALSE);",
          "",
          "[Removed Lines]",
          "11034:                        guint offset, guint bound _U_, guint length _U_,",
          "",
          "[Added Lines]",
          "10253:                        guint offset, guint length _U_,",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "11041: static int",
          "11042: format_amqp_1_0_null(tvbuff_t *tvb _U_,",
          "11044:                       const char **value)",
          "11045: {",
          "",
          "[Removed Lines]",
          "11043:                       guint offset _U_, guint bound _U_, guint length _U_,",
          "",
          "[Added Lines]",
          "10262:                       guint offset _U_, guint length _U_,",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "11050: static int",
          "11051: format_amqp_1_0_boolean_true(tvbuff_t *tvb _U_,",
          "11053:                         const char **value)",
          "11054: {",
          "",
          "[Removed Lines]",
          "11052:                         guint offset _U_, guint bound _U_, guint length _U_,",
          "",
          "[Added Lines]",
          "10271:                         guint offset _U_, guint length _U_,",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "11059: static int",
          "11060: format_amqp_1_0_boolean_false(tvbuff_t *tvb _U_,",
          "11062:                         const char **value)",
          "11063: {",
          "",
          "[Removed Lines]",
          "11061:                         guint offset _U_, guint bound _U_, guint length _U_,",
          "",
          "[Added Lines]",
          "10280:                         guint offset _U_, guint length _U_,",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "11068: static int",
          "11069: format_amqp_1_0_boolean(tvbuff_t *tvb,",
          "11071:                         const char **value)",
          "11072: {",
          "11073:     guint8 val;",
          "",
          "[Removed Lines]",
          "11070:                         guint offset, guint bound _U_, guint length _U_,",
          "",
          "[Added Lines]",
          "10289:                         guint offset, guint length _U_,",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "11081: static int",
          "11082: format_amqp_1_0_uint(tvbuff_t *tvb,",
          "11084:                      const char **value)",
          "11085: {",
          "11086:     guint64 val;",
          "",
          "[Removed Lines]",
          "11083:                      guint offset, guint bound _U_, guint length,",
          "",
          "[Added Lines]",
          "10302:                      guint offset, guint length,",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "11107: static int",
          "11108: format_amqp_1_0_int(tvbuff_t *tvb,",
          "11110:                     const char **value)",
          "11111: {",
          "11112:     gint64 val;",
          "",
          "[Removed Lines]",
          "11109:                     guint offset, guint bound _U_, guint length,",
          "",
          "[Added Lines]",
          "10328:                     guint offset, guint length,",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "11128: }",
          "11130: static int",
          "11133:                       const char **value)",
          "11134: {",
          "11135:     float floatval;",
          "",
          "[Removed Lines]",
          "11131: format_amqp_1_0_float(tvbuff_t *tvb,",
          "11132:                       guint offset, guint bound _U_, guint length _U_,",
          "",
          "[Added Lines]",
          "10350: format_amqp_1_0_float(tvbuff_t *tvb, guint offset, guint length _U_,",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "11139: }",
          "11141: static int",
          "11144:                        const char **value)",
          "11145: {",
          "11146:     double doubleval;",
          "",
          "[Removed Lines]",
          "11142: format_amqp_1_0_double(tvbuff_t *tvb,",
          "11143:                        guint offset, guint bound _U_, guint length _U_,",
          "",
          "[Added Lines]",
          "10360: format_amqp_1_0_double(tvbuff_t *tvb, guint offset, guint length _U_,",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "11150: }",
          "11152: static int",
          "11155:                         const char **value)",
          "11156: {",
          "",
          "[Removed Lines]",
          "11153: format_amqp_1_0_decimal(tvbuff_t *tvb _U_,",
          "11154:                         guint offset _U_, guint bound _U_, guint length,",
          "",
          "[Added Lines]",
          "10370: format_amqp_1_0_decimal(tvbuff_t *tvb _U_, guint offset _U_, guint length,",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "11162: }",
          "11164: static int",
          "11167:                      const char **value)",
          "11168: {",
          "",
          "[Removed Lines]",
          "11165: format_amqp_1_0_char(tvbuff_t *tvb,",
          "11166:                      guint offset, guint bound _U_, guint length _U_,",
          "",
          "[Added Lines]",
          "10381: format_amqp_1_0_char(tvbuff_t *tvb, guint offset, guint length _U_,",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "11172: }",
          "11174: static int",
          "11177:                           const char **value)",
          "11178: {",
          "11179:     nstime_t nstime;",
          "",
          "[Removed Lines]",
          "11175: format_amqp_1_0_timestamp(tvbuff_t *tvb,",
          "11176:                           guint offset, guint bound _U_, guint length _U_,",
          "",
          "[Added Lines]",
          "10390: format_amqp_1_0_timestamp(tvbuff_t *tvb, guint offset, guint length _U_,",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "11184: }",
          "11186: static int",
          "11189:                      const char **value)",
          "11190: {",
          "11191:     e_guid_t uuid;",
          "",
          "[Removed Lines]",
          "11187: format_amqp_1_0_uuid(tvbuff_t *tvb,",
          "11188:                      guint offset, guint bound _U_, guint length _U_,",
          "",
          "[Added Lines]",
          "10401: format_amqp_1_0_uuid(tvbuff_t *tvb, guint offset, guint length _U_,",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "11197: static int",
          "11198: format_amqp_1_0_bin(tvbuff_t *tvb,",
          "11200:                     const char **value)",
          "11201: {",
          "11202:     guint bin_length;",
          "",
          "[Removed Lines]",
          "11199:                     guint offset, guint bound, guint length,",
          "",
          "[Added Lines]",
          "10412:                     guint offset, guint length,",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "11210:         return length;",
          "11211:     }",
          "11214:     return (length+bin_length);",
          "11215: }",
          "11217: static int",
          "11218: format_amqp_1_0_str(tvbuff_t *tvb,",
          "11220:                     const char **value)",
          "11221: {",
          "11222:     guint string_length;",
          "",
          "[Removed Lines]",
          "11212:     AMQP_INCREMENT(offset, length, bound);",
          "11219:                     guint offset, guint bound, guint length,",
          "",
          "[Added Lines]",
          "10425:     offset += length;",
          "10432:                     guint offset, guint length,",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "11230:         return length;",
          "11231:     }",
          "11235:     return (string_length + length);",
          "11236: }",
          "11238: static int",
          "11239: format_amqp_1_0_symbol(tvbuff_t *tvb,",
          "11241:                        const char **value)",
          "11242: {",
          "11243:     guint symbol_length;",
          "",
          "[Removed Lines]",
          "11232:     AMQP_INCREMENT(offset, length, bound);",
          "11234:     AMQP_INCREMENT(offset, string_length, bound);",
          "11240:                        guint offset, guint bound, guint length,",
          "",
          "[Added Lines]",
          "10445:     offset += length;",
          "10453:                        guint offset, guint length,",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "11250:         return length;",
          "11251:     }",
          "11255:     return (symbol_length + length);",
          "11256: }",
          "",
          "[Removed Lines]",
          "11252:     AMQP_INCREMENT(offset, length, bound);",
          "11254:     AMQP_INCREMENT(offset, symbol_length, bound);",
          "",
          "[Added Lines]",
          "10465:     offset += length;",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "11285: static int",
          "11286: format_amqp_0_10_bin(tvbuff_t *tvb,",
          "11288:                      const char **value)",
          "11289: {",
          "",
          "[Removed Lines]",
          "11287:                      guint offset, guint bound _U_, guint length,",
          "",
          "[Added Lines]",
          "10500:                      guint offset, guint length,",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "11294: static int",
          "11295: format_amqp_0_10_int(tvbuff_t *tvb,",
          "11297:                      const char **value)",
          "11298: {",
          "11299:     int val;",
          "",
          "[Removed Lines]",
          "11296:                      guint offset, guint bound _U_, guint length,",
          "",
          "[Added Lines]",
          "10509:                      guint offset, guint length,",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "11315: static int",
          "11316: format_amqp_0_10_uint(tvbuff_t *tvb,",
          "11318:                       const char **value)",
          "11319: {",
          "11320:     unsigned int val;",
          "",
          "[Removed Lines]",
          "11317:                       guint offset, guint bound _U_, guint length,",
          "",
          "[Added Lines]",
          "10530:                       guint offset, guint length,",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "11336: static int",
          "11337: format_amqp_0_10_char(tvbuff_t *tvb,",
          "11339:                       const char **value)",
          "11340: {",
          "",
          "[Removed Lines]",
          "11338:                       guint offset, guint bound _U_, guint length _U_,",
          "",
          "[Added Lines]",
          "10551:                       guint offset, guint length _U_,",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "11345: static int",
          "11346: format_amqp_0_10_boolean(tvbuff_t *tvb,",
          "11348:                          const char **value)",
          "11349: {",
          "11350:     guint8 val;",
          "",
          "[Removed Lines]",
          "11347:                          guint offset, guint bound _U_, guint length _U_,",
          "",
          "[Added Lines]",
          "10560:                          guint offset, guint length _U_,",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "11357: static int",
          "11358: format_amqp_0_10_vbin(tvbuff_t *tvb,",
          "11360:                       const char **value)",
          "11361: {",
          "11362:     guint bin_length;",
          "",
          "[Removed Lines]",
          "11359:                       guint offset, guint bound, guint length,",
          "",
          "[Added Lines]",
          "10572:                       guint offset, guint length,",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "11372:         return length;",
          "11373:     }",
          "11377:     return (bin_length + length);",
          "11378: }",
          "11380: static int",
          "11381: format_amqp_0_10_str(tvbuff_t *tvb,",
          "11383:                      const char **value)",
          "11384: {",
          "11385:     guint string_length;",
          "",
          "[Removed Lines]",
          "11374:     AMQP_INCREMENT(offset, length, bound);",
          "11376:     AMQP_INCREMENT(offset, bin_length, bound);",
          "11382:                      guint offset, guint bound, guint length,",
          "",
          "[Added Lines]",
          "10587:     offset += length;",
          "10595:                      guint offset, guint length,",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "11395:         return length;",
          "11396:     }",
          "11400:     return (string_length + length);",
          "11401: }",
          "",
          "[Removed Lines]",
          "11397:     AMQP_INCREMENT(offset, length, bound);",
          "11399:     AMQP_INCREMENT(offset, string_length, bound);",
          "",
          "[Added Lines]",
          "10610:     offset += length;",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "11404: format_amqp_0_10_sequence_set(tvbuff_t *tvb, guint offset, guint length,",
          "11405:                               proto_item *item)",
          "11406: {",
          "11410:     if ((length % 4) != 0) {",
          "",
          "[Removed Lines]",
          "11407:     gint values;",
          "",
          "[Added Lines]",
          "10620:     guint i, values;",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "11419:                                values);",
          "11420:     }",
          "11421:     proto_item_append_text(item, \" [\");",
          "11423:         proto_item_append_text(item, \"(%u, %u)%s\",",
          "11424:                                tvb_get_ntohl(tvb, offset),",
          "11425:                                tvb_get_ntohl(tvb, offset + 4),",
          "11427:         offset += 8;",
          "11429:     }",
          "11430:     proto_item_append_text(item, \"]\");",
          "11431: }",
          "11435: void",
          "",
          "[Removed Lines]",
          "11422:     while(values > 0) {",
          "11426:                                values > 2 ? \", \" : \"\");",
          "11428:         values -= 2;",
          "",
          "[Added Lines]",
          "10635:     for (i = 0; i < values; i += 2) {",
          "10639:                                (i < (values - 2)) ? \", \" : \"\");",
          "10641:         length -= 8;",
          "10648: static int",
          "10649: dissect_amqp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "10650: {",
          "10651:     conversation_t *conv;",
          "10652:     amqp_conv *conn;",
          "10654:     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"AMQP\");",
          "10655:     col_clear(pinfo->cinfo, COL_INFO);",
          "10658:     if (tvb_reported_length (tvb) < 8) {",
          "10660:         pinfo->desegment_len = DESEGMENT_ONE_MORE_SEGMENT;",
          "10662:     }",
          "10665:     conv = find_or_create_conversation(pinfo);",
          "10666:     conn = (amqp_conv *)conversation_get_proto_data(conv, proto_amqp);",
          "10667:     if (conn == NULL) {",
          "10668:         conn = wmem_new0(wmem_file_scope(), amqp_conv);",
          "10669:         conn->channels = wmem_map_new(wmem_file_scope(), g_direct_hash, g_direct_equal);",
          "10670:         conversation_add_proto_data(conv, proto_amqp, conn);",
          "10671:     }",
          "10672:     check_amqp_version(tvb, conn);",
          "10673:     switch(conn->version) {",
          "10674:     case AMQP_V0_9:",
          "10675:         tcp_dissect_pdus(tvb, pinfo, tree, TRUE, 7, get_amqp_0_9_message_len,",
          "10676:                          dissect_amqp_0_9_frame, data);",
          "10677:         break;",
          "10678:     case AMQP_V0_10:",
          "10679:         tcp_dissect_pdus(tvb, pinfo, tree, TRUE, 8, get_amqp_0_10_message_len,",
          "10680:                          dissect_amqp_0_10_frame, data);",
          "10681:         break;",
          "10682:     case AMQP_V1_0:",
          "10683:         tcp_dissect_pdus(tvb, pinfo, tree, TRUE, 8, get_amqp_1_0_message_len,",
          "10684:                          dissect_amqp_1_0_frame, data);",
          "10685:         break;",
          "10686:     default:",
          "10687:         col_append_str(pinfo->cinfo, COL_INFO, \"AMQP (unknown version)\");",
          "10688:         col_set_fence(pinfo->cinfo, COL_INFO);",
          "10689:         break;",
          "10690:     }",
          "10692:     return tvb_captured_length(tvb);",
          "10693: }",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "12082:             \"Implementation-specific xid format code\", HFILL}},",
          "12083:         {&hf_amqp_0_10_dtx_xid_global_id, {",
          "12084:             \"Global-id\", \"amqp.dtx.xid.global-id\",",
          "12086:             \"Global transaction id\", HFILL}},",
          "12087:         {&hf_amqp_0_10_dtx_xid_branch_id, {",
          "12088:             \"Branch-id\", \"amqp.dtx.xid.branch-id\",",
          "12090:             \"Transaction branch qualifier\", HFILL}},",
          "12095:         {&hf_amqp_0_10_struct_delivery_properties_discard_unroutable, {",
          "12096:             \"Discard-unroutable\", \"amqp.message.delivery-properties.discard-unroutable\",",
          "12097:             FT_BOOLEAN, 8, TFS(&tfs_yes_no), 0x01,",
          "",
          "[Removed Lines]",
          "12085:             FT_BYTES, BASE_NONE, NULL, 0x0,",
          "12089:             FT_BYTES, BASE_NONE, NULL, 0x0,",
          "12091:         {&hf_amqp_0_10_undissected_struct32, {",
          "12092:             \"(undissected struct)\", \"amqp.undissected\",",
          "12093:             FT_NONE, BASE_NONE, NULL, 0x0,",
          "12094:             \"Message header struct not yet dissected\", HFILL}},",
          "",
          "[Added Lines]",
          "11347:             FT_UINT_BYTES, BASE_NONE, NULL, 0x0,",
          "11351:             FT_UINT_BYTES, BASE_NONE, NULL, 0x0,",
          "11353:         {&hf_amqp_0_10_struct32_size, {",
          "11354:             \"Size\", \"amqp.struct32_size\",",
          "11355:             FT_UINT32, BASE_DEC, NULL, 0x0,",
          "11356:             NULL, HFILL}},",
          "11357:         {&hf_amqp_0_10_struct32, {",
          "11358:             \"struct\", \"amqp.struct32\",",
          "11359:             FT_UINT16, BASE_HEX, VALS(amqp_0_10_struct32_vals), 0x0,",
          "11360:             NULL, HFILL}},",
          "11361:         {&hf_amqp_0_10_struct32_class, {",
          "11362:             \"Class\", \"amqp.struct32.class\",",
          "11363:             FT_UINT8, BASE_DEC, VALS(amqp_0_10_class), 0x0,",
          "11364:             NULL, HFILL}},",
          "11365:         {&hf_amqp_0_10_struct32_struct, {",
          "11366:             \"Struct\", \"amqp.struct32.struct\",",
          "11367:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "11368:             NULL, HFILL}},",
          "11369:         {&hf_amqp_0_10_struct32_padding, {",
          "11370:             \"Padding\", \"amqp.struct32.padding\",",
          "11371:             FT_BYTES, BASE_NONE, NULL, 0x0,",
          "11372:             NULL, HFILL}},",
          "11373:         {&hf_amqp_0_10_array_type, {",
          "11374:             \"Type\", \"amqp.array.type\",",
          "11375:             FT_UINT8, BASE_DEC, VALS(amqp_0_10_array_type_vals), 0x0,",
          "11376:             NULL, HFILL}},",
          "11377:         {&hf_amqp_0_10_array_element_count, {",
          "11378:             \"Element count\", \"amqp.array.element_count\",",
          "11379:             FT_UINT32, BASE_DEC, NULL, 0x0,",
          "11380:             NULL, HFILL}},",
          "11381:         {&hf_amqp_0_10_array_string, {",
          "11382:             \"String\", \"amqp.array.string\",",
          "11383:             FT_UINT_STRING, BASE_NONE, NULL, 0x0,",
          "11384:             NULL, HFILL}},",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "12126:             \"Expiration time calculated by broker\", HFILL}},",
          "12127:         {&hf_amqp_0_10_struct_delivery_properties_exchange, {",
          "12128:             \"Exchange\", \"amqp.message.delivery-properties.exchange\",",
          "12130:             \"Originating exchange\", HFILL}},",
          "12131:         {&hf_amqp_0_10_struct_delivery_properties_routing_key, {",
          "12132:             \"Routing-key\", \"amqp.message.delivery-properties.routing-key\",",
          "12134:             \"Message routing key\", HFILL}},",
          "12135:         {&hf_amqp_0_10_struct_delivery_properties_resume_ttl, {",
          "12136:             \"Resume-ttl\", \"amqp.message.delivery-properties.resume-ttl\",",
          "",
          "[Removed Lines]",
          "12129:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "12133:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "",
          "[Added Lines]",
          "11419:             FT_UINT_STRING, BASE_NONE, NULL, 0x0,",
          "11423:             FT_UINT_STRING, BASE_NONE, NULL, 0x0,",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "12164:             NULL, HFILL}},",
          "12165:         {&hf_amqp_0_10_struct_message_properties_correlation, {",
          "12166:             \"Correlation-id\", \"amqp.message.message-properties.correlation-id\",",
          "12168:             NULL, HFILL}},",
          "12169:         {&hf_amqp_0_10_struct_message_properties_reply_to, {",
          "12170:             \"Reply-to\", \"amqp.message.message-properties.reply-to\",",
          "",
          "[Removed Lines]",
          "12167:             FT_BYTES, BASE_NONE, NULL, 0x0,",
          "",
          "[Added Lines]",
          "11457:             FT_UINT_BYTES, BASE_NONE, NULL, 0x0,",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "12172:             \"Address to reply to\", HFILL}},",
          "12173:         {&hf_amqp_0_10_struct_message_properties_content_type, {",
          "12174:             \"Content-type\", \"amqp.message.message-properties.content-type\",",
          "12176:             \"MIME content type\", HFILL}},",
          "12177:         {&hf_amqp_0_10_struct_message_properties_content_encoding, {",
          "12178:             \"Content-encoding\", \"amqp.message.message-properties.content-encoding\",",
          "12180:             \"MIME content encoding method\", HFILL}},",
          "12181:         {&hf_amqp_0_10_struct_message_properties_user_id, {",
          "12182:             \"User-id\", \"amqp.message.message-properties.user-id\",",
          "12184:             \"Creating user id\", HFILL}},",
          "12185:         {&hf_amqp_0_10_struct_message_properties_app_id, {",
          "12186:             \"App-id\", \"amqp.message.message-properties.app-id\",",
          "12188:             \"Creating user id\", HFILL}},",
          "12189:         {&hf_amqp_0_10_struct_message_properties_application_headers, {",
          "12190:             \"Application-headers\", \"amqp.message.message-properties.application-headers\",",
          "",
          "[Removed Lines]",
          "12175:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "12179:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "12183:             FT_BYTES, BASE_NONE, NULL, 0x0,",
          "12187:             FT_BYTES, BASE_NONE, NULL, 0x0,",
          "",
          "[Added Lines]",
          "11465:             FT_UINT_STRING, BASE_NONE, NULL, 0x0,",
          "11469:             FT_UINT_STRING, BASE_NONE, NULL, 0x0,",
          "11473:             FT_UINT_BYTES, BASE_NONE, NULL, 0x0,",
          "11477:             FT_UINT_BYTES, BASE_NONE, NULL, 0x0,",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "12192:             \"Application-private headers\", HFILL}},",
          "12193:         {&hf_amqp_0_10_struct_reply_to_exchange, {",
          "12194:             \"Exchange\", \"amqp.message.message-properties.reply-to.exchange\",",
          "12196:             \"Exchange to reply to\", HFILL}},",
          "12197:         {&hf_amqp_0_10_struct_reply_to_routing_key, {",
          "12198:             \"Routing-key\", \"amqp.message.message-properties.reply-to.routing-key\",",
          "12200:             \"Routing key to reply with\", HFILL}},",
          "12201:         {&hf_amqp_0_10_struct_acquired_transfers, {",
          "12202:             \"Transfers\", \"amqp.message.acquired.transfers\",",
          "",
          "[Removed Lines]",
          "12195:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "12199:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "",
          "[Added Lines]",
          "11485:             FT_UINT_STRING, BASE_NONE, NULL, 0x0,",
          "11489:             FT_UINT_STRING, BASE_NONE, NULL, 0x0,",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "12256:             \"Number of subscribers for the queue\", HFILL}},",
          "12257:         {&hf_amqp_0_10_struct_file_properties_content_type, {",
          "12258:             \"Content-type\", \"amqp.file.file-properties.content-type\",",
          "12260:             \"MIME content type\", HFILL}},",
          "12261:         {&hf_amqp_0_10_struct_file_properties_content_encoding, {",
          "12262:             \"Content-encoding\", \"amqp.file.file-properties.content-encoding\",",
          "12264:             \"MIME content encoding\", HFILL}},",
          "12265:         {&hf_amqp_0_10_struct_file_properties_headers, {",
          "12266:             \"Headers\", \"amqp.file.file-properties.headers\",",
          "",
          "[Removed Lines]",
          "12259:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "12263:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "",
          "[Added Lines]",
          "11549:             FT_UINT_STRING, BASE_NONE, NULL, 0x0,",
          "11553:             FT_UINT_STRING, BASE_NONE, NULL, 0x0,",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "12272:             \"Message priority, 0 to 9\", HFILL}},",
          "12273:         {&hf_amqp_0_10_struct_file_properties_reply_to, {",
          "12274:             \"Reply-to\", \"amqp.file.file-properties.reply-to\",",
          "12276:             \"Destination to reply to\", HFILL}},",
          "12277:         {&hf_amqp_0_10_struct_file_properties_message_id, {",
          "12278:             \"Message-id\", \"amqp.file.file-properties.message-id\",",
          "12280:             \"Application message identifier\", HFILL}},",
          "12281:         {&hf_amqp_0_10_struct_file_properties_filename, {",
          "12282:             \"Filename\", \"amqp.file.file-properties.filename\",",
          "12284:             \"Message filename\", HFILL}},",
          "12285:         {&hf_amqp_0_10_struct_file_properties_timestamp, {",
          "12286:             \"Timestamp\", \"amqp.file.file-properties.timestamp\",",
          "",
          "[Removed Lines]",
          "12275:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "12279:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "12283:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "",
          "[Added Lines]",
          "11565:             FT_UINT_STRING, BASE_NONE, NULL, 0x0,",
          "11569:             FT_UINT_STRING, BASE_NONE, NULL, 0x0,",
          "11573:             FT_UINT_STRING, BASE_NONE, NULL, 0x0,",
          "",
          "---------------",
          "--- Hunk 104 ---",
          "[Context before]",
          "12288:             \"Message timestamp\", HFILL}},",
          "12289:         {&hf_amqp_0_10_struct_file_properties_cluster_id, {",
          "12290:             \"Cluster-id\", \"amqp.file.file-properties.cluster-id\",",
          "12292:             \"Intra-cluster routing identifier\", HFILL}},",
          "12293:         {&hf_amqp_0_10_struct_stream_properties_content_type, {",
          "12294:             \"Content-type\", \"amqp.stream.stream-properties.content-type\",",
          "12296:             \"MIME content type\", HFILL}},",
          "12297:         {&hf_amqp_0_10_struct_stream_properties_content_encoding, {",
          "12298:             \"Content-encoding\", \"amqp.stream.stream-properties.content-encoding\",",
          "12300:             \"MIME content encoding\", HFILL}},",
          "12301:         {&hf_amqp_0_10_struct_stream_properties_headers, {",
          "12302:             \"Headers\", \"amqp.stream.stream-properties.headers\",",
          "",
          "[Removed Lines]",
          "12291:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "12295:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "12299:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "",
          "[Added Lines]",
          "11581:             FT_UINT_STRING, BASE_NONE, NULL, 0x0,",
          "11585:             FT_UINT_STRING, BASE_NONE, NULL, 0x0,",
          "11589:             FT_UINT_STRING, BASE_NONE, NULL, 0x0,",
          "",
          "---------------",
          "--- Hunk 105 ---",
          "[Context before]",
          "12323:             FT_BOOLEAN, 8, TFS(&amqp_0_10_session_header_sync), 0x01,",
          "12324:             \"Sync requested\", HFILL}},",
          "12325:         {&hf_amqp_0_10_method_session_attach_name, {",
          "12327:             FT_BYTES, BASE_NONE, NULL, 0x0,",
          "12329:         {&hf_amqp_0_10_method_session_attach_force, {",
          "12331:             FT_BOOLEAN, 8, TFS(&tfs_yes_no), 0x02,",
          "12333:         {&hf_amqp_0_10_method_session_detached_code, {",
          "12334:             \"Code\", \"amqp.session.detached.code\",",
          "12335:             FT_UINT8, BASE_DEC, VALS(amqp_0_10_method_session_detached_codes), 0x0,",
          "",
          "[Removed Lines]",
          "12326:             \"Name\", \"amqp.session.attach.name\",",
          "12328:             \"Session name\", HFILL}},",
          "12330:             \"Force\", \"amqp.session.attach.force\",",
          "12332:             \"Session forced\", HFILL}},",
          "",
          "[Added Lines]",
          "11616:             \"Session Name\", \"amqp.session.attach.name\",",
          "11618:             NULL, HFILL}},",
          "11619:         {&hf_amqp_0_10_method_session_attach_name_size, {",
          "11620:             \"Size\", \"amqp.session.attach.name.size\",",
          "11621:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "11622:             NULL, HFILL}},",
          "11624:             \"Session forced\", \"amqp.session.attach.force\",",
          "11626:             NULL, HFILL}},",
          "",
          "---------------",
          "--- Hunk 106 ---",
          "[Context before]",
          "12384:             \"0-based index of exceptional field\", HFILL}},",
          "12385:         {&hf_amqp_0_10_method_execution_description, {",
          "12386:             \"Description\", \"amqp.execution.exception.description\",",
          "12388:             \"Description of exception\", HFILL}},",
          "12389:         {&hf_amqp_0_10_method_execution_error_info, {",
          "12390:             \"Error-info\", \"amqp.execution.exception.error-info\",",
          "",
          "[Removed Lines]",
          "12387:             FT_STRING, BASE_NONE, NULL, 0,",
          "",
          "[Added Lines]",
          "11681:             FT_UINT_STRING, BASE_NONE, NULL, 0,",
          "",
          "---------------",
          "--- Hunk 107 ---",
          "[Context before]",
          "12392:             \"client-properties\", HFILL}},",
          "12393:         {&hf_amqp_0_10_method_message_transfer_destination, {",
          "12394:             \"Description\", \"amqp.message.transfer.destination\",",
          "12396:             \"Message destination\", HFILL}},",
          "12397:         {&hf_amqp_0_10_method_message_transfer_accept_mode, {",
          "12398:             \"Accept-mode\", \"amqp.message.transfer.accept-mode\",",
          "",
          "[Removed Lines]",
          "12395:             FT_STRING, BASE_NONE, NULL, 0,",
          "",
          "[Added Lines]",
          "11689:             FT_UINT_STRING, BASE_NONE, NULL, 0,",
          "",
          "---------------",
          "--- Hunk 108 ---",
          "[Context before]",
          "12412:             \"Message reject code\", HFILL}},",
          "12413:         {&hf_amqp_0_10_method_message_reject_text, {",
          "12414:             \"Text\", \"amqp.message.reject.text\",",
          "12416:             \"Reject description\", HFILL}},",
          "12417:         {&hf_amqp_0_10_method_message_release_set_redelivered, {",
          "12418:             \"Set-redelivered\", \"amqp.message.release.set-redelivered\",",
          "",
          "[Removed Lines]",
          "12415:             FT_STRING, BASE_NONE, NULL, 0,",
          "",
          "[Added Lines]",
          "11709:             FT_UINT_STRING, BASE_NONE, NULL, 0,",
          "",
          "---------------",
          "--- Hunk 109 ---",
          "[Context before]",
          "12420:             \"Mark redelivered on next transfer from queue\", HFILL}},",
          "12421:         {&hf_amqp_0_10_method_message_dest, {",
          "12422:             \"Destination\", \"amqp.message.destination\",",
          "12424:             \"Message destination\", HFILL}},",
          "12425:         {&hf_amqp_0_10_method_message_resume_id, {",
          "12426:             \"Resume-Id\", \"amqp.message.resume.id\",",
          "12428:             \"Message id to resume\", HFILL}},",
          "12429:         {&hf_amqp_0_10_method_message_subscribe_queue, {",
          "12430:             \"Queue\", \"amqp.message.subscribe.queue\",",
          "12432:             \"Queue to subscribe to\", HFILL}},",
          "12433:         {&hf_amqp_0_10_method_message_subscribe_exclusive, {",
          "12434:             \"Exclusive\", \"amqp.message.subscribe.exclusive\",",
          "",
          "[Removed Lines]",
          "12423:             FT_STRING, BASE_NONE, NULL, 0,",
          "12427:             FT_STRING, BASE_NONE, NULL, 0,",
          "12431:             FT_STRING, BASE_NONE, NULL, 0,",
          "",
          "[Added Lines]",
          "11717:             FT_UINT_STRING, BASE_NONE, NULL, 0,",
          "11721:             FT_UINT_STRING, BASE_NONE, NULL, 0,",
          "11725:             FT_UINT_STRING, BASE_NONE, NULL, 0,",
          "",
          "---------------",
          "--- Hunk 110 ---",
          "[Context before]",
          "12480:             \"Transaction timeout value in seconds\", HFILL}},",
          "12481:         {&hf_amqp_0_10_method_exchange_declare_exchange, {",
          "12482:             \"Exchange\", \"amqp.exchange.declare.exchange\",",
          "12484:             \"Exchange to declare\", HFILL}},",
          "12485:         {&hf_amqp_0_10_method_exchange_declare_type, {",
          "12486:             \"Type\", \"amqp.exchange.declare.type\",",
          "12488:             \"Type of exchange to declare\", HFILL}},",
          "12489:         {&hf_amqp_0_10_method_exchange_declare_alt_exchange, {",
          "12490:             \"Alternate-exchange\", \"amqp.exchange.declare.alternate-exchange\",",
          "12492:             \"Alternate exchange for unroutable messages\", HFILL}},",
          "12493:         {&hf_amqp_0_10_method_exchange_declare_passive, {",
          "12494:             \"Passive\", \"amqp.exchange.declare.passive\",",
          "",
          "[Removed Lines]",
          "12483:             FT_STRING, BASE_NONE, NULL, 0,",
          "12487:             FT_STRING, BASE_NONE, NULL, 0,",
          "12491:             FT_STRING, BASE_NONE, NULL, 0,",
          "",
          "[Added Lines]",
          "11777:             FT_UINT_STRING, BASE_NONE, NULL, 0,",
          "11781:             FT_UINT_STRING, BASE_NONE, NULL, 0,",
          "11785:             FT_UINT_STRING, BASE_NONE, NULL, 0,",
          "",
          "---------------",
          "--- Hunk 111 ---",
          "[Context before]",
          "12512:             \"Delete exchange only if it has no queue bindings\", HFILL}},",
          "12513:         {&hf_amqp_0_10_method_exchange_bind_queue, {",
          "12514:             \"Queue\", \"amqp.exchange.bind.queue\",",
          "12516:             \"Queue to bind to\", HFILL}},",
          "12517:         {&hf_amqp_0_10_method_exchange_binding_key, {",
          "12518:             \"Binding-key\", \"amqp.exchange.bind.binding-key\",",
          "",
          "[Removed Lines]",
          "12515:             FT_STRING, BASE_NONE, NULL, 0,",
          "",
          "[Added Lines]",
          "11809:             FT_UINT_STRING, BASE_NONE, NULL, 0,",
          "",
          "---------------",
          "--- Hunk 112 ---",
          "[Context before]",
          "12520:             \"Binding between exchange and queue\", HFILL}},",
          "12521:         {&hf_amqp_0_10_method_queue_name, {",
          "12522:             \"Queue\", \"amqp.queue.declare.queue\",",
          "12524:             \"Queue name\", HFILL}},",
          "12525:         {&hf_amqp_0_10_method_queue_alt_exchange, {",
          "12526:             \"Alternate-exchange\", \"amqp.queue.declare.alternate-exchange\",",
          "12528:             NULL, HFILL}},",
          "12529:         {&hf_amqp_0_10_method_queue_declare_passive, {",
          "12530:             \"Passive\", \"amqp.queue.declare.passive\",",
          "",
          "[Removed Lines]",
          "12523:             FT_STRING, BASE_NONE, NULL, 0,",
          "12527:             FT_STRING, BASE_NONE, NULL, 0,",
          "",
          "[Added Lines]",
          "11817:             FT_UINT_STRING, BASE_NONE, NULL, 0,",
          "11821:             FT_UINT_STRING, BASE_NONE, NULL, 0,",
          "",
          "---------------",
          "--- Hunk 113 ---",
          "[Context before]",
          "12568:             \"Apply QoS to entire connection\", HFILL}},",
          "12569:         {&hf_amqp_0_10_method_file_consumer_tag, {",
          "12570:             \"Consumer-tag\", \"amqp.file.consumer-tag\",",
          "12572:             \"Consumer tag\", HFILL}},",
          "12573:         {&hf_amqp_0_10_method_file_consume_no_local, {",
          "12574:             \"No-local\", \"amqp.file.consume.no-local\",",
          "",
          "[Removed Lines]",
          "12571:             FT_STRING, BASE_NONE, NULL, 0,",
          "",
          "[Added Lines]",
          "11865:             FT_UINT_STRING, BASE_NONE, NULL, 0,",
          "",
          "---------------",
          "--- Hunk 114 ---",
          "[Context before]",
          "12592:             \"Arguments for consuming\", HFILL}},",
          "12593:         {&hf_amqp_0_10_method_file_identifier, {",
          "12594:             \"Identifier\", \"amqp.file.identifier\",",
          "12596:             \"Staging identifier\", HFILL}},",
          "12597:         {&hf_amqp_0_10_method_file_open_content_size, {",
          "12598:             \"Content-size\", \"amqp.file.open.content-size\",",
          "",
          "[Removed Lines]",
          "12595:             FT_STRING, BASE_NONE, NULL, 0,",
          "",
          "[Added Lines]",
          "11889:             FT_UINT_STRING, BASE_NONE, NULL, 0,",
          "",
          "---------------",
          "--- Hunk 115 ---",
          "[Context before]",
          "12604:             \"Amount of previously staged content in octets\", HFILL}},",
          "12605:         {&hf_amqp_0_10_method_file_publish_exchange, {",
          "12606:             \"Exchange\", \"amqp.file.publish.exchange\",",
          "12608:             \"Exchange to publish to\", HFILL}},",
          "12609:         {&hf_amqp_0_10_method_file_publish_routing_key, {",
          "12610:             \"Routing-key\", \"amqp.file.publish.routing-key\",",
          "12612:             \"Message routing key\", HFILL}},",
          "12613:         {&hf_amqp_0_10_method_file_publish_mandatory, {",
          "12614:             \"Mandatory\", \"amqp.file.publish.mandatory\",",
          "",
          "[Removed Lines]",
          "12607:             FT_STRING, BASE_NONE, NULL, 0,",
          "12611:             FT_STRING, BASE_NONE, NULL, 0,",
          "",
          "[Added Lines]",
          "11901:             FT_UINT_STRING, BASE_NONE, NULL, 0,",
          "11905:             FT_UINT_STRING, BASE_NONE, NULL, 0,",
          "",
          "---------------",
          "--- Hunk 116 ---",
          "[Context before]",
          "12624:             NULL, HFILL}},",
          "12625:         {&hf_amqp_0_10_method_file_return_reply_text, {",
          "12626:             \"Reply-text\", \"amqp.file.return.reply-text\",",
          "12628:             \"Localized reply text\", HFILL}},",
          "12629:         {&hf_amqp_0_10_method_file_return_exchange, {",
          "12630:             \"Exchange\", \"amqp.file.return.exchange\",",
          "12632:             \"Exchange the original message was published to\", HFILL}},",
          "12633:         {&hf_amqp_0_10_method_file_return_routing_key, {",
          "12634:             \"Routing-key\", \"amqp.file.return.routing-key\",",
          "12636:             \"Message routing key\", HFILL}},",
          "12637:         {&hf_amqp_0_10_method_file_deliver_consumer_tag, {",
          "12638:             \"Consumer-tag\", \"amqp.file.deliver.consumer-tag\",",
          "12640:             NULL, HFILL}},",
          "12641:         {&hf_amqp_0_10_method_file_deliver_delivery_tag, {",
          "12642:             \"Delivery-tag\", \"amqp.file.deliver.delivery-tag\",",
          "",
          "[Removed Lines]",
          "12627:             FT_STRING, BASE_NONE, NULL, 0,",
          "12631:             FT_STRING, BASE_NONE, NULL, 0,",
          "12635:             FT_STRING, BASE_NONE, NULL, 0,",
          "12639:             FT_STRING, BASE_NONE, NULL, 0,",
          "",
          "[Added Lines]",
          "11921:             FT_UINT_STRING, BASE_NONE, NULL, 0,",
          "11925:             FT_UINT_STRING, BASE_NONE, NULL, 0,",
          "11929:             FT_UINT_STRING, BASE_NONE, NULL, 0,",
          "11933:             FT_UINT_STRING, BASE_NONE, NULL, 0,",
          "",
          "---------------",
          "--- Hunk 117 ---",
          "[Context before]",
          "12648:             \"Possible duplicate delivery\", HFILL}},",
          "12649:         {&hf_amqp_0_10_method_file_deliver_exchange, {",
          "12650:             \"Exchange\", \"amqp.file.deliver.exchange\",",
          "12652:             \"Exchange the original message was published to\", HFILL}},",
          "12653:         {&hf_amqp_0_10_method_file_deliver_routing_key, {",
          "12654:             \"Routing-key\", \"amqp.file.deliver.routing-key\",",
          "12656:             \"Message routing key\", HFILL}},",
          "12657:         {&hf_amqp_0_10_method_file_ack_delivery_tag, {",
          "12658:             \"Delivery-tag\", \"amqp.file.ack.delivery-tag\",",
          "",
          "[Removed Lines]",
          "12651:             FT_STRING, BASE_NONE, NULL, 0,",
          "12655:             FT_STRING, BASE_NONE, NULL, 0,",
          "",
          "[Added Lines]",
          "11945:             FT_UINT_STRING, BASE_NONE, NULL, 0,",
          "11949:             FT_UINT_STRING, BASE_NONE, NULL, 0,",
          "",
          "---------------",
          "--- Hunk 118 ---",
          "[Context before]",
          "12690:             \"Apply QoS to entire connection\", HFILL}},",
          "12691:         {&hf_amqp_0_10_method_stream_consumer_tag, {",
          "12692:             \"Consumer-tag\", \"amqp.stream.consumer-tag\",",
          "12694:             NULL, HFILL}},",
          "12695:         {&hf_amqp_0_10_method_stream_consume_no_local, {",
          "12696:             \"No-local\", \"amqp.stream.consume.no-local\",",
          "",
          "[Removed Lines]",
          "12693:             FT_STRING, BASE_NONE, NULL, 0,",
          "",
          "[Added Lines]",
          "11987:             FT_UINT_STRING, BASE_NONE, NULL, 0,",
          "",
          "---------------",
          "--- Hunk 119 ---",
          "[Context before]",
          "12710:             \"Arguments for consuming\", HFILL}},",
          "12711:         {&hf_amqp_0_10_method_stream_publish_exchange, {",
          "12712:             \"Exchange\", \"amqp.stream.publish.exchange\",",
          "12714:             \"Exchange to publish to\", HFILL}},",
          "12715:         {&hf_amqp_0_10_method_stream_publish_routing_key, {",
          "12716:             \"Routing-key\", \"amqp.stream.publish.routing-key\",",
          "12718:             \"Message routing key\", HFILL}},",
          "12719:         {&hf_amqp_0_10_method_stream_publish_mandatory, {",
          "12720:             \"Mandatory\", \"amqp.stream.publish.mandatory\",",
          "",
          "[Removed Lines]",
          "12713:             FT_STRING, BASE_NONE, NULL, 0,",
          "12717:             FT_STRING, BASE_NONE, NULL, 0,",
          "",
          "[Added Lines]",
          "12007:             FT_UINT_STRING, BASE_NONE, NULL, 0,",
          "12011:             FT_UINT_STRING, BASE_NONE, NULL, 0,",
          "",
          "---------------",
          "--- Hunk 120 ---",
          "[Context before]",
          "12730:             NULL, HFILL}},",
          "12731:         {&hf_amqp_0_10_method_stream_return_reply_text, {",
          "12732:             \"Reply-text\", \"amqp.stream.return.reply-text\",",
          "12734:             \"Localized reply text\", HFILL}},",
          "12735:         {&hf_amqp_0_10_method_stream_return_exchange, {",
          "12736:             \"Exchange\", \"amqp.stream.return.exchange\",",
          "12738:             \"Exchange the original message was published to\", HFILL}},",
          "12739:         {&hf_amqp_0_10_method_stream_return_routing_key, {",
          "12740:             \"Routing-key\", \"amqp.stream.return.routing-key\",",
          "12742:             \"Message routing key\", HFILL}},",
          "12743:         {&hf_amqp_0_10_method_stream_deliver_consumer_tag, {",
          "12744:             \"Consumer-tag\", \"amqp.stream.deliver.consumer-tag\",",
          "12746:             NULL, HFILL}},",
          "12747:         {&hf_amqp_0_10_method_stream_deliver_delivery_tag, {",
          "12748:             \"Delivery-tag\", \"amqp.stream.deliver.delivery-tag\",",
          "",
          "[Removed Lines]",
          "12733:             FT_STRING, BASE_NONE, NULL, 0,",
          "12737:             FT_STRING, BASE_NONE, NULL, 0,",
          "12741:             FT_STRING, BASE_NONE, NULL, 0,",
          "12745:             FT_STRING, BASE_NONE, NULL, 0,",
          "",
          "[Added Lines]",
          "12027:             FT_UINT_STRING, BASE_NONE, NULL, 0,",
          "12031:             FT_UINT_STRING, BASE_NONE, NULL, 0,",
          "12035:             FT_UINT_STRING, BASE_NONE, NULL, 0,",
          "12039:             FT_UINT_STRING, BASE_NONE, NULL, 0,",
          "",
          "---------------",
          "--- Hunk 121 ---",
          "[Context before]",
          "12750:             \"Server-assigned, session-specific delivery tag\", HFILL}},",
          "12751:         {&hf_amqp_0_10_method_stream_deliver_exchange, {",
          "12752:             \"Exchange\", \"amqp.stream.deliver.exchange\",",
          "12754:             \"Exchange the original message was published to\", HFILL}},",
          "12755:         {&hf_amqp_0_10_method_stream_deliver_queue, {",
          "12756:             \"Queue\", \"amqp.stream.deliver.queue\",",
          "12758:             \"Name of the queue the message came from\", HFILL}},",
          "12759:         {&hf_amqp_channel, {",
          "12760:             \"Channel\", \"amqp.channel\",",
          "12761:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "12762:             \"Channel ID\", HFILL}},",
          "12763:         {&hf_amqp_0_9_type, {",
          "12764:             \"Type\", \"amqp.type\",",
          "12765:             FT_UINT8, BASE_DEC, VALS(amqp_0_9_frame_types), 0x0,",
          "",
          "[Removed Lines]",
          "12753:             FT_STRING, BASE_NONE, NULL, 0,",
          "12757:             FT_STRING, BASE_NONE, NULL, 0,",
          "",
          "[Added Lines]",
          "12047:             FT_UINT_STRING, BASE_NONE, NULL, 0,",
          "12051:             FT_UINT_STRING, BASE_NONE, NULL, 0,",
          "12057:         {&hf_amqp_reserved, {",
          "12058:             \"Reserved\", \"amqp.reserved\",",
          "12059:             FT_UINT32, BASE_HEX, NULL, 0x0,",
          "12060:             NULL, HFILL}},",
          "",
          "---------------",
          "--- Hunk 122 ---",
          "[Context before]",
          "12858:             NULL, HFILL}},",
          "12859:         {&hf_amqp_method_connection_start_ok_mechanism, {",
          "12860:             \"Mechanism\", \"amqp.method.arguments.mechanism\",",
          "12862:             NULL, HFILL}},",
          "12863:         {&hf_amqp_method_connection_start_ok_response, {",
          "12864:             \"Response\", \"amqp.method.arguments.response\",",
          "12866:             NULL, HFILL}},",
          "12867:         {&hf_amqp_method_connection_start_ok_locale, {",
          "12868:             \"Locale\", \"amqp.method.arguments.locale\",",
          "12870:             NULL, HFILL}},",
          "12871:         {&hf_amqp_method_connection_secure_challenge, {",
          "12872:             \"Challenge\", \"amqp.method.arguments.challenge\",",
          "12874:             NULL, HFILL}},",
          "12875:         {&hf_amqp_method_connection_secure_ok_response, {",
          "12876:             \"Response\", \"amqp.method.arguments.response\",",
          "12878:             NULL, HFILL}},",
          "12879:         {&hf_amqp_method_connection_tune_channel_max, {",
          "12880:             \"Channel-Max\", \"amqp.method.arguments.channel_max\",",
          "",
          "[Removed Lines]",
          "12861:             FT_STRING, BASE_NONE, NULL, 0,",
          "12865:             FT_BYTES, BASE_NONE, NULL, 0,",
          "12869:             FT_STRING, BASE_NONE, NULL, 0,",
          "12873:             FT_BYTES, BASE_NONE, NULL, 0,",
          "12877:             FT_BYTES, BASE_NONE, NULL, 0,",
          "",
          "[Added Lines]",
          "12159:             FT_UINT_STRING, BASE_NONE, NULL, 0,",
          "12163:             FT_UINT_BYTES, BASE_NONE, NULL, 0,",
          "12167:             FT_UINT_STRING, BASE_NONE, NULL, 0,",
          "12171:             FT_UINT_BYTES, BASE_NONE, NULL, 0,",
          "12175:             FT_UINT_BYTES, BASE_NONE, NULL, 0,",
          "",
          "---------------",
          "--- Hunk 123 ---",
          "[Context before]",
          "12918:             NULL, HFILL}},",
          "12919:         {&hf_amqp_method_connection_open_virtual_host, {",
          "12920:             \"Virtual-Host\", \"amqp.method.arguments.virtual_host\",",
          "12922:             NULL, HFILL}},",
          "12923:         {&hf_amqp_0_9_method_connection_open_capabilities, {",
          "12924:             \"Capabilities\", \"amqp.method.arguments.capabilities\",",
          "",
          "[Removed Lines]",
          "12921:             FT_STRING, BASE_NONE, NULL, 0,",
          "",
          "[Added Lines]",
          "12219:             FT_UINT_STRING, BASE_NONE, NULL, 0,",
          "",
          "---------------",
          "--- Hunk 124 ---",
          "[Context before]",
          "12946:             \"Equivalent or alternate hosts for reconnection\", HFILL}},",
          "12947:         {&hf_amqp_method_connection_redirect_host, {",
          "12948:             \"Host\", \"amqp.method.arguments.host\",",
          "12950:             NULL, HFILL}},",
          "12951:         {&hf_amqp_0_9_method_connection_redirect_known_hosts, {",
          "12952:             \"Known-Hosts\", \"amqp.method.arguments.known_hosts\",",
          "",
          "[Removed Lines]",
          "12949:             FT_STRING, BASE_NONE, NULL, 0,",
          "",
          "[Added Lines]",
          "12247:             FT_UINT_STRING, BASE_NONE, NULL, 0,",
          "",
          "---------------",
          "--- Hunk 125 ---",
          "[Context before]",
          "12967:             \"Close reason\", HFILL}},",
          "12968:         {&hf_amqp_method_connection_close_reply_text, {",
          "12969:             \"Reply-Text\", \"amqp.method.arguments.reply_text\",",
          "12971:             NULL, HFILL}},",
          "12972:         {&hf_amqp_method_connection_close_class_id, {",
          "12973:             \"Class-Id\", \"amqp.method.arguments.class_id\",",
          "",
          "[Removed Lines]",
          "12970:             FT_STRING, BASE_NONE, NULL, 0,",
          "",
          "[Added Lines]",
          "12268:             FT_UINT_STRING, BASE_NONE, NULL, 0,",
          "",
          "---------------",
          "--- Hunk 126 ---",
          "[Context before]",
          "13873:             \"Broadcast\", \"amqp.method.properties.broadcast\",",
          "13874:             FT_UINT8, BASE_DEC, NULL, 0,",
          "13875:             NULL, HFILL}},",
          "13876:         {&hf_amqp_payload, {",
          "13877:             \"Payload\", \"amqp.payload\",",
          "13878:             FT_BYTES, BASE_NONE, NULL, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13174:         {&hf_amqp_0_10_dtx_xa_status, {",
          "13175:             \"dtx.xa-status\", \"amqp.method.properties.broadcast\",",
          "13176:             FT_UINT16, BASE_DEC, VALS(amqp_0_10_xa_status), 0,",
          "13177:             NULL, HFILL}},",
          "",
          "---------------",
          "--- Hunk 127 ---",
          "[Context before]",
          "13912:         {&hf_amqp_ack_in, {",
          "13913:             \"Ack in frame\", \"amqp.ack_in\",",
          "13914:             FT_FRAMENUM, BASE_NONE, NULL, 0,",
          "13916:     };",
          "",
          "[Removed Lines]",
          "13915:             NULL, HFILL}}",
          "",
          "[Added Lines]",
          "13217:             NULL, HFILL}},",
          "13218:         {&hf_amqp_method_connection_start_server_properties_size, {",
          "13219:             \"Size\", \"amqp.method.connection_start.server_properties.size\",",
          "13220:             FT_UINT32, BASE_DEC, NULL, 0,",
          "13221:             NULL, HFILL}},",
          "13222:         {&hf_amqp_0_10_method_connection_start_mechanisms_size, {",
          "13223:             \"Size\", \"amqp.method.connection_start.server_properties.size\",",
          "13224:             FT_UINT32, BASE_DEC, NULL, 0,",
          "13225:             NULL, HFILL}},",
          "13226:         {&hf_amqp_0_10_method_connection_start_locales_size, {",
          "13227:             \"Size\", \"amqp.method.connection_start.locales.size\",",
          "13228:             FT_UINT32, BASE_DEC, NULL, 0,",
          "13229:             NULL, HFILL}},",
          "13230:         {&hf_amqp_method_connection_start_ok_client_properties_size, {",
          "13231:             \"Size\", \"amqp.method.connection_start.ok_client_properties.size\",",
          "13232:             FT_UINT32, BASE_DEC, NULL, 0,",
          "13233:             NULL, HFILL}},",
          "13234:         {&hf_amqp_0_10_method_connection_open_capabilities_size, {",
          "13235:             \"Size\", \"amqp.method.connection_open.capabilities.size\",",
          "13236:             FT_UINT32, BASE_DEC, NULL, 0,",
          "13237:             NULL, HFILL}},",
          "13238:         {&hf_amqp_0_10_method_connection_open_ok_known_hosts_size, {",
          "13239:             \"Size\", \"amqp.method.connection_open.ok_known_hosts.size\",",
          "13240:             FT_UINT32, BASE_DEC, NULL, 0,",
          "13241:             NULL, HFILL}},",
          "13242:         {&hf_amqp_0_10_method_connection_redirect_known_hosts_size, {",
          "13243:             \"Size\", \"amqp.method.connection_redirect.known_hosts.size\",",
          "13244:             FT_UINT32, BASE_DEC, NULL, 0,",
          "13245:             NULL, HFILL}},",
          "13246:         {&hf_amqp_0_10_method_execution_error_info_size, {",
          "13247:             \"Size\", \"amqp.method.execution.error_info.size\",",
          "13248:             FT_UINT32, BASE_DEC, NULL, 0,",
          "13249:             NULL, HFILL}},",
          "13250:         {&hf_amqp_0_10_method_exchange_declare_arguments_size, {",
          "13251:             \"Size\", \"amqp.method.exchange.declare_argument.size\",",
          "13252:             FT_UINT32, BASE_DEC, NULL, 0,",
          "13253:             NULL, HFILL}},",
          "13254:         {&hf_amqp_0_10_method_queue_declare_arguments_size, {",
          "13255:             \"Size\", \"amqp.method.queue.declare_argument.size\",",
          "13256:             FT_UINT32, BASE_DEC, NULL, 0,",
          "13257:             NULL, HFILL}},",
          "13258:         {&hf_amqp_0_10_method_file_consume_arguments_size, {",
          "13259:             \"Size\", \"amqp.method.file.consume_arguments.size\",",
          "13260:             FT_UINT32, BASE_DEC, NULL, 0,",
          "13261:             NULL, HFILL}},",
          "13262:         {&hf_amqp_0_10_method_stream_consume_arguments_size, {",
          "13263:             \"Size\", \"amqp.method.stream.consume_arguments.size\",",
          "13264:             FT_UINT32, BASE_DEC, NULL, 0,",
          "13265:             NULL, HFILL}},",
          "13266:         {&hf_amqp_0_10_struct_message_properties_application_headers_size, {",
          "13267:             \"Size\", \"amqp.struct.message_properties.application_headers.size\",",
          "13268:             FT_UINT32, BASE_DEC, NULL, 0,",
          "13269:             NULL, HFILL}},",
          "13270:         {&hf_amqp_0_10_struct_file_properties_headers_size, {",
          "13271:             \"Size\", \"amqp.struct.file.properties_headers.size\",",
          "13272:             FT_UINT32, BASE_DEC, NULL, 0,",
          "13273:             NULL, HFILL}},",
          "13274:         {&hf_amqp_0_10_struct_stream_properties_headers_size, {",
          "13275:             \"Size\", \"amqp.struct.stream.properties_headers.size\",",
          "13276:             FT_UINT32, BASE_DEC, NULL, 0,",
          "13277:             NULL, HFILL}},",
          "13278:         {&hf_amqp_0_10_struct_dtx_recover_result_size, {",
          "13279:             \"Size\", \"amqp.struct.dtx_recover.result.size\",",
          "13280:             FT_UINT32, BASE_DEC, NULL, 0,",
          "13281:             NULL, HFILL}},",
          "",
          "---------------",
          "--- Hunk 128 ---",
          "[Context before]",
          "13926:          &ett_amqp_init,",
          "13927:          &ett_amqp_0_10_map,",
          "13928:          &ett_amqp_0_10_array,",
          "13929:          &ett_amqp_1_0_array,",
          "13930:          &ett_amqp_1_0_map,",
          "13931:          &ett_amqp_1_0_list",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13295:          &ett_amqp_0_10_struct,",
          "",
          "---------------",
          "--- Hunk 129 ---",
          "[Context before]",
          "13936:         { &ei_amqp_channel_error, { \"amqp.channel.error\", PI_RESPONSE_CODE, PI_WARN, \"Channel error\", EXPFILL }},",
          "13937:         { &ei_amqp_message_undeliverable, { \"amqp.message.undeliverable\", PI_RESPONSE_CODE, PI_WARN, \"Message was not delivered\", EXPFILL }},",
          "13938:         { &ei_amqp_bad_flag_value, { \"amqp.bad_flag_value\", PI_PROTOCOL, PI_WARN, \"Bad flag value\", EXPFILL }},",
          "13940:         { &ei_amqp_bad_length, { \"amqp.bad_length\", PI_MALFORMED, PI_ERROR, \"Bad frame length\", EXPFILL }},",
          "13942:         { &ei_amqp_field_short, { \"amqp.field_short\", PI_PROTOCOL, PI_ERROR, \"Field is cut off by the end of the field table\", EXPFILL }},",
          "13943:         { &ei_amqp_invalid_class_code, { \"amqp.unknown.class_code\", PI_PROTOCOL, PI_WARN, \"Invalid class code\", EXPFILL }},",
          "13944:         { &ei_amqp_unknown_command_class, { \"amqp.unknown.command_class\", PI_PROTOCOL, PI_ERROR, \"Unknown command/control class\", EXPFILL }},",
          "",
          "[Removed Lines]",
          "13939: #if 0",
          "13941: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 130 ---",
          "[Context before]",
          "13962:         { &ei_amqp_unknown_amqp_type,  { \"amqp.unknown.amqp_type\", PI_PROTOCOL, PI_ERROR, \"Unknown AMQP type\", EXPFILL }},",
          "13963:         { &ei_amqp_invalid_number_of_params, { \"amqp.invalid.params_number\", PI_PROTOCOL, PI_ERROR, \"Invalid number of parameters\", EXPFILL }},",
          "13964:         { &ei_amqp_amqp_1_0_frame_length_exceeds_65K, { \"amqp.amqp_1_0_frame_length_exceeds_65K\", PI_PROTOCOL, PI_WARN, \"Frame length exceeds 65K; Dissection limited to 65K\", EXPFILL}},",
          "13965:     };",
          "13967:     expert_module_t* expert_amqp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13330:         { &ei_amqp_size_exceeds_65K, { \"amqp.size_exceeds_65K\", PI_PROTOCOL, PI_WARN, \"Size field exceeds 65K; Dissection limited to 65K\", EXPFILL}},",
          "13331:         { &ei_amqp_array_type_unknown, { \"amqp.array_type_unknown\", PI_PROTOCOL, PI_WARN, \"Array type unknown\", EXPFILL}},",
          "",
          "---------------"
        ]
      }
    }
  ]
}