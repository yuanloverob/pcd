{
  "cve_id": "CVE-2021-36218",
  "cve_desc": "An issue was discovered in SKALE sgxwallet 1.58.3. sgx_disp_ippsAES_GCMEncrypt allows an out-of-bounds write, resulting in a segfault and compromised enclave. This issue describes a buffer overflow, which was resolved prior to v1.77.0 and not reproducible in latest sgxwallet v1.77.0",
  "repo": "skalenetwork/sgxwallet",
  "patch_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
  "patch_info": {
    "commit_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "repo": "skalenetwork/sgxwallet",
    "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "files": [
      "BLSCrypto.cpp",
      "DKGCrypto.cpp",
      "ECDSACrypto.cpp",
      "SEKManager.cpp",
      "SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl",
      "testw.cpp"
    ],
    "message": "SKALE-3205-restart",
    "before_after_code_files": [
      "BLSCrypto.cpp||BLSCrypto.cpp",
      "DKGCrypto.cpp||DKGCrypto.cpp",
      "ECDSACrypto.cpp||ECDSACrypto.cpp",
      "SEKManager.cpp||SEKManager.cpp",
      "SGXWalletServer.cpp||SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
      "testw.cpp||testw.cpp"
    ]
  },
  "patch_diff": {
    "BLSCrypto.cpp||BLSCrypto.cpp": [
      "File: BLSCrypto.cpp -> BLSCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:     CHECK_STATE(_hexArrayLen > 2 * _len);",
      "90:         _hexArray[j * 2] = hexval[((d[j] >> 4) & 0xF)];",
      "91:         _hexArray[j * 2 + 1] = hexval[(d[j]) & 0x0F];",
      "92:     }",
      "",
      "[Removed Lines]",
      "89:     for (int j = 0; j < _len; j++) {",
      "",
      "[Added Lines]",
      "89:     for (uint64_t j = 0; j < _len; j++) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "105:     CHECK_STATE(_bin_len)",
      "110:     CHECK_STATE(len != 2 * _max_length + 1);",
      "",
      "[Removed Lines]",
      "108:     int len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "[Added Lines]",
      "108:     uint64_t len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "121:         int high = char2int((char) _hex[i * 2]);",
      "122:         int low = char2int((char) _hex[i * 2 + 1]);",
      "",
      "[Removed Lines]",
      "120:     for (int i = 0; i < len / 2; i++) {",
      "",
      "[Added Lines]",
      "120:     for (uint64_t i = 0; i < len / 2; i++) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "248:     strncpy(keyArray->data(), _key, BUF_LEN);",
      "252:     sgx_status_t status = trustedEncryptKeyAES(eid, errStatus, errMsg.data(), keyArray->data(), encryptedKey->data(), &encryptedLen);",
      "",
      "[Removed Lines]",
      "250:     unsigned int encryptedLen = 0;",
      "",
      "[Added Lines]",
      "251:     uint64_t encryptedLen = 0;",
      "",
      "---------------"
    ],
    "DKGCrypto.cpp||DKGCrypto.cpp": [
      "File: DKGCrypto.cpp -> DKGCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "135: string gen_dkg_poly(int _t) {",
      "136:     vector<char> errMsg(BUF_LEN, 0);",
      "137:     int errStatus = 0;",
      "140:     vector <uint8_t> encrypted_dkg_secret(BUF_LEN, 0);",
      "145:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
      "147:     uint64_t length = enc_len;;",
      "",
      "[Removed Lines]",
      "138:     uint32_t enc_len = 0;",
      "144:     sgx_status_t status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "[Added Lines]",
      "138:     uint64_t enc_len = 0;",
      "142:     sgx_status_t status = trustedGenDkgSecretAES(",
      "143:             eid, &errStatus,errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "215:     for (int i = 0; i < _n; i++) {",
      "216:         vector <uint8_t> encryptedSkey(BUF_LEN, 0);",
      "218:         vector<char> currentShare(193, 0);",
      "219:         vector<char> sShareG2(320, 0);",
      "",
      "[Removed Lines]",
      "217:         uint32_t decLen;",
      "",
      "[Added Lines]",
      "217:         uint64_t decLen;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "300:         throw SGXException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
      "301:     }",
      "305:     sgx_status_t status = trustedCreateBlsKeyAES(eid, &errStatus, errMsg.data(), s_shares, encr_key, decKeyLen, encr_bls_key,",
      "306:                                                  &enc_bls_len);",
      "",
      "[Removed Lines]",
      "303:     uint32_t enc_bls_len = 0;",
      "",
      "[Added Lines]",
      "303:     uint64_t enc_bls_len = 0;",
      "",
      "---------------"
    ],
    "ECDSACrypto.cpp||ECDSACrypto.cpp": [
      "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:     vector<char> pub_key_x(BUF_LEN, 0);",
      "55:     vector<char> pub_key_y(BUF_LEN, 0);",
      "59:     sgx_status_t status = trustedGenerateEcdsaKeyAES(eid, &errStatus,",
      "60:                                         errMsg.data(), encr_pr_key.data(), &enc_len,",
      "",
      "[Removed Lines]",
      "57:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "57:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SEKManager.cpp||SEKManager.cpp": [
      "File: SEKManager.cpp -> SEKManager.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "52: void create_test_key() {",
      "53:     int errStatus = 0;",
      "54:     vector<char> errMsg(1024, 0);",
      "57:     SAFE_UINT8_BUF(encrypted_key, BUF_LEN);",
      "",
      "[Removed Lines]",
      "55:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "55:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "110:     auto encrypted_SEK = make_shared < vector < uint8_t >> (BUF_LEN, 0);",
      "114:     sgx_status_t status = trustedSetSEK_backup(eid, &err_status, errMsg.data(), encrypted_SEK->data(), &l,",
      "115:                                                SEK.c_str());",
      "",
      "[Removed Lines]",
      "112:     uint32_t l = 0;",
      "",
      "[Added Lines]",
      "112:     uint64_t l = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "127:     vector<char> errMsg(1024, 0);",
      "128:     int err_status = 0;",
      "129:     vector <uint8_t> encrypted_SEK(1024, 0);",
      "132:     SAFE_CHAR_BUF(SEK, 65);",
      "",
      "[Removed Lines]",
      "130:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SGXWalletServer.cpp||SGXWalletServer.cpp": [
      "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "564:         vector<string> public_keys = calculateAllBlsPublicKeys(public_shares);",
      "567:             throw SGXException(UNKNOWN_ERROR, \"\");",
      "568:         }",
      "",
      "[Removed Lines]",
      "566:         if (public_keys.size() != n) {",
      "",
      "[Added Lines]",
      "566:         if (public_keys.size() != (uint64_t)n) {",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c": [
      "File: secure_enclave/AESUtils.c -> secure_enclave/AESUtils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"stdlib.h\"",
      "28: #include <string.h>",
      "30: #include \"AESUtils.h\"",
      "32: sgx_aes_gcm_128bit_key_t AES_key;",
      "33: sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "37:     if (!message) {",
      "38:         LOG_ERROR(\"Null message in AES_encrypt\");",
      "",
      "[Removed Lines]",
      "35: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "",
      "[Added Lines]",
      "37: #define SAFE_CHAR_BUF(__X__, __Y__)  ;char __X__ [ __Y__ ]; memset(__X__, 0, __Y__);",
      "39: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrBufLen, unsigned  char type,",
      "40:                 unsigned char decryptable, uint64_t* resultLen) {",
      "44:     if (!type) {",
      "45:         LOG_ERROR(\"Null type in AES_encrypt\");",
      "46:         return -1;",
      "47:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47:     uint64_t len = strlen(message) + 1;",
      "50:         LOG_ERROR(\"Output buffer too small\");",
      "51:         return -3;",
      "52:     }",
      "54:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "57:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "58:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "59:                                                      NULL, 0,",
      "60:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "62:     return status;",
      "63: }",
      "",
      "[Removed Lines]",
      "49:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "56:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, strlen(message),",
      "",
      "[Added Lines]",
      "61:     if (2 + len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrBufLen ) {",
      "66:     SAFE_CHAR_BUF(fullMessage, len + 2);",
      "68:     fullMessage[0] = type;",
      "69:     fullMessage[1] = decryptable;",
      "71:     strncpy(fullMessage + 2, message, len );",
      "73:     len = len + 2;",
      "74:     message = fullMessage;",
      "78:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96:                                                    NULL, 0,",
      "97:                                                    (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "133: }",
      "",
      "[Removed Lines]",
      "99:   return status;",
      "100: }",
      "105: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "107:     if (!message) {",
      "108:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "109:         return -1;",
      "110:     }",
      "112:     if (!encr_message) {",
      "113:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "114:         return -2;",
      "115:     }",
      "117:     uint64_t len = strlen(message) + 1;",
      "119:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "120:         LOG_ERROR(\"Output buffer too small\");",
      "121:         return -3;",
      "122:     }",
      "124:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "126:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_DH_key, (uint8_t*)message, strlen(message),",
      "127:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "128:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "129:                                                      NULL, 0,",
      "130:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "132:     return status;",
      "135: int AES_decrypt_DH(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) {",
      "137:     if (!message) {",
      "138:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "139:         return -1;",
      "140:     }",
      "142:     if (!encr_message) {",
      "143:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "144:         return -2;",
      "145:     }",
      "148:     if (length < SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE) {",
      "149:         LOG_ERROR(\"length < SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE\");",
      "150:         return -1;",
      "151:     }",
      "155:     uint64_t len = length - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE;",
      "157:     if (msgLen < len) {",
      "158:         LOG_ERROR(\"Output buffer not large enough\");",
      "159:         return -2;",
      "160:     }",
      "162:     sgx_status_t status = sgx_rijndael128GCM_decrypt(&AES_DH_key,",
      "163:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE, len,",
      "164:                                                      (unsigned char*) message,",
      "165:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "166:                                                      NULL, 0,",
      "167:                                                      (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "169:     return status;",
      "170: }",
      "",
      "[Added Lines]",
      "123:   for (int i = 2; i < strlen(message) + 1; i++) {",
      "124:       message[i - 2 ] = message[i];",
      "125:   }",
      "127:   return status;",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h": [
      "File: secure_enclave/AESUtils.h -> secure_enclave/AESUtils.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: extern sgx_aes_gcm_128bit_key_t AES_key;",
      "28: extern sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "31: int AES_decrypt(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) ;",
      "33: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Removed Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Added Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen,",
      "31:                 unsigned char type, unsigned char decryptable, uint64_t* resultLen);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36: void derive_DH_Key();",
      "39: #endif //SGXD_AESUTILS_H",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39: #define ECDSA '1'",
      "40: #define BLS '2'",
      "41: #define DKG '3'",
      "43: #define DECRYPTABLE '1'",
      "44: #define NON_DECRYPTABLE '2'",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
      "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "122:         abort(); \\",
      "123:     } else {called = true;};",
      "126:     CALL_ONCE",
      "127:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "125: void trustedEnclaveInit(uint32_t _logLevel) {",
      "",
      "[Added Lines]",
      "125: void trustedEnclaveInit(uint64_t _logLevel) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "234: void sealHexSEK(int *errStatus, char *errString,",
      "236:     CALL_ONCE",
      "237:     LOG_INFO(__FUNCTION__);",
      "238:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "235:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "235:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "255:                                            (sgx_sealed_data_t *) encrypted_sek);",
      "256:     CHECK_STATUS(\"seal SEK failed after SEK generation\");",
      "260:     CHECK_STATE(encrypt_text_length = plaintextLen);",
      "",
      "[Removed Lines]",
      "258:     uint32_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "258:     uint64_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "263:     SAFE_CHAR_BUF(unsealedKey, BUF_LEN);",
      "264:     uint32_t decLen = BUF_LEN;",
      "267:     CHECK_STATE(add_text_length == 0);",
      "268:     CHECK_STATE(sgx_is_within_enclave(encrypted_sek,sizeof(sgx_sealed_data_t)));",
      "269:     status = sgx_unseal_data((const sgx_sealed_data_t *)encrypted_sek, NULL, NULL,",
      "",
      "[Removed Lines]",
      "266:     uint32_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "266:     uint64_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "279: }",
      "281: void trustedGenerateSEK(int *errStatus, char *errString,",
      "283:     CALL_ONCE",
      "284:     LOG_INFO(__FUNCTION__);",
      "285:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "282:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "282:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "341: }",
      "343: void trustedSetSEK_backup(int *errStatus, char *errString,",
      "345:     CALL_ONCE",
      "346:     LOG_INFO(__FUNCTION__);",
      "347:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "344:                           uint8_t *encrypted_sek, uint32_t *enc_len, const char *sek_hex) {",
      "",
      "[Added Lines]",
      "344:                           uint8_t *encrypted_sek, uint64_t *enc_len, const char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "372: void trustedGenerateEcdsaKeyAES(int *errStatus, char *errString,",
      "374:     LOG_INFO(__FUNCTION__);",
      "375:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint32_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "[Added Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint64_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "410:     }",
      "411:     strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes);",
      "414:     mpz_get_str(arr_skey_str, ECDSA_SKEY_BASE, skey);",
      "415:     n_zeroes = 64 - strlen(arr_skey_str);",
      "416:     for (int i = 0; i < n_zeroes; i++) {",
      "417:         skey_str[i] = '0';",
      "418:     }",
      "419:     strncpy(skey_str + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "421:     snprintf(errString, BUF_LEN, \"skey len is %d\\n\", (int) strlen(skey_str));",
      "424:     CHECK_STATUS(\"ecdsa private key encryption failed\");",
      "430:     CHECK_STATUS2(\"ecdsa private key decr failed with status %d\");",
      "",
      "[Removed Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, ECDSA_SKEY_LEN);SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "420:     skey_str[ECDSA_SKEY_LEN - 1] = 0;",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN);",
      "428:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, BUF_LEN);",
      "414:     SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN,",
      "424:                              ECDSA, NON_DECRYPTABLE, enc_len);",
      "427:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "439: }",
      "441: void trustedGetPublicEcdsaKeyAES(int *errStatus, char *errString,",
      "443:     LOG_DEBUG(__FUNCTION__);",
      "444:     INIT_ERROR_STATE",
      "448:     mpz_t privateKeyMpz;",
      "449:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "442:                                  uint8_t *encryptedPrivateKey, uint32_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "446:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "441:                                  uint8_t *encryptedPrivateKey, uint64_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "445:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "455:     CHECK_STATE(pub_key_x);",
      "456:     CHECK_STATE(pub_key_y);",
      "459:     CHECK_STATUS2(\"AES_decrypt failed with status %d\");",
      "461:     skey[enc_len - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE] = '\\0';",
      "",
      "[Removed Lines]",
      "458:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "457:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "516: static uint64_t sigCounter = 0;",
      "519:                          const char *hash, char *sigR, char *sigS, uint8_t *sig_v, int base) {",
      "520:     LOG_DEBUG(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "518: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "517: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "526:     CHECK_STATE(sigR);",
      "527:     CHECK_STATE(sigS);",
      "531:     mpz_t privateKeyMpz;",
      "532:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "529:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "528:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "534:     mpz_init(msgMpz);",
      "535:     signature sign = signature_init();",
      "539:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "",
      "[Removed Lines]",
      "537:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "536:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "602: void trustedDecryptKeyAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "605:     LOG_DEBUG(__FUNCTION__);",
      "606:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "603:                           uint32_t enc_len, char *key) {",
      "",
      "[Added Lines]",
      "602:                           uint64_t enc_len, char *key) {",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "615:     if (status != 0) {",
      "",
      "[Removed Lines]",
      "613:     int status = AES_decrypt_DH(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "[Added Lines]",
      "612:     int status = AES_decrypt(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "638: void trustedEncryptKeyAES(int *errStatus, char *errString, const char *key,",
      "640:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "639:                           uint8_t *encryptedPrivateKey, uint32_t *enc_len) {",
      "",
      "[Added Lines]",
      "638:                           uint8_t *encryptedPrivateKey, uint64_t *enc_len) {",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "652:     CHECK_STATUS2(\"AES encrypt failed with status %d\");",
      "656:     SAFE_CHAR_BUF(decryptedKey, BUF_LEN);",
      "660:     CHECK_STATUS2(\"trustedDecryptKey failed with status %d\");",
      "",
      "[Removed Lines]",
      "650:     int status = AES_encrypt_DH((char *)key, encryptedPrivateKey, BUF_LEN);",
      "658:     status = AES_decrypt_DH(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "[Added Lines]",
      "649:     int status = AES_encrypt((char *)key, encryptedPrivateKey, BUF_LEN,",
      "650:                              DKG, DECRYPTABLE, enc_len);",
      "656:     status = AES_decrypt(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "672:     if (strncmp(key, decryptedKey, MAX_KEY_LENGTH) != 0) {",
      "673:         snprintf(errString, BUF_LEN, \"Decrypted key does not match original key\");",
      "674:         LOG_ERROR(errString);",
      "675:         goto clean;",
      "676:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "672:         LOG_ERROR(key);",
      "673:         LOG_ERROR(decryptedKey);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "686: void trustedBlsSignMessageAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "688:                               char *_hashY, char *signature) {",
      "689:     LOG_DEBUG(__FUNCTION__);",
      "690:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "687:                               uint32_t enc_len, char *_hashX,",
      "",
      "[Added Lines]",
      "687:                               uint64_t enc_len, char *_hashX,",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "726: }",
      "728: void",
      "730:     LOG_INFO(__FUNCTION__);",
      "731:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
      "",
      "[Added Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t *enc_len, size_t _t) {",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "739:     CHECK_STATUS(\"gen_dkg_poly failed\")",
      "743:     CHECK_STATUS(\"SGX AES encrypt DKG poly failed\");",
      "747:     SAFE_CHAR_BUF(decr_dkg_secret, DKG_BUFER_LENGTH);",
      "",
      "[Removed Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN);",
      "",
      "[Added Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN,",
      "742:                          DKG, DECRYPTABLE, enc_len);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "769: void",
      "770: trustedDecryptDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret,",
      "772:                            uint8_t *decrypted_dkg_secret) {",
      "773:     LOG_INFO(__FUNCTION__);",
      "774:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "771:                            uint32_t enc_len,",
      "",
      "[Added Lines]",
      "772:                            uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "790: }",
      "794:     LOG_INFO(__FUNCTION__);",
      "795:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "793: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint32_t enc_len) {",
      "",
      "[Added Lines]",
      "794: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint64_t enc_len) {",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "810:     LOG_INFO(\"SGX call completed\");",
      "811: }",
      "814:                                        char *result_str, char *s_shareG2, char *pub_keyB, uint8_t _t, uint8_t _n,",
      "815:                                        uint8_t ind) {",
      "817:     LOG_INFO(__FUNCTION__);",
      "818:     INIT_ERROR_STATE",
      "821:     int status;",
      "823:     CHECK_STATE(encrypted_skey);",
      "",
      "[Removed Lines]",
      "813: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint32_t *dec_len,",
      "820:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "814: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint64_t *dec_len,",
      "821:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "828:     LOG_DEBUG(__FUNCTION__);",
      "832:     SAFE_CHAR_BUF(pub_key_x, BUF_LEN);SAFE_CHAR_BUF(pub_key_y, BUF_LEN);",
      "",
      "[Removed Lines]",
      "830:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "831:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "836:     CHECK_STATUS(\"trustedGenerateEcdsaKeyAES failed\");",
      "840:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "838:     status = AES_decrypt(encrypted_skey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "839:     status = AES_decrypt(encrypted_skey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "848:     status = gen_session_key(skey, pub_keyB, common_key);",
      "850:     CHECK_STATUS(\"gen_session_key failed\")",
      "854:     status = calc_secret_share(getThreadLocalDecryptedDkgPoly(), s_share, _t, _n, ind);",
      "855:     CHECK_STATUS(\"calc secret share failed\")",
      "",
      "[Removed Lines]",
      "846:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "852:     SAFE_CHAR_BUF(s_share, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "847:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "853:     SAFE_CHAR_BUF(s_share, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "858:     status = calc_secret_shareG2(s_share, s_shareG2);",
      "859:     CHECK_STATUS(\"invalid decr secret share\");",
      "862:     status=xor_encrypt(common_key, s_share, cypher);",
      "864:     CHECK_STATUS(\"xor_encrypt failed\")",
      "",
      "[Removed Lines]",
      "861:     SAFE_CHAR_BUF(cypher, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "862:     SAFE_CHAR_BUF(cypher, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "875:     LOG_INFO(\"SGX call completed\");",
      "876: }",
      "879:                                char *public_shares,",
      "880:                                unsigned _t, unsigned _n) {",
      "881:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "878: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "879: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "913:     CHECK_STATE(s_share);",
      "914:     CHECK_STATE(encryptedPrivateKey);",
      "918:     mpz_t s;",
      "919:     mpz_init(s);",
      "923:     CHECK_STATUS2(\"AES_decrypt failed (in trustedDkgVerifyAES) with status %d\");",
      "927:     strncpy(encr_sshare, s_share, ECDSA_SKEY_LEN - 1);",
      "931:     status = session_key_recover(skey, s_share, common_key);",
      "933:     CHECK_STATUS(\"session_key_recover failed\");",
      "937:     status=xor_decrypt(common_key, encr_sshare, decr_sshare);",
      "",
      "[Removed Lines]",
      "916:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "921:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "925:     SAFE_CHAR_BUF(encr_sshare, ECDSA_SKEY_LEN);",
      "929:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "935:     SAFE_CHAR_BUF(decr_sshare, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "917:     SAFE_CHAR_BUF(skey,BUF_LEN);",
      "922:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "926:     SAFE_CHAR_BUF(encr_sshare, BUF_LEN);",
      "930:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "936:     SAFE_CHAR_BUF(decr_sshare, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "955: void trustedCreateBlsKeyAES(int *errStatus, char *errString, const char *s_shares,",
      "956:                             uint8_t *encryptedPrivateKey, uint64_t key_len, uint8_t *encr_bls_key,",
      "959:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "957:                             uint32_t *enc_bls_key_len) {",
      "",
      "[Added Lines]",
      "958:                             uint64_t *enc_bls_key_len) {",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "964:     CHECK_STATE(encryptedPrivateKey);",
      "965:     CHECK_STATE(encr_bls_key);",
      "969:     mpz_t sum;",
      "970:     mpz_init(sum);",
      "",
      "[Removed Lines]",
      "967:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "968:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "978:     mpz_init(bls_key);",
      "982:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "984:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "981:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "982:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "1038:     strncpy(key_share + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "1039:     key_share[BLS_KEY_LENGTH - 1] = 0;",
      "1043:     CHECK_STATUS2(\"aes encrypt bls private key failed with status %d \");",
      "1047:     SET_SUCCESS",
      "1048:     clean:",
      "",
      "[Removed Lines]",
      "1041:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN);",
      "",
      "[Added Lines]",
      "1042:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN, BLS, NON_DECRYPTABLE, enc_bls_key_len);",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "1064:     CHECK_STATE(bls_pub_key);",
      "1065:     CHECK_STATE(encryptedPrivateKey);",
      "1071:     CHECK_STATUS2(\"AES decrypt failed %d\");",
      "",
      "[Removed Lines]",
      "1067:     SAFE_CHAR_BUF(skey_hex, ECDSA_SKEY_LEN);",
      "1069:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "1066:     SAFE_CHAR_BUF(skey_hex, BUF_LEN);",
      "1068:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, BUF_LEN);",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
      "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
      "--- Hunk 1 ---",
      "[Context before]",
      "11:  trusted {",
      "12:   include \"sgx_tgmp.h\"",
      "17:         public void trustedGenerateSEK(",
      "18:                                 [out] int *errStatus,",
      "19:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "20:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "22:                                 [out, count = 65] char* hex_SEK);",
      "24:         public void trustedSetSEK(",
      "",
      "[Removed Lines]",
      "14:   public void trustedEnclaveInit(uint32_t _logLevel);",
      "21:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "14:   public void trustedEnclaveInit(uint64_t _logLevel);",
      "21:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30:                                 [out] int *errStatus,",
      "31:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "32:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "34:                                 [in, string] const char* SEK_hex);",
      "36:         public void trustedGenerateEcdsaKeyAES (",
      "37:                                 [out] int *errStatus,",
      "38:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "39:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "41:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "42:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "33:                                 [out] uint32_t *enc_len,",
      "40:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "33:                                 [out] uint64_t *enc_len,",
      "40:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "45:                                 [out] int *errStatus,",
      "46:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "47:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "49:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "50:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "48:                                 uint32_t dec_len,",
      "",
      "[Added Lines]",
      "48:                                 uint64_t dec_len,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "53:                                 [out] int *errStatus,",
      "54:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "55:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "57:                                 [in, string] const char* hash,",
      "58:                                 [out, count = SMALL_BUF_SIZE] char* sig_r,",
      "59:                                 [out, count = SMALL_BUF_SIZE] char* sig_s,",
      "",
      "[Removed Lines]",
      "56:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "56:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "65:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "66:                                 [in, count = SMALL_BUF_SIZE] const char* key,",
      "67:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "70:         public void trustedDecryptKeyAES (",
      "71:                                 [out] int *errStatus,",
      "72:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "73:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "75:                                 [out, count = SMALL_BUF_SIZE] char* key );",
      "77:         public void trustedGenDkgSecretAES (",
      "78:                                 [out] int *errStatus,",
      "79:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "80:                                 [out, count = 3072] uint8_t* encrypted_dkg_secret,",
      "83:         public void trustedDecryptDkgSecretAES (",
      "84:                                 [out] int *errStatus,",
      "85:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "86:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "88:                                 [out, count = 3072] uint8_t* decrypted_dkg_secret",
      "89:                                 );",
      "",
      "[Removed Lines]",
      "68:                                 [out] uint32_t *enc_len);",
      "74:                                 uint32_t enc_len,",
      "81:                                 [out] uint32_t * enc_len, size_t _t);",
      "87:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "68:                                 [out] uint64_t *enc_len);",
      "74:                                 uint64_t enc_len,",
      "81:                                 [out] uint64_t * enc_len, size_t _t);",
      "87:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "92:                                 [out] int *errStatus,",
      "93:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "94:                                 [in, count = 3050] uint8_t* encrypted_poly,",
      "97:         public void trustedGetEncryptedSecretShareAES(",
      "98:                                 [out]int *errStatus,",
      "99:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "100:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_skey,",
      "102:                                 [out, count = 193] char* result_str,",
      "103:                                 [out, count = 320] char* s_shareG2,",
      "104:                                 [in, string] char* pub_keyB,",
      "",
      "[Removed Lines]",
      "95:                                 uint32_t enc_len);",
      "101:                                 [out] uint32_t* dec_len,",
      "",
      "[Added Lines]",
      "95:                                 uint64_t enc_len);",
      "101:                                 [out] uint64_t* dec_len,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "110:                                 [out] int *errStatus,",
      "111:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "112:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "114:                                 [out, count = 10000] char* public_shares,",
      "115:                                 unsigned _t,",
      "116:                                 unsigned _n);",
      "",
      "[Removed Lines]",
      "113:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "113:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "133:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "134:                                 uint64_t key_len,",
      "135:                                 [out, count = SMALL_BUF_SIZE] uint8_t * encr_bls_key,",
      "138:         public void trustedBlsSignMessageAES (",
      "139:                                 [out] int *errStatus,",
      "140:                                 [out, count = TINY_BUF_SIZE] char* err_string,",
      "141:                                 [in, count = TINY_BUF_SIZE] uint8_t* encrypted_key,",
      "143:                                 [in, string] char* hashX ,",
      "144:                                 [in, string] char* hashY,",
      "145:                                 [out, count = SMALL_BUF_SIZE] char* signature);",
      "",
      "[Removed Lines]",
      "136:                                 [out] uint32_t *enc_bls_key_len);",
      "142:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "136:                                 [out] uint64_t *enc_bls_key_len);",
      "142:                                 uint64_t enc_len,",
      "",
      "---------------"
    ],
    "testw.cpp||testw.cpp": [
      "File: testw.cpp -> testw.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "127:     vector<char> pubKeyX(BUF_LEN, 0);",
      "128:     vector<char> pubKeyY(BUF_LEN, 0);",
      "131:     PRINT_SRC_LINE",
      "132:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "133:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "130:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160:     vector <uint8_t> encrPrivKey(BUF_LEN, 0);",
      "161:     vector<char> pubKeyX(BUF_LEN, 0);",
      "162:     vector<char> pubKeyY(BUF_LEN, 0);",
      "164:     PRINT_SRC_LINE",
      "165:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "166:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "163:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "163:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "177:     vector <uint8_t> encPrivKey(BUF_LEN, 0);",
      "178:     vector<char> pubKeyX(BUF_LEN, 0);",
      "179:     vector<char> pubKeyY(BUF_LEN, 0);",
      "182:     PRINT_SRC_LINE",
      "183:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encPrivKey.data(), &encLen, pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "180:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "181:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "291:     vector<char> errMsg(BUF_LEN, 0);",
      "293:     int errStatus = 0;",
      "296:     PRINT_SRC_LINE",
      "297:     auto status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), &encLen, 32);",
      "",
      "[Removed Lines]",
      "294:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "295:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "314:     vector<char> errMsg(BUF_LEN, 0);",
      "316:     int errStatus = 0;",
      "319:     unsigned t = 32, n = 32;",
      "320:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "317:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "318:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "363:     vector<char> result(BUF_LEN, 0);",
      "365:     int errStatus = 0;",
      "368:     vector <uint8_t> encryptedDKGSecret(BUF_LEN, 0);",
      "369:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "366:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "367:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "694: TEST_CASE_METHOD(TestFixture, \"AES encrypt/decrypt\", \"[aes-encrypt-decrypt]\") {",
      "695:     int errStatus = 0;",
      "696:     vector<char> errMsg(BUF_LEN, 0);",
      "698:     string key = SAMPLE_AES_KEY;",
      "699:     vector <uint8_t> encrypted_key(BUF_LEN, 0);",
      "",
      "[Removed Lines]",
      "697:     uint32_t encLen;",
      "",
      "[Added Lines]",
      "698:     uint64_t encLen;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cf20898e6175699aec260cd1b367bc0ffd9f5d61",
      "candidate_info": {
        "commit_hash": "cf20898e6175699aec260cd1b367bc0ffd9f5d61",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/cf20898e6175699aec260cd1b367bc0ffd9f5d61",
        "files": [
          "secure_enclave/AESUtils.c",
          "secure_enclave/AESUtils.h",
          "secure_enclave/secure_enclave.c"
        ],
        "message": "SKALE-3039",
        "before_after_code_files": [
          "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
          "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
            "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ],
          "candidate": [
            "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
            "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c": [
          "File: secure_enclave/AESUtils.c -> secure_enclave/AESUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include \"AESUtils.h\"",
          "36: #define SAFE_CHAR_BUF(__X__, __Y__)  ;char __X__ [ __Y__ ]; memset(__X__, 0, __Y__);",
          "",
          "[Removed Lines]",
          "33: sgx_aes_gcm_128bit_key_t AES_key[32];",
          "",
          "[Added Lines]",
          "33: sgx_aes_gcm_128bit_key_t AES_key[1024];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
          "78:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
          "79:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
          "80:                                                      NULL, 0,",
          "",
          "[Removed Lines]",
          "77:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&(AES_key[16]), (uint8_t*)message, len,",
          "",
          "[Added Lines]",
          "77:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&(AES_key[512]), (uint8_t*)message, len,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123:         return -2;",
          "124:   }",
          "127:                                                    encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE, len,",
          "128:                                                    (unsigned char*) message,",
          "129:                                                    encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
          "",
          "[Removed Lines]",
          "126:   sgx_status_t status = sgx_rijndael128GCM_decrypt(&(AES_key[16]),",
          "",
          "[Added Lines]",
          "126:   sgx_status_t status = sgx_rijndael128GCM_decrypt(&(AES_key[512]),",
          "",
          "---------------"
        ],
        "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h": [
          "File: secure_enclave/AESUtils.h -> secure_enclave/AESUtils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #ifndef SGXD_AESUTILS_H",
          "25: #define SGXD_AESUTILS_H",
          "29: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen,",
          "30:                 unsigned char type, unsigned char exportable, uint64_t* resultLen);",
          "",
          "[Removed Lines]",
          "27: extern sgx_aes_gcm_128bit_key_t AES_key[32];",
          "",
          "[Added Lines]",
          "27: extern sgx_aes_gcm_128bit_key_t AES_key[1024];",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "291:     RANDOM_CHAR_BUF(SEK_raw, SGX_AESGCM_KEY_SIZE);",
          "293:     carray2Hex((uint8_t*) SEK_raw, SGX_AESGCM_KEY_SIZE, sek_hex);",
          "297:     sealHexSEK(errStatus, errString, encrypted_sek, enc_len, sek_hex);",
          "",
          "[Removed Lines]",
          "294:     memcpy(AES_key[16], SEK_raw, SGX_AESGCM_KEY_SIZE);",
          "",
          "[Added Lines]",
          "294:     memcpy(AES_key[512], SEK_raw, SGX_AESGCM_KEY_SIZE);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "331:     uint64_t len;",
          "336:     SET_SUCCESS",
          "337:     clean:",
          "",
          "[Removed Lines]",
          "334:     hex2carray(aes_key_hex, &len, (uint8_t *) (AES_key[16]));",
          "",
          "[Added Lines]",
          "334:     hex2carray(aes_key_hex, &len, (uint8_t *) (AES_key[512]));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "349:     CHECK_STATE(sek_hex);",
          "351:     uint64_t len;",
          "355:     sealHexSEK(errStatus, errString, encrypted_sek, enc_len, (char *)sek_hex);",
          "",
          "[Removed Lines]",
          "352:     hex2carray(sek_hex, &len, (uint8_t *) (AES_key[16]));",
          "",
          "[Added Lines]",
          "352:     hex2carray(sek_hex, &len, (uint8_t *) (AES_key[512]));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c7b121969ae45c1da8f05ee0b984b9e1635197de",
      "candidate_info": {
        "commit_hash": "c7b121969ae45c1da8f05ee0b984b9e1635197de",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/c7b121969ae45c1da8f05ee0b984b9e1635197de",
        "files": [
          "BLSCrypto.cpp",
          "DKGCrypto.cpp",
          "ECDSACrypto.cpp",
          "LevelDB.cpp",
          "SGXRegistrationServer.cpp",
          "SGXWalletServer.cpp",
          "SGXWalletServer.hpp",
          "ServerDataChecker.cpp",
          "ServerInit.cpp",
          "secure_enclave/DKGUtils.cpp",
          "secure_enclave/DKGUtils.h",
          "secure_enclave/Makefile.am",
          "secure_enclave/Makefile.in",
          "secure_enclave/secure_enclave.c",
          "sgxwallet.c",
          "sgxwallet.h",
          "sgxwallet_common.h",
          "testw.cpp"
        ],
        "message": "SKALE-1795 Add data checks sent to SGXWalletServer",
        "before_after_code_files": [
          "BLSCrypto.cpp||BLSCrypto.cpp",
          "DKGCrypto.cpp||DKGCrypto.cpp",
          "ECDSACrypto.cpp||ECDSACrypto.cpp",
          "LevelDB.cpp||LevelDB.cpp",
          "SGXRegistrationServer.cpp||SGXRegistrationServer.cpp",
          "SGXWalletServer.cpp||SGXWalletServer.cpp",
          "SGXWalletServer.hpp||SGXWalletServer.hpp",
          "ServerDataChecker.cpp||ServerDataChecker.cpp",
          "ServerInit.cpp||ServerInit.cpp",
          "secure_enclave/DKGUtils.cpp||secure_enclave/DKGUtils.cpp",
          "secure_enclave/DKGUtils.h||secure_enclave/DKGUtils.h",
          "secure_enclave/Makefile.am||secure_enclave/Makefile.am",
          "secure_enclave/Makefile.in||secure_enclave/Makefile.in",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "sgxwallet.c||sgxwallet.c",
          "sgxwallet.h||sgxwallet.h",
          "sgxwallet_common.h||sgxwallet_common.h",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "BLSCrypto.cpp||BLSCrypto.cpp": [
          "File: BLSCrypto.cpp -> BLSCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "135: bool sign(const char* _encryptedKeyHex, const char* _hashHex, size_t _t, size_t _n, size_t _signerIndex,",
          "136:     char* _sig) {",
          "140:   auto keyStr = std::make_shared<std::string>(_encryptedKeyHex);",
          "",
          "[Removed Lines]",
          "138:   std::cerr << \"ENTER SIGN\" << std::endl;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "153:   auto keyShare = std::make_shared<BLSPrivateKeyShareSGX>(keyStr, _t, _n);",
          "157:     auto sigShare = keyShare->signWithHelperSGX(hash, _signerIndex);",
          "",
          "[Removed Lines]",
          "155:   std::cerr << \"keyShare created\" << std::endl;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "173:   return true;",
          "",
          "[Removed Lines]",
          "171:   std::cerr<< \"sig \" << _sig <<std::endl;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "DKGCrypto.cpp||DKGCrypto.cpp": [
          "File: DKGCrypto.cpp -> DKGCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:     uint32_t enc_len = 0;",
          "83:     status = gen_dkg_secret (eid, &err_status, errMsg, encrypted_dkg_secret, &enc_len, _t);",
          "92:     char *hexEncrPoly = (char *) calloc(DKG_MAX_SEALED_LEN * 2 + 1, 1);//(4*BUF_LEN, 1);",
          "94:     carray2Hex(encrypted_dkg_secret, DKG_MAX_SEALED_LEN, hexEncrPoly);",
          "95:     std::string result(hexEncrPoly);",
          "99:     free(errMsg);",
          "100:     free(encrypted_dkg_secret);",
          "",
          "[Removed Lines]",
          "85:     std::cerr << \"gen_dkg_secret, status \" << err_status << \" err msg \" << errMsg << std::endl;",
          "88:     for ( int i = 0 ; i < 3050; i++)",
          "97:     std::cerr << \"in DKGCrypto encr len is \" << enc_len << std::endl;",
          "",
          "[Added Lines]",
          "84:     if ( err_status != 0){",
          "85:         throw RPCException(-666, errMsg ) ;",
          "86:     }",
          "88:     if (DEBUG_PRINT) {",
          "89:       std::cerr << \"gen_dkg_secret, status \" << err_status << \" err msg \" << errMsg << std::endl;",
          "92:          for ( int i = 0 ; i < 3050; i++)",
          "95:       std::cerr << \"in DKGCrypto encr len is \" << enc_len << std::endl;",
          "96:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:   char* errMsg1 = (char*) calloc(1024,1);",
          "109:   int err_status = 0;",
          "113:   char* public_shares = (char*)calloc(10000, 1);",
          "115:   uint64_t enc_len = 0;",
          "",
          "[Removed Lines]",
          "112:   std::cerr << \"got encr poly size \" << strlen(encryptedPolyHex) << std::endl;",
          "",
          "[Added Lines]",
          "117:   if (DEBUG_PRINT) {",
          "119:     std::cerr << \"got encr poly size \" << strlen(encryptedPolyHex) << std::endl;",
          "120:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "118:   if (!hex2carray2(encryptedPolyHex, &enc_len, encr_dkg_poly, 6100)){",
          "119:       throw RPCException(INVALID_HEX, \"Invalid encryptedPolyHex\");",
          "120:   }",
          "126:   uint32_t len;",
          "127:   status = get_public_shares(eid, &err_status, errMsg1, encr_dkg_poly, len, public_shares, t, n);",
          "130:   }",
          "138:   std::vector <std::string> G2_strings = SplitString( public_shares, ',');",
          "139:   std::vector <std::vector <std::string>> pub_shares_vect;",
          "",
          "[Removed Lines]",
          "121:   std::cerr << \"enc len \" << enc_len << std::endl;",
          "123:   for ( int i = 0 ; i < 3050; i++)",
          "128:   if ( status != 0){",
          "131:   std::cerr << \"err msg \" << errMsg1 << std::endl;",
          "133:   std::cerr << \"public_shares:\" << std::endl;",
          "134:   std::cerr << public_shares << std::endl;",
          "136:   printf(\"\\nget_public_shares status: %d error %s \\n\\n\", err_status, errMsg1);",
          "",
          "[Added Lines]",
          "131:   if (DEBUG_PRINT) {",
          "132:     std::cerr << \"enc len \" << enc_len << std::endl;",
          "134:     for ( int i = 0 ; i < 3050; i++)",
          "136:   }",
          "140:   if ( err_status != 0){",
          "141:     throw RPCException(-666, errMsg1 );",
          "144:   if (DEBUG_PRINT) {",
          "145:     std::cerr << \"err msg \" << errMsg1 << std::endl;",
          "147:     std::cerr << \"public_shares:\" << std::endl;",
          "148:     std::cerr << public_shares << std::endl;",
          "150:     printf(\"\\nget_public_shares status: %d error %s \\n\\n\", err_status, errMsg1);",
          "151:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "161:   }",
          "163:   status = set_encrypted_dkg_poly(eid, &err_status, errMsg1, encr_dkg_poly);",
          "165:   std::string result;",
          "166:   char *hexEncrKey = (char *) calloc(2 * BUF_LEN, 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179:   if ( status != SGX_SUCCESS || err_status!=0){",
          "180:     throw RPCException(-666, errMsg1 );",
          "181:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "172:     char cur_share[193];",
          "173:     char s_shareG2[320];",
          "174:     std::string pub_keyB = publicKeys.at(i);//publicKeys.substr(128*i, 128*i + 128);",
          "176:     char pubKeyB[129];",
          "177:     strncpy(pubKeyB, pub_keyB.c_str(), 128);",
          "178:     pubKeyB[128] = 0;",
          "179:     get_encr_sshare(eid, &err_status, errMsg1, encrypted_skey, &dec_len,",
          "180:                    cur_share, s_shareG2, pubKeyB, t, n, i + 1 );",
          "182:     result += cur_share;",
          "186:     carray2Hex(encrypted_skey, dec_len, hexEncrKey);",
          "188:     std::string DHKey_name = \"DKG_DH_KEY_\" + polyName + \"_\" + std::to_string(i) + \":\";",
          "",
          "[Removed Lines]",
          "175:     std::cerr << \"pub_keyB is \" << pub_keyB << std::endl;",
          "185:     std::cerr << \"dec len is \" << dec_len << std::endl;",
          "",
          "[Added Lines]",
          "193:     if (DEBUG_PRINT) {",
          "194:       std::cerr << \"pub_keyB is \" << pub_keyB << std::endl;",
          "195:     }",
          "201:     if (err_status != 0){",
          "202:       throw RPCException(-666, errMsg1);",
          "203:     }",
          "208:     if (DEBUG_PRINT) {",
          "209:       std::cerr << \"dec len is \" << dec_len << std::endl;",
          "210:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "191:     writeDataToDB(DHKey_name, hexEncrKey);",
          "193:     std::string shareG2_name = \"shareG2_\" + polyName + \"_\" + std::to_string(i) + \":\";",
          "196:     writeDataToDB(shareG2_name, s_shareG2);",
          "202:   }",
          "",
          "[Removed Lines]",
          "194:     std::cerr << \"name to write to db is \" << shareG2_name << std::endl;",
          "195:     std::cerr << \"s_shareG2: \" << s_shareG2 << std::endl;",
          "198:     std::cerr << errMsg1 << std::endl << std::endl;",
          "",
          "[Added Lines]",
          "219:     if (DEBUG_PRINT) {",
          "220:       std::cerr << \"name to write to db is \" << shareG2_name << std::endl;",
          "221:       std::cerr << \"s_shareG2: \" << s_shareG2 << std::endl;",
          "222:     }",
          "225:     if (DEBUG_PRINT) {",
          "226:       std::cerr << errMsg1 << std::endl << std::endl;",
          "230:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "218:     if (!hex2carray(encryptedKeyHex, &dec_key_len, encr_key)){",
          "219:         throw RPCException(INVALID_HEX, \"Invalid encryptedPolyHex\");",
          "220:     }",
          "228:     char pshares[8193];",
          "229:     strncpy(pshares, publicShares, strlen(publicShares) + 1);",
          "233:     dkg_verification(eid, &err_status, errMsg1, pshares, encr_sshare, encr_key, dec_key_len, t, ind, &result);",
          "237:     free(errMsg1);",
          "241:     return result;",
          "242: }",
          "244: bool CreateBLSShare( const std::string& BLSKeyName, const char * s_shares, const char * encryptedKeyHex){",
          "246:   char* errMsg1 = (char*) calloc(1024,1);",
          "247:   int err_status = 0;",
          "",
          "[Removed Lines]",
          "224:     int result ;",
          "227:     std::cerr << \"publicShares length is \" << strlen(publicShares) << std::endl;",
          "235:     std::cerr << \"errMsg1: \" << errMsg1 << std::endl;",
          "240:     std::cerr << \"result is \" << result << std::endl;",
          "245:   std::cerr << \"ENTER CreateBLSShare\" << std::endl;",
          "",
          "[Added Lines]",
          "250:     int result;",
          "251:     if (DEBUG_PRINT) {",
          "257:       std::cerr << \"publicShares length is \" << strlen(publicShares)",
          "258:                 << std::endl;",
          "259:     }",
          "266:     if (result == 2){",
          "267:       throw RPCException(INVALID_HEX, \"Invalid public shares\");",
          "268:     }",
          "270:     if (DEBUG_PRINT) {",
          "271:       std::cerr << \"errMsg1: \" << errMsg1 << std::endl;",
          "272:       std::cerr << \"result is \" << result << std::endl;",
          "273:     }",
          "281:   if (DEBUG_PRINT) {",
          "282:     std::cerr << \"ENTER CreateBLSShare\" << std::endl;",
          "283:   }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "256:   uint32_t enc_bls_len = 0;",
          "259:   create_bls_key(eid, &err_status, errMsg1, s_shares, encr_key, dec_key_len, encr_bls_key, &enc_bls_len);",
          "262:   if ( err_status != 0){",
          "263:      std::cerr << \"ERROR IN ENCLAVE\" << std::endl;",
          "264:      throw RPCException(ERROR_IN_ENCLAVE, \"Something failed in enclave\");",
          "",
          "[Removed Lines]",
          "258:   std::cerr << \"BEFORE create_bls_key IN ENCLAVE \" << std::endl;",
          "261:   std::cerr << \"AFTER create_bls_key IN ENCLAVE er msg is  \" << errMsg1 << std::endl;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ECDSACrypto.cpp||ECDSACrypto.cpp": [
          "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:     throw RPCException(-666, errMsg) ;",
          "55:   }",
          "56:   std::vector<std::string> keys(3);",
          "58:   char *hexEncrKey = (char *) calloc(2*BUF_LEN, 1);",
          "59:   carray2Hex(encr_pr_key, enc_len, hexEncrKey);",
          "60:   keys.at(0) = hexEncrKey;",
          "",
          "[Removed Lines]",
          "57:   std::cerr << \"account key is \" << errMsg << std::endl;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:   unsigned long seed = rand_gen();",
          "68:   gmp_randstate_t state;",
          "69:   gmp_randinit_default(state);",
          "",
          "[Removed Lines]",
          "67:   std::cerr << \"seed is \" << seed << std::endl;",
          "",
          "[Added Lines]",
          "68:   if (DEBUG_PRINT) {",
          "69:     std::cerr << \"seed is \" << seed << std::endl;",
          "70:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "80:   keys.at(2) = rand_str;",
          "84:   gmp_randclear(state);",
          "85:   mpz_clear(rand32);",
          "",
          "[Removed Lines]",
          "82:   std::cerr << \"rand_str length is \" << strlen(rand_str) << std::endl;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "106:   }",
          "108:   status = get_public_ecdsa_key(eid, &err_status, errMsg, encr_pr_key, enc_len, pub_key_x, pub_key_y );",
          "110:     throw RPCException(-666, errMsg) ;",
          "111:   }",
          "112:   std::string pubKey = std::string(pub_key_x) + std::string(pub_key_y);//concatPubKeyWith0x(pub_key_x, pub_key_y);//",
          "119:   free(errMsg);",
          "120:   free(pub_key_x);",
          "",
          "[Removed Lines]",
          "109:   if ( err_status != 0){",
          "114:   std:: cerr << \"pubkey is \" << pubKey << std::endl;",
          "115:   std:: cerr << \"pubkey length is \" << pubKey.length() << std::endl;",
          "117:   std::cerr << \"err str \" << errMsg << std::endl;",
          "",
          "[Added Lines]",
          "112:   if (err_status != 0){",
          "117:   if (DEBUG_PRINT) {",
          "118:     std::cerr << \"pubkey is \" << pubKey << std::endl;",
          "119:     std::cerr << \"pubkey length is \" << pubKey.length() << std::endl;",
          "120:     std::cerr << \"err str \" << errMsg << std::endl;",
          "121:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "138:       throw RPCException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
          "139:   }",
          "147:   status = ecdsa_sign1(eid, &err_status, errMsg, encr_key, ECDSA_ENCR_LEN, (unsigned char*)hashHex, signature_r, signature_s, &signature_v, base );",
          "148:   if ( err_status != 0){",
          "149:     throw RPCException(-666, errMsg ) ;",
          "150:   }",
          "155:   if ( status != SGX_SUCCESS){",
          "156:     std::cerr << \"failed to sign \" << std::endl;",
          "",
          "[Removed Lines]",
          "141:   std::cerr << \"encryptedKeyHex: \"<< encryptedKeyHex << std::endl;",
          "143:   std::cerr << \"HASH: \"<< hashHex << std::endl;",
          "145:   std::cerr << \"encrypted len\" << dec_len << std::endl;",
          "152:   std::cerr << \"signature r in  ecdsa_sign_hash \"<< signature_r << std::endl;",
          "153:   std::cerr << \"signature s in  ecdsa_sign_hash \"<< signature_s << std::endl;",
          "",
          "[Added Lines]",
          "145:   if (DEBUG_PRINT) {",
          "146:     std::cerr << \"encryptedKeyHex: \" << encryptedKeyHex << std::endl;",
          "147:     std::cerr << \"HASH: \" << hashHex << std::endl;",
          "148:     std::cerr << \"encrypted len\" << dec_len << std::endl;",
          "149:   }",
          "156:   if (DEBUG_PRINT) {",
          "157:     std::cerr << \"signature r in  ecdsa_sign_hash \" << signature_r << std::endl;",
          "158:     std::cerr << \"signature s in  ecdsa_sign_hash \" << signature_s << std::endl;",
          "159:   }",
          "",
          "---------------"
        ],
        "LevelDB.cpp||LevelDB.cpp": [
          "File: LevelDB.cpp -> LevelDB.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: #include \"RPCException.h\"",
          "35: #include \"LevelDB.h\"",
          "37: using namespace leveldb;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: #include \"ServerInit.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:     throwExceptionOnError(status);",
          "",
          "[Removed Lines]",
          "65:     std::cerr << \"key to read from db: \" << _key <<std::endl;",
          "",
          "[Added Lines]",
          "66:     if (DEBUG_PRINT) {",
          "67:       std::cerr << \"key to read from db: \" << _key << std::endl;",
          "68:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "81:     throwExceptionOnError(status);",
          "84: }",
          "",
          "[Removed Lines]",
          "83:     std::cerr << \"written key \" << _key << std::endl;//<< \" value \" << _value << std::endl;",
          "",
          "[Added Lines]",
          "86:     if (DEBUG_PRINT) {",
          "87:       std::cerr << \"written key \" << _key  << std::endl;",
          "88:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "135:     throwExceptionOnError(status);",
          "138: }",
          "",
          "[Removed Lines]",
          "137:     std::cerr << \"key deleted \" << _key << std::endl;",
          "",
          "[Added Lines]",
          "142:     if (DEBUG_PRINT) {",
          "143:       std::cerr << \"key deleted \" << _key << std::endl;",
          "144:     }",
          "",
          "---------------"
        ],
        "SGXRegistrationServer.cpp||SGXRegistrationServer.cpp": [
          "File: SGXRegistrationServer.cpp -> SGXRegistrationServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: #include \"SGXRegistrationServer.h\"",
          "44: #include \"LevelDB.h\"",
          "46: SGXRegistrationServer *regs = nullptr;",
          "47: HttpServer *hs2 = nullptr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: int DEBUG_PRINT = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "139:           cert = ss.str();",
          "141:           infile.close();",
          "145:       }",
          "146:     }",
          "",
          "[Removed Lines]",
          "142:           std::string remove_crt = \"cd cert && rm -rf\" + hash + \".crt && rm -rf \" + hash + \".csr\";",
          "143:           system(remove_crt.c_str());",
          "",
          "[Added Lines]",
          "144:           std::string remove_crt = \"cd cert && rm -rf \" + hash + \".crt && rm -rf \" + hash + \".csr\";",
          "145:           if(system(remove_crt.c_str()) == 0){",
          "146:               std::cerr << \"cert removed\" << std::endl;",
          "147:           }",
          "148:           else{",
          "149:               std::cerr << \"cert was not removed\" << std::endl;",
          "150:           }",
          "",
          "---------------"
        ],
        "SGXWalletServer.cpp||SGXWalletServer.cpp": [
          "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: #include <unistd.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: #include \"ServerInit.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:   levelDb->visitKeys(&v, 100000000);",
          "76: }",
          "116:   s = new SGXWalletServer(*hs,",
          "119:   if (!s->StartListening()) {",
          "121:     exit(-1);",
          "122:   }",
          "126:   return 0;",
          "127: }",
          "142: Json::Value",
          "143: importBLSKeyShareImpl(const std::string &_keyShare, const std::string &_keyShareName, int t, int n, int index) {",
          "144:     Json::Value result;",
          "",
          "[Removed Lines]",
          "78: int init_server(bool check_certs) {",
          "79:   std::string rootCAPath = \"cert/rootCA.pem\";",
          "80:   std::string keyCAPath = \"cert/rootCA.key\";",
          "82:   if (access(rootCAPath.c_str(), F_OK) != 0 || access(keyCAPath.c_str(), F_OK) != 0){",
          "83:     std::cerr << \"YOU DO NOT HAVE ROOT CA CERTIFICATE\" << std::endl;",
          "84:     std::cerr << \"ROOT CA CERTIFICATE IS GOING TO BE CREATED\" << std::endl;",
          "86:     std::string genRootCACert = \"cd cert && ./create_CA\";",
          "88:     if (system(genRootCACert.c_str()) == 0){",
          "89:       std::cerr << \"ROOT CA CERTIFICATE IS SUCCESSFULLY GENERATED\" << std::endl;",
          "90:     }",
          "91:     else{",
          "92:       std::cerr << \"ROOT CA CERTIFICATE GENERATION FAILED\" << std::endl;",
          "93:       exit(-1);",
          "94:     }",
          "95:   }",
          "97:   std::string certPath = \"cert/SGXServerCert.crt\";",
          "98:   std::string keyPath = \"cert/SGXServerCert.key\";",
          "100:   if (access(certPath.c_str(), F_OK) != 0 || access(certPath.c_str(), F_OK) != 0){",
          "101:     std::cerr << \"YOU DO NOT HAVE SERVER CERTIFICATE \" << std::endl;",
          "102:     std::cerr << \"SERVER CERTIFICATE IS GOING TO BE CREATED\" << std::endl;",
          "104:     std::string genCert = \"cd cert && ./create_server_cert\";",
          "106:     if (system(genCert.c_str()) == 0){",
          "107:        std::cerr << \"SERVER CERTIFICATE IS SUCCESSFULLY GENERATED\" << std::endl;",
          "108:     }",
          "109:     else{",
          "110:       std::cerr << \"SERVER CERTIFICATE GENERATION FAILED\" << std::endl;",
          "111:       exit(-1);",
          "112:     }",
          "113:   }",
          "115:   hs = new HttpServer(BASE_PORT, certPath, keyPath, rootCAPath, check_certs, 10);",
          "117:                       JSONRPC_SERVER_V2); // hybrid server (json-rpc 1.0 & 2.0)",
          "120:     cerr << \"SGX Server could not start listening\" << endl;",
          "123:   else{",
          "124:     cerr << \"SGX Server started on port \" << BASE_PORT << endl;",
          "125:   }",
          "",
          "[Added Lines]",
          "133: int init_server(bool check_certs) { //without ssl",
          "135:   hs = new HttpServer(BASE_PORT + 3);",
          "137:                           JSONRPC_SERVER_V2); // hybrid server (json-rpc 1.0 & 2.0)",
          "139:     cerr << \"Server could not start listening\" << endl;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "252:         if (keys.size() == 0 ) {",
          "253:             throw RPCException(UNKNOWN_ERROR, \"key was not generated\");",
          "254:         }",
          "257:         std::string keyName = \"NEK:\" + keys.at(2);",
          "262:         writeDataToDB(keyName, keys.at(0));",
          "",
          "[Removed Lines]",
          "259:         std::cerr << \"keyname length is \" << keyName.length() << std::endl;",
          "260:         std::cerr <<\"key name generated: \" << keyName << std::endl;",
          "",
          "[Added Lines]",
          "258:         if (DEBUG_PRINT) {",
          "259:           std::cerr << \"write encr key\" << keys.at(0) << std::endl;",
          "260:           std::cerr << \"keyname length is \" << keyName.length() << std::endl;",
          "261:           std::cerr << \"key name generated: \" << keyName << std::endl;",
          "262:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "320:     result[\"signature_s\"] = \"\";",
          "322:     std::vector<std::string> sign_vect(3);",
          "330:     }",
          "332:     try {",
          "333:       if ( !checkECDSAKeyName(_keyName)){",
          "334:         throw RPCException(INVALID_ECDSA_KEY_NAME, \"Invalid ECDSA key name\");",
          "335:       }",
          "",
          "[Removed Lines]",
          "323:     std::cerr << \"entered ecdsaSignMessageHashImpl\" <<  messageHash << \"length \" << messageHash.length() << std::endl;",
          "324:     std::string cutHash = messageHash;",
          "325:     if (cutHash[0] == '0' && (cutHash[1] == 'x'||cutHash[1] == 'X')){",
          "326:       cutHash.erase(cutHash.begin(), cutHash.begin()+2);",
          "327:     }",
          "328:     while (cutHash[0] == '0'){",
          "329:       cutHash.erase(cutHash.begin(), cutHash.begin()+1);",
          "331:     std::cerr << \"Hash handled \" << cutHash << std::endl;",
          "",
          "[Added Lines]",
          "326:     if (DEBUG_PRINT) {",
          "327:       std::cerr << \"entered ecdsaSignMessageHashImpl\" << messageHash",
          "328:                 << \"length \" << messageHash.length() << std::endl;",
          "333:       std::string cutHash = messageHash;",
          "334:       if (cutHash[0] == '0' && (cutHash[1] == 'x'||cutHash[1] == 'X')){",
          "335:         cutHash.erase(cutHash.begin(), cutHash.begin() + 2);",
          "336:       }",
          "337:       while (cutHash[0] == '0'){",
          "338:         cutHash.erase(cutHash.begin(), cutHash.begin() + 1);",
          "339:       }",
          "341:       if (DEBUG_PRINT) {",
          "342:         std::cerr << \"Hash handled \" << cutHash << std::endl;",
          "343:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "340:         throw RPCException(-22, \"Invalid base\");",
          "341:       }",
          "349:       result[\"signature_v\"] = sign_vect.at(0);",
          "350:       result[\"signature_r\"] = sign_vect.at(1);",
          "351:       result[\"signature_s\"] = sign_vect.at(2);",
          "",
          "[Removed Lines]",
          "344:        std::shared_ptr<std::string> key_ptr = readFromDb(_keyName,\"\");",
          "346:        sign_vect = ecdsa_sign_hash(key_ptr->c_str(),cutHash.c_str(), base);",
          "348:       std::cerr << \"got signature_s \" << sign_vect.at(2) << std::endl;",
          "",
          "[Added Lines]",
          "355:       std::shared_ptr<std::string> key_ptr = readFromDb(_keyName,\"\");",
          "357:       sign_vect = ecdsa_sign_hash(key_ptr->c_str(), cutHash.c_str(), base);",
          "358:       if (sign_vect.size() != 3 ){",
          "359:         throw RPCException(INVALID_ECSDA_SIGNATURE, \"Invalid ecdsa signature\");",
          "360:       }",
          "362:       if (DEBUG_PRINT) {",
          "363:         std::cerr << \"got signature_s \" << sign_vect.at(2) << std::endl;",
          "364:       }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "377:          }",
          "378:          std::shared_ptr<std::string> key_ptr = readFromDb(keyName);",
          "379:          Pkey = get_ecdsa_pubkey( key_ptr->c_str());",
          "382:          result[\"PublicKey\"] = Pkey;",
          "384:     } catch (RPCException &_e) {",
          "",
          "[Removed Lines]",
          "380:          std::cerr << \"PublicKey \" << Pkey << std::endl;",
          "381:          std::cerr << \"PublicKey length\" << Pkey.length() << std::endl;",
          "",
          "[Added Lines]",
          "395:          if (DEBUG_PRINT) {",
          "396:            std::cerr << \"PublicKey \" << Pkey << std::endl;",
          "397:            std::cerr << \"PublicKey length\" << Pkey.length() << std::endl;",
          "398:          }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "386:         result[\"errorMessage\"] = _e.errString;",
          "387:     }",
          "391:     return result;",
          "392: }",
          "394: Json::Value generateDKGPolyImpl(const std::string& polyName, int t) {",
          "396:     Json::Value result;",
          "397:     result[\"status\"] = 0;",
          "398:     result[\"errorMessage\"] = \"\";",
          "",
          "[Removed Lines]",
          "395:    std::cerr <<  \" enter generateDKGPolyImpl\" << std::endl;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "403:     try {",
          "404:       if ( !checkName(polyName, \"POLY\")){",
          "406:       }",
          "409:       }",
          "410:       encrPolyHex = gen_dkg_poly(t);",
          "411:       writeDataToDB(polyName, encrPolyHex);",
          "414:     } catch (RPCException &_e) {",
          "415:         std::cerr << \" err str \" << _e.errString << std::endl;",
          "",
          "[Removed Lines]",
          "405:         throw RPCException(INVALID_POLY_NAME, \"Invalid polynomial name\");",
          "407:       if ( t <= 0){",
          "408:         throw RPCException(INVALID_DKG_PARAMS, \"Invalid parameters: n or t \");",
          "",
          "[Added Lines]",
          "420:         throw RPCException(INVALID_POLY_NAME, \"Invalid polynomial name, it should be like POLY:SCHAIN_ID:1:NODE_ID:1:DKG_ID:1\");",
          "422:       if ( t <= 0 || t > 32){",
          "423:         throw RPCException(INVALID_DKG_PARAMS, \"Invalid parameter t \");",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "468:     try {",
          "469:         if (publicKeys.size() != n){",
          "472:         }",
          "474:           throw RPCException(INVALID_POLY_NAME, \"Invalid polynomial name\");",
          "475:         }",
          "476:         if( !check_n_t(t, n)){",
          "",
          "[Removed Lines]",
          "470:             result[\"errorMessage\"] = \"wrong number of public keys\";",
          "471:             return result;",
          "473:       if ( !checkName(polyName, \"POLY\")){",
          "",
          "[Added Lines]",
          "483:           throw RPCException(INVALID_DKG_PARAMS, \"wrong number of public keys\");",
          "485:         if ( !checkName(polyName, \"POLY\")){",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "492:         result[\"SecretShare\"] = s;",
          "494:     } catch (RPCException &_e) {",
          "496:         result[\"status\"] = _e.status;",
          "497:         result[\"errorMessage\"] = _e.errString;",
          "498:         result[\"SecretShare\"] = \"\";",
          "",
          "[Removed Lines]",
          "495:         std::cerr << \" err str \" << _e.errString << std::endl;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "519:     if( !check_n_t(t, n) || ind > n || ind < 0){",
          "520:       throw RPCException(INVALID_DKG_PARAMS, \"Invalid DKG parameters: n or t \");",
          "521:     }",
          "528:     std::shared_ptr<std::string> encryptedKeyHex_ptr = readFromDb(EthKeyName);",
          "532:       result[\"result\"] = false;",
          "533:     }",
          "536:   } catch (RPCException &_e) {",
          "538:     result[\"status\"] = _e.status;",
          "539:     result[\"errorMessage\"] = _e.errString;",
          "540:     result[\"result\"] = false;",
          "",
          "[Removed Lines]",
          "531:     if ( !VerifyShares(publicShares.c_str(), SecretShare.c_str(), encryptedKeyHex_ptr->c_str(),  t, n, ind )){",
          "537:     std::cerr << \" err str \" << _e.errString << std::endl;",
          "",
          "[Added Lines]",
          "534:     if ( !checkHex(SecretShare, SECRET_SHARE_NUM_BYTES)){",
          "535:       throw RPCException(INVALID_HEX, \"Invalid Secret share\");",
          "536:     }",
          "537:     if (publicShares.length() != 256 * t){",
          "538:       throw RPCException(INVALID_DKG_PARAMS, \"Invalid length of public shares\");",
          "539:     }",
          "543:     if ( !VerifyShares(publicShares.c_str(), SecretShare.c_str(), encryptedKeyHex_ptr->c_str(), t, n, ind )){",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "570:     if ( !checkName(BLSKeyName, \"BLS_KEY\")){",
          "571:       throw RPCException(INVALID_POLY_NAME, \"Invalid BLS key name\");",
          "572:     }",
          "573:     std::vector<std::string> sshares_vect;",
          "577:     std::shared_ptr<std::string> encryptedKeyHex_ptr = readFromDb(EthKeyName);",
          "",
          "[Removed Lines]",
          "574:     std::cerr << \"sshares from json are \" << SecretShare << std::endl;",
          "",
          "[Added Lines]",
          "581:     if( !check_n_t(t, n)){",
          "582:       throw RPCException(INVALID_DKG_PARAMS, \"Invalid DKG parameters: n or t \");",
          "583:     }",
          "585:     if (DEBUG_PRINT) {",
          "586:       std::cerr << \"sshares from json are \" << SecretShare << std::endl;",
          "587:     }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "591:      }",
          "593:   } catch (RPCException &_e) {",
          "595:     result[\"status\"] = _e.status;",
          "596:     result[\"errorMessage\"] = _e.errString;",
          "",
          "[Removed Lines]",
          "594:     std::cerr << \" err str \" << _e.errString << std::endl;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "737: Json::Value SGXWalletServer::ecdsaSignMessageHash(int base, const std::string &_keyName, const std::string &messageHash ) {",
          "738:   lock_guard<recursive_mutex> lock(m);",
          "739:   std::cerr << \"entered ecdsaSignMessageHash\" << std::endl;",
          "741:   return ecdsaSignMessageHashImpl(base,_keyName, messageHash);",
          "742: }",
          "",
          "[Removed Lines]",
          "740:   std::cerr << \"MessageHash first \" << messageHash << std::endl;",
          "",
          "[Added Lines]",
          "752:   if (DEBUG_PRINT) {",
          "753:     std::cerr << \"MessageHash first \" << messageHash << std::endl;",
          "754:   }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "834:   }",
          "836:   levelDb->writeString(key, value);",
          "838: }",
          "",
          "[Removed Lines]",
          "837:   std::cerr << Name << \" is written to db \" << std::endl;",
          "",
          "[Added Lines]",
          "851:   if (DEBUG_PRINT) {",
          "852:     std::cerr << Name << \" is written to db \" << std::endl;",
          "853:   }",
          "",
          "---------------"
        ],
        "SGXWalletServer.hpp||SGXWalletServer.hpp": [
          "File: SGXWalletServer.hpp -> SGXWalletServer.hpp"
        ],
        "ServerDataChecker.cpp||ServerDataChecker.cpp": [
          "File: ServerDataChecker.cpp -> ServerDataChecker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:     return false;",
          "159:   }",
          "161:   if ( t < 0 || n < 0){",
          "162:     return false;",
          "163:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161:   if (n > 32){",
          "162:     return false;",
          "163:   }",
          "",
          "---------------"
        ],
        "ServerInit.cpp||ServerInit.cpp": [
          "File: ServerInit.cpp -> ServerInit.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:     sgxServerInited = 1;",
          "129:     init_server(check_cert);",
          "132:     init_enclave();",
          "133:     std::cerr << \"enclave inited\" << std::endl;",
          "134:     init_daemon();",
          "",
          "[Removed Lines]",
          "130:     init_registration_server(sign_automatically);",
          "131:     init_csrmanager_server();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "secure_enclave/DKGUtils.cpp||secure_enclave/DKGUtils.cpp": [
          "File: secure_enclave/DKGUtils.cpp -> secure_enclave/DKGUtils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:     return tokens;",
          "108: }",
          "127: }",
          "129: libff::alt_bn128_Fr PolynomialValue(const std::vector<libff::alt_bn128_Fr>& pol, libff::alt_bn128_Fr point, unsigned _t) {",
          "",
          "[Removed Lines]",
          "110: void gen_dkg_poly( char* secret, unsigned _t ){",
          "111:     libff::init_alt_bn128_params();",
          "112:     std::string result;",
          "113:     for (size_t i = 0; i < _t; ++i) {",
          "114:         libff::alt_bn128_Fr cur_coef = libff::alt_bn128_Fr::random_element();",
          "116:         while (i == _t - 1 && cur_coef == libff::alt_bn128_Fr::zero()) {",
          "117:             cur_coef = libff::alt_bn128_Fr::random_element();",
          "118:         }",
          "119:        result += stringFromFr(cur_coef);",
          "120:        result += \":\";",
          "121:     }",
          "122:     strncpy(secret, result.c_str(), result.length() + 1);",
          "124:     if (strlen(secret) == 0){",
          "125:         throw std::exception();",
          "126:     }",
          "",
          "[Added Lines]",
          "110: int gen_dkg_poly( char* secret, unsigned _t ){",
          "111:   libff::init_alt_bn128_params();",
          "112:   std::string result;",
          "113:   for (size_t i = 0; i < _t; ++i) {",
          "114:      libff::alt_bn128_Fr cur_coef = libff::alt_bn128_Fr::random_element();",
          "116:      while (i == _t - 1 && cur_coef == libff::alt_bn128_Fr::zero()) {",
          "117:        cur_coef = libff::alt_bn128_Fr::random_element();",
          "118:      }",
          "119:      result += stringFromFr(cur_coef);",
          "120:      result += \":\";",
          "121:   }",
          "122:   strncpy(secret, result.c_str(), result.length() + 1);",
          "124:   if (strlen(secret) == 0) {",
          "125:     return 1;",
          "126:   }",
          "128:   return 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159: }",
          "162:                         unsigned _t, unsigned _n, unsigned ind) {",
          "164:   libff::init_alt_bn128_params();",
          "165:   char symbol = ':';",
          "166:   std::vector<libff::alt_bn128_Fr> poly =  SplitStringToFr(decrypted_koefs, symbol);",
          "168:   libff::alt_bn128_Fr secret_share = PolynomialValue(poly, libff::alt_bn128_Fr(ind), _t);",
          "169:   std::string cur_share = ConvertToString(secret_share, 16);//stringFromFr(secret_share);",
          "",
          "[Removed Lines]",
          "161: void calc_secret_share(const char* decrypted_koefs, char * s_share,",
          "",
          "[Added Lines]",
          "164: int calc_secret_share(const char* decrypted_koefs, char * s_share,",
          "170:   if ( poly.size() != _t){",
          "171:     return 1;",
          "172:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "171:   cur_share.insert(0, n_zeroes, '0');",
          "173:   strncpy(s_share, cur_share.c_str(), cur_share.length() + 1);",
          "175: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "180:   return 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "196: }",
          "199:   libff::init_alt_bn128_params();",
          "201:   mpz_t share;",
          "202:   mpz_init(share);",
          "205:   char arr[mpz_sizeinbase (share, 10) + 2];",
          "206:   char * share_str = mpz_get_str(arr, 10, share);",
          "",
          "[Removed Lines]",
          "198: void calc_secret_shareG2(const char* s_share, char * s_shareG2){",
          "203:   mpz_set_str(share, s_share, 16);",
          "",
          "[Added Lines]",
          "205: int calc_secret_shareG2(const char* s_share, char * s_shareG2){",
          "210:   if (mpz_set_str(share, s_share, 16) == -1){",
          "211:     mpz_clear(share);",
          "212:     return 1;",
          "213:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "214:   std::string secret_shareG2_str = ConvertG2ToString(secret_shareG2);",
          "216:   strncpy(s_shareG2, secret_shareG2_str.c_str(), secret_shareG2_str.length() + 1);",
          "217: }",
          "220:                         unsigned _t) {",
          "221:   libff::init_alt_bn128_params();",
          "223:   std::string result;",
          "224:   char symbol = ':';",
          "225:   std::vector<libff::alt_bn128_Fr> poly =  SplitStringToFr(decrypted_koefs, symbol);",
          "226:   for (size_t i = 0; i < _t; ++i) {",
          "227:     libff::alt_bn128_G2 pub_share = poly.at(i) * libff::alt_bn128_G2::one() ;",
          "228:     pub_share.to_affine_coordinates();",
          "",
          "[Removed Lines]",
          "219: void calc_public_shares(const char* decrypted_koefs, char * public_shares,",
          "",
          "[Added Lines]",
          "228:   return 0;",
          "231: int calc_public_shares(const char* decrypted_koefs, char * public_shares,",
          "238:   if (poly.size() != _t){",
          "239:     return 1;",
          "240:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "230:     result += pub_share_str + \",\";",
          "231:   }",
          "232:   strncpy(public_shares, result.c_str(), result.length());",
          "233: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "248:   return 0;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "237:   mpz_t dec;",
          "238:   mpz_init(dec);",
          "242:   char arr[mpz_sizeinbase (dec, 10) + 2];",
          "243:   char * result = mpz_get_str(arr, 10, dec);",
          "",
          "[Removed Lines]",
          "240:   mpz_set_str(dec, hex_str.c_str(), 16);",
          "",
          "[Added Lines]",
          "256:   if (mpz_set_str(dec, hex_str.c_str(), 16) == -1){",
          "257:     mpz_clear(dec);",
          "258:     return \"false\";",
          "259:   }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "260:     libff::alt_bn128_G2 pub_share;",
          "262:     uint64_t pos0 = share_length * i;",
          "268:     pub_share.Z = libff::alt_bn128_Fq2::one();",
          "",
          "[Removed Lines]",
          "263:     pub_share.X.c0 = libff::alt_bn128_Fq(ConvertHexToDec(pub_shares_str.substr(pos0, coord_length)).c_str());",
          "264:     pub_share.X.c1 = libff::alt_bn128_Fq(ConvertHexToDec(pub_shares_str.substr(pos0 + coord_length, coord_length)).c_str());",
          "265:     pub_share.Y.c0 = libff::alt_bn128_Fq(ConvertHexToDec(pub_shares_str.substr(pos0 + 2 * coord_length, coord_length)).c_str());",
          "266:     pub_share.Y.c1 = libff::alt_bn128_Fq(ConvertHexToDec(pub_shares_str.substr(pos0 + 3 * coord_length, coord_length)).c_str());",
          "",
          "[Added Lines]",
          "282:     std::string x_c0_str = ConvertHexToDec(pub_shares_str.substr(pos0, coord_length));",
          "283:     std::string x_c1_str = ConvertHexToDec(pub_shares_str.substr(pos0 + coord_length, coord_length));",
          "284:     std::string y_c0_str = ConvertHexToDec(pub_shares_str.substr(pos0 + 2 * coord_length, coord_length));",
          "285:     std::string y_c1_str = ConvertHexToDec(pub_shares_str.substr(pos0 + 3 * coord_length, coord_length));",
          "286:     if (x_c0_str == \"false\" || x_c1_str == \"false\" || y_c0_str == \"false\" || y_c1_str == \"false\"){",
          "287:       return 2;",
          "288:     }",
          "289:     pub_share.X.c0 = libff::alt_bn128_Fq(x_c0_str.c_str());",
          "290:     pub_share.X.c1 = libff::alt_bn128_Fq(x_c1_str.c_str());",
          "291:     pub_share.Y.c0 = libff::alt_bn128_Fq(y_c0_str.c_str());",
          "292:     pub_share.Y.c1 = libff::alt_bn128_Fq(y_c1_str.c_str());",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "297:   libff::alt_bn128_G2  val2 = sshare * libff::alt_bn128_G2::one();",
          "300:    strncpy(public_shares, ConvertToString(val2.X.c0).c_str(), ConvertToString(val2.X.c0).length());",
          "301:    strncpy(public_shares + ConvertToString(val2.X.c0).length(), \":\", 1);",
          "302:   strncpy(public_shares + ConvertToString(val2.X.c0).length() + 1, ConvertToString(val2.X.c1).c_str(), 77);",
          "",
          "[Removed Lines]",
          "299:     memset(public_shares, 0, strlen(public_shares));",
          "",
          "[Added Lines]",
          "324:    memset(public_shares, 0, strlen(public_shares));",
          "",
          "---------------"
        ],
        "secure_enclave/DKGUtils.h||secure_enclave/DKGUtils.h": [
          "File: secure_enclave/DKGUtils.h -> secure_enclave/DKGUtils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #include <sgx_tgmp.h>",
          "37: EXTERNC void calc_secret_shares(const char* decrypted_koefs, char * secret_shares,",
          "38:                         unsigned _t, unsigned _n);",
          "41:                                unsigned _t, unsigned _n, unsigned ind);",
          "44:                         unsigned _t);",
          "46: EXTERNC int Verification ( char * public_shares, mpz_t decr_secret_share, int _t, int ind);",
          "",
          "[Removed Lines]",
          "35: EXTERNC void gen_dkg_poly( char* secret, unsigned _t);",
          "40: EXTERNC void calc_secret_share(const char* decrypted_koefs, char * s_share,",
          "43: EXTERNC void calc_public_shares(const char* decrypted_koefs, char * public_shares,",
          "",
          "[Added Lines]",
          "35: EXTERNC int gen_dkg_poly( char* secret, unsigned _t);",
          "40: EXTERNC int calc_secret_share(const char* decrypted_koefs, char * s_share,",
          "43: EXTERNC int calc_public_shares(const char* decrypted_koefs, char * public_shares,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50: EXTERNC void calc_secret_shareG2_old(const char* public_shares, char * s_shareG2,",
          "51:                                  unsigned _t, unsigned ind);",
          "54: #endif //SGXD_DKGUTILS_H",
          "",
          "[Removed Lines]",
          "53: EXTERNC void calc_secret_shareG2(const char* s_share, char * s_shareG2);",
          "",
          "[Added Lines]",
          "53: EXTERNC int calc_secret_shareG2(const char* s_share, char * s_shareG2);",
          "",
          "---------------"
        ],
        "secure_enclave/Makefile.am||secure_enclave/Makefile.am": [
          "File: secure_enclave/Makefile.am -> secure_enclave/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: AM_CPPFLAGS +=  -Wall -Wno-implicit-function-declaration $(TGMP_CPPFLAGS) -I./trusted_libff -I../trusted_libff -I../sgx-sdk-build/sgxsdk/include/libcxx \\",
          "67:               -I../intel-sgx-ssl/Linux/package/include",
          "71: ## Additional files to remove with 'make clean'. This list needs",
          "",
          "[Removed Lines]",
          "68: AM_CXXFLAGS += -fno-builtin",
          "",
          "[Added Lines]",
          "68: AM_CXXFLAGS += -fno-builtin -fstack-protector-strong",
          "",
          "---------------"
        ],
        "secure_enclave/Makefile.in||secure_enclave/Makefile.in": [
          "File: secure_enclave/Makefile.in -> secure_enclave/Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "333:  -I./trusted_libff -I../trusted_libff \\",
          "334:  -I../sgx-sdk-build/sgxsdk/include/libcxx \\",
          "335:  -I../intel-sgx-ssl/Linux/package/include",
          "337: AM_LDFLAGS = @SGX_ENCLAVE_LDFLAGS@ $(TGMP_LDFLAGS) -L./tgmp-build/lib \\",
          "338:  -L../tgmp-build/lib",
          "339: CLEANFILES = $(ENCLAVE).signed.so secure_enclave_t.c \\",
          "",
          "[Removed Lines]",
          "336: AM_CXXFLAGS = @SGX_ENCLAVE_CXXFLAGS@ @SGX_ENCLAVE_CFLAGS@ -fno-builtin",
          "",
          "[Added Lines]",
          "336: AM_CXXFLAGS = @SGX_ENCLAVE_CXXFLAGS@ @SGX_ENCLAVE_CFLAGS@ -fno-builtin \\",
          "337:  -fstack-protector-strong",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:   if (!point_cmp(Pkey, Pkey_test)){",
          "238:     snprintf(err_string, BUF_LEN,\"Points are not equal\");",
          "240:   }",
          "242:   int base = 16;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240:     return;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "266:   point_clear(Pkey);",
          "267: }",
          "270: void encrypt_key(int *err_status, char *err_string, char *key,",
          "271:                  uint8_t *encrypted_key, uint32_t *enc_len) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "270: void ecdsa_sign1(int *err_status, char *err_string, uint8_t *encrypted_key, uint32_t dec_len,",
          "271:                  unsigned char* hash, char * sig_r, char * sig_s, uint8_t* sig_v, int base) {",
          "273:     domain_parameters curve = domain_parameters_init();",
          "274:     domain_parameters_load_curve(curve, secp256k1);",
          "276:     char skey[ECDSA_SKEY_LEN];",
          "278:     sgx_status_t status = sgx_unseal_data(",
          "279:             (const sgx_sealed_data_t *)encrypted_key, NULL, 0, skey, &dec_len);",
          "281:     if (status != SGX_SUCCESS) {",
          "283:         snprintf(err_string, BUF_LEN,\"sgx_unseal_data failed - encrypted_key with status %d\", status);",
          "284:         return;",
          "285:     }",
          "287:     snprintf(err_string, BUF_LEN,\"pr key is %s length %d \", skey, strlen(skey));",
          "288:     mpz_t skey_mpz;",
          "289:     mpz_init(skey_mpz);",
          "290:     if (mpz_set_str(skey_mpz, skey, ECDSA_SKEY_BASE) == -1){",
          "292:         snprintf(err_string, BUF_LEN ,\"invalid secret key\");",
          "293:         mpz_clear(skey_mpz);",
          "294:         return;",
          "295:     }",
          "298:     mpz_init(test_skey);",
          "299:     mpz_set_str(test_skey, \"4160780231445160889237664391382223604184857153814275770598791864649971919844\", 10);",
          "301:     if(!mpz_cmp(skey,test_skey)){",
          "302:       snprintf(err_string, BUF_LEN,\"keys are not equal \");",
          "305:     mpz_t msg_mpz;",
          "306:     mpz_init(msg_mpz);",
          "307:     if (mpz_set_str(msg_mpz, hash, 16) == -1){",
          "309:         snprintf(err_string, BUF_LEN ,\"invalid message hash\");",
          "310:         mpz_clear(msg_mpz);",
          "311:         return;",
          "312:     }",
          "315:     signature sign = signature_init();",
          "317:     signature_sign( sign, msg_mpz, skey_mpz, curve);",
          "319:     point Pkey = point_init();",
          "321:     signature_generate_key(Pkey, skey_mpz, curve);",
          "323:     if ( !signature_verify(msg_mpz, sign, Pkey, curve) ){",
          "325:          snprintf(err_string, BUF_LEN,\"signature is not verified! \");",
          "326:         return;",
          "327:     }",
          "333:     char arr_m[mpz_sizeinbase (msg_mpz, 16) + 2];",
          "334:     char* msg = mpz_get_str(arr_m, 16, msg_mpz);",
          "335:     snprintf(err_string, BUF_LEN,\"message is %s \", arr_m);",
          "337:     char arr_r[mpz_sizeinbase (sign->r, base) + 2];",
          "338:     char* r = mpz_get_str(arr_r, base, sign->r);",
          "339:     strncpy(sig_r, arr_r, 1024);",
          "341:     char arr_s[mpz_sizeinbase (sign->s, base) + 2];",
          "342:     char* s = mpz_get_str(arr_s, base, sign->s);",
          "343:     strncpy(sig_s, arr_s, 1024);",
          "347:     mpz_clear(skey_mpz);",
          "348:     mpz_clear(msg_mpz);",
          "349:     domain_parameters_clear(curve);",
          "350:     signature_clear(sign);",
          "351:     point_clear(Pkey);",
          "353: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "421:   char* dkg_secret = (char*)malloc(DKG_BUFER_LENGTH);",
          "425:   snprintf(err_string, BUF_LEN,\"poly is %s \", dkg_secret);",
          "",
          "[Removed Lines]",
          "423:   gen_dkg_poly(dkg_secret, _t);",
          "",
          "[Added Lines]",
          "509:   if (gen_dkg_poly(dkg_secret, _t) != 0 ){",
          "511:      return;",
          "512:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "429:   sgx_status_t status = sgx_seal_data(0, NULL, DKG_BUFER_LENGTH, (uint8_t*)dkg_secret, sealedLen,(sgx_sealed_data_t*)encrypted_dkg_secret);",
          "432:     snprintf(err_string, BUF_LEN,\"SGX seal data failed\");",
          "433:   }",
          "",
          "[Removed Lines]",
          "431:   if(  status !=  SGX_SUCCESS) {",
          "",
          "[Added Lines]",
          "520:   if(status !=  SGX_SUCCESS) {",
          "523:     return;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "486:   }",
          "547:     return;",
          "548:   }",
          "576: void set_encrypted_dkg_poly(int *err_status, char *err_string, uint8_t* encrypted_poly){",
          "",
          "[Removed Lines]",
          "489:   calc_public_shares(decrypted_dkg_secret, public_shares, _t);",
          "490:   free(decrypted_dkg_secret);",
          "491: }",
          "493: void ecdsa_sign1(int *err_status, char *err_string, uint8_t *encrypted_key, uint32_t dec_len,",
          "494:                          unsigned char* hash, char * sig_r, char * sig_s, uint8_t* sig_v, int base) {",
          "496:   domain_parameters curve = domain_parameters_init();",
          "497:   domain_parameters_load_curve(curve, secp256k1);",
          "499:   char skey[ECDSA_SKEY_LEN];",
          "501:   sgx_status_t status = sgx_unseal_data(",
          "502:       (const sgx_sealed_data_t *)encrypted_key, NULL, 0, skey, &dec_len);",
          "504:   if (status != SGX_SUCCESS) {",
          "505:     snprintf(err_string, BUF_LEN,\"sgx_unseal_data failed - encrypted_key with status %d\", status);",
          "506:     return;",
          "507:   }",
          "509:   snprintf(err_string, BUF_LEN,\"pr key is %s length %d \", skey, strlen(skey));",
          "510:   mpz_t skey_mpz;",
          "511:   mpz_init(skey_mpz);",
          "512:   if (mpz_set_str(skey_mpz, skey, ECDSA_SKEY_BASE) == -1){",
          "514:       snprintf(err_string, BUF_LEN ,\"invalid secret key\");",
          "515:       mpz_clear(skey_mpz);",
          "516:       return;",
          "517:   }",
          "520:   mpz_init(test_skey);",
          "521:   mpz_set_str(test_skey, \"4160780231445160889237664391382223604184857153814275770598791864649971919844\", 10);",
          "523:   if(!mpz_cmp(skey,test_skey)){",
          "524:     snprintf(err_string, BUF_LEN,\"keys are not equal \");",
          "527:   mpz_t msg_mpz;",
          "528:   mpz_init(msg_mpz);",
          "529:   if (mpz_set_str(msg_mpz, hash, 16) == -1){",
          "531:       snprintf(err_string, BUF_LEN ,\"invalid message hash\");",
          "532:       mpz_clear(msg_mpz);",
          "533:       return;",
          "534:   }",
          "537:   signature sign = signature_init();",
          "539:   signature_sign( sign, msg_mpz, skey_mpz, curve);",
          "541:   point Pkey = point_init();",
          "543:   signature_generate_key(Pkey, skey_mpz, curve);",
          "545:   if ( !signature_verify(msg_mpz, sign, Pkey, curve) ){",
          "546:     snprintf(err_string, BUF_LEN,\"signature is not verified! \");",
          "554:   char arr_m[mpz_sizeinbase (msg_mpz, 16) + 2];",
          "555:   char* msg = mpz_get_str(arr_m, 16, msg_mpz);",
          "556:   snprintf(err_string, BUF_LEN,\"message is %s \", arr_m);",
          "558:   char arr_r[mpz_sizeinbase (sign->r, base) + 2];",
          "559:   char* r = mpz_get_str(arr_r, base, sign->r);",
          "560:   strncpy(sig_r, arr_r, 1024);",
          "562:   char arr_s[mpz_sizeinbase (sign->s, base) + 2];",
          "563:   char* s = mpz_get_str(arr_s, base, sign->s);",
          "564:   strncpy(sig_s, arr_s, 1024);",
          "568:   mpz_clear(skey_mpz);",
          "569:   mpz_clear(msg_mpz);",
          "570:   domain_parameters_clear(curve);",
          "571:   signature_clear(sign);",
          "572:   point_clear(Pkey);",
          "574: }",
          "",
          "[Added Lines]",
          "581:   if ( calc_public_shares(decrypted_dkg_secret, public_shares, _t) != 0 ){",
          "583:     snprintf(err_string, BUF_LEN,\"t does not match polynomial in db\");",
          "586: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "596:   uint32_t enc_len;",
          "598:   generate_ecdsa_key(err_status, err_string, encrypted_skey, &enc_len, pub_key_x, pub_key_y);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "613:   if ( *err_status != 0){",
          "614:     return;",
          "615:   }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "617:   char* s_share = (char *)malloc(65);",
          "621:   snprintf(err_string + 88, BUF_LEN,\"\\nsecret share is %s\", s_share);",
          "625:   char* cypher = (char *)malloc(65);",
          "626:   xor_encrypt(common_key, s_share, cypher);",
          "",
          "[Removed Lines]",
          "620:   calc_secret_share(Decrypted_dkg_poly, s_share, _t, _n, ind);",
          "623:   calc_secret_shareG2(s_share, s_shareG2);",
          "",
          "[Added Lines]",
          "638:   if (calc_secret_share(Decrypted_dkg_poly, s_share, _t, _n, ind) != 0){",
          "640:     snprintf(err_string, BUF_LEN,\"\\nt does not match poly degree\\n\");",
          "641:     return;",
          "642:   }",
          "645:   if (calc_secret_shareG2(s_share, s_shareG2) != 0){",
          "647:     snprintf(err_string, BUF_LEN,\"invalid decr secret share\\n\");",
          "648:     return;",
          "649:   }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "782:     if (decr_sshare == NULL){",
          "784:         snprintf(err_string, BUF_LEN ,\"invalid common_key\");",
          "785:         return;",
          "786:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "812:         mpz_clear(decr_secret_share);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "795:     mpz_t decr_secret_share;",
          "796:     mpz_init(decr_secret_share);",
          "797:     if (mpz_set_str(decr_secret_share, decr_sshare, 16) == -1){",
          "799:         snprintf(err_string, BUF_LEN ,\"invalid decrypted secret share\");",
          "800:         return;",
          "801:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "826:         mpz_clear(decr_secret_share);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "823:    if( status !=  SGX_SUCCESS) {",
          "825:     snprintf(err_string, BUF_LEN,\"seal bls private key failed with status %d \", status);",
          "826:     return;",
          "827:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "853:     mpz_clear(bls_key);",
          "854:     mpz_clear(sum);",
          "855:     mpz_clear(q);",
          "",
          "---------------"
        ],
        "sgxwallet.c||sgxwallet.c": [
          "File: sgxwallet.c -> sgxwallet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:     exit(1);",
          "62:   }",
          "65:     switch (opt) {",
          "66:     case 'h':",
          "67:       if (strlen(argv[1]) == 2 ) {",
          "68:         fprintf(stderr, \"-c  client certificate will not be checked\\n\");",
          "69:         fprintf(stderr, \"-s  client certificate will be signed automatically\\n\");",
          "70:         exit(0);",
          "71:       } else {",
          "72:         fprintf(stderr, \"unknown flag %s\\n\", argv[1]);",
          "",
          "[Removed Lines]",
          "64:   while ((opt = getopt(argc, argv, \"csh\")) != -1) {",
          "",
          "[Added Lines]",
          "65:   while ((opt = getopt(argc, argv, \"cshd\")) != -1) {",
          "71:         printf(stderr, \"-d  turn on debug output\\n\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:     case 's':",
          "79:       sign_automatically = true;",
          "80:       break;",
          "81:     case '?': // fprintf(stderr, \"unknown flag\\n\");",
          "82:       exit(1);",
          "83:     default:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:     case 'd':",
          "84:       DEBUG_PRINT = 1;",
          "85:       break;",
          "",
          "---------------"
        ],
        "sgxwallet.h||sgxwallet.h": [
          "File: sgxwallet.h -> sgxwallet.h"
        ],
        "sgxwallet_common.h||sgxwallet_common.h": [
          "File: sgxwallet_common.h -> sgxwallet_common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: #include <stdbool.h>",
          "36: #define BUF_LEN 1024",
          "38: #define  MAX_KEY_LENGTH 128",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: extern int DEBUG_PRINT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74: #define INVALID_ECDSA_KEY_NAME -20",
          "75: #define INVALID_HEX -21",
          "77: #define ERROR_IN_ENCLAVE -33",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78: #define INVALID_ECSDA_SIGNATURE -22",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "78: #include \"BLSPublicKeyShare.h\"",
          "79: #include \"BLSPublicKey.h\"",
          "81: std::string stringFromFr(libff::alt_bn128_Fr& el) {",
          "83:     mpz_t t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81: #include <thread>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "744:   std::cerr<< \"test started\" << std::endl;",
          "745:   init_all(false, false);",
          "746:   cerr << \"Server inited\" << endl;",
          "748:   StubClient c(client, JSONRPC_CLIENT_V2);",
          "749:   cerr << \"Client inited\" << endl;",
          "751:   reset_db();",
          "755:   Json::Value EthKeys[n];",
          "756:   Json::Value VerifVects[n];",
          "757:   Json::Value pubEthKeys;",
          "",
          "[Removed Lines]",
          "747:   HttpClient client(\"http://localhost:1028\");",
          "754:   int n = 32, t = 32;",
          "",
          "[Added Lines]",
          "749:   HttpClient client(\"http://localhost:1029\");",
          "756:   int n = 4, t = 4;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "793:   std::vector < std::string> secShares_vect(n);",
          "795:   for ( int i = 0; i < n; i++)",
          "796:     for ( int j = 0; j < n; j++){",
          "798:        std::cerr << \"SecretShare length is \" << secretShares[i][\"SecretShare\"].asString().length() << std::endl;",
          "801:        bool res = c.DKGVerification(pubShares[i], EthKeys[j][\"KeyName\"].asString(), secretShare, t, n, j)[\"result\"].asBool();",
          "802:        k++;",
          "803:        std::cerr << \"NOW K IS \" << k << \" i is \" << i << \" j is \" << j << std::endl;",
          "806:     }",
          "",
          "[Removed Lines]",
          "799:        std::string secretShare = secretShares[i][\"SecretShare\"].asString().substr(192*j, 192 * (j+1));",
          "800:        secShares_vect[i] +=  secretShares[j][\"SecretShare\"].asString().substr(192*i, 192 * (i+1));",
          "804:        REQUIRE( res );",
          "",
          "[Added Lines]",
          "797:   std::vector <std::string> pSharesBad(pubShares);",
          "803:        std::string secretShare = secretShares[i][\"SecretShare\"].asString().substr(192*j, 192);",
          "804:        secShares_vect[i] +=  secretShares[j][\"SecretShare\"].asString().substr(192*i, 192);",
          "808:        REQUIRE(res);",
          "810:        pSharesBad[i][0] = 'q';",
          "811:        Json::Value wrongVerif = c.DKGVerification(pSharesBad[i], EthKeys[j][\"KeyName\"].asString(), secretShare, t, n, j);",
          "812:        res = wrongVerif[\"result\"].asBool();",
          "813:        REQUIRE(!res);",
          "814:        std::cerr << \"wrong verification \" << wrongVerif << std::endl;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "866:     cerr << \"Server inited\" << endl;",
          "868:     StubClient c(client, JSONRPC_CLIENT_V2);",
          "870:     cerr << \"Client inited\" << endl;",
          "",
          "[Removed Lines]",
          "867:     HttpClient client(\"http://localhost:1027\");",
          "",
          "[Added Lines]",
          "877:     HttpClient client(\"http://localhost:1029\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "897:         Json::Value genKey = c.generateECDSAKey();",
          "898:         cout << genKey << endl;",
          "899:         cout << c.ecdsaSignMessageHash(16, genKey[\"KeyName\"].asString(),\"0x09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\" );",
          "900:         Json::Value getPubKey = c.getPublicECDSAKey(genKey[\"KeyName\"].asString());",
          "901:         cout << getPubKey << std::endl;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "953:     } catch (JsonRpcException &e) {",
          "954:         cerr << e.what() << endl;",
          "",
          "[Removed Lines]",
          "951:     cout << c.MultG2(\"4160780231445160889237664391382223604184857153814275770598791864649971919844\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "959: TEST_CASE(\"getServerStatus test\", \"[getServerStatus_test]\") {",
          "960:   init_all( false, false );",
          "962:   StubClient c(client, JSONRPC_CLIENT_V2);",
          "963:   REQUIRE(c.getServerStatus()[\"status\"] == 0);",
          "964:   sgx_destroy_enclave(eid);",
          "965: }",
          "",
          "[Removed Lines]",
          "961:   HttpClient client(\"http://localhost:1026\");",
          "",
          "[Added Lines]",
          "975:   HttpClient client(\"http://localhost:1029\");",
          "981: std::default_random_engine rand_gen((unsigned int) time(0));",
          "983: void SendRPCRequest(){",
          "984:     std::cout << \"Hello from thread \" << std::this_thread::get_id() << std::endl;",
          "985:     HttpClient client(\"http://localhost:1029\");",
          "986:     StubClient c(client, JSONRPC_CLIENT_V2);",
          "987:   reset_db();",
          "990:   int n = 2, t = 2;",
          "991:   Json::Value EthKeys[n];",
          "992:   Json::Value VerifVects[n];",
          "993:   Json::Value pubEthKeys;",
          "994:   Json::Value secretShares[n];",
          "995:   Json::Value pubBLSKeys[n];",
          "996:   Json::Value BLSSigShares[n];",
          "997:   std::vector<std::string> pubShares(n);",
          "998:   std::vector<std::string> poly_names(n);",
          "1000:   int schain_id = rand_gen();",
          "1001:   int dkg_id = rand_gen();",
          "1002:   for ( uint8_t i = 0; i < n; i++){",
          "1003:     EthKeys[i] = c.generateECDSAKey();",
          "1004:     std::string polyName = \"POLY:SCHAIN_ID:\" + std::to_string(schain_id) + \":NODE_ID:\" + std::to_string(i) + \":DKG_ID:\" + std::to_string(dkg_id);",
          "1005:     c.generateDKGPoly(polyName, t);",
          "1006:     poly_names[i] = polyName;",
          "1007:     VerifVects[i] = c.getVerificationVector(polyName, t, n);",
          "1008:     cout << \"VV \" << i <<  \" \" << VerifVects[i] << std::endl;",
          "1009:     pubEthKeys.append(EthKeys[i][\"PublicKey\"]);",
          "1010:   }",
          "1012:   for ( uint8_t i = 0; i < n; i++){",
          "1013:     secretShares[i] = c.getSecretShare(poly_names[i], pubEthKeys, t, n);",
          "1014:     for ( uint8_t k = 0; k < t; k++ ) {",
          "1015:       for (uint8_t j = 0; j < 4; j++) {",
          "1016:         std::string pubShare = VerifVects[i][\"Verification Vector\"][k][j].asString();",
          "1017:         pubShares[i] += ConvertDecToHex(pubShare);",
          "1018:       }",
          "1019:     }",
          "1022:   }",
          "1028:   int k = 0;",
          "1030:   std::vector <std::string> secShares_vect(n);",
          "1032:   for ( int i = 0; i < n; i++)",
          "1033:     for ( int j = 0; j < n; j++){",
          "1034:       if ( i != j ){",
          "1035:         std::cerr << \"SecretShare length is \" << secretShares[i][\"SecretShare\"].asString().length() << std::endl;",
          "1036:         std::string secretShare = secretShares[i][\"SecretShare\"].asString().substr(192*j, 192 );",
          "1037:         secShares_vect[i] +=  secretShares[j][\"SecretShare\"].asString().substr(192*i, 192 );",
          "1038:         bool res = c.DKGVerification(pubShares[i], EthKeys[j][\"KeyName\"].asString(), secretShare, t, n, j)[\"result\"].asBool();",
          "1039:         k++;",
          "1040:         std::cerr << \"NOW K IS \" << k << \" i is \" << i << \" j is \" << j << std::endl;",
          "1041:         REQUIRE( res );",
          "1042:       }",
          "1043:     }",
          "1044:  }",
          "1046: TEST_CASE(\"ManySimultaneousThreads\", \"[many_threads_test]\") {",
          "1047:   init_all( false, false );",
          "1049:   std::vector<std::thread> threads;",
          "1050:   int num_threads = 16;",
          "1051:   for (int i = 0; i < num_threads; i++){",
          "1052:     threads.push_back(std::thread(SendRPCRequest));",
          "1053:   }",
          "1055:   for(auto& thread : threads){",
          "1056:     thread.join();",
          "1057:   }",
          "1059:   sgx_destroy_enclave(eid);",
          "1060: }",
          "1062: TEST_CASE(\"ecdsa API test\", \"[ecdsa_api_test]\") {",
          "1065:   cerr << \"ecdsa_api_test started\" << endl;",
          "1066:   init_all(false, false);",
          "1068:   cerr << \"Server inited\" << endl;",
          "1069:   HttpClient client(\"http://localhost:1029\");",
          "1070:   StubClient c(client, JSONRPC_CLIENT_V2);",
          "1072:   cerr << \"Client inited\" << endl;",
          "1074:   Json::Value genKey = c.generateECDSAKey();",
          "1075:   REQUIRE(genKey[\"status\"].asInt() == 0);",
          "1076:   cout << genKey << endl;",
          "1077:   Json::Value ecdsaSign = c.ecdsaSignMessageHash(16, genKey[\"KeyName\"].asString(), \"0x09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\");",
          "1078:   REQUIRE(ecdsaSign[\"status\"].asInt() == 0);",
          "1079:   cout << ecdsaSign << std::endl;",
          "1080:   Json::Value getPubKey = c.getPublicECDSAKey(genKey[\"KeyName\"].asString());",
          "1081:   REQUIRE(getPubKey[\"status\"].asInt() == 0);",
          "1082:   cout << getPubKey << std::endl;",
          "1085:   Json::Value ecdsaSignWrongBase = c.ecdsaSignMessageHash(0, genKey[\"KeyName\"].asString(), \"0x09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\");",
          "1086:   cout << ecdsaSignWrongBase << std::endl;",
          "1087:   REQUIRE(ecdsaSignWrongBase[\"status\"].asInt() != 0);",
          "1090:   Json::Value ecdsaSignWrongKeyName  = c.ecdsaSignMessageHash(0, \"\", \"0x09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\");",
          "1091:   cout << ecdsaSignWrongKeyName << std::endl;",
          "1092:   REQUIRE(ecdsaSignWrongKeyName[\"status\"].asInt() != 0);",
          "1093:   Json::Value getPubKeyWrongKeyName = c.getPublicECDSAKey(\"keyName\");",
          "1094:   REQUIRE(getPubKeyWrongKeyName[\"status\"].asInt() != 0);",
          "1095:   cout << getPubKeyWrongKeyName << std::endl;",
          "1098:   Json::Value ecdsaSignWrongHash = c.ecdsaSignMessageHash(16, genKey[\"KeyName\"].asString(), \"\");",
          "1099:   cout << ecdsaSignWrongHash << std::endl;",
          "1100:   REQUIRE(ecdsaSignWrongHash[\"status\"].asInt() != 0);",
          "1102:   sgx_destroy_enclave(eid);",
          "1103: }",
          "1105: TEST_CASE(\"dkg API test\", \"[dkg_api_test]\") {",
          "1108:   cerr << \"dkg_api_test started\" << endl;",
          "1109:   init_all(false, false);",
          "1111:   cerr << \"Server inited\" << endl;",
          "1112:   HttpClient client(\"http://localhost:1029\");",
          "1113:   StubClient c(client, JSONRPC_CLIENT_V2);",
          "1115:   cerr << \"Client inited\" << endl;",
          "1117:   reset_db();",
          "1119:   std::string polyName = \"POLY:SCHAIN_ID:1:NODE_ID:1:DKG_ID:1\";",
          "1120:   Json::Value genPoly = c.generateDKGPoly(polyName, 2);",
          "1122:   Json::Value publicKeys;",
          "1123:   publicKeys.append(\"505f55a38f9c064da744f217d1cb993a17705e9839801958cda7c884e08ab4dad7fd8d22953d3ac7f0913de24fd67d7ed36741141b8a3da152d7ba954b0f14e2\");",
          "1124:   publicKeys.append(\"378b3e6fdfe2633256ae1662fcd23466d02ead907b5d4366136341cea5e46f5a7bb67d897d6e35f619810238aa143c416f61c640ed214eb9c67a34c4a31b7d25\");",
          "1127:   Json::Value genPolyWrongName = c.generateDKGPoly(\"poly\", 2);",
          "1128:   REQUIRE(genPolyWrongName[\"status\"].asInt() != 0);",
          "1129:   cout << genPolyWrongName << endl;",
          "1130:   Json::Value verifVectWrongName = c.getVerificationVector(\"poly\", 2, 2);",
          "1131:   REQUIRE(verifVectWrongName[\"status\"].asInt() != 0);",
          "1132:   cout << verifVectWrongName << endl;",
          "1134:   Json::Value secretSharesWrongName = c.getSecretShare(\"poly\", publicKeys, 2, 2);",
          "1135:   REQUIRE(secretSharesWrongName[\"status\"].asInt() != 0);",
          "1136:   cout << secretSharesWrongName << endl;",
          "1139:   Json::Value genPolyWrong_t = c.generateDKGPoly(polyName, 33);",
          "1140:   REQUIRE(genPolyWrong_t[\"status\"].asInt() != 0);",
          "1141:   cout << genPolyWrong_t << endl;",
          "1144:   Json::Value verifVectWrong_t = c.getVerificationVector(polyName, 1, 2);",
          "1145:   REQUIRE(verifVectWrong_t[\"status\"].asInt() != 0);",
          "1146:   cout << verifVectWrong_t << endl;",
          "1148:   Json::Value secretSharesWrong_t = c.getSecretShare(polyName, publicKeys, 3, 3);",
          "1149:   REQUIRE(secretSharesWrong_t[\"status\"].asInt() != 0);",
          "1150:   cout << secretSharesWrong_t << endl;",
          "1153:   Json::Value verifVectWrong_n = c.getVerificationVector(polyName, 2, 1);",
          "1154:   REQUIRE(verifVectWrong_n[\"status\"].asInt() != 0);",
          "1155:   cout << verifVectWrong_n << endl;",
          "1157:   Json::Value publicKeys1;",
          "1158:   publicKeys1.append(\"505f55a38f9c064da744f217d1cb993a17705e9839801958cda7c884e08ab4dad7fd8d22953d3ac7f0913de24fd67d7ed36741141b8a3da152d7ba954b0f14e2\");",
          "1159:   Json::Value secretSharesWrong_n = c.getSecretShare(polyName, publicKeys1, 2, 1);",
          "1160:   REQUIRE(secretSharesWrong_n[\"status\"].asInt() != 0);",
          "1161:   cout << secretSharesWrong_n << endl;",
          "1164:   Json::Value secretSharesWrongPkeys = c.getSecretShare(polyName, publicKeys, 2, 3);",
          "1165:   REQUIRE(secretSharesWrongPkeys[\"status\"].asInt() != 0);",
          "1166:   cout << secretSharesWrongPkeys << endl;",
          "1169:   Json::Value Skeys = c.getSecretShare(polyName, publicKeys, 2, 2);",
          "1170:   Json::Value verifVect = c.getVerificationVector(polyName, 2, 2);",
          "1171:   Json::Value verificationWrongSkeys = c.DKGVerification(\"\",\"\",\"\",2, 2, 1);",
          "1172:   REQUIRE(verificationWrongSkeys[\"status\"].asInt() != 0);",
          "1173:   cout << verificationWrongSkeys << endl;",
          "1175:   sgx_destroy_enclave(eid);",
          "1176: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8aabe34e92c87e8d3b15280f4a9b3000ccda7a55",
      "candidate_info": {
        "commit_hash": "8aabe34e92c87e8d3b15280f4a9b3000ccda7a55",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/8aabe34e92c87e8d3b15280f4a9b3000ccda7a55",
        "files": [
          "DKGCrypto.cpp",
          "DKGCrypto.h",
          "Makefile.am",
          "SGXWalletServer.cpp",
          "SGXWalletServer.hpp",
          "abstractstubserver.h",
          "secure_enclave/DH_dkg.c",
          "secure_enclave/DKGUtils.cpp",
          "secure_enclave/secure_enclave.c",
          "sgxwallet_common.h",
          "spec.json",
          "stubclient.h",
          "testw.cpp"
        ],
        "message": "SKALE-1775 Boost is removed from dependencies",
        "before_after_code_files": [
          "DKGCrypto.cpp||DKGCrypto.cpp",
          "DKGCrypto.h||DKGCrypto.h",
          "Makefile.am||Makefile.am",
          "SGXWalletServer.cpp||SGXWalletServer.cpp",
          "SGXWalletServer.hpp||SGXWalletServer.hpp",
          "abstractstubserver.h||abstractstubserver.h",
          "secure_enclave/DH_dkg.c||secure_enclave/DH_dkg.c",
          "secure_enclave/DKGUtils.cpp||secure_enclave/DKGUtils.cpp",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "sgxwallet_common.h||sgxwallet_common.h",
          "stubclient.h||stubclient.h",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "DKGCrypto.cpp||DKGCrypto.cpp": [
          "File: DKGCrypto.cpp -> DKGCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:   return G2_strings;",
          "40: }",
          "42: std::string gen_dkg_poly( int _t){",
          "43:     char *errMsg = (char *)calloc(1024, 1);",
          "44:     int err_status = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: template<class T>",
          "43: std::string ConvertToString(T field_elem, int base = 10) {",
          "44:   mpz_t t;",
          "45:   mpz_init(t);",
          "47:   field_elem.as_bigint().to_mpz(t);",
          "49:   char arr[mpz_sizeinbase (t, base) + 2];",
          "51:   char * tmp = mpz_get_str(arr, base, t);",
          "52:   mpz_clear(t);",
          "54:   std::string output = tmp;",
          "56:   return output;",
          "57: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "207: }",
          "209: bool CreateBLSShare( const std::string& BLSKeyName, const char * s_shares, const char * encryptedKeyHex){",
          "211:   char* errMsg1 = (char*) calloc(1024,1);",
          "212:   int err_status = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "227:   std::cerr << \"ENTER CreateBLSShare\" << std::endl;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "215:   uint8_t encr_bls_key[BUF_LEN];",
          "216:   uint8_t encr_key[BUF_LEN];",
          "217:   if (!hex2carray(encryptedKeyHex, &dec_key_len, encr_key)){",
          "219:   }",
          "221:   uint32_t enc_bls_len = 0;",
          "223:   create_bls_key(eid, &err_status, errMsg1, s_shares, encr_key, dec_key_len, encr_bls_key, &enc_bls_len);",
          "226:   if ( err_status != 0){",
          "227:      return false;",
          "228:   }",
          "229:   else {",
          "230:     char *hexBLSKey = (char *) calloc(2 * BUF_LEN, 1);",
          "235:     std::cerr << \"hexBLSKey length is \" << strlen(hexBLSKey) << std::endl;",
          "236:     std::cerr << \"bls key \" << BLSKeyName << \" is \" << hexBLSKey << std::endl;",
          "237:     free(hexBLSKey);",
          "",
          "[Removed Lines]",
          "218:       throw RPCException(INVALID_HEX, \"Invalid encryptedPolyHex\");",
          "225:   std::cerr << \"er msg is \" << errMsg1 << std::endl;",
          "232:       std::cerr << \"enc_bls_len \" << enc_bls_len << std::endl;",
          "233:       carray2Hex(encr_bls_key, enc_bls_len, hexBLSKey);",
          "234:       writeDataToDB(BLSKeyName, hexBLSKey);",
          "",
          "[Added Lines]",
          "235:       throw RPCException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
          "242:   std::cerr << \"AFTER create_bls_key IN ENCLAVE er msg is  \" << errMsg1 << std::endl;",
          "244:      std::cerr << \"ERROR IN ENCLAVE\" << std::endl;",
          "249:     std::cerr << \"BEFORE carray2Hex\" << std::endl;",
          "251:     carray2Hex(encr_bls_key, enc_bls_len, hexBLSKey);",
          "252:     std::cerr << \"BEFORE WRITE BLS KEY TO DB\" << std::endl;",
          "253:     writeDataToDB(BLSKeyName, hexBLSKey);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "292:   return DHKey;",
          "293: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "314: std::vector<std::string> mult_G2(const std::string& x){",
          "315:     std::vector<std::string> result(4);",
          "316:     libff::init_alt_bn128_params();",
          "317:     libff::alt_bn128_Fr el(x.c_str());",
          "318:     libff::alt_bn128_G2 elG2 = el * libff::alt_bn128_G2::one();",
          "319:     elG2.to_affine_coordinates();",
          "320:     result[0] = ConvertToString(elG2.X.c0);",
          "321:     result[1] = ConvertToString(elG2.X.c1);",
          "322:     result[2] = ConvertToString(elG2.Y.c0);",
          "323:     result[3] = ConvertToString(elG2.Y.c1);",
          "324:     return result;",
          "325: }",
          "327: bool TestCreateBLSShare( const char * s_shares) {",
          "329:   char *errMsg1 = (char *)calloc(1024, 1);",
          "330:   int err_status = 0;",
          "332:   uint32_t enc_bls_len = 0;",
          "333:   uint8_t encr_key[BUF_LEN];",
          "334:   memset(encr_key, 1, BUF_LEN);",
          "335:   uint64_t dec_key_len ;",
          "336:   uint8_t encr_bls_key[BUF_LEN];",
          "338:   std::cerr << \"Enter TestCreateBLSShare\" << std::endl;",
          "339:   create_bls_key(eid, &err_status, errMsg1, s_shares, encr_key, dec_key_len,",
          "340:                  encr_bls_key, &enc_bls_len);",
          "342:   if ( err_status !=0 ){",
          "343:     std::cerr << \"something went wrong in enclave\" << std::endl;",
          "344:   }",
          "345: }",
          "",
          "---------------"
        ],
        "DKGCrypto.h||DKGCrypto.h": [
          "File: DKGCrypto.h -> DKGCrypto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: std::vector<std::string> GetBLSPubKey(const char * encryptedKeyHex);",
          "28: #endif //SGXD_DKGCRYPTO_H",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: std::vector<std::string> mult_G2(const std::string& x);",
          "31: bool TestCreateBLSShare( const char * s_shares);",
          "",
          "---------------"
        ],
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "94: sgxwallet_LDADD=-l$(SGX_URTS_LIB) -Lleveldb/build -LlibBLS/build  -LlibBLS/build/libff/libff -l:libbls.a -l:libleveldb.a \\",
          "95:    -l:libff.a -lgmp -ldl -l:libsgx_capable.a -l:libsgx_tprotected_fs.a   -ljsonrpccpp-stub -lpthread -ljsonrpccpp-common \\",
          "96:    -ljsonrpccpp-server -ljsonrpccpp-client -ljsoncpp -lcurl -lprocps intel-sgx-ssl/Linux/package/lib64/libsgx_usgxssl.a \\",
          "",
          "[Removed Lines]",
          "97:    intel-sgx-ssl/Linux/package/lib64/libsgx_tsgxssl_crypto.a -lboost_system -lboost_filesystem",
          "",
          "[Added Lines]",
          "97:    intel-sgx-ssl/Linux/package/lib64/libsgx_tsgxssl_crypto.a",
          "98:    #-lboost_system -lboost_filesystem",
          "100: # -lboost_filesystem",
          "101: # -llibboost_filesystem.a",
          "103: # find /usr -name *libboost_filesystem*so*",
          "105: # -llibboost_filesystem.so",
          "106: ### libboost_filesystem.so.67.1",
          "",
          "---------------"
        ],
        "SGXWalletServer.cpp||SGXWalletServer.cpp": [
          "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: #include <algorithm>",
          "35: #include <stdlib.h>",
          "45: bool isStringDec( std::string & str){",
          "",
          "[Removed Lines]",
          "42: #include <boost/filesystem.hpp>",
          "",
          "[Added Lines]",
          "37: #include <unistd.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:   return !str.empty() && res == str.end();",
          "50: }",
          "52: SGXWalletServer::SGXWalletServer(AbstractServerConnector &connector,",
          "53:                                  serverVersion_t type)",
          "54:         : AbstractStubServer(connector, type) {}",
          "",
          "[Removed Lines]",
          "56:   SGXWalletServer *s = nullptr;",
          "57:   HttpServer *hs = nullptr;",
          "59: int init_server() {",
          "60:   std::string certPath =\"\";//\"cert/SGXServerCertificate.crt\";",
          "61:   std::string keyPath =\"\";//\"cert/SGXServerCertificate.key\";",
          "",
          "[Added Lines]",
          "55: SGXWalletServer *s = nullptr;",
          "56: HttpServer *hs = nullptr;",
          "62: void debug_print(){",
          "63:   std::cout << \"HERE ARE YOUR KEYS: \" << std::endl;",
          "64:   class MyVisitor: public LevelDB::KeyVisitor {",
          "65:   public:",
          "66:     virtual void visitDBKey(const char* _data){",
          "67:       std::cout << _data << std::endl;",
          "68:     }",
          "69:   };",
          "71:   MyVisitor v;",
          "73:   levelDb->visitKeys(&v, 100000000);",
          "74: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "82:   if (!s->StartListening()) {",
          "83:     cerr << \"Server could not start listening\" << endl;",
          "84:     exit(-1);",
          "",
          "[Removed Lines]",
          "78:   hs = new HttpServer(1027, certPath, keyPath);",
          "79:   s = new SGXWalletServer(*hs,",
          "80:                       JSONRPC_SERVER_V2); // hybrid server (json-rpc 1.0 & 2.0)",
          "",
          "[Added Lines]",
          "106: int init_server() { //without ssl",
          "108:   hs = new HttpServer(1027, \"\", \"\", 1);",
          "109:   s = new SGXWalletServer(*hs,",
          "110:                           JSONRPC_SERVER_V2); // hybrid server (json-rpc 1.0 & 2.0)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "516:       throw RPCException(INVALID_POLY_NAME, \"Invalid BLS key name\");",
          "517:     }",
          "518:     std::vector<std::string> sshares_vect;",
          "535:     std::shared_ptr<std::string> encryptedKeyHex_ptr = readFromDb(EthKeyName);",
          "538:      if ( res){",
          "541:      }",
          "542:      else {",
          "",
          "[Removed Lines]",
          "519:     std::cerr << \"sshares are \" << SecretShare << std::endl;",
          "520:     char sshares[192 * n + 1];",
          "521:     for ( int i = 0; i < n ; i++){",
          "522:       std::string cur_share = SecretShare.substr(192*i, 192*i + 192);",
          "527:       sshares_vect.push_back(cur_share);",
          "529:       strncpy(sshares + i * 192, cur_share.c_str(), 192);",
          "530:     }",
          "531:     sshares[192 * n ] = 0;",
          "537:     bool res = CreateBLSShare(BLSKeyName, sshares, encryptedKeyHex_ptr->c_str());",
          "539:          std::cerr << \"key created \" << std::endl;",
          "",
          "[Added Lines]",
          "548:     std::cerr << \"sshares from json are \" << SecretShare << std::endl;",
          "553:     bool res = CreateBLSShare(BLSKeyName, SecretShare.c_str(), encryptedKeyHex_ptr->c_str());",
          "555:          std::cerr << \"BLS KEY SHARE CREATED \" << std::endl;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "612: }",
          "615: Json::Value SGXWalletServer::generateDKGPoly(const std::string& polyName, int t){",
          "616:   std::cerr << \"entered generateDKGPoly\" << std::endl;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "632: Json::Value MultG2Impl(const std::string& x){",
          "633:     Json::Value result;",
          "634:     result[\"status\"] = 0;",
          "635:     result[\"errorMessage\"] = \"\";",
          "636:     try {",
          "637:         std::cerr << \"MultG2Impl try \" << std::endl;",
          "638:         std::vector<std::string> xG2_vect = mult_G2(x);",
          "639:         for ( uint8_t i = 0; i < 4; i++) {",
          "640:             result[\"x*G2\"][i] = xG2_vect.at(i);",
          "641:         }",
          "643:     } catch (RPCException &_e) {",
          "644:         std::cerr << \" err str \" << _e.errString << std::endl;",
          "645:         result[\"status\"] = _e.status;",
          "646:         result[\"errorMessage\"] = _e.errString;",
          "647:     }",
          "649:     return result;",
          "650: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "692:   return ComplaintResponseImpl(polyName, ind);",
          "693: }",
          "696: shared_ptr<string> readFromDb(const string & name, const string & prefix) {",
          "698:   auto dataStr = levelDb->readString(prefix + name);",
          "700:   if (dataStr == nullptr) {",
          "702:   }",
          "704:   return dataStr;",
          "",
          "[Removed Lines]",
          "701:     throw RPCException(KEY_SHARE_DOES_NOT_EXIST, \"Data with this name does not exists\");",
          "",
          "[Added Lines]",
          "733: Json::Value SGXWalletServer::MultG2(const std::string& x){",
          "734:     lock_guard<recursive_mutex> lock(m);",
          "735:     return MultG2Impl(x);",
          "736: }",
          "744:     throw RPCException(KEY_SHARE_DOES_NOT_EXIST, \"Data with this name does not exist\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "709:     auto keyShareStr = levelDb->readString(\"BLSKEYSHARE:\" + _keyShareName);",
          "711:     if (keyShareStr == nullptr) {",
          "713:     }",
          "715:     return keyShareStr;",
          "",
          "[Removed Lines]",
          "712:         throw RPCException(KEY_SHARE_DOES_NOT_EXIST, \"Key share with this name does not exists\");",
          "",
          "[Added Lines]",
          "755:         throw RPCException(KEY_SHARE_DOES_NOT_EXIST, \"Key share with this name does not exist\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "752:   }",
          "754:   levelDb->writeString(key, value);",
          "755: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "798:   std::cerr << Name << \" is written to db \" << std::endl;",
          "",
          "---------------"
        ],
        "SGXWalletServer.hpp||SGXWalletServer.hpp": [
          "File: SGXWalletServer.hpp -> SGXWalletServer.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:     virtual Json::Value CreateBLSPrivateKey(const std::string & BLSKeyName, const std::string& EthKeyName, const std::string& polyName, const std::string & SecretShare, int t, int n);",
          "37:     virtual Json::Value GetBLSPublicKeyShare(const std::string & BLSKeyName);",
          "38:     virtual Json::Value ComplaintResponse(const std::string& polyName, int ind);",
          "40: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:     virtual Json::Value MultG2(const std::string & x);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61: Json::Value CreateBLSPrivateKeyImpl(const std::string & BLSKeyName, const std::string& EthKeyName, const std::string& polyName, const std::string & SecretShare, int t, int n);",
          "62: Json::Value GetBLSPublicKeyShareImpl(const std::string & BLSKeyName);",
          "63: Json::Value ComplaintResponseImpl(const std::string& polyName, int ind);",
          "65: #endif //SGXWALLET_SGXWALLETSERVER_HPP",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65: Json::Value MultG2Impl(const std::string & x);",
          "",
          "---------------"
        ],
        "abstractstubserver.h||abstractstubserver.h": [
          "File: abstractstubserver.h -> abstractstubserver.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:           this->bindAndAddMethod(jsonrpc::Procedure(\"CreateBLSPrivateKey\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"BLSKeyName\",jsonrpc::JSON_STRING, \"EthKeyName\",jsonrpc::JSON_STRING, \"polyName\", jsonrpc::JSON_STRING, \"SecretShare\",jsonrpc::JSON_STRING,\"t\", jsonrpc::JSON_INTEGER,\"n\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::CreateBLSPrivateKeyI);",
          "29:           this->bindAndAddMethod(jsonrpc::Procedure(\"GetBLSPublicKeyShare\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"BLSKeyName\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::GetBLSPublicKeyShareI);",
          "30:           this->bindAndAddMethod(jsonrpc::Procedure(\"ComplaintResponse\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"polyName\",jsonrpc::JSON_STRING,\"ind\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::ComplaintResponseI);",
          "32:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31:           this->bindAndAddMethod(jsonrpc::Procedure(\"MultG2\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"x\",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::MultG2I);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:         {",
          "89:           response = this->ComplaintResponse( request[\"polyName\"].asString(), request[\"ind\"].asInt());",
          "90:         }",
          "92:         virtual Json::Value importBLSKeyShare(const std::string& keyShare, const std::string& keyShareName, int t, int n, int index) = 0;",
          "93:         virtual Json::Value blsSignMessageHash(const std::string& keyShareName, const std::string& messageHash, int t, int n, int signerIndex ) = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92:         inline virtual void MultG2I(const Json::Value &request, Json::Value &response)",
          "93:         {",
          "94:             response = this->MultG2(request[\"x\"].asString());",
          "95:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "104:         virtual Json::Value CreateBLSPrivateKey(const std::string & BLSKeyName, const std::string& EthKeyName, const std::string& polyName, const std::string & SecretShare, int t, int n) = 0;",
          "105:         virtual Json::Value GetBLSPublicKeyShare(const std::string & BLSKeyName) = 0;",
          "106:         virtual Json::Value ComplaintResponse(const std::string& polyName, int ind) = 0;",
          "107: };",
          "109: #endif //JSONRPC_CPP_STUB_ABSTRACTSTUBSERVER_H_",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:         virtual Json::Value MultG2(const std::string & x) = 0;",
          "",
          "---------------"
        ],
        "secure_enclave/DH_dkg.c||secure_enclave/DH_dkg.c": [
          "File: secure_enclave/DH_dkg.c -> secure_enclave/DH_dkg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:     mpz_t skey;",
          "71:     mpz_init(skey);",
          "74:     point pub_keyB = point_init();",
          "75:     point_set_hex(pub_keyB, pb_keyB_x, pb_keyB_y);",
          "",
          "[Removed Lines]",
          "72:     mpz_set_str(skey, skey_str, 16);",
          "",
          "[Added Lines]",
          "72:     if (mpz_set_str(skey, skey_str, 16) == -1){",
          "73:         common_key = NULL;",
          "74:         return;",
          "75:     }",
          "",
          "---------------"
        ],
        "secure_enclave/DKGUtils.cpp||secure_enclave/DKGUtils.cpp": [
          "File: secure_enclave/DKGUtils.cpp -> secure_enclave/DKGUtils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "190:   libff::alt_bn128_G2 secret_shareG2 = secret_share * libff::alt_bn128_G2::one();",
          "192:   std::string secret_shareG2_str = ConvertG2ToString(secret_shareG2);",
          "194:   strncpy(s_shareG2, secret_shareG2_str.c_str(), secret_shareG2_str.length() + 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "192:   secret_shareG2.to_affine_coordinates();",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "694:   char common_key[65];",
          "695:   char decr_sshare[65];",
          "696:   session_key_recover(skey, s_share, common_key);",
          "698:   common_key[64] = 0;",
          "700:   xor_decrypt(common_key, encr_sshare, decr_sshare);",
          "",
          "[Removed Lines]",
          "701:     if (decr_sshare == NULL){",
          "703:         snprintf(err_string, BUF_LEN ,\"invalid common_key\");",
          "704:         return;",
          "705:     }",
          "",
          "[Added Lines]",
          "698:   if (common_key == NULL){",
          "700:     snprintf(err_string, BUF_LEN ,\"invalid common_key\");",
          "701:     return;",
          "702:   }",
          "705:   if (decr_sshare == NULL){",
          "707:       snprintf(err_string, BUF_LEN ,\"invalid common_key\");",
          "708:       return;",
          "709:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "729: }",
          "731: void create_bls_key(int *err_status, char* err_string, const char* s_shares,",
          "732:                       uint8_t* encrypted_key, uint64_t key_len, uint8_t * encr_bls_key, uint32_t *enc_bls_key_len){",
          "735:   char skey[ECDSA_SKEY_LEN];",
          "736:   sgx_status_t status = sgx_unseal_data(",
          "737:       (const sgx_sealed_data_t *)encrypted_key, NULL, 0, (uint8_t*)skey, &key_len);",
          "",
          "[Removed Lines]",
          "727:   snprintf(err_string, BUF_LEN,\"data is %s\", public_shares);",
          "",
          "[Added Lines]",
          "731:   snprintf(err_string, BUF_LEN,\"common_key in verification is %s\", common_key);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "747:   mpz_set_ui(sum, 0);",
          "",
          "[Removed Lines]",
          "750:   char encr_sshare[65];",
          "751:   strncpy(encr_sshare, s_shares, 64);",
          "752:   encr_sshare[64] = 0;",
          "754:   char s_share[193];",
          "755:   strncpy(s_share, s_shares, 192);",
          "756:   s_share[192] = 0;",
          "758:   char common_key[65];",
          "759:   session_key_recover(skey, s_share, common_key);",
          "760:   common_key[64] = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "775:     session_key_recover(skey, s_share, common_key);",
          "776:     common_key[64] = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "771:     if (common_key == NULL){",
          "773:       snprintf(err_string, BUF_LEN ,\"invalid common_key\");",
          "774:       return;",
          "775:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "783:     char decr_sshare[65];",
          "784:     xor_decrypt(common_key, encr_sshare, decr_sshare);",
          "",
          "[Removed Lines]",
          "785:       if (decr_sshare == NULL){",
          "787:           snprintf(err_string, BUF_LEN ,\"invalid common_key\");",
          "788:           return;",
          "789:       }",
          "",
          "[Added Lines]",
          "783:     if (decr_sshare == NULL){",
          "785:         snprintf(err_string, BUF_LEN ,\"invalid common_key\");",
          "786:         return;",
          "787:     }",
          "789:     snprintf(err_string + 158 * i, BUF_LEN,\"decr sshare is %s\", decr_sshare);",
          "790:     snprintf(err_string + 158 * i + 79, BUF_LEN,\" common_key is %s\", common_key);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "817:    char key_share[mpz_sizeinbase(bls_key, 16) + 2];",
          "818:    char *key = mpz_get_str(key_share, 16, bls_key);",
          "820:    uint32_t sealedLen = sgx_calc_sealed_data_size(0, ECDSA_SKEY_LEN);",
          "823:    status = sgx_seal_data(0, NULL, ECDSA_SKEY_LEN, (uint8_t *)key_share, sealedLen,(sgx_sealed_data_t*)encr_bls_key);",
          "824:    if( status !=  SGX_SUCCESS) {",
          "826:     snprintf(err_string, BUF_LEN,\"seal bls private key failed with status %d \", status);",
          "827:     return;",
          "828:    }",
          "",
          "[Removed Lines]",
          "819:    snprintf(err_string, BUF_LEN,\"bls private key is %s\", key_share);",
          "",
          "[Added Lines]",
          "819:    snprintf(err_string + 158 * num_shares , BUF_LEN,\" bls private key is %s\", key_share);",
          "",
          "---------------"
        ],
        "sgxwallet_common.h||sgxwallet_common.h": [
          "File: sgxwallet_common.h -> sgxwallet_common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: #define SGX_ENCLAVE_ERROR -666;",
          "60: #define ENCLAVE_NAME \"secure_enclave.signed.so\"",
          "",
          "[Removed Lines]",
          "59: #define WALLETDB_NAME \"test_sgxwallet1.db\"//\"sgxwallet.db\"",
          "",
          "[Added Lines]",
          "59: #define WALLETDB_NAME  \"test_sgxwallet1.db\"//\"sgxwallet.db\"//////////",
          "",
          "---------------"
        ],
        "stubclient.h||stubclient.h": [
          "File: stubclient.h -> stubclient.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "185:         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());",
          "186:     }",
          "188: };",
          "190: #endif //JSONRPC_CPP_STUB_STUBCLIENT_H_",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "188:     Json::Value MultG2(const std::string & x) throw (jsonrpc::JsonRpcException)",
          "189:     {",
          "190:         Json::Value p;",
          "191:         p[\"x\"] = x;",
          "193:         Json::Value result = this->CallMethod(\"MultG2\",p);",
          "194:         if (result.isObject())",
          "195:             return result;",
          "196:         else",
          "197:             throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());",
          "198:     }",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "747:   reset_db();",
          "750:   Json::Value EthKeys[n];",
          "751:   Json::Value VerifVects[n];",
          "752:   Json::Value pubEthKeys;",
          "",
          "[Removed Lines]",
          "749:   int n = 4, t = 2;",
          "",
          "[Added Lines]",
          "754:   int n = 2, t = 2;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "786:   int k = 0;",
          "788:   for ( int i = 0; i < n; i++)",
          "789:     for ( int j = 0; j < n; j++){",
          "791:        std::cerr << \"SecretShare length is \" << secretShares[i][\"SecretShare\"].asString().length() << std::endl;",
          "792:        std::string secretShare = secretShares[i][\"SecretShare\"].asString().substr(192*j, 192 * (j+1));",
          "793:        bool res = c.DKGVerification(pubShares[i], EthKeys[j][\"KeyName\"].asString(), secretShare, t, n, j)[\"result\"].asBool();",
          "794:        k++;",
          "795:        std::cerr << \"NOW K IS \" << k << \" i is \" << i << \" j is \" << j << std::endl;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "793:   std::vector < std::string> secShares_vect(n);",
          "800:        secShares_vect[i] +=  secretShares[j][\"SecretShare\"].asString().substr(192*i, 192 * (i+1));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "807:         throw RPCException(INVALID_HEX, \"Invalid hash\");",
          "808:   }",
          "810:   std::map<size_t, std::shared_ptr<BLSPublicKeyShare>> koefs_pkeys_map;",
          "812:   for ( int i = 0; i < t; i++){",
          "813:     std::string endName = poly_names[i].substr(4);",
          "814:     std::string blsName = \"BLS_KEY\" + poly_names[i].substr(4);",
          "815:     std::string secretShare = secretShares[i][\"SecretShare\"].asString();",
          "817:     pubBLSKeys[i] = c.GetBLSPublicKeyShare(blsName);",
          "819:     BLSSigShares[i] = c.blsSignMessageHash(blsName, hash, t, n, i + 1);",
          "820:     std::cerr << i << \" sig share is created \" << std::endl;",
          "",
          "[Removed Lines]",
          "816:     cout << c.CreateBLSPrivateKey(blsName, EthKeys[i][\"KeyName\"].asString(), poly_names[i], secretShare, t, n);",
          "",
          "[Added Lines]",
          "826:     cout << c.CreateBLSPrivateKey(blsName, EthKeys[i][\"KeyName\"].asString(), poly_names[i], secShares_vect[i], t, n);",
          "828:     std::cerr << \"BLS KEY SHARE NAME IS \" << blsName << std::endl;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "837:   BLSPublicKey common_public(std::make_shared<std::map<size_t, std::shared_ptr<BLSPublicKeyShare>>>(koefs_pkeys_map), t, n);",
          "838:   REQUIRE( common_public.VerifySigWithHelper(hash_arr, commonSig, t, n) );",
          "845: }",
          "848: TEST_CASE(\"API test\", \"[api_test]\") {",
          "851:     cerr << \"API test started\" << endl;",
          "852:     init_all();",
          "",
          "[Removed Lines]",
          "850:   std::cerr << __GNUC__ << std::endl;",
          "",
          "[Added Lines]",
          "851:   std::cout << \"try to get bls public key\" << std::endl;",
          "852:   std::cout << c.GetBLSPublicKeyShare(\"BLS_KEY:SCHAIN_ID:1:NODE_ID:1:DKG_ID:0\");",
          "854:   exit(0);",
          "856: }",
          "858: TEST_CASE(\"create_bls_key_share\", \"[create_bls_key]\") {",
          "859:     init_enclave();",
          "860:     std::string SecrShare = \"937c9c846a6fa7fd1984fe82e739ae37fcaa555c1dc0e8597c9f81b6a12f232ffdf8101e91bd658fa1cea6fdd75adb8542951ce3d251cdaa78f43493dad730b59d32d2e872b36aa70cdce544b550ebe96994de860b6f6ebb7d0b4d4e6724b4bf7232f27fdfe521f3c7997dbb1c15452b7f196bd119d915ce76af3d1a008e1810086ff076abe442563ae9b8938d483ae581f4de2ee54298b3078289bbd85250c8df956450d32f671e4a8ec1e584119753ff171e80a61465246bfd291e8dac3d\";",
          "861:     bool res = TestCreateBLSShare(SecrShare.c_str());",
          "862:     REQUIRE(res);",
          "864:     sgx_destroy_enclave(eid);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "886:       cout << c.generateDKGPoly(\"POLY:SCHAIN_ID:14225439306783892379384764908040542049263455631509697460847850632966314337557:NODE_ID:1:DKG_ID:71951190446274221430521459675625214118086594348715\", 1);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "940:     } catch (JsonRpcException &e) {",
          "941:         cerr << e.what() << endl;",
          "942:     }",
          "943:   sgx_destroy_enclave(eid);",
          "944: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "963:     cout << c.MultG2(\"4160780231445160889237664391382223604184857153814275770598791864649971919844\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d7127e0fd1be9a97c2763361cf7d3dabcfeed36d",
      "candidate_info": {
        "commit_hash": "d7127e0fd1be9a97c2763361cf7d3dabcfeed36d",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/d7127e0fd1be9a97c2763361cf7d3dabcfeed36d",
        "files": [
          "secure_enclave/EnclaveConstants.h",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl"
        ],
        "message": "SKALE-3067-cleanup-sgx",
        "before_after_code_files": [
          "secure_enclave/EnclaveConstants.h||secure_enclave/EnclaveConstants.h",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ],
          "candidate": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/EnclaveConstants.h||secure_enclave/EnclaveConstants.h": [
          "File: secure_enclave/EnclaveConstants.h -> secure_enclave/EnclaveConstants.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: #define ADD_ENTROPY_SIZE 32",
          "40: #define DKG_MAX_SEALED_LEN 3100",
          "42: #define SECRET_SHARE_NUM_BYTES 96",
          "",
          "[Removed Lines]",
          "39: #define DKG_BUFER_LENGTH 2496//3060",
          "",
          "[Added Lines]",
          "39: #define DKG_BUFER_LENGTH 2496 //3060",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1332:         snprintf(errString + strlen(dkg_secret) + 8, BUF_LEN - strlen(dkg_secret) - 8,",
          "1333:                  \"encrypted poly is not equal to decrypted poly\");",
          "1335:     }",
          "1336: }",
          "1338: void",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1335:         return;",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "224:                                 [out] int *errStatus,",
          "225:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "226:                                 [in, count = 3050] uint8_t* encrypted_poly,",
          "229:         public void trustedGetEncryptedSecretShareAES(",
          "230:                                 [out]int *errStatus,",
          "",
          "[Removed Lines]",
          "227:                                 [user_check] uint64_t* enc_len);",
          "",
          "[Added Lines]",
          "227:                                 [out] uint64_t* enc_len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "638cad860cc278ffb17fade403c050cbcca920c1",
      "candidate_info": {
        "commit_hash": "638cad860cc278ffb17fade403c050cbcca920c1",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/638cad860cc278ffb17fade403c050cbcca920c1",
        "files": [
          "secure_enclave/secure_enclave.edl"
        ],
        "message": "SKALE-3067-cleanup-sgx",
        "before_after_code_files": [
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ],
          "candidate": [
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "224:                                 [out] int *errStatus,",
          "225:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "226:                                 [in, count = 3050] uint8_t* encrypted_poly,",
          "229:         public void trustedGetEncryptedSecretShareAES(",
          "230:                                 [out]int *errStatus,",
          "",
          "[Removed Lines]",
          "227:                                 [user_check] uint64_t* enc_len);",
          "",
          "[Added Lines]",
          "227:                                 [out] uint64_t* enc_len);",
          "",
          "---------------"
        ]
      }
    }
  ]
}