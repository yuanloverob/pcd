{
  "cve_id": "CVE-2022-35939",
  "cve_desc": "TensorFlow is an open source platform for machine learning. The `ScatterNd` function takes an input argument that determines the indices of of the output tensor. An input index greater than the output tensor or less than zero will either write content at the wrong index or trigger a crash. We have patched the issue in GitHub commit b4d4b4cb019bd7240a52daa4ba61e3cc814f0384. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "b4d4b4cb019bd7240a52daa4ba61e3cc814f0384",
  "patch_info": {
    "commit_hash": "b4d4b4cb019bd7240a52daa4ba61e3cc814f0384",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/b4d4b4cb019bd7240a52daa4ba61e3cc814f0384",
    "files": [
      "tensorflow/lite/kernels/internal/reference/reference_ops.h",
      "tensorflow/lite/kernels/scatter_nd.cc",
      "tensorflow/lite/kernels/scatter_nd_test.cc"
    ],
    "message": "Check bounds for reads and writes in scatter_nd\n\nPiperOrigin-RevId: 463365479",
    "before_after_code_files": [
      "tensorflow/lite/kernels/internal/reference/reference_ops.h||tensorflow/lite/kernels/internal/reference/reference_ops.h",
      "tensorflow/lite/kernels/scatter_nd.cc||tensorflow/lite/kernels/scatter_nd.cc",
      "tensorflow/lite/kernels/scatter_nd_test.cc||tensorflow/lite/kernels/scatter_nd_test.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/lite/kernels/internal/reference/reference_ops.h||tensorflow/lite/kernels/internal/reference/reference_ops.h": [
      "File: tensorflow/lite/kernels/internal/reference/reference_ops.h -> tensorflow/lite/kernels/internal/reference/reference_ops.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "656: #endif",
      "658: template <typename IndicesT, typename UpdatesT>",
      "664:   ruy::profiler::ScopeLabel label(\"ScatterNd\");",
      "666:   int n_slices = 1;",
      "",
      "[Removed Lines]",
      "659: inline void ScatterNd(const RuntimeShape& indices_shape,",
      "660:                       const IndicesT* indices_data,",
      "661:                       const RuntimeShape& updates_shape,",
      "662:                       const UpdatesT* updates_data,",
      "663:                       const RuntimeShape& output_shape, UpdatesT* output_data) {",
      "",
      "[Added Lines]",
      "659: inline TfLiteStatus ScatterNd(const RuntimeShape& indices_shape,",
      "660:                               const IndicesT* indices_data,",
      "661:                               const RuntimeShape& updates_shape,",
      "662:                               const UpdatesT* updates_data,",
      "663:                               const RuntimeShape& output_shape,",
      "664:                               UpdatesT* output_data) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "683:     remain_flat_size = dims_to_count[i];",
      "684:   }",
      "686:   memset(output_data, 0, sizeof(UpdatesT) * output_flat_size);",
      "687:   for (int i = 0; i < n_slices; ++i) {",
      "688:     int to_pos = 0;",
      "689:     for (int j = 0; j < indices_nd; ++j) {",
      "690:       IndicesT idx = indices_data[i * indices_nd + j];",
      "692:       to_pos += idx * dims_to_count[j];",
      "693:     }",
      "694:     for (int j = 0; j < slice_size; j++) {",
      "695:       output_data[to_pos + j] += updates_data[i * slice_size + j];",
      "696:     }",
      "697:   }",
      "698: }",
      "700: template <typename T>",
      "",
      "[Removed Lines]",
      "691:       TFLITE_DCHECK(0 <= idx && idx < output_shape.Dims(j));",
      "",
      "[Added Lines]",
      "687:   if (n_slices * slice_size > updates_shape.FlatSize()) {",
      "688:     return kTfLiteError;",
      "689:   }",
      "697:     if (to_pos < 0 || to_pos + slice_size > output_flat_size) {",
      "698:       return kTfLiteError;",
      "699:     }",
      "704:   return kTfLiteOk;",
      "",
      "---------------"
    ],
    "tensorflow/lite/kernels/scatter_nd.cc||tensorflow/lite/kernels/scatter_nd.cc": [
      "File: tensorflow/lite/kernels/scatter_nd.cc -> tensorflow/lite/kernels/scatter_nd.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "129: template <typename IndicesT, typename UpdatesT>",
      "130: TfLiteStatus ScatterNd(const TfLiteTensor* indices, const TfLiteTensor* updates,",
      "131:                        TfLiteTensor* output) {",
      "133:       GetTensorShape(indices), GetTensorData<IndicesT>(indices),",
      "134:       GetTensorShape(updates), GetTensorData<UpdatesT>(updates),",
      "135:       GetTensorShape(output), GetTensorData<UpdatesT>(output));",
      "137: }",
      "139: template <typename IndicesT>",
      "",
      "[Removed Lines]",
      "132:   reference_ops::ScatterNd(",
      "136:   return kTfLiteOk;",
      "",
      "[Added Lines]",
      "132:   return reference_ops::ScatterNd(",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "149:                       ResizeOutputTensor<IndicesT>(context, shape, output));",
      "150:   }",
      "152:   switch (updates->type) {",
      "153:     case kTfLiteFloat32:",
      "155:     case kTfLiteUInt8:",
      "157:     case kTfLiteBool:",
      "159:     case kTfLiteInt8:",
      "161:     case kTfLiteInt32:",
      "163:     case kTfLiteInt64:",
      "165:     default:",
      "166:       TF_LITE_KERNEL_LOG(",
      "167:           context, \"Updates of type '%s' are not supported by scatter_nd.\",",
      "168:           TfLiteTypeGetName(updates->type));",
      "169:       return kTfLiteError;",
      "170:   }",
      "171: }",
      "173: TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {",
      "",
      "[Removed Lines]",
      "154:       return ScatterNd<IndicesT, float>(indices, updates, output);",
      "156:       return ScatterNd<IndicesT, uint8_t>(indices, updates, output);",
      "158:       return ScatterNd<IndicesT, bool>(indices, updates, output);",
      "160:       return ScatterNd<IndicesT, int8_t>(indices, updates, output);",
      "162:       return ScatterNd<IndicesT, int32_t>(indices, updates, output);",
      "164:       return ScatterNd<IndicesT, int64_t>(indices, updates, output);",
      "",
      "[Added Lines]",
      "151:   TfLiteStatus status = kTfLiteError;",
      "154:       status = ScatterNd<IndicesT, float>(indices, updates, output);",
      "155:       break;",
      "157:       status = ScatterNd<IndicesT, uint8_t>(indices, updates, output);",
      "158:       break;",
      "160:       status = ScatterNd<IndicesT, bool>(indices, updates, output);",
      "161:       break;",
      "163:       status = ScatterNd<IndicesT, int8_t>(indices, updates, output);",
      "164:       break;",
      "166:       status = ScatterNd<IndicesT, int32_t>(indices, updates, output);",
      "167:       break;",
      "169:       status = ScatterNd<IndicesT, int64_t>(indices, updates, output);",
      "170:       break;",
      "177:   if (status != kTfLiteOk) {",
      "178:     TF_LITE_KERNEL_LOG(context, \"scatter_nd index out of bounds\");",
      "179:   }",
      "180:   return status;",
      "",
      "---------------"
    ],
    "tensorflow/lite/kernels/scatter_nd_test.cc||tensorflow/lite/kernels/scatter_nd_test.cc": [
      "File: tensorflow/lite/kernels/scatter_nd_test.cc -> tensorflow/lite/kernels/scatter_nd_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "362: }",
      "364: }  // namespace",
      "365: }  // namespace tflite",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "364: TEST(ScatterNdOpTest, ReadAndWriteArrayLimits) {",
      "365:   ScatterNdOpModel m({TensorType_INT32, {5, 1}}, {TensorType_INT32, {5}},",
      "366:                      {TensorType_INT32, {1}});",
      "367:   m.SetIndices<int32_t>({4, 3, 1, 0, 2});",
      "368:   m.SetUpdates<int32_t>({1, 2, 3, 7, 9});",
      "369:   m.SetShape<int32_t>({5});",
      "370:   ASSERT_EQ(m.Invoke(), kTfLiteOk);",
      "371:   EXPECT_THAT(m.GetOutputShape(), ElementsAreArray({5}));",
      "372:   EXPECT_THAT(m.GetOutput<int32_t>(), ElementsAreArray({7, 3, 9, 2, 1}));",
      "373: }",
      "375: TEST(ScatterNdOpTest, OOBRead) {",
      "376:   ScatterNdOpModel m({TensorType_INT32, {1, 1}}, {TensorType_INT32, {1}},",
      "377:                      {TensorType_INT32, {1}});",
      "378:   m.SetIndices<int32_t>({4});",
      "379:   m.SetUpdates<int32_t>({1});",
      "380:   m.SetShape<int32_t>({1});",
      "381:   ASSERT_EQ(m.Invoke(), kTfLiteError);",
      "382: }",
      "384: TEST(ScatterNdOpTest, OOBWrites) {",
      "385:   ScatterNdOpModel m({TensorType_INT32, {5, 1}}, {TensorType_INT32, {5}},",
      "386:                      {TensorType_INT32, {1}});",
      "387:   m.SetIndices<int32_t>({4, 3, 1, -0x38, 0x38});",
      "388:   m.SetUpdates<int32_t>({1, 2, 3, 0x44444444, 0x55555555});",
      "389:   m.SetShape<int32_t>({1});",
      "390:   ASSERT_EQ(m.Invoke(), kTfLiteError);",
      "391: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c5f280153409d9bc6bbf1874977742b339bb9c51",
      "candidate_info": {
        "commit_hash": "c5f280153409d9bc6bbf1874977742b339bb9c51",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/c5f280153409d9bc6bbf1874977742b339bb9c51",
        "files": [
          "tensorflow/compiler/mlir/lite/ir/tfl_ops.td",
          "tensorflow/compiler/mlir/lite/tests/ops.mlir",
          "tensorflow/lite/kernels/scatter_nd.cc",
          "tensorflow/lite/kernels/scatter_nd_test.cc",
          "tensorflow/lite/testing/op_tests/scatter_nd.py"
        ],
        "message": "[lite] Add I1 support for scatter_nd\n\nPiperOrigin-RevId: 460554713",
        "before_after_code_files": [
          "tensorflow/compiler/mlir/lite/ir/tfl_ops.td||tensorflow/compiler/mlir/lite/ir/tfl_ops.td",
          "tensorflow/compiler/mlir/lite/tests/ops.mlir||tensorflow/compiler/mlir/lite/tests/ops.mlir",
          "tensorflow/lite/kernels/scatter_nd.cc||tensorflow/lite/kernels/scatter_nd.cc",
          "tensorflow/lite/kernels/scatter_nd_test.cc||tensorflow/lite/kernels/scatter_nd_test.cc",
          "tensorflow/lite/testing/op_tests/scatter_nd.py||tensorflow/lite/testing/op_tests/scatter_nd.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/scatter_nd.cc||tensorflow/lite/kernels/scatter_nd.cc",
            "tensorflow/lite/kernels/scatter_nd_test.cc||tensorflow/lite/kernels/scatter_nd_test.cc"
          ],
          "candidate": [
            "tensorflow/lite/kernels/scatter_nd.cc||tensorflow/lite/kernels/scatter_nd.cc",
            "tensorflow/lite/kernels/scatter_nd_test.cc||tensorflow/lite/kernels/scatter_nd_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/compiler/mlir/lite/ir/tfl_ops.td||tensorflow/compiler/mlir/lite/ir/tfl_ops.td": [
          "File: tensorflow/compiler/mlir/lite/ir/tfl_ops.td -> tensorflow/compiler/mlir/lite/ir/tfl_ops.td",
          "--- Hunk 1 ---",
          "[Context before]",
          "1203:   let arguments = (ins",
          "1204:     TFL_TensorOf<[I32]>:$indices,",
          "1206:     TFL_1DTensorOf<[I32]>:$shape",
          "1207:   );",
          "1209:   let results = (outs",
          "1211:   );",
          "1213:   let hasVerifier = 1;",
          "",
          "[Removed Lines]",
          "1205:     TFL_TensorOf<[F32, I8, I64, I32, UI8]>:$updates,",
          "1210:     TFL_TensorOf<[F32, I8, I64, I32, UI8]>:$output",
          "",
          "[Added Lines]",
          "1205:     TFL_TensorOf<[F32, I8, I64, I32, UI8, I1]>:$updates,",
          "1210:     TFL_TensorOf<[F32, I8, I64, I32, UI8, I1]>:$output",
          "",
          "---------------"
        ],
        "tensorflow/compiler/mlir/lite/tests/ops.mlir||tensorflow/compiler/mlir/lite/tests/ops.mlir": [
          "File: tensorflow/compiler/mlir/lite/tests/ops.mlir -> tensorflow/compiler/mlir/lite/tests/ops.mlir",
          "--- Hunk 1 ---",
          "[Context before]",
          "2976:   %0 = \"tfl.gelu\"(%arg0) {approximate = false}: (tensor<?xf32>) -> tensor<?xi32>",
          "2977:   func.return %0#0 : tensor<?xi32>",
          "2978: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2983: func.func @scatter_nd_i1(%arg0: tensor<?xi32>, %arg1: tensor<?xi1>, %arg2: tensor<?xi32>) -> tensor<?xi1> {",
          "2985:   %0 = \"tfl.scatter_nd\"(%arg0, %arg1, %arg2): (tensor<?xi32>, tensor<?xi1>, tensor<?xi32>) -> tensor<?xi1>",
          "2986:   func.return %0 : tensor<?xi1>",
          "2987: }",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/scatter_nd.cc||tensorflow/lite/kernels/scatter_nd.cc": [
          "File: tensorflow/lite/kernels/scatter_nd.cc -> tensorflow/lite/kernels/scatter_nd.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:   switch (updates->type) {",
          "85:     case kTfLiteFloat32:",
          "86:     case kTfLiteUInt8:",
          "87:     case kTfLiteInt8:",
          "88:     case kTfLiteInt64:",
          "89:     case kTfLiteInt32:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87:     case kTfLiteBool:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "153:       return ScatterNd<IndicesT, float>(indices, updates, output);",
          "154:     case kTfLiteUInt8:",
          "155:       return ScatterNd<IndicesT, uint8_t>(indices, updates, output);",
          "156:     case kTfLiteInt8:",
          "157:       return ScatterNd<IndicesT, int8_t>(indices, updates, output);",
          "158:     case kTfLiteInt32:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "157:     case kTfLiteBool:",
          "158:       return ScatterNd<IndicesT, bool>(indices, updates, output);",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/scatter_nd_test.cc||tensorflow/lite/kernels/scatter_nd_test.cc": [
          "File: tensorflow/lite/kernels/scatter_nd_test.cc -> tensorflow/lite/kernels/scatter_nd_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "309: }",
          "311: TEST(ScatterNdOpTest, DynamicShape) {",
          "312:   ScatterNdOpModel m({TensorType_INT32, {4, 2}}, {TensorType_INT64, {4, 5}},",
          "313:                      {TensorType_INT32, {3}});",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311: TEST(ScatterNdOpTest, Int32IndicesBoolUpdates) {",
          "312:   ScatterNdOpModel m({TensorType_INT32, {4, 1}}, {TensorType_BOOL, {4}},",
          "313:                      {TensorType_INT32, {1}});",
          "314:   m.SetIndices<int32_t>({4, 3, 1, 7});",
          "315:   m.SetUpdates<bool>({true, false, true, false});",
          "316:   m.SetShape<int32_t>({8});",
          "317:   ASSERT_EQ(m.Invoke(), kTfLiteOk);",
          "319:   EXPECT_THAT(m.GetOutputShape(), ElementsAreArray({8}));",
          "320:   EXPECT_THAT(",
          "321:       m.GetOutput<bool>(),",
          "322:       ElementsAreArray({false, true, false, false, true, false, false, false}));",
          "323: }",
          "",
          "---------------"
        ],
        "tensorflow/lite/testing/op_tests/scatter_nd.py||tensorflow/lite/testing/op_tests/scatter_nd.py": [
          "File: tensorflow/lite/testing/op_tests/scatter_nd.py -> tensorflow/lite/testing/op_tests/scatter_nd.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:       \"indices_dtype\": [tf.int32],",
          "29:       \"indices_shape\": [[4, 1]],",
          "30:       \"indices_value\": [[[4], [3], [1], [7]]],",
          "32:       \"updates_shape\": [[4]],",
          "33:       \"shape_dtype\": [tf.int32],",
          "34:       \"shape_shape\": [[1]],",
          "",
          "[Removed Lines]",
          "31:       \"updates_dtype\": [tf.int32, tf.int64, tf.float32],",
          "",
          "[Added Lines]",
          "31:       \"updates_dtype\": [tf.int32, tf.int64, tf.float32, tf.bool],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:       \"indices_dtype\": [tf.int32],",
          "38:       \"indices_shape\": [[4, 2]],",
          "39:       \"indices_value\": [[[0, 0], [1, 0], [0, 2], [1, 2]]],",
          "41:       \"updates_shape\": [[4, 5]],",
          "42:       \"shape_dtype\": [tf.int32],",
          "43:       \"shape_shape\": [[3]],",
          "",
          "[Removed Lines]",
          "40:       \"updates_dtype\": [tf.int32, tf.int64, tf.float32],",
          "",
          "[Added Lines]",
          "40:       \"updates_dtype\": [tf.int32, tf.int64, tf.float32, tf.bool],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0b703c2d1037cafc716ece1b31f78dff3c4e870d",
      "candidate_info": {
        "commit_hash": "0b703c2d1037cafc716ece1b31f78dff3c4e870d",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/0b703c2d1037cafc716ece1b31f78dff3c4e870d",
        "files": [
          "tensorflow/lite/kernels/internal/reference/reference_ops.h",
          "tensorflow/lite/kernels/scatter_nd.cc",
          "tensorflow/lite/kernels/scatter_nd_test.cc"
        ],
        "message": "Check bounds for reads and writes in scatter_nd\n\nPiperOrigin-RevId: 463365479",
        "before_after_code_files": [
          "tensorflow/lite/kernels/internal/reference/reference_ops.h||tensorflow/lite/kernels/internal/reference/reference_ops.h",
          "tensorflow/lite/kernels/scatter_nd.cc||tensorflow/lite/kernels/scatter_nd.cc",
          "tensorflow/lite/kernels/scatter_nd_test.cc||tensorflow/lite/kernels/scatter_nd_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/internal/reference/reference_ops.h||tensorflow/lite/kernels/internal/reference/reference_ops.h",
            "tensorflow/lite/kernels/scatter_nd.cc||tensorflow/lite/kernels/scatter_nd.cc",
            "tensorflow/lite/kernels/scatter_nd_test.cc||tensorflow/lite/kernels/scatter_nd_test.cc"
          ],
          "candidate": [
            "tensorflow/lite/kernels/internal/reference/reference_ops.h||tensorflow/lite/kernels/internal/reference/reference_ops.h",
            "tensorflow/lite/kernels/scatter_nd.cc||tensorflow/lite/kernels/scatter_nd.cc",
            "tensorflow/lite/kernels/scatter_nd_test.cc||tensorflow/lite/kernels/scatter_nd_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/internal/reference/reference_ops.h||tensorflow/lite/kernels/internal/reference/reference_ops.h": [
          "File: tensorflow/lite/kernels/internal/reference/reference_ops.h -> tensorflow/lite/kernels/internal/reference/reference_ops.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "635: #endif",
          "637: template <typename IndicesT, typename UpdatesT>",
          "643:   ruy::profiler::ScopeLabel label(\"ScatterNd\");",
          "645:   int n_slices = 1;",
          "",
          "[Removed Lines]",
          "638: inline void ScatterNd(const RuntimeShape& indices_shape,",
          "639:                       const IndicesT* indices_data,",
          "640:                       const RuntimeShape& updates_shape,",
          "641:                       const UpdatesT* updates_data,",
          "642:                       const RuntimeShape& output_shape, UpdatesT* output_data) {",
          "",
          "[Added Lines]",
          "638: inline TfLiteStatus ScatterNd(const RuntimeShape& indices_shape,",
          "639:                               const IndicesT* indices_data,",
          "640:                               const RuntimeShape& updates_shape,",
          "641:                               const UpdatesT* updates_data,",
          "642:                               const RuntimeShape& output_shape,",
          "643:                               UpdatesT* output_data) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "662:     remain_flat_size = dims_to_count[i];",
          "663:   }",
          "665:   memset(output_data, 0, sizeof(UpdatesT) * output_flat_size);",
          "666:   for (int i = 0; i < n_slices; ++i) {",
          "667:     int to_pos = 0;",
          "668:     for (int j = 0; j < indices_nd; ++j) {",
          "669:       IndicesT idx = indices_data[i * indices_nd + j];",
          "671:       to_pos += idx * dims_to_count[j];",
          "672:     }",
          "673:     for (int j = 0; j < slice_size; j++) {",
          "674:       output_data[to_pos + j] += updates_data[i * slice_size + j];",
          "675:     }",
          "676:   }",
          "677: }",
          "679: template <typename T>",
          "",
          "[Removed Lines]",
          "670:       TFLITE_DCHECK(0 <= idx && idx < output_shape.Dims(j));",
          "",
          "[Added Lines]",
          "666:   if (n_slices * slice_size > updates_shape.FlatSize()) {",
          "667:     return kTfLiteError;",
          "668:   }",
          "676:     if (to_pos < 0 || to_pos + slice_size > output_flat_size) {",
          "677:       return kTfLiteError;",
          "678:     }",
          "683:   return kTfLiteOk;",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/scatter_nd.cc||tensorflow/lite/kernels/scatter_nd.cc": [
          "File: tensorflow/lite/kernels/scatter_nd.cc -> tensorflow/lite/kernels/scatter_nd.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "128: template <typename IndicesT, typename UpdatesT>",
          "129: TfLiteStatus ScatterNd(const TfLiteTensor* indices, const TfLiteTensor* updates,",
          "130:                        TfLiteTensor* output) {",
          "132:       GetTensorShape(indices), GetTensorData<IndicesT>(indices),",
          "133:       GetTensorShape(updates), GetTensorData<UpdatesT>(updates),",
          "134:       GetTensorShape(output), GetTensorData<UpdatesT>(output));",
          "136: }",
          "138: template <typename IndicesT>",
          "",
          "[Removed Lines]",
          "131:   reference_ops::ScatterNd(",
          "135:   return kTfLiteOk;",
          "",
          "[Added Lines]",
          "131:   return reference_ops::ScatterNd(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "148:                       ResizeOutputTensor<IndicesT>(context, shape, output));",
          "149:   }",
          "151:   switch (updates->type) {",
          "152:     case kTfLiteFloat32:",
          "154:     case kTfLiteUInt8:",
          "156:     case kTfLiteInt8:",
          "158:     case kTfLiteInt32:",
          "160:     case kTfLiteInt64:",
          "162:     default:",
          "163:       context->ReportError(",
          "164:           context, \"Updates of type '%s' are not supported by scatter_nd.\",",
          "165:           TfLiteTypeGetName(updates->type));",
          "166:       return kTfLiteError;",
          "167:   }",
          "168: }",
          "170: TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {",
          "",
          "[Removed Lines]",
          "153:       return ScatterNd<IndicesT, float>(indices, updates, output);",
          "155:       return ScatterNd<IndicesT, uint8_t>(indices, updates, output);",
          "157:       return ScatterNd<IndicesT, int8_t>(indices, updates, output);",
          "159:       return ScatterNd<IndicesT, int32_t>(indices, updates, output);",
          "161:       return ScatterNd<IndicesT, int64_t>(indices, updates, output);",
          "",
          "[Added Lines]",
          "150:   TfLiteStatus status = kTfLiteError;",
          "153:       status = ScatterNd<IndicesT, float>(indices, updates, output);",
          "154:       break;",
          "156:       status = ScatterNd<IndicesT, uint8_t>(indices, updates, output);",
          "157:       break;",
          "158:     case kTfLiteBool:",
          "159:       status = ScatterNd<IndicesT, bool>(indices, updates, output);",
          "160:       break;",
          "162:       status = ScatterNd<IndicesT, int8_t>(indices, updates, output);",
          "163:       break;",
          "165:       status = ScatterNd<IndicesT, int32_t>(indices, updates, output);",
          "166:       break;",
          "168:       status = ScatterNd<IndicesT, int64_t>(indices, updates, output);",
          "169:       break;",
          "176:   if (status != kTfLiteOk) {",
          "177:     TF_LITE_KERNEL_LOG(context, \"scatter_nd index out of bounds\");",
          "178:   }",
          "179:   return status;",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/scatter_nd_test.cc||tensorflow/lite/kernels/scatter_nd_test.cc": [
          "File: tensorflow/lite/kernels/scatter_nd_test.cc -> tensorflow/lite/kernels/scatter_nd_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "348: }",
          "350: }  // namespace",
          "351: }  // namespace tflite",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "350: TEST(ScatterNdOpTest, ReadAndWriteArrayLimits) {",
          "351:   ScatterNdOpModel m({TensorType_INT32, {5, 1}}, {TensorType_INT32, {5}},",
          "352:                      {TensorType_INT32, {1}});",
          "353:   m.SetIndices<int32_t>({4, 3, 1, 0, 2});",
          "354:   m.SetUpdates<int32_t>({1, 2, 3, 7, 9});",
          "355:   m.SetShape<int32_t>({5});",
          "356:   ASSERT_EQ(m.Invoke(), kTfLiteOk);",
          "357:   EXPECT_THAT(m.GetOutputShape(), ElementsAreArray({5}));",
          "358:   EXPECT_THAT(m.GetOutput<int32_t>(), ElementsAreArray({7, 3, 9, 2, 1}));",
          "359: }",
          "361: TEST(ScatterNdOpTest, OOBRead) {",
          "362:   ScatterNdOpModel m({TensorType_INT32, {1, 1}}, {TensorType_INT32, {1}},",
          "363:                      {TensorType_INT32, {1}});",
          "364:   m.SetIndices<int32_t>({4});",
          "365:   m.SetUpdates<int32_t>({1});",
          "366:   m.SetShape<int32_t>({1});",
          "367:   ASSERT_EQ(m.Invoke(), kTfLiteError);",
          "368: }",
          "370: TEST(ScatterNdOpTest, OOBWrites) {",
          "371:   ScatterNdOpModel m({TensorType_INT32, {5, 1}}, {TensorType_INT32, {5}},",
          "372:                      {TensorType_INT32, {1}});",
          "373:   m.SetIndices<int32_t>({4, 3, 1, -0x38, 0x38});",
          "374:   m.SetUpdates<int32_t>({1, 2, 3, 0x44444444, 0x55555555});",
          "375:   m.SetShape<int32_t>({1});",
          "376:   ASSERT_EQ(m.Invoke(), kTfLiteError);",
          "377: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8c2b032c727cc9ca7271a7fe23bc1153e7005906",
      "candidate_info": {
        "commit_hash": "8c2b032c727cc9ca7271a7fe23bc1153e7005906",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/8c2b032c727cc9ca7271a7fe23bc1153e7005906",
        "files": [
          "tensorflow/lite/kernels/internal/reference/reference_ops.h",
          "tensorflow/lite/kernels/scatter_nd.cc",
          "tensorflow/lite/kernels/scatter_nd_test.cc"
        ],
        "message": "Check bounds for reads and writes in scatter_nd\n\nPiperOrigin-RevId: 463365479",
        "before_after_code_files": [
          "tensorflow/lite/kernels/internal/reference/reference_ops.h||tensorflow/lite/kernels/internal/reference/reference_ops.h",
          "tensorflow/lite/kernels/scatter_nd.cc||tensorflow/lite/kernels/scatter_nd.cc",
          "tensorflow/lite/kernels/scatter_nd_test.cc||tensorflow/lite/kernels/scatter_nd_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/internal/reference/reference_ops.h||tensorflow/lite/kernels/internal/reference/reference_ops.h",
            "tensorflow/lite/kernels/scatter_nd.cc||tensorflow/lite/kernels/scatter_nd.cc",
            "tensorflow/lite/kernels/scatter_nd_test.cc||tensorflow/lite/kernels/scatter_nd_test.cc"
          ],
          "candidate": [
            "tensorflow/lite/kernels/internal/reference/reference_ops.h||tensorflow/lite/kernels/internal/reference/reference_ops.h",
            "tensorflow/lite/kernels/scatter_nd.cc||tensorflow/lite/kernels/scatter_nd.cc",
            "tensorflow/lite/kernels/scatter_nd_test.cc||tensorflow/lite/kernels/scatter_nd_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/internal/reference/reference_ops.h||tensorflow/lite/kernels/internal/reference/reference_ops.h": [
          "File: tensorflow/lite/kernels/internal/reference/reference_ops.h -> tensorflow/lite/kernels/internal/reference/reference_ops.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1025: #endif",
          "1027: template <typename IndicesT, typename UpdatesT>",
          "1033:   ruy::profiler::ScopeLabel label(\"ScatterNd\");",
          "1035:   int n_slices = 1;",
          "",
          "[Removed Lines]",
          "1028: inline void ScatterNd(const RuntimeShape& indices_shape,",
          "1029:                       const IndicesT* indices_data,",
          "1030:                       const RuntimeShape& updates_shape,",
          "1031:                       const UpdatesT* updates_data,",
          "1032:                       const RuntimeShape& output_shape, UpdatesT* output_data) {",
          "",
          "[Added Lines]",
          "1028: inline TfLiteStatus ScatterNd(const RuntimeShape& indices_shape,",
          "1029:                               const IndicesT* indices_data,",
          "1030:                               const RuntimeShape& updates_shape,",
          "1031:                               const UpdatesT* updates_data,",
          "1032:                               const RuntimeShape& output_shape,",
          "1033:                               UpdatesT* output_data) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1052:     remain_flat_size = dims_to_count[i];",
          "1053:   }",
          "1055:   memset(output_data, 0, sizeof(UpdatesT) * output_flat_size);",
          "1056:   for (int i = 0; i < n_slices; ++i) {",
          "1057:     int to_pos = 0;",
          "1058:     for (int j = 0; j < indices_nd; ++j) {",
          "1059:       IndicesT idx = indices_data[i * indices_nd + j];",
          "1061:       to_pos += idx * dims_to_count[j];",
          "1062:     }",
          "1063:     for (int j = 0; j < slice_size; j++) {",
          "1064:       output_data[to_pos + j] += updates_data[i * slice_size + j];",
          "1065:     }",
          "1066:   }",
          "1067: }",
          "1069: template <typename T>",
          "",
          "[Removed Lines]",
          "1060:       TFLITE_DCHECK(0 <= idx && idx < output_shape.Dims(j));",
          "",
          "[Added Lines]",
          "1056:   if (n_slices * slice_size > updates_shape.FlatSize()) {",
          "1057:     return kTfLiteError;",
          "1058:   }",
          "1066:     if (to_pos < 0 || to_pos + slice_size > output_flat_size) {",
          "1067:       return kTfLiteError;",
          "1068:     }",
          "1073:   return kTfLiteOk;",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/scatter_nd.cc||tensorflow/lite/kernels/scatter_nd.cc": [
          "File: tensorflow/lite/kernels/scatter_nd.cc -> tensorflow/lite/kernels/scatter_nd.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "128: template <typename IndicesT, typename UpdatesT>",
          "129: TfLiteStatus ScatterNd(const TfLiteTensor* indices, const TfLiteTensor* updates,",
          "130:                        TfLiteTensor* output) {",
          "132:       GetTensorShape(indices), GetTensorData<IndicesT>(indices),",
          "133:       GetTensorShape(updates), GetTensorData<UpdatesT>(updates),",
          "134:       GetTensorShape(output), GetTensorData<UpdatesT>(output));",
          "136: }",
          "138: template <typename IndicesT>",
          "",
          "[Removed Lines]",
          "131:   reference_ops::ScatterNd(",
          "135:   return kTfLiteOk;",
          "",
          "[Added Lines]",
          "131:   return reference_ops::ScatterNd(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "148:                       ResizeOutputTensor<IndicesT>(context, shape, output));",
          "149:   }",
          "151:   switch (updates->type) {",
          "152:     case kTfLiteFloat32:",
          "154:     case kTfLiteUInt8:",
          "156:     case kTfLiteInt8:",
          "158:     case kTfLiteInt32:",
          "160:     case kTfLiteInt64:",
          "162:     default:",
          "163:       context->ReportError(",
          "164:           context, \"Updates of type '%s' are not supported by scatter_nd.\",",
          "165:           TfLiteTypeGetName(updates->type));",
          "166:       return kTfLiteError;",
          "167:   }",
          "168: }",
          "170: TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {",
          "",
          "[Removed Lines]",
          "153:       return ScatterNd<IndicesT, float>(indices, updates, output);",
          "155:       return ScatterNd<IndicesT, uint8_t>(indices, updates, output);",
          "157:       return ScatterNd<IndicesT, int8_t>(indices, updates, output);",
          "159:       return ScatterNd<IndicesT, int32_t>(indices, updates, output);",
          "161:       return ScatterNd<IndicesT, int64_t>(indices, updates, output);",
          "",
          "[Added Lines]",
          "150:   TfLiteStatus status = kTfLiteError;",
          "153:       status = ScatterNd<IndicesT, float>(indices, updates, output);",
          "154:       break;",
          "156:       status = ScatterNd<IndicesT, uint8_t>(indices, updates, output);",
          "157:       break;",
          "158:     case kTfLiteBool:",
          "159:       status = ScatterNd<IndicesT, bool>(indices, updates, output);",
          "160:       break;",
          "162:       status = ScatterNd<IndicesT, int8_t>(indices, updates, output);",
          "163:       break;",
          "165:       status = ScatterNd<IndicesT, int32_t>(indices, updates, output);",
          "166:       break;",
          "168:       status = ScatterNd<IndicesT, int64_t>(indices, updates, output);",
          "169:       break;",
          "176:   if (status != kTfLiteOk) {",
          "177:     TF_LITE_KERNEL_LOG(context, \"scatter_nd index out of bounds\");",
          "178:   }",
          "179:   return status;",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/scatter_nd_test.cc||tensorflow/lite/kernels/scatter_nd_test.cc": [
          "File: tensorflow/lite/kernels/scatter_nd_test.cc -> tensorflow/lite/kernels/scatter_nd_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "348: }",
          "350: }  // namespace",
          "351: }  // namespace tflite",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "350: TEST(ScatterNdOpTest, ReadAndWriteArrayLimits) {",
          "351:   ScatterNdOpModel m({TensorType_INT32, {5, 1}}, {TensorType_INT32, {5}},",
          "352:                      {TensorType_INT32, {1}});",
          "353:   m.SetIndices<int32_t>({4, 3, 1, 0, 2});",
          "354:   m.SetUpdates<int32_t>({1, 2, 3, 7, 9});",
          "355:   m.SetShape<int32_t>({5});",
          "356:   ASSERT_EQ(m.Invoke(), kTfLiteOk);",
          "357:   EXPECT_THAT(m.GetOutputShape(), ElementsAreArray({5}));",
          "358:   EXPECT_THAT(m.GetOutput<int32_t>(), ElementsAreArray({7, 3, 9, 2, 1}));",
          "359: }",
          "361: TEST(ScatterNdOpTest, OOBRead) {",
          "362:   ScatterNdOpModel m({TensorType_INT32, {1, 1}}, {TensorType_INT32, {1}},",
          "363:                      {TensorType_INT32, {1}});",
          "364:   m.SetIndices<int32_t>({4});",
          "365:   m.SetUpdates<int32_t>({1});",
          "366:   m.SetShape<int32_t>({1});",
          "367:   ASSERT_EQ(m.Invoke(), kTfLiteError);",
          "368: }",
          "370: TEST(ScatterNdOpTest, OOBWrites) {",
          "371:   ScatterNdOpModel m({TensorType_INT32, {5, 1}}, {TensorType_INT32, {5}},",
          "372:                      {TensorType_INT32, {1}});",
          "373:   m.SetIndices<int32_t>({4, 3, 1, -0x38, 0x38});",
          "374:   m.SetUpdates<int32_t>({1, 2, 3, 0x44444444, 0x55555555});",
          "375:   m.SetShape<int32_t>({1});",
          "376:   ASSERT_EQ(m.Invoke(), kTfLiteError);",
          "377: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6917f93f9d3e1131bb37d8ab1c1dc90dd8a80b87",
      "candidate_info": {
        "commit_hash": "6917f93f9d3e1131bb37d8ab1c1dc90dd8a80b87",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/6917f93f9d3e1131bb37d8ab1c1dc90dd8a80b87",
        "files": [
          "tensorflow/lite/kernels/internal/reference/reference_ops.h",
          "tensorflow/lite/kernels/scatter_nd.cc",
          "tensorflow/lite/kernels/scatter_nd_test.cc"
        ],
        "message": "Check bounds for reads and writes in scatter_nd\n\nPiperOrigin-RevId: 463365479",
        "before_after_code_files": [
          "tensorflow/lite/kernels/internal/reference/reference_ops.h||tensorflow/lite/kernels/internal/reference/reference_ops.h",
          "tensorflow/lite/kernels/scatter_nd.cc||tensorflow/lite/kernels/scatter_nd.cc",
          "tensorflow/lite/kernels/scatter_nd_test.cc||tensorflow/lite/kernels/scatter_nd_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/internal/reference/reference_ops.h||tensorflow/lite/kernels/internal/reference/reference_ops.h",
            "tensorflow/lite/kernels/scatter_nd.cc||tensorflow/lite/kernels/scatter_nd.cc",
            "tensorflow/lite/kernels/scatter_nd_test.cc||tensorflow/lite/kernels/scatter_nd_test.cc"
          ],
          "candidate": [
            "tensorflow/lite/kernels/internal/reference/reference_ops.h||tensorflow/lite/kernels/internal/reference/reference_ops.h",
            "tensorflow/lite/kernels/scatter_nd.cc||tensorflow/lite/kernels/scatter_nd.cc",
            "tensorflow/lite/kernels/scatter_nd_test.cc||tensorflow/lite/kernels/scatter_nd_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/internal/reference/reference_ops.h||tensorflow/lite/kernels/internal/reference/reference_ops.h": [
          "File: tensorflow/lite/kernels/internal/reference/reference_ops.h -> tensorflow/lite/kernels/internal/reference/reference_ops.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1025: #endif",
          "1027: template <typename IndicesT, typename UpdatesT>",
          "1033:   ruy::profiler::ScopeLabel label(\"ScatterNd\");",
          "1035:   int n_slices = 1;",
          "",
          "[Removed Lines]",
          "1028: inline void ScatterNd(const RuntimeShape& indices_shape,",
          "1029:                       const IndicesT* indices_data,",
          "1030:                       const RuntimeShape& updates_shape,",
          "1031:                       const UpdatesT* updates_data,",
          "1032:                       const RuntimeShape& output_shape, UpdatesT* output_data) {",
          "",
          "[Added Lines]",
          "1028: inline TfLiteStatus ScatterNd(const RuntimeShape& indices_shape,",
          "1029:                               const IndicesT* indices_data,",
          "1030:                               const RuntimeShape& updates_shape,",
          "1031:                               const UpdatesT* updates_data,",
          "1032:                               const RuntimeShape& output_shape,",
          "1033:                               UpdatesT* output_data) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1052:     remain_flat_size = dims_to_count[i];",
          "1053:   }",
          "1055:   memset(output_data, 0, sizeof(UpdatesT) * output_flat_size);",
          "1056:   for (int i = 0; i < n_slices; ++i) {",
          "1057:     int to_pos = 0;",
          "1058:     for (int j = 0; j < indices_nd; ++j) {",
          "1059:       IndicesT idx = indices_data[i * indices_nd + j];",
          "1061:       to_pos += idx * dims_to_count[j];",
          "1062:     }",
          "1063:     for (int j = 0; j < slice_size; j++) {",
          "1064:       output_data[to_pos + j] += updates_data[i * slice_size + j];",
          "1065:     }",
          "1066:   }",
          "1067: }",
          "1069: template <typename T>",
          "",
          "[Removed Lines]",
          "1060:       TFLITE_DCHECK(0 <= idx && idx < output_shape.Dims(j));",
          "",
          "[Added Lines]",
          "1056:   if (n_slices * slice_size > updates_shape.FlatSize()) {",
          "1057:     return kTfLiteError;",
          "1058:   }",
          "1066:     if (to_pos < 0 || to_pos + slice_size > output_flat_size) {",
          "1067:       return kTfLiteError;",
          "1068:     }",
          "1073:   return kTfLiteOk;",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/scatter_nd.cc||tensorflow/lite/kernels/scatter_nd.cc": [
          "File: tensorflow/lite/kernels/scatter_nd.cc -> tensorflow/lite/kernels/scatter_nd.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "128: template <typename IndicesT, typename UpdatesT>",
          "129: TfLiteStatus ScatterNd(const TfLiteTensor* indices, const TfLiteTensor* updates,",
          "130:                        TfLiteTensor* output) {",
          "132:       GetTensorShape(indices), GetTensorData<IndicesT>(indices),",
          "133:       GetTensorShape(updates), GetTensorData<UpdatesT>(updates),",
          "134:       GetTensorShape(output), GetTensorData<UpdatesT>(output));",
          "136: }",
          "138: template <typename IndicesT>",
          "",
          "[Removed Lines]",
          "131:   reference_ops::ScatterNd(",
          "135:   return kTfLiteOk;",
          "",
          "[Added Lines]",
          "131:   return reference_ops::ScatterNd(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "148:                       ResizeOutputTensor<IndicesT>(context, shape, output));",
          "149:   }",
          "151:   switch (updates->type) {",
          "152:     case kTfLiteFloat32:",
          "154:     case kTfLiteUInt8:",
          "156:     case kTfLiteInt8:",
          "158:     case kTfLiteInt32:",
          "160:     case kTfLiteInt64:",
          "162:     default:",
          "163:       context->ReportError(",
          "164:           context, \"Updates of type '%s' are not supported by scatter_nd.\",",
          "165:           TfLiteTypeGetName(updates->type));",
          "166:       return kTfLiteError;",
          "167:   }",
          "168: }",
          "170: TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {",
          "",
          "[Removed Lines]",
          "153:       return ScatterNd<IndicesT, float>(indices, updates, output);",
          "155:       return ScatterNd<IndicesT, uint8_t>(indices, updates, output);",
          "157:       return ScatterNd<IndicesT, int8_t>(indices, updates, output);",
          "159:       return ScatterNd<IndicesT, int32_t>(indices, updates, output);",
          "161:       return ScatterNd<IndicesT, int64_t>(indices, updates, output);",
          "",
          "[Added Lines]",
          "150:   TfLiteStatus status = kTfLiteError;",
          "153:       status = ScatterNd<IndicesT, float>(indices, updates, output);",
          "154:       break;",
          "156:       status = ScatterNd<IndicesT, uint8_t>(indices, updates, output);",
          "157:       break;",
          "158:     case kTfLiteBool:",
          "159:       status = ScatterNd<IndicesT, bool>(indices, updates, output);",
          "160:       break;",
          "162:       status = ScatterNd<IndicesT, int8_t>(indices, updates, output);",
          "163:       break;",
          "165:       status = ScatterNd<IndicesT, int32_t>(indices, updates, output);",
          "166:       break;",
          "168:       status = ScatterNd<IndicesT, int64_t>(indices, updates, output);",
          "169:       break;",
          "176:   if (status != kTfLiteOk) {",
          "177:     TF_LITE_KERNEL_LOG(context, \"scatter_nd index out of bounds\");",
          "178:   }",
          "179:   return status;",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/scatter_nd_test.cc||tensorflow/lite/kernels/scatter_nd_test.cc": [
          "File: tensorflow/lite/kernels/scatter_nd_test.cc -> tensorflow/lite/kernels/scatter_nd_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "348: }",
          "350: }  // namespace",
          "351: }  // namespace tflite",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "350: TEST(ScatterNdOpTest, ReadAndWriteArrayLimits) {",
          "351:   ScatterNdOpModel m({TensorType_INT32, {5, 1}}, {TensorType_INT32, {5}},",
          "352:                      {TensorType_INT32, {1}});",
          "353:   m.SetIndices<int32_t>({4, 3, 1, 0, 2});",
          "354:   m.SetUpdates<int32_t>({1, 2, 3, 7, 9});",
          "355:   m.SetShape<int32_t>({5});",
          "356:   ASSERT_EQ(m.Invoke(), kTfLiteOk);",
          "357:   EXPECT_THAT(m.GetOutputShape(), ElementsAreArray({5}));",
          "358:   EXPECT_THAT(m.GetOutput<int32_t>(), ElementsAreArray({7, 3, 9, 2, 1}));",
          "359: }",
          "361: TEST(ScatterNdOpTest, OOBRead) {",
          "362:   ScatterNdOpModel m({TensorType_INT32, {1, 1}}, {TensorType_INT32, {1}},",
          "363:                      {TensorType_INT32, {1}});",
          "364:   m.SetIndices<int32_t>({4});",
          "365:   m.SetUpdates<int32_t>({1});",
          "366:   m.SetShape<int32_t>({1});",
          "367:   ASSERT_EQ(m.Invoke(), kTfLiteError);",
          "368: }",
          "370: TEST(ScatterNdOpTest, OOBWrites) {",
          "371:   ScatterNdOpModel m({TensorType_INT32, {5, 1}}, {TensorType_INT32, {5}},",
          "372:                      {TensorType_INT32, {1}});",
          "373:   m.SetIndices<int32_t>({4, 3, 1, -0x38, 0x38});",
          "374:   m.SetUpdates<int32_t>({1, 2, 3, 0x44444444, 0x55555555});",
          "375:   m.SetShape<int32_t>({1});",
          "376:   ASSERT_EQ(m.Invoke(), kTfLiteError);",
          "377: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}