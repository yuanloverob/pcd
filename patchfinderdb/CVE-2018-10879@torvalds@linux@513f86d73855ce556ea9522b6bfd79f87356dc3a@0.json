{
  "cve_id": "CVE-2018-10879",
  "cve_desc": "A flaw was found in the Linux kernel's ext4 filesystem. A local user can cause a use-after-free in ext4_xattr_set_entry function and a denial of service or unspecified other impact may occur by renaming a file in a crafted ext4 filesystem image.",
  "repo": "torvalds/linux",
  "patch_hash": "513f86d73855ce556ea9522b6bfd79f87356dc3a",
  "patch_info": {
    "commit_hash": "513f86d73855ce556ea9522b6bfd79f87356dc3a",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/513f86d73855ce556ea9522b6bfd79f87356dc3a",
    "files": [
      "fs/ext4/xattr.c"
    ],
    "message": "ext4: always verify the magic number in xattr blocks\n\nIf there an inode points to a block which is also some other type of\nmetadata block (such as a block allocation bitmap), the\nbuffer_verified flag can be set when it was validated as that other\nmetadata block type; however, it would make a really terrible external\nattribute block.  The reason why we use the verified flag is to avoid\nconstantly reverifying the block.  However, it doesn't take much\noverhead to make sure the magic number of the xattr block is correct,\nand this will avoid potential crashes.\n\nThis addresses CVE-2018-10879.\n\nhttps://bugzilla.kernel.org/show_bug.cgi?id=200001\n\nSigned-off-by: Theodore Ts'o <tytso@mit.edu>\nReviewed-by: Andreas Dilger <adilger@dilger.ca>\nCc: stable@kernel.org",
    "before_after_code_files": [
      "fs/ext4/xattr.c||fs/ext4/xattr.c"
    ]
  },
  "patch_diff": {
    "fs/ext4/xattr.c||fs/ext4/xattr.c": [
      "File: fs/ext4/xattr.c -> fs/ext4/xattr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "230: {",
      "231:  int error = -EFSCORRUPTED;",
      "236:  if (BHDR(bh)->h_magic != cpu_to_le32(EXT4_XATTR_MAGIC) ||",
      "237:      BHDR(bh)->h_blocks != cpu_to_le32(1))",
      "238:   goto errout;",
      "239:  error = -EFSBADCRC;",
      "240:  if (!ext4_xattr_block_csum_verify(inode, bh))",
      "241:   goto errout;",
      "",
      "[Removed Lines]",
      "233:  if (buffer_verified(bh))",
      "234:   return 0;",
      "",
      "[Added Lines]",
      "236:  if (buffer_verified(bh))",
      "237:   return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "de05ca8526796c7e9f7c7282b7f89a818af19818",
      "candidate_info": {
        "commit_hash": "de05ca8526796c7e9f7c7282b7f89a818af19818",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/de05ca8526796c7e9f7c7282b7f89a818af19818",
        "files": [
          "fs/ext4/xattr.c"
        ],
        "message": "ext4: move call to ext4_error() into ext4_xattr_check_block()\n\nRefactor the call to EXT4_ERROR_INODE() into ext4_xattr_check_block().\nThis simplifies the code, and fixes a problem where not all callers of\next4_xattr_check_block() were not resulting in ext4_error() getting\ncalled when the xattr block is corrupted.\n\nSigned-off-by: Theodore Ts'o <tytso@mit.edu>\nCc: stable@vger.kernel.org",
        "before_after_code_files": [
          "fs/ext4/xattr.c||fs/ext4/xattr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/ext4/xattr.c||fs/ext4/xattr.c"
          ],
          "candidate": [
            "fs/ext4/xattr.c||fs/ext4/xattr.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/ext4/xattr.c||fs/ext4/xattr.c": [
          "File: fs/ext4/xattr.c -> fs/ext4/xattr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "225: }",
          "227: static inline int",
          "229: {",
          "232:  if (buffer_verified(bh))",
          "233:   return 0;",
          "235:  if (BHDR(bh)->h_magic != cpu_to_le32(EXT4_XATTR_MAGIC) ||",
          "236:      BHDR(bh)->h_blocks != cpu_to_le32(1))",
          "238:  if (!ext4_xattr_block_csum_verify(inode, bh))",
          "240:  error = ext4_xattr_check_entries(BFIRST(bh), bh->b_data + bh->b_size,",
          "241:       bh->b_data);",
          "243:   set_buffer_verified(bh);",
          "244:  return error;",
          "245: }",
          "247: static int",
          "248: __xattr_check_inode(struct inode *inode, struct ext4_xattr_ibody_header *header,",
          "249:     void *end, const char *function, unsigned int line)",
          "",
          "[Removed Lines]",
          "228: ext4_xattr_check_block(struct inode *inode, struct buffer_head *bh)",
          "230:  int error;",
          "237:   return -EFSCORRUPTED;",
          "239:   return -EFSBADCRC;",
          "242:  if (!error)",
          "",
          "[Added Lines]",
          "228: __ext4_xattr_check_block(struct inode *inode, struct buffer_head *bh,",
          "229:     const char *function, unsigned int line)",
          "231:  int error = -EFSCORRUPTED;",
          "238:   goto errout;",
          "239:  error = -EFSBADCRC;",
          "241:   goto errout;",
          "244: errout:",
          "245:  if (error)",
          "246:   __ext4_error_inode(inode, function, line, 0,",
          "247:        \"corrupted xattr block %llu\",",
          "248:        (unsigned long long) bh->b_blocknr);",
          "249:  else",
          "254: #define ext4_xattr_check_block(inode, bh) \\",
          "255:  __ext4_xattr_check_block((inode), (bh),  __func__, __LINE__)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "514:   goto cleanup;",
          "515:  ea_bdebug(bh, \"b_count=%d, refcount=%d\",",
          "516:   atomic_read(&(bh->b_count)), le32_to_cpu(BHDR(bh)->h_refcount));",
          "521:   goto cleanup;",
          "523:  ext4_xattr_block_cache_insert(ea_block_cache, bh);",
          "524:  entry = BFIRST(bh);",
          "525:  error = ext4_xattr_find_entry(&entry, name_index, name, 1);",
          "",
          "[Removed Lines]",
          "517:  if (ext4_xattr_check_block(inode, bh)) {",
          "518:   EXT4_ERROR_INODE(inode, \"bad block %llu\",",
          "519:      EXT4_I(inode)->i_file_acl);",
          "520:   error = -EFSCORRUPTED;",
          "522:  }",
          "",
          "[Added Lines]",
          "528:  error = ext4_xattr_check_block(inode, bh);",
          "529:  if (error)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "679:   goto cleanup;",
          "680:  ea_bdebug(bh, \"b_count=%d, refcount=%d\",",
          "681:   atomic_read(&(bh->b_count)), le32_to_cpu(BHDR(bh)->h_refcount));",
          "686:   goto cleanup;",
          "688:  ext4_xattr_block_cache_insert(EA_BLOCK_CACHE(inode), bh);",
          "689:  error = ext4_xattr_list_entries(dentry, BFIRST(bh), buffer, buffer_size);",
          "",
          "[Removed Lines]",
          "682:  if (ext4_xattr_check_block(inode, bh)) {",
          "683:   EXT4_ERROR_INODE(inode, \"bad block %llu\",",
          "684:      EXT4_I(inode)->i_file_acl);",
          "685:   error = -EFSCORRUPTED;",
          "687:  }",
          "",
          "[Added Lines]",
          "690:  error = ext4_xattr_check_block(inode, bh);",
          "691:  if (error)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "811:    goto out;",
          "812:   }",
          "816:    goto out;",
          "819:   for (entry = BFIRST(bh); !IS_LAST_ENTRY(entry);",
          "820:        entry = EXT4_XATTR_NEXT(entry))",
          "",
          "[Removed Lines]",
          "814:   if (ext4_xattr_check_block(inode, bh)) {",
          "815:    ret = -EFSCORRUPTED;",
          "817:   }",
          "",
          "[Added Lines]",
          "819:   ret = ext4_xattr_check_block(inode, bh);",
          "820:   if (ret)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1796:   ea_bdebug(bs->bh, \"b_count=%d, refcount=%d\",",
          "1797:    atomic_read(&(bs->bh->b_count)),",
          "1798:    le32_to_cpu(BHDR(bs->bh)->h_refcount));",
          "1803:    goto cleanup;",
          "1806:   bs->s.base = BHDR(bs->bh);",
          "1807:   bs->s.first = BFIRST(bs->bh);",
          "",
          "[Removed Lines]",
          "1799:   if (ext4_xattr_check_block(inode, bs->bh)) {",
          "1800:    EXT4_ERROR_INODE(inode, \"bad block %llu\",",
          "1801:       EXT4_I(inode)->i_file_acl);",
          "1802:    error = -EFSCORRUPTED;",
          "1804:   }",
          "",
          "[Added Lines]",
          "1803:   error = ext4_xattr_check_block(inode, bs->bh);",
          "1804:   if (error)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2724:   error = -EIO;",
          "2725:   if (!bh)",
          "2726:    goto cleanup;",
          "2732:    goto cleanup;",
          "2734:   base = BHDR(bh);",
          "2735:   end = bh->b_data + bh->b_size;",
          "2736:   min_offs = end - base;",
          "",
          "[Removed Lines]",
          "2727:   if (ext4_xattr_check_block(inode, bh)) {",
          "2728:    EXT4_ERROR_INODE(inode, \"bad block %llu\",",
          "2729:       EXT4_I(inode)->i_file_acl);",
          "2730:    error = -EFSCORRUPTED;",
          "2731:    brelse(bh);",
          "2733:   }",
          "",
          "[Added Lines]",
          "2728:   error = ext4_xattr_check_block(inode, bh);",
          "2729:   if (error)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2887:    goto cleanup;",
          "2888:   }",
          "2889:   error = ext4_xattr_check_block(inode, bh);",
          "2893:    goto cleanup;",
          "2896:   if (ext4_has_feature_ea_inode(inode->i_sb)) {",
          "2897:    for (entry = BFIRST(bh); !IS_LAST_ENTRY(entry);",
          "",
          "[Removed Lines]",
          "2890:   if (error) {",
          "2891:    EXT4_ERROR_INODE(inode, \"bad block %llu (error %d)\",",
          "2892:       EXT4_I(inode)->i_file_acl, error);",
          "2894:   }",
          "",
          "[Added Lines]",
          "2887:   if (error)",
          "",
          "---------------"
        ]
      }
    }
  ]
}