{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1417c2f77f4c63d3a18bff4c21a933cfe4b5daee",
      "candidate_info": {
        "commit_hash": "1417c2f77f4c63d3a18bff4c21a933cfe4b5daee",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1417c2f77f4c63d3a18bff4c21a933cfe4b5daee",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/lemon.c"
        ],
        "message": "Fix the parse.sql output file so that it is readable into a database where foreign keys are enforced.\n\nFossilOrigin-Name: 3a82c554c3bde4640df6865686f8f70e2c1e07c581fed4772b6b0a8ec1b10bb6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/lemon.c||tool/lemon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0fab65c79f675c825ed7e85c82b65ce6f990c9d0796ebb3886942d241df7b268",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4189:       return;",
          "4190:     }",
          "4191:     fprintf(sql,",
          "4192:        \"CREATE TABLE symbol(\\n\"",
          "4193:        \"  id INTEGER PRIMARY KEY,\\n\"",
          "4194:        \"  name TEXT NOT NULL,\\n\"",
          "4195:        \"  isTerminal BOOLEAN NOT NULL,\\n\"",
          "4197:        \");\\n\"",
          "4198:     );",
          "4199:     for(i=0; i<lemp->nsymbol; i++){",
          "",
          "[Removed Lines]",
          "4196:        \"  fallback INTEGER REFERENCES symbol\\n\"",
          "",
          "[Added Lines]",
          "4192:        \"BEGIN;\\n\"",
          "4197:        \"  fallback INTEGER REFERENCES symbol\"",
          "4198:                \" DEFERRABLE INITIALLY DEFERRED\\n\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4244:         }",
          "4245:       }",
          "4246:     }",
          "4247:   }",
          "4248:   lineno = 1;",
          "4249:   tplt_xfer(lemp->name,in,out,&lineno);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4249:     fprintf(sql, \"COMMIT;\\n\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6fcb9f3ad96ea42eb46ff33b5fbd182f51d968b2",
      "candidate_info": {
        "commit_hash": "6fcb9f3ad96ea42eb46ff33b5fbd182f51d968b2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6fcb9f3ad96ea42eb46ff33b5fbd182f51d968b2",
        "files": [
          "ext/fts3/fts3_snippet.c",
          "manifest",
          "manifest.uuid",
          "test/fts3snippet.test"
        ],
        "message": "Fix a broken assert() in the fts3 snippet code that was failing for queries containging more than 64 phrases.\n\nFossilOrigin-Name: 4c01e0170e113ad052b6c3980beb4be9f1dc03fb3cf34132b90e8b82b23f654e",
        "before_after_code_files": [
          "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3snippet.test||test/fts3snippet.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c": [
          "File: ext/fts3/fts3_snippet.c -> ext/fts3/fts3_snippet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "434:       while( iCsr<(iStart+pIter->nSnippet) && iCsr>=iStart ){",
          "435:         int j;",
          "437:         u64 mPos = (u64)1 << (iCsr - iStart);",
          "438:         assert( iCsr>=iStart && (iCsr - iStart)<=64 );",
          "440:         if( (mCover|mCovered)&mPhrase ){",
          "441:           iScore++;",
          "442:         }else{",
          "",
          "[Removed Lines]",
          "436:         u64 mPhrase = (u64)1 << i;",
          "439:         assert( i>=0 && i<=64 );",
          "",
          "[Added Lines]",
          "436:         u64 mPhrase = (u64)1 << (i%64);",
          "439:         assert( i>=0 );",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 00e9a8f2730eb7239bf7fd107c97c409e4f9fbd968510766373440a9079898eb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3snippet.test||test/fts3snippet.test": [
          "File: test/fts3snippet.test -> test/fts3snippet.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "561:   }]",
          "562: } {64}",
          "566: set sqlite_fts3_enable_parentheses 0",
          "567: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "564: #-------------------------------------------------------------------------",
          "565: # Request a snippet from a query with more than 64 phrases.",
          "566: #",
          "567: do_execsql_test 5.0 {",
          "568:   CREATE VIRTUAL TABLE t5 USING fts3(x);",
          "569:   INSERT INTO t5 VALUES('a1 a2 a3');",
          "570:   INSERT INTO t5 VALUES('a4 a5 a6');",
          "571:   INSERT INTO t5 VALUES('a70 a71 a72');",
          "572: }",
          "574: do_execsql_test 5.1 {",
          "575:   SELECT snippet(t5, '[', ']') FROM t5 WHERE t5 MATCH",
          "576:   'a1 OR a2 OR a3 OR a4 OR a5 OR a6 OR a7 OR a8 OR a9 OR a10 OR ' ||",
          "577:   'a11 OR a12 OR a13 OR a14 OR a15 OR a16 OR a17 OR a18 OR a19 OR a10 OR ' ||",
          "578:   'a21 OR a22 OR a23 OR a24 OR a25 OR a26 OR a27 OR a28 OR a29 OR a20 OR ' ||",
          "579:   'a31 OR a32 OR a33 OR a34 OR a35 OR a36 OR a37 OR a38 OR a39 OR a30 OR ' ||",
          "580:   'a41 OR a42 OR a43 OR a44 OR a45 OR a46 OR a47 OR a48 OR a49 OR a40 OR ' ||",
          "581:   'a51 OR a52 OR a53 OR a54 OR a55 OR a56 OR a57 OR a58 OR a59 OR a50 OR ' ||",
          "582:   'a61 OR a62 OR a63 OR a64 OR a65 OR a66 OR a67 OR a68 OR a69 OR a60 OR ' ||",
          "583:   'a71 OR a72 OR a73 OR a74 OR a75 OR a76 OR a77 OR a78 OR a79 OR a70'",
          "584: } {",
          "585:   {[a1] [a2] [a3]}",
          "586:   {[a4] [a5] [a6]}",
          "587:   {[a70] [a71] [a72]}",
          "588: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "579d41dc8d938a936e3e8f19a114ed351b724dd0",
      "candidate_info": {
        "commit_hash": "579d41dc8d938a936e3e8f19a114ed351b724dd0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/579d41dc8d938a936e3e8f19a114ed351b724dd0",
        "files": [
          "Makefile.in",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix the checksymbols target in Makefile.in.\n\nFossilOrigin-Name: 1956eb348170a9a873878b522f377fa7303cdb3beca41f5515b6b9da1b1f544d",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1372: # releasetest.tcl script.",
          "1373: #",
          "1374: VALIDIDS=' sqlite3(changeset|changegroup|session)?_'",
          "1377:  echo '0 errors out of 1 tests'",
          "1379: # Build the amalgamation-autoconf package.  The amalamgation-tarball target builds",
          "",
          "[Removed Lines]",
          "1375: checksymbols: sqlite3.lo",
          "1376:  nm -g --defined-only sqlite3.lo | egrep -v $(VALIDIDS); test $$? -ne 0",
          "",
          "[Added Lines]",
          "1375: checksymbols: sqlite3.o",
          "1376:  nm -g --defined-only sqlite3.o",
          "1377:  nm -g --defined-only sqlite3.o | egrep -v $(VALIDIDS); test $$? -ne 0",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c47e53b4d0f29628bd20ba3daf7e759c4bfed07710d982c095445c01376d57f5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bc0a55cf0b4c47fbb551583bfda3ed5a1d57d453",
      "candidate_info": {
        "commit_hash": "bc0a55cf0b4c47fbb551583bfda3ed5a1d57d453",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bc0a55cf0b4c47fbb551583bfda3ed5a1d57d453",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c",
          "test/where.test"
        ],
        "message": "Check-in [fa792714ae62fa980] is not a valid fix for ticket [df46dfb631f75694], as the new test case in this check-in demonstrates. The fix here causes test cases for the [df46dfb631f75694] bug to fail again, so this check-in is on a branch.  A new fix is needed for [df46dfb631f75694].\n\nFossilOrigin-Name: 0d456456da6e25b20d9d27ca95f1013082bca52ee74ee9bf91732a9fa843ea45",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c",
          "test/where.test||test/where.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 579b66eaa0816561c6e47ea116b46f229188f0fc84c1173bfe0d21df2dff9a9a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1344:     sqlite3VdbeAddOp3(v, OP_SeekRowid, iCur, addrNxt, iRowidReg);",
          "1345:     VdbeCoverage(v);",
          "1346:     pLevel->op = OP_Noop;",
          "1348:   }else if( (pLoop->wsFlags & WHERE_IPK)!=0",
          "1349:          && (pLoop->wsFlags & WHERE_COLUMN_RANGE)!=0",
          "1350:   ){",
          "",
          "[Removed Lines]",
          "1347:     pTerm->wtFlags |= TERM_CODED;",
          "",
          "[Added Lines]",
          "1347:     if( (pTerm->prereqAll & pLevel->notReady)==0 ){",
          "1348:       pTerm->wtFlags |= TERM_CODED;",
          "1349:     }",
          "",
          "---------------"
        ],
        "test/where.test||test/where.test": [
          "File: test/where.test -> test/where.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1425:   SELECT count(*) FROM t1 LEFT JOIN t2 ON a IS NOT NULL;",
          "1426: } {5}",
          "1429: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1428: # 20190-02-22:  A bug introduced by checkin",
          "1429: # https://www.sqlite.org/src/info/fa792714ae62fa98.",
          "1430: #",
          "1431: do_execsql_test where-23.0 {",
          "1432:   DROP TABLE IF EXISTS t1;",
          "1433:   DROP TABLE IF EXISTS t2;",
          "1434:   CREATE TABLE t1(a INTEGER PRIMARY KEY);",
          "1435:   INSERT INTO t1(a) VALUES(1),(2),(3);",
          "1436:   CREATE TABLE t2(x INTEGER PRIMARY KEY, y INT);",
          "1437:   INSERT INTO t2(y) VALUES(2),(3);",
          "1438:   SELECT * FROM t1, t2 WHERE a=y AND y=3;",
          "1439: } {3 2 3}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7464f578eda14dbf56d4e37d72aae2af03a5930c",
      "candidate_info": {
        "commit_hash": "7464f578eda14dbf56d4e37d72aae2af03a5930c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7464f578eda14dbf56d4e37d72aae2af03a5930c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vacuum.c",
          "test/vacuum-into.test"
        ],
        "message": "Do not allow VACUUM INTO into a file that already exists.\n\nFossilOrigin-Name: 92f70e0fa3c9de7fde046f11cc0a7c2800511bb5ace8e68c845133931607616e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vacuum.c||src/vacuum.c",
          "test/vacuum-into.test||test/vacuum-into.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 93d92a0a5d21a1856316c0205ecaa253691b6e5349b552d43027005676d14820",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vacuum.c||src/vacuum.c": [
          "File: src/vacuum.c -> src/vacuum.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "200:   pDb = &db->aDb[nDb];",
          "201:   assert( strcmp(pDb->zDbSName,\"vacuum_db\")==0 );",
          "202:   pTemp = pDb->pBt;",
          "203:   nRes = sqlite3BtreeGetOptimalReserve(pMain);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203:   if( zOut!=0 ){",
          "204:     sqlite3_file *id = sqlite3PagerFile(sqlite3BtreePager(pTemp));",
          "205:     i64 sz = 0;",
          "206:     if( id->pMethods!=0 && (sqlite3OsFileSize(id, &sz)!=SQLITE_OK || sz>0) ){",
          "207:       rc = SQLITE_ERROR;",
          "208:       sqlite3SetString(pzErrMsg, db, \"output file already exists\");",
          "209:       goto end_of_vacuum;",
          "210:     }",
          "211:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "374:     pDb->pSchema = 0;",
          "375:   }",
          "383:   return rc;",
          "384: }",
          "",
          "[Removed Lines]",
          "377:   if( zOut==0 ){",
          "380:     sqlite3ResetAllSchemasOfConnection(db);",
          "381:   }",
          "",
          "[Added Lines]",
          "388:   sqlite3ResetAllSchemasOfConnection(db);",
          "",
          "---------------"
        ],
        "test/vacuum-into.test||test/vacuum-into.test": [
          "File: test/vacuum-into.test -> test/vacuum-into.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018-12-07",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this file is testing the VACUUM INTO statement.",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "18: # If the VACUUM statement is disabled in the current build, skip all",
          "19: # the tests in this file.",
          "20: #",
          "21: ifcapable {!vacuum} {",
          "22:   omit_test vacuum.test {Compiled with SQLITE_OMIT_VACUUM}",
          "23:   finish_test",
          "24:   return",
          "25: }",
          "27: forcedelete out.db",
          "28: do_execsql_test vacuum-into-100 {",
          "29:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b);",
          "30:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<100)",
          "31:   INSERT INTO t1(a,b) SELECT x, randomblob(600) FROM c;",
          "32:   CREATE INDEX t1b ON t1(b);",
          "33:   DELETE FROM t1 WHERE a%2;",
          "34:   SELECT count(*), sum(a), sum(length(b)) FROM t1;",
          "35: } {50 2550 30000}",
          "36: do_execsql_test vacuum-into-110 {",
          "37:   VACUUM main INTO 'out.db';",
          "38: } {}",
          "39: sqlite3 db2 out.db",
          "40: do_test vacuum-into-120 {",
          "41:   db2 eval {SELECT count(*), sum(a), sum(length(b)) FROM t1}",
          "42: } {50 2550 30000}",
          "43: do_catchsql_test vacuum-into-130 {",
          "44:   VACUUM INTO 'out.db';",
          "45: } {1 {output file already exists}}",
          "46: forcedelete out2.db",
          "47: do_catchsql_test vacuum-into-140 {",
          "48:   VACUUM INTO 'out2.db';",
          "49: } {0 {}}",
          "50: do_catchsql_test vacuum-into-150 {",
          "51:   VACUUM INTO 'out2.db';",
          "52: } {1 {output file already exists}}",
          "54: do_catchsql_test vacuum-into-200 {",
          "55:   VACUUM main INTO ':memory:';",
          "56: } {0 {}}",
          "58: finish_test",
          "",
          "---------------"
        ]
      }
    }
  ]
}