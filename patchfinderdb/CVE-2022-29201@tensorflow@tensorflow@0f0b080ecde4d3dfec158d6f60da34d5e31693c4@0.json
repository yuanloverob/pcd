{
  "cve_id": "CVE-2022-29201",
  "cve_desc": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, the implementation of `tf.raw_ops.QuantizedConv2D` does not fully validate the input arguments. In this case, references get bound to `nullptr` for each argument that is empty. Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "0f0b080ecde4d3dfec158d6f60da34d5e31693c4",
  "patch_info": {
    "commit_hash": "0f0b080ecde4d3dfec158d6f60da34d5e31693c4",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/0f0b080ecde4d3dfec158d6f60da34d5e31693c4",
    "files": [
      "tensorflow/core/kernels/quantized_conv_ops.cc",
      "tensorflow/core/kernels/quantized_conv_ops_test.cc",
      "tensorflow/python/ops/quantized_conv_ops_test.py"
    ],
    "message": "Fix undefined behavior in QuantizedConv2D\n\nAdded more input validation and tests.  Prior to this, we could get\n`nullptr` exceptions when attempting to access 0th elements of 0-sized\ninputs, leading to security vulnerability bugs.\n\nAlso needed to modify `quantized_conv_ops_test.cc` for consistency.\nPreviously the CPU kernel did technically support passing tensors\nof rank larger than 0 for min/max values.  However, the XLA kernels do not.\n\nPiperOrigin-RevId: 445518507",
    "before_after_code_files": [
      "tensorflow/core/kernels/quantized_conv_ops.cc||tensorflow/core/kernels/quantized_conv_ops.cc",
      "tensorflow/core/kernels/quantized_conv_ops_test.cc||tensorflow/core/kernels/quantized_conv_ops_test.cc",
      "tensorflow/python/ops/quantized_conv_ops_test.py||tensorflow/python/ops/quantized_conv_ops_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/quantized_conv_ops.cc||tensorflow/core/kernels/quantized_conv_ops.cc": [
      "File: tensorflow/core/kernels/quantized_conv_ops.cc -> tensorflow/core/kernels/quantized_conv_ops.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: #include <algorithm>",
      "19: #include <vector>",
      "23: #define EIGEN_USE_THREADS",
      "25: #define GEMMLOWP_ALLOW_SLOW_SCALAR_FALLBACK",
      "",
      "[Removed Lines]",
      "21: #include \"tensorflow/core/platform/errors.h\"",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "32: #include \"tensorflow/core/kernels/quantization_utils.h\"",
      "33: #include \"tensorflow/core/kernels/reference_gemm.h\"",
      "34: #include \"tensorflow/core/lib/core/errors.h\"",
      "35: #include \"tensorflow/core/util/padding.h\"",
      "37: namespace tensorflow {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33: #include \"tensorflow/core/platform/errors.h\"",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "501:     OP_REQUIRES(context, input.dims() == 4,",
      "504:     OP_REQUIRES(context, filter.dims() == 4,",
      "508:     const float min_input = context->input(2).flat<float>()(0);",
      "509:     const float max_input = context->input(3).flat<float>()(0);",
      "",
      "[Removed Lines]",
      "502:                 errors::InvalidArgument(\"input must be 4-dimensional\",",
      "503:                                         input.shape().DebugString()));",
      "505:                 errors::InvalidArgument(\"filter must be 4-dimensional: \",",
      "506:                                         filter.shape().DebugString()));",
      "",
      "[Added Lines]",
      "501:                 errors::InvalidArgument(\"input must be rank 4 but is rank \",",
      "502:                                         input.shape().dims()));",
      "504:                 errors::InvalidArgument(\"filter must be rank 4 but is rank \",",
      "505:                                         filter.shape().dims()));",
      "507:     OP_REQUIRES(context, TensorShapeUtils::IsScalar(context->input(2).shape()),",
      "508:                 errors::InvalidArgument(\"min_input must be rank 0 but is rank \",",
      "509:                                         context->input(2).shape().dims()));",
      "510:     OP_REQUIRES(context, TensorShapeUtils::IsScalar(context->input(3).shape()),",
      "511:                 errors::InvalidArgument(\"max_input must be rank 0 but is rank \",",
      "512:                                         context->input(3).shape().dims()));",
      "513:     OP_REQUIRES(",
      "514:         context, TensorShapeUtils::IsScalar(context->input(4).shape()),",
      "515:         errors::InvalidArgument(\"min_filter must be rank 0 but is rank \",",
      "516:                                 context->input(4).shape().dims()));",
      "517:     OP_REQUIRES(",
      "518:         context, TensorShapeUtils::IsScalar(context->input(5).shape()),",
      "519:         errors::InvalidArgument(\"max_filter must be rank 0 but is rank \",",
      "520:                                 context->input(5).shape().dims()));",
      "",
      "---------------"
    ],
    "tensorflow/core/kernels/quantized_conv_ops_test.cc||tensorflow/core/kernels/quantized_conv_ops_test.cc": [
      "File: tensorflow/core/kernels/quantized_conv_ops_test.cc -> tensorflow/core/kernels/quantized_conv_ops_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "91:                             image_quantized.flat<quint8>());",
      "92:   AddInputFromArray<quint8>(filter_quantized.shape(),",
      "93:                             filter_quantized.flat<quint8>());",
      "98:   TF_ASSERT_OK(RunOpKernel());",
      "",
      "[Removed Lines]",
      "94:   AddInputFromArray<float>(TensorShape({1}), {image_min});",
      "95:   AddInputFromArray<float>(TensorShape({1}), {image_max});",
      "96:   AddInputFromArray<float>(TensorShape({1}), {filter_min});",
      "97:   AddInputFromArray<float>(TensorShape({1}), {filter_max});",
      "",
      "[Added Lines]",
      "94:   AddInputFromArray<float>(TensorShape({}), {image_min});",
      "95:   AddInputFromArray<float>(TensorShape({}), {image_max});",
      "96:   AddInputFromArray<float>(TensorShape({}), {filter_min});",
      "97:   AddInputFromArray<float>(TensorShape({}), {filter_max});",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "158:   AddInputFromArray<quint8>(",
      "159:       TensorShape({filter_size, filter_size, depth, filter_count}),",
      "160:       {10, 40, 70, 20, 50, 80, 30, 60, 90});",
      "166:   TF_ASSERT_OK(RunOpKernel());",
      "167:   const int expected_width = image_width;",
      "",
      "[Removed Lines]",
      "161:   AddInputFromArray<float>(TensorShape({1}), {0});",
      "162:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
      "163:   AddInputFromArray<float>(TensorShape({1}), {0});",
      "164:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
      "",
      "[Added Lines]",
      "161:   AddInputFromArray<float>(TensorShape({}), {0});",
      "162:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
      "163:   AddInputFromArray<float>(TensorShape({}), {0});",
      "164:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "201:   AddInputFromArray<quint8>(",
      "202:       TensorShape({filter_size, filter_size, depth, filter_count}),",
      "203:       {1, 2, 3, 4, 5, 6, 7, 8, 9});",
      "209:   TF_ASSERT_OK(RunOpKernel());",
      "210:   const int expected_width = image_width / stride;",
      "",
      "[Removed Lines]",
      "204:   AddInputFromArray<float>(TensorShape({1}), {0});",
      "205:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
      "206:   AddInputFromArray<float>(TensorShape({1}), {0});",
      "207:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
      "",
      "[Added Lines]",
      "204:   AddInputFromArray<float>(TensorShape({}), {0});",
      "205:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
      "206:   AddInputFromArray<float>(TensorShape({}), {0});",
      "207:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "244:   AddInputFromArray<quint8>(",
      "245:       TensorShape({filter_size, filter_size, depth, filter_count}),",
      "246:       {1, 2, 3, 4, 5, 6, 7, 8, 9});",
      "252:   TF_ASSERT_OK(RunOpKernel());",
      "253:   const int expected_width = image_width / stride;",
      "",
      "[Removed Lines]",
      "247:   AddInputFromArray<float>(TensorShape({1}), {0});",
      "248:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
      "249:   AddInputFromArray<float>(TensorShape({1}), {0});",
      "250:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
      "",
      "[Added Lines]",
      "247:   AddInputFromArray<float>(TensorShape({}), {0});",
      "248:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
      "249:   AddInputFromArray<float>(TensorShape({}), {0});",
      "250:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "302:                             image_quantized.flat<quint8>());",
      "303:   AddInputFromArray<quint8>(filter_quantized.shape(),",
      "304:                             filter_quantized.flat<quint8>());",
      "309:   TF_ASSERT_OK(RunOpKernel());",
      "310:   const int expected_width = image_width;",
      "311:   const int expected_height = image_height * filter_count;",
      "",
      "[Removed Lines]",
      "305:   AddInputFromArray<float>(TensorShape({1}), {image_min});",
      "306:   AddInputFromArray<float>(TensorShape({1}), {image_max});",
      "307:   AddInputFromArray<float>(TensorShape({1}), {filter_min});",
      "308:   AddInputFromArray<float>(TensorShape({1}), {filter_max});",
      "",
      "[Added Lines]",
      "305:   AddInputFromArray<float>(TensorShape({}), {image_min});",
      "306:   AddInputFromArray<float>(TensorShape({}), {image_max});",
      "307:   AddInputFromArray<float>(TensorShape({}), {filter_min});",
      "308:   AddInputFromArray<float>(TensorShape({}), {filter_max});",
      "",
      "---------------"
    ],
    "tensorflow/python/ops/quantized_conv_ops_test.py||tensorflow/python/ops/quantized_conv_ops_test.py": [
      "File: tensorflow/python/ops/quantized_conv_ops_test.py -> tensorflow/python/ops/quantized_conv_ops_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: from tensorflow.python.framework import constant_op",
      "20: from tensorflow.python.framework import dtypes",
      "21: from tensorflow.python.ops import nn_ops",
      "22: from tensorflow.python.platform import test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21: from tensorflow.python.framework import errors",
      "22: from tensorflow.python.ops import math_ops",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "196:         padding=\"SAME\",",
      "197:         expected=expected_output)",
      "200: if __name__ == \"__main__\":",
      "201:   test.main()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "201:   def _testBadInputSize(self,",
      "202:                         tin=None,",
      "203:                         tfilter=None,",
      "204:                         min_input=None,",
      "205:                         max_input=None,",
      "206:                         min_filter=None,",
      "207:                         max_filter=None,",
      "208:                         error_regex=\"\"):",
      "209:     strides = [1, 1, 1, 1]",
      "210:     padding = \"SAME\"",
      "211:     if tin is None:",
      "212:       tin = math_ops.cast(",
      "213:           constant_op.constant(1, shape=[1, 2, 3, 3]), dtype=dtypes.quint8)",
      "215:     if tfilter is None:",
      "216:       tfilter = math_ops.cast(",
      "217:           constant_op.constant(1, shape=[1, 2, 3, 3]), dtype=dtypes.quint8)",
      "219:     if min_input is None:",
      "220:       min_input = constant_op.constant(0, shape=[], dtype=dtypes.float32)",
      "222:     if max_input is None:",
      "223:       max_input = constant_op.constant(0, shape=[], dtype=dtypes.float32)",
      "225:     if min_filter is None:",
      "226:       min_filter = constant_op.constant(0, shape=[], dtype=dtypes.float32)",
      "228:     if max_filter is None:",
      "229:       max_filter = constant_op.constant(0, shape=[], dtype=dtypes.float32)",
      "231:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
      "232:                                 error_regex):",
      "233:       self.evaluate(",
      "234:           nn_ops.quantized_conv2d(",
      "235:               tin,",
      "236:               tfilter,",
      "237:               out_type=dtypes.qint32,",
      "238:               strides=strides,",
      "239:               padding=padding,",
      "240:               min_input=min_input,",
      "241:               max_input=max_input,",
      "242:               min_filter=min_filter,",
      "243:               max_filter=max_filter))",
      "245:   def testBadInputSizes(self):",
      "246:     self._testBadInputSize(",
      "247:         tin=math_ops.cast(",
      "248:             constant_op.constant(1, shape=[1, 2]), dtype=dtypes.quint8),",
      "249:         error_regex=\"must be rank 4\")",
      "250:     self._testBadInputSize(",
      "251:         tfilter=math_ops.cast(",
      "252:             constant_op.constant(1, shape=[1, 2]), dtype=dtypes.quint8),",
      "253:         error_regex=\"must be rank 4\")",
      "254:     self._testBadInputSize(",
      "255:         min_input=constant_op.constant(0, shape=[1], dtype=dtypes.float32),",
      "256:         error_regex=\"must be rank 0\")",
      "257:     self._testBadInputSize(",
      "258:         max_input=constant_op.constant(0, shape=[1], dtype=dtypes.float32),",
      "259:         error_regex=\"must be rank 0\")",
      "260:     self._testBadInputSize(",
      "261:         min_filter=constant_op.constant(0, shape=[1], dtype=dtypes.float32),",
      "262:         error_regex=\"must be rank 0\")",
      "263:     self._testBadInputSize(",
      "264:         max_filter=constant_op.constant(0, shape=[1], dtype=dtypes.float32),",
      "265:         error_regex=\"must be rank 0\")",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "18fdb48ca2d54bc00970b6cf9ce398e55f55b623",
      "candidate_info": {
        "commit_hash": "18fdb48ca2d54bc00970b6cf9ce398e55f55b623",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/18fdb48ca2d54bc00970b6cf9ce398e55f55b623",
        "files": [
          "tensorflow/core/kernels/quantized_conv_ops.cc",
          "tensorflow/core/kernels/quantized_conv_ops_test.cc",
          "tensorflow/python/ops/quantized_conv_ops_test.py"
        ],
        "message": "Fix undefined behavior in QuantizedConv2D\n\nAdded more input validation and tests.  Prior to this, we could get\n`nullptr` exceptions when attempting to access 0th elements of 0-sized\ninputs, leading to security vulnerability bugs.\n\nAlso needed to modify `quantized_conv_ops_test.cc` for consistency.\nPreviously the CPU kernel did technically support passing tensors\nof rank larger than 0 for min/max values.  However, the XLA kernels do not.\n\nPiperOrigin-RevId: 445518507",
        "before_after_code_files": [
          "tensorflow/core/kernels/quantized_conv_ops.cc||tensorflow/core/kernels/quantized_conv_ops.cc",
          "tensorflow/core/kernels/quantized_conv_ops_test.cc||tensorflow/core/kernels/quantized_conv_ops_test.cc",
          "tensorflow/python/ops/quantized_conv_ops_test.py||tensorflow/python/ops/quantized_conv_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/quantized_conv_ops.cc||tensorflow/core/kernels/quantized_conv_ops.cc",
            "tensorflow/core/kernels/quantized_conv_ops_test.cc||tensorflow/core/kernels/quantized_conv_ops_test.cc",
            "tensorflow/python/ops/quantized_conv_ops_test.py||tensorflow/python/ops/quantized_conv_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/quantized_conv_ops.cc||tensorflow/core/kernels/quantized_conv_ops.cc",
            "tensorflow/core/kernels/quantized_conv_ops_test.cc||tensorflow/core/kernels/quantized_conv_ops_test.cc",
            "tensorflow/python/ops/quantized_conv_ops_test.py||tensorflow/python/ops/quantized_conv_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/quantized_conv_ops.cc||tensorflow/core/kernels/quantized_conv_ops.cc": [
          "File: tensorflow/core/kernels/quantized_conv_ops.cc -> tensorflow/core/kernels/quantized_conv_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include <algorithm>",
          "19: #include <vector>",
          "23: #define EIGEN_USE_THREADS",
          "25: #define GEMMLOWP_ALLOW_SLOW_SCALAR_FALLBACK",
          "",
          "[Removed Lines]",
          "21: #include \"tensorflow/core/platform/errors.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: #include \"tensorflow/core/kernels/quantization_utils.h\"",
          "33: #include \"tensorflow/core/kernels/reference_gemm.h\"",
          "34: #include \"tensorflow/core/lib/core/errors.h\"",
          "35: #include \"tensorflow/core/util/padding.h\"",
          "37: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #include \"tensorflow/core/platform/errors.h\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "501:     OP_REQUIRES(context, input.dims() == 4,",
          "504:     OP_REQUIRES(context, filter.dims() == 4,",
          "508:     const float min_input = context->input(2).flat<float>()(0);",
          "509:     const float max_input = context->input(3).flat<float>()(0);",
          "",
          "[Removed Lines]",
          "502:                 errors::InvalidArgument(\"input must be 4-dimensional\",",
          "503:                                         input.shape().DebugString()));",
          "505:                 errors::InvalidArgument(\"filter must be 4-dimensional: \",",
          "506:                                         filter.shape().DebugString()));",
          "",
          "[Added Lines]",
          "501:                 errors::InvalidArgument(\"input must be rank 4 but is rank \",",
          "502:                                         input.shape().dims()));",
          "504:                 errors::InvalidArgument(\"filter must be rank 4 but is rank \",",
          "505:                                         filter.shape().dims()));",
          "507:     OP_REQUIRES(context, TensorShapeUtils::IsScalar(context->input(2).shape()),",
          "508:                 errors::InvalidArgument(\"min_input must be rank 0 but is rank \",",
          "509:                                         context->input(2).shape().dims()));",
          "510:     OP_REQUIRES(context, TensorShapeUtils::IsScalar(context->input(3).shape()),",
          "511:                 errors::InvalidArgument(\"max_input must be rank 0 but is rank \",",
          "512:                                         context->input(3).shape().dims()));",
          "513:     OP_REQUIRES(",
          "514:         context, TensorShapeUtils::IsScalar(context->input(4).shape()),",
          "515:         errors::InvalidArgument(\"min_filter must be rank 0 but is rank \",",
          "516:                                 context->input(4).shape().dims()));",
          "517:     OP_REQUIRES(",
          "518:         context, TensorShapeUtils::IsScalar(context->input(5).shape()),",
          "519:         errors::InvalidArgument(\"max_filter must be rank 0 but is rank \",",
          "520:                                 context->input(5).shape().dims()));",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/quantized_conv_ops_test.cc||tensorflow/core/kernels/quantized_conv_ops_test.cc": [
          "File: tensorflow/core/kernels/quantized_conv_ops_test.cc -> tensorflow/core/kernels/quantized_conv_ops_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:                             image_quantized.flat<quint8>());",
          "92:   AddInputFromArray<quint8>(filter_quantized.shape(),",
          "93:                             filter_quantized.flat<quint8>());",
          "98:   TF_ASSERT_OK(RunOpKernel());",
          "",
          "[Removed Lines]",
          "94:   AddInputFromArray<float>(TensorShape({1}), {image_min});",
          "95:   AddInputFromArray<float>(TensorShape({1}), {image_max});",
          "96:   AddInputFromArray<float>(TensorShape({1}), {filter_min});",
          "97:   AddInputFromArray<float>(TensorShape({1}), {filter_max});",
          "",
          "[Added Lines]",
          "94:   AddInputFromArray<float>(TensorShape({}), {image_min});",
          "95:   AddInputFromArray<float>(TensorShape({}), {image_max});",
          "96:   AddInputFromArray<float>(TensorShape({}), {filter_min});",
          "97:   AddInputFromArray<float>(TensorShape({}), {filter_max});",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "158:   AddInputFromArray<quint8>(",
          "159:       TensorShape({filter_size, filter_size, depth, filter_count}),",
          "160:       {10, 40, 70, 20, 50, 80, 30, 60, 90});",
          "166:   TF_ASSERT_OK(RunOpKernel());",
          "167:   const int expected_width = image_width;",
          "",
          "[Removed Lines]",
          "161:   AddInputFromArray<float>(TensorShape({1}), {0});",
          "162:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
          "163:   AddInputFromArray<float>(TensorShape({1}), {0});",
          "164:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
          "",
          "[Added Lines]",
          "161:   AddInputFromArray<float>(TensorShape({}), {0});",
          "162:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
          "163:   AddInputFromArray<float>(TensorShape({}), {0});",
          "164:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "201:   AddInputFromArray<quint8>(",
          "202:       TensorShape({filter_size, filter_size, depth, filter_count}),",
          "203:       {1, 2, 3, 4, 5, 6, 7, 8, 9});",
          "209:   TF_ASSERT_OK(RunOpKernel());",
          "210:   const int expected_width = image_width / stride;",
          "",
          "[Removed Lines]",
          "204:   AddInputFromArray<float>(TensorShape({1}), {0});",
          "205:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
          "206:   AddInputFromArray<float>(TensorShape({1}), {0});",
          "207:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
          "",
          "[Added Lines]",
          "204:   AddInputFromArray<float>(TensorShape({}), {0});",
          "205:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
          "206:   AddInputFromArray<float>(TensorShape({}), {0});",
          "207:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "244:   AddInputFromArray<quint8>(",
          "245:       TensorShape({filter_size, filter_size, depth, filter_count}),",
          "246:       {1, 2, 3, 4, 5, 6, 7, 8, 9});",
          "252:   TF_ASSERT_OK(RunOpKernel());",
          "253:   const int expected_width = image_width / stride;",
          "",
          "[Removed Lines]",
          "247:   AddInputFromArray<float>(TensorShape({1}), {0});",
          "248:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
          "249:   AddInputFromArray<float>(TensorShape({1}), {0});",
          "250:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
          "",
          "[Added Lines]",
          "247:   AddInputFromArray<float>(TensorShape({}), {0});",
          "248:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
          "249:   AddInputFromArray<float>(TensorShape({}), {0});",
          "250:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "302:                             image_quantized.flat<quint8>());",
          "303:   AddInputFromArray<quint8>(filter_quantized.shape(),",
          "304:                             filter_quantized.flat<quint8>());",
          "309:   TF_ASSERT_OK(RunOpKernel());",
          "310:   const int expected_width = image_width;",
          "311:   const int expected_height = image_height * filter_count;",
          "",
          "[Removed Lines]",
          "305:   AddInputFromArray<float>(TensorShape({1}), {image_min});",
          "306:   AddInputFromArray<float>(TensorShape({1}), {image_max});",
          "307:   AddInputFromArray<float>(TensorShape({1}), {filter_min});",
          "308:   AddInputFromArray<float>(TensorShape({1}), {filter_max});",
          "",
          "[Added Lines]",
          "305:   AddInputFromArray<float>(TensorShape({}), {image_min});",
          "306:   AddInputFromArray<float>(TensorShape({}), {image_max});",
          "307:   AddInputFromArray<float>(TensorShape({}), {filter_min});",
          "308:   AddInputFromArray<float>(TensorShape({}), {filter_max});",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/quantized_conv_ops_test.py||tensorflow/python/ops/quantized_conv_ops_test.py": [
          "File: tensorflow/python/ops/quantized_conv_ops_test.py -> tensorflow/python/ops/quantized_conv_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: from tensorflow.python.framework import constant_op",
          "20: from tensorflow.python.framework import dtypes",
          "21: from tensorflow.python.ops import nn_ops",
          "22: from tensorflow.python.platform import test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: from tensorflow.python.framework import errors",
          "22: from tensorflow.python.ops import math_ops",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "196:         padding=\"SAME\",",
          "197:         expected=expected_output)",
          "200: if __name__ == \"__main__\":",
          "201:   test.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "201:   def _testBadInputSize(self,",
          "202:                         tin=None,",
          "203:                         tfilter=None,",
          "204:                         min_input=None,",
          "205:                         max_input=None,",
          "206:                         min_filter=None,",
          "207:                         max_filter=None,",
          "208:                         error_regex=\"\"):",
          "209:     strides = [1, 1, 1, 1]",
          "210:     padding = \"SAME\"",
          "211:     if tin is None:",
          "212:       tin = math_ops.cast(",
          "213:           constant_op.constant(1, shape=[1, 2, 3, 3]), dtype=dtypes.quint8)",
          "215:     if tfilter is None:",
          "216:       tfilter = math_ops.cast(",
          "217:           constant_op.constant(1, shape=[1, 2, 3, 3]), dtype=dtypes.quint8)",
          "219:     if min_input is None:",
          "220:       min_input = constant_op.constant(0, shape=[], dtype=dtypes.float32)",
          "222:     if max_input is None:",
          "223:       max_input = constant_op.constant(0, shape=[], dtype=dtypes.float32)",
          "225:     if min_filter is None:",
          "226:       min_filter = constant_op.constant(0, shape=[], dtype=dtypes.float32)",
          "228:     if max_filter is None:",
          "229:       max_filter = constant_op.constant(0, shape=[], dtype=dtypes.float32)",
          "231:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "232:                                 error_regex):",
          "233:       self.evaluate(",
          "234:           nn_ops.quantized_conv2d(",
          "235:               tin,",
          "236:               tfilter,",
          "237:               out_type=dtypes.qint32,",
          "238:               strides=strides,",
          "239:               padding=padding,",
          "240:               min_input=min_input,",
          "241:               max_input=max_input,",
          "242:               min_filter=min_filter,",
          "243:               max_filter=max_filter))",
          "245:   def testBadInputSizes(self):",
          "246:     self._testBadInputSize(",
          "247:         tin=math_ops.cast(",
          "248:             constant_op.constant(1, shape=[1, 2]), dtype=dtypes.quint8),",
          "249:         error_regex=\"must be rank 4\")",
          "250:     self._testBadInputSize(",
          "251:         tfilter=math_ops.cast(",
          "252:             constant_op.constant(1, shape=[1, 2]), dtype=dtypes.quint8),",
          "253:         error_regex=\"must be rank 4\")",
          "254:     self._testBadInputSize(",
          "255:         min_input=constant_op.constant(0, shape=[1], dtype=dtypes.float32),",
          "256:         error_regex=\"must be rank 0\")",
          "257:     self._testBadInputSize(",
          "258:         max_input=constant_op.constant(0, shape=[1], dtype=dtypes.float32),",
          "259:         error_regex=\"must be rank 0\")",
          "260:     self._testBadInputSize(",
          "261:         min_filter=constant_op.constant(0, shape=[1], dtype=dtypes.float32),",
          "262:         error_regex=\"must be rank 0\")",
          "263:     self._testBadInputSize(",
          "264:         max_filter=constant_op.constant(0, shape=[1], dtype=dtypes.float32),",
          "265:         error_regex=\"must be rank 0\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ce879bbc4e02aa5e49d6f323f6b9a57cfc1ee942",
      "candidate_info": {
        "commit_hash": "ce879bbc4e02aa5e49d6f323f6b9a57cfc1ee942",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/ce879bbc4e02aa5e49d6f323f6b9a57cfc1ee942",
        "files": [
          "tensorflow/core/kernels/quantized_conv_ops.cc",
          "tensorflow/core/kernels/quantized_conv_ops_test.cc",
          "tensorflow/python/ops/quantized_conv_ops_test.py"
        ],
        "message": "Fix undefined behavior in QuantizedConv2D\n\nAdded more input validation and tests.  Prior to this, we could get\n`nullptr` exceptions when attempting to access 0th elements of 0-sized\ninputs, leading to security vulnerability bugs.\n\nAlso needed to modify `quantized_conv_ops_test.cc` for consistency.\nPreviously the CPU kernel did technically support passing tensors\nof rank larger than 0 for min/max values.  However, the XLA kernels do not.\n\nPiperOrigin-RevId: 445518507",
        "before_after_code_files": [
          "tensorflow/core/kernels/quantized_conv_ops.cc||tensorflow/core/kernels/quantized_conv_ops.cc",
          "tensorflow/core/kernels/quantized_conv_ops_test.cc||tensorflow/core/kernels/quantized_conv_ops_test.cc",
          "tensorflow/python/ops/quantized_conv_ops_test.py||tensorflow/python/ops/quantized_conv_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/quantized_conv_ops.cc||tensorflow/core/kernels/quantized_conv_ops.cc",
            "tensorflow/core/kernels/quantized_conv_ops_test.cc||tensorflow/core/kernels/quantized_conv_ops_test.cc",
            "tensorflow/python/ops/quantized_conv_ops_test.py||tensorflow/python/ops/quantized_conv_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/quantized_conv_ops.cc||tensorflow/core/kernels/quantized_conv_ops.cc",
            "tensorflow/core/kernels/quantized_conv_ops_test.cc||tensorflow/core/kernels/quantized_conv_ops_test.cc",
            "tensorflow/python/ops/quantized_conv_ops_test.py||tensorflow/python/ops/quantized_conv_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/quantized_conv_ops.cc||tensorflow/core/kernels/quantized_conv_ops.cc": [
          "File: tensorflow/core/kernels/quantized_conv_ops.cc -> tensorflow/core/kernels/quantized_conv_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include <algorithm>",
          "19: #include <vector>",
          "23: #define EIGEN_USE_THREADS",
          "25: #define GEMMLOWP_ALLOW_SLOW_SCALAR_FALLBACK",
          "",
          "[Removed Lines]",
          "21: #include \"tensorflow/core/platform/errors.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: #include \"tensorflow/core/kernels/quantization_utils.h\"",
          "33: #include \"tensorflow/core/kernels/reference_gemm.h\"",
          "34: #include \"tensorflow/core/lib/core/errors.h\"",
          "35: #include \"tensorflow/core/util/padding.h\"",
          "37: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #include \"tensorflow/core/platform/errors.h\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "501:     OP_REQUIRES(context, input.dims() == 4,",
          "504:     OP_REQUIRES(context, filter.dims() == 4,",
          "508:     const float min_input = context->input(2).flat<float>()(0);",
          "509:     const float max_input = context->input(3).flat<float>()(0);",
          "",
          "[Removed Lines]",
          "502:                 errors::InvalidArgument(\"input must be 4-dimensional\",",
          "503:                                         input.shape().DebugString()));",
          "505:                 errors::InvalidArgument(\"filter must be 4-dimensional: \",",
          "506:                                         filter.shape().DebugString()));",
          "",
          "[Added Lines]",
          "501:                 errors::InvalidArgument(\"input must be rank 4 but is rank \",",
          "502:                                         input.shape().dims()));",
          "504:                 errors::InvalidArgument(\"filter must be rank 4 but is rank \",",
          "505:                                         filter.shape().dims()));",
          "507:     OP_REQUIRES(context, TensorShapeUtils::IsScalar(context->input(2).shape()),",
          "508:                 errors::InvalidArgument(\"min_input must be rank 0 but is rank \",",
          "509:                                         context->input(2).shape().dims()));",
          "510:     OP_REQUIRES(context, TensorShapeUtils::IsScalar(context->input(3).shape()),",
          "511:                 errors::InvalidArgument(\"max_input must be rank 0 but is rank \",",
          "512:                                         context->input(3).shape().dims()));",
          "513:     OP_REQUIRES(",
          "514:         context, TensorShapeUtils::IsScalar(context->input(4).shape()),",
          "515:         errors::InvalidArgument(\"min_filter must be rank 0 but is rank \",",
          "516:                                 context->input(4).shape().dims()));",
          "517:     OP_REQUIRES(",
          "518:         context, TensorShapeUtils::IsScalar(context->input(5).shape()),",
          "519:         errors::InvalidArgument(\"max_filter must be rank 0 but is rank \",",
          "520:                                 context->input(5).shape().dims()));",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/quantized_conv_ops_test.cc||tensorflow/core/kernels/quantized_conv_ops_test.cc": [
          "File: tensorflow/core/kernels/quantized_conv_ops_test.cc -> tensorflow/core/kernels/quantized_conv_ops_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:                             image_quantized.flat<quint8>());",
          "92:   AddInputFromArray<quint8>(filter_quantized.shape(),",
          "93:                             filter_quantized.flat<quint8>());",
          "98:   TF_ASSERT_OK(RunOpKernel());",
          "",
          "[Removed Lines]",
          "94:   AddInputFromArray<float>(TensorShape({1}), {image_min});",
          "95:   AddInputFromArray<float>(TensorShape({1}), {image_max});",
          "96:   AddInputFromArray<float>(TensorShape({1}), {filter_min});",
          "97:   AddInputFromArray<float>(TensorShape({1}), {filter_max});",
          "",
          "[Added Lines]",
          "94:   AddInputFromArray<float>(TensorShape({}), {image_min});",
          "95:   AddInputFromArray<float>(TensorShape({}), {image_max});",
          "96:   AddInputFromArray<float>(TensorShape({}), {filter_min});",
          "97:   AddInputFromArray<float>(TensorShape({}), {filter_max});",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "158:   AddInputFromArray<quint8>(",
          "159:       TensorShape({filter_size, filter_size, depth, filter_count}),",
          "160:       {10, 40, 70, 20, 50, 80, 30, 60, 90});",
          "166:   TF_ASSERT_OK(RunOpKernel());",
          "167:   const int expected_width = image_width;",
          "",
          "[Removed Lines]",
          "161:   AddInputFromArray<float>(TensorShape({1}), {0});",
          "162:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
          "163:   AddInputFromArray<float>(TensorShape({1}), {0});",
          "164:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
          "",
          "[Added Lines]",
          "161:   AddInputFromArray<float>(TensorShape({}), {0});",
          "162:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
          "163:   AddInputFromArray<float>(TensorShape({}), {0});",
          "164:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "201:   AddInputFromArray<quint8>(",
          "202:       TensorShape({filter_size, filter_size, depth, filter_count}),",
          "203:       {1, 2, 3, 4, 5, 6, 7, 8, 9});",
          "209:   TF_ASSERT_OK(RunOpKernel());",
          "210:   const int expected_width = image_width / stride;",
          "",
          "[Removed Lines]",
          "204:   AddInputFromArray<float>(TensorShape({1}), {0});",
          "205:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
          "206:   AddInputFromArray<float>(TensorShape({1}), {0});",
          "207:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
          "",
          "[Added Lines]",
          "204:   AddInputFromArray<float>(TensorShape({}), {0});",
          "205:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
          "206:   AddInputFromArray<float>(TensorShape({}), {0});",
          "207:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "244:   AddInputFromArray<quint8>(",
          "245:       TensorShape({filter_size, filter_size, depth, filter_count}),",
          "246:       {1, 2, 3, 4, 5, 6, 7, 8, 9});",
          "252:   TF_ASSERT_OK(RunOpKernel());",
          "253:   const int expected_width = image_width / stride;",
          "",
          "[Removed Lines]",
          "247:   AddInputFromArray<float>(TensorShape({1}), {0});",
          "248:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
          "249:   AddInputFromArray<float>(TensorShape({1}), {0});",
          "250:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
          "",
          "[Added Lines]",
          "247:   AddInputFromArray<float>(TensorShape({}), {0});",
          "248:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
          "249:   AddInputFromArray<float>(TensorShape({}), {0});",
          "250:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "302:                             image_quantized.flat<quint8>());",
          "303:   AddInputFromArray<quint8>(filter_quantized.shape(),",
          "304:                             filter_quantized.flat<quint8>());",
          "309:   TF_ASSERT_OK(RunOpKernel());",
          "310:   const int expected_width = image_width;",
          "311:   const int expected_height = image_height * filter_count;",
          "",
          "[Removed Lines]",
          "305:   AddInputFromArray<float>(TensorShape({1}), {image_min});",
          "306:   AddInputFromArray<float>(TensorShape({1}), {image_max});",
          "307:   AddInputFromArray<float>(TensorShape({1}), {filter_min});",
          "308:   AddInputFromArray<float>(TensorShape({1}), {filter_max});",
          "",
          "[Added Lines]",
          "305:   AddInputFromArray<float>(TensorShape({}), {image_min});",
          "306:   AddInputFromArray<float>(TensorShape({}), {image_max});",
          "307:   AddInputFromArray<float>(TensorShape({}), {filter_min});",
          "308:   AddInputFromArray<float>(TensorShape({}), {filter_max});",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/quantized_conv_ops_test.py||tensorflow/python/ops/quantized_conv_ops_test.py": [
          "File: tensorflow/python/ops/quantized_conv_ops_test.py -> tensorflow/python/ops/quantized_conv_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: from tensorflow.python.framework import constant_op",
          "20: from tensorflow.python.framework import dtypes",
          "21: from tensorflow.python.ops import nn_ops",
          "22: from tensorflow.python.platform import test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: from tensorflow.python.framework import errors",
          "22: from tensorflow.python.ops import math_ops",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "196:         padding=\"SAME\",",
          "197:         expected=expected_output)",
          "200: if __name__ == \"__main__\":",
          "201:   test.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "201:   def _testBadInputSize(self,",
          "202:                         tin=None,",
          "203:                         tfilter=None,",
          "204:                         min_input=None,",
          "205:                         max_input=None,",
          "206:                         min_filter=None,",
          "207:                         max_filter=None,",
          "208:                         error_regex=\"\"):",
          "209:     strides = [1, 1, 1, 1]",
          "210:     padding = \"SAME\"",
          "211:     if tin is None:",
          "212:       tin = math_ops.cast(",
          "213:           constant_op.constant(1, shape=[1, 2, 3, 3]), dtype=dtypes.quint8)",
          "215:     if tfilter is None:",
          "216:       tfilter = math_ops.cast(",
          "217:           constant_op.constant(1, shape=[1, 2, 3, 3]), dtype=dtypes.quint8)",
          "219:     if min_input is None:",
          "220:       min_input = constant_op.constant(0, shape=[], dtype=dtypes.float32)",
          "222:     if max_input is None:",
          "223:       max_input = constant_op.constant(0, shape=[], dtype=dtypes.float32)",
          "225:     if min_filter is None:",
          "226:       min_filter = constant_op.constant(0, shape=[], dtype=dtypes.float32)",
          "228:     if max_filter is None:",
          "229:       max_filter = constant_op.constant(0, shape=[], dtype=dtypes.float32)",
          "231:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "232:                                 error_regex):",
          "233:       self.evaluate(",
          "234:           nn_ops.quantized_conv2d(",
          "235:               tin,",
          "236:               tfilter,",
          "237:               out_type=dtypes.qint32,",
          "238:               strides=strides,",
          "239:               padding=padding,",
          "240:               min_input=min_input,",
          "241:               max_input=max_input,",
          "242:               min_filter=min_filter,",
          "243:               max_filter=max_filter))",
          "245:   def testBadInputSizes(self):",
          "246:     self._testBadInputSize(",
          "247:         tin=math_ops.cast(",
          "248:             constant_op.constant(1, shape=[1, 2]), dtype=dtypes.quint8),",
          "249:         error_regex=\"must be rank 4\")",
          "250:     self._testBadInputSize(",
          "251:         tfilter=math_ops.cast(",
          "252:             constant_op.constant(1, shape=[1, 2]), dtype=dtypes.quint8),",
          "253:         error_regex=\"must be rank 4\")",
          "254:     self._testBadInputSize(",
          "255:         min_input=constant_op.constant(0, shape=[1], dtype=dtypes.float32),",
          "256:         error_regex=\"must be rank 0\")",
          "257:     self._testBadInputSize(",
          "258:         max_input=constant_op.constant(0, shape=[1], dtype=dtypes.float32),",
          "259:         error_regex=\"must be rank 0\")",
          "260:     self._testBadInputSize(",
          "261:         min_filter=constant_op.constant(0, shape=[1], dtype=dtypes.float32),",
          "262:         error_regex=\"must be rank 0\")",
          "263:     self._testBadInputSize(",
          "264:         max_filter=constant_op.constant(0, shape=[1], dtype=dtypes.float32),",
          "265:         error_regex=\"must be rank 0\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "59d2d8d7122e13d119300490914048d151da1787",
      "candidate_info": {
        "commit_hash": "59d2d8d7122e13d119300490914048d151da1787",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/59d2d8d7122e13d119300490914048d151da1787",
        "files": [
          "tensorflow/core/kernels/quantized_conv_ops.cc",
          "tensorflow/core/kernels/quantized_conv_ops_test.cc",
          "tensorflow/python/ops/quantized_conv_ops_test.py"
        ],
        "message": "Fix undefined behavior in QuantizedConv2D\n\nAdded more input validation and tests.  Prior to this, we could get\n`nullptr` exceptions when attempting to access 0th elements of 0-sized\ninputs, leading to security vulnerability bugs.\n\nAlso needed to modify `quantized_conv_ops_test.cc` for consistency.\nPreviously the CPU kernel did technically support passing tensors\nof rank larger than 0 for min/max values.  However, the XLA kernels do not.\n\nPiperOrigin-RevId: 445518507",
        "before_after_code_files": [
          "tensorflow/core/kernels/quantized_conv_ops.cc||tensorflow/core/kernels/quantized_conv_ops.cc",
          "tensorflow/core/kernels/quantized_conv_ops_test.cc||tensorflow/core/kernels/quantized_conv_ops_test.cc",
          "tensorflow/python/ops/quantized_conv_ops_test.py||tensorflow/python/ops/quantized_conv_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/quantized_conv_ops.cc||tensorflow/core/kernels/quantized_conv_ops.cc",
            "tensorflow/core/kernels/quantized_conv_ops_test.cc||tensorflow/core/kernels/quantized_conv_ops_test.cc",
            "tensorflow/python/ops/quantized_conv_ops_test.py||tensorflow/python/ops/quantized_conv_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/quantized_conv_ops.cc||tensorflow/core/kernels/quantized_conv_ops.cc",
            "tensorflow/core/kernels/quantized_conv_ops_test.cc||tensorflow/core/kernels/quantized_conv_ops_test.cc",
            "tensorflow/python/ops/quantized_conv_ops_test.py||tensorflow/python/ops/quantized_conv_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/quantized_conv_ops.cc||tensorflow/core/kernels/quantized_conv_ops.cc": [
          "File: tensorflow/core/kernels/quantized_conv_ops.cc -> tensorflow/core/kernels/quantized_conv_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include <algorithm>",
          "19: #include <vector>",
          "23: #define EIGEN_USE_THREADS",
          "25: #define GEMMLOWP_ALLOW_SLOW_SCALAR_FALLBACK",
          "",
          "[Removed Lines]",
          "21: #include \"tensorflow/core/platform/errors.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: #include \"tensorflow/core/kernels/quantization_utils.h\"",
          "33: #include \"tensorflow/core/kernels/reference_gemm.h\"",
          "34: #include \"tensorflow/core/lib/core/errors.h\"",
          "35: #include \"tensorflow/core/util/padding.h\"",
          "37: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #include \"tensorflow/core/platform/errors.h\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "501:     OP_REQUIRES(context, input.dims() == 4,",
          "504:     OP_REQUIRES(context, filter.dims() == 4,",
          "508:     const float min_input = context->input(2).flat<float>()(0);",
          "509:     const float max_input = context->input(3).flat<float>()(0);",
          "",
          "[Removed Lines]",
          "502:                 errors::InvalidArgument(\"input must be 4-dimensional\",",
          "503:                                         input.shape().DebugString()));",
          "505:                 errors::InvalidArgument(\"filter must be 4-dimensional: \",",
          "506:                                         filter.shape().DebugString()));",
          "",
          "[Added Lines]",
          "501:                 errors::InvalidArgument(\"input must be rank 4 but is rank \",",
          "502:                                         input.shape().dims()));",
          "504:                 errors::InvalidArgument(\"filter must be rank 4 but is rank \",",
          "505:                                         filter.shape().dims()));",
          "507:     OP_REQUIRES(context, TensorShapeUtils::IsScalar(context->input(2).shape()),",
          "508:                 errors::InvalidArgument(\"min_input must be rank 0 but is rank \",",
          "509:                                         context->input(2).shape().dims()));",
          "510:     OP_REQUIRES(context, TensorShapeUtils::IsScalar(context->input(3).shape()),",
          "511:                 errors::InvalidArgument(\"max_input must be rank 0 but is rank \",",
          "512:                                         context->input(3).shape().dims()));",
          "513:     OP_REQUIRES(",
          "514:         context, TensorShapeUtils::IsScalar(context->input(4).shape()),",
          "515:         errors::InvalidArgument(\"min_filter must be rank 0 but is rank \",",
          "516:                                 context->input(4).shape().dims()));",
          "517:     OP_REQUIRES(",
          "518:         context, TensorShapeUtils::IsScalar(context->input(5).shape()),",
          "519:         errors::InvalidArgument(\"max_filter must be rank 0 but is rank \",",
          "520:                                 context->input(5).shape().dims()));",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/quantized_conv_ops_test.cc||tensorflow/core/kernels/quantized_conv_ops_test.cc": [
          "File: tensorflow/core/kernels/quantized_conv_ops_test.cc -> tensorflow/core/kernels/quantized_conv_ops_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:                             image_quantized.flat<quint8>());",
          "92:   AddInputFromArray<quint8>(filter_quantized.shape(),",
          "93:                             filter_quantized.flat<quint8>());",
          "98:   TF_ASSERT_OK(RunOpKernel());",
          "",
          "[Removed Lines]",
          "94:   AddInputFromArray<float>(TensorShape({1}), {image_min});",
          "95:   AddInputFromArray<float>(TensorShape({1}), {image_max});",
          "96:   AddInputFromArray<float>(TensorShape({1}), {filter_min});",
          "97:   AddInputFromArray<float>(TensorShape({1}), {filter_max});",
          "",
          "[Added Lines]",
          "94:   AddInputFromArray<float>(TensorShape({}), {image_min});",
          "95:   AddInputFromArray<float>(TensorShape({}), {image_max});",
          "96:   AddInputFromArray<float>(TensorShape({}), {filter_min});",
          "97:   AddInputFromArray<float>(TensorShape({}), {filter_max});",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "158:   AddInputFromArray<quint8>(",
          "159:       TensorShape({filter_size, filter_size, depth, filter_count}),",
          "160:       {10, 40, 70, 20, 50, 80, 30, 60, 90});",
          "166:   TF_ASSERT_OK(RunOpKernel());",
          "167:   const int expected_width = image_width;",
          "",
          "[Removed Lines]",
          "161:   AddInputFromArray<float>(TensorShape({1}), {0});",
          "162:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
          "163:   AddInputFromArray<float>(TensorShape({1}), {0});",
          "164:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
          "",
          "[Added Lines]",
          "161:   AddInputFromArray<float>(TensorShape({}), {0});",
          "162:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
          "163:   AddInputFromArray<float>(TensorShape({}), {0});",
          "164:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "201:   AddInputFromArray<quint8>(",
          "202:       TensorShape({filter_size, filter_size, depth, filter_count}),",
          "203:       {1, 2, 3, 4, 5, 6, 7, 8, 9});",
          "209:   TF_ASSERT_OK(RunOpKernel());",
          "210:   const int expected_width = image_width / stride;",
          "",
          "[Removed Lines]",
          "204:   AddInputFromArray<float>(TensorShape({1}), {0});",
          "205:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
          "206:   AddInputFromArray<float>(TensorShape({1}), {0});",
          "207:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
          "",
          "[Added Lines]",
          "204:   AddInputFromArray<float>(TensorShape({}), {0});",
          "205:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
          "206:   AddInputFromArray<float>(TensorShape({}), {0});",
          "207:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "244:   AddInputFromArray<quint8>(",
          "245:       TensorShape({filter_size, filter_size, depth, filter_count}),",
          "246:       {1, 2, 3, 4, 5, 6, 7, 8, 9});",
          "252:   TF_ASSERT_OK(RunOpKernel());",
          "253:   const int expected_width = image_width / stride;",
          "",
          "[Removed Lines]",
          "247:   AddInputFromArray<float>(TensorShape({1}), {0});",
          "248:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
          "249:   AddInputFromArray<float>(TensorShape({1}), {0});",
          "250:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
          "",
          "[Added Lines]",
          "247:   AddInputFromArray<float>(TensorShape({}), {0});",
          "248:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
          "249:   AddInputFromArray<float>(TensorShape({}), {0});",
          "250:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "302:                             image_quantized.flat<quint8>());",
          "303:   AddInputFromArray<quint8>(filter_quantized.shape(),",
          "304:                             filter_quantized.flat<quint8>());",
          "309:   TF_ASSERT_OK(RunOpKernel());",
          "310:   const int expected_width = image_width;",
          "311:   const int expected_height = image_height * filter_count;",
          "",
          "[Removed Lines]",
          "305:   AddInputFromArray<float>(TensorShape({1}), {image_min});",
          "306:   AddInputFromArray<float>(TensorShape({1}), {image_max});",
          "307:   AddInputFromArray<float>(TensorShape({1}), {filter_min});",
          "308:   AddInputFromArray<float>(TensorShape({1}), {filter_max});",
          "",
          "[Added Lines]",
          "305:   AddInputFromArray<float>(TensorShape({}), {image_min});",
          "306:   AddInputFromArray<float>(TensorShape({}), {image_max});",
          "307:   AddInputFromArray<float>(TensorShape({}), {filter_min});",
          "308:   AddInputFromArray<float>(TensorShape({}), {filter_max});",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/quantized_conv_ops_test.py||tensorflow/python/ops/quantized_conv_ops_test.py": [
          "File: tensorflow/python/ops/quantized_conv_ops_test.py -> tensorflow/python/ops/quantized_conv_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: from tensorflow.python.framework import constant_op",
          "24: from tensorflow.python.framework import dtypes",
          "25: from tensorflow.python.ops import nn_ops",
          "26: from tensorflow.python.platform import test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: from tensorflow.python.framework import errors",
          "26: from tensorflow.python.ops import math_ops",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "200:         padding=\"SAME\",",
          "201:         expected=expected_output)",
          "204: if __name__ == \"__main__\":",
          "205:   test.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205:   def _testBadInputSize(self,",
          "206:                         tin=None,",
          "207:                         tfilter=None,",
          "208:                         min_input=None,",
          "209:                         max_input=None,",
          "210:                         min_filter=None,",
          "211:                         max_filter=None,",
          "212:                         error_regex=\"\"):",
          "213:     strides = [1, 1, 1, 1]",
          "214:     padding = \"SAME\"",
          "215:     if tin is None:",
          "216:       tin = math_ops.cast(",
          "217:           constant_op.constant(1, shape=[1, 2, 3, 3]), dtype=dtypes.quint8)",
          "219:     if tfilter is None:",
          "220:       tfilter = math_ops.cast(",
          "221:           constant_op.constant(1, shape=[1, 2, 3, 3]), dtype=dtypes.quint8)",
          "223:     if min_input is None:",
          "224:       min_input = constant_op.constant(0, shape=[], dtype=dtypes.float32)",
          "226:     if max_input is None:",
          "227:       max_input = constant_op.constant(0, shape=[], dtype=dtypes.float32)",
          "229:     if min_filter is None:",
          "230:       min_filter = constant_op.constant(0, shape=[], dtype=dtypes.float32)",
          "232:     if max_filter is None:",
          "233:       max_filter = constant_op.constant(0, shape=[], dtype=dtypes.float32)",
          "235:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "236:                                 error_regex):",
          "237:       self.evaluate(",
          "238:           nn_ops.quantized_conv2d(",
          "239:               tin,",
          "240:               tfilter,",
          "241:               out_type=dtypes.qint32,",
          "242:               strides=strides,",
          "243:               padding=padding,",
          "244:               min_input=min_input,",
          "245:               max_input=max_input,",
          "246:               min_filter=min_filter,",
          "247:               max_filter=max_filter))",
          "249:   def testBadInputSizes(self):",
          "250:     self._testBadInputSize(",
          "251:         tin=math_ops.cast(",
          "252:             constant_op.constant(1, shape=[1, 2]), dtype=dtypes.quint8),",
          "253:         error_regex=\"must be rank 4\")",
          "254:     self._testBadInputSize(",
          "255:         tfilter=math_ops.cast(",
          "256:             constant_op.constant(1, shape=[1, 2]), dtype=dtypes.quint8),",
          "257:         error_regex=\"must be rank 4\")",
          "258:     self._testBadInputSize(",
          "259:         min_input=constant_op.constant(0, shape=[1], dtype=dtypes.float32),",
          "260:         error_regex=\"must be rank 0\")",
          "261:     self._testBadInputSize(",
          "262:         max_input=constant_op.constant(0, shape=[1], dtype=dtypes.float32),",
          "263:         error_regex=\"must be rank 0\")",
          "264:     self._testBadInputSize(",
          "265:         min_filter=constant_op.constant(0, shape=[1], dtype=dtypes.float32),",
          "266:         error_regex=\"must be rank 0\")",
          "267:     self._testBadInputSize(",
          "268:         max_filter=constant_op.constant(0, shape=[1], dtype=dtypes.float32),",
          "269:         error_regex=\"must be rank 0\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "efc6838db1b43626660ec428732fc3dd70c4bde5",
      "candidate_info": {
        "commit_hash": "efc6838db1b43626660ec428732fc3dd70c4bde5",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/efc6838db1b43626660ec428732fc3dd70c4bde5",
        "files": [
          "tensorflow/core/kernels/quantized_conv_ops.cc",
          "tensorflow/core/kernels/quantized_conv_ops_test.cc",
          "tensorflow/python/ops/quantized_conv_ops_test.py"
        ],
        "message": "Fix undefined behavior in QuantizedConv2D\n\nAdded more input validation and tests.  Prior to this, we could get\n`nullptr` exceptions when attempting to access 0th elements of 0-sized\ninputs, leading to security vulnerability bugs.\n\nAlso needed to modify `quantized_conv_ops_test.cc` for consistency.\nPreviously the CPU kernel did technically support passing tensors\nof rank larger than 0 for min/max values.  However, the XLA kernels do not.\n\nPiperOrigin-RevId: 445518507",
        "before_after_code_files": [
          "tensorflow/core/kernels/quantized_conv_ops.cc||tensorflow/core/kernels/quantized_conv_ops.cc",
          "tensorflow/core/kernels/quantized_conv_ops_test.cc||tensorflow/core/kernels/quantized_conv_ops_test.cc",
          "tensorflow/python/ops/quantized_conv_ops_test.py||tensorflow/python/ops/quantized_conv_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/quantized_conv_ops.cc||tensorflow/core/kernels/quantized_conv_ops.cc",
            "tensorflow/core/kernels/quantized_conv_ops_test.cc||tensorflow/core/kernels/quantized_conv_ops_test.cc",
            "tensorflow/python/ops/quantized_conv_ops_test.py||tensorflow/python/ops/quantized_conv_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/quantized_conv_ops.cc||tensorflow/core/kernels/quantized_conv_ops.cc",
            "tensorflow/core/kernels/quantized_conv_ops_test.cc||tensorflow/core/kernels/quantized_conv_ops_test.cc",
            "tensorflow/python/ops/quantized_conv_ops_test.py||tensorflow/python/ops/quantized_conv_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/quantized_conv_ops.cc||tensorflow/core/kernels/quantized_conv_ops.cc": [
          "File: tensorflow/core/kernels/quantized_conv_ops.cc -> tensorflow/core/kernels/quantized_conv_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include <algorithm>",
          "19: #include <vector>",
          "23: #define EIGEN_USE_THREADS",
          "25: #define GEMMLOWP_ALLOW_SLOW_SCALAR_FALLBACK",
          "",
          "[Removed Lines]",
          "21: #include \"tensorflow/core/platform/errors.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: #include \"tensorflow/core/kernels/quantization_utils.h\"",
          "33: #include \"tensorflow/core/kernels/reference_gemm.h\"",
          "34: #include \"tensorflow/core/lib/core/errors.h\"",
          "35: #include \"tensorflow/core/util/padding.h\"",
          "37: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #include \"tensorflow/core/platform/errors.h\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "501:     OP_REQUIRES(context, input.dims() == 4,",
          "504:     OP_REQUIRES(context, filter.dims() == 4,",
          "508:     const float min_input = context->input(2).flat<float>()(0);",
          "509:     const float max_input = context->input(3).flat<float>()(0);",
          "",
          "[Removed Lines]",
          "502:                 errors::InvalidArgument(\"input must be 4-dimensional\",",
          "503:                                         input.shape().DebugString()));",
          "505:                 errors::InvalidArgument(\"filter must be 4-dimensional: \",",
          "506:                                         filter.shape().DebugString()));",
          "",
          "[Added Lines]",
          "501:                 errors::InvalidArgument(\"input must be rank 4 but is rank \",",
          "502:                                         input.shape().dims()));",
          "504:                 errors::InvalidArgument(\"filter must be rank 4 but is rank \",",
          "505:                                         filter.shape().dims()));",
          "507:     OP_REQUIRES(context, TensorShapeUtils::IsScalar(context->input(2).shape()),",
          "508:                 errors::InvalidArgument(\"min_input must be rank 0 but is rank \",",
          "509:                                         context->input(2).shape().dims()));",
          "510:     OP_REQUIRES(context, TensorShapeUtils::IsScalar(context->input(3).shape()),",
          "511:                 errors::InvalidArgument(\"max_input must be rank 0 but is rank \",",
          "512:                                         context->input(3).shape().dims()));",
          "513:     OP_REQUIRES(",
          "514:         context, TensorShapeUtils::IsScalar(context->input(4).shape()),",
          "515:         errors::InvalidArgument(\"min_filter must be rank 0 but is rank \",",
          "516:                                 context->input(4).shape().dims()));",
          "517:     OP_REQUIRES(",
          "518:         context, TensorShapeUtils::IsScalar(context->input(5).shape()),",
          "519:         errors::InvalidArgument(\"max_filter must be rank 0 but is rank \",",
          "520:                                 context->input(5).shape().dims()));",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/quantized_conv_ops_test.cc||tensorflow/core/kernels/quantized_conv_ops_test.cc": [
          "File: tensorflow/core/kernels/quantized_conv_ops_test.cc -> tensorflow/core/kernels/quantized_conv_ops_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:                             image_quantized.flat<quint8>());",
          "92:   AddInputFromArray<quint8>(filter_quantized.shape(),",
          "93:                             filter_quantized.flat<quint8>());",
          "98:   TF_ASSERT_OK(RunOpKernel());",
          "",
          "[Removed Lines]",
          "94:   AddInputFromArray<float>(TensorShape({1}), {image_min});",
          "95:   AddInputFromArray<float>(TensorShape({1}), {image_max});",
          "96:   AddInputFromArray<float>(TensorShape({1}), {filter_min});",
          "97:   AddInputFromArray<float>(TensorShape({1}), {filter_max});",
          "",
          "[Added Lines]",
          "94:   AddInputFromArray<float>(TensorShape({}), {image_min});",
          "95:   AddInputFromArray<float>(TensorShape({}), {image_max});",
          "96:   AddInputFromArray<float>(TensorShape({}), {filter_min});",
          "97:   AddInputFromArray<float>(TensorShape({}), {filter_max});",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "158:   AddInputFromArray<quint8>(",
          "159:       TensorShape({filter_size, filter_size, depth, filter_count}),",
          "160:       {10, 40, 70, 20, 50, 80, 30, 60, 90});",
          "166:   TF_ASSERT_OK(RunOpKernel());",
          "167:   const int expected_width = image_width;",
          "",
          "[Removed Lines]",
          "161:   AddInputFromArray<float>(TensorShape({1}), {0});",
          "162:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
          "163:   AddInputFromArray<float>(TensorShape({1}), {0});",
          "164:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
          "",
          "[Added Lines]",
          "161:   AddInputFromArray<float>(TensorShape({}), {0});",
          "162:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
          "163:   AddInputFromArray<float>(TensorShape({}), {0});",
          "164:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "201:   AddInputFromArray<quint8>(",
          "202:       TensorShape({filter_size, filter_size, depth, filter_count}),",
          "203:       {1, 2, 3, 4, 5, 6, 7, 8, 9});",
          "209:   TF_ASSERT_OK(RunOpKernel());",
          "210:   const int expected_width = image_width / stride;",
          "",
          "[Removed Lines]",
          "204:   AddInputFromArray<float>(TensorShape({1}), {0});",
          "205:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
          "206:   AddInputFromArray<float>(TensorShape({1}), {0});",
          "207:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
          "",
          "[Added Lines]",
          "204:   AddInputFromArray<float>(TensorShape({}), {0});",
          "205:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
          "206:   AddInputFromArray<float>(TensorShape({}), {0});",
          "207:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "244:   AddInputFromArray<quint8>(",
          "245:       TensorShape({filter_size, filter_size, depth, filter_count}),",
          "246:       {1, 2, 3, 4, 5, 6, 7, 8, 9});",
          "252:   TF_ASSERT_OK(RunOpKernel());",
          "253:   const int expected_width = image_width / stride;",
          "",
          "[Removed Lines]",
          "247:   AddInputFromArray<float>(TensorShape({1}), {0});",
          "248:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
          "249:   AddInputFromArray<float>(TensorShape({1}), {0});",
          "250:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
          "",
          "[Added Lines]",
          "247:   AddInputFromArray<float>(TensorShape({}), {0});",
          "248:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
          "249:   AddInputFromArray<float>(TensorShape({}), {0});",
          "250:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "302:                             image_quantized.flat<quint8>());",
          "303:   AddInputFromArray<quint8>(filter_quantized.shape(),",
          "304:                             filter_quantized.flat<quint8>());",
          "309:   TF_ASSERT_OK(RunOpKernel());",
          "310:   const int expected_width = image_width;",
          "311:   const int expected_height = image_height * filter_count;",
          "",
          "[Removed Lines]",
          "305:   AddInputFromArray<float>(TensorShape({1}), {image_min});",
          "306:   AddInputFromArray<float>(TensorShape({1}), {image_max});",
          "307:   AddInputFromArray<float>(TensorShape({1}), {filter_min});",
          "308:   AddInputFromArray<float>(TensorShape({1}), {filter_max});",
          "",
          "[Added Lines]",
          "305:   AddInputFromArray<float>(TensorShape({}), {image_min});",
          "306:   AddInputFromArray<float>(TensorShape({}), {image_max});",
          "307:   AddInputFromArray<float>(TensorShape({}), {filter_min});",
          "308:   AddInputFromArray<float>(TensorShape({}), {filter_max});",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/quantized_conv_ops_test.py||tensorflow/python/ops/quantized_conv_ops_test.py": [
          "File: tensorflow/python/ops/quantized_conv_ops_test.py -> tensorflow/python/ops/quantized_conv_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: from tensorflow.python.framework import constant_op",
          "24: from tensorflow.python.framework import dtypes",
          "25: from tensorflow.python.ops import nn_ops",
          "26: from tensorflow.python.platform import test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: from tensorflow.python.framework import errors",
          "26: from tensorflow.python.ops import math_ops",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "200:         padding=\"SAME\",",
          "201:         expected=expected_output)",
          "204: if __name__ == \"__main__\":",
          "205:   test.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205:   def _testBadInputSize(self,",
          "206:                         tin=None,",
          "207:                         tfilter=None,",
          "208:                         min_input=None,",
          "209:                         max_input=None,",
          "210:                         min_filter=None,",
          "211:                         max_filter=None,",
          "212:                         error_regex=\"\"):",
          "213:     strides = [1, 1, 1, 1]",
          "214:     padding = \"SAME\"",
          "215:     if tin is None:",
          "216:       tin = math_ops.cast(",
          "217:           constant_op.constant(1, shape=[1, 2, 3, 3]), dtype=dtypes.quint8)",
          "219:     if tfilter is None:",
          "220:       tfilter = math_ops.cast(",
          "221:           constant_op.constant(1, shape=[1, 2, 3, 3]), dtype=dtypes.quint8)",
          "223:     if min_input is None:",
          "224:       min_input = constant_op.constant(0, shape=[], dtype=dtypes.float32)",
          "226:     if max_input is None:",
          "227:       max_input = constant_op.constant(0, shape=[], dtype=dtypes.float32)",
          "229:     if min_filter is None:",
          "230:       min_filter = constant_op.constant(0, shape=[], dtype=dtypes.float32)",
          "232:     if max_filter is None:",
          "233:       max_filter = constant_op.constant(0, shape=[], dtype=dtypes.float32)",
          "235:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "236:                                 error_regex):",
          "237:       self.evaluate(",
          "238:           nn_ops.quantized_conv2d(",
          "239:               tin,",
          "240:               tfilter,",
          "241:               out_type=dtypes.qint32,",
          "242:               strides=strides,",
          "243:               padding=padding,",
          "244:               min_input=min_input,",
          "245:               max_input=max_input,",
          "246:               min_filter=min_filter,",
          "247:               max_filter=max_filter))",
          "249:   def testBadInputSizes(self):",
          "250:     self._testBadInputSize(",
          "251:         tin=math_ops.cast(",
          "252:             constant_op.constant(1, shape=[1, 2]), dtype=dtypes.quint8),",
          "253:         error_regex=\"must be rank 4\")",
          "254:     self._testBadInputSize(",
          "255:         tfilter=math_ops.cast(",
          "256:             constant_op.constant(1, shape=[1, 2]), dtype=dtypes.quint8),",
          "257:         error_regex=\"must be rank 4\")",
          "258:     self._testBadInputSize(",
          "259:         min_input=constant_op.constant(0, shape=[1], dtype=dtypes.float32),",
          "260:         error_regex=\"must be rank 0\")",
          "261:     self._testBadInputSize(",
          "262:         max_input=constant_op.constant(0, shape=[1], dtype=dtypes.float32),",
          "263:         error_regex=\"must be rank 0\")",
          "264:     self._testBadInputSize(",
          "265:         min_filter=constant_op.constant(0, shape=[1], dtype=dtypes.float32),",
          "266:         error_regex=\"must be rank 0\")",
          "267:     self._testBadInputSize(",
          "268:         max_filter=constant_op.constant(0, shape=[1], dtype=dtypes.float32),",
          "269:         error_regex=\"must be rank 0\")",
          "",
          "---------------"
        ]
      }
    }
  ]
}