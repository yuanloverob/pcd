{
  "cve_id": "CVE-2021-39191",
  "cve_desc": "mod_auth_openidc is an authentication/authorization module for the Apache 2.x HTTP server that functions as an OpenID Connect Relying Party, authenticating users against an OpenID Connect Provider. In versions prior to 2.4.9.4, the 3rd-party init SSO functionality of mod_auth_openidc was reported to be vulnerable to an open redirect attack by supplying a crafted URL in the `target_link_uri` parameter. A patch in version 2.4.9.4 made it so that the `OIDCRedirectURLsAllowed` setting must be applied to the `target_link_uri` parameter. There are no known workarounds aside from upgrading to a patched version.",
  "repo": "zmartzone/mod_auth_openidc",
  "patch_hash": "03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d",
  "patch_info": {
    "commit_hash": "03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d",
    "repo": "zmartzone/mod_auth_openidc",
    "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d",
    "files": [
      "AUTHORS",
      "ChangeLog",
      "auth_openidc.conf",
      "configure.ac",
      "src/mod_auth_openidc.c"
    ],
    "message": "apply OIDCRedirectURLsAllowed setting to target_link_uri\n\ncloses #672; thanks @Meheni\nrelease 2.4.9.4\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
    "before_after_code_files": [
      "auth_openidc.conf||auth_openidc.conf",
      "configure.ac||configure.ac",
      "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
    ]
  },
  "patch_diff": {
    "auth_openidc.conf||auth_openidc.conf": [
      "File: auth_openidc.conf -> auth_openidc.conf",
      "--- Hunk 1 ---",
      "[Context before]",
      "918: #OIDCStateInputHeaders [none|user-agent|x-forwarded-for|both]",
      "920: # Define one or more regular expressions that specify URLs (or domains) allowed for post logout and",
      "923: #   OIDCRedirectURLsAllowed ^https://www.example.com ^https://(\\w+).example.org ^https://example.net/app",
      "924: # or:",
      "925: #   OIDCRedirectURLsAllowed ^https://www.example.com/logout$ ^https://www.example.com/app/return_to$",
      "",
      "[Removed Lines]",
      "921: # other redirects such as the \"return_to\" value on refresh token requests, and the \"login_uri\" value",
      "922: # on session management based logins through the OP iframe, e.g.:",
      "",
      "[Added Lines]",
      "921: # other redirects such as the \"return_to\" value on refresh token requests, the \"login_uri\" value",
      "922: # on session management based logins through the OP iframe, and the \"target_link_uri\" parameter in",
      "923: # 3rd-party initiated logins, e.g.:",
      "",
      "---------------"
    ],
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.4.9.3],[hans.zandbelt@zmartzone.eu])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.4.9.4],[hans.zandbelt@zmartzone.eu])",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
      "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2457:  return TRUE;",
      "2458: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2460: #define OIDC_MAX_URL_LENGTH 8192 * 2",
      "2462: static apr_byte_t oidc_validate_redirect_url(request_rec *r, oidc_cfg *c,",
      "2463:   const char *redirect_to_url, apr_byte_t restrict_to_host, char **err_str,",
      "2464:   char **err_desc) {",
      "2465:  apr_uri_t uri;",
      "2466:  const char *c_host = NULL;",
      "2467:  apr_hash_index_t *hi = NULL;",
      "2468:  size_t i = 0;",
      "2469:  char *url = apr_pstrndup(r->pool, redirect_to_url, OIDC_MAX_URL_LENGTH);",
      "2472:  for (i = 0; i < strlen(url); i++)",
      "2473:   if (url[i] == '\\\\')",
      "2474:    url[i] = '/';",
      "2476:  if (apr_uri_parse(r->pool, url, &uri) != APR_SUCCESS) {",
      "2479:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2480:   return FALSE;",
      "2481:  }",
      "2483:  if (c->redirect_urls_allowed != NULL) {",
      "2484:   for (hi = apr_hash_first(NULL, c->redirect_urls_allowed); hi; hi =",
      "2485:     apr_hash_next(hi)) {",
      "2486:    apr_hash_this(hi, (const void**) &c_host, NULL, NULL);",
      "2487:    if (oidc_util_regexp_first_match(r->pool, url, c_host,",
      "2488:      NULL, err_str) == TRUE)",
      "2489:     break;",
      "2490:   }",
      "2491:   if (hi == NULL) {",
      "2494:      apr_psprintf(r->pool,",
      "2495:        \"value does not match the list of allowed redirect URLs: %s\",",
      "2496:        url);",
      "2497:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2498:    return FALSE;",
      "2499:   }",
      "2500:  } else if ((uri.hostname != NULL) && (restrict_to_host == TRUE)) {",
      "2501:   c_host = oidc_get_current_url_host(r);",
      "2502:   if ((strstr(c_host, uri.hostname) == NULL)",
      "2503:     || (strstr(uri.hostname, c_host) == NULL)) {",
      "2506:      apr_psprintf(r->pool,",
      "2507:        \"URL value \\\"%s\\\" does not match the hostname of the current request \\\"%s\\\"\",",
      "2508:        apr_uri_unparse(r->pool, &uri, 0), c_host);",
      "2509:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2510:    return FALSE;",
      "2511:   }",
      "2512:  }",
      "2514:  if ((uri.hostname == NULL) && (strstr(url, \"/\") != url)) {",
      "2517:     apr_psprintf(r->pool,",
      "2518:       \"No hostname was parsed and it does not seem to be relative, i.e starting with '/': %s\",",
      "2519:       url);",
      "2520:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2521:   return FALSE;",
      "2522:  } else if ((uri.hostname == NULL) && (strstr(url, \"//\") == url)) {",
      "2525:     \"No hostname was parsed and starting with '//': %s\", url);",
      "2526:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2527:   return FALSE;",
      "2528:  } else if ((uri.hostname == NULL) && (strstr(url, \"/\\\\\") == url)) {",
      "2531:     \"No hostname was parsed and starting with '/\\\\': %s\", url);",
      "2532:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2533:   return FALSE;",
      "2534:  }",
      "2537:  if (((strstr(url, \"\\n\") != NULL) || strstr(url, \"\\r\") != NULL)) {",
      "2540:     apr_psprintf(r->pool,",
      "2541:       \"URL value \\\"%s\\\" contains illegal \\\"\\n\\\" or \\\"\\r\\\" character(s)\",",
      "2542:       url);",
      "2543:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2544:   return FALSE;",
      "2545:  }",
      "2547:  return TRUE;",
      "2548: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2469:  oidc_provider_t *provider = NULL;",
      "2471:  oidc_util_get_request_parameter(r, OIDC_DISC_OP_PARAM, &issuer);",
      "2472:  oidc_util_get_request_parameter(r, OIDC_DISC_USER_PARAM, &user);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2560:  char *error_str = NULL;",
      "2561:  char *error_description = NULL;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2519:     HTTP_UNAUTHORIZED);",
      "2520:  }",
      "2523:  if (c->metadata_dir == NULL) {",
      "2524:   if ((oidc_provider_static_config(r, c, &provider) == TRUE)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2615:  if (oidc_validate_redirect_url(r, c, target_link_uri, TRUE, &error_str,",
      "2616:    &error_description) == FALSE) {",
      "2617:   return oidc_util_html_send_error(r, c->error_template, error_str,",
      "2618:     error_description,",
      "2619:     HTTP_UNAUTHORIZED);",
      "2620:  }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2947:  return rc;",
      "2948: }",
      "",
      "[Removed Lines]",
      "2950: #define OIDC_MAX_URL_LENGTH 8192 * 2",
      "2952: static apr_byte_t oidc_validate_redirect_url(request_rec *r, oidc_cfg *c,",
      "2953:   const char *redirect_to_url, apr_byte_t restrict_to_host, char **err_str,",
      "2954:   char **err_desc) {",
      "2955:  apr_uri_t uri;",
      "2956:  const char *c_host = NULL;",
      "2957:  apr_hash_index_t *hi = NULL;",
      "2958:  size_t i = 0;",
      "2959:  char *url = apr_pstrndup(r->pool, redirect_to_url, OIDC_MAX_URL_LENGTH);",
      "2962:  for (i = 0; i < strlen(url); i++)",
      "2963:   if (url[i] == '\\\\')",
      "2964:    url[i] = '/';",
      "2966:  if (apr_uri_parse(r->pool, url, &uri) != APR_SUCCESS) {",
      "2969:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2970:   return FALSE;",
      "2971:  }",
      "2973:  if (c->redirect_urls_allowed != NULL) {",
      "2974:   for (hi = apr_hash_first(NULL, c->redirect_urls_allowed); hi; hi =",
      "2975:     apr_hash_next(hi)) {",
      "2976:    apr_hash_this(hi, (const void**) &c_host, NULL, NULL);",
      "2977:    if (oidc_util_regexp_first_match(r->pool, url, c_host,",
      "2978:      NULL, err_str) == TRUE)",
      "2979:     break;",
      "2980:   }",
      "2981:   if (hi == NULL) {",
      "2984:      apr_psprintf(r->pool,",
      "2985:        \"value does not match the list of allowed redirect URLs: %s\",",
      "2986:        url);",
      "2987:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2988:    return FALSE;",
      "2989:   }",
      "2990:  } else if ((uri.hostname != NULL) && (restrict_to_host == TRUE)) {",
      "2991:   c_host = oidc_get_current_url_host(r);",
      "2992:   if ((strstr(c_host, uri.hostname) == NULL)",
      "2993:     || (strstr(uri.hostname, c_host) == NULL)) {",
      "2996:      apr_psprintf(r->pool,",
      "2997:        \"URL value \\\"%s\\\" does not match the hostname of the current request \\\"%s\\\"\",",
      "2998:        apr_uri_unparse(r->pool, &uri, 0), c_host);",
      "2999:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3000:    return FALSE;",
      "3001:   }",
      "3002:  }",
      "3004:  if ((uri.hostname == NULL) && (strstr(url, \"/\") != url)) {",
      "3007:     apr_psprintf(r->pool,",
      "3008:       \"No hostname was parsed and it does not seem to be relative, i.e starting with '/': %s\",",
      "3009:       url);",
      "3010:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3011:   return FALSE;",
      "3012:  } else if ((uri.hostname == NULL) && (strstr(url, \"//\") == url)) {",
      "3015:     \"No hostname was parsed and starting with '//': %s\", url);",
      "3016:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3017:   return FALSE;",
      "3018:  } else if ((uri.hostname == NULL) && (strstr(url, \"/\\\\\") == url)) {",
      "3021:     \"No hostname was parsed and starting with '/\\\\': %s\", url);",
      "3022:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3023:   return FALSE;",
      "3024:  }",
      "3027:  if (((strstr(url, \"\\n\") != NULL) || strstr(url, \"\\r\") != NULL)) {",
      "3030:     apr_psprintf(r->pool,",
      "3031:       \"URL value \\\"%s\\\" contains illegal \\\"\\n\\\" or \\\"\\r\\\" character(s)\",",
      "3032:       url);",
      "3033:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3034:   return FALSE;",
      "3035:  }",
      "3037:  return TRUE;",
      "3038: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "15a9634ab32e05f3bf8e55747c8e5d318c7d5977",
      "candidate_info": {
        "commit_hash": "15a9634ab32e05f3bf8e55747c8e5d318c7d5977",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/15a9634ab32e05f3bf8e55747c8e5d318c7d5977",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/mod_auth_openidc.c"
        ],
        "message": "return 400 instead of 500 when state cookie matching fails\n\nrelease 2.4.6\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.6-dev],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.6],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1915:   return ((r->user) && (strncmp(r->user, \"\", 1) == 0)) ?",
          "1917:  }",
          "",
          "[Removed Lines]",
          "1916:     OK : HTTP_INTERNAL_SERVER_ERROR;",
          "",
          "[Added Lines]",
          "1916:     OK :",
          "1917:     HTTP_BAD_REQUEST;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e44dbb908e8bc2add723971354f7920f50de88a0",
      "candidate_info": {
        "commit_hash": "e44dbb908e8bc2add723971354f7920f50de88a0",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/e44dbb908e8bc2add723971354f7920f50de88a0",
        "files": [
          ".gitignore",
          "ChangeLog",
          "configure.ac",
          "src/cache/common.c",
          "src/cache/redis.h",
          "src/mod_auth_openidc.c",
          "src/parse.c",
          "test/test-cmd.c",
          "test/test.c"
        ],
        "message": "compiler related cleanups; bump to 2.4.9.5rc3\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/cache/common.c||src/cache/common.c",
          "src/cache/redis.h||src/cache/redis.h",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/parse.c||src/parse.c",
          "test/test-cmd.c||test/test-cmd.c",
          "test/test.c||test/test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.9.5rc2],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.9.5rc3],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/cache/common.c||src/cache/common.c": [
          "File: src/cache/common.c -> src/cache/common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: #ifdef AP_NEED_SET_MUTEX_PERMS",
          "53: #include \"unixd.h\"",
          "54: #endif",
          "68: extern module AP_MODULE_DECLARE_DATA auth_openidc_module;",
          "",
          "[Removed Lines]",
          "56: #include \"apr_general.h\"",
          "58: #include <httpd.h>",
          "59: #include <http_config.h>",
          "60: #include <http_log.h>",
          "62: #include <openssl/evp.h>",
          "63: #include <openssl/aes.h>",
          "64: #include <openssl/err.h>",
          "66: #include <apr_base64.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/cache/redis.h||src/cache/redis.h": [
          "File: src/cache/redis.h -> src/cache/redis.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: #include \"mod_auth_openidc.h\"",
          "54:   char**, const char *format, va_list ap);",
          "57: typedef struct oidc_cache_cfg_redis_t {",
          "58:  oidc_cache_mutex_t *mutex;",
          "",
          "[Removed Lines]",
          "50: typedef struct oidc_cache_cfg_redis_t oidc_cache_cfg_redis_t;",
          "52: typedef apr_status_t (*oidc_cache_redis_connect_function_t)(request_rec*, oidc_cache_cfg_redis_t*);",
          "53: typedef redisReply* (*oidc_cache_redis_command_function_t)(request_rec*, oidc_cache_cfg_redis_t*,",
          "55: typedef apr_status_t (*oidc_cache_redis_disconnect_function_t)(oidc_cache_cfg_redis_t*);",
          "",
          "[Added Lines]",
          "50: struct oidc_cache_cfg_redis_t;",
          "52: typedef apr_status_t (*oidc_cache_redis_connect_function_t)(request_rec*, struct oidc_cache_cfg_redis_t*);",
          "53: typedef redisReply* (*oidc_cache_redis_command_function_t)(request_rec*, struct oidc_cache_cfg_redis_t*,",
          "55: typedef apr_status_t (*oidc_cache_redis_disconnect_function_t)(struct oidc_cache_cfg_redis_t*);",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: #include \"mod_auth_openidc.h\"",
          "68: #define OIDC_REFRESH_ERROR 2",
          "70: static int oidc_handle_logout_request(request_rec *r, oidc_cfg *c,",
          "",
          "[Removed Lines]",
          "53: #include \"apr_hash.h\"",
          "54: #include \"apr_strings.h\"",
          "55: #include \"ap_config.h\"",
          "56: #include \"ap_provider.h\"",
          "57: #include \"apr_lib.h\"",
          "58: #include \"apr_file_io.h\"",
          "59: #include \"apr_base64.h\"",
          "61: #include \"httpd.h\"",
          "62: #include \"http_core.h\"",
          "63: #include \"http_config.h\"",
          "64: #include \"http_log.h\"",
          "65: #include \"http_protocol.h\"",
          "66: #include \"http_request.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.c||src/parse.c": [
          "File: src/parse.c -> src/parse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: #include \"mod_auth_openidc.h\"",
          "48: #include \"parse.h\"",
          "49: #include \"jose.h\"",
          "",
          "[Removed Lines]",
          "46: #include <apr_base64.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/test-cmd.c||test/test-cmd.c": [
          "File: test/test-cmd.c -> test/test-cmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: #include <openssl/rsa.h>",
          "52: #include <openssl/pem.h>",
          "59: int usage(int argc, char **argv, const char *msg) {",
          "60:  fprintf(stderr, \"Usage: %s %s\\n\", argv[0],",
          "61:    msg ? msg : \"[ sign | verify | decrypt | jwk2cert | key2jwk | enckey | hash_base64url | timestamp | uuid ] <options>\");",
          "",
          "[Removed Lines]",
          "45: #include <stdio.h>",
          "46: #include <string.h>",
          "48: #include <apr_file_io.h>",
          "49: #include <apr_base64.h>",
          "54: #include <cjose/header.h>",
          "55: #include <cjose/jws.h>",
          "57: #include <mod_auth_openidc.h>",
          "",
          "[Added Lines]",
          "45: #include <mod_auth_openidc.h>",
          "",
          "---------------"
        ],
        "test/test.c||test/test.c": [
          "File: test/test.c -> test/test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: #include \"mod_auth_openidc.h\"",
          "50: #include <openssl/evp.h>",
          "51: #include <openssl/hmac.h>",
          "59: extern module AP_MODULE_DECLARE_DATA auth_openidc_module;",
          "61: static int test_nr_run = 0;",
          "",
          "[Removed Lines]",
          "47: #include <stdio.h>",
          "48: #include <errno.h>",
          "53: #include \"apr.h\"",
          "54: #include \"apr_errno.h\"",
          "55: #include \"apr_general.h\"",
          "56: #include \"apr_time.h\"",
          "57: #include \"apr_base64.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "29a2f172c930aaaf559b6fafe276337b070c0dc1",
      "candidate_info": {
        "commit_hash": "29a2f172c930aaaf559b6fafe276337b070c0dc1",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/29a2f172c930aaaf559b6fafe276337b070c0dc1",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/authz.c",
          "src/pcre_subst.c",
          "src/pcre_subst.h"
        ],
        "message": "avoid memory leak when using PCRE2 regular expressions\n\nwhen used with array matching\ncloses #902; thanks @smanolache; bump to 2.4.11.3rc4\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/authz.c||src/authz.c",
          "src/pcre_subst.c||src/pcre_subst.c",
          "src/pcre_subst.h||src/pcre_subst.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11.3rc3],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11.3rc4],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/authz.c||src/authz.c": [
          "File: src/authz.c -> src/authz.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "165:      rc = TRUE;",
          "166:      goto end;",
          "167:     } else if (error_str) {",
          "168:      oidc_debug(r, \"pcre error (array): %s\", error_str);",
          "169:     }",
          "170:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "168:      oidc_pcre_free_match(preg);",
          "",
          "---------------"
        ],
        "src/pcre_subst.c||src/pcre_subst.c": [
          "File: src/pcre_subst.c -> src/pcre_subst.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "236: #endif",
          "237: }",
          "239: int oidc_pcre_get_substring(apr_pool_t *pool, const struct oidc_pcre *pcre, const char *input,",
          "240:   int rc, char **sub_str, char **error_str) {",
          "241:  int rv = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "239: void oidc_pcre_free_match(struct oidc_pcre *pcre) {",
          "240: #ifdef HAVE_LIBPCRE2",
          "241:  if (pcre->match_data) {",
          "242:   pcre2_match_data_free(pcre->match_data);",
          "243:   pcre->match_data = NULL;",
          "244:  }",
          "245: #endif",
          "246: }",
          "",
          "---------------"
        ],
        "src/pcre_subst.h||src/pcre_subst.h": [
          "File: src/pcre_subst.h -> src/pcre_subst.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: char* oidc_pcre_subst(apr_pool_t *pool, const struct oidc_pcre*, const char*, int, const char*);",
          "48: int oidc_pcre_exec(apr_pool_t*, struct oidc_pcre*, const char*, int, char**);",
          "49: void oidc_pcre_free(struct oidc_pcre*);",
          "50: int oidc_pcre_get_substring(apr_pool_t *pool, const struct oidc_pcre*, const char *input, int rc,",
          "51:   char **sub_str, char **error_str);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: void oidc_pcre_free_match(struct oidc_pcre*);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7e498577fd74594e7e3d192253d625027946a335",
      "candidate_info": {
        "commit_hash": "7e498577fd74594e7e3d192253d625027946a335",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/7e498577fd74594e7e3d192253d625027946a335",
        "files": [
          "ChangeLog",
          "configure.ac"
        ],
        "message": "release 2.4.11.2\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11.2rc2],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11.2],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d7d80ed5db65556fceadb2c1f7b643d18717fe30",
      "candidate_info": {
        "commit_hash": "d7d80ed5db65556fceadb2c1f7b643d18717fe30",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/d7d80ed5db65556fceadb2c1f7b643d18717fe30",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/mod_auth_openidc.c",
          "src/session.c"
        ],
        "message": "improve handling session duration expiry\n\nwhen combined with OIDCUnAuthAction or Discovery\nalso clear r->user in oidc_session_clear for such cases; see #778\nbump to 2.4.11rc8\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/session.c||src/session.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11rc7],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11rc8],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "913:  apr_time_t session_expires = oidc_session_get_session_expires(r, session);",
          "",
          "[Removed Lines]",
          "909: static int oidc_check_max_session_duration(request_rec *r, oidc_cfg *cfg,",
          "910:   oidc_session_t *session) {",
          "",
          "[Added Lines]",
          "909: static apr_byte_t oidc_check_max_session_duration(request_rec *r, oidc_cfg *cfg,",
          "910:   oidc_session_t *session, int *rc) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "917:   oidc_warn(r, \"maximum session duration exceeded for user: %s\",",
          "918:     session->remote_user);",
          "919:   oidc_session_kill(r, session);",
          "921:  }",
          "924:  oidc_log_session_expires(r, \"session max lifetime\", session_expires);",
          "927: }",
          "",
          "[Removed Lines]",
          "920:   return oidc_handle_unauthenticated_user(r, cfg);",
          "926:  return OK;",
          "",
          "[Added Lines]",
          "921:   return FALSE;",
          "929:  return TRUE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1385:   oidc_session_t *session, apr_byte_t *needs_save) {",
          "1387:  apr_byte_t rv = FALSE;",
          "1389:  oidc_debug(r, \"enter\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1391:  int rc = OK;",
          "1392:  const char *s_claims = NULL;",
          "1393:  const char *s_id_token = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1399:  apr_byte_t pass_base64url = oidc_cfg_dir_pass_info_base64url(r);",
          "1403:   return HTTP_UNAUTHORIZED;",
          "1408:   return rc;",
          "1411:  rv = oidc_refresh_access_token_before_expiry(r, cfg, session,",
          "",
          "[Removed Lines]",
          "1402:  if (oidc_check_cookie_domain(r, cfg, session) == FALSE)",
          "1406:  int rc = oidc_check_max_session_duration(r, cfg, session);",
          "1407:  if (rc != OK)",
          "",
          "[Added Lines]",
          "1408:  if (oidc_check_cookie_domain(r, cfg, session) == FALSE) {",
          "1411:  }",
          "1418:  oidc_scrub_headers(r);",
          "1421:  if (oidc_check_max_session_duration(r, cfg, session, &rc) == FALSE) {",
          "1424:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1423:  if (oidc_refresh_claims_from_userinfo_endpoint(r, cfg, session) == TRUE)",
          "1433:  if ((r->user != NULL) && (authn_header != NULL))",
          "1434:   oidc_util_hdr_in_set(r, authn_header, r->user);",
          "1440:  oidc_copy_tokens_to_request_state(r, session, &s_id_token, &s_claims);",
          "",
          "[Removed Lines]",
          "1430:  oidc_scrub_headers(r);",
          "1436:  const char *s_claims = NULL;",
          "1437:  const char *s_id_token = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/session.c||src/session.c": [
          "File: src/session.c -> src/session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "101: static void oidc_session_clear(request_rec *r, oidc_session_t *z) {",
          "102:  z->uuid[0] = '\\0';",
          "103:  z->remote_user = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102:  r->user = NULL;",
          "",
          "---------------"
        ]
      }
    }
  ]
}