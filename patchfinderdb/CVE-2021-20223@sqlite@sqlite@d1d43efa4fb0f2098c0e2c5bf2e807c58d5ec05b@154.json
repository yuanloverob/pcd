{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3a5f9bc49ce598fa3a3829f5f2c24179d1f44455",
      "candidate_info": {
        "commit_hash": "3a5f9bc49ce598fa3a3829f5f2c24179d1f44455",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3a5f9bc49ce598fa3a3829f5f2c24179d1f44455",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/build.c",
          "src/delete.c",
          "src/sqliteInt.h",
          "test/altertab.test"
        ],
        "message": "More restrictions on changes to shadow tables when in defensive mode.\n\nFossilOrigin-Name: bae76a5c40703871e5ce4cd23d6fae5a3836606f524a63b01ac828c7a602c5e9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/build.c||src/build.c",
          "src/delete.c||src/delete.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/altertab.test||test/altertab.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 70390bbca49e706649ca5b7c031f0baf416fc38798c17e5f3b73746b3e66e3b5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: static int isAlterableTable(Parse *pParse, Table *pTab){",
          "32:   if( 0==sqlite3StrNICmp(pTab->zName, \"sqlite_\", 7)",
          "33: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "37:    )",
          "38: #endif",
          "39:   ){",
          "",
          "[Removed Lines]",
          "34:    || ( (pTab->tabFlags & TF_Shadow)",
          "35:      && (pParse->db->flags & SQLITE_Defensive)",
          "36:      && pParse->db->nVdbeExec==0",
          "",
          "[Added Lines]",
          "34:    || ( (pTab->tabFlags & TF_Shadow)!=0",
          "35:         && sqlite3ReadOnlyShadowTables(pParse->db)",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "856:       }",
          "857:     }",
          "858:   }else{",
          "861:     ){",
          "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
          "863:                       zName);",
          "864:       return SQLITE_ERROR;",
          "865:     }",
          "866:   }",
          "867:   return SQLITE_OK;",
          "868: }",
          "",
          "[Removed Lines]",
          "859:     if( pParse->nested==0",
          "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
          "",
          "[Added Lines]",
          "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
          "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
          "",
          "[Added Lines]",
          "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
          "2148:   return pMod->pModule->xShadowName(zTail+1);",
          "2149: }",
          "",
          "[Removed Lines]",
          "2150: #else",
          "2151: # define isShadowTableName(x,y) 0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2190:   p = pParse->pNewTable;",
          "2191:   if( p==0 ) return;",
          "2194:     p->tabFlags |= TF_Shadow;",
          "2195:   }",
          "",
          "[Removed Lines]",
          "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
          "",
          "[Added Lines]",
          "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2894:   sqliteViewResetAll(db, iDb);",
          "2895: }",
          "2901:   if( sqlite3StrNICmp(pTab->zName, \"sqlite_\", 7)==0 ){",
          "2902:     if( sqlite3StrNICmp(pTab->zName+7, \"stat\", 4)==0 ) return 0;",
          "2903:     if( sqlite3StrNICmp(pTab->zName+7, \"parameters\", 10)==0 ) return 0;",
          "2904:     return 1;",
          "2905:   }",
          "2909:   }",
          "2910:   return 0;",
          "2911: }",
          "",
          "[Removed Lines]",
          "2900: static int tableMayNotBeDropped(Parse *pParse, Table *pTab){",
          "2906:   if( pTab->tabFlags & TF_Shadow ){",
          "2907:     sqlite3 *db = pParse->db;",
          "2908:     if( (db->flags & SQLITE_Defensive)!=0 && db->nVdbeExec==0 ) return 1;",
          "",
          "[Added Lines]",
          "2900: int sqlite3ReadOnlyShadowTables(sqlite3 *db){",
          "2901: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "2902:   if( (db->flags & SQLITE_Defensive)!=0",
          "2903:    && db->pVtabCtx==0",
          "2904:    && db->nVdbeExec==0",
          "2905:   ){",
          "2906:     return 1;",
          "2907:   }",
          "2908: #endif",
          "2909:   return 0;",
          "2910: }",
          "2915: static int tableMayNotBeDropped(sqlite3 *db, Table *pTab){",
          "2921:   if( (pTab->tabFlags & TF_Shadow)!=0 && sqlite3ReadOnlyShadowTables(db) ){",
          "2922:     return 1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2979:     }",
          "2980:   }",
          "2981: #endif",
          "2983:     sqlite3ErrorMsg(pParse, \"table %s may not be dropped\", pTab->zName);",
          "2984:     goto exit_drop_table;",
          "2985:   }",
          "",
          "[Removed Lines]",
          "2982:   if( tableMayNotBeDropped(pParse, pTab) ){",
          "",
          "[Added Lines]",
          "2996:   if( tableMayNotBeDropped(db, pTab) ){",
          "",
          "---------------"
        ],
        "src/delete.c||src/delete.c": [
          "File: src/delete.c -> src/delete.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:     return sqlite3WritableSchema(db)==0 && pParse->nested==0;",
          "71:   }",
          "72:   assert( pTab->tabFlags & TF_Shadow );",
          "78: }",
          "",
          "[Removed Lines]",
          "73:   return (db->flags & SQLITE_Defensive)!=0",
          "74: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "75:           && db->pVtabCtx==0",
          "76: #endif",
          "77:           && db->nVdbeExec==0;",
          "",
          "[Added Lines]",
          "73:   return sqlite3ReadOnlyShadowTables(db);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4547:    );",
          "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
          "4549: #endif",
          "4550: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
          "4551: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
          "4552: void sqlite3VtabMakeWritable(Parse*,Table*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
          "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
          "4553: #else",
          "4554: # define sqlite3ShadowTableName(A,B) 0",
          "4555: #endif",
          "",
          "---------------"
        ],
        "test/altertab.test||test/altertab.test": [
          "File: test/altertab.test -> test/altertab.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "547:   } {1 {table y1_segments may not be modified}}",
          "549:   do_catchsql_test 16.20 {",
          "554:     DROP TABLE y1_segments;",
          "555:   } {1 {table y1_segments may not be dropped}}",
          "557:   do_execsql_test 16.30 {",
          "558:     ALTER TABLE y1 RENAME TO z1;",
          "559:   }",
          "",
          "[Removed Lines]",
          "550:     ALTER TABLE y1_segments RENAME TO abc;",
          "551:   } {1 {table y1_segments may not be altered}}",
          "553:   do_catchsql_test 16.21 {",
          "",
          "[Added Lines]",
          "553:   do_catchsql_test 16.20 {",
          "554:     ALTER TABLE y1_segments RENAME TO abc;",
          "555:   } {1 {table y1_segments may not be altered}}",
          "556:   sqlite3_db_config db DEFENSIVE 0",
          "557:   do_catchsql_test 16.22 {",
          "558:     ALTER TABLE y1_segments RENAME TO abc;",
          "559:   } {0 {}}",
          "560:   sqlite3_db_config db DEFENSIVE 1",
          "561:   do_catchsql_test 16.23 {",
          "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
          "563:   } {1 {object name reserved for internal use: y1_segments}}",
          "564:   do_catchsql_test 16.24 {",
          "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
          "566:   } {1 {object name reserved for internal use: y1_segments}}",
          "567:   sqlite3_db_config db DEFENSIVE 0",
          "568:   do_catchsql_test 16.25 {",
          "569:     ALTER TABLE abc RENAME TO y1_segments;",
          "570:   } {0 {}}",
          "571:   sqlite3_db_config db DEFENSIVE 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "672f07c642fad9ad76b1a8cd1c1d196d0286ffc4",
      "candidate_info": {
        "commit_hash": "672f07c642fad9ad76b1a8cd1c1d196d0286ffc4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/672f07c642fad9ad76b1a8cd1c1d196d0286ffc4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/malloc.c",
          "src/memdb.c",
          "test/fuzzcheck.c"
        ],
        "message": "Fix the sqlite3_hard_heap_limit() so that it works with sqlite3_realloc64() in addition to sqlite3_malloc64().  Improvements to OOM processing and debugging aids in the fuzzcheck utility.\n\nFossilOrigin-Name: 602d7369166d406a26834aa47d71d565a17d377d32e41f308821a50b41f91896",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/malloc.c||src/malloc.c",
          "src/memdb.c||src/memdb.c",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 79da254f41a0d7d5fdc57f0cc40b3560bfcf7f79eed24a9fada1b6b4ca3adb5a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/malloc.c||src/malloc.c": [
          "File: src/malloc.c -> src/malloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "474:   if( nOld==nNew ){",
          "475:     pNew = pOld;",
          "476:   }else if( sqlite3GlobalConfig.bMemstat ){",
          "477:     sqlite3_mutex_enter(mem0.mutex);",
          "478:     sqlite3StatusHighwater(SQLITE_STATUS_MALLOC_SIZE, (int)nBytes);",
          "479:     nDiff = nNew - nOld;",
          "481:           mem0.alarmThreshold-nDiff ){",
          "482:       sqlite3MallocAlarm(nDiff);",
          "483:     }",
          "484:     pNew = sqlite3GlobalConfig.m.xRealloc(pOld, nNew);",
          "485: #ifdef SQLITE_ENABLE_MEMORY_MANAGEMENT",
          "",
          "[Removed Lines]",
          "480:     if( nDiff>0 && sqlite3StatusValue(SQLITE_STATUS_MEMORY_USED) >=",
          "",
          "[Added Lines]",
          "477:     sqlite3_int64 nUsed;",
          "481:     if( nDiff>0 && (nUsed = sqlite3StatusValue(SQLITE_STATUS_MEMORY_USED)) >=",
          "484:       if( mem0.hardLimit>0 && nUsed >= mem0.hardLimit - nDiff ){",
          "485:         sqlite3_mutex_leave(mem0.mutex);",
          "486:         return 0;",
          "487:       }",
          "",
          "---------------"
        ],
        "src/memdb.c||src/memdb.c": [
          "File: src/memdb.c -> src/memdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "576:     goto end_deserialize;",
          "577:   }",
          "578:   zSql = sqlite3_mprintf(\"ATTACH x AS %Q\", zSchema);",
          "581:   if( rc ) goto end_deserialize;",
          "582:   db->init.iDb = (u8)iDb;",
          "583:   db->init.reopenMemdb = 1;",
          "",
          "[Removed Lines]",
          "579:   rc = sqlite3_prepare_v2(db, zSql, -1, &pStmt, 0);",
          "580:   sqlite3_free(zSql);",
          "",
          "[Added Lines]",
          "579:   if( zSql==0 ){",
          "580:     rc = SQLITE_NOMEM;",
          "581:   }else{",
          "582:     rc = sqlite3_prepare_v2(db, zSql, -1, &pStmt, 0);",
          "583:     sqlite3_free(zSql);",
          "584:   }",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "673:             }",
          "674:             newSize = MX_FILE_SZ;",
          "675:           }",
          "680:           }",
          "681:           assert( newSize > nAlloc );",
          "682:           memset(a+nAlloc, 0, (size_t)(newSize - nAlloc));",
          "683:           nAlloc = newSize;",
          "",
          "[Removed Lines]",
          "676:           a = sqlite3_realloc64( a, newSize );",
          "677:           if( a==0 ){",
          "678:             fprintf(stderr, \"Out of memory!\\n\");",
          "679:             exit(1);",
          "",
          "[Added Lines]",
          "676:           aNew = sqlite3_realloc64( a, newSize );",
          "677:           if( aNew==0 ){",
          "678:             sqlite3_free(a);",
          "679:             return -1;",
          "681:           a = aNew;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "851:     int nAlloc = 0;",
          "852:     int nNotUsed = 0;",
          "853:     sqlite3_status(SQLITE_STATUS_MALLOC_COUNT, &nAlloc, &nNotUsed, 0);",
          "855:             sqlite3_memory_used(), nAlloc);",
          "856:     exit(1);",
          "857:   }",
          "",
          "[Removed Lines]",
          "854:     fprintf(stderr,\"Memory leak in mutator: %lld bytes in %d allocations\\n\",",
          "",
          "[Added Lines]",
          "855:     fprintf(stderr,\"memory leak prior to test start:\"",
          "856:                    \" %lld bytes in %d allocations\\n\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "866:     fflush(stdout);",
          "867:   }",
          "868:   rc = sqlite3_open(0, &cx.db);",
          "870:   if( bVdbeDebug ){",
          "871:     sqlite3_exec(cx.db, \"PRAGMA vdbe_debug=ON\", 0, 0, 0);",
          "872:   }",
          "",
          "[Removed Lines]",
          "869:   if( rc ) return 1;",
          "",
          "[Added Lines]",
          "871:   if( rc ){",
          "872:     sqlite3_free(aDb);",
          "873:     return 1;",
          "874:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1410: \"  --export-sql DIR     Write SQL to file(s) in DIR. Also works with --sqlid\\n\"",
          "1411: \"  --help               Show this help text\\n\"",
          "1412: \"  --info               Show information about SOURCE-DB w/o running tests\\n\"",
          "1414: \"  --limit-mem N        Limit memory used by test SQLite instance to N bytes\\n\"",
          "1415: \"  --limit-vdbe         Panic if any test runs for more than 100,000 cycles\\n\"",
          "1416: \"  --load-sql ARGS...   Load SQL scripts fron files into SOURCE-DB\\n\"",
          "",
          "[Removed Lines]",
          "1413: \"  --limit-depth N      Limit expression depth to N\\n\"",
          "",
          "[Added Lines]",
          "1418: \"  --limit-depth N      Limit expression depth to N.  Default: 500\\n\"",
          "1419: \"  --limit-heap N       Limit heap memory to N.  Default: 100M\\n\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1424: \"  -q|--quiet           Reduced output\\n\"",
          "1425: \"  --rebuild            Rebuild and vacuum the database file\\n\"",
          "1426: \"  --result-trace       Show the results of each SQL command\\n\"",
          "1427: \"  --spinner            Use a spinner to show progress\\n\"",
          "1428: \"  --sqlid N            Use only SQL where sqlid=N\\n\"",
          "1429: \"  --timeout N          Abort if any single test needs more than N seconds\\n\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1433: \"  --skip N             Skip the first N test cases\\n\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1520:         if( i>=argc-1 ) fatalError(\"missing arguments on %s\", argv[i]);",
          "1521:         depthLimit = integerValue(argv[++i]);",
          "1522:       }else",
          "1523:       if( strcmp(z,\"limit-mem\")==0 ){",
          "1524:         if( i>=argc-1 ) fatalError(\"missing arguments on %s\", argv[i]);",
          "1525:         nMem = integerValue(argv[++i]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1531:       if( strcmp(z,\"limit-heap\")==0 ){",
          "1532:         if( i>=argc-1 ) fatalError(\"missing arguments on %s\", argv[i]);",
          "1533:         heapLimit = integerValue(argv[++i]);",
          "1534:       }else",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1578:       if( strcmp(z,\"result-trace\")==0 ){",
          "1579:         runFlags |= SQL_OUTPUT;",
          "1580:       }else",
          "1581:       if( strcmp(z,\"spinner\")==0 ){",
          "1582:         bSpinner = 1;",
          "1583:       }else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1593:       if( strcmp(z,\"skip\")==0 ){",
          "1594:         if( i>=argc-1 ) fatalError(\"missing arguments on %s\", argv[i]);",
          "1595:         nSkip = atoi(argv[++i]);",
          "1596:       }else",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1898:             prevAmt = amt;",
          "1899:           }",
          "1900:         }",
          "1902:         nTest++;",
          "1903:         g.zTestName[0] = 0;",
          "1904:         disableOom();",
          "",
          "[Removed Lines]",
          "1901:         runCombinedDbSqlInput(pSql->a, pSql->sz);",
          "",
          "[Added Lines]",
          "1917:         if( nSkip>0 ){",
          "1918:           nSkip--;",
          "1919:         }else{",
          "1920:           runCombinedDbSqlInput(pSql->a, pSql->sz);",
          "1921:         }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1927:             prevAmt = amt;",
          "1928:           }",
          "1929:         }",
          "1930:         createVFile(\"main.db\", pDb->sz, pDb->a);",
          "1931:         sqlite3_randomness(0,0);",
          "1932:         if( ossFuzzThisDb ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1950:         if( nSkip>0 ){",
          "1951:           nSkip--;",
          "1952:           continue;",
          "1953:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d03f77ae4650abd99699656e959c979e2e46391f",
      "candidate_info": {
        "commit_hash": "d03f77ae4650abd99699656e959c979e2e46391f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d03f77ae4650abd99699656e959c979e2e46391f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c",
          "test/bestindex7.test"
        ],
        "message": "Fix a problem with the processing of IN(...) constraints handled by virtual table implementations that do not set the \"omit\" flag when the virtual table column contains at least one NULL value.\n\nFossilOrigin-Name: dcb4838757ca49cf149a6e883b3eb0ac8a075147387a078280dfabe39b1a3e8d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c",
          "test/bestindex7.test||test/bestindex7.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bcd5b37b8ebd67537f60c0061fcbc70b2aebebb88d6fb842ccf321a3e20c122c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1432:           pCompare->pRight = pRight = sqlite3Expr(db, TK_REGISTER, 0);",
          "1433:           if( pRight ){",
          "1434:             pRight->iTable = iReg+j+2;",
          "1436:           }",
          "1437:           pCompare->pLeft = 0;",
          "1438:           sqlite3ExprDelete(db, pCompare);",
          "",
          "[Removed Lines]",
          "1435:             sqlite3ExprIfFalse(pParse, pCompare, pLevel->addrCont, 0);",
          "",
          "[Added Lines]",
          "1435:             sqlite3ExprIfFalse(",
          "1436:                 pParse, pCompare, pLevel->addrCont, SQLITE_JUMPIFNULL",
          "1437:             );",
          "",
          "---------------"
        ],
        "test/bestindex7.test||test/bestindex7.test": [
          "File: test/bestindex7.test -> test/bestindex7.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2020-01-29",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "13: set testdir [file dirname $argv0]",
          "14: source $testdir/tester.tcl",
          "15: set testprefix bestindex7",
          "17: ifcapable !vtab {",
          "18:   finish_test",
          "19:   return",
          "20: }",
          "22: register_tcl_module db",
          "24: proc vtab_command {src method args} {",
          "25:   switch -- $method {",
          "26:     xConnect {",
          "27:       return \"CREATE TABLE xxx(a)\"",
          "28:     }",
          "30:     xBestIndex {",
          "31:       set clist [lindex $args 0]",
          "32:       set iCons 0",
          "33:       set ret [list]",
          "34:       foreach cons $clist {",
          "35:         catch { array unset C }",
          "36:         array set C $cons",
          "37:         if {$C(usable)} {",
          "38:           lappend ret use $iCons",
          "39:         }",
          "40:         incr iCons",
          "41:       }",
          "42:       return $ret",
          "43:     }",
          "45:     xFilter {",
          "46:       return [list sql \"SELECT rowid, x FROM $src\"]",
          "47:     }",
          "49:   }",
          "51:   return {}",
          "52: }",
          "54: do_execsql_test 1.0 {",
          "55:   CREATE TABLE t1(x);",
          "56:   INSERT INTO t1 VALUES(0), (2);",
          "57:   CREATE VIRTUAL TABLE vt1 USING tcl(vtab_command t1);",
          "58: }",
          "60: do_execsql_test 1.1 { select * from vt1 } {0 2}",
          "61: do_execsql_test 1.2 { select * from vt1 WHERE a=0 } {0}",
          "62: do_execsql_test 1.3 { select * from vt1 WHERE a=1 } {}",
          "63: do_execsql_test 1.4 { select * from vt1 WHERE a=1 OR a=0} {0}",
          "65: do_execsql_test 1.5 {",
          "66:   UPDATE t1 SET x=NULL WHERE x=2;",
          "67: }",
          "69: do_execsql_test 1.6 { select * from vt1 } {0 {}}",
          "70: do_execsql_test 1.7 { select * from vt1 WHERE a=0 } {0}",
          "71: do_execsql_test 1.8 { select * from vt1 WHERE a=1 } {}",
          "72: do_execsql_test 1.9 { select * from vt1 WHERE a=1 OR a=0} {0}",
          "73: do_execsql_test 1.10 { select * from vt1 WHERE a IN (2) } {}",
          "74: do_execsql_test 1.10 { select * from vt1 WHERE a IN (0,1,2,3) } {0}",
          "75: do_execsql_test 1.11 { select * from vt1 WHERE a IN (0, NULL) } {0}",
          "76: do_execsql_test 1.12 { select * from vt1 WHERE a IN (NULL) } {}",
          "78: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4cbe5d3588f671f96e917dab6c90d1e80707770a",
      "candidate_info": {
        "commit_hash": "4cbe5d3588f671f96e917dab6c90d1e80707770a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4cbe5d3588f671f96e917dab6c90d1e80707770a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/backup.c",
          "src/btree.c",
          "src/btreeInt.h",
          "src/build.c",
          "src/main.c",
          "src/pragma.c",
          "src/vacuum.c"
        ],
        "message": "Merge trunk changes into this branch.\n\nFossilOrigin-Name: ac4ee69664278a828e0a64c5be3b96fdb6eb6acc95646a9425c667aea328791c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/backup.c||src/backup.c",
          "src/btree.c||src/btree.c",
          "src/btreeInt.h||src/btreeInt.h",
          "src/build.c||src/build.c",
          "src/main.c||src/main.c",
          "src/pragma.c||src/pragma.c",
          "src/vacuum.c||src/vacuum.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3cfc675e2e917b69108feb3a75728b573abe8e44f0890a7d20d307b0b6784c0e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/backup.c||src/backup.c": [
          "File: src/backup.c -> src/backup.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "113: static int setDestPgsz(sqlite3_backup *p){",
          "114:   int rc;",
          "116:   return rc;",
          "117: }",
          "",
          "[Removed Lines]",
          "115:   rc = sqlite3BtreeSetPageSize(p->pDest,sqlite3BtreeGetPageSize(p->pSrc),-1,0);",
          "",
          "[Added Lines]",
          "115:   rc = sqlite3BtreeSetPageSize(p->pDest,sqlite3BtreeGetPageSize(p->pSrc),0,0);",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2856: int sqlite3BtreeSetPageSize(Btree *p, int pageSize, int nReserve, int iFix){",
          "2857:   int rc = SQLITE_OK;",
          "2858:   BtShared *pBt = p->pBt;",
          "2860:   sqlite3BtreeEnter(p);",
          "2864:   if( pBt->btsFlags & BTS_PAGESIZE_FIXED ){",
          "2865:     sqlite3BtreeLeave(p);",
          "2866:     return SQLITE_READONLY;",
          "2867:   }",
          "2871:   assert( nReserve>=0 && nReserve<=255 );",
          "2872:   if( pageSize>=512 && pageSize<=SQLITE_MAX_PAGE_SIZE &&",
          "2873:         ((pageSize-1)&pageSize)==0 ){",
          "",
          "[Removed Lines]",
          "2859:   assert( nReserve>=-1 && nReserve<=254 );",
          "2861:   if( nReserve>=0 ){",
          "2862:     pBt->nReserveWanted = nReserve + 1;",
          "2863:   }",
          "2868:   if( nReserve<0 ){",
          "2869:     nReserve = pBt->pageSize - pBt->usableSize;",
          "2870:   }",
          "",
          "[Added Lines]",
          "2858:   int x;",
          "2860:   assert( nReserve>=0 && nReserve<=255 );",
          "2862:   pBt->nReserveWanted = nReserve;",
          "2863:   x = pBt->pageSize - pBt->usableSize;",
          "2864:   if( nReserve<x ) nReserve = x;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2920: int sqlite3BtreeGetRequestedReserve(Btree *p){",
          "2922:   sqlite3BtreeEnter(p);",
          "2925:   sqlite3BtreeLeave(p);",
          "2927: }",
          "",
          "[Removed Lines]",
          "2921:   int n;",
          "2923:   n = ((int)p->pBt->nReserveWanted) - 1;",
          "2924:   if( n<0 ) n = sqlite3BtreeGetReserveNoMutex(p);",
          "2926:   return n;",
          "",
          "[Added Lines]",
          "2919:   int n1, n2;",
          "2921:   n1 = (int)p->pBt->nReserveWanted;",
          "2922:   n2 = sqlite3BtreeGetReserveNoMutex(p);",
          "2924:   return n1>n2 ? n1 : n2;",
          "",
          "---------------"
        ],
        "src/btreeInt.h||src/btreeInt.h": [
          "File: src/btreeInt.h -> src/btreeInt.h"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4630:     }",
          "4631:     db->aDb[1].pBt = pBt;",
          "4632:     assert( db->aDb[1].pSchema );",
          "4634:       sqlite3OomFault(db);",
          "4635:       return 1;",
          "4636:     }",
          "",
          "[Removed Lines]",
          "4633:     if( SQLITE_NOMEM==sqlite3BtreeSetPageSize(pBt, db->nextPagesize, -1, 0) ){",
          "",
          "[Added Lines]",
          "4633:     if( SQLITE_NOMEM==sqlite3BtreeSetPageSize(pBt, db->nextPagesize, 0, 0) ){",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3215: #endif",
          "3216: #if defined(SQLITE_DEFAULT_DEFENSIVE)",
          "3217:                  | SQLITE_Defensive",
          "3218: #endif",
          "3219:       ;",
          "3220:   sqlite3HashInit(&db->aCollSeq);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3218: #endif",
          "3219: #if defined(SQLITE_DEFAULT_LEGACY_ALTER_TABLE)",
          "3220:                  | SQLITE_LegacyAlter",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3813:     }else if( op==SQLITE_FCNTL_RESERVE_BYTES ){",
          "3814:       int iNew = *(int*)pArg;",
          "3817:         sqlite3BtreeSetPageSize(pBtree, 0, iNew, 0);",
          "3818:       }",
          "3819:       rc = SQLITE_OK;",
          "",
          "[Removed Lines]",
          "3816:       if( iNew>=0 && iNew<=254 ){",
          "",
          "[Added Lines]",
          "3819:       if( iNew>=0 && iNew<=255 ){",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "557:       db->nextPagesize = sqlite3Atoi(zRight);",
          "559:         sqlite3OomFault(db);",
          "560:       }",
          "561:     }",
          "",
          "[Removed Lines]",
          "558:       if( SQLITE_NOMEM==sqlite3BtreeSetPageSize(pBt, db->nextPagesize,-1,0) ){",
          "",
          "[Added Lines]",
          "558:       if( SQLITE_NOMEM==sqlite3BtreeSetPageSize(pBt, db->nextPagesize,0,0) ){",
          "",
          "---------------"
        ],
        "src/vacuum.c||src/vacuum.c": [
          "File: src/vacuum.c -> src/vacuum.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "377:   db->nChange = saved_nChange;",
          "378:   db->nTotalChange = saved_nTotalChange;",
          "379:   db->mTrace = saved_mTrace;",
          "",
          "[Removed Lines]",
          "380:   sqlite3BtreeSetPageSize(pMain, -1, -1, 1);",
          "",
          "[Added Lines]",
          "380:   sqlite3BtreeSetPageSize(pMain, -1, 0, 1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "30c54a01db1666c66b7c75d37cb2f287f1a2cd00",
      "candidate_info": {
        "commit_hash": "30c54a01db1666c66b7c75d37cb2f287f1a2cd00",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/30c54a01db1666c66b7c75d37cb2f287f1a2cd00",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "test/shell1.test"
        ],
        "message": "Progress toward adding new output modes to the CLI:  json, table, and markdown.\n\nFossilOrigin-Name: 14f55fafec11491e87e6526c72cf85c689d74ba18418a1ae9646586ec206767a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "test/shell1.test||test/shell1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b5e33ed537e7d7dcabc9f6dc91d6838e0d1657f323440e09e2e24ffa2ba6141a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1035: };",
          "1036: #endif",
          "1050: typedef struct ExpertInfo ExpertInfo;",
          "1051: struct ExpertInfo {",
          "1052:   sqlite3expert *pExpert;",
          "",
          "[Removed Lines]",
          "1042: typedef struct SavedModeInfo SavedModeInfo;",
          "1043: struct SavedModeInfo {",
          "1048: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1216:   \"explain\",",
          "1217:   \"ascii\",",
          "1218:   \"prettyprint\",",
          "1220: };",
          "",
          "[Removed Lines]",
          "1219:   \"eqp\"",
          "",
          "[Added Lines]",
          "1210:   \"eqp\",",
          "1211:   \"json\",",
          "1212:   \"markdown\",",
          "1213:   \"table\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1893: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1893: static void print_dashes(FILE *out, int N){",
          "1894:   const char zDash[] = \"--------------------------------------------------\";",
          "1895:   const int nDash = sizeof(zDash) - 1;",
          "1896:   while( N>nDash ){",
          "1897:     fputs(zDash, out);",
          "1898:     N -= nDash;",
          "1899:   }",
          "1900:   raw_printf(out, \"%.*s\", N, zDash);",
          "1901: }",
          "1906: static void print_row_separator(",
          "1907:   ShellState *p,",
          "1908:   int nArg,",
          "1909:   const char *zSep",
          "1910: ){",
          "1911:   int i;",
          "1912:   for(i=0; i<nArg; i++){",
          "1913:     int w;",
          "1914:     if( i<ArraySize(p->actualWidth) ){",
          "1915:       w = p->actualWidth[i];",
          "1916:       if( w<0 ) w = -w;",
          "1917:     }else{",
          "1918:        w = 10;",
          "1919:     }",
          "1920:     fputs(zSep, p->out);",
          "1921:     print_dashes(p->out, w+2);",
          "1922:   }",
          "1923:   fputs(zSep, p->out);",
          "1924:   fputs(\"\\n\", p->out);",
          "1925: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1923:       }",
          "1924:       break;",
          "1925:     }",
          "1926:     case MODE_Explain:",
          "1927:     case MODE_Column: {",
          "1928:       static const int aExplainWidths[] = {4, 13, 4, 4, 4, 13, 2, 13};",
          "1929:       const int *colWidth;",
          "1930:       int showHdr;",
          "1931:       char *rowSep;",
          "1932:       int nWidth;",
          "1933:       if( p->cMode==MODE_Column ){",
          "1934:         colWidth = p->colWidth;",
          "1935:         nWidth = ArraySize(p->colWidth);",
          "1936:         showHdr = p->showHeader;",
          "1937:         rowSep = p->rowSeparator;",
          "1939:         colWidth = aExplainWidths;",
          "1940:         nWidth = ArraySize(aExplainWidths);",
          "1941:         showHdr = 1;",
          "1942:         rowSep = SEP_Row;",
          "1943:       }",
          "1944:       if( p->cnt++==0 ){",
          "1945:         for(i=0; i<nArg; i++){",
          "",
          "[Removed Lines]",
          "1938:       }else{",
          "",
          "[Added Lines]",
          "1957:     case MODE_Table:",
          "1958:     case MODE_Markdown:",
          "1965:       char *colSep;",
          "1966:       char *rowStart;",
          "1973:         colSep = \"  \";",
          "1974:         rowStart = \"\";",
          "1975:       }else if( p->cMode==MODE_Explain ){",
          "1980:         colSep = \"  \";",
          "1981:         rowStart = \"\";",
          "1982:       }else{",
          "1983:         colWidth = p->colWidth;",
          "1984:         nWidth = ArraySize(p->colWidth);",
          "1985:         showHdr = p->showHeader;",
          "1986:         rowSep = \" |\\n\";",
          "1987:         colSep = \" | \";",
          "1988:         rowStart = \"| \";",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1958:           if( i<ArraySize(p->actualWidth) ){",
          "1959:             p->actualWidth[i] = w;",
          "1960:           }",
          "1965:         }",
          "1966:         if( showHdr ){",
          "1967:           for(i=0; i<nArg; i++){",
          "1968:             int w;",
          "1969:             if( i<ArraySize(p->actualWidth) ){",
          "",
          "[Removed Lines]",
          "1961:           if( showHdr ){",
          "1962:             utf8_width_print(p->out, w, azCol[i]);",
          "1963:             utf8_printf(p->out, \"%s\", i==nArg-1 ? rowSep : \"  \");",
          "1964:           }",
          "",
          "[Added Lines]",
          "2009:           if( p->cMode==MODE_Table ){",
          "2010:             print_row_separator(p, nArg, \"+\");",
          "2011:           }",
          "2012:           fputs(rowStart, p->out);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1972:             }else{",
          "1973:                w = 10;",
          "1974:             }",
          "1979:           }",
          "1980:         }",
          "1981:       }",
          "1982:       if( azArg==0 ) break;",
          "1983:       for(i=0; i<nArg; i++){",
          "1984:         int w;",
          "1985:         if( i<ArraySize(p->actualWidth) ){",
          "",
          "[Removed Lines]",
          "1975:             utf8_printf(p->out,\"%-*.*s%s\",w,w,",
          "1976:                    \"----------------------------------------------------------\"",
          "1977:                    \"----------------------------------------------------------\",",
          "1978:                     i==nArg-1 ? rowSep : \"  \");",
          "",
          "[Added Lines]",
          "2021:             utf8_width_print(p->out, w, azCol[i]);",
          "2022:             fputs(i==nArg-1 ? rowSep : colSep, p->out);",
          "2023:           }",
          "2024:           for(i=0; i<nArg; i++){",
          "2025:             int w;",
          "2026:             if( i<ArraySize(p->actualWidth) ){",
          "2027:                w = p->actualWidth[i];",
          "2028:                if( w<0 ) w = -w;",
          "2029:             }else{",
          "2030:                w = 10;",
          "2031:             }",
          "2032:             if( p->cMode==MODE_Table || p->cMode==MODE_Markdown ){",
          "2033:               char *zX = p->cMode==MODE_Markdown ? \"|\" : \"+\";",
          "2034:               fputs(zX, p->out);",
          "2035:               print_dashes(p->out, w+2);",
          "2036:               if( i==nArg-1 ){",
          "2037:                 fputs(zX, p->out);",
          "2038:                 fputs(\"\\n\", p->out);",
          "2039:               }",
          "2040:             }else{",
          "2041:               print_dashes(p->out, w);",
          "2042:               fputs(i==nArg-1 ? rowSep : colSep, p->out);",
          "2043:             }",
          "2048:       fputs(rowStart, p->out);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1997:           p->iIndent++;",
          "1998:         }",
          "1999:         utf8_width_print(p->out, w, azArg[i] ? azArg[i] : p->nullValue);",
          "2001:       }",
          "2002:       break;",
          "2003:     }",
          "",
          "[Removed Lines]",
          "2000:         utf8_printf(p->out, \"%s\", i==nArg-1 ? rowSep : \"  \");",
          "",
          "[Added Lines]",
          "2066:         utf8_printf(p->out, \"%s\", i==nArg-1 ? rowSep : colSep);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2201:       raw_printf(p->out,\");\\n\");",
          "2202:       break;",
          "2203:     }",
          "2204:     case MODE_Quote: {",
          "2205:       if( azArg==0 ) break;",
          "2206:       if( p->cnt==0 && p->showHeader ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2270:     case MODE_Json: {",
          "2271:       if( azArg==0 ) break;",
          "2272:       if( p->cnt==0 ){",
          "2273:         fputs(\"[{\", p->out);",
          "2274:       }else{",
          "2275:         fputs(\",\\n{\", p->out);",
          "2276:       }",
          "2277:       p->cnt++;",
          "2278:       for(i=0; i<nArg; i++){",
          "2279:         output_c_string(p->out, azCol[i]);",
          "2280:         putc(':', p->out);",
          "2281:         if( (azArg[i]==0) || (aiType && aiType[i]==SQLITE_NULL) ){",
          "2282:           fputs(\"null\",p->out);",
          "2283:         }else if( aiType && aiType[i]==SQLITE_FLOAT ){",
          "2284:           char z[50];",
          "2285:           double r = sqlite3_column_double(p->pStmt, i);",
          "2286:           sqlite3_uint64 ur;",
          "2287:           memcpy(&ur,&r,sizeof(r));",
          "2288:           if( ur==0x7ff0000000000000LL ){",
          "2289:             raw_printf(p->out, \"1e999\");",
          "2290:           }else if( ur==0xfff0000000000000LL ){",
          "2291:             raw_printf(p->out, \"-1e999\");",
          "2292:           }else{",
          "2293:             sqlite3_snprintf(50,z,\"%!.20g\", r);",
          "2294:             raw_printf(p->out, \"%s\", z);",
          "2295:           }",
          "2296:         }else if( aiType && aiType[i]==SQLITE_BLOB && p->pStmt ){",
          "2297:           const void *pBlob = sqlite3_column_blob(p->pStmt, i);",
          "2298:           int nBlob = sqlite3_column_bytes(p->pStmt, i);",
          "2299:           putc('\"', p->out);",
          "2300:           output_hex_blob(p->out, pBlob, nBlob);",
          "2301:           putc('\"', p->out);",
          "2302:         }else if( aiType && aiType[i]==SQLITE_TEXT ){",
          "2303:           output_c_string(p->out, azArg[i]);",
          "2304:         }else{",
          "2305:           utf8_printf(p->out,\"%s\", azArg[i]);",
          "2306:         }",
          "2307:         if( i<nArg-1 ){",
          "2308:           putc(',', p->out);",
          "2309:         }",
          "2310:       }",
          "2311:       putc('}', p->out);",
          "2312:       break;",
          "2313:     }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2890:   sqlite3_finalize(pQ);",
          "2891: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3003: #if 0",
          "3013: static void exec_prepared_stmt_tablemode(",
          "3016: ){",
          "3018: }",
          "3019: #endif",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2946:         }",
          "2947:       } while( SQLITE_ROW == rc );",
          "2948:       sqlite3_free(pData);",
          "2949:     }",
          "2950:   }",
          "2951: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3077:       if( pArg->cMode==MODE_Table ){",
          "3078:         print_row_separator(pArg, nCol, \"+\");",
          "3079:       }else if( pArg->cMode==MODE_Json ){",
          "3080:         fputs(\"]\\n\", pArg->out);",
          "3081:       }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "8224:       p->mode = MODE_Ascii;",
          "8225:       sqlite3_snprintf(sizeof(p->colSeparator), p->colSeparator, SEP_Unit);",
          "8226:       sqlite3_snprintf(sizeof(p->rowSeparator), p->rowSeparator, SEP_Record);",
          "8227:     }else if( nArg==1 ){",
          "8228:       raw_printf(p->out, \"current output mode: %s\\n\", modeDescr[p->mode]);",
          "8229:     }else{",
          "8230:       raw_printf(stderr, \"Error: mode should be one of: \"",
          "8232:       rc = 1;",
          "8233:     }",
          "8234:     p->cMode = p->mode;",
          "",
          "[Removed Lines]",
          "8231:          \"ascii column csv html insert line list quote tabs tcl\\n\");",
          "",
          "[Added Lines]",
          "8360:     }else if( c2=='m' && strncmp(azArg[1],\"markdown\",n2)==0 ){",
          "8361:       p->mode = MODE_Markdown;",
          "8362:     }else if( c2=='t' && strncmp(azArg[1],\"table\",n2)==0 ){",
          "8363:       p->mode = MODE_Table;",
          "8364:     }else if( c2=='j' && strncmp(azArg[1],\"json\",n2)==0 ){",
          "8365:       p->mode = MODE_Json;",
          "8370:          \"ascii column csv html insert json line list markdown \"",
          "8371:          \"quote table tabs tcl\\n\");",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "10238:   \"   -help                show this message\\n\"",
          "10239:   \"   -html                set output mode to HTML\\n\"",
          "10240:   \"   -interactive         force interactive I/O\\n\"",
          "10241:   \"   -line                set output mode to 'line'\\n\"",
          "10242:   \"   -list                set output mode to 'list'\\n\"",
          "10243:   \"   -lookaside SIZE N    use N entries of SZ bytes for lookaside memory\\n\"",
          "10244: #if defined(SQLITE_ENABLE_DESERIALIZE)",
          "10245:   \"   -maxsize N           maximum size for a --deserialize database\\n\"",
          "10246: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10381:   \"   -json                set output mode to 'json'\\n\"",
          "10385:   \"   -markdown            set output mode to 'markdown'\\n\"",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "10260:   \"   -sorterref SIZE      sorter references threshold size\\n\"",
          "10261: #endif",
          "10262:   \"   -stats               print memory stats before each finalize\\n\"",
          "10263:   \"   -version             show SQLite version\\n\"",
          "10264:   \"   -vfs NAME            use NAME as the default VFS\\n\"",
          "10265: #ifdef SQLITE_ENABLE_VFSTRACE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10405:   \"   -table               set output mode to 'table'\\n\"",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "10661:       data.mode = MODE_Line;",
          "10662:     }else if( strcmp(z,\"-column\")==0 ){",
          "10663:       data.mode = MODE_Column;",
          "10664:     }else if( strcmp(z,\"-csv\")==0 ){",
          "10665:       data.mode = MODE_Csv;",
          "10666:       memcpy(data.colSeparator,\",\",2);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10807:     }else if( strcmp(z,\"-json\")==0 ){",
          "10808:       data.mode = MODE_Json;",
          "10809:     }else if( strcmp(z,\"-markdown\")==0 ){",
          "10810:       data.mode = MODE_Markdown;",
          "10811:     }else if( strcmp(z,\"-table\")==0 ){",
          "10812:       data.mode = MODE_Table;",
          "",
          "---------------"
        ],
        "test/shell1.test||test/shell1.test": [
          "File: test/shell1.test -> test/shell1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "199: } {0 {}}",
          "200: do_test shell1-2.2.5 {",
          "201:   catchcmd \"test.db\" \".mode \\\"insert FOO\"",
          "203: do_test shell1-2.2.6 {",
          "204:   catchcmd \"test.db\" \".mode \\'insert FOO\"",
          "207: # check multiple tokens, and quoted tokens",
          "208: do_test shell1-2.3.1 {",
          "",
          "[Removed Lines]",
          "202: } {1 {Error: mode should be one of: ascii column csv html insert line list quote tabs tcl}}",
          "205: } {1 {Error: mode should be one of: ascii column csv html insert line list quote tabs tcl}}",
          "",
          "[Added Lines]",
          "202: } {1 {Error: mode should be one of: ascii column csv html insert json line list markdown quote table tabs tcl}}",
          "205: } {1 {Error: mode should be one of: ascii column csv html insert json line list markdown quote table tabs tcl}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "230: # check quoted args are unquoted",
          "231: do_test shell1-2.4.1 {",
          "232:   catchcmd \"test.db\" \".mode FOO\"",
          "234: do_test shell1-2.4.2 {",
          "235:   catchcmd \"test.db\" \".mode csv\"",
          "236: } {0 {}}",
          "",
          "[Removed Lines]",
          "233: } {1 {Error: mode should be one of: ascii column csv html insert line list quote tabs tcl}}",
          "",
          "[Added Lines]",
          "233: } {1 {Error: mode should be one of: ascii column csv html insert json line list markdown quote table tabs tcl}}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "430: } {0 {current output mode: list}}",
          "431: do_test shell1-3.13.2 {",
          "432:   catchcmd \"test.db\" \".mode FOO\"",
          "434: do_test shell1-3.13.3 {",
          "435:   catchcmd \"test.db\" \".mode csv\"",
          "436: } {0 {}}",
          "",
          "[Removed Lines]",
          "433: } {1 {Error: mode should be one of: ascii column csv html insert line list quote tabs tcl}}",
          "",
          "[Added Lines]",
          "433: } {1 {Error: mode should be one of: ascii column csv html insert json line list markdown quote table tabs tcl}}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "463: # don't allow partial mode type matches",
          "464: do_test shell1-3.13.12 {",
          "465:   catchcmd \"test.db\" \".mode l\"",
          "467: do_test shell1-3.13.13 {",
          "468:   catchcmd \"test.db\" \".mode li\"",
          "470: do_test shell1-3.13.14 {",
          "471:   catchcmd \"test.db\" \".mode lin\"",
          "472: } {0 {}}",
          "",
          "[Removed Lines]",
          "466: } {1 {Error: mode should be one of: ascii column csv html insert line list quote tabs tcl}}",
          "469: } {1 {Error: mode should be one of: ascii column csv html insert line list quote tabs tcl}}",
          "",
          "[Added Lines]",
          "466: } {1 {Error: mode should be one of: ascii column csv html insert json line list markdown quote table tabs tcl}}",
          "469: } {1 {Error: mode should be one of: ascii column csv html insert json line list markdown quote table tabs tcl}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}