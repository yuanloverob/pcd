{
  "cve_id": "CVE-2014-3470",
  "cve_desc": "The ssl3_send_client_key_exchange function in s3_clnt.c in OpenSSL before 0.9.8za, 1.0.0 before 1.0.0m, and 1.0.1 before 1.0.1h, when an anonymous ECDH cipher suite is used, allows remote attackers to cause a denial of service (NULL pointer dereference and client crash) by triggering a NULL certificate value.",
  "repo": "openssl/openssl",
  "patch_hash": "a5362db4603910b1bb978163e0e7dc8890727300",
  "patch_info": {
    "commit_hash": "a5362db4603910b1bb978163e0e7dc8890727300",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/a5362db4603910b1bb978163e0e7dc8890727300",
    "files": [
      "ssl/s3_clnt.c"
    ],
    "message": "Fix CVE-2014-3470\n\nCheck session_cert is not NULL before dereferencing it.\n(cherry picked from commit 8011cd56e39a433b1837465259a9bd24a38727fb)",
    "before_after_code_files": [
      "ssl/s3_clnt.c||ssl/s3_clnt.c"
    ]
  },
  "patch_diff": {
    "ssl/s3_clnt.c||ssl/s3_clnt.c": [
      "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2712:    int ecdh_clnt_cert = 0;",
      "2713:    int field_size = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2715:    if (s->session->sess_cert == NULL)",
      "2716:     {",
      "2717:     ssl3_send_alert(s,SSL3_AL_FATAL,SSL_AD_UNEXPECTED_MESSAGE);",
      "2718:     SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,SSL_R_UNEXPECTED_MESSAGE);",
      "2719:     goto err;",
      "2720:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8011cd56e39a433b1837465259a9bd24a38727fb",
      "candidate_info": {
        "commit_hash": "8011cd56e39a433b1837465259a9bd24a38727fb",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/8011cd56e39a433b1837465259a9bd24a38727fb",
        "files": [
          "ssl/s3_clnt.c"
        ],
        "message": "Fix CVE-2014-3470\n\nCheck session_cert is not NULL before dereferencing it.",
        "before_after_code_files": [
          "ssl/s3_clnt.c||ssl/s3_clnt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ],
          "candidate": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2512:    int ecdh_clnt_cert = 0;",
          "2513:    int field_size = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2515:    if (s->session->sess_cert == NULL)",
          "2516:     {",
          "2517:     ssl3_send_alert(s,SSL3_AL_FATAL,SSL_AD_UNEXPECTED_MESSAGE);",
          "2518:     SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,SSL_R_UNEXPECTED_MESSAGE);",
          "2519:     goto err;",
          "2520:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e5f706590c7b1f19ca34415593aebdb6cbef355b",
      "candidate_info": {
        "commit_hash": "e5f706590c7b1f19ca34415593aebdb6cbef355b",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/e5f706590c7b1f19ca34415593aebdb6cbef355b",
        "files": [
          "ssl/s3_clnt.c"
        ],
        "message": "Fix CVE-2014-3470\n\nCheck session_cert is not NULL before dereferencing it.\n(cherry picked from commit 8011cd56e39a433b1837465259a9bd24a38727fb)",
        "before_after_code_files": [
          "ssl/s3_clnt.c||ssl/s3_clnt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ],
          "candidate": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2689:    int ecdh_clnt_cert = 0;",
          "2690:    int field_size = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2692:    if (s->session->sess_cert == NULL)",
          "2693:     {",
          "2694:     ssl3_send_alert(s,SSL3_AL_FATAL,SSL_AD_UNEXPECTED_MESSAGE);",
          "2695:     SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,SSL_R_UNEXPECTED_MESSAGE);",
          "2696:     goto err;",
          "2697:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c660ec63a83090051f3e110b00bd5753f21bce51",
      "candidate_info": {
        "commit_hash": "c660ec63a83090051f3e110b00bd5753f21bce51",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/c660ec63a83090051f3e110b00bd5753f21bce51",
        "files": [
          "ssl/s3_clnt.c",
          "ssl/ssl_cert.c",
          "ssl/ssl_locl.h"
        ],
        "message": "Rewrite ssl3_send_client_key_exchange to support extms.\n\nRewrite ssl3_send_client_key_exchange to retain the premaster secret\ninstead of using it immediately.\n\nThis is needed because the premaster secret is used after the client key\nexchange message has been sent to compute the extended master secret.\nReviewed-by: Tim Hudson <tjh@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "ssl/s3_clnt.c||ssl/s3_clnt.c",
          "ssl/ssl_cert.c||ssl/ssl_cert.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ],
          "candidate": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2338:     int encoded_pt_len = 0;",
          "2339:     BN_CTX *bn_ctx = NULL;",
          "2340: #endif",
          "2342:     if (s->state == SSL3_ST_CW_KEY_EXCH_A) {",
          "2343:         p = ssl_handshake_start(s);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2341:     unsigned char *pms = NULL;",
          "2342:     size_t pmslen = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2350: #ifndef OPENSSL_NO_RSA",
          "2351:         else if (alg_k & SSL_kRSA) {",
          "2352:             RSA *rsa;",
          "2355:             if (s->session->sess_cert == NULL) {",
          "",
          "[Removed Lines]",
          "2353:             unsigned char tmp_buf[SSL_MAX_MASTER_KEY_LENGTH];",
          "",
          "[Added Lines]",
          "2355:             pmslen = SSL_MAX_MASTER_KEY_LENGTH;",
          "2356:             pms = OPENSSL_malloc(pmslen);",
          "2357:             if (!pms)",
          "2358:                 goto memerr;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2378:                 EVP_PKEY_free(pkey);",
          "2379:             }",
          "2384:                 goto err;",
          "2388:             q = p;",
          "2390:             if (s->version > SSL3_VERSION)",
          "2391:                 p += 2;",
          "2394: # ifdef PKCS1_CHECK",
          "2395:             if (s->options & SSL_OP_PKCS1_CHECK_1)",
          "2396:                 p[1]++;",
          "",
          "[Removed Lines]",
          "2381:             tmp_buf[0] = s->client_version >> 8;",
          "2382:             tmp_buf[1] = s->client_version & 0xff;",
          "2383:             if (RAND_bytes(&(tmp_buf[2]), sizeof tmp_buf - 2) <= 0)",
          "2386:             s->session->master_key_length = sizeof tmp_buf;",
          "2392:             n = RSA_public_encrypt(sizeof tmp_buf,",
          "2393:                                    tmp_buf, p, rsa, RSA_PKCS1_PADDING);",
          "",
          "[Added Lines]",
          "2386:             pms[0] = s->client_version >> 8;",
          "2387:             pms[1] = s->client_version & 0xff;",
          "2388:             if (RAND_bytes(pms + 2, pmslen - 2) <= 0)",
          "2395:             n = RSA_public_encrypt(pmslen, pms, p, rsa, RSA_PKCS1_PADDING);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2408:                 s2n(n, q);",
          "2409:                 n += 2;",
          "2410:             }",
          "2419:         }",
          "2420: #endif",
          "2421: #ifndef OPENSSL_NO_KRB5",
          "",
          "[Removed Lines]",
          "2412:             s->session->master_key_length =",
          "2413:                 s->method->ssl3_enc->generate_master_secret(s,",
          "2414:                                                             s->",
          "2415:                                                             session->master_key,",
          "2416:                                                             tmp_buf,",
          "2417:                                                             sizeof tmp_buf);",
          "2418:             OPENSSL_cleanse(tmp_buf, sizeof tmp_buf);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2505:                 n += 2;",
          "2506:             }",
          "2511:                 goto err;",
          "",
          "[Removed Lines]",
          "2508:             tmp_buf[0] = s->client_version >> 8;",
          "2509:             tmp_buf[1] = s->client_version & 0xff;",
          "2510:             if (RAND_bytes(&(tmp_buf[2]), sizeof tmp_buf - 2) <= 0)",
          "",
          "[Added Lines]",
          "2502:             pmslen = SSL_MAX_MASTER_KEY_LENGTH;",
          "2503:             pms = OPENSSL_malloc(pmslen);",
          "2504:             if (!pms)",
          "2505:                 goto memerr;",
          "2507:             pms[0] = s->client_version >> 8;",
          "2508:             pms[1] = s->client_version & 0xff;",
          "2509:             if (RAND_bytes(pms + 2, pmslen - 2) <= 0)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2522:             EVP_EncryptInit_ex(&ciph_ctx, enc, NULL, kssl_ctx->key, iv);",
          "2525:             EVP_EncryptFinal_ex(&ciph_ctx, &(epms[outl]), &padl);",
          "2526:             outl += padl;",
          "2527:             if (outl > (int)sizeof epms) {",
          "",
          "[Removed Lines]",
          "2523:             EVP_EncryptUpdate(&ciph_ctx, epms, &outl, tmp_buf,",
          "2524:                               sizeof tmp_buf);",
          "",
          "[Added Lines]",
          "2522:             EVP_EncryptUpdate(&ciph_ctx, epms, &outl, pms, pmslen);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2536:             memcpy(p, epms, outl);",
          "2537:             p += outl;",
          "2538:             n += outl + 2;",
          "2548:             OPENSSL_cleanse(epms, outl);",
          "2549:         }",
          "2550: #endif",
          "",
          "[Removed Lines]",
          "2540:             s->session->master_key_length =",
          "2541:                 s->method->ssl3_enc->generate_master_secret(s,",
          "2542:                                                             s->",
          "2543:                                                             session->master_key,",
          "2544:                                                             tmp_buf,",
          "2545:                                                             sizeof tmp_buf);",
          "2547:             OPENSSL_cleanse(tmp_buf, sizeof tmp_buf);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2603:                 }",
          "2604:             }",
          "2612:             if (scert->peer_dh_tmp == NULL)",
          "2613:                 DH_free(dh_srvr);",
          "",
          "[Removed Lines]",
          "2611:             n = DH_compute_key(p, dh_srvr->pub_key, dh_clnt);",
          "",
          "[Added Lines]",
          "2595:             pmslen = DH_size(dh_clnt);",
          "2596:             pms = OPENSSL_malloc(pmslen);",
          "2597:             if (!pms)",
          "2598:                 goto memerr;",
          "2605:             n = DH_compute_key(pms, dh_srvr->pub_key, dh_clnt);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2618:                 goto err;",
          "2619:             }",
          "2630:             if (s->s3->flags & TLS1_FLAGS_SKIP_CERT_VERIFY)",
          "2631:                 n = 0;",
          "2632:             else {",
          "",
          "[Removed Lines]",
          "2622:             s->session->master_key_length =",
          "2623:                 s->method->ssl3_enc->generate_master_secret(s,",
          "2624:                                                             s->",
          "2625:                                                             session->master_key,",
          "2626:                                                             p, n);",
          "2628:             memset(p, 0, n);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2758:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE, ERR_R_ECDH_LIB);",
          "2759:                 goto err;",
          "2760:             }",
          "2764:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE, ERR_R_ECDH_LIB);",
          "2765:                 goto err;",
          "2766:             }",
          "2777:             if (ecdh_clnt_cert) {",
          "2779:                 n = 0;",
          "",
          "[Removed Lines]",
          "2761:             n = ECDH_compute_key(p, (field_size + 7) / 8, srvr_ecpoint,",
          "2762:                                  clnt_ecdh, NULL);",
          "2763:             if (n <= 0) {",
          "2769:             s->session->master_key_length =",
          "2770:                 s->method->ssl3_enc->generate_master_secret(s,",
          "2771:                                                             s->",
          "2772:                                                             session->master_key,",
          "2773:                                                             p, n);",
          "",
          "[Added Lines]",
          "2746:             pmslen = (field_size + 7) / 8;",
          "2747:             pms = OPENSSL_malloc(pmslen);",
          "2748:             if (!pms)",
          "2749:                 goto memerr;",
          "2750:             n = ECDH_compute_key(pms, pmslen, srvr_ecpoint, clnt_ecdh, NULL);",
          "2751:             if (n <= 0 || pmslen != (size_t)n) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2828:             size_t msglen;",
          "2829:             unsigned int md_len;",
          "2830:             int keytype;",
          "2832:             EVP_MD_CTX *ukm_hash;",
          "2833:             EVP_PKEY *pub_key;",
          "",
          "[Removed Lines]",
          "2831:             unsigned char premaster_secret[32], shared_ukm[32], tmp[256];",
          "",
          "[Added Lines]",
          "2810:             unsigned char shared_ukm[32], tmp[256];",
          "2814:             pmslen = 32;",
          "2815:             pms = OPENSSL_malloc(pmslen);",
          "2816:             if (!pms)",
          "2817:                 goto memerr;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2862:             EVP_PKEY_encrypt_init(pkey_ctx);",
          "",
          "[Removed Lines]",
          "2864:             RAND_bytes(premaster_secret, 32);",
          "",
          "[Added Lines]",
          "2848:             RAND_bytes(pms, pmslen);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2903:             msglen = 255;",
          "2906:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2907:                        SSL_R_LIBRARY_BUG);",
          "2908:                 goto err;",
          "",
          "[Removed Lines]",
          "2904:             if (EVP_PKEY_encrypt(pkey_ctx, tmp, &msglen, premaster_secret, 32)",
          "2905:                 < 0) {",
          "",
          "[Added Lines]",
          "2888:             if (EVP_PKEY_encrypt(pkey_ctx, tmp, &msglen, pms, pmslen) < 0) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2923:                 s->s3->flags |= TLS1_FLAGS_SKIP_CERT_VERIFY;",
          "2924:             }",
          "2925:             EVP_PKEY_CTX_free(pkey_ctx);",
          "2932:             EVP_PKEY_free(pub_key);",
          "2934:         }",
          "",
          "[Removed Lines]",
          "2926:             s->session->master_key_length =",
          "2927:                 s->method->ssl3_enc->generate_master_secret(s,",
          "2928:                                                             s->",
          "2929:                                                             session->master_key,",
          "2930:                                                             premaster_secret,",
          "2931:                                                             32);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2953:                        ERR_R_MALLOC_FAILURE);",
          "2954:                 goto err;",
          "2955:             }",
          "2965:         }",
          "2966: #endif",
          "2967: #ifndef OPENSSL_NO_PSK",
          "",
          "[Removed Lines]",
          "2957:             if ((s->session->master_key_length =",
          "2958:                  SRP_generate_client_master_secret(s,",
          "2959:                                                    s->session->master_key)) <",
          "2960:                 0) {",
          "2961:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2962:                        ERR_R_INTERNAL_ERROR);",
          "2963:                 goto err;",
          "2964:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2974:             char identity[PSK_MAX_IDENTITY_LEN + 2];",
          "2975:             size_t identity_len;",
          "2976:             unsigned char *t = NULL;",
          "2979:             int psk_err = 1;",
          "2981:             n = 0;",
          "",
          "[Removed Lines]",
          "2977:             unsigned char psk_or_pre_ms[PSK_MAX_PSK_LEN * 2 + 4];",
          "2978:             unsigned int pre_ms_len = 0, psk_len = 0;",
          "",
          "[Added Lines]",
          "2945:             unsigned int psk_len = 0;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2986:             }",
          "2988:             memset(identity, 0, sizeof(identity));",
          "2989:             psk_len = s->psk_client_callback(s, s->ctx->psk_identity_hint,",
          "2990:                                              identity, sizeof(identity) - 1,",
          "2993:             if (psk_len > PSK_MAX_PSK_LEN) {",
          "2994:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2995:                        ERR_R_INTERNAL_ERROR);",
          "",
          "[Removed Lines]",
          "2991:                                              psk_or_pre_ms,",
          "2992:                                              sizeof(psk_or_pre_ms));",
          "",
          "[Added Lines]",
          "2957:             pmslen = PSK_MAX_PSK_LEN * 2 + 4;",
          "2958:             pms = OPENSSL_malloc(pmslen);",
          "2959:             if (!pms)",
          "2960:                 goto memerr;",
          "2964:                                              pms, pmslen);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2999:                        SSL_R_PSK_IDENTITY_NOT_FOUND);",
          "3000:                 goto psk_err;",
          "3001:             }",
          "3002:             identity[PSK_MAX_IDENTITY_LEN + 1] = '\\0';",
          "3003:             identity_len = strlen(identity);",
          "3004:             if (identity_len > PSK_MAX_IDENTITY_LEN) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2975:             pmslen = 2 + psk_len + 2 + psk_len;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3007:                 goto psk_err;",
          "3008:             }",
          "3013:             s2n(psk_len, t);",
          "3014:             memset(t, 0, psk_len);",
          "3015:             t += psk_len;",
          "",
          "[Removed Lines]",
          "3010:             pre_ms_len = 2 + psk_len + 2 + psk_len;",
          "3011:             t = psk_or_pre_ms;",
          "3012:             memmove(psk_or_pre_ms + psk_len + 4, psk_or_pre_ms, psk_len);",
          "",
          "[Added Lines]",
          "2984:             t = pms;",
          "2985:             memmove(pms + psk_len + 4, pms, psk_len);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "3035:                 goto psk_err;",
          "3036:             }",
          "3044:             s2n(identity_len, p);",
          "3045:             memcpy(p, identity, identity_len);",
          "3046:             n = 2 + identity_len;",
          "3047:             psk_err = 0;",
          "3048:  psk_err:",
          "3049:             OPENSSL_cleanse(identity, sizeof(identity));",
          "3051:             if (psk_err != 0) {",
          "3052:                 ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_HANDSHAKE_FAILURE);",
          "3053:                 goto err;",
          "",
          "[Removed Lines]",
          "3038:             s->session->master_key_length =",
          "3039:                 s->method->ssl3_enc->generate_master_secret(s,",
          "3040:                                                             s->",
          "3041:                                                             session->master_key,",
          "3042:                                                             psk_or_pre_ms,",
          "3043:                                                             pre_ms_len);",
          "3050:             OPENSSL_cleanse(psk_or_pre_ms, sizeof(psk_or_pre_ms));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "3065:     }",
          "3069:  err:",
          "3070: #ifndef OPENSSL_NO_ECDH",
          "3071:     BN_CTX_free(bn_ctx);",
          "3072:     if (encodedPoint != NULL)",
          "",
          "[Removed Lines]",
          "3068:     return ssl_do_write(s);",
          "",
          "[Added Lines]",
          "3034:     n = ssl_do_write(s);",
          "3035: #ifndef OPENSSL_NO_SRP",
          "3037:     if (s->s3->tmp.new_cipher->algorithm_mkey & SSL_kSRP) {",
          "3042:         if (n > 0) {",
          "3043:             if ((s->session->master_key_length =",
          "3044:                  SRP_generate_client_master_secret(s,",
          "3045:                                                    s->session->master_key)) <",
          "3046:                 0) {",
          "3047:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "3048:                        ERR_R_INTERNAL_ERROR);",
          "3049:                 goto err;",
          "3050:             }",
          "3051:         }",
          "3052:     } else",
          "3053: #endif",
          "3055:     if (n <= 0) {",
          "3056:         s->cert->pms = pms;",
          "3057:         s->cert->pmslen = pmslen;",
          "3058:     } else {",
          "3060:         if (pms == NULL) {",
          "3061:             pms = s->cert->pms;",
          "3062:             pmslen = s->cert->pmslen;",
          "3063:         }",
          "3064:         if (pms == NULL) {",
          "3065:             ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_INTERNAL_ERROR);",
          "3066:             SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE, ERR_R_MALLOC_FAILURE);",
          "3067:             goto err;",
          "3068:         }",
          "3069:         s->session->master_key_length =",
          "3070:             s->method->ssl3_enc->generate_master_secret(s,",
          "3071:                                                         s->",
          "3072:                                                         session->master_key,",
          "3073:                                                         pms, pmslen);",
          "3074:         OPENSSL_cleanse(pms, pmslen);",
          "3075:         OPENSSL_free(pms);",
          "3076:         s->cert->pms = NULL;",
          "3077:     }",
          "3078:     return n;",
          "3079:  memerr:",
          "3080:     ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_INTERNAL_ERROR);",
          "3081:     SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE, ERR_R_MALLOC_FAILURE);",
          "3083:     if (pms) {",
          "3084:         OPENSSL_cleanse(pms, pmslen);",
          "3085:         OPENSSL_free(pms);",
          "3086:         s->cert->pms = NULL;",
          "3087:     }",
          "",
          "---------------"
        ],
        "ssl/ssl_cert.c||ssl/ssl_cert.c": [
          "File: ssl/ssl_cert.c -> ssl/ssl_cert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "476:     custom_exts_free(&c->cli_ext);",
          "477:     custom_exts_free(&c->srv_ext);",
          "478: #endif",
          "479:     OPENSSL_free(c);",
          "480: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "479:     if (c->pms) {",
          "480:         OPENSSL_cleanse(c->pms, c->pmslen);",
          "481:         OPENSSL_free(c->pms);",
          "482:         c->pms = NULL;",
          "483:     }",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1680:     unsigned char *ctypes;",
          "1681:     size_t ctype_num;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1683:     unsigned char *pms;",
          "1684:     size_t pmslen;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8fdc3734c063146b038608c2412a0f2c9b21b6d6",
      "candidate_info": {
        "commit_hash": "8fdc3734c063146b038608c2412a0f2c9b21b6d6",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/8fdc3734c063146b038608c2412a0f2c9b21b6d6",
        "files": [
          "apps/ec.c",
          "apps/ecparam.c",
          "apps/speed.c",
          "crypto/ec/ec2_mult.c",
          "crypto/ec/ec_ameth.c",
          "crypto/ec/ec_asn1.c",
          "crypto/ec/ec_check.c",
          "crypto/ec/ec_curve.c",
          "crypto/ec/ec_key.c",
          "crypto/ec/ec_lib.c",
          "crypto/ec/ec_mult.c",
          "crypto/ec/ec_pmeth.c",
          "crypto/ec/ec_print.c",
          "crypto/ec/ecp_nistp224.c",
          "crypto/ec/ecp_nistp256.c",
          "crypto/ec/ecp_nistp521.c",
          "crypto/ec/ecp_nistz256.c",
          "crypto/ec/ectest.c",
          "crypto/ecdh/ecdhtest.c",
          "crypto/ecdh/ech_ossl.c",
          "crypto/ecdsa/ecdsatest.c",
          "crypto/ecdsa/ecs_ossl.c",
          "doc/crypto/EC_GROUP_new.pod",
          "doc/crypto/EC_KEY_new.pod",
          "doc/crypto/EC_POINT_new.pod",
          "engines/ccgost/gost_ameth.c",
          "ssl/s3_clnt.c",
          "ssl/s3_lib.c",
          "ssl/s3_srvr.c",
          "ssl/ssl_cert.c"
        ],
        "message": "free NULL cleanup.\n\nThis gets EC_GROUP_clear_free EC_GROUP_free, EC_KEY_free,\nEC_POINT_clear_free, EC_POINT_free\n\nReviewed-by: Kurt Roeckx <kurt@openssl.org>",
        "before_after_code_files": [
          "apps/ec.c||apps/ec.c",
          "apps/ecparam.c||apps/ecparam.c",
          "apps/speed.c||apps/speed.c",
          "crypto/ec/ec2_mult.c||crypto/ec/ec2_mult.c",
          "crypto/ec/ec_ameth.c||crypto/ec/ec_ameth.c",
          "crypto/ec/ec_asn1.c||crypto/ec/ec_asn1.c",
          "crypto/ec/ec_check.c||crypto/ec/ec_check.c",
          "crypto/ec/ec_curve.c||crypto/ec/ec_curve.c",
          "crypto/ec/ec_key.c||crypto/ec/ec_key.c",
          "crypto/ec/ec_lib.c||crypto/ec/ec_lib.c",
          "crypto/ec/ec_mult.c||crypto/ec/ec_mult.c",
          "crypto/ec/ec_pmeth.c||crypto/ec/ec_pmeth.c",
          "crypto/ec/ec_print.c||crypto/ec/ec_print.c",
          "crypto/ec/ecp_nistp224.c||crypto/ec/ecp_nistp224.c",
          "crypto/ec/ecp_nistp256.c||crypto/ec/ecp_nistp256.c",
          "crypto/ec/ecp_nistp521.c||crypto/ec/ecp_nistp521.c",
          "crypto/ec/ecp_nistz256.c||crypto/ec/ecp_nistz256.c",
          "crypto/ec/ectest.c||crypto/ec/ectest.c",
          "crypto/ecdh/ecdhtest.c||crypto/ecdh/ecdhtest.c",
          "crypto/ecdh/ech_ossl.c||crypto/ecdh/ech_ossl.c",
          "crypto/ecdsa/ecdsatest.c||crypto/ecdsa/ecdsatest.c",
          "crypto/ecdsa/ecs_ossl.c||crypto/ecdsa/ecs_ossl.c",
          "engines/ccgost/gost_ameth.c||engines/ccgost/gost_ameth.c",
          "ssl/s3_clnt.c||ssl/s3_clnt.c",
          "ssl/s3_lib.c||ssl/s3_lib.c",
          "ssl/s3_srvr.c||ssl/s3_srvr.c",
          "ssl/ssl_cert.c||ssl/ssl_cert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ],
          "candidate": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ]
        }
      },
      "candidate_diff": {
        "apps/ec.c||apps/ec.c": [
          "File: apps/ec.c -> apps/ec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "345:  end:",
          "346:     BIO_free(in);",
          "347:     BIO_free_all(out);",
          "350:     if (passin)",
          "351:         OPENSSL_free(passin);",
          "352:     if (passout)",
          "",
          "[Removed Lines]",
          "348:     if (eckey)",
          "349:         EC_KEY_free(eckey);",
          "",
          "[Added Lines]",
          "348:     EC_KEY_free(eckey);",
          "",
          "---------------"
        ],
        "apps/ecparam.c||apps/ecparam.c": [
          "File: apps/ecparam.c -> apps/ecparam.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "623:         OPENSSL_free(buffer);",
          "624:     BIO_free(in);",
          "625:     BIO_free_all(out);",
          "628:     apps_shutdown();",
          "629:     OPENSSL_EXIT(ret);",
          "630: }",
          "",
          "[Removed Lines]",
          "626:     if (group != NULL)",
          "627:         EC_GROUP_free(group);",
          "",
          "[Added Lines]",
          "626:     EC_GROUP_free(group);",
          "",
          "---------------"
        ],
        "apps/speed.c||apps/speed.c": [
          "File: apps/speed.c -> apps/speed.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2458: #ifndef OPENSSL_NO_EC",
          "2459:     for (i = 0; i < EC_NUM; i++)",
          "2462:     for (i = 0; i < EC_NUM; i++) {",
          "2467:     }",
          "2468: #endif",
          "",
          "[Removed Lines]",
          "2460:         if (ecdsa[i] != NULL)",
          "2461:             EC_KEY_free(ecdsa[i]);",
          "2463:         if (ecdh_a[i] != NULL)",
          "2464:             EC_KEY_free(ecdh_a[i]);",
          "2465:         if (ecdh_b[i] != NULL)",
          "2466:             EC_KEY_free(ecdh_b[i]);",
          "",
          "[Added Lines]",
          "2460:         EC_KEY_free(ecdsa[i]);",
          "2462:         EC_KEY_free(ecdh_a[i]);",
          "2463:         EC_KEY_free(ecdh_b[i]);",
          "",
          "---------------"
        ],
        "crypto/ec/ec2_mult.c||crypto/ec/ec2_mult.c": [
          "File: crypto/ec/ec2_mult.c -> crypto/ec/ec2_mult.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "437:     ret = 1;",
          "439:  err:",
          "444:     if (new_ctx != NULL)",
          "445:         BN_CTX_free(new_ctx);",
          "446:     return ret;",
          "",
          "[Removed Lines]",
          "440:     if (p)",
          "441:         EC_POINT_free(p);",
          "442:     if (acc)",
          "443:         EC_POINT_free(acc);",
          "",
          "[Added Lines]",
          "440:     EC_POINT_free(p);",
          "441:     EC_POINT_free(acc);",
          "",
          "---------------"
        ],
        "crypto/ec/ec_ameth.c||crypto/ec/ec_ameth.c": [
          "File: crypto/ec/ec_ameth.c -> crypto/ec/ec_ameth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:     return eckey;",
          "178:  ecerr:",
          "181:     return NULL;",
          "182: }",
          "",
          "[Removed Lines]",
          "179:     if (eckey)",
          "180:         EC_KEY_free(eckey);",
          "",
          "[Added Lines]",
          "179:     EC_KEY_free(eckey);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "210:     return 1;",
          "212:  ecerr:",
          "215:     return 0;",
          "216: }",
          "",
          "[Removed Lines]",
          "213:     if (eckey)",
          "214:         EC_KEY_free(eckey);",
          "",
          "[Added Lines]",
          "212:     EC_KEY_free(eckey);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "292:  ecliberr:",
          "293:     ECerr(EC_F_ECKEY_PRIV_DECODE, ERR_R_EC_LIB);",
          "294:  ecerr:",
          "297:     return 0;",
          "298: }",
          "",
          "[Removed Lines]",
          "295:     if (eckey)",
          "296:         EC_KEY_free(eckey);",
          "",
          "[Added Lines]",
          "293:     EC_KEY_free(eckey);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "706:     if (EVP_PKEY_derive_set_peer(pctx, pkpeer) > 0)",
          "707:         rv = 1;",
          "708:  err:",
          "711:     if (pkpeer)",
          "712:         EVP_PKEY_free(pkpeer);",
          "713:     return rv;",
          "",
          "[Removed Lines]",
          "709:     if (ecpeer)",
          "710:         EC_KEY_free(ecpeer);",
          "",
          "[Added Lines]",
          "706:     EC_KEY_free(ecpeer);",
          "",
          "---------------"
        ],
        "crypto/ec/ec_asn1.c||crypto/ec/ec_asn1.c": [
          "File: crypto/ec/ec_asn1.c -> crypto/ec/ec_asn1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "911:     ok = 1;",
          "916:         ret = NULL;",
          "917:     }",
          "",
          "[Removed Lines]",
          "913:  err:if (!ok) {",
          "914:         if (ret)",
          "915:             EC_GROUP_clear_free(ret);",
          "",
          "[Added Lines]",
          "913:  err:",
          "914:     if (!ok) {",
          "915:         EC_GROUP_clear_free(ret);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "922:         BN_free(a);",
          "923:     if (b)",
          "924:         BN_free(b);",
          "927:     return (ret);",
          "928: }",
          "",
          "[Removed Lines]",
          "925:     if (point)",
          "926:         EC_POINT_free(point);",
          "",
          "[Added Lines]",
          "925:     EC_POINT_free(point);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "982:         return NULL;",
          "983:     }",
          "986:         EC_GROUP_clear_free(*a);",
          "990:     ECPKPARAMETERS_free(params);",
          "991:     return (group);",
          "",
          "[Removed Lines]",
          "985:     if (a && *a)",
          "987:     if (a)",
          "",
          "[Added Lines]",
          "984:     if (a) {",
          "987:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1030:         ret = *a;",
          "1032:     if (priv_key->parameters) {",
          "1035:         ret->group = ec_asn1_pkparameters2group(priv_key->parameters);",
          "1036:     }",
          "",
          "[Removed Lines]",
          "1033:         if (ret->group)",
          "1034:             EC_GROUP_clear_free(ret->group);",
          "",
          "[Added Lines]",
          "1032:         EC_GROUP_clear_free(ret->group);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1055:         goto err;",
          "1056:     }",
          "1060:     ret->pub_key = EC_POINT_new(ret->group);",
          "1061:     if (ret->pub_key == NULL) {",
          "1062:         ECerr(EC_F_D2I_ECPRIVATEKEY, ERR_R_EC_LIB);",
          "",
          "[Removed Lines]",
          "1058:     if (ret->pub_key)",
          "1059:         EC_POINT_clear_free(ret->pub_key);",
          "",
          "[Added Lines]",
          "1056:     EC_POINT_clear_free(ret->pub_key);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1098:     ok = 1;",
          "1099:  err:",
          "1100:     if (!ok) {",
          "1102:             EC_KEY_free(ret);",
          "1103:         ret = NULL;",
          "1104:     }",
          "",
          "[Removed Lines]",
          "1101:         if (ret && (a == NULL || *a != ret))",
          "",
          "[Added Lines]",
          "1098:         if (a == NULL || *a != ret)",
          "",
          "---------------"
        ],
        "crypto/ec/ec_check.c||crypto/ec/ec_check.c": [
          "File: crypto/ec/ec_check.c -> crypto/ec/ec_check.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "114:         BN_CTX_end(ctx);",
          "115:     if (new_ctx != NULL)",
          "116:         BN_CTX_free(new_ctx);",
          "119:     return ret;",
          "120: }",
          "",
          "[Removed Lines]",
          "117:     if (point)",
          "118:         EC_POINT_free(point);",
          "",
          "[Added Lines]",
          "117:     EC_POINT_free(point);",
          "",
          "---------------"
        ],
        "crypto/ec/ec_curve.c||crypto/ec/ec_curve.c": [
          "File: crypto/ec/ec_curve.c -> crypto/ec/ec_curve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3114:         EC_GROUP_free(group);",
          "3115:         group = NULL;",
          "3116:     }",
          "3119:     if (ctx)",
          "3120:         BN_CTX_free(ctx);",
          "3121:     if (p)",
          "",
          "[Removed Lines]",
          "3117:     if (P)",
          "3118:         EC_POINT_free(P);",
          "",
          "[Added Lines]",
          "3117:     EC_POINT_free(P);",
          "",
          "---------------"
        ],
        "crypto/ec/ec_key.c||crypto/ec/ec_key.c": [
          "File: crypto/ec/ec_key.c -> crypto/ec/ec_key.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:     }",
          "121: #endif",
          "127:     if (r->priv_key != NULL)",
          "128:         BN_clear_free(r->priv_key);",
          "",
          "[Removed Lines]",
          "123:     if (r->group != NULL)",
          "124:         EC_GROUP_free(r->group);",
          "125:     if (r->pub_key != NULL)",
          "126:         EC_POINT_free(r->pub_key);",
          "",
          "[Added Lines]",
          "123:     EC_GROUP_free(r->group);",
          "124:     EC_POINT_free(r->pub_key);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146:     if (src->group) {",
          "147:         const EC_METHOD *meth = EC_GROUP_method_of(src->group);",
          "151:         dest->group = EC_GROUP_new(meth);",
          "152:         if (dest->group == NULL)",
          "153:             return NULL;",
          "",
          "[Removed Lines]",
          "149:         if (dest->group)",
          "150:             EC_GROUP_free(dest->group);",
          "",
          "[Added Lines]",
          "147:         EC_GROUP_free(dest->group);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "156:     }",
          "158:     if (src->pub_key && src->group) {",
          "161:         dest->pub_key = EC_POINT_new(src->group);",
          "162:         if (dest->pub_key == NULL)",
          "163:             return NULL;",
          "",
          "[Removed Lines]",
          "159:         if (dest->pub_key)",
          "160:             EC_POINT_free(dest->pub_key);",
          "",
          "[Added Lines]",
          "156:         EC_POINT_free(dest->pub_key);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "274:  err:",
          "275:     if (order)",
          "276:         BN_free(order);",
          "278:         EC_POINT_free(pub_key);",
          "279:     if (priv_key != NULL && eckey->priv_key == NULL)",
          "280:         BN_free(priv_key);",
          "",
          "[Removed Lines]",
          "277:     if (pub_key != NULL && eckey->pub_key == NULL)",
          "",
          "[Added Lines]",
          "273:     if (eckey->pub_key == NULL)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "347:  err:",
          "348:     if (ctx != NULL)",
          "349:         BN_CTX_free(ctx);",
          "352:     return (ok);",
          "353: }",
          "",
          "[Removed Lines]",
          "350:     if (point != NULL)",
          "351:         EC_POINT_free(point);",
          "",
          "[Added Lines]",
          "346:     EC_POINT_free(point);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "422:  err:",
          "423:     if (ctx)",
          "424:         BN_CTX_free(ctx);",
          "427:     return ok;",
          "429: }",
          "",
          "[Removed Lines]",
          "425:     if (point)",
          "426:         EC_POINT_free(point);",
          "",
          "[Added Lines]",
          "420:     EC_POINT_free(point);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "436: int EC_KEY_set_group(EC_KEY *key, const EC_GROUP *group)",
          "437: {",
          "440:     key->group = EC_GROUP_dup(group);",
          "441:     return (key->group == NULL) ? 0 : 1;",
          "442: }",
          "",
          "[Removed Lines]",
          "438:     if (key->group != NULL)",
          "439:         EC_GROUP_free(key->group);",
          "",
          "[Added Lines]",
          "432:     EC_GROUP_free(key->group);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "462: int EC_KEY_set_public_key(EC_KEY *key, const EC_POINT *pub_key)",
          "463: {",
          "466:     key->pub_key = EC_POINT_dup(pub_key, key->group);",
          "467:     return (key->pub_key == NULL) ? 0 : 1;",
          "468: }",
          "",
          "[Removed Lines]",
          "464:     if (key->pub_key != NULL)",
          "465:         EC_POINT_free(key->pub_key);",
          "",
          "[Added Lines]",
          "457:     EC_POINT_free(key->pub_key);",
          "",
          "---------------"
        ],
        "crypto/ec/ec_lib.c||crypto/ec/ec_lib.c": [
          "File: crypto/ec/ec_lib.c -> crypto/ec/ec_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:     if (group->mont_data)",
          "139:         BN_MONT_CTX_free(group->mont_data);",
          "143:     BN_free(group->order);",
          "144:     BN_free(group->cofactor);",
          "",
          "[Removed Lines]",
          "141:     if (group->generator != NULL)",
          "142:         EC_POINT_free(group->generator);",
          "",
          "[Added Lines]",
          "141:     EC_POINT_free(group->generator);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "164:     if (group->mont_data)",
          "165:         BN_MONT_CTX_free(group->mont_data);",
          "169:     BN_clear_free(group->order);",
          "170:     BN_clear_free(group->cofactor);",
          "",
          "[Removed Lines]",
          "167:     if (group->generator != NULL)",
          "168:         EC_POINT_clear_free(group->generator);",
          "",
          "[Added Lines]",
          "166:     EC_POINT_clear_free(group->generator);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "232:             return 0;",
          "233:     } else {",
          "239:     }",
          "241:     if (!BN_copy(dest->order, src->order))",
          "",
          "[Removed Lines]",
          "235:         if (dest->generator != NULL) {",
          "236:             EC_POINT_clear_free(dest->generator);",
          "237:             dest->generator = NULL;",
          "238:         }",
          "",
          "[Added Lines]",
          "233:         EC_POINT_clear_free(dest->generator);",
          "234:         dest->generator = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "284:  err:",
          "285:     if (!ok) {",
          "288:         return NULL;",
          "290:         return t;",
          "291: }",
          "",
          "[Removed Lines]",
          "286:         if (t)",
          "287:             EC_GROUP_free(t);",
          "289:     } else",
          "",
          "[Added Lines]",
          "282:         EC_GROUP_free(t);",
          "284:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "790:     if (!r) {",
          "791:         EC_POINT_free(t);",
          "792:         return NULL;",
          "795: }",
          "797: const EC_METHOD *EC_POINT_method_of(const EC_POINT *point)",
          "",
          "[Removed Lines]",
          "793:     } else",
          "794:         return t;",
          "",
          "[Added Lines]",
          "788:     }",
          "789:     return t;",
          "",
          "---------------"
        ],
        "crypto/ec/ec_mult.c||crypto/ec/ec_mult.c": [
          "File: crypto/ec/ec_mult.c -> crypto/ec/ec_mult.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "556:  err:",
          "557:     if (new_ctx != NULL)",
          "558:         BN_CTX_free(new_ctx);",
          "561:     if (wsize != NULL)",
          "562:         OPENSSL_free(wsize);",
          "563:     if (wNAF_len != NULL)",
          "",
          "[Removed Lines]",
          "559:     if (tmp != NULL)",
          "560:         EC_POINT_free(tmp);",
          "",
          "[Added Lines]",
          "559:     EC_POINT_free(tmp);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "759:             EC_POINT_free(*p);",
          "760:         OPENSSL_free(points);",
          "761:     }",
          "766:     return ret;",
          "767: }",
          "",
          "[Removed Lines]",
          "762:     if (tmp_point)",
          "763:         EC_POINT_free(tmp_point);",
          "764:     if (base)",
          "765:         EC_POINT_free(base);",
          "",
          "[Added Lines]",
          "761:     EC_POINT_free(tmp_point);",
          "762:     EC_POINT_free(base);",
          "",
          "---------------"
        ],
        "crypto/ec/ec_pmeth.c||crypto/ec/ec_pmeth.c": [
          "File: crypto/ec/ec_pmeth.c -> crypto/ec/ec_pmeth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "146: {",
          "147:     EC_PKEY_CTX *dctx = ctx->data;",
          "148:     if (dctx) {",
          "153:         if (dctx->kdf_ukm)",
          "154:             OPENSSL_free(dctx->kdf_ukm);",
          "155:         OPENSSL_free(dctx);",
          "",
          "[Removed Lines]",
          "149:         if (dctx->gen_group)",
          "150:             EC_GROUP_free(dctx->gen_group);",
          "151:         if (dctx->co_key)",
          "152:             EC_KEY_free(dctx->co_key);",
          "",
          "[Added Lines]",
          "149:         EC_GROUP_free(dctx->gen_group);",
          "150:         EC_KEY_free(dctx->co_key);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "289:             ECerr(EC_F_PKEY_EC_CTRL, EC_R_INVALID_CURVE);",
          "290:             return 0;",
          "291:         }",
          "294:         dctx->gen_group = group;",
          "295:         return 1;",
          "",
          "[Removed Lines]",
          "292:         if (dctx->gen_group)",
          "293:             EC_GROUP_free(dctx->gen_group);",
          "",
          "[Added Lines]",
          "290:         EC_GROUP_free(dctx->gen_group);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "331:                 EC_KEY_set_flags(dctx->co_key, EC_FLAG_COFACTOR_ECDH);",
          "332:             else",
          "333:                 EC_KEY_clear_flags(dctx->co_key, EC_FLAG_COFACTOR_ECDH);",
          "335:             EC_KEY_free(dctx->co_key);",
          "336:             dctx->co_key = NULL;",
          "337:         }",
          "",
          "[Removed Lines]",
          "334:         } else if (dctx->co_key) {",
          "",
          "[Added Lines]",
          "331:         } else {",
          "",
          "---------------"
        ],
        "crypto/ec/ec_print.c||crypto/ec/ec_print.c": [
          "File: crypto/ec/ec_print.c -> crypto/ec/ec_print.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:         ret = point;",
          "112:     if (!EC_POINT_oct2point(group, ret, buf, buf_len, ctx)) {",
          "114:             EC_POINT_clear_free(ret);",
          "115:         OPENSSL_free(buf);",
          "116:         return NULL;",
          "",
          "[Removed Lines]",
          "113:         if (point == NULL)",
          "",
          "[Added Lines]",
          "113:         if (ret != point)",
          "",
          "---------------"
        ],
        "crypto/ec/ecp_nistp224.c||crypto/ec/ecp_nistp224.c": [
          "File: crypto/ec/ecp_nistp224.c -> crypto/ec/ecp_nistp224.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1603:  err:",
          "1604:     BN_CTX_end(ctx);",
          "1607:     if (new_ctx != NULL)",
          "1608:         BN_CTX_free(new_ctx);",
          "1609:     if (secrets != NULL)",
          "",
          "[Removed Lines]",
          "1605:     if (generator != NULL)",
          "1606:         EC_POINT_free(generator);",
          "",
          "[Added Lines]",
          "1605:     EC_POINT_free(generator);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1739:     pre = NULL;",
          "1740:  err:",
          "1741:     BN_CTX_end(ctx);",
          "1744:     if (new_ctx != NULL)",
          "1745:         BN_CTX_free(new_ctx);",
          "1746:     if (pre)",
          "",
          "[Removed Lines]",
          "1742:     if (generator != NULL)",
          "1743:         EC_POINT_free(generator);",
          "",
          "[Added Lines]",
          "1741:     EC_POINT_free(generator);",
          "",
          "---------------"
        ],
        "crypto/ec/ecp_nistp256.c||crypto/ec/ecp_nistp256.c": [
          "File: crypto/ec/ecp_nistp256.c -> crypto/ec/ecp_nistp256.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2194:  err:",
          "2195:     BN_CTX_end(ctx);",
          "2198:     if (new_ctx != NULL)",
          "2199:         BN_CTX_free(new_ctx);",
          "2200:     if (secrets != NULL)",
          "",
          "[Removed Lines]",
          "2196:     if (generator != NULL)",
          "2197:         EC_POINT_free(generator);",
          "",
          "[Added Lines]",
          "2196:     EC_POINT_free(generator);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2340:     pre = NULL;",
          "2341:  err:",
          "2342:     BN_CTX_end(ctx);",
          "2345:     if (new_ctx != NULL)",
          "2346:         BN_CTX_free(new_ctx);",
          "2347:     if (pre)",
          "",
          "[Removed Lines]",
          "2343:     if (generator != NULL)",
          "2344:         EC_POINT_free(generator);",
          "",
          "[Added Lines]",
          "2342:     EC_POINT_free(generator);",
          "",
          "---------------"
        ],
        "crypto/ec/ecp_nistp521.c||crypto/ec/ecp_nistp521.c": [
          "File: crypto/ec/ecp_nistp521.c -> crypto/ec/ecp_nistp521.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2007:  err:",
          "2008:     BN_CTX_end(ctx);",
          "2011:     if (new_ctx != NULL)",
          "2012:         BN_CTX_free(new_ctx);",
          "2013:     if (secrets != NULL)",
          "",
          "[Removed Lines]",
          "2009:     if (generator != NULL)",
          "2010:         EC_POINT_free(generator);",
          "",
          "[Added Lines]",
          "2009:     EC_POINT_free(generator);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2123:     pre = NULL;",
          "2124:  err:",
          "2125:     BN_CTX_end(ctx);",
          "2128:     if (new_ctx != NULL)",
          "2129:         BN_CTX_free(new_ctx);",
          "2130:     if (pre)",
          "",
          "[Removed Lines]",
          "2126:     if (generator != NULL)",
          "2127:         EC_POINT_free(generator);",
          "",
          "[Added Lines]",
          "2125:     EC_POINT_free(generator);",
          "",
          "---------------"
        ],
        "crypto/ec/ecp_nistz256.c||crypto/ec/ecp_nistz256.c": [
          "File: crypto/ec/ecp_nistz256.c -> crypto/ec/ecp_nistz256.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "874:         ecp_nistz256_pre_comp_free(pre_comp);",
          "875:     if (precomp_storage)",
          "876:         OPENSSL_free(precomp_storage);",
          "881:     return ret;",
          "882: }",
          "",
          "[Removed Lines]",
          "877:     if (P)",
          "878:         EC_POINT_free(P);",
          "879:     if (T)",
          "880:         EC_POINT_free(T);",
          "",
          "[Added Lines]",
          "877:     EC_POINT_free(P);",
          "878:     EC_POINT_free(T);",
          "",
          "---------------"
        ],
        "crypto/ec/ectest.c||crypto/ec/ectest.c": [
          "File: crypto/ec/ectest.c -> crypto/ec/ectest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "864:     BN_free(y);",
          "865:     BN_free(z);",
          "880: }",
          "",
          "[Removed Lines]",
          "867:     if (P_160)",
          "868:         EC_GROUP_free(P_160);",
          "869:     if (P_192)",
          "870:         EC_GROUP_free(P_192);",
          "871:     if (P_224)",
          "872:         EC_GROUP_free(P_224);",
          "873:     if (P_256)",
          "874:         EC_GROUP_free(P_256);",
          "875:     if (P_384)",
          "876:         EC_GROUP_free(P_384);",
          "877:     if (P_521)",
          "878:         EC_GROUP_free(P_521);",
          "",
          "[Added Lines]",
          "867:     EC_GROUP_free(P_160);",
          "868:     EC_GROUP_free(P_192);",
          "869:     EC_GROUP_free(P_224);",
          "870:     EC_GROUP_free(P_256);",
          "871:     EC_GROUP_free(P_384);",
          "872:     EC_GROUP_free(P_521);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1346:     BN_free(z);",
          "1347:     BN_free(cof);",
          "1370: }",
          "1371: # endif",
          "",
          "[Removed Lines]",
          "1349:     if (C2_K163)",
          "1350:         EC_GROUP_free(C2_K163);",
          "1351:     if (C2_B163)",
          "1352:         EC_GROUP_free(C2_B163);",
          "1353:     if (C2_K233)",
          "1354:         EC_GROUP_free(C2_K233);",
          "1355:     if (C2_B233)",
          "1356:         EC_GROUP_free(C2_B233);",
          "1357:     if (C2_K283)",
          "1358:         EC_GROUP_free(C2_K283);",
          "1359:     if (C2_B283)",
          "1360:         EC_GROUP_free(C2_B283);",
          "1361:     if (C2_K409)",
          "1362:         EC_GROUP_free(C2_K409);",
          "1363:     if (C2_B409)",
          "1364:         EC_GROUP_free(C2_B409);",
          "1365:     if (C2_K571)",
          "1366:         EC_GROUP_free(C2_K571);",
          "1367:     if (C2_B571)",
          "1368:         EC_GROUP_free(C2_B571);",
          "",
          "[Added Lines]",
          "1343:     EC_GROUP_free(C2_K163);",
          "1344:     EC_GROUP_free(C2_B163);",
          "1345:     EC_GROUP_free(C2_K233);",
          "1346:     EC_GROUP_free(C2_B233);",
          "1347:     EC_GROUP_free(C2_K283);",
          "1348:     EC_GROUP_free(C2_B283);",
          "1349:     EC_GROUP_free(C2_K409);",
          "1350:     EC_GROUP_free(C2_B409);",
          "1351:     EC_GROUP_free(C2_K571);",
          "1352:     EC_GROUP_free(C2_B571);",
          "",
          "---------------"
        ],
        "crypto/ecdh/ecdhtest.c||crypto/ecdh/ecdhtest.c": [
          "File: crypto/ecdh/ecdhtest.c -> crypto/ecdh/ecdhtest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "290:         BN_free(x_b);",
          "291:     if (y_b)",
          "292:         BN_free(y_b);",
          "297:     return (ret);",
          "298: }",
          "",
          "[Removed Lines]",
          "293:     if (b)",
          "294:         EC_KEY_free(b);",
          "295:     if (a)",
          "296:         EC_KEY_free(a);",
          "",
          "[Added Lines]",
          "293:     EC_KEY_free(b);",
          "294:     EC_KEY_free(a);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "394:  err:",
          "395:     if (priv)",
          "396:         BN_clear_free(priv);",
          "399:     if (ok)",
          "400:         return k;",
          "403:     return NULL;",
          "404: }",
          "",
          "[Removed Lines]",
          "397:     if (pub)",
          "398:         EC_POINT_free(pub);",
          "401:     else if (k)",
          "402:         EC_KEY_free(k);",
          "",
          "[Added Lines]",
          "395:     EC_POINT_free(pub);",
          "398:     EC_KEY_free(k);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "440:         goto err;",
          "441:     rv = 1;",
          "442:  err:",
          "447:     if (Ztmp)",
          "448:         OPENSSL_free(Ztmp);",
          "449:     if (rv)",
          "",
          "[Removed Lines]",
          "443:     if (key1)",
          "444:         EC_KEY_free(key1);",
          "445:     if (key2)",
          "446:         EC_KEY_free(key2);",
          "",
          "[Added Lines]",
          "439:     EC_KEY_free(key1);",
          "440:     EC_KEY_free(key2);",
          "",
          "---------------"
        ],
        "crypto/ecdh/ech_ossl.c||crypto/ecdh/ech_ossl.c": [
          "File: crypto/ecdh/ech_ossl.c -> crypto/ecdh/ech_ossl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "202:     }",
          "204:  err:",
          "207:     if (ctx)",
          "208:         BN_CTX_end(ctx);",
          "209:     if (ctx)",
          "",
          "[Removed Lines]",
          "205:     if (tmp)",
          "206:         EC_POINT_free(tmp);",
          "",
          "[Added Lines]",
          "205:     EC_POINT_free(tmp);",
          "",
          "---------------"
        ],
        "crypto/ecdsa/ecdsatest.c||crypto/ecdsa/ecdsatest.c": [
          "File: crypto/ecdsa/ecdsatest.c -> crypto/ecdsa/ecdsatest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "240:  x962_int_err:",
          "241:     if (!ret)",
          "242:         BIO_printf(out, \" failed\\n\");",
          "245:     if (signature)",
          "246:         ECDSA_SIG_free(signature);",
          "247:     if (r)",
          "",
          "[Removed Lines]",
          "243:     if (key)",
          "244:         EC_KEY_free(key);",
          "",
          "[Added Lines]",
          "243:     EC_KEY_free(key);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "354:             goto builtin_err;",
          "355:         EC_GROUP_free(group);",
          "356:         degree = EC_GROUP_get_degree(EC_KEY_get0_group(eckey));",
          "360:             EC_KEY_free(eckey);",
          "361:             eckey = NULL;",
          "362:             continue;",
          "",
          "[Removed Lines]",
          "357:         if (degree < 160)",
          "359:         {",
          "",
          "[Added Lines]",
          "356:         if (degree < 160) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "507:     ret = 1;",
          "508:  builtin_err:",
          "513:     if (ecdsa_sig)",
          "514:         ECDSA_SIG_free(ecdsa_sig);",
          "515:     if (signature)",
          "",
          "[Removed Lines]",
          "509:     if (eckey)",
          "510:         EC_KEY_free(eckey);",
          "511:     if (wrong_eckey)",
          "512:         EC_KEY_free(wrong_eckey);",
          "",
          "[Added Lines]",
          "507:     EC_KEY_free(eckey);",
          "508:     EC_KEY_free(wrong_eckey);",
          "",
          "---------------"
        ],
        "crypto/ecdsa/ecs_ossl.c||crypto/ecdsa/ecs_ossl.c": [
          "File: crypto/ecdsa/ecs_ossl.c -> crypto/ecdsa/ecs_ossl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "242:         BN_CTX_free(ctx);",
          "243:     if (order != NULL)",
          "244:         BN_free(order);",
          "247:     if (X)",
          "248:         BN_clear_free(X);",
          "249:     return (ret);",
          "",
          "[Removed Lines]",
          "245:     if (tmp_point != NULL)",
          "246:         EC_POINT_free(tmp_point);",
          "",
          "[Added Lines]",
          "245:     EC_POINT_free(tmp_point);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "475:  err:",
          "476:     BN_CTX_end(ctx);",
          "477:     BN_CTX_free(ctx);",
          "480:     return ret;",
          "481: }",
          "",
          "[Removed Lines]",
          "478:     if (point)",
          "479:         EC_POINT_free(point);",
          "",
          "[Added Lines]",
          "477:     EC_POINT_free(point);",
          "",
          "---------------"
        ],
        "engines/ccgost/gost_ameth.c||engines/ccgost/gost_ameth.c": [
          "File: engines/ccgost/gost_ameth.c -> engines/ccgost/gost_ameth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "285: static void pkey_free_gost01(EVP_PKEY *key)",
          "286: {",
          "290: }",
          "",
          "[Removed Lines]",
          "287:     if (key->pkey.ec) {",
          "288:         EC_KEY_free(key->pkey.ec);",
          "289:     }",
          "",
          "[Added Lines]",
          "287:     EC_KEY_free(key->pkey.ec);",
          "",
          "---------------"
        ],
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1388:         s->session->sess_cert->peer_dh_tmp = NULL;",
          "1389: #endif",
          "1390: #ifndef OPENSSL_NO_EC",
          "1395: #endif",
          "1396:     } else {",
          "1397:         s->session->sess_cert = ssl_sess_cert_new();",
          "",
          "[Removed Lines]",
          "1391:         if (s->session->sess_cert->peer_ecdh_tmp) {",
          "1392:             EC_KEY_free(s->session->sess_cert->peer_ecdh_tmp);",
          "1393:             s->session->sess_cert->peer_ecdh_tmp = NULL;",
          "1394:         }",
          "",
          "[Added Lines]",
          "1391:         EC_KEY_free(s->session->sess_cert->peer_ecdh_tmp);",
          "1392:         s->session->sess_cert->peer_ecdh_tmp = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1959: #ifndef OPENSSL_NO_EC",
          "1960:     BN_CTX_free(bn_ctx);",
          "1961:     EC_POINT_free(srvr_ecpoint);",
          "1964: #endif",
          "1965:     EVP_MD_CTX_cleanup(&md_ctx);",
          "1966:     return (-1);",
          "",
          "[Removed Lines]",
          "1962:     if (ecdh != NULL)",
          "1963:         EC_KEY_free(ecdh);",
          "",
          "[Added Lines]",
          "1960:     EC_KEY_free(ecdh);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2760:             BN_CTX_free(bn_ctx);",
          "2761:             if (encodedPoint != NULL)",
          "2762:                 OPENSSL_free(encodedPoint);",
          "2765:             EVP_PKEY_free(srvr_pub_pkey);",
          "2766:         }",
          "",
          "[Removed Lines]",
          "2763:             if (clnt_ecdh != NULL)",
          "2764:                 EC_KEY_free(clnt_ecdh);",
          "",
          "[Added Lines]",
          "2760:             EC_KEY_free(clnt_ecdh);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3069:     BN_CTX_free(bn_ctx);",
          "3070:     if (encodedPoint != NULL)",
          "3071:         OPENSSL_free(encodedPoint);",
          "3074:     EVP_PKEY_free(srvr_pub_pkey);",
          "3075: #endif",
          "3076:     return (-1);",
          "",
          "[Removed Lines]",
          "3072:     if (clnt_ecdh != NULL)",
          "3073:         EC_KEY_free(clnt_ecdh);",
          "",
          "[Added Lines]",
          "3068:     EC_KEY_free(clnt_ecdh);",
          "",
          "---------------"
        ],
        "ssl/s3_lib.c||ssl/s3_lib.c": [
          "File: ssl/s3_lib.c -> ssl/s3_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3141:     DH_free(s->s3->tmp.dh);",
          "3142: #endif",
          "3143: #ifndef OPENSSL_NO_EC",
          "3146: #endif",
          "3148:     if (s->s3->tmp.ca_names != NULL)",
          "",
          "[Removed Lines]",
          "3144:     if (s->s3->tmp.ecdh != NULL)",
          "3145:         EC_KEY_free(s->s3->tmp.ecdh);",
          "",
          "[Added Lines]",
          "3144:     EC_KEY_free(s->s3->tmp.ecdh);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3182:     s->s3->tmp.dh = NULL;",
          "3183: #endif",
          "3184: #ifndef OPENSSL_NO_EC",
          "3189: #endif",
          "3190: #ifndef OPENSSL_NO_TLSEXT",
          "3191: # ifndef OPENSSL_NO_EC",
          "",
          "[Removed Lines]",
          "3185:     if (s->s3->tmp.ecdh != NULL) {",
          "3186:         EC_KEY_free(s->s3->tmp.ecdh);",
          "3187:         s->s3->tmp.ecdh = NULL;",
          "3188:     }",
          "",
          "[Added Lines]",
          "3184:     EC_KEY_free(s->s3->tmp.ecdh);",
          "3185:     s->s3->tmp.ecdh = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3356:                     return (ret);",
          "3357:                 }",
          "3358:             }",
          "3361:             s->cert->ecdh_tmp = ecdh;",
          "3362:             ret = 1;",
          "3363:         }",
          "",
          "[Removed Lines]",
          "3359:             if (s->cert->ecdh_tmp != NULL)",
          "3360:                 EC_KEY_free(s->cert->ecdh_tmp);",
          "",
          "[Added Lines]",
          "3356:             EC_KEY_free(s->cert->ecdh_tmp);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3829:                 }",
          "3830:             }",
          "3835:             cert->ecdh_tmp = ecdh;",
          "3836:             return 1;",
          "3837:         }",
          "",
          "[Removed Lines]",
          "3832:             if (cert->ecdh_tmp != NULL) {",
          "3833:                 EC_KEY_free(cert->ecdh_tmp);",
          "3834:             }",
          "",
          "[Added Lines]",
          "3828:             EC_KEY_free(cert->ecdh_tmp);",
          "",
          "---------------"
        ],
        "ssl/s3_srvr.c||ssl/s3_srvr.c": [
          "File: ssl/s3_srvr.c -> ssl/s3_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2886: #ifndef OPENSSL_NO_EC",
          "2887:     EVP_PKEY_free(clnt_pub_pkey);",
          "2888:     EC_POINT_free(clnt_ecpoint);",
          "2891:     BN_CTX_free(bn_ctx);",
          "2892: #endif",
          "2893:     return (-1);",
          "",
          "[Removed Lines]",
          "2889:     if (srvr_ecdh != NULL)",
          "2890:         EC_KEY_free(srvr_ecdh);",
          "",
          "[Added Lines]",
          "2889:     EC_KEY_free(srvr_ecdh);",
          "",
          "---------------"
        ],
        "ssl/ssl_cert.c||ssl/ssl_cert.c": [
          "File: ssl/ssl_cert.c -> ssl/ssl_cert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "449:     DH_free(c->dh_tmp);",
          "450: #endif",
          "451: #ifndef OPENSSL_NO_EC",
          "454: #endif",
          "456:     ssl_cert_clear_certs(c);",
          "",
          "[Removed Lines]",
          "452:     if (c->ecdh_tmp)",
          "453:         EC_KEY_free(c->ecdh_tmp);",
          "",
          "[Added Lines]",
          "452:     EC_KEY_free(c->ecdh_tmp);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "655:     DH_free(sc->peer_dh_tmp);",
          "656: #endif",
          "657: #ifndef OPENSSL_NO_EC",
          "660: #endif",
          "662:     OPENSSL_free(sc);",
          "",
          "[Removed Lines]",
          "658:     if (sc->peer_ecdh_tmp != NULL)",
          "659:         EC_KEY_free(sc->peer_ecdh_tmp);",
          "",
          "[Added Lines]",
          "657:     EC_KEY_free(sc->peer_ecdh_tmp);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "10bf4fc2c3da332a54247da1f3c0dcb44944f7ff",
      "candidate_info": {
        "commit_hash": "10bf4fc2c3da332a54247da1f3c0dcb44944f7ff",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/10bf4fc2c3da332a54247da1f3c0dcb44944f7ff",
        "files": [
          "CHANGES",
          "apps/req.c",
          "apps/s_cb.c",
          "apps/s_server.c",
          "apps/speed.c",
          "crypto/ec/ec_pmeth.c",
          "crypto/ecdh/ecdh.h",
          "crypto/ecdh/ecdhtest.c",
          "crypto/ecdsa/ecdsa.h",
          "crypto/ecdsa/ecdsatest.c",
          "crypto/engine/eng_fat.c",
          "crypto/engine/eng_list.c",
          "crypto/engine/eng_openssl.c",
          "crypto/engine/engine.h",
          "crypto/err/err_all.c",
          "crypto/evp/c_alld.c",
          "crypto/evp/evp.h",
          "crypto/x509/x509.h",
          "ssl/s3_clnt.c",
          "ssl/s3_lib.c",
          "ssl/s3_srvr.c",
          "ssl/ssl.h",
          "ssl/ssl_algs.c",
          "ssl/ssl_cert.c",
          "ssl/ssl_ciph.c",
          "ssl/ssl_conf.c",
          "ssl/ssl_lib.c",
          "ssl/ssl_locl.h",
          "ssl/ssltest.c",
          "ssl/t1_lib.c",
          "util/mk1mf.pl"
        ],
        "message": "Merge OPENSSL_NO_EC{DH,DSA} into OPENSSL_NO_EC\n\nSuggested by John Foley <foleyj@cisco.com>.\n\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "apps/req.c||apps/req.c",
          "apps/s_cb.c||apps/s_cb.c",
          "apps/s_server.c||apps/s_server.c",
          "apps/speed.c||apps/speed.c",
          "crypto/ec/ec_pmeth.c||crypto/ec/ec_pmeth.c",
          "crypto/ecdh/ecdh.h||crypto/ecdh/ecdh.h",
          "crypto/ecdh/ecdhtest.c||crypto/ecdh/ecdhtest.c",
          "crypto/ecdsa/ecdsa.h||crypto/ecdsa/ecdsa.h",
          "crypto/ecdsa/ecdsatest.c||crypto/ecdsa/ecdsatest.c",
          "crypto/engine/eng_fat.c||crypto/engine/eng_fat.c",
          "crypto/engine/eng_list.c||crypto/engine/eng_list.c",
          "crypto/engine/eng_openssl.c||crypto/engine/eng_openssl.c",
          "crypto/engine/engine.h||crypto/engine/engine.h",
          "crypto/err/err_all.c||crypto/err/err_all.c",
          "crypto/evp/c_alld.c||crypto/evp/c_alld.c",
          "crypto/evp/evp.h||crypto/evp/evp.h",
          "crypto/x509/x509.h||crypto/x509/x509.h",
          "ssl/s3_clnt.c||ssl/s3_clnt.c",
          "ssl/s3_lib.c||ssl/s3_lib.c",
          "ssl/s3_srvr.c||ssl/s3_srvr.c",
          "ssl/ssl.h||ssl/ssl.h",
          "ssl/ssl_algs.c||ssl/ssl_algs.c",
          "ssl/ssl_cert.c||ssl/ssl_cert.c",
          "ssl/ssl_ciph.c||ssl/ssl_ciph.c",
          "ssl/ssl_conf.c||ssl/ssl_conf.c",
          "ssl/ssl_lib.c||ssl/ssl_lib.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h",
          "ssl/ssltest.c||ssl/ssltest.c",
          "ssl/t1_lib.c||ssl/t1_lib.c",
          "util/mk1mf.pl||util/mk1mf.pl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ],
          "candidate": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ]
        }
      },
      "candidate_diff": {
        "apps/req.c||apps/req.c": [
          "File: apps/req.c -> apps/req.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "398:                    \" -newkey rsa:bits generate a new RSA key of 'bits' in size\\n\");",
          "399:         BIO_printf(bio_err,",
          "400:                    \" -newkey dsa:file generate a new DSA key, parameters taken from CA in 'file'\\n\");",
          "402:         BIO_printf(bio_err,",
          "403:                    \" -newkey ec:file generate a new EC key, parameters taken from CA in 'file'\\n\");",
          "404: #endif",
          "",
          "[Removed Lines]",
          "401: #ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "401: #ifndef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "apps/s_cb.c||apps/s_cb.c": [
          "File: apps/s_cb.c -> apps/s_cb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "521:     case EVP_PKEY_DH:",
          "522:         BIO_printf(out, \"DH, %d bits\\n\", EVP_PKEY_bits(key));",
          "523:         break;",
          "525:     case EVP_PKEY_EC:",
          "526:         {",
          "527:             EC_KEY *ec = EVP_PKEY_get1_EC_KEY(key);",
          "",
          "[Removed Lines]",
          "524: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "524: #ifndef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "apps/s_server.c||apps/s_server.c": [
          "File: apps/s_server.c -> apps/s_server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "486:                \" -dhparam arg  - DH parameter file to use, in cert file if not specified\\n\");",
          "487:     BIO_printf(bio_err,",
          "488:                \"                 or a default set of parameters is used\\n\");",
          "490:     BIO_printf(bio_err,",
          "491:                \" -named_curve arg  - Elliptic curve name to use for ephemeral ECDH keys.\\n\"",
          "492:                \"                 Use \\\"openssl ecparam -list_curves\\\" for all names\\n\"",
          "",
          "[Removed Lines]",
          "489: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "489: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "545: #ifndef OPENSSL_NO_DH",
          "546:     BIO_printf(bio_err, \" -no_dhe       - Disable ephemeral DH\\n\");",
          "547: #endif",
          "549:     BIO_printf(bio_err, \" -no_ecdhe     - Disable ephemeral ECDH\\n\");",
          "550: #endif",
          "551:     BIO_printf(bio_err,",
          "",
          "[Removed Lines]",
          "548: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "548: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1677:                 bio_s_out = BIO_new_fp(stdout, BIO_NOCLOSE);",
          "1678:         }",
          "1679:     }",
          "1681:     if (nocert)",
          "1682: #endif",
          "1683:     {",
          "",
          "[Removed Lines]",
          "1680: #if !defined(OPENSSL_NO_RSA) || !defined(OPENSSL_NO_DSA) || !defined(OPENSSL_NO_ECDSA)",
          "",
          "[Added Lines]",
          "1680: #if !defined(OPENSSL_NO_RSA) || !defined(OPENSSL_NO_DSA) || !defined(OPENSSL_NO_EC)",
          "",
          "---------------"
        ],
        "apps/speed.c||apps/speed.c": [
          "File: apps/speed.c -> apps/speed.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "172: # include <openssl/dsa.h>",
          "173: # include \"./testdsa.h\"",
          "174: #endif",
          "176: # include <openssl/ecdsa.h>",
          "179: # include <openssl/ecdh.h>",
          "180: #endif",
          "181: #include <openssl/modes.h>",
          "",
          "[Removed Lines]",
          "175: #ifndef OPENSSL_NO_ECDSA",
          "177: #endif",
          "178: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "175: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "242: #ifndef OPENSSL_NO_DSA",
          "243: static double dsa_results[DSA_NUM][2];",
          "244: #endif",
          "246: static double ecdsa_results[EC_NUM][2];",
          "249: static double ecdh_results[EC_NUM][1];",
          "250: #endif",
          "253: static const char rnd_seed[] =",
          "254:     \"string to make the random number generator think it has entropy\";",
          "255: static int rnd_fake = 0;",
          "",
          "[Removed Lines]",
          "245: #ifndef OPENSSL_NO_ECDSA",
          "247: #endif",
          "248: #ifndef OPENSSL_NO_ECDH",
          "252: #if defined(OPENSSL_NO_DSA) && !(defined(OPENSSL_NO_ECDSA) && defined(OPENSSL_NO_ECDH))",
          "",
          "[Added Lines]",
          "243: #ifndef OPENSSL_NO_EC",
          "248: #if defined(OPENSSL_NO_DSA) && !defined(OPENSSL_NO_EC)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "330: }",
          "331: #endif",
          "334: static const int KDF1_SHA1_len = 20;",
          "335: static void *KDF1_SHA1(const void *in, size_t inlen, void *out,",
          "336:                        size_t *outlen)",
          "",
          "[Removed Lines]",
          "333: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "329: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "596: #endif",
          "599:     unsigned char ecdsasig[256];",
          "600:     unsigned int ecdsasiglen;",
          "601:     EC_KEY *ecdsa[EC_NUM];",
          "602:     long ecdsa_c[EC_NUM][2];",
          "606:     EC_KEY *ecdh_a[EC_NUM], *ecdh_b[EC_NUM];",
          "607:     unsigned char secret_a[MAX_ECDH_SIZE], secret_b[MAX_ECDH_SIZE];",
          "608:     int secret_size_a, secret_size_b;",
          "609:     int ecdh_checks = 0;",
          "610:     int secret_idx = 0;",
          "611:     long ecdh_c[EC_NUM][2];",
          "612: #endif",
          "614:     int rsa_doit[RSA_NUM];",
          "615:     int dsa_doit[DSA_NUM];",
          "622:     int doit[ALGOR_NUM];",
          "623:     int pr_header = 0;",
          "624:     const EVP_CIPHER *evp_cipher = NULL;",
          "",
          "[Removed Lines]",
          "598: #ifndef OPENSSL_NO_ECDSA",
          "603: #endif",
          "605: #ifndef OPENSSL_NO_ECDH",
          "616: #ifndef OPENSSL_NO_ECDSA",
          "617:     int ecdsa_doit[EC_NUM];",
          "618: #endif",
          "619: #ifndef OPENSSL_NO_ECDH",
          "620:     int ecdh_doit[EC_NUM];",
          "621: #endif",
          "",
          "[Added Lines]",
          "594: #ifndef OPENSSL_NO_EC",
          "605:     int ecdsa_doit[EC_NUM];",
          "606:     int ecdh_doit[EC_NUM];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "639: #ifndef OPENSSL_NO_DSA",
          "640:     memset(dsa_key, 0, sizeof(dsa_key));",
          "641: #endif",
          "643:     for (i = 0; i < EC_NUM; i++)",
          "644:         ecdsa[i] = NULL;",
          "647:     for (i = 0; i < EC_NUM; i++) {",
          "648:         ecdh_a[i] = NULL;",
          "649:         ecdh_b[i] = NULL;",
          "",
          "[Removed Lines]",
          "642: #ifndef OPENSSL_NO_ECDSA",
          "645: #endif",
          "646: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "631: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "689:         rsa_doit[i] = 0;",
          "690:     for (i = 0; i < DSA_NUM; i++)",
          "691:         dsa_doit[i] = 0;",
          "693:     for (i = 0; i < EC_NUM; i++)",
          "694:         ecdsa_doit[i] = 0;",
          "697:     for (i = 0; i < EC_NUM; i++)",
          "698:         ecdh_doit[i] = 0;",
          "699: #endif",
          "",
          "[Removed Lines]",
          "692: #ifndef OPENSSL_NO_ECDSA",
          "695: #endif",
          "696: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "679: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "986:             dsa_doit[R_DSA_2048] = 1;",
          "987:         } else",
          "988: #endif",
          "990:         if (strcmp(*argv, \"ecdsap160\") == 0)",
          "991:             ecdsa_doit[R_EC_P160] = 2;",
          "992:         else if (strcmp(*argv, \"ecdsap192\") == 0)",
          "",
          "[Removed Lines]",
          "989: #ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "974: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1022:         else if (strcmp(*argv, \"ecdsa\") == 0) {",
          "1023:             for (i = 0; i < EC_NUM; i++)",
          "1024:                 ecdsa_doit[i] = 1;",
          "1029:             ecdh_doit[R_EC_P160] = 2;",
          "1030:         else if (strcmp(*argv, \"ecdhp192\") == 0)",
          "1031:             ecdh_doit[R_EC_P192] = 2;",
          "",
          "[Removed Lines]",
          "1025:         } else",
          "1026: #endif",
          "1027: #ifndef OPENSSL_NO_ECDH",
          "1028:         if (strcmp(*argv, \"ecdhp160\") == 0)",
          "",
          "[Added Lines]",
          "1010:         } else if (strcmp(*argv, \"ecdhp160\") == 0)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1135: #ifndef OPENSSL_NO_DSA",
          "1136:             BIO_printf(bio_err, \"dsa512   dsa1024  dsa2048\\n\");",
          "1137: #endif",
          "1139:             BIO_printf(bio_err, \"ecdsap160 ecdsap192 ecdsap224 \"",
          "1140:                        \"ecdsap256 ecdsap384 ecdsap521\\n\");",
          "1141:             BIO_printf(bio_err,",
          "",
          "[Removed Lines]",
          "1138: #ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "1120: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1143:             BIO_printf(bio_err,",
          "1144:                        \"ecdsab163 ecdsab233 ecdsab283 ecdsab409 ecdsab571\\n\");",
          "1145:             BIO_printf(bio_err, \"ecdsa\\n\");",
          "1148:             BIO_printf(bio_err, \"ecdhp160  ecdhp192  ecdhp224 \"",
          "1149:                        \"ecdhp256  ecdhp384  ecdhp521\\n\");",
          "1150:             BIO_printf(bio_err,",
          "",
          "[Removed Lines]",
          "1146: #endif",
          "1147: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1234:             rsa_doit[i] = 1;",
          "1235:         for (i = 0; i < DSA_NUM; i++)",
          "1236:             dsa_doit[i] = 1;",
          "1238:         for (i = 0; i < EC_NUM; i++)",
          "1239:             ecdsa_doit[i] = 1;",
          "1242:         for (i = 0; i < EC_NUM; i++)",
          "1243:             ecdh_doit[i] = 1;",
          "1244: #endif",
          "",
          "[Removed Lines]",
          "1237: #ifndef OPENSSL_NO_ECDSA",
          "1240: #endif",
          "1241: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "1217: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1428:     }",
          "1429: #  endif",
          "1432:     ecdsa_c[R_EC_P160][0] = count / 1000;",
          "1433:     ecdsa_c[R_EC_P160][1] = count / 1000 / 2;",
          "1434:     for (i = R_EC_P192; i <= R_EC_P521; i++) {",
          "",
          "[Removed Lines]",
          "1431: #  ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "1409: #  ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1471:             }",
          "1472:         }",
          "1473:     }",
          "1477:     ecdh_c[R_EC_P160][0] = count / 1000;",
          "1478:     ecdh_c[R_EC_P160][1] = count / 1000;",
          "1479:     for (i = R_EC_P192; i <= R_EC_P521; i++) {",
          "",
          "[Removed Lines]",
          "1474: #  endif",
          "1476: #  ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2144:         RAND_cleanup();",
          "2145: #endif",
          "2148:     if (RAND_status() != 1) {",
          "2149:         RAND_seed(rnd_seed, sizeof rnd_seed);",
          "2150:         rnd_fake = 1;",
          "",
          "[Removed Lines]",
          "2147: #ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "2122: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2236:     }",
          "2237:     if (rnd_fake)",
          "2238:         RAND_cleanup();",
          "2242:     if (RAND_status() != 1) {",
          "2243:         RAND_seed(rnd_seed, sizeof rnd_seed);",
          "2244:         rnd_fake = 1;",
          "",
          "[Removed Lines]",
          "2239: #endif",
          "2241: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2423:                     1.0 / dsa_results[k][0], 1.0 / dsa_results[k][1]);",
          "2424:     }",
          "2425: #endif",
          "2427:     j = 1;",
          "2428:     for (k = 0; k < EC_NUM; k++) {",
          "2429:         if (!ecdsa_doit[k])",
          "",
          "[Removed Lines]",
          "2426: #ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "2398: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2445:                     ecdsa_results[k][0], ecdsa_results[k][1],",
          "2446:                     1.0 / ecdsa_results[k][0], 1.0 / ecdsa_results[k][1]);",
          "2447:     }",
          "2451:     j = 1;",
          "2452:     for (k = 0; k < EC_NUM; k++) {",
          "2453:         if (!ecdh_doit[k])",
          "",
          "[Removed Lines]",
          "2448: #endif",
          "2450: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2488:             DSA_free(dsa_key[i]);",
          "2489: #endif",
          "2492:     for (i = 0; i < EC_NUM; i++)",
          "2493:         if (ecdsa[i] != NULL)",
          "2494:             EC_KEY_free(ecdsa[i]);",
          "2497:     for (i = 0; i < EC_NUM; i++) {",
          "2498:         if (ecdh_a[i] != NULL)",
          "2499:             EC_KEY_free(ecdh_a[i]);",
          "",
          "[Removed Lines]",
          "2491: #ifndef OPENSSL_NO_ECDSA",
          "2495: #endif",
          "2496: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "2460: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2697:                     dsa_results[k][1] = d;",
          "2698:             }",
          "2699: # endif",
          "2701:             else if (!strncmp(buf, \"+F4:\", 4)) {",
          "2702:                 int k;",
          "2703:                 double d;",
          "",
          "[Removed Lines]",
          "2700: # ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "2667: # ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2720:                 else",
          "2721:                     ecdsa_results[k][1] = d;",
          "2722:             }",
          "2726:             else if (!strncmp(buf, \"+F5:\", 4)) {",
          "2727:                 int k;",
          "2728:                 double d;",
          "",
          "[Removed Lines]",
          "2723: # endif",
          "2725: # ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "crypto/ec/ec_pmeth.c||crypto/ec/ec_pmeth.c": [
          "File: crypto/ec/ec_pmeth.c -> crypto/ec/ec_pmeth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:     return ret;",
          "204: }",
          "207: static int pkey_ec_derive(EVP_PKEY_CTX *ctx, unsigned char *key,",
          "208:                           size_t *keylen)",
          "209: {",
          "",
          "[Removed Lines]",
          "206: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "206: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "302:         EC_GROUP_set_asn1_flag(dctx->gen_group, p1);",
          "303:         return 1;",
          "306:     case EVP_PKEY_CTRL_EC_ECDH_COFACTOR:",
          "307:         if (p1 == -2) {",
          "308:             if (dctx->cofactor_mode != -1)",
          "",
          "[Removed Lines]",
          "305: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "305: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "519:     0, 0,",
          "521:     0,",
          "523:     pkey_ec_kdf_derive,",
          "524: #else",
          "525:     0,",
          "526: #endif",
          "528:     pkey_ec_ctrl,",
          "529:     pkey_ec_ctrl_str",
          "530: };",
          "",
          "[Removed Lines]",
          "522: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "522: #ifndef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "crypto/ecdh/ecdh.h||crypto/ecdh/ecdh.h": [
          "File: crypto/ecdh/ecdh.h -> crypto/ecdh/ecdh.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "72: # include <openssl/opensslconf.h>",
          "75: #  error ECDH is disabled.",
          "76: # endif",
          "",
          "[Removed Lines]",
          "74: # ifdef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "74: # ifdef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "crypto/ecdh/ecdhtest.c||crypto/ecdh/ecdhtest.c": [
          "File: crypto/ecdh/ecdhtest.c -> crypto/ecdh/ecdhtest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "82: #include <openssl/sha.h>",
          "83: #include <openssl/err.h>",
          "86: int main(int argc, char *argv[])",
          "87: {",
          "88:     printf(\"No ECDH support\\n\");",
          "",
          "[Removed Lines]",
          "85: #ifdef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "85: #ifdef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "crypto/ecdsa/ecdsa.h||crypto/ecdsa/ecdsa.h": [
          "File: crypto/ecdsa/ecdsa.h -> crypto/ecdsa/ecdsa.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "62: # include <openssl/opensslconf.h>",
          "65: #  error ECDSA is disabled.",
          "66: # endif",
          "",
          "[Removed Lines]",
          "64: # ifdef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "64: # ifdef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "crypto/ecdsa/ecdsatest.c||crypto/ecdsa/ecdsatest.c": [
          "File: crypto/ecdsa/ecdsatest.c -> crypto/ecdsa/ecdsatest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: #include <stdlib.h>",
          "74: #include <string.h>",
          "79: int main(int argc, char *argv[])",
          "80: {",
          "81:     puts(\"Elliptic curves are disabled.\");",
          "",
          "[Removed Lines]",
          "78: #ifdef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "78: #ifdef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "crypto/engine/eng_fat.c||crypto/engine/eng_fat.c": [
          "File: crypto/engine/eng_fat.c -> crypto/engine/eng_fat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:     if ((flags & ENGINE_METHOD_DH) && !ENGINE_set_default_DH(e))",
          "80:         return 0;",
          "81: #endif",
          "83:     if ((flags & ENGINE_METHOD_ECDH) && !ENGINE_set_default_ECDH(e))",
          "84:         return 0;",
          "87:     if ((flags & ENGINE_METHOD_ECDSA) && !ENGINE_set_default_ECDSA(e))",
          "88:         return 0;",
          "89: #endif",
          "",
          "[Removed Lines]",
          "82: #ifndef OPENSSL_NO_ECDH",
          "85: #endif",
          "86: #ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "82: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159: #ifndef OPENSSL_NO_DH",
          "160:     ENGINE_register_DH(e);",
          "161: #endif",
          "163:     ENGINE_register_ECDH(e);",
          "166:     ENGINE_register_ECDSA(e);",
          "167: #endif",
          "168:     ENGINE_register_RAND(e);",
          "",
          "[Removed Lines]",
          "162: #ifndef OPENSSL_NO_ECDH",
          "164: #endif",
          "165: #ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "160: #ifndef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "crypto/engine/eng_list.c||crypto/engine/eng_list.c": [
          "File: crypto/engine/eng_list.c -> crypto/engine/eng_list.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "300: #ifndef OPENSSL_NO_DH",
          "301:     dest->dh_meth = src->dh_meth;",
          "302: #endif",
          "304:     dest->ecdh_meth = src->ecdh_meth;",
          "307:     dest->ecdsa_meth = src->ecdsa_meth;",
          "308: #endif",
          "309:     dest->rand_meth = src->rand_meth;",
          "",
          "[Removed Lines]",
          "303: #ifndef OPENSSL_NO_ECDH",
          "305: #endif",
          "306: #ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "303: #ifndef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "crypto/engine/eng_openssl.c||crypto/engine/eng_openssl.c": [
          "File: crypto/engine/eng_openssl.c -> crypto/engine/eng_openssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "149: # ifndef OPENSSL_NO_DSA",
          "150:         || !ENGINE_set_DSA(e, DSA_get_default_method())",
          "151: # endif",
          "153:         || !ENGINE_set_ECDH(e, ECDH_OpenSSL())",
          "156:         || !ENGINE_set_ECDSA(e, ECDSA_OpenSSL())",
          "157: # endif",
          "158: # ifndef OPENSSL_NO_DH",
          "",
          "[Removed Lines]",
          "152: # ifndef OPENSSL_NO_ECDH",
          "154: # endif",
          "155: # ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "152: # ifndef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "crypto/engine/engine.h||crypto/engine/engine.h": [
          "File: crypto/engine/engine.h -> crypto/engine/engine.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "82: #  ifndef OPENSSL_NO_DH",
          "83: #   include <openssl/dh.h>",
          "84: #  endif",
          "86: #   include <openssl/ecdh.h>",
          "89: #   include <openssl/ecdsa.h>",
          "90: #  endif",
          "91: #  include <openssl/rand.h>",
          "",
          "[Removed Lines]",
          "85: #  ifndef OPENSSL_NO_ECDH",
          "87: #  endif",
          "88: #  ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "85: #  ifndef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "crypto/err/err_all.c||crypto/err/err_all.c": [
          "File: crypto/err/err_all.c -> crypto/err/err_all.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "76: #ifndef OPENSSL_NO_DSA",
          "77: # include <openssl/dsa.h>",
          "78: #endif",
          "80: # include <openssl/ecdsa.h>",
          "83: # include <openssl/ecdh.h>",
          "84: #endif",
          "85: #include <openssl/evp.h>",
          "",
          "[Removed Lines]",
          "79: #ifndef OPENSSL_NO_ECDSA",
          "81: #endif",
          "82: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "79: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138: # endif",
          "139: # ifndef OPENSSL_NO_EC",
          "140:     ERR_load_EC_strings();",
          "143:     ERR_load_ECDSA_strings();",
          "146:     ERR_load_ECDH_strings();",
          "147: # endif",
          "",
          "[Removed Lines]",
          "141: # endif",
          "142: # ifndef OPENSSL_NO_ECDSA",
          "144: # endif",
          "145: # ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "crypto/evp/c_alld.c||crypto/evp/c_alld.c": [
          "File: crypto/evp/c_alld.c -> crypto/evp/c_alld.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:     EVP_add_digest_alias(SN_dsaWithSHA1, \"DSS1\");",
          "81:     EVP_add_digest_alias(SN_dsaWithSHA1, \"dss1\");",
          "82: # endif",
          "84:     EVP_add_digest(EVP_ecdsa());",
          "85: # endif",
          "86: #if !defined(OPENSSL_NO_MDC2) && !defined(OPENSSL_NO_DES)",
          "",
          "[Removed Lines]",
          "83: # ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "83: # ifndef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "crypto/evp/evp.h||crypto/evp/evp.h": [
          "File: crypto/evp/evp.h -> crypto/evp/evp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "234: #   define EVP_PKEY_DSA_method     EVP_PKEY_NULL_method",
          "235: #  endif",
          "238: #   define EVP_PKEY_ECDSA_method   (evp_sign_method *)ECDSA_sign, \\",
          "239:                                 (evp_verify_method *)ECDSA_verify, \\",
          "240:                                  {EVP_PKEY_EC,0,0,0}",
          "",
          "[Removed Lines]",
          "237: #  ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "237: #  ifndef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "crypto/x509/x509.h||crypto/x509/x509.h": [
          "File: crypto/x509/x509.h -> crypto/x509/x509.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "76: # ifndef OPENSSL_NO_EC",
          "77: #  include <openssl/ec.h>",
          "81: #  include <openssl/ecdsa.h>",
          "85: #  include <openssl/ecdh.h>",
          "86: # endif",
          "",
          "[Removed Lines]",
          "78: # endif",
          "80: # ifndef OPENSSL_NO_ECDSA",
          "82: # endif",
          "84: # ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1321: #ifndef OPENSSL_NO_DH",
          "1322:     DH *dh = NULL;",
          "1323: #endif",
          "1325:     EC_KEY *ecdh = NULL;",
          "1326:     BN_CTX *bn_ctx = NULL;",
          "1327:     EC_POINT *srvr_ecpoint = NULL;",
          "",
          "[Removed Lines]",
          "1324: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "1324: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1385:             s->session->sess_cert->peer_dh_tmp = NULL;",
          "1386:         }",
          "1387: #endif",
          "1389:         if (s->session->sess_cert->peer_ecdh_tmp) {",
          "1390:             EC_KEY_free(s->session->sess_cert->peer_ecdh_tmp);",
          "1391:             s->session->sess_cert->peer_ecdh_tmp = NULL;",
          "",
          "[Removed Lines]",
          "1388: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "1388: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1724:     }",
          "1728:     else if (alg_k & SSL_kECDHE) {",
          "1729:         EC_GROUP *ngroup;",
          "1730:         const EC_GROUP *group;",
          "",
          "[Removed Lines]",
          "1727: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "1727: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1822:                 X509_get_pubkey(s->session->",
          "1823:                                 sess_cert->peer_pkeys[SSL_PKEY_RSA_ENC].x509);",
          "1824: # endif",
          "1826:         else if (alg_a & SSL_aECDSA)",
          "1827:             pkey =",
          "1828:                 X509_get_pubkey(s->session->",
          "",
          "[Removed Lines]",
          "1825: # ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "1825: # ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1961:     if (dh != NULL)",
          "1962:         DH_free(dh);",
          "1963: #endif",
          "1965:     BN_CTX_free(bn_ctx);",
          "1966:     EC_POINT_free(srvr_ecpoint);",
          "1967:     if (ecdh != NULL)",
          "",
          "[Removed Lines]",
          "1964: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "1964: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2299: #ifndef OPENSSL_NO_KRB5",
          "2300:     KSSL_ERR kssl_err;",
          "2303:     EC_KEY *clnt_ecdh = NULL;",
          "2304:     const EC_POINT *srvr_ecpoint = NULL;",
          "2305:     EVP_PKEY *srvr_pub_pkey = NULL;",
          "",
          "[Removed Lines]",
          "2302: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "2302: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2597:         }",
          "2598: #endif",
          "2601:         else if (alg_k & (SSL_kECDHE | SSL_kECDHr | SSL_kECDHe)) {",
          "2602:             const EC_GROUP *srvr_group = NULL;",
          "2603:             EC_KEY *tkey;",
          "",
          "[Removed Lines]",
          "2600: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "2600: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3054:         OPENSSL_free(pms);",
          "3055:         s->cert->pms = NULL;",
          "3056:     }",
          "3058:     BN_CTX_free(bn_ctx);",
          "3059:     if (encodedPoint != NULL)",
          "3060:         OPENSSL_free(encodedPoint);",
          "",
          "[Removed Lines]",
          "3057: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "3057: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3156:             n = j + 2;",
          "3157:         } else",
          "3158: #endif",
          "3160:         if (pkey->type == EVP_PKEY_EC) {",
          "3161:             if (!ECDSA_sign(pkey->save_type,",
          "3162:                             &(data[MD5_DIGEST_LENGTH]),",
          "",
          "[Removed Lines]",
          "3159: #ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "3159: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3367:     idx = sc->peer_cert_type;",
          "3369:     if (idx == SSL_PKEY_ECC) {",
          "3370:         if (ssl_check_srvr_ecc_cert_and_alg(sc->peer_pkeys[idx].x509, s) == 0) {",
          "",
          "[Removed Lines]",
          "3368: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "3368: #ifndef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "ssl/s3_lib.c||ssl/s3_lib.c": [
          "File: ssl/s3_lib.c -> ssl/s3_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2051:      },",
          "2052: #endif",
          "2056:     {",
          "2057:      1,",
          "",
          "[Removed Lines]",
          "2054: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "2054: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2598:      256,",
          "2599:      },",
          "",
          "[Removed Lines]",
          "2601: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "2601: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3138:     if (s->s3->tmp.dh != NULL)",
          "3139:         DH_free(s->s3->tmp.dh);",
          "3140: #endif",
          "3142:     if (s->s3->tmp.ecdh != NULL)",
          "3143:         EC_KEY_free(s->s3->tmp.ecdh);",
          "3144: #endif",
          "",
          "[Removed Lines]",
          "3141: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "3141: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3183:         s->s3->tmp.dh = NULL;",
          "3184:     }",
          "3185: #endif",
          "3187:     if (s->s3->tmp.ecdh != NULL) {",
          "3188:         EC_KEY_free(s->s3->tmp.ecdh);",
          "3189:         s->s3->tmp.ecdh = NULL;",
          "",
          "[Removed Lines]",
          "3186: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "3186: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3357:         s->cert->dh_tmp_auto = larg;",
          "3358:         return 1;",
          "3359: #endif",
          "3361:     case SSL_CTRL_SET_TMP_ECDH:",
          "3362:         {",
          "3363:             EC_KEY *ecdh = NULL;",
          "",
          "[Removed Lines]",
          "3360: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "3360: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3558:     case SSL_CTRL_GET_SHARED_CURVE:",
          "3559:         return tls1_shared_curve(s, larg);",
          "3562:     case SSL_CTRL_SET_ECDH_AUTO:",
          "3563:         s->cert->ecdh_tmp_auto = larg;",
          "3564:         return 1;",
          "",
          "[Removed Lines]",
          "3561: # ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "3561: # ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3629:             EVP_PKEY *ptmp;",
          "3630:             int rv = 0;",
          "3631:             sc = s->session->sess_cert;",
          "3633:             if (!sc->peer_rsa_tmp && !sc->peer_dh_tmp && !sc->peer_ecdh_tmp)",
          "3634:                 return 0;",
          "3635: #endif",
          "",
          "[Removed Lines]",
          "3632: #if !defined(OPENSSL_NO_RSA) && !defined(OPENSSL_NO_DH) && !defined(OPENSSL_NO_EC) && !defined(OPENSSL_NO_ECDH)",
          "",
          "[Added Lines]",
          "3632: #if !defined(OPENSSL_NO_RSA) && !defined(OPENSSL_NO_DH) && !defined(OPENSSL_NO_EC)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3645:             else if (sc->peer_dh_tmp)",
          "3646:                 rv = EVP_PKEY_set1_DH(ptmp, sc->peer_dh_tmp);",
          "3647: #endif",
          "3649:             else if (sc->peer_ecdh_tmp)",
          "3650:                 rv = EVP_PKEY_set1_EC_KEY(ptmp, sc->peer_ecdh_tmp);",
          "3651: #endif",
          "",
          "[Removed Lines]",
          "3648: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "3648: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3736:         }",
          "3737:         break;",
          "3738: #endif",
          "3740:     case SSL_CTRL_SET_TMP_ECDH_CB:",
          "3741:         {",
          "3742:             s->cert->ecdh_tmp_cb = (EC_KEY *(*)(SSL *, int, int))fp;",
          "",
          "[Removed Lines]",
          "3739: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "3739: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3847:         ctx->cert->dh_tmp_auto = larg;",
          "3848:         return 1;",
          "3849: #endif",
          "3851:     case SSL_CTRL_SET_TMP_ECDH:",
          "3852:         {",
          "3853:             EC_KEY *ecdh = NULL;",
          "",
          "[Removed Lines]",
          "3850: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "3850: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3955:         return tls1_set_curves_list(&ctx->tlsext_ellipticcurvelist,",
          "3956:                                     &ctx->tlsext_ellipticcurvelist_length,",
          "3957:                                     parg);",
          "3959:     case SSL_CTRL_SET_ECDH_AUTO:",
          "3960:         ctx->cert->ecdh_tmp_auto = larg;",
          "3961:         return 1;",
          "",
          "[Removed Lines]",
          "3958: #  ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "3958: #  ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4059:         }",
          "4060:         break;",
          "4061: #endif",
          "4063:     case SSL_CTRL_SET_TMP_ECDH_CB:",
          "4064:         {",
          "4065:             cert->ecdh_tmp_cb = (EC_KEY *(*)(SSL *, int, int))fp;",
          "",
          "[Removed Lines]",
          "4062: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "4062: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4252: #ifndef OPENSSL_NO_TLSEXT",
          "4253: # ifndef OPENSSL_NO_EC",
          "4259:         if (alg_k & SSL_kECDHE)",
          "4260:             ok = ok && tls1_check_ec_tmp_key(s, c->id);",
          "",
          "[Removed Lines]",
          "4254: #  ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "4346:     if (!(alg_a & SSL_aDSS))",
          "4347:         p[ret++] = SSL3_CT_DSS_SIGN;",
          "4348: #endif",
          "4350:     if ((alg_k & (SSL_kECDHr | SSL_kECDHe)) && (s->version >= TLS1_VERSION)) {",
          "4351:         if (nostrict || !(alg_a & SSL_aRSA))",
          "4352:             p[ret++] = TLS_CT_RSA_FIXED_ECDH;",
          "4353:         if (nostrict || !(alg_a & SSL_aECDSA))",
          "4354:             p[ret++] = TLS_CT_ECDSA_FIXED_ECDH;",
          "4355:     }",
          "",
          "[Removed Lines]",
          "4349: #ifndef OPENSSL_NO_ECDH",
          "4356: #endif",
          "4358: #ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "4347: #ifndef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "ssl/s3_srvr.c||ssl/s3_srvr.c": [
          "File: ssl/s3_srvr.c -> ssl/s3_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1532: #ifndef OPENSSL_NO_DH",
          "1533:     DH *dh = NULL, *dhp;",
          "1534: #endif",
          "1536:     EC_KEY *ecdh = NULL, *ecdhp;",
          "1537:     unsigned char *encodedPoint = NULL;",
          "1538:     int encodedlen = 0;",
          "",
          "[Removed Lines]",
          "1535: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "1535: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1654:             r[2] = dh->pub_key;",
          "1655:         } else",
          "1656: #endif",
          "1658:         if (type & SSL_kECDHE) {",
          "1659:             const EC_GROUP *group;",
          "",
          "[Removed Lines]",
          "1657: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "1657: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1853:             p += nr[i];",
          "1854:         }",
          "1857:         if (type & SSL_kECDHE) {",
          "",
          "[Removed Lines]",
          "1856: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "1856: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3001:         }",
          "3002:     } else",
          "3003: #endif",
          "3005:     if (pkey->type == EVP_PKEY_EC) {",
          "3006:         j = ECDSA_verify(pkey->save_type,",
          "3007:                          &(s->s3->tmp.cert_verify_md[MD5_DIGEST_LENGTH]),",
          "",
          "[Removed Lines]",
          "3004: #ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "3004: #ifndef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "ssl/ssl.h||ssl/ssl.h": [
          "File: ssl/ssl.h -> ssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1760:                              DH *(*dh) (SSL *ssl, int is_export,",
          "1761:                                         int keylength));",
          "1762: # endif",
          "1764: void SSL_CTX_set_tmp_ecdh_callback(SSL_CTX *ctx,",
          "1765:                                    EC_KEY *(*ecdh) (SSL *ssl, int is_export,",
          "1766:                                                     int keylength));",
          "",
          "[Removed Lines]",
          "1763: # ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "1763: # ifndef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "ssl/ssl_algs.c||ssl/ssl_algs.c": [
          "File: ssl/ssl_algs.c -> ssl/ssl_algs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:     EVP_add_digest_alias(SN_dsaWithSHA1, \"DSS1\");",
          "123:     EVP_add_digest_alias(SN_dsaWithSHA1, \"dss1\");",
          "124: #endif",
          "126:     EVP_add_digest(EVP_ecdsa());",
          "127: #endif",
          "128: #ifndef OPENSSL_NO_COMP",
          "",
          "[Removed Lines]",
          "125: #ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "125: #ifndef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "ssl/ssl_cert.c||ssl/ssl_cert.c": [
          "File: ssl/ssl_cert.c -> ssl/ssl_cert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:     cert->pkeys[SSL_PKEY_RSA_SIGN].digest = EVP_sha1();",
          "176:     cert->pkeys[SSL_PKEY_RSA_ENC].digest = EVP_sha1();",
          "177: #endif",
          "179:     cert->pkeys[SSL_PKEY_ECC].digest = EVP_sha1();",
          "180: #endif",
          "181: }",
          "",
          "[Removed Lines]",
          "178: #ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "178: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "261:     ret->dh_tmp_auto = cert->dh_tmp_auto;",
          "262: #endif",
          "265:     if (cert->ecdh_tmp) {",
          "266:         ret->ecdh_tmp = EC_KEY_dup(cert->ecdh_tmp);",
          "267:         if (ret->ecdh_tmp == NULL) {",
          "",
          "[Removed Lines]",
          "264: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "264: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "450:     if (c->dh_tmp)",
          "451:         DH_free(c->dh_tmp);",
          "452: #endif",
          "454:     if (c->ecdh_tmp)",
          "455:         EC_KEY_free(c->ecdh_tmp);",
          "456: #endif",
          "",
          "[Removed Lines]",
          "453: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "453: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "683:     if (sc->peer_dh_tmp != NULL)",
          "684:         DH_free(sc->peer_dh_tmp);",
          "685: #endif",
          "687:     if (sc->peer_ecdh_tmp != NULL)",
          "688:         EC_KEY_free(sc->peer_ecdh_tmp);",
          "689: #endif",
          "",
          "[Removed Lines]",
          "686: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "686: #ifndef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "ssl/ssl_ciph.c||ssl/ssl_ciph.c": [
          "File: ssl/ssl_ciph.c -> ssl/ssl_ciph.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "750: #endif",
          "757: #endif",
          "758: #ifdef OPENSSL_NO_PSK",
          "",
          "[Removed Lines]",
          "751: #ifdef OPENSSL_NO_ECDSA",
          "753: #endif",
          "754: #ifdef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "751: #ifdef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1437:                    SSL_R_ONLY_TLS_1_2_ALLOWED_IN_SUITEB_MODE);",
          "1438:         return 0;",
          "1439:     }",
          "1441:     switch (suiteb_flags) {",
          "1442:     case SSL_CERT_FLAG_SUITEB_128_LOS:",
          "1443:         if (suiteb_comb2)",
          "",
          "[Removed Lines]",
          "1440: # ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "1437: # ifndef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "ssl/ssl_conf.c||ssl/ssl_conf.c": [
          "File: ssl/ssl_conf.c -> ssl/ssl_conf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "257:     return rv > 0;",
          "258: }",
          "262: static int cmd_ECDHParameters(SSL_CONF_CTX *cctx, const char *value)",
          "263: {",
          "",
          "[Removed Lines]",
          "260: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "260: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "447:     SSL_CONF_CMD_STRING(SignatureAlgorithms, \"sigalgs\"),",
          "448:     SSL_CONF_CMD_STRING(ClientSignatureAlgorithms, \"client_sigalgs\"),",
          "449:     SSL_CONF_CMD_STRING(Curves, \"curves\"),",
          "451:     SSL_CONF_CMD_STRING(ECDHParameters, \"named_curve\"),",
          "452: #endif",
          "453:     SSL_CONF_CMD_STRING(CipherString, \"cipher\"),",
          "",
          "[Removed Lines]",
          "450: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "450: #ifndef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "ssl/ssl_lib.c||ssl/ssl_lib.c": [
          "File: ssl/ssl_lib.c -> ssl/ssl_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2153:     int rsa_enc_export, dh_rsa_export, dh_dsa_export;",
          "2154:     int rsa_tmp_export, dh_tmp_export, kl;",
          "2155:     unsigned long mask_k, mask_a, emask_k, emask_a;",
          "2157:     int have_ecc_cert, ecdsa_ok, ecc_pkey_size;",
          "2160:     int have_ecdh_tmp, ecdh_ok;",
          "2163:     X509 *x = NULL;",
          "2164:     EVP_PKEY *ecc_pkey = NULL;",
          "2165:     int signature_nid = 0, pk_nid = 0, md_nid = 0;",
          "",
          "[Removed Lines]",
          "2156: #ifndef OPENSSL_NO_ECDSA",
          "2158: #endif",
          "2159: #ifndef OPENSSL_NO_ECDH",
          "2161: #endif",
          "2162: #ifndef OPENSSL_NO_EC",
          "",
          "[Added Lines]",
          "2156: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2185:     dh_tmp = dh_tmp_export = 0;",
          "2186: #endif",
          "2189:     have_ecdh_tmp = (c->ecdh_tmp || c->ecdh_tmp_cb || c->ecdh_tmp_auto);",
          "2190: #endif",
          "2191:     cpk = &(c->pkeys[SSL_PKEY_RSA_ENC]);",
          "",
          "[Removed Lines]",
          "2188: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "2184: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2283:         x = cpk->x509;",
          "2285:         X509_check_purpose(x, -1, 0);",
          "2287:         ecdh_ok = (x->ex_flags & EXFLAG_KUSAGE) ?",
          "2288:             (x->ex_kusage & X509v3_KU_KEY_AGREEMENT) : 1;",
          "2290:         ecdsa_ok = (x->ex_flags & EXFLAG_KUSAGE) ?",
          "2291:             (x->ex_kusage & X509v3_KU_DIGITAL_SIGNATURE) : 1;",
          "2292:         if (!(cpk->valid_flags & CERT_PKEY_SIGN))",
          "",
          "[Removed Lines]",
          "2286: # ifndef OPENSSL_NO_ECDH",
          "2289: # endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2298:             signature_nid = OBJ_obj2nid(x->sig_alg->algorithm);",
          "2299:             OBJ_find_sigid_algs(signature_nid, &md_nid, &pk_nid);",
          "2300:         }",
          "2302:         if (ecdh_ok) {",
          "2304:             if (pk_nid == NID_rsaEncryption || pk_nid == NID_rsa) {",
          "",
          "[Removed Lines]",
          "2301: # ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2319:                 }",
          "2320:             }",
          "2321:         }",
          "2324:         if (ecdsa_ok) {",
          "2325:             mask_a |= SSL_aECDSA;",
          "2326:             emask_a |= SSL_aECDSA;",
          "2327:         }",
          "2329:     }",
          "2330: #endif",
          "2333:     if (have_ecdh_tmp) {",
          "2334:         mask_k |= SSL_kECDHE;",
          "2335:         emask_k |= SSL_kECDHE;",
          "",
          "[Removed Lines]",
          "2322: # endif",
          "2323: # ifndef OPENSSL_NO_ECDSA",
          "2328: # endif",
          "2332: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "2322: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3267: }",
          "3268: #endif",
          "3271: void SSL_CTX_set_tmp_ecdh_callback(SSL_CTX *ctx,",
          "3272:                                    EC_KEY *(*ecdh) (SSL *ssl, int is_export,",
          "3273:                                                     int keylength))",
          "",
          "[Removed Lines]",
          "3270: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "3260: #ifndef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1350: #  ifndef OPENSSL_NO_DH",
          "1351:         DH *dh;",
          "1352: #  endif",
          "1355: #  endif",
          "",
          "[Removed Lines]",
          "1353: #  ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "1353: #  ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1662:     DH *(*dh_tmp_cb) (SSL *ssl, int is_export, int keysize);",
          "1663:     int dh_tmp_auto;",
          "1664: # endif",
          "1666:     EC_KEY *ecdh_tmp;",
          "1668:     EC_KEY *(*ecdh_tmp_cb) (SSL *ssl, int is_export, int keysize);",
          "",
          "[Removed Lines]",
          "1665: # ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "1665: # ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1760: # ifndef OPENSSL_NO_DH",
          "1762: # endif",
          "1764:     EC_KEY *peer_ecdh_tmp;",
          "1765: # endif",
          "",
          "[Removed Lines]",
          "1763: # ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "1763: # ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2317: int ssl3_alert_code(int code);",
          "2318: int ssl_ok(SSL *s);",
          "2321: int ssl_check_srvr_ecc_cert_and_alg(X509 *x, SSL *s);",
          "2322: #  endif",
          "",
          "[Removed Lines]",
          "2320: #  ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "2320: #  ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2332:                     int *curves, size_t ncurves);",
          "2333: int tls1_set_curves_list(unsigned char **pext, size_t *pextlen,",
          "2334:                          const char *str);",
          "2336: int tls1_check_ec_tmp_key(SSL *s, unsigned long id);",
          "2340: #  ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Removed Lines]",
          "2335: #   ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/ssltest.c||ssl/ssltest.c": [
          "File: ssl/ssltest.c -> ssl/ssltest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "774:             \" -dhe1024dsa   - use 1024 bit key (with 160-bit subprime) for DHE\\n\");",
          "775:     fprintf(stderr, \" -no_dhe       - disable DHE\\n\");",
          "776: #endif",
          "778:     fprintf(stderr, \" -no_ecdhe     - disable ECDHE\\n\");",
          "779: #endif",
          "780: #ifndef OPENSSL_NO_PSK",
          "",
          "[Removed Lines]",
          "777: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "777: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "803:             \" -time         - measure processor time used by client and server\\n\");",
          "804:     fprintf(stderr, \" -zlib         - use zlib compression\\n\");",
          "805:     fprintf(stderr, \" -rle          - use rle compression\\n\");",
          "807:     fprintf(stderr,",
          "808:             \" -named_curve arg  - Elliptic curve name to use for ephemeral ECDH keys.\\n\"",
          "809:             \"                 Use \\\"openssl ecparam -list_curves\\\" for all names\\n\"",
          "",
          "[Removed Lines]",
          "806: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "806: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "967:     char *server_key = NULL;",
          "968:     char *client_cert = TEST_CLIENT_CERT;",
          "969:     char *client_key = NULL;",
          "971:     char *named_curve = NULL;",
          "972: #endif",
          "973:     SSL_CTX *s_ctx = NULL;",
          "",
          "[Removed Lines]",
          "970: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "970: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "980:     DH *dh;",
          "981:     int dhe1024 = 0, dhe1024dsa = 0;",
          "982: #endif",
          "984:     EC_KEY *ecdh = NULL;",
          "985: #endif",
          "986: #ifndef OPENSSL_NO_SRP",
          "",
          "[Removed Lines]",
          "983: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "983: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1206:         else if (strcmp(*argv, \"-named_curve\") == 0) {",
          "1207:             if (--argc < 1)",
          "1208:                 goto bad;",
          "1210:             named_curve = *(++argv);",
          "1211: #else",
          "1212:             fprintf(stderr,",
          "",
          "[Removed Lines]",
          "1209: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "1209: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1470:     (void)no_dhe;",
          "1471: #endif",
          "1474:     if (!no_ecdhe) {",
          "1475:         int nid;",
          "",
          "[Removed Lines]",
          "1473: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "1473: #ifndef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "ssl/t1_lib.c||ssl/t1_lib.c": [
          "File: ssl/t1_lib.c -> ssl/t1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "798:     return rv;",
          "799: }",
          "803: int tls1_check_ec_tmp_key(SSL *s, unsigned long cid)",
          "804: {",
          "",
          "[Removed Lines]",
          "801: # ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "801: # ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "893: #  define tlsext_sigalg_dsa(md) md, TLSEXT_signature_dsa,",
          "894: # endif",
          "899: # else",
          "900: #  define tlsext_sigalg_ecdsa(md) md, TLSEXT_signature_ecdsa,",
          "901: # endif",
          "",
          "[Removed Lines]",
          "896: # ifdef OPENSSL_NO_ECDSA",
          "897: #  define tlsext_sigalg_ecdsa(md)",
          "",
          "[Added Lines]",
          "896: # ifdef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "913:         tlsext_sigalg(TLSEXT_hash_sha1)",
          "914: };",
          "917: static const unsigned char suiteb_sigalgs[] = {",
          "918:     tlsext_sigalg_ecdsa(TLSEXT_hash_sha256)",
          "919:         tlsext_sigalg_ecdsa(TLSEXT_hash_sha384)",
          "",
          "[Removed Lines]",
          "916: # ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "915: # ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3246:     case TLSEXT_signature_dsa:",
          "3247:         return SSL_PKEY_DSA_SIGN;",
          "3248: # endif",
          "3250:     case TLSEXT_signature_ecdsa:",
          "3251:         return SSL_PKEY_ECC;",
          "3252: # endif",
          "",
          "[Removed Lines]",
          "3249: # ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "3248: # ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3326:                 have_dsa = 1;",
          "3327:             break;",
          "3328: # endif",
          "3330:         case TLSEXT_signature_ecdsa:",
          "3331:             if (!have_ecdsa && tls12_sigalg_allowed(s, op, sigalgs))",
          "3332:                 have_ecdsa = 1;",
          "",
          "[Removed Lines]",
          "3329: # ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "3328: # ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3521:             c->pkeys[SSL_PKEY_RSA_ENC].digest = EVP_sha1();",
          "3522:         }",
          "3523: # endif",
          "3525:         if (!c->pkeys[SSL_PKEY_ECC].digest)",
          "3526:             c->pkeys[SSL_PKEY_ECC].digest = EVP_sha1();",
          "3527: # endif",
          "",
          "[Removed Lines]",
          "3524: # ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "3523: # ifndef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "util/mk1mf.pl||util/mk1mf.pl": [
          "File: util/mk1mf.pl -> util/mk1mf.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:  no-krb5     - No KRB5",
          "143:  no-srp     - No SRP",
          "144:  no-ec     - No EC",
          "147:  no-engine    - No engine",
          "148:  no-hw     - No hw",
          "149:  nasm      - Use NASM for x86 asm",
          "",
          "[Removed Lines]",
          "145:  no-ecdsa    - No ECDSA",
          "146:  no-ecdh     - No ECDH",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "298: $cflags.=\" -DOPENSSL_NO_ERR\"  if $no_err;",
          "299: $cflags.=\" -DOPENSSL_NO_KRB5\" if $no_krb5;",
          "300: $cflags.=\" -DOPENSSL_NO_EC\"   if $no_ec;",
          "303: $cflags.=\" -DOPENSSL_NO_GOST\" if $no_gost;",
          "304: $cflags.=\" -DOPENSSL_NO_ENGINE\"   if $no_engine;",
          "305: $cflags.=\" -DOPENSSL_NO_HW\"   if $no_hw;",
          "",
          "[Removed Lines]",
          "301: $cflags.=\" -DOPENSSL_NO_ECDSA\" if $no_ecdsa;",
          "302: $cflags.=\" -DOPENSSL_NO_ECDH\" if $no_ecdh;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1427:   \"no-sock\" => \\$no_sock,",
          "1428:   \"no-krb5\" => \\$no_krb5,",
          "1429:   \"no-ec\" => \\$no_ec,",
          "1432:   \"no-gost\" => \\$no_gost,",
          "1433:   \"no-engine\" => \\$no_engine,",
          "1434:   \"no-hw\" => \\$no_hw,",
          "",
          "[Removed Lines]",
          "1430:   \"no-ecdsa\" => \\$no_ecdsa,",
          "1431:   \"no-ecdh\" => \\$no_ecdh,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}