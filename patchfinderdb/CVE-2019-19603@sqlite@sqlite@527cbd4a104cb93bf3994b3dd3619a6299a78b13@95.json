{
  "cve_id": "CVE-2019-19603",
  "cve_desc": "SQLite 3.30.1 mishandles certain SELECT statements with a nonexistent VIEW, leading to an application crash.",
  "repo": "sqlite/sqlite",
  "patch_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
  "patch_info": {
    "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab.test"
    ],
    "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab.test||test/altertab.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "856:       }",
      "857:     }",
      "858:   }else{",
      "861:     ){",
      "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
      "863:                       zName);",
      "864:       return SQLITE_ERROR;",
      "865:     }",
      "866:   }",
      "867:   return SQLITE_OK;",
      "868: }",
      "",
      "[Removed Lines]",
      "859:     if( pParse->nested==0",
      "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
      "",
      "[Added Lines]",
      "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
      "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
      "",
      "[Added Lines]",
      "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
      "2148:   return pMod->pModule->xShadowName(zTail+1);",
      "2149: }",
      "",
      "[Removed Lines]",
      "2150: #else",
      "2151: # define isShadowTableName(x,y) 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2190:   p = pParse->pNewTable;",
      "2191:   if( p==0 ) return;",
      "2194:     p->tabFlags |= TF_Shadow;",
      "2195:   }",
      "",
      "[Removed Lines]",
      "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
      "",
      "[Added Lines]",
      "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
      "4549: #endif",
      "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
      "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
      "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
      "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
      "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
      "4553: #else",
      "4554: # define sqlite3ShadowTableName(A,B) 0",
      "4555: #endif",
      "",
      "---------------"
    ],
    "test/altertab.test||test/altertab.test": [
      "File: test/altertab.test -> test/altertab.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "547:   } {1 {table y1_segments may not be modified}}",
      "549:   do_catchsql_test 16.20 {",
      "554:     DROP TABLE y1_segments;",
      "555:   } {1 {table y1_segments may not be dropped}}",
      "557:   do_execsql_test 16.30 {",
      "558:     ALTER TABLE y1 RENAME TO z1;",
      "559:   }",
      "",
      "[Removed Lines]",
      "550:     ALTER TABLE y1_segments RENAME TO abc;",
      "551:   } {1 {table y1_segments may not be altered}}",
      "553:   do_catchsql_test 16.21 {",
      "",
      "[Added Lines]",
      "553:   do_catchsql_test 16.20 {",
      "554:     ALTER TABLE y1_segments RENAME TO abc;",
      "555:   } {1 {table y1_segments may not be altered}}",
      "556:   sqlite3_db_config db DEFENSIVE 0",
      "557:   do_catchsql_test 16.22 {",
      "558:     ALTER TABLE y1_segments RENAME TO abc;",
      "559:   } {0 {}}",
      "560:   sqlite3_db_config db DEFENSIVE 1",
      "561:   do_catchsql_test 16.23 {",
      "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
      "563:   } {1 {object name reserved for internal use: y1_segments}}",
      "564:   do_catchsql_test 16.24 {",
      "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
      "566:   } {1 {object name reserved for internal use: y1_segments}}",
      "567:   sqlite3_db_config db DEFENSIVE 0",
      "568:   do_catchsql_test 16.25 {",
      "569:     ALTER TABLE abc RENAME TO y1_segments;",
      "570:   } {0 {}}",
      "571:   sqlite3_db_config db DEFENSIVE 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "23d3f5d661ecdcef03843d6a27667f2adc3c6661",
      "candidate_info": {
        "commit_hash": "23d3f5d661ecdcef03843d6a27667f2adc3c6661",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/23d3f5d661ecdcef03843d6a27667f2adc3c6661",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fts4merge5.test",
          "test/permutations.test"
        ],
        "message": "Fix a long-standing problem in fts4 incrmental merge.\n\nFossilOrigin-Name: 67da31e24ebb49c4cac81c9e7cfca37ca422555fd0fdb01d8f180890783c84ff",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "test/fts4merge5.test||test/fts4merge5.test",
          "test/permutations.test||test/permutations.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4296:         NodeReader reader;",
          "4297:         pNode = &pWriter->aNodeWriter[i];",
          "4301:           while( reader.aNode && rc==SQLITE_OK ) rc = nodeReaderNext(&reader);",
          "4302:           blobGrowBuffer(&pNode->key, reader.term.n, &rc);",
          "4303:           if( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "4299:         rc = nodeReaderInit(&reader, pNode->block.a, pNode->block.n);",
          "4300:         if( reader.aNode ){",
          "",
          "[Added Lines]",
          "4299:         if( pNode->block.a){",
          "4300:           rc = nodeReaderInit(&reader, pNode->block.a, pNode->block.n);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9f4035f91a9f914797c67afbf19139b2cd25aea48595f7254fe5d18cd693d972",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts4merge5.test||test/fts4merge5.test": [
          "File: test/fts4merge5.test -> test/fts4merge5.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 October 02",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #*************************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this script is testing the FTS4 module.",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "17: set testprefix fts4merge5",
          "19: # If SQLITE_ENABLE_FTS3 is defined, omit this file.",
          "20: ifcapable !fts3 {",
          "21:   finish_test",
          "22:   return",
          "23: }",
          "25: source $testdir/genesis.tcl",
          "27: do_execsql_test 1.1 {",
          "28:   CREATE TABLE t1(docid, words);",
          "29: }",
          "30: fts_kjv_genesis",
          "32: do_execsql_test 1.2 {",
          "33:   CREATE VIRTUAL TABLE x1 USING fts3;",
          "34:   INSERT INTO x1(x1) VALUES('nodesize=64');",
          "35:   INSERT INTO x1(x1) VALUES('maxpending=64');",
          "36: }",
          "38: do_execsql_test 1.3 {",
          "39:   INSERT INTO x1(docid, content) SELECT * FROM t1;",
          "40: }",
          "42: for {set tn 1} {1} {incr tn} {",
          "43:   set tc1 [db total_changes]",
          "44:   do_execsql_test 1.4.$tn.1 {",
          "45:     INSERT INTO x1(x1) VALUES('merge=1,2');",
          "46:   }",
          "47:   set tc2 [db total_changes]",
          "49:   if {($tc2 - $tc1)<2} break",
          "51:   do_execsql_test 1.4.$tn.1 {",
          "52:     INSERT INTO x1(x1) VALUES('integrity-check');",
          "53:   }",
          "54: }",
          "58: finish_test",
          "",
          "---------------"
        ],
        "test/permutations.test||test/permutations.test": [
          "File: test/permutations.test -> test/permutations.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "126:   walcrash2.test e_fkey.test backup.test",
          "128:   fts4merge.test fts4merge2.test fts4merge4.test fts4check.test",
          "129:   fts3cov.test fts3snippet.test fts3corrupt2.test fts3an.test",
          "130:   fts3defer.test fts4langid.test fts3sort.test fts5unicode.test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129:   fts4merge5.test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5f913ecb62200fc735c9222e6a24c0453ecaa8a1",
      "candidate_info": {
        "commit_hash": "5f913ecb62200fc735c9222e6a24c0453ecaa8a1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5f913ecb62200fc735c9222e6a24c0453ecaa8a1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/where.c",
          "test/fts3fuzz001.test"
        ],
        "message": "Use the new SQLITE_IDXTYPE_IPK values (3) on Index.idxType to indicate the fake INTEGER PRIMARY KEY index used during query planning.\n\nFossilOrigin-Name: e22d2f905fe840bea51b536ebedc9b637190ea0a37f16559668d99a61e971411",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/where.c||src/where.c",
          "test/fts3fuzz001.test||test/fts3fuzz001.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 666cf8f6b39ae1f72e82b45e9cacba23caf61370ca0c695b3b14452accbb1a0d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2210:   rc = whereLoopXfer(db, p, pTemplate);",
          "2211:   if( (p->wsFlags & WHERE_VIRTUALTABLE)==0 ){",
          "2212:     Index *pIndex = p->u.btree.pIndex;",
          "2214:       p->u.btree.pIndex = 0;",
          "2215:     }",
          "2216:   }",
          "",
          "[Removed Lines]",
          "2213:     if( pIndex && pIndex->tnum==0 ){",
          "",
          "[Added Lines]",
          "2213:     if( pIndex && pIndex->idxType==SQLITE_IDXTYPE_IPK ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2878:     sPk.onError = OE_Replace;",
          "2879:     sPk.pTable = pTab;",
          "2880:     sPk.szIdxRow = pTab->szTabRow;",
          "2881:     aiRowEstPk[0] = pTab->nRowLogEst;",
          "2882:     aiRowEstPk[1] = 0;",
          "2883:     pFirst = pSrc->pTab->pIndex;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2881:     sPk.idxType = SQLITE_IDXTYPE_IPK;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2968:     b = indexMightHelpWithOrderBy(pBuilder, pProbe, pSrc->iCursor);",
          "2970:     assert( (pWInfo->wctrlFlags & WHERE_ONEPASS_DESIRED)==0 || b==0 );",
          "2973:       pNew->wsFlags = WHERE_IPK;",
          "",
          "[Removed Lines]",
          "2971:     if( pProbe->tnum<=0 ){",
          "",
          "[Added Lines]",
          "2972:     if( pProbe->idxType==SQLITE_IDXTYPE_IPK ){",
          "",
          "---------------"
        ],
        "test/fts3fuzz001.test||test/fts3fuzz001.test": [
          "File: test/fts3fuzz001.test -> test/fts3fuzz001.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:   catchsql {",
          "103:     INSERT INTO t1(t1) VALUES('optimize');",
          "104:   }",
          "106: do_test fts3fuzz001-121 {",
          "107:   catchsql {",
          "108:     INSERT INTO t1(t1) VALUES('integrity-check');",
          "",
          "[Removed Lines]",
          "105: } {0 {}}",
          "",
          "[Added Lines]",
          "105: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "57e141bc28db0ac6fee77e24fadb437758060830",
      "candidate_info": {
        "commit_hash": "57e141bc28db0ac6fee77e24fadb437758060830",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/57e141bc28db0ac6fee77e24fadb437758060830",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/dbtotxt.c"
        ],
        "message": "Fix the filename normalization in the dbtotxt utility program.\n\nFossilOrigin-Name: 29a00a05dd40ff59be340969e1aca4fee41e092f2faa1cea85a3448265a83c2c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/dbtotxt.c||tool/dbtotxt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b0a49d5e6df116bb5eacb60a0bb0f482760aec38bd417d4250d9e57d43bdbb13",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/dbtotxt.c||tool/dbtotxt.c": [
          "File: tool/dbtotxt.c -> tool/dbtotxt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:   }",
          "113:   zBaseName = zInputFile;",
          "114:   for(i=0; zInputFile[i]; i++){",
          "116:   }",
          "117:   printf(\"| size %d pagesize %d filename %s\\n\",(int)szFile,pgsz,zBaseName);",
          "118:   for(i=0; i<szFile; i+=16){",
          "",
          "[Removed Lines]",
          "115:     if( zInputFile[i]=='/' && zInputFile[i+1]!=0 ) zBaseName = zInputFile+1;",
          "",
          "[Added Lines]",
          "115:     if( zInputFile[i]=='/' && zInputFile[i+1]!=0 ) zBaseName = zInputFile+i+1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e04c1ec52aa2d6bbd1f6d9b815219a75abe965b1",
      "candidate_info": {
        "commit_hash": "e04c1ec52aa2d6bbd1f6d9b815219a75abe965b1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e04c1ec52aa2d6bbd1f6d9b815219a75abe965b1",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "New test cases added to test/fuzzdata8.db.\n\nFossilOrigin-Name: 39be3c61bd809cc89bdfdba90afc391ac9c2f81dfd8bb68a9b085b0ca8cd1fba",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bbfb2908ecd113c88e69a0984cbe2550463cdd3a67648b0e4e3578e80630136e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2d588b8c0858c17c7e6c2fd0b2a4d0ae7c24d350",
      "candidate_info": {
        "commit_hash": "2d588b8c0858c17c7e6c2fd0b2a4d0ae7c24d350",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2d588b8c0858c17c7e6c2fd0b2a4d0ae7c24d350",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/loadext.test"
        ],
        "message": "Fix the regexp used to recognize libdl errors on OS-X.\n\nFossilOrigin-Name: 1740025307531a52e4f0641e2e74dc14715130858f2e9236be13b66924f00220",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/loadext.test||test/loadext.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5fff00b0d5eb634d40e767671d5a0e8bd263d15d88abe531f6072f01bc789568",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/loadext.test||test/loadext.test": [
          "File: test/loadext.test -> test/loadext.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: set dlerror_nosymbol   {%s: undefined symbol: %s}",
          "63: if {$::tcl_platform(os) eq \"Darwin\"} {",
          "67: }",
          "69: if {$::tcl_platform(platform) eq \"windows\"} {",
          "",
          "[Removed Lines]",
          "64:   set dlerror_nosuchfile {dlopen(%s, 10): image not found}",
          "65:   set dlerror_notadll    {dlopen(%1$s, 10): no suitable image found.*}",
          "66:   set dlerror_nosymbol   {dlsym(XXX, %2$s): symbol not found}",
          "",
          "[Added Lines]",
          "64:   set dlerror_nosuchfile {dlopen.%s, 10.: .*image.*found.*}",
          "65:   set dlerror_notadll    {dlopen.%1$s, 10.: .*image.*found.*}",
          "66:   set dlerror_nosymbol   {dlsym.XXX, %2$s.: symbol not found}",
          "",
          "---------------"
        ]
      }
    }
  ]
}