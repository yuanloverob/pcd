{
  "cve_id": "CVE-2020-15224",
  "cve_desc": "In Open Enclave before version 0.12.0, an information disclosure vulnerability exists when an enclave application using the syscalls provided by the sockets.edl is loaded by a malicious host application. An attacker who successfully exploited the vulnerability could read privileged data from the enclave heap across trust boundaries. To exploit this vulnerability, an attacker would have to log on to an affected system and run a specially crafted application. The vulnerability would not allow an attacker to elevate user rights directly, but it could be used to obtain information otherwise considered confidential in an enclave, which could be used in further compromises. The issue has been addressed in version 0.12.0 and the current master branch. Users will need to to recompile their applications against the patched libraries to be protected from this vulnerability.",
  "repo": "openenclave/openenclave",
  "patch_hash": "bcac8e7acb514429fee9e0b5d0c7a0308fd4d76b",
  "patch_info": {
    "commit_hash": "bcac8e7acb514429fee9e0b5d0c7a0308fd4d76b",
    "repo": "openenclave/openenclave",
    "commit_url": "https://github.com/openenclave/openenclave/commit/bcac8e7acb514429fee9e0b5d0c7a0308fd4d76b",
    "files": [
      "include/openenclave/edl/socket.edl",
      "include/openenclave/internal/syscall/fd.h",
      "include/openenclave/internal/syscall/iov.h",
      "include/openenclave/internal/syscall/sys/socket.h",
      "syscall/consolefs.c",
      "syscall/devices/hostepoll/hostepoll.c",
      "syscall/devices/hostfs/hostfs.c",
      "syscall/devices/hostresolver/hostresolver.c",
      "syscall/devices/hostsock/hostsock.c",
      "syscall/iov.c",
      "syscall/socket.c",
      "syscall/syscall.c"
    ],
    "message": "Merge pull request from GHSA-525h-wxcc-f66m\n\nSigned-off-by: Ming-Wei Shih <mishih@microsoft.com>",
    "before_after_code_files": [
      "include/openenclave/edl/socket.edl||include/openenclave/edl/socket.edl",
      "include/openenclave/internal/syscall/fd.h||include/openenclave/internal/syscall/fd.h",
      "include/openenclave/internal/syscall/iov.h||include/openenclave/internal/syscall/iov.h",
      "include/openenclave/internal/syscall/sys/socket.h||include/openenclave/internal/syscall/sys/socket.h",
      "syscall/consolefs.c||syscall/consolefs.c",
      "syscall/devices/hostepoll/hostepoll.c||syscall/devices/hostepoll/hostepoll.c",
      "syscall/devices/hostfs/hostfs.c||syscall/devices/hostfs/hostfs.c",
      "syscall/devices/hostresolver/hostresolver.c||syscall/devices/hostresolver/hostresolver.c",
      "syscall/devices/hostsock/hostsock.c||syscall/devices/hostsock/hostsock.c",
      "syscall/iov.c||syscall/iov.c",
      "syscall/socket.c||syscall/socket.c",
      "syscall/syscall.c||syscall/syscall.c"
    ]
  },
  "patch_diff": {
    "include/openenclave/edl/socket.edl||include/openenclave/edl/socket.edl": [
      "File: include/openenclave/edl/socket.edl -> include/openenclave/edl/socket.edl",
      "--- Hunk 1 ---",
      "[Context before]",
      "74:         oe_host_fd_t oe_syscall_accept_ocall(",
      "75:             oe_host_fd_t sockfd,",
      "77:             oe_socklen_t addrlen_in,",
      "78:             [out, count=1] oe_socklen_t* addrlen_out)",
      "79:             propagate_errno;",
      "",
      "[Removed Lines]",
      "76:             [in, out, size=addrlen_in] struct oe_sockaddr* addr,",
      "",
      "[Added Lines]",
      "74:             [out, size=addrlen_in] struct oe_sockaddr* addr,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "118:         ssize_t oe_syscall_recv_ocall(",
      "119:             oe_host_fd_t sockfd,",
      "121:             size_t len,",
      "122:             int flags)",
      "123:             propagate_errno;",
      "",
      "[Removed Lines]",
      "120:             [in, out, size=len] void* buf,",
      "",
      "[Added Lines]",
      "118:             [out, size=len] void* buf,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "127:             [out, size=len] void* buf,",
      "128:             size_t len,",
      "129:             int flags,",
      "131:             oe_socklen_t addrlen_in,",
      "132:             [out, count=1] oe_socklen_t* addrlen_out)",
      "133:             propagate_errno;",
      "",
      "[Removed Lines]",
      "130:             [in, out, size=addrlen_in] struct oe_sockaddr* src_addr,",
      "",
      "[Added Lines]",
      "128:             [out, size=addrlen_in] struct oe_sockaddr* src_addr,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "187:         int oe_syscall_getsockname_ocall(",
      "188:             oe_host_fd_t sockfd,",
      "190:             oe_socklen_t addrlen_in,",
      "191:             [out, size=1] oe_socklen_t* addrlen_out)",
      "192:             propagate_errno;",
      "194:         int oe_syscall_getpeername_ocall(",
      "195:             oe_host_fd_t sockfd,",
      "197:             oe_socklen_t addrlen_in,",
      "198:             [out, size=1] oe_socklen_t* addrlen_out)",
      "199:             propagate_errno;",
      "",
      "[Removed Lines]",
      "189:             [in, out, size=addrlen_in] struct oe_sockaddr* addr,",
      "196:             [in, out, size=addrlen_in] struct oe_sockaddr* addr,",
      "",
      "[Added Lines]",
      "187:             [out, size=addrlen_in] struct oe_sockaddr* addr,",
      "194:             [out, size=addrlen_in] struct oe_sockaddr* addr,",
      "",
      "---------------"
    ],
    "include/openenclave/internal/syscall/fd.h||include/openenclave/internal/syscall/fd.h": [
      "File: include/openenclave/internal/syscall/fd.h -> include/openenclave/internal/syscall/fd.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "110:         void* buf,",
      "111:         size_t len,",
      "112:         int flags,",
      "114:         oe_socklen_t* addrlen);",
      "116:     ssize_t (*sendmsg)(oe_fd_t* sock, const struct oe_msghdr* msg, int flags);",
      "",
      "[Removed Lines]",
      "113:         const struct oe_sockaddr* src_addr,",
      "",
      "[Added Lines]",
      "113:         struct oe_sockaddr* src_addr,",
      "",
      "---------------"
    ],
    "include/openenclave/internal/syscall/iov.h||include/openenclave/internal/syscall/iov.h": [
      "File: include/openenclave/internal/syscall/iov.h -> include/openenclave/internal/syscall/iov.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "15:     const struct oe_iovec* iov,",
      "16:     int iovcnt,",
      "17:     void** buf_out,",
      "20: int oe_iov_sync(",
      "21:     const struct oe_iovec* iov,",
      "",
      "[Removed Lines]",
      "18:     size_t* buf_size_out);",
      "",
      "[Added Lines]",
      "18:     size_t* buf_size_out,",
      "19:     size_t* data_size_out);",
      "",
      "---------------"
    ],
    "include/openenclave/internal/syscall/sys/socket.h||include/openenclave/internal/syscall/sys/socket.h": [
      "File: include/openenclave/internal/syscall/sys/socket.h -> include/openenclave/internal/syscall/sys/socket.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "133: #define OE_SO_BSDCOMPAT 14",
      "134: #define OE_SO_REUSEPORT 15",
      "137: #define OE_SHUT_RD 0",
      "138: #define OE_SHUT_WR 1",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "137: #define OE_MSG_CTRUNC 0x0008",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "204:     void* buf,",
      "205:     size_t len,",
      "206:     int flags,",
      "208:     oe_socklen_t* addrlen);",
      "210: ssize_t oe_sendmsg(int sockfd, const struct oe_msghdr* buf, int flags);",
      "",
      "[Removed Lines]",
      "207:     const struct oe_sockaddr* src_addr,",
      "",
      "[Added Lines]",
      "210:     struct oe_sockaddr* src_addr,",
      "",
      "---------------"
    ],
    "syscall/consolefs.c||syscall/consolefs.c": [
      "File: syscall/consolefs.c -> syscall/consolefs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "205:     ssize_t ret = -1;",
      "206:     file_t* file = _cast_file(file_);",
      "209:         OE_RAISE_ERRNO(OE_EINVAL);",
      "211:     if (oe_syscall_read_ocall(&ret, file->host_fd, buf, count) != OE_OK)",
      "212:         OE_RAISE_ERRNO(OE_EINVAL);",
      "214: done:",
      "215:     return ret;",
      "216: }",
      "",
      "[Removed Lines]",
      "208:     if (!file)",
      "",
      "[Added Lines]",
      "216:     if (!file || count > OE_SSIZE_MAX)",
      "226:     if (ret > (ssize_t)count)",
      "227:     {",
      "228:         ret = -1;",
      "229:         OE_RAISE_ERRNO(OE_EINVAL);",
      "230:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "220:     ssize_t ret = -1;",
      "221:     file_t* file = _cast_file(file_);",
      "224:         OE_RAISE_ERRNO(OE_EINVAL);",
      "226:     if (oe_syscall_write_ocall(&ret, file->host_fd, buf, count) != OE_OK)",
      "227:         OE_RAISE_ERRNO(OE_EINVAL);",
      "229: done:",
      "230:     return ret;",
      "231: }",
      "",
      "[Removed Lines]",
      "223:     if (!file)",
      "",
      "[Added Lines]",
      "249:     if (!file || count > OE_SSIZE_MAX)",
      "259:     if (ret > (ssize_t)count)",
      "260:     {",
      "261:         ret = -1;",
      "262:         OE_RAISE_ERRNO(OE_EINVAL);",
      "263:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "239:     file_t* file = _cast_file(desc);",
      "240:     void* buf = NULL;",
      "241:     size_t buf_size = 0;",
      "243:     if (!file || !iov || iovcnt < 0 || iovcnt > OE_IOV_MAX)",
      "244:         OE_RAISE_ERRNO(OE_EINVAL);",
      "248:         OE_RAISE_ERRNO(OE_ENOMEM);",
      "251:     if (oe_syscall_readv_ocall(&ret, file->host_fd, buf, iovcnt, buf_size) !=",
      "252:         OE_OK)",
      "",
      "[Removed Lines]",
      "247:     if (oe_iov_pack(iov, iovcnt, &buf, &buf_size) != 0)",
      "",
      "[Added Lines]",
      "278:     size_t data_size = 0;",
      "284:     if (oe_iov_pack(iov, iovcnt, &buf, &buf_size, &data_size) != 0)",
      "295:     if (data_size > OE_SSIZE_MAX)",
      "296:         OE_RAISE_ERRNO(OE_EINVAL);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "254:         OE_RAISE_ERRNO(OE_EINVAL);",
      "255:     }",
      "258:     if (oe_iov_sync(iov, iovcnt, buf, buf_size) != 0)",
      "259:         OE_RAISE_ERRNO(OE_EINVAL);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "309:     if (ret > (ssize_t)data_size)",
      "310:     {",
      "311:         ret = -1;",
      "312:         OE_RAISE_ERRNO(OE_EINVAL);",
      "313:     }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "275:     file_t* file = _cast_file(desc);",
      "276:     void* buf = NULL;",
      "277:     size_t buf_size = 0;",
      "279:     if (!file || (!iov && iovcnt) || iovcnt < 0 || iovcnt > OE_IOV_MAX)",
      "280:         OE_RAISE_ERRNO(OE_EINVAL);",
      "284:         OE_RAISE_ERRNO(OE_ENOMEM);",
      "287:     if (oe_syscall_writev_ocall(&ret, file->host_fd, buf, iovcnt, buf_size) !=",
      "288:         OE_OK)",
      "",
      "[Removed Lines]",
      "283:     if (oe_iov_pack(iov, iovcnt, &buf, &buf_size) != 0)",
      "",
      "[Added Lines]",
      "336:     size_t data_size = 0;",
      "342:     if (oe_iov_pack(iov, iovcnt, &buf, &buf_size, &data_size) != 0)",
      "353:     if (data_size > OE_SSIZE_MAX)",
      "354:         OE_RAISE_ERRNO(OE_EINVAL);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "290:         OE_RAISE_ERRNO(OE_EINVAL);",
      "291:     }",
      "293: done:",
      "295:     if (buf)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "367:     if (ret > (ssize_t)data_size)",
      "368:     {",
      "369:         ret = -1;",
      "370:         OE_RAISE_ERRNO(OE_EINVAL);",
      "371:     }",
      "",
      "---------------"
    ],
    "syscall/devices/hostepoll/hostepoll.c||syscall/devices/hostepoll/hostepoll.c": [
      "File: syscall/devices/hostepoll/hostepoll.c -> syscall/devices/hostepoll/hostepoll.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "656:     oe_errno = 0;",
      "659:         OE_RAISE_ERRNO(OE_EINVAL);",
      "662:     if (oe_syscall_read_ocall(&ret, file->host_fd, buf, count) != OE_OK)",
      "663:         OE_RAISE_ERRNO(OE_EINVAL);",
      "665: done:",
      "666:     return ret;",
      "667: }",
      "",
      "[Removed Lines]",
      "658:     if (!file)",
      "",
      "[Added Lines]",
      "666:     if (!file || count > OE_SSIZE_MAX)",
      "677:     if (ret > (ssize_t)count)",
      "678:     {",
      "679:         ret = -1;",
      "680:         OE_RAISE_ERRNO(OE_EINVAL);",
      "681:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "669: static ssize_t _epoll_write(oe_fd_t* epoll_, const void* buf, size_t count)",
      "670: {",
      "671:     ssize_t ret = -1;",
      "674:     oe_errno = 0;",
      "678:         OE_RAISE_ERRNO(OE_EINVAL);",
      "680: done:",
      "681:     return ret;",
      "",
      "[Removed Lines]",
      "672:     epoll_t* epoll = _cast_epoll(epoll_);",
      "677:     if (oe_syscall_write_ocall(&ret, epoll->host_fd, buf, count) != OE_OK)",
      "",
      "[Added Lines]",
      "690:     epoll_t* file = _cast_epoll(epoll_);",
      "702:     if (!file || count > OE_SSIZE_MAX)",
      "703:         OE_RAISE_ERRNO(OE_EINVAL);",
      "706:     if (oe_syscall_write_ocall(&ret, file->host_fd, buf, count) != OE_OK)",
      "707:         OE_RAISE_ERRNO(OE_EINVAL);",
      "713:     if (ret > (ssize_t)count)",
      "714:     {",
      "715:         ret = -1;",
      "717:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "690:     epoll_t* file = _cast_epoll(desc);",
      "691:     void* buf = NULL;",
      "692:     size_t buf_size = 0;",
      "694:     if (!file || (iovcnt && !iov) || iovcnt < 0 || iovcnt > OE_IOV_MAX)",
      "695:         OE_RAISE_ERRNO(OE_EINVAL);",
      "699:         OE_RAISE_ERRNO(OE_ENOMEM);",
      "702:     if (oe_syscall_readv_ocall(&ret, file->host_fd, buf, iovcnt, buf_size) !=",
      "703:         OE_OK)",
      "",
      "[Removed Lines]",
      "698:     if (oe_iov_pack(iov, iovcnt, &buf, &buf_size) != 0)",
      "",
      "[Added Lines]",
      "732:     size_t data_size = 0;",
      "738:     if (oe_iov_pack(iov, iovcnt, &buf, &buf_size, &data_size) != 0)",
      "749:     if (data_size > OE_SSIZE_MAX)",
      "750:         OE_RAISE_ERRNO(OE_EINVAL);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "705:         OE_RAISE_ERRNO(OE_EINVAL);",
      "706:     }",
      "709:     if (oe_iov_sync(iov, iovcnt, buf, buf_size) != 0)",
      "710:         OE_RAISE_ERRNO(OE_EINVAL);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:     if (ret > (ssize_t)data_size)",
      "764:     {",
      "765:         ret = -1;",
      "766:         OE_RAISE_ERRNO(OE_EINVAL);",
      "767:     }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "726:     epoll_t* file = _cast_epoll(desc);",
      "727:     void* buf = NULL;",
      "728:     size_t buf_size = 0;",
      "730:     if (!file || (iovcnt && !iov) || iovcnt < 0 || iovcnt > OE_IOV_MAX)",
      "731:         OE_RAISE_ERRNO(OE_EINVAL);",
      "735:         OE_RAISE_ERRNO(OE_ENOMEM);",
      "738:     if (oe_syscall_writev_ocall(&ret, file->host_fd, buf, iovcnt, buf_size) !=",
      "739:         OE_OK)",
      "",
      "[Removed Lines]",
      "734:     if (oe_iov_pack(iov, iovcnt, &buf, &buf_size) != 0)",
      "",
      "[Added Lines]",
      "790:     size_t data_size = 0;",
      "796:     if (oe_iov_pack(iov, iovcnt, &buf, &buf_size, &data_size) != 0)",
      "807:     if (data_size > OE_SSIZE_MAX)",
      "808:         OE_RAISE_ERRNO(OE_EINVAL);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "741:         OE_RAISE_ERRNO(OE_EINVAL);",
      "742:     }",
      "744: done:",
      "746:     if (buf)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "821:     if (ret > (ssize_t)data_size)",
      "822:     {",
      "823:         ret = -1;",
      "824:         OE_RAISE_ERRNO(OE_EINVAL);",
      "825:     }",
      "",
      "---------------"
    ],
    "syscall/devices/hostfs/hostfs.c||syscall/devices/hostfs/hostfs.c": [
      "File: syscall/devices/hostfs/hostfs.c -> syscall/devices/hostfs/hostfs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "538:     ssize_t ret = -1;",
      "539:     file_t* file = _cast_file(desc);",
      "542:         OE_RAISE_ERRNO(OE_EINVAL);",
      "545:     if (oe_syscall_read_ocall(&ret, file->host_fd, buf, count) != OE_OK)",
      "546:         OE_RAISE_ERRNO(OE_EINVAL);",
      "548: done:",
      "549:     return ret;",
      "550: }",
      "",
      "[Removed Lines]",
      "541:     if (!file)",
      "",
      "[Added Lines]",
      "549:     if (!file || count > OE_SSIZE_MAX)",
      "560:     if (ret > (ssize_t)count)",
      "561:     {",
      "562:         ret = -1;",
      "563:         OE_RAISE_ERRNO(OE_EINVAL);",
      "564:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "598:     ssize_t ret = -1;",
      "599:     file_t* file = _cast_file(desc);",
      "603:         OE_RAISE_ERRNO(OE_EINVAL);",
      "606:     if (oe_syscall_write_ocall(&ret, file->host_fd, buf, count) != OE_OK)",
      "607:         OE_RAISE_ERRNO(OE_EINVAL);",
      "609: done:",
      "610:     return ret;",
      "611: }",
      "",
      "[Removed Lines]",
      "602:     if (!file || (count && !buf))",
      "",
      "[Added Lines]",
      "628:     if (!file || (count && !buf) || count > OE_SSIZE_MAX)",
      "639:     if (ret > (ssize_t)count)",
      "640:     {",
      "641:         ret = -1;",
      "642:         OE_RAISE_ERRNO(OE_EINVAL);",
      "643:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "619:     file_t* file = _cast_file(desc);",
      "620:     void* buf = NULL;",
      "621:     size_t buf_size = 0;",
      "623:     if (!file || (!iov && iovcnt) || iovcnt < 0 || iovcnt > OE_IOV_MAX)",
      "624:         OE_RAISE_ERRNO(OE_EINVAL);",
      "628:         OE_RAISE_ERRNO(OE_ENOMEM);",
      "631:     if (oe_syscall_readv_ocall(&ret, file->host_fd, buf, iovcnt, buf_size) !=",
      "632:         OE_OK)",
      "",
      "[Removed Lines]",
      "627:     if (oe_iov_pack(iov, iovcnt, &buf, &buf_size) != 0)",
      "",
      "[Added Lines]",
      "658:     size_t data_size = 0;",
      "664:     if (oe_iov_pack(iov, iovcnt, &buf, &buf_size, &data_size) != 0)",
      "675:     if (data_size > OE_SSIZE_MAX)",
      "676:         OE_RAISE_ERRNO(OE_EINVAL);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "634:         OE_RAISE_ERRNO(OE_EINVAL);",
      "635:     }",
      "638:     if (ret > 0)",
      "639:     {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "689:     if (ret > (ssize_t)data_size)",
      "690:     {",
      "691:         ret = -1;",
      "692:         OE_RAISE_ERRNO(OE_EINVAL);",
      "693:     }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "658:     file_t* file = _cast_file(desc);",
      "659:     void* buf = NULL;",
      "660:     size_t buf_size = 0;",
      "662:     if (!file || !iov || iovcnt < 0 || iovcnt > OE_IOV_MAX)",
      "663:         OE_RAISE_ERRNO(OE_EINVAL);",
      "667:         OE_RAISE_ERRNO(OE_ENOMEM);",
      "670:     if (oe_syscall_writev_ocall(&ret, file->host_fd, buf, iovcnt, buf_size) !=",
      "671:         OE_OK)",
      "",
      "[Removed Lines]",
      "666:     if (oe_iov_pack(iov, iovcnt, &buf, &buf_size) != 0)",
      "",
      "[Added Lines]",
      "719:     size_t data_size = 0;",
      "725:     if (oe_iov_pack(iov, iovcnt, &buf, &buf_size, &data_size) != 0)",
      "736:     if (data_size > OE_SSIZE_MAX)",
      "737:         OE_RAISE_ERRNO(OE_EINVAL);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "673:         OE_RAISE_ERRNO(OE_EINVAL);",
      "674:     }",
      "676: done:",
      "678:     if (buf)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "750:     if (ret > (ssize_t)data_size)",
      "751:     {",
      "752:         ret = -1;",
      "753:         OE_RAISE_ERRNO(OE_EINVAL);",
      "754:     }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "756:     ssize_t ret = -1;",
      "757:     file_t* file = _cast_file(desc);",
      "760:         OE_RAISE_ERRNO(OE_EINVAL);",
      "762:     if (oe_syscall_pread_ocall(&ret, file->host_fd, buf, count, offset) !=",
      "763:         OE_OK)",
      "764:         OE_RAISE_ERRNO(OE_EINVAL);",
      "766: done:",
      "767:     return ret;",
      "768: }",
      "",
      "[Removed Lines]",
      "759:     if (!file)",
      "",
      "[Added Lines]",
      "847:     if (!file || count > OE_SSIZE_MAX)",
      "858:     if (ret > (ssize_t)count)",
      "859:     {",
      "860:         ret = -1;",
      "861:         OE_RAISE_ERRNO(OE_EINVAL);",
      "862:     }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "776:     ssize_t ret = -1;",
      "777:     file_t* file = _cast_file(desc);",
      "780:         OE_RAISE_ERRNO(OE_EINVAL);",
      "782:     if (oe_syscall_pwrite_ocall(&ret, file->host_fd, buf, count, offset) !=",
      "783:         OE_OK)",
      "784:         OE_RAISE_ERRNO(OE_EINVAL);",
      "786: done:",
      "787:     return ret;",
      "788: }",
      "",
      "[Removed Lines]",
      "779:     if (!file)",
      "",
      "[Added Lines]",
      "885:     if (!file || count > OE_SSIZE_MAX)",
      "896:     if (ret > (ssize_t)count)",
      "897:     {",
      "898:         ret = -1;",
      "899:         OE_RAISE_ERRNO(OE_EINVAL);",
      "900:     }",
      "",
      "---------------"
    ],
    "syscall/devices/hostresolver/hostresolver.c||syscall/devices/hostresolver/hostresolver.c": [
      "File: syscall/devices/hostresolver/hostresolver.c -> syscall/devices/hostresolver/hostresolver.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "11: #include <openenclave/internal/syscall/raise.h>",
      "12: #include <openenclave/internal/syscall/sys/socket.h>",
      "13: #include <openenclave/internal/syscall/netdb.h>",
      "14: #include <openenclave/internal/syscall/resolver.h>",
      "15: #include <openenclave/internal/safemath.h>",
      "16: #include <openenclave/internal/calls.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14: #include <openenclave/internal/syscall/netinet/in.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "25: #define RESOLV_MAGIC 0x536f636b",
      "28: typedef struct _resolver",
      "29: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "34: #define OE_AF_INET6_WIN 23",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "116:     for (;;)",
      "117:     {",
      "118:         int retval = 0;",
      "128:         if (oe_syscall_getaddrinfo_read_ocall(",
      "129:                 &retval,",
      "130:                 handle,",
      "137:                 NULL,",
      "140:                 NULL) != OE_OK)",
      "141:         {",
      "142:             ret = OE_EAI_SYSTEM;",
      "",
      "[Removed Lines]",
      "119:         size_t canonnamelen = 0;",
      "121:         if (!(p = oe_calloc(1, sizeof(struct oe_addrinfo))))",
      "122:         {",
      "123:             ret = OE_EAI_MEMORY;",
      "124:             goto done;",
      "125:         }",
      "131:                 &p->ai_flags,",
      "132:                 &p->ai_family,",
      "133:                 &p->ai_socktype,",
      "134:                 &p->ai_protocol,",
      "135:                 p->ai_addrlen,",
      "136:                 &p->ai_addrlen,",
      "138:                 canonnamelen,",
      "139:                 &canonnamelen,",
      "",
      "[Added Lines]",
      "128:         size_t canonnamelen_in = 0;",
      "129:         size_t canonnamelen_out = 0;",
      "130:         struct oe_addrinfo p_out;",
      "132:         memset(&p_out, 0, sizeof(struct oe_addrinfo));",
      "138:                 &p_out.ai_flags,",
      "139:                 &p_out.ai_family,",
      "140:                 &p_out.ai_socktype,",
      "141:                 &p_out.ai_protocol,",
      "142:                 p_out.ai_addrlen,",
      "143:                 &p_out.ai_addrlen,",
      "145:                 canonnamelen_in,",
      "146:                 &canonnamelen_out,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "154:             OE_RAISE_ERRNO(oe_errno);",
      "155:         }",
      "158:         {",
      "159:             ret = OE_EAI_MEMORY;",
      "160:             goto done;",
      "161:         }",
      "164:         {",
      "165:             ret = OE_EAI_MEMORY;",
      "166:             goto done;",
      "167:         }",
      "169:         if (oe_syscall_getaddrinfo_read_ocall(",
      "170:                 &retval,",
      "171:                 handle,",
      "",
      "[Removed Lines]",
      "157:         if (p->ai_addrlen && !(p->ai_addr = oe_calloc(1, p->ai_addrlen)))",
      "163:         if (canonnamelen && !(p->ai_canonname = oe_calloc(1, canonnamelen)))",
      "",
      "[Added Lines]",
      "173:         switch (p_out.ai_family)",
      "174:         {",
      "175:             case OE_AF_INET:",
      "176:                 if (p_out.ai_addrlen != sizeof(struct oe_sockaddr))",
      "177:                 {",
      "178:                     ret = OE_EAI_FAIL;",
      "179:                     goto done;",
      "180:                 }",
      "181:                 break;",
      "182:             case OE_AF_INET6:",
      "183:             case OE_AF_INET6_WIN:",
      "184:             case OE_AF_UNSPEC:",
      "185:                 if (p_out.ai_addrlen != sizeof(struct oe_sockaddr_in6))",
      "186:                 {",
      "187:                     ret = OE_EAI_FAIL;",
      "188:                     goto done;",
      "189:                 }",
      "190:                 break;",
      "191:             default:",
      "192:                 ret = OE_EAI_FAIL;",
      "193:                 goto done;",
      "194:         }",
      "196:         if (!(p = oe_calloc(1, sizeof(struct oe_addrinfo))))",
      "197:         {",
      "198:             ret = OE_EAI_MEMORY;",
      "199:             goto done;",
      "200:         }",
      "202:         if (p_out.ai_addrlen && !(p->ai_addr = oe_calloc(1, p_out.ai_addrlen)))",
      "208:         if (canonnamelen_out &&",
      "209:             !(p->ai_canonname = oe_calloc(1, canonnamelen_out)))",
      "217:         canonnamelen_in = canonnamelen_out;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "173:                 &p->ai_family,",
      "174:                 &p->ai_socktype,",
      "175:                 &p->ai_protocol,",
      "177:                 &p->ai_addrlen,",
      "178:                 p->ai_addr,",
      "181:                 p->ai_canonname) != OE_OK)",
      "182:         {",
      "183:             ret = OE_EAI_SYSTEM;",
      "184:             OE_RAISE_ERRNO(OE_EINVAL);",
      "185:         }",
      "188:         if (tail)",
      "189:         {",
      "",
      "[Removed Lines]",
      "176:                 p->ai_addrlen,",
      "179:                 canonnamelen,",
      "180:                 &canonnamelen,",
      "",
      "[Added Lines]",
      "226:                 p_out.ai_addrlen,",
      "229:                 canonnamelen_in,",
      "230:                 &canonnamelen_out,",
      "242:         if ((p->ai_flags != p_out.ai_flags) ||",
      "243:             (p->ai_family != p_out.ai_family) ||",
      "244:             (p->ai_socktype != p_out.ai_socktype) ||",
      "245:             (p->ai_protocol != p_out.ai_protocol) ||",
      "246:             (p->ai_addrlen != p_out.ai_addrlen) ||",
      "247:             (canonnamelen_out != canonnamelen_in) ||",
      "248:             (canonnamelen_out && p->ai_canonname[canonnamelen_out - 1] != '\\0'))",
      "249:         {",
      "250:             ret = OE_EAI_FAIL;",
      "251:             goto done;",
      "252:         }",
      "",
      "---------------"
    ],
    "syscall/devices/hostsock/hostsock.c||syscall/devices/hostsock/hostsock.c": [
      "File: syscall/devices/hostsock/hostsock.c -> syscall/devices/hostsock/hostsock.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "350:     oe_errno = 0;",
      "353:         OE_RAISE_ERRNO(OE_EINVAL);",
      "355:     if (buf)",
      "",
      "[Removed Lines]",
      "352:     if (!sock || (count && !buf))",
      "",
      "[Added Lines]",
      "360:     if (!sock || (count && !buf) || count > OE_SSIZE_MAX)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "361:     if (oe_syscall_recv_ocall(&ret, sock->host_fd, buf, count, flags) != OE_OK)",
      "362:         OE_RAISE_ERRNO(OE_EINVAL);",
      "364: done:",
      "365:     return ret;",
      "366: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "376:     if (ret > (ssize_t)count)",
      "377:     {",
      "378:         ret = -1;",
      "379:         OE_RAISE_ERRNO(OE_EINVAL);",
      "380:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "370:     void* buf,",
      "371:     size_t count,",
      "372:     int flags,",
      "374:     oe_socklen_t* addrlen)",
      "375: {",
      "376:     ssize_t ret = -1;",
      "377:     sock_t* sock = _cast_sock(sock_);",
      "378:     oe_socklen_t addrlen_in = 0;",
      "380:     oe_errno = 0;",
      "383:         OE_RAISE_ERRNO(OE_EINVAL);",
      "386:         addrlen_in = *addrlen;",
      "388:     if (oe_syscall_recvfrom_ocall(",
      "",
      "[Removed Lines]",
      "373:     const struct oe_sockaddr* src_addr,",
      "382:     if (!sock || (count && !buf))",
      "385:     if (addrlen)",
      "",
      "[Added Lines]",
      "391:     struct oe_sockaddr* src_addr,",
      "397:     oe_socklen_t addrlen_out = 0;",
      "409:     if (!sock || (count && !buf) || count > OE_SSIZE_MAX)",
      "416:     if (src_addr && addrlen)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "391:             buf,",
      "392:             count,",
      "393:             flags,",
      "395:             addrlen_in,",
      "397:     {",
      "398:         OE_RAISE_ERRNO(OE_EINVAL);",
      "399:     }",
      "",
      "[Removed Lines]",
      "394:             (struct oe_sockaddr*)src_addr,",
      "396:             addrlen) != OE_OK)",
      "",
      "[Added Lines]",
      "425:             src_addr,",
      "427:             &addrlen_out) != OE_OK)",
      "428:     {",
      "429:         OE_RAISE_ERRNO(OE_EINVAL);",
      "430:     }",
      "436:     if (src_addr && addrlen)",
      "437:     {",
      "442:         if (addrlen_out > sizeof(struct oe_sockaddr_storage))",
      "443:             OE_RAISE_ERRNO(OE_EINVAL);",
      "450:     }",
      "456:     if (ret > (ssize_t)count)",
      "458:         ret = -1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "412:     oe_errno = 0;",
      "413:     void* buf = NULL;",
      "414:     size_t buf_size = 0;",
      "417:     if (!sock || !msg || (msg->msg_iovlen && !msg->msg_iov))",
      "418:         OE_RAISE_ERRNO(OE_EINVAL);",
      "422:         OE_RAISE_ERRNO(OE_ENOMEM);",
      "425:     {",
      "426:         if (oe_syscall_recvmsg_ocall(",
      "",
      "[Removed Lines]",
      "421:     if (oe_iov_pack(msg->msg_iov, (int)msg->msg_iovlen, &buf, &buf_size) != 0)",
      "",
      "[Added Lines]",
      "476:     size_t data_size = 0;",
      "477:     oe_socklen_t namelen_out = 0;",
      "478:     size_t controllen_out = 0;",
      "485:     if (oe_iov_pack(",
      "486:             msg->msg_iov, (int)msg->msg_iovlen, &buf, &buf_size, &data_size) !=",
      "487:         0)",
      "498:     if (data_size > OE_SSIZE_MAX)",
      "499:         OE_RAISE_ERRNO(OE_EINVAL);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "428:                 sock->host_fd,",
      "429:                 msg->msg_name,",
      "430:                 msg->msg_namelen,",
      "432:                 buf,",
      "433:                 msg->msg_iovlen,",
      "434:                 buf_size,",
      "435:                 msg->msg_control,",
      "436:                 msg->msg_controllen,",
      "438:                 flags) != OE_OK)",
      "439:         {",
      "440:             OE_RAISE_ERRNO(OE_EINVAL);",
      "",
      "[Removed Lines]",
      "431:                 &msg->msg_namelen,",
      "437:                 &msg->msg_controllen,",
      "",
      "[Added Lines]",
      "508:                 &namelen_out,",
      "514:                 &controllen_out,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "444:             OE_RAISE_ERRNO(oe_errno);",
      "445:     }",
      "448:     if (oe_iov_sync(msg->msg_iov, (int)msg->msg_iovlen, buf, buf_size) != 0)",
      "449:         OE_RAISE_ERRNO(OE_EINVAL);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "524:     if (!msg->msg_name)",
      "525:         msg->msg_namelen = 0;",
      "526:     else",
      "527:     {",
      "532:         if (namelen_out > sizeof(struct oe_sockaddr_storage))",
      "533:             OE_RAISE_ERRNO(OE_EINVAL);",
      "539:         if (msg->msg_namelen >= namelen_out)",
      "540:             msg->msg_namelen = namelen_out;",
      "541:     }",
      "543:     if (!msg->msg_control)",
      "544:         msg->msg_controllen = 0;",
      "545:     else",
      "546:     {",
      "553:         if (msg->msg_controllen >= controllen_out)",
      "554:             msg->msg_controllen = controllen_out;",
      "555:         else",
      "556:             msg->msg_flags |= OE_MSG_CTRUNC;",
      "557:     }",
      "563:     if (ret > (ssize_t)data_size)",
      "564:     {",
      "565:         ret = -1;",
      "566:         OE_RAISE_ERRNO(OE_EINVAL);",
      "567:     }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "468:     oe_errno = 0;",
      "471:         OE_RAISE_ERRNO(OE_EINVAL);",
      "473:     if (oe_syscall_send_ocall(&ret, sock->host_fd, buf, count, flags) != OE_OK)",
      "474:         OE_RAISE_ERRNO(OE_EINVAL);",
      "476: done:",
      "477:     return ret;",
      "478: }",
      "",
      "[Removed Lines]",
      "470:     if (!sock || (count && !buf))",
      "",
      "[Added Lines]",
      "600:     if (!sock || (count && !buf) || count > OE_SSIZE_MAX)",
      "610:     if (ret > (ssize_t)count)",
      "611:     {",
      "612:         ret = -1;",
      "613:         OE_RAISE_ERRNO(OE_EINVAL);",
      "614:     }",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "491:     oe_errno = 0;",
      "494:         OE_RAISE_ERRNO(OE_EINVAL);",
      "496:     if (oe_syscall_sendto_ocall(",
      "",
      "[Removed Lines]",
      "493:     if (!sock || (count && !buf))",
      "",
      "[Added Lines]",
      "641:     if (!sock || (count && !buf) || count > OE_SSIZE_MAX)",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "505:         OE_RAISE_ERRNO(OE_EINVAL);",
      "506:     }",
      "508: done:",
      "509:     return ret;",
      "510: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "660:     if (ret > (ssize_t)count)",
      "661:     {",
      "662:         ret = -1;",
      "663:         OE_RAISE_ERRNO(OE_EINVAL);",
      "664:     }",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "518:     sock_t* sock = _cast_sock(sock_);",
      "519:     void* buf = NULL;",
      "520:     size_t buf_size = 0;",
      "522:     oe_errno = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "679:     size_t data_size = 0;",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "526:         OE_RAISE_ERRNO(OE_EINVAL);",
      "530:         OE_RAISE_ERRNO(OE_ENOMEM);",
      "533:     if (oe_syscall_sendmsg_ocall(",
      "534:             &ret,",
      "",
      "[Removed Lines]",
      "529:     if (oe_iov_pack(msg->msg_iov, (int)msg->msg_iovlen, &buf, &buf_size) != 0)",
      "",
      "[Added Lines]",
      "688:     if (oe_iov_pack(",
      "689:             msg->msg_iov, (int)msg->msg_iovlen, &buf, &buf_size, &data_size) !=",
      "690:         0)",
      "701:     if (data_size > OE_SSIZE_MAX)",
      "702:         OE_RAISE_ERRNO(OE_EINVAL);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "545:         OE_RAISE_ERRNO(OE_EINVAL);",
      "546:     }",
      "548: done:",
      "550:     if (buf)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "724:     if (ret > (ssize_t)data_size)",
      "725:     {",
      "726:         ret = -1;",
      "727:         OE_RAISE_ERRNO(OE_EINVAL);",
      "728:     }",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "686:     int ret = -1;",
      "687:     sock_t* sock = _cast_sock(sock_);",
      "688:     oe_socklen_t optlen_in = 0;",
      "690:     oe_errno = 0;",
      "693:         OE_RAISE_ERRNO(OE_EINVAL);",
      "698:     if (oe_syscall_getsockopt_ocall(",
      "701:     {",
      "702:         OE_RAISE_ERRNO(OE_EINVAL);",
      "703:     }",
      "705: done:",
      "707:     return ret;",
      "",
      "[Removed Lines]",
      "692:     if (!sock)",
      "695:     if (optlen)",
      "696:         optlen_in = *optlen;",
      "699:             &ret, sock->host_fd, level, optname, optval, optlen_in, optlen) !=",
      "700:         OE_OK)",
      "",
      "[Added Lines]",
      "871:     oe_socklen_t optlen_out = 0;",
      "875:     if (!sock || !optval || !optlen)",
      "878:     optlen_in = *optlen;",
      "881:             &ret,",
      "882:             sock->host_fd,",
      "883:             level,",
      "884:             optname,",
      "885:             optval,",
      "886:             optlen_in,",
      "887:             &optlen_out) != OE_OK)",
      "902:     if (optlen_out > optlen_in)",
      "903:         optlen_out = optlen_in;",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "760:     int ret = -1;",
      "761:     sock_t* sock = _cast_sock(sock_);",
      "762:     oe_socklen_t addrlen_in = 0;",
      "764:     oe_errno = 0;",
      "767:         OE_RAISE_ERRNO(OE_EINVAL);",
      "772:     if (oe_syscall_getpeername_ocall(",
      "773:             &ret,",
      "774:             sock->host_fd,",
      "775:             (struct oe_sockaddr*)addr,",
      "776:             addrlen_in,",
      "778:     {",
      "779:         OE_RAISE_ERRNO(OE_EINVAL);",
      "780:     }",
      "782: done:",
      "784:     return ret;",
      "",
      "[Removed Lines]",
      "766:     if (!sock)",
      "769:     if (addrlen)",
      "770:         addrlen_in = *addrlen;",
      "777:             addrlen) != OE_OK)",
      "",
      "[Added Lines]",
      "965:     oe_socklen_t addrlen_out = 0;",
      "969:     if (!sock || !addr || !addrlen)",
      "972:     addrlen_in = *addrlen;",
      "973:     if (addrlen_in < 0)",
      "974:         OE_RAISE_ERRNO(OE_EINVAL);",
      "981:             &addrlen_out) != OE_OK)",
      "990:     if (addrlen_out > sizeof(struct oe_sockaddr_storage))",
      "991:         OE_RAISE_ERRNO(OE_EINVAL);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "792:     int ret = -1;",
      "793:     sock_t* sock = _cast_sock(sock_);",
      "794:     oe_socklen_t addrlen_in = 0;",
      "796:     oe_errno = 0;",
      "799:         OE_RAISE_ERRNO(OE_EINVAL);",
      "804:     if (oe_syscall_getsockname_ocall(",
      "810:     {",
      "811:         OE_RAISE_ERRNO(OE_EINVAL);",
      "812:     }",
      "814: done:",
      "816:     return ret;",
      "",
      "[Removed Lines]",
      "798:     if (!sock)",
      "801:     if (addrlen)",
      "802:         addrlen_in = *addrlen;",
      "805:             &ret,",
      "806:             sock->host_fd,",
      "807:             (struct oe_sockaddr*)addr,",
      "808:             addrlen_in,",
      "809:             addrlen) != OE_OK)",
      "",
      "[Added Lines]",
      "1014:     oe_socklen_t addrlen_out = 0;",
      "1018:     if (!sock || !addr || !addrlen)",
      "1021:     addrlen_in = *addrlen;",
      "1022:     if (addrlen_in < 0)",
      "1023:         OE_RAISE_ERRNO(OE_EINVAL);",
      "1026:             &ret, sock->host_fd, addr, addrlen_in, &addrlen_out) != OE_OK)",
      "1035:     if (addrlen_out > sizeof(struct oe_sockaddr_storage))",
      "1036:         OE_RAISE_ERRNO(OE_EINVAL);",
      "1044:     if (addrlen_in >= addrlen_out)",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "835:     sock_t* sock = _cast_sock(desc);",
      "836:     void* buf = NULL;",
      "837:     size_t buf_size = 0;",
      "839:     if (!sock || (!iov && iovcnt) || iovcnt < 0 || iovcnt > OE_IOV_MAX)",
      "840:         OE_RAISE_ERRNO(OE_EINVAL);",
      "844:         OE_RAISE_ERRNO(OE_ENOMEM);",
      "847:     if (oe_syscall_recvv_ocall(&ret, sock->host_fd, buf, iovcnt, buf_size) !=",
      "848:         OE_OK)",
      "",
      "[Removed Lines]",
      "843:     if (oe_iov_pack(iov, iovcnt, &buf, &buf_size) != 0)",
      "",
      "[Added Lines]",
      "1071:     size_t data_size = 0;",
      "1077:     if (oe_iov_pack(iov, iovcnt, &buf, &buf_size, &data_size) != 0)",
      "1088:     if (data_size > OE_SSIZE_MAX)",
      "1089:         OE_RAISE_ERRNO(OE_EINVAL);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "850:         OE_RAISE_ERRNO(OE_EINVAL);",
      "851:     }",
      "854:     if (ret > 0)",
      "855:     {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1102:     if (ret > (ssize_t)(data_size))",
      "1103:     {",
      "1104:         ret = -1;",
      "1105:         OE_RAISE_ERRNO(OE_EINVAL);",
      "1106:     }",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "874:     sock_t* sock = _cast_sock(desc);",
      "875:     void* buf = NULL;",
      "876:     size_t buf_size = 0;",
      "878:     if (!sock || !iov || iovcnt < 0 || iovcnt > OE_IOV_MAX)",
      "879:         OE_RAISE_ERRNO(OE_EINVAL);",
      "883:         OE_RAISE_ERRNO(OE_ENOMEM);",
      "886:     if (oe_syscall_sendv_ocall(&ret, sock->host_fd, buf, iovcnt, buf_size) !=",
      "887:         OE_OK)",
      "",
      "[Removed Lines]",
      "882:     if (oe_iov_pack(iov, iovcnt, &buf, &buf_size) != 0)",
      "",
      "[Added Lines]",
      "1132:     size_t data_size = 0;",
      "1138:     if (oe_iov_pack(iov, iovcnt, &buf, &buf_size, &data_size) != 0)",
      "1149:     if (data_size > OE_SSIZE_MAX)",
      "1150:         OE_RAISE_ERRNO(OE_EINVAL);",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "889:         OE_RAISE_ERRNO(OE_EINVAL);",
      "890:     }",
      "892: done:",
      "894:     if (buf)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1163:     if (ret > (ssize_t)data_size)",
      "1164:     {",
      "1165:         ret = -1;",
      "1166:         OE_RAISE_ERRNO(OE_EINVAL);",
      "1167:     }",
      "",
      "---------------"
    ],
    "syscall/iov.c||syscall/iov.c": [
      "File: syscall/iov.c -> syscall/iov.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "17:     const struct oe_iovec* iov,",
      "18:     int iovcnt,",
      "19:     void** buf_out,",
      "21: {",
      "22:     int ret = -1;",
      "23:     struct oe_iovec* buf = NULL;",
      "",
      "[Removed Lines]",
      "20:     size_t* buf_size_out)",
      "",
      "[Added Lines]",
      "20:     size_t* buf_size_out,",
      "21:     size_t* data_size_out)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30:     if (buf_size_out)",
      "35:         goto done;",
      "",
      "[Removed Lines]",
      "34:     if (iovcnt < 0 || (iovcnt > 0 && !iov) || !buf_out || !buf_size_out)",
      "",
      "[Added Lines]",
      "34:     if (data_size_out)",
      "38:     if (iovcnt < 0 || (iovcnt > 0 && !iov) || !buf_out || !buf_size_out ||",
      "39:         !data_size_out)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "155:                 if (src_size != dest_size)",
      "156:                     goto done;",
      "159:                     goto done;",
      "161:                 if (oe_memcpy_s(dest, dest_size, src, src_size) != OE_OK)",
      "",
      "[Removed Lines]",
      "158:                 if (src < (uint8_t*)buf || src > (uint8_t*)buf + buf_size)",
      "",
      "[Added Lines]",
      "165:                 if (src < (uint8_t*)buf || src + src_size < src ||",
      "166:                     src + src_size > (uint8_t*)buf + buf_size)",
      "",
      "---------------"
    ],
    "syscall/socket.c||syscall/socket.c": [
      "File: syscall/socket.c -> syscall/socket.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "197:     void* buf,",
      "198:     size_t len,",
      "199:     int flags,",
      "201:     oe_socklen_t* addrlen)",
      "202: {",
      "203:     ssize_t ret = -1;",
      "",
      "[Removed Lines]",
      "200:     const struct oe_sockaddr* src_addr,",
      "",
      "[Added Lines]",
      "200:     struct oe_sockaddr* src_addr,",
      "",
      "---------------"
    ],
    "syscall/syscall.c||syscall/syscall.c": [
      "File: syscall/syscall.c -> syscall/syscall.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "617:             void* buf = (void*)arg2;",
      "618:             size_t len = (size_t)arg3;",
      "619:             int flags = (int)arg4;",
      "622:             oe_socklen_t* addrlen = (oe_socklen_t*)arg6;",
      "624:             ret = oe_recvfrom(sockfd, buf, len, flags, dest_add, addrlen);",
      "",
      "[Removed Lines]",
      "620:             const struct oe_sockaddr* dest_add =",
      "621:                 (const struct oe_sockaddr*)arg5;",
      "",
      "[Added Lines]",
      "620:             struct oe_sockaddr* dest_add = (struct oe_sockaddr*)arg5;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7f8ddec70b258c82f0515a0d98b30439f031258c",
      "candidate_info": {
        "commit_hash": "7f8ddec70b258c82f0515a0d98b30439f031258c",
        "repo": "openenclave/openenclave",
        "commit_url": "https://github.com/openenclave/openenclave/commit/7f8ddec70b258c82f0515a0d98b30439f031258c",
        "files": [
          "include/openenclave/internal/syscall.h",
          "include/openenclave/internal/syscall/declarations.h",
          "include/openenclave/internal/syscall/hook.h",
          "include/openenclave/internal/syscall/sys/syscall.h",
          "libc/syscalls.c",
          "syscall/CMakeLists.txt",
          "syscall/syscall.c",
          "tests/crypto/enclave/enc/enc.c",
          "tests/mbed/enc/enc.c"
        ],
        "message": "SYSCALL cleanup\n\nThis PR refactors and cleans up the implementation of syscall dispatching.\nIt will be followed up with another PR that reduces the TCB.\n\nCurrently syscalls are dispatched via single ~800 line switch case in syscall/syscall.c.\n\nIn addition to resulting in a large function, and associated maintenance issues, a large switch case has the following drawback:\n\n- **Larger TCB.** Enclaves that don't use a libc feature will still contain code for that feature.\n  For example, echo enclave that just prints a hello world still has code for sockets, epoll and all the other\n  syscalls it does not use.\n\n- There is no easy way to figure out the **set of syscalls** supported by OE rather than perusing the syscall dispatch function.\n\n- No **parameter checking** for syscalls.\n  Different syscalls take different number of parameters. There are currently no checks to make sure that\n  OE implementation of a syscall takes the necessary number of parameters.\n\nImplementation:\n\n- The list of supported syscalls are declared in syscall_decls.h\n\n- Each syscall is declared via OE_DECLARE_SYSCALLn macro where n is the number of arguments the syscall expects.\n  E.g:\n     `OE_DECLARE_SYSCALL4(SYS_faccessat);`\n     `OE_DECLARE_SYSCALL2(SYS_flock);`\n  If the callsite (which is generally in MUSL) does not pass the expected number of parameters, there will be a compile error.\n\n  Couple of syscalls may indeed expect varying number of parameters, these can be declared in their generic form.\n\n- Each syscall is defined using the OE_DEFINE_SYSCALLn macro:\n  E.g:\n  ```c\n  OE_DEFINE_SYSCALL5(SYS_epoll_pwait)\n  {\n     ....\n  }\n  ```\n\n  Under the hood, this results in the function **oe_SYS_epoll_pwait_impl**\n\n  This allows querying easily figuring out all the syscalls an enclave uses by searching for oe_SYS_ functions\n  in the binary:\n  ```bash\n    objdump -t echo_enc | grep oe_SYS_\n    00000000000fe950 l     F .text  00000000000000b0 oe_SYS_mount_impl\n    00000000000fd7b0 l     F .text  0000000000000149 oe_SYS_faccessat_impl\n    ...\n\n- To retain current behavior, syscalls are still dispatched via a switchcase that is now much simpler.\n   ```c\n   static long _syscall(\n    long num,\n    long arg1,\n    long arg2,\n    long arg3,\n    long arg4,\n    long arg5,\n    long arg6)\n    {\n       oe_errno = 0;\n\n       switch (num)\n       {\n          OE_SYSCALL_DISPATCH(SYS_accept, arg1, arg2, arg3);\n          OE_SYSCALL_DISPATCH(SYS_access, arg1, arg2);\n  ```\n  In the future the entire switch case will be avoided by the following strategy:\n\n  A call to a specific syscall:\n     `syscall(SYS_read, arg1, arg2)`\n\n  will be transormed to:\n     `oe_SYS_read_impl(arg1, arg2)`\n\n  This completely avoids the switch case. As a result, only those syscalls that are\n  actually used by a binary will get linked in.\n\nSigned-off-by: Anand Krishnamoorthi <anakrish@microsoft.com>",
        "before_after_code_files": [
          "include/openenclave/internal/syscall/declarations.h||include/openenclave/internal/syscall/declarations.h",
          "include/openenclave/internal/syscall.h||include/openenclave/internal/syscall/hook.h",
          "include/openenclave/internal/syscall/sys/syscall.h||include/openenclave/internal/syscall/sys/syscall.h",
          "libc/syscalls.c||libc/syscalls.c",
          "syscall/syscall.c||syscall/syscall.c",
          "tests/crypto/enclave/enc/enc.c||tests/crypto/enclave/enc/enc.c",
          "tests/mbed/enc/enc.c||tests/mbed/enc/enc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "syscall/syscall.c||syscall/syscall.c"
          ],
          "candidate": [
            "syscall/syscall.c||syscall/syscall.c"
          ]
        }
      },
      "candidate_diff": {
        "include/openenclave/internal/syscall/declarations.h||include/openenclave/internal/syscall/declarations.h": [
          "File: include/openenclave/internal/syscall/declarations.h -> include/openenclave/internal/syscall/declarations.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: #ifndef _OE_SYSCALL_DECLARATIONS_H",
          "5: #define _OE_SYSCALL_DECLARATIONS_H",
          "7: #include <bits/syscall.h>",
          "8: #include <openenclave/bits/defs.h>",
          "9: #include <openenclave/bits/result.h>",
          "14: #if __x86_64__ || _M_X64",
          "15: #include <openenclave/internal/syscall/sys/bits/syscall_x86_64.h>",
          "16: #elif defined(__aarch64__)",
          "17: #include <openenclave/internal/syscall/sys/bits/syscall_aarch64.h>",
          "18: #else",
          "19: #error Unsupported architecture",
          "20: #endif",
          "22: OE_EXTERNC_BEGIN",
          "24: #define OE_SYSCALL_NAME(index) oe##index##_impl",
          "26: #define OE_SYSCALL_DISPATCH(index, ...) \\",
          "27:     case OE_##index:                    \\",
          "28:         return OE_SYSCALL_NAME(_##index)(__VA_ARGS__)",
          "30: #define OE_SYSCALL_ARGS0 void",
          "31: #define OE_SYSCALL_ARGS1 long arg1",
          "32: #define OE_SYSCALL_ARGS2 OE_SYSCALL_ARGS1, long arg2",
          "33: #define OE_SYSCALL_ARGS3 OE_SYSCALL_ARGS2, long arg3",
          "34: #define OE_SYSCALL_ARGS4 OE_SYSCALL_ARGS3, long arg4",
          "35: #define OE_SYSCALL_ARGS5 OE_SYSCALL_ARGS4, long arg5",
          "36: #define OE_SYSCALL_ARGS6 OE_SYSCALL_ARGS5, long arg6",
          "37: #define OE_SYSCALL_ARGS7 OE_SYSCALL_ARGS6, long arg7",
          "39: #define OE_DECLARE_SYSCALL0(index)         \\",
          "40:     OE_STATIC_ASSERT(index == OE_##index); \\",
          "41:     long OE_SYSCALL_NAME(_##index)(OE_SYSCALL_ARGS0)",
          "42: #define OE_DECLARE_SYSCALL1(index)         \\",
          "43:     OE_STATIC_ASSERT(index == OE_##index); \\",
          "44:     long OE_SYSCALL_NAME(_##index)(OE_SYSCALL_ARGS1)",
          "45: #define OE_DECLARE_SYSCALL2(index)         \\",
          "46:     OE_STATIC_ASSERT(index == OE_##index); \\",
          "47:     long OE_SYSCALL_NAME(_##index)(OE_SYSCALL_ARGS2)",
          "48: #define OE_DECLARE_SYSCALL3(index)         \\",
          "49:     OE_STATIC_ASSERT(index == OE_##index); \\",
          "50:     long OE_SYSCALL_NAME(_##index)(OE_SYSCALL_ARGS3)",
          "51: #define OE_DECLARE_SYSCALL4(index)         \\",
          "52:     OE_STATIC_ASSERT(index == OE_##index); \\",
          "53:     long OE_SYSCALL_NAME(_##index)(OE_SYSCALL_ARGS4)",
          "54: #define OE_DECLARE_SYSCALL5(index)         \\",
          "55:     OE_STATIC_ASSERT(index == OE_##index); \\",
          "56:     long OE_SYSCALL_NAME(_##index)(OE_SYSCALL_ARGS5)",
          "57: #define OE_DECLARE_SYSCALL6(index)         \\",
          "58:     OE_STATIC_ASSERT(index == OE_##index); \\",
          "59:     long OE_SYSCALL_NAME(_##index)(OE_SYSCALL_ARGS6)",
          "60: #define OE_DECLARE_SYSCALL7(index)         \\",
          "61:     OE_STATIC_ASSERT(index == OE_##index); \\",
          "62:     long OE_SYSCALL_NAME(_##index)(OE_SYSCALL_ARGS7)",
          "64: #define OE_DEFINE_SYSCALL0 OE_DECLARE_SYSCALL0",
          "65: #define OE_DEFINE_SYSCALL1 OE_DECLARE_SYSCALL1",
          "66: #define OE_DEFINE_SYSCALL2 OE_DECLARE_SYSCALL2",
          "67: #define OE_DEFINE_SYSCALL3 OE_DECLARE_SYSCALL3",
          "68: #define OE_DEFINE_SYSCALL4 OE_DECLARE_SYSCALL4",
          "69: #define OE_DEFINE_SYSCALL5 OE_DECLARE_SYSCALL5",
          "70: #define OE_DEFINE_SYSCALL6 OE_DECLARE_SYSCALL6",
          "71: #define OE_DEFINE_SYSCALL7 OE_DECLARE_SYSCALL7",
          "78: OE_DECLARE_SYSCALL3(SYS_accept);",
          "79: #if __x86_64__ || _M_X64",
          "80: OE_DECLARE_SYSCALL2(SYS_access);",
          "81: #endif",
          "82: OE_DECLARE_SYSCALL3(SYS_bind);",
          "83: OE_DECLARE_SYSCALL1(SYS_chdir);",
          "84: OE_DECLARE_SYSCALL1(SYS_close);",
          "85: OE_DECLARE_SYSCALL3(SYS_connect);",
          "86: #if __x86_64__ || _M_X64",
          "87: OE_DECLARE_SYSCALL2(SYS_creat);",
          "88: #endif",
          "89: OE_DECLARE_SYSCALL1(SYS_dup);",
          "90: #if __x86_64__ || _M_X64",
          "91: OE_DECLARE_SYSCALL2(SYS_dup2);",
          "92: #endif",
          "93: OE_DECLARE_SYSCALL3(SYS_dup3);",
          "94: #if __x86_64__ || _M_X64",
          "95: OE_DECLARE_SYSCALL1(SYS_epoll_create);",
          "96: #endif",
          "97: OE_DECLARE_SYSCALL1(SYS_epoll_create1);",
          "98: OE_DECLARE_SYSCALL4(SYS_epoll_ctl);",
          "99: OE_DECLARE_SYSCALL5(SYS_epoll_pwait);",
          "100: #if __x86_64__ || _M_X64",
          "101: OE_DECLARE_SYSCALL4(SYS_epoll_wait);",
          "102: #endif",
          "103: OE_DECLARE_SYSCALL1(SYS_exit);",
          "104: OE_DECLARE_SYSCALL0(SYS_exit_group);",
          "105: OE_DECLARE_SYSCALL4(SYS_faccessat);",
          "106: OE_DECLARE_SYSCALL3(SYS_fcntl);",
          "107: OE_DECLARE_SYSCALL1(SYS_fdatasync);",
          "108: OE_DECLARE_SYSCALL2(SYS_flock);",
          "109: OE_DECLARE_SYSCALL2(SYS_fstat);",
          "110: OE_DECLARE_SYSCALL1(SYS_fsync);",
          "111: OE_DECLARE_SYSCALL2(SYS_getcwd);",
          "112: OE_DECLARE_SYSCALL3(SYS_getdents64);",
          "113: OE_DECLARE_SYSCALL0(SYS_getegid);",
          "114: OE_DECLARE_SYSCALL0(SYS_geteuid);",
          "115: OE_DECLARE_SYSCALL0(SYS_getgid);",
          "116: OE_DECLARE_SYSCALL2(SYS_getgroups);",
          "117: OE_DECLARE_SYSCALL3(SYS_getpeername);",
          "118: OE_DECLARE_SYSCALL1(SYS_getpgid);",
          "119: #if __x86_64__ || _M_X64",
          "120: OE_DECLARE_SYSCALL0(SYS_getpgrp);",
          "121: #endif",
          "122: OE_DECLARE_SYSCALL0(SYS_getpid);",
          "123: OE_DECLARE_SYSCALL0(SYS_getppid);",
          "124: OE_DECLARE_SYSCALL3(SYS_getsockname);",
          "125: OE_DECLARE_SYSCALL5(SYS_getsockopt);",
          "126: OE_DECLARE_SYSCALL0(SYS_getuid);",
          "127: OE_DECLARE_SYSCALL6(SYS_ioctl);",
          "128: #if __x86_64__ || _M_X64",
          "129: OE_DECLARE_SYSCALL2(SYS_link);",
          "130: #endif",
          "131: OE_DECLARE_SYSCALL5(SYS_linkat);",
          "132: OE_DECLARE_SYSCALL2(SYS_listen);",
          "133: OE_DECLARE_SYSCALL3(SYS_lseek);",
          "134: #if __x86_64__ || _M_X64",
          "135: OE_DECLARE_SYSCALL2(SYS_mkdir);",
          "136: #endif",
          "137: OE_DECLARE_SYSCALL3(SYS_mkdirat);",
          "138: OE_DECLARE_SYSCALL5(SYS_mount);",
          "139: OE_DECLARE_SYSCALL2(SYS_nanosleep);",
          "140: OE_DECLARE_SYSCALL4(SYS_newfstatat);",
          "141: #if __x86_64__ || _M_X64",
          "142: OE_DECLARE_SYSCALL3(SYS_open);",
          "143: #endif",
          "144: OE_DECLARE_SYSCALL4(SYS_openat);",
          "145: #if __x86_64__ || _M_X64",
          "146: OE_DECLARE_SYSCALL3(SYS_poll);",
          "147: #endif",
          "148: OE_DECLARE_SYSCALL4(SYS_ppoll);",
          "149: OE_DECLARE_SYSCALL4(SYS_pread64);",
          "150: OE_DECLARE_SYSCALL5(SYS_pselect6);",
          "151: OE_DECLARE_SYSCALL4(SYS_pwrite64);",
          "152: OE_DECLARE_SYSCALL3(SYS_read);",
          "153: OE_DECLARE_SYSCALL3(SYS_readv);",
          "154: OE_DECLARE_SYSCALL6(SYS_recvfrom);",
          "155: OE_DECLARE_SYSCALL3(SYS_recvmsg);",
          "156: #if __x86_64__ || _M_X64",
          "157: OE_DECLARE_SYSCALL2(SYS_rename);",
          "158: #endif",
          "159: OE_DECLARE_SYSCALL5(SYS_renameat);",
          "160: #if __x86_64__ || _M_X64",
          "161: OE_DECLARE_SYSCALL1(SYS_rmdir);",
          "162: #endif",
          "163: #if __x86_64__ || _M_X64",
          "164: OE_DECLARE_SYSCALL5(SYS_select);",
          "165: #endif",
          "166: OE_DECLARE_SYSCALL6(SYS_sendto);",
          "167: OE_DECLARE_SYSCALL3(SYS_sendmsg);",
          "168: OE_DECLARE_SYSCALL5(SYS_setsockopt);",
          "169: OE_DECLARE_SYSCALL2(SYS_shutdown);",
          "170: OE_DECLARE_SYSCALL3(SYS_socket);",
          "171: OE_DECLARE_SYSCALL4(SYS_socketpair);",
          "172: #if __x86_64__ || _M_X64",
          "173: OE_DECLARE_SYSCALL2(SYS_stat);",
          "174: #endif",
          "175: OE_DECLARE_SYSCALL2(SYS_truncate);",
          "176: OE_DECLARE_SYSCALL3(SYS_write);",
          "177: OE_DECLARE_SYSCALL3(SYS_writev);",
          "178: OE_DECLARE_SYSCALL1(SYS_uname);",
          "179: #if __x86_64__ || _M_X64",
          "180: OE_DECLARE_SYSCALL1(SYS_unlink);",
          "181: #endif",
          "182: OE_DECLARE_SYSCALL3(SYS_unlinkat);",
          "183: OE_DECLARE_SYSCALL2(SYS_umount2);",
          "185: OE_EXTERNC_END",
          "",
          "---------------"
        ],
        "include/openenclave/internal/syscall.h||include/openenclave/internal/syscall/hook.h": [
          "File: include/openenclave/internal/syscall.h -> include/openenclave/internal/syscall/hook.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: #include <openenclave/bits/defs.h>",
          "8: #include <openenclave/bits/result.h>",
          "",
          "[Removed Lines]",
          "4: #ifndef _OE_INTERNAL_SYSCALL_H",
          "5: #define _OE_INTERNAL_SYSCALL_H",
          "",
          "[Added Lines]",
          "4: #ifndef _OE_SYSCALL_HOOK_H",
          "5: #define _OE_SYSCALL_HOOK_H",
          "",
          "---------------"
        ],
        "include/openenclave/internal/syscall/sys/syscall.h||include/openenclave/internal/syscall/sys/syscall.h": [
          "File: include/openenclave/internal/syscall/sys/syscall.h -> include/openenclave/internal/syscall/sys/syscall.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: long oe_syscall(long number, ...);",
          "22: OE_EXTERNC_END",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include <openenclave/internal/syscall/declarations.h>",
          "",
          "---------------"
        ],
        "libc/syscalls.c||libc/syscalls.c": [
          "File: libc/syscalls.c -> libc/syscalls.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: #include <openenclave/corelibc/errno.h>",
          "9: #include <openenclave/enclave.h>",
          "10: #include <openenclave/internal/calls.h>",
          "12: #include <openenclave/internal/syscall/sys/stat.h>",
          "13: #include <openenclave/internal/syscall/sys/syscall.h>",
          "14: #include <openenclave/internal/thread.h>",
          "",
          "[Removed Lines]",
          "11: #include <openenclave/internal/syscall.h>",
          "",
          "[Added Lines]",
          "11: #include <openenclave/internal/syscall/hook.h>",
          "",
          "---------------"
        ],
        "syscall/syscall.c||syscall/syscall.c": [
          "File: syscall/syscall.c -> syscall/syscall.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #include <openenclave/internal/syscall/device.h>",
          "13: #include <openenclave/internal/syscall/dirent.h>",
          "14: #include <openenclave/internal/syscall/fcntl.h>",
          "15: #include <openenclave/internal/syscall/raise.h>",
          "16: #include <openenclave/internal/syscall/sys/ioctl.h>",
          "17: #include <openenclave/internal/syscall/sys/mount.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: #include <openenclave/internal/syscall/hook.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:     long arg3,",
          "34:     long arg4);",
          "44: {",
          "46:     oe_errno = 0;",
          "71: #endif",
          "216: #endif",
          "351: #endif",
          "678: #endif",
          "708: #endif",
          "762: #endif",
          "779: #endif",
          "844:         {",
          "846:             goto done;",
          "847:         }",
          "849:         {",
          "851:             goto done;",
          "852:         }",
          "855:         {",
          "857:             goto done;",
          "858:         }",
          "859: #endif",
          "873:     }",
          "876: done:",
          "877:     return ret;",
          "878: }",
          "880: long oe_syscall(long number, ...)",
          "881: {",
          "882:     long ret;",
          "",
          "[Removed Lines]",
          "36: static long _syscall(",
          "37:     long num,",
          "38:     long arg1,",
          "39:     long arg2,",
          "40:     long arg3,",
          "41:     long arg4,",
          "42:     long arg5,",
          "43:     long arg6)",
          "45:     long ret = -1;",
          "49:     switch (num)",
          "50:     {",
          "51: #if defined(OE_SYS_creat)",
          "52:         case OE_SYS_creat:",
          "53:         {",
          "54:             const char* pathname = (const char*)arg1;",
          "55:             oe_mode_t mode = (oe_mode_t)arg2;",
          "56:             int flags = (OE_O_CREAT | OE_O_WRONLY | OE_O_TRUNC);",
          "58:             ret = oe_open(pathname, flags, mode);",
          "60:             if (oe_errno == OE_ENOENT)",
          "61:             {",
          "65:                 oe_errno = OE_ENOSYS;",
          "66:                 goto done;",
          "67:             }",
          "69:             goto done;",
          "70:         }",
          "72: #if defined(OE_SYS_open)",
          "73:         case OE_SYS_open:",
          "74:         {",
          "75:             const char* pathname = (const char*)arg1;",
          "76:             int flags = (int)arg2;",
          "77:             uint32_t mode = (uint32_t)arg3;",
          "79:             ret = oe_open(pathname, flags, mode);",
          "81:             if (ret < 0 && oe_errno == OE_ENOENT)",
          "82:                 goto done;",
          "84:             goto done;",
          "85:         }",
          "86: #endif",
          "87:         case OE_SYS_openat:",
          "88:         {",
          "89:             int dirfd = (int)arg1;",
          "90:             const char* pathname = (const char*)arg2;",
          "91:             int flags = (int)arg3;",
          "92:             uint32_t mode = (uint32_t)arg4;",
          "94:             if (dirfd != OE_AT_FDCWD)",
          "95:             {",
          "96:                 oe_errno = OE_EBADF;",
          "97:                 goto done;",
          "98:             }",
          "100:             ret = oe_open(pathname, flags, mode);",
          "102:             if (ret < 0 && oe_errno == OE_ENOENT)",
          "103:                 goto done;",
          "105:             goto done;",
          "106:         }",
          "107:         case OE_SYS_lseek:",
          "108:         {",
          "109:             int fd = (int)arg1;",
          "110:             ssize_t off = (ssize_t)arg2;",
          "111:             int whence = (int)arg3;",
          "112:             ret = oe_lseek(fd, off, whence);",
          "113:             goto done;",
          "114:         }",
          "115:         case OE_SYS_pread64:",
          "116:         {",
          "117:             const int fd = (int)arg1;",
          "118:             void* const buf = (void*)arg2;",
          "119:             const size_t count = (size_t)arg3;",
          "120:             const oe_off_t offset = (oe_off_t)arg4;",
          "122:             ret = oe_pread(fd, buf, count, offset);",
          "123:             goto done;",
          "124:         }",
          "125:         case OE_SYS_pwrite64:",
          "126:         {",
          "127:             const int fd = (int)arg1;",
          "128:             const void* const buf = (void*)arg2;",
          "129:             const size_t count = (size_t)arg3;",
          "130:             const oe_off_t offset = (oe_off_t)arg4;",
          "132:             ret = oe_pwrite(fd, buf, count, offset);",
          "133:             goto done;",
          "134:         }",
          "135:         case OE_SYS_readv:",
          "136:         {",
          "137:             int fd = (int)arg1;",
          "138:             const struct oe_iovec* iov = (const struct oe_iovec*)arg2;",
          "139:             int iovcnt = (int)arg3;",
          "141:             ret = oe_readv(fd, iov, iovcnt);",
          "142:             goto done;",
          "143:         }",
          "144:         case OE_SYS_writev:",
          "145:         {",
          "146:             int fd = (int)arg1;",
          "147:             const struct oe_iovec* iov = (const struct oe_iovec*)arg2;",
          "148:             int iovcnt = (int)arg3;",
          "150:             ret = oe_writev(fd, iov, iovcnt);",
          "151:             goto done;",
          "152:         }",
          "153:         case OE_SYS_read:",
          "154:         {",
          "155:             int fd = (int)arg1;",
          "156:             void* buf = (void*)arg2;",
          "157:             size_t count = (size_t)arg3;",
          "159:             ret = oe_read(fd, buf, count);",
          "160:             goto done;",
          "161:         }",
          "162:         case OE_SYS_write:",
          "163:         {",
          "164:             int fd = (int)arg1;",
          "165:             const void* buf = (void*)arg2;",
          "166:             size_t count = (size_t)arg3;",
          "168:             ret = oe_write(fd, buf, count);",
          "169:             goto done;",
          "170:         }",
          "171:         case OE_SYS_close:",
          "172:         {",
          "173:             int fd = (int)arg1;",
          "175:             ret = oe_close(fd);",
          "176:             goto done;",
          "177:         }",
          "178:         case OE_SYS_dup:",
          "179:         {",
          "180:             int fd = (int)arg1;",
          "182:             ret = oe_dup(fd);",
          "183:             goto done;",
          "184:         }",
          "185:         case OE_SYS_flock:",
          "186:         {",
          "187:             int fd = (int)arg1;",
          "188:             int operation = (int)arg2;",
          "190:             ret = oe_flock(fd, operation);",
          "191:             goto done;",
          "192:         }",
          "193:         case OE_SYS_fsync:",
          "194:         {",
          "195:             const int fd = (int)arg1;",
          "197:             ret = oe_fsync(fd);",
          "198:             goto done;",
          "199:         }",
          "200:         case OE_SYS_fdatasync:",
          "201:         {",
          "202:             const int fd = (int)arg1;",
          "204:             ret = oe_fdatasync(fd);",
          "205:             goto done;",
          "206:         }",
          "207: #if defined(OE_SYS_dup2)",
          "208:         case OE_SYS_dup2:",
          "209:         {",
          "210:             int oldfd = (int)arg1;",
          "211:             int newfd = (int)arg2;",
          "213:             ret = oe_dup2(oldfd, newfd);",
          "214:             goto done;",
          "215:         }",
          "217:         case OE_SYS_dup3:",
          "218:         {",
          "219:             int oldfd = (int)arg1;",
          "220:             int newfd = (int)arg2;",
          "221:             int flags = (int)arg3;",
          "223:             if (flags != 0)",
          "224:             {",
          "225:                 oe_errno = OE_EINVAL;",
          "226:                 goto done;",
          "227:             }",
          "229:             ret = oe_dup2(oldfd, newfd);",
          "230:             goto done;",
          "231:         }",
          "232: #if defined(OE_SYS_stat)",
          "233:         case OE_SYS_stat:",
          "234:         {",
          "235:             const char* pathname = (const char*)arg1;",
          "236:             struct oe_stat_t* buf = (struct oe_stat_t*)arg2;",
          "237:             ret = oe_stat(pathname, buf);",
          "238:             goto done;",
          "239:         }",
          "240: #endif",
          "241:         case OE_SYS_newfstatat:",
          "242:         {",
          "243:             int dirfd = (int)arg1;",
          "244:             const char* pathname = (const char*)arg2;",
          "245:             struct oe_stat_t* buf = (struct oe_stat_t*)arg3;",
          "246:             int flags = (int)arg4;",
          "248:             if (dirfd != OE_AT_FDCWD)",
          "249:             {",
          "250:                 oe_errno = OE_EBADF;",
          "251:                 goto done;",
          "252:             }",
          "254:             if (flags != 0)",
          "255:             {",
          "256:                 oe_errno = OE_EINVAL;",
          "257:                 goto done;",
          "258:             }",
          "260:             ret = oe_stat(pathname, buf);",
          "261:             goto done;",
          "262:         }",
          "263:         case OE_SYS_fstat:",
          "264:         {",
          "265:             const int fd = (int)arg1;",
          "266:             struct oe_stat_t* const buf = (struct oe_stat_t*)arg2;",
          "267:             ret = oe_fstat(fd, buf);",
          "268:             goto done;",
          "269:         }",
          "270: #if defined(OE_SYS_link)",
          "271:         case OE_SYS_link:",
          "272:         {",
          "273:             const char* oldpath = (const char*)arg1;",
          "274:             const char* newpath = (const char*)arg2;",
          "275:             ret = oe_link(oldpath, newpath);",
          "276:             goto done;",
          "277:         }",
          "278: #endif",
          "279:         case OE_SYS_linkat:",
          "280:         {",
          "281:             int olddirfd = (int)arg1;",
          "282:             const char* oldpath = (const char*)arg2;",
          "283:             int newdirfd = (int)arg3;",
          "284:             const char* newpath = (const char*)arg4;",
          "285:             int flags = (int)arg5;",
          "287:             if (olddirfd != OE_AT_FDCWD)",
          "288:             {",
          "289:                 oe_errno = OE_EBADF;",
          "290:                 goto done;",
          "291:             }",
          "293:             if (newdirfd != OE_AT_FDCWD)",
          "294:             {",
          "295:                 oe_errno = OE_EBADF;",
          "296:                 goto done;",
          "297:             }",
          "299:             if (flags != 0)",
          "300:             {",
          "301:                 oe_errno = OE_EINVAL;",
          "302:                 goto done;",
          "303:             }",
          "305:             ret = oe_link(oldpath, newpath);",
          "306:             goto done;",
          "307:         }",
          "308: #if defined(OE_SYS_unlink)",
          "309:         case OE_SYS_unlink:",
          "310:         {",
          "311:             const char* pathname = (const char*)arg1;",
          "313:             ret = oe_unlink(pathname);",
          "314:             goto done;",
          "315:         }",
          "316: #endif",
          "317:         case OE_SYS_unlinkat:",
          "318:         {",
          "319:             int dirfd = (int)arg1;",
          "320:             const char* pathname = (const char*)arg2;",
          "321:             int flags = (int)arg3;",
          "323:             if (dirfd != OE_AT_FDCWD)",
          "324:             {",
          "325:                 oe_errno = OE_EBADF;",
          "326:                 goto done;",
          "327:             }",
          "329:             if (flags != OE_AT_REMOVEDIR && flags != 0)",
          "330:             {",
          "331:                 oe_errno = OE_EINVAL;",
          "332:                 goto done;",
          "333:             }",
          "335:             if (flags == OE_AT_REMOVEDIR)",
          "336:                 ret = oe_rmdir(pathname);",
          "337:             else",
          "338:                 ret = oe_unlink(pathname);",
          "340:             goto done;",
          "341:         }",
          "342: #if defined(OE_SYS_rename)",
          "343:         case OE_SYS_rename:",
          "344:         {",
          "345:             const char* oldpath = (const char*)arg1;",
          "346:             const char* newpath = (const char*)arg2;",
          "348:             ret = oe_rename(oldpath, newpath);",
          "349:             goto done;",
          "350:         }",
          "352:         case OE_SYS_renameat:",
          "353:         {",
          "354:             int olddirfd = (int)arg1;",
          "355:             const char* oldpath = (const char*)arg2;",
          "356:             int newdirfd = (int)arg3;",
          "357:             const char* newpath = (const char*)arg4;",
          "358:             int flags = (int)arg5;",
          "360:             if (olddirfd != OE_AT_FDCWD)",
          "361:             {",
          "362:                 oe_errno = OE_EBADF;",
          "363:                 goto done;",
          "364:             }",
          "366:             if (newdirfd != OE_AT_FDCWD)",
          "367:             {",
          "368:                 oe_errno = OE_EBADF;",
          "369:                 goto done;",
          "370:             }",
          "372:             if (flags != 0)",
          "373:             {",
          "374:                 oe_errno = OE_EINVAL;",
          "375:                 goto done;",
          "376:             }",
          "378:             ret = oe_rename(oldpath, newpath);",
          "379:             goto done;",
          "380:         }",
          "381:         case OE_SYS_truncate:",
          "382:         {",
          "383:             const char* path = (const char*)arg1;",
          "384:             ssize_t length = (ssize_t)arg2;",
          "386:             ret = oe_truncate(path, length);",
          "387:             goto done;",
          "388:         }",
          "389: #if defined(OE_SYS_mkdir)",
          "390:         case OE_SYS_mkdir:",
          "391:         {",
          "392:             const char* pathname = (const char*)arg1;",
          "393:             uint32_t mode = (uint32_t)arg2;",
          "395:             ret = oe_mkdir(pathname, mode);",
          "396:             goto done;",
          "397:         }",
          "398: #endif",
          "399:         case OE_SYS_mkdirat:",
          "400:         {",
          "401:             int dirfd = (int)arg1;",
          "402:             const char* pathname = (const char*)arg2;",
          "403:             uint32_t mode = (uint32_t)arg3;",
          "405:             if (dirfd != OE_AT_FDCWD)",
          "406:             {",
          "407:                 oe_errno = OE_EBADF;",
          "408:                 goto done;",
          "409:             }",
          "411:             ret = oe_mkdir(pathname, mode);",
          "412:             goto done;",
          "413:         }",
          "414: #if defined(OE_SYS_rmdir)",
          "415:         case OE_SYS_rmdir:",
          "416:         {",
          "417:             const char* pathname = (const char*)arg1;",
          "418:             ret = oe_rmdir(pathname);",
          "419:             goto done;",
          "420:         }",
          "421: #endif",
          "422: #if defined(OE_SYS_access)",
          "423:         case OE_SYS_access:",
          "424:         {",
          "425:             const char* pathname = (const char*)arg1;",
          "426:             int mode = (int)arg2;",
          "428:             ret = oe_access(pathname, mode);",
          "429:             goto done;",
          "430:         }",
          "431: #endif",
          "432:         case OE_SYS_faccessat:",
          "433:         {",
          "434:             int dirfd = (int)arg1;",
          "435:             const char* pathname = (const char*)arg2;",
          "436:             int mode = (int)arg3;",
          "437:             int flags = (int)arg4;",
          "439:             if (dirfd != OE_AT_FDCWD)",
          "440:             {",
          "441:                 oe_errno = OE_EBADF;",
          "442:                 goto done;",
          "443:             }",
          "445:             if (flags != 0)",
          "446:             {",
          "447:                 oe_errno = OE_EINVAL;",
          "448:                 goto done;",
          "449:             }",
          "451:             ret = oe_access(pathname, mode);",
          "452:             goto done;",
          "453:         }",
          "454:         case OE_SYS_getdents64:",
          "455:         {",
          "456:             unsigned int fd = (unsigned int)arg1;",
          "457:             struct oe_dirent* ent = (struct oe_dirent*)arg2;",
          "458:             unsigned int count = (unsigned int)arg3;",
          "459:             ret = oe_getdents64(fd, ent, count);",
          "460:             goto done;",
          "461:         }",
          "462:         case OE_SYS_ioctl:",
          "463:         {",
          "464:             int fd = (int)arg1;",
          "465:             unsigned long request = (unsigned long)arg2;",
          "466:             long p1 = arg3;",
          "467:             long p2 = arg4;",
          "468:             long p3 = arg5;",
          "469:             long p4 = arg6;",
          "471:             ret = oe_ioctl(fd, request, p1, p2, p3, p4);",
          "472:             goto done;",
          "473:         }",
          "474:         case OE_SYS_fcntl:",
          "475:         {",
          "476:             int fd = (int)arg1;",
          "477:             int cmd = (int)arg2;",
          "478:             uint64_t arg = (uint64_t)arg3;",
          "479:             ret = oe_fcntl(fd, cmd, arg);",
          "480:             goto done;",
          "481:         }",
          "482:         case OE_SYS_mount:",
          "483:         {",
          "484:             const char* source = (const char*)arg1;",
          "485:             const char* target = (const char*)arg2;",
          "486:             const char* fstype = (const char*)arg3;",
          "487:             unsigned long flags = (unsigned long)arg4;",
          "488:             void* data = (void*)arg5;",
          "490:             ret = oe_mount(source, target, fstype, flags, data);",
          "491:             goto done;",
          "492:         }",
          "493:         case OE_SYS_umount2:",
          "494:         {",
          "495:             const char* target = (const char*)arg1;",
          "496:             int flags = (int)arg2;",
          "498:             (void)flags;",
          "500:             ret = oe_umount(target);",
          "501:             goto done;",
          "502:         }",
          "503:         case OE_SYS_getcwd:",
          "504:         {",
          "505:             char* buf = (char*)arg1;",
          "506:             size_t size = (size_t)arg2;",
          "508:             if (!oe_getcwd(buf, size))",
          "509:             {",
          "510:                 ret = -1;",
          "511:             }",
          "512:             else",
          "513:             {",
          "514:                 ret = (long)size;",
          "515:             }",
          "517:             goto done;",
          "518:         }",
          "519:         case OE_SYS_chdir:",
          "520:         {",
          "521:             char* path = (char*)arg1;",
          "523:             ret = oe_chdir(path);",
          "524:             goto done;",
          "525:         }",
          "526:         case OE_SYS_socket:",
          "527:         {",
          "528:             int domain = (int)arg1;",
          "529:             int type = (int)arg2;",
          "530:             int protocol = (int)arg3;",
          "531:             ret = oe_socket(domain, type, protocol);",
          "532:             goto done;",
          "533:         }",
          "534:         case OE_SYS_connect:",
          "535:         {",
          "536:             int sd = (int)arg1;",
          "537:             const struct oe_sockaddr* addr = (const struct oe_sockaddr*)arg2;",
          "538:             oe_socklen_t addrlen = (oe_socklen_t)arg3;",
          "539:             ret = oe_connect(sd, addr, addrlen);",
          "540:             goto done;",
          "541:         }",
          "542:         case OE_SYS_setsockopt:",
          "543:         {",
          "544:             int sockfd = (int)arg1;",
          "545:             int level = (int)arg2;",
          "546:             int optname = (int)arg3;",
          "547:             void* optval = (void*)arg4;",
          "548:             oe_socklen_t optlen = (oe_socklen_t)arg5;",
          "549:             ret = oe_setsockopt(sockfd, level, optname, optval, optlen);",
          "550:             goto done;",
          "551:         }",
          "552:         case OE_SYS_getsockopt:",
          "553:         {",
          "554:             int sockfd = (int)arg1;",
          "555:             int level = (int)arg2;",
          "556:             int optname = (int)arg3;",
          "557:             void* optval = (void*)arg4;",
          "558:             oe_socklen_t* optlen = (oe_socklen_t*)arg5;",
          "559:             ret = oe_getsockopt(sockfd, level, optname, optval, optlen);",
          "560:             goto done;",
          "561:         }",
          "562:         case OE_SYS_getpeername:",
          "563:         {",
          "564:             int sockfd = (int)arg1;",
          "565:             struct sockaddr* addr = (struct sockaddr*)arg2;",
          "566:             oe_socklen_t* addrlen = (oe_socklen_t*)arg3;",
          "567:             ret = oe_getpeername(sockfd, (struct oe_sockaddr*)addr, addrlen);",
          "568:             goto done;",
          "569:         }",
          "570:         case OE_SYS_getsockname:",
          "571:         {",
          "572:             int sockfd = (int)arg1;",
          "573:             struct sockaddr* addr = (struct sockaddr*)arg2;",
          "574:             oe_socklen_t* addrlen = (oe_socklen_t*)arg3;",
          "575:             ret = oe_getsockname(sockfd, (struct oe_sockaddr*)addr, addrlen);",
          "576:             goto done;",
          "577:         }",
          "578:         case OE_SYS_bind:",
          "579:         {",
          "580:             int sockfd = (int)arg1;",
          "581:             struct oe_sockaddr* addr = (struct oe_sockaddr*)arg2;",
          "582:             oe_socklen_t addrlen = (oe_socklen_t)arg3;",
          "583:             ret = oe_bind(sockfd, addr, addrlen);",
          "584:             goto done;",
          "585:         }",
          "586:         case OE_SYS_listen:",
          "587:         {",
          "588:             int sockfd = (int)arg1;",
          "589:             int backlog = (int)arg2;",
          "590:             ret = oe_listen(sockfd, backlog);",
          "591:             goto done;",
          "592:         }",
          "593:         case OE_SYS_accept:",
          "594:         {",
          "595:             int sockfd = (int)arg1;",
          "596:             struct oe_sockaddr* addr = (struct oe_sockaddr*)arg2;",
          "597:             oe_socklen_t* addrlen = (oe_socklen_t*)arg3;",
          "598:             ret = oe_accept(sockfd, addr, addrlen);",
          "599:             goto done;",
          "600:         }",
          "601:         case OE_SYS_sendto:",
          "602:         {",
          "603:             int sockfd = (int)arg1;",
          "604:             const void* buf = (void*)arg2;",
          "605:             size_t len = (size_t)arg3;",
          "606:             int flags = (int)arg4;",
          "607:             const struct oe_sockaddr* dest_add =",
          "608:                 (const struct oe_sockaddr*)arg5;",
          "609:             oe_socklen_t addrlen = (oe_socklen_t)arg6;",
          "611:             ret = oe_sendto(sockfd, buf, len, flags, dest_add, addrlen);",
          "612:             goto done;",
          "613:         }",
          "614:         case OE_SYS_recvfrom:",
          "615:         {",
          "616:             int sockfd = (int)arg1;",
          "617:             void* buf = (void*)arg2;",
          "618:             size_t len = (size_t)arg3;",
          "619:             int flags = (int)arg4;",
          "620:             struct oe_sockaddr* dest_add = (struct oe_sockaddr*)arg5;",
          "621:             oe_socklen_t* addrlen = (oe_socklen_t*)arg6;",
          "623:             ret = oe_recvfrom(sockfd, buf, len, flags, dest_add, addrlen);",
          "624:             goto done;",
          "625:         }",
          "626:         case OE_SYS_sendmsg:",
          "627:         {",
          "628:             int sockfd = (int)arg1;",
          "629:             struct msghdr* buf = (struct msghdr*)arg2;",
          "630:             int flags = (int)arg3;",
          "632:             ret = oe_sendmsg(sockfd, (struct oe_msghdr*)buf, flags);",
          "633:             goto done;",
          "634:         }",
          "635:         case OE_SYS_recvmsg:",
          "636:         {",
          "637:             int sockfd = (int)arg1;",
          "638:             struct msghdr* buf = (struct msghdr*)arg2;",
          "639:             int flags = (int)arg3;",
          "641:             ret = oe_recvmsg(sockfd, (struct oe_msghdr*)buf, flags);",
          "642:             goto done;",
          "643:         }",
          "644:         case OE_SYS_socketpair:",
          "645:         {",
          "646:             int domain = (int)arg1;",
          "647:             int type = (int)arg2;",
          "648:             int protocol = (int)arg3;",
          "649:             int* sv = (int*)arg4;",
          "651:             ret = oe_socketpair(domain, type, protocol, sv);",
          "652:             goto done;",
          "653:         }",
          "654:         case OE_SYS_shutdown:",
          "655:         {",
          "656:             int sockfd = (int)arg1;",
          "657:             int how = (int)arg2;",
          "658:             ret = oe_shutdown(sockfd, how);",
          "659:             goto done;",
          "660:         }",
          "661:         case OE_SYS_uname:",
          "662:         {",
          "663:             struct oe_utsname* buf = (struct oe_utsname*)arg1;",
          "664:             ret = oe_uname(buf);",
          "665:             goto done;",
          "666:         }",
          "667: #if defined(OE_SYS_select)",
          "668:         case OE_SYS_select:",
          "669:         {",
          "670:             int nfds = (int)arg1;",
          "671:             oe_fd_set* readfds = (oe_fd_set*)arg2;",
          "672:             oe_fd_set* writefds = (oe_fd_set*)arg3;",
          "673:             oe_fd_set* efds = (oe_fd_set*)arg4;",
          "674:             struct oe_timeval* timeout = (struct oe_timeval*)arg5;",
          "675:             ret = oe_select(nfds, readfds, writefds, efds, timeout);",
          "676:             goto done;",
          "677:         }",
          "679:         case OE_SYS_pselect6:",
          "680:         {",
          "681:             int nfds = (int)arg1;",
          "682:             oe_fd_set* readfds = (oe_fd_set*)arg2;",
          "683:             oe_fd_set* writefds = (oe_fd_set*)arg3;",
          "684:             oe_fd_set* exceptfds = (oe_fd_set*)arg4;",
          "685:             struct oe_timespec* ts = (struct oe_timespec*)arg5;",
          "686:             struct oe_timeval buf;",
          "687:             struct oe_timeval* tv = NULL;",
          "689:             if (ts)",
          "690:             {",
          "691:                 tv = &buf;",
          "692:                 tv->tv_sec = ts->tv_sec;",
          "693:                 tv->tv_usec = ts->tv_nsec / 1000;",
          "694:             }",
          "696:             ret = oe_select(nfds, readfds, writefds, exceptfds, tv);",
          "697:             goto done;",
          "698:         }",
          "699: #if defined(OE_SYS_poll)",
          "700:         case OE_SYS_poll:",
          "701:         {",
          "702:             struct oe_pollfd* fds = (struct oe_pollfd*)arg1;",
          "703:             oe_nfds_t nfds = (oe_nfds_t)arg2;",
          "704:             int millis = (int)arg3;",
          "705:             ret = oe_poll(fds, nfds, millis);",
          "706:             goto done;",
          "707:         }",
          "709:         case OE_SYS_ppoll:",
          "710:         {",
          "711:             struct oe_pollfd* fds = (struct oe_pollfd*)arg1;",
          "712:             oe_nfds_t nfds = (oe_nfds_t)arg2;",
          "713:             struct oe_timespec* ts = (struct oe_timespec*)arg3;",
          "714:             void* sigmask = (void*)arg4;",
          "715:             int timeout = -1;",
          "717:             if (sigmask != NULL)",
          "718:             {",
          "719:                 oe_errno = OE_EINVAL;",
          "720:                 goto done;",
          "721:             }",
          "723:             if (ts)",
          "724:             {",
          "725:                 int64_t mul;",
          "726:                 int64_t div;",
          "727:                 int64_t sum;",
          "729:                 if (oe_safe_mul_s64(ts->tv_sec, 1000, &mul) != OE_OK)",
          "730:                 {",
          "731:                     oe_errno = OE_EINVAL;",
          "732:                     goto done;",
          "733:                 }",
          "735:                 div = ts->tv_nsec / 1000000;",
          "737:                 if (oe_safe_add_s64(mul, div, &sum) != OE_OK)",
          "738:                 {",
          "739:                     oe_errno = OE_EINVAL;",
          "740:                     goto done;",
          "741:                 }",
          "743:                 if (sum < OE_INT_MIN || sum > OE_INT_MAX)",
          "744:                 {",
          "745:                     oe_errno = OE_EINVAL;",
          "746:                     goto done;",
          "747:                 }",
          "749:                 timeout = (int)sum;",
          "750:             }",
          "752:             ret = oe_poll(fds, nfds, timeout);",
          "753:             goto done;",
          "754:         }",
          "755: #if defined(OE_SYS_epoll_create)",
          "756:         case OE_SYS_epoll_create:",
          "757:         {",
          "758:             int size = (int)arg1;",
          "759:             ret = oe_epoll_create(size);",
          "760:             goto done;",
          "761:         }",
          "763:         case OE_SYS_epoll_create1:",
          "764:         {",
          "765:             int flags = (int)arg1;",
          "766:             ret = oe_epoll_create1(flags);",
          "767:             goto done;",
          "768:         }",
          "769: #if defined(OE_SYS_epoll_wait)",
          "770:         case OE_SYS_epoll_wait:",
          "771:         {",
          "772:             int epfd = (int)arg1;",
          "773:             struct oe_epoll_event* events = (struct oe_epoll_event*)arg2;",
          "774:             int maxevents = (int)arg3;",
          "775:             int timeout = (int)arg4;",
          "776:             ret = oe_epoll_wait(epfd, events, maxevents, timeout);",
          "777:             goto done;",
          "778:         }",
          "780:         case OE_SYS_epoll_pwait:",
          "781:         {",
          "782:             int epfd = (int)arg1;",
          "783:             struct oe_epoll_event* events = (struct oe_epoll_event*)arg2;",
          "784:             int maxevents = (int)arg3;",
          "785:             int timeout = (int)arg4;",
          "786:             const oe_sigset_t* sigmask = (const oe_sigset_t*)arg5;",
          "787:             ret = oe_epoll_pwait(epfd, events, maxevents, timeout, sigmask);",
          "788:             goto done;",
          "789:         }",
          "790:         case OE_SYS_epoll_ctl:",
          "791:         {",
          "792:             int epfd = (int)arg1;",
          "793:             int op = (int)arg2;",
          "794:             int fd = (int)arg3;",
          "795:             struct oe_epoll_event* event = (struct oe_epoll_event*)arg4;",
          "796:             ret = oe_epoll_ctl(epfd, op, fd, event);",
          "797:             goto done;",
          "798:         }",
          "799:         case OE_SYS_exit_group:",
          "800:         {",
          "801:             ret = 0;",
          "802:             goto done;",
          "803:         }",
          "804:         case OE_SYS_exit:",
          "805:         {",
          "806:             int status = (int)arg1;",
          "807:             oe_exit(status);",
          "808:             goto done;",
          "809:         }",
          "810:         case OE_SYS_getpid:",
          "811:         {",
          "812:             ret = (long)oe_getpid();",
          "813:             goto done;",
          "814:         }",
          "815:         case OE_SYS_getuid:",
          "816:         {",
          "817:             ret = (long)oe_getuid();",
          "818:             goto done;",
          "819:         }",
          "820:         case OE_SYS_geteuid:",
          "821:         {",
          "822:             ret = (long)oe_geteuid();",
          "823:             goto done;",
          "824:         }",
          "825:         case OE_SYS_getgid:",
          "826:         {",
          "827:             ret = (long)oe_getgid();",
          "828:             goto done;",
          "829:         }",
          "830:         case OE_SYS_getpgid:",
          "831:         {",
          "832:             int pid = (int)arg1;",
          "833:             ret = (long)oe_getpgid(pid);",
          "834:             goto done;",
          "835:         }",
          "836:         case OE_SYS_getgroups:",
          "837:         {",
          "838:             int size = (int)arg1;",
          "839:             oe_gid_t* list = (oe_gid_t*)arg2;",
          "840:             ret = (long)oe_getgroups(size, list);",
          "841:             goto done;",
          "842:         }",
          "843:         case OE_SYS_getegid:",
          "845:             ret = (long)oe_getegid();",
          "848:         case OE_SYS_getppid:",
          "850:             ret = (long)oe_getppid();",
          "853: #if defined(OE_SYS_getpgrp)",
          "854:         case OE_SYS_getpgrp:",
          "856:             ret = (long)oe_getpgrp();",
          "860:         case OE_SYS_nanosleep:",
          "861:         {",
          "862:             struct oe_timespec* req = (struct oe_timespec*)arg1;",
          "863:             struct oe_timespec* rem = (struct oe_timespec*)arg2;",
          "864:             ret = (long)oe_nanosleep(req, rem);",
          "865:             goto done;",
          "866:         }",
          "867:         default:",
          "868:         {",
          "869:             oe_errno = OE_ENOSYS;",
          "870:             OE_TRACE_WARNING(\"syscall num=%ld not handled\", num);",
          "871:             goto done;",
          "872:         }",
          "",
          "[Added Lines]",
          "37: OE_DEFINE_SYSCALL3(SYS_accept)",
          "40:     int sockfd = (int)arg1;",
          "41:     struct oe_sockaddr* addr = (struct oe_sockaddr*)arg2;",
          "42:     oe_socklen_t* addrlen = (oe_socklen_t*)arg3;",
          "43:     return oe_accept(sockfd, addr, addrlen);",
          "44: }",
          "46: #if __x86_64__ || _M_X64",
          "47: OE_DEFINE_SYSCALL2(SYS_access)",
          "48: {",
          "49:     oe_errno = 0;",
          "50:     const char* pathname = (const char*)arg1;",
          "51:     int mode = (int)arg2;",
          "53:     return oe_access(pathname, mode);",
          "54: }",
          "57: OE_DEFINE_SYSCALL3(SYS_bind)",
          "58: {",
          "59:     oe_errno = 0;",
          "60:     int sockfd = (int)arg1;",
          "61:     struct oe_sockaddr* addr = (struct oe_sockaddr*)arg2;",
          "62:     oe_socklen_t addrlen = (oe_socklen_t)arg3;",
          "63:     return oe_bind(sockfd, addr, addrlen);",
          "64: }",
          "66: OE_DEFINE_SYSCALL1(SYS_chdir)",
          "67: {",
          "68:     oe_errno = 0;",
          "69:     char* path = (char*)arg1;",
          "71:     return oe_chdir(path);",
          "72: }",
          "74: OE_DEFINE_SYSCALL1(SYS_close)",
          "75: {",
          "76:     oe_errno = 0;",
          "77:     int fd = (int)arg1;",
          "79:     return oe_close(fd);",
          "80: }",
          "82: OE_DEFINE_SYSCALL3(SYS_connect)",
          "83: {",
          "84:     oe_errno = 0;",
          "85:     int sd = (int)arg1;",
          "86:     const struct oe_sockaddr* addr = (const struct oe_sockaddr*)arg2;",
          "87:     oe_socklen_t addrlen = (oe_socklen_t)arg3;",
          "88:     return oe_connect(sd, addr, addrlen);",
          "89: }",
          "91: #if __x86_64__ || _M_X64",
          "92: OE_DEFINE_SYSCALL2(SYS_creat)",
          "93: {",
          "94:     oe_errno = 0;",
          "95:     long ret = -1;",
          "96:     const char* pathname = (const char*)arg1;",
          "97:     oe_mode_t mode = (oe_mode_t)arg2;",
          "98:     int flags = (OE_O_CREAT | OE_O_WRONLY | OE_O_TRUNC);",
          "100:     ret = oe_open(pathname, flags, mode);",
          "102:     if (oe_errno == OE_ENOENT)",
          "103:     {",
          "107:         oe_errno = OE_ENOSYS;",
          "108:     }",
          "110:     return ret;",
          "111: }",
          "112: #endif",
          "114: OE_DEFINE_SYSCALL1(SYS_dup)",
          "115: {",
          "116:     oe_errno = 0;",
          "117:     int fd = (int)arg1;",
          "119:     return oe_dup(fd);",
          "120: }",
          "122: #if __x86_64__ || _M_X64",
          "123: OE_DEFINE_SYSCALL2(SYS_dup2)",
          "124: {",
          "125:     oe_errno = 0;",
          "126:     int oldfd = (int)arg1;",
          "127:     int newfd = (int)arg2;",
          "129:     return oe_dup2(oldfd, newfd);",
          "130: }",
          "131: #endif",
          "133: OE_DEFINE_SYSCALL3(SYS_dup3)",
          "134: {",
          "135:     oe_errno = 0;",
          "136:     long ret = -1;",
          "137:     int oldfd = (int)arg1;",
          "138:     int newfd = (int)arg2;",
          "139:     int flags = (int)arg3;",
          "141:     if (flags != 0)",
          "142:     {",
          "143:         oe_errno = OE_EINVAL;",
          "144:         goto done;",
          "145:     }",
          "147:     ret = oe_dup2(oldfd, newfd);",
          "148: done:",
          "149:     return ret;",
          "150: }",
          "152: #if __x86_64__ || _M_X64",
          "153: OE_DEFINE_SYSCALL1(SYS_epoll_create)",
          "154: {",
          "155:     oe_errno = 0;",
          "156:     int size = (int)arg1;",
          "157:     return oe_epoll_create(size);",
          "158: }",
          "161: OE_DEFINE_SYSCALL1(SYS_epoll_create1)",
          "162: {",
          "163:     oe_errno = 0;",
          "164:     int flags = (int)arg1;",
          "165:     return oe_epoll_create1(flags);",
          "166: }",
          "168: OE_DEFINE_SYSCALL4(SYS_epoll_ctl)",
          "169: {",
          "170:     oe_errno = 0;",
          "171:     int epfd = (int)arg1;",
          "172:     int op = (int)arg2;",
          "173:     int fd = (int)arg3;",
          "174:     struct oe_epoll_event* event = (struct oe_epoll_event*)arg4;",
          "175:     return oe_epoll_ctl(epfd, op, fd, event);",
          "176: }",
          "178: OE_DEFINE_SYSCALL5(SYS_epoll_pwait)",
          "179: {",
          "180:     oe_errno = 0;",
          "181:     int epfd = (int)arg1;",
          "182:     struct oe_epoll_event* events = (struct oe_epoll_event*)arg2;",
          "183:     int maxevents = (int)arg3;",
          "184:     int timeout = (int)arg4;",
          "185:     const oe_sigset_t* sigmask = (const oe_sigset_t*)arg5;",
          "186:     return oe_epoll_pwait(epfd, events, maxevents, timeout, sigmask);",
          "187: }",
          "189: #if __x86_64__ || _M_X64",
          "190: OE_DEFINE_SYSCALL4(SYS_epoll_wait)",
          "191: {",
          "192:     oe_errno = 0;",
          "193:     int epfd = (int)arg1;",
          "194:     struct oe_epoll_event* events = (struct oe_epoll_event*)arg2;",
          "195:     int maxevents = (int)arg3;",
          "196:     int timeout = (int)arg4;",
          "197:     return oe_epoll_wait(epfd, events, maxevents, timeout);",
          "198: }",
          "201: OE_DEFINE_SYSCALL1(SYS_exit)",
          "202: {",
          "203:     oe_errno = 0;",
          "204:     int status = (int)arg1;",
          "205:     oe_exit(status);",
          "208:     asm volatile(\"ud2\");",
          "209:     return -1;",
          "210: }",
          "212: OE_DEFINE_SYSCALL0(SYS_exit_group)",
          "213: {",
          "214:     oe_errno = 0;",
          "215:     return 0;",
          "216: }",
          "218: OE_DEFINE_SYSCALL4(SYS_faccessat)",
          "219: {",
          "220:     oe_errno = 0;",
          "221:     long ret = -1;",
          "222:     int dirfd = (int)arg1;",
          "223:     const char* pathname = (const char*)arg2;",
          "224:     int mode = (int)arg3;",
          "225:     int flags = (int)arg4;",
          "227:     if (dirfd != OE_AT_FDCWD)",
          "228:     {",
          "229:         oe_errno = OE_EBADF;",
          "230:         goto done;",
          "231:     }",
          "233:     if (flags != 0)",
          "234:     {",
          "235:         oe_errno = OE_EINVAL;",
          "236:         goto done;",
          "237:     }",
          "239:     ret = oe_access(pathname, mode);",
          "240: done:",
          "241:     return ret;",
          "242: }",
          "244: OE_DEFINE_SYSCALL3(SYS_fcntl)",
          "245: {",
          "246:     oe_errno = 0;",
          "247:     int fd = (int)arg1;",
          "248:     int cmd = (int)arg2;",
          "249:     uint64_t arg = (uint64_t)arg3;",
          "250:     return oe_fcntl(fd, cmd, arg);",
          "251: }",
          "253: OE_DEFINE_SYSCALL1(SYS_fdatasync)",
          "254: {",
          "255:     oe_errno = 0;",
          "256:     const int fd = (int)arg1;",
          "258:     return oe_fdatasync(fd);",
          "259: }",
          "261: OE_DEFINE_SYSCALL2(SYS_flock)",
          "262: {",
          "263:     oe_errno = 0;",
          "264:     int fd = (int)arg1;",
          "265:     int operation = (int)arg2;",
          "267:     return oe_flock(fd, operation);",
          "268: }",
          "270: OE_DEFINE_SYSCALL2(SYS_fstat)",
          "271: {",
          "272:     oe_errno = 0;",
          "273:     const int fd = (int)arg1;",
          "274:     struct oe_stat_t* const buf = (struct oe_stat_t*)arg2;",
          "275:     return oe_fstat(fd, buf);",
          "276: }",
          "278: OE_DEFINE_SYSCALL1(SYS_fsync)",
          "279: {",
          "280:     oe_errno = 0;",
          "281:     const int fd = (int)arg1;",
          "283:     return oe_fsync(fd);",
          "284: }",
          "286: OE_DEFINE_SYSCALL2(SYS_getcwd)",
          "287: {",
          "288:     oe_errno = 0;",
          "289:     long ret = -1;",
          "290:     char* buf = (char*)arg1;",
          "291:     size_t size = (size_t)arg2;",
          "293:     if (!oe_getcwd(buf, size))",
          "294:     {",
          "295:         ret = -1;",
          "296:     }",
          "297:     else",
          "298:     {",
          "299:         ret = (long)size;",
          "300:     }",
          "302:     return ret;",
          "303: }",
          "305: OE_DEFINE_SYSCALL3(SYS_getdents64)",
          "306: {",
          "307:     oe_errno = 0;",
          "308:     unsigned int fd = (unsigned int)arg1;",
          "309:     struct oe_dirent* ent = (struct oe_dirent*)arg2;",
          "310:     unsigned int count = (unsigned int)arg3;",
          "311:     return oe_getdents64(fd, ent, count);",
          "312: }",
          "314: OE_DEFINE_SYSCALL0(SYS_getegid)",
          "315: {",
          "316:     oe_errno = 0;",
          "317:     return (long)oe_getegid();",
          "318: }",
          "320: OE_DEFINE_SYSCALL0(SYS_geteuid)",
          "321: {",
          "322:     oe_errno = 0;",
          "323:     return (long)oe_geteuid();",
          "324: }",
          "326: OE_DEFINE_SYSCALL2(SYS_getgroups)",
          "327: {",
          "328:     oe_errno = 0;",
          "329:     int size = (int)arg1;",
          "330:     oe_gid_t* list = (oe_gid_t*)arg2;",
          "331:     return (long)oe_getgroups(size, list);",
          "332: }",
          "334: OE_DEFINE_SYSCALL3(SYS_getpeername)",
          "335: {",
          "336:     oe_errno = 0;",
          "337:     int sockfd = (int)arg1;",
          "338:     struct sockaddr* addr = (struct sockaddr*)arg2;",
          "339:     oe_socklen_t* addrlen = (oe_socklen_t*)arg3;",
          "340:     return oe_getpeername(sockfd, (struct oe_sockaddr*)addr, addrlen);",
          "341: }",
          "343: OE_DEFINE_SYSCALL1(SYS_getpgid)",
          "344: {",
          "345:     oe_errno = 0;",
          "346:     int pid = (int)arg1;",
          "347:     return (long)oe_getpgid(pid);",
          "348: }",
          "350: #if __x86_64__ || _M_X64",
          "351: OE_DEFINE_SYSCALL0(SYS_getpgrp)",
          "352: {",
          "353:     oe_errno = 0;",
          "354:     return (long)oe_getpgrp();",
          "355: }",
          "358: OE_DEFINE_SYSCALL0(SYS_getpid)",
          "359: {",
          "360:     oe_errno = 0;",
          "361:     return (long)oe_getpid();",
          "362: }",
          "364: OE_DEFINE_SYSCALL0(SYS_getgid)",
          "365: {",
          "366:     oe_errno = 0;",
          "367:     return (long)oe_getgid();",
          "368: }",
          "370: OE_DEFINE_SYSCALL0(SYS_getppid)",
          "371: {",
          "372:     oe_errno = 0;",
          "373:     return (long)oe_getppid();",
          "374: }",
          "376: OE_DEFINE_SYSCALL3(SYS_getsockname)",
          "377: {",
          "378:     oe_errno = 0;",
          "379:     int sockfd = (int)arg1;",
          "380:     struct sockaddr* addr = (struct sockaddr*)arg2;",
          "381:     oe_socklen_t* addrlen = (oe_socklen_t*)arg3;",
          "382:     return oe_getsockname(sockfd, (struct oe_sockaddr*)addr, addrlen);",
          "383: }",
          "385: OE_DEFINE_SYSCALL5(SYS_getsockopt)",
          "386: {",
          "387:     oe_errno = 0;",
          "388:     int sockfd = (int)arg1;",
          "389:     int level = (int)arg2;",
          "390:     int optname = (int)arg3;",
          "391:     void* optval = (void*)arg4;",
          "392:     oe_socklen_t* optlen = (oe_socklen_t*)arg5;",
          "393:     return oe_getsockopt(sockfd, level, optname, optval, optlen);",
          "394: }",
          "396: OE_DEFINE_SYSCALL0(SYS_getuid)",
          "397: {",
          "398:     oe_errno = 0;",
          "399:     return (long)oe_getuid();",
          "400: }",
          "402: OE_DEFINE_SYSCALL6(SYS_ioctl)",
          "403: {",
          "404:     oe_errno = 0;",
          "405:     int fd = (int)arg1;",
          "406:     unsigned long request = (unsigned long)arg2;",
          "407:     long p1 = arg3;",
          "408:     long p2 = arg4;",
          "409:     long p3 = arg5;",
          "410:     long p4 = arg6;",
          "412:     return oe_ioctl(fd, request, p1, p2, p3, p4);",
          "413: }",
          "415: #if __x86_64__ || _M_X64",
          "416: OE_DEFINE_SYSCALL2(SYS_link)",
          "417: {",
          "418:     oe_errno = 0;",
          "419:     const char* oldpath = (const char*)arg1;",
          "420:     const char* newpath = (const char*)arg2;",
          "421:     return oe_link(oldpath, newpath);",
          "422: }",
          "425: OE_DEFINE_SYSCALL5(SYS_linkat)",
          "426: {",
          "427:     oe_errno = 0;",
          "428:     long ret = -1;",
          "429:     int olddirfd = (int)arg1;",
          "430:     const char* oldpath = (const char*)arg2;",
          "431:     int newdirfd = (int)arg3;",
          "432:     const char* newpath = (const char*)arg4;",
          "433:     int flags = (int)arg5;",
          "435:     if (olddirfd != OE_AT_FDCWD)",
          "436:     {",
          "437:         oe_errno = OE_EBADF;",
          "438:         goto done;",
          "439:     }",
          "441:     if (newdirfd != OE_AT_FDCWD)",
          "442:     {",
          "443:         oe_errno = OE_EBADF;",
          "444:         goto done;",
          "445:     }",
          "447:     if (flags != 0)",
          "448:     {",
          "449:         oe_errno = OE_EINVAL;",
          "450:         goto done;",
          "451:     }",
          "453:     ret = oe_link(oldpath, newpath);",
          "454: done:",
          "455:     return ret;",
          "456: }",
          "458: OE_DEFINE_SYSCALL2(SYS_listen)",
          "459: {",
          "460:     oe_errno = 0;",
          "461:     int sockfd = (int)arg1;",
          "462:     int backlog = (int)arg2;",
          "463:     return oe_listen(sockfd, backlog);",
          "464: }",
          "466: OE_DEFINE_SYSCALL3(SYS_lseek)",
          "467: {",
          "468:     oe_errno = 0;",
          "469:     int fd = (int)arg1;",
          "470:     ssize_t off = (ssize_t)arg2;",
          "471:     int whence = (int)arg3;",
          "472:     return oe_lseek(fd, off, whence);",
          "473: }",
          "475: #if __x86_64__ || _M_X64",
          "476: OE_DEFINE_SYSCALL2(SYS_mkdir)",
          "477: {",
          "478:     oe_errno = 0;",
          "479:     const char* pathname = (const char*)arg1;",
          "480:     uint32_t mode = (uint32_t)arg2;",
          "482:     return oe_mkdir(pathname, mode);",
          "483: }",
          "486: OE_DEFINE_SYSCALL3(SYS_mkdirat)",
          "487: {",
          "488:     oe_errno = 0;",
          "489:     long ret = -1;",
          "490:     int dirfd = (int)arg1;",
          "491:     const char* pathname = (const char*)arg2;",
          "492:     uint32_t mode = (uint32_t)arg3;",
          "494:     if (dirfd != OE_AT_FDCWD)",
          "495:     {",
          "496:         oe_errno = OE_EBADF;",
          "497:         goto done;",
          "498:     }",
          "500:     ret = oe_mkdir(pathname, mode);",
          "501: done:",
          "502:     return ret;",
          "503: }",
          "505: OE_DEFINE_SYSCALL5(SYS_mount)",
          "506: {",
          "507:     oe_errno = 0;",
          "508:     const char* source = (const char*)arg1;",
          "509:     const char* target = (const char*)arg2;",
          "510:     const char* fstype = (const char*)arg3;",
          "511:     unsigned long flags = (unsigned long)arg4;",
          "512:     void* data = (void*)arg5;",
          "514:     return oe_mount(source, target, fstype, flags, data);",
          "515: }",
          "517: OE_DEFINE_SYSCALL2(SYS_nanosleep)",
          "518: {",
          "519:     oe_errno = 0;",
          "520:     struct oe_timespec* req = (struct oe_timespec*)arg1;",
          "521:     struct oe_timespec* rem = (struct oe_timespec*)arg2;",
          "522:     return (long)oe_nanosleep(req, rem);",
          "523: }",
          "525: OE_DEFINE_SYSCALL4(SYS_newfstatat)",
          "526: {",
          "527:     oe_errno = 0;",
          "528:     long ret = -1;",
          "529:     int dirfd = (int)arg1;",
          "530:     const char* pathname = (const char*)arg2;",
          "531:     struct oe_stat_t* buf = (struct oe_stat_t*)arg3;",
          "532:     int flags = (int)arg4;",
          "534:     if (dirfd != OE_AT_FDCWD)",
          "535:     {",
          "536:         oe_errno = OE_EBADF;",
          "537:         goto done;",
          "538:     }",
          "540:     if (flags != 0)",
          "541:     {",
          "542:         oe_errno = OE_EINVAL;",
          "543:         goto done;",
          "544:     }",
          "546:     ret = oe_stat(pathname, buf);",
          "547: done:",
          "548:     return ret;",
          "549: }",
          "551: #if __x86_64__ || _M_X64",
          "552: OE_DEFINE_SYSCALL3(SYS_open)",
          "553: {",
          "554:     oe_errno = 0;",
          "555:     long ret = -1;",
          "557:     const char* pathname = (const char*)arg1;",
          "558:     int flags = (int)arg2;",
          "559:     uint32_t mode = (uint32_t)arg3;",
          "561:     ret = oe_open(pathname, flags, mode);",
          "563:     if (ret < 0 && oe_errno == OE_ENOENT)",
          "564:         goto done;",
          "566:     goto done;",
          "567: done:",
          "568:     return ret;",
          "569: }",
          "572: OE_DEFINE_SYSCALL4(SYS_openat)",
          "573: {",
          "574:     oe_errno = 0;",
          "575:     long ret = -1;",
          "576:     int dirfd = (int)arg1;",
          "577:     const char* pathname = (const char*)arg2;",
          "578:     int flags = (int)arg3;",
          "579:     uint32_t mode = (uint32_t)arg4;",
          "581:     if (dirfd != OE_AT_FDCWD)",
          "582:     {",
          "583:         oe_errno = OE_EBADF;",
          "584:         goto done;",
          "585:     }",
          "587:     ret = oe_open(pathname, flags, mode);",
          "589:     if (ret < 0 && oe_errno == OE_ENOENT)",
          "590:         goto done;",
          "592:     goto done;",
          "593: done:",
          "594:     return ret;",
          "595: }",
          "597: #if __x86_64__ || _M_X64",
          "598: OE_DEFINE_SYSCALL3(SYS_poll)",
          "599: {",
          "600:     oe_errno = 0;",
          "601:     struct oe_pollfd* fds = (struct oe_pollfd*)arg1;",
          "602:     oe_nfds_t nfds = (oe_nfds_t)arg2;",
          "603:     int millis = (int)arg3;",
          "604:     return oe_poll(fds, nfds, millis);",
          "605: }",
          "606: #endif",
          "608: OE_DEFINE_SYSCALL4(SYS_ppoll)",
          "609: {",
          "610:     oe_errno = 0;",
          "611:     long ret = -1;",
          "612:     struct oe_pollfd* fds = (struct oe_pollfd*)arg1;",
          "613:     oe_nfds_t nfds = (oe_nfds_t)arg2;",
          "614:     struct oe_timespec* ts = (struct oe_timespec*)arg3;",
          "615:     void* sigmask = (void*)arg4;",
          "616:     int timeout = -1;",
          "618:     if (sigmask != NULL)",
          "619:     {",
          "620:         oe_errno = OE_EINVAL;",
          "621:         goto done;",
          "622:     }",
          "624:     if (ts)",
          "625:     {",
          "626:         int64_t mul;",
          "627:         int64_t div;",
          "628:         int64_t sum;",
          "630:         if (oe_safe_mul_s64(ts->tv_sec, 1000, &mul) != OE_OK)",
          "632:             oe_errno = OE_EINVAL;",
          "636:         div = ts->tv_nsec / 1000000;",
          "638:         if (oe_safe_add_s64(mul, div, &sum) != OE_OK)",
          "640:             oe_errno = OE_EINVAL;",
          "644:         if (sum < OE_INT_MIN || sum > OE_INT_MAX)",
          "646:             oe_errno = OE_EINVAL;",
          "650:         timeout = (int)sum;",
          "651:     }",
          "653:     ret = oe_poll(fds, nfds, timeout);",
          "654: done:",
          "655:     return ret;",
          "656: }",
          "658: OE_DEFINE_SYSCALL4(SYS_pread64)",
          "659: {",
          "660:     oe_errno = 0;",
          "661:     const int fd = (int)arg1;",
          "662:     void* const buf = (void*)arg2;",
          "663:     const size_t count = (size_t)arg3;",
          "664:     const oe_off_t offset = (oe_off_t)arg4;",
          "666:     return oe_pread(fd, buf, count, offset);",
          "667: }",
          "669: OE_DEFINE_SYSCALL5(SYS_pselect6)",
          "670: {",
          "671:     oe_errno = 0;",
          "672:     int nfds = (int)arg1;",
          "673:     oe_fd_set* readfds = (oe_fd_set*)arg2;",
          "674:     oe_fd_set* writefds = (oe_fd_set*)arg3;",
          "675:     oe_fd_set* exceptfds = (oe_fd_set*)arg4;",
          "676:     struct oe_timespec* ts = (struct oe_timespec*)arg5;",
          "677:     struct oe_timeval buf;",
          "678:     struct oe_timeval* tv = NULL;",
          "680:     if (ts)",
          "681:     {",
          "682:         tv = &buf;",
          "683:         tv->tv_sec = ts->tv_sec;",
          "684:         tv->tv_usec = ts->tv_nsec / 1000;",
          "685:     }",
          "687:     return oe_select(nfds, readfds, writefds, exceptfds, tv);",
          "688: }",
          "690: OE_DEFINE_SYSCALL4(SYS_pwrite64)",
          "691: {",
          "692:     oe_errno = 0;",
          "693:     const int fd = (int)arg1;",
          "694:     const void* const buf = (void*)arg2;",
          "695:     const size_t count = (size_t)arg3;",
          "696:     const oe_off_t offset = (oe_off_t)arg4;",
          "698:     return oe_pwrite(fd, buf, count, offset);",
          "699: }",
          "701: OE_DEFINE_SYSCALL3(SYS_read)",
          "702: {",
          "703:     oe_errno = 0;",
          "704:     int fd = (int)arg1;",
          "705:     void* buf = (void*)arg2;",
          "706:     size_t count = (size_t)arg3;",
          "708:     return oe_read(fd, buf, count);",
          "709: }",
          "711: OE_DEFINE_SYSCALL3(SYS_readv)",
          "712: {",
          "713:     oe_errno = 0;",
          "714:     int fd = (int)arg1;",
          "715:     const struct oe_iovec* iov = (const struct oe_iovec*)arg2;",
          "716:     int iovcnt = (int)arg3;",
          "718:     return oe_readv(fd, iov, iovcnt);",
          "719: }",
          "721: OE_DEFINE_SYSCALL6(SYS_recvfrom)",
          "722: {",
          "723:     oe_errno = 0;",
          "724:     int sockfd = (int)arg1;",
          "725:     void* buf = (void*)arg2;",
          "726:     size_t len = (size_t)arg3;",
          "727:     int flags = (int)arg4;",
          "728:     struct oe_sockaddr* dest_add = (struct oe_sockaddr*)arg5;",
          "729:     oe_socklen_t* addrlen = (oe_socklen_t*)arg6;",
          "731:     return oe_recvfrom(sockfd, buf, len, flags, dest_add, addrlen);",
          "732: }",
          "734: OE_DEFINE_SYSCALL3(SYS_recvmsg)",
          "735: {",
          "736:     oe_errno = 0;",
          "737:     int sockfd = (int)arg1;",
          "738:     struct msghdr* buf = (struct msghdr*)arg2;",
          "739:     int flags = (int)arg3;",
          "741:     return oe_recvmsg(sockfd, (struct oe_msghdr*)buf, flags);",
          "742: }",
          "744: #if __x86_64__ || _M_X64",
          "745: OE_DEFINE_SYSCALL2(SYS_rename)",
          "746: {",
          "747:     oe_errno = 0;",
          "748:     const char* oldpath = (const char*)arg1;",
          "749:     const char* newpath = (const char*)arg2;",
          "751:     return oe_rename(oldpath, newpath);",
          "752: }",
          "755: OE_DEFINE_SYSCALL5(SYS_renameat)",
          "756: {",
          "757:     oe_errno = 0;",
          "758:     long ret = -1;",
          "759:     int olddirfd = (int)arg1;",
          "760:     const char* oldpath = (const char*)arg2;",
          "761:     int newdirfd = (int)arg3;",
          "762:     const char* newpath = (const char*)arg4;",
          "763:     int flags = (int)arg5;",
          "765:     if (olddirfd != OE_AT_FDCWD)",
          "766:     {",
          "767:         oe_errno = OE_EBADF;",
          "768:         goto done;",
          "769:     }",
          "771:     if (newdirfd != OE_AT_FDCWD)",
          "772:     {",
          "773:         oe_errno = OE_EBADF;",
          "774:         goto done;",
          "775:     }",
          "777:     if (flags != 0)",
          "778:     {",
          "779:         oe_errno = OE_EINVAL;",
          "780:         goto done;",
          "781:     }",
          "783:     ret = oe_rename(oldpath, newpath);",
          "784: done:",
          "785:     return ret;",
          "786: }",
          "788: #if __x86_64__ || _M_X64",
          "789: OE_DEFINE_SYSCALL1(SYS_rmdir)",
          "790: {",
          "791:     oe_errno = 0;",
          "792:     const char* pathname = (const char*)arg1;",
          "793:     return oe_rmdir(pathname);",
          "794: }",
          "795: #endif",
          "797: #if __x86_64__ || _M_X64",
          "798: OE_DEFINE_SYSCALL5(SYS_select)",
          "799: {",
          "800:     oe_errno = 0;",
          "801:     int nfds = (int)arg1;",
          "802:     oe_fd_set* readfds = (oe_fd_set*)arg2;",
          "803:     oe_fd_set* writefds = (oe_fd_set*)arg3;",
          "804:     oe_fd_set* efds = (oe_fd_set*)arg4;",
          "805:     struct oe_timeval* timeout = (struct oe_timeval*)arg5;",
          "806:     return oe_select(nfds, readfds, writefds, efds, timeout);",
          "807: }",
          "808: #endif",
          "810: OE_DEFINE_SYSCALL6(SYS_sendto)",
          "811: {",
          "812:     oe_errno = 0;",
          "813:     int sockfd = (int)arg1;",
          "814:     const void* buf = (void*)arg2;",
          "815:     size_t len = (size_t)arg3;",
          "816:     int flags = (int)arg4;",
          "817:     const struct oe_sockaddr* dest_add = (const struct oe_sockaddr*)arg5;",
          "818:     oe_socklen_t addrlen = (oe_socklen_t)arg6;",
          "820:     return oe_sendto(sockfd, buf, len, flags, dest_add, addrlen);",
          "821: }",
          "823: OE_DEFINE_SYSCALL3(SYS_sendmsg)",
          "824: {",
          "825:     oe_errno = 0;",
          "826:     int sockfd = (int)arg1;",
          "827:     struct msghdr* buf = (struct msghdr*)arg2;",
          "828:     int flags = (int)arg3;",
          "830:     return oe_sendmsg(sockfd, (struct oe_msghdr*)buf, flags);",
          "831: }",
          "833: OE_DEFINE_SYSCALL5(SYS_setsockopt)",
          "834: {",
          "835:     oe_errno = 0;",
          "836:     int sockfd = (int)arg1;",
          "837:     int level = (int)arg2;",
          "838:     int optname = (int)arg3;",
          "839:     void* optval = (void*)arg4;",
          "840:     oe_socklen_t optlen = (oe_socklen_t)arg5;",
          "841:     return oe_setsockopt(sockfd, level, optname, optval, optlen);",
          "842: }",
          "844: OE_DEFINE_SYSCALL2(SYS_shutdown)",
          "845: {",
          "846:     oe_errno = 0;",
          "847:     int sockfd = (int)arg1;",
          "848:     int how = (int)arg2;",
          "849:     return oe_shutdown(sockfd, how);",
          "850: }",
          "852: OE_DEFINE_SYSCALL3(SYS_socket)",
          "853: {",
          "854:     oe_errno = 0;",
          "855:     int domain = (int)arg1;",
          "856:     int type = (int)arg2;",
          "857:     int protocol = (int)arg3;",
          "858:     return oe_socket(domain, type, protocol);",
          "859: }",
          "861: OE_DEFINE_SYSCALL4(SYS_socketpair)",
          "862: {",
          "863:     oe_errno = 0;",
          "864:     int domain = (int)arg1;",
          "865:     int type = (int)arg2;",
          "866:     int protocol = (int)arg3;",
          "867:     int* sv = (int*)arg4;",
          "869:     return oe_socketpair(domain, type, protocol, sv);",
          "870: }",
          "872: #if __x86_64__ || _M_X64",
          "873: OE_DEFINE_SYSCALL2(SYS_stat)",
          "874: {",
          "875:     oe_errno = 0;",
          "876:     const char* pathname = (const char*)arg1;",
          "877:     struct oe_stat_t* buf = (struct oe_stat_t*)arg2;",
          "878:     return oe_stat(pathname, buf);",
          "879: }",
          "880: #endif",
          "882: OE_DEFINE_SYSCALL2(SYS_truncate)",
          "883: {",
          "884:     oe_errno = 0;",
          "885:     const char* path = (const char*)arg1;",
          "886:     ssize_t length = (ssize_t)arg2;",
          "888:     return oe_truncate(path, length);",
          "889: }",
          "891: OE_DEFINE_SYSCALL3(SYS_write)",
          "892: {",
          "893:     oe_errno = 0;",
          "894:     int fd = (int)arg1;",
          "895:     const void* buf = (void*)arg2;",
          "896:     size_t count = (size_t)arg3;",
          "898:     return oe_write(fd, buf, count);",
          "899: }",
          "901: OE_DEFINE_SYSCALL3(SYS_writev)",
          "902: {",
          "903:     oe_errno = 0;",
          "904:     int fd = (int)arg1;",
          "905:     const struct oe_iovec* iov = (const struct oe_iovec*)arg2;",
          "906:     int iovcnt = (int)arg3;",
          "908:     return oe_writev(fd, iov, iovcnt);",
          "909: }",
          "911: OE_DEFINE_SYSCALL1(SYS_uname)",
          "912: {",
          "913:     oe_errno = 0;",
          "914:     struct oe_utsname* buf = (struct oe_utsname*)arg1;",
          "915:     return oe_uname(buf);",
          "916: }",
          "918: #if __x86_64__ || _M_X64",
          "919: OE_DEFINE_SYSCALL1(SYS_unlink)",
          "920: {",
          "921:     oe_errno = 0;",
          "922:     const char* pathname = (const char*)arg1;",
          "924:     return oe_unlink(pathname);",
          "925: }",
          "926: #endif",
          "928: OE_DEFINE_SYSCALL3(SYS_unlinkat)",
          "929: {",
          "930:     oe_errno = 0;",
          "931:     long ret = -1;",
          "932:     int dirfd = (int)arg1;",
          "933:     const char* pathname = (const char*)arg2;",
          "934:     int flags = (int)arg3;",
          "936:     if (dirfd != OE_AT_FDCWD)",
          "937:     {",
          "938:         oe_errno = OE_EBADF;",
          "939:         goto done;",
          "940:     }",
          "942:     if (flags != OE_AT_REMOVEDIR && flags != 0)",
          "943:     {",
          "944:         oe_errno = OE_EINVAL;",
          "945:         goto done;",
          "948:     if (flags == OE_AT_REMOVEDIR)",
          "949:         ret = oe_rmdir(pathname);",
          "950:     else",
          "951:         ret = oe_unlink(pathname);",
          "956: OE_DEFINE_SYSCALL2(SYS_umount2)",
          "957: {",
          "958:     oe_errno = 0;",
          "959:     const char* target = (const char*)arg1;",
          "960:     int flags = (int)arg2;",
          "962:     (void)flags;",
          "964:     return oe_umount(target);",
          "965: }",
          "967: static long _syscall(",
          "968:     long number,",
          "969:     long arg1,",
          "970:     long arg2,",
          "971:     long arg3,",
          "972:     long arg4,",
          "973:     long arg5,",
          "974:     long arg6)",
          "975: {",
          "980:     switch (number)",
          "981:     {",
          "982:         OE_SYSCALL_DISPATCH(SYS_accept, arg1, arg2, arg3);",
          "983: #if __x86_64__ || _M_X64",
          "984:         OE_SYSCALL_DISPATCH(SYS_access, arg1, arg2);",
          "985: #endif",
          "986:         OE_SYSCALL_DISPATCH(SYS_bind, arg1, arg2, arg3);",
          "987:         OE_SYSCALL_DISPATCH(SYS_chdir, arg1);",
          "988:         OE_SYSCALL_DISPATCH(SYS_close, arg1);",
          "989:         OE_SYSCALL_DISPATCH(SYS_connect, arg1, arg2, arg3);",
          "990: #if __x86_64__ || _M_X64",
          "991:         OE_SYSCALL_DISPATCH(SYS_creat, arg1, arg2);",
          "992: #endif",
          "993:         OE_SYSCALL_DISPATCH(SYS_dup, arg1);",
          "994: #if __x86_64__ || _M_X64",
          "995:         OE_SYSCALL_DISPATCH(SYS_dup2, arg1, arg2);",
          "996: #endif",
          "997:         OE_SYSCALL_DISPATCH(SYS_dup3, arg1, arg2, arg3);",
          "998: #if __x86_64__ || _M_X64",
          "999:         OE_SYSCALL_DISPATCH(SYS_epoll_create, arg1);",
          "1000: #endif",
          "1001:         OE_SYSCALL_DISPATCH(SYS_epoll_create1, arg1);",
          "1002:         OE_SYSCALL_DISPATCH(SYS_epoll_ctl, arg1, arg2, arg3, arg4);",
          "1003:         OE_SYSCALL_DISPATCH(SYS_epoll_pwait, arg1, arg2, arg3, arg4, arg5);",
          "1004: #if __x86_64__ || _M_X64",
          "1005:         OE_SYSCALL_DISPATCH(SYS_epoll_wait, arg1, arg2, arg3, arg4);",
          "1006: #endif",
          "1007:         OE_SYSCALL_DISPATCH(SYS_exit, arg1);",
          "1008:         OE_SYSCALL_DISPATCH(SYS_exit_group);",
          "1009:         OE_SYSCALL_DISPATCH(SYS_faccessat, arg1, arg2, arg3, arg4);",
          "1010:         OE_SYSCALL_DISPATCH(SYS_fcntl, arg1, arg2, arg3);",
          "1011:         OE_SYSCALL_DISPATCH(SYS_fdatasync, arg1);",
          "1012:         OE_SYSCALL_DISPATCH(SYS_flock, arg1, arg2);",
          "1013:         OE_SYSCALL_DISPATCH(SYS_fstat, arg1, arg2);",
          "1014:         OE_SYSCALL_DISPATCH(SYS_fsync, arg1);",
          "1015:         OE_SYSCALL_DISPATCH(SYS_getcwd, arg1, arg2);",
          "1016:         OE_SYSCALL_DISPATCH(SYS_getdents64, arg1, arg2, arg3);",
          "1017:         OE_SYSCALL_DISPATCH(SYS_getegid);",
          "1018:         OE_SYSCALL_DISPATCH(SYS_geteuid);",
          "1019:         OE_SYSCALL_DISPATCH(SYS_getgid);",
          "1020:         OE_SYSCALL_DISPATCH(SYS_getgroups, arg1, arg2);",
          "1021:         OE_SYSCALL_DISPATCH(SYS_getpeername, arg1, arg2, arg3);",
          "1022:         OE_SYSCALL_DISPATCH(SYS_getpgid, arg1);",
          "1023: #if __x86_64__ || _M_X64",
          "1024:         OE_SYSCALL_DISPATCH(SYS_getpgrp);",
          "1025: #endif",
          "1026:         OE_SYSCALL_DISPATCH(SYS_getpid);",
          "1027:         OE_SYSCALL_DISPATCH(SYS_getppid);",
          "1028:         OE_SYSCALL_DISPATCH(SYS_getsockname, arg1, arg2, arg3);",
          "1029:         OE_SYSCALL_DISPATCH(SYS_getsockopt, arg1, arg2, arg3, arg4, arg5);",
          "1030:         OE_SYSCALL_DISPATCH(SYS_getuid);",
          "1031:         OE_SYSCALL_DISPATCH(SYS_ioctl, arg1, arg2, arg3, arg4, arg5, arg6);",
          "1032: #if __x86_64__ || _M_X64",
          "1033:         OE_SYSCALL_DISPATCH(SYS_link, arg1, arg2);",
          "1034: #endif",
          "1035:         OE_SYSCALL_DISPATCH(SYS_linkat, arg1, arg2, arg3, arg4, arg5);",
          "1036:         OE_SYSCALL_DISPATCH(SYS_listen, arg1, arg2);",
          "1037:         OE_SYSCALL_DISPATCH(SYS_lseek, arg1, arg2, arg3);",
          "1038: #if __x86_64__ || _M_X64",
          "1039:         OE_SYSCALL_DISPATCH(SYS_mkdir, arg1, arg2);",
          "1040: #endif",
          "1041:         OE_SYSCALL_DISPATCH(SYS_mkdirat, arg1, arg2, arg3);",
          "1042:         OE_SYSCALL_DISPATCH(SYS_mount, arg1, arg2, arg3, arg4, arg5);",
          "1043:         OE_SYSCALL_DISPATCH(SYS_nanosleep, arg1, arg2);",
          "1044:         OE_SYSCALL_DISPATCH(SYS_newfstatat, arg1, arg2, arg3, arg4);",
          "1045: #if __x86_64__ || _M_X64",
          "1046:         OE_SYSCALL_DISPATCH(SYS_open, arg1, arg2, arg3);",
          "1047: #endif",
          "1048:         OE_SYSCALL_DISPATCH(SYS_openat, arg1, arg2, arg3, arg4);",
          "1049: #if __x86_64__ || _M_X64",
          "1050:         OE_SYSCALL_DISPATCH(SYS_poll, arg1, arg2, arg3);",
          "1051: #endif",
          "1052:         OE_SYSCALL_DISPATCH(SYS_ppoll, arg1, arg2, arg3, arg4);",
          "1053:         OE_SYSCALL_DISPATCH(SYS_pread64, arg1, arg2, arg3, arg4);",
          "1055:         OE_SYSCALL_DISPATCH(SYS_pselect6, arg1, arg2, arg3, arg4, arg5);",
          "1056:         OE_SYSCALL_DISPATCH(SYS_pwrite64, arg1, arg2, arg3, arg4);",
          "1057:         OE_SYSCALL_DISPATCH(SYS_read, arg1, arg2, arg3);",
          "1058:         OE_SYSCALL_DISPATCH(SYS_readv, arg1, arg2, arg3);",
          "1059:         OE_SYSCALL_DISPATCH(SYS_recvfrom, arg1, arg2, arg3, arg4, arg5, arg6);",
          "1060:         OE_SYSCALL_DISPATCH(SYS_recvmsg, arg1, arg2, arg3);",
          "1061: #if __x86_64__ || _M_X64",
          "1062:         OE_SYSCALL_DISPATCH(SYS_rename, arg1, arg2);",
          "1063: #endif",
          "1064:         OE_SYSCALL_DISPATCH(SYS_renameat, arg1, arg2, arg3, arg4, arg5);",
          "1065: #if __x86_64__ || _M_X64",
          "1066:         OE_SYSCALL_DISPATCH(SYS_rmdir, arg1);",
          "1067: #endif",
          "1068: #if __x86_64__ || _M_X64",
          "1069:         OE_SYSCALL_DISPATCH(SYS_select, arg1, arg2, arg3, arg4, arg5);",
          "1070: #endif",
          "1071:         OE_SYSCALL_DISPATCH(SYS_sendto, arg1, arg2, arg3, arg4, arg5, arg6);",
          "1072:         OE_SYSCALL_DISPATCH(SYS_sendmsg, arg1, arg2, arg3);",
          "1073:         OE_SYSCALL_DISPATCH(SYS_setsockopt, arg1, arg2, arg3, arg4, arg5);",
          "1074:         OE_SYSCALL_DISPATCH(SYS_shutdown, arg1, arg2);",
          "1075:         OE_SYSCALL_DISPATCH(SYS_socket, arg1, arg2, arg3);",
          "1076:         OE_SYSCALL_DISPATCH(SYS_socketpair, arg1, arg2, arg3, arg4);",
          "1077: #if __x86_64__ || _M_X64",
          "1078:         OE_SYSCALL_DISPATCH(SYS_stat, arg1, arg2);",
          "1079: #endif",
          "1080:         OE_SYSCALL_DISPATCH(SYS_truncate, arg1, arg2);",
          "1081:         OE_SYSCALL_DISPATCH(SYS_write, arg1, arg2, arg3);",
          "1082:         OE_SYSCALL_DISPATCH(SYS_writev, arg1, arg2, arg3);",
          "1083:         OE_SYSCALL_DISPATCH(SYS_uname, arg1);",
          "1084: #if __x86_64__ || _M_X64",
          "1085:         OE_SYSCALL_DISPATCH(SYS_unlink, arg1);",
          "1086: #endif",
          "1087:         OE_SYSCALL_DISPATCH(SYS_unlinkat, arg1, arg2, arg3);",
          "1088:         OE_SYSCALL_DISPATCH(SYS_umount2, arg1, arg2);",
          "1089:     }",
          "1091:     oe_errno = OE_ENOSYS;",
          "1092:     OE_TRACE_WARNING(\"syscall num=%ld not handled\", number);",
          "1093:     return -1;",
          "1094: }",
          "",
          "---------------"
        ],
        "tests/crypto/enclave/enc/enc.c||tests/crypto/enclave/enc/enc.c": [
          "File: tests/crypto/enclave/enc/enc.c -> tests/crypto/enclave/enc/enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #include <openenclave/internal/malloc.h>",
          "13: #include <openenclave/internal/raise.h>",
          "14: #include <openenclave/internal/rsa.h>",
          "16: #include <openenclave/internal/tests.h>",
          "17: #include <stdarg.h>",
          "18: #include <stdio.h>",
          "",
          "[Removed Lines]",
          "15: #include <openenclave/internal/syscall.h>",
          "",
          "[Added Lines]",
          "15: #include <openenclave/internal/syscall/hook.h>",
          "",
          "---------------"
        ],
        "tests/mbed/enc/enc.c||tests/mbed/enc/enc.c": [
          "File: tests/mbed/enc/enc.c -> tests/mbed/enc/enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: #include <openenclave/enclave.h>",
          "8: #include <openenclave/internal/calls.h>",
          "9: #include <openenclave/internal/raise.h>",
          "11: #include <stdarg.h>",
          "12: #include <stdio.h>",
          "13: #include <stdlib.h>",
          "",
          "[Removed Lines]",
          "10: #include <openenclave/internal/syscall.h>",
          "",
          "[Added Lines]",
          "10: #include <openenclave/internal/syscall/hook.h>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "32ff4215f119076079f425d07effb577e764f572",
      "candidate_info": {
        "commit_hash": "32ff4215f119076079f425d07effb577e764f572",
        "repo": "openenclave/openenclave",
        "commit_url": "https://github.com/openenclave/openenclave/commit/32ff4215f119076079f425d07effb577e764f572",
        "files": [
          "include/openenclave/edl/socket.edl",
          "include/openenclave/internal/syscall/fd.h",
          "include/openenclave/internal/syscall/iov.h",
          "include/openenclave/internal/syscall/sys/socket.h",
          "syscall/consolefs.c",
          "syscall/devices/hostepoll/hostepoll.c",
          "syscall/devices/hostfs/hostfs.c",
          "syscall/devices/hostresolver/hostresolver.c",
          "syscall/devices/hostsock/hostsock.c",
          "syscall/iov.c",
          "syscall/socket.c",
          "syscall/syscall.c"
        ],
        "message": "Merge pull request from GHSA-525h-wxcc-f66m\n\nSigned-off-by: Ming-Wei Shih <mishih@microsoft.com>",
        "before_after_code_files": [
          "include/openenclave/edl/socket.edl||include/openenclave/edl/socket.edl",
          "include/openenclave/internal/syscall/fd.h||include/openenclave/internal/syscall/fd.h",
          "include/openenclave/internal/syscall/iov.h||include/openenclave/internal/syscall/iov.h",
          "include/openenclave/internal/syscall/sys/socket.h||include/openenclave/internal/syscall/sys/socket.h",
          "syscall/consolefs.c||syscall/consolefs.c",
          "syscall/devices/hostepoll/hostepoll.c||syscall/devices/hostepoll/hostepoll.c",
          "syscall/devices/hostfs/hostfs.c||syscall/devices/hostfs/hostfs.c",
          "syscall/devices/hostresolver/hostresolver.c||syscall/devices/hostresolver/hostresolver.c",
          "syscall/devices/hostsock/hostsock.c||syscall/devices/hostsock/hostsock.c",
          "syscall/iov.c||syscall/iov.c",
          "syscall/socket.c||syscall/socket.c",
          "syscall/syscall.c||syscall/syscall.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "include/openenclave/edl/socket.edl||include/openenclave/edl/socket.edl",
            "include/openenclave/internal/syscall/fd.h||include/openenclave/internal/syscall/fd.h",
            "include/openenclave/internal/syscall/iov.h||include/openenclave/internal/syscall/iov.h",
            "include/openenclave/internal/syscall/sys/socket.h||include/openenclave/internal/syscall/sys/socket.h",
            "syscall/consolefs.c||syscall/consolefs.c",
            "syscall/devices/hostepoll/hostepoll.c||syscall/devices/hostepoll/hostepoll.c",
            "syscall/devices/hostfs/hostfs.c||syscall/devices/hostfs/hostfs.c",
            "syscall/devices/hostresolver/hostresolver.c||syscall/devices/hostresolver/hostresolver.c",
            "syscall/devices/hostsock/hostsock.c||syscall/devices/hostsock/hostsock.c",
            "syscall/iov.c||syscall/iov.c",
            "syscall/socket.c||syscall/socket.c",
            "syscall/syscall.c||syscall/syscall.c"
          ],
          "candidate": [
            "include/openenclave/edl/socket.edl||include/openenclave/edl/socket.edl",
            "include/openenclave/internal/syscall/fd.h||include/openenclave/internal/syscall/fd.h",
            "include/openenclave/internal/syscall/iov.h||include/openenclave/internal/syscall/iov.h",
            "include/openenclave/internal/syscall/sys/socket.h||include/openenclave/internal/syscall/sys/socket.h",
            "syscall/consolefs.c||syscall/consolefs.c",
            "syscall/devices/hostepoll/hostepoll.c||syscall/devices/hostepoll/hostepoll.c",
            "syscall/devices/hostfs/hostfs.c||syscall/devices/hostfs/hostfs.c",
            "syscall/devices/hostresolver/hostresolver.c||syscall/devices/hostresolver/hostresolver.c",
            "syscall/devices/hostsock/hostsock.c||syscall/devices/hostsock/hostsock.c",
            "syscall/iov.c||syscall/iov.c",
            "syscall/socket.c||syscall/socket.c",
            "syscall/syscall.c||syscall/syscall.c"
          ]
        }
      },
      "candidate_diff": {
        "include/openenclave/edl/socket.edl||include/openenclave/edl/socket.edl": [
          "File: include/openenclave/edl/socket.edl -> include/openenclave/edl/socket.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:         oe_host_fd_t oe_syscall_accept_ocall(",
          "75:             oe_host_fd_t sockfd,",
          "77:             oe_socklen_t addrlen_in,",
          "78:             [out, count=1] oe_socklen_t* addrlen_out)",
          "79:             propagate_errno;",
          "",
          "[Removed Lines]",
          "76:             [in, out, size=addrlen_in] struct oe_sockaddr* addr,",
          "",
          "[Added Lines]",
          "74:             [out, size=addrlen_in] struct oe_sockaddr* addr,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:         ssize_t oe_syscall_recv_ocall(",
          "119:             oe_host_fd_t sockfd,",
          "121:             size_t len,",
          "122:             int flags)",
          "123:             propagate_errno;",
          "",
          "[Removed Lines]",
          "120:             [in, out, size=len] void* buf,",
          "",
          "[Added Lines]",
          "118:             [out, size=len] void* buf,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "127:             [out, size=len] void* buf,",
          "128:             size_t len,",
          "129:             int flags,",
          "131:             oe_socklen_t addrlen_in,",
          "132:             [out, count=1] oe_socklen_t* addrlen_out)",
          "133:             propagate_errno;",
          "",
          "[Removed Lines]",
          "130:             [in, out, size=addrlen_in] struct oe_sockaddr* src_addr,",
          "",
          "[Added Lines]",
          "128:             [out, size=addrlen_in] struct oe_sockaddr* src_addr,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "187:         int oe_syscall_getsockname_ocall(",
          "188:             oe_host_fd_t sockfd,",
          "190:             oe_socklen_t addrlen_in,",
          "191:             [out, size=1] oe_socklen_t* addrlen_out)",
          "192:             propagate_errno;",
          "194:         int oe_syscall_getpeername_ocall(",
          "195:             oe_host_fd_t sockfd,",
          "197:             oe_socklen_t addrlen_in,",
          "198:             [out, size=1] oe_socklen_t* addrlen_out)",
          "199:             propagate_errno;",
          "",
          "[Removed Lines]",
          "189:             [in, out, size=addrlen_in] struct oe_sockaddr* addr,",
          "196:             [in, out, size=addrlen_in] struct oe_sockaddr* addr,",
          "",
          "[Added Lines]",
          "187:             [out, size=addrlen_in] struct oe_sockaddr* addr,",
          "194:             [out, size=addrlen_in] struct oe_sockaddr* addr,",
          "",
          "---------------"
        ],
        "include/openenclave/internal/syscall/fd.h||include/openenclave/internal/syscall/fd.h": [
          "File: include/openenclave/internal/syscall/fd.h -> include/openenclave/internal/syscall/fd.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:         void* buf,",
          "111:         size_t len,",
          "112:         int flags,",
          "114:         oe_socklen_t* addrlen);",
          "116:     ssize_t (*sendmsg)(oe_fd_t* sock, const struct oe_msghdr* msg, int flags);",
          "",
          "[Removed Lines]",
          "113:         const struct oe_sockaddr* src_addr,",
          "",
          "[Added Lines]",
          "113:         struct oe_sockaddr* src_addr,",
          "",
          "---------------"
        ],
        "include/openenclave/internal/syscall/iov.h||include/openenclave/internal/syscall/iov.h": [
          "File: include/openenclave/internal/syscall/iov.h -> include/openenclave/internal/syscall/iov.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:     const struct oe_iovec* iov,",
          "16:     int iovcnt,",
          "17:     void** buf_out,",
          "20: int oe_iov_sync(",
          "21:     const struct oe_iovec* iov,",
          "",
          "[Removed Lines]",
          "18:     size_t* buf_size_out);",
          "",
          "[Added Lines]",
          "18:     size_t* buf_size_out,",
          "19:     size_t* data_size_out);",
          "",
          "---------------"
        ],
        "include/openenclave/internal/syscall/sys/socket.h||include/openenclave/internal/syscall/sys/socket.h": [
          "File: include/openenclave/internal/syscall/sys/socket.h -> include/openenclave/internal/syscall/sys/socket.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "133: #define OE_SO_BSDCOMPAT 14",
          "134: #define OE_SO_REUSEPORT 15",
          "137: #define OE_SHUT_RD 0",
          "138: #define OE_SHUT_WR 1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137: #define OE_MSG_CTRUNC 0x0008",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "204:     void* buf,",
          "205:     size_t len,",
          "206:     int flags,",
          "208:     oe_socklen_t* addrlen);",
          "210: ssize_t oe_sendmsg(int sockfd, const struct oe_msghdr* buf, int flags);",
          "",
          "[Removed Lines]",
          "207:     const struct oe_sockaddr* src_addr,",
          "",
          "[Added Lines]",
          "210:     struct oe_sockaddr* src_addr,",
          "",
          "---------------"
        ],
        "syscall/consolefs.c||syscall/consolefs.c": [
          "File: syscall/consolefs.c -> syscall/consolefs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "205:     ssize_t ret = -1;",
          "206:     file_t* file = _cast_file(file_);",
          "209:         OE_RAISE_ERRNO(OE_EINVAL);",
          "211:     if (oe_syscall_read_ocall(&ret, file->host_fd, buf, count) != OE_OK)",
          "212:         OE_RAISE_ERRNO(OE_EINVAL);",
          "214: done:",
          "215:     return ret;",
          "216: }",
          "",
          "[Removed Lines]",
          "208:     if (!file)",
          "",
          "[Added Lines]",
          "216:     if (!file || count > OE_SSIZE_MAX)",
          "226:     if (ret > (ssize_t)count)",
          "227:     {",
          "228:         ret = -1;",
          "229:         OE_RAISE_ERRNO(OE_EINVAL);",
          "230:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "220:     ssize_t ret = -1;",
          "221:     file_t* file = _cast_file(file_);",
          "224:         OE_RAISE_ERRNO(OE_EINVAL);",
          "226:     if (oe_syscall_write_ocall(&ret, file->host_fd, buf, count) != OE_OK)",
          "227:         OE_RAISE_ERRNO(OE_EINVAL);",
          "229: done:",
          "230:     return ret;",
          "231: }",
          "",
          "[Removed Lines]",
          "223:     if (!file)",
          "",
          "[Added Lines]",
          "249:     if (!file || count > OE_SSIZE_MAX)",
          "259:     if (ret > (ssize_t)count)",
          "260:     {",
          "261:         ret = -1;",
          "262:         OE_RAISE_ERRNO(OE_EINVAL);",
          "263:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "239:     file_t* file = _cast_file(desc);",
          "240:     void* buf = NULL;",
          "241:     size_t buf_size = 0;",
          "243:     if (!file || !iov || iovcnt < 0 || iovcnt > OE_IOV_MAX)",
          "244:         OE_RAISE_ERRNO(OE_EINVAL);",
          "248:         OE_RAISE_ERRNO(OE_ENOMEM);",
          "251:     if (oe_syscall_readv_ocall(&ret, file->host_fd, buf, iovcnt, buf_size) !=",
          "252:         OE_OK)",
          "",
          "[Removed Lines]",
          "247:     if (oe_iov_pack(iov, iovcnt, &buf, &buf_size) != 0)",
          "",
          "[Added Lines]",
          "278:     size_t data_size = 0;",
          "284:     if (oe_iov_pack(iov, iovcnt, &buf, &buf_size, &data_size) != 0)",
          "295:     if (data_size > OE_SSIZE_MAX)",
          "296:         OE_RAISE_ERRNO(OE_EINVAL);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "254:         OE_RAISE_ERRNO(OE_EINVAL);",
          "255:     }",
          "258:     if (oe_iov_sync(iov, iovcnt, buf, buf_size) != 0)",
          "259:         OE_RAISE_ERRNO(OE_EINVAL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "309:     if (ret > (ssize_t)data_size)",
          "310:     {",
          "311:         ret = -1;",
          "312:         OE_RAISE_ERRNO(OE_EINVAL);",
          "313:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "275:     file_t* file = _cast_file(desc);",
          "276:     void* buf = NULL;",
          "277:     size_t buf_size = 0;",
          "279:     if (!file || (!iov && iovcnt) || iovcnt < 0 || iovcnt > OE_IOV_MAX)",
          "280:         OE_RAISE_ERRNO(OE_EINVAL);",
          "284:         OE_RAISE_ERRNO(OE_ENOMEM);",
          "287:     if (oe_syscall_writev_ocall(&ret, file->host_fd, buf, iovcnt, buf_size) !=",
          "288:         OE_OK)",
          "",
          "[Removed Lines]",
          "283:     if (oe_iov_pack(iov, iovcnt, &buf, &buf_size) != 0)",
          "",
          "[Added Lines]",
          "336:     size_t data_size = 0;",
          "342:     if (oe_iov_pack(iov, iovcnt, &buf, &buf_size, &data_size) != 0)",
          "353:     if (data_size > OE_SSIZE_MAX)",
          "354:         OE_RAISE_ERRNO(OE_EINVAL);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "290:         OE_RAISE_ERRNO(OE_EINVAL);",
          "291:     }",
          "293: done:",
          "295:     if (buf)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "367:     if (ret > (ssize_t)data_size)",
          "368:     {",
          "369:         ret = -1;",
          "370:         OE_RAISE_ERRNO(OE_EINVAL);",
          "371:     }",
          "",
          "---------------"
        ],
        "syscall/devices/hostepoll/hostepoll.c||syscall/devices/hostepoll/hostepoll.c": [
          "File: syscall/devices/hostepoll/hostepoll.c -> syscall/devices/hostepoll/hostepoll.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "656:     oe_errno = 0;",
          "659:         OE_RAISE_ERRNO(OE_EINVAL);",
          "662:     if (oe_syscall_read_ocall(&ret, file->host_fd, buf, count) != OE_OK)",
          "663:         OE_RAISE_ERRNO(OE_EINVAL);",
          "665: done:",
          "666:     return ret;",
          "667: }",
          "",
          "[Removed Lines]",
          "658:     if (!file)",
          "",
          "[Added Lines]",
          "666:     if (!file || count > OE_SSIZE_MAX)",
          "677:     if (ret > (ssize_t)count)",
          "678:     {",
          "679:         ret = -1;",
          "680:         OE_RAISE_ERRNO(OE_EINVAL);",
          "681:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "669: static ssize_t _epoll_write(oe_fd_t* epoll_, const void* buf, size_t count)",
          "670: {",
          "671:     ssize_t ret = -1;",
          "674:     oe_errno = 0;",
          "678:         OE_RAISE_ERRNO(OE_EINVAL);",
          "680: done:",
          "681:     return ret;",
          "",
          "[Removed Lines]",
          "672:     epoll_t* epoll = _cast_epoll(epoll_);",
          "677:     if (oe_syscall_write_ocall(&ret, epoll->host_fd, buf, count) != OE_OK)",
          "",
          "[Added Lines]",
          "690:     epoll_t* file = _cast_epoll(epoll_);",
          "702:     if (!file || count > OE_SSIZE_MAX)",
          "703:         OE_RAISE_ERRNO(OE_EINVAL);",
          "706:     if (oe_syscall_write_ocall(&ret, file->host_fd, buf, count) != OE_OK)",
          "707:         OE_RAISE_ERRNO(OE_EINVAL);",
          "713:     if (ret > (ssize_t)count)",
          "714:     {",
          "715:         ret = -1;",
          "717:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "690:     epoll_t* file = _cast_epoll(desc);",
          "691:     void* buf = NULL;",
          "692:     size_t buf_size = 0;",
          "694:     if (!file || (iovcnt && !iov) || iovcnt < 0 || iovcnt > OE_IOV_MAX)",
          "695:         OE_RAISE_ERRNO(OE_EINVAL);",
          "699:         OE_RAISE_ERRNO(OE_ENOMEM);",
          "702:     if (oe_syscall_readv_ocall(&ret, file->host_fd, buf, iovcnt, buf_size) !=",
          "703:         OE_OK)",
          "",
          "[Removed Lines]",
          "698:     if (oe_iov_pack(iov, iovcnt, &buf, &buf_size) != 0)",
          "",
          "[Added Lines]",
          "732:     size_t data_size = 0;",
          "738:     if (oe_iov_pack(iov, iovcnt, &buf, &buf_size, &data_size) != 0)",
          "749:     if (data_size > OE_SSIZE_MAX)",
          "750:         OE_RAISE_ERRNO(OE_EINVAL);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "705:         OE_RAISE_ERRNO(OE_EINVAL);",
          "706:     }",
          "709:     if (oe_iov_sync(iov, iovcnt, buf, buf_size) != 0)",
          "710:         OE_RAISE_ERRNO(OE_EINVAL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "763:     if (ret > (ssize_t)data_size)",
          "764:     {",
          "765:         ret = -1;",
          "766:         OE_RAISE_ERRNO(OE_EINVAL);",
          "767:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "726:     epoll_t* file = _cast_epoll(desc);",
          "727:     void* buf = NULL;",
          "728:     size_t buf_size = 0;",
          "730:     if (!file || (iovcnt && !iov) || iovcnt < 0 || iovcnt > OE_IOV_MAX)",
          "731:         OE_RAISE_ERRNO(OE_EINVAL);",
          "735:         OE_RAISE_ERRNO(OE_ENOMEM);",
          "738:     if (oe_syscall_writev_ocall(&ret, file->host_fd, buf, iovcnt, buf_size) !=",
          "739:         OE_OK)",
          "",
          "[Removed Lines]",
          "734:     if (oe_iov_pack(iov, iovcnt, &buf, &buf_size) != 0)",
          "",
          "[Added Lines]",
          "790:     size_t data_size = 0;",
          "796:     if (oe_iov_pack(iov, iovcnt, &buf, &buf_size, &data_size) != 0)",
          "807:     if (data_size > OE_SSIZE_MAX)",
          "808:         OE_RAISE_ERRNO(OE_EINVAL);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "741:         OE_RAISE_ERRNO(OE_EINVAL);",
          "742:     }",
          "744: done:",
          "746:     if (buf)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "821:     if (ret > (ssize_t)data_size)",
          "822:     {",
          "823:         ret = -1;",
          "824:         OE_RAISE_ERRNO(OE_EINVAL);",
          "825:     }",
          "",
          "---------------"
        ],
        "syscall/devices/hostfs/hostfs.c||syscall/devices/hostfs/hostfs.c": [
          "File: syscall/devices/hostfs/hostfs.c -> syscall/devices/hostfs/hostfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "538:     ssize_t ret = -1;",
          "539:     file_t* file = _cast_file(desc);",
          "542:         OE_RAISE_ERRNO(OE_EINVAL);",
          "545:     if (oe_syscall_read_ocall(&ret, file->host_fd, buf, count) != OE_OK)",
          "546:         OE_RAISE_ERRNO(OE_EINVAL);",
          "548: done:",
          "549:     return ret;",
          "550: }",
          "",
          "[Removed Lines]",
          "541:     if (!file)",
          "",
          "[Added Lines]",
          "549:     if (!file || count > OE_SSIZE_MAX)",
          "560:     if (ret > (ssize_t)count)",
          "561:     {",
          "562:         ret = -1;",
          "563:         OE_RAISE_ERRNO(OE_EINVAL);",
          "564:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "598:     ssize_t ret = -1;",
          "599:     file_t* file = _cast_file(desc);",
          "603:         OE_RAISE_ERRNO(OE_EINVAL);",
          "606:     if (oe_syscall_write_ocall(&ret, file->host_fd, buf, count) != OE_OK)",
          "607:         OE_RAISE_ERRNO(OE_EINVAL);",
          "609: done:",
          "610:     return ret;",
          "611: }",
          "",
          "[Removed Lines]",
          "602:     if (!file || (count && !buf))",
          "",
          "[Added Lines]",
          "628:     if (!file || (count && !buf) || count > OE_SSIZE_MAX)",
          "639:     if (ret > (ssize_t)count)",
          "640:     {",
          "641:         ret = -1;",
          "642:         OE_RAISE_ERRNO(OE_EINVAL);",
          "643:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "619:     file_t* file = _cast_file(desc);",
          "620:     void* buf = NULL;",
          "621:     size_t buf_size = 0;",
          "623:     if (!file || (!iov && iovcnt) || iovcnt < 0 || iovcnt > OE_IOV_MAX)",
          "624:         OE_RAISE_ERRNO(OE_EINVAL);",
          "628:         OE_RAISE_ERRNO(OE_ENOMEM);",
          "631:     if (oe_syscall_readv_ocall(&ret, file->host_fd, buf, iovcnt, buf_size) !=",
          "632:         OE_OK)",
          "",
          "[Removed Lines]",
          "627:     if (oe_iov_pack(iov, iovcnt, &buf, &buf_size) != 0)",
          "",
          "[Added Lines]",
          "658:     size_t data_size = 0;",
          "664:     if (oe_iov_pack(iov, iovcnt, &buf, &buf_size, &data_size) != 0)",
          "675:     if (data_size > OE_SSIZE_MAX)",
          "676:         OE_RAISE_ERRNO(OE_EINVAL);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "634:         OE_RAISE_ERRNO(OE_EINVAL);",
          "635:     }",
          "638:     if (ret > 0)",
          "639:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "689:     if (ret > (ssize_t)data_size)",
          "690:     {",
          "691:         ret = -1;",
          "692:         OE_RAISE_ERRNO(OE_EINVAL);",
          "693:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "658:     file_t* file = _cast_file(desc);",
          "659:     void* buf = NULL;",
          "660:     size_t buf_size = 0;",
          "662:     if (!file || !iov || iovcnt < 0 || iovcnt > OE_IOV_MAX)",
          "663:         OE_RAISE_ERRNO(OE_EINVAL);",
          "667:         OE_RAISE_ERRNO(OE_ENOMEM);",
          "670:     if (oe_syscall_writev_ocall(&ret, file->host_fd, buf, iovcnt, buf_size) !=",
          "671:         OE_OK)",
          "",
          "[Removed Lines]",
          "666:     if (oe_iov_pack(iov, iovcnt, &buf, &buf_size) != 0)",
          "",
          "[Added Lines]",
          "719:     size_t data_size = 0;",
          "725:     if (oe_iov_pack(iov, iovcnt, &buf, &buf_size, &data_size) != 0)",
          "736:     if (data_size > OE_SSIZE_MAX)",
          "737:         OE_RAISE_ERRNO(OE_EINVAL);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "673:         OE_RAISE_ERRNO(OE_EINVAL);",
          "674:     }",
          "676: done:",
          "678:     if (buf)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "750:     if (ret > (ssize_t)data_size)",
          "751:     {",
          "752:         ret = -1;",
          "753:         OE_RAISE_ERRNO(OE_EINVAL);",
          "754:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "756:     ssize_t ret = -1;",
          "757:     file_t* file = _cast_file(desc);",
          "760:         OE_RAISE_ERRNO(OE_EINVAL);",
          "762:     if (oe_syscall_pread_ocall(&ret, file->host_fd, buf, count, offset) !=",
          "763:         OE_OK)",
          "764:         OE_RAISE_ERRNO(OE_EINVAL);",
          "766: done:",
          "767:     return ret;",
          "768: }",
          "",
          "[Removed Lines]",
          "759:     if (!file)",
          "",
          "[Added Lines]",
          "847:     if (!file || count > OE_SSIZE_MAX)",
          "858:     if (ret > (ssize_t)count)",
          "859:     {",
          "860:         ret = -1;",
          "861:         OE_RAISE_ERRNO(OE_EINVAL);",
          "862:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "776:     ssize_t ret = -1;",
          "777:     file_t* file = _cast_file(desc);",
          "780:         OE_RAISE_ERRNO(OE_EINVAL);",
          "782:     if (oe_syscall_pwrite_ocall(&ret, file->host_fd, buf, count, offset) !=",
          "783:         OE_OK)",
          "784:         OE_RAISE_ERRNO(OE_EINVAL);",
          "786: done:",
          "787:     return ret;",
          "788: }",
          "",
          "[Removed Lines]",
          "779:     if (!file)",
          "",
          "[Added Lines]",
          "885:     if (!file || count > OE_SSIZE_MAX)",
          "896:     if (ret > (ssize_t)count)",
          "897:     {",
          "898:         ret = -1;",
          "899:         OE_RAISE_ERRNO(OE_EINVAL);",
          "900:     }",
          "",
          "---------------"
        ],
        "syscall/devices/hostresolver/hostresolver.c||syscall/devices/hostresolver/hostresolver.c": [
          "File: syscall/devices/hostresolver/hostresolver.c -> syscall/devices/hostresolver/hostresolver.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: #include <openenclave/internal/syscall/raise.h>",
          "12: #include <openenclave/internal/syscall/sys/socket.h>",
          "13: #include <openenclave/internal/syscall/netdb.h>",
          "14: #include <openenclave/internal/syscall/resolver.h>",
          "15: #include <openenclave/internal/safemath.h>",
          "16: #include <openenclave/internal/calls.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: #include <openenclave/internal/syscall/netinet/in.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: #define RESOLV_MAGIC 0x536f636b",
          "28: typedef struct _resolver",
          "29: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: #define OE_AF_INET6_WIN 23",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116:     for (;;)",
          "117:     {",
          "118:         int retval = 0;",
          "128:         if (oe_syscall_getaddrinfo_read_ocall(",
          "129:                 &retval,",
          "130:                 handle,",
          "137:                 NULL,",
          "140:                 NULL) != OE_OK)",
          "141:         {",
          "142:             ret = OE_EAI_SYSTEM;",
          "",
          "[Removed Lines]",
          "119:         size_t canonnamelen = 0;",
          "121:         if (!(p = oe_calloc(1, sizeof(struct oe_addrinfo))))",
          "122:         {",
          "123:             ret = OE_EAI_MEMORY;",
          "124:             goto done;",
          "125:         }",
          "131:                 &p->ai_flags,",
          "132:                 &p->ai_family,",
          "133:                 &p->ai_socktype,",
          "134:                 &p->ai_protocol,",
          "135:                 p->ai_addrlen,",
          "136:                 &p->ai_addrlen,",
          "138:                 canonnamelen,",
          "139:                 &canonnamelen,",
          "",
          "[Added Lines]",
          "128:         size_t canonnamelen_in = 0;",
          "129:         size_t canonnamelen_out = 0;",
          "130:         struct oe_addrinfo p_out;",
          "132:         memset(&p_out, 0, sizeof(struct oe_addrinfo));",
          "138:                 &p_out.ai_flags,",
          "139:                 &p_out.ai_family,",
          "140:                 &p_out.ai_socktype,",
          "141:                 &p_out.ai_protocol,",
          "142:                 p_out.ai_addrlen,",
          "143:                 &p_out.ai_addrlen,",
          "145:                 canonnamelen_in,",
          "146:                 &canonnamelen_out,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "154:             OE_RAISE_ERRNO(oe_errno);",
          "155:         }",
          "158:         {",
          "159:             ret = OE_EAI_MEMORY;",
          "160:             goto done;",
          "161:         }",
          "164:         {",
          "165:             ret = OE_EAI_MEMORY;",
          "166:             goto done;",
          "167:         }",
          "169:         if (oe_syscall_getaddrinfo_read_ocall(",
          "170:                 &retval,",
          "171:                 handle,",
          "",
          "[Removed Lines]",
          "157:         if (p->ai_addrlen && !(p->ai_addr = oe_calloc(1, p->ai_addrlen)))",
          "163:         if (canonnamelen && !(p->ai_canonname = oe_calloc(1, canonnamelen)))",
          "",
          "[Added Lines]",
          "173:         switch (p_out.ai_family)",
          "174:         {",
          "175:             case OE_AF_INET:",
          "176:                 if (p_out.ai_addrlen != sizeof(struct oe_sockaddr))",
          "177:                 {",
          "178:                     ret = OE_EAI_FAIL;",
          "179:                     goto done;",
          "180:                 }",
          "181:                 break;",
          "182:             case OE_AF_INET6:",
          "183:             case OE_AF_INET6_WIN:",
          "184:             case OE_AF_UNSPEC:",
          "185:                 if (p_out.ai_addrlen != sizeof(struct oe_sockaddr_in6))",
          "186:                 {",
          "187:                     ret = OE_EAI_FAIL;",
          "188:                     goto done;",
          "189:                 }",
          "190:                 break;",
          "191:             default:",
          "192:                 ret = OE_EAI_FAIL;",
          "193:                 goto done;",
          "194:         }",
          "196:         if (!(p = oe_calloc(1, sizeof(struct oe_addrinfo))))",
          "197:         {",
          "198:             ret = OE_EAI_MEMORY;",
          "199:             goto done;",
          "200:         }",
          "202:         if (p_out.ai_addrlen && !(p->ai_addr = oe_calloc(1, p_out.ai_addrlen)))",
          "208:         if (canonnamelen_out &&",
          "209:             !(p->ai_canonname = oe_calloc(1, canonnamelen_out)))",
          "217:         canonnamelen_in = canonnamelen_out;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "173:                 &p->ai_family,",
          "174:                 &p->ai_socktype,",
          "175:                 &p->ai_protocol,",
          "177:                 &p->ai_addrlen,",
          "178:                 p->ai_addr,",
          "181:                 p->ai_canonname) != OE_OK)",
          "182:         {",
          "183:             ret = OE_EAI_SYSTEM;",
          "184:             OE_RAISE_ERRNO(OE_EINVAL);",
          "185:         }",
          "188:         if (tail)",
          "189:         {",
          "",
          "[Removed Lines]",
          "176:                 p->ai_addrlen,",
          "179:                 canonnamelen,",
          "180:                 &canonnamelen,",
          "",
          "[Added Lines]",
          "226:                 p_out.ai_addrlen,",
          "229:                 canonnamelen_in,",
          "230:                 &canonnamelen_out,",
          "242:         if ((p->ai_flags != p_out.ai_flags) ||",
          "243:             (p->ai_family != p_out.ai_family) ||",
          "244:             (p->ai_socktype != p_out.ai_socktype) ||",
          "245:             (p->ai_protocol != p_out.ai_protocol) ||",
          "246:             (p->ai_addrlen != p_out.ai_addrlen) ||",
          "247:             (canonnamelen_out != canonnamelen_in) ||",
          "248:             (canonnamelen_out && p->ai_canonname[canonnamelen_out - 1] != '\\0'))",
          "249:         {",
          "250:             ret = OE_EAI_FAIL;",
          "251:             goto done;",
          "252:         }",
          "",
          "---------------"
        ],
        "syscall/devices/hostsock/hostsock.c||syscall/devices/hostsock/hostsock.c": [
          "File: syscall/devices/hostsock/hostsock.c -> syscall/devices/hostsock/hostsock.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "350:     oe_errno = 0;",
          "353:         OE_RAISE_ERRNO(OE_EINVAL);",
          "355:     if (buf)",
          "",
          "[Removed Lines]",
          "352:     if (!sock || (count && !buf))",
          "",
          "[Added Lines]",
          "360:     if (!sock || (count && !buf) || count > OE_SSIZE_MAX)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "361:     if (oe_syscall_recv_ocall(&ret, sock->host_fd, buf, count, flags) != OE_OK)",
          "362:         OE_RAISE_ERRNO(OE_EINVAL);",
          "364: done:",
          "365:     return ret;",
          "366: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "376:     if (ret > (ssize_t)count)",
          "377:     {",
          "378:         ret = -1;",
          "379:         OE_RAISE_ERRNO(OE_EINVAL);",
          "380:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "370:     void* buf,",
          "371:     size_t count,",
          "372:     int flags,",
          "374:     oe_socklen_t* addrlen)",
          "375: {",
          "376:     ssize_t ret = -1;",
          "377:     sock_t* sock = _cast_sock(sock_);",
          "378:     oe_socklen_t addrlen_in = 0;",
          "380:     oe_errno = 0;",
          "383:         OE_RAISE_ERRNO(OE_EINVAL);",
          "386:         addrlen_in = *addrlen;",
          "388:     if (oe_syscall_recvfrom_ocall(",
          "",
          "[Removed Lines]",
          "373:     const struct oe_sockaddr* src_addr,",
          "382:     if (!sock || (count && !buf))",
          "385:     if (addrlen)",
          "",
          "[Added Lines]",
          "391:     struct oe_sockaddr* src_addr,",
          "397:     oe_socklen_t addrlen_out = 0;",
          "409:     if (!sock || (count && !buf) || count > OE_SSIZE_MAX)",
          "416:     if (src_addr && addrlen)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "391:             buf,",
          "392:             count,",
          "393:             flags,",
          "395:             addrlen_in,",
          "397:     {",
          "398:         OE_RAISE_ERRNO(OE_EINVAL);",
          "399:     }",
          "",
          "[Removed Lines]",
          "394:             (struct oe_sockaddr*)src_addr,",
          "396:             addrlen) != OE_OK)",
          "",
          "[Added Lines]",
          "425:             src_addr,",
          "427:             &addrlen_out) != OE_OK)",
          "428:     {",
          "429:         OE_RAISE_ERRNO(OE_EINVAL);",
          "430:     }",
          "436:     if (src_addr && addrlen)",
          "437:     {",
          "442:         if (addrlen_out > sizeof(struct oe_sockaddr_storage))",
          "443:             OE_RAISE_ERRNO(OE_EINVAL);",
          "450:     }",
          "456:     if (ret > (ssize_t)count)",
          "458:         ret = -1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "412:     oe_errno = 0;",
          "413:     void* buf = NULL;",
          "414:     size_t buf_size = 0;",
          "417:     if (!sock || !msg || (msg->msg_iovlen && !msg->msg_iov))",
          "418:         OE_RAISE_ERRNO(OE_EINVAL);",
          "422:         OE_RAISE_ERRNO(OE_ENOMEM);",
          "425:     {",
          "426:         if (oe_syscall_recvmsg_ocall(",
          "",
          "[Removed Lines]",
          "421:     if (oe_iov_pack(msg->msg_iov, (int)msg->msg_iovlen, &buf, &buf_size) != 0)",
          "",
          "[Added Lines]",
          "476:     size_t data_size = 0;",
          "477:     oe_socklen_t namelen_out = 0;",
          "478:     size_t controllen_out = 0;",
          "485:     if (oe_iov_pack(",
          "486:             msg->msg_iov, (int)msg->msg_iovlen, &buf, &buf_size, &data_size) !=",
          "487:         0)",
          "498:     if (data_size > OE_SSIZE_MAX)",
          "499:         OE_RAISE_ERRNO(OE_EINVAL);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "428:                 sock->host_fd,",
          "429:                 msg->msg_name,",
          "430:                 msg->msg_namelen,",
          "432:                 buf,",
          "433:                 msg->msg_iovlen,",
          "434:                 buf_size,",
          "435:                 msg->msg_control,",
          "436:                 msg->msg_controllen,",
          "438:                 flags) != OE_OK)",
          "439:         {",
          "440:             OE_RAISE_ERRNO(OE_EINVAL);",
          "",
          "[Removed Lines]",
          "431:                 &msg->msg_namelen,",
          "437:                 &msg->msg_controllen,",
          "",
          "[Added Lines]",
          "508:                 &namelen_out,",
          "514:                 &controllen_out,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "444:             OE_RAISE_ERRNO(oe_errno);",
          "445:     }",
          "448:     if (oe_iov_sync(msg->msg_iov, (int)msg->msg_iovlen, buf, buf_size) != 0)",
          "449:         OE_RAISE_ERRNO(OE_EINVAL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "524:     if (!msg->msg_name)",
          "525:         msg->msg_namelen = 0;",
          "526:     else",
          "527:     {",
          "532:         if (namelen_out > sizeof(struct oe_sockaddr_storage))",
          "533:             OE_RAISE_ERRNO(OE_EINVAL);",
          "539:         if (msg->msg_namelen >= namelen_out)",
          "540:             msg->msg_namelen = namelen_out;",
          "541:     }",
          "543:     if (!msg->msg_control)",
          "544:         msg->msg_controllen = 0;",
          "545:     else",
          "546:     {",
          "553:         if (msg->msg_controllen >= controllen_out)",
          "554:             msg->msg_controllen = controllen_out;",
          "555:         else",
          "556:             msg->msg_flags |= OE_MSG_CTRUNC;",
          "557:     }",
          "563:     if (ret > (ssize_t)data_size)",
          "564:     {",
          "565:         ret = -1;",
          "566:         OE_RAISE_ERRNO(OE_EINVAL);",
          "567:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "468:     oe_errno = 0;",
          "471:         OE_RAISE_ERRNO(OE_EINVAL);",
          "473:     if (oe_syscall_send_ocall(&ret, sock->host_fd, buf, count, flags) != OE_OK)",
          "474:         OE_RAISE_ERRNO(OE_EINVAL);",
          "476: done:",
          "477:     return ret;",
          "478: }",
          "",
          "[Removed Lines]",
          "470:     if (!sock || (count && !buf))",
          "",
          "[Added Lines]",
          "600:     if (!sock || (count && !buf) || count > OE_SSIZE_MAX)",
          "610:     if (ret > (ssize_t)count)",
          "611:     {",
          "612:         ret = -1;",
          "613:         OE_RAISE_ERRNO(OE_EINVAL);",
          "614:     }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "491:     oe_errno = 0;",
          "494:         OE_RAISE_ERRNO(OE_EINVAL);",
          "496:     if (oe_syscall_sendto_ocall(",
          "",
          "[Removed Lines]",
          "493:     if (!sock || (count && !buf))",
          "",
          "[Added Lines]",
          "641:     if (!sock || (count && !buf) || count > OE_SSIZE_MAX)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "505:         OE_RAISE_ERRNO(OE_EINVAL);",
          "506:     }",
          "508: done:",
          "509:     return ret;",
          "510: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "660:     if (ret > (ssize_t)count)",
          "661:     {",
          "662:         ret = -1;",
          "663:         OE_RAISE_ERRNO(OE_EINVAL);",
          "664:     }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "518:     sock_t* sock = _cast_sock(sock_);",
          "519:     void* buf = NULL;",
          "520:     size_t buf_size = 0;",
          "522:     oe_errno = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "679:     size_t data_size = 0;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "526:         OE_RAISE_ERRNO(OE_EINVAL);",
          "530:         OE_RAISE_ERRNO(OE_ENOMEM);",
          "533:     if (oe_syscall_sendmsg_ocall(",
          "534:             &ret,",
          "",
          "[Removed Lines]",
          "529:     if (oe_iov_pack(msg->msg_iov, (int)msg->msg_iovlen, &buf, &buf_size) != 0)",
          "",
          "[Added Lines]",
          "688:     if (oe_iov_pack(",
          "689:             msg->msg_iov, (int)msg->msg_iovlen, &buf, &buf_size, &data_size) !=",
          "690:         0)",
          "701:     if (data_size > OE_SSIZE_MAX)",
          "702:         OE_RAISE_ERRNO(OE_EINVAL);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "545:         OE_RAISE_ERRNO(OE_EINVAL);",
          "546:     }",
          "548: done:",
          "550:     if (buf)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "724:     if (ret > (ssize_t)data_size)",
          "725:     {",
          "726:         ret = -1;",
          "727:         OE_RAISE_ERRNO(OE_EINVAL);",
          "728:     }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "686:     int ret = -1;",
          "687:     sock_t* sock = _cast_sock(sock_);",
          "688:     oe_socklen_t optlen_in = 0;",
          "690:     oe_errno = 0;",
          "693:         OE_RAISE_ERRNO(OE_EINVAL);",
          "698:     if (oe_syscall_getsockopt_ocall(",
          "701:     {",
          "702:         OE_RAISE_ERRNO(OE_EINVAL);",
          "703:     }",
          "705: done:",
          "707:     return ret;",
          "",
          "[Removed Lines]",
          "692:     if (!sock)",
          "695:     if (optlen)",
          "696:         optlen_in = *optlen;",
          "699:             &ret, sock->host_fd, level, optname, optval, optlen_in, optlen) !=",
          "700:         OE_OK)",
          "",
          "[Added Lines]",
          "871:     oe_socklen_t optlen_out = 0;",
          "875:     if (!sock || !optval || !optlen)",
          "878:     optlen_in = *optlen;",
          "881:             &ret,",
          "882:             sock->host_fd,",
          "883:             level,",
          "884:             optname,",
          "885:             optval,",
          "886:             optlen_in,",
          "887:             &optlen_out) != OE_OK)",
          "902:     if (optlen_out > optlen_in)",
          "903:         optlen_out = optlen_in;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "760:     int ret = -1;",
          "761:     sock_t* sock = _cast_sock(sock_);",
          "762:     oe_socklen_t addrlen_in = 0;",
          "764:     oe_errno = 0;",
          "767:         OE_RAISE_ERRNO(OE_EINVAL);",
          "772:     if (oe_syscall_getpeername_ocall(",
          "773:             &ret,",
          "774:             sock->host_fd,",
          "775:             (struct oe_sockaddr*)addr,",
          "776:             addrlen_in,",
          "778:     {",
          "779:         OE_RAISE_ERRNO(OE_EINVAL);",
          "780:     }",
          "782: done:",
          "784:     return ret;",
          "",
          "[Removed Lines]",
          "766:     if (!sock)",
          "769:     if (addrlen)",
          "770:         addrlen_in = *addrlen;",
          "777:             addrlen) != OE_OK)",
          "",
          "[Added Lines]",
          "965:     oe_socklen_t addrlen_out = 0;",
          "969:     if (!sock || !addr || !addrlen)",
          "972:     addrlen_in = *addrlen;",
          "973:     if (addrlen_in < 0)",
          "974:         OE_RAISE_ERRNO(OE_EINVAL);",
          "981:             &addrlen_out) != OE_OK)",
          "990:     if (addrlen_out > sizeof(struct oe_sockaddr_storage))",
          "991:         OE_RAISE_ERRNO(OE_EINVAL);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "792:     int ret = -1;",
          "793:     sock_t* sock = _cast_sock(sock_);",
          "794:     oe_socklen_t addrlen_in = 0;",
          "796:     oe_errno = 0;",
          "799:         OE_RAISE_ERRNO(OE_EINVAL);",
          "804:     if (oe_syscall_getsockname_ocall(",
          "810:     {",
          "811:         OE_RAISE_ERRNO(OE_EINVAL);",
          "812:     }",
          "814: done:",
          "816:     return ret;",
          "",
          "[Removed Lines]",
          "798:     if (!sock)",
          "801:     if (addrlen)",
          "802:         addrlen_in = *addrlen;",
          "805:             &ret,",
          "806:             sock->host_fd,",
          "807:             (struct oe_sockaddr*)addr,",
          "808:             addrlen_in,",
          "809:             addrlen) != OE_OK)",
          "",
          "[Added Lines]",
          "1014:     oe_socklen_t addrlen_out = 0;",
          "1018:     if (!sock || !addr || !addrlen)",
          "1021:     addrlen_in = *addrlen;",
          "1022:     if (addrlen_in < 0)",
          "1023:         OE_RAISE_ERRNO(OE_EINVAL);",
          "1026:             &ret, sock->host_fd, addr, addrlen_in, &addrlen_out) != OE_OK)",
          "1035:     if (addrlen_out > sizeof(struct oe_sockaddr_storage))",
          "1036:         OE_RAISE_ERRNO(OE_EINVAL);",
          "1044:     if (addrlen_in >= addrlen_out)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "835:     sock_t* sock = _cast_sock(desc);",
          "836:     void* buf = NULL;",
          "837:     size_t buf_size = 0;",
          "839:     if (!sock || (!iov && iovcnt) || iovcnt < 0 || iovcnt > OE_IOV_MAX)",
          "840:         OE_RAISE_ERRNO(OE_EINVAL);",
          "844:         OE_RAISE_ERRNO(OE_ENOMEM);",
          "847:     if (oe_syscall_recvv_ocall(&ret, sock->host_fd, buf, iovcnt, buf_size) !=",
          "848:         OE_OK)",
          "",
          "[Removed Lines]",
          "843:     if (oe_iov_pack(iov, iovcnt, &buf, &buf_size) != 0)",
          "",
          "[Added Lines]",
          "1071:     size_t data_size = 0;",
          "1077:     if (oe_iov_pack(iov, iovcnt, &buf, &buf_size, &data_size) != 0)",
          "1088:     if (data_size > OE_SSIZE_MAX)",
          "1089:         OE_RAISE_ERRNO(OE_EINVAL);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "850:         OE_RAISE_ERRNO(OE_EINVAL);",
          "851:     }",
          "854:     if (ret > 0)",
          "855:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1102:     if (ret > (ssize_t)(data_size))",
          "1103:     {",
          "1104:         ret = -1;",
          "1105:         OE_RAISE_ERRNO(OE_EINVAL);",
          "1106:     }",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "874:     sock_t* sock = _cast_sock(desc);",
          "875:     void* buf = NULL;",
          "876:     size_t buf_size = 0;",
          "878:     if (!sock || !iov || iovcnt < 0 || iovcnt > OE_IOV_MAX)",
          "879:         OE_RAISE_ERRNO(OE_EINVAL);",
          "883:         OE_RAISE_ERRNO(OE_ENOMEM);",
          "886:     if (oe_syscall_sendv_ocall(&ret, sock->host_fd, buf, iovcnt, buf_size) !=",
          "887:         OE_OK)",
          "",
          "[Removed Lines]",
          "882:     if (oe_iov_pack(iov, iovcnt, &buf, &buf_size) != 0)",
          "",
          "[Added Lines]",
          "1132:     size_t data_size = 0;",
          "1138:     if (oe_iov_pack(iov, iovcnt, &buf, &buf_size, &data_size) != 0)",
          "1149:     if (data_size > OE_SSIZE_MAX)",
          "1150:         OE_RAISE_ERRNO(OE_EINVAL);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "889:         OE_RAISE_ERRNO(OE_EINVAL);",
          "890:     }",
          "892: done:",
          "894:     if (buf)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1163:     if (ret > (ssize_t)data_size)",
          "1164:     {",
          "1165:         ret = -1;",
          "1166:         OE_RAISE_ERRNO(OE_EINVAL);",
          "1167:     }",
          "",
          "---------------"
        ],
        "syscall/iov.c||syscall/iov.c": [
          "File: syscall/iov.c -> syscall/iov.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:     const struct oe_iovec* iov,",
          "18:     int iovcnt,",
          "19:     void** buf_out,",
          "21: {",
          "22:     int ret = -1;",
          "23:     struct oe_iovec* buf = NULL;",
          "",
          "[Removed Lines]",
          "20:     size_t* buf_size_out)",
          "",
          "[Added Lines]",
          "20:     size_t* buf_size_out,",
          "21:     size_t* data_size_out)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:     if (buf_size_out)",
          "35:         goto done;",
          "",
          "[Removed Lines]",
          "34:     if (iovcnt < 0 || (iovcnt > 0 && !iov) || !buf_out || !buf_size_out)",
          "",
          "[Added Lines]",
          "34:     if (data_size_out)",
          "38:     if (iovcnt < 0 || (iovcnt > 0 && !iov) || !buf_out || !buf_size_out ||",
          "39:         !data_size_out)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "155:                 if (src_size != dest_size)",
          "156:                     goto done;",
          "159:                     goto done;",
          "161:                 if (oe_memcpy_s(dest, dest_size, src, src_size) != OE_OK)",
          "",
          "[Removed Lines]",
          "158:                 if (src < (uint8_t*)buf || src > (uint8_t*)buf + buf_size)",
          "",
          "[Added Lines]",
          "165:                 if (src < (uint8_t*)buf || src + src_size < src ||",
          "166:                     src + src_size > (uint8_t*)buf + buf_size)",
          "",
          "---------------"
        ],
        "syscall/socket.c||syscall/socket.c": [
          "File: syscall/socket.c -> syscall/socket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "197:     void* buf,",
          "198:     size_t len,",
          "199:     int flags,",
          "201:     oe_socklen_t* addrlen)",
          "202: {",
          "203:     ssize_t ret = -1;",
          "",
          "[Removed Lines]",
          "200:     const struct oe_sockaddr* src_addr,",
          "",
          "[Added Lines]",
          "200:     struct oe_sockaddr* src_addr,",
          "",
          "---------------"
        ],
        "syscall/syscall.c||syscall/syscall.c": [
          "File: syscall/syscall.c -> syscall/syscall.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "617:             void* buf = (void*)arg2;",
          "618:             size_t len = (size_t)arg3;",
          "619:             int flags = (int)arg4;",
          "622:             oe_socklen_t* addrlen = (oe_socklen_t*)arg6;",
          "624:             ret = oe_recvfrom(sockfd, buf, len, flags, dest_add, addrlen);",
          "",
          "[Removed Lines]",
          "620:             const struct oe_sockaddr* dest_add =",
          "621:                 (const struct oe_sockaddr*)arg5;",
          "",
          "[Added Lines]",
          "620:             struct oe_sockaddr* dest_add = (struct oe_sockaddr*)arg5;",
          "",
          "---------------"
        ]
      }
    }
  ]
}