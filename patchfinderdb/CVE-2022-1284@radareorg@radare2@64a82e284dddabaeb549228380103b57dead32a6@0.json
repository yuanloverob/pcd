{
  "cve_id": "CVE-2022-1284",
  "cve_desc": "heap-use-after-free in GitHub repository radareorg/radare2 prior to 5.6.8. This vulnerability is capable of inducing denial of service.",
  "repo": "radareorg/radare2",
  "patch_hash": "64a82e284dddabaeb549228380103b57dead32a6",
  "patch_info": {
    "commit_hash": "64a82e284dddabaeb549228380103b57dead32a6",
    "repo": "radareorg/radare2",
    "commit_url": "https://github.com/radareorg/radare2/commit/64a82e284dddabaeb549228380103b57dead32a6",
    "files": [
      "libr/core/canal.c"
    ],
    "message": "Fix UAF in `aaef` ##crash\n\n* Reported by @hdthky\n* Reproducer: uaf-aef\n* BountyID: e98ad92c-3a64-48fb-84d4-d13afdbcbdd7",
    "before_after_code_files": [
      "libr/core/canal.c||libr/core/canal.c"
    ]
  },
  "patch_diff": {
    "libr/core/canal.c||libr/core/canal.c": [
      "File: libr/core/canal.c -> libr/core/canal.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "5295:   arch = R2_ARCH_MIPS;",
      "5296:  }",
      "5302:  r_reg_arena_push (core->anal->reg);",
      "5304:  IterCtx ictx = { start, end, fcn, NULL };",
      "",
      "[Removed Lines]",
      "5298:  const char *sn = r_reg_get_name (core->anal->reg, R_REG_NAME_SN);",
      "5299:  if (!sn) {",
      "5300:   eprintf (\"Warning: No SN reg alias for current architecture.\\n\");",
      "5301:  }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "5409:     goto repeat;",
      "5410:    }",
      "5411:   }",
      "5412:   if (sn && op.type == R_ANAL_OP_TYPE_SWI) {",
      "5413:    r_strf_buffer (64);",
      "5414:    r_flag_space_set (core->flags, R_FLAGS_FS_SYSCALLS);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5408:   const char *sn = r_reg_get_name (core->anal->reg, R_REG_NAME_SN);",
      "5409:   if (!sn) {",
      "5410:    eprintf (\"Warning: No SN reg alias for current architecture.\\n\");",
      "5411:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b5a26e0c0c239909fbf62e07932fb49be8cacff7",
      "candidate_info": {
        "commit_hash": "b5a26e0c0c239909fbf62e07932fb49be8cacff7",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/b5a26e0c0c239909fbf62e07932fb49be8cacff7",
        "files": [
          "libr/anal/anal.c",
          "libr/anal/class.c",
          "libr/anal/dwarf_process.c",
          "libr/anal/p/anal_arm_cs.c",
          "libr/anal/p/anal_avr.c",
          "libr/anal/p/anal_s390_cs.c",
          "libr/asm/p/asm_dalvik.c",
          "libr/bin/bfile.c",
          "libr/bin/format/dex/dex.c",
          "libr/bin/format/elf/elf.c",
          "libr/bin/format/objc/mach0_classes.c",
          "libr/bin/format/pe/pe.c",
          "libr/bin/p/bin_pe.c",
          "libr/bin/p/bin_pe.inc",
          "libr/bin/p/bin_pe64.c",
          "libr/cons/canvas.c",
          "libr/core/agraph.c",
          "libr/core/canal.c",
          "libr/core/cmd.c",
          "libr/core/cmd_anal.c",
          "libr/core/cmd_print.c",
          "libr/core/cmd_search.c",
          "libr/core/p/core_java.c",
          "libr/main/rabin2.c",
          "libr/util/table.c"
        ],
        "message": "Significantly reduce memory leaks in anal tests (#19759)",
        "before_after_code_files": [
          "libr/anal/anal.c||libr/anal/anal.c",
          "libr/anal/class.c||libr/anal/class.c",
          "libr/anal/dwarf_process.c||libr/anal/dwarf_process.c",
          "libr/anal/p/anal_arm_cs.c||libr/anal/p/anal_arm_cs.c",
          "libr/anal/p/anal_avr.c||libr/anal/p/anal_avr.c",
          "libr/anal/p/anal_s390_cs.c||libr/anal/p/anal_s390_cs.c",
          "libr/asm/p/asm_dalvik.c||libr/asm/p/asm_dalvik.c",
          "libr/bin/bfile.c||libr/bin/bfile.c",
          "libr/bin/format/dex/dex.c||libr/bin/format/dex/dex.c",
          "libr/bin/format/elf/elf.c||libr/bin/format/elf/elf.c",
          "libr/bin/format/objc/mach0_classes.c||libr/bin/format/objc/mach0_classes.c",
          "libr/bin/format/pe/pe.c||libr/bin/format/pe/pe.c",
          "libr/bin/p/bin_pe.c||libr/bin/p/bin_pe.c",
          "libr/bin/p/bin_pe.inc||libr/bin/p/bin_pe.inc",
          "libr/bin/p/bin_pe64.c||libr/bin/p/bin_pe64.c",
          "libr/cons/canvas.c||libr/cons/canvas.c",
          "libr/core/agraph.c||libr/core/agraph.c",
          "libr/core/canal.c||libr/core/canal.c",
          "libr/core/cmd.c||libr/core/cmd.c",
          "libr/core/cmd_anal.c||libr/core/cmd_anal.c",
          "libr/core/cmd_print.c||libr/core/cmd_print.c",
          "libr/core/cmd_search.c||libr/core/cmd_search.c",
          "libr/core/p/core_java.c||libr/core/p/core_java.c",
          "libr/main/rabin2.c||libr/main/rabin2.c",
          "libr/util/table.c||libr/util/table.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/core/canal.c||libr/core/canal.c"
          ],
          "candidate": [
            "libr/core/canal.c||libr/core/canal.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/anal/anal.c||libr/anal/anal.c": [
          "File: libr/anal/anal.c -> libr/anal/anal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "378:   }",
          "379:   idx += oplen;",
          "380:   at += oplen;",
          "381:  }",
          "383:  r_anal_op_free (op);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "381:   R_FREE (op->mnemonic);",
          "",
          "---------------"
        ],
        "libr/anal/class.c||libr/anal/class.c": [
          "File: libr/anal/class.c -> libr/anal/class.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:   goto beach;",
          "175:  }",
          "178:  char *attr_type_cur;",
          "179:  sdb_aforeach (attr_type_cur, attr_types) {",
          "181:   char *attr_id_cur;",
          "182:   sdb_aforeach (attr_id_cur, attr_ids) {",
          "183:    rename_key (anal->sdb_classes_attrs,",
          "",
          "[Removed Lines]",
          "177:  char *attr_types = sdb_get (anal->sdb_classes_attrs, key_attr_types (old_name_sanitized), 0);",
          "180:   char *attr_ids = sdb_get (anal->sdb_classes_attrs, key_attr_type_attrs (old_name, attr_type_cur), 0);",
          "",
          "[Added Lines]",
          "177:  char *old_name_key = key_attr_types (old_name_sanitized);",
          "178:  char *attr_types = sdb_get (anal->sdb_classes_attrs, old_name_key, 0);",
          "179:  free (old_name_key);",
          "183:   char *attr_type_attrs_key = key_attr_type_attrs (old_name, attr_type_cur);",
          "184:   char *attr_ids = sdb_get (anal->sdb_classes_attrs, attr_type_attrs_key, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "185:      key_attr_content (new_name, attr_type_cur, attr_id_cur));",
          "186:    sdb_aforeach_next (attr_id_cur);",
          "187:   }",
          "188:   free (attr_ids);",
          "189:   rename_key (anal->sdb_classes_attrs,",
          "190:     key_attr_type_attrs (old_name, attr_type_cur),",
          "191:     key_attr_type_attrs (new_name, attr_type_cur));",
          "192:   sdb_aforeach_next (attr_type_cur);",
          "193:  }",
          "194:  free (attr_types);",
          "198:  REventClassRename event = {",
          "199:   .name_old = old_name_sanitized,",
          "",
          "[Removed Lines]",
          "196:  rename_key (anal->sdb_classes_attrs, key_attr_types (old_name_sanitized), key_attr_types (new_name_sanitized));",
          "",
          "[Added Lines]",
          "194:   free (attr_type_attrs_key);",
          "204:  rename_key (anal->sdb_classes_attrs, key_attr_types (old_name_sanitized),",
          "205:    key_attr_types (new_name_sanitized));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "211: static char *r_anal_class_get_attr_raw(RAnal *anal, const char *class_name, RAnalClassAttrType attr_type, const char *attr_id, bool specific) {",
          "212:  const char *attr_type_str = attr_type_id (attr_type);",
          "213:  char *key = specific",
          "216:  char *ret = sdb_get (anal->sdb_classes_attrs, key, 0);",
          "217:  return ret;",
          "218: }",
          "",
          "[Removed Lines]",
          "214:    ? key_attr_content_specific (class_name, attr_type_str, attr_id)",
          "215:    : key_attr_content (class_name, attr_type_str, attr_id);",
          "",
          "[Added Lines]",
          "223:   ? key_attr_content_specific (class_name, attr_type_str, attr_id)",
          "224:   : key_attr_content (class_name, attr_type_str, attr_id);",
          "226:  free (key);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "245:   return R_ANAL_CLASS_ERR_NONEXISTENT_CLASS;",
          "246:  }",
          "252:  REventClassAttrSet event = {",
          "253:   .attr = {",
          "",
          "[Removed Lines]",
          "248:  sdb_array_add (anal->sdb_classes_attrs, key_attr_types (class_name), attr_type_str, 0);",
          "249:  sdb_array_add (anal->sdb_classes_attrs, key_attr_type_attrs (class_name, attr_type_str), attr_id, 0);",
          "250:  sdb_set (anal->sdb_classes_attrs, key_attr_content (class_name, attr_type_str, attr_id), content, 0);",
          "",
          "[Added Lines]",
          "258:  char *attr_types_key = key_attr_types (class_name);",
          "259:  char *attr_type_attrs_key = key_attr_type_attrs (class_name, attr_type_str);",
          "260:  char *content_key = key_attr_content (class_name, attr_type_str, attr_id);",
          "262:  sdb_array_add (anal->sdb_classes_attrs, attr_types_key, attr_type_str, 0);",
          "263:  sdb_array_add (anal->sdb_classes_attrs, attr_type_attrs_key, attr_id, 0);",
          "264:  sdb_set (anal->sdb_classes_attrs, content_key, content, 0);",
          "266:  free (attr_types_key);",
          "267:  free (attr_type_attrs_key);",
          "268:  free (content_key);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "319:   return R_ANAL_CLASS_ERR_OTHER;",
          "320:  }",
          "324:  free (class_name_sanitized);",
          "325:  free (attr_id_sanitized);",
          "",
          "[Removed Lines]",
          "322:  RAnalClassErr err = r_anal_class_delete_attr_raw (anal, class_name_sanitized, attr_type, attr_id_sanitized);",
          "",
          "[Added Lines]",
          "340:  RAnalClassErr err = r_anal_class_delete_attr_raw (anal, class_name_sanitized, attr_type,",
          "341:    attr_id_sanitized);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "401:   snprintf (out, out_size, \"%\"PFMT64u, id);",
          "402:   id++;",
          "403:  } while (sdb_array_contains (anal->sdb_classes_attrs, key, out, 0));",
          "404: }",
          "406: static char *flagname_attr(const char *attr_type, const char *class_name, const char *attr_id) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "423:  free (key);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "538:   r_vector_free (vec);",
          "539:   return NULL;",
          "540:  }",
          "542:  free (class_name_sanitized);",
          "544:  r_vector_reserve (vec, (size_t) sdb_alen (array));",
          "545:  char *cur;",
          "",
          "[Removed Lines]",
          "541:  char *array = sdb_get (anal->sdb_classes_attrs, key_attr_type_attrs (class_name_sanitized, attr_type_id (R_ANAL_CLASS_ATTR_TYPE_METHOD)), 0);",
          "",
          "[Added Lines]",
          "561:  char *attr_type_attrs_key = key_attr_type_attrs (class_name_sanitized,",
          "562:    attr_type_id (R_ANAL_CLASS_ATTR_TYPE_METHOD));",
          "563:  char *array = sdb_get (anal->sdb_classes_attrs, attr_type_attrs_key, 0);",
          "565:  free (attr_type_attrs_key);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "562:  if (err != R_ANAL_CLASS_ERR_SUCCESS) {",
          "563:   return err;",
          "564:  }",
          "566:  return R_ANAL_CLASS_ERR_SUCCESS;",
          "567: }",
          "",
          "[Removed Lines]",
          "565:  r_anal_class_set_flag (anal, flagname_method (class_name, meth->name), meth->addr, 0);",
          "",
          "[Added Lines]",
          "588:  char *flagname = flagname_method (class_name, meth->name);",
          "589:  r_anal_class_set_flag (anal, flagname, meth->addr, 0);",
          "590:  free (flagname);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "571:  if (err != R_ANAL_CLASS_ERR_SUCCESS) {",
          "572:   return err;",
          "573:  }",
          "577:  return R_ANAL_CLASS_ERR_SUCCESS;",
          "578: }",
          "",
          "[Removed Lines]",
          "574:  r_anal_class_rename_flag (anal,",
          "575:    flagname_method (class_name, old_meth_name),",
          "576:    flagname_method (class_name, new_meth_name));",
          "",
          "[Added Lines]",
          "600:  char *old = flagname_method (class_name, old_meth_name);",
          "601:  char *new = flagname_method (class_name, new_meth_name);",
          "603:  r_anal_class_rename_flag (anal, old, new);",
          "605:  free (old);",
          "606:  free (new);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "582:  if (!array) {",
          "583:   return;",
          "584:  }",
          "585:  char *cur;",
          "586:  sdb_aforeach (cur, array) {",
          "590:   sdb_aforeach_next (cur);",
          "591:  }",
          "592:  free (array);",
          "",
          "[Removed Lines]",
          "587:   r_anal_class_rename_flag (anal,",
          "588:     flagname_method (old_class_name, cur),",
          "589:     flagname_method (new_class_name, cur));",
          "",
          "[Added Lines]",
          "618:   char *old = flagname_method (old_class_name, cur);",
          "619:   char *new = flagname_method (new_class_name, cur);",
          "620:   r_anal_class_rename_flag (anal, old, new);",
          "621:   free (old);",
          "622:   free (new);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "599:  }",
          "600:  char *cur;",
          "601:  sdb_aforeach (cur, array) {",
          "603:   sdb_aforeach_next (cur);",
          "604:  }",
          "605:  free (array);",
          "",
          "[Removed Lines]",
          "602:   r_anal_class_unset_flag (anal, flagname_method (class_name, cur));",
          "",
          "[Added Lines]",
          "635:   char *flagname = flagname_method (class_name, cur);",
          "636:   r_anal_class_unset_flag (anal, flagname);",
          "637:   free (flagname);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "615:   free (class_name_sanitized);",
          "616:   return R_ANAL_CLASS_ERR_OTHER;",
          "617:  }",
          "619:  if (err == R_ANAL_CLASS_ERR_SUCCESS) {",
          "621:  }",
          "622:  free (class_name_sanitized);",
          "623:  free (meth_name_sanitized);",
          "",
          "[Removed Lines]",
          "618:  RAnalClassErr err = r_anal_class_delete_attr_raw (anal, class_name_sanitized, R_ANAL_CLASS_ATTR_TYPE_METHOD, meth_name_sanitized);",
          "620:   r_anal_class_unset_flag (anal, flagname_method (class_name_sanitized, meth_name_sanitized));",
          "",
          "[Added Lines]",
          "653:  RAnalClassErr err = r_anal_class_delete_attr_raw (anal, class_name_sanitized,",
          "654:    R_ANAL_CLASS_ATTR_TYPE_METHOD, meth_name_sanitized);",
          "656:   char *flagname = flagname_method (class_name_sanitized, meth_name_sanitized);",
          "657:   r_anal_class_unset_flag (anal, flagname);",
          "658:   free (flagname);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "633: }",
          "635: R_API RAnalClassErr r_anal_class_base_get(RAnal *anal, const char *class_name, const char *base_id, RAnalBaseClass *base) {",
          "637:  if (!content) {",
          "638:   return R_ANAL_CLASS_ERR_NONEXISTENT_ATTR;",
          "639:  }",
          "",
          "[Removed Lines]",
          "636:  char *content = r_anal_class_get_attr (anal, class_name, R_ANAL_CLASS_ATTR_TYPE_BASE, base_id, false);",
          "",
          "[Added Lines]",
          "674:  char *content = r_anal_class_get_attr (anal, class_name, R_ANAL_CLASS_ATTR_TYPE_BASE,",
          "675:    base_id, false);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "686:   r_vector_free (vec);",
          "687:   return NULL;",
          "688:  }",
          "690:  free (class_name_sanitized);",
          "692:  r_vector_reserve (vec, (size_t) sdb_alen (array));",
          "693:  char *cur;",
          "",
          "[Removed Lines]",
          "689:  char *array = sdb_get (anal->sdb_classes_attrs, key_attr_type_attrs (class_name_sanitized, attr_type_id (R_ANAL_CLASS_ATTR_TYPE_BASE)), 0);",
          "",
          "[Added Lines]",
          "729:  char *attr_type_attrs = key_attr_type_attrs (class_name_sanitized,",
          "730:    attr_type_id (R_ANAL_CLASS_ATTR_TYPE_BASE));",
          "731:  char *array = sdb_get (anal->sdb_classes_attrs, attr_type_attrs, 0);",
          "733:  free (attr_type_attrs);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "707:  char *content = r_str_newf (\"%s\" SDB_SS \"%\"PFMT64u, base_class_name_sanitized, base->offset);",
          "708:  RAnalClassErr err;",
          "709:  if (base->id) {",
          "711:  } else {",
          "712:   base->id = malloc(16);",
          "713:   if (base->id) {",
          "715:   } else {",
          "716:    err = R_ANAL_CLASS_ERR_OTHER;",
          "717:   }",
          "",
          "[Removed Lines]",
          "710:   err = r_anal_class_set_attr (anal, class_name, R_ANAL_CLASS_ATTR_TYPE_BASE, base->id, content);",
          "714:    err = r_anal_class_add_attr_unique (anal, class_name, R_ANAL_CLASS_ATTR_TYPE_BASE, content, base->id, 16);",
          "",
          "[Added Lines]",
          "753:   err = r_anal_class_set_attr (anal, class_name, R_ANAL_CLASS_ATTR_TYPE_BASE,",
          "754:     base->id, content);",
          "758:    err = r_anal_class_add_attr_unique (anal, class_name,",
          "759:      R_ANAL_CLASS_ATTR_TYPE_BASE, content, base->id, 16);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "866:   r_vector_free (vec);",
          "867:   return NULL;",
          "868:  }",
          "870:  free (class_name_sanitized);",
          "872:  r_vector_reserve (vec, (size_t) sdb_alen (array));",
          "873:  char *cur;",
          "",
          "[Removed Lines]",
          "869:  char *array = sdb_get (anal->sdb_classes_attrs, key_attr_type_attrs (class_name_sanitized, attr_type_id (R_ANAL_CLASS_ATTR_TYPE_VTABLE)), 0);",
          "",
          "[Added Lines]",
          "915:  char *attr_type_attrs = key_attr_type_attrs (class_name_sanitized,",
          "916:    attr_type_id (R_ANAL_CLASS_ATTR_TYPE_VTABLE));",
          "917:  char *array = sdb_get (anal->sdb_classes_attrs, attr_type_attrs, 0);",
          "919:  free (attr_type_attrs);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "919:   return err;",
          "920:  }",
          "924:  return R_ANAL_CLASS_ERR_SUCCESS;",
          "925: }",
          "927: static void r_anal_class_vtable_rename_class(RAnal *anal, const char *old_class_name, const char *new_class_name) {",
          "929:  if (!array) {",
          "930:   return;",
          "931:  }",
          "932:  char *cur;",
          "933:  sdb_aforeach (cur, array) {",
          "937:   sdb_aforeach_next (cur);",
          "938:  }",
          "939:  free (array);",
          "940: }",
          "942: static void r_anal_class_vtable_delete_class(RAnal *anal, const char *class_name) {",
          "944:  if (!array) {",
          "945:   return;",
          "946:  }",
          "947:  char *cur;",
          "948:  sdb_aforeach (cur, array) {",
          "950:   sdb_aforeach_next (cur);",
          "951:  }",
          "952:  free (array);",
          "",
          "[Removed Lines]",
          "922:  r_anal_class_set_flag (anal, flagname_vtable (class_name, vtable->id), vtable->addr, vtable->size);",
          "928:  char *array = sdb_get (anal->sdb_classes_attrs, key_attr_type_attrs (old_class_name, attr_type_id (R_ANAL_CLASS_ATTR_TYPE_VTABLE)), 0);",
          "934:   r_anal_class_rename_flag (anal,",
          "935:     flagname_vtable (old_class_name, cur),",
          "936:     flagname_vtable (new_class_name, cur));",
          "943:  char *array = sdb_get (anal->sdb_classes_attrs, key_attr_type_attrs (class_name, attr_type_id (R_ANAL_CLASS_ATTR_TYPE_VTABLE)), 0);",
          "949:   r_anal_class_unset_flag (anal, flagname_vtable (class_name, cur));",
          "",
          "[Added Lines]",
          "971:  char *flagname = flagname_vtable (class_name, vtable->id);",
          "972:  r_anal_class_set_flag (anal, flagname, vtable->addr, vtable->size);",
          "973:  free (flagname);",
          "979:  char *attr_type_attrs = key_attr_type_attrs (old_class_name, attr_type_id (R_ANAL_CLASS_ATTR_TYPE_VTABLE));",
          "980:  char *array = sdb_get (anal->sdb_classes_attrs, attr_type_attrs, 0);",
          "986:   char *old = flagname_vtable (old_class_name, cur);",
          "987:   char *new = flagname_vtable (new_class_name, cur);",
          "989:   r_anal_class_rename_flag (anal, old, new);",
          "991:   free (old);",
          "992:   free (new);",
          "1000:  char *array_key = key_attr_type_attrs (class_name, attr_type_id (R_ANAL_CLASS_ATTR_TYPE_VTABLE));",
          "1001:  char *array = sdb_get (anal->sdb_classes_attrs, array_key, 0);",
          "1002:  free (array_key);",
          "1008:   char *flagname = flagname_vtable (class_name, cur);",
          "1009:   r_anal_class_unset_flag (anal, flagname);",
          "1010:   free (flagname);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "964:  }",
          "965:  RAnalClassErr err = r_anal_class_delete_attr_raw (anal, class_name_sanitized, R_ANAL_CLASS_ATTR_TYPE_VTABLE, vtable_id_sanitized);",
          "966:  if (err == R_ANAL_CLASS_ERR_SUCCESS) {",
          "968:  }",
          "969:  free (class_name_sanitized);",
          "970:  free (vtable_id_sanitized);",
          "",
          "[Removed Lines]",
          "967:   r_anal_class_unset_flag (anal, flagname_vtable (class_name_sanitized, vtable_id_sanitized));",
          "",
          "[Added Lines]",
          "1028:   char *flagname = flagname_vtable (class_name_sanitized, vtable_id_sanitized);",
          "1029:   r_anal_class_unset_flag (anal, flagname);",
          "1030:   free (flagname);",
          "",
          "---------------"
        ],
        "libr/anal/dwarf_process.c||libr/anal/dwarf_process.c": [
          "File: libr/anal/dwarf_process.c -> libr/anal/dwarf_process.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "378:  }",
          "379:  if (root) {",
          "380:   set_u_free (*visited);",
          "381:  }",
          "382:  return (st32)die->tag;",
          "383: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "381:   free (visited);",
          "",
          "---------------"
        ],
        "libr/anal/p/anal_arm_cs.c||libr/anal/p/anal_arm_cs.c": [
          "File: libr/anal/p/anal_arm_cs.c -> libr/anal/p/anal_arm_cs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4198:  if (found) {",
          "4199:   insn->detail->arm.cc = itcond;",
          "4200:   insn->detail->arm.update_flags = 0;",
          "4201:   op->mnemonic = r_str_newf (\"%s%s%s%s\",",
          "4202:    r_anal_optype_to_string (op->type),",
          "4203:    cc_name (itcond),",
          "4205:    insn->op_str);",
          "4206:   op->cond = itcond;",
          "4207:  }",
          "",
          "[Removed Lines]",
          "4204:    insn->op_str[0]?\" \":\"\",",
          "",
          "[Added Lines]",
          "4201:   free (op->mnemonic);",
          "4205:    insn->op_str[0]? \" \": \"\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4461:   if (mask & R_ANAL_OP_MASK_DISASM) {",
          "4462:    op->mnemonic = r_str_newf (\"%s%s%s\",",
          "4463:     insn->mnemonic,",
          "4465:     insn->op_str);",
          "4466:   }",
          "",
          "[Removed Lines]",
          "4464:     insn->op_str[0]?\" \":\"\",",
          "",
          "[Added Lines]",
          "4465:     insn->op_str[0]? \" \": \"\",",
          "",
          "---------------"
        ],
        "libr/anal/p/anal_avr.c||libr/anal/p/anal_avr.c": [
          "File: libr/anal/p/anal_avr.c -> libr/anal/p/anal_avr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1698:  int size = avr_anal (anal, mnemonic, sizeof (mnemonic), addr, buf, len);",
          "1702:   op->eob = true;",
          "1703:   op->mnemonic = strdup (mnemonic);",
          "1704:   op->size = 2;",
          "",
          "[Removed Lines]",
          "1700:  if (!strcmp (mnemonic, \"invalid\") ||",
          "1701:   !strcmp (mnemonic, \"truncated\")) {",
          "",
          "[Added Lines]",
          "1700:  if (!strcmp (mnemonic, \"invalid\")",
          "1701:    || !strcmp (mnemonic, \"truncated\")) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1729:  avr_op_analyze (anal, op, addr, buf, len, cpu);",
          "1732:  op->size = size;",
          "1734:  return size;",
          "",
          "[Removed Lines]",
          "1731:  op->mnemonic = op->size > 1? strdup (mnemonic): \"invalid\";",
          "",
          "[Added Lines]",
          "1731:  free (op->mnemonic);",
          "1732:  op->mnemonic = op->size > 1? strdup (mnemonic): strdup (\"invalid\");",
          "",
          "---------------"
        ],
        "libr/anal/p/anal_s390_cs.c||libr/anal/p/anal_s390_cs.c": [
          "File: libr/anal/p/anal_s390_cs.c -> libr/anal/p/anal_s390_cs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:   int n = cs_disasm (handle, (const ut8*)buf, len, addr, 1, &insn);",
          "67:   if (n < 1) {",
          "68:    op->type = R_ANAL_OP_TYPE_ILL;",
          "69:    return -1;",
          "70:   } else {",
          "71:    if (mask & R_ANAL_OP_MASK_OPEX) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:    cs_close (&handle);",
          "",
          "---------------"
        ],
        "libr/asm/p/asm_dalvik.c||libr/asm/p/asm_dalvik.c": [
          "File: libr/asm/p/asm_dalvik.c -> libr/asm/p/asm_dalvik.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:  int vA, vB, vC, vD, vE, vF, vG, vH, payload = 0, i = (int) buf[0];",
          "16:  int size = dalvik_opcodes[i].len;",
          "17:  char str[1024], *strasm = NULL;",
          "19:  r_strf_buffer (256);",
          "20:  ut64 offset;",
          "21:  a->dataalign = 2;",
          "",
          "[Removed Lines]",
          "18:  const char *flag_str;",
          "",
          "[Added Lines]",
          "18:  const char *flag_str = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "525:   op->size = size + op->payload;",
          "526:  }",
          "527:  free (strasm);",
          "528:  return size;",
          "529: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "528:  free ((char *)flag_str);",
          "",
          "---------------"
        ],
        "libr/bin/bfile.c||libr/bin/bfile.c": [
          "File: libr/bin/bfile.c -> libr/bin/bfile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "766:   sdb_free (bf->sdb_addrinfo);",
          "767:   bf->sdb_addrinfo = NULL;",
          "768:  }",
          "769:  free (bf->file);",
          "770:  r_bin_object_free (bf->o);",
          "771:  r_list_free (bf->xtr_data);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "769:  if (bf->sdb) {",
          "770:   sdb_free (bf->sdb);",
          "771:   bf->sdb = NULL;",
          "772:  }",
          "",
          "---------------"
        ],
        "libr/bin/format/dex/dex.c||libr/bin/format/dex/dex.c": [
          "File: libr/bin/format/dex/dex.c -> libr/bin/format/dex/dex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "195:    r_buf_seek (dex->b, at, R_BUF_SET);",
          "196:    parseValue (dex);",
          "197:   }",
          "198:  } else {",
          "199:   bprintf (\"      TypeSize: %d %d (?)\\n\", (int)typeIndex, (int)typeSize);",
          "200:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "198:   free ((char *)typeString);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "477:   bprintf (\"            annotatedMethodCount  %d\\n\", annotatedMethodsCount);",
          "478:   bprintf (\"            annotatedParametersCount  %d\\n\", annotatedParametersCount);",
          "480:   if (fieldsCount == UT32_MAX || annotatedMethodsCount == UT32_MAX || annotatedParametersCount == UT32_MAX || classAnnotationsOffset == UT32_MAX) {",
          "481:    continue;",
          "482:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "481:   free ((char *)cn);",
          "",
          "---------------"
        ],
        "libr/bin/format/elf/elf.c||libr/bin/format/elf/elf.c": [
          "File: libr/bin/format/elf/elf.c -> libr/bin/format/elf/elf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3575:      if (ret_size) {",
          "3577:      }",
          "3578:      return symbol;",
          "3579:     }",
          "3580:     free (data);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3578:      free (data);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3943:  R_FREE (bin->g_relocs);",
          "3944:  ht_up_free (bin->rel_cache);",
          "3945:  bin->rel_cache = NULL;",
          "3946:  free (bin);",
          "3947: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3947:  sdb_free (bin->kv);",
          "",
          "---------------"
        ],
        "libr/bin/format/objc/mach0_classes.c||libr/bin/format/objc/mach0_classes.c": [
          "File: libr/bin/format/objc/mach0_classes.c -> libr/bin/format/objc/mach0_classes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "520:  mach0_ut r;",
          "521:  ut32 offset, left, i;",
          "522:  char *name = NULL;",
          "524:  int len;",
          "525:  bool bigendian;",
          "526:  ut8 sml[sizeof (struct MACH0_(SMethodList))] = {0};",
          "",
          "[Removed Lines]",
          "523:    char *rtype = NULL;",
          "",
          "[Added Lines]",
          "523:  char *rtype = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "687:     }",
          "688:     rtype[left] = 0;",
          "689:    }",
          "691:    R_FREE (rtype);",
          "692:   }",
          "",
          "[Removed Lines]",
          "690:          method->rtype = strdup (rtype);",
          "",
          "[Added Lines]",
          "690:    method->rtype = strdup (rtype);",
          "",
          "---------------"
        ],
        "libr/bin/format/pe/pe.c||libr/bin/format/pe/pe.c": [
          "File: libr/bin/format/pe/pe.c -> libr/bin/format/pe/pe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "500:       const char *dirPrefix = r_sys_prefix (NULL);",
          "501:       char *lower_symdllname = strdup (symdllname);",
          "502:       r_str_case (lower_symdllname, false);",
          "503:       filename = r_str_newf (R_JOIN_4_PATHS (\"%s\", R2_SDB_FORMAT, \"dll\", \"%s.sdb\"),",
          "504:        dirPrefix, lower_symdllname);",
          "505:       free (lower_symdllname);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "503:       free (filename);",
          "",
          "---------------"
        ],
        "libr/bin/p/bin_pe.c||libr/bin/p/bin_pe.c": [
          "File: libr/bin/p/bin_pe.c -> libr/bin/p/bin_pe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:  RListIter *it;",
          "131:  Pe_image_rich_entry *rich;",
          "132:  r_list_foreach (pe->rich_entries, it, rich) {",
          "134:   ROWL (\"RICH_ENTRY_ID\", 2, rich->productId, \"x\"); addr += 2;",
          "135:   ROWL (\"RICH_ENTRY_VERSION\", 2, rich->minVersion, \"x\"); addr += 2;",
          "136:   ROWL (\"RICH_ENTRY_TIMES\", 4, rich->timesUsed, \"x\"); addr += 4;",
          "",
          "[Removed Lines]",
          "133:   r_list_append (ret, r_bin_field_new (addr, addr, 0, \"RICH_ENTRY_NAME\", strdup (rich->productName), \"s\", false));",
          "",
          "[Added Lines]",
          "133:   r_list_append (ret, r_bin_field_new (addr, addr, 0, \"RICH_ENTRY_NAME\", rich->productName, \"s\", false));",
          "",
          "---------------"
        ],
        "libr/bin/p/bin_pe.inc||libr/bin/p/bin_pe.inc": [
          "File: libr/bin/p/bin_pe.inc -> libr/bin/p/bin_pe.inc",
          "--- Hunk 1 ---",
          "[Context before]",
          "565:  if (is_vb6 (bf)) {",
          "566:   ret->lang = \"vb\";",
          "567:  }",
          "569:  ret->type = strdup (typestr);",
          "571:  ut32 claimed_checksum = PE_(bin_pe_get_claimed_checksum) (pe);",
          "",
          "[Removed Lines]",
          "568:  const char *typestr = PE_(r_bin_pe_is_dll) (pe) ? \"DLL (Dynamic Link Library)\": \"EXEC (Executable file)\";",
          "",
          "[Added Lines]",
          "568:  const char *typestr = PE_(r_bin_pe_is_dll) (pe)? \"DLL (Dynamic Link Library)\": \"EXEC (Executable file)\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "582:  ret->claimed_checksum = r_str_newf (\"0x%08x\", claimed_checksum);",
          "583:  ret->actual_checksum = r_str_newf (\"0x%08x\", actual_checksum);",
          "584:  ret->pe_overlay = pe_overlay > 0;",
          "587:  Sdb *db = sdb_ns (bf->sdb, \"pe\", true);",
          "588:  sdb_bool_set (db, \"canary\", has_canary (bf), 0);",
          "589:  sdb_bool_set (db, \"highva\", haschr (bf, IMAGE_DLLCHARACTERISTICS_HIGH_ENTROPY_VA), 0);",
          "",
          "[Removed Lines]",
          "585:  ret->signature = pe ? pe->is_signed : false;",
          "586:  ret->file_hashes = r_list_newf ((RListFree) r_bin_file_hash_free);",
          "",
          "[Added Lines]",
          "585:  ret->signature = pe? pe->is_signed: false;",
          "586:  ret->file_hashes = r_list_newf ((RListFree)r_bin_file_hash_free);",
          "",
          "---------------"
        ],
        "libr/bin/p/bin_pe64.c||libr/bin/p/bin_pe64.c": [
          "File: libr/bin/p/bin_pe64.c -> libr/bin/p/bin_pe64.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:  RListIter *it;",
          "46:  Pe_image_rich_entry *rich;",
          "47:  r_list_foreach (bin->rich_entries, it, rich) {",
          "49:   ROWL (\"RICH_ENTRY_ID\", 2, rich->productId, \"x\"); addr += 2;",
          "50:   ROWL (\"RICH_ENTRY_VERSION\", 2, rich->minVersion, \"x\"); addr += 2;",
          "51:   ROWL (\"RICH_ENTRY_TIMES\", 4, rich->timesUsed, \"x\"); addr += 4;",
          "",
          "[Removed Lines]",
          "48:   r_list_append (ret, r_bin_field_new (addr, addr, 0, \"RICH_ENTRY_NAME\", strdup (rich->productName), \"s\", false));",
          "",
          "[Added Lines]",
          "48:   r_list_append (ret, r_bin_field_new (addr, addr, 0, \"RICH_ENTRY_NAME\", rich->productName, \"s\", false));",
          "",
          "---------------"
        ],
        "libr/cons/canvas.c||libr/cons/canvas.c": [
          "File: libr/cons/canvas.c -> libr/cons/canvas.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "425: }",
          "427: R_API int r_cons_canvas_resize(RConsCanvas *c, int w, int h) {",
          "428:  if (!c || w < 0 || h <= 0) {",
          "429:   return false;",
          "430:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "428:  int i;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "439:   r_cons_canvas_free (c);",
          "440:   return false;",
          "441:  }",
          "442:  c->bsize = newbsize;",
          "443:  char **newb = realloc (c->b, sizeof *c->b * h);",
          "444:  if (!newb) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "445:  for (i = h; i < c->h; i++) {",
          "446:   free (c->b[i]);",
          "447:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "446:   return false;",
          "447:  }",
          "448:  c->b = newb;",
          "450:  char *newline = NULL;",
          "451:  for (i = 0; i < h; i++) {",
          "452:   if (i < c->h) {",
          "",
          "[Removed Lines]",
          "449:  int i;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libr/core/agraph.c||libr/core/agraph.c": [
          "File: libr/core/agraph.c -> libr/core/agraph.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "649:  const RGraphEdge *e;",
          "650:  const RListIter *it;",
          "653:  cyclic_vis.back_edge = (RGraphEdgeCallback) view_cyclic_edge;",
          "654:  cyclic_vis.data = g;",
          "655:  r_graph_dfs (g->graph, &cyclic_vis);",
          "",
          "[Removed Lines]",
          "652:  g->back_edges = r_list_new ();",
          "",
          "[Added Lines]",
          "652:  g->back_edges = r_list_newf (free);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1624:  sdb_free (D);",
          "1625: }",
          "1627: static void ranode_free(RANode *n) {",
          "1628:  free (n->title);",
          "1629:  free (n->body);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1627: static void aedge_free(AEdge *e) {",
          "1628:  r_list_free (e->x);",
          "1629:  r_list_free (e->y);",
          "1630:  free (e);",
          "1631: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1720:    g->layers[v->layer].n_nodes -= 1;",
          "1722:    r_graph_del_node (g->graph, v->gnode);",
          "1723:   }",
          "1724:  }",
          "1725: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1729:    ranode_free (v);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1881:      r_list_append ((g->layout == 0 ? e->x : e->y), (void *) (size_t) (min - 1));",
          "1882:     }",
          "1885:    }",
          "1886:   }",
          "1887:  }",
          "",
          "[Removed Lines]",
          "1884:     r_list_append(g->edges, e);",
          "",
          "[Added Lines]",
          "1891:     r_list_append (g->edges, e);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1944:  int i, j, k;",
          "1946:  r_list_free (g->edges);",
          "1949:  remove_cycles (g);",
          "1950:  assign_layers (g);",
          "",
          "[Removed Lines]",
          "1947:  g->edges = r_list_new ();",
          "",
          "[Added Lines]",
          "1954:  g->edges = r_list_newf ((RListFree)aedge_free);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3770:   free (estr);",
          "3771:   free (b);",
          "3772:   char *k = r_str_newf (\"agraph.nodes.%s.body\", res->title);",
          "3774:   free (k);",
          "3775:  }",
          "3776:  return res;",
          "",
          "[Removed Lines]",
          "3773:   sdb_set_owned (g->db, k, s, 0);",
          "",
          "[Added Lines]",
          "3780:   sdb_set (g->db, k, s, 0);",
          "3781:   free (s);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4302:  g->is_interactive = is_interactive;",
          "4303:  bool asm_comments = r_config_get_i (core->config, \"asm.comments\");",
          "4304:  r_config_set (core->config, \"asm.comments\",",
          "4308:  core->is_asmqjmps_letter = true;",
          "",
          "[Removed Lines]",
          "4305:   r_str_bool (r_config_get_i (core->config, \"graph.comments\")));",
          "",
          "[Added Lines]",
          "4313:    r_str_bool (r_config_get_i (core->config, \"graph.comments\")));",
          "",
          "---------------"
        ],
        "libr/core/canal.c||libr/core/canal.c": [
          "File: libr/core/canal.c -> libr/core/canal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2838:     } else {",
          "2839:      r_cons_printf (\"    %s\\n\", dst);",
          "2840:     }",
          "2841:    }",
          "2842:    if (pj) {",
          "2843:     pj_end (pj); // close list of calls",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2841:     free (dst);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2846:     r_cons_newline();",
          "2847:    }",
          "2848:   }",
          "2849:  }",
          "2851:  if (mode == 'j') {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2851:   r_list_free (refs);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5065:     r_list_free (ctx->path);",
          "5066:     r_list_free (ctx->switch_path);",
          "5067:     r_list_free (ctx->bbl);",
          "5068:     return false;",
          "5069:    }",
          "5070:    if (!bbit->data) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5071:     ctx->path = NULL;",
          "5072:     ctx->switch_path = NULL;",
          "5073:     ctx->bbl = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5235:  }",
          "5236:  r_reg_arena_push (core->anal->reg);",
          "5239:  size_t i = addr - start;",
          "5240:  size_t i_old = 0;",
          "5241:  do {",
          "",
          "[Removed Lines]",
          "5238:  IterCtx ictx = { start, end, fcn, NULL};",
          "",
          "[Added Lines]",
          "5244:  IterCtx ictx = { start, end, fcn, NULL };",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5360:     r_flag_set_next (core->flags, r_strf (\"syscall.%d\", snv), cur, 1);",
          "5361:    }",
          "5362:    r_flag_space_set (core->flags, NULL);",
          "5363:   }",
          "5364:   const char *esilstr = R_STRBUF_SAFEGET (&op.esil);",
          "5365:   i += op.size - 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5369:    r_syscall_item_free (si);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5537:    break;",
          "5538:   }",
          "5539:  } while (get_next_i (&ictx, &i));",
          "5540:  free (buf);",
          "5541:  ESIL->cb.hook_mem_read = NULL;",
          "5542:  ESIL->cb.hook_mem_write = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5547:  r_list_free (ictx.bbl);",
          "5548:  r_list_free (ictx.path);",
          "5549:  r_list_free (ictx.switch_path);",
          "",
          "---------------"
        ],
        "libr/core/cmd.c||libr/core/cmd.c": [
          "File: libr/core/cmd.c -> libr/core/cmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "406:    char *sp = strchr (row, ' ');",
          "407:    if (sp) {",
          "408:     char *k = strdup (sp + 1);",
          "409:     r_str_ansi_filter (k, NULL, NULL, -1);",
          "410:     if (strcmp (cmd_prefix, k)) {",
          "411:      if (!r_list_find (pending, k, (RListComparator)strcmp)) {",
          "412:       r_list_append (pending, k);",
          "413:      }",
          "414:     }",
          "415:    }",
          "416:   }",
          "417:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "408:     bool key_found = false;",
          "414:       key_found = true;",
          "418:     if (!key_found) {",
          "419:      free (k);",
          "420:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4428:   }",
          "4430:   rc = ret;",
          "4431:   goto beach;",
          "4432:  }",
          "4433: fuji:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4437:   free (tmpbits);",
          "",
          "---------------"
        ],
        "libr/core/cmd_anal.c||libr/core/cmd_anal.c": [
          "File: libr/core/cmd_anal.c -> libr/core/cmd_anal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1051:     free (ks);",
          "1052:     free (v);",
          "1053:    } else {",
          "1057:     if (var->name && !strstr (var->name, \"arg_\")) {",
          "1058:      o = NULL;",
          "1059:     }",
          "1061: #if 0",
          "1062:     if (name != var->name) {",
          "1063:      o = NULL;",
          "",
          "[Removed Lines]",
          "1054:     char *name = db_name ? db_name: var->name;",
          "1055:     char *type = db_type? db_type: strdup (var->type);",
          "1060:     type = strdup (var->type);",
          "",
          "[Added Lines]",
          "1054:     char *name = db_name? db_name: var->name;",
          "1055:     char *type = strdup (db_type? db_type: var->type);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1073:      if (!strstr (var->name, \",arg_\")) {",
          "1074:       free (var->name);",
          "1075:       var->name = s;",
          "1078:      free (v2);",
          "1079:     } else {",
          "",
          "[Removed Lines]",
          "1076:      } else free (s);",
          "",
          "[Added Lines]",
          "1075:      } else {",
          "1076:       free (s);",
          "1077:      }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1082:      sdb_set (core->anal->sdb_types, k, v, 0);",
          "1083:     }",
          "1084:     free (v);",
          "1086:    }",
          "1087:    free (db_name);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1086:     free (type);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1338:    }",
          "1339:   }",
          "1340:   r_core_seek (core, oaddr, 0);",
          "1341:   return;",
          "1342:  }",
          "1343:  if (type == '*') {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1343:   r_list_free (list);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1347:    r_cons_printf (\"f fcnvar.%s @ %s%s%d\\n\", var->name, bp,",
          "1348:     var->delta>=0? \"+\":\"\", var->delta);",
          "1349:   }",
          "1350:   return;",
          "1351:  }",
          "1352:  if (type != 'W' && type != 'R') {",
          "1353:   return;",
          "1354:  }",
          "1355:  int access_type = type == 'R' ? R_ANAL_VAR_ACCESS_TYPE_READ : R_ANAL_VAR_ACCESS_TYPE_WRITE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1353:   r_list_free (list);",
          "1357:   r_list_free (list);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1369:  if (pj) {",
          "1370:   pj_end (pj);",
          "1371:  }",
          "1372: }",
          "1374: static void cmd_afvx(RCore *core, RAnalFunction *fcn, bool json) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1377:  r_list_free (list);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1578:   } else {",
          "1579:    eprintf (\"Cannot find function in 0x%08\"PFMT64x\"\\n\", core->offset);",
          "1580:   }",
          "1581:   return true;",
          "1582:  case 'R': // \"afvR\"",
          "1583:  case 'W': // \"afvW\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1587:   free (ostr);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1600:     r_cons_println (pj_string (pj));",
          "1601:     pj_free (pj);",
          "1602:    }",
          "1603:    return true;",
          "1604:   } else {",
          "1605:    eprintf (\"afv: Cannot find function in 0x%08\"PFMT64x\"\\n\", core->offset);",
          "1606:    return false;",
          "1607:   }",
          "1608:  case 'a': // \"afva\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1610:    free (ostr);",
          "1614:    free (ostr);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1680:     return false;",
          "1681:    }",
          "1682:    r_anal_var_display (core->anal, v1);",
          "1684:   } else {",
          "1685:    RListIter *iter;",
          "1686:    RAnalVar *p;",
          "",
          "[Removed Lines]",
          "1683:    free (ostr);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1691:      free (a);",
          "1692:      a = strdup (\"\\n\");",
          "1693:     }",
          "1695:     free (a);",
          "1696:    }",
          "1697:    r_list_free (list);",
          "1698:   }",
          "1699:   return true;",
          "1700:  case 'f': // \"afvf\"",
          "1701:   __cmd_afvf (core, ostr);",
          "",
          "[Removed Lines]",
          "1694:     r_cons_printf (\"%s %s = %s\", p->isarg ? \"arg\": \"var\", p->name, a);",
          "",
          "[Added Lines]",
          "1702:     r_cons_printf (\"%s %s = %s\", p->isarg? \"arg\": \"var\", p->name, a);",
          "1707:   free (ostr);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2026:  const char *opexstr;",
          "2027:  RAnalHint *hint;",
          "2028:  RAnalEsil *esil = NULL;",
          "2030:  RAnalOp op = {0};",
          "2031:  ut64 addr;",
          "2032:  PJ *pj = NULL;",
          "",
          "[Removed Lines]",
          "2029:  RAsmOp asmop;",
          "",
          "[Added Lines]",
          "2038:  RAsmOp asmop = {0};",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2435:   r_anal_hint_free (hint);",
          "2436:   r_anal_op_fini (&op);",
          "2437:  }",
          "2438:  r_anal_op_fini (&op);",
          "2439:  if (fmt == 's') {",
          "2440:   r_cons_printf (\"%d\\n\", totalsize);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2447:  r_asm_op_fini (&asmop);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4811:     anal_calls = r_config_get_i (core->config, \"anal.calls\");",
          "4812:    }",
          "4813:    ut64 addr = core->offset;",
          "4816:    if (input[0] && input[1] == ' ') {",
          "4818:     char *uaddr = strchr (name, ' ');",
          "4819:     if (uaddr) {",
          "",
          "[Removed Lines]",
          "4814:    char *name = NULL;",
          "4817:     name = strdup (r_str_trim_head_ro (input + 2));",
          "",
          "[Added Lines]",
          "4824:    const char *name = NULL;",
          "4827:     name = r_str_trim_head_ro (input + 2);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "5476:      r_reg_setv (core->anal->reg, \"PC\", op.addr + op.size);",
          "5477:      r_reg_setv (core->dbg->reg, \"PC\", op.addr + op.size);",
          "5478:     }",
          "5479:     return 1;",
          "5480:    }",
          "5481:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5489:     r_anal_op_fini(&op);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "8259:  } else {",
          "8260:   buf_asm = r_str_new (str);",
          "8261:  }",
          "8262:  return buf_asm;",
          "8263: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8273:  r_strbuf_fini (&asmop.buf_asm);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "11666:    } else {",
          "11667:     eprintf (\"Cannot find any function type..lets just use some standards?\\n\");",
          "11668:    }",
          "11669:   } else {",
          "11670:    if (is_aCer) {",
          "11671:     show_reg_args (core, -1, sb);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11681:    free (key);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "11731:     r_strbuf_appendf (sb, \")\");",
          "11732:    }",
          "11733:   }",
          "11734:   r_reg_setv (core->anal->reg, sp, spv); // reset stack ptr",
          "11735:  }",
          "11736:  char *s = r_strbuf_drain (sb);",
          "11737:  if (is_aCer) {",
          "11738:   char *u = r_base64_encode_dyn (s, -1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11747:   r_list_free (list);",
          "11750:  r_anal_op_free (op);",
          "",
          "---------------"
        ],
        "libr/core/cmd_print.c||libr/core/cmd_print.c": [
          "File: libr/core/cmd_print.c -> libr/core/cmd_print.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2986:       r_cons_printf (\"%s%s\\n\", use_color? pal->comment: \"\", comment);",
          "2987:      }",
          "2988:      if (r_str_startswith (comment, \"switch table\")) {",
          "2989:       switchcmp = strdup (comment);",
          "2990:      }",
          "2991:      R_FREE (comment);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2989:       free (switchcmp);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5087:      } else {",
          "5088:       char *s = r_core_cmd_strf (core, \"pdi %i @ 0x%08\"PFMT64x, 1, refi->at);",
          "5089:       r_cons_printf (\"%s\", s);",
          "5090:      }",
          "5091:     }",
          "5094:     r_config_hold_restore (hc);",
          "5095:     r_config_hold_free (hc);",
          "5097:    }",
          "5099:    if (pj) {",
          "",
          "[Removed Lines]",
          "5096:     R_FREE (refs);",
          "",
          "[Added Lines]",
          "5091:       free (s);",
          "5098:     r_list_free (refs);",
          "",
          "---------------"
        ],
        "libr/core/cmd_search.c||libr/core/cmd_search.c": [
          "File: libr/core/cmd_search.c -> libr/core/cmd_search.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "542:      eprintf (\"ap: Unsupported asm.arch and asm.bits\\n\");",
          "543:     }",
          "544:    }",
          "545:   }",
          "546:   if (log) {",
          "547:    eprintf (\"done\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "545:    r_list_free (preds);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1242:   }",
          "1243:   free (opst);",
          "1244:   aop.mnemonic = NULL;",
          "1245:   nb_instr++;",
          "1246:  }",
          "1247: ret:",
          "1249:  free (grep_str);",
          "1250:  if (regex && rx) {",
          "1251:   r_list_free (hitlist);",
          "",
          "[Removed Lines]",
          "1248:  free (aop.mnemonic);",
          "",
          "[Added Lines]",
          "1246:   r_strbuf_fini (&aop.esil);",
          "1250:  r_anal_op_fini (&aop);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1394:      core->cons->context->pal.reg, core->cons->context->pal.num, false, 0);",
          "1395:     otype = r_print_color_op_type (core->print, analop.type);",
          "1396:     if (comment) {",
          "1398:       hit->addr, asm_op_hex, otype, buf_asm, Color_RESET, comment);",
          "1399:     } else {",
          "1401:       hit->addr, asm_op_hex, otype, buf_asm, Color_RESET);",
          "1402:     }",
          "1403:     free (buf_asm);",
          "1404:    } else {",
          "1405:     if (comment) {",
          "1407:       hit->addr, asm_op_hex, r_asm_op_get_asm (&asmop), comment);",
          "1408:     } else {",
          "1410:       hit->addr, asm_op_hex, r_asm_op_get_asm (&asmop));",
          "1411:     }",
          "1412:    }",
          "1413:    free (asm_op_hex);",
          "1414:    free (buf);",
          "1415:   }",
          "1416:   if (db && hit) {",
          "1417:    const ut64 addr = ((RCoreAsmHit *) hitlist->head->data)->addr;",
          "",
          "[Removed Lines]",
          "1397:      r_cons_printf (\"  0x%08\"PFMT64x \" %18s%s  %s%s ; %s\\n\",",
          "1400:      r_cons_printf (\"  0x%08\"PFMT64x \" %18s%s  %s%s\\n\",",
          "1406:      r_cons_printf (\"  0x%08\"PFMT64x \" %18s  %s ; %s\\n\",",
          "1409:      r_cons_printf (\"  0x%08\"PFMT64x \" %18s  %s\\n\",",
          "",
          "[Added Lines]",
          "1399:      r_cons_printf (\"  0x%08\" PFMT64x \" %18s%s  %s%s ; %s\\n\",",
          "1402:      r_cons_printf (\"  0x%08\" PFMT64x \" %18s%s  %s%s\\n\",",
          "1408:      r_cons_printf (\"  0x%08\" PFMT64x \" %18s  %s ; %s\\n\",",
          "1411:      r_cons_printf (\"  0x%08\" PFMT64x \" %18s  %s\\n\",",
          "1417:    r_anal_op_fini (&analop);",
          "",
          "---------------"
        ],
        "libr/core/p/core_java.c||libr/core/p/core_java.c": [
          "File: libr/core/p/core_java.c -> libr/core/p/core_java.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1534:  r_list_foreach (obj_list, iter, obj) {",
          "1535:   r_cmd_java_print_class_definitions (obj);",
          "1536:  }",
          "1537:  return true;",
          "1538: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1537:  r_list_free (obj_list);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1578:    ut64 *addr = r_list_get_n (the_moffsets, idx);",
          "1579:    str = r_list_get_n (the_methods, idx);",
          "1580:    r_cons_printf (\"  %s; // @0x%04\" PFMT64x \"\\n\", str, *addr);",
          "1581:    idx++;",
          "1582:   }",
          "1583:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1582:    free (str);",
          "",
          "---------------"
        ],
        "libr/main/rabin2.c||libr/main/rabin2.c": [
          "File: libr/main/rabin2.c -> libr/main/rabin2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "707:    if (is_active (R_BIN_REQ_CLASSES)) {",
          "708:     rad = R_MODE_CLASSDUMP;",
          "709:    } else {",
          "711:    }",
          "712:    break;",
          "713:   case 'f': arch_name = strdup (opt.arg); break;",
          "",
          "[Removed Lines]",
          "710:       set_action (R_BIN_REQ_CLASSES);",
          "",
          "[Added Lines]",
          "710:     set_action (R_BIN_REQ_CLASSES);",
          "",
          "---------------"
        ],
        "libr/util/table.c||libr/util/table.c": [
          "File: libr/util/table.c -> libr/util/table.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1162:   } else if (!strcmp (operation, \"cols\")) {",
          "1163:    char *op = strdup (r_str_get (operand));",
          "1164:    RList *list = r_str_split_list (op, \"/\", 0);",
          "1166:    r_table_columns (t, list); // select/reorder columns",
          "1167:    r_list_free (list);",
          "1168:    free (op);",
          "",
          "[Removed Lines]",
          "1165:    r_list_prepend (list, strdup (columnName));",
          "",
          "[Added Lines]",
          "1165:    r_list_prepend (list, (char *)columnName);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "399ca4c6693a9f18b0c17bd3c2623ebf1245af0d",
      "candidate_info": {
        "commit_hash": "399ca4c6693a9f18b0c17bd3c2623ebf1245af0d",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/399ca4c6693a9f18b0c17bd3c2623ebf1245af0d",
        "files": [
          "libr/anal/p/anal_sparc_cs.c",
          "libr/core/canal.c"
        ],
        "message": "Define =SN for the sparc register profile and improve warning message ##analysis",
        "before_after_code_files": [
          "libr/anal/p/anal_sparc_cs.c||libr/anal/p/anal_sparc_cs.c",
          "libr/core/canal.c||libr/core/canal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/core/canal.c||libr/core/canal.c"
          ],
          "candidate": [
            "libr/core/canal.c||libr/core/canal.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/anal/p/anal_sparc_cs.c||libr/anal/p/anal_sparc_cs.c": [
          "File: libr/anal/p/anal_sparc_cs.c -> libr/anal/p/anal_sparc_cs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "335: static bool set_reg_profile(RAnal *anal) {",
          "336:  const char *p = \\",
          "337:   \"=PC pc\\n\"",
          "338:   \"=SP sp\\n\"",
          "339:   \"=BP fp\\n\"",
          "340:   \"=A0 i0\\n\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "338:   \"=SN g1\\n\"",
          "",
          "---------------"
        ],
        "libr/core/canal.c||libr/core/canal.c": [
          "File: libr/core/canal.c -> libr/core/canal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5448:   }",
          "5449:   const char *sn = r_reg_get_name (core->anal->reg, R_REG_NAME_SN);",
          "5450:   if (!sn) {",
          "5452:   }",
          "5453:   if (sn && op.type == R_ANAL_OP_TYPE_SWI) {",
          "5454:    r_strf_buffer (64);",
          "",
          "[Removed Lines]",
          "5451:    R_LOG_WARN (\"No SN reg alias for current architecture\");",
          "",
          "[Added Lines]",
          "5451:    R_LOG_WARN (\"No SN reg alias for '%s'\", r_config_get (core->config, \"asm.arch\"));",
          "",
          "---------------"
        ]
      }
    }
  ]
}