{
  "cve_id": "CVE-2019-19925",
  "cve_desc": "zipfileUpdate in ext/misc/zipfile.c in SQLite 3.30.1 mishandles a NULL pathname during an update of a ZIP archive.",
  "repo": "sqlite/sqlite",
  "patch_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
  "patch_info": {
    "commit_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/54d501092d88c0cf89bec4279951f548fb0b8618",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid",
      "test/zipfile.test"
    ],
    "message": "Fix the zipfile extension so that INSERT works even if the pathname of the file being inserted is a NULL.  Bug discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid",
      "test/zipfile.test||test/zipfile.test"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1620:     if( rc==SQLITE_OK ){",
      "1621:       zPath = (const char*)sqlite3_value_text(apVal[2]);",
      "1622:       nPath = (int)strlen(zPath);",
      "1623:       mTime = zipfileGetTime(apVal[4]);",
      "1624:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1622:       if( zPath==0 ) zPath = \"\";",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/zipfile.test||test/zipfile.test": [
      "File: test/zipfile.test -> test/zipfile.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "795:   } {. ./x1.txt ./x2.txt}",
      "796: }",
      "798: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "798: # 2019-12-18 Yongheng and Rui fuzzer",
      "799: #",
      "800: do_execsql_test 13.10 {",
      "801:   DROP TABLE IF EXISTS t0;",
      "802:   DROP TABLE IF EXISTS t1;",
      "803:   CREATE TABLE t0(a,b,c,d,e,f,g);",
      "804:   REPLACE INTO t0(c,b,f) VALUES(10,10,10);",
      "805:   CREATE VIRTUAL TABLE t1 USING zipfile('h.zip');",
      "806:   REPLACE INTO t1 SELECT * FROM t0;",
      "807:   SELECT quote(name),quote(mode),quote(mtime),quote(sz),quote(rawdata),",
      "808:          quote(data),quote(method) FROM t1;",
      "809: } {'' 10 10 2 X'3130' X'3130' 0}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ae3977a8f30bb859b858c36d03f07319ba210615",
      "candidate_info": {
        "commit_hash": "ae3977a8f30bb859b858c36d03f07319ba210615",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ae3977a8f30bb859b858c36d03f07319ba210615",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "Fix the xfer optimization for generated columns, so that VACUUM works again.\n\nFossilOrigin-Name: 8f67b89b04622c1509dc102a83be7a80057dc791625804fc2c294089c98b97e4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c21959d4eb5d742a097a98e1874c0bf132dc962a97a65be1ab22d6ca3cf2b261",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2290:     }",
          "2291: #endif",
          "2292:     if( pDestCol->affinity!=pSrcCol->affinity ){",
          "2294:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2292:     if( (pDestCol->colFlags & COLFLAG_GENERATED) !=",
          "2293:         (pSrcCol->colFlags & COLFLAG_GENERATED) ){",
          "2295:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2300:     }",
          "2303:       assert( pDestCol->pDflt==0 || pDestCol->pDflt->op==TK_SPAN );",
          "2304:       assert( pSrcCol->pDflt==0 || pSrcCol->pDflt->op==TK_SPAN );",
          "2305:       if( (pDestCol->pDflt==0)!=(pSrcCol->pDflt==0)",
          "",
          "[Removed Lines]",
          "2302:     if( i>0 ){",
          "",
          "[Added Lines]",
          "2306:     if( (pDestCol->colFlags & COLFLAG_GENERATED)==0 && i>0 ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2310:       }",
          "2311:     }",
          "2312:   }",
          "2313:   for(pDestIdx=pDest->pIndex; pDestIdx; pDestIdx=pDestIdx->pNext){",
          "2314:     if( IsUniqueIndex(pDestIdx) ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2317:     if( (pDestCol->colFlags & COLFLAG_GENERATED)!=0 ){",
          "2318:       if( sqlite3ExprCompare(0, pSrcCol->pDflt, pDestCol->pDflt, -1)!=0 ){",
          "2320:       }",
          "2321:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c794b15a0704dabe5be9265ff77f67f35b9c24d",
      "candidate_info": {
        "commit_hash": "2c794b15a0704dabe5be9265ff77f67f35b9c24d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2c794b15a0704dabe5be9265ff77f67f35b9c24d",
        "files": [
          "ext/misc/blobio.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Add the blobio.c extension module implementing readblob() and writeblob(). Experimental.\n\nFossilOrigin-Name: e3fde56da46e9592143b8beeee5eba4d74b8ef67edb7bf73a85edd2e0f7a8d21",
        "before_after_code_files": [
          "ext/misc/blobio.c||ext/misc/blobio.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/blobio.c||ext/misc/blobio.c": [
          "File: ext/misc/blobio.c -> ext/misc/blobio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #include \"sqlite3ext.h\"",
          "28: SQLITE_EXTENSION_INIT1",
          "29: #include <assert.h>",
          "30: #include <string.h>",
          "32: static void readblobFunc(",
          "33:   sqlite3_context *context,",
          "34:   int argc,",
          "35:   sqlite3_value **argv",
          "36: ){",
          "37:   sqlite3_blob *pBlob = 0;",
          "38:   const char *zSchema;",
          "39:   const char *zTable;",
          "40:   const char *zColumn;",
          "41:   sqlite3_int64 iRowid;",
          "42:   int iOfst;",
          "43:   unsigned char *aData;",
          "44:   int nData;",
          "45:   sqlite3 *db;",
          "46:   int rc;",
          "48:   zSchema = (const char*)sqlite3_value_text(argv[0]);",
          "49:   zTable = (const char*)sqlite3_value_text(argv[1]);",
          "50:   if( zTable==0 ){",
          "51:     sqlite3_result_error(context, \"bad table name\", -1);",
          "52:     return;",
          "53:   }",
          "54:   zColumn = (const char*)sqlite3_value_text(argv[2]);",
          "55:   if( zTable==0 ){",
          "56:     sqlite3_result_error(context, \"bad column name\", -1);",
          "57:     return;",
          "58:   }",
          "59:   iRowid = sqlite3_value_int64(argv[3]);",
          "60:   iOfst = sqlite3_value_int(argv[4]);",
          "61:   nData = sqlite3_value_int(argv[5]);",
          "62:   if( nData<=0 ) return;",
          "63:   aData = sqlite3_malloc64( nData+1 );",
          "64:   if( aData==0 ){",
          "65:     sqlite3_result_error_nomem(context);",
          "66:     return;",
          "67:   }",
          "68:   db = sqlite3_context_db_handle(context);",
          "69:   rc = sqlite3_blob_open(db, zSchema, zTable, zColumn, iRowid, 0, &pBlob);",
          "70:   if( rc ){",
          "71:     sqlite3_free(aData);",
          "72:     sqlite3_result_error(context, \"cannot open BLOB pointer\", -1);",
          "73:     return;",
          "74:   }",
          "75:   rc = sqlite3_blob_read(pBlob, aData, nData, iOfst);",
          "76:   sqlite3_blob_close(pBlob);",
          "77:   if( rc ){",
          "78:     sqlite3_free(aData);",
          "79:     sqlite3_result_error(context, \"BLOB write failed\", -1);",
          "80:   }else{",
          "81:     sqlite3_result_blob(context, aData, nData, sqlite3_free);",
          "82:   }",
          "83: }",
          "85: static void writeblobFunc(",
          "86:   sqlite3_context *context,",
          "87:   int argc,",
          "88:   sqlite3_value **argv",
          "89: ){",
          "90:   sqlite3_blob *pBlob = 0;",
          "91:   const char *zSchema;",
          "92:   const char *zTable;",
          "93:   const char *zColumn;",
          "94:   sqlite3_int64 iRowid;",
          "95:   int iOfst;",
          "96:   unsigned char *aData;",
          "97:   int nData;",
          "98:   sqlite3 *db;",
          "99:   int rc;",
          "101:   zSchema = (const char*)sqlite3_value_text(argv[0]);",
          "102:   zTable = (const char*)sqlite3_value_text(argv[1]);",
          "103:   if( zTable==0 ){",
          "104:     sqlite3_result_error(context, \"bad table name\", -1);",
          "105:     return;",
          "106:   }",
          "107:   zColumn = (const char*)sqlite3_value_text(argv[2]);",
          "108:   if( zTable==0 ){",
          "109:     sqlite3_result_error(context, \"bad column name\", -1);",
          "110:     return;",
          "111:   }",
          "112:   iRowid = sqlite3_value_int64(argv[3]);",
          "113:   iOfst = sqlite3_value_int(argv[4]);",
          "114:   if( sqlite3_value_type(argv[5])!=SQLITE_BLOB ){",
          "115:     sqlite3_result_error(context, \"6th argument must be a BLOB\", -1);",
          "116:     return;",
          "117:   }",
          "118:   nData = sqlite3_value_bytes(argv[5]);",
          "119:   aData = (unsigned char *)sqlite3_value_blob(argv[5]);",
          "120:   db = sqlite3_context_db_handle(context);",
          "121:   rc = sqlite3_blob_open(db, zSchema, zTable, zColumn, iRowid, 1, &pBlob);",
          "122:   if( rc ){",
          "123:     sqlite3_result_error(context, \"cannot open BLOB pointer\", -1);",
          "124:     return;",
          "125:   }",
          "126:   rc = sqlite3_blob_write(pBlob, aData, nData, iOfst);",
          "127:   sqlite3_blob_close(pBlob);",
          "128:   if( rc ){",
          "129:     sqlite3_result_error(context, \"BLOB write failed\", -1);",
          "130:   }",
          "131: }",
          "134: #ifdef _WIN32",
          "135: __declspec(dllexport)",
          "136: #endif",
          "137: int sqlite3_blobio_init(",
          "138:   sqlite3 *db,",
          "139:   char **pzErrMsg,",
          "140:   const sqlite3_api_routines *pApi",
          "141: ){",
          "142:   int rc = SQLITE_OK;",
          "143:   SQLITE_EXTENSION_INIT2(pApi);",
          "145:   rc = sqlite3_create_function(db, \"readblob\", 6, SQLITE_UTF8, 0,",
          "146:                                readblobFunc, 0, 0);",
          "147:   if( rc==SQLITE_OK ){",
          "148:     rc = sqlite3_create_function(db, \"writeblob\", 6, SQLITE_UTF8, 0,",
          "149:                                writeblobFunc, 0, 0);",
          "150:   }",
          "151:   return rc;",
          "152: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5b8c44cd39c529e8adbc51f67088409e963515b988868856120a59e6c7160210",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "af8664020a8f01e275e9237082d570fd25978eef",
      "candidate_info": {
        "commit_hash": "af8664020a8f01e275e9237082d570fd25978eef",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/af8664020a8f01e275e9237082d570fd25978eef",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/affinity2.test"
        ],
        "message": "Fix a false-positive in sqlite3ExprNeedsNoAffinityChange(). Ticket [ac184eb571d5e6e0]\n\nFossilOrigin-Name: e62eddbb048cbc2c15cb8eeb5b7a907e7cb08c21a27ebba96a069f62dbcb0f30",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/affinity2.test||test/affinity2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 81b9f0f55042777b37de78069f7089041a9ee21dd0a0c86b879053fb46e140b4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2160: int sqlite3ExprNeedsNoAffinityChange(const Expr *p, char aff){",
          "2161:   u8 op;",
          "2162:   if( aff==SQLITE_AFF_BLOB ) return 1;",
          "2164:   op = p->op;",
          "2165:   if( op==TK_REGISTER ) op = p->op2;",
          "2166:   switch( op ){",
          "",
          "[Removed Lines]",
          "2163:   while( p->op==TK_UPLUS || p->op==TK_UMINUS ){ p = p->pLeft; }",
          "",
          "[Added Lines]",
          "2162:   int unaryMinus = 0;",
          "2164:   while( p->op==TK_UPLUS || p->op==TK_UMINUS ){",
          "2165:     if( p->op==TK_UMINUS ) unaryMinus = 1;",
          "2166:     p = p->pLeft;",
          "2167:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2171:       return aff==SQLITE_AFF_REAL || aff==SQLITE_AFF_NUMERIC;",
          "2172:     }",
          "2173:     case TK_STRING: {",
          "2175:     }",
          "2176:     case TK_BLOB: {",
          "2178:     }",
          "2179:     case TK_COLUMN: {",
          "",
          "[Removed Lines]",
          "2174:       return aff==SQLITE_AFF_TEXT;",
          "2177:       return 1;",
          "",
          "[Added Lines]",
          "2178:       return !unaryMinus && aff==SQLITE_AFF_TEXT;",
          "2181:       return !unaryMinus;",
          "",
          "---------------"
        ],
        "test/affinity2.test||test/affinity2.test": [
          "File: test/affinity2.test -> test/affinity2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:   SELECT * FROM t3 WHERE c='0' ORDER BY a;",
          "86: } {2 1 0 4 1 0}",
          "88: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88: # 2019-08-22 ticket https://sqlite.org/src/info/d99f1ffe836c591ac57f",
          "89: # False positive in sqlite3ExprNeedsNoAffinityChange()",
          "90: #",
          "91: do_execsql_test 500 {",
          "92:   DROP TABLE IF EXISTS t0;",
          "93:   CREATE TABLE t0(c0 TEXT UNIQUE, c1);",
          "94:   INSERT INTO t0(c0) VALUES (-1);",
          "95:   SELECT quote(- x'ce'), quote(t0.c0), quote(- x'ce' >= t0.c0) FROM t0;",
          "96: } {0 '-1' 1}",
          "97: do_execsql_test 501 {",
          "98:   SELECT * FROM t0 WHERE - x'ce' >= t0.c0;",
          "99: } {-1 {}}",
          "100: do_execsql_test 502 {",
          "101:   SELECT quote(+-+x'ce'), quote(t0.c0), quote(+-+x'ce' >= t0.c0) FROM t0;",
          "102: } {0 '-1' 1}",
          "103: do_execsql_test 503 {",
          "104:   SELECT * FROM t0 WHERE +-+x'ce' >= t0.c0;",
          "105: } {-1 {}}",
          "106: do_execsql_test 504 {",
          "107:   SELECT quote(- 'ce'), quote(t0.c0), quote(- 'ce' >= t0.c0) FROM t0;",
          "108: } {0 '-1' 1}",
          "109: do_execsql_test 505 {",
          "110:   SELECT * FROM t0 WHERE - 'ce' >= t0.c0;",
          "111: } {-1 {}}",
          "112: do_execsql_test 506 {",
          "113:   SELECT quote(+-+'ce'), quote(t0.c0), quote(+-+'ce' >= t0.c0) FROM t0;",
          "114: } {0 '-1' 1}",
          "115: do_execsql_test 507 {",
          "116:   SELECT * FROM t0 WHERE +-+'ce' >= t0.c0;",
          "117: } {-1 {}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e2bcbb404861a7bf4b17ed615f9e161a5371be3b",
      "candidate_info": {
        "commit_hash": "e2bcbb404861a7bf4b17ed615f9e161a5371be3b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e2bcbb404861a7bf4b17ed615f9e161a5371be3b",
        "files": [
          "Makefile.msc",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Support building the Tcl bindings DLL using MSVC.\n\nFossilOrigin-Name: 908c4c891fa7472b43d232bde7d3789105c5f5b2cfaf6652bf6d5829236933cf",
        "before_after_code_files": [
          "Makefile.msc||Makefile.msc",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "320: SQLITETCLDECLSH = sqlite_tclDecls.h",
          "321: !ENDIF",
          "323: # These are the additional targets that the targets that integrate with the",
          "324: # Tcl library should depend on when compiling, etc.",
          "325: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "323: # This is the name to use for the dynamic link library (DLL) containing the",
          "324: # Tcl bindings for SQLite.",
          "325: #",
          "326: !IFNDEF SQLITE3TCLDLL",
          "327: SQLITE3TCLDLL = tclsqlite3.dll",
          "328: !ENDIF",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "495: # will run on the platform that is doing the build.",
          "496: #",
          "497: !IF $(USE_FULLWARN)!=0",
          "499: !ELSE",
          "501: !ENDIF",
          "503: # Check if assembly code listings should be generated for the source",
          "",
          "[Removed Lines]",
          "498: BCC = $(NCC) -nologo -W4 $(CCOPTS) $(BCCOPTS)",
          "500: BCC = $(NCC) -nologo -W3 $(CCOPTS) $(BCCOPTS)",
          "",
          "[Added Lines]",
          "505: BCC = $(NCC) -nologo -W4 -Fd$*.pdb $(CCOPTS) $(BCCOPTS)",
          "507: BCC = $(NCC) -nologo -W3 -Fd$*.pdb $(CCOPTS) $(BCCOPTS)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1063: # Command line prefixes for compiling code, compiling resources,",
          "1064: # linking, etc.",
          "1065: #",
          "1067: LTRCOMPILE = $(RCC) -r",
          "1068: LTLIB = lib.exe",
          "1069: LTLINK = $(TCC) -Fe$@",
          "",
          "[Removed Lines]",
          "1066: LTCOMPILE = $(TCC) -Fo$@",
          "",
          "[Added Lines]",
          "1073: LTCOMPILE = $(TCC) -Fo$@ -Fd$*.pdb",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1665: # Extra targets for the \"all\" target that require Tcl.",
          "1666: #",
          "1667: !IF $(NO_TCL)==0",
          "1669: !ELSE",
          "1670: ALL_TCL_TARGETS =",
          "1671: !ENDIF",
          "",
          "[Removed Lines]",
          "1668: ALL_TCL_TARGETS = libtclsqlite3.lib",
          "",
          "[Added Lines]",
          "1675: ALL_TCL_TARGETS = $(SQLITE3TCLDLL)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1697:  $(LTLIB) $(LTLIBOPTS) /OUT:$@ $(LIBOBJ) $(TLIBS)",
          "1699: libtclsqlite3.lib: tclsqlite.lo libsqlite3.lib",
          "1701: # <</mark>>",
          "1703: $(SQLITE3DLL): $(LIBOBJ) $(LIBRESOBJS) $(CORE_LINK_DEP)",
          "",
          "[Removed Lines]",
          "1700:  $(LTLIB) $(LTLIBOPTS) $(LTLIBPATHS) /OUT:$@ tclsqlite.lo libsqlite3.lib $(LIBTCLSTUB) $(TLIBS)",
          "",
          "[Added Lines]",
          "1707:  $(LTLIB) $(LTLIBOPTS) $(TCLLIBPATHS) $(LTLIBPATHS) /OUT:$@ tclsqlite.lo libsqlite3.lib $(LIBTCLSTUB) $(TLIBS)",
          "1709: tclsqlite3.def: tclsqlite.lo",
          "1710:  echo EXPORTS > tclsqlite3.def",
          "1711:  dumpbin /all tclsqlite.lo \\",
          "1712:   | $(TCLSH_CMD) $(TOP)\\tool\\replace.tcl include \"^\\s+/EXPORT:_?((?:Sqlite3|Tclsqlite3)_[^@]*)(?:@\\d+)?$$\" \\1 \\",
          "1713:   | sort >> tclsqlite3.def",
          "1715: pkgIndex.tcl: $(TOP)\\VERSION",
          "1716:  for /F %%V in ('type \"$(TOP)\\VERSION\"') do ( \\",
          "1717:   echo package ifneeded sqlite3 @version@ [list load [file join $$dir $(SQLITE3TCLDLL)] sqlite3] \\",
          "1718:    | $(TCLSH_CMD) $(TOP)\\tool\\replace.tcl exact @version@ %%V > pkgIndex.tcl \\",
          "1719:  )",
          "1721: $(SQLITE3TCLDLL): libtclsqlite3.lib $(LIBRESOBJS) tclsqlite3.def pkgIndex.tcl",
          "1722:  $(LD) $(LDFLAGS) $(LTLINKOPTS) $(LTLIBPATHS) /DLL /DEF:tclsqlite3.def /OUT:$@ libtclsqlite3.lib $(LIBRESOBJS) $(LTLIBS) $(TLIBS)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1837: #",
          "1838: !IF $(USE_RC)!=0",
          "1839: # <<block1>>",
          "1841:  echo #ifndef SQLITE_RESOURCE_VERSION > sqlite3rc.h",
          "1842:  for /F %%V in ('type \"$(TOP)\\VERSION\"') do ( \\",
          "1843:   echo #define SQLITE_RESOURCE_VERSION %%V \\",
          "",
          "[Removed Lines]",
          "1840: $(LIBRESOBJS): $(TOP)\\src\\sqlite3.rc $(SQLITE3H)",
          "",
          "[Added Lines]",
          "1862: $(LIBRESOBJS): $(TOP)\\src\\sqlite3.rc $(SQLITE3H) $(TOP)\\VERSION",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2514:  del /Q *.bsc *.def *.cod *.da *.bb *.bbg *.vc gmon.out 2>NUL",
          "2515:  del /Q $(SQLITE3EXE) $(SQLITE3DLL) Replace.exe 2>NUL",
          "2516: # <<mark>>",
          "2517:  del /Q opcodes.c opcodes.h 2>NUL",
          "2518:  del /Q lemon.* lempar.c parse.* 2>NUL",
          "2519:  del /Q mksourceid.* mkkeywordhash.* keywordhash.h 2>NUL",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2539:  del /Q $(SQLITE3TCLDLL) pkgIndex.tcl 2>NUL",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 80e951fce3e5aaa224c8dba6449832d2efabcdc24e86eb6b7833f85cf08ecc00",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fab5b07395796f7761dbf3ba8604325889af9522",
      "candidate_info": {
        "commit_hash": "fab5b07395796f7761dbf3ba8604325889af9522",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fab5b07395796f7761dbf3ba8604325889af9522",
        "files": [
          "ext/misc/json1.c",
          "manifest",
          "manifest.uuid",
          "test/windowB.test"
        ],
        "message": "Fix the windows inverse function on the JSON aggregates.\n\nFossilOrigin-Name: f464d847af490dd3ec45565dcc4c2e6ff4ed1ebb65036f30ca0b3ce2e73080e6",
        "before_after_code_files": [
          "ext/misc/json1.c||ext/misc/json1.c",
          "manifest.uuid||manifest.uuid",
          "test/windowB.test||test/windowB.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/json1.c||ext/misc/json1.c": [
          "File: ext/misc/json1.c -> ext/misc/json1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1820:     if( pStr->zBuf==0 ){",
          "1821:       jsonInit(pStr, ctx);",
          "1822:       jsonAppendChar(pStr, '[');",
          "1824:       jsonAppendChar(pStr, ',');",
          "1825:       pStr->pCtx = ctx;",
          "1826:     }",
          "",
          "[Removed Lines]",
          "1823:     }else{",
          "",
          "[Added Lines]",
          "1823:     }else if( pStr->nUsed>1 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1870: ){",
          "1871:   int i;",
          "1872:   int inStr = 0;",
          "1873:   char *z;",
          "1874:   JsonString *pStr;",
          "1875:   UNUSED_PARAM(argc);",
          "1876:   UNUSED_PARAM(argv);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1873:   int nNest = 0;",
          "1875:   char c;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1881:   if( NEVER(!pStr) ) return;",
          "1882: #endif",
          "1883:   z = pStr->zBuf;",
          "1887:       inStr = !inStr;",
          "1889:       i++;",
          "1890:     }",
          "1891:   }",
          "1892:   pStr->nUsed -= i;",
          "",
          "[Removed Lines]",
          "1884:   for(i=1; z[i]!=',' || inStr; i++){",
          "1885:     assert( i<pStr->nUsed );",
          "1886:     if( z[i]=='\"' ){",
          "1888:     }else if( z[i]=='\\\\' ){",
          "",
          "[Added Lines]",
          "1886:   for(i=1; (c = z[i])!=',' || inStr || nNest; i++){",
          "1887:     if( i>=pStr->nUsed ){",
          "1888:       pStr->nUsed = 1;",
          "1889:       return;",
          "1890:     }",
          "1891:     if( c=='\"' ){",
          "1893:     }else if( c=='\\\\' ){",
          "1895:     }else if( !inStr ){",
          "1896:       if( c=='{' || c=='[' ) nNest++;",
          "1897:       if( c=='}' || c==']' ) nNest--;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1916:     if( pStr->zBuf==0 ){",
          "1917:       jsonInit(pStr, ctx);",
          "1918:       jsonAppendChar(pStr, '{');",
          "1920:       jsonAppendChar(pStr, ',');",
          "1921:       pStr->pCtx = ctx;",
          "1922:     }",
          "",
          "[Removed Lines]",
          "1919:     }else{",
          "",
          "[Added Lines]",
          "1927:     }else if( pStr->nUsed>1 ){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4a1978814da41608a16f6953bd575c97d587a34bd80b7ac0e619d62bfdc903d2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/windowB.test||test/windowB.test": [
          "File: test/windowB.test -> test/windowB.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "83: ifcapable json1 {",
          "84:   reset_db",
          "85:   do_execsql_test 3.0 {",
          "91:   }",
          "93:   do_execsql_test 3.1 {",
          "",
          "[Removed Lines]",
          "86:     CREATE TABLE testjson(id INTEGER PRIMARY KEY, j TEXT);",
          "87:     INSERT INTO testjson VALUES(1, '{\"a\":1}');",
          "88:     INSERT INTO testjson VALUES(2, '{\"b\":2}');",
          "89:     INSERT INTO testjson VALUES(3, '{\"c\":3}');",
          "90:     INSERT INTO testjson VALUES(4, '{\"d\":4}');",
          "",
          "[Added Lines]",
          "86:     CREATE TABLE testjson(id INTEGER PRIMARY KEY, j TEXT, x TEXT);",
          "87:     INSERT INTO testjson VALUES(1, '{\"a\":1}', 'a');",
          "88:     INSERT INTO testjson VALUES(2, '{\"b\":2}', 'b');",
          "89:     INSERT INTO testjson VALUES(3, '{\"c\":3}', 'c');",
          "90:     INSERT INTO testjson VALUES(4, '{\"d\":4}', 'd');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:   do_execsql_test 3.3 {",
          "109:     SELECT json_group_array(json(j)) OVER (",
          "111:     ) FROM testjson;",
          "112:   } {",
          "113:     {[{\"a\":1}]}",
          "",
          "[Removed Lines]",
          "110:       ORDER BY id RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW EXCLUDE TIES",
          "",
          "[Added Lines]",
          "110:       ORDER BY id RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW",
          "111:       EXCLUDE TIES",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "138:     {[{\"b\":2},{\"c\":3}]}",
          "139:   }",
          "144:     SELECT json_group_array(json(j)) OVER (",
          "145:       ORDER BY id ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING",
          "146:     ) FROM testjson;",
          "147:   } {",
          "148:     {[]}",
          "152:   }",
          "156:       ORDER BY id ROWS BETWEEN 2 PRECEDING AND 1 PRECEDING",
          "157:     ) FROM testjson;",
          "161:     SELECT json_group_array(json(j)) FILTER (WHERE id!=2) OVER (",
          "162:       ORDER BY id ROWS BETWEEN 2 PRECEDING AND 1 PRECEDING",
          "164:   } {",
          "165:     {[]}",
          "169:   }",
          "171:   }",
          "172: }",
          "",
          "[Removed Lines]",
          "141:   if 0 {",
          "143:   do_execsql_test 3.5 {",
          "149:     {[{\"a\":1}]}",
          "150:     {[{\"a\":1},{\"b\":2}]}",
          "151:     {[{\"b\":2},{\"c\":3}]}",
          "154:   explain_i {",
          "155:     SELECT json_group_array(json(j)) FILTER (WHERE id!=2) OVER (",
          "158:   }",
          "159:   do_execsql_test 3.7 {",
          "160:   PRAGMA vdbe_trace = 1;",
          "163:     ) FROM testjson;",
          "166:     {[{\"a\":1}]}",
          "167:     {[{\"a\":1}]}",
          "168:     {[{\"c\":3}]}",
          "",
          "[Added Lines]",
          "142:   do_execsql_test 3.5a {",
          "143:     UPDATE testjson SET j = replace(j,char(125),',\"e\":9'||char(125));",
          "144:     SELECT j FROM testjson;",
          "145:   } {",
          "146:     {{\"a\":1,\"e\":9}}",
          "147:     {{\"b\":2,\"e\":9}}",
          "148:     {{\"c\":3,\"e\":9}}",
          "149:     {{\"d\":4,\"e\":9}}",
          "150:   }",
          "151:   do_execsql_test 3.5b {",
          "152:     SELECT group_concat(x,'') OVER (",
          "153:       ORDER BY id ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING",
          "154:     ) FROM testjson ORDER BY id;",
          "155:   } {bc cd d {}}",
          "156:   do_execsql_test 3.5c {",
          "161:     {[{\"b\":2,\"e\":9},{\"c\":3,\"e\":9}]}",
          "162:     {[{\"c\":3,\"e\":9},{\"d\":4,\"e\":9}]}",
          "163:     {[{\"d\":4,\"e\":9}]}",
          "165:   }",
          "166:   do_execsql_test 3.5d {",
          "167:     SELECT json_group_object(x,json(j)) OVER (",
          "168:       ORDER BY id ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING",
          "169:     ) FROM testjson;",
          "170:   } {",
          "171:     {{\"b\":{\"b\":2,\"e\":9},\"c\":{\"c\":3,\"e\":9}}}",
          "172:     {{\"c\":{\"c\":3,\"e\":9},\"d\":{\"d\":4,\"e\":9}}}",
          "173:     {{\"d\":{\"d\":4,\"e\":9}}}",
          "174:     {{}}",
          "177:   do_execsql_test 3.7b {",
          "178:     SELECT group_concat(x,'') FILTER (WHERE id!=2) OVER (",
          "181:   } {{} a a c}",
          "183:   do_execsql_test 3.7c {",
          "186:     ) FROM testjson",
          "189:     {[{\"a\":1,\"e\":9}]}",
          "190:     {[{\"a\":1,\"e\":9}]}",
          "191:     {[{\"c\":3,\"e\":9}]}",
          "193:   do_execsql_test 3.7d {",
          "194:     SELECT json_group_object(x,json(j)) FILTER (WHERE id!=2) OVER (",
          "195:       ORDER BY id ROWS BETWEEN 2 PRECEDING AND 1 PRECEDING",
          "196:     ) FROM testjson",
          "197:   } {",
          "198:     {{}}",
          "199:     {{\"a\":{\"a\":1,\"e\":9}}}",
          "200:     {{\"a\":{\"a\":1,\"e\":9}}}",
          "201:     {{\"c\":{\"c\":3,\"e\":9}}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}