{
  "cve_id": "CVE-2018-9274",
  "cve_desc": "In Wireshark 2.4.0 to 2.4.5 and 2.2.0 to 2.2.13, ui/failure_message.c has a memory leak.",
  "repo": "wireshark/wireshark",
  "patch_hash": "b94d3af3039b8bdfbd4d760fda412fdfa121b732",
  "patch_info": {
    "commit_hash": "b94d3af3039b8bdfbd4d760fda412fdfa121b732",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/b94d3af3039b8bdfbd4d760fda412fdfa121b732",
    "files": [
      "ui/failure_message.c"
    ],
    "message": "failure_message.c: fix a memory leak if err is not negative\n\nBug: 14489\nChange-Id: I958cfae824c50263913ba9df8128e34e9466cb67\nReviewed-on: https://code.wireshark.org/review/26294\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: ronnie sahlberg <ronniesahlberg@gmail.com>\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
    "before_after_code_files": [
      "ui/failure_message.c||ui/failure_message.c"
    ]
  },
  "patch_diff": {
    "ui/failure_message.c||ui/failure_message.c": [
      "File: ui/failure_message.c -> ui/failure_message.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "60: cfile_open_failure_message(const char *progname, const char *filename,",
      "61:                            int err, gchar *err_info)",
      "62: {",
      "68:     if (err < 0) {",
      "70:         switch (err) {",
      "",
      "[Removed Lines]",
      "63:     char *file_description;",
      "66:     file_description = input_file_description(filename);",
      "",
      "[Added Lines]",
      "65:         char *file_description = input_file_description(filename);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "211845aba4794720ae265c782cdffddae54a3e7a",
      "candidate_info": {
        "commit_hash": "211845aba4794720ae265c782cdffddae54a3e7a",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/211845aba4794720ae265c782cdffddae54a3e7a",
        "files": [
          "ui/failure_message.c"
        ],
        "message": "failure_message.c: fix a memory leak if err is not negative\n\nBug: 14489\nChange-Id: I958cfae824c50263913ba9df8128e34e9466cb67\nReviewed-on: https://code.wireshark.org/review/26294\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: ronnie sahlberg <ronniesahlberg@gmail.com>\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit b94d3af3039b8bdfbd4d760fda412fdfa121b732)\nReviewed-on: https://code.wireshark.org/review/26319",
        "before_after_code_files": [
          "ui/failure_message.c||ui/failure_message.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ui/failure_message.c||ui/failure_message.c"
          ],
          "candidate": [
            "ui/failure_message.c||ui/failure_message.c"
          ]
        }
      },
      "candidate_diff": {
        "ui/failure_message.c||ui/failure_message.c": [
          "File: ui/failure_message.c -> ui/failure_message.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: cfile_open_failure_message(const char *progname, const char *filename,",
          "74:                            int err, gchar *err_info)",
          "75: {",
          "81:     if (err < 0) {",
          "83:         switch (err) {",
          "",
          "[Removed Lines]",
          "76:     char *file_description;",
          "79:     file_description = input_file_description(filename);",
          "",
          "[Added Lines]",
          "78:         char *file_description = input_file_description(filename);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "347a19ae9629ad06ab597a176672c9098c9af64a",
      "candidate_info": {
        "commit_hash": "347a19ae9629ad06ab597a176672c9098c9af64a",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/347a19ae9629ad06ab597a176672c9098c9af64a",
        "files": [
          "Makefile.am",
          "editcap.c",
          "rawshark.c",
          "sharkd.c",
          "tshark.c",
          "ui/CMakeLists.txt",
          "ui/Makefile.am",
          "ui/failure_message.c",
          "ui/failure_message.h"
        ],
        "message": "Add common routines for command-line libwiretap error reporting.\n\nThese are similar to the routines added to ui/alert_box.c for dialog-box\nlibwiretap error reporting.\n\nThis centralizes the knowledge about what to say for various libwiretap\nerrors, removing some duplicate code, and giving more details in some\nprograms.\n\nChange-Id: I737405c4edaa0e6c27840f78a8c587a8b3ee120b\nReviewed-on: https://code.wireshark.org/review/21234\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "editcap.c||editcap.c",
          "rawshark.c||rawshark.c",
          "sharkd.c||sharkd.c",
          "tshark.c||tshark.c",
          "ui/Makefile.am||ui/Makefile.am",
          "ui/failure_message.c||ui/failure_message.c",
          "ui/failure_message.h||ui/failure_message.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ui/failure_message.c||ui/failure_message.c"
          ],
          "candidate": [
            "ui/failure_message.c||ui/failure_message.c"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "668: # Libraries with which to link editcap.",
          "669: editcap_LDADD = \\",
          "670:  wiretap/libwiretap.la  \\",
          "671:  wsutil/libwsutil.la  \\",
          "672:  @GLIB_LIBS@   \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "670:  ui/libui.a   \\",
          "",
          "---------------"
        ],
        "editcap.c||editcap.c": [
          "File: editcap.c -> editcap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "92: #include <wiretap/wtap_opttypes.h>",
          "93: #include <wiretap/pcapng.h>",
          "97: #define INVALID_OPTION 1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95: #include \"ui/failure_message.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1349:     wth = wtap_open_offline(argv[optind], WTAP_TYPE_AUTO, &read_err, &read_err_info, FALSE);",
          "1351:     if (!wth) {",
          "1358:         ret = INVALID_FILE;",
          "1359:         goto clean_exit;",
          "1360:     }",
          "",
          "[Removed Lines]",
          "1352:         fprintf(stderr, \"editcap: Can't open %s: %s\\n\", argv[optind],",
          "1353:                 wtap_strerror(read_err));",
          "1354:         if (read_err_info != NULL) {",
          "1355:             fprintf(stderr, \"(%s)\\n\", read_err_info);",
          "1356:             g_free(read_err_info);",
          "1357:         }",
          "",
          "[Added Lines]",
          "1354:         cfile_open_failure_message(\"editap\", argv[optind], read_err,",
          "1355:                                    read_err_info, FALSE, WTAP_TYPE_AUTO);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1779:                 if (!wtap_dump(pdh, phdr, buf, &write_err, &write_err_info)) {",
          "1840:                     ret = DUMP_ERROR;",
          "1841:                     goto clean_exit;",
          "1842:                 }",
          "",
          "[Removed Lines]",
          "1780:                     switch (write_err) {",
          "1781:                     case WTAP_ERR_UNWRITABLE_ENCAP:",
          "1788:                         fprintf(stderr,",
          "1789:                                 \"editcap: Frame %u of \\\"%s\\\" has a network type that can't be saved in a \\\"%s\\\" file.\\n\",",
          "1790:                                 read_count, argv[optind],",
          "1791:                                 wtap_file_type_subtype_string(out_file_type_subtype));",
          "1792:                         break;",
          "1794:                     case WTAP_ERR_PACKET_TOO_LARGE:",
          "1801:                         fprintf(stderr,",
          "1802:                                 \"editcap: Frame %u of \\\"%s\\\" is too large for a \\\"%s\\\" file.\\n\",",
          "1803:                                 read_count, argv[optind],",
          "1804:                                 wtap_file_type_subtype_string(out_file_type_subtype));",
          "1805:                         break;",
          "1807:                     case WTAP_ERR_UNWRITABLE_REC_TYPE:",
          "1814:                         fprintf(stderr,",
          "1815:                                 \"editcap: Record %u of \\\"%s\\\" has a record type that can't be saved in a \\\"%s\\\" file.\\n\",",
          "1816:                                 read_count, argv[optind],",
          "1817:                                 wtap_file_type_subtype_string(out_file_type_subtype));",
          "1818:                         break;",
          "1820:                     case WTAP_ERR_UNWRITABLE_REC_DATA:",
          "1827:                         fprintf(stderr,",
          "1828:                                 \"editcap: Record %u of \\\"%s\\\" has data that can't be saved in a \\\"%s\\\" file.\\n(%s)\\n\",",
          "1829:                                 read_count, argv[optind],",
          "1830:                                 wtap_file_type_subtype_string(out_file_type_subtype),",
          "1831:                                 write_err_info != NULL ? write_err_info : \"no information supplied\");",
          "1832:                         g_free(write_err_info);",
          "1833:                         break;",
          "1835:                     default:",
          "1836:                         fprintf(stderr, \"editcap: Error writing to %s: %s\\n\",",
          "1837:                                 filename, wtap_strerror(write_err));",
          "1838:                         break;",
          "1839:                     }",
          "",
          "[Added Lines]",
          "1778:                     cfile_write_failure_message(argv[optind], filename,",
          "1779:                                                 write_err, write_err_info,",
          "1780:                                                 read_count,",
          "1781:                                                 out_file_type_subtype);",
          "",
          "---------------"
        ],
        "rawshark.c||rawshark.c": [
          "File: rawshark.c -> rawshark.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "82: #endif",
          "83: #include \"ui/util.h\"",
          "84: #include \"ui/dissect_opts.h\"",
          "85: #include \"register.h\"",
          "86: #include \"conditions.h\"",
          "87: #include \"capture_stop_conditions.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85: #include \"ui/failure_message.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "983:     g_free(pd);",
          "984:     if (err != 0) {",
          "1019:         return FALSE;",
          "1020:     }",
          "",
          "[Removed Lines]",
          "986:         switch (err) {",
          "988:             case WTAP_ERR_UNSUPPORTED:",
          "989:                 cmdarg_err(\"The file \\\"%s\\\" contains record data that Rawshark doesn't support.\\n(%s)\",",
          "990:                            cf->filename,",
          "991:                            err_info != NULL ? err_info : \"no information supplied\");",
          "992:                 g_free(err_info);",
          "993:                 break;",
          "995:             case WTAP_ERR_SHORT_READ:",
          "996:                 cmdarg_err(\"The file \\\"%s\\\" appears to have been cut short in the middle of a packet.\",",
          "997:                            cf->filename);",
          "998:                 break;",
          "1000:             case WTAP_ERR_BAD_FILE:",
          "1001:                 cmdarg_err(\"The file \\\"%s\\\" appears to be damaged or corrupt.\\n(%s)\",",
          "1002:                            cf->filename,",
          "1003:                            err_info != NULL ? err_info : \"no information supplied\");",
          "1004:                 g_free(err_info);",
          "1005:                 break;",
          "1007:             case WTAP_ERR_DECOMPRESS:",
          "1008:                 cmdarg_err(\"The compressed file \\\"%s\\\" appears to be damaged or corrupt.\\n(%s)\",",
          "1009:                            cf->filename,",
          "1010:                            err_info != NULL ? err_info : \"no information supplied\");",
          "1011:                 g_free(err_info);",
          "1012:                 break;",
          "1014:             default:",
          "1015:                 cmdarg_err(\"An error occurred while reading the file \\\"%s\\\": %s.\",",
          "1016:                            cf->filename, wtap_strerror(err));",
          "1017:                 break;",
          "1018:         }",
          "",
          "[Added Lines]",
          "987:         cfile_read_failure_message(\"Rawshark\", cf->filename, err, err_info);",
          "",
          "---------------"
        ],
        "sharkd.c||sharkd.c": [
          "File: sharkd.c -> sharkd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: #include \"ui/decode_as_utils.h\"",
          "62: #include \"ui/filter_files.h\"",
          "63: #include \"ui/tap_export_pdu.h\"",
          "64: #include \"register.h\"",
          "65: #include <epan/epan_dissect.h>",
          "66: #include <epan/tap.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64: #include \"ui/failure_message.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87: static frame_data *prev_dis;",
          "88: static frame_data *prev_cap;",
          "93: static void failure_warning_message(const char *msg_format, va_list ap);",
          "94: static void open_failure_message(const char *filename, int err,",
          "95:     gboolean for_writing);",
          "",
          "[Removed Lines]",
          "90: static const char *cf_open_error_message(int err, gchar *err_info,",
          "91:     gboolean for_writing, int file_type);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "425:   }",
          "427:   if (err != 0) {",
          "461:   }",
          "463:   return err;",
          "",
          "[Removed Lines]",
          "428:     switch (err) {",
          "430:     case WTAP_ERR_UNSUPPORTED:",
          "431:       cmdarg_err(\"The file \\\"%s\\\" contains record data that sharkd doesn't support.\\n(%s)\",",
          "432:                  cf->filename,",
          "433:                  err_info != NULL ? err_info : \"no information supplied\");",
          "434:       g_free(err_info);",
          "435:       break;",
          "437:     case WTAP_ERR_SHORT_READ:",
          "438:       cmdarg_err(\"The file \\\"%s\\\" appears to have been cut short in the middle of a packet.\",",
          "439:                  cf->filename);",
          "440:       break;",
          "442:     case WTAP_ERR_BAD_FILE:",
          "443:       cmdarg_err(\"The file \\\"%s\\\" appears to be damaged or corrupt.\\n(%s)\",",
          "444:                  cf->filename,",
          "445:                  err_info != NULL ? err_info : \"no information supplied\");",
          "446:       g_free(err_info);",
          "447:       break;",
          "449:     case WTAP_ERR_DECOMPRESS:",
          "450:       cmdarg_err(\"The compressed file \\\"%s\\\" appears to be damaged or corrupt.\\n\"",
          "451:                  \"(%s)\", cf->filename,",
          "452:                  err_info != NULL ? err_info : \"no information supplied\");",
          "453:       g_free(err_info);",
          "454:       break;",
          "456:     default:",
          "457:       cmdarg_err(\"An error occurred while reading the file \\\"%s\\\": %s.\",",
          "458:                  cf->filename, wtap_strerror(err));",
          "459:       break;",
          "460:     }",
          "",
          "[Added Lines]",
          "426:     cfile_read_failure_message(\"sharkd\", cf->filename, err, err_info);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "468: {",
          "469:   wtap  *wth;",
          "470:   gchar *err_info;",
          "473:   wth = wtap_open_offline(fname, type, err, &err_info, TRUE);",
          "474:   if (wth == NULL)",
          "",
          "[Removed Lines]",
          "471:   char   err_msg[2048+1];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "519:   return CF_OK;",
          "521: fail:",
          "525:   return CF_ERROR;",
          "526: }",
          "",
          "[Removed Lines]",
          "522:   g_snprintf(err_msg, sizeof err_msg,",
          "523:              cf_open_error_message(*err, err_info, FALSE, cf->cd_t), fname);",
          "524:   cmdarg_err(\"%s\", err_msg);",
          "528: static const char *",
          "529: cf_open_error_message(int err, gchar *err_info, gboolean for_writing,",
          "530:                       int file_type)",
          "531: {",
          "532:   const char *errmsg;",
          "533:   static char errmsg_errno[1024+1];",
          "535:   if (err < 0) {",
          "537:     switch (err) {",
          "539:     case WTAP_ERR_NOT_REGULAR_FILE:",
          "540:       errmsg = \"The file \\\"%s\\\" is a \\\"special file\\\" or socket or other non-regular file.\";",
          "541:       break;",
          "543:     case WTAP_ERR_RANDOM_OPEN_PIPE:",
          "545:       errmsg = \"The file \\\"%s\\\" is a pipe or FIFO; sharkd can't read pipe or FIFO files in two-pass mode.\";",
          "546:       break;",
          "548:     case WTAP_ERR_FILE_UNKNOWN_FORMAT:",
          "550:       errmsg = \"The file \\\"%s\\\" isn't a capture file in a format sharkd understands.\";",
          "551:       break;",
          "553:     case WTAP_ERR_UNSUPPORTED:",
          "555:       g_snprintf(errmsg_errno, sizeof(errmsg_errno),",
          "556:                  \"The file \\\"%%s\\\" contains record data that sharkd doesn't support.\\n\"",
          "557:                  \"(%s)\",",
          "558:                  err_info != NULL ? err_info : \"no information supplied\");",
          "559:       g_free(err_info);",
          "560:       errmsg = errmsg_errno;",
          "561:       break;",
          "563:     case WTAP_ERR_CANT_WRITE_TO_PIPE:",
          "565:       g_snprintf(errmsg_errno, sizeof(errmsg_errno),",
          "566:                  \"The file \\\"%%s\\\" is a pipe, and \\\"%s\\\" capture files can't be \"",
          "567:                  \"written to a pipe.\", wtap_file_type_subtype_short_string(file_type));",
          "568:       errmsg = errmsg_errno;",
          "569:       break;",
          "571:     case WTAP_ERR_UNWRITABLE_FILE_TYPE:",
          "573:       errmsg = \"sharkd doesn't support writing capture files in that format.\";",
          "574:       break;",
          "576:     case WTAP_ERR_UNWRITABLE_ENCAP:",
          "578:       g_snprintf(errmsg_errno, sizeof(errmsg_errno),",
          "579:                  \"sharkd can't save this capture as a \\\"%s\\\" file.\",",
          "580:                  wtap_file_type_subtype_short_string(file_type));",
          "581:       errmsg = errmsg_errno;",
          "582:       break;",
          "584:     case WTAP_ERR_ENCAP_PER_PACKET_UNSUPPORTED:",
          "585:       if (for_writing) {",
          "586:         g_snprintf(errmsg_errno, sizeof(errmsg_errno),",
          "587:                    \"sharkd can't save this capture as a \\\"%s\\\" file.\",",
          "588:                    wtap_file_type_subtype_short_string(file_type));",
          "589:         errmsg = errmsg_errno;",
          "590:       } else",
          "591:         errmsg = \"The file \\\"%s\\\" is a capture for a network type that sharkd doesn't support.\";",
          "592:       break;",
          "594:     case WTAP_ERR_BAD_FILE:",
          "596:       g_snprintf(errmsg_errno, sizeof(errmsg_errno),",
          "597:                  \"The file \\\"%%s\\\" appears to be damaged or corrupt.\\n\"",
          "598:                  \"(%s)\",",
          "599:                  err_info != NULL ? err_info : \"no information supplied\");",
          "600:       g_free(err_info);",
          "601:       errmsg = errmsg_errno;",
          "602:       break;",
          "604:     case WTAP_ERR_CANT_OPEN:",
          "605:       if (for_writing)",
          "606:         errmsg = \"The file \\\"%s\\\" could not be created for some unknown reason.\";",
          "607:       else",
          "608:         errmsg = \"The file \\\"%s\\\" could not be opened for some unknown reason.\";",
          "609:       break;",
          "611:     case WTAP_ERR_SHORT_READ:",
          "612:       errmsg = \"The file \\\"%s\\\" appears to have been cut short\"",
          "613:                \" in the middle of a packet or other data.\";",
          "614:       break;",
          "616:     case WTAP_ERR_SHORT_WRITE:",
          "617:       errmsg = \"A full header couldn't be written to the file \\\"%s\\\".\";",
          "618:       break;",
          "620:     case WTAP_ERR_COMPRESSION_NOT_SUPPORTED:",
          "621:       errmsg = \"This file type cannot be written as a compressed file.\";",
          "622:       break;",
          "624:     case WTAP_ERR_DECOMPRESS:",
          "626:       g_snprintf(errmsg_errno, sizeof(errmsg_errno),",
          "627:                  \"The compressed file \\\"%%s\\\" appears to be damaged or corrupt.\\n\"",
          "628:                  \"(%s)\",",
          "629:                  err_info != NULL ? err_info : \"no information supplied\");",
          "630:       g_free(err_info);",
          "631:       errmsg = errmsg_errno;",
          "632:       break;",
          "634:     default:",
          "635:       g_snprintf(errmsg_errno, sizeof(errmsg_errno),",
          "636:                  \"The file \\\"%%s\\\" could not be %s: %s.\",",
          "637:                  for_writing ? \"created\" : \"opened\",",
          "638:                  wtap_strerror(err));",
          "639:       errmsg = errmsg_errno;",
          "640:       break;",
          "641:     }",
          "642:   } else",
          "643:     errmsg = file_open_error_message(err, for_writing);",
          "644:   return errmsg;",
          "645: }",
          "",
          "[Added Lines]",
          "487:   cfile_open_failure_message(\"sharkd\", fname, *err, err_info, FALSE, cf->cd_t);",
          "",
          "---------------"
        ],
        "tshark.c||tshark.c": [
          "File: tshark.c -> tshark.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "89: #include \"ui/cli/tap-exportobject.h\"",
          "90: #include \"ui/tap_export_pdu.h\"",
          "91: #include \"ui/dissect_opts.h\"",
          "92: #if defined(HAVE_LIBSMI)",
          "93: #include \"epan/oids.h\"",
          "94: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92: #include \"ui/failure_message.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "231: static gboolean process_packet_single_pass(capture_file *cf,",
          "232:     epan_dissect_t *edt, gint64 offset, struct wtap_pkthdr *whdr,",
          "233:     const guchar *pd, guint tap_flags);",
          "235: static void show_print_file_io_error(int err);",
          "236: static gboolean write_preamble(capture_file *cf);",
          "237: static gboolean print_packet(capture_file *cf, epan_dissect_t *edt);",
          "238: static gboolean write_finale(void);",
          "240: static void failure_warning_message(const char *msg_format, va_list ap);",
          "243: static void open_failure_message(const char *filename, int err,",
          "244:     gboolean for_writing);",
          "245: static void read_failure_message(const char *filename, int err);",
          "",
          "[Removed Lines]",
          "234: static void show_capture_file_io_error(const char *, int, gboolean);",
          "241: static void cfile_open_failure_message(const char *filename, int err,",
          "242:      gchar *err_info, gboolean for_writing, int file_type);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "503: }",
          "521: static void",
          "522: print_current_user(void) {",
          "523:   gchar *cur_user, *cur_group;",
          "",
          "[Removed Lines]",
          "505: static char *",
          "506: output_file_description(const char *fname)",
          "507: {",
          "508:   char *save_file_string;",
          "511:   if (strcmp(fname, \"-\") == 0) {",
          "513:     save_file_string = g_strdup(\"standard output\");",
          "514:   } else {",
          "516:     save_file_string = g_strdup_printf(\"file \\\"%s\\\"\", fname);",
          "517:   }",
          "518:   return save_file_string;",
          "519: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1928:       comment = g_strdup_printf(\"Dump of PDUs from %s\", cf_name);",
          "1929:       err = exp_pdu_open(&exp_pdu_tap_data, exp_fd, comment);",
          "1930:       if (err != 0) {",
          "1933:           g_free(comment);",
          "1934:           exit_status = INVALID_EXPORT;",
          "1935:           goto clean_exit;",
          "",
          "[Removed Lines]",
          "1931:           cfile_open_failure_message(exp_pdu_filename, err, NULL, TRUE,",
          "1932:                                      WTAP_FILE_TYPE_SUBTYPE_PCAPNG);",
          "",
          "[Added Lines]",
          "1913:           cfile_open_failure_message(\"TShark\", exp_pdu_filename, err, NULL,",
          "1914:                                      TRUE, WTAP_FILE_TYPE_SUBTYPE_PCAPNG);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3040:     if (pdh == NULL) {",
          "3043:       goto out;",
          "3044:     }",
          "3045:   } else {",
          "",
          "[Removed Lines]",
          "3042:       cfile_open_failure_message(save_file, err, NULL, TRUE, out_file_type);",
          "",
          "[Added Lines]",
          "3024:       cfile_open_failure_message(\"TShark\", save_file, err, NULL, TRUE,",
          "3025:                                  out_file_type);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3173:             if (!wtap_dump(pdh, &phdr, ws_buffer_start_ptr(&buf), &err, &err_info)) {",
          "3175:               tshark_debug(\"tshark: error writing to a capture file (%d)\", err);",
          "3244:               wtap_dump_close(pdh, &err);",
          "3245:               wtap_block_array_free(shb_hdrs);",
          "3246:               wtap_block_array_free(nrb_hdrs);",
          "",
          "[Removed Lines]",
          "3176:               switch (err) {",
          "3178:               case WTAP_ERR_UNWRITABLE_ENCAP:",
          "3187:                 fprintf(stderr,",
          "3188:                         \"Frame %u of \\\"%s\\\" has a network type that can't be saved in a \\\"%s\\\" file.\\n\",",
          "3189:                         framenum, cf->filename,",
          "3190:                         wtap_file_type_subtype_short_string(out_file_type));",
          "3191:                 break;",
          "3193:               case WTAP_ERR_PACKET_TOO_LARGE:",
          "3202:                 fprintf(stderr,",
          "3203:                         \"Frame %u of \\\"%s\\\" is too large for a \\\"%s\\\" file.\\n\",",
          "3204:                         framenum, cf->filename,",
          "3205:                         wtap_file_type_subtype_short_string(out_file_type));",
          "3206:                 break;",
          "3208:               case WTAP_ERR_UNWRITABLE_REC_TYPE:",
          "3217:                 fprintf(stderr,",
          "3218:                         \"Record %u of \\\"%s\\\" has a record type that can't be saved in a \\\"%s\\\" file.\\n\",",
          "3219:                         framenum, cf->filename,",
          "3220:                         wtap_file_type_subtype_short_string(out_file_type));",
          "3221:                 break;",
          "3223:               case WTAP_ERR_UNWRITABLE_REC_DATA:",
          "3232:                 fprintf(stderr,",
          "3233:                         \"Record %u of \\\"%s\\\" has data that can't be saved in a \\\"%s\\\" file.\\n(%s)\\n\",",
          "3234:                         framenum, cf->filename,",
          "3235:                         wtap_file_type_subtype_short_string(out_file_type),",
          "3236:                         err_info != NULL ? err_info : \"no information supplied\");",
          "3237:                 g_free(err_info);",
          "3238:                 break;",
          "3240:               default:",
          "3241:                 show_capture_file_io_error(save_file, err, FALSE);",
          "3242:                 break;",
          "3243:               }",
          "",
          "[Added Lines]",
          "3161:                  XXX - framenum is not necessarily the frame number in",
          "3163:               cfile_write_failure_message(cf->filename, save_file, err,",
          "3164:                                           err_info, framenum, out_file_type);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3318:           if (!wtap_dump(pdh, wtap_phdr(cf->wth), wtap_buf_ptr(cf->wth), &err, &err_info)) {",
          "3320:             tshark_debug(\"tshark: error writing to a capture file (%d)\", err);",
          "3377:             wtap_dump_close(pdh, &err);",
          "3378:             wtap_block_array_free(shb_hdrs);",
          "3379:             wtap_block_array_free(nrb_hdrs);",
          "",
          "[Removed Lines]",
          "3321:             switch (err) {",
          "3323:             case WTAP_ERR_UNWRITABLE_ENCAP:",
          "3329:               fprintf(stderr,",
          "3330:                       \"Frame %u of \\\"%s\\\" has a network type that can't be saved in a \\\"%s\\\" file.\\n\",",
          "3331:                       framenum, cf->filename,",
          "3332:                       wtap_file_type_subtype_short_string(out_file_type));",
          "3333:               break;",
          "3335:             case WTAP_ERR_PACKET_TOO_LARGE:",
          "3341:               fprintf(stderr,",
          "3342:                       \"Frame %u of \\\"%s\\\" is too large for a \\\"%s\\\" file.\\n\",",
          "3343:                       framenum, cf->filename,",
          "3344:                       wtap_file_type_subtype_short_string(out_file_type));",
          "3345:               break;",
          "3347:             case WTAP_ERR_UNWRITABLE_REC_TYPE:",
          "3353:               fprintf(stderr,",
          "3354:                       \"Record %u of \\\"%s\\\" has a record type that can't be saved in a \\\"%s\\\" file.\\n\",",
          "3355:                       framenum, cf->filename,",
          "3356:                       wtap_file_type_subtype_short_string(out_file_type));",
          "3357:               break;",
          "3359:             case WTAP_ERR_UNWRITABLE_REC_DATA:",
          "3365:               fprintf(stderr,",
          "3366:                       \"Record %u of \\\"%s\\\" has data that can't be saved in a \\\"%s\\\" file.\\n(%s)\\n\",",
          "3367:                       framenum, cf->filename,",
          "3368:                       wtap_file_type_subtype_short_string(out_file_type),",
          "3369:                       err_info != NULL ? err_info : \"no information supplied\");",
          "3370:               g_free(err_info);",
          "3371:               break;",
          "3373:             default:",
          "3374:               show_capture_file_io_error(save_file, err, FALSE);",
          "3375:               break;",
          "3376:             }",
          "",
          "[Added Lines]",
          "3242:             cfile_write_failure_message(cf->filename, save_file, err, err_info,",
          "3243:                                         framenum, out_file_type);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3428:       }",
          "3429:     }",
          "3430: #endif",
          "3464:     if (save_file != NULL) {",
          "3466:       if (!wtap_dump_close(pdh, &err))",
          "3468:     }",
          "3469:   } else {",
          "3470:     if (save_file != NULL) {",
          "",
          "[Removed Lines]",
          "3431:     switch (err) {",
          "3433:     case WTAP_ERR_UNSUPPORTED:",
          "3434:       cmdarg_err(\"The file \\\"%s\\\" contains record data that TShark doesn't support.\\n(%s)\",",
          "3435:                  cf->filename,",
          "3436:                  err_info != NULL ? err_info : \"no information supplied\");",
          "3437:       g_free(err_info);",
          "3438:       break;",
          "3440:     case WTAP_ERR_SHORT_READ:",
          "3441:       cmdarg_err(\"The file \\\"%s\\\" appears to have been cut short in the middle of a packet.\",",
          "3442:                  cf->filename);",
          "3443:       break;",
          "3445:     case WTAP_ERR_BAD_FILE:",
          "3446:       cmdarg_err(\"The file \\\"%s\\\" appears to be damaged or corrupt.\\n(%s)\",",
          "3447:                  cf->filename,",
          "3448:                  err_info != NULL ? err_info : \"no information supplied\");",
          "3449:       g_free(err_info);",
          "3450:       break;",
          "3452:     case WTAP_ERR_DECOMPRESS:",
          "3453:       cmdarg_err(\"The compressed file \\\"%s\\\" appears to be damaged or corrupt.\\n\"",
          "3454:                  \"(%s)\", cf->filename,",
          "3455:                  err_info != NULL ? err_info : \"no information supplied\");",
          "3456:       g_free(err_info);",
          "3457:       break;",
          "3459:     default:",
          "3460:       cmdarg_err(\"An error occurred while reading the file \\\"%s\\\": %s.\",",
          "3461:                  cf->filename, wtap_strerror(err));",
          "3462:       break;",
          "3463:     }",
          "3467:         show_capture_file_io_error(save_file, err, TRUE);",
          "",
          "[Added Lines]",
          "3298:     cfile_read_failure_message(\"TShark\", cf->filename, err, err_info);",
          "3302:         cfile_close_failure_message(save_file, err);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3476:       }",
          "3478:       if (!wtap_dump_close(pdh, &err))",
          "3480:     } else {",
          "3481:       if (print_packet_info) {",
          "3482:         if (!write_finale()) {",
          "",
          "[Removed Lines]",
          "3479:         show_capture_file_io_error(save_file, err, TRUE);",
          "",
          "[Added Lines]",
          "3314:         cfile_close_failure_message(save_file, err);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4103:   return CF_OK;",
          "4105: fail:",
          "4107:   return CF_ERROR;",
          "4108: }",
          "4156: static void",
          "4157: show_print_file_io_error(int err)",
          "4158: {",
          "",
          "[Removed Lines]",
          "4106:   cfile_open_failure_message(fname, *err, err_info, FALSE, cf->cd_t);",
          "4110: static void",
          "4111: show_capture_file_io_error(const char *fname, int err, gboolean is_close)",
          "4112: {",
          "4113:   char *save_file_string;",
          "4115:   save_file_string = output_file_description(fname);",
          "4117:   switch (err) {",
          "4119:   case ENOSPC:",
          "4120:     cmdarg_err(\"Not all the packets could be written to the %s because there is \"",
          "4121:                \"no space left on the file system.\",",
          "4122:                save_file_string);",
          "4123:     break;",
          "4125: #ifdef EDQUOT",
          "4126:   case EDQUOT:",
          "4127:     cmdarg_err(\"Not all the packets could be written to the %s because you are \"",
          "4128:                \"too close to, or over your disk quota.\",",
          "4129:                save_file_string);",
          "4130:   break;",
          "4131: #endif",
          "4133:   case WTAP_ERR_CANT_CLOSE:",
          "4134:     cmdarg_err(\"The %s couldn't be closed for some unknown reason.\",",
          "4135:                save_file_string);",
          "4136:     break;",
          "4138:   case WTAP_ERR_SHORT_WRITE:",
          "4139:     cmdarg_err(\"Not all the packets could be written to the %s.\",",
          "4140:                save_file_string);",
          "4141:     break;",
          "4143:   default:",
          "4144:     if (is_close) {",
          "4145:       cmdarg_err(\"The %s could not be closed: %s.\", save_file_string,",
          "4146:                  wtap_strerror(err));",
          "4147:     } else {",
          "4148:       cmdarg_err(\"An error occurred while writing to the %s: %s.\",",
          "4149:                  save_file_string, wtap_strerror(err));",
          "4150:     }",
          "4151:     break;",
          "4152:   }",
          "4153:   g_free(save_file_string);",
          "4154: }",
          "",
          "[Added Lines]",
          "3941:   cfile_open_failure_message(\"TShark\", fname, *err, err_info, FALSE, cf->cd_t);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4321: static void",
          "4322: open_failure_message(const char *filename, int err, gboolean for_writing)",
          "4323: {",
          "",
          "[Removed Lines]",
          "4195: static void",
          "4196: cfile_open_failure_message(const char *filename, int err, gchar *err_info,",
          "4197:                            gboolean for_writing, int file_type)",
          "4198: {",
          "4199:   char *file_description;",
          "4202:   if (strcmp(filename, \"-\") == 0) {",
          "4204:     file_description = g_strdup(for_writing ? \"standard output\" : \"standard input\");",
          "4205:   } else {",
          "4207:     file_description = g_strdup_printf(\"file \\\"%s\\\"\", filename);",
          "4208:   }",
          "4209:   if (err < 0) {",
          "4211:     switch (err) {",
          "4213:     case WTAP_ERR_NOT_REGULAR_FILE:",
          "4214:       cmdarg_err(\"The %s is a \\\"special file\\\" or socket or other non-regular file.\",",
          "4215:                  file_description);",
          "4216:       break;",
          "4218:     case WTAP_ERR_RANDOM_OPEN_PIPE:",
          "4220:       cmdarg_err(\"The %s is a pipe or FIFO; TShark can't read pipe or FIFO files in two-pass mode.\",",
          "4221:                  file_description);",
          "4222:       break;",
          "4224:     case WTAP_ERR_FILE_UNKNOWN_FORMAT:",
          "4226:       cmdarg_err(\"The %s isn't a capture file in a format TShark understands.\",",
          "4227:                  file_description);",
          "4228:       break;",
          "4230:     case WTAP_ERR_UNSUPPORTED:",
          "4232:       cmdarg_err(\"The %s contains record data that TShark doesn't support.\\n\"",
          "4233:                  \"(%s)\",",
          "4234:                  file_description,",
          "4235:                  err_info != NULL ? err_info : \"no information supplied\");",
          "4236:       g_free(err_info);",
          "4237:       break;",
          "4239:     case WTAP_ERR_CANT_WRITE_TO_PIPE:",
          "4241:       cmdarg_err(\"The %s is a pipe, and \\\"%s\\\" capture files can't be written to a pipe.\",",
          "4242:                  file_description,",
          "4243:                  wtap_file_type_subtype_short_string(file_type));",
          "4244:       break;",
          "4246:     case WTAP_ERR_UNWRITABLE_FILE_TYPE:",
          "4248:       cmdarg_err(\"TShark doesn't support writing capture files in that format.\");",
          "4249:       break;",
          "4251:     case WTAP_ERR_UNWRITABLE_ENCAP:",
          "4253:       cmdarg_err(\"The capture file being read can't be written as a \\\"%s\\\" file.\",",
          "4254:                  wtap_file_type_subtype_short_string(file_type));",
          "4255:       break;",
          "4257:     case WTAP_ERR_ENCAP_PER_PACKET_UNSUPPORTED:",
          "4258:       if (for_writing) {",
          "4259:         cmdarg_err(\"The capture file being read can't be written as a \\\"%s\\\" file.\",",
          "4260:                    wtap_file_type_subtype_short_string(file_type));",
          "4261:       } else {",
          "4262:         cmdarg_err(\"The %s is a capture for a network type that TShark doesn't support.\",",
          "4263:                    file_description);",
          "4264:       }",
          "4265:       break;",
          "4267:     case WTAP_ERR_BAD_FILE:",
          "4269:       cmdarg_err(\"The %s appears to be damaged or corrupt.\\n\"",
          "4270:                  \"(%s)\",",
          "4271:                  file_description,",
          "4272:                  err_info != NULL ? err_info : \"no information supplied\");",
          "4273:       g_free(err_info);",
          "4274:       break;",
          "4276:     case WTAP_ERR_CANT_OPEN:",
          "4277:       if (for_writing) {",
          "4278:         cmdarg_err(\"The %s could not be created for some unknown reason.\",",
          "4279:                    file_description);",
          "4280:       } else {",
          "4281:         cmdarg_err(\"The %s could not be opened for some unknown reason.\",",
          "4282:                    file_description);",
          "4283:       }",
          "4284:       break;",
          "4286:     case WTAP_ERR_SHORT_READ:",
          "4287:       cmdarg_err(\"The %s appears to have been cut short in the middle of a packet or other data.\",",
          "4288:                  file_description);",
          "4289:       break;",
          "4291:     case WTAP_ERR_SHORT_WRITE:",
          "4292:       cmdarg_err(\"A full header couldn't be written to the %s.\",",
          "4293:                  file_description);",
          "4294:       break;",
          "4296:     case WTAP_ERR_COMPRESSION_NOT_SUPPORTED:",
          "4297:       cmdarg_err(\"This file type cannot be written as a compressed file.\");",
          "4298:       break;",
          "4300:     case WTAP_ERR_DECOMPRESS:",
          "4302:       cmdarg_err(\"The %s is compressed and appears to be damaged or corrupt.\\n\"",
          "4303:                  \"(%s)\",",
          "4304:                  file_description,",
          "4305:                  err_info != NULL ? err_info : \"no information supplied\");",
          "4306:       g_free(err_info);",
          "4307:       break;",
          "4309:     default:",
          "4310:       cmdarg_err(\"The %s could not be %s: %s.\",",
          "4311:                  file_description,",
          "4312:                  for_writing ? \"created\" : \"opened\",",
          "4313:                  wtap_strerror(err));",
          "4314:       break;",
          "4315:     }",
          "4316:     g_free(file_description);",
          "4317:   } else",
          "4318:     cmdarg_err(file_open_error_message(err, for_writing), filename);",
          "4319: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4333: read_failure_message(const char *filename, int err)",
          "4334: {",
          "4335:   cmdarg_err(\"An error occurred while reading from the file \\\"%s\\\": %s.\",",
          "4337: }",
          "",
          "[Removed Lines]",
          "4336:           filename, g_strerror(err));",
          "",
          "[Added Lines]",
          "3999:              filename, g_strerror(err));",
          "",
          "---------------"
        ],
        "ui/Makefile.am||ui/Makefile.am": [
          "File: ui/Makefile.am -> ui/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:  dissect_opts.c  \\",
          "58:  export_object_ui.c \\",
          "59:  export_pdu_ui_utils.c \\",
          "60:  filter_files.c  \\",
          "61:  firewall_rules.c \\",
          "62:  iface_lists.c  \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:  failure_message.c \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "101:  export_object_ui.h \\",
          "102:  export_pdu_ui_utils.h \\",
          "103:  last_open_dir.h  \\",
          "104:  file_dialog.h  \\",
          "105:  filter_files.h  \\",
          "106:  help_url.h  \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105:  failure_message.h \\",
          "",
          "---------------"
        ],
        "ui/failure_message.c||ui/failure_message.c": [
          "File: ui/failure_message.c -> ui/failure_message.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #include \"config.h\"",
          "26: #include <string.h>",
          "27: #include <errno.h>",
          "29: #include <wiretap/wtap.h>",
          "30: #include <wsutil/filesystem.h>",
          "31: #include <wsutil/cmdarg_err.h>",
          "33: #include \"ui/failure_message.h\"",
          "35: static char *",
          "36: input_file_description(const char *fname)",
          "37: {",
          "38:     char *fstring;",
          "40:     if (strcmp(fname, \"-\") == 0) {",
          "42:         fstring = g_strdup(\"standard input\");",
          "43:     } else {",
          "45:         fstring = g_strdup_printf(\"file \\\"%s\\\"\", fname);",
          "46:     }",
          "47:     return fstring;",
          "48: }",
          "50: static char *",
          "51: output_file_description(const char *fname)",
          "52: {",
          "53:     char *fstring;",
          "55:     if (strcmp(fname, \"-\") == 0) {",
          "57:         fstring = g_strdup(\"standard output\");",
          "58:     } else {",
          "60:         fstring = g_strdup_printf(\"file \\\"%s\\\"\", fname);",
          "61:     }",
          "62:     return fstring;",
          "63: }",
          "75: void",
          "76: cfile_open_failure_message(const char *progname, const char *filename,",
          "77:                            int err, gchar *err_info, gboolean for_writing,",
          "78:                            int file_type)",
          "79: {",
          "80:     char *file_description;",
          "83:     if (for_writing)",
          "84:         file_description = output_file_description(filename);",
          "85:     else",
          "86:         file_description = input_file_description(filename);",
          "88:     if (err < 0) {",
          "90:         switch (err) {",
          "92:         case WTAP_ERR_NOT_REGULAR_FILE:",
          "93:             cmdarg_err(\"The %s is a \\\"special file\\\" or socket or other non-regular file.\",",
          "94:                        file_description);",
          "95:             break;",
          "97:         case WTAP_ERR_RANDOM_OPEN_PIPE:",
          "99:             cmdarg_err(\"The %s is a pipe or FIFO; %s can't read pipe or FIFO files in two-pass mode.\",",
          "100:                        file_description, progname);",
          "101:             break;",
          "103:         case WTAP_ERR_FILE_UNKNOWN_FORMAT:",
          "105:             cmdarg_err(\"The %s isn't a capture file in a format %s understands.\",",
          "106:                        file_description, progname);",
          "107:             break;",
          "109:         case WTAP_ERR_UNSUPPORTED:",
          "111:             cmdarg_err(\"The %s contains record data that %s doesn't support.\\n\"",
          "112:                        \"(%s)\",",
          "113:                        file_description, progname,",
          "114:                        err_info != NULL ? err_info : \"no information supplied\");",
          "115:             g_free(err_info);",
          "116:             break;",
          "118:         case WTAP_ERR_CANT_WRITE_TO_PIPE:",
          "120:             cmdarg_err(\"The %s is a pipe, and \\\"%s\\\" capture files can't be written to a pipe.\",",
          "121:                        file_description,",
          "122:                        wtap_file_type_subtype_short_string(file_type));",
          "123:             break;",
          "125:         case WTAP_ERR_UNWRITABLE_FILE_TYPE:",
          "127:             cmdarg_err(\"%s doesn't support writing capture files in that format.\",",
          "128:                        progname);",
          "129:             break;",
          "131:         case WTAP_ERR_UNWRITABLE_ENCAP:",
          "133:             cmdarg_err(\"The capture file being read can't be written as a \\\"%s\\\" file.\",",
          "134:                        wtap_file_type_subtype_short_string(file_type));",
          "135:             break;",
          "137:         case WTAP_ERR_ENCAP_PER_PACKET_UNSUPPORTED:",
          "138:             if (for_writing) {",
          "139:                 cmdarg_err(\"The capture file being read can't be written as a \\\"%s\\\" file.\",",
          "140:                            wtap_file_type_subtype_short_string(file_type));",
          "141:             } else {",
          "142:                 cmdarg_err(\"The %s is a capture for a network type that %s doesn't support.\",",
          "143:                            file_description, progname);",
          "144:             }",
          "145:             break;",
          "147:         case WTAP_ERR_BAD_FILE:",
          "149:             cmdarg_err(\"The %s appears to be damaged or corrupt.\\n\"",
          "150:                        \"(%s)\",",
          "151:                        file_description,",
          "152:                        err_info != NULL ? err_info : \"no information supplied\");",
          "153:             g_free(err_info);",
          "154:             break;",
          "156:         case WTAP_ERR_CANT_OPEN:",
          "157:             if (for_writing) {",
          "158:                 cmdarg_err(\"The %s could not be created for some unknown reason.\",",
          "159:                            file_description);",
          "160:             } else {",
          "161:                 cmdarg_err(\"The %s could not be opened for some unknown reason.\",",
          "162:                            file_description);",
          "163:             }",
          "164:             break;",
          "166:         case WTAP_ERR_SHORT_READ:",
          "167:             cmdarg_err(\"The %s appears to have been cut short in the middle of a packet or other data.\",",
          "168:                        file_description);",
          "169:             break;",
          "171:         case WTAP_ERR_SHORT_WRITE:",
          "172:             cmdarg_err(\"A full header couldn't be written to the %s.\",",
          "173:                        file_description);",
          "174:             break;",
          "176:         case WTAP_ERR_COMPRESSION_NOT_SUPPORTED:",
          "177:             cmdarg_err(\"This file type cannot be written as a compressed file.\");",
          "178:             break;",
          "180:         case WTAP_ERR_DECOMPRESS:",
          "182:             cmdarg_err(\"The %s is compressed and appears to be damaged or corrupt.\\n\"",
          "183:                        \"(%s)\",",
          "184:                        file_description,",
          "185:                        err_info != NULL ? err_info : \"no information supplied\");",
          "186:             g_free(err_info);",
          "187:             break;",
          "189:         default:",
          "190:             cmdarg_err(\"The %s could not be %s: %s.\",",
          "191:                        file_description,",
          "192:                        for_writing ? \"created\" : \"opened\",",
          "193:                        wtap_strerror(err));",
          "194:             break;",
          "195:         }",
          "196:         g_free(file_description);",
          "197:     } else",
          "198:         cmdarg_err(file_open_error_message(err, for_writing), filename);",
          "199: }",
          "207: void",
          "208: cfile_read_failure_message(const char *progname, const char *filename,",
          "209:                            int err, gchar *err_info)",
          "210: {",
          "211:     char *file_string;",
          "214:     file_string = input_file_description(filename);",
          "216:     switch (err) {",
          "218:     case WTAP_ERR_UNSUPPORTED:",
          "219:         cmdarg_err(\"The %s contains record data that %s doesn't support.\\n(%s)\",",
          "220:                    file_string, progname,",
          "221:                    err_info != NULL ? err_info : \"no information supplied\");",
          "222:         g_free(err_info);",
          "223:         break;",
          "225:     case WTAP_ERR_SHORT_READ:",
          "226:         cmdarg_err(\"The %s appears to have been cut short in the middle of a packet.\",",
          "227:                    file_string);",
          "228:         break;",
          "230:     case WTAP_ERR_BAD_FILE:",
          "231:         cmdarg_err(\"The %s appears to be damaged or corrupt.\\n(%s)\",",
          "232:                    file_string,",
          "233:                    err_info != NULL ? err_info : \"no information supplied\");",
          "234:         g_free(err_info);",
          "235:         break;",
          "237:     case WTAP_ERR_DECOMPRESS:",
          "238:         cmdarg_err(\"The %s is compressed and appears to be damaged or corrupt.\\n\"",
          "239:                    \"(%s)\", file_string,",
          "240:                    err_info != NULL ? err_info : \"no information supplied\");",
          "241:         g_free(err_info);",
          "242:         break;",
          "244:     default:",
          "245:         cmdarg_err(\"An error occurred while reading the %s: %s.\",",
          "246:                    file_string, wtap_strerror(err));",
          "247:         break;",
          "248:     }",
          "249:     g_free(file_string);",
          "250: }",
          "261: void",
          "262: cfile_write_failure_message(const char *in_filename, const char *out_filename,",
          "263:                             int err, gchar *err_info, guint32 framenum,",
          "264:                             int file_type_subtype)",
          "265: {",
          "266:     char *in_file_string;",
          "267:     char *out_file_string;",
          "270:     in_file_string = input_file_description(in_filename);",
          "273:     out_file_string = output_file_description(out_filename);",
          "275:     switch (err) {",
          "277:     case WTAP_ERR_UNWRITABLE_ENCAP:",
          "283:         cmdarg_err(\"Frame %u of %s has a network type that can't be saved in a \\\"%s\\\" file.\\n\",",
          "284:                    framenum, in_file_string,",
          "285:                    wtap_file_type_subtype_short_string(file_type_subtype));",
          "286:         break;",
          "288:     case WTAP_ERR_PACKET_TOO_LARGE:",
          "294:         cmdarg_err(\"Frame %u of %s is too large for a \\\"%s\\\" file.\\n\",",
          "295:                    framenum, in_file_string,",
          "296:                    wtap_file_type_subtype_short_string(file_type_subtype));",
          "297:         break;",
          "299:     case WTAP_ERR_UNWRITABLE_REC_TYPE:",
          "305:         cmdarg_err(\"Record %u of %s has a record type that can't be saved in a \\\"%s\\\" file.\\n\",",
          "306:                    framenum, in_file_string,",
          "307:                    wtap_file_type_subtype_short_string(file_type_subtype));",
          "308:         break;",
          "310:     case WTAP_ERR_UNWRITABLE_REC_DATA:",
          "316:         cmdarg_err(\"Record %u of %s has data that can't be saved in a \\\"%s\\\" file.\\n(%s)\\n\",",
          "317:                    framenum, in_file_string,",
          "318:                    wtap_file_type_subtype_short_string(file_type_subtype),",
          "319:                    err_info != NULL ? err_info : \"no information supplied\");",
          "320:         g_free(err_info);",
          "321:         break;",
          "323:     case ENOSPC:",
          "324:         cmdarg_err(\"Not all the packets could be written to the %s because there is \"",
          "325:                    \"no space left on the file system.\",",
          "326:                    out_file_string);",
          "327:         break;",
          "329: #ifdef EDQUOT",
          "330:     case EDQUOT:",
          "331:         cmdarg_err(\"Not all the packets could be written to the %s because you are \"",
          "332:                    \"too close to, or over your disk quota.\",",
          "333:                    out_file_string);",
          "334:   break;",
          "335: #endif",
          "337:     case WTAP_ERR_SHORT_WRITE:",
          "338:         cmdarg_err(\"A full write couldn't be done to the %s.\",",
          "339:                    out_file_string);",
          "340:         break;",
          "342:     default:",
          "343:         cmdarg_err(\"An error occurred while writing to the %s: %s.\",",
          "344:                    out_file_string, wtap_strerror(err));",
          "345:         break;",
          "346:     }",
          "347:     g_free(in_file_string);",
          "348:     g_free(out_file_string);",
          "349: }",
          "373: void",
          "374: cfile_close_failure_message(const char *filename, int err)",
          "375: {",
          "376:     char *file_string;",
          "379:     file_string = output_file_description(filename);",
          "381:     switch (err) {",
          "383:     case ENOSPC:",
          "384:         cmdarg_err(\"Not all the packets could be written to the %s because there is \"",
          "385:                    \"no space left on the file system.\",",
          "386:                    file_string);",
          "387:     break;",
          "389: #ifdef EDQUOT",
          "390:     case EDQUOT:",
          "391:         cmdarg_err(\"Not all the packets could be written to the %s because you are \"",
          "392:                    \"too close to, or over your disk quota.\",",
          "393:                    file_string);",
          "394:   break;",
          "395: #endif",
          "397:     case WTAP_ERR_CANT_CLOSE:",
          "398:         cmdarg_err(\"The %s couldn't be closed for some unknown reason.\",",
          "399:                    file_string);",
          "400:         break;",
          "402:     case WTAP_ERR_SHORT_WRITE:",
          "403:         cmdarg_err(\"A full write couldn't be done to the %s.\",",
          "404:                    file_string);",
          "405:         break;",
          "407:     default:",
          "408:         cmdarg_err(\"The %s could not be closed: %s.\", file_string,",
          "409:                    wtap_strerror(err));",
          "410:         break;",
          "411:     }",
          "412:     g_free(file_string);",
          "413: }",
          "",
          "---------------"
        ],
        "ui/failure_message.h||ui/failure_message.h": [
          "File: ui/failure_message.h -> ui/failure_message.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #ifndef __FAILURE_MESSAGE_H__",
          "25: #define __FAILURE_MESSAGE_H__",
          "27: #ifdef __cplusplus",
          "28: extern \"C\" {",
          "41: extern void cfile_open_failure_message(const char *progname,",
          "42:                                        const char *filename, int err,",
          "43:                                        gchar *err_info, gboolean for_writing,",
          "44:                                        int file_type);",
          "52: extern void cfile_read_failure_message(const char *progname,",
          "53:                                        const char *filename, int err,",
          "54:                                        gchar *err_info);",
          "65: extern void cfile_write_failure_message(const char *in_filename,",
          "66:                                         const char *out_filename,",
          "67:                                         int err, gchar *err_info,",
          "68:                                         guint32 framenum,",
          "69:                                         int file_type_subtype);",
          "93: extern void cfile_close_failure_message(const char *filename, int err);",
          "95: #ifdef __cplusplus",
          "96: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}