{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b140347395ef091cdafba49cffdc0360134c91c4",
      "candidate_info": {
        "commit_hash": "b140347395ef091cdafba49cffdc0360134c91c4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b140347395ef091cdafba49cffdc0360134c91c4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/prepare.c"
        ],
        "message": "Fix a typo in an error message.\n\nFossilOrigin-Name: 849b03d8de62251707ee0d31c9f1cd98cbd296c70c1a2c8d7c1658840a930fe4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/prepare.c||src/prepare.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: dd39418ee47529cc3ffbe01eccf31f1304a266a196bf81a2a2cb2e650c195b97",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "163:      || sqlite3IndexHasDuplicateRootPage(pIndex)",
          "164:     ){",
          "165:       if( sqlite3Config.bExtraSchemaChecks ){",
          "167:       }",
          "168:     }",
          "169:   }",
          "",
          "[Removed Lines]",
          "166:         corruptSchema(pData, argv[1], \"invalid roopage\");",
          "",
          "[Added Lines]",
          "166:         corruptSchema(pData, argv[1], \"invalid rootpage\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1402b8e5b6e2f1333ec215aba214baa0e6fd66f2",
      "candidate_info": {
        "commit_hash": "1402b8e5b6e2f1333ec215aba214baa0e6fd66f2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1402b8e5b6e2f1333ec215aba214baa0e6fd66f2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/expr.c",
          "src/select.c",
          "src/utf.c",
          "src/vdbe.c",
          "src/vdbeInt.h",
          "src/vdbemem.c",
          "src/where.c",
          "test/distinct.test",
          "test/skipscan1.test"
        ],
        "message": "Merge enhancements from trunk.\n\nFossilOrigin-Name: 9c50f6c28a4cadb2c33954c066a8e94f8aaf4c31b6c0309db35efc472cb0bcaa",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/expr.c||src/expr.c",
          "src/select.c||src/select.c",
          "src/utf.c||src/utf.c",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbeInt.h||src/vdbeInt.h",
          "src/vdbemem.c||src/vdbemem.c",
          "src/where.c||src/where.c",
          "test/distinct.test||test/distinct.test",
          "test/skipscan1.test||test/skipscan1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 411e8ec2219bb4181aaf2209fb1e7baf5e8df8b8c8adb82a69b48cf7e8e7e7d4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1736:       }",
          "1737:       iPtr = iFreeBlk;",
          "1738:     }",
          "1740:       return SQLITE_CORRUPT_PAGE(pPage);",
          "1741:     }",
          "1742:     assert( iFreeBlk>iPtr || iFreeBlk==0 );",
          "",
          "[Removed Lines]",
          "1739:     if( NEVER(iFreeBlk>pPage->pBt->usableSize-4) ){",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6104:   ){",
          "6105:     p->selFlags &= ~SF_Distinct;",
          "6106:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6107:     p->selFlags |= SF_Aggregate;",
          "",
          "---------------"
        ],
        "src/utf.c||src/utf.c": [
          "File: src/utf.c -> src/utf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "216: #if defined(TRANSLATE_TRACE) && defined(SQLITE_DEBUG)",
          "217:   {",
          "221:   }",
          "222: #endif",
          "",
          "[Removed Lines]",
          "218:     char zBuf[100];",
          "219:     sqlite3VdbeMemPrettyPrint(pMem, zBuf);",
          "220:     fprintf(stderr, \"INPUT:  %s\\n\", zBuf);",
          "",
          "[Added Lines]",
          "218:     StrAccum acc;",
          "219:     char zBuf[1000];",
          "220:     sqlite3StrAccumInit(&acc, 0, zBuf, sizeof(zBuf), 0);",
          "221:     sqlite3VdbeMemPrettyPrint(pMem, &acc);",
          "222:     fprintf(stderr, \"INPUT:  %s\\n\", sqlite3StrAccumFinish(&acc));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "325: translate_out:",
          "326: #if defined(TRANSLATE_TRACE) && defined(SQLITE_DEBUG)",
          "327:   {",
          "331:   }",
          "332: #endif",
          "333:   return SQLITE_OK;",
          "",
          "[Removed Lines]",
          "328:     char zBuf[100];",
          "329:     sqlite3VdbeMemPrettyPrint(pMem, zBuf);",
          "330:     fprintf(stderr, \"OUTPUT: %s\\n\", zBuf);",
          "",
          "[Added Lines]",
          "330:     StrAccum acc;",
          "331:     char zBuf[1000];",
          "332:     sqlite3StrAccumInit(&acc, 0, zBuf, sizeof(zBuf), 0);",
          "333:     sqlite3VdbeMemPrettyPrint(pMem, &acc);",
          "334:     fprintf(stderr, \"OUTPUT: %s\\n\", sqlite3StrAccumFinish(&acc));",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "486:   int f = pMem->flags;",
          "488:   static const char *const encnames[] = {\"(X)\", \"(8)\", \"(16LE)\", \"(16BE)\"};",
          "490:   if( f&MEM_Blob ){",
          "491:     int i;",
          "492:     char c;",
          "",
          "[Removed Lines]",
          "484: void sqlite3VdbeMemPrettyPrint(Mem *pMem, char *zBuf){",
          "485:   char *zCsr = zBuf;",
          "",
          "[Added Lines]",
          "484: void sqlite3VdbeMemPrettyPrint(Mem *pMem, StrAccum *pStr){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "502:     }else{",
          "503:       c = 's';",
          "504:     }",
          "509:     for(i=0; i<25 && i<pMem->n; i++){",
          "512:     }",
          "514:     for(i=0; i<25 && i<pMem->n; i++){",
          "515:       char z = pMem->z[i];",
          "518:     }",
          "520:     if( f & MEM_Zero ){",
          "523:     }",
          "525:   }else if( f & MEM_Str ){",
          "528:     if( f & MEM_Dyn ){",
          "530:       assert( (f & (MEM_Static|MEM_Ephem))==0 );",
          "531:     }else if( f & MEM_Static ){",
          "533:       assert( (f & (MEM_Dyn|MEM_Ephem))==0 );",
          "534:     }else if( f & MEM_Ephem ){",
          "536:       assert( (f & (MEM_Static|MEM_Dyn))==0 );",
          "537:     }else{",
          "539:     }",
          "544:     for(j=0; j<25 && j<pMem->n; j++){",
          "545:       u8 c = pMem->z[j];",
          "551:     }",
          "556:   }",
          "557: }",
          "558: #endif",
          "",
          "[Removed Lines]",
          "507:     sqlite3_snprintf(100, zCsr, \"%d[\", pMem->n);",
          "508:     zCsr += sqlite3Strlen30(zCsr);",
          "510:       sqlite3_snprintf(100, zCsr, \"%02X\", ((int)pMem->z[i] & 0xFF));",
          "511:       zCsr += sqlite3Strlen30(zCsr);",
          "516:       if( z<32 || z>126 ) *zCsr++ = '.';",
          "517:       else *zCsr++ = z;",
          "521:       sqlite3_snprintf(100, zCsr,\"+%dz\",pMem->u.nZero);",
          "522:       zCsr += sqlite3Strlen30(zCsr);",
          "526:     int j, k;",
          "527:     zBuf[0] = ' ';",
          "529:       zBuf[1] = 'z';",
          "532:       zBuf[1] = 't';",
          "535:       zBuf[1] = 'e';",
          "538:       zBuf[1] = 's';",
          "540:     k = 2;",
          "541:     sqlite3_snprintf(100, &zBuf[k], \"%d\", pMem->n);",
          "542:     k += sqlite3Strlen30(&zBuf[k]);",
          "543:     zBuf[k++] = '[';",
          "546:       if( c>=0x20 && c<0x7f ){",
          "547:         zBuf[k++] = c;",
          "548:       }else{",
          "549:         zBuf[k++] = '.';",
          "550:       }",
          "552:     zBuf[k++] = ']';",
          "553:     sqlite3_snprintf(100,&zBuf[k], encnames[pMem->enc]);",
          "554:     k += sqlite3Strlen30(&zBuf[k]);",
          "555:     zBuf[k++] = 0;",
          "",
          "[Added Lines]",
          "502:     sqlite3_str_appendf(pStr, \"%cx\", c);",
          "504:       sqlite3_str_appendf(pStr, \"%02X\", ((int)pMem->z[i] & 0xFF));",
          "506:     sqlite3_str_appendf(pStr, \"|\");",
          "509:       sqlite3_str_appendchar(pStr, 1, (z<32||z>126)?'.':z);",
          "511:     sqlite3_str_appendf(pStr,\"]\");",
          "513:       sqlite3_str_appendf(pStr, \"+%dz\",pMem->u.nZero);",
          "516:     int j;",
          "517:     int c;",
          "519:       c = 'z';",
          "522:       c = 't';",
          "525:       c = 'e';",
          "528:       c = 's';",
          "530:     sqlite3_str_appendf(pStr, \" %c%d[\", c, pMem->n);",
          "533:       sqlite3_str_appendchar(pStr, 1, (c>=0x20&&c<=0x7f) ? c : '.');",
          "535:     sqlite3_str_appendf(pStr, \"]%s\", encnames[pMem->enc]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "579:   }else if( sqlite3VdbeMemIsRowSet(p) ){",
          "580:     printf(\" (rowset)\");",
          "581:   }else{",
          "585:   }",
          "586:   if( p->flags & MEM_Subtype ) printf(\" subtype=0x%02x\", p->eSubtype);",
          "587: }",
          "",
          "[Removed Lines]",
          "582:     char zBuf[200];",
          "583:     sqlite3VdbeMemPrettyPrint(p, zBuf);",
          "584:     printf(\" %s\", zBuf);",
          "",
          "[Added Lines]",
          "562:     StrAccum acc;",
          "563:     char zBuf[1000];",
          "564:     sqlite3StrAccumInit(&acc, 0, zBuf, sizeof(zBuf), 0);",
          "565:     sqlite3VdbeMemPrettyPrint(p, &acc);",
          "566:     printf(\" %s\", sqlite3StrAccumFinish(&acc));",
          "",
          "---------------"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "597: #ifdef SQLITE_DEBUG",
          "598:   void sqlite3VdbePrintSql(Vdbe*);",
          "600: #endif",
          "601: #ifndef SQLITE_OMIT_UTF16",
          "602:   int sqlite3VdbeMemTranslate(Mem*, u8);",
          "",
          "[Removed Lines]",
          "599:   void sqlite3VdbeMemPrettyPrint(Mem *pMem, char *zBuf);",
          "",
          "[Added Lines]",
          "599:   void sqlite3VdbeMemPrettyPrint(Mem *pMem, StrAccum *pStr);",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "956:   Mem *pX;",
          "957:   for(i=1, pX=pVdbe->aMem+1; i<pVdbe->nMem; i++, pX++){",
          "958:     if( pX->pScopyFrom==pMem ){",
          "959:       if( pVdbe->db->flags & SQLITE_VdbeTrace ){",
          "960:         sqlite3DebugPrintf(\"Invalidate R[%d] due to change in R[%d]\\n\",",
          "961:           (int)(pX - pVdbe->aMem), (int)(pMem - pVdbe->aMem));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "959:       u16 mFlags;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "970:       assert( (mFlags&(MEM_Int|MEM_IntReal))==0 || pMem->u.i==pX->u.i );",
          "",
          "[Removed Lines]",
          "969:       u16 mFlags = pMem->flags & pX->flags & pX->mScopyFlags;",
          "",
          "[Added Lines]",
          "970:       mFlags = pMem->flags & pX->flags & pX->mScopyFlags;",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2432:   pNew = pBuilder->pNew;",
          "2433:   if( db->mallocFailed ) return SQLITE_NOMEM_BKPT;",
          "2437:   assert( (pNew->wsFlags & WHERE_VIRTUALTABLE)==0 );",
          "2438:   assert( (pNew->wsFlags & WHERE_TOP_LIMIT)==0 );",
          "",
          "[Removed Lines]",
          "2434:   WHERETRACE(0x800, (\"BEGIN %s.addBtreeIdx(%s), nEq=%d\\n\",",
          "2435:                      pProbe->pTable->zName,pProbe->zName, pNew->u.btree.nEq));",
          "",
          "[Added Lines]",
          "2434:   WHERETRACE(0x800, (\"BEGIN %s.addBtreeIdx(%s), nEq=%d, nSkip=%d\\n\",",
          "2435:                      pProbe->pTable->zName,pProbe->zName,",
          "2436:                      pNew->u.btree.nEq, pNew->nSkip));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2729:   assert( 42==sqlite3LogEst(18) );",
          "2730:   if( saved_nEq==saved_nSkip",
          "2731:    && saved_nEq+1<pProbe->nKeyCol",
          "2732:    && pProbe->noSkipScan==0",
          "2733:    && OptimizationEnabled(db, SQLITE_SkipScan)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2733:    && saved_nEq==pNew->nLTerm",
          "",
          "---------------"
        ],
        "test/distinct.test||test/distinct.test": [
          "File: test/distinct.test -> test/distinct.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "268:     FROM sqlite_master;",
          "269: } {mmm}",
          "272: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "271: #-------------------------------------------------------------------------",
          "272: # Ticket [9c944882]",
          "273: #",
          "274: reset_db",
          "275: do_execsql_test 7.0 {",
          "276:   CREATE TABLE t1(a INTEGER PRIMARY KEY);",
          "277:   CREATE TABLE t3(a INTEGER PRIMARY KEY);",
          "279:   CREATE TABLE t4(x);",
          "280:   CREATE TABLE t5(y);",
          "282:   INSERT INTO t5 VALUES(1), (2), (2);",
          "283:   INSERT INTO t1 VALUES(2);",
          "284:   INSERT INTO t3 VALUES(2);",
          "285:   INSERT INTO t4 VALUES(2);",
          "286: }",
          "288: do_execsql_test 7.1 {",
          "289:   WITH t2(b) AS (",
          "290:     SELECT DISTINCT y FROM t5 ORDER BY y",
          "291:   )",
          "292:   SELECT * FROM",
          "293:     t4 CROSS JOIN t3 CROSS JOIN t1",
          "294:   WHERE (t1.a=t3.a) AND (SELECT count(*) FROM t2 AS y WHERE t4.x!='abc')=t1.a",
          "295: } {2 2 2}",
          "",
          "---------------"
        ],
        "test/skipscan1.test||test/skipscan1.test": [
          "File: test/skipscan1.test -> test/skipscan1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "398:   `--USE TEMP B-TREE FOR DISTINCT",
          "399: }",
          "401: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "401: # 2020-01-06 ticket 304017f5f04a0035",
          "402: #",
          "403: reset_db",
          "404: do_execsql_test skipscan1-4.10 {",
          "405:   CREATE TABLE t1(a,b INT);",
          "406:   INSERT INTO t1(a,b) VALUES(1,2),(3,3),(4,5);",
          "407:   CREATE UNIQUE INDEX i1 ON t1(b,b,a,a,a,a,a,b,a);",
          "408:   ANALYZE;",
          "409:   DROP TABLE IF EXISTS sqlite_stat4;",
          "410:   INSERT INTO sqlite_stat1 VALUES('t1','i1','30 30 30 2 2 2 2 2 2 2');",
          "411:   ANALYZE sqlite_master;",
          "413:   SELECT DISTINCT a",
          "414:     FROM t1",
          "415:    WHERE a = b",
          "416:      AND a = 3",
          "417:      AND b IN (1,3,2,4)",
          "418:      AND b >= 0",
          "419:      AND a <= 10;",
          "420: } {3}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "04307c8a3f457760348fd56f474cedc940fd7dc3",
      "candidate_info": {
        "commit_hash": "04307c8a3f457760348fd56f474cedc940fd7dc3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/04307c8a3f457760348fd56f474cedc940fd7dc3",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/gencol1.test"
        ],
        "message": "Ignore differences in Expr.op2 in sqlite3ExprCompare() in cases where it does matter.  Ticket [1d2a8efc6c3a595a].\n\nFossilOrigin-Name: 329820673a12ff6a6c8759f40989d4ccf272441064b0366a5f491695b55ad0e9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: aceeaf9e28767a0880a16872867a1f57bff163acd0f10d19d5688068077590fa",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5028:      && (combinedFlags & EP_Reduced)==0",
          "5029:     ){",
          "5030:       if( pA->iColumn!=pB->iColumn ) return 2;",
          "5032:       if( pA->op!=TK_IN && pA->iTable!=pB->iTable && pA->iTable!=iTab ){",
          "5033:         return 2;",
          "5034:       }",
          "",
          "[Removed Lines]",
          "5031:       if( pA->op2!=pB->op2 && (pA->op!=TK_FUNCTION || iTab<0) ) return 2;",
          "",
          "[Added Lines]",
          "5031:       if( pA->op2!=pB->op2 ){",
          "5032:         if( pA->op==TK_TRUTH ) return 2;",
          "5033:         if( pA->op==TK_FUNCTION && iTab<0 ){",
          "5043:           return 2;",
          "5044:         }",
          "5045:       }",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019-10-31",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "12: # Test cases for generated columns.",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "18: # ticket 830277d9db6c3ba1 on 2019-10-31",
          "19: do_execsql_test gencol1-100 {",
          "20:   CREATE TABLE t0(c0 AS(TYPEOF(c1)), c1);",
          "21:   INSERT INTO t0(c1) VALUES(0);",
          "22:   CREATE TABLE t1(x AS (typeof(y)), y);",
          "23:   INSERT INTO t1 SELECT * FROM t0;",
          "24:   SELECT * FROM t1;",
          "25: } {integer 0}",
          "27: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c59b4acf5d188b8a18a83a576ad53b4212f4a62c",
      "candidate_info": {
        "commit_hash": "c59b4acf5d188b8a18a83a576ad53b4212f4a62c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c59b4acf5d188b8a18a83a576ad53b4212f4a62c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/cse.test"
        ],
        "message": "Avoid factoring out constant expressions on the LHS of an IN(...) operator, as the IN(...) operation may affect the affinity of these values.\n\nFossilOrigin-Name: 98d56b4a34fddcbaecd953a045ae0270b4d78c1edf34cc73522fb4e12743af80",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/cse.test||test/cse.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 42b02454b146ca1b04c0a5321465326435fc5b995f5498d3b1cf69c558a20f95",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3185:   assert( !ExprHasVVAProperty(pExpr,EP_Immutable) );",
          "3186:   pLeft = pExpr->pLeft;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3184:   u8 okConstFactor = pParse->okConstFactor;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3229:   rLhsOrig = exprCodeVector(pParse, pLeft, &iDummy);",
          "3231:   if( i==nVector ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3233:   assert( pParse->okConstFactor==okConstFactor );",
          "3234:   pParse->okConstFactor = 0;",
          "3236:   pParse->okConstFactor = okConstFactor;",
          "",
          "---------------"
        ],
        "test/cse.test||test/cse.test": [
          "File: test/cse.test -> test/cse.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: set testdir [file dirname $argv0]",
          "20: source $testdir/tester.tcl",
          "22: do_test cse-1.1 {",
          "23:   execsql {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: set testprefix cse",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157:   } $answer",
          "158: }",
          "160: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161: #-------------------------------------------------------------------------",
          "162: # Ticket fd1bda016d1a",
          "163: #",
          "164: reset_db",
          "165: do_execsql_test 3.0 {",
          "166:   CREATE TABLE t1(a TEXT, b);",
          "167:   INSERT INTO t1 VALUES('hello', 0);",
          "168:   INSERT INTO t1 VALUES('world', 0);",
          "170:   CREATE TABLE t2(x TEXT);",
          "171:   INSERT INTO t2 VALUES('hello');",
          "172:   INSERT INTO t2 VALUES('world');",
          "174:   CREATE TABLE t3(y);",
          "175:   INSERT INTO t3 VALUES(1000);",
          "176: } {}",
          "178: do_execsql_test 3.1 {",
          "179:   SELECT 1000 = y FROM t3",
          "180: } {1}",
          "182: do_execsql_test 3.2 {",
          "183:   SELECT 1000 IN (SELECT x FROM t2), 1000 = y FROM t3",
          "184: } {0 1}",
          "186: do_execsql_test 3.3 {",
          "187:   SELECT 0 IN (SELECT a), (SELECT a LIMIT 0) FROM t1",
          "188: } {0 {} 0 {}}",
          "190: do_execsql_test 3.4 {",
          "191:   SELECT 0 IN (SELECT a) FROM t1 WHERE a = 'hello' OR (SELECT a LIMIT 0);",
          "192: } {0}",
          "194: do_execsql_test 3.5 {",
          "195:   CREATE TABLE v0(v1 VARCHAR0);",
          "196:   INSERT INTO v0 VALUES(2), (3);",
          "197:   SELECT 0 IN(SELECT v1) FROM v0 WHERE v1 = 2 OR(SELECT v1 LIMIT 0);",
          "198: } {0}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ac801803a55cf88994af154a6499561de8d31fcc",
      "candidate_info": {
        "commit_hash": "ac801803a55cf88994af154a6499561de8d31fcc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ac801803a55cf88994af154a6499561de8d31fcc",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Fix an assert that can fail if the schema is corrupt.\n\nFossilOrigin-Name: ed57c48e4bb337810521bda2da79614313e4835a317ca4eadb52bd67e4eadf98",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1e449687881f4d388e54a0e51bcabba41ab10cf7e596ff65e31e88a23c70d497",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4370:   assert( wrFlag==0 || !hasReadConflicts(p, iTable) );",
          "",
          "[Removed Lines]",
          "4369:   assert( hasSharedCacheTableLock(p, iTable, pKeyInfo!=0, (wrFlag?2:1)) );",
          "",
          "[Added Lines]",
          "4369:   assert( hasSharedCacheTableLock(p, iTable, pKeyInfo!=0, (wrFlag?2:1))",
          "4370:           || iTable<1 );",
          "",
          "---------------"
        ]
      }
    }
  ]
}