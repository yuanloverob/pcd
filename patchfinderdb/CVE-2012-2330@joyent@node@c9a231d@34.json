{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d6b78d0e3769e4af1b1a60e89f53faf20e4bb2b3",
      "candidate_info": {
        "commit_hash": "d6b78d0e3769e4af1b1a60e89f53faf20e4bb2b3",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/d6b78d0e3769e4af1b1a60e89f53faf20e4bb2b3",
        "files": [
          "lib/domain.js",
          "test/simple/test-domain-stack.js"
        ],
        "message": "domain: Fix stack leak on error",
        "before_after_code_files": [
          "lib/domain.js||lidomain.js",
          "test/simple/test-domain-stack.js||test/simple/test-domain-stack.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/domain.js||lidomain.js": [
          "File: lib/domain.js -> lidomain.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: var stack = [];",
          "45: exports.active = null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:       domain_thrown: true",
          "59:     });",
          "60:     exports.active.emit('error', er);",
          "61:   } else if (process.listeners('uncaughtException').length === 1) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-domain-stack.js||test/simple/test-domain-stack.js": [
          "File: test/simple/test-domain-stack.js -> test/simple/test-domain-stack.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: var common = require('../common');",
          "26: var assert = require('assert');",
          "27: var domain = require('domain');",
          "28: var events = require('events');",
          "30: var a = domain.create();",
          "31: a.name = 'a';",
          "33: a.on('error', function() {",
          "34:   if (domain._stack.length > 5) {",
          "35:     console.error('leaking!', domain._stack);",
          "36:     process.exit(1);",
          "37:   }",
          "38: });",
          "40: var foo = a.bind(function() {",
          "41:   throw new Error('error from foo');",
          "42: });",
          "44: for (var i = 0; i < 1000; i++) {",
          "45:   process.nextTick(foo);",
          "46: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6b9425fe3783193cf95cb04cbcbcbb97f5a77d31",
      "candidate_info": {
        "commit_hash": "6b9425fe3783193cf95cb04cbcbcbb97f5a77d31",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/6b9425fe3783193cf95cb04cbcbcbb97f5a77d31",
        "files": [
          "lib/buffer.js",
          "test/simple/test-writedouble.js",
          "test/simple/test-writefloat.js"
        ],
        "message": "buffer: added support for writing NaN and Infinity\n\nto writeDoubleBE(), writeDoubleLE(), writeFloatBE() and writeFloatLE().\nFixes #3934.",
        "before_after_code_files": [
          "lib/buffer.js||libuffer.js",
          "test/simple/test-writedouble.js||test/simple/test-writedouble.js",
          "test/simple/test-writefloat.js||test/simple/test-writefloat.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/buffer.js||libuffer.js": [
          "File: lib/buffer.js -> libuffer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1002:   assert.ok(Math.floor(value) === value, 'value has a fractional component');",
          "1003: }",
          "1006:   assert.ok(typeof (value) == 'number',",
          "1007:       'cannot write a non-number as a number');",
          "1009:   assert.ok(value <= max, 'value larger than maximum allowed value');",
          "1011:   assert.ok(value >= min, 'value smaller than minimum allowed value');",
          "",
          "[Removed Lines]",
          "1005: function verifIEEE754(value, max, min) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1112:     assert.ok(offset + 3 < buffer.length,",
          "1113:         'Trying to write beyond buffer length');",
          "1116:   }",
          "1118:   require('buffer_ieee754').writeIEEE754(buffer, value, offset, isBigEndian,",
          "",
          "[Removed Lines]",
          "1115:     verifIEEE754(value, 3.4028234663852886e+38, -3.4028234663852886e+38);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1141:     assert.ok(offset + 7 < buffer.length,",
          "1142:         'Trying to write beyond buffer length');",
          "1145:   }",
          "1147:   require('buffer_ieee754').writeIEEE754(buffer, value, offset, isBigEndian,",
          "",
          "[Removed Lines]",
          "1144:     verifIEEE754(value, 1.7976931348623157E+308, -1.7976931348623157E+308);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-writedouble.js||test/simple/test-writedouble.js": [
          "File: test/simple/test-writedouble.js -> test/simple/test-writedouble.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:   ASSERT.equal(0x00, buffer[13]);",
          "124:   ASSERT.equal(0x00, buffer[14]);",
          "125:   ASSERT.equal(0x80, buffer[15]);",
          "126: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:   buffer.writeDoubleBE(Infinity, 0);",
          "128:   buffer.writeDoubleLE(Infinity, 8);",
          "129:   ASSERT.equal(0x7F, buffer[0]);",
          "130:   ASSERT.equal(0xF0, buffer[1]);",
          "131:   ASSERT.equal(0x00, buffer[2]);",
          "132:   ASSERT.equal(0x00, buffer[3]);",
          "133:   ASSERT.equal(0x00, buffer[4]);",
          "134:   ASSERT.equal(0x00, buffer[5]);",
          "135:   ASSERT.equal(0x00, buffer[6]);",
          "136:   ASSERT.equal(0x00, buffer[7]);",
          "137:   ASSERT.equal(0x00, buffer[8]);",
          "138:   ASSERT.equal(0x00, buffer[9]);",
          "139:   ASSERT.equal(0x00, buffer[10]);",
          "140:   ASSERT.equal(0x00, buffer[11]);",
          "141:   ASSERT.equal(0x00, buffer[12]);",
          "142:   ASSERT.equal(0x00, buffer[13]);",
          "143:   ASSERT.equal(0xF0, buffer[14]);",
          "144:   ASSERT.equal(0x7F, buffer[15]);",
          "145:   ASSERT.equal(Infinity, buffer.readDoubleBE(0));",
          "146:   ASSERT.equal(Infinity, buffer.readDoubleLE(8));",
          "148:   buffer.writeDoubleBE(-Infinity, 0);",
          "149:   buffer.writeDoubleLE(-Infinity, 8);",
          "150:   ASSERT.equal(0xFF, buffer[0]);",
          "151:   ASSERT.equal(0xF0, buffer[1]);",
          "152:   ASSERT.equal(0x00, buffer[2]);",
          "153:   ASSERT.equal(0x00, buffer[3]);",
          "154:   ASSERT.equal(0x00, buffer[4]);",
          "155:   ASSERT.equal(0x00, buffer[5]);",
          "156:   ASSERT.equal(0x00, buffer[6]);",
          "157:   ASSERT.equal(0x00, buffer[7]);",
          "158:   ASSERT.equal(0x00, buffer[8]);",
          "159:   ASSERT.equal(0x00, buffer[9]);",
          "160:   ASSERT.equal(0x00, buffer[10]);",
          "161:   ASSERT.equal(0x00, buffer[11]);",
          "162:   ASSERT.equal(0x00, buffer[12]);",
          "163:   ASSERT.equal(0x00, buffer[13]);",
          "164:   ASSERT.equal(0xF0, buffer[14]);",
          "165:   ASSERT.equal(0xFF, buffer[15]);",
          "166:   ASSERT.equal(-Infinity, buffer.readDoubleBE(0));",
          "167:   ASSERT.equal(-Infinity, buffer.readDoubleLE(8));",
          "169:   buffer.writeDoubleBE(NaN, 0);",
          "170:   buffer.writeDoubleLE(NaN, 8);",
          "171:   ASSERT.equal(0x7F, buffer[0]);",
          "172:   ASSERT.equal(0xF0, buffer[1]);",
          "173:   ASSERT.equal(0x00, buffer[2]);",
          "174:   ASSERT.equal(0x00, buffer[3]);",
          "175:   ASSERT.equal(0x00, buffer[4]);",
          "176:   ASSERT.equal(0x00, buffer[5]);",
          "177:   ASSERT.equal(0x00, buffer[6]);",
          "178:   ASSERT.equal(0x01, buffer[7]);",
          "179:   ASSERT.equal(0x01, buffer[8]);",
          "180:   ASSERT.equal(0x00, buffer[9]);",
          "181:   ASSERT.equal(0x00, buffer[10]);",
          "182:   ASSERT.equal(0x00, buffer[11]);",
          "183:   ASSERT.equal(0x00, buffer[12]);",
          "184:   ASSERT.equal(0x00, buffer[13]);",
          "185:   ASSERT.equal(0xF0, buffer[14]);",
          "186:   ASSERT.equal(0x7F, buffer[15]);",
          "187:   ASSERT.ok(isNaN(buffer.readDoubleBE(0)));",
          "188:   ASSERT.ok(isNaN(buffer.readDoubleLE(8)));",
          "",
          "---------------"
        ],
        "test/simple/test-writefloat.js||test/simple/test-writefloat.js": [
          "File: test/simple/test-writefloat.js -> test/simple/test-writefloat.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:   ASSERT.equal(0x00, buffer[5]);",
          "84:   ASSERT.equal(0x00, buffer[6]);",
          "85:   ASSERT.equal(0x80, buffer[7]);",
          "86: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87:   buffer.writeFloatBE(Infinity, 0);",
          "88:   buffer.writeFloatLE(Infinity, 4);",
          "89:   ASSERT.equal(0x7F, buffer[0]);",
          "90:   ASSERT.equal(0x80, buffer[1]);",
          "91:   ASSERT.equal(0x00, buffer[2]);",
          "92:   ASSERT.equal(0x00, buffer[3]);",
          "93:   ASSERT.equal(0x00, buffer[4]);",
          "94:   ASSERT.equal(0x00, buffer[5]);",
          "95:   ASSERT.equal(0x80, buffer[6]);",
          "96:   ASSERT.equal(0x7F, buffer[7]);",
          "97:   ASSERT.equal(Infinity, buffer.readFloatBE(0));",
          "98:   ASSERT.equal(Infinity, buffer.readFloatLE(4));",
          "100:   buffer.writeFloatBE(-Infinity, 0);",
          "101:   buffer.writeFloatLE(-Infinity, 4);",
          "102:   ASSERT.equal(0xFF, buffer[0]);",
          "103:   ASSERT.equal(0x80, buffer[1]);",
          "104:   ASSERT.equal(0x00, buffer[2]);",
          "105:   ASSERT.equal(0x00, buffer[3]);",
          "106:   ASSERT.equal(0x00, buffer[4]);",
          "107:   ASSERT.equal(0x00, buffer[5]);",
          "108:   ASSERT.equal(0x80, buffer[6]);",
          "109:   ASSERT.equal(0xFF, buffer[7]);",
          "110:   ASSERT.equal(-Infinity, buffer.readFloatBE(0));",
          "111:   ASSERT.equal(-Infinity, buffer.readFloatLE(4));",
          "113:   buffer.writeFloatBE(NaN, 0);",
          "114:   buffer.writeFloatLE(NaN, 4);",
          "115:   ASSERT.equal(0x7F, buffer[0]);",
          "116:   ASSERT.equal(0x80, buffer[1]);",
          "117:   ASSERT.equal(0x00, buffer[2]);",
          "118:   ASSERT.equal(0x01, buffer[3]);",
          "119:   ASSERT.equal(0x01, buffer[4]);",
          "120:   ASSERT.equal(0x00, buffer[5]);",
          "121:   ASSERT.equal(0x80, buffer[6]);",
          "122:   ASSERT.equal(0x7F, buffer[7]);",
          "123:   ASSERT.ok(isNaN(buffer.readFloatBE(0)));",
          "124:   ASSERT.ok(isNaN(buffer.readFloatLE(4)));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "45c1d4f96f48c30bd3036938fb922e050e76c2e0",
      "candidate_info": {
        "commit_hash": "45c1d4f96f48c30bd3036938fb922e050e76c2e0",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/45c1d4f96f48c30bd3036938fb922e050e76c2e0",
        "files": [
          "benchmark/http.sh",
          "benchmark/http_simple.js"
        ],
        "message": "Add switches to http_simple bench to use domains",
        "before_after_code_files": [
          "benchmark/http.sh||benchmark/http.sh",
          "benchmark/http_simple.js||benchmark/http_simple.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "benchmark/http.sh||benchmark/http.sh": [
          "File: benchmark/http.sh -> benchmark/http.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: sudo sysctl -w net.inet.tcp.msl=1000",
          "5: sudo sysctl -w kern.maxfiles=1000000 kern.maxfilesperproc=1000000",
          "6: ulimit -n 100000",
          "7: ./node benchmark/http_simple.js || exit 1 &",
          "8: sleep 1",
          "10: killall node",
          "",
          "[Removed Lines]",
          "9: ab -n 30000 -c 100 http://127.0.0.1:8000/bytes/123 | grep Req",
          "",
          "[Added Lines]",
          "11: ab -n 30000 -c 100 http://127.0.0.1:8000/${TYPE:-bytes}/${LENGTH:-1024} | grep Req",
          "",
          "---------------"
        ],
        "benchmark/http_simple.js||benchmark/http_simple.js": [
          "File: benchmark/http_simple.js -> benchmark/http_simple.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: stored = {};",
          "15: storedBuffer = {};",
          "17: var server = http.createServer(function (req, res) {",
          "18:   var commands = req.url.split(\"/\");",
          "19:   var command = commands[1];",
          "20:   var body = \"\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: var useDomains = process.env.NODE_USE_DOMAINS;",
          "20: if (useDomains) {",
          "21:   var domain = require('domain');",
          "22:   var gdom = domain.create();",
          "23:   gdom.on('error', function(er) {",
          "24:     console.log('Error on global domain', er);",
          "25:     throw er;",
          "26:   });",
          "27:   gdom.enter();",
          "28: }",
          "32:   if (useDomains) {",
          "33:     var dom = domain.create();",
          "34:     dom.add(req);",
          "35:     dom.add(res);",
          "36:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ca6ededbd1af5cc759ec98952b84c0b34edb2d40",
      "candidate_info": {
        "commit_hash": "ca6ededbd1af5cc759ec98952b84c0b34edb2d40",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/ca6ededbd1af5cc759ec98952b84c0b34edb2d40",
        "files": [
          "lib/child_process.js"
        ],
        "message": "child_process: add errno property to exceptions\n\nIn case of a write failure when using fork() an error would be thrown. The\nthrown exception was missing the `errno` property.",
        "before_after_code_files": [
          "lib/child_process.js||lichild_process.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/child_process.js||lichild_process.js": [
          "File: lib/child_process.js -> lichild_process.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:     var writeReq = channel.write(buffer, 0, buffer.length, sendHandle);",
          "134:     if (!writeReq) {",
          "136:     }",
          "138:     writeReq.oncomplete = nop;",
          "",
          "[Removed Lines]",
          "135:       throw new Error(errno + 'cannot write to IPC channel.');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "471: };",
          "479:   e.errno = e.code = errorno;",
          "480:   e.syscall = syscall;",
          "481:   return e;",
          "",
          "[Removed Lines]",
          "474: function errnoException(errorno, syscall) {",
          "478:   var e = new Error(syscall + ' ' + errorno);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eabf3c8d0f42ee59b15fc150d2a0f2f058f094d6",
      "candidate_info": {
        "commit_hash": "eabf3c8d0f42ee59b15fc150d2a0f2f058f094d6",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/eabf3c8d0f42ee59b15fc150d2a0f2f058f094d6",
        "files": [
          "deps/v8/src/debug-agent.cc"
        ],
        "message": "v8: debug: fix error handling in SendConnectMessage()\n\nThe old error handling code checked if the return value of Socket::Send() != 0,\nwhich is wrong because Socket::Send() can write less bytes than requested or\nreturn -1 on error.",
        "before_after_code_files": [
          "deps/v8/src/debug-agent.cc||deps/v8/src/debug-agent.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/v8/src/debug-agent.cc||deps/v8/src/debug-agent.cc": [
          "File: deps/v8/src/debug-agent.cc -> deps/v8/src/debug-agent.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "323:                                            const char* embedding_host) {",
          "324:   static const int kBufferSize = 80;",
          "325:   char buffer[kBufferSize];  // Sending buffer.",
          "327:   int len;",
          "330:   len = OS::SNPrintF(Vector<char>(buffer, kBufferSize),",
          "331:                      \"Type: connect\\r\\n\");",
          "335:   len = OS::SNPrintF(Vector<char>(buffer, kBufferSize),",
          "336:                      \"V8-Version: %s\\r\\n\", v8::V8::GetVersion());",
          "340:   len = OS::SNPrintF(Vector<char>(buffer, kBufferSize),",
          "341:                      \"Protocol-Version: 1\\r\\n\");",
          "345:   if (embedding_host != NULL) {",
          "346:     len = OS::SNPrintF(Vector<char>(buffer, kBufferSize),",
          "347:                        \"Embedding-Host: %s\\r\\n\", embedding_host);",
          "350:   }",
          "352:   len = OS::SNPrintF(Vector<char>(buffer, kBufferSize),",
          "353:                      \"%s: 0\\r\\n\", kContentLength);",
          "358:   len = OS::SNPrintF(Vector<char>(buffer, kBufferSize), \"\\r\\n\");",
          "",
          "[Removed Lines]",
          "326:   bool ok;",
          "332:   ok = conn->Send(buffer, len);",
          "333:   if (!ok) return false;",
          "337:   ok = conn->Send(buffer, len);",
          "338:   if (!ok) return false;",
          "342:   ok = conn->Send(buffer, len);",
          "343:   if (!ok) return false;",
          "348:     ok = conn->Send(buffer, len);",
          "349:     if (!ok) return false;",
          "354:   ok = conn->Send(buffer, len);",
          "355:   if (!ok) return false;",
          "359:   ok = conn->Send(buffer, len);",
          "360:   if (!ok) return false;",
          "",
          "[Added Lines]",
          "327:   int r;",
          "332:   r = conn->Send(buffer, len);",
          "333:   if (r != len) return false;",
          "337:   r = conn->Send(buffer, len);",
          "338:   if (r != len) return false;",
          "342:   r = conn->Send(buffer, len);",
          "343:   if (r != len) return false;",
          "348:     r = conn->Send(buffer, len);",
          "349:     if (r != len) return false;",
          "354:   r = conn->Send(buffer, len);",
          "355:   if (r != len) return false;",
          "359:   r = conn->Send(buffer, len);",
          "360:   if (r != len) return false;",
          "",
          "---------------"
        ]
      }
    }
  ]
}