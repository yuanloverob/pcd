{
  "cve_id": "CVE-2012-0854",
  "cve_desc": "The dpcm_decode_frame function in libavcodec/dpcm.c in FFmpeg before 0.9.1 does not use the proper pointer after an audio API change, which allows remote attackers to cause a denial of service (application crash) via unspecified vectors, which triggers a heap-based buffer overflow.",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "6d8e6fe9dbc365f50521cf0c4a5ffee97c970cb5",
  "patch_info": {
    "commit_hash": "6d8e6fe9dbc365f50521cf0c4a5ffee97c970cb5",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/6d8e6fe9dbc365f50521cf0c4a5ffee97c970cb5",
    "files": [
      "libavcodec/dpcm.c"
    ],
    "message": "CODEC_ID_SOL_DPCM: Fix used write buffer. Bug found by: Oana Stratulat\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
    "before_after_code_files": [
      "libavcodec/dpcm.c||libavcodec/dpcm.c"
    ]
  },
  "patch_diff": {
    "libavcodec/dpcm.c||libavcodec/dpcm.c": [
      "File: libavcodec/dpcm.c -> libavcodec/dpcm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "288:     }",
      "289:     case CODEC_ID_SOL_DPCM:",
      "290:         if (avctx->codec_tag != 3) {",
      "292:             while (buf < buf_end) {",
      "293:                 uint8_t n = *buf++;",
      "",
      "[Removed Lines]",
      "291:             uint8_t *output_samples_u8 = data;",
      "",
      "[Added Lines]",
      "291:             uint8_t *output_samples_u8 = output_samples;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4f23f24e3053394407521714e40d0b8398efd40b",
      "candidate_info": {
        "commit_hash": "4f23f24e3053394407521714e40d0b8398efd40b",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/4f23f24e3053394407521714e40d0b8398efd40b",
        "files": [
          "libavcodec/dpcm.c"
        ],
        "message": "CODEC_ID_SOL_DPCM: Fix used write buffer. Bug found by: Oana Stratulat\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\n(cherry picked from commit 6d8e6fe9dbc365f50521cf0c4a5ffee97c970cb5)\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavcodec/dpcm.c||libavcodec/dpcm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/dpcm.c||libavcodec/dpcm.c"
          ],
          "candidate": [
            "libavcodec/dpcm.c||libavcodec/dpcm.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/dpcm.c||libavcodec/dpcm.c": [
          "File: libavcodec/dpcm.c -> libavcodec/dpcm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "288:     }",
          "289:     case CODEC_ID_SOL_DPCM:",
          "290:         if (avctx->codec_tag != 3) {",
          "292:             while (buf < buf_end) {",
          "293:                 uint8_t n = *buf++;",
          "",
          "[Removed Lines]",
          "291:             uint8_t *output_samples_u8 = data;",
          "",
          "[Added Lines]",
          "291:             uint8_t *output_samples_u8 = output_samples;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "04b24cf94b3582f94a94e28506368d3ee54daad7",
      "candidate_info": {
        "commit_hash": "04b24cf94b3582f94a94e28506368d3ee54daad7",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/04b24cf94b3582f94a94e28506368d3ee54daad7",
        "files": [
          "libavcodec/dpcm.c"
        ],
        "message": "dpcm: output AV_SAMPLE_FMT_U8 for Sol DPCM subcodecs 1 and 2.\n\nUses the native sample format for the codec instead of left-shifting all\nsamples by 8.",
        "before_after_code_files": [
          "libavcodec/dpcm.c||libavcodec/dpcm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/dpcm.c||libavcodec/dpcm.c"
          ],
          "candidate": [
            "libavcodec/dpcm.c||libavcodec/dpcm.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/dpcm.c||libavcodec/dpcm.c": [
          "File: libavcodec/dpcm.c -> libavcodec/dpcm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: typedef struct DPCMContext {",
          "44:     int channels;",
          "45:     short roq_square_array[256];",
          "47:     const int *sol_table;//for SOL_DPCM",
          "48: } DPCMContext;",
          "",
          "[Removed Lines]",
          "46:     long sample[2];//for SOL_DPCM",
          "",
          "[Added Lines]",
          "46:     int sample[2];                  ///< previous sample (for SOL_DPCM)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155:         break;",
          "156:     }",
          "159:     return 0;",
          "160: }",
          "",
          "[Removed Lines]",
          "158:     avctx->sample_fmt = AV_SAMPLE_FMT_S16;",
          "",
          "[Added Lines]",
          "158:     if (avctx->codec->id == CODEC_ID_SOL_DPCM && avctx->codec_tag != 3)",
          "159:         avctx->sample_fmt = AV_SAMPLE_FMT_U8;",
          "160:     else",
          "161:         avctx->sample_fmt = AV_SAMPLE_FMT_S16;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "285:     case CODEC_ID_SOL_DPCM:",
          "286:         in = 0;",
          "287:         if (avctx->codec_tag != 3) {",
          "288:             while (in < buf_size) {",
          "300:             }",
          "301:         } else {",
          "302:             while (in < buf_size) {",
          "",
          "[Removed Lines]",
          "289:                 int n1, n2;",
          "290:                 n1 = (buf[in] >> 4) & 0xF;",
          "291:                 n2 = buf[in++] & 0xF;",
          "292:                 s->sample[0] += s->sol_table[n1];",
          "293:                 if (s->sample[0] < 0)   s->sample[0] = 0;",
          "294:                 if (s->sample[0] > 255) s->sample[0] = 255;",
          "296:                 s->sample[stereo] += s->sol_table[n2];",
          "297:                 if (s->sample[stereo] < 0)   s->sample[stereo] = 0;",
          "298:                 if (s->sample[stereo] > 255) s->sample[stereo] = 255;",
          "",
          "[Added Lines]",
          "292:             uint8_t *output_samples_u8 = data;",
          "294:                 uint8_t n = buf[in++];",
          "296:                 s->sample[0] += s->sol_table[n >> 4];",
          "297:                 s->sample[0]  = av_clip_uint8(s->sample[0]);",
          "300:                 s->sample[stereo] += s->sol_table[n & 0x0F];",
          "301:                 s->sample[stereo]  = av_clip_uint8(s->sample[stereo]);",
          "",
          "---------------"
        ]
      }
    }
  ]
}