{
  "cve_id": "CVE-2014-0207",
  "cve_desc": "The cdf_read_short_sector function in cdf.c in file before 5.19, as used in the Fileinfo component in PHP before 5.4.30 and 5.5.x before 5.5.14, allows remote attackers to cause a denial of service (assertion failure and application exit) via a crafted CDF file.",
  "repo": "file/file",
  "patch_hash": "6d209c1c489457397a5763bca4b28e43aac90391",
  "patch_info": {
    "commit_hash": "6d209c1c489457397a5763bca4b28e43aac90391",
    "repo": "file/file",
    "commit_url": "https://github.com/file/file/commit/6d209c1c489457397a5763bca4b28e43aac90391",
    "files": [
      "src/cdf.c",
      "src/readcdf.c"
    ],
    "message": "Apply patches from file-CVE-2012-1571.patch From Francisco Alonso Espejo:     file < 5.18/git version can be made to crash when checking some     corrupt CDF files (Using an invalid cdf_read_short_sector size)     The problem I found here, is that in most situations (if     h_short_sec_size_p2 > 8) because the blocksize is 512 and normal     values are 06 which means reading 64 bytes.As long as the check     for the block size copy is not checked properly (there's an assert     that makes wrong/invalid assumptions)",
    "before_after_code_files": [
      "src/cdf.c||src/cdf.c",
      "src/readcdf.c||src/readcdf.c"
    ]
  },
  "patch_diff": {
    "src/cdf.c||src/cdf.c": [
      "File: src/cdf.c -> src/cdf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: #include \"file.h\"",
      "37: #ifndef lint",
      "39: #endif",
      "41: #include <assert.h>",
      "",
      "[Removed Lines]",
      "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.54 2014/02/25 20:52:02 christos Exp $\")",
      "",
      "[Added Lines]",
      "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.55 2014/02/27 23:26:17 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "352:  size_t ss = CDF_SHORT_SEC_SIZE(h);",
      "353:  size_t pos = CDF_SHORT_SEC_POS(h, id);",
      "354:  assert(ss == len);",
      "356:   DPRINTF((\"Out of bounds read %\" SIZE_T_FORMAT \"u > %\"",
      "357:       SIZE_T_FORMAT \"u\\n\",",
      "359:   return -1;",
      "360:  }",
      "361:  (void)memcpy(((char *)buf) + offs,",
      "",
      "[Removed Lines]",
      "355:  if (pos > CDF_SEC_SIZE(h) * sst->sst_len) {",
      "358:       pos, CDF_SEC_SIZE(h) * sst->sst_len));",
      "",
      "[Added Lines]",
      "355:  if (pos + len > CDF_SEC_SIZE(h) * sst->sst_len) {",
      "358:       pos + len, CDF_SEC_SIZE(h) * sst->sst_len));",
      "",
      "---------------"
    ],
    "src/readcdf.c||src/readcdf.c": [
      "File: src/readcdf.c -> src/readcdf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: #include \"file.h\"",
      "28: #ifndef lint",
      "30: #endif",
      "32: #include <assert.h>",
      "",
      "[Removed Lines]",
      "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.39 2014/02/27 23:26:18 christos Exp $\")",
      "",
      "[Added Lines]",
      "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.40 2014/03/06 15:23:33 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "121: private int",
      "122: cdf_file_property_info(struct magic_set *ms, const cdf_property_info_t *info,",
      "124: {",
      "125:         size_t i;",
      "126:         cdf_timestamp_t tp;",
      "",
      "[Removed Lines]",
      "123:     size_t count, const uint64_t clsid[2])",
      "",
      "[Added Lines]",
      "123:     size_t count, const cdf_directory_t *root_storage)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "130:         const char *s;",
      "131:         int len;",
      "136:         for (i = 0; i < count; i++) {",
      "137:                 cdf_print_property_name(buf, sizeof(buf), info[i].pi_id);",
      "",
      "[Removed Lines]",
      "133:         if (!NOTMIME(ms))",
      "134:   str = cdf_clsid_to_mime(clsid, clsid2mime);",
      "",
      "[Added Lines]",
      "133:         if (!NOTMIME(ms) && root_storage)",
      "134:   str = cdf_clsid_to_mime(root_storage->d_storage_uuid, clsid2mime);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "237: private int",
      "238: cdf_file_summary_info(struct magic_set *ms, const cdf_header_t *h,",
      "240: {",
      "241:         cdf_summary_info_header_t si;",
      "242:         cdf_property_info_t *info;",
      "",
      "[Removed Lines]",
      "239:     const cdf_stream_t *sst, const uint64_t clsid[2])",
      "",
      "[Added Lines]",
      "239:     const cdf_stream_t *sst, const cdf_directory_t *root_storage)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "276:                                 return -2;",
      "277:                         break;",
      "278:                 }",
      "286:         free(info);",
      "288:         return m == -1 ? -2 : m;",
      "",
      "[Removed Lines]",
      "279:   str = cdf_clsid_to_mime(clsid, clsid2desc);",
      "280:   if (str)",
      "281:                         if (file_printf(ms, \", %s\", str) == -1)",
      "282:     return -2;",
      "283:         }",
      "285:         m = cdf_file_property_info(ms, info, count, clsid);",
      "",
      "[Added Lines]",
      "279:   if (root_storage) {",
      "280:    str = cdf_clsid_to_mime(root_storage->d_storage_uuid, clsid2desc);",
      "281:    if (str)",
      "282:     if (file_printf(ms, \", %s\", str) == -1)",
      "283:      return -2;",
      "284:    }",
      "285:   }",
      "287:         m = cdf_file_property_info(ms, info, count, root_storage);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "381: #ifdef CDF_DEBUG",
      "382:         cdf_dump_summary_info(&h, &scn);",
      "383: #endif",
      "388:  if (i == 0) {",
      "389:   const char *str = NULL;",
      "",
      "[Removed Lines]",
      "384:         if ((i = cdf_file_summary_info(ms, &h, &scn,",
      "385:      root_storage->d_storage_uuid)) < 0)",
      "386:                 expn = \"Can't expand summary_info\";",
      "",
      "[Added Lines]",
      "386:         if ((i = cdf_file_summary_info(ms, &h, &scn, root_storage)) < 0)",
      "387:             expn = \"Can't expand summary_info\";",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "64485737cf5e0251ab82d0a2d50e9903ab9ac588",
      "candidate_info": {
        "commit_hash": "64485737cf5e0251ab82d0a2d50e9903ab9ac588",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/64485737cf5e0251ab82d0a2d50e9903ab9ac588",
        "files": [
          "configure.ac",
          "src/file.c",
          "src/file.h",
          "src/funcs.c",
          "src/readcdf.c",
          "src/softmagic.c"
        ],
        "message": "don't use setlocale(3); it is not thread-safe.",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/file.c||src/file.c",
          "src/file.h||src/file.h",
          "src/funcs.c||src/funcs.c",
          "src/readcdf.c||src/readcdf.c",
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readcdf.c||src/readcdf.c"
          ],
          "candidate": [
            "src/readcdf.c||src/readcdf.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "138: fi])",
          "140: dnl Checks for functions",
          "143: dnl Provide implementation of some required functions if necessary",
          "144: AC_REPLACE_FUNCS(getopt_long asprintf vasprintf strlcpy strlcat getline ctime_r asctime_r pread strcasestr fmtcheck)",
          "",
          "[Removed Lines]",
          "141: AC_CHECK_FUNCS(strerror strndup strtoul mkstemp mkostemp utimes utime wcwidth strtof)",
          "",
          "[Added Lines]",
          "141: AC_CHECK_FUNCS(strerror strndup strtoul mkstemp mkostemp utimes utime wcwidth strtof newlocale uselocale freelocale)",
          "",
          "---------------"
        ],
        "src/file.c||src/file.c": [
          "File: src/file.c -> src/file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: file.c,v 1.152 2013/06/26 14:46:54 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: file.c,v 1.153 2014/02/11 15:41:04 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54: #ifdef HAVE_UNISTD_H",
          "56: #endif",
          "60: #ifdef HAVE_WCHAR_H",
          "61: #include <wchar.h>",
          "62: #endif",
          "",
          "[Removed Lines]",
          "57: #ifdef HAVE_LOCALE_H",
          "58: #include <locale.h>",
          "59: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/file.h||src/file.h": [
          "File: src/file.h -> src/file.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "471:     size_t);",
          "474: typedef struct {",
          "475:  const char *pat;",
          "477:  int rc;",
          "478:  regex_t rx;",
          "479: } file_regex_t;",
          "",
          "[Removed Lines]",
          "476:  char *old_lc_ctype;",
          "",
          "[Added Lines]",
          "474: #if defined(HAVE_LOCALE_H)",
          "475: #include <locale.h>",
          "476: #endif",
          "480: #if defined(HAVE_NEWLOCALE) && defined(HAVE_USELOCALE) && defined(HAVE_FREELOCALE)",
          "481: #define USE_C_LOCALE",
          "482:  locale_t old_lc_ctype;",
          "483:  locale_t c_lc_ctype;",
          "484: #endif",
          "",
          "---------------"
        ],
        "src/funcs.c||src/funcs.c": [
          "File: src/funcs.c -> src/funcs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "33: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.71 2014/05/05 20:53:10 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.72 2014/05/14 23:15:42 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: #if defined(HAVE_LIMITS_H)",
          "46: #include <limits.h>",
          "47: #endif",
          "52: #ifndef SIZE_MAX",
          "53: #define SIZE_MAX ((size_t)~0)",
          "",
          "[Removed Lines]",
          "48: #if defined(HAVE_LOCALE_H)",
          "49: #include <locale.h>",
          "50: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "455: protected int",
          "456: file_regcomp(file_regex_t *rx, const char *pat, int flags)",
          "457: {",
          "461:  assert(rx->old_lc_ctype != NULL);",
          "462:  rx->pat = pat;",
          "465:  return rx->rc = regcomp(&rx->rx, pat, flags);",
          "466: }",
          "",
          "[Removed Lines]",
          "458:  rx->old_lc_ctype = setlocale(LC_CTYPE, NULL);",
          "459:  assert(rx->old_lc_ctype != NULL);",
          "460:  rx->old_lc_ctype = strdup(rx->old_lc_ctype);",
          "464:  (void)setlocale(LC_CTYPE, \"C\");",
          "",
          "[Added Lines]",
          "455: #ifdef USE_C_LOCALE",
          "456:  rx->c_lc_ctype = newlocale(LC_CTYPE_MASK, \"C\", 0);",
          "457:  assert(rx->c_lc_ctype != NULL);",
          "458:  rx->old_lc_ctype = uselocale(rx->c_lc_ctype);",
          "460: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "478: {",
          "479:  if (rx->rc == 0)",
          "480:   regfree(&rx->rx);",
          "483: }",
          "485: protected void",
          "",
          "[Removed Lines]",
          "481:  (void)setlocale(LC_CTYPE, rx->old_lc_ctype);",
          "482:  free(rx->old_lc_ctype);",
          "",
          "[Added Lines]",
          "479: #ifdef USE_C_LOCALE",
          "480:  (void)uselocale(rx->old_lc_ctype);",
          "481:  freelocale(rx->c_lc_ctype);",
          "482: #endif",
          "",
          "---------------"
        ],
        "src/readcdf.c||src/readcdf.c": [
          "File: src/readcdf.c -> src/readcdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"file.h\"",
          "28: #ifndef lint",
          "30: #endif",
          "32: #include <assert.h>",
          "",
          "[Removed Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.46 2014/08/27 06:59:35 christos Exp $\")",
          "",
          "[Added Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.47 2014/08/27 13:00:37 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: #include <string.h>",
          "36: #include <time.h>",
          "37: #include <ctype.h>",
          "42: #include \"cdf.h\"",
          "43: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "38: #if defined(HAVE_LOCALE_H)",
          "39: #include <locale.h>",
          "40: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "107: {",
          "108:  size_t i;",
          "109:  const char *rv = NULL;",
          "115:  assert(old_lc_ctype != NULL);",
          "117:  for (i = 0; nv[i].pattern != NULL; i++)",
          "118:   if (strcasestr(vbuf, nv[i].pattern) != NULL) {",
          "119:    rv = nv[i].mime;",
          "120:    break;",
          "121:   }",
          "124:  return rv;",
          "125: }",
          "",
          "[Removed Lines]",
          "110:  char *old_lc_ctype;",
          "112:  old_lc_ctype = setlocale(LC_CTYPE, NULL);",
          "113:  assert(old_lc_ctype != NULL);",
          "114:  old_lc_ctype = strdup(old_lc_ctype);",
          "116:  (void)setlocale(LC_CTYPE, \"C\");",
          "122:  (void)setlocale(LC_CTYPE, old_lc_ctype);",
          "123:  free(old_lc_ctype);",
          "",
          "[Added Lines]",
          "107: #ifdef USE_C_LOCALE",
          "108:  locale_t old_lc_ctype, c_lc_ctype;",
          "110:  c_lc_ctype = newlocale(LC_CTYPE_MASK, \"C\", 0);",
          "111:  assert(c_lc_ctype != NULL);",
          "112:  old_lc_ctype = uselocale(c_lc_ctype);",
          "114: #endif",
          "120: #ifdef USE_C_LOCALE",
          "121:  (void)uselocale(old_lc_ctype);",
          "122:  freelocale(c_lc_ctype);",
          "123: #endif",
          "",
          "---------------"
        ],
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.191 2014/06/04 17:36:34 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.192 2014/08/30 15:30:11 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41: #include <ctype.h>",
          "42: #include <stdlib.h>",
          "43: #include <time.h>",
          "49: private int match(struct magic_set *, struct magic *, uint32_t,",
          "50:     const unsigned char *, size_t, size_t, int, int, int, int, int *, int *,",
          "",
          "[Removed Lines]",
          "44: #if defined(HAVE_LOCALE_H)",
          "45: #include <locale.h>",
          "46: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b49cc909adf64fad4afe81f57d639f0699a870ac",
      "candidate_info": {
        "commit_hash": "b49cc909adf64fad4afe81f57d639f0699a870ac",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/b49cc909adf64fad4afe81f57d639f0699a870ac",
        "files": [
          "src/readcdf.c"
        ],
        "message": "Add microsoft installer files, improve the logic for handing mime and non-mime on cdf. Parts from Guy Helmer",
        "before_after_code_files": [
          "src/readcdf.c||src/readcdf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readcdf.c||src/readcdf.c"
          ],
          "candidate": [
            "src/readcdf.c||src/readcdf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/readcdf.c||src/readcdf.c": [
          "File: src/readcdf.c -> src/readcdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"file.h\"",
          "28: #ifndef lint",
          "30: #endif",
          "32: #include <stdlib.h>",
          "",
          "[Removed Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.32 2012/06/20 21:39:56 christos Exp $\")",
          "",
          "[Added Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.33 2012/06/20 21:52:36 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41: #define NOTMIME(ms) (((ms)->flags & MAGIC_MIME) == 0)",
          "43: private int",
          "44: cdf_file_property_info(struct magic_set *ms, const cdf_property_info_t *info,",
          "45:     size_t count)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: static const struct nv {",
          "44:  const char *pattern;",
          "45:  const char *mime;",
          "46: } app2mime[] =  {",
          "47:  { \"Word\",   \"msword\",  },",
          "48:  { \"Excel\",   \"vnd.ms-excel\",  },",
          "49:  { \"Powerpoint\",   \"vnd.ms-powerpoint\", },",
          "50:  { \"Crystal Reports\",  \"x-rpt\",  },",
          "51:  { \"Advanced Installer\",  \"x-msi\",  },",
          "52:  { \"InstallShield\",  \"x-msi\",  },",
          "53:  { \"Microsoft Patch Compiler\", \"x-msi\",  },",
          "54:  { \"NAnt\",   \"x-msi\",  },",
          "55:  { \"Windows Installer\",  \"x-msi\",  },",
          "56:  { NULL,    NULL,   },",
          "57: }, name2mime[] = {",
          "58:  { \"WordDocument\",  \"msword\",  },",
          "59:  { \"PowerPoint\",   \"vnd.ms-powerpoint\", },",
          "60:  { \"DigitalSignature\",  \"x-msi\",  },",
          "61:  { NULL,    NULL,   },",
          "62: }, name2desc[] = {",
          "63:  { \"WordDocument\",  \"Microsoft Office Word\",},",
          "64:  { \"PowerPoint\",   \"Microsoft PowerPoint\", },",
          "65:  { \"DigitalSignature\",  \"Microsoft Installer\", },",
          "66:  { NULL,    NULL,   },",
          "67: };",
          "69: private const char *",
          "70: cdf_app_to_mime(const char *vbuf, const struct nv *nv)",
          "71: {",
          "72:  size_t i;",
          "74:  for (i = 0; nv[i].pattern != NULL; i++)",
          "75:   if (strstr(vbuf, nv[i].pattern) != NULL)",
          "76:    return nv[i].mime;",
          "77:  return NULL;",
          "78: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "109:                                                         return -1;",
          "110:                                         }",
          "111:                                 } else if (info[i].pi_id ==",
          "124:                         break;",
          "125:                 case CDF_FILETIME:",
          "126:                         tp = info[i].pi_tp;",
          "",
          "[Removed Lines]",
          "112:                                         CDF_PROPERTY_NAME_OF_APPLICATION) {",
          "113:                                         if (strstr(vbuf, \"Word\"))",
          "114:                                                 str = \"msword\";",
          "115:                                         else if (strstr(vbuf, \"Excel\"))",
          "116:                                                 str = \"vnd.ms-excel\";",
          "117:                                         else if (strstr(vbuf, \"Powerpoint\"))",
          "118:                                                 str = \"vnd.ms-powerpoint\";",
          "119:                                         else if (strstr(vbuf,",
          "120:                                             \"Crystal Reports\"))",
          "121:                                                 str = \"x-rpt\";",
          "122:                                 }",
          "123:                         }",
          "",
          "[Added Lines]",
          "149:         CDF_PROPERTY_NAME_OF_APPLICATION) {",
          "150:      str = cdf_app_to_mime(vbuf, app2mime);",
          "151:     }",
          "152:    }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "136:                                         char *c, *ec;",
          "137:                                         cdf_timestamp_to_timespec(&ts, tp);",
          "138:                                         c = cdf_ctime(&ts.tv_sec, tbuf);",
          "142:                                         if (NOTMIME(ms) && file_printf(ms,",
          "143:                                             \", %s: %s\", buf, c) == -1)",
          "",
          "[Removed Lines]",
          "139:                                         if ((ec = strchr(c, '\\n')) != NULL)",
          "",
          "[Added Lines]",
          "168:                                         if (c != NULL &&",
          "169:          (ec = strchr(c, '\\n')) != NULL)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "277:         if ((i = cdf_file_summary_info(ms, &h, &scn)) < 0)",
          "278:                 expn = \"Can't expand summary_info\";",
          "279:  if (i == 0) {",
          "281:   cdf_directory_t *d;",
          "282:   char name[__arraycount(d->d_name)];",
          "283:   size_t j, k;",
          "284:   for (j = 0; j < dir.dir_len; j++) {",
          "296:   }",
          "300:  }",
          "301:         free(scn.sst_tab);",
          "302: out4:",
          "",
          "[Removed Lines]",
          "280:   const char *str = \"vnd.ms-office\";",
          "285:       d = &dir.dir_tab[j];",
          "286:       for (k = 0; k < sizeof(name); k++)",
          "287:    name[k] = (char)cdf_tole2(d->d_name[k]);",
          "288:       if (strstr(name, \"WordDocument\") != 0) {",
          "289:    str = \"msword\";",
          "290:    break;",
          "291:       }",
          "292:       if (strstr(name, \"PowerPoint\") != 0) {",
          "293:    str = \"vnd.ms-powerpoint\";",
          "294:    break;",
          "295:       }",
          "297:                 if (file_printf(ms, \"application/%s\", str) == -1)",
          "298:                         return -1;",
          "299:   i = 1;",
          "",
          "[Added Lines]",
          "310:   const char *str = NULL;",
          "315:    d = &dir.dir_tab[j];",
          "316:    for (k = 0; k < sizeof(name); k++)",
          "317:     name[k] = (char)cdf_tole2(d->d_name[k]);",
          "318:    if (NOTMIME(ms))",
          "319:     str = cdf_app_to_mime(name, name2desc);",
          "320:    else",
          "321:     str = cdf_app_to_mime(name, name2mime);",
          "322:    if (str != NULL)",
          "323:     break;",
          "324:   }",
          "325:   if (NOTMIME(ms)) {",
          "326:    if (str != NULL) {",
          "327:     if (file_printf(ms, \"%s\", str) == -1)",
          "328:      return -1;",
          "329:     i = 1;",
          "330:    }",
          "331:   } else {",
          "332:    if (str == NULL)",
          "333:     str = \"vnd.ms-office\";",
          "334:    if (file_printf(ms, \"application/%s\", str) == -1)",
          "335:     return -1;",
          "336:    i = 1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "308: out1:",
          "309:         free(sat.sat_tab);",
          "310: out0:",
          "327:         return i;",
          "328: }",
          "",
          "[Removed Lines]",
          "311:         if (i != 1) {",
          "312:   if (i == -1) {",
          "313:       if (NOTMIME(ms)) {",
          "314:    if (file_printf(ms,",
          "315:        \"Composite Document File V2 Document\") == -1)",
          "316:        return -1;",
          "317:    if (*expn)",
          "318:        if (file_printf(ms, \", %s%s\", corrupt, expn) == -1)",
          "319:     return -1;",
          "320:       } else {",
          "321:    if (file_printf(ms, \"application/CDFV2-corrupt\") == -1)",
          "322:        return -1;",
          "323:       }",
          "324:   }",
          "325:                 i = 1;",
          "326:         }",
          "",
          "[Added Lines]",
          "349:  if (i == -1) {",
          "350:      if (NOTMIME(ms)) {",
          "351:   if (file_printf(ms,",
          "352:       \"Composite Document File V2 Document\") == -1)",
          "353:       return -1;",
          "354:   if (*expn)",
          "355:       if (file_printf(ms, \", %s%s\", corrupt, expn) == -1)",
          "356:    return -1;",
          "357:      } else {",
          "358:   if (file_printf(ms, \"application/CDFV2-corrupt\") == -1)",
          "359:       return -1;",
          "360:      }",
          "361:      i = 1;",
          "362:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "de589a5cee7e33c652ace8cc756b816698b5e564",
      "candidate_info": {
        "commit_hash": "de589a5cee7e33c652ace8cc756b816698b5e564",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/de589a5cee7e33c652ace8cc756b816698b5e564",
        "files": [
          "src/cdf.c",
          "src/cdf_time.c"
        ],
        "message": "Fix debugging build.",
        "before_after_code_files": [
          "src/cdf.c||src/cdf.c",
          "src/cdf_time.c||src/cdf_time.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cdf.c||src/cdf.c"
          ],
          "candidate": [
            "src/cdf.c||src/cdf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.52 2013/02/18 15:40:59 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.53 2013/02/26 16:20:42 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1138:      \"user stream\", \"lockbytes\", \"property\", \"root storage\" };",
          "1140:  for (i = 0; i < dir->dir_len; i++) {",
          "1141:   d = &dir->dir_tab[i];",
          "1142:   for (j = 0; j < sizeof(name); j++)",
          "1143:    name[j] = (char)CDF_TOLE2(d->d_name[j]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1141:   char buf[26];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1153:   (void)fprintf(stderr, \"Right child: %d\\n\", d->d_right_child);",
          "1154:   (void)fprintf(stderr, \"Flags: 0x%x\\n\", d->d_flags);",
          "1155:   cdf_timestamp_to_timespec(&ts, d->d_created);",
          "1157:   cdf_timestamp_to_timespec(&ts, d->d_modified);",
          "1159:   (void)fprintf(stderr, \"Stream %d\\n\", d->d_stream_first_sector);",
          "1160:   (void)fprintf(stderr, \"Size %d\\n\", d->d_size);",
          "1161:   switch (d->d_type) {",
          "",
          "[Removed Lines]",
          "1156:   (void)fprintf(stderr, \"Created %s\", cdf_ctime(&ts.tv_sec));",
          "1158:   (void)fprintf(stderr, \"Modified %s\", cdf_ctime(&ts.tv_sec));",
          "",
          "[Added Lines]",
          "1157:   (void)fprintf(stderr, \"Created %s\", cdf_ctime(&ts.tv_sec, buf));",
          "1159:   (void)fprintf(stderr, \"Modified %s\",",
          "1160:       cdf_ctime(&ts.tv_sec, buf));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1233:     cdf_print_elapsed_time(buf, sizeof(buf), tp);",
          "1234:     (void)fprintf(stderr, \"timestamp %s\\n\", buf);",
          "1235:    } else {",
          "1236:     cdf_timestamp_to_timespec(&ts, tp);",
          "1237:     (void)fprintf(stderr, \"timestamp %s\",",
          "1239:    }",
          "1240:    break;",
          "1241:   case CDF_CLIPBOARD:",
          "",
          "[Removed Lines]",
          "1238:         cdf_ctime(&ts.tv_sec));",
          "",
          "[Added Lines]",
          "1238:     char buf[26];",
          "1241:         cdf_ctime(&ts.tv_sec, buf));",
          "",
          "---------------"
        ],
        "src/cdf_time.c||src/cdf_time.c": [
          "File: src/cdf_time.c -> src/cdf_time.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #include <time.h>",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: cdf_time.c,v 1.11 2011/12/13 13:48:41 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: cdf_time.c,v 1.12 2012/05/15 17:14:36 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "176: }",
          "180: int",
          "181: main(int argc, char *argv[])",
          "182: {",
          "",
          "[Removed Lines]",
          "179: #ifdef TEST",
          "",
          "[Added Lines]",
          "179: #ifdef TEST_TIME",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9979db029d671da36b9a6a7f375b487ea1ee9e65",
      "candidate_info": {
        "commit_hash": "9979db029d671da36b9a6a7f375b487ea1ee9e65",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/9979db029d671da36b9a6a7f375b487ea1ee9e65",
        "files": [
          "ChangeLog",
          "src/cdf.c",
          "src/cdf.h"
        ],
        "message": "PR/411: Fix memory corruption from corrupt? thumbs file",
        "before_after_code_files": [
          "src/cdf.c||src/cdf.c",
          "src/cdf.h||src/cdf.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cdf.c||src/cdf.c"
          ],
          "candidate": [
            "src/cdf.c||src/cdf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.69 2014/12/04 15:56:46 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.70 2015/01/02 21:29:39 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1004: #define extract_catalog_field(t, f, l) \\",
          "1008: int",
          "1009: cdf_unpack_catalog(const cdf_header_t *h, const cdf_stream_t *sst,",
          "",
          "[Removed Lines]",
          "1005:     memcpy(&ce[i].f, b + (l), sizeof(ce[i].f)); \\",
          "1006:     ce[i].f = CAST(t, CDF_TOLE(ce[i].f))",
          "",
          "[Added Lines]",
          "1005:     if (b + l + sizeof(cep->f) > eb) \\",
          "1006:  break; \\",
          "1007:     memcpy(&cep->f, b + (l), sizeof(cep->f)); \\",
          "1008:     ce[i].f = CAST(t, CDF_TOLE(cep->f))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1030:  (*cat)->cat_num = nr;",
          "1031:  ce = (*cat)->cat_e;",
          "1032:  b = CAST(const char *, sst->sst_tab);",
          "1034:   extract_catalog_field(uint16_t, ce_namlen, 0);",
          "1035:   extract_catalog_field(uint16_t, ce_num, 2);",
          "1036:   extract_catalog_field(uint64_t, ce_timestamp, 6);",
          "1045:   }",
          "1048:  }",
          "1049:  return 0;",
          "1050: }",
          "",
          "[Removed Lines]",
          "1033:  for (i = 0; i < nr; i++) {",
          "1037:   reclen = ce[i].ce_namlen;",
          "1038:   ce[i].ce_namlen =",
          "1039:       sizeof(ce[i].ce_name) / sizeof(ce[i].ce_name[0]) - 1;",
          "1040:   if (ce[i].ce_namlen > reclen - 14)",
          "1041:    ce[i].ce_namlen = reclen - 14;",
          "1042:   np = CAST(const uint16_t *, CAST(const void *, (b + 16)));",
          "1043:   for (k = 0; k < ce[i].ce_namlen; k++) {",
          "1046:   ce[i].ce_name[ce[i].ce_namlen] = 0;",
          "1047:   b += reclen;",
          "",
          "[Added Lines]",
          "1035:  for (i = 0; i < nr; i++, b += reclen) {",
          "1036:   cdf_catalog_entry_t *cep = &ce[i];",
          "1037:   uint16_t rlen;",
          "1042:   reclen = cep->ce_namlen;",
          "1044:   if (reclen < 14) {",
          "1045:    cep->ce_namlen = 0;",
          "1046:    cep->ce_name[0] = 0;",
          "1047:    continue;",
          "1050:   cep->ce_namlen = __arraycount(cep->ce_name) - 1;",
          "1051:   rlen = reclen - 14;",
          "1052:   if (cep->ce_namlen > rlen)",
          "1053:    cep->ce_namlen = rlen;",
          "1055:   np = CAST(const uint16_t *, CAST(const void *, (b + 16)));",
          "1056:   if (CAST(const char *, np + cep->ce_namlen) > eb)",
          "1057:    break;",
          "1059:   for (k = 0; k < cep->ce_namlen; k++)",
          "1061:   cep->ce_name[cep->ce_namlen] = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1190: }",
          "1192: void",
          "1194: {",
          "1195:  size_t i, j;",
          "1197:  char abuf[16];",
          "1198:  (void)fprintf(stderr, \"%.4x: \", 0);",
          "1199:  for (i = 0, j = 0; i < len; i++, p++) {",
          "",
          "[Removed Lines]",
          "1193: cdf_dump(void *v, size_t len)",
          "1196:  unsigned char *p = v;",
          "",
          "[Added Lines]",
          "1207: cdf_dump(const void *v, size_t len)",
          "1210:  const unsigned char *p = v;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1329:     cdf_print_elapsed_time(buf, sizeof(buf), tp);",
          "1330:     (void)fprintf(stderr, \"timestamp %s\\n\", buf);",
          "1331:    } else {",
          "1333:     cdf_timestamp_to_timespec(&ts, tp);",
          "1334:     (void)fprintf(stderr, \"timestamp %s\",",
          "1336:    }",
          "1337:    break;",
          "1338:   case CDF_CLIPBOARD:",
          "",
          "[Removed Lines]",
          "1332:     char buf[26];",
          "1335:         cdf_ctime(&ts.tv_sec, buf));",
          "",
          "[Added Lines]",
          "1346:     char tbuf[26];",
          "1349:         cdf_ctime(&ts.tv_sec, tbuf));",
          "",
          "---------------"
        ],
        "src/cdf.h||src/cdf.h": [
          "File: src/cdf.h -> src/cdf.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "339: #ifdef CDF_DEBUG",
          "340: void cdf_dump_header(const cdf_header_t *);",
          "341: void cdf_dump_sat(const char *, const cdf_sat_t *, size_t);",
          "343: void cdf_dump_stream(const cdf_header_t *, const cdf_stream_t *);",
          "344: void cdf_dump_dir(const cdf_info_t *, const cdf_header_t *, const cdf_sat_t *,",
          "345:     const cdf_sat_t *, const cdf_stream_t *, const cdf_dir_t *);",
          "",
          "[Removed Lines]",
          "342: void cdf_dump(void *, size_t);",
          "",
          "[Added Lines]",
          "342: void cdf_dump(const void *, size_t);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "db5c189202c5703904060e842d1217535d240b9d",
      "candidate_info": {
        "commit_hash": "db5c189202c5703904060e842d1217535d240b9d",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/db5c189202c5703904060e842d1217535d240b9d",
        "files": [
          "src/cdf.c",
          "src/readcdf.c"
        ],
        "message": "Apply patches from file-CVE-2012-1571.patch From Francisco Alonso Espejo:     file < 5.18/git version can be made to crash when checking some     corrupt CDF files (Using an invalid cdf_read_short_sector size)     The problem I found here, is that in most situations (if     h_short_sec_size_p2 > 8) because the blocksize is 512 and normal     values are 06 which means reading 64 bytes.As long as the check     for the block size copy is not checked properly (there's an assert     that makes wrong/invalid assumptions)",
        "before_after_code_files": [
          "src/cdf.c||src/cdf.c",
          "src/readcdf.c||src/readcdf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/cdf.c||src/cdf.c",
            "src/readcdf.c||src/readcdf.c"
          ],
          "candidate": [
            "src/cdf.c||src/cdf.c",
            "src/readcdf.c||src/readcdf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.55 2014/02/27 23:26:17 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.56 2014/05/05 16:11:21 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "352:  size_t ss = CDF_SHORT_SEC_SIZE(h);",
          "353:  size_t pos = CDF_SHORT_SEC_POS(h, id);",
          "354:  assert(ss == len);",
          "356:   DPRINTF((\"Out of bounds read %\" SIZE_T_FORMAT \"u > %\"",
          "357:       SIZE_T_FORMAT \"u\\n\",",
          "359:   return -1;",
          "360:  }",
          "361:  (void)memcpy(((char *)buf) + offs,",
          "",
          "[Removed Lines]",
          "355:  if (pos > CDF_SEC_SIZE(h) * sst->sst_len) {",
          "358:       pos, CDF_SEC_SIZE(h) * sst->sst_len));",
          "",
          "[Added Lines]",
          "355:  if (pos + len > CDF_SEC_SIZE(h) * sst->sst_len) {",
          "358:       pos + len, CDF_SEC_SIZE(h) * sst->sst_len));",
          "",
          "---------------"
        ],
        "src/readcdf.c||src/readcdf.c": [
          "File: src/readcdf.c -> src/readcdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"file.h\"",
          "28: #ifndef lint",
          "30: #endif",
          "32: #include <assert.h>",
          "",
          "[Removed Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.40 2014/03/06 15:23:33 christos Exp $\")",
          "",
          "[Added Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.41 2014/05/05 16:11:21 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "121: private int",
          "122: cdf_file_property_info(struct magic_set *ms, const cdf_property_info_t *info,",
          "124: {",
          "125:         size_t i;",
          "126:         cdf_timestamp_t tp;",
          "",
          "[Removed Lines]",
          "123:     size_t count, const uint64_t clsid[2])",
          "",
          "[Added Lines]",
          "123:     size_t count, const cdf_directory_t *root_storage)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "130:         const char *s;",
          "131:         int len;",
          "136:         for (i = 0; i < count; i++) {",
          "137:                 cdf_print_property_name(buf, sizeof(buf), info[i].pi_id);",
          "",
          "[Removed Lines]",
          "133:         if (!NOTMIME(ms))",
          "134:   str = cdf_clsid_to_mime(clsid, clsid2mime);",
          "",
          "[Added Lines]",
          "133:         if (!NOTMIME(ms) && root_storage)",
          "134:   str = cdf_clsid_to_mime(root_storage->d_storage_uuid, clsid2mime);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "237: private int",
          "238: cdf_file_summary_info(struct magic_set *ms, const cdf_header_t *h,",
          "240: {",
          "241:         cdf_summary_info_header_t si;",
          "242:         cdf_property_info_t *info;",
          "",
          "[Removed Lines]",
          "239:     const cdf_stream_t *sst, const uint64_t clsid[2])",
          "",
          "[Added Lines]",
          "239:     const cdf_stream_t *sst, const cdf_directory_t *root_storage)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "276:                                 return -2;",
          "277:                         break;",
          "278:                 }",
          "286:         free(info);",
          "288:         return m == -1 ? -2 : m;",
          "",
          "[Removed Lines]",
          "279:   str = cdf_clsid_to_mime(clsid, clsid2desc);",
          "280:   if (str)",
          "281:                         if (file_printf(ms, \", %s\", str) == -1)",
          "282:     return -2;",
          "283:         }",
          "285:         m = cdf_file_property_info(ms, info, count, clsid);",
          "",
          "[Added Lines]",
          "279:   if (root_storage) {",
          "280:    str = cdf_clsid_to_mime(root_storage->d_storage_uuid, clsid2desc);",
          "281:    if (str)",
          "282:     if (file_printf(ms, \", %s\", str) == -1)",
          "283:      return -2;",
          "284:    }",
          "285:   }",
          "287:         m = cdf_file_property_info(ms, info, count, root_storage);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "381: #ifdef CDF_DEBUG",
          "382:         cdf_dump_summary_info(&h, &scn);",
          "383: #endif",
          "388:  if (i == 0) {",
          "389:   const char *str = NULL;",
          "",
          "[Removed Lines]",
          "384:         if ((i = cdf_file_summary_info(ms, &h, &scn,",
          "385:      root_storage->d_storage_uuid)) < 0)",
          "386:                 expn = \"Can't expand summary_info\";",
          "",
          "[Added Lines]",
          "386:         if ((i = cdf_file_summary_info(ms, &h, &scn, root_storage)) < 0)",
          "387:             expn = \"Can't expand summary_info\";",
          "",
          "---------------"
        ]
      }
    }
  ]
}