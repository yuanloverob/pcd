{
  "cve_id": "CVE-2015-2696",
  "cve_desc": "lib/gssapi/krb5/iakerb.c in MIT Kerberos 5 (aka krb5) before 1.14 relies on an inappropriate context handle, which allows remote attackers to cause a denial of service (incorrect pointer read and process crash) via a crafted IAKERB packet that is mishandled during a gss_inquire_context call.",
  "repo": "krb5/krb5",
  "patch_hash": "e04f0283516e80d2f93366e0d479d13c9b5c8c2a",
  "patch_info": {
    "commit_hash": "e04f0283516e80d2f93366e0d479d13c9b5c8c2a",
    "repo": "krb5/krb5",
    "commit_url": "https://github.com/krb5/krb5/commit/e04f0283516e80d2f93366e0d479d13c9b5c8c2a",
    "files": [
      "src/lib/gssapi/krb5/gssapiP_krb5.h",
      "src/lib/gssapi/krb5/gssapi_krb5.c",
      "src/lib/gssapi/krb5/iakerb.c"
    ],
    "message": "Fix IAKERB context aliasing bugs [CVE-2015-2696]\n\nThe IAKERB mechanism currently replaces its context handle with the\nkrb5 mechanism handle upon establishment, under the assumption that\nmost GSS functions are only called after context establishment.  This\nassumption is incorrect, and can lead to aliasing violations for some\nprograms.  Maintain the IAKERB context structure after context\nestablishment and add new IAKERB entry points to refer to it with that\ntype.  Add initiate and established flags to the IAKERB context\nstructure for use in gss_inquire_context() prior to context\nestablishment.\n\nCVE-2015-2696:\n\nIn MIT krb5 1.9 and later, applications which call\ngss_inquire_context() on a partially-established IAKERB context can\ncause the GSS-API library to read from a pointer using the wrong type,\ngenerally causing a process crash.  Java server applications using the\nnative JGSS provider are vulnerable to this bug.  A carefully crafted\nIAKERB packet might allow the gss_inquire_context() call to succeed\nwith attacker-determined results, but applications should not make\naccess control decisions based on gss_inquire_context() results prior\nto context establishment.\n\n    CVSSv2 Vector: AV:N/AC:M/Au:N/C:N/I:N/A:C/E:POC/RL:OF/RC:C\n\n[ghudson@mit.edu: several bugfixes, style changes, and edge-case\nbehavior changes; commit message and CVE description]\n\nticket: 8244\ntarget_version: 1.14\ntags: pullup",
    "before_after_code_files": [
      "src/lib/gssapi/krb5/gssapiP_krb5.h||src/lib/gssapi/krb5/gssapiP_krb5.h",
      "src/lib/gssapi/krb5/gssapi_krb5.c||src/lib/gssapi/krb5/gssapi_krb5.c",
      "src/lib/gssapi/krb5/iakerb.c||src/lib/gssapi/krb5/iakerb.c"
    ]
  },
  "patch_diff": {
    "src/lib/gssapi/krb5/gssapiP_krb5.h||src/lib/gssapi/krb5/gssapiP_krb5.h": [
      "File: src/lib/gssapi/krb5/gssapiP_krb5.h -> src/lib/gssapi/krb5/gssapiP_krb5.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "621: );",
      "624: OM_uint32 KRB5_CALLCONV krb5_gss_process_context_token",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "624: OM_uint32 KRB5_CALLCONV krb5_gss_inquire_sec_context_by_oid",
      "626:  const gss_ctx_id_t,",
      "630: );",
      "632: OM_uint32 KRB5_CALLCONV krb5_gss_set_sec_context_option",
      "637: );",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1302: krb5_gss_import_cred(OM_uint32 *minor_status, gss_buffer_t token,",
      "1303:                      gss_cred_id_t *cred_handle);",
      "1307: #define CRED_EXPORT_MAGIC \"K5C1\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1320: OM_uint32 KRB5_CALLCONV",
      "1321: iakerb_gss_process_context_token(OM_uint32 *minor_status,",
      "1322:                                  const gss_ctx_id_t context_handle,",
      "1323:                                  const gss_buffer_t token_buffer);",
      "1325: OM_uint32 KRB5_CALLCONV",
      "1326: iakerb_gss_context_time(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
      "1327:                         OM_uint32 *time_rec);",
      "1329: OM_uint32 KRB5_CALLCONV",
      "1330: iakerb_gss_inquire_context(OM_uint32 *minor_status,",
      "1331:                            gss_ctx_id_t context_handle, gss_name_t *src_name,",
      "1332:                            gss_name_t *targ_name, OM_uint32 *lifetime_rec,",
      "1333:                            gss_OID *mech_type, OM_uint32 *ctx_flags,",
      "1334:                            int *locally_initiated, int *opened);",
      "1336: OM_uint32 KRB5_CALLCONV",
      "1337: iakerb_gss_get_mic(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
      "1338:                    gss_qop_t qop_req, gss_buffer_t message_buffer,",
      "1339:                    gss_buffer_t message_token);",
      "1341: OM_uint32 KRB5_CALLCONV",
      "1342: iakerb_gss_get_mic_iov(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
      "1343:                        gss_qop_t qop_req, gss_iov_buffer_desc *iov,",
      "1344:                        int iov_count);",
      "1346: OM_uint32 KRB5_CALLCONV",
      "1347: iakerb_gss_get_mic_iov_length(OM_uint32 *minor_status,",
      "1348:                               gss_ctx_id_t context_handle, gss_qop_t qop_req,",
      "1349:                               gss_iov_buffer_desc *iov, int iov_count);",
      "1351: OM_uint32 KRB5_CALLCONV",
      "1352: iakerb_gss_verify_mic(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
      "1353:                       gss_buffer_t msg_buffer, gss_buffer_t token_buffer,",
      "1354:                       gss_qop_t *qop_state);",
      "1356: OM_uint32 KRB5_CALLCONV",
      "1357: iakerb_gss_verify_mic_iov(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
      "1358:                           gss_qop_t *qop_state, gss_iov_buffer_desc *iov,",
      "1359:                           int iov_count);",
      "1361: OM_uint32 KRB5_CALLCONV",
      "1362: iakerb_gss_wrap(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
      "1363:                 int conf_req_flag, gss_qop_t qop_req,",
      "1364:                 gss_buffer_t input_message_buffer, int *conf_state,",
      "1365:                 gss_buffer_t output_message_buffer);",
      "1367: OM_uint32 KRB5_CALLCONV",
      "1368: iakerb_gss_wrap_iov(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
      "1369:                     int conf_req_flag, gss_qop_t qop_req, int *conf_state,",
      "1370:                     gss_iov_buffer_desc *iov, int iov_count);",
      "1372: OM_uint32 KRB5_CALLCONV",
      "1373: iakerb_gss_wrap_iov_length(OM_uint32 *minor_status,",
      "1374:                            gss_ctx_id_t context_handle, int conf_req_flag,",
      "1375:                            gss_qop_t qop_req, int *conf_state,",
      "1376:                            gss_iov_buffer_desc *iov, int iov_count);",
      "1378: OM_uint32 KRB5_CALLCONV",
      "1379: iakerb_gss_unwrap(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
      "1380:                   gss_buffer_t input_message_buffer,",
      "1381:                   gss_buffer_t output_message_buffer, int *conf_state,",
      "1382:                   gss_qop_t *qop_state);",
      "1384: OM_uint32 KRB5_CALLCONV",
      "1385: iakerb_gss_unwrap_iov(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
      "1386:                       int *conf_state, gss_qop_t *qop_state,",
      "1387:                       gss_iov_buffer_desc *iov, int iov_count);",
      "1389: OM_uint32 KRB5_CALLCONV",
      "1390: iakerb_gss_wrap_size_limit(OM_uint32 *minor_status,",
      "1391:                            gss_ctx_id_t context_handle, int conf_req_flag,",
      "1392:                            gss_qop_t qop_req, OM_uint32 req_output_size,",
      "1393:                            OM_uint32 *max_input_size);",
      "1395: #ifndef LEAN_CLIENT",
      "1396: OM_uint32 KRB5_CALLCONV",
      "1397: iakerb_gss_export_sec_context(OM_uint32 *minor_status,",
      "1398:                               gss_ctx_id_t *context_handle,",
      "1399:                               gss_buffer_t interprocess_token);",
      "1402: OM_uint32 KRB5_CALLCONV",
      "1403: iakerb_gss_inquire_sec_context_by_oid(OM_uint32 *minor_status,",
      "1404:                                       const gss_ctx_id_t context_handle,",
      "1405:                                       const gss_OID desired_object,",
      "1406:                                       gss_buffer_set_t *data_set);",
      "1408: OM_uint32 KRB5_CALLCONV",
      "1409: iakerb_gss_set_sec_context_option(OM_uint32 *minor_status,",
      "1410:                                   gss_ctx_id_t *context_handle,",
      "1411:                                   const gss_OID desired_object,",
      "1412:                                   const gss_buffer_t value);",
      "1414: OM_uint32 KRB5_CALLCONV",
      "1415: iakerb_gss_pseudo_random(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
      "1416:                          int prf_key, const gss_buffer_t prf_in,",
      "1417:                          ssize_t desired_output_len, gss_buffer_t prf_out);",
      "",
      "---------------"
    ],
    "src/lib/gssapi/krb5/gssapi_krb5.c||src/lib/gssapi/krb5/gssapi_krb5.c": [
      "File: src/lib/gssapi/krb5/gssapi_krb5.c -> src/lib/gssapi/krb5/gssapi_krb5.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "351:     }",
      "352: };",
      "355: krb5_gss_inquire_sec_context_by_oid (OM_uint32 *minor_status,",
      "356:                                      const gss_ctx_id_t context_handle,",
      "357:                                      const gss_OID desired_object,",
      "",
      "[Removed Lines]",
      "354: static OM_uint32 KRB5_CALLCONV",
      "",
      "[Added Lines]",
      "354: OM_uint32 KRB5_CALLCONV",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "465: };",
      "466: #endif",
      "469: krb5_gss_set_sec_context_option (OM_uint32 *minor_status,",
      "470:                                  gss_ctx_id_t *context_handle,",
      "471:                                  const gss_OID desired_object,",
      "",
      "[Removed Lines]",
      "468: static OM_uint32 KRB5_CALLCONV",
      "",
      "[Added Lines]",
      "468: OM_uint32 KRB5_CALLCONV",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "929:     krb5_gss_get_mic_iov_length,",
      "930: };",
      "932: #ifdef _GSS_STATIC_LINK",
      "933: #include \"mglueP.h\"",
      "934: static int gss_iakerbmechglue_init(void)",
      "935: {",
      "936:     struct gss_mech_config mech_iakerb;",
      "947:     memset(&mech_iakerb, 0, sizeof(mech_iakerb));",
      "948:     mech_iakerb.mech = &iakerb_mechanism;",
      "",
      "[Removed Lines]",
      "937:     struct gss_config iakerb_mechanism = krb5_mechanism;",
      "940:     iakerb_mechanism.gss_accept_sec_context = iakerb_gss_accept_sec_context;",
      "941:     iakerb_mechanism.gss_init_sec_context   = iakerb_gss_init_sec_context;",
      "942:     iakerb_mechanism.gss_delete_sec_context = iakerb_gss_delete_sec_context;",
      "943:     iakerb_mechanism.gss_acquire_cred       = iakerb_gss_acquire_cred;",
      "944:     iakerb_mechanism.gssspi_acquire_cred_with_password",
      "945:                                     = iakerb_gss_acquire_cred_with_password;",
      "",
      "[Added Lines]",
      "934: static struct gss_config iakerb_mechanism = {",
      "935:     { GSS_MECH_KRB5_OID_LENGTH, GSS_MECH_KRB5_OID },",
      "936:     NULL,",
      "937:     iakerb_gss_acquire_cred,",
      "938:     krb5_gss_release_cred,",
      "939:     iakerb_gss_init_sec_context,",
      "940: #ifdef LEAN_CLIENT",
      "941:     NULL,",
      "942: #else",
      "943:     iakerb_gss_accept_sec_context,",
      "944: #endif",
      "945:     iakerb_gss_process_context_token,",
      "946:     iakerb_gss_delete_sec_context,",
      "947:     iakerb_gss_context_time,",
      "948:     iakerb_gss_get_mic,",
      "949:     iakerb_gss_verify_mic,",
      "950: #if defined(IOV_SHIM_EXERCISE_WRAP) || defined(IOV_SHIM_EXERCISE)",
      "951:     NULL,",
      "952: #else",
      "953:     iakerb_gss_wrap,",
      "954: #endif",
      "955: #if defined(IOV_SHIM_EXERCISE_UNWRAP) || defined(IOV_SHIM_EXERCISE)",
      "956:     NULL,",
      "957: #else",
      "958:     iakerb_gss_unwrap,",
      "959: #endif",
      "960:     krb5_gss_display_status,",
      "961:     krb5_gss_indicate_mechs,",
      "962:     krb5_gss_compare_name,",
      "963:     krb5_gss_display_name,",
      "964:     krb5_gss_import_name,",
      "965:     krb5_gss_release_name,",
      "966:     krb5_gss_inquire_cred,",
      "968: #ifdef LEAN_CLIENT",
      "969:     NULL,",
      "970:     NULL,",
      "971: #else",
      "972:     iakerb_gss_export_sec_context,",
      "973:     NULL,",
      "974: #endif",
      "975:     krb5_gss_inquire_cred_by_mech,",
      "976:     krb5_gss_inquire_names_for_mech,",
      "977:     iakerb_gss_inquire_context,",
      "978:     krb5_gss_internal_release_oid,",
      "979:     iakerb_gss_wrap_size_limit,",
      "980:     krb5_gss_localname,",
      "981:     krb5_gss_authorize_localname,",
      "982:     krb5_gss_export_name,",
      "983:     krb5_gss_duplicate_name,",
      "984:     krb5_gss_store_cred,",
      "985:     iakerb_gss_inquire_sec_context_by_oid,",
      "986:     krb5_gss_inquire_cred_by_oid,",
      "987:     iakerb_gss_set_sec_context_option,",
      "988:     krb5_gssspi_set_cred_option,",
      "989:     krb5_gssspi_mech_invoke,",
      "992:     iakerb_gss_wrap_iov,",
      "993:     iakerb_gss_unwrap_iov,",
      "994:     iakerb_gss_wrap_iov_length,",
      "999:     krb5_gss_inquire_name,",
      "1000:     krb5_gss_get_name_attribute,",
      "1001:     krb5_gss_set_name_attribute,",
      "1002:     krb5_gss_delete_name_attribute,",
      "1003:     krb5_gss_export_name_composite,",
      "1004:     krb5_gss_map_name_to_any,",
      "1005:     krb5_gss_release_any_name_mapping,",
      "1006:     iakerb_gss_pseudo_random,",
      "1008:     krb5_gss_inquire_saslname_for_mech,",
      "1009:     krb5_gss_inquire_mech_for_saslname,",
      "1010:     krb5_gss_inquire_attrs_for_mech,",
      "1011:     krb5_gss_acquire_cred_from,",
      "1012:     krb5_gss_store_cred_into,",
      "1013:     iakerb_gss_acquire_cred_with_password,",
      "1014:     krb5_gss_export_cred,",
      "1015:     krb5_gss_import_cred,",
      "1019:     iakerb_gss_get_mic_iov,",
      "1020:     iakerb_gss_verify_mic_iov,",
      "1021:     iakerb_gss_get_mic_iov_length,",
      "1022: };",
      "",
      "---------------"
    ],
    "src/lib/gssapi/krb5/iakerb.c||src/lib/gssapi/krb5/iakerb.c": [
      "File: src/lib/gssapi/krb5/iakerb.c -> src/lib/gssapi/krb5/iakerb.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "47:     gss_ctx_id_t gssc;",
      "50:     krb5_get_init_creds_opt *gic_opts;",
      "51: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "50:     int initiate;",
      "51:     int established;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "697: static krb5_error_code",
      "699: {",
      "700:     iakerb_ctx_id_t ctx;",
      "701:     krb5_error_code code;",
      "",
      "[Removed Lines]",
      "698: iakerb_alloc_context(iakerb_ctx_id_t *pctx)",
      "",
      "[Added Lines]",
      "700: iakerb_alloc_context(iakerb_ctx_id_t *pctx, int initiate)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "709:     ctx->magic = KG_IAKERB_CONTEXT;",
      "710:     ctx->state = IAKERB_AS_REQ;",
      "711:     ctx->count = 0;",
      "713:     code = krb5_gss_init_context(&ctx->k5c);",
      "714:     if (code != 0)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "714:     ctx->initiate = initiate;",
      "715:     ctx->established = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "732:                               gss_ctx_id_t *context_handle,",
      "733:                               gss_buffer_t output_token)",
      "734: {",
      "737:     if (output_token != GSS_C_NO_BUFFER) {",
      "738:         output_token->length = 0;",
      "",
      "[Removed Lines]",
      "735:     OM_uint32 major_status = GSS_S_COMPLETE;",
      "",
      "[Added Lines]",
      "739:     iakerb_ctx_id_t iakerb_ctx = (iakerb_ctx_id_t)*context_handle;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "740:     }",
      "760: }",
      "762: static krb5_boolean",
      "",
      "[Removed Lines]",
      "744:     if (*context_handle != GSS_C_NO_CONTEXT) {",
      "745:         iakerb_ctx_id_t iakerb_ctx = (iakerb_ctx_id_t)*context_handle;",
      "747:         if (iakerb_ctx->magic == KG_IAKERB_CONTEXT) {",
      "748:             iakerb_release_context(iakerb_ctx);",
      "750:         } else {",
      "751:             assert(iakerb_ctx->magic == KG_CONTEXT);",
      "753:             major_status = krb5_gss_delete_sec_context(minor_status,",
      "754:                                                        context_handle,",
      "755:                                                        output_token);",
      "756:         }",
      "757:     }",
      "759:     return major_status;",
      "",
      "[Added Lines]",
      "748:     iakerb_release_context(iakerb_ctx);",
      "750:     return GSS_S_COMPLETE;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "802:     int initialContextToken = (*context_handle == GSS_C_NO_CONTEXT);",
      "804:     if (initialContextToken) {",
      "806:         if (code != 0)",
      "807:             goto cleanup;",
      "",
      "[Removed Lines]",
      "805:         code = iakerb_alloc_context(&ctx);",
      "",
      "[Added Lines]",
      "796:         code = iakerb_alloc_context(&ctx, 0);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "854:                                                        time_rec,",
      "855:                                                        delegated_cred_handle,",
      "856:                                                        &exts);",
      "862:         if (mech_type != NULL)",
      "864:     }",
      "",
      "[Removed Lines]",
      "857:         if (major_status == GSS_S_COMPLETE) {",
      "859:             ctx->gssc = NULL;",
      "860:             iakerb_release_context(ctx);",
      "861:         }",
      "",
      "[Added Lines]",
      "848:         if (major_status == GSS_S_COMPLETE)",
      "849:             ctx->established = 1;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "897:     int initialContextToken = (*context_handle == GSS_C_NO_CONTEXT);",
      "899:     if (initialContextToken) {",
      "901:         if (code != 0) {",
      "903:             goto cleanup;",
      "",
      "[Removed Lines]",
      "900:         code = iakerb_alloc_context(&ctx);",
      "",
      "[Added Lines]",
      "888:         code = iakerb_alloc_context(&ctx, 1);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "983:                                                      ret_flags,",
      "984:                                                      time_rec,",
      "985:                                                      &exts);",
      "991:         if (actual_mech_type != NULL)",
      "993:     } else {",
      "",
      "[Removed Lines]",
      "986:         if (major_status == GSS_S_COMPLETE) {",
      "988:             ctx->gssc = GSS_C_NO_CONTEXT;",
      "989:             iakerb_release_context(ctx);",
      "990:         }",
      "",
      "[Added Lines]",
      "974:         if (major_status == GSS_S_COMPLETE)",
      "975:             ctx->established = 1;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1011:     return major_status;",
      "1012: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "999: OM_uint32 KRB5_CALLCONV",
      "1000: iakerb_gss_unwrap(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
      "1001:                   gss_buffer_t input_message_buffer,",
      "1002:                   gss_buffer_t output_message_buffer, int *conf_state,",
      "1003:                   gss_qop_t *qop_state)",
      "1004: {",
      "1005:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
      "1007:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
      "1008:         return GSS_S_NO_CONTEXT;",
      "1010:     return krb5_gss_unwrap(minor_status, ctx->gssc, input_message_buffer,",
      "1011:                            output_message_buffer, conf_state, qop_state);",
      "1012: }",
      "1014: OM_uint32 KRB5_CALLCONV",
      "1015: iakerb_gss_wrap(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
      "1016:                 int conf_req_flag, gss_qop_t qop_req,",
      "1017:                 gss_buffer_t input_message_buffer, int *conf_state,",
      "1018:                 gss_buffer_t output_message_buffer)",
      "1019: {",
      "1020:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
      "1022:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
      "1023:         return GSS_S_NO_CONTEXT;",
      "1025:     return krb5_gss_wrap(minor_status, ctx->gssc, conf_req_flag, qop_req,",
      "1026:                          input_message_buffer, conf_state,",
      "1027:                          output_message_buffer);",
      "1028: }",
      "1030: OM_uint32 KRB5_CALLCONV",
      "1031: iakerb_gss_process_context_token(OM_uint32 *minor_status,",
      "1032:                                  const gss_ctx_id_t context_handle,",
      "1033:                                  const gss_buffer_t token_buffer)",
      "1034: {",
      "1035:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
      "1037:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
      "1038:         return GSS_S_DEFECTIVE_TOKEN;",
      "1040:     return krb5_gss_process_context_token(minor_status, ctx->gssc,",
      "1041:                                           token_buffer);",
      "1042: }",
      "1044: OM_uint32 KRB5_CALLCONV",
      "1045: iakerb_gss_context_time(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
      "1046:                         OM_uint32 *time_rec)",
      "1047: {",
      "1048:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
      "1050:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
      "1051:         return GSS_S_NO_CONTEXT;",
      "1053:     return krb5_gss_context_time(minor_status, ctx->gssc, time_rec);",
      "1054: }",
      "1056: #ifndef LEAN_CLIENT",
      "1058: OM_uint32 KRB5_CALLCONV",
      "1059: iakerb_gss_export_sec_context(OM_uint32 *minor_status,",
      "1060:                               gss_ctx_id_t *context_handle,",
      "1061:                               gss_buffer_t interprocess_token)",
      "1062: {",
      "1063:     OM_uint32 maj;",
      "1064:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
      "1067:     if (!ctx->established)",
      "1068:         return GSS_S_UNAVAILABLE;",
      "1070:     maj = krb5_gss_export_sec_context(minor_status, &ctx->gssc,",
      "1071:                                       interprocess_token);",
      "1072:     if (ctx->gssc == GSS_C_NO_CONTEXT) {",
      "1073:         iakerb_release_context(ctx);",
      "1075:     }",
      "1076:     return maj;",
      "1077: }",
      "1088: OM_uint32 KRB5_CALLCONV",
      "1089: iakerb_gss_inquire_context(OM_uint32 *minor_status,",
      "1090:                            gss_ctx_id_t context_handle, gss_name_t *src_name,",
      "1091:                            gss_name_t *targ_name, OM_uint32 *lifetime_rec,",
      "1092:                            gss_OID *mech_type, OM_uint32 *ctx_flags,",
      "1093:                            int *initiate, int *opened)",
      "1094: {",
      "1095:     OM_uint32 ret;",
      "1096:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
      "1098:     if (src_name != NULL)",
      "1100:     if (targ_name != NULL)",
      "1102:     if (lifetime_rec != NULL)",
      "1104:     if (mech_type != NULL)",
      "1106:     if (ctx_flags != NULL)",
      "1108:     if (initiate != NULL)",
      "1110:     if (opened != NULL)",
      "1113:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
      "1114:         return GSS_S_COMPLETE;",
      "1116:     ret = krb5_gss_inquire_context(minor_status, ctx->gssc, src_name,",
      "1117:                                    targ_name, lifetime_rec, mech_type,",
      "1118:                                    ctx_flags, initiate, opened);",
      "1120:     if (!ctx->established) {",
      "1122:         if (mech_type != NULL)",
      "1126:         if (ctx_flags != NULL)",
      "1128:     }",
      "1130:     return ret;",
      "1131: }",
      "1133: OM_uint32 KRB5_CALLCONV",
      "1134: iakerb_gss_wrap_size_limit(OM_uint32 *minor_status,",
      "1135:                            gss_ctx_id_t context_handle, int conf_req_flag,",
      "1136:                            gss_qop_t qop_req, OM_uint32 req_output_size,",
      "1137:                            OM_uint32 *max_input_size)",
      "1138: {",
      "1139:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
      "1141:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
      "1142:         return GSS_S_NO_CONTEXT;",
      "1144:     return krb5_gss_wrap_size_limit(minor_status, ctx->gssc, conf_req_flag,",
      "1145:                                     qop_req, req_output_size, max_input_size);",
      "1146: }",
      "1148: OM_uint32 KRB5_CALLCONV",
      "1149: iakerb_gss_get_mic(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
      "1150:                    gss_qop_t qop_req, gss_buffer_t message_buffer,",
      "1151:                    gss_buffer_t message_token)",
      "1152: {",
      "1153:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
      "1155:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
      "1156:         return GSS_S_NO_CONTEXT;",
      "1158:     return krb5_gss_get_mic(minor_status, ctx->gssc, qop_req, message_buffer,",
      "1159:                             message_token);",
      "1160: }",
      "1162: OM_uint32 KRB5_CALLCONV",
      "1163: iakerb_gss_verify_mic(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
      "1164:                       gss_buffer_t msg_buffer, gss_buffer_t token_buffer,",
      "1165:                       gss_qop_t *qop_state)",
      "1166: {",
      "1167:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
      "1169:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
      "1170:         return GSS_S_NO_CONTEXT;",
      "1172:     return krb5_gss_verify_mic(minor_status, ctx->gssc, msg_buffer,",
      "1173:                                token_buffer, qop_state);",
      "1174: }",
      "1176: OM_uint32 KRB5_CALLCONV",
      "1177: iakerb_gss_inquire_sec_context_by_oid(OM_uint32 *minor_status,",
      "1178:                                       const gss_ctx_id_t context_handle,",
      "1179:                                       const gss_OID desired_object,",
      "1180:                                       gss_buffer_set_t *data_set)",
      "1181: {",
      "1182:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
      "1184:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
      "1185:         return GSS_S_UNAVAILABLE;",
      "1187:     return krb5_gss_inquire_sec_context_by_oid(minor_status, ctx->gssc,",
      "1188:                                                desired_object, data_set);",
      "1189: }",
      "1191: OM_uint32 KRB5_CALLCONV",
      "1192: iakerb_gss_set_sec_context_option(OM_uint32 *minor_status,",
      "1193:                                   gss_ctx_id_t *context_handle,",
      "1194:                                   const gss_OID desired_object,",
      "1195:                                   const gss_buffer_t value)",
      "1196: {",
      "1197:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)*context_handle;",
      "1199:     if (ctx == NULL || ctx->gssc == GSS_C_NO_CONTEXT)",
      "1200:         return GSS_S_UNAVAILABLE;",
      "1202:     return krb5_gss_set_sec_context_option(minor_status, &ctx->gssc,",
      "1203:                                            desired_object, value);",
      "1204: }",
      "1206: OM_uint32 KRB5_CALLCONV",
      "1207: iakerb_gss_wrap_iov(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
      "1208:                     int conf_req_flag, gss_qop_t qop_req, int *conf_state,",
      "1209:                     gss_iov_buffer_desc *iov, int iov_count)",
      "1210: {",
      "1211:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
      "1213:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
      "1214:         return GSS_S_NO_CONTEXT;",
      "1216:     return krb5_gss_wrap_iov(minor_status, ctx->gssc, conf_req_flag, qop_req,",
      "1217:                              conf_state, iov, iov_count);",
      "1218: }",
      "1220: OM_uint32 KRB5_CALLCONV",
      "1221: iakerb_gss_unwrap_iov(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
      "1222:                       int *conf_state, gss_qop_t *qop_state,",
      "1223:                       gss_iov_buffer_desc *iov, int iov_count)",
      "1224: {",
      "1225:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
      "1227:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
      "1228:         return GSS_S_NO_CONTEXT;",
      "1230:     return krb5_gss_unwrap_iov(minor_status, ctx->gssc, conf_state, qop_state,",
      "1231:                                iov, iov_count);",
      "1232: }",
      "1234: OM_uint32 KRB5_CALLCONV",
      "1235: iakerb_gss_wrap_iov_length(OM_uint32 *minor_status,",
      "1236:                            gss_ctx_id_t context_handle, int conf_req_flag,",
      "1237:                            gss_qop_t qop_req, int *conf_state,",
      "1238:                            gss_iov_buffer_desc *iov, int iov_count)",
      "1239: {",
      "1240:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
      "1242:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
      "1243:         return GSS_S_NO_CONTEXT;",
      "1245:     return krb5_gss_wrap_iov_length(minor_status, ctx->gssc, conf_req_flag,",
      "1246:                                     qop_req, conf_state, iov, iov_count);",
      "1247: }",
      "1249: OM_uint32 KRB5_CALLCONV",
      "1250: iakerb_gss_pseudo_random(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
      "1251:                          int prf_key, const gss_buffer_t prf_in,",
      "1252:                          ssize_t desired_output_len, gss_buffer_t prf_out)",
      "1253: {",
      "1254:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
      "1256:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
      "1257:         return GSS_S_NO_CONTEXT;",
      "1259:     return krb5_gss_pseudo_random(minor_status, ctx->gssc, prf_key, prf_in,",
      "1260:                                   desired_output_len, prf_out);",
      "1261: }",
      "1263: OM_uint32 KRB5_CALLCONV",
      "1264: iakerb_gss_get_mic_iov(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
      "1265:                        gss_qop_t qop_req, gss_iov_buffer_desc *iov,",
      "1266:                        int iov_count)",
      "1267: {",
      "1268:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
      "1270:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
      "1271:         return GSS_S_NO_CONTEXT;",
      "1273:     return krb5_gss_get_mic_iov(minor_status, ctx->gssc, qop_req, iov,",
      "1274:                                 iov_count);",
      "1275: }",
      "1277: OM_uint32 KRB5_CALLCONV",
      "1278: iakerb_gss_verify_mic_iov(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
      "1279:                           gss_qop_t *qop_state, gss_iov_buffer_desc *iov,",
      "1280:                           int iov_count)",
      "1281: {",
      "1282:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
      "1284:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
      "1285:         return GSS_S_NO_CONTEXT;",
      "1287:     return krb5_gss_verify_mic_iov(minor_status, ctx->gssc, qop_state, iov,",
      "1288:                                    iov_count);",
      "1289: }",
      "1291: OM_uint32 KRB5_CALLCONV",
      "1292: iakerb_gss_get_mic_iov_length(OM_uint32 *minor_status,",
      "1293:                               gss_ctx_id_t context_handle, gss_qop_t qop_req,",
      "1294:                               gss_iov_buffer_desc *iov, int iov_count)",
      "1295: {",
      "1296:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
      "1298:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
      "1299:         return GSS_S_NO_CONTEXT;",
      "1301:     return krb5_gss_get_mic_iov_length(minor_status, ctx->gssc, qop_req, iov,",
      "1302:                                        iov_count);",
      "1303: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4875478cbc2c47fdcfbabb4813dfe2b971fb9ae2",
      "candidate_info": {
        "commit_hash": "4875478cbc2c47fdcfbabb4813dfe2b971fb9ae2",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/4875478cbc2c47fdcfbabb4813dfe2b971fb9ae2",
        "files": [
          "src/lib/gssapi/krb5/gssapiP_krb5.h",
          "src/lib/gssapi/krb5/gssapi_krb5.c",
          "src/lib/gssapi/krb5/iakerb.c"
        ],
        "message": "Fix IAKERB context aliasing bugs [CVE-2015-2696]\n\nThe IAKERB mechanism currently replaces its context handle with the\nkrb5 mechanism handle upon establishment, under the assumption that\nmost GSS functions are only called after context establishment.  This\nassumption is incorrect, and can lead to aliasing violations for some\nprograms.  Maintain the IAKERB context structure after context\nestablishment and add new IAKERB entry points to refer to it with that\ntype.  Add initiate and established flags to the IAKERB context\nstructure for use in gss_inquire_context() prior to context\nestablishment.\n\nCVE-2015-2696:\n\nIn MIT krb5 1.9 and later, applications which call\ngss_inquire_context() on a partially-established IAKERB context can\ncause the GSS-API library to read from a pointer using the wrong type,\ngenerally causing a process crash.  Java server applications using the\nnative JGSS provider are vulnerable to this bug.  A carefully crafted\nIAKERB packet might allow the gss_inquire_context() call to succeed\nwith attacker-determined results, but applications should not make\naccess control decisions based on gss_inquire_context() results prior\nto context establishment.\n\n    CVSSv2 Vector: AV:N/AC:M/Au:N/C:N/I:N/A:C/E:POC/RL:OF/RC:C\n\n[ghudson@mit.edu: several bugfixes, style changes, and edge-case\nbehavior changes; commit message and CVE description]\n\n(cherry picked from commit e04f0283516e80d2f93366e0d479d13c9b5c8c2a)\n\nticket: 8313\nversion_fixed: 1.12.5\nstatus: resolved",
        "before_after_code_files": [
          "src/lib/gssapi/krb5/gssapiP_krb5.h||src/lib/gssapi/krb5/gssapiP_krb5.h",
          "src/lib/gssapi/krb5/gssapi_krb5.c||src/lib/gssapi/krb5/gssapi_krb5.c",
          "src/lib/gssapi/krb5/iakerb.c||src/lib/gssapi/krb5/iakerb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/gssapi/krb5/gssapiP_krb5.h||src/lib/gssapi/krb5/gssapiP_krb5.h",
            "src/lib/gssapi/krb5/gssapi_krb5.c||src/lib/gssapi/krb5/gssapi_krb5.c",
            "src/lib/gssapi/krb5/iakerb.c||src/lib/gssapi/krb5/iakerb.c"
          ],
          "candidate": [
            "src/lib/gssapi/krb5/gssapiP_krb5.h||src/lib/gssapi/krb5/gssapiP_krb5.h",
            "src/lib/gssapi/krb5/gssapi_krb5.c||src/lib/gssapi/krb5/gssapi_krb5.c",
            "src/lib/gssapi/krb5/iakerb.c||src/lib/gssapi/krb5/iakerb.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lib/gssapi/krb5/gssapiP_krb5.h||src/lib/gssapi/krb5/gssapiP_krb5.h": [
          "File: src/lib/gssapi/krb5/gssapiP_krb5.h -> src/lib/gssapi/krb5/gssapiP_krb5.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "618: );",
          "621: OM_uint32 KRB5_CALLCONV krb5_gss_process_context_token",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "621: OM_uint32 KRB5_CALLCONV krb5_gss_inquire_sec_context_by_oid",
          "623:  const gss_ctx_id_t,",
          "627: );",
          "629: OM_uint32 KRB5_CALLCONV krb5_gss_set_sec_context_option",
          "634: );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1298: krb5_gss_import_cred(OM_uint32 *minor_status, gss_buffer_t token,",
          "1299:                      gss_cred_id_t *cred_handle);",
          "1303: #define CRED_EXPORT_MAGIC \"K5C1\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1316: OM_uint32 KRB5_CALLCONV",
          "1317: iakerb_gss_process_context_token(OM_uint32 *minor_status,",
          "1318:                                  const gss_ctx_id_t context_handle,",
          "1319:                                  const gss_buffer_t token_buffer);",
          "1321: OM_uint32 KRB5_CALLCONV",
          "1322: iakerb_gss_context_time(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1323:                         OM_uint32 *time_rec);",
          "1325: OM_uint32 KRB5_CALLCONV",
          "1326: iakerb_gss_inquire_context(OM_uint32 *minor_status,",
          "1327:                            gss_ctx_id_t context_handle, gss_name_t *src_name,",
          "1328:                            gss_name_t *targ_name, OM_uint32 *lifetime_rec,",
          "1329:                            gss_OID *mech_type, OM_uint32 *ctx_flags,",
          "1330:                            int *locally_initiated, int *opened);",
          "1332: OM_uint32 KRB5_CALLCONV",
          "1333: iakerb_gss_get_mic(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1334:                    gss_qop_t qop_req, gss_buffer_t message_buffer,",
          "1335:                    gss_buffer_t message_token);",
          "1337: OM_uint32 KRB5_CALLCONV",
          "1338: iakerb_gss_get_mic_iov(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1339:                        gss_qop_t qop_req, gss_iov_buffer_desc *iov,",
          "1340:                        int iov_count);",
          "1342: OM_uint32 KRB5_CALLCONV",
          "1343: iakerb_gss_get_mic_iov_length(OM_uint32 *minor_status,",
          "1344:                               gss_ctx_id_t context_handle, gss_qop_t qop_req,",
          "1345:                               gss_iov_buffer_desc *iov, int iov_count);",
          "1347: OM_uint32 KRB5_CALLCONV",
          "1348: iakerb_gss_verify_mic(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1349:                       gss_buffer_t msg_buffer, gss_buffer_t token_buffer,",
          "1350:                       gss_qop_t *qop_state);",
          "1352: OM_uint32 KRB5_CALLCONV",
          "1353: iakerb_gss_verify_mic_iov(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1354:                           gss_qop_t *qop_state, gss_iov_buffer_desc *iov,",
          "1355:                           int iov_count);",
          "1357: OM_uint32 KRB5_CALLCONV",
          "1358: iakerb_gss_wrap(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1359:                 int conf_req_flag, gss_qop_t qop_req,",
          "1360:                 gss_buffer_t input_message_buffer, int *conf_state,",
          "1361:                 gss_buffer_t output_message_buffer);",
          "1363: OM_uint32 KRB5_CALLCONV",
          "1364: iakerb_gss_wrap_iov(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1365:                     int conf_req_flag, gss_qop_t qop_req, int *conf_state,",
          "1366:                     gss_iov_buffer_desc *iov, int iov_count);",
          "1368: OM_uint32 KRB5_CALLCONV",
          "1369: iakerb_gss_wrap_iov_length(OM_uint32 *minor_status,",
          "1370:                            gss_ctx_id_t context_handle, int conf_req_flag,",
          "1371:                            gss_qop_t qop_req, int *conf_state,",
          "1372:                            gss_iov_buffer_desc *iov, int iov_count);",
          "1374: OM_uint32 KRB5_CALLCONV",
          "1375: iakerb_gss_unwrap(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1376:                   gss_buffer_t input_message_buffer,",
          "1377:                   gss_buffer_t output_message_buffer, int *conf_state,",
          "1378:                   gss_qop_t *qop_state);",
          "1380: OM_uint32 KRB5_CALLCONV",
          "1381: iakerb_gss_unwrap_iov(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1382:                       int *conf_state, gss_qop_t *qop_state,",
          "1383:                       gss_iov_buffer_desc *iov, int iov_count);",
          "1385: OM_uint32 KRB5_CALLCONV",
          "1386: iakerb_gss_wrap_size_limit(OM_uint32 *minor_status,",
          "1387:                            gss_ctx_id_t context_handle, int conf_req_flag,",
          "1388:                            gss_qop_t qop_req, OM_uint32 req_output_size,",
          "1389:                            OM_uint32 *max_input_size);",
          "1391: #ifndef LEAN_CLIENT",
          "1392: OM_uint32 KRB5_CALLCONV",
          "1393: iakerb_gss_export_sec_context(OM_uint32 *minor_status,",
          "1394:                               gss_ctx_id_t *context_handle,",
          "1395:                               gss_buffer_t interprocess_token);",
          "1398: OM_uint32 KRB5_CALLCONV",
          "1399: iakerb_gss_inquire_sec_context_by_oid(OM_uint32 *minor_status,",
          "1400:                                       const gss_ctx_id_t context_handle,",
          "1401:                                       const gss_OID desired_object,",
          "1402:                                       gss_buffer_set_t *data_set);",
          "1404: OM_uint32 KRB5_CALLCONV",
          "1405: iakerb_gss_set_sec_context_option(OM_uint32 *minor_status,",
          "1406:                                   gss_ctx_id_t *context_handle,",
          "1407:                                   const gss_OID desired_object,",
          "1408:                                   const gss_buffer_t value);",
          "1410: OM_uint32 KRB5_CALLCONV",
          "1411: iakerb_gss_pseudo_random(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1412:                          int prf_key, const gss_buffer_t prf_in,",
          "1413:                          ssize_t desired_output_len, gss_buffer_t prf_out);",
          "",
          "---------------"
        ],
        "src/lib/gssapi/krb5/gssapi_krb5.c||src/lib/gssapi/krb5/gssapi_krb5.c": [
          "File: src/lib/gssapi/krb5/gssapi_krb5.c -> src/lib/gssapi/krb5/gssapi_krb5.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "345:     }",
          "346: };",
          "349: krb5_gss_inquire_sec_context_by_oid (OM_uint32 *minor_status,",
          "350:                                      const gss_ctx_id_t context_handle,",
          "351:                                      const gss_OID desired_object,",
          "",
          "[Removed Lines]",
          "348: static OM_uint32 KRB5_CALLCONV",
          "",
          "[Added Lines]",
          "348: OM_uint32 KRB5_CALLCONV",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "459: };",
          "460: #endif",
          "463: krb5_gss_set_sec_context_option (OM_uint32 *minor_status,",
          "464:                                  gss_ctx_id_t *context_handle,",
          "465:                                  const gss_OID desired_object,",
          "",
          "[Removed Lines]",
          "462: static OM_uint32 KRB5_CALLCONV",
          "",
          "[Added Lines]",
          "462: OM_uint32 KRB5_CALLCONV",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "904:     krb5_gss_get_mic_iov_length,",
          "905: };",
          "907: #ifdef _GSS_STATIC_LINK",
          "908: #include \"mglueP.h\"",
          "909: static int gss_iakerbmechglue_init(void)",
          "910: {",
          "911:     struct gss_mech_config mech_iakerb;",
          "922:     memset(&mech_iakerb, 0, sizeof(mech_iakerb));",
          "923:     mech_iakerb.mech = &iakerb_mechanism;",
          "",
          "[Removed Lines]",
          "912:     struct gss_config iakerb_mechanism = krb5_mechanism;",
          "915:     iakerb_mechanism.gss_accept_sec_context = iakerb_gss_accept_sec_context;",
          "916:     iakerb_mechanism.gss_init_sec_context   = iakerb_gss_init_sec_context;",
          "917:     iakerb_mechanism.gss_delete_sec_context = iakerb_gss_delete_sec_context;",
          "918:     iakerb_mechanism.gss_acquire_cred       = iakerb_gss_acquire_cred;",
          "919:     iakerb_mechanism.gssspi_acquire_cred_with_password",
          "920:                                     = iakerb_gss_acquire_cred_with_password;",
          "",
          "[Added Lines]",
          "909: static struct gss_config iakerb_mechanism = {",
          "910:     { GSS_MECH_KRB5_OID_LENGTH, GSS_MECH_KRB5_OID },",
          "911:     NULL,",
          "912:     iakerb_gss_acquire_cred,",
          "913:     krb5_gss_release_cred,",
          "914:     iakerb_gss_init_sec_context,",
          "915: #ifdef LEAN_CLIENT",
          "916:     NULL,",
          "917: #else",
          "918:     iakerb_gss_accept_sec_context,",
          "919: #endif",
          "920:     iakerb_gss_process_context_token,",
          "921:     iakerb_gss_delete_sec_context,",
          "922:     iakerb_gss_context_time,",
          "923:     iakerb_gss_get_mic,",
          "924:     iakerb_gss_verify_mic,",
          "925: #if defined(IOV_SHIM_EXERCISE_WRAP) || defined(IOV_SHIM_EXERCISE)",
          "926:     NULL,",
          "927: #else",
          "928:     iakerb_gss_wrap,",
          "929: #endif",
          "930: #if defined(IOV_SHIM_EXERCISE_UNWRAP) || defined(IOV_SHIM_EXERCISE)",
          "931:     NULL,",
          "932: #else",
          "933:     iakerb_gss_unwrap,",
          "934: #endif",
          "935:     krb5_gss_display_status,",
          "936:     krb5_gss_indicate_mechs,",
          "937:     krb5_gss_compare_name,",
          "938:     krb5_gss_display_name,",
          "939:     krb5_gss_import_name,",
          "940:     krb5_gss_release_name,",
          "941:     krb5_gss_inquire_cred,",
          "943: #ifdef LEAN_CLIENT",
          "944:     NULL,",
          "945:     NULL,",
          "946: #else",
          "947:     iakerb_gss_export_sec_context,",
          "948:     NULL,",
          "949: #endif",
          "950:     krb5_gss_inquire_cred_by_mech,",
          "951:     krb5_gss_inquire_names_for_mech,",
          "952:     iakerb_gss_inquire_context,",
          "953:     krb5_gss_internal_release_oid,",
          "954:     iakerb_gss_wrap_size_limit,",
          "955:     krb5_gss_localname,",
          "956:     krb5_gss_authorize_localname,",
          "957:     krb5_gss_export_name,",
          "958:     krb5_gss_duplicate_name,",
          "959:     krb5_gss_store_cred,",
          "960:     iakerb_gss_inquire_sec_context_by_oid,",
          "961:     krb5_gss_inquire_cred_by_oid,",
          "962:     iakerb_gss_set_sec_context_option,",
          "963:     krb5_gssspi_set_cred_option,",
          "964:     krb5_gssspi_mech_invoke,",
          "967:     iakerb_gss_wrap_iov,",
          "968:     iakerb_gss_unwrap_iov,",
          "969:     iakerb_gss_wrap_iov_length,",
          "974:     krb5_gss_inquire_name,",
          "975:     krb5_gss_get_name_attribute,",
          "976:     krb5_gss_set_name_attribute,",
          "977:     krb5_gss_delete_name_attribute,",
          "978:     krb5_gss_export_name_composite,",
          "979:     krb5_gss_map_name_to_any,",
          "980:     krb5_gss_release_any_name_mapping,",
          "981:     iakerb_gss_pseudo_random,",
          "983:     krb5_gss_inquire_saslname_for_mech,",
          "984:     krb5_gss_inquire_mech_for_saslname,",
          "985:     krb5_gss_inquire_attrs_for_mech,",
          "986:     krb5_gss_acquire_cred_from,",
          "987:     krb5_gss_store_cred_into,",
          "988:     iakerb_gss_acquire_cred_with_password,",
          "989:     krb5_gss_export_cred,",
          "990:     krb5_gss_import_cred,",
          "994:     iakerb_gss_get_mic_iov,",
          "995:     iakerb_gss_verify_mic_iov,",
          "996:     iakerb_gss_get_mic_iov_length,",
          "997: };",
          "",
          "---------------"
        ],
        "src/lib/gssapi/krb5/iakerb.c||src/lib/gssapi/krb5/iakerb.c": [
          "File: src/lib/gssapi/krb5/iakerb.c -> src/lib/gssapi/krb5/iakerb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     gss_ctx_id_t gssc;",
          "50:     krb5_get_init_creds_opt *gic_opts;",
          "51: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:     int initiate;",
          "51:     int established;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "697: static krb5_error_code",
          "699: {",
          "700:     iakerb_ctx_id_t ctx;",
          "701:     krb5_error_code code;",
          "",
          "[Removed Lines]",
          "698: iakerb_alloc_context(iakerb_ctx_id_t *pctx)",
          "",
          "[Added Lines]",
          "700: iakerb_alloc_context(iakerb_ctx_id_t *pctx, int initiate)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "709:     ctx->magic = KG_IAKERB_CONTEXT;",
          "710:     ctx->state = IAKERB_AS_REQ;",
          "711:     ctx->count = 0;",
          "713:     code = krb5_gss_init_context(&ctx->k5c);",
          "714:     if (code != 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "714:     ctx->initiate = initiate;",
          "715:     ctx->established = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "732:                               gss_ctx_id_t *context_handle,",
          "733:                               gss_buffer_t output_token)",
          "734: {",
          "737:     if (output_token != GSS_C_NO_BUFFER) {",
          "738:         output_token->length = 0;",
          "",
          "[Removed Lines]",
          "735:     OM_uint32 major_status = GSS_S_COMPLETE;",
          "",
          "[Added Lines]",
          "739:     iakerb_ctx_id_t iakerb_ctx = (iakerb_ctx_id_t)*context_handle;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "740:     }",
          "760: }",
          "762: static krb5_boolean",
          "",
          "[Removed Lines]",
          "744:     if (*context_handle != GSS_C_NO_CONTEXT) {",
          "745:         iakerb_ctx_id_t iakerb_ctx = (iakerb_ctx_id_t)*context_handle;",
          "747:         if (iakerb_ctx->magic == KG_IAKERB_CONTEXT) {",
          "748:             iakerb_release_context(iakerb_ctx);",
          "750:         } else {",
          "751:             assert(iakerb_ctx->magic == KG_CONTEXT);",
          "753:             major_status = krb5_gss_delete_sec_context(minor_status,",
          "754:                                                        context_handle,",
          "755:                                                        output_token);",
          "756:         }",
          "757:     }",
          "759:     return major_status;",
          "",
          "[Added Lines]",
          "748:     iakerb_release_context(iakerb_ctx);",
          "750:     return GSS_S_COMPLETE;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "802:     int initialContextToken = (*context_handle == GSS_C_NO_CONTEXT);",
          "804:     if (initialContextToken) {",
          "806:         if (code != 0)",
          "807:             goto cleanup;",
          "",
          "[Removed Lines]",
          "805:         code = iakerb_alloc_context(&ctx);",
          "",
          "[Added Lines]",
          "796:         code = iakerb_alloc_context(&ctx, 0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "854:                                                        time_rec,",
          "855:                                                        delegated_cred_handle,",
          "856:                                                        &exts);",
          "862:         if (mech_type != NULL)",
          "864:     }",
          "",
          "[Removed Lines]",
          "857:         if (major_status == GSS_S_COMPLETE) {",
          "859:             ctx->gssc = NULL;",
          "860:             iakerb_release_context(ctx);",
          "861:         }",
          "",
          "[Added Lines]",
          "848:         if (major_status == GSS_S_COMPLETE)",
          "849:             ctx->established = 1;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "897:     int initialContextToken = (*context_handle == GSS_C_NO_CONTEXT);",
          "899:     if (initialContextToken) {",
          "901:         if (code != 0) {",
          "903:             goto cleanup;",
          "",
          "[Removed Lines]",
          "900:         code = iakerb_alloc_context(&ctx);",
          "",
          "[Added Lines]",
          "888:         code = iakerb_alloc_context(&ctx, 1);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "983:                                                      ret_flags,",
          "984:                                                      time_rec,",
          "985:                                                      &exts);",
          "991:         if (actual_mech_type != NULL)",
          "993:     } else {",
          "",
          "[Removed Lines]",
          "986:         if (major_status == GSS_S_COMPLETE) {",
          "988:             ctx->gssc = GSS_C_NO_CONTEXT;",
          "989:             iakerb_release_context(ctx);",
          "990:         }",
          "",
          "[Added Lines]",
          "974:         if (major_status == GSS_S_COMPLETE)",
          "975:             ctx->established = 1;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1011:     return major_status;",
          "1012: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "999: OM_uint32 KRB5_CALLCONV",
          "1000: iakerb_gss_unwrap(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1001:                   gss_buffer_t input_message_buffer,",
          "1002:                   gss_buffer_t output_message_buffer, int *conf_state,",
          "1003:                   gss_qop_t *qop_state)",
          "1004: {",
          "1005:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1007:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1008:         return GSS_S_NO_CONTEXT;",
          "1010:     return krb5_gss_unwrap(minor_status, ctx->gssc, input_message_buffer,",
          "1011:                            output_message_buffer, conf_state, qop_state);",
          "1012: }",
          "1014: OM_uint32 KRB5_CALLCONV",
          "1015: iakerb_gss_wrap(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1016:                 int conf_req_flag, gss_qop_t qop_req,",
          "1017:                 gss_buffer_t input_message_buffer, int *conf_state,",
          "1018:                 gss_buffer_t output_message_buffer)",
          "1019: {",
          "1020:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1022:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1023:         return GSS_S_NO_CONTEXT;",
          "1025:     return krb5_gss_wrap(minor_status, ctx->gssc, conf_req_flag, qop_req,",
          "1026:                          input_message_buffer, conf_state,",
          "1027:                          output_message_buffer);",
          "1028: }",
          "1030: OM_uint32 KRB5_CALLCONV",
          "1031: iakerb_gss_process_context_token(OM_uint32 *minor_status,",
          "1032:                                  const gss_ctx_id_t context_handle,",
          "1033:                                  const gss_buffer_t token_buffer)",
          "1034: {",
          "1035:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1037:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1038:         return GSS_S_DEFECTIVE_TOKEN;",
          "1040:     return krb5_gss_process_context_token(minor_status, ctx->gssc,",
          "1041:                                           token_buffer);",
          "1042: }",
          "1044: OM_uint32 KRB5_CALLCONV",
          "1045: iakerb_gss_context_time(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1046:                         OM_uint32 *time_rec)",
          "1047: {",
          "1048:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1050:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1051:         return GSS_S_NO_CONTEXT;",
          "1053:     return krb5_gss_context_time(minor_status, ctx->gssc, time_rec);",
          "1054: }",
          "1056: #ifndef LEAN_CLIENT",
          "1058: OM_uint32 KRB5_CALLCONV",
          "1059: iakerb_gss_export_sec_context(OM_uint32 *minor_status,",
          "1060:                               gss_ctx_id_t *context_handle,",
          "1061:                               gss_buffer_t interprocess_token)",
          "1062: {",
          "1063:     OM_uint32 maj;",
          "1064:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1067:     if (!ctx->established)",
          "1068:         return GSS_S_UNAVAILABLE;",
          "1070:     maj = krb5_gss_export_sec_context(minor_status, &ctx->gssc,",
          "1071:                                       interprocess_token);",
          "1072:     if (ctx->gssc == GSS_C_NO_CONTEXT) {",
          "1073:         iakerb_release_context(ctx);",
          "1075:     }",
          "1076:     return maj;",
          "1077: }",
          "1088: OM_uint32 KRB5_CALLCONV",
          "1089: iakerb_gss_inquire_context(OM_uint32 *minor_status,",
          "1090:                            gss_ctx_id_t context_handle, gss_name_t *src_name,",
          "1091:                            gss_name_t *targ_name, OM_uint32 *lifetime_rec,",
          "1092:                            gss_OID *mech_type, OM_uint32 *ctx_flags,",
          "1093:                            int *initiate, int *opened)",
          "1094: {",
          "1095:     OM_uint32 ret;",
          "1096:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1098:     if (src_name != NULL)",
          "1100:     if (targ_name != NULL)",
          "1102:     if (lifetime_rec != NULL)",
          "1104:     if (mech_type != NULL)",
          "1106:     if (ctx_flags != NULL)",
          "1108:     if (initiate != NULL)",
          "1110:     if (opened != NULL)",
          "1113:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1114:         return GSS_S_COMPLETE;",
          "1116:     ret = krb5_gss_inquire_context(minor_status, ctx->gssc, src_name,",
          "1117:                                    targ_name, lifetime_rec, mech_type,",
          "1118:                                    ctx_flags, initiate, opened);",
          "1120:     if (!ctx->established) {",
          "1122:         if (mech_type != NULL)",
          "1126:         if (ctx_flags != NULL)",
          "1128:     }",
          "1130:     return ret;",
          "1131: }",
          "1133: OM_uint32 KRB5_CALLCONV",
          "1134: iakerb_gss_wrap_size_limit(OM_uint32 *minor_status,",
          "1135:                            gss_ctx_id_t context_handle, int conf_req_flag,",
          "1136:                            gss_qop_t qop_req, OM_uint32 req_output_size,",
          "1137:                            OM_uint32 *max_input_size)",
          "1138: {",
          "1139:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1141:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1142:         return GSS_S_NO_CONTEXT;",
          "1144:     return krb5_gss_wrap_size_limit(minor_status, ctx->gssc, conf_req_flag,",
          "1145:                                     qop_req, req_output_size, max_input_size);",
          "1146: }",
          "1148: OM_uint32 KRB5_CALLCONV",
          "1149: iakerb_gss_get_mic(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1150:                    gss_qop_t qop_req, gss_buffer_t message_buffer,",
          "1151:                    gss_buffer_t message_token)",
          "1152: {",
          "1153:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1155:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1156:         return GSS_S_NO_CONTEXT;",
          "1158:     return krb5_gss_get_mic(minor_status, ctx->gssc, qop_req, message_buffer,",
          "1159:                             message_token);",
          "1160: }",
          "1162: OM_uint32 KRB5_CALLCONV",
          "1163: iakerb_gss_verify_mic(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1164:                       gss_buffer_t msg_buffer, gss_buffer_t token_buffer,",
          "1165:                       gss_qop_t *qop_state)",
          "1166: {",
          "1167:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1169:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1170:         return GSS_S_NO_CONTEXT;",
          "1172:     return krb5_gss_verify_mic(minor_status, ctx->gssc, msg_buffer,",
          "1173:                                token_buffer, qop_state);",
          "1174: }",
          "1176: OM_uint32 KRB5_CALLCONV",
          "1177: iakerb_gss_inquire_sec_context_by_oid(OM_uint32 *minor_status,",
          "1178:                                       const gss_ctx_id_t context_handle,",
          "1179:                                       const gss_OID desired_object,",
          "1180:                                       gss_buffer_set_t *data_set)",
          "1181: {",
          "1182:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1184:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1185:         return GSS_S_UNAVAILABLE;",
          "1187:     return krb5_gss_inquire_sec_context_by_oid(minor_status, ctx->gssc,",
          "1188:                                                desired_object, data_set);",
          "1189: }",
          "1191: OM_uint32 KRB5_CALLCONV",
          "1192: iakerb_gss_set_sec_context_option(OM_uint32 *minor_status,",
          "1193:                                   gss_ctx_id_t *context_handle,",
          "1194:                                   const gss_OID desired_object,",
          "1195:                                   const gss_buffer_t value)",
          "1196: {",
          "1197:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)*context_handle;",
          "1199:     if (ctx == NULL || ctx->gssc == GSS_C_NO_CONTEXT)",
          "1200:         return GSS_S_UNAVAILABLE;",
          "1202:     return krb5_gss_set_sec_context_option(minor_status, &ctx->gssc,",
          "1203:                                            desired_object, value);",
          "1204: }",
          "1206: OM_uint32 KRB5_CALLCONV",
          "1207: iakerb_gss_wrap_iov(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1208:                     int conf_req_flag, gss_qop_t qop_req, int *conf_state,",
          "1209:                     gss_iov_buffer_desc *iov, int iov_count)",
          "1210: {",
          "1211:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1213:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1214:         return GSS_S_NO_CONTEXT;",
          "1216:     return krb5_gss_wrap_iov(minor_status, ctx->gssc, conf_req_flag, qop_req,",
          "1217:                              conf_state, iov, iov_count);",
          "1218: }",
          "1220: OM_uint32 KRB5_CALLCONV",
          "1221: iakerb_gss_unwrap_iov(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1222:                       int *conf_state, gss_qop_t *qop_state,",
          "1223:                       gss_iov_buffer_desc *iov, int iov_count)",
          "1224: {",
          "1225:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1227:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1228:         return GSS_S_NO_CONTEXT;",
          "1230:     return krb5_gss_unwrap_iov(minor_status, ctx->gssc, conf_state, qop_state,",
          "1231:                                iov, iov_count);",
          "1232: }",
          "1234: OM_uint32 KRB5_CALLCONV",
          "1235: iakerb_gss_wrap_iov_length(OM_uint32 *minor_status,",
          "1236:                            gss_ctx_id_t context_handle, int conf_req_flag,",
          "1237:                            gss_qop_t qop_req, int *conf_state,",
          "1238:                            gss_iov_buffer_desc *iov, int iov_count)",
          "1239: {",
          "1240:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1242:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1243:         return GSS_S_NO_CONTEXT;",
          "1245:     return krb5_gss_wrap_iov_length(minor_status, ctx->gssc, conf_req_flag,",
          "1246:                                     qop_req, conf_state, iov, iov_count);",
          "1247: }",
          "1249: OM_uint32 KRB5_CALLCONV",
          "1250: iakerb_gss_pseudo_random(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1251:                          int prf_key, const gss_buffer_t prf_in,",
          "1252:                          ssize_t desired_output_len, gss_buffer_t prf_out)",
          "1253: {",
          "1254:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1256:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1257:         return GSS_S_NO_CONTEXT;",
          "1259:     return krb5_gss_pseudo_random(minor_status, ctx->gssc, prf_key, prf_in,",
          "1260:                                   desired_output_len, prf_out);",
          "1261: }",
          "1263: OM_uint32 KRB5_CALLCONV",
          "1264: iakerb_gss_get_mic_iov(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1265:                        gss_qop_t qop_req, gss_iov_buffer_desc *iov,",
          "1266:                        int iov_count)",
          "1267: {",
          "1268:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1270:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1271:         return GSS_S_NO_CONTEXT;",
          "1273:     return krb5_gss_get_mic_iov(minor_status, ctx->gssc, qop_req, iov,",
          "1274:                                 iov_count);",
          "1275: }",
          "1277: OM_uint32 KRB5_CALLCONV",
          "1278: iakerb_gss_verify_mic_iov(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1279:                           gss_qop_t *qop_state, gss_iov_buffer_desc *iov,",
          "1280:                           int iov_count)",
          "1281: {",
          "1282:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1284:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1285:         return GSS_S_NO_CONTEXT;",
          "1287:     return krb5_gss_verify_mic_iov(minor_status, ctx->gssc, qop_state, iov,",
          "1288:                                    iov_count);",
          "1289: }",
          "1291: OM_uint32 KRB5_CALLCONV",
          "1292: iakerb_gss_get_mic_iov_length(OM_uint32 *minor_status,",
          "1293:                               gss_ctx_id_t context_handle, gss_qop_t qop_req,",
          "1294:                               gss_iov_buffer_desc *iov, int iov_count)",
          "1295: {",
          "1296:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1298:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1299:         return GSS_S_NO_CONTEXT;",
          "1301:     return krb5_gss_get_mic_iov_length(minor_status, ctx->gssc, qop_req, iov,",
          "1302:                                        iov_count);",
          "1303: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "096cfaa18504d20889a3d8829decb1bf72dd0ac5",
      "candidate_info": {
        "commit_hash": "096cfaa18504d20889a3d8829decb1bf72dd0ac5",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/096cfaa18504d20889a3d8829decb1bf72dd0ac5",
        "files": [
          "src/lib/gssapi/krb5/gssapiP_krb5.h",
          "src/lib/gssapi/krb5/gssapi_krb5.c",
          "src/lib/gssapi/krb5/iakerb.c"
        ],
        "message": "Fix IAKERB context aliasing bugs [CVE-2015-2696]\n\nThe IAKERB mechanism currently replaces its context handle with the\nkrb5 mechanism handle upon establishment, under the assumption that\nmost GSS functions are only called after context establishment.  This\nassumption is incorrect, and can lead to aliasing violations for some\nprograms.  Maintain the IAKERB context structure after context\nestablishment and add new IAKERB entry points to refer to it with that\ntype.  Add initiate and established flags to the IAKERB context\nstructure for use in gss_inquire_context() prior to context\nestablishment.\n\nCVE-2015-2696:\n\nIn MIT krb5 1.9 and later, applications which call\ngss_inquire_context() on a partially-established IAKERB context can\ncause the GSS-API library to read from a pointer using the wrong type,\ngenerally causing a process crash.  Java server applications using the\nnative JGSS provider are vulnerable to this bug.  A carefully crafted\nIAKERB packet might allow the gss_inquire_context() call to succeed\nwith attacker-determined results, but applications should not make\naccess control decisions based on gss_inquire_context() results prior\nto context establishment.\n\n    CVSSv2 Vector: AV:N/AC:M/Au:N/C:N/I:N/A:C/E:POC/RL:OF/RC:C\n\n[ghudson@mit.edu: several bugfixes, style changes, and edge-case\nbehavior changes; commit message and CVE description]\n\n(cherry picked from commit e04f0283516e80d2f93366e0d479d13c9b5c8c2a)\n\nticket: 8244\nversion_fixed: 1.14",
        "before_after_code_files": [
          "src/lib/gssapi/krb5/gssapiP_krb5.h||src/lib/gssapi/krb5/gssapiP_krb5.h",
          "src/lib/gssapi/krb5/gssapi_krb5.c||src/lib/gssapi/krb5/gssapi_krb5.c",
          "src/lib/gssapi/krb5/iakerb.c||src/lib/gssapi/krb5/iakerb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/gssapi/krb5/gssapiP_krb5.h||src/lib/gssapi/krb5/gssapiP_krb5.h",
            "src/lib/gssapi/krb5/gssapi_krb5.c||src/lib/gssapi/krb5/gssapi_krb5.c",
            "src/lib/gssapi/krb5/iakerb.c||src/lib/gssapi/krb5/iakerb.c"
          ],
          "candidate": [
            "src/lib/gssapi/krb5/gssapiP_krb5.h||src/lib/gssapi/krb5/gssapiP_krb5.h",
            "src/lib/gssapi/krb5/gssapi_krb5.c||src/lib/gssapi/krb5/gssapi_krb5.c",
            "src/lib/gssapi/krb5/iakerb.c||src/lib/gssapi/krb5/iakerb.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lib/gssapi/krb5/gssapiP_krb5.h||src/lib/gssapi/krb5/gssapiP_krb5.h": [
          "File: src/lib/gssapi/krb5/gssapiP_krb5.h -> src/lib/gssapi/krb5/gssapiP_krb5.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "621: );",
          "624: OM_uint32 KRB5_CALLCONV krb5_gss_process_context_token",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "624: OM_uint32 KRB5_CALLCONV krb5_gss_inquire_sec_context_by_oid",
          "626:  const gss_ctx_id_t,",
          "630: );",
          "632: OM_uint32 KRB5_CALLCONV krb5_gss_set_sec_context_option",
          "637: );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1302: krb5_gss_import_cred(OM_uint32 *minor_status, gss_buffer_t token,",
          "1303:                      gss_cred_id_t *cred_handle);",
          "1307: #define CRED_EXPORT_MAGIC \"K5C1\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1320: OM_uint32 KRB5_CALLCONV",
          "1321: iakerb_gss_process_context_token(OM_uint32 *minor_status,",
          "1322:                                  const gss_ctx_id_t context_handle,",
          "1323:                                  const gss_buffer_t token_buffer);",
          "1325: OM_uint32 KRB5_CALLCONV",
          "1326: iakerb_gss_context_time(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1327:                         OM_uint32 *time_rec);",
          "1329: OM_uint32 KRB5_CALLCONV",
          "1330: iakerb_gss_inquire_context(OM_uint32 *minor_status,",
          "1331:                            gss_ctx_id_t context_handle, gss_name_t *src_name,",
          "1332:                            gss_name_t *targ_name, OM_uint32 *lifetime_rec,",
          "1333:                            gss_OID *mech_type, OM_uint32 *ctx_flags,",
          "1334:                            int *locally_initiated, int *opened);",
          "1336: OM_uint32 KRB5_CALLCONV",
          "1337: iakerb_gss_get_mic(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1338:                    gss_qop_t qop_req, gss_buffer_t message_buffer,",
          "1339:                    gss_buffer_t message_token);",
          "1341: OM_uint32 KRB5_CALLCONV",
          "1342: iakerb_gss_get_mic_iov(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1343:                        gss_qop_t qop_req, gss_iov_buffer_desc *iov,",
          "1344:                        int iov_count);",
          "1346: OM_uint32 KRB5_CALLCONV",
          "1347: iakerb_gss_get_mic_iov_length(OM_uint32 *minor_status,",
          "1348:                               gss_ctx_id_t context_handle, gss_qop_t qop_req,",
          "1349:                               gss_iov_buffer_desc *iov, int iov_count);",
          "1351: OM_uint32 KRB5_CALLCONV",
          "1352: iakerb_gss_verify_mic(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1353:                       gss_buffer_t msg_buffer, gss_buffer_t token_buffer,",
          "1354:                       gss_qop_t *qop_state);",
          "1356: OM_uint32 KRB5_CALLCONV",
          "1357: iakerb_gss_verify_mic_iov(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1358:                           gss_qop_t *qop_state, gss_iov_buffer_desc *iov,",
          "1359:                           int iov_count);",
          "1361: OM_uint32 KRB5_CALLCONV",
          "1362: iakerb_gss_wrap(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1363:                 int conf_req_flag, gss_qop_t qop_req,",
          "1364:                 gss_buffer_t input_message_buffer, int *conf_state,",
          "1365:                 gss_buffer_t output_message_buffer);",
          "1367: OM_uint32 KRB5_CALLCONV",
          "1368: iakerb_gss_wrap_iov(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1369:                     int conf_req_flag, gss_qop_t qop_req, int *conf_state,",
          "1370:                     gss_iov_buffer_desc *iov, int iov_count);",
          "1372: OM_uint32 KRB5_CALLCONV",
          "1373: iakerb_gss_wrap_iov_length(OM_uint32 *minor_status,",
          "1374:                            gss_ctx_id_t context_handle, int conf_req_flag,",
          "1375:                            gss_qop_t qop_req, int *conf_state,",
          "1376:                            gss_iov_buffer_desc *iov, int iov_count);",
          "1378: OM_uint32 KRB5_CALLCONV",
          "1379: iakerb_gss_unwrap(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1380:                   gss_buffer_t input_message_buffer,",
          "1381:                   gss_buffer_t output_message_buffer, int *conf_state,",
          "1382:                   gss_qop_t *qop_state);",
          "1384: OM_uint32 KRB5_CALLCONV",
          "1385: iakerb_gss_unwrap_iov(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1386:                       int *conf_state, gss_qop_t *qop_state,",
          "1387:                       gss_iov_buffer_desc *iov, int iov_count);",
          "1389: OM_uint32 KRB5_CALLCONV",
          "1390: iakerb_gss_wrap_size_limit(OM_uint32 *minor_status,",
          "1391:                            gss_ctx_id_t context_handle, int conf_req_flag,",
          "1392:                            gss_qop_t qop_req, OM_uint32 req_output_size,",
          "1393:                            OM_uint32 *max_input_size);",
          "1395: #ifndef LEAN_CLIENT",
          "1396: OM_uint32 KRB5_CALLCONV",
          "1397: iakerb_gss_export_sec_context(OM_uint32 *minor_status,",
          "1398:                               gss_ctx_id_t *context_handle,",
          "1399:                               gss_buffer_t interprocess_token);",
          "1402: OM_uint32 KRB5_CALLCONV",
          "1403: iakerb_gss_inquire_sec_context_by_oid(OM_uint32 *minor_status,",
          "1404:                                       const gss_ctx_id_t context_handle,",
          "1405:                                       const gss_OID desired_object,",
          "1406:                                       gss_buffer_set_t *data_set);",
          "1408: OM_uint32 KRB5_CALLCONV",
          "1409: iakerb_gss_set_sec_context_option(OM_uint32 *minor_status,",
          "1410:                                   gss_ctx_id_t *context_handle,",
          "1411:                                   const gss_OID desired_object,",
          "1412:                                   const gss_buffer_t value);",
          "1414: OM_uint32 KRB5_CALLCONV",
          "1415: iakerb_gss_pseudo_random(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1416:                          int prf_key, const gss_buffer_t prf_in,",
          "1417:                          ssize_t desired_output_len, gss_buffer_t prf_out);",
          "",
          "---------------"
        ],
        "src/lib/gssapi/krb5/gssapi_krb5.c||src/lib/gssapi/krb5/gssapi_krb5.c": [
          "File: src/lib/gssapi/krb5/gssapi_krb5.c -> src/lib/gssapi/krb5/gssapi_krb5.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "351:     }",
          "352: };",
          "355: krb5_gss_inquire_sec_context_by_oid (OM_uint32 *minor_status,",
          "356:                                      const gss_ctx_id_t context_handle,",
          "357:                                      const gss_OID desired_object,",
          "",
          "[Removed Lines]",
          "354: static OM_uint32 KRB5_CALLCONV",
          "",
          "[Added Lines]",
          "354: OM_uint32 KRB5_CALLCONV",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "465: };",
          "466: #endif",
          "469: krb5_gss_set_sec_context_option (OM_uint32 *minor_status,",
          "470:                                  gss_ctx_id_t *context_handle,",
          "471:                                  const gss_OID desired_object,",
          "",
          "[Removed Lines]",
          "468: static OM_uint32 KRB5_CALLCONV",
          "",
          "[Added Lines]",
          "468: OM_uint32 KRB5_CALLCONV",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "929:     krb5_gss_get_mic_iov_length,",
          "930: };",
          "932: #ifdef _GSS_STATIC_LINK",
          "933: #include \"mglueP.h\"",
          "934: static int gss_iakerbmechglue_init(void)",
          "935: {",
          "936:     struct gss_mech_config mech_iakerb;",
          "947:     memset(&mech_iakerb, 0, sizeof(mech_iakerb));",
          "948:     mech_iakerb.mech = &iakerb_mechanism;",
          "",
          "[Removed Lines]",
          "937:     struct gss_config iakerb_mechanism = krb5_mechanism;",
          "940:     iakerb_mechanism.gss_accept_sec_context = iakerb_gss_accept_sec_context;",
          "941:     iakerb_mechanism.gss_init_sec_context   = iakerb_gss_init_sec_context;",
          "942:     iakerb_mechanism.gss_delete_sec_context = iakerb_gss_delete_sec_context;",
          "943:     iakerb_mechanism.gss_acquire_cred       = iakerb_gss_acquire_cred;",
          "944:     iakerb_mechanism.gssspi_acquire_cred_with_password",
          "945:                                     = iakerb_gss_acquire_cred_with_password;",
          "",
          "[Added Lines]",
          "934: static struct gss_config iakerb_mechanism = {",
          "935:     { GSS_MECH_KRB5_OID_LENGTH, GSS_MECH_KRB5_OID },",
          "936:     NULL,",
          "937:     iakerb_gss_acquire_cred,",
          "938:     krb5_gss_release_cred,",
          "939:     iakerb_gss_init_sec_context,",
          "940: #ifdef LEAN_CLIENT",
          "941:     NULL,",
          "942: #else",
          "943:     iakerb_gss_accept_sec_context,",
          "944: #endif",
          "945:     iakerb_gss_process_context_token,",
          "946:     iakerb_gss_delete_sec_context,",
          "947:     iakerb_gss_context_time,",
          "948:     iakerb_gss_get_mic,",
          "949:     iakerb_gss_verify_mic,",
          "950: #if defined(IOV_SHIM_EXERCISE_WRAP) || defined(IOV_SHIM_EXERCISE)",
          "951:     NULL,",
          "952: #else",
          "953:     iakerb_gss_wrap,",
          "954: #endif",
          "955: #if defined(IOV_SHIM_EXERCISE_UNWRAP) || defined(IOV_SHIM_EXERCISE)",
          "956:     NULL,",
          "957: #else",
          "958:     iakerb_gss_unwrap,",
          "959: #endif",
          "960:     krb5_gss_display_status,",
          "961:     krb5_gss_indicate_mechs,",
          "962:     krb5_gss_compare_name,",
          "963:     krb5_gss_display_name,",
          "964:     krb5_gss_import_name,",
          "965:     krb5_gss_release_name,",
          "966:     krb5_gss_inquire_cred,",
          "968: #ifdef LEAN_CLIENT",
          "969:     NULL,",
          "970:     NULL,",
          "971: #else",
          "972:     iakerb_gss_export_sec_context,",
          "973:     NULL,",
          "974: #endif",
          "975:     krb5_gss_inquire_cred_by_mech,",
          "976:     krb5_gss_inquire_names_for_mech,",
          "977:     iakerb_gss_inquire_context,",
          "978:     krb5_gss_internal_release_oid,",
          "979:     iakerb_gss_wrap_size_limit,",
          "980:     krb5_gss_localname,",
          "981:     krb5_gss_authorize_localname,",
          "982:     krb5_gss_export_name,",
          "983:     krb5_gss_duplicate_name,",
          "984:     krb5_gss_store_cred,",
          "985:     iakerb_gss_inquire_sec_context_by_oid,",
          "986:     krb5_gss_inquire_cred_by_oid,",
          "987:     iakerb_gss_set_sec_context_option,",
          "988:     krb5_gssspi_set_cred_option,",
          "989:     krb5_gssspi_mech_invoke,",
          "992:     iakerb_gss_wrap_iov,",
          "993:     iakerb_gss_unwrap_iov,",
          "994:     iakerb_gss_wrap_iov_length,",
          "999:     krb5_gss_inquire_name,",
          "1000:     krb5_gss_get_name_attribute,",
          "1001:     krb5_gss_set_name_attribute,",
          "1002:     krb5_gss_delete_name_attribute,",
          "1003:     krb5_gss_export_name_composite,",
          "1004:     krb5_gss_map_name_to_any,",
          "1005:     krb5_gss_release_any_name_mapping,",
          "1006:     iakerb_gss_pseudo_random,",
          "1008:     krb5_gss_inquire_saslname_for_mech,",
          "1009:     krb5_gss_inquire_mech_for_saslname,",
          "1010:     krb5_gss_inquire_attrs_for_mech,",
          "1011:     krb5_gss_acquire_cred_from,",
          "1012:     krb5_gss_store_cred_into,",
          "1013:     iakerb_gss_acquire_cred_with_password,",
          "1014:     krb5_gss_export_cred,",
          "1015:     krb5_gss_import_cred,",
          "1019:     iakerb_gss_get_mic_iov,",
          "1020:     iakerb_gss_verify_mic_iov,",
          "1021:     iakerb_gss_get_mic_iov_length,",
          "1022: };",
          "",
          "---------------"
        ],
        "src/lib/gssapi/krb5/iakerb.c||src/lib/gssapi/krb5/iakerb.c": [
          "File: src/lib/gssapi/krb5/iakerb.c -> src/lib/gssapi/krb5/iakerb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     gss_ctx_id_t gssc;",
          "50:     krb5_get_init_creds_opt *gic_opts;",
          "51: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:     int initiate;",
          "51:     int established;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "697: static krb5_error_code",
          "699: {",
          "700:     iakerb_ctx_id_t ctx;",
          "701:     krb5_error_code code;",
          "",
          "[Removed Lines]",
          "698: iakerb_alloc_context(iakerb_ctx_id_t *pctx)",
          "",
          "[Added Lines]",
          "700: iakerb_alloc_context(iakerb_ctx_id_t *pctx, int initiate)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "709:     ctx->magic = KG_IAKERB_CONTEXT;",
          "710:     ctx->state = IAKERB_AS_REQ;",
          "711:     ctx->count = 0;",
          "713:     code = krb5_gss_init_context(&ctx->k5c);",
          "714:     if (code != 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "714:     ctx->initiate = initiate;",
          "715:     ctx->established = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "732:                               gss_ctx_id_t *context_handle,",
          "733:                               gss_buffer_t output_token)",
          "734: {",
          "737:     if (output_token != GSS_C_NO_BUFFER) {",
          "738:         output_token->length = 0;",
          "",
          "[Removed Lines]",
          "735:     OM_uint32 major_status = GSS_S_COMPLETE;",
          "",
          "[Added Lines]",
          "739:     iakerb_ctx_id_t iakerb_ctx = (iakerb_ctx_id_t)*context_handle;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "740:     }",
          "760: }",
          "762: static krb5_boolean",
          "",
          "[Removed Lines]",
          "744:     if (*context_handle != GSS_C_NO_CONTEXT) {",
          "745:         iakerb_ctx_id_t iakerb_ctx = (iakerb_ctx_id_t)*context_handle;",
          "747:         if (iakerb_ctx->magic == KG_IAKERB_CONTEXT) {",
          "748:             iakerb_release_context(iakerb_ctx);",
          "750:         } else {",
          "751:             assert(iakerb_ctx->magic == KG_CONTEXT);",
          "753:             major_status = krb5_gss_delete_sec_context(minor_status,",
          "754:                                                        context_handle,",
          "755:                                                        output_token);",
          "756:         }",
          "757:     }",
          "759:     return major_status;",
          "",
          "[Added Lines]",
          "748:     iakerb_release_context(iakerb_ctx);",
          "750:     return GSS_S_COMPLETE;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "802:     int initialContextToken = (*context_handle == GSS_C_NO_CONTEXT);",
          "804:     if (initialContextToken) {",
          "806:         if (code != 0)",
          "807:             goto cleanup;",
          "",
          "[Removed Lines]",
          "805:         code = iakerb_alloc_context(&ctx);",
          "",
          "[Added Lines]",
          "796:         code = iakerb_alloc_context(&ctx, 0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "854:                                                        time_rec,",
          "855:                                                        delegated_cred_handle,",
          "856:                                                        &exts);",
          "862:         if (mech_type != NULL)",
          "864:     }",
          "",
          "[Removed Lines]",
          "857:         if (major_status == GSS_S_COMPLETE) {",
          "859:             ctx->gssc = NULL;",
          "860:             iakerb_release_context(ctx);",
          "861:         }",
          "",
          "[Added Lines]",
          "848:         if (major_status == GSS_S_COMPLETE)",
          "849:             ctx->established = 1;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "897:     int initialContextToken = (*context_handle == GSS_C_NO_CONTEXT);",
          "899:     if (initialContextToken) {",
          "901:         if (code != 0) {",
          "903:             goto cleanup;",
          "",
          "[Removed Lines]",
          "900:         code = iakerb_alloc_context(&ctx);",
          "",
          "[Added Lines]",
          "888:         code = iakerb_alloc_context(&ctx, 1);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "983:                                                      ret_flags,",
          "984:                                                      time_rec,",
          "985:                                                      &exts);",
          "991:         if (actual_mech_type != NULL)",
          "993:     } else {",
          "",
          "[Removed Lines]",
          "986:         if (major_status == GSS_S_COMPLETE) {",
          "988:             ctx->gssc = GSS_C_NO_CONTEXT;",
          "989:             iakerb_release_context(ctx);",
          "990:         }",
          "",
          "[Added Lines]",
          "974:         if (major_status == GSS_S_COMPLETE)",
          "975:             ctx->established = 1;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1011:     return major_status;",
          "1012: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "999: OM_uint32 KRB5_CALLCONV",
          "1000: iakerb_gss_unwrap(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1001:                   gss_buffer_t input_message_buffer,",
          "1002:                   gss_buffer_t output_message_buffer, int *conf_state,",
          "1003:                   gss_qop_t *qop_state)",
          "1004: {",
          "1005:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1007:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1008:         return GSS_S_NO_CONTEXT;",
          "1010:     return krb5_gss_unwrap(minor_status, ctx->gssc, input_message_buffer,",
          "1011:                            output_message_buffer, conf_state, qop_state);",
          "1012: }",
          "1014: OM_uint32 KRB5_CALLCONV",
          "1015: iakerb_gss_wrap(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1016:                 int conf_req_flag, gss_qop_t qop_req,",
          "1017:                 gss_buffer_t input_message_buffer, int *conf_state,",
          "1018:                 gss_buffer_t output_message_buffer)",
          "1019: {",
          "1020:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1022:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1023:         return GSS_S_NO_CONTEXT;",
          "1025:     return krb5_gss_wrap(minor_status, ctx->gssc, conf_req_flag, qop_req,",
          "1026:                          input_message_buffer, conf_state,",
          "1027:                          output_message_buffer);",
          "1028: }",
          "1030: OM_uint32 KRB5_CALLCONV",
          "1031: iakerb_gss_process_context_token(OM_uint32 *minor_status,",
          "1032:                                  const gss_ctx_id_t context_handle,",
          "1033:                                  const gss_buffer_t token_buffer)",
          "1034: {",
          "1035:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1037:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1038:         return GSS_S_DEFECTIVE_TOKEN;",
          "1040:     return krb5_gss_process_context_token(minor_status, ctx->gssc,",
          "1041:                                           token_buffer);",
          "1042: }",
          "1044: OM_uint32 KRB5_CALLCONV",
          "1045: iakerb_gss_context_time(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1046:                         OM_uint32 *time_rec)",
          "1047: {",
          "1048:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1050:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1051:         return GSS_S_NO_CONTEXT;",
          "1053:     return krb5_gss_context_time(minor_status, ctx->gssc, time_rec);",
          "1054: }",
          "1056: #ifndef LEAN_CLIENT",
          "1058: OM_uint32 KRB5_CALLCONV",
          "1059: iakerb_gss_export_sec_context(OM_uint32 *minor_status,",
          "1060:                               gss_ctx_id_t *context_handle,",
          "1061:                               gss_buffer_t interprocess_token)",
          "1062: {",
          "1063:     OM_uint32 maj;",
          "1064:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1067:     if (!ctx->established)",
          "1068:         return GSS_S_UNAVAILABLE;",
          "1070:     maj = krb5_gss_export_sec_context(minor_status, &ctx->gssc,",
          "1071:                                       interprocess_token);",
          "1072:     if (ctx->gssc == GSS_C_NO_CONTEXT) {",
          "1073:         iakerb_release_context(ctx);",
          "1075:     }",
          "1076:     return maj;",
          "1077: }",
          "1088: OM_uint32 KRB5_CALLCONV",
          "1089: iakerb_gss_inquire_context(OM_uint32 *minor_status,",
          "1090:                            gss_ctx_id_t context_handle, gss_name_t *src_name,",
          "1091:                            gss_name_t *targ_name, OM_uint32 *lifetime_rec,",
          "1092:                            gss_OID *mech_type, OM_uint32 *ctx_flags,",
          "1093:                            int *initiate, int *opened)",
          "1094: {",
          "1095:     OM_uint32 ret;",
          "1096:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1098:     if (src_name != NULL)",
          "1100:     if (targ_name != NULL)",
          "1102:     if (lifetime_rec != NULL)",
          "1104:     if (mech_type != NULL)",
          "1106:     if (ctx_flags != NULL)",
          "1108:     if (initiate != NULL)",
          "1110:     if (opened != NULL)",
          "1113:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1114:         return GSS_S_COMPLETE;",
          "1116:     ret = krb5_gss_inquire_context(minor_status, ctx->gssc, src_name,",
          "1117:                                    targ_name, lifetime_rec, mech_type,",
          "1118:                                    ctx_flags, initiate, opened);",
          "1120:     if (!ctx->established) {",
          "1122:         if (mech_type != NULL)",
          "1126:         if (ctx_flags != NULL)",
          "1128:     }",
          "1130:     return ret;",
          "1131: }",
          "1133: OM_uint32 KRB5_CALLCONV",
          "1134: iakerb_gss_wrap_size_limit(OM_uint32 *minor_status,",
          "1135:                            gss_ctx_id_t context_handle, int conf_req_flag,",
          "1136:                            gss_qop_t qop_req, OM_uint32 req_output_size,",
          "1137:                            OM_uint32 *max_input_size)",
          "1138: {",
          "1139:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1141:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1142:         return GSS_S_NO_CONTEXT;",
          "1144:     return krb5_gss_wrap_size_limit(minor_status, ctx->gssc, conf_req_flag,",
          "1145:                                     qop_req, req_output_size, max_input_size);",
          "1146: }",
          "1148: OM_uint32 KRB5_CALLCONV",
          "1149: iakerb_gss_get_mic(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1150:                    gss_qop_t qop_req, gss_buffer_t message_buffer,",
          "1151:                    gss_buffer_t message_token)",
          "1152: {",
          "1153:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1155:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1156:         return GSS_S_NO_CONTEXT;",
          "1158:     return krb5_gss_get_mic(minor_status, ctx->gssc, qop_req, message_buffer,",
          "1159:                             message_token);",
          "1160: }",
          "1162: OM_uint32 KRB5_CALLCONV",
          "1163: iakerb_gss_verify_mic(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1164:                       gss_buffer_t msg_buffer, gss_buffer_t token_buffer,",
          "1165:                       gss_qop_t *qop_state)",
          "1166: {",
          "1167:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1169:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1170:         return GSS_S_NO_CONTEXT;",
          "1172:     return krb5_gss_verify_mic(minor_status, ctx->gssc, msg_buffer,",
          "1173:                                token_buffer, qop_state);",
          "1174: }",
          "1176: OM_uint32 KRB5_CALLCONV",
          "1177: iakerb_gss_inquire_sec_context_by_oid(OM_uint32 *minor_status,",
          "1178:                                       const gss_ctx_id_t context_handle,",
          "1179:                                       const gss_OID desired_object,",
          "1180:                                       gss_buffer_set_t *data_set)",
          "1181: {",
          "1182:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1184:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1185:         return GSS_S_UNAVAILABLE;",
          "1187:     return krb5_gss_inquire_sec_context_by_oid(minor_status, ctx->gssc,",
          "1188:                                                desired_object, data_set);",
          "1189: }",
          "1191: OM_uint32 KRB5_CALLCONV",
          "1192: iakerb_gss_set_sec_context_option(OM_uint32 *minor_status,",
          "1193:                                   gss_ctx_id_t *context_handle,",
          "1194:                                   const gss_OID desired_object,",
          "1195:                                   const gss_buffer_t value)",
          "1196: {",
          "1197:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)*context_handle;",
          "1199:     if (ctx == NULL || ctx->gssc == GSS_C_NO_CONTEXT)",
          "1200:         return GSS_S_UNAVAILABLE;",
          "1202:     return krb5_gss_set_sec_context_option(minor_status, &ctx->gssc,",
          "1203:                                            desired_object, value);",
          "1204: }",
          "1206: OM_uint32 KRB5_CALLCONV",
          "1207: iakerb_gss_wrap_iov(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1208:                     int conf_req_flag, gss_qop_t qop_req, int *conf_state,",
          "1209:                     gss_iov_buffer_desc *iov, int iov_count)",
          "1210: {",
          "1211:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1213:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1214:         return GSS_S_NO_CONTEXT;",
          "1216:     return krb5_gss_wrap_iov(minor_status, ctx->gssc, conf_req_flag, qop_req,",
          "1217:                              conf_state, iov, iov_count);",
          "1218: }",
          "1220: OM_uint32 KRB5_CALLCONV",
          "1221: iakerb_gss_unwrap_iov(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1222:                       int *conf_state, gss_qop_t *qop_state,",
          "1223:                       gss_iov_buffer_desc *iov, int iov_count)",
          "1224: {",
          "1225:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1227:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1228:         return GSS_S_NO_CONTEXT;",
          "1230:     return krb5_gss_unwrap_iov(minor_status, ctx->gssc, conf_state, qop_state,",
          "1231:                                iov, iov_count);",
          "1232: }",
          "1234: OM_uint32 KRB5_CALLCONV",
          "1235: iakerb_gss_wrap_iov_length(OM_uint32 *minor_status,",
          "1236:                            gss_ctx_id_t context_handle, int conf_req_flag,",
          "1237:                            gss_qop_t qop_req, int *conf_state,",
          "1238:                            gss_iov_buffer_desc *iov, int iov_count)",
          "1239: {",
          "1240:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1242:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1243:         return GSS_S_NO_CONTEXT;",
          "1245:     return krb5_gss_wrap_iov_length(minor_status, ctx->gssc, conf_req_flag,",
          "1246:                                     qop_req, conf_state, iov, iov_count);",
          "1247: }",
          "1249: OM_uint32 KRB5_CALLCONV",
          "1250: iakerb_gss_pseudo_random(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1251:                          int prf_key, const gss_buffer_t prf_in,",
          "1252:                          ssize_t desired_output_len, gss_buffer_t prf_out)",
          "1253: {",
          "1254:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1256:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1257:         return GSS_S_NO_CONTEXT;",
          "1259:     return krb5_gss_pseudo_random(minor_status, ctx->gssc, prf_key, prf_in,",
          "1260:                                   desired_output_len, prf_out);",
          "1261: }",
          "1263: OM_uint32 KRB5_CALLCONV",
          "1264: iakerb_gss_get_mic_iov(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1265:                        gss_qop_t qop_req, gss_iov_buffer_desc *iov,",
          "1266:                        int iov_count)",
          "1267: {",
          "1268:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1270:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1271:         return GSS_S_NO_CONTEXT;",
          "1273:     return krb5_gss_get_mic_iov(minor_status, ctx->gssc, qop_req, iov,",
          "1274:                                 iov_count);",
          "1275: }",
          "1277: OM_uint32 KRB5_CALLCONV",
          "1278: iakerb_gss_verify_mic_iov(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1279:                           gss_qop_t *qop_state, gss_iov_buffer_desc *iov,",
          "1280:                           int iov_count)",
          "1281: {",
          "1282:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1284:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1285:         return GSS_S_NO_CONTEXT;",
          "1287:     return krb5_gss_verify_mic_iov(minor_status, ctx->gssc, qop_state, iov,",
          "1288:                                    iov_count);",
          "1289: }",
          "1291: OM_uint32 KRB5_CALLCONV",
          "1292: iakerb_gss_get_mic_iov_length(OM_uint32 *minor_status,",
          "1293:                               gss_ctx_id_t context_handle, gss_qop_t qop_req,",
          "1294:                               gss_iov_buffer_desc *iov, int iov_count)",
          "1295: {",
          "1296:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1298:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1299:         return GSS_S_NO_CONTEXT;",
          "1301:     return krb5_gss_get_mic_iov_length(minor_status, ctx->gssc, qop_req, iov,",
          "1302:                                        iov_count);",
          "1303: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f84d3d246ef2960b2fedcbb5474b2b8a07b53be8",
      "candidate_info": {
        "commit_hash": "f84d3d246ef2960b2fedcbb5474b2b8a07b53be8",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/f84d3d246ef2960b2fedcbb5474b2b8a07b53be8",
        "files": [
          "src/lib/gssapi/krb5/gssapiP_krb5.h",
          "src/lib/gssapi/krb5/gssapi_krb5.c",
          "src/lib/gssapi/krb5/iakerb.c"
        ],
        "message": "Fix IAKERB context aliasing bugs [CVE-2015-2696]\n\nThe IAKERB mechanism currently replaces its context handle with the\nkrb5 mechanism handle upon establishment, under the assumption that\nmost GSS functions are only called after context establishment.  This\nassumption is incorrect, and can lead to aliasing violations for some\nprograms.  Maintain the IAKERB context structure after context\nestablishment and add new IAKERB entry points to refer to it with that\ntype.  Add initiate and established flags to the IAKERB context\nstructure for use in gss_inquire_context() prior to context\nestablishment.\n\nCVE-2015-2696:\n\nIn MIT krb5 1.9 and later, applications which call\ngss_inquire_context() on a partially-established IAKERB context can\ncause the GSS-API library to read from a pointer using the wrong type,\ngenerally causing a process crash.  Java server applications using the\nnative JGSS provider are vulnerable to this bug.  A carefully crafted\nIAKERB packet might allow the gss_inquire_context() call to succeed\nwith attacker-determined results, but applications should not make\naccess control decisions based on gss_inquire_context() results prior\nto context establishment.\n\n    CVSSv2 Vector: AV:N/AC:M/Au:N/C:N/I:N/A:C/E:POC/RL:OF/RC:C\n\n[ghudson@mit.edu: several bugfixes, style changes, and edge-case\nbehavior changes; commit message and CVE description]\n\n(cherry picked from commit e04f0283516e80d2f93366e0d479d13c9b5c8c2a)\n(cherry picked from commit 096cfaa18504d20889a3d8829decb1bf72dd0ac5)\n\nticket: 8282\nversion_fixed: 1.13.3",
        "before_after_code_files": [
          "src/lib/gssapi/krb5/gssapiP_krb5.h||src/lib/gssapi/krb5/gssapiP_krb5.h",
          "src/lib/gssapi/krb5/gssapi_krb5.c||src/lib/gssapi/krb5/gssapi_krb5.c",
          "src/lib/gssapi/krb5/iakerb.c||src/lib/gssapi/krb5/iakerb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/gssapi/krb5/gssapiP_krb5.h||src/lib/gssapi/krb5/gssapiP_krb5.h",
            "src/lib/gssapi/krb5/gssapi_krb5.c||src/lib/gssapi/krb5/gssapi_krb5.c",
            "src/lib/gssapi/krb5/iakerb.c||src/lib/gssapi/krb5/iakerb.c"
          ],
          "candidate": [
            "src/lib/gssapi/krb5/gssapiP_krb5.h||src/lib/gssapi/krb5/gssapiP_krb5.h",
            "src/lib/gssapi/krb5/gssapi_krb5.c||src/lib/gssapi/krb5/gssapi_krb5.c",
            "src/lib/gssapi/krb5/iakerb.c||src/lib/gssapi/krb5/iakerb.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lib/gssapi/krb5/gssapiP_krb5.h||src/lib/gssapi/krb5/gssapiP_krb5.h": [
          "File: src/lib/gssapi/krb5/gssapiP_krb5.h -> src/lib/gssapi/krb5/gssapiP_krb5.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "620: );",
          "623: OM_uint32 KRB5_CALLCONV krb5_gss_process_context_token",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "623: OM_uint32 KRB5_CALLCONV krb5_gss_inquire_sec_context_by_oid",
          "625:  const gss_ctx_id_t,",
          "629: );",
          "631: OM_uint32 KRB5_CALLCONV krb5_gss_set_sec_context_option",
          "636: );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1301: krb5_gss_import_cred(OM_uint32 *minor_status, gss_buffer_t token,",
          "1302:                      gss_cred_id_t *cred_handle);",
          "1306: #define CRED_EXPORT_MAGIC \"K5C1\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1319: OM_uint32 KRB5_CALLCONV",
          "1320: iakerb_gss_process_context_token(OM_uint32 *minor_status,",
          "1321:                                  const gss_ctx_id_t context_handle,",
          "1322:                                  const gss_buffer_t token_buffer);",
          "1324: OM_uint32 KRB5_CALLCONV",
          "1325: iakerb_gss_context_time(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1326:                         OM_uint32 *time_rec);",
          "1328: OM_uint32 KRB5_CALLCONV",
          "1329: iakerb_gss_inquire_context(OM_uint32 *minor_status,",
          "1330:                            gss_ctx_id_t context_handle, gss_name_t *src_name,",
          "1331:                            gss_name_t *targ_name, OM_uint32 *lifetime_rec,",
          "1332:                            gss_OID *mech_type, OM_uint32 *ctx_flags,",
          "1333:                            int *locally_initiated, int *opened);",
          "1335: OM_uint32 KRB5_CALLCONV",
          "1336: iakerb_gss_get_mic(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1337:                    gss_qop_t qop_req, gss_buffer_t message_buffer,",
          "1338:                    gss_buffer_t message_token);",
          "1340: OM_uint32 KRB5_CALLCONV",
          "1341: iakerb_gss_get_mic_iov(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1342:                        gss_qop_t qop_req, gss_iov_buffer_desc *iov,",
          "1343:                        int iov_count);",
          "1345: OM_uint32 KRB5_CALLCONV",
          "1346: iakerb_gss_get_mic_iov_length(OM_uint32 *minor_status,",
          "1347:                               gss_ctx_id_t context_handle, gss_qop_t qop_req,",
          "1348:                               gss_iov_buffer_desc *iov, int iov_count);",
          "1350: OM_uint32 KRB5_CALLCONV",
          "1351: iakerb_gss_verify_mic(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1352:                       gss_buffer_t msg_buffer, gss_buffer_t token_buffer,",
          "1353:                       gss_qop_t *qop_state);",
          "1355: OM_uint32 KRB5_CALLCONV",
          "1356: iakerb_gss_verify_mic_iov(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1357:                           gss_qop_t *qop_state, gss_iov_buffer_desc *iov,",
          "1358:                           int iov_count);",
          "1360: OM_uint32 KRB5_CALLCONV",
          "1361: iakerb_gss_wrap(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1362:                 int conf_req_flag, gss_qop_t qop_req,",
          "1363:                 gss_buffer_t input_message_buffer, int *conf_state,",
          "1364:                 gss_buffer_t output_message_buffer);",
          "1366: OM_uint32 KRB5_CALLCONV",
          "1367: iakerb_gss_wrap_iov(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1368:                     int conf_req_flag, gss_qop_t qop_req, int *conf_state,",
          "1369:                     gss_iov_buffer_desc *iov, int iov_count);",
          "1371: OM_uint32 KRB5_CALLCONV",
          "1372: iakerb_gss_wrap_iov_length(OM_uint32 *minor_status,",
          "1373:                            gss_ctx_id_t context_handle, int conf_req_flag,",
          "1374:                            gss_qop_t qop_req, int *conf_state,",
          "1375:                            gss_iov_buffer_desc *iov, int iov_count);",
          "1377: OM_uint32 KRB5_CALLCONV",
          "1378: iakerb_gss_unwrap(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1379:                   gss_buffer_t input_message_buffer,",
          "1380:                   gss_buffer_t output_message_buffer, int *conf_state,",
          "1381:                   gss_qop_t *qop_state);",
          "1383: OM_uint32 KRB5_CALLCONV",
          "1384: iakerb_gss_unwrap_iov(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1385:                       int *conf_state, gss_qop_t *qop_state,",
          "1386:                       gss_iov_buffer_desc *iov, int iov_count);",
          "1388: OM_uint32 KRB5_CALLCONV",
          "1389: iakerb_gss_wrap_size_limit(OM_uint32 *minor_status,",
          "1390:                            gss_ctx_id_t context_handle, int conf_req_flag,",
          "1391:                            gss_qop_t qop_req, OM_uint32 req_output_size,",
          "1392:                            OM_uint32 *max_input_size);",
          "1394: #ifndef LEAN_CLIENT",
          "1395: OM_uint32 KRB5_CALLCONV",
          "1396: iakerb_gss_export_sec_context(OM_uint32 *minor_status,",
          "1397:                               gss_ctx_id_t *context_handle,",
          "1398:                               gss_buffer_t interprocess_token);",
          "1401: OM_uint32 KRB5_CALLCONV",
          "1402: iakerb_gss_inquire_sec_context_by_oid(OM_uint32 *minor_status,",
          "1403:                                       const gss_ctx_id_t context_handle,",
          "1404:                                       const gss_OID desired_object,",
          "1405:                                       gss_buffer_set_t *data_set);",
          "1407: OM_uint32 KRB5_CALLCONV",
          "1408: iakerb_gss_set_sec_context_option(OM_uint32 *minor_status,",
          "1409:                                   gss_ctx_id_t *context_handle,",
          "1410:                                   const gss_OID desired_object,",
          "1411:                                   const gss_buffer_t value);",
          "1413: OM_uint32 KRB5_CALLCONV",
          "1414: iakerb_gss_pseudo_random(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1415:                          int prf_key, const gss_buffer_t prf_in,",
          "1416:                          ssize_t desired_output_len, gss_buffer_t prf_out);",
          "",
          "---------------"
        ],
        "src/lib/gssapi/krb5/gssapi_krb5.c||src/lib/gssapi/krb5/gssapi_krb5.c": [
          "File: src/lib/gssapi/krb5/gssapi_krb5.c -> src/lib/gssapi/krb5/gssapi_krb5.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "345:     }",
          "346: };",
          "349: krb5_gss_inquire_sec_context_by_oid (OM_uint32 *minor_status,",
          "350:                                      const gss_ctx_id_t context_handle,",
          "351:                                      const gss_OID desired_object,",
          "",
          "[Removed Lines]",
          "348: static OM_uint32 KRB5_CALLCONV",
          "",
          "[Added Lines]",
          "348: OM_uint32 KRB5_CALLCONV",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "459: };",
          "460: #endif",
          "463: krb5_gss_set_sec_context_option (OM_uint32 *minor_status,",
          "464:                                  gss_ctx_id_t *context_handle,",
          "465:                                  const gss_OID desired_object,",
          "",
          "[Removed Lines]",
          "462: static OM_uint32 KRB5_CALLCONV",
          "",
          "[Added Lines]",
          "462: OM_uint32 KRB5_CALLCONV",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "904:     krb5_gss_get_mic_iov_length,",
          "905: };",
          "907: #ifdef _GSS_STATIC_LINK",
          "908: #include \"mglueP.h\"",
          "909: static int gss_iakerbmechglue_init(void)",
          "910: {",
          "911:     struct gss_mech_config mech_iakerb;",
          "922:     memset(&mech_iakerb, 0, sizeof(mech_iakerb));",
          "923:     mech_iakerb.mech = &iakerb_mechanism;",
          "",
          "[Removed Lines]",
          "912:     struct gss_config iakerb_mechanism = krb5_mechanism;",
          "915:     iakerb_mechanism.gss_accept_sec_context = iakerb_gss_accept_sec_context;",
          "916:     iakerb_mechanism.gss_init_sec_context   = iakerb_gss_init_sec_context;",
          "917:     iakerb_mechanism.gss_delete_sec_context = iakerb_gss_delete_sec_context;",
          "918:     iakerb_mechanism.gss_acquire_cred       = iakerb_gss_acquire_cred;",
          "919:     iakerb_mechanism.gssspi_acquire_cred_with_password",
          "920:                                     = iakerb_gss_acquire_cred_with_password;",
          "",
          "[Added Lines]",
          "909: static struct gss_config iakerb_mechanism = {",
          "910:     { GSS_MECH_KRB5_OID_LENGTH, GSS_MECH_KRB5_OID },",
          "911:     NULL,",
          "912:     iakerb_gss_acquire_cred,",
          "913:     krb5_gss_release_cred,",
          "914:     iakerb_gss_init_sec_context,",
          "915: #ifdef LEAN_CLIENT",
          "916:     NULL,",
          "917: #else",
          "918:     iakerb_gss_accept_sec_context,",
          "919: #endif",
          "920:     iakerb_gss_process_context_token,",
          "921:     iakerb_gss_delete_sec_context,",
          "922:     iakerb_gss_context_time,",
          "923:     iakerb_gss_get_mic,",
          "924:     iakerb_gss_verify_mic,",
          "925: #if defined(IOV_SHIM_EXERCISE_WRAP) || defined(IOV_SHIM_EXERCISE)",
          "926:     NULL,",
          "927: #else",
          "928:     iakerb_gss_wrap,",
          "929: #endif",
          "930: #if defined(IOV_SHIM_EXERCISE_UNWRAP) || defined(IOV_SHIM_EXERCISE)",
          "931:     NULL,",
          "932: #else",
          "933:     iakerb_gss_unwrap,",
          "934: #endif",
          "935:     krb5_gss_display_status,",
          "936:     krb5_gss_indicate_mechs,",
          "937:     krb5_gss_compare_name,",
          "938:     krb5_gss_display_name,",
          "939:     krb5_gss_import_name,",
          "940:     krb5_gss_release_name,",
          "941:     krb5_gss_inquire_cred,",
          "943: #ifdef LEAN_CLIENT",
          "944:     NULL,",
          "945:     NULL,",
          "946: #else",
          "947:     iakerb_gss_export_sec_context,",
          "948:     NULL,",
          "949: #endif",
          "950:     krb5_gss_inquire_cred_by_mech,",
          "951:     krb5_gss_inquire_names_for_mech,",
          "952:     iakerb_gss_inquire_context,",
          "953:     krb5_gss_internal_release_oid,",
          "954:     iakerb_gss_wrap_size_limit,",
          "955:     krb5_gss_localname,",
          "956:     krb5_gss_authorize_localname,",
          "957:     krb5_gss_export_name,",
          "958:     krb5_gss_duplicate_name,",
          "959:     krb5_gss_store_cred,",
          "960:     iakerb_gss_inquire_sec_context_by_oid,",
          "961:     krb5_gss_inquire_cred_by_oid,",
          "962:     iakerb_gss_set_sec_context_option,",
          "963:     krb5_gssspi_set_cred_option,",
          "964:     krb5_gssspi_mech_invoke,",
          "967:     iakerb_gss_wrap_iov,",
          "968:     iakerb_gss_unwrap_iov,",
          "969:     iakerb_gss_wrap_iov_length,",
          "974:     krb5_gss_inquire_name,",
          "975:     krb5_gss_get_name_attribute,",
          "976:     krb5_gss_set_name_attribute,",
          "977:     krb5_gss_delete_name_attribute,",
          "978:     krb5_gss_export_name_composite,",
          "979:     krb5_gss_map_name_to_any,",
          "980:     krb5_gss_release_any_name_mapping,",
          "981:     iakerb_gss_pseudo_random,",
          "983:     krb5_gss_inquire_saslname_for_mech,",
          "984:     krb5_gss_inquire_mech_for_saslname,",
          "985:     krb5_gss_inquire_attrs_for_mech,",
          "986:     krb5_gss_acquire_cred_from,",
          "987:     krb5_gss_store_cred_into,",
          "988:     iakerb_gss_acquire_cred_with_password,",
          "989:     krb5_gss_export_cred,",
          "990:     krb5_gss_import_cred,",
          "994:     iakerb_gss_get_mic_iov,",
          "995:     iakerb_gss_verify_mic_iov,",
          "996:     iakerb_gss_get_mic_iov_length,",
          "997: };",
          "",
          "---------------"
        ],
        "src/lib/gssapi/krb5/iakerb.c||src/lib/gssapi/krb5/iakerb.c": [
          "File: src/lib/gssapi/krb5/iakerb.c -> src/lib/gssapi/krb5/iakerb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     gss_ctx_id_t gssc;",
          "50:     krb5_get_init_creds_opt *gic_opts;",
          "51: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:     int initiate;",
          "51:     int established;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "697: static krb5_error_code",
          "699: {",
          "700:     iakerb_ctx_id_t ctx;",
          "701:     krb5_error_code code;",
          "",
          "[Removed Lines]",
          "698: iakerb_alloc_context(iakerb_ctx_id_t *pctx)",
          "",
          "[Added Lines]",
          "700: iakerb_alloc_context(iakerb_ctx_id_t *pctx, int initiate)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "709:     ctx->magic = KG_IAKERB_CONTEXT;",
          "710:     ctx->state = IAKERB_AS_REQ;",
          "711:     ctx->count = 0;",
          "713:     code = krb5_gss_init_context(&ctx->k5c);",
          "714:     if (code != 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "714:     ctx->initiate = initiate;",
          "715:     ctx->established = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "732:                               gss_ctx_id_t *context_handle,",
          "733:                               gss_buffer_t output_token)",
          "734: {",
          "737:     if (output_token != GSS_C_NO_BUFFER) {",
          "738:         output_token->length = 0;",
          "",
          "[Removed Lines]",
          "735:     OM_uint32 major_status = GSS_S_COMPLETE;",
          "",
          "[Added Lines]",
          "739:     iakerb_ctx_id_t iakerb_ctx = (iakerb_ctx_id_t)*context_handle;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "740:     }",
          "760: }",
          "762: static krb5_boolean",
          "",
          "[Removed Lines]",
          "744:     if (*context_handle != GSS_C_NO_CONTEXT) {",
          "745:         iakerb_ctx_id_t iakerb_ctx = (iakerb_ctx_id_t)*context_handle;",
          "747:         if (iakerb_ctx->magic == KG_IAKERB_CONTEXT) {",
          "748:             iakerb_release_context(iakerb_ctx);",
          "750:         } else {",
          "751:             assert(iakerb_ctx->magic == KG_CONTEXT);",
          "753:             major_status = krb5_gss_delete_sec_context(minor_status,",
          "754:                                                        context_handle,",
          "755:                                                        output_token);",
          "756:         }",
          "757:     }",
          "759:     return major_status;",
          "",
          "[Added Lines]",
          "748:     iakerb_release_context(iakerb_ctx);",
          "750:     return GSS_S_COMPLETE;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "802:     int initialContextToken = (*context_handle == GSS_C_NO_CONTEXT);",
          "804:     if (initialContextToken) {",
          "806:         if (code != 0)",
          "807:             goto cleanup;",
          "",
          "[Removed Lines]",
          "805:         code = iakerb_alloc_context(&ctx);",
          "",
          "[Added Lines]",
          "796:         code = iakerb_alloc_context(&ctx, 0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "854:                                                        time_rec,",
          "855:                                                        delegated_cred_handle,",
          "856:                                                        &exts);",
          "862:         if (mech_type != NULL)",
          "864:     }",
          "",
          "[Removed Lines]",
          "857:         if (major_status == GSS_S_COMPLETE) {",
          "859:             ctx->gssc = NULL;",
          "860:             iakerb_release_context(ctx);",
          "861:         }",
          "",
          "[Added Lines]",
          "848:         if (major_status == GSS_S_COMPLETE)",
          "849:             ctx->established = 1;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "897:     int initialContextToken = (*context_handle == GSS_C_NO_CONTEXT);",
          "899:     if (initialContextToken) {",
          "901:         if (code != 0) {",
          "903:             goto cleanup;",
          "",
          "[Removed Lines]",
          "900:         code = iakerb_alloc_context(&ctx);",
          "",
          "[Added Lines]",
          "888:         code = iakerb_alloc_context(&ctx, 1);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "983:                                                      ret_flags,",
          "984:                                                      time_rec,",
          "985:                                                      &exts);",
          "991:         if (actual_mech_type != NULL)",
          "993:     } else {",
          "",
          "[Removed Lines]",
          "986:         if (major_status == GSS_S_COMPLETE) {",
          "988:             ctx->gssc = GSS_C_NO_CONTEXT;",
          "989:             iakerb_release_context(ctx);",
          "990:         }",
          "",
          "[Added Lines]",
          "974:         if (major_status == GSS_S_COMPLETE)",
          "975:             ctx->established = 1;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1011:     return major_status;",
          "1012: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "999: OM_uint32 KRB5_CALLCONV",
          "1000: iakerb_gss_unwrap(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1001:                   gss_buffer_t input_message_buffer,",
          "1002:                   gss_buffer_t output_message_buffer, int *conf_state,",
          "1003:                   gss_qop_t *qop_state)",
          "1004: {",
          "1005:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1007:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1008:         return GSS_S_NO_CONTEXT;",
          "1010:     return krb5_gss_unwrap(minor_status, ctx->gssc, input_message_buffer,",
          "1011:                            output_message_buffer, conf_state, qop_state);",
          "1012: }",
          "1014: OM_uint32 KRB5_CALLCONV",
          "1015: iakerb_gss_wrap(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1016:                 int conf_req_flag, gss_qop_t qop_req,",
          "1017:                 gss_buffer_t input_message_buffer, int *conf_state,",
          "1018:                 gss_buffer_t output_message_buffer)",
          "1019: {",
          "1020:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1022:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1023:         return GSS_S_NO_CONTEXT;",
          "1025:     return krb5_gss_wrap(minor_status, ctx->gssc, conf_req_flag, qop_req,",
          "1026:                          input_message_buffer, conf_state,",
          "1027:                          output_message_buffer);",
          "1028: }",
          "1030: OM_uint32 KRB5_CALLCONV",
          "1031: iakerb_gss_process_context_token(OM_uint32 *minor_status,",
          "1032:                                  const gss_ctx_id_t context_handle,",
          "1033:                                  const gss_buffer_t token_buffer)",
          "1034: {",
          "1035:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1037:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1038:         return GSS_S_DEFECTIVE_TOKEN;",
          "1040:     return krb5_gss_process_context_token(minor_status, ctx->gssc,",
          "1041:                                           token_buffer);",
          "1042: }",
          "1044: OM_uint32 KRB5_CALLCONV",
          "1045: iakerb_gss_context_time(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1046:                         OM_uint32 *time_rec)",
          "1047: {",
          "1048:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1050:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1051:         return GSS_S_NO_CONTEXT;",
          "1053:     return krb5_gss_context_time(minor_status, ctx->gssc, time_rec);",
          "1054: }",
          "1056: #ifndef LEAN_CLIENT",
          "1058: OM_uint32 KRB5_CALLCONV",
          "1059: iakerb_gss_export_sec_context(OM_uint32 *minor_status,",
          "1060:                               gss_ctx_id_t *context_handle,",
          "1061:                               gss_buffer_t interprocess_token)",
          "1062: {",
          "1063:     OM_uint32 maj;",
          "1064:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1067:     if (!ctx->established)",
          "1068:         return GSS_S_UNAVAILABLE;",
          "1070:     maj = krb5_gss_export_sec_context(minor_status, &ctx->gssc,",
          "1071:                                       interprocess_token);",
          "1072:     if (ctx->gssc == GSS_C_NO_CONTEXT) {",
          "1073:         iakerb_release_context(ctx);",
          "1075:     }",
          "1076:     return maj;",
          "1077: }",
          "1088: OM_uint32 KRB5_CALLCONV",
          "1089: iakerb_gss_inquire_context(OM_uint32 *minor_status,",
          "1090:                            gss_ctx_id_t context_handle, gss_name_t *src_name,",
          "1091:                            gss_name_t *targ_name, OM_uint32 *lifetime_rec,",
          "1092:                            gss_OID *mech_type, OM_uint32 *ctx_flags,",
          "1093:                            int *initiate, int *opened)",
          "1094: {",
          "1095:     OM_uint32 ret;",
          "1096:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1098:     if (src_name != NULL)",
          "1100:     if (targ_name != NULL)",
          "1102:     if (lifetime_rec != NULL)",
          "1104:     if (mech_type != NULL)",
          "1106:     if (ctx_flags != NULL)",
          "1108:     if (initiate != NULL)",
          "1110:     if (opened != NULL)",
          "1113:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1114:         return GSS_S_COMPLETE;",
          "1116:     ret = krb5_gss_inquire_context(minor_status, ctx->gssc, src_name,",
          "1117:                                    targ_name, lifetime_rec, mech_type,",
          "1118:                                    ctx_flags, initiate, opened);",
          "1120:     if (!ctx->established) {",
          "1122:         if (mech_type != NULL)",
          "1126:         if (ctx_flags != NULL)",
          "1128:     }",
          "1130:     return ret;",
          "1131: }",
          "1133: OM_uint32 KRB5_CALLCONV",
          "1134: iakerb_gss_wrap_size_limit(OM_uint32 *minor_status,",
          "1135:                            gss_ctx_id_t context_handle, int conf_req_flag,",
          "1136:                            gss_qop_t qop_req, OM_uint32 req_output_size,",
          "1137:                            OM_uint32 *max_input_size)",
          "1138: {",
          "1139:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1141:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1142:         return GSS_S_NO_CONTEXT;",
          "1144:     return krb5_gss_wrap_size_limit(minor_status, ctx->gssc, conf_req_flag,",
          "1145:                                     qop_req, req_output_size, max_input_size);",
          "1146: }",
          "1148: OM_uint32 KRB5_CALLCONV",
          "1149: iakerb_gss_get_mic(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1150:                    gss_qop_t qop_req, gss_buffer_t message_buffer,",
          "1151:                    gss_buffer_t message_token)",
          "1152: {",
          "1153:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1155:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1156:         return GSS_S_NO_CONTEXT;",
          "1158:     return krb5_gss_get_mic(minor_status, ctx->gssc, qop_req, message_buffer,",
          "1159:                             message_token);",
          "1160: }",
          "1162: OM_uint32 KRB5_CALLCONV",
          "1163: iakerb_gss_verify_mic(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1164:                       gss_buffer_t msg_buffer, gss_buffer_t token_buffer,",
          "1165:                       gss_qop_t *qop_state)",
          "1166: {",
          "1167:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1169:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1170:         return GSS_S_NO_CONTEXT;",
          "1172:     return krb5_gss_verify_mic(minor_status, ctx->gssc, msg_buffer,",
          "1173:                                token_buffer, qop_state);",
          "1174: }",
          "1176: OM_uint32 KRB5_CALLCONV",
          "1177: iakerb_gss_inquire_sec_context_by_oid(OM_uint32 *minor_status,",
          "1178:                                       const gss_ctx_id_t context_handle,",
          "1179:                                       const gss_OID desired_object,",
          "1180:                                       gss_buffer_set_t *data_set)",
          "1181: {",
          "1182:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1184:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1185:         return GSS_S_UNAVAILABLE;",
          "1187:     return krb5_gss_inquire_sec_context_by_oid(minor_status, ctx->gssc,",
          "1188:                                                desired_object, data_set);",
          "1189: }",
          "1191: OM_uint32 KRB5_CALLCONV",
          "1192: iakerb_gss_set_sec_context_option(OM_uint32 *minor_status,",
          "1193:                                   gss_ctx_id_t *context_handle,",
          "1194:                                   const gss_OID desired_object,",
          "1195:                                   const gss_buffer_t value)",
          "1196: {",
          "1197:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)*context_handle;",
          "1199:     if (ctx == NULL || ctx->gssc == GSS_C_NO_CONTEXT)",
          "1200:         return GSS_S_UNAVAILABLE;",
          "1202:     return krb5_gss_set_sec_context_option(minor_status, &ctx->gssc,",
          "1203:                                            desired_object, value);",
          "1204: }",
          "1206: OM_uint32 KRB5_CALLCONV",
          "1207: iakerb_gss_wrap_iov(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1208:                     int conf_req_flag, gss_qop_t qop_req, int *conf_state,",
          "1209:                     gss_iov_buffer_desc *iov, int iov_count)",
          "1210: {",
          "1211:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1213:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1214:         return GSS_S_NO_CONTEXT;",
          "1216:     return krb5_gss_wrap_iov(minor_status, ctx->gssc, conf_req_flag, qop_req,",
          "1217:                              conf_state, iov, iov_count);",
          "1218: }",
          "1220: OM_uint32 KRB5_CALLCONV",
          "1221: iakerb_gss_unwrap_iov(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1222:                       int *conf_state, gss_qop_t *qop_state,",
          "1223:                       gss_iov_buffer_desc *iov, int iov_count)",
          "1224: {",
          "1225:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1227:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1228:         return GSS_S_NO_CONTEXT;",
          "1230:     return krb5_gss_unwrap_iov(minor_status, ctx->gssc, conf_state, qop_state,",
          "1231:                                iov, iov_count);",
          "1232: }",
          "1234: OM_uint32 KRB5_CALLCONV",
          "1235: iakerb_gss_wrap_iov_length(OM_uint32 *minor_status,",
          "1236:                            gss_ctx_id_t context_handle, int conf_req_flag,",
          "1237:                            gss_qop_t qop_req, int *conf_state,",
          "1238:                            gss_iov_buffer_desc *iov, int iov_count)",
          "1239: {",
          "1240:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1242:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1243:         return GSS_S_NO_CONTEXT;",
          "1245:     return krb5_gss_wrap_iov_length(minor_status, ctx->gssc, conf_req_flag,",
          "1246:                                     qop_req, conf_state, iov, iov_count);",
          "1247: }",
          "1249: OM_uint32 KRB5_CALLCONV",
          "1250: iakerb_gss_pseudo_random(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1251:                          int prf_key, const gss_buffer_t prf_in,",
          "1252:                          ssize_t desired_output_len, gss_buffer_t prf_out)",
          "1253: {",
          "1254:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1256:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1257:         return GSS_S_NO_CONTEXT;",
          "1259:     return krb5_gss_pseudo_random(minor_status, ctx->gssc, prf_key, prf_in,",
          "1260:                                   desired_output_len, prf_out);",
          "1261: }",
          "1263: OM_uint32 KRB5_CALLCONV",
          "1264: iakerb_gss_get_mic_iov(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1265:                        gss_qop_t qop_req, gss_iov_buffer_desc *iov,",
          "1266:                        int iov_count)",
          "1267: {",
          "1268:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1270:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1271:         return GSS_S_NO_CONTEXT;",
          "1273:     return krb5_gss_get_mic_iov(minor_status, ctx->gssc, qop_req, iov,",
          "1274:                                 iov_count);",
          "1275: }",
          "1277: OM_uint32 KRB5_CALLCONV",
          "1278: iakerb_gss_verify_mic_iov(OM_uint32 *minor_status, gss_ctx_id_t context_handle,",
          "1279:                           gss_qop_t *qop_state, gss_iov_buffer_desc *iov,",
          "1280:                           int iov_count)",
          "1281: {",
          "1282:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1284:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1285:         return GSS_S_NO_CONTEXT;",
          "1287:     return krb5_gss_verify_mic_iov(minor_status, ctx->gssc, qop_state, iov,",
          "1288:                                    iov_count);",
          "1289: }",
          "1291: OM_uint32 KRB5_CALLCONV",
          "1292: iakerb_gss_get_mic_iov_length(OM_uint32 *minor_status,",
          "1293:                               gss_ctx_id_t context_handle, gss_qop_t qop_req,",
          "1294:                               gss_iov_buffer_desc *iov, int iov_count)",
          "1295: {",
          "1296:     iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle;",
          "1298:     if (ctx->gssc == GSS_C_NO_CONTEXT)",
          "1299:         return GSS_S_NO_CONTEXT;",
          "1301:     return krb5_gss_get_mic_iov_length(minor_status, ctx->gssc, qop_req, iov,",
          "1302:                                        iov_count);",
          "1303: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}