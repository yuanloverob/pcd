{
  "cve_id": "CVE-2015-3215",
  "cve_desc": "The NetKVM Windows Virtio driver allows remote attackers to cause a denial of service (guest crash) via a crafted length value in an IP packet, as demonstrated by a value that does not account for the size of the IP options.",
  "repo": "YanVugenfirer/kvm-guest-drivers-windows",
  "patch_hash": "fbfa4d1083ea84c5429992ca3e996d7d4fbc8238",
  "patch_info": {
    "commit_hash": "fbfa4d1083ea84c5429992ca3e996d7d4fbc8238",
    "repo": "YanVugenfirer/kvm-guest-drivers-windows",
    "commit_url": "https://github.com/YanVugenfirer/kvm-guest-drivers-windows/commit/fbfa4d1083ea84c5429992ca3e996d7d4fbc8238",
    "files": [
      "NetKVM/Common/ParaNdis-Common.cpp",
      "NetKVM/Common/sw-offload.cpp"
    ],
    "message": "NetKVM: BZ#1169718: More rigoruous testing of incoming packet\n\nSigned-off-by: Joseph Hindin <yhindin@rehat.com>",
    "before_after_code_files": [
      "NetKVM/Common/ParaNdis-Common.cpp||NetKVM/Common/ParaNdis-Common.cpp",
      "NetKVM/Common/sw-offload.cpp||NetKVM/Common/sw-offload.cpp"
    ]
  },
  "patch_diff": {
    "NetKVM/Common/ParaNdis-Common.cpp||NetKVM/Common/ParaNdis-Common.cpp": [
      "File: NetKVM/Common/ParaNdis-Common.cpp -> NetKVM/Common/ParaNdis-Common.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "2222:                                             ULONG ulDataOffset)",
      "2223: {",
      "2224:     tOffloadSettingsFlags f = pContext->Offload.flags;",
      "2226:     tTcpIpPacketParsingResult ppr;",
      "2227:     ULONG flagsToCalculate = 0;",
      "2228:     res.value = 0;",
      "",
      "[Removed Lines]",
      "2225:     tChecksumCheckResult res, resIp;",
      "2229:     resIp.value = 0;",
      "",
      "[Added Lines]",
      "2225:     tChecksumCheckResult res;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2251:     ppr = ParaNdis_CheckSumVerify(pPacketPages, ulPacketLength - ETH_HEADER_SIZE, ulDataOffset + ETH_HEADER_SIZE, flagsToCalculate, __FUNCTION__);",
      "2253:     if (virtioFlags & VIRTIO_NET_HDR_F_DATA_VALID)",
      "2254:     {",
      "2255:         pContext->extraStatistics.framesRxCSHwOK++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2252:     if (ppr.ipCheckSum == ppresIPTooShort || ppr.xxpStatus == ppresXxpIncomplete)",
      "2253:     {",
      "2254:         res.flags.IpOK = FALSE;",
      "2255:         res.flags.IpFailed = TRUE;",
      "2256:         return res;",
      "2257:     }",
      "",
      "---------------"
    ],
    "NetKVM/Common/sw-offload.cpp||NetKVM/Common/sw-offload.cpp": [
      "File: NetKVM/Common/sw-offload.cpp -> NetKVM/Common/sw-offload.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "156:     ULONG tcpipDataAt;",
      "157:     tTcpIpPacketParsingResult res = _res;",
      "158:     tcpipDataAt = ipHeaderSize + sizeof(TCPHeader);",
      "160:     res.TcpUdp = ppresIsTCP;",
      "162:     if (len >= tcpipDataAt)",
      "163:     {",
      "164:         TCPHeader *pTcpHeader = (TCPHeader *)RtlOffsetToPointer(pIpHeader, ipHeaderSize);",
      "165:         res.xxpStatus = ppresXxpKnown;",
      "166:         tcpipDataAt = ipHeaderSize + TCP_HEADER_LENGTH(pTcpHeader);",
      "167:         res.XxpIpHeaderSize = tcpipDataAt;",
      "168:     }",
      "169:     else",
      "170:     {",
      "171:         DPrintf(2, (\"tcp: %d < min headers %d\\n\", len, tcpipDataAt));",
      "172:     }",
      "173:     return res;",
      "174: }",
      "",
      "[Removed Lines]",
      "159:     res.xxpStatus = ppresXxpIncomplete;",
      "",
      "[Added Lines]",
      "165:         res.xxpFull = TRUE;",
      "172:         res.xxpFull = FALSE;",
      "173:         res.xxpStatus = ppresXxpIncomplete;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "178: {",
      "179:     tTcpIpPacketParsingResult res = _res;",
      "180:     ULONG udpDataStart = ipHeaderSize + sizeof(UDPHeader);",
      "182:     res.TcpUdp = ppresIsUDP;",
      "183:     res.XxpIpHeaderSize = udpDataStart;",
      "184:     if (len >= udpDataStart)",
      "",
      "[Removed Lines]",
      "181:     res.xxpStatus = ppresXxpIncomplete;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "186:         UDPHeader *pUdpHeader = (UDPHeader *)RtlOffsetToPointer(pIpHeader, ipHeaderSize);",
      "187:         USHORT datagramLength = swap_short(pUdpHeader->udp_length);",
      "188:         res.xxpStatus = ppresXxpKnown;",
      "190:         DPrintf(2, (\"udp: len %d, datagramLength %d\\n\", len, datagramLength));",
      "191:     }",
      "192:     return res;",
      "193: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "190:         res.xxpFull = TRUE;",
      "194:     else",
      "195:     {",
      "196:         res.xxpFull = FALSE;",
      "197:         res.xxpStatus = ppresXxpIncomplete;",
      "198:     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "196: QualifyIpPacket(IPHeader *pIpHeader, ULONG len)",
      "197: {",
      "198:     tTcpIpPacketParsingResult res;",
      "199:     UCHAR  ver_len = pIpHeader->v4.ip_verlen;",
      "200:     UCHAR  ip_version = (ver_len & 0xF0) >> 4;",
      "201:     USHORT ipHeaderSize = 0;",
      "202:     USHORT fullLength = 0;",
      "203:     res.value = 0;",
      "205:     if (ip_version == 4)",
      "206:     {",
      "207:         ipHeaderSize = (ver_len & 0xF) << 2;",
      "208:         fullLength = swap_short(pIpHeader->v4.ip_length);",
      "211:         res.ipStatus = (ipHeaderSize >= sizeof(IPv4Header)) ? ppresIPV4 : ppresNotIP;",
      "215:         {",
      "217:         }",
      "218:     }",
      "219:     else if (ip_version == 6)",
      "",
      "[Removed Lines]",
      "209:         DPrintf(3, (\"ip_version %d, ipHeaderSize %d, protocol %d, iplen %d\\n\",",
      "210:             ip_version, ipHeaderSize, pIpHeader->v4.ip_protocol, fullLength));",
      "212:         if (len < ipHeaderSize) res.ipCheckSum = ppresIPTooShort;",
      "213:         if (fullLength) {}",
      "214:         else",
      "216:             DPrintf(2, (\"ip v.%d, iplen %d\\n\", ip_version, fullLength));",
      "",
      "[Added Lines]",
      "206:     res.value = 0;",
      "208:     if (len < 4)",
      "209:     {",
      "210:         res.ipStatus = ppresNotIP;",
      "211:         return res;",
      "212:     }",
      "222:         if (len < sizeof(IPv4Header))",
      "223:         {",
      "224:             res.ipStatus = ppresNotIP;",
      "225:             return res;",
      "226:         }",
      "229:         DPrintf(3, (\"ip_version %d, ipHeaderSize %d, protocol %d, iplen %d, L2 payload length %d\\n\",",
      "230:             ip_version, ipHeaderSize, pIpHeader->v4.ip_protocol, fullLength, len));",
      "233:         if (res.ipStatus == ppresNotIP)",
      "235:             return res;",
      "236:         }",
      "238:         if (ipHeaderSize >= fullLength || len < fullLength)",
      "239:         {",
      "240:             DPrintf(2, (\"[%s] - truncated packet - ip_version %d, ipHeaderSize %d, protocol %d, iplen %d, L2 payload length %d\\n\",",
      "241:                 ip_version, ipHeaderSize, pIpHeader->v4.ip_protocol, fullLength, len));",
      "242:             res.ipCheckSum = ppresIPTooShort;",
      "243:             return res;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "291:     if (res.ipStatus == ppresIPV4)",
      "292:     {",
      "293:         res.ipHeaderSize = ipHeaderSize;",
      "296:         res.IsFragment = (pIpHeader->v4.ip_offset & ~0xC0) != 0;",
      "297:         switch (pIpHeader->v4.ip_protocol)",
      "",
      "[Removed Lines]",
      "294:         res.xxpFull = len >= fullLength ? 1 : 0;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "615:     IPHeader *pIpHeader = (IPHeader *) RtlOffsetToPointer(pDataPages[0].Virtual, ulStartOffset);",
      "617:     tTcpIpPacketParsingResult res = QualifyIpPacket(pIpHeader, ulDataLength);",
      "618:     if (res.ipStatus == ppresIPV4)",
      "619:     {",
      "620:         if (flags & pcrIpChecksum)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "645:     if (res.ipStatus == ppresNotIP || res.ipCheckSum == ppresIPTooShort)",
      "646:         return res;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "723416fa4210b7464b28eab89cc76252e6193ac1",
      "candidate_info": {
        "commit_hash": "723416fa4210b7464b28eab89cc76252e6193ac1",
        "repo": "YanVugenfirer/kvm-guest-drivers-windows",
        "commit_url": "https://github.com/YanVugenfirer/kvm-guest-drivers-windows/commit/723416fa4210b7464b28eab89cc76252e6193ac1",
        "files": [
          "NetKVM/Common/ParaNdis-Common.cpp",
          "NetKVM/Common/ParaNdis-TX.cpp",
          "NetKVM/Common/ndis56common.h",
          "NetKVM/Common/sw-offload.cpp",
          "NetKVM/wlh/ParaNdis6-Impl.cpp"
        ],
        "message": "NetKVM: BZ#1169718: Checking the length only on read\n\nSigned-off-by: Joseph Hindin <yhindin@rehat.com>",
        "before_after_code_files": [
          "NetKVM/Common/ParaNdis-Common.cpp||NetKVM/Common/ParaNdis-Common.cpp",
          "NetKVM/Common/ParaNdis-TX.cpp||NetKVM/Common/ParaNdis-TX.cpp",
          "NetKVM/Common/ndis56common.h||NetKVM/Common/ndis56common.h",
          "NetKVM/Common/sw-offload.cpp||NetKVM/Common/sw-offload.cpp",
          "NetKVM/wlh/ParaNdis6-Impl.cpp||NetKVM/wlh/ParaNdis6-Impl.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [
            "NetKVM/Common/ParaNdis-Common.cpp||NetKVM/Common/ParaNdis-Common.cpp",
            "NetKVM/Common/sw-offload.cpp||NetKVM/Common/sw-offload.cpp"
          ],
          "candidate": [
            "NetKVM/Common/ParaNdis-Common.cpp||NetKVM/Common/ParaNdis-Common.cpp",
            "NetKVM/Common/sw-offload.cpp||NetKVM/Common/sw-offload.cpp"
          ]
        }
      },
      "candidate_diff": {
        "NetKVM/Common/ParaNdis-Common.cpp||NetKVM/Common/ParaNdis-Common.cpp": [
          "File: NetKVM/Common/ParaNdis-Common.cpp -> NetKVM/Common/ParaNdis-Common.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2219:                                             ULONG virtioFlags,",
          "2220:                                             tCompletePhysicalAddress *pPacketPages,",
          "2221:                                             ULONG ulPacketLength,",
          "2223: {",
          "2224:     tOffloadSettingsFlags f = pContext->Offload.flags;",
          "2225:     tChecksumCheckResult res;",
          "",
          "[Removed Lines]",
          "2222:                                             ULONG ulDataOffset)",
          "",
          "[Added Lines]",
          "2222:                                             ULONG ulDataOffset,",
          "2223:                                             BOOLEAN verifyLength)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2247:         }",
          "2248:     }",
          "2252:     if (ppr.ipCheckSum == ppresIPTooShort || ppr.xxpStatus == ppresXxpIncomplete)",
          "2253:     {",
          "",
          "[Removed Lines]",
          "2250:     ppr = ParaNdis_CheckSumVerify(pPacketPages, ulPacketLength - ETH_HEADER_SIZE, ulDataOffset + ETH_HEADER_SIZE, flagsToCalculate, __FUNCTION__);",
          "",
          "[Added Lines]",
          "2251:     ppr = ParaNdis_CheckSumVerify(pPacketPages, ulPacketLength - ETH_HEADER_SIZE, ulDataOffset + ETH_HEADER_SIZE, flagsToCalculate,",
          "2252:         verifyLength, __FUNCTION__);",
          "",
          "---------------"
        ],
        "NetKVM/Common/ParaNdis-TX.cpp||NetKVM/Common/ParaNdis-TX.cpp": [
          "File: NetKVM/Common/ParaNdis-TX.cpp -> NetKVM/Common/ParaNdis-TX.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "649:     tTcpIpPacketParsingResult packetReview;",
          "650:     packetReview = ParaNdis_CheckSumVerifyFlat(reinterpret_cast<IPv4Header*>(IpHeader), EthPayloadLength,",
          "651:                                                pcrIpChecksum | pcrFixIPChecksum | pcrTcpChecksum | pcrFixPHChecksum,",
          "652:                                                __FUNCTION__);",
          "654:     if (packetReview.xxpCheckSum == ppresPCSOK || packetReview.fixedXxpCS)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "652:                                                FALSE,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "670: {",
          "671:     USHORT Res;",
          "672:     auto ppr = ParaNdis_ReviewIPPacket(RtlOffsetToPointer(PacketData, IpHeaderOffset),",
          "674:     if (ppr.ipStatus != ppresNotIP)",
          "675:     {",
          "676:         Res = static_cast<USHORT>(IpHeaderOffset + ppr.ipHeaderSize);",
          "",
          "[Removed Lines]",
          "673:                                        GetDataLength(), __FUNCTION__);",
          "",
          "[Added Lines]",
          "674:                                        GetDataLength(), FALSE, __FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "696: {",
          "697:     ParaNdis_CheckSumVerifyFlat(IpHeader,",
          "698:                                 EthPayloadLength,",
          "700:                                 __FUNCTION__);",
          "701: }",
          "",
          "[Removed Lines]",
          "699:                                 pcrIpChecksum | pcrFixIPChecksum,",
          "",
          "[Added Lines]",
          "700:                                 pcrIpChecksum | pcrFixIPChecksum, FALSE,",
          "",
          "---------------"
        ],
        "NetKVM/Common/ndis56common.h||NetKVM/Common/ndis56common.h": [
          "File: NetKVM/Common/ndis56common.h -> NetKVM/Common/ndis56common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "744:                                             ULONG virtioFlags,",
          "745:                                             tCompletePhysicalAddress *pPacketPages,",
          "746:                                             ULONG ulPacketLength,",
          "749: void ParaNdis_CallOnBugCheck(PARANDIS_ADAPTER *pContext);",
          "",
          "[Removed Lines]",
          "747:                                             ULONG ulDataOffset);",
          "",
          "[Added Lines]",
          "747:                                             ULONG ulDataOffset,",
          "748:                                             BOOLEAN verifyLength);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "917:                                                 ULONG ulDataLength,",
          "918:                                                 ULONG ulStartOffset,",
          "919:                                                 ULONG flags,",
          "920:                                                 LPCSTR caller);",
          "922: static __inline",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "921:                                                 BOOLEAN verifyLength,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "924:                                                 PVOID pBuffer,",
          "925:                                                 ULONG ulDataLength,",
          "926:                                                 ULONG flags,",
          "927:                                                 LPCSTR caller)",
          "928: {",
          "929:     tCompletePhysicalAddress SGBuffer;",
          "930:     SGBuffer.Virtual = pBuffer;",
          "931:     SGBuffer.size = ulDataLength;",
          "933: }",
          "937: BOOLEAN ParaNdis_AnalyzeReceivedPacket(PVOID headersBuffer, ULONG dataLength, PNET_PACKET_INFO packetInfo);",
          "938: ULONG ParaNdis_StripVlanHeaderMoveHead(PNET_PACKET_INFO packetInfo);",
          "",
          "[Removed Lines]",
          "932:     return ParaNdis_CheckSumVerify(&SGBuffer, ulDataLength, 0, flags, caller);",
          "935: tTcpIpPacketParsingResult ParaNdis_ReviewIPPacket(PVOID buffer, ULONG size, LPCSTR caller);",
          "",
          "[Added Lines]",
          "929:                                                 BOOLEAN verifyLength,",
          "935:     return ParaNdis_CheckSumVerify(&SGBuffer, ulDataLength, 0, flags, verifyLength, caller);",
          "938: tTcpIpPacketParsingResult ParaNdis_ReviewIPPacket(PVOID buffer, ULONG size, BOOLEAN verityLength, LPCSTR caller);",
          "",
          "---------------"
        ],
        "NetKVM/Common/sw-offload.cpp||NetKVM/Common/sw-offload.cpp": [
          "File: NetKVM/Common/sw-offload.cpp -> NetKVM/Common/sw-offload.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "200: }",
          "202: static __inline tTcpIpPacketParsingResult",
          "204: {",
          "205:     tTcpIpPacketParsingResult res;",
          "206:     res.value = 0;",
          "",
          "[Removed Lines]",
          "203: QualifyIpPacket(IPHeader *pIpHeader, ULONG len)",
          "",
          "[Added Lines]",
          "203: QualifyIpPacket(IPHeader *pIpHeader, ULONG len, BOOLEAN verifyLength)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "235:             return res;",
          "236:         }",
          "239:         {",
          "242:             res.ipCheckSum = ppresIPTooShort;",
          "243:             return res;",
          "244:         }",
          "",
          "[Removed Lines]",
          "238:         if (ipHeaderSize >= fullLength || len < fullLength)",
          "240:             DPrintf(2, (\"[%s] - truncated packet - ip_version %d, ipHeaderSize %d, protocol %d, iplen %d, L2 payload length %d\\n\", __FUNCTION__,",
          "241:                 ip_version, ipHeaderSize, pIpHeader->v4.ip_protocol, fullLength, len));",
          "",
          "[Added Lines]",
          "238:         if (ipHeaderSize >= fullLength || ( verifyLength && len < fullLength))",
          "240:             DPrintf(2, (\"[%s] - truncated packet - ip_version %d, ipHeaderSize %d, protocol %d, iplen %d, L2 payload length %d, verify = %s\\n\", __FUNCTION__,",
          "241:                 ip_version, ipHeaderSize, pIpHeader->v4.ip_protocol, fullLength, len, (verifyLength ? \"true\" : \"false\")));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "258:         res.ipCheckSum = ppresCSOK;",
          "259:         fullLength = swap_short(pIpHeader->v6.ip6_payload_len);",
          "260:         fullLength += ipHeaderSize;",
          "262:         {",
          "263:             res.ipStatus = ppresNotIP;",
          "264:             return res;",
          "",
          "[Removed Lines]",
          "261:         if (len < fullLength)",
          "",
          "[Added Lines]",
          "262:         if (verifyLength && (len < fullLength))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "648:                                                 ULONG ulDataLength,",
          "649:                                                 ULONG ulStartOffset,",
          "650:                                                 ULONG flags,",
          "651:                                                 LPCSTR caller)",
          "652: {",
          "653:     IPHeader *pIpHeader = (IPHeader *) RtlOffsetToPointer(pDataPages[0].Virtual, ulStartOffset);",
          "656:     if (res.ipStatus == ppresNotIP || res.ipCheckSum == ppresIPTooShort)",
          "657:         return res;",
          "",
          "[Removed Lines]",
          "655:     tTcpIpPacketParsingResult res = QualifyIpPacket(pIpHeader, ulDataLength);",
          "",
          "[Added Lines]",
          "652:                                                 BOOLEAN verifyLength,",
          "657:     tTcpIpPacketParsingResult res = QualifyIpPacket(pIpHeader, ulDataLength, verifyLength);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "702:     return res;",
          "703: }",
          "706: {",
          "708:     PrintOutParsingResult(res, 1, caller);",
          "709:     return res;",
          "710: }",
          "",
          "[Removed Lines]",
          "705: tTcpIpPacketParsingResult ParaNdis_ReviewIPPacket(PVOID buffer, ULONG size, LPCSTR caller)",
          "707:     tTcpIpPacketParsingResult res = QualifyIpPacket((IPHeader *) buffer, size);",
          "",
          "[Added Lines]",
          "707: tTcpIpPacketParsingResult ParaNdis_ReviewIPPacket(PVOID buffer, ULONG size, BOOLEAN verifyLength, LPCSTR caller)",
          "709:     tTcpIpPacketParsingResult res = QualifyIpPacket((IPHeader *) buffer, size, verifyLength);",
          "",
          "---------------"
        ],
        "NetKVM/wlh/ParaNdis6-Impl.cpp||NetKVM/wlh/ParaNdis6-Impl.cpp": [
          "File: NetKVM/wlh/ParaNdis6-Impl.cpp -> NetKVM/wlh/ParaNdis6-Impl.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "866:                     pHeader->flags,",
          "867:                     &pBuffersDesc->PhysicalPages[PARANDIS_FIRST_RX_DATA_PAGE],",
          "868:                     pPacketInfo->dataLength,",
          "870:                 if (csRes.value)",
          "871:                 {",
          "872:                     NDIS_TCP_IP_CHECKSUM_NET_BUFFER_LIST_INFO qCSInfo;",
          "",
          "[Removed Lines]",
          "869:                     nBytesStripped);",
          "",
          "[Added Lines]",
          "869:                     nBytesStripped, TRUE);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "59cb10c492e653d64b273ac33943f227ef41ce47",
      "candidate_info": {
        "commit_hash": "59cb10c492e653d64b273ac33943f227ef41ce47",
        "repo": "YanVugenfirer/kvm-guest-drivers-windows",
        "commit_url": "https://github.com/YanVugenfirer/kvm-guest-drivers-windows/commit/59cb10c492e653d64b273ac33943f227ef41ce47",
        "files": [
          "NetKVM/Common/sw-offload.cpp"
        ],
        "message": "NetKVM: BZ#1169718: Checking against the length\n\nSigned-off-by: Joseph Hindin <yhindin@rehat.com>",
        "before_after_code_files": [
          "NetKVM/Common/sw-offload.cpp||NetKVM/Common/sw-offload.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [
            "NetKVM/Common/sw-offload.cpp||NetKVM/Common/sw-offload.cpp"
          ],
          "candidate": [
            "NetKVM/Common/sw-offload.cpp||NetKVM/Common/sw-offload.cpp"
          ]
        }
      },
      "candidate_diff": {
        "NetKVM/Common/sw-offload.cpp||NetKVM/Common/sw-offload.cpp": [
          "File: NetKVM/Common/sw-offload.cpp -> NetKVM/Common/sw-offload.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "238:         if (ipHeaderSize >= fullLength || len < fullLength)",
          "239:         {",
          "241:                 ip_version, ipHeaderSize, pIpHeader->v4.ip_protocol, fullLength, len));",
          "242:             res.ipCheckSum = ppresIPTooShort;",
          "243:             return res;",
          "",
          "[Removed Lines]",
          "240:             DPrintf(2, (\"[%s] - truncated packet - ip_version %d, ipHeaderSize %d, protocol %d, iplen %d, L2 payload length %d\\n\",",
          "",
          "[Added Lines]",
          "240:             DPrintf(2, (\"[%s] - truncated packet - ip_version %d, ipHeaderSize %d, protocol %d, iplen %d, L2 payload length %d\\n\", __FUNCTION__,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "245:     }",
          "246:     else if (ip_version == 6)",
          "247:     {",
          "248:         UCHAR nextHeader = pIpHeader->v6.ip6_next_header;",
          "249:         BOOLEAN bParsingDone = FALSE;",
          "250:         ipHeaderSize = sizeof(pIpHeader->v6);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "248:         if (len < sizeof(IPv6Header))",
          "249:         {",
          "250:             res.ipStatus = ppresNotIP;",
          "251:             return res;",
          "252:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "252:         res.ipCheckSum = ppresCSOK;",
          "253:         fullLength = swap_short(pIpHeader->v6.ip6_payload_len);",
          "254:         fullLength += ipHeaderSize;",
          "255:         while (nextHeader != 59)",
          "256:         {",
          "257:             IPv6ExtHeader *pExt;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "261:         if (len < fullLength)",
          "262:         {",
          "263:             res.ipStatus = ppresNotIP;",
          "264:             return res;",
          "265:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b1c8a2b6db62edbd86be8b609aa678660fecacbb",
      "candidate_info": {
        "commit_hash": "b1c8a2b6db62edbd86be8b609aa678660fecacbb",
        "repo": "YanVugenfirer/kvm-guest-drivers-windows",
        "commit_url": "https://github.com/YanVugenfirer/kvm-guest-drivers-windows/commit/b1c8a2b6db62edbd86be8b609aa678660fecacbb",
        "files": [
          "NetKVM/Common/ParaNdis-Common.cpp",
          "NetKVM/Common/sw-offload.cpp"
        ],
        "message": "NetKVM: BZ#1169718: More rigoruous testing of incoming packet\n\nSigned-off-by: Joseph Hindin <yhindin@rehat.com>",
        "before_after_code_files": [
          "NetKVM/Common/ParaNdis-Common.cpp||NetKVM/Common/ParaNdis-Common.cpp",
          "NetKVM/Common/sw-offload.cpp||NetKVM/Common/sw-offload.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "NetKVM/Common/ParaNdis-Common.cpp||NetKVM/Common/ParaNdis-Common.cpp",
            "NetKVM/Common/sw-offload.cpp||NetKVM/Common/sw-offload.cpp"
          ],
          "candidate": [
            "NetKVM/Common/ParaNdis-Common.cpp||NetKVM/Common/ParaNdis-Common.cpp",
            "NetKVM/Common/sw-offload.cpp||NetKVM/Common/sw-offload.cpp"
          ]
        }
      },
      "candidate_diff": {
        "NetKVM/Common/ParaNdis-Common.cpp||NetKVM/Common/ParaNdis-Common.cpp": [
          "File: NetKVM/Common/ParaNdis-Common.cpp -> NetKVM/Common/ParaNdis-Common.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2222:                                             ULONG ulDataOffset)",
          "2223: {",
          "2224:     tOffloadSettingsFlags f = pContext->Offload.flags;",
          "2226:     tTcpIpPacketParsingResult ppr;",
          "2227:     ULONG flagsToCalculate = 0;",
          "2228:     res.value = 0;",
          "",
          "[Removed Lines]",
          "2225:     tChecksumCheckResult res, resIp;",
          "2229:     resIp.value = 0;",
          "",
          "[Added Lines]",
          "2225:     tChecksumCheckResult res;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2251:     ppr = ParaNdis_CheckSumVerify(pPacketPages, ulPacketLength - ETH_HEADER_SIZE, ulDataOffset + ETH_HEADER_SIZE, flagsToCalculate, __FUNCTION__);",
          "2253:     if (virtioFlags & VIRTIO_NET_HDR_F_DATA_VALID)",
          "2254:     {",
          "2255:         pContext->extraStatistics.framesRxCSHwOK++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2252:     if (ppr.ipCheckSum == ppresIPTooShort || ppr.xxpStatus == ppresXxpIncomplete)",
          "2253:     {",
          "2254:         res.flags.IpOK = FALSE;",
          "2255:         res.flags.IpFailed = TRUE;",
          "2256:         return res;",
          "2257:     }",
          "",
          "---------------"
        ],
        "NetKVM/Common/sw-offload.cpp||NetKVM/Common/sw-offload.cpp": [
          "File: NetKVM/Common/sw-offload.cpp -> NetKVM/Common/sw-offload.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:     ULONG tcpipDataAt;",
          "157:     tTcpIpPacketParsingResult res = _res;",
          "158:     tcpipDataAt = ipHeaderSize + sizeof(TCPHeader);",
          "160:     res.TcpUdp = ppresIsTCP;",
          "162:     if (len >= tcpipDataAt)",
          "163:     {",
          "164:         TCPHeader *pTcpHeader = (TCPHeader *)RtlOffsetToPointer(pIpHeader, ipHeaderSize);",
          "165:         res.xxpStatus = ppresXxpKnown;",
          "166:         tcpipDataAt = ipHeaderSize + TCP_HEADER_LENGTH(pTcpHeader);",
          "167:         res.XxpIpHeaderSize = tcpipDataAt;",
          "168:     }",
          "169:     else",
          "170:     {",
          "171:         DPrintf(2, (\"tcp: %d < min headers %d\\n\", len, tcpipDataAt));",
          "172:     }",
          "173:     return res;",
          "174: }",
          "",
          "[Removed Lines]",
          "159:     res.xxpStatus = ppresXxpIncomplete;",
          "",
          "[Added Lines]",
          "165:         res.xxpFull = TRUE;",
          "172:         res.xxpFull = FALSE;",
          "173:         res.xxpStatus = ppresXxpIncomplete;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "178: {",
          "179:     tTcpIpPacketParsingResult res = _res;",
          "180:     ULONG udpDataStart = ipHeaderSize + sizeof(UDPHeader);",
          "182:     res.TcpUdp = ppresIsUDP;",
          "183:     res.XxpIpHeaderSize = udpDataStart;",
          "184:     if (len >= udpDataStart)",
          "",
          "[Removed Lines]",
          "181:     res.xxpStatus = ppresXxpIncomplete;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "186:         UDPHeader *pUdpHeader = (UDPHeader *)RtlOffsetToPointer(pIpHeader, ipHeaderSize);",
          "187:         USHORT datagramLength = swap_short(pUdpHeader->udp_length);",
          "188:         res.xxpStatus = ppresXxpKnown;",
          "190:         DPrintf(2, (\"udp: len %d, datagramLength %d\\n\", len, datagramLength));",
          "191:     }",
          "192:     return res;",
          "193: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "190:         res.xxpFull = TRUE;",
          "194:     else",
          "195:     {",
          "196:         res.xxpFull = FALSE;",
          "197:         res.xxpStatus = ppresXxpIncomplete;",
          "198:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "196: QualifyIpPacket(IPHeader *pIpHeader, ULONG len)",
          "197: {",
          "198:     tTcpIpPacketParsingResult res;",
          "199:     UCHAR  ver_len = pIpHeader->v4.ip_verlen;",
          "200:     UCHAR  ip_version = (ver_len & 0xF0) >> 4;",
          "201:     USHORT ipHeaderSize = 0;",
          "202:     USHORT fullLength = 0;",
          "203:     res.value = 0;",
          "205:     if (ip_version == 4)",
          "206:     {",
          "207:         ipHeaderSize = (ver_len & 0xF) << 2;",
          "208:         fullLength = swap_short(pIpHeader->v4.ip_length);",
          "211:         res.ipStatus = (ipHeaderSize >= sizeof(IPv4Header)) ? ppresIPV4 : ppresNotIP;",
          "215:         {",
          "217:         }",
          "218:     }",
          "219:     else if (ip_version == 6)",
          "",
          "[Removed Lines]",
          "209:         DPrintf(3, (\"ip_version %d, ipHeaderSize %d, protocol %d, iplen %d\\n\",",
          "210:             ip_version, ipHeaderSize, pIpHeader->v4.ip_protocol, fullLength));",
          "212:         if (len < ipHeaderSize) res.ipCheckSum = ppresIPTooShort;",
          "213:         if (fullLength) {}",
          "214:         else",
          "216:             DPrintf(2, (\"ip v.%d, iplen %d\\n\", ip_version, fullLength));",
          "",
          "[Added Lines]",
          "206:     res.value = 0;",
          "208:     if (len < 4)",
          "209:     {",
          "210:         res.ipStatus = ppresNotIP;",
          "211:         return res;",
          "212:     }",
          "222:         if (len < sizeof(IPv4Header))",
          "223:         {",
          "224:             res.ipStatus = ppresNotIP;",
          "225:             return res;",
          "226:         }",
          "229:         DPrintf(3, (\"ip_version %d, ipHeaderSize %d, protocol %d, iplen %d, L2 payload length %d\\n\",",
          "230:             ip_version, ipHeaderSize, pIpHeader->v4.ip_protocol, fullLength, len));",
          "233:         if (res.ipStatus == ppresNotIP)",
          "235:             return res;",
          "236:         }",
          "238:         if (ipHeaderSize >= fullLength || len < fullLength)",
          "239:         {",
          "240:             DPrintf(2, (\"[%s] - truncated packet - ip_version %d, ipHeaderSize %d, protocol %d, iplen %d, L2 payload length %d\\n\",",
          "241:                 ip_version, ipHeaderSize, pIpHeader->v4.ip_protocol, fullLength, len));",
          "242:             res.ipCheckSum = ppresIPTooShort;",
          "243:             return res;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "291:     if (res.ipStatus == ppresIPV4)",
          "292:     {",
          "293:         res.ipHeaderSize = ipHeaderSize;",
          "296:         res.IsFragment = (pIpHeader->v4.ip_offset & ~0xC0) != 0;",
          "297:         switch (pIpHeader->v4.ip_protocol)",
          "",
          "[Removed Lines]",
          "294:         res.xxpFull = len >= fullLength ? 1 : 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "615:     IPHeader *pIpHeader = (IPHeader *) RtlOffsetToPointer(pDataPages[0].Virtual, ulStartOffset);",
          "617:     tTcpIpPacketParsingResult res = QualifyIpPacket(pIpHeader, ulDataLength);",
          "618:     if (res.ipStatus == ppresIPV4)",
          "619:     {",
          "620:         if (flags & pcrIpChecksum)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "645:     if (res.ipStatus == ppresNotIP || res.ipCheckSum == ppresIPTooShort)",
          "646:         return res;",
          "",
          "---------------"
        ]
      }
    }
  ]
}