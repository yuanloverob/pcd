{
  "cve_id": "CVE-2020-26267",
  "cve_desc": "In affected versions of TensorFlow the tf.raw_ops.DataFormatVecPermute API does not validate the src_format and dst_format attributes. The code assumes that these two arguments define a permutation of NHWC. This can result in uninitialized memory accesses, read outside of bounds and even crashes. This is fixed in versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2, and 2.4.0.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "ebc70b7a592420d3d2f359e4b1694c236b82c7ae",
  "patch_info": {
    "commit_hash": "ebc70b7a592420d3d2f359e4b1694c236b82c7ae",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/ebc70b7a592420d3d2f359e4b1694c236b82c7ae",
    "files": [
      "tensorflow/core/kernels/data_format_ops.cc",
      "tensorflow/python/ops/nn_test.py"
    ],
    "message": "Validate that `DataFormat*` attributes form a permutation.\n\nThe `src_format` and `dst_format` attributes for the `DataFormatDimMap` and `DataFormatVecPermute` raw ops are supposed to determine a permutation. However, this was not validated and could result in unitialized memory accesses as well as writes outside of bounds and potential crashes.\n\nWhile here, we also test that the format attributes have the needed length, add tests for all validation failure cases, remove unnecessary calls to `strings::StrCat`, and fix a few grammar errors.\n\nThis will be cherry-picked on the supported release branches.\n\nPiperOrigin-RevId: 346135579\nChange-Id: I1c76392382c89ad8f072d5bc93d70669851eb404",
    "before_after_code_files": [
      "tensorflow/core/kernels/data_format_ops.cc||tensorflow/core/kernels/data_format_ops.cc",
      "tensorflow/python/ops/nn_test.py||tensorflow/python/ops/nn_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/data_format_ops.cc||tensorflow/core/kernels/data_format_ops.cc": [
      "File: tensorflow/core/kernels/data_format_ops.cc -> tensorflow/core/kernels/data_format_ops.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: #define EIGEN_USE_THREADS",
      "20: #include \"tensorflow/core/kernels/data_format_ops.h\"",
      "21: #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"",
      "22: #include \"tensorflow/core/framework/op_kernel.h\"",
      "23: #include \"tensorflow/core/framework/register_types.h\"",
      "24: #include \"tensorflow/core/framework/tensor.h\"",
      "26: namespace tensorflow {",
      "28: typedef Eigen::ThreadPoolDevice CPUDevice;",
      "29: typedef Eigen::GpuDevice GPUDevice;",
      "31: template <typename Device, typename T>",
      "32: class DataFormatDimMapOp : public OpKernel {",
      "33:  public:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: #include <map>",
      "28: #include \"tensorflow/core/platform/errors.h\"",
      "39: static bool IsValidPermutation(const std::string& src, const std::string& dst) {",
      "40:   if (src.size() != dst.size()) {",
      "41:     return false;",
      "42:   }",
      "44:   std::map<char, bool> characters;",
      "47:   for (const auto c : src) {",
      "48:     if (characters[c]) {",
      "49:       return false;",
      "50:     }",
      "51:     characters[c] = true;",
      "52:   }",
      "55:   for (const auto c : dst) {",
      "56:     if (!characters[c]) {",
      "57:       return false;",
      "58:     }",
      "59:     characters[c] = false;",
      "60:   }",
      "64:   return true;",
      "65: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "38:     string dst_format;",
      "39:     OP_REQUIRES_OK(context, context->GetAttr(\"dst_format\", &dst_format));",
      "40:     OP_REQUIRES(context, src_format.size() == 4 || src_format.size() == 5,",
      "43:                     \"src_format = \",",
      "45:     OP_REQUIRES(",
      "50:     dst_idx_ = Tensor(DT_INT32, {static_cast<int64>(src_format.size())});",
      "51:     for (int i = 0; i < src_format.size(); ++i) {",
      "52:       for (int j = 0; j < dst_format.size(); ++j) {",
      "",
      "[Removed Lines]",
      "41:                 errors::InvalidArgument(strings::StrCat(",
      "42:                     \"Source format must of length 4 or 5, received \"",
      "44:                     src_format)));",
      "46:         context, dst_format.size() == 4 || dst_format.size() == 5,",
      "47:         errors::InvalidArgument(strings::StrCat(",
      "48:             \"Destination format must of length 4 or 5, received dst_format = \",",
      "49:             dst_format)));",
      "",
      "[Added Lines]",
      "77:                 errors::InvalidArgument(",
      "78:                     \"Source format must be of length 4 or 5, received \"",
      "80:                     src_format));",
      "81:     OP_REQUIRES(context, dst_format.size() == 4 || dst_format.size() == 5,",
      "82:                 errors::InvalidArgument(\"Destination format must be of length \"",
      "83:                                         \"4 or 5, received dst_format = \",",
      "84:                                         dst_format));",
      "86:         context, IsValidPermutation(src_format, dst_format),",
      "87:         errors::InvalidArgument(",
      "88:             \"Destination and source format must determine a permutation, got \",",
      "89:             src_format, \" and \", dst_format));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "78:       : OpKernel(context) {",
      "79:     string src_format;",
      "80:     OP_REQUIRES_OK(context, context->GetAttr(\"src_format\", &src_format));",
      "81:     string dst_format;",
      "82:     OP_REQUIRES_OK(context, context->GetAttr(\"dst_format\", &dst_format));",
      "83:     src_format_ = src_format;",
      "84:     dst_format_ = dst_format;",
      "85:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "121:     OP_REQUIRES(context, src_format.size() == 4 || src_format.size() == 5,",
      "122:                 errors::InvalidArgument(",
      "123:                     \"Source format must be of length 4 or 5, received \"",
      "124:                     \"src_format = \",",
      "125:                     src_format));",
      "128:     OP_REQUIRES(context, dst_format.size() == 4 || dst_format.size() == 5,",
      "129:                 errors::InvalidArgument(\"Destination format must be of length \"",
      "130:                                         \"4 or 5, received dst_format = \",",
      "131:                                         dst_format));",
      "132:     OP_REQUIRES(",
      "133:         context, IsValidPermutation(src_format, dst_format),",
      "134:         errors::InvalidArgument(",
      "135:             \"Destination and source format must determine a permutation, got \",",
      "136:             src_format, \" and \", dst_format));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "127:       };",
      "128:       keep_only_spatial_dimensions(&src_format_str);",
      "129:       keep_only_spatial_dimensions(&dst_format_str);",
      "130:     }",
      "131:     ComputeDstIndex(src_format_str, dst_format_str, input.dims(), &dst_idx);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "184:       OP_REQUIRES(context,",
      "185:                   src_format_str.size() == 2 && dst_format_str.size() == 2,",
      "186:                   errors::InvalidArgument(",
      "187:                       \"Format specifier must contain H and W for 2D case\"));",
      "",
      "---------------"
    ],
    "tensorflow/python/ops/nn_test.py||tensorflow/python/ops/nn_test.py": [
      "File: tensorflow/python/ops/nn_test.py -> tensorflow/python/ops/nn_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: from tensorflow.python.eager import def_function",
      "28: from tensorflow.python.framework import constant_op",
      "29: from tensorflow.python.framework import dtypes",
      "30: from tensorflow.python.framework import ops",
      "31: from tensorflow.python.framework import tensor_spec",
      "32: from tensorflow.python.framework import test_util",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "30: from tensorflow.python.framework import errors",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1260:       y_val = self.evaluate(y)",
      "1261:       self.assertAllEqual(y_val, y_val_expected)",
      "1263:   def testArbitraryASCII(self):",
      "1264:     x_val = [-4, -3, -2, -1, 0, 1, 2, 3]",
      "1265:     y_val_expected = [3, 2, 1, 0, 3, 2, 1, 0]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1264:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1269:       y_val = self.evaluate(y)",
      "1270:       self.assertAllEqual(y_val, y_val_expected)",
      "1273: class DataFormatVectorPermuteTest(test_lib.TestCase):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1274:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
      "1275:   def testInvalidLength(self):",
      "1276:     x = [-4, -3, -2, -1, 0, 1, 2, 3]",
      "1277:     with self.assertRaisesRegex(errors.InvalidArgumentError,",
      "1278:                                 \"Source format must be of length 4 or 5\"):",
      "1279:       op = nn_ops.data_format_dim_map(",
      "1280:           x, src_format=\"12345678\", dst_format=\"87654321\")",
      "1281:       with test_util.use_gpu():",
      "1282:         self.evaluate(op)",
      "1284:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
      "1285:   def testDuplicateSrc(self):",
      "1286:     x = [-4, -3, -2, -1, 0, 1, 2, 3]",
      "1287:     with self.assertRaisesRegex(",
      "1288:         errors.InvalidArgumentError,",
      "1289:         \"Destination and source format must determine a permutation\"):",
      "1290:       op = nn_ops.data_format_dim_map(x, src_format=\"1233\", dst_format=\"4321\")",
      "1291:       with test_util.use_gpu():",
      "1292:         self.evaluate(op)",
      "1294:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
      "1295:   def testDuplicateDst(self):",
      "1296:     x = [-4, -3, -2, -1, 0, 1, 2, 3]",
      "1297:     with self.assertRaisesRegex(",
      "1298:         errors.InvalidArgumentError,",
      "1299:         \"Destination and source format must determine a permutation\"):",
      "1300:       op = nn_ops.data_format_dim_map(x, src_format=\"1234\", dst_format=\"3321\")",
      "1301:       with test_util.use_gpu():",
      "1302:         self.evaluate(op)",
      "1304:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
      "1305:   def testExtraSpecifiers(self):",
      "1306:     x = [-4, -3, -2, -1, 0, 1, 2, 3]",
      "1307:     with self.assertRaisesRegex(",
      "1308:         errors.InvalidArgumentError,",
      "1309:         \"Destination and source format must determine a permutation\"):",
      "1310:       op = nn_ops.data_format_dim_map(x, src_format=\"1234\", dst_format=\"5321\")",
      "1311:       with test_util.use_gpu():",
      "1312:         self.evaluate(op)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1370:       y_val = self.evaluate(y)",
      "1371:       self.assertAllEqual(y_val, [[7, 4], [4, 5], [5, 1], [9, 3]])",
      "1374: @test_util.run_all_in_graph_and_eager_modes",
      "1375: class AvgPoolTest(test_lib.TestCase):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1415:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
      "1416:   def testInvalidLength(self):",
      "1417:     x = [0, 1, 2, 3]",
      "1418:     with self.assertRaisesRegex(errors.InvalidArgumentError,",
      "1419:                                 \"Source format must be of length 4 or 5\"):",
      "1420:       op = nn_ops.data_format_vec_permute(",
      "1421:           x, src_format=\"12345678\", dst_format=\"87654321\")",
      "1422:       with test_util.use_gpu():",
      "1423:         self.evaluate(op)",
      "1425:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
      "1426:   def testDuplicateSrc(self):",
      "1427:     x = [0, 1, 2, 3]",
      "1428:     with self.assertRaisesRegex(",
      "1429:         errors.InvalidArgumentError,",
      "1430:         \"Destination and source format must determine a permutation\"):",
      "1431:       op = nn_ops.data_format_vec_permute(",
      "1432:           x, src_format=\"1233\", dst_format=\"4321\")",
      "1433:       with test_util.use_gpu():",
      "1434:         self.evaluate(op)",
      "1436:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
      "1437:   def testDuplicateDst(self):",
      "1438:     x = [0, 1, 2, 3]",
      "1439:     with self.assertRaisesRegex(",
      "1440:         errors.InvalidArgumentError,",
      "1441:         \"Destination and source format must determine a permutation\"):",
      "1442:       op = nn_ops.data_format_vec_permute(",
      "1443:           x, src_format=\"1234\", dst_format=\"3321\")",
      "1444:       with test_util.use_gpu():",
      "1445:         self.evaluate(op)",
      "1447:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
      "1448:   def testExtraSpecifiers(self):",
      "1449:     x = [0, 1, 2, 3]",
      "1450:     with self.assertRaisesRegex(",
      "1451:         errors.InvalidArgumentError,",
      "1452:         \"Destination and source format must determine a permutation\"):",
      "1453:       op = nn_ops.data_format_vec_permute(",
      "1454:           x, src_format=\"1234\", dst_format=\"5321\")",
      "1455:       with test_util.use_gpu():",
      "1456:         self.evaluate(op)",
      "1458:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
      "1459:   def test2DNoWH(self):",
      "1460:     x = [[0, 1], [2, 3]]",
      "1461:     with self.assertRaisesRegex(",
      "1462:         errors.InvalidArgumentError,",
      "1463:         \"Format specifier must contain H and W for 2D case\"):",
      "1464:       op = nn_ops.data_format_vec_permute(",
      "1465:           x, src_format=\"1234\", dst_format=\"4321\")",
      "1466:       with test_util.use_gpu():",
      "1467:         self.evaluate(op)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6f788c5d3ee689460528796ec02e08c8538bcddf",
      "candidate_info": {
        "commit_hash": "6f788c5d3ee689460528796ec02e08c8538bcddf",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/6f788c5d3ee689460528796ec02e08c8538bcddf",
        "files": [
          "tensorflow/core/kernels/data_format_ops.cc",
          "tensorflow/python/ops/nn_test.py"
        ],
        "message": "Validate that `DataFormat*` attributes form a permutation.\n\nThe `src_format` and `dst_format` attributes for the `DataFormatDimMap` and `DataFormatVecPermute` raw ops are supposed to determine a permutation. However, this was not validated and could result in unitialized memory accesses as well as writes outside of bounds and potential crashes.\n\nWhile here, we also test that the format attributes have the needed length, add tests for all validation failure cases, remove unnecessary calls to `strings::StrCat`, and fix a few grammar errors.\n\nThis will be cherry-picked on the supported release branches.\n\nPiperOrigin-RevId: 346135579\nChange-Id: I1c76392382c89ad8f072d5bc93d70669851eb404",
        "before_after_code_files": [
          "tensorflow/core/kernels/data_format_ops.cc||tensorflow/core/kernels/data_format_ops.cc",
          "tensorflow/python/ops/nn_test.py||tensorflow/python/ops/nn_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/data_format_ops.cc||tensorflow/core/kernels/data_format_ops.cc",
            "tensorflow/python/ops/nn_test.py||tensorflow/python/ops/nn_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/data_format_ops.cc||tensorflow/core/kernels/data_format_ops.cc",
            "tensorflow/python/ops/nn_test.py||tensorflow/python/ops/nn_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/data_format_ops.cc||tensorflow/core/kernels/data_format_ops.cc": [
          "File: tensorflow/core/kernels/data_format_ops.cc -> tensorflow/core/kernels/data_format_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #define EIGEN_USE_THREADS",
          "20: #include \"tensorflow/core/kernels/data_format_ops.h\"",
          "21: #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"",
          "22: #include \"tensorflow/core/framework/op_kernel.h\"",
          "23: #include \"tensorflow/core/framework/register_types.h\"",
          "24: #include \"tensorflow/core/framework/tensor.h\"",
          "26: namespace tensorflow {",
          "28: typedef Eigen::ThreadPoolDevice CPUDevice;",
          "29: typedef Eigen::GpuDevice GPUDevice;",
          "31: template <typename Device, typename T>",
          "32: class DataFormatDimMapOp : public OpKernel {",
          "33:  public:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include <map>",
          "28: #include \"tensorflow/core/platform/errors.h\"",
          "39: static bool IsValidPermutation(const std::string& src, const std::string& dst) {",
          "40:   if (src.size() != dst.size()) {",
          "41:     return false;",
          "42:   }",
          "44:   std::map<char, bool> characters;",
          "47:   for (const auto c : src) {",
          "48:     if (characters[c]) {",
          "49:       return false;",
          "50:     }",
          "51:     characters[c] = true;",
          "52:   }",
          "55:   for (const auto c : dst) {",
          "56:     if (!characters[c]) {",
          "57:       return false;",
          "58:     }",
          "59:     characters[c] = false;",
          "60:   }",
          "64:   return true;",
          "65: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:     OP_REQUIRES_OK(context, context->GetAttr(\"src_format\", &src_format));",
          "38:     string dst_format;",
          "39:     OP_REQUIRES_OK(context, context->GetAttr(\"dst_format\", &dst_format));",
          "44:     OP_REQUIRES(",
          "49:     dst_idx_ = Tensor(DT_INT32, {static_cast<int64>(src_format.size())});",
          "50:     for (int i = 0; i < src_format.size(); ++i) {",
          "51:       for (int j = 0; j < dst_format.size(); ++j) {",
          "",
          "[Removed Lines]",
          "40:     OP_REQUIRES(context, src_format.size() == 4,",
          "41:                 errors::InvalidArgument(strings::StrCat(",
          "42:                     \"Source format must of length 4, received src_format = \",",
          "43:                     src_format)));",
          "45:         context, dst_format.size() == 4,",
          "46:         errors::InvalidArgument(strings::StrCat(",
          "47:             \"Destination format must of length 4, received dst_format = \",",
          "48:             dst_format)));",
          "",
          "[Added Lines]",
          "76:     OP_REQUIRES(context, src_format.size() == 4 || src_format.size() == 5,",
          "77:                 errors::InvalidArgument(",
          "78:                     \"Source format must be of length 4 or 5, received \"",
          "79:                     \"src_format = \",",
          "80:                     src_format));",
          "81:     OP_REQUIRES(context, dst_format.size() == 4 || dst_format.size() == 5,",
          "82:                 errors::InvalidArgument(\"Destination format must be of length \"",
          "83:                                         \"4 or 5, received dst_format = \",",
          "84:                                         dst_format));",
          "86:         context, IsValidPermutation(src_format, dst_format),",
          "87:         errors::InvalidArgument(",
          "88:             \"Destination and source format must determine a permutation, got \",",
          "89:             src_format, \" and \", dst_format));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:       : OpKernel(context) {",
          "78:     string src_format;",
          "79:     OP_REQUIRES_OK(context, context->GetAttr(\"src_format\", &src_format));",
          "80:     string dst_format;",
          "81:     OP_REQUIRES_OK(context, context->GetAttr(\"dst_format\", &dst_format));",
          "82:     src_format_ = src_format;",
          "83:     dst_format_ = dst_format;",
          "84:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:     OP_REQUIRES(context, src_format.size() == 4 || src_format.size() == 5,",
          "122:                 errors::InvalidArgument(",
          "123:                     \"Source format must be of length 4 or 5, received \"",
          "124:                     \"src_format = \",",
          "125:                     src_format));",
          "128:     OP_REQUIRES(context, dst_format.size() == 4 || dst_format.size() == 5,",
          "129:                 errors::InvalidArgument(\"Destination format must be of length \"",
          "130:                                         \"4 or 5, received dst_format = \",",
          "131:                                         dst_format));",
          "132:     OP_REQUIRES(",
          "133:         context, IsValidPermutation(src_format, dst_format),",
          "134:         errors::InvalidArgument(",
          "135:             \"Destination and source format must determine a permutation, got \",",
          "136:             src_format, \" and \", dst_format));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "112:                    context->allocate_output(0, input.shape(), &output));",
          "114:     Eigen::DSizes<Eigen::DenseIndex, 8> dst_idx;",
          "117:     functor::DataFormatVecPermute<Device, T>()(context->eigen_device<Device>(),",
          "118:                                                input.flat<T>(),",
          "",
          "[Removed Lines]",
          "115:     ComputeDstIndex(input.dims(), &dst_idx);",
          "",
          "[Added Lines]",
          "170:     string src_format_str = src_format_;",
          "171:     string dst_format_str = dst_format_;",
          "172:     if (input.dim_size(0) == 2) {",
          "175:       auto keep_only_spatial_dimensions = [](string* format_str) -> void {",
          "176:         auto new_end = std::remove_if(",
          "177:             format_str->begin(), format_str->end(),",
          "178:             [](const char dim) { return dim != 'H' && dim != 'W'; });",
          "179:         format_str->erase(new_end, format_str->end());",
          "180:       };",
          "181:       keep_only_spatial_dimensions(&src_format_str);",
          "182:       keep_only_spatial_dimensions(&dst_format_str);",
          "183:       OP_REQUIRES(context,",
          "184:                   src_format_str.size() == 2 && dst_format_str.size() == 2,",
          "185:                   errors::InvalidArgument(",
          "186:                       \"Format specifier must contain H and W for 2D case\"));",
          "187:     }",
          "188:     ComputeDstIndex(src_format_str, dst_format_str, input.dims(), &dst_idx);",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/nn_test.py||tensorflow/python/ops/nn_test.py": [
          "File: tensorflow/python/ops/nn_test.py -> tensorflow/python/ops/nn_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: from tensorflow.python.eager import def_function",
          "28: from tensorflow.python.framework import constant_op",
          "29: from tensorflow.python.framework import dtypes",
          "30: from tensorflow.python.framework import ops",
          "31: from tensorflow.python.framework import tensor_spec",
          "32: from tensorflow.python.framework import test_util",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: from tensorflow.python.framework import errors",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1184:       y_val = self.evaluate(y)",
          "1185:       self.assertAllEqual(y_val, y_val_expected)",
          "1188: class DataFormatVectorPermuteTest(test_lib.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1188:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1189:   def testInvalidLength(self):",
          "1190:     x = [-4, -3, -2, -1, 0, 1, 2, 3]",
          "1191:     with self.assertRaisesRegex(errors.InvalidArgumentError,",
          "1192:                                 \"Source format must be of length 4 or 5\"):",
          "1193:       op = nn_ops.data_format_dim_map(",
          "1194:           x, src_format=\"12345678\", dst_format=\"87654321\")",
          "1195:       with test_util.use_gpu():",
          "1196:         self.evaluate(op)",
          "1198:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1199:   def testDuplicateSrc(self):",
          "1200:     x = [-4, -3, -2, -1, 0, 1, 2, 3]",
          "1201:     with self.assertRaisesRegex(",
          "1202:         errors.InvalidArgumentError,",
          "1203:         \"Destination and source format must determine a permutation\"):",
          "1204:       op = nn_ops.data_format_dim_map(x, src_format=\"1233\", dst_format=\"4321\")",
          "1205:       with test_util.use_gpu():",
          "1206:         self.evaluate(op)",
          "1208:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1209:   def testDuplicateDst(self):",
          "1210:     x = [-4, -3, -2, -1, 0, 1, 2, 3]",
          "1211:     with self.assertRaisesRegex(",
          "1212:         errors.InvalidArgumentError,",
          "1213:         \"Destination and source format must determine a permutation\"):",
          "1214:       op = nn_ops.data_format_dim_map(x, src_format=\"1234\", dst_format=\"3321\")",
          "1215:       with test_util.use_gpu():",
          "1216:         self.evaluate(op)",
          "1218:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1219:   def testExtraSpecifiers(self):",
          "1220:     x = [-4, -3, -2, -1, 0, 1, 2, 3]",
          "1221:     with self.assertRaisesRegex(",
          "1222:         errors.InvalidArgumentError,",
          "1223:         \"Destination and source format must determine a permutation\"):",
          "1224:       op = nn_ops.data_format_dim_map(x, src_format=\"1234\", dst_format=\"5321\")",
          "1225:       with test_util.use_gpu():",
          "1226:         self.evaluate(op)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1251:       y_val = self.evaluate(y)",
          "1252:       self.assertAllEqual(y_val, [[7, 4], [4, 5], [5, 1], [9, 3]])",
          "1255: @test_util.run_all_in_graph_and_eager_modes",
          "1256: class AvgPoolTest(test_lib.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1295:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1296:   def testInvalidLength(self):",
          "1297:     x = [0, 1, 2, 3]",
          "1298:     with self.assertRaisesRegex(errors.InvalidArgumentError,",
          "1299:                                 \"Source format must be of length 4 or 5\"):",
          "1300:       op = nn_ops.data_format_vec_permute(",
          "1301:           x, src_format=\"12345678\", dst_format=\"87654321\")",
          "1302:       with test_util.use_gpu():",
          "1303:         self.evaluate(op)",
          "1305:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1306:   def testDuplicateSrc(self):",
          "1307:     x = [0, 1, 2, 3]",
          "1308:     with self.assertRaisesRegex(",
          "1309:         errors.InvalidArgumentError,",
          "1310:         \"Destination and source format must determine a permutation\"):",
          "1311:       op = nn_ops.data_format_vec_permute(",
          "1312:           x, src_format=\"1233\", dst_format=\"4321\")",
          "1313:       with test_util.use_gpu():",
          "1314:         self.evaluate(op)",
          "1316:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1317:   def testDuplicateDst(self):",
          "1318:     x = [0, 1, 2, 3]",
          "1319:     with self.assertRaisesRegex(",
          "1320:         errors.InvalidArgumentError,",
          "1321:         \"Destination and source format must determine a permutation\"):",
          "1322:       op = nn_ops.data_format_vec_permute(",
          "1323:           x, src_format=\"1234\", dst_format=\"3321\")",
          "1324:       with test_util.use_gpu():",
          "1325:         self.evaluate(op)",
          "1327:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1328:   def testExtraSpecifiers(self):",
          "1329:     x = [0, 1, 2, 3]",
          "1330:     with self.assertRaisesRegex(",
          "1331:         errors.InvalidArgumentError,",
          "1332:         \"Destination and source format must determine a permutation\"):",
          "1333:       op = nn_ops.data_format_vec_permute(",
          "1334:           x, src_format=\"1234\", dst_format=\"5321\")",
          "1335:       with test_util.use_gpu():",
          "1336:         self.evaluate(op)",
          "1338:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1339:   def test2DNoWH(self):",
          "1340:     x = [[0, 1], [2, 3]]",
          "1341:     with self.assertRaisesRegex(",
          "1342:         errors.InvalidArgumentError,",
          "1343:         \"Format specifier must contain H and W for 2D case\"):",
          "1344:       op = nn_ops.data_format_vec_permute(",
          "1345:           x, src_format=\"1234\", dst_format=\"4321\")",
          "1346:       with test_util.use_gpu():",
          "1347:         self.evaluate(op)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c7748eb5130526bd0b66fce410af7c74d24f6385",
      "candidate_info": {
        "commit_hash": "c7748eb5130526bd0b66fce410af7c74d24f6385",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/c7748eb5130526bd0b66fce410af7c74d24f6385",
        "files": [
          "tensorflow/core/kernels/data_format_ops.cc",
          "tensorflow/python/ops/nn_test.py"
        ],
        "message": "Validate that `DataFormat*` attributes form a permutation.\n\nThe `src_format` and `dst_format` attributes for the `DataFormatDimMap` and `DataFormatVecPermute` raw ops are supposed to determine a permutation. However, this was not validated and could result in unitialized memory accesses as well as writes outside of bounds and potential crashes.\n\nWhile here, we also test that the format attributes have the needed length, add tests for all validation failure cases, remove unnecessary calls to `strings::StrCat`, and fix a few grammar errors.\n\nThis will be cherry-picked on the supported release branches.\n\nPiperOrigin-RevId: 346135579\nChange-Id: I1c76392382c89ad8f072d5bc93d70669851eb404",
        "before_after_code_files": [
          "tensorflow/core/kernels/data_format_ops.cc||tensorflow/core/kernels/data_format_ops.cc",
          "tensorflow/python/ops/nn_test.py||tensorflow/python/ops/nn_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/data_format_ops.cc||tensorflow/core/kernels/data_format_ops.cc",
            "tensorflow/python/ops/nn_test.py||tensorflow/python/ops/nn_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/data_format_ops.cc||tensorflow/core/kernels/data_format_ops.cc",
            "tensorflow/python/ops/nn_test.py||tensorflow/python/ops/nn_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/data_format_ops.cc||tensorflow/core/kernels/data_format_ops.cc": [
          "File: tensorflow/core/kernels/data_format_ops.cc -> tensorflow/core/kernels/data_format_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #define EIGEN_USE_THREADS",
          "20: #include \"tensorflow/core/kernels/data_format_ops.h\"",
          "21: #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"",
          "22: #include \"tensorflow/core/framework/op_kernel.h\"",
          "23: #include \"tensorflow/core/framework/register_types.h\"",
          "24: #include \"tensorflow/core/framework/tensor.h\"",
          "26: namespace tensorflow {",
          "28: typedef Eigen::ThreadPoolDevice CPUDevice;",
          "29: typedef Eigen::GpuDevice GPUDevice;",
          "31: template <typename Device, typename T>",
          "32: class DataFormatDimMapOp : public OpKernel {",
          "33:  public:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include <map>",
          "28: #include \"tensorflow/core/platform/errors.h\"",
          "39: static bool IsValidPermutation(const std::string& src, const std::string& dst) {",
          "40:   if (src.size() != dst.size()) {",
          "41:     return false;",
          "42:   }",
          "44:   std::map<char, bool> characters;",
          "47:   for (const auto c : src) {",
          "48:     if (characters[c]) {",
          "49:       return false;",
          "50:     }",
          "51:     characters[c] = true;",
          "52:   }",
          "55:   for (const auto c : dst) {",
          "56:     if (!characters[c]) {",
          "57:       return false;",
          "58:     }",
          "59:     characters[c] = false;",
          "60:   }",
          "64:   return true;",
          "65: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:     OP_REQUIRES_OK(context, context->GetAttr(\"src_format\", &src_format));",
          "38:     string dst_format;",
          "39:     OP_REQUIRES_OK(context, context->GetAttr(\"dst_format\", &dst_format));",
          "44:     OP_REQUIRES(",
          "49:     dst_idx_ = Tensor(DT_INT32, {static_cast<int64>(src_format.size())});",
          "50:     for (int i = 0; i < src_format.size(); ++i) {",
          "51:       for (int j = 0; j < dst_format.size(); ++j) {",
          "",
          "[Removed Lines]",
          "40:     OP_REQUIRES(context, src_format.size() == 4,",
          "41:                 errors::InvalidArgument(strings::StrCat(",
          "42:                     \"Source format must of length 4, received src_format = \",",
          "43:                     src_format)));",
          "45:         context, dst_format.size() == 4,",
          "46:         errors::InvalidArgument(strings::StrCat(",
          "47:             \"Destination format must of length 4, received dst_format = \",",
          "48:             dst_format)));",
          "",
          "[Added Lines]",
          "76:     OP_REQUIRES(context, src_format.size() == 4 || src_format.size() == 5,",
          "77:                 errors::InvalidArgument(",
          "78:                     \"Source format must be of length 4 or 5, received \"",
          "79:                     \"src_format = \",",
          "80:                     src_format));",
          "81:     OP_REQUIRES(context, dst_format.size() == 4 || dst_format.size() == 5,",
          "82:                 errors::InvalidArgument(\"Destination format must be of length \"",
          "83:                                         \"4 or 5, received dst_format = \",",
          "84:                                         dst_format));",
          "86:         context, IsValidPermutation(src_format, dst_format),",
          "87:         errors::InvalidArgument(",
          "88:             \"Destination and source format must determine a permutation, got \",",
          "89:             src_format, \" and \", dst_format));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:       : OpKernel(context) {",
          "78:     string src_format;",
          "79:     OP_REQUIRES_OK(context, context->GetAttr(\"src_format\", &src_format));",
          "80:     string dst_format;",
          "81:     OP_REQUIRES_OK(context, context->GetAttr(\"dst_format\", &dst_format));",
          "82:     src_format_ = src_format;",
          "83:     dst_format_ = dst_format;",
          "84:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:     OP_REQUIRES(context, src_format.size() == 4 || src_format.size() == 5,",
          "122:                 errors::InvalidArgument(",
          "123:                     \"Source format must be of length 4 or 5, received \"",
          "124:                     \"src_format = \",",
          "125:                     src_format));",
          "128:     OP_REQUIRES(context, dst_format.size() == 4 || dst_format.size() == 5,",
          "129:                 errors::InvalidArgument(\"Destination format must be of length \"",
          "130:                                         \"4 or 5, received dst_format = \",",
          "131:                                         dst_format));",
          "132:     OP_REQUIRES(",
          "133:         context, IsValidPermutation(src_format, dst_format),",
          "134:         errors::InvalidArgument(",
          "135:             \"Destination and source format must determine a permutation, got \",",
          "136:             src_format, \" and \", dst_format));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "112:                    context->allocate_output(0, input.shape(), &output));",
          "114:     Eigen::DSizes<Eigen::DenseIndex, 8> dst_idx;",
          "117:     functor::DataFormatVecPermute<Device, T>()(context->eigen_device<Device>(),",
          "118:                                                input.flat<T>(),",
          "",
          "[Removed Lines]",
          "115:     ComputeDstIndex(input.dims(), &dst_idx);",
          "",
          "[Added Lines]",
          "170:     string src_format_str = src_format_;",
          "171:     string dst_format_str = dst_format_;",
          "172:     if (input.dim_size(0) == 2) {",
          "175:       auto keep_only_spatial_dimensions = [](string* format_str) -> void {",
          "176:         auto new_end = std::remove_if(",
          "177:             format_str->begin(), format_str->end(),",
          "178:             [](const char dim) { return dim != 'H' && dim != 'W'; });",
          "179:         format_str->erase(new_end, format_str->end());",
          "180:       };",
          "181:       keep_only_spatial_dimensions(&src_format_str);",
          "182:       keep_only_spatial_dimensions(&dst_format_str);",
          "183:       OP_REQUIRES(context,",
          "184:                   src_format_str.size() == 2 && dst_format_str.size() == 2,",
          "185:                   errors::InvalidArgument(",
          "186:                       \"Format specifier must contain H and W for 2D case\"));",
          "187:     }",
          "188:     ComputeDstIndex(src_format_str, dst_format_str, input.dims(), &dst_idx);",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/nn_test.py||tensorflow/python/ops/nn_test.py": [
          "File: tensorflow/python/ops/nn_test.py -> tensorflow/python/ops/nn_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: from tensorflow.python.eager import def_function",
          "28: from tensorflow.python.framework import constant_op",
          "29: from tensorflow.python.framework import dtypes",
          "30: from tensorflow.python.framework import ops",
          "31: from tensorflow.python.framework import tensor_spec",
          "32: from tensorflow.python.framework import test_util",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: from tensorflow.python.framework import errors",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1182:       y_val = self.evaluate(y)",
          "1183:       self.assertAllEqual(y_val, y_val_expected)",
          "1186: class DataFormatVectorPermuteTest(test_lib.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1186:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1187:   def testInvalidLength(self):",
          "1188:     x = [-4, -3, -2, -1, 0, 1, 2, 3]",
          "1189:     with self.assertRaisesRegex(errors.InvalidArgumentError,",
          "1190:                                 \"Source format must be of length 4 or 5\"):",
          "1191:       op = nn_ops.data_format_dim_map(",
          "1192:           x, src_format=\"12345678\", dst_format=\"87654321\")",
          "1193:       with test_util.use_gpu():",
          "1194:         self.evaluate(op)",
          "1196:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1197:   def testDuplicateSrc(self):",
          "1198:     x = [-4, -3, -2, -1, 0, 1, 2, 3]",
          "1199:     with self.assertRaisesRegex(",
          "1200:         errors.InvalidArgumentError,",
          "1201:         \"Destination and source format must determine a permutation\"):",
          "1202:       op = nn_ops.data_format_dim_map(x, src_format=\"1233\", dst_format=\"4321\")",
          "1203:       with test_util.use_gpu():",
          "1204:         self.evaluate(op)",
          "1206:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1207:   def testDuplicateDst(self):",
          "1208:     x = [-4, -3, -2, -1, 0, 1, 2, 3]",
          "1209:     with self.assertRaisesRegex(",
          "1210:         errors.InvalidArgumentError,",
          "1211:         \"Destination and source format must determine a permutation\"):",
          "1212:       op = nn_ops.data_format_dim_map(x, src_format=\"1234\", dst_format=\"3321\")",
          "1213:       with test_util.use_gpu():",
          "1214:         self.evaluate(op)",
          "1216:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1217:   def testExtraSpecifiers(self):",
          "1218:     x = [-4, -3, -2, -1, 0, 1, 2, 3]",
          "1219:     with self.assertRaisesRegex(",
          "1220:         errors.InvalidArgumentError,",
          "1221:         \"Destination and source format must determine a permutation\"):",
          "1222:       op = nn_ops.data_format_dim_map(x, src_format=\"1234\", dst_format=\"5321\")",
          "1223:       with test_util.use_gpu():",
          "1224:         self.evaluate(op)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1249:       y_val = self.evaluate(y)",
          "1250:       self.assertAllEqual(y_val, [[7, 4], [4, 5], [5, 1], [9, 3]])",
          "1253: @test_util.run_all_in_graph_and_eager_modes",
          "1254: class AvgPoolTest(test_lib.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1293:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1294:   def testInvalidLength(self):",
          "1295:     x = [0, 1, 2, 3]",
          "1296:     with self.assertRaisesRegex(errors.InvalidArgumentError,",
          "1297:                                 \"Source format must be of length 4 or 5\"):",
          "1298:       op = nn_ops.data_format_vec_permute(",
          "1299:           x, src_format=\"12345678\", dst_format=\"87654321\")",
          "1300:       with test_util.use_gpu():",
          "1301:         self.evaluate(op)",
          "1303:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1304:   def testDuplicateSrc(self):",
          "1305:     x = [0, 1, 2, 3]",
          "1306:     with self.assertRaisesRegex(",
          "1307:         errors.InvalidArgumentError,",
          "1308:         \"Destination and source format must determine a permutation\"):",
          "1309:       op = nn_ops.data_format_vec_permute(",
          "1310:           x, src_format=\"1233\", dst_format=\"4321\")",
          "1311:       with test_util.use_gpu():",
          "1312:         self.evaluate(op)",
          "1314:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1315:   def testDuplicateDst(self):",
          "1316:     x = [0, 1, 2, 3]",
          "1317:     with self.assertRaisesRegex(",
          "1318:         errors.InvalidArgumentError,",
          "1319:         \"Destination and source format must determine a permutation\"):",
          "1320:       op = nn_ops.data_format_vec_permute(",
          "1321:           x, src_format=\"1234\", dst_format=\"3321\")",
          "1322:       with test_util.use_gpu():",
          "1323:         self.evaluate(op)",
          "1325:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1326:   def testExtraSpecifiers(self):",
          "1327:     x = [0, 1, 2, 3]",
          "1328:     with self.assertRaisesRegex(",
          "1329:         errors.InvalidArgumentError,",
          "1330:         \"Destination and source format must determine a permutation\"):",
          "1331:       op = nn_ops.data_format_vec_permute(",
          "1332:           x, src_format=\"1234\", dst_format=\"5321\")",
          "1333:       with test_util.use_gpu():",
          "1334:         self.evaluate(op)",
          "1336:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1337:   def test2DNoWH(self):",
          "1338:     x = [[0, 1], [2, 3]]",
          "1339:     with self.assertRaisesRegex(",
          "1340:         errors.InvalidArgumentError,",
          "1341:         \"Format specifier must contain H and W for 2D case\"):",
          "1342:       op = nn_ops.data_format_vec_permute(",
          "1343:           x, src_format=\"1234\", dst_format=\"4321\")",
          "1344:       with test_util.use_gpu():",
          "1345:         self.evaluate(op)",
          "",
          "---------------"
        ]
      }
    }
  ]
}