{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "13400e3e5851d81d4c79f1f4ac0e7aef85b64cb9",
      "candidate_info": {
        "commit_hash": "13400e3e5851d81d4c79f1f4ac0e7aef85b64cb9",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/13400e3e5851d81d4c79f1f4ac0e7aef85b64cb9",
        "files": [
          "lib/fs.js",
          "test/simple/test-fs-realpath.js"
        ],
        "message": "windows: make symlinks tolerant to forward slashes\n\nCloses #3440",
        "before_after_code_files": [
          "lib/fs.js||lifs.js",
          "test/simple/test-fs-realpath.js||test/simple/test-fs-realpath.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/fs.js||lifs.js": [
          "File: lib/fs.js -> lifs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "532:   return binding.readlink(pathModule._makeLong(path));",
          "533: };",
          "535: fs.symlink = function(destination, path, type_, callback) {",
          "537:   var callback = makeCallback(arguments[arguments.length - 1]);",
          "545: };",
          "547: fs.symlinkSync = function(destination, path, type) {",
          "554: };",
          "556: fs.link = function(srcpath, dstpath, callback) {",
          "",
          "[Removed Lines]",
          "536:   var type = (typeof(type_) == 'string' ? type_ : null);",
          "539:   if (isWindows && type === 'junction') {",
          "540:     destination = pathModule._makeLong(destination);",
          "541:   }",
          "543:   binding.symlink(destination,",
          "544:                   pathModule._makeLong(path), type, callback);",
          "548:   if (isWindows && type === 'junction') {",
          "549:     destination = pathModule._makeLong(destination);",
          "550:   }",
          "552:   return binding.symlink(destination,",
          "553:                          pathModule._makeLong(path), type);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-fs-realpath.js||test/simple/test-fs-realpath.js": [
          "File: test/simple/test-fs-realpath.js -> test/simple/test-fs-realpath.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:   root = process.cwd().substr(0, 3);",
          "46:   try {",
          "",
          "[Removed Lines]",
          "37:   fs._symlinkSync = fs.symlinkSync;",
          "38:   fs.symlinkSync = function(a, b, type) {",
          "39:     a = a.split('/').join('\\\\');",
          "40:     b = b.split('/').join('\\\\');",
          "41:     return fs._symlinkSync(a, b, type);",
          "42:   };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bf539f9bfd2cde4c18557f2607455a4f44fc1565",
      "candidate_info": {
        "commit_hash": "bf539f9bfd2cde4c18557f2607455a4f44fc1565",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/bf539f9bfd2cde4c18557f2607455a4f44fc1565",
        "files": [
          "src/node_zlib.cc"
        ],
        "message": "zlib: Call inflateEnd for UNZIP. Fixes memory leak.\n\nFix #2595",
        "before_after_code_files": [
          "src/node_zlib.cc||src/node_zlib.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_zlib.cc||src/node_zlib.cc": [
          "File: src/node_zlib.cc -> src/node_zlib.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:   ~ZCtx() {",
          "64:     if (mode_ == DEFLATE || mode_ == GZIP || mode_ == DEFLATERAW) {",
          "65:       (void)deflateEnd(&strm_);",
          "67:       (void)inflateEnd(&strm_);",
          "68:     }",
          "",
          "[Removed Lines]",
          "66:     } else if (mode_ == INFLATE || mode_ == GUNZIP || mode_ == INFLATERAW) {",
          "",
          "[Added Lines]",
          "66:     } else if (mode_ == INFLATE || mode_ == GUNZIP || mode_ == INFLATERAW ||",
          "67:                mode_ == UNZIP) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "de78922b12c06b80489ec8eb05f0e3d4cd3fe8fa",
      "candidate_info": {
        "commit_hash": "de78922b12c06b80489ec8eb05f0e3d4cd3fe8fa",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/de78922b12c06b80489ec8eb05f0e3d4cd3fe8fa",
        "files": [
          "src/node.cc",
          "src/node.js",
          "src/node_isolate.cc",
          "src/node_isolate.h",
          "test/simple/test-isolates0.js"
        ],
        "message": "ref isolate loop",
        "before_after_code_files": [
          "src/node.cc||src/node.cc",
          "src/node.js||src/node.js",
          "src/node_isolate.cc||src/node_isolate.cc",
          "src/node_isolate.h||src/node_isolate.h",
          "test/simple/test-isolates0.js||test/simple/test-isolates0.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2649:   if (isolate->id_ > 1) {",
          "2650:     process_l->Set(String::NewSymbol(\"_send\"),",
          "2651:                    FunctionTemplate::New(Isolate::Send)->GetFunction());",
          "2652:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2653:     process_l->Set(String::NewSymbol(\"_exit\"),",
          "2654:                    FunctionTemplate::New(Isolate::Unref)->GetFunction());",
          "",
          "---------------"
        ],
        "src/node.js||src/node.js": [
          "File: src/node.js -> src/node.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:       msg = JSON.parse('' + msg);",
          "136:       process.emit('message', msg);",
          "137:     };",
          "138:   }",
          "140:   startup.globalVariables = function() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "139:     process.exit = process._exit;",
          "",
          "---------------"
        ],
        "src/node_isolate.cc||src/node_isolate.cc": [
          "File: src/node_isolate.cc -> src/node_isolate.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "215: }",
          "218: void Isolate::OnMessage(IsolateMessage* msg, void* arg) {",
          "219:   HandleScope scope;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "218: Handle<Value> Isolate::Unref(const Arguments& args) {",
          "219:   HandleScope scope;",
          "221:   Isolate* isolate = Isolate::GetCurrent();",
          "222:   uv_unref(isolate->loop_);",
          "224:   return Undefined();",
          "225: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "270:   assert(v8_isolate_->GetData() == NULL);",
          "271:   v8_isolate_->SetData(this);",
          "273:   globals_init_ = false;",
          "274: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "286:   uv_ref(loop_);",
          "",
          "---------------"
        ],
        "src/node_isolate.h||src/node_isolate.h": [
          "File: src/node_isolate.h -> src/node_isolate.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:   typedef void (*AtExitCallback)(void* arg);",
          "76:   static v8::Handle<v8::Value> Send(const v8::Arguments& args);",
          "78:   static Isolate* GetCurrent() {",
          "79:     return reinterpret_cast<Isolate*>(v8::Isolate::GetCurrent()->GetData());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:   static v8::Handle<v8::Value> Unref(const v8::Arguments& args);",
          "",
          "---------------"
        ],
        "test/simple/test-isolates0.js||test/simple/test-isolates0.js": [
          "File: test/simple/test-isolates0.js -> test/simple/test-isolates0.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     fs.stat(__dirname, function(err, stat) {",
          "53:       if (err) throw err;",
          "54:       console.error('thread 2', stat.mtime);",
          "55:     });",
          "56:   }, 500);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:       process.exit();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "39e25528eb769c36e2f8fa534861a23822c819fb",
      "candidate_info": {
        "commit_hash": "39e25528eb769c36e2f8fa534861a23822c819fb",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/39e25528eb769c36e2f8fa534861a23822c819fb",
        "files": [
          "doc/api/fs.markdown",
          "lib/fs.js",
          "src/node_file.cc",
          "test/simple/test-fs-symlink-dir-junction.js"
        ],
        "message": "windows: enable creating directory junctions with fs.symlink",
        "before_after_code_files": [
          "lib/fs.js||lifs.js",
          "src/node_file.cc||src/node_file.cc",
          "test/simple/test-fs-symlink-dir-junction.js||test/simple/test-fs-symlink-dir-junction.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/fs.js||lifs.js": [
          "File: lib/fs.js -> lifs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: var O_TRUNC = constants.O_TRUNC || 0;",
          "51: var O_WRONLY = constants.O_WRONLY || 0;",
          "53: fs.Stats = binding.Stats;",
          "55: fs.Stats.prototype._checkModeProperty = function(property) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "477:   var type = (typeof(type_) == 'string' ? type_ : null);",
          "478:   var callback_ = arguments[arguments.length - 1];",
          "479:   callback = (typeof(callback_) == 'function' ? callback_ : null);",
          "481:                   pathModule._makeLong(path), type, callback);",
          "482: };",
          "484: fs.symlinkSync = function(destination, path, type) {",
          "486:                          pathModule._makeLong(path), type);",
          "487: };",
          "",
          "[Removed Lines]",
          "480:   binding.symlink(pathModule._makeLong(destination),",
          "485:   return binding.symlink(pathModule._makeLong(destination),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "873: if (isWindows) {",
          "",
          "[Removed Lines]",
          "870: var normalize = pathModule.normalize,",
          "871:     isWindows = process.platform === 'win32';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/node_file.cc||src/node_file.cc": [
          "File: src/node_file.cc -> src/node_file.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "415:   if (args[2]->IsString()) {",
          "416:     String::Utf8Value mode(args[2]);",
          "418:       flags |= UV_FS_SYMLINK_DIR;",
          "419:     }",
          "420:   }",
          "",
          "[Removed Lines]",
          "417:     if (memcmp(*mode, \"dir\\0\", 4) == 0) {",
          "",
          "[Added Lines]",
          "417:     if (strcmp(*mode, \"dir\") == 0) {",
          "419:     } else if (strcmp(*mode, \"junction\") == 0) {",
          "420:       flags |= UV_FS_SYMLINK_JUNCTION;",
          "421:     } else if (strcmp(*mode, \"file\") != 0) {",
          "422:       return ThrowException(Exception::Error(",
          "423:         String::New(\"Unknown symlink type\")));",
          "",
          "---------------"
        ],
        "test/simple/test-fs-symlink-dir-junction.js||test/simple/test-fs-symlink-dir-junction.js": [
          "File: test/simple/test-fs-symlink-dir-junction.js -> test/simple/test-fs-symlink-dir-junction.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var path = require('path');",
          "25: var fs = require('fs');",
          "26: var completed = 0;",
          "27: var expected_tests = 4;",
          "30: var linkData = path.join(common.fixturesDir, 'cycles/');",
          "31: var linkPath = path.join(common.tmpDir, 'cycles_link');",
          "34: try {",
          "35:   fs.unlinkSync(linkPath);",
          "36: } catch (e) {}",
          "38: console.log('linkData: ' + linkData);",
          "39: console.log('linkPath: ' + linkPath);",
          "41: fs.symlink(linkData, linkPath, 'junction', function(err) {",
          "42:   if (err) throw err;",
          "43:   completed++;",
          "45:   fs.lstat(linkPath, function(err, stats) {",
          "46:     if (err) throw err;",
          "47:     assert.ok(stats.isSymbolicLink());",
          "48:     completed++;",
          "50:     fs.readlink(linkPath, function(err, destination) {",
          "51:       if (err) throw err;",
          "52:       assert.equal(destination, linkData);",
          "53:       completed++;",
          "55:       fs.unlink(linkPath, function(err) {",
          "56:         if (err) throw err;",
          "57:         assert(!fs.existsSync(linkPath));",
          "58:         assert(fs.existsSync(linkData));",
          "59:         completed++;",
          "60:       });",
          "61:     });",
          "62:   });",
          "63: });",
          "65: process.on('exit', function() {",
          "66:   assert.equal(completed, expected_tests);",
          "67: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dc8b488bbe2b411b56a45d56b384308957a07d76",
      "candidate_info": {
        "commit_hash": "dc8b488bbe2b411b56a45d56b384308957a07d76",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/dc8b488bbe2b411b56a45d56b384308957a07d76",
        "files": [
          "src/node_version.h"
        ],
        "message": "Now working on 0.7.10",
        "before_after_code_files": [
          "src/node_version.h||src/node_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_version.h||src/node_version.h": [
          "File: src/node_version.h -> src/node_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #define NODE_MAJOR_VERSION 0",
          "30: #define NODE_MINOR_VERSION 7",
          "34: #ifndef NODE_STRINGIFY",
          "35: #define NODE_STRINGIFY(n) NODE_STRINGIFY_HELPER(n)",
          "",
          "[Removed Lines]",
          "31: #define NODE_PATCH_VERSION 9",
          "32: #define NODE_VERSION_IS_RELEASE 1",
          "",
          "[Added Lines]",
          "31: #define NODE_PATCH_VERSION 10",
          "32: #define NODE_VERSION_IS_RELEASE 0",
          "",
          "---------------"
        ]
      }
    }
  ]
}