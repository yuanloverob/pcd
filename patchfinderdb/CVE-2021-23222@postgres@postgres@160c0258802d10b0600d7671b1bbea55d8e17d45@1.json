{
  "cve_id": "CVE-2021-23222",
  "cve_desc": "A man-in-the-middle attacker can inject false responses to the client's first few queries, despite the use of SSL certificate verification and encryption.",
  "repo": "postgres/postgres",
  "patch_hash": "160c0258802d10b0600d7671b1bbea55d8e17d45",
  "patch_info": {
    "commit_hash": "160c0258802d10b0600d7671b1bbea55d8e17d45",
    "repo": "postgres/postgres",
    "commit_url": "https://github.com/postgres/postgres/commit/160c0258802d10b0600d7671b1bbea55d8e17d45",
    "files": [
      "doc/src/sgml/protocol.sgml",
      "src/interfaces/libpq/fe-connect.c"
    ],
    "message": "libpq: reject extraneous data after SSL or GSS encryption handshake.\n\nlibpq collects up to a bufferload of data whenever it reads data from\nthe socket.  When SSL or GSS encryption is requested during startup,\nany additional data received with the server's yes-or-no reply\nremained in the buffer, and would be treated as already-decrypted data\nonce the encryption handshake completed.  Thus, a man-in-the-middle\nwith the ability to inject data into the TCP connection could stuff\nsome cleartext data into the start of a supposedly encryption-protected\ndatabase session.\n\nThis could probably be abused to inject faked responses to the\nclient's first few queries, although other details of libpq's behavior\nmake that harder than it sounds.  A different line of attack is to\nexfiltrate the client's password, or other sensitive data that might\nbe sent early in the session.  That has been shown to be possible with\na server vulnerable to CVE-2021-23214.\n\nTo fix, throw a protocol-violation error if the internal buffer\nis not empty after the encryption handshake.\n\nOur thanks to Jacob Champion for reporting this problem.\n\nSecurity: CVE-2021-23222",
    "before_after_code_files": [
      "src/interfaces/libpq/fe-connect.c||src/interfaces/libpq/fe-connect.c"
    ]
  },
  "patch_diff": {
    "src/interfaces/libpq/fe-connect.c||src/interfaces/libpq/fe-connect.c": [
      "File: src/interfaces/libpq/fe-connect.c -> src/interfaces/libpq/fe-connect.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3097:     pollres = pqsecure_open_client(conn);",
      "3098:     if (pollres == PGRES_POLLING_OK)",
      "3099:     {",
      "3101:      conn->status = CONNECTION_MADE;",
      "3102:      return PGRES_POLLING_WRITING;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3106:      if (conn->inCursor != conn->inEnd)",
      "3107:      {",
      "3108:       appendPQExpBufferStr(&conn->errorMessage,",
      "3109:             libpq_gettext(\"received unencrypted data after SSL response\\n\"));",
      "3110:       goto error_return;",
      "3111:      }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3196:     pollres = pqsecure_open_gss(conn);",
      "3197:     if (pollres == PGRES_POLLING_OK)",
      "3198:     {",
      "3200:      conn->status = CONNECTION_MADE;",
      "3201:      return PGRES_POLLING_WRITING;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3218:      if (conn->inCursor != conn->inEnd)",
      "3219:      {",
      "3220:       appendPQExpBufferStr(&conn->errorMessage,",
      "3221:             libpq_gettext(\"received unencrypted data after GSSAPI encryption response\\n\"));",
      "3222:       goto error_return;",
      "3223:      }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d83cdfdca9d918bbbd6bb209139b94c954da7228",
      "candidate_info": {
        "commit_hash": "d83cdfdca9d918bbbd6bb209139b94c954da7228",
        "repo": "postgres/postgres",
        "commit_url": "https://github.com/postgres/postgres/commit/d83cdfdca9d918bbbd6bb209139b94c954da7228",
        "files": [
          "doc/src/sgml/protocol.sgml",
          "src/interfaces/libpq/fe-connect.c"
        ],
        "message": "libpq: reject extraneous data after SSL or GSS encryption handshake.\n\nlibpq collects up to a bufferload of data whenever it reads data from\nthe socket.  When SSL or GSS encryption is requested during startup,\nany additional data received with the server's yes-or-no reply\nremained in the buffer, and would be treated as already-decrypted data\nonce the encryption handshake completed.  Thus, a man-in-the-middle\nwith the ability to inject data into the TCP connection could stuff\nsome cleartext data into the start of a supposedly encryption-protected\ndatabase session.\n\nThis could probably be abused to inject faked responses to the\nclient's first few queries, although other details of libpq's behavior\nmake that harder than it sounds.  A different line of attack is to\nexfiltrate the client's password, or other sensitive data that might\nbe sent early in the session.  That has been shown to be possible with\na server vulnerable to CVE-2021-23214.\n\nTo fix, throw a protocol-violation error if the internal buffer\nis not empty after the encryption handshake.\n\nOur thanks to Jacob Champion for reporting this problem.\n\nSecurity: CVE-2021-23222",
        "before_after_code_files": [
          "src/interfaces/libpq/fe-connect.c||src/interfaces/libpq/fe-connect.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "src/interfaces/libpq/fe-connect.c||src/interfaces/libpq/fe-connect.c"
          ],
          "candidate": [
            "src/interfaces/libpq/fe-connect.c||src/interfaces/libpq/fe-connect.c"
          ]
        }
      },
      "candidate_diff": {
        "src/interfaces/libpq/fe-connect.c||src/interfaces/libpq/fe-connect.c": [
          "File: src/interfaces/libpq/fe-connect.c -> src/interfaces/libpq/fe-connect.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2371:     pollres = pqsecure_open_client(conn);",
          "2372:     if (pollres == PGRES_POLLING_OK)",
          "2373:     {",
          "2375:      conn->status = CONNECTION_MADE;",
          "2376:      return PGRES_POLLING_WRITING;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2380:      if (conn->inCursor != conn->inEnd)",
          "2381:      {",
          "2382:       appendPQExpBufferStr(&conn->errorMessage,",
          "2383:             libpq_gettext(\"received unencrypted data after SSL response\\n\"));",
          "2384:       goto error_return;",
          "2385:      }",
          "",
          "---------------"
        ]
      }
    }
  ]
}