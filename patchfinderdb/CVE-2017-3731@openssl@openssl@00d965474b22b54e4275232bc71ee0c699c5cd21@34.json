{
  "cve_id": "CVE-2017-3731",
  "cve_desc": "If an SSL/TLS server or client is running on a 32-bit host, and a specific cipher is being used, then a truncated packet can cause that server or client to perform an out-of-bounds read, usually resulting in a crash. For OpenSSL 1.1.0, the crash can be triggered when using CHACHA20/POLY1305; users should upgrade to 1.1.0d. For Openssl 1.0.2, the crash can be triggered when using RC4-MD5; users who have not disabled that algorithm should update to 1.0.2k.",
  "repo": "openssl/openssl",
  "patch_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
  "patch_info": {
    "commit_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/00d965474b22b54e4275232bc71ee0c699c5cd21",
    "files": [
      "crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c"
    ],
    "message": "crypto/evp: harden AEAD ciphers.\n\nOriginally a crash in 32-bit build was reported CHACHA20-POLY1305\ncipher. The crash is triggered by truncated packet and is result\nof excessive hashing to the edge of accessible memory. Since hash\noperation is read-only it is not considered to be exploitable\nbeyond a DoS condition. Other ciphers were hardened.\n\nThanks to Robert \u015awi\u0119cki for report.\n\nCVE-2017-3731\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "crypto/evp/e_aes.c||crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
    ]
  },
  "patch_diff": {
    "crypto/evp/e_aes.c||crypto/evp/e_aes.c": [
      "File: crypto/evp/e_aes.c -> crypto/evp/e_aes.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1388:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1389:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1391:             len -= EVP_GCM_TLS_EXPLICIT_IV_LEN;",
      "1394:                 len -= EVP_GCM_TLS_TAG_LEN;",
      "1395:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1396:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1397:         }",
      "",
      "[Removed Lines]",
      "1393:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1391:             if (len < EVP_GCM_TLS_EXPLICIT_IV_LEN)",
      "1392:                 return 0;",
      "1395:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1396:                 if (len < EVP_GCM_TLS_TAG_LEN)",
      "1397:                     return 0;",
      "1399:             }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1946:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1947:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1949:             len -= EVP_CCM_TLS_EXPLICIT_IV_LEN;",
      "1952:                 len -= cctx->M;",
      "1953:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1954:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1955:         }",
      "",
      "[Removed Lines]",
      "1951:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1954:             if (len < EVP_CCM_TLS_EXPLICIT_IV_LEN)",
      "1955:                 return 0;",
      "1958:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1959:                 if (len < cctx->M)",
      "1960:                     return 0;",
      "1962:             }",
      "",
      "---------------"
    ],
    "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c": [
      "File: crypto/evp/e_chacha20_poly1305.c -> crypto/evp/e_chacha20_poly1305.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "398:             len = aad[EVP_AEAD_TLS1_AAD_LEN - 2] << 8 |",
      "399:                   aad[EVP_AEAD_TLS1_AAD_LEN - 1];",
      "400:             if (!ctx->encrypt) {",
      "402:                 memcpy(temp, aad, EVP_AEAD_TLS1_AAD_LEN - 2);",
      "403:                 aad = temp;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "401:                 if (len < POLY1305_BLOCK_SIZE)",
      "402:                     return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6212179e39d5b59092b21d31b45203e6d3aacdaa",
      "candidate_info": {
        "commit_hash": "6212179e39d5b59092b21d31b45203e6d3aacdaa",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/6212179e39d5b59092b21d31b45203e6d3aacdaa",
        "files": [
          "crypto/x509/x509_lcl.h",
          "crypto/x509/x509_vpm.c",
          "doc/crypto/X509_VERIFY_PARAM_set_flags.pod",
          "include/openssl/x509_vfy.h",
          "util/libcrypto.num"
        ],
        "message": "Add X509_VERIFY_PARAM inheritance flag set/get\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2079)",
        "before_after_code_files": [
          "crypto/x509/x509_lcl.h||crypto/x509/x509_lcl.h",
          "crypto/x509/x509_vpm.c||crypto/x509/x509_vpm.c",
          "include/openssl/x509_vfy.h||include/openssl/x509_vfy.h",
          "util/libcrypto.num||util/libcrypto.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/x509/x509_lcl.h||crypto/x509/x509_lcl.h": [
          "File: crypto/x509/x509_lcl.h -> crypto/x509/x509_lcl.h"
        ],
        "crypto/x509/x509_vpm.c||crypto/x509/x509_vpm.c": [
          "File: crypto/x509/x509_vpm.c -> crypto/x509/x509_vpm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "306:     return param->flags;",
          "307: }",
          "309: int X509_VERIFY_PARAM_set_purpose(X509_VERIFY_PARAM *param, int purpose)",
          "310: {",
          "311:     return X509_PURPOSE_set(&param->purpose, purpose);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "309: uint32_t X509_VERIFY_PARAM_get_inh_flags(const X509_VERIFY_PARAM *param)",
          "310: {",
          "311:     return param->inh_flags;",
          "312: }",
          "314: int X509_VERIFY_PARAM_set_inh_flags(X509_VERIFY_PARAM *param, uint32_t flags)",
          "315: {",
          "316:     param->inh_flags = flags;",
          "317:     return 1;",
          "318: }",
          "",
          "---------------"
        ],
        "include/openssl/x509_vfy.h||include/openssl/x509_vfy.h": [
          "File: include/openssl/x509_vfy.h -> include/openssl/x509_vfy.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "272: int X509_STORE_set_trust(X509_STORE *ctx, int trust);",
          "273: int X509_STORE_set1_param(X509_STORE *ctx, X509_VERIFY_PARAM *pm);",
          "274: X509_VERIFY_PARAM *X509_STORE_get0_param(X509_STORE *ctx);",
          "276: void X509_STORE_set_verify(X509_STORE *ctx, X509_STORE_CTX_verify_fn verify);",
          "277: #define X509_STORE_set_verify_func(ctx, func) \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "275: int X509_STORE_set_flags(X509_STORE *ctx, unsigned long flags);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "464: int X509_VERIFY_PARAM_set1_policies(X509_VERIFY_PARAM *param,",
          "465:                                     STACK_OF(ASN1_OBJECT) *policies);",
          "467: int X509_VERIFY_PARAM_set1_host(X509_VERIFY_PARAM *param,",
          "468:                                 const char *name, size_t namelen);",
          "469: int X509_VERIFY_PARAM_add1_host(X509_VERIFY_PARAM *param,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "468: int X509_VERIFY_PARAM_set_inh_flags(X509_VERIFY_PARAM *param,",
          "469:                                     uint32_t flags);",
          "470: uint32_t X509_VERIFY_PARAM_get_inh_flags(const X509_VERIFY_PARAM *param);",
          "",
          "---------------"
        ],
        "util/libcrypto.num||util/libcrypto.num": [
          "File: util/libcrypto.num -> util/libcrypto.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "4210: DSO_dsobyaddr                           4171 1_1_0c EXIST::FUNCTION:",
          "4211: CT_POLICY_EVAL_CTX_get_time             4172 1_1_0d EXIST::FUNCTION:CT",
          "4212: CT_POLICY_EVAL_CTX_set_time             4173 1_1_0d EXIST::FUNCTION:CT",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4213: X509_VERIFY_PARAM_set_inh_flags         4174 1_1_0d EXIST::FUNCTION:",
          "4214: X509_VERIFY_PARAM_get_inh_flags         4175 1_1_0d EXIST::FUNCTION:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "90078aa018ca13cf80d7ccaaa15a8360631b5110",
      "candidate_info": {
        "commit_hash": "90078aa018ca13cf80d7ccaaa15a8360631b5110",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/90078aa018ca13cf80d7ccaaa15a8360631b5110",
        "files": [
          "crypto/threads_pthread.c"
        ],
        "message": "Compile fix on platforms with missing pthread_rwlock_t.\n\nFix compilation on platforms with missing pthread_rwlock_t implementation by replacing it with pthread_mutex_t. An example of such platform can be Android OS 2.0 - 2.1, API level 5 (Eclair), Android NDK platform - android-5 where pthread_rwlock_t is not implemented and is missing in pthread.h.\n\nIn case of missing pthread_rwlock_t implementation CRYPTO_RWLOCK will work as exclusive lock in write-only mode of pthread_rwlock_t lock.\n\nThe implementation based on pthread_mutex_t must be using PTHREAD_MUTEX_RECURSIVE mode to be compatible with recursive behavior of pthread_rwlock_rdlock.\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1981)\n(cherry picked from commit 2accf3f7e013c3d02312afc27cc2edbd1f149db3)",
        "before_after_code_files": [
          "crypto/threads_pthread.c||crypto/threads_pthread.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/threads_pthread.c||crypto/threads_pthread.c": [
          "File: crypto/threads_pthread.c -> crypto/threads_pthread.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #if defined(OPENSSL_THREADS) && !defined(CRYPTO_TDEBUG) && !defined(OPENSSL_SYS_WINDOWS)",
          "14: CRYPTO_RWLOCK *CRYPTO_THREAD_lock_new(void)",
          "15: {",
          "16:     CRYPTO_RWLOCK *lock = OPENSSL_zalloc(sizeof(pthread_rwlock_t));",
          "17:     if (lock == NULL)",
          "18:         return NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: #ifdef PTHREAD_RWLOCK_INITIALIZER",
          "15:     #define OPENSSL_THREADS_HAVE_PTHREAD_RWLOCK",
          "16: #endif",
          "20: #ifdef OPENSSL_THREADS_HAVE_PTHREAD_RWLOCK",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21:         OPENSSL_free(lock);",
          "22:         return NULL;",
          "23:     }",
          "25:     return lock;",
          "26: }",
          "28: int CRYPTO_THREAD_read_lock(CRYPTO_RWLOCK *lock)",
          "29: {",
          "30:     if (pthread_rwlock_rdlock(lock) != 0)",
          "31:         return 0;",
          "33:     return 1;",
          "34: }",
          "36: int CRYPTO_THREAD_write_lock(CRYPTO_RWLOCK *lock)",
          "37: {",
          "38:     if (pthread_rwlock_wrlock(lock) != 0)",
          "39:         return 0;",
          "41:     return 1;",
          "42: }",
          "44: int CRYPTO_THREAD_unlock(CRYPTO_RWLOCK *lock)",
          "45: {",
          "46:     if (pthread_rwlock_unlock(lock) != 0)",
          "47:         return 0;",
          "49:     return 1;",
          "50: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: #else",
          "30:     CRYPTO_RWLOCK *lock = OPENSSL_zalloc(sizeof(pthread_mutex_t));",
          "31:     if (lock == NULL)",
          "32:         return NULL;",
          "34:     pthread_mutexattr_t attr;",
          "35:     pthread_mutexattr_init(&attr);",
          "36:     pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_RECURSIVE);",
          "38:     if (pthread_mutex_init(lock, &attr) != 0) {",
          "39:         pthread_mutexattr_destroy(&attr);",
          "40:         OPENSSL_free(lock);",
          "41:         return NULL;",
          "42:     }",
          "44:     pthread_mutexattr_destroy(&attr);",
          "45: #endif",
          "52: #ifdef OPENSSL_THREADS_HAVE_PTHREAD_RWLOCK",
          "55: #else",
          "56:     if (pthread_mutex_lock(lock) != 0)",
          "57:         return 0;",
          "58: #endif",
          "65: #ifdef OPENSSL_THREADS_HAVE_PTHREAD_RWLOCK",
          "68: #else",
          "69:     if (pthread_mutex_lock(lock) != 0)",
          "70:         return 0;",
          "71: #endif",
          "78: #ifdef OPENSSL_THREADS_HAVE_PTHREAD_RWLOCK",
          "81: #else",
          "82:     if (pthread_mutex_unlock(lock) != 0)",
          "83:         return 0;",
          "84: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54:     if (lock == NULL)",
          "55:         return;",
          "57:     pthread_rwlock_destroy(lock);",
          "58:     OPENSSL_free(lock);",
          "60:     return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94: #ifdef OPENSSL_THREADS_HAVE_PTHREAD_RWLOCK",
          "96: #else",
          "97:     pthread_mutex_destroy(lock);",
          "98: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ffb1e659b2546cb704ef56ae01176b9062ef1c6f",
      "candidate_info": {
        "commit_hash": "ffb1e659b2546cb704ef56ae01176b9062ef1c6f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/ffb1e659b2546cb704ef56ae01176b9062ef1c6f",
        "files": [
          "CHANGES",
          "NEWS",
          "README",
          "include/openssl/opensslv.h"
        ],
        "message": "Prepare for 1.1.0f-dev\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "include/openssl/opensslv.h||include/openssl/opensslv.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/openssl/opensslv.h||include/openssl/opensslv.h": [
          "File: include/openssl/opensslv.h -> include/openssl/opensslv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: # ifdef OPENSSL_FIPS",
          "45: # else",
          "47: # endif",
          "",
          "[Removed Lines]",
          "42: # define OPENSSL_VERSION_NUMBER  0x1010005fL",
          "44: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0e-fips  16 Feb 2017\"",
          "46: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0e  16 Feb 2017\"",
          "",
          "[Added Lines]",
          "42: # define OPENSSL_VERSION_NUMBER  0x10100060L",
          "44: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0f-fips-dev  xx XXX xxxx\"",
          "46: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0f-dev  xx XXX xxxx\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0453163e9a9052884cce288ff3e2acb77725a239",
      "candidate_info": {
        "commit_hash": "0453163e9a9052884cce288ff3e2acb77725a239",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/0453163e9a9052884cce288ff3e2acb77725a239",
        "files": [
          "CHANGES",
          "NEWS",
          "README",
          "include/openssl/opensslv.h"
        ],
        "message": "Prepare for 1.1.0e release\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "include/openssl/opensslv.h||include/openssl/opensslv.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/openssl/opensslv.h||include/openssl/opensslv.h": [
          "File: include/openssl/opensslv.h -> include/openssl/opensslv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: # ifdef OPENSSL_FIPS",
          "45: # else",
          "47: # endif",
          "",
          "[Removed Lines]",
          "42: # define OPENSSL_VERSION_NUMBER  0x10100050L",
          "44: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0e-fips-dev  xx XXX xxxx\"",
          "46: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0e-dev  xx XXX xxxx\"",
          "",
          "[Added Lines]",
          "42: # define OPENSSL_VERSION_NUMBER  0x1010005fL",
          "44: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0e-fips  16 Feb 2017\"",
          "46: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0e  16 Feb 2017\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "256315dee11b187bc0390d75082f0231c4263eac",
      "candidate_info": {
        "commit_hash": "256315dee11b187bc0390d75082f0231c4263eac",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/256315dee11b187bc0390d75082f0231c4263eac",
        "files": [
          "test/recipes/80-test_ssl_old.t"
        ],
        "message": "Rework how protocol specific ciphers in 80-test_ssl_old.t are picked out\n\nThe code to do this incorrectly assumed that the protocol version\ncould be used as a valid cipher suite  for the 'openssl cipher'\ncommand.  While this is true in some cases, that isn't something to be\ntrusted.  Replace that assumption with code that takes the full\n'openssl ciphers' command output and parses it to find the ciphers we\nlook for.\n\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2956)\n(cherry picked from commit 9ea6d56d044a95459e563abdc85aed26149e6ee9)",
        "before_after_code_files": [
          "test/recipes/80-test_ssl_old.t||test/recipes/80-test_ssl_old.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/recipes/80-test_ssl_old.t||test/recipes/80-test_ssl_old.t": [
          "File: test/recipes/80-test_ssl_old.t -> test/recipes/80-test_ssl_old.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "445:         }",
          "447:  my @protocols = ();",
          "461:         plan skip_all => \"None of the ciphersuites to test are available in this OpenSSL build\"",
          "464:         # The count of protocols is because in addition to the ciphersuits",
          "465:         # we got above, we're running a weak DH test for each protocol",
          "469:      note \"Testing ciphersuites for $protocol\";",
          "470:      foreach my $cipher (@{$ciphersuites{$protocol}}) {",
          "472:                     note \"*****SKIPPING $protocol $cipher\";",
          "473:                     ok(1);",
          "474:                 } else {",
          "",
          "[Removed Lines]",
          "448:  # FIXME: I feel unsure about the following line, is that really just TLSv1.2, or is it all of the SSLv3/TLS protocols?",
          "449:         push(@protocols, \"TLSv1.2\") unless $no_tls1_2;",
          "450:         push(@protocols, \"SSLv3\") unless $no_ssl3;",
          "451:  my $protocolciphersuitcount = 0;",
          "452:  my %ciphersuites =",
          "453:      map { my @c =",
          "454:         map { split(/:/, $_) }",
          "455:         run(app([\"openssl\", \"ciphers\", \"${_}:$ciphers\"]),",
          "456:                           capture => 1);",
          "457:     map { s/\\R//; } @c;  # chomp @c;",
          "458:     $protocolciphersuitcount += scalar @c;",
          "459:     $_ => [ @c ] } @protocols;",
          "462:             if $protocolciphersuitcount + scalar(@protocols) == 0;",
          "466:  plan tests => $protocolciphersuitcount + scalar(@protocols);",
          "468:  foreach my $protocol (@protocols) {",
          "471:                 if ($protocol eq \"SSLv3\" && $cipher =~ /ECDH/ ) {",
          "",
          "[Added Lines]",
          "448:  # We only use the flags that ssltest_old understands",
          "449:  push @protocols, \"-tls1_2\" unless $no_tls1_2;",
          "450:  push @protocols, \"-tls1\" unless $no_tls1;",
          "451:  push @protocols, \"-ssl3\" unless $no_ssl3;",
          "452:  my $protocolciphersuitecount = 0;",
          "453:  my %ciphersuites = ();",
          "454:  foreach my $protocol (@protocols) {",
          "455:      $ciphersuites{$protocol} =",
          "456:   [ map { s|\\R||; split(/:/, $_) }",
          "457:     run(app([\"openssl\", \"ciphers\", \"-s\", $protocol,",
          "458:       \"ALL:$ciphers\"]), capture => 1) ];",
          "459:      $protocolciphersuitecount += scalar @{$ciphersuites{$protocol}};",
          "460:  }",
          "463:             if $protocolciphersuitecount + scalar(keys %ciphersuites) == 0;",
          "467:  plan tests => $protocolciphersuitecount + scalar(keys %ciphersuites);",
          "469:  foreach my $protocol (sort keys %ciphersuites) {",
          "472:                 if ($protocol eq \"-ssl3\" && $cipher =~ /ECDH/ ) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}