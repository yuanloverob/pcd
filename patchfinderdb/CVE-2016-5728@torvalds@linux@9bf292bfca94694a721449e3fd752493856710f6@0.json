{
  "cve_id": "CVE-2016-5728",
  "cve_desc": "Race condition in the vop_ioctl function in drivers/misc/mic/vop/vop_vringh.c in the MIC VOP driver in the Linux kernel before 4.6.1 allows local users to obtain sensitive information from kernel memory or cause a denial of service (memory corruption and system crash) by changing a certain header, aka a \"double fetch\" vulnerability.",
  "repo": "torvalds/linux",
  "patch_hash": "9bf292bfca94694a721449e3fd752493856710f6",
  "patch_info": {
    "commit_hash": "9bf292bfca94694a721449e3fd752493856710f6",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/9bf292bfca94694a721449e3fd752493856710f6",
    "files": [
      "drivers/misc/mic/vop/vop_vringh.c"
    ],
    "message": "misc: mic: Fix for double fetch security bug in VOP driver\n\nThe MIC VOP driver does two successive reads from user space to read a\nvariable length data structure. Kernel memory corruption can result if\nthe data structure changes between the two reads. This patch disallows\nthe chance of this happening.\n\nBugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=116651\nReported by: Pengfei Wang <wpengfeinudt@gmail.com>\nReviewed-by: Sudeep Dutt <sudeep.dutt@intel.com>\nSigned-off-by: Ashutosh Dixit <ashutosh.dixit@intel.com>\nCc: stable <stable@vger.kernel.org>\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
    "before_after_code_files": [
      "drivers/misc/mic/vop/vop_vringh.c||drivers/misc/mic/vop/vop_vringh.c"
    ]
  },
  "patch_diff": {
    "drivers/misc/mic/vop/vop_vringh.c||drivers/misc/mic/vop/vop_vringh.c": [
      "File: drivers/misc/mic/vop/vop_vringh.c -> drivers/misc/mic/vop/vop_vringh.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "945:    ret = -EFAULT;",
      "946:    goto free_ret;",
      "947:   }",
      "948:   mutex_lock(&vdev->vdev_mutex);",
      "949:   mutex_lock(&vi->vop_mutex);",
      "950:   ret = vop_virtio_add_device(vdev, dd_config);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "949:   if (memcmp(&dd, dd_config, sizeof(dd))) {",
      "950:    ret = -EINVAL;",
      "951:    goto free_ret;",
      "952:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "82dc4afd7e65455464f0fc2fe6976efde54fe451",
      "candidate_info": {
        "commit_hash": "82dc4afd7e65455464f0fc2fe6976efde54fe451",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/82dc4afd7e65455464f0fc2fe6976efde54fe451",
        "files": [
          "drivers/misc/mic/vop/vop_vringh.c"
        ],
        "message": "misc: mic: Fix for double fetch security bug in VOP driver\n\nThe MIC VOP driver does two successive reads from user space to read a\nvariable length data structure. Kernel memory corruption can result if\nthe data structure changes between the two reads. This patch disallows\nthe chance of this happening.\n\nBugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=116651\nReported by: Pengfei Wang <wpengfeinudt@gmail.com>\nReviewed-by: Sudeep Dutt <sudeep.dutt@intel.com>\nSigned-off-by: Ashutosh Dixit <ashutosh.dixit@intel.com>\nCc: stable <stable@vger.kernel.org>\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
        "before_after_code_files": [
          "drivers/misc/mic/vop/vop_vringh.c||drivers/misc/mic/vop/vop_vringh.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "drivers/misc/mic/vop/vop_vringh.c||drivers/misc/mic/vop/vop_vringh.c"
          ],
          "candidate": [
            "drivers/misc/mic/vop/vop_vringh.c||drivers/misc/mic/vop/vop_vringh.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/misc/mic/vop/vop_vringh.c||drivers/misc/mic/vop/vop_vringh.c": [
          "File: drivers/misc/mic/vop/vop_vringh.c -> drivers/misc/mic/vop/vop_vringh.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "945:    ret = -EFAULT;",
          "946:    goto free_ret;",
          "947:   }",
          "948:   mutex_lock(&vdev->vdev_mutex);",
          "949:   mutex_lock(&vi->vop_mutex);",
          "950:   ret = vop_virtio_add_device(vdev, dd_config);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "949:   if (memcmp(&dd, dd_config, sizeof(dd))) {",
          "950:    ret = -EINVAL;",
          "951:    goto free_ret;",
          "952:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}