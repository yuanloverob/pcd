{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f7e74904ccd2ed0f6c359ec44709446025b2b110",
      "candidate_info": {
        "commit_hash": "f7e74904ccd2ed0f6c359ec44709446025b2b110",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f7e74904ccd2ed0f6c359ec44709446025b2b110",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test1.c",
          "test/dbfuzz001.test"
        ],
        "message": "Add the \"decode_hexdb\" TCL command to testfixture.  Add the dbfuzz001.test module to demonstration how to use decode_hexdb to deserialize a dbtotxt database description for use in a corruption test.\n\nFossilOrigin-Name: 1f583c53f3b7318c69f6e235934d97ef9493278feeab0837217076d7d071c35b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test1.c||src/test1.c",
          "test/dbfuzz001.test||test/dbfuzz001.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7ffa9858162774cba03a565a7b65135d9e8bfea726af1a29de6898f66c4b1261",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7641:   }",
          "7642: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7653: static int SQLITE_TCLAPI test_decode_hexdb(",
          "7654:   void * clientData,",
          "7655:   Tcl_Interp *interp,",
          "7656:   int objc,",
          "7657:   Tcl_Obj *CONST objv[]",
          "7658: ){",
          "7659:   const char *zIn = 0;",
          "7660:   unsigned char *a = 0;",
          "7661:   int n = 0;",
          "7662:   int lineno = 0;",
          "7663:   int i, iNext;",
          "7664:   int iOffset = 0;",
          "7665:   int j, k;",
          "7666:   int rc;",
          "7667:   unsigned char x[16];",
          "7668:   if( objc!=2 ){",
          "7669:     Tcl_WrongNumArgs(interp, 1, objv, \"HEXDB\");",
          "7670:     return TCL_ERROR;",
          "7671:   }",
          "7672:   zIn = Tcl_GetString(objv[1]);",
          "7673:   for(i=0; zIn[i]; i=iNext){",
          "7674:     lineno++;",
          "7675:     for(iNext=i; zIn[iNext] && zIn[iNext]!='\\n'; iNext++){}",
          "7676:     if( zIn[iNext]=='\\n' ) iNext++;",
          "7677:     while( zIn[i]==' ' || zIn[i]=='\\t' ){ i++; }",
          "7678:     if( a==0 ){",
          "7679:       int pgsz;",
          "7680:       rc = sscanf(zIn+i, \"| size %d pagesize %d\", &n, &pgsz);",
          "7681:       if( rc!=2 ) continue;",
          "7682:       if( n<512 ){",
          "7683:         Tcl_AppendResult(interp, \"bad 'size' field\", (void*)0);",
          "7684:         return TCL_ERROR;",
          "7685:       }",
          "7686:       a = malloc( n );",
          "7687:       if( a==0 ){",
          "7688:         Tcl_AppendResult(interp, \"out of memory\", (void*)0);",
          "7689:         return TCL_ERROR;",
          "7690:       }",
          "7691:       memset(a, 0, n);",
          "7692:       continue;",
          "7693:     }",
          "7694:     rc = sscanf(zIn+i, \"| page %d offset %d\", &j, &k);",
          "7695:     if( rc==2 ){",
          "7696:       iOffset = k;",
          "7697:       continue;",
          "7698:     }",
          "7699:     rc = sscanf(zIn+i,\"| %d: %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx\"",
          "7700:                       \"  %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx\",",
          "7701:                 &j, &x[0], &x[1], &x[2], &x[3], &x[4], &x[5], &x[6], &x[7],",
          "7702:                 &x[8], &x[9], &x[10], &x[11], &x[12], &x[13], &x[14], &x[15]);",
          "7703:     if( rc==17 ){",
          "7704:       k = iOffset+j;",
          "7705:       if( k+16<=n ){",
          "7706:         memcpy(a+k, x, 16);",
          "7707:       }",
          "7708:       continue;",
          "7709:     }",
          "7710:   }",
          "7711:   Tcl_SetObjResult(interp, Tcl_NewByteArrayObj(a, n));",
          "7712:   free(a);",
          "7713:   return TCL_OK;",
          "7714: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7920:      { \"atomic_batch_write\",      test_atomic_batch_write, 0 },",
          "7921:      { \"sqlite3_mmap_warm\",       test_mmap_warm,          0 },",
          "7922:      { \"sqlite3_config_sorterref\", test_config_sorterref,   0 },",
          "7923:   };",
          "7924:   static int bitmask_size = sizeof(Bitmask)*8;",
          "7925:   static int longdouble_size = sizeof(LONGDOUBLE_TYPE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7996:      { \"decode_hexdb\",             test_decode_hexdb,       0 },",
          "",
          "---------------"
        ],
        "test/dbfuzz001.test||test/dbfuzz001.test": [
          "File: test/dbfuzz001.test -> test/dbfuzz001.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2012-12-13",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "12: # Test cases for corrupt database files.",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "17: ifcapable !deserialize {",
          "18:   finish_test",
          "19:   return",
          "20: }",
          "22: do_test dbfuzz001-100 {",
          "23:   sqlite3 db {}",
          "24:   db deserialize [decode_hexdb {",
          "25:     | size 5632 pagesize 512 filename c4.db",
          "26:     | page 1 offset 0",
          "27:     |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "28:     |     16: 02 00 01 01 00 40 20 20 00 00 00 02 00 00 00 0b   .....@  ........",
          "29:     |     32: 00 00 00 06 00 00 00 01 00 00 00 28 00 00 00 04   ...........(....",
          "30:     |     48: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "31:     |     80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02   ................",
          "32:     |     96: 00 2e 30 38 0d 00 00 00 06 01 06 00 01 da 01 b0   ..08............",
          "33:     |    112: 01 56 01 86 01 2a 01 06 00 00 00 00 00 00 00 00   .V...*..........",
          "34:     |    256: 00 00 00 00 00 00 22 07 06 17 11 11 01 31 74 61   ......\"......1ta",
          "35:     |    272: 62 6c 65 74 34 74 34 07 43 52 45 41 54 45 20 54   blet4t4.CREATE T",
          "36:     |    288: 41 42 4c 45 20 74 34 28 78 29 2a 06 06 17 13 11   ABLE t4(x)*.....",
          "37:     |    304: 01 3f 69 6e 64 65 78 00 00 00 00 00 00 00 00 00   .?index.........",
          "38:     |    336: 20 74 33 28 78 29 2e 04 06 17 15 11 01 45 69 6e    t3(x).......Ein",
          "39:     |    352: 64 65 78 74 32 63 64 74 32 05 43 52 45 41 54 45   dext2cdt2.CREATE",
          "40:     |    368: 20 49 4e 44 45 58 20 74 32 63 64 20 4f 4e 20 74    INDEX t2cd ON t",
          "41:     |    384: 32 28 63 2c 64 29 28 05 06 17 11 11 01 3d 74 61   2(c,d)(......=ta",
          "42:     |    400: 62 6c 65 74 33 74 33 04 43 52 45 41 54 45 20 54   blet3t3.CREATE T",
          "43:     |    416: 41 42 4c 45 20 74 33 28 63 2c 78 2c 65 2c 66 29   ABLE t3(c,x,e,f)",
          "44:     |    432: 28 02 06 17 11 11 01 3d 74 61 62 6c 65 74 32 74   (......=tablet2t",
          "45:     |    448: 32 03 43 52 45 41 54 45 20 54 41 42 4c 45 20 74   2.CREATE TABLE t",
          "46:     |    464: 32 28 63 2c 64 2c 65 2c 66 29 24 01 06 17 11 11   2(c,d,e,f)$.....",
          "47:     |    480: 01 35 74 61 62 6c 65 74 31 74 31 02 43 52 45 41   .5tablet1t1.CREA",
          "48:     |    496: 54 45 20 54 41 42 4c 45 20 74 31 28 61 2c 62 29   TE TABLE t1(a,b)",
          "49:     | page 2 offset 512",
          "50:     |      0: 0d 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00   ................",
          "51:     | page 3 offset 1024",
          "52:     |      0: 0d 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00   ................",
          "53:     | page 4 offset 1536",
          "54:     |      0: 05 00 00 00 03 01 f1 00 00 00 00 0b 01 fb 01 f6   ................",
          "55:     |     16: 01 f1 00 16 00 00 09 06 05 01 01 01 01 04 04 03   ................",
          "56:     |     32: 03 07 05 05 01 01 09 09 02 02 19 04 05 17 17 17   ................",
          "57:     |     48: 17 73 65 76 65 6e 65 69 67 68 74 65 69 67 68 74   .seveneighteight",
          "58:     |     64: 73 65 76 65 6e 25 03 05 07 07 07 07 40 14 00 00   seven%......@...",
          "59:     |     80: 00 00 00 00 40 18 00 00 00 00 00 00 40 18 00 00   ....@.......@...",
          "60:     |     96: 00 00 00 00 40 14 00 00 00 00 00 00 09 02 05 01   ....@...........",
          "61:     |    112: 01 01 01 03 04 04 03 07 01 05 09 01 01 09 02 02   ................",
          "62:     |    352: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1a   ................",
          "63:     |    496: 00 00 00 00 0a 3e 00 00 00 09 21 00 00 00 08 06   .....>....!.....",
          "64:     | page 5 offset 2048",
          "65:     |      0: 0a 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00   ................",
          "66:     | page 7 offset 3072",
          "67:     |      0: 0d 00 00 00 08 01 c2 00 01 fb 01 f6 01 f1 01 ec   ................",
          "68:     |     16: 01 e0 01 d4 01 cb 01 c2 00 00 00 00 00 00 00 00   ................",
          "69:     |     96: 00 00 00 00 13 00 00 00 00 00 00 00 00 00 00 00   ................",
          "70:     |    224: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02   ................",
          "71:     |    288: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03   ................",
          "72:     |    448: 00 00 07 08 02 17 65 69 67 68 74 07 07 02 17 65   ......eight....e",
          "73:     |    464: 69 67 68 74 0a 06 02 07 40 18 00 00 00 00 00 00   ight....@.......",
          "74:     |    480: 0a 05 02 07 40 18 00 00 00 00 00 00 03 04 02 01   ....@...........",
          "75:     |    496: 04 03 03 02 01 04 03 02 02 01 02 03 01 02 01 02   ................",
          "76:     | page 8 offset 3584",
          "77:     |      0: 0d 00 21 00 01 00 16 00 00 16 00 16 00 16 00 16   ..!.............",
          "78:     |     16: 00 16 00 16 00 00 09 06 05 01 01 01 01 04 04 03   ................",
          "79:     |     32: 03 00 00 00 5f 01 09 09 02 02 00 00 00 56 17 17   ...._........V..",
          "80:     |     48: 17 73 65 76 65 6e 65 69 67 68 74 65 69 67 68 74   .seveneighteight",
          "81:     |     64: 73 65 76 65 6e 00 00 00 3b 07 07 07 40 14 00 00   seven...;...@...",
          "82:     |     80: 00 00 00 00 40 18 00 00 00 00 00 00 40 18 00 00   ....@.......@...",
          "83:     |     96: 00 00 00 00 40 14 00 00 00 00 00 00 00 00 00 14   ....@...........",
          "84:     |    112: 01 01 01 03 04 04 03 00 00 00 09 01 01 09 02 02   ................",
          "85:     |    352: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1a   ................",
          "86:     | page 9 offset 4096",
          "87:     |      0: 0d 00 00 00 1b 00 47 00 01 d9 01 be 01 af 01 a0   ......G.........",
          "88:     |     16: 01 91 01 82 01 73 01 64 01 55 01 46 01 37 01 28   .....s.d.U.F.7.(",
          "89:     |     32: 01 19 01 0a 00 fb 00 ec 00 dd 00 ce 00 bf 00 b0   ................",
          "90:     |     48: 00 a1 00 92 00 83 00 74 00 65 00 56 00 47 00 00   .......t.e.V.G..",
          "91:     |     64: 00 00 00 00 00 00 00 0d 21 00 00 48 01 54 00 01   ........!..H.T..",
          "92:     |     80: f7 01 ec 01 c5 01 0d 20 00 00 48 01 54 00 01 f7   ....... ..H.T...",
          "93:     |     96: 01 ec 01 c5 01 0d 1f 00 00 48 01 54 00 01 f7 01   .........H.T....",
          "94:     |    112: ec 01 c5 01 0d 1e 00 00 48 01 54 00 01 f7 01 ec   ........H.T.....",
          "95:     |    128: 01 c5 01 0d 1d 00 00 48 01 54 00 01 f7 01 ec 01   .......H.T......",
          "96:     |    144: c5 01 0d 1c 00 00 48 01 54 00 01 f7 01 ec 01 c5   ......H.T.......",
          "97:     |    160: 01 0d 1b 00 00 48 01 54 00 01 f7 01 ec 01 c5 01   .....H.T........",
          "98:     |    176: 0d 1a 00 00 48 01 54 00 01 f7 01 ec 01 c5 01 0d   ....H.T.........",
          "99:     |    192: 19 00 00 48 01 54 00 01 f7 01 ec 01 c5 01 0d 18   ...H.T..........",
          "100:     |    208: 00 00 48 01 54 00 01 f7 01 ec 01 c5 01 0d 17 00   ..H.T...........",
          "101:     |    224: 00 48 01 54 00 01 f7 01 ec 01 c5 01 0d 16 00 00   .H.T............",
          "102:     |    240: 48 01 54 00 01 f7 01 ec 01 c5 01 0d 15 00 00 48   H.T............H",
          "103:     |    256: 01 54 00 01 f7 01 ec 01 c5 01 0d 14 00 00 48 01   .T............H.",
          "104:     |    272: 54 00 01 f7 01 ec 01 c5 01 0d 13 00 00 48 01 54   T............H.T",
          "105:     |    288: 00 01 f7 01 ec 01 c5 01 0d 12 00 00 48 01 54 00   ............H.T.",
          "106:     |    304: 01 f7 01 ec 01 c5 01 0d 11 00 00 48 01 54 00 01   ...........H.T..",
          "107:     |    320: f7 01 ec 01 c5 01 0d 10 00 00 48 01 54 00 01 f7   ..........H.T...",
          "108:     |    336: 01 ec 01 c5 01 0d 0f 00 00 48 01 54 00 01 f7 01   .........H.T....",
          "109:     |    352: ec 01 c5 01 0d 0e 00 00 48 01 54 00 01 f7 01 ec   ........H.T.....",
          "110:     |    368: 01 c5 01 0d 0d 00 00 48 01 54 00 01 f7 01 ec 01   .......H.T......",
          "111:     |    384: c5 01 0d 0c 00 00 48 01 54 00 01 f7 01 ec 01 c5   ......H.T.......",
          "112:     |    400: 01 0d 0b 00 00 48 01 54 00 01 f7 01 ec 01 c5 01   .....H.T........",
          "113:     |    416: 0d 0a 00 00 48 01 54 00 01 f7 01 ec 01 c5 01 0d   ....H.T.........",
          "114:     |    432: 09 00 00 48 01 54 00 01 f7 01 ec 01 c5 01 19 08   ...H.T..........",
          "115:     |    448: 05 17 17 17 17 65 69 67 68 74 65 69 67 68 74 73   .....eighteights",
          "116:     |    464: 65 76 65 6e 73 65 76 65 6e 25 07 05 07 07 07 07   evenseven%......",
          "117:     |    480: 40 18 00 00 00 00 00 00 40 18 00 00 00 00 00 00   @.......@.......",
          "118:     |    496: 40 14 00 00 00 00 00 00 40 14 00 00 00 00 00 00   @.......@.......",
          "119:     | page 10 offset 4608",
          "120:     |      0: 0d 00 00 00 1d 00 4d 00 01 f1 01 e2 01 d3 01 c4   ......M.........",
          "121:     |     16: 01 b5 01 a6 01 97 01 88 01 79 01 6a 01 5b 01 4c   .........y.j.[.L",
          "122:     |     32: 01 3d 01 2e 01 1f 01 10 01 01 00 f2 00 e3 00 d4   .=..............",
          "123:     |     48: 00 c5 00 b6 00 a7 00 98 00 89 00 7a 00 6b 00 5c   ...........z.k.\\",
          "124:     |     64: 00 4d 00 00 00 00 00 00 00 00 00 00 00 0d 3e 00   .M............>.",
          "125:     |     80: 00 48 01 54 00 01 f7 01 ec 01 c5 01 0d 3d 00 00   .H.T.........=..",
          "126:     |     96: 48 01 54 00 01 f7 01 ec 01 c5 01 0d 3c 00 00 48   H.T.........<..H",
          "127:     |    112: 01 54 00 01 f7 01 ec 01 c5 01 0d 3b 00 00 48 01   .T.........;..H.",
          "128:     |    128: 54 00 01 f7 01 ec 01 c5 01 0d 3a 00 00 48 01 54   T.........:..H.T",
          "129:     |    144: 00 01 f7 01 ec 01 c5 01 0d 39 00 00 48 01 54 00   .........9..H.T.",
          "130:     |    160: 01 f7 01 ec 01 c5 01 0d 38 00 00 48 01 54 00 01   ........8..H.T..",
          "131:     |    176: f7 01 ec 01 c5 01 0d 37 00 00 48 01 54 00 01 f7   .......7..H.T...",
          "132:     |    192: 01 ec 01 c5 01 0d 36 00 00 48 01 54 00 01 f7 01   ......6..H.T....",
          "133:     |    208: ec 01 c5 01 0d 35 00 00 48 01 54 00 01 f7 01 ec   .....5..H.T.....",
          "134:     |    224: 01 c5 01 0d 34 00 00 48 01 54 00 01 f7 01 ec 01   ....4..H.T......",
          "135:     |    240: c5 01 0d 33 00 00 48 01 54 00 01 f7 01 ec 01 c5   ...3..H.T.......",
          "136:     |    256: 01 0d 32 00 00 48 01 54 00 01 f7 01 ec 01 c5 01   ..2..H.T........",
          "137:     |    272: 0d 31 00 00 48 01 54 00 01 f7 01 ec 01 c5 01 0d   .1..H.T.........",
          "138:     |    288: 30 00 00 48 01 54 00 01 f7 01 ec 01 c5 01 0d 2f   0..H.T........./",
          "139:     |    304: 00 00 48 01 54 00 01 f7 01 ec 01 c5 01 0d 2e 00   ..H.T...........",
          "140:     |    320: 00 48 01 54 00 01 f7 01 ec 01 c5 01 0d 2d 00 00   .H.T.........-..",
          "141:     |    336: 48 01 54 00 01 f7 01 ec 01 c5 01 0d 2c 00 00 48   H.T.........,..H",
          "142:     |    352: 01 54 00 01 f7 01 ec 01 c5 01 0d 2b 00 00 48 01   .T.........+..H.",
          "143:     |    368: 54 00 01 f7 01 ec 01 c5 01 0d 2a 00 00 48 01 54   T.........*..H.T",
          "144:     |    384: 00 01 f7 01 ec 01 c5 01 0d 29 00 00 48 01 54 00   .........)..H.T.",
          "145:     |    400: 01 f7 01 ec 01 c5 01 0d 28 00 00 48 01 54 00 01   ........(..H.T..",
          "146:     |    416: f7 01 ec 01 c5 01 0d 27 00 00 48 01 54 00 01 f7   .......'..H.T...",
          "147:     |    432: 01 ec 01 c5 01 0d 26 00 00 48 01 54 00 01 f7 01   ......&..H.T....",
          "148:     |    448: ec 01 c5 01 0d 25 00 00 48 01 54 00 01 f7 01 ec   .....%..H.T.....",
          "149:     |    464: 01 c5 01 0d 24 00 00 48 01 54 00 01 f7 01 ec 01   ....$..H.T......",
          "150:     |    480: c5 01 0d 23 00 00 48 01 54 00 01 f7 01 ec 01 c5   ...#..H.T.......",
          "151:     |    496: 01 0d 22 00 00 48 01 54 00 01 f7 01 ec 01 c5 01   ..\"..H.T........",
          "152:     | page 11 offset 5120",
          "153:     |      0: 0d 00 00 00 0a 01 6a 00 01 f1 01 e2 01 d3 01 c4   ......j.........",
          "154:     |     16: 01 b5 01 a6 01 97 01 88 01 79 01 6a 00 00 00 00   .........y.j....",
          "155:     |    352: 00 00 00 00 00 00 00 00 00 00 0d 48 00 00 48 01   ...........H..H.",
          "156:     |    368: 54 00 01 f7 01 ec 01 c5 01 0d 47 00 00 48 01 54   T.........G..H.T",
          "157:     |    384: 00 01 f7 01 ec 01 c5 01 0d 46 00 00 48 01 54 00   .........F..H.T.",
          "158:     |    400: 01 f7 01 ec 01 c5 01 0d 45 00 00 48 01 54 00 01   ........E..H.T..",
          "159:     |    416: f7 01 ec 01 c5 01 0d 44 00 00 48 01 54 00 01 f7   .......D..H.T...",
          "160:     |    432: 01 ec 01 c5 01 0d 43 00 00 48 01 54 00 01 f7 01   ......C..H.T....",
          "161:     |    448: ec 01 c5 01 0d 42 00 00 48 01 54 00 01 f7 01 ec   .....B..H.T.....",
          "162:     |    464: 01 c5 01 0d 41 00 00 48 01 54 00 01 f7 01 ec 01   ....A..H.T......",
          "163:     |    480: c5 01 0d 40 00 00 48 01 54 00 01 f7 01 ec 01 c5   ...@..H.T.......",
          "164:     |    496: 01 0d 3f 00 00 48 01 54 00 01 f7 01 ec 01 c5 01   ..?..H.T........",
          "165:     | end c4.db",
          "166:   }]",
          "167:   db eval {PRAGMA integrity_check}",
          "168: } {/Fragmentation of 384 bytes reported as 0 on page 8/}",
          "170: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c90653365027c505e13d45f2c8bc986306b24744",
      "candidate_info": {
        "commit_hash": "c90653365027c505e13d45f2c8bc986306b24744",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c90653365027c505e13d45f2c8bc986306b24744",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Improved comments on the VDBE branch coverage testing logic.  Fix the VDBE branch coverage measurement on the OP_MustBeInt opcode.\n\nFossilOrigin-Name: 8681750e855a020ee374cb9f973f701a72068e33f97d0101a4fab3a228e5ebda",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1fcf3307d37f0e8e0c8c54491c609b73c7add6eaa38409a41c7cd6614a877a19",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1734:   pIn1 = &aMem[pOp->p1];",
          "1735:   if( (pIn1->flags & MEM_Int)==0 ){",
          "1736:     applyAffinity(pIn1, SQLITE_AFF_NUMERIC, encoding);",
          "1738:     if( (pIn1->flags & MEM_Int)==0 ){",
          "1739:       if( pOp->p2==0 ){",
          "1740:         rc = SQLITE_MISMATCH;",
          "1741:         goto abort_due_to_error;",
          "",
          "[Removed Lines]",
          "1737:     VdbeBranchTaken((pIn1->flags&MEM_Int)==0, 2);",
          "",
          "[Added Lines]",
          "1758:       VdbeBranchTaken(1, 2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1744:       }",
          "1745:     }",
          "1746:   }",
          "1747:   MemSetTypeFlag(pIn1, MEM_Int);",
          "1748:   break;",
          "1749: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1767:   VdbeBranchTaken(0, 2);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bde3a4f680b7c99ae918aa0477e81541ebdafbe5",
      "candidate_info": {
        "commit_hash": "bde3a4f680b7c99ae918aa0477e81541ebdafbe5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bde3a4f680b7c99ae918aa0477e81541ebdafbe5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "Minor simplification to the changes from check-in [36c11ad51f].\n\nFossilOrigin-Name: 7bc8205dd9c1657c736a9c6a1a90dd9dad442accfbb77d296eaae2c09ab46bd1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 36c11ad51fe9ab1bde0b98d0ea9b8588e07d168cd8027486749372894941ad93",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1059:         x1 = pIdx->aiColumn[i];",
          "1060:         x2 = sqlite3TableColumnToStorage(pTab, x1);",
          "1061:         testcase( x1!=x2 );",
          "1063:       }",
          "1064:       sqlite3VdbeChangeP4(v, -1, (char*)ai, P4_INTARRAY);",
          "1065:     }",
          "",
          "[Removed Lines]",
          "1062:         if( pIdx->aiColumn[i]>=0 ) ai[x2+1] = i+1;",
          "",
          "[Added Lines]",
          "1062:         if( x1>=0 ) ai[x2+1] = i+1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8f4076223d248f0cbe6bfc5769f7574f1b0033e5",
      "candidate_info": {
        "commit_hash": "8f4076223d248f0cbe6bfc5769f7574f1b0033e5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8f4076223d248f0cbe6bfc5769f7574f1b0033e5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "test/altertab3.test"
        ],
        "message": "Fix an assert() failure that could occur in ALTER TABLE code when the schema contains a view that uses a CTE.\n\nFossilOrigin-Name: 75b04a4b0d2e65bfcd02cf4e0b6d8f1954957c590814a9b8f9a9ee2adc2ec022",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e01fdbf9f700e1bd9dd5283c65547d10d26ce4f4506d3cfef9e1087aecdc2305",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "733:   return WRC_Continue;",
          "734: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "740: static void renameWalkWith(Walker *pWalker, Select *pSelect){",
          "741:   if( pSelect->pWith ){",
          "742:     int i;",
          "743:     for(i=0; i<pSelect->pWith->nCte; i++){",
          "744:       Select *p = pSelect->pWith->a[i].pSelect;",
          "745:       NameContext sNC;",
          "746:       memset(&sNC, 0, sizeof(sNC));",
          "747:       sNC.pParse = pWalker->pParse;",
          "748:       sqlite3SelectPrep(sNC.pParse, p, &sNC);",
          "749:       sqlite3WalkSelect(pWalker, p);",
          "750:     }",
          "751:   }",
          "752: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "753:       sqlite3RenameTokenRemap(pParse, 0, (void*)pSrc->a[i].zName);",
          "754:     }",
          "755:   }",
          "756:   return WRC_Continue;",
          "757: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "775:   renameWalkWith(pWalker, p);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "819:   }",
          "820: }",
          "",
          "[Removed Lines]",
          "826: static void renameWalkWith(Walker *pWalker, Select *pSelect){",
          "827:   if( pSelect->pWith ){",
          "828:     int i;",
          "829:     for(i=0; i<pSelect->pWith->nCte; i++){",
          "830:       Select *p = pSelect->pWith->a[i].pSelect;",
          "831:       NameContext sNC;",
          "832:       memset(&sNC, 0, sizeof(sNC));",
          "833:       sNC.pParse = pWalker->pParse;",
          "834:       sqlite3SelectPrep(sNC.pParse, p, &sNC);",
          "835:       sqlite3WalkSelect(pWalker, p);",
          "836:     }",
          "837:   }",
          "838: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "411:   ALTER TABLE t1 RENAME TO t1x;",
          "412: } {1 {error in trigger r1: 1st ORDER BY term does not match any column in the result set}}",
          "415: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "414: #-------------------------------------------------------------------------",
          "415: reset_db",
          "416: do_execsql_test 19.0 {",
          "417:   CREATE TABLE a(a,h CONSTRAINT a UNIQUE ON CONFLICT FAIL,CONSTRAINT a);",
          "418: }",
          "420: foreach {tn v res} {",
          "421:   1 {",
          "422:     CREATE VIEW q AS SELECT 123",
          "424:       WINDOW x AS (",
          "425:         RANGE BETWEEN UNBOUNDED PRECEDING AND INDEXED() OVER(",
          "426:           PARTITION BY ( WITH x AS(VALUES(col1)) VALUES(453) )",
          "427:         )",
          "428:       FOLLOWING",
          "429:     )",
          "430:   } {1 {error in view q: no such column: col1}}",
          "432:   2 {",
          "433:     CREATE VIEW q AS SELECT",
          "434:     CAST(CAST(CAST(CAST(CAST(CAST(CAST(CAST(CAST(CAST(CAST(RIGHT",
          "435:     AS)AS)AS)AS)AS)AS)AS)AS)AS)AS)AS)WINDOW x AS(RANGE BETWEEN UNBOUNDED",
          "436:     PRECEDING AND INDEXED(*)OVER(PARTITION BY",
          "437:     CROSS,CROSS,NATURAL,sqlite_master(*)OVER a,(WITH a AS(VALUES(LEFT)UNION",
          "438:     VALUES(LEFT)UNION VALUES(LEFT)UNION VALUES(LEFT)UNION VALUES(LEFT)UNION",
          "439:     VALUES(LEFT)UNION VALUES(LEFT))VALUES(LEFT))IN",
          "440:     STORED,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT)*LEFT FOLLOWING)ORDER BY",
          "441:     LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT LIMIT",
          "442:     LEFT,INDEXED(*)OVER(PARTITION BY",
          "443:     CROSS,CROSS,CROSS,LEFT,INDEXED(*)OVER(PARTITION BY",
          "444:     CROSS,CROSS,CROSS),INDEXED(*)OVER(PARTITION BY",
          "445:     LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT),",
          "446:     LEFT,LEFT,INNER,CROSS,CROSS,CROSS,INNER,NATURAL ORDER BY",
          "447:     OUTER,NATURAL,NATURAL,NATURAL,NATURAL,NATURAL,NATURAL,NATURAL,INNER,",
          "448:     INNER,INNER NULLS LAST GROUPS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED",
          "449:     FOLLOWING);",
          "450:   } {1 {error in view q: no such column: LEFT}}",
          "452:   3 {",
          "453:     CREATE VIEW q AS SELECT 99 WINDOW x AS (RANGE BETWEEN UNBOUNDED PRECEDING",
          "454:     AND count(*)OVER(PARTITION BY (WITH a AS(VALUES(2),(x3))VALUES(0)))",
          "455:     FOLLOWING)ORDER BY x2,sum(1)OVER(PARTITION BY avg(5)OVER(PARTITION BY x1));",
          "456:   } {1 {error in view q: no such column: x3}}",
          "457: } {",
          "458:   do_execsql_test 19.$tn.1 \"",
          "459:     DROP VIEW IF EXISTS q;",
          "460:     $v",
          "461:   \" {}",
          "463:   do_catchsql_test 19.$tn.2 {",
          "464:     ALTER TABLE a RENAME TO g;",
          "465:   } $res",
          "466: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a2de66c6b4f7a89f55cfd4098d27f8b031e29229",
      "candidate_info": {
        "commit_hash": "a2de66c6b4f7a89f55cfd4098d27f8b031e29229",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a2de66c6b4f7a89f55cfd4098d27f8b031e29229",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Enhance the \".recover\" output in the shell to use double-quotes around table and column identifiers.\n\nFossilOrigin-Name: 846d2d2d2f7fd2e4178c70bc2b92f18941a7972fe88c0129035b7a253ed21785",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bfc29e62eff0ed00c153e18a27815f7e3ba316f46871e9645b84ab1e6709a392",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3977:   }",
          "3978: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3984: static void shellIdQuote(",
          "3985:   sqlite3_context *context,",
          "3986:   int argc,",
          "3987:   sqlite3_value **argv",
          "3988: ){",
          "3989:   const char *zName = (const char*)sqlite3_value_text(argv[0]);",
          "3990:   if( zName ){",
          "3991:     char *z = sqlite3_mprintf(\"\\\"%w\\\"\", zName);",
          "3992:     sqlite3_result_text(context, z, -1, sqlite3_free);",
          "3993:   }",
          "3994: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4153:                             shellEscapeCrnl, 0, 0);",
          "4154:     sqlite3_create_function(p->db, \"shell_int32\", 2, SQLITE_UTF8, 0,",
          "4155:                             shellInt32, 0, 0);",
          "4156: #ifndef SQLITE_NOHAVE_SYSTEM",
          "4157:     sqlite3_create_function(p->db, \"edit\", 1, SQLITE_UTF8, 0,",
          "4158:                             editFunc, 0, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4172:     sqlite3_create_function(p->db, \"shell_idquote\", 1, SQLITE_UTF8, 0,",
          "4173:                             shellIdQuote, 0, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6330:     sqlite3_stmt *pStmt = 0;",
          "6332:     rc = sqlite3_open(\"\", &dbtmp);",
          "6333:     if( rc==SQLITE_OK ){",
          "6334:       rc = sqlite3_exec(dbtmp, \"PRAGMA writable_schema = on\", 0, 0, 0);",
          "6335:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6351:     if( rc==SQLITE_OK ){",
          "6352:       sqlite3_create_function(dbtmp, \"shell_idquote\", 1, SQLITE_UTF8, 0,",
          "6353:                               shellIdQuote, 0, 0);",
          "6354:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6386:         }",
          "6387:       }",
          "6390:       pTab->azlCol = (char**)shellMalloc(&rc, sizeof(char*) * (nSqlCol+1));",
          "6391:       pTab->nCol = nSqlCol;",
          "6393:       if( bIntkey ){",
          "6395:       }else{",
          "6396:         pTab->azlCol[0] = shellMPrintf(&rc, \"\");",
          "6397:       }",
          "6398:       i = 1;",
          "6399:       shellPreparePrintf(dbtmp, &rc, &pStmt,",
          "6401:           \"  FILTER (WHERE cid!=%d) OVER (ORDER BY %s cid) \"",
          "6402:           \"FROM pragma_table_info(%Q)\",",
          "6403:           bIntkey ? \", \" : \"\", pTab->iPk,",
          "",
          "[Removed Lines]",
          "6389:       pTab->zQuoted = shellMPrintf(&rc, \"%Q\", zName);",
          "6394:         pTab->azlCol[0] = shellMPrintf(&rc, \"%Q\", zPk);",
          "6400:           \"SELECT %Q || group_concat(quote(name), ', ') \"",
          "",
          "[Added Lines]",
          "6411:       pTab->zQuoted = shellMPrintf(&rc, \"\\\"%w\\\"\", zName);",
          "6416:         pTab->azlCol[0] = shellMPrintf(&rc, \"\\\"%w\\\"\", zPk);",
          "6422:           \"SELECT %Q || group_concat(shell_idquote(name), ', ') \"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6512:     pTab = (RecoverTable*)shellMalloc(pRc, sizeof(RecoverTable));",
          "6513:     if( pTab ){",
          "6515:       pTab->nCol = nCol;",
          "6516:       pTab->iPk = -2;",
          "6517:       if( nCol>0 ){",
          "",
          "[Removed Lines]",
          "6514:       pTab->zQuoted = shellMPrintf(pRc, \"%Q\", zTab);",
          "",
          "[Added Lines]",
          "6536:       pTab->zQuoted = shellMPrintf(pRc, \"\\\"%w\\\"\", zTab);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6775:       if( pTab==0 ) break;",
          "6776:     }",
          "6779:       raw_printf(pState->out, \"DELETE FROM sqlite_sequence;\\n\");",
          "6780:     }",
          "6781:     sqlite3_bind_int(pPages, 1, iRoot);",
          "",
          "[Removed Lines]",
          "6778:     if( 0==sqlite3_stricmp(pTab->zQuoted, \"'sqlite_sequence'\") ){",
          "",
          "[Added Lines]",
          "6800:     if( 0==sqlite3_stricmp(pTab->zQuoted, \"\\\"sqlite_sequence\\\"\") ){",
          "",
          "---------------"
        ]
      }
    }
  ]
}