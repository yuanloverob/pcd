{
  "cve_id": "CVE-2018-8754",
  "cve_desc": "The libevt_record_values_read_event() function in libevt_record_values.c in libevt before 2018-03-17 does not properly check for out-of-bounds values of user SID data size, strings size, or data size. NOTE: the vendor has disputed this as described in libyal/libevt issue 5 on GitHub",
  "repo": "libyal/libevt",
  "patch_hash": "9d2cc3ca0a1612a6b271abcacffc2e3eea42925e",
  "patch_info": {
    "commit_hash": "9d2cc3ca0a1612a6b271abcacffc2e3eea42925e",
    "repo": "libyal/libevt",
    "commit_url": "https://github.com/libyal/libevt/commit/9d2cc3ca0a1612a6b271abcacffc2e3eea42925e",
    "files": [
      "configure.ac",
      "libevt.nuspec",
      "libevt/libevt_libfvalue.h",
      "libevt/libevt_record_values.c",
      "m4/libcdata.m4",
      "m4/libcsplit.m4",
      "m4/libfdata.m4",
      "runtests.sh"
    ],
    "message": "Applied updates and addition boundary checks for corrupted data",
    "before_after_code_files": [
      "configure.ac||configure.ac",
      "libevt.nuspec||libevt.nuspec",
      "libevt/libevt_libfvalue.h||libevt/libevt_libfvalue.h",
      "libevt/libevt_record_values.c||libevt/libevt_record_values.c",
      "m4/libcdata.m4||m4/libcdata.m4",
      "m4/libcsplit.m4||m4/libcsplit.m4",
      "m4/libfdata.m4||m4/libfdata.m4",
      "runtests.sh||runtests.sh"
    ]
  },
  "patch_diff": {
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_INIT(",
      "4:  [libevt],",
      "6:  [joachim.metz@gmail.com])",
      "8: AC_CONFIG_SRCDIR(",
      "",
      "[Removed Lines]",
      "5:  [20180125],",
      "",
      "[Added Lines]",
      "5:  [20180317],",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "48: dnl Check if wide character type should be enabled",
      "49: AX_COMMON_CHECK_ENABLE_WIDE_CHARACTER_TYPE",
      "51: dnl Check for type definitions",
      "52: AX_TYPES_CHECK_LOCAL",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "51: dnl Check if verbose output should be enabled",
      "52: AX_COMMON_CHECK_ENABLE_VERBOSE_OUTPUT",
      "54: dnl Check if debug output should be enabled",
      "55: AX_COMMON_CHECK_ENABLE_DEBUG_OUTPUT",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "146: dnl Check if evttools required headers and functions are available",
      "147: AX_EVTTOOLS_CHECK_LOCAL",
      "155: dnl Check if tests required headers and functions are available",
      "156: AX_TESTS_CHECK_LOCAL",
      "",
      "[Removed Lines]",
      "149: dnl Check if libevt should be build with verbose output",
      "150: AX_COMMON_CHECK_ENABLE_VERBOSE_OUTPUT",
      "152: dnl Check if libevt should be build with debug output",
      "153: AX_COMMON_CHECK_ENABLE_DEBUG_OUTPUT",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "libevt.nuspec||libevt.nuspec": [
      "File: libevt.nuspec -> libevt.nuspec",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: <package >",
      "3:   <metadata>",
      "4:     <id>libevt</id>",
      "6:     <authors>Joachim Metz</authors>",
      "7:     <owners>joachimmetz</owners>",
      "8:     <licenseUrl>https://raw.githubusercontent.com/libyal/libevt/master/COPYING</licenseUrl>",
      "",
      "[Removed Lines]",
      "5:     <version>20180125</version>",
      "",
      "[Added Lines]",
      "5:     <version>20180317</version>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "10:     <requireLicenseAcceptance>false</requireLicenseAcceptance>",
      "11:     <title>libevt</title>",
      "12:     <description>Library to access the Windows Event Log (EVT) format</description>",
      "14:     <copyright>Copyright (C) 2011-2018</copyright>",
      "15:     <tags>native</tags>",
      "16:   </metadata>",
      "",
      "[Removed Lines]",
      "13:     <releaseNotes>Release of libevt 20180125</releaseNotes>",
      "",
      "[Added Lines]",
      "13:     <releaseNotes>Release of libevt 20180317</releaseNotes>",
      "",
      "---------------"
    ],
    "libevt/libevt_libfvalue.h||libevt/libevt_libfvalue.h": [
      "File: libevt/libevt_libfvalue.h -> libevt/libevt_libfvalue.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "29: #if defined( HAVE_LOCAL_LIBFVALUE )",
      "31: #include <libfvalue_codepage.h>",
      "32: #include <libfvalue_definitions.h>",
      "33: #include <libfvalue_floating_point.h>",
      "34: #include <libfvalue_integer.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "32: #include <libfvalue_data_handle.h>",
      "",
      "---------------"
    ],
    "libevt/libevt_record_values.c||libevt/libevt_record_values.c": [
      "File: libevt/libevt_record_values.c -> libevt/libevt_record_values.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1157:  }",
      "1158:  if( user_sid_size != 0 )",
      "1159:  {",
      "1160:   if( libfvalue_value_type_initialize(",
      "1161:        &( record_values->user_security_identifier ),",
      "1162:        LIBFVALUE_VALUE_TYPE_NT_SECURITY_IDENTIFIER,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1160:   if( user_sid_size > ( ( record_data_size - 4 ) - user_sid_offset ) )",
      "1161:   {",
      "1162:    libcerror_error_set(",
      "1163:     error,",
      "1164:     LIBCERROR_ERROR_DOMAIN_RUNTIME,",
      "1165:     LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS,",
      "1166:     \"%s: user SID data size value out of bounds.\",",
      "1167:     function );",
      "1169:    goto on_error;",
      "1170:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1218:  }",
      "1219:  if( strings_size != 0 )",
      "1220:  {",
      "1221: #if defined( HAVE_DEBUG_OUTPUT )",
      "1222:   if( libcnotify_verbose != 0 )",
      "1223:   {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1232:   if( strings_size > ( ( record_data_size - 4 ) - strings_offset ) )",
      "1233:   {",
      "1234:    libcerror_error_set(",
      "1235:     error,",
      "1236:     LIBCERROR_ERROR_DOMAIN_RUNTIME,",
      "1237:     LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS,",
      "1238:     \"%s: strings size value out of bounds.\",",
      "1239:     function );",
      "1241:    goto on_error;",
      "1242:   }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1285:  }",
      "1286:  if( data_size != 0 )",
      "1287:  {",
      "1288: #if defined( HAVE_DEBUG_OUTPUT )",
      "1289:   if( libcnotify_verbose != 0 )",
      "1290:   {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1310:   if( data_size > ( ( record_data_size - 4 ) - record_data_offset ) )",
      "1311:   {",
      "1312:    libcerror_error_set(",
      "1313:     error,",
      "1314:     LIBCERROR_ERROR_DOMAIN_RUNTIME,",
      "1315:     LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS,",
      "1316:     \"%s: data size value out of bounds.\",",
      "1317:     function );",
      "1319:    goto on_error;",
      "1320:   }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1292:     \"%s: data:\\n\",",
      "1293:     function );",
      "1294:    libcnotify_print_data(",
      "1296:     (size_t) data_size,",
      "1297:     LIBCNOTIFY_PRINT_DATA_FLAG_GROUP_DATA );",
      "1298:   }",
      "",
      "[Removed Lines]",
      "1295:     &( record_data[ data_offset ] ),",
      "",
      "[Added Lines]",
      "1328:     &( record_data[ record_data_offset ] ),",
      "",
      "---------------"
    ],
    "m4/libcdata.m4||m4/libcdata.m4": [
      "File: m4/libcdata.m4 -> m4/libcdata.m4",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: dnl Checks for libcdata or required headers and functions",
      "2: dnl",
      "5: dnl Function to detect if libcdata is available",
      "6: dnl ac_libcdata_dummy is used to prevent AC_CHECK_LIB adding unnecessary -l<library> arguments",
      "",
      "[Removed Lines]",
      "3: dnl Version: 20170904",
      "",
      "[Added Lines]",
      "3: dnl Version: 20180316",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "123:           [ac_cv_libcdata_dummy=yes],",
      "124:           [ac_cv_libcdata=no])",
      "126:         dnl List functions",
      "127:         AC_CHECK_LIB(",
      "128:           cdata,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "126:         dnl Balanced tree functions",
      "127:         AC_CHECK_LIB(",
      "128:           cdata,",
      "129:           libfdata_btree_initialize,",
      "130:           [ac_cv_libcdata_dummy=yes],",
      "131:           [ac_cv_libcdata=no])",
      "132:         AC_CHECK_LIB(",
      "133:           cdata,",
      "134:           libcdata_btree_free,",
      "135:           [ac_cv_libcdata_dummy=yes],",
      "136:           [ac_cv_libcdata=no])",
      "137:         AC_CHECK_LIB(",
      "138:           cdata,",
      "139:           libcdata_btree_get_number_of_values,",
      "140:           [ac_cv_libcdata_dummy=yes],",
      "141:           [ac_cv_libcdata=no])",
      "142:         AC_CHECK_LIB(",
      "143:           cdata,",
      "144:           libcdata_btree_get_value_by_index,",
      "145:           [ac_cv_libcdata_dummy=yes],",
      "146:           [ac_cv_libcdata=no])",
      "147:         AC_CHECK_LIB(",
      "148:           cdata,",
      "149:           libcdata_btree_get_value_by_value,",
      "150:           [ac_cv_libcdata_dummy=yes],",
      "151:           [ac_cv_libcdata=no])",
      "152:         AC_CHECK_LIB(",
      "153:           cdata,",
      "154:           libcdata_btree_insert_value,",
      "155:           [ac_cv_libcdata_dummy=yes],",
      "156:           [ac_cv_libcdata=no])",
      "157:         AC_CHECK_LIB(",
      "158:           cdata,",
      "159:           libcdata_btree_replace_value,",
      "160:           [ac_cv_libcdata_dummy=yes],",
      "161:           [ac_cv_libcdata=no])",
      "162:         AC_CHECK_LIB(",
      "163:           cdata,",
      "164:           libcdata_btree_remove_value,",
      "165:           [ac_cv_libcdata_dummy=yes],",
      "166:           [ac_cv_libcdata=no])",
      "",
      "---------------"
    ],
    "m4/libcsplit.m4||m4/libcsplit.m4": [
      "File: m4/libcsplit.m4 -> m4/libcsplit.m4",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: dnl Checks for libcsplit or required headers and functions",
      "2: dnl",
      "5: dnl Function to detect if libcsplit is available",
      "6: dnl ac_libcsplit_dummy is used to prevent AC_CHECK_LIB adding unnecessary -l<library> arguments",
      "",
      "[Removed Lines]",
      "3: dnl Version: 20170903",
      "",
      "[Added Lines]",
      "3: dnl Version: 20180217",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "111:         AS_IF(",
      "112:           [test \"x$ac_cv_enable_wide_character_type\" != xno],",
      "113:           [AC_CHECK_LIB(",
      "115:             libcsplit_wide_string_split,",
      "116:             [ac_cv_libcsplit_dummy=yes],",
      "117:             [ac_cv_libcsplit=no])",
      "",
      "[Removed Lines]",
      "114:           csplit,",
      "",
      "[Added Lines]",
      "114:             csplit,",
      "",
      "---------------"
    ],
    "m4/libfdata.m4||m4/libfdata.m4": [
      "File: m4/libfdata.m4 -> m4/libfdata.m4",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: dnl Functions for libfdata",
      "2: dnl",
      "5: dnl Function to detect if libfdata is available",
      "6: dnl ac_libfdata_dummy is used to prevent AC_CHECK_LIB adding unnecessary -l<library> arguments",
      "",
      "[Removed Lines]",
      "3: dnl Version: 20170905",
      "",
      "[Added Lines]",
      "3: dnl Version: 20180316",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "49:           [ac_cv_libfdata=no])",
      "51:         dnl Area functions",
      "54:         dnl Balanced tree functions",
      "55:         dnl TODO: add functions",
      "",
      "[Removed Lines]",
      "52:         dnl TODO: add functions",
      "",
      "[Added Lines]",
      "52:         AC_CHECK_LIB(",
      "53:           fdata,",
      "54:           libfdata_area_initialize,",
      "55:           [ac_cv_libfdata_dummy=yes],",
      "56:           [ac_cv_libfdata=no])",
      "57:         AC_CHECK_LIB(",
      "58:           fdata,",
      "59:           libfdata_area_free,",
      "60:           [ac_cv_libfdata_dummy=yes],",
      "61:           [ac_cv_libfdata=no])",
      "62:         AC_CHECK_LIB(",
      "63:           fdata,",
      "64:           libfdata_area_clone,",
      "65:           [ac_cv_libfdata_dummy=yes],",
      "66:           [ac_cv_libfdata=no])",
      "67:         AC_CHECK_LIB(",
      "68:           fdata,",
      "69:           libfdata_area_empty,",
      "70:           [ac_cv_libfdata_dummy=yes],",
      "71:           [ac_cv_libfdata=no])",
      "72:         AC_CHECK_LIB(",
      "73:           fdata,",
      "74:           libfdata_area_resize,",
      "75:           [ac_cv_libfdata_dummy=yes],",
      "76:           [ac_cv_libfdata=no])",
      "77:         AC_CHECK_LIB(",
      "78:           fdata,",
      "79:           libfdata_area_get_number_of_segments,",
      "80:           [ac_cv_libfdata_dummy=yes],",
      "81:           [ac_cv_libfdata=no])",
      "82:         AC_CHECK_LIB(",
      "83:           fdata,",
      "84:           libfdata_area_get_segment_by_index,",
      "85:           [ac_cv_libfdata_dummy=yes],",
      "86:           [ac_cv_libfdata=no])",
      "87:         AC_CHECK_LIB(",
      "88:           fdata,",
      "89:           libfdata_area_set_segment_by_index,",
      "90:           [ac_cv_libfdata_dummy=yes],",
      "91:           [ac_cv_libfdata=no])",
      "92:         AC_CHECK_LIB(",
      "93:           fdata,",
      "94:           libfdata_area_prepend_segment,",
      "95:           [ac_cv_libfdata_dummy=yes],",
      "96:           [ac_cv_libfdata=no])",
      "97:         AC_CHECK_LIB(",
      "98:           fdata,",
      "99:           libfdata_area_append_segment,",
      "100:           [ac_cv_libfdata_dummy=yes],",
      "101:           [ac_cv_libfdata=no])",
      "102:         AC_CHECK_LIB(",
      "103:           fdata,",
      "104:           libfdata_area_get_element_data_size,",
      "105:           [ac_cv_libfdata_dummy=yes],",
      "106:           [ac_cv_libfdata=no])",
      "107:         AC_CHECK_LIB(",
      "108:           fdata,",
      "109:           libfdata_area_get_element_value_at_offset,",
      "110:           [ac_cv_libfdata_dummy=yes],",
      "111:           [ac_cv_libfdata=no])",
      "112:         AC_CHECK_LIB(",
      "113:           fdata,",
      "114:           libfdata_area_set_element_value_at_offset,",
      "115:           [ac_cv_libfdata_dummy=yes],",
      "116:           [ac_cv_libfdata=no])",
      "117:         AC_CHECK_LIB(",
      "118:           fdata,",
      "119:           libfdata_area_get_size,",
      "120:           [ac_cv_libfdata_dummy=yes],",
      "121:           [ac_cv_libfdata=no])",
      "",
      "---------------"
    ],
    "runtests.sh||runtests.sh": [
      "File: runtests.sh -> runtests.sh",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: #!/bin/bash",
      "2: # Script that runs the tests",
      "3: #",
      "6: EXIT_SUCCESS=0;",
      "7: EXIT_FAILURE=1;",
      "",
      "[Removed Lines]",
      "4: # Version: 20171210",
      "",
      "[Added Lines]",
      "4: # Version: 20180214",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "202: HAVE_ENABLE_WIDE_CHARACTER_TYPE=$?;",
      "204: echo \"${CONFIGURE_HELP}\" | grep -- '--with-zlib' > /dev/null;",
      "206: HAVE_WITH_ZLIB=$?;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "204: echo \"${CONFIGURE_HELP}\" | grep -- '--enable-verbose-output' > /dev/null;",
      "206: HAVE_ENABLE_VERBOSE_OUTPUT=$?;",
      "208: echo \"${CONFIGURE_HELP}\" | grep -- '--enable-debug-output' > /dev/null;",
      "210: HAVE_ENABLE_DEBUG_OUTPUT=$?;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "230:  exit ${EXIT_FAILURE};",
      "231: fi",
      "233: if test ${HAVE_WITH_ZLIB} -eq 0;",
      "234: then",
      "235:  # Test \"./configure && make && make check\" with fallback zlib implementation.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "241: if test ${HAVE_ENABLE_VERBOSE_OUTPUT} -eq 0 && test ${HAVE_ENABLE_DEBUG_OUTPUT} -eq 0;",
      "242: then",
      "243:  # Test \"./configure && make && make check\" with verbose and debug output.",
      "245:  run_configure_make_check \"--enable-verbose-output --enable-debug-output\";",
      "246:  RESULT=$?;",
      "248:  if test ${RESULT} -ne ${EXIT_SUCCESS};",
      "249:  then",
      "250:   exit ${EXIT_FAILURE};",
      "251:  fi",
      "252: fi",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "32e8c1a1fb0e0e23c3a1e6278d1208878b0c51bc",
      "candidate_info": {
        "commit_hash": "32e8c1a1fb0e0e23c3a1e6278d1208878b0c51bc",
        "repo": "libyal/libevt",
        "commit_url": "https://github.com/libyal/libevt/commit/32e8c1a1fb0e0e23c3a1e6278d1208878b0c51bc",
        "files": [
          ".travis.yml",
          "appveyor.yml",
          "configure.ac",
          "tests/test_evtinfo.ps1",
          "tests/test_library.ps1"
        ],
        "message": "Changes for tests",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "tests/test_evtinfo.ps1||tests/test_evtinfo.ps1",
          "tests/test_library.ps1||tests/test_library.ps1"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_INIT(",
          "4:  [libevt],",
          "6:  [joachim.metz@gmail.com])",
          "8: AC_CONFIG_SRCDIR(",
          "",
          "[Removed Lines]",
          "5:  [20170409],",
          "",
          "[Added Lines]",
          "5:  [20170630],",
          "",
          "---------------"
        ],
        "tests/test_evtinfo.ps1||tests/test_evtinfo.ps1": [
          "File: tests/test_evtinfo.ps1 -> tests/test_evtinfo.ps1",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: $TestPrefix = ${TestPrefix}.Substring(3)",
          "12: $TestSuffix = \"info\"",
          "15: $TestTool = \"${TestPrefix}${TestSuffix}\"",
          "16: $InputDirectory = \"input\"",
          "17: $InputGlob = \"*\"",
          "19: $TestExecutable = \"${TestToolDirectory}\\${TestTool}.exe\"",
          "21: If (-Not (Test-Path -Path \"${InputDirectory}\"))",
          "",
          "[Removed Lines]",
          "14: $TestToolDirectory = \"..\\vs2010\\Release\"",
          "",
          "[Added Lines]",
          "14: $TestToolDirectory = \"..\\msvscpp\\Release\"",
          "19: If (-Not (Test-Path ${TestToolDirectory}))",
          "20: {",
          "21:  $TestToolDirectory = \"..\\vs2010\\Release\"",
          "22: }",
          "23: If (-Not (Test-Path ${TestToolDirectory}))",
          "24: {",
          "25:  $TestToolDirectory = \"..\\vs2012\\Release\"",
          "26: }",
          "27: If (-Not (Test-Path ${TestToolDirectory}))",
          "28: {",
          "29:  $TestToolDirectory = \"..\\vs2013\\Release\"",
          "30: }",
          "31: If (-Not (Test-Path ${TestToolDirectory}))",
          "32: {",
          "33:  $TestToolDirectory = \"..\\vs2015\\Release\"",
          "34: }",
          "35: If (-Not (Test-Path ${TestToolDirectory}))",
          "36: {",
          "37:  Write-Host \"Missing test tool directory.\" -foreground Red",
          "39:  Exit ${ExitFailure}",
          "40: }",
          "",
          "---------------"
        ],
        "tests/test_library.ps1||tests/test_library.ps1": [
          "File: tests/test_library.ps1 -> tests/test_library.ps1",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:  $TestToolDirectory = \"..\\vs2010\\Release\"",
          "48: }",
          "49: If (-Not (Test-Path ${TestToolDirectory}))",
          "50: {",
          "51:  Write-Host \"Missing test tool directory.\" -foreground Red",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: {",
          "51:  $TestToolDirectory = \"..\\vs2012\\Release\"",
          "52: }",
          "53: If (-Not (Test-Path ${TestToolDirectory}))",
          "54: {",
          "55:  $TestToolDirectory = \"..\\vs2013\\Release\"",
          "56: }",
          "57: If (-Not (Test-Path ${TestToolDirectory}))",
          "58: {",
          "59:  $TestToolDirectory = \"..\\vs2015\\Release\"",
          "60: }",
          "61: If (-Not (Test-Path ${TestToolDirectory}))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "36a94a11594d96037f8f5d978a8a6fa98ce16e68",
      "candidate_info": {
        "commit_hash": "36a94a11594d96037f8f5d978a8a6fa98ce16e68",
        "repo": "libyal/libevt",
        "commit_url": "https://github.com/libyal/libevt/commit/36a94a11594d96037f8f5d978a8a6fa98ce16e68",
        "files": [
          "configure.ac",
          "libevt.nuspec",
          "libevt/libevt_file.c",
          "libevt/libevt_record_values.c",
          "libevt/libevt_record_values.h",
          "m4/common.m4",
          "m4/libbfio.m4",
          "m4/libcdata.m4",
          "m4/libcdirectory.m4",
          "m4/libcerror.m4",
          "m4/libcfile.m4",
          "m4/libclocale.m4",
          "m4/libcnotify.m4",
          "m4/libcpath.m4",
          "m4/libcsplit.m4",
          "m4/libcthreads.m4",
          "m4/libexe.m4",
          "m4/libfcache.m4",
          "m4/libfdata.m4",
          "m4/libfdatetime.m4",
          "m4/libfguid.m4",
          "m4/libfvalue.m4",
          "m4/libfwevt.m4",
          "m4/libfwnt.m4",
          "m4/libregf.m4",
          "m4/libuna.m4",
          "m4/libwrc.m4",
          "msvscpp/libbfio/libbfio.vcproj",
          "msvscpp/libexe/libexe.vcproj",
          "setup.py"
        ],
        "message": "Applied updates",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "libevt.nuspec||libevt.nuspec",
          "libevt/libevt_file.c||libevt/libevt_file.c",
          "libevt/libevt_record_values.c||libevt/libevt_record_values.c",
          "libevt/libevt_record_values.h||libevt/libevt_record_values.h",
          "m4/common.m4||m4/common.m4",
          "m4/libbfio.m4||m4/libbfio.m4",
          "m4/libcdata.m4||m4/libcdata.m4",
          "m4/libcdirectory.m4||m4/libcdirectory.m4",
          "m4/libcerror.m4||m4/libcerror.m4",
          "m4/libcfile.m4||m4/libcfile.m4",
          "m4/libclocale.m4||m4/libclocale.m4",
          "m4/libcnotify.m4||m4/libcnotify.m4",
          "m4/libcpath.m4||m4/libcpath.m4",
          "m4/libcsplit.m4||m4/libcsplit.m4",
          "m4/libcthreads.m4||m4/libcthreads.m4",
          "m4/libexe.m4||m4/libexe.m4",
          "m4/libfcache.m4||m4/libfcache.m4",
          "m4/libfdata.m4||m4/libfdata.m4",
          "m4/libfdatetime.m4||m4/libfdatetime.m4",
          "m4/libfguid.m4||m4/libfguid.m4",
          "m4/libfvalue.m4||m4/libfvalue.m4",
          "m4/libfwevt.m4||m4/libfwevt.m4",
          "m4/libfwnt.m4||m4/libfwnt.m4",
          "m4/libregf.m4||m4/libregf.m4",
          "m4/libuna.m4||m4/libuna.m4",
          "m4/libwrc.m4||m4/libwrc.m4",
          "msvscpp/libbfio/libbfio.vcproj||msvscpp/libbfio/libbfio.vcproj",
          "msvscpp/libexe/libexe.vcproj||msvscpp/libexe/libexe.vcproj",
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "libevt.nuspec||libevt.nuspec",
            "libevt/libevt_record_values.c||libevt/libevt_record_values.c",
            "m4/libcdata.m4||m4/libcdata.m4",
            "m4/libcsplit.m4||m4/libcsplit.m4",
            "m4/libfdata.m4||m4/libfdata.m4"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "libevt.nuspec||libevt.nuspec",
            "libevt/libevt_record_values.c||libevt/libevt_record_values.c",
            "m4/libcdata.m4||m4/libcdata.m4",
            "m4/libcsplit.m4||m4/libcsplit.m4",
            "m4/libfdata.m4||m4/libfdata.m4"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_INIT(",
          "4:  [libevt],",
          "6:  [joachim.metz@gmail.com])",
          "8: AC_CONFIG_SRCDIR(",
          "",
          "[Removed Lines]",
          "5:  [20181115],",
          "",
          "[Added Lines]",
          "5:  [20181129],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42: dnl Check for large file support",
          "43: AC_SYS_LARGEFILE",
          "45: dnl Check if WINAPI support should be enabled",
          "46: AX_COMMON_CHECK_ENABLE_WINAPI",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: dnl Check if shared library support should be disabled",
          "46: AX_COMMON_CHECK_DISABLE_SHARED_LIBS",
          "",
          "---------------"
        ],
        "libevt.nuspec||libevt.nuspec": [
          "File: libevt.nuspec -> libevt.nuspec",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: <package >",
          "3:   <metadata>",
          "4:     <id>libevt</id>",
          "6:     <authors>Joachim Metz</authors>",
          "7:     <owners>joachimmetz</owners>",
          "8:     <licenseUrl>https://raw.githubusercontent.com/libyal/libevt/master/COPYING</licenseUrl>",
          "",
          "[Removed Lines]",
          "5:     <version>20181115</version>",
          "",
          "[Added Lines]",
          "5:     <version>20181126</version>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10:     <requireLicenseAcceptance>false</requireLicenseAcceptance>",
          "11:     <title>libevt</title>",
          "12:     <description>Library to access the Windows Event Log (EVT) format</description>",
          "14:     <copyright>Copyright (C) 2011-2018</copyright>",
          "15:     <tags>native</tags>",
          "16:   </metadata>",
          "",
          "[Removed Lines]",
          "13:     <releaseNotes>Release of libevt 20181115</releaseNotes>",
          "",
          "[Added Lines]",
          "13:     <releaseNotes>Release of libevt 20181126</releaseNotes>",
          "",
          "---------------"
        ],
        "libevt/libevt_file.c||libevt/libevt_file.c": [
          "File: libevt/libevt_file.c -> libevt/libevt_file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:       (intptr_t *) internal_file->io_handle,",
          "121:       NULL,",
          "122:       NULL,",
          "124:       NULL,",
          "125:       LIBFDATA_DATA_HANDLE_FLAG_NON_MANAGED,",
          "126:       error ) != 1 )",
          "",
          "[Removed Lines]",
          "123:       (int (*)(intptr_t *, intptr_t *, libfdata_list_element_t *, libfcache_cache_t *, int, off64_t, size64_t, uint32_t, uint8_t, libcerror_error_t **)) &libevt_record_values_read_element_data,",
          "",
          "[Added Lines]",
          "123:       (int (*)(intptr_t *, intptr_t *, libfdata_list_element_t *, libfdata_cache_t *, int, off64_t, size64_t, uint32_t, uint8_t, libcerror_error_t **)) &libevt_record_values_read_element_data,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "139:       (intptr_t *) internal_file->io_handle,",
          "140:       NULL,",
          "141:       NULL,",
          "143:       NULL,",
          "144:       LIBFDATA_DATA_HANDLE_FLAG_NON_MANAGED,",
          "145:       error ) != 1 )",
          "",
          "[Removed Lines]",
          "142:       (int (*)(intptr_t *, intptr_t *, libfdata_list_element_t *, libfcache_cache_t *, int, off64_t, size64_t, uint32_t, uint8_t, libcerror_error_t **)) &libevt_record_values_read_element_data,",
          "",
          "[Added Lines]",
          "142:       (int (*)(intptr_t *, intptr_t *, libfdata_list_element_t *, libfdata_cache_t *, int, off64_t, size64_t, uint32_t, uint8_t, libcerror_error_t **)) &libevt_record_values_read_element_data,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1482:  if( libfdata_list_get_element_value_by_index(",
          "1483:       internal_file->records_list,",
          "1484:       (intptr_t *) internal_file->file_io_handle,",
          "1486:       record_index,",
          "1487:       (intptr_t **) &record_values,",
          "1488:       0,",
          "",
          "[Removed Lines]",
          "1485:       internal_file->records_cache,",
          "",
          "[Added Lines]",
          "1485:       (libfdata_cache_t *) internal_file->records_cache,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1557:  if( libfdata_list_get_element_value_by_index(",
          "1558:       internal_file->records_list,",
          "1559:       (intptr_t *) internal_file->file_io_handle,",
          "1561:       record_index,",
          "1562:       (intptr_t **) &record_values,",
          "1563:       0,",
          "",
          "[Removed Lines]",
          "1560:       internal_file->records_cache,",
          "",
          "[Added Lines]",
          "1560:       (libfdata_cache_t *) internal_file->records_cache,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1673:  if( libfdata_list_get_element_value_by_index(",
          "1674:       internal_file->recovered_records_list,",
          "1675:       (intptr_t *) internal_file->file_io_handle,",
          "1677:       record_index,",
          "1678:       (intptr_t **) &record_values,",
          "1679:       0,",
          "",
          "[Removed Lines]",
          "1676:       internal_file->records_cache,",
          "",
          "[Added Lines]",
          "1676:       (libfdata_cache_t *) internal_file->records_cache,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1748:  if( libfdata_list_get_element_value_by_index(",
          "1749:       internal_file->recovered_records_list,",
          "1750:       (intptr_t *) internal_file->file_io_handle,",
          "1752:       record_index,",
          "1753:       (intptr_t **) &record_values,",
          "1754:       0,",
          "",
          "[Removed Lines]",
          "1751:       internal_file->records_cache,",
          "",
          "[Added Lines]",
          "1751:       (libfdata_cache_t *) internal_file->records_cache,",
          "",
          "---------------"
        ],
        "libevt/libevt_record_values.c||libevt/libevt_record_values.c": [
          "File: libevt/libevt_record_values.c -> libevt/libevt_record_values.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1672:      libevt_io_handle_t *io_handle,",
          "1673:      libbfio_handle_t *file_io_handle,",
          "1674:      libfdata_list_element_t *element,",
          "1676:      int element_file_index LIBEVT_ATTRIBUTE_UNUSED,",
          "1677:      off64_t element_offset,",
          "1678:      size64_t element_size LIBEVT_ATTRIBUTE_UNUSED,",
          "",
          "[Removed Lines]",
          "1675:      libfcache_cache_t *cache,",
          "",
          "[Added Lines]",
          "1675:      libfdata_cache_t *cache,",
          "",
          "---------------"
        ],
        "libevt/libevt_record_values.h||libevt/libevt_record_values.h": [
          "File: libevt/libevt_record_values.h -> libevt/libevt_record_values.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:      libevt_io_handle_t *io_handle,",
          "148:      libbfio_handle_t *file_io_handle,",
          "149:      libfdata_list_element_t *element,",
          "151:      int element_file_index,",
          "152:      off64_t element_offset,",
          "153:      size64_t element_size,",
          "",
          "[Removed Lines]",
          "150:      libfcache_cache_t *cache,",
          "",
          "[Added Lines]",
          "150:      libfdata_cache_t *cache,",
          "",
          "---------------"
        ],
        "m4/common.m4||m4/common.m4": [
          "File: m4/common.m4 -> m4/common.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: dnl Checks for common headers and functions",
          "2: dnl",
          "5: dnl Function to test if a certain feature was enabled",
          "6: AC_DEFUN([AX_COMMON_ARG_ENABLE],",
          "",
          "[Removed Lines]",
          "3: dnl Version: 20180729",
          "",
          "[Added Lines]",
          "3: dnl Version: 20181117",
          "5: dnl Function to test if a certain feature was disabled",
          "6: AC_DEFUN([AX_COMMON_ARG_DISABLE],",
          "7: [",
          "8:   AC_ARG_ENABLE(",
          "9:     [$1],",
          "10:     [AS_HELP_STRING(",
          "11:       [--disable-$1],",
          "12:       [$3])],",
          "13:     [ac_cv_enable_$2=$enableval],",
          "14:     [ac_cv_enable_$2=\"yes\"])dnl",
          "16:     AC_CACHE_CHECK(",
          "17:       [whether to disable $3],",
          "18:       [ac_cv_enable_$2],",
          "19:       [ac_cv_enable_$2=\"yes\"])dnl",
          "20: ])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:       [ac_cv_with_$2=$4])dnl",
          "37: ])",
          "41: [",
          "42:   AX_COMMON_ARG_ENABLE(",
          "48:   AS_IF(",
          "66: ])",
          "68: dnl Function to detect whether static executables support should be enabled",
          "",
          "[Removed Lines]",
          "39: dnl Function to detect whether WINAPI support should be enabled",
          "40: AC_DEFUN([AX_COMMON_CHECK_ENABLE_WINAPI],",
          "43:     [winapi],",
          "44:     [winapi],",
          "45:     [enable WINAPI support for cross-compilation],",
          "46:     [auto-detect])",
          "49:     [test \"x$ac_cv_enable_winapi\" = xauto-detect],",
          "50:     [ac_common_check_winapi_target_string=\"$target\"",
          "52:     AS_IF(",
          "53:       [test \"x$ac_common_check_winapi_target_string\" = x],",
          "54:       [ac_common_check_winapi_target_string=\"$host\"])",
          "56:     AS_CASE(",
          "57:       [$ac_common_check_winapi_target_string],",
          "58:       [*mingw*],[AC_MSG_NOTICE(",
          "59:         [detected MinGW enabling WINAPI support for cross-compilation])",
          "60:         ac_cv_enable_winapi=yes],",
          "61:       [*msys*],[AC_MSG_NOTICE(",
          "62:         [detected MSYS enabling WINAPI support for cross-compilation])",
          "63:         ac_cv_enable_winapi=yes],",
          "64:       [*],[ac_cv_enable_winapi=no])",
          "65:   ])",
          "",
          "[Added Lines]",
          "56: dnl Function to detect whether shared libary support should be disabled",
          "57: AC_DEFUN([AX_COMMON_CHECK_DISABLE_SHARED_LIBS],",
          "58: [",
          "59:   AX_COMMON_ARG_DISABLE(",
          "60:     [shared-libs],",
          "61:     [shared_libs],",
          "62:     [disable shared library support])",
          "63: ])",
          "65: dnl Function to detect whether debug output should be enabled",
          "66: AC_DEFUN([AX_COMMON_CHECK_ENABLE_DEBUG_OUTPUT],",
          "69:     [debug-output],",
          "70:     [debug_output],",
          "71:     [enable debug output],",
          "72:     [no])",
          "75:     [test \"x$ac_cv_enable_debug_output\" != xno ],",
          "76:     [AC_DEFINE(",
          "77:       [HAVE_DEBUG_OUTPUT],",
          "78:       [1],",
          "79:       [Define to 1 if debug output should be used.])",
          "81:     ac_cv_enable_debug_output=yes])",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "85:     enable_shared=no])",
          "86: ])",
          "98: dnl Function to detect whether verbose output should be enabled",
          "99: AC_DEFUN([AX_COMMON_CHECK_ENABLE_VERBOSE_OUTPUT],",
          "100: [",
          "",
          "[Removed Lines]",
          "88: dnl Function to detect whether static executables support should be enabled",
          "89: AC_DEFUN([AX_COMMON_CHECK_ENABLE_WIDE_CHARACTER_TYPE],",
          "90: [",
          "91:   AX_COMMON_ARG_ENABLE(",
          "92:     [wide-character-type],",
          "93:     [wide_character_type],",
          "94:     [enable wide character type support],",
          "95:     [no])",
          "96: ])",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "114:     ac_cv_enable_verbose_output=yes])",
          "115: ])",
          "119: [",
          "120:   AX_COMMON_ARG_ENABLE(",
          "124:     [no])",
          "126:   AS_IF(",
          "134: ])",
          "136: dnl Function to detect whether printf conversion specifier \"%jd\" is available",
          "",
          "[Removed Lines]",
          "117: dnl Function to detect whether debug output should be enabled",
          "118: AC_DEFUN([AX_COMMON_CHECK_ENABLE_DEBUG_OUTPUT],",
          "121:     [debug-output],",
          "122:     [debug_output],",
          "123:     [enable debug output],",
          "127:     [test \"x$ac_cv_enable_debug_output\" != xno ],",
          "128:     [AC_DEFINE(",
          "129:       [HAVE_DEBUG_OUTPUT],",
          "130:       [1],",
          "131:       [Define to 1 if debug output should be used.])",
          "133:     ac_cv_enable_debug_output=yes])",
          "",
          "[Added Lines]",
          "123: dnl Function to detect whether static executables support should be enabled",
          "124: AC_DEFUN([AX_COMMON_CHECK_ENABLE_WIDE_CHARACTER_TYPE],",
          "127:     [wide-character-type],",
          "128:     [wide_character_type],",
          "129:     [enable wide character type support],",
          "131: ])",
          "133: dnl Function to detect whether WINAPI support should be enabled",
          "134: AC_DEFUN([AX_COMMON_CHECK_ENABLE_WINAPI],",
          "135: [",
          "136:   AX_COMMON_ARG_ENABLE(",
          "137:     [winapi],",
          "138:     [winapi],",
          "139:     [enable WINAPI support for cross-compilation],",
          "140:     [auto-detect])",
          "143:     [test \"x$ac_cv_enable_winapi\" = xauto-detect],",
          "144:     [ac_common_check_winapi_target_string=\"$target\"",
          "146:     AS_IF(",
          "147:       [test \"x$ac_common_check_winapi_target_string\" = x],",
          "148:       [ac_common_check_winapi_target_string=\"$host\"])",
          "150:     AS_CASE(",
          "151:       [$ac_common_check_winapi_target_string],",
          "152:       [*mingw*],[AC_MSG_NOTICE(",
          "153:         [detected MinGW enabling WINAPI support for cross-compilation])",
          "154:         ac_cv_enable_winapi=yes],",
          "155:       [*msys*],[AC_MSG_NOTICE(",
          "156:         [detected MSYS enabling WINAPI support for cross-compilation])",
          "157:         ac_cv_enable_winapi=yes],",
          "158:       [*],[ac_cv_enable_winapi=no])",
          "159:   ])",
          "",
          "---------------"
        ],
        "m4/libbfio.m4||m4/libbfio.m4": [
          "File: m4/libbfio.m4 -> m4/libbfio.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: dnl",
          "5: dnl Function to detect if libbfio is available",
          "6: AC_DEFUN([AX_LIBBFIO_CHECK_LIB],",
          "20:     [ac_cv_libbfio=no],",
          "22:     AS_IF(",
          "41: #error LIBBFIO_HAVE_WIDE_CHARACTER_TYPE not defined",
          "42: #endif]] )],",
          "44:          [ac_cv_header_libbfio_features_h_have_wide_character_type=no])",
          "48:       AS_IF(",
          "58:     AS_IF(",
          "59:       [test \"x$ac_cv_libbfio\" = xcheck],",
          "",
          "[Removed Lines]",
          "1: dnl Checks for libbfio or required headers and functions",
          "3: dnl Version: 20180407",
          "7:   [dnl Check if parameters were provided",
          "8:   AS_IF(",
          "9:     [test \"x$ac_cv_with_libbfio\" != x && test \"x$ac_cv_with_libbfio\" != xno && test \"x$ac_cv_with_libbfio\" != xauto-detect],",
          "10:     [AS_IF(",
          "11:       [test -d \"$ac_cv_with_libbfio\"],",
          "12:       [CFLAGS=\"$CFLAGS -I${ac_cv_with_libbfio}/include\"",
          "13:       LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libbfio}/lib\"],",
          "14:       [AC_MSG_WARN([no such directory: $ac_cv_with_libbfio])",
          "15:       ])",
          "16:     ])",
          "18:   AS_IF(",
          "19:     [test \"x$ac_cv_with_libbfio\" = xno],",
          "21:     [dnl Check for a pkg-config file",
          "23:       [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "24:       [PKG_CHECK_MODULES(",
          "25:         [libbfio],",
          "26:         [libbfio >= 20160108],",
          "27:         [ac_cv_libbfio=yes],",
          "28:         [ac_cv_libbfio=check])",
          "29:       ])",
          "31:     AS_IF(",
          "32:       [test \"x$ac_cv_libbfio\" = xyes && test \"x$ac_cv_enable_wide_character_type\" != xno],",
          "33:       [AC_CACHE_CHECK(",
          "34:        [whether libbfio/features.h defines LIBBFIO_HAVE_WIDE_CHARACTER_TYPE as 1],",
          "35:        [ac_cv_header_libbfio_features_h_have_wide_character_type],",
          "36:        [AC_LANG_PUSH(C)",
          "37:        AC_COMPILE_IFELSE(",
          "38:          [AC_LANG_PROGRAM(",
          "39:            [[#include <libbfio/features.h>]],",
          "40:            [[#if !defined( LIBBFIO_HAVE_WIDE_CHARACTER_TYPE ) || ( LIBBFIO_HAVE_WIDE_CHARACTER_TYPE != 1 )",
          "43:          [ac_cv_header_libbfio_features_h_have_wide_character_type=yes],",
          "45:        AC_LANG_POP(C)],",
          "46:        [ac_cv_header_libbfio_features_h_have_wide_character_type=no])",
          "49:         [test \"x$ac_cv_header_libbfio_features_h_have_wide_character_type\" = xno],",
          "50:         [ac_cv_libbfio=no])",
          "51:     ])",
          "53:     AS_IF(",
          "54:       [test \"x$ac_cv_libbfio\" = xyes],",
          "55:       [ac_cv_libbfio_CPPFLAGS=\"$pkg_cv_libbfio_CFLAGS\"",
          "56:       ac_cv_libbfio_LIBADD=\"$pkg_cv_libbfio_LIBS\"])",
          "",
          "[Added Lines]",
          "1: dnl Checks for libbfio required headers and functions",
          "3: dnl Version: 20181117",
          "6: dnl ac_libbfio_dummy is used to prevent AC_CHECK_LIB adding unnecessary -l<library> arguments",
          "8:   [AS_IF(",
          "9:     [test \"x$ac_cv_enable_shared_libs\" = xno || test \"x$ac_cv_with_libbfio\" = xno],",
          "11:     [dnl Check if the directory provided as parameter exists",
          "13:       [test \"x$ac_cv_with_libbfio\" != x && test \"x$ac_cv_with_libbfio\" != xauto-detect],",
          "14:       [AS_IF(",
          "15:         [test -d \"$ac_cv_with_libbfio\"],",
          "16:         [CFLAGS=\"$CFLAGS -I${ac_cv_with_libbfio}/include\"",
          "17:         LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libbfio}/lib\"],",
          "18:         [AC_MSG_FAILURE(",
          "19:           [no such directory: $ac_cv_with_libbfio],",
          "20:           [1])",
          "21:         ])",
          "22:         ac_cv_libbfio=check],",
          "23:       [dnl Check for a pkg-config file",
          "24:       AS_IF(",
          "25:         [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "26:         [PKG_CHECK_MODULES(",
          "27:           [libbfio],",
          "28:           [libbfio >= 20160108],",
          "29:           [ac_cv_libbfio=yes],",
          "30:           [ac_cv_libbfio=check])",
          "31:         ])",
          "32:       AS_IF(",
          "33:         [test \"x$ac_cv_libbfio\" = xyes && test \"x$ac_cv_enable_wide_character_type\" != xno],",
          "34:         [AC_CACHE_CHECK(",
          "35:          [whether libbfio/features.h defines LIBBFIO_HAVE_WIDE_CHARACTER_TYPE as 1],",
          "36:          [ac_cv_header_libbfio_features_h_have_wide_character_type],",
          "37:          [AC_LANG_PUSH(C)",
          "38:          AC_COMPILE_IFELSE(",
          "39:            [AC_LANG_PROGRAM(",
          "40:              [[#include <libbfio/features.h>]],",
          "41:              [[#if !defined( LIBBFIO_HAVE_WIDE_CHARACTER_TYPE ) || ( LIBBFIO_HAVE_WIDE_CHARACTER_TYPE != 1 )",
          "44:            [ac_cv_header_libbfio_features_h_have_wide_character_type=yes],",
          "45:            [ac_cv_header_libbfio_features_h_have_wide_character_type=no])",
          "46:          AC_LANG_POP(C)],",
          "49:         AS_IF(",
          "50:           [test \"x$ac_cv_header_libbfio_features_h_have_wide_character_type\" = xno],",
          "51:           [ac_cv_libbfio=no])",
          "52:         ])",
          "54:         [test \"x$ac_cv_libbfio\" = xyes],",
          "55:         [ac_cv_libbfio_CPPFLAGS=\"$pkg_cv_libbfio_CFLAGS\"",
          "56:         ac_cv_libbfio_LIBADD=\"$pkg_cv_libbfio_LIBS\"])",
          "57:       ])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "280:           [ac_cv_libbfio_dummy=yes],",
          "281:           [ac_cv_libbfio=no])",
          "285:       ])",
          "286:     ])",
          "",
          "[Removed Lines]",
          "283:         ac_cv_libbfio_LIBADD=\"-lbfio\"",
          "284:         ])",
          "",
          "[Added Lines]",
          "284:         ac_cv_libbfio_LIBADD=\"-lbfio\"])",
          "285:       ])",
          "286:     AS_IF(",
          "287:       [test \"x$ac_cv_with_libbfio\" != x && test \"x$ac_cv_with_libbfio\" != xauto-detect && test \"x$ac_cv_libbfio\" != xyes],",
          "288:       [AC_MSG_FAILURE(",
          "289:         [unable to find supported libbfio in directory: $ac_cv_with_libbfio],",
          "290:         [1])",
          "",
          "---------------"
        ],
        "m4/libcdata.m4||m4/libcdata.m4": [
          "File: m4/libcdata.m4 -> m4/libcdata.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: dnl",
          "5: dnl Function to detect if libcdata is available",
          "6: dnl ac_libcdata_dummy is used to prevent AC_CHECK_LIB adding unnecessary -l<library> arguments",
          "7: AC_DEFUN([AX_LIBCDATA_CHECK_LIB],",
          "21:     [ac_cv_libcdata=no],",
          "23:     AS_IF(",
          "30:       ])",
          "37:     AS_IF(",
          "38:       [test \"x$ac_cv_libcdata\" = xcheck],",
          "39:       [dnl Check for headers",
          "",
          "[Removed Lines]",
          "1: dnl Checks for libcdata or required headers and functions",
          "3: dnl Version: 20180316",
          "8:   [dnl Check if parameters were provided",
          "9:   AS_IF(",
          "10:     [test \"x$ac_cv_with_libcdata\" != x && test \"x$ac_cv_with_libcdata\" != xno && test \"x$ac_cv_with_libcdata\" != xauto-detect],",
          "11:     [AS_IF(",
          "12:       [test -d \"$ac_cv_with_libcdata\"],",
          "13:       [CFLAGS=\"$CFLAGS -I${ac_cv_with_libcdata}/include\"",
          "14:       LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libcdata}/lib\"],",
          "15:       [AC_MSG_WARN([no such directory: $ac_cv_with_libcdata])",
          "16:       ])",
          "17:     ])",
          "19:   AS_IF(",
          "20:     [test \"x$ac_cv_with_libcdata\" = xno],",
          "22:     [dnl Check for a pkg-config file",
          "24:       [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "25:       [PKG_CHECK_MODULES(",
          "26:         [libcdata],",
          "27:         [libcdata >= 20160108],",
          "28:         [ac_cv_libcdata=yes],",
          "29:         [ac_cv_libcdata=check])",
          "32:     AS_IF(",
          "33:       [test \"x$ac_cv_libcdata\" = xyes],",
          "34:       [ac_cv_libcdata_CPPFLAGS=\"$pkg_cv_libcdata_CFLAGS\"",
          "35:       ac_cv_libcdata_LIBADD=\"$pkg_cv_libcdata_LIBS\"])",
          "",
          "[Added Lines]",
          "1: dnl Checks for libcdata required headers and functions",
          "3: dnl Version: 20181117",
          "8:   [AS_IF(",
          "9:     [test \"x$ac_cv_enable_shared_libs\" = xno || test \"x$ac_cv_with_libcdata\" = xno],",
          "11:     [dnl Check if the directory provided as parameter exists",
          "13:       [test \"x$ac_cv_with_libcdata\" != x && test \"x$ac_cv_with_libcdata\" != xauto-detect],",
          "14:       [AS_IF(",
          "15:         [test -d \"$ac_cv_with_libcdata\"],",
          "16:         [CFLAGS=\"$CFLAGS -I${ac_cv_with_libcdata}/include\"",
          "17:         LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libcdata}/lib\"],",
          "18:         [AC_MSG_FAILURE(",
          "19:           [no such directory: $ac_cv_with_libcdata],",
          "20:           [1])",
          "21:         ])",
          "22:         ac_cv_libcdata=check],",
          "23:       [dnl Check for a pkg-config file",
          "24:       AS_IF(",
          "25:         [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "26:         [PKG_CHECK_MODULES(",
          "27:           [libcdata],",
          "28:           [libcdata >= 20160108],",
          "29:           [ac_cv_libcdata=yes],",
          "30:           [ac_cv_libcdata=check])",
          "31:         ])",
          "32:       AS_IF(",
          "33:         [test \"x$ac_cv_libcdata\" = xyes],",
          "34:         [ac_cv_libcdata_CPPFLAGS=\"$pkg_cv_libcdata_CFLAGS\"",
          "35:         ac_cv_libcdata_LIBADD=\"$pkg_cv_libcdata_LIBS\"])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "478:           [ac_cv_libcdata_dummy=yes],",
          "479:           [ac_cv_libcdata=no])",
          "483:       ])",
          "484:     ])",
          "",
          "[Removed Lines]",
          "481:         ac_cv_libcdata_LIBADD=\"-lcdata\"",
          "482:         ])",
          "",
          "[Added Lines]",
          "482:         ac_cv_libcdata_LIBADD=\"-lcdata\"])",
          "483:       ])",
          "484:     AS_IF(",
          "485:       [test \"x$ac_cv_with_libcdata\" != x && test \"x$ac_cv_with_libcdata\" != xauto-detect && test \"x$ac_cv_libcdata\" != xyes],",
          "486:       [AC_MSG_FAILURE(",
          "487:         [unable to find supported libcdata in directory: $ac_cv_with_libcdata],",
          "488:         [1])",
          "",
          "---------------"
        ],
        "m4/libcdirectory.m4||m4/libcdirectory.m4": [
          "File: m4/libcdirectory.m4 -> m4/libcdirectory.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: dnl",
          "5: dnl Function to detect if libcdirectory is available",
          "6: dnl ac_libcdirectory_dummy is used to prevent AC_CHECK_LIB adding unnecessary -l<library> arguments",
          "7: AC_DEFUN([AX_LIBCDIRECTORY_CHECK_LIB],",
          "21:     [ac_cv_libcdirectory=no],",
          "23:     AS_IF(",
          "42: #error LIBCDIRECTORY_HAVE_WIDE_CHARACTER_TYPE not defined",
          "43: #endif]] )],",
          "45:          [ac_cv_header_libcdirectory_features_h_have_wide_character_type=no])",
          "49:       AS_IF(",
          "59:     AS_IF(",
          "60:       [test \"x$ac_cv_libcdirectory\" = xcheck],",
          "",
          "[Removed Lines]",
          "1: dnl Checks for libcdirectory or required headers and functions",
          "3: dnl Version: 20180407",
          "8:   [dnl Check if parameters were provided",
          "9:   AS_IF(",
          "10:     [test \"x$ac_cv_with_libcdirectory\" != x && test \"x$ac_cv_with_libcdirectory\" != xno && test \"x$ac_cv_with_libcdirectory\" != xauto-detect],",
          "11:     [AS_IF(",
          "12:       [test -d \"$ac_cv_with_libcdirectory\"],",
          "13:       [CFLAGS=\"$CFLAGS -I${ac_cv_with_libcdirectory}/include\"",
          "14:       LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libcdirectory}/lib\"],",
          "15:       [AC_MSG_WARN([no such directory: $ac_cv_with_libcdirectory])",
          "16:       ])",
          "17:     ])",
          "19:   AS_IF(",
          "20:     [test \"x$ac_cv_with_libcdirectory\" = xno],",
          "22:     [dnl Check for a pkg-config file",
          "24:       [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "25:       [PKG_CHECK_MODULES(",
          "26:         [libcdirectory],",
          "27:         [libcdirectory >= 20120423],",
          "28:         [ac_cv_libcdirectory=yes],",
          "29:         [ac_cv_libcdirectory=check])",
          "30:       ])",
          "32:     AS_IF(",
          "33:       [test \"x$ac_cv_libcdirectory\" = xyes && test \"x$ac_cv_enable_wide_character_type\" != xno],",
          "34:       [AC_CACHE_CHECK(",
          "35:        [whether libcdirectory/features.h defines LIBCDIRECTORY_HAVE_WIDE_CHARACTER_TYPE as 1],",
          "36:        [ac_cv_header_libcdirectory_features_h_have_wide_character_type],",
          "37:        [AC_LANG_PUSH(C)",
          "38:        AC_COMPILE_IFELSE(",
          "39:          [AC_LANG_PROGRAM(",
          "40:            [[#include <libcdirectory/features.h>]],",
          "41:            [[#if !defined( LIBCDIRECTORY_HAVE_WIDE_CHARACTER_TYPE ) || ( LIBCDIRECTORY_HAVE_WIDE_CHARACTER_TYPE != 1 )",
          "44:          [ac_cv_header_libcdirectory_features_h_have_wide_character_type=yes],",
          "46:        AC_LANG_POP(C)],",
          "47:        [ac_cv_header_libcdirectory_features_h_have_wide_character_type=no])",
          "50:         [test \"x$ac_cv_header_libcdirectory_features_h_have_wide_character_type\" = xno],",
          "51:         [ac_cv_libcdirectory=no])",
          "52:     ])",
          "54:     AS_IF(",
          "55:       [test \"x$ac_cv_libcdirectory\" = xyes],",
          "56:       [ac_cv_libcdirectory_CPPFLAGS=\"$pkg_cv_libcdirectory_CFLAGS\"",
          "57:       ac_cv_libcdirectory_LIBADD=\"$pkg_cv_libcdirectory_LIBS\"])",
          "",
          "[Added Lines]",
          "1: dnl Checks for libcdirectory required headers and functions",
          "3: dnl Version: 20181117",
          "8:   [AS_IF(",
          "9:     [test \"x$ac_cv_enable_shared_libs\" = xno || test \"x$ac_cv_with_libcdirectory\" = xno],",
          "11:     [dnl Check if the directory provided as parameter exists",
          "13:       [test \"x$ac_cv_with_libcdirectory\" != x && test \"x$ac_cv_with_libcdirectory\" != xauto-detect],",
          "14:       [AS_IF(",
          "15:         [test -d \"$ac_cv_with_libcdirectory\"],",
          "16:         [CFLAGS=\"$CFLAGS -I${ac_cv_with_libcdirectory}/include\"",
          "17:         LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libcdirectory}/lib\"],",
          "18:         [AC_MSG_FAILURE(",
          "19:           [no such directory: $ac_cv_with_libcdirectory],",
          "20:           [1])",
          "21:         ])",
          "22:         ac_cv_libcdirectory=check],",
          "23:       [dnl Check for a pkg-config file",
          "24:       AS_IF(",
          "25:         [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "26:         [PKG_CHECK_MODULES(",
          "27:           [libcdirectory],",
          "28:           [libcdirectory >= 20120423],",
          "29:           [ac_cv_libcdirectory=yes],",
          "30:           [ac_cv_libcdirectory=check])",
          "31:         ])",
          "32:       AS_IF(",
          "33:         [test \"x$ac_cv_libcdirectory\" = xyes && test \"x$ac_cv_enable_wide_character_type\" != xno],",
          "34:         [AC_CACHE_CHECK(",
          "35:          [whether libcdirectory/features.h defines LIBCDIRECTORY_HAVE_WIDE_CHARACTER_TYPE as 1],",
          "36:          [ac_cv_header_libcdirectory_features_h_have_wide_character_type],",
          "37:          [AC_LANG_PUSH(C)",
          "38:          AC_COMPILE_IFELSE(",
          "39:            [AC_LANG_PROGRAM(",
          "40:              [[#include <libcdirectory/features.h>]],",
          "41:              [[#if !defined( LIBCDIRECTORY_HAVE_WIDE_CHARACTER_TYPE ) || ( LIBCDIRECTORY_HAVE_WIDE_CHARACTER_TYPE != 1 )",
          "44:            [ac_cv_header_libcdirectory_features_h_have_wide_character_type=yes],",
          "45:            [ac_cv_header_libcdirectory_features_h_have_wide_character_type=no])",
          "46:          AC_LANG_POP(C)],",
          "49:         AS_IF(",
          "50:           [test \"x$ac_cv_header_libcdirectory_features_h_have_wide_character_type\" = xno],",
          "51:           [ac_cv_libcdirectory=no])",
          "52:         ])",
          "54:         [test \"x$ac_cv_libcdirectory\" = xyes],",
          "55:         [ac_cv_libcdirectory_CPPFLAGS=\"$pkg_cv_libcdirectory_CFLAGS\"",
          "56:         ac_cv_libcdirectory_LIBADD=\"$pkg_cv_libcdirectory_LIBS\"])",
          "57:       ])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "153:             [ac_cv_libcdirectory=no])",
          "154:           ])",
          "158:       ])",
          "159:     ])",
          "",
          "[Removed Lines]",
          "156:         ac_cv_libcdirectory_LIBADD=\"-lcdirectory\"",
          "157:         ])",
          "",
          "[Added Lines]",
          "156:         ac_cv_libcdirectory_LIBADD=\"-lcdirectory\"])",
          "157:       ])",
          "158:     AS_IF(",
          "159:       [test \"x$ac_cv_with_libcdirectory\" != x && test \"x$ac_cv_with_libcdirectory\" != xauto-detect && test \"x$ac_cv_libcdirectory\" != xyes],",
          "160:       [AC_MSG_FAILURE(",
          "161:         [unable to find supported libcdirectory in directory: $ac_cv_with_libcdirectory],",
          "162:         [1])",
          "",
          "---------------"
        ],
        "m4/libcerror.m4||m4/libcerror.m4": [
          "File: m4/libcerror.m4 -> m4/libcerror.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: dnl",
          "5: dnl Function to detect if libcerror is available",
          "6: dnl ac_libcerror_dummy is used to prevent AC_CHECK_LIB adding unnecessary -l<library> arguments",
          "7: AC_DEFUN([AX_LIBCERROR_CHECK_LIB],",
          "21:     [ac_cv_libcerror=no],",
          "23:     AS_IF(",
          "30:       ])",
          "37:     AS_IF(",
          "38:       [test \"x$ac_cv_libcerror\" = xcheck],",
          "39:       [dnl Check for headers",
          "",
          "[Removed Lines]",
          "1: dnl Checks for libcerror or required headers and functions",
          "3: dnl Version: 20170904",
          "8:   [dnl Check if parameters were provided",
          "9:   AS_IF(",
          "10:     [test \"x$ac_cv_with_libcerror\" != x && test \"x$ac_cv_with_libcerror\" != xno && test \"x$ac_cv_with_libcerror\" != xauto-detect],",
          "11:     [AS_IF(",
          "12:       [test -d \"$ac_cv_with_libcerror\"],",
          "13:       [CFLAGS=\"$CFLAGS -I${ac_cv_with_libcerror}/include\"",
          "14:       LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libcerror}/lib\"],",
          "15:       [AC_MSG_WARN([no such directory: $ac_cv_with_libcerror])",
          "16:       ])",
          "17:     ])",
          "19:   AS_IF(",
          "20:     [test \"x$ac_cv_with_libcerror\" = xno],",
          "22:     [dnl Check for a pkg-config file",
          "24:       [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "25:       [PKG_CHECK_MODULES(",
          "26:         [libcerror],",
          "27:         [libcerror >= 20120425],",
          "28:         [ac_cv_libcerror=yes],",
          "29:         [ac_cv_libcerror=check])",
          "32:     AS_IF(",
          "33:       [test \"x$ac_cv_libcerror\" = xyes],",
          "34:       [ac_cv_libcerror_CPPFLAGS=\"$pkg_cv_libcerror_CFLAGS\"",
          "35:       ac_cv_libcerror_LIBADD=\"$pkg_cv_libcerror_LIBS\"])",
          "",
          "[Added Lines]",
          "1: dnl Checks for libcerror required headers and functions",
          "3: dnl Version: 20181117",
          "8:   [AS_IF(",
          "9:     [test \"x$ac_cv_enable_shared_libs\" = xno || test \"x$ac_cv_with_libcerror\" = xno],",
          "11:     [dnl Check if the directory provided as parameter exists",
          "13:       [test \"x$ac_cv_with_libcerror\" != x && test \"x$ac_cv_with_libcerror\" != xauto-detect],",
          "14:       [AS_IF(",
          "15:         [test -d \"$ac_cv_with_libcerror\"],",
          "16:         [CFLAGS=\"$CFLAGS -I${ac_cv_with_libcerror}/include\"",
          "17:         LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libcerror}/lib\"],",
          "18:         [AC_MSG_FAILURE(",
          "19:           [no such directory: $ac_cv_with_libcerror],",
          "20:           [1])",
          "21:         ])",
          "22:         ac_cv_libcerror=check],",
          "23:       [dnl Check for a pkg-config file",
          "24:       AS_IF(",
          "25:         [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "26:         [PKG_CHECK_MODULES(",
          "27:           [libcerror],",
          "28:           [libcerror >= 20120425],",
          "29:           [ac_cv_libcerror=yes],",
          "30:           [ac_cv_libcerror=check])",
          "31:         ])",
          "32:       AS_IF(",
          "33:         [test \"x$ac_cv_libcerror\" = xyes],",
          "34:         [ac_cv_libcerror_CPPFLAGS=\"$pkg_cv_libcerror_CFLAGS\"",
          "35:         ac_cv_libcerror_LIBADD=\"$pkg_cv_libcerror_LIBS\"])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:           [ac_cv_libcerror_dummy=yes],",
          "96:           [ac_cv_libcerror=no])",
          "100:       ])",
          "101:     ])",
          "",
          "[Removed Lines]",
          "98:         ac_cv_libcerror_LIBADD=\"-lcerror\"",
          "99:         ])",
          "",
          "[Added Lines]",
          "99:         ac_cv_libcerror_LIBADD=\"-lcerror\"])",
          "100:       ])",
          "101:     AS_IF(",
          "102:       [test \"x$ac_cv_with_libcerror\" != x && test \"x$ac_cv_with_libcerror\" != xauto-detect && test \"x$ac_cv_libcerror\" != xyes],",
          "103:       [AC_MSG_FAILURE(",
          "104:         [unable to find supported libcerror in directory: $ac_cv_with_libcerror],",
          "105:         [1])",
          "",
          "---------------"
        ],
        "m4/libcfile.m4||m4/libcfile.m4": [
          "File: m4/libcfile.m4 -> m4/libcfile.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: dnl",
          "5: dnl Function to detect if libcfile is available",
          "6: dnl ac_libcfile_dummy is used to prevent AC_CHECK_LIB adding unnecessary -l<library> arguments",
          "7: AC_DEFUN([AX_LIBCFILE_CHECK_LIB],",
          "21:     [ac_cv_libcfile=no],",
          "23:     AS_IF(",
          "42: #error LIBCFILE_HAVE_WIDE_CHARACTER_TYPE not defined",
          "43: #endif]] )],",
          "45:          [ac_cv_header_libcfile_features_h_have_wide_character_type=no])",
          "49:       AS_IF(",
          "59:     AS_IF(",
          "60:       [test \"x$ac_cv_libcfile\" = xcheck],",
          "",
          "[Removed Lines]",
          "1: dnl Checks for libcfile or required headers and functions",
          "3: dnl Version: 20180407",
          "8:   [dnl Check if parameters were provided",
          "9:   AS_IF(",
          "10:     [test \"x$ac_cv_with_libcfile\" != x && test \"x$ac_cv_with_libcfile\" != xno && test \"x$ac_cv_with_libcfile\" != xauto-detect],",
          "11:     [AS_IF(",
          "12:       [test -d \"$ac_cv_with_libcfile\"],",
          "13:       [CFLAGS=\"$CFLAGS -I${ac_cv_with_libcfile}/include\"",
          "14:       LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libcfile}/lib\"],",
          "15:       [AC_MSG_WARN([no such directory: $ac_cv_with_libcfile])",
          "16:       ])",
          "17:     ])",
          "19:   AS_IF(",
          "20:     [test \"x$ac_cv_with_libcfile\" = xno],",
          "22:     [dnl Check for a pkg-config file",
          "24:       [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "25:       [PKG_CHECK_MODULES(",
          "26:         [libcfile],",
          "27:         [libcfile >= 20160409],",
          "28:         [ac_cv_libcfile=yes],",
          "29:         [ac_cv_libcfile=check])",
          "30:       ])",
          "32:     AS_IF(",
          "33:       [test \"x$ac_cv_libcfile\" = xyes && test \"x$ac_cv_enable_wide_character_type\" != xno],",
          "34:       [AC_CACHE_CHECK(",
          "35:        [whether libcfile/features.h defines LIBCFILE_HAVE_WIDE_CHARACTER_TYPE as 1],",
          "36:        [ac_cv_header_libcfile_features_h_have_wide_character_type],",
          "37:        [AC_LANG_PUSH(C)",
          "38:        AC_COMPILE_IFELSE(",
          "39:          [AC_LANG_PROGRAM(",
          "40:            [[#include <libcfile/features.h>]],",
          "41:            [[#if !defined( LIBCFILE_HAVE_WIDE_CHARACTER_TYPE ) || ( LIBCFILE_HAVE_WIDE_CHARACTER_TYPE != 1 )",
          "44:          [ac_cv_header_libcfile_features_h_have_wide_character_type=yes],",
          "46:        AC_LANG_POP(C)],",
          "47:        [ac_cv_header_libcfile_features_h_have_wide_character_type=no])",
          "50:         [test \"x$ac_cv_header_libcfile_features_h_have_wide_character_type\" = xno],",
          "51:         [ac_cv_libcfile=no])",
          "52:     ])",
          "54:     AS_IF(",
          "55:       [test \"x$ac_cv_libcfile\" = xyes],",
          "56:       [ac_cv_libcfile_CPPFLAGS=\"$pkg_cv_libcfile_CFLAGS\"",
          "57:       ac_cv_libcfile_LIBADD=\"$pkg_cv_libcfile_LIBS\"])",
          "",
          "[Added Lines]",
          "1: dnl Checks for libcfile required headers and functions",
          "3: dnl Version: 20181117",
          "8:   [AS_IF(",
          "9:     [test \"x$ac_cv_enable_shared_libs\" = xno || test \"x$ac_cv_with_libcfile\" = xno],",
          "11:     [dnl Check if the directory provided as parameter exists",
          "13:       [test \"x$ac_cv_with_libcfile\" != x && test \"x$ac_cv_with_libcfile\" != xauto-detect],",
          "14:       [AS_IF(",
          "15:         [test -d \"$ac_cv_with_libcfile\"],",
          "16:         [CFLAGS=\"$CFLAGS -I${ac_cv_with_libcfile}/include\"",
          "17:         LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libcfile}/lib\"],",
          "18:         [AC_MSG_FAILURE(",
          "19:           [no such directory: $ac_cv_with_libcfile],",
          "20:           [1])",
          "21:         ])",
          "22:         ac_cv_libcfile=check],",
          "23:       [dnl Check for a pkg-config file",
          "24:       AS_IF(",
          "25:         [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "26:         [PKG_CHECK_MODULES(",
          "27:           [libcfile],",
          "28:           [libcfile >= 20160409],",
          "29:           [ac_cv_libcfile=yes],",
          "30:           [ac_cv_libcfile=check])",
          "31:         ])",
          "32:       AS_IF(",
          "33:         [test \"x$ac_cv_libcfile\" = xyes && test \"x$ac_cv_enable_wide_character_type\" != xno],",
          "34:         [AC_CACHE_CHECK(",
          "35:          [whether libcfile/features.h defines LIBCFILE_HAVE_WIDE_CHARACTER_TYPE as 1],",
          "36:          [ac_cv_header_libcfile_features_h_have_wide_character_type],",
          "37:          [AC_LANG_PUSH(C)",
          "38:          AC_COMPILE_IFELSE(",
          "39:            [AC_LANG_PROGRAM(",
          "40:              [[#include <libcfile/features.h>]],",
          "41:              [[#if !defined( LIBCFILE_HAVE_WIDE_CHARACTER_TYPE ) || ( LIBCFILE_HAVE_WIDE_CHARACTER_TYPE != 1 )",
          "44:            [ac_cv_header_libcfile_features_h_have_wide_character_type=yes],",
          "45:            [ac_cv_header_libcfile_features_h_have_wide_character_type=no])",
          "46:          AC_LANG_POP(C)],",
          "49:         AS_IF(",
          "50:           [test \"x$ac_cv_header_libcfile_features_h_have_wide_character_type\" = xno],",
          "51:           [ac_cv_libcfile=no])",
          "52:         ])",
          "54:         [test \"x$ac_cv_libcfile\" = xyes],",
          "55:         [ac_cv_libcfile_CPPFLAGS=\"$pkg_cv_libcfile_CFLAGS\"",
          "56:         ac_cv_libcfile_LIBADD=\"$pkg_cv_libcfile_LIBS\"])",
          "57:       ])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "200:             [ac_cv_libcfile=no])",
          "201:           ])",
          "205:       ])",
          "206:     ])",
          "",
          "[Removed Lines]",
          "203:         ac_cv_libcfile_LIBADD=\"-lcfile\"",
          "204:         ])",
          "",
          "[Added Lines]",
          "203:         ac_cv_libcfile_LIBADD=\"-lcfile\"])",
          "204:       ])",
          "205:     AS_IF(",
          "206:       [test \"x$ac_cv_with_libcfile\" != x && test \"x$ac_cv_with_libcfile\" != xauto-detect && test \"x$ac_cv_libcfile\" != xyes],",
          "207:       [AC_MSG_FAILURE(",
          "208:         [unable to find supported libcfile in directory: $ac_cv_with_libcfile],",
          "209:         [1])",
          "",
          "---------------"
        ],
        "m4/libclocale.m4||m4/libclocale.m4": [
          "File: m4/libclocale.m4 -> m4/libclocale.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: dnl",
          "5: dnl Function to detect if libclocale is available",
          "6: dnl ac_libclocale_dummy is used to prevent AC_CHECK_LIB adding unnecessary -l<library> arguments",
          "7: AC_DEFUN([AX_LIBCLOCALE_CHECK_LIB],",
          "21:     [ac_cv_libclocale=no],",
          "23:     AS_IF(",
          "42: #error LIBCLOCALE_HAVE_WIDE_CHARACTER_TYPE not defined",
          "43: #endif]] )],",
          "49:       AS_IF(",
          "59:     AS_IF(",
          "60:       [test \"x$ac_cv_libclocale\" = xcheck],",
          "",
          "[Removed Lines]",
          "1: dnl Checks for libclocale or required headers and functions",
          "3: dnl Version: 20180407",
          "8:   [dnl Check if parameters were provided",
          "9:   AS_IF(",
          "10:     [test \"x$ac_cv_with_libclocale\" != x && test \"x$ac_cv_with_libclocale\" != xno && test \"x$ac_cv_with_libclocale\" != xauto-detect],",
          "11:     [AS_IF(",
          "12:       [test -d \"$ac_cv_with_libclocale\"],",
          "13:       [CFLAGS=\"$CFLAGS -I${ac_cv_with_libclocale}/include\"",
          "14:       LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libclocale}/lib\"],",
          "15:       [AC_MSG_WARN([no such directory: $ac_cv_with_libclocale])",
          "16:       ])",
          "17:     ])",
          "19:   AS_IF(",
          "20:     [test \"x$ac_cv_with_libclocale\" = xno],",
          "22:     [dnl Check for a pkg-config file",
          "24:       [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "25:       [PKG_CHECK_MODULES(",
          "26:         [libclocale],",
          "27:         [libclocale >= 20120425],",
          "28:         [ac_cv_libclocale=yes],",
          "29:         [ac_cv_libclocale=check])",
          "30:       ])",
          "32:     AS_IF(",
          "33:       [test \"x$ac_cv_libclocale\" = xyes && test \"x$ac_cv_enable_wide_character_type\" != xno],",
          "34:       [AC_CACHE_CHECK(",
          "35:        [whether libclocale/features.h defines LIBCLOCALE_HAVE_WIDE_CHARACTER_TYPE as 1],",
          "36:        [ac_cv_header_libclocale_features_h_have_wide_character_type],",
          "37:        [AC_LANG_PUSH(C)",
          "38:        AC_COMPILE_IFELSE(",
          "39:          [AC_LANG_PROGRAM(",
          "40:            [[#include <libclocale/features.h>]],",
          "41:            [[#if !defined( LIBCLOCALE_HAVE_WIDE_CHARACTER_TYPE ) || ( LIBCLOCALE_HAVE_WIDE_CHARACTER_TYPE != 1 )",
          "44:          [ac_cv_header_libclocale_features_h_have_wide_character_type=yes],",
          "45:          [ac_cv_header_libclocale_features_h_have_wide_character_type=no])",
          "46:        AC_LANG_POP(C)],",
          "47:        [ac_cv_header_libclocale_features_h_have_wide_character_type=no])",
          "50:         [test \"x$ac_cv_header_libclocale_features_h_have_wide_character_type\" = xno],",
          "51:         [ac_cv_libclocale=no])",
          "52:     ])",
          "54:     AS_IF(",
          "55:       [test \"x$ac_cv_libclocale\" = xyes],",
          "56:       [ac_cv_libclocale_CPPFLAGS=\"$pkg_cv_libclocale_CFLAGS\"",
          "57:       ac_cv_libclocale_LIBADD=\"$pkg_cv_libclocale_LIBS\"])",
          "",
          "[Added Lines]",
          "1: dnl Checks for libclocale required headers and functions",
          "3: dnl Version: 20181117",
          "8:   [AS_IF(",
          "9:     [test \"x$ac_cv_enable_shared_libs\" = xno || test \"x$ac_cv_with_libclocale\" = xno],",
          "11:     [dnl Check if the directory provided as parameter exists",
          "13:       [test \"x$ac_cv_with_libclocale\" != x && test \"x$ac_cv_with_libclocale\" != xauto-detect],",
          "14:       [AS_IF(",
          "15:         [test -d \"$ac_cv_with_libclocale\"],",
          "16:         [CFLAGS=\"$CFLAGS -I${ac_cv_with_libclocale}/include\"",
          "17:         LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libclocale}/lib\"],",
          "18:         [AC_MSG_FAILURE(",
          "19:           [no such directory: $ac_cv_with_libclocale],",
          "20:           [1])",
          "21:         ])",
          "22:         ac_cv_libclocale=check],",
          "23:       [dnl Check for a pkg-config file",
          "24:       AS_IF(",
          "25:         [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "26:         [PKG_CHECK_MODULES(",
          "27:           [libclocale],",
          "28:           [libclocale >= 20120425],",
          "29:           [ac_cv_libclocale=yes],",
          "30:           [ac_cv_libclocale=check])",
          "31:         ])",
          "32:       AS_IF(",
          "33:         [test \"x$ac_cv_libclocale\" = xyes && test \"x$ac_cv_enable_wide_character_type\" != xno],",
          "34:         [AC_CACHE_CHECK(",
          "35:           [whether libclocale/features.h defines LIBCLOCALE_HAVE_WIDE_CHARACTER_TYPE as 1],",
          "36:           [ac_cv_header_libclocale_features_h_have_wide_character_type],",
          "37:           [AC_LANG_PUSH(C)",
          "38:           AC_COMPILE_IFELSE(",
          "39:             [AC_LANG_PROGRAM(",
          "40:               [[#include <libclocale/features.h>]],",
          "41:               [[#if !defined( LIBCLOCALE_HAVE_WIDE_CHARACTER_TYPE ) || ( LIBCLOCALE_HAVE_WIDE_CHARACTER_TYPE != 1 )",
          "44:             [ac_cv_header_libclocale_features_h_have_wide_character_type=yes],",
          "45:             [ac_cv_header_libclocale_features_h_have_wide_character_type=no])",
          "46:           AC_LANG_POP(C)],",
          "47:           [ac_cv_header_libclocale_features_h_have_wide_character_type=no])",
          "49:         AS_IF(",
          "50:           [test \"x$ac_cv_header_libclocale_features_h_have_wide_character_type\" = xno],",
          "51:           [ac_cv_libclocale=no])",
          "52:         ])",
          "54:         [test \"x$ac_cv_libclocale\" = xyes],",
          "55:         [ac_cv_libclocale_CPPFLAGS=\"$pkg_cv_libclocale_CFLAGS\"",
          "56:         ac_cv_libclocale_LIBADD=\"$pkg_cv_libclocale_LIBS\"])",
          "57:       ])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:           [ac_cv_libclocale_dummy=yes],",
          "96:           [ac_cv_libclocale=no])",
          "107:         dnl Locale functions",
          "108:         AC_CHECK_LIB(",
          "",
          "[Removed Lines]",
          "98:       AS_IF(",
          "99:         [test \"x$ac_cv_enable_wide_character_type\" != xno],",
          "100:         [AC_CHECK_LIB(",
          "101:           clocale,",
          "102:           libclocale_codepage_copy_from_string_wide,",
          "103:           [ac_cv_libclocale_dummy=yes],",
          "104:           [ac_cv_libclocale=no])",
          "105:         ])",
          "",
          "[Added Lines]",
          "98:         AS_IF(",
          "99:           [test \"x$ac_cv_enable_wide_character_type\" != xno],",
          "100:           [AC_CHECK_LIB(",
          "101:             clocale,",
          "102:             libclocale_codepage_copy_from_string_wide,",
          "103:             [ac_cv_libclocale_dummy=yes],",
          "104:             [ac_cv_libclocale=no])",
          "105:           ])",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123:           [ac_cv_libclocale_dummy=yes],",
          "124:           [ac_cv_libclocale=no])",
          "128:       ])",
          "129:     ])",
          "",
          "[Removed Lines]",
          "126:         ac_cv_libclocale_LIBADD=\"-lclocale\"",
          "127:         ])",
          "",
          "[Added Lines]",
          "126:         ac_cv_libclocale_LIBADD=\"-lclocale\"])",
          "127:       ])",
          "128:     AS_IF(",
          "129:       [test \"x$ac_cv_with_libclocale\" != x && test \"x$ac_cv_with_libclocale\" != xauto-detect && test \"x$ac_cv_libclocale\" != xyes],",
          "130:       [AC_MSG_FAILURE(",
          "131:         [unable to find supported libclocale in directory: $ac_cv_with_libclocale],",
          "132:         [1])",
          "",
          "---------------"
        ],
        "m4/libcnotify.m4||m4/libcnotify.m4": [
          "File: m4/libcnotify.m4 -> m4/libcnotify.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: dnl",
          "5: dnl Function to detect if libcnotify is available",
          "6: dnl ac_libcnotify_dummy is used to prevent AC_CHECK_LIB adding unnecessary -l<library> arguments",
          "7: AC_DEFUN([AX_LIBCNOTIFY_CHECK_LIB],",
          "21:     [ac_cv_libcnotify=no],",
          "23:     AS_IF(",
          "30:       ])",
          "37:     AS_IF(",
          "38:       [test \"x$ac_cv_libcnotify\" = xcheck],",
          "39:       [dnl Check for headers",
          "",
          "[Removed Lines]",
          "1: dnl Checks for libcnotify or required headers and functions",
          "3: dnl Version: 20170904",
          "8:   [dnl Check if parameters were provided",
          "9:   AS_IF(",
          "10:     [test \"x$ac_cv_with_libcnotify\" != x && test \"x$ac_cv_with_libcnotify\" != xno && test \"x$ac_cv_with_libcnotify\" != xauto-detect],",
          "11:     [AS_IF(",
          "12:       [test -d \"$ac_cv_with_libcnotify\"],",
          "13:       [CFLAGS=\"$CFLAGS -I${ac_cv_with_libcnotify}/include\"",
          "14:       LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libcnotify}/lib\"],",
          "15:       [AC_MSG_WARN([no such directory: $ac_cv_with_libcnotify])",
          "16:       ])",
          "17:     ])",
          "19:   AS_IF(",
          "20:     [test \"x$ac_cv_with_libcnotify\" = xno],",
          "22:     [dnl Check for a pkg-config file",
          "24:       [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "25:       [PKG_CHECK_MODULES(",
          "26:         [libcnotify],",
          "27:         [libcnotify >= 20120425],",
          "28:         [ac_cv_libcnotify=yes],",
          "29:         [ac_cv_libcnotify=check])",
          "32:     AS_IF(",
          "33:       [test \"x$ac_cv_libcnotify\" = xyes],",
          "34:       [ac_cv_libcnotify_CPPFLAGS=\"$pkg_cv_libcnotify_CFLAGS\"",
          "35:       ac_cv_libcnotify_LIBADD=\"$pkg_cv_libcnotify_LIBS\"])",
          "",
          "[Added Lines]",
          "1: dnl Checks for libcnotify required headers and functions",
          "3: dnl Version: 20181117",
          "8:   [AS_IF(",
          "9:     [test \"x$ac_cv_enable_shared_libs\" = xno || test \"x$ac_cv_with_libcnotify\" = xno],",
          "11:     [dnl Check if the directory provided as parameter exists",
          "13:       [test \"x$ac_cv_with_libcnotify\" != x && test \"x$ac_cv_with_libcnotify\" != xauto-detect],",
          "14:       [AS_IF(",
          "15:         [test -d \"$ac_cv_with_libcnotify\"],",
          "16:         [CFLAGS=\"$CFLAGS -I${ac_cv_with_libcnotify}/include\"",
          "17:         LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libcnotify}/lib\"],",
          "18:         [AC_MSG_FAILURE(",
          "19:           [no such directory: $ac_cv_with_libcnotify],",
          "20:           [1])",
          "21:         ])",
          "22:         ac_cv_libcnotify=check],",
          "23:       [dnl Check for a pkg-config file",
          "24:       AS_IF(",
          "25:         [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "26:         [PKG_CHECK_MODULES(",
          "27:           [libcnotify],",
          "28:           [libcnotify >= 20120425],",
          "29:           [ac_cv_libcnotify=yes],",
          "30:           [ac_cv_libcnotify=check])",
          "31:         ])",
          "32:       AS_IF(",
          "33:         [test \"x$ac_cv_libcnotify\" = xyes],",
          "34:         [ac_cv_libcnotify_CPPFLAGS=\"$pkg_cv_libcnotify_CFLAGS\"",
          "35:         ac_cv_libcnotify_LIBADD=\"$pkg_cv_libcnotify_LIBS\"])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:           [ac_cv_libcnotify_dummy=yes],",
          "93:           [ac_cv_libcnotify=no])",
          "97:       ])",
          "98:     ])",
          "",
          "[Removed Lines]",
          "95:         ac_cv_libcnotify_LIBADD=\"-lcnotify\"",
          "96:         ])",
          "",
          "[Added Lines]",
          "96:         ac_cv_libcnotify_LIBADD=\"-lcnotify\"])",
          "97:       ])",
          "98:     AS_IF(",
          "99:       [test \"x$ac_cv_with_libcnotify\" != x && test \"x$ac_cv_with_libcnotify\" != xauto-detect && test \"x$ac_cv_libcnotify\" != xyes],",
          "100:       [AC_MSG_FAILURE(",
          "101:         [unable to find supported libcnotify in directory: $ac_cv_with_libcnotify],",
          "102:         [1])",
          "",
          "---------------"
        ],
        "m4/libcpath.m4||m4/libcpath.m4": [
          "File: m4/libcpath.m4 -> m4/libcpath.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: dnl",
          "5: dnl Function to detect if libcpath is available",
          "6: dnl ac_libcpath_dummy is used to prevent AC_CHECK_LIB adding unnecessary -l<library> arguments",
          "7: AC_DEFUN([AX_LIBCPATH_CHECK_LIB],",
          "21:     [ac_cv_libcpath=no],",
          "23:     AS_IF(",
          "42: #error LIBCPATH_HAVE_WIDE_CHARACTER_TYPE not defined",
          "43: #endif]] )],",
          "45:          [ac_cv_header_libcpath_features_h_have_wide_character_type=no])",
          "49:       AS_IF(",
          "59:     AS_IF(",
          "60:       [test \"x$ac_cv_libcpath\" = xcheck],",
          "",
          "[Removed Lines]",
          "1: dnl Checks for libcpath or required headers and functions",
          "3: dnl Version: 20180716",
          "8:   [dnl Check if parameters were provided",
          "9:   AS_IF(",
          "10:     [test \"x$ac_cv_with_libcpath\" != x && test \"x$ac_cv_with_libcpath\" != xno && test \"x$ac_cv_with_libcpath\" != xauto-detect],",
          "11:     [AS_IF(",
          "12:       [test -d \"$ac_cv_with_libcpath\"],",
          "13:       [CFLAGS=\"$CFLAGS -I${ac_cv_with_libcpath}/include\"",
          "14:       LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libcpath}/lib\"],",
          "15:       [AC_MSG_WARN([no such directory: $ac_cv_with_libcpath])",
          "16:       ])",
          "17:     ])",
          "19:   AS_IF(",
          "20:     [test \"x$ac_cv_with_libcpath\" = xno],",
          "22:     [dnl Check for a pkg-config file",
          "24:       [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "25:       [PKG_CHECK_MODULES(",
          "26:         [libcpath],",
          "27:         [libcpath >= 20180716],",
          "28:         [ac_cv_libcpath=yes],",
          "29:         [ac_cv_libcpath=check])",
          "30:       ])",
          "32:     AS_IF(",
          "33:       [test \"x$ac_cv_libcpath\" = xyes && test \"x$ac_cv_enable_wide_character_type\" != xno],",
          "34:       [AC_CACHE_CHECK(",
          "35:        [whether libcpath/features.h defines LIBCPATH_HAVE_WIDE_CHARACTER_TYPE as 1],",
          "36:        [ac_cv_header_libcpath_features_h_have_wide_character_type],",
          "37:        [AC_LANG_PUSH(C)",
          "38:        AC_COMPILE_IFELSE(",
          "39:          [AC_LANG_PROGRAM(",
          "40:            [[#include <libcpath/features.h>]],",
          "41:            [[#if !defined( LIBCPATH_HAVE_WIDE_CHARACTER_TYPE ) || ( LIBCPATH_HAVE_WIDE_CHARACTER_TYPE != 1 )",
          "44:          [ac_cv_header_libcpath_features_h_have_wide_character_type=yes],",
          "46:        AC_LANG_POP(C)],",
          "47:        [ac_cv_header_libcpath_features_h_have_wide_character_type=no])",
          "50:         [test \"x$ac_cv_header_libcpath_features_h_have_wide_character_type\" = xno],",
          "51:         [ac_cv_libcpath=no])",
          "52:     ])",
          "54:     AS_IF(",
          "55:       [test \"x$ac_cv_libcpath\" = xyes],",
          "56:       [ac_cv_libcpath_CPPFLAGS=\"$pkg_cv_libcpath_CFLAGS\"",
          "57:       ac_cv_libcpath_LIBADD=\"$pkg_cv_libcpath_LIBS\"])",
          "",
          "[Added Lines]",
          "1: dnl Checks for libcpath required headers and functions",
          "3: dnl Version: 20181117",
          "8:   [AS_IF(",
          "9:     [test \"x$ac_cv_enable_shared_libs\" = xno || test \"x$ac_cv_with_libcpath\" = xno],",
          "11:     [dnl Check if the directory provided as parameter exists",
          "13:       [test \"x$ac_cv_with_libcpath\" != x && test \"x$ac_cv_with_libcpath\" != xauto-detect],",
          "14:       [AS_IF(",
          "15:         [test -d \"$ac_cv_with_libcpath\"],",
          "16:         [CFLAGS=\"$CFLAGS -I${ac_cv_with_libcpath}/include\"",
          "17:         LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libcpath}/lib\"],",
          "18:         [AC_MSG_FAILURE(",
          "19:           [no such directory: $ac_cv_with_libcpath],",
          "20:           [1])",
          "21:         ])",
          "22:         ac_cv_libcpath=check],",
          "23:       [dnl Check for a pkg-config file",
          "24:       AS_IF(",
          "25:         [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "26:         [PKG_CHECK_MODULES(",
          "27:           [libcpath],",
          "28:           [libcpath >= 20180716],",
          "29:           [ac_cv_libcpath=yes],",
          "30:           [ac_cv_libcpath=check])",
          "31:         ])",
          "32:       AS_IF(",
          "33:         [test \"x$ac_cv_libcpath\" = xyes && test \"x$ac_cv_enable_wide_character_type\" != xno],",
          "34:         [AC_CACHE_CHECK(",
          "35:          [whether libcpath/features.h defines LIBCPATH_HAVE_WIDE_CHARACTER_TYPE as 1],",
          "36:          [ac_cv_header_libcpath_features_h_have_wide_character_type],",
          "37:          [AC_LANG_PUSH(C)",
          "38:          AC_COMPILE_IFELSE(",
          "39:            [AC_LANG_PROGRAM(",
          "40:              [[#include <libcpath/features.h>]],",
          "41:              [[#if !defined( LIBCPATH_HAVE_WIDE_CHARACTER_TYPE ) || ( LIBCPATH_HAVE_WIDE_CHARACTER_TYPE != 1 )",
          "44:            [ac_cv_header_libcpath_features_h_have_wide_character_type=yes],",
          "45:            [ac_cv_header_libcpath_features_h_have_wide_character_type=no])",
          "46:          AC_LANG_POP(C)],",
          "49:         AS_IF(",
          "50:           [test \"x$ac_cv_header_libcpath_features_h_have_wide_character_type\" = xno],",
          "51:           [ac_cv_libcpath=no])",
          "52:         ])",
          "54:         [test \"x$ac_cv_libcpath\" = xyes],",
          "55:         [ac_cv_libcpath_CPPFLAGS=\"$pkg_cv_libcpath_CFLAGS\"",
          "56:         ac_cv_libcpath_LIBADD=\"$pkg_cv_libcpath_LIBS\"])",
          "57:       ])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149:             [ac_cv_libcpath=no])",
          "150:           ])",
          "154:       ])",
          "155:     ])",
          "",
          "[Removed Lines]",
          "152:         ac_cv_libcpath_LIBADD=\"-lcpath\"",
          "153:         ])",
          "",
          "[Added Lines]",
          "152:         ac_cv_libcpath_LIBADD=\"-lcpath\"])",
          "153:       ])",
          "154:     AS_IF(",
          "155:       [test \"x$ac_cv_with_libcpath\" != x && test \"x$ac_cv_with_libcpath\" != xauto-detect && test \"x$ac_cv_libcpath\" != xyes],",
          "156:       [AC_MSG_FAILURE(",
          "157:         [unable to find supported libcpath in directory: $ac_cv_with_libcpath],",
          "158:         [1])",
          "",
          "---------------"
        ],
        "m4/libcsplit.m4||m4/libcsplit.m4": [
          "File: m4/libcsplit.m4 -> m4/libcsplit.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: dnl",
          "5: dnl Function to detect if libcsplit is available",
          "6: dnl ac_libcsplit_dummy is used to prevent AC_CHECK_LIB adding unnecessary -l<library> arguments",
          "7: AC_DEFUN([AX_LIBCSPLIT_CHECK_LIB],",
          "21:     [ac_cv_libcsplit=no],",
          "23:     AS_IF(",
          "42: #error LIBCSPLIT_HAVE_WIDE_CHARACTER_TYPE not defined",
          "43: #endif]] )],",
          "49:       AS_IF(",
          "59:     AS_IF(",
          "60:       [test \"x$ac_cv_libcsplit\" = xcheck],",
          "",
          "[Removed Lines]",
          "1: dnl Checks for libcsplit or required headers and functions",
          "3: dnl Version: 20180407",
          "8:   [dnl Check if parameters were provided",
          "9:   AS_IF(",
          "10:     [test \"x$ac_cv_with_libcsplit\" != x && test \"x$ac_cv_with_libcsplit\" != xno && test \"x$ac_cv_with_libcsplit\" != xauto-detect],",
          "11:     [AS_IF(",
          "12:       [test -d \"$ac_cv_with_libcsplit\"],",
          "13:       [CFLAGS=\"$CFLAGS -I${ac_cv_with_libcsplit}/include\"",
          "14:       LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libcsplit}/lib\"],",
          "15:       [AC_MSG_WARN([no such directory: $ac_cv_with_libcsplit])",
          "16:     ])",
          "17:   ])",
          "19:   AS_IF(",
          "20:     [test \"x$ac_cv_with_libcsplit\" = xno],",
          "22:     [dnl Check for a pkg-config file",
          "24:       [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "25:       [PKG_CHECK_MODULES(",
          "26:         [libcsplit],",
          "27:         [libcsplit >= 20120701],",
          "28:         [ac_cv_libcsplit=yes],",
          "29:         [ac_cv_libcsplit=check])",
          "30:     ])",
          "32:     AS_IF(",
          "33:       [test \"x$ac_cv_libcsplit\" = xyes && test \"x$ac_cv_enable_wide_character_type\" != xno],",
          "34:       [AC_CACHE_CHECK(",
          "35:        [whether libcsplit/features.h defines LIBCSPLIT_HAVE_WIDE_CHARACTER_TYPE as 1],",
          "36:        [ac_cv_header_libcsplit_features_h_have_wide_character_type],",
          "37:        [AC_LANG_PUSH(C)",
          "38:        AC_COMPILE_IFELSE(",
          "39:          [AC_LANG_PROGRAM(",
          "40:            [[#include <libcsplit/features.h>]],",
          "41:            [[#if !defined( LIBCSPLIT_HAVE_WIDE_CHARACTER_TYPE ) || ( LIBCSPLIT_HAVE_WIDE_CHARACTER_TYPE != 1 )",
          "44:          [ac_cv_header_libcsplit_features_h_have_wide_character_type=yes],",
          "45:          [ac_cv_header_libcsplit_features_h_have_wide_character_type=no])",
          "46:        AC_LANG_POP(C)],",
          "47:        [ac_cv_header_libcsplit_features_h_have_wide_character_type=no])",
          "50:         [test \"x$ac_cv_header_libcsplit_features_h_have_wide_character_type\" = xno],",
          "51:         [ac_cv_libcsplit=no])",
          "52:     ])",
          "54:     AS_IF(",
          "55:       [test \"x$ac_cv_libcsplit\" = xyes],",
          "56:       [ac_cv_libcsplit_CPPFLAGS=\"$pkg_cv_libcsplit_CFLAGS\"",
          "57:       ac_cv_libcsplit_LIBADD=\"$pkg_cv_libcsplit_LIBS\"])",
          "",
          "[Added Lines]",
          "1: dnl Checks for libcsplit required headers and functions",
          "3: dnl Version: 20181117",
          "8:   [AS_IF(",
          "9:     [test \"x$ac_cv_enable_shared_libs\" = xno || test \"x$ac_cv_with_libcsplit\" = xno],",
          "11:     [dnl Check if the directory provided as parameter exists",
          "13:       [test \"x$ac_cv_with_libcsplit\" != x && test \"x$ac_cv_with_libcsplit\" != xauto-detect],",
          "14:       [AS_IF(",
          "15:         [test -d \"$ac_cv_with_libcsplit\"],",
          "16:         [CFLAGS=\"$CFLAGS -I${ac_cv_with_libcsplit}/include\"",
          "17:         LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libcsplit}/lib\"],",
          "18:         [AC_MSG_FAILURE(",
          "19:           [no such directory: $ac_cv_with_libcsplit],",
          "20:           [1])",
          "21:         ])",
          "22:         ac_cv_libcsplit=check],",
          "23:       [dnl Check for a pkg-config file",
          "24:       AS_IF(",
          "25:         [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "26:         [PKG_CHECK_MODULES(",
          "27:           [libcsplit],",
          "28:           [libcsplit >= 20120701],",
          "29:           [ac_cv_libcsplit=yes],",
          "30:           [ac_cv_libcsplit=check])",
          "31:         ])",
          "32:       AS_IF(",
          "33:         [test \"x$ac_cv_libcsplit\" = xyes && test \"x$ac_cv_enable_wide_character_type\" != xno],",
          "34:         [AC_CACHE_CHECK(",
          "35:           [whether libcsplit/features.h defines LIBCSPLIT_HAVE_WIDE_CHARACTER_TYPE as 1],",
          "36:           [ac_cv_header_libcsplit_features_h_have_wide_character_type],",
          "37:           [AC_LANG_PUSH(C)",
          "38:           AC_COMPILE_IFELSE(",
          "39:             [AC_LANG_PROGRAM(",
          "40:               [[#include <libcsplit/features.h>]],",
          "41:               [[#if !defined( LIBCSPLIT_HAVE_WIDE_CHARACTER_TYPE ) || ( LIBCSPLIT_HAVE_WIDE_CHARACTER_TYPE != 1 )",
          "44:             [ac_cv_header_libcsplit_features_h_have_wide_character_type=yes],",
          "45:             [ac_cv_header_libcsplit_features_h_have_wide_character_type=no])",
          "46:           AC_LANG_POP(C)],",
          "47:           [ac_cv_header_libcsplit_features_h_have_wide_character_type=no])",
          "49:          AS_IF(",
          "50:            [test \"x$ac_cv_header_libcsplit_features_h_have_wide_character_type\" = xno],",
          "51:            [ac_cv_libcsplit=no])",
          "52:         ])",
          "54:         [test \"x$ac_cv_libcsplit\" = xyes],",
          "55:         [ac_cv_libcsplit_CPPFLAGS=\"$pkg_cv_libcsplit_CFLAGS\"",
          "56:         ac_cv_libcsplit_LIBADD=\"$pkg_cv_libcsplit_LIBS\"])",
          "57:       ])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144:             [ac_cv_libcsplit=no])",
          "145:           ])",
          "149:       ])",
          "150:     ])",
          "",
          "[Removed Lines]",
          "147:         ac_cv_libcsplit_LIBADD=\"-lcsplit\"",
          "148:         ])",
          "",
          "[Added Lines]",
          "147:         ac_cv_libcsplit_LIBADD=\"-lcsplit\"])",
          "148:       ])",
          "149:     AS_IF(",
          "150:       [test \"x$ac_cv_with_libcsplit\" != x && test \"x$ac_cv_with_libcsplit\" != xauto-detect && test \"x$ac_cv_libcsplit\" != xyes],",
          "151:       [AC_MSG_FAILURE(",
          "152:         [unable to find supported libcsplit in directory: $ac_cv_with_libcsplit],",
          "153:         [1])",
          "",
          "---------------"
        ],
        "m4/libcthreads.m4||m4/libcthreads.m4": [
          "File: m4/libcthreads.m4 -> m4/libcthreads.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: dnl",
          "5: dnl Function to detect if libcthreads is available",
          "6: dnl ac_libcthreads_dummy is used to prevent AC_CHECK_LIB adding unnecessary -l<library> arguments",
          "7: AC_DEFUN([AX_LIBCTHREADS_CHECK_LIB],",
          "21:     [ac_cv_libcthreads=no],",
          "23:     AS_IF(",
          "30:       ])",
          "37:     AS_IF(",
          "38:       [test \"x$ac_cv_libcthreads\" = xcheck],",
          "39:       [dnl Check for headers",
          "",
          "[Removed Lines]",
          "1: dnl Checks for libcthreads or required headers and functions",
          "3: dnl Version: 20170904",
          "8:   [dnl Check if parameters were provided",
          "9:   AS_IF(",
          "10:     [test \"x$ac_cv_with_libcthreads\" != x && test \"x$ac_cv_with_libcthreads\" != xno && test \"x$ac_cv_with_libcthreads\" != xauto-detect],",
          "11:     [AS_IF(",
          "12:       [test -d \"$ac_cv_with_libcthreads\"],",
          "13:       [CFLAGS=\"$CFLAGS -I${ac_cv_with_libcthreads}/include\"",
          "14:       LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libcthreads}/lib\"],",
          "15:       [AC_MSG_WARN([no such directory: $ac_cv_with_libcthreads])",
          "16:       ])",
          "17:     ])",
          "19:   AS_IF(",
          "20:     [test \"x$ac_cv_with_libcthreads\" = xno],",
          "22:     [dnl Check for a pkg-config file",
          "24:       [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "25:       [PKG_CHECK_MODULES(",
          "26:         [libcthreads],",
          "27:         [libcthreads >= 20160404],",
          "28:         [ac_cv_libcthreads=yes],",
          "29:         [ac_cv_libcthreads=check])",
          "32:     AS_IF(",
          "33:       [test \"x$ac_cv_libcthreads\" = xyes],",
          "34:       [ac_cv_libcthreads_CPPFLAGS=\"$pkg_cv_libcthreads_CFLAGS\"",
          "35:       ac_cv_libcthreads_LIBADD=\"$pkg_cv_libcthreads_LIBS\"])",
          "",
          "[Added Lines]",
          "1: dnl Checks for libcthreads required headers and functions",
          "3: dnl Version: 20181117",
          "8:   [AS_IF(",
          "9:     [test \"x$ac_cv_enable_shared_libs\" = xno || test \"x$ac_cv_with_libcthreads\" = xno],",
          "11:     [dnl Check if the directory provided as parameter exists",
          "13:       [test \"x$ac_cv_with_libcthreads\" != x && test \"x$ac_cv_with_libcthreads\" != xauto-detect],",
          "14:       [AS_IF(",
          "15:         [test -d \"$ac_cv_with_libcthreads\"],",
          "16:         [CFLAGS=\"$CFLAGS -I${ac_cv_with_libcthreads}/include\"",
          "17:         LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libcthreads}/lib\"],",
          "18:         [AC_MSG_FAILURE(",
          "19:           [no such directory: $ac_cv_with_libcthreads],",
          "20:           [1])",
          "21:         ])",
          "22:         ac_cv_libcthreads=check],",
          "23:       [dnl Check for a pkg-config file",
          "24:       AS_IF(",
          "25:         [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "26:         [PKG_CHECK_MODULES(",
          "27:           [libcthreads],",
          "28:           [libcthreads >= 20160404],",
          "29:           [ac_cv_libcthreads=yes],",
          "30:           [ac_cv_libcthreads=check])",
          "31:         ])",
          "32:       AS_IF(",
          "33:         [test \"x$ac_cv_libcthreads\" = xyes],",
          "34:         [ac_cv_libcthreads_CPPFLAGS=\"$pkg_cv_libcthreads_CFLAGS\"",
          "35:         ac_cv_libcthreads_LIBADD=\"$pkg_cv_libcthreads_LIBS\"])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "242:           [ac_cv_libcthreads_dummy=yes],",
          "243:           [ac_cv_libcthreads=no])",
          "247:       ])",
          "248:     ])",
          "",
          "[Removed Lines]",
          "245:         ac_cv_libcthreads_LIBADD=\"-lcthreads\"",
          "246:         ])",
          "",
          "[Added Lines]",
          "246:         ac_cv_libcthreads_LIBADD=\"-lcthreads\"])",
          "247:       ])",
          "249:     AS_IF(",
          "250:       [test \"x$ac_cv_with_libcthreads\" != x && test \"x$ac_cv_with_libcthreads\" != xauto-detect && test \"x$ac_cv_libcthreads\" != xyes],",
          "251:       [AC_MSG_FAILURE(",
          "252:         [unable to find supported libcthreads in directory: $ac_cv_with_libcthreads],",
          "253:         [1])",
          "",
          "---------------"
        ],
        "m4/libexe.m4||m4/libexe.m4": [
          "File: m4/libexe.m4 -> m4/libexe.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: dnl",
          "5: dnl Function to detect if libexe is available",
          "6: dnl ac_libexe_dummy is used to prevent AC_CHECK_LIB adding unnecessary -l<library> arguments",
          "7: AC_DEFUN([AX_LIBEXE_CHECK_LIB],",
          "11:   [AS_IF(",
          "54:     ])",
          "74:   ])",
          "77: dnl Function to detect how to enable libexe",
          "78: AC_DEFUN([AX_LIBEXE_CHECK_ENABLE],",
          "",
          "[Removed Lines]",
          "1: dnl Functions for libexe",
          "3: dnl Version: 20120501",
          "8:  [dnl Check if parameters were provided",
          "9:  AS_IF(",
          "10:   [test \"x$ac_cv_with_libexe\" != x && test \"x$ac_cv_with_libexe\" != xno && test \"x$ac_cv_with_libexe\" != xauto-detect],",
          "12:    [test -d \"$ac_cv_with_libexe\"],",
          "13:    [CFLAGS=\"$CFLAGS -I${ac_cv_with_libexe}/include\"",
          "14:    LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libexe}/lib\"],",
          "15:    [AC_MSG_WARN([no such directory: $ac_cv_with_libexe])",
          "16:    ])",
          "17:   ])",
          "19:  AS_IF(",
          "20:   [test \"x$ac_cv_with_libexe\" = xno],",
          "21:   [ac_cv_libexe=no],",
          "22:   [dnl Check for a pkg-config file",
          "23:   AS_IF(",
          "24:    [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "25:    [PKG_CHECK_MODULES(",
          "26:     [libexe],",
          "27:     [libexe >= 20120405],",
          "28:     [ac_cv_libexe=yes],",
          "29:     [ac_cv_libexe=no])",
          "30:    ])",
          "32:   AS_IF(",
          "33:    [test \"x$ac_cv_libexe\" = xyes],",
          "34:    [ac_cv_libexe_CPPFLAGS=\"$pkg_cv_libexe_CFLAGS\"",
          "35:    ac_cv_libexe_LIBADD=\"$pkg_cv_libexe_LIBS\"],",
          "36:    [dnl Check for headers",
          "37:    AC_CHECK_HEADERS([libexe.h])",
          "39:    AS_IF(",
          "40:     [test \"x$ac_cv_header_libexe_h\" = xno],",
          "41:     [ac_cv_libexe=no],",
          "42:     [dnl Check for the individual functions",
          "43:     ac_cv_libexe=yes",
          "45:     AC_CHECK_LIB(",
          "46:      exe,",
          "47:      libexe_get_version,",
          "48:      [ac_cv_libexe_dummy=yes],",
          "49:      [ac_cv_libexe=no])",
          "51:     dnl TODO add functions",
          "53:     ac_cv_libexe_LIBADD=\"-lexe\"",
          "55:    ])",
          "56:   ])",
          "58:  AS_IF(",
          "59:   [test \"x$ac_cv_libexe\" = xyes],",
          "60:   [AC_DEFINE(",
          "61:    [HAVE_LIBEXE],",
          "62:    [1],",
          "63:    [Define to 1 if you have the `exe' library (-lexe).])",
          "64:   ])",
          "66:  AS_IF(",
          "67:   [test \"x$ac_cv_libexe\" = xyes],",
          "68:   [AC_SUBST(",
          "69:    [HAVE_LIBEXE],",
          "70:    [1]) ],",
          "71:   [AC_SUBST(",
          "72:    [HAVE_LIBEXE],",
          "73:    [0])",
          "75:  ])",
          "",
          "[Added Lines]",
          "1: dnl Checks for libexe required headers and functions",
          "3: dnl Version: 20181117",
          "9:     [test \"x$ac_cv_enable_shared_libs\" = xno || test \"x$ac_cv_with_libexe\" = xno],",
          "10:     [ac_cv_libexe=no],",
          "11:     [dnl Check if the directory provided as parameter exists",
          "12:     AS_IF(",
          "13:       [test \"x$ac_cv_with_libexe\" != x && test \"x$ac_cv_with_libexe\" != xauto-detect],",
          "14:       [AS_IF(",
          "15:         [test -d \"$ac_cv_with_libexe\"],",
          "16:         [CFLAGS=\"$CFLAGS -I${ac_cv_with_libexe}/include\"",
          "17:         LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libexe}/lib\"],",
          "18:         [AC_MSG_FAILURE(",
          "19:           [no such directory: $ac_cv_with_libexe],",
          "20:           [1])",
          "21:         ])",
          "22:         ac_cv_libexe=check],",
          "23:       [dnl Check for a pkg-config file",
          "24:       AS_IF(",
          "25:         [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "26:         [PKG_CHECK_MODULES(",
          "27:           [libexe],",
          "28:           [libexe >= 20120405],",
          "29:           [ac_cv_libexe=yes],",
          "30:           [ac_cv_libexe=check])",
          "31:         ])",
          "32:       AS_IF(",
          "33:         [test \"x$ac_cv_libexe\" = xyes && test \"x$ac_cv_enable_wide_character_type\" != xno],",
          "34:         [AC_CACHE_CHECK(",
          "35:          [whether libexe/features.h defines LIBEXE_HAVE_WIDE_CHARACTER_TYPE as 1],",
          "36:          [ac_cv_header_libexe_features_h_have_wide_character_type],",
          "37:          [AC_LANG_PUSH(C)",
          "38:          AC_COMPILE_IFELSE(",
          "39:            [AC_LANG_PROGRAM(",
          "40:              [[#include <libexe/features.h>]],",
          "41:              [[#if !defined( LIBEXE_HAVE_WIDE_CHARACTER_TYPE ) || ( LIBEXE_HAVE_WIDE_CHARACTER_TYPE != 1 )",
          "42: #error LIBEXE_HAVE_WIDE_CHARACTER_TYPE not defined",
          "43: #endif]] )],",
          "44:            [ac_cv_header_libexe_features_h_have_wide_character_type=yes],",
          "45:            [ac_cv_header_libexe_features_h_have_wide_character_type=no])",
          "46:          AC_LANG_POP(C)],",
          "47:          [ac_cv_header_libexe_features_h_have_wide_character_type=no])",
          "49:         AS_IF(",
          "50:           [test \"x$ac_cv_header_libexe_features_h_have_wide_character_type\" = xno],",
          "51:           [ac_cv_libexe=no])",
          "52:         ])",
          "53:       AS_IF(",
          "54:         [test \"x$ac_cv_libexe\" = xyes],",
          "55:         [ac_cv_libexe_CPPFLAGS=\"$pkg_cv_libexe_CFLAGS\"",
          "56:         ac_cv_libexe_LIBADD=\"$pkg_cv_libexe_LIBS\"])",
          "57:       ])",
          "59:     AS_IF(",
          "60:       [test \"x$ac_cv_libexe\" = xcheck],",
          "61:       [dnl Check for headers",
          "62:       AC_CHECK_HEADERS([libexe.h])",
          "64:       AS_IF(",
          "65:         [test \"x$ac_cv_header_libexe_h\" = xno],",
          "66:         [ac_cv_libexe=no],",
          "67:         [dnl Check for the individual functions",
          "68:         ac_cv_libexe=yes",
          "70:         AC_CHECK_LIB(",
          "71:           exe,",
          "72:           libexe_get_version,",
          "73:           [ac_cv_libexe_dummy=yes],",
          "74:           [ac_cv_libexe=no])",
          "76:         dnl TODO add functions",
          "78:         ac_cv_libexe_LIBADD=\"-lexe\"])",
          "79:       ])",
          "80:     AS_IF(",
          "81:       [test \"x$ac_cv_with_libexe\" != x && test \"x$ac_cv_with_libexe\" != xauto-detect && test \"x$ac_cv_libexe\" != xyes],",
          "82:       [AC_MSG_FAILURE(",
          "83:         [unable to find supported libexe in directory: $ac_cv_with_libexe],",
          "84:         [1])",
          "85:       ])",
          "88:   AS_IF(",
          "89:     [test \"x$ac_cv_libexe\" = xyes],",
          "90:     [AC_DEFINE(",
          "91:       [HAVE_LIBEXE],",
          "92:       [1],",
          "93:       [Define to 1 if you have the `exe' library (-lexe).])",
          "94:     ])",
          "96:   AS_IF(",
          "97:     [test \"x$ac_cv_libexe\" = xyes],",
          "98:     [AC_SUBST(",
          "99:       [HAVE_LIBEXE],",
          "100:       [1]) ],",
          "101:     [AC_SUBST(",
          "102:       [HAVE_LIBEXE],",
          "103:       [0])",
          "104:     ])",
          "",
          "---------------"
        ],
        "m4/libfcache.m4||m4/libfcache.m4": [
          "File: m4/libfcache.m4 -> m4/libfcache.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: dnl Checks for libfcache required headers and functions",
          "2: dnl",
          "5: dnl Function to detect if libfcache is available",
          "6: dnl ac_libfcache_dummy is used to prevent AC_CHECK_LIB adding unnecessary -l<library> arguments",
          "7: AC_DEFUN([AX_LIBFCACHE_CHECK_LIB],",
          "21:     [ac_cv_libfcache=no],",
          "23:     AS_IF(",
          "30:       ])",
          "32:     AS_IF(",
          "36:       [dnl Check for headers",
          "37:       AC_CHECK_HEADERS([libfcache.h])",
          "",
          "[Removed Lines]",
          "3: dnl Version: 20181010",
          "8:   [dnl Check if parameters were provided",
          "9:   AS_IF(",
          "10:     [test \"x$ac_cv_with_libfcache\" != x && test \"x$ac_cv_with_libfcache\" != xno && test \"x$ac_cv_with_libfcache\" != xauto-detect],",
          "11:     [AS_IF(",
          "12:       [test -d \"$ac_cv_with_libfcache\"],",
          "13:       [CFLAGS=\"$CFLAGS -I${ac_cv_with_libfcache}/include\"",
          "14:       LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libfcache}/lib\"],",
          "15:       [AC_MSG_WARN([no such directory: $ac_cv_with_libfcache])",
          "16:       ])",
          "17:     ])",
          "19:   AS_IF(",
          "20:     [test \"x$ac_cv_with_libfcache\" = xno],",
          "22:     [dnl Check for a pkg-config file",
          "24:       [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "25:       [PKG_CHECK_MODULES(",
          "26:         [libfcache],",
          "27:         [libfcache >= 20181010],",
          "28:         [ac_cv_libfcache=yes],",
          "29:         [ac_cv_libfcache=no])",
          "33:       [test \"x$ac_cv_libfcache\" = xyes],",
          "34:       [ac_cv_libfcache_CPPFLAGS=\"$pkg_cv_libfcache_CFLAGS\"",
          "35:       ac_cv_libfcache_LIBADD=\"$pkg_cv_libfcache_LIBS\"],",
          "",
          "[Added Lines]",
          "3: dnl Version: 20181117",
          "8:   [AS_IF(",
          "9:     [test \"x$ac_cv_enable_shared_libs\" = xno || test \"x$ac_cv_with_libfcache\" = xno],",
          "11:     [dnl Check if the directory provided as parameter exists",
          "13:       [test \"x$ac_cv_with_libfcache\" != x && test \"x$ac_cv_with_libfcache\" != xauto-detect],",
          "14:       [AS_IF(",
          "15:         [test -d \"$ac_cv_with_libfcache\"],",
          "16:         [CFLAGS=\"$CFLAGS -I${ac_cv_with_libfcache}/include\"",
          "17:         LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libfcache}/lib\"],",
          "18:         [AC_MSG_FAILURE(",
          "19:           [no such directory: $ac_cv_with_libfcache],",
          "20:           [1])",
          "21:         ])",
          "22:         ac_cv_libfcache=check],",
          "23:       [dnl Check for a pkg-config file",
          "24:       AS_IF(",
          "25:         [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "26:         [PKG_CHECK_MODULES(",
          "27:           [libfcache],",
          "28:           [libfcache >= 20181010],",
          "29:           [ac_cv_libfcache=yes],",
          "30:           [ac_cv_libfcache=check])",
          "31:         ])",
          "32:       AS_IF(",
          "33:         [test \"x$ac_cv_libfcache\" = xyes],",
          "34:         [ac_cv_libfcache_CPPFLAGS=\"$pkg_cv_libfcache_CFLAGS\"",
          "35:         ac_cv_libfcache_LIBADD=\"$pkg_cv_libfcache_LIBS\"])",
          "39:       [test \"x$ac_cv_libfcache\" = xcheck],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134:           [ac_cv_libfcache_dummy=yes],",
          "135:           [ac_cv_libfcache=no])",
          "139:       ])",
          "140:     ])",
          "",
          "[Removed Lines]",
          "137:         ac_cv_libfcache_LIBADD=\"-lfcache\"",
          "138:         ])",
          "",
          "[Added Lines]",
          "141:         ac_cv_libfcache_LIBADD=\"-lfcache\"])",
          "142:       ])",
          "143:     AS_IF(",
          "144:       [test \"x$ac_cv_with_libfcache\" != x && test \"x$ac_cv_with_libfcache\" != xauto-detect && test \"x$ac_cv_libfcache\" != xyes],",
          "145:       [AC_MSG_FAILURE(",
          "146:         [unable to find supported libfcache in directory: $ac_cv_with_libfcache],",
          "147:         [1])",
          "",
          "---------------"
        ],
        "m4/libfdata.m4||m4/libfdata.m4": [
          "File: m4/libfdata.m4 -> m4/libfdata.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: dnl Functions for libfdata",
          "2: dnl",
          "5: dnl Function to detect if libfdata is available",
          "6: dnl ac_libfdata_dummy is used to prevent AC_CHECK_LIB adding unnecessary -l<library> arguments",
          "7: AC_DEFUN([AX_LIBFDATA_CHECK_LIB],",
          "21:     [ac_cv_libfdata=no],",
          "23:     AS_IF(",
          "30:       ])",
          "32:     AS_IF(",
          "36:       [dnl Check for headers",
          "37:       AC_CHECK_HEADERS([libfdata.h])",
          "",
          "[Removed Lines]",
          "3: dnl Version: 20181009",
          "8:   [dnl Check if parameters were provided",
          "9:   AS_IF(",
          "10:     [test \"x$ac_cv_with_libfdata\" != x && test \"x$ac_cv_with_libfdata\" != xno && test \"x$ac_cv_with_libfdata\" != xauto-detect],",
          "11:     [AS_IF(",
          "12:       [test -d \"$ac_cv_with_libfdata\"],",
          "13:       [CFLAGS=\"$CFLAGS -I${ac_cv_with_libfdata}/include\"",
          "14:       LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libfdata}/lib\"],",
          "15:       [AC_MSG_WARN([no such directory: $ac_cv_with_libfdata])",
          "16:       ])",
          "17:     ])",
          "19:   AS_IF(",
          "20:     [test \"x$ac_cv_with_libfdata\" = xno],",
          "22:     [dnl Check for a pkg-config file",
          "24:       [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "25:       [PKG_CHECK_MODULES(",
          "26:         [libfdata],",
          "27:         [libfdata >= 20181009],",
          "28:         [ac_cv_libfdata=yes],",
          "29:         [ac_cv_libfdata=no])",
          "33:       [test \"x$ac_cv_libfdata\" = xyes],",
          "34:       [ac_cv_libfdata_CPPFLAGS=\"$pkg_cv_libfdata_CFLAGS\"",
          "35:       ac_cv_libfdata_LIBADD=\"$pkg_cv_libfdata_LIBS\"],",
          "",
          "[Added Lines]",
          "3: dnl Version: 20181117",
          "8:   [AS_IF(",
          "9:     [test \"x$ac_cv_enable_shared_libs\" = xno || test \"x$ac_cv_with_libfdata\" = xno],",
          "11:     [dnl Check if the directory provided as parameter exists",
          "13:       [test \"x$ac_cv_with_libfdata\" != x && test \"x$ac_cv_with_libfdata\" != xauto-detect],",
          "14:       [AS_IF(",
          "15:         [test -d \"$ac_cv_with_libfdata\"],",
          "16:         [CFLAGS=\"$CFLAGS -I${ac_cv_with_libfdata}/include\"",
          "17:         LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libfdata}/lib\"],",
          "18:         [AC_MSG_FAILURE(",
          "19:           [no such directory: $ac_cv_with_libfdata],",
          "20:           [1])",
          "21:         ])",
          "22:         ac_cv_libfdata=check],",
          "23:       [dnl Check for a pkg-config file",
          "24:       AS_IF(",
          "25:         [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "26:         [PKG_CHECK_MODULES(",
          "27:           [libfdata],",
          "28:           [libfdata >= 20181009],",
          "29:           [ac_cv_libfdata=yes],",
          "30:           [ac_cv_libfdata=check])",
          "31:         ])",
          "32:       AS_IF(",
          "33:         [test \"x$ac_cv_libfdata\" = xyes],",
          "34:         [ac_cv_libfdata_CPPFLAGS=\"$pkg_cv_libfdata_CFLAGS\"",
          "35:         ac_cv_libfdata_LIBADD=\"$pkg_cv_libfdata_LIBS\"])",
          "39:       [test \"x$ac_cv_libfdata\" = xcheck],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "445:         dnl Vector list functions",
          "446:         dnl TODO: add functions",
          "450:       ])",
          "451:     ])",
          "",
          "[Removed Lines]",
          "448:         ac_cv_libfdata_LIBADD=\"-lfdata\"",
          "449:         ])",
          "",
          "[Added Lines]",
          "452:         ac_cv_libfdata_LIBADD=\"-lfdata\"])",
          "453:       ])",
          "454:     AS_IF(",
          "455:       [test \"x$ac_cv_with_libfdata\" != x && test \"x$ac_cv_with_libfdata\" != xauto-detect && test \"x$ac_cv_libfdata\" != xyes],",
          "456:       [AC_MSG_FAILURE(",
          "457:         [unable to find supported libfdata in directory: $ac_cv_with_libfdata],",
          "458:         [1])",
          "",
          "---------------"
        ],
        "m4/libfdatetime.m4||m4/libfdatetime.m4": [
          "File: m4/libfdatetime.m4 -> m4/libfdatetime.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: dnl Checks for libfdatetime required headers and functions",
          "2: dnl",
          "5: dnl Function to detect if libfdatetime is available",
          "6: dnl ac_libfdatetime_dummy is used to prevent AC_CHECK_LIB adding unnecessary -l<library> arguments",
          "7: AC_DEFUN([AX_LIBFDATETIME_CHECK_LIB],",
          "21:     [ac_cv_libfdatetime=no],",
          "23:     AS_IF(",
          "30:       ])",
          "32:     AS_IF(",
          "36:       [dnl Check for headers",
          "37:       AC_CHECK_HEADERS([libfdatetime.h])",
          "",
          "[Removed Lines]",
          "3: dnl Version: 20180910",
          "8:   [dnl Check if parameters were provided",
          "9:   AS_IF(",
          "10:     [test \"x$ac_cv_with_libfdatetime\" != x && test \"x$ac_cv_with_libfdatetime\" != xno && test \"x$ac_cv_with_libfdatetime\" != xauto-detect],",
          "11:     [AS_IF(",
          "12:       [test -d \"$ac_cv_with_libfdatetime\"],",
          "13:       [CFLAGS=\"$CFLAGS -I${ac_cv_with_libfdatetime}/include\"",
          "14:       LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libfdatetime}/lib\"],",
          "15:       [AC_MSG_WARN([no such directory: $ac_cv_with_libfdatetime])",
          "16:       ])",
          "17:     ])",
          "19:   AS_IF(",
          "20:     [test \"x$ac_cv_with_libfdatetime\" = xno],",
          "22:     [dnl Check for a pkg-config file",
          "24:       [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "25:       [PKG_CHECK_MODULES(",
          "26:         [libfdatetime],",
          "27:         [libfdatetime >= 20180910],",
          "28:         [ac_cv_libfdatetime=yes],",
          "29:         [ac_cv_libfdatetime=no])",
          "33:       [test \"x$ac_cv_libfdatetime\" = xyes],",
          "34:       [ac_cv_libfdatetime_CPPFLAGS=\"$pkg_cv_libfdatetime_CFLAGS\"",
          "35:       ac_cv_libfdatetime_LIBADD=\"$pkg_cv_libfdatetime_LIBS\"],",
          "",
          "[Added Lines]",
          "3: dnl Version: 20181117",
          "8:   [AS_IF(",
          "9:     [test \"x$ac_cv_enable_shared_libs\" = xno || test \"x$ac_cv_with_libfdatetime\" = xno],",
          "11:     [dnl Check if the directory provided as parameter exists",
          "13:       [test \"x$ac_cv_with_libfdatetime\" != x && test \"x$ac_cv_with_libfdatetime\" != xauto-detect],",
          "14:       [AS_IF(",
          "15:         [test -d \"$ac_cv_with_libfdatetime\"],",
          "16:         [CFLAGS=\"$CFLAGS -I${ac_cv_with_libfdatetime}/include\"",
          "17:         LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libfdatetime}/lib\"],",
          "18:         [AC_MSG_FAILURE(",
          "19:           [no such directory: $ac_cv_with_libfdatetime],",
          "20:           [1])",
          "21:         ])",
          "22:         ac_cv_libfdatetime=check],",
          "23:       [dnl Check for a pkg-config file",
          "24:       AS_IF(",
          "25:         [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "26:         [PKG_CHECK_MODULES(",
          "27:           [libfdatetime],",
          "28:           [libfdatetime >= 20180910],",
          "29:           [ac_cv_libfdatetime=yes],",
          "30:           [ac_cv_libfdatetime=check])",
          "31:         ])",
          "32:       AS_IF(",
          "33:         [test \"x$ac_cv_libfdatetime\" = xyes],",
          "34:         [ac_cv_libfdatetime_CPPFLAGS=\"$pkg_cv_libfdatetime_CFLAGS\"",
          "35:         ac_cv_libfdatetime_LIBADD=\"$pkg_cv_libfdatetime_LIBS\"])",
          "39:       [test \"x$ac_cv_libfdatetime\" = xcheck],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "452:           [ac_cv_libfdatetime_dummy=yes],",
          "453:           [ac_cv_libfdatetime=no])",
          "456:       ])",
          "457:     ])",
          "460:   AS_IF(",
          "461:     [test \"x$ac_cv_libfdatetime\" = xyes],",
          "",
          "[Removed Lines]",
          "455:       ac_cv_libfdatetime_LIBADD=\"-lfdatetime\"",
          "458:   ])",
          "",
          "[Added Lines]",
          "459:         ac_cv_libfdatetime_LIBADD=\"-lfdatetime\"])",
          "460:       ])",
          "461:     AS_IF(",
          "462:       [test \"x$ac_cv_with_libfdatetime\" != x && test \"x$ac_cv_with_libfdatetime\" != xauto-detect && test \"x$ac_cv_libfdatetime\" != xyes],",
          "463:       [AC_MSG_FAILURE(",
          "464:         [unable to find supported libfdatetime in directory: $ac_cv_with_libfdatetime],",
          "465:         [1])",
          "",
          "---------------"
        ],
        "m4/libfguid.m4||m4/libfguid.m4": [
          "File: m4/libfguid.m4 -> m4/libfguid.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: dnl",
          "5: dnl Function to detect if libfguid is available",
          "6: dnl ac_libfguid_dummy is used to prevent AC_CHECK_LIB adding unnecessary -l<library> arguments",
          "7: AC_DEFUN([AX_LIBFGUID_CHECK_LIB],",
          "21:     [ac_cv_libfguid=no],",
          "23:     AS_IF(",
          "30:       ])",
          "32:     AS_IF(",
          "36:       [dnl Check for headers",
          "37:       AC_CHECK_HEADERS([libfguid.h])",
          "",
          "[Removed Lines]",
          "1: dnl Functions for libfguid",
          "3: dnl Version: 20170906",
          "8:   [dnl Check if parameters were provided",
          "9:   AS_IF(",
          "10:     [test \"x$ac_cv_with_libfguid\" != x && test \"x$ac_cv_with_libfguid\" != xno && test \"x$ac_cv_with_libfguid\" != xauto-detect],",
          "11:     [AS_IF(",
          "12:       [test -d \"$ac_cv_with_libfguid\"],",
          "13:       [CFLAGS=\"$CFLAGS -I${ac_cv_with_libfguid}/include\"",
          "14:       LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libfguid}/lib\"],",
          "15:       [AC_MSG_WARN([no such directory: $ac_cv_with_libfguid])",
          "16:       ])",
          "17:     ])",
          "19:   AS_IF(",
          "20:     [test \"x$ac_cv_with_libfguid\" = xno],",
          "22:     [dnl Check for a pkg-config file",
          "24:       [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "25:       [PKG_CHECK_MODULES(",
          "26:         [libfguid],",
          "27:         [libfguid >= 20120426],",
          "28:         [ac_cv_libfguid=yes],",
          "29:         [ac_cv_libfguid=no])",
          "33:       [test \"x$ac_cv_libfguid\" = xyes],",
          "34:       [ac_cv_libfguid_CPPFLAGS=\"$pkg_cv_libfguid_CFLAGS\"",
          "35:       ac_cv_libfguid_LIBADD=\"$pkg_cv_libfguid_LIBS\"],",
          "",
          "[Added Lines]",
          "1: dnl Checks for libfguid required headers and functions",
          "3: dnl Version: 20181117",
          "8:   [AS_IF(",
          "9:     [test \"x$ac_cv_enable_shared_libs\" = xno || test \"x$ac_cv_with_libfguid\" = xno],",
          "11:     [dnl Check if the directory provided as parameter exists",
          "13:       [test \"x$ac_cv_with_libfguid\" != x && test \"x$ac_cv_with_libfguid\" != xauto-detect],",
          "14:       [AS_IF(",
          "15:         [test -d \"$ac_cv_with_libfguid\"],",
          "16:         [CFLAGS=\"$CFLAGS -I${ac_cv_with_libfguid}/include\"",
          "17:         LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libfguid}/lib\"],",
          "18:         [AC_MSG_FAILURE(",
          "19:           [no such directory: $ac_cv_with_libfguid],",
          "20:           [1])",
          "21:         ])",
          "22:         ac_cv_libfguid=check],",
          "23:       [dnl Check for a pkg-config file",
          "24:       AS_IF(",
          "25:         [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "26:         [PKG_CHECK_MODULES(",
          "27:           [libfguid],",
          "28:           [libfguid >= 20120426],",
          "29:           [ac_cv_libfguid=yes],",
          "30:           [ac_cv_libfguid=check])",
          "31:         ])",
          "32:       AS_IF(",
          "33:         [test \"x$ac_cv_libfguid\" = xyes],",
          "34:         [ac_cv_libfguid_CPPFLAGS=\"$pkg_cv_libfguid_CFLAGS\"",
          "35:         ac_cv_libfguid_LIBADD=\"$pkg_cv_libfguid_LIBS\"])",
          "39:       [test \"x$ac_cv_libfguid\" = xcheck],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:           [ac_cv_libfguid_dummy=yes],",
          "101:           [ac_cv_libfguid=no])",
          "105:       ])",
          "106:     ])",
          "",
          "[Removed Lines]",
          "103:         ac_cv_libfguid_LIBADD=\"-lfguid\"",
          "104:         ])",
          "",
          "[Added Lines]",
          "107:         ac_cv_libfguid_LIBADD=\"-lfguid\"])",
          "108:       ])",
          "109:     AS_IF(",
          "110:       [test \"x$ac_cv_with_libfguid\" != x && test \"x$ac_cv_with_libfguid\" != xauto-detect && test \"x$ac_cv_libfguid\" != xyes],",
          "111:       [AC_MSG_FAILURE(",
          "112:         [unable to find supported libfguid in directory: $ac_cv_with_libfguid],",
          "113:         [1])",
          "",
          "---------------"
        ],
        "m4/libfvalue.m4||m4/libfvalue.m4": [
          "File: m4/libfvalue.m4 -> m4/libfvalue.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: dnl",
          "6: dnl ac_libfvalue_dummy is used to prevent AC_CHECK_LIB adding unnecessary -l<library> arguments",
          "7: AC_DEFUN([AX_LIBFVALUE_CHECK_LIB],",
          "21:     [ac_cv_libfvalue=no],",
          "23:     AS_IF(",
          "30:       ])",
          "32:     AS_IF(",
          "36:       [dnl Check for headers",
          "37:       AC_CHECK_HEADERS([libfvalue.h])",
          "",
          "[Removed Lines]",
          "1: dnl Functions for libfvalue",
          "3: dnl Version: 20180410",
          "5: dnl Function to detect if libfvalue available",
          "8:   [dnl Check if parameters were provided",
          "9:   AS_IF(",
          "10:     [test \"x$ac_cv_with_libfvalue\" != x && test \"x$ac_cv_with_libfvalue\" != xno && test \"x$ac_cv_with_libfvalue\" != xauto-detect],",
          "11:     [AS_IF(",
          "12:       [test -d \"$ac_cv_with_libfvalue\"],",
          "13:       [CFLAGS=\"$CFLAGS -I${ac_cv_with_libfvalue}/include\"",
          "14:       LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libfvalue}/lib\"],",
          "15:       [AC_MSG_WARN([no such directory: $ac_cv_with_libfvalue])",
          "16:       ])",
          "17:     ])",
          "19:   AS_IF(",
          "20:     [test \"x$ac_cv_with_libfvalue\" = xno],",
          "22:     [dnl Check for a pkg-config file",
          "24:       [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "25:       [PKG_CHECK_MODULES(",
          "26:         [libfvalue],",
          "27:         [libfvalue >= 20160131],",
          "28:         [ac_cv_libfvalue=yes],",
          "29:         [ac_cv_libfvalue=no])",
          "33:       [test \"x$ac_cv_libfvalue\" = xyes],",
          "34:       [ac_cv_libfvalue_CPPFLAGS=\"$pkg_cv_libfvalue_CFLAGS\"",
          "35:       ac_cv_libfvalue_LIBADD=\"$pkg_cv_libfvalue_LIBS\"],",
          "",
          "[Added Lines]",
          "1: dnl Checks for libfvalue required headers and functions",
          "3: dnl Version: 20181117",
          "5: dnl Function to detect if libfvalue is available",
          "8:   [AS_IF(",
          "9:     [test \"x$ac_cv_enable_shared_libs\" = xno || test \"x$ac_cv_with_libfvalue\" = xno],",
          "11:     [dnl Check if the directory provided as parameter exists",
          "13:       [test \"x$ac_cv_with_libfvalue\" != x && test \"x$ac_cv_with_libfvalue\" != xauto-detect],",
          "14:       [AS_IF(",
          "15:         [test -d \"$ac_cv_with_libfvalue\"],",
          "16:         [CFLAGS=\"$CFLAGS -I${ac_cv_with_libfvalue}/include\"",
          "17:         LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libfvalue}/lib\"],",
          "18:         [AC_MSG_FAILURE(",
          "19:           [no such directory: $ac_cv_with_libfvalue],",
          "20:           [1])",
          "21:         ])",
          "22:         ac_cv_libfvalue=check],",
          "23:       [dnl Check for a pkg-config file",
          "24:       AS_IF(",
          "25:         [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "26:         [PKG_CHECK_MODULES(",
          "27:           [libfvalue],",
          "28:           [libfvalue >= 20160131],",
          "29:           [ac_cv_libfvalue=yes],",
          "30:           [ac_cv_libfvalue=check])",
          "31:         ])",
          "32:       AS_IF(",
          "33:         [test \"x$ac_cv_libfvalue\" = xyes],",
          "34:         [ac_cv_libfvalue_CPPFLAGS=\"$pkg_cv_libfvalue_CFLAGS\"",
          "35:         ac_cv_libfvalue_LIBADD=\"$pkg_cv_libfvalue_LIBS\"])",
          "39:       [test \"x$ac_cv_libfvalue\" = xcheck],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "582:           [ac_cv_libfvalue_dummy=yes],",
          "583:           [ac_cv_libfvalue=no])",
          "587:       ])",
          "598:     ])",
          "600:   AS_IF(",
          "",
          "[Removed Lines]",
          "585:         ac_cv_libfvalue_LIBADD=\"-lfvalue\"",
          "586:         ])",
          "588:     ])",
          "590:   dnl Check for debug functions",
          "591:   AS_IF(",
          "592:     [test \"x$ac_cv_libfvalue\" = xyes && test \"x$ac_cv_enable_debug_output\" != xno],",
          "593:     [AC_CHECK_LIB(",
          "594:       fvalue,",
          "595:       libfvalue_value_print,",
          "596:       [ac_cv_libfvalue_dummy=yes],",
          "597:       [ac_cv_libfvalue=no])",
          "",
          "[Added Lines]",
          "589:         ac_cv_libfvalue_LIBADD=\"-lfvalue\"])",
          "590:       ])",
          "591:     AS_IF(",
          "592:       [test \"x$ac_cv_with_libfvalue\" != x && test \"x$ac_cv_with_libfvalue\" != xauto-detect && test \"x$ac_cv_libfvalue\" != xyes],",
          "593:       [AC_MSG_FAILURE(",
          "594:         [unable to find supported libfvalue in directory: $ac_cv_with_libfvalue],",
          "595:         [1])",
          "",
          "---------------"
        ],
        "m4/libfwevt.m4||m4/libfwevt.m4": [
          "File: m4/libfwevt.m4 -> m4/libfwevt.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: dnl",
          "5: dnl Function to detect if libfwevt is available",
          "6: dnl ac_libfwevt_dummy is used to prevent AC_CHECK_LIB adding unnecessary -l<library> arguments",
          "7: AC_DEFUN([AX_LIBFWEVT_CHECK_LIB],",
          "21:     [ac_cv_libfwevt=no],",
          "23:     AS_IF(",
          "30:       ])",
          "32:     AS_IF(",
          "36:       [dnl Check for headers",
          "37:       AC_CHECK_HEADERS([libfwevt.h])",
          "40:         [test \"x$ac_cv_header_libfwevt_h\" = xno],",
          "41:         [ac_cv_libfwevt=no],",
          "42:         [dnl Check for the individual functions",
          "",
          "[Removed Lines]",
          "1: dnl Functions for libfwevt",
          "3: dnl Version: 20180404",
          "8:   [dnl Check if parameters were provided",
          "9:   AS_IF(",
          "10:     [test \"x$ac_cv_with_libfwevt\" != x && test \"x$ac_cv_with_libfwevt\" != xno && test \"x$ac_cv_with_libfwevt\" != xauto-detect],",
          "11:     [AS_IF(",
          "12:       [test -d \"$ac_cv_with_libfwevt\"],",
          "13:       [CFLAGS=\"$CFLAGS -I${ac_cv_with_libfwevt}/include\"",
          "14:       LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libfwevt}/lib\"],",
          "15:       [AC_MSG_WARN([no such directory: $ac_cv_with_libfwevt])",
          "16:       ])",
          "17:     ])",
          "19:   AS_IF(",
          "20:     [test \"x$ac_cv_with_libfwevt\" = xno],",
          "22:     [dnl Check for a pkg-config file",
          "24:       [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "25:       [PKG_CHECK_MODULES(",
          "26:         [libfwevt],",
          "27:         [libfwevt >= 20160103],",
          "28:         [ac_cv_libfwevt=yes],",
          "29:         [ac_cv_libfwevt=no])",
          "33:       [test \"x$ac_cv_libfwevt\" = xyes],",
          "34:       [ac_cv_libfwevt_CPPFLAGS=\"$pkg_cv_libfwevt_CFLAGS\"",
          "35:       ac_cv_libfwevt_LIBADD=\"$pkg_cv_libfwevt_LIBS\"],",
          "39:     AS_IF(",
          "",
          "[Added Lines]",
          "1: dnl Checks for libfwevt required headers and functions",
          "3: dnl Version: 20181117",
          "8:   [AS_IF(",
          "9:     [test \"x$ac_cv_enable_shared_libs\" = xno || test \"x$ac_cv_with_libfwevt\" = xno],",
          "11:     [dnl Check if the directory provided as parameter exists",
          "13:       [test \"x$ac_cv_with_libfwevt\" != x && test \"x$ac_cv_with_libfwevt\" != xauto-detect],",
          "14:       [AS_IF(",
          "15:         [test -d \"$ac_cv_with_libfwevt\"],",
          "16:         [CFLAGS=\"$CFLAGS -I${ac_cv_with_libfwevt}/include\"",
          "17:         LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libfwevt}/lib\"],",
          "18:         [AC_MSG_FAILURE(",
          "19:           [no such directory: $ac_cv_with_libfwevt],",
          "20:           [1])",
          "21:         ])",
          "22:         ac_cv_libfwevt=check],",
          "23:       [dnl Check for a pkg-config file",
          "24:       AS_IF(",
          "25:         [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "26:         [PKG_CHECK_MODULES(",
          "27:           [libfwevt],",
          "28:           [libfwevt >= 20160103],",
          "29:           [ac_cv_libfwevt=yes],",
          "30:           [ac_cv_libfwevt=check])",
          "31:         ])",
          "32:       AS_IF(",
          "33:         [test \"x$ac_cv_libfwevt\" = xyes],",
          "34:         [ac_cv_libfwevt_CPPFLAGS=\"$pkg_cv_libfwevt_CFLAGS\"",
          "35:         ac_cv_libfwevt_LIBADD=\"$pkg_cv_libfwevt_LIBS\"])",
          "39:       [test \"x$ac_cv_libfwevt\" = xcheck],",
          "43:       AS_IF(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "552:           [ac_cv_libfwevt_dummy=yes],",
          "553:           [ac_cv_libfwevt=no])",
          "557:       ])",
          "568:     ])",
          "570:   AS_IF(",
          "",
          "[Removed Lines]",
          "555:         ac_cv_libfwevt_LIBADD=\"-lfwevt\"",
          "556:         ])",
          "558:     ])",
          "560:   dnl Check for debug functions",
          "561:   AS_IF(",
          "562:     [test \"x$ac_cv_libfwevt\" = xyes && test \"x$ac_cv_enable_debug_output\" != xno],",
          "563:     [AC_CHECK_LIB(",
          "564:       fwevt,",
          "565:       libfwevt_xml_document_debug_print,",
          "566:       [ac_cv_libfwevt_dummy=yes],",
          "567:       [ac_cv_libfwevt=no])",
          "",
          "[Added Lines]",
          "559:         ac_cv_libfwevt_LIBADD=\"-lfwevt\"])",
          "560:       ])",
          "561:     AS_IF(",
          "562:       [test \"x$ac_cv_with_libfwevt\" != x && test \"x$ac_cv_with_libfwevt\" != xauto-detect && test \"x$ac_cv_libfwevt\" != xyes],",
          "563:       [AC_MSG_FAILURE(",
          "564:         [unable to find supported libfwevt in directory: $ac_cv_with_libfwevt],",
          "565:         [1])",
          "",
          "---------------"
        ],
        "m4/libfwnt.m4||m4/libfwnt.m4": [
          "File: m4/libfwnt.m4 -> m4/libfwnt.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: dnl",
          "5: dnl Function to detect if libfwnt is available",
          "6: dnl ac_libfwnt_dummy is used to prevent AC_CHECK_LIB adding unnecessary -l<library> arguments",
          "7: AC_DEFUN([AX_LIBFWNT_CHECK_LIB],",
          "21:     [ac_cv_libfwnt=no],",
          "23:     AS_IF(",
          "30:       ])",
          "32:     AS_IF(",
          "36:       [dnl Check for headers",
          "37:       AC_CHECK_HEADERS([libfwnt.h])",
          "40:         [test \"x$ac_cv_header_libfwnt_h\" = xno],",
          "41:         [ac_cv_libfwnt=no],",
          "42:         [dnl Check for the individual functions",
          "",
          "[Removed Lines]",
          "1: dnl Functions for libfwnt",
          "3: dnl Version: 20170908",
          "8:   [dnl Check if parameters were provided",
          "9:   AS_IF(",
          "10:     [test \"x$ac_cv_with_libfwnt\" != x && test \"x$ac_cv_with_libfwnt\" != xno && test \"x$ac_cv_with_libfwnt\" != xauto-detect],",
          "11:     [AS_IF(",
          "12:       [test -d \"$ac_cv_with_libfwnt\"],",
          "13:       [CFLAGS=\"$CFLAGS -I${ac_cv_with_libfwnt}/include\"",
          "14:       LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libfwnt}/lib\"],",
          "15:       [AC_MSG_WARN([no such directory: $ac_cv_with_libfwnt])",
          "16:       ])",
          "17:     ])",
          "19:   AS_IF(",
          "20:     [test \"x$ac_cv_with_libfwnt\" = xno],",
          "22:     [dnl Check for a pkg-config file",
          "24:       [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "25:       [PKG_CHECK_MODULES(",
          "26:         [libfwnt],",
          "27:         [libfwnt >= 20161103],",
          "28:         [ac_cv_libfwnt=yes],",
          "29:         [ac_cv_libfwnt=no])",
          "33:       [test \"x$ac_cv_libfwnt\" = xyes],",
          "34:       [ac_cv_libfwnt_CPPFLAGS=\"$pkg_cv_libfwnt_CFLAGS\"",
          "35:       ac_cv_libfwnt_LIBADD=\"$pkg_cv_libfwnt_LIBS\"],",
          "39:     AS_IF(",
          "",
          "[Added Lines]",
          "1: dnl Checks for libfwnt required headers and functions",
          "3: dnl Version: 20181117",
          "8:   [AS_IF(",
          "9:     [test \"x$ac_cv_enable_shared_libs\" = xno || test \"x$ac_cv_with_libfwnt\" = xno],",
          "11:     [dnl Check if the directory provided as parameter exists",
          "13:       [test \"x$ac_cv_with_libfwnt\" != x && test \"x$ac_cv_with_libfwnt\" != xauto-detect],",
          "14:       [AS_IF(",
          "15:         [test -d \"$ac_cv_with_libfwnt\"],",
          "16:         [CFLAGS=\"$CFLAGS -I${ac_cv_with_libfwnt}/include\"",
          "17:         LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libfwnt}/lib\"],",
          "18:         [AC_MSG_FAILURE(",
          "19:           [no such directory: $ac_cv_with_libfwnt],",
          "20:           [1])",
          "21:         ])",
          "22:         ac_cv_libfwnt=check],",
          "23:       [dnl Check for a pkg-config file",
          "24:       AS_IF(",
          "25:         [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "26:         [PKG_CHECK_MODULES(",
          "27:           [libfwnt],",
          "28:           [libfwnt >= 20161103],",
          "29:           [ac_cv_libfwnt=yes],",
          "30:           [ac_cv_libfwnt=check])",
          "31:         ])",
          "32:       AS_IF(",
          "33:         [test \"x$ac_cv_libfwnt\" = xyes],",
          "34:         [ac_cv_libfwnt_CPPFLAGS=\"$pkg_cv_libfwnt_CFLAGS\"",
          "35:         ac_cv_libfwnt_LIBADD=\"$pkg_cv_libfwnt_LIBS\"])",
          "39:       [test \"x$ac_cv_libfwnt\" = xcheck],",
          "43:       AS_IF(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "204:           [ac_cv_libfwnt_dummy=yes],",
          "205:           [ac_cv_libfwnt=no])",
          "209:       ])",
          "210:     ])",
          "",
          "[Removed Lines]",
          "207:         ac_cv_libfwnt_LIBADD=\"-lfwnt\"",
          "208:         ])",
          "",
          "[Added Lines]",
          "211:         ac_cv_libfwnt_LIBADD=\"-lfwnt\"])",
          "212:       ])",
          "213:     AS_IF(",
          "214:       [test \"x$ac_cv_with_libfwnt\" != x && test \"x$ac_cv_with_libfwnt\" != xauto-detect && test \"x$ac_cv_libfwnt\" != xyes],",
          "215:       [AC_MSG_FAILURE(",
          "216:         [unable to find supported libfwnt in directory: $ac_cv_with_libfwnt],",
          "217:         [1])",
          "",
          "---------------"
        ],
        "m4/libregf.m4||m4/libregf.m4": [
          "File: m4/libregf.m4 -> m4/libregf.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: dnl",
          "5: dnl Function to detect if libregf is available",
          "6: dnl ac_libregf_dummy is used to prevent AC_CHECK_LIB adding unnecessary -l<library> arguments",
          "7: AC_DEFUN([AX_LIBREGF_CHECK_LIB],",
          "11:   [AS_IF(",
          "23:   AS_IF(",
          "32:   AS_IF(",
          "54:     ])",
          "56:   ])",
          "77: dnl Function to detect if libregf dependencies are available",
          "78: AC_DEFUN([AX_LIBREGF_CHECK_LOCAL],",
          "100: dnl Function to detect how to enable libregf",
          "101: AC_DEFUN([AX_LIBREGF_CHECK_ENABLE],",
          "102:  [AX_COMMON_ARG_WITH(",
          "117:   AC_DEFINE(",
          "121:   AC_SUBST(",
          "124:   ])",
          "157:   ])",
          "",
          "[Removed Lines]",
          "1: dnl Functions for libregf",
          "3: dnl Version: 20120501",
          "8:  [dnl Check if parameters were provided",
          "9:  AS_IF(",
          "10:   [test \"x$ac_cv_with_libregf\" != x && test \"x$ac_cv_with_libregf\" != xno && test \"x$ac_cv_with_libregf\" != xauto-detect],",
          "12:    [test -d \"$ac_cv_with_libregf\"],",
          "13:    [CFLAGS=\"$CFLAGS -I${ac_cv_with_libregf}/include\"",
          "14:    LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libregf}/lib\"],",
          "15:    [AC_MSG_WARN([no such directory: $ac_cv_with_libregf])",
          "16:    ])",
          "17:   ])",
          "19:  AS_IF(",
          "20:   [test \"x$ac_cv_with_libregf\" = xno],",
          "21:   [ac_cv_libregf=no],",
          "22:   [dnl Check for a pkg-config file",
          "24:    [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "25:    [PKG_CHECK_MODULES(",
          "26:     [libregf],",
          "27:     [libregf >= 20120405],",
          "28:     [ac_cv_libregf=yes],",
          "29:     [ac_cv_libregf=no])",
          "30:    ])",
          "33:    [test \"x$ac_cv_libregf\" = xyes],",
          "34:    [ac_cv_libregf_CPPFLAGS=\"$pkg_cv_libregf_CFLAGS\"",
          "35:    ac_cv_libregf_LIBADD=\"$pkg_cv_libregf_LIBS\"],",
          "36:    [dnl Check for headers",
          "37:    AC_CHECK_HEADERS([libregf.h])",
          "39:    AS_IF(",
          "40:     [test \"x$ac_cv_header_libregf_h\" = xno],",
          "41:     [ac_cv_libregf=no],",
          "42:     [dnl Check for the individual functions",
          "43:     ac_cv_libregf=yes",
          "45:     AC_CHECK_LIB(",
          "46:      regf,",
          "47:      libregf_get_version,",
          "48:      [ac_cv_libregf_dummy=yes],",
          "49:      [ac_cv_libregf=no])",
          "51:     dnl TODO add functions",
          "53:     ac_cv_libregf_LIBADD=\"-lregf\"",
          "55:    ])",
          "58:  AS_IF(",
          "59:   [test \"x$ac_cv_libregf\" = xyes],",
          "60:   [AC_DEFINE(",
          "61:    [HAVE_LIBREGF],",
          "62:    [1],",
          "63:    [Define to 1 if you have the `regf' library (-lregf).])",
          "64:   ])",
          "66:  AS_IF(",
          "67:   [test \"x$ac_cv_libregf\" = xyes],",
          "68:   [AC_SUBST(",
          "69:    [HAVE_LIBREGF],",
          "70:    [1]) ],",
          "71:   [AC_SUBST(",
          "72:    [HAVE_LIBREGF],",
          "73:    [0])",
          "74:   ])",
          "75:  ])",
          "79:  [dnl Headers included in libregf/libregf_file.h, libregf/libregf_key.h",
          "80:  dnl libregf/libregf_key_item_values.h and libregf/libregf_value_item_values.h",
          "81:  AC_CHECK_HEADERS([wctype.h])",
          "83:  dnl Functions used in libregf/libregf_file.h, libregf/libregf_key.h",
          "84:  dnl libregf/libregf_key_item_values.h and libregf/libregf_value_item_values.h",
          "85:  AC_CHECK_FUNCS([towupper])",
          "87:  AS_IF(",
          "88:   [test \"x$ac_cv_func_towupper\" != xyes],",
          "89:   [AC_MSG_FAILURE(",
          "90:    [Missing functions: towupper],",
          "91:    [1])",
          "92:   ])",
          "94:  ac_cv_libregf_CPPFLAGS=\"-I../libregf\";",
          "95:  ac_cv_libregf_LIBADD=\"../libregf/libregf.la\";",
          "97:  ac_cv_libregf=local",
          "98:  ])",
          "103:   [libregf],",
          "104:   [libregf],",
          "105:   [search for libregf in includedir and libdir or in the specified DIR, or no if to use local version],",
          "106:   [auto-detect],",
          "107:   [DIR])",
          "109:  dnl Check for a shared library version",
          "110:  AX_LIBREGF_CHECK_LIB",
          "112:  dnl Check if the dependencies for the local library version",
          "113:  AS_IF(",
          "114:   [test \"x$ac_cv_libregf\" != xyes],",
          "115:   [AX_LIBREGF_CHECK_LOCAL",
          "118:    [HAVE_LOCAL_LIBREGF],",
          "119:    [1],",
          "120:    [Define to 1 if the local version of libregf is used.])",
          "122:    [HAVE_LOCAL_LIBREGF],",
          "123:    [1])",
          "126:  AM_CONDITIONAL(",
          "127:   [HAVE_LOCAL_LIBREGF],",
          "128:   [test \"x$ac_cv_libregf\" = xlocal])",
          "129:  AS_IF(",
          "130:   [test \"x$ac_cv_libregf_CPPFLAGS\" != \"x\"],",
          "131:   [AC_SUBST(",
          "132:    [LIBREGF_CPPFLAGS],",
          "133:    [$ac_cv_libregf_CPPFLAGS])",
          "134:   ])",
          "135:  AS_IF(",
          "136:   [test \"x$ac_cv_libregf_LIBADD\" != \"x\"],",
          "137:   [AC_SUBST(",
          "138:    [LIBREGF_LIBADD],",
          "139:    [$ac_cv_libregf_LIBADD])",
          "140:   ])",
          "142:  AS_IF(",
          "143:   [test \"x$ac_cv_libregf\" = xyes],",
          "144:   [AC_SUBST(",
          "145:    [ax_libregf_pc_libs_private],",
          "146:    [-lregf])",
          "147:   ])",
          "149:  AS_IF(",
          "150:   [test \"x$ac_cv_libregf\" = xyes],",
          "151:   [AC_SUBST(",
          "152:    [ax_libregf_spec_requires],",
          "153:    [libregf])",
          "154:   AC_SUBST(",
          "155:    [ax_libregf_spec_build_requires],",
          "156:    [libregf-devel])",
          "158:  ])",
          "",
          "[Added Lines]",
          "1: dnl Checks for libregf required headers and functions",
          "3: dnl Version: 20181117",
          "9:     [test \"x$ac_cv_enable_shared_libs\" = xno || test \"x$ac_cv_with_libregf\" = xno],",
          "10:     [ac_cv_libregf=no],",
          "11:     [dnl Check if the directory provided as parameter exists",
          "12:     AS_IF(",
          "13:       [test \"x$ac_cv_with_libregf\" != x && test \"x$ac_cv_with_libregf\" != xauto-detect],",
          "14:       [AS_IF(",
          "15:         [test -d \"$ac_cv_with_libregf\"],",
          "16:         [CFLAGS=\"$CFLAGS -I${ac_cv_with_libregf}/include\"",
          "17:         LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libregf}/lib\"],",
          "18:         [AC_MSG_FAILURE(",
          "19:           [no such directory: $ac_cv_with_libregf],",
          "20:           [1])",
          "21:         ])",
          "22:         ac_cv_libregf=check],",
          "23:       [dnl Check for a pkg-config file",
          "24:       AS_IF(",
          "25:         [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "26:         [PKG_CHECK_MODULES(",
          "27:           [libregf],",
          "28:           [libregf >= 20120405],",
          "29:           [ac_cv_libregf=yes],",
          "30:           [ac_cv_libregf=check])",
          "31:         ])",
          "32:       AS_IF(",
          "33:         [test \"x$ac_cv_libregf\" = xyes],",
          "34:         [ac_cv_libregf_CPPFLAGS=\"$pkg_cv_libregf_CFLAGS\"",
          "35:         ac_cv_libregf_LIBADD=\"$pkg_cv_libregf_LIBS\"])",
          "36:       ])",
          "38:     AS_IF(",
          "39:       [test \"x$ac_cv_libregf\" = xcheck],",
          "40:       [dnl Check for headers",
          "41:       AC_CHECK_HEADERS([libregf.h])",
          "43:       AS_IF(",
          "44:         [test \"x$ac_cv_header_libregf_h\" = xno],",
          "45:         [ac_cv_libregf=no],",
          "46:         [dnl Check for the individual functions",
          "47:         ac_cv_libregf=yes",
          "49:         AC_CHECK_LIB(",
          "50:           regf,",
          "51:           libregf_get_version,",
          "52:           [ac_cv_libregf_dummy=yes],",
          "53:           [ac_cv_libregf=no])",
          "55:         dnl TODO add functions",
          "57:         ac_cv_libregf_LIBADD=\"-lregf\"])",
          "58:       ])",
          "59:     AS_IF(",
          "60:       [test \"x$ac_cv_with_libregf\" != x && test \"x$ac_cv_with_libregf\" != xauto-detect && test \"x$ac_cv_libregf\" != xyes],",
          "61:       [AC_MSG_FAILURE(",
          "62:         [unable to find supported libregf in directory: $ac_cv_with_libregf],",
          "63:         [1])",
          "64:       ])",
          "65:     ])",
          "68:     [test \"x$ac_cv_libregf\" = xyes],",
          "69:     [AC_DEFINE(",
          "70:       [HAVE_LIBREGF],",
          "71:       [1],",
          "72:       [Define to 1 if you have the `regf' library (-lregf).])",
          "73:     ])",
          "76:     [test \"x$ac_cv_libregf\" = xyes],",
          "77:     [AC_SUBST(",
          "78:       [HAVE_LIBREGF],",
          "79:       [1]) ],",
          "80:     [AC_SUBST(",
          "81:       [HAVE_LIBREGF],",
          "82:       [0])",
          "88:   [dnl Headers included in libregf/libregf_file.h, libregf/libregf_key.h",
          "89:   dnl libregf/libregf_key_item_values.h and libregf/libregf_value_item_values.h",
          "90:   AC_CHECK_HEADERS([wctype.h])",
          "92:   dnl Functions used in libregf/libregf_file.h, libregf/libregf_key.h",
          "93:   dnl libregf/libregf_key_item_values.h and libregf/libregf_value_item_values.h",
          "94:   AC_CHECK_FUNCS([towupper])",
          "96:   AS_IF(",
          "97:     [test \"x$ac_cv_func_towupper\" != xyes],",
          "98:     [AC_MSG_FAILURE(",
          "99:       [Missing functions: towupper],",
          "100:       [1])",
          "101:    ])",
          "103:   ac_cv_libregf_CPPFLAGS=\"-I../libregf\";",
          "104:   ac_cv_libregf_LIBADD=\"../libregf/libregf.la\";",
          "106:   ac_cv_libregf=local",
          "107:   ])",
          "112:    [libregf],",
          "113:    [libregf],",
          "114:    [search for libregf in includedir and libdir or in the specified DIR, or no if to use local version],",
          "115:    [auto-detect],",
          "116:    [DIR])",
          "118:   dnl Check for a shared library version",
          "119:   AX_LIBREGF_CHECK_LIB",
          "121:   dnl Check if the dependencies for the local library version",
          "122:   AS_IF(",
          "123:     [test \"x$ac_cv_libregf\" != xyes],",
          "124:     [AX_LIBREGF_CHECK_LOCAL",
          "127:     [HAVE_LOCAL_LIBREGF],",
          "128:     [1],",
          "129:     [Define to 1 if the local version of libregf is used.])",
          "131:     [HAVE_LOCAL_LIBREGF],",
          "132:     [1])",
          "135:   AM_CONDITIONAL(",
          "136:     [HAVE_LOCAL_LIBREGF],",
          "137:     [test \"x$ac_cv_libregf\" = xlocal])",
          "138:   AS_IF(",
          "139:     [test \"x$ac_cv_libregf_CPPFLAGS\" != \"x\"],",
          "140:     [AC_SUBST(",
          "141:       [LIBREGF_CPPFLAGS],",
          "142:       [$ac_cv_libregf_CPPFLAGS])",
          "143:     ])",
          "144:   AS_IF(",
          "145:     [test \"x$ac_cv_libregf_LIBADD\" != \"x\"],",
          "146:     [AC_SUBST(",
          "147:       [LIBREGF_LIBADD],",
          "148:       [$ac_cv_libregf_LIBADD])",
          "149:     ])",
          "151:   AS_IF(",
          "152:     [test \"x$ac_cv_libregf\" = xyes],",
          "153:     [AC_SUBST(",
          "154:       [ax_libregf_pc_libs_private],",
          "155:       [-lregf])",
          "156:     ])",
          "158:   AS_IF(",
          "159:     [test \"x$ac_cv_libregf\" = xyes],",
          "160:     [AC_SUBST(",
          "161:       [ax_libregf_spec_requires],",
          "162:       [libregf])",
          "163:     AC_SUBST(",
          "164:       [ax_libregf_spec_build_requires],",
          "165:       [libregf-devel])",
          "166:     ])",
          "",
          "---------------"
        ],
        "m4/libuna.m4||m4/libuna.m4": [
          "File: m4/libuna.m4 -> m4/libuna.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: dnl Checks for libuna or required headers and functions",
          "2: dnl",
          "6: dnl ac_libuna_dummy is used to prevent AC_CHECK_LIB adding unnecessary -l<library> arguments",
          "7: AC_DEFUN([AX_LIBUNA_CHECK_LIB],",
          "21:     [ac_cv_libuna=no],",
          "23:     AS_IF(",
          "30:       ])",
          "32:     AS_IF(",
          "36:       [dnl Check for headers",
          "37:       AC_CHECK_HEADERS([libuna.h])",
          "",
          "[Removed Lines]",
          "3: dnl Version: 20181006",
          "5: dnl Function to detect if libuna is available as library",
          "8:   [dnl Check if parameters were provided",
          "9:   AS_IF(",
          "10:     [test \"x$ac_cv_with_libuna\" != x && test \"x$ac_cv_with_libuna\" != xno && test \"x$ac_cv_with_libuna\" != xauto-detect],",
          "11:     [AS_IF(",
          "12:       [test -d \"$ac_cv_with_libuna\"],",
          "13:       [CFLAGS=\"$CFLAGS -I${ac_cv_with_libuna}/include\"",
          "14:       LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libuna}/lib\"],",
          "15:       [AC_MSG_WARN([no such directory: $ac_cv_with_libuna])",
          "16:       ])",
          "17:     ])",
          "19:   AS_IF(",
          "20:     [test \"x$ac_cv_with_libuna\" = xno],",
          "22:     [dnl Check for a pkg-config file",
          "24:       [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "25:       [PKG_CHECK_MODULES(",
          "26:         [libuna],",
          "27:         [libuna >= 20181006],",
          "28:         [ac_cv_libuna=yes],",
          "29:         [ac_cv_libuna=no])",
          "33:       [test \"x$ac_cv_libuna\" = xyes],",
          "34:       [ac_cv_libuna_CPPFLAGS=\"$pkg_cv_libuna_CFLAGS\"",
          "35:       ac_cv_libuna_LIBADD=\"$pkg_cv_libuna_LIBS\"],",
          "",
          "[Added Lines]",
          "3: dnl Version: 20181117",
          "5: dnl Function to detect if libuna is available",
          "8:   [AS_IF(",
          "9:     [test \"x$ac_cv_enable_shared_libs\" = xno || test \"x$ac_cv_with_libuna\" = xno],",
          "11:     [dnl Check if the directory provided as parameter exists",
          "13:       [test \"x$ac_cv_with_libuna\" != x && test \"x$ac_cv_with_libuna\" != xauto-detect],",
          "14:       [AS_IF(",
          "15:         [test -d \"$ac_cv_with_libuna\"],",
          "16:         [CFLAGS=\"$CFLAGS -I${ac_cv_with_libuna}/include\"",
          "17:         LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libuna}/lib\"],",
          "18:         [AC_MSG_FAILURE(",
          "19:           [no such directory: $ac_cv_with_libuna],",
          "20:           [1])",
          "21:         ])",
          "22:         ac_cv_libuna=check],",
          "23:       [dnl Check for a pkg-config file",
          "24:       AS_IF(",
          "25:         [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "26:         [PKG_CHECK_MODULES(",
          "27:           [libuna],",
          "28:           [libuna >= 20181006],",
          "29:           [ac_cv_libuna=yes],",
          "30:           [ac_cv_libuna=check])",
          "31:         ])",
          "32:       AS_IF(",
          "33:         [test \"x$ac_cv_libuna\" = xyes],",
          "34:         [ac_cv_libuna_CPPFLAGS=\"$pkg_cv_libuna_CFLAGS\"",
          "35:         ac_cv_libuna_LIBADD=\"$pkg_cv_libuna_LIBS\"])",
          "39:       [test \"x$ac_cv_libuna\" = xcheck],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "619:           [ac_cv_libuna_dummy=yes],",
          "620:           [ac_cv_libuna=no])",
          "624:       ])",
          "625:     ])",
          "",
          "[Removed Lines]",
          "622:         ac_cv_libuna_LIBADD=\"-luna\"",
          "623:         ])",
          "",
          "[Added Lines]",
          "626:         ac_cv_libuna_LIBADD=\"-luna\"])",
          "627:       ])",
          "628:     AS_IF(",
          "629:       [test \"x$ac_cv_with_libuna\" != x && test \"x$ac_cv_with_libuna\" != xauto-detect && test \"x$ac_cv_libuna\" != xyes],",
          "630:       [AC_MSG_FAILURE(",
          "631:         [unable to find supported libuna in directory: $ac_cv_with_libuna],",
          "632:         [1])",
          "",
          "---------------"
        ],
        "m4/libwrc.m4||m4/libwrc.m4": [
          "File: m4/libwrc.m4 -> m4/libwrc.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: dnl",
          "5: dnl Function to detect if libwrc is available",
          "6: dnl ac_libwrc_dummy is used to prevent AC_CHECK_LIB adding unnecessary -l<library> arguments",
          "7: AC_DEFUN([AX_LIBWRC_CHECK_LIB],",
          "11:   [AS_IF(",
          "54:     ])",
          "74:   ])",
          "77: dnl Function to detect how to enable libwrc",
          "78: AC_DEFUN([AX_LIBWRC_CHECK_ENABLE],",
          "137:   ])",
          "",
          "[Removed Lines]",
          "1: dnl Functions for libwrc",
          "3: dnl Version: 20120501",
          "8:  [dnl Check if parameters were provided",
          "9:  AS_IF(",
          "10:   [test \"x$ac_cv_with_libwrc\" != x && test \"x$ac_cv_with_libwrc\" != xno && test \"x$ac_cv_with_libwrc\" != xauto-detect],",
          "12:    [test -d \"$ac_cv_with_libwrc\"],",
          "13:    [CFLAGS=\"$CFLAGS -I${ac_cv_with_libwrc}/include\"",
          "14:    LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libwrc}/lib\"],",
          "15:    [AC_MSG_WARN([no such directory: $ac_cv_with_libwrc])",
          "16:    ])",
          "17:   ])",
          "19:  AS_IF(",
          "20:   [test \"x$ac_cv_with_libwrc\" = xno],",
          "21:   [ac_cv_libwrc=no],",
          "22:   [dnl Check for a pkg-config file",
          "23:   AS_IF(",
          "24:    [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "25:    [PKG_CHECK_MODULES(",
          "26:     [libwrc],",
          "27:     [libwrc >= 20120405],",
          "28:     [ac_cv_libwrc=yes],",
          "29:     [ac_cv_libwrc=no])",
          "30:    ])",
          "32:   AS_IF(",
          "33:    [test \"x$ac_cv_libwrc\" = xyes],",
          "34:    [ac_cv_libwrc_CPPFLAGS=\"$pkg_cv_libwrc_CFLAGS\"",
          "35:    ac_cv_libwrc_LIBADD=\"$pkg_cv_libwrc_LIBS\"],",
          "36:    [dnl Check for headers",
          "37:    AC_CHECK_HEADERS([libwrc.h])",
          "39:    AS_IF(",
          "40:     [test \"x$ac_cv_header_libwrc_h\" = xno],",
          "41:     [ac_cv_libwrc=no],",
          "42:     [dnl Check for the individual functions",
          "43:     ac_cv_libwrc=yes",
          "45:     AC_CHECK_LIB(",
          "46:      wrc,",
          "47:      libwrc_get_version,",
          "48:      [ac_cv_libwrc_dummy=yes],",
          "49:      [ac_cv_libwrc=no])",
          "51:     dnl TODO add functions",
          "53:     ac_cv_libwrc_LIBADD=\"-lwrc\"",
          "55:    ])",
          "56:   ])",
          "58:  AS_IF(",
          "59:   [test \"x$ac_cv_libwrc\" = xyes],",
          "60:   [AC_DEFINE(",
          "61:    [HAVE_LIBWRC],",
          "62:    [1],",
          "63:    [Define to 1 if you have the `wrc' library (-lwrc).])",
          "64:   ])",
          "66:  AS_IF(",
          "67:   [test \"x$ac_cv_libwrc\" = xyes],",
          "68:   [AC_SUBST(",
          "69:    [HAVE_LIBWRC],",
          "70:    [1]) ],",
          "71:   [AC_SUBST(",
          "72:    [HAVE_LIBWRC],",
          "73:    [0])",
          "75:  ])",
          "79:  [AX_COMMON_ARG_WITH(",
          "80:   [libwrc],",
          "81:   [libwrc],",
          "82:   [search for libwrc in includedir and libdir or in the specified DIR, or no if to use local version],",
          "83:   [auto-detect],",
          "84:   [DIR])",
          "86:  dnl Check for a shared library version",
          "87:  AX_LIBWRC_CHECK_LIB",
          "89:  dnl Check if the dependencies for the local library version",
          "90:  AS_IF(",
          "91:   [test \"x$ac_cv_libwrc\" != xyes],",
          "92:   [ac_cv_libwrc_CPPFLAGS=\"-I../libwrc\";",
          "93:   ac_cv_libwrc_LIBADD=\"../libwrc/libwrc.la\";",
          "95:   ac_cv_libwrc=local",
          "97:   AC_DEFINE(",
          "98:    [HAVE_LOCAL_LIBWRC],",
          "99:    [1],",
          "100:    [Define to 1 if the local version of libwrc is used.])",
          "101:   AC_SUBST(",
          "102:    [HAVE_LOCAL_LIBWRC],",
          "103:    [1])",
          "104:   ])",
          "106:  AM_CONDITIONAL(",
          "107:   [HAVE_LOCAL_LIBWRC],",
          "108:   [test \"x$ac_cv_libwrc\" = xlocal])",
          "109:  AS_IF(",
          "110:   [test \"x$ac_cv_libwrc_CPPFLAGS\" != \"x\"],",
          "111:   [AC_SUBST(",
          "112:    [LIBWRC_CPPFLAGS],",
          "113:    [$ac_cv_libwrc_CPPFLAGS])",
          "114:   ])",
          "115:  AS_IF(",
          "116:   [test \"x$ac_cv_libwrc_LIBADD\" != \"x\"],",
          "117:   [AC_SUBST(",
          "118:    [LIBWRC_LIBADD],",
          "119:    [$ac_cv_libwrc_LIBADD])",
          "120:   ])",
          "122:  AS_IF(",
          "123:   [test \"x$ac_cv_libwrc\" = xyes],",
          "124:   [AC_SUBST(",
          "125:    [ax_libwrc_pc_libs_private],",
          "126:    [-lwrc])",
          "127:   ])",
          "129:  AS_IF(",
          "130:   [test \"x$ac_cv_libwrc\" = xyes],",
          "131:   [AC_SUBST(",
          "132:    [ax_libwrc_spec_requires],",
          "133:    [libwrc])",
          "134:   AC_SUBST(",
          "135:    [ax_libwrc_spec_build_requires],",
          "136:    [libwrc-devel])",
          "138:  ])",
          "",
          "[Added Lines]",
          "1: dnl Checks for libwrc required headers and functions",
          "3: dnl Version: 20181117",
          "9:     [test \"x$ac_cv_enable_shared_libs\" = xno || test \"x$ac_cv_with_libwrc\" = xno],",
          "10:     [ac_cv_libwrc=no],",
          "11:     [dnl Check if the directory provided as parameter exists",
          "12:     AS_IF(",
          "13:       [test \"x$ac_cv_with_libwrc\" != x && test \"x$ac_cv_with_libwrc\" != xauto-detect],",
          "14:       [AS_IF(",
          "15:         [test -d \"$ac_cv_with_libwrc\"],",
          "16:         [CFLAGS=\"$CFLAGS -I${ac_cv_with_libwrc}/include\"",
          "17:         LDFLAGS=\"$LDFLAGS -L${ac_cv_with_libwrc}/lib\"],",
          "18:         [AC_MSG_FAILURE(",
          "19:           [no such directory: $ac_cv_with_libwrc],",
          "20:           [1])",
          "21:         ])",
          "22:         ac_cv_libwrc=check],",
          "23:       [dnl Check for a pkg-config file",
          "24:       AS_IF(",
          "25:         [test \"x$cross_compiling\" != \"xyes\" && test \"x$PKGCONFIG\" != \"x\"],",
          "26:         [PKG_CHECK_MODULES(",
          "27:           [libwrc],",
          "28:           [libwrc >= 20120425],",
          "29:           [ac_cv_libwrc=yes],",
          "30:           [ac_cv_libwrc=check])",
          "31:         ])",
          "32:       AS_IF(",
          "33:         [test \"x$ac_cv_libwrc\" = xyes],",
          "34:         [ac_cv_libwrc_CPPFLAGS=\"$pkg_cv_libwrc_CFLAGS\"",
          "35:         ac_cv_libwrc_LIBADD=\"$pkg_cv_libwrc_LIBS\"])",
          "36:       ])",
          "38:     AS_IF(",
          "39:       [test \"x$ac_cv_libwrc\" = xcheck],",
          "40:       [dnl Check for headers",
          "41:       AC_CHECK_HEADERS([libwrc.h])",
          "43:       AS_IF(",
          "44:         [test \"x$ac_cv_header_libwrc_h\" = xno],",
          "45:         [ac_cv_libwrc=no],",
          "46:         [dnl Check for the individual functions",
          "47:         ac_cv_libwrc=yes",
          "49:         AC_CHECK_LIB(",
          "50:           wrc,",
          "51:           libwrc_get_version,",
          "52:           [ac_cv_libwrc_dummy=yes],",
          "53:           [ac_cv_libwrc=no])",
          "55:         dnl TODO add functions",
          "57:         ac_cv_libwrc_LIBADD=\"-lwrc\"])",
          "58:       ])",
          "59:     AS_IF(",
          "60:       [test \"x$ac_cv_with_libwrc\" != x && test \"x$ac_cv_with_libwrc\" != xauto-detect && test \"x$ac_cv_libwrc\" != xyes],",
          "61:       [AC_MSG_FAILURE(",
          "62:         [unable to find supported libwrc in directory: $ac_cv_with_libwrc],",
          "63:         [1])",
          "64:       ])",
          "67:   AS_IF(",
          "68:     [test \"x$ac_cv_libwrc\" = xyes],",
          "69:     [AC_DEFINE(",
          "70:       [HAVE_LIBWRC],",
          "71:       [1],",
          "72:       [Define to 1 if you have the `wrc' library (-lwrc).])",
          "73:     ])",
          "75:   AS_IF(",
          "76:     [test \"x$ac_cv_libwrc\" = xyes],",
          "77:     [AC_SUBST(",
          "78:       [HAVE_LIBWRC],",
          "79:       [1]) ],",
          "80:     [AC_SUBST(",
          "81:       [HAVE_LIBWRC],",
          "82:       [0])",
          "83:     ])",
          "88:   [AX_COMMON_ARG_WITH(",
          "89:     [libwrc],",
          "90:     [libwrc],",
          "91:     [search for libwrc in includedir and libdir or in the specified DIR, or no if to use local version],",
          "92:     [auto-detect],",
          "93:     [DIR])",
          "95:   dnl Check for a shared library version",
          "96:   AX_LIBWRC_CHECK_LIB",
          "98:   dnl Check if the dependencies for the local library version",
          "99:   AS_IF(",
          "100:     [test \"x$ac_cv_libwrc\" != xyes],",
          "101:     [ac_cv_libwrc_CPPFLAGS=\"-I../libwrc\";",
          "102:     ac_cv_libwrc_LIBADD=\"../libwrc/libwrc.la\";",
          "104:     ac_cv_libwrc=local",
          "106:     AC_DEFINE(",
          "107:       [HAVE_LOCAL_LIBWRC],",
          "108:       [1],",
          "109:       [Define to 1 if the local version of libwrc is used.])",
          "110:     AC_SUBST(",
          "111:       [HAVE_LOCAL_LIBWRC],",
          "112:       [1])",
          "113:     ])",
          "115:   AM_CONDITIONAL(",
          "116:     [HAVE_LOCAL_LIBWRC],",
          "117:     [test \"x$ac_cv_libwrc\" = xlocal])",
          "118:   AS_IF(",
          "119:     [test \"x$ac_cv_libwrc_CPPFLAGS\" != \"x\"],",
          "120:     [AC_SUBST(",
          "121:       [LIBWRC_CPPFLAGS],",
          "122:       [$ac_cv_libwrc_CPPFLAGS])",
          "123:     ])",
          "124:   AS_IF(",
          "125:     [test \"x$ac_cv_libwrc_LIBADD\" != \"x\"],",
          "126:     [AC_SUBST(",
          "127:       [LIBWRC_LIBADD],",
          "128:       [$ac_cv_libwrc_LIBADD])",
          "129:     ])",
          "131:   AS_IF(",
          "132:     [test \"x$ac_cv_libwrc\" = xyes],",
          "133:     [AC_SUBST(",
          "134:       [ax_libwrc_pc_libs_private],",
          "135:       [-lwrc])",
          "136:     ])",
          "138:   AS_IF(",
          "139:     [test \"x$ac_cv_libwrc\" = xyes],",
          "140:     [AC_SUBST(",
          "141:       [ax_libwrc_spec_requires],",
          "142:       [libwrc])",
          "143:     AC_SUBST(",
          "144:       [ax_libwrc_spec_build_requires],",
          "145:       [libwrc-devel])",
          "146:     ])",
          "",
          "---------------"
        ],
        "msvscpp/libbfio/libbfio.vcproj||msvscpp/libbfio/libbfio.vcproj": [
          "File: msvscpp/libbfio/libbfio.vcproj -> msvscpp/libbfio/libbfio.vcproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:     RelativePath=\"..\\..\\libbfio\\libbfio_file.c\"",
          "159:     >",
          "160:    </File>",
          "161:    <File",
          "162:     RelativePath=\"..\\..\\libbfio\\libbfio_file_pool.c\"",
          "163:     >",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161:    <File",
          "162:     RelativePath=\"..\\..\\libbfio\\libbfio_file_io_handle.c\"",
          "163:     >",
          "164:    </File>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "166:     RelativePath=\"..\\..\\libbfio\\libbfio_file_range.c\"",
          "167:     >",
          "168:    </File>",
          "169:    <File",
          "170:     RelativePath=\"..\\..\\libbfio\\libbfio_handle.c\"",
          "171:     >",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "173:    <File",
          "174:     RelativePath=\"..\\..\\libbfio\\libbfio_file_range_io_handle.c\"",
          "175:     >",
          "176:    </File>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "174:     RelativePath=\"..\\..\\libbfio\\libbfio_memory_range.c\"",
          "175:     >",
          "176:    </File>",
          "177:    <File",
          "178:     RelativePath=\"..\\..\\libbfio\\libbfio_pool.c\"",
          "179:     >",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185:    <File",
          "186:     RelativePath=\"..\\..\\libbfio\\libbfio_memory_range_io_handle.c\"",
          "187:     >",
          "188:    </File>",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "212:     RelativePath=\"..\\..\\libbfio\\libbfio_file.h\"",
          "213:     >",
          "214:    </File>",
          "215:    <File",
          "216:     RelativePath=\"..\\..\\libbfio\\libbfio_file_pool.h\"",
          "217:     >",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "227:    <File",
          "228:     RelativePath=\"..\\..\\libbfio\\libbfio_file_io_handle.h\"",
          "229:     >",
          "230:    </File>",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "220:     RelativePath=\"..\\..\\libbfio\\libbfio_file_range.h\"",
          "221:     >",
          "222:    </File>",
          "223:    <File",
          "224:     RelativePath=\"..\\..\\libbfio\\libbfio_handle.h\"",
          "225:     >",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "239:    <File",
          "240:     RelativePath=\"..\\..\\libbfio\\libbfio_file_range_io_handle.h\"",
          "241:     >",
          "242:    </File>",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "256:     RelativePath=\"..\\..\\libbfio\\libbfio_memory_range.h\"",
          "257:     >",
          "258:    </File>",
          "259:    <File",
          "260:     RelativePath=\"..\\..\\libbfio\\libbfio_pool.h\"",
          "261:     >",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "279:    <File",
          "280:     RelativePath=\"..\\..\\libbfio\\libbfio_memory_range_io_handle.h\"",
          "281:     >",
          "282:    </File>",
          "",
          "---------------"
        ],
        "msvscpp/libexe/libexe.vcproj||msvscpp/libexe/libexe.vcproj": [
          "File: msvscpp/libexe/libexe.vcproj -> msvscpp/libexe/libexe.vcproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:     RelativePath=\"..\\..\\libexe\\libexe_io_handle.c\"",
          "179:     >",
          "180:    </File>",
          "181:    <File",
          "182:     RelativePath=\"..\\..\\libexe\\libexe_notify.c\"",
          "183:     >",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181:    <File",
          "182:     RelativePath=\"..\\..\\libexe\\libexe_le_header.c\"",
          "183:     >",
          "184:    </File>",
          "185:    <File",
          "186:     RelativePath=\"..\\..\\libexe\\libexe_mz_header.c\"",
          "187:     >",
          "188:    </File>",
          "189:    <File",
          "190:     RelativePath=\"..\\..\\libexe\\libexe_ne_header.c\"",
          "191:     >",
          "192:    </File>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "208:     RelativePath=\"..\\..\\libexe\\exe_file_header.h\"",
          "209:     >",
          "210:    </File>",
          "211:    <File",
          "212:     RelativePath=\"..\\..\\libexe\\exe_section_table.h\"",
          "213:     >",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "223:    <File",
          "224:     RelativePath=\"..\\..\\libexe\\exe_le_header.h\"",
          "225:     >",
          "226:    </File>",
          "227:    <File",
          "228:     RelativePath=\"..\\..\\libexe\\exe_mz_header.h\"",
          "229:     >",
          "230:    </File>",
          "231:    <File",
          "232:     RelativePath=\"..\\..\\libexe\\exe_ne_header.h\"",
          "233:     >",
          "234:    </File>",
          "235:    <File",
          "236:     RelativePath=\"..\\..\\libexe\\exe_pe_header.h\"",
          "237:     >",
          "238:    </File>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "256:     RelativePath=\"..\\..\\libexe\\libexe_io_handle.h\"",
          "257:     >",
          "258:    </File>",
          "259:    <File",
          "260:     RelativePath=\"..\\..\\libexe\\libexe_libbfio.h\"",
          "261:     >",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "287:    <File",
          "288:     RelativePath=\"..\\..\\libexe\\libexe_le_header.h\"",
          "289:     >",
          "290:    </File>",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "292:     RelativePath=\"..\\..\\libexe\\libexe_libuna.h\"",
          "293:     >",
          "294:    </File>",
          "295:    <File",
          "296:     RelativePath=\"..\\..\\libexe\\libexe_notify.h\"",
          "297:     >",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "327:    <File",
          "328:     RelativePath=\"..\\..\\libexe\\libexe_mz_header.h\"",
          "329:     >",
          "330:    </File>",
          "331:    <File",
          "332:     RelativePath=\"..\\..\\libexe\\libexe_ne_header.h\"",
          "333:     >",
          "334:    </File>",
          "",
          "---------------"
        ],
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/usr/bin/env python",
          "2: #",
          "3: # Script to build and install Python-bindings.",
          "6: from __future__ import print_function",
          "7: import glob",
          "8: import gzip",
          "9: import platform",
          "",
          "[Removed Lines]",
          "4: # Version: 20180728",
          "",
          "[Added Lines]",
          "4: # Version: 20181117",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87:       ]",
          "89:     else:",
          "111:       output = self._RunCommand(command)",
          "113:       print_line = False",
          "",
          "[Removed Lines]",
          "90:       # We need to run \"configure\" to make sure config.h is generated",
          "91:       # properly. We invoke \"configure\" with \"sh\" here to make sure",
          "92:       # that it works on mingw32 with the standard python.org binaries.",
          "93:       command = \"sh configure --help\"",
          "94:       output = self._RunCommand(command)",
          "96:       # We want to build as much as possible self contained Python binding.",
          "97:       configure_arguments = []",
          "98:       for line in output.split(\"\\n\"):",
          "99:         line = line.strip()",
          "100:         line, _, _ = line.rpartition(\"[=DIR]\")",
          "101:         if line.startswith(\"--with-lib\") and not line.endswith(\"-prefix\"):",
          "102:           configure_arguments.append(\"{0:s}=no\".format(line))",
          "103:         elif line == \"--with-bzip2\":",
          "104:           configure_arguments.append(\"--with-bzip2=no\")",
          "105:         elif line == \"--with-openssl\":",
          "106:           configure_arguments.append(\"--with-openssl=no\")",
          "107:         elif line == \"--with-zlib\":",
          "108:           configure_arguments.append(\"--with-zlib=no\")",
          "110:       command = \"sh configure {0:s}\".format(\" \".join(configure_arguments))",
          "",
          "[Added Lines]",
          "91:       command = \"sh configure --disable-shared-libs\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f8a0f5dc447439f4ae0c0089057a75b78b21642e",
      "candidate_info": {
        "commit_hash": "f8a0f5dc447439f4ae0c0089057a75b78b21642e",
        "repo": "libyal/libevt",
        "commit_url": "https://github.com/libyal/libevt/commit/f8a0f5dc447439f4ae0c0089057a75b78b21642e",
        "files": [
          ".gitignore",
          ".travis.yml",
          "Makefile.am",
          "configure.ac",
          "dpkg/compat",
          "dpkg/control",
          "dpkg/copyright",
          "dpkg/copyright.in",
          "dpkg/libevt-dev.docs",
          "dpkg/libevt-dev.install",
          "dpkg/libevt-python.docs",
          "dpkg/libevt-python.install",
          "dpkg/libevt-python3.docs",
          "dpkg/libevt-python3.install",
          "dpkg/libevt-tools.docs",
          "dpkg/libevt-tools.install",
          "dpkg/libevt.docs",
          "dpkg/libevt.install",
          "dpkg/rules",
          "dpkg/source/format",
          "libevt.ini"
        ],
        "message": "Worked on dpkg files",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "configure.ac||configure.ac",
          "dpkg/copyright.in||dpkg/copyright.in",
          "dpkg/libevt-dev.docs||dpkg/libevt-dev.docs",
          "dpkg/libevt-dev.install||dpkg/libevt-dev.install",
          "dpkg/libevt-python.docs||dpkg/libevt-python.docs",
          "dpkg/libevt-python.install||dpkg/libevt-python.install",
          "dpkg/libevt-python3.docs||dpkg/libevt-python3.docs",
          "dpkg/libevt-python3.install||dpkg/libevt-python3.install",
          "dpkg/libevt-tools.docs||dpkg/libevt-tools.docs",
          "dpkg/libevt-tools.install||dpkg/libevt-tools.install",
          "dpkg/libevt.docs||dpkg/libevt.docs",
          "dpkg/libevt.install||dpkg/libevt.install"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:  dpkg/compat \\",
          "41:  dpkg/control \\",
          "42:  dpkg/copyright \\",
          "44:  dpkg/rules \\",
          "50:  dpkg/source/format",
          "52: GETTEXT_FILES = \\",
          "",
          "[Removed Lines]",
          "43:  dpkg/copyright.in \\",
          "45:  dpkg/libevt.docs \\",
          "46:  dpkg/libevt-dev.docs \\",
          "47:  dpkg/libevt-python.docs \\",
          "48:  dpkg/libevt-python3.docs \\",
          "49:  dpkg/libevt-tools.docs \\",
          "",
          "[Added Lines]",
          "44:  dpkg/libevt.install \\",
          "45:  dpkg/libevt-dev.install \\",
          "46:  dpkg/libevt-python.install \\",
          "47:  dpkg/libevt-python3.install \\",
          "48:  dpkg/libevt-tools.install \\",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_INIT(",
          "4:  [libevt],",
          "6:  [joachim.metz@gmail.com])",
          "8: AC_CONFIG_SRCDIR(",
          "",
          "[Removed Lines]",
          "5:  [20170407],",
          "",
          "[Added Lines]",
          "5:  [20170409],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "226: dnl Have configure make distribution specific files",
          "227: AC_CONFIG_FILES([common/types.h])",
          "228: AC_CONFIG_FILES([dpkg/changelog])",
          "230: AC_CONFIG_FILES([libevt/libevt.rc])",
          "231: AC_CONFIG_FILES([libevt.pc])",
          "232: AC_CONFIG_FILES([libevt.spec])",
          "",
          "[Removed Lines]",
          "229: AC_CONFIG_FILES([dpkg/copyright])",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "dpkg/copyright.in||dpkg/copyright.in": [
          "File: dpkg/copyright.in -> dpkg/copyright.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "dpkg/libevt-dev.docs||dpkg/libevt-dev.docs": [
          "File: dpkg/libevt-dev.docs -> dpkg/libevt-dev.docs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "dpkg/libevt-dev.install||dpkg/libevt-dev.install": [
          "File: dpkg/libevt-dev.install -> dpkg/libevt-dev.install",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: usr/include/*",
          "2: usr/lib/*-*/lib*.a",
          "3: usr/lib/*-*/lib*.so",
          "4: usr/lib/*-*/pkgconfig/*",
          "5: usr/share/man/man3",
          "",
          "---------------"
        ],
        "dpkg/libevt-python.docs||dpkg/libevt-python.docs": [
          "File: dpkg/libevt-python.docs -> dpkg/libevt-python.docs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "dpkg/libevt-python.install||dpkg/libevt-python.install": [
          "File: dpkg/libevt-python.install -> dpkg/libevt-python.install",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: /usr/lib/python2*",
          "",
          "---------------"
        ],
        "dpkg/libevt-python3.docs||dpkg/libevt-python3.docs": [
          "File: dpkg/libevt-python3.docs -> dpkg/libevt-python3.docs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "dpkg/libevt-python3.install||dpkg/libevt-python3.install": [
          "File: dpkg/libevt-python3.install -> dpkg/libevt-python3.install",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: /usr/lib/python3*",
          "",
          "---------------"
        ],
        "dpkg/libevt-tools.docs||dpkg/libevt-tools.docs": [
          "File: dpkg/libevt-tools.docs -> dpkg/libevt-tools.docs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "dpkg/libevt-tools.install||dpkg/libevt-tools.install": [
          "File: dpkg/libevt-tools.install -> dpkg/libevt-tools.install",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: usr/bin",
          "2: usr/share/man/man1",
          "",
          "---------------"
        ],
        "dpkg/libevt.docs||dpkg/libevt.docs": [
          "File: dpkg/libevt.docs -> dpkg/libevt.docs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "dpkg/libevt.install||dpkg/libevt.install": [
          "File: dpkg/libevt.install -> dpkg/libevt.install",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: usr/lib/*-*/lib*.so.*",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7584caa9196f316e79ad504ee26bfdf981ac6713",
      "candidate_info": {
        "commit_hash": "7584caa9196f316e79ad504ee26bfdf981ac6713",
        "repo": "libyal/libevt",
        "commit_url": "https://github.com/libyal/libevt/commit/7584caa9196f316e79ad504ee26bfdf981ac6713",
        "files": [
          ".gitignore",
          "COPYING",
          "appveyor.yml",
          "configure.ac",
          "evttools/evttools_getopt.c",
          "libevt.ini",
          "libevt.nuspec",
          "msvscpp/evt_test_notify/evt_test_notify.vcproj",
          "msvscpp/evt_test_support/evt_test_support.vcproj",
          "msvscpp/libevt.sln",
          "setup.py",
          "tests/Makefile.am",
          "tests/evt_test_functions.c",
          "tests/evt_test_functions.h",
          "tests/evt_test_getopt.c",
          "tests/evt_test_notify.c",
          "tests/evt_test_support.c"
        ],
        "message": "Applied updates",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "evttools/evttools_getopt.c||evttools/evttools_getopt.c",
          "libevt.nuspec||libevt.nuspec",
          "msvscpp/evt_test_notify/evt_test_notify.vcproj||msvscpp/evt_test_notify/evt_test_notify.vcproj",
          "msvscpp/evt_test_support/evt_test_support.vcproj||msvscpp/evt_test_support/evt_test_support.vcproj",
          "msvscpp/libevt.sln||msvscpp/libevt.sln",
          "setup.py||setup.py",
          "tests/Makefile.am||tests/Makefile.am",
          "tests/evt_test_functions.c||tests/evt_test_functions.c",
          "tests/evt_test_functions.h||tests/evt_test_functions.h",
          "tests/evt_test_getopt.c||tests/evt_test_getopt.c",
          "tests/evt_test_notify.c||tests/evt_test_notify.c",
          "tests/evt_test_support.c||tests/evt_test_support.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "libevt.nuspec||libevt.nuspec"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "libevt.nuspec||libevt.nuspec"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_INIT(",
          "4:  [libevt],",
          "6:  [joachim.metz@gmail.com])",
          "8: AC_CONFIG_SRCDIR(",
          "",
          "[Removed Lines]",
          "5:  [20180317],",
          "",
          "[Added Lines]",
          "5:  [20180401],",
          "",
          "---------------"
        ],
        "evttools/evttools_getopt.c||evttools/evttools_getopt.c": [
          "File: evttools/evttools_getopt.c -> evttools/evttools_getopt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: system_integer_t optopt = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: system_character_t *next_option = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:  static char *function              = \"evttools_getopt\";",
          "63:  size_t options_string_length       = 0;",
          "66:  {",
          "68:  }",
          "74:  {",
          "75:   return( (system_integer_t) -1 );",
          "76:  }",
          "80:  {",
          "92:  }",
          "93:  options_string_length = system_string_length(",
          "94:                           options_string );",
          "",
          "[Removed Lines]",
          "65:  if( optind >= argument_count )",
          "67:   return( (system_integer_t) -1 );",
          "69:  argument_value = argument_values[ optind ];",
          "73:  if( *argument_value == 0 )",
          "79:  if( *argument_value != (system_character_t) '-' )",
          "81:   return( (system_integer_t) -1 );",
          "82:  }",
          "83:  argument_value++;",
          "87:  if( *argument_value == (system_character_t) '-' )",
          "88:  {",
          "89:   optind++;",
          "91:   return( (system_integer_t) -1 );",
          "",
          "[Added Lines]",
          "69:  if( next_option != NULL )",
          "71:   argument_value = next_option;",
          "72:   next_option    = NULL;",
          "74:  else if( optind >= argument_count )",
          "78:  else",
          "80:   argument_value = argument_values[ optind ];",
          "84:   if( *argument_value == (system_character_t) '\\0' )",
          "85:   {",
          "86:    return( (system_integer_t) -1 );",
          "87:   }",
          "90:   if( *argument_value != (system_character_t) '-' )",
          "91:   {",
          "92:    return( (system_integer_t) -1 );",
          "93:   }",
          "94:   argument_value++;",
          "98:   if( *argument_value == (system_character_t) '-' )",
          "99:   {",
          "100:    optind++;",
          "102:    return( (system_integer_t) -1 );",
          "103:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "133:   {",
          "134:    optind++;",
          "135:   }",
          "136:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148:   else",
          "149:   {",
          "152:    next_option = argument_value;",
          "153:   }",
          "",
          "---------------"
        ],
        "libevt.nuspec||libevt.nuspec": [
          "File: libevt.nuspec -> libevt.nuspec",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: <package >",
          "3:   <metadata>",
          "4:     <id>libevt</id>",
          "6:     <authors>Joachim Metz</authors>",
          "7:     <owners>joachimmetz</owners>",
          "8:     <licenseUrl>https://raw.githubusercontent.com/libyal/libevt/master/COPYING</licenseUrl>",
          "",
          "[Removed Lines]",
          "5:     <version>20180317</version>",
          "",
          "[Added Lines]",
          "5:     <version>20180401</version>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10:     <requireLicenseAcceptance>false</requireLicenseAcceptance>",
          "11:     <title>libevt</title>",
          "12:     <description>Library to access the Windows Event Log (EVT) format</description>",
          "14:     <copyright>Copyright (C) 2011-2018</copyright>",
          "15:     <tags>native</tags>",
          "16:   </metadata>",
          "",
          "[Removed Lines]",
          "13:     <releaseNotes>Release of libevt 20180317</releaseNotes>",
          "",
          "[Added Lines]",
          "13:     <releaseNotes>Release of libevt 20180401</releaseNotes>",
          "",
          "---------------"
        ],
        "msvscpp/evt_test_notify/evt_test_notify.vcproj||msvscpp/evt_test_notify/evt_test_notify.vcproj": [
          "File: msvscpp/evt_test_notify/evt_test_notify.vcproj -> msvscpp/evt_test_notify/evt_test_notify.vcproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "185:    Filter=\"h;hpp;hxx;hm;inl;inc;xsd\"",
          "186:    UniqueIdentifier=\"{93995380-89BD-4b04-88EB-625FBE52EBFB}\"",
          "187:    >",
          "188:    <File",
          "189:     RelativePath=\"..\\..\\tests\\evt_test_libevt.h\"",
          "190:     >",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "188:    <File",
          "189:     RelativePath=\"..\\..\\tests\\evt_test_libcerror.h\"",
          "190:     >",
          "191:    </File>",
          "",
          "---------------"
        ],
        "msvscpp/evt_test_support/evt_test_support.vcproj||msvscpp/evt_test_support/evt_test_support.vcproj": [
          "File: msvscpp/evt_test_support/evt_test_support.vcproj -> msvscpp/evt_test_support/evt_test_support.vcproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "183:     RelativePath=\"..\\..\\tests\\evt_test_getopt.c\"",
          "184:     >",
          "185:    </File>",
          "186:    <File",
          "187:     RelativePath=\"..\\..\\tests\\evt_test_support.c\"",
          "188:     >",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "186:    <File",
          "187:     RelativePath=\"..\\..\\tests\\evt_test_memory.c\"",
          "188:     >",
          "189:    </File>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "229:     RelativePath=\"..\\..\\tests\\evt_test_macros.h\"",
          "230:     >",
          "231:    </File>",
          "232:    <File",
          "233:     RelativePath=\"..\\..\\tests\\evt_test_unused.h\"",
          "234:     >",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "236:    <File",
          "237:     RelativePath=\"..\\..\\tests\\evt_test_memory.h\"",
          "238:     >",
          "239:    </File>",
          "",
          "---------------"
        ],
        "msvscpp/libevt.sln||msvscpp/libevt.sln": [
          "File: msvscpp/libevt.sln -> msvscpp/libevt.sln",
          "--- Hunk 1 ---",
          "[Context before]",
          "84: Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"evt_test_notify\", \"evt_test_notify\\evt_test_notify.vcproj\", \"{2FEF7DB6-0145-41EB-A09F-E63BE3F1C41D}\"",
          "85:  ProjectSection(ProjectDependencies) = postProject",
          "86:   {66425C2B-EF0C-481D-8170-AAF9663519CA} = {66425C2B-EF0C-481D-8170-AAF9663519CA}",
          "87:  EndProjectSection",
          "88: EndProject",
          "89: Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"evt_test_record\", \"evt_test_record\\evt_test_record.vcproj\", \"{1C13A596-E3BA-4588-A136-B78F37815923}\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87:   {BD3A95FA-A3DE-4B79-A889-A7E5ECA4B69C} = {BD3A95FA-A3DE-4B79-A889-A7E5ECA4B69C}",
          "",
          "---------------"
        ],
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/usr/bin/env python",
          "2: #",
          "3: # Script to build and install Python-bindings.",
          "6: from __future__ import print_function",
          "7: import glob",
          "",
          "[Removed Lines]",
          "4: # Version: 20171105",
          "",
          "[Added Lines]",
          "4: # Version: 20180317",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "164:     dist_files = getattr(self.distribution, \"dist_files\", [])",
          "165:     dist_files.append((\"sdist\", \"\", sdist_package_file))",
          "168: class ProjectInformation(object):",
          "169:   \"\"\"Project information.\"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:     # Make sure PKG-INFO is generated.",
          "168:     sdist.run(self)",
          "",
          "---------------"
        ],
        "tests/Makefile.am||tests/Makefile.am": [
          "File: tests/Makefile.am -> tests/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:  @LIBCERROR_LIBADD@",
          "104: evt_test_notify_SOURCES = \\",
          "105:  evt_test_libevt.h \\",
          "106:  evt_test_macros.h \\",
          "107:  evt_test_notify.c \\",
          "108:  evt_test_unused.h",
          "110: evt_test_notify_LDADD = \\",
          "113: evt_test_record_SOURCES = \\",
          "114:  evt_test_libcerror.h \\",
          "",
          "[Removed Lines]",
          "111:  ../libevt/libevt.la",
          "",
          "[Added Lines]",
          "105:  evt_test_libcerror.h \\",
          "112:  ../libevt/libevt.la \\",
          "113:  @LIBCERROR_LIBADD@",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144:  evt_test_libevt.h \\",
          "145:  evt_test_libuna.h \\",
          "146:  evt_test_macros.h \\",
          "147:  evt_test_support.c \\",
          "148:  evt_test_unused.h",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149:  evt_test_memory.c evt_test_memory.h \\",
          "",
          "---------------"
        ],
        "tests/evt_test_functions.c||tests/evt_test_functions.c": [
          "File: tests/evt_test_functions.c -> tests/evt_test_functions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include <stdlib.h>",
          "31: #endif",
          "33: #include \"evt_test_libcerror.h\"",
          "34: #include \"evt_test_libclocale.h\"",
          "35: #include \"evt_test_libuna.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #include \"evt_test_libbfio.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "441: int evt_test_open_file_io_handle(",
          "442:      libbfio_handle_t **file_io_handle,",
          "443:      uint8_t *data,",
          "444:      size_t data_size,",
          "445:      libcerror_error_t **error )",
          "446: {",
          "447:  static char *function = \"evt_test_open_file_io_handle\";",
          "449:  if( file_io_handle == NULL )",
          "450:  {",
          "451:   libcerror_error_set(",
          "452:    error,",
          "453:    LIBCERROR_ERROR_DOMAIN_ARGUMENTS,",
          "454:    LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE,",
          "455:    \"%s: invalid file IO handle.\",",
          "456:    function );",
          "458:   return( -1 );",
          "459:  }",
          "460:  if( libbfio_memory_range_initialize(",
          "461:       file_io_handle,",
          "462:       error ) != 1 )",
          "463:  {",
          "464:   libcerror_error_set(",
          "465:    error,",
          "466:    LIBCERROR_ERROR_DOMAIN_RUNTIME,",
          "467:    LIBCERROR_RUNTIME_ERROR_INITIALIZE_FAILED,",
          "468:    \"%s: unable to create file IO handle.\",",
          "469:    function );",
          "471:   goto on_error;",
          "472:  }",
          "473:  if( libbfio_memory_range_set(",
          "475:       data,",
          "476:       data_size,",
          "477:       error ) != 1 )",
          "478:  {",
          "479:   libcerror_error_set(",
          "480:    error,",
          "481:    LIBCERROR_ERROR_DOMAIN_RUNTIME,",
          "482:    LIBCERROR_RUNTIME_ERROR_SET_FAILED,",
          "483:    \"%s: unable to set memory range of file IO handle.\",",
          "484:    function );",
          "486:   goto on_error;",
          "487:  }",
          "488:  if( libbfio_handle_open(",
          "490:       LIBBFIO_OPEN_READ,",
          "491:       error ) != 1 )",
          "492:  {",
          "493:   libcerror_error_set(",
          "494:    error,",
          "495:    LIBCERROR_ERROR_DOMAIN_IO,",
          "496:    LIBCERROR_IO_ERROR_OPEN_FAILED,",
          "497:    \"%s: unable to open file IO handle.\",",
          "498:    function );",
          "500:   goto on_error;",
          "501:  }",
          "502:  return( 1 );",
          "504: on_error:",
          "505:  if( *file_io_handle != NULL )",
          "506:  {",
          "507:   libbfio_handle_free(",
          "508:    file_io_handle,",
          "509:    NULL );",
          "510:  }",
          "511:  return( -1 );",
          "512: }",
          "517: int evt_test_close_file_io_handle(",
          "518:      libbfio_handle_t **file_io_handle,",
          "519:      libcerror_error_t **error )",
          "520: {",
          "521:  static char *function = \"evt_test_close_file_io_handle\";",
          "522:  int result            = 0;",
          "524:  if( file_io_handle == NULL )",
          "525:  {",
          "526:   libcerror_error_set(",
          "527:    error,",
          "528:    LIBCERROR_ERROR_DOMAIN_ARGUMENTS,",
          "529:    LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE,",
          "530:    \"%s: invalid file IO handle.\",",
          "531:    function );",
          "533:   return( -1 );",
          "534:  }",
          "535:  if( libbfio_handle_close(",
          "537:       error ) != 0 )",
          "538:  {",
          "539:   libcerror_error_set(",
          "540:    error,",
          "541:    LIBCERROR_ERROR_DOMAIN_IO,",
          "542:    LIBCERROR_IO_ERROR_CLOSE_FAILED,",
          "543:    \"%s: unable to close file IO handle.\",",
          "544:    function );",
          "546:   result = -1;",
          "547:  }",
          "548:  if( libbfio_handle_free(",
          "549:       file_io_handle,",
          "550:       error ) != 1 )",
          "551:  {",
          "552:   libcerror_error_set(",
          "553:    error,",
          "554:    LIBCERROR_ERROR_DOMAIN_RUNTIME,",
          "555:    LIBCERROR_RUNTIME_ERROR_FINALIZE_FAILED,",
          "556:    \"%s: unable to free file IO handle.\",",
          "557:    function );",
          "559:   result = -1;",
          "560:  }",
          "561:  return( result );",
          "562: }",
          "",
          "---------------"
        ],
        "tests/evt_test_functions.h||tests/evt_test_functions.h": [
          "File: tests/evt_test_functions.h -> tests/evt_test_functions.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include <common.h>",
          "26: #include <types.h>",
          "28: #include \"evt_test_libcerror.h\"",
          "30: #if defined( __cplusplus )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #include \"evt_test_libbfio.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50: #if defined( __cplusplus )",
          "51: }",
          "52: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: int evt_test_open_file_io_handle(",
          "52:      libbfio_handle_t **file_io_handle,",
          "53:      uint8_t *data,",
          "54:      size_t data_size,",
          "55:      libcerror_error_t **error );",
          "57: int evt_test_close_file_io_handle(",
          "58:      libbfio_handle_t **file_io_handle,",
          "59:      libcerror_error_t **error );",
          "",
          "---------------"
        ],
        "tests/evt_test_getopt.c||tests/evt_test_getopt.c": [
          "File: tests/evt_test_getopt.c -> tests/evt_test_getopt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: system_integer_t optopt = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: system_character_t *next_option = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:  static char *function              = \"evt_test_getopt\";",
          "63:  size_t options_string_length       = 0;",
          "66:  {",
          "68:  }",
          "74:  {",
          "75:   return( (system_integer_t) -1 );",
          "76:  }",
          "80:  {",
          "92:  }",
          "93:  options_string_length = system_string_length(",
          "94:                           options_string );",
          "",
          "[Removed Lines]",
          "65:  if( optind >= argument_count )",
          "67:   return( (system_integer_t) -1 );",
          "69:  argument_value = argument_values[ optind ];",
          "73:  if( *argument_value == 0 )",
          "79:  if( *argument_value != (system_character_t) '-' )",
          "81:   return( (system_integer_t) -1 );",
          "82:  }",
          "83:  argument_value++;",
          "87:  if( *argument_value == (system_character_t) '-' )",
          "88:  {",
          "89:   optind++;",
          "91:   return( (system_integer_t) -1 );",
          "",
          "[Added Lines]",
          "69:  if( next_option != NULL )",
          "71:   argument_value = next_option;",
          "72:   next_option    = NULL;",
          "74:  else if( optind >= argument_count )",
          "78:  else",
          "80:   argument_value = argument_values[ optind ];",
          "84:   if( *argument_value == (system_character_t) '\\0' )",
          "85:   {",
          "86:    return( (system_integer_t) -1 );",
          "87:   }",
          "90:   if( *argument_value != (system_character_t) '-' )",
          "91:   {",
          "92:    return( (system_integer_t) -1 );",
          "93:   }",
          "94:   argument_value++;",
          "98:   if( *argument_value == (system_character_t) '-' )",
          "99:   {",
          "100:    optind++;",
          "102:    return( (system_integer_t) -1 );",
          "103:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "133:   {",
          "134:    optind++;",
          "135:   }",
          "136:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148:   else",
          "149:   {",
          "152:    next_option = argument_value;",
          "153:   }",
          "",
          "---------------"
        ],
        "tests/evt_test_notify.c||tests/evt_test_notify.c": [
          "File: tests/evt_test_notify.c -> tests/evt_test_notify.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include <stdlib.h>",
          "28: #endif",
          "30: #include \"evt_test_libevt.h\"",
          "31: #include \"evt_test_macros.h\"",
          "32: #include \"evt_test_unused.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: #include \"evt_test_libcerror.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51: int evt_test_notify_set_stream(",
          "52:      void )",
          "53: {",
          "60:  return( 1 );",
          "61: }",
          "",
          "[Removed Lines]",
          "56:  libevt_notify_set_stream(",
          "57:   NULL,",
          "58:   NULL );",
          "",
          "[Added Lines]",
          "55:  libcerror_error_t *error = NULL;",
          "56:  int result               = 0;",
          "60:  result = libevt_notify_set_stream(",
          "61:            NULL,",
          "62:            &error );",
          "64:  EVT_TEST_ASSERT_EQUAL_INT(",
          "65:   \"result\",",
          "66:   result,",
          "67:   1 );",
          "69:  EVT_TEST_ASSERT_IS_NULL(",
          "70:   \"error\",",
          "71:   error );",
          "79: on_error:",
          "80:  if( error != NULL )",
          "81:  {",
          "82:   libcerror_error_free(",
          "83:    &error );",
          "84:  }",
          "85:  return( 0 );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "66: int evt_test_notify_stream_open(",
          "67:      void )",
          "68: {",
          "75:  return( 1 );",
          "76: }",
          "",
          "[Removed Lines]",
          "71:  libevt_notify_stream_open(",
          "72:   NULL,",
          "73:   NULL );",
          "",
          "[Added Lines]",
          "94:  libcerror_error_t *error = NULL;",
          "95:  int result               = 0;",
          "99:  result = libevt_notify_stream_open(",
          "100:            \"notify_stream.log\",",
          "101:            &error );",
          "103:  EVT_TEST_ASSERT_EQUAL_INT(",
          "104:   \"result\",",
          "105:   result,",
          "106:   1 );",
          "108:  EVT_TEST_ASSERT_IS_NULL(",
          "109:   \"error\",",
          "110:   error );",
          "114:  result = libevt_notify_stream_open(",
          "115:            NULL,",
          "116:            &error );",
          "118:  EVT_TEST_ASSERT_EQUAL_INT(",
          "119:   \"result\",",
          "120:   result,",
          "121:   -1 );",
          "123:  EVT_TEST_ASSERT_IS_NOT_NULL(",
          "124:   \"error\",",
          "125:   error );",
          "127:  libcerror_error_free(",
          "128:   &error );",
          "132:  result = libevt_notify_stream_close(",
          "133:            &error );",
          "135:  EVT_TEST_ASSERT_EQUAL_INT(",
          "136:   \"result\",",
          "137:   result,",
          "138:   0 );",
          "140:  EVT_TEST_ASSERT_IS_NULL(",
          "141:   \"error\",",
          "142:   error );",
          "146: on_error:",
          "147:  if( error != NULL )",
          "148:  {",
          "149:   libcerror_error_free(",
          "150:    &error );",
          "151:  }",
          "152:  return( 0 );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "81: int evt_test_notify_stream_close(",
          "82:      void )",
          "83: {",
          "89:  return( 1 );",
          "90: }",
          "",
          "[Removed Lines]",
          "86:  libevt_notify_stream_close(",
          "87:   NULL );",
          "",
          "[Added Lines]",
          "161:  libcerror_error_t *error = NULL;",
          "162:  int result               = 0;",
          "166:  result = libevt_notify_stream_close(",
          "167:            &error );",
          "169:  EVT_TEST_ASSERT_EQUAL_INT(",
          "170:   \"result\",",
          "171:   result,",
          "172:   0 );",
          "174:  EVT_TEST_ASSERT_IS_NULL(",
          "175:   \"error\",",
          "176:   error );",
          "184: on_error:",
          "185:  if( error != NULL )",
          "186:  {",
          "187:   libcerror_error_free(",
          "188:    &error );",
          "189:  }",
          "190:  return( 0 );",
          "",
          "---------------"
        ],
        "tests/evt_test_support.c||tests/evt_test_support.c": [
          "File: tests/evt_test_support.c -> tests/evt_test_support.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: #include \"evt_test_libcerror.h\"",
          "37: #include \"evt_test_libevt.h\"",
          "38: #include \"evt_test_macros.h\"",
          "39: #include \"evt_test_unused.h\"",
          "41: #if !defined( LIBEVT_HAVE_BFIO )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: #include \"evt_test_memory.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "209:  libcerror_error_t *error = NULL;",
          "210:  int result               = 0;",
          "231:  result = libevt_check_file_signature(",
          "233:            &error );",
          "235:  EVT_TEST_ASSERT_EQUAL_INT(",
          "236:   \"result\",",
          "237:   result,",
          "241:   \"error\",",
          "242:   error );",
          "246:  result = libevt_check_file_signature(",
          "248:            &error );",
          "250:  EVT_TEST_ASSERT_EQUAL_INT(",
          "",
          "[Removed Lines]",
          "214:  result = evt_test_get_narrow_source(",
          "215:            source,",
          "216:            narrow_source,",
          "217:            256,",
          "218:            &error );",
          "220:  EVT_TEST_ASSERT_EQUAL_INT(",
          "221:   \"result\",",
          "222:   result,",
          "223:   1 );",
          "225:  EVT_TEST_ASSERT_IS_NULL(",
          "226:   \"error\",",
          "227:   error );",
          "232:            narrow_source,",
          "238:   1 );",
          "240:  EVT_TEST_ASSERT_IS_NULL(",
          "247:            NULL,",
          "",
          "[Added Lines]",
          "213:  if( source != NULL )",
          "214:  {",
          "217:   result = evt_test_get_narrow_source(",
          "218:             source,",
          "219:             narrow_source,",
          "220:             256,",
          "221:             &error );",
          "223:   EVT_TEST_ASSERT_EQUAL_INT(",
          "224:    \"result\",",
          "225:    result,",
          "226:    1 );",
          "228:   EVT_TEST_ASSERT_IS_NULL(",
          "229:    \"error\",",
          "230:    error );",
          "234:   result = libevt_check_file_signature(",
          "235:             narrow_source,",
          "236:             &error );",
          "238:   EVT_TEST_ASSERT_EQUAL_INT(",
          "239:    \"result\",",
          "240:    result,",
          "241:    1 );",
          "243:   EVT_TEST_ASSERT_IS_NULL(",
          "244:    \"error\",",
          "245:    error );",
          "246:  }",
          "250:            NULL,",
          "256:   -1 );",
          "258:  EVT_TEST_ASSERT_IS_NOT_NULL(",
          "262:  libcerror_error_free(",
          "263:   &error );",
          "266:            \"\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "259:  libcerror_error_free(",
          "260:   &error );",
          "262:  return( 1 );",
          "264: on_error:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "281:  if( source != NULL )",
          "282:  {",
          "283: #if defined( HAVE_EVT_TEST_MEMORY )",
          "287:   evt_test_malloc_attempts_before_fail = 0;",
          "289:   result = libevt_check_file_signature(",
          "290:             narrow_source,",
          "291:             &error );",
          "293:   if( evt_test_malloc_attempts_before_fail != -1 )",
          "294:   {",
          "295:    evt_test_malloc_attempts_before_fail = -1;",
          "296:   }",
          "297:   else",
          "298:   {",
          "299:    EVT_TEST_ASSERT_EQUAL_INT(",
          "300:     \"result\",",
          "301:     result,",
          "302:     -1 );",
          "304:    EVT_TEST_ASSERT_IS_NOT_NULL(",
          "305:     \"error\",",
          "306:     error );",
          "308:    libcerror_error_free(",
          "309:     &error );",
          "310:   }",
          "312:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "283:  libcerror_error_t *error = NULL;",
          "284:  int result               = 0;",
          "305:  result = libevt_check_file_signature_wide(",
          "307:            &error );",
          "309:  EVT_TEST_ASSERT_EQUAL_INT(",
          "310:   \"result\",",
          "311:   result,",
          "315:   \"error\",",
          "316:   error );",
          "320:  result = libevt_check_file_signature_wide(",
          "322:            &error );",
          "324:  EVT_TEST_ASSERT_EQUAL_INT(",
          "",
          "[Removed Lines]",
          "288:  result = evt_test_get_wide_source(",
          "289:            source,",
          "290:            wide_source,",
          "291:            256,",
          "292:            &error );",
          "294:  EVT_TEST_ASSERT_EQUAL_INT(",
          "295:   \"result\",",
          "296:   result,",
          "297:   1 );",
          "299:  EVT_TEST_ASSERT_IS_NULL(",
          "300:   \"error\",",
          "301:   error );",
          "306:            wide_source,",
          "312:   1 );",
          "314:  EVT_TEST_ASSERT_IS_NULL(",
          "321:            NULL,",
          "",
          "[Added Lines]",
          "337:  if( source != NULL )",
          "338:  {",
          "341:   result = evt_test_get_wide_source(",
          "342:             source,",
          "343:             wide_source,",
          "344:             256,",
          "345:             &error );",
          "347:   EVT_TEST_ASSERT_EQUAL_INT(",
          "348:    \"result\",",
          "349:    result,",
          "350:    1 );",
          "352:   EVT_TEST_ASSERT_IS_NULL(",
          "353:    \"error\",",
          "354:    error );",
          "358:   result = libevt_check_file_signature_wide(",
          "359:             wide_source,",
          "360:             &error );",
          "362:   EVT_TEST_ASSERT_EQUAL_INT(",
          "363:    \"result\",",
          "364:    result,",
          "365:    1 );",
          "367:   EVT_TEST_ASSERT_IS_NULL(",
          "368:    \"error\",",
          "369:    error );",
          "370:  }",
          "374:            NULL,",
          "380:   -1 );",
          "382:  EVT_TEST_ASSERT_IS_NOT_NULL(",
          "386:  libcerror_error_free(",
          "387:   &error );",
          "390:            L\"\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "333:  libcerror_error_free(",
          "334:   &error );",
          "336:  return( 1 );",
          "338: on_error:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "405:  if( source != NULL )",
          "406:  {",
          "407: #if defined( HAVE_EVT_TEST_MEMORY )",
          "411:   evt_test_malloc_attempts_before_fail = 0;",
          "413:   result = libevt_check_file_signature_wide(",
          "414:             wide_source,",
          "415:             &error );",
          "417:   if( evt_test_malloc_attempts_before_fail != -1 )",
          "418:   {",
          "419:    evt_test_malloc_attempts_before_fail = -1;",
          "420:   }",
          "421:   else",
          "422:   {",
          "423:    EVT_TEST_ASSERT_EQUAL_INT(",
          "424:     \"result\",",
          "425:     result,",
          "426:     -1 );",
          "428:    EVT_TEST_ASSERT_IS_NOT_NULL(",
          "429:     \"error\",",
          "430:     error );",
          "432:    libcerror_error_free(",
          "433:     &error );",
          "434:   }",
          "436:  }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "352: int evt_test_check_file_signature_file_io_handle(",
          "353:      const system_character_t *source )",
          "354: {",
          "357:  libbfio_handle_t *file_io_handle = NULL;",
          "358:  libcerror_error_t *error         = NULL;",
          "",
          "[Removed Lines]",
          "355:  uint8_t empty_block[ 4096 ];",
          "",
          "[Added Lines]",
          "456:  uint8_t empty_block[ 8192 ];",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "374:  EVT_TEST_ASSERT_IS_NOT_NULL(",
          "438:  result = libevt_check_file_signature_file_io_handle(",
          "",
          "[Removed Lines]",
          "365:  result = libbfio_file_initialize(",
          "366:            &file_io_handle,",
          "367:            &error );",
          "369:  EVT_TEST_ASSERT_EQUAL_INT(",
          "370:   \"result\",",
          "371:   result,",
          "372:   1 );",
          "375:   \"file_io_handle\",",
          "376:   file_io_handle );",
          "378:  EVT_TEST_ASSERT_IS_NULL(",
          "379:   \"error\",",
          "380:   error );",
          "382:  source_length = system_string_length(",
          "383:                   source );",
          "385: #if defined( HAVE_WIDE_SYSTEM_CHARACTER )",
          "386:  result = libbfio_file_set_name_wide(",
          "387:            file_io_handle,",
          "388:            source,",
          "389:            source_length,",
          "390:            &error );",
          "391: #else",
          "392:  result = libbfio_file_set_name(",
          "393:            file_io_handle,",
          "394:            source,",
          "395:            source_length,",
          "396:            &error );",
          "397: #endif",
          "398:  EVT_TEST_ASSERT_EQUAL_INT(",
          "399:   \"result\",",
          "400:   result,",
          "401:   1 );",
          "403:  EVT_TEST_ASSERT_IS_NULL(",
          "404:   \"error\",",
          "405:   error );",
          "407:  result = libbfio_handle_open(",
          "408:            file_io_handle,",
          "409:            LIBBFIO_OPEN_READ,",
          "410:            &error );",
          "412:  EVT_TEST_ASSERT_EQUAL_INT(",
          "413:   \"result\",",
          "414:   result,",
          "415:   1 );",
          "417:  EVT_TEST_ASSERT_IS_NULL(",
          "418:   \"error\",",
          "419:   error );",
          "423:  result = libevt_check_file_signature_file_io_handle(",
          "424:            file_io_handle,",
          "425:            &error );",
          "427:  EVT_TEST_ASSERT_EQUAL_INT(",
          "428:   \"result\",",
          "429:   result,",
          "430:   1 );",
          "432:  EVT_TEST_ASSERT_IS_NULL(",
          "433:   \"error\",",
          "434:   error );",
          "",
          "[Added Lines]",
          "466:  memset_result = memory_set(",
          "467:                   empty_block,",
          "468:                   0,",
          "469:                   sizeof( uint8_t ) * 8192 );",
          "472:   \"memset_result\",",
          "473:   memset_result );",
          "475:  if( source != NULL )",
          "476:  {",
          "479:   result = libbfio_file_initialize(",
          "480:             &file_io_handle,",
          "481:             &error );",
          "483:   EVT_TEST_ASSERT_EQUAL_INT(",
          "484:    \"result\",",
          "485:    result,",
          "486:    1 );",
          "488:   EVT_TEST_ASSERT_IS_NOT_NULL(",
          "489:    \"file_io_handle\",",
          "490:    file_io_handle );",
          "492:   EVT_TEST_ASSERT_IS_NULL(",
          "493:    \"error\",",
          "494:    error );",
          "496:   source_length = system_string_length(",
          "497:                    source );",
          "499: #if defined( HAVE_WIDE_SYSTEM_CHARACTER )",
          "500:   result = libbfio_file_set_name_wide(",
          "501:             file_io_handle,",
          "502:             source,",
          "503:             source_length,",
          "504:             &error );",
          "505: #else",
          "506:   result = libbfio_file_set_name(",
          "507:             file_io_handle,",
          "508:             source,",
          "509:             source_length,",
          "510:             &error );",
          "511: #endif",
          "512:   EVT_TEST_ASSERT_EQUAL_INT(",
          "513:    \"result\",",
          "514:    result,",
          "515:    1 );",
          "517:   EVT_TEST_ASSERT_IS_NULL(",
          "518:    \"error\",",
          "519:    error );",
          "521:   result = libbfio_handle_open(",
          "522:             file_io_handle,",
          "523:             LIBBFIO_OPEN_READ,",
          "524:             &error );",
          "526:   EVT_TEST_ASSERT_EQUAL_INT(",
          "527:    \"result\",",
          "528:    result,",
          "529:    1 );",
          "531:   EVT_TEST_ASSERT_IS_NULL(",
          "532:    \"error\",",
          "533:    error );",
          "537:   result = libevt_check_file_signature_file_io_handle(",
          "538:             file_io_handle,",
          "539:             &error );",
          "541:   EVT_TEST_ASSERT_EQUAL_INT(",
          "542:    \"result\",",
          "543:    result,",
          "544:    1 );",
          "546:   EVT_TEST_ASSERT_IS_NULL(",
          "547:    \"error\",",
          "548:    error );",
          "549:  }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "498:            &file_io_handle,",
          "499:            &error );",
          "501:  EVT_TEST_ASSERT_EQUAL_INT(",
          "",
          "[Removed Lines]",
          "456:  result = libbfio_handle_close(",
          "457:            file_io_handle,",
          "458:            &error );",
          "460:  EVT_TEST_ASSERT_EQUAL_INT(",
          "461:   \"result\",",
          "462:   result,",
          "463:   0 );",
          "465:  EVT_TEST_ASSERT_IS_NULL(",
          "466:   \"error\",",
          "467:   error );",
          "469:  result = libbfio_handle_free(",
          "470:            &file_io_handle,",
          "471:            &error );",
          "473:  EVT_TEST_ASSERT_EQUAL_INT(",
          "474:   \"result\",",
          "475:   result,",
          "476:   1 );",
          "478:  EVT_TEST_ASSERT_IS_NULL(",
          "479:   \"file_io_handle\",",
          "480:   file_io_handle );",
          "482:  EVT_TEST_ASSERT_IS_NULL(",
          "483:   \"error\",",
          "484:   error );",
          "488:  memset_result = memory_set(",
          "489:                   empty_block,",
          "490:                   0,",
          "491:                   sizeof( uint8_t ) * 4096 );",
          "493:  EVT_TEST_ASSERT_IS_NOT_NULL(",
          "494:   \"memset_result\",",
          "495:   memset_result );",
          "497:  result = libbfio_memory_range_initialize(",
          "",
          "[Added Lines]",
          "570:  if( source != NULL )",
          "571:  {",
          "572:   result = libbfio_handle_close(",
          "573:             file_io_handle,",
          "574:             &error );",
          "576:   EVT_TEST_ASSERT_EQUAL_INT(",
          "577:    \"result\",",
          "578:    result,",
          "579:    0 );",
          "581:   EVT_TEST_ASSERT_IS_NULL(",
          "582:    \"error\",",
          "583:    error );",
          "585:   result = libbfio_handle_free(",
          "586:             &file_io_handle,",
          "587:             &error );",
          "589:   EVT_TEST_ASSERT_EQUAL_INT(",
          "590:    \"result\",",
          "591:    result,",
          "592:    1 );",
          "594:   EVT_TEST_ASSERT_IS_NULL(",
          "595:    \"file_io_handle\",",
          "596:    file_io_handle );",
          "598:   EVT_TEST_ASSERT_IS_NULL(",
          "599:    \"error\",",
          "600:    error );",
          "601:  }",
          "604:  result = evt_test_open_file_io_handle(",
          "606:            empty_block,",
          "607:            sizeof( uint8_t ) * 1,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "511:   \"error\",",
          "512:   error );",
          "515:            file_io_handle,",
          "518:            &error );",
          "520:  EVT_TEST_ASSERT_EQUAL_INT(",
          "521:   \"result\",",
          "522:   result,",
          "526:   \"error\",",
          "527:   error );",
          "532:            &error );",
          "534:  EVT_TEST_ASSERT_EQUAL_INT(",
          "535:   \"result\",",
          "536:   result,",
          "539:  EVT_TEST_ASSERT_IS_NULL(",
          "540:   \"error\",",
          "541:   error );",
          "547:            &error );",
          "549:  EVT_TEST_ASSERT_EQUAL_INT(",
          "550:   \"result\",",
          "551:   result,",
          "554:  EVT_TEST_ASSERT_IS_NULL(",
          "555:   \"error\",",
          "556:   error );",
          "561:            file_io_handle,",
          "562:            &error );",
          "",
          "[Removed Lines]",
          "514:  result = libbfio_memory_range_set(",
          "516:            empty_block,",
          "517:            sizeof( uint8_t ) * 4096,",
          "523:   1 );",
          "525:  EVT_TEST_ASSERT_IS_NULL(",
          "529:  result = libbfio_handle_open(",
          "530:            file_io_handle,",
          "531:            LIBBFIO_OPEN_READ,",
          "537:   1 );",
          "545:  result = libevt_check_file_signature_file_io_handle(",
          "546:            file_io_handle,",
          "552:   0 );",
          "560:  result = libbfio_handle_close(",
          "",
          "[Added Lines]",
          "623:  result = libevt_check_file_signature_file_io_handle(",
          "630:   -1 );",
          "632:  EVT_TEST_ASSERT_IS_NOT_NULL(",
          "636:  libcerror_error_free(",
          "637:   &error );",
          "639:  result = evt_test_close_file_io_handle(",
          "640:            &file_io_handle,",
          "646:   0 );",
          "654:  result = evt_test_open_file_io_handle(",
          "655:            &file_io_handle,",
          "656:            empty_block,",
          "657:            sizeof( uint8_t ) * 8192,",
          "663:   1 );",
          "665:  EVT_TEST_ASSERT_IS_NOT_NULL(",
          "666:   \"file_io_handle\",",
          "667:   file_io_handle );",
          "673:  result = libevt_check_file_signature_file_io_handle(",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "570:   \"error\",",
          "571:   error );",
          "574:            &file_io_handle,",
          "575:            &error );",
          "577:  EVT_TEST_ASSERT_EQUAL_INT(",
          "578:   \"result\",",
          "579:   result,",
          "586:  EVT_TEST_ASSERT_IS_NULL(",
          "587:   \"error\",",
          "588:   error );",
          "592:  return( 1 );",
          "594: on_error:",
          "",
          "[Removed Lines]",
          "573:  result = libbfio_handle_free(",
          "580:   1 );",
          "582:  EVT_TEST_ASSERT_IS_NULL(",
          "583:   \"file_io_handle\",",
          "584:   file_io_handle );",
          "",
          "[Added Lines]",
          "686:  result = evt_test_close_file_io_handle(",
          "693:   0 );",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "659:   evt_test_set_codepage );",
          "661: #if !defined( __BORLANDC__ ) || ( __BORLANDC__ >= 0x0560 )",
          "669: #if defined( HAVE_WIDE_CHARACTER_TYPE )",
          "685:  return( EXIT_SUCCESS );",
          "",
          "[Removed Lines]",
          "662:  if( source != NULL )",
          "663:  {",
          "664:   EVT_TEST_RUN_WITH_ARGS(",
          "665:    \"libevt_check_file_signature\",",
          "666:    evt_test_check_file_signature,",
          "667:    source );",
          "671:   EVT_TEST_RUN_WITH_ARGS(",
          "672:    \"libevt_check_file_signature_wide\",",
          "673:    evt_test_check_file_signature_wide,",
          "674:    source );",
          "678:   EVT_TEST_RUN_WITH_ARGS(",
          "679:    \"libevt_check_file_signature_file_io_handle\",",
          "680:    evt_test_check_file_signature_file_io_handle,",
          "681:    source );",
          "682:  }",
          "",
          "[Added Lines]",
          "770:  EVT_TEST_RUN_WITH_ARGS(",
          "771:   \"libevt_check_file_signature\",",
          "772:   evt_test_check_file_signature,",
          "773:   source );",
          "777:  EVT_TEST_RUN_WITH_ARGS(",
          "778:   \"libevt_check_file_signature_wide\",",
          "779:   evt_test_check_file_signature_wide,",
          "780:   source );",
          "784:  EVT_TEST_RUN_WITH_ARGS(",
          "785:   \"libevt_check_file_signature_file_io_handle\",",
          "786:   evt_test_check_file_signature_file_io_handle,",
          "787:   source );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "91ddd3d688f991102ec015bee41d4e6bcc7ac022",
      "candidate_info": {
        "commit_hash": "91ddd3d688f991102ec015bee41d4e6bcc7ac022",
        "repo": "libyal/libevt",
        "commit_url": "https://github.com/libyal/libevt/commit/91ddd3d688f991102ec015bee41d4e6bcc7ac022",
        "files": [
          ".travis.yml",
          "appveyor.yml",
          "autogen.sh",
          "configure.ac",
          "libevt.ini",
          "m4/pkg.m4.in",
          "m4/python.m4",
          "runtests.sh",
          "synclibs.ps1",
          "tests/evt_test_memory.h",
          "tests/evt_test_record_values.c",
          "tests/lsan.suppressions",
          "tests/test_evtexport.sh",
          "tests/test_evtinfo.ps1",
          "tests/test_evtinfo.sh",
          "tests/test_library.ps1",
          "tests/test_library.sh",
          "tests/test_python_module.sh",
          "tests/test_runner.sh"
        ],
        "message": "Worked on tests",
        "before_after_code_files": [
          "autogen.sh||autogen.sh",
          "configure.ac||configure.ac",
          "m4/pkg.m4.in||m4/pkg.m4.in",
          "m4/python.m4||m4/python.m4",
          "runtests.sh||runtests.sh",
          "synclibs.ps1||synclibs.ps1",
          "tests/evt_test_memory.h||tests/evt_test_memory.h",
          "tests/evt_test_record_values.c||tests/evt_test_record_values.c",
          "tests/lsan.suppressions||tests/lsan.suppressions",
          "tests/test_evtexport.sh||tests/test_evtexport.sh",
          "tests/test_evtinfo.ps1||tests/test_evtinfo.ps1",
          "tests/test_evtinfo.sh||tests/test_evtinfo.sh",
          "tests/test_library.ps1||tests/test_library.ps1",
          "tests/test_library.sh||tests/test_library.sh",
          "tests/test_python_module.sh||tests/test_python_module.sh",
          "tests/test_runner.sh||tests/test_runner.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "runtests.sh||runtests.sh"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "runtests.sh||runtests.sh"
          ]
        }
      },
      "candidate_diff": {
        "autogen.sh||autogen.sh": [
          "File: autogen.sh -> autogen.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/bin/sh",
          "2: # Script to generate ./configure using the autotools",
          "3: #",
          "6: EXIT_SUCCESS=0;",
          "7: EXIT_FAILURE=1;",
          "9: BINDIR=\"/usr/bin\";",
          "12: then",
          "13:  BINDIR=\"/usr/local/bin\";",
          "14: fi",
          "16: then",
          "17:  BINDIR=\"/usr/local/bin\";",
          "18: fi",
          "20: then",
          "21:  # Default location of MacPorts installed binaries.",
          "22:  BINDIR=\"/opt/local/bin\";",
          "23: fi",
          "25: then",
          "26:  # Default location of MSYS-MinGW installed binaries.",
          "27:  BINDIR=\"/mingw/bin\";",
          "28: fi",
          "33: then",
          "36:  exit ${EXIT_FAILURE};",
          "37: fi",
          "",
          "[Removed Lines]",
          "4: # Version: 20160106",
          "11: if ! test -x \"${BINDIR}/pkg-config\";",
          "15: if ! test -x \"${BINDIR}/pkg-config\";",
          "19: if ! test -x \"${BINDIR}/pkg-config\";",
          "24: if ! test -x \"${BINDIR}/pkg-config\";",
          "30: PKGCONFIG=\"${BINDIR}/pkg-config\";",
          "32: if ! test -x \"${PKGCONFIG}\";",
          "34:  echo \"Unable to find: pkg-config\";",
          "",
          "[Added Lines]",
          "4: # Version: 20170724",
          "11: if ! test -x \"${BINDIR}/aclocal\";",
          "15: if ! test -x \"${BINDIR}/aclocal\";",
          "19: if ! test -x \"${BINDIR}/aclocal\";",
          "24: if ! test -x \"${BINDIR}/aclocal\";",
          "29: if ! test -x \"${BINDIR}/aclocal\";",
          "30: then",
          "31:  # Default location of 32-bit MSYS2-MinGW installed binaries.",
          "32:  BINDIR=\"/mingw32/bin\";",
          "33: fi",
          "34: if ! test -x \"${BINDIR}/aclocal\";",
          "35: then",
          "36:  # Default location of 64-bit MSYS2-MinGW installed binaries.",
          "37:  BINDIR=\"/mingw64/bin\";",
          "38: fi",
          "40: if ! test -x \"${BINDIR}/aclocal\";",
          "42:  echo \"Unable to find autotools\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43: AUTOPOINT=\"${BINDIR}/autopoint\";",
          "44: AUTORECONF=\"${BINDIR}/autoreconf\";",
          "45: LIBTOOLIZE=\"${BINDIR}/libtoolize\";",
          "47: if test -x \"${AUTORECONF}\";",
          "48: then",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54: PKGCONFIG=\"${BINDIR}/pkg-config\";",
          "56: if test \"${OSTYPE}\" = \"msys\";",
          "57: then",
          "58:  # Work-around for autopoint failing to detect gettext version",
          "59:  # using func_trace (which is not available) on MSYS by writing",
          "60:  # the gettext version to intl/VERSION.",
          "61:  if ! test -d intl;",
          "62:  then",
          "63:   mkdir intl;",
          "64:  fi",
          "65:  GETTEXT_VERSION=`gettext --version | head -n1 | sed 's/^.* //'`;",
          "67:  echo \"gettext-${GETTEXT_VERSION}\" > intl/VERSION;",
          "69: elif ! test -x \"${PKGCONFIG}\";",
          "70: then",
          "71:  echo \"Unable to find: pkg-config\";",
          "73:  exit ${EXIT_FAILURE};",
          "74: fi",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_INIT(",
          "4:  [libevt],",
          "6:  [joachim.metz@gmail.com])",
          "8: AC_CONFIG_SRCDIR(",
          "",
          "[Removed Lines]",
          "5:  [20170630],",
          "",
          "[Added Lines]",
          "5:  [20170825],",
          "",
          "---------------"
        ],
        "m4/pkg.m4.in||m4/pkg.m4.in": [
          "File: m4/pkg.m4.in -> m4/pkg.m4.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # pkg.m4 - Macros to locate and utilise pkg-config.   -*- Autoconf -*-",
          "2: # serial 12 (pkg-config-@VERSION@)",
          "3: #",
          "4: # Copied from: https://cgit.freedesktop.org/pkg-config/plain/pkg.m4.in",
          "6: dnl Copyright \u00a9 2004 Scott James Remnant <scott@netsplit.com>.",
          "7: dnl Copyright \u00a9 2012-2015 Dan Nicholson <dbn.lists@gmail.com>",
          "8: dnl",
          "9: dnl This program is free software; you can redistribute it and/or modify",
          "10: dnl it under the terms of the GNU General Public License as published by",
          "11: dnl the Free Software Foundation; either version 2 of the License, or",
          "12: dnl (at your option) any later version.",
          "13: dnl",
          "14: dnl This program is distributed in the hope that it will be useful, but",
          "15: dnl WITHOUT ANY WARRANTY; without even the implied warranty of",
          "16: dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU",
          "17: dnl General Public License for more details.",
          "18: dnl",
          "19: dnl You should have received a copy of the GNU General Public License",
          "20: dnl along with this program; if not, write to the Free Software",
          "21: dnl Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA",
          "22: dnl 02111-1307, USA.",
          "23: dnl",
          "24: dnl As a special exception to the GNU General Public License, if you",
          "25: dnl distribute this file as part of a program that contains a",
          "26: dnl configuration script generated by Autoconf, you may include it under",
          "27: dnl the same distribution terms that you use for the rest of that",
          "28: dnl program.",
          "30: dnl PKG_PREREQ(MIN-VERSION)",
          "31: dnl -----------------------",
          "32: dnl Since: 0.29",
          "33: dnl",
          "34: dnl Verify that the version of the pkg-config macros are at least",
          "35: dnl MIN-VERSION. Unlike PKG_PROG_PKG_CONFIG, which checks the user's",
          "36: dnl installed version of pkg-config, this checks the developer's version",
          "37: dnl of pkg.m4 when generating configure.",
          "38: dnl",
          "39: dnl To ensure that this macro is defined, also add:",
          "40: dnl m4_ifndef([PKG_PREREQ],",
          "41: dnl     [m4_fatal([must install pkg-config 0.29 or later before running autoconf/autogen])])",
          "42: dnl",
          "43: dnl See the \"Since\" comment for each macro you use to see what version",
          "44: dnl of the macros you require.",
          "45: m4_defun([PKG_PREREQ],",
          "46: [m4_define([PKG_MACROS_VERSION], [@VERSION@])",
          "47: m4_if(m4_version_compare(PKG_MACROS_VERSION, [$1]), -1,",
          "48:     [m4_fatal([pkg.m4 version $1 or higher is required but ]PKG_MACROS_VERSION[ found])])",
          "49: ])dnl PKG_PREREQ",
          "51: dnl PKG_PROG_PKG_CONFIG([MIN-VERSION])",
          "52: dnl ----------------------------------",
          "53: dnl Since: 0.16",
          "54: dnl",
          "55: dnl Search for the pkg-config tool and set the PKG_CONFIG variable to",
          "56: dnl first found in the path. Checks that the version of pkg-config found",
          "57: dnl is at least MIN-VERSION. If MIN-VERSION is not specified, 0.9.0 is",
          "58: dnl used since that's the first version where most current features of",
          "59: dnl pkg-config existed.",
          "60: AC_DEFUN([PKG_PROG_PKG_CONFIG],",
          "61: [m4_pattern_forbid([^_?PKG_[A-Z_]+$])",
          "62: m4_pattern_allow([^PKG_CONFIG(_(PATH|LIBDIR|SYSROOT_DIR|ALLOW_SYSTEM_(CFLAGS|LIBS)))?$])",
          "63: m4_pattern_allow([^PKG_CONFIG_(DISABLE_UNINSTALLED|TOP_BUILD_DIR|DEBUG_SPEW)$])",
          "64: AC_ARG_VAR([PKG_CONFIG], [path to pkg-config utility])",
          "65: AC_ARG_VAR([PKG_CONFIG_PATH], [directories to add to pkg-config's search path])",
          "66: AC_ARG_VAR([PKG_CONFIG_LIBDIR], [path overriding pkg-config's built-in search path])",
          "68: if test \"x$ac_cv_env_PKG_CONFIG_set\" != \"xset\"; then",
          "69:  AC_PATH_TOOL([PKG_CONFIG], [pkg-config])",
          "70: fi",
          "71: if test -n \"$PKG_CONFIG\"; then",
          "72:  _pkg_min_version=m4_default([$1], [0.9.0])",
          "73:  AC_MSG_CHECKING([pkg-config is at least version $_pkg_min_version])",
          "74:  if $PKG_CONFIG --atleast-pkgconfig-version $_pkg_min_version; then",
          "75:   AC_MSG_RESULT([yes])",
          "76:  else",
          "77:   AC_MSG_RESULT([no])",
          "78:   PKG_CONFIG=\"\"",
          "79:  fi",
          "80: fi[]dnl",
          "81: ])dnl PKG_PROG_PKG_CONFIG",
          "83: dnl PKG_CHECK_EXISTS(MODULES, [ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])",
          "84: dnl -------------------------------------------------------------------",
          "85: dnl Since: 0.18",
          "86: dnl",
          "87: dnl Check to see whether a particular set of modules exists. Similar to",
          "88: dnl PKG_CHECK_MODULES(), but does not set variables or print errors.",
          "89: dnl",
          "90: dnl Please remember that m4 expands AC_REQUIRE([PKG_PROG_PKG_CONFIG])",
          "91: dnl only at the first occurence in configure.ac, so if the first place",
          "92: dnl it's called might be skipped (such as if it is within an \"if\", you",
          "93: dnl have to call PKG_CHECK_EXISTS manually",
          "94: AC_DEFUN([PKG_CHECK_EXISTS],",
          "95: [AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl",
          "96: if test -n \"$PKG_CONFIG\" && \\",
          "97:     AC_RUN_LOG([$PKG_CONFIG --exists --print-errors \"$1\"]); then",
          "98:   m4_default([$2], [:])",
          "99: m4_ifvaln([$3], [else",
          "100:   $3])dnl",
          "101: fi])",
          "103: dnl _PKG_CONFIG([VARIABLE], [COMMAND], [MODULES])",
          "104: dnl ---------------------------------------------",
          "105: dnl Internal wrapper calling pkg-config via PKG_CONFIG and setting",
          "106: dnl pkg_failed based on the result.",
          "107: m4_define([_PKG_CONFIG],",
          "108: [if test -n \"$$1\"; then",
          "109:     pkg_cv_[]$1=\"$$1\"",
          "110:  elif test -n \"$PKG_CONFIG\"; then",
          "111:     PKG_CHECK_EXISTS([$3],",
          "112:                      [pkg_cv_[]$1=`$PKG_CONFIG --[]$2 \"$3\" 2>/dev/null`",
          "113:         test \"x$?\" != \"x0\" && pkg_failed=yes ],",
          "114:        [pkg_failed=yes])",
          "115:  else",
          "116:     pkg_failed=untried",
          "117: fi[]dnl",
          "118: ])dnl _PKG_CONFIG",
          "120: dnl _PKG_SHORT_ERRORS_SUPPORTED",
          "121: dnl ---------------------------",
          "122: dnl Internal check to see if pkg-config supports short errors.",
          "123: AC_DEFUN([_PKG_SHORT_ERRORS_SUPPORTED],",
          "124: [AC_REQUIRE([PKG_PROG_PKG_CONFIG])",
          "125: if $PKG_CONFIG --atleast-pkgconfig-version 0.20; then",
          "126:         _pkg_short_errors_supported=yes",
          "127: else",
          "128:         _pkg_short_errors_supported=no",
          "129: fi[]dnl",
          "130: ])dnl _PKG_SHORT_ERRORS_SUPPORTED",
          "133: dnl PKG_CHECK_MODULES(VARIABLE-PREFIX, MODULES, [ACTION-IF-FOUND],",
          "134: dnl   [ACTION-IF-NOT-FOUND])",
          "135: dnl --------------------------------------------------------------",
          "136: dnl Since: 0.4.0",
          "137: dnl",
          "138: dnl Note that if there is a possibility the first call to",
          "139: dnl PKG_CHECK_MODULES might not happen, you should be sure to include an",
          "140: dnl explicit call to PKG_PROG_PKG_CONFIG in your configure.ac",
          "141: AC_DEFUN([PKG_CHECK_MODULES],",
          "142: [AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl",
          "143: AC_ARG_VAR([$1][_CFLAGS], [C compiler flags for $1, overriding pkg-config])dnl",
          "144: AC_ARG_VAR([$1][_LIBS], [linker flags for $1, overriding pkg-config])dnl",
          "146: pkg_failed=no",
          "147: AC_MSG_CHECKING([for $2])",
          "149: _PKG_CONFIG([$1][_CFLAGS], [cflags], [$2])",
          "150: _PKG_CONFIG([$1][_LIBS], [libs], [$2])",
          "152: m4_define([_PKG_TEXT], [Alternatively, you may set the environment variables $1[]_CFLAGS",
          "153: and $1[]_LIBS to avoid the need to call pkg-config.",
          "154: See the pkg-config man page for more details.])",
          "156: if test $pkg_failed = yes; then",
          "157:         AC_MSG_RESULT([no])",
          "158:         _PKG_SHORT_ERRORS_SUPPORTED",
          "159:         if test $_pkg_short_errors_supported = yes; then",
          "160:          $1[]_PKG_ERRORS=`$PKG_CONFIG --short-errors --print-errors --cflags --libs \"$2\" 2>&1`",
          "161:         else",
          "162:          $1[]_PKG_ERRORS=`$PKG_CONFIG --print-errors --cflags --libs \"$2\" 2>&1`",
          "163:         fi",
          "164:  # Put the nasty error message in config.log where it belongs",
          "165:  echo \"$$1[]_PKG_ERRORS\" >&AS_MESSAGE_LOG_FD",
          "167:  m4_default([$4], [AC_MSG_ERROR(",
          "168: [Package requirements ($2) were not met:",
          "170: $$1_PKG_ERRORS",
          "172: Consider adjusting the PKG_CONFIG_PATH environment variable if you",
          "173: installed software in a non-standard prefix.",
          "175: _PKG_TEXT])[]dnl",
          "176:         ])",
          "177: elif test $pkg_failed = untried; then",
          "178:         AC_MSG_RESULT([no])",
          "179:  m4_default([$4], [AC_MSG_FAILURE(",
          "180: [The pkg-config script could not be found or is too old.  Make sure it",
          "181: is in your PATH or set the PKG_CONFIG environment variable to the full",
          "182: path to pkg-config.",
          "184: _PKG_TEXT",
          "186: To get pkg-config, see <http://pkg-config.freedesktop.org/>.])[]dnl",
          "187:         ])",
          "188: else",
          "189:  $1[]_CFLAGS=$pkg_cv_[]$1[]_CFLAGS",
          "190:  $1[]_LIBS=$pkg_cv_[]$1[]_LIBS",
          "191:         AC_MSG_RESULT([yes])",
          "192:  $3",
          "193: fi[]dnl",
          "194: ])dnl PKG_CHECK_MODULES",
          "197: dnl PKG_CHECK_MODULES_STATIC(VARIABLE-PREFIX, MODULES, [ACTION-IF-FOUND],",
          "198: dnl   [ACTION-IF-NOT-FOUND])",
          "199: dnl ---------------------------------------------------------------------",
          "200: dnl Since: 0.29",
          "201: dnl",
          "202: dnl Checks for existence of MODULES and gathers its build flags with",
          "203: dnl static libraries enabled. Sets VARIABLE-PREFIX_CFLAGS from --cflags",
          "204: dnl and VARIABLE-PREFIX_LIBS from --libs.",
          "205: dnl",
          "206: dnl Note that if there is a possibility the first call to",
          "207: dnl PKG_CHECK_MODULES_STATIC might not happen, you should be sure to",
          "208: dnl include an explicit call to PKG_PROG_PKG_CONFIG in your",
          "209: dnl configure.ac.",
          "210: AC_DEFUN([PKG_CHECK_MODULES_STATIC],",
          "211: [AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl",
          "212: _save_PKG_CONFIG=$PKG_CONFIG",
          "213: PKG_CONFIG=\"$PKG_CONFIG --static\"",
          "214: PKG_CHECK_MODULES($@)",
          "215: PKG_CONFIG=$_save_PKG_CONFIG[]dnl",
          "216: ])dnl PKG_CHECK_MODULES_STATIC",
          "219: dnl PKG_INSTALLDIR([DIRECTORY])",
          "220: dnl -------------------------",
          "221: dnl Since: 0.27",
          "222: dnl",
          "223: dnl Substitutes the variable pkgconfigdir as the location where a module",
          "224: dnl should install pkg-config .pc files. By default the directory is",
          "225: dnl $libdir/pkgconfig, but the default can be changed by passing",
          "226: dnl DIRECTORY. The user can override through the --with-pkgconfigdir",
          "227: dnl parameter.",
          "228: AC_DEFUN([PKG_INSTALLDIR],",
          "229: [m4_pushdef([pkg_default], [m4_default([$1], ['${libdir}/pkgconfig'])])",
          "230: m4_pushdef([pkg_description],",
          "231:     [pkg-config installation directory @<:@]pkg_default[@:>@])",
          "232: AC_ARG_WITH([pkgconfigdir],",
          "233:     [AS_HELP_STRING([--with-pkgconfigdir], pkg_description)],,",
          "234:     [with_pkgconfigdir=]pkg_default)",
          "235: AC_SUBST([pkgconfigdir], [$with_pkgconfigdir])",
          "236: m4_popdef([pkg_default])",
          "237: m4_popdef([pkg_description])",
          "238: ])dnl PKG_INSTALLDIR",
          "241: dnl PKG_NOARCH_INSTALLDIR([DIRECTORY])",
          "242: dnl --------------------------------",
          "243: dnl Since: 0.27",
          "244: dnl",
          "245: dnl Substitutes the variable noarch_pkgconfigdir as the location where a",
          "246: dnl module should install arch-independent pkg-config .pc files. By",
          "247: dnl default the directory is $datadir/pkgconfig, but the default can be",
          "248: dnl changed by passing DIRECTORY. The user can override through the",
          "249: dnl --with-noarch-pkgconfigdir parameter.",
          "250: AC_DEFUN([PKG_NOARCH_INSTALLDIR],",
          "251: [m4_pushdef([pkg_default], [m4_default([$1], ['${datadir}/pkgconfig'])])",
          "252: m4_pushdef([pkg_description],",
          "253:     [pkg-config arch-independent installation directory @<:@]pkg_default[@:>@])",
          "254: AC_ARG_WITH([noarch-pkgconfigdir],",
          "255:     [AS_HELP_STRING([--with-noarch-pkgconfigdir], pkg_description)],,",
          "256:     [with_noarch_pkgconfigdir=]pkg_default)",
          "257: AC_SUBST([noarch_pkgconfigdir], [$with_noarch_pkgconfigdir])",
          "258: m4_popdef([pkg_default])",
          "259: m4_popdef([pkg_description])",
          "260: ])dnl PKG_NOARCH_INSTALLDIR",
          "263: dnl PKG_CHECK_VAR(VARIABLE, MODULE, CONFIG-VARIABLE,",
          "264: dnl [ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])",
          "265: dnl -------------------------------------------",
          "266: dnl Since: 0.28",
          "267: dnl",
          "268: dnl Retrieves the value of the pkg-config variable for the given module.",
          "269: AC_DEFUN([PKG_CHECK_VAR],",
          "270: [AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl",
          "271: AC_ARG_VAR([$1], [value of $3 for $2, overriding pkg-config])dnl",
          "273: _PKG_CONFIG([$1], [variable=\"][$3][\"], [$2])",
          "274: AS_VAR_COPY([$1], [pkg_cv_][$1])",
          "276: AS_VAR_IF([$1], [\"\"], [$5], [$4])dnl",
          "277: ])dnl PKG_CHECK_VAR",
          "",
          "---------------"
        ],
        "m4/python.m4||m4/python.m4": [
          "File: m4/python.m4 -> m4/python.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: dnl Functions for Python bindings",
          "2: dnl",
          "5: dnl Function to check if the python binary is available",
          "6: dnl \"python${PYTHON_VERSION} python python# python#.#\"",
          "7: AC_DEFUN([AX_PROG_PYTHON],",
          "23:   AC_SUBST(",
          "29:   ])",
          "35: dnl Function to check if the python2 binary is available",
          "36: dnl \"python2 python2.#\"",
          "37: AC_DEFUN([AX_PROG_PYTHON2],",
          "50:   AC_SUBST(",
          "56:   ])",
          "62: dnl Function to check if the python3 binary is available",
          "63: dnl \"python3 python3.#\"",
          "64: AC_DEFUN([AX_PROG_PYTHON3],",
          "77:   AC_SUBST(",
          "83:   ])",
          "89: dnl Function to check if the python-config binary is available",
          "90: dnl \"python${PYTHON_VERSION}-config python-config\"",
          "91: AC_DEFUN([AX_PROG_PYTHON_CONFIG],",
          "102:   ])",
          "108: dnl Function to check if the python2-config binary is available",
          "109: AC_DEFUN([AX_PROG_PYTHON2_CONFIG],",
          "120:   ])",
          "126: dnl Function to check if the python3-config binary is available",
          "127: AC_DEFUN([AX_PROG_PYTHON3_CONFIG],",
          "138:   ])",
          "144: dnl Function to detect if a Python build environment is available",
          "145: AC_DEFUN([AX_PYTHON_CHECK],",
          "192:   AS_IF(",
          "230:   AS_IF(",
          "246:   ])",
          "249: dnl Function to detect if a Python 2 build environment is available",
          "250: AC_DEFUN([AX_PYTHON2_CHECK],",
          "297:   AS_IF(",
          "335:   AS_IF(",
          "351:   ])",
          "354: dnl Function to detect if a Python 3 build environment is available",
          "355: AC_DEFUN([AX_PYTHON3_CHECK],",
          "402:   AS_IF(",
          "440:   AS_IF(",
          "456:   ])",
          "459: dnl Function to determine the prefix of pythondir",
          "460: AC_DEFUN([AX_PYTHON_CHECK_PYPREFIX],",
          "467: ])",
          "469: dnl Function to detect if to enable Python",
          "470: AC_DEFUN([AX_PYTHON_CHECK_ENABLE],",
          "498: ])",
          "500: dnl Function to detect if to enable Python 2",
          "501: AC_DEFUN([AX_PYTHON2_CHECK_ENABLE],",
          "529: ])",
          "531: dnl Function to detect if to enable Python 3",
          "532: AC_DEFUN([AX_PYTHON3_CHECK_ENABLE],",
          "560: ])",
          "",
          "[Removed Lines]",
          "3: dnl Version: 20160106",
          "8:  [AS_IF(",
          "9:   [test \"x${PYTHON_VERSION}\" != x],",
          "10:   [ax_python_progs=\"python${PYTHON_VERSION}\"],",
          "11:   [ax_python_progs=\"python python2 python2.7 python2.6 python2.5 python3 python3.4 python3.3 python3.2 python3.1 python3.0\"])",
          "12:  AC_CHECK_PROGS(",
          "13:   [PYTHON],",
          "14:   [$ax_python_progs])",
          "15:  AS_IF(",
          "16:   [test \"x${PYTHON}\" != x],",
          "17:   [ax_prog_python_version=`${PYTHON} -c \"import sys; sys.stdout.write(sys.version[[:3]])\" 2>/dev/null`;",
          "18:   AC_SUBST(",
          "19:    [PYTHON_VERSION],",
          "20:    [$ax_prog_python_version])",
          "22:   ax_prog_python_platform=`${PYTHON} -c \"import sys; sys.stdout.write(sys.platform)\" 2>/dev/null`;",
          "24:    [PYTHON_PLATFORM],",
          "25:    [$ax_prog_python_platform])",
          "26:   ],",
          "27:   [AC_MSG_ERROR(",
          "28:    [Unable to find python])",
          "30:  AC_SUBST(",
          "31:   [PYTHON],",
          "32:   [$PYTHON])",
          "33:  ])",
          "38:  [ax_python2_progs=\"python2 python2.7 python2.6 python2.5\"",
          "39:  AC_CHECK_PROGS(",
          "40:   [PYTHON2],",
          "41:   [$ax_python2_progs])",
          "42:  AS_IF(",
          "43:   [test \"x${PYTHON2}\" != x],",
          "44:   [ax_prog_python2_version=`${PYTHON2} -c \"import sys; sys.stdout.write(sys.version[[:3]])\" 2>/dev/null`;",
          "45:   AC_SUBST(",
          "46:    [PYTHON2_VERSION],",
          "47:    [$ax_prog_python2_version])",
          "49:   ax_prog_python2_platform=`${PYTHON2} -c \"import sys; sys.stdout.write(sys.platform)\" 2>/dev/null`;",
          "51:    [PYTHON2_PLATFORM],",
          "52:    [$ax_prog_python2_platform])",
          "53:   ],",
          "54:   [AC_MSG_ERROR(",
          "55:    [Unable to find python2])",
          "57:  AC_SUBST(",
          "58:   [PYTHON2],",
          "59:   [$PYTHON2])",
          "60:  ])",
          "65:  [ax_python3_progs=\"python3 python3.4 python3.3 python3.2 python3.1 python3.0\"",
          "66:  AC_CHECK_PROGS(",
          "67:   [PYTHON3],",
          "68:   [$ax_python3_progs])",
          "69:  AS_IF(",
          "70:   [test \"x${PYTHON3}\" != x],",
          "71:   [ax_prog_python3_version=`${PYTHON3} -c \"import sys; sys.stdout.write(sys.version[[:3]])\" 2>/dev/null`;",
          "72:   AC_SUBST(",
          "73:    [PYTHON3_VERSION],",
          "74:    [$ax_prog_python3_version])",
          "76:   ax_prog_python3_platform=`${PYTHON3} -c \"import sys; sys.stdout.write(sys.platform)\" 2>/dev/null`;",
          "78:    [PYTHON3_PLATFORM],",
          "79:    [$ax_prog_python3_platform])",
          "80:   ],",
          "81:   [AC_MSG_ERROR(",
          "82:    [Unable to find python3])",
          "84:  AC_SUBST(",
          "85:   [PYTHON3],",
          "86:   [$PYTHON3])",
          "87:  ])",
          "92:  [AS_IF(",
          "93:   [test \"x${PYTHON}\" != x],",
          "94:   [AC_CHECK_PROGS(",
          "95:    [PYTHON_CONFIG],",
          "96:    [python${PYTHON_VERSION}-config python-config])",
          "97:   ])",
          "98:  AS_IF(",
          "99:   [test \"x${PYTHON_CONFIG}\" = x],",
          "100:   [AC_MSG_ERROR(",
          "101:    [Unable to find python-config])",
          "103:  AC_SUBST(",
          "104:   [PYTHON_CONFIG],",
          "105:   [$PYTHON_CONFIG])",
          "106:  ])",
          "110:  [AS_IF(",
          "111:   [test \"x${PYTHON2}\" != x],",
          "112:   [AC_CHECK_PROGS(",
          "113:    [PYTHON2_CONFIG],",
          "114:    [python2-config])",
          "115:   ])",
          "116:  AS_IF(",
          "117:   [test \"x${PYTHON2_CONFIG}\" = x],",
          "118:   [AC_MSG_ERROR(",
          "119:    [Unable to find python2-config])",
          "121:  AC_SUBST(",
          "122:   [PYTHON2_CONFIG],",
          "123:   [$PYTHON2_CONFIG])",
          "124:  ])",
          "128:  [AS_IF(",
          "129:   [test \"x${PYTHON3}\" != x],",
          "130:   [AC_CHECK_PROGS(",
          "131:    [PYTHON3_CONFIG],",
          "132:    [python3-config])",
          "133:   ])",
          "134:  AS_IF(",
          "135:   [test \"x${PYTHON3_CONFIG}\" = x],",
          "136:   [AC_MSG_ERROR(",
          "137:    [Unable to find python3-config])",
          "139:  AC_SUBST(",
          "140:   [PYTHON3_CONFIG],",
          "141:   [$PYTHON3_CONFIG])",
          "142:  ])",
          "146:  [AX_PROG_PYTHON",
          "147:  AX_PROG_PYTHON_CONFIG",
          "149:  AS_IF(",
          "150:   [test \"x${PYTHON_CONFIG}\" != x],",
          "151:   [dnl Check for Python includes",
          "152:   PYTHON_INCLUDES=`${PYTHON_CONFIG} --includes 2>/dev/null`;",
          "154:   AC_MSG_CHECKING(",
          "155:    [for Python includes])",
          "156:   AC_MSG_RESULT(",
          "157:    [$PYTHON_INCLUDES])",
          "159:   dnl Check for Python libraries",
          "160:   PYTHON_LDFLAGS=`${PYTHON_CONFIG} --ldflags 2>/dev/null`;",
          "162:   AC_MSG_CHECKING(",
          "163:    [for Python libraries])",
          "164:   AC_MSG_RESULT(",
          "165:    [$PYTHON_LDFLAGS])",
          "167:   dnl Check for the existence of Python.h",
          "168:   BACKUP_CPPFLAGS=\"${CPPFLAGS}\"",
          "169:   CPPFLAGS=\"${CPPFLAGS} ${PYTHON_INCLUDES}\"",
          "171:   AC_CHECK_HEADERS(",
          "172:    [Python.h],",
          "173:    [ac_cv_header_python_h=yes],",
          "174:    [ac_cv_header_python_h=no])",
          "176:   CPPFLAGS=\"${BACKUP_CPPFLAGS}\"",
          "177:  ])",
          "179:  AS_IF(",
          "180:   [test \"x${ac_cv_header_python_h}\" != xyes],",
          "181:   [ac_cv_enable_python=no],",
          "182:   [ac_cv_enable_python=$PYTHON_VERSION",
          "183:   AC_SUBST(",
          "184:    [PYTHON_CPPFLAGS],",
          "185:    [$PYTHON_INCLUDES])",
          "187:   AC_SUBST(",
          "188:    [PYTHON_LDFLAGS],",
          "189:    [$PYTHON_LDFLAGS])",
          "191:   dnl Check for Python prefix",
          "193:    [test \"x${ac_cv_with_pyprefix}\" = x || test \"x${ac_cv_with_pyprefix}\" = xno],",
          "194:    [ax_python_prefix=\"\\${prefix}\"],",
          "195:    [ax_python_prefix=`${PYTHON_CONFIG} --prefix 2>/dev/null`])",
          "197:   AC_SUBST(",
          "198:    [PYTHON_PREFIX],",
          "199:    [$ax_python_prefix])",
          "201:   dnl Check for Python exec-prefix",
          "202:   AS_IF(",
          "203:    [test \"x${ac_cv_with_pyprefix}\" = x || test \"x${ac_cv_with_pyprefix}\" = xno],",
          "204:    [ax_python_exec_prefix=\"\\${exec_prefix}\"],",
          "205:    [ax_python_exec_prefix=`${PYTHON_CONFIG} --exec-prefix 2>/dev/null`])",
          "207:   AC_SUBST(",
          "208:    [PYTHON_EXEC_PREFIX],",
          "209:    [$ax_python_exec_prefix])",
          "211:   dnl Check for Python library directory",
          "212:   ax_python_pythondir_suffix=`${PYTHON} -c \"import sys; import distutils.sysconfig; sys.stdout.write(distutils.sysconfig.get_python_lib(0, 0, prefix=''))\" 2>/dev/null`;",
          "214:   AS_IF(",
          "215:    [test \"x${ac_cv_with_pythondir}\" = x || test \"x${ac_cv_with_pythondir}\" = xno],",
          "216:    [AS_IF(",
          "217:     [test \"x${ac_cv_with_pyprefix}\" = x || test \"x${ac_cv_with_pyprefix}\" = xno],",
          "218:     [ax_python_pythondir=\"${ax_python_prefix}/${ax_python_pythondir_suffix}\"],",
          "219:     [ax_python_pythondir=`${PYTHON} -c \"import distutils.sysconfig; print distutils.sysconfig.get_python_lib() \" 2>/dev/null`])],",
          "220:    [ax_python_pythondir=$ac_cv_with_pythondir])",
          "222:   AC_SUBST(",
          "223:    [pythondir],",
          "224:    [$ax_python_pythondir])",
          "226:   dnl Check for Python platform specific library directory",
          "227:   ax_python_pyexecdir_suffix=`${PYTHON} -c \"import sys; import distutils.sysconfig; sys.stdout.write(distutils.sysconfig.get_python_lib(1, 0, prefix=''))\" 2>/dev/null`;",
          "228:   ax_python_library_dir=`${PYTHON} -c \"import distutils.sysconfig; print distutils.sysconfig.get_python_lib(True) \" 2>/dev/null`;",
          "231:    [test \"x${ac_cv_with_pyprefix}\" = x || test \"x${ac_cv_with_pyprefix}\" = xno],",
          "232:    [ax_python_pyexecdir=\"${ax_python_exec_prefix}/${ax_python_pyexecdir_suffix}\"],",
          "233:    [ax_python_pyexecdir=$ax_python_library_dir])",
          "235:   AC_SUBST(",
          "236:    [pyexecdir],",
          "237:    [$ax_python_pyexecdir])",
          "239:   AC_SUBST(",
          "240:    [PYTHON_LIBRARY_DIR],",
          "241:    [$ax_python_pyexecdir_suffix])",
          "243:   AC_SUBST(",
          "244:    [PYTHON_PACKAGE_DIR],",
          "245:    [$ax_python_library_dir])",
          "247:  ])",
          "251:  [AX_PROG_PYTHON2",
          "252:  AX_PROG_PYTHON2_CONFIG",
          "254:  AS_IF(",
          "255:   [test \"x${PYTHON2_CONFIG}\" != x],",
          "256:   [dnl Check for Python 2 includes",
          "257:   PYTHON2_INCLUDES=`${PYTHON2_CONFIG} --includes 2>/dev/null`;",
          "259:   AC_MSG_CHECKING(",
          "260:    [for Python verison 2 includes])",
          "261:   AC_MSG_RESULT(",
          "262:    [$PYTHON2_INCLUDES])",
          "264:   dnl Check for Python 2 libraries",
          "265:   PYTHON2_LDFLAGS=`${PYTHON2_CONFIG} --ldflags 2>/dev/null`;",
          "267:   AC_MSG_CHECKING(",
          "268:    [for Python 2 libraries])",
          "269:   AC_MSG_RESULT(",
          "270:    [$PYTHON2_LDFLAGS])",
          "272:   dnl Check for the existence of Python.h",
          "273:   BACKUP_CPPFLAGS=\"${CPPFLAGS}\"",
          "274:   CPPFLAGS=\"${CPPFLAGS} ${PYTHON2_INCLUDES}\"",
          "276:   AC_CHECK_HEADERS(",
          "277:    [Python.h],",
          "278:    [ac_cv_header_python2_h=yes],",
          "279:    [ac_cv_header_python2_h=no])",
          "281:   CPPFLAGS=\"${BACKUP_CPPFLAGS}\"",
          "282:  ])",
          "284:  AS_IF(",
          "285:   [test \"x${ac_cv_header_python2_h}\" != xyes],",
          "286:   [ac_cv_enable_python2=no],",
          "287:   [ac_cv_enable_python2=$PYTHON2_VERSION",
          "288:   AC_SUBST(",
          "289:    [PYTHON2_CPPFLAGS],",
          "290:    [$PYTHON2_INCLUDES])",
          "292:   AC_SUBST(",
          "293:    [PYTHON2_LDFLAGS],",
          "294:    [$PYTHON2_LDFLAGS])",
          "296:   dnl Check for Python prefix",
          "298:    [test \"x${ac_cv_with_pyprefix}\" = x || test \"x${ac_cv_with_pyprefix}\" = xno],",
          "299:    [ax_python2_prefix=\"\\${prefix}\"],",
          "300:    [ax_python2_prefix=`${PYTHON2_CONFIG} --prefix 2>/dev/null`])",
          "302:   AC_SUBST(",
          "303:    [PYTHON2_PREFIX],",
          "304:    [$ax_python2_prefix])",
          "306:   dnl Check for Python exec-prefix",
          "307:   AS_IF(",
          "308:    [test \"x${ac_cv_with_pyprefix}\" = x || test \"x${ac_cv_with_pyprefix}\" = xno],",
          "309:    [ax_python2_exec_prefix=\"\\${exec_prefix}\"],",
          "310:    [ax_python2_exec_prefix=`${PYTHON2_CONFIG} --exec-prefix 2>/dev/null`])",
          "312:   AC_SUBST(",
          "313:    [PYTHON2_EXEC_PREFIX],",
          "314:    [$ax_python2_exec_prefix])",
          "316:   dnl Check for Python 2 library directory",
          "317:   ax_python2_pythondir_suffix=`${PYTHON2} -c \"import sys; import distutils.sysconfig; sys.stdout.write(distutils.sysconfig.get_python_lib(0, 0, prefix=''))\" 2>/dev/null`;",
          "319:   AS_IF(",
          "320:    [test \"x${ac_cv_with_pythondir2}\" = x || test \"x${ac_cv_with_pythondir2}\" = xno],",
          "321:    [AS_IF(",
          "322:     [test \"x${ac_cv_with_pyprefix}\" = x || test \"x${ac_cv_with_pyprefix}\" = xno],",
          "323:     [ax_python2_pythondir=\"${ax_python_prefix}/${ax_python2_pythondir_suffix}\"],",
          "324:     [ax_python2_pythondir=`${PYTHON2} -c \"import distutils.sysconfig; print distutils.sysconfig.get_python_lib() \" 2>/dev/null`])],",
          "325:    [ax_python2_pythondir=$ac_cv_with_pythondir2])",
          "327:   AC_SUBST(",
          "328:    [pythondir2],",
          "329:    [$ax_python2_pythondir])",
          "331:   dnl Check for Python 2 platform specific library directory",
          "332:   ax_python2_pyexecdir_suffix=`${PYTHON2} -c \"import sys; import distutils.sysconfig; sys.stdout.write(distutils.sysconfig.get_python_lib(1, 0, prefix=''))\" 2>/dev/null`;",
          "333:   ax_python2_library_dir=`${PYTHON2} -c \"import distutils.sysconfig; print distutils.sysconfig.get_python_lib(True) \" 2>/dev/null`;",
          "336:    [test \"x${ac_cv_with_pyprefix}\" = x || test \"x${ac_cv_with_pyprefix}\" = xno],",
          "337:    [ax_python2_pyexecdir=\"${ax_python2_exec_prefix}/${ax_python2_pyexecdir_suffix}\"],",
          "338:    [ax_python2_pyexecdir=$ax_python2_library_dir])",
          "340:   AC_SUBST(",
          "341:    [pyexecdir2],",
          "342:    [$ax_python2_pyexecdir])",
          "344:   AC_SUBST(",
          "345:    [PYTHON2_LIBRARY_DIR],",
          "346:    [$ax_python2_pyexecdir_suffix])",
          "348:   AC_SUBST(",
          "349:    [PYTHON2_PACKAGE_DIR],",
          "350:    [$ax_python2_library_dir])",
          "352:  ])",
          "356:  [AX_PROG_PYTHON3",
          "357:  AX_PROG_PYTHON3_CONFIG",
          "359:  AS_IF(",
          "360:   [test \"x${PYTHON3_CONFIG}\" != x],",
          "361:   [dnl Check for Python 3 includes",
          "362:   PYTHON3_INCLUDES=`${PYTHON3_CONFIG} --includes 2>/dev/null`;",
          "364:   AC_MSG_CHECKING(",
          "365:    [for Python verison 3 includes])",
          "366:   AC_MSG_RESULT(",
          "367:    [$PYTHON3_INCLUDES])",
          "369:   dnl Check for Python 3 libraries",
          "370:   PYTHON3_LDFLAGS=`${PYTHON3_CONFIG} --ldflags 2>/dev/null`;",
          "372:   AC_MSG_CHECKING(",
          "373:    [for Python 3 libraries])",
          "374:   AC_MSG_RESULT(",
          "375:    [$PYTHON3_LDFLAGS])",
          "377:   dnl Check for the existence of Python.h",
          "378:   BACKUP_CPPFLAGS=\"${CPPFLAGS}\"",
          "379:   CPPFLAGS=\"${CPPFLAGS} ${PYTHON3_INCLUDES}\"",
          "381:   AC_CHECK_HEADERS(",
          "382:    [Python.h],",
          "383:    [ac_cv_header_python3_h=yes],",
          "384:    [ac_cv_header_python3_h=no])",
          "386:   CPPFLAGS=\"${BACKUP_CPPFLAGS}\"",
          "387:  ])",
          "389:  AS_IF(",
          "390:   [test \"x${ac_cv_header_python3_h}\" != xyes],",
          "391:   [ac_cv_enable_python3=no],",
          "392:   [ac_cv_enable_python3=$PYTHON3_VERSION",
          "393:   AC_SUBST(",
          "394:    [PYTHON3_CPPFLAGS],",
          "395:    [$PYTHON3_INCLUDES])",
          "397:   AC_SUBST(",
          "398:    [PYTHON3_LDFLAGS],",
          "399:    [$PYTHON3_LDFLAGS])",
          "401:   dnl Check for Python prefix",
          "403:    [test \"x${ac_cv_with_pyprefix}\" = x || test \"x${ac_cv_with_pyprefix}\" = xno],",
          "404:    [ax_python3_prefix=\"\\${prefix}\"],",
          "405:    [ax_python3_prefix=`${PYTHON3_CONFIG} --prefix 2>/dev/null`])",
          "407:   AC_SUBST(",
          "408:    [PYTHON3_PREFIX],",
          "409:    [$ax_python3_prefix])",
          "411:   dnl Check for Python exec-prefix",
          "412:   AS_IF(",
          "413:    [test \"x${ac_cv_with_pyprefix}\" = x || test \"x${ac_cv_with_pyprefix}\" = xno],",
          "414:    [ax_python3_exec_prefix=\"\\${exec_prefix}\"],",
          "415:    [ax_python3_exec_prefix=`${PYTHON3_CONFIG} --exec-prefix 2>/dev/null`])",
          "417:   AC_SUBST(",
          "418:    [PYTHON3_EXEC_PREFIX],",
          "419:    [$ax_python3_exec_prefix])",
          "421:   dnl Check for Python 3 library directory",
          "422:   ax_python3_pythondir_suffix=`${PYTHON3} -c \"import sys; import distutils.sysconfig; sys.stdout.write(distutils.sysconfig.get_python_lib(0, 0, prefix=''))\" 2>/dev/null`;",
          "424:   AS_IF(",
          "425:    [test \"x${ac_cv_with_pythondir3}\" = x || test \"x${ac_cv_with_pythondir3}\" = xno],",
          "426:    [AS_IF(",
          "427:     [test \"x${ac_cv_with_pyprefix}\" = x || test \"x${ac_cv_with_pyprefix}\" = xno],",
          "428:     [ax_python3_pythondir=\"${ax_python_prefix}/${ax_python3_pythondir_suffix}\"],",
          "429:     [ax_python3_pythondir=`${PYTHON3} -c \"import distutils.sysconfig; print distutils.sysconfig.get_python_lib() \" 2>/dev/null`])],",
          "430:    [ax_python3_pythondir=$ac_cv_with_pythondir3])",
          "432:   AC_SUBST(",
          "433:    [pythondir3],",
          "434:    [$ax_python3_pythondir])",
          "436:   dnl Check for Python 3 platform specific library directory",
          "437:   ax_python3_pyexecdir_suffix=`${PYTHON3} -c \"import sys; import distutils.sysconfig; sys.stdout.write(distutils.sysconfig.get_python_lib(1, 0, prefix=''))\" 2>/dev/null`;",
          "438:   ax_python3_library_dir=`${PYTHON3} -c \"import distutils.sysconfig; print distutils.sysconfig.get_python_lib(True) \" 2>/dev/null`;",
          "441:    [test \"x${ac_cv_with_pyprefix}\" = x || test \"x${ac_cv_with_pyprefix}\" = xno],",
          "442:    [ax_python3_pyexecdir=\"${ax_python3_exec_prefix}/${ax_python3_pyexecdir_suffix}\"],",
          "443:    [ax_python3_pyexecdir=$ax_python3_library_dir])",
          "445:   AC_SUBST(",
          "446:    [pyexecdir3],",
          "447:    [$ax_python3_pyexecdir])",
          "449:   AC_SUBST(",
          "450:    [PYTHON3_LIBRARY_DIR],",
          "451:    [$ax_python3_pyexecdir_suffix])",
          "453:   AC_SUBST(",
          "454:    [PYTHON3_PACKAGE_DIR],",
          "455:    [$ax_python3_library_dir])",
          "457:  ])",
          "461:  [AX_COMMON_ARG_WITH(",
          "462:   [pyprefix],",
          "463:   [pyprefix],",
          "464:   [use `python-config --prefix' to determine the prefix of pythondir instead of --prefix],",
          "465:   [no],",
          "466:   [no])",
          "471:  [AX_COMMON_ARG_ENABLE(",
          "472:   [python],",
          "473:   [python],",
          "474:   [build Python bindings],",
          "475:   [no])",
          "476:  AX_COMMON_ARG_WITH(",
          "477:   [pythondir],",
          "478:   [pythondir],",
          "479:   [use to specify the Python directory (pythondir)],",
          "480:   [no],",
          "481:   [no])",
          "483:  AS_IF(",
          "484:   [test \"x${ac_cv_enable_python}\" != xno],",
          "485:   [AX_PYTHON_CHECK])",
          "487:  AS_IF(",
          "488:   [test \"x${ac_cv_enable_python}\" != xno],",
          "489:   [AC_DEFINE(",
          "490:    [HAVE_PYTHON],",
          "491:    [1],",
          "492:    [Define to 1 if you have Python])",
          "493:   ])",
          "495:  AM_CONDITIONAL(",
          "496:   HAVE_PYTHON,",
          "497:   [test \"x${ac_cv_enable_python}\" != xno])",
          "502:  [AX_COMMON_ARG_ENABLE(",
          "503:   [python2],",
          "504:   [python2],",
          "505:   [build Python 2 bindings],",
          "506:   [no])",
          "507:  AX_COMMON_ARG_WITH(",
          "508:   [pythondir2],",
          "509:   [pythondir2],",
          "510:   [use to specify the Python 2 directory (pythondir2)],",
          "511:   [no],",
          "512:   [no])",
          "514:  AS_IF(",
          "515:   [test \"x${ac_cv_enable_python2}\" != xno],",
          "516:   [AX_PYTHON2_CHECK])",
          "518:  AS_IF(",
          "519:   [test \"x${ac_cv_enable_python2}\" != xno],",
          "520:   [AC_DEFINE(",
          "521:    [HAVE_PYTHON2],",
          "522:    [1],",
          "523:    [Define to 1 if you have Python 2])",
          "524:   ])",
          "526:  AM_CONDITIONAL(",
          "527:   HAVE_PYTHON2,",
          "528:   [test \"x${ac_cv_enable_python2}\" != xno])",
          "533:  [AX_COMMON_ARG_ENABLE(",
          "534:   [python3],",
          "535:   [python3],",
          "536:   [build Python 3 bindings],",
          "537:   [no])",
          "538:  AX_COMMON_ARG_WITH(",
          "539:   [pythondir3],",
          "540:   [pythondir3],",
          "541:   [use to specify the Python 3 directory (pythondir3)],",
          "542:   [no],",
          "543:   [no])",
          "545:  AS_IF(",
          "546:   [test \"x${ac_cv_enable_python3}\" != xno],",
          "547:   [AX_PYTHON3_CHECK])",
          "549:  AS_IF(",
          "550:   [test \"x${ac_cv_enable_python3}\" != xno],",
          "551:   [AC_DEFINE(",
          "552:    [HAVE_PYTHON3],",
          "553:    [1],",
          "554:    [Define to 1 if you have Python 3])",
          "555:   ])",
          "557:  AM_CONDITIONAL(",
          "558:   HAVE_PYTHON3,",
          "559:   [test \"x${ac_cv_enable_python3}\" != xno])",
          "",
          "[Added Lines]",
          "3: dnl Version: 20170806",
          "8:   [AS_IF(",
          "9:     [test \"x${PYTHON_VERSION}\" != x],",
          "10:     [ax_python_progs=\"python${PYTHON_VERSION}\"],",
          "11:     [ax_python_progs=\"python python2 python2.7 python2.6 python2.5 python3 python3.6 python3.5 python3.4 python3.3 python3.2 python3.1 python3.0\"])",
          "12:   AC_CHECK_PROGS(",
          "13:     [PYTHON],",
          "14:     [$ax_python_progs])",
          "15:   AS_IF(",
          "16:     [test \"x${PYTHON}\" != x],",
          "17:     [ax_prog_python_version=`${PYTHON} -c \"import sys; sys.stdout.write(sys.version[[:3]])\" 2>/dev/null`;",
          "18:     AC_SUBST(",
          "19:       [PYTHON_VERSION],",
          "20:       [$ax_prog_python_version])",
          "22:     ax_prog_python_platform=`${PYTHON} -c \"import sys; sys.stdout.write(sys.platform)\" 2>/dev/null`;",
          "23:     AC_SUBST(",
          "24:       [PYTHON_PLATFORM],",
          "25:       [$ax_prog_python_platform])",
          "26:     ],",
          "27:     [AC_MSG_ERROR(",
          "28:       [Unable to find python])",
          "29:     ])",
          "31:     [PYTHON],",
          "32:     [$PYTHON])",
          "38:   [ax_python2_progs=\"python2 python2.7 python2.6 python2.5\"",
          "39:   AC_CHECK_PROGS(",
          "40:     [PYTHON2],",
          "41:     [$ax_python2_progs])",
          "42:   AS_IF(",
          "43:     [test \"x${PYTHON2}\" != x],",
          "44:     [ax_prog_python2_version=`${PYTHON2} -c \"import sys; sys.stdout.write(sys.version[[:3]])\" 2>/dev/null`;",
          "45:     AC_SUBST(",
          "46:       [PYTHON2_VERSION],",
          "47:       [$ax_prog_python2_version])",
          "49:     ax_prog_python2_platform=`${PYTHON2} -c \"import sys; sys.stdout.write(sys.platform)\" 2>/dev/null`;",
          "50:     AC_SUBST(",
          "51:       [PYTHON2_PLATFORM],",
          "52:       [$ax_prog_python2_platform])",
          "53:     ],",
          "54:     [AC_MSG_ERROR(",
          "55:       [Unable to find python2])",
          "56:     ])",
          "58:     [PYTHON2],",
          "59:     [$PYTHON2])",
          "65:   [ax_python3_progs=\"python3 python3.4 python3.3 python3.2 python3.1 python3.0\"",
          "66:   AC_CHECK_PROGS(",
          "67:     [PYTHON3],",
          "68:     [$ax_python3_progs])",
          "69:   AS_IF(",
          "70:     [test \"x${PYTHON3}\" != x],",
          "71:     [ax_prog_python3_version=`${PYTHON3} -c \"import sys; sys.stdout.write(sys.version[[:3]])\" 2>/dev/null`;",
          "72:     AC_SUBST(",
          "73:       [PYTHON3_VERSION],",
          "74:       [$ax_prog_python3_version])",
          "76:     ax_prog_python3_platform=`${PYTHON3} -c \"import sys; sys.stdout.write(sys.platform)\" 2>/dev/null`;",
          "77:     AC_SUBST(",
          "78:       [PYTHON3_PLATFORM],",
          "79:       [$ax_prog_python3_platform])",
          "80:     ],",
          "81:     [AC_MSG_ERROR(",
          "82:       [Unable to find python3])",
          "83:     ])",
          "85:     [PYTHON3],",
          "86:     [$PYTHON3])",
          "92:   [AS_IF(",
          "93:     [test \"x${PYTHON}\" != x],",
          "94:     [AC_CHECK_PROGS(",
          "95:       [PYTHON_CONFIG],",
          "96:       [python${PYTHON_VERSION}-config python-config])",
          "97:     ])",
          "98:   AS_IF(",
          "99:     [test \"x${PYTHON_CONFIG}\" = x],",
          "100:     [AC_MSG_ERROR(",
          "101:       [Unable to find python-config])",
          "102:     ])",
          "103:   AC_SUBST(",
          "104:     [PYTHON_CONFIG],",
          "105:     [$PYTHON_CONFIG])",
          "110:   [AS_IF(",
          "111:     [test \"x${PYTHON2}\" != x],",
          "112:     [AC_CHECK_PROGS(",
          "113:       [PYTHON2_CONFIG],",
          "114:       [python2-config])",
          "115:     ])",
          "116:   AS_IF(",
          "117:     [test \"x${PYTHON2_CONFIG}\" = x],",
          "118:     [AC_MSG_ERROR(",
          "119:       [Unable to find python2-config])",
          "120:     ])",
          "121:   AC_SUBST(",
          "122:     [PYTHON2_CONFIG],",
          "123:     [$PYTHON2_CONFIG])",
          "128:   [AS_IF(",
          "129:     [test \"x${PYTHON3}\" != x],",
          "130:     [AC_CHECK_PROGS(",
          "131:       [PYTHON3_CONFIG],",
          "132:       [python3-config])",
          "133:     ])",
          "134:   AS_IF(",
          "135:     [test \"x${PYTHON3_CONFIG}\" = x],",
          "136:     [AC_MSG_ERROR(",
          "137:       [Unable to find python3-config])",
          "138:     ])",
          "139:   AC_SUBST(",
          "140:     [PYTHON3_CONFIG],",
          "141:     [$PYTHON3_CONFIG])",
          "146:   [AX_PROG_PYTHON",
          "147:   AX_PROG_PYTHON_CONFIG",
          "150:     [test \"x${PYTHON_CONFIG}\" != x],",
          "151:     [dnl Check for Python includes",
          "152:     PYTHON_INCLUDES=`${PYTHON_CONFIG} --includes 2>/dev/null`;",
          "154:     AC_MSG_CHECKING(",
          "155:       [for Python includes])",
          "156:     AC_MSG_RESULT(",
          "157:       [$PYTHON_INCLUDES])",
          "159:     dnl Check for Python libraries",
          "160:     PYTHON_LDFLAGS=`${PYTHON_CONFIG} --ldflags 2>/dev/null`;",
          "162:     AC_MSG_CHECKING(",
          "163:       [for Python libraries])",
          "164:     AC_MSG_RESULT(",
          "165:       [$PYTHON_LDFLAGS])",
          "167:     dnl For CygWin add the -no-undefined linker flag",
          "168:     AS_CASE(",
          "169:       [$host_os],",
          "170:       [cygwin*],[PYTHON_LDFLAGS=\"${PYTHON_LDFLAGS} -no-undefined\"],",
          "171:       [*],[])",
          "173:     dnl Check for the existence of Python.h",
          "174:     BACKUP_CPPFLAGS=\"${CPPFLAGS}\"",
          "175:     CPPFLAGS=\"${CPPFLAGS} ${PYTHON_INCLUDES}\"",
          "177:     AC_CHECK_HEADERS(",
          "178:       [Python.h],",
          "179:       [ac_cv_header_python_h=yes],",
          "180:       [ac_cv_header_python_h=no])",
          "182:     CPPFLAGS=\"${BACKUP_CPPFLAGS}\"",
          "183:   ])",
          "186:     [test \"x${ac_cv_header_python_h}\" != xyes],",
          "187:     [ac_cv_enable_python=no],",
          "188:     [ac_cv_enable_python=$PYTHON_VERSION",
          "189:     AC_SUBST(",
          "190:       [PYTHON_CPPFLAGS],",
          "191:       [$PYTHON_INCLUDES])",
          "193:     AC_SUBST(",
          "194:       [PYTHON_LDFLAGS],",
          "195:       [$PYTHON_LDFLAGS])",
          "197:     dnl Check for Python prefix",
          "198:     AS_IF(",
          "199:       [test \"x${ac_cv_with_pyprefix}\" = x || test \"x${ac_cv_with_pyprefix}\" = xno],",
          "200:       [ax_python_prefix=\"\\${prefix}\"],",
          "201:       [ax_python_prefix=`${PYTHON_CONFIG} --prefix 2>/dev/null`])",
          "203:     AC_SUBST(",
          "204:       [PYTHON_PREFIX],",
          "205:       [$ax_python_prefix])",
          "207:     dnl Check for Python exec-prefix",
          "208:     AS_IF(",
          "209:       [test \"x${ac_cv_with_pyprefix}\" = x || test \"x${ac_cv_with_pyprefix}\" = xno],",
          "210:       [ax_python_exec_prefix=\"\\${exec_prefix}\"],",
          "211:       [ax_python_exec_prefix=`${PYTHON_CONFIG} --exec-prefix 2>/dev/null`])",
          "213:     AC_SUBST(",
          "214:       [PYTHON_EXEC_PREFIX],",
          "215:       [$ax_python_exec_prefix])",
          "217:     dnl Check for Python library directory",
          "218:     ax_python_pythondir_suffix=`${PYTHON} -c \"import sys; import distutils.sysconfig; sys.stdout.write(distutils.sysconfig.get_python_lib(0, 0, prefix=''))\" 2>/dev/null`;",
          "220:     AS_IF(",
          "221:       [test \"x${ac_cv_with_pythondir}\" = x || test \"x${ac_cv_with_pythondir}\" = xno],",
          "222:       [AS_IF(",
          "223:         [test \"x${ac_cv_with_pyprefix}\" = x || test \"x${ac_cv_with_pyprefix}\" = xno],",
          "224:         [ax_python_pythondir=\"${ax_python_prefix}/${ax_python_pythondir_suffix}\"],",
          "225:         [ax_python_pythondir=`${PYTHON} -c \"import distutils.sysconfig; print distutils.sysconfig.get_python_lib() \" 2>/dev/null`])],",
          "226:       [ax_python_pythondir=$ac_cv_with_pythondir])",
          "228:     AC_SUBST(",
          "229:       [pythondir],",
          "230:       [$ax_python_pythondir])",
          "232:     dnl Check for Python platform specific library directory",
          "233:     ax_python_pyexecdir_suffix=`${PYTHON} -c \"import sys; import distutils.sysconfig; sys.stdout.write(distutils.sysconfig.get_python_lib(1, 0, prefix=''))\" 2>/dev/null`;",
          "234:     ax_python_library_dir=`${PYTHON} -c \"import distutils.sysconfig; print distutils.sysconfig.get_python_lib(True) \" 2>/dev/null`;",
          "236:     AS_IF(",
          "237:       [test \"x${ac_cv_with_pyprefix}\" = x || test \"x${ac_cv_with_pyprefix}\" = xno],",
          "238:       [ax_python_pyexecdir=\"${ax_python_exec_prefix}/${ax_python_pyexecdir_suffix}\"],",
          "239:       [ax_python_pyexecdir=$ax_python_library_dir])",
          "241:     AC_SUBST(",
          "242:       [pyexecdir],",
          "243:       [$ax_python_pyexecdir])",
          "245:     AC_SUBST(",
          "246:       [PYTHON_LIBRARY_DIR],",
          "247:       [$ax_python_pyexecdir_suffix])",
          "249:     AC_SUBST(",
          "250:       [PYTHON_PACKAGE_DIR],",
          "251:       [$ax_python_library_dir])",
          "252:     ])",
          "257:   [AX_PROG_PYTHON2",
          "258:   AX_PROG_PYTHON2_CONFIG",
          "261:     [test \"x${PYTHON2_CONFIG}\" != x],",
          "262:     [dnl Check for Python 2 includes",
          "263:     PYTHON2_INCLUDES=`${PYTHON2_CONFIG} --includes 2>/dev/null`;",
          "265:     AC_MSG_CHECKING(",
          "266:       [for Python verison 2 includes])",
          "267:     AC_MSG_RESULT(",
          "268:       [$PYTHON2_INCLUDES])",
          "270:     dnl Check for Python 2 libraries",
          "271:     PYTHON2_LDFLAGS=`${PYTHON2_CONFIG} --ldflags 2>/dev/null`;",
          "273:     AC_MSG_CHECKING(",
          "274:       [for Python 2 libraries])",
          "275:     AC_MSG_RESULT(",
          "276:       [$PYTHON2_LDFLAGS])",
          "278:     dnl Check for the existence of Python.h",
          "279:     BACKUP_CPPFLAGS=\"${CPPFLAGS}\"",
          "280:     CPPFLAGS=\"${CPPFLAGS} ${PYTHON2_INCLUDES}\"",
          "282:     AC_CHECK_HEADERS(",
          "283:       [Python.h],",
          "284:       [ac_cv_header_python2_h=yes],",
          "285:       [ac_cv_header_python2_h=no])",
          "287:     CPPFLAGS=\"${BACKUP_CPPFLAGS}\"",
          "288:   ])",
          "291:     [test \"x${ac_cv_header_python2_h}\" != xyes],",
          "292:     [ac_cv_enable_python2=no],",
          "293:     [ac_cv_enable_python2=$PYTHON2_VERSION",
          "294:     AC_SUBST(",
          "295:       [PYTHON2_CPPFLAGS],",
          "296:       [$PYTHON2_INCLUDES])",
          "298:     AC_SUBST(",
          "299:       [PYTHON2_LDFLAGS],",
          "300:       [$PYTHON2_LDFLAGS])",
          "302:     dnl Check for Python prefix",
          "303:     AS_IF(",
          "304:       [test \"x${ac_cv_with_pyprefix}\" = x || test \"x${ac_cv_with_pyprefix}\" = xno],",
          "305:       [ax_python2_prefix=\"\\${prefix}\"],",
          "306:       [ax_python2_prefix=`${PYTHON2_CONFIG} --prefix 2>/dev/null`])",
          "308:     AC_SUBST(",
          "309:       [PYTHON2_PREFIX],",
          "310:       [$ax_python2_prefix])",
          "312:     dnl Check for Python exec-prefix",
          "313:     AS_IF(",
          "314:       [test \"x${ac_cv_with_pyprefix}\" = x || test \"x${ac_cv_with_pyprefix}\" = xno],",
          "315:       [ax_python2_exec_prefix=\"\\${exec_prefix}\"],",
          "316:       [ax_python2_exec_prefix=`${PYTHON2_CONFIG} --exec-prefix 2>/dev/null`])",
          "318:     AC_SUBST(",
          "319:       [PYTHON2_EXEC_PREFIX],",
          "320:       [$ax_python2_exec_prefix])",
          "322:     dnl Check for Python 2 library directory",
          "323:     ax_python2_pythondir_suffix=`${PYTHON2} -c \"import sys; import distutils.sysconfig; sys.stdout.write(distutils.sysconfig.get_python_lib(0, 0, prefix=''))\" 2>/dev/null`;",
          "325:     AS_IF(",
          "326:       [test \"x${ac_cv_with_pythondir2}\" = x || test \"x${ac_cv_with_pythondir2}\" = xno],",
          "327:       [AS_IF(",
          "328:         [test \"x${ac_cv_with_pyprefix}\" = x || test \"x${ac_cv_with_pyprefix}\" = xno],",
          "329:         [ax_python2_pythondir=\"${ax_python_prefix}/${ax_python2_pythondir_suffix}\"],",
          "330:         [ax_python2_pythondir=`${PYTHON2} -c \"import distutils.sysconfig; print distutils.sysconfig.get_python_lib() \" 2>/dev/null`])],",
          "331:       [ax_python2_pythondir=$ac_cv_with_pythondir2])",
          "333:     AC_SUBST(",
          "334:       [pythondir2],",
          "335:       [$ax_python2_pythondir])",
          "337:     dnl Check for Python 2 platform specific library directory",
          "338:     ax_python2_pyexecdir_suffix=`${PYTHON2} -c \"import sys; import distutils.sysconfig; sys.stdout.write(distutils.sysconfig.get_python_lib(1, 0, prefix=''))\" 2>/dev/null`;",
          "339:     ax_python2_library_dir=`${PYTHON2} -c \"import distutils.sysconfig; print distutils.sysconfig.get_python_lib(True) \" 2>/dev/null`;",
          "341:     AS_IF(",
          "342:       [test \"x${ac_cv_with_pyprefix}\" = x || test \"x${ac_cv_with_pyprefix}\" = xno],",
          "343:       [ax_python2_pyexecdir=\"${ax_python2_exec_prefix}/${ax_python2_pyexecdir_suffix}\"],",
          "344:       [ax_python2_pyexecdir=$ax_python2_library_dir])",
          "346:     AC_SUBST(",
          "347:       [pyexecdir2],",
          "348:       [$ax_python2_pyexecdir])",
          "350:     AC_SUBST(",
          "351:       [PYTHON2_LIBRARY_DIR],",
          "352:       [$ax_python2_pyexecdir_suffix])",
          "354:     AC_SUBST(",
          "355:       [PYTHON2_PACKAGE_DIR],",
          "356:       [$ax_python2_library_dir])",
          "357:     ])",
          "362:   [AX_PROG_PYTHON3",
          "363:   AX_PROG_PYTHON3_CONFIG",
          "366:     [test \"x${PYTHON3_CONFIG}\" != x],",
          "367:     [dnl Check for Python 3 includes",
          "368:     PYTHON3_INCLUDES=`${PYTHON3_CONFIG} --includes 2>/dev/null`;",
          "370:     AC_MSG_CHECKING(",
          "371:       [for Python verison 3 includes])",
          "372:     AC_MSG_RESULT(",
          "373:       [$PYTHON3_INCLUDES])",
          "375:     dnl Check for Python 3 libraries",
          "376:     PYTHON3_LDFLAGS=`${PYTHON3_CONFIG} --ldflags 2>/dev/null`;",
          "378:     AC_MSG_CHECKING(",
          "379:       [for Python 3 libraries])",
          "380:     AC_MSG_RESULT(",
          "381:       [$PYTHON3_LDFLAGS])",
          "383:     dnl Check for the existence of Python.h",
          "384:     BACKUP_CPPFLAGS=\"${CPPFLAGS}\"",
          "385:     CPPFLAGS=\"${CPPFLAGS} ${PYTHON3_INCLUDES}\"",
          "387:     AC_CHECK_HEADERS(",
          "388:       [Python.h],",
          "389:       [ac_cv_header_python3_h=yes],",
          "390:       [ac_cv_header_python3_h=no])",
          "392:     CPPFLAGS=\"${BACKUP_CPPFLAGS}\"",
          "393:   ])",
          "396:     [test \"x${ac_cv_header_python3_h}\" != xyes],",
          "397:     [ac_cv_enable_python3=no],",
          "398:     [ac_cv_enable_python3=$PYTHON3_VERSION",
          "399:     AC_SUBST(",
          "400:       [PYTHON3_CPPFLAGS],",
          "401:       [$PYTHON3_INCLUDES])",
          "403:     AC_SUBST(",
          "404:       [PYTHON3_LDFLAGS],",
          "405:       [$PYTHON3_LDFLAGS])",
          "407:     dnl Check for Python prefix",
          "408:     AS_IF(",
          "409:       [test \"x${ac_cv_with_pyprefix}\" = x || test \"x${ac_cv_with_pyprefix}\" = xno],",
          "410:       [ax_python3_prefix=\"\\${prefix}\"],",
          "411:       [ax_python3_prefix=`${PYTHON3_CONFIG} --prefix 2>/dev/null`])",
          "413:     AC_SUBST(",
          "414:       [PYTHON3_PREFIX],",
          "415:       [$ax_python3_prefix])",
          "417:     dnl Check for Python exec-prefix",
          "418:     AS_IF(",
          "419:       [test \"x${ac_cv_with_pyprefix}\" = x || test \"x${ac_cv_with_pyprefix}\" = xno],",
          "420:       [ax_python3_exec_prefix=\"\\${exec_prefix}\"],",
          "421:       [ax_python3_exec_prefix=`${PYTHON3_CONFIG} --exec-prefix 2>/dev/null`])",
          "423:     AC_SUBST(",
          "424:       [PYTHON3_EXEC_PREFIX],",
          "425:       [$ax_python3_exec_prefix])",
          "427:     dnl Check for Python 3 library directory",
          "428:     ax_python3_pythondir_suffix=`${PYTHON3} -c \"import sys; import distutils.sysconfig; sys.stdout.write(distutils.sysconfig.get_python_lib(0, 0, prefix=''))\" 2>/dev/null`;",
          "430:     AS_IF(",
          "431:       [test \"x${ac_cv_with_pythondir3}\" = x || test \"x${ac_cv_with_pythondir3}\" = xno],",
          "432:       [AS_IF(",
          "433:         [test \"x${ac_cv_with_pyprefix}\" = x || test \"x${ac_cv_with_pyprefix}\" = xno],",
          "434:         [ax_python3_pythondir=\"${ax_python_prefix}/${ax_python3_pythondir_suffix}\"],",
          "435:         [ax_python3_pythondir=`${PYTHON3} -c \"import distutils.sysconfig; print distutils.sysconfig.get_python_lib() \" 2>/dev/null`])],",
          "436:       [ax_python3_pythondir=$ac_cv_with_pythondir3])",
          "438:     AC_SUBST(",
          "439:       [pythondir3],",
          "440:       [$ax_python3_pythondir])",
          "442:     dnl Check for Python 3 platform specific library directory",
          "443:     ax_python3_pyexecdir_suffix=`${PYTHON3} -c \"import sys; import distutils.sysconfig; sys.stdout.write(distutils.sysconfig.get_python_lib(1, 0, prefix=''))\" 2>/dev/null`;",
          "444:     ax_python3_library_dir=`${PYTHON3} -c \"import distutils.sysconfig; print distutils.sysconfig.get_python_lib(True) \" 2>/dev/null`;",
          "446:     AS_IF(",
          "447:       [test \"x${ac_cv_with_pyprefix}\" = x || test \"x${ac_cv_with_pyprefix}\" = xno],",
          "448:       [ax_python3_pyexecdir=\"${ax_python3_exec_prefix}/${ax_python3_pyexecdir_suffix}\"],",
          "449:       [ax_python3_pyexecdir=$ax_python3_library_dir])",
          "451:     AC_SUBST(",
          "452:       [pyexecdir3],",
          "453:       [$ax_python3_pyexecdir])",
          "455:     AC_SUBST(",
          "456:       [PYTHON3_LIBRARY_DIR],",
          "457:       [$ax_python3_pyexecdir_suffix])",
          "459:     AC_SUBST(",
          "460:       [PYTHON3_PACKAGE_DIR],",
          "461:       [$ax_python3_library_dir])",
          "462:     ])",
          "467:   [AX_COMMON_ARG_WITH(",
          "468:     [pyprefix],",
          "469:     [pyprefix],",
          "470:     [use `python-config --prefix' to determine the prefix of pythondir instead of --prefix],",
          "471:     [no],",
          "472:     [no])",
          "477:   [AX_COMMON_ARG_ENABLE(",
          "478:     [python],",
          "479:     [python],",
          "480:     [build Python bindings],",
          "481:     [no])",
          "482:   AX_COMMON_ARG_WITH(",
          "483:     [pythondir],",
          "484:     [pythondir],",
          "485:     [use to specify the Python directory (pythondir)],",
          "486:     [no],",
          "487:     [no])",
          "489:   AS_IF(",
          "490:     [test \"x${ac_cv_enable_python}\" != xno],",
          "491:     [AX_PYTHON_CHECK])",
          "493:   AS_IF(",
          "494:     [test \"x${ac_cv_enable_python}\" != xno],",
          "495:     [AC_DEFINE(",
          "496:       [HAVE_PYTHON],",
          "497:       [1],",
          "498:       [Define to 1 if you have Python])",
          "499:     ])",
          "501:   AM_CONDITIONAL(",
          "502:     HAVE_PYTHON,",
          "503:     [test \"x${ac_cv_enable_python}\" != xno])",
          "508:   [AX_COMMON_ARG_ENABLE(",
          "509:     [python2],",
          "510:     [python2],",
          "511:     [build Python 2 bindings],",
          "512:     [no])",
          "513:   AX_COMMON_ARG_WITH(",
          "514:     [pythondir2],",
          "515:     [pythondir2],",
          "516:     [use to specify the Python 2 directory (pythondir2)],",
          "517:     [no],",
          "518:     [no])",
          "520:   AS_IF(",
          "521:     [test \"x${ac_cv_enable_python2}\" != xno],",
          "522:     [AX_PYTHON2_CHECK])",
          "524:   AS_IF(",
          "525:     [test \"x${ac_cv_enable_python2}\" != xno],",
          "526:     [AC_DEFINE(",
          "527:       [HAVE_PYTHON2],",
          "528:       [1],",
          "529:       [Define to 1 if you have Python 2])",
          "530:     ])",
          "532:   AM_CONDITIONAL(",
          "533:     HAVE_PYTHON2,",
          "534:     [test \"x${ac_cv_enable_python2}\" != xno])",
          "539:   [AX_COMMON_ARG_ENABLE(",
          "540:     [python3],",
          "541:     [python3],",
          "542:     [build Python 3 bindings],",
          "543:     [no])",
          "544:   AX_COMMON_ARG_WITH(",
          "545:     [pythondir3],",
          "546:     [pythondir3],",
          "547:     [use to specify the Python 3 directory (pythondir3)],",
          "548:     [no],",
          "549:     [no])",
          "551:   AS_IF(",
          "552:     [test \"x${ac_cv_enable_python3}\" != xno],",
          "553:     [AX_PYTHON3_CHECK])",
          "555:   AS_IF(",
          "556:     [test \"x${ac_cv_enable_python3}\" != xno],",
          "557:     [AC_DEFINE(",
          "558:       [HAVE_PYTHON3],",
          "559:       [1],",
          "560:       [Define to 1 if you have Python 3])",
          "561:     ])",
          "563:   AM_CONDITIONAL(",
          "564:     HAVE_PYTHON3,",
          "565:     [test \"x${ac_cv_enable_python3}\" != xno])",
          "",
          "---------------"
        ],
        "runtests.sh||runtests.sh": [
          "File: runtests.sh -> runtests.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/bin/bash",
          "2: # Script that runs the tests",
          "3: #",
          "6: EXIT_SUCCESS=0;",
          "7: EXIT_FAILURE=1;",
          "",
          "[Removed Lines]",
          "4: # Version: 20161018",
          "",
          "[Added Lines]",
          "4: # Version: 20170826",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:   return ${RESULT};",
          "53:  fi",
          "56:  RESULT=$?;",
          "58:  if test ${RESULT} -ne ${EXIT_SUCCESS};",
          "",
          "[Removed Lines]",
          "55:  make check;",
          "",
          "[Added Lines]",
          "55:  make check CHECK_WITH_STDERR=1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69:  return ${EXIT_SUCCESS};",
          "70: }",
          "72: run_configure_make_check_with_coverage()",
          "73: {",
          "74:  # Disable optimization so we can hook malloc and realloc.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72: run_configure_make_check_with_asan()",
          "73: {",
          "74:  local LDCONFIG=`which ldconfig 2> /dev/null`;",
          "76:  if test -z ${LDCONFIG} || test ! -x ${LDCONFIG};",
          "77:  then",
          "78:   return ${EXIT_SUCCESS};",
          "79:  fi",
          "80:  local LIBASAN=`ldconfig -p | grep libasan | sed 's/^.* => //'`;",
          "82:  if test -z ${LIBASAN} || test ! -f ${LIBASAN};",
          "83:  then",
          "84:   return ${EXIT_SUCCESS};",
          "85:  fi",
          "86:  # Using libasan is platform dependent.",
          "87:  if test ${LIBASAN} != \"/lib64/libasan.so.4\";",
          "88:  then",
          "89:   return ${EXIT_SUCCESS};",
          "90:  fi",
          "92:  export CPPFLAGS=\"-DHAVE_ASAN\";",
          "93:  export CFLAGS=\"-fno-omit-frame-pointer -fsanitize=address -g\";",
          "94:  export LDFLAGS=\"-fsanitize=address -g\";",
          "96:  if test -z ${CC} || test ${CC} != \"clang\";",
          "97:  then",
          "98:   LDFLAGS=\"${LDFLAGS} -lasan\";",
          "99:  fi",
          "101:  run_configure_make $@;",
          "102:  RESULT=$?;",
          "104:  export CPPFLAGS=;",
          "105:  export CFLAGS=;",
          "106:  export LDFLAGS=;",
          "108:  if test ${RESULT} -ne ${EXIT_SUCCESS};",
          "109:  then",
          "110:   return ${RESULT};",
          "111:  fi",
          "113:  make check CHECK_WITH_ASAN=1 CHECK_WITH_STDERR=1;",
          "114:  RESULT=$?;",
          "116:  if test ${RESULT} -ne ${EXIT_SUCCESS};",
          "117:  then",
          "118:   echo \"Running: 'make check' failed\";",
          "120:   if test -f tests/test-suite.log;",
          "121:   then",
          "122:    cat tests/test-suite.log;",
          "123:   fi",
          "125:   return ${RESULT};",
          "126:  fi",
          "127:  return ${RESULT};",
          "128: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "97:   return ${RESULT};",
          "98:  fi",
          "101:  RESULT=$?;",
          "103:  if test ${RESULT} -ne ${EXIT_SUCCESS};",
          "",
          "[Removed Lines]",
          "100:  make check SKIP_LIBRARY_TESTS=1 SKIP_TOOLS_TESTS=1;",
          "",
          "[Added Lines]",
          "158:  make check CHECK_WITH_STDERR=1 SKIP_LIBRARY_TESTS=1 SKIP_TOOLS_TESTS=1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "181: HAVE_ENABLE_PYTHON=$?;",
          "184: then",
          "185:  # Test with Python 2.",
          "186:  PYTHON2=`which python2 2> /dev/null`;",
          "",
          "[Removed Lines]",
          "183: if test ${HAVE_ENABLE_PYTHON} -eq 0;",
          "",
          "[Added Lines]",
          "241: PYTHON_CONFIG=`whereis python-config | sed 's/^.*:[ ]*//' 2> /dev/null`;",
          "243: if test ${HAVE_ENABLE_PYTHON} -eq 0 && test -n \"${PYTHON_CONFIG}\";",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "264:  fi",
          "265: fi",
          "267: run_configure_make_check_with_coverage;",
          "268: RESULT=$?;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "327: if test ${HAVE_ENABLE_PYTHON} -eq 0 && test -n \"${PYTHON_CONFIG}\";",
          "328: then",
          "329:  # Issue with running the python bindings with asan disabled for now.",
          "330:  # CONFIGURE_OPTIONS=\"--enable-python\";",
          "331:  CONFIGURE_OPTIONS=\"\";",
          "332: else",
          "333:  CONFIGURE_OPTIONS=\"\";",
          "334: fi",
          "336: run_configure_make_check_with_asan ${CONFIGURE_OPTIONS};",
          "337: RESULT=$?;",
          "339: if test ${RESULT} -ne ${EXIT_SUCCESS};",
          "340: then",
          "341:  exit ${EXIT_FAILURE};",
          "342: fi",
          "",
          "---------------"
        ],
        "synclibs.ps1||synclibs.ps1": [
          "File: synclibs.ps1 -> synclibs.ps1",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Script that synchronizes the local library dependencies",
          "2: #",
          "5: $GitUrlPrefix = \"https://github.com/libyal\"",
          "6: $LocalLibs = \"libbfio libcdata libcdirectory libcerror libcfile libclocale libcnotify libcpath libcsplit libcthreads libexe libfcache libfdata libfdatetime libfguid libfvalue libfwevt libfwnt libregf libuna libwrc\"",
          "",
          "[Removed Lines]",
          "3: # Version: 20161110",
          "",
          "[Added Lines]",
          "3: # Version: 20170722",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13: ForEach (${LocalLib} in ${LocalLibs})",
          "14: {",
          "15:  # PowerShell will raise NativeCommandError if git writes to stdout or stderr",
          "16:  # therefore 2>&1 is added and the output is stored in a variable.",
          "17:  $Output = Invoke-Expression -Command \"${Git} clone ${GitUrlPrefix}/${LocalLib}.git ${LocalLib}-${pid} 2>&1\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15:  # Split will return an array of a single empty string when LocalLibs is empty.",
          "16:  If (-Not (${LocalLib}))",
          "17:  {",
          "18:   Continue",
          "19:  }",
          "",
          "---------------"
        ],
        "tests/evt_test_memory.h||tests/evt_test_memory.h": [
          "File: tests/evt_test_memory.h -> tests/evt_test_memory.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: extern \"C\" {",
          "29: #endif",
          "32: #define HAVE_EVT_TEST_MEMORY  1",
          "33: #endif",
          "",
          "[Removed Lines]",
          "31: #if defined( HAVE_GNU_DL_DLSYM ) && defined( __GNUC__ ) && !defined( __clang__ ) && !defined( __arm__ ) && !defined( __mips__ ) && !defined( __hppa__ ) && !defined( __sparc__ )",
          "",
          "[Added Lines]",
          "31: #if defined( HAVE_GNU_DL_DLSYM ) && defined( __GNUC__ ) && !defined( LIBEVT_DLL_IMPORT ) && !defined( __arm__ ) && !defined( __clang__ ) && !defined( __CYGWIN__ ) && !defined( __hppa__ ) && !defined( __mips__ ) && !defined( __sparc__ ) && !defined( HAVE_ASAN )",
          "",
          "---------------"
        ],
        "tests/evt_test_record_values.c||tests/evt_test_record_values.c": [
          "File: tests/evt_test_record_values.c -> tests/evt_test_record_values.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "487:  libcerror_error_free(",
          "488:   &error );",
          "494:  result = libevt_record_values_free(",
          "",
          "[Removed Lines]",
          "490:  return( 1 );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/lsan.suppressions||tests/lsan.suppressions": [
          "File: tests/lsan.suppressions -> tests/lsan.suppressions",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: leak:/lib*/libpython*",
          "",
          "---------------"
        ],
        "tests/test_evtexport.sh||tests/test_evtexport.sh": [
          "File: tests/test_evtexport.sh -> tests/test_evtexport.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/bin/bash",
          "2: # Export tool testing script",
          "3: #",
          "6: EXIT_SUCCESS=0;",
          "7: EXIT_FAILURE=1;",
          "8: EXIT_IGNORE=77;",
          "16: OPTION_SETS=\"\";",
          "21: INPUT_GLOB=\"*\";",
          "23: if ! test -z ${SKIP_TOOLS_TESTS};",
          "",
          "[Removed Lines]",
          "4: # Version: 20160328",
          "10: TEST_PREFIX=`dirname ${PWD}`;",
          "11: TEST_PREFIX=`basename ${TEST_PREFIX} | sed 's/^lib\\([^-]*\\).*$/\\1/'`;",
          "12: TEST_SUFFIX=\"export\";",
          "14: TEST_PROFILE=\"${TEST_PREFIX}${TEST_SUFFIX}\";",
          "15: TEST_DESCRIPTION=\"${TEST_PREFIX}${TEST_SUFFIX}\";",
          "18: TEST_TOOL_DIRECTORY=\"../${TEST_PREFIX}tools\";",
          "19: TEST_TOOL=\"${TEST_PREFIX}${TEST_SUFFIX}\";",
          "20: INPUT_DIRECTORY=\"input\";",
          "",
          "[Added Lines]",
          "4: # Version: 20170802",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:  exit ${EXIT_IGNORE};",
          "26: fi",
          "30: if ! test -x \"${TEST_EXECUTABLE}\";",
          "31: then",
          "33: fi",
          "35: if ! test -x \"${TEST_EXECUTABLE}\";",
          "",
          "[Removed Lines]",
          "28: TEST_EXECUTABLE=\"${TEST_TOOL_DIRECTORY}/${TEST_TOOL}\";",
          "32:  TEST_EXECUTABLE=\"${TEST_TOOL_DIRECTORY}/${TEST_TOOL}.exe\";",
          "",
          "[Added Lines]",
          "19: TEST_EXECUTABLE=\"../evttools/evtexport\";",
          "23:  TEST_EXECUTABLE=\"../evttools/evtexport.exe\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56: source ${TEST_RUNNER};",
          "59: RESULT=$?;",
          "61: exit ${RESULT};",
          "",
          "[Removed Lines]",
          "58: run_test_on_input_directory \"${TEST_PROFILE}\" \"${TEST_DESCRIPTION}\" \"with_stdout_reference\" \"${OPTION_SETS}\" \"${TEST_EXECUTABLE}\" \"${INPUT_DIRECTORY}\" \"${INPUT_GLOB}\";",
          "",
          "[Added Lines]",
          "49: run_test_on_input_directory \"evtexport\" \"evtexport\" \"with_stdout_reference\" \"${OPTION_SETS}\" \"${TEST_EXECUTABLE}\" \"input\" \"${INPUT_GLOB}\";",
          "",
          "---------------"
        ],
        "tests/test_evtinfo.ps1||tests/test_evtinfo.ps1": [
          "File: tests/test_evtinfo.ps1 -> tests/test_evtinfo.ps1",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Info tool testing script",
          "2: #",
          "5: $ExitSuccess = 0",
          "6: $ExitFailure = 1",
          "7: $ExitIgnore = 77",
          "14: $TestToolDirectory = \"..\\msvscpp\\Release\"",
          "19: If (-Not (Test-Path ${TestToolDirectory}))",
          "20: {",
          "21:  $TestToolDirectory = \"..\\vs2010\\Release\"",
          "22: }",
          "23: If (-Not (Test-Path ${TestToolDirectory}))",
          "24: {",
          "25:  $TestToolDirectory = \"..\\vs2012\\Release\"",
          "26: }",
          "27: If (-Not (Test-Path ${TestToolDirectory}))",
          "28: {",
          "29:  $TestToolDirectory = \"..\\vs2013\\Release\"",
          "30: }",
          "31: If (-Not (Test-Path ${TestToolDirectory}))",
          "32: {",
          "33:  $TestToolDirectory = \"..\\vs2015\\Release\"",
          "34: }",
          "",
          "[Removed Lines]",
          "3: # Version: 20161101",
          "9: $TestPrefix = Split-Path -path ${Pwd}.Path -parent",
          "10: $TestPrefix = Split-Path -path ${TestPrefix} -leaf",
          "11: $TestPrefix = ${TestPrefix}.Substring(3)",
          "12: $TestSuffix = \"info\"",
          "15: $TestTool = \"${TestPrefix}${TestSuffix}\"",
          "16: $InputDirectory = \"input\"",
          "17: $InputGlob = \"*\"",
          "",
          "[Added Lines]",
          "3: # Version: 20170807",
          "9: $InputGlob = \"*\"",
          "13: If (-Not (Test-Path ${TestToolDirectory}))",
          "14: {",
          "15:  $TestToolDirectory = \"..\\msvscpp\\VSDebug\"",
          "16: }",
          "22: {",
          "23:  $TestToolDirectory = \"..\\vs2010\\VSDebug\"",
          "24: }",
          "25: If (-Not (Test-Path ${TestToolDirectory}))",
          "30: {",
          "31:  $TestToolDirectory = \"..\\vs2012\\VSDebug\"",
          "32: }",
          "33: If (-Not (Test-Path ${TestToolDirectory}))",
          "38: {",
          "39:  $TestToolDirectory = \"..\\vs2013\\VSDebug\"",
          "40: }",
          "41: If (-Not (Test-Path ${TestToolDirectory}))",
          "42: {",
          "43:  $TestToolDirectory = \"..\\vs2015\\Release\"",
          "44: }",
          "45: If (-Not (Test-Path ${TestToolDirectory}))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:  Exit ${ExitFailure}",
          "40: }",
          "45: {",
          "46:  Exit ${ExitSuccess}",
          "47: }",
          "50: {",
          "51:  Invoke-Expression ${TestExecutable} $_",
          "",
          "[Removed Lines]",
          "42: $TestExecutable = \"${TestToolDirectory}\\${TestTool}.exe\"",
          "44: If (-Not (Test-Path -Path \"${InputDirectory}\"))",
          "49: Get-ChildItem -Path \"${InputDirectory}\\${InputGlob}\" | Foreach-Object",
          "",
          "[Added Lines]",
          "56: $TestExecutable = \"${TestToolDirectory}\\evtinfo.exe\"",
          "58: If (-Not (Test-Path -Path \"input\"))",
          "63: Get-ChildItem -Path \"input\\${InputGlob}\" | Foreach-Object",
          "",
          "---------------"
        ],
        "tests/test_evtinfo.sh||tests/test_evtinfo.sh": [
          "File: tests/test_evtinfo.sh -> tests/test_evtinfo.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/bin/bash",
          "2: # Info tool testing script",
          "3: #",
          "6: EXIT_SUCCESS=0;",
          "7: EXIT_FAILURE=1;",
          "8: EXIT_IGNORE=77;",
          "16: OPTION_SETS=\"\";",
          "21: INPUT_GLOB=\"*\";",
          "23: if ! test -z ${SKIP_TOOLS_TESTS};",
          "",
          "[Removed Lines]",
          "4: # Version: 20160328",
          "10: TEST_PREFIX=`dirname ${PWD}`;",
          "11: TEST_PREFIX=`basename ${TEST_PREFIX} | sed 's/^lib\\([^-]*\\).*$/\\1/'`;",
          "12: TEST_SUFFIX=\"info\";",
          "14: TEST_PROFILE=\"${TEST_PREFIX}${TEST_SUFFIX}\";",
          "15: TEST_DESCRIPTION=\"${TEST_PREFIX}${TEST_SUFFIX}\";",
          "18: TEST_TOOL_DIRECTORY=\"../${TEST_PREFIX}tools\";",
          "19: TEST_TOOL=\"${TEST_PREFIX}${TEST_SUFFIX}\";",
          "20: INPUT_DIRECTORY=\"input\";",
          "",
          "[Added Lines]",
          "4: # Version: 20170802",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:  exit ${EXIT_IGNORE};",
          "26: fi",
          "30: if ! test -x \"${TEST_EXECUTABLE}\";",
          "31: then",
          "33: fi",
          "35: if ! test -x \"${TEST_EXECUTABLE}\";",
          "",
          "[Removed Lines]",
          "28: TEST_EXECUTABLE=\"${TEST_TOOL_DIRECTORY}/${TEST_TOOL}\";",
          "32:  TEST_EXECUTABLE=\"${TEST_TOOL_DIRECTORY}/${TEST_TOOL}.exe\";",
          "",
          "[Added Lines]",
          "19: TEST_EXECUTABLE=\"../evttools/evtinfo\";",
          "23:  TEST_EXECUTABLE=\"../evttools/evtinfo.exe\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56: source ${TEST_RUNNER};",
          "59: RESULT=$?;",
          "61: exit ${RESULT};",
          "",
          "[Removed Lines]",
          "58: run_test_on_input_directory \"${TEST_PROFILE}\" \"${TEST_DESCRIPTION}\" \"with_stdout_reference\" \"${OPTION_SETS}\" \"${TEST_EXECUTABLE}\" \"${INPUT_DIRECTORY}\" \"${INPUT_GLOB}\";",
          "",
          "[Added Lines]",
          "49: run_test_on_input_directory \"evtinfo\" \"evtinfo\" \"with_stdout_reference\" \"${OPTION_SETS}\" \"${TEST_EXECUTABLE}\" \"input\" \"${INPUT_GLOB}\";",
          "",
          "---------------"
        ],
        "tests/test_library.ps1||tests/test_library.ps1": [
          "File: tests/test_library.ps1 -> tests/test_library.ps1",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Tests C library functions and types.",
          "2: #",
          "5: $ExitSuccess = 0",
          "6: $ExitFailure = 1",
          "7: $ExitIgnore = 77",
          "13: $LibraryTests = \"error io_handle notify record record_values\"",
          "14: $LibraryTestsWithInput = \"file support\"",
          "",
          "[Removed Lines]",
          "3: # Version: 20170115",
          "9: $TestPrefix = Split-Path -path ${Pwd}.Path -parent",
          "10: $TestPrefix = Split-Path -path ${TestPrefix} -leaf",
          "11: $TestPrefix = ${TestPrefix}.Substring(3)",
          "",
          "[Added Lines]",
          "3: # Version: 20170807",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20:  param( [string]$TestType )",
          "22:  $TestDescription = \"Testing: ${TestName}\"",
          "25:  $Output = Invoke-Expression ${TestExecutable}",
          "26:  $Result = ${LastExitCode}",
          "",
          "[Removed Lines]",
          "23:  $TestExecutable = \"${TestToolDirectory}\\${TestPrefix}_test_${TestName}.exe\"",
          "",
          "[Added Lines]",
          "19:  $TestExecutable = \"${TestToolDirectory}\\evt_test_${TestName}.exe\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "42:  Return ${Result}",
          "43: }",
          "45: If (-Not (Test-Path ${TestToolDirectory}))",
          "46: {",
          "47:  $TestToolDirectory = \"..\\vs2010\\Release\"",
          "48: }",
          "49: If (-Not (Test-Path ${TestToolDirectory}))",
          "50: {",
          "51:  $TestToolDirectory = \"..\\vs2012\\Release\"",
          "52: }",
          "53: If (-Not (Test-Path ${TestToolDirectory}))",
          "54: {",
          "55:  $TestToolDirectory = \"..\\vs2013\\Release\"",
          "56: }",
          "57: If (-Not (Test-Path ${TestToolDirectory}))",
          "58: {",
          "59:  $TestToolDirectory = \"..\\vs2015\\Release\"",
          "60: }",
          "61: If (-Not (Test-Path ${TestToolDirectory}))",
          "62: {",
          "63:  Write-Host \"Missing test tool directory.\" -foreground Red",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: If (-Not (Test-Path ${TestToolDirectory}))",
          "42: {",
          "43:  $TestToolDirectory = \"..\\msvscpp\\VSDebug\"",
          "44: }",
          "50: {",
          "51:  $TestToolDirectory = \"..\\vs2010\\VSDebug\"",
          "52: }",
          "53: If (-Not (Test-Path ${TestToolDirectory}))",
          "58: {",
          "59:  $TestToolDirectory = \"..\\vs2012\\VSDebug\"",
          "60: }",
          "61: If (-Not (Test-Path ${TestToolDirectory}))",
          "66: {",
          "67:  $TestToolDirectory = \"..\\vs2013\\VSDebug\"",
          "68: }",
          "69: If (-Not (Test-Path ${TestToolDirectory}))",
          "74: {",
          "75:  $TestToolDirectory = \"..\\vs2015\\VSDebug\"",
          "76: }",
          "77: If (-Not (Test-Path ${TestToolDirectory}))",
          "",
          "---------------"
        ],
        "tests/test_library.sh||tests/test_library.sh": [
          "File: tests/test_library.sh -> tests/test_library.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/bin/bash",
          "2: # Tests C library functions and types.",
          "3: #",
          "6: EXIT_SUCCESS=0;",
          "7: EXIT_FAILURE=1;",
          "8: EXIT_IGNORE=77;",
          "14: LIBRARY_TESTS=\"error io_handle notify record record_values\";",
          "15: LIBRARY_TESTS_WITH_INPUT=\"file support\";",
          "16: OPTION_SETS=\"\";",
          "20: INPUT_GLOB=\"*\";",
          "22: run_test()",
          "",
          "[Removed Lines]",
          "4: # Version: 20170115",
          "10: TEST_PREFIX=`dirname ${PWD}`;",
          "11: TEST_PREFIX=`basename ${TEST_PREFIX} | sed 's/^lib\\([^-]*\\).*$/\\1/'`;",
          "13: TEST_PROFILE=\"lib${TEST_PREFIX}\";",
          "18: TEST_TOOL_DIRECTORY=\".\";",
          "19: INPUT_DIRECTORY=\"input\";",
          "",
          "[Added Lines]",
          "4: # Version: 20170722",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:  local TEST_NAME=$1;",
          "26:  local TEST_DESCRIPTION=\"Testing: ${TEST_NAME}\";",
          "29:  if ! test -x \"${TEST_EXECUTABLE}\";",
          "30:  then",
          "",
          "[Removed Lines]",
          "27:  local TEST_EXECUTABLE=\"${TEST_TOOL_DIRECTORY}/${TEST_PREFIX}_test_${TEST_NAME}\";",
          "",
          "[Added Lines]",
          "21:  local TEST_EXECUTABLE=\"./evt_test_${TEST_NAME}\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "43:  local TEST_NAME=$1;",
          "45:  local TEST_DESCRIPTION=\"Testing: ${TEST_NAME}\";",
          "48:  if ! test -x \"${TEST_EXECUTABLE}\";",
          "49:  then",
          "50:   TEST_EXECUTABLE=\"${TEST_EXECUTABLE}.exe\";",
          "51:  fi",
          "54:  local RESULT=$?;",
          "56:  return ${RESULT};",
          "",
          "[Removed Lines]",
          "46:  local TEST_EXECUTABLE=\"${TEST_TOOL_DIRECTORY}/${TEST_PREFIX}_test_${TEST_NAME}\";",
          "53:  run_test_on_input_directory \"${TEST_PROFILE}\" \"${TEST_DESCRIPTION}\" \"default\" \"${OPTION_SETS}\" \"${TEST_EXECUTABLE}\" \"${INPUT_DIRECTORY}\" \"${INPUT_GLOB}\";",
          "",
          "[Added Lines]",
          "40:  local TEST_EXECUTABLE=\"./evt_test_${TEST_NAME}\";",
          "47:  run_test_on_input_directory \"libevt\" \"${TEST_DESCRIPTION}\" \"default\" \"${OPTION_SETS}\" \"${TEST_EXECUTABLE}\" \"input\" \"${INPUT_GLOB}\";",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "98: for TEST_NAME in ${LIBRARY_TESTS_WITH_INPUT};",
          "99: do",
          "101:  then",
          "102:   run_test_with_input \"${TEST_NAME}\";",
          "103:   RESULT=$?;",
          "",
          "[Removed Lines]",
          "100:  if test -d ${INPUT_DIRECTORY};",
          "",
          "[Added Lines]",
          "94:  if test -d \"input\";",
          "",
          "---------------"
        ],
        "tests/test_python_module.sh||tests/test_python_module.sh": [
          "File: tests/test_python_module.sh -> tests/test_python_module.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/bin/bash",
          "2: # Tests Python module functions and types.",
          "3: #",
          "6: EXIT_SUCCESS=0;",
          "7: EXIT_FAILURE=1;",
          "8: EXIT_IGNORE=77;",
          "14: TEST_FUNCTIONS=\"support\";",
          "15: TEST_FUNCTIONS_WITH_INPUT=\"file\";",
          "16: OPTION_SETS=\"\";",
          "18: TEST_TOOL_DIRECTORY=\".\";",
          "20: INPUT_GLOB=\"*\";",
          "22: test_python_function()",
          "",
          "[Removed Lines]",
          "4: # Version: 20170115",
          "10: TEST_PREFIX=`dirname ${PWD}`;",
          "11: TEST_PREFIX=`basename ${TEST_PREFIX} | sed 's/^lib\\([^-]*\\).*$/\\1/'`;",
          "13: TEST_PROFILE=\"py${TEST_PREFIX}\";",
          "19: INPUT_DIRECTORY=\"input\";",
          "",
          "[Added Lines]",
          "4: # Version: 20170722",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:  local TEST_FUNCTION=$1;",
          "26:  local TEST_DESCRIPTION=\"Testing Python-bindings functions: ${TEST_FUNCTION}\";",
          "29:  run_test_with_arguments \"${TEST_DESCRIPTION}\" \"${TEST_SCRIPT}\";",
          "30:  local RESULT=$?;",
          "",
          "[Removed Lines]",
          "27:  local TEST_SCRIPT=\"${TEST_TOOL_DIRECTORY}/py${TEST_PREFIX}_test_${TEST_FUNCTION}.py\";",
          "",
          "[Added Lines]",
          "22:  local TEST_SCRIPT=\"${TEST_TOOL_DIRECTORY}/pyevt_test_${TEST_FUNCTION}.py\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "37:  local TEST_FUNCTION=$1;",
          "39:  local TEST_DESCRIPTION=\"Testing Python-bindings functions: ${TEST_FUNCTION}\";",
          "43:  local RESULT=$?;",
          "45:  return ${RESULT};",
          "",
          "[Removed Lines]",
          "40:  local TEST_SCRIPT=\"${TEST_TOOL_DIRECTORY}/py${TEST_PREFIX}_test_${TEST_FUNCTION}.py\";",
          "42:  run_test_on_input_directory \"${TEST_PROFILE}\" \"${TEST_DESCRIPTION}\" \"default\" \"${OPTION_SETS}\" \"${TEST_SCRIPT}\" \"${INPUT_DIRECTORY}\" \"${INPUT_GLOB}\";",
          "",
          "[Added Lines]",
          "35:  local TEST_SCRIPT=\"${TEST_TOOL_DIRECTORY}/pyevt_test_${TEST_FUNCTION}.py\";",
          "37:  run_test_on_input_directory \"pyevt\" \"${TEST_DESCRIPTION}\" \"default\" \"${OPTION_SETS}\" \"${TEST_SCRIPT}\" \"input\" \"${INPUT_GLOB}\";",
          "",
          "---------------"
        ],
        "tests/test_runner.sh||tests/test_runner.sh": [
          "File: tests/test_runner.sh -> tests/test_runner.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/bin/bash",
          "2: # Bash functions to run an executable for testing.",
          "3: #",
          "5: #",
          "6: # When CHECK_WITH_GDB is set to a non-empty value the test executable",
          "7: # is run with gdb, otherwise it is run without.",
          "",
          "[Removed Lines]",
          "4: # Version: 20161115",
          "",
          "[Added Lines]",
          "4: # Version: 20170827",
          "5: #",
          "6: # When CHECK_WITH_ASAN is set to a non-empty value the test executable",
          "7: # is run with asan, otherwise it is run without.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "366: # Runs the test with optional arguments.",
          "367: #",
          "368: # Globals:",
          "369: #   CHECK_WITH_GDB",
          "370: #   CHECK_WITH_STDERR",
          "371: #   CHECK_WITH_VALGRIND",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "372: #   CHECK_WITH_ASAN",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "394:   return ${EXIT_FAILURE};",
          "395:  fi",
          "398:  # Note that the behavior of `file -bi` is not helpful on Mac OS X.",
          "399:  local EXECUTABLE_TYPE=`file -b ${TEST_EXECUTABLE}`;",
          "",
          "[Removed Lines]",
          "396:  local PLATFORM=`uname -s`;",
          "",
          "[Added Lines]",
          "400:  local PLATFORM=`uname -s | sed 's/-.*$//'`;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "417:  fi",
          "418:  local RESULT=0;",
          "421:  then",
          "422:   local TEST_EXECUTABLE=$( find_binary_executable ${TEST_EXECUTABLE} );",
          "423:   local LIBRARY_PATH=$( find_binary_library_path ${TEST_EXECUTABLE} );",
          "",
          "[Removed Lines]",
          "420:  if test -n \"${CHECK_WITH_GDB}\";",
          "",
          "[Added Lines]",
          "424:  if test -n \"${CHECK_WITH_ASAN}\";",
          "425:  then",
          "426:   local TEST_EXECUTABLE=$( find_binary_executable ${TEST_EXECUTABLE} );",
          "427:   local LIBRARY_PATH=$( find_binary_library_path ${TEST_EXECUTABLE} );",
          "428:   local PYTHON_MODULE_PATH=$( find_binary_python_module_path ${TEST_EXECUTABLE} );",
          "430:   local LSAN_SUPPRESSIONS=\"lsan.suppressions\";",
          "432:   if ! test -f ${LSAN_SUPPRESSIONS};",
          "433:   then",
          "434:    LSAN_SUPPRESSIONS=\"../lsan.suppressions\";",
          "435:   fi",
          "436:   if test \"${PLATFORM}\" = \"Darwin\";",
          "437:   then",
          "438:    if test ${IS_PYTHON_SCRIPT} -eq 0;",
          "439:    then",
          "440:     LSAN_OPTIONS=suppressions=\"${LSAN_SUPPRESSIONS}\" DYLD_LIBRARY_PATH=\"${LIBRARY_PATH}\" PYTHONPATH=\"${PYTHON_MODULE_PATH}\" \"${PYTHON}\" \"${TEST_EXECUTABLE}\" ${ARGUMENTS[@]};",
          "441:     RESULT=$?;",
          "442:    else",
          "443:     LSAN_OPTIONS=suppressions=\"${LSAN_SUPPRESSIONS}\" DYLD_LIBRARY_PATH=\"${LIBRARY_PATH}\" \"${TEST_EXECUTABLE}\" ${ARGUMENTS[@]};",
          "444:     RESULT=$?;",
          "445:    fi",
          "446:   else",
          "447:    local CONFIG_LOG=\"../config.log\";",
          "449:    if ! test -f ${CONFIG_LOG};",
          "450:    then",
          "451:     CONFIG_LOG=\"../../config.log\";",
          "452:    fi",
          "453:    local CC=`cat ${CONFIG_LOG} | grep -e \"^CC=\" | sed \"s/CC='\\\\(.*\\\\)'/\\1/\"`;",
          "454:    local LIBASAN=\"\";",
          "456:    if test -z ${CC} || test ${CC} != \"clang\";",
          "457:    then",
          "458:     local LDCONFIG=`which ldconfig 2> /dev/null`;",
          "460:     if test -z ${LDCONFIG} || ! test -x ${LDCONFIG};",
          "461:     then",
          "462:      LDCONFIG=\"/sbin/ldconfig\";",
          "463:     fi",
          "464:     if test -z ${LDCONFIG} || ! test -x ${LDCONFIG};",
          "465:     then",
          "466:      echo \"Missing binary: ldconfig\";",
          "467:      echo \"\";",
          "469:      exit ${EXIT_FAILURE};",
          "470:     fi",
          "471:     LIBASAN=`${LDCONFIG} -p | grep libasan | sed 's/^.* => //'`;",
          "473:     if ! test -f ${LIBASAN};",
          "474:     then",
          "475:      echo \"Missing library: ${BINARY}\";",
          "476:      echo \"\";",
          "478:      exit ${EXIT_FAILURE};",
          "479:     fi",
          "480:    fi",
          "481:    if test ${IS_PYTHON_SCRIPT} -eq 0;",
          "482:    then",
          "483:     LSAN_OPTIONS=suppressions=\"${LSAN_SUPPRESSIONS}\" LD_PRELOAD=\"${LIBASAN}\" LD_LIBRARY_PATH=\"${LIBRARY_PATH}\" PYTHONPATH=\"${PYTHON_MODULE_PATH}\" \"${PYTHON}\" \"${TEST_EXECUTABLE}\" ${ARGUMENTS[@]};",
          "484:     RESULT=$?;",
          "485:    else",
          "486:     LSAN_OPTIONS=suppressions=\"${LSAN_SUPPRESSIONS}\" LD_PRELOAD=\"${LIBASAN}\" LD_LIBRARY_PATH=\"${LIBRARY_PATH}\" \"${TEST_EXECUTABLE}\" ${ARGUMENTS[@]};",
          "487:     RESULT=$?;",
          "488:    fi",
          "489:   fi",
          "491:  elif test -n \"${CHECK_WITH_GDB}\";",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "433:     DYLD_LIBRARY_PATH=\"${LIBRARY_PATH}\" gdb -ex \"set non-stop on\" -ex \"run\" -ex \"quit\" --args \"${TEST_EXECUTABLE}\" ${ARGUMENTS[@]};",
          "434:     RESULT=$?;",
          "435:    fi",
          "436:   else",
          "437:    if test ${IS_PYTHON_SCRIPT} -eq 0;",
          "438:    then",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "508:   elif test \"${PLATFORM}\" = \"CYGWIN_NT\";",
          "509:   then",
          "510:    if test ${IS_PYTHON_SCRIPT} -eq 0;",
          "511:    then",
          "512:     PATH=\"${LIBRARY_PATH}:${PATH}\" PYTHONPATH=\"${PYTHON_MODULE_PATH}\" gdb -ex \"set non-stop on\" -ex \"run\" -ex \"quit\" --args \"${PYTHON}\" \"${TEST_EXECUTABLE}\" ${ARGUMENTS[@]};",
          "513:     RESULT=$?;",
          "514:    else",
          "515:     PATH=\"${LIBRARY_PATH}:${PATH}\" gdb -ex \"set non-stop on\" -ex \"run\" -ex \"quit\" --args \"${TEST_EXECUTABLE}\" ${ARGUMENTS[@]};",
          "516:     RESULT=$?;",
          "517:    fi",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "463:     DYLD_LIBRARY_PATH=\"${LIBRARY_PATH}\" valgrind ${VALGRIND_OPTIONS[@]} \"${TEST_EXECUTABLE}\" ${ARGUMENTS[@]};",
          "464:     RESULT=$?;",
          "465:    fi",
          "466:   else",
          "467:    if test ${IS_PYTHON_SCRIPT} -eq 0;",
          "468:    then",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "550:   elif test \"${PLATFORM}\" = \"CYGWIN_NT\";",
          "551:   then",
          "552:    if test ${IS_PYTHON_SCRIPT} -eq 0;",
          "553:    then",
          "554:     PATH=\"${LIBRARY_PATH}:${PATH}\" PYTHONPATH=\"${PYTHON_MODULE_PATH}\" valgrind ${VALGRIND_OPTIONS[@]} \"${PYTHON}\" \"${TEST_EXECUTABLE}\" ${ARGUMENTS[@]};",
          "555:     RESULT=$?;",
          "556:    else",
          "557:     PATH=\"${LIBRARY_PATH}:${PATH}\" valgrind ${VALGRIND_OPTIONS[@]} \"${TEST_EXECUTABLE}\" ${ARGUMENTS[@]};",
          "558:     RESULT=$?;",
          "559:    fi",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "537:     DYLD_LIBRARY_PATH=\"${LIBRARY_PATH}\" PYTHONPATH=\"${PYTHON_MODULE_PATH}\" \"${PYTHON}\" \"${TEST_EXECUTABLE}\" ${ARGUMENTS[@]} 2> /dev/null;",
          "538:     RESULT=$?;",
          "539:    fi",
          "540:   else",
          "541:    if test -n \"${CHECK_WITH_STDERR}\";",
          "542:    then",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "636:   elif test \"${PLATFORM}\" = \"CYGWIN_NT\";",
          "637:   then",
          "638:    if test -n \"${CHECK_WITH_STDERR}\";",
          "639:    then",
          "640:     PATH=\"${LIBRARY_PATH}:${PATH}\" PYTHONPATH=\"${PYTHON_MODULE_PATH}\" \"${PYTHON}\" \"${TEST_EXECUTABLE}\" ${ARGUMENTS[@]};",
          "641:     RESULT=$?;",
          "642:    else",
          "643:     PATH=\"${LIBRARY_PATH}:${PATH}\" PYTHONPATH=\"${PYTHON_MODULE_PATH}\" \"${PYTHON}\" \"${TEST_EXECUTABLE}\" ${ARGUMENTS[@]} 2> /dev/null;",
          "644:     RESULT=$?;",
          "645:    fi",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "582: # Runs the test with an input file and optional arguments.",
          "583: #",
          "584: # Globals:",
          "585: #   CHECK_WITH_GDB",
          "586: #   CHECK_WITH_STDERR",
          "587: #   CHECK_WITH_VALGRIND",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "692: #   CHECK_WITH_ASAN",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "610:   return ${EXIT_FAILURE};",
          "611:  fi",
          "614:  # Note that the behavior of `file -bi` is not helpful on Mac OS X.",
          "615:  local EXECUTABLE_TYPE=`file -b ${TEST_EXECUTABLE}`;",
          "",
          "[Removed Lines]",
          "612:  local PLATFORM=`uname -s`;",
          "",
          "[Added Lines]",
          "720:  local PLATFORM=`uname -s | sed 's/-.*$//'`;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "633:  fi",
          "634:  local RESULT=0;",
          "637:  then",
          "638:   local TEST_EXECUTABLE=$( find_binary_executable ${TEST_EXECUTABLE} );",
          "639:   local LIBRARY_PATH=$( find_binary_library_path ${TEST_EXECUTABLE} );",
          "",
          "[Removed Lines]",
          "636:  if test -n \"${CHECK_WITH_GDB}\";",
          "",
          "[Added Lines]",
          "744:  if test -n \"${CHECK_WITH_ASAN}\";",
          "745:  then",
          "746:   local TEST_EXECUTABLE=$( find_binary_executable ${TEST_EXECUTABLE} );",
          "747:   local LIBRARY_PATH=$( find_binary_library_path ${TEST_EXECUTABLE} );",
          "748:   local PYTHON_MODULE_PATH=$( find_binary_python_module_path ${TEST_EXECUTABLE} );",
          "750:   local LSAN_SUPPRESSIONS=\"lsan.suppressions\";",
          "752:   if ! test -f ${LSAN_SUPPRESSIONS};",
          "753:   then",
          "754:    LSAN_SUPPRESSIONS=\"../lsan.suppressions\";",
          "755:   fi",
          "756:   if test \"${PLATFORM}\" = \"Darwin\";",
          "757:   then",
          "758:    # TODO DYLD_INSERT_LIBRARIES=/Library/Developer/CommandLineTools/usr/lib/clang/8.1.0/lib/darwin/libclang_rt.asan_osx_dynamic.dylib",
          "759:    if test ${IS_PYTHON_SCRIPT} -eq 0;",
          "760:    then",
          "761:     LSAN_OPTIONS=suppressions=\"${LSAN_SUPPRESSIONS}\" DYLD_LIBRARY_PATH=\"${LIBRARY_PATH}\" PYTHONPATH=\"${PYTHON_MODULE_PATH}\" \"${PYTHON}\" \"${TEST_EXECUTABLE}\" ${ARGUMENTS[@]} \"${INPUT_FILE}\";",
          "762:     RESULT=$?;",
          "763:    else",
          "764:     LSAN_OPTIONS=suppressions=\"${LSAN_SUPPRESSIONS}\" DYLD_LIBRARY_PATH=\"${LIBRARY_PATH}\" \"${TEST_EXECUTABLE}\" ${ARGUMENTS[@]} \"${INPUT_FILE}\";",
          "765:     RESULT=$?;",
          "766:    fi",
          "767:   else",
          "768:    local CONFIG_LOG=\"../config.log\";",
          "770:    if ! test -f ${CONFIG_LOG};",
          "771:    then",
          "772:     CONFIG_LOG=\"../../config.log\";",
          "773:    fi",
          "774:    local CC=`cat ${CONFIG_LOG} | grep -e \"^CC=\" | sed \"s/CC='\\\\(.*\\\\)'/\\1/\"`;",
          "775:    local LIBASAN=\"\";",
          "777:    if test -z ${CC} || test ${CC} != \"clang\";",
          "778:    then",
          "779:     local LDCONFIG=`which ldconfig 2> /dev/null`;",
          "781:     if test -z ${LDCONFIG} || ! test -x ${LDCONFIG};",
          "782:     then",
          "783:      LDCONFIG=\"/sbin/ldconfig\";",
          "784:     fi",
          "785:     if test -z ${LDCONFIG} || ! test -x ${LDCONFIG};",
          "786:     then",
          "787:      echo \"Missing binary: ldconfig\";",
          "788:      echo \"\";",
          "790:      exit ${EXIT_FAILURE};",
          "791:     fi",
          "792:     LIBASAN=`${LDCONFIG} -p | grep libasan | sed 's/^.* => //'`;",
          "794:     if ! test -f ${LIBASAN};",
          "795:     then",
          "796:      echo \"Missing library: ${BINARY}\";",
          "797:      echo \"\";",
          "799:      exit ${EXIT_FAILURE};",
          "800:     fi",
          "801:    fi",
          "802:    if test ${IS_PYTHON_SCRIPT} -eq 0;",
          "803:    then",
          "804:     LSAN_OPTIONS=suppressions=\"${LSAN_SUPPRESSIONS}\" LD_PRELOAD=\"${LIBASAN}\" LD_LIBRARY_PATH=\"${LIBRARY_PATH}\" PYTHONPATH=\"${PYTHON_MODULE_PATH}\" \"${PYTHON}\" \"${TEST_EXECUTABLE}\" ${ARGUMENTS[@]} \"${INPUT_FILE}\";",
          "805:     RESULT=$?;",
          "806:    else",
          "807:     LSAN_OPTIONS=suppressions=\"${LSAN_SUPPRESSIONS}\" LD_PRELOAD=\"${LIBASAN}\" LD_LIBRARY_PATH=\"${LIBRARY_PATH}\" \"${TEST_EXECUTABLE}\" ${ARGUMENTS[@]} \"${INPUT_FILE}\";",
          "808:     RESULT=$?;",
          "809:    fi",
          "810:   fi",
          "812:  elif test -n \"${CHECK_WITH_GDB}\";",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "649:     DYLD_LIBRARY_PATH=\"${LIBRARY_PATH}\" gdb -ex \"set non-stop on\" -ex \"run\" -ex \"quit\" --args \"${TEST_EXECUTABLE}\" ${ARGUMENTS[@]} \"${INPUT_FILE}\";",
          "650:     RESULT=$?;",
          "651:    fi",
          "652:   else",
          "653:    if test ${IS_PYTHON_SCRIPT} -eq 0;",
          "654:    then",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "829:   elif test \"${PLATFORM}\" = \"CYGWIN_NT\";",
          "830:   then",
          "831:    if test ${IS_PYTHON_SCRIPT} -eq 0;",
          "832:    then",
          "833:     PATH=\"${LIBRARY_PATH}:${PATH}\" PYTHONPATH=\"${PYTHON_MODULE_PATH}\" gdb -ex \"set non-stop on\" -ex \"run\" -ex \"quit\" --args \"${PYTHON}\" \"${TEST_EXECUTABLE}\" ${ARGUMENTS[@]} \"${INPUT_FILE}\";",
          "834:     RESULT=$?;",
          "835:    else",
          "836:     PATH=\"${LIBRARY_PATH}:${PATH}\" gdb -ex \"set non-stop on\" -ex \"run\" -ex \"quit\" --args \"${TEST_EXECUTABLE}\" ${ARGUMENTS[@]} \"${INPUT_FILE}\";",
          "837:     RESULT=$?;",
          "838:    fi",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "679:     DYLD_LIBRARY_PATH=\"${LIBRARY_PATH}\" valgrind ${VALGRIND_OPTIONS[@]} \"${TEST_EXECUTABLE}\" ${ARGUMENTS[@]} \"${INPUT_FILE}\";",
          "680:     RESULT=$?;",
          "681:    fi",
          "682:   else",
          "683:    if test ${IS_PYTHON_SCRIPT} -eq 0;",
          "684:    then",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "871:   elif test \"${PLATFORM}\" = \"CYGWIN_NT\";",
          "872:   then",
          "873:    if test ${IS_PYTHON_SCRIPT} -eq 0;",
          "874:    then",
          "875:     PATH=\"${LIBRARY_PATH}:${PATH}\" PYTHONPATH=\"${PYTHON_MODULE_PATH}\" valgrind ${VALGRIND_OPTIONS[@]} \"${PYTHON}\" \"${TEST_EXECUTABLE}\" ${ARGUMENTS[@]} \"${INPUT_FILE}\";",
          "876:     RESULT=$?;",
          "877:    else",
          "878:     PATH=\"${LIBRARY_PATH}:${PATH}\" valgrind ${VALGRIND_OPTIONS[@]} \"${TEST_EXECUTABLE}\" ${ARGUMENTS[@]} \"${INPUT_FILE}\";",
          "879:     RESULT=$?;",
          "880:    fi",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "753:     DYLD_LIBRARY_PATH=\"${LIBRARY_PATH}\" PYTHONPATH=\"${PYTHON_MODULE_PATH}\" \"${PYTHON}\" \"${TEST_EXECUTABLE}\" ${ARGUMENTS[@]} \"${INPUT_FILE}\" 2> /dev/null;",
          "754:     RESULT=$?;",
          "755:    fi",
          "756:   else",
          "757:    if test -n \"${CHECK_WITH_STDERR}\";",
          "758:    then",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "957:   elif test \"${PLATFORM}\" = \"CYGWIN_NT\";",
          "958:   then",
          "959:    if test -n \"${CHECK_WITH_STDERR}\";",
          "960:    then",
          "961:     PATH=\"${LIBRARY_PATH}:${PATH}\" PYTHONPATH=\"${PYTHON_MODULE_PATH}\" \"${PYTHON}\" \"${TEST_EXECUTABLE}\" ${ARGUMENTS[@]} \"${INPUT_FILE}\";",
          "962:     RESULT=$?;",
          "963:    else",
          "964:     PATH=\"${LIBRARY_PATH}:${PATH}\" PYTHONPATH=\"${PYTHON_MODULE_PATH}\" \"${PYTHON}\" \"${TEST_EXECUTABLE}\" ${ARGUMENTS[@]} \"${INPUT_FILE}\" 2> /dev/null;",
          "965:     RESULT=$?;",
          "966:    fi",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "954: # Runs the test on the input directory.",
          "955: #",
          "960: # Arguments:",
          "961: #   a string containing the name of the test profile",
          "962: #   a string containing the description of the test",
          "",
          "[Removed Lines]",
          "956: # Globals:",
          "957: #   CHECK_WITH_GDB",
          "958: #   CHECK_WITH_VALGRIND",
          "959: #",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}