{
  "cve_id": "CVE-2022-25139",
  "cve_desc": "njs through 0.7.0, used in NGINX, was discovered to contain a heap use-after-free in njs_await_fulfilled.",
  "repo": "nginx/njs",
  "patch_hash": "6a07c2156a07ef307b6dcf3c2ca8571a5f1af7a6",
  "patch_info": {
    "commit_hash": "6a07c2156a07ef307b6dcf3c2ca8571a5f1af7a6",
    "repo": "nginx/njs",
    "commit_url": "https://github.com/nginx/njs/commit/6a07c2156a07ef307b6dcf3c2ca8571a5f1af7a6",
    "files": [
      "src/njs_async.c",
      "src/njs_function.c",
      "src/njs_function.h",
      "src/njs_value.h",
      "src/njs_vm.c",
      "src/njs_vmcode.c",
      "src/njs_vmcode.h",
      "test/js/async_recursive_last.t.js",
      "test/js/async_recursive_mid.t.js"
    ],
    "message": "Fixed recursive async function calls.\n\nPreviously, PromiseCapability record was stored (function->context)\ndirectly in function object during a function invocation.  This is\nnot correct, because PromiseCapability record should be linked to\ncurrent execution context.  As a result, function->context is\noverwritten with consecutive recursive calls which results in\nuse-after-free.\n\nThis closes #451 issue on Github.",
    "before_after_code_files": [
      "src/njs_async.c||src/njs_async.c",
      "src/njs_function.c||src/njs_function.c",
      "src/njs_function.h||src/njs_function.h",
      "src/njs_value.h||src/njs_value.h",
      "src/njs_vm.c||src/njs_vm.c",
      "src/njs_vmcode.c||src/njs_vmcode.c",
      "src/njs_vmcode.h||src/njs_vmcode.h",
      "test/js/async_recursive_last.t.js||test/js/async_recursive_last.t.js",
      "test/js/async_recursive_mid.t.js||test/js/async_recursive_mid.t.js"
    ]
  },
  "patch_diff": {
    "src/njs_async.c||src/njs_async.c": [
      "File: src/njs_async.c -> src/njs_async.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "29:         return NJS_ERROR;",
      "30:     }",
      "36:     if (ret == NJS_OK) {",
      "37:         ret = njs_function_call(vm, njs_function(&capability->resolve),",
      "",
      "[Removed Lines]",
      "32:     frame->function->context = capability;",
      "34:     ret = njs_function_lambda_call(vm);",
      "",
      "[Added Lines]",
      "32:     ret = njs_function_lambda_call(vm, capability, NULL);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "63:     njs_int_t           ret;",
      "64:     njs_value_t         **cur_local, **cur_closures, **cur_temp, *value;",
      "65:     njs_frame_t         *frame, *async_frame;",
      "67:     njs_async_ctx_t     *ctx;",
      "68:     njs_native_frame_t  *top, *async;",
      "",
      "[Removed Lines]",
      "66:     njs_function_t      *function;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "78:     async = &async_frame->native;",
      "79:     async->previous = vm->top_frame;",
      "83:     cur_local = vm->levels[NJS_LEVEL_LOCAL];",
      "84:     cur_closures = vm->levels[NJS_LEVEL_CLOSURE];",
      "85:     cur_temp = vm->levels[NJS_LEVEL_TEMP];",
      "",
      "[Removed Lines]",
      "81:     function = async->function;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "99:     vm->top_frame->retval = &vm->retval;",
      "109:     vm->levels[NJS_LEVEL_LOCAL] = cur_local;",
      "110:     vm->levels[NJS_LEVEL_CLOSURE] = cur_closures;",
      "",
      "[Removed Lines]",
      "101:     function->context = ctx->capability;",
      "102:     function->await = ctx;",
      "104:     ret = njs_vmcode_interpreter(vm, ctx->pc);",
      "106:     function->context = NULL;",
      "107:     function->await = NULL;",
      "",
      "[Added Lines]",
      "96:     ret = njs_vmcode_interpreter(vm, ctx->pc, ctx->capability, ctx);",
      "",
      "---------------"
    ],
    "src/njs_function.c||src/njs_function.c": [
      "File: src/njs_function.c -> src/njs_function.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "610: njs_int_t",
      "612: {",
      "613:     uint32_t               n;",
      "614:     njs_int_t              ret;",
      "",
      "[Removed Lines]",
      "611: njs_function_lambda_call(njs_vm_t *vm)",
      "",
      "[Added Lines]",
      "611: njs_function_lambda_call(njs_vm_t *vm, void *promise_cap, void *async_ctx)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "622:     frame = (njs_frame_t *) vm->top_frame;",
      "623:     function = frame->native.function;",
      "625:     if (function->global && !function->closure_copied) {",
      "626:         ret = njs_function_capture_global_closures(vm, function);",
      "627:         if (njs_slow_path(ret != NJS_OK)) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "625:     njs_assert(function->context == NULL);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "698:         }",
      "699:     }",
      "704:     vm->levels[NJS_LEVEL_LOCAL] = cur_local;",
      "",
      "[Removed Lines]",
      "701:     ret = njs_vmcode_interpreter(vm, lambda->start);",
      "",
      "[Added Lines]",
      "703:     ret = njs_vmcode_interpreter(vm, lambda->start, promise_cap, async_ctx);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "775:         return njs_function_native_call(vm);",
      "777:     } else {",
      "779:     }",
      "780: }",
      "",
      "[Removed Lines]",
      "778:         return njs_function_lambda_call(vm);",
      "",
      "[Added Lines]",
      "780:         return njs_function_lambda_call(vm, NULL, NULL);",
      "",
      "---------------"
    ],
    "src/njs_function.h||src/njs_function.h": [
      "File: src/njs_function.h -> src/njs_function.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "112: njs_int_t njs_function_call2(njs_vm_t *vm, njs_function_t *function,",
      "113:     const njs_value_t *this, const njs_value_t *args,",
      "114:     njs_uint_t nargs, njs_value_t *retval, njs_bool_t ctor);",
      "116: njs_int_t njs_function_native_call(njs_vm_t *vm);",
      "117: njs_native_frame_t *njs_function_frame_alloc(njs_vm_t *vm, size_t size);",
      "118: void njs_function_frame_free(njs_vm_t *vm, njs_native_frame_t *frame);",
      "",
      "[Removed Lines]",
      "115: njs_int_t njs_function_lambda_call(njs_vm_t *vm);",
      "",
      "[Added Lines]",
      "115: njs_int_t njs_function_lambda_call(njs_vm_t *vm, void *promise_cap,",
      "116:     void *async_ctx);",
      "",
      "---------------"
    ],
    "src/njs_value.h||src/njs_value.h": [
      "File: src/njs_value.h -> src/njs_value.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "270:     } u;",
      "272:     void                              *context;",
      "275:     njs_value_t                       *bound;",
      "276: };",
      "",
      "[Removed Lines]",
      "273:     void                              *await;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/njs_vm.c||src/njs_vm.c": [
      "File: src/njs_vm.c -> src/njs_vm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "490:         return ret;",
      "491:     }",
      "495:     return (ret == NJS_ERROR) ? NJS_ERROR : NJS_OK;",
      "496: }",
      "",
      "[Removed Lines]",
      "493:     ret = njs_vmcode_interpreter(vm, vm->start);",
      "",
      "[Added Lines]",
      "493:     ret = njs_vmcode_interpreter(vm, vm->start, NULL, NULL);",
      "",
      "---------------"
    ],
    "src/njs_vmcode.c||src/njs_vmcode.c": [
      "File: src/njs_vmcode.c -> src/njs_vmcode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "42: static njs_jump_off_t njs_vmcode_return(njs_vm_t *vm, njs_value_t *invld,",
      "43:     njs_value_t *retval);",
      "47: static njs_jump_off_t njs_vmcode_try_start(njs_vm_t *vm, njs_value_t *value,",
      "48:     njs_value_t *offset, u_char *pc);",
      "",
      "[Removed Lines]",
      "45: static njs_jump_off_t njs_vmcode_await(njs_vm_t *vm, njs_vmcode_await_t *await);",
      "",
      "[Added Lines]",
      "45: static njs_jump_off_t njs_vmcode_await(njs_vm_t *vm, njs_vmcode_await_t *await,",
      "46:     njs_promise_capability_t *pcap, njs_async_ctx_t *actx);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "79: njs_int_t",
      "81: {",
      "82:     u_char                       *catch;",
      "83:     double                       num, exponent;",
      "",
      "[Removed Lines]",
      "80: njs_vmcode_interpreter(njs_vm_t *vm, u_char *pc)",
      "",
      "[Added Lines]",
      "81: njs_vmcode_interpreter(njs_vm_t *vm, u_char *pc, void *promise_cap,",
      "82:     void *async_ctx)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "827:             case NJS_VMCODE_AWAIT:",
      "828:                 await = (njs_vmcode_await_t *) pc;",
      "831:             case NJS_VMCODE_TRY_START:",
      "832:                 ret = njs_vmcode_try_start(vm, value1, value2, pc);",
      "",
      "[Removed Lines]",
      "829:                 return njs_vmcode_await(vm, await);",
      "",
      "[Added Lines]",
      "831:                 return njs_vmcode_await(vm, await, promise_cap, async_ctx);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1814: static njs_jump_off_t",
      "1816: {",
      "1817:     size_t              size;",
      "1818:     njs_int_t           ret;",
      "",
      "[Removed Lines]",
      "1815: njs_vmcode_await(njs_vm_t *vm, njs_vmcode_await_t *await)",
      "",
      "[Added Lines]",
      "1817: njs_vmcode_await(njs_vm_t *vm, njs_vmcode_await_t *await,",
      "1818:     njs_promise_capability_t *pcap, njs_async_ctx_t *ctx)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1820:     njs_value_t         ctor, val, on_fulfilled, on_rejected, *value;",
      "1821:     njs_promise_t       *promise;",
      "1822:     njs_function_t      *fulfilled, *rejected;",
      "1824:     njs_native_frame_t  *active;",
      "1826:     active = &vm->active_frame->native;",
      "",
      "[Removed Lines]",
      "1823:     njs_async_ctx_t     *ctx;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1837:         return NJS_ERROR;",
      "1838:     }",
      "1842:     if (ctx == NULL) {",
      "1843:         ctx = njs_mp_alloc(vm->mem_pool, sizeof(njs_async_ctx_t));",
      "1844:         if (njs_slow_path(ctx == NULL)) {",
      "",
      "[Removed Lines]",
      "1840:     ctx = active->function->await;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1854:         }",
      "1856:         ctx->await = fulfilled->context;",
      "1861:         ret = njs_function_frame_save(vm, ctx->await, NULL);",
      "1862:         if (njs_slow_path(ret != NJS_OK)) {",
      "",
      "[Removed Lines]",
      "1857:         ctx->capability = active->function->context;",
      "1859:         active->function->context = NULL;",
      "",
      "[Added Lines]",
      "1857:         ctx->capability = pcap;",
      "",
      "---------------"
    ],
    "src/njs_vmcode.h||src/njs_vmcode.h": [
      "File: src/njs_vmcode.h -> src/njs_vmcode.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "437: } njs_vmcode_await_t;",
      "442: njs_object_t *njs_function_new_object(njs_vm_t *vm, njs_value_t *constructor);",
      "",
      "[Removed Lines]",
      "440: njs_int_t njs_vmcode_interpreter(njs_vm_t *vm, u_char *pc);",
      "",
      "[Added Lines]",
      "440: njs_int_t njs_vmcode_interpreter(njs_vm_t *vm, u_char *pc,",
      "441:     void *promise_cap, void *async_ctx);",
      "",
      "---------------"
    ],
    "test/js/async_recursive_last.t.js||test/js/async_recursive_last.t.js": [
      "File: test/js/async_recursive_last.t.js -> test/js/async_recursive_last.t.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2: includes: [compareArray.js]",
      "3: flags: [async]",
      "6: let stages = [];",
      "8: async function f(v) {",
      "9:     if (v == 3) {",
      "10:         return;",
      "11:     }",
      "13:     stages.push(`f>${v}`);",
      "15:     f(v + 1);",
      "17:     stages.push(`f<${v}`);",
      "19:     await \"X\";",
      "20: }",
      "22: f(0)",
      "23: .then(v => {",
      "24:     assert.compareArray(stages, ['f>0', 'f>1', 'f>2', 'f<2', 'f<1', 'f<0']);",
      "25: })",
      "26: .then($DONE, $DONE);",
      "",
      "---------------"
    ],
    "test/js/async_recursive_mid.t.js||test/js/async_recursive_mid.t.js": [
      "File: test/js/async_recursive_mid.t.js -> test/js/async_recursive_mid.t.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2: includes: [compareArray.js]",
      "3: flags: [async]",
      "6: let stages = [];",
      "8: async function f(v) {",
      "9:     if (v == 3) {",
      "10:         return;",
      "11:     }",
      "13:     stages.push(`f>${v}`);",
      "15:     await \"X\";",
      "17:     f(v + 1);",
      "19:     stages.push(`f<${v}`);",
      "20: }",
      "22: f(0)",
      "23: .then(v => {",
      "24:     assert.compareArray(stages, ['f>0','f>1','f<0','f>2','f<1']);",
      "25: })",
      "26: .then($DONE, $DONE);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "121067a85398a73e1ced96cad763457e30bfe5a0",
      "candidate_info": {
        "commit_hash": "121067a85398a73e1ced96cad763457e30bfe5a0",
        "repo": "nginx/njs",
        "commit_url": "https://github.com/nginx/njs/commit/121067a85398a73e1ced96cad763457e30bfe5a0",
        "files": [
          "src/njs_async.c",
          "src/njs_function.c",
          "src/njs_function.h"
        ],
        "message": "Removed unused argument from njs_function_lambda_call().",
        "before_after_code_files": [
          "src/njs_async.c||src/njs_async.c",
          "src/njs_function.c||src/njs_function.c",
          "src/njs_function.h||src/njs_function.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/njs_async.c||src/njs_async.c",
            "src/njs_function.c||src/njs_function.c",
            "src/njs_function.h||src/njs_function.h"
          ],
          "candidate": [
            "src/njs_async.c||src/njs_async.c",
            "src/njs_function.c||src/njs_function.c",
            "src/njs_function.h||src/njs_function.h"
          ]
        }
      },
      "candidate_diff": {
        "src/njs_async.c||src/njs_async.c": [
          "File: src/njs_async.c -> src/njs_async.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:         return NJS_ERROR;",
          "30:     }",
          "34:     if (ret == NJS_OK) {",
          "35:         ret = njs_function_call(vm, njs_function(&capability->resolve),",
          "",
          "[Removed Lines]",
          "32:     ret = njs_function_lambda_call(vm, capability, NULL);",
          "",
          "[Added Lines]",
          "32:     ret = njs_function_lambda_call(vm, capability);",
          "",
          "---------------"
        ],
        "src/njs_function.c||src/njs_function.c": [
          "File: src/njs_function.c -> src/njs_function.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "602: njs_int_t",
          "604: {",
          "605:     uint32_t               n;",
          "606:     njs_int_t              ret;",
          "",
          "[Removed Lines]",
          "603: njs_function_lambda_call(njs_vm_t *vm, void *promise_cap, void *async_ctx)",
          "",
          "[Added Lines]",
          "603: njs_function_lambda_call(njs_vm_t *vm, void *promise_cap)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "690:         }",
          "691:     }",
          "696:     vm->levels[NJS_LEVEL_LOCAL] = cur_local;",
          "",
          "[Removed Lines]",
          "693:     ret = njs_vmcode_interpreter(vm, lambda->start, promise_cap, async_ctx);",
          "",
          "[Added Lines]",
          "693:     ret = njs_vmcode_interpreter(vm, lambda->start, promise_cap, NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "777:         return njs_function_native_call(vm);",
          "779:     } else {",
          "781:     }",
          "782: }",
          "",
          "[Removed Lines]",
          "780:         return njs_function_lambda_call(vm, NULL, NULL);",
          "",
          "[Added Lines]",
          "780:         return njs_function_lambda_call(vm, NULL);",
          "",
          "---------------"
        ],
        "src/njs_function.h||src/njs_function.h": [
          "File: src/njs_function.h -> src/njs_function.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "110: njs_int_t njs_function_call2(njs_vm_t *vm, njs_function_t *function,",
          "111:     const njs_value_t *this, const njs_value_t *args,",
          "112:     njs_uint_t nargs, njs_value_t *retval, njs_bool_t ctor);",
          "115: njs_int_t njs_function_native_call(njs_vm_t *vm);",
          "116: njs_native_frame_t *njs_function_frame_alloc(njs_vm_t *vm, size_t size);",
          "117: void njs_function_frame_free(njs_vm_t *vm, njs_native_frame_t *frame);",
          "",
          "[Removed Lines]",
          "113: njs_int_t njs_function_lambda_call(njs_vm_t *vm, void *promise_cap,",
          "114:     void *async_ctx);",
          "",
          "[Added Lines]",
          "113: njs_int_t njs_function_lambda_call(njs_vm_t *vm, void *promise_cap);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ad48705bf1f04b4221a5f5b07715ac48b3160d53",
      "candidate_info": {
        "commit_hash": "ad48705bf1f04b4221a5f5b07715ac48b3160d53",
        "repo": "nginx/njs",
        "commit_url": "https://github.com/nginx/njs/commit/ad48705bf1f04b4221a5f5b07715ac48b3160d53",
        "files": [
          "src/njs_function.c",
          "test/js/async_recursive_large.t.js",
          "test/js/async_recursive_mid.t.js"
        ],
        "message": "Fixed frame allocation from an awaited frame.\n\nnjs_function_frame_save() is used to save the awaited frame when \"await\"\ninstruction is encountered. The saving was done as a memcpy() of\nexisting runtime frame.\n\nnjs_function_frame_alloc() is used to alloc a new function frame, this\nfunction tries to use a spare preallocated memory from the previous\nframe first.  Previously, this function might result in \"use-after-free\"\nwhen invoked from a restored frame saved with njs_function_frame_save().\nBecause njs_function_frame_save() left pointers to the spare memory of\nthe original frame which may be already free when saved frame is\nrestored.\n\nThe fix is to erase fields for the spare memory from the saved frame.\n\nThis closes #469 issue on Github.",
        "before_after_code_files": [
          "src/njs_function.c||src/njs_function.c",
          "test/js/async_recursive_large.t.js||test/js/async_recursive_large.t.js",
          "test/js/async_recursive_mid.t.js||test/js/async_recursive_mid.t.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/njs_function.c||src/njs_function.c",
            "test/js/async_recursive_mid.t.js||test/js/async_recursive_mid.t.js"
          ],
          "candidate": [
            "src/njs_function.c||src/njs_function.c",
            "test/js/async_recursive_mid.t.js||test/js/async_recursive_mid.t.js"
          ]
        }
      },
      "candidate_diff": {
        "src/njs_function.c||src/njs_function.c": [
          "File: src/njs_function.c -> src/njs_function.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "811:     njs_native_frame_t  *active, *native;",
          "814:     frame->previous_active_frame = NULL;",
          "816:     native = &frame->native;",
          "818:     active = &vm->active_frame->native;",
          "819:     value_count = njs_function_frame_value_count(active);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "818:     native->size = 0;",
          "819:     native->free = NULL;",
          "820:     native->free_size = 0;",
          "",
          "---------------"
        ],
        "test/js/async_recursive_large.t.js||test/js/async_recursive_large.t.js": [
          "File: test/js/async_recursive_large.t.js -> test/js/async_recursive_large.t.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: includes: [compareArray.js]",
          "3: flags: [async]",
          "6: let stages = [];",
          "8: async function f(v) {",
          "9:     if (v == 1000) {",
          "10:         return;",
          "11:     }",
          "13:     stages.push(`f>${v}`);",
          "15:     await \"X\";",
          "17:     await f(v + 1);",
          "19:     stages.push(`f<${v}`);",
          "20: }",
          "22: f(0)",
          "23: .then(v => {",
          "24:     assert.sameValue(stages.length, 2000);",
          "25: })",
          "26: .then($DONE, $DONE);",
          "",
          "---------------"
        ],
        "test/js/async_recursive_mid.t.js||test/js/async_recursive_mid.t.js": [
          "File: test/js/async_recursive_mid.t.js -> test/js/async_recursive_mid.t.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: let stages = [];",
          "8: async function f(v) {",
          "10:         return;",
          "11:     }",
          "",
          "[Removed Lines]",
          "9:     if (v == 3) {",
          "",
          "[Added Lines]",
          "9:     if (v == 1000) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "411d477fe4be1b30b53246866fbd846eb8575f00",
      "candidate_info": {
        "commit_hash": "411d477fe4be1b30b53246866fbd846eb8575f00",
        "repo": "nginx/njs",
        "commit_url": "https://github.com/nginx/njs/commit/411d477fe4be1b30b53246866fbd846eb8575f00",
        "files": [
          "src/njs_async.c",
          "src/njs_function.c",
          "src/njs_value.h",
          "src/njs_vmcode.c",
          "test/js/async_await_many_call.js",
          "test/njs_expect_test.exp"
        ],
        "message": "Fixed async ctx erasing when a function is called multiple times.\n\nThe bug was introduced in 92d10cd761e2.",
        "before_after_code_files": [
          "src/njs_async.c||src/njs_async.c",
          "src/njs_function.c||src/njs_function.c",
          "src/njs_value.h||src/njs_value.h",
          "src/njs_vmcode.c||src/njs_vmcode.c",
          "test/js/async_await_many_call.js||test/js/async_await_many_call.js",
          "test/njs_expect_test.exp||test/njs_expect_test.exp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/njs_async.c||src/njs_async.c",
            "src/njs_function.c||src/njs_function.c",
            "src/njs_value.h||src/njs_value.h",
            "src/njs_vmcode.c||src/njs_vmcode.c"
          ],
          "candidate": [
            "src/njs_async.c||src/njs_async.c",
            "src/njs_function.c||src/njs_function.c",
            "src/njs_value.h||src/njs_value.h",
            "src/njs_vmcode.c||src/njs_vmcode.c"
          ]
        }
      },
      "candidate_diff": {
        "src/njs_async.c||src/njs_async.c": [
          "File: src/njs_async.c -> src/njs_async.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: static void",
          "14: njs_int_t",
          "15: njs_async_function_frame_invoke(njs_vm_t *vm, njs_value_t *retval)",
          "16: {",
          "22:     frame = vm->top_frame;",
          "23:     frame->retval = retval;",
          "27:     njs_set_function(&ctor, &vm->constructors[NJS_OBJ_TYPE_PROMISE]);",
          "31:         return NJS_ERROR;",
          "32:     }",
          "34:     ret = njs_function_lambda_call(vm);",
          "36:     if (ret == NJS_OK) {",
          "38:                                 &njs_value_undefined, retval, 1, &vm->retval);",
          "40:     } else if (ret == NJS_ERROR) {",
          "",
          "[Removed Lines]",
          "11: njs_async_context_free(njs_vm_t *vm, njs_native_frame_t *frame);",
          "17:     njs_int_t           ret;",
          "18:     njs_value_t         ctor;",
          "19:     njs_async_ctx_t     *ctx;",
          "20:     njs_native_frame_t  *frame;",
          "25:     ctx = frame->function->context;",
          "29:     ctx->capability = njs_promise_new_capability(vm, &ctor);",
          "30:     if (njs_slow_path(ctx->capability == NULL)) {",
          "37:         ret = njs_function_call(vm, njs_function(&ctx->capability->resolve),",
          "",
          "[Added Lines]",
          "11: njs_async_context_free(njs_vm_t *vm, njs_async_ctx_t *ctx);",
          "17:     njs_int_t                 ret;",
          "18:     njs_value_t               ctor;",
          "19:     njs_native_frame_t        *frame;",
          "20:     njs_promise_capability_t  *capability;",
          "27:     capability = njs_promise_new_capability(vm, &ctor);",
          "28:     if (njs_slow_path(capability == NULL)) {",
          "32:     frame->function->context = capability;",
          "37:         ret = njs_function_call(vm, njs_function(&capability->resolve),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:             return NJS_ERROR;",
          "43:         }",
          "46:                                 &njs_value_undefined, &vm->retval, 1,",
          "47:                                 &vm->retval);",
          "48:     }",
          "52:     return ret;",
          "53: }",
          "",
          "[Removed Lines]",
          "45:         ret = njs_function_call(vm, njs_function(&ctx->capability->reject),",
          "",
          "[Added Lines]",
          "45:         ret = njs_function_call(vm, njs_function(&capability->reject),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "60:     njs_int_t           ret;",
          "61:     njs_value_t         **cur_local, **cur_closures, **cur_temp, *value;",
          "62:     njs_frame_t         *frame;",
          "63:     njs_async_ctx_t     *ctx;",
          "64:     njs_native_frame_t  *top, *async;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:     njs_function_t      *function;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "71:     }",
          "73:     async = ctx->await;",
          "75:     cur_local = vm->levels[NJS_LEVEL_LOCAL];",
          "76:     cur_closures = vm->levels[NJS_LEVEL_CLOSURE];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75:     function = async->function;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "91:     vm->top_frame->retval = &vm->retval;",
          "93:     ret = njs_vmcode_interpreter(vm, ctx->pc);",
          "95:     vm->levels[NJS_LEVEL_LOCAL] = cur_local;",
          "96:     vm->levels[NJS_LEVEL_CLOSURE] = cur_closures;",
          "97:     vm->levels[NJS_LEVEL_TEMP] = cur_temp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95:     function->context = ctx->capability;",
          "96:     function->await = ctx;",
          "100:     function->context = NULL;",
          "101:     function->await = NULL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "103:         ret = njs_function_call(vm, njs_function(&ctx->capability->resolve),",
          "104:                             &njs_value_undefined, &vm->retval, 1, &vm->retval);",
          "108:     } else if (ret == NJS_ERROR) {",
          "109:         if (njs_is_memory_error(vm, &vm->retval)) {",
          "",
          "[Removed Lines]",
          "106:         njs_async_context_free(vm, vm->top_frame);",
          "",
          "[Added Lines]",
          "114:         njs_async_context_free(vm, ctx);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "122:     (void) njs_function_call(vm, njs_function(&ctx->capability->reject),",
          "123:                              &njs_value_undefined, value, 1, &vm->retval);",
          "127:     return NJS_ERROR;",
          "128: }",
          "",
          "[Removed Lines]",
          "125:     njs_async_context_free(vm, vm->top_frame);",
          "",
          "[Added Lines]",
          "133:     njs_async_context_free(vm, ctx);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "143:         (void) njs_function_call(vm, njs_function(&ctx->capability->reject),",
          "144:                                  &njs_value_undefined, value, 1, &vm->retval);",
          "148:         return NJS_ERROR;",
          "149:     }",
          "",
          "[Removed Lines]",
          "146:         njs_async_context_free(vm, vm->top_frame);",
          "",
          "[Added Lines]",
          "154:         njs_async_context_free(vm, ctx);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "157: static void",
          "159: {",
          "164:     njs_mp_free(vm->mem_pool, ctx->capability);",
          "165:     njs_mp_free(vm->mem_pool, ctx);",
          "168: }",
          "",
          "[Removed Lines]",
          "158: njs_async_context_free(njs_vm_t *vm, njs_native_frame_t *frame)",
          "160:     njs_async_ctx_t  *ctx;",
          "162:     ctx = frame->function->context;",
          "167:     frame->function->context = NULL;",
          "",
          "[Added Lines]",
          "166: njs_async_context_free(njs_vm_t *vm, njs_async_ctx_t *ctx)",
          "",
          "---------------"
        ],
        "src/njs_function.c||src/njs_function.c": [
          "File: src/njs_function.c -> src/njs_function.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "427:     njs_value_t            *value, *bound, **new, **temp;",
          "428:     njs_frame_t            *frame;",
          "429:     njs_function_t         *target;",
          "431:     njs_native_frame_t     *native_frame;",
          "432:     njs_function_lambda_t  *lambda;",
          "",
          "[Removed Lines]",
          "430:     njs_async_ctx_t        *ctx;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "454:         lambda = target->u.lambda;",
          "455:     }",
          "468:     args_count = function->args_offset + njs_max(nargs, lambda->nargs);",
          "469:     value_count = args_count + njs_max(args_count, lambda->nlocal);",
          "",
          "[Removed Lines]",
          "457:     if (njs_function_object_type(vm, target) == NJS_OBJ_TYPE_ASYNC_FUNCTION) {",
          "458:         ctx = njs_mp_alloc(vm->mem_pool, sizeof(njs_async_ctx_t));",
          "459:         if (njs_slow_path(ctx == NULL)) {",
          "460:             njs_memory_error(vm);",
          "461:             return NJS_ERROR;",
          "462:         }",
          "464:         ctx->await = NULL;",
          "465:         target->context = ctx;",
          "466:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/njs_value.h||src/njs_value.h": [
          "File: src/njs_value.h -> src/njs_value.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "284:     } u;",
          "286:     void                              *context;",
          "288:     njs_value_t                       *bound;",
          "289: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "287:     void                              *await;",
          "",
          "---------------"
        ],
        "src/njs_vmcode.c||src/njs_vmcode.c": [
          "File: src/njs_vmcode.c -> src/njs_vmcode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1827:     njs_native_frame_t  *active;",
          "1829:     active = &vm->active_frame->native;",
          "1832:     value = njs_scope_valid_value(vm, await->retval);",
          "1833:     if (njs_slow_path(value == NULL)) {",
          "",
          "[Removed Lines]",
          "1830:     ctx = active->function->context;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1841:         return NJS_ERROR;",
          "1842:     }",
          "1845:         size = njs_function_frame_size(active);",
          "1847:         fulfilled = njs_promise_create_function(vm, size);",
          "",
          "[Removed Lines]",
          "1844:     if (ctx->await == NULL) {",
          "",
          "[Added Lines]",
          "1843:     ctx = active->function->await;",
          "1845:     if (ctx == NULL) {",
          "1846:         ctx = njs_mp_alloc(vm->mem_pool, sizeof(njs_async_ctx_t));",
          "1847:         if (njs_slow_path(ctx == NULL)) {",
          "1848:             njs_memory_error(vm);",
          "1849:             return NJS_ERROR;",
          "1850:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1850:         }",
          "1852:         ctx->await = fulfilled->context;",
          "1854:         ret = njs_function_frame_save(vm, ctx->await, NULL);",
          "1855:         if (njs_slow_path(ret != NJS_OK)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1860:         ctx->capability = active->function->context;",
          "1862:         active->function->context = NULL;",
          "",
          "---------------"
        ],
        "test/js/async_await_many_call.js||test/js/async_await_many_call.js": [
          "File: test/js/async_await_many_call.js -> test/js/async_await_many_call.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: async function test(name) {",
          "2:     let k1, k2;",
          "4:     switch (name) {",
          "5:         case \"First\":",
          "6:             k1 = await Promise.resolve(\"SUN\");",
          "7:             k2 = await Promise.resolve(\"MOON\");",
          "8:             break;",
          "10:         case \"Second\":",
          "11:             k1 = await Promise.resolve(\"CAT\");",
          "12:             k2 = await Promise.resolve(\"MOUSE\");",
          "13:             break;",
          "15:         case \"Third\":",
          "16:             k1 = await Promise.resolve(\"MAN\");",
          "17:             k2 = await Promise.resolve(\"WOMAN\");",
          "18:             break;",
          "20:         default:",
          "21:             break;",
          "22:     }",
          "24:     return `${name}: ${k1} ${k2}`;",
          "25: };",
          "27: Promise.all(['First', 'Second', 'Third'].map(v => test(v)))",
          "28: .then(results => {",
          "29:     console.log(results)",
          "30: })",
          "",
          "---------------"
        ],
        "test/njs_expect_test.exp||test/njs_expect_test.exp": [
          "File: test/njs_expect_test.exp -> test/njs_expect_test.exp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1174: njs_run {\"./test/js/async_await_try_resolve.js\"} \\",
          "1175: \"key: resolve\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1177: njs_run {\"./test/js/async_await_many_call.js\"} \\",
          "1178: \"\\\\\\['First: SUN MOON','Second: CAT MOUSE','Third: MAN WOMAN']\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d09868bc71f9a990445959329ad8c1b10d3898f5",
      "candidate_info": {
        "commit_hash": "d09868bc71f9a990445959329ad8c1b10d3898f5",
        "repo": "nginx/njs",
        "commit_url": "https://github.com/nginx/njs/commit/d09868bc71f9a990445959329ad8c1b10d3898f5",
        "files": [
          "src/njs_vmcode.c",
          "test/js/async_exception_in_await.t.js"
        ],
        "message": "Fixed njs_vmcode_interpreter() when await fails.\n\nPreviously, while interpreting a user function, njs_vmcode_interpreter()\nmight return prematurely when an error happens in await instruction.\nThis is not correct because the current frame has to be unwound (or\nexception caught) first.\n\nThe fix is to exit through only 5 appropriate exit points to ensure\nproper unwinding.\n\nThe patch correctly fixes issue reported in 07ef6c1f04f1 (0.7.3).\n\nThis closes #506 issue on Github.",
        "before_after_code_files": [
          "src/njs_vmcode.c||src/njs_vmcode.c",
          "test/js/async_exception_in_await.t.js||test/js/async_exception_in_await.t.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/njs_vmcode.c||src/njs_vmcode.c"
          ],
          "candidate": [
            "src/njs_vmcode.c||src/njs_vmcode.c"
          ]
        }
      },
      "candidate_diff": {
        "src/njs_vmcode.c||src/njs_vmcode.c": [
          "File: src/njs_vmcode.c -> src/njs_vmcode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "856:             case NJS_VMCODE_AWAIT:",
          "857:                 await = (njs_vmcode_await_t *) pc;",
          "859:                 njs_vmcode_debug(vm, pc, \"EXIT AWAIT\");",
          "863:             case NJS_VMCODE_TRY_START:",
          "864:                 ret = njs_vmcode_try_start(vm, value1, value2, pc);",
          "",
          "[Removed Lines]",
          "861:                 return njs_vmcode_await(vm, await, promise_cap, async_ctx);",
          "",
          "[Added Lines]",
          "859:                 ret = njs_vmcode_await(vm, await, promise_cap, async_ctx);",
          "863:                 if (njs_slow_path(ret == NJS_ERROR)) {",
          "864:                     goto error;",
          "865:                 }",
          "867:                 return ret;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1924:     value = njs_scope_valid_value(vm, await->retval);",
          "1925:     if (njs_slow_path(value == NULL)) {",
          "1926:         return NJS_ERROR;",
          "1927:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1932:         njs_internal_error(vm, \"await->retval is invalid\");",
          "",
          "---------------"
        ],
        "test/js/async_exception_in_await.t.js||test/js/async_exception_in_await.t.js": [
          "File: test/js/async_exception_in_await.t.js -> test/js/async_exception_in_await.t.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: includes: []",
          "3: flags: []",
          "6: var p = new Promise(() => 0);",
          "7: Object.defineProperty(p, \"constructor\", {get: () => ({}).a.a});",
          "9: async function g() {",
          "10:     try {",
          "11:         await p;",
          "12:     } catch (e) {",
          "13:     }",
          "14: }",
          "16: function f() {",
          "17:     g();",
          "19:     return 42;",
          "20: }",
          "22: assert.sameValue(f(), 42);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4de9298c33203236a5bc2243f6065f2af7c8dee8",
      "candidate_info": {
        "commit_hash": "4de9298c33203236a5bc2243f6065f2af7c8dee8",
        "repo": "nginx/njs",
        "commit_url": "https://github.com/nginx/njs/commit/4de9298c33203236a5bc2243f6065f2af7c8dee8",
        "files": [
          "auto/clang",
          "auto/computed_goto",
          "auto/help",
          "auto/options",
          "auto/summary",
          "configure",
          "src/njs_clang.h",
          "src/njs_disassembler.c",
          "src/njs_parser.c",
          "src/njs_vmcode.c",
          "src/njs_vmcode.h"
        ],
        "message": "Computed goto support added to vmcode.",
        "before_after_code_files": [
          "src/njs_clang.h||src/njs_clang.h",
          "src/njs_disassembler.c||src/njs_disassembler.c",
          "src/njs_parser.c||src/njs_parser.c",
          "src/njs_vmcode.c||src/njs_vmcode.c",
          "src/njs_vmcode.h||src/njs_vmcode.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/njs_vmcode.c||src/njs_vmcode.c",
            "src/njs_vmcode.h||src/njs_vmcode.h"
          ],
          "candidate": [
            "src/njs_vmcode.c||src/njs_vmcode.c",
            "src/njs_vmcode.h||src/njs_vmcode.h"
          ]
        }
      },
      "candidate_diff": {
        "src/njs_clang.h||src/njs_clang.h": [
          "File: src/njs_clang.h -> src/njs_clang.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "146: #endif",
          "149: #if (NJS_HAVE_GCC_ATTRIBUTE_MALLOC)",
          "150: #define NJS_MALLOC_LIKE    __attribute__((__malloc__))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149: #if (NJS_HAVE_GCC_ATTRIBUTE_FALLTHROUGH)",
          "150: #define NJS_FALLTHROUGH    __attribute__((fallthrough))",
          "152: #else",
          "153: #define NJS_FALLTHROUGH",
          "154: #endif",
          "",
          "---------------"
        ],
        "src/njs_disassembler.c||src/njs_disassembler.c": [
          "File: src/njs_disassembler.c -> src/njs_disassembler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:           njs_str(\"OBJECT          \") },",
          "24:     { NJS_VMCODE_FUNCTION, sizeof(njs_vmcode_function_t),",
          "25:           njs_str(\"FUNCTION        \") },",
          "28:     { NJS_VMCODE_ARGUMENTS, sizeof(njs_vmcode_arguments_t),",
          "29:           njs_str(\"ARGUMENTS       \") },",
          "30:     { NJS_VMCODE_REGEXP, sizeof(njs_vmcode_regexp_t),",
          "",
          "[Removed Lines]",
          "26:     { NJS_VMCODE_THIS, sizeof(njs_vmcode_this_t),",
          "27:           njs_str(\"THIS            \") },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/njs_parser.c||src/njs_parser.c": [
          "File: src/njs_parser.c -> src/njs_parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4527:     njs_parser_next(parser, njs_parser_assignment_expression);",
          "4529:     return njs_parser_expression_node(parser, token, current, NJS_TOKEN_COMMA,",
          "4531:                                        njs_parser_expression_comma);",
          "4532: }",
          "",
          "[Removed Lines]",
          "4530:                                        NJS_VMCODE_NOP,",
          "",
          "[Added Lines]",
          "4530:                                        0,",
          "",
          "---------------"
        ],
        "src/njs_vmcode.c||src/njs_vmcode.c": [
          "File: src/njs_vmcode.c -> src/njs_vmcode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:     njs_vmcode_variable_t        *var;",
          "109:     njs_vmcode_prop_get_t        *get;",
          "110:     njs_vmcode_prop_set_t        *set;",
          "112:     njs_vmcode_prop_next_t       *pnext;",
          "113:     njs_vmcode_test_jump_t       *test_jump;",
          "114:     njs_vmcode_equal_jump_t      *equal;",
          "",
          "[Removed Lines]",
          "111:     njs_vmcode_operation_t       op;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:     njs_vmcode_debug(vm, pc, \"ENTER\");",
          "184:             }",
          "212:             }",
          "646:                 goto error;",
          "647:             }",
          "651:             }",
          "657:         } else {",
          "971:                 goto error;",
          "1081:                 goto error;",
          "1085:                 goto error;",
          "1089:                 goto error;",
          "1093:                 goto error;",
          "1094:             }",
          "1095:         }",
          "1098:     }",
          "1100: error:",
          "",
          "[Removed Lines]",
          "124: next:",
          "126:     for ( ;; ) {",
          "128:         vmcode = (njs_vmcode_generic_t *) pc;",
          "146:         value2 = (njs_value_t *) vmcode->operand1;",
          "147:         value1 = NULL;",
          "149:         switch (vmcode->code.operands) {",
          "151:         case NJS_VMCODE_3OPERANDS:",
          "152:             njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "156:         case NJS_VMCODE_2OPERANDS:",
          "157:             njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "158:         }",
          "160:         op = vmcode->code.operation;",
          "170: #ifdef NJS_DEBUG_OPCODE",
          "171:         if (vm->options.opcode_debug) {",
          "172:             njs_disassemble(pc, NULL, 1, NULL);",
          "173:         }",
          "174: #endif",
          "176:         if (op > NJS_VMCODE_NORET) {",
          "178:             if (op == NJS_VMCODE_MOVE) {",
          "179:                 njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "182:                 pc += sizeof(njs_vmcode_move_t);",
          "183:                 goto next;",
          "186:             if (op == NJS_VMCODE_PROPERTY_GET) {",
          "187:                 get = (njs_vmcode_prop_get_t *) pc;",
          "188:                 njs_vmcode_operand(vm, get->value, retval);",
          "190:                 if (njs_slow_path(!njs_is_index_or_key(value2))) {",
          "191:                     if (njs_slow_path(njs_is_null_or_undefined(value1))) {",
          "192:                         (void) njs_throw_cannot_property(vm, value1, value2,",
          "193:                                                          \"get\");",
          "194:                         goto error;",
          "195:                     }",
          "197:                     ret = njs_value_to_key(vm, &primitive1, value2);",
          "198:                     if (njs_slow_path(ret != NJS_OK)) {",
          "199:                         goto error;",
          "200:                     }",
          "202:                     value2 = &primitive1;",
          "203:                 }",
          "205:                 ret = njs_value_property(vm, value1, value2, retval);",
          "206:                 if (njs_slow_path(ret == NJS_ERROR)) {",
          "207:                     goto error;",
          "208:                 }",
          "210:                 pc += sizeof(njs_vmcode_prop_get_t);",
          "211:                 goto next;",
          "214:             switch (op) {",
          "215:             case NJS_VMCODE_INCREMENT:",
          "216:             case NJS_VMCODE_POST_INCREMENT:",
          "217:             case NJS_VMCODE_DECREMENT:",
          "218:             case NJS_VMCODE_POST_DECREMENT:",
          "219:                 if (njs_slow_path(!njs_is_numeric(value2))) {",
          "220:                     ret = njs_value_to_numeric(vm, value2, &numeric1);",
          "221:                     if (njs_slow_path(ret != NJS_OK)) {",
          "222:                         goto error;",
          "223:                     }",
          "225:                     num = njs_number(&numeric1);",
          "227:                 } else {",
          "228:                     num = njs_number(value2);",
          "229:                 }",
          "231:                 njs_set_number(value1,",
          "232:                            num + (1 - 2 * ((op - NJS_VMCODE_INCREMENT) >> 1)));",
          "234:                 njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "236:                 if (op & 1) {",
          "237:                     njs_set_number(retval, num);",
          "239:                 } else {",
          "241:                 }",
          "243:                 pc += sizeof(njs_vmcode_3addr_t);",
          "244:                 goto next;",
          "246:             case NJS_VMCODE_GLOBAL_GET:",
          "247:                 get = (njs_vmcode_prop_get_t *) pc;",
          "248:                 njs_vmcode_operand(vm, get->value, retval);",
          "250:                 ret = njs_value_property(vm, value1, value2, retval);",
          "251:                 if (njs_slow_path(ret == NJS_ERROR)) {",
          "252:                     goto error;",
          "253:                 }",
          "255:                 pc += sizeof(njs_vmcode_prop_get_t);",
          "257:                 if (ret == NJS_OK) {",
          "258:                     pc += sizeof(njs_vmcode_error_t);",
          "259:                 }",
          "261:                 goto next;",
          "267:             case NJS_VMCODE_TRY_RETURN:",
          "268:                 njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "271:                 try_return = (njs_vmcode_try_return_t *) pc;",
          "272:                 pc += try_return->offset;",
          "273:                 goto next;",
          "275:             case NJS_VMCODE_LESS:",
          "276:             case NJS_VMCODE_GREATER:",
          "277:             case NJS_VMCODE_LESS_OR_EQUAL:",
          "278:             case NJS_VMCODE_GREATER_OR_EQUAL:",
          "279:             case NJS_VMCODE_ADDITION:",
          "280:                 if (njs_slow_path(!njs_is_primitive(value1))) {",
          "281:                     hint = (op == NJS_VMCODE_ADDITION) && njs_is_date(value1);",
          "282:                     ret = njs_value_to_primitive(vm, &primitive1, value1, hint);",
          "283:                     if (ret != NJS_OK) {",
          "284:                         goto error;",
          "285:                     }",
          "287:                     value1 = &primitive1;",
          "288:                 }",
          "290:                 if (njs_slow_path(!njs_is_primitive(value2))) {",
          "291:                     hint = (op == NJS_VMCODE_ADDITION) && njs_is_date(value2);",
          "292:                     ret = njs_value_to_primitive(vm, &primitive2, value2, hint);",
          "293:                     if (ret != NJS_OK) {",
          "294:                         goto error;",
          "295:                     }",
          "297:                     value2 = &primitive2;",
          "298:                 }",
          "300:                 if (njs_slow_path(njs_is_symbol(value1)",
          "301:                                   || njs_is_symbol(value2)))",
          "302:                 {",
          "303:                     njs_symbol_conversion_failed(vm,",
          "304:                         (op == NJS_VMCODE_ADDITION) &&",
          "305:                         (njs_is_string(value1) || njs_is_string(value2)));",
          "307:                     goto error;",
          "308:                 }",
          "310:                 njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "312:                 if (op == NJS_VMCODE_ADDITION) {",
          "313:                     if (njs_fast_path(njs_is_numeric(value1)",
          "314:                                       && njs_is_numeric(value2)))",
          "315:                     {",
          "316:                         njs_set_number(retval, njs_number(value1)",
          "317:                                                + njs_number(value2));",
          "318:                         pc += sizeof(njs_vmcode_3addr_t);",
          "319:                         goto next;",
          "320:                     }",
          "322:                     if (njs_is_string(value1)) {",
          "323:                         s1 = value1;",
          "324:                         s2 = &dst;",
          "325:                         src = value2;",
          "327:                     } else {",
          "328:                         s1 = &dst;",
          "329:                         s2 = value2;",
          "330:                         src = value1;",
          "331:                     }",
          "333:                     ret = njs_primitive_value_to_string(vm, &dst, src);",
          "334:                     if (njs_slow_path(ret != NJS_OK)) {",
          "335:                         goto error;",
          "336:                     }",
          "338:                     ret = njs_string_concat(vm, s1, s2);",
          "339:                     if (njs_slow_path(ret == NJS_ERROR)) {",
          "340:                         goto error;",
          "341:                     }",
          "345:                     pc += ret;",
          "346:                     goto next;",
          "347:                 }",
          "349:                 if ((uint8_t) (op - NJS_VMCODE_GREATER) < 2) {",
          "351:                     src = value1;",
          "352:                     value1 = value2;",
          "353:                     value2 = src;",
          "354:                 }",
          "356:                 ret = njs_primitive_values_compare(vm, value1, value2);",
          "358:                 if (op < NJS_VMCODE_LESS_OR_EQUAL) {",
          "359:                     ret = ret > 0;",
          "361:                 } else {",
          "362:                     ret = ret == 0;",
          "363:                 }",
          "365:                 njs_set_boolean(retval, ret);",
          "367:                 pc += sizeof(njs_vmcode_3addr_t);",
          "368:                 goto next;",
          "370:             case NJS_VMCODE_EQUAL:",
          "371:             case NJS_VMCODE_NOT_EQUAL:",
          "372:                 ret = njs_values_equal(vm, value1, value2);",
          "373:                 if (njs_slow_path(ret < 0)) {",
          "374:                     goto error;",
          "375:                 }",
          "377:                 ret ^= op - NJS_VMCODE_EQUAL;",
          "379:                 njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "380:                 njs_set_boolean(retval, ret);",
          "382:                 pc += sizeof(njs_vmcode_3addr_t);",
          "383:                 goto next;",
          "385:             case NJS_VMCODE_SUBSTRACTION:",
          "386:             case NJS_VMCODE_MULTIPLICATION:",
          "387:             case NJS_VMCODE_EXPONENTIATION:",
          "388:             case NJS_VMCODE_DIVISION:",
          "389:             case NJS_VMCODE_REMAINDER:",
          "390:             case NJS_VMCODE_BITWISE_AND:",
          "391:             case NJS_VMCODE_BITWISE_OR:",
          "392:             case NJS_VMCODE_BITWISE_XOR:",
          "393:             case NJS_VMCODE_LEFT_SHIFT:",
          "394:             case NJS_VMCODE_RIGHT_SHIFT:",
          "395:             case NJS_VMCODE_UNSIGNED_RIGHT_SHIFT:",
          "396:                 if (njs_slow_path(!njs_is_numeric(value1))) {",
          "397:                     ret = njs_value_to_numeric(vm, value1, &numeric1);",
          "398:                     if (njs_slow_path(ret != NJS_OK)) {",
          "399:                         goto error;",
          "400:                     }",
          "402:                     value1 = &numeric1;",
          "403:                 }",
          "405:                 if (njs_slow_path(!njs_is_numeric(value2))) {",
          "406:                     ret = njs_value_to_numeric(vm, value2, &numeric2);",
          "407:                     if (njs_slow_path(ret != NJS_OK)) {",
          "408:                         goto error;",
          "409:                     }",
          "411:                     value2 = &numeric2;",
          "412:                 }",
          "414:                 num = njs_number(value1);",
          "416:                 njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "417:                 pc += sizeof(njs_vmcode_3addr_t);",
          "419:                 switch (op) {",
          "420:                 case NJS_VMCODE_SUBSTRACTION:",
          "421:                     num -= njs_number(value2);",
          "422:                     break;",
          "424:                 case NJS_VMCODE_MULTIPLICATION:",
          "425:                     num *= njs_number(value2);",
          "426:                     break;",
          "428:                 case NJS_VMCODE_EXPONENTIATION:",
          "429:                     exponent = njs_number(value2);",
          "436:                     valid = njs_expect(1, fabs(num) != 1",
          "437:                                           || (!isnan(exponent)",
          "438:                                               && !isinf(exponent)));",
          "440:                     num = valid ? pow(num, exponent) : NAN;",
          "441:                     break;",
          "443:                 case NJS_VMCODE_DIVISION:",
          "444:                     num /= njs_number(value2);",
          "445:                     break;",
          "447:                 case NJS_VMCODE_REMAINDER:",
          "448:                     num = fmod(num, njs_number(value2));",
          "449:                     break;",
          "451:                 case NJS_VMCODE_BITWISE_AND:",
          "452:                 case NJS_VMCODE_BITWISE_OR:",
          "453:                 case NJS_VMCODE_BITWISE_XOR:",
          "454:                     i32 = njs_number_to_int32(njs_number(value2));",
          "456:                     switch (op) {",
          "457:                     case NJS_VMCODE_BITWISE_AND:",
          "458:                         i32 &= njs_number_to_int32(num);",
          "459:                         break;",
          "461:                     case NJS_VMCODE_BITWISE_OR:",
          "462:                         i32 |= njs_number_to_int32(num);",
          "463:                         break;",
          "465:                     case NJS_VMCODE_BITWISE_XOR:",
          "466:                         i32 ^= njs_number_to_int32(num);",
          "467:                         break;",
          "468:                     }",
          "470:                     njs_set_int32(retval, i32);",
          "471:                     goto next;",
          "473:                 default:",
          "474:                     u32 = njs_number_to_uint32(njs_number(value2)) & 0x1f;",
          "476:                     switch (op) {",
          "477:                     case NJS_VMCODE_LEFT_SHIFT:",
          "478:                     case NJS_VMCODE_RIGHT_SHIFT:",
          "479:                         i32 = njs_number_to_int32(num);",
          "481:                         if (op == NJS_VMCODE_LEFT_SHIFT) {",
          "483:                             i32 = (uint32_t) i32 << u32;",
          "484:                         } else {",
          "485:                             i32 >>= u32;",
          "486:                         }",
          "488:                         njs_set_int32(retval, i32);",
          "489:                         break;",
          "492:                         njs_set_uint32(retval,",
          "493:                                        njs_number_to_uint32(num) >> u32);",
          "494:                     }",
          "496:                     goto next;",
          "497:                 }",
          "499:                 njs_set_number(retval, num);",
          "500:                 goto next;",
          "502:             case NJS_VMCODE_OBJECT_COPY:",
          "503:                 ret = njs_vmcode_object_copy(vm, value1, value2);",
          "504:                 break;",
          "506:             case NJS_VMCODE_TEMPLATE_LITERAL:",
          "507:                 ret = njs_vmcode_template_literal(vm, value1, value2);",
          "508:                 break;",
          "510:             case NJS_VMCODE_PROPERTY_IN:",
          "511:                 ret = njs_vmcode_property_in(vm, value1, value2);",
          "512:                 break;",
          "514:             case NJS_VMCODE_PROPERTY_DELETE:",
          "515:                 ret = njs_value_property_delete(vm, value1, value2, NULL, 1);",
          "516:                 if (njs_fast_path(ret != NJS_ERROR)) {",
          "517:                     vm->retval = njs_value_true;",
          "519:                     ret = sizeof(njs_vmcode_3addr_t);",
          "520:                 }",
          "522:                 break;",
          "524:             case NJS_VMCODE_PROPERTY_FOREACH:",
          "525:                 ret = njs_vmcode_property_foreach(vm, value1, value2, pc);",
          "526:                 break;",
          "528:             case NJS_VMCODE_STRICT_EQUAL:",
          "529:             case NJS_VMCODE_STRICT_NOT_EQUAL:",
          "530:                 ret = njs_values_strict_equal(value1, value2);",
          "532:                 ret ^= op - NJS_VMCODE_STRICT_EQUAL;",
          "534:                 njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "535:                 njs_set_boolean(retval, ret);",
          "537:                 pc += sizeof(njs_vmcode_3addr_t);",
          "538:                 goto next;",
          "540:             case NJS_VMCODE_TEST_IF_TRUE:",
          "541:             case NJS_VMCODE_TEST_IF_FALSE:",
          "542:             case NJS_VMCODE_COALESCE:",
          "543:                 if (op == NJS_VMCODE_COALESCE) {",
          "544:                     ret = !njs_is_null_or_undefined(value1);",
          "546:                 } else {",
          "547:                     ret = njs_is_true(value1);",
          "548:                     ret ^= op - NJS_VMCODE_TEST_IF_TRUE;",
          "549:                 }",
          "551:                 if (ret) {",
          "552:                     test_jump = (njs_vmcode_test_jump_t *) pc;",
          "553:                     ret = test_jump->offset;",
          "555:                 } else {",
          "556:                     ret = sizeof(njs_vmcode_3addr_t);",
          "557:                 }",
          "559:                 njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "562:                 pc += ret;",
          "563:                 goto next;",
          "565:             case NJS_VMCODE_UNARY_PLUS:",
          "566:             case NJS_VMCODE_UNARY_NEGATION:",
          "567:             case NJS_VMCODE_BITWISE_NOT:",
          "568:                 if (njs_slow_path(!njs_is_numeric(value1))) {",
          "569:                     ret = njs_value_to_numeric(vm, value1, &numeric1);",
          "570:                     if (njs_slow_path(ret != NJS_OK)) {",
          "571:                         goto error;",
          "572:                     }",
          "574:                     value1 = &numeric1;",
          "575:                 }",
          "577:                 num = njs_number(value1);",
          "578:                 njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "580:                 switch (op) {",
          "581:                 case NJS_VMCODE_UNARY_NEGATION:",
          "582:                     num = -num;",
          "585:                 case NJS_VMCODE_UNARY_PLUS:",
          "586:                     njs_set_number(retval, num);",
          "587:                     break;",
          "589:                 case NJS_VMCODE_BITWISE_NOT:",
          "590:                     njs_set_int32(retval, ~njs_number_to_uint32(num));",
          "591:                 }",
          "593:                 pc += sizeof(njs_vmcode_2addr_t);",
          "594:                 goto next;",
          "596:             case NJS_VMCODE_LOGICAL_NOT:",
          "597:                 njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "598:                 njs_set_boolean(retval, !njs_is_true(value1));",
          "600:                 pc += sizeof(njs_vmcode_2addr_t);",
          "601:                 goto next;",
          "603:             case NJS_VMCODE_OBJECT:",
          "604:                 ret = njs_vmcode_object(vm);",
          "605:                 break;",
          "607:             case NJS_VMCODE_ARRAY:",
          "608:                 ret = njs_vmcode_array(vm, pc);",
          "609:                 break;",
          "611:             case NJS_VMCODE_FUNCTION:",
          "612:                 ret = njs_vmcode_function(vm, pc);",
          "613:                 break;",
          "615:             case NJS_VMCODE_REGEXP:",
          "616:                 ret = njs_vmcode_regexp(vm, pc);",
          "617:                 break;",
          "619:             case NJS_VMCODE_INSTANCE_OF:",
          "620:                 ret = njs_vmcode_instance_of(vm, value1, value2);",
          "621:                 break;",
          "623:             case NJS_VMCODE_TYPEOF:",
          "624:                 ret = njs_vmcode_typeof(vm, value1, value2);",
          "625:                 break;",
          "627:             case NJS_VMCODE_VOID:",
          "628:                 njs_set_undefined(&vm->retval);",
          "630:                 ret = sizeof(njs_vmcode_2addr_t);",
          "631:                 break;",
          "633:             case NJS_VMCODE_DELETE:",
          "634:                 njs_release(vm, value1);",
          "635:                 vm->retval = njs_value_true;",
          "637:                 ret = sizeof(njs_vmcode_2addr_t);",
          "638:                 break;",
          "640:             case NJS_VMCODE_DEBUGGER:",
          "641:                 ret = njs_vmcode_debugger(vm);",
          "642:                 break;",
          "644:             default:",
          "645:                 njs_internal_error(vm, \"%d has retval\", op);",
          "649:             if (njs_slow_path(ret < 0 && ret >= NJS_PREEMPT)) {",
          "650:                 break;",
          "653:             njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "654:             njs_release(vm, retval);",
          "659:             switch (op) {",
          "660:             case NJS_VMCODE_PUT_ARG:",
          "661:                 put_arg = (njs_vmcode_1addr_t *) pc;",
          "662:                 native = vm->top_frame;",
          "664:                 value1 = &native->arguments[native->put_args++];",
          "665:                 njs_vmcode_operand(vm, put_arg->index, value2);",
          "667:                 njs_value_assign(value1, value2);",
          "669:                 ret = sizeof(njs_vmcode_1addr_t);",
          "670:                 break;",
          "672:             case NJS_VMCODE_STOP:",
          "673:                 njs_vmcode_operand(vm, (njs_index_t) value2, value2);",
          "674:                 vm->retval = *value2;",
          "676:                 njs_vmcode_debug(vm, pc, \"EXIT STOP\");",
          "678:                 return NJS_OK;",
          "680:             case NJS_VMCODE_JUMP:",
          "681:                 ret = (njs_jump_off_t) value2;",
          "682:                 break;",
          "684:             case NJS_VMCODE_PROPERTY_SET:",
          "685:                 set = (njs_vmcode_prop_set_t *) pc;",
          "686:                 njs_vmcode_operand(vm, set->value, retval);",
          "688:                 if (njs_slow_path(!njs_is_index_or_key(value2))) {",
          "689:                     if (njs_slow_path(njs_is_null_or_undefined(value1))) {",
          "690:                         (void) njs_throw_cannot_property(vm, value1, value2,",
          "691:                                                          \"set\");",
          "692:                         goto error;",
          "693:                     }",
          "695:                     njs_value_assign(&primitive1, value1);",
          "696:                     ret = njs_value_to_key(vm, &primitive2, value2);",
          "697:                     if (njs_slow_path(ret != NJS_OK)) {",
          "698:                         goto error;",
          "699:                     }",
          "701:                     value1 = &primitive1;",
          "702:                     value2 = &primitive2;",
          "703:                 }",
          "705:                 ret = njs_value_property_set(vm, value1, value2, retval);",
          "706:                 if (njs_slow_path(ret == NJS_ERROR)) {",
          "707:                     goto error;",
          "708:                 }",
          "710:                 ret = sizeof(njs_vmcode_prop_set_t);",
          "711:                 break;",
          "713:             case NJS_VMCODE_PROPERTY_ACCESSOR:",
          "714:                 accessor = (njs_vmcode_prop_accessor_t *) pc;",
          "715:                 njs_vmcode_operand(vm, accessor->value, function);",
          "717:                 ret = njs_value_to_key(vm, &name, value2);",
          "718:                 if (njs_slow_path(ret != NJS_OK)) {",
          "719:                     njs_internal_error(vm, \"failed conversion of type \\\"%s\\\" \"",
          "720:                                        \"to string while property define\",",
          "721:                                        njs_type_string(value2->type));",
          "722:                     goto error;",
          "723:                 }",
          "725:                 ret = njs_object_prop_define(vm, value1, &name, function,",
          "726:                                              accessor->type);",
          "727:                 if (njs_slow_path(ret != NJS_OK)) {",
          "728:                     goto error;",
          "729:                 }",
          "731:                 ret = sizeof(njs_vmcode_prop_accessor_t);",
          "732:                 break;",
          "734:             case NJS_VMCODE_IF_TRUE_JUMP:",
          "735:             case NJS_VMCODE_IF_FALSE_JUMP:",
          "736:                 ret = njs_is_true(value1);",
          "738:                 ret ^= op - NJS_VMCODE_IF_TRUE_JUMP;",
          "740:                 ret = ret ? (njs_jump_off_t) value2",
          "741:                           : (njs_jump_off_t) sizeof(njs_vmcode_cond_jump_t);",
          "743:                 break;",
          "745:             case NJS_VMCODE_IF_EQUAL_JUMP:",
          "746:                 if (njs_values_strict_equal(value1, value2)) {",
          "747:                     equal = (njs_vmcode_equal_jump_t *) pc;",
          "748:                     ret = equal->offset;",
          "750:                 } else {",
          "751:                     ret = sizeof(njs_vmcode_3addr_t);",
          "752:                 }",
          "754:                 break;",
          "756:             case NJS_VMCODE_PROPERTY_INIT:",
          "757:                 set = (njs_vmcode_prop_set_t *) pc;",
          "758:                 njs_vmcode_operand(vm, set->value, retval);",
          "759:                 ret = njs_vmcode_property_init(vm, value1, value2, retval);",
          "760:                 if (njs_slow_path(ret == NJS_ERROR)) {",
          "761:                     goto error;",
          "762:                 }",
          "764:                 break;",
          "766:             case NJS_VMCODE_RETURN:",
          "767:                 njs_vmcode_operand(vm, (njs_index_t) value2, value2);",
          "769:                 njs_vmcode_debug(vm, pc, \"EXIT RETURN\");",
          "771:                 return njs_vmcode_return(vm, NULL, value2);",
          "773:             case NJS_VMCODE_FUNCTION_COPY:",
          "774:                 fcopy = (njs_vmcode_function_copy_t *) pc;",
          "775:                 ret = njs_vmcode_function_copy(vm, fcopy->function,",
          "776:                                                fcopy->retval);",
          "777:                 if (njs_slow_path(ret == NJS_ERROR)) {",
          "778:                     goto error;",
          "779:                 }",
          "781:                 break;",
          "783:             case NJS_VMCODE_FUNCTION_FRAME:",
          "784:                 function_frame = (njs_vmcode_function_frame_t *) pc;",
          "788:                 ret = njs_function_frame_create(vm, value1,",
          "789:                                                 &njs_value_undefined,",
          "790:                                                 (uintptr_t) value2,",
          "791:                                                 function_frame->ctor);",
          "793:                 if (njs_slow_path(ret != NJS_OK)) {",
          "794:                     goto error;",
          "795:                 }",
          "797:                 ret = sizeof(njs_vmcode_function_frame_t);",
          "798:                 break;",
          "800:             case NJS_VMCODE_METHOD_FRAME:",
          "801:                 method_frame = (njs_vmcode_method_frame_t *) pc;",
          "803:                 if (njs_slow_path(!njs_is_key(value2))) {",
          "804:                     if (njs_slow_path(njs_is_null_or_undefined(value1))) {",
          "805:                         (void) njs_throw_cannot_property(vm, value1, value2,",
          "806:                                                          \"get\");",
          "807:                         goto error;",
          "808:                     }",
          "810:                     ret = njs_value_to_key(vm, &primitive1, value2);",
          "811:                     if (njs_slow_path(ret != NJS_OK)) {",
          "812:                         goto error;",
          "813:                     }",
          "815:                     value2 = &primitive1;",
          "816:                 }",
          "818:                 ret = njs_value_property(vm, value1, value2, &dst);",
          "819:                 if (njs_slow_path(ret == NJS_ERROR)) {",
          "820:                     goto error;",
          "821:                 }",
          "823:                 if (njs_slow_path(!njs_is_function(&dst))) {",
          "824:                     ret = njs_value_to_key(vm, &dst, value2);",
          "825:                     if (njs_slow_path(ret != NJS_OK)) {",
          "826:                         goto error;",
          "827:                     }",
          "829:                     njs_key_string_get(vm, &dst, &string);",
          "830:                     njs_type_error(vm,",
          "831:                                \"(intermediate value)[\\\"%V\\\"] is not a function\",",
          "832:                                &string);",
          "833:                     goto error;",
          "834:                 }",
          "836:                 ret = njs_function_frame_create(vm, &dst, value1,",
          "837:                                                 method_frame->nargs,",
          "838:                                                 method_frame->ctor);",
          "840:                 if (njs_slow_path(ret != NJS_OK)) {",
          "841:                     goto error;",
          "842:                 }",
          "844:                 ret = sizeof(njs_vmcode_method_frame_t);",
          "845:                 break;",
          "847:             case NJS_VMCODE_FUNCTION_CALL:",
          "848:                 vm->active_frame->native.pc = pc;",
          "850:                 njs_vmcode_operand(vm, (njs_index_t) value2, value2);",
          "852:                 ret = njs_function_frame_invoke(vm, value2);",
          "853:                 if (njs_slow_path(ret == NJS_ERROR)) {",
          "854:                     goto error;",
          "855:                 }",
          "857:                 njs_vmcode_debug(vm, pc, \"RESUME\");",
          "859:                 ret = sizeof(njs_vmcode_function_call_t);",
          "860:                 break;",
          "862:             case NJS_VMCODE_PROPERTY_NEXT:",
          "863:                 pnext = (njs_vmcode_prop_next_t *) pc;",
          "864:                 retval = njs_scope_value(vm, pnext->retval);",
          "866:                 njs_assert(njs_is_data(value2, NJS_DATA_TAG_FOREACH_NEXT));",
          "867:                 next = njs_data(value2);",
          "869:                 if (next->index < next->array->length) {",
          "872:                     ret = pnext->offset;",
          "873:                     break;",
          "874:                 }",
          "876:                 njs_mp_free(vm->mem_pool, next);",
          "878:                 ret = sizeof(njs_vmcode_prop_next_t);",
          "879:                 break;",
          "881:             case NJS_VMCODE_ARGUMENTS:",
          "882:                 ret = njs_vmcode_arguments(vm, pc);",
          "883:                 if (njs_slow_path(ret == NJS_ERROR)) {",
          "884:                     goto error;",
          "885:                 }",
          "887:                 break;",
          "889:             case NJS_VMCODE_TO_PROPERTY_KEY:",
          "890:             case NJS_VMCODE_TO_PROPERTY_KEY_CHK:",
          "891:                 njs_vmcode_operand(vm, (njs_index_t) value2, retval);",
          "893:                 if (op == NJS_VMCODE_TO_PROPERTY_KEY_CHK) {",
          "894:                     njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "896:                     if (njs_slow_path(njs_is_null_or_undefined(value2))) {",
          "897:                         (void) njs_throw_cannot_property(vm, value2, value1,",
          "898:                                                          \"get\");",
          "899:                         goto error;",
          "900:                     }",
          "901:                 }",
          "903:                 ret = njs_value_to_key(vm, retval, value1);",
          "904:                 if (njs_fast_path(ret == NJS_ERROR)) {",
          "905:                     goto error;",
          "906:                 }",
          "908:                 ret = (op == NJS_VMCODE_TO_PROPERTY_KEY)",
          "909:                        ? sizeof(njs_vmcode_2addr_t)",
          "910:                        : sizeof(njs_vmcode_3addr_t);",
          "911:                 break;",
          "913:             case NJS_VMCODE_SET_FUNCTION_NAME:",
          "914:                 njs_vmcode_operand(vm, (njs_index_t) value2, value2);",
          "916:                 njs_assert(njs_is_function(value2));",
          "918:                 ret = njs_function_name_set(vm, njs_function(value2), value1,",
          "919:                                             NULL);",
          "920:                 if (njs_slow_path(ret == NJS_ERROR)) {",
          "921:                     return ret;",
          "922:                 }",
          "924:                 ret = sizeof(njs_vmcode_2addr_t);",
          "925:                 break;",
          "927:             case NJS_VMCODE_PROTO_INIT:",
          "928:                 set = (njs_vmcode_prop_set_t *) pc;",
          "929:                 njs_vmcode_operand(vm, set->value, retval);",
          "930:                 ret = njs_vmcode_proto_init(vm, value1, value2, retval);",
          "931:                 if (njs_slow_path(ret == NJS_ERROR)) {",
          "932:                     goto error;",
          "933:                 }",
          "935:                 break;",
          "937:             case NJS_VMCODE_IMPORT:",
          "938:                 import = (njs_vmcode_import_t *) pc;",
          "939:                 retval = njs_scope_value(vm, import->retval);",
          "940:                 ret = njs_vmcode_import(vm, import->module, retval);",
          "941:                 if (njs_slow_path(ret == NJS_ERROR)) {",
          "942:                     goto error;",
          "943:                 }",
          "945:                 break;",
          "947:             case NJS_VMCODE_AWAIT:",
          "948:                 await = (njs_vmcode_await_t *) pc;",
          "950:                 ret = njs_vmcode_await(vm, await, promise_cap, async_ctx);",
          "952:                 njs_vmcode_debug(vm, pc, \"EXIT AWAIT\");",
          "954:                 if (njs_slow_path(ret == NJS_ERROR)) {",
          "955:                     goto error;",
          "956:                 }",
          "958:                 return ret;",
          "960:             case NJS_VMCODE_TRY_START:",
          "961:                 ret = njs_vmcode_try_start(vm, value1, value2, pc);",
          "962:                 if (njs_slow_path(ret == NJS_ERROR)) {",
          "963:                     goto error;",
          "964:                 }",
          "966:                 break;",
          "968:             case NJS_VMCODE_THROW:",
          "969:                 njs_vmcode_operand(vm, (njs_index_t) value2, value2);",
          "970:                 vm->retval = *value2;",
          "973:             case NJS_VMCODE_TRY_BREAK:",
          "974:                 try_trampoline = (njs_vmcode_try_trampoline_t *) pc;",
          "975:                 value1 = njs_scope_value(vm, try_trampoline->exit_value);",
          "977:                 ret = njs_vmcode_try_break(vm, value1, value2);",
          "978:                 break;",
          "980:             case NJS_VMCODE_TRY_CONTINUE:",
          "981:                 try_trampoline = (njs_vmcode_try_trampoline_t *) pc;",
          "982:                 value1 = njs_scope_value(vm, try_trampoline->exit_value);",
          "984:                 ret = njs_vmcode_try_continue(vm, value1, value2);",
          "985:                 break;",
          "987:             case NJS_VMCODE_TRY_END:",
          "988:                 ret = njs_vmcode_try_end(vm, value1, value2);",
          "989:                 break;",
          "999:             case NJS_VMCODE_CATCH:",
          "1002:                 if ((njs_jump_off_t) value2 == sizeof(njs_vmcode_catch_t)) {",
          "1003:                     ret = njs_vmcode_try_end(vm, value1, value2);",
          "1005:                 } else {",
          "1006:                     frame = (njs_frame_t *) vm->top_frame;",
          "1007:                     frame->exception.catch = pc + (njs_jump_off_t) value2;",
          "1008:                     ret = sizeof(njs_vmcode_catch_t);",
          "1009:                 }",
          "1011:                 break;",
          "1013:             case NJS_VMCODE_FINALLY:",
          "1014:                 finally = (njs_vmcode_finally_t *) pc;",
          "1015:                 value1 = njs_scope_value(vm, finally->exit_value);",
          "1017:                 ret = njs_vmcode_finally(vm, value1, value2, pc);",
          "1019:                 switch (ret) {",
          "1020:                 case NJS_OK:",
          "1022:                     njs_vmcode_debug(vm, pc, \"EXIT FINALLY\");",
          "1024:                     return NJS_OK;",
          "1025:                 case NJS_ERROR:",
          "1026:                     goto error;",
          "1027:                 }",
          "1029:                 break;",
          "1031:             case NJS_VMCODE_LET:",
          "1032:                 var = (njs_vmcode_variable_t *) pc;",
          "1033:                 value1 = njs_scope_value(vm, var->dst);",
          "1035:                 if (njs_is_valid(value1)) {",
          "1036:                     value1 = njs_mp_alloc(vm->mem_pool, sizeof(njs_value_t));",
          "1037:                     if (njs_slow_path(value1 == NULL)) {",
          "1038:                         njs_memory_error(vm);",
          "1039:                         goto error;",
          "1040:                     }",
          "1042:                     njs_scope_value_set(vm, var->dst, value1);",
          "1043:                 }",
          "1045:                 njs_set_undefined(value1);",
          "1047:                 ret = sizeof(njs_vmcode_variable_t);",
          "1048:                 break;",
          "1050:             case NJS_VMCODE_LET_UPDATE:",
          "1051:                 var = (njs_vmcode_variable_t *) pc;",
          "1052:                 value2 = njs_scope_value(vm, var->dst);",
          "1054:                 value1 = njs_mp_alloc(vm->mem_pool, sizeof(njs_value_t));",
          "1055:                 if (njs_slow_path(value1 == NULL)) {",
          "1056:                     njs_memory_error(vm);",
          "1057:                     goto error;",
          "1058:                 }",
          "1062:                 njs_scope_value_set(vm, var->dst, value1);",
          "1064:                 ret = sizeof(njs_vmcode_variable_t);",
          "1065:                 break;",
          "1067:             case NJS_VMCODE_INITIALIZATION_TEST:",
          "1068:                 var = (njs_vmcode_variable_t *) pc;",
          "1069:                 value1 = njs_scope_value(vm, var->dst);",
          "1071:                 if (njs_is_valid(value1)) {",
          "1072:                     ret = sizeof(njs_vmcode_variable_t);",
          "1073:                     break;",
          "1074:                 }",
          "1078:             case NJS_VMCODE_NOT_INITIALIZED:",
          "1079:                 njs_reference_error(vm, \"cannot access variable \"",
          "1080:                                         \"before initialization\");",
          "1083:             case NJS_VMCODE_ERROR:",
          "1084:                 njs_vmcode_error(vm, pc);",
          "1087:             case NJS_VMCODE_ASSIGNMENT_ERROR:",
          "1088:                 njs_type_error(vm, \"assignment to constant variable\");",
          "1091:             default:",
          "1092:                 njs_internal_error(vm, \"%d has NO retval\", op);",
          "1097:         pc += ret;",
          "",
          "[Added Lines]",
          "123: #if !defined(NJS_HAVE_COMPUTED_GOTO)",
          "124:     #define SWITCH(op)      switch (op)",
          "125:     #define CASE(op)        case op",
          "126:     #define BREAK           pc += ret; NEXT",
          "128:     #define NEXT            vmcode = (njs_vmcode_generic_t *) pc;             \\",
          "129:                             goto next",
          "131:     #define NEXT_LBL        next:",
          "132:     #define FALLTHROUGH     NJS_FALLTHROUGH",
          "134: #else",
          "135:     #define SWITCH(op)      goto *switch_tbl[(uint8_t) op];",
          "136:     #define CASE(op)        case_ ## op",
          "137:     #define BREAK           pc += ret; NEXT",
          "139:     #define NEXT            vmcode = (njs_vmcode_generic_t *) pc;             \\",
          "140:                             SWITCH (vmcode->code.operation)",
          "142:     #define NEXT_LBL",
          "143:     #define FALLTHROUGH",
          "145:     #define NJS_GOTO_ROW(name)   [ (uint8_t) name ] = &&case_ ## name",
          "147:     static const void * const switch_tbl[NJS_VMCODES] = {",
          "149:         NJS_GOTO_ROW(NJS_VMCODE_PUT_ARG),",
          "150:         NJS_GOTO_ROW(NJS_VMCODE_STOP),",
          "151:         NJS_GOTO_ROW(NJS_VMCODE_JUMP),",
          "152:         NJS_GOTO_ROW(NJS_VMCODE_PROPERTY_SET),",
          "153:         NJS_GOTO_ROW(NJS_VMCODE_PROPERTY_ACCESSOR),",
          "154:         NJS_GOTO_ROW(NJS_VMCODE_IF_TRUE_JUMP),",
          "155:         NJS_GOTO_ROW(NJS_VMCODE_IF_FALSE_JUMP),",
          "156:         NJS_GOTO_ROW(NJS_VMCODE_IF_EQUAL_JUMP),",
          "157:         NJS_GOTO_ROW(NJS_VMCODE_PROPERTY_INIT),",
          "158:         NJS_GOTO_ROW(NJS_VMCODE_RETURN),",
          "159:         NJS_GOTO_ROW(NJS_VMCODE_FUNCTION_COPY),",
          "160:         NJS_GOTO_ROW(NJS_VMCODE_FUNCTION_FRAME),",
          "161:         NJS_GOTO_ROW(NJS_VMCODE_METHOD_FRAME),",
          "162:         NJS_GOTO_ROW(NJS_VMCODE_FUNCTION_CALL),",
          "163:         NJS_GOTO_ROW(NJS_VMCODE_PROPERTY_NEXT),",
          "164:         NJS_GOTO_ROW(NJS_VMCODE_ARGUMENTS),",
          "165:         NJS_GOTO_ROW(NJS_VMCODE_PROTO_INIT),",
          "166:         NJS_GOTO_ROW(NJS_VMCODE_TO_PROPERTY_KEY),",
          "167:         NJS_GOTO_ROW(NJS_VMCODE_TO_PROPERTY_KEY_CHK),",
          "168:         NJS_GOTO_ROW(NJS_VMCODE_SET_FUNCTION_NAME),",
          "169:         NJS_GOTO_ROW(NJS_VMCODE_IMPORT),",
          "170:         NJS_GOTO_ROW(NJS_VMCODE_AWAIT),",
          "171:         NJS_GOTO_ROW(NJS_VMCODE_TRY_START),",
          "172:         NJS_GOTO_ROW(NJS_VMCODE_THROW),",
          "173:         NJS_GOTO_ROW(NJS_VMCODE_TRY_BREAK),",
          "174:         NJS_GOTO_ROW(NJS_VMCODE_TRY_CONTINUE),",
          "175:         NJS_GOTO_ROW(NJS_VMCODE_TRY_END),",
          "176:         NJS_GOTO_ROW(NJS_VMCODE_CATCH),",
          "177:         NJS_GOTO_ROW(NJS_VMCODE_FINALLY),",
          "178:         NJS_GOTO_ROW(NJS_VMCODE_LET),",
          "179:         NJS_GOTO_ROW(NJS_VMCODE_LET_UPDATE),",
          "180:         NJS_GOTO_ROW(NJS_VMCODE_INITIALIZATION_TEST),",
          "181:         NJS_GOTO_ROW(NJS_VMCODE_NOT_INITIALIZED),",
          "182:         NJS_GOTO_ROW(NJS_VMCODE_ASSIGNMENT_ERROR),",
          "183:         NJS_GOTO_ROW(NJS_VMCODE_ERROR),",
          "184:         NJS_GOTO_ROW(NJS_VMCODE_MOVE),",
          "185:         NJS_GOTO_ROW(NJS_VMCODE_PROPERTY_GET),",
          "186:         NJS_GOTO_ROW(NJS_VMCODE_INCREMENT),",
          "187:         NJS_GOTO_ROW(NJS_VMCODE_POST_INCREMENT),",
          "188:         NJS_GOTO_ROW(NJS_VMCODE_DECREMENT),",
          "189:         NJS_GOTO_ROW(NJS_VMCODE_POST_DECREMENT),",
          "190:         NJS_GOTO_ROW(NJS_VMCODE_TRY_RETURN),",
          "191:         NJS_GOTO_ROW(NJS_VMCODE_GLOBAL_GET),",
          "192:         NJS_GOTO_ROW(NJS_VMCODE_LESS),",
          "193:         NJS_GOTO_ROW(NJS_VMCODE_GREATER),",
          "194:         NJS_GOTO_ROW(NJS_VMCODE_LESS_OR_EQUAL),",
          "195:         NJS_GOTO_ROW(NJS_VMCODE_GREATER_OR_EQUAL),",
          "196:         NJS_GOTO_ROW(NJS_VMCODE_ADDITION),",
          "197:         NJS_GOTO_ROW(NJS_VMCODE_EQUAL),",
          "198:         NJS_GOTO_ROW(NJS_VMCODE_NOT_EQUAL),",
          "199:         NJS_GOTO_ROW(NJS_VMCODE_SUBSTRACTION),",
          "200:         NJS_GOTO_ROW(NJS_VMCODE_MULTIPLICATION),",
          "201:         NJS_GOTO_ROW(NJS_VMCODE_EXPONENTIATION),",
          "202:         NJS_GOTO_ROW(NJS_VMCODE_DIVISION),",
          "203:         NJS_GOTO_ROW(NJS_VMCODE_REMAINDER),",
          "204:         NJS_GOTO_ROW(NJS_VMCODE_BITWISE_AND),",
          "205:         NJS_GOTO_ROW(NJS_VMCODE_BITWISE_OR),",
          "206:         NJS_GOTO_ROW(NJS_VMCODE_BITWISE_XOR),",
          "207:         NJS_GOTO_ROW(NJS_VMCODE_LEFT_SHIFT),",
          "208:         NJS_GOTO_ROW(NJS_VMCODE_RIGHT_SHIFT),",
          "209:         NJS_GOTO_ROW(NJS_VMCODE_UNSIGNED_RIGHT_SHIFT),",
          "210:         NJS_GOTO_ROW(NJS_VMCODE_OBJECT_COPY),",
          "211:         NJS_GOTO_ROW(NJS_VMCODE_TEMPLATE_LITERAL),",
          "212:         NJS_GOTO_ROW(NJS_VMCODE_PROPERTY_IN),",
          "213:         NJS_GOTO_ROW(NJS_VMCODE_PROPERTY_DELETE),",
          "214:         NJS_GOTO_ROW(NJS_VMCODE_PROPERTY_FOREACH),",
          "215:         NJS_GOTO_ROW(NJS_VMCODE_STRICT_EQUAL),",
          "216:         NJS_GOTO_ROW(NJS_VMCODE_STRICT_NOT_EQUAL),",
          "217:         NJS_GOTO_ROW(NJS_VMCODE_TEST_IF_TRUE),",
          "218:         NJS_GOTO_ROW(NJS_VMCODE_TEST_IF_FALSE),",
          "219:         NJS_GOTO_ROW(NJS_VMCODE_COALESCE),",
          "220:         NJS_GOTO_ROW(NJS_VMCODE_UNARY_PLUS),",
          "221:         NJS_GOTO_ROW(NJS_VMCODE_UNARY_NEGATION),",
          "222:         NJS_GOTO_ROW(NJS_VMCODE_BITWISE_NOT),",
          "223:         NJS_GOTO_ROW(NJS_VMCODE_LOGICAL_NOT),",
          "224:         NJS_GOTO_ROW(NJS_VMCODE_OBJECT),",
          "225:         NJS_GOTO_ROW(NJS_VMCODE_ARRAY),",
          "226:         NJS_GOTO_ROW(NJS_VMCODE_FUNCTION),",
          "227:         NJS_GOTO_ROW(NJS_VMCODE_REGEXP),",
          "228:         NJS_GOTO_ROW(NJS_VMCODE_INSTANCE_OF),",
          "229:         NJS_GOTO_ROW(NJS_VMCODE_TYPEOF),",
          "230:         NJS_GOTO_ROW(NJS_VMCODE_VOID),",
          "231:         NJS_GOTO_ROW(NJS_VMCODE_DELETE),",
          "232:         NJS_GOTO_ROW(NJS_VMCODE_DEBUGGER),",
          "233:     };",
          "235: #endif",
          "237:     vmcode = (njs_vmcode_generic_t *) pc;",
          "239: NEXT_LBL;",
          "241:     SWITCH (vmcode->code.operation) {",
          "243:     CASE (NJS_VMCODE_MOVE):",
          "244:         njs_vmcode_debug_opcode();",
          "246:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "247:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "250:         pc += sizeof(njs_vmcode_move_t);",
          "251:         NEXT;",
          "253:     CASE (NJS_VMCODE_PROPERTY_GET):",
          "254:         njs_vmcode_debug_opcode();",
          "256:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "257:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "259:         get = (njs_vmcode_prop_get_t *) pc;",
          "260:         njs_vmcode_operand(vm, get->value, retval);",
          "262:         if (njs_slow_path(!njs_is_index_or_key(value2))) {",
          "263:             if (njs_slow_path(njs_is_null_or_undefined(value1))) {",
          "264:                 (void) njs_throw_cannot_property(vm, value1, value2, \"get\");",
          "265:                 goto error;",
          "266:             }",
          "268:             ret = njs_value_to_key(vm, &primitive1, value2);",
          "269:             if (njs_slow_path(ret != NJS_OK)) {",
          "270:                 goto error;",
          "273:             value2 = &primitive1;",
          "274:         }",
          "276:         ret = njs_value_property(vm, value1, value2, retval);",
          "277:         if (njs_slow_path(ret == NJS_ERROR)) {",
          "278:             goto error;",
          "279:         }",
          "281:         pc += sizeof(njs_vmcode_prop_get_t);",
          "282:         NEXT;",
          "284:     CASE (NJS_VMCODE_INCREMENT):",
          "285:         njs_vmcode_debug_opcode();",
          "287:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "288:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "290:         if (njs_slow_path(!njs_is_numeric(value2))) {",
          "291:             ret = njs_value_to_numeric(vm, value2, &numeric1);",
          "292:             if (njs_slow_path(ret != NJS_OK)) {",
          "293:                 goto error;",
          "296:             num = njs_number(&numeric1);",
          "298:         } else {",
          "299:             num = njs_number(value2);",
          "300:         }",
          "302:         njs_set_number(value1, num + 1);",
          "304:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "308:         pc += sizeof(njs_vmcode_3addr_t);",
          "309:         NEXT;",
          "311:     CASE (NJS_VMCODE_POST_INCREMENT):",
          "312:         njs_vmcode_debug_opcode();",
          "314:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "315:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "317:         if (njs_slow_path(!njs_is_numeric(value2))) {",
          "318:             ret = njs_value_to_numeric(vm, value2, &numeric1);",
          "319:             if (njs_slow_path(ret != NJS_OK)) {",
          "320:                 goto error;",
          "321:             }",
          "323:             num = njs_number(&numeric1);",
          "325:         } else {",
          "326:             num = njs_number(value2);",
          "327:         }",
          "329:         njs_set_number(value1, num + 1);",
          "331:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "333:         njs_set_number(retval, num);",
          "335:         pc += sizeof(njs_vmcode_3addr_t);",
          "336:         NEXT;",
          "338:     CASE (NJS_VMCODE_DECREMENT):",
          "339:         njs_vmcode_debug_opcode();",
          "341:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "342:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "344:         if (njs_slow_path(!njs_is_numeric(value2))) {",
          "345:             ret = njs_value_to_numeric(vm, value2, &numeric1);",
          "346:             if (njs_slow_path(ret != NJS_OK)) {",
          "347:                 goto error;",
          "348:             }",
          "350:             num = njs_number(&numeric1);",
          "352:         } else {",
          "353:             num = njs_number(value2);",
          "354:         }",
          "356:         njs_set_number(value1, num - 1);",
          "358:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "362:         pc += sizeof(njs_vmcode_3addr_t);",
          "363:         NEXT;",
          "365:     CASE (NJS_VMCODE_POST_DECREMENT):",
          "366:         njs_vmcode_debug_opcode();",
          "368:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "369:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "371:         if (njs_slow_path(!njs_is_numeric(value2))) {",
          "372:             ret = njs_value_to_numeric(vm, value2, &numeric1);",
          "373:             if (njs_slow_path(ret != NJS_OK)) {",
          "374:                 goto error;",
          "375:             }",
          "377:             num = njs_number(&numeric1);",
          "379:         } else {",
          "380:             num = njs_number(value2);",
          "381:         }",
          "383:         njs_set_number(value1, num - 1);",
          "385:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "387:         njs_set_number(retval, num);",
          "389:         pc += sizeof(njs_vmcode_3addr_t);",
          "390:         NEXT;",
          "392:     CASE (NJS_VMCODE_GLOBAL_GET):",
          "393:         njs_vmcode_debug_opcode();",
          "395:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "396:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "398:         get = (njs_vmcode_prop_get_t *) pc;",
          "399:         njs_vmcode_operand(vm, get->value, retval);",
          "401:         ret = njs_value_property(vm, value1, value2, retval);",
          "402:         if (njs_slow_path(ret == NJS_ERROR)) {",
          "403:             goto error;",
          "404:         }",
          "406:         pc += sizeof(njs_vmcode_prop_get_t);",
          "408:         if (ret == NJS_OK) {",
          "409:             pc += sizeof(njs_vmcode_error_t);",
          "410:         }",
          "412:         NEXT;",
          "418:     CASE (NJS_VMCODE_TRY_RETURN):",
          "419:         njs_vmcode_debug_opcode();",
          "421:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "423:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "426:         try_return = (njs_vmcode_try_return_t *) pc;",
          "427:         pc += try_return->offset;",
          "428:         NEXT;",
          "430:     CASE (NJS_VMCODE_LESS):",
          "431:         njs_vmcode_debug_opcode();",
          "433:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "434:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "436:         if (njs_slow_path(!njs_is_primitive(value1))) {",
          "437:             ret = njs_value_to_primitive(vm, &primitive1, value1, 0);",
          "438:             if (ret != NJS_OK) {",
          "439:                 goto error;",
          "440:             }",
          "442:             value1 = &primitive1;",
          "443:         }",
          "445:         if (njs_slow_path(!njs_is_primitive(value2))) {",
          "446:             ret = njs_value_to_primitive(vm, &primitive2, value2, 0);",
          "447:             if (ret != NJS_OK) {",
          "448:                 goto error;",
          "449:             }",
          "451:             value2 = &primitive2;",
          "452:         }",
          "454:         if (njs_slow_path(njs_is_symbol(value1)",
          "455:                           || njs_is_symbol(value2)))",
          "456:         {",
          "457:             njs_symbol_conversion_failed(vm, 0);",
          "458:             goto error;",
          "459:         }",
          "461:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "463:         njs_set_boolean(retval,",
          "464:                         njs_primitive_values_compare(vm, value1, value2) > 0);",
          "466:         pc += sizeof(njs_vmcode_3addr_t);",
          "467:         NEXT;",
          "469:     CASE (NJS_VMCODE_GREATER):",
          "470:         njs_vmcode_debug_opcode();",
          "472:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "473:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "475:         if (njs_slow_path(!njs_is_primitive(value1))) {",
          "476:             ret = njs_value_to_primitive(vm, &primitive1, value1, 0);",
          "477:             if (ret != NJS_OK) {",
          "478:                 goto error;",
          "479:             }",
          "481:             value1 = &primitive1;",
          "482:         }",
          "484:         if (njs_slow_path(!njs_is_primitive(value2))) {",
          "485:             ret = njs_value_to_primitive(vm, &primitive2, value2, 0);",
          "486:             if (ret != NJS_OK) {",
          "487:                 goto error;",
          "488:             }",
          "490:             value2 = &primitive2;",
          "491:         }",
          "493:         if (njs_slow_path(njs_is_symbol(value1)",
          "494:                           || njs_is_symbol(value2)))",
          "495:         {",
          "496:             njs_symbol_conversion_failed(vm, 0);",
          "497:             goto error;",
          "498:         }",
          "500:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "502:         njs_set_boolean(retval,",
          "503:                         njs_primitive_values_compare(vm, value2, value1) > 0);",
          "505:         pc += sizeof(njs_vmcode_3addr_t);",
          "506:         NEXT;",
          "508:     CASE (NJS_VMCODE_LESS_OR_EQUAL):",
          "509:         njs_vmcode_debug_opcode();",
          "511:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "512:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "514:         if (njs_slow_path(!njs_is_primitive(value1))) {",
          "515:             ret = njs_value_to_primitive(vm, &primitive1, value1, 0);",
          "516:             if (ret != NJS_OK) {",
          "517:                 goto error;",
          "518:             }",
          "520:             value1 = &primitive1;",
          "521:         }",
          "523:         if (njs_slow_path(!njs_is_primitive(value2))) {",
          "524:             ret = njs_value_to_primitive(vm, &primitive2, value2, 0);",
          "525:             if (ret != NJS_OK) {",
          "526:                 goto error;",
          "527:             }",
          "529:             value2 = &primitive2;",
          "530:         }",
          "532:         if (njs_slow_path(njs_is_symbol(value1)",
          "533:                           || njs_is_symbol(value2)))",
          "534:         {",
          "535:             njs_symbol_conversion_failed(vm, 0);",
          "536:             goto error;",
          "537:         }",
          "539:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "541:         njs_set_boolean(retval,",
          "542:                         njs_primitive_values_compare(vm, value2, value1) == 0);",
          "544:         pc += sizeof(njs_vmcode_3addr_t);",
          "545:         NEXT;",
          "547:     CASE (NJS_VMCODE_GREATER_OR_EQUAL):",
          "548:         njs_vmcode_debug_opcode();",
          "550:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "551:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "553:         if (njs_slow_path(!njs_is_primitive(value1))) {",
          "554:             ret = njs_value_to_primitive(vm, &primitive1, value1, 0);",
          "555:             if (ret != NJS_OK) {",
          "556:                 goto error;",
          "557:             }",
          "559:             value1 = &primitive1;",
          "560:         }",
          "562:         if (njs_slow_path(!njs_is_primitive(value2))) {",
          "563:             ret = njs_value_to_primitive(vm, &primitive2, value2, 0);",
          "564:             if (ret != NJS_OK) {",
          "565:                 goto error;",
          "566:             }",
          "568:             value2 = &primitive2;",
          "569:         }",
          "571:         if (njs_slow_path(njs_is_symbol(value1)",
          "572:                           || njs_is_symbol(value2)))",
          "573:         {",
          "574:             njs_symbol_conversion_failed(vm, 0);",
          "575:             goto error;",
          "576:         }",
          "578:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "580:         njs_set_boolean(retval,",
          "581:                         njs_primitive_values_compare(vm, value1, value2) == 0);",
          "583:         pc += sizeof(njs_vmcode_3addr_t);",
          "584:         NEXT;",
          "586:     CASE (NJS_VMCODE_ADDITION):",
          "587:         njs_vmcode_debug_opcode();",
          "589:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "590:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "592:         if (njs_slow_path(!njs_is_primitive(value1))) {",
          "593:             hint = njs_is_date(value1);",
          "594:             ret = njs_value_to_primitive(vm, &primitive1, value1, hint);",
          "595:             if (ret != NJS_OK) {",
          "599:             value1 = &primitive1;",
          "600:         }",
          "602:         if (njs_slow_path(!njs_is_primitive(value2))) {",
          "603:             hint =  njs_is_date(value2);",
          "604:             ret = njs_value_to_primitive(vm, &primitive2, value2, hint);",
          "605:             if (ret != NJS_OK) {",
          "606:                 goto error;",
          "609:             value2 = &primitive2;",
          "610:         }",
          "612:         if (njs_slow_path(njs_is_symbol(value1)",
          "613:                           || njs_is_symbol(value2)))",
          "614:         {",
          "615:             njs_symbol_conversion_failed(vm,",
          "616:                 (njs_is_string(value1) || njs_is_string(value2)));",
          "618:             goto error;",
          "619:         }",
          "621:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "623:         if (njs_fast_path(njs_is_numeric(value1)",
          "624:                           && njs_is_numeric(value2)))",
          "625:         {",
          "626:             njs_set_number(retval, njs_number(value1)",
          "627:                                    + njs_number(value2));",
          "628:             pc += sizeof(njs_vmcode_3addr_t);",
          "629:             NEXT;",
          "630:         }",
          "632:         if (njs_is_string(value1)) {",
          "633:             s1 = value1;",
          "634:             s2 = &dst;",
          "635:             src = value2;",
          "638:             s1 = &dst;",
          "639:             s2 = value2;",
          "640:             src = value1;",
          "641:         }",
          "643:         ret = njs_primitive_value_to_string(vm, &dst, src);",
          "644:         if (njs_slow_path(ret != NJS_OK)) {",
          "645:             goto error;",
          "646:         }",
          "648:         ret = njs_string_concat(vm, s1, s2);",
          "649:         if (njs_slow_path(ret == NJS_ERROR)) {",
          "650:             goto error;",
          "651:         }",
          "655:         BREAK;",
          "657:     CASE (NJS_VMCODE_EQUAL):",
          "658:         njs_vmcode_debug_opcode();",
          "660:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "661:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "663:         ret = njs_values_equal(vm, value1, value2);",
          "664:         if (njs_slow_path(ret < 0)) {",
          "665:             goto error;",
          "666:         }",
          "668:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "669:         njs_set_boolean(retval, ret);",
          "671:         pc += sizeof(njs_vmcode_3addr_t);",
          "672:         NEXT;",
          "674:     CASE (NJS_VMCODE_NOT_EQUAL):",
          "675:         njs_vmcode_debug_opcode();",
          "677:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "678:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "680:         ret = njs_values_equal(vm, value1, value2);",
          "681:         if (njs_slow_path(ret < 0)) {",
          "682:             goto error;",
          "683:         }",
          "685:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "686:         njs_set_boolean(retval, !ret);",
          "688:         pc += sizeof(njs_vmcode_3addr_t);",
          "689:         NEXT;",
          "691: #define NJS_PRE_NUMERIC                                                       \\",
          "692:                                                                               \\",
          "693:         if (njs_slow_path(!njs_is_numeric(value1))) {                         \\",
          "694:             ret = njs_value_to_numeric(vm, value1, &numeric1);                \\",
          "695:             if (njs_slow_path(ret != NJS_OK)) {                               \\",
          "696:                 goto error;                                                   \\",
          "697:             }                                                                 \\",
          "698:                                                                               \\",
          "699:             value1 = &numeric1;                                               \\",
          "700:         }                                                                     \\",
          "701:                                                                               \\",
          "702:         if (njs_slow_path(!njs_is_numeric(value2))) {                         \\",
          "703:             ret = njs_value_to_numeric(vm, value2, &numeric2);                \\",
          "704:             if (njs_slow_path(ret != NJS_OK)) {                               \\",
          "705:                 goto error;                                                   \\",
          "706:             }                                                                 \\",
          "707:                                                                               \\",
          "708:             value2 = &numeric2;                                               \\",
          "709:         }                                                                     \\",
          "710:                                                                               \\",
          "711:         num = njs_number(value1);                                             \\",
          "712:                                                                               \\",
          "713:         njs_vmcode_operand(vm, vmcode->operand1, retval);                     \\",
          "714:         pc += sizeof(njs_vmcode_3addr_t)",
          "716:     CASE (NJS_VMCODE_SUBSTRACTION):",
          "717:         njs_vmcode_debug_opcode();",
          "719:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "720:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "722:         NJS_PRE_NUMERIC;",
          "724:         num -= njs_number(value2);",
          "726:         njs_set_number(retval, num);",
          "727:         NEXT;",
          "729:     CASE (NJS_VMCODE_MULTIPLICATION):",
          "730:         njs_vmcode_debug_opcode();",
          "732:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "733:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "735:         NJS_PRE_NUMERIC;",
          "737:         num *= njs_number(value2);",
          "739:         njs_set_number(retval, num);",
          "740:         NEXT;",
          "742:     CASE (NJS_VMCODE_EXPONENTIATION):",
          "743:         njs_vmcode_debug_opcode();",
          "745:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "746:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "748:         NJS_PRE_NUMERIC;",
          "750:         exponent = njs_number(value2);",
          "756:         valid = njs_expect(1, fabs(num) != 1",
          "757:                               || (!isnan(exponent)",
          "758:                                   && !isinf(exponent)));",
          "760:         num = valid ? pow(num, exponent) : NAN;",
          "762:         njs_set_number(retval, num);",
          "763:         NEXT;",
          "765:     CASE (NJS_VMCODE_DIVISION):",
          "766:         njs_vmcode_debug_opcode();",
          "768:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "769:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "771:         NJS_PRE_NUMERIC;",
          "773:         num /= njs_number(value2);",
          "775:         njs_set_number(retval, num);",
          "776:         NEXT;",
          "778:     CASE (NJS_VMCODE_REMAINDER):",
          "779:         njs_vmcode_debug_opcode();",
          "781:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "782:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "784:         NJS_PRE_NUMERIC;",
          "786:         num = fmod(num, njs_number(value2));",
          "788:         njs_set_number(retval, num);",
          "789:         NEXT;",
          "791:     CASE (NJS_VMCODE_BITWISE_AND):",
          "792:         njs_vmcode_debug_opcode();",
          "794:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "795:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "797:         NJS_PRE_NUMERIC;",
          "799:         i32 = njs_number_to_int32(njs_number(value2));",
          "800:         i32 &= njs_number_to_int32(num);",
          "802:         njs_set_int32(retval, i32);",
          "803:         NEXT;",
          "805:     CASE (NJS_VMCODE_BITWISE_OR):",
          "806:         njs_vmcode_debug_opcode();",
          "808:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "809:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "811:         NJS_PRE_NUMERIC;",
          "813:         i32 = njs_number_to_int32(njs_number(value2));",
          "814:         i32 |= njs_number_to_int32(num);",
          "816:         njs_set_int32(retval, i32);",
          "817:         NEXT;",
          "819:     CASE (NJS_VMCODE_BITWISE_XOR):",
          "820:         njs_vmcode_debug_opcode();",
          "822:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "823:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "825:         NJS_PRE_NUMERIC;",
          "827:         i32 = njs_number_to_int32(njs_number(value2));",
          "828:         i32 ^= njs_number_to_int32(num);",
          "830:         njs_set_int32(retval, i32);",
          "831:         NEXT;",
          "833:     CASE (NJS_VMCODE_LEFT_SHIFT):",
          "834:         njs_vmcode_debug_opcode();",
          "836:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "837:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "839:         NJS_PRE_NUMERIC;",
          "841:         u32 = njs_number_to_uint32(njs_number(value2)) & 0x1f;",
          "842:         i32 = njs_number_to_int32(num);",
          "845:         i32 = (uint32_t) i32 << u32;",
          "847:         njs_set_int32(retval, i32);",
          "848:         NEXT;",
          "850:     CASE (NJS_VMCODE_RIGHT_SHIFT):",
          "851:         njs_vmcode_debug_opcode();",
          "853:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "854:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "856:         NJS_PRE_NUMERIC;",
          "858:         u32 = njs_number_to_uint32(njs_number(value2)) & 0x1f;",
          "859:         i32 = njs_number_to_int32(num);",
          "861:         i32 >>= u32;",
          "863:         njs_set_int32(retval, i32);",
          "864:         NEXT;",
          "866:     CASE (NJS_VMCODE_UNSIGNED_RIGHT_SHIFT):",
          "867:         njs_vmcode_debug_opcode();",
          "869:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "870:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "872:         NJS_PRE_NUMERIC;",
          "874:         u32 = njs_number_to_uint32(njs_number(value2)) & 0x1f;",
          "875:         njs_set_uint32(retval, njs_number_to_uint32(num) >> u32);",
          "876:         NEXT;",
          "878:     CASE (NJS_VMCODE_OBJECT_COPY):",
          "879:         njs_vmcode_debug_opcode();",
          "881:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "883:         ret = njs_vmcode_object_copy(vm, value1, NULL);",
          "885:         if (njs_slow_path(ret < 0 && ret >= NJS_PREEMPT)) {",
          "886:             goto error;",
          "887:         }",
          "889:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "890:         njs_release(vm, retval);",
          "893:         BREAK;",
          "895:     CASE (NJS_VMCODE_TEMPLATE_LITERAL):",
          "896:         njs_vmcode_debug_opcode();",
          "898:         value2 = (njs_value_t *) vmcode->operand1;",
          "900:         ret = njs_vmcode_template_literal(vm, NULL, value2);",
          "902:         if (njs_slow_path(ret < 0 && ret >= NJS_PREEMPT)) {",
          "903:             goto error;",
          "904:         }",
          "906:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "907:         njs_release(vm, retval);",
          "910:         BREAK;",
          "912:     CASE (NJS_VMCODE_PROPERTY_IN):",
          "913:         njs_vmcode_debug_opcode();",
          "915:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "916:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "918:         ret = njs_vmcode_property_in(vm, value1, value2);",
          "920:         if (njs_slow_path(ret < 0 && ret >= NJS_PREEMPT)) {",
          "921:             goto error;",
          "922:         }",
          "924:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "925:         njs_release(vm, retval);",
          "928:         BREAK;",
          "930:     CASE (NJS_VMCODE_PROPERTY_DELETE):",
          "931:         njs_vmcode_debug_opcode();",
          "933:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "934:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "936:         ret = njs_value_property_delete(vm, value1, value2, NULL, 1);",
          "937:         if (njs_fast_path(ret != NJS_ERROR)) {",
          "938:             vm->retval = njs_value_true;",
          "940:             ret = sizeof(njs_vmcode_3addr_t);",
          "941:         }",
          "943:         if (njs_slow_path(ret < 0 && ret >= NJS_PREEMPT)) {",
          "944:             goto error;",
          "945:         }",
          "947:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "948:         njs_release(vm, retval);",
          "951:         BREAK;",
          "953:     CASE (NJS_VMCODE_PROPERTY_FOREACH):",
          "954:         njs_vmcode_debug_opcode();",
          "956:         value2 = (njs_value_t *) vmcode->operand1;",
          "957:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "959:         ret = njs_vmcode_property_foreach(vm, value1, value2, pc);",
          "961:         if (njs_slow_path(ret < 0 && ret >= NJS_PREEMPT)) {",
          "962:             goto error;",
          "963:         }",
          "965:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "966:         njs_release(vm, retval);",
          "969:         BREAK;",
          "971:     CASE (NJS_VMCODE_STRICT_EQUAL):",
          "972:         njs_vmcode_debug_opcode();",
          "974:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "975:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "977:         ret = njs_values_strict_equal(value1, value2);",
          "979:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "980:         njs_set_boolean(retval, ret);",
          "982:         pc += sizeof(njs_vmcode_3addr_t);",
          "983:         NEXT;",
          "985:     CASE (NJS_VMCODE_STRICT_NOT_EQUAL):",
          "986:         njs_vmcode_debug_opcode();",
          "988:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "989:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "991:         ret = njs_values_strict_equal(value1, value2);",
          "993:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "994:         njs_set_boolean(retval, !ret);",
          "996:         pc += sizeof(njs_vmcode_3addr_t);",
          "997:         NEXT;",
          "999:     CASE (NJS_VMCODE_TEST_IF_TRUE):",
          "1000:         njs_vmcode_debug_opcode();",
          "1002:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1004:         ret = njs_is_true(value1);",
          "1006:         if (ret) {",
          "1007:             test_jump = (njs_vmcode_test_jump_t *) pc;",
          "1008:             ret = test_jump->offset;",
          "1010:         } else {",
          "1011:             ret = sizeof(njs_vmcode_3addr_t);",
          "1012:         }",
          "1014:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "1017:         BREAK;",
          "1019:     CASE (NJS_VMCODE_TEST_IF_FALSE):",
          "1020:         njs_vmcode_debug_opcode();",
          "1022:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1024:         ret = !njs_is_true(value1);",
          "1026:         if (ret) {",
          "1027:             test_jump = (njs_vmcode_test_jump_t *) pc;",
          "1028:             ret = test_jump->offset;",
          "1030:         } else {",
          "1031:             ret = sizeof(njs_vmcode_3addr_t);",
          "1032:         }",
          "1034:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "1037:         BREAK;",
          "1039:     CASE (NJS_VMCODE_COALESCE):",
          "1040:         njs_vmcode_debug_opcode();",
          "1042:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1044:         ret = !njs_is_null_or_undefined(value1);",
          "1046:         if (ret) {",
          "1047:             test_jump = (njs_vmcode_test_jump_t *) pc;",
          "1048:             ret = test_jump->offset;",
          "1050:         } else {",
          "1051:             ret = sizeof(njs_vmcode_3addr_t);",
          "1052:         }",
          "1054:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "1057:         BREAK;",
          "1059: #define NJS_PRE_UNARY                                                         \\",
          "1060:         if (njs_slow_path(!njs_is_numeric(value1))) {                         \\",
          "1061:             ret = njs_value_to_numeric(vm, value1, &numeric1);                \\",
          "1062:             if (njs_slow_path(ret != NJS_OK)) {                               \\",
          "1063:                 goto error;                                                   \\",
          "1064:             }                                                                 \\",
          "1065:                                                                               \\",
          "1066:             value1 = &numeric1;                                               \\",
          "1067:         }                                                                     \\",
          "1068:                                                                               \\",
          "1069:         num = njs_number(value1);                                             \\",
          "1070:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "1072:     CASE (NJS_VMCODE_UNARY_NEGATION):",
          "1073:         njs_vmcode_debug_opcode();",
          "1075:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1077:         NJS_PRE_UNARY;",
          "1079:         num = -num;",
          "1081:         njs_set_number(retval, num);",
          "1083:         pc += sizeof(njs_vmcode_2addr_t);",
          "1084:         NEXT;",
          "1086:     CASE (NJS_VMCODE_UNARY_PLUS):",
          "1087:         njs_vmcode_debug_opcode();",
          "1089:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1091:         NJS_PRE_UNARY;",
          "1093:         njs_set_number(retval, num);",
          "1095:         pc += sizeof(njs_vmcode_2addr_t);",
          "1096:         NEXT;",
          "1098:     CASE (NJS_VMCODE_BITWISE_NOT):",
          "1099:         njs_vmcode_debug_opcode();",
          "1101:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1103:         NJS_PRE_UNARY;",
          "1105:         njs_set_int32(retval, ~njs_number_to_uint32(num));",
          "1107:         pc += sizeof(njs_vmcode_2addr_t);",
          "1108:         NEXT;",
          "1110:     CASE (NJS_VMCODE_LOGICAL_NOT):",
          "1111:         njs_vmcode_debug_opcode();",
          "1113:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1114:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "1116:         njs_set_boolean(retval, !njs_is_true(value1));",
          "1118:         pc += sizeof(njs_vmcode_2addr_t);",
          "1119:         NEXT;",
          "1121:     CASE (NJS_VMCODE_OBJECT):",
          "1122:         njs_vmcode_debug_opcode();",
          "1124:         ret = njs_vmcode_object(vm);",
          "1126:         if (njs_slow_path(ret < 0 && ret >= NJS_PREEMPT)) {",
          "1127:             goto error;",
          "1128:         }",
          "1130:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "1131:         njs_release(vm, retval);",
          "1134:         BREAK;",
          "1136:     CASE (NJS_VMCODE_ARRAY):",
          "1137:         njs_vmcode_debug_opcode();",
          "1139:         ret = njs_vmcode_array(vm, pc);",
          "1141:         if (njs_slow_path(ret < 0 && ret >= NJS_PREEMPT)) {",
          "1142:             goto error;",
          "1143:         }",
          "1145:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "1146:         njs_release(vm, retval);",
          "1149:         BREAK;",
          "1151:     CASE (NJS_VMCODE_FUNCTION):",
          "1152:         njs_vmcode_debug_opcode();",
          "1154:         ret = njs_vmcode_function(vm, pc);",
          "1156:         if (njs_slow_path(ret < 0 && ret >= NJS_PREEMPT)) {",
          "1157:             goto error;",
          "1158:         }",
          "1160:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "1161:         njs_release(vm, retval);",
          "1164:         BREAK;",
          "1166:     CASE (NJS_VMCODE_REGEXP):",
          "1167:         njs_vmcode_debug_opcode();",
          "1169:         ret = njs_vmcode_regexp(vm, pc);",
          "1171:         if (njs_slow_path(ret < 0 && ret >= NJS_PREEMPT)) {",
          "1172:             goto error;",
          "1173:         }",
          "1175:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "1176:         njs_release(vm, retval);",
          "1179:         BREAK;",
          "1181:     CASE (NJS_VMCODE_INSTANCE_OF):",
          "1182:         njs_vmcode_debug_opcode();",
          "1184:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "1185:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1187:         ret = njs_vmcode_instance_of(vm, value1, value2);",
          "1189:         if (njs_slow_path(ret < 0 && ret >= NJS_PREEMPT)) {",
          "1190:             goto error;",
          "1191:         }",
          "1193:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "1194:         njs_release(vm, retval);",
          "1197:         BREAK;",
          "1199:     CASE (NJS_VMCODE_TYPEOF):",
          "1200:         njs_vmcode_debug_opcode();",
          "1202:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1204:         ret = njs_vmcode_typeof(vm, value1, NULL);",
          "1206:         if (njs_slow_path(ret < 0 && ret >= NJS_PREEMPT)) {",
          "1207:             goto error;",
          "1208:         }",
          "1210:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "1211:         njs_release(vm, retval);",
          "1214:         BREAK;",
          "1216:     CASE (NJS_VMCODE_VOID):",
          "1217:         njs_vmcode_debug_opcode();",
          "1219:         njs_set_undefined(&vm->retval);",
          "1221:         ret = sizeof(njs_vmcode_2addr_t);",
          "1223:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "1224:         njs_release(vm, retval);",
          "1227:         BREAK;",
          "1229:     CASE (NJS_VMCODE_DELETE):",
          "1230:         njs_vmcode_debug_opcode();",
          "1232:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1234:         njs_release(vm, value1);",
          "1235:         vm->retval = njs_value_true;",
          "1237:         ret = sizeof(njs_vmcode_2addr_t);",
          "1238:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "1239:         njs_release(vm, retval);",
          "1242:         BREAK;",
          "1244:     CASE (NJS_VMCODE_DEBUGGER):",
          "1245:         njs_vmcode_debug_opcode();",
          "1247:         ret = njs_vmcode_debugger(vm);",
          "1249:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "1250:         njs_release(vm, retval);",
          "1253:         BREAK;",
          "1255:     CASE (NJS_VMCODE_PUT_ARG):",
          "1256:         njs_vmcode_debug_opcode();",
          "1258:         put_arg = (njs_vmcode_1addr_t *) pc;",
          "1259:         native = vm->top_frame;",
          "1261:         value1 = &native->arguments[native->put_args++];",
          "1262:         njs_vmcode_operand(vm, put_arg->index, value2);",
          "1264:         njs_value_assign(value1, value2);",
          "1266:         ret = sizeof(njs_vmcode_1addr_t);",
          "1267:         BREAK;",
          "1269:     CASE (NJS_VMCODE_STOP):",
          "1270:         njs_vmcode_debug_opcode();",
          "1272:         njs_vmcode_operand(vm, vmcode->operand1, value2);",
          "1273:         vm->retval = *value2;",
          "1275:         njs_vmcode_debug(vm, pc, \"EXIT STOP\");",
          "1277:         return NJS_OK;",
          "1279:     CASE (NJS_VMCODE_JUMP):",
          "1280:         njs_vmcode_debug_opcode();",
          "1282:         ret = (njs_jump_off_t) vmcode->operand1;",
          "1283:         BREAK;",
          "1285:     CASE (NJS_VMCODE_PROPERTY_SET):",
          "1286:         njs_vmcode_debug_opcode();",
          "1288:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "1289:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1290:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "1292:         if (njs_slow_path(!njs_is_index_or_key(value2))) {",
          "1293:             if (njs_slow_path(njs_is_null_or_undefined(value1))) {",
          "1294:                 (void) njs_throw_cannot_property(vm, value1, value2, \"set\");",
          "1296:             }",
          "1298:             njs_value_assign(&primitive1, value1);",
          "1299:             ret = njs_value_to_key(vm, &primitive2, value2);",
          "1300:             if (njs_slow_path(ret != NJS_OK)) {",
          "1301:                 goto error;",
          "1302:             }",
          "1304:             value1 = &primitive1;",
          "1305:             value2 = &primitive2;",
          "1306:         }",
          "1308:         ret = njs_value_property_set(vm, value1, value2, retval);",
          "1309:         if (njs_slow_path(ret == NJS_ERROR)) {",
          "1310:             goto error;",
          "1311:         }",
          "1313:         ret = sizeof(njs_vmcode_prop_set_t);",
          "1314:         BREAK;",
          "1316:     CASE (NJS_VMCODE_PROPERTY_ACCESSOR):",
          "1317:         njs_vmcode_debug_opcode();",
          "1319:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "1320:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1322:         accessor = (njs_vmcode_prop_accessor_t *) pc;",
          "1323:         njs_vmcode_operand(vm, accessor->value, function);",
          "1325:         ret = njs_value_to_key(vm, &name, value2);",
          "1326:         if (njs_slow_path(ret != NJS_OK)) {",
          "1327:             njs_internal_error(vm, \"failed conversion of type \\\"%s\\\" \"",
          "1328:                                \"to string while property define\",",
          "1329:                                njs_type_string(value2->type));",
          "1330:             goto error;",
          "1331:         }",
          "1333:         ret = njs_object_prop_define(vm, value1, &name, function,",
          "1334:                                      accessor->type);",
          "1335:         if (njs_slow_path(ret != NJS_OK)) {",
          "1336:             goto error;",
          "1337:         }",
          "1339:         ret = sizeof(njs_vmcode_prop_accessor_t);",
          "1340:         BREAK;",
          "1342:     CASE (NJS_VMCODE_IF_TRUE_JUMP):",
          "1343:         njs_vmcode_debug_opcode();",
          "1345:         value2 = (njs_value_t *) vmcode->operand1;",
          "1346:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1348:         ret = njs_is_true(value1);",
          "1350:         ret = ret ? (njs_jump_off_t) value2",
          "1351:                   : (njs_jump_off_t) sizeof(njs_vmcode_cond_jump_t);",
          "1353:         BREAK;",
          "1355:     CASE (NJS_VMCODE_IF_FALSE_JUMP):",
          "1356:         njs_vmcode_debug_opcode();",
          "1358:         value2 = (njs_value_t *) vmcode->operand1;",
          "1359:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1361:         ret = njs_is_true(value1);",
          "1363:         ret = !ret ? (njs_jump_off_t) value2",
          "1364:                    : (njs_jump_off_t) sizeof(njs_vmcode_cond_jump_t);",
          "1366:         BREAK;",
          "1368:     CASE (NJS_VMCODE_IF_EQUAL_JUMP):",
          "1369:         njs_vmcode_debug_opcode();",
          "1371:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "1372:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1374:         if (njs_values_strict_equal(value1, value2)) {",
          "1375:             equal = (njs_vmcode_equal_jump_t *) pc;",
          "1376:             ret = equal->offset;",
          "1378:         } else {",
          "1379:             ret = sizeof(njs_vmcode_3addr_t);",
          "1380:         }",
          "1382:         BREAK;",
          "1384:     CASE (NJS_VMCODE_PROPERTY_INIT):",
          "1385:         njs_vmcode_debug_opcode();",
          "1387:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "1388:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1390:         set = (njs_vmcode_prop_set_t *) pc;",
          "1391:         njs_vmcode_operand(vm, set->value, retval);",
          "1392:         ret = njs_vmcode_property_init(vm, value1, value2, retval);",
          "1393:         if (njs_slow_path(ret == NJS_ERROR)) {",
          "1394:             goto error;",
          "1395:         }",
          "1397:         BREAK;",
          "1399:     CASE (NJS_VMCODE_RETURN):",
          "1400:         njs_vmcode_debug_opcode();",
          "1402:         value2 = (njs_value_t *) vmcode->operand1;",
          "1404:         njs_vmcode_operand(vm, (njs_index_t) value2, value2);",
          "1406:         njs_vmcode_debug(vm, pc, \"EXIT RETURN\");",
          "1408:         return njs_vmcode_return(vm, NULL, value2);",
          "1410:     CASE (NJS_VMCODE_FUNCTION_COPY):",
          "1411:         njs_vmcode_debug_opcode();",
          "1413:         fcopy = (njs_vmcode_function_copy_t *) pc;",
          "1414:         ret = njs_vmcode_function_copy(vm, fcopy->function, fcopy->retval);",
          "1415:         if (njs_slow_path(ret == NJS_ERROR)) {",
          "1416:             goto error;",
          "1417:         }",
          "1419:         BREAK;",
          "1421:     CASE (NJS_VMCODE_FUNCTION_FRAME):",
          "1422:         njs_vmcode_debug_opcode();",
          "1424:         value2 = (njs_value_t *) vmcode->operand1;",
          "1425:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1427:         function_frame = (njs_vmcode_function_frame_t *) pc;",
          "1429:         ret = njs_function_frame_create(vm, value1, &njs_value_undefined,",
          "1430:                                         (uintptr_t) value2,",
          "1431:                                         function_frame->ctor);",
          "1433:         if (njs_slow_path(ret != NJS_OK)) {",
          "1434:             goto error;",
          "1435:         }",
          "1437:         ret = sizeof(njs_vmcode_function_frame_t);",
          "1438:         BREAK;",
          "1440:     CASE (NJS_VMCODE_METHOD_FRAME):",
          "1441:         njs_vmcode_debug_opcode();",
          "1443:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "1444:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1446:         method_frame = (njs_vmcode_method_frame_t *) pc;",
          "1448:         if (njs_slow_path(!njs_is_key(value2))) {",
          "1449:             if (njs_slow_path(njs_is_null_or_undefined(value1))) {",
          "1450:                 (void) njs_throw_cannot_property(vm, value1, value2, \"get\");",
          "1452:             }",
          "1454:             ret = njs_value_to_key(vm, &primitive1, value2);",
          "1455:             if (njs_slow_path(ret != NJS_OK)) {",
          "1457:             }",
          "1459:             value2 = &primitive1;",
          "1460:         }",
          "1462:         ret = njs_value_property(vm, value1, value2, &dst);",
          "1463:         if (njs_slow_path(ret == NJS_ERROR)) {",
          "1464:             goto error;",
          "1465:         }",
          "1467:         if (njs_slow_path(!njs_is_function(&dst))) {",
          "1468:             ret = njs_value_to_key(vm, &dst, value2);",
          "1469:             if (njs_slow_path(ret != NJS_OK)) {",
          "1471:             }",
          "1473:             njs_key_string_get(vm, &dst, &string);",
          "1474:             njs_type_error(vm,",
          "1475:                        \"(intermediate value)[\\\"%V\\\"] is not a function\",",
          "1476:                        &string);",
          "1477:             goto error;",
          "1478:         }",
          "1480:         ret = njs_function_frame_create(vm, &dst, value1, method_frame->nargs,",
          "1481:                                         method_frame->ctor);",
          "1483:         if (njs_slow_path(ret != NJS_OK)) {",
          "1484:             goto error;",
          "1485:         }",
          "1487:         ret = sizeof(njs_vmcode_method_frame_t);",
          "1488:         BREAK;",
          "1490:     CASE (NJS_VMCODE_FUNCTION_CALL):",
          "1491:         njs_vmcode_debug_opcode();",
          "1493:         value2 = (njs_value_t *) vmcode->operand1;",
          "1495:         vm->active_frame->native.pc = pc;",
          "1497:         njs_vmcode_operand(vm, (njs_index_t) value2, value2);",
          "1499:         ret = njs_function_frame_invoke(vm, value2);",
          "1500:         if (njs_slow_path(ret == NJS_ERROR)) {",
          "1501:             goto error;",
          "1502:         }",
          "1504:         njs_vmcode_debug(vm, pc, \"RESUME\");",
          "1506:         ret = sizeof(njs_vmcode_function_call_t);",
          "1507:         BREAK;",
          "1509:     CASE (NJS_VMCODE_PROPERTY_NEXT):",
          "1510:         njs_vmcode_debug_opcode();",
          "1512:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "1513:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1515:         pnext = (njs_vmcode_prop_next_t *) pc;",
          "1516:         retval = njs_scope_value(vm, pnext->retval);",
          "1518:         njs_assert(njs_is_data(value2, NJS_DATA_TAG_FOREACH_NEXT));",
          "1519:         next = njs_data(value2);",
          "1521:         if (next->index < next->array->length) {",
          "1524:             ret = pnext->offset;",
          "1525:             BREAK;",
          "1526:         }",
          "1528:         njs_mp_free(vm->mem_pool, next);",
          "1530:         ret = sizeof(njs_vmcode_prop_next_t);",
          "1531:         BREAK;",
          "1533:     CASE (NJS_VMCODE_ARGUMENTS):",
          "1534:         njs_vmcode_debug_opcode();",
          "1536:         ret = njs_vmcode_arguments(vm, pc);",
          "1537:         if (njs_slow_path(ret == NJS_ERROR)) {",
          "1538:             goto error;",
          "1539:         }",
          "1541:         BREAK;",
          "1543:     CASE (NJS_VMCODE_TO_PROPERTY_KEY):",
          "1544:         njs_vmcode_debug_opcode();",
          "1546:         value2 = (njs_value_t *) vmcode->operand1;",
          "1547:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1549:         njs_vmcode_operand(vm, (njs_index_t) value2, retval);",
          "1551:         ret = njs_value_to_key(vm, retval, value1);",
          "1552:         if (njs_fast_path(ret == NJS_ERROR)) {",
          "1553:             goto error;",
          "1554:         }",
          "1556:         ret = sizeof(njs_vmcode_2addr_t);",
          "1557:         BREAK;",
          "1559:     CASE (NJS_VMCODE_TO_PROPERTY_KEY_CHK):",
          "1560:         njs_vmcode_debug_opcode();",
          "1562:         value2 = (njs_value_t *) vmcode->operand1;",
          "1563:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1565:         njs_vmcode_operand(vm, (njs_index_t) value2, retval);",
          "1566:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "1568:         if (njs_slow_path(njs_is_null_or_undefined(value2))) {",
          "1569:             (void) njs_throw_cannot_property(vm, value2, value1, \"get\");",
          "1570:             goto error;",
          "1571:         }",
          "1573:         ret = njs_value_to_key(vm, retval, value1);",
          "1574:         if (njs_fast_path(ret == NJS_ERROR)) {",
          "1575:             goto error;",
          "1576:         }",
          "1578:         ret = sizeof(njs_vmcode_3addr_t);",
          "1579:         BREAK;",
          "1581:     CASE (NJS_VMCODE_SET_FUNCTION_NAME):",
          "1582:         njs_vmcode_debug_opcode();",
          "1584:         value2 = (njs_value_t *) vmcode->operand1;",
          "1585:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1587:         njs_vmcode_operand(vm, (njs_index_t) value2, value2);",
          "1589:         njs_assert(njs_is_function(value2));",
          "1591:         ret = njs_function_name_set(vm, njs_function(value2), value1, NULL);",
          "1592:         if (njs_slow_path(ret == NJS_ERROR)) {",
          "1593:             return ret;",
          "1594:         }",
          "1596:         ret = sizeof(njs_vmcode_2addr_t);",
          "1597:         BREAK;",
          "1600:     CASE (NJS_VMCODE_PROTO_INIT):",
          "1601:         njs_vmcode_debug_opcode();",
          "1603:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "1604:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1606:         set = (njs_vmcode_prop_set_t *) pc;",
          "1607:         njs_vmcode_operand(vm, set->value, retval);",
          "1608:         ret = njs_vmcode_proto_init(vm, value1, value2, retval);",
          "1609:         if (njs_slow_path(ret == NJS_ERROR)) {",
          "1610:             goto error;",
          "1611:         }",
          "1613:         BREAK;",
          "1615:     CASE (NJS_VMCODE_IMPORT):",
          "1616:         njs_vmcode_debug_opcode();",
          "1618:         import = (njs_vmcode_import_t *) pc;",
          "1619:         retval = njs_scope_value(vm, import->retval);",
          "1620:         ret = njs_vmcode_import(vm, import->module, retval);",
          "1621:         if (njs_slow_path(ret == NJS_ERROR)) {",
          "1622:             goto error;",
          "1623:         }",
          "1625:         BREAK;",
          "1627:     CASE (NJS_VMCODE_AWAIT):",
          "1628:         njs_vmcode_debug_opcode();",
          "1630:         await = (njs_vmcode_await_t *) pc;",
          "1632:         ret = njs_vmcode_await(vm, await, promise_cap, async_ctx);",
          "1634:         njs_vmcode_debug(vm, pc, \"EXIT AWAIT\");",
          "1636:         if (njs_slow_path(ret == NJS_ERROR)) {",
          "1637:             goto error;",
          "1638:         }",
          "1640:         return ret;",
          "1642:     CASE (NJS_VMCODE_TRY_START):",
          "1643:         njs_vmcode_debug_opcode();",
          "1645:         value2 = (njs_value_t *) vmcode->operand1;",
          "1646:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1648:         ret = njs_vmcode_try_start(vm, value1, value2, pc);",
          "1649:         if (njs_slow_path(ret == NJS_ERROR)) {",
          "1650:             goto error;",
          "1651:         }",
          "1653:         BREAK;",
          "1655:     CASE (NJS_VMCODE_THROW):",
          "1656:         njs_vmcode_debug_opcode();",
          "1658:         value2 = (njs_value_t *) vmcode->operand1;",
          "1660:         njs_vmcode_operand(vm, (njs_index_t) value2, value2);",
          "1661:         vm->retval = *value2;",
          "1663:         goto error;",
          "1665:     CASE (NJS_VMCODE_TRY_BREAK):",
          "1666:         njs_vmcode_debug_opcode();",
          "1668:         value2 = (njs_value_t *) vmcode->operand1;",
          "1670:         try_trampoline = (njs_vmcode_try_trampoline_t *) pc;",
          "1671:         value1 = njs_scope_value(vm, try_trampoline->exit_value);",
          "1673:         ret = njs_vmcode_try_break(vm, value1, value2);",
          "1674:         BREAK;",
          "1676:     CASE (NJS_VMCODE_TRY_CONTINUE):",
          "1677:         njs_vmcode_debug_opcode();",
          "1679:         value2 = (njs_value_t *) vmcode->operand1;",
          "1681:         try_trampoline = (njs_vmcode_try_trampoline_t *) pc;",
          "1682:         value1 = njs_scope_value(vm, try_trampoline->exit_value);",
          "1684:         ret = njs_vmcode_try_continue(vm, value1, value2);",
          "1685:         BREAK;",
          "1687:     CASE (NJS_VMCODE_TRY_END):",
          "1688:         njs_vmcode_debug_opcode();",
          "1690:         ret = njs_vmcode_try_end(vm, NULL, (njs_value_t *) vmcode->operand1);",
          "1691:         BREAK;",
          "1701:     CASE (NJS_VMCODE_CATCH):",
          "1702:         njs_vmcode_debug_opcode();",
          "1704:         value2 = (njs_value_t *) vmcode->operand1;",
          "1705:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1709:         if ((njs_jump_off_t) value2 == sizeof(njs_vmcode_catch_t)) {",
          "1710:             ret = njs_vmcode_try_end(vm, value1, value2);",
          "1712:         } else {",
          "1713:             frame = (njs_frame_t *) vm->top_frame;",
          "1714:             frame->exception.catch = pc + (njs_jump_off_t) value2;",
          "1715:             ret = sizeof(njs_vmcode_catch_t);",
          "1716:         }",
          "1718:         BREAK;",
          "1720:     CASE (NJS_VMCODE_FINALLY):",
          "1721:         njs_vmcode_debug_opcode();",
          "1723:         value2 = (njs_value_t *) vmcode->operand1;",
          "1725:         finally = (njs_vmcode_finally_t *) pc;",
          "1726:         value1 = njs_scope_value(vm, finally->exit_value);",
          "1728:         ret = njs_vmcode_finally(vm, NULL, value2, pc);",
          "1730:         switch (ret) {",
          "1731:         case NJS_OK:",
          "1732:             njs_vmcode_debug(vm, pc, \"EXIT FINALLY\");",
          "1734:             return NJS_OK;",
          "1735:         case NJS_ERROR:",
          "1736:             goto error;",
          "1737:         }",
          "1739:         BREAK;",
          "1741:     CASE (NJS_VMCODE_LET):",
          "1742:         njs_vmcode_debug_opcode();",
          "1744:         var = (njs_vmcode_variable_t *) pc;",
          "1745:         value1 = njs_scope_value(vm, var->dst);",
          "1747:         if (njs_is_valid(value1)) {",
          "1748:             value1 = njs_mp_alloc(vm->mem_pool, sizeof(njs_value_t));",
          "1749:             if (njs_slow_path(value1 == NULL)) {",
          "1750:                 njs_memory_error(vm);",
          "1754:             njs_scope_value_set(vm, var->dst, value1);",
          "1757:         njs_set_undefined(value1);",
          "1759:         ret = sizeof(njs_vmcode_variable_t);",
          "1760:         BREAK;",
          "1762:     CASE (NJS_VMCODE_LET_UPDATE):",
          "1763:         njs_vmcode_debug_opcode();",
          "1765:         var = (njs_vmcode_variable_t *) pc;",
          "1766:         value2 = njs_scope_value(vm, var->dst);",
          "1768:         value1 = njs_mp_alloc(vm->mem_pool, sizeof(njs_value_t));",
          "1769:         if (njs_slow_path(value1 == NULL)) {",
          "1770:             njs_memory_error(vm);",
          "1771:             goto error;",
          "1772:         }",
          "1776:         njs_scope_value_set(vm, var->dst, value1);",
          "1778:         ret = sizeof(njs_vmcode_variable_t);",
          "1779:         BREAK;",
          "1781:     CASE (NJS_VMCODE_INITIALIZATION_TEST):",
          "1782:         njs_vmcode_debug_opcode();",
          "1784:         var = (njs_vmcode_variable_t *) pc;",
          "1785:         value1 = njs_scope_value(vm, var->dst);",
          "1787:         if (njs_is_valid(value1)) {",
          "1788:             ret = sizeof(njs_vmcode_variable_t);",
          "1789:             BREAK;",
          "1790:         }",
          "1792:         FALLTHROUGH;",
          "1793:     CASE (NJS_VMCODE_NOT_INITIALIZED):",
          "1794:         njs_vmcode_debug_opcode();",
          "1796:         njs_reference_error(vm, \"cannot access variable before initialization\");",
          "1797:         goto error;",
          "1799:     CASE (NJS_VMCODE_ERROR):",
          "1800:         njs_vmcode_debug_opcode();",
          "1802:         njs_vmcode_error(vm, pc);",
          "1803:         goto error;",
          "1805:     CASE (NJS_VMCODE_ASSIGNMENT_ERROR):",
          "1806:         njs_vmcode_debug_opcode();",
          "1808:         njs_type_error(vm, \"assignment to constant variable\");",
          "1809:         goto error;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1114:             if (catch != NULL) {",
          "1115:                 pc = catch;",
          "1118:             }",
          "1119:         }",
          "",
          "[Removed Lines]",
          "1117:                 goto next;",
          "",
          "[Added Lines]",
          "1830:                 NEXT;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1905: }",
          "1909: njs_function_new_object(njs_vm_t *vm, njs_value_t *constructor)",
          "1910: {",
          "1911:     njs_value_t     proto, bound;",
          "",
          "[Removed Lines]",
          "1908: njs_object_t *",
          "",
          "[Added Lines]",
          "2621: inline njs_object_t *",
          "",
          "---------------"
        ],
        "src/njs_vmcode.h||src/njs_vmcode.h": [
          "File: src/njs_vmcode.h -> src/njs_vmcode.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:     NJS_VMCODE_METHOD_FRAME,",
          "47:     NJS_VMCODE_FUNCTION_CALL,",
          "48:     NJS_VMCODE_PROPERTY_NEXT,",
          "50:     NJS_VMCODE_ARGUMENTS,",
          "51:     NJS_VMCODE_PROTO_INIT,",
          "52:     NJS_VMCODE_TO_PROPERTY_KEY,",
          "53:     NJS_VMCODE_TO_PROPERTY_KEY_CHK,",
          "54:     NJS_VMCODE_SET_FUNCTION_NAME,",
          "55:     NJS_VMCODE_IMPORT,",
          "57:     NJS_VMCODE_AWAIT,",
          "59:     NJS_VMCODE_TRY_START,",
          "60:     NJS_VMCODE_THROW,",
          "61:     NJS_VMCODE_TRY_BREAK,",
          "",
          "[Removed Lines]",
          "49:     NJS_VMCODE_THIS,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:     NJS_VMCODE_TRY_END,",
          "64:     NJS_VMCODE_CATCH,",
          "65:     NJS_VMCODE_FINALLY,",
          "67:     NJS_VMCODE_LET,",
          "68:     NJS_VMCODE_LET_UPDATE,",
          "69:     NJS_VMCODE_INITIALIZATION_TEST,",
          "70:     NJS_VMCODE_NOT_INITIALIZED,",
          "71:     NJS_VMCODE_ASSIGNMENT_ERROR,",
          "73:     NJS_VMCODE_ERROR,",
          "81:     NJS_VMCODE_PROPERTY_GET,",
          "82:     NJS_VMCODE_INCREMENT,",
          "83:     NJS_VMCODE_POST_INCREMENT,",
          "",
          "[Removed Lines]",
          "75:     NJS_VMCODE_NORET = 127",
          "76: };",
          "79: enum {",
          "80:     NJS_VMCODE_MOVE = NJS_VMCODE_NORET + 1,",
          "",
          "[Added Lines]",
          "69:     NJS_VMCODE_MOVE,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "127:     NJS_VMCODE_ARRAY,",
          "128:     NJS_VMCODE_FUNCTION,",
          "129:     NJS_VMCODE_REGEXP,",
          "131:     NJS_VMCODE_INSTANCE_OF,",
          "132:     NJS_VMCODE_TYPEOF,",
          "133:     NJS_VMCODE_VOID,",
          "134:     NJS_VMCODE_DELETE,",
          "135:     NJS_VMCODE_DEBUGGER,",
          "138: };",
          "",
          "[Removed Lines]",
          "137:     NJS_VMCODE_NOP = 255",
          "",
          "[Added Lines]",
          "118:     NJS_VMCODES",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "457:                        (code != NULL) ? &code->name : &njs_entry_unknown);    \\",
          "458:         } while (0);                                                          \\",
          "459:     }",
          "460: #else",
          "461: #define njs_vmcode_debug(vm, pc, prefix)",
          "462: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "442: #define njs_vmcode_debug_opcode()                                             \\",
          "443:     if (vm->options.opcode_debug) {                                           \\",
          "444:         njs_disassemble(pc, NULL, 1, NULL);                                   \\",
          "445:     }",
          "448: #define njs_vmcode_debug_opcode()",
          "",
          "---------------"
        ]
      }
    }
  ]
}