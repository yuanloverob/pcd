{
  "cve_id": "CVE-2022-1852",
  "cve_desc": "A NULL pointer dereference flaw was found in the Linux kernel\u2019s KVM module, which can lead to a denial of service in the x86_emulate_insn in arch/x86/kvm/emulate.c. This flaw occurs while executing an illegal instruction in guest in the Intel CPU.",
  "repo": "torvalds/linux",
  "patch_hash": "fee060cd52d69c114b62d1a2948ea9648b5131f9",
  "patch_info": {
    "commit_hash": "fee060cd52d69c114b62d1a2948ea9648b5131f9",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/fee060cd52d69c114b62d1a2948ea9648b5131f9",
    "files": [
      "arch/x86/kvm/x86.c"
    ],
    "message": "KVM: x86: avoid calling x86 emulator without a decoded instruction\n\nWhenever x86_decode_emulated_instruction() detects a breakpoint, it\nreturns the value that kvm_vcpu_check_breakpoint() writes into its\npass-by-reference second argument.  Unfortunately this is completely\nbogus because the expected outcome of x86_decode_emulated_instruction\nis an EMULATION_* value.\n\nThen, if kvm_vcpu_check_breakpoint() does \"*r = 0\" (corresponding to\na KVM_EXIT_DEBUG userspace exit), it is misunderstood as EMULATION_OK\nand x86_emulate_instruction() is called without having decoded the\ninstruction.  This causes various havoc from running with a stale\nemulation context.\n\nThe fix is to move the call to kvm_vcpu_check_breakpoint() where it was\nbefore commit 4aa2691dcbd3 (\"KVM: x86: Factor out x86 instruction\nemulation with decoding\") introduced x86_decode_emulated_instruction().\nThe other caller of the function does not need breakpoint checks,\nbecause it is invoked as part of a vmexit and the processor has already\nchecked those before executing the instruction that #GP'd.\n\nThis fixes CVE-2022-1852.\n\nReported-by: Qiuhao Li <qiuhao@sysec.org>\nReported-by: Gaoning Pan <pgn@zju.edu.cn>\nReported-by: Yongkang Jia <kangel@zju.edu.cn>\nFixes: 4aa2691dcbd3 (\"KVM: x86: Factor out x86 instruction emulation with decoding\")\nCc: stable@vger.kernel.org\nSigned-off-by: Sean Christopherson <seanjc@google.com>\nMessage-Id: <20220311032801.3467418-2-seanjc@google.com>\n[Rewrote commit message according to Qiuhao's report, since a patch\n already existed to fix the bug. - Paolo]\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
    "before_after_code_files": [
      "arch/x86/kvm/x86.c||arch/x86/kvm/x86.c"
    ]
  },
  "patch_diff": {
    "arch/x86/kvm/x86.c||arch/x86/kvm/x86.c": [
      "File: arch/x86/kvm/x86.c -> arch/x86/kvm/x86.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "8296: }",
      "8297: EXPORT_SYMBOL_GPL(kvm_skip_emulated_instruction);",
      "8300: {",
      "8301:  if (unlikely(vcpu->guest_debug & KVM_GUESTDBG_USE_HW_BP) &&",
      "8302:      (vcpu->arch.guest_debug_dr7 & DR7_BP_EN_MASK)) {",
      "",
      "[Removed Lines]",
      "8299: static bool kvm_vcpu_check_breakpoint(struct kvm_vcpu *vcpu, int *r)",
      "",
      "[Added Lines]",
      "8299: static bool kvm_vcpu_check_code_breakpoint(struct kvm_vcpu *vcpu, int *r)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "8365: }",
      "8370: int x86_decode_emulated_instruction(struct kvm_vcpu *vcpu, int emulation_type,",
      "8371:         void *insn, int insn_len)",
      "8372: {",
      "8374:  struct x86_emulate_ctxt *ctxt = vcpu->arch.emulate_ctxt;",
      "8376:  init_emulate_ctxt(vcpu);",
      "8387:  r = x86_decode_insn(ctxt, insn, insn_len, emulation_type);",
      "8389:  trace_kvm_emulate_insn_start(vcpu);",
      "",
      "[Removed Lines]",
      "8373:  int r = EMULATION_OK;",
      "8383:  if (!(emulation_type & EMULTYPE_SKIP) &&",
      "8384:      kvm_vcpu_check_breakpoint(vcpu, &r))",
      "8385:   return r;",
      "",
      "[Added Lines]",
      "8381:  int r;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "8416:  if (!(emulation_type & EMULTYPE_NO_DECODE)) {",
      "8417:   kvm_clear_exception_queue(vcpu);",
      "8419:   r = x86_decode_emulated_instruction(vcpu, emulation_type,",
      "8420:           insn, insn_len);",
      "8421:   if (r != EMULATION_OK)  {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "8422:   if (!(emulation_type & EMULTYPE_SKIP) &&",
      "8423:       kvm_vcpu_check_code_breakpoint(vcpu, &r))",
      "8424:    return r;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "750f8fcb261ae350af7a2467721e76082b527cbf",
      "candidate_info": {
        "commit_hash": "750f8fcb261ae350af7a2467721e76082b527cbf",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/750f8fcb261ae350af7a2467721e76082b527cbf",
        "files": [
          "arch/x86/kvm/x86.c"
        ],
        "message": "KVM: x86: Don't check for code breakpoints when emulating on exception\n\nDon't check for code breakpoints during instruction emulation if the\nemulation was triggered by exception interception.  Code breakpoints are\nthe highest priority fault-like exception, and KVM only emulates on\nexceptions that are fault-like.  Thus, if hardware signaled a different\nexception, then the vCPU is already passed the stage of checking for\nhardware breakpoints.\n\nThis is likely a glorified nop in terms of functionality, and is more for\nclarification and is technically an optimization.  Intel's SDM explicitly\nstates vmcs.GUEST_RFLAGS.RF on exception interception is the same as the\nvalue that would have been saved on the stack had the exception not been\nintercepted, i.e. will be '1' due to all fault-like exceptions setting RF\nto '1'.  AMD says \"guest state saved ... is the processor state as of the\nmoment the intercept triggers\", but that begs the question, \"when does\nthe intercept trigger?\".\n\nSigned-off-by: Sean Christopherson <seanjc@google.com>\nReviewed-by: Maxim Levitsky <mlevitsk@redhat.com>\nLink: https://lore.kernel.org/r/20220830231614.3580124-4-seanjc@google.com\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
        "before_after_code_files": [
          "arch/x86/kvm/x86.c||arch/x86/kvm/x86.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/x86/kvm/x86.c||arch/x86/kvm/x86.c"
          ],
          "candidate": [
            "arch/x86/kvm/x86.c||arch/x86/kvm/x86.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/x86/kvm/x86.c||arch/x86/kvm/x86.c": [
          "File: arch/x86/kvm/x86.c -> arch/x86/kvm/x86.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8547: }",
          "8548: EXPORT_SYMBOL_GPL(kvm_skip_emulated_instruction);",
          "8551: {",
          "8552:  if (unlikely(vcpu->guest_debug & KVM_GUESTDBG_USE_HW_BP) &&",
          "8553:      (vcpu->arch.guest_debug_dr7 & DR7_BP_EN_MASK)) {",
          "8554:   struct kvm_run *kvm_run = vcpu->run;",
          "",
          "[Removed Lines]",
          "8550: static bool kvm_vcpu_check_code_breakpoint(struct kvm_vcpu *vcpu, int *r)",
          "",
          "[Added Lines]",
          "8550: static bool kvm_vcpu_check_code_breakpoint(struct kvm_vcpu *vcpu,",
          "8551:         int emulation_type, int *r)",
          "8553:  WARN_ON_ONCE(emulation_type & EMULTYPE_NO_DECODE);",
          "8569:  if (emulation_type & (EMULTYPE_NO_DECODE | EMULTYPE_SKIP |",
          "8570:          EMULTYPE_TRAP_UD | EMULTYPE_VMWARE_GP | EMULTYPE_PF))",
          "8571:   return false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8675:    return r;",
          "8677:   r = x86_decode_emulated_instruction(vcpu, emulation_type,",
          "",
          "[Removed Lines]",
          "8673:   if (!(emulation_type & EMULTYPE_SKIP) &&",
          "8674:       kvm_vcpu_check_code_breakpoint(vcpu, &r))",
          "",
          "[Added Lines]",
          "8694:   if (kvm_vcpu_check_code_breakpoint(vcpu, emulation_type, &r))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "da6393cdd8aaa354b3a2437cd73ebb34cac958e3",
      "candidate_info": {
        "commit_hash": "da6393cdd8aaa354b3a2437cd73ebb34cac958e3",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/da6393cdd8aaa354b3a2437cd73ebb34cac958e3",
        "files": [
          "arch/x86/kvm/x86.c"
        ],
        "message": "KVM: X86: Fix warning caused by stale emulation context\n\nReported by syzkaller:\n\n  WARNING: CPU: 7 PID: 10526 at linux/arch/x86/kvm//x86.c:7621 x86_emulate_instruction+0x41b/0x510 [kvm]\n  RIP: 0010:x86_emulate_instruction+0x41b/0x510 [kvm]\n  Call Trace:\n   kvm_mmu_page_fault+0x126/0x8f0 [kvm]\n   vmx_handle_exit+0x11e/0x680 [kvm_intel]\n   vcpu_enter_guest+0xd95/0x1b40 [kvm]\n   kvm_arch_vcpu_ioctl_run+0x377/0x6a0 [kvm]\n   kvm_vcpu_ioctl+0x389/0x630 [kvm]\n   __x64_sys_ioctl+0x8e/0xd0\n   do_syscall_64+0x3c/0xb0\n   entry_SYSCALL_64_after_hwframe+0x44/0xae\n\nCommit 4a1e10d5b5d8 (\"KVM: x86: handle hardware breakpoints during emulation())\nadds hardware breakpoints check before emulation the instruction and parts of\nemulation context initialization, actually we don't have the EMULTYPE_NO_DECODE flag\nhere and the emulation context will not be reused. Commit c8848cee74ff (\"KVM: x86:\nset ctxt->have_exception in x86_decode_insn()) triggers the warning because it\ncatches the stale emulation context has #UD, however, it is not during instruction\ndecoding which should result in EMULATION_FAILED. This patch fixes it by moving\nthe second part emulation context initialization into init_emulate_ctxt() and\nbefore hardware breakpoints check. The ctxt->ud will be dropped by a follow-up\npatch.\n\nsyzkaller source: https://syzkaller.appspot.com/x/repro.c?x=134683fdd00000\n\nReported-by: syzbot+71271244f206d17f6441@syzkaller.appspotmail.com\nFixes: 4a1e10d5b5d8 (KVM: x86: handle hardware breakpoints during emulation)\nSigned-off-by: Wanpeng Li <wanpengli@tencent.com>\nReviewed-by: Sean Christopherson <seanjc@google.com>\nMessage-Id: <1622160097-37633-1-git-send-email-wanpengli@tencent.com>",
        "before_after_code_files": [
          "arch/x86/kvm/x86.c||arch/x86/kvm/x86.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/x86/kvm/x86.c||arch/x86/kvm/x86.c"
          ],
          "candidate": [
            "arch/x86/kvm/x86.c||arch/x86/kvm/x86.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/x86/kvm/x86.c||arch/x86/kvm/x86.c": [
          "File: arch/x86/kvm/x86.c -> arch/x86/kvm/x86.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7228:  BUILD_BUG_ON(HF_SMM_MASK != X86EMUL_SMM_MASK);",
          "7229:  BUILD_BUG_ON(HF_SMM_INSIDE_NMI_MASK != X86EMUL_SMM_INSIDE_NMI_MASK);",
          "7231:  init_decode_cache(ctxt);",
          "7232:  vcpu->arch.emulate_regs_need_sync_from_vcpu = false;",
          "7233: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7231:  ctxt->interruptibility = 0;",
          "7232:  ctxt->have_exception = false;",
          "7233:  ctxt->exception.vector = -1;",
          "7234:  ctxt->perm_ok = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7563:      kvm_vcpu_check_breakpoint(vcpu, &r))",
          "7564:   return r;",
          "7571:  ctxt->ud = emulation_type & EMULTYPE_TRAP_UD;",
          "7573:  r = x86_decode_insn(ctxt, insn, insn_len);",
          "",
          "[Removed Lines]",
          "7566:  ctxt->interruptibility = 0;",
          "7567:  ctxt->have_exception = false;",
          "7568:  ctxt->exception.vector = -1;",
          "7569:  ctxt->perm_ok = false;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b35491e66c87946f380ebf8ab10a7e1f795e5ece",
      "candidate_info": {
        "commit_hash": "b35491e66c87946f380ebf8ab10a7e1f795e5ece",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/b35491e66c87946f380ebf8ab10a7e1f795e5ece",
        "files": [
          "arch/x86/kvm/emulate.c",
          "arch/x86/kvm/kvm_emulate.h",
          "arch/x86/kvm/x86.c"
        ],
        "message": "KVM: X86: Kill off ctxt->ud\n\nctxt->ud is consumed only by x86_decode_insn(), we can kill it off by\npassing emulation_type to x86_decode_insn() and dropping ctxt->ud\naltogether. Tracking that info in ctxt for literally one call is silly.\n\nSuggested-by: Sean Christopherson <seanjc@google.com>\nSigned-off-by: Wanpeng Li <wanpengli@tencent.com>\nReviewed-by: Sean Christopherson <seanjc@google.com>\nMessage-Id: <1622160097-37633-2-git-send-email-wanpengli@tencent.com>",
        "before_after_code_files": [
          "arch/x86/kvm/emulate.c||arch/x86/kvm/emulate.c",
          "arch/x86/kvm/kvm_emulate.h||arch/x86/kvm/kvm_emulate.h",
          "arch/x86/kvm/x86.c||arch/x86/kvm/x86.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/x86/kvm/x86.c||arch/x86/kvm/x86.c"
          ],
          "candidate": [
            "arch/x86/kvm/x86.c||arch/x86/kvm/x86.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/x86/kvm/emulate.c||arch/x86/kvm/emulate.c": [
          "File: arch/x86/kvm/emulate.c -> arch/x86/kvm/emulate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5111:  return rc;",
          "5112: }",
          "5115: {",
          "5116:  int rc = X86EMUL_CONTINUE;",
          "5117:  int mode = ctxt->mode;",
          "",
          "[Removed Lines]",
          "5114: int x86_decode_insn(struct x86_emulate_ctxt *ctxt, void *insn, int insn_len)",
          "",
          "[Added Lines]",
          "5114: int x86_decode_insn(struct x86_emulate_ctxt *ctxt, void *insn, int insn_len, int emulation_type)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5323:  ctxt->execute = opcode.u.execute;",
          "5326:   return EMULATION_FAILED;",
          "5328:  if (unlikely(ctxt->d &",
          "",
          "[Removed Lines]",
          "5325:  if (unlikely(ctxt->ud) && likely(!(ctxt->d & EmulateOnUD)))",
          "",
          "[Added Lines]",
          "5325:  if (unlikely(emulation_type & EMULTYPE_TRAP_UD) &&",
          "5326:      likely(!(ctxt->d & EmulateOnUD)))",
          "",
          "---------------"
        ],
        "arch/x86/kvm/kvm_emulate.h||arch/x86/kvm/kvm_emulate.h": [
          "File: arch/x86/kvm/kvm_emulate.h -> arch/x86/kvm/kvm_emulate.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "491: #define X86EMUL_MODE_HOST X86EMUL_MODE_PROT64",
          "492: #endif",
          "495: bool x86_page_table_writing_insn(struct x86_emulate_ctxt *ctxt);",
          "496: #define EMULATION_FAILED -1",
          "497: #define EMULATION_OK 0",
          "",
          "[Removed Lines]",
          "494: int x86_decode_insn(struct x86_emulate_ctxt *ctxt, void *insn, int insn_len);",
          "",
          "[Added Lines]",
          "493: int x86_decode_insn(struct x86_emulate_ctxt *ctxt, void *insn, int insn_len, int emulation_type);",
          "",
          "---------------"
        ],
        "arch/x86/kvm/x86.c||arch/x86/kvm/x86.c": [
          "File: arch/x86/kvm/x86.c -> arch/x86/kvm/x86.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7568:      kvm_vcpu_check_breakpoint(vcpu, &r))",
          "7569:   return r;",
          "7575:  trace_kvm_emulate_insn_start(vcpu);",
          "7576:  ++vcpu->stat.insn_emulation;",
          "",
          "[Removed Lines]",
          "7571:  ctxt->ud = emulation_type & EMULTYPE_TRAP_UD;",
          "7573:  r = x86_decode_insn(ctxt, insn, insn_len);",
          "",
          "[Added Lines]",
          "7571:  r = x86_decode_insn(ctxt, insn, insn_len, emulation_type);",
          "",
          "---------------"
        ]
      }
    }
  ]
}