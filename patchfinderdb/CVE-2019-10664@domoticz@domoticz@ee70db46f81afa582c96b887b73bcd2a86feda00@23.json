{
  "cve_id": "CVE-2019-10664",
  "cve_desc": "Domoticz before 4.10578 allows SQL Injection via the idx parameter in CWebServer::GetFloorplanImage in WebServer.cpp.",
  "repo": "domoticz/domoticz",
  "patch_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
  "patch_info": {
    "commit_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/ee70db46f81afa582c96b887b73bcd2a86feda00",
    "files": [
      "main/WebServer.cpp"
    ],
    "message": "Fixed possible SQL Injection Vulnerability (Thanks to Fabio Carretto!)",
    "before_after_code_files": [
      "main/WebServer.cpp||main/WebServer.cpp"
    ]
  },
  "patch_diff": {
    "main/WebServer.cpp||main/WebServer.cpp": [
      "File: main/WebServer.cpp -> main/WebServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10772:     return;",
      "10773:    }",
      "10774:    std::vector<std::vector<std::string> > result;",
      "10776:    if (result.empty())",
      "10777:     return;",
      "10778:    reply::set_content(&rep, result[0][0].begin(), result[0][0].end());",
      "",
      "[Removed Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%s\", idx.c_str());",
      "",
      "[Added Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%d\", atol(idx.c_str()));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "75069fe9b19cc1feb31d376422a42c3cfc1e2f28",
      "candidate_info": {
        "commit_hash": "75069fe9b19cc1feb31d376422a42c3cfc1e2f28",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/75069fe9b19cc1feb31d376422a42c3cfc1e2f28",
        "files": [
          "hardware/Kodi.cpp"
        ],
        "message": "Update: Handle new OnResume message (replaces OnPlay when playback resumes)",
        "before_after_code_files": [
          "hardware/Kodi.cpp||hardware/Kodi.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/Kodi.cpp||hardware/Kodi.cpp": [
          "File: hardware/Kodi.cpp -> hardware/Kodi.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "231:         m_CurrentStatus.Status(MSTAT_ON);",
          "232:         UpdateStatus();",
          "233:        }",
          "235:        {",
          "236:         m_CurrentStatus.Clear();",
          "237:         m_CurrentStatus.PlayerID(root[\"params\"][\"data\"][\"player\"][\"playerid\"].asInt());",
          "",
          "[Removed Lines]",
          "234:        else if (root[\"method\"] == \"Player.OnPlay\")",
          "",
          "[Added Lines]",
          "234:        else if ((root[\"method\"] == \"Player.OnPlay\") || (root[\"method\"] == \"Player.OnResume\"))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "249:          m_CurrentStatus.Status(MSTAT_VIDEO);",
          "250:         else",
          "251:         {",
          "253:         }",
          "255:         if (m_CurrentStatus.PlayerID() != \"\")  // if we now have a player id then request more details",
          "",
          "[Removed Lines]",
          "252:          _log.Log(LOG_ERROR, \"Kodi: (%s) Message error, unknown type in OnPlay message: '%s' from '%s'\", m_Name.c_str(), root[\"params\"][\"data\"][\"item\"][\"type\"].asCString(), pMessage.c_str());",
          "",
          "[Added Lines]",
          "252:          _log.Log(LOG_ERROR, \"Kodi: (%s) Message error, unknown type in OnPlay/OnResume message: '%s' from '%s'\", m_Name.c_str(), root[\"params\"][\"data\"][\"item\"][\"type\"].asCString(), pMessage.c_str());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e4ef8eea999e3a776651591d3b83010e4f468b2d",
      "candidate_info": {
        "commit_hash": "e4ef8eea999e3a776651591d3b83010e4f468b2d",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/e4ef8eea999e3a776651591d3b83010e4f468b2d",
        "files": [
          "www/app/report/EnergyMultiCounterReport.js"
        ],
        "message": "P1 Report graph tooltip now displays 'total' field again",
        "before_after_code_files": [
          "www/app/report/EnergyMultiCounterReport.js||www/app/report/EnergyMultiCounterReport.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "www/app/report/EnergyMultiCounterReport.js||www/app/report/EnergyMultiCounterReport.js": [
          "File: www/app/report/EnergyMultiCounterReport.js -> www/app/report/EnergyMultiCounterReport.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "370:                     min: 0",
          "371:                 },",
          "372:                 tooltip: {",
          "375:                 },",
          "376:                 plotOptions: {",
          "377:                     column: {",
          "",
          "[Removed Lines]",
          "373:      valueDecimals: 3,",
          "374:                     valueSuffix: ' ' + vm.unit",
          "",
          "[Added Lines]",
          "373:      formatter: function () {",
          "374:       return $.t(Highcharts.dateFormat('%A', this.x)) + ' ' + Highcharts.dateFormat('%Y-%m-%d', this.x) + '<br/>' + $.t(this.series.name) + ': ' + Highcharts.numberFormat(this.y,3) + ' ' + vm.unit + '<br/>Total: ' + this.point.stackTotal + ' ' + vm.unit;",
          "375:      }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "62274b5b24e99749e5aaf53d0593d1b50296f762",
      "candidate_info": {
        "commit_hash": "62274b5b24e99749e5aaf53d0593d1b50296f762",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/62274b5b24e99749e5aaf53d0593d1b50296f762",
        "files": [
          "hardware/XiaomiGateway.cpp",
          "main/EventSystem.cpp",
          "main/SQLHelper.cpp",
          "main/SQLHelper.h",
          "main/WebServer.cpp"
        ],
        "message": "Renamed SaveUserVariable function to comply with rest of the code",
        "before_after_code_files": [
          "hardware/XiaomiGateway.cpp||hardware/XiaomiGateway.cpp",
          "main/EventSystem.cpp||main/EventSystem.cpp",
          "main/SQLHelper.cpp||main/SQLHelper.cpp",
          "main/SQLHelper.h||main/SQLHelper.h",
          "main/WebServer.cpp||main/WebServer.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [
            "main/WebServer.cpp||main/WebServer.cpp"
          ],
          "candidate": [
            "main/WebServer.cpp||main/WebServer.cpp"
          ]
        }
      },
      "candidate_diff": {
        "hardware/XiaomiGateway.cpp||hardware/XiaomiGateway.cpp": [
          "File: hardware/XiaomiGateway.cpp -> hardware/XiaomiGateway.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "650:    }",
          "651:   }",
          "652:   else if (switchtype == STYPE_OnOff && Name == \"Xiaomi Gateway MP3\") {",
          "654:   }",
          "655:  }",
          "656:  else {",
          "",
          "[Removed Lines]",
          "653:    m_sql.SaveUserVariable(\"XiaomiMP3\", \"0\", \"10001\");",
          "",
          "[Added Lines]",
          "653:    m_sql.AddUserVariable(\"XiaomiMP3\", \"0\", \"10001\");",
          "",
          "---------------"
        ],
        "main/EventSystem.cpp||main/EventSystem.cpp": [
          "File: main/EventSystem.cpp -> main/EventSystem.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1342:  boost::unique_lock<boost::shared_mutex> uservariablesMutexLock(m_uservariablesMutex);",
          "1344:  std::map<uint64_t, _tUserVariable>::iterator itt = m_uservariables.find(ulDevID);",
          "1367:  }",
          "1368: }",
          "1370: std::string CEventSystem::UpdateSingleState(const uint64_t ulDevID, const std::string &devname, const int nValue, const char* sValue, const unsigned char devType, const unsigned char subType, const _eSwitchType switchType, const std::string &lastUpdate, const unsigned char lastLevel, const std::map<std::string, std::string> & options)",
          "",
          "[Removed Lines]",
          "1345:  if (itt != m_uservariables.end())",
          "1346:  {",
          "1347:   _tUserVariable replaceitem = itt->second;",
          "1348:   if (!varName.empty())",
          "1349:    replaceitem.variableName = varName;",
          "1350:   if (!varValue.empty())",
          "1351:    replaceitem.variableValue = varValue;",
          "1352:   if (varType != -1)",
          "1353:    replaceitem.variableType = varType;",
          "1355:   if (GetEventTrigger(ulDevID, REASON_USERVARIABLE, false))",
          "1356:   {",
          "1357:    _tEventQueue item;",
          "1358:    item.reason = REASON_USERVARIABLE;",
          "1359:    item.id = ulDevID;",
          "1360:    item.sValue = varValue;",
          "1361:    item.lastUpdate = itt->second.lastUpdate;",
          "1362:    m_eventqueue.push(item);",
          "1363:   }",
          "1364:   replaceitem.lastUpdate = lastUpdate;",
          "1365:   itt->second = replaceitem;",
          "",
          "[Added Lines]",
          "1345:  if (itt == m_uservariables.end())",
          "1346:   return; //not found",
          "1348:  _tUserVariable replaceitem = itt->second;",
          "1350:  if (!varName.empty())",
          "1351:   replaceitem.variableName = varName;",
          "1352:  if (!varValue.empty())",
          "1353:   replaceitem.variableValue = varValue;",
          "1354:  if (varType != -1)",
          "1355:   replaceitem.variableType = varType;",
          "1357:  if (GetEventTrigger(ulDevID, REASON_USERVARIABLE, false))",
          "1358:  {",
          "1359:   _tEventQueue item;",
          "1360:   item.reason = REASON_USERVARIABLE;",
          "1361:   item.id = ulDevID;",
          "1362:   item.sValue = varValue;",
          "1363:   item.lastUpdate = itt->second.lastUpdate;",
          "1364:   m_eventqueue.push(item);",
          "1366:  replaceitem.lastUpdate = lastUpdate;",
          "1367:  itt->second = replaceitem;",
          "",
          "---------------"
        ],
        "main/SQLHelper.cpp||main/SQLHelper.cpp": [
          "File: main/SQLHelper.cpp -> main/SQLHelper.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "7897:  {",
          "7898:   m_mainworker.m_eventsystem.GetCurrentUserVariables();",
          "7899:  }",
          "7901:  return \"OK\";",
          "7903: }",
          "7906: {",
          "7907:  int typei = atoi(vartype.c_str());",
          "7908:  std::string dupeName = CheckUserVariableName(varname);",
          "",
          "[Removed Lines]",
          "7905: std::string CSQLHelper::SaveUserVariable(const std::string &varname, const std::string &vartype, const std::string &varvalue)",
          "",
          "[Added Lines]",
          "7903: std::string CSQLHelper::AddUserVariable(const std::string &varname, const std::string &vartype, const std::string &varvalue)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7916:  std::string szVarValue = CURLEncode::URLDecode(varvalue.c_str());",
          "7917:  std::vector<std::vector<std::string> > result;",
          "7924:  if (m_bEnableEventSystem)",
          "7925:  {",
          "7926:   m_mainworker.m_eventsystem.GetCurrentUserVariables();",
          "7930:   if (!result.empty())",
          "7931:   {",
          "7932:    std::vector<std::string> sd = result[0];",
          "",
          "[Removed Lines]",
          "7918:  safe_query(\"INSERT INTO UserVariables (Name,ValueType,Value) VALUES ('%q','%d','%q')\",",
          "7919:   varname.c_str(),",
          "7920:   typei,",
          "7921:   szVarValue.c_str()",
          "7922:  );",
          "7927:   result = safe_query(\"SELECT ID, LastUpdate FROM UserVariables WHERE (Name == '%q')\",",
          "7928:    varname.c_str()",
          "7929:   );",
          "",
          "[Added Lines]",
          "7916:  safe_query(\"INSERT INTO UserVariables (Name,ValueType,Value) VALUES ('%q','%d','%q')\", varname.c_str(), typei, szVarValue.c_str());",
          "7921:   result = safe_query(\"SELECT ID, LastUpdate FROM UserVariables WHERE (Name == '%q')\", varname.c_str());",
          "",
          "---------------"
        ],
        "main/SQLHelper.h||main/SQLHelper.h": [
          "File: main/SQLHelper.h -> main/SQLHelper.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "377:  void safe_exec_no_return(const char *fmt, ...);",
          "378:  bool safe_UpdateBlobInTableWithID(const std::string &Table, const std::string &Column, const std::string &sID, const std::string &BlobData);",
          "379:  bool DoesColumnExistsInTable(const std::string &columnname, const std::string &tablename);",
          "382:  std::string UpdateUserVariable(const std::string &idx, const std::string &varname, const std::string &vartype, const std::string &varvalue, const bool eventtrigger);",
          "383:  std::vector<std::vector<std::string> > GetUserVariables();",
          "385:  uint64_t CreateDevice(const int HardwareID, const int SensorType, const int SensorSubType, std::string &devname, const unsigned long nid, const std::string &soptions);",
          "",
          "[Removed Lines]",
          "380:  std::string DeleteUserVariable(const std::string &idx);",
          "381:  std::string SaveUserVariable(const std::string &varname, const std::string &vartype, const std::string &varvalue);",
          "",
          "[Added Lines]",
          "380:  std::string AddUserVariable(const std::string &varname, const std::string &vartype, const std::string &varvalue);",
          "382:  std::string DeleteUserVariable(const std::string &idx);",
          "383:  std::string CheckUserVariable(const int vartype, const std::string &varvalue);",
          "384:  std::string CheckUserVariableName(const std::string &varname);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "484:  void AddCalendarUpdatePercentage();",
          "485:  void AddCalendarUpdateFan();",
          "486:  void CleanupShortLog();",
          "489:  bool CheckDate(const std::string &sDate, int &d, int &m, int &y);",
          "490:  bool CheckDateSQL(const std::string &sDate);",
          "491:  bool CheckDateTimeSQL(const std::string &sDateTime);",
          "",
          "[Removed Lines]",
          "487:  std::string CheckUserVariable(const int vartype, const std::string &varvalue);",
          "488:  std::string CheckUserVariableName(const std::string &varname);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "main/WebServer.cpp||main/WebServer.cpp": [
          "File: main/WebServer.cpp -> main/WebServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1905:     )",
          "1906:     return;",
          "1910:   }",
          "1912:   void CWebServer::Cmd_UpdateUserVariable(WebEmSession & session, const request& req, Json::Value &root)",
          "",
          "[Removed Lines]",
          "1908:    root[\"status\"] = m_sql.SaveUserVariable(variablename, variabletype, variablevalue);",
          "1909:    root[\"title\"] = \"SaveUserVariable\";",
          "",
          "[Added Lines]",
          "1908:    root[\"status\"] = m_sql.AddUserVariable(variablename, variabletype, variablevalue);",
          "1909:    root[\"title\"] = \"AddUserVariable\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "696904b8c9ae85b7ac6ec2a3cff51c2f99a3f4f3",
      "candidate_info": {
        "commit_hash": "696904b8c9ae85b7ac6ec2a3cff51c2f99a3f4f3",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/696904b8c9ae85b7ac6ec2a3cff51c2f99a3f4f3",
        "files": [
          "www/app/log/DeviceLog.js"
        ],
        "message": "Fix for Wind temperature log",
        "before_after_code_files": [
          "www/app/log/DeviceLog.js||www/app/log/DeviceLog.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "www/app/log/DeviceLog.js||www/app/log/DeviceLog.js": [
          "File: www/app/log/DeviceLog.js -> www/app/log/DeviceLog.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:             if (!vm.device) {",
          "49:                 return undefined;",
          "50:             }",
          "53:         }",
          "55:         function isGraphLog() {",
          "",
          "[Removed Lines]",
          "52:             return (/Temp|Thermostat|Humidity|Radiator/i).test(vm.device.Type)",
          "",
          "[Added Lines]",
          "54:             return (/Temp|Thermostat|Humidity|Radiator|Wind/i).test(vm.device.Type)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9e4716920d712cdb928744e596ad7c043540e9bb",
      "candidate_info": {
        "commit_hash": "9e4716920d712cdb928744e596ad7c043540e9bb",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/9e4716920d712cdb928744e596ad7c043540e9bb",
        "files": [
          "hardware/Winddelen.cpp",
          "main/Helper.cpp"
        ],
        "message": "Fixed compile warning in Helper class O_RDONLY",
        "before_after_code_files": [
          "hardware/Winddelen.cpp||hardware/Winddelen.cpp",
          "main/Helper.cpp||main/Helper.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/Winddelen.cpp||hardware/Winddelen.cpp": [
          "File: hardware/Winddelen.cpp -> hardware/Winddelen.cpp"
        ],
        "main/Helper.cpp||main/Helper.cpp": [
          "File: main/Helper.cpp -> main/Helper.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: #endif",
          "9: #include <sys/types.h>",
          "10: #include <sys/stat.h>",
          "11: #include <fstream>",
          "12: #include <math.h>",
          "13: #include <algorithm>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: #include <fcntl.h>",
          "",
          "---------------"
        ]
      }
    }
  ]
}