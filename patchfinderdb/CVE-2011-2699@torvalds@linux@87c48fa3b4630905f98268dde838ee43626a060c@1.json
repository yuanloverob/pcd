{
  "cve_id": "CVE-2011-2699",
  "cve_desc": "The IPv6 implementation in the Linux kernel before 3.1 does not generate Fragment Identification values separately for each destination, which makes it easier for remote attackers to cause a denial of service (disrupted networking) by predicting these values and sending crafted packets.",
  "repo": "torvalds/linux",
  "patch_hash": "87c48fa3b4630905f98268dde838ee43626a060c",
  "patch_info": {
    "commit_hash": "87c48fa3b4630905f98268dde838ee43626a060c",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/87c48fa3b4630905f98268dde838ee43626a060c",
    "files": [
      "drivers/char/random.c",
      "include/linux/random.h",
      "include/net/inetpeer.h",
      "include/net/ipv6.h",
      "net/ipv4/inetpeer.c",
      "net/ipv6/ip6_output.c",
      "net/ipv6/udp.c"
    ],
    "message": "ipv6: make fragment identifications less predictable\n\nIPv6 fragment identification generation is way beyond what we use for\nIPv4 : It uses a single generator. Its not scalable and allows DOS\nattacks.\n\nNow inetpeer is IPv6 aware, we can use it to provide a more secure and\nscalable frag ident generator (per destination, instead of system wide)\n\nThis patch :\n1) defines a new secure_ipv6_id() helper\n2) extends inet_getid() to provide 32bit results\n3) extends ipv6_select_ident() with a new dest parameter\n\nReported-by: Fernando Gont <fernando@gont.com.ar>\nSigned-off-by: Eric Dumazet <eric.dumazet@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "drivers/char/random.c||drivers/char/random.c",
      "include/linux/random.h||include/linux/random.h",
      "include/net/inetpeer.h||include/net/inetpeer.h",
      "include/net/ipv6.h||include/net/ipv6.h",
      "net/ipv4/inetpeer.c||net/ipv4/inetpeer.c",
      "net/ipv6/ip6_output.c||net/ipv6/ip6_output.c",
      "net/ipv6/udp.c||net/ipv6/udp.c"
    ]
  },
  "patch_diff": {
    "drivers/char/random.c||drivers/char/random.c": [
      "File: drivers/char/random.c -> drivers/char/random.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1523:  return half_md4_transform(hash, keyptr->secret);",
      "1524: }",
      "1526: #ifdef CONFIG_INET",
      "1528: __u32 secure_tcp_sequence_number(__be32 saddr, __be32 daddr,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1526: __u32 secure_ipv6_id(const __be32 daddr[4])",
      "1527: {",
      "1528:  const struct keydata *keyptr;",
      "1529:  __u32 hash[4];",
      "1531:  keyptr = get_keyptr();",
      "1533:  hash[0] = (__force __u32)daddr[0];",
      "1534:  hash[1] = (__force __u32)daddr[1];",
      "1535:  hash[2] = (__force __u32)daddr[2];",
      "1536:  hash[3] = (__force __u32)daddr[3];",
      "1538:  return half_md4_transform(hash, keyptr->secret);",
      "1539: }",
      "",
      "---------------"
    ],
    "include/linux/random.h||include/linux/random.h": [
      "File: include/linux/random.h -> include/linux/random.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "58: void generate_random_uuid(unsigned char uuid_out[16]);",
      "60: extern __u32 secure_ip_id(__be32 daddr);",
      "61: extern u32 secure_ipv4_port_ephemeral(__be32 saddr, __be32 daddr, __be16 dport);",
      "62: extern u32 secure_ipv6_port_ephemeral(const __be32 *saddr, const __be32 *daddr,",
      "63:           __be16 dport);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "61: extern __u32 secure_ipv6_id(const __be32 daddr[4]);",
      "",
      "---------------"
    ],
    "include/net/inetpeer.h||include/net/inetpeer.h": [
      "File: include/net/inetpeer.h -> include/net/inetpeer.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "71: }",
      "76: static inline struct inet_peer *inet_getpeer_v4(__be32 v4daddr, int create)",
      "77: {",
      "",
      "[Removed Lines]",
      "74: struct inet_peer *inet_getpeer(struct inetpeer_addr *daddr, int create);",
      "",
      "[Added Lines]",
      "74: struct inet_peer *inet_getpeer(const struct inetpeer_addr *daddr, int create);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "110: {",
      "111:  more++;",
      "112:  inet_peer_refcheck(p);",
      "114: }",
      "",
      "[Removed Lines]",
      "109: static inline __u16 inet_getid(struct inet_peer *p, int more)",
      "113:  return atomic_add_return(more, &p->ip_id_count) - more;",
      "",
      "[Added Lines]",
      "109: static inline int inet_getid(struct inet_peer *p, int more)",
      "111:  int old, new;",
      "114:  do {",
      "115:   old = atomic_read(&p->ip_id_count);",
      "116:   new = old + more;",
      "117:   if (!new)",
      "118:    new = 1;",
      "119:  } while (atomic_cmpxchg(&p->ip_id_count, old, new) != old);",
      "120:  return new;",
      "",
      "---------------"
    ],
    "include/net/ipv6.h||include/net/ipv6.h": [
      "File: include/net/ipv6.h -> include/net/ipv6.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "463:  return __ipv6_addr_diff(a1, a2, sizeof(struct in6_addr));",
      "464: }",
      "",
      "[Removed Lines]",
      "466: static __inline__ void ipv6_select_ident(struct frag_hdr *fhdr)",
      "467: {",
      "468:  static u32 ipv6_fragmentation_id = 1;",
      "469:  static DEFINE_SPINLOCK(ip6_id_lock);",
      "471:  spin_lock_bh(&ip6_id_lock);",
      "472:  fhdr->identification = htonl(ipv6_fragmentation_id);",
      "473:  if (++ipv6_fragmentation_id == 0)",
      "474:   ipv6_fragmentation_id = 1;",
      "475:  spin_unlock_bh(&ip6_id_lock);",
      "476: }",
      "",
      "[Added Lines]",
      "466: extern void ipv6_select_ident(struct frag_hdr *fhdr, struct rt6_info *rt);",
      "",
      "---------------"
    ],
    "net/ipv4/inetpeer.c||net/ipv4/inetpeer.c": [
      "File: net/ipv4/inetpeer.c -> net/ipv4/inetpeer.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "391:  return cnt;",
      "392: }",
      "395: {",
      "396:  struct inet_peer __rcu **stack[PEER_MAXDEPTH], ***stackptr;",
      "397:  struct inet_peer_base *base = family_to_base(daddr->family);",
      "",
      "[Removed Lines]",
      "394: struct inet_peer *inet_getpeer(struct inetpeer_addr *daddr, int create)",
      "",
      "[Added Lines]",
      "394: struct inet_peer *inet_getpeer(const struct inetpeer_addr *daddr, int create)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "436:   p->daddr = *daddr;",
      "437:   atomic_set(&p->refcnt, 1);",
      "438:   atomic_set(&p->rid, 0);",
      "440:   p->tcp_ts_stamp = 0;",
      "441:   p->metrics[RTAX_LOCK-1] = INETPEER_METRICS_NEW;",
      "442:   p->rate_tokens = 0;",
      "",
      "[Removed Lines]",
      "439:   atomic_set(&p->ip_id_count, secure_ip_id(daddr->addr.a4));",
      "",
      "[Added Lines]",
      "439:   atomic_set(&p->ip_id_count,",
      "440:     (daddr->family == AF_INET) ?",
      "441:      secure_ip_id(daddr->addr.a4) :",
      "442:      secure_ipv6_id(daddr->addr.a6));",
      "",
      "---------------"
    ],
    "net/ipv6/ip6_output.c||net/ipv6/ip6_output.c": [
      "File: net/ipv6/ip6_output.c -> net/ipv6/ip6_output.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "596:  return offset;",
      "597: }",
      "599: int ip6_fragment(struct sk_buff *skb, int (*output)(struct sk_buff *))",
      "600: {",
      "601:  struct sk_buff *frag;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "599: void ipv6_select_ident(struct frag_hdr *fhdr, struct rt6_info *rt)",
      "600: {",
      "601:  static atomic_t ipv6_fragmentation_id;",
      "602:  int old, new;",
      "604:  if (rt) {",
      "605:   struct inet_peer *peer;",
      "607:   if (!rt->rt6i_peer)",
      "608:    rt6_bind_peer(rt, 1);",
      "609:   peer = rt->rt6i_peer;",
      "610:   if (peer) {",
      "611:    fhdr->identification = htonl(inet_getid(peer, 0));",
      "612:    return;",
      "613:   }",
      "614:  }",
      "615:  do {",
      "616:   old = atomic_read(&ipv6_fragmentation_id);",
      "617:   new = old + 1;",
      "618:   if (!new)",
      "619:    new = 1;",
      "620:  } while (atomic_cmpxchg(&ipv6_fragmentation_id, old, new) != old);",
      "621:  fhdr->identification = htonl(new);",
      "622: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "680:   skb_reset_network_header(skb);",
      "681:   memcpy(skb_network_header(skb), tmp_hdr, hlen);",
      "684:   fh->nexthdr = nexthdr;",
      "685:   fh->reserved = 0;",
      "686:   fh->frag_off = htons(IP6_MF);",
      "",
      "[Removed Lines]",
      "683:   ipv6_select_ident(fh);",
      "",
      "[Added Lines]",
      "708:   ipv6_select_ident(fh, rt);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "826:   fh->nexthdr = nexthdr;",
      "827:   fh->reserved = 0;",
      "828:   if (!frag_id) {",
      "830:    frag_id = fh->identification;",
      "831:   } else",
      "832:    fh->identification = frag_id;",
      "",
      "[Removed Lines]",
      "829:    ipv6_select_ident(fh);",
      "",
      "[Added Lines]",
      "854:    ipv6_select_ident(fh, rt);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1076:    int getfrag(void *from, char *to, int offset, int len,",
      "1077:    int odd, struct sk_buff *skb),",
      "1078:    void *from, int length, int hh_len, int fragheaderlen,",
      "1081: {",
      "1082:  struct sk_buff *skb;",
      "",
      "[Removed Lines]",
      "1079:    int transhdrlen, int mtu,unsigned int flags)",
      "",
      "[Added Lines]",
      "1104:    int transhdrlen, int mtu,unsigned int flags,",
      "1105:    struct rt6_info *rt)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1120:   skb_shinfo(skb)->gso_size = (mtu - fragheaderlen -",
      "1121:           sizeof(struct frag_hdr)) & ~7;",
      "1122:   skb_shinfo(skb)->gso_type = SKB_GSO_UDP;",
      "1124:   skb_shinfo(skb)->ip6_frag_id = fhdr.identification;",
      "1125:   __skb_queue_tail(&sk->sk_write_queue, skb);",
      "",
      "[Removed Lines]",
      "1123:   ipv6_select_ident(&fhdr);",
      "",
      "[Added Lines]",
      "1149:   ipv6_select_ident(&fhdr, rt);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1287:    err = ip6_ufo_append_data(sk, getfrag, from, length,",
      "1288:         hh_len, fragheaderlen,",
      "1290:    if (err)",
      "1291:     goto error;",
      "1292:    return 0;",
      "",
      "[Removed Lines]",
      "1289:         transhdrlen, mtu, flags);",
      "",
      "[Added Lines]",
      "1315:         transhdrlen, mtu, flags, rt);",
      "",
      "---------------"
    ],
    "net/ipv6/udp.c||net/ipv6/udp.c": [
      "File: net/ipv6/udp.c -> net/ipv6/udp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1359:  fptr = (struct frag_hdr *)(skb_network_header(skb) + unfrag_ip6hlen);",
      "1360:  fptr->nexthdr = nexthdr;",
      "1361:  fptr->reserved = 0;",
      "",
      "[Removed Lines]",
      "1362:  ipv6_select_ident(fptr);",
      "",
      "[Added Lines]",
      "1362:  ipv6_select_ident(fptr, (struct rt6_info *)skb_dst(skb));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8790ca172a1550949804a2ad59ccea310f680c9f",
      "candidate_info": {
        "commit_hash": "8790ca172a1550949804a2ad59ccea310f680c9f",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/8790ca172a1550949804a2ad59ccea310f680c9f",
        "files": [
          "include/net/inetpeer.h",
          "net/ipv4/inetpeer.c"
        ],
        "message": "inetpeer: Kill use of inet_peer_address_t typedef.\n\nThey are verboten these days.\n\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "include/net/inetpeer.h||include/net/inetpeer.h",
          "net/ipv4/inetpeer.c||net/ipv4/inetpeer.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/net/inetpeer.h||include/net/inetpeer.h",
            "net/ipv4/inetpeer.c||net/ipv4/inetpeer.c"
          ],
          "candidate": [
            "include/net/inetpeer.h||include/net/inetpeer.h",
            "net/ipv4/inetpeer.c||net/ipv4/inetpeer.c"
          ]
        }
      },
      "candidate_diff": {
        "include/net/inetpeer.h||include/net/inetpeer.h": [
          "File: include/net/inetpeer.h -> include/net/inetpeer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: #include <net/ipv6.h>",
          "15: #include <asm/atomic.h>",
          "18:  union {",
          "19:   __be32  a4;",
          "20:   __be32  a6[4];",
          "21:  };",
          "22:  __u16 family;",
          "25: struct inet_peer {",
          "27:  struct inet_peer __rcu *avl_left, *avl_right;",
          "29:  __u32   avl_height;",
          "30:  struct list_head unused;",
          "31:  __u32   dtime;  /* the time of last use of not",
          "",
          "[Removed Lines]",
          "17: typedef struct {",
          "23: } inet_peer_address_t;",
          "28:  inet_peer_address_t daddr;",
          "",
          "[Added Lines]",
          "17: struct inetpeer_addr {",
          "23: };",
          "28:  struct inetpeer_addr daddr;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51: void   inet_initpeers(void) __init;",
          "56: static inline struct inet_peer *inet_getpeer_v4(__be32 v4daddr, int create)",
          "57: {",
          "60:  daddr.a4 = v4daddr;",
          "61:  daddr.family = AF_INET;",
          "",
          "[Removed Lines]",
          "54: struct inet_peer *inet_getpeer(inet_peer_address_t *daddr, int create);",
          "58:  inet_peer_address_t daddr;",
          "",
          "[Added Lines]",
          "54: struct inet_peer *inet_getpeer(struct inetpeer_addr *daddr, int create);",
          "58:  struct inetpeer_addr daddr;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "65: static inline struct inet_peer *inet_getpeer_v6(struct in6_addr *v6daddr, int create)",
          "66: {",
          "69:  ipv6_addr_copy((struct in6_addr *)daddr.a6, v6daddr);",
          "70:  daddr.family = AF_INET6;",
          "",
          "[Removed Lines]",
          "67:  inet_peer_address_t daddr;",
          "",
          "[Added Lines]",
          "67:  struct inetpeer_addr daddr;",
          "",
          "---------------"
        ],
        "net/ipv4/inetpeer.c||net/ipv4/inetpeer.c": [
          "File: net/ipv4/inetpeer.c -> net/ipv4/inetpeer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "161:  }",
          "162: }",
          "166: {",
          "167:  int i, n = (a->family == AF_INET ? 1 : 4);",
          "",
          "[Removed Lines]",
          "164: static int addr_compare(const inet_peer_address_t *a,",
          "165:    const inet_peer_address_t *b)",
          "",
          "[Added Lines]",
          "164: static int addr_compare(const struct inetpeer_addr *a,",
          "165:    const struct inetpeer_addr *b)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "215:            struct inet_peer_base *base)",
          "216: {",
          "217:  struct inet_peer *u = rcu_dereference_bh(base->root);",
          "",
          "[Removed Lines]",
          "214: static struct inet_peer *lookup_rcu_bh(const inet_peer_address_t *daddr,",
          "",
          "[Added Lines]",
          "214: static struct inet_peer *lookup_rcu_bh(const struct inetpeer_addr *daddr,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "472: }",
          "476: {",
          "477:  struct inet_peer __rcu **stack[PEER_MAXDEPTH], ***stackptr;",
          "478:  struct inet_peer_base *base = family_to_base(AF_INET);",
          "",
          "[Removed Lines]",
          "475: struct inet_peer *inet_getpeer(inet_peer_address_t *daddr, int create)",
          "",
          "[Added Lines]",
          "475: struct inet_peer *inet_getpeer(struct inetpeer_addr *daddr, int create)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7a71ed899e77cc822abb863e24a422dcf7e9fa33",
      "candidate_info": {
        "commit_hash": "7a71ed899e77cc822abb863e24a422dcf7e9fa33",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/7a71ed899e77cc822abb863e24a422dcf7e9fa33",
        "files": [
          "include/net/inetpeer.h",
          "net/ipv4/inetpeer.c",
          "net/ipv4/tcp_ipv4.c",
          "net/ipv6/tcp_ipv6.c"
        ],
        "message": "inetpeer: Abstract address representation further.\n\nFuture changes will add caching information, and some of\nthese new elements will be addresses.\n\nSince the family is implicit via the ->daddr.family member,\nreplicating the family in ever address we store is entirely\nredundant.\n\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "include/net/inetpeer.h||include/net/inetpeer.h",
          "net/ipv4/inetpeer.c||net/ipv4/inetpeer.c",
          "net/ipv4/tcp_ipv4.c||net/ipv4/tcp_ipv4.c",
          "net/ipv6/tcp_ipv6.c||net/ipv6/tcp_ipv6.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/net/inetpeer.h||include/net/inetpeer.h",
            "net/ipv4/inetpeer.c||net/ipv4/inetpeer.c"
          ],
          "candidate": [
            "include/net/inetpeer.h||include/net/inetpeer.h",
            "net/ipv4/inetpeer.c||net/ipv4/inetpeer.c"
          ]
        }
      },
      "candidate_diff": {
        "include/net/inetpeer.h||include/net/inetpeer.h": [
          "File: include/net/inetpeer.h -> include/net/inetpeer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: #include <net/ipv6.h>",
          "16: #include <asm/atomic.h>",
          "19:  union {",
          "22:  };",
          "24: };",
          "26: struct inet_peer {",
          "",
          "[Removed Lines]",
          "18: struct inetpeer_addr {",
          "20:   __be32  a4;",
          "21:   __be32  a6[4];",
          "23:  __u16 family;",
          "",
          "[Added Lines]",
          "18: struct inetpeer_addr_base {",
          "20:   __be32   a4;",
          "21:   __be32   a6[4];",
          "23: };",
          "25: struct inetpeer_addr {",
          "26:  struct inetpeer_addr_base addr;",
          "27:  __u16    family;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67: {",
          "68:  struct inetpeer_addr daddr;",
          "71:  daddr.family = AF_INET;",
          "72:  return inet_getpeer(&daddr, create);",
          "73: }",
          "",
          "[Removed Lines]",
          "70:  daddr.a4 = v4daddr;",
          "",
          "[Added Lines]",
          "74:  daddr.addr.a4 = v4daddr;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "76: {",
          "77:  struct inetpeer_addr daddr;",
          "80:  daddr.family = AF_INET6;",
          "81:  return inet_getpeer(&daddr, create);",
          "82: }",
          "",
          "[Removed Lines]",
          "79:  ipv6_addr_copy((struct in6_addr *)daddr.a6, v6daddr);",
          "",
          "[Added Lines]",
          "83:  ipv6_addr_copy((struct in6_addr *)daddr.addr.a6, v6daddr);",
          "",
          "---------------"
        ],
        "net/ipv4/inetpeer.c||net/ipv4/inetpeer.c": [
          "File: net/ipv4/inetpeer.c -> net/ipv4/inetpeer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:  int i, n = (a->family == AF_INET ? 1 : 4);",
          "169:  for (i = 0; i < n; i++) {",
          "171:    continue;",
          "173:    return -1;",
          "174:   return 1;",
          "175:  }",
          "",
          "[Removed Lines]",
          "170:   if (a->a6[i] == b->a6[i])",
          "172:   if (a->a6[i] < b->a6[i])",
          "",
          "[Added Lines]",
          "170:   if (a->addr.a6[i] == b->addr.a6[i])",
          "172:   if (a->addr.a6[i] < b->addr.a6[i])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "510:   p->daddr = *daddr;",
          "511:   atomic_set(&p->refcnt, 1);",
          "512:   atomic_set(&p->rid, 0);",
          "514:   p->tcp_ts_stamp = 0;",
          "515:   p->metrics[RTAX_LOCK-1] = INETPEER_METRICS_NEW;",
          "516:   p->rate_tokens = 0;",
          "",
          "[Removed Lines]",
          "513:   atomic_set(&p->ip_id_count, secure_ip_id(daddr->a4));",
          "",
          "[Added Lines]",
          "513:   atomic_set(&p->ip_id_count, secure_ip_id(daddr->addr.a4));",
          "",
          "---------------"
        ],
        "net/ipv4/tcp_ipv4.c||net/ipv4/tcp_ipv4.c": [
          "File: net/ipv4/tcp_ipv4.c -> net/ipv4/tcp_ipv4.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1341:       tcp_death_row.sysctl_tw_recycle &&",
          "1342:       (dst = inet_csk_route_req(sk, req)) != NULL &&",
          "1343:       (peer = rt_get_peer((struct rtable *)dst)) != NULL &&",
          "1345:    inet_peer_refcheck(peer);",
          "1346:    if ((u32)get_seconds() - peer->tcp_ts_stamp < TCP_PAWS_MSL &&",
          "1347:        (s32)(peer->tcp_ts - req->ts_recent) >",
          "",
          "[Removed Lines]",
          "1344:       peer->daddr.a4 == saddr) {",
          "",
          "[Added Lines]",
          "1344:       peer->daddr.addr.a4 == saddr) {",
          "",
          "---------------"
        ],
        "net/ipv6/tcp_ipv6.c||net/ipv6/tcp_ipv6.c": [
          "File: net/ipv6/tcp_ipv6.c -> net/ipv6/tcp_ipv6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1323:       tcp_death_row.sysctl_tw_recycle &&",
          "1324:       (dst = inet6_csk_route_req(sk, req)) != NULL &&",
          "1325:       (peer = rt6_get_peer((struct rt6_info *)dst)) != NULL &&",
          "1327:         &treq->rmt_addr)) {",
          "1328:    inet_peer_refcheck(peer);",
          "1329:    if ((u32)get_seconds() - peer->tcp_ts_stamp < TCP_PAWS_MSL &&",
          "",
          "[Removed Lines]",
          "1326:       ipv6_addr_equal((struct in6_addr *)peer->daddr.a6,",
          "",
          "[Added Lines]",
          "1326:       ipv6_addr_equal((struct in6_addr *)peer->daddr.addr.a6,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6e5714eaf77d79ae1c8b47e3e040ff5411b717ec",
      "candidate_info": {
        "commit_hash": "6e5714eaf77d79ae1c8b47e3e040ff5411b717ec",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/6e5714eaf77d79ae1c8b47e3e040ff5411b717ec",
        "files": [
          "drivers/char/random.c",
          "include/linux/random.h",
          "include/net/secure_seq.h",
          "net/core/Makefile",
          "net/core/secure_seq.c",
          "net/dccp/ipv4.c",
          "net/dccp/ipv6.c",
          "net/ipv4/inet_hashtables.c",
          "net/ipv4/inetpeer.c",
          "net/ipv4/netfilter/nf_nat_proto_common.c",
          "net/ipv4/route.c",
          "net/ipv4/tcp_ipv4.c",
          "net/ipv6/inet6_hashtables.c",
          "net/ipv6/tcp_ipv6.c"
        ],
        "message": "net: Compute protocol sequence numbers and fragment IDs using MD5.\n\nComputers have become a lot faster since we compromised on the\npartial MD4 hash which we use currently for performance reasons.\n\nMD5 is a much safer choice, and is inline with both RFC1948 and\nother ISS generators (OpenBSD, Solaris, etc.)\n\nFurthermore, only having 24-bits of the sequence number be truly\nunpredictable is a very serious limitation.  So the periodic\nregeneration and 8-bit counter have been removed.  We compute and\nuse a full 32-bit sequence number.\n\nFor ipv6, DCCP was found to use a 32-bit truncated initial sequence\nnumber (it needs 43-bits) and that is fixed here as well.\n\nReported-by: Dan Kaminsky <dan@doxpara.com>\nTested-by: Willy Tarreau <w@1wt.eu>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "drivers/char/random.c||drivers/char/random.c",
          "include/linux/random.h||include/linux/random.h",
          "include/net/secure_seq.h||include/net/secure_seq.h",
          "net/core/secure_seq.c||net/core/secure_seq.c",
          "net/dccp/ipv4.c||net/dccp/ipv4.c",
          "net/dccp/ipv6.c||net/dccp/ipv6.c",
          "net/ipv4/inet_hashtables.c||net/ipv4/inet_hashtables.c",
          "net/ipv4/inetpeer.c||net/ipv4/inetpeer.c",
          "net/ipv4/netfilter/nf_nat_proto_common.c||net/ipv4/netfilter/nf_nat_proto_common.c",
          "net/ipv4/route.c||net/ipv4/route.c",
          "net/ipv4/tcp_ipv4.c||net/ipv4/tcp_ipv4.c",
          "net/ipv6/inet6_hashtables.c||net/ipv6/inet6_hashtables.c",
          "net/ipv6/tcp_ipv6.c||net/ipv6/tcp_ipv6.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/char/random.c||drivers/char/random.c",
            "include/linux/random.h||include/linux/random.h",
            "net/ipv4/inetpeer.c||net/ipv4/inetpeer.c"
          ],
          "candidate": [
            "drivers/char/random.c||drivers/char/random.c",
            "include/linux/random.h||include/linux/random.h",
            "net/ipv4/inetpeer.c||net/ipv4/inetpeer.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/char/random.c||drivers/char/random.c": [
          "File: drivers/char/random.c -> drivers/char/random.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1300: };",
          "1450: {",
          "1473:  return 0;",
          "1474: }",
          "",
          "[Removed Lines]",
          "1323: #define F(x, y, z) ((z) ^ ((x) & ((y) ^ (z))))",
          "1324: #define G(x, y, z) (((x) & (y)) + (((x) ^ (y)) & (z)))",
          "1325: #define H(x, y, z) ((x) ^ (y) ^ (z))",
          "1333: #define ROUND(f, a, b, c, d, x, s) \\",
          "1334:  (a += f(b, c, d) + x, a = (a << s) | (a >> (32 - s)))",
          "1335: #define K1 0",
          "1336: #define K2 013240474631UL",
          "1337: #define K3 015666365641UL",
          "1339: #if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)",
          "1341: static __u32 twothirdsMD4Transform(__u32 const buf[4], __u32 const in[12])",
          "1342: {",
          "1343:  __u32 a = buf[0], b = buf[1], c = buf[2], d = buf[3];",
          "1346:  ROUND(F, a, b, c, d, in[ 0] + K1,  3);",
          "1347:  ROUND(F, d, a, b, c, in[ 1] + K1,  7);",
          "1348:  ROUND(F, c, d, a, b, in[ 2] + K1, 11);",
          "1349:  ROUND(F, b, c, d, a, in[ 3] + K1, 19);",
          "1350:  ROUND(F, a, b, c, d, in[ 4] + K1,  3);",
          "1351:  ROUND(F, d, a, b, c, in[ 5] + K1,  7);",
          "1352:  ROUND(F, c, d, a, b, in[ 6] + K1, 11);",
          "1353:  ROUND(F, b, c, d, a, in[ 7] + K1, 19);",
          "1354:  ROUND(F, a, b, c, d, in[ 8] + K1,  3);",
          "1355:  ROUND(F, d, a, b, c, in[ 9] + K1,  7);",
          "1356:  ROUND(F, c, d, a, b, in[10] + K1, 11);",
          "1357:  ROUND(F, b, c, d, a, in[11] + K1, 19);",
          "1360:  ROUND(G, a, b, c, d, in[ 1] + K2,  3);",
          "1361:  ROUND(G, d, a, b, c, in[ 3] + K2,  5);",
          "1362:  ROUND(G, c, d, a, b, in[ 5] + K2,  9);",
          "1363:  ROUND(G, b, c, d, a, in[ 7] + K2, 13);",
          "1364:  ROUND(G, a, b, c, d, in[ 9] + K2,  3);",
          "1365:  ROUND(G, d, a, b, c, in[11] + K2,  5);",
          "1366:  ROUND(G, c, d, a, b, in[ 0] + K2,  9);",
          "1367:  ROUND(G, b, c, d, a, in[ 2] + K2, 13);",
          "1368:  ROUND(G, a, b, c, d, in[ 4] + K2,  3);",
          "1369:  ROUND(G, d, a, b, c, in[ 6] + K2,  5);",
          "1370:  ROUND(G, c, d, a, b, in[ 8] + K2,  9);",
          "1371:  ROUND(G, b, c, d, a, in[10] + K2, 13);",
          "1374:  ROUND(H, a, b, c, d, in[ 3] + K3,  3);",
          "1375:  ROUND(H, d, a, b, c, in[ 7] + K3,  9);",
          "1376:  ROUND(H, c, d, a, b, in[11] + K3, 11);",
          "1377:  ROUND(H, b, c, d, a, in[ 2] + K3, 15);",
          "1378:  ROUND(H, a, b, c, d, in[ 6] + K3,  3);",
          "1379:  ROUND(H, d, a, b, c, in[10] + K3,  9);",
          "1380:  ROUND(H, c, d, a, b, in[ 1] + K3, 11);",
          "1381:  ROUND(H, b, c, d, a, in[ 5] + K3, 15);",
          "1382:  ROUND(H, a, b, c, d, in[ 9] + K3,  3);",
          "1383:  ROUND(H, d, a, b, c, in[ 0] + K3,  9);",
          "1384:  ROUND(H, c, d, a, b, in[ 4] + K3, 11);",
          "1385:  ROUND(H, b, c, d, a, in[ 8] + K3, 15);",
          "1389: }",
          "1390: #endif",
          "1392: #undef ROUND",
          "1393: #undef F",
          "1394: #undef G",
          "1395: #undef H",
          "1396: #undef K1",
          "1397: #undef K2",
          "1398: #undef K3",
          "1401: #define REKEY_INTERVAL (300 * HZ)",
          "1421: #define COUNT_BITS 8",
          "1422: #define COUNT_MASK ((1 << COUNT_BITS) - 1)",
          "1423: #define HASH_BITS 24",
          "1424: #define HASH_MASK ((1 << HASH_BITS) - 1)",
          "1426: static struct keydata {",
          "1428:  __u32 secret[12];",
          "1429: } ____cacheline_aligned ip_keydata[2];",
          "1431: static unsigned int ip_cnt;",
          "1433: static void rekey_seq_generator(struct work_struct *work);",
          "1435: static DECLARE_DELAYED_WORK(rekey_work, rekey_seq_generator);",
          "1449: static void rekey_seq_generator(struct work_struct *work)",
          "1451:  struct keydata *keyptr = &ip_keydata[1 ^ (ip_cnt & 1)];",
          "1453:  get_random_bytes(keyptr->secret, sizeof(keyptr->secret));",
          "1454:  keyptr->count = (ip_cnt & COUNT_MASK) << HASH_BITS;",
          "1455:  smp_wmb();",
          "1456:  ip_cnt++;",
          "1457:  schedule_delayed_work(&rekey_work,",
          "1458:          round_jiffies_relative(REKEY_INTERVAL));",
          "1459: }",
          "1461: static inline struct keydata *get_keyptr(void)",
          "1462: {",
          "1463:  struct keydata *keyptr = &ip_keydata[ip_cnt & 1];",
          "1465:  smp_rmb();",
          "1467:  return keyptr;",
          "1468: }",
          "1470: static __init int seqgen_init(void)",
          "1471: {",
          "1472:  rekey_seq_generator(NULL);",
          "1475: late_initcall(seqgen_init);",
          "1477: #if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)",
          "1478: __u32 secure_tcpv6_sequence_number(__be32 *saddr, __be32 *daddr,",
          "1479:        __be16 sport, __be16 dport)",
          "1480: {",
          "1481:  __u32 seq;",
          "1482:  __u32 hash[12];",
          "1483:  struct keydata *keyptr = get_keyptr();",
          "1489:  memcpy(hash, saddr, 16);",
          "1490:  hash[4] = ((__force u16)sport << 16) + (__force u16)dport;",
          "1491:  memcpy(&hash[5], keyptr->secret, sizeof(__u32) * 7);",
          "1493:  seq = twothirdsMD4Transform((const __u32 *)daddr, hash) & HASH_MASK;",
          "1494:  seq += keyptr->count;",
          "1496:  seq += ktime_to_ns(ktime_get_real());",
          "1498:  return seq;",
          "1499: }",
          "1500: EXPORT_SYMBOL(secure_tcpv6_sequence_number);",
          "1501: #endif",
          "1506: __u32 secure_ip_id(__be32 daddr)",
          "1507: {",
          "1508:  struct keydata *keyptr;",
          "1509:  __u32 hash[4];",
          "1511:  keyptr = get_keyptr();",
          "1518:  hash[0] = (__force __u32)daddr;",
          "1519:  hash[1] = keyptr->secret[9];",
          "1520:  hash[2] = keyptr->secret[10];",
          "1521:  hash[3] = keyptr->secret[11];",
          "1523:  return half_md4_transform(hash, keyptr->secret);",
          "1524: }",
          "1526: __u32 secure_ipv6_id(const __be32 daddr[4])",
          "1527: {",
          "1528:  const struct keydata *keyptr;",
          "1529:  __u32 hash[4];",
          "1531:  keyptr = get_keyptr();",
          "1533:  hash[0] = (__force __u32)daddr[0];",
          "1534:  hash[1] = (__force __u32)daddr[1];",
          "1535:  hash[2] = (__force __u32)daddr[2];",
          "1536:  hash[3] = (__force __u32)daddr[3];",
          "1538:  return half_md4_transform(hash, keyptr->secret);",
          "1539: }",
          "1541: #ifdef CONFIG_INET",
          "1543: __u32 secure_tcp_sequence_number(__be32 saddr, __be32 daddr,",
          "1544:      __be16 sport, __be16 dport)",
          "1545: {",
          "1546:  __u32 seq;",
          "1547:  __u32 hash[4];",
          "1548:  struct keydata *keyptr = get_keyptr();",
          "1556:  hash[0] = (__force u32)saddr;",
          "1557:  hash[1] = (__force u32)daddr;",
          "1558:  hash[2] = ((__force u16)sport << 16) + (__force u16)dport;",
          "1559:  hash[3] = keyptr->secret[11];",
          "1561:  seq = half_md4_transform(hash, keyptr->secret) & HASH_MASK;",
          "1562:  seq += keyptr->count;",
          "1573:  seq += ktime_to_ns(ktime_get_real()) >> 6;",
          "1575:  return seq;",
          "1576: }",
          "1579: u32 secure_ipv4_port_ephemeral(__be32 saddr, __be32 daddr, __be16 dport)",
          "1580: {",
          "1581:  struct keydata *keyptr = get_keyptr();",
          "1582:  u32 hash[4];",
          "1588:  hash[0] = (__force u32)saddr;",
          "1589:  hash[1] = (__force u32)daddr;",
          "1590:  hash[2] = (__force u32)dport ^ keyptr->secret[10];",
          "1591:  hash[3] = keyptr->secret[11];",
          "1593:  return half_md4_transform(hash, keyptr->secret);",
          "1594: }",
          "1595: EXPORT_SYMBOL_GPL(secure_ipv4_port_ephemeral);",
          "1597: #if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)",
          "1598: u32 secure_ipv6_port_ephemeral(const __be32 *saddr, const __be32 *daddr,",
          "1599:           __be16 dport)",
          "1600: {",
          "1601:  struct keydata *keyptr = get_keyptr();",
          "1602:  u32 hash[12];",
          "1604:  memcpy(hash, saddr, 16);",
          "1605:  hash[4] = (__force u32)dport;",
          "1606:  memcpy(&hash[5], keyptr->secret, sizeof(__u32) * 7);",
          "1608:  return twothirdsMD4Transform((const __u32 *)daddr, hash);",
          "1609: }",
          "1610: #endif",
          "1612: #if defined(CONFIG_IP_DCCP) || defined(CONFIG_IP_DCCP_MODULE)",
          "1617: u64 secure_dccp_sequence_number(__be32 saddr, __be32 daddr,",
          "1618:     __be16 sport, __be16 dport)",
          "1619: {",
          "1620:  u64 seq;",
          "1621:  __u32 hash[4];",
          "1622:  struct keydata *keyptr = get_keyptr();",
          "1624:  hash[0] = (__force u32)saddr;",
          "1625:  hash[1] = (__force u32)daddr;",
          "1626:  hash[2] = ((__force u16)sport << 16) + (__force u16)dport;",
          "1627:  hash[3] = keyptr->secret[11];",
          "1629:  seq = half_md4_transform(hash, keyptr->secret);",
          "1630:  seq |= ((u64)keyptr->count) << (32 - HASH_BITS);",
          "1632:  seq += ktime_to_ns(ktime_get_real());",
          "1633:  seq &= (1ull << 48) - 1;",
          "1635:  return seq;",
          "1636: }",
          "1637: EXPORT_SYMBOL(secure_dccp_sequence_number);",
          "1638: #endif",
          "",
          "[Added Lines]",
          "1303: static u32 random_int_secret[MD5_MESSAGE_BYTES / 4] ____cacheline_aligned;",
          "1305: static int __init random_int_secret_init(void)",
          "1307:  get_random_bytes(random_int_secret, sizeof(random_int_secret));",
          "1310: late_initcall(random_int_secret_init);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1650: unsigned int get_random_int(void)",
          "1651: {",
          "1653:  __u32 *hash = get_cpu_var(get_random_int_hash);",
          "1657:  hash[0] += current->pid + jiffies + get_cycles();",
          "1660:  put_cpu_var(get_random_int_hash);",
          "1662:  return ret;",
          "",
          "[Removed Lines]",
          "1649: DEFINE_PER_CPU(__u32 [4], get_random_int_hash);",
          "1652:  struct keydata *keyptr;",
          "1654:  int ret;",
          "1656:  keyptr = get_keyptr();",
          "1659:  ret = half_md4_transform(hash, keyptr->secret);",
          "",
          "[Added Lines]",
          "1318: DEFINE_PER_CPU(__u32 [MD5_DIGEST_WORDS], get_random_int_hash);",
          "1322:  unsigned int ret;",
          "1325:  md5_transform(hash, random_int_secret);",
          "1326:  ret = hash[0];",
          "",
          "---------------"
        ],
        "include/linux/random.h||include/linux/random.h": [
          "File: include/linux/random.h -> include/linux/random.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: extern void get_random_bytes(void *buf, int nbytes);",
          "58: void generate_random_uuid(unsigned char uuid_out[16]);",
          "72: #ifndef MODULE",
          "73: extern const struct file_operations random_fops, urandom_fops;",
          "74: #endif",
          "",
          "[Removed Lines]",
          "60: extern __u32 secure_ip_id(__be32 daddr);",
          "61: extern __u32 secure_ipv6_id(const __be32 daddr[4]);",
          "62: extern u32 secure_ipv4_port_ephemeral(__be32 saddr, __be32 daddr, __be16 dport);",
          "63: extern u32 secure_ipv6_port_ephemeral(const __be32 *saddr, const __be32 *daddr,",
          "64:           __be16 dport);",
          "65: extern __u32 secure_tcp_sequence_number(__be32 saddr, __be32 daddr,",
          "66:      __be16 sport, __be16 dport);",
          "67: extern __u32 secure_tcpv6_sequence_number(__be32 *saddr, __be32 *daddr,",
          "68:        __be16 sport, __be16 dport);",
          "69: extern u64 secure_dccp_sequence_number(__be32 saddr, __be32 daddr,",
          "70:            __be16 sport, __be16 dport);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/net/secure_seq.h||include/net/secure_seq.h": [
          "File: include/net/secure_seq.h -> include/net/secure_seq.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #ifndef _NET_SECURE_SEQ",
          "2: #define _NET_SECURE_SEQ",
          "4: #include <linux/types.h>",
          "6: extern __u32 secure_ip_id(__be32 daddr);",
          "7: extern __u32 secure_ipv6_id(const __be32 daddr[4]);",
          "8: extern u32 secure_ipv4_port_ephemeral(__be32 saddr, __be32 daddr, __be16 dport);",
          "9: extern u32 secure_ipv6_port_ephemeral(const __be32 *saddr, const __be32 *daddr,",
          "10:           __be16 dport);",
          "11: extern __u32 secure_tcp_sequence_number(__be32 saddr, __be32 daddr,",
          "12:      __be16 sport, __be16 dport);",
          "13: extern __u32 secure_tcpv6_sequence_number(__be32 *saddr, __be32 *daddr,",
          "14:        __be16 sport, __be16 dport);",
          "15: extern u64 secure_dccp_sequence_number(__be32 saddr, __be32 daddr,",
          "16:            __be16 sport, __be16 dport);",
          "17: extern u64 secure_dccpv6_sequence_number(__be32 *saddr, __be32 *daddr,",
          "18:       __be16 sport, __be16 dport);",
          "",
          "---------------"
        ],
        "net/core/secure_seq.c||net/core/secure_seq.c": [
          "File: net/core/secure_seq.c -> net/core/secure_seq.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include <linux/kernel.h>",
          "2: #include <linux/init.h>",
          "3: #include <linux/cryptohash.h>",
          "4: #include <linux/module.h>",
          "5: #include <linux/cache.h>",
          "6: #include <linux/random.h>",
          "7: #include <linux/hrtimer.h>",
          "8: #include <linux/ktime.h>",
          "9: #include <linux/string.h>",
          "11: #include <net/secure_seq.h>",
          "13: static u32 net_secret[MD5_MESSAGE_BYTES / 4] ____cacheline_aligned;",
          "15: static int __init net_secret_init(void)",
          "16: {",
          "17:  get_random_bytes(net_secret, sizeof(net_secret));",
          "18:  return 0;",
          "19: }",
          "20: late_initcall(net_secret_init);",
          "22: static u32 seq_scale(u32 seq)",
          "23: {",
          "34:  return seq + (ktime_to_ns(ktime_get_real()) >> 6);",
          "35: }",
          "37: #if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)",
          "38: __u32 secure_tcpv6_sequence_number(__be32 *saddr, __be32 *daddr,",
          "39:        __be16 sport, __be16 dport)",
          "40: {",
          "41:  u32 secret[MD5_MESSAGE_BYTES / 4];",
          "42:  u32 hash[MD5_DIGEST_WORDS];",
          "43:  u32 i;",
          "45:  memcpy(hash, saddr, 16);",
          "46:  for (i = 0; i < 4; i++)",
          "47:   secret[i] = net_secret[i] + daddr[i];",
          "48:  secret[4] = net_secret[4] +",
          "49:   (((__force u16)sport << 16) + (__force u16)dport);",
          "50:  for (i = 5; i < MD5_MESSAGE_BYTES / 4; i++)",
          "51:   secret[i] = net_secret[i];",
          "53:  md5_transform(hash, secret);",
          "55:  return seq_scale(hash[0]);",
          "56: }",
          "57: EXPORT_SYMBOL(secure_tcpv6_sequence_number);",
          "59: u32 secure_ipv6_port_ephemeral(const __be32 *saddr, const __be32 *daddr,",
          "60:           __be16 dport)",
          "61: {",
          "62:  u32 secret[MD5_MESSAGE_BYTES / 4];",
          "63:  u32 hash[MD5_DIGEST_WORDS];",
          "64:  u32 i;",
          "66:  memcpy(hash, saddr, 16);",
          "67:  for (i = 0; i < 4; i++)",
          "68:   secret[i] = net_secret[i] + (__force u32) daddr[i];",
          "69:  secret[4] = net_secret[4] + (__force u32)dport;",
          "70:  for (i = 5; i < MD5_MESSAGE_BYTES / 4; i++)",
          "71:   secret[i] = net_secret[i];",
          "73:  md5_transform(hash, secret);",
          "75:  return hash[0];",
          "76: }",
          "77: #endif",
          "79: #ifdef CONFIG_INET",
          "80: __u32 secure_ip_id(__be32 daddr)",
          "81: {",
          "82:  u32 hash[MD5_DIGEST_WORDS];",
          "84:  hash[0] = (__force __u32) daddr;",
          "85:  hash[1] = net_secret[13];",
          "86:  hash[2] = net_secret[14];",
          "87:  hash[3] = net_secret[15];",
          "89:  md5_transform(hash, net_secret);",
          "91:  return hash[0];",
          "92: }",
          "94: __u32 secure_ipv6_id(const __be32 daddr[4])",
          "95: {",
          "96:  __u32 hash[4];",
          "98:  memcpy(hash, daddr, 16);",
          "99:  md5_transform(hash, net_secret);",
          "101:  return hash[0];",
          "102: }",
          "104: __u32 secure_tcp_sequence_number(__be32 saddr, __be32 daddr,",
          "105:      __be16 sport, __be16 dport)",
          "106: {",
          "107:  u32 hash[MD5_DIGEST_WORDS];",
          "109:  hash[0] = (__force u32)saddr;",
          "110:  hash[1] = (__force u32)daddr;",
          "111:  hash[2] = ((__force u16)sport << 16) + (__force u16)dport;",
          "112:  hash[3] = net_secret[15];",
          "114:  md5_transform(hash, net_secret);",
          "116:  return seq_scale(hash[0]);",
          "117: }",
          "119: u32 secure_ipv4_port_ephemeral(__be32 saddr, __be32 daddr, __be16 dport)",
          "120: {",
          "121:  u32 hash[MD5_DIGEST_WORDS];",
          "123:  hash[0] = (__force u32)saddr;",
          "124:  hash[1] = (__force u32)daddr;",
          "125:  hash[2] = (__force u32)dport ^ net_secret[14];",
          "126:  hash[3] = net_secret[15];",
          "128:  md5_transform(hash, net_secret);",
          "130:  return hash[0];",
          "131: }",
          "132: EXPORT_SYMBOL_GPL(secure_ipv4_port_ephemeral);",
          "133: #endif",
          "135: #if defined(CONFIG_IP_DCCP) || defined(CONFIG_IP_DCCP_MODULE)",
          "136: u64 secure_dccp_sequence_number(__be32 saddr, __be32 daddr,",
          "137:     __be16 sport, __be16 dport)",
          "138: {",
          "139:  u32 hash[MD5_DIGEST_WORDS];",
          "140:  u64 seq;",
          "142:  hash[0] = (__force u32)saddr;",
          "143:  hash[1] = (__force u32)daddr;",
          "144:  hash[2] = ((__force u16)sport << 16) + (__force u16)dport;",
          "145:  hash[3] = net_secret[15];",
          "147:  md5_transform(hash, net_secret);",
          "149:  seq = hash[0] | (((u64)hash[1]) << 32);",
          "150:  seq += ktime_to_ns(ktime_get_real());",
          "151:  seq &= (1ull << 48) - 1;",
          "153:  return seq;",
          "154: }",
          "155: EXPORT_SYMBOL(secure_dccp_sequence_number);",
          "157: #if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)",
          "158: u64 secure_dccpv6_sequence_number(__be32 *saddr, __be32 *daddr,",
          "159:       __be16 sport, __be16 dport)",
          "160: {",
          "161:  u32 secret[MD5_MESSAGE_BYTES / 4];",
          "162:  u32 hash[MD5_DIGEST_WORDS];",
          "163:  u64 seq;",
          "164:  u32 i;",
          "166:  memcpy(hash, saddr, 16);",
          "167:  for (i = 0; i < 4; i++)",
          "168:   secret[i] = net_secret[i] + daddr[i];",
          "169:  secret[4] = net_secret[4] +",
          "170:   (((__force u16)sport << 16) + (__force u16)dport);",
          "171:  for (i = 5; i < MD5_MESSAGE_BYTES / 4; i++)",
          "172:   secret[i] = net_secret[i];",
          "174:  md5_transform(hash, secret);",
          "176:  seq = hash[0] | (((u64)hash[1]) << 32);",
          "177:  seq += ktime_to_ns(ktime_get_real());",
          "178:  seq &= (1ull << 48) - 1;",
          "180:  return seq;",
          "181: }",
          "182: EXPORT_SYMBOL(secure_dccpv6_sequence_number);",
          "183: #endif",
          "184: #endif",
          "",
          "---------------"
        ],
        "net/dccp/ipv4.c||net/dccp/ipv4.c": [
          "File: net/dccp/ipv4.c -> net/dccp/ipv4.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include <net/timewait_sock.h>",
          "27: #include <net/tcp_states.h>",
          "28: #include <net/xfrm.h>",
          "30: #include \"ackvec.h\"",
          "31: #include \"ccid.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: #include <net/secure_seq.h>",
          "",
          "---------------"
        ],
        "net/dccp/ipv6.c||net/dccp/ipv6.c": [
          "File: net/dccp/ipv6.c -> net/dccp/ipv6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include <net/transp_v6.h>",
          "30: #include <net/ip6_checksum.h>",
          "31: #include <net/xfrm.h>",
          "33: #include \"dccp.h\"",
          "34: #include \"ipv6.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #include <net/secure_seq.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:  dh->dccph_checksum = dccp_v6_csum_finish(skb, &np->saddr, &np->daddr);",
          "70: }",
          "79: {",
          "80:  return secure_dccpv6_sequence_number(ipv6_hdr(skb)->daddr.s6_addr32,",
          "81:           ipv6_hdr(skb)->saddr.s6_addr32,",
          "",
          "[Removed Lines]",
          "72: static inline __u32 secure_dccpv6_sequence_number(__be32 *saddr, __be32 *daddr,",
          "73:         __be16 sport, __be16 dport   )",
          "74: {",
          "75:  return secure_tcpv6_sequence_number(saddr, daddr, sport, dport);",
          "76: }",
          "78: static inline __u32 dccp_v6_init_sequence(struct sk_buff *skb)",
          "",
          "[Added Lines]",
          "73: static inline __u64 dccp_v6_init_sequence(struct sk_buff *skb)",
          "",
          "---------------"
        ],
        "net/ipv4/inet_hashtables.c||net/ipv4/inet_hashtables.c": [
          "File: net/ipv4/inet_hashtables.c -> net/ipv4/inet_hashtables.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <net/inet_connection_sock.h>",
          "23: #include <net/inet_hashtables.h>",
          "24: #include <net/ip.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #include <net/secure_seq.h>",
          "",
          "---------------"
        ],
        "net/ipv4/inetpeer.c||net/ipv4/inetpeer.c": [
          "File: net/ipv4/inetpeer.c -> net/ipv4/inetpeer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #include <linux/net.h>",
          "20: #include <net/ip.h>",
          "21: #include <net/inetpeer.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include <net/secure_seq.h>",
          "",
          "---------------"
        ],
        "net/ipv4/netfilter/nf_nat_proto_common.c||net/ipv4/netfilter/nf_nat_proto_common.c": [
          "File: net/ipv4/netfilter/nf_nat_proto_common.c -> net/ipv4/netfilter/nf_nat_proto_common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #include <linux/ip.h>",
          "14: #include <linux/netfilter.h>",
          "15: #include <net/netfilter/nf_nat.h>",
          "16: #include <net/netfilter/nf_nat_core.h>",
          "17: #include <net/netfilter/nf_nat_rule.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: #include <net/secure_seq.h>",
          "",
          "---------------"
        ],
        "net/ipv4/route.c||net/ipv4/route.c": [
          "File: net/ipv4/route.c -> net/ipv4/route.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "109: #include <linux/sysctl.h>",
          "110: #endif",
          "111: #include <net/atmclip.h>",
          "113: #define RT_FL_TOS(oldflp4) \\",
          "114:     ((u32)(oldflp4->flowi4_tos & (IPTOS_RT_MASK | RTO_ONLINK)))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112: #include <net/secure_seq.h>",
          "",
          "---------------"
        ],
        "net/ipv4/tcp_ipv4.c||net/ipv4/tcp_ipv4.c": [
          "File: net/ipv4/tcp_ipv4.c -> net/ipv4/tcp_ipv4.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "72: #include <net/timewait_sock.h>",
          "73: #include <net/xfrm.h>",
          "74: #include <net/netdma.h>",
          "76: #include <linux/inet.h>",
          "77: #include <linux/ipv6.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75: #include <net/secure_seq.h>",
          "",
          "---------------"
        ],
        "net/ipv6/inet6_hashtables.c||net/ipv6/inet6_hashtables.c": [
          "File: net/ipv6/inet6_hashtables.c -> net/ipv6/inet6_hashtables.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #include <net/inet_connection_sock.h>",
          "21: #include <net/inet_hashtables.h>",
          "22: #include <net/inet6_hashtables.h>",
          "23: #include <net/ip.h>",
          "25: int __inet6_hash(struct sock *sk, struct inet_timewait_sock *tw)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include <net/secure_seq.h>",
          "",
          "---------------"
        ],
        "net/ipv6/tcp_ipv6.c||net/ipv6/tcp_ipv6.c": [
          "File: net/ipv6/tcp_ipv6.c -> net/ipv6/tcp_ipv6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: #include <net/timewait_sock.h>",
          "62: #include <net/netdma.h>",
          "63: #include <net/inet_common.h>",
          "65: #include <asm/uaccess.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64: #include <net/secure_seq.h>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e688a604807647c9450f9c12a7cb6d027150a895",
      "candidate_info": {
        "commit_hash": "e688a604807647c9450f9c12a7cb6d027150a895",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/e688a604807647c9450f9c12a7cb6d027150a895",
        "files": [
          "include/net/dst.h",
          "net/bridge/br_netfilter.c",
          "net/ipv4/route.c",
          "net/ipv6/ip6_output.c"
        ],
        "message": "net: introduce DST_NOPEER dst flag\n\nChris Boot reported crashes occurring in ipv6_select_ident().\n\n[  461.457562] RIP: 0010:[<ffffffff812dde61>]  [<ffffffff812dde61>]\nipv6_select_ident+0x31/0xa7\n\n[  461.578229] Call Trace:\n[  461.580742] <IRQ>\n[  461.582870]  [<ffffffff812efa7f>] ? udp6_ufo_fragment+0x124/0x1a2\n[  461.589054]  [<ffffffff812dbfe0>] ? ipv6_gso_segment+0xc0/0x155\n[  461.595140]  [<ffffffff812700c6>] ? skb_gso_segment+0x208/0x28b\n[  461.601198]  [<ffffffffa03f236b>] ? ipv6_confirm+0x146/0x15e\n[nf_conntrack_ipv6]\n[  461.608786]  [<ffffffff81291c4d>] ? nf_iterate+0x41/0x77\n[  461.614227]  [<ffffffff81271d64>] ? dev_hard_start_xmit+0x357/0x543\n[  461.620659]  [<ffffffff81291cf6>] ? nf_hook_slow+0x73/0x111\n[  461.626440]  [<ffffffffa0379745>] ? br_parse_ip_options+0x19a/0x19a\n[bridge]\n[  461.633581]  [<ffffffff812722ff>] ? dev_queue_xmit+0x3af/0x459\n[  461.639577]  [<ffffffffa03747d2>] ? br_dev_queue_push_xmit+0x72/0x76\n[bridge]\n[  461.646887]  [<ffffffffa03791e3>] ? br_nf_post_routing+0x17d/0x18f\n[bridge]\n[  461.653997]  [<ffffffff81291c4d>] ? nf_iterate+0x41/0x77\n[  461.659473]  [<ffffffffa0374760>] ? br_flood+0xfa/0xfa [bridge]\n[  461.665485]  [<ffffffff81291cf6>] ? nf_hook_slow+0x73/0x111\n[  461.671234]  [<ffffffffa0374760>] ? br_flood+0xfa/0xfa [bridge]\n[  461.677299]  [<ffffffffa0379215>] ?\nnf_bridge_update_protocol+0x20/0x20 [bridge]\n[  461.684891]  [<ffffffffa03bb0e5>] ? nf_ct_zone+0xa/0x17 [nf_conntrack]\n[  461.691520]  [<ffffffffa0374760>] ? br_flood+0xfa/0xfa [bridge]\n[  461.697572]  [<ffffffffa0374812>] ? NF_HOOK.constprop.8+0x3c/0x56\n[bridge]\n[  461.704616]  [<ffffffffa0379031>] ?\nnf_bridge_push_encap_header+0x1c/0x26 [bridge]\n[  461.712329]  [<ffffffffa037929f>] ? br_nf_forward_finish+0x8a/0x95\n[bridge]\n[  461.719490]  [<ffffffffa037900a>] ?\nnf_bridge_pull_encap_header+0x1c/0x27 [bridge]\n[  461.727223]  [<ffffffffa0379974>] ? br_nf_forward_ip+0x1c0/0x1d4 [bridge]\n[  461.734292]  [<ffffffff81291c4d>] ? nf_iterate+0x41/0x77\n[  461.739758]  [<ffffffffa03748cc>] ? __br_deliver+0xa0/0xa0 [bridge]\n[  461.746203]  [<ffffffff81291cf6>] ? nf_hook_slow+0x73/0x111\n[  461.751950]  [<ffffffffa03748cc>] ? __br_deliver+0xa0/0xa0 [bridge]\n[  461.758378]  [<ffffffffa037533a>] ? NF_HOOK.constprop.4+0x56/0x56\n[bridge]\n\nThis is caused by bridge netfilter special dst_entry (fake_rtable), a\nspecial shared entry, where attaching an inetpeer makes no sense.\n\nProblem is present since commit 87c48fa3b46 (ipv6: make fragment\nidentifications less predictable)\n\nIntroduce DST_NOPEER dst flag and make sure ipv6_select_ident() and\n__ip_select_ident() fallback to the 'no peer attached' handling.\n\nReported-by: Chris Boot <bootc@bootc.net>\nTested-by: Chris Boot <bootc@bootc.net>\nSigned-off-by: Eric Dumazet <eric.dumazet@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "include/net/dst.h||include/net/dst.h",
          "net/bridge/br_netfilter.c||net/bridge/br_netfilter.c",
          "net/ipv4/route.c||net/ipv4/route.c",
          "net/ipv6/ip6_output.c||net/ipv6/ip6_output.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/ipv6/ip6_output.c||net/ipv6/ip6_output.c"
          ],
          "candidate": [
            "net/ipv6/ip6_output.c||net/ipv6/ip6_output.c"
          ]
        }
      },
      "candidate_diff": {
        "include/net/dst.h||include/net/dst.h": [
          "File: include/net/dst.h -> include/net/dst.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: #define DST_NOHASH  0x0008",
          "54: #define DST_NOCACHE  0x0010",
          "55: #define DST_NOCOUNT  0x0020",
          "57:  short   error;",
          "58:  short   obsolete;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: #define DST_NOPEER  0x0040",
          "",
          "---------------"
        ],
        "net/bridge/br_netfilter.c||net/bridge/br_netfilter.c": [
          "File: net/bridge/br_netfilter.c -> net/bridge/br_netfilter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:  rt->dst.dev = br->dev;",
          "148:  rt->dst.path = &rt->dst;",
          "149:  dst_init_metrics(&rt->dst, br_dst_default_metrics, true);",
          "151:  rt->dst.ops = &fake_dst_ops;",
          "152: }",
          "",
          "[Removed Lines]",
          "150:  rt->dst.flags = DST_NOXFRM;",
          "",
          "[Added Lines]",
          "150:  rt->dst.flags = DST_NOXFRM | DST_NOPEER;",
          "",
          "---------------"
        ],
        "net/ipv4/route.c||net/ipv4/route.c": [
          "File: net/ipv4/route.c -> net/ipv4/route.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1367: {",
          "1368:  struct rtable *rt = (struct rtable *) dst;",
          "1371:   if (rt->peer == NULL)",
          "1372:    rt_bind_peer(rt, rt->rt_dst, 1);",
          "",
          "[Removed Lines]",
          "1370:  if (rt) {",
          "",
          "[Added Lines]",
          "1370:  if (rt && !(rt->dst.flags & DST_NOPEER)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1378:    iph->id = htons(inet_getid(rt->peer, more));",
          "1379:    return;",
          "1380:   }",
          "1382:   printk(KERN_DEBUG \"rt_bind_peer(0) @%p\\n\",",
          "1383:          __builtin_return_address(0));",
          "",
          "[Removed Lines]",
          "1381:  } else",
          "",
          "[Added Lines]",
          "1381:  } else if (!rt)",
          "",
          "---------------"
        ],
        "net/ipv6/ip6_output.c||net/ipv6/ip6_output.c": [
          "File: net/ipv6/ip6_output.c -> net/ipv6/ip6_output.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "603:  static atomic_t ipv6_fragmentation_id;",
          "604:  int old, new;",
          "607:   struct inet_peer *peer;",
          "609:   if (!rt->rt6i_peer)",
          "",
          "[Removed Lines]",
          "606:  if (rt) {",
          "",
          "[Added Lines]",
          "606:  if (rt && !(rt->dst.flags & DST_NOPEER)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b534ecf1cd26f094497da6ae28a6ab64cdbe1617",
      "candidate_info": {
        "commit_hash": "b534ecf1cd26f094497da6ae28a6ab64cdbe1617",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/b534ecf1cd26f094497da6ae28a6ab64cdbe1617",
        "files": [
          "include/net/inetpeer.h",
          "net/ipv4/inetpeer.c",
          "net/ipv4/ip_fragment.c",
          "net/ipv4/route.c",
          "net/ipv4/tcp_ipv4.c"
        ],
        "message": "inetpeer: Make inet_getpeer() take an inet_peer_adress_t pointer.\n\nAnd make an inet_getpeer_v4() helper, update callers.\n\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "include/net/inetpeer.h||include/net/inetpeer.h",
          "net/ipv4/inetpeer.c||net/ipv4/inetpeer.c",
          "net/ipv4/ip_fragment.c||net/ipv4/ip_fragment.c",
          "net/ipv4/route.c||net/ipv4/route.c",
          "net/ipv4/tcp_ipv4.c||net/ipv4/tcp_ipv4.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/net/inetpeer.h||include/net/inetpeer.h",
            "net/ipv4/inetpeer.c||net/ipv4/inetpeer.c"
          ],
          "candidate": [
            "include/net/inetpeer.h||include/net/inetpeer.h",
            "net/ipv4/inetpeer.c||net/ipv4/inetpeer.c"
          ]
        }
      },
      "candidate_diff": {
        "include/net/inetpeer.h||include/net/inetpeer.h": [
          "File: include/net/inetpeer.h -> include/net/inetpeer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: void   inet_initpeers(void) __init;",
          "56: extern void inet_putpeer(struct inet_peer *p);",
          "",
          "[Removed Lines]",
          "53: struct inet_peer *inet_getpeer(__be32 daddr, int create);",
          "",
          "[Added Lines]",
          "53: struct inet_peer *inet_getpeer(inet_peer_address_t *daddr, int create);",
          "55: static inline struct inet_peer *inet_getpeer_v4(__be32 v4daddr, int create)",
          "56: {",
          "57:  inet_peer_address_t daddr;",
          "59:  daddr.a4 = v4daddr;",
          "60:  daddr.family = AF_INET;",
          "61:  return inet_getpeer(&daddr, create);",
          "62: }",
          "",
          "---------------"
        ],
        "net/ipv4/inetpeer.c||net/ipv4/inetpeer.c": [
          "File: net/ipv4/inetpeer.c -> net/ipv4/inetpeer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "444: }",
          "448: {",
          "449:  struct inet_peer __rcu **stack[PEER_MAXDEPTH], ***stackptr;",
          "450:  struct inet_peer_base *base = family_to_base(AF_INET);",
          "",
          "[Removed Lines]",
          "447: struct inet_peer *inet_getpeer(__be32 daddr, int create)",
          "",
          "[Added Lines]",
          "447: struct inet_peer *inet_getpeer(inet_peer_address_t *daddr, int create)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "456:  rcu_read_lock_bh();",
          "458:  rcu_read_unlock_bh();",
          "460:  if (p) {",
          "",
          "[Removed Lines]",
          "457:  p = lookup_rcu_bh(daddr, base);",
          "",
          "[Added Lines]",
          "457:  p = lookup_rcu_bh(daddr->a4, base);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "471:  spin_lock_bh(&base->lock);",
          "473:  if (p != peer_avl_empty) {",
          "474:   atomic_inc(&p->refcnt);",
          "475:   spin_unlock_bh(&base->lock);",
          "",
          "[Removed Lines]",
          "472:  p = lookup(daddr, stack, base);",
          "",
          "[Added Lines]",
          "472:  p = lookup(daddr->a4, stack, base);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "479:  }",
          "480:  p = create ? kmem_cache_alloc(peer_cachep, GFP_ATOMIC) : NULL;",
          "481:  if (p) {",
          "483:   atomic_set(&p->refcnt, 1);",
          "484:   atomic_set(&p->rid, 0);",
          "486:   p->tcp_ts_stamp = 0;",
          "487:   INIT_LIST_HEAD(&p->unused);",
          "",
          "[Removed Lines]",
          "482:   p->daddr.a4 = daddr;",
          "485:   atomic_set(&p->ip_id_count, secure_ip_id(daddr));",
          "",
          "[Added Lines]",
          "482:   p->daddr = *daddr;",
          "485:   atomic_set(&p->ip_id_count, secure_ip_id(daddr->a4));",
          "",
          "---------------"
        ],
        "net/ipv4/ip_fragment.c||net/ipv4/ip_fragment.c": [
          "File: net/ipv4/ip_fragment.c -> net/ipv4/ip_fragment.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "141:  qp->daddr = arg->iph->daddr;",
          "142:  qp->user = arg->user;",
          "143:  qp->peer = sysctl_ipfrag_max_dist ?",
          "145: }",
          "147: static __inline__ void ip4_frag_free(struct inet_frag_queue *q)",
          "",
          "[Removed Lines]",
          "144:   inet_getpeer(arg->iph->saddr, 1) : NULL;",
          "",
          "[Added Lines]",
          "144:   inet_getpeer_v4(arg->iph->saddr, 1) : NULL;",
          "",
          "---------------"
        ],
        "net/ipv4/route.c||net/ipv4/route.c": [
          "File: net/ipv4/route.c -> net/ipv4/route.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1289: {",
          "1290:  struct inet_peer *peer;",
          "1294:  if (peer && cmpxchg(&rt->peer, NULL, peer) != NULL)",
          "1295:   inet_putpeer(peer);",
          "",
          "[Removed Lines]",
          "1292:  peer = inet_getpeer(rt->rt_dst, create);",
          "",
          "[Added Lines]",
          "1292:  peer = inet_getpeer_v4(rt->rt_dst, create);",
          "",
          "---------------"
        ],
        "net/ipv4/tcp_ipv4.c||net/ipv4/tcp_ipv4.c": [
          "File: net/ipv4/tcp_ipv4.c -> net/ipv4/tcp_ipv4.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1778:  int release_it = 0;",
          "1780:  if (!rt || rt->rt_dst != inet->inet_daddr) {",
          "1782:   release_it = 1;",
          "1783:  } else {",
          "1784:   if (!rt->peer)",
          "",
          "[Removed Lines]",
          "1781:   peer = inet_getpeer(inet->inet_daddr, 1);",
          "",
          "[Added Lines]",
          "1781:   peer = inet_getpeer_v4(inet->inet_daddr, 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1805: int tcp_v4_tw_remember_stamp(struct inet_timewait_sock *tw)",
          "1806: {",
          "1809:  if (peer) {",
          "1810:   const struct tcp_timewait_sock *tcptw = tcp_twsk((struct sock *)tw);",
          "",
          "[Removed Lines]",
          "1807:  struct inet_peer *peer = inet_getpeer(tw->tw_daddr, 1);",
          "",
          "[Added Lines]",
          "1807:  struct inet_peer *peer = inet_getpeer_v4(tw->tw_daddr, 1);",
          "",
          "---------------"
        ]
      }
    }
  ]
}