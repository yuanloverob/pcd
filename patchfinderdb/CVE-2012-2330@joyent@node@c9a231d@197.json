{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7c02b5a58d796293426c7dc7e473ecc66d68977f",
      "candidate_info": {
        "commit_hash": "7c02b5a58d796293426c7dc7e473ecc66d68977f",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/7c02b5a58d796293426c7dc7e473ecc66d68977f",
        "files": [
          "src/udp_wrap.cc"
        ],
        "message": "udp_wrap: simplify AddressToJS() function",
        "before_after_code_files": [
          "src/udp_wrap.cc||src/udp_wrap.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/udp_wrap.cc||src/udp_wrap.cc": [
          "File: src/udp_wrap.cc -> src/udp_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: typedef ReqWrap<uv_udp_send_t> SendWrap;",
          "71: static Persistent<String> address_symbol;",
          "72: static Persistent<String> port_symbol;",
          "",
          "[Removed Lines]",
          "66: void AddressToJS(Handle<Object> info,",
          "67:                  const sockaddr* addr,",
          "68:                  int addrlen);",
          "",
          "[Added Lines]",
          "66: Local<Object> AddressToJS(const sockaddr* addr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "364:                              reinterpret_cast<sockaddr*>(&address),",
          "365:                              &addrlen);",
          "373:     SetErrno(uv_last_error(uv_default_loop()));",
          "374:     return Null();",
          "375:   }",
          "376: }",
          "",
          "[Removed Lines]",
          "367:   if (r == 0) {",
          "368:     Local<Object> sockname = Object::New();",
          "369:     AddressToJS(sockname, reinterpret_cast<sockaddr*>(&address), addrlen);",
          "370:     return scope.Close(sockname);",
          "371:   }",
          "372:   else {",
          "",
          "[Added Lines]",
          "364:   if (r) {",
          "369:   const sockaddr* addr = reinterpret_cast<const sockaddr*>(&address);",
          "370:   return scope.Close(AddressToJS(addr));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "431:     return;",
          "432:   }",
          "437:   Local<Value> argv[] = {",
          "438:     Local<Object>::New(wrap->object_),",
          "439:     slab,",
          "440:     Integer::NewFromUnsigned(buf.base - Buffer::Data(slab)),",
          "441:     Integer::NewFromUnsigned(nread),",
          "443:   };",
          "444:   MakeCallback(wrap->object_, \"onmessage\", ARRAY_SIZE(argv), argv);",
          "445: }",
          "451:   char ip[INET6_ADDRSTRLEN];",
          "452:   const sockaddr_in *a4;",
          "453:   const sockaddr_in6 *a6;",
          "454:   int port;",
          "463:   switch (addr->sa_family) {",
          "464:   case AF_INET6:",
          "",
          "[Removed Lines]",
          "434:   Local<Object> rinfo = Object::New();",
          "435:   AddressToJS(rinfo, addr, sizeof(*addr));",
          "442:     rinfo",
          "448: void AddressToJS(Handle<Object> info,",
          "449:                  const sockaddr* addr,",
          "450:                  int addrlen) {",
          "456:   assert(addr != NULL);",
          "458:   if (addrlen == 0) {",
          "459:     info->Set(address_symbol, String::Empty());",
          "460:     return;",
          "461:   }",
          "",
          "[Added Lines]",
          "434:     AddressToJS(addr)",
          "440: Local<Object> AddressToJS(const sockaddr* addr) {",
          "441:   HandleScope scope;",
          "447:   Local<Object> info = Object::New();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "480:   default:",
          "481:     info->Set(address_symbol, String::Empty());",
          "482:   }",
          "483: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "470:   return scope.Close(info);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "814033365b146afb095fad6c2c05d0da0237615f",
      "candidate_info": {
        "commit_hash": "814033365b146afb095fad6c2c05d0da0237615f",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/814033365b146afb095fad6c2c05d0da0237615f",
        "files": [
          "src/node.cc",
          "src/node.js",
          "test/message/stack_overflow.out",
          "test/message/throw_custom_error.out",
          "test/message/throw_non_error.out",
          "test/message/undefined_reference_in_new_context.out"
        ],
        "message": "Fix process.nextTick throw call sites\n\nThis patch now reports the proper throw call site for exceptions\ntriggered within process.nextTick. So instead of this:\n\nnode.js:201\n        throw e; // process.nextTick error, or 'error' event on first tick\n              ^\n\nYou will now see:\n\nmydir/myscript.js:15\n  throw new Error('My Error');\n          ^\n\nFrom my testing this patch causes no performance regressions, but does\ngreatly simplify processing the nextTickQueue.",
        "before_after_code_files": [
          "src/node.cc||src/node.cc",
          "src/node.js||src/node.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "255:   Tick();",
          "256: }",
          "261:   need_tick_cb = true;",
          "",
          "[Removed Lines]",
          "259: static Handle<Value> NeedTickCallback(const Arguments& args) {",
          "260:   HandleScope scope;",
          "",
          "[Added Lines]",
          "258: static void StartTickSpinner() {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "268:     uv_idle_start(&tick_spinner, Spin);",
          "269:     uv_ref(uv_default_loop());",
          "270:   }",
          "272: }",
          "275: static void PrepareTick(uv_prepare_t* handle, int status) {",
          "276:   assert(handle == &prepare_tick_watcher);",
          "",
          "[Removed Lines]",
          "271:   return Undefined();",
          "",
          "[Added Lines]",
          "271: static Handle<Value> NeedTickCallback(const Arguments& args) {",
          "272:   StartTickSpinner();",
          "273:   return Undefined();",
          "274: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1694:   emit->Call(process, 2, event_argv);",
          "1696:   uncaught_exception_counter--;",
          "1697: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1700:   StartTickSpinner();",
          "",
          "---------------"
        ],
        "src/node.js||src/node.js": [
          "File: src/node.js -> src/node.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "181:   startup.processNextTick = function() {",
          "182:     var nextTickQueue = [];",
          "184:     process._tickCallback = function() {",
          "202:       }",
          "203:     };",
          "205:     process.nextTick = function(callback) {",
          "",
          "[Removed Lines]",
          "185:       var l = nextTickQueue.length;",
          "186:       if (l === 0) return;",
          "188:       var q = nextTickQueue;",
          "189:       nextTickQueue = [];",
          "191:       try {",
          "192:         for (var i = 0; i < l; i++) q[i]();",
          "193:       }",
          "194:       catch (e) {",
          "195:         if (i + 1 < l) {",
          "196:           nextTickQueue = q.slice(i + 1).concat(nextTickQueue);",
          "197:         }",
          "198:         if (nextTickQueue.length) {",
          "199:           process._needTickCallback();",
          "200:         }",
          "201:         throw e; // process.nextTick error, or 'error' event on first tick",
          "",
          "[Added Lines]",
          "183:     var nextTickIndex = 0;",
          "186:       var nextTickLength = nextTickQueue.length;",
          "187:       if (nextTickLength === 0) return;",
          "189:       while (nextTickIndex < nextTickLength) {",
          "190:         nextTickQueue[nextTickIndex++]();",
          "193:       nextTickQueue.splice(0, nextTickIndex);",
          "194:       nextTickIndex = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6986d9316c7701277c286ddc1f1896216fd612ce",
      "candidate_info": {
        "commit_hash": "6986d9316c7701277c286ddc1f1896216fd612ce",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/6986d9316c7701277c286ddc1f1896216fd612ce",
        "files": [
          "src/node_crypto.cc"
        ],
        "message": "crypto: fix signedness compiler warnings",
        "before_after_code_files": [
          "src/node_crypto.cc||src/node_crypto.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_crypto.cc||src/node_crypto.cc": [
          "File: src/node_crypto.cc -> src/node_crypto.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2853:     HandleScope scope;",
          "2855:     unsigned char* md_value = NULL;",
          "2857:     char* md_hexdigest;",
          "2858:     int md_hex_len;",
          "2861:     int r = hmac->HmacDigest(&md_value, &md_len);",
          "2866:     if (md_len == 0 || r == 0) {",
          "2867:       return scope.Close(String::New(\"\"));",
          "2868:     }",
          "",
          "[Removed Lines]",
          "2856:     unsigned int md_len = -1;",
          "2859:     Local<Value> outString ;",
          "2863:     assert(md_value != NULL);",
          "2864:     assert(md_len != -1);",
          "",
          "[Added Lines]",
          "2856:     unsigned int md_len = 0;",
          "2859:     Local<Value> outString;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "698e795a5ffb617c5a3e3e79de7dfdd0ce637695",
      "candidate_info": {
        "commit_hash": "698e795a5ffb617c5a3e3e79de7dfdd0ce637695",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/698e795a5ffb617c5a3e3e79de7dfdd0ce637695",
        "files": [
          "lib/_debugger.js",
          "src/node.js"
        ],
        "message": "repl: fix 'terminal' mode autodetection on global repls\n\nFixes test/simple/test-force-repl.js",
        "before_after_code_files": [
          "lib/_debugger.js||li_debugger.js",
          "src/node.js||src/node.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/_debugger.js||li_debugger.js": [
          "File: lib/_debugger.js -> li_debugger.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "751:     prompt: 'debug> ',",
          "752:     input: this.stdin,",
          "753:     output: this.stdout,",
          "755:     eval: this.controlEval.bind(this),",
          "756:     useGlobal: false,",
          "757:     ignoreUndefined: true",
          "761:   repl._builtinLibs.splice(repl._builtinLibs.indexOf('repl'), 1);",
          "",
          "[Removed Lines]",
          "750:   this.repl = repl.start({",
          "754:     terminal: !parseInt(process.env['NODE_NO_READLINE'], 10),",
          "758:   });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/node.js||src/node.js": [
          "File: src/node.js -> src/node.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:       if (process._forceRepl || NativeModule.require('tty').isatty(0)) {",
          "127:           useGlobal: true,",
          "128:           ignoreUndefined: false",
          "130:         repl.on('exit', function() {",
          "131:           process.exit();",
          "132:         });",
          "",
          "[Removed Lines]",
          "124:         var repl = Module.requireRepl().start({",
          "125:           prompt: '> ',",
          "126:           terminal: !parseInt(process.env['NODE_NO_READLINE'], 10),",
          "129:         });",
          "",
          "[Added Lines]",
          "124:         var opts = {",
          "127:         };",
          "128:         if (parseInt(process.env['NODE_NO_READLINE'], 10)) {",
          "129:           opts.terminal = false;",
          "130:         }",
          "131:         var repl = Module.requireRepl().start(opts);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "752ac320ae48d266fdc5d61a3963857b8f343c10",
      "candidate_info": {
        "commit_hash": "752ac320ae48d266fdc5d61a3963857b8f343c10",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/752ac320ae48d266fdc5d61a3963857b8f343c10",
        "files": [
          "doc/api/https.markdown",
          "lib/https.js",
          "test/simple/test-https-client-get-url.js"
        ],
        "message": "https: make https.get() accept a URL\n\nhttps.get() now accepts either a URL (as a string) or an options object.\n\nRefs #2859.\nFixes #3882.",
        "before_after_code_files": [
          "lib/https.js||lihttps.js",
          "test/simple/test-https-client-get-url.js||test/simple/test-https-client-get-url.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/https.js||lihttps.js": [
          "File: lib/https.js -> lihttps.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: var tls = require('tls');",
          "23: var http = require('http');",
          "24: var inherits = require('util').inherits;",
          "26: function Server(opts, requestListener) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88: exports.Agent = Agent;",
          "90: exports.request = function(options, cb) {",
          "91:   if (options.protocol && options.protocol !== 'https:') {",
          "92:     throw new Error('Protocol:' + options.protocol + ' not supported.');",
          "93:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-https-client-get-url.js||test/simple/test-https-client-get-url.js": [
          "File: test/simple/test-https-client-get-url.js -> test/simple/test-https-client-get-url.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: if (!process.versions.openssl) {",
          "23:   console.error('Skipping because node compiled without OpenSSL.');",
          "24:   process.exit(0);",
          "25: }",
          "27: var common = require('../common');",
          "28: var assert = require('assert');",
          "29: var https = require('https');",
          "30: var fs = require('fs');",
          "32: var seen_req = false;",
          "34: var options = {",
          "35:   key: fs.readFileSync(common.fixturesDir + '/keys/agent1-key.pem'),",
          "36:   cert: fs.readFileSync(common.fixturesDir + '/keys/agent1-cert.pem')",
          "37: };",
          "39: var server = https.createServer(options, function(req, res) {",
          "40:   assert.equal('GET', req.method);",
          "41:   assert.equal('/foo?bar', req.url);",
          "42:   res.writeHead(200, {'Content-Type': 'text/plain'});",
          "43:   res.write('hello\\n');",
          "44:   res.end();",
          "45:   server.close();",
          "46:   seen_req = true;",
          "47: });",
          "49: server.listen(common.PORT, function() {",
          "50:   https.get('https://127.0.0.1:' + common.PORT + '/foo?bar');",
          "51: });",
          "53: process.on('exit', function() {",
          "54:   assert(seen_req);",
          "55: });",
          "",
          "---------------"
        ]
      }
    }
  ]
}