{
  "cve_id": "CVE-2019-15924",
  "cve_desc": "An issue was discovered in the Linux kernel before 5.0.11. fm10k_init_module in drivers/net/ethernet/intel/fm10k/fm10k_main.c has a NULL pointer dereference because there is no -ENOMEM upon an alloc_workqueue failure.",
  "repo": "torvalds/linux",
  "patch_hash": "01ca667133d019edc9f0a1f70a272447c84ec41f",
  "patch_info": {
    "commit_hash": "01ca667133d019edc9f0a1f70a272447c84ec41f",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/01ca667133d019edc9f0a1f70a272447c84ec41f",
    "files": [
      "drivers/net/ethernet/intel/fm10k/fm10k_main.c"
    ],
    "message": "fm10k: Fix a potential NULL pointer dereference\n\nSyzkaller report this:\n\nkasan: GPF could be caused by NULL-ptr deref or user memory access\ngeneral protection fault: 0000 [#1] SMP KASAN PTI\nCPU: 0 PID: 4378 Comm: syz-executor.0 Tainted: G         C        5.0.0+ #5\nHardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014\nRIP: 0010:__lock_acquire+0x95b/0x3200 kernel/locking/lockdep.c:3573\nCode: 00 0f 85 28 1e 00 00 48 81 c4 08 01 00 00 5b 5d 41 5c 41 5d 41 5e 41 5f c3 4c 89 ea 48 b8 00 00 00 00 00 fc ff df 48 c1 ea 03 <80> 3c 02 00 0f 85 cc 24 00 00 49 81 7d 00 e0 de 03 a6 41 bc 00 00\nRSP: 0018:ffff8881e3c07a40 EFLAGS: 00010002\nRAX: dffffc0000000000 RBX: 0000000000000000 RCX: 0000000000000000\nRDX: 0000000000000010 RSI: 0000000000000000 RDI: 0000000000000080\nRBP: 0000000000000000 R08: 0000000000000001 R09: 0000000000000000\nR10: ffff8881e3c07d98 R11: ffff8881c7f21f80 R12: 0000000000000001\nR13: 0000000000000080 R14: 0000000000000000 R15: 0000000000000001\nFS:  00007fce2252e700(0000) GS:ffff8881f2400000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 00007fffc7eb0228 CR3: 00000001e5bea002 CR4: 00000000007606f0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\nDR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\nPKRU: 55555554\nCall Trace:\n lock_acquire+0xff/0x2c0 kernel/locking/lockdep.c:4211\n __mutex_lock_common kernel/locking/mutex.c:925 [inline]\n __mutex_lock+0xdf/0x1050 kernel/locking/mutex.c:1072\n drain_workqueue+0x24/0x3f0 kernel/workqueue.c:2934\n destroy_workqueue+0x23/0x630 kernel/workqueue.c:4319\n __do_sys_delete_module kernel/module.c:1018 [inline]\n __se_sys_delete_module kernel/module.c:961 [inline]\n __x64_sys_delete_module+0x30c/0x480 kernel/module.c:961\n do_syscall_64+0x9f/0x450 arch/x86/entry/common.c:290\n entry_SYSCALL_64_after_hwframe+0x49/0xbe\nRIP: 0033:0x462e99\nCode: f7 d8 64 89 02 b8 ff ff ff ff c3 66 0f 1f 44 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48\nRSP: 002b:00007fce2252dc58 EFLAGS: 00000246 ORIG_RAX: 00000000000000b0\nRAX: ffffffffffffffda RBX: 000000000073bf00 RCX: 0000000000462e99\nRDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000020000140\nRBP: 0000000000000002 R08: 0000000000000000 R09: 0000000000000000\nR10: 0000000000000000 R11: 0000000000000246 R12: 00007fce2252e6bc\nR13: 00000000004bcca9 R14: 00000000006f6b48 R15: 00000000ffffffff\n\nIf alloc_workqueue fails, it should return -ENOMEM, otherwise may\ntrigger this NULL pointer dereference while unloading drivers.\n\nReported-by: Hulk Robot <hulkci@huawei.com>\nFixes: 0a38c17a21a0 (\"fm10k: Remove create_workqueue\")\nSigned-off-by: Yue Haibing <yuehaibing@huawei.com>\nTested-by: Andrew Bowers <andrewx.bowers@intel.com>\nSigned-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>",
    "before_after_code_files": [
      "drivers/net/ethernet/intel/fm10k/fm10k_main.c||drivers/net/ethernet/intel/fm10k/fm10k_main.c"
    ]
  },
  "patch_diff": {
    "drivers/net/ethernet/intel/fm10k/fm10k_main.c||drivers/net/ethernet/intel/fm10k/fm10k_main.c": [
      "File: drivers/net/ethernet/intel/fm10k/fm10k_main.c -> drivers/net/ethernet/intel/fm10k/fm10k_main.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "42:  fm10k_workqueue = alloc_workqueue(\"%s\", WQ_MEM_RECLAIM, 0,",
      "43:        fm10k_driver_name);",
      "45:  fm10k_dbg_init();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "44:  if (!fm10k_workqueue)",
      "45:   return -ENOMEM;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ff0e2a7bd13f7c332d7f09ff45d08df4bf512ce0",
      "candidate_info": {
        "commit_hash": "ff0e2a7bd13f7c332d7f09ff45d08df4bf512ce0",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/ff0e2a7bd13f7c332d7f09ff45d08df4bf512ce0",
        "files": [
          "arch/riscv/include/asm/fixmap.h"
        ],
        "message": "RISC-V: Fix FIXMAP_TOP to avoid overlap with VMALLOC area\n\nThe FIXMAP area overlaps with VMALLOC area in Linux-5.1-rc1 hence we get\nbelow warning in Linux RISC-V 32bit kernel. This warning does not show-up\nin Linux RISC-V 64bit kernel due to large VMALLOC area.\n\nWARNING: CPU: 0 PID: 22 at mm/vmalloc.c:150 vmap_page_range_noflush+0x134/0x15c\nModules linked in:\nCPU: 0 PID: 22 Comm: kworker/0:1 Not tainted 5.1.0-rc1-00005-gebc2f658040e #1\nWorkqueue: events pcpu_balance_workfn\nCall Trace:\n[<c002b950>] walk_stackframe+0x0/0xa0\n[<c002baac>] show_stack+0x28/0x32\n[<c0587354>] dump_stack+0x62/0x7e\n[<c002fdee>] __warn+0x98/0xce\n[<c002fe52>] warn_slowpath_null+0x2e/0x3c\n[<c00e71ce>] vmap_page_range_noflush+0x134/0x15c\n[<c00e7886>] map_kernel_range_noflush+0xc/0x14\n[<c00d54b8>] pcpu_populate_chunk+0x19e/0x236\n[<c00d610e>] pcpu_balance_workfn+0x448/0x464\n[<c00408d6>] process_one_work+0x16c/0x2ea\n[<c0040b46>] worker_thread+0xf2/0x3b2\n[<c004519a>] kthread+0xce/0xdc\n[<c002a974>] ret_from_exception+0x0/0xc\n\nThis patch fixes above warning by placing FIXMAP area below VMALLOC area.\n\nFixes: f2c17aabc917 (\"RISC-V: Implement compile-time fixed mappings\")\nSigned-off-by: Anup Patel <anup.patel@wdc.com>\nReviewed-by: Christoph Hellwig <hch@lst.de>\nSigned-off-by: Palmer Dabbelt <palmer@sifive.com>",
        "before_after_code_files": [
          "arch/riscv/include/asm/fixmap.h||arch/riscv/include/asm/fixmap.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/riscv/include/asm/fixmap.h||arch/riscv/include/asm/fixmap.h": [
          "File: arch/riscv/include/asm/fixmap.h -> arch/riscv/include/asm/fixmap.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: };",
          "28: #define FIXADDR_SIZE  (__end_of_fixed_addresses * PAGE_SIZE)",
          "30: #define FIXADDR_START  (FIXADDR_TOP - FIXADDR_SIZE)",
          "32: #define FIXMAP_PAGE_IO  PAGE_KERNEL",
          "",
          "[Removed Lines]",
          "29: #define FIXADDR_TOP  (PAGE_OFFSET)",
          "",
          "[Added Lines]",
          "29: #define FIXADDR_TOP  (VMALLOC_START)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7c3d825d12c5e6056ea73c0a202cbdef9d9ab9e6",
      "candidate_info": {
        "commit_hash": "7c3d825d12c5e6056ea73c0a202cbdef9d9ab9e6",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/7c3d825d12c5e6056ea73c0a202cbdef9d9ab9e6",
        "files": [
          "net/sched/act_skbmod.c",
          "tools/testing/selftests/tc-testing/tc-tests/actions/skbmod.json"
        ],
        "message": "net/sched: act_skbmod: validate the control action inside init()\n\nthe following script:\n\n # tc qdisc add dev crash0 clsact\n # tc filter add dev crash0 egress matchall \\\n > action skbmod set smac 00:c1:a0:c1:a0:00 pass index 90\n # tc actions replace action skbmod \\\n > set smac 00:c1:a0:c1:a0:00 goto chain 42 index 90 cookie c1a0c1a0\n # tc actions show action skbmod\n\nhad the following output:\n\n src MAC address <00:c1:a0:c1:a0:00>\n src MAC address <00:c1:a0:c1:a0:00>\n Error: Failed to init TC action chain.\n We have an error talking to the kernel\n total acts 1\n\n         action order 0: skbmod goto chain 42 set smac 00:c1:a0:c1:a0:00\n          index 90 ref 2 bind 1\n         cookie c1a0c1a0\n\nThen, the first packet transmitted by crash0 made the kernel crash:\n\n BUG: unable to handle kernel NULL pointer dereference at 0000000000000000\n #PF error: [normal kernel read fault]\n PGD 800000002d5c7067 P4D 800000002d5c7067 PUD 77e16067 PMD 0\n Oops: 0000 [#1] SMP PTI\n CPU: 3 PID: 0 Comm: swapper/3 Not tainted 5.0.0-rc4.gotochain_crash+ #536\n Hardware name: Red Hat KVM, BIOS 0.5.1 01/01/2011\n RIP: 0010:tcf_action_exec+0xb8/0x100\n Code: 00 00 00 20 74 1d 83 f8 03 75 09 49 83 c4 08 4d 39 ec 75 bc 48 83 c4 10 5b 5d 41 5c 41 5d 41 5e 41 5f c3 49 8b 97 a8 00 00 00 <48> 8b 12 48 89 55 00 48 83 c4 10 5b 5d 41 5c 41 5d 41 5e 41 5f c3\n RSP: 0018:ffff8987ffd83be0 EFLAGS: 00010246\n RAX: 000000002000002a RBX: ffff8987aeb68800 RCX: ffff8987fa263640\n RDX: 0000000000000000 RSI: ffff8987f51c8802 RDI: 00000000000000a0\n RBP: ffff8987ffd83c80 R08: ffff8987f939bac8 R09: 0000000000000000\n R10: 0000000000000000 R11: 0000000000000000 R12: ffff8987f5c77d00\n R13: ffff8987f5c77d08 R14: 0000000000000001 R15: ffff8987f0c29f00\n FS:  0000000000000000(0000) GS:ffff8987ffd80000(0000) knlGS:0000000000000000\n CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n CR2: 0000000000000000 CR3: 000000007832c004 CR4: 00000000001606e0\n Call Trace:\n  <IRQ>\n  tcf_classify+0x58/0x120\n  __dev_queue_xmit+0x40a/0x890\n  ? ip6_finish_output2+0x369/0x590\n  ip6_finish_output2+0x369/0x590\n  ? ip6_output+0x68/0x110\n  ip6_output+0x68/0x110\n  ? nf_hook.constprop.35+0x79/0xc0\n  mld_sendpack+0x16f/0x220\n  mld_ifc_timer_expire+0x195/0x2c0\n  ? igmp6_timer_handler+0x70/0x70\n  call_timer_fn+0x2b/0x130\n  run_timer_softirq+0x3e8/0x440\n  ? tick_sched_timer+0x37/0x70\n  __do_softirq+0xe3/0x2f5\n  irq_exit+0xf0/0x100\n  smp_apic_timer_interrupt+0x6c/0x130\n  apic_timer_interrupt+0xf/0x20\n  </IRQ>\n RIP: 0010:native_safe_halt+0x2/0x10\n Code: 56 ff ff ff 7f f3 c3 65 48 8b 04 25 00 5c 01 00 f0 80 48 02 20 48 8b 00 a8 08 74 8b eb c1 90 90 90 90 90 90 90 90 90 90 fb f4 <c3> 0f 1f 00 66 2e 0f 1f 84 00 00 00 00 00 f4 c3 90 90 90 90 90 90\n RSP: 0018:ffffa2a1c038feb8 EFLAGS: 00000246 ORIG_RAX: ffffffffffffff13\n RAX: ffffffffa94184f0 RBX: 0000000000000003 RCX: 0000000000000001\n RDX: 0000000000000001 RSI: 0000000000000087 RDI: 0000000000000003\n RBP: 0000000000000003 R08: 001123cfc2ba71ac R09: 0000000000000000\n R10: 0000000000000000 R11: 00000000000f4240 R12: 0000000000000000\n R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000\n  ? __sched_text_end+0x1/0x1\n  default_idle+0x1c/0x140\n  do_idle+0x1c4/0x280\n  cpu_startup_entry+0x19/0x20\n  start_secondary+0x1a7/0x200\n  secondary_startup_64+0xa4/0xb0\n Modules linked in: act_skbmod veth ip6table_filter ip6_tables iptable_filter binfmt_misc ext4 crct10dif_pclmul crc32_pclmul ghash_clmulni_intel mbcache jbd2 snd_hda_codec_generic snd_hda_intel snd_hda_codec snd_hwdep snd_hda_core snd_seq snd_seq_device aesni_intel crypto_simd cryptd glue_helper snd_pcm joydev pcspkr virtio_balloon snd_timer snd i2c_piix4 soundcore nfsd auth_rpcgss nfs_acl lockd grace sunrpc ip_tables xfs ata_generic pata_acpi qxl drm_kms_helper syscopyarea sysfillrect virtio_net sysimgblt fb_sys_fops net_failover virtio_console ttm virtio_blk failover drm crc32c_intel serio_raw ata_piix virtio_pci libata virtio_ring virtio floppy dm_mirror dm_region_hash dm_log dm_mod\n CR2: 0000000000000000\n\nValidating the control action within tcf_skbmod_init() proved to fix the\nabove issue. A TDC selftest is added to verify the correct behavior.\n\nFixes: db50514f9a9c (\"net: sched: add termination action to allow goto chain\")\nFixes: 97763dc0f401 (\"net_sched: reject unknown tcfa_action values\")\nSigned-off-by: Davide Caratti <dcaratti@redhat.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/sched/act_skbmod.c||net/sched/act_skbmod.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/sched/act_skbmod.c||net/sched/act_skbmod.c": [
          "File: net/sched/act_skbmod.c -> net/sched/act_skbmod.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include <linux/rtnetlink.h>",
          "17: #include <net/netlink.h>",
          "18: #include <net/pkt_sched.h>",
          "20: #include <linux/tc_act/tc_skbmod.h>",
          "21: #include <net/tc_act/tc_skbmod.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #include <net/pkt_cls.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:  struct tc_action_net *tn = net_generic(net, skbmod_net_id);",
          "89:  struct nlattr *tb[TCA_SKBMOD_MAX + 1];",
          "90:  struct tcf_skbmod_params *p, *p_old;",
          "91:  struct tc_skbmod *parm;",
          "92:  struct tcf_skbmod *d;",
          "93:  bool exists = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92:  struct tcf_chain *goto_ch = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "154:   tcf_idr_release(*a, bind);",
          "155:   return -EEXIST;",
          "156:  }",
          "158:  d = to_skbmod(*a);",
          "160:  p = kzalloc(sizeof(struct tcf_skbmod_params), GFP_KERNEL);",
          "161:  if (unlikely(!p)) {",
          "164:  }",
          "166:  p->flags = lflags;",
          "169:  if (ovr)",
          "170:   spin_lock_bh(&d->tcf_lock);",
          "172:  p_old = rcu_dereference_protected(d->skbmod_p, 1);",
          "174:  if (lflags & SKBMOD_F_DMAC)",
          "",
          "[Removed Lines]",
          "162:   tcf_idr_release(*a, bind);",
          "163:   return -ENOMEM;",
          "167:  d->tcf_action = parm->action;",
          "",
          "[Added Lines]",
          "159:  err = tcf_action_check_ctrlact(parm->action, tp, &goto_ch, extack);",
          "160:  if (err < 0)",
          "161:   goto release_idr;",
          "167:   err = -ENOMEM;",
          "168:   goto put_chain;",
          "176:  goto_ch = tcf_action_set_ctrlact(*a, parm->action, goto_ch);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "185:  if (p_old)",
          "186:   kfree_rcu(p_old, rcu);",
          "188:  if (ret == ACT_P_CREATED)",
          "189:   tcf_idr_insert(tn, *a);",
          "190:  return ret;",
          "191: }",
          "193: static void tcf_skbmod_cleanup(struct tc_action *a)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "192:  if (goto_ch)",
          "193:   tcf_chain_put_by_act(goto_ch);",
          "198: put_chain:",
          "199:  if (goto_ch)",
          "200:   tcf_chain_put_by_act(goto_ch);",
          "201: release_idr:",
          "202:  tcf_idr_release(*a, bind);",
          "203:  return err;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "064c5d6881e897077639e04973de26440ee205e6",
      "candidate_info": {
        "commit_hash": "064c5d6881e897077639e04973de26440ee205e6",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/064c5d6881e897077639e04973de26440ee205e6",
        "files": [
          "net/sched/act_mirred.c"
        ],
        "message": "net: sched: fix cleanup NULL pointer exception in act_mirr\n\nA new mirred action is created by the tcf_mirred_init function. This\ncontains a list head struct which is inserted into a global list on\nsuccessful creation of a new action. However, after a creation, it is\nstill possible to error out and call the tcf_idr_release function. This,\nin turn, calls the act_mirr cleanup function via __tcf_idr_release and\n__tcf_action_put. This cleanup function tries to delete the list entry\nwhich is as yet uninitialised, leading to a NULL pointer exception.\n\nFix this by initialising the list entry on creation of a new action.\n\nBug report:\n\nBUG: unable to handle kernel NULL pointer dereference at 0000000000000008\nPGD 8000000840c73067 P4D 8000000840c73067 PUD 858dcc067 PMD 0\nOops: 0002 [#1] SMP PTI\nCPU: 32 PID: 5636 Comm: handler194 Tainted: G           OE     5.0.0+ #186\nHardware name: Dell Inc. PowerEdge R730/0599V5, BIOS 1.3.6 06/03/2015\nRIP: 0010:tcf_mirred_release+0x42/0xa7 [act_mirred]\nCode: f0 90 39 c0 e8 52 04 57 c8 48 c7 c7 b8 80 39 c0 e8 94 fa d4 c7 48 8b 93 d0 00 00 00 48 8b 83 d8 00 00 00 48 c7 c7 f0 90 39 c0 <48> 89 42 08 48 89 10 48 b8 00 01 00 00 00 00 ad de 48 89 83 d0 00\nRSP: 0018:ffffac4aa059f688 EFLAGS: 00010282\nRAX: 0000000000000000 RBX: ffff9dcd1b214d00 RCX: 0000000000000000\nRDX: 0000000000000000 RSI: ffff9dcd1fa165f8 RDI: ffffffffc03990f0\nRBP: ffff9dccf9c7af80 R08: 0000000000000a3b R09: 0000000000000000\nR10: ffff9dccfa11f420 R11: 0000000000000000 R12: 0000000000000001\nR13: ffff9dcd16b433c0 R14: ffff9dcd1b214d80 R15: 0000000000000000\nFS:  00007f441bfff700(0000) GS:ffff9dcd1fa00000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 0000000000000008 CR3: 0000000839e64004 CR4: 00000000001606e0\nCall Trace:\ntcf_action_cleanup+0x59/0xca\n__tcf_action_put+0x54/0x6b\n__tcf_idr_release.cold.33+0x9/0x12\ntcf_mirred_init.cold.20+0x22e/0x3b0 [act_mirred]\ntcf_action_init_1+0x3d0/0x4c0\ntcf_action_init+0x9c/0x130\ntcf_exts_validate+0xab/0xc0\nfl_change+0x1ca/0x982 [cls_flower]\ntc_new_tfilter+0x647/0x8d0\n? load_balance+0x14b/0x9e0\nrtnetlink_rcv_msg+0xe3/0x370\n? __switch_to_asm+0x40/0x70\n? __switch_to_asm+0x34/0x70\n? _cond_resched+0x15/0x30\n? __kmalloc_node_track_caller+0x1d4/0x2b0\n? rtnl_calcit.isra.31+0xf0/0xf0\nnetlink_rcv_skb+0x49/0x110\nnetlink_unicast+0x16f/0x210\nnetlink_sendmsg+0x1df/0x390\nsock_sendmsg+0x36/0x40\n___sys_sendmsg+0x27b/0x2c0\n? futex_wake+0x80/0x140\n? do_futex+0x2b9/0xac0\n? ep_scan_ready_list.constprop.22+0x1f2/0x210\n? ep_poll+0x7a/0x430\n__sys_sendmsg+0x47/0x80\ndo_syscall_64+0x55/0x100\nentry_SYSCALL_64_after_hwframe+0x44/0xa9\n\nFixes: 4e232818bd32 (\"net: sched: act_mirred: remove dependency on rtnl lock\")\nSigned-off-by: John Hurley <john.hurley@netronome.com>\nReviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>\nAcked-by: Cong Wang <xiyou.wangcong@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/sched/act_mirred.c||net/sched/act_mirred.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/sched/act_mirred.c||net/sched/act_mirred.c": [
          "File: net/sched/act_mirred.c -> net/sched/act_mirred.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "159:   tcf_idr_release(*a, bind);",
          "160:   return -EEXIST;",
          "161:  }",
          "162:  err = tcf_action_check_ctrlact(parm->action, tp, &goto_ch, extack);",
          "163:  if (err < 0)",
          "164:   goto release_idr;",
          "168:  spin_lock_bh(&m->tcf_lock);",
          "170:  if (parm->ifindex) {",
          "",
          "[Removed Lines]",
          "166:  m = to_mirred(*a);",
          "",
          "[Added Lines]",
          "163:  m = to_mirred(*a);",
          "164:  if (ret == ACT_P_CREATED)",
          "165:   INIT_LIST_HEAD(&m->tcfm_list);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0da2dbd6029c2be4191651bafa57c3c006eff63c",
      "candidate_info": {
        "commit_hash": "0da2dbd6029c2be4191651bafa57c3c006eff63c",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/0da2dbd6029c2be4191651bafa57c3c006eff63c",
        "files": [
          "net/sched/act_gact.c",
          "tools/testing/selftests/tc-testing/tc-tests/actions/gact.json"
        ],
        "message": "net/sched: act_gact: validate the control action inside init()\n\nthe following script:\n\n # tc qdisc add dev crash0 clsact\n # tc filter add dev crash0 egress matchall \\\n > action gact pass index 90\n # tc actions replace action gact \\\n > goto chain 42 index 90 cookie c1a0c1a0\n # tc actions show action gact\n\nhad the following output:\n\n Error: Failed to init TC action chain.\n We have an error talking to the kernel\n total acts 1\n\n         action order 0: gact action goto chain 42\n          random type none pass val 0\n          index 90 ref 2 bind 1\n         cookie c1a0c1a0\n\nThen, the first packet transmitted by crash0 made the kernel crash:\n\n BUG: unable to handle kernel NULL pointer dereference at 0000000000000000\n #PF error: [normal kernel read fault]\n PGD 0 P4D 0\n Oops: 0000 [#1] SMP PTI\n CPU: 2 PID: 0 Comm: swapper/2 Not tainted 5.0.0-rc4.gotochain_crash+ #533\n Hardware name: Red Hat KVM, BIOS 0.5.1 01/01/2011\n RIP: 0010:tcf_action_exec+0xb8/0x100\n Code: 00 00 00 20 74 1d 83 f8 03 75 09 49 83 c4 08 4d 39 ec 75 bc 48 83 c4 10 5b 5d 41 5c 41 5d 41 5e 41 5f c3 49 8b 97 a8 00 00 00 <48> 8b 12 48 89 55 00 48 83 c4 10 5b 5d 41 5c 41 5d 41 5e 41 5f c3\n RSP: 0018:ffff8c2434703be0 EFLAGS: 00010246\n RAX: 000000002000002a RBX: ffff8c23ed6d7e00 RCX: 000000000000005a\n RDX: 0000000000000000 RSI: 0000000000000001 RDI: ffff8c23ed6d7e00\n RBP: ffff8c2434703c80 R08: ffff8c243b639ac8 R09: 0000000000000000\n R10: 0000000000000000 R11: 0000000000000000 R12: ffff8c2429e68b00\n R13: ffff8c2429e68b08 R14: 0000000000000001 R15: ffff8c2429c5a480\n FS:  0000000000000000(0000) GS:ffff8c2434700000(0000) knlGS:0000000000000000\n CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n CR2: 0000000000000000 CR3: 000000002dc0e005 CR4: 00000000001606e0\n Call Trace:\n  <IRQ>\n  tcf_classify+0x58/0x120\n  __dev_queue_xmit+0x40a/0x890\n  ? ip6_finish_output2+0x369/0x590\n  ip6_finish_output2+0x369/0x590\n  ? ip6_output+0x68/0x110\n  ip6_output+0x68/0x110\n  ? nf_hook.constprop.35+0x79/0xc0\n  mld_sendpack+0x16f/0x220\n  mld_ifc_timer_expire+0x195/0x2c0\n  ? igmp6_timer_handler+0x70/0x70\n  call_timer_fn+0x2b/0x130\n  run_timer_softirq+0x3e8/0x440\n  ? tick_sched_timer+0x37/0x70\n  __do_softirq+0xe3/0x2f5\n  irq_exit+0xf0/0x100\n  smp_apic_timer_interrupt+0x6c/0x130\n  apic_timer_interrupt+0xf/0x20\n  </IRQ>\n RIP: 0010:native_safe_halt+0x2/0x10\n Code: 74 ff ff ff 7f f3 c3 65 48 8b 04 25 00 5c 01 00 f0 80 48 02 20 48 8b 00 a8 08 74 8b eb c1 90 90 90 90 90 90 90 90 90 90 fb f4 <c3> 0f 1f 00 66 2e 0f 1f 84 00 00 00 00 00 f4 c3 90 90 90 90 90 90\n RSP: 0018:ffff9c8640387eb8 EFLAGS: 00000246 ORIG_RAX: ffffffffffffff13\n RAX: ffffffff8b2184f0 RBX: 0000000000000002 RCX: 0000000000000001\n RDX: 0000000000000001 RSI: 0000000000000087 RDI: 0000000000000002\n RBP: 0000000000000002 R08: 000eb57882b36cc3 R09: 0000000000000020\n R10: 0000000000000004 R11: 0000000000000000 R12: 0000000000000000\n R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000\n  ? __sched_text_end+0x1/0x1\n  default_idle+0x1c/0x140\n  do_idle+0x1c4/0x280\n  cpu_startup_entry+0x19/0x20\n  start_secondary+0x1a7/0x200\n  secondary_startup_64+0xa4/0xb0\n Modules linked in: act_gact act_bpf veth ip6table_filter ip6_tables iptable_filter binfmt_misc crct10dif_pclmul crc32_pclmul ghash_clmulni_intel snd_hda_codec_generic ext4 snd_hda_intel snd_hda_codec snd_hwdep snd_hda_core mbcache jbd2 snd_seq snd_seq_device snd_pcm aesni_intel crypto_simd cryptd glue_helper virtio_balloon joydev pcspkr snd_timer snd i2c_piix4 soundcore nfsd auth_rpcgss nfs_acl lockd grace sunrpc ip_tables xfs ata_generic pata_acpi qxl drm_kms_helper syscopyarea virtio_net sysfillrect net_failover virtio_blk sysimgblt fb_sys_fops virtio_console ttm failover drm crc32c_intel serio_raw ata_piix libata floppy virtio_pci virtio_ring virtio dm_mirror dm_region_hash dm_log dm_mod [last unloaded: act_bpf]\n CR2: 0000000000000000\n\nValidating the control action within tcf_gact_init() proved to fix the\nabove issue. A TDC selftest is added to verify the correct behavior.\n\nFixes: db50514f9a9c (\"net: sched: add termination action to allow goto chain\")\nFixes: 97763dc0f401 (\"net_sched: reject unknown tcfa_action values\")\nSigned-off-by: Davide Caratti <dcaratti@redhat.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/sched/act_gact.c||net/sched/act_gact.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/sched/act_gact.c||net/sched/act_gact.c": [
          "File: net/sched/act_gact.c -> net/sched/act_gact.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #include <linux/init.h>",
          "21: #include <net/netlink.h>",
          "22: #include <net/pkt_sched.h>",
          "23: #include <linux/tc_act/tc_gact.h>",
          "24: #include <net/tc_act/tc_gact.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include <net/pkt_cls.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61: {",
          "62:  struct tc_action_net *tn = net_generic(net, gact_net_id);",
          "63:  struct nlattr *tb[TCA_GACT_MAX + 1];",
          "64:  struct tc_gact *parm;",
          "65:  struct tcf_gact *gact;",
          "66:  int ret = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:  struct tcf_chain *goto_ch = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116:   return err;",
          "117:  }",
          "119:  gact = to_gact(*a);",
          "121:  spin_lock_bh(&gact->tcf_lock);",
          "123: #ifdef CONFIG_GACT_PROB",
          "124:  if (p_parm) {",
          "125:   gact->tcfg_paction = p_parm->paction;",
          "",
          "[Removed Lines]",
          "122:  gact->tcf_action = parm->action;",
          "",
          "[Added Lines]",
          "121:  err = tcf_action_check_ctrlact(parm->action, tp, &goto_ch, extack);",
          "122:  if (err < 0)",
          "123:   goto release_idr;",
          "127:  goto_ch = tcf_action_set_ctrlact(*a, parm->action, goto_ch);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "133: #endif",
          "134:  spin_unlock_bh(&gact->tcf_lock);",
          "136:  if (ret == ACT_P_CREATED)",
          "137:   tcf_idr_insert(tn, *a);",
          "138:  return ret;",
          "139: }",
          "141: static int tcf_gact_act(struct sk_buff *skb, const struct tc_action *a,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141:  if (goto_ch)",
          "142:   tcf_chain_put_by_act(goto_ch);",
          "147: release_idr:",
          "148:  tcf_idr_release(*a, bind);",
          "149:  return err;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7e0c8892df7d0316ec853adbf84db536cd53258c",
      "candidate_info": {
        "commit_hash": "7e0c8892df7d0316ec853adbf84db536cd53258c",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/7e0c8892df7d0316ec853adbf84db536cd53258c",
        "files": [
          "net/sched/act_vlan.c",
          "tools/testing/selftests/tc-testing/tc-tests/actions/vlan.json"
        ],
        "message": "net/sched: act_vlan: validate the control action inside init()\n\nthe following script:\n\n # tc qdisc add dev crash0 clsact\n # tc filter add dev crash0 egress matchall \\\n > action vlan pop pass index 90\n # tc actions replace action vlan \\\n > pop goto chain 42 index 90 cookie c1a0c1a0\n # tc actions show action vlan\n\nhad the following output:\n\n Error: Failed to init TC action chain.\n We have an error talking to the kernel\n total acts 1\n\n         action order 0: vlan  pop goto chain 42\n          index 90 ref 2 bind 1\n         cookie c1a0c1a0\n\nThen, the first packet transmitted by crash0 made the kernel crash:\n\n BUG: unable to handle kernel NULL pointer dereference at 0000000000000000\n #PF error: [normal kernel read fault]\n PGD 800000007974f067 P4D 800000007974f067 PUD 79638067 PMD 0\n Oops: 0000 [#1] SMP PTI\n CPU: 3 PID: 0 Comm: swapper/3 Not tainted 5.0.0-rc4.gotochain_crash+ #536\n Hardware name: Red Hat KVM, BIOS 0.5.1 01/01/2011\n RIP: 0010:tcf_action_exec+0xb8/0x100\n Code: 00 00 00 20 74 1d 83 f8 03 75 09 49 83 c4 08 4d 39 ec 75 bc 48 83 c4 10 5b 5d 41 5c 41 5d 41 5e 41 5f c3 49 8b 97 a8 00 00 00 <48> 8b 12 48 89 55 00 48 83 c4 10 5b 5d 41 5c 41 5d 41 5e 41 5f c3\n RSP: 0018:ffff982dfdb83be0 EFLAGS: 00010246\n RAX: 000000002000002a RBX: ffff982dfc55db00 RCX: 0000000000000000\n RDX: 0000000000000000 RSI: ffff982df97099c0 RDI: ffff982dfc55db00\n RBP: ffff982dfdb83c80 R08: ffff982df983fec8 R09: 0000000000000000\n R10: 0000000000000000 R11: 0000000000000000 R12: ffff982df5aacd00\n R13: ffff982df5aacd08 R14: 0000000000000001 R15: ffff982df97099c0\n FS:  0000000000000000(0000) GS:ffff982dfdb80000(0000) knlGS:0000000000000000\n CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n CR2: 0000000000000000 CR3: 00000000796d0005 CR4: 00000000001606e0\n Call Trace:\n  <IRQ>\n  tcf_classify+0x58/0x120\n  __dev_queue_xmit+0x40a/0x890\n  ? ip6_finish_output2+0x369/0x590\n  ip6_finish_output2+0x369/0x590\n  ? ip6_output+0x68/0x110\n  ip6_output+0x68/0x110\n  ? nf_hook.constprop.35+0x79/0xc0\n  mld_sendpack+0x16f/0x220\n  mld_ifc_timer_expire+0x195/0x2c0\n  ? igmp6_timer_handler+0x70/0x70\n  call_timer_fn+0x2b/0x130\n  run_timer_softirq+0x3e8/0x440\n  ? enqueue_hrtimer+0x39/0x90\n  __do_softirq+0xe3/0x2f5\n  irq_exit+0xf0/0x100\n  smp_apic_timer_interrupt+0x6c/0x130\n  apic_timer_interrupt+0xf/0x20\n  </IRQ>\n RIP: 0010:native_safe_halt+0x2/0x10\n Code: 7b ff ff ff 7f f3 c3 65 48 8b 04 25 00 5c 01 00 f0 80 48 02 20 48 8b 00 a8 08 74 8b eb c1 90 90 90 90 90 90 90 90 90 90 fb f4 <c3> 0f 1f 00 66 2e 0f 1f 84 00 00 00 00 00 f4 c3 90 90 90 90 90 90\n RSP: 0018:ffffa4714038feb8 EFLAGS: 00000246 ORIG_RAX: ffffffffffffff13\n RAX: ffffffff840184f0 RBX: 0000000000000003 RCX: 0000000000000000\n RDX: 0000000000000001 RSI: 0000000000000000 RDI: 0000001e57d3f387\n RBP: 0000000000000003 R08: 001125d9ca39e1eb R09: 0000000000000000\n R10: 000000000000027d R11: 000000000009f400 R12: 0000000000000000\n R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000\n  ? __sched_text_end+0x1/0x1\n  default_idle+0x1c/0x140\n  do_idle+0x1c4/0x280\n  cpu_startup_entry+0x19/0x20\n  start_secondary+0x1a7/0x200\n  secondary_startup_64+0xa4/0xb0\n Modules linked in: act_vlan veth ip6table_filter ip6_tables iptable_filter binfmt_misc ext4 snd_hda_codec_generic mbcache crct10dif_pclmul jbd2 snd_hda_intel crc32_pclmul snd_hda_codec ghash_clmulni_intel snd_hwdep snd_hda_core snd_seq snd_seq_device snd_pcm aesni_intel crypto_simd cryptd glue_helper joydev snd_timer virtio_balloon snd pcspkr soundcore i2c_piix4 nfsd auth_rpcgss nfs_acl lockd grace sunrpc ip_tables xfs ata_generic pata_acpi qxl drm_kms_helper syscopyarea sysfillrect sysimgblt virtio_net fb_sys_fops virtio_blk ttm net_failover virtio_console failover ata_piix drm libata crc32c_intel virtio_pci serio_raw virtio_ring virtio floppy dm_mirror dm_region_hash dm_log dm_mod\n CR2: 0000000000000000\n\nValidating the control action within tcf_vlan_init() proved to fix the\nabove issue. A TDC selftest is added to verify the correct behavior.\n\nFixes: db50514f9a9c (\"net: sched: add termination action to allow goto chain\")\nFixes: 97763dc0f401 (\"net_sched: reject unknown tcfa_action values\")\nSigned-off-by: Davide Caratti <dcaratti@redhat.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/sched/act_vlan.c||net/sched/act_vlan.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/sched/act_vlan.c||net/sched/act_vlan.c": [
          "File: net/sched/act_vlan.c -> net/sched/act_vlan.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: #include <linux/if_vlan.h>",
          "16: #include <net/netlink.h>",
          "17: #include <net/pkt_sched.h>",
          "19: #include <linux/tc_act/tc_vlan.h>",
          "20: #include <net/tc_act/tc_vlan.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #include <net/pkt_cls.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109: {",
          "110:  struct tc_action_net *tn = net_generic(net, vlan_net_id);",
          "111:  struct nlattr *tb[TCA_VLAN_MAX + 1];",
          "112:  struct tcf_vlan_params *p;",
          "113:  struct tc_vlan *parm;",
          "114:  struct tcf_vlan *v;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:  struct tcf_chain *goto_ch = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "200:   return -EEXIST;",
          "201:  }",
          "203:  v = to_vlan(*a);",
          "205:  p = kzalloc(sizeof(*p), GFP_KERNEL);",
          "206:  if (!p) {",
          "209:  }",
          "211:  p->tcfv_action = action;",
          "",
          "[Removed Lines]",
          "207:   tcf_idr_release(*a, bind);",
          "208:   return -ENOMEM;",
          "",
          "[Added Lines]",
          "205:  err = tcf_action_check_ctrlact(parm->action, tp, &goto_ch, extack);",
          "206:  if (err < 0)",
          "207:   goto release_idr;",
          "213:   err = -ENOMEM;",
          "214:   goto put_chain;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "214:  p->tcfv_push_proto = push_proto;",
          "216:  spin_lock_bh(&v->tcf_lock);",
          "218:  rcu_swap_protected(v->vlan_p, p, lockdep_is_held(&v->tcf_lock));",
          "219:  spin_unlock_bh(&v->tcf_lock);",
          "221:  if (p)",
          "222:   kfree_rcu(p, rcu);",
          "224:  if (ret == ACT_P_CREATED)",
          "225:   tcf_idr_insert(tn, *a);",
          "226:  return ret;",
          "227: }",
          "229: static void tcf_vlan_cleanup(struct tc_action *a)",
          "",
          "[Removed Lines]",
          "217:  v->tcf_action = parm->action;",
          "",
          "[Added Lines]",
          "223:  goto_ch = tcf_action_set_ctrlact(*a, parm->action, goto_ch);",
          "227:  if (goto_ch)",
          "228:   tcf_chain_put_by_act(goto_ch);",
          "235: put_chain:",
          "236:  if (goto_ch)",
          "237:   tcf_chain_put_by_act(goto_ch);",
          "238: release_idr:",
          "239:  tcf_idr_release(*a, bind);",
          "240:  return err;",
          "",
          "---------------"
        ]
      }
    }
  ]
}