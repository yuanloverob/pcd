{
  "cve_id": "CVE-2021-45936",
  "cve_desc": "wolfSSL wolfMQTT 1.9 has a heap-based buffer overflow in MqttDecode_Disconnect (called from MqttClient_DecodePacket and MqttClient_WaitType).",
  "repo": "wolfSSL/wolfMQTT",
  "patch_hash": "84d4b53122e0fa0280c7872350b89d5777dabbb2",
  "patch_info": {
    "commit_hash": "84d4b53122e0fa0280c7872350b89d5777dabbb2",
    "repo": "wolfSSL/wolfMQTT",
    "commit_url": "https://github.com/wolfSSL/wolfMQTT/commit/84d4b53122e0fa0280c7872350b89d5777dabbb2",
    "files": [
      "src/mqtt_client.c"
    ],
    "message": "Fix wolfmqtt-fuzzer: Null-dereference WRITE in MqttProps_Free",
    "before_after_code_files": [
      "src/mqtt_client.c||src/mqtt_client.c"
    ]
  },
  "patch_diff": {
    "src/mqtt_client.c||src/mqtt_client.c": [
      "File: src/mqtt_client.c -> src/mqtt_client.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "907:             if ((wait_type == MQTT_PACKET_TYPE_ANY ||",
      "908:                  wait_type == packet_type ||",
      "911:             {",
      "912:                 use_packet_obj = packet_obj;",
      "913:                 waitMatchFound = 1;",
      "",
      "[Removed Lines]",
      "909:                  MqttIsPubRespPacket(packet_type) == MqttIsPubRespPacket(wait_type)) &&",
      "910:                (wait_packet_id == 0 || wait_packet_id == packet_id))",
      "",
      "[Added Lines]",
      "909:                  (MqttIsPubRespPacket(packet_type) &&",
      "910:                   MqttIsPubRespPacket(wait_type))) &&",
      "911:                 (wait_packet_id == 0 || wait_packet_id == packet_id))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ead38bc331b50027148af8f80194656a09031c0c",
      "candidate_info": {
        "commit_hash": "ead38bc331b50027148af8f80194656a09031c0c",
        "repo": "wolfSSL/wolfMQTT",
        "commit_url": "https://github.com/wolfSSL/wolfMQTT/commit/ead38bc331b50027148af8f80194656a09031c0c",
        "files": [
          "examples/mqttnet.c",
          "src/mqtt_client.c"
        ],
        "message": "Fixes from review",
        "before_after_code_files": [
          "examples/mqttnet.c||examples/mqttnet.c",
          "src/mqtt_client.c||src/mqtt_client.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/mqtt_client.c||src/mqtt_client.c"
          ],
          "candidate": [
            "src/mqtt_client.c||src/mqtt_client.c"
          ]
        }
      },
      "candidate_diff": {
        "examples/mqttnet.c||examples/mqttnet.c": [
          "File: examples/mqttnet.c -> examples/mqttnet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:     #include <ws2tcpip.h>",
          "61:     #include <stdio.h>",
          "62:     #define SOCKET_T        SOCKET",
          "64:     #define SELECT_FD(fd)   (fd)",
          "66:         #define SOCKET_INVALID  ((SOCKET_T)INVALID_SOCKET)",
          "",
          "[Removed Lines]",
          "63:     #define SOERROR_T       char",
          "",
          "[Added Lines]",
          "63:     #ifdef (_WIN32)",
          "64:         #define SOERROR_T int",
          "65:     #else",
          "66:         #define SOERROR_T char",
          "67:     #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:     #define SOCK_CLOSE      closesocket",
          "69:     #define SOCK_SEND(s,b,l,f) send((s), (const char*)(b), (size_t)(l), (f))",
          "70:     #define SOCK_RECV(s,b,l,f) recv((s), (char*)(b), (size_t)(l), (f))",
          "73: #elif defined(FREESCALE_MQX) || defined(FREESCALE_KSDK_MQX)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75:     #define GET_SOCK_ERROR(f,s,o,e) WSAGetLastError()",
          "76:     #define SOCK_EQ_ERROR(e) (((e) == WSAEWOULDBLOCK) || ((e) == WSAEINPROGRESS))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "147: #ifdef SOCK_ADDRINFO",
          "148:     #define SOCK_ADDRINFO   struct addrinfo",
          "149: #endif",
          "153: typedef enum {",
          "154:     SOCK_BEGIN = 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "156: #ifndef GET_SOCK_ERROR",
          "157:     #define GET_SOCK_ERROR(f,s,o,e) \\",
          "158:         socklen_t len = sizeof(so_error); \\",
          "159:         getsockopt((f), (s), (o), &(e), &len)",
          "160: #endif",
          "161: #ifndef SOCK_EQ_ERROR",
          "162:     #define SOCK_EQ_ERROR(e) (((e) == EWOULDBLOCK) || ((e) == EAGAIN))",
          "163: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "163: #endif",
          "",
          "[Removed Lines]",
          "160: typedef struct MulticastContext {",
          "162: } MulticastContext;",
          "",
          "[Added Lines]",
          "172: typedef struct MulticastCtx {",
          "174: } MulticastCtx;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "559:     SocketContext *sock = (SocketContext*)context;",
          "560:     int type = SOCK_STREAM;",
          "561:     int rc = -1;",
          "565:     SOERROR_T so_error = 0;",
          "567:     struct addrinfo *result = NULL;",
          "568:     struct addrinfo hints;",
          "569:     MQTTCtx* mqttCtx = sock->mqttCtx;",
          "",
          "[Removed Lines]",
          "562: #ifdef _WIN32",
          "563:     int so_error = 0;",
          "564: #else",
          "566: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "647:         #endif",
          "651:             if (rc < 0) {",
          "653:                 rc = MQTT_CODE_ERROR_NETWORK;",
          "654:         #ifdef WOLFMQTT_NONBLOCK",
          "664:             #endif",
          "665:                 {",
          "666:             #ifndef WOLFMQTT_NO_TIMEOUT",
          "669:                         rc = MQTT_CODE_SUCCESS;",
          "670:                     }",
          "671:             #else",
          "",
          "[Removed Lines]",
          "650:             rc = SOCK_CONNECT(sock->fd, (struct sockaddr*)&sock->addr, sizeof(sock->addr));",
          "656:             #ifdef _WIN32",
          "657:                 so_error = WSAGetLastError();",
          "658:                 if ((so_error == WSAEWOULDBLOCK) || (so_error == WSAEINPROGRESS))",
          "659:             #else",
          "660:                 socklen_t len = sizeof(so_error);",
          "661:                 getsockopt(sock->fd, SOL_SOCKET, SO_ERROR, &so_error, &len);",
          "663:                 if (errno == EINPROGRESS || so_error == EINPROGRESS)",
          "668:                     if (select((int)SELECT_FD(sock->fd), NULL, &fdset, NULL, &tv) > 0) {",
          "",
          "[Added Lines]",
          "658:             rc = SOCK_CONNECT(sock->fd, (struct sockaddr*)&sock->addr,",
          "659:                     sizeof(sock->addr));",
          "665:                 GET_SOCK_ERROR(sock->fd, SOL_SOCKET, SO_ERROR, so_error);",
          "666:                 if (",
          "667:             #ifndef _WIN32",
          "668:                         (errno == EINPROGRESS) ||",
          "670:                         SOCK_EQ_ERROR(so_error))",
          "674:                     if (select((int)SELECT_FD(sock->fd), NULL, &fdset,",
          "675:                                               NULL, &tv) > 0) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "773:     }",
          "775:   exit:",
          "",
          "[Removed Lines]",
          "772:         rc = SOCK_CONNECT(sock->fd, (struct sockaddr*)&sock->addr, sizeof(sock->addr));",
          "",
          "[Added Lines]",
          "779:         rc = SOCK_CONNECT(sock->fd, (struct sockaddr*)&sock->addr,",
          "780:                 sizeof(sock->addr));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "788: {",
          "789:     SocketContext *sock = (SocketContext*)context;",
          "790:     int rc;",
          "794:     SOERROR_T so_error = 0;",
          "796: #ifndef WOLFMQTT_NO_TIMEOUT",
          "797:     struct timeval tv;",
          "798: #endif",
          "",
          "[Removed Lines]",
          "791: #ifdef _WIN32",
          "792:     int so_error = 0;",
          "793: #else",
          "795: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "813:     rc = (int)SOCK_SEND(sock->fd, buf, buf_len, 0);",
          "814:     if (rc == -1) {",
          "822:         if (so_error == 0) {",
          "823:     #if defined(USE_WINDOWS_API) && defined(WOLFMQTT_NONBLOCK)",
          "",
          "[Removed Lines]",
          "816:     #ifdef _WIN32",
          "817:         so_error = WSAGetLastError();",
          "818:     #else",
          "819:         socklen_t len = sizeof(so_error);",
          "820:         getsockopt(sock->fd, SOL_SOCKET, SO_ERROR, &so_error, &len);",
          "821:     #endif",
          "",
          "[Added Lines]",
          "820:         GET_SOCK_ERROR(sock->fd, SOL_SOCKET, SO_ERROR, so_error);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "829:         }",
          "830:         else {",
          "831:     #ifdef WOLFMQTT_NONBLOCK",
          "837:                 return MQTT_CODE_CONTINUE;",
          "838:             }",
          "839:     #endif",
          "",
          "[Removed Lines]",
          "832:         #ifdef _WIN32",
          "833:             if ((so_error == WSAEWOULDBLOCK) || (so_error == WSAEINPROGRESS)) {",
          "834:         #else",
          "835:             if (so_error == EWOULDBLOCK || so_error == EAGAIN) {",
          "836:         #endif",
          "",
          "[Added Lines]",
          "831:             if (SOCK_EQ_ERROR(so_error)) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "853:     SocketContext *sock = (SocketContext*)context;",
          "854:     MQTTCtx* mqttCtx = sock->mqttCtx;",
          "855:     int rc = -1, timeout = 0;",
          "859:     SOERROR_T so_error = 0;",
          "861:     int bytes = 0;",
          "862:     int flags = 0;",
          "863: #ifndef WOLFMQTT_NO_TIMEOUT",
          "",
          "[Removed Lines]",
          "856: #ifdef _WIN32",
          "857:     int so_error = 0;",
          "858: #else",
          "860: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "977:     }",
          "978:     else if (rc < 0) {",
          "986:         if (so_error == 0) {",
          "988:         }",
          "989:         else {",
          "990:     #ifdef WOLFMQTT_NONBLOCK",
          "996:                 return MQTT_CODE_CONTINUE;",
          "997:             }",
          "998:     #endif",
          "",
          "[Removed Lines]",
          "980:     #ifdef _WIN32",
          "981:         so_error = WSAGetLastError();",
          "982:     #else",
          "983:         socklen_t len = sizeof(so_error);",
          "984:         getsockopt(sock->fd, SOL_SOCKET, SO_ERROR, &so_error, &len);",
          "985:     #endif",
          "991:         #ifdef _WIN32",
          "992:             if ((so_error == WSAEWOULDBLOCK) || (so_error == WSAEINPROGRESS)) {",
          "993:         #else",
          "994:             if (so_error == EWOULDBLOCK || so_error == EAGAIN) {",
          "995:         #endif",
          "",
          "[Added Lines]",
          "971:         GET_SOCK_ERROR(sock->fd, SOL_SOCKET, SO_ERROR, so_error);",
          "977:             if (SOCK_EQ_ERROR(so_error)) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1069:             dwLastIP[i].Val = ipAddr.Val;",
          "1070:             PRINTF(\"%s\", TCPIP_STACK_NetNameGet(netH));",
          "1071:             PRINTF(\" IP Address: \");",
          "1073:         }",
          "1074:     }",
          "",
          "[Removed Lines]",
          "1072:             PRINTF(\"%d.%d.%d.%d\\n\", ipAddr.v[0], ipAddr.v[1], ipAddr.v[2], ipAddr.v[3]);",
          "",
          "[Added Lines]",
          "1054:             PRINTF(\"%d.%d.%d.%d\\n\", ipAddr.v[0], ipAddr.v[1], ipAddr.v[2],",
          "1055:                     ipAddr.v[3]);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1128:         sockCtx->mqttCtx = mqttCtx;",
          "1133:         if (multi_ctx == NULL) {",
          "1134:             return MQTT_CODE_ERROR_MEMORY;",
          "1135:         }",
          "1136:         net->multi_ctx = multi_ctx;",
          "1138:         multi_ctx->stat = SOCK_BEGIN;",
          "1139:     #endif",
          "",
          "[Removed Lines]",
          "1131:         MulticastContext* multi_ctx;",
          "1132:         multi_ctx = (MulticastContext*)WOLFMQTT_MALLOC(sizeof(MulticastContext));",
          "1137:         XMEMSET(multi_ctx, 0, sizeof(MulticastContext));",
          "",
          "[Added Lines]",
          "1114:         MulticastCtx* multi_ctx;",
          "1115:         multi_ctx = (MulticastCtx*)WOLFMQTT_MALLOC(sizeof(MulticastCtx));",
          "1120:         XMEMSET(multi_ctx, 0, sizeof(MulticastCtx));",
          "",
          "---------------"
        ],
        "src/mqtt_client.c||src/mqtt_client.c": [
          "File: src/mqtt_client.c -> src/mqtt_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "397:         }",
          "398:         case MQTT_PACKET_TYPE_UNSUBSCRIBE_ACK:",
          "399:         {",
          "401:             if (packet_obj) {",
          "402:                 p_unsubscribe_ack = (MqttUnsubscribeAck*)packet_obj;",
          "403:             }",
          "",
          "[Removed Lines]",
          "400:             MqttUnsubscribeAck unsubscribe_ack, *p_unsubscribe_ack = &unsubscribe_ack;",
          "",
          "[Added Lines]",
          "400:             MqttUnsubscribeAck unsubscribe_ack,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "490:         if (packet_obj && client->property_cb) {",
          "493:             if (rc_err < 0) {",
          "494:                 rc = rc_err;",
          "495:             }",
          "",
          "[Removed Lines]",
          "492:             int rc_err = client->property_cb(client, props, client->property_ctx);",
          "",
          "[Added Lines]",
          "493:             int rc_err = client->property_cb(client, props,",
          "494:                     client->property_ctx);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "503:     (void)client;",
          "505: #ifdef WOLFMQTT_DEBUG_CLIENT",
          "507:         rc, rx_len, MqttPacket_TypeDesc(packet_type), packet_type, packet_id,",
          "508:         packet_qos);",
          "509: #endif",
          "",
          "[Removed Lines]",
          "506:     PRINTF(\"MqttClient_DecodePacket: Rc %d, Len %d, Type %s (%d), ID %d, QoS %d\",",
          "",
          "[Added Lines]",
          "508:     PRINTF(\"MqttClient_DecodePacket: Rc %d, Len %d, Type %s (%d), ID %d,\"",
          "509:             \" QoS %d\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "536:             MqttPublish *publish = (MqttPublish*)packet_obj;",
          "537:             MqttPacketType resp_type;",
          "540:                 rc = MqttClient_DecodePacket(client, client->rx_buf,",
          "541:                     client->packet.buf_len, packet_obj, &packet_type,",
          "542:                     &packet_qos, &packet_id);",
          "",
          "[Removed Lines]",
          "539:             if (publish->stat == MQTT_MSG_BEGIN || publish->stat == MQTT_MSG_READ) {",
          "",
          "[Added Lines]",
          "542:             if (publish->stat == MQTT_MSG_BEGIN ||",
          "543:                 publish->stat == MQTT_MSG_READ) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "574:             rc = MqttEncode_PublishResp(client->tx_buf, client->tx_buf_len,",
          "575:                 resp_type, &publish->resp);",
          "576:         #ifdef WOLFMQTT_DEBUG_CLIENT",
          "578:                 rc, MqttPacket_TypeDesc(resp_type), resp_type, packet_id,",
          "579:                 packet_qos);",
          "580:         #endif",
          "",
          "[Removed Lines]",
          "577:             PRINTF(\"MqttClient_EncodePacket: Len %d, Type %s (%d), ID %d, QoS %d\",",
          "",
          "[Added Lines]",
          "581:             PRINTF(\"MqttClient_EncodePacket: Len %d, Type %s (%d), ID %d,\"",
          "582:                     \" QoS %d\",",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "630:             rc = MqttEncode_PublishResp(client->tx_buf, client->tx_buf_len,",
          "631:                 packet_type, &publish_resp);",
          "632:         #ifdef WOLFMQTT_DEBUG_CLIENT",
          "634:                 rc, MqttPacket_TypeDesc(packet_type), packet_type, packet_id,",
          "635:                 packet_qos);",
          "636:         #endif",
          "",
          "[Removed Lines]",
          "633:             PRINTF(\"MqttClient_EncodePacket: Len %d, Type %s (%d), ID %d, QoS %d\",",
          "",
          "[Added Lines]",
          "638:             PRINTF(\"MqttClient_EncodePacket: Len %d, Type %s (%d), ID %d,\"",
          "639:                     \" QoS %d\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "850:             }",
          "854:                (wait_packet_id == 0 || wait_packet_id == packet_id))",
          "855:             {",
          "856:                 use_packet_obj = packet_obj;",
          "",
          "[Removed Lines]",
          "853:             if ((wait_type == MQTT_PACKET_TYPE_ANY || wait_type == packet_type) &&",
          "",
          "[Added Lines]",
          "860:             if ((wait_type == MQTT_PACKET_TYPE_ANY ||",
          "861:                  wait_type == packet_type) &&",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "868:             rc = wm_SemLock(&client->lockClient);",
          "869:             if (rc == 0) {",
          "870:                 if (MqttClient_RespList_Find(client, packet_type, packet_id,",
          "873:                     pendResp->packetProcessing = 1;",
          "874:                     use_packet_obj = pendResp->packet_obj;",
          "875:                     use_packet_type = pendResp->packet_type;",
          "877:                 }",
          "878:                 wm_SemUnlock(&client->lockClient);",
          "879:             }",
          "",
          "[Removed Lines]",
          "871:                                                                    &pendResp)) {",
          "",
          "[Added Lines]",
          "879:                                                                &pendResp)) {",
          "885:                     waitMatchFound = 0;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1101:         rc = wm_SemLock(&client->lockClient);",
          "1102:         if (rc == 0) {",
          "1106:             wm_SemUnlock(&client->lockClient);",
          "1107:         }",
          "1108:         if (rc != 0) {",
          "",
          "[Removed Lines]",
          "1104:             rc = MqttClient_RespList_Add(client, MQTT_PACKET_TYPE_CONNECT_ACK, 0,",
          "1105:                 &mc_connect->pendResp, &mc_connect->ack);",
          "",
          "[Added Lines]",
          "1113:             rc = MqttClient_RespList_Add(client, MQTT_PACKET_TYPE_CONNECT_ACK,",
          "1114:                     0, &mc_connect->pendResp, &mc_connect->ack);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1357:                 client->write.len);",
          "1359:         #ifdef WOLFMQTT_NONBLOCK",
          "1361:         #else",
          "1362:             publish->intBuf_pos += client->write.len;",
          "1363:         #endif",
          "",
          "[Removed Lines]",
          "1360:             publish->buffer_pos += client->write.len;    //After sending the message new position is going to be current + client->write.len",
          "",
          "[Added Lines]",
          "1371:             publish->buffer_pos += client->write.len;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1463:             rc = MqttEncode_Publish(client->tx_buf, client->tx_buf_len,",
          "1464:                     publish, pubCb ? 1 : 0);",
          "1465:         #ifdef WOLFMQTT_DEBUG_CLIENT",
          "1467:                 rc, MqttPacket_TypeDesc(MQTT_PACKET_TYPE_PUBLISH),",
          "1468:                 MQTT_PACKET_TYPE_PUBLISH, publish->packet_id,",
          "1469:                 publish->qos);",
          "",
          "[Removed Lines]",
          "1466:             PRINTF(\"MqttClient_EncodePacket: Len %d, Type %s (%d), ID %d, QoS %d\",",
          "",
          "[Added Lines]",
          "1477:             PRINTF(\"MqttClient_EncodePacket: Len %d, Type %s (%d), ID %d,\"",
          "1478:                     \" QoS %d\",",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2068: {",
          "2069:     return MqttClient_WaitType(client, msg, MQTT_PACKET_TYPE_ANY, 0,",
          "2070:         timeout_ms);",
          "",
          "[Removed Lines]",
          "2067: int MqttClient_WaitMessage_ex(MqttClient *client, MqttObject* msg, int timeout_ms)",
          "",
          "[Added Lines]",
          "2079: int MqttClient_WaitMessage_ex(MqttClient *client, MqttObject* msg,",
          "2080:         int timeout_ms)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2179:                 XMEMSET(p_info, 0, sizeof(SN_GwInfo));",
          "2180:             }",
          "2183:             if (rc <= 0) {",
          "2184:                 return rc;",
          "2185:             }",
          "",
          "[Removed Lines]",
          "2182:             rc = SN_Decode_GWInfo(client->rx_buf, client->packet.buf_len, p_info);",
          "",
          "[Added Lines]",
          "2195:             rc = SN_Decode_GWInfo(client->rx_buf, client->packet.buf_len,",
          "2196:                     p_info);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2195:             else {",
          "2196:                 XMEMSET(p_connect_ack, 0, sizeof(SN_ConnectAck));",
          "2197:             }",
          "2200:             break;",
          "2201:         }",
          "",
          "[Removed Lines]",
          "2198:             p_connect_ack->return_code = client->rx_buf[client->packet.buf_len-1];",
          "",
          "[Added Lines]",
          "2212:             p_connect_ack->return_code =",
          "2213:                     client->rx_buf[client->packet.buf_len-1];",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2249:                         &reg_s.regack);",
          "2250:             #ifdef WOLFMQTT_DEBUG_CLIENT",
          "2251:                 PRINTF(\"MqttClient_EncodePacket: Len %d, Type %s (%d), ID %d\",",
          "2253:             #endif",
          "2254:                 if (rc <= 0) {",
          "2255:                 #ifdef WOLFMQTT_MULTITHREAD",
          "",
          "[Removed Lines]",
          "2252:                     rc, SN_Packet_TypeDesc(SN_MSG_TYPE_REGACK), SN_MSG_TYPE_REGACK, reg_s.packet_id);",
          "",
          "[Added Lines]",
          "2267:                     rc, SN_Packet_TypeDesc(SN_MSG_TYPE_REGACK),",
          "2268:                     SN_MSG_TYPE_REGACK, reg_s.packet_id);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2280:                 XMEMSET(p_regack, 0, sizeof(SN_RegAck));",
          "2281:             }",
          "2285:             if (rc > 0) {",
          "2286:                 packet_id = p_regack->packet_id;",
          "2287:             }",
          "",
          "[Removed Lines]",
          "2283:             rc = SN_Decode_RegAck(client->rx_buf, client->packet.buf_len, p_regack);",
          "",
          "[Added Lines]",
          "2299:             rc = SN_Decode_RegAck(client->rx_buf, client->packet.buf_len,",
          "2300:                     p_regack);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2341:                 rc = SN_Encode_PublishResp(client->tx_buf,",
          "2342:                                     client->tx_buf_len, type, &p_pub->resp);",
          "2343:             #ifdef WOLFMQTT_DEBUG_CLIENT",
          "2345:                     rc, SN_Packet_TypeDesc(type), type, packet_id,",
          "2346:                     p_pub->qos);",
          "2347:             #endif",
          "",
          "[Removed Lines]",
          "2344:                 PRINTF(\"MqttClient_EncodePacket: Len %d, Type %s (%d), ID %d, QoS %d\",",
          "",
          "[Added Lines]",
          "2360:                 PRINTF(\"MqttClient_EncodePacket: Len %d, Type %s (%d), ID %d,\"",
          "2361:                         \" QoS %d\",",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2441:         case SN_MSG_TYPE_UNSUBACK:",
          "2442:         {",
          "2445:             if (packet_obj) {",
          "2446:                 p_unsubscribe_ack = (SN_UnsubscribeAck*)packet_obj;",
          "2447:             }",
          "",
          "[Removed Lines]",
          "2444:             SN_UnsubscribeAck unsubscribe_ack, *p_unsubscribe_ack = &unsubscribe_ack;",
          "",
          "[Added Lines]",
          "2461:             SN_UnsubscribeAck unsubscribe_ack,",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2713:                     pendResp->packetProcessing = 1;",
          "2714:                     use_packet_obj = pendResp->packet_obj;",
          "2715:                     use_packet_type = (SN_MsgType)pendResp->packet_type;",
          "2717:                 }",
          "2718:                 wm_SemUnlock(&client->lockClient);",
          "2719:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2735:                     waitMatchFound = 0;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2956:     #endif",
          "2960:     #ifdef WOLFMQTT_DEBUG_CLIENT",
          "2961:         PRINTF(\"EncodePacket: Len %d, Type %s (%d)\",",
          "2962:             rc, SN_Packet_TypeDesc(SN_MSG_TYPE_WILLTOPIC),",
          "",
          "[Removed Lines]",
          "2959:         len = rc = SN_Encode_WillTopic(client->tx_buf, client->tx_buf_len, will);",
          "",
          "[Added Lines]",
          "2978:         len = rc = SN_Encode_WillTopic(client->tx_buf, client->tx_buf_len,",
          "2979:                 will);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "3166:     #endif",
          "3170:     #ifdef WOLFMQTT_DEBUG_CLIENT",
          "3171:         PRINTF(\"MqttClient_EncodePacket: Len %d, Type %s (%d)\",",
          "3172:             rc, SN_Packet_TypeDesc(SN_MSG_TYPE_WILLTOPICUPD),",
          "",
          "[Removed Lines]",
          "3169:         len = rc = SN_Encode_WillTopicUpdate(client->tx_buf, client->tx_buf_len, will);",
          "",
          "[Added Lines]",
          "3189:         len = rc = SN_Encode_WillTopicUpdate(client->tx_buf,",
          "3190:                 client->tx_buf_len, will);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "3248:         }",
          "3249:     #endif",
          "3252:     #ifdef WOLFMQTT_DEBUG_CLIENT",
          "3253:         PRINTF(\"MqttClient_EncodePacket: Len %d, Type %s (%d)\",",
          "3254:             rc, SN_Packet_TypeDesc(SN_MSG_TYPE_WILLTOPICUPD),",
          "",
          "[Removed Lines]",
          "3251:         len = rc = SN_Encode_WillMsgUpdate(client->tx_buf, client->tx_buf_len, will);",
          "",
          "[Added Lines]",
          "3272:         len = rc = SN_Encode_WillMsgUpdate(client->tx_buf,",
          "3273:                 client->tx_buf_len, will);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "3427:             rc = SN_Encode_Publish(client->tx_buf, client->tx_buf_len,",
          "3428:                     publish);",
          "3429:         #ifdef WOLFMQTT_DEBUG_CLIENT",
          "3431:                 rc, SN_Packet_TypeDesc(SN_MSG_TYPE_PUBLISH),",
          "3432:                 SN_MSG_TYPE_PUBLISH, publish->packet_id,",
          "3433:                 publish->qos);",
          "",
          "[Removed Lines]",
          "3430:             PRINTF(\"MqttClient_EncodePacket: Len %d, Type %s (%d), ID %d, QoS %d\",",
          "",
          "[Added Lines]",
          "3452:             PRINTF(\"MqttClient_EncodePacket: Len %d, Type %s (%d), ID %d,\"",
          "3453:                     \" QoS %d\",",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "3920:     return MQTT_CODE_SUCCESS;",
          "3921: }",
          "3924: {",
          "3925:     return SN_Client_WaitType(client, packet_obj,",
          "3926:         SN_MSG_TYPE_ANY, 0, timeout_ms);",
          "",
          "[Removed Lines]",
          "3923: int SN_Client_WaitMessage_ex(MqttClient *client, SN_Object* packet_obj, int timeout_ms)",
          "",
          "[Added Lines]",
          "3946: int SN_Client_WaitMessage_ex(MqttClient *client, SN_Object* packet_obj,",
          "3947:         int timeout_ms)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "237f693c5731dcbd6adc9de69d9f575421c4414e",
      "candidate_info": {
        "commit_hash": "237f693c5731dcbd6adc9de69d9f575421c4414e",
        "repo": "wolfSSL/wolfMQTT",
        "commit_url": "https://github.com/wolfSSL/wolfMQTT/commit/237f693c5731dcbd6adc9de69d9f575421c4414e",
        "files": [
          "examples/mqttclient/mqttclient.c",
          "src/mqtt_client.c"
        ],
        "message": "Added support for returning publish reason code with MQTT 5.",
        "before_after_code_files": [
          "examples/mqttclient/mqttclient.c||examples/mqttclient/mqttclient.c",
          "src/mqtt_client.c||src/mqtt_client.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/mqtt_client.c||src/mqtt_client.c"
          ],
          "candidate": [
            "src/mqtt_client.c||src/mqtt_client.c"
          ]
        }
      },
      "candidate_diff": {
        "examples/mqttclient/mqttclient.c||examples/mqttclient/mqttclient.c": [
          "File: examples/mqttclient/mqttclient.c -> examples/mqttclient/mqttclient.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "465:     PRINTF(\"MQTT Publish: Topic %s, %s (%d)\",",
          "466:         mqttCtx->publish.topic_name,",
          "467:         MqttClient_ReturnCodeToString(rc), rc);",
          "468:     if (rc != MQTT_CODE_SUCCESS) {",
          "469:         goto disconn;",
          "470:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "468: #ifdef WOLFMQTT_V5",
          "469:     if (mqttCtx->qos > 0) {",
          "470:         PRINTF(\"\\tResponse Reason Code %d\", mqttCtx->publish.resp.reason_code);",
          "471:     }",
          "472: #endif",
          "",
          "---------------"
        ],
        "src/mqtt_client.c||src/mqtt_client.c": [
          "File: src/mqtt_client.c -> src/mqtt_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "656:                         packet_type, packet_id, packet_qos);",
          "657:             #endif",
          "660:             publish_resp->reason_code = MQTT_REASON_SUCCESS;",
          "661:         #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "660:             if (packet_obj != NULL) {",
          "661:                 MqttPublishResp* caller_rsp = (MqttPublishResp*)packet_obj;",
          "662:                 caller_rsp->reason_code = publish_resp->reason_code;",
          "663:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "753:     return rc;",
          "754: }",
          "756: static int MqttClient_WaitType(MqttClient *client, void *packet_obj,",
          "757:     byte wait_type, word16 wait_packet_id, int timeout_ms)",
          "758: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "763: static inline int MqttIsPubRespPacket(int packet_type)",
          "764: {",
          "765:     return (packet_type == MQTT_PACKET_TYPE_PUBLISH_ACK /* Acknowledgment */ ||",
          "766:             packet_type == MQTT_PACKET_TYPE_PUBLISH_REC /* Received */ ||",
          "767:             packet_type == MQTT_PACKET_TYPE_PUBLISH_REL /* Release */ ||",
          "768:             packet_type == MQTT_PACKET_TYPE_PUBLISH_COMP /* Complete */);",
          "769: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "889:             if ((wait_type == MQTT_PACKET_TYPE_ANY ||",
          "891:                (wait_packet_id == 0 || wait_packet_id == packet_id))",
          "892:             {",
          "893:                 use_packet_obj = packet_obj;",
          "",
          "[Removed Lines]",
          "890:                  wait_type == packet_type) &&",
          "",
          "[Added Lines]",
          "905:                  wait_type == packet_type ||",
          "906:                  MqttIsPubRespPacket(packet_type) == MqttIsPubRespPacket(wait_type)) &&",
          "",
          "---------------"
        ]
      }
    }
  ]
}