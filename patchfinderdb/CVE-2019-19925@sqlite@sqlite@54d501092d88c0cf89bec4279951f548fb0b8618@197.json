{
  "cve_id": "CVE-2019-19925",
  "cve_desc": "zipfileUpdate in ext/misc/zipfile.c in SQLite 3.30.1 mishandles a NULL pathname during an update of a ZIP archive.",
  "repo": "sqlite/sqlite",
  "patch_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
  "patch_info": {
    "commit_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/54d501092d88c0cf89bec4279951f548fb0b8618",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid",
      "test/zipfile.test"
    ],
    "message": "Fix the zipfile extension so that INSERT works even if the pathname of the file being inserted is a NULL.  Bug discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid",
      "test/zipfile.test||test/zipfile.test"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1620:     if( rc==SQLITE_OK ){",
      "1621:       zPath = (const char*)sqlite3_value_text(apVal[2]);",
      "1622:       nPath = (int)strlen(zPath);",
      "1623:       mTime = zipfileGetTime(apVal[4]);",
      "1624:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1622:       if( zPath==0 ) zPath = \"\";",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/zipfile.test||test/zipfile.test": [
      "File: test/zipfile.test -> test/zipfile.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "795:   } {. ./x1.txt ./x2.txt}",
      "796: }",
      "798: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "798: # 2019-12-18 Yongheng and Rui fuzzer",
      "799: #",
      "800: do_execsql_test 13.10 {",
      "801:   DROP TABLE IF EXISTS t0;",
      "802:   DROP TABLE IF EXISTS t1;",
      "803:   CREATE TABLE t0(a,b,c,d,e,f,g);",
      "804:   REPLACE INTO t0(c,b,f) VALUES(10,10,10);",
      "805:   CREATE VIRTUAL TABLE t1 USING zipfile('h.zip');",
      "806:   REPLACE INTO t1 SELECT * FROM t0;",
      "807:   SELECT quote(name),quote(mode),quote(mtime),quote(sz),quote(rawdata),",
      "808:          quote(data),quote(method) FROM t1;",
      "809: } {'' 10 10 2 X'3130' X'3130' 0}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9d70284022fbc4d7fecb4c4b60f98589e6897a9f",
      "candidate_info": {
        "commit_hash": "9d70284022fbc4d7fecb4c4b60f98589e6897a9f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9d70284022fbc4d7fecb4c4b60f98589e6897a9f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/func.c"
        ],
        "message": "Fix an OOB read in the INSTR() function introduced yesterday by check-in [3fb40f518086c1e8] and detected by OSSFuzz.  The test case is in TH3.\n\nFossilOrigin-Name: d49047c1b59bbfd05204af9973cdb0fab51b4d2661b550aec10d917fff94dc9b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/func.c||src/func.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8efd62594eae725decb719aa7777c020f982b7cdc2c92bab3b91bf349a5bc298",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/func.c||src/func.c": [
          "File: src/func.c -> src/func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "224:     }else{",
          "225:       pC1 = sqlite3_value_dup(argv[0]);",
          "226:       zHaystack = sqlite3_value_text(pC1);",
          "227:       pC2 = sqlite3_value_dup(argv[1]);",
          "228:       zNeedle = sqlite3_value_text(pC2);",
          "229:       isText = 1;",
          "230:     }",
          "235:     firstChar = zNeedle[0];",
          "236:     while( nNeedle<=nHaystack",
          "237:        && (zHaystack[0]!=firstChar || memcmp(zHaystack, zNeedle, nNeedle)!=0)",
          "",
          "[Removed Lines]",
          "231:     if( zNeedle==0 || (nHaystack && zHaystack==0) ){",
          "232:       sqlite3_result_error_nomem(context);",
          "233:       goto endInstr;",
          "234:     }",
          "",
          "[Added Lines]",
          "227:       if( zHaystack==0 ) goto endInstrOOM;",
          "228:       nHaystack = sqlite3_value_bytes(pC1);",
          "231:       if( zNeedle==0 ) goto endInstrOOM;",
          "232:       nNeedle = sqlite3_value_bytes(pC2);",
          "235:     if( zNeedle==0 || (nHaystack && zHaystack==0) ) goto endInstrOOM;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "248: endInstr:",
          "249:   sqlite3_value_free(pC1);",
          "250:   sqlite3_value_free(pC2);",
          "251: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252:   return;",
          "253: endInstrOOM:",
          "254:   sqlite3_result_error_nomem(context);",
          "255:   goto endInstr;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "862faf28bb36627359ee3b9cb295b63ed2964df7",
      "candidate_info": {
        "commit_hash": "862faf28bb36627359ee3b9cb295b63ed2964df7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/862faf28bb36627359ee3b9cb295b63ed2964df7",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Change a faulty assert() in fts5 that could fail on a corrupt db to an if() statement.\n\nFossilOrigin-Name: 1daaba9fb46706af8ed0669a661c304df999a69cf639d29d93208f422c515d8c",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "882:       }else{",
          "883:         i += fts5GetVarint32(&pData[i], pLvl->nMerge);",
          "884:         i += fts5GetVarint32(&pData[i], nTotal);",
          "886:         pLvl->aSeg = (Fts5StructureSegment*)sqlite3Fts5MallocZero(&rc,",
          "887:             nTotal * sizeof(Fts5StructureSegment)",
          "888:         );",
          "",
          "[Removed Lines]",
          "885:         assert( nTotal>=pLvl->nMerge );",
          "",
          "[Added Lines]",
          "885:         if( nTotal<pLvl->nMerge ) rc = FTS5_CORRUPT;",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "603:   UPDATE t1 SET content='abc' WHERE content='boomer';",
          "604: } {1 {constraint failed}}",
          "606: sqlite3_fts5_may_be_corrupt 0",
          "607: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "606: #-------------------------------------------------------------------------",
          "607: #",
          "608: reset_db",
          "609: do_test 12.0 {",
          "610:   sqlite3 db {}",
          "611:   db deserialize [decode_hexdb {",
          "612: | size 28672 pagesize 4096 filename c2.db",
          "613: | page 1 offset 0",
          "614: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "615: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 07   .....@  ........",
          "616: |     32: 00 00 00 00 00 00 00 00 00 00 00 07 00 00 00 00   ................",
          "617: |     48: 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00   ................",
          "618: |     96: 00 00 00 00 0d 00 00 00 07 0d d2 00 0f c4 0f 6d   ...............m",
          "619: |    112: 0f 02 0e ab 0e 4e 0d f6 0d d2 00 00 00 00 00 00   .....N..........",
          "620: |   3536: 00 00 22 07 06 17 11 11 01 31 74 61 62 6c 65 74   .........1tablet",
          "621: |   3552: 32 74 32 07 43 52 45 41 54 45 20 54 41 42 4c 45   2t2.CREATE TABLE",
          "622: |   3568: 20 74 32 28 78 29 56 06 06 17 1f 1f 01 7d 74 61    t2(x)V.......ta",
          "623: |   3584: 62 6c 65 74 31 5f 63 6f 6e 66 69 67 74 31 5f 63   blet1_configt1_c",
          "624: |   3600: 6f 6e 66 69 67 06 43 52 45 41 54 45 20 54 41 42   onfig.CREATE TAB",
          "625: |   3616: 4c 45 20 27 74 31 5f 63 6f 6e 66 69 67 27 28 6b   LE 't1_config'(k",
          "626: |   3632: 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 76 29    PRIMARY KEY, v)",
          "627: |   3648: 20 57 49 54 48 4f 55 54 20 52 4f 57 49 44 5b 05    WITHOUT ROWID[.",
          "628: |   3664: 07 17 21 21 01 81 01 74 61 62 6c 65 74 31 5f 64   ..!!...tablet1_d",
          "629: |   3680: 6f 63 73 69 7a 65 74 31 5f 64 6f 63 73 69 7a 65   ocsizet1_docsize",
          "630: |   3696: 05 43 52 45 41 54 45 20 54 41 42 4c 45 20 27 74   .CREATE TABLE 't",
          "631: |   3712: 31 5f 64 6f 63 73 69 7a 65 27 28 69 64 20 49 4e   1_docsize'(id IN",
          "632: |   3728: 54 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45   TEGER PRIMARY KE",
          "633: |   3744: 59 2c 20 73 7a 20 42 4c 4f 42 29 55 04 06 17 21   Y, sz BLOB)U...!",
          "634: |   3760: 21 01 77 74 61 62 6c 65 74 31 5f 63 6f 6e 74 65   !.wtablet1_conte",
          "635: |   3776: 6e 74 74 31 5f 63 6f 6e 74 65 6e 74 04 43 52 45   ntt1_content.CRE",
          "636: |   3792: 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 63 6f   ATE TABLE 't1_co",
          "637: |   3808: 6e 74 65 6e 74 27 28 69 64 20 49 4e 54 45 47 45   ntent'(id INTEGE",
          "638: |   3824: 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 63   R PRIMARY KEY, c",
          "639: |   3840: 30 29 69 03 07 17 19 19 01 81 2d 74 61 62 6c 65   0)i.......-table",
          "640: |   3856: 74 31 5f 69 64 78 74 31 5f 69 64 78 03 43 52 45   t1_idxt1_idx.CRE",
          "641: |   3872: 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 69 64   ATE TABLE 't1_id",
          "642: |   3888: 78 27 28 73 65 67 69 64 2c 20 74 65 72 6d 2c 20   x'(segid, term,",
          "643: |   3904: 70 67 6e 6f 2c 20 50 52 49 4d 41 52 59 20 4b 45   pgno, PRIMARY KE",
          "644: |   3920: 59 28 73 65 67 69 64 2c 20 74 65 72 6d 29 29 20   Y(segid, term))",
          "645: |   3936: 57 49 54 48 4f 55 54 20 52 4f 57 49 44 55 02 07   WITHOUT ROWIDU..",
          "646: |   3952: 17 1b 1b 01 81 01 74 61 62 6c 65 74 31 5f 64 61   ......tablet1_da",
          "647: |   3968: 74 61 74 31 5f 64 61 74 61 02 43 52 45 41 54 45   tat1_data.CREATE",
          "648: |   3984: 20 54 41 42 4c 45 20 27 74 31 5f 64 61 74 61 27    TABLE 't1_data'",
          "649: |   4000: 28 69 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d   (id INTEGER PRIM",
          "650: |   4016: 41 52 59 20 4b 45 59 2c 20 62 6c 6f 63 6b 20 42   ARY KEY, block B",
          "651: |   4032: 4c 4f 42 29 3a 01 06 17 11 11 08 63 74 61 62 6c   LOB):......ctabl",
          "652: |   4048: 65 74 31 74 31 43 52 45 41 54 45 20 56 49 52 54   et1t1CREATE VIRT",
          "653: |   4064: 55 41 4c 20 54 41 42 4c 45 20 74 31 20 55 53 49   UAL TABLE t1 USI",
          "654: |   4080: 4e 47 20 66 74 73 35 28 63 6f 6e 74 65 6e 74 29   NG fts5(content)",
          "655: | page 2 offset 4096",
          "656: |      0: 0d 00 00 00 03 0f bd 00 0f d8 0f ef 0f bd 00 00   ................",
          "657: |   4016: 00 00 00 00 00 00 00 00 00 00 00 00 00 24 84 80   .............$..",
          "658: |   4032: 80 80 80 01 03 00 4e 00 00 00 1e 06 30 61 62 61   ......N.....0aba",
          "659: |   4048: 63 6b 01 02 02 04 02 66 74 02 02 02 04 04 6e 64   ck.....ft.....nd",
          "660: |   4064: 6f 6e 03 02 02 04 0a 07 05 01 03 00 10 03 03 0f   on..............",
          "661: |   4080: 0a 03 00 24 00 00 00 00 01 01 01 20 01 01 01 01   ...$....... ....",
          "662: | page 3 offset 8192",
          "663: |      0: 0a 00 00 00 01 0f fa 00 0f fa 00 00 00 00 00 00   ................",
          "664: |   4080: 00 00 00 00 00 00 00 00 00 00 05 04 09 0c 01 02   ................",
          "665: | page 4 offset 12288",
          "666: |      0: 0d 00 00 00 03 0f e0 00 0f f6 0f ec 0f e0 3f e0   ..............?.",
          "667: |     16: a0 30 30 01 b6 16 26 16 e6 46 f6 e0 80 20 30 01   .00...&..F... 0.",
          "668: |     32: 76 16 26 16 67 40 80 10 30 01 76 16 26 16 36 b0   v.&.g@..0.v.&.6.",
          "669: |     48: d0 00 00 00 30 fe e0 00 ff a0 ff 40 fe 00 00 00   ....0......@....",
          "670: | page 5 offset 16384",
          "671: |   4064: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04 03   ................",
          "672: |   4080: 03 00 0e 01 04 02 03 00 0e 01 04 01 03 00 0e 01   ................",
          "673: | page 6 offset 20480",
          "674: |      0: 0a 00 00 00 01 0f f4 00 0f f4 00 00 00 00 00 00   ................",
          "675: |   4080: 00 00 00 00 0b 03 1b 01 76 65 72 73 69 6f 6e 04   ........version.",
          "676: | page 7 offset 24576",
          "677: |      0: 0d 00 00 00 03 0f d6 00 0f f4 0f e1 0f d6 00 00   ................",
          "678: |   4048: 00 00 00 00 00 00 09 03 02 1b 72 65 62 75 69 6c   ..........rebuil",
          "679: |   4064: 64 11 02 02 2b 69 6e 74 65 67 72 69 74 79 2d 63   d...+integrity-c",
          "680: |   4080: 68 65 63 6b 0a 01 02 1d 6f 70 74 69 6d 69 7a 65   heck....optimize",
          "681: | end c2.db",
          "682: }]} {}",
          "684: do_catchsql_test 11.1 {",
          "685:   SELECT * FROM t1 WHERE t1 MATCH 'abandon';",
          "686: } {1 {vtable constructor failed: t1}}",
          "688: do_catchsql_test 11.2 {",
          "689:   INSERT INTO t1(t1, rank) VALUES('merge', 500);",
          "690: } {1 {vtable constructor failed: t1}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c064964deb0b7220ba784f07ca9c603680f3c8bb936d56ab4eca1962beac1359",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8f4076223d248f0cbe6bfc5769f7574f1b0033e5",
      "candidate_info": {
        "commit_hash": "8f4076223d248f0cbe6bfc5769f7574f1b0033e5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8f4076223d248f0cbe6bfc5769f7574f1b0033e5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "test/altertab3.test"
        ],
        "message": "Fix an assert() failure that could occur in ALTER TABLE code when the schema contains a view that uses a CTE.\n\nFossilOrigin-Name: 75b04a4b0d2e65bfcd02cf4e0b6d8f1954957c590814a9b8f9a9ee2adc2ec022",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e01fdbf9f700e1bd9dd5283c65547d10d26ce4f4506d3cfef9e1087aecdc2305",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "733:   return WRC_Continue;",
          "734: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "740: static void renameWalkWith(Walker *pWalker, Select *pSelect){",
          "741:   if( pSelect->pWith ){",
          "742:     int i;",
          "743:     for(i=0; i<pSelect->pWith->nCte; i++){",
          "744:       Select *p = pSelect->pWith->a[i].pSelect;",
          "745:       NameContext sNC;",
          "746:       memset(&sNC, 0, sizeof(sNC));",
          "747:       sNC.pParse = pWalker->pParse;",
          "748:       sqlite3SelectPrep(sNC.pParse, p, &sNC);",
          "749:       sqlite3WalkSelect(pWalker, p);",
          "750:     }",
          "751:   }",
          "752: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "753:       sqlite3RenameTokenRemap(pParse, 0, (void*)pSrc->a[i].zName);",
          "754:     }",
          "755:   }",
          "756:   return WRC_Continue;",
          "757: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "775:   renameWalkWith(pWalker, p);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "819:   }",
          "820: }",
          "",
          "[Removed Lines]",
          "826: static void renameWalkWith(Walker *pWalker, Select *pSelect){",
          "827:   if( pSelect->pWith ){",
          "828:     int i;",
          "829:     for(i=0; i<pSelect->pWith->nCte; i++){",
          "830:       Select *p = pSelect->pWith->a[i].pSelect;",
          "831:       NameContext sNC;",
          "832:       memset(&sNC, 0, sizeof(sNC));",
          "833:       sNC.pParse = pWalker->pParse;",
          "834:       sqlite3SelectPrep(sNC.pParse, p, &sNC);",
          "835:       sqlite3WalkSelect(pWalker, p);",
          "836:     }",
          "837:   }",
          "838: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "411:   ALTER TABLE t1 RENAME TO t1x;",
          "412: } {1 {error in trigger r1: 1st ORDER BY term does not match any column in the result set}}",
          "415: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "414: #-------------------------------------------------------------------------",
          "415: reset_db",
          "416: do_execsql_test 19.0 {",
          "417:   CREATE TABLE a(a,h CONSTRAINT a UNIQUE ON CONFLICT FAIL,CONSTRAINT a);",
          "418: }",
          "420: foreach {tn v res} {",
          "421:   1 {",
          "422:     CREATE VIEW q AS SELECT 123",
          "424:       WINDOW x AS (",
          "425:         RANGE BETWEEN UNBOUNDED PRECEDING AND INDEXED() OVER(",
          "426:           PARTITION BY ( WITH x AS(VALUES(col1)) VALUES(453) )",
          "427:         )",
          "428:       FOLLOWING",
          "429:     )",
          "430:   } {1 {error in view q: no such column: col1}}",
          "432:   2 {",
          "433:     CREATE VIEW q AS SELECT",
          "434:     CAST(CAST(CAST(CAST(CAST(CAST(CAST(CAST(CAST(CAST(CAST(RIGHT",
          "435:     AS)AS)AS)AS)AS)AS)AS)AS)AS)AS)AS)WINDOW x AS(RANGE BETWEEN UNBOUNDED",
          "436:     PRECEDING AND INDEXED(*)OVER(PARTITION BY",
          "437:     CROSS,CROSS,NATURAL,sqlite_master(*)OVER a,(WITH a AS(VALUES(LEFT)UNION",
          "438:     VALUES(LEFT)UNION VALUES(LEFT)UNION VALUES(LEFT)UNION VALUES(LEFT)UNION",
          "439:     VALUES(LEFT)UNION VALUES(LEFT))VALUES(LEFT))IN",
          "440:     STORED,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT)*LEFT FOLLOWING)ORDER BY",
          "441:     LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT LIMIT",
          "442:     LEFT,INDEXED(*)OVER(PARTITION BY",
          "443:     CROSS,CROSS,CROSS,LEFT,INDEXED(*)OVER(PARTITION BY",
          "444:     CROSS,CROSS,CROSS),INDEXED(*)OVER(PARTITION BY",
          "445:     LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT),",
          "446:     LEFT,LEFT,INNER,CROSS,CROSS,CROSS,INNER,NATURAL ORDER BY",
          "447:     OUTER,NATURAL,NATURAL,NATURAL,NATURAL,NATURAL,NATURAL,NATURAL,INNER,",
          "448:     INNER,INNER NULLS LAST GROUPS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED",
          "449:     FOLLOWING);",
          "450:   } {1 {error in view q: no such column: LEFT}}",
          "452:   3 {",
          "453:     CREATE VIEW q AS SELECT 99 WINDOW x AS (RANGE BETWEEN UNBOUNDED PRECEDING",
          "454:     AND count(*)OVER(PARTITION BY (WITH a AS(VALUES(2),(x3))VALUES(0)))",
          "455:     FOLLOWING)ORDER BY x2,sum(1)OVER(PARTITION BY avg(5)OVER(PARTITION BY x1));",
          "456:   } {1 {error in view q: no such column: x3}}",
          "457: } {",
          "458:   do_execsql_test 19.$tn.1 \"",
          "459:     DROP VIEW IF EXISTS q;",
          "460:     $v",
          "461:   \" {}",
          "463:   do_catchsql_test 19.$tn.2 {",
          "464:     ALTER TABLE a RENAME TO g;",
          "465:   } $res",
          "466: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1a9082f6d773fad00926f64650601104827bd319",
      "candidate_info": {
        "commit_hash": "1a9082f6d773fad00926f64650601104827bd319",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1a9082f6d773fad00926f64650601104827bd319",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "test/gencol1.test"
        ],
        "message": "Omit the optimization that reduces the column-count on rowid-table cursors when the table has generated columns, because we do not know what columns the generator expressions might try to access.\n\nFossilOrigin-Name: e6c96ed91e7a96d2bd30ea9df132644ac02d5a321a62f81f8f3984a8e49ed94b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7c52f5478f9ecf5c078208759143ae9de43c1bf191dfcd74acb8bd169d4dc883",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5014:       assert( pTabItem->iCursor==pLevel->iTabCur );",
          "5015:       testcase( pWInfo->eOnePass==ONEPASS_OFF && pTab->nCol==BMS-1 );",
          "5016:       testcase( pWInfo->eOnePass==ONEPASS_OFF && pTab->nCol==BMS );",
          "5018:         Bitmask b = pTabItem->colUsed;",
          "5019:         int n = 0;",
          "5020:         for(; b; b=b>>1, n++){}",
          "",
          "[Removed Lines]",
          "5017:       if( pWInfo->eOnePass==ONEPASS_OFF && pTab->nCol<BMS && HasRowid(pTab) ){",
          "",
          "[Added Lines]",
          "5017:       if( pWInfo->eOnePass==ONEPASS_OFF",
          "5018:        && pTab->nCol<BMS",
          "5019:        && (pTab->tabFlags & (TF_HasGenerated|TF_WithoutRowid))==0",
          "5020:       ){",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:   REPLACE INTO t0(c0,c2,c3) VALUES(0,0,0),(0,0,0);",
          "177: } {1 {FOREIGN KEY constraint failed}}",
          "179: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179: # 2019-11-01 Problem found while adding new foreign key test cases in TH3.",
          "180: db close",
          "181: sqlite3 db :memory:",
          "182: do_execsql_test gencol1-5.100 {",
          "183:   PRAGMA foreign_keys=ON;",
          "184:   CREATE TABLE t1(",
          "185:     gcb AS (b*1),",
          "186:     a INTEGER PRIMARY KEY,",
          "187:     gcc AS (c+0),",
          "188:     b UNIQUE,",
          "189:     gca AS (1*a+0),",
          "190:     c UNIQUE",
          "191:   ) WITHOUT ROWID;",
          "192:   INSERT INTO t1 VALUES(1,2,3);",
          "193:   INSERT INTO t1 VALUES(4,5,6);",
          "194:   INSERT INTO t1 VALUES(7,8,9);",
          "195:   CREATE TABLE t1a(",
          "196:     gcx AS (x+0) REFERENCES t1(a) ON DELETE CASCADE,",
          "197:     id,",
          "198:     x,",
          "199:     gcid AS (1*id)",
          "200:   );",
          "201:   INSERT INTO t1a VALUES(1, 1);",
          "202:   INSERT INTO t1a VALUES(2, 4);",
          "203:   INSERT INTO t1a VALUES(3, 7);",
          "204:   DELETE FROM t1 WHERE b=5;",
          "205:   SELECT id,x,'|' FROM t1a ORDER BY id;",
          "206: } {1 1 | 3 7 |}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c398c65bee850b6b8f24a44852872a27f114535d",
      "candidate_info": {
        "commit_hash": "c398c65bee850b6b8f24a44852872a27f114535d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c398c65bee850b6b8f24a44852872a27f114535d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/os.c",
          "src/os_unix.c",
          "src/os_win.c",
          "src/pager.c",
          "src/sqlite.h.in",
          "src/test_demovfs.c",
          "src/test_vfs.c"
        ],
        "message": "Revise the SQLITE_OPEN_NOFOLLOW so that it actually uses O_NOFOLLOW in the open() system call.  This backs out the SQLITE_ACCESS_SYMLINK value but adds the new SQLITE_OK_SYMLINK return code from the xFullPathname method of sqlite3_vfs when that routine resolves symbolic links. O_NOFOLLOW is always included in open() system calls for journal files.\n\nFossilOrigin-Name: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/os.c||src/os.c",
          "src/os_unix.c||src/os_unix.c",
          "src/os_win.c||src/os_win.c",
          "src/pager.c||src/pager.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/test_demovfs.c||src/test_demovfs.c",
          "src/test_vfs.c||src/test_vfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ac080432b480062507452d3cdbe6c0f759e6f95b65d9862e0462017405ab2b8e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2403:         rc = sqlite3OsFullPathname(pVfs, zFilename,",
          "2404:                                    nFullPathname, zFullPathname);",
          "2405:         if( rc ){",
          "2409:         }",
          "2410:       }",
          "2411: #if SQLITE_THREADSAFE",
          "",
          "[Removed Lines]",
          "2406:           sqlite3_free(zFullPathname);",
          "2407:           sqlite3_free(p);",
          "2408:           return rc;",
          "",
          "[Added Lines]",
          "2406:           if( rc==SQLITE_OK_SYMLINK ){",
          "2407:             rc = SQLITE_OK;",
          "2408:           }else{",
          "2409:             sqlite3_free(zFullPathname);",
          "2410:             sqlite3_free(p);",
          "2411:             return rc;",
          "2412:           }",
          "",
          "---------------"
        ],
        "src/os.c||src/os.c": [
          "File: src/os.c -> src/os.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:   assert( rc==SQLITE_OK || pFile->pMethods==0 );",
          "220:   return rc;",
          "221: }",
          "",
          "[Removed Lines]",
          "218:   rc = pVfs->xOpen(pVfs, zPath, pFile, flags & 0x87f7f, pFlagsOut);",
          "",
          "[Added Lines]",
          "218:   rc = pVfs->xOpen(pVfs, zPath, pFile, flags & 0x1087f7f, pFlagsOut);",
          "",
          "---------------"
        ],
        "src/os_unix.c||src/os_unix.c": [
          "File: src/os_unix.c -> src/os_unix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3685:     if( zDirname[0]!='/' ) zDirname[0] = '.';",
          "3686:     zDirname[1] = 0;",
          "3687:   }",
          "3689:   if( fd>=0 ){",
          "3690:     OSTRACE((\"OPENDIR %-3d %s\\n\", fd, zDirname));",
          "3691:   }",
          "",
          "[Removed Lines]",
          "3688:   fd = robust_open(zDirname, O_RDONLY|O_BINARY, 0);",
          "",
          "[Added Lines]",
          "3688:   fd = robust_open(zDirname, O_RDONLY|O_BINARY|O_NOFOLLOW, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4577:     if( pInode->bProcessLock==0 ){",
          "4578:       if( 0==sqlite3_uri_boolean(pDbFd->zPath, \"readonly_shm\", 0) ){",
          "4580:       }",
          "4581:       if( pShmNode->hShm<0 ){",
          "4583:         if( pShmNode->hShm<0 ){",
          "4584:           rc = unixLogError(SQLITE_CANTOPEN_BKPT, \"open\", zShm);",
          "4585:           goto shm_open_err;",
          "",
          "[Removed Lines]",
          "4579:         pShmNode->hShm = robust_open(zShm, O_RDWR|O_CREAT,(sStat.st_mode&0777));",
          "4582:         pShmNode->hShm = robust_open(zShm, O_RDONLY, (sStat.st_mode&0777));",
          "",
          "[Added Lines]",
          "4579:         pShmNode->hShm = robust_open(zShm, O_RDWR|O_CREAT|O_NOFOLLOW,",
          "4580:                                      (sStat.st_mode&0777));",
          "4583:         pShmNode->hShm = robust_open(zShm, O_RDONLY|O_NOFOLLOW,",
          "4584:                                      (sStat.st_mode&0777));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6039:   if( isReadWrite ) openFlags |= O_RDWR;",
          "6040:   if( isCreate )    openFlags |= O_CREAT;",
          "6041:   if( isExclusive ) openFlags |= (O_EXCL|O_NOFOLLOW);",
          "6044:   if( fd<0 ){",
          "",
          "[Removed Lines]",
          "6042:   openFlags |= (O_LARGEFILE|O_BINARY);",
          "",
          "[Added Lines]",
          "6044:   openFlags |= (O_LARGEFILE|O_BINARY|O_NOFOLLOW);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6251:   SimulateIOError( return SQLITE_IOERR_ACCESS; );",
          "6252:   assert( pResOut!=0 );",
          "6260:   if( flags==SQLITE_ACCESS_EXISTS ){",
          "6261:     struct stat buf;",
          "6265:   }else{",
          "6273:   }",
          "6274:   return SQLITE_OK;",
          "6275: }",
          "",
          "[Removed Lines]",
          "6256:   assert( flags==SQLITE_ACCESS_EXISTS",
          "6257:        || flags==SQLITE_ACCESS_READWRITE",
          "6258:        || flags==SQLITE_ACCESS_SYMLINK );",
          "6263:   }else if( flags==SQLITE_ACCESS_READWRITE ){",
          "6266: #if !defined(HAVE_LSTAT)",
          "6268: #else",
          "6269:     struct stat buf;",
          "6271: #endif",
          "6272:     assert( flags==SQLITE_ACCESS_SYMLINK );",
          "",
          "[Added Lines]",
          "6258:   assert( flags==SQLITE_ACCESS_EXISTS || flags==SQLITE_ACCESS_READWRITE );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6350:     }",
          "6352:     if( bLink ){",
          "6353:       if( zDel==0 ){",
          "6354:         zDel = sqlite3_malloc(nOut);",
          "6355:         if( zDel==0 ) rc = SQLITE_NOMEM_BKPT;",
          "6357:         rc = SQLITE_CANTOPEN_BKPT;",
          "6358:       }",
          "",
          "[Removed Lines]",
          "6356:       }else if( ++nLink>SQLITE_MAX_SYMLINKS ){",
          "",
          "[Added Lines]",
          "6345:       nLink++;",
          "6349:       }else if( nLink>=SQLITE_MAX_SYMLINKS ){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6389:   }while( rc==SQLITE_OK );",
          "6391:   sqlite3_free(zDel);",
          "6392:   return rc;",
          "6394: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6385:   if( rc==SQLITE_OK && nLink ) rc = SQLITE_OK_SYMLINK;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6874:   int fd = -1;",
          "6875:   unixFile *pNew;",
          "6876:   int rc = SQLITE_OK;",
          "6878:   sqlite3_vfs dummyVfs;",
          "6879:   int terrno = 0;",
          "6880:   UnixUnusedFd *pUnused = NULL;",
          "",
          "[Removed Lines]",
          "6877:   int openFlags = O_RDWR | O_CREAT;",
          "",
          "[Added Lines]",
          "6871:   int openFlags = O_RDWR | O_CREAT | O_NOFOLLOW;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6904:     }",
          "6905:   }",
          "6906:   if( fd<0 ){",
          "6908:     fd = robust_open(path, openFlags, 0);",
          "6909:     terrno = errno;",
          "6910:   }",
          "",
          "[Removed Lines]",
          "6907:     openFlags = O_RDONLY;",
          "",
          "[Added Lines]",
          "6901:     openFlags = O_RDONLY | O_NOFOLLOW;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "7030:     goto end_breaklock;",
          "7031:   }",
          "7034:   if( fd<0 ){",
          "7035:     sqlite3_snprintf(sizeof(errmsg), errmsg, \"create failed (%d)\", errno);",
          "7036:     goto end_breaklock;",
          "",
          "[Removed Lines]",
          "7033:   fd = robust_open(tPath, (O_RDWR|O_CREAT|O_EXCL), 0);",
          "",
          "[Added Lines]",
          "7027:   fd = robust_open(tPath, (O_RDWR|O_CREAT|O_EXCL|O_NOFOLLOW), 0);",
          "",
          "---------------"
        ],
        "src/os_win.c||src/os_win.c": [
          "File: src/os_win.c -> src/os_win.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "80: #  define NTDDI_WINTHRESHOLD                0x06040000",
          "81: #endif",
          "",
          "[Removed Lines]",
          "87: #ifndef FILE_ATTRIBUTE_REPARSE_POINT",
          "88: #  define FILE_ATTRIBUTE_REPARSE_POINT      0x00000400",
          "89: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5480:       rc = attr!=INVALID_FILE_ATTRIBUTES &&",
          "5481:              (attr & FILE_ATTRIBUTE_READONLY)==0;",
          "5482:       break;",
          "5487:     default:",
          "5488:       assert(!\"Invalid flags argument\");",
          "5489:   }",
          "",
          "[Removed Lines]",
          "5483:     case SQLITE_ACCESS_SYMLINK:",
          "5484:       rc = attr!=INVALID_FILE_ATTRIBUTES &&",
          "5485:              (attr & FILE_ATTRIBUTE_REPARSE_POINT)!=0;",
          "5486:       break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4791:   if( zFilename && zFilename[0] ){",
          "4792:     const char *z;",
          "4799:     nPathname = pVfs->mxPathname+1;",
          "4800:     zPathname = sqlite3DbMallocRaw(0, nPathname*2);",
          "4801:     if( zPathname==0 ){",
          "",
          "[Removed Lines]",
          "4793:     if( (vfsFlags & SQLITE_OPEN_NOFOLLOW)!=0 ){",
          "4794:       int isLink = 0;",
          "4795:       int rc = sqlite3OsAccess(pVfs, zFilename, SQLITE_ACCESS_SYMLINK, &isLink);",
          "4796:       if( rc==SQLITE_OK && isLink ) rc = SQLITE_CANTOPEN_SYMLINK;",
          "4797:       if( rc ) return rc;",
          "4798:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4803:     }",
          "4805:     rc = sqlite3OsFullPathname(pVfs, zFilename, nPathname, zPathname);",
          "4806:     nPathname = sqlite3Strlen30(zPathname);",
          "4807:     z = zUri = &zFilename[sqlite3Strlen30(zFilename)+1];",
          "4808:     while( *z ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4800:     if( rc!=SQLITE_OK ){",
          "4801:       if( rc==SQLITE_OK_SYMLINK ){",
          "4802:         if( vfsFlags & SQLITE_OPEN_NOFOLLOW ){",
          "4803:           rc = SQLITE_CANTOPEN_SYMLINK;",
          "4804:         }else{",
          "4805:           rc = SQLITE_OK;",
          "4806:         }",
          "4807:       }",
          "4808:     }",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "541: #define SQLITE_WARNING_AUTOINDEX       (SQLITE_WARNING | (1<<8))",
          "542: #define SQLITE_AUTH_USER               (SQLITE_AUTH | (1<<8))",
          "543: #define SQLITE_OK_LOAD_PERMANENTLY     (SQLITE_OK | (1<<8))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "544: #define SQLITE_OK_SYMLINK              (SQLITE_OK | (2<<8))",
          "",
          "---------------"
        ],
        "src/test_demovfs.c||src/test_demovfs.c": [
          "File: src/test_demovfs.c -> src/test_demovfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "512:   );",
          "519:   if( flags==SQLITE_ACCESS_READWRITE ) eAccess = R_OK|W_OK;",
          "520:   if( flags==SQLITE_ACCESS_READ )      eAccess = R_OK;",
          "",
          "[Removed Lines]",
          "514:   if( flags==SQLITE_ACCESS_SYMLINK ){",
          "517:     return SQLITE_OK;",
          "518:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test_vfs.c||src/test_vfs.c": [
          "File: src/test_vfs.c -> src/test_vfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "732:     if( flags==SQLITE_ACCESS_EXISTS ) zArg = \"SQLITE_ACCESS_EXISTS\";",
          "733:     if( flags==SQLITE_ACCESS_READWRITE ) zArg = \"SQLITE_ACCESS_READWRITE\";",
          "734:     if( flags==SQLITE_ACCESS_READ ) zArg = \"SQLITE_ACCESS_READ\";",
          "736:     tvfsExecTcl(p, \"xAccess\",",
          "737:         Tcl_NewStringObj(zPath, -1), Tcl_NewStringObj(zArg, -1), 0, 0",
          "738:     );",
          "",
          "[Removed Lines]",
          "735:     if( flags==SQLITE_ACCESS_SYMLINK ) zArg = \"SQLITE_ACCESS_SYMLINK\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}