{
  "cve_id": "CVE-2020-15202",
  "cve_desc": "In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, the `Shard` API in TensorFlow expects the last argument to be a function taking two `int64` (i.e., `long long`) arguments. However, there are several places in TensorFlow where a lambda taking `int` or `int32` arguments is being used. In these cases, if the amount of work to be parallelized is large enough, integer truncation occurs. Depending on how the two arguments of the lambda are used, this can result in segfaults, read/write outside of heap allocated arrays, stack overflows, or data corruption. The issue is patched in commits 27b417360cbd671ef55915e4bb6bb06af8b8a832 and ca8c013b5e97b1373b3bb1c97ea655e69f31a575, and is released in TensorFlow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "ca8c013b5e97b1373b3bb1c97ea655e69f31a575",
  "patch_info": {
    "commit_hash": "ca8c013b5e97b1373b3bb1c97ea655e69f31a575",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/ca8c013b5e97b1373b3bb1c97ea655e69f31a575",
    "files": [
      "tensorflow/core/kernels/boosted_trees/prediction_ops.cc",
      "tensorflow/core/kernels/image/crop_and_resize_op.cc",
      "tensorflow/core/kernels/linalg/banded_triangular_solve_op.cc",
      "tensorflow/core/kernels/nth_element_op.cc",
      "tensorflow/core/kernels/parameterized_truncated_normal_op.cc",
      "tensorflow/core/kernels/random_binomial_op.cc",
      "tensorflow/core/kernels/random_poisson_op.cc",
      "tensorflow/core/kernels/stateless_random_ops.cc",
      "tensorflow/core/kernels/topk_op.cc"
    ],
    "message": "Prevent integer truncation from 64 to 32 bits.\n\nThe `tensorflow::Shard` functions last argument must be a 2 argument function where both arguments are `int64` (`long long`, 64 bits). However, there are usages where code passes in a function where arguments are `int` or `int32` (32 bits). In these cases, it is possible that the integer truncation would later cause a segfault or other unexpected behavior.\n\nPiperOrigin-RevId: 332560414\nChange-Id: Ief649406babc8d4f60b3e7a9d573cbcc5ce5b767",
    "before_after_code_files": [
      "tensorflow/core/kernels/boosted_trees/prediction_ops.cc||tensorflow/core/kernels/boosted_trees/prediction_ops.cc",
      "tensorflow/core/kernels/image/crop_and_resize_op.cc||tensorflow/core/kernels/image/crop_and_resize_op.cc",
      "tensorflow/core/kernels/linalg/banded_triangular_solve_op.cc||tensorflow/core/kernels/linalg/banded_triangular_solve_op.cc",
      "tensorflow/core/kernels/nth_element_op.cc||tensorflow/core/kernels/nth_element_op.cc",
      "tensorflow/core/kernels/parameterized_truncated_normal_op.cc||tensorflow/core/kernels/parameterized_truncated_normal_op.cc",
      "tensorflow/core/kernels/random_binomial_op.cc||tensorflow/core/kernels/random_binomial_op.cc",
      "tensorflow/core/kernels/random_poisson_op.cc||tensorflow/core/kernels/random_poisson_op.cc",
      "tensorflow/core/kernels/stateless_random_ops.cc||tensorflow/core/kernels/stateless_random_ops.cc",
      "tensorflow/core/kernels/topk_op.cc||tensorflow/core/kernels/topk_op.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/boosted_trees/prediction_ops.cc||tensorflow/core/kernels/boosted_trees/prediction_ops.cc": [
      "File: tensorflow/core/kernels/boosted_trees/prediction_ops.cc -> tensorflow/core/kernels/boosted_trees/prediction_ops.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "121:       auto do_work = [&resource, &bucketized_features, &cached_tree_ids,",
      "122:                       &cached_node_ids, &output_partial_logits,",
      "123:                       &output_node_ids, latest_tree,",
      "125:         for (int32 i = start; i < end; ++i) {",
      "126:           int32 tree_id = cached_tree_ids(i);",
      "127:           int32 node_id = cached_node_ids(i);",
      "",
      "[Removed Lines]",
      "124:                       this](int32 start, int32 end) {",
      "",
      "[Added Lines]",
      "124:                       this](int64 start, int64 end) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "238:     const int32 last_tree = resource->num_trees() - 1;",
      "239:     auto do_work = [&resource, &bucketized_features, &output_logits, last_tree,",
      "241:       for (int32 i = start; i < end; ++i) {",
      "242:         std::vector<float> tree_logits(logits_dimension_, 0.0);",
      "243:         int32 tree_id = 0;",
      "",
      "[Removed Lines]",
      "240:                     this](int32 start, int32 end) {",
      "",
      "[Added Lines]",
      "240:                     this](int64 start, int64 end) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "342:     auto do_work = [&resource, &bucketized_features, &output_debug_info,",
      "344:       for (int32 i = start; i < end; ++i) {",
      "346:         boosted_trees::DebugOutput example_debug_info;",
      "",
      "[Removed Lines]",
      "343:                     last_tree](int32 start, int32 end) {",
      "",
      "[Added Lines]",
      "343:                     last_tree](int64 start, int64 end) {",
      "",
      "---------------"
    ],
    "tensorflow/core/kernels/image/crop_and_resize_op.cc||tensorflow/core/kernels/image/crop_and_resize_op.cc": [
      "File: tensorflow/core/kernels/image/crop_and_resize_op.cc -> tensorflow/core/kernels/image/crop_and_resize_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "223:     const int depth = crops.dimension(3);",
      "227:       for (int b = start_box; b < limit_box; ++b) {",
      "228:         const float y1 = boxes(b, 0);",
      "229:         const float x1 = boxes(b, 1);",
      "",
      "[Removed Lines]",
      "226:     auto CropAndResizePerBox = [&](int start_box, int limit_box) {",
      "",
      "[Added Lines]",
      "226:     auto CropAndResizePerBox = [&](int64 start_box, int64 limit_box) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "450:     grads_image.setZero();",
      "453:       for (int b = start_box; b < limit_box; ++b) {",
      "454:         const float y1 = boxes(b, 0);",
      "455:         const float x1 = boxes(b, 1);",
      "",
      "[Removed Lines]",
      "452:     auto CropAndResizeBackImgPerBox = [&](int start_box, int limit_box) {",
      "",
      "[Added Lines]",
      "452:     auto CropAndResizeBackImgPerBox = [&](int64 start_box, int64 limit_box) {",
      "",
      "---------------"
    ],
    "tensorflow/core/kernels/linalg/banded_triangular_solve_op.cc||tensorflow/core/kernels/linalg/banded_triangular_solve_op.cc": [
      "File: tensorflow/core/kernels/linalg/banded_triangular_solve_op.cc -> tensorflow/core/kernels/linalg/banded_triangular_solve_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "194:     Shard(worker_threads.num_threads, worker_threads.workers, batch_size,",
      "195:           cost_per_unit,",
      "197:             SequentialBandedTriangularSolveKernel<Scalar>::Run(",
      "198:                 in_x, in_y, lower, adjoint, bcast, out, start, limit);",
      "199:           });",
      "",
      "[Removed Lines]",
      "196:           [&in_x, &in_y, adjoint, lower, &bcast, out](int start, int limit) {",
      "",
      "[Added Lines]",
      "196:           [&in_x, &in_y, adjoint, lower, &bcast, out](int64 start,",
      "197:                                                       int64 limit) {",
      "",
      "---------------"
    ],
    "tensorflow/core/kernels/nth_element_op.cc||tensorflow/core/kernels/nth_element_op.cc": [
      "File: tensorflow/core/kernels/nth_element_op.cc -> tensorflow/core/kernels/nth_element_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "95:     const int last_dim = input_tensor.dim_size(input_tensor.dims() - 1);",
      "100:       std::vector<T> buf(last_dim);",
      "",
      "[Removed Lines]",
      "98:     auto SubNthElement = [&, input, output, last_dim, n](int start, int limit) {",
      "",
      "[Added Lines]",
      "98:     auto SubNthElement = [&, input, output, last_dim, n](int64 start,",
      "99:                                                          int64 limit) {",
      "",
      "---------------"
    ],
    "tensorflow/core/kernels/parameterized_truncated_normal_op.cc||tensorflow/core/kernels/parameterized_truncated_normal_op.cc": [
      "File: tensorflow/core/kernels/parameterized_truncated_normal_op.cc -> tensorflow/core/kernels/parameterized_truncated_normal_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "71:     auto do_work = [samples_per_batch, num_elements, &ctx, &means, &stddevs,",
      "72:                     &minvals, &maxvals, &gen, &output,",
      "",
      "[Removed Lines]",
      "73:                     kStdDevsInsideBoundsToUseRandnSampler](int start_batch,",
      "74:                                                            int limit_batch) {",
      "",
      "[Added Lines]",
      "73:                     kStdDevsInsideBoundsToUseRandnSampler](int64 start_batch,",
      "74:                                                            int64 limit_batch) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "334:     auto do_work = [num_batches, samples_per_batch, &ctx, &bcast, &means,",
      "335:                     &stddevs, &minvals, &maxvals, &gen, &output,",
      "",
      "[Removed Lines]",
      "336:                     kStdDevsInsideBoundsToUseRandnSampler](int start_output,",
      "337:                                                            int limit_output) {",
      "",
      "[Added Lines]",
      "336:                     kStdDevsInsideBoundsToUseRandnSampler](int64 start_output,",
      "337:                                                            int64 limit_output) {",
      "",
      "---------------"
    ],
    "tensorflow/core/kernels/random_binomial_op.cc||tensorflow/core/kernels/random_binomial_op.cc": [
      "File: tensorflow/core/kernels/random_binomial_op.cc -> tensorflow/core/kernels/random_binomial_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "186:     auto DoWork = [num_batches, samples_per_batch, &bcast, &counts, &probs,",
      "190:       Eigen::array<T, 4> z;",
      "",
      "[Removed Lines]",
      "187:                    &gen, &output](int start_output, int limit_output) {",
      "",
      "[Added Lines]",
      "187:                    &gen, &output](int64 start_output, int64 limit_output) {",
      "",
      "---------------"
    ],
    "tensorflow/core/kernels/random_poisson_op.cc||tensorflow/core/kernels/random_poisson_op.cc": [
      "File: tensorflow/core/kernels/random_poisson_op.cc -> tensorflow/core/kernels/random_poisson_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "97:     typedef random::UniformDistribution<random::PhiloxRandom, CT> Uniform;",
      "99:     auto DoWork = [num_samples, num_rate, &rng, samples_flat, rate_flat](",
      "",
      "[Removed Lines]",
      "100:                       int start_output, int limit_output) {",
      "",
      "[Added Lines]",
      "100:                       int64 start_output, int64 limit_output) {",
      "",
      "---------------"
    ],
    "tensorflow/core/kernels/stateless_random_ops.cc||tensorflow/core/kernels/stateless_random_ops.cc": [
      "File: tensorflow/core/kernels/stateless_random_ops.cc -> tensorflow/core/kernels/stateless_random_ops.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "254:     auto DoWork = [samples_per_alpha, num_alphas, &random, samples_flat,",
      "",
      "[Removed Lines]",
      "255:                    alpha_flat](int start_output, int limit_output) {",
      "",
      "[Added Lines]",
      "255:                    alpha_flat](int64 start_output, int64 limit_output) {",
      "",
      "---------------"
    ],
    "tensorflow/core/kernels/topk_op.cc||tensorflow/core/kernels/topk_op.cc": [
      "File: tensorflow/core/kernels/topk_op.cc -> tensorflow/core/kernels/topk_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "136:       return Status::OK();",
      "137:     }",
      "140:       for (int32 b = start_batch; b < limit_batch; ++b) {",
      "141:         const T* input_data = &input(b, 0);",
      "142:         const auto stable_comp = [input_data](const int32 a, const int32 b) {",
      "",
      "[Removed Lines]",
      "139:     auto SortIndices = [&](int start_batch, int limit_batch) {",
      "",
      "[Added Lines]",
      "139:     auto SortIndices = [&](int64 start_batch, int64 limit_batch) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "455750f3623b15a3b5d46c11d4c5102e9388dbda",
      "candidate_info": {
        "commit_hash": "455750f3623b15a3b5d46c11d4c5102e9388dbda",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/455750f3623b15a3b5d46c11d4c5102e9388dbda",
        "files": [
          "tensorflow/core/api_def/base_api/api_def_StatelessParameterizedTruncatedNormal.pbtxt",
          "tensorflow/core/kernels/BUILD",
          "tensorflow/core/kernels/parameterized_truncated_normal_op.cc",
          "tensorflow/core/kernels/parameterized_truncated_normal_op.h",
          "tensorflow/core/ops/stateless_random_ops.cc",
          "tensorflow/python/eager/pywrap_gradient_exclusions.cc",
          "tensorflow/python/kernel_tests/BUILD",
          "tensorflow/python/kernel_tests/random/BUILD",
          "tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py",
          "tensorflow/python/ops/random_grad.py",
          "tensorflow/python/ops/stateless_random_ops.py",
          "tensorflow/tools/api/golden/v1/tensorflow.random.pbtxt",
          "tensorflow/tools/api/golden/v1/tensorflow.raw_ops.pbtxt",
          "tensorflow/tools/api/golden/v2/tensorflow.random.pbtxt",
          "tensorflow/tools/api/golden/v2/tensorflow.raw_ops.pbtxt"
        ],
        "message": "Add StatelessParameterizedTruncatedNormal sampler.\n\nThis sampler supports broadcasting of its input parameters as well as puts the # samples at the left of the output shape, rather than the right.\n\nPiperOrigin-RevId: 317129622\nChange-Id: I4b62ad2e89a9637ae8b30b73af4b662ad0caa943",
        "before_after_code_files": [
          "tensorflow/core/api_def/base_api/api_def_StatelessParameterizedTruncatedNormal.pbtxt||tensorflow/core/api_def/base_api/api_def_StatelessParameterizedTruncatedNormal.pbtxt",
          "tensorflow/core/kernels/parameterized_truncated_normal_op.cc||tensorflow/core/kernels/parameterized_truncated_normal_op.cc",
          "tensorflow/core/kernels/parameterized_truncated_normal_op.h||tensorflow/core/kernels/parameterized_truncated_normal_op.h",
          "tensorflow/core/ops/stateless_random_ops.cc||tensorflow/core/ops/stateless_random_ops.cc",
          "tensorflow/python/eager/pywrap_gradient_exclusions.cc||tensorflow/python/eager/pywrap_gradient_exclusions.cc",
          "tensorflow/python/kernel_tests/parameterized_truncated_normal_op_test.py||tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py",
          "tensorflow/python/ops/random_grad.py||tensorflow/python/ops/random_grad.py",
          "tensorflow/python/ops/stateless_random_ops.py||tensorflow/python/ops/stateless_random_ops.py",
          "tensorflow/tools/api/golden/v1/tensorflow.random.pbtxt||tensorflow/tools/api/golden/v1/tensorflow.random.pbtxt",
          "tensorflow/tools/api/golden/v1/tensorflow.raw_ops.pbtxt||tensorflow/tools/api/golden/v1/tensorflow.raw_ops.pbtxt",
          "tensorflow/tools/api/golden/v2/tensorflow.random.pbtxt||tensorflow/tools/api/golden/v2/tensorflow.random.pbtxt",
          "tensorflow/tools/api/golden/v2/tensorflow.raw_ops.pbtxt||tensorflow/tools/api/golden/v2/tensorflow.raw_ops.pbtxt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/parameterized_truncated_normal_op.cc||tensorflow/core/kernels/parameterized_truncated_normal_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/parameterized_truncated_normal_op.cc||tensorflow/core/kernels/parameterized_truncated_normal_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/api_def/base_api/api_def_StatelessParameterizedTruncatedNormal.pbtxt||tensorflow/core/api_def/base_api/api_def_StatelessParameterizedTruncatedNormal.pbtxt": [
          "File: tensorflow/core/api_def/base_api/api_def_StatelessParameterizedTruncatedNormal.pbtxt -> tensorflow/core/api_def/base_api/api_def_StatelessParameterizedTruncatedNormal.pbtxt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: op {",
          "2:   graph_op_name: \"StatelessParameterizedTruncatedNormal\"",
          "3:   visibility: HIDDEN",
          "4:   in_arg {",
          "5:     name: \"shape\"",
          "6:     description: <<END",
          "7: The shape of the output tensor.",
          "8: END",
          "9:   }",
          "10:   in_arg {",
          "11:     name: \"seed\"",
          "12:     description: <<END",
          "13: 2 seeds (shape [2]).",
          "14: END",
          "15:   }",
          "16:   in_arg {",
          "17:     name: \"means\"",
          "18:     description: <<END",
          "19: The mean parameter of each batch.",
          "20: END",
          "21:   }",
          "22:   in_arg {",
          "23:     name: \"stddevs\"",
          "24:     description: <<END",
          "25: The standard deviation parameter of each batch. Must be greater than 0.",
          "26: END",
          "27:   }",
          "28:   in_arg {",
          "29:     name: \"minvals\"",
          "30:     description: <<END",
          "31: The minimum cutoff. May be -infinity.",
          "32: END",
          "33:   }",
          "34:   in_arg {",
          "35:     name: \"maxvals\"",
          "36:     description: <<END",
          "37: The maximum cutoff. May be +infinity, and must be more than the minval",
          "38: for each batch.",
          "39: END",
          "40:   }",
          "41:   attr {",
          "42:     name: \"dtype\"",
          "43:     description: <<END",
          "44: The type of the output.",
          "45: END",
          "46:   }",
          "47:   out_arg {",
          "48:     name: \"output\"",
          "49:     description: <<END",
          "50: The outputs are truncated normal samples and are a deterministic function of",
          "51: `shape`, `seed`, `minvals`, `maxvals`, `means` and `stddevs`.",
          "52: END",
          "53:   }",
          "54: }",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/parameterized_truncated_normal_op.cc||tensorflow/core/kernels/parameterized_truncated_normal_op.cc": [
          "File: tensorflow/core/kernels/parameterized_truncated_normal_op.cc -> tensorflow/core/kernels/parameterized_truncated_normal_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"tensorflow/core/framework/register_types.h\"",
          "33: #include \"tensorflow/core/framework/tensor.h\"",
          "34: #include \"tensorflow/core/framework/tensor_shape.h\"",
          "35: #include \"tensorflow/core/lib/random/random_distributions.h\"",
          "36: #include \"tensorflow/core/platform/logging.h\"",
          "37: #include \"tensorflow/core/util/guarded_philox_random.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: #include \"tensorflow/core/kernels/stateless_random_ops.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:     const T kStdDevsInsideBoundsToUseRandnSampler = T(1.3);",
          "68:     auto worker_threads = *(ctx->device()->tensorflow_cpu_worker_threads());",
          "",
          "[Removed Lines]",
          "70:     auto DoWork = [samples_per_batch, num_elements, &ctx, &means, &stddevs,",
          "71:                    &minvals, &maxvals, &gen, &output,",
          "72:                    kStdDevsInsideBoundsToUseRandnSampler](int start_batch,",
          "73:                                                           int limit_batch) {",
          "",
          "[Added Lines]",
          "71:     auto do_work = [samples_per_batch, num_elements, &ctx, &means, &stddevs,",
          "72:                     &minvals, &maxvals, &gen, &output,",
          "73:                     kStdDevsInsideBoundsToUseRandnSampler](int start_batch,",
          "74:                                                            int limit_batch) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "81:       gen_copy.Skip(start_batch * 2 * kMaxIterations * (samples_per_batch + 3) /",
          "82:                     4);",
          "84:       Uniform dist;",
          "86:       Normal normal_dist;",
          "",
          "[Removed Lines]",
          "83:       typedef random::UniformDistribution<random::PhiloxRandom, T> Uniform;",
          "85:       typedef random::NormalDistribution<random::PhiloxRandom, T> Normal;",
          "",
          "[Added Lines]",
          "84:       using Uniform = random::UniformDistribution<random::PhiloxRandom, T>;",
          "86:       using Normal = random::NormalDistribution<random::PhiloxRandom, T>;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "112:                          Eigen::numext::isfinite(maxval)),",
          "113:                     errors::InvalidArgument(\"Invalid parameters\"));",
          "",
          "[Removed Lines]",
          "115:         int numIterations = 0;",
          "",
          "[Added Lines]",
          "116:         int num_iterations = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "160:                 if (sample >= limit_sample) {",
          "161:                   break;",
          "162:                 }",
          "164:               } else {",
          "",
          "[Removed Lines]",
          "163:                 numIterations = 0;",
          "165:                 numIterations++;",
          "166:                 if (numIterations > kMaxIterations) {",
          "",
          "[Added Lines]",
          "164:                 num_iterations = 0;",
          "166:                 num_iterations++;",
          "167:                 if (num_iterations > kMaxIterations) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "201:             const auto u = dist(&gen_copy);",
          "202:             for (int i = 0; i < size; i++) {",
          "203:               auto accept = u[i] <= Eigen::numext::exp(g[i]);",
          "",
          "[Removed Lines]",
          "204:               if (accept || numIterations + 1 >= kMaxIterations) {",
          "",
          "[Added Lines]",
          "205:               if (accept || num_iterations + 1 >= kMaxIterations) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "223:                 if (sample >= limit_sample) {",
          "224:                   break;",
          "225:                 }",
          "227:               } else {",
          "229:               }",
          "230:             }",
          "231:           }",
          "",
          "[Removed Lines]",
          "226:                 numIterations = 0;",
          "228:                 numIterations++;",
          "",
          "[Added Lines]",
          "227:                 num_iterations = 0;",
          "229:                 num_iterations++;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "248:               const T u = rand[i];",
          "249:               i++;",
          "250:               auto accept = (u <= g && z < normMax);",
          "252:                 if (!accept) {",
          "253:                   LOG(ERROR) << \"TruncatedNormal exponential distribution \"",
          "254:                              << \"rejection sampler exceeds max iterations. \"",
          "",
          "[Removed Lines]",
          "251:               if (accept || numIterations + 1 >= kMaxIterations) {",
          "",
          "[Added Lines]",
          "252:               if (accept || num_iterations + 1 >= kMaxIterations) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "263:                 if (sample >= limit_sample) {",
          "264:                   break;",
          "265:                 }",
          "267:               } else {",
          "269:               }",
          "270:             }",
          "271:           }",
          "",
          "[Removed Lines]",
          "266:                 numIterations = 0;",
          "268:                 numIterations++;",
          "",
          "[Added Lines]",
          "267:                 num_iterations = 0;",
          "269:                 num_iterations++;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "305:     const int64 batchCost =",
          "306:         batchInitCost + uniformRejectionSamplingCost * 2 * samples_per_batch;",
          "307:     Shard(worker_threads.num_threads, worker_threads.workers, num_batches,",
          "309:   }",
          "310: };",
          "",
          "[Removed Lines]",
          "308:           batchCost, DoWork);",
          "",
          "[Added Lines]",
          "309:           batchCost, do_work);",
          "310:   }",
          "311: };",
          "313: template <typename T>",
          "314: struct TruncatedNormalFunctorV2<CPUDevice, T> {",
          "315:   void operator()(OpKernelContext* ctx, const CPUDevice& d, int64 num_batches,",
          "316:                   int64 samples_per_batch, int64 num_elements,",
          "317:                   const BCastList<4>& bcast,",
          "318:                   typename TTypes<T>::ConstFlat means,",
          "319:                   typename TTypes<T>::ConstFlat stddevs,",
          "320:                   typename TTypes<T>::ConstFlat minvals,",
          "321:                   typename TTypes<T>::ConstFlat maxvals,",
          "322:                   const random::PhiloxRandom& gen,",
          "323:                   typename TTypes<T>::Flat output) {",
          "331:     const T kStdDevsInsideBoundsToUseRandnSampler = T(1.3);",
          "332:     auto worker_threads = *(ctx->device()->tensorflow_cpu_worker_threads());",
          "334:     auto do_work = [num_batches, samples_per_batch, &ctx, &bcast, &means,",
          "335:                     &stddevs, &minvals, &maxvals, &gen, &output,",
          "336:                     kStdDevsInsideBoundsToUseRandnSampler](int start_output,",
          "337:                                                            int limit_output) {",
          "341:       random::PhiloxRandom gen_copy = gen;",
          "342:       using Uniform = random::UniformDistribution<random::PhiloxRandom, T>;",
          "343:       Uniform dist;",
          "344:       using Normal = random::NormalDistribution<random::PhiloxRandom, T>;",
          "345:       Normal normal_dist;",
          "350:       gen_copy.Skip((start_output * 2 * kMaxIterations +",
          "351:                      Uniform::kResultElementCount - 1) /",
          "352:                     Uniform::kResultElementCount);",
          "356:       Eigen::array<T, Uniform::kResultElementCount> z;",
          "357:       Eigen::array<T, Uniform::kResultElementCount> g;",
          "359:       const bool should_bcast = bcast.IsBroadcastingRequired();",
          "360:       const auto& means_batch_indices = bcast.batch_indices(0);",
          "361:       const auto& stddevs_batch_indices = bcast.batch_indices(1);",
          "362:       const auto& minvals_batch_indices = bcast.batch_indices(2);",
          "363:       const auto& maxvals_batch_indices = bcast.batch_indices(3);",
          "364:       auto output_flat = output.data();",
          "368:       for (int64 output_idx = start_output; output_idx < limit_output;",
          "370:       ) {",
          "371:         int64 batch_idx = output_idx / samples_per_batch;",
          "376:         T* const output_batch_offset = output_flat + batch_idx;",
          "379:         T mean, stddev, minval, maxval;",
          "380:         if (should_bcast) {",
          "381:           mean = means(means_batch_indices[batch_idx]);",
          "382:           stddev = stddevs(stddevs_batch_indices[batch_idx]);",
          "383:           minval = minvals(minvals_batch_indices[batch_idx]);",
          "384:           maxval = maxvals(maxvals_batch_indices[batch_idx]);",
          "385:         } else {",
          "386:           mean = means(batch_idx);",
          "387:           stddev = stddevs(batch_idx);",
          "388:           minval = minvals(batch_idx);",
          "389:           maxval = maxvals(batch_idx);",
          "390:         }",
          "393:         OP_REQUIRES(ctx,",
          "394:                     stddev > T(0) && minval < maxval &&",
          "395:                         (Eigen::numext::isfinite(minval) ||",
          "396:                          Eigen::numext::isfinite(maxval)),",
          "397:                     errors::InvalidArgument(\"Invalid parameters\"));",
          "399:         int num_iterations = 0;",
          "404:         if ((Eigen::numext::isinf(minval) && minval < T(0)) || maxval < mean) {",
          "406:           std::swap(minval, maxval);",
          "407:           stddev = -stddev;",
          "408:         }",
          "411:         const T normMin = (minval - mean) / stddev;",
          "412:         const T normMax = (maxval - mean) / stddev;",
          "415:         const T sqrtFactor = Eigen::numext::sqrt((normMin * normMin) + T(4));",
          "416:         const T cutoff =",
          "417:             T(2) *",
          "418:             Eigen::numext::exp(T(0.5) +",
          "419:                                (normMin * (normMin - sqrtFactor)) / T(4)) /",
          "420:             (normMin + sqrtFactor);",
          "421:         const T diff = normMax - normMin;",
          "423:         if (((normMin < -kStdDevsInsideBoundsToUseRandnSampler) &&",
          "424:              (normMax >= T(0.))) ||",
          "425:             ((normMax > kStdDevsInsideBoundsToUseRandnSampler) &&",
          "426:              (normMin <= T(0.)))) {",
          "434:           for (int64 sample_idx = output_idx % samples_per_batch;",
          "435:                sample_idx < samples_per_batch && output_idx < limit_output;) {",
          "436:             const auto randn_sample = normal_dist(&gen_copy);",
          "437:             const int size = randn_sample.size();",
          "438:             for (int i = 0; i < size; ++i) {",
          "439:               if ((randn_sample[i] >= normMin) &&",
          "440:                   (randn_sample[i] <= normMax)) {",
          "441:                 output_batch_offset[sample_idx * num_batches] =",
          "442:                     randn_sample[i] * stddev + mean;",
          "443:                 ++sample_idx;",
          "444:                 ++output_idx;",
          "445:                 if (sample_idx >= samples_per_batch ||",
          "446:                     output_idx >= limit_output) {",
          "447:                   break;",
          "448:                 }",
          "449:                 num_iterations = 0;",
          "450:               } else {",
          "451:                 ++num_iterations;",
          "452:                 if (num_iterations > kMaxIterations) {",
          "458:                   LOG(ERROR) << \"TruncatedNormal randn rejection sampler \"",
          "459:                              << \"exceeded maximum iterations for \"",
          "460:                              << \"normMin=\" << normMin << \" normMax=\" << normMax",
          "461:                              << \" kMaxIterations=\" << kMaxIterations;",
          "462:                   ctx->SetStatus(errors::Internal(",
          "463:                       \"TruncatedNormal randn rejection sampler failed to accept\"",
          "464:                       \" a sample.\"));",
          "465:                   return;",
          "466:                 }",
          "467:               }",
          "468:             }",
          "469:           }",
          "470:         } else if (diff < cutoff) {",
          "473:           const T plusFactor = (normMin < T(0)) ? T(0) : normMin * normMin;",
          "475:           for (int64 sample_idx = output_idx % samples_per_batch;",
          "476:                sample_idx < samples_per_batch && output_idx < limit_output;) {",
          "477:             const auto rand = dist(&gen_copy);",
          "478:             const int size = rand.size();",
          "481:             for (int i = 0; i < size; i++) {",
          "482:               z[i] = rand[i] * diff + normMin;",
          "483:               g[i] = (plusFactor - z[i] * z[i]) / T(2.0);",
          "484:             }",
          "486:             const auto u = dist(&gen_copy);",
          "487:             for (int i = 0; i < size; i++) {",
          "488:               auto accept = u[i] <= Eigen::numext::exp(g[i]);",
          "489:               if (accept || num_iterations + 1 >= kMaxIterations) {",
          "497:                 if (!accept) {",
          "498:                   LOG(ERROR) << \"TruncatedNormal uniform rejection sampler \"",
          "499:                              << \"exceeded max iterations. Sample may contain \"",
          "500:                              << \"outliers.\";",
          "501:                   ctx->SetStatus(errors::Internal(",
          "502:                       \"TruncatedNormal uniform rejection sampler failed to \"",
          "503:                       \" accept a sample.\"));",
          "504:                   return;",
          "505:                 }",
          "506:                 output_batch_offset[sample_idx * num_batches] =",
          "507:                     z[i] * stddev + mean;",
          "508:                 ++sample_idx;",
          "509:                 ++output_idx;",
          "510:                 if (sample_idx >= samples_per_batch ||",
          "511:                     output_idx >= limit_output) {",
          "512:                   break;",
          "513:                 }",
          "514:                 num_iterations = 0;",
          "515:               } else {",
          "516:                 num_iterations++;",
          "517:               }",
          "518:             }",
          "519:           }",
          "520:         } else {",
          "524:           const T alpha =",
          "525:               (normMin + Eigen::numext::sqrt((normMin * normMin) + T(4))) /",
          "526:               T(2);",
          "527:           for (int64 sample_idx = output_idx % samples_per_batch;",
          "528:                sample_idx < samples_per_batch && output_idx < limit_output;) {",
          "529:             auto rand = dist(&gen_copy);",
          "530:             const int size = rand.size();",
          "531:             int i = 0;",
          "532:             while (i < size) {",
          "533:               const T z = -Eigen::numext::log(rand[i]) / alpha + normMin;",
          "534:               i++;",
          "535:               const T x = normMin < alpha ? alpha - z : normMin - alpha;",
          "536:               const T g = Eigen::numext::exp(-x * x / T(2.0));",
          "537:               const T u = rand[i];",
          "538:               i++;",
          "539:               auto accept = (u <= g && z < normMax);",
          "540:               if (accept || num_iterations + 1 >= kMaxIterations) {",
          "541:                 if (!accept) {",
          "542:                   LOG(ERROR) << \"TruncatedNormal exponential distribution \"",
          "543:                              << \"rejection sampler exceeds max iterations. \"",
          "544:                              << \"Sample may contain outliers.\";",
          "545:                   ctx->SetStatus(errors::Internal(",
          "546:                       \"TruncatedNormal exponential distribution rejection\"",
          "547:                       \" sampler failed to accept a sample.\"));",
          "548:                   return;",
          "549:                 }",
          "550:                 output_batch_offset[sample_idx * num_batches] =",
          "551:                     z * stddev + mean;",
          "552:                 ++sample_idx;",
          "553:                 ++output_idx;",
          "554:                 if (sample_idx >= samples_per_batch ||",
          "555:                     output_idx >= limit_output) {",
          "556:                   break;",
          "557:                 }",
          "558:                 num_iterations = 0;",
          "559:               } else {",
          "560:                 num_iterations++;",
          "561:               }",
          "562:             }",
          "563:           }",
          "564:         }",
          "565:       }",
          "566:     };",
          "568:     const int64 batchInitCost =",
          "570:         (Eigen::TensorOpCost::AddCost<T>() +",
          "571:          Eigen::TensorOpCost::MulCost<T>()) *",
          "572:             2",
          "574:         + Eigen::TensorOpCost::AddCost<T>() +",
          "575:         Eigen::TensorOpCost::MulCost<T>() +",
          "576:         Eigen::internal::functor_traits<",
          "577:             Eigen::internal::scalar_sqrt_op<T>>::Cost",
          "579:         + Eigen::TensorOpCost::MulCost<T>() * 4 +",
          "580:         Eigen::internal::functor_traits<Eigen::internal::scalar_exp_op<T>>::Cost",
          "582:         + Eigen::TensorOpCost::AddCost<T>();",
          "583:     const int64 uniformSampleCost =",
          "584:         random::PhiloxRandom::kElementCost +",
          "585:         random::UniformDistribution<random::PhiloxRandom, T>::kElementCost;",
          "587:     const int64 uniformRejectionSamplingCost =",
          "588:         uniformSampleCost + Eigen::TensorOpCost::MulCost<T>() +",
          "589:         Eigen::TensorOpCost::AddCost<T>() +",
          "590:         Eigen::TensorOpCost::MulCost<T>() * 2 +",
          "591:         Eigen::TensorOpCost::AddCost<T>() + uniformSampleCost +",
          "592:         Eigen::internal::functor_traits<",
          "593:             Eigen::internal::scalar_exp_op<T>>::Cost +",
          "594:         Eigen::TensorOpCost::MulCost<T>() + Eigen::TensorOpCost::AddCost<T>();",
          "597:     const int64 batchCost = batchInitCost + uniformRejectionSamplingCost * 2;",
          "598:     Shard(worker_threads.num_threads, worker_threads.workers, num_elements,",
          "599:           batchCost, do_work);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "436:   TF_DISALLOW_COPY_AND_ASSIGN(ParameterizedTruncatedNormalOp);",
          "437: };",
          "439: }  // namespace",
          "447: TF_CALL_half(REGISTER);",
          "448: TF_CALL_float(REGISTER);",
          "",
          "[Removed Lines]",
          "441: #define REGISTER(TYPE)                                         \\",
          "442:   REGISTER_KERNEL_BUILDER(Name(\"ParameterizedTruncatedNormal\") \\",
          "443:                               .Device(DEVICE_CPU)              \\",
          "444:                               .TypeConstraint<TYPE>(\"dtype\"),  \\",
          "445:                           ParameterizedTruncatedNormalOp<CPUDevice, TYPE>)",
          "",
          "[Added Lines]",
          "731: template <typename Device, typename T>",
          "732: class StatelessParameterizedTruncatedNormal : public OpKernel {",
          "734:   static const int32 kDesiredBatchSize = 100;",
          "736:  public:",
          "737:   explicit StatelessParameterizedTruncatedNormal(OpKernelConstruction* context)",
          "738:       : OpKernel(context) {}",
          "740:   void Compute(OpKernelContext* ctx) override {",
          "741:     const Tensor& shape_tensor = ctx->input(0);",
          "742:     const Tensor& seed_tensor = ctx->input(1);",
          "743:     const Tensor& means_tensor = ctx->input(2);",
          "744:     const Tensor& stddevs_tensor = ctx->input(3);",
          "745:     const Tensor& minvals_tensor = ctx->input(4);",
          "746:     const Tensor& maxvals_tensor = ctx->input(5);",
          "748:     OP_REQUIRES(ctx, seed_tensor.dims() == 1 && seed_tensor.dim_size(0) == 2,",
          "749:                 errors::InvalidArgument(\"seed must have shape [2], not \",",
          "750:                                         seed_tensor.shape().DebugString()));",
          "752:     tensorflow::BCastList<4> bcast(",
          "753:         {means_tensor.shape().dim_sizes(), stddevs_tensor.shape().dim_sizes(),",
          "754:          minvals_tensor.shape().dim_sizes(),",
          "755:          maxvals_tensor.shape().dim_sizes()},",
          "759:     OP_REQUIRES(ctx, bcast.IsValid(),",
          "760:                 errors::InvalidArgument(",
          "761:                     \"means, stddevs, minvals, maxvals must have compatible \"",
          "762:                     \"batch dimensions: \",",
          "763:                     means_tensor.shape().DebugString(), \" vs. \",",
          "764:                     stddevs_tensor.shape().DebugString(), \" vs. \",",
          "765:                     minvals_tensor.shape().DebugString(), \" vs. \",",
          "766:                     maxvals_tensor.shape().DebugString()));",
          "769:     TensorShape bcast_shape = BCast::ToShape(bcast.output_shape());",
          "770:     OP_REQUIRES(",
          "771:         ctx, TensorShapeUtils::IsVector(shape_tensor.shape()),",
          "772:         errors::InvalidArgument(\"Input shape should be a vector, got shape: \",",
          "773:                                 shape_tensor.shape().DebugString()));",
          "774:     TensorShape output_shape;",
          "775:     if (shape_tensor.dtype() == DataType::DT_INT32) {",
          "776:       OP_REQUIRES_OK(ctx, TensorShapeUtils::MakeShape(shape_tensor.vec<int32>(),",
          "777:                                                       &output_shape));",
          "778:     } else {",
          "779:       OP_REQUIRES_OK(ctx, TensorShapeUtils::MakeShape(shape_tensor.vec<int64>(),",
          "780:                                                       &output_shape));",
          "781:     }",
          "782:     OP_REQUIRES(ctx, TensorShapeUtils::EndsWith(output_shape, bcast_shape),",
          "783:                 errors::InvalidArgument(",
          "784:                     \"Shape passed in must end with broadcasted shape.\"));",
          "786:     int64 samples_per_batch = 1;",
          "787:     const int64 num_sample_dims =",
          "788:         (shape_tensor.dim_size(0) - bcast.output_shape().size());",
          "789:     for (int64 i = 0; i < num_sample_dims; ++i) {",
          "790:       samples_per_batch *= output_shape.dim_size(i);",
          "791:     }",
          "792:     int64 num_batches = 1;",
          "793:     for (int64 i = num_sample_dims; i < shape_tensor.dim_size(0); ++i) {",
          "794:       num_batches *= output_shape.dim_size(i);",
          "795:     }",
          "796:     const int64 num_elements = num_batches * samples_per_batch;",
          "798:     Tensor* samples_tensor;",
          "799:     OP_REQUIRES_OK(ctx, ctx->allocate_output(0, output_shape, &samples_tensor));",
          "801:     auto truncFunctor = functor::TruncatedNormalFunctorV2<Device, T>();",
          "803:     random::PhiloxRandom::Key key;",
          "804:     random::PhiloxRandom::ResultType counter;",
          "805:     OP_REQUIRES_OK(ctx, GenerateKey(seed_tensor, &key, &counter));",
          "807:     auto philox = random::PhiloxRandom(counter, key);",
          "809:     truncFunctor(ctx, ctx->eigen_device<Device>(), num_batches,",
          "810:                  samples_per_batch, num_elements, bcast, means_tensor.flat<T>(),",
          "811:                  stddevs_tensor.flat<T>(), minvals_tensor.flat<T>(),",
          "812:                  maxvals_tensor.flat<T>(), philox, samples_tensor->flat<T>());",
          "813:   }",
          "815:  private:",
          "816:   TF_DISALLOW_COPY_AND_ASSIGN(StatelessParameterizedTruncatedNormal);",
          "817: };",
          "821: #define REGISTER(TYPE)                                                     \\",
          "822:   REGISTER_KERNEL_BUILDER(Name(\"ParameterizedTruncatedNormal\")             \\",
          "823:                               .Device(DEVICE_CPU)                          \\",
          "824:                               .TypeConstraint<TYPE>(\"dtype\"),              \\",
          "825:                           ParameterizedTruncatedNormalOp<CPUDevice, TYPE>) \\",
          "826:   REGISTER_KERNEL_BUILDER(                                                 \\",
          "827:       Name(\"StatelessParameterizedTruncatedNormal\")                        \\",
          "828:           .HostMemory(\"shape\")                                             \\",
          "829:           .HostMemory(\"seed\")                                              \\",
          "830:           .HostMemory(\"means\")                                             \\",
          "831:           .HostMemory(\"stddevs\")                                           \\",
          "832:           .HostMemory(\"minvals\")                                           \\",
          "833:           .HostMemory(\"maxvals\")                                           \\",
          "834:           .Device(DEVICE_CPU)                                              \\",
          "835:           .TypeConstraint<TYPE>(\"dtype\"),                                  \\",
          "836:       StatelessParameterizedTruncatedNormal<CPUDevice, TYPE>)",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/parameterized_truncated_normal_op.h||tensorflow/core/kernels/parameterized_truncated_normal_op.h": [
          "File: tensorflow/core/kernels/parameterized_truncated_normal_op.h -> tensorflow/core/kernels/parameterized_truncated_normal_op.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #include \"tensorflow/core/framework/tensor_types.h\"",
          "20: #include \"tensorflow/core/lib/random/random_distributions.h\"",
          "22: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #include \"tensorflow/core/util/bcast.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:                   typename TTypes<T>::Flat output);",
          "45: };",
          "47: }  // namespace functor",
          "48: }  // namespace tensorflow",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: template <typename Device, typename T>",
          "51: struct TruncatedNormalFunctorV2 {",
          "52:   void operator()(OpKernelContext* ctx, const Device& d, int64 num_batches,",
          "53:                   int64 samples_per_batch, int64 num_elements,",
          "54:                   const BCastList<4>& bcast,",
          "55:                   typename TTypes<T>::ConstFlat means,",
          "56:                   typename TTypes<T>::ConstFlat stddevs,",
          "57:                   typename TTypes<T>::ConstFlat minvals,",
          "58:                   typename TTypes<T>::ConstFlat maxvals,",
          "59:                   const random::PhiloxRandom& gen,",
          "60:                   typename TTypes<T>::Flat output);",
          "61: };",
          "",
          "---------------"
        ],
        "tensorflow/core/ops/stateless_random_ops.cc||tensorflow/core/ops/stateless_random_ops.cc": [
          "File: tensorflow/core/ops/stateless_random_ops.cc -> tensorflow/core/ops/stateless_random_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:     .Attr(\"dtype: {half, float, double, int32, int64} = DT_INT64\")",
          "125:     .SetShapeFn(StatelessShape);",
          "127: REGISTER_OP(\"StatelessRandomPoisson\")",
          "128:     .Input(\"shape: T\")",
          "129:     .Input(\"seed: Tseed\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127: REGISTER_OP(\"StatelessParameterizedTruncatedNormal\")",
          "128:     .Input(\"shape: S\")",
          "129:     .Input(\"seed: Tseed\")",
          "130:     .Input(\"means: dtype\")",
          "131:     .Input(\"stddevs: dtype\")",
          "132:     .Input(\"minvals: dtype\")",
          "133:     .Input(\"maxvals: dtype\")",
          "134:     .Output(\"output: dtype\")",
          "135:     .Attr(\"S: {int32, int64}\")",
          "136:     .Attr(\"Tseed: {int32, int64} = DT_INT64\")",
          "137:     .Attr(\"dtype: {float16, float32, float64}\")",
          "138:     .SetShapeFn([](InferenceContext* c) {",
          "140:       ShapeHandle seed;",
          "141:       TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 1, &seed));",
          "142:       DimensionHandle unused_dim;",
          "143:       TF_RETURN_IF_ERROR(c->WithValue(c->Dim(seed, 0), 2, &unused_dim));",
          "145:       ShapeHandle bcast_means_stddevs;",
          "146:       ShapeHandle bcast_except_maxvals;",
          "147:       ShapeHandle bcast_all;",
          "148:       TF_RETURN_IF_ERROR(BroadcastBinaryOpOutputShapeFnHelper(",
          "149:           c, c->input(2), c->input(3), true, &bcast_means_stddevs));",
          "150:       TF_RETURN_IF_ERROR(BroadcastBinaryOpOutputShapeFnHelper(",
          "151:           c, c->input(4), bcast_means_stddevs, true, &bcast_except_maxvals));",
          "152:       TF_RETURN_IF_ERROR(BroadcastBinaryOpOutputShapeFnHelper(",
          "153:           c, c->input(5), bcast_except_maxvals, true, &bcast_all));",
          "156:       ShapeHandle out;",
          "157:       TF_RETURN_IF_ERROR(c->MakeShapeFromShapeTensor(0, &out));",
          "158:       c->set_output(0, out);",
          "159:       return Status::OK();",
          "160:     });",
          "",
          "---------------"
        ],
        "tensorflow/python/eager/pywrap_gradient_exclusions.cc||tensorflow/python/eager/pywrap_gradient_exclusions.cc": [
          "File: tensorflow/python/eager/pywrap_gradient_exclusions.cc -> tensorflow/python/eager/pywrap_gradient_exclusions.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: absl::optional<tensorflow::gtl::FlatSet<int>> OpGradientUnusedInputIndices(",
          "52:     const tensorflow::string &op_name) {",
          "54:       {\"Acosh\"},",
          "55:       {\"AllToAll\", 1, {0}},",
          "56:       {\"ApproximateEqual\"},",
          "",
          "[Removed Lines]",
          "53:   static std::array<OpIndexInfo, 348> a = {{",
          "",
          "[Added Lines]",
          "53:   static std::array<OpIndexInfo, 349> a = {{",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "326:       {\"StackPop\"},",
          "327:       {\"StackPush\"},",
          "328:       {\"StatelessMultinomial\"},",
          "329:       {\"StatelessRandomBinomial\"},",
          "330:       {\"StatelessRandomGammaV2\", 1, {1}},",
          "331:       {\"StatelessRandomNormal\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329:       {\"StatelessParameterizedTruncatedNormal\", 1, {1}},",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/parameterized_truncated_normal_op_test.py||tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py": [
          "File: tensorflow/python/kernel_tests/parameterized_truncated_normal_op_test.py -> tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: from tensorflow.core.protobuf import config_pb2",
          "29: from tensorflow.python.client import session",
          "30: from tensorflow.python.framework import ops",
          "31: from tensorflow.python.framework import random_seed",
          "32: from tensorflow.python.framework import test_util",
          "33: from tensorflow.python.ops import control_flow_ops",
          "34: from tensorflow.python.ops import random_ops",
          "35: from tensorflow.python.platform import test",
          "36: from tensorflow.python.platform import tf_logging",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: from tensorflow.python.eager import backprop",
          "34: from tensorflow.python.ops import array_ops",
          "37: from tensorflow.python.ops import stateless_random_ops as stateless",
          "38: from tensorflow.python.ops import variables",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92: def calculate_moments(samples, max_moment):",
          "93:   moments = [0.0] * (max_moment + 1)",
          "101:   return moments",
          "",
          "[Removed Lines]",
          "94:   for sample in samples:",
          "95:     value = 1.0",
          "96:     for k in range(len(moments)):",
          "97:       moments[k] += value",
          "98:       value *= sample",
          "99:   for i in range(len(moments)):",
          "100:     moments[i] /= len(samples)",
          "",
          "[Added Lines]",
          "98:   for k in range(len(moments)):",
          "99:     moments[k] = np.mean(samples**k, axis=0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "118:   # Stop at moment 10 to avoid numerical errors in the theoretical moments.",
          "119:   max_moment = 10",
          "122:     try:",
          "123:       # TruncatedNormalMoments requires scipy.stats.",
          "124:       # Give up early if we are unable to import it.",
          "126:       random_seed.set_random_seed(seed)",
          "127:       with self.cached_session(use_gpu=True):",
          "131:         assert (~np.isnan(samples)).all()",
          "132:       moments = calculate_moments(samples, self.max_moment)",
          "133:       expected_moments = TruncatedNormalMoments(mean, stddev, minval, maxval)",
          "",
          "[Removed Lines]",
          "121:   def validateMoments(self, shape, mean, stddev, minval, maxval, seed=1618):",
          "125:       import scipy.stats  # pylint: disable=g-import-not-at-top,unused-variable",
          "128:         samples = random_ops.parameterized_truncated_normal(shape, mean, stddev,",
          "129:                                                             minval,",
          "130:                                                             maxval).eval()",
          "",
          "[Added Lines]",
          "120:   def validateMoments(self,",
          "121:                       shape,",
          "122:                       mean,",
          "123:                       stddev,",
          "124:                       minval,",
          "125:                       maxval,",
          "126:                       use_stateless=False,",
          "127:                       seed=1618):",
          "133:         if use_stateless:",
          "134:           # Generate a seed that stateless ops can use.",
          "135:           new_seed = random_ops.random_uniform([2],",
          "136:                                                seed=seed,",
          "137:                                                minval=0,",
          "138:                                                maxval=(2**31 - 1),",
          "139:                                                dtype=np.int32)",
          "140:           samples = stateless.stateless_parameterized_truncated_normal(",
          "141:               shape, new_seed, mean, stddev, minval, maxval).eval()",
          "142:         else:",
          "143:           samples = random_ops.parameterized_truncated_normal(",
          "144:               shape, mean, stddev, minval, maxval).eval()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "144:                                 stddev,",
          "145:                                 minval,",
          "146:                                 maxval,",
          "147:                                 seed=1618):",
          "148:     try:",
          "149:       import scipy.stats  # pylint: disable=g-import-not-at-top",
          "150:       random_seed.set_random_seed(seed)",
          "151:       with self.cached_session(use_gpu=True):",
          "155:       assert (~np.isnan(samples)).all()",
          "156:       minval = max(mean - stddev * 10, minval)",
          "157:       maxval = min(mean + stddev * 10, maxval)",
          "",
          "[Removed Lines]",
          "152:         samples = random_ops.parameterized_truncated_normal(shape, mean, stddev,",
          "153:                                                             minval,",
          "154:                                                             maxval).eval()",
          "",
          "[Added Lines]",
          "161:                                 use_stateless=False,",
          "167:         if use_stateless:",
          "168:           new_seed = random_ops.random_uniform([2],",
          "169:                                                seed=seed,",
          "170:                                                minval=0,",
          "171:                                                maxval=(2**31 - 1),",
          "172:                                                dtype=np.int32)",
          "173:           samples = stateless.stateless_parameterized_truncated_normal(",
          "174:               shape, new_seed, mean, stddev, minval, maxval).eval()",
          "175:         else:",
          "176:           samples = random_ops.parameterized_truncated_normal(",
          "177:               shape, mean, stddev, minval, maxval).eval()",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "170:   @test_util.run_deprecated_v1",
          "171:   def testDefaults(self):",
          "174:   @test_util.run_deprecated_v1",
          "175:   def testShifted(self):",
          "178:   @test_util.run_deprecated_v1",
          "179:   def testRightTail(self):",
          "182:   @test_util.run_deprecated_v1",
          "183:   def testLeftTail(self):",
          "186:   @test_util.run_deprecated_v1",
          "187:   def testLeftTailTwoSidedBounds(self):",
          "190:   @test_util.run_deprecated_v1",
          "191:   @test_util.disable_xla(\"Low probability region\")",
          "192:   def testTwoSidedLeftTailShifted(self):",
          "195:   @test_util.run_deprecated_v1",
          "196:   @test_util.disable_xla(\"Low probability region\")",
          "197:   def testRightTailShifted(self):",
          "200:   # Take the normal distribution around the mean, but truncating the left tail",
          "201:   # far from the mean.",
          "202:   @test_util.run_deprecated_v1",
          "203:   def testTruncateOnLeft_entireTailOnRight(self):",
          "206:   # Take the normal distribution around the mean, but truncating the right tail.",
          "207:   @test_util.run_deprecated_v1",
          "208:   def testTruncateOnRight_entireTailOnLeft(self):",
          "211:   @test_util.run_deprecated_v1",
          "212:   def testSmallStddev(self):",
          "215:   @test_util.run_deprecated_v1",
          "216:   def testSamplingWithSmallStdDevFarFromBound(self):",
          "217:     sample_op = random_ops.parameterized_truncated_normal(",
          "218:         shape=(int(1e5),), means=0.8, stddevs=0.05, minvals=-1., maxvals=1.)",
          "220:     with self.session(use_gpu=True) as sess:",
          "222:       # 0. is more than 16 standard deviations from the mean, and",
          "223:       # should have a likelihood < 1e-57.",
          "224:       assert (~np.isnan(samples)).all()",
          "228:   @test_util.run_deprecated_v1",
          "229:   def testSamplingAtRandnSwitchover(self):",
          "",
          "[Removed Lines]",
          "172:     self.validateMoments([10**5], 0.0, 1.0, -2.0, 2.0)",
          "176:     self.validateMoments([10**5], -1.0, 1.0, -2.0, 2.0)",
          "180:     self.validateMoments([10**5], 0.0, 1.0, 4.0, np.infty)",
          "184:     self.validateMoments([10**5], 0.0, 1.0, -np.infty, -4.0)",
          "188:     self.validateMoments([10**5], 0.0, 1.0, -6.0, -3.0)",
          "193:     self.validateKolmogorovSmirnov([10**5], 6.0, 1.0, -1.0, 1.0)",
          "198:     self.validateMoments([10**5], -5.0, 1.0, 2.0, np.infty)",
          "204:     self.validateKolmogorovSmirnov([10**5], 10.0, 1.0, 4.0, np.infty)",
          "209:     self.validateKolmogorovSmirnov([10**5], -8, 1.0, -np.infty, -4.0)",
          "213:     self.validateKolmogorovSmirnov([10**5], 0.0, 0.1, 0.05, 0.10)",
          "221:       samples = sess.run(sample_op)",
          "225:       no_neg_samples = np.sum(samples < 0.)",
          "226:       self.assertEqual(no_neg_samples, 0.)",
          "",
          "[Added Lines]",
          "196:     self.validateMoments([int(1e5)], 0.0, 1.0, -2.0, 2.0)",
          "197:     self.validateMoments([int(1e5)], 0.0, 1.0, -2.0, 2.0, use_stateless=True)",
          "201:     self.validateMoments([int(1e5)], -1.0, 1.0, -2.0, 2.0)",
          "202:     self.validateMoments([int(1e5)], -1.0, 1.0, -2.0, 2.0, use_stateless=True)",
          "206:     self.validateMoments([int(1e5)], 0.0, 1.0, 4.0, np.infty)",
          "207:     self.validateMoments([int(1e5)],",
          "208:                          0.0,",
          "209:                          1.0,",
          "210:                          4.0,",
          "211:                          np.infty,",
          "212:                          use_stateless=True)",
          "216:     self.validateMoments([int(1e5)], 0.0, 1.0, -np.infty, -4.0)",
          "217:     self.validateMoments([int(1e5)],",
          "218:                          0.0,",
          "219:                          1.0,",
          "220:                          -np.infty,",
          "221:                          -4.0,",
          "222:                          use_stateless=True)",
          "226:     self.validateMoments([int(1e5)], 0.0, 1.0, -6.0, -3.0)",
          "227:     self.validateMoments([int(1e5)], 0.0, 1.0, -6.0, -3.0, use_stateless=True)",
          "232:     self.validateKolmogorovSmirnov([int(1e5)], 6.0, 1.0, -1.0, 1.0)",
          "233:     self.validateKolmogorovSmirnov([int(1e5)],",
          "234:                                    6.0,",
          "235:                                    1.0,",
          "236:                                    -1.0,",
          "237:                                    1.0,",
          "238:                                    use_stateless=True)",
          "243:     self.validateMoments([int(1e5)], -5.0, 1.0, 2.0, np.infty)",
          "244:     self.validateMoments([int(1e5)],",
          "245:                          -5.0,",
          "246:                          1.0,",
          "247:                          2.0,",
          "248:                          np.infty,",
          "249:                          use_stateless=True)",
          "255:     self.validateKolmogorovSmirnov([int(1e5)], 10.0, 1.0, 4.0, np.infty)",
          "256:     self.validateKolmogorovSmirnov([int(1e5)],",
          "257:                                    10.0,",
          "258:                                    1.0,",
          "259:                                    4.0,",
          "260:                                    np.infty,",
          "261:                                    use_stateless=True)",
          "266:     self.validateKolmogorovSmirnov([int(1e5)], -8, 1.0, -np.infty, -4.0)",
          "267:     self.validateKolmogorovSmirnov([int(1e5)],",
          "268:                                    -8.,",
          "269:                                    1.0,",
          "270:                                    -np.infty,",
          "271:                                    -4.0,",
          "272:                                    use_stateless=True)",
          "276:     self.validateKolmogorovSmirnov([int(1e5)], 0.0, 0.1, 0.05, 0.10)",
          "277:     self.validateKolmogorovSmirnov([int(1e5)],",
          "278:                                    0.0,",
          "279:                                    0.1,",
          "280:                                    0.05,",
          "281:                                    0.10,",
          "282:                                    use_stateless=True)",
          "288:     new_seed = random_ops.random_uniform([2],",
          "289:                                          seed=1234,",
          "290:                                          minval=0,",
          "291:                                          maxval=(2**31 - 1),",
          "292:                                          dtype=np.int32)",
          "293:     sample_op_stateless = stateless.stateless_parameterized_truncated_normal(",
          "294:         shape=(int(1e5),),",
          "295:         seed=new_seed,",
          "296:         means=0.8,",
          "297:         stddevs=0.05,",
          "298:         minvals=-1.,",
          "299:         maxvals=1.)",
          "302:       samples, samples_stateless = sess.run([sample_op, sample_op_stateless])",
          "306:       assert (~np.isnan(samples_stateless)).all()",
          "307:       self.assertAllGreater(samples, 0.)",
          "308:       self.assertAllGreater(samples_stateless, 0.)",
          "310:   def testStatelessParameterizedTruncatedNormalHasGrads(self):",
          "311:     mean = variables.Variable(0.01)",
          "312:     stddev = variables.Variable(1.)",
          "313:     minval = variables.Variable(-1.)",
          "314:     maxval = variables.Variable(1.)",
          "316:     with self.cached_session(use_gpu=True) as sess:",
          "317:       with backprop.GradientTape(persistent=True) as tape:",
          "318:         samples = stateless.stateless_parameterized_truncated_normal(",
          "319:             [1], [1, 2], mean, stddev, minval, maxval)",
          "321:       sess.run(variables.variables_initializer([mean, stddev, minval, maxval]))",
          "322:       [mean_grad, std_grad], mean_actual_grad, std_actual_grad = sess.run([",
          "323:           tape.gradient(samples, [mean, stddev]),",
          "324:           array_ops.ones_like(mean),",
          "325:           (samples - mean) / stddev])",
          "326:       self.assertAllClose(mean_grad, mean_actual_grad)",
          "327:       self.assertAllClose(std_grad, std_actual_grad[0])",
          "329:       try:",
          "330:         import scipy.stats  # pylint:disable=g-import-not-at-top",
          "331:         truncnorm = scipy.stats.truncnorm(a=-1., b=1., loc=0., scale=1.)",
          "332:         samples_np, [minval_grad, maxval_grad] = sess.run([",
          "333:             samples, tape.gradient(samples, [minval, maxval])])",
          "335:         sample_cdf = truncnorm.cdf(samples_np)",
          "336:         # These come from the implicit reparameterization trick.",
          "337:         scipy_maxval_grad = np.exp(",
          "338:             0.5 * (samples_np ** 2 - ((1. - 0.01) / 1.) ** 2) +",
          "339:             np.log(sample_cdf))",
          "341:         scipy_minval_grad = np.exp(",
          "342:             0.5 * (samples_np ** 2 - ((-1. - 0.01) / 1.) ** 2) +",
          "343:             np.log1p(-sample_cdf))",
          "345:         self.assertAllClose(minval_grad, scipy_minval_grad[0], rtol=1e-2)",
          "346:         self.assertAllClose(maxval_grad, scipy_maxval_grad[0], rtol=1e-2)",
          "348:       except ImportError as e:",
          "349:         tf_logging.warn(\"Cannot test truncated normal op: %s\" % str(e))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "240:     epsilon = 0.001",
          "241:     self.validateMoments(",
          "243:         mean=0.,",
          "244:         stddev=1.0,",
          "245:         minval=-epsilon,",
          "246:         maxval=stddev_inside_bounds_before_using_randn - epsilon)",
          "247:     self.validateMoments(",
          "249:         mean=0.,",
          "250:         stddev=1.0,",
          "251:         minval=-epsilon,",
          "252:         maxval=stddev_inside_bounds_before_using_randn + epsilon)",
          "255: # Benchmarking code",
          "256: def parameterized_vs_naive(shape, num_iters, use_gpu=False):",
          "",
          "[Removed Lines]",
          "242:         shape=[10**6],",
          "248:         shape=[10**6],",
          "",
          "[Added Lines]",
          "365:         shape=[int(1e6)],",
          "371:         shape=[int(1e6)],",
          "377:     self.validateMoments(",
          "378:         shape=[int(1e6)],",
          "379:         mean=0.,",
          "380:         stddev=1.0,",
          "381:         minval=-epsilon,",
          "382:         maxval=stddev_inside_bounds_before_using_randn - epsilon,",
          "383:         use_stateless=True)",
          "384:     self.validateMoments(",
          "385:         shape=[int(1e6)],",
          "386:         mean=0.,",
          "387:         stddev=1.0,",
          "388:         minval=-epsilon,",
          "389:         maxval=stddev_inside_bounds_before_using_randn + epsilon,",
          "390:         use_stateless=True)",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/random_grad.py||tensorflow/python/ops/random_grad.py": [
          "File: tensorflow/python/ops/random_grad.py -> tensorflow/python/ops/random_grad.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: from __future__ import division",
          "19: from __future__ import print_function",
          "21: from tensorflow.python.framework import dtypes",
          "22: from tensorflow.python.framework import ops",
          "23: from tensorflow.python.ops import array_ops",
          "24: from tensorflow.python.ops import gen_random_ops",
          "25: from tensorflow.python.ops import math_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import numpy as np",
          "23: from tensorflow.python.framework import constant_op",
          "27: from tensorflow.python.ops import clip_ops",
          "28: from tensorflow.python.ops import gen_array_ops",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:     return (None, None,",
          "115:             math_ops.reduce_sum(",
          "116:                 grad * partial_a, axis=math_ops.range(num_sample_dimensions)))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124: def _Ndtr(x):",
          "125:   \"\"\"Normal distribution function.\"\"\"",
          "126:   half_sqrt_2 = constant_op.constant(",
          "127:       0.5 * np.sqrt(2.), dtype=x.dtype, name=\"half_sqrt_2\")",
          "128:   w = x * half_sqrt_2",
          "129:   z = math_ops.abs(w)",
          "130:   y = array_ops.where(",
          "131:       z < half_sqrt_2,",
          "132:       1. + math_ops.erf(w),",
          "133:       array_ops.where(",
          "134:           w > 0., 2. - math_ops.erfc(z), math_ops.erfc(z)))",
          "135:   return 0.5 * y",
          "138: @ops.RegisterGradient(\"StatelessParameterizedTruncatedNormal\")",
          "139: def _StatelessParameterizedTruncatedNormalGrad(op, grad):  # pylint: disable=invalid-name",
          "140:   \"\"\"Returns the gradient of a TruncatedNormal sample w.r.t. parameters.",
          "142:   The gradient is computed using implicit differentiation",
          "143:   (Figurnov et al., 2018).",
          "145:   Args:",
          "146:     op: A `StatelessParameterizedTruncatedNormal` operation. We assume that the",
          "147:       inputs to the operation are `shape`, `seed`, `mean`, `stddev`, `minval`,",
          "148:       and `maxval` tensors, and the output is the `sample` tensor.",
          "149:     grad: The incoming gradient `dloss / dsample` of the same shape as",
          "150:       `op.outputs[0]`.",
          "152:   Returns:",
          "153:     A list of `Tensor` with derivates with respect to each parameter.",
          "155:   References:",
          "156:     Implicit Reparameterization Gradients:",
          "157:       [Figurnov et al., 2018]",
          "158:       (http://papers.nips.cc/paper/7326-implicit-reparameterization-gradients)",
          "159:       ([pdf]",
          "160:       (http://papers.nips.cc/paper/7326-implicit-reparameterization-gradients.pdf))",
          "161:   \"\"\"",
          "162:   shape = op.inputs[0]",
          "163:   mean = op.inputs[2]",
          "164:   stddev = op.inputs[3]",
          "165:   minval = op.inputs[4]",
          "166:   maxval = op.inputs[5]",
          "167:   sample = op.outputs[0]",
          "169:   with ops.control_dependencies([grad]):",
          "170:     minval_std = (minval - mean) / stddev",
          "171:     maxval_std = (maxval - mean) / stddev",
          "172:     sample_std = (sample - mean) / stddev",
          "174:     cdf_sample = (_Ndtr(sample_std) - _Ndtr(minval_std)) / (",
          "175:         _Ndtr(maxval_std) - _Ndtr(minval_std))",
          "177:     # Clip to avoid zero argument for log_cdf expression",
          "178:     tiny = np.finfo(mean.dtype.as_numpy_dtype).tiny",
          "179:     eps = np.finfo(mean.dtype.as_numpy_dtype).eps",
          "180:     cdf_sample = clip_ops.clip_by_value(cdf_sample, tiny, 1 - eps)",
          "182:     dmaxval = math_ops.exp(0.5 * (sample_std ** 2 - maxval_std ** 2) +",
          "183:                            math_ops.log(cdf_sample))",
          "184:     dminval = math_ops.exp(0.5 * (sample_std ** 2 - minval_std ** 2) +",
          "185:                            math_ops.log1p(-cdf_sample))",
          "186:     dmean = array_ops.ones_like(sample_std)",
          "187:     dstddev = sample_std",
          "189:     # Reduce over extra dimensions caused by `shape`. We need to get the",
          "190:     # difference in rank from shape vs. the broadcasted rank.",
          "192:     mean_shape = array_ops.shape(mean)",
          "193:     stddev_shape = array_ops.shape(stddev)",
          "194:     minval_shape = array_ops.shape(minval)",
          "195:     maxval_shape = array_ops.shape(maxval)",
          "197:     broadcast_shape = array_ops.broadcast_dynamic_shape(",
          "198:         mean_shape, stddev_shape)",
          "199:     broadcast_shape = array_ops.broadcast_dynamic_shape(",
          "200:         minval_shape, broadcast_shape)",
          "201:     broadcast_shape = array_ops.broadcast_dynamic_shape(",
          "202:         maxval_shape, broadcast_shape)",
          "203:     extra_dims = math_ops.range(",
          "204:         array_ops.size(shape) - array_ops.size(broadcast_shape))",
          "206:     grad_mean = math_ops.reduce_sum(grad * dmean, axis=extra_dims)",
          "207:     grad_stddev = math_ops.reduce_sum(grad * dstddev, axis=extra_dims)",
          "208:     grad_minval = math_ops.reduce_sum(grad * dminval, axis=extra_dims)",
          "209:     grad_maxval = math_ops.reduce_sum(grad * dmaxval, axis=extra_dims)",
          "211:     _, rmean = gen_array_ops.broadcast_gradient_args(",
          "212:         broadcast_shape, mean_shape)",
          "213:     _, rstddev = gen_array_ops.broadcast_gradient_args(",
          "214:         broadcast_shape, stddev_shape)",
          "215:     _, rminval = gen_array_ops.broadcast_gradient_args(",
          "216:         broadcast_shape, minval_shape)",
          "217:     _, rmaxval = gen_array_ops.broadcast_gradient_args(",
          "218:         broadcast_shape, maxval_shape)",
          "220:     grad_mean = array_ops.reshape(",
          "221:         math_ops.reduce_sum(grad_mean, axis=rmean, keepdims=True), mean_shape)",
          "223:     grad_stddev = array_ops.reshape(",
          "224:         math_ops.reduce_sum(grad_stddev, axis=rstddev, keepdims=True),",
          "225:         stddev_shape)",
          "227:     grad_minval = array_ops.reshape(",
          "228:         math_ops.reduce_sum(grad_minval, axis=rminval, keepdims=True),",
          "229:         minval_shape)",
          "231:     grad_maxval = array_ops.reshape(",
          "232:         math_ops.reduce_sum(grad_maxval, axis=rmaxval, keepdims=True),",
          "233:         maxval_shape)",
          "235:     # The first two inputs are shape.",
          "236:     return (None, None, grad_mean, grad_stddev, grad_minval, grad_maxval)",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/stateless_random_ops.py||tensorflow/python/ops/stateless_random_ops.py": [
          "File: tensorflow/python/ops/stateless_random_ops.py -> tensorflow/python/ops/stateless_random_ops.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "618:   logits = ops.convert_to_tensor(logits, name=\"logits\")",
          "619:   return gen_stateless_random_ops.stateless_multinomial(",
          "620:       logits, num_samples, seed, output_dtype=dtype)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "623: @dispatch.add_dispatch_support",
          "624: @tf_export(\"random.stateless_parameterized_truncated_normal\")",
          "625: def stateless_parameterized_truncated_normal(shape,",
          "626:                                              seed,",
          "627:                                              means=0.0,",
          "628:                                              stddevs=1.0,",
          "629:                                              minvals=-2.0,",
          "630:                                              maxvals=2.0,",
          "631:                                              name=None):",
          "632:   \"\"\"Outputs random values from a truncated normal distribution.",
          "634:   The generated values follow a normal distribution with specified mean and",
          "635:   standard deviation, except that values whose magnitude is more than 2 standard",
          "636:   deviations from the mean are dropped and re-picked.",
          "639:   Examples:",
          "641:   Sample from a Truncated normal, with deferring shape parameters that",
          "642:   broadcast.",
          "644:   >>> means = 0.",
          "645:   >>> stddevs = tf.math.exp(tf.random.uniform(shape=[2, 3]))",
          "646:   >>> minvals = [-1., -2., -1000.]",
          "647:   >>> maxvals = [[10000.], [1.]]",
          "648:   >>> y = tf.random.stateless_parameterized_truncated_normal(",
          "649:   ...   shape=[10, 2, 3], seed=[7, 17],",
          "650:   ...   means=means, stddevs=stddevs, minvals=minvals, maxvals=maxvals)",
          "651:   >>> y.shape",
          "652:   TensorShape([10, 2, 3])",
          "654:   Args:",
          "655:     shape: A 1-D integer `Tensor` or Python array. The shape of the output",
          "656:       tensor.",
          "657:     seed: A shape [2] Tensor, the seed to the random number generator. Must have",
          "658:       dtype `int32` or `int64`. (When using XLA, only `int32` is allowed.)",
          "659:     means: A `Tensor` or Python value of type `dtype`. The mean of the truncated",
          "660:       normal distribution. This must broadcast with `stddevs`, `minvals` and",
          "661:       `maxvals`, and the broadcasted shape must be dominated by `shape`.",
          "662:     stddevs: A `Tensor` or Python value of type `dtype`. The standard deviation",
          "663:       of the truncated normal distribution. This must broadcast with `means`,",
          "664:       `minvals` and `maxvals`, and the broadcasted shape must be dominated by",
          "665:       `shape`.",
          "666:     minvals: A `Tensor` or Python value of type `dtype`. The minimum value of",
          "667:       the truncated normal distribution. This must broadcast with `means`,",
          "668:       `stddevs` and `maxvals`, and the broadcasted shape must be dominated by",
          "669:       `shape`.",
          "670:     maxvals: A `Tensor` or Python value of type `dtype`. The maximum value of",
          "671:       the truncated normal distribution. This must broadcast with `means`,",
          "672:       `stddevs` and `minvals`, and the broadcasted shape must be dominated by",
          "673:       `shape`.",
          "674:     name: A name for the operation (optional).",
          "676:   Returns:",
          "677:     A tensor of the specified shape filled with random truncated normal values.",
          "678:   \"\"\"",
          "679:   with ops.name_scope(name, \"stateless_parameterized_truncated_normal\",",
          "680:                       [shape, means, stddevs, minvals, maxvals]) as name:",
          "681:     shape_tensor = tensor_util.shape_tensor(shape)",
          "682:     means_tensor = ops.convert_to_tensor(means, name=\"means\")",
          "683:     stddevs_tensor = ops.convert_to_tensor(stddevs, name=\"stddevs\")",
          "684:     minvals_tensor = ops.convert_to_tensor(minvals, name=\"minvals\")",
          "685:     maxvals_tensor = ops.convert_to_tensor(maxvals, name=\"maxvals\")",
          "686:     rnd = gen_stateless_random_ops.stateless_parameterized_truncated_normal(",
          "687:         shape_tensor, seed, means_tensor, stddevs_tensor, minvals_tensor,",
          "688:         maxvals_tensor)",
          "689:     tensor_util.maybe_set_static_shape(rnd, shape)",
          "690:     return rnd",
          "",
          "---------------"
        ],
        "tensorflow/tools/api/golden/v1/tensorflow.random.pbtxt||tensorflow/tools/api/golden/v1/tensorflow.random.pbtxt": [
          "File: tensorflow/tools/api/golden/v1/tensorflow.random.pbtxt -> tensorflow/tools/api/golden/v1/tensorflow.random.pbtxt",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:     name: \"stateless_normal\"",
          "93:     argspec: \"args=[\\'shape\\', \\'seed\\', \\'mean\\', \\'stddev\\', \\'dtype\\', \\'name\\'], varargs=None, keywords=None, defaults=[\\'0.0\\', \\'1.0\\', \\\"<dtype: \\'float32\\'>\\\", \\'None\\'], \"",
          "94:   }",
          "95:   member_method {",
          "96:     name: \"stateless_poisson\"",
          "97:     argspec: \"args=[\\'shape\\', \\'seed\\', \\'lam\\', \\'dtype\\', \\'name\\'], varargs=None, keywords=None, defaults=[\\\"<dtype: \\'int32\\'>\\\", \\'None\\'], \"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95:   member_method {",
          "96:     name: \"stateless_parameterized_truncated_normal\"",
          "97:     argspec: \"args=[\\'shape\\', \\'seed\\', \\'means\\', \\'stddevs\\', \\'minvals\\', \\'maxvals\\', \\'name\\'], varargs=None, keywords=None, defaults=[\\'0.0\\', \\'1.0\\', \\'-2.0\\', \\'2.0\\', \\'None\\'], \"",
          "98:   }",
          "",
          "---------------"
        ],
        "tensorflow/tools/api/golden/v1/tensorflow.raw_ops.pbtxt||tensorflow/tools/api/golden/v1/tensorflow.raw_ops.pbtxt": [
          "File: tensorflow/tools/api/golden/v1/tensorflow.raw_ops.pbtxt -> tensorflow/tools/api/golden/v1/tensorflow.raw_ops.pbtxt",
          "--- Hunk 1 ---",
          "[Context before]",
          "4492:     name: \"StatelessMultinomial\"",
          "4493:     argspec: \"args=[\\'logits\\', \\'num_samples\\', \\'seed\\', \\'output_dtype\\', \\'name\\'], varargs=None, keywords=None, defaults=[\\\"<dtype: \\'int64\\'>\\\", \\'None\\'], \"",
          "4494:   }",
          "4495:   member_method {",
          "4496:     name: \"StatelessRandomBinomial\"",
          "4497:     argspec: \"args=[\\'shape\\', \\'seed\\', \\'counts\\', \\'probs\\', \\'dtype\\', \\'name\\'], varargs=None, keywords=None, defaults=[\\\"<dtype: \\'int64\\'>\\\", \\'None\\'], \"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4495:   member_method {",
          "4496:     name: \"StatelessParameterizedTruncatedNormal\"",
          "4497:     argspec: \"args=[\\'shape\\', \\'seed\\', \\'means\\', \\'stddevs\\', \\'minvals\\', \\'maxvals\\', \\'name\\'], varargs=None, keywords=None, defaults=[\\'None\\'], \"",
          "4498:   }",
          "",
          "---------------"
        ],
        "tensorflow/tools/api/golden/v2/tensorflow.random.pbtxt||tensorflow/tools/api/golden/v2/tensorflow.random.pbtxt": [
          "File: tensorflow/tools/api/golden/v2/tensorflow.random.pbtxt -> tensorflow/tools/api/golden/v2/tensorflow.random.pbtxt",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:     name: \"stateless_normal\"",
          "81:     argspec: \"args=[\\'shape\\', \\'seed\\', \\'mean\\', \\'stddev\\', \\'dtype\\', \\'name\\'], varargs=None, keywords=None, defaults=[\\'0.0\\', \\'1.0\\', \\\"<dtype: \\'float32\\'>\\\", \\'None\\'], \"",
          "82:   }",
          "83:   member_method {",
          "84:     name: \"stateless_poisson\"",
          "85:     argspec: \"args=[\\'shape\\', \\'seed\\', \\'lam\\', \\'dtype\\', \\'name\\'], varargs=None, keywords=None, defaults=[\\\"<dtype: \\'int32\\'>\\\", \\'None\\'], \"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:   member_method {",
          "84:     name: \"stateless_parameterized_truncated_normal\"",
          "85:     argspec: \"args=[\\'shape\\', \\'seed\\', \\'means\\', \\'stddevs\\', \\'minvals\\', \\'maxvals\\', \\'name\\'], varargs=None, keywords=None, defaults=[\\'0.0\\', \\'1.0\\', \\'-2.0\\', \\'2.0\\', \\'None\\'], \"",
          "86:   }",
          "",
          "---------------"
        ],
        "tensorflow/tools/api/golden/v2/tensorflow.raw_ops.pbtxt||tensorflow/tools/api/golden/v2/tensorflow.raw_ops.pbtxt": [
          "File: tensorflow/tools/api/golden/v2/tensorflow.raw_ops.pbtxt -> tensorflow/tools/api/golden/v2/tensorflow.raw_ops.pbtxt",
          "--- Hunk 1 ---",
          "[Context before]",
          "4492:     name: \"StatelessMultinomial\"",
          "4493:     argspec: \"args=[\\'logits\\', \\'num_samples\\', \\'seed\\', \\'output_dtype\\', \\'name\\'], varargs=None, keywords=None, defaults=[\\\"<dtype: \\'int64\\'>\\\", \\'None\\'], \"",
          "4494:   }",
          "4495:   member_method {",
          "4496:     name: \"StatelessRandomBinomial\"",
          "4497:     argspec: \"args=[\\'shape\\', \\'seed\\', \\'counts\\', \\'probs\\', \\'dtype\\', \\'name\\'], varargs=None, keywords=None, defaults=[\\\"<dtype: \\'int64\\'>\\\", \\'None\\'], \"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4495:   member_method {",
          "4496:     name: \"StatelessParameterizedTruncatedNormal\"",
          "4497:     argspec: \"args=[\\'shape\\', \\'seed\\', \\'means\\', \\'stddevs\\', \\'minvals\\', \\'maxvals\\', \\'name\\'], varargs=None, keywords=None, defaults=[\\'None\\'], \"",
          "4498:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5396e7a3cd91b5f7895fa3dbe9809400e032d68a",
      "candidate_info": {
        "commit_hash": "5396e7a3cd91b5f7895fa3dbe9809400e032d68a",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/5396e7a3cd91b5f7895fa3dbe9809400e032d68a",
        "files": [
          "tensorflow/core/kernels/random_binomial_op.cc",
          "tensorflow/core/ops/stateful_random_ops.cc",
          "tensorflow/core/util/bcast.cc",
          "tensorflow/core/util/bcast.h",
          "tensorflow/core/util/bcast_test.cc",
          "tensorflow/core/util/matmul_bcast.cc",
          "tensorflow/python/kernel_tests/random/BUILD",
          "tensorflow/python/kernel_tests/random/random_binomial_test.py",
          "tensorflow/python/kernel_tests/random/util.py",
          "tensorflow/python/ops/stateful_random_ops.py"
        ],
        "message": "Allow RandomBinomial op to broadcast parameters.\n\n- Add multiple parameter broadcasting support for BCast. This will allow it to be used in multiparameter broadcasting contexts. This is specifically for ternary ops, but will be used to make other samplers like ParameterizedTruncatedNormal broadcast.\n\n- Add batch index methods for generating a list of batch indices when the input vectors are flattened. This is used to get broadcasting on flattened inputs (which is used in the RandomBinomial sampler).\n\n- Shard on the number of outputs. This allows us to scale better to Tensor inputs.\n\nPiperOrigin-RevId: 281202841\nChange-Id: I0b276e983bf31056677a67b4d5ce8ebc98d77930",
        "before_after_code_files": [
          "tensorflow/core/kernels/random_binomial_op.cc||tensorflow/core/kernels/random_binomial_op.cc",
          "tensorflow/core/ops/stateful_random_ops.cc||tensorflow/core/ops/stateful_random_ops.cc",
          "tensorflow/core/util/bcast.cc||tensorflow/core/util/bcast.cc",
          "tensorflow/core/util/bcast.h||tensorflow/core/util/bcast.h",
          "tensorflow/core/util/bcast_test.cc||tensorflow/core/util/bcast_test.cc",
          "tensorflow/core/util/matmul_bcast.cc||tensorflow/core/util/matmul_bcast.cc",
          "tensorflow/python/kernel_tests/random/random_binomial_test.py||tensorflow/python/kernel_tests/random/random_binomial_test.py",
          "tensorflow/python/kernel_tests/random/util.py||tensorflow/python/kernel_tests/random/util.py",
          "tensorflow/python/ops/stateful_random_ops.py||tensorflow/python/ops/stateful_random_ops.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/random_binomial_op.cc||tensorflow/core/kernels/random_binomial_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/random_binomial_op.cc||tensorflow/core/kernels/random_binomial_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/random_binomial_op.cc||tensorflow/core/kernels/random_binomial_op.cc": [
          "File: tensorflow/core/kernels/random_binomial_op.cc -> tensorflow/core/kernels/random_binomial_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: #include \"tensorflow/core/lib/core/refcount.h\"",
          "38: #include \"tensorflow/core/lib/random/random_distributions.h\"",
          "39: #include \"tensorflow/core/platform/logging.h\"",
          "40: #include \"tensorflow/core/util/guarded_philox_random.h\"",
          "41: #include \"tensorflow/core/util/work_sharder.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: #include \"tensorflow/core/util/bcast.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:   return num_geom;",
          "87: }",
          "90:   static double kTailValues[] = {0.0810614667953272,  0.0413406959554092,",
          "91:                                  0.0276779256849983,  0.02079067210376509,",
          "92:                                  0.0166446911898211,  0.0138761288230707,",
          "",
          "[Removed Lines]",
          "89: double stirling_approx_tail(double k) {",
          "",
          "[Added Lines]",
          "90: inline double stirling_approx_tail(double k) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "106:   using Eigen::numext::abs;",
          "107:   using Eigen::numext::floor;",
          "108:   using Eigen::numext::log;",
          "",
          "[Removed Lines]",
          "105: double btrs(double count, double prob, random::PhiloxRandom* gen) {",
          "",
          "[Added Lines]",
          "106: inline double btrs(double count, double prob, random::PhiloxRandom* gen) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "119:   const double v_r = 0.92 - 4.2 / b;",
          "120:   const double r = prob / (1 - prob);",
          "122:   Uniform uniform;",
          "123:   typename Uniform::ResultType uniform_result;",
          "124:   int16 uniform_remaining = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "123:   const double alpha = (2.83 + 5.1 / b) * stddev;",
          "124:   const double m = floor((count + 1) * prob);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "143:       continue;",
          "144:     }",
          "",
          "[Removed Lines]",
          "146:     double alpha = (2.83 + 5.1 / b) * stddev;",
          "147:     double m = floor((count + 1) * prob);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "169: struct RandomBinomialFunctor<CPUDevice, T, U> {",
          "170:   void operator()(OpKernelContext* ctx, const CPUDevice& d, int64 num_batches,",
          "171:                   int64 samples_per_batch, int64 num_elements,",
          "173:                   typename TTypes<T>::ConstFlat probs,",
          "174:                   const random::PhiloxRandom& gen,",
          "175:                   typename TTypes<U>::Flat output) {",
          "176:     auto worker_threads = *(ctx->device()->tensorflow_cpu_worker_threads());",
          "191:       Eigen::array<T, 4> z;",
          "192:       Eigen::array<T, 4> g;",
          "209:         double dcount = static_cast<double>(count);",
          "210:         if (dcount <= 0.0 || prob <= T(0.0)) {",
          "214:           }",
          "215:         } else if (prob >= T(1.0)) {",
          "219:           }",
          "220:         } else if (prob <= T(0.5)) {",
          "221:           double dp = static_cast<double>(prob);",
          "222:           if (count * prob >= T(10)) {",
          "226:             }",
          "227:           } else {",
          "230:                   static_cast<U>(binomial_inversion(dcount, dp, &gen_copy));",
          "232:             }",
          "233:           }",
          "234:         } else if (prob > T(0.5)) {",
          "",
          "[Removed Lines]",
          "172:                   typename TTypes<T>::ConstFlat counts,",
          "178:     auto DoWork = [samples_per_batch, num_elements, &counts, &probs, &gen,",
          "179:                    &output](int start_batch, int limit_batch) {",
          "183:       random::PhiloxRandom gen_copy = gen;",
          "187:       gen_copy.Skip(start_batch * 2 * 3 * (samples_per_batch + 3) / 4);",
          "194:       for (int64 b = start_batch; b < limit_batch; ++b) {",
          "198:         T count = counts((counts.dimension(0) == 1) ? 0 : b);",
          "199:         T prob = probs((probs.dimension(0) == 1) ? 0 : b);",
          "203:         const int64 limit_sample =",
          "204:             std::min((b + 1) * samples_per_batch, num_elements);",
          "205:         int64 sample = b * samples_per_batch;",
          "211:           while (sample < limit_sample) {",
          "212:             output(sample) = static_cast<U>(0.0);",
          "213:             sample++;",
          "216:           while (sample < limit_sample) {",
          "217:             output(sample) = static_cast<U>(dcount);",
          "218:             sample++;",
          "223:             while (sample < limit_sample) {",
          "224:               output(sample) = static_cast<U>(btrs(dcount, dp, &gen_copy));",
          "225:               sample++;",
          "228:             while (sample < limit_sample) {",
          "229:               output(sample) =",
          "231:               sample++;",
          "",
          "[Added Lines]",
          "174:                   const BCast& bcast, typename TTypes<T>::ConstFlat counts,",
          "183:     auto DoWork = [num_batches, samples_per_batch, &bcast, &counts, &probs,",
          "184:                    &gen, &output](int start_output, int limit_output) {",
          "189:       const bool should_bcast = bcast.IsBroadcastingRequired();",
          "190:       const auto& counts_batch_indices = bcast.x_batch_indices();",
          "191:       const auto& probs_batch_indices = bcast.y_batch_indices();",
          "192:       auto output_flat = output.data();",
          "196:       for (int64 output_idx = start_output; output_idx < limit_output;",
          "198:       ) {",
          "199:         int64 batch_idx = output_idx / samples_per_batch;",
          "200:         U* const output_batch_offset = output_flat + batch_idx;",
          "203:         T count, prob;",
          "204:         if (should_bcast) {",
          "205:           count = counts(counts_batch_indices[batch_idx]);",
          "206:           prob = probs(probs_batch_indices[batch_idx]);",
          "207:         } else {",
          "208:           count = counts(batch_idx);",
          "209:           prob = probs(batch_idx);",
          "210:         }",
          "216:           for (int64 sample_idx = output_idx % samples_per_batch;",
          "217:                sample_idx < samples_per_batch && output_idx < limit_output;",
          "218:                ++sample_idx, ++output_idx) {",
          "219:             output_batch_offset[sample_idx * num_batches] = static_cast<U>(0.0);",
          "222:           for (int64 sample_idx = output_idx % samples_per_batch;",
          "223:                sample_idx < samples_per_batch && output_idx < limit_output;",
          "224:                ++sample_idx, ++output_idx) {",
          "225:             output_batch_offset[sample_idx * num_batches] =",
          "226:                 static_cast<U>(dcount);",
          "231:             for (int64 sample_idx = output_idx % samples_per_batch;",
          "232:                  sample_idx < samples_per_batch && output_idx < limit_output;",
          "233:                  ++sample_idx, ++output_idx) {",
          "234:               random::PhiloxRandom gen_copy = gen;",
          "235:               gen_copy.Skip(256 * output_idx);",
          "236:               output_batch_offset[sample_idx * num_batches] =",
          "237:                   static_cast<U>(btrs(dcount, dp, &gen_copy));",
          "240:             for (int64 sample_idx = output_idx % samples_per_batch;",
          "241:                  sample_idx < samples_per_batch && output_idx < limit_output;",
          "242:                  ++sample_idx, ++output_idx) {",
          "243:               random::PhiloxRandom gen_copy = gen;",
          "248:               gen_copy.Skip(42 * output_idx);",
          "249:               output_batch_offset[sample_idx * num_batches] =",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "236:           double dcount = static_cast<double>(count);",
          "237:           double dq = static_cast<double>(q);",
          "238:           if (count * q >= T(10)) {",
          "241:                   static_cast<U>(dcount - btrs(dcount, dq, &gen_copy));",
          "243:             }",
          "244:           } else {",
          "247:                   dcount - binomial_inversion(dcount, dq, &gen_copy));",
          "249:             }",
          "250:           }",
          "251:         } else {  // prob is NaN",
          "258:           }",
          "259:         }",
          "260:       }",
          "261:     };",
          "",
          "[Removed Lines]",
          "239:             while (sample < limit_sample) {",
          "240:               output(sample) =",
          "242:               sample++;",
          "245:             while (sample < limit_sample) {",
          "246:               output(sample) = static_cast<U>(",
          "248:               sample++;",
          "255:           while (sample < limit_sample) {",
          "256:             output(sample) = static_cast<U>(NAN);",
          "257:             sample++;",
          "263:     const int64 batch_init_cost =",
          "265:         (Eigen::TensorOpCost::AddCost<T>() +",
          "266:          Eigen::TensorOpCost::MulCost<T>()) *",
          "267:             2",
          "269:         + Eigen::TensorOpCost::AddCost<T>() +",
          "270:         Eigen::TensorOpCost::MulCost<T>() +",
          "271:         Eigen::internal::functor_traits<",
          "272:             Eigen::internal::scalar_sqrt_op<T>>::Cost",
          "274:         + Eigen::TensorOpCost::MulCost<T>() * 4 +",
          "275:         Eigen::internal::functor_traits<Eigen::internal::scalar_exp_op<T>>::Cost",
          "277:         + Eigen::TensorOpCost::AddCost<T>();",
          "",
          "[Added Lines]",
          "258:             for (int64 sample_idx = output_idx % samples_per_batch;",
          "259:                  sample_idx < samples_per_batch && output_idx < limit_output;",
          "260:                  ++sample_idx, ++output_idx) {",
          "261:               random::PhiloxRandom gen_copy = gen;",
          "262:               gen_copy.Skip(256 * output_idx);",
          "263:               output_batch_offset[sample_idx * num_batches] =",
          "267:             for (int64 sample_idx = output_idx % samples_per_batch;",
          "268:                  sample_idx < samples_per_batch && output_idx < limit_output;",
          "269:                  ++sample_idx, ++output_idx) {",
          "270:               random::PhiloxRandom gen_copy = gen;",
          "275:               gen_copy.Skip(42 * output_idx);",
          "276:               output_batch_offset[sample_idx * num_batches] = static_cast<U>(",
          "284:           for (int64 sample_idx = output_idx % samples_per_batch;",
          "285:                sample_idx < samples_per_batch && output_idx < limit_output;",
          "286:                ++sample_idx, ++output_idx) {",
          "287:             output_batch_offset[sample_idx * num_batches] = static_cast<U>(NAN);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "299:                                     6 * random::PhiloxRandom::kElementCost;",
          "304:   }",
          "305: };",
          "",
          "[Removed Lines]",
          "298:     static const int kElementCost = 529 + 6 * Uniform::kElementCost +",
          "301:     const int64 batch_cost = batch_init_cost + kElementCost * samples_per_batch;",
          "302:     Shard(worker_threads.num_threads, worker_threads.workers, num_batches,",
          "303:           batch_cost, DoWork);",
          "",
          "[Added Lines]",
          "313:     static const int kElementCost = 329 + 6 * Uniform::kElementCost +",
          "315:     Shard(worker_threads.num_threads, worker_threads.workers, num_elements,",
          "316:           kElementCost, DoWork);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "324:     const Tensor& counts_tensor = ctx->input(3);",
          "325:     const Tensor& probs_tensor = ctx->input(4);",
          "332:     OP_REQUIRES(",
          "333:         ctx, TensorShapeUtils::IsVector(shape_tensor.shape()),",
          "334:         errors::InvalidArgument(\"Input shape should be a vector, got shape: \",",
          "335:                                 shape_tensor.shape().DebugString()));",
          "341:       samples_per_batch *= shape_tensor.flat<int32>()(i);",
          "342:     }",
          "350:     Tensor* samples_tensor;",
          "393:     core::RefCountPtr<Var> var;",
          "394:     OP_REQUIRES_OK(ctx, LookupResource(ctx, HandleFromInput(ctx, 0), &var));",
          "",
          "[Removed Lines]",
          "327:     OP_REQUIRES(ctx, alg_tensor.dims() == 0,",
          "328:                 errors::InvalidArgument(\"algorithm must be of shape [], not \",",
          "329:                                         alg_tensor.shape().DebugString()));",
          "330:     Algorithm alg = alg_tensor.flat<Algorithm>()(0);",
          "336:     int32 num_batches = shape_tensor.flat<int32>()(0);",
          "338:     int32 samples_per_batch = 1;",
          "339:     const int32 num_dims = shape_tensor.dim_size(0);",
          "340:     for (int32 i = 1; i < num_dims; i++) {",
          "343:     const int32 num_elements = num_batches * samples_per_batch;",
          "346:     auto shape_vec = shape_tensor.flat<int32>();",
          "347:     TensorShape tensor_shape;",
          "348:     OP_REQUIRES_OK(ctx, TensorShapeUtils::MakeShape(",
          "349:                             shape_vec.data(), shape_vec.size(), &tensor_shape));",
          "351:     OP_REQUIRES_OK(ctx, ctx->allocate_output(0, tensor_shape, &samples_tensor));",
          "354:     OP_REQUIRES(ctx, counts_tensor.dims() <= 1,",
          "355:                 errors::InvalidArgument(",
          "356:                     \"Input counts should be a scalar or vector, got shape: \",",
          "357:                     counts_tensor.shape().DebugString()));",
          "358:     OP_REQUIRES(ctx, probs_tensor.dims() <= 1,",
          "359:                 errors::InvalidArgument(",
          "360:                     \"Input probs should be a scalar or vector, got shape: \",",
          "361:                     probs_tensor.shape().DebugString()));",
          "363:     if ((counts_tensor.dims() == 0 || counts_tensor.dim_size(0) == 1) &&",
          "364:         (probs_tensor.dims() == 0 || probs_tensor.dim_size(0) == 1)) {",
          "368:       int32 size = num_batches * samples_per_batch;",
          "369:       int32 adjusted_samples = kDesiredBatchSize;",
          "371:       int32 adjusted_batches = Eigen::divup(size, adjusted_samples);",
          "372:       num_batches = adjusted_batches;",
          "373:       samples_per_batch = adjusted_samples;",
          "374:     } else {",
          "376:       OP_REQUIRES(",
          "377:           ctx,",
          "378:           TensorShapeUtils::IsScalar(counts_tensor.shape()) ||",
          "379:               counts_tensor.dim_size(0) == 1 ||",
          "380:               counts_tensor.dim_size(0) == num_batches,",
          "381:           errors::InvalidArgument(",
          "382:               \"Input counts should have length 1 or shape[0], got shape: \",",
          "383:               counts_tensor.shape().DebugString()));",
          "384:       OP_REQUIRES(",
          "385:           ctx,",
          "386:           TensorShapeUtils::IsScalar(probs_tensor.shape()) ||",
          "387:               probs_tensor.dim_size(0) == 1 ||",
          "388:               probs_tensor.dim_size(0) == num_batches,",
          "389:           errors::InvalidArgument(",
          "390:               \"Input probs should have length 1 or shape[0], got shape: \",",
          "391:               probs_tensor.shape().DebugString()));",
          "392:     }",
          "",
          "[Added Lines]",
          "340:     tensorflow::BCast bcast(counts_tensor.shape().dim_sizes(),",
          "341:                             probs_tensor.shape().dim_sizes(),",
          "344:     OP_REQUIRES(ctx, bcast.IsValid(),",
          "345:                 errors::InvalidArgument(",
          "346:                     \"counts and probs must have compatible batch dimensions: \",",
          "347:                     counts_tensor.shape().DebugString(), \" vs. \",",
          "348:                     probs_tensor.shape().DebugString()));",
          "353:     OP_REQUIRES(ctx,",
          "354:                 (shape_tensor.dtype() == DataType::DT_INT32 ||",
          "355:                  shape_tensor.dtype() == DataType::DT_INT64),",
          "356:                 errors::InvalidArgument(",
          "357:                     \"Input shape should have dtype {int32, int64}.\"));",
          "360:     TensorShape bcast_shape = BCast::ToShape(bcast.output_shape());",
          "361:     TensorShape output_shape;",
          "362:     if (shape_tensor.dtype() == DataType::DT_INT32) {",
          "363:       OP_REQUIRES_OK(ctx, TensorShapeUtils::MakeShape(shape_tensor.vec<int32>(),",
          "364:                                                       &output_shape));",
          "365:     } else {",
          "366:       OP_REQUIRES_OK(ctx, TensorShapeUtils::MakeShape(shape_tensor.vec<int64>(),",
          "367:                                                       &output_shape));",
          "368:     }",
          "369:     OP_REQUIRES(ctx, TensorShapeUtils::EndsWith(output_shape, bcast_shape),",
          "370:                 errors::InvalidArgument(",
          "371:                     \"Shape passed in must end with broadcasted shape.\"));",
          "374:     OP_REQUIRES(ctx, alg_tensor.dims() == 0,",
          "375:                 errors::InvalidArgument(\"algorithm must be of shape [], not \",",
          "376:                                         alg_tensor.shape().DebugString()));",
          "377:     Algorithm alg = alg_tensor.flat<Algorithm>()(0);",
          "379:     int64 samples_per_batch = 1;",
          "380:     const int64 num_sample_dims =",
          "381:         (shape_tensor.dim_size(0) - bcast.output_shape().size());",
          "382:     for (int64 i = 0; i < num_sample_dims; ++i) {",
          "385:     int64 num_batches = 1;",
          "386:     for (int64 i = num_sample_dims; i < shape_tensor.dim_size(0); ++i) {",
          "387:       num_batches *= shape_tensor.flat<int32>()(i);",
          "388:     }",
          "389:     const int64 num_elements = num_batches * samples_per_batch;",
          "392:     OP_REQUIRES_OK(ctx, ctx->allocate_output(0, output_shape, &samples_tensor));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "426:     auto binomial_functor = functor::RandomBinomialFunctor<Device, T, U>();",
          "427:     binomial_functor(ctx, ctx->eigen_device<Device>(), num_batches,",
          "430:   }",
          "432:  private:",
          "",
          "[Removed Lines]",
          "428:                      samples_per_batch, num_elements, counts_tensor.flat<T>(),",
          "429:                      probs_tensor.flat<T>(), philox, samples_tensor->flat<U>());",
          "",
          "[Added Lines]",
          "428:                      samples_per_batch, num_elements, bcast,",
          "429:                      counts_tensor.flat<T>(), probs_tensor.flat<T>(), philox,",
          "430:                      samples_tensor->flat<U>());",
          "",
          "---------------"
        ],
        "tensorflow/core/ops/stateful_random_ops.cc||tensorflow/core/ops/stateful_random_ops.cc": [
          "File: tensorflow/core/ops/stateful_random_ops.cc -> tensorflow/core/ops/stateful_random_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:     .SetShapeFn([](shape_inference::InferenceContext* c) {",
          "108:       using shape_inference::ShapeHandle;",
          "114:       ShapeHandle out;",
          "115:       TF_RETURN_IF_ERROR(c->MakeShapeFromShapeTensor(2, &out));",
          "116:       c->set_output(0, out);",
          "",
          "[Removed Lines]",
          "110:       ShapeHandle unused;",
          "111:       TF_RETURN_IF_ERROR(c->WithRankAtMost(c->input(3), 1, &unused));",
          "112:       TF_RETURN_IF_ERROR(c->WithRankAtMost(c->input(4), 1, &unused));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tensorflow/core/util/bcast.cc||tensorflow/core/util/bcast.cc": [
          "File: tensorflow/core/util/bcast.cc -> tensorflow/core/util/bcast.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include \"tensorflow/core/platform/logging.h\"",
          "19: namespace tensorflow {",
          "158: BCast::Vec BCast::FromShape(const TensorShape& shape) {",
          "159:   const int N = shape.dims();",
          "161:   for (int i = 0; i < N; ++i) {",
          "162:     ret[i] = shape.dim_size(i);",
          "163:   }",
          "164:   return ret;",
          "165: }",
          "168:   TensorShape shape(vec);",
          "169:   return shape;",
          "170: }",
          "",
          "[Removed Lines]",
          "22: void BCast::Reverse(Vec* shape) { std::reverse(shape->begin(), shape->end()); }",
          "24: BCast::BCast(const Vec& sx, const Vec& sy, const bool fewer_dims_optimization) {",
          "25:   if (sx == sy && TF_PREDICT_TRUE(fewer_dims_optimization)) {",
          "27:     int64 elements = 1;",
          "28:     const int n = sx.size();",
          "29:     output_.resize(n);",
          "30:     for (int i = 0; i < n; i++) {",
          "31:       const int64 dim = sx[i];",
          "32:       elements *= dim;",
          "33:       output_[i] = dim;",
          "34:     }",
          "35:     result_.push_back(elements);",
          "36:     x_reshape_.push_back(elements);",
          "37:     y_reshape_.push_back(elements);",
          "38:     x_bcast_.push_back(1);",
          "39:     y_bcast_.push_back(1);",
          "41:   } else {",
          "44:     Vec x = sx;",
          "45:     Vec y = sy;",
          "46:     Reverse(&x);",
          "47:     Reverse(&y);",
          "50:     if (x.size() > y.size()) {",
          "51:       y.resize(x.size(), 1);",
          "52:     } else {",
          "53:       x.resize(y.size(), 1);",
          "54:     }",
          "59:     enum State {",
          "60:       UNKNOWN,",
          "61:       SAME,",
          "62:       X_ONE,",
          "63:       Y_ONE,",
          "64:     };",
          "65:     State prev = UNKNOWN;",
          "66:     const int64 n = x.size();",
          "67:     for (int i = 0; i < n; ++i) {",
          "69:       State curr = UNKNOWN;",
          "70:       const int64 x_i = x[i];  // i-th dimension of x.",
          "71:       const int64 y_i = y[i];  // i-th dimension of y.",
          "72:       int64 o_i;               // i-th dimension of the output.",
          "73:       int64 bx_i;              // i-th broadcast for x.",
          "74:       int64 by_i;              // i-th broadcast for y.",
          "77:       if (x_i == y_i) {",
          "79:         o_i = x_i;",
          "80:         bx_i = 1;",
          "81:         by_i = 1;",
          "82:         curr = SAME;",
          "83:       } else if (x_i == 1) {",
          "85:         o_i = y_i;",
          "86:         bx_i = y_i;",
          "87:         by_i = 1;",
          "88:         grad_x_reduce_idx_.push_back(n - 1 - i);",
          "89:         curr = X_ONE;",
          "90:       } else if (y_i == 1) {",
          "92:         o_i = x_i;",
          "93:         bx_i = 1;",
          "94:         by_i = x_i;",
          "95:         grad_y_reduce_idx_.push_back(n - 1 - i);",
          "96:         curr = Y_ONE;",
          "97:       } else {",
          "98:         valid_ = false;",
          "99:         return;",
          "100:       }",
          "101:       output_.push_back(o_i);",
          "105:       if (curr == SAME && x_i == 1) {",
          "107:         grad_x_reduce_idx_.push_back(n - 1 - i);",
          "108:         grad_y_reduce_idx_.push_back(n - 1 - i);",
          "109:         if (!TF_PREDICT_TRUE(fewer_dims_optimization)) {",
          "110:           result_.push_back(o_i);",
          "111:           x_reshape_.push_back(x_i);",
          "112:           x_bcast_.push_back(bx_i);",
          "113:           y_reshape_.push_back(y_i);",
          "114:           y_bcast_.push_back(by_i);",
          "115:         }",
          "116:         continue;",
          "117:       } else if (TF_PREDICT_TRUE(fewer_dims_optimization) && prev == curr) {",
          "121:         result_.back() *= o_i;",
          "122:         x_reshape_.back() *= x_i;",
          "123:         x_bcast_.back() *= bx_i;",
          "124:         y_reshape_.back() *= y_i;",
          "125:         y_bcast_.back() *= by_i;",
          "126:       } else {",
          "127:         result_.push_back(o_i);",
          "128:         x_reshape_.push_back(x_i);",
          "129:         x_bcast_.push_back(bx_i);",
          "130:         y_reshape_.push_back(y_i);",
          "131:         y_bcast_.push_back(by_i);",
          "132:       }",
          "133:       prev = curr;",
          "134:     }",
          "136:     if (result_.empty()) {",
          "138:       result_.push_back(1);",
          "139:       x_reshape_.push_back(1);",
          "140:       x_bcast_.push_back(1);",
          "141:       y_reshape_.push_back(1);",
          "142:       y_bcast_.push_back(1);",
          "143:     }",
          "147:     Reverse(&x_reshape_);",
          "148:     Reverse(&x_bcast_);",
          "149:     Reverse(&y_reshape_);",
          "150:     Reverse(&y_bcast_);",
          "151:     Reverse(&result_);",
          "152:     Reverse(&output_);",
          "153:     Reverse(&grad_x_reduce_idx_);",
          "154:     Reverse(&grad_y_reduce_idx_);",
          "155:   }",
          "156: }",
          "160:   BCast::Vec ret(N);",
          "167: TensorShape BCast::ToShape(const BCast::Vec& vec) {",
          "",
          "[Added Lines]",
          "23:   BCastList::Vec ret(N);",
          "30: TensorShape BCast::ToShape(const BCastList::Vec& vec) {",
          "",
          "---------------"
        ],
        "tensorflow/core/util/bcast.h||tensorflow/core/util/bcast.h": [
          "File: tensorflow/core/util/bcast.h -> tensorflow/core/util/bcast.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: inline void ComputeBatchIndices(const int64 output_batch_size,",
          "35:                                 const gtl::InlinedVector<int64, 4>& reshape,",
          "36:                                 const gtl::InlinedVector<int64, 4>& bcast,",
          "37:                                 std::vector<int64>* out_indices) {",
          "43:   out_indices->resize(output_batch_size);",
          "44:   int64 num_output_elements = 1;",
          "45:   int64 num_input_elements = 1;",
          "46:   for (int64 i = reshape.size() - 1; i >= 0; --i) {",
          "50:     const int64 dim = std::max(reshape[i], bcast[i]);",
          "51:     const int64 incr = bcast[i] > 1 ? 0 : num_input_elements;",
          "52:     for (int64 k = 0; k < (dim - 1) * num_output_elements; ++k) {",
          "53:       (*out_indices)[num_output_elements + k] = (*out_indices)[k] + incr;",
          "54:     }",
          "55:     num_output_elements *= dim;",
          "56:     num_input_elements *= reshape[i];",
          "57:   }",
          "58: }",
          "60: template <int N>",
          "61: class BCastList {",
          "62:  public:",
          "67:   typedef gtl::InlinedVector<int64, 4> Vec;",
          "81:   explicit BCastList(const Vec (&x)[N],",
          "82:                      const bool fewer_dims_optimization = true,",
          "83:                      const bool return_flattened_batch_indices = false);",
          "84:   ~BCastList() {}",
          "88:   bool IsValid() const { return valid_; }",
          "89:   bool IsBroadcastingRequired() const { return broadcasting_required_; }",
          "94:   const Vec& reshape(int i) const { return reshape_[i]; }",
          "95:   const Vec& bcast(int i) const { return bcast_[i]; }",
          "96:   const Vec& result_shape() const { return result_; }",
          "97:   const Vec& output_shape() const { return output_; }",
          "98:   const Vec& grad_reduce_idx(int i) const { return grad_reduce_idx_[i]; }",
          "99:   const int64 output_batch_size() const { return output_batch_size_; }",
          "107:   const std::vector<int64>& batch_indices(int i) const {",
          "108:     return batch_indices_[i];",
          "109:   }",
          "111:  protected:",
          "112:   bool valid_ = true;",
          "113:   bool broadcasting_required_ = true;",
          "114:   Vec reshape_[N];",
          "115:   Vec bcast_[N];",
          "116:   Vec result_;",
          "117:   Vec output_;",
          "118:   Vec grad_reduce_idx_[N];",
          "120:   int64 output_batch_size_;",
          "121:   std::vector<int64> batch_indices_[N];",
          "123:   static void Reverse(Vec* shape) {",
          "124:     std::reverse(shape->begin(), shape->end());",
          "125:   }",
          "127:   TF_DISALLOW_COPY_AND_ASSIGN(BCastList);",
          "128: };",
          "130: template <int N>",
          "131: BCastList<N>::BCastList(const BCastList::Vec (&x)[N],",
          "132:                         const bool fewer_dims_optimization,",
          "133:                         const bool return_flattened_batch_indices) {",
          "134:   typedef BCastList::Vec Vec;",
          "135:   bool all_equal = true;",
          "136:   int largest_rank = 0;",
          "137:   output_batch_size_ = 1;",
          "138:   for (int i = 0; i < N; ++i) {",
          "139:     if (x[i] != x[0]) {",
          "140:       all_equal = false;",
          "141:     }",
          "142:     if (x[i].size() > largest_rank) {",
          "143:       largest_rank = x[i].size();",
          "144:     }",
          "145:   }",
          "146:   if (all_equal) {",
          "147:     broadcasting_required_ = false;",
          "148:   }",
          "149:   if (all_equal && TF_PREDICT_TRUE(fewer_dims_optimization)) {",
          "151:     int64 elements = 1;",
          "152:     const int rank = x[0].size();",
          "153:     output_.resize(rank);",
          "154:     for (int i = 0; i < rank; i++) {",
          "155:       const int64 dim = x[0][i];",
          "156:       elements *= dim;",
          "157:       output_[i] = dim;",
          "158:     }",
          "159:     result_.push_back(elements);",
          "160:     output_batch_size_ = elements;",
          "161:     for (int i = 0; i < N; ++i) {",
          "162:       reshape_[i].push_back(elements);",
          "163:       bcast_[i].push_back(1);",
          "164:     }",
          "166:     return;",
          "167:   }",
          "171:   Vec copy[N];",
          "172:   for (int i = 0; i < N; ++i) {",
          "173:     copy[i] = x[i];",
          "174:     Reverse(&copy[i]);",
          "175:   }",
          "178:   for (int i = 0; i < N; ++i) {",
          "179:     if (copy[i].size() < largest_rank) {",
          "180:       copy[i].resize(largest_rank, 1);",
          "181:     }",
          "182:   }",
          "188:   bool prev_is_one[N];",
          "189:   bool current_is_one[N];",
          "190:   for (int i = 0; i < N; ++i) {",
          "191:     prev_is_one[i] = false;",
          "192:     current_is_one[i] = false;",
          "193:   }",
          "194:   Vec output;",
          "195:   bool output_dim_set = false;",
          "196:   int output_dim = -1;",
          "197:   bool none_is_one = true;",
          "198:   bool set_one = false;",
          "199:   for (int j = 0; j < largest_rank; ++j) {",
          "200:     output_dim = -1;",
          "201:     output_dim_set = false;",
          "202:     none_is_one = true;",
          "204:     for (int i = 0; i < N; ++i) {",
          "206:       if (copy[i][j] == 1) {",
          "207:         current_is_one[i] = true;",
          "208:         none_is_one = false;",
          "209:       } else {",
          "210:         current_is_one[i] = false;",
          "211:         if (!output_dim_set || copy[i][j] == output_dim) {",
          "212:           output_dim = copy[i][j];",
          "213:           output_dim_set = true;",
          "214:         } else {",
          "215:           valid_ = false;",
          "216:           return;",
          "217:         }",
          "218:       }",
          "219:     }",
          "220:     output_.push_back(output_dim_set ? output_dim : 1);",
          "221:     output_batch_size_ *= output_.back();",
          "223:     if (!output_dim_set) {",
          "224:       if (!TF_PREDICT_TRUE(fewer_dims_optimization)) {",
          "225:         for (int i = 0; i < N; ++i) {",
          "226:           bcast_[i].push_back(1);",
          "227:           reshape_[i].push_back(1);",
          "228:         }",
          "229:         result_.push_back(1);",
          "230:       }",
          "231:       for (int i = 0; i < N; ++i) {",
          "232:         grad_reduce_idx_[i].push_back(largest_rank - 1 - j);",
          "233:       }",
          "249:       continue;",
          "250:     } else if (TF_PREDICT_TRUE(fewer_dims_optimization) &&",
          "251:                std::equal(current_is_one, current_is_one + N, prev_is_one) &&",
          "252:                set_one) {",
          "256:       result_.back() *= output_dim;",
          "257:       for (int i = 0; i < N; ++i) {",
          "258:         reshape_[i].back() *= copy[i][j];",
          "259:         bcast_[i].back() *= current_is_one[i] ? output_dim : 1;",
          "260:         if (current_is_one[i] && !none_is_one) {",
          "261:           grad_reduce_idx_[i].push_back(largest_rank - 1 - j);",
          "262:         }",
          "263:       }",
          "264:     } else {",
          "265:       result_.push_back(output_dim);",
          "266:       for (int i = 0; i < N; ++i) {",
          "267:         reshape_[i].push_back(copy[i][j]);",
          "268:         bcast_[i].push_back(current_is_one[i] ? output_dim : 1);",
          "269:         if (current_is_one[i] && !none_is_one) {",
          "270:           grad_reduce_idx_[i].push_back(largest_rank - 1 - j);",
          "271:         }",
          "272:       }",
          "273:     }",
          "274:     set_one = true;",
          "275:     for (int i = 0; i < N; ++i) {",
          "276:       prev_is_one[i] = current_is_one[i];",
          "277:     }",
          "278:   }",
          "279:   if (result_.empty()) {",
          "280:     result_.push_back(1);",
          "281:     for (int i = 0; i < N; ++i) {",
          "282:       reshape_[i].push_back(1);",
          "283:       bcast_[i].push_back(1);",
          "284:     }",
          "285:   }",
          "287:   for (int i = 0; i < N; ++i) {",
          "288:     Reverse(&reshape_[i]);",
          "289:     Reverse(&bcast_[i]);",
          "290:     Reverse(&grad_reduce_idx_[i]);",
          "291:   }",
          "292:   Reverse(&result_);",
          "293:   Reverse(&output_);",
          "297:   if (return_flattened_batch_indices && broadcasting_required_ &&",
          "298:       output_batch_size_ > 0) {",
          "299:     for (int i = 0; i < N; ++i) {",
          "300:       ComputeBatchIndices(output_batch_size_, reshape_[i], bcast_[i],",
          "301:                           &batch_indices_[i]);",
          "302:     }",
          "303:   }",
          "304: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:  public:",
          "",
          "[Removed Lines]",
          "69: class BCast {",
          "75:   typedef gtl::InlinedVector<int64, 4> Vec;",
          "",
          "[Added Lines]",
          "345: class BCast : public BCastList<2> {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "99:   const Vec& result_shape() const { return result_; }",
          "100:   const Vec& output_shape() const { return output_; }",
          "108:   template <typename IndexType, int NDIMS>",
          "109:   static Eigen::array<IndexType, NDIMS> ToIndexArrayType(",
          "",
          "[Removed Lines]",
          "85:   BCast(const Vec& x, const Vec& y, const bool fewer_dims_optimization = true);",
          "86:   ~BCast() {}",
          "90:   bool IsValid() const { return valid_; }",
          "95:   const Vec& x_reshape() const { return x_reshape_; }",
          "96:   const Vec& x_bcast() const { return x_bcast_; }",
          "97:   const Vec& y_reshape() const { return y_reshape_; }",
          "98:   const Vec& y_bcast() const { return y_bcast_; }",
          "101:   const Vec& grad_x_reduce_idx() const { return grad_x_reduce_idx_; }",
          "102:   const Vec& grad_y_reduce_idx() const { return grad_y_reduce_idx_; }",
          "105:   static Vec FromShape(const TensorShape& shape);",
          "106:   static TensorShape ToShape(const BCast::Vec& vec);",
          "",
          "[Added Lines]",
          "355:   typedef gtl::InlinedVector<int64, 4> Vec;",
          "357:   BCast(const Vec& x, const Vec& y, const bool fewer_dims_optimization = true,",
          "358:         const bool return_flattened_batch_indices = false)",
          "359:       : BCastList<2>({x, y}, fewer_dims_optimization,",
          "360:                      return_flattened_batch_indices) {}",
          "362:   ~BCast() {}",
          "367:   const Vec& x_reshape() const { return reshape_[0]; }",
          "368:   const Vec& x_bcast() const { return bcast_[0]; }",
          "369:   const Vec& y_reshape() const { return reshape_[1]; }",
          "370:   const Vec& y_bcast() const { return bcast_[1]; }",
          "373:   const Vec& grad_x_reduce_idx() const { return grad_reduce_idx_[0]; }",
          "374:   const Vec& grad_y_reduce_idx() const { return grad_reduce_idx_[1]; }",
          "382:   const std::vector<int64>& x_batch_indices() const {",
          "383:     return batch_indices_[0];",
          "384:   }",
          "389:   const std::vector<int64>& y_batch_indices() const {",
          "390:     return batch_indices_[1];",
          "391:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "120:     return ToIndexArrayType<Eigen::DenseIndex, NDIMS>(vec);",
          "121:   }",
          "136:   TF_DISALLOW_COPY_AND_ASSIGN(BCast);",
          "137: };",
          "",
          "[Removed Lines]",
          "123:  private:",
          "124:   bool valid_ = true;",
          "125:   Vec x_reshape_;",
          "126:   Vec x_bcast_;",
          "127:   Vec y_reshape_;",
          "128:   Vec y_bcast_;",
          "129:   Vec result_;",
          "130:   Vec output_;",
          "131:   Vec grad_x_reduce_idx_;",
          "132:   Vec grad_y_reduce_idx_;",
          "134:   static void Reverse(Vec* shape);",
          "",
          "[Added Lines]",
          "409:   static Vec FromShape(const TensorShape& shape);",
          "410:   static TensorShape ToShape(const Vec& vec);",
          "412:  private:",
          "",
          "---------------"
        ],
        "tensorflow/core/util/bcast_test.cc||tensorflow/core/util/bcast_test.cc": [
          "File: tensorflow/core/util/bcast_test.cc -> tensorflow/core/util/bcast_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:   return ret;",
          "42: }",
          "44: TEST(BCastTest, Invalid) {",
          "45:   for (const bool use_optimization : {true, false}) {",
          "46:     EXPECT_EQ(\"invalid\", BCast({5, 3, 2}, {3}, use_optimization));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: string BCastBatchIndices(const tensorflow::BCast::Vec& x,",
          "45:                          const tensorflow::BCast::Vec& y,",
          "46:                          const bool fewer_dims_optimization = true) {",
          "47:   tensorflow::BCast b(x, y, fewer_dims_optimization,",
          "49:   string ret;",
          "50:   strings::StrAppend(&ret, \"[\", absl::StrJoin(b.x_batch_indices(), \",\"), \"]\");",
          "51:   strings::StrAppend(&ret, \"[\", absl::StrJoin(b.y_batch_indices(), \",\"), \"]\");",
          "52:   return ret;",
          "53: }",
          "55: string BCastList3(const tensorflow::BCast::Vec& x,",
          "56:                   const tensorflow::BCast::Vec& y,",
          "57:                   const tensorflow::BCast::Vec& z,",
          "58:                   const bool fewer_dims_optimization = true) {",
          "59:   tensorflow::BCastList<3> b({x, y, z}, fewer_dims_optimization);",
          "60:   if (!b.IsValid()) {",
          "61:     return \"invalid\";",
          "62:   }",
          "63:   string ret;",
          "64:   strings::StrAppend(&ret, \"[\", absl::StrJoin(b.reshape(0), \",\"), \"]\");",
          "65:   strings::StrAppend(&ret, \"[\", absl::StrJoin(b.bcast(0), \",\"), \"]\");",
          "66:   strings::StrAppend(&ret, \"[\", absl::StrJoin(b.reshape(1), \",\"), \"]\");",
          "67:   strings::StrAppend(&ret, \"[\", absl::StrJoin(b.bcast(1), \",\"), \"]\");",
          "68:   strings::StrAppend(&ret, \"[\", absl::StrJoin(b.reshape(2), \",\"), \"]\");",
          "69:   strings::StrAppend(&ret, \"[\", absl::StrJoin(b.bcast(2), \",\"), \"]\");",
          "70:   strings::StrAppend(&ret, \"[\", absl::StrJoin(b.result_shape(), \",\"), \"]\");",
          "71:   strings::StrAppend(&ret, \"[\", absl::StrJoin(b.output_shape(), \",\"), \"]\");",
          "72:   strings::StrAppend(&ret, \"[\", absl::StrJoin(b.grad_reduce_idx(0), \",\"), \"]\");",
          "73:   strings::StrAppend(&ret, \"[\", absl::StrJoin(b.grad_reduce_idx(1), \",\"), \"]\");",
          "74:   strings::StrAppend(&ret, \"[\", absl::StrJoin(b.grad_reduce_idx(2), \",\"), \"]\");",
          "75:   return ret;",
          "76: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:   }",
          "52: }",
          "54: TEST(BCastTest, Basic_SameShape) {",
          "56:   EXPECT_EQ(BCast({11, 7, 5, 3, 2}, {11, 7, 5, 3, 2}),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88: TEST(BCastListTest, Invalid) {",
          "89:   for (const bool use_optimization : {true, false}) {",
          "90:     EXPECT_EQ(\"invalid\", BCastList3({5, 3, 2}, {3}, {1}, use_optimization));",
          "91:     EXPECT_EQ(\"invalid\", BCastList3({5, 3, 2}, {2, 2}, {1}, use_optimization));",
          "92:     EXPECT_EQ(\"invalid\",",
          "93:               BCastList3({5, 3, 2}, {10, 1, 1}, {1}, use_optimization));",
          "94:     EXPECT_EQ(\"invalid\", BCastList3({1, 2, 1, 2, 1, 2}, {2, 4, 2, 1, 2, 1}, {1},",
          "95:                                     use_optimization));",
          "96:     EXPECT_EQ(\"invalid\", BCastList3({5, 3, 2}, {1}, {3}, use_optimization));",
          "97:     EXPECT_EQ(\"invalid\", BCastList3({5, 3, 2}, {1}, {2, 2}, use_optimization));",
          "98:     EXPECT_EQ(\"invalid\",",
          "99:               BCastList3({5, 3, 2}, {1}, {10, 1, 1}, use_optimization));",
          "101:     EXPECT_EQ(\"invalid\", BCastList3({1}, {5, 3, 2}, {3}, use_optimization));",
          "102:     EXPECT_EQ(\"invalid\", BCastList3({1}, {5, 3, 2}, {2, 2}, use_optimization));",
          "103:     EXPECT_EQ(\"invalid\",",
          "104:               BCastList3({1}, {5, 3, 2}, {10, 1, 1}, use_optimization));",
          "105:   }",
          "106: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "66:             \"[][]\");",
          "67: }",
          "69: TEST(BCastTest, Basic_SameShapeWithZeroDim) {",
          "71:   EXPECT_EQ(BCast({11, 7, 0, 3, 2}, {11, 7, 0, 3, 2}),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "123: TEST(BCastListTest, Basic_SameShape) {",
          "125:   EXPECT_EQ(BCastList3({11, 7, 5, 3, 2}, {11, 7, 5, 3, 2}, {11, 7, 5, 3, 2}),",
          "126:             \"[2310][1][2310][1][2310][1]\"",
          "127:             \"[2310]\"",
          "128:             \"[11,7,5,3,2]\"",
          "129:             \"[][][]\");",
          "131:   EXPECT_EQ(",
          "132:       BCastList3({11, 7, 5, 3, 2}, {11, 7, 5, 3, 2}, {11, 7, 5, 3, 2}, false),",
          "133:       \"[11,7,5,3,2][1,1,1,1,1][11,7,5,3,2][1,1,1,1,1][11,7,5,3,2][1,1,1,1,1]\"",
          "134:       \"[11,7,5,3,2]\"",
          "135:       \"[11,7,5,3,2]\"",
          "136:       \"[][][]\");",
          "137: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "81:             \"[][]\");",
          "82: }",
          "84: TEST(BCastTest, Basic_Scalar_Scalar) {",
          "87:   EXPECT_EQ(BCast({1, 1}, {1}),",
          "88:             \"[1][1][1][1]\"",
          "89:             \"[1]\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "154: TEST(BCastListTest, Basic_SameShapeWithZeroDim) {",
          "156:   EXPECT_EQ(BCastList3({11, 7, 0, 3, 2}, {11, 7, 0, 3, 2}, {11, 7, 0, 3, 2}),",
          "157:             \"[0][1][0][1][0][1]\"",
          "158:             \"[0]\"",
          "159:             \"[11,7,0,3,2]\"",
          "160:             \"[][][]\");",
          "162:   EXPECT_EQ(",
          "163:       BCastList3({11, 7, 0, 3, 2}, {11, 7, 0, 3, 2}, {11, 7, 0, 3, 2}, false),",
          "164:       \"[11,7,0,3,2][1,1,1,1,1][11,7,0,3,2][1,1,1,1,1][11,7,0,3,2][1,1,1,1,1]\"",
          "165:       \"[11,7,0,3,2]\"",
          "166:       \"[11,7,0,3,2]\"",
          "167:       \"[][][]\");",
          "168: }",
          "174:   EXPECT_EQ(BCast({1, 1}, {}),",
          "175:             \"[1][1][1][1]\"",
          "176:             \"[1]\"",
          "177:             \"[1,1]\"",
          "178:             \"[0,1][0,1]\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "110:             \"[0,1][0,1]\");",
          "111: }",
          "113: TEST(BCastTest, Basic_Tensor_Scalar) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "206: TEST(BCastTest, Basic_TrueScalar_Scalar) {",
          "208:   EXPECT_EQ(BCast({}, {}),",
          "209:             \"[1][1][1][1]\"",
          "210:             \"[1]\"",
          "211:             \"[]\"",
          "212:             \"[][]\");",
          "215:   EXPECT_EQ(BCast({}, {1}),",
          "216:             \"[1][1][1][1]\"",
          "217:             \"[1]\"",
          "218:             \"[1]\"",
          "219:             \"[0][0]\");",
          "221:   EXPECT_EQ(BCast({}, {1}, false),",
          "222:             \"[1][1][1][1]\"",
          "223:             \"[1]\"",
          "224:             \"[1]\"",
          "225:             \"[0][0]\");",
          "228:   EXPECT_EQ(BCast({}, {1, 1}),",
          "229:             \"[1][1][1][1]\"",
          "230:             \"[1]\"",
          "231:             \"[1,1]\"",
          "232:             \"[0,1][0,1]\");",
          "234:   EXPECT_EQ(BCast({}, {1, 1}, false),",
          "235:             \"[1,1][1,1][1,1][1,1]\"",
          "236:             \"[1,1]\"",
          "237:             \"[1,1]\"",
          "238:             \"[0,1][0,1]\");",
          "241:   EXPECT_EQ(BCast({1}, {}),",
          "242:             \"[1][1][1][1]\"",
          "243:             \"[1]\"",
          "244:             \"[1]\"",
          "245:             \"[0][0]\");",
          "247:   EXPECT_EQ(BCast({1}, {}, false),",
          "248:             \"[1][1][1][1]\"",
          "249:             \"[1]\"",
          "250:             \"[1]\"",
          "251:             \"[0][0]\");",
          "254:   EXPECT_EQ(BCast({1, 1}, {}),",
          "255:             \"[1][1][1][1]\"",
          "256:             \"[1]\"",
          "257:             \"[1,1]\"",
          "258:             \"[0,1][0,1]\");",
          "260:   EXPECT_EQ(BCast({1, 1}, {}, false),",
          "261:             \"[1,1][1,1][1,1][1,1]\"",
          "262:             \"[1,1]\"",
          "263:             \"[1,1]\"",
          "264:             \"[0,1][0,1]\");",
          "265: }",
          "267: TEST(BCastListTest, Basic_Scalar_Scalar_Scalar) {",
          "270:   EXPECT_EQ(BCastList3({1, 1}, {1}, {1}),",
          "271:             \"[1][1][1][1][1][1]\"",
          "272:             \"[1]\"",
          "273:             \"[1,1]\"",
          "274:             \"[0,1][0,1][0,1]\");",
          "276:   EXPECT_EQ(BCastList3({1, 1}, {1}, {1}, false),",
          "277:             \"[1,1][1,1][1,1][1,1][1,1][1,1]\"",
          "278:             \"[1,1]\"",
          "279:             \"[1,1]\"",
          "280:             \"[0,1][0,1][0,1]\");",
          "283:   EXPECT_EQ(BCastList3({1}, {1, 1}, {1}),",
          "284:             \"[1][1][1][1][1][1]\"",
          "285:             \"[1]\"",
          "286:             \"[1,1]\"",
          "287:             \"[0,1][0,1][0,1]\");",
          "289:   EXPECT_EQ(BCastList3({1}, {1, 1}, {1}, false),",
          "290:             \"[1,1][1,1][1,1][1,1][1,1][1,1]\"",
          "291:             \"[1,1]\"",
          "292:             \"[1,1]\"",
          "293:             \"[0,1][0,1][0,1]\");",
          "296:   EXPECT_EQ(BCastList3({1}, {1}, {1, 1}),",
          "297:             \"[1][1][1][1][1][1]\"",
          "298:             \"[1]\"",
          "299:             \"[1,1]\"",
          "300:             \"[0,1][0,1][0,1]\");",
          "302:   EXPECT_EQ(BCastList3({1}, {1}, {1, 1}, false),",
          "303:             \"[1,1][1,1][1,1][1,1][1,1][1,1]\"",
          "304:             \"[1,1]\"",
          "305:             \"[1,1]\"",
          "306:             \"[0,1][0,1][0,1]\");",
          "307: }",
          "309: TEST(BCastListTest, Basic_TrueScalar_Scalar_Scalar) {",
          "312:   EXPECT_EQ(BCastList3({1, 1}, {1}, {}),",
          "313:             \"[1][1][1][1][1][1]\"",
          "314:             \"[1]\"",
          "315:             \"[1,1]\"",
          "316:             \"[0,1][0,1][0,1]\");",
          "318:   EXPECT_EQ(BCastList3({1, 1}, {1}, {}, false),",
          "319:             \"[1,1][1,1][1,1][1,1][1,1][1,1]\"",
          "320:             \"[1,1]\"",
          "321:             \"[1,1]\"",
          "322:             \"[0,1][0,1][0,1]\");",
          "325:   EXPECT_EQ(BCastList3({}, {1, 1}, {1}),",
          "326:             \"[1][1][1][1][1][1]\"",
          "327:             \"[1]\"",
          "328:             \"[1,1]\"",
          "329:             \"[0,1][0,1][0,1]\");",
          "331:   EXPECT_EQ(BCastList3({}, {1, 1}, {1}, false),",
          "332:             \"[1,1][1,1][1,1][1,1][1,1][1,1]\"",
          "333:             \"[1,1]\"",
          "334:             \"[1,1]\"",
          "335:             \"[0,1][0,1][0,1]\");",
          "338:   EXPECT_EQ(BCastList3({1}, {}, {1, 1}),",
          "339:             \"[1][1][1][1][1][1]\"",
          "340:             \"[1]\"",
          "341:             \"[1,1]\"",
          "342:             \"[0,1][0,1][0,1]\");",
          "344:   EXPECT_EQ(BCastList3({1}, {}, {1, 1}, false),",
          "345:             \"[1,1][1,1][1,1][1,1][1,1][1,1]\"",
          "346:             \"[1,1]\"",
          "347:             \"[1,1]\"",
          "348:             \"[0,1][0,1][0,1]\");",
          "349: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "327:   EXPECT_EQ(BCast({11, 1, 5, 1, 2}, {7, 1, 3, 1}, false), truth);",
          "328: }",
          "330: TEST(BCastTest, TestZeroDimensionShape) {",
          "332:   EXPECT_EQ(BCast({2, 0, 5}, {5}),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "568: TEST(BCastListTest, Complex_BCast_To_Each_Other) {",
          "579:   string truth =",
          "580:       \"[11,1,1,1,2][1,7,5,3,1]\"",
          "581:       \"[1,7,1,3,1][11,1,5,1,2]\"",
          "582:       \"[1,1,5,1,1][11,7,1,3,2]\"",
          "583:       \"[11,7,5,3,2]\"",
          "584:       \"[11,7,5,3,2]\"",
          "585:       \"[1,2,3][0,2,4][0,1,3,4]\";",
          "587:   EXPECT_EQ(BCastList3({11, 1, 1, 1, 2}, {7, 1, 3, 1}, {5, 1, 1}), truth);",
          "588:   EXPECT_EQ(BCastList3({11, 1, 1, 1, 2}, {7, 1, 3, 1}, {5, 1, 1}, false),",
          "589:             truth);",
          "590: }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "398:             \"[0,1,3][]\");",
          "399: }",
          "401: static void BM_BCastSetup(int iters, int same_shape) {",
          "402:   if (same_shape) {",
          "403:     testing::SetLabel(\"same_shapes\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "663: TEST(BCastTest, BatchIndices) {",
          "664:   EXPECT_EQ(\"[0,0,0,0][0,1,2,3]\", BCastBatchIndices({1}, {4}));",
          "666:   EXPECT_EQ(\"[][]\", BCastBatchIndices({5}, {7}));",
          "668:   EXPECT_EQ(\"[][]\", BCastBatchIndices({2, 4, 6}, {2, 4, 6}));",
          "670:   EXPECT_EQ(\"[0,0,0,0,1,1,1,1,2,2,2,2][0,1,2,3,0,1,2,3,0,1,2,3]\",",
          "671:             BCastBatchIndices({3, 1}, {1, 4}));",
          "672:   EXPECT_EQ(\"[0,0,1,1,2,2,0,0,1,1,2,2][0,1,0,1,0,1,2,3,2,3,2,3]\",",
          "673:             BCastBatchIndices({3, 1}, {2, 1, 2}));",
          "674: }",
          "",
          "---------------"
        ],
        "tensorflow/core/util/matmul_bcast.cc||tensorflow/core/util/matmul_bcast.cc": [
          "File: tensorflow/core/util/matmul_bcast.cc -> tensorflow/core/util/matmul_bcast.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include \"tensorflow/core/util/matmul_bcast.h\"",
          "18: namespace tensorflow {",
          "53: MatMulBCast::MatMulBCast(Vec x, Vec y) {",
          "54:   if (x.size() < 2 || y.size() < 2) return;",
          "55:   x.resize(x.size() - 2);",
          "",
          "[Removed Lines]",
          "19: namespace {",
          "25: void ComputeBatchIndices(const int64 output_batch_size,",
          "26:                          const MatMulBCast::Vec& reshape,",
          "27:                          const MatMulBCast::Vec& bcast,",
          "28:                          std::vector<int64>* out_indices) {",
          "34:   out_indices->resize(output_batch_size);",
          "35:   int64 num_output_elements = 1;",
          "36:   int64 num_input_elements = 1;",
          "37:   for (int64 i = reshape.size() - 1; i >= 0; --i) {",
          "41:     const int64 dim = std::max(reshape[i], bcast[i]);",
          "42:     const int64 incr = bcast[i] > 1 ? 0 : num_input_elements;",
          "43:     for (int64 k = 0; k < (dim - 1) * num_output_elements; ++k) {",
          "44:       (*out_indices)[num_output_elements + k] = (*out_indices)[k] + incr;",
          "45:     }",
          "46:     num_output_elements *= dim;",
          "47:     num_input_elements *= reshape[i];",
          "48:   }",
          "49: }",
          "51: }  // namespace",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/random/random_binomial_test.py||tensorflow/python/kernel_tests/random/random_binomial_test.py": [
          "File: tensorflow/python/kernel_tests/random/random_binomial_test.py -> tensorflow/python/kernel_tests/random/random_binomial_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: class RandomBinomialTest(test.TestCase):",
          "36:   \"\"\"This is a large test due to the moments computation taking some time.\"\"\"",
          "40:     def func():",
          "47:     return func",
          "",
          "[Removed Lines]",
          "38:   def _Sampler(self, num, counts, probs, dtype, seed=None):",
          "41:       rng = stateful_random_ops.Generator.from_seed(seed).binomial(",
          "42:           shape=[10 * num], counts=counts, probs=probs, dtype=dtype)",
          "43:       ret = array_ops.reshape(rng, [10, num])",
          "44:       ret = self.evaluate(ret)",
          "45:       return ret",
          "",
          "[Added Lines]",
          "38:   def _Sampler(",
          "39:       self, num, counts, probs, dtype, gen=None, sample_shape=None, seed=None):",
          "41:       shape = [10 * num] if sample_shape is None else sample_shape",
          "42:       generator = gen if gen is not None else (",
          "43:           stateful_random_ops.Generator.from_seed(seed))",
          "44:       return generator.binomial(",
          "45:           shape=shape, counts=counts, probs=probs, dtype=dtype)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:     # we want to tolerate. Since the z-test approximates a unit normal",
          "58:     # distribution, it should almost definitely never exceed 6.",
          "59:     z_limit = 6.0",
          "60:     for dt in _SUPPORTED_DTYPES:",
          "61:       # Test when n * p > 10, and n * p < 10",
          "62:       for stride in 0, 4, 10:",
          "63:         for counts in (1., 10., 22., 50.):",
          "64:           for prob in (0.1, 0.5, 0.8):",
          "66:             z_scores = util.test_moment_matching(",
          "67:                 # Use float64 samples.",
          "69:                 number_moments=6,",
          "70:                 dist=stats.binom(counts, prob),",
          "71:                 stride=stride,",
          "",
          "[Removed Lines]",
          "65:             sampler = self._Sampler(int(1e5), counts, prob, dt, seed=12345)",
          "68:                 sampler().astype(np.float64),",
          "",
          "[Added Lines]",
          "60:     gen = stateful_random_ops.Generator.from_seed(seed=12345)",
          "66:             sampler = self._Sampler(int(5e4), counts, prob, dt, gen=gen)",
          "69:                 self.evaluate(sampler()).astype(np.float64),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:     for dt in dtypes.float16, dtypes.float32, dtypes.float64:",
          "78:       sx = self._Sampler(1000, counts=10., probs=0.4, dtype=dt, seed=345)",
          "79:       sy = self._Sampler(1000, counts=10., probs=0.4, dtype=dt, seed=345)",
          "82:   def testZeroShape(self):",
          "83:     rnd = stateful_random_ops.Generator.from_seed(12345).binomial([0], [], [])",
          "",
          "[Removed Lines]",
          "80:       self.assertAllEqual(sx(), sy())",
          "",
          "[Added Lines]",
          "81:       self.assertAllEqual(self.evaluate(sx()), self.evaluate(sy()))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "88:     # Scalar parameters.",
          "89:     rnd = rng.binomial(shape=[10], counts=np.float32(2.), probs=np.float32(0.5))",
          "90:     self.assertEqual([10], rnd.shape.as_list())",
          "92:     # Vector parameters.",
          "93:     rnd = rng.binomial(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92:     rnd = rng.binomial(shape=[], counts=np.float32(2.), probs=np.float32(0.5))",
          "93:     self.assertEqual([], rnd.shape.as_list())",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "96:         probs=0.3 * array_ops.ones([10], dtype=np.float32))",
          "97:     self.assertEqual([10], rnd.shape.as_list())",
          "98:     rnd = rng.binomial(",
          "100:         counts=array_ops.ones([2], dtype=np.float32),",
          "101:         probs=0.4 * array_ops.ones([2], dtype=np.float32))",
          "104:     # Scalar counts, vector probs.",
          "105:     rnd = rng.binomial(",
          "",
          "[Removed Lines]",
          "99:         shape=[2, 5],",
          "102:     self.assertEqual([2, 5], rnd.shape.as_list())",
          "",
          "[Added Lines]",
          "102:         shape=[5, 2],",
          "105:     self.assertEqual([5, 2], rnd.shape.as_list())",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "115:         probs=np.float32(0.9))",
          "116:     self.assertEqual([10], rnd.shape.as_list())",
          "118:   @test_util.run_v2_only",
          "119:   def testCornerCases(self):",
          "120:     rng = stateful_random_ops.Generator.from_seed(12345)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:     # Tensor parameters",
          "122:     rnd = rng.binomial(",
          "123:         shape=[10, 2, 3],",
          "124:         counts=array_ops.ones([2, 1], dtype=np.float32),",
          "125:         probs=0.9 * array_ops.ones([1, 3], dtype=np.float32))",
          "126:     self.assertEqual([10, 2, 3], rnd.shape.as_list())",
          "128:     # Tensor parameters",
          "129:     rnd = rng.binomial(",
          "130:         shape=[10, 2, 3, 5],",
          "131:         counts=array_ops.ones([2, 1, 5], dtype=np.float32),",
          "132:         probs=0.9 * array_ops.ones([1, 3, 1], dtype=np.float32))",
          "133:     self.assertEqual([10, 2, 3, 5], rnd.shape.as_list())",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "126:         shape=[6], counts=counts, probs=probs, dtype=np.float32)",
          "127:     self.assertAllEqual(expected, self.evaluate(result))",
          "129: if __name__ == \"__main__\":",
          "130:   test.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146:   @test_util.run_v2_only",
          "147:   def testMomentsForTensorInputs(self):",
          "148:     try:",
          "149:       from scipy import stats  # pylint: disable=g-import-not-at-top",
          "150:     except ImportError as e:",
          "151:       tf_logging.warn(\"Cannot test moments: %s\", e)",
          "152:       return",
          "153:     # The moments test is a z-value test.  This is the largest z-value",
          "154:     # we want to tolerate. Since the z-test approximates a unit normal",
          "155:     # distribution, it should almost definitely never exceed 6.",
          "156:     z_limit = 6.0",
          "158:     class ScipyBinomialWrapper(object):",
          "159:       \"\"\"Wrapper for stats.binom to support broadcasting.\"\"\"",
          "161:       def __init__(self, counts, probs):",
          "162:         self.counts = counts",
          "163:         self.probs = probs",
          "165:       def moment(self, i):",
          "166:         counts, probs = np.broadcast_arrays(self.counts, self.probs)",
          "167:         broadcast_shape = counts.shape",
          "169:         counts = np.reshape(counts, (-1,))",
          "170:         probs = np.reshape(probs, (-1,))",
          "171:         counts_and_probs = np.stack([counts, probs], axis=-1)",
          "172:         moments = np.fromiter(",
          "173:             (stats.binom(cp[0], cp[1]).moment(i) for cp in counts_and_probs),",
          "174:             dtype=np.float64)",
          "175:         return np.reshape(moments, broadcast_shape)",
          "177:     gen = stateful_random_ops.Generator.from_seed(seed=23455)",
          "178:     for dt in _SUPPORTED_DTYPES:",
          "179:       # Test when n * p > 10, and n * p < 10",
          "180:       for stride in 0, 4, 10:",
          "181:         counts = np.float64(np.random.randint(low=1, high=20, size=(2, 1, 4)))",
          "182:         probs = np.random.uniform(size=(1, 3, 4))",
          "184:         sampler = self._Sampler(",
          "185:             int(5e4),",
          "186:             counts,",
          "187:             probs,",
          "188:             dt,",
          "189:             gen=gen,",
          "190:             sample_shape=[10 * int(5e4), 2, 3, 4])",
          "191:         # Use float64 samples.",
          "192:         samples = self.evaluate(sampler()).astype(np.float64)",
          "193:         z_scores = util.test_moment_matching(",
          "194:             samples,",
          "195:             number_moments=6,",
          "196:             dist=ScipyBinomialWrapper(counts, probs),",
          "197:             stride=stride,",
          "198:         )",
          "199:         self.assertAllLess(z_scores, z_limit)",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/random/util.py||tensorflow/python/kernel_tests/random/util.py": [
          "File: tensorflow/python/kernel_tests/random/util.py -> tensorflow/python/kernel_tests/random/util.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:   sample_moments = []",
          "50:   expected_moments = []",
          "51:   variance_sample_moments = []",
          "53:   for i in range(1, number_moments + 1):",
          "56:     expected_moments.append(dist.moment(i))",
          "57:     variance_sample_moments.append(",
          "58:         (dist.moment(2 * i) - dist.moment(i) ** 2) / len(strided_range))",
          "",
          "[Removed Lines]",
          "52:   x = samples.flat",
          "54:     strided_range = x[::(i - 1) * stride + 1]",
          "55:     sample_moments.append(np.mean(strided_range ** i))",
          "",
          "[Added Lines]",
          "53:     if len(samples.shape) == 2:",
          "54:       strided_range = samples.flat[::(i - 1) * stride + 1]",
          "55:     else:",
          "56:       strided_range = samples[::(i - 1) * stride + 1, ...]",
          "57:     sample_moments.append(np.mean(strided_range**i, axis=0))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:         i * np.finfo(samples.dtype).eps)",
          "67:     tiny = np.finfo(samples.dtype).tiny",
          "68:     assert np.all(total_variance > 0)",
          "71:     # z_test is approximately a unit normal distribution.",
          "72:     z_test_scores.append(abs(",
          "73:         (sample_moments[i - 1] - expected_moments[i - 1]) / np.sqrt(",
          "",
          "[Removed Lines]",
          "69:     if total_variance < tiny:",
          "70:       total_variance = tiny",
          "",
          "[Added Lines]",
          "71:     total_variance = np.where(total_variance < tiny, tiny, total_variance)",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/stateful_random_ops.py||tensorflow/python/ops/stateful_random_ops.py": [
          "File: tensorflow/python/ops/stateful_random_ops.py -> tensorflow/python/ops/stateful_random_ops.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "598:     ```python",
          "599:     counts = [10., 20.]",
          "600:     # Probability of success.",
          "603:     rng = tf.random.experimental.Generator.from_seed(seed=234)",
          "604:     binomial_samples = rng.binomial(shape=[2], counts=counts, probs=probs)",
          "605:     ```",
          "608:     Args:",
          "609:       shape: A 1-D integer Tensor or Python array. The shape of the output",
          "610:         tensor.",
          "617:       dtype: The type of the output. Default: tf.int32",
          "618:       name: A name for the operation (optional).",
          "",
          "[Removed Lines]",
          "601:     probs = [0.8, 0.9]",
          "611:       counts: A 0/1-D Tensor or Python value. The counts of the binomial",
          "612:         distribution.  Must be broadcastable with the leftmost dimension",
          "613:         defined by `shape`.",
          "614:       probs: A 0/1-D Tensor or Python value. The probability of success for the",
          "615:         binomial distribution.  Must be broadcastable with the leftmost",
          "616:         dimension defined by `shape`.",
          "",
          "[Added Lines]",
          "601:     probs = [0.8]",
          "607:     counts = ... # Shape [3, 1, 2]",
          "608:     probs = ...  # Shape [1, 4, 2]",
          "609:     shape = [3, 4, 3, 4, 2]",
          "610:     rng = tf.random.experimental.Generator.from_seed(seed=1717)",
          "611:     # Sample shape will be [3, 4, 3, 4, 2]",
          "612:     binomial_samples = rng.binomial(shape=shape, counts=counts, probs=probs)",
          "619:       counts: Tensor. The counts of the binomial distribution. Must be",
          "620:         broadcastable with `probs`, and broadcastable with the rightmost",
          "621:         dimensions of `shape`.",
          "622:       probs: Tensor. The probability of success for the",
          "623:         binomial distribution. Must be broadcastable with `counts` and",
          "624:         broadcastable with the rightmost dimensions of `shape`.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "31c94250fcff763e63495d7310b912bca2148117",
      "candidate_info": {
        "commit_hash": "31c94250fcff763e63495d7310b912bca2148117",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/31c94250fcff763e63495d7310b912bca2148117",
        "files": [
          "tensorflow/core/api_def/base_api/api_def_StatelessRandomGammaV2.pbtxt",
          "tensorflow/core/kernels/random_op.cc",
          "tensorflow/core/kernels/stateless_random_ops.cc",
          "tensorflow/core/ops/stateless_random_ops.cc",
          "tensorflow/python/eager/pywrap_gradient_exclusions.cc",
          "tensorflow/python/kernel_tests/random/BUILD",
          "tensorflow/python/kernel_tests/random/stateless_random_ops_test.py",
          "tensorflow/python/ops/random_grad.py",
          "tensorflow/python/ops/stateless_random_ops.py",
          "tensorflow/tools/api/golden/v1/tensorflow.random.pbtxt",
          "tensorflow/tools/api/golden/v1/tensorflow.raw_ops.pbtxt",
          "tensorflow/tools/api/golden/v2/tensorflow.random.pbtxt",
          "tensorflow/tools/api/golden/v2/tensorflow.raw_ops.pbtxt"
        ],
        "message": "Adds a `tf.random.stateless_gamma` sampler for CPU. (Stateless analogue to `tf.random.gamma`.)\n\nPiperOrigin-RevId: 293454705\nChange-Id: I103900822dac37989246eaf7b410157e5563b78b",
        "before_after_code_files": [
          "tensorflow/core/api_def/base_api/api_def_StatelessRandomGammaV2.pbtxt||tensorflow/core/api_def/base_api/api_def_StatelessRandomGammaV2.pbtxt",
          "tensorflow/core/kernels/random_op.cc||tensorflow/core/kernels/random_op.cc",
          "tensorflow/core/kernels/stateless_random_ops.cc||tensorflow/core/kernels/stateless_random_ops.cc",
          "tensorflow/core/ops/stateless_random_ops.cc||tensorflow/core/ops/stateless_random_ops.cc",
          "tensorflow/python/eager/pywrap_gradient_exclusions.cc||tensorflow/python/eager/pywrap_gradient_exclusions.cc",
          "tensorflow/python/kernel_tests/random/stateless_random_ops_test.py||tensorflow/python/kernel_tests/random/stateless_random_ops_test.py",
          "tensorflow/python/ops/random_grad.py||tensorflow/python/ops/random_grad.py",
          "tensorflow/python/ops/stateless_random_ops.py||tensorflow/python/ops/stateless_random_ops.py",
          "tensorflow/tools/api/golden/v1/tensorflow.random.pbtxt||tensorflow/tools/api/golden/v1/tensorflow.random.pbtxt",
          "tensorflow/tools/api/golden/v1/tensorflow.raw_ops.pbtxt||tensorflow/tools/api/golden/v1/tensorflow.raw_ops.pbtxt",
          "tensorflow/tools/api/golden/v2/tensorflow.random.pbtxt||tensorflow/tools/api/golden/v2/tensorflow.random.pbtxt",
          "tensorflow/tools/api/golden/v2/tensorflow.raw_ops.pbtxt||tensorflow/tools/api/golden/v2/tensorflow.raw_ops.pbtxt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/stateless_random_ops.cc||tensorflow/core/kernels/stateless_random_ops.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/stateless_random_ops.cc||tensorflow/core/kernels/stateless_random_ops.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/api_def/base_api/api_def_StatelessRandomGammaV2.pbtxt||tensorflow/core/api_def/base_api/api_def_StatelessRandomGammaV2.pbtxt": [
          "File: tensorflow/core/api_def/base_api/api_def_StatelessRandomGammaV2.pbtxt -> tensorflow/core/api_def/base_api/api_def_StatelessRandomGammaV2.pbtxt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: op {",
          "2:   graph_op_name: \"StatelessRandomGammaV2\"",
          "3:   visibility: HIDDEN",
          "4:   in_arg {",
          "5:     name: \"shape\"",
          "6:     description: <<END",
          "7: The shape of the output tensor.",
          "8: END",
          "9:   }",
          "10:   in_arg {",
          "11:     name: \"seed\"",
          "12:     description: <<END",
          "13: 2 seeds (shape [2]).",
          "14: END",
          "15:   }",
          "16:   in_arg {",
          "17:     name: \"alpha\"",
          "18:     description: <<END",
          "19: The concentration of the gamma distribution. Shape must match the rightmost",
          "20: dimensions of `shape`.",
          "21: END",
          "22:   }",
          "23:   out_arg {",
          "24:     name: \"output\"",
          "25:     description: <<END",
          "26: Random values with specified shape.",
          "27: END",
          "28:   }",
          "29:   attr {",
          "30:     name: \"dtype\"",
          "31:     description: <<END",
          "32: The type of the output.",
          "33: END",
          "34:   }",
          "35:   summary: \"Outputs deterministic pseudorandom random numbers from a gamma distribution.\"",
          "36:   description: <<END",
          "37: Outputs random values from a gamma distribution.",
          "39: The outputs are a deterministic function of `shape`, `seed`, and `alpha`.",
          "40: END",
          "41: }",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/random_op.cc||tensorflow/core/kernels/random_op.cc": [
          "File: tensorflow/core/kernels/random_op.cc -> tensorflow/core/kernels/random_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:       OP_REQUIRES_OK(ctx, TensorShapeUtils::MakeShape(vec.data(), vec.size(),",
          "168:                                                       &samples_shape));",
          "169:     }",
          "172:     samples_shape.AppendShape(alpha_t.shape());",
          "",
          "[Removed Lines]",
          "170:     const int64 num_samples = samples_shape.num_elements();",
          "",
          "[Added Lines]",
          "170:     const int64 samples_per_alpha = samples_shape.num_elements();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "199:                     num_alphas));",
          "200:     auto samples_flat = samples_t->flat<T>().data();",
          "201:     PhiloxRandom rng = generator_.ReserveRandomOutputs(",
          "209:       using Eigen::numext::exp;",
          "210:       using Eigen::numext::log;",
          "211:       using Eigen::numext::pow;",
          "",
          "[Removed Lines]",
          "202:         num_samples * num_alphas, kReservedSamplesPerOutput);",
          "207:     auto DoWork = [num_samples, num_alphas, &rng, samples_flat, alpha_flat](",
          "208:                       int start_output, int limit_output) {",
          "",
          "[Added Lines]",
          "202:         samples_per_alpha * num_alphas, kReservedSamplesPerOutput);",
          "207:     auto DoWork = [samples_per_alpha, num_alphas, &rng, samples_flat,",
          "208:                    alpha_flat](int start_output, int limit_output) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "220:       typename Uniform::ResultType uniform_result;",
          "221:       for (int64 output_idx = start_output; output_idx < limit_output;",
          "226:         T* const samples_alpha_offset = samples_flat + alpha_idx;",
          "",
          "[Removed Lines]",
          "223:         int64 alpha_idx = output_idx / num_samples;",
          "",
          "[Added Lines]",
          "223:         int64 alpha_idx = output_idx / samples_per_alpha;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "232:         if (alpha == static_cast<double>(1.0)) {",
          "233:           ENABLE_FLOAT_EQUALITY_WARNING",
          "237:                sample_idx++, output_idx++) {",
          "",
          "[Removed Lines]",
          "235:           for (int64 sample_idx = output_idx % num_samples;",
          "236:                sample_idx < num_samples && output_idx < limit_output;",
          "",
          "[Added Lines]",
          "235:           for (int64 sample_idx = output_idx % samples_per_alpha;",
          "236:                sample_idx < samples_per_alpha && output_idx < limit_output;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "259:           const double c = 1.0 / 3 / sqrt(d);",
          "264:                sample_idx++, output_idx++) {",
          "",
          "[Removed Lines]",
          "262:           for (int64 sample_idx = output_idx % num_samples;",
          "263:                sample_idx < num_samples && output_idx < limit_output;",
          "",
          "[Added Lines]",
          "262:           for (int64 sample_idx = output_idx % samples_per_alpha;",
          "263:                sample_idx < samples_per_alpha && output_idx < limit_output;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "317:                                     3 * PhiloxRandom::kElementCost;",
          "318:     auto worker_threads = *(ctx->device()->tensorflow_cpu_worker_threads());",
          "319:     Shard(worker_threads.num_threads, worker_threads.workers,",
          "321:   }",
          "323:  private:",
          "",
          "[Removed Lines]",
          "320:           num_alphas * num_samples, kElementCost, DoWork);",
          "",
          "[Added Lines]",
          "320:           num_alphas * samples_per_alpha, kElementCost, DoWork);",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/stateless_random_ops.cc||tensorflow/core/kernels/stateless_random_ops.cc": [
          "File: tensorflow/core/kernels/stateless_random_ops.cc -> tensorflow/core/kernels/stateless_random_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"tensorflow/core/kernels/random_op.h\"",
          "23: #include \"tensorflow/core/lib/random/random_distributions.h\"",
          "24: #include \"tensorflow/core/platform/logging.h\"",
          "26: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #include \"tensorflow/core/util/work_sharder.h\"",
          "27: #if EIGEN_COMP_GNUC && __cplusplus > 199711L",
          "28: #define DISABLE_FLOAT_EQUALITY_WARNING \\",
          "29:   _Pragma(\"GCC diagnostic push\")       \\",
          "30:       _Pragma(\"GCC diagnostic ignored \\\"-Wfloat-equal\\\"\")",
          "31: #define ENABLE_FLOAT_EQUALITY_WARNING _Pragma(\"GCC diagnostic pop\")",
          "32: #else",
          "33: #define DISABLE_FLOAT_EQUALITY_WARNING",
          "34: #define ENABLE_FLOAT_EQUALITY_WARNING",
          "35: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "151:   }",
          "152: };",
          "154: #define REGISTER(DEVICE, TYPE)                                              \\",
          "155:   REGISTER_KERNEL_BUILDER(                                                  \\",
          "156:       Name(\"StatelessRandomUniform\")                                        \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165: template <typename Device, typename T>",
          "166: class StatelessRandomGammaOp : public StatelessRandomOpBase {",
          "167:  public:",
          "168:   using StatelessRandomOpBase::StatelessRandomOpBase;",
          "170:   void Fill(OpKernelContext* ctx, random::PhiloxRandom random,",
          "171:             Tensor* output) override {",
          "172:     const Tensor& alpha_t = ctx->input(2);",
          "174:     TensorShape samples_shape = output->shape();",
          "175:     OP_REQUIRES(ctx, TensorShapeUtils::EndsWith(samples_shape, alpha_t.shape()),",
          "176:                 errors::InvalidArgument(",
          "177:                     \"Shape passed in must end with broadcasted shape.\"));",
          "179:     typedef random::NormalDistribution<random::PhiloxRandom, double> Normal;",
          "180:     typedef random::UniformDistribution<random::PhiloxRandom, double> Uniform;",
          "181: #define UNIFORM(X)                                    \\",
          "182:   if (uniform_remaining == 0) {                       \\",
          "183:     uniform_remaining = Uniform::kResultElementCount; \\",
          "184:     uniform_result = uniform(&gen);                   \\",
          "185:   }                                                   \\",
          "186:   uniform_remaining--;                                \\",
          "187:   double X = uniform_result[uniform_remaining]",
          "190:     static constexpr int kReservedSamplesPerOutput = 256;",
          "192:     const int64 num_alphas = alpha_t.NumElements();",
          "193:     OP_REQUIRES(ctx, num_alphas > 0,",
          "194:                 errors::InvalidArgument(",
          "195:                     \"Input alpha should have non-zero element count, got: \",",
          "196:                     num_alphas));",
          "197:     const int64 samples_per_alpha = samples_shape.num_elements() / num_alphas;",
          "198:     const auto alpha_flat = alpha_t.flat<T>().data();",
          "199:     auto samples_flat = output->flat<T>().data();",
          "204:     auto DoWork = [samples_per_alpha, num_alphas, &random, samples_flat,",
          "205:                    alpha_flat](int start_output, int limit_output) {",
          "210:       using Eigen::numext::exp;",
          "211:       using Eigen::numext::log;",
          "212:       using Eigen::numext::pow;",
          "214:       Normal normal;",
          "215:       Uniform uniform;",
          "216:       typename Normal::ResultType norm_result;",
          "217:       typename Uniform::ResultType uniform_result;",
          "218:       for (int64 output_idx = start_output; output_idx < limit_output;",
          "220:         int64 alpha_idx = output_idx / samples_per_alpha;",
          "223:         T* const samples_alpha_offset = samples_flat + alpha_idx;",
          "226:         const double alpha = static_cast<double>(alpha_flat[alpha_idx]);",
          "228:         DISABLE_FLOAT_EQUALITY_WARNING",
          "229:         if (alpha == static_cast<double>(1.0)) {",
          "230:           ENABLE_FLOAT_EQUALITY_WARNING",
          "232:           for (int64 sample_idx = output_idx % samples_per_alpha;",
          "233:                sample_idx < samples_per_alpha && output_idx < limit_output;",
          "234:                sample_idx++, output_idx++) {",
          "237:             random::PhiloxRandom gen = random;",
          "238:             gen.Skip(kReservedSamplesPerOutput * output_idx);",
          "239:             int16 uniform_remaining = 0;",
          "240:             UNIFORM(u);",
          "241:             const double res = -log(1.0 - u);",
          "242:             samples_alpha_offset[sample_idx * num_alphas] = static_cast<T>(res);",
          "243:           }       // for (sample_idx)",
          "244:         } else {  // if alpha != 1.0",
          "254:           const bool alpha_less_than_one = alpha < 1;",
          "255:           const double d = alpha + (alpha_less_than_one ? 2.0 / 3 : -1.0 / 3);",
          "256:           const double c = 1.0 / 3 / sqrt(d);",
          "259:           for (int64 sample_idx = output_idx % samples_per_alpha;",
          "260:                sample_idx < samples_per_alpha && output_idx < limit_output;",
          "261:                sample_idx++, output_idx++) {",
          "265:             random::PhiloxRandom gen = random;",
          "266:             gen.Skip(kReservedSamplesPerOutput * output_idx);",
          "267:             int16 norm_remaining = 0;",
          "268:             int16 uniform_remaining = 0;",
          "272:             while (true) {",
          "273:               if (norm_remaining == 0) {",
          "274:                 norm_remaining = Normal::kResultElementCount;",
          "275:                 norm_result = normal(&gen);",
          "276:               }",
          "277:               norm_remaining--;",
          "278:               const double x = norm_result[norm_remaining];",
          "279:               double v = 1 + c * x;",
          "280:               if (v <= 0) {",
          "281:                 continue;",
          "282:               }",
          "283:               v = v * v * v;",
          "284:               UNIFORM(u);",
          "290:               if ((u < 1 - 0.0331 * (x * x) * (x * x)) ||",
          "291:                   (log(u) < 0.5 * x * x + d * (1 - v + log(v)))) {",
          "292:                 double res = d * v;",
          "293:                 if (alpha_less_than_one) {",
          "294:                   UNIFORM(b);",
          "295:                   res *= pow(b, 1 / alpha);",
          "296:                 }",
          "297:                 samples_alpha_offset[sample_idx * num_alphas] =",
          "298:                     static_cast<T>(res);",
          "299:                 break;",
          "300:               }",
          "301:             }  // while: true",
          "302:           }    // for: sample_idx",
          "303:         }      // if (alpha == 1.0)",
          "304:       }        // for: output_idx",
          "305:     };         // DoWork",
          "306: #undef UNIFORM",
          "312:     static const int kElementCost = 85 + 2 * Normal::kElementCost +",
          "313:                                     Uniform::kElementCost +",
          "314:                                     3 * random::PhiloxRandom::kElementCost;",
          "315:     auto worker_threads = *(ctx->device()->tensorflow_cpu_worker_threads());",
          "316:     Shard(worker_threads.num_threads, worker_threads.workers,",
          "317:           num_alphas * samples_per_alpha, kElementCost, DoWork);",
          "318:   }",
          "319: };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "177:       StatelessRandomOp<                                                    \\",
          "178:           DEVICE##Device,                                                   \\",
          "179:           random::TruncatedNormalDistribution<                              \\",
          "182: #define REGISTER_INT(DEVICE, TYPE)                            \\",
          "183:   REGISTER_KERNEL_BUILDER(Name(\"StatelessRandomUniformInt\")   \\",
          "",
          "[Removed Lines]",
          "180:               random::SingleSampleAdapter<random::PhiloxRandom>, TYPE> >);",
          "",
          "[Added Lines]",
          "347:               random::SingleSampleAdapter<random::PhiloxRandom>, TYPE> >)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "201: TF_CALL_int32(REGISTER_INT_CPU);",
          "202: TF_CALL_int64(REGISTER_INT_CPU);",
          "204: #if GOOGLE_CUDA || TENSORFLOW_USE_ROCM",
          "206: TF_CALL_half(REGISTER_GPU);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "371: #define REGISTER_GAMMA(TYPE)                                  \\",
          "372:   REGISTER_KERNEL_BUILDER(Name(\"StatelessRandomGammaV2\")      \\",
          "373:                               .Device(DEVICE_CPU)             \\",
          "374:                               .HostMemory(\"shape\")            \\",
          "375:                               .HostMemory(\"seed\")             \\",
          "376:                               .HostMemory(\"alpha\")            \\",
          "377:                               .TypeConstraint<TYPE>(\"dtype\"), \\",
          "378:                           StatelessRandomGammaOp<CPUDevice, TYPE>)",
          "380: TF_CALL_half(REGISTER_GAMMA);",
          "381: TF_CALL_bfloat16(REGISTER_GAMMA);",
          "382: TF_CALL_float(REGISTER_GAMMA);",
          "383: TF_CALL_double(REGISTER_GAMMA);",
          "385: #undef REGISTER_GAMMA",
          "",
          "---------------"
        ],
        "tensorflow/core/ops/stateless_random_ops.cc||tensorflow/core/ops/stateless_random_ops.cc": [
          "File: tensorflow/core/ops/stateless_random_ops.cc -> tensorflow/core/ops/stateless_random_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:     .Attr(\"dtype: {half, float, double, int32, int64} = DT_INT64\")",
          "106:     .SetShapeFn(StatelessShape);",
          "108: }  // namespace tensorflow",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108: REGISTER_OP(\"StatelessRandomGammaV2\")",
          "109:     .Input(\"shape: T\")",
          "110:     .Input(\"seed: Tseed\")",
          "111:     .Input(\"alpha: dtype\")",
          "112:     .Output(\"output: dtype\")",
          "113:     .Attr(\"dtype: {float16, float32, float64}\")",
          "114:     .Attr(\"T: {int32, int64}\")",
          "115:     .Attr(\"Tseed: {int32, int64} = DT_INT64\")",
          "116:     .SetShapeFn(StatelessShape);",
          "",
          "---------------"
        ],
        "tensorflow/python/eager/pywrap_gradient_exclusions.cc||tensorflow/python/eager/pywrap_gradient_exclusions.cc": [
          "File: tensorflow/python/eager/pywrap_gradient_exclusions.cc -> tensorflow/python/eager/pywrap_gradient_exclusions.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "308:           {\"StackPush\", {true, {}}},",
          "309:           {\"StatelessMultinomial\", {true, {}}},",
          "310:           {\"StatelessRandomBinomial\", {true, {}}},",
          "311:           {\"StatelessRandomNormal\", {true, {}}},",
          "312:           {\"StatelessRandomUniform\", {true, {}}},",
          "313:           {\"StatelessRandomUniformInt\", {true, {}}},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311:           {\"StatelessRandomGammaV2\", {false, {1}}},",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/random/stateless_random_ops_test.py||tensorflow/python/kernel_tests/random/stateless_random_ops_test.py": [
          "File: tensorflow/python/kernel_tests/random/stateless_random_ops_test.py -> tensorflow/python/kernel_tests/random/stateless_random_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:           yield (functools.partial(stateless.stateless_multinomial, **kwds),",
          "130:                  functools.partial(random_ops.multinomial, **kwds))",
          "132:   @test_util.run_deprecated_v1",
          "133:   def testMatchFloat(self):",
          "134:     self._test_match(self._float_cases())",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132:   def _gamma_cases(self):",
          "133:     for dtype in np.float16, np.float32, np.float64:",
          "134:       for alpha in ([[.5, 1., 2.]], [[0.5, 0.5], [0.8, 0.2], [0.25, 0.75]]):",
          "135:         kwds = dict(alpha=constant_op.constant(alpha, dtype=dtype), dtype=dtype)",
          "136:         yield (functools.partial(",
          "137:             stateless.stateless_random_gamma,",
          "138:             shape=(10,) + tuple(np.shape(alpha)),",
          "140:                functools.partial(random_ops.random_gamma, shape=(10,), **kwds))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141:   def testMatchMultinomial(self):",
          "142:     self._test_match(self._multinomial_cases())",
          "144:   @test_util.run_deprecated_v1",
          "145:   def testDeterminismFloat(self):",
          "146:     self._test_determinism(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "154:   @test_util.run_deprecated_v1",
          "155:   def testMatchGamma(self):",
          "156:     self._test_match(self._gamma_cases())",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "155:   def testDeterminismMultinomial(self):",
          "156:     self._test_determinism(self._multinomial_cases())",
          "159: if __name__ == '__main__':",
          "160:   test.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "172:   @test_util.run_deprecated_v1",
          "173:   def testDeterminismGamma(self):",
          "174:     self._test_determinism(self._gamma_cases())",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/random_grad.py||tensorflow/python/ops/random_grad.py": [
          "File: tensorflow/python/ops/random_grad.py -> tensorflow/python/ops/random_grad.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: from tensorflow.python.ops import math_ops",
          "29:   new_shape = array_ops.concat(",
          "30:       [array_ops.ones([num_dimensions], dtype=dtypes.int32),",
          "31:        array_ops.shape(x)], axis=0)",
          "",
          "[Removed Lines]",
          "28: def add_leading_unit_dimensions(x, num_dimensions):",
          "",
          "[Added Lines]",
          "28: def add_leading_unit_dimensions(x, num_dimensions):  # pylint: disable=invalid-name",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:     # The first input is shape; the second input is alpha.",
          "71:     return (None, math_ops.reduce_sum(",
          "72:         grad * partial_a, axis=math_ops.range(num_sample_dimensions)))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75: @ops.RegisterGradient(\"StatelessRandomGammaV2\")",
          "76: def _StatelessRandomGammaV2Grad(op, grad):  # pylint: disable=invalid-name",
          "77:   \"\"\"Returns the gradient of a Gamma sample w.r.t. alpha.",
          "79:   The gradient is computed using implicit differentiation",
          "80:   (Figurnov et al., 2018).",
          "82:   Args:",
          "83:     op: A `StatelessRandomGamma` operation. We assume that the inputs to the",
          "84:       operation are `shape`, `seed` and `alpha` tensors, and the output is the",
          "85:       `sample` tensor.",
          "86:     grad: The incoming gradient `dloss / dsample` of the same shape as",
          "87:       `op.outputs[0]`.",
          "89:   Returns:",
          "90:     A `Tensor` with derivatives `dloss / dalpha`.",
          "92:   References:",
          "93:     Implicit Reparameterization Gradients:",
          "94:       [Figurnov et al., 2018]",
          "95:       (http://papers.nips.cc/paper/7326-implicit-reparameterization-gradients)",
          "96:       ([pdf]",
          "97:       (http://papers.nips.cc/paper/7326-implicit-reparameterization-gradients.pdf))",
          "98:   \"\"\"",
          "99:   shape = op.inputs[0]",
          "100:   alpha = op.inputs[2]",
          "101:   sample = op.outputs[0]",
          "103:   with ops.control_dependencies([grad]):",
          "104:     # Note that the shape handling is slightly different for stateless_gamma,",
          "105:     # in particular num_sample_dimensions is different.",
          "106:     num_sample_dimensions = array_ops.shape(shape)[0] - array_ops.rank(alpha)",
          "107:     # Make the parameters alpha broadcastable with samples by appending",
          "108:     # unit dimensions.",
          "109:     alpha_broadcastable = add_leading_unit_dimensions(alpha,",
          "110:                                                       num_sample_dimensions)",
          "111:     partial_a = gen_random_ops.random_gamma_grad(alpha_broadcastable, sample)",
          "113:     # The first two inputs are shape, seed, third input is alpha.",
          "114:     return (None, None,",
          "115:             math_ops.reduce_sum(",
          "116:                 grad * partial_a, axis=math_ops.range(num_sample_dimensions)))",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/stateless_random_ops.py||tensorflow/python/ops/stateless_random_ops.py": [
          "File: tensorflow/python/ops/stateless_random_ops.py -> tensorflow/python/ops/stateless_random_ops.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: from __future__ import division",
          "19: from __future__ import print_function",
          "21: from tensorflow.python.framework import dtypes",
          "22: from tensorflow.python.framework import ops",
          "23: from tensorflow.python.framework import tensor_util",
          "24: from tensorflow.python.ops import gen_stateless_random_ops",
          "25: from tensorflow.python.ops import math_ops",
          "26: from tensorflow.python.util import deprecation",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import numpy as np",
          "26: from tensorflow.python.ops import array_ops",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "171:     return result",
          "174: @tf_export(\"random.stateless_normal\")",
          "175: def stateless_random_normal(shape,",
          "176:                             seed,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "177: @tf_export(\"random.stateless_gamma\")",
          "178: def stateless_random_gamma(shape,",
          "179:                            seed,",
          "180:                            alpha,",
          "181:                            beta=None,",
          "182:                            dtype=dtypes.float32,",
          "183:                            name=None):",
          "184:   \"\"\"Outputs deterministic pseudorandom values from a gamma distribution.",
          "186:   The generated values follow a gamma distribution with specified concentration",
          "187:   (`alpha`) and inverse scale (`beta`) parameters.",
          "189:   This is a stateless version of `tf.random.gamma`: if run twice with the same",
          "190:   seeds, it will produce the same pseudorandom numbers. The output is consistent",
          "191:   across multiple runs on the same hardware (and between CPU and GPU), but may",
          "192:   change between versions of TensorFlow or on non-CPU/GPU hardware.",
          "194:   A slight difference exists in the interpretation of the `shape` parameter",
          "195:   between `stateless_gamma` and `gamma`: in `gamma`, the `shape` is always",
          "196:   prepended to the shape of the broadcast of `alpha` with `beta`; whereas in",
          "197:   `stateless_gamma` the `shape` parameter must always encompass the shapes of",
          "198:   each of `alpha` and `beta` (which must broadcast together to match the",
          "199:   trailing dimensions of `shape`).",
          "201:   Note: Because internal calculations are done using `float64` and casting has",
          "202:   `floor` semantics, we must manually map zero outcomes to the smallest",
          "203:   possible positive floating-point value, i.e., `np.finfo(dtype).tiny`.  This",
          "204:   means that `np.finfo(dtype).tiny` occurs more frequently than it otherwise",
          "205:   should.  This bias can only happen for small values of `alpha`, i.e.,",
          "206:   `alpha << 1` or large values of `beta`, i.e., `beta >> 1`.",
          "208:   The samples are differentiable w.r.t. alpha and beta.",
          "209:   The derivatives are computed using the approach described in",
          "210:   (Figurnov et al., 2018).",
          "212:   Example:",
          "214:   ```python",
          "215:   samples = tf.random.stateless_gamma([10, 2], seed=[12, 34], alpha=[0.5, 1.5])",
          "216:   # samples has shape [10, 2], where each slice [:, 0] and [:, 1] represents",
          "217:   # the samples drawn from each distribution",
          "219:   samples = tf.random.stateless_gamma([7, 5, 2], seed=[12, 34], alpha=[.5, 1.5])",
          "220:   # samples has shape [7, 5, 2], where each slice [:, :, 0] and [:, :, 1]",
          "221:   # represents the 7x5 samples drawn from each of the two distributions",
          "223:   alpha = tf.constant([[1.], [3.], [5.]])",
          "224:   beta = tf.constant([[3., 4.]])",
          "225:   samples = tf.random.stateless_gamma(",
          "226:       [30, 3, 2], seed=[12, 34], alpha=alpha, beta=beta)",
          "227:   # samples has shape [30, 3, 2], with 30 samples each of 3x2 distributions.",
          "229:   with tf.GradientTape() as tape:",
          "230:     tape.watch([alpha, beta])",
          "231:     loss = tf.reduce_mean(tf.square(tf.random.stateless_gamma(",
          "232:         [30, 3, 2], seed=[12, 34], alpha=alpha, beta=beta)))",
          "233:   dloss_dalpha, dloss_dbeta = tape.gradient(loss, [alpha, beta])",
          "234:   # unbiased stochastic derivatives of the loss function",
          "235:   alpha.shape == dloss_dalpha.shape  # True",
          "236:   beta.shape == dloss_dbeta.shape  # True",
          "237:   ```",
          "239:   Args:",
          "240:     shape: A 1-D integer Tensor or Python array. The shape of the output tensor.",
          "241:     seed: A shape [2] integer Tensor of seeds to the random number generator.",
          "242:     alpha: Tensor. The concentration parameter of the gamma distribution. Must",
          "243:       be broadcastable with `beta`, and broadcastable with the rightmost",
          "244:       dimensions of `shape`.",
          "245:     beta: Tensor. The inverse scale parameter of the gamma distribution. Must be",
          "246:       broadcastable with `alpha` and broadcastable with the rightmost dimensions",
          "247:       of `shape`.",
          "248:     dtype: Floating point dtype of `alpha`, `beta`, and the output.",
          "249:     name: A name for the operation (optional).",
          "251:   Returns:",
          "252:     samples: A Tensor of the specified shape filled with random gamma values.",
          "253:       For each i, each `samples[..., i] is an independent draw from the gamma",
          "254:       distribution with concentration alpha[i] and scale beta[i].",
          "256:   \"\"\"",
          "257:   with ops.name_scope(name, \"stateless_random_gamma\",",
          "258:                       [shape, seed, alpha, beta]) as name:",
          "259:     shape = tensor_util.shape_tensor(shape)",
          "260:     alpha = ops.convert_to_tensor(alpha, dtype=dtype, name=\"alpha\")",
          "261:     beta = ops.convert_to_tensor(",
          "262:         beta if beta is not None else 1, name=\"beta\", dtype=dtype)",
          "263:     broadcast_shape = array_ops.broadcast_dynamic_shape(",
          "264:         array_ops.shape(alpha), array_ops.shape(beta))",
          "265:     alpha_broadcast = array_ops.broadcast_to(alpha, broadcast_shape)",
          "266:     result = math_ops.maximum(",
          "267:         np.finfo(alpha.dtype.as_numpy_dtype).tiny,",
          "268:         gen_stateless_random_ops.stateless_random_gamma_v2(",
          "269:             shape, seed=seed, alpha=alpha_broadcast) / beta)",
          "270:     tensor_util.maybe_set_static_shape(result, shape)",
          "271:     return result",
          "",
          "---------------"
        ],
        "tensorflow/tools/api/golden/v1/tensorflow.random.pbtxt||tensorflow/tools/api/golden/v1/tensorflow.random.pbtxt": [
          "File: tensorflow/tools/api/golden/v1/tensorflow.random.pbtxt -> tensorflow/tools/api/golden/v1/tensorflow.random.pbtxt",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:     name: \"stateless_categorical\"",
          "81:     argspec: \"args=[\\'logits\\', \\'num_samples\\', \\'seed\\', \\'dtype\\', \\'name\\'], varargs=None, keywords=None, defaults=[\\\"<dtype: \\'int64\\'>\\\", \\'None\\'], \"",
          "82:   }",
          "83:   member_method {",
          "84:     name: \"stateless_multinomial\"",
          "85:     argspec: \"args=[\\'logits\\', \\'num_samples\\', \\'seed\\', \\'output_dtype\\', \\'name\\'], varargs=None, keywords=None, defaults=[\\\"<dtype: \\'int64\\'>\\\", \\'None\\'], \"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:   member_method {",
          "84:     name: \"stateless_gamma\"",
          "85:     argspec: \"args=[\\'shape\\', \\'seed\\', \\'alpha\\', \\'beta\\', \\'dtype\\', \\'name\\'], varargs=None, keywords=None, defaults=[\\'None\\', \\\"<dtype: \\'float32\\'>\\\", \\'None\\'], \"",
          "86:   }",
          "",
          "---------------"
        ],
        "tensorflow/tools/api/golden/v1/tensorflow.raw_ops.pbtxt||tensorflow/tools/api/golden/v1/tensorflow.raw_ops.pbtxt": [
          "File: tensorflow/tools/api/golden/v1/tensorflow.raw_ops.pbtxt -> tensorflow/tools/api/golden/v1/tensorflow.raw_ops.pbtxt",
          "--- Hunk 1 ---",
          "[Context before]",
          "4284:     name: \"StatelessRandomBinomial\"",
          "4285:     argspec: \"args=[\\'shape\\', \\'seed\\', \\'counts\\', \\'probs\\', \\'dtype\\', \\'name\\'], varargs=None, keywords=None, defaults=[\\\"<dtype: \\'int64\\'>\\\", \\'None\\'], \"",
          "4286:   }",
          "4287:   member_method {",
          "4288:     name: \"StatelessRandomNormal\"",
          "4289:     argspec: \"args=[\\'shape\\', \\'seed\\', \\'dtype\\', \\'name\\'], varargs=None, keywords=None, defaults=[\\\"<dtype: \\'float32\\'>\\\", \\'None\\'], \"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4287:   member_method {",
          "4288:     name: \"StatelessRandomGammaV2\"",
          "4289:     argspec: \"args=[\\'shape\\', \\'seed\\', \\'alpha\\', \\'name\\'], varargs=None, keywords=None, defaults=[\\'None\\'], \"",
          "4290:   }",
          "",
          "---------------"
        ],
        "tensorflow/tools/api/golden/v2/tensorflow.random.pbtxt||tensorflow/tools/api/golden/v2/tensorflow.random.pbtxt": [
          "File: tensorflow/tools/api/golden/v2/tensorflow.random.pbtxt -> tensorflow/tools/api/golden/v2/tensorflow.random.pbtxt",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:     name: \"stateless_categorical\"",
          "73:     argspec: \"args=[\\'logits\\', \\'num_samples\\', \\'seed\\', \\'dtype\\', \\'name\\'], varargs=None, keywords=None, defaults=[\\\"<dtype: \\'int64\\'>\\\", \\'None\\'], \"",
          "74:   }",
          "75:   member_method {",
          "76:     name: \"stateless_normal\"",
          "77:     argspec: \"args=[\\'shape\\', \\'seed\\', \\'mean\\', \\'stddev\\', \\'dtype\\', \\'name\\'], varargs=None, keywords=None, defaults=[\\'0.0\\', \\'1.0\\', \\\"<dtype: \\'float32\\'>\\\", \\'None\\'], \"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75:   member_method {",
          "76:     name: \"stateless_gamma\"",
          "77:     argspec: \"args=[\\'shape\\', \\'seed\\', \\'alpha\\', \\'beta\\', \\'dtype\\', \\'name\\'], varargs=None, keywords=None, defaults=[\\'None\\', \\\"<dtype: \\'float32\\'>\\\", \\'None\\'], \"",
          "78:   }",
          "",
          "---------------"
        ],
        "tensorflow/tools/api/golden/v2/tensorflow.raw_ops.pbtxt||tensorflow/tools/api/golden/v2/tensorflow.raw_ops.pbtxt": [
          "File: tensorflow/tools/api/golden/v2/tensorflow.raw_ops.pbtxt -> tensorflow/tools/api/golden/v2/tensorflow.raw_ops.pbtxt",
          "--- Hunk 1 ---",
          "[Context before]",
          "4284:     name: \"StatelessRandomBinomial\"",
          "4285:     argspec: \"args=[\\'shape\\', \\'seed\\', \\'counts\\', \\'probs\\', \\'dtype\\', \\'name\\'], varargs=None, keywords=None, defaults=[\\\"<dtype: \\'int64\\'>\\\", \\'None\\'], \"",
          "4286:   }",
          "4287:   member_method {",
          "4288:     name: \"StatelessRandomNormal\"",
          "4289:     argspec: \"args=[\\'shape\\', \\'seed\\', \\'dtype\\', \\'name\\'], varargs=None, keywords=None, defaults=[\\\"<dtype: \\'float32\\'>\\\", \\'None\\'], \"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4287:   member_method {",
          "4288:     name: \"StatelessRandomGammaV2\"",
          "4289:     argspec: \"args=[\\'shape\\', \\'seed\\', \\'alpha\\', \\'name\\'], varargs=None, keywords=None, defaults=[\\'None\\'], \"",
          "4290:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1740085f238d49cfa6e49b0c6bdb2383e9ffec1c",
      "candidate_info": {
        "commit_hash": "1740085f238d49cfa6e49b0c6bdb2383e9ffec1c",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/1740085f238d49cfa6e49b0c6bdb2383e9ffec1c",
        "files": [
          "tensorflow/core/kernels/boosted_trees/prediction_ops.cc",
          "tensorflow/core/kernels/nth_element_op.cc",
          "tensorflow/core/kernels/parameterized_truncated_normal_op.cc",
          "tensorflow/core/kernels/random_binomial_op.cc",
          "tensorflow/core/kernels/random_poisson_op.cc",
          "tensorflow/core/kernels/topk_op.cc"
        ],
        "message": "Prevent integer truncation from 64 to 32 bits.\n\nThe `tensorflow::Shard` functions last argument must be a 2 argument function where both arguments are `int64` (`long long`, 64 bits). However, there are usages where code passes in a function where arguments are `int` or `int32` (32 bits). In these cases, it is possible that the integer truncation would later cause a segfault or other unexpected behavior.\n\nPiperOrigin-RevId: 332560414\nChange-Id: Ief649406babc8d4f60b3e7a9d573cbcc5ce5b767",
        "before_after_code_files": [
          "tensorflow/core/kernels/boosted_trees/prediction_ops.cc||tensorflow/core/kernels/boosted_trees/prediction_ops.cc",
          "tensorflow/core/kernels/nth_element_op.cc||tensorflow/core/kernels/nth_element_op.cc",
          "tensorflow/core/kernels/parameterized_truncated_normal_op.cc||tensorflow/core/kernels/parameterized_truncated_normal_op.cc",
          "tensorflow/core/kernels/random_binomial_op.cc||tensorflow/core/kernels/random_binomial_op.cc",
          "tensorflow/core/kernels/random_poisson_op.cc||tensorflow/core/kernels/random_poisson_op.cc",
          "tensorflow/core/kernels/topk_op.cc||tensorflow/core/kernels/topk_op.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/boosted_trees/prediction_ops.cc||tensorflow/core/kernels/boosted_trees/prediction_ops.cc",
            "tensorflow/core/kernels/nth_element_op.cc||tensorflow/core/kernels/nth_element_op.cc",
            "tensorflow/core/kernels/parameterized_truncated_normal_op.cc||tensorflow/core/kernels/parameterized_truncated_normal_op.cc",
            "tensorflow/core/kernels/random_binomial_op.cc||tensorflow/core/kernels/random_binomial_op.cc",
            "tensorflow/core/kernels/random_poisson_op.cc||tensorflow/core/kernels/random_poisson_op.cc",
            "tensorflow/core/kernels/topk_op.cc||tensorflow/core/kernels/topk_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/boosted_trees/prediction_ops.cc||tensorflow/core/kernels/boosted_trees/prediction_ops.cc",
            "tensorflow/core/kernels/nth_element_op.cc||tensorflow/core/kernels/nth_element_op.cc",
            "tensorflow/core/kernels/parameterized_truncated_normal_op.cc||tensorflow/core/kernels/parameterized_truncated_normal_op.cc",
            "tensorflow/core/kernels/random_binomial_op.cc||tensorflow/core/kernels/random_binomial_op.cc",
            "tensorflow/core/kernels/random_poisson_op.cc||tensorflow/core/kernels/random_poisson_op.cc",
            "tensorflow/core/kernels/topk_op.cc||tensorflow/core/kernels/topk_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/boosted_trees/prediction_ops.cc||tensorflow/core/kernels/boosted_trees/prediction_ops.cc": [
          "File: tensorflow/core/kernels/boosted_trees/prediction_ops.cc -> tensorflow/core/kernels/boosted_trees/prediction_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:       auto do_work = [&resource, &bucketized_features, &cached_tree_ids,",
          "122:                       &cached_node_ids, &output_partial_logits,",
          "123:                       &output_node_ids, latest_tree,",
          "125:         for (int32 i = start; i < end; ++i) {",
          "126:           int32 tree_id = cached_tree_ids(i);",
          "127:           int32 node_id = cached_node_ids(i);",
          "",
          "[Removed Lines]",
          "124:                       this](int32 start, int32 end) {",
          "",
          "[Added Lines]",
          "124:                       this](int64 start, int64 end) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "238:     const int32 last_tree = resource->num_trees() - 1;",
          "239:     auto do_work = [&resource, &bucketized_features, &output_logits, last_tree,",
          "241:       for (int32 i = start; i < end; ++i) {",
          "242:         std::vector<float> tree_logits(logits_dimension_, 0.0);",
          "243:         int32 tree_id = 0;",
          "",
          "[Removed Lines]",
          "240:                     this](int32 start, int32 end) {",
          "",
          "[Added Lines]",
          "240:                     this](int64 start, int64 end) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "342:     auto do_work = [&resource, &bucketized_features, &output_debug_info,",
          "344:       for (int32 i = start; i < end; ++i) {",
          "346:         boosted_trees::DebugOutput example_debug_info;",
          "",
          "[Removed Lines]",
          "343:                     last_tree](int32 start, int32 end) {",
          "",
          "[Added Lines]",
          "343:                     last_tree](int64 start, int64 end) {",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/nth_element_op.cc||tensorflow/core/kernels/nth_element_op.cc": [
          "File: tensorflow/core/kernels/nth_element_op.cc -> tensorflow/core/kernels/nth_element_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:     const int last_dim = input_tensor.dim_size(input_tensor.dims() - 1);",
          "100:       std::vector<T> buf(last_dim);",
          "",
          "[Removed Lines]",
          "98:     auto SubNthElement = [&, input, output, last_dim, n](int start, int limit) {",
          "",
          "[Added Lines]",
          "98:     auto SubNthElement = [&, input, output, last_dim, n](int64 start,",
          "99:                                                          int64 limit) {",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/parameterized_truncated_normal_op.cc||tensorflow/core/kernels/parameterized_truncated_normal_op.cc": [
          "File: tensorflow/core/kernels/parameterized_truncated_normal_op.cc -> tensorflow/core/kernels/parameterized_truncated_normal_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:     auto DoWork = [samples_per_batch, num_elements, &ctx, &means, &stddevs,",
          "71:                    &minvals, &maxvals, &gen, &output,",
          "",
          "[Removed Lines]",
          "72:                    kStdDevsInsideBoundsToUseRandnSampler](int start_batch,",
          "73:                                                           int limit_batch) {",
          "",
          "[Added Lines]",
          "72:                    kStdDevsInsideBoundsToUseRandnSampler](int64 start_batch,",
          "73:                                                           int64 limit_batch) {",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/random_binomial_op.cc||tensorflow/core/kernels/random_binomial_op.cc": [
          "File: tensorflow/core/kernels/random_binomial_op.cc -> tensorflow/core/kernels/random_binomial_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:     auto worker_threads = *(ctx->device()->tensorflow_cpu_worker_threads());",
          "178:     auto DoWork = [samples_per_batch, num_elements, &counts, &probs, &gen,",
          "",
          "[Removed Lines]",
          "179:                    &output](int start_batch, int limit_batch) {",
          "",
          "[Added Lines]",
          "179:                    &output](int64 start_batch, int64 limit_batch) {",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/random_poisson_op.cc||tensorflow/core/kernels/random_poisson_op.cc": [
          "File: tensorflow/core/kernels/random_poisson_op.cc -> tensorflow/core/kernels/random_poisson_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:     typedef random::UniformDistribution<random::PhiloxRandom, CT> Uniform;",
          "105:     auto DoWork = [num_samples, num_rate, &rng, samples_flat, rate_flat](",
          "",
          "[Removed Lines]",
          "106:                       int start_output, int limit_output) {",
          "",
          "[Added Lines]",
          "106:                       int64 start_output, int64 limit_output) {",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/topk_op.cc||tensorflow/core/kernels/topk_op.cc": [
          "File: tensorflow/core/kernels/topk_op.cc -> tensorflow/core/kernels/topk_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:       return Status::OK();",
          "137:     }",
          "140:       for (int32 b = start_batch; b < limit_batch; ++b) {",
          "141:         const T* input_data = &input(b, 0);",
          "142:         const auto stable_comp = [input_data](const int32 a, const int32 b) {",
          "",
          "[Removed Lines]",
          "139:     auto SortIndices = [&](int start_batch, int limit_batch) {",
          "",
          "[Added Lines]",
          "139:     auto SortIndices = [&](int64 start_batch, int64 limit_batch) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ce7a81fd99b3febd44ad7c1603ae9d2f244727ba",
      "candidate_info": {
        "commit_hash": "ce7a81fd99b3febd44ad7c1603ae9d2f244727ba",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/ce7a81fd99b3febd44ad7c1603ae9d2f244727ba",
        "files": [
          "tensorflow/core/kernels/boosted_trees/prediction_ops.cc",
          "tensorflow/core/kernels/nth_element_op.cc",
          "tensorflow/core/kernels/parameterized_truncated_normal_op.cc",
          "tensorflow/core/kernels/random_binomial_op.cc",
          "tensorflow/core/kernels/random_poisson_op.cc",
          "tensorflow/core/kernels/topk_op.cc"
        ],
        "message": "Prevent integer truncation from 64 to 32 bits.\n\nThe `tensorflow::Shard` functions last argument must be a 2 argument function where both arguments are `int64` (`long long`, 64 bits). However, there are usages where code passes in a function where arguments are `int` or `int32` (32 bits). In these cases, it is possible that the integer truncation would later cause a segfault or other unexpected behavior.\n\nPiperOrigin-RevId: 332560414\nChange-Id: Ief649406babc8d4f60b3e7a9d573cbcc5ce5b767",
        "before_after_code_files": [
          "tensorflow/core/kernels/boosted_trees/prediction_ops.cc||tensorflow/core/kernels/boosted_trees/prediction_ops.cc",
          "tensorflow/core/kernels/nth_element_op.cc||tensorflow/core/kernels/nth_element_op.cc",
          "tensorflow/core/kernels/parameterized_truncated_normal_op.cc||tensorflow/core/kernels/parameterized_truncated_normal_op.cc",
          "tensorflow/core/kernels/random_binomial_op.cc||tensorflow/core/kernels/random_binomial_op.cc",
          "tensorflow/core/kernels/random_poisson_op.cc||tensorflow/core/kernels/random_poisson_op.cc",
          "tensorflow/core/kernels/topk_op.cc||tensorflow/core/kernels/topk_op.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/boosted_trees/prediction_ops.cc||tensorflow/core/kernels/boosted_trees/prediction_ops.cc",
            "tensorflow/core/kernels/nth_element_op.cc||tensorflow/core/kernels/nth_element_op.cc",
            "tensorflow/core/kernels/parameterized_truncated_normal_op.cc||tensorflow/core/kernels/parameterized_truncated_normal_op.cc",
            "tensorflow/core/kernels/random_binomial_op.cc||tensorflow/core/kernels/random_binomial_op.cc",
            "tensorflow/core/kernels/random_poisson_op.cc||tensorflow/core/kernels/random_poisson_op.cc",
            "tensorflow/core/kernels/topk_op.cc||tensorflow/core/kernels/topk_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/boosted_trees/prediction_ops.cc||tensorflow/core/kernels/boosted_trees/prediction_ops.cc",
            "tensorflow/core/kernels/nth_element_op.cc||tensorflow/core/kernels/nth_element_op.cc",
            "tensorflow/core/kernels/parameterized_truncated_normal_op.cc||tensorflow/core/kernels/parameterized_truncated_normal_op.cc",
            "tensorflow/core/kernels/random_binomial_op.cc||tensorflow/core/kernels/random_binomial_op.cc",
            "tensorflow/core/kernels/random_poisson_op.cc||tensorflow/core/kernels/random_poisson_op.cc",
            "tensorflow/core/kernels/topk_op.cc||tensorflow/core/kernels/topk_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/boosted_trees/prediction_ops.cc||tensorflow/core/kernels/boosted_trees/prediction_ops.cc": [
          "File: tensorflow/core/kernels/boosted_trees/prediction_ops.cc -> tensorflow/core/kernels/boosted_trees/prediction_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:       auto do_work = [&resource, &batch_bucketized_features, &cached_tree_ids,",
          "110:                       &cached_node_ids, &output_partial_logits,",
          "111:                       &output_node_ids, latest_tree,",
          "113:         for (int32 i = start; i < end; ++i) {",
          "114:           int32 tree_id = cached_tree_ids(i);",
          "115:           int32 node_id = cached_node_ids(i);",
          "",
          "[Removed Lines]",
          "112:                       this](int32 start, int32 end) {",
          "",
          "[Added Lines]",
          "112:                       this](int64 start, int64 end) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:     const int32 last_tree = resource->num_trees() - 1;",
          "229:     auto do_work = [&resource, &batch_bucketized_features, &output_logits,",
          "231:       for (int32 i = start; i < end; ++i) {",
          "232:         std::vector<float> tree_logits(logits_dimension_, 0.0);",
          "233:         int32 tree_id = 0;",
          "",
          "[Removed Lines]",
          "230:                     last_tree, this](int32 start, int32 end) {",
          "",
          "[Added Lines]",
          "230:                     last_tree, this](int64 start, int64 end) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "334:     auto do_work = [&resource, &batch_bucketized_features, &output_debug_info,",
          "336:       for (int32 i = start; i < end; ++i) {",
          "338:         boosted_trees::DebugOutput example_debug_info;",
          "",
          "[Removed Lines]",
          "335:                     last_tree](int32 start, int32 end) {",
          "",
          "[Added Lines]",
          "335:                     last_tree](int64 start, int64 end) {",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/nth_element_op.cc||tensorflow/core/kernels/nth_element_op.cc": [
          "File: tensorflow/core/kernels/nth_element_op.cc -> tensorflow/core/kernels/nth_element_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:     const int last_dim = input_tensor.dim_size(input_tensor.dims() - 1);",
          "100:       std::vector<T> buf(last_dim);",
          "",
          "[Removed Lines]",
          "98:     auto SubNthElement = [&, input, output, last_dim, n](int start, int limit) {",
          "",
          "[Added Lines]",
          "98:     auto SubNthElement = [&, input, output, last_dim, n](int64 start,",
          "99:                                                          int64 limit) {",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/parameterized_truncated_normal_op.cc||tensorflow/core/kernels/parameterized_truncated_normal_op.cc": [
          "File: tensorflow/core/kernels/parameterized_truncated_normal_op.cc -> tensorflow/core/kernels/parameterized_truncated_normal_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:     auto DoWork = [samples_per_batch, num_elements, &ctx, &means, &stddevs,",
          "71:                    &minvals, &maxvals, &gen, &output,",
          "",
          "[Removed Lines]",
          "72:                    kStdDevsInsideBoundsToUseRandnSampler](int start_batch,",
          "73:                                                           int limit_batch) {",
          "",
          "[Added Lines]",
          "72:                    kStdDevsInsideBoundsToUseRandnSampler](int64 start_batch,",
          "73:                                                           int64 limit_batch) {",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/random_binomial_op.cc||tensorflow/core/kernels/random_binomial_op.cc": [
          "File: tensorflow/core/kernels/random_binomial_op.cc -> tensorflow/core/kernels/random_binomial_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:     auto worker_threads = *(ctx->device()->tensorflow_cpu_worker_threads());",
          "178:     auto DoWork = [samples_per_batch, num_elements, &counts, &probs, &gen,",
          "",
          "[Removed Lines]",
          "179:                    &output](int start_batch, int limit_batch) {",
          "",
          "[Added Lines]",
          "179:                    &output](int64 start_batch, int64 limit_batch) {",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/random_poisson_op.cc||tensorflow/core/kernels/random_poisson_op.cc": [
          "File: tensorflow/core/kernels/random_poisson_op.cc -> tensorflow/core/kernels/random_poisson_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:     typedef random::UniformDistribution<random::PhiloxRandom, CT> Uniform;",
          "105:     auto DoWork = [num_samples, num_rate, &rng, samples_flat, rate_flat](",
          "",
          "[Removed Lines]",
          "106:                       int start_output, int limit_output) {",
          "",
          "[Added Lines]",
          "106:                       int64 start_output, int64 limit_output) {",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/topk_op.cc||tensorflow/core/kernels/topk_op.cc": [
          "File: tensorflow/core/kernels/topk_op.cc -> tensorflow/core/kernels/topk_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:       return Status::OK();",
          "137:     }",
          "140:       for (int32 b = start_batch; b < limit_batch; ++b) {",
          "141:         const T* input_data = &input(b, 0);",
          "142:         const auto stable_comp = [input_data](const int32 a, const int32 b) {",
          "",
          "[Removed Lines]",
          "139:     auto SortIndices = [&](int start_batch, int limit_batch) {",
          "",
          "[Added Lines]",
          "139:     auto SortIndices = [&](int64 start_batch, int64 limit_batch) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}