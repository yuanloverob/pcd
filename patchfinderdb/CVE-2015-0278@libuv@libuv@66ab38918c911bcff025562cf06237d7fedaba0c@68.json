{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cb1cc25430b3340f80172b8daca6f3d379889a01",
      "candidate_info": {
        "commit_hash": "cb1cc25430b3340f80172b8daca6f3d379889a01",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/cb1cc25430b3340f80172b8daca6f3d379889a01",
        "files": [
          "test/test-list.h"
        ],
        "message": "test: fix build on windows\n\ndisable spawn_fs_open",
        "before_after_code_files": [
          "test/test-list.h||test/test-list.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/test-list.h||test/test-list.h": [
          "File: test/test-list.h -> test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "155: TEST_DECLARE   (fail_always)",
          "156: TEST_DECLARE   (pass_always)",
          "157: TEST_DECLARE   (spawn_fails)",
          "159: TEST_DECLARE   (spawn_exit_code)",
          "160: TEST_DECLARE   (spawn_stdout)",
          "161: TEST_DECLARE   (spawn_stdin)",
          "",
          "[Removed Lines]",
          "158: TEST_DECLARE   (spawn_fs_open)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "226: TEST_DECLARE   (ip6_addr_link_local)",
          "227: #ifdef _WIN32",
          "228: TEST_DECLARE   (spawn_detect_pipe_name_collisions_on_windows)",
          "229: TEST_DECLARE   (argument_escaping)",
          "230: TEST_DECLARE   (environment_creation)",
          "231: TEST_DECLARE   (listen_with_simultaneous_accepts)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "228: TEST_DECLARE   (spawn_fs_open)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "446:   TEST_ENTRY  (poll_close)",
          "448:   TEST_ENTRY  (spawn_fails)",
          "450:   TEST_ENTRY  (spawn_exit_code)",
          "451:   TEST_ENTRY  (spawn_stdout)",
          "452:   TEST_ENTRY  (spawn_stdin)",
          "",
          "[Removed Lines]",
          "449:   TEST_ENTRY  (spawn_fs_open)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "468: #ifdef _WIN32",
          "469:   TEST_ENTRY  (spawn_detect_pipe_name_collisions_on_windows)",
          "470:   TEST_ENTRY  (argument_escaping)",
          "471:   TEST_ENTRY  (environment_creation)",
          "472:   TEST_ENTRY  (listen_with_simultaneous_accepts)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "469:   TEST_ENTRY  (spawn_fs_open)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b647c27b02fdb549537c4de9a4ab044f7bda72ba",
      "candidate_info": {
        "commit_hash": "b647c27b02fdb549537c4de9a4ab044f7bda72ba",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/b647c27b02fdb549537c4de9a4ab044f7bda72ba",
        "files": [
          "src/win/winapi.h"
        ],
        "message": "windows: fix mingw build\n\nOn older mingw installations, DEVICE_TYPE isn't defined. This was\nredefined in windows.h, but it was done after it was already attempted\nto be used. This moves the #define for DEVICE_TYPE above the usage of\nit in windows.h to prevent compilation failures.",
        "before_after_code_files": [
          "src/win/winapi.h||src/win/winapi.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/winapi.h||src/win/winapi.h": [
          "File: src/win/winapi.h -> src/win/winapi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4104: # define JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE          0x00002000",
          "4105: #endif",
          "4109: #if defined(_MSC_VER) || defined(__MINGW64_VERSION_MAJOR)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4107: #ifndef DEVICE_TYPE",
          "4108: # define DEVICE_TYPE DWORD",
          "4109: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4383: # define SystemProcessorPerformanceInformation 8",
          "4384: #endif",
          "4390: #ifndef FILE_DEVICE_FILE_SYSTEM",
          "4391: # define FILE_DEVICE_FILE_SYSTEM 0x00000009",
          "4392: #endif",
          "",
          "[Removed Lines]",
          "4386: #ifndef DEVICE_TYPE",
          "4387: # define DEVICE_TYPE DWORD",
          "4388: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "08cafd091ba408cc339a9ea20a60260ac582f091",
      "candidate_info": {
        "commit_hash": "08cafd091ba408cc339a9ea20a60260ac582f091",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/08cafd091ba408cc339a9ea20a60260ac582f091",
        "files": [
          "src/unix/stream.c"
        ],
        "message": "stream: fix uv__stream_osx_select\n\nRelying on `readable`/`writable` when polling will lead to the select\nthread spinning in the loop and calling `uv_async_send()`, because\nstream may never become not `readable`/`writable`.\n\nWe should rely on `uv__io_active()` instead and interruprt select thread\nevery time it changes.",
        "before_after_code_files": [
          "src/unix/stream.c||src/unix/stream.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/stream.c||src/unix/stream.c": [
          "File: src/unix/stream.c -> src/unix/stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "168:     FD_ZERO(&sread);",
          "169:     FD_ZERO(&swrite);",
          "172:       FD_SET(fd, &sread);",
          "174:       FD_SET(fd, &swrite);",
          "175:     FD_SET(s->int_fd, &sread);",
          "",
          "[Removed Lines]",
          "171:     if (uv_is_readable(stream))",
          "173:     if (uv_is_writable(stream))",
          "",
          "[Added Lines]",
          "171:     if (uv__io_active(&stream->io_watcher, UV__POLLIN))",
          "173:     if (uv__io_active(&stream->io_watcher, UV__POLLOUT))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "232: static void uv__stream_osx_interrupt_select(uv_stream_t* stream) {",
          "234:   uv__stream_select_t* s;",
          "235:   int r;",
          "237:   s = stream->select;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "233: #if defined(__APPLE__)",
          "239:   if (s == NULL)",
          "240:     return;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "623:   assert(QUEUE_EMPTY(&stream->write_queue));",
          "624:   uv__io_stop(stream->loop, &stream->io_watcher, UV__POLLOUT);",
          "627:   if ((stream->flags & UV_STREAM_SHUTTING) &&",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "631:   uv__stream_osx_interrupt_select(stream);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "802:       uv__io_stop(stream->loop, &stream->io_watcher, UV__POLLOUT);",
          "803:       if (!uv__io_active(&stream->io_watcher, UV__POLLIN))",
          "804:         uv__handle_stop(stream);",
          "805:       return;",
          "806:     } else if (stream->flags & UV_STREAM_BLOCKING) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "812:       uv__stream_osx_interrupt_select(stream);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "865:   uv__io_start(stream->loop, &stream->io_watcher, UV__POLLOUT);",
          "866: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "876:   uv__stream_osx_interrupt_select(stream);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "947:   uv__io_stop(stream->loop, &stream->io_watcher, UV__POLLIN);",
          "948:   if (!uv__io_active(&stream->io_watcher, UV__POLLOUT))",
          "949:     uv__handle_stop(stream);",
          "950:   uv__stream_read_cb(stream, UV_EOF, buf, UV_UNKNOWN_HANDLE);",
          "951: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "961:   uv__stream_osx_interrupt_select(stream);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1014:         if (stream->flags & UV_STREAM_READING) {",
          "1015:           uv__io_start(stream->loop, &stream->io_watcher, UV__POLLIN);",
          "1016:         }",
          "1017:         uv__stream_read_cb(stream, 0, &buf, UV_UNKNOWN_HANDLE);",
          "1018:       } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1028:           uv__stream_osx_interrupt_select(stream);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1105:   stream->flags |= UV_STREAM_SHUTTING;",
          "1107:   uv__io_start(stream->loop, &stream->io_watcher, UV__POLLOUT);",
          "1109:   return 0;",
          "1110: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1121:   uv__stream_osx_interrupt_select(stream);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1282:     assert(!(stream->flags & UV_STREAM_BLOCKING));",
          "1283:     uv__io_start(stream->loop, &stream->io_watcher, UV__POLLOUT);",
          "1284:   }",
          "1286:   return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1298:     uv__stream_osx_interrupt_select(stream);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1341:   req.bufs = NULL;",
          "1345:     uv__io_stop(stream->loop, &stream->io_watcher, UV__POLLOUT);",
          "1347:   return (int) written;",
          "1348: }",
          "",
          "[Removed Lines]",
          "1344:   if (!has_pollout)",
          "",
          "[Added Lines]",
          "1359:   if (!has_pollout) {",
          "1361:     uv__stream_osx_interrupt_select(stream);",
          "1362:   }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1364:   stream->flags |= UV_STREAM_READING;",
          "",
          "[Removed Lines]",
          "1366: #if defined(__APPLE__)",
          "1368:   if (stream->select != NULL)",
          "1369:     uv__stream_osx_interrupt_select(stream);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1383:   uv__io_start(stream->loop, &stream->io_watcher, UV__POLLIN);",
          "1384:   uv__handle_start(stream);",
          "1386:   return 0;",
          "1387: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1396:   uv__stream_osx_interrupt_select(stream);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1414:   uv__io_stop(stream->loop, &stream->io_watcher, UV__POLLIN);",
          "1415:   if (!uv__io_active(&stream->io_watcher, UV__POLLOUT))",
          "1416:     uv__handle_stop(stream);",
          "1424:   stream->read_cb = NULL;",
          "1425:   stream->read2_cb = NULL;",
          "",
          "[Removed Lines]",
          "1418: #if defined(__APPLE__)",
          "1420:   if (stream->select != NULL)",
          "1421:     uv__stream_osx_interrupt_select(stream);",
          "",
          "[Added Lines]",
          "1429:   uv__stream_osx_interrupt_select(stream);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b870d914ebbcec2f0124dda6f96e47cdd4abd7d3",
      "candidate_info": {
        "commit_hash": "b870d914ebbcec2f0124dda6f96e47cdd4abd7d3",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/b870d914ebbcec2f0124dda6f96e47cdd4abd7d3",
        "files": [
          "configure.ac"
        ],
        "message": "build: fix configure when PKG_CONFIG is set\n\nIf you define the environment variable PKG_CONFIG and assign it to\npkgconf (or pkg-config), configure will say it's OK, but it won't be\nused.",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: AM_CONDITIONAL([WINNT],   [AS_CASE([$host_os], [mingw*],   [true], [false])])",
          "48: PANDORA_ENABLE_DTRACE",
          "49: AC_CHECK_PROG(PKG_CONFIG, pkg-config, yes)",
          "52:     AC_CONFIG_FILES([libuv.pc])",
          "53: ])",
          "54: AC_CONFIG_FILES([Makefile])",
          "",
          "[Removed Lines]",
          "50: AM_CONDITIONAL([HAVE_PKG_CONFIG], [test \"x$PKG_CONFIG\" = \"xyes\"])",
          "51: AS_IF([test \"x$PKG_CONFIG\" = \"xyes\"], [",
          "",
          "[Added Lines]",
          "50: AM_CONDITIONAL([HAVE_PKG_CONFIG], [test \"x$PKG_CONFIG\" != \"x\"])",
          "51: AS_IF([test \"x$PKG_CONFIG\" != \"x\"], [",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "63cd99eddcb114f192955f8a9593e73ff4f71ce5",
      "candidate_info": {
        "commit_hash": "63cd99eddcb114f192955f8a9593e73ff4f71ce5",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/63cd99eddcb114f192955f8a9593e73ff4f71ce5",
        "files": [
          "src/win/error.c",
          "src/win/handle.c",
          "src/win/thread.c",
          "src/win/tty.c",
          "src/win/udp.c"
        ],
        "message": "windows: add stdlib.h to satisfy reference to abort",
        "before_after_code_files": [
          "src/win/error.c||src/win/error.c",
          "src/win/handle.c||src/win/handle.c",
          "src/win/thread.c||src/win/thread.c",
          "src/win/tty.c||src/win/tty.c",
          "src/win/udp.c||src/win/udp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/error.c||src/win/error.c": [
          "File: src/win/error.c -> src/win/error.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include <malloc.h>",
          "25: #include <stdio.h>",
          "26: #include <string.h>",
          "28: #include \"uv.h\"",
          "29: #include \"internal.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #include <stdlib.h>",
          "",
          "---------------"
        ],
        "src/win/handle.c||src/win/handle.c": [
          "File: src/win/handle.c -> src/win/handle.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <assert.h>",
          "23: #include <io.h>",
          "25: #include \"uv.h\"",
          "26: #include \"internal.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #include <stdlib.h>",
          "",
          "---------------"
        ],
        "src/win/thread.c||src/win/thread.c": [
          "File: src/win/thread.c -> src/win/thread.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <assert.h>",
          "23: #include <limits.h>",
          "25: #include \"uv.h\"",
          "26: #include \"internal.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #include <stdlib.h>",
          "",
          "---------------"
        ],
        "src/win/tty.c||src/win/tty.c": [
          "File: src/win/tty.c -> src/win/tty.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <assert.h>",
          "23: #include <io.h>",
          "24: #include <string.h>",
          "26: #if defined(_MSC_VER) && _MSC_VER < 1600",
          "27: # include \"stdint-msvc2008.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #include <stdlib.h>",
          "",
          "---------------"
        ],
        "src/win/udp.c||src/win/udp.c": [
          "File: src/win/udp.c -> src/win/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <assert.h>",
          "24: #include \"uv.h\"",
          "25: #include \"internal.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include <stdlib.h>",
          "",
          "---------------"
        ]
      }
    }
  ]
}