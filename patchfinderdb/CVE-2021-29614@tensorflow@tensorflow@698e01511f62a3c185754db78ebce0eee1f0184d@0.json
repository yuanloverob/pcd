{
  "cve_id": "CVE-2021-29614",
  "cve_desc": "TensorFlow is an end-to-end open source platform for machine learning. The implementation of `tf.io.decode_raw` produces incorrect results and crashes the Python interpreter when combining `fixed_length` and wider datatypes. The implementation of the padded version(https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc) is buggy due to a confusion about pointer arithmetic rules. First, the code computes(https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L61) the width of each output element by dividing the `fixed_length` value to the size of the type argument. The `fixed_length` argument is also used to determine the size needed for the output tensor(https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L63-L79). This is followed by reencoding code(https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L85-L94). The erroneous code is the last line above: it is moving the `out_data` pointer by `fixed_length * sizeof(T)` bytes whereas it only copied at most `fixed_length` bytes from the input. This results in parts of the input not being decoded into the output. Furthermore, because the pointer advance is far wider than desired, this quickly leads to writing to outside the bounds of the backing data. This OOB write leads to interpreter crash in the reproducer mentioned here, but more severe attacks can be mounted too, given that this gadget allows writing to periodically placed locations in memory. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "698e01511f62a3c185754db78ebce0eee1f0184d",
  "patch_info": {
    "commit_hash": "698e01511f62a3c185754db78ebce0eee1f0184d",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/698e01511f62a3c185754db78ebce0eee1f0184d",
    "files": [
      "tensorflow/core/kernels/decode_padded_raw_op.cc",
      "tensorflow/python/ops/parsing_ops.py"
    ],
    "message": "Fix `tf.io.decode_raw` bugs and update documentation.\n\nFixes cases where specifying `fixed_length` resulted in data loss and even segfault and corruption of the Python interpreter. The fix is subtle but needed due to pointer arithmetic rules.\n\nMakes sure that `fixed_length` does not change the output when present but not needed.\n\nEliminates needless copy and cast in the main codepath.\n\nPiperOrigin-RevId: 371322725\nChange-Id: I514ef67a2961c86422f69d05122d31615e87896c",
    "before_after_code_files": [
      "tensorflow/core/kernels/decode_padded_raw_op.cc||tensorflow/core/kernels/decode_padded_raw_op.cc",
      "tensorflow/python/ops/parsing_ops.py||tensorflow/python/ops/parsing_ops.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/decode_padded_raw_op.cc||tensorflow/core/kernels/decode_padded_raw_op.cc": [
      "File: tensorflow/core/kernels/decode_padded_raw_op.cc -> tensorflow/core/kernels/decode_padded_raw_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: #include \"tensorflow/core/framework/common_shape_fns.h\"",
      "20: #include \"tensorflow/core/framework/op.h\"",
      "21: #include \"tensorflow/core/framework/op_kernel.h\"",
      "22: #include \"tensorflow/core/framework/shape_inference.h\"",
      "24: namespace tensorflow {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: #include \"tensorflow/core/framework/op_requires.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "84:     if (!convert_data_endianness_ || sizeof(T) == 1) {",
      "85:       for (int64 i = 0; i < flat_in.size(); ++i) {",
      "94:       }",
      "95:     } else {",
      "",
      "[Removed Lines]",
      "86:         const T* in_data = reinterpret_cast<const T*>(flat_in(i).data());",
      "88:         if (flat_in(i).size() > fixed_length) {",
      "89:           memcpy(out_data, in_data, fixed_length);",
      "90:         } else {",
      "91:           memcpy(out_data, in_data, flat_in(i).size());",
      "92:         }",
      "93:         out_data += fixed_length;",
      "",
      "[Added Lines]",
      "87:         const auto to_copy =",
      "88:             std::min(flat_in(i).size(), static_cast<size_t>(fixed_length));",
      "89:         memcpy(out_data, flat_in(i).data(), to_copy);",
      "93:         out_data += width;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "105:              p_in += sizeof(T), p_out += sizeof(T)) {",
      "106:           std::reverse_copy(p_in, p_in + sizeof(T), p_out);",
      "107:         }",
      "109:       }",
      "110:     }",
      "111:   }",
      "",
      "[Removed Lines]",
      "108:         out_data += fixed_length;",
      "",
      "[Added Lines]",
      "111:         out_data += width;",
      "",
      "---------------"
    ],
    "tensorflow/python/ops/parsing_ops.py||tensorflow/python/ops/parsing_ops.py": [
      "File: tensorflow/python/ops/parsing_ops.py -> tensorflow/python/ops/parsing_ops.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "850:                name=None):",
      "851:   r\"\"\"Convert raw bytes from input tensor into numeric tensors.",
      "856:   >>> tf.io.decode_raw(tf.constant(\"1\"), tf.uint8)",
      "857:   <tf.Tensor: shape=(1,), dtype=uint8, numpy=array([49], dtype=uint8)>",
      "",
      "[Removed Lines]",
      "853:   The input tensor is interpreted as a sequence of bytes. These bytes are then",
      "854:   decoded as numbers in the format specified by `out_type`.",
      "",
      "[Added Lines]",
      "853:   Every component of the input tensor is interpreted as a sequence of bytes.",
      "854:   These bytes are then decoded as numbers in the format specified by `out_type`.",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "909:   >>> tf.io.decode_raw(tf.constant([\"1212\"]), tf.uint16, fixed_length=4)",
      "910:   <tf.Tensor: shape=(1, 2), dtype=uint16, numpy=array([[12849, 12849]], ...",
      "929:   Args:",
      "930:     input_bytes:",
      "",
      "[Removed Lines]",
      "912:   Note: There is currently a bug in `fixed_length` that can result in data loss:",
      "914:   >>> # truncated to length of type as it matches fixed_length",
      "915:   >>> tf.io.decode_raw(tf.constant([\"1212\"]), tf.uint16, fixed_length=2)",
      "916:   <tf.Tensor: shape=(1, 1), dtype=uint16, numpy=array([[12849]], dtype=uint16)>",
      "917:   >>> # ignores the second component",
      "918:   >>> tf.io.decode_raw(tf.constant([\"12\",\"34\"]), tf.uint16, fixed_length=2)",
      "919:   <tf.Tensor: shape=(2, 1), dtype=uint16, numpy=",
      "920:   array([[12849],",
      "921:          [    0]], dtype=uint16)>",
      "922:   >>> tf.io.decode_raw(tf.constant([\"12\",\"34\"]), tf.uint16, fixed_length=4)",
      "923:   <tf.Tensor: shape=(2, 2), dtype=uint16, numpy=",
      "924:   array([[12849,     0],",
      "925:          [    0,     0]], dtype=uint16)>",
      "927:   This will be fixed on a future release of TensorFlow.",
      "",
      "[Added Lines]",
      "912:   If the input value is larger than `fixed_length`, it is truncated:",
      "914:   >>> x=''.join([chr(1), chr(2), chr(3), chr(4)])",
      "915:   >>> tf.io.decode_raw(x, tf.uint16, fixed_length=2)",
      "916:   <tf.Tensor: shape=(1,), dtype=uint16, numpy=array([513], dtype=uint16)>",
      "917:   >>> hex(513)",
      "918:   '0x201'",
      "920:   If `little_endian` and `fixed_length` are specified, truncation to the fixed",
      "921:   length occurs before endianness conversion:",
      "923:   >>> x=''.join([chr(1), chr(2), chr(3), chr(4)])",
      "924:   >>> tf.io.decode_raw(x, tf.uint16, fixed_length=2, little_endian=False)",
      "925:   <tf.Tensor: shape=(1,), dtype=uint16, numpy=array([258], dtype=uint16)>",
      "926:   >>> hex(258)",
      "927:   '0x102'",
      "929:   If input values all have the same length, then specifying `fixed_length`",
      "930:   equal to the size of the strings should not change output:",
      "932:   >>> x = [\"12345678\", \"87654321\"]",
      "933:   >>> tf.io.decode_raw(x, tf.int16)",
      "934:   <tf.Tensor: shape=(2, 4), dtype=int16, numpy=",
      "935:   array([[12849, 13363, 13877, 14391],",
      "936:          [14136, 13622, 13108, 12594]], dtype=int16)>",
      "937:   >>> tf.io.decode_raw(x, tf.int16, fixed_length=len(x[0]))",
      "938:   <tf.Tensor: shape=(2, 4), dtype=int16, numpy=",
      "939:   array([[12849, 13363, 13877, 14391],",
      "940:          [14136, 13622, 13108, 12594]], dtype=int16)>",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "93cf9d287184ec64947fd53a32386ef8082464f3",
      "candidate_info": {
        "commit_hash": "93cf9d287184ec64947fd53a32386ef8082464f3",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/93cf9d287184ec64947fd53a32386ef8082464f3",
        "files": [
          "tensorflow/python/ops/parsing_ops.py"
        ],
        "message": "Add api documentation for `tf.io.decode_raw`.\n\nPiperOrigin-RevId: 363757117\nChange-Id: Iea5627b7d1a8e15c825a762292c71ae2993014e7",
        "before_after_code_files": [
          "tensorflow/python/ops/parsing_ops.py||tensorflow/python/ops/parsing_ops.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/python/ops/parsing_ops.py||tensorflow/python/ops/parsing_ops.py"
          ],
          "candidate": [
            "tensorflow/python/ops/parsing_ops.py||tensorflow/python/ops/parsing_ops.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/python/ops/parsing_ops.py||tensorflow/python/ops/parsing_ops.py": [
          "File: tensorflow/python/ops/parsing_ops.py -> tensorflow/python/ops/parsing_ops.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "848:                little_endian=True,",
          "849:                fixed_length=None,",
          "850:                name=None):",
          "853:   Args:",
          "854:     input_bytes:",
          "855:       Each element of the input Tensor is converted to an array of bytes.",
          "856:     out_type:",
          "857:       `DType` of the output. Acceptable types are `half`, `float`, `double`,",
          "858:       `int32`, `uint16`, `uint8`, `int16`, `int8`, `int64`.",
          "",
          "[Removed Lines]",
          "851:   \"\"\"Convert raw byte strings into tensors.",
          "",
          "[Added Lines]",
          "851:   r\"\"\"Convert raw bytes from input tensor into numeric tensors.",
          "853:   The input tensor is interpreted as a sequence of bytes. These bytes are then",
          "854:   decoded as numbers in the format specified by `out_type`.",
          "856:   >>> tf.io.decode_raw(tf.constant(\"1\"), tf.uint8)",
          "857:   <tf.Tensor: shape=(1,), dtype=uint8, numpy=array([49], dtype=uint8)>",
          "858:   >>> tf.io.decode_raw(tf.constant(\"1,2\"), tf.uint8)",
          "859:   <tf.Tensor: shape=(3,), dtype=uint8, numpy=array([49, 44, 50], dtype=uint8)>",
          "861:   Note that the rank of the output tensor is always one more than the input one:",
          "863:   >>> tf.io.decode_raw(tf.constant([\"1\",\"2\"]), tf.uint8).shape",
          "864:   TensorShape([2, 1])",
          "865:   >>> tf.io.decode_raw(tf.constant([[\"1\"],[\"2\"]]), tf.uint8).shape",
          "866:   TensorShape([2, 1, 1])",
          "868:   This is because each byte in the input is converted to a new value on the",
          "869:   output (if output type is `uint8` or `int8`, otherwise chunks of inputs get",
          "870:   coverted to a new value):",
          "872:   >>> tf.io.decode_raw(tf.constant(\"123\"), tf.uint8)",
          "873:   <tf.Tensor: shape=(3,), dtype=uint8, numpy=array([49, 50, 51], dtype=uint8)>",
          "874:   >>> tf.io.decode_raw(tf.constant(\"1234\"), tf.uint8)",
          "875:   <tf.Tensor: shape=(4,), dtype=uint8, numpy=array([49, 50, 51, 52], ...",
          "876:   >>> # chuncked output",
          "877:   >>> tf.io.decode_raw(tf.constant(\"12\"), tf.uint16)",
          "878:   <tf.Tensor: shape=(1,), dtype=uint16, numpy=array([12849], dtype=uint16)>",
          "879:   >>> tf.io.decode_raw(tf.constant(\"1234\"), tf.uint16)",
          "880:   <tf.Tensor: shape=(2,), dtype=uint16, numpy=array([12849, 13363], ...",
          "881:   >>> # int64 output",
          "882:   >>> tf.io.decode_raw(tf.constant(\"12345678\"), tf.int64)",
          "883:   <tf.Tensor: ... numpy=array([4050765991979987505])>",
          "884:   >>> tf.io.decode_raw(tf.constant(\"1234567887654321\"), tf.int64)",
          "885:   <tf.Tensor: ... numpy=array([4050765991979987505, 3544952156018063160])>",
          "887:   The operation allows specifying endianness via the `little_endian` parameter.",
          "889:   >>> tf.io.decode_raw(tf.constant(\"\\x0a\\x0b\"), tf.int16)",
          "890:   <tf.Tensor: shape=(1,), dtype=int16, numpy=array([2826], dtype=int16)>",
          "891:   >>> hex(2826)",
          "892:   '0xb0a'",
          "893:   >>> tf.io.decode_raw(tf.constant(\"\\x0a\\x0b\"), tf.int16, little_endian=False)",
          "894:   <tf.Tensor: shape=(1,), dtype=int16, numpy=array([2571], dtype=int16)>",
          "895:   >>> hex(2571)",
          "896:   '0xa0b'",
          "898:   If the elements of `input_bytes` are of different length, you must specify",
          "899:   `fixed_length`:",
          "901:   >>> tf.io.decode_raw(tf.constant([[\"1\"],[\"23\"]]), tf.uint8, fixed_length=4)",
          "902:   <tf.Tensor: shape=(2, 1, 4), dtype=uint8, numpy=",
          "903:   array([[[49,  0,  0,  0]],",
          "904:          [[50, 51,  0,  0]]], dtype=uint8)>",
          "906:   If the `fixed_length` value is larger that the length of the `out_type` dtype,",
          "907:   multiple values are generated:",
          "909:   >>> tf.io.decode_raw(tf.constant([\"1212\"]), tf.uint16, fixed_length=4)",
          "910:   <tf.Tensor: shape=(1, 2), dtype=uint16, numpy=array([[12849, 12849]], ...",
          "912:   Note: There is currently a bug in `fixed_length` that can result in data loss:",
          "914:   >>> # truncated to length of type as it matches fixed_length",
          "915:   >>> tf.io.decode_raw(tf.constant([\"1212\"]), tf.uint16, fixed_length=2)",
          "916:   <tf.Tensor: shape=(1, 1), dtype=uint16, numpy=array([[12849]], dtype=uint16)>",
          "917:   >>> # ignores the second component",
          "918:   >>> tf.io.decode_raw(tf.constant([\"12\",\"34\"]), tf.uint16, fixed_length=2)",
          "919:   <tf.Tensor: shape=(2, 1), dtype=uint16, numpy=",
          "920:   array([[12849],",
          "921:          [    0]], dtype=uint16)>",
          "922:   >>> tf.io.decode_raw(tf.constant([\"12\",\"34\"]), tf.uint16, fixed_length=4)",
          "923:   <tf.Tensor: shape=(2, 2), dtype=uint16, numpy=",
          "924:   array([[12849,     0],",
          "925:          [    0,     0]], dtype=uint16)>",
          "927:   This will be fixed on a future release of TensorFlow.",
          "933:       Currently, this must be a tensor of strings (bytes), although semantically",
          "934:       the operation should support any input.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8bdd6a6a7979f95958043dc6082dac57c41ad3d0",
      "candidate_info": {
        "commit_hash": "8bdd6a6a7979f95958043dc6082dac57c41ad3d0",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/8bdd6a6a7979f95958043dc6082dac57c41ad3d0",
        "files": [
          "tensorflow/core/kernels/decode_padded_raw_op.cc"
        ],
        "message": "CherryPick:2.3 Fix tf.io.decode_raw bugs",
        "before_after_code_files": [
          "tensorflow/core/kernels/decode_padded_raw_op.cc||tensorflow/core/kernels/decode_padded_raw_op.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/decode_padded_raw_op.cc||tensorflow/core/kernels/decode_padded_raw_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/decode_padded_raw_op.cc||tensorflow/core/kernels/decode_padded_raw_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/decode_padded_raw_op.cc||tensorflow/core/kernels/decode_padded_raw_op.cc": [
          "File: tensorflow/core/kernels/decode_padded_raw_op.cc -> tensorflow/core/kernels/decode_padded_raw_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #include \"tensorflow/core/framework/common_shape_fns.h\"",
          "20: #include \"tensorflow/core/framework/op.h\"",
          "21: #include \"tensorflow/core/framework/op_kernel.h\"",
          "22: #include \"tensorflow/core/framework/shape_inference.h\"",
          "24: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"tensorflow/core/framework/op_requires.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:     if (!convert_data_endianness_ || sizeof(T) == 1) {",
          "85:       for (int64 i = 0; i < flat_in.size(); ++i) {",
          "94:       }",
          "95:     } else {",
          "",
          "[Removed Lines]",
          "86:         const T* in_data = reinterpret_cast<const T*>(flat_in(i).data());",
          "88:         if (flat_in(i).size() > fixed_length) {",
          "89:           memcpy(out_data, in_data, fixed_length);",
          "90:         } else {",
          "91:           memcpy(out_data, in_data, flat_in(i).size());",
          "92:         }",
          "93:         out_data += fixed_length;",
          "",
          "[Added Lines]",
          "87:         const auto to_copy =",
          "88:             std::min(flat_in(i).size(), static_cast<size_t>(fixed_length));",
          "89:         memcpy(out_data, flat_in(i).data(), to_copy);",
          "93:         out_data += width;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "105:              p_in += sizeof(T), p_out += sizeof(T)) {",
          "106:           std::reverse_copy(p_in, p_in + sizeof(T), p_out);",
          "107:         }",
          "109:       }",
          "110:     }",
          "111:   }",
          "",
          "[Removed Lines]",
          "108:         out_data += fixed_length;",
          "",
          "[Added Lines]",
          "111:         out_data += width;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eddb27238e74e2bf8e3d713d8ade6ec7ca893514",
      "candidate_info": {
        "commit_hash": "eddb27238e74e2bf8e3d713d8ade6ec7ca893514",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/eddb27238e74e2bf8e3d713d8ade6ec7ca893514",
        "files": [
          "tensorflow/core/kernels/decode_padded_raw_op.cc",
          "tensorflow/python/ops/parsing_ops.py"
        ],
        "message": "Fix `tf.io.decode_raw` bugs and update documentation.\n\nFixes cases where specifying `fixed_length` resulted in data loss and even segfault and corruption of the Python interpreter. The fix is subtle but needed due to pointer arithmetic rules.\n\nMakes sure that `fixed_length` does not change the output when present but not needed.\n\nEliminates needless copy and cast in the main codepath.\n\nPiperOrigin-RevId: 371322725\nChange-Id: I514ef67a2961c86422f69d05122d31615e87896c",
        "before_after_code_files": [
          "tensorflow/core/kernels/decode_padded_raw_op.cc||tensorflow/core/kernels/decode_padded_raw_op.cc",
          "tensorflow/python/ops/parsing_ops.py||tensorflow/python/ops/parsing_ops.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/decode_padded_raw_op.cc||tensorflow/core/kernels/decode_padded_raw_op.cc",
            "tensorflow/python/ops/parsing_ops.py||tensorflow/python/ops/parsing_ops.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/decode_padded_raw_op.cc||tensorflow/core/kernels/decode_padded_raw_op.cc",
            "tensorflow/python/ops/parsing_ops.py||tensorflow/python/ops/parsing_ops.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/decode_padded_raw_op.cc||tensorflow/core/kernels/decode_padded_raw_op.cc": [
          "File: tensorflow/core/kernels/decode_padded_raw_op.cc -> tensorflow/core/kernels/decode_padded_raw_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #include \"tensorflow/core/framework/common_shape_fns.h\"",
          "20: #include \"tensorflow/core/framework/op.h\"",
          "21: #include \"tensorflow/core/framework/op_kernel.h\"",
          "22: #include \"tensorflow/core/framework/shape_inference.h\"",
          "24: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"tensorflow/core/framework/op_requires.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:     if (!convert_data_endianness_ || sizeof(T) == 1) {",
          "85:       for (int64 i = 0; i < flat_in.size(); ++i) {",
          "94:       }",
          "95:     } else {",
          "",
          "[Removed Lines]",
          "86:         const T* in_data = reinterpret_cast<const T*>(flat_in(i).data());",
          "88:         if (flat_in(i).size() > fixed_length) {",
          "89:           memcpy(out_data, in_data, fixed_length);",
          "90:         } else {",
          "91:           memcpy(out_data, in_data, flat_in(i).size());",
          "92:         }",
          "93:         out_data += fixed_length;",
          "",
          "[Added Lines]",
          "87:         const auto to_copy =",
          "88:             std::min(flat_in(i).size(), static_cast<size_t>(fixed_length));",
          "89:         memcpy(out_data, flat_in(i).data(), to_copy);",
          "93:         out_data += width;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "105:              p_in += sizeof(T), p_out += sizeof(T)) {",
          "106:           std::reverse_copy(p_in, p_in + sizeof(T), p_out);",
          "107:         }",
          "109:       }",
          "110:     }",
          "111:   }",
          "",
          "[Removed Lines]",
          "108:         out_data += fixed_length;",
          "",
          "[Added Lines]",
          "111:         out_data += width;",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/parsing_ops.py||tensorflow/python/ops/parsing_ops.py": [
          "File: tensorflow/python/ops/parsing_ops.py -> tensorflow/python/ops/parsing_ops.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "850:                name=None):",
          "851:   r\"\"\"Convert raw bytes from input tensor into numeric tensors.",
          "856:   >>> tf.io.decode_raw(tf.constant(\"1\"), tf.uint8)",
          "857:   <tf.Tensor: shape=(1,), dtype=uint8, numpy=array([49], dtype=uint8)>",
          "",
          "[Removed Lines]",
          "853:   The input tensor is interpreted as a sequence of bytes. These bytes are then",
          "854:   decoded as numbers in the format specified by `out_type`.",
          "",
          "[Added Lines]",
          "853:   Every component of the input tensor is interpreted as a sequence of bytes.",
          "854:   These bytes are then decoded as numbers in the format specified by `out_type`.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "909:   >>> tf.io.decode_raw(tf.constant([\"1212\"]), tf.uint16, fixed_length=4)",
          "910:   <tf.Tensor: shape=(1, 2), dtype=uint16, numpy=array([[12849, 12849]], ...",
          "929:   Args:",
          "930:     input_bytes:",
          "",
          "[Removed Lines]",
          "912:   Note: There is currently a bug in `fixed_length` that can result in data loss:",
          "914:   >>> # truncated to length of type as it matches fixed_length",
          "915:   >>> tf.io.decode_raw(tf.constant([\"1212\"]), tf.uint16, fixed_length=2)",
          "916:   <tf.Tensor: shape=(1, 1), dtype=uint16, numpy=array([[12849]], dtype=uint16)>",
          "917:   >>> # ignores the second component",
          "918:   >>> tf.io.decode_raw(tf.constant([\"12\",\"34\"]), tf.uint16, fixed_length=2)",
          "919:   <tf.Tensor: shape=(2, 1), dtype=uint16, numpy=",
          "920:   array([[12849],",
          "921:          [    0]], dtype=uint16)>",
          "922:   >>> tf.io.decode_raw(tf.constant([\"12\",\"34\"]), tf.uint16, fixed_length=4)",
          "923:   <tf.Tensor: shape=(2, 2), dtype=uint16, numpy=",
          "924:   array([[12849,     0],",
          "925:          [    0,     0]], dtype=uint16)>",
          "927:   This will be fixed on a future release of TensorFlow.",
          "",
          "[Added Lines]",
          "912:   If the input value is larger than `fixed_length`, it is truncated:",
          "914:   >>> x=''.join([chr(1), chr(2), chr(3), chr(4)])",
          "915:   >>> tf.io.decode_raw(x, tf.uint16, fixed_length=2)",
          "916:   <tf.Tensor: shape=(1,), dtype=uint16, numpy=array([513], dtype=uint16)>",
          "917:   >>> hex(513)",
          "918:   '0x201'",
          "920:   If `little_endian` and `fixed_length` are specified, truncation to the fixed",
          "921:   length occurs before endianness conversion:",
          "923:   >>> x=''.join([chr(1), chr(2), chr(3), chr(4)])",
          "924:   >>> tf.io.decode_raw(x, tf.uint16, fixed_length=2, little_endian=False)",
          "925:   <tf.Tensor: shape=(1,), dtype=uint16, numpy=array([258], dtype=uint16)>",
          "926:   >>> hex(258)",
          "927:   '0x102'",
          "929:   If input values all have the same length, then specifying `fixed_length`",
          "930:   equal to the size of the strings should not change output:",
          "932:   >>> x = [\"12345678\", \"87654321\"]",
          "933:   >>> tf.io.decode_raw(x, tf.int16)",
          "934:   <tf.Tensor: shape=(2, 4), dtype=int16, numpy=",
          "935:   array([[12849, 13363, 13877, 14391],",
          "936:          [14136, 13622, 13108, 12594]], dtype=int16)>",
          "937:   >>> tf.io.decode_raw(x, tf.int16, fixed_length=len(x[0]))",
          "938:   <tf.Tensor: shape=(2, 4), dtype=int16, numpy=",
          "939:   array([[12849, 13363, 13877, 14391],",
          "940:          [14136, 13622, 13108, 12594]], dtype=int16)>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9636f343683cdd7e5ee8bdb0822be6732adbc0b2",
      "candidate_info": {
        "commit_hash": "9636f343683cdd7e5ee8bdb0822be6732adbc0b2",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/9636f343683cdd7e5ee8bdb0822be6732adbc0b2",
        "files": [
          "tensorflow/core/kernels/decode_padded_raw_op.cc"
        ],
        "message": "CherryPick:2.4 Fix tf.io.decode_raw bugs",
        "before_after_code_files": [
          "tensorflow/core/kernels/decode_padded_raw_op.cc||tensorflow/core/kernels/decode_padded_raw_op.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/decode_padded_raw_op.cc||tensorflow/core/kernels/decode_padded_raw_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/decode_padded_raw_op.cc||tensorflow/core/kernels/decode_padded_raw_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/decode_padded_raw_op.cc||tensorflow/core/kernels/decode_padded_raw_op.cc": [
          "File: tensorflow/core/kernels/decode_padded_raw_op.cc -> tensorflow/core/kernels/decode_padded_raw_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #include \"tensorflow/core/framework/common_shape_fns.h\"",
          "20: #include \"tensorflow/core/framework/op.h\"",
          "21: #include \"tensorflow/core/framework/op_kernel.h\"",
          "22: #include \"tensorflow/core/framework/shape_inference.h\"",
          "24: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"tensorflow/core/framework/op_requires.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:     if (!convert_data_endianness_ || sizeof(T) == 1) {",
          "85:       for (int64 i = 0; i < flat_in.size(); ++i) {",
          "94:       }",
          "95:     } else {",
          "",
          "[Removed Lines]",
          "86:         const T* in_data = reinterpret_cast<const T*>(flat_in(i).data());",
          "88:         if (flat_in(i).size() > fixed_length) {",
          "89:           memcpy(out_data, in_data, fixed_length);",
          "90:         } else {",
          "91:           memcpy(out_data, in_data, flat_in(i).size());",
          "92:         }",
          "93:         out_data += fixed_length;",
          "",
          "[Added Lines]",
          "87:         const auto to_copy =",
          "88:             std::min(flat_in(i).size(), static_cast<size_t>(fixed_length));",
          "89:         memcpy(out_data, flat_in(i).data(), to_copy);",
          "93:         out_data += width;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "105:              p_in += sizeof(T), p_out += sizeof(T)) {",
          "106:           std::reverse_copy(p_in, p_in + sizeof(T), p_out);",
          "107:         }",
          "109:       }",
          "110:     }",
          "111:   }",
          "",
          "[Removed Lines]",
          "108:         out_data += fixed_length;",
          "",
          "[Added Lines]",
          "111:         out_data += width;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fe421f10e6a6ce1e19e9b214b27374f7a4904213",
      "candidate_info": {
        "commit_hash": "fe421f10e6a6ce1e19e9b214b27374f7a4904213",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/fe421f10e6a6ce1e19e9b214b27374f7a4904213",
        "files": [
          "tensorflow/core/kernels/decode_padded_raw_op.cc"
        ],
        "message": "CherryPick:2.2 Fix tf.io.decode_raw bugs",
        "before_after_code_files": [
          "tensorflow/core/kernels/decode_padded_raw_op.cc||tensorflow/core/kernels/decode_padded_raw_op.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/decode_padded_raw_op.cc||tensorflow/core/kernels/decode_padded_raw_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/decode_padded_raw_op.cc||tensorflow/core/kernels/decode_padded_raw_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/decode_padded_raw_op.cc||tensorflow/core/kernels/decode_padded_raw_op.cc": [
          "File: tensorflow/core/kernels/decode_padded_raw_op.cc -> tensorflow/core/kernels/decode_padded_raw_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #include \"tensorflow/core/framework/common_shape_fns.h\"",
          "20: #include \"tensorflow/core/framework/op.h\"",
          "21: #include \"tensorflow/core/framework/op_kernel.h\"",
          "22: #include \"tensorflow/core/framework/shape_inference.h\"",
          "24: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"tensorflow/core/framework/op_requires.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:     if (!convert_data_endianness_ || sizeof(T) == 1) {",
          "85:       for (int64 i = 0; i < flat_in.size(); ++i) {",
          "94:       }",
          "95:     } else {",
          "",
          "[Removed Lines]",
          "86:         const T* in_data = reinterpret_cast<const T*>(flat_in(i).data());",
          "88:         if (flat_in(i).size() > fixed_length) {",
          "89:           memcpy(out_data, in_data, fixed_length);",
          "90:         } else {",
          "91:           memcpy(out_data, in_data, flat_in(i).size());",
          "92:         }",
          "93:         out_data += fixed_length;",
          "",
          "[Added Lines]",
          "87:         const auto to_copy =",
          "88:             std::min(flat_in(i).size(), static_cast<size_t>(fixed_length));",
          "89:         memcpy(out_data, flat_in(i).data(), to_copy);",
          "93:         out_data += width;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "105:              p_in += sizeof(T), p_out += sizeof(T)) {",
          "106:           std::reverse_copy(p_in, p_in + sizeof(T), p_out);",
          "107:         }",
          "109:       }",
          "110:     }",
          "111:   }",
          "",
          "[Removed Lines]",
          "108:         out_data += fixed_length;",
          "",
          "[Added Lines]",
          "111:         out_data += width;",
          "",
          "---------------"
        ]
      }
    }
  ]
}