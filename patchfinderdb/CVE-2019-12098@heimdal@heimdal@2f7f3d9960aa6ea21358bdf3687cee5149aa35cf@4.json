{
  "cve_id": "CVE-2019-12098",
  "cve_desc": "In the client side of Heimdal before 7.6.0, failure to verify anonymous PKINIT PA-PKINIT-KX key exchange permits a man-in-the-middle attack. This issue is in krb5_init_creds_step in lib/krb5/init_creds_pw.c.",
  "repo": "heimdal/heimdal",
  "patch_hash": "2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
  "patch_info": {
    "commit_hash": "2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
    "repo": "heimdal/heimdal",
    "commit_url": "https://github.com/heimdal/heimdal/commit/2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
    "files": [
      "lib/krb5/init_creds_pw.c",
      "lib/krb5/krb5_locl.h",
      "lib/krb5/pkinit.c"
    ],
    "message": "CVE-2019-12098: krb5: always confirm PA-PKINIT-KX for anon PKINIT\n\nRFC8062 Section 7 requires verification of the PA-PKINIT-KX key excahnge\nwhen anonymous PKINIT is used.  Failure to do so can permit an active\nattacker to become a man-in-the-middle.\n\nIntroduced by a1ef548600c5bb51cf52a9a9ea12676506ede19f.  First tagged\nrelease Heimdal 1.4.0.\n\nCVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N (4.8)\n\nChange-Id: I6cc1c0c24985936468af08693839ac6c3edda133\nSigned-off-by: Jeffrey Altman <jaltman@auristor.com>\nApproved-by: Jeffrey Altman <jaltman@auritor.com>\n(cherry picked from commit 38c797e1ae9b9c8f99ae4aa2e73957679031fd2b)",
    "before_after_code_files": [
      "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c",
      "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h",
      "lib/krb5/pkinit.c||lib/krb5/pkinit.c"
    ]
  },
  "patch_diff": {
    "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c": [
      "File: lib/krb5/init_creds_pw.c -> lib/krb5/init_creds_pw.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2267:            &ctx->req_buffer,",
      "2268:            NULL,",
      "2269:            NULL);",
      "2270:      if (ret == 0)",
      "2271:   ret = copy_EncKDCRepPart(&rep.enc_part, &ctx->enc_part);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2270:      if (ret == 0 && ctx->pk_init_ctx) {",
      "2271:   PA_DATA *pa_pkinit_kx;",
      "2272:   int idx = 0;",
      "2274:   pa_pkinit_kx =",
      "2275:       krb5_find_padata(rep.kdc_rep.padata->val,",
      "2276:          rep.kdc_rep.padata->len,",
      "2277:          KRB5_PADATA_PKINIT_KX,",
      "2278:          &idx);",
      "2280:   ret = _krb5_pk_kx_confirm(context, ctx->pk_init_ctx,",
      "2281:        ctx->fast_state.reply_key,",
      "2282:        &ctx->cred.session,",
      "2283:        pa_pkinit_kx);",
      "2284:   if (ret)",
      "2285:       krb5_set_error_message(context, ret,",
      "2286:         N_(\"Failed to confirm PA-PKINIT-KX\", \"\"));",
      "2287:   else if (pa_pkinit_kx != NULL)",
      "2288:       ctx->ic_flags |= KRB5_INIT_CREDS_PKINIT_KX_VALID;",
      "2289:      }",
      "",
      "---------------"
    ],
    "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h": [
      "File: lib/krb5/krb5_locl.h -> lib/krb5/krb5_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "208: #define KRB5_INIT_CREDS_CANONICALIZE  1",
      "209: #define KRB5_INIT_CREDS_NO_C_CANON_CHECK 2",
      "210: #define KRB5_INIT_CREDS_NO_C_NO_EKU_CHECK 4",
      "211:     struct {",
      "212:         krb5_gic_process_last_req func;",
      "213:         void *ctx;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "211: #define KRB5_INIT_CREDS_PKINIT_KX_VALID  32",
      "",
      "---------------"
    ],
    "lib/krb5/pkinit.c||lib/krb5/pkinit.c": [
      "File: lib/krb5/pkinit.c -> lib/krb5/pkinit.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1220:     return ret;",
      "1221: }",
      "1223: static krb5_error_code",
      "1224: pk_rd_pa_reply_dh(krb5_context context,",
      "1225:     const heim_octet_string *indata,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1230: KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL",
      "1231: _krb5_pk_kx_confirm(krb5_context context,",
      "1232:       krb5_pk_init_ctx ctx,",
      "1233:       krb5_keyblock *reply_key,",
      "1234:       krb5_keyblock *session_key,",
      "1235:       PA_DATA *pa_pkinit_kx)",
      "1236: {",
      "1237:     krb5_error_code ret;",
      "1238:     EncryptedData ed;",
      "1239:     krb5_keyblock ck, sk_verify;",
      "1240:     krb5_crypto ck_crypto = NULL;",
      "1241:     krb5_crypto rk_crypto = NULL;",
      "1242:     size_t len;",
      "1243:     krb5_data data;",
      "1244:     krb5_data p1 = { sizeof(\"PKINIT\") - 1, \"PKINIT\" };",
      "1245:     krb5_data p2 = { sizeof(\"KEYEXCHANGE\") - 1, \"KEYEXCHANGE\" };",
      "1247:     heim_assert(ctx != NULL, \"PKINIT context is non-NULL\");",
      "1248:     heim_assert(reply_key != NULL, \"reply key is non-NULL\");",
      "1249:     heim_assert(session_key != NULL, \"session key is non-NULL\");",
      "1252:     if (pa_pkinit_kx == NULL)",
      "1253:  return ctx->anonymous ? KRB5_KDCREP_MODIFIED : 0;",
      "1255:     memset(&ed, 0, sizeof(ed));",
      "1256:     krb5_keyblock_zero(&ck);",
      "1257:     krb5_keyblock_zero(&sk_verify);",
      "1258:     krb5_data_zero(&data);",
      "1260:     ret = decode_EncryptedData(pa_pkinit_kx->padata_value.data,",
      "1261:           pa_pkinit_kx->padata_value.length,",
      "1262:           &ed, &len);",
      "1263:     if (ret)",
      "1264:  goto out;",
      "1266:     if (len != pa_pkinit_kx->padata_value.length) {",
      "1267:  ret = KRB5_KDCREP_MODIFIED;",
      "1268:  goto out;",
      "1269:     }",
      "1271:     ret = krb5_crypto_init(context, reply_key, 0, &rk_crypto);",
      "1272:     if (ret)",
      "1273:  goto out;",
      "1275:     ret = krb5_decrypt_EncryptedData(context, rk_crypto,",
      "1276:          KRB5_KU_PA_PKINIT_KX,",
      "1277:          &ed, &data);",
      "1278:     if (ret)",
      "1279:  goto out;",
      "1281:     ret = decode_EncryptionKey(data.data, data.length,",
      "1282:           &ck, &len);",
      "1283:     if (ret)",
      "1284:  goto out;",
      "1286:     ret = krb5_crypto_init(context, &ck, 0, &ck_crypto);",
      "1287:     if (ret)",
      "1288:  goto out;",
      "1290:     ret = krb5_crypto_fx_cf2(context, ck_crypto, rk_crypto,",
      "1291:         &p1, &p2, session_key->keytype,",
      "1292:         &sk_verify);",
      "1293:     if (ret)",
      "1294:  goto out;",
      "1296:     if (sk_verify.keytype != session_key->keytype ||",
      "1297:  krb5_data_ct_cmp(&sk_verify.keyvalue, &session_key->keyvalue) != 0) {",
      "1298:  ret = KRB5_KDCREP_MODIFIED;",
      "1299:  goto out;",
      "1300:     }",
      "1302: out:",
      "1303:     free_EncryptedData(&ed);",
      "1304:     krb5_free_keyblock_contents(context, &ck);",
      "1305:     krb5_free_keyblock_contents(context, &sk_verify);",
      "1306:     if (ck_crypto)",
      "1307:  krb5_crypto_destroy(context, ck_crypto);",
      "1308:     if (rk_crypto)",
      "1309:  krb5_crypto_destroy(context, rk_crypto);",
      "1310:     krb5_data_free(&data);",
      "1312:     return ret;",
      "1313: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5995db43564f31537c52c823851bf2b565543cc7",
      "candidate_info": {
        "commit_hash": "5995db43564f31537c52c823851bf2b565543cc7",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/5995db43564f31537c52c823851bf2b565543cc7",
        "files": [
          "lib/hcrypto/evp-pkcs11.c"
        ],
        "message": "hcrypto PKCS#11 backend: Call C_Initialize() on every hcrypto call\n\nThis is required as the PKCS#11 library needs to be reinitialized after\nforking. This was causing a problem with ipropd.\n\nThis fix appears to incur a repeatable 10ms performance penalty on aes-test.\n\nCaching the initialization status using a once control and invalidating it\non fork provided no measurable performance benefit on Solaris 11. Other\napproaches would not be thread-safe or would involve more intrusive code\nchanges, such as exposing heimbase's atomics.\n\n(cherry picked from commit 934d5e09bf3ba0774d303da53446e5ff94daae01)\n\nChange-Id: I47566373f43eab3cb30a24ffbe37bbcd309a5f3e",
        "before_after_code_files": [
          "lib/hcrypto/evp-pkcs11.c||lib/hcrypto/evp-pkcs11.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/hcrypto/evp-pkcs11.c||lib/hcrypto/evp-pkcs11.c": [
          "File: lib/hcrypto/evp-pkcs11.c -> lib/hcrypto/evp-pkcs11.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "94: };",
          "96: static void *pkcs11_module_handle;",
          "99: {",
          "100:     CK_RV rv;",
          "102:     CK_RV (*C_GetFunctionList_fn)(CK_FUNCTION_LIST_PTR_PTR);",
          "104:     if (!issuid()) {",
          "",
          "[Removed Lines]",
          "97: static void",
          "98: p11_module_init_once(void *context)",
          "101:     CK_FUNCTION_LIST_PTR module;",
          "",
          "[Added Lines]",
          "98: static CK_RV",
          "99: p11_module_load(CK_FUNCTION_LIST_PTR_PTR ppFunctionList)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:   dlopen(pkcs11ModulePath,",
          "109:          RTLD_LAZY | RTLD_LOCAL | RTLD_GROUP | RTLD_NODELETE);",
          "110:      if (pkcs11_module_handle == NULL)",
          "112:         }",
          "113:     }",
          "114: #ifdef PKCS11_MODULE_PATH",
          "",
          "[Removed Lines]",
          "111:                 fprintf(stderr, \"p11_module_init(%s): %s\\n\", pkcs11ModulePath, dlerror());",
          "",
          "[Added Lines]",
          "111:                 fprintf(stderr, \"p11_module_load(%s): %s\\n\", pkcs11ModulePath, dlerror());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "117:      dlopen(PKCS11_MODULE_PATH,",
          "118:      RTLD_LAZY | RTLD_LOCAL | RTLD_GROUP | RTLD_NODELETE);",
          "119:  if (pkcs11_module_handle == NULL)",
          "121:     }",
          "122: #endif",
          "123:     if (pkcs11_module_handle == NULL)",
          "126:     C_GetFunctionList_fn = (CK_RV (*)(CK_FUNCTION_LIST_PTR_PTR))",
          "127:  dlsym(pkcs11_module_handle, \"C_GetFunctionList\");",
          "147: }",
          "149: static CK_RV",
          "150: p11_module_init(void)",
          "151: {",
          "157: }",
          "159: static CK_RV",
          "",
          "[Removed Lines]",
          "120:             fprintf(stderr, \"p11_module_init(%s): %s\\n\", PKCS11_MODULE_PATH, dlerror());",
          "124:         goto cleanup;",
          "128:     if (C_GetFunctionList_fn == NULL)",
          "129:         goto cleanup;",
          "131:     rv = C_GetFunctionList_fn(&module);",
          "132:     if (rv != CKR_OK)",
          "133:         goto cleanup;",
          "135:     rv = module->C_Initialize(NULL);",
          "136:     if (rv == CKR_CRYPTOKI_ALREADY_INITIALIZED)",
          "137:         rv = CKR_OK;",
          "138:     if (rv == CKR_OK)",
          "141: cleanup:",
          "142:     if (pkcs11_module_handle != NULL && p11_module == NULL) {",
          "143:  dlclose(pkcs11_module_handle);",
          "144:  pkcs11_module_handle = NULL;",
          "145:     }",
          "152:     static heim_base_once_t init_module = HEIM_BASE_ONCE_INIT;",
          "154:     heim_base_once_f(&init_module, &p11_module, p11_module_init_once);",
          "156:     return p11_module != NULL ? CKR_OK : CKR_LIBRARY_LOAD_FAILED;",
          "",
          "[Added Lines]",
          "120:             fprintf(stderr, \"p11_module_load(%s): %s\\n\", PKCS11_MODULE_PATH, dlerror());",
          "124:         return CKR_LIBRARY_LOAD_FAILED;",
          "128:     if (C_GetFunctionList_fn == NULL) {",
          "129:         dlclose(pkcs11_module_handle);",
          "130:         return CKR_LIBRARY_LOAD_FAILED;",
          "131:     }",
          "133:     rv = C_GetFunctionList_fn(ppFunctionList);",
          "134:     if (rv != CKR_OK) {",
          "135:         dlclose(pkcs11_module_handle);",
          "136:         return rv;",
          "137:     }",
          "139:     return CKR_OK;",
          "140: }",
          "142: static void",
          "143: p11_module_load_once(void *context)",
          "144: {",
          "145:     p11_module_load((CK_FUNCTION_LIST_PTR_PTR)context);",
          "151:     static heim_base_once_t once = HEIM_BASE_ONCE_INIT;",
          "152:     CK_RV rv;",
          "154:     heim_base_once_f(&once, &p11_module, p11_module_load_once);",
          "156:     if (p11_module == NULL)",
          "157:         return CKR_LIBRARY_LOAD_FAILED;",
          "166:     rv = p11_module->C_Initialize(NULL);",
          "167:     if (rv == CKR_CRYPTOKI_ALREADY_INITIALIZED)",
          "168:         rv = CKR_OK;",
          "170:     return rv;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "552cbb3df302106dca0682aa0853ff48d5936859",
      "candidate_info": {
        "commit_hash": "552cbb3df302106dca0682aa0853ff48d5936859",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/552cbb3df302106dca0682aa0853ff48d5936859",
        "files": [
          "lib/libedit/src/vis.h"
        ],
        "message": "Fixes https://github.com/heimdal/heimdal/issues/294",
        "before_after_code_files": [
          "lib/libedit/src/vis.h||lib/libedit/src/vis.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/libedit/src/vis.h||lib/libedit/src/vis.h": [
          "File: lib/libedit/src/vis.h -> lib/libedit/src/vis.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "84: #include <sys/cdefs.h>",
          "86: __BEGIN_DECLS",
          "87: char *vis(char *, int, int, int);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84: #ifdef HAVE_SYS_CDEFS_H",
          "86: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7534f547c9f4e92a7512937968d2fb8ffe5829c2",
      "candidate_info": {
        "commit_hash": "7534f547c9f4e92a7512937968d2fb8ffe5829c2",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/7534f547c9f4e92a7512937968d2fb8ffe5829c2",
        "files": [
          "lib/wind/stringprep.py"
        ],
        "message": "PY3: string.upper not in PY3\n\nSigned-off-by: Noel Power <noel.power@suse.com>\nReviewed-by: Andrew Bartlett <abartlet@samba.org>\n(cherry picked from Samba commit 899ef5d186c2c44f63c1cbf415daa33e9f668a5b)\n(cherry picked from commit 926b3aae822e72b85f1d5adefba49417806909d8)",
        "before_after_code_files": [
          "lib/wind/stringprep.py||lib/wind/stringprep.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/wind/stringprep.py||lib/wind/stringprep.py": [
          "File: lib/wind/stringprep.py -> lib/wind/stringprep.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:         list = list + tabledict.get(x, [])",
          "58:     if len(list) == 0:",
          "59:         return \"\"",
          "62: def get_errorlist():",
          "63:     d = dict()",
          "",
          "[Removed Lines]",
          "60:     return \"|\".join(map(lambda x: \"WIND_PROFILE_%s\" % (string.upper(x)), list))",
          "",
          "[Added Lines]",
          "60:     return \"|\".join(map(lambda x: \"WIND_PROFILE_%s\" % (x.upper()), list))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f3b74d8d72436e928755471a704384e33a33ef72",
      "candidate_info": {
        "commit_hash": "f3b74d8d72436e928755471a704384e33a33ef72",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/f3b74d8d72436e928755471a704384e33a33ef72",
        "files": [
          "cf/sunos.m4"
        ],
        "message": "solaris: Define _STDC_C11_BCI for memset_s prototype\n\nOn Solaris, the memset_s() prototype is only visible if _STDC_C11_BCI\nis defined.\n\n93518bfab4e495bf4130be354464965e48a786c0 (\"use memset_s\")\nintroduced warnings on Solaris\n\n  warning: implicit declaration of function \u00e2\u0080\u0098memset_s\u00e2\u0080\u0099;\n  did you mean \u00e2\u0080\u0098memset\u00e2\u0080\u0099? [-Wimplicit-function-declaration]\n\nChange-Id: Ia02db5e96021a26fb30aa1a593ef6a2b3e3a5b5f\n(cherry picked from commit dc46b1f82d89912965a6bf5d86291884069d3007)",
        "before_after_code_files": [
          "cf/sunos.m4||cf/sunos.m4"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cf/sunos.m4||cf/sunos.m4": [
          "File: cf/sunos.m4 -> cf/sunos.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:  AC_DEFINE([__EXTENSIONS__], [1],",
          "13:     [Enable general extensions on Solaris.])",
          "14:  sunos=511",
          "15:  ;;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14:  AC_DEFINE([_STDC_C11_BCI], [1],",
          "15:   [Enable C11 prototypes for memset_s and friends])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "69c9b28fc4243ff88db80d8817239f2f89a83851",
      "candidate_info": {
        "commit_hash": "69c9b28fc4243ff88db80d8817239f2f89a83851",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/69c9b28fc4243ff88db80d8817239f2f89a83851",
        "files": [
          "kdc/kerberos5.c",
          "kdc/krb5tgs.c",
          "kuser/kimpersonate.c",
          "lib/krb5/build_auth.c",
          "lib/krb5/get_for_creds.c",
          "lib/krb5/rd_cred.c"
        ],
        "message": "check return copy_Realm, copy_PrincipalName, copy_EncryptionKey\n\nThe ASN.1 functions copy_Realm(), copy_PrincipalName() and\ncopy_EncryptionKey() can fail.  Check the return and perform error\nhandling as appropriate.\n\nChange-Id: I2b3629d19db96eb41d1cd554cef1dca99745e753\n(cherry picked from commit 6f3ab01c757a2ec66e6550a133f424955ad8a398)",
        "before_after_code_files": [
          "kdc/kerberos5.c||kdc/kerberos5.c",
          "kdc/krb5tgs.c||kdc/krb5tgs.c",
          "kuser/kimpersonate.c||kuser/kimpersonate.c",
          "lib/krb5/build_auth.c||lib/krb5/build_auth.c",
          "lib/krb5/get_for_creds.c||lib/krb5/get_for_creds.c",
          "lib/krb5/rd_cred.c||lib/krb5/rd_cred.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041",
          "https://github.com/heimdal/heimdal/pull/556"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kdc/kerberos5.c||kdc/kerberos5.c": [
          "File: kdc/kerberos5.c -> kdc/kerberos5.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1946:  goto out;",
          "1948:     rep.ticket.tkt_vno = 5;",
          "1950:     _krb5_principal2principalname(&rep.ticket.sname,",
          "1951:       r->server->entry.principal);",
          "",
          "[Removed Lines]",
          "1949:     copy_Realm(&r->server->entry.principal->realm, &rep.ticket.realm);",
          "",
          "[Added Lines]",
          "1949:     ret = copy_Realm(&r->server->entry.principal->realm, &rep.ticket.realm);",
          "1950:     if (ret)",
          "1951:  goto out;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2111:  ALLOC(r->ek.renew_till);",
          "2113:     }",
          "2116:     if(r->et.caddr){",
          "2117:  ALLOC(r->ek.caddr);",
          "2118:  copy_HostAddresses(r->et.caddr, r->ek.caddr);",
          "",
          "[Removed Lines]",
          "2114:     copy_Realm(&rep.ticket.realm, &r->ek.srealm);",
          "2115:     copy_PrincipalName(&rep.ticket.sname, &r->ek.sname);",
          "",
          "[Added Lines]",
          "2116:     ret = copy_Realm(&rep.ticket.realm, &r->ek.srealm);",
          "2117:     if (ret)",
          "2118:  goto out;",
          "2119:     ret = copy_PrincipalName(&rep.ticket.sname, &r->ek.sname);",
          "2120:     if (ret)",
          "2121:  goto out;",
          "",
          "---------------"
        ],
        "kdc/krb5tgs.c||kdc/krb5tgs.c": [
          "File: kdc/krb5tgs.c -> kdc/krb5tgs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "807:     if(ret)",
          "808:  goto out;",
          "811:     _krb5_principal2principalname(&rep.ticket.sname, server_principal);",
          "814:     if (f.request_anonymous)",
          "815:  _kdc_make_anonymous_principalname (&rep.cname);",
          "819:     rep.ticket.tkt_vno = 5;",
          "821:     ek.caddr = et.caddr;",
          "",
          "[Removed Lines]",
          "810:     copy_Realm(&server_principal->realm, &rep.ticket.realm);",
          "812:     copy_Realm(&tgt_name->realm, &rep.crealm);",
          "818:     copy_PrincipalName(&tgt_name->name, &rep.cname);",
          "",
          "[Added Lines]",
          "810:     ret = copy_Realm(&server_principal->realm, &rep.ticket.realm);",
          "811:     if (ret)",
          "812:  goto out;",
          "814:     ret = copy_Realm(&tgt_name->realm, &rep.crealm);",
          "815:     if (ret)",
          "816:  goto out;",
          "822:     ret = copy_PrincipalName(&tgt_name->name, &rep.cname);",
          "823:     if (ret)",
          "824:  goto out;",
          "",
          "---------------"
        ],
        "kuser/kimpersonate.c||kuser/kimpersonate.c": [
          "File: kuser/kimpersonate.c -> kuser/kimpersonate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:     et.flags = cred->flags.b;",
          "83:     et.key = cred->session;",
          "84:     et.crealm = cred->client->realm;",
          "86:     {",
          "87:  krb5_data empty_string;",
          "",
          "[Removed Lines]",
          "85:     copy_PrincipalName(&cred->client->name, &et.cname);",
          "",
          "[Added Lines]",
          "85:     ret = copy_PrincipalName(&cred->client->name, &et.cname);",
          "86:     if (ret)",
          "87:  krb5_err(context, 1, ret, \"copy_PrincipalName\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128:     ticket.tkt_vno = 5;",
          "129:     ticket.realm = cred->server->realm;",
          "132:     ASN1_MALLOC_ENCODE(Ticket, buf, len, &ticket, &size, ret);",
          "133:     if(ret)",
          "",
          "[Removed Lines]",
          "130:     copy_PrincipalName(&cred->server->name, &ticket.sname);",
          "",
          "[Added Lines]",
          "132:     ret = copy_PrincipalName(&cred->server->name, &ticket.sname);",
          "133:     if (ret)",
          "134:  krb5_err(context, 1, ret, \"copy_PrincipalName\");",
          "",
          "---------------"
        ],
        "lib/krb5/build_auth.c||lib/krb5/build_auth.c": [
          "File: lib/krb5/build_auth.c -> lib/krb5/build_auth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:     memset(&auth, 0, sizeof(auth));",
          "119:     auth.authenticator_vno = 5;",
          "123:     krb5_us_timeofday (context, &auth.ctime, &auth.cusec);",
          "",
          "[Removed Lines]",
          "120:     copy_Realm(&cred->client->realm, &auth.crealm);",
          "121:     copy_PrincipalName(&cred->client->name, &auth.cname);",
          "",
          "[Added Lines]",
          "120:     ret = copy_Realm(&cred->client->realm, &auth.crealm);",
          "121:     if (ret)",
          "122:  goto fail;",
          "123:     ret = copy_PrincipalName(&cred->client->name, &auth.cname);",
          "124:     if (ret)",
          "125:  goto fail;",
          "",
          "---------------"
        ],
        "lib/krb5/get_for_creds.c||lib/krb5/get_for_creds.c": [
          "File: lib/krb5/get_for_creds.c -> lib/krb5/get_for_creds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "356:     krb_cred_info = enc_krb_cred_part.ticket_info.val;",
          "359:     ALLOC(krb_cred_info->prealm, 1);",
          "361:     ALLOC(krb_cred_info->pname, 1);",
          "363:     ALLOC(krb_cred_info->flags, 1);",
          "365:     ALLOC(krb_cred_info->authtime, 1);",
          "",
          "[Removed Lines]",
          "358:     copy_EncryptionKey (&out_creds->session, &krb_cred_info->key);",
          "360:     copy_Realm (&out_creds->client->realm, krb_cred_info->prealm);",
          "362:     copy_PrincipalName(&out_creds->client->name, krb_cred_info->pname);",
          "",
          "[Added Lines]",
          "358:     ret = copy_EncryptionKey (&out_creds->session, &krb_cred_info->key);",
          "359:     if (ret)",
          "360:  goto out4;",
          "362:     ret = copy_Realm (&out_creds->client->realm, krb_cred_info->prealm);",
          "363:     if (ret)",
          "364:  goto out4;",
          "366:     ret = copy_PrincipalName(&out_creds->client->name, krb_cred_info->pname);",
          "367:     if (ret)",
          "368:  goto out4;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "371:     ALLOC(krb_cred_info->renew_till, 1);",
          "373:     ALLOC(krb_cred_info->srealm, 1);",
          "375:     ALLOC(krb_cred_info->sname, 1);",
          "377:     ALLOC(krb_cred_info->caddr, 1);",
          "380:     krb5_free_creds (context, out_creds);",
          "",
          "[Removed Lines]",
          "374:     copy_Realm (&out_creds->server->realm, krb_cred_info->srealm);",
          "376:     copy_PrincipalName (&out_creds->server->name, krb_cred_info->sname);",
          "378:     copy_HostAddresses (&out_creds->addresses, krb_cred_info->caddr);",
          "",
          "[Added Lines]",
          "380:     ret = copy_Realm (&out_creds->server->realm, krb_cred_info->srealm);",
          "381:     if (ret)",
          "382:  goto out4;",
          "384:     ret = copy_PrincipalName (&out_creds->server->name, krb_cred_info->sname);",
          "385:     if (ret)",
          "386:  goto out4;",
          "388:     ret = copy_HostAddresses (&out_creds->addresses, krb_cred_info->caddr);",
          "389:     if (ret)",
          "390:  goto out4;",
          "",
          "---------------"
        ],
        "lib/krb5/rd_cred.c||lib/krb5/rd_cred.c": [
          "File: lib/krb5/rd_cred.c -> lib/krb5/rd_cred.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "271:  }",
          "272:  if(creds->ticket.length != len)",
          "273:      krb5_abortx(context, \"internal error in ASN.1 encoder\");",
          "275:  if (kci->prealm && kci->pname)",
          "276:      _krb5_principalname2krb5_principal (context,",
          "277:       &creds->client,",
          "",
          "[Removed Lines]",
          "274:  copy_EncryptionKey (&kci->key, &creds->session);",
          "",
          "[Added Lines]",
          "274:  ret = copy_EncryptionKey (&kci->key, &creds->session);",
          "275:  if (ret) {",
          "276:      krb5_free_creds(context, creds);",
          "277:      goto out;",
          "278:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}