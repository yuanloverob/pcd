{
  "cve_id": "CVE-2011-4324",
  "cve_desc": "The encode_share_access function in fs/nfs/nfs4xdr.c in the Linux kernel before 2.6.29 allows local users to cause a denial of service (BUG and system crash) by using the mknod system call with a pathname on an NFSv4 filesystem.",
  "repo": "torvalds/linux",
  "patch_hash": "dc0b027dfadfcb8a5504f7d8052754bf8d501ab9",
  "patch_info": {
    "commit_hash": "dc0b027dfadfcb8a5504f7d8052754bf8d501ab9",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/dc0b027dfadfcb8a5504f7d8052754bf8d501ab9",
    "files": [
      "fs/nfs/inode.c",
      "fs/nfs/nfs4_fs.h",
      "fs/nfs/nfs4proc.c",
      "fs/nfs/nfs4state.c",
      "fs/nfs/nfs4xdr.c",
      "include/linux/nfs_fs.h",
      "include/linux/nfs_xdr.h"
    ],
    "message": "NFSv4: Convert the open and close ops to use fmode\n\nSigned-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>",
    "before_after_code_files": [
      "fs/nfs/inode.c||fs/nfs/inode.c",
      "fs/nfs/nfs4_fs.h||fs/nfs/nfs4_fs.h",
      "fs/nfs/nfs4proc.c||fs/nfs/nfs4proc.c",
      "fs/nfs/nfs4state.c||fs/nfs/nfs4state.c",
      "fs/nfs/nfs4xdr.c||fs/nfs/nfs4xdr.c",
      "include/linux/nfs_fs.h||include/linux/nfs_fs.h",
      "include/linux/nfs_xdr.h||include/linux/nfs_xdr.h"
    ]
  },
  "patch_diff": {
    "fs/nfs/inode.c||fs/nfs/inode.c": [
      "File: fs/nfs/inode.c -> fs/nfs/inode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "596: {",
      "597:  struct nfs_inode *nfsi = NFS_I(inode);",
      "598:  struct nfs_open_context *pos, *ctx = NULL;",
      "",
      "[Removed Lines]",
      "595: struct nfs_open_context *nfs_find_open_context(struct inode *inode, struct rpc_cred *cred, int mode)",
      "",
      "[Added Lines]",
      "595: struct nfs_open_context *nfs_find_open_context(struct inode *inode, struct rpc_cred *cred, fmode_t mode)",
      "",
      "---------------"
    ],
    "fs/nfs/nfs4_fs.h||fs/nfs/nfs4_fs.h": [
      "File: fs/nfs/nfs4_fs.h -> fs/nfs/nfs4_fs.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "223: extern void nfs4_put_state_owner(struct nfs4_state_owner *);",
      "224: extern struct nfs4_state * nfs4_get_open_state(struct inode *, struct nfs4_state_owner *);",
      "225: extern void nfs4_put_open_state(struct nfs4_state *);",
      "229: extern void nfs4_schedule_state_recovery(struct nfs_client *);",
      "230: extern void nfs4_schedule_state_manager(struct nfs_client *);",
      "231: extern int nfs4_state_mark_reclaim_nograce(struct nfs_client *clp, struct nfs4_state *state);",
      "",
      "[Removed Lines]",
      "226: extern void nfs4_close_state(struct path *, struct nfs4_state *, mode_t);",
      "227: extern void nfs4_close_sync(struct path *, struct nfs4_state *, mode_t);",
      "228: extern void nfs4_state_set_mode_locked(struct nfs4_state *, mode_t);",
      "",
      "[Added Lines]",
      "226: extern void nfs4_close_state(struct path *, struct nfs4_state *, fmode_t);",
      "227: extern void nfs4_close_sync(struct path *, struct nfs4_state *, fmode_t);",
      "228: extern void nfs4_state_set_mode_locked(struct nfs4_state *, fmode_t);",
      "",
      "---------------"
    ],
    "fs/nfs/nfs4proc.c||fs/nfs/nfs4proc.c": [
      "File: fs/nfs/nfs4proc.c -> fs/nfs/nfs4proc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "323: }",
      "325: static struct nfs4_opendata *nfs4_opendata_alloc(struct path *path,",
      "327:   const struct iattr *attrs)",
      "328: {",
      "329:  struct dentry *parent = dget_parent(path->dentry);",
      "",
      "[Removed Lines]",
      "326:   struct nfs4_state_owner *sp, int flags,",
      "",
      "[Added Lines]",
      "326:   struct nfs4_state_owner *sp, fmode_t fmode, int flags,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "343:  p->owner = sp;",
      "344:  atomic_inc(&sp->so_count);",
      "345:  p->o_arg.fh = NFS_FH(dir);",
      "347:  p->o_arg.clientid = server->nfs_client->cl_clientid;",
      "348:  p->o_arg.id = sp->so_owner_id.id;",
      "349:  p->o_arg.name = &p->path.dentry->d_name;",
      "",
      "[Removed Lines]",
      "346:  p->o_arg.open_flags = flags,",
      "",
      "[Added Lines]",
      "346:  p->o_arg.open_flags = flags;",
      "347:  p->o_arg.fmode = fmode & (FMODE_READ|FMODE_WRITE);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "399:  return ret;",
      "400: }",
      "403: {",
      "404:  int ret = 0;",
      "406:   case FMODE_READ:",
      "407:    ret |= test_bit(NFS_O_RDONLY_STATE, &state->flags) != 0;",
      "408:    break;",
      "",
      "[Removed Lines]",
      "402: static int can_open_cached(struct nfs4_state *state, int mode)",
      "405:  switch (mode & (FMODE_READ|FMODE_WRITE|O_EXCL)) {",
      "",
      "[Added Lines]",
      "403: static int can_open_cached(struct nfs4_state *state, fmode_t mode, int open_mode)",
      "407:  if (open_mode & O_EXCL)",
      "408:   goto out;",
      "409:  switch (mode & (FMODE_READ|FMODE_WRITE)) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "412:   case FMODE_READ|FMODE_WRITE:",
      "413:    ret |= test_bit(NFS_O_RDWR_STATE, &state->flags) != 0;",
      "414:  }",
      "415:  return ret;",
      "416: }",
      "419: {",
      "421:   return 0;",
      "422:  if (test_bit(NFS_DELEGATION_NEED_RECLAIM, &delegation->flags))",
      "423:   return 0;",
      "",
      "[Removed Lines]",
      "418: static int can_open_delegated(struct nfs_delegation *delegation, mode_t open_flags)",
      "420:  if ((delegation->type & open_flags) != open_flags)",
      "",
      "[Added Lines]",
      "419: out:",
      "423: static int can_open_delegated(struct nfs_delegation *delegation, fmode_t fmode)",
      "425:  if ((delegation->type & fmode) != fmode)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "425:  return 1;",
      "426: }",
      "429: {",
      "431:   case FMODE_WRITE:",
      "432:    state->n_wronly++;",
      "433:    break;",
      "",
      "[Removed Lines]",
      "428: static void update_open_stateflags(struct nfs4_state *state, mode_t open_flags)",
      "430:  switch (open_flags) {",
      "",
      "[Added Lines]",
      "433: static void update_open_stateflags(struct nfs4_state *state, fmode_t fmode)",
      "435:  switch (fmode) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "437:   case FMODE_READ|FMODE_WRITE:",
      "438:    state->n_rdwr++;",
      "439:  }",
      "441: }",
      "444: {",
      "445:  if (test_bit(NFS_DELEGATED_STATE, &state->flags) == 0)",
      "446:   memcpy(state->stateid.data, stateid->data, sizeof(state->stateid.data));",
      "447:  memcpy(state->open_stateid.data, stateid->data, sizeof(state->open_stateid.data));",
      "449:   case FMODE_READ:",
      "450:    set_bit(NFS_O_RDONLY_STATE, &state->flags);",
      "451:    break;",
      "",
      "[Removed Lines]",
      "440:  nfs4_state_set_mode_locked(state, state->state | open_flags);",
      "443: static void nfs_set_open_stateid_locked(struct nfs4_state *state, nfs4_stateid *stateid, int open_flags)",
      "448:  switch (open_flags) {",
      "",
      "[Added Lines]",
      "445:  nfs4_state_set_mode_locked(state, state->state | fmode);",
      "448: static void nfs_set_open_stateid_locked(struct nfs4_state *state, nfs4_stateid *stateid, fmode_t fmode)",
      "453:  switch (fmode) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "457:  }",
      "458: }",
      "461: {",
      "462:  write_seqlock(&state->seqlock);",
      "464:  write_sequnlock(&state->seqlock);",
      "465: }",
      "468: {",
      "",
      "[Removed Lines]",
      "460: static void nfs_set_open_stateid(struct nfs4_state *state, nfs4_stateid *stateid, int open_flags)",
      "463:  nfs_set_open_stateid_locked(state, stateid, open_flags);",
      "467: static void __update_open_stateid(struct nfs4_state *state, nfs4_stateid *open_stateid, const nfs4_stateid *deleg_stateid, int open_flags)",
      "",
      "[Added Lines]",
      "465: static void nfs_set_open_stateid(struct nfs4_state *state, nfs4_stateid *stateid, fmode_t fmode)",
      "468:  nfs_set_open_stateid_locked(state, stateid, fmode);",
      "472: static void __update_open_stateid(struct nfs4_state *state, nfs4_stateid *open_stateid, const nfs4_stateid *deleg_stateid, fmode_t fmode)",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "476:   set_bit(NFS_DELEGATED_STATE, &state->flags);",
      "477:  }",
      "478:  if (open_stateid != NULL)",
      "480:  write_sequnlock(&state->seqlock);",
      "481:  spin_lock(&state->owner->so_lock);",
      "483:  spin_unlock(&state->owner->so_lock);",
      "484: }",
      "487: {",
      "488:  struct nfs_inode *nfsi = NFS_I(state->inode);",
      "489:  struct nfs_delegation *deleg_cur;",
      "490:  int ret = 0;",
      "494:  rcu_read_lock();",
      "495:  deleg_cur = rcu_dereference(nfsi->delegation);",
      "",
      "[Removed Lines]",
      "479:   nfs_set_open_stateid_locked(state, open_stateid, open_flags);",
      "482:  update_open_stateflags(state, open_flags);",
      "486: static int update_open_stateid(struct nfs4_state *state, nfs4_stateid *open_stateid, nfs4_stateid *delegation, int open_flags)",
      "492:  open_flags &= (FMODE_READ|FMODE_WRITE);",
      "",
      "[Added Lines]",
      "484:   nfs_set_open_stateid_locked(state, open_stateid, fmode);",
      "487:  update_open_stateflags(state, fmode);",
      "491: static int update_open_stateid(struct nfs4_state *state, nfs4_stateid *open_stateid, nfs4_stateid *delegation, fmode_t fmode)",
      "497:  fmode &= (FMODE_READ|FMODE_WRITE);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "499:  spin_lock(&deleg_cur->lock);",
      "500:  if (nfsi->delegation != deleg_cur ||",
      "502:   goto no_delegation_unlock;",
      "504:  if (delegation == NULL)",
      "",
      "[Removed Lines]",
      "501:      (deleg_cur->type & open_flags) != open_flags)",
      "",
      "[Added Lines]",
      "506:      (deleg_cur->type & fmode) != fmode)",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "507:   goto no_delegation_unlock;",
      "509:  nfs_mark_delegation_referenced(deleg_cur);",
      "511:  ret = 1;",
      "512: no_delegation_unlock:",
      "513:  spin_unlock(&deleg_cur->lock);",
      "",
      "[Removed Lines]",
      "510:  __update_open_stateid(state, open_stateid, &deleg_cur->stateid, open_flags);",
      "",
      "[Added Lines]",
      "515:  __update_open_stateid(state, open_stateid, &deleg_cur->stateid, fmode);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "515:  rcu_read_unlock();",
      "517:  if (!ret && open_stateid != NULL) {",
      "519:   ret = 1;",
      "520:  }",
      "",
      "[Removed Lines]",
      "518:   __update_open_stateid(state, open_stateid, NULL, open_flags);",
      "",
      "[Added Lines]",
      "523:   __update_open_stateid(state, open_stateid, NULL, fmode);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "523: }",
      "527: {",
      "528:  struct nfs_delegation *delegation;",
      "530:  rcu_read_lock();",
      "531:  delegation = rcu_dereference(NFS_I(inode)->delegation);",
      "533:   rcu_read_unlock();",
      "534:   return;",
      "535:  }",
      "",
      "[Removed Lines]",
      "526: static void nfs4_return_incompatible_delegation(struct inode *inode, mode_t open_flags)",
      "532:  if (delegation == NULL || (delegation->type & open_flags) == open_flags) {",
      "",
      "[Added Lines]",
      "531: static void nfs4_return_incompatible_delegation(struct inode *inode, fmode_t fmode)",
      "537:  if (delegation == NULL || (delegation->type & fmode) == fmode) {",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "542:  struct nfs4_state *state = opendata->state;",
      "543:  struct nfs_inode *nfsi = NFS_I(state->inode);",
      "544:  struct nfs_delegation *delegation;",
      "546:  nfs4_stateid stateid;",
      "547:  int ret = -EAGAIN;",
      "549:  for (;;) {",
      "551:    spin_lock(&state->owner->so_lock);",
      "554:     spin_unlock(&state->owner->so_lock);",
      "555:     goto out_return_state;",
      "556:    }",
      "",
      "[Removed Lines]",
      "545:  int open_mode = opendata->o_arg.open_flags & (FMODE_READ|FMODE_WRITE|O_EXCL);",
      "550:   if (can_open_cached(state, open_mode)) {",
      "552:    if (can_open_cached(state, open_mode)) {",
      "553:     update_open_stateflags(state, open_mode);",
      "",
      "[Added Lines]",
      "550:  int open_mode = opendata->o_arg.open_flags & O_EXCL;",
      "551:  fmode_t fmode = opendata->o_arg.fmode;",
      "556:   if (can_open_cached(state, fmode, open_mode)) {",
      "558:    if (can_open_cached(state, fmode, open_mode)) {",
      "559:     update_open_stateflags(state, fmode);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "559:   rcu_read_lock();",
      "560:   delegation = rcu_dereference(nfsi->delegation);",
      "561:   if (delegation == NULL ||",
      "563:    rcu_read_unlock();",
      "564:    break;",
      "565:   }",
      "",
      "[Removed Lines]",
      "562:       !can_open_delegated(delegation, open_mode)) {",
      "",
      "[Added Lines]",
      "568:       !can_open_delegated(delegation, fmode)) {",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "572:   ret = -EAGAIN;",
      "576:    goto out_return_state;",
      "577:  }",
      "578: out:",
      "",
      "[Removed Lines]",
      "575:   if (update_open_stateid(state, NULL, &stateid, open_mode))",
      "",
      "[Added Lines]",
      "581:   if (update_open_stateid(state, NULL, &stateid, fmode))",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "624:  }",
      "626:  update_open_stateid(state, &data->o_res.stateid, NULL,",
      "628:  iput(inode);",
      "629: out:",
      "630:  return state;",
      "",
      "[Removed Lines]",
      "627:    data->o_arg.open_flags);",
      "",
      "[Added Lines]",
      "633:    data->o_arg.fmode);",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "655: {",
      "656:  struct nfs4_opendata *opendata;",
      "659:  if (opendata == NULL)",
      "660:   return ERR_PTR(-ENOMEM);",
      "661:  opendata->state = state;",
      "",
      "[Removed Lines]",
      "658:  opendata = nfs4_opendata_alloc(&ctx->path, state->owner, 0, NULL);",
      "",
      "[Added Lines]",
      "664:  opendata = nfs4_opendata_alloc(&ctx->path, state->owner, 0, 0, NULL);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "663:  return opendata;",
      "664: }",
      "667: {",
      "668:  struct nfs4_state *newstate;",
      "669:  int ret;",
      "672:  memset(&opendata->o_res, 0, sizeof(opendata->o_res));",
      "673:  memset(&opendata->c_res, 0, sizeof(opendata->c_res));",
      "674:  nfs4_init_opendata_res(opendata);",
      "",
      "[Removed Lines]",
      "666: static int nfs4_open_recover_helper(struct nfs4_opendata *opendata, mode_t openflags, struct nfs4_state **res)",
      "671:  opendata->o_arg.open_flags = openflags;",
      "",
      "[Added Lines]",
      "672: static int nfs4_open_recover_helper(struct nfs4_opendata *opendata, fmode_t fmode, struct nfs4_state **res)",
      "677:  opendata->o_arg.open_flags = 0;",
      "678:  opendata->o_arg.fmode = fmode;",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "678:  newstate = nfs4_opendata_to_nfs4_state(opendata);",
      "679:  if (IS_ERR(newstate))",
      "680:   return PTR_ERR(newstate);",
      "683:  return 0;",
      "684: }",
      "",
      "[Removed Lines]",
      "681:  nfs4_close_state(&opendata->path, newstate, openflags);",
      "",
      "[Added Lines]",
      "688:  nfs4_close_state(&opendata->path, newstate, fmode);",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "734: {",
      "735:  struct nfs_delegation *delegation;",
      "736:  struct nfs4_opendata *opendata;",
      "738:  int status;",
      "740:  opendata = nfs4_open_recoverdata_alloc(ctx, state);",
      "",
      "[Removed Lines]",
      "737:  int delegation_type = 0;",
      "",
      "[Added Lines]",
      "744:  fmode_t delegation_type = 0;",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "847:   goto out_free;",
      "848:  state = nfs4_opendata_to_nfs4_state(data);",
      "849:  if (!IS_ERR(state))",
      "851: out_free:",
      "852:  nfs4_opendata_put(data);",
      "853: }",
      "",
      "[Removed Lines]",
      "850:   nfs4_close_state(&data->path, state, data->o_arg.open_flags);",
      "",
      "[Added Lines]",
      "857:   nfs4_close_state(&data->path, state, data->o_arg.fmode);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "911:  if (data->state != NULL) {",
      "912:   struct nfs_delegation *delegation;",
      "915:    goto out_no_action;",
      "916:   rcu_read_lock();",
      "917:   delegation = rcu_dereference(NFS_I(data->state->inode)->delegation);",
      "",
      "[Removed Lines]",
      "914:   if (can_open_cached(data->state, data->o_arg.open_flags & (FMODE_READ|FMODE_WRITE|O_EXCL)))",
      "",
      "[Added Lines]",
      "921:   if (can_open_cached(data->state, data->o_arg.fmode, data->o_arg.open_flags))",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "980:   goto out_free;",
      "981:  state = nfs4_opendata_to_nfs4_state(data);",
      "982:  if (!IS_ERR(state))",
      "984: out_free:",
      "985:  nfs4_opendata_put(data);",
      "986: }",
      "",
      "[Removed Lines]",
      "983:   nfs4_close_state(&data->path, state, data->o_arg.open_flags);",
      "",
      "[Added Lines]",
      "990:   nfs4_close_state(&data->path, state, data->o_arg.fmode);",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "1139: {",
      "1140:  struct nfs4_state_owner  *sp;",
      "1141:  struct nfs4_state     *state = NULL;",
      "",
      "[Removed Lines]",
      "1138: static int _nfs4_do_open(struct inode *dir, struct path *path, int flags, struct iattr *sattr, struct rpc_cred *cred, struct nfs4_state **res)",
      "",
      "[Added Lines]",
      "1145: static int _nfs4_do_open(struct inode *dir, struct path *path, fmode_t fmode, int flags, struct iattr *sattr, struct rpc_cred *cred, struct nfs4_state **res)",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "1153:  if (status != 0)",
      "1154:   goto err_put_state_owner;",
      "1155:  if (path->dentry->d_inode != NULL)",
      "1157:  status = -ENOMEM;",
      "1159:  if (opendata == NULL)",
      "1160:   goto err_put_state_owner;",
      "",
      "[Removed Lines]",
      "1156:   nfs4_return_incompatible_delegation(path->dentry->d_inode, flags & (FMODE_READ|FMODE_WRITE));",
      "1158:  opendata = nfs4_opendata_alloc(path, sp, flags, sattr);",
      "",
      "[Added Lines]",
      "1163:   nfs4_return_incompatible_delegation(path->dentry->d_inode, fmode);",
      "1165:  opendata = nfs4_opendata_alloc(path, sp, fmode, flags, sattr);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "1187: }",
      "1191: {",
      "1192:  struct nfs4_exception exception = { };",
      "1193:  struct nfs4_state *res;",
      "1194:  int status;",
      "1196:  do {",
      "1198:   if (status == 0)",
      "1199:    break;",
      "",
      "[Removed Lines]",
      "1190: static struct nfs4_state *nfs4_do_open(struct inode *dir, struct path *path, int flags, struct iattr *sattr, struct rpc_cred *cred)",
      "1197:   status = _nfs4_do_open(dir, path, flags, sattr, cred, &res);",
      "",
      "[Added Lines]",
      "1197: static struct nfs4_state *nfs4_do_open(struct inode *dir, struct path *path, fmode_t fmode, int flags, struct iattr *sattr, struct rpc_cred *cred)",
      "1204:   status = _nfs4_do_open(dir, path, fmode, flags, sattr, cred, &res);",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "1332:   case -NFS4ERR_OLD_STATEID:",
      "1333:   case -NFS4ERR_BAD_STATEID:",
      "1334:   case -NFS4ERR_EXPIRED:",
      "1336:     break;",
      "1337:   default:",
      "1338:    if (nfs4_async_handle_error(task, server, state) == -EAGAIN) {",
      "",
      "[Removed Lines]",
      "1335:    if (calldata->arg.open_flags == 0)",
      "",
      "[Added Lines]",
      "1342:    if (calldata->arg.fmode == 0)",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "1374:  nfs_fattr_init(calldata->res.fattr);",
      "1375:  if (test_bit(NFS_O_RDONLY_STATE, &state->flags) != 0) {",
      "1376:   task->tk_msg.rpc_proc = &nfs4_procedures[NFSPROC4_CLNT_OPEN_DOWNGRADE];",
      "1378:  } else if (test_bit(NFS_O_WRONLY_STATE, &state->flags) != 0) {",
      "1379:   task->tk_msg.rpc_proc = &nfs4_procedures[NFSPROC4_CLNT_OPEN_DOWNGRADE];",
      "1381:  }",
      "1382:  calldata->timestamp = jiffies;",
      "1383:  rpc_call_start(task);",
      "",
      "[Removed Lines]",
      "1377:   calldata->arg.open_flags = FMODE_READ;",
      "1380:   calldata->arg.open_flags = FMODE_WRITE;",
      "",
      "[Added Lines]",
      "1384:   calldata->arg.fmode = FMODE_READ;",
      "1387:   calldata->arg.fmode = FMODE_WRITE;",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "1430:  calldata->arg.seqid = nfs_alloc_seqid(&state->owner->so_seqid);",
      "1431:  if (calldata->arg.seqid == NULL)",
      "1432:   goto out_free_calldata;",
      "1434:  calldata->arg.bitmask = server->attr_bitmask;",
      "1435:  calldata->res.fattr = &calldata->fattr;",
      "1436:  calldata->res.seqid = calldata->arg.seqid;",
      "",
      "[Removed Lines]",
      "1433:  calldata->arg.open_flags = 0;",
      "",
      "[Added Lines]",
      "1440:  calldata->arg.fmode = 0;",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "1457:  return status;",
      "1458: }",
      "1461: {",
      "1462:  struct file *filp;",
      "1463:  int ret;",
      "1467:   ret = nfs_may_open(state->inode,",
      "1468:     state->owner->so_cred,",
      "1469:     nd->intent.open.flags);",
      "",
      "[Removed Lines]",
      "1460: static int nfs4_intent_set_file(struct nameidata *nd, struct path *path, struct nfs4_state *state)",
      "1466:  if (nd->intent.open.flags & FMODE_EXEC) {",
      "",
      "[Added Lines]",
      "1467: static int nfs4_intent_set_file(struct nameidata *nd, struct path *path, struct nfs4_state *state, fmode_t fmode)",
      "1473:  if (fmode & FMODE_EXEC) {",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "1479:  }",
      "1480:  ret = PTR_ERR(filp);",
      "1481: out_close:",
      "1483:  return ret;",
      "1484: }",
      "",
      "[Removed Lines]",
      "1482:  nfs4_close_sync(path, state, nd->intent.open.flags);",
      "",
      "[Added Lines]",
      "1489:  nfs4_close_sync(path, state, fmode & (FMODE_READ|FMODE_WRITE));",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "1495:  struct rpc_cred *cred;",
      "1496:  struct nfs4_state *state;",
      "1497:  struct dentry *res;",
      "1499:  if (nd->flags & LOOKUP_CREATE) {",
      "1500:   attr.ia_mode = nd->intent.open.create_mode;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1505:  fmode_t fmode = nd->intent.open.flags & (FMODE_READ | FMODE_WRITE | FMODE_EXEC);",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "1512:  parent = dentry->d_parent;",
      "1514:  nfs_block_sillyrename(parent);",
      "1516:  put_rpccred(cred);",
      "1517:  if (IS_ERR(state)) {",
      "1518:   if (PTR_ERR(state) == -ENOENT) {",
      "",
      "[Removed Lines]",
      "1515:  state = nfs4_do_open(dir, &path, nd->intent.open.flags, &attr, cred);",
      "",
      "[Added Lines]",
      "1523:  state = nfs4_do_open(dir, &path, fmode, nd->intent.open.flags, &attr, cred);",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "1527:   path.dentry = res;",
      "1528:  nfs_set_verifier(path.dentry, nfs_save_change_attribute(dir));",
      "1529:  nfs_unblock_sillyrename(parent);",
      "1531:  return res;",
      "1532: }",
      "",
      "[Removed Lines]",
      "1530:  nfs4_intent_set_file(nd, &path, state);",
      "",
      "[Added Lines]",
      "1538:  nfs4_intent_set_file(nd, &path, state, fmode);",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "1540:  };",
      "1541:  struct rpc_cred *cred;",
      "1542:  struct nfs4_state *state;",
      "1544:  cred = rpc_lookup_cred();",
      "1545:  if (IS_ERR(cred))",
      "1546:   return PTR_ERR(cred);",
      "1548:  put_rpccred(cred);",
      "1549:  if (IS_ERR(state)) {",
      "1550:   switch (PTR_ERR(state)) {",
      "",
      "[Removed Lines]",
      "1547:  state = nfs4_do_open(dir, &path, openflags, NULL, cred);",
      "",
      "[Added Lines]",
      "1551:  fmode_t fmode = openflags & (FMODE_READ | FMODE_WRITE);",
      "1556:  state = nfs4_do_open(dir, &path, fmode, openflags, NULL, cred);",
      "",
      "---------------",
      "--- Hunk 36 ---",
      "[Context before]",
      "1561:  }",
      "1562:  if (state->inode == dentry->d_inode) {",
      "1563:   nfs_set_verifier(dentry, nfs_save_change_attribute(dir));",
      "1565:   return 1;",
      "1566:  }",
      "1568: out_drop:",
      "1569:  d_drop(dentry);",
      "1570:  return 0;",
      "",
      "[Removed Lines]",
      "1564:   nfs4_intent_set_file(nd, &path, state);",
      "1567:  nfs4_close_sync(&path, state, openflags);",
      "",
      "[Added Lines]",
      "1573:   nfs4_intent_set_file(nd, &path, state, fmode);",
      "1576:  nfs4_close_sync(&path, state, fmode);",
      "",
      "---------------",
      "--- Hunk 37 ---",
      "[Context before]",
      "1990:  };",
      "1991:  struct nfs4_state *state;",
      "1992:  struct rpc_cred *cred;",
      "1993:  int status = 0;",
      "1995:  cred = rpc_lookup_cred();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2002:  fmode_t fmode = flags & (FMODE_READ | FMODE_WRITE);",
      "",
      "---------------",
      "--- Hunk 38 ---",
      "[Context before]",
      "1997:   status = PTR_ERR(cred);",
      "1998:   goto out;",
      "1999:  }",
      "2001:  d_drop(dentry);",
      "2002:  if (IS_ERR(state)) {",
      "2003:   status = PTR_ERR(state);",
      "",
      "[Removed Lines]",
      "2000:  state = nfs4_do_open(dir, &path, flags, sattr, cred);",
      "",
      "[Added Lines]",
      "2010:  state = nfs4_do_open(dir, &path, fmode, flags, sattr, cred);",
      "",
      "---------------",
      "--- Hunk 39 ---",
      "[Context before]",
      "2013:   nfs_post_op_update_inode(state->inode, &fattr);",
      "2014:  }",
      "2015:  if (status == 0 && (nd->flags & LOOKUP_OPEN) != 0)",
      "2017:  else",
      "2019: out_putcred:",
      "2020:  put_rpccred(cred);",
      "2021: out:",
      "",
      "[Removed Lines]",
      "2016:   status = nfs4_intent_set_file(nd, &path, state);",
      "2018:   nfs4_close_sync(&path, state, flags);",
      "",
      "[Added Lines]",
      "2026:   status = nfs4_intent_set_file(nd, &path, state, fmode);",
      "2028:   nfs4_close_sync(&path, state, fmode);",
      "",
      "---------------"
    ],
    "fs/nfs/nfs4state.c||fs/nfs/nfs4state.c": [
      "File: fs/nfs/nfs4state.c -> fs/nfs/nfs4state.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "363: }",
      "365: void",
      "367: {",
      "369:   return;",
      "373:    list_move(&state->open_states, &state->owner->so_states);",
      "374:   else",
      "375:    list_move_tail(&state->open_states, &state->owner->so_states);",
      "376:  }",
      "378: }",
      "380: static struct nfs4_state *",
      "",
      "[Removed Lines]",
      "366: nfs4_state_set_mode_locked(struct nfs4_state *state, mode_t mode)",
      "368:  if (state->state == mode)",
      "371:  if ((mode & FMODE_WRITE) != (state->state & FMODE_WRITE)) {",
      "372:   if (mode & FMODE_WRITE)",
      "377:  state->state = mode;",
      "",
      "[Added Lines]",
      "366: nfs4_state_set_mode_locked(struct nfs4_state *state, fmode_t fmode)",
      "368:  if (state->state == fmode)",
      "371:  if ((fmode & FMODE_WRITE) != (state->state & FMODE_WRITE)) {",
      "372:   if (fmode & FMODE_WRITE)",
      "377:  state->state = fmode;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "458: {",
      "459:  struct nfs4_state_owner *owner = state->owner;",
      "460:  int call_close = 0;",
      "463:  atomic_inc(&owner->so_count);",
      "465:  spin_lock(&owner->so_lock);",
      "467:   case FMODE_READ:",
      "468:    state->n_rdonly--;",
      "469:    break;",
      "",
      "[Removed Lines]",
      "457: static void __nfs4_close(struct path *path, struct nfs4_state *state, mode_t mode, int wait)",
      "461:  int newstate;",
      "466:  switch (mode & (FMODE_READ | FMODE_WRITE)) {",
      "",
      "[Added Lines]",
      "457: static void __nfs4_close(struct path *path, struct nfs4_state *state, fmode_t fmode, int wait)",
      "461:  fmode_t newstate;",
      "466:  switch (fmode & (FMODE_READ | FMODE_WRITE)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "498:   nfs4_do_close(path, state, wait);",
      "499: }",
      "502: {",
      "504: }",
      "507: {",
      "509: }",
      "",
      "[Removed Lines]",
      "501: void nfs4_close_state(struct path *path, struct nfs4_state *state, mode_t mode)",
      "503:  __nfs4_close(path, state, mode, 0);",
      "506: void nfs4_close_sync(struct path *path, struct nfs4_state *state, mode_t mode)",
      "508:  __nfs4_close(path, state, mode, 1);",
      "",
      "[Added Lines]",
      "501: void nfs4_close_state(struct path *path, struct nfs4_state *state, fmode_t fmode)",
      "503:  __nfs4_close(path, state, fmode, 0);",
      "506: void nfs4_close_sync(struct path *path, struct nfs4_state *state, fmode_t fmode)",
      "508:  __nfs4_close(path, state, fmode, 1);",
      "",
      "---------------"
    ],
    "fs/nfs/nfs4xdr.c||fs/nfs/nfs4xdr.c": [
      "File: fs/nfs/nfs4xdr.c -> fs/nfs/nfs4xdr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "953:  return 0;",
      "954: }",
      "957: {",
      "958:  __be32 *p;",
      "960:  RESERVE_SPACE(8);",
      "962:   case FMODE_READ:",
      "963:    WRITE32(NFS4_SHARE_ACCESS_READ);",
      "964:    break;",
      "",
      "[Removed Lines]",
      "956: static void encode_share_access(struct xdr_stream *xdr, int open_flags)",
      "961:  switch (open_flags & (FMODE_READ|FMODE_WRITE)) {",
      "",
      "[Added Lines]",
      "956: static void encode_share_access(struct xdr_stream *xdr, fmode_t fmode)",
      "961:  switch (fmode & (FMODE_READ|FMODE_WRITE)) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "969:    WRITE32(NFS4_SHARE_ACCESS_BOTH);",
      "970:    break;",
      "971:   default:",
      "973:  }",
      "975: }",
      "",
      "[Removed Lines]",
      "972:    BUG();",
      "",
      "[Added Lines]",
      "972:    WRITE32(0);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "984:  RESERVE_SPACE(8);",
      "985:  WRITE32(OP_OPEN);",
      "986:  WRITE32(arg->seqid->sequence->counter);",
      "988:  RESERVE_SPACE(28);",
      "989:  WRITE64(arg->clientid);",
      "990:  WRITE32(16);",
      "",
      "[Removed Lines]",
      "987:  encode_share_access(xdr, arg->open_flags);",
      "",
      "[Added Lines]",
      "987:  encode_share_access(xdr, arg->fmode);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1112:  WRITE32(OP_OPEN_DOWNGRADE);",
      "1113:  WRITEMEM(arg->stateid->data, NFS4_STATEID_SIZE);",
      "1114:  WRITE32(arg->seqid->sequence->counter);",
      "1116:  return 0;",
      "1117: }",
      "",
      "[Removed Lines]",
      "1115:  encode_share_access(xdr, arg->open_flags);",
      "",
      "[Added Lines]",
      "1115:  encode_share_access(xdr, arg->fmode);",
      "",
      "---------------"
    ],
    "include/linux/nfs_fs.h||include/linux/nfs_fs.h": [
      "File: include/linux/nfs_fs.h -> include/linux/nfs_fs.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "83:  struct rpc_cred *cred;",
      "84:  struct nfs4_state *state;",
      "85:  fl_owner_t lockowner;",
      "88:  unsigned long flags;",
      "89: #define NFS_CONTEXT_ERROR_WRITE  (0)",
      "",
      "[Removed Lines]",
      "86:  int mode;",
      "",
      "[Added Lines]",
      "86:  fmode_t mode;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "342: extern void nfs_setattr_update_inode(struct inode *inode, struct iattr *attr);",
      "343: extern struct nfs_open_context *get_nfs_open_context(struct nfs_open_context *ctx);",
      "344: extern void put_nfs_open_context(struct nfs_open_context *ctx);",
      "346: extern u64 nfs_compat_user_ino64(u64 fileid);",
      "347: extern void nfs_fattr_init(struct nfs_fattr *fattr);",
      "",
      "[Removed Lines]",
      "345: extern struct nfs_open_context *nfs_find_open_context(struct inode *inode, struct rpc_cred *cred, int mode);",
      "",
      "[Added Lines]",
      "345: extern struct nfs_open_context *nfs_find_open_context(struct inode *inode, struct rpc_cred *cred, fmode_t mode);",
      "",
      "---------------"
    ],
    "include/linux/nfs_xdr.h||include/linux/nfs_xdr.h": [
      "File: include/linux/nfs_xdr.h -> include/linux/nfs_xdr.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "120:  const struct nfs_fh * fh;",
      "121:  struct nfs_seqid * seqid;",
      "122:  int   open_flags;",
      "123:  __u64                   clientid;",
      "124:  __u64                   id;",
      "125:  union {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "123:  fmode_t   fmode;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "171:  struct nfs_fh *         fh;",
      "172:  nfs4_stateid *  stateid;",
      "173:  struct nfs_seqid * seqid;",
      "175:  const u32 *  bitmask;",
      "176: };",
      "",
      "[Removed Lines]",
      "174:  int   open_flags;",
      "",
      "[Added Lines]",
      "175:  fmode_t   fmode;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "343104308a33c4f1e23c8e841ede95e97b870842",
      "candidate_info": {
        "commit_hash": "343104308a33c4f1e23c8e841ede95e97b870842",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/343104308a33c4f1e23c8e841ede95e97b870842",
        "files": [
          "fs/nfs/delegation.c",
          "fs/nfs/delegation.h",
          "fs/nfs/nfs4proc.c"
        ],
        "message": "NFSv4: Fix up another delegation related race\n\nWhen we can update_open_stateid(), we need to be certain that we don't\nrace with a delegation return. While we could do this by grabbing the\nnfs_client->cl_lock, a dedicated spin lock in the delegation structure\nwill scale better.\n\nSigned-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>",
        "before_after_code_files": [
          "fs/nfs/delegation.c||fs/nfs/delegation.c",
          "fs/nfs/delegation.h||fs/nfs/delegation.h",
          "fs/nfs/nfs4proc.c||fs/nfs/nfs4proc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/nfs/nfs4proc.c||fs/nfs/nfs4proc.c"
          ],
          "candidate": [
            "fs/nfs/nfs4proc.c||fs/nfs/nfs4proc.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/nfs/delegation.c||fs/nfs/delegation.c": [
          "File: fs/nfs/delegation.c -> fs/nfs/delegation.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "141:  if (delegation == NULL)",
          "142:   goto nomatch;",
          "143:  if (stateid != NULL && memcmp(delegation->stateid.data, stateid->data,",
          "144:     sizeof(delegation->stateid.data)) != 0)",
          "146:  list_del_rcu(&delegation->super_list);",
          "147:  nfsi->delegation_state = 0;",
          "148:  rcu_assign_pointer(nfsi->delegation, NULL);",
          "149:  return delegation;",
          "150: nomatch:",
          "151:  return NULL;",
          "152: }",
          "",
          "[Removed Lines]",
          "145:   goto nomatch;",
          "",
          "[Added Lines]",
          "143:  spin_lock(&delegation->lock);",
          "146:   goto nomatch_unlock;",
          "150:  spin_unlock(&delegation->lock);",
          "152: nomatch_unlock:",
          "153:  spin_unlock(&delegation->lock);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "172:  delegation->change_attr = nfsi->change_attr;",
          "173:  delegation->cred = get_rpccred(cred);",
          "174:  delegation->inode = inode;",
          "176:  spin_lock(&clp->cl_lock);",
          "177:  if (rcu_dereference(nfsi->delegation) != NULL) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179:  spin_lock_init(&delegation->lock);",
          "",
          "---------------"
        ],
        "fs/nfs/delegation.h||fs/nfs/delegation.h": [
          "File: fs/nfs/delegation.h -> fs/nfs/delegation.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:  long flags;",
          "23:  loff_t maxsize;",
          "24:  __u64 change_attr;",
          "25:  struct rcu_head rcu;",
          "26: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:  spinlock_t lock;",
          "",
          "---------------"
        ],
        "fs/nfs/nfs4proc.c||fs/nfs/nfs4proc.c": [
          "File: fs/nfs/nfs4proc.c -> fs/nfs/nfs4proc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "388:  write_sequnlock(&state->seqlock);",
          "389: }",
          "392: {",
          "",
          "[Removed Lines]",
          "391: static void update_open_stateid(struct nfs4_state *state, nfs4_stateid *open_stateid, nfs4_stateid *deleg_stateid, int open_flags)",
          "393:  open_flags &= (FMODE_READ|FMODE_WRITE);",
          "",
          "[Added Lines]",
          "391: static void __update_open_stateid(struct nfs4_state *state, nfs4_stateid *open_stateid, const nfs4_stateid *deleg_stateid, int open_flags)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "408:  spin_unlock(&state->owner->so_lock);",
          "409: }",
          "411: static void nfs4_return_incompatible_delegation(struct inode *inode, mode_t open_flags)",
          "412: {",
          "413:  struct nfs_delegation *delegation;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "410: static int update_open_stateid(struct nfs4_state *state, nfs4_stateid *open_stateid, nfs4_stateid *delegation, int open_flags)",
          "411: {",
          "412:  struct nfs_inode *nfsi = NFS_I(state->inode);",
          "413:  struct nfs_delegation *deleg_cur;",
          "414:  int ret = 0;",
          "416:  open_flags &= (FMODE_READ|FMODE_WRITE);",
          "418:  rcu_read_lock();",
          "419:  deleg_cur = rcu_dereference(nfsi->delegation);",
          "420:  if (deleg_cur == NULL)",
          "421:   goto no_delegation;",
          "423:  spin_lock(&deleg_cur->lock);",
          "424:  if (nfsi->delegation != deleg_cur ||",
          "425:      (deleg_cur->type & open_flags) != open_flags)",
          "426:   goto no_delegation_unlock;",
          "428:  if (delegation == NULL)",
          "429:   delegation = &deleg_cur->stateid;",
          "430:  else if (memcmp(deleg_cur->stateid.data, delegation->data, NFS4_STATEID_SIZE) != 0)",
          "431:   goto no_delegation_unlock;",
          "433:  __update_open_stateid(state, open_stateid, &deleg_cur->stateid, open_flags);",
          "434:  ret = 1;",
          "435: no_delegation_unlock:",
          "436:  spin_unlock(&deleg_cur->lock);",
          "437: no_delegation:",
          "438:  rcu_read_unlock();",
          "440:  if (!ret && open_stateid != NULL) {",
          "441:   __update_open_stateid(state, open_stateid, NULL, open_flags);",
          "442:   ret = 1;",
          "443:  }",
          "445:  return ret;",
          "446: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "431:  nfs4_stateid stateid;",
          "432:  int ret = -EAGAIN;",
          "436:  for (;;) {",
          "437:   if (can_open_cached(state, open_mode)) {",
          "438:    spin_lock(&state->owner->so_lock);",
          "439:    if (can_open_cached(state, open_mode)) {",
          "440:     update_open_stateflags(state, open_mode);",
          "441:     spin_unlock(&state->owner->so_lock);",
          "443:     goto out_return_state;",
          "444:    }",
          "445:    spin_unlock(&state->owner->so_lock);",
          "446:   }",
          "450:    break;",
          "452:   memcpy(stateid.data, delegation->stateid.data, sizeof(stateid.data));",
          "453:   rcu_read_unlock();",
          "",
          "[Removed Lines]",
          "434:  rcu_read_lock();",
          "435:  delegation = rcu_dereference(nfsi->delegation);",
          "442:     rcu_read_unlock();",
          "447:   if (delegation == NULL)",
          "448:    break;",
          "449:   if (!can_open_delegated(delegation, open_mode))",
          "",
          "[Added Lines]",
          "482:   rcu_read_lock();",
          "483:   delegation = rcu_dereference(nfsi->delegation);",
          "484:   if (delegation == NULL ||",
          "485:       !can_open_delegated(delegation, open_mode)) {",
          "486:    rcu_read_unlock();",
          "488:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "455:   if (ret != 0)",
          "456:    goto out;",
          "457:   ret = -EAGAIN;",
          "469:  }",
          "471: out:",
          "472:  return ERR_PTR(ret);",
          "473: out_return_state:",
          "",
          "[Removed Lines]",
          "458:   rcu_read_lock();",
          "459:   delegation = rcu_dereference(nfsi->delegation);",
          "461:   if (delegation == NULL)",
          "462:    continue;",
          "464:   if (memcmp(stateid.data, delegation->stateid.data, sizeof(stateid.data)) != 0)",
          "465:    continue;",
          "466:   rcu_read_unlock();",
          "467:   update_open_stateid(state, NULL, &stateid, open_mode);",
          "468:   goto out_return_state;",
          "470:  rcu_read_unlock();",
          "",
          "[Added Lines]",
          "498:   if (update_open_stateid(state, NULL, &stateid, open_mode))",
          "499:    goto out_return_state;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "480:  struct inode *inode;",
          "481:  struct nfs4_state *state = NULL;",
          "482:  struct nfs_delegation *delegation;",
          "484:  int ret;",
          "486:  if (!data->rpc_done) {",
          "",
          "[Removed Lines]",
          "483:  nfs4_stateid *deleg_stateid = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "516:      data->owner->so_cred,",
          "517:      &data->o_res);",
          "518:  }",
          "525:  iput(inode);",
          "526: out:",
          "527:  return state;",
          "",
          "[Removed Lines]",
          "519:  rcu_read_lock();",
          "520:  delegation = rcu_dereference(NFS_I(inode)->delegation);",
          "521:  if (delegation != NULL)",
          "522:   deleg_stateid = &delegation->stateid;",
          "523:  update_open_stateid(state, &data->o_res.stateid, deleg_stateid, data->o_arg.open_flags);",
          "524:  rcu_read_unlock();",
          "",
          "[Added Lines]",
          "549:  update_open_stateid(state, &data->o_res.stateid, NULL,",
          "550:    data->o_arg.open_flags);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "05d564fe00c05bf8ff93948057ca1acb5bc68e10",
      "candidate_info": {
        "commit_hash": "05d564fe00c05bf8ff93948057ca1acb5bc68e10",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/05d564fe00c05bf8ff93948057ca1acb5bc68e10",
        "files": [
          "fs/nfs/nfs4xdr.c"
        ],
        "message": "NFS: fix tabs in nfs4xdr.c\n\nSigned-off-by: Andy Adamson<andros@netapp.com>\nSigned-off-by: Benny Halevy <bhalevy@panasas.com>\nSigned-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>",
        "before_after_code_files": [
          "fs/nfs/nfs4xdr.c||fs/nfs/nfs4xdr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/nfs/nfs4xdr.c||fs/nfs/nfs4xdr.c"
          ],
          "candidate": [
            "fs/nfs/nfs4xdr.c||fs/nfs/nfs4xdr.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/nfs/nfs4xdr.c||fs/nfs/nfs4xdr.c": [
          "File: fs/nfs/nfs4xdr.c -> fs/nfs/nfs4xdr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "755: {",
          "756:  __be32 *p;",
          "764: }",
          "766: static int encode_create(struct xdr_stream *xdr, const struct nfs4_create_arg *create)",
          "",
          "[Removed Lines]",
          "758:         RESERVE_SPACE(16);",
          "759:         WRITE32(OP_COMMIT);",
          "760:         WRITE64(args->offset);",
          "761:         WRITE32(args->count);",
          "763:         return 0;",
          "",
          "[Added Lines]",
          "758:  RESERVE_SPACE(16);",
          "759:  WRITE32(OP_COMMIT);",
          "760:  WRITE64(args->offset);",
          "761:  WRITE32(args->count);",
          "763:  return 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "798: static int encode_getattr_one(struct xdr_stream *xdr, uint32_t bitmap)",
          "799: {",
          "807: }",
          "809: static int encode_getattr_two(struct xdr_stream *xdr, uint32_t bm0, uint32_t bm1)",
          "810: {",
          "819: }",
          "821: static int encode_getfattr(struct xdr_stream *xdr, const u32* bitmask)",
          "",
          "[Removed Lines]",
          "800:         __be32 *p;",
          "802:         RESERVE_SPACE(12);",
          "803:         WRITE32(OP_GETATTR);",
          "804:         WRITE32(1);",
          "805:         WRITE32(bitmap);",
          "806:         return 0;",
          "811:         __be32 *p;",
          "813:         RESERVE_SPACE(16);",
          "814:         WRITE32(OP_GETATTR);",
          "815:         WRITE32(2);",
          "816:         WRITE32(bm0);",
          "817:         WRITE32(bm1);",
          "818:         return 0;",
          "",
          "[Added Lines]",
          "800:  __be32 *p;",
          "802:  RESERVE_SPACE(12);",
          "803:  WRITE32(OP_GETATTR);",
          "804:  WRITE32(1);",
          "805:  WRITE32(bitmap);",
          "806:  return 0;",
          "811:  __be32 *p;",
          "813:  RESERVE_SPACE(16);",
          "814:  WRITE32(OP_GETATTR);",
          "815:  WRITE32(2);",
          "816:  WRITE32(bm0);",
          "817:  WRITE32(bm1);",
          "818:  return 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "960:  RESERVE_SPACE(8);",
          "961:  switch (fmode & (FMODE_READ|FMODE_WRITE)) {",
          "973:  }",
          "975: }",
          "",
          "[Removed Lines]",
          "962:   case FMODE_READ:",
          "963:    WRITE32(NFS4_SHARE_ACCESS_READ);",
          "964:    break;",
          "965:   case FMODE_WRITE:",
          "966:    WRITE32(NFS4_SHARE_ACCESS_WRITE);",
          "967:    break;",
          "968:   case FMODE_READ|FMODE_WRITE:",
          "969:    WRITE32(NFS4_SHARE_ACCESS_BOTH);",
          "970:    break;",
          "971:   default:",
          "972:    WRITE32(0);",
          "",
          "[Added Lines]",
          "962:  case FMODE_READ:",
          "963:   WRITE32(NFS4_SHARE_ACCESS_READ);",
          "964:   break;",
          "965:  case FMODE_WRITE:",
          "966:   WRITE32(NFS4_SHARE_ACCESS_WRITE);",
          "967:   break;",
          "968:  case FMODE_READ|FMODE_WRITE:",
          "969:   WRITE32(NFS4_SHARE_ACCESS_BOTH);",
          "970:   break;",
          "971:  default:",
          "972:   WRITE32(0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "999:  RESERVE_SPACE(4);",
          "1000:  switch(arg->open_flags & O_EXCL) {",
          "1008:  }",
          "1009: }",
          "",
          "[Removed Lines]",
          "1001:   case 0:",
          "1002:    WRITE32(NFS4_CREATE_UNCHECKED);",
          "1003:    encode_attrs(xdr, arg->u.attrs, arg->server);",
          "1004:    break;",
          "1005:   default:",
          "1006:    WRITE32(NFS4_CREATE_EXCLUSIVE);",
          "1007:    encode_nfs4_verifier(xdr, &arg->u.verifier);",
          "",
          "[Added Lines]",
          "1001:  case 0:",
          "1002:   WRITE32(NFS4_CREATE_UNCHECKED);",
          "1003:   encode_attrs(xdr, arg->u.attrs, arg->server);",
          "1004:   break;",
          "1005:  default:",
          "1006:   WRITE32(NFS4_CREATE_EXCLUSIVE);",
          "1007:   encode_nfs4_verifier(xdr, &arg->u.verifier);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1015:  RESERVE_SPACE(4);",
          "1016:  switch (arg->open_flags & O_CREAT) {",
          "1024:  }",
          "1025: }",
          "",
          "[Removed Lines]",
          "1017:   case 0:",
          "1018:    WRITE32(NFS4_OPEN_NOCREATE);",
          "1019:    break;",
          "1020:   default:",
          "1021:    BUG_ON(arg->claim != NFS4_OPEN_CLAIM_NULL);",
          "1022:    WRITE32(NFS4_OPEN_CREATE);",
          "1023:    encode_createmode(xdr, arg);",
          "",
          "[Added Lines]",
          "1017:  case 0:",
          "1018:   WRITE32(NFS4_OPEN_NOCREATE);",
          "1019:   break;",
          "1020:  default:",
          "1021:   BUG_ON(arg->claim != NFS4_OPEN_CLAIM_NULL);",
          "1022:   WRITE32(NFS4_OPEN_CREATE);",
          "1023:   encode_createmode(xdr, arg);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1031:  RESERVE_SPACE(4);",
          "1032:  switch (delegation_type) {",
          "1044:  }",
          "1045: }",
          "",
          "[Removed Lines]",
          "1033:   case 0:",
          "1034:    WRITE32(NFS4_OPEN_DELEGATE_NONE);",
          "1035:    break;",
          "1036:   case FMODE_READ:",
          "1037:    WRITE32(NFS4_OPEN_DELEGATE_READ);",
          "1038:    break;",
          "1039:   case FMODE_WRITE|FMODE_READ:",
          "1040:    WRITE32(NFS4_OPEN_DELEGATE_WRITE);",
          "1041:    break;",
          "1042:   default:",
          "1043:    BUG();",
          "",
          "[Added Lines]",
          "1033:  case 0:",
          "1034:   WRITE32(NFS4_OPEN_DELEGATE_NONE);",
          "1035:   break;",
          "1036:  case FMODE_READ:",
          "1037:   WRITE32(NFS4_OPEN_DELEGATE_READ);",
          "1038:   break;",
          "1039:  case FMODE_WRITE|FMODE_READ:",
          "1040:   WRITE32(NFS4_OPEN_DELEGATE_WRITE);",
          "1041:   break;",
          "1042:  default:",
          "1043:   BUG();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1077:  encode_openhdr(xdr, arg);",
          "1078:  encode_opentype(xdr, arg);",
          "1079:  switch (arg->claim) {",
          "1091:  }",
          "1092:  return 0;",
          "1093: }",
          "",
          "[Removed Lines]",
          "1080:   case NFS4_OPEN_CLAIM_NULL:",
          "1081:    encode_claim_null(xdr, arg->name);",
          "1082:    break;",
          "1083:   case NFS4_OPEN_CLAIM_PREVIOUS:",
          "1084:    encode_claim_previous(xdr, arg->u.delegation_type);",
          "1085:    break;",
          "1086:   case NFS4_OPEN_CLAIM_DELEGATE_CUR:",
          "1087:    encode_claim_delegate_cur(xdr, arg->name, &arg->u.delegation);",
          "1088:    break;",
          "1089:   default:",
          "1090:    BUG();",
          "",
          "[Added Lines]",
          "1080:  case NFS4_OPEN_CLAIM_NULL:",
          "1081:   encode_claim_null(xdr, arg->name);",
          "1082:   break;",
          "1083:  case NFS4_OPEN_CLAIM_PREVIOUS:",
          "1084:   encode_claim_previous(xdr, arg->u.delegation_type);",
          "1085:   break;",
          "1086:  case NFS4_OPEN_CLAIM_DELEGATE_CUR:",
          "1087:   encode_claim_delegate_cur(xdr, arg->name, &arg->u.delegation);",
          "1088:   break;",
          "1089:  default:",
          "1090:   BUG();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1133: static int encode_putrootfh(struct xdr_stream *xdr)",
          "1134: {",
          "1141: }",
          "1143: static void encode_stateid(struct xdr_stream *xdr, const struct nfs_open_context *ctx)",
          "",
          "[Removed Lines]",
          "1135:         __be32 *p;",
          "1137:         RESERVE_SPACE(4);",
          "1138:         WRITE32(OP_PUTROOTFH);",
          "1140:         return 0;",
          "",
          "[Added Lines]",
          "1135:  __be32 *p;",
          "1137:  RESERVE_SPACE(4);",
          "1138:  WRITE32(OP_PUTROOTFH);",
          "1140:  return 0;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1297:  int status;",
          "1298:  __be32 *p;",
          "1302:  WRITEMEM(arg->stateid.data, NFS4_STATEID_SIZE);",
          "1305:   return status;",
          "1308: }",
          "1310: static int encode_setclientid(struct xdr_stream *xdr, const struct nfs4_setclientid *setclientid)",
          "",
          "[Removed Lines]",
          "1300:         RESERVE_SPACE(4+NFS4_STATEID_SIZE);",
          "1301:         WRITE32(OP_SETATTR);",
          "1304:         if ((status = encode_attrs(xdr, arg->iap, server)))",
          "1307:         return 0;",
          "",
          "[Added Lines]",
          "1300:  RESERVE_SPACE(4+NFS4_STATEID_SIZE);",
          "1301:  WRITE32(OP_SETATTR);",
          "1304:  if ((status = encode_attrs(xdr, arg->iap, server)))",
          "1307:  return 0;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1329: static int encode_setclientid_confirm(struct xdr_stream *xdr, const struct nfs_client *client_state)",
          "1330: {",
          "1339: }",
          "1341: static int encode_write(struct xdr_stream *xdr, const struct nfs_writeargs *args)",
          "",
          "[Removed Lines]",
          "1331:         __be32 *p;",
          "1333:         RESERVE_SPACE(12 + NFS4_VERIFIER_SIZE);",
          "1334:         WRITE32(OP_SETCLIENTID_CONFIRM);",
          "1335:         WRITE64(client_state->cl_clientid);",
          "1336:         WRITEMEM(client_state->cl_confirm.data, NFS4_VERIFIER_SIZE);",
          "1338:         return 0;",
          "",
          "[Added Lines]",
          "1331:  __be32 *p;",
          "1333:  RESERVE_SPACE(12 + NFS4_VERIFIER_SIZE);",
          "1334:  WRITE32(OP_SETCLIENTID_CONFIRM);",
          "1335:  WRITE64(client_state->cl_clientid);",
          "1336:  WRITEMEM(client_state->cl_confirm.data, NFS4_VERIFIER_SIZE);",
          "1338:  return 0;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1585: static int nfs4_xdr_enc_close(struct rpc_rqst *req, __be32 *p, struct nfs_closeargs *args)",
          "1586: {",
          "1599:  if (status != 0)",
          "1600:   goto out;",
          "1601:  status = encode_getfattr(&xdr, args->bitmask);",
          "1602: out:",
          "1604: }",
          "",
          "[Removed Lines]",
          "1587:         struct xdr_stream xdr;",
          "1588:         struct compound_hdr hdr = {",
          "1589:                 .nops   = 3,",
          "1590:         };",
          "1591:         int status;",
          "1593:         xdr_init_encode(&xdr, &req->rq_snd_buf, p);",
          "1594:         encode_compound_hdr(&xdr, &hdr);",
          "1595:         status = encode_putfh(&xdr, args->fh);",
          "1596:         if(status)",
          "1597:                 goto out;",
          "1598:         status = encode_close(&xdr, args);",
          "1603:         return status;",
          "",
          "[Added Lines]",
          "1587:  struct xdr_stream xdr;",
          "1588:  struct compound_hdr hdr = {",
          "1589:   .nops   = 3,",
          "1590:  };",
          "1591:  int status;",
          "1593:  xdr_init_encode(&xdr, &req->rq_snd_buf, p);",
          "1594:  encode_compound_hdr(&xdr, &hdr);",
          "1595:  status = encode_putfh(&xdr, args->fh);",
          "1596:  if(status)",
          "1597:   goto out;",
          "1598:  status = encode_close(&xdr, args);",
          "1603:  return status;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1877: static int nfs4_xdr_enc_setattr(struct rpc_rqst *req, __be32 *p, struct nfs_setattrargs *args)",
          "1879: {",
          "1894:  status = encode_getfattr(&xdr, args->bitmask);",
          "1895: out:",
          "1897: }",
          "",
          "[Removed Lines]",
          "1880:         struct xdr_stream xdr;",
          "1881:         struct compound_hdr hdr = {",
          "1882:                 .nops   = 3,",
          "1883:         };",
          "1884:         int status;",
          "1886:         xdr_init_encode(&xdr, &req->rq_snd_buf, p);",
          "1887:         encode_compound_hdr(&xdr, &hdr);",
          "1888:         status = encode_putfh(&xdr, args->fh);",
          "1889:         if(status)",
          "1890:                 goto out;",
          "1891:         status = encode_setattr(&xdr, args, args->server);",
          "1892:         if(status)",
          "1893:                 goto out;",
          "1896:         return status;",
          "",
          "[Added Lines]",
          "1879:  struct xdr_stream xdr;",
          "1880:  struct compound_hdr hdr = {",
          "1881:   .nops   = 3,",
          "1882:  };",
          "1883:  int status;",
          "1885:  xdr_init_encode(&xdr, &req->rq_snd_buf, p);",
          "1886:  encode_compound_hdr(&xdr, &hdr);",
          "1887:  status = encode_putfh(&xdr, args->fh);",
          "1888:  if(status)",
          "1889:   goto out;",
          "1890:  status = encode_setattr(&xdr, args, args->server);",
          "1891:  if(status)",
          "1892:   goto out;",
          "1895:  return status;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3344: static int decode_space_limit(struct xdr_stream *xdr, u64 *maxsize)",
          "3345: {",
          "3347:  uint32_t limit_type, nblocks, blocksize;",
          "3349:  READ_BUF(12);",
          "3350:  READ32(limit_type);",
          "3351:  switch (limit_type) {",
          "3359:  }",
          "3360:  return 0;",
          "3361: }",
          "3363: static int decode_delegation(struct xdr_stream *xdr, struct nfs_openres *res)",
          "3364: {",
          "3368:  READ_BUF(4);",
          "3369:  READ32(delegation_type);",
          "",
          "[Removed Lines]",
          "3346:         __be32 *p;",
          "3352:   case 1:",
          "3353:    READ64(*maxsize);",
          "3354:    break;",
          "3355:   case 2:",
          "3356:    READ32(nblocks);",
          "3357:    READ32(blocksize);",
          "3365:         __be32 *p;",
          "3366:         uint32_t delegation_type;",
          "",
          "[Added Lines]",
          "3345:  __be32 *p;",
          "3351:  case 1:",
          "3352:   READ64(*maxsize);",
          "3353:   break;",
          "3354:  case 2:",
          "3355:   READ32(nblocks);",
          "3356:   READ32(blocksize);",
          "3364:  __be32 *p;",
          "3365:  uint32_t delegation_type;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3374:  READ_BUF(NFS4_STATEID_SIZE+4);",
          "3375:  COPYMEM(res->delegation.data, NFS4_STATEID_SIZE);",
          "3376:  READ32(res->do_recall);",
          "3377:  switch (delegation_type) {",
          "3384:     return -EIO;",
          "3385:  }",
          "3386:  return decode_ace(xdr, NULL, res->server->nfs_client);",
          "",
          "[Removed Lines]",
          "3378:   case NFS4_OPEN_DELEGATE_READ:",
          "3379:    res->delegation_type = FMODE_READ;",
          "3380:    break;",
          "3381:   case NFS4_OPEN_DELEGATE_WRITE:",
          "3382:    res->delegation_type = FMODE_WRITE|FMODE_READ;",
          "3383:    if (decode_space_limit(xdr, &res->maxsize) < 0)",
          "",
          "[Added Lines]",
          "3378:  case NFS4_OPEN_DELEGATE_READ:",
          "3379:   res->delegation_type = FMODE_READ;",
          "3380:   break;",
          "3381:  case NFS4_OPEN_DELEGATE_WRITE:",
          "3382:   res->delegation_type = FMODE_WRITE|FMODE_READ;",
          "3383:   if (decode_space_limit(xdr, &res->maxsize) < 0)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3389: static int decode_open(struct xdr_stream *xdr, struct nfs_openres *res)",
          "3390: {",
          "3392:  uint32_t savewords, bmlen, i;",
          "3396:  if (status != -EIO)",
          "3397:   nfs_increment_open_seqid(status, res->seqid);",
          "3412:  savewords = min_t(uint32_t, bmlen, NFS4_BITMAP_SIZE);",
          "3413:  for (i = 0; i < savewords; ++i)",
          "3414:   READ32(res->attrset[i]);",
          "",
          "[Removed Lines]",
          "3391:         __be32 *p;",
          "3393:         int status;",
          "3395:         status = decode_op_hdr(xdr, OP_OPEN);",
          "3398:         if (status)",
          "3399:                 return status;",
          "3400:         READ_BUF(NFS4_STATEID_SIZE);",
          "3401:         COPYMEM(res->stateid.data, NFS4_STATEID_SIZE);",
          "3403:         decode_change_info(xdr, &res->cinfo);",
          "3405:         READ_BUF(8);",
          "3406:         READ32(res->rflags);",
          "3407:         READ32(bmlen);",
          "3408:         if (bmlen > 10)",
          "3409:                 goto xdr_error;",
          "3411:         READ_BUF(bmlen << 2);",
          "",
          "[Added Lines]",
          "3391:  __be32 *p;",
          "3393:  int status;",
          "3395:  status = decode_op_hdr(xdr, OP_OPEN);",
          "3398:  if (status)",
          "3399:   return status;",
          "3400:  READ_BUF(NFS4_STATEID_SIZE);",
          "3401:  COPYMEM(res->stateid.data, NFS4_STATEID_SIZE);",
          "3403:  decode_change_info(xdr, &res->cinfo);",
          "3405:  READ_BUF(8);",
          "3406:  READ32(res->rflags);",
          "3407:  READ32(bmlen);",
          "3408:  if (bmlen > 10)",
          "3409:   goto xdr_error;",
          "3411:  READ_BUF(bmlen << 2);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "3424: static int decode_open_confirm(struct xdr_stream *xdr, struct nfs_open_confirmres *res)",
          "3425: {",
          "3427:  int status;",
          "3430:  if (status != -EIO)",
          "3431:   nfs_increment_open_seqid(status, res->seqid);",
          "3437: }",
          "3439: static int decode_open_downgrade(struct xdr_stream *xdr, struct nfs_closeres *res)",
          "",
          "[Removed Lines]",
          "3426:         __be32 *p;",
          "3429:         status = decode_op_hdr(xdr, OP_OPEN_CONFIRM);",
          "3432:         if (status)",
          "3433:                 return status;",
          "3434:         READ_BUF(NFS4_STATEID_SIZE);",
          "3435:         COPYMEM(res->stateid.data, NFS4_STATEID_SIZE);",
          "3436:         return 0;",
          "",
          "[Added Lines]",
          "3426:  __be32 *p;",
          "3429:  status = decode_op_hdr(xdr, OP_OPEN_CONFIRM);",
          "3432:  if (status)",
          "3433:   return status;",
          "3434:  READ_BUF(NFS4_STATEID_SIZE);",
          "3435:  COPYMEM(res->stateid.data, NFS4_STATEID_SIZE);",
          "3436:  return 0;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3795: static int nfs4_xdr_dec_open_downgrade(struct rpc_rqst *rqstp, __be32 *p, struct nfs_closeres *res)",
          "3796: {",
          "3809:  if (status != 0)",
          "3810:   goto out;",
          "3811:  decode_getfattr(&xdr, res->fattr, res->server);",
          "3812: out:",
          "3814: }",
          "",
          "[Removed Lines]",
          "3797:         struct xdr_stream xdr;",
          "3798:         struct compound_hdr hdr;",
          "3799:         int status;",
          "3801:         xdr_init_decode(&xdr, &rqstp->rq_rcv_buf, p);",
          "3802:         status = decode_compound_hdr(&xdr, &hdr);",
          "3803:         if (status)",
          "3804:                 goto out;",
          "3805:         status = decode_putfh(&xdr);",
          "3806:         if (status)",
          "3807:                 goto out;",
          "3808:         status = decode_open_downgrade(&xdr, res);",
          "3813:         return status;",
          "",
          "[Added Lines]",
          "3797:  struct xdr_stream xdr;",
          "3798:  struct compound_hdr hdr;",
          "3799:  int status;",
          "3801:  xdr_init_decode(&xdr, &rqstp->rq_rcv_buf, p);",
          "3802:  status = decode_compound_hdr(&xdr, &hdr);",
          "3803:  if (status)",
          "3804:   goto out;",
          "3805:  status = decode_putfh(&xdr);",
          "3806:  if (status)",
          "3807:   goto out;",
          "3808:  status = decode_open_downgrade(&xdr, res);",
          "3813:  return status;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "4032: static int",
          "4033: nfs4_xdr_enc_setacl(struct rpc_rqst *req, __be32 *p, struct nfs_setaclargs *args)",
          "4034: {",
          "4047: out:",
          "4049: }",
          "",
          "[Removed Lines]",
          "4035:         struct xdr_stream xdr;",
          "4036:         struct compound_hdr hdr = {",
          "4037:                 .nops   = 2,",
          "4038:         };",
          "4039:         int status;",
          "4041:         xdr_init_encode(&xdr, &req->rq_snd_buf, p);",
          "4042:         encode_compound_hdr(&xdr, &hdr);",
          "4043:         status = encode_putfh(&xdr, args->fh);",
          "4044:         if (status)",
          "4045:                 goto out;",
          "4046:         status = encode_setacl(&xdr, args);",
          "4048:         return status;",
          "",
          "[Added Lines]",
          "4034:  struct xdr_stream xdr;",
          "4035:  struct compound_hdr hdr = {",
          "4036:   .nops   = 2,",
          "4037:  };",
          "4038:  int status;",
          "4040:  xdr_init_encode(&xdr, &req->rq_snd_buf, p);",
          "4041:  encode_compound_hdr(&xdr, &hdr);",
          "4042:  status = encode_putfh(&xdr, args->fh);",
          "4043:  if (status)",
          "4044:   goto out;",
          "4045:  status = encode_setacl(&xdr, args);",
          "4047:  return status;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "4098: static int nfs4_xdr_dec_close(struct rpc_rqst *rqstp, __be32 *p, struct nfs_closeres *res)",
          "4099: {",
          "4112:  if (status != 0)",
          "4113:   goto out;",
          "",
          "[Removed Lines]",
          "4100:         struct xdr_stream xdr;",
          "4101:         struct compound_hdr hdr;",
          "4102:         int status;",
          "4104:         xdr_init_decode(&xdr, &rqstp->rq_rcv_buf, p);",
          "4105:         status = decode_compound_hdr(&xdr, &hdr);",
          "4106:         if (status)",
          "4107:                 goto out;",
          "4108:         status = decode_putfh(&xdr);",
          "4109:         if (status)",
          "4110:                 goto out;",
          "4111:         status = decode_close(&xdr, res);",
          "",
          "[Added Lines]",
          "4100:  struct xdr_stream xdr;",
          "4101:  struct compound_hdr hdr;",
          "4102:  int status;",
          "4104:  xdr_init_decode(&xdr, &rqstp->rq_rcv_buf, p);",
          "4105:  status = decode_compound_hdr(&xdr, &hdr);",
          "4106:  if (status)",
          "4107:   goto out;",
          "4108:  status = decode_putfh(&xdr);",
          "4109:  if (status)",
          "4110:   goto out;",
          "4111:  status = decode_close(&xdr, res);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "4120:  decode_getfattr(&xdr, res->fattr, res->server);",
          "4121: out:",
          "4123: }",
          "",
          "[Removed Lines]",
          "4122:         return status;",
          "",
          "[Added Lines]",
          "4122:  return status;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "4128: static int nfs4_xdr_dec_open(struct rpc_rqst *rqstp, __be32 *p, struct nfs_openres *res)",
          "4129: {",
          "4142:  if (status)",
          "4143:   goto out;",
          "4147:  if (decode_getfh(&xdr, &res->fh) != 0)",
          "4148:   goto out;",
          "4149:  if (decode_getfattr(&xdr, res->f_attr, res->server) != 0)",
          "",
          "[Removed Lines]",
          "4130:         struct xdr_stream xdr;",
          "4131:         struct compound_hdr hdr;",
          "4132:         int status;",
          "4134:         xdr_init_decode(&xdr, &rqstp->rq_rcv_buf, p);",
          "4135:         status = decode_compound_hdr(&xdr, &hdr);",
          "4136:         if (status)",
          "4137:                 goto out;",
          "4138:         status = decode_putfh(&xdr);",
          "4139:         if (status)",
          "4140:                 goto out;",
          "4141:         status = decode_savefh(&xdr);",
          "4144:         status = decode_open(&xdr, res);",
          "4145:         if (status)",
          "4146:                 goto out;",
          "",
          "[Added Lines]",
          "4130:  struct xdr_stream xdr;",
          "4131:  struct compound_hdr hdr;",
          "4132:  int status;",
          "4134:  xdr_init_decode(&xdr, &rqstp->rq_rcv_buf, p);",
          "4135:  status = decode_compound_hdr(&xdr, &hdr);",
          "4136:  if (status)",
          "4137:   goto out;",
          "4138:  status = decode_putfh(&xdr);",
          "4139:  if (status)",
          "4140:   goto out;",
          "4141:  status = decode_savefh(&xdr);",
          "4142:  if (status)",
          "4143:   goto out;",
          "4144:  status = decode_open(&xdr, res);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "4152:   goto out;",
          "4153:  decode_getfattr(&xdr, res->dir_attr, res->server);",
          "4154: out:",
          "4156: }",
          "",
          "[Removed Lines]",
          "4155:         return status;",
          "",
          "[Added Lines]",
          "4155:  return status;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "4161: static int nfs4_xdr_dec_open_confirm(struct rpc_rqst *rqstp, __be32 *p, struct nfs_open_confirmres *res)",
          "4162: {",
          "4175: out:",
          "4177: }",
          "",
          "[Removed Lines]",
          "4163:         struct xdr_stream xdr;",
          "4164:         struct compound_hdr hdr;",
          "4165:         int status;",
          "4167:         xdr_init_decode(&xdr, &rqstp->rq_rcv_buf, p);",
          "4168:         status = decode_compound_hdr(&xdr, &hdr);",
          "4169:         if (status)",
          "4170:                 goto out;",
          "4171:         status = decode_putfh(&xdr);",
          "4172:         if (status)",
          "4173:                 goto out;",
          "4174:         status = decode_open_confirm(&xdr, res);",
          "4176:         return status;",
          "",
          "[Added Lines]",
          "4163:  struct xdr_stream xdr;",
          "4164:  struct compound_hdr hdr;",
          "4165:  int status;",
          "4167:  xdr_init_decode(&xdr, &rqstp->rq_rcv_buf, p);",
          "4168:  status = decode_compound_hdr(&xdr, &hdr);",
          "4169:  if (status)",
          "4170:   goto out;",
          "4171:  status = decode_putfh(&xdr);",
          "4172:  if (status)",
          "4173:   goto out;",
          "4174:  status = decode_open_confirm(&xdr, res);",
          "4176:  return status;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "4182: static int nfs4_xdr_dec_open_noattr(struct rpc_rqst *rqstp, __be32 *p, struct nfs_openres *res)",
          "4183: {",
          "4198:  decode_getfattr(&xdr, res->f_attr, res->server);",
          "4199: out:",
          "4201: }",
          "",
          "[Removed Lines]",
          "4184:         struct xdr_stream xdr;",
          "4185:         struct compound_hdr hdr;",
          "4186:         int status;",
          "4188:         xdr_init_decode(&xdr, &rqstp->rq_rcv_buf, p);",
          "4189:         status = decode_compound_hdr(&xdr, &hdr);",
          "4190:         if (status)",
          "4191:                 goto out;",
          "4192:         status = decode_putfh(&xdr);",
          "4193:         if (status)",
          "4194:                 goto out;",
          "4195:         status = decode_open(&xdr, res);",
          "4196:         if (status)",
          "4197:                 goto out;",
          "4200:         return status;",
          "",
          "[Added Lines]",
          "4184:  struct xdr_stream xdr;",
          "4185:  struct compound_hdr hdr;",
          "4186:  int status;",
          "4188:  xdr_init_decode(&xdr, &rqstp->rq_rcv_buf, p);",
          "4189:  status = decode_compound_hdr(&xdr, &hdr);",
          "4190:  if (status)",
          "4191:   goto out;",
          "4192:  status = decode_putfh(&xdr);",
          "4193:  if (status)",
          "4194:   goto out;",
          "4195:  status = decode_open(&xdr, res);",
          "4196:  if (status)",
          "4197:   goto out;",
          "4200:  return status;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "4206: static int nfs4_xdr_dec_setattr(struct rpc_rqst *rqstp, __be32 *p, struct nfs_setattrres *res)",
          "4207: {",
          "4222:  status = decode_getfattr(&xdr, res->fattr, res->server);",
          "4223:  if (status == NFS4ERR_DELAY)",
          "4224:   status = 0;",
          "4225: out:",
          "4227: }",
          "",
          "[Removed Lines]",
          "4208:         struct xdr_stream xdr;",
          "4209:         struct compound_hdr hdr;",
          "4210:         int status;",
          "4212:         xdr_init_decode(&xdr, &rqstp->rq_rcv_buf, p);",
          "4213:         status = decode_compound_hdr(&xdr, &hdr);",
          "4214:         if (status)",
          "4215:                 goto out;",
          "4216:         status = decode_putfh(&xdr);",
          "4217:         if (status)",
          "4218:                 goto out;",
          "4219:         status = decode_setattr(&xdr, res);",
          "4220:         if (status)",
          "4221:                 goto out;",
          "4226:         return status;",
          "",
          "[Added Lines]",
          "4208:  struct xdr_stream xdr;",
          "4209:  struct compound_hdr hdr;",
          "4210:  int status;",
          "4212:  xdr_init_decode(&xdr, &rqstp->rq_rcv_buf, p);",
          "4213:  status = decode_compound_hdr(&xdr, &hdr);",
          "4214:  if (status)",
          "4215:   goto out;",
          "4216:  status = decode_putfh(&xdr);",
          "4217:  if (status)",
          "4218:   goto out;",
          "4219:  status = decode_setattr(&xdr, res);",
          "4220:  if (status)",
          "4221:   goto out;",
          "4226:  return status;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "4707:  .p_replen = NFS4_##restype##_sz,   \\",
          "4708:  .p_statidx = NFSPROC4_CLNT_##proc,   \\",
          "4709:  .p_name   = #proc,     \\",
          "4712: struct rpc_procinfo nfs4_procedures[] = {",
          "4713:   PROC(READ,  enc_read, dec_read),",
          "",
          "[Removed Lines]",
          "4710:     }",
          "",
          "[Added Lines]",
          "4710: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}