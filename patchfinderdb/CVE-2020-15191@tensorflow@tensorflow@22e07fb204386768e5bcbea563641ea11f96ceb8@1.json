{
  "cve_id": "CVE-2020-15191",
  "cve_desc": "In Tensorflow before versions 2.2.1 and 2.3.1, if a user passes an invalid argument to `dlpack.to_dlpack` the expected validations will cause variables to bind to `nullptr` while setting a `status` variable to the error condition. However, this `status` argument is not properly checked. Hence, code following these methods will bind references to null pointers. This is undefined behavior and reported as an error if compiling with `-fsanitize=null`. The issue is patched in commit 22e07fb204386768e5bcbea563641ea11f96ceb8 and is released in TensorFlow versions 2.2.1, or 2.3.1.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "22e07fb204386768e5bcbea563641ea11f96ceb8",
  "patch_info": {
    "commit_hash": "22e07fb204386768e5bcbea563641ea11f96ceb8",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/22e07fb204386768e5bcbea563641ea11f96ceb8",
    "files": [
      "tensorflow/c/eager/dlpack.cc",
      "tensorflow/python/dlpack/BUILD",
      "tensorflow/python/dlpack/dlpack_test.py",
      "tensorflow/python/tfe_wrapper.cc"
    ],
    "message": "Fix multiple vulnerabilities in `tf.experimental.dlpack.to_dlpack`.\n\nWe have a use after free caused by memory coruption, a segmentation fault caused by memory corruption, several memory leaks and an undefined behavior when taking the reference of a nullptr.\n\nPiperOrigin-RevId: 332568894\nChange-Id: Ife0fc05e103b35325094ae5d822ee5fdea764572",
    "before_after_code_files": [
      "tensorflow/c/eager/dlpack.cc||tensorflow/c/eager/dlpack.cc",
      "tensorflow/python/dlpack/dlpack_test.py||tensorflow/python/dlpack/dlpack_test.py",
      "tensorflow/python/tfe_wrapper.cc||tensorflow/python/tfe_wrapper.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/c/eager/dlpack.cc||tensorflow/c/eager/dlpack.cc": [
      "File: tensorflow/c/eager/dlpack.cc -> tensorflow/c/eager/dlpack.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "249: }",
      "251: void* TFE_HandleToDLPack(TFE_TensorHandle* h, TF_Status* status) {",
      "252:   const Tensor* tensor = GetTensorFromHandle(h, status);",
      "253:   TF_DataType data_type = static_cast<TF_DataType>(tensor->dtype());",
      "256:   auto* tf_dlm_tensor_ctx = new TfDlManagedTensorCtx(tensor_ref);",
      "257:   tf_dlm_tensor_ctx->reference = tensor_ref;",
      "259:   DLManagedTensor* dlm_tensor = &tf_dlm_tensor_ctx->tensor;",
      "260:   dlm_tensor->manager_ctx = tf_dlm_tensor_ctx;",
      "261:   dlm_tensor->deleter = &DLManagedTensorDeleter;",
      "263:   int ndim = tensor->dims();",
      "264:   dlm_tensor->dl_tensor.ndim = ndim;",
      "268:   std::vector<int64_t>* shape_arr = &tf_dlm_tensor_ctx->shape;",
      "269:   std::vector<int64_t>* stride_arr = &tf_dlm_tensor_ctx->strides;",
      "",
      "[Removed Lines]",
      "254:   TensorReference tensor_ref(*tensor);  // This will call buf_->Ref()",
      "262:   dlm_tensor->dl_tensor.ctx = GetDlContext(h, status);",
      "265:   dlm_tensor->dl_tensor.data = TFE_TensorHandleDevicePointer(h, status);",
      "266:   dlm_tensor->dl_tensor.dtype = GetDlDataType(data_type, status);",
      "",
      "[Added Lines]",
      "252:   auto tf_dlm_context = GetDlContext(h, status);",
      "253:   if (!status->status.ok()) {",
      "254:     return nullptr;",
      "255:   }",
      "257:   auto* tf_dlm_data = TFE_TensorHandleDevicePointer(h, status);",
      "258:   if (!status->status.ok()) {",
      "259:     return nullptr;",
      "260:   }",
      "265:   auto tf_dlm_type = GetDlDataType(data_type, status);",
      "266:   if (!status->status.ok()) {",
      "267:     return nullptr;",
      "268:   }",
      "270:   TensorReference tensor_ref(*tensor);  // This will call buf_->Ref()",
      "277:   dlm_tensor->dl_tensor.ctx = tf_dlm_context;",
      "280:   dlm_tensor->dl_tensor.data = tf_dlm_data;",
      "281:   dlm_tensor->dl_tensor.dtype = tf_dlm_type;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "276:     (*stride_arr)[i] = (*shape_arr)[i + 1] * (*stride_arr)[i + 1];",
      "277:   }",
      "286:   dlm_tensor->dl_tensor.byte_offset =",
      "287:       0;  // TF doesn't handle the strides and byte_offsets here",
      "288:   return static_cast<void*>(dlm_tensor);",
      "",
      "[Removed Lines]",
      "279:   dlm_tensor->dl_tensor.shape = &(*shape_arr)[0];",
      "285:   dlm_tensor->dl_tensor.strides = &(*stride_arr)[0];",
      "",
      "[Added Lines]",
      "294:   dlm_tensor->dl_tensor.shape = shape_arr->data();",
      "300:   dlm_tensor->dl_tensor.strides = stride_arr->data();",
      "",
      "---------------"
    ],
    "tensorflow/python/dlpack/dlpack_test.py||tensorflow/python/dlpack/dlpack_test.py": [
      "File: tensorflow/python/dlpack/dlpack_test.py -> tensorflow/python/dlpack/dlpack_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "20: from absl.testing import parameterized",
      "21: import numpy as np",
      "23: from tensorflow.python.dlpack import dlpack",
      "24: from tensorflow.python.framework import constant_op",
      "25: from tensorflow.python.framework import dtypes",
      "26: from tensorflow.python.framework import ops",
      "27: from tensorflow.python.platform import test",
      "28: from tensorflow.python.ops import array_ops",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "27: from tensorflow.python.framework import errors",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "105:     self.assertRaisesRegex(Exception, \".* is not supported by dlpack\",",
      "106:                            UnsupportedComplex64)",
      "109: if __name__ == \"__main__\":",
      "110:   ops.enable_eager_execution()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "110:   def testMustPassTensorArgumentToDLPack(self):",
      "111:     with self.assertRaisesRegex(",
      "112:         errors.InvalidArgumentError,",
      "113:         \"The argument to `to_dlpack` must be a TF tensor, not Python object\"):",
      "114:       dlpack.to_dlpack([1])",
      "",
      "---------------"
    ],
    "tensorflow/python/tfe_wrapper.cc||tensorflow/python/tfe_wrapper.cc": [
      "File: tensorflow/python/tfe_wrapper.cc -> tensorflow/python/tfe_wrapper.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "1359:   m.def(\"TFE_ToDlpackCapsule\", [](py::handle& o) {",
      "1360:     PyObject* eager_tensor_pyobject_ptr = o.ptr();",
      "1362:     tensorflow::Safe_TF_StatusPtr status =",
      "1363:         tensorflow::make_safe(TF_NewStatus());",
      "1364:     void* dlm_ptr = tensorflow::TFE_HandleToDLPack(thandle, status.get());",
      "1365:     tensorflow::MaybeRaiseRegisteredFromTFStatus(status.get());",
      "",
      "[Removed Lines]",
      "1361:     TFE_TensorHandle* thandle = EagerTensor_Handle(eager_tensor_pyobject_ptr);",
      "",
      "[Added Lines]",
      "1364:     if (!EagerTensor_CheckExact(eager_tensor_pyobject_ptr)) {",
      "1365:       status->status = tensorflow::errors::InvalidArgument(",
      "1366:           \"The argument to `to_dlpack` must be a TF tensor, not Python object\");",
      "1367:       tensorflow::MaybeRaiseRegisteredFromTFStatus(status.get());",
      "1368:     }",
      "1370:     TFE_TensorHandle* thandle = EagerTensor_Handle(eager_tensor_pyobject_ptr);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d8c69c287fc1c50988ed8b71b4fab3cc5eec4620",
      "candidate_info": {
        "commit_hash": "d8c69c287fc1c50988ed8b71b4fab3cc5eec4620",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/d8c69c287fc1c50988ed8b71b4fab3cc5eec4620",
        "files": [
          "tensorflow/c/eager/dlpack.cc",
          "tensorflow/python/dlpack/dlpack_test.py",
          "tensorflow/python/tfe_wrapper.cc"
        ],
        "message": "Fix multiple vulnerabilities in `tf.experimental.dlpack.to_dlpack`.\n\nWe have a use after free caused by memory coruption, a segmentation fault caused by memory corruption, several memory leaks and an undefined behavior when taking the reference of a nullptr.\n\nPiperOrigin-RevId: 332568894\nChange-Id: Ife0fc05e103b35325094ae5d822ee5fdea764572",
        "before_after_code_files": [
          "tensorflow/c/eager/dlpack.cc||tensorflow/c/eager/dlpack.cc",
          "tensorflow/python/dlpack/dlpack_test.py||tensorflow/python/dlpack/dlpack_test.py",
          "tensorflow/python/tfe_wrapper.cc||tensorflow/python/tfe_wrapper.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/c/eager/dlpack.cc||tensorflow/c/eager/dlpack.cc",
            "tensorflow/python/dlpack/dlpack_test.py||tensorflow/python/dlpack/dlpack_test.py",
            "tensorflow/python/tfe_wrapper.cc||tensorflow/python/tfe_wrapper.cc"
          ],
          "candidate": [
            "tensorflow/c/eager/dlpack.cc||tensorflow/c/eager/dlpack.cc",
            "tensorflow/python/dlpack/dlpack_test.py||tensorflow/python/dlpack/dlpack_test.py",
            "tensorflow/python/tfe_wrapper.cc||tensorflow/python/tfe_wrapper.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/c/eager/dlpack.cc||tensorflow/c/eager/dlpack.cc": [
          "File: tensorflow/c/eager/dlpack.cc -> tensorflow/c/eager/dlpack.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "248: }",
          "250: void* TFE_HandleToDLPack(TFE_TensorHandle* h, TF_Status* status) {",
          "251:   const Tensor* tensor = GetTensorFromHandle(h, status);",
          "252:   TF_DataType data_type = static_cast<TF_DataType>(tensor->dtype());",
          "255:   auto* tf_dlm_tensor_ctx = new TfDlManagedTensorCtx(tensor_ref);",
          "256:   tf_dlm_tensor_ctx->reference = tensor_ref;",
          "258:   DLManagedTensor* dlm_tensor = &tf_dlm_tensor_ctx->tensor;",
          "259:   dlm_tensor->manager_ctx = tf_dlm_tensor_ctx;",
          "260:   dlm_tensor->deleter = &DLManagedTensorDeleter;",
          "262:   int ndim = tensor->dims();",
          "263:   dlm_tensor->dl_tensor.ndim = ndim;",
          "267:   std::vector<int64_t>* shape_arr = &tf_dlm_tensor_ctx->shape;",
          "268:   std::vector<int64_t>* stride_arr = &tf_dlm_tensor_ctx->strides;",
          "",
          "[Removed Lines]",
          "253:   TensorReference tensor_ref(*tensor);  // This will call buf_->Ref()",
          "261:   dlm_tensor->dl_tensor.ctx = GetDlContext(h, status);",
          "264:   dlm_tensor->dl_tensor.data = TFE_TensorHandleDevicePointer(h, status);",
          "265:   dlm_tensor->dl_tensor.dtype = GetDlDataType(data_type, status);",
          "",
          "[Added Lines]",
          "251:   auto tf_dlm_context = GetDlContext(h, status);",
          "252:   if (!status->status.ok()) {",
          "253:     return nullptr;",
          "254:   }",
          "256:   auto* tf_dlm_data = TFE_TensorHandleDevicePointer(h, status);",
          "257:   if (!status->status.ok()) {",
          "258:     return nullptr;",
          "259:   }",
          "264:   auto tf_dlm_type = GetDlDataType(data_type, status);",
          "265:   if (!status->status.ok()) {",
          "266:     return nullptr;",
          "267:   }",
          "269:   TensorReference tensor_ref(*tensor);  // This will call buf_->Ref()",
          "276:   dlm_tensor->dl_tensor.ctx = tf_dlm_context;",
          "279:   dlm_tensor->dl_tensor.data = tf_dlm_data;",
          "280:   dlm_tensor->dl_tensor.dtype = tf_dlm_type;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "275:     (*stride_arr)[i] = (*shape_arr)[i + 1] * (*stride_arr)[i + 1];",
          "276:   }",
          "285:   dlm_tensor->dl_tensor.byte_offset =",
          "286:       0;  // TF doesn't handle the strides and byte_offsets here",
          "287:   return static_cast<void*>(dlm_tensor);",
          "",
          "[Removed Lines]",
          "278:   dlm_tensor->dl_tensor.shape = &(*shape_arr)[0];",
          "284:   dlm_tensor->dl_tensor.strides = &(*stride_arr)[0];",
          "",
          "[Added Lines]",
          "293:   dlm_tensor->dl_tensor.shape = shape_arr->data();",
          "299:   dlm_tensor->dl_tensor.strides = stride_arr->data();",
          "",
          "---------------"
        ],
        "tensorflow/python/dlpack/dlpack_test.py||tensorflow/python/dlpack/dlpack_test.py": [
          "File: tensorflow/python/dlpack/dlpack_test.py -> tensorflow/python/dlpack/dlpack_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: from absl.testing import parameterized",
          "21: import numpy as np",
          "23: from tensorflow.python.dlpack import dlpack",
          "24: from tensorflow.python.framework import constant_op",
          "25: from tensorflow.python.framework import dtypes",
          "26: from tensorflow.python.framework import ops",
          "27: from tensorflow.python.platform import test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: from tensorflow.python.framework import errors",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:     self.assertRaisesRegex(Exception, \".* is not supported by dlpack\",",
          "96:                            UnsupportedComplex64)",
          "99: if __name__ == \"__main__\":",
          "100:   ops.enable_eager_execution()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100:   def testMustPassTensorArgumentToDLPack(self):",
          "101:     with self.assertRaisesRegex(",
          "102:         errors.InvalidArgumentError,",
          "103:         \"The argument to `to_dlpack` must be a TF tensor, not Python object\"):",
          "104:       dlpack.to_dlpack([1])",
          "",
          "---------------"
        ],
        "tensorflow/python/tfe_wrapper.cc||tensorflow/python/tfe_wrapper.cc": [
          "File: tensorflow/python/tfe_wrapper.cc -> tensorflow/python/tfe_wrapper.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1130:   m.def(\"TFE_ToDlpackCapsule\", [](py::handle& o) {",
          "1131:     PyObject* eager_tensor_pyobject_ptr = o.ptr();",
          "1133:     tensorflow::Safe_TF_StatusPtr status =",
          "1134:         tensorflow::make_safe(TF_NewStatus());",
          "1135:     void* dlm_ptr = tensorflow::TFE_HandleToDLPack(thandle, status.get());",
          "1136:     tensorflow::MaybeRaiseRegisteredFromTFStatus(status.get());",
          "",
          "[Removed Lines]",
          "1132:     TFE_TensorHandle* thandle = EagerTensor_Handle(eager_tensor_pyobject_ptr);",
          "",
          "[Added Lines]",
          "1135:     if (!EagerTensor_CheckExact(eager_tensor_pyobject_ptr)) {",
          "1136:       status->status = tensorflow::errors::InvalidArgument(",
          "1137:           \"The argument to `to_dlpack` must be a TF tensor, not Python object\");",
          "1138:       tensorflow::MaybeRaiseRegisteredFromTFStatus(status.get());",
          "1139:     }",
          "1141:     TFE_TensorHandle* thandle = EagerTensor_Handle(eager_tensor_pyobject_ptr);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2553e843a1a0947d7984767162257447be325c86",
      "candidate_info": {
        "commit_hash": "2553e843a1a0947d7984767162257447be325c86",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/2553e843a1a0947d7984767162257447be325c86",
        "files": [
          "tensorflow/c/eager/dlpack.cc",
          "tensorflow/python/dlpack/dlpack_test.py",
          "tensorflow/python/tfe_wrapper.cc"
        ],
        "message": "Fix multiple vulnerabilities in `tf.experimental.dlpack.to_dlpack`.\n\nWe have a use after free caused by memory coruption, a segmentation fault caused by memory corruption, several memory leaks and an undefined behavior when taking the reference of a nullptr.\n\nPiperOrigin-RevId: 332568894\nChange-Id: Ife0fc05e103b35325094ae5d822ee5fdea764572",
        "before_after_code_files": [
          "tensorflow/c/eager/dlpack.cc||tensorflow/c/eager/dlpack.cc",
          "tensorflow/python/dlpack/dlpack_test.py||tensorflow/python/dlpack/dlpack_test.py",
          "tensorflow/python/tfe_wrapper.cc||tensorflow/python/tfe_wrapper.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/c/eager/dlpack.cc||tensorflow/c/eager/dlpack.cc",
            "tensorflow/python/dlpack/dlpack_test.py||tensorflow/python/dlpack/dlpack_test.py",
            "tensorflow/python/tfe_wrapper.cc||tensorflow/python/tfe_wrapper.cc"
          ],
          "candidate": [
            "tensorflow/c/eager/dlpack.cc||tensorflow/c/eager/dlpack.cc",
            "tensorflow/python/dlpack/dlpack_test.py||tensorflow/python/dlpack/dlpack_test.py",
            "tensorflow/python/tfe_wrapper.cc||tensorflow/python/tfe_wrapper.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/c/eager/dlpack.cc||tensorflow/c/eager/dlpack.cc": [
          "File: tensorflow/c/eager/dlpack.cc -> tensorflow/c/eager/dlpack.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "250: }",
          "252: void* TFE_HandleToDLPack(TFE_TensorHandle* h, TF_Status* status) {",
          "253:   const Tensor* tensor = GetTensorFromHandle(h, status);",
          "254:   TF_DataType data_type = static_cast<TF_DataType>(tensor->dtype());",
          "257:   auto* tf_dlm_tensor_ctx = new TfDlManagedTensorCtx(tensor_ref);",
          "258:   tf_dlm_tensor_ctx->reference = tensor_ref;",
          "260:   DLManagedTensor* dlm_tensor = &tf_dlm_tensor_ctx->tensor;",
          "261:   dlm_tensor->manager_ctx = tf_dlm_tensor_ctx;",
          "262:   dlm_tensor->deleter = &DLManagedTensorDeleter;",
          "264:   int ndim = tensor->dims();",
          "265:   dlm_tensor->dl_tensor.ndim = ndim;",
          "269:   std::vector<int64_t>* shape_arr = &tf_dlm_tensor_ctx->shape;",
          "270:   std::vector<int64_t>* stride_arr = &tf_dlm_tensor_ctx->strides;",
          "",
          "[Removed Lines]",
          "255:   TensorReference tensor_ref(*tensor);  // This will call buf_->Ref()",
          "263:   dlm_tensor->dl_tensor.ctx = GetDlContext(h, status);",
          "266:   dlm_tensor->dl_tensor.data = TFE_TensorHandleDevicePointer(h, status);",
          "267:   dlm_tensor->dl_tensor.dtype = GetDlDataType(data_type, status);",
          "",
          "[Added Lines]",
          "253:   auto tf_dlm_context = GetDlContext(h, status);",
          "254:   if (!status->status.ok()) {",
          "255:     return nullptr;",
          "256:   }",
          "258:   auto* tf_dlm_data = TFE_TensorHandleDevicePointer(h, status);",
          "259:   if (!status->status.ok()) {",
          "260:     return nullptr;",
          "261:   }",
          "266:   auto tf_dlm_type = GetDlDataType(data_type, status);",
          "267:   if (!status->status.ok()) {",
          "268:     return nullptr;",
          "269:   }",
          "271:   TensorReference tensor_ref(*tensor);  // This will call buf_->Ref()",
          "278:   dlm_tensor->dl_tensor.ctx = tf_dlm_context;",
          "281:   dlm_tensor->dl_tensor.data = tf_dlm_data;",
          "282:   dlm_tensor->dl_tensor.dtype = tf_dlm_type;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "277:     (*stride_arr)[i] = (*shape_arr)[i + 1] * (*stride_arr)[i + 1];",
          "278:   }",
          "287:   dlm_tensor->dl_tensor.byte_offset =",
          "288:       0;  // TF doesn't handle the strides and byte_offsets here",
          "289:   return static_cast<void*>(dlm_tensor);",
          "",
          "[Removed Lines]",
          "280:   dlm_tensor->dl_tensor.shape = &(*shape_arr)[0];",
          "286:   dlm_tensor->dl_tensor.strides = &(*stride_arr)[0];",
          "",
          "[Added Lines]",
          "295:   dlm_tensor->dl_tensor.shape = shape_arr->data();",
          "301:   dlm_tensor->dl_tensor.strides = stride_arr->data();",
          "",
          "---------------"
        ],
        "tensorflow/python/dlpack/dlpack_test.py||tensorflow/python/dlpack/dlpack_test.py": [
          "File: tensorflow/python/dlpack/dlpack_test.py -> tensorflow/python/dlpack/dlpack_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: from absl.testing import parameterized",
          "21: import numpy as np",
          "23: from tensorflow.python.dlpack import dlpack",
          "24: from tensorflow.python.framework import constant_op",
          "25: from tensorflow.python.framework import dtypes",
          "26: from tensorflow.python.framework import ops",
          "27: from tensorflow.python.platform import test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: from tensorflow.python.framework import errors",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:     self.assertRaisesRegex(Exception, \".* is not supported by dlpack\",",
          "96:                            UnsupportedComplex64)",
          "99: if __name__ == \"__main__\":",
          "100:   ops.enable_eager_execution()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100:   def testMustPassTensorArgumentToDLPack(self):",
          "101:     with self.assertRaisesRegex(",
          "102:         errors.InvalidArgumentError,",
          "103:         \"The argument to `to_dlpack` must be a TF tensor, not Python object\"):",
          "104:       dlpack.to_dlpack([1])",
          "",
          "---------------"
        ],
        "tensorflow/python/tfe_wrapper.cc||tensorflow/python/tfe_wrapper.cc": [
          "File: tensorflow/python/tfe_wrapper.cc -> tensorflow/python/tfe_wrapper.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1052:   m.def(\"TFE_ToDlpackCapsule\", [](py::handle& o) {",
          "1053:     PyObject* eager_tensor_pyobject_ptr = o.ptr();",
          "1055:     tensorflow::Safe_TF_StatusPtr status =",
          "1056:         tensorflow::make_safe(TF_NewStatus());",
          "1057:     void* dlm_ptr = tensorflow::TFE_HandleToDLPack(thandle, status.get());",
          "1058:     tensorflow::MaybeRaiseRegisteredFromTFStatus(status.get());",
          "",
          "[Removed Lines]",
          "1054:     TFE_TensorHandle* thandle = EagerTensor_Handle(eager_tensor_pyobject_ptr);",
          "",
          "[Added Lines]",
          "1057:     if (!EagerTensor_CheckExact(eager_tensor_pyobject_ptr)) {",
          "1058:       status->status = tensorflow::errors::InvalidArgument(",
          "1059:           \"The argument to `to_dlpack` must be a TF tensor, not Python object\");",
          "1060:       tensorflow::MaybeRaiseRegisteredFromTFStatus(status.get());",
          "1061:     }",
          "1063:     TFE_TensorHandle* thandle = EagerTensor_Handle(eager_tensor_pyobject_ptr);",
          "",
          "---------------"
        ]
      }
    }
  ]
}