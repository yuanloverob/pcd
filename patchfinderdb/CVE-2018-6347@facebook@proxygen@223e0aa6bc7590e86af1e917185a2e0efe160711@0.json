{
  "cve_id": "CVE-2018-6347",
  "cve_desc": "An issue in the Proxygen handling of HTTP2 parsing of headers/trailers can lead to a denial-of-service attack. This affects Proxygen prior to v2018.12.31.00.",
  "repo": "facebook/proxygen",
  "patch_hash": "223e0aa6bc7590e86af1e917185a2e0efe160711",
  "patch_info": {
    "commit_hash": "223e0aa6bc7590e86af1e917185a2e0efe160711",
    "repo": "facebook/proxygen",
    "commit_url": "https://github.com/facebook/proxygen/commit/223e0aa6bc7590e86af1e917185a2e0efe160711",
    "files": [
      "proxygen/lib/http/codec/HTTP2Codec.cpp",
      "proxygen/lib/http/codec/test/HTTP2CodecTest.cpp",
      "proxygen/lib/http/session/test/HTTPDownstreamSessionTest.cpp",
      "proxygen/lib/http/session/test/HTTPSessionMocks.h"
    ],
    "message": "Don't lower lastStreamID_\n\nSummary:\nThis could throw off the logic about what is headers/trailers\nCVE-2018-6347\n\nReviewed By: avasylev, bolekk\n\nDifferential Revision: D13521704\n\nfbshipit-source-id: ed436ff13f191bf04764494973fcb73b35ed1256",
    "before_after_code_files": [
      "proxygen/lib/http/codec/HTTP2Codec.cpp||proxygen/lib/http/codec/HTTP2Codec.cpp",
      "proxygen/lib/http/codec/test/HTTP2CodecTest.cpp||proxygen/lib/http/codec/test/HTTP2CodecTest.cpp",
      "proxygen/lib/http/session/test/HTTPDownstreamSessionTest.cpp||proxygen/lib/http/session/test/HTTPDownstreamSessionTest.cpp",
      "proxygen/lib/http/session/test/HTTPSessionMocks.h||proxygen/lib/http/session/test/HTTPSessionMocks.h"
    ]
  },
  "patch_diff": {
    "proxygen/lib/http/codec/HTTP2Codec.cpp||proxygen/lib/http/codec/HTTP2Codec.cpp": [
      "File: proxygen/lib/http/codec/HTTP2Codec.cpp -> proxygen/lib/http/codec/HTTP2Codec.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "987:     VLOG(4) << \"Parsing downstream trailers streamId=\" << streamId;",
      "988:   }",
      "991:     lastStreamID_ = streamId;",
      "992:   }",
      "",
      "[Removed Lines]",
      "990:   if (sessionClosing_ != ClosingState::CLOSED) {",
      "",
      "[Added Lines]",
      "990:   if (sessionClosing_ != ClosingState::CLOSED && streamId > lastStreamID_) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1313: size_t HTTP2Codec::generateTrailers(folly::IOBufQueue& writeBuf,",
      "1314:                                     StreamID stream,",
      "1315:                                     const HTTPHeaders& trailers) {",
      "1316:   std::vector<compress::Header> allHeaders;",
      "1317:   CodecUtil::appendHeaders(trailers, allHeaders, HTTP_HEADER_NONE);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1316:   VLOG(4) << \"generating TRAILERS for stream=\" << stream;",
      "",
      "---------------"
    ],
    "proxygen/lib/http/codec/test/HTTP2CodecTest.cpp||proxygen/lib/http/codec/test/HTTP2CodecTest.cpp": [
      "File: proxygen/lib/http/codec/test/HTTP2CodecTest.cpp -> proxygen/lib/http/codec/test/HTTP2CodecTest.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "2145:   EXPECT_EQ(upstreamCodec_.getReceivedFrameCount(), 4);",
      "2146: #endif",
      "2147: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2149: TEST_F(HTTP2CodecTest, TrailersNotLatest) {",
      "2150:   HTTPMessage req = getGetRequest(\"/guacamole\");",
      "2151:   req.getHeaders().add(HTTP_HEADER_USER_AGENT, \"coolio\");",
      "2152:   upstreamCodec_.generateHeader(output_, 1, req);",
      "2153:   upstreamCodec_.generateHeader(output_, 3, req);",
      "2155:   HTTPHeaders trailers;",
      "2156:   trailers.add(\"x-trailer-1\", \"pico-de-gallo\");",
      "2157:   upstreamCodec_.generateTrailers(output_, 1, trailers);",
      "2158:   upstreamCodec_.generateHeader(output_, 3, req);",
      "2160:   parse();",
      "2162:   EXPECT_EQ(callbacks_.messageBegin, 2);",
      "2163:   EXPECT_EQ(callbacks_.headersComplete, 2);",
      "2164:   EXPECT_EQ(callbacks_.bodyCalls, 0);",
      "2165:   EXPECT_EQ(callbacks_.trailers, 1);",
      "2166:   EXPECT_NE(nullptr, callbacks_.msg->getTrailers());",
      "2167:   EXPECT_EQ(\"pico-de-gallo\",",
      "2168:             callbacks_.msg->getTrailers()->getSingleOrEmpty(\"x-trailer-1\"));",
      "2169:   EXPECT_EQ(callbacks_.messageComplete, 1);",
      "2170:   EXPECT_EQ(callbacks_.streamErrors, 1);",
      "2171:   EXPECT_EQ(callbacks_.sessionErrors, 0);",
      "2172: }",
      "",
      "---------------"
    ],
    "proxygen/lib/http/session/test/HTTPDownstreamSessionTest.cpp||proxygen/lib/http/session/test/HTTPDownstreamSessionTest.cpp": [
      "File: proxygen/lib/http/session/test/HTTPDownstreamSessionTest.cpp -> proxygen/lib/http/session/test/HTTPDownstreamSessionTest.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "3568:   flushRequestsAndLoop();",
      "3569:   gracefulShutdown();",
      "3570: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3572: TEST_F(HTTP2DownstreamSessionTest, TestDuplicateRequestStream) {",
      "3578:   auto handler2 = addSimpleStrictHandler();",
      "3579:   auto handler1 = addSimpleStrictHandler();",
      "3580:   auto streamID1 = sendRequest(\"/withtrailers\", 0, false);",
      "3581:   auto streamID2 = sendRequest();",
      "3582:   HTTPHeaders trailers;",
      "3583:   trailers.add(\"Foo\", \"Bar\");",
      "3584:   clientCodec_->generateTrailers(requests_, streamID1, trailers);",
      "3585:   clientCodec_->generateEOM(requests_, streamID1);",
      "3587:   clientCodec_->generateHeader(requests_, streamID2, getGetRequest(), false);",
      "3588:   handler1->expectHeaders();",
      "3589:   handler2->expectHeaders();",
      "3590:   handler2->expectEOM();",
      "3591:   handler1->expectTrailers();",
      "3592:   handler1->expectEOM([&] {",
      "3593:       handler1->sendReplyWithBody(200, 100);",
      "3596:       handler2->sendReplyWithBody(200, 100);",
      "3597:     });",
      "3598:   handler1->expectDetachTransaction();",
      "3599:   handler2->expectDetachTransaction();",
      "3600:   flushRequestsAndLoop();",
      "3601:   gracefulShutdown();",
      "3602: }",
      "",
      "---------------"
    ],
    "proxygen/lib/http/session/test/HTTPSessionMocks.h||proxygen/lib/http/session/test/HTTPSessionMocks.h": [
      "File: proxygen/lib/http/session/test/HTTPSessionMocks.h -> proxygen/lib/http/session/test/HTTPSessionMocks.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "221:         .RetiresOnSaturation();",
      "222:   }",
      "224:   void expectTrailers(",
      "225:       std::function<void(std::shared_ptr<HTTPHeaders> trailers)> cb) {",
      "226:     EXPECT_CALL(*this, onTrailers(testing::_))",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "224:   void expectTrailers(",
      "225:       std::function<void()> callback = std::function<void()>()) {",
      "226:     if (callback) {",
      "227:       EXPECT_CALL(*this, onTrailers(testing::_))",
      "228:           .WillOnce(testing::InvokeWithoutArgs(callback))",
      "229:           .RetiresOnSaturation();",
      "230:     } else {",
      "231:       EXPECT_CALL(*this, onTrailers(testing::_));",
      "232:     }",
      "233:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "68c309f65f2e36399b9ad2587e5b4a9f22845250",
      "candidate_info": {
        "commit_hash": "68c309f65f2e36399b9ad2587e5b4a9f22845250",
        "repo": "facebook/proxygen",
        "commit_url": "https://github.com/facebook/proxygen/commit/68c309f65f2e36399b9ad2587e5b4a9f22845250",
        "files": [
          "proxygen/lib/http/codec/HTTP2Codec.cpp",
          "proxygen/lib/http/codec/test/HTTP2CodecTest.cpp"
        ],
        "message": "Return back http2codec error for duplicate ExHeaders,Push\n\nSummary: Returned back logic to http2 codec when checking for new stream and trailers are not allowed.\n\nReviewed By: w-o-o\n\nDifferential Revision: D13530974\n\nfbshipit-source-id: 19a0af611bbe34d48344670770dcf9b497d936d7",
        "before_after_code_files": [
          "proxygen/lib/http/codec/HTTP2Codec.cpp||proxygen/lib/http/codec/HTTP2Codec.cpp",
          "proxygen/lib/http/codec/test/HTTP2CodecTest.cpp||proxygen/lib/http/codec/test/HTTP2CodecTest.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "proxygen/lib/http/codec/HTTP2Codec.cpp||proxygen/lib/http/codec/HTTP2Codec.cpp",
            "proxygen/lib/http/codec/test/HTTP2CodecTest.cpp||proxygen/lib/http/codec/test/HTTP2CodecTest.cpp"
          ],
          "candidate": [
            "proxygen/lib/http/codec/HTTP2Codec.cpp||proxygen/lib/http/codec/HTTP2Codec.cpp",
            "proxygen/lib/http/codec/test/HTTP2CodecTest.cpp||proxygen/lib/http/codec/test/HTTP2CodecTest.cpp"
          ]
        }
      },
      "candidate_diff": {
        "proxygen/lib/http/codec/HTTP2Codec.cpp||proxygen/lib/http/codec/HTTP2Codec.cpp": [
          "File: proxygen/lib/http/codec/HTTP2Codec.cpp -> proxygen/lib/http/codec/HTTP2Codec.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "975: }",
          "977: ErrorCode HTTP2Codec::checkNewStream(uint32_t streamId, bool trailersAllowed) {",
          "979:     goawayErrorMessage_ = folly::to<string>(",
          "980:         \"GOAWAY error: received streamID=\", streamId,",
          "981:         \" as invalid new stream for lastStreamID_=\", lastStreamID_);",
          "982:     VLOG(4) << goawayErrorMessage_;",
          "983:     return ErrorCode::PROTOCOL_ERROR;",
          "984:   }",
          "986:   if (parsingDownstreamTrailers_) {",
          "987:     VLOG(4) << \"Parsing downstream trailers streamId=\" << streamId;",
          "988:   }",
          "991:     lastStreamID_ = streamId;",
          "992:   }",
          "",
          "[Removed Lines]",
          "978:   if (streamId == 0) {",
          "985:   parsingDownstreamTrailers_ = trailersAllowed && (streamId <= lastStreamID_);",
          "990:   if (sessionClosing_ != ClosingState::CLOSED && streamId > lastStreamID_) {",
          "",
          "[Added Lines]",
          "978:   bool existingStream = (streamId <= lastStreamID_);",
          "979:   if (streamId == 0 || (!trailersAllowed && existingStream)) {",
          "986:   parsingDownstreamTrailers_ = trailersAllowed && existingStream;",
          "991:   if (sessionClosing_ != ClosingState::CLOSED && !existingStream) {",
          "",
          "---------------"
        ],
        "proxygen/lib/http/codec/test/HTTP2CodecTest.cpp||proxygen/lib/http/codec/test/HTTP2CodecTest.cpp": [
          "File: proxygen/lib/http/codec/test/HTTP2CodecTest.cpp -> proxygen/lib/http/codec/test/HTTP2CodecTest.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "283:   EXPECT_EQ(callbacks_.sessionErrors, 0);",
          "284: }",
          "286: TEST_F(HTTP2CodecTest, IgnoreExHeadersIfNotEnabled) {",
          "287:   downstreamCodec_.getEgressSettings()->setSetting(",
          "288:       SettingsId::ENABLE_EX_HEADERS, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "286: TEST_F(HTTP2CodecTest, DuplicateExHeaders) {",
          "287:   downstreamCodec_.getEgressSettings()->setSetting(",
          "288:       SettingsId::ENABLE_EX_HEADERS, 1);",
          "289:   proxygen::http2::writeSettings(",
          "290:       output_, {{proxygen::SettingsId::ENABLE_EX_HEADERS, 1}});",
          "292:   auto req = getGetRequest();",
          "293:   upstreamCodec_.generateExHeader(",
          "294:       output_, 3, req, HTTPCodec::ExAttributes(1, true), /*eom=*/false);",
          "295:   upstreamCodec_.generateExHeader(",
          "296:       output_, 3, req, HTTPCodec::ExAttributes(1, true), /*eom=*/true);",
          "298:   parse();",
          "299:   EXPECT_EQ(callbacks_.streamErrors, 0);",
          "300:   EXPECT_EQ(callbacks_.sessionErrors, 1);",
          "301: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1492:   }",
          "1493: }",
          "1495: TEST_F(HTTP2CodecTest, BadPushPromise) {",
          "1497:   SetUpUpstreamTest();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1512: TEST_F(HTTP2CodecTest, DuplicatePushPromise) {",
          "1513:   auto settings = upstreamCodec_.getEgressSettings();",
          "1514:   settings->setSetting(SettingsId::ENABLE_PUSH, 1);",
          "1515:   upstreamCodec_.generateSettings(output_);",
          "1516:   parse();",
          "1517:   EXPECT_TRUE(upstreamCodec_.supportsPushTransactions());",
          "1518:   EXPECT_TRUE(downstreamCodec_.supportsPushTransactions());",
          "1520:   SetUpUpstreamTest();",
          "1522:   HTTPCodec::StreamID assocStream = 7;",
          "1523:   HTTPCodec::StreamID pushStream = downstreamCodec_.createStream();",
          "1524:   HTTPMessage req = getGetRequest();",
          "1525:   req.getHeaders().add(HTTP_HEADER_USER_AGENT, \"coolio\");",
          "1526:   downstreamCodec_.generatePushPromise(output_, pushStream, req, assocStream);",
          "1527:   downstreamCodec_.generatePushPromise(output_, pushStream, req, assocStream);",
          "1529:   parseUpstream();",
          "1531:   EXPECT_EQ(callbacks_.streamErrors, 0);",
          "1532:   EXPECT_EQ(callbacks_.sessionErrors, 1);",
          "1533: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}