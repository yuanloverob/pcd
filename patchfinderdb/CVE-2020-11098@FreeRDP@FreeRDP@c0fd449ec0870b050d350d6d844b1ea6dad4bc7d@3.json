{
  "cve_id": "CVE-2020-11098",
  "cve_desc": "In FreeRDP before version 2.1.2, there is an out-of-bound read in glyph_cache_put. This affects all FreeRDP clients with `+glyph-cache` option enabled This is fixed in version 2.1.2.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "c0fd449ec0870b050d350d6d844b1ea6dad4bc7d",
  "patch_info": {
    "commit_hash": "c0fd449ec0870b050d350d6d844b1ea6dad4bc7d",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/c0fd449ec0870b050d350d6d844b1ea6dad4bc7d",
    "files": [
      "libfreerdp/cache/glyph.c"
    ],
    "message": "Fixed Out-of-bound read in glyph_cache_put\n\nCVE-2020-11098 thanks to @antonio-morales for finding this.",
    "before_after_code_files": [
      "libfreerdp/cache/glyph.c||libfreerdp/cache/glyph.c"
    ]
  },
  "patch_diff": {
    "libfreerdp/cache/glyph.c||libfreerdp/cache/glyph.c": [
      "File: libfreerdp/cache/glyph.c -> libfreerdp/cache/glyph.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "579:   return FALSE;",
      "580:  }",
      "583:  {",
      "584:   WLog_ERR(TAG, \"invalid glyph cache index: %\" PRIu32 \" in cache id: %\" PRIu32 \"\", index, id);",
      "585:   return FALSE;",
      "",
      "[Removed Lines]",
      "582:  if (index > glyphCache->glyphCache[id].number)",
      "",
      "[Added Lines]",
      "582:  if (index >= glyphCache->glyphCache[id].number)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "057b6df4aebbe8e739139087dfaab15104ca5ba7",
      "candidate_info": {
        "commit_hash": "057b6df4aebbe8e739139087dfaab15104ca5ba7",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/057b6df4aebbe8e739139087dfaab15104ca5ba7",
        "files": [
          "winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c",
          "winpr/libwinpr/sspi/NTLM/ntlm_message.c"
        ],
        "message": "Fixed memory leaks in ntlm",
        "before_after_code_files": [
          "winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c||winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c",
          "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c||winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c": [
          "File: winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c -> winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "574:  if (!sspi_SecBufferAlloc(&context->AuthenticateTargetInfo, size))",
          "577:  AuthenticateTargetInfo = (NTLM_AV_PAIR*)context->AuthenticateTargetInfo.pvBuffer;",
          "578:  cbAuthenticateTargetInfo = context->AuthenticateTargetInfo.cbBuffer;",
          "580:  if (!ntlm_av_pair_list_init(AuthenticateTargetInfo, cbAuthenticateTargetInfo))",
          "583:  if (AvNbDomainName)",
          "584:  {",
          "585:   if (!ntlm_av_pair_add_copy(AuthenticateTargetInfo, cbAuthenticateTargetInfo, AvNbDomainName,",
          "586:                              cbAvNbDomainName))",
          "588:  }",
          "590:  if (AvNbComputerName)",
          "591:  {",
          "592:   if (!ntlm_av_pair_add_copy(AuthenticateTargetInfo, cbAuthenticateTargetInfo,",
          "593:                              AvNbComputerName, cbAvNbComputerName))",
          "595:  }",
          "597:  if (AvDnsDomainName)",
          "598:  {",
          "599:   if (!ntlm_av_pair_add_copy(AuthenticateTargetInfo, cbAuthenticateTargetInfo,",
          "600:                              AvDnsDomainName, cbAvDnsDomainName))",
          "602:  }",
          "604:  if (AvDnsComputerName)",
          "605:  {",
          "606:   if (!ntlm_av_pair_add_copy(AuthenticateTargetInfo, cbAuthenticateTargetInfo,",
          "607:                              AvDnsComputerName, cbAvDnsComputerName))",
          "609:  }",
          "611:  if (AvDnsTreeName)",
          "612:  {",
          "613:   if (!ntlm_av_pair_add_copy(AuthenticateTargetInfo, cbAuthenticateTargetInfo, AvDnsTreeName,",
          "614:                              cbAvDnsTreeName))",
          "616:  }",
          "618:  if (AvTimestamp)",
          "619:  {",
          "620:   if (!ntlm_av_pair_add_copy(AuthenticateTargetInfo, cbAuthenticateTargetInfo, AvTimestamp,",
          "621:                              cbAvTimestamp))",
          "623:  }",
          "625:  if (context->UseMIC)",
          "",
          "[Removed Lines]",
          "575:   return -1;",
          "581:   return -1;",
          "587:    return -1;",
          "594:    return -1;",
          "601:    return -1;",
          "608:    return -1;",
          "615:    return -1;",
          "622:    return -1;",
          "",
          "[Added Lines]",
          "575:   goto fail;",
          "581:   goto fail;",
          "587:    goto fail;",
          "594:    goto fail;",
          "601:    goto fail;",
          "608:    goto fail;",
          "615:    goto fail;",
          "622:    goto fail;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "630:   if (!ntlm_av_pair_add(AuthenticateTargetInfo, cbAuthenticateTargetInfo, MsvAvFlags,",
          "631:                         (PBYTE)&flags, 4))",
          "633:  }",
          "635:  if (context->SendSingleHostData)",
          "636:  {",
          "637:   if (!ntlm_av_pair_add(AuthenticateTargetInfo, cbAuthenticateTargetInfo, MsvAvSingleHost,",
          "638:                         (PBYTE)&context->SingleHostData, context->SingleHostData.Size))",
          "640:  }",
          "642:  if (!context->SuppressExtendedProtection)",
          "643:  {",
          "644:   if (!ntlm_av_pair_add(AuthenticateTargetInfo, cbAuthenticateTargetInfo, MsvChannelBindings,",
          "645:                         context->ChannelBindingsHash, 16))",
          "648:   if (context->ServicePrincipalName.Length > 0)",
          "649:   {",
          "650:    if (!ntlm_av_pair_add(AuthenticateTargetInfo, cbAuthenticateTargetInfo, MsvAvTargetName,",
          "651:                          (PBYTE)context->ServicePrincipalName.Buffer,",
          "652:                          context->ServicePrincipalName.Length))",
          "654:   }",
          "655:  }",
          "",
          "[Removed Lines]",
          "632:    return -1;",
          "639:    return -1;",
          "646:    return -1;",
          "653:     return -1;",
          "",
          "[Added Lines]",
          "632:    goto fail;",
          "639:    goto fail;",
          "646:    goto fail;",
          "653:     goto fail;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "660:   AvEOL = ntlm_av_pair_get(ChallengeTargetInfo, cbChallengeTargetInfo, MsvAvEOL, NULL);",
          "662:   if (!AvEOL)",
          "665:   ZeroMemory(AvEOL, sizeof(NTLM_AV_PAIR));",
          "666:  }",
          "668:  return 1;",
          "669: }",
          "",
          "[Removed Lines]",
          "663:    return -1;",
          "",
          "[Added Lines]",
          "663:    goto fail;",
          "669: fail:",
          "670:  sspi_SecBufferFree(&context->AuthenticateTargetInfo);",
          "671:  return -1;",
          "",
          "---------------"
        ],
        "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c": [
          "File: winpr/libwinpr/sspi/NTLM/ntlm_message.c -> winpr/libwinpr/sspi/NTLM/ntlm_message.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "544:  winpr_HexDump(TAG, WLOG_DEBUG, context->Timestamp, 8);",
          "545: #endif",
          "546:  context->state = NTLM_STATE_AUTHENTICATE;",
          "548:  status = SEC_I_CONTINUE_NEEDED;",
          "549: fail:",
          "550:  Stream_Free(s, FALSE);",
          "551:  return status;",
          "552: }",
          "",
          "[Removed Lines]",
          "547:  ntlm_free_message_fields_buffer(&(message->TargetName));",
          "",
          "[Added Lines]",
          "549:  ntlm_free_message_fields_buffer(&(message->TargetName));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b8beb55913471952f92770c90c372139d78c16c0",
      "candidate_info": {
        "commit_hash": "b8beb55913471952f92770c90c372139d78c16c0",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/b8beb55913471952f92770c90c372139d78c16c0",
        "files": [
          "libfreerdp/core/orders.c"
        ],
        "message": "Fixed OOB read in update_read_cache_bitmap_v3_order\n\nCVE-2020-11096 thanks @antonio-morales for finding this.",
        "before_after_code_files": [
          "libfreerdp/core/orders.c||libfreerdp/core/orders.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/orders.c||libfreerdp/core/orders.c": [
          "File: libfreerdp/core/orders.c -> libfreerdp/core/orders.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:  }",
          "114: }",
          "131: static BOOL check_order_activated(wLog* log, rdpSettings* settings, const char* orderName,",
          "132:                                   BOOL condition)",
          "",
          "[Removed Lines]",
          "116: static const BYTE CBR2_BPP[] = { 0, 0, 0, 8, 16, 24, 32 };",
          "118: static const BYTE BPP_CBR2[] = { 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0,",
          "119:                               0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0 };",
          "121: static const BYTE CBR23_BPP[] = { 0, 0, 0, 8, 16, 24, 32 };",
          "123: static const BYTE BPP_CBR23[] = { 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0,",
          "124:                                0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0 };",
          "126: static const BYTE BMF_BPP[] = { 0, 1, 0, 8, 16, 24, 32, 0 };",
          "128: static const BYTE BPP_BMF[] = { 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0,",
          "129:                              0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0 };",
          "",
          "[Added Lines]",
          "116: static BYTE get_cbr2_bpp(UINT32 bpp, BOOL* pValid)",
          "117: {",
          "118:  if (pValid)",
          "120:  switch (bpp)",
          "121:  {",
          "122:   case 3:",
          "123:    return 8;",
          "124:   case 4:",
          "125:    return 16;",
          "126:   case 5:",
          "127:    return 24;",
          "128:   case 6:",
          "129:    return 32;",
          "130:   default:",
          "131:    WLog_WARN(TAG, \"Invalid bpp %\" PRIu32, bpp);",
          "132:    if (pValid)",
          "134:    return 0;",
          "135:  }",
          "136: }",
          "138: static BYTE get_bmf_bpp(UINT32 bmf, BOOL* pValid)",
          "139: {",
          "140:  if (pValid)",
          "142:  switch (bmf)",
          "143:  {",
          "144:   case 1:",
          "145:    return 1;",
          "146:   case 3:",
          "147:    return 8;",
          "148:   case 4:",
          "149:    return 16;",
          "150:   case 5:",
          "151:    return 24;",
          "152:   case 6:",
          "153:    return 32;",
          "154:   default:",
          "155:    WLog_WARN(TAG, \"Invalid bmf %\" PRIu32, bmf);",
          "156:    if (pValid)",
          "158:    return 0;",
          "159:  }",
          "160: }",
          "161: static BYTE get_bpp_bmf(UINT32 bpp, BOOL* pValid)",
          "162: {",
          "163:  if (pValid)",
          "165:  switch (bpp)",
          "166:  {",
          "167:   case 1:",
          "168:    return 1;",
          "169:   case 8:",
          "170:    return 3;",
          "171:   case 16:",
          "172:    return 4;",
          "173:   case 24:",
          "174:    return 5;",
          "175:   case 32:",
          "176:    return 6;",
          "177:   default:",
          "178:    WLog_WARN(TAG, \"Invalid color depth %\" PRIu32, bpp);",
          "179:    if (pValid)",
          "181:    return 0;",
          "182:  }",
          "183: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "815:  if (brush->style & CACHED_BRUSH)",
          "816:  {",
          "817:   brush->index = brush->hatch;",
          "820:   if (brush->bpp == 0)",
          "821:    brush->bpp = 1;",
          "822:  }",
          "",
          "[Removed Lines]",
          "818:   brush->bpp = BMF_BPP[brush->style & 0x07];",
          "",
          "[Added Lines]",
          "871:   BOOL rc;",
          "873:   brush->bpp = get_bmf_bpp(brush->style, &rc);",
          "874:   if (!rc)",
          "875:    return FALSE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "859:  if (brush->style & CACHED_BRUSH)",
          "860:  {",
          "861:   brush->hatch = brush->index;",
          "864:   if (brush->bpp == 0)",
          "865:    brush->bpp = 1;",
          "866:  }",
          "",
          "[Removed Lines]",
          "862:   brush->bpp = BMF_BPP[brush->style & 0x07];",
          "",
          "[Added Lines]",
          "917:   BOOL rc;",
          "919:   brush->bpp = get_bmf_bpp(brush->style, &rc);",
          "920:   if (!rc)",
          "921:    return FALSE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2016: static CACHE_BITMAP_V2_ORDER* update_read_cache_bitmap_v2_order(rdpUpdate* update, wStream* s,",
          "2017:                                                                 BOOL compressed, UINT16 flags)",
          "2018: {",
          "2019:  BYTE bitsPerPixelId;",
          "2020:  CACHE_BITMAP_V2_ORDER* cache_bitmap_v2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2077:  BOOL rc;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2030:  cache_bitmap_v2->cacheId = flags & 0x0003;",
          "2031:  cache_bitmap_v2->flags = (flags & 0xFF80) >> 7;",
          "2032:  bitsPerPixelId = (flags & 0x0078) >> 3;",
          "2035:  if (cache_bitmap_v2->flags & CBR2_PERSISTENT_KEY_PRESENT)",
          "2036:  {",
          "",
          "[Removed Lines]",
          "2033:  cache_bitmap_v2->bitmapBpp = CBR2_BPP[bitsPerPixelId];",
          "",
          "[Added Lines]",
          "2092:  cache_bitmap_v2->bitmapBpp = get_cbr2_bpp(bitsPerPixelId, &rc);",
          "2093:  if (!rc)",
          "2094:   goto fail;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2109: BOOL update_write_cache_bitmap_v2_order(wStream* s, CACHE_BITMAP_V2_ORDER* cache_bitmap_v2,",
          "2110:                                         BOOL compressed, UINT16* flags)",
          "2111: {",
          "2112:  BYTE bitsPerPixelId;",
          "2114:  if (!Stream_EnsureRemainingCapacity(",
          "2115:          s, update_approximate_cache_bitmap_v2_order(cache_bitmap_v2, compressed, flags)))",
          "2116:   return FALSE;",
          "2120:           ((cache_bitmap_v2->flags << 7) & 0xFF80);",
          "",
          "[Removed Lines]",
          "2118:  bitsPerPixelId = BPP_CBR2[cache_bitmap_v2->bitmapBpp];",
          "",
          "[Added Lines]",
          "2173:  BOOL rc;",
          "2180:  bitsPerPixelId = get_bpp_bmf(cache_bitmap_v2->bitmapBpp, &rc);",
          "2181:  if (!rc)",
          "2182:   return FALSE;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2177: static CACHE_BITMAP_V3_ORDER* update_read_cache_bitmap_v3_order(rdpUpdate* update, wStream* s,",
          "2178:                                                                 UINT16 flags)",
          "2179: {",
          "2180:  BYTE bitsPerPixelId;",
          "2181:  BITMAP_DATA_EX* bitmapData;",
          "2182:  UINT32 new_len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2244:  BOOL rc;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2194:  cache_bitmap_v3->cacheId = flags & 0x00000003;",
          "2195:  cache_bitmap_v3->flags = (flags & 0x0000FF80) >> 7;",
          "2196:  bitsPerPixelId = (flags & 0x00000078) >> 3;",
          "2199:  if (Stream_GetRemainingLength(s) < 21)",
          "2200:   goto fail;",
          "",
          "[Removed Lines]",
          "2197:  cache_bitmap_v3->bpp = CBR23_BPP[bitsPerPixelId];",
          "",
          "[Added Lines]",
          "2262:  cache_bitmap_v3->bpp = get_cbr2_bpp(bitsPerPixelId, &rc);",
          "2263:  if (!rc)",
          "2264:   goto fail;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2242: BOOL update_write_cache_bitmap_v3_order(wStream* s, CACHE_BITMAP_V3_ORDER* cache_bitmap_v3,",
          "2243:                                         UINT16* flags)",
          "2244: {",
          "2245:  BYTE bitsPerPixelId;",
          "2246:  BITMAP_DATA_EX* bitmapData;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2312:  BOOL rc;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2250:   return FALSE;",
          "2252:  bitmapData = &cache_bitmap_v3->bitmapData;",
          "2255:           ((cache_bitmap_v3->flags << 7) & 0x0000FF80) | ((bitsPerPixelId << 3) & 0x00000078);",
          "",
          "[Removed Lines]",
          "2253:  bitsPerPixelId = BPP_CBR23[cache_bitmap_v3->bpp];",
          "",
          "[Added Lines]",
          "2321:  bitsPerPixelId = get_bpp_bmf(cache_bitmap_v3->bpp, &rc);",
          "2322:  if (!rc)",
          "2323:   return FALSE;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2574: static CACHE_BRUSH_ORDER* update_read_cache_brush_order(rdpUpdate* update, wStream* s, UINT16 flags)",
          "2575: {",
          "2576:  int i;",
          "2577:  BYTE iBitmapFormat;",
          "2578:  BOOL compressed = FALSE;",
          "2579:  CACHE_BRUSH_ORDER* cache_brush = calloc(1, sizeof(CACHE_BRUSH_ORDER));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2647:  BOOL rc;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2591:   goto fail;",
          "",
          "[Removed Lines]",
          "2590:  if (iBitmapFormat >= ARRAYSIZE(BMF_BPP))",
          "2593:  cache_brush->bpp = BMF_BPP[iBitmapFormat];",
          "",
          "[Added Lines]",
          "2661:  cache_brush->bpp = get_bmf_bpp(iBitmapFormat, &rc);",
          "2662:  if (!rc)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2661: {",
          "2662:  int i;",
          "2663:  BYTE iBitmapFormat;",
          "2664:  BOOL compressed = FALSE;",
          "2666:  if (!Stream_EnsureRemainingCapacity(s,",
          "2667:                                      update_approximate_cache_brush_order(cache_brush, flags)))",
          "2668:   return FALSE;",
          "",
          "[Removed Lines]",
          "2670:  iBitmapFormat = BPP_BMF[cache_brush->bpp];",
          "",
          "[Added Lines]",
          "2735:  BOOL rc;",
          "2742:  iBitmapFormat = get_bpp_bmf(cache_brush->bpp, &rc);",
          "2743:  if (!rc)",
          "2744:   return FALSE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c3a1ed780cc4aed639e3391d7cafb9edc9dc623c",
      "candidate_info": {
        "commit_hash": "c3a1ed780cc4aed639e3391d7cafb9edc9dc623c",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/c3a1ed780cc4aed639e3391d7cafb9edc9dc623c",
        "files": [
          "channels/printer/client/win/printer_win.c"
        ],
        "message": "Use localtime_s on windows",
        "before_after_code_files": [
          "channels/printer/client/win/printer_win.c||channels/printer/client/win/printer_win.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/printer/client/win/printer_win.c||channels/printer/client/win/printer_win.c": [
          "File: channels/printer/client/win/printer_win.c -> channels/printer/client/win/printer_win.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:  int rc;",
          "87:  tt = time(NULL);",
          "90:  str = calloc(len, sizeof(WCHAR));",
          "91:  if (!str)",
          "",
          "[Removed Lines]",
          "88:  t = localtime_r(&tt, &tres);",
          "",
          "[Added Lines]",
          "88:  t = localtime_s(&tt, &tres);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e7bffa64ef5ed70bac94f823e2b95262642f5296",
      "candidate_info": {
        "commit_hash": "e7bffa64ef5ed70bac94f823e2b95262642f5296",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/e7bffa64ef5ed70bac94f823e2b95262642f5296",
        "files": [
          "libfreerdp/core/orders.c"
        ],
        "message": "Fixed OOB read in update_recv_secondary_order\n\nCVE-2020-4032 thanks to @antonio-morales for finding this.",
        "before_after_code_files": [
          "libfreerdp/core/orders.c||libfreerdp/core/orders.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/orders.c||libfreerdp/core/orders.c": [
          "File: libfreerdp/core/orders.c -> libfreerdp/core/orders.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3762:              name, end - start);",
          "3763:   return FALSE;",
          "3764:  }",
          "3766:  if (diff > 0)",
          "3767:  {",
          "3768:   WLog_Print(update->log, WLOG_DEBUG,",
          "3769:              \"SECONDARY_ORDER %s: read %\" PRIuz \"bytes short, skipping\", name, diff);",
          "3771:  }",
          "3772:  return rc;",
          "3773: }",
          "",
          "[Removed Lines]",
          "3765:  diff = start - end;",
          "3770:   Stream_Seek(s, diff);",
          "",
          "[Added Lines]",
          "3765:  diff = end - start;",
          "3770:   if (!Stream_SafeSeek(s, diff))",
          "3771:    return FALSE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "caff01877d4df5f25a983b3aa5e57dde6a16a62f",
      "candidate_info": {
        "commit_hash": "caff01877d4df5f25a983b3aa5e57dde6a16a62f",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/caff01877d4df5f25a983b3aa5e57dde6a16a62f",
        "files": [
          "channels/rdpdr/client/rdpdr_main.c",
          "winpr/libwinpr/sspicli/sspicli.c"
        ],
        "message": "Fixed fallback to getlogin for android",
        "before_after_code_files": [
          "channels/rdpdr/client/rdpdr_main.c||channels/rdpdr/client/rdpdr_main.c",
          "winpr/libwinpr/sspicli/sspicli.c||winpr/libwinpr/sspicli/sspicli.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/rdpdr/client/rdpdr_main.c||channels/rdpdr/client/rdpdr_main.c": [
          "File: channels/rdpdr/client/rdpdr_main.c -> channels/rdpdr/client/rdpdr_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "600:  uid_t uid = getuid();",
          "601:  char uname[MAX_PATH] = { 0 };",
          "603:  if (getlogin_r(uname, sizeof(uname)) != 0)",
          "604:   return FALSE;",
          "606:  if (!path)",
          "607:   return FALSE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "603: #ifndef getlogin_r",
          "604:  strncpy(uname, getlogin(), sizeof(uname));",
          "605: #else",
          "608: #endif",
          "",
          "---------------"
        ],
        "winpr/libwinpr/sspicli/sspicli.c||winpr/libwinpr/sspicli/sspicli.c": [
          "File: winpr/libwinpr/sspicli/sspicli.c -> winpr/libwinpr/sspicli/sspicli.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "206:  switch (NameFormat)",
          "207:  {",
          "208:   case NameSamCompatible:",
          "209:    if (getlogin_r(login, sizeof(login)) != 0)",
          "210:     return FALSE;",
          "211:    length = strlen(login);",
          "213:    if (*nSize >= length)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "209: #ifndef getlogin_r",
          "210:    strncpy(login, getlogin(), sizeof(login));",
          "211: #else",
          "214: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}