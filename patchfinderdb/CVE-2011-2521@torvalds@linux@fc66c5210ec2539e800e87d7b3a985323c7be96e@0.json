{
  "cve_id": "CVE-2011-2521",
  "cve_desc": "The x86_assign_hw_event function in arch/x86/kernel/cpu/perf_event.c in the Performance Events subsystem in the Linux kernel before 2.6.39 does not properly calculate counter values, which allows local users to cause a denial of service (panic) via the perf program.",
  "repo": "torvalds/linux",
  "patch_hash": "fc66c5210ec2539e800e87d7b3a985323c7be96e",
  "patch_info": {
    "commit_hash": "fc66c5210ec2539e800e87d7b3a985323c7be96e",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/fc66c5210ec2539e800e87d7b3a985323c7be96e",
    "files": [
      "arch/x86/kernel/cpu/perf_event.c"
    ],
    "message": "perf, x86: Fix Intel fixed counters base initialization\n\nThe following patch solves the problems introduced by Robert's\ncommit 41bf498 and reported by Arun Sharma. This commit gets rid\nof the base + index notation for reading and writing PMU msrs.\n\nThe problem is that for fixed counters, the new calculation for\nthe base did not take into account the fixed counter indexes,\nthus all fixed counters were read/written from fixed counter 0.\nAlthough all fixed counters share the same config MSR, they each\nhave their own counter register.\n\nWithout:\n\n $ task -e unhalted_core_cycles -e instructions_retired -e baclears noploop 1 noploop for 1 seconds\n\n  242202299 unhalted_core_cycles (0.00% scaling, ena=1000790892, run=1000790892)\n 2389685946 instructions_retired (0.00% scaling, ena=1000790892, run=1000790892)\n      49473 baclears             (0.00% scaling, ena=1000790892, run=1000790892)\n\nWith:\n\n $ task -e unhalted_core_cycles -e instructions_retired -e baclears noploop 1 noploop for 1 seconds\n\n 2392703238 unhalted_core_cycles (0.00% scaling, ena=1000840809, run=1000840809)\n 2389793744 instructions_retired (0.00% scaling, ena=1000840809, run=1000840809)\n      47863 baclears             (0.00% scaling, ena=1000840809, run=1000840809)\n\nSigned-off-by: Stephane Eranian <eranian@google.com>\nCc: peterz@infradead.org\nCc: ming.m.lin@intel.com\nCc: robert.richter@amd.com\nCc: asharma@fb.com\nCc: perfmon2-devel@lists.sf.net\nLKML-Reference: <20110319172005.GB4978@quad>\nSigned-off-by: Ingo Molnar <mingo@elte.hu>",
    "before_after_code_files": [
      "arch/x86/kernel/cpu/perf_event.c||arch/x86/kernel/cpu/perf_event.c"
    ]
  },
  "patch_diff": {
    "arch/x86/kernel/cpu/perf_event.c||arch/x86/kernel/cpu/perf_event.c": [
      "File: arch/x86/kernel/cpu/perf_event.c -> arch/x86/kernel/cpu/perf_event.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "912:   hwc->event_base = 0;",
      "913:  } else if (hwc->idx >= X86_PMC_IDX_FIXED) {",
      "914:   hwc->config_base = MSR_ARCH_PERFMON_FIXED_CTR_CTRL;",
      "916:  } else {",
      "917:   hwc->config_base = x86_pmu_config_addr(hwc->idx);",
      "918:   hwc->event_base  = x86_pmu_event_addr(hwc->idx);",
      "",
      "[Removed Lines]",
      "915:   hwc->event_base = MSR_ARCH_PERFMON_FIXED_CTR0;",
      "",
      "[Added Lines]",
      "915:   hwc->event_base = MSR_ARCH_PERFMON_FIXED_CTR0 + (hwc->idx - X86_PMC_IDX_FIXED);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "73d6e52206a20354738418625cedc244cbfd5023",
      "candidate_info": {
        "commit_hash": "73d6e52206a20354738418625cedc244cbfd5023",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/73d6e52206a20354738418625cedc244cbfd5023",
        "files": [
          "arch/x86/kernel/cpu/perf_event.c",
          "arch/x86/kernel/cpu/perf_event_p4.c",
          "arch/x86/kernel/cpu/perf_event_p6.c"
        ],
        "message": "perf, x86: Store perfctr msr addresses in config_base/event_base\n\nInstead of storing the base addresses we can store the counter's msr\naddresses directly in config_base/event_base of struct hw_perf_event.\nThis avoids recalculating the address with each msr access. The\naddresses are configured one time. We also need this change to later\nmodify the address calculation.\n\nSigned-off-by: Robert Richter <robert.richter@amd.com>\nSigned-off-by: Peter Zijlstra <a.p.zijlstra@chello.nl>\nLKML-Reference: <1296664860-10886-5-git-send-email-robert.richter@amd.com>\nSigned-off-by: Ingo Molnar <mingo@elte.hu>",
        "before_after_code_files": [
          "arch/x86/kernel/cpu/perf_event.c||arch/x86/kernel/cpu/perf_event.c",
          "arch/x86/kernel/cpu/perf_event_p4.c||arch/x86/kernel/cpu/perf_event_p4.c",
          "arch/x86/kernel/cpu/perf_event_p6.c||arch/x86/kernel/cpu/perf_event_p6.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/x86/kernel/cpu/perf_event.c||arch/x86/kernel/cpu/perf_event.c"
          ],
          "candidate": [
            "arch/x86/kernel/cpu/perf_event.c||arch/x86/kernel/cpu/perf_event.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/x86/kernel/cpu/perf_event.c||arch/x86/kernel/cpu/perf_event.c": [
          "File: arch/x86/kernel/cpu/perf_event.c -> arch/x86/kernel/cpu/perf_event.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "299: again:",
          "300:  prev_raw_count = local64_read(&hwc->prev_count);",
          "303:  if (local64_cmpxchg(&hwc->prev_count, prev_raw_count,",
          "304:      new_raw_count) != prev_raw_count)",
          "",
          "[Removed Lines]",
          "301:  rdmsrl(hwc->event_base + idx, new_raw_count);",
          "",
          "[Added Lines]",
          "301:  rdmsrl(hwc->event_base, new_raw_count);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "655: static inline void __x86_pmu_enable_event(struct hw_perf_event *hwc,",
          "656:        u64 enable_mask)",
          "657: {",
          "659: }",
          "661: static void x86_pmu_enable_all(int added)",
          "",
          "[Removed Lines]",
          "658:  wrmsrl(hwc->config_base + hwc->idx, hwc->config | enable_mask);",
          "",
          "[Added Lines]",
          "658:  wrmsrl(hwc->config_base, hwc->config | enable_mask);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "834:   hwc->event_base = 0;",
          "835:  } else if (hwc->idx >= X86_PMC_IDX_FIXED) {",
          "836:   hwc->config_base = MSR_ARCH_PERFMON_FIXED_CTR_CTRL;",
          "843:  } else {",
          "846:  }",
          "847: }",
          "",
          "[Removed Lines]",
          "841:   hwc->event_base =",
          "842:    MSR_ARCH_PERFMON_FIXED_CTR0 - X86_PMC_IDX_FIXED;",
          "844:   hwc->config_base = x86_pmu.eventsel;",
          "845:   hwc->event_base  = x86_pmu.perfctr;",
          "",
          "[Added Lines]",
          "837:   hwc->event_base = MSR_ARCH_PERFMON_FIXED_CTR0;",
          "839:   hwc->config_base = x86_pmu_config_addr(hwc->idx);",
          "840:   hwc->event_base  = x86_pmu_event_addr(hwc->idx);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "932: {",
          "933:  struct hw_perf_event *hwc = &event->hw;",
          "936: }",
          "938: static DEFINE_PER_CPU(u64 [X86_PMC_IDX_MAX], pmc_prev_left);",
          "",
          "[Removed Lines]",
          "935:  wrmsrl(hwc->config_base + hwc->idx, hwc->config);",
          "",
          "[Added Lines]",
          "930:  wrmsrl(hwc->config_base, hwc->config);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "986:  local64_set(&hwc->prev_count, (u64)-left);",
          "",
          "[Removed Lines]",
          "988:  wrmsrl(hwc->event_base + idx, (u64)(-left) & x86_pmu.cntval_mask);",
          "",
          "[Added Lines]",
          "983:  wrmsrl(hwc->event_base, (u64)(-left) & x86_pmu.cntval_mask);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "995:  if (x86_pmu.perfctr_second_write) {",
          "997:    (u64)(-left) & x86_pmu.cntval_mask);",
          "998:  }",
          "",
          "[Removed Lines]",
          "996:   wrmsrl(hwc->event_base + idx,",
          "",
          "[Added Lines]",
          "991:   wrmsrl(hwc->event_base,",
          "",
          "---------------"
        ],
        "arch/x86/kernel/cpu/perf_event_p4.c||arch/x86/kernel/cpu/perf_event_p4.c": [
          "File: arch/x86/kernel/cpu/perf_event_p4.c -> arch/x86/kernel/cpu/perf_event_p4.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "764:  u64 v;",
          "768:  if (v & P4_CCCR_OVF) {",
          "770:   return 1;",
          "771:  }",
          "",
          "[Removed Lines]",
          "767:  rdmsrl(hwc->config_base + hwc->idx, v);",
          "769:   wrmsrl(hwc->config_base + hwc->idx, v & ~P4_CCCR_OVF);",
          "",
          "[Added Lines]",
          "767:  rdmsrl(hwc->config_base, v);",
          "769:   wrmsrl(hwc->config_base, v & ~P4_CCCR_OVF);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "819:   (u64)(p4_config_unpack_cccr(hwc->config)) &",
          "820:    ~P4_CCCR_ENABLE & ~P4_CCCR_OVF & ~P4_CCCR_RESERVED);",
          "821: }",
          "",
          "[Removed Lines]",
          "818:  (void)checking_wrmsrl(hwc->config_base + hwc->idx,",
          "",
          "[Added Lines]",
          "818:  (void)checking_wrmsrl(hwc->config_base,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "885:  p4_pmu_enable_pebs(hwc->config);",
          "887:  (void)checking_wrmsrl(escr_addr, escr_conf);",
          "889:     (cccr & ~P4_CCCR_RESERVED) | P4_CCCR_ENABLE);",
          "890: }",
          "",
          "[Removed Lines]",
          "888:  (void)checking_wrmsrl(hwc->config_base + hwc->idx,",
          "",
          "[Added Lines]",
          "888:  (void)checking_wrmsrl(hwc->config_base,",
          "",
          "---------------"
        ],
        "arch/x86/kernel/cpu/perf_event_p6.c||arch/x86/kernel/cpu/perf_event_p6.c": [
          "File: arch/x86/kernel/cpu/perf_event_p6.c -> arch/x86/kernel/cpu/perf_event_p6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:  if (cpuc->enabled)",
          "69:   val |= ARCH_PERFMON_EVENTSEL_ENABLE;",
          "72: }",
          "74: static void p6_pmu_enable_event(struct perf_event *event)",
          "",
          "[Removed Lines]",
          "71:  (void)checking_wrmsrl(hwc->config_base + hwc->idx, val);",
          "",
          "[Added Lines]",
          "71:  (void)checking_wrmsrl(hwc->config_base, val);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:  if (cpuc->enabled)",
          "82:   val |= ARCH_PERFMON_EVENTSEL_ENABLE;",
          "85: }",
          "87: static __initconst const struct x86_pmu p6_pmu = {",
          "",
          "[Removed Lines]",
          "84:  (void)checking_wrmsrl(hwc->config_base + hwc->idx, val);",
          "",
          "[Added Lines]",
          "84:  (void)checking_wrmsrl(hwc->config_base, val);",
          "",
          "---------------"
        ]
      }
    }
  ]
}