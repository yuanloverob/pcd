{
  "cve_id": "CVE-2022-0393",
  "cve_desc": "Out-of-bounds Read in GitHub repository vim/vim prior to 8.2.",
  "repo": "vim/vim",
  "patch_hash": "a4bc2dd7cccf5a4a9f78b58b6f35a45d17164323",
  "patch_info": {
    "commit_hash": "a4bc2dd7cccf5a4a9f78b58b6f35a45d17164323",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/a4bc2dd7cccf5a4a9f78b58b6f35a45d17164323",
    "files": [
      "src/getchar.c",
      "src/testdir/test_registers.vim",
      "src/version.c"
    ],
    "message": "patch 8.2.4233: crash when recording and using Select mode\n\nProblem:    Crash when recording and using Select mode.\nSolution:   When deleting the last recorded character check there is something\n            to delete.",
    "before_after_code_files": [
      "src/getchar.c||src/getchar.c",
      "src/testdir/test_registers.vim||src/testdir/test_registers.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/getchar.c||src/getchar.c": [
      "File: src/getchar.c -> src/getchar.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "252:     static void",
      "253: delete_buff_tail(buffheader_T *buf, int slen)",
      "254: {",
      "257:     if (len >= slen)",
      "258:     {",
      "259:  buf->bh_curr->b_str[len - slen] = NUL;",
      "",
      "[Removed Lines]",
      "255:     int len = (int)STRLEN(buf->bh_curr->b_str);",
      "",
      "[Added Lines]",
      "255:     int len;",
      "257:     if (buf->bh_curr == NULL || buf->bh_curr->b_str == NULL)",
      "258:  return;  // nothing to delete",
      "259:     len = (int)STRLEN(buf->bh_curr->b_str);",
      "",
      "---------------"
    ],
    "src/testdir/test_registers.vim||src/testdir/test_registers.vim": [
      "File: src/testdir/test_registers.vim -> src/testdir/test_registers.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "739:   bwipe!",
      "740: endfunc",
      "742: \" Make sure that y_append is correctly reset",
      "743: \" and the previous register is working as expected",
      "744: func Test_register_y_append_reset()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "742: func Test_record_in_select_mode()",
      "743:   new",
      "744:   call setline(1, 'text')",
      "745:   sil norm \u0016q0\u00070",
      "746:   sil norm q",
      "747:   call assert_equal('0ext', getline(1))",
      "748:   bwipe!",
      "749: endfunc",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "751: static int included_patches[] =",
      "754:     4232,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "754:     4233,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "37cf413e3e768b76c975e4a7081472d75d649c72",
      "candidate_info": {
        "commit_hash": "37cf413e3e768b76c975e4a7081472d75d649c72",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/37cf413e3e768b76c975e4a7081472d75d649c72",
        "files": [
          "src/getchar.c",
          "src/version.c"
        ],
        "message": "patch 8.2.4235: invalid check for NULL pointer\n\nProblem:    Invalid check for NULL pointer.\nSolution:   Remove the check.",
        "before_after_code_files": [
          "src/getchar.c||src/getchar.c",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/getchar.c||src/getchar.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/getchar.c||src/getchar.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/getchar.c||src/getchar.c": [
          "File: src/getchar.c -> src/getchar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "254: {",
          "255:     int len;",
          "258:  return;  // nothing to delete",
          "259:     len = (int)STRLEN(buf->bh_curr->b_str);",
          "260:     if (len >= slen)",
          "",
          "[Removed Lines]",
          "257:     if (buf->bh_curr == NULL || buf->bh_curr->b_str == NULL)",
          "",
          "[Added Lines]",
          "257:     if (buf->bh_curr == NULL)",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "751: static int included_patches[] =",
          "754:     4234,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "754:     4235,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c88e977862ba6477a3b5b28706c45f96069a3073",
      "candidate_info": {
        "commit_hash": "c88e977862ba6477a3b5b28706c45f96069a3073",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/c88e977862ba6477a3b5b28706c45f96069a3073",
        "files": [
          "src/getchar.c",
          "src/normal.c",
          "src/proto/getchar.pro",
          "src/testdir/test_registers.vim",
          "src/version.c"
        ],
        "message": "patch 8.2.3993: when recording a change in Select mode char appears twice\n\nProblem:    When recording a change in Select mode the first typed character\n            appears twice.\nSolution:   When putting the character back into typeahead remove it from\n            recorded characters. (closes #9462)",
        "before_after_code_files": [
          "src/getchar.c||src/getchar.c",
          "src/normal.c||src/normal.c",
          "src/proto/getchar.pro||src/proto/getchar.pro",
          "src/testdir/test_registers.vim||src/testdir/test_registers.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/getchar.c||src/getchar.c",
            "src/testdir/test_registers.vim||src/testdir/test_registers.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/getchar.c||src/getchar.c",
            "src/testdir/test_registers.vim||src/testdir/test_registers.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/getchar.c||src/getchar.c": [
          "File: src/getchar.c -> src/getchar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "241:     }",
          "242: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "248:     static void",
          "249: delete_buff_tail(buffheader_T *buf, int slen)",
          "250: {",
          "251:     int len = (int)STRLEN(buf->bh_curr->b_str);",
          "253:     if (len >= slen)",
          "254:     {",
          "255:  buf->bh_curr->b_str[len - slen] = NUL;",
          "256:  buf->bh_space += slen;",
          "257:     }",
          "258: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1105: ins_char_typebuf(int c, int modifier)",
          "1106: {",
          "1107:     char_u buf[MB_MAXBYTES + 4];",
          "1110:     if (modifier != 0)",
          "1111:     {",
          "",
          "[Removed Lines]",
          "1104:     void",
          "1108:     int  idx = 0;",
          "",
          "[Added Lines]",
          "1121:     int",
          "1125:     int  len = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1113:  buf[1] = KS_MODIFIER;",
          "1114:  buf[2] = modifier;",
          "1115:  buf[3] = NUL;",
          "1117:     }",
          "1118:     if (IS_SPECIAL(c))",
          "1119:     {",
          "1125:     }",
          "1126:     else",
          "1128:     (void)ins_typebuf(buf, KeyNoremap, 0, !KeyTyped, cmd_silent);",
          "1129: }",
          "",
          "[Removed Lines]",
          "1116:  idx = 3;",
          "1120:  buf[idx] = K_SPECIAL;",
          "1121:  buf[idx + 1] = K_SECOND(c);",
          "1122:  buf[idx + 2] = K_THIRD(c);",
          "1123:  buf[idx + 3] = NUL;",
          "1124:  idx += 3;",
          "1127:  buf[(*mb_char2bytes)(c, buf + idx) + idx] = NUL;",
          "",
          "[Added Lines]",
          "1133:  len = 3;",
          "1137:  buf[len] = K_SPECIAL;",
          "1138:  buf[len + 1] = K_SECOND(c);",
          "1139:  buf[len + 2] = K_THIRD(c);",
          "1140:  buf[len + 3] = NUL;",
          "1141:  len += 3;",
          "1144:     {",
          "1145:  len += (*mb_char2bytes)(c, buf + len);",
          "1146:  buf[len] = NUL;",
          "1147:     }",
          "1149:     return len;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1301:     ++maptick;",
          "1302: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1331:     void",
          "1332: ungetchars(int len)",
          "1333: {",
          "1334:     if (reg_recording != 0)",
          "1335:     {",
          "1336:  delete_buff_tail(&recordbuff, len);",
          "1337:  last_recorded_len -= len;",
          "1338:     }",
          "1339: }",
          "",
          "---------------"
        ],
        "src/normal.c||src/normal.c": [
          "File: src/normal.c -> src/normal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "592:      && VIsual_select",
          "593:      && (vim_isprintc(c) || c == NL || c == CAR || c == K_KENTER))",
          "594:     {",
          "601:  if (restart_edit != 0)",
          "602:      c = 'd';",
          "603:  else",
          "",
          "[Removed Lines]",
          "600:  ins_char_typebuf(vgetc_char, vgetc_mod_mask);",
          "",
          "[Added Lines]",
          "595:  int len;",
          "602:  len = ins_char_typebuf(vgetc_char, vgetc_mod_mask);",
          "606:  ungetchars(len);",
          "",
          "---------------"
        ],
        "src/proto/getchar.pro||src/proto/getchar.pro": [
          "File: src/proto/getchar.pro -> src/proto/getchar.pro",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: void stop_redo_ins(void);",
          "25: int noremap_keys(void);",
          "26: int ins_typebuf(char_u *str, int noremap, int offset, int nottyped, int silent);",
          "28: int typebuf_changed(int tb_change_cnt);",
          "29: int typebuf_typed(void);",
          "30: int typebuf_maplen(void);",
          "31: void del_typebuf(int len, int offset);",
          "32: int save_typebuf(void);",
          "33: void save_typeahead(tasave_T *tp);",
          "34: void restore_typeahead(tasave_T *tp, int overwrite);",
          "",
          "[Removed Lines]",
          "27: void ins_char_typebuf(int c, int modifier);",
          "",
          "[Added Lines]",
          "27: int ins_char_typebuf(int c, int modifier);",
          "32: void ungetchars(int len);",
          "",
          "---------------"
        ],
        "src/testdir/test_registers.vim||src/testdir/test_registers.vim": [
          "File: src/testdir/test_registers.vim -> src/testdir/test_registers.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "197:   endif",
          "198: endfunc",
          "200: \" Test for executing the last used register (@)",
          "201: func Test_last_used_exec_reg()",
          "202:   \" Test for the @: command",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "200: func Test_recording_with_select_mode()",
          "201:   new",
          "202:   call feedkeys(\"qacc12345\\<Esc>gH98765\\<Esc>q\", \"tx\")",
          "203:   call assert_equal(\"98765\", getline(1))",
          "204:   call assert_equal(\"cc12345\\<Esc>gH98765\\<Esc>\", @a)",
          "205:   call setline(1, 'asdf')",
          "206:   normal! @a",
          "207:   call assert_equal(\"98765\", getline(1))",
          "208:   bwipe!",
          "209: endfunc",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "751: static int included_patches[] =",
          "754:     3992,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "754:     3993,",
          "",
          "---------------"
        ]
      }
    }
  ]
}