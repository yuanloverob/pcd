{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c075c505f30b91e3de18fb2a058e2e6d6fd7aead",
      "candidate_info": {
        "commit_hash": "c075c505f30b91e3de18fb2a058e2e6d6fd7aead",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c075c505f30b91e3de18fb2a058e2e6d6fd7aead",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y"
        ],
        "message": "Fix parser bugs: require a semicolon after an EXPLAIN command.\n\nFossilOrigin-Name: 707a058a22bd00ef14431cee0d02048cf1be745c0ef5254eda76c325435738ff",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 355afd77df21a2265871ca6d075f26b1fa121c7c2682cf512281944ff0c2186d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "120: ecmd ::= SEMI.",
          "121: ecmd ::= cmdx SEMI.",
          "122: %ifndef SQLITE_OMIT_EXPLAIN",
          "124: explain ::= EXPLAIN.              { pParse->explain = 1; }",
          "125: explain ::= EXPLAIN QUERY PLAN.   { pParse->explain = 2; }",
          "126: %endif  SQLITE_OMIT_EXPLAIN",
          "",
          "[Removed Lines]",
          "123: ecmd ::= explain cmdx.",
          "",
          "[Added Lines]",
          "123: ecmd ::= explain cmdx SEMI.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9e9a67adb059733e05e0791f2ec519985eaa333c",
      "candidate_info": {
        "commit_hash": "9e9a67adb059733e05e0791f2ec519985eaa333c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9e9a67adb059733e05e0791f2ec519985eaa333c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/join.test"
        ],
        "message": "Ensure the functions that appear to be constant are not factored out of expression that originate on the right-hand side of a LEFT JOIN. Ticket [6710d2f7a13a2997]\n\nFossilOrigin-Name: 500c9152daaf11cf69d778aa8592175f6088337c6667c59af6df3a24cd81eb0e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/join.test||test/join.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "test/join.test||test/join.test"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "test/join.test||test/join.test"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9c4bca64fb5f635296a8d7d7c1bf2808e02ca734a9983e5cee9132f5352a9a6d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3994:       break;",
          "3995:     }",
          "3997:     case TK_IF_NULL_ROW: {",
          "3998:       int addrINR;",
          "3999:       addrINR = sqlite3VdbeAddOp1(v, OP_IfNullRow, pExpr->iTable);",
          "4000:       inReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft, target);",
          "4001:       sqlite3VdbeJumpHere(v, addrINR);",
          "4002:       sqlite3VdbeChangeP3(v, addrINR, inReg);",
          "4003:       break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4005:       u8 okConstFactor = pParse->okConstFactor;",
          "4011:       pParse->okConstFactor = 0;",
          "4013:       pParse->okConstFactor = okConstFactor;",
          "",
          "---------------"
        ],
        "test/join.test||test/join.test": [
          "File: test/join.test -> test/join.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "864:    WHERE (b IS NOT NULL)=0;",
          "865: } {1 {}}",
          "867: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "867: # 2019-08-17 ticket https://sqlite.org/src/tktview/6710d2f7a13a299728ab",
          "868: # Ensure that constants that derive from the right-hand table of a LEFT JOIN",
          "869: # are never factored out, since they are not really constant.",
          "870: #",
          "871: do_execsql_test join-17.100 {",
          "872:   DROP TABLE IF EXISTS t1;",
          "873:   CREATE TABLE t1(x);",
          "874:   INSERT INTO t1(x) VALUES(0),(1);",
          "875:   SELECT * FROM t1 LEFT JOIN (SELECT abs(1) AS y FROM t1) ON x WHERE NOT(y='a');",
          "876: } {1 1 1 1}",
          "877: do_execsql_test join-17.110 {",
          "878:   SELECT * FROM t1 LEFT JOIN (SELECT abs(1)+2 AS y FROM t1) ON x",
          "879:    WHERE NOT(y='a');",
          "880: } {1 3 1 3}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a22d2fca3315822f16c20cdb3738ac637f31b44a",
      "candidate_info": {
        "commit_hash": "a22d2fca3315822f16c20cdb3738ac637f31b44a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a22d2fca3315822f16c20cdb3738ac637f31b44a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/prepare.c"
        ],
        "message": "Call sqlite3Prepare() directly, rather than going through sqlite3_prepare(), when processing the sqlite_master.sql column for a schema.\n\nFossilOrigin-Name: cc49380ea76a4a05843d3a0bdfb925464dc9d72c33cf5ab5243dd07d161ad038",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/prepare.c||src/prepare.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d7667f6560318272c8b35b478e29b0ed134105dfd119a2fd53ef0490442c60cc",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:   return 0;",
          "58: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: static int sqlite3Prepare(",
          "69: );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:     db->init.newTnum = sqlite3Atoi(argv[3]);",
          "107:     db->init.orphanTrigger = 0;",
          "108:     db->init.azInit = argv;",
          "110:     rc = db->errCode;",
          "111:     assert( (rc&0xFF)==(rcp&0xFF) );",
          "112:     db->init.iDb = saved_iDb;",
          "",
          "[Removed Lines]",
          "109:     TESTONLY(rcp = ) sqlite3_prepare(db, argv[4], -1, &pStmt, 0);",
          "",
          "[Added Lines]",
          "121:     pStmt = 0;",
          "122:     TESTONLY(rcp = ) sqlite3Prepare(db, argv[4], -1, 0, 0, &pStmt, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c72f2fb7feff582444b8ffdc6c900c69847ce8a9",
      "candidate_info": {
        "commit_hash": "c72f2fb7feff582444b8ffdc6c900c69847ce8a9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c72f2fb7feff582444b8ffdc6c900c69847ce8a9",
        "files": [
          "ext/fts3/fts3.c",
          "ext/fts3/fts3Int.h",
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "More improvements to shadow table corruption detection in FTS3.\n\nFossilOrigin-Name: 51525f9c3235967bc00a090e84c70a6400698c897aa4742e817121c725b8c99d",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h",
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1486:   fts3DatabasePageSize(&rc, p);",
          "1487:   p->nNodeSize = p->nPgsz-35;",
          "1490:   fts3DeclareVtab(&rc, p);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1489: #if defined(SQLITE_DEBUG)||defined(SQLITE_TEST)",
          "1490:   p->nMergeCount = FTS3_MERGE_COUNT;",
          "1491: #endif",
          "",
          "---------------"
        ],
        "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h": [
          "File: ext/fts3/fts3Int.h -> ext/fts3/fts3Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "303:   int bNoIncrDoclist;",
          "304: #endif",
          "305: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "306:   int nMergeCount;",
          "311: #if defined(SQLITE_DEBUG) || defined(SQLITE_TEST)",
          "312: # define MergeCount(P) ((P)->nMergeCount)",
          "313: #else",
          "314: # define MergeCount(P) FTS3_MERGE_COUNT",
          "315: #endif",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1157:       fts3LogMerge(16, getAbsoluteLevel(p, iLangid, iIndex, iLevel));",
          "1158:       rc = fts3SegmentMerge(p, iLangid, iIndex, iLevel);",
          "",
          "[Removed Lines]",
          "1156:     if( iNext>=FTS3_MERGE_COUNT ){",
          "",
          "[Added Lines]",
          "1156:     if( iNext>=MergeCount(p) ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4280:       int i;",
          "4281:       int nHeight = (int)aRoot[0];",
          "4282:       NodeWriter *pNode;",
          "4284:       pWriter->nLeafEst = (int)((iEnd - iStart) + 1)/FTS_MAX_APPENDABLE_HEIGHT;",
          "4285:       pWriter->iStart = iStart;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4283:       if( nHeight<1 || nHeight>FTS_MAX_APPENDABLE_HEIGHT ){",
          "4284:         sqlite3_reset(pSelect);",
          "4285:         return FTS_CORRUPT_VTAB;",
          "4286:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5049: ){",
          "5050:   int rc;",
          "5052:   int nMerge = 0;",
          "5053:   const char *z = zParam;",
          "",
          "[Removed Lines]",
          "5051:   int nMin = (FTS3_MERGE_COUNT / 2);",
          "",
          "[Added Lines]",
          "5055:   int nMin = (MergeCount(p) / 2);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5093:   int rc = SQLITE_OK;",
          "5094:   sqlite3_stmt *pStmt = 0;",
          "5095:   p->nAutoincrmerge = fts3Getint(&zParam);",
          "5097:     p->nAutoincrmerge = 8;",
          "5098:   }",
          "5099:   if( !p->bHasStat ){",
          "",
          "[Removed Lines]",
          "5096:   if( p->nAutoincrmerge==1 || p->nAutoincrmerge>FTS3_MERGE_COUNT ){",
          "",
          "[Added Lines]",
          "5100:   if( p->nAutoincrmerge==1 || p->nAutoincrmerge>MergeCount(p) ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5384:     }else if( nVal>21 && 0==sqlite3_strnicmp(zVal,\"test-no-incr-doclist=\",21) ){",
          "5385:       p->bNoIncrDoclist = atoi(&zVal[21]);",
          "5386:       rc = SQLITE_OK;",
          "5387:     }",
          "5388: #endif",
          "5389:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5391:     }else if( nVal>11 && 0==sqlite3_strnicmp(zVal,\"mergecount=\",11) ){",
          "5392:       v = atoi(&zVal[11]);",
          "5393:       if( v>=4 && v<=FTS3_MERGE_COUNT && (v&1)==0 ) p->nMergeCount = v;",
          "5394:       rc = SQLITE_OK;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 04b2873be5aedeb1c4325cf36c4b5d180f929a641caf1e3829c03778adb29c8e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b70b0df8eb8cea79074289826079699a00a0aef4",
      "candidate_info": {
        "commit_hash": "b70b0df8eb8cea79074289826079699a00a0aef4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b70b0df8eb8cea79074289826079699a00a0aef4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Slightly smaller and faster implementation of the OP_MakeRecord opcode.\n\nFossilOrigin-Name: 3bdce7ef1a6bb03affe978243fec603d5a55c071aa6d87c469a3c199d23f3b5e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a27b0b880d76c6838c0365f66bcd69b1b49b7594470993b608f4e490cbdc4882",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2933:       goto no_mem;",
          "2934:     }",
          "2935:   }",
          "2941:   assert( pData0<=pLast );",
          "2942:   pRec = pData0;",
          "2943:   do{",
          "2944:     serial_type = pRec->uTemp;",
          "2951:   }while( (++pRec)<=pLast );",
          "2955:   assert( pOp->p3>0 && pOp->p3<=(p->nMem+1 - p->nCursor) );",
          "2962:   REGISTER_TRACE(pOp->p3, pOut);",
          "2964:   break;",
          "2965: }",
          "",
          "[Removed Lines]",
          "2936:   zNewRecord = (u8 *)pOut->z;",
          "2939:   i = putVarint32(zNewRecord, nHdr);",
          "2940:   j = nHdr;",
          "2952:   assert( i==nHdr );",
          "2953:   assert( j==nByte );",
          "2956:   pOut->n = (int)nByte;",
          "2957:   pOut->flags = MEM_Blob;",
          "2958:   if( nZero ){",
          "2959:     pOut->u.nZero = nZero;",
          "2960:     pOut->flags |= MEM_Zero;",
          "2961:   }",
          "2963:   UPDATE_MAX_BLOBSIZE(pOut);",
          "",
          "[Added Lines]",
          "2935:   pOut->n = (int)nByte;",
          "2936:   pOut->flags = MEM_Blob;",
          "2937:   if( nZero ){",
          "2938:     pOut->u.nZero = nZero;",
          "2939:     pOut->flags |= MEM_Zero;",
          "2940:   }",
          "2941:   UPDATE_MAX_BLOBSIZE(pOut);",
          "2942:   zHdr = (u8 *)pOut->z;",
          "2943:   zPayload = zHdr + nHdr;",
          "2946:   zHdr += putVarint32(zHdr, nHdr);",
          "2958:   assert( nHdr==(int)(zHdr - (u8*)pOut->z) );",
          "2959:   assert( nByte==(int)(zPayload - (u8*)pOut->z) );",
          "",
          "---------------"
        ]
      }
    }
  ]
}