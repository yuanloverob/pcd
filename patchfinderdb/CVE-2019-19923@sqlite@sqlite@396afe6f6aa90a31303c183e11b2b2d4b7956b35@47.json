{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c813750b7b485f00346ff6a2bfde0fcb5786da43",
      "candidate_info": {
        "commit_hash": "c813750b7b485f00346ff6a2bfde0fcb5786da43",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c813750b7b485f00346ff6a2bfde0fcb5786da43",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c"
        ],
        "message": "Modify new window functions function so that cursors are stepped immediately after each operation, instead of immediately before.\n\nFossilOrigin-Name: 093d2b25f1b656bba57d665aac68109436861b157a5769432b612176dae3f6eb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 45cbd3b4498cea8856f189e9d0a192556d4f15212055b8328a1beca6083fc47a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1892:     addrIf = sqlite3VdbeAddOp3(v, OP_IfPos, regCountdown, 0, 1);",
          "1893:   }",
          "1902:   switch( op ){",
          "1903:     case WINDOW_RETURN_ROW:",
          "1904:       windowAggFinal(p->pParse, p->pMWin, 0);",
          "",
          "[Removed Lines]",
          "1895:   if( jumpOnEof ){",
          "1896:     sqlite3VdbeAddOp2(v, OP_Next, csr, sqlite3VdbeCurrentAddr(v)+2);",
          "1897:     ret = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1898:   }else{",
          "1899:     sqlite3VdbeAddOp2(v, OP_Next, csr, sqlite3VdbeCurrentAddr(v)+1);",
          "1900:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1914:       break;",
          "1915:   }",
          "1919:   }",
          "1920:   if( regCountdown>0 ){",
          "1921:     sqlite3VdbeJumpHere(v, addrIf);",
          "1922:   }",
          "",
          "[Removed Lines]",
          "1917:   if( ret ){",
          "1918:     sqlite3VdbeJumpHere(v, ret);",
          "",
          "[Added Lines]",
          "1910:   if( jumpOnEof ){",
          "1911:     sqlite3VdbeAddOp2(v, OP_Next, csr, sqlite3VdbeCurrentAddr(v)+2);",
          "1912:     ret = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1913:   }else{",
          "1914:     sqlite3VdbeAddOp2(v, OP_Next, csr, sqlite3VdbeCurrentAddr(v)+1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2024:   int addrCacheNext;",
          "2026:   int addrShortcut = 0;",
          "2028:   int bCache = windowCachePartition(pMWin);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2024:   int addrEmpty = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2137:     sqlite3VdbeAddOp3(v, OP_Subtract, regStart, regEnd, regStart);",
          "2138:   }",
          "2144:   sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regFirst);",
          "2145:   addrGoto = sqlite3VdbeAddOp0(v, OP_Goto);",
          "",
          "[Removed Lines]",
          "2140:   sqlite3VdbeAddOp2(v, OP_Rewind, csrStart, 1);   sqlite3VdbeChangeP5(v, 1);",
          "2141:   sqlite3VdbeAddOp2(v, OP_Rewind, csrCurrent, 1); sqlite3VdbeChangeP5(v, 1);",
          "2142:   sqlite3VdbeAddOp2(v, OP_Rewind, csrEnd, 1); sqlite3VdbeChangeP5(v, 1);",
          "",
          "[Added Lines]",
          "2138:   sqlite3VdbeAddOp2(v, OP_Rewind, csrStart, 1);",
          "2139:   sqlite3VdbeAddOp2(v, OP_Rewind, csrCurrent, 1);",
          "2140:   sqlite3VdbeAddOp2(v, OP_Rewind, csrEnd, 1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2152:     sqlite3VdbeJumpHere(v, addrIf);",
          "2153:   }",
          "2154:   if( pMWin->eStart==TK_FOLLOWING ){",
          "2155:     windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, regEnd, 0);",
          "2156:     windowCodeOp(&s, WINDOW_AGGINVERSE, csrStart, regStart, 0);",
          "2157:   }else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2153:     windowCodeOp(&s, WINDOW_AGGSTEP, csrEnd, 0, 0);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2160:     windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, 0, 0);",
          "2161:     windowCodeOp(&s, WINDOW_AGGINVERSE, csrStart, regStart, 0);",
          "2162:   }else{",
          "2164:     windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, 0, 0);",
          "2165:     windowCodeOp(&s, WINDOW_AGGINVERSE, csrStart, regStart, 0);",
          "2166:     sqlite3VdbeJumpHere(v, addr);",
          "2167:   }",
          "2168:   VdbeModuleComment((pParse->pVdbe, \"End windowCodeStep.SECOND_ROW_CODE\"));",
          "2178:   if( bCache ){",
          "2179:     sqlite3VdbeAddOp2(v, OP_Next, csrWrite, addrCacheNext);",
          "2180:     sqlite3VdbeJumpHere(v, addrCacheRewind);",
          "",
          "[Removed Lines]",
          "2163:     int addr = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "2170:   VdbeModuleComment((pParse->pVdbe, \"Begin windowCodeStep.ALL_ROW_CODE\"));",
          "2171:   sqlite3VdbeJumpHere(v, addrGoto);",
          "2172:   if( pMWin->eEnd!=TK_PRECEDING ){",
          "2173:     windowCodeOp(&s, WINDOW_AGGSTEP, csrEnd, 0, 0);",
          "2174:   }",
          "2175:   VdbeModuleComment((pParse->pVdbe, \"End windowCodeStep.ALL_ROW_CODE\"));",
          "",
          "[Added Lines]",
          "2162:     int addr;",
          "2163:     windowCodeOp(&s, WINDOW_AGGSTEP, csrEnd, 0, 0);",
          "2164:     addr = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "2172:   sqlite3VdbeJumpHere(v, addrGoto);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2184:   }",
          "2189:   if( pMWin->pPartition && bCache==0 ){",
          "2190:     addrInteger = sqlite3VdbeAddOp2(v, OP_Integer, 0, regFlushPart);",
          "2191:     sqlite3VdbeJumpHere(v, addrGosubFlush);",
          "2192:   }",
          "2194:   if( pMWin->eEnd==TK_PRECEDING ){",
          "2197:   }else{",
          "2198:     int addrBreak;",
          "2207:     sqlite3VdbeAddOp2(v, OP_Goto, 0, addrStart);",
          "2208:     sqlite3VdbeJumpHere(v, addrBreak);",
          "2209:   }",
          "2211:   if( bCache && addrShortcut>0 ) sqlite3VdbeJumpHere(v, addrShortcut);",
          "2212:   sqlite3VdbeAddOp1(v, OP_ResetSorter, csrCurrent);",
          "2213:   sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regSize);",
          "",
          "[Removed Lines]",
          "2188:   VdbeModuleComment((pParse->pVdbe, \"Begin windowCodeStep.FLUSH_CODE\"));",
          "2195:     windowCodeOp(&s, WINDOW_AGGSTEP, csrEnd, regEnd, 1);",
          "2196:     windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, 0, 1);",
          "2199:     int addrStart = sqlite3VdbeCurrentAddr(v);",
          "2200:     if( pMWin->eStart==TK_FOLLOWING ){",
          "2201:       addrBreak = windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, regEnd, 1);",
          "2202:       windowCodeOp(&s, WINDOW_AGGINVERSE, csrStart, regStart, 1);",
          "2203:     }else{",
          "2204:       addrBreak = windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, 0, 1);",
          "2205:       windowCodeOp(&s, WINDOW_AGGINVERSE, csrStart, regStart, 0);",
          "2206:     }",
          "",
          "[Added Lines]",
          "2187:   VdbeModuleComment((pParse->pVdbe, \"Begin windowCodeStep.FLUSH_CODE\"));",
          "2188:   addrEmpty = sqlite3VdbeAddOp1(v, OP_Rewind, csrWrite);",
          "2190:     windowCodeOp(&s, WINDOW_AGGSTEP, csrEnd, regEnd, 0);",
          "2191:     windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, 0, 0);",
          "2192:   }else if( pMWin->eStart==TK_FOLLOWING ){",
          "2193:     int addrStart;",
          "2194:     int addrBreak1;",
          "2195:     int addrBreak2;",
          "2196:     int addrBreak3;",
          "2197:     windowCodeOp(&s, WINDOW_AGGSTEP, csrEnd, 0, 0);",
          "2198:     addrStart = sqlite3VdbeCurrentAddr(v);",
          "2199:     addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, regEnd, 1);",
          "2200:     addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, csrStart, regStart, 1);",
          "2201:     sqlite3VdbeAddOp2(v, OP_Goto, 0, addrStart);",
          "2202:     sqlite3VdbeJumpHere(v, addrBreak2);",
          "2203:     addrStart = sqlite3VdbeCurrentAddr(v);",
          "2204:     addrBreak3 = windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, 0, 1);",
          "2205:     sqlite3VdbeAddOp2(v, OP_Goto, 0, addrStart);",
          "2206:     sqlite3VdbeJumpHere(v, addrBreak1);",
          "2207:     sqlite3VdbeJumpHere(v, addrBreak3);",
          "2210:     int addrStart;",
          "2211:     windowCodeOp(&s, WINDOW_AGGSTEP, csrEnd, 0, 0);",
          "2212:     addrStart = sqlite3VdbeCurrentAddr(v);",
          "2213:     addrBreak = windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, 0, 1);",
          "2214:     windowCodeOp(&s, WINDOW_AGGINVERSE, csrStart, regStart, 0);",
          "2219:   sqlite3VdbeJumpHere(v, addrEmpty);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2681:   if( pMWin->eType==TK_ROWS",
          "2682:    && (pMWin->eStart!=TK_UNBOUNDED||pMWin->eEnd!=TK_CURRENT||!pMWin->pOrderBy)",
          "2683:   ){",
          "2686:     ){",
          "2687:       VdbeModuleComment((pParse->pVdbe, \"Begin RowExprStep()\"));",
          "2688:       windowCodeRowExprStep(pParse, p, pWInfo, regGosub, addrGosub);",
          "",
          "[Removed Lines]",
          "2684:     if( (pMWin->eStart!=TK_PRECEDING && pMWin->eStart!=TK_FOLLOWING)",
          "2685:      || (pMWin->eEnd!=TK_FOLLOWING && pMWin->eEnd!=TK_PRECEDING)",
          "",
          "[Added Lines]",
          "2694:     int bCache = windowCachePartition(pMWin);",
          "2695:     if( (pMWin->eEnd!=TK_FOLLOWING   && pMWin->eEnd!=TK_PRECEDING)",
          "2696:      || (pMWin->eStart!=TK_FOLLOWING && pMWin->eStart!=TK_PRECEDING)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "81506b88b8b286c50940bbba66e6abaac5d64b62",
      "candidate_info": {
        "commit_hash": "81506b88b8b286c50940bbba66e6abaac5d64b62",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/81506b88b8b286c50940bbba66e6abaac5d64b62",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/insert.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/window.c"
        ],
        "message": "One of two options on how to address ticket [61c853857f40da49].  In this mode, we back out the documentation change of [https://www.sqlite.org/docsrc/info/07b7749da88d54e5|&#91;07b7749da88d54e5&#93;] and change the core to work as it has been documented to work since 2017, rather than how it has actually worked since 2009.\n\nFossilOrigin-Name: 09cd0c0c6e6c963e0039a733876e5149adb3cd10e9b92699fa1dcb0633e997a4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/insert.c||src/insert.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a29f2a7d07beff64e489e8f824babc6228c4a499fadc0ee701caa60a63baadcd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2160:       addrTop = sqlite3VdbeCurrentAddr(v) + 1;",
          "2161:       sqlite3VdbeAddOp3(v, OP_InitCoroutine, regYield, 0, addrTop);",
          "2162:       if( pParse->nErr ) return;",
          "2164:       if( pSelTab==0 ) return;",
          "2165:       assert( p->aCol==0 );",
          "2166:       p->nCol = pSelTab->nCol;",
          "",
          "[Removed Lines]",
          "2163:       pSelTab = sqlite3ResultSetOfSelect(pParse, pSelect);",
          "",
          "[Added Lines]",
          "2163:       pSelTab = sqlite3ResultSetOfSelect(pParse, pSelect, SQLITE_AFF_BLOB);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2424: #ifndef SQLITE_OMIT_AUTHORIZATION",
          "2425:     xAuth = db->xAuth;",
          "2426:     db->xAuth = 0;",
          "2428:     db->xAuth = xAuth;",
          "2429: #else",
          "2431: #endif",
          "2432:     pParse->nTab = n;",
          "2433:     if( pTable->pCheck ){",
          "",
          "[Removed Lines]",
          "2427:     pSelTab = sqlite3ResultSetOfSelect(pParse, pSel);",
          "2430:     pSelTab = sqlite3ResultSetOfSelect(pParse, pSel);",
          "",
          "[Added Lines]",
          "2427:     pSelTab = sqlite3ResultSetOfSelect(pParse, pSel, 0);",
          "2430:     pSelTab = sqlite3ResultSetOfSelect(pParse, pSel, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2443:        && pParse->nErr==0",
          "2444:        && pTable->nCol==pSel->pEList->nExpr",
          "2445:       ){",
          "2447:       }",
          "2448:     }else if( pSelTab ){",
          "",
          "[Removed Lines]",
          "2446:         sqlite3SelectAddColumnTypeAndCollation(pParse, pTable, pSel);",
          "",
          "[Added Lines]",
          "2446:         sqlite3SelectAddColumnTypeAndCollation(pParse, pTable, pSel, 0);",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:     }",
          "89:     for(n=0; n<pIdx->nColumn; n++){",
          "90:       i16 x = pIdx->aiColumn[n];",
          "91:       if( x>=0 ){",
          "93:       }else if( x==XN_ROWID ){",
          "95:       }else{",
          "97:         assert( x==XN_EXPR );",
          "98:         assert( pIdx->aColExpr!=0 );",
          "99:         aff = sqlite3ExprAffinity(pIdx->aColExpr->a[n].pExpr);",
          "102:       }",
          "103:     }",
          "104:     pIdx->zColAff[n] = 0;",
          "105:   }",
          "",
          "[Removed Lines]",
          "92:         pIdx->zColAff[n] = pTab->aCol[x].affinity;",
          "94:         pIdx->zColAff[n] = SQLITE_AFF_INTEGER;",
          "96:         char aff;",
          "100:         if( aff==0 ) aff = SQLITE_AFF_BLOB;",
          "101:         pIdx->zColAff[n] = aff;",
          "",
          "[Added Lines]",
          "91:       char aff;",
          "93:         aff = pTab->aCol[x].affinity;",
          "95:         aff = SQLITE_AFF_INTEGER;",
          "101:       if( aff==0 ) aff = SQLITE_AFF_BLOB;",
          "102:       pIdx->zColAff[n] = aff;",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2068:         pCol->colFlags |= COLFLAG_HASTYPE;",
          "2069:       }",
          "2070:     }",
          "2072:     pColl = sqlite3ExprCollSeq(pParse, p);",
          "2073:     if( pColl && pCol->zColl==0 ){",
          "2074:       pCol->zColl = sqlite3DbStrDup(db, pColl->zName);",
          "",
          "[Removed Lines]",
          "2071:     if( pCol->affinity==0 ) pCol->affinity = SQLITE_AFF_BLOB;",
          "",
          "[Added Lines]",
          "2072:     if( pCol->affinity==0 ) pCol->affinity = aff;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2085:   Table *pTab;",
          "2086:   sqlite3 *db = pParse->db;",
          "2087:   u64 savedFlags;",
          "",
          "[Removed Lines]",
          "2084: Table *sqlite3ResultSetOfSelect(Parse *pParse, Select *pSelect){",
          "",
          "[Added Lines]",
          "2085: Table *sqlite3ResultSetOfSelect(Parse *pParse, Select *pSelect, char aff){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2101:   pTab->zName = 0;",
          "2102:   pTab->nRowLogEst = 200; assert( 200==sqlite3LogEst(1048576) );",
          "2103:   sqlite3ColumnsFromExprList(pParse, pSelect->pEList, &pTab->nCol, &pTab->aCol);",
          "2105:   pTab->iPKey = -1;",
          "2106:   if( db->mallocFailed ){",
          "2107:     sqlite3DeleteTable(db, pTab);",
          "",
          "[Removed Lines]",
          "2104:   sqlite3SelectAddColumnTypeAndCollation(pParse, pTab, pSelect);",
          "",
          "[Added Lines]",
          "2105:   sqlite3SelectAddColumnTypeAndCollation(pParse, pTab, pSelect, aff);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5195:       Select *pSel = pFrom->pSelect;",
          "5196:       if( pSel ){",
          "5197:         while( pSel->pPrior ) pSel = pSel->pPrior;",
          "5199:       }",
          "5200:     }",
          "5201:   }",
          "",
          "[Removed Lines]",
          "5198:         sqlite3SelectAddColumnTypeAndCollation(pParse, pTab, pSel);",
          "",
          "[Added Lines]",
          "5199:         sqlite3SelectAddColumnTypeAndCollation(",
          "5200:           pParse, pTab, pSel, SQLITE_AFF_BLOB",
          "5201:         );",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3911: void sqlite3CommitInternalChanges(sqlite3*);",
          "3912: void sqlite3DeleteColumnNames(sqlite3*,Table*);",
          "3913: int sqlite3ColumnsFromExprList(Parse*,ExprList*,i16*,Column**);",
          "3916: void sqlite3OpenMasterTable(Parse *, int);",
          "3917: Index *sqlite3PrimaryKeyIndex(Table*);",
          "3918: i16 sqlite3ColumnOfIndex(Index*, i16);",
          "",
          "[Removed Lines]",
          "3914: void sqlite3SelectAddColumnTypeAndCollation(Parse*,Table*,Select*);",
          "3915: Table *sqlite3ResultSetOfSelect(Parse*,Select*);",
          "",
          "[Added Lines]",
          "3914: void sqlite3SelectAddColumnTypeAndCollation(Parse*,Table*,Select*,char);",
          "3915: Table *sqlite3ResultSetOfSelect(Parse*,Select*,char);",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "994:       p->pSrc->a[0].pSelect = pSub;",
          "995:       sqlite3SrcListAssignCursors(pParse, p->pSrc);",
          "996:       pSub->selFlags |= SF_Expanded;",
          "998:       if( pTab2==0 ){",
          "999:         rc = SQLITE_NOMEM;",
          "1000:       }else{",
          "",
          "[Removed Lines]",
          "997:       pTab2 = sqlite3ResultSetOfSelect(pParse, pSub);",
          "",
          "[Added Lines]",
          "997:       pTab2 = sqlite3ResultSetOfSelect(pParse, pSub, SQLITE_AFF_BLOB);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "55700bcd7255b15861fec4a0c4ab24eda965420d",
      "candidate_info": {
        "commit_hash": "55700bcd7255b15861fec4a0c4ab24eda965420d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/55700bcd7255b15861fec4a0c4ab24eda965420d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/func.c"
        ],
        "message": "Remove code in the round() SQL function that became unreachable due to the optimization of check-in [e95138f5f4febde5]\n\nFossilOrigin-Name: b141bae3f6d16c0ebb59dac9b02086a4370839e71ade34004f647b09b1083d1d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/func.c||src/func.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 67a68af5578f08d2be2e48cf4fd12a6cf35a09c47d259deda81950f7ee1f02f7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/func.c||src/func.c": [
          "File: src/func.c -> src/func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "397:       sqlite3_result_error_nomem(context);",
          "398:       return;",
          "399:     }",
          "404:     sqlite3_free(zBuf);",
          "405:   }",
          "406:   sqlite3_result_double(context, r);",
          "",
          "[Removed Lines]",
          "400:     if( sqlite3AtoF(zBuf, &r, sqlite3Strlen30(zBuf), SQLITE_UTF8)<=0 ){",
          "401:       assert( sqlite3_strglob(\"*Inf\", zBuf)==0 );",
          "402:       r = zBuf[0]=='-' ? -HUGE_VAL : +HUGE_VAL;",
          "403:     }",
          "",
          "[Added Lines]",
          "400:     sqlite3AtoF(zBuf, &r, sqlite3Strlen30(zBuf), SQLITE_UTF8);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c2b893a7e0688556eed1a4150942742bb4d5c977",
      "candidate_info": {
        "commit_hash": "c2b893a7e0688556eed1a4150942742bb4d5c977",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c2b893a7e0688556eed1a4150942742bb4d5c977",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/util.c"
        ],
        "message": "Performance enhancement in sqlite3AtoF().  About 8% faster.\n\nFossilOrigin-Name: 81721aa54587e20d031d528fb6b74d91671a6e950fa926dc63f4284466e70f0e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/util.c||src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2e2ebad3ab636c4c65814ad41d417b105be8e254d609d0e08fbba4c5bd107bf3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "425:   double result;",
          "429:   assert( enc==SQLITE_UTF8 || enc==SQLITE_UTF16LE || enc==SQLITE_UTF16BE );",
          "",
          "[Removed Lines]",
          "426:   int nDigits = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "454:   }",
          "458:     s = s*10 + (*z - '0');",
          "460:   }",
          "465:   if( z>=zEnd ) goto do_atof_calc;",
          "",
          "[Removed Lines]",
          "457:   while( z<zEnd && sqlite3Isdigit(*z) && s<((LARGEST_INT64-9)/10) ){",
          "459:     z+=incr; nDigits++;",
          "464:   while( z<zEnd && sqlite3Isdigit(*z) ){ z+=incr; nDigits++; d++; }",
          "",
          "[Added Lines]",
          "457:   while( z<zEnd && sqlite3Isdigit(*z) ){",
          "459:     z+=incr; nDigit++;",
          "460:     if( s>=((LARGEST_INT64-9)/10) ){",
          "463:       while( z<zEnd && sqlite3Isdigit(*z) ){ z+=incr; d++; }",
          "464:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "473:       if( s<((LARGEST_INT64-9)/10) ){",
          "474:         s = s*10 + (*z - '0');",
          "475:         d--;",
          "476:       }",
          "478:     }",
          "479:   }",
          "480:   if( z>=zEnd ) goto do_atof_calc;",
          "",
          "[Removed Lines]",
          "477:       z+=incr; nDigits++;",
          "",
          "[Added Lines]",
          "477:         nDigit++;",
          "479:       z+=incr;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "585: #else",
          "586:   return !sqlite3Atoi64(z, pResult, length, enc);",
          "",
          "[Removed Lines]",
          "584:   return z==zEnd && nDigits>0 && eValid && nonNum==0;",
          "",
          "[Added Lines]",
          "586:   return z==zEnd && nDigit>0 && eValid && nonNum==0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7f88a24dc63ee8b5323c2236769517ad03d13926",
      "candidate_info": {
        "commit_hash": "7f88a24dc63ee8b5323c2236769517ad03d13926",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7f88a24dc63ee8b5323c2236769517ad03d13926",
        "files": [
          "VERSION",
          "configure",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Increase the version number to 3.30.0 for the next release cycle.\n\nFossilOrigin-Name: 2578e3c64b0a92ab92143f18d107a1a180bd6fa87243661930771c4c080f8098",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d837ab0da52632699abc09320980606aef020df5020c253f99c97e24bf3c6d00",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}