{
  "cve_id": "CVE-2016-3120",
  "cve_desc": "The validate_as_request function in kdc_util.c in the Key Distribution Center (KDC) in MIT Kerberos 5 (aka krb5) before 1.13.6 and 1.4.x before 1.14.3, when restrict_anonymous_to_tgt is enabled, uses an incorrect client data structure, which allows remote authenticated users to cause a denial of service (NULL pointer dereference and daemon crash) via an S4U2Self request.",
  "repo": "krb5/krb5",
  "patch_hash": "93b4a6306a0026cf1cc31ac4bd8a49ba5d034ba7",
  "patch_info": {
    "commit_hash": "93b4a6306a0026cf1cc31ac4bd8a49ba5d034ba7",
    "repo": "krb5/krb5",
    "commit_url": "https://github.com/krb5/krb5/commit/93b4a6306a0026cf1cc31ac4bd8a49ba5d034ba7",
    "files": [
      "src/kdc/kdc_util.c",
      "src/tests/t_pkinit.py"
    ],
    "message": "Fix S4U2Self KDC crash when anon is restricted\n\nIn validate_as_request(), when enforcing restrict_anonymous_to_tgt,\nuse client.princ instead of request->client; the latter is NULL when\nvalidating S4U2Self requests.\n\nCVE-2016-3120:\n\nIn MIT krb5 1.9 and later, an authenticated attacker can cause krb5kdc\nto dereference a null pointer if the restrict_anonymous_to_tgt option\nis set to true, by making an S4U2Self request.\n\n  CVSSv2 Vector: AV:N/AC:H/Au:S/C:N/I:N/A:C/E:H/RL:OF/RC:C\n\nticket: 8458 (new)\ntarget_version: 1.14-next\ntarget_version: 1.13-next",
    "before_after_code_files": [
      "src/kdc/kdc_util.c||src/kdc/kdc_util.c",
      "src/tests/t_pkinit.py||src/tests/t_pkinit.py"
    ]
  },
  "patch_diff": {
    "src/kdc/kdc_util.c||src/kdc/kdc_util.c": [
      "File: src/kdc/kdc_util.c -> src/kdc/kdc_util.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "739:         return(KDC_ERR_MUST_USE_USER2USER);",
      "740:     }",
      "744:         return(KDC_ERR_POLICY);",
      "745:     }",
      "",
      "[Removed Lines]",
      "742:     if (check_anon(kdc_active_realm, request->client, request->server) != 0) {",
      "",
      "[Added Lines]",
      "742:     if (check_anon(kdc_active_realm, client.princ, request->server) != 0) {",
      "",
      "---------------"
    ],
    "src/tests/t_pkinit.py||src/tests/t_pkinit.py": [
      "File: src/tests/t_pkinit.py -> src/tests/t_pkinit.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "93: if 'KDC policy rejects request' not in out:",
      "94:     fail('Wrong error for restricted anonymous PKINIT')",
      "96: # Go back to a normal KDC and disable anonymous PKINIT.",
      "97: realm.stop_kdc()",
      "98: realm.start_kdc()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "96: # Regression test for #8458: S4U2Self requests crash the KDC if",
      "97: # anonymous is restricted.",
      "98: realm.kinit(realm.host_princ, flags=['-k'])",
      "99: realm.run([kvno, '-U', 'user', realm.host_princ])",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cce19103f7673edb54b1b8e5fa0a516bd009d2c3",
      "candidate_info": {
        "commit_hash": "cce19103f7673edb54b1b8e5fa0a516bd009d2c3",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/cce19103f7673edb54b1b8e5fa0a516bd009d2c3",
        "files": [
          "src/kdc/kdc_util.c"
        ],
        "message": "Fix S4U2Self KDC crash when anon is restricted\n\nIn validate_as_request(), when enforcing restrict_anonymous_to_tgt,\nuse client.princ instead of request->client; the latter is NULL when\nvalidating S4U2Self requests.\n\nCVE-2016-3120:\n\nIn MIT krb5 1.9 and later, an authenticated attacker can cause krb5kdc\nto dereference a null pointer if the restrict_anonymous_to_tgt option\nis set to true, by making an S4U2Self request.\n\n  CVSSv2 Vector: AV:N/AC:H/Au:S/C:N/I:N/A:C/E:H/RL:OF/RC:C\n\n(cherry picked from commit 93b4a6306a0026cf1cc31ac4bd8a49ba5d034ba7)\n[tlyu@mit.edu: removed test case depending on absent functionality]\n\nticket: 8458\nversion_fixed: 1.13.6",
        "before_after_code_files": [
          "src/kdc/kdc_util.c||src/kdc/kdc_util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/kdc/kdc_util.c||src/kdc/kdc_util.c"
          ],
          "candidate": [
            "src/kdc/kdc_util.c||src/kdc/kdc_util.c"
          ]
        }
      },
      "candidate_diff": {
        "src/kdc/kdc_util.c||src/kdc/kdc_util.c": [
          "File: src/kdc/kdc_util.c -> src/kdc/kdc_util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "700:         return(KDC_ERR_MUST_USE_USER2USER);",
          "701:     }",
          "705:         return(KDC_ERR_POLICY);",
          "706:     }",
          "",
          "[Removed Lines]",
          "703:     if (check_anon(kdc_active_realm, request->client, request->server) != 0) {",
          "",
          "[Added Lines]",
          "703:     if (check_anon(kdc_active_realm, client.princ, request->server) != 0) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "85c3046d42eeb821967ad5625fcb08e8c6177b1a",
      "candidate_info": {
        "commit_hash": "85c3046d42eeb821967ad5625fcb08e8c6177b1a",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/85c3046d42eeb821967ad5625fcb08e8c6177b1a",
        "files": [
          "src/kdc/kdc_util.c",
          "src/tests/t_pkinit.py"
        ],
        "message": "Fix S4U2Self KDC crash when anon is restricted\n\nIn validate_as_request(), when enforcing restrict_anonymous_to_tgt,\nuse client.princ instead of request->client; the latter is NULL when\nvalidating S4U2Self requests.\n\nCVE-2016-3120:\n\nIn MIT krb5 1.9 and later, an authenticated attacker can cause krb5kdc\nto dereference a null pointer if the restrict_anonymous_to_tgt option\nis set to true, by making an S4U2Self request.\n\n  CVSSv2 Vector: AV:N/AC:H/Au:S/C:N/I:N/A:C/E:H/RL:OF/RC:C\n\n(cherry picked from commit 93b4a6306a0026cf1cc31ac4bd8a49ba5d034ba7)\n\nticket: 8458\nversion_fixed: 1.14.3",
        "before_after_code_files": [
          "src/kdc/kdc_util.c||src/kdc/kdc_util.c",
          "src/tests/t_pkinit.py||src/tests/t_pkinit.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/kdc/kdc_util.c||src/kdc/kdc_util.c",
            "src/tests/t_pkinit.py||src/tests/t_pkinit.py"
          ],
          "candidate": [
            "src/kdc/kdc_util.c||src/kdc/kdc_util.c",
            "src/tests/t_pkinit.py||src/tests/t_pkinit.py"
          ]
        }
      },
      "candidate_diff": {
        "src/kdc/kdc_util.c||src/kdc/kdc_util.c": [
          "File: src/kdc/kdc_util.c -> src/kdc/kdc_util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "739:         return(KDC_ERR_MUST_USE_USER2USER);",
          "740:     }",
          "744:         return(KDC_ERR_POLICY);",
          "745:     }",
          "",
          "[Removed Lines]",
          "742:     if (check_anon(kdc_active_realm, request->client, request->server) != 0) {",
          "",
          "[Added Lines]",
          "742:     if (check_anon(kdc_active_realm, client.princ, request->server) != 0) {",
          "",
          "---------------"
        ],
        "src/tests/t_pkinit.py||src/tests/t_pkinit.py": [
          "File: src/tests/t_pkinit.py -> src/tests/t_pkinit.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "93: if 'KDC policy rejects request' not in out:",
          "94:     fail('Wrong error for restricted anonymous PKINIT')",
          "96: # Go back to a normal KDC and disable anonymous PKINIT.",
          "97: realm.stop_kdc()",
          "98: realm.start_kdc()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96: # Regression test for #8458: S4U2Self requests crash the KDC if",
          "97: # anonymous is restricted.",
          "98: realm.kinit(realm.host_princ, flags=['-k'])",
          "99: realm.run([kvno, '-U', 'user', realm.host_princ])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "560e11dabb63b141df29c54aaa2e120309a1e021",
      "candidate_info": {
        "commit_hash": "560e11dabb63b141df29c54aaa2e120309a1e021",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/560e11dabb63b141df29c54aaa2e120309a1e021",
        "files": [
          "src/lib/krb5/krb/preauth2.c"
        ],
        "message": "Fix error code on clpreauth module failure\n\nCommit 632260bd1fccfb420f0827b59c85c329203eafc9 (ticket #7517) allows\nbetter error reporting for some client pre-authentication failures.\nHowever, it breaks an assumption in the S4U2Self code that such errors\ncan be recognized by the KRB5_PREAUTH_FAILED error code.  Instead of\npassing through the error code reported by the first real preauth\nmodule, wrap that error and return KRB5_PREAUTH_FAILED.\n\nticket: 8457 (new)\ntarget_version: 1.14-next\ntarget_version: 1.13-next",
        "before_after_code_files": [
          "src/lib/krb5/krb/preauth2.c||src/lib/krb5/krb/preauth2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/krb5/krb5/pull/485"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/krb5/krb/preauth2.c||src/lib/krb5/krb/preauth2.c": [
          "File: src/lib/krb5/krb/preauth2.c -> src/lib/krb5/krb/preauth2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "639:     if (must_preauth) {",
          "643:     }",
          "645: cleanup:",
          "",
          "[Removed Lines]",
          "641:         ret = (save.code != 0) ? k5_restore_ctx_error(context, &save) :",
          "642:             KRB5_PREAUTH_FAILED;",
          "",
          "[Added Lines]",
          "641:         if (save.code != 0) {",
          "642:             ret = k5_restore_ctx_error(context, &save);",
          "643:             k5_wrapmsg(context, ret, KRB5_PREAUTH_FAILED,",
          "644:                        _(\"Pre-authentication failed\"));",
          "645:         }",
          "646:         ret = KRB5_PREAUTH_FAILED;",
          "",
          "---------------"
        ]
      }
    }
  ]
}