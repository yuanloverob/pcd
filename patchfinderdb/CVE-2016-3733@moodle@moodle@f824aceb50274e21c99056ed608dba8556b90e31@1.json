{
  "cve_id": "CVE-2016-3733",
  "cve_desc": "The \"restore teacher\" feature in Moodle 3.0 through 3.0.3, 2.9 through 2.9.5, 2.8 through 2.8.11, 2.7 through 2.7.13, and earlier allows remote authenticated users to overwrite the course idnumber.",
  "repo": "moodle/moodle",
  "patch_hash": "f824aceb50274e21c99056ed608dba8556b90e31",
  "patch_info": {
    "commit_hash": "f824aceb50274e21c99056ed608dba8556b90e31",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/f824aceb50274e21c99056ed608dba8556b90e31",
    "files": [
      "course/tests/restore_test.php"
    ],
    "message": "MDL-51369 course: Adding tests to cover restoring course info",
    "before_after_code_files": [
      "course/tests/restore_test.php||course/tests/restore_test.php"
    ]
  },
  "patch_diff": {
    "course/tests/restore_test.php||course/tests/restore_test.php": [
      "File: course/tests/restore_test.php -> course/tests/restore_test.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?php",
      "25: defined('MOODLE_INTERNAL') || die();",
      "26: global $CFG;",
      "28: require_once($CFG->dirroot . '/backup/util/includes/backup_includes.php');",
      "29: require_once($CFG->dirroot . '/backup/util/includes/restore_includes.php');",
      "38: class core_restore_backup_testcase extends advanced_testcase {",
      "47:     protected function backup_course($courseid, $userid = 2) {",
      "48:         globaL $CFG;",
      "49:         $packer = get_file_packer('application/vnd.moodle.backup');",
      "51:         $bc = new backup_controller(backup::TYPE_1COURSE, $courseid, backup::FORMAT_MOODLE, backup::INTERACTIVE_NO,",
      "52:             backup::MODE_GENERAL, $userid);",
      "53:         $bc->execute_plan();",
      "55:         $results = $bc->get_results();",
      "56:         $results['backup_destination']->extract_to_pathname($packer, \"$CFG->tempdir/backup/core_course_testcase\");",
      "58:         $bc->destroy();",
      "59:         unset($bc);",
      "60:         return 'core_course_testcase';",
      "61:     }",
      "70:     protected function create_role_with_caps($caps, $perm) {",
      "71:         $caps = (array) $caps;",
      "72:         $dg = $this->getDataGenerator();",
      "73:         $roleid = $dg->create_role();",
      "74:         foreach ($caps as $cap) {",
      "75:             assign_capability($cap, $perm, $roleid, context_system::instance()->id, true);",
      "76:         }",
      "77:         accesslib_clear_all_caches_for_unit_testing();",
      "78:         return $roleid;",
      "79:     }",
      "89:     protected function restore_course($backupid, $courseid, $userid) {",
      "90:         global $DB;",
      "92:         $target = backup::TARGET_CURRENT_ADDING;",
      "93:         if (!$courseid) {",
      "94:             $target = backup::TARGET_NEW_COURSE;",
      "95:             $categoryid = $DB->get_field_sql(\"SELECT MIN(id) FROM {course_categories}\");",
      "96:             $courseid = restore_dbops::create_new_course('Tmp', 'tmp', $categoryid);",
      "97:         }",
      "99:         $rc = new restore_controller($backupid, $courseid, backup::INTERACTIVE_NO, backup::MODE_GENERAL, $userid, $target);",
      "100:         $target == backup::TARGET_NEW_COURSE ?: $rc->get_plan()->get_setting('overwrite_conf')->set_value(true);",
      "101:         $rc->execute_precheck();",
      "102:         $rc->execute_plan();",
      "104:         $course = $DB->get_record('course', array('id' => $rc->get_courseid()));",
      "106:         $rc->destroy();",
      "107:         unset($rc);",
      "108:         return $course;",
      "109:     }",
      "119:     protected function restore_to_existing_course($backupid, $courseid, $userid = 2) {",
      "120:         return $this->restore_course($backupid, $courseid, $userid);",
      "121:     }",
      "130:     protected function restore_to_new_course($backupid, $userid = 2) {",
      "131:         return $this->restore_course($backupid, 0, $userid);",
      "132:     }",
      "134:     public function test_restore_existing_idnumber_in_new_course() {",
      "135:         $this->resetAfterTest();",
      "137:         $dg = $this->getDataGenerator();",
      "138:         $c1 = $dg->create_course(['idnumber' => 'ABC']);",
      "139:         $backupid = $this->backup_course($c1->id);",
      "140:         $c2 = $this->restore_to_new_course($backupid);",
      "143:         $this->assertEquals('', $c2->idnumber);",
      "144:     }",
      "146:     public function test_restore_non_existing_idnumber_in_new_course() {",
      "147:         global $DB;",
      "148:         $this->resetAfterTest();",
      "150:         $dg = $this->getDataGenerator();",
      "151:         $c1 = $dg->create_course(['idnumber' => 'ABC']);",
      "152:         $backupid = $this->backup_course($c1->id);",
      "154:         $c1->idnumber = 'BCD';",
      "155:         $DB->update_record('course', $c1);",
      "158:         $c2 = $this->restore_to_new_course($backupid);",
      "159:         $this->assertEquals('ABC', $c2->idnumber);",
      "160:     }",
      "162:     public function test_restore_existing_idnumber_in_existing_course() {",
      "163:         global $DB;",
      "164:         $this->resetAfterTest();",
      "166:         $dg = $this->getDataGenerator();",
      "167:         $c1 = $dg->create_course(['idnumber' => 'ABC']);",
      "168:         $c2 = $dg->create_course(['idnumber' => 'DEF']);",
      "169:         $backupid = $this->backup_course($c1->id);",
      "172:         $c2 = $this->restore_to_existing_course($backupid, $c2->id);",
      "173:         $this->assertEquals('DEF', $c2->idnumber);",
      "175:         $c1 = $DB->get_record('course', array('id' => $c1->id));",
      "176:         $this->assertEquals('ABC', $c1->idnumber);",
      "177:     }",
      "179:     public function test_restore_non_existing_idnumber_in_existing_course() {",
      "180:         global $DB;",
      "181:         $this->resetAfterTest();",
      "183:         $dg = $this->getDataGenerator();",
      "184:         $c1 = $dg->create_course(['idnumber' => 'ABC']);",
      "185:         $c2 = $dg->create_course(['idnumber' => 'DEF']);",
      "186:         $backupid = $this->backup_course($c1->id);",
      "188:         $c1->idnumber = 'XXX';",
      "189:         $DB->update_record('course', $c1);",
      "192:         $c2 = $this->restore_to_existing_course($backupid, $c2->id);",
      "193:         $this->assertEquals('ABC', $c2->idnumber);",
      "194:     }",
      "196:     public function test_restore_idnumber_in_existing_course_without_permissions() {",
      "197:         global $DB;",
      "198:         $this->resetAfterTest();",
      "199:         $dg = $this->getDataGenerator();",
      "200:         $u1 = $dg->create_user();",
      "202:         $managers = get_archetype_roles('manager');",
      "203:         $manager = array_shift($managers);",
      "204:         $roleid = $this->create_role_with_caps('moodle/course:changeidnumber', CAP_PROHIBIT);",
      "205:         $dg->role_assign($manager->id, $u1->id);",
      "206:         $dg->role_assign($roleid, $u1->id);",
      "208:         $c1 = $dg->create_course(['idnumber' => 'ABC']);",
      "209:         $c2 = $dg->create_course(['idnumber' => 'DEF']);",
      "210:         $backupid = $this->backup_course($c1->id);",
      "212:         $c1->idnumber = 'XXX';",
      "213:         $DB->update_record('course', $c1);",
      "216:         $c2 = $this->restore_to_existing_course($backupid, $c2->id, $u1->id);",
      "217:         $this->assertEquals('DEF', $c2->idnumber);",
      "218:     }",
      "220:     public function test_restore_course_info_in_new_course() {",
      "221:         global $DB;",
      "222:         $this->resetAfterTest();",
      "223:         $dg = $this->getDataGenerator();",
      "225:         $c1 = $dg->create_course(['shortname' => 'SN', 'fullname' => 'FN', 'summary' => 'DESC', 'summaryformat' => FORMAT_MOODLE]);",
      "226:         $backupid = $this->backup_course($c1->id);",
      "229:         $c2 = $this->restore_to_new_course($backupid);",
      "230:         $this->assertEquals('SN_1', $c2->shortname);",
      "231:         $this->assertEquals('FN copy 1', $c2->fullname);",
      "232:         $this->assertEquals('DESC', $c2->summary);",
      "233:         $this->assertEquals(FORMAT_MOODLE, $c2->summaryformat);",
      "234:     }",
      "236:     public function test_restore_course_info_in_existing_course() {",
      "237:         global $DB;",
      "238:         $this->resetAfterTest();",
      "239:         $dg = $this->getDataGenerator();",
      "241:         $c1 = $dg->create_course(['shortname' => 'SN', 'fullname' => 'FN', 'summary' => 'DESC', 'summaryformat' => FORMAT_MOODLE]);",
      "242:         $c2 = $dg->create_course(['shortname' => 'A', 'fullname' => 'B', 'summary' => 'C', 'summaryformat' => FORMAT_PLAIN]);",
      "243:         $backupid = $this->backup_course($c1->id);",
      "246:         $c2 = $this->restore_to_existing_course($backupid, $c2->id);",
      "247:         $this->assertEquals('SN_1', $c2->shortname);",
      "248:         $this->assertEquals('FN copy 1', $c2->fullname);",
      "249:         $this->assertEquals('DESC', $c2->summary);",
      "250:         $this->assertEquals(FORMAT_MOODLE, $c2->summaryformat);",
      "251:     }",
      "253:     public function test_restore_course_shortname_in_existing_course_without_permissions() {",
      "254:         global $DB;",
      "255:         $this->resetAfterTest();",
      "256:         $dg = $this->getDataGenerator();",
      "257:         $u1 = $dg->create_user();",
      "259:         $managers = get_archetype_roles('manager');",
      "260:         $manager = array_shift($managers);",
      "261:         $roleid = $this->create_role_with_caps('moodle/course:changeshortname', CAP_PROHIBIT);",
      "262:         $dg->role_assign($manager->id, $u1->id);",
      "263:         $dg->role_assign($roleid, $u1->id);",
      "265:         $c1 = $dg->create_course(['shortname' => 'SN', 'fullname' => 'FN', 'summary' => 'DESC', 'summaryformat' => FORMAT_MOODLE]);",
      "266:         $c2 = $dg->create_course(['shortname' => 'A1', 'fullname' => 'B1', 'summary' => 'C1', 'summaryformat' => FORMAT_PLAIN]);",
      "269:         $backupid = $this->backup_course($c1->id);",
      "270:         $restored = $this->restore_to_existing_course($backupid, $c2->id, $u1->id);",
      "271:         $this->assertEquals($c2->shortname, $restored->shortname);",
      "272:         $this->assertEquals('FN copy 1', $restored->fullname);",
      "273:         $this->assertEquals('DESC', $restored->summary);",
      "274:         $this->assertEquals(FORMAT_MOODLE, $restored->summaryformat);",
      "275:     }",
      "277:     public function test_restore_course_fullname_in_existing_course_without_permissions() {",
      "278:         global $DB;",
      "279:         $this->resetAfterTest();",
      "280:         $dg = $this->getDataGenerator();",
      "281:         $u1 = $dg->create_user();",
      "283:         $managers = get_archetype_roles('manager');",
      "284:         $manager = array_shift($managers);",
      "285:         $roleid = $this->create_role_with_caps('moodle/course:changefullname', CAP_PROHIBIT);",
      "286:         $dg->role_assign($manager->id, $u1->id);",
      "287:         $dg->role_assign($roleid, $u1->id);",
      "289:         $c1 = $dg->create_course(['shortname' => 'SN', 'fullname' => 'FN', 'summary' => 'DESC', 'summaryformat' => FORMAT_MOODLE]);",
      "290:         $c2 = $dg->create_course(['shortname' => 'A1', 'fullname' => 'B1', 'summary' => 'C1', 'summaryformat' => FORMAT_PLAIN]);",
      "293:         $backupid = $this->backup_course($c1->id);",
      "294:         $restored = $this->restore_to_existing_course($backupid, $c2->id, $u1->id);",
      "295:         $this->assertEquals('SN_1', $restored->shortname);",
      "296:         $this->assertEquals($c2->fullname, $restored->fullname);",
      "297:         $this->assertEquals('DESC', $restored->summary);",
      "298:         $this->assertEquals(FORMAT_MOODLE, $restored->summaryformat);",
      "299:     }",
      "301:     public function test_restore_course_summary_in_existing_course_without_permissions() {",
      "302:         global $DB;",
      "303:         $this->resetAfterTest();",
      "304:         $dg = $this->getDataGenerator();",
      "305:         $u1 = $dg->create_user();",
      "307:         $managers = get_archetype_roles('manager');",
      "308:         $manager = array_shift($managers);",
      "309:         $roleid = $this->create_role_with_caps('moodle/course:changesummary', CAP_PROHIBIT);",
      "310:         $dg->role_assign($manager->id, $u1->id);",
      "311:         $dg->role_assign($roleid, $u1->id);",
      "313:         $c1 = $dg->create_course(['shortname' => 'SN', 'fullname' => 'FN', 'summary' => 'DESC', 'summaryformat' => FORMAT_MOODLE]);",
      "314:         $c2 = $dg->create_course(['shortname' => 'A1', 'fullname' => 'B1', 'summary' => 'C1', 'summaryformat' => FORMAT_PLAIN]);",
      "317:         $backupid = $this->backup_course($c1->id);",
      "318:         $restored = $this->restore_to_existing_course($backupid, $c2->id, $u1->id);",
      "319:         $this->assertEquals('SN_1', $restored->shortname);",
      "320:         $this->assertEquals('FN copy 1', $restored->fullname);",
      "321:         $this->assertEquals($c2->summary, $restored->summary);",
      "322:         $this->assertEquals($c2->summaryformat, $restored->summaryformat);",
      "323:     }",
      "324: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "16227d8ef313c54d2e1a2e2565dcada61a339038",
      "candidate_info": {
        "commit_hash": "16227d8ef313c54d2e1a2e2565dcada61a339038",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/16227d8ef313c54d2e1a2e2565dcada61a339038",
        "files": [
          "course/tests/restore_test.php"
        ],
        "message": "MDL-51369 course: Adding tests to cover restoring course info",
        "before_after_code_files": [
          "course/tests/restore_test.php||course/tests/restore_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "course/tests/restore_test.php||course/tests/restore_test.php"
          ],
          "candidate": [
            "course/tests/restore_test.php||course/tests/restore_test.php"
          ]
        }
      },
      "candidate_diff": {
        "course/tests/restore_test.php||course/tests/restore_test.php": [
          "File: course/tests/restore_test.php -> course/tests/restore_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: defined('MOODLE_INTERNAL') || die();",
          "26: global $CFG;",
          "28: require_once($CFG->dirroot . '/backup/util/includes/backup_includes.php');",
          "29: require_once($CFG->dirroot . '/backup/util/includes/restore_includes.php');",
          "38: class core_restore_backup_testcase extends advanced_testcase {",
          "47:     protected function backup_course($courseid, $userid = 2) {",
          "48:         globaL $CFG;",
          "49:         $packer = get_file_packer('application/vnd.moodle.backup');",
          "51:         $bc = new backup_controller(backup::TYPE_1COURSE, $courseid, backup::FORMAT_MOODLE, backup::INTERACTIVE_NO,",
          "52:             backup::MODE_GENERAL, $userid);",
          "53:         $bc->execute_plan();",
          "55:         $results = $bc->get_results();",
          "56:         $results['backup_destination']->extract_to_pathname($packer, \"$CFG->tempdir/backup/core_course_testcase\");",
          "58:         $bc->destroy();",
          "59:         unset($bc);",
          "60:         return 'core_course_testcase';",
          "61:     }",
          "70:     protected function create_role_with_caps($caps, $perm) {",
          "71:         $caps = (array) $caps;",
          "72:         $dg = $this->getDataGenerator();",
          "73:         $roleid = $dg->create_role();",
          "74:         foreach ($caps as $cap) {",
          "75:             assign_capability($cap, $perm, $roleid, context_system::instance()->id, true);",
          "76:         }",
          "77:         accesslib_clear_all_caches_for_unit_testing();",
          "78:         return $roleid;",
          "79:     }",
          "89:     protected function restore_course($backupid, $courseid, $userid) {",
          "90:         global $DB;",
          "92:         $target = backup::TARGET_CURRENT_ADDING;",
          "93:         if (!$courseid) {",
          "94:             $target = backup::TARGET_NEW_COURSE;",
          "95:             $categoryid = $DB->get_field_sql(\"SELECT MIN(id) FROM {course_categories}\");",
          "96:             $courseid = restore_dbops::create_new_course('Tmp', 'tmp', $categoryid);",
          "97:         }",
          "99:         $rc = new restore_controller($backupid, $courseid, backup::INTERACTIVE_NO, backup::MODE_GENERAL, $userid, $target);",
          "100:         $target == backup::TARGET_NEW_COURSE ?: $rc->get_plan()->get_setting('overwrite_conf')->set_value(true);",
          "101:         $rc->execute_precheck();",
          "102:         $rc->execute_plan();",
          "104:         $course = $DB->get_record('course', array('id' => $rc->get_courseid()));",
          "106:         $rc->destroy();",
          "107:         unset($rc);",
          "108:         return $course;",
          "109:     }",
          "119:     protected function restore_to_existing_course($backupid, $courseid, $userid = 2) {",
          "120:         return $this->restore_course($backupid, $courseid, $userid);",
          "121:     }",
          "130:     protected function restore_to_new_course($backupid, $userid = 2) {",
          "131:         return $this->restore_course($backupid, 0, $userid);",
          "132:     }",
          "134:     public function test_restore_existing_idnumber_in_new_course() {",
          "135:         $this->resetAfterTest();",
          "137:         $dg = $this->getDataGenerator();",
          "138:         $c1 = $dg->create_course(['idnumber' => 'ABC']);",
          "139:         $backupid = $this->backup_course($c1->id);",
          "140:         $c2 = $this->restore_to_new_course($backupid);",
          "143:         $this->assertEquals('', $c2->idnumber);",
          "144:     }",
          "146:     public function test_restore_non_existing_idnumber_in_new_course() {",
          "147:         global $DB;",
          "148:         $this->resetAfterTest();",
          "150:         $dg = $this->getDataGenerator();",
          "151:         $c1 = $dg->create_course(['idnumber' => 'ABC']);",
          "152:         $backupid = $this->backup_course($c1->id);",
          "154:         $c1->idnumber = 'BCD';",
          "155:         $DB->update_record('course', $c1);",
          "158:         $c2 = $this->restore_to_new_course($backupid);",
          "159:         $this->assertEquals('ABC', $c2->idnumber);",
          "160:     }",
          "162:     public function test_restore_existing_idnumber_in_existing_course() {",
          "163:         global $DB;",
          "164:         $this->resetAfterTest();",
          "166:         $dg = $this->getDataGenerator();",
          "167:         $c1 = $dg->create_course(['idnumber' => 'ABC']);",
          "168:         $c2 = $dg->create_course(['idnumber' => 'DEF']);",
          "169:         $backupid = $this->backup_course($c1->id);",
          "172:         $c2 = $this->restore_to_existing_course($backupid, $c2->id);",
          "173:         $this->assertEquals('DEF', $c2->idnumber);",
          "175:         $c1 = $DB->get_record('course', array('id' => $c1->id));",
          "176:         $this->assertEquals('ABC', $c1->idnumber);",
          "177:     }",
          "179:     public function test_restore_non_existing_idnumber_in_existing_course() {",
          "180:         global $DB;",
          "181:         $this->resetAfterTest();",
          "183:         $dg = $this->getDataGenerator();",
          "184:         $c1 = $dg->create_course(['idnumber' => 'ABC']);",
          "185:         $c2 = $dg->create_course(['idnumber' => 'DEF']);",
          "186:         $backupid = $this->backup_course($c1->id);",
          "188:         $c1->idnumber = 'XXX';",
          "189:         $DB->update_record('course', $c1);",
          "192:         $c2 = $this->restore_to_existing_course($backupid, $c2->id);",
          "193:         $this->assertEquals('ABC', $c2->idnumber);",
          "194:     }",
          "196:     public function test_restore_idnumber_in_existing_course_without_permissions() {",
          "197:         global $DB;",
          "198:         $this->resetAfterTest();",
          "199:         $dg = $this->getDataGenerator();",
          "200:         $u1 = $dg->create_user();",
          "202:         $managers = get_archetype_roles('manager');",
          "203:         $manager = array_shift($managers);",
          "204:         $roleid = $this->create_role_with_caps('moodle/course:changeidnumber', CAP_PROHIBIT);",
          "205:         $dg->role_assign($manager->id, $u1->id);",
          "206:         $dg->role_assign($roleid, $u1->id);",
          "208:         $c1 = $dg->create_course(['idnumber' => 'ABC']);",
          "209:         $c2 = $dg->create_course(['idnumber' => 'DEF']);",
          "210:         $backupid = $this->backup_course($c1->id);",
          "212:         $c1->idnumber = 'XXX';",
          "213:         $DB->update_record('course', $c1);",
          "216:         $c2 = $this->restore_to_existing_course($backupid, $c2->id, $u1->id);",
          "217:         $this->assertEquals('DEF', $c2->idnumber);",
          "218:     }",
          "220:     public function test_restore_course_info_in_new_course() {",
          "221:         global $DB;",
          "222:         $this->resetAfterTest();",
          "223:         $dg = $this->getDataGenerator();",
          "225:         $c1 = $dg->create_course(['shortname' => 'SN', 'fullname' => 'FN', 'summary' => 'DESC', 'summaryformat' => FORMAT_MOODLE]);",
          "226:         $backupid = $this->backup_course($c1->id);",
          "229:         $c2 = $this->restore_to_new_course($backupid);",
          "230:         $this->assertEquals('SN_1', $c2->shortname);",
          "231:         $this->assertEquals('FN copy 1', $c2->fullname);",
          "232:         $this->assertEquals('DESC', $c2->summary);",
          "233:         $this->assertEquals(FORMAT_MOODLE, $c2->summaryformat);",
          "234:     }",
          "236:     public function test_restore_course_info_in_existing_course() {",
          "237:         global $DB;",
          "238:         $this->resetAfterTest();",
          "239:         $dg = $this->getDataGenerator();",
          "241:         $c1 = $dg->create_course(['shortname' => 'SN', 'fullname' => 'FN', 'summary' => 'DESC', 'summaryformat' => FORMAT_MOODLE]);",
          "242:         $c2 = $dg->create_course(['shortname' => 'A', 'fullname' => 'B', 'summary' => 'C', 'summaryformat' => FORMAT_PLAIN]);",
          "243:         $backupid = $this->backup_course($c1->id);",
          "246:         $c2 = $this->restore_to_existing_course($backupid, $c2->id);",
          "247:         $this->assertEquals('SN_1', $c2->shortname);",
          "248:         $this->assertEquals('FN copy 1', $c2->fullname);",
          "249:         $this->assertEquals('DESC', $c2->summary);",
          "250:         $this->assertEquals(FORMAT_MOODLE, $c2->summaryformat);",
          "251:     }",
          "253:     public function test_restore_course_shortname_in_existing_course_without_permissions() {",
          "254:         global $DB;",
          "255:         $this->resetAfterTest();",
          "256:         $dg = $this->getDataGenerator();",
          "257:         $u1 = $dg->create_user();",
          "259:         $managers = get_archetype_roles('manager');",
          "260:         $manager = array_shift($managers);",
          "261:         $roleid = $this->create_role_with_caps('moodle/course:changeshortname', CAP_PROHIBIT);",
          "262:         $dg->role_assign($manager->id, $u1->id);",
          "263:         $dg->role_assign($roleid, $u1->id);",
          "265:         $c1 = $dg->create_course(['shortname' => 'SN', 'fullname' => 'FN', 'summary' => 'DESC', 'summaryformat' => FORMAT_MOODLE]);",
          "266:         $c2 = $dg->create_course(['shortname' => 'A1', 'fullname' => 'B1', 'summary' => 'C1', 'summaryformat' => FORMAT_PLAIN]);",
          "269:         $backupid = $this->backup_course($c1->id);",
          "270:         $restored = $this->restore_to_existing_course($backupid, $c2->id, $u1->id);",
          "271:         $this->assertEquals($c2->shortname, $restored->shortname);",
          "272:         $this->assertEquals('FN copy 1', $restored->fullname);",
          "273:         $this->assertEquals('DESC', $restored->summary);",
          "274:         $this->assertEquals(FORMAT_MOODLE, $restored->summaryformat);",
          "275:     }",
          "277:     public function test_restore_course_fullname_in_existing_course_without_permissions() {",
          "278:         global $DB;",
          "279:         $this->resetAfterTest();",
          "280:         $dg = $this->getDataGenerator();",
          "281:         $u1 = $dg->create_user();",
          "283:         $managers = get_archetype_roles('manager');",
          "284:         $manager = array_shift($managers);",
          "285:         $roleid = $this->create_role_with_caps('moodle/course:changefullname', CAP_PROHIBIT);",
          "286:         $dg->role_assign($manager->id, $u1->id);",
          "287:         $dg->role_assign($roleid, $u1->id);",
          "289:         $c1 = $dg->create_course(['shortname' => 'SN', 'fullname' => 'FN', 'summary' => 'DESC', 'summaryformat' => FORMAT_MOODLE]);",
          "290:         $c2 = $dg->create_course(['shortname' => 'A1', 'fullname' => 'B1', 'summary' => 'C1', 'summaryformat' => FORMAT_PLAIN]);",
          "293:         $backupid = $this->backup_course($c1->id);",
          "294:         $restored = $this->restore_to_existing_course($backupid, $c2->id, $u1->id);",
          "295:         $this->assertEquals('SN_1', $restored->shortname);",
          "296:         $this->assertEquals($c2->fullname, $restored->fullname);",
          "297:         $this->assertEquals('DESC', $restored->summary);",
          "298:         $this->assertEquals(FORMAT_MOODLE, $restored->summaryformat);",
          "299:     }",
          "301:     public function test_restore_course_summary_in_existing_course_without_permissions() {",
          "302:         global $DB;",
          "303:         $this->resetAfterTest();",
          "304:         $dg = $this->getDataGenerator();",
          "305:         $u1 = $dg->create_user();",
          "307:         $managers = get_archetype_roles('manager');",
          "308:         $manager = array_shift($managers);",
          "309:         $roleid = $this->create_role_with_caps('moodle/course:changesummary', CAP_PROHIBIT);",
          "310:         $dg->role_assign($manager->id, $u1->id);",
          "311:         $dg->role_assign($roleid, $u1->id);",
          "313:         $c1 = $dg->create_course(['shortname' => 'SN', 'fullname' => 'FN', 'summary' => 'DESC', 'summaryformat' => FORMAT_MOODLE]);",
          "314:         $c2 = $dg->create_course(['shortname' => 'A1', 'fullname' => 'B1', 'summary' => 'C1', 'summaryformat' => FORMAT_PLAIN]);",
          "317:         $backupid = $this->backup_course($c1->id);",
          "318:         $restored = $this->restore_to_existing_course($backupid, $c2->id, $u1->id);",
          "319:         $this->assertEquals('SN_1', $restored->shortname);",
          "320:         $this->assertEquals('FN copy 1', $restored->fullname);",
          "321:         $this->assertEquals($c2->summary, $restored->summary);",
          "322:         $this->assertEquals($c2->summaryformat, $restored->summaryformat);",
          "323:     }",
          "324: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}