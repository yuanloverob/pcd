{
  "cve_id": "CVE-2019-19926",
  "cve_desc": "multiSelect in select.c in SQLite 3.30.1 mishandles certain errors during parsing, as demonstrated by errors from sqlite3WindowRewrite() calls. NOTE: this vulnerability exists because of an incomplete fix for CVE-2019-19880.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
  "patch_info": {
    "commit_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8428b3b437569338a9d1e10c4cd8154acbe33089",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c"
    ],
    "message": "Continuation of [e2bddcd4c55ba3cb]: Add another spot where it is necessary to abort early due to prior errors in sqlite3WindowRewrite().\n\nFossilOrigin-Name: cba2a2a44cdf138a629109bb0ad088ed4ef67fc66bed3e0373554681a39615d2",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 3d4c0bf8904135fa68c75801bfa738715cacc3b19dc8ad6ef550b11798d4b121",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2809:     }",
      "2810:   #endif",
      "2811:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2812:   if( pParse->nErr ) goto multi_select_end;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9f8c0282216be13e2cd32fedc9504d9fc7b7abb5",
      "candidate_info": {
        "commit_hash": "9f8c0282216be13e2cd32fedc9504d9fc7b7abb5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9f8c0282216be13e2cd32fedc9504d9fc7b7abb5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/global.c",
          "src/main.c",
          "src/os.c",
          "src/shell.c.in",
          "src/sqlite.h.in",
          "src/sqliteInt.h",
          "src/test1.c",
          "test/dbfuzz2.c",
          "test/fuzzcheck.c"
        ],
        "message": "Add the SQLITE_TESTCTRL_PRNG_SEED which can control the PRNG seed either directly or through the schema cookie of a supplied database connection.\n\nFossilOrigin-Name: 2660e9292ae2c229eb7c57a6a79bb19f0c970072f86750fbe9cca3113d44ffe4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/global.c||src/global.c",
          "src/main.c||src/main.c",
          "src/os.c||src/os.c",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/test1.c||src/test1.c",
          "test/dbfuzz2.c||test/dbfuzz2.c",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: faaaae4940b5f4f70e4988ad5b45582410b381ace0031e6abcde0b9217c06796",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6897:   assert( i<iEnd );",
          "6898:   j = get2byte(&aData[hdr+5]);",
          "6900:   memcpy(&pTmp[j], &aData[j], usableSize - j);",
          "6902:   for(k=0; pCArray->ixNx[k]<=i && ALWAYS(k<NB*2); k++){}",
          "",
          "[Removed Lines]",
          "6899:   if( NEVER(j>(u32)usableSize) ){ j = 0; }",
          "",
          "[Added Lines]",
          "6899:   if( j>(u32)usableSize ){ j = 0; }",
          "",
          "---------------"
        ],
        "src/global.c||src/global.c": [
          "File: src/global.c -> src/global.c"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3824:       break;",
          "3825:     }",
          "3833:       sqlite3_randomness(0,0);",
          "3834:       break;",
          "3835:     }",
          "",
          "[Removed Lines]",
          "3832:     case SQLITE_TESTCTRL_PRNG_RESET: {",
          "",
          "[Added Lines]",
          "3847:     case SQLITE_TESTCTRL_PRNG_SEED: {",
          "3848:       int x = va_arg(ap, int);",
          "3849:       int y;",
          "3850:       sqlite3 *db = va_arg(ap, sqlite3*);",
          "3851:       assert( db==0 || db->aDb[0].pSchema!=0 );",
          "3852:       if( db && (y = db->aDb[0].pSchema->schema_cookie)!=0 ){ x = y; }",
          "3853:       sqlite3Config.iPrngSeed = x;",
          "",
          "---------------"
        ],
        "src/os.c||src/os.c": [
          "File: src/os.c -> src/os.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "258: }",
          "260: int sqlite3OsRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){",
          "262: }",
          "263: int sqlite3OsSleep(sqlite3_vfs *pVfs, int nMicro){",
          "264:   return pVfs->xSleep(pVfs, nMicro);",
          "",
          "[Removed Lines]",
          "261:   return pVfs->xRandomness(pVfs, nByte, zBufOut);",
          "",
          "[Added Lines]",
          "261:   if( sqlite3Config.iPrngSeed ){",
          "262:     memset(zBufOut, 0, nByte);",
          "263:     if( ALWAYS(nByte>sizeof(unsigned)) ) nByte = sizeof(unsigned int);",
          "264:     memcpy(zBufOut, &sqlite3Config.iPrngSeed, nByte);",
          "265:     return SQLITE_OK;",
          "266:   }else{",
          "267:     return pVfs->xRandomness(pVfs, nByte, zBufOut);",
          "268:   }",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "9150:       { \"parser_coverage\",    SQLITE_TESTCTRL_PARSER_COVERAGE, \"\"                 },",
          "9151: #endif",
          "9152:       { \"pending_byte\",       SQLITE_TESTCTRL_PENDING_BYTE,  \"OFFSET  \"           },",
          "9154:       { \"prng_restore\",       SQLITE_TESTCTRL_PRNG_RESTORE,  \"\"                   },",
          "9155:       { \"prng_save\",          SQLITE_TESTCTRL_PRNG_SAVE,     \"\"                   },",
          "9156:       { \"reserve\",            SQLITE_TESTCTRL_RESERVE,       \"BYTES-OF-RESERVE\"   },",
          "9157:     };",
          "9158:     int testctrl = -1;",
          "",
          "[Removed Lines]",
          "9153:       { \"prng_reset\",         SQLITE_TESTCTRL_PRNG_RESET,    \"\"                   },",
          "",
          "[Added Lines]",
          "9155:       { \"prng_seed\",          SQLITE_TESTCTRL_PRNG_SEED,     \"SEED ?db?\"          },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9234:           }",
          "9235:           break;",
          "9238:         case SQLITE_TESTCTRL_ASSERT:",
          "9239:         case SQLITE_TESTCTRL_ALWAYS:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9238:         case SQLITE_TESTCTRL_PRNG_SEED:",
          "9239:           if( nArg==3 || nArg==4 ){",
          "9240:             int i = (int)integerValue(azArg[2]);",
          "9241:             sqlite3 *db;",
          "9242:             if( nArg==3 ){",
          "9243:               db = 0;",
          "9244:             }else{",
          "9245:               db = p->db;",
          "9247:               sqlite3_table_column_metadata(db, 0, \"x\", 0, 0, 0, 0, 0, 0);",
          "9248:             }",
          "9249:             rc2 = sqlite3_test_control(testctrl, i, db);",
          "9250:             isOk = 3;",
          "9251:           }",
          "9252:           break;",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "7335: #define SQLITE_TESTCTRL_FIRST                    5",
          "7336: #define SQLITE_TESTCTRL_PRNG_SAVE                5",
          "7337: #define SQLITE_TESTCTRL_PRNG_RESTORE             6",
          "7339: #define SQLITE_TESTCTRL_BITVEC_TEST              8",
          "7340: #define SQLITE_TESTCTRL_FAULT_INSTALL            9",
          "7341: #define SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS     10",
          "",
          "[Removed Lines]",
          "7338: #define SQLITE_TESTCTRL_PRNG_RESET               7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7358: #define SQLITE_TESTCTRL_IMPOSTER                25",
          "7359: #define SQLITE_TESTCTRL_PARSER_COVERAGE         26",
          "7360: #define SQLITE_TESTCTRL_RESULT_INTREAL          27",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7361: #define SQLITE_TESTCTRL_PRNG_SEED               28",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6375: ){",
          "6377:   return TCL_OK;",
          "6378: }",
          "",
          "[Removed Lines]",
          "6376:   sqlite3_test_control(SQLITE_TESTCTRL_PRNG_RESET);",
          "",
          "[Added Lines]",
          "6376:   sqlite3_randomness(0,0);",
          "6377:   return TCL_OK;",
          "6378: }",
          "6394: static int SQLITE_TCLAPI prng_seed(",
          "6399: ){",
          "6400:   int i = 0;",
          "6401:   sqlite3 *db = 0;",
          "6402:   if( objc!=2 && objc!=3 ){",
          "6403:     Tcl_WrongNumArgs(interp, 1, objv, \"SEED ?DB?\");",
          "6404:     return TCL_ERROR;",
          "6405:   }",
          "6406:   if( Tcl_GetIntFromObj(interp,objv[0],&i) ) return TCL_ERROR;",
          "6407:   if( objc==3 && getDbPointer(interp, Tcl_GetString(objv[2]), &db) ){",
          "6408:     return TCL_ERROR;",
          "6409:   }",
          "6410:   sqlite3_test_control(SQLITE_TESTCTRL_PRNG_SEED, i, db);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7923:      { \"save_prng_state\",               save_prng_state,    0 },",
          "7924:      { \"restore_prng_state\",            restore_prng_state, 0 },",
          "7925:      { \"reset_prng_state\",              reset_prng_state,   0 },",
          "7926:      { \"database_never_corrupt\",        database_never_corrupt, 0},",
          "7927:      { \"database_may_be_corrupt\",       database_may_be_corrupt, 0},",
          "7928:      { \"optimization_control\",          optimization_control,0},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7960:      { \"prng_seed\",                     prng_seed,          0 },",
          "",
          "---------------"
        ],
        "test/dbfuzz2.c||test/dbfuzz2.c": [
          "File: test/dbfuzz2.c -> test/dbfuzz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "211:   if( mxCb>0 ){",
          "212:     sqlite3_progress_handler(db, 10, progress_handler, 0);",
          "213:   }",
          "214:   for(i=0; i<sizeof(azSql)/sizeof(azSql[0]); i++){",
          "215:     if( eVerbosity>=1 ){",
          "216:       printf(\"%s\\n\", azSql[i]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214: #ifdef SQLITE_TESTCTRL_PRNG_SEED",
          "215:   sqlite3_test_control(SQLITE_TESTCTRL_PRNG_SEED, 1, db);",
          "216: #endif",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1805:             sqlite3_progress_handler(db, 100000, progressHandler,",
          "1806:                                      &vdbeLimitFlag);",
          "1807:           }",
          "1808: #endif",
          "1809:           do{",
          "1810:             runSql(db, (char*)pSql->a, runFlags);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1808: #endif",
          "1809: #ifdef SQLITE_TESTCTRL_PRNG_SEED",
          "1810:           sqlite3_test_control(SQLITE_TESTCTRL_PRNG_SEED, 1, db);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a40cb96a4c6f1313d076c0314925412c556d2e48",
      "candidate_info": {
        "commit_hash": "a40cb96a4c6f1313d076c0314925412c556d2e48",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a40cb96a4c6f1313d076c0314925412c556d2e48",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "test/rowid.test"
        ],
        "message": "Fix a problem with the fix for [9cf6c9bb51] (commit [658b84d7]) that could cause a cursor to be left in an invalid state following a (rowid < text-value) search.\n\nFossilOrigin-Name: bc7d2c1656396bb4f5f1f814e60dbf816cc91c5a521b54ad593cd3da0fe8dcb4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "test/rowid.test||test/rowid.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 228e1087c0602470e450586499de5a3e87e266c688bc828f20e3bad2fdc65ff1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4001:   pC->seekOp = pOp->opcode;",
          "4002: #endif",
          "4004:   if( pC->isTable ){",
          "4006:     assert( sqlite3BtreeCursorHasHint(pC->uc.pCursor, BTREE_SEEK_EQ)==0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4004:   pC->deferredMoveto = 0;",
          "4005:   pC->cacheStatus = CACHE_STALE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4105:       goto seek_not_found;",
          "4106:     }",
          "4107:   }",
          "4110: #ifdef SQLITE_TEST",
          "4111:   sqlite3_search_count++;",
          "4112: #endif",
          "",
          "[Removed Lines]",
          "4108:   pC->deferredMoveto = 0;",
          "4109:   pC->cacheStatus = CACHE_STALE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/rowid.test||test/rowid.test": [
          "File: test/rowid.test -> test/rowid.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "765:   SELECT * FROM t14 WHERE x < 'a' ORDER BY rowid DESC;",
          "766: } {}",
          "768: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "768: reset_db",
          "769: do_execsql_test rowid-15.0 {",
          "770:   PRAGMA reverse_unordered_selects=true;",
          "771:   CREATE TABLE t1 (c0, c1);",
          "772:   CREATE TABLE t2 (c0 INT UNIQUE);",
          "773:   INSERT INTO t1(c0, c1) VALUES (0, 0), (0, NULL);",
          "774:   INSERT INTO t2(c0) VALUES (1);",
          "775: }",
          "777: do_execsql_test rowid-15.1 {",
          "778:   SELECT t2.c0, t1.c1 FROM t1, t2",
          "779:   WHERE (t2.rowid <= 'a') OR (t1.c0 <= t2.c0) LIMIT 100",
          "780: } {1 {} 1 0}",
          "782: do_execsql_test rowid-15.2 {",
          "783:   SELECT 1, NULL INTERSECT SELECT * FROM (",
          "784:       SELECT t2.c0, t1.c1 FROM t1, t2",
          "785:       WHERE ((t2.rowid <= 'a')) OR (t1.c0 <= t2.c0) ORDER BY 'a' DESC LIMIT 100",
          "786:   );",
          "787: } {1 {}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3f3f2c73575ea8ae9a46ea30b3af6dfc342cd6c9",
      "candidate_info": {
        "commit_hash": "3f3f2c73575ea8ae9a46ea30b3af6dfc342cd6c9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3f3f2c73575ea8ae9a46ea30b3af6dfc342cd6c9",
        "files": [
          "ext/fts5/fts5_main.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Ensure that the idxStr for FTS5 is always zero-terminated. Fix for check-in [e6db945454a0dae2]\n\nFossilOrigin-Name: 090cd07d37904da4610d6a6787a3cc825c9a8bdcc5f051267d4608bba9b49d03",
        "before_after_code_files": [
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "569:         pInfo->estimatedCost = 1e50;",
          "570:         return SQLITE_OK;",
          "571:       }else{",
          "572:         if( iCol==nCol+1 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "570:         assert( iIdxStr < pInfo->nConstraint*6 + 1 );",
          "571:         idxStr[iIdxStr] = 0;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a8927d14f88c44828e794787bab080455ab62705c93f65ce7d8db83478aa5a8e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fe03dac236fb191c03bef60c30abbfa35e648e4c",
      "candidate_info": {
        "commit_hash": "fe03dac236fb191c03bef60c30abbfa35e648e4c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fe03dac236fb191c03bef60c30abbfa35e648e4c",
        "files": [
          "Makefile.in",
          "Makefile.msc",
          "manifest",
          "manifest.uuid",
          "tool/lemon.c"
        ],
        "message": "Add the new -S option to the lemon parser generator to cause it to output SQL that describes the input grammar.\n\nFossilOrigin-Name: 4dbd398d640852d4a696d68c72ee039968023d402a8053b5e6b4ef1d75e982a8",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "Makefile.msc||Makefile.msc",
          "manifest.uuid||manifest.uuid",
          "tool/lemon.c||tool/lemon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1053: parse.c: $(TOP)/src/parse.y lemon$(BEXE)",
          "1054:  cp $(TOP)/src/parse.y .",
          "1057: sqlite3.h: $(TOP)/src/sqlite.h.in $(TOP)/manifest mksourceid$(BEXE) $(TOP)/VERSION",
          "1058:  $(TCLSH_CMD) $(TOP)/tool/mksqlite3h.tcl $(TOP) >sqlite3.h",
          "",
          "[Removed Lines]",
          "1055:  ./lemon$(BEXE) $(OPT_FEATURE_FLAGS) $(OPTS) parse.y",
          "",
          "[Added Lines]",
          "1055:  ./lemon$(BEXE) $(OPT_FEATURE_FLAGS) $(OPTS) -S parse.y",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1180: fts5parse.c: $(TOP)/ext/fts5/fts5parse.y lemon",
          "1181:  cp $(TOP)/ext/fts5/fts5parse.y .",
          "1182:  rm -f fts5parse.h",
          "1185: fts5parse.h: fts5parse.c",
          "",
          "[Removed Lines]",
          "1183:  ./lemon$(BEXE) $(OPTS) fts5parse.y",
          "",
          "[Added Lines]",
          "1183:  ./lemon$(BEXE) $(OPTS) -S fts5parse.y",
          "",
          "---------------"
        ],
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2141: parse.c: $(TOP)\\src\\parse.y lemon.exe",
          "2142:  del /Q parse.y parse.h parse.h.temp 2>NUL",
          "2143:  copy $(TOP)\\src\\parse.y .",
          "2146: $(SQLITE3H): $(TOP)\\src\\sqlite.h.in $(TOP)\\manifest mksourceid.exe $(TOP)\\VERSION",
          "2147:  $(TCLSH_CMD) $(TOP)\\tool\\mksqlite3h.tcl $(TOP:\\=/) > $(SQLITE3H) $(MKSQLITE3H_ARGS)",
          "",
          "[Removed Lines]",
          "2144:  .\\lemon.exe $(REQ_FEATURE_FLAGS) $(OPT_FEATURE_FLAGS) $(EXT_FEATURE_FLAGS) $(OPTS) parse.y",
          "",
          "[Added Lines]",
          "2144:  .\\lemon.exe $(REQ_FEATURE_FLAGS) $(OPT_FEATURE_FLAGS) $(EXT_FEATURE_FLAGS) $(OPTS) -S parse.y",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2301: fts5parse.c: $(TOP)\\ext\\fts5\\fts5parse.y lemon.exe",
          "2302:  copy $(TOP)\\ext\\fts5\\fts5parse.y .",
          "2303:  del /Q fts5parse.h 2>NUL",
          "2306: fts5parse.h: fts5parse.c",
          "",
          "[Removed Lines]",
          "2304:  .\\lemon.exe $(REQ_FEATURE_FLAGS) $(OPT_FEATURE_FLAGS) $(EXT_FEATURE_FLAGS) $(OPTS) fts5parse.y",
          "",
          "[Added Lines]",
          "2304:  .\\lemon.exe $(REQ_FEATURE_FLAGS) $(OPT_FEATURE_FLAGS) $(EXT_FEATURE_FLAGS) $(OPTS) -S fts5parse.y",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5d9a369301a65f320a0696fcf1f062ca5976ef34350590c07aecf5335c66d872",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "219: void Reprint(struct lemon *);",
          "220: void ReportOutput(struct lemon *);",
          "222: void ReportHeader(struct lemon *);",
          "223: void CompressTables(struct lemon *);",
          "224: void ResortStates(struct lemon *);",
          "",
          "[Removed Lines]",
          "221: void ReportTable(struct lemon *, int);",
          "",
          "[Added Lines]",
          "221: void ReportTable(struct lemon *, int, int);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1632:   static int mhflag = 0;",
          "1633:   static int nolinenosflag = 0;",
          "1634:   static int noResort = 0;",
          "1636:   static struct s_options options[] = {",
          "1637:     {OPT_FLAG, \"b\", (char*)&basisflag, \"Print only the basis in report.\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1635:   static int sqlFlag = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1650:     {OPT_FLAG, \"r\", (char*)&noResort, \"Do not sort or renumber states\"},",
          "1651:     {OPT_FLAG, \"s\", (char*)&statistics,",
          "1652:                                    \"Print parser stats to standard output.\"},",
          "1653:     {OPT_FLAG, \"x\", (char*)&version, \"Print the version number.\"},",
          "1654:     {OPT_FSTR, \"T\", (char*)handle_T_option, \"Specify a template file.\"},",
          "1655:     {OPT_FSTR, \"W\", 0, \"Ignored.  (Placeholder for '-W' compiler options.)\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1654:     {OPT_FLAG, \"S\", (char*)&sqlFlag,",
          "1655:                     \"Generate the *.sql file describing the parser tables.\"},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1758:     if( !quiet ) ReportOutput(&lem);",
          "",
          "[Removed Lines]",
          "1761:     ReportTable(&lem, mhflag);",
          "",
          "[Added Lines]",
          "1764:     ReportTable(&lem, mhflag, sqlFlag);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4144: void ReportTable(",
          "4145:   struct lemon *lemp,",
          "4147: ){",
          "4149:   char line[LINESIZE];",
          "4150:   int  lineno;",
          "4151:   struct state *stp;",
          "",
          "[Removed Lines]",
          "4148:   FILE *out, *in;",
          "",
          "[Added Lines]",
          "4152:   FILE *out, *in, *sql;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4175:     fclose(in);",
          "4176:     return;",
          "4177:   }",
          "4178:   lineno = 1;",
          "4179:   tplt_xfer(lemp->name,in,out,&lineno);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4182:   if( sqlFlag==0 ){",
          "4183:     sql = 0;",
          "4184:   }else{",
          "4185:     sql = file_open(lemp, \".sql\", \"wb\");",
          "4186:     if( sql==0 ){",
          "4187:       fclose(in);",
          "4188:       fclose(out);",
          "4189:       return;",
          "4190:     }",
          "4191:     fprintf(sql,",
          "4192:        \"CREATE TABLE symbol(\\n\"",
          "4193:        \"  id INTEGER PRIMARY KEY,\\n\"",
          "4194:        \"  name TEXT NOT NULL,\\n\"",
          "4195:        \"  isTerminal BOOLEAN NOT NULL,\\n\"",
          "4196:        \"  fallback INTEGER REFERENCES symbol\\n\"",
          "4197:        \");\\n\"",
          "4198:     );",
          "4199:     for(i=0; i<lemp->nsymbol; i++){",
          "4200:       fprintf(sql,",
          "4201:          \"INSERT INTO symbol(id,name,isTerminal,fallback)\"",
          "4202:          \"VALUES(%d,'%s',%s\",",
          "4203:          i, lemp->symbols[i]->name,",
          "4204:          i<lemp->nterminal ? \"TRUE\" : \"FALSE\"",
          "4205:       );",
          "4206:       if( lemp->symbols[i]->fallback ){",
          "4207:         fprintf(sql, \",%d);\\n\", lemp->symbols[i]->fallback->index);",
          "4208:       }else{",
          "4209:         fprintf(sql, \",NULL);\\n\");",
          "4210:       }",
          "4211:     }",
          "4212:     fprintf(sql,",
          "4213:       \"CREATE TABLE rule(\\n\"",
          "4214:       \"  ruleid INTEGER PRIMARY KEY,\\n\"",
          "4215:       \"  lhs INTEGER REFERENCES symbol(id)\\n\"",
          "4216:       \");\\n\"",
          "4217:       \"CREATE TABLE rulerhs(\\n\"",
          "4218:       \"  ruleid INTEGER REFERENCES rule(ruleid),\\n\"",
          "4219:       \"  pos INTEGER,\\n\"",
          "4220:       \"  sym INTEGER REFERENCES symbol(id)\\n\"",
          "4221:       \");\\n\"",
          "4222:     );",
          "4223:     for(i=0, rp=lemp->rule; rp; rp=rp->next, i++){",
          "4224:       assert( i==rp->iRule );",
          "4225:       fprintf(sql,",
          "4226:         \"INSERT INTO rule(ruleid,lhs)VALUES(%d,%d);\\n\",",
          "4227:         rp->iRule, rp->lhs->index",
          "4228:       );",
          "4229:       for(j=0; j<rp->nrhs; j++){",
          "4230:         struct symbol *sp = rp->rhs[j];",
          "4231:         if( sp->type!=MULTITERMINAL ){",
          "4232:           fprintf(sql,",
          "4233:             \"INSERT INTO rulerhs(ruleid,pos,sym)VALUES(%d,%d,%d);\\n\",",
          "4234:             i,j,sp->index",
          "4235:           );",
          "4236:         }else{",
          "4237:           int k;",
          "4238:           for(k=0; k<sp->nsubsym; k++){",
          "4239:             fprintf(sql,",
          "4240:               \"INSERT INTO rulerhs(ruleid,pos,sym)VALUES(%d,%d,%d);\\n\",",
          "4241:               i,j,sp->subsym[k]->index",
          "4242:             );",
          "4243:           }",
          "4244:         }",
          "4245:       }",
          "4246:     }",
          "4247:   }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4697:   acttab_free(pActtab);",
          "4698:   fclose(in);",
          "4699:   fclose(out);",
          "4700:   return;",
          "4701: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4770:   if( sql ) fclose(sql);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7ba03ea15aa0adee1cce6eb4ffe4df8046cb3271",
      "candidate_info": {
        "commit_hash": "7ba03ea15aa0adee1cce6eb4ffe4df8046cb3271",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7ba03ea15aa0adee1cce6eb4ffe4df8046cb3271",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/printf.c"
        ],
        "message": "Slight adjustment to the printf formatter large memory allocation detector so that it does not overestimate the amount of space needed for oversize %d conversions.\n\nFossilOrigin-Name: 1aee70d6de8a9b17ebb74a7cb1dad65139cde1b615dcce4d15d3a476fda8676b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/printf.c||src/printf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 179e5d46054e5c86f53a79b7a0823d9a383da8391ad1d3c3b22645927a1e052b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/printf.c||src/printf.c": [
          "File: src/printf.c -> src/printf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "442:           nOut = etBUFSIZE;",
          "443:           zOut = buf;",
          "444:         }else{",
          "446:           zOut = zExtra = printfTempBuf(pAccum, n);",
          "447:           if( zOut==0 ) return;",
          "448:           nOut = (int)n;",
          "",
          "[Removed Lines]",
          "445:           u64 n = (u64)precision + 10 + precision/3;",
          "",
          "[Added Lines]",
          "445:           u64 n;",
          "446:           n = (u64)precision + 10;",
          "447:           if( cThousand ) n += precision/3;",
          "",
          "---------------"
        ]
      }
    }
  ]
}