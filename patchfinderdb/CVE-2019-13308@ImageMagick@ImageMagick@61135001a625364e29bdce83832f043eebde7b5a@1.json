{
  "cve_id": "CVE-2019-13308",
  "cve_desc": "ImageMagick 7.0.8-50 Q16 has a heap-based buffer overflow in MagickCore/fourier.c in ComplexImage.",
  "repo": "ImageMagick/ImageMagick",
  "patch_hash": "61135001a625364e29bdce83832f043eebde7b5a",
  "patch_info": {
    "commit_hash": "61135001a625364e29bdce83832f043eebde7b5a",
    "repo": "ImageMagick/ImageMagick",
    "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/61135001a625364e29bdce83832f043eebde7b5a",
    "files": [
      "MagickCore/fourier.c",
      "coders/gif.c"
    ],
    "message": "https://github.com/ImageMagick/ImageMagick/issues/1595",
    "before_after_code_files": [
      "MagickCore/fourier.c||MagickCore/fourier.c",
      "coders/gif.c||coders/gif.c"
    ]
  },
  "patch_diff": {
    "MagickCore/fourier.c||MagickCore/fourier.c": [
      "File: MagickCore/fourier.c -> MagickCore/fourier.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "226:   Cr_view=AcquireAuthenticCacheView(Cr_image,exception);",
      "227:   Ci_view=AcquireAuthenticCacheView(Ci_image,exception);",
      "228:   status=MagickTrue;",
      "230: #if defined(MAGICKCORE_OPENMP_SUPPORT)",
      "232:     magick_number_threads(images,complex_images,images->rows,1L)",
      "233: #endif",
      "234:   for (y=0; y < (ssize_t) images->rows; y++)",
      "",
      "[Removed Lines]",
      "229:   progress=0;",
      "231:   #pragma omp parallel for schedule(static) shared(progress,status) \\",
      "",
      "[Added Lines]",
      "229:   progress=0;",
      "231:   #pragma omp parallel for schedule(static) shared(progress,status) \\",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "246:     register ssize_t",
      "247:       x;",
      "256:       MagickMax(Br_image->columns,Cr_image->columns),1,exception);",
      "257:     Bi=GetCacheViewVirtualPixels(Bi_view,0,y,",
      "258:       MagickMax(Bi_image->columns,Ci_image->columns),1,exception);",
      "",
      "[Removed Lines]",
      "249:     if (status == MagickFalse)",
      "250:       continue;",
      "251:     Ar=GetCacheViewVirtualPixels(Ar_view,0,y,",
      "252:       MagickMax(Ar_image->columns,Cr_image->columns),1,exception);",
      "253:     Ai=GetCacheViewVirtualPixels(Ai_view,0,y,",
      "254:       MagickMax(Ai_image->columns,Ci_image->columns),1,exception);",
      "255:     Br=GetCacheViewVirtualPixels(Br_view,0,y,",
      "",
      "[Added Lines]",
      "249:     if (status == MagickFalse)",
      "250:       continue;",
      "251:     Ar=GetCacheViewVirtualPixels(Ar_view,0,y,Cr_image->columns,1,exception);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "262:         (Br == (const Quantum *) NULL) || (Bi == (const Quantum *) NULL) ||",
      "263:         (Cr == (Quantum *) NULL) || (Ci == (Quantum *) NULL))",
      "264:       {",
      "266:         continue;",
      "267:       }",
      "268:     for (x=0; x < (ssize_t) images->columns; x++)",
      "269:     {",
      "271:         i;",
      "273:       for (i=0; i < (ssize_t) GetPixelChannels(images); i++)",
      "",
      "[Removed Lines]",
      "265:         status=MagickFalse;",
      "270:       register ssize_t",
      "",
      "[Added Lines]",
      "261:         status=MagickFalse;",
      "266:       register ssize_t",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "289:           }",
      "290:           case DivideComplexOperator:",
      "291:           {",
      "295:             gamma=PerceptibleReciprocal(Br[i]*Br[i]+Bi[i]*Bi[i]+snr);",
      "296:             Cr[i]=gamma*(Ar[i]*Br[i]+Ai[i]*Bi[i]);",
      "297:             Ci[i]=gamma*(Ai[i]*Br[i]-Ar[i]*Bi[i]);",
      "298:             break;",
      "301:           {",
      "302:             Cr[i]=sqrt(Ar[i]*Ar[i]+Ai[i]*Ai[i]);",
      "303:             Ci[i]=atan2(Ai[i],Ar[i])/(2.0*MagickPI)+0.5;",
      "304:             break;",
      "307:           {",
      "308:             Cr[i]=QuantumScale*(Ar[i]*Br[i]-Ai[i]*Bi[i]);",
      "309:             Ci[i]=QuantumScale*(Ai[i]*Br[i]+Ar[i]*Bi[i]);",
      "",
      "[Removed Lines]",
      "292:             double",
      "293:               gamma;",
      "299:           }",
      "300:           case MagnitudePhaseComplexOperator:",
      "305:           }",
      "306:           case MultiplyComplexOperator:",
      "",
      "[Added Lines]",
      "288:             double",
      "289:               gamma;",
      "295:           }",
      "296:           case MagnitudePhaseComplexOperator:",
      "301:           }",
      "302:           case MultiplyComplexOperator:",
      "",
      "---------------"
    ],
    "coders/gif.c||coders/gif.c": [
      "File: coders/gif.c -> coders/gif.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "673:       {",
      "674:         waiting_code=(short) GetPixelIndex(image,p);",
      "675:         p+=GetPixelChannels(image);",
      "676:       }",
      "677:     for (x=(ssize_t) (y == 0 ? 1 : 0); x < (ssize_t) image->columns; x++)",
      "678:     {",
      "680:         Probe hash table.",
      "683:       p+=GetPixelChannels(image);",
      "684:       k=(ssize_t) (((size_t) index << (MaxGIFBits-8))+waiting_code);",
      "685:       if (k >= MaxHashTable)",
      "",
      "[Removed Lines]",
      "682:       index=(Quantum) ((size_t) GetPixelIndex(image,p) & 0xff);",
      "",
      "[Added Lines]",
      "676:       }",
      "677:     for (x=(ssize_t) (y == 0 ? 1 : 0); x < (ssize_t) image->columns; x++)",
      "683:       displacement=1;",
      "684:       index=(Quantum) ((size_t) GetPixelIndex(image,p) & 0xff);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7d4322be8353c36312760fe4fa818cafb78f2232",
      "candidate_info": {
        "commit_hash": "7d4322be8353c36312760fe4fa818cafb78f2232",
        "repo": "ImageMagick/ImageMagick",
        "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/7d4322be8353c36312760fe4fa818cafb78f2232",
        "files": [
          "MagickCore/fourier.c"
        ],
        "message": "Added missing typecast.",
        "before_after_code_files": [
          "MagickCore/fourier.c||MagickCore/fourier.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "MagickCore/fourier.c||MagickCore/fourier.c"
          ],
          "candidate": [
            "MagickCore/fourier.c||MagickCore/fourier.c"
          ]
        }
      },
      "candidate_diff": {
        "MagickCore/fourier.c||MagickCore/fourier.c": [
          "File: MagickCore/fourier.c -> MagickCore/fourier.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "302:           }",
          "303:           case DivideComplexOperator:",
          "304:           {",
          "306:               gamma;",
          "308:             gamma=PerceptibleReciprocal((double) Br[i]*Br[i]+Bi[i]*Bi[i]+snr);",
          "",
          "[Removed Lines]",
          "305:             double",
          "",
          "[Added Lines]",
          "305:             double",
          "306:               gamma;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2fd6e728001eb80da58766ae39330d5a4fd2bc09",
      "candidate_info": {
        "commit_hash": "2fd6e728001eb80da58766ae39330d5a4fd2bc09",
        "repo": "ImageMagick/ImageMagick",
        "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/2fd6e728001eb80da58766ae39330d5a4fd2bc09",
        "files": [
          "MagickCore/fourier.c"
        ],
        "message": "Don't scale for -complex multiply",
        "before_after_code_files": [
          "MagickCore/fourier.c||MagickCore/fourier.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "MagickCore/fourier.c||MagickCore/fourier.c"
          ],
          "candidate": [
            "MagickCore/fourier.c||MagickCore/fourier.c"
          ]
        }
      },
      "candidate_diff": {
        "MagickCore/fourier.c||MagickCore/fourier.c": [
          "File: MagickCore/fourier.c -> MagickCore/fourier.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "316:             Cr[i]=sqrt((double) Ar[i]*Ar[i]+(double) Ai[i]*Ai[i]);",
          "317:             Ci[i]=atan2((double) Ai[i],(double) Ar[i])/(2.0*MagickPI)+0.5;",
          "318:             break;",
          "321:           {",
          "322:             Cr[i]=QuantumScale*((double) Ar[i]*Br[i]-(double) Ai[i]*Bi[i]);",
          "323:             Ci[i]=QuantumScale*((double) Ai[i]*Br[i]+(double) Ar[i]*Bi[i]);",
          "",
          "[Removed Lines]",
          "319:           }",
          "320:           case MultiplyComplexOperator:",
          "",
          "[Added Lines]",
          "319:           }",
          "320:           case MultiplyComplexOperator:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8ed73bec795200401b5bed5b89ff1eceadfd3cf6",
      "candidate_info": {
        "commit_hash": "8ed73bec795200401b5bed5b89ff1eceadfd3cf6",
        "repo": "ImageMagick/ImageMagick",
        "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/8ed73bec795200401b5bed5b89ff1eceadfd3cf6",
        "files": [
          "MagickCore/fourier.c"
        ],
        "message": "Multiply complex divide by quantum range",
        "before_after_code_files": [
          "MagickCore/fourier.c||MagickCore/fourier.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "MagickCore/fourier.c||MagickCore/fourier.c"
          ],
          "candidate": [
            "MagickCore/fourier.c||MagickCore/fourier.c"
          ]
        }
      },
      "candidate_diff": {
        "MagickCore/fourier.c||MagickCore/fourier.c": [
          "File: MagickCore/fourier.c -> MagickCore/fourier.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "302:           }",
          "303:           case DivideComplexOperator:",
          "304:           {",
          "308:             gamma=PerceptibleReciprocal((double) Br[i]*Br[i]+(double) Bi[i]*",
          "309:               Bi[i]+snr);",
          "",
          "[Removed Lines]",
          "305:             double",
          "306:               gamma;",
          "",
          "[Added Lines]",
          "305:             double",
          "306:               gamma;",
          "",
          "---------------"
        ]
      }
    }
  ]
}