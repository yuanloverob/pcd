{
  "cve_id": "CVE-2013-0178",
  "cve_desc": "Insecure temporary file vulnerability in Redis before 2.6 related to /tmp/redis-%p.vm.",
  "repo": "antirez/redis",
  "patch_hash": "697af434fbeb2e3ba2ba9687cd283ed1a2734fa5",
  "patch_info": {
    "commit_hash": "697af434fbeb2e3ba2ba9687cd283ed1a2734fa5",
    "repo": "antirez/redis",
    "commit_url": "https://github.com/antirez/redis/commit/697af434fbeb2e3ba2ba9687cd283ed1a2734fa5",
    "files": [
      "src/diskstore.c",
      "src/networking.c",
      "src/redis.c",
      "src/redis.h"
    ],
    "message": "initial changes needed to turn the current VM code into a cache system. Tons of work to do still.",
    "before_after_code_files": [
      "src/diskstore.c||src/diskstore.c",
      "src/networking.c||src/networking.c",
      "src/redis.c||src/redis.c",
      "src/redis.h||src/redis.h"
    ]
  },
  "patch_diff": {
    "src/diskstore.c||src/diskstore.c": [
      "File: src/diskstore.c -> src/diskstore.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "68: int dsOpen(void) {",
      "69:     struct stat sb;",
      "70:     int retval;",
      "73:     if ((retval = stat(path,&sb) == -1) && errno != ENOENT) {",
      "74:         redisLog(REDIS_WARNING, \"Error opening disk store at %s: %s\",",
      "",
      "[Removed Lines]",
      "71:     char *path = server.diskstore_path;",
      "",
      "[Added Lines]",
      "80:     char *path = server.ds_path;",
      "",
      "---------------"
    ],
    "src/networking.c||src/networking.c": [
      "File: src/networking.c -> src/networking.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "168: void addReply(redisClient *c, robj *obj) {",
      "169:     if (_installWriteEvent(c) != REDIS_OK) return;",
      "",
      "[Removed Lines]",
      "170:     redisAssert(!server.vm_enabled || obj->storage == REDIS_VM_MEMORY);",
      "",
      "[Added Lines]",
      "170:     redisAssert(!server.ds_enabled || obj->storage == REDIS_VM_MEMORY);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "462:     if (c->flags & REDIS_IO_WAIT) {",
      "464:         if (listLength(c->io_keys) == 0) {",
      "465:             ln = listSearchKey(server.io_ready_clients,c);",
      "",
      "[Removed Lines]",
      "463:         redisAssert(server.vm_enabled);",
      "",
      "[Added Lines]",
      "463:         redisAssert(server.ds_enabled);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "474:                 dontWaitForSwappedKey(c,ln->value);",
      "475:             }",
      "476:         }",
      "478:     }",
      "479:     listRelease(c->io_keys);",
      "",
      "[Removed Lines]",
      "477:         server.vm_blocked_clients--;",
      "",
      "[Added Lines]",
      "477:         server.cache_blocked_clients--;",
      "",
      "---------------"
    ],
    "src/redis.c||src/redis.c": [
      "File: src/redis.c -> src/redis.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "619:     if (server.masterhost == NULL) activeExpireCycle();",
      "642:     }",
      "",
      "[Removed Lines]",
      "623:     if (vmCanSwapOut()) {",
      "624:         while (server.vm_enabled && zmalloc_used_memory() >",
      "625:                 server.vm_max_memory)",
      "626:         {",
      "627:             int retval = (server.vm_max_threads == 0) ?",
      "628:                         vmSwapOneObjectBlocking() :",
      "629:                         vmSwapOneObjectThreaded();",
      "630:             if (retval == REDIS_ERR && !(loops % 300) &&",
      "631:                 zmalloc_used_memory() >",
      "632:                 (server.vm_max_memory+server.vm_max_memory/10))",
      "633:             {",
      "634:                 redisLog(REDIS_WARNING,\"WARNING: vm-max-memory limit exceeded by more than 10%% but unable to swap more objects out!\");",
      "635:             }",
      "640:             if (retval == REDIS_ERR || server.vm_max_threads > 0) break;",
      "641:         }",
      "",
      "[Added Lines]",
      "623:     while (server.ds_enabled && zmalloc_used_memory() >",
      "624:             server.cache_max_memory)",
      "625:     {",
      "626:         cacheFreeOneEntry();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "656:     listNode *ln;",
      "657:     redisClient *c;",
      "661:         listIter li;",
      "663:         listRewind(server.io_ready_clients,&li);",
      "",
      "[Removed Lines]",
      "660:     if (server.vm_enabled && listLength(server.io_ready_clients)) {",
      "",
      "[Added Lines]",
      "645:     if (server.ds_enabled && listLength(server.io_ready_clients)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "669:             listDelNode(server.io_ready_clients,ln);",
      "670:             c->flags &= (~REDIS_IO_WAIT);",
      "672:             aeCreateFileEvent(server.el, c->fd, AE_READABLE,",
      "673:                 readQueryFromClient, c);",
      "674:             cmd = lookupCommand(c->argv[0]->ptr);",
      "",
      "[Removed Lines]",
      "671:             server.vm_blocked_clients--;",
      "",
      "[Added Lines]",
      "656:             server.cache_blocked_clients--;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "787:     server.maxmemory = 0;",
      "788:     server.maxmemory_policy = REDIS_MAXMEMORY_VOLATILE_LRU;",
      "789:     server.maxmemory_samples = 3;",
      "797:     server.hash_max_zipmap_entries = REDIS_HASH_MAX_ZIPMAP_ENTRIES;",
      "798:     server.hash_max_zipmap_value = REDIS_HASH_MAX_ZIPMAP_VALUE;",
      "799:     server.list_max_ziplist_entries = REDIS_LIST_MAX_ZIPLIST_ENTRIES;",
      "",
      "[Removed Lines]",
      "790:     server.vm_enabled = 0;",
      "791:     server.vm_swap_file = zstrdup(\"/tmp/redis-%p.vm\");",
      "795:     server.vm_max_threads = 4;",
      "796:     server.vm_blocked_clients = 0;",
      "",
      "[Added Lines]",
      "775:     server.ds_enabled = 0;",
      "776:     server.ds_path = zstrdup(\"/tmp/redis.ds\");",
      "778:     server.cache_blocked_clients = 0;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "873:         server.db[j].expires = dictCreate(&keyptrDictType,NULL);",
      "874:         server.db[j].blocking_keys = dictCreate(&keylistDictType,NULL);",
      "875:         server.db[j].watched_keys = dictCreate(&keylistDictType,NULL);",
      "877:             server.db[j].io_keys = dictCreate(&keylistDictType,NULL);",
      "878:         server.db[j].id = j;",
      "879:     }",
      "",
      "[Removed Lines]",
      "876:         if (server.vm_enabled)",
      "",
      "[Added Lines]",
      "858:         if (server.ds_enabled)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "911:         }",
      "912:     }",
      "915: }",
      "",
      "[Removed Lines]",
      "914:     if (server.vm_enabled) vmInit();",
      "",
      "[Added Lines]",
      "896:     if (server.ds_enabled) dsInit();",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1050:         queueMultiCommand(c,cmd);",
      "1051:         addReply(c,shared.queued);",
      "1052:     } else {",
      "1055:         call(c,cmd);",
      "1056:     }",
      "1057:     return REDIS_OK;",
      "",
      "[Removed Lines]",
      "1053:         if (server.vm_enabled && server.vm_max_threads > 0 &&",
      "1054:             blockClientOnSwappedKeys(c,cmd)) return REDIS_ERR;",
      "",
      "[Added Lines]",
      "1035:         if (server.ds_enabled && blockClientOnSwappedKeys(c,cmd))",
      "1036:             return REDIS_ERR;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1072:     if (server.appendonly) {",
      "1074:         aof_fsync(server.appendfd);",
      "1076:     } else if (server.saveparamslen > 0) {",
      "1078:         if (rdbSave(server.dbfilename) != REDIS_OK) {",
      "",
      "[Removed Lines]",
      "1075:         if (server.vm_enabled) unlink(server.vm_swap_file);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1185:         \"hash_max_zipmap_value:%zu\\r\\n\"",
      "1186:         \"pubsub_channels:%ld\\r\\n\"",
      "1187:         \"pubsub_patterns:%u\\r\\n\"",
      "1189:         \"role:%s\\r\\n\"",
      "1190:         ,REDIS_VERSION,",
      "1191:         redisGitSHA1(),",
      "",
      "[Removed Lines]",
      "1188:         \"vm_enabled:%d\\r\\n\"",
      "",
      "[Added Lines]",
      "1169:         \"ds_enabled:%d\\r\\n\"",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1228:         server.hash_max_zipmap_value,",
      "1229:         dictSize(server.pubsub_channels),",
      "1230:         listLength(server.pubsub_patterns),",
      "1232:         server.masterhost == NULL ? \"master\" : \"slave\"",
      "1233:     );",
      "1234:     if (server.masterhost) {",
      "",
      "[Removed Lines]",
      "1231:         server.vm_enabled != 0,",
      "",
      "[Added Lines]",
      "1212:         server.ds_enabled != 0,",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "1255:             );",
      "1256:         }",
      "1257:     }",
      "1259:         lockThreadedIO();",
      "1260:         info = sdscatprintf(info,",
      "1285:         );",
      "1286:         unlockThreadedIO();",
      "1287:     }",
      "",
      "[Removed Lines]",
      "1258:     if (server.vm_enabled) {",
      "1261:             \"vm_conf_max_memory:%llu\\r\\n\"",
      "1262:             \"vm_conf_page_size:%llu\\r\\n\"",
      "1263:             \"vm_conf_pages:%llu\\r\\n\"",
      "1264:             \"vm_stats_used_pages:%llu\\r\\n\"",
      "1265:             \"vm_stats_swapped_objects:%llu\\r\\n\"",
      "1266:             \"vm_stats_swappin_count:%llu\\r\\n\"",
      "1267:             \"vm_stats_swappout_count:%llu\\r\\n\"",
      "1268:             \"vm_stats_io_newjobs_len:%lu\\r\\n\"",
      "1269:             \"vm_stats_io_processing_len:%lu\\r\\n\"",
      "1270:             \"vm_stats_io_processed_len:%lu\\r\\n\"",
      "1271:             \"vm_stats_io_active_threads:%lu\\r\\n\"",
      "1272:             \"vm_stats_blocked_clients:%lu\\r\\n\"",
      "1273:             ,(unsigned long long) server.vm_max_memory,",
      "1274:             (unsigned long long) server.vm_page_size,",
      "1275:             (unsigned long long) server.vm_pages,",
      "1276:             (unsigned long long) server.vm_stats_used_pages,",
      "1277:             (unsigned long long) server.vm_stats_swapped_objects,",
      "1278:             (unsigned long long) server.vm_stats_swapins,",
      "1279:             (unsigned long long) server.vm_stats_swapouts,",
      "1280:             (unsigned long) listLength(server.io_newjobs),",
      "1281:             (unsigned long) listLength(server.io_processing),",
      "1282:             (unsigned long) listLength(server.io_processed),",
      "1283:             (unsigned long) server.io_active_threads,",
      "1284:             (unsigned long) server.vm_blocked_clients",
      "",
      "[Added Lines]",
      "1239:     if (server.ds_enabled) {",
      "1242:             \"cache_max_memory:%llu\\r\\n\"",
      "1243:             \"cache_blocked_clients:%lu\\r\\n\"",
      "1244:             ,(unsigned long long) server.cache_max_memory,",
      "1245:             (unsigned long) server.cache_blocked_clients",
      "",
      "---------------"
    ],
    "src/redis.h||src/redis.h": [
      "File: src/redis.h -> src/redis.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "440:     int maxmemory_samples;",
      "442:     unsigned int bpop_blocked_clients;",
      "444:     list *unblocked_clients;",
      "",
      "[Removed Lines]",
      "443:     unsigned int vm_blocked_clients;",
      "",
      "[Added Lines]",
      "443:     unsigned int cache_blocked_clients;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "448:     int sort_alpha;",
      "449:     int sort_bypattern;",
      "457:     size_t hash_max_zipmap_entries;",
      "458:     size_t hash_max_zipmap_value;",
      "",
      "[Removed Lines]",
      "451:     int vm_enabled;",
      "452:     char *vm_swap_file;",
      "453:     off_t vm_page_size;",
      "454:     off_t vm_pages;",
      "455:     unsigned long long vm_max_memory;",
      "",
      "[Added Lines]",
      "453:     unsigned long long cache_max_memory;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1b085c9f4820693a4c15e6689a9788308da516a7",
      "candidate_info": {
        "commit_hash": "1b085c9f4820693a4c15e6689a9788308da516a7",
        "repo": "antirez/redis",
        "commit_url": "https://github.com/antirez/redis/commit/1b085c9f4820693a4c15e6689a9788308da516a7",
        "files": [
          "src/redis.c"
        ],
        "message": "INFO output refactoring. Now \"INFO section\" will report only the specified section",
        "before_after_code_files": [
          "src/redis.c||src/redis.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/redis.c||src/redis.c"
          ],
          "candidate": [
            "src/redis.c||src/redis.c"
          ]
        }
      },
      "candidate_diff": {
        "src/redis.c||src/redis.c": [
          "File: src/redis.c -> src/redis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:     {\"flushdb\",flushdbCommand,1,0,NULL,0,0,0,0},",
          "175:     {\"flushall\",flushallCommand,1,0,NULL,0,0,0,0},",
          "176:     {\"sort\",sortCommand,-2,REDIS_CMD_DENYOOM,NULL,1,1,1,0},",
          "178:     {\"monitor\",monitorCommand,1,0,NULL,0,0,0,0},",
          "179:     {\"ttl\",ttlCommand,2,0,NULL,1,1,1,0},",
          "180:     {\"persist\",persistCommand,2,0,NULL,1,1,1,0},",
          "",
          "[Removed Lines]",
          "177:     {\"info\",infoCommand,1,0,NULL,0,0,0,0},",
          "",
          "[Added Lines]",
          "177:     {\"info\",infoCommand,-1,0,NULL,0,0,0,0},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1161:     time_t uptime = time(NULL)-server.stat_starttime;",
          "1162:     int j, numcommands;",
          "1163:     char hmem[64];",
          "1164:     struct rusage self_ru, c_ru;",
          "1165:     unsigned long lol, bib;",
          "1167:     getrusage(RUSAGE_SELF, &self_ru);",
          "1168:     getrusage(RUSAGE_CHILDREN, &c_ru);",
          "1169:     getClientsMaxBuffers(&lol,&bib);",
          "1171:     bytesToHuman(hmem,zmalloc_used_memory());",
          "1260:         info = sdscatprintf(info,",
          "1280:             );",
          "1281:         }",
          "1282:     }",
          "1285:         info = sdscatprintf(info,",
          "1292:     }",
          "1307:         }",
          "1309:         info = sdscatprintf(info,",
          "1321:     }",
          "1331:         }",
          "1332:     }",
          "1340:     }",
          "1350:         }",
          "1351:     }",
          "1352:     return info;",
          "1353: }",
          "1355: void infoCommand(redisClient *c) {",
          "1357:     addReplySds(c,sdscatprintf(sdsempty(),\"$%lu\\r\\n\",",
          "1358:         (unsigned long)sdslen(info)));",
          "1359:     addReplySds(c,info);",
          "",
          "[Removed Lines]",
          "1159: sds genRedisInfoString(void) {",
          "1160:     sds info;",
          "1172:     info = sdscatprintf(sdsempty(),",
          "1173:         \"redis_version:%s\\r\\n\"",
          "1174:         \"redis_git_sha1:%s\\r\\n\"",
          "1175:         \"redis_git_dirty:%d\\r\\n\"",
          "1176:         \"arch_bits:%s\\r\\n\"",
          "1177:         \"multiplexing_api:%s\\r\\n\"",
          "1178:         \"process_id:%ld\\r\\n\"",
          "1179:         \"uptime_in_seconds:%ld\\r\\n\"",
          "1180:         \"uptime_in_days:%ld\\r\\n\"",
          "1181:         \"lru_clock:%ld\\r\\n\"",
          "1182:         \"used_cpu_sys:%.2f\\r\\n\"",
          "1183:         \"used_cpu_user:%.2f\\r\\n\"",
          "1184:         \"used_cpu_sys_childrens:%.2f\\r\\n\"",
          "1185:         \"used_cpu_user_childrens:%.2f\\r\\n\"",
          "1186:         \"connected_clients:%d\\r\\n\"",
          "1187:         \"connected_slaves:%d\\r\\n\"",
          "1188:         \"client_longest_output_list:%lu\\r\\n\"",
          "1189:         \"client_biggest_input_buf:%lu\\r\\n\"",
          "1190:         \"blocked_clients:%d\\r\\n\"",
          "1191:         \"used_memory:%zu\\r\\n\"",
          "1192:         \"used_memory_human:%s\\r\\n\"",
          "1193:         \"used_memory_rss:%zu\\r\\n\"",
          "1194:         \"mem_fragmentation_ratio:%.2f\\r\\n\"",
          "1195:         \"use_tcmalloc:%d\\r\\n\"",
          "1196:         \"loading:%d\\r\\n\"",
          "1197:         \"aof_enabled:%d\\r\\n\"",
          "1198:         \"changes_since_last_save:%lld\\r\\n\"",
          "1199:         \"bgsave_in_progress:%d\\r\\n\"",
          "1200:         \"last_save_time:%ld\\r\\n\"",
          "1201:         \"bgrewriteaof_in_progress:%d\\r\\n\"",
          "1202:         \"total_connections_received:%lld\\r\\n\"",
          "1203:         \"total_commands_processed:%lld\\r\\n\"",
          "1204:         \"expired_keys:%lld\\r\\n\"",
          "1205:         \"evicted_keys:%lld\\r\\n\"",
          "1206:         \"keyspace_hits:%lld\\r\\n\"",
          "1207:         \"keyspace_misses:%lld\\r\\n\"",
          "1208:         \"hash_max_zipmap_entries:%zu\\r\\n\"",
          "1209:         \"hash_max_zipmap_value:%zu\\r\\n\"",
          "1210:         \"pubsub_channels:%ld\\r\\n\"",
          "1211:         \"pubsub_patterns:%u\\r\\n\"",
          "1212:         \"ds_enabled:%d\\r\\n\"",
          "1213:         \"role:%s\\r\\n\"",
          "1214:         ,REDIS_VERSION,",
          "1215:         redisGitSHA1(),",
          "1216:         strtol(redisGitDirty(),NULL,10) > 0,",
          "1217:         (sizeof(long) == 8) ? \"64\" : \"32\",",
          "1218:         aeGetApiName(),",
          "1219:         (long) getpid(),",
          "1220:         uptime,",
          "1221:         uptime/(3600*24),",
          "1222:         (unsigned long) server.lruclock,",
          "1223:         (float)self_ru.ru_utime.tv_sec+(float)self_ru.ru_utime.tv_usec/1000000,",
          "1224:         (float)self_ru.ru_stime.tv_sec+(float)self_ru.ru_stime.tv_usec/1000000,",
          "1225:         (float)c_ru.ru_utime.tv_sec+(float)c_ru.ru_utime.tv_usec/1000000,",
          "1226:         (float)c_ru.ru_stime.tv_sec+(float)c_ru.ru_stime.tv_usec/1000000,",
          "1227:         listLength(server.clients)-listLength(server.slaves),",
          "1228:         listLength(server.slaves),",
          "1229:         lol, bib,",
          "1230:         server.bpop_blocked_clients,",
          "1231:         zmalloc_used_memory(),",
          "1232:         hmem,",
          "1233:         zmalloc_get_rss(),",
          "1234:         zmalloc_get_fragmentation_ratio(),",
          "1235: #ifdef USE_TCMALLOC",
          "1236:         1,",
          "1237: #else",
          "1238:         0,",
          "1239: #endif",
          "1240:         server.loading,",
          "1241:         server.appendonly,",
          "1242:         server.dirty,",
          "1243:         server.bgsavechildpid != -1 || server.bgsavethread != (pthread_t) -1,",
          "1244:         server.lastsave,",
          "1245:         server.bgrewritechildpid != -1,",
          "1246:         server.stat_numconnections,",
          "1247:         server.stat_numcommands,",
          "1248:         server.stat_expiredkeys,",
          "1249:         server.stat_evictedkeys,",
          "1250:         server.stat_keyspace_hits,",
          "1251:         server.stat_keyspace_misses,",
          "1252:         server.hash_max_zipmap_entries,",
          "1253:         server.hash_max_zipmap_value,",
          "1254:         dictSize(server.pubsub_channels),",
          "1255:         listLength(server.pubsub_patterns),",
          "1256:         server.ds_enabled != 0,",
          "1257:         server.masterhost == NULL ? \"master\" : \"slave\"",
          "1258:     );",
          "1259:     if (server.masterhost) {",
          "1261:             \"master_host:%s\\r\\n\"",
          "1262:             \"master_port:%d\\r\\n\"",
          "1263:             \"master_link_status:%s\\r\\n\"",
          "1264:             \"master_last_io_seconds_ago:%d\\r\\n\"",
          "1265:             \"master_sync_in_progress:%d\\r\\n\"",
          "1266:             ,server.masterhost,",
          "1267:             server.masterport,",
          "1268:             (server.replstate == REDIS_REPL_CONNECTED) ?",
          "1269:                 \"up\" : \"down\",",
          "1270:             server.master ? ((int)(time(NULL)-server.master->lastinteraction)) : -1,",
          "1271:             server.replstate == REDIS_REPL_TRANSFER",
          "1272:         );",
          "1274:         if (server.replstate == REDIS_REPL_TRANSFER) {",
          "1275:             info = sdscatprintf(info,",
          "1276:                 \"master_sync_left_bytes:%ld\\r\\n\"",
          "1277:                 \"master_sync_last_io_seconds_ago:%d\\r\\n\"",
          "1278:                 ,(long)server.repl_transfer_left,",
          "1279:                 (int)(time(NULL)-server.repl_transfer_lastio)",
          "1283:     if (server.ds_enabled) {",
          "1284:         lockThreadedIO();",
          "1286:             \"cache_max_memory:%llu\\r\\n\"",
          "1287:             \"cache_blocked_clients:%lu\\r\\n\"",
          "1288:             ,(unsigned long long) server.cache_max_memory,",
          "1289:             (unsigned long) server.cache_blocked_clients",
          "1290:         );",
          "1291:         unlockThreadedIO();",
          "1293:     if (server.loading) {",
          "1294:         double perc;",
          "1295:         time_t eta, elapsed;",
          "1296:         off_t remaining_bytes = server.loading_total_bytes-",
          "1297:                                 server.loading_loaded_bytes;",
          "1299:         perc = ((double)server.loading_loaded_bytes /",
          "1300:                server.loading_total_bytes) * 100;",
          "1302:         elapsed = time(NULL)-server.loading_start_time;",
          "1303:         if (elapsed == 0) {",
          "1305:         } else {",
          "1306:             eta = (elapsed*remaining_bytes)/server.loading_loaded_bytes;",
          "1310:             \"loading_start_time:%ld\\r\\n\"",
          "1311:             \"loading_total_bytes:%llu\\r\\n\"",
          "1312:             \"loading_loaded_bytes:%llu\\r\\n\"",
          "1313:             \"loading_loaded_perc:%.2f\\r\\n\"",
          "1314:             \"loading_eta_seconds:%ld\\r\\n\"",
          "1315:             ,(unsigned long) server.loading_start_time,",
          "1316:             (unsigned long long) server.loading_total_bytes,",
          "1317:             (unsigned long long) server.loading_loaded_bytes,",
          "1318:             perc,",
          "1319:             eta",
          "1320:         );",
          "1323:     info = sdscat(info,\"allocation_stats:\");",
          "1324:     for (j = 0; j <= ZMALLOC_MAX_ALLOC_STAT; j++) {",
          "1325:         size_t count = zmalloc_allocations_for_size(j);",
          "1326:         if (count) {",
          "1327:             if (info[sdslen(info)-1] != ':') info = sdscatlen(info,\",\",1);",
          "1328:             info = sdscatprintf(info,\"%s%d=%zu\",",
          "1329:                 (j == ZMALLOC_MAX_ALLOC_STAT) ? \">=\" : \"\",",
          "1330:                 j,count);",
          "1333:     info = sdscat(info,\"\\r\\n\");",
          "1335:     numcommands = sizeof(readonlyCommandTable)/sizeof(struct redisCommand);",
          "1336:     for (j = 0; j < numcommands; j++) {",
          "1337:         struct redisCommand *c = readonlyCommandTable+j;",
          "1338:         info = sdscatprintf(info,\"command_%s:microseconds:%lld\\r\\n\",",
          "1339:             c->name, c->microseconds);",
          "1342:     for (j = 0; j < server.dbnum; j++) {",
          "1343:         long long keys, vkeys;",
          "1345:         keys = dictSize(server.db[j].dict);",
          "1346:         vkeys = dictSize(server.db[j].expires);",
          "1347:         if (keys || vkeys) {",
          "1348:             info = sdscatprintf(info, \"db%d:keys=%lld,expires=%lld\\r\\n\",",
          "1349:                 j, keys, vkeys);",
          "1356:     sds info = genRedisInfoString();",
          "",
          "[Added Lines]",
          "1159: sds genRedisInfoString(char *section) {",
          "1160:     sds info = sdsempty();",
          "1166:     int allsections = 0, defsections = 0;",
          "1167:     int sections = 0;",
          "1169:     if (section) {",
          "1170:         allsections = strcasecmp(section,\"all\") == 0;",
          "1171:         allsections = strcasecmp(section,\"default\") == 0;",
          "1172:     }",
          "1180:     if (allsections || defsections || !strcasecmp(section,\"server\")) {",
          "1181:         if (sections++) info = sdscat(info,\"\\r\\n\");",
          "1183:             \"# Server\\r\\n\"",
          "1184:             \"redis_version:%s\\r\\n\"",
          "1185:             \"redis_git_sha1:%s\\r\\n\"",
          "1186:             \"redis_git_dirty:%d\\r\\n\"",
          "1187:             \"arch_bits:%s\\r\\n\"",
          "1188:             \"multiplexing_api:%s\\r\\n\"",
          "1189:             \"process_id:%ld\\r\\n\"",
          "1190:             \"tcp_port:%d\\r\\n\"",
          "1191:             \"uptime_in_seconds:%ld\\r\\n\"",
          "1192:             \"uptime_in_days:%ld\\r\\n\"",
          "1193:             \"lru_clock:%ld\\r\\n\",",
          "1194:             REDIS_VERSION,",
          "1195:             redisGitSHA1(),",
          "1196:             strtol(redisGitDirty(),NULL,10) > 0,",
          "1197:             (sizeof(long) == 8) ? \"64\" : \"32\",",
          "1198:             aeGetApiName(),",
          "1199:             (long) getpid(),",
          "1200:             server.port,",
          "1201:             uptime,",
          "1202:             uptime/(3600*24),",
          "1203:             (unsigned long) server.lruclock);",
          "1204:     }",
          "1207:     if (allsections || defsections || !strcasecmp(section,\"clients\")) {",
          "1208:         if (sections++) info = sdscat(info,\"\\r\\n\");",
          "1209:         info = sdscatprintf(info,",
          "1210:             \"# Clients\\r\\n\"",
          "1211:             \"connected_clients:%d\\r\\n\"",
          "1212:             \"client_longest_output_list:%lu\\r\\n\"",
          "1213:             \"client_biggest_input_buf:%lu\\r\\n\"",
          "1214:             \"blocked_clients:%d\\r\\n\",",
          "1215:             listLength(server.clients)-listLength(server.slaves),",
          "1216:             lol, bib,",
          "1217:             server.bpop_blocked_clients);",
          "1218:     }",
          "1221:     if (allsections || defsections || !strcasecmp(section,\"memory\")) {",
          "1222:         if (sections++) info = sdscat(info,\"\\r\\n\");",
          "1223:         info = sdscatprintf(info,",
          "1224:             \"# Memory\\r\\n\"",
          "1225:             \"used_memory:%zu\\r\\n\"",
          "1226:             \"used_memory_human:%s\\r\\n\"",
          "1227:             \"used_memory_rss:%zu\\r\\n\"",
          "1228:             \"mem_fragmentation_ratio:%.2f\\r\\n\"",
          "1229:             \"use_tcmalloc:%d\\r\\n\",",
          "1230:             zmalloc_used_memory(),",
          "1231:             hmem,",
          "1232:             zmalloc_get_rss(),",
          "1233:             zmalloc_get_fragmentation_ratio(),",
          "1234:     #ifdef USE_TCMALLOC",
          "1235:             1",
          "1236:     #else",
          "1237:             0",
          "1238:     #endif",
          "1240:         info = sdscat(info,\"allocation_stats:\");",
          "1241:         for (j = 0; j <= ZMALLOC_MAX_ALLOC_STAT; j++) {",
          "1242:             size_t count = zmalloc_allocations_for_size(j);",
          "1243:             if (count) {",
          "1244:                 if (info[sdslen(info)-1] != ':') info = sdscatlen(info,\",\",1);",
          "1245:                 info = sdscatprintf(info,\"%s%d=%zu\",",
          "1246:                     (j == ZMALLOC_MAX_ALLOC_STAT) ? \">=\" : \"\",",
          "1247:                     j,count);",
          "1248:             }",
          "1253:     if (allsections || defsections || !strcasecmp(section,\"persistence\")) {",
          "1254:         if (sections++) info = sdscat(info,\"\\r\\n\");",
          "1256:             \"# Persistence\\r\\n\"",
          "1257:             \"loading:%d\\r\\n\"",
          "1258:             \"aof_enabled:%d\\r\\n\"",
          "1259:             \"changes_since_last_save:%lld\\r\\n\"",
          "1260:             \"bgsave_in_progress:%d\\r\\n\"",
          "1261:             \"last_save_time:%ld\\r\\n\"",
          "1262:             \"bgrewriteaof_in_progress:%d\\r\\n\",",
          "1263:             server.loading,",
          "1264:             server.appendonly,",
          "1265:             server.dirty,",
          "1266:                 server.bgsavechildpid != -1 ||",
          "1267:                 server.bgsavethread != (pthread_t) -1,",
          "1268:             server.lastsave,",
          "1269:             server.bgrewritechildpid != -1);",
          "1271:         if (server.loading) {",
          "1272:             double perc;",
          "1273:             time_t eta, elapsed;",
          "1274:             off_t remaining_bytes = server.loading_total_bytes-",
          "1275:                                     server.loading_loaded_bytes;",
          "1277:             perc = ((double)server.loading_loaded_bytes /",
          "1278:                    server.loading_total_bytes) * 100;",
          "1280:             elapsed = time(NULL)-server.loading_start_time;",
          "1281:             if (elapsed == 0) {",
          "1282:                 eta = 1; /* A fake 1 second figure if we don't have",
          "1284:             } else {",
          "1285:                 eta = (elapsed*remaining_bytes)/server.loading_loaded_bytes;",
          "1286:             }",
          "1288:             info = sdscatprintf(info,",
          "1289:                 \"loading_start_time:%ld\\r\\n\"",
          "1290:                 \"loading_total_bytes:%llu\\r\\n\"",
          "1291:                 \"loading_loaded_bytes:%llu\\r\\n\"",
          "1292:                 \"loading_loaded_perc:%.2f\\r\\n\"",
          "1293:                 \"loading_eta_seconds:%ld\\r\\n\"",
          "1294:                 ,(unsigned long) server.loading_start_time,",
          "1295:                 (unsigned long long) server.loading_total_bytes,",
          "1296:                 (unsigned long long) server.loading_loaded_bytes,",
          "1297:                 perc,",
          "1298:                 eta",
          "1299:             );",
          "1300:         }",
          "1304:     if (allsections || defsections || !strcasecmp(section,\"diskstore\")) {",
          "1305:         if (sections++) info = sdscat(info,\"\\r\\n\");",
          "1306:         info = sdscatprintf(info,",
          "1307:             \"# Diskstore\\r\\n\"",
          "1308:             \"ds_enabled:%d\\r\\n\",",
          "1309:             server.ds_enabled != 0);",
          "1310:         if (server.ds_enabled) {",
          "1311:             lockThreadedIO();",
          "1312:             info = sdscatprintf(info,",
          "1313:                 \"cache_max_memory:%llu\\r\\n\"",
          "1314:                 \"cache_blocked_clients:%lu\\r\\n\"",
          "1315:                 ,(unsigned long long) server.cache_max_memory,",
          "1316:                 (unsigned long) server.cache_blocked_clients",
          "1317:             );",
          "1318:             unlockThreadedIO();",
          "1320:     }",
          "1323:     if (allsections || defsections || !strcasecmp(section,\"stats\")) {",
          "1324:         if (sections++) info = sdscat(info,\"\\r\\n\");",
          "1326:             \"# Stats\\r\\n\"",
          "1327:             \"total_connections_received:%lld\\r\\n\"",
          "1328:             \"total_commands_processed:%lld\\r\\n\"",
          "1329:             \"expired_keys:%lld\\r\\n\"",
          "1330:             \"evicted_keys:%lld\\r\\n\"",
          "1331:             \"keyspace_hits:%lld\\r\\n\"",
          "1332:             \"keyspace_misses:%lld\\r\\n\"",
          "1333:             \"pubsub_channels:%ld\\r\\n\"",
          "1334:             \"pubsub_patterns:%u\\r\\n\",",
          "1335:             server.stat_numconnections,",
          "1336:             server.stat_numcommands,",
          "1337:             server.stat_expiredkeys,",
          "1338:             server.stat_evictedkeys,",
          "1339:             server.stat_keyspace_hits,",
          "1340:             server.stat_keyspace_misses,",
          "1341:             dictSize(server.pubsub_channels),",
          "1342:             listLength(server.pubsub_patterns));",
          "1346:     if (allsections || defsections || !strcasecmp(section,\"replication\")) {",
          "1347:         if (sections++) info = sdscat(info,\"\\r\\n\");",
          "1348:         info = sdscatprintf(info,",
          "1349:             \"# Replication\\r\\n\"",
          "1350:             \"role:%s\\r\\n\",",
          "1351:             server.masterhost == NULL ? \"master\" : \"slave\");",
          "1352:         if (server.masterhost) {",
          "1353:             info = sdscatprintf(info,",
          "1354:                 \"master_host:%s\\r\\n\"",
          "1355:                 \"master_port:%d\\r\\n\"",
          "1356:                 \"master_link_status:%s\\r\\n\"",
          "1357:                 \"master_last_io_seconds_ago:%d\\r\\n\"",
          "1358:                 \"master_sync_in_progress:%d\\r\\n\"",
          "1359:                 ,server.masterhost,",
          "1360:                 server.masterport,",
          "1361:                 (server.replstate == REDIS_REPL_CONNECTED) ?",
          "1362:                     \"up\" : \"down\",",
          "1363:                 server.master ?",
          "1364:                 ((int)(time(NULL)-server.master->lastinteraction)) : -1,",
          "1365:                 server.replstate == REDIS_REPL_TRANSFER",
          "1366:             );",
          "1368:             if (server.replstate == REDIS_REPL_TRANSFER) {",
          "1369:                 info = sdscatprintf(info,",
          "1370:                     \"master_sync_left_bytes:%ld\\r\\n\"",
          "1371:                     \"master_sync_last_io_seconds_ago:%d\\r\\n\"",
          "1372:                     ,(long)server.repl_transfer_left,",
          "1373:                     (int)(time(NULL)-server.repl_transfer_lastio)",
          "1374:                 );",
          "1375:             }",
          "1377:         info = sdscatprintf(info,",
          "1378:             \"connected_slaves:%d\\r\\n\",",
          "1379:             listLength(server.slaves));",
          "1383:     if (allsections || defsections || !strcasecmp(section,\"profiling\")) {",
          "1384:         if (sections++) info = sdscat(info,\"\\r\\n\");",
          "1385:         info = sdscatprintf(info,",
          "1386:         \"# Profiling\\r\\n\"",
          "1387:         \"used_cpu_sys:%.2f\\r\\n\"",
          "1388:         \"used_cpu_user:%.2f\\r\\n\"",
          "1389:         \"used_cpu_sys_childrens:%.2f\\r\\n\"",
          "1390:         \"used_cpu_user_childrens:%.2f\\r\\n\",",
          "1391:         (float)self_ru.ru_utime.tv_sec+(float)self_ru.ru_utime.tv_usec/1000000,",
          "1392:         (float)self_ru.ru_stime.tv_sec+(float)self_ru.ru_stime.tv_usec/1000000,",
          "1393:         (float)c_ru.ru_utime.tv_sec+(float)c_ru.ru_utime.tv_usec/1000000,",
          "1394:         (float)c_ru.ru_stime.tv_sec+(float)c_ru.ru_stime.tv_usec/1000000);",
          "1396:         numcommands = sizeof(readonlyCommandTable)/sizeof(struct redisCommand);",
          "1397:         for (j = 0; j < numcommands; j++) {",
          "1398:             struct redisCommand *c = readonlyCommandTable+j;",
          "1399:             info = sdscatprintf(info,\"used_time_cmd_%s:%lld\\r\\n\",",
          "1400:                 c->name, c->microseconds);",
          "1401:         }",
          "1405:     if (allsections || defsections || !strcasecmp(section,\"keyspace\")) {",
          "1406:         if (sections++) info = sdscat(info,\"\\r\\n\");",
          "1407:         info = sdscatprintf(info, \"# Keyspace\\r\\n\");",
          "1408:         for (j = 0; j < server.dbnum; j++) {",
          "1409:             long long keys, vkeys;",
          "1411:             keys = dictSize(server.db[j].dict);",
          "1412:             vkeys = dictSize(server.db[j].expires);",
          "1413:             if (keys || vkeys) {",
          "1414:                 info = sdscatprintf(info, \"db%d:keys=%lld,expires=%lld\\r\\n\",",
          "1415:                     j, keys, vkeys);",
          "1416:             }",
          "1423:     char *section = c->argc == 2 ? c->argv[1]->ptr : \"default\";",
          "1425:     if (c->argc > 2) {",
          "1426:         addReply(c,shared.syntaxerr);",
          "1427:         return;",
          "1428:     }",
          "1429:     sds info = genRedisInfoString(section);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1620:     redisLog(REDIS_WARNING,",
          "1621:         \"======= Ooops! Redis %s got signal: -%d- =======\", REDIS_VERSION, sig);",
          "1623:     redisLog(REDIS_WARNING, \"%s\",infostring);",
          "",
          "[Removed Lines]",
          "1622:     infostring = genRedisInfoString();",
          "",
          "[Added Lines]",
          "1695:     infostring = genRedisInfoString(\"all\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "16d778780eb865deefb2bfa024aef50926917eac",
      "candidate_info": {
        "commit_hash": "16d778780eb865deefb2bfa024aef50926917eac",
        "repo": "antirez/redis",
        "commit_url": "https://github.com/antirez/redis/commit/16d778780eb865deefb2bfa024aef50926917eac",
        "files": [
          "src/aof.c",
          "src/config.c",
          "src/db.c",
          "src/dscache.c",
          "src/networking.c",
          "src/object.c",
          "src/rdb.c",
          "src/redis.h"
        ],
        "message": "a lot of code reworked/removed to implement object caching",
        "before_after_code_files": [
          "src/aof.c||src/aof.c",
          "src/config.c||src/config.c",
          "src/db.c||src/db.c",
          "src/dscache.c||src/dscache.c",
          "src/networking.c||src/networking.c",
          "src/object.c||src/object.c",
          "src/rdb.c||src/rdb.c",
          "src/redis.h||src/redis.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/networking.c||src/networking.c",
            "src/redis.h||src/redis.h"
          ],
          "candidate": [
            "src/networking.c||src/networking.c",
            "src/redis.h||src/redis.h"
          ]
        }
      },
      "candidate_diff": {
        "src/aof.c||src/aof.c": [
          "File: src/aof.c -> src/aof.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "242:         char buf[128];",
          "243:         sds argsds;",
          "244:         struct redisCommand *cmd;",
          "248:         if (!(loops++ % 1000)) {",
          "",
          "[Removed Lines]",
          "245:         int force_swapout;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "287:         for (j = 0; j < argc; j++) decrRefCount(argv[j]);",
          "288:         zfree(argv);",
          "300:     }",
          "",
          "[Removed Lines]",
          "291:         force_swapout = 0;",
          "292:         if ((zmalloc_used_memory() - server.vm_max_memory) > 1024*1024*32)",
          "293:             force_swapout = 1;",
          "295:         if (server.vm_enabled && force_swapout) {",
          "296:             while (zmalloc_used_memory() > server.vm_max_memory) {",
          "297:                 if (vmSwapOneObjectBlocking() == REDIS_ERR) break;",
          "298:             }",
          "299:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "359:             sds keystr = dictGetEntryKey(de);",
          "360:             robj key, *o;",
          "361:             time_t expiretime;",
          "364:             keystr = dictGetEntryKey(de);",
          "365:             o = dictGetEntryVal(de);",
          "366:             initStaticStringObject(key,keystr);",
          "378:             expiretime = getExpire(db,&key);",
          "",
          "[Removed Lines]",
          "362:             int swapped;",
          "371:             if (!server.vm_enabled || o->storage == REDIS_VM_MEMORY ||",
          "372:                 o->storage == REDIS_VM_SWAPPING) {",
          "373:                 swapped = 0;",
          "374:             } else {",
          "375:                 o = vmPreviewObject(o);",
          "376:                 swapped = 1;",
          "377:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "509:                 if (fwriteBulkObject(fp,&key) == 0) goto werr;",
          "510:                 if (fwriteBulkLongLong(fp,expiretime) == 0) goto werr;",
          "511:             }",
          "513:         }",
          "514:         dictReleaseIterator(di);",
          "515:     }",
          "",
          "[Removed Lines]",
          "512:             if (swapped) decrRefCount(o);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "553:     pid_t childpid;",
          "555:     if (server.bgrewritechildpid != -1) return REDIS_ERR;",
          "557:     if ((childpid = fork()) == 0) {",
          "559:         char tmpfile[256];",
          "562:         if (server.ipfd > 0) close(server.ipfd);",
          "563:         if (server.sofd > 0) close(server.sofd);",
          "564:         snprintf(tmpfile,256,\"temp-rewriteaof-bg-%d.aof\", (int) getpid());",
          "",
          "[Removed Lines]",
          "556:     if (server.vm_enabled) waitEmptyIOJobsQueue();",
          "561:         if (server.vm_enabled) vmReopenSwapFile();",
          "",
          "[Added Lines]",
          "532:     redisAssert(server.ds_enabled == 0);",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "241:         } else if (!strcasecmp(argv[0],\"dbfilename\") && argc == 2) {",
          "242:             zfree(server.dbfilename);",
          "243:             server.dbfilename = zstrdup(argv[1]);",
          "246:                 err = \"argument must be 'yes' or 'no'\"; goto loaderr;",
          "247:             }",
          "259:         } else if (!strcasecmp(argv[0],\"hash-max-zipmap-entries\") && argc == 2) {",
          "260:             server.hash_max_zipmap_entries = memtoll(argv[1], NULL);",
          "261:         } else if (!strcasecmp(argv[0],\"hash-max-zipmap-value\") && argc == 2) {",
          "",
          "[Removed Lines]",
          "244:         } else if (!strcasecmp(argv[0],\"vm-enabled\") && argc == 2) {",
          "245:             if ((server.vm_enabled = yesnotoi(argv[1])) == -1) {",
          "248:         } else if (!strcasecmp(argv[0],\"vm-swap-file\") && argc == 2) {",
          "249:             zfree(server.vm_swap_file);",
          "250:             server.vm_swap_file = zstrdup(argv[1]);",
          "251:         } else if (!strcasecmp(argv[0],\"vm-max-memory\") && argc == 2) {",
          "252:             server.vm_max_memory = memtoll(argv[1],NULL);",
          "253:         } else if (!strcasecmp(argv[0],\"vm-page-size\") && argc == 2) {",
          "254:             server.vm_page_size = memtoll(argv[1], NULL);",
          "255:         } else if (!strcasecmp(argv[0],\"vm-pages\") && argc == 2) {",
          "256:             server.vm_pages = memtoll(argv[1], NULL);",
          "257:         } else if (!strcasecmp(argv[0],\"vm-max-threads\") && argc == 2) {",
          "258:             server.vm_max_threads = strtoll(argv[1], NULL, 10);",
          "",
          "[Added Lines]",
          "244:         } else if (!strcasecmp(argv[0],\"diskstore-enabled\") && argc == 2) {",
          "245:             if ((server.ds_enabled = yesnotoi(argv[1])) == -1) {",
          "248:         } else if (!strcasecmp(argv[0],\"diskstore-path\") && argc == 2) {",
          "249:             zfree(server.ds_path);",
          "250:             server.ds_path = zstrdup(argv[1]);",
          "251:         } else if (!strcasecmp(argv[0],\"cache-max-memory\") && argc == 2) {",
          "252:             server.cache_max_memory = memtoll(argv[1],NULL);",
          "",
          "---------------"
        ],
        "src/db.c||src/db.c": [
          "File: src/db.c -> src/db.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:         if (server.bgsavechildpid == -1 && server.bgrewritechildpid == -1)",
          "18:             val->lru = server.lruclock;",
          "39:         }",
          "40:         server.stat_keyspace_hits++;",
          "41:         return val;",
          "42:     } else {",
          "43:         server.stat_keyspace_misses++;",
          "44:         return NULL;",
          "45:     }",
          "",
          "[Removed Lines]",
          "20:         if (server.vm_enabled) {",
          "21:             if (val->storage == REDIS_VM_MEMORY ||",
          "22:                 val->storage == REDIS_VM_SWAPPING)",
          "23:             {",
          "25:                 if (val->storage == REDIS_VM_SWAPPING)",
          "26:                     vmCancelThreadedIOJob(val);",
          "27:             } else {",
          "28:                 int notify = (val->storage == REDIS_VM_LOADING);",
          "31:                 redisAssert(val->type == REDIS_VMPOINTER);",
          "32:                 val = vmLoadObject(val);",
          "33:                 dictGetEntryVal(de) = val;",
          "37:                 if (notify) handleClientsBlockedOnSwappedKey(db,key);",
          "38:             }",
          "",
          "[Added Lines]",
          "20:         if (server.ds_enabled && val->storage == REDIS_DS_SAVING) {",
          "23:             waitEmptyIOJobsQueue();",
          "24:             redisAssert(val->storage != REDIS_DS_SAVING);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "139:     if (dictSize(db->expires) > 0) dictDelete(db->expires,key->ptr);",
          "",
          "[Removed Lines]",
          "136:     if (server.vm_enabled) handleClientsBlockedOnSwappedKey(db,key);",
          "",
          "[Added Lines]",
          "124:     if (server.ds_enabled) handleClientsBlockedOnSwappedKey(db,key);",
          "",
          "---------------"
        ],
        "src/dscache.c||src/dscache.c": [
          "File: src/dscache.c -> src/dscache.c"
        ],
        "src/networking.c||src/networking.c": [
          "File: src/networking.c -> src/networking.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "168: void addReply(redisClient *c, robj *obj) {",
          "169:     if (_installWriteEvent(c) != REDIS_OK) return;",
          "",
          "[Removed Lines]",
          "170:     redisAssert(!server.ds_enabled || obj->storage == REDIS_VM_MEMORY);",
          "",
          "[Added Lines]",
          "170:     redisAssert(!server.ds_enabled || obj->storage == REDIS_DS_MEMORY);",
          "",
          "---------------"
        ],
        "src/object.c||src/object.c": [
          "File: src/object.c -> src/object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:     return o;",
          "26: }",
          "",
          "[Removed Lines]",
          "24:     o->storage = REDIS_VM_MEMORY;",
          "",
          "[Added Lines]",
          "24:     o->storage = REDIS_DS_MEMORY;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "160: void decrRefCount(void *obj) {",
          "161:     robj *o = obj;",
          "175:     if (o->refcount <= 0) redisPanic(\"decrRefCount against refcount <= 0\");",
          "187:     if (--(o->refcount) == 0) {",
          "188:         switch(o->type) {",
          "189:         case REDIS_STRING: freeStringObject(o); break;",
          "190:         case REDIS_LIST: freeListObject(o); break;",
          "",
          "[Removed Lines]",
          "164:     if (server.vm_enabled &&",
          "165:         (o->storage == REDIS_VM_SWAPPED || o->storage == REDIS_VM_LOADING))",
          "166:     {",
          "167:         vmpointer *vp = obj;",
          "168:         if (o->storage == REDIS_VM_LOADING) vmCancelThreadedIOJob(o);",
          "169:         vmMarkPagesFree(vp->page,vp->usedpages);",
          "170:         server.vm_stats_swapped_objects--;",
          "171:         zfree(vp);",
          "172:         return;",
          "173:     }",
          "185:     if (server.vm_enabled && o->storage == REDIS_VM_SWAPPING)",
          "186:         vmCancelThreadedIOJob(o);",
          "",
          "[Added Lines]",
          "167:         redisAssert(o->storage != REDIS_DS_SAVING);",
          "",
          "---------------"
        ],
        "src/rdb.c||src/rdb.c": [
          "File: src/rdb.c -> src/rdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "395:     return len;",
          "396: }",
          "405: int rdbSave(char *filename) {",
          "406:     dictIterator *di = NULL;",
          "",
          "[Removed Lines]",
          "399: off_t rdbSavedObjectPages(robj *o) {",
          "400:     off_t bytes = rdbSavedObjectLen(o);",
          "401:     return (bytes+(server.vm_page_size-1))/server.vm_page_size;",
          "402: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "410:     int j;",
          "411:     time_t now = time(NULL);",
          "419:     snprintf(tmpfile,256,\"temp-%d.rdb\", (int) getpid());",
          "420:     fp = fopen(tmpfile,\"w\");",
          "",
          "[Removed Lines]",
          "416:     if (server.vm_enabled)",
          "417:         waitEmptyIOJobsQueue();",
          "",
          "[Added Lines]",
          "408:     redisAssert(server.ds_enabled == 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "453:                 if (rdbSaveType(fp,REDIS_EXPIRETIME) == -1) goto werr;",
          "454:                 if (rdbSaveTime(fp,expiretime) == -1) goto werr;",
          "455:             }",
          "476:         }",
          "477:         dictReleaseIterator(di);",
          "478:     }",
          "",
          "[Removed Lines]",
          "458:             if (!server.vm_enabled || o->storage == REDIS_VM_MEMORY ||",
          "459:                                       o->storage == REDIS_VM_SWAPPING) {",
          "461:                 if (rdbSaveType(fp,o->type) == -1) goto werr;",
          "462:                 if (rdbSaveStringObject(fp,&key) == -1) goto werr;",
          "463:                 if (rdbSaveObject(fp,o) == -1) goto werr;",
          "464:             } else {",
          "466:                 robj *po;",
          "468:                 po = vmPreviewObject(o);",
          "470:                 if (rdbSaveType(fp,po->type) == -1) goto werr;",
          "471:                 if (rdbSaveStringObject(fp,&key) == -1) goto werr;",
          "472:                 if (rdbSaveObject(fp,po) == -1) goto werr;",
          "474:                 decrRefCount(po);",
          "475:             }",
          "",
          "[Added Lines]",
          "448:             if (rdbSaveType(fp,o->type) == -1) goto werr;",
          "449:             if (rdbSaveStringObject(fp,&key) == -1) goto werr;",
          "450:             if (rdbSaveObject(fp,o) == -1) goto werr;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "508:     pid_t childpid;",
          "510:     if (server.bgsavechildpid != -1) return REDIS_ERR;",
          "512:     server.dirty_before_bgsave = server.dirty;",
          "513:     if ((childpid = fork()) == 0) {",
          "516:         if (server.ipfd > 0) close(server.ipfd);",
          "517:         if (server.sofd > 0) close(server.sofd);",
          "518:         if (rdbSave(filename) == REDIS_OK) {",
          "",
          "[Removed Lines]",
          "511:     if (server.vm_enabled) waitEmptyIOJobsQueue();",
          "515:         if (server.vm_enabled) vmReopenSwapFile();",
          "",
          "[Added Lines]",
          "486:     redisAssert(server.ds_enabled == 0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "899:     startLoading(fp);",
          "900:     while(1) {",
          "901:         robj *key, *val;",
          "904:         expiretime = -1;",
          "",
          "[Removed Lines]",
          "902:         int force_swapout;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "970:             continue;",
          "971:         }",
          "972:         decrRefCount(key);",
          "988:     }",
          "989:     fclose(fp);",
          "990:     stopLoading();",
          "",
          "[Removed Lines]",
          "975:         force_swapout = 0;",
          "976:         if ((zmalloc_used_memory() - server.vm_max_memory) > 1024*1024*32)",
          "977:             force_swapout = 1;",
          "981:         if (!swap_all_values && server.vm_enabled && force_swapout) {",
          "982:             while (zmalloc_used_memory() > server.vm_max_memory) {",
          "983:                 if (vmSwapOneObjectBlocking() == REDIS_ERR) break;",
          "984:             }",
          "985:             if (zmalloc_used_memory() > server.vm_max_memory)",
          "987:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/redis.h||src/redis.h": [
          "File: src/redis.h -> src/redis.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "138: #define REDIS_MAX_COMPLETED_JOBS_PROCESSED 1",
          "",
          "[Removed Lines]",
          "130: #define REDIS_VM_MAX_NEAR_PAGES 65536",
          "131: #define REDIS_VM_MAX_RANDOM_JUMP 4096",
          "132: #define REDIS_VM_MAX_THREADS 32",
          "133: #define REDIS_THREAD_STACK_SIZE (1024*1024*4)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "271:     _var.type = REDIS_STRING; \\",
          "272:     _var.encoding = REDIS_ENCODING_RAW; \\",
          "273:     _var.ptr = _ptr; \\",
          "275: } while(0);",
          "277: typedef struct redisDb {",
          "",
          "[Removed Lines]",
          "274:     _var.storage = REDIS_VM_MEMORY; \\",
          "",
          "[Added Lines]",
          "263:     _var.storage = REDIS_DS_MEMORY; \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d934e1e85b1ec1c6d2cd07292cced53770f4a626",
      "candidate_info": {
        "commit_hash": "d934e1e85b1ec1c6d2cd07292cced53770f4a626",
        "repo": "antirez/redis",
        "commit_url": "https://github.com/antirez/redis/commit/d934e1e85b1ec1c6d2cd07292cced53770f4a626",
        "files": [
          "src/db.c",
          "src/dscache.c",
          "src/redis.c",
          "src/redis.h"
        ],
        "message": "negative caching implemented",
        "before_after_code_files": [
          "src/db.c||src/db.c",
          "src/dscache.c||src/dscache.c",
          "src/redis.c||src/redis.c",
          "src/redis.h||src/redis.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/redis.c||src/redis.c",
            "src/redis.h||src/redis.h"
          ],
          "candidate": [
            "src/redis.c||src/redis.c",
            "src/redis.h||src/redis.h"
          ]
        }
      },
      "candidate_diff": {
        "src/db.c||src/db.c": [
          "File: src/db.c -> src/db.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:         if (server.ds_enabled && cacheKeyMayExist(db,key)) {",
          "41:             val = dsGet(db,key,&expire);",
          "42:             if (val) {",
          "43:                 int retval = dbAdd(db,key,val);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:             redisLog(REDIS_DEBUG,\"Force loading key %s via lookup\",",
          "42:                 key->ptr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144: int dbDelete(redisDb *db, robj *key) {",
          "149:     if (server.ds_enabled) handleClientsBlockedOnSwappedKey(db,key);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "153:     cacheSetKeyDoesNotExistRemember(db,key);",
          "",
          "---------------"
        ],
        "src/dscache.c||src/dscache.c": [
          "File: src/dscache.c -> src/dscache.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "259:     return (server.bgsavechildpid == -1 && server.bgrewritechildpid == -1);",
          "260: }",
          "264: void freeIOJob(iojob *j) {",
          "265:     decrRefCount(j->key);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "304: int cacheKeyMayExist(redisDb *db, robj *key) {",
          "305:     return dictFind(db->io_negcache,key) == NULL;",
          "306: }",
          "308: void cacheSetKeyMayExist(redisDb *db, robj *key) {",
          "309:     dictDelete(db->io_negcache,key);",
          "310: }",
          "312: void cacheSetKeyDoesNotExist(redisDb *db, robj *key) {",
          "313:     struct dictEntry *de;",
          "317:     de = dictFind(db->io_negcache,key);",
          "318:     if (de != NULL && dictGetEntryVal(de) == NULL) return;",
          "320:     if (dictReplace(db->io_negcache,key,(void*)time(NULL))) {",
          "321:         incrRefCount(key);",
          "322:     }",
          "323: }",
          "325: void cacheSetKeyDoesNotExistRemember(redisDb *db, robj *key) {",
          "326:     if (dictReplace(db->io_negcache,key,NULL)) {",
          "327:         incrRefCount(key);",
          "328:     }",
          "329: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "310:             if (j->val != NULL) {",
          "315:                     incrRefCount(j->val);",
          "316:                     if (j->expire != -1) setExpire(j->db,j->key,j->expire);",
          "317:                 }",
          "318:             } else {",
          "322:             }",
          "324:             handleClientsBlockedOnSwappedKey(j->db,j->key);",
          "",
          "[Removed Lines]",
          "314:                 if (dbAdd(j->db,j->key,j->val) == REDIS_OK) {",
          "",
          "[Added Lines]",
          "386:                 if (cacheKeyMayExist(j->db,j->key) &&",
          "387:                     dbAdd(j->db,j->key,j->val) == REDIS_OK)",
          "388:                 {",
          "395:                 cacheSetKeyDoesNotExist(j->db,j->key);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "327:             if (j->val) {",
          "328:                 redisAssert(j->val->storage == REDIS_DS_SAVING);",
          "329:                 j->val->storage = REDIS_DS_MEMORY;",
          "330:             }",
          "331:             freeIOJob(j);",
          "332:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "404:                 cacheSetKeyMayExist(j->db,j->key);",
          "405:             } else {",
          "409:                 cacheSetKeyMayExist(j->db,j->key);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "585:     }",
          "586: }",
          "",
          "[Removed Lines]",
          "592: int cacheKeyMayExist(redisDb *db, robj *key) {",
          "594:     return 1;",
          "595: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "624:     de = dictFind(c->db->dict,key->ptr);",
          "625:     if (de != NULL) return 0;",
          "629:     listAddNodeTail(c->io_keys,key);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "699:     if (!cacheKeyMayExist(c->db,key)) return 0;",
          "",
          "---------------"
        ],
        "src/redis.c||src/redis.c": [
          "File: src/redis.c -> src/redis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "854:         server.db[j].expires = dictCreate(&keyptrDictType,NULL);",
          "855:         server.db[j].blocking_keys = dictCreate(&keylistDictType,NULL);",
          "856:         server.db[j].watched_keys = dictCreate(&keylistDictType,NULL);",
          "858:             server.db[j].io_keys = dictCreate(&keylistDictType,NULL);",
          "859:         server.db[j].id = j;",
          "860:     }",
          "861:     server.pubsub_channels = dictCreate(&keylistDictType,NULL);",
          "",
          "[Removed Lines]",
          "857:         if (server.ds_enabled)",
          "",
          "[Added Lines]",
          "857:         if (server.ds_enabled) {",
          "859:             server.db[j].io_negcache = dictCreate(&setDictType,NULL);",
          "860:         }",
          "",
          "---------------"
        ],
        "src/redis.h||src/redis.h": [
          "File: src/redis.h -> src/redis.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "809: void cacheScheduleForFlush(redisDb *db, robj *key);",
          "810: void cacheCron(void);",
          "811: int cacheKeyMayExist(redisDb *db, robj *key);",
          "814: robj *setTypeCreate(robj *value);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "813: void cacheSetKeyExists(redisDb *db, robj *key);",
          "814: void cacheSetKeyDoesNotExist(redisDb *db, robj *key);",
          "815: void cacheSetKeyDoesNotExistRemember(redisDb *db, robj *key);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1a71fb96697fc2af064fc221b21421ad6a8196fa",
      "candidate_info": {
        "commit_hash": "1a71fb96697fc2af064fc221b21421ad6a8196fa",
        "repo": "antirez/redis",
        "commit_url": "https://github.com/antirez/redis/commit/1a71fb96697fc2af064fc221b21421ad6a8196fa",
        "files": [
          "src/networking.c"
        ],
        "message": "vm_blocked_clients count fixed in INFO, thanks to Pietern Noordhuis",
        "before_after_code_files": [
          "src/networking.c||src/networking.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/networking.c||src/networking.c"
          ],
          "candidate": [
            "src/networking.c||src/networking.c"
          ]
        }
      },
      "candidate_diff": {
        "src/networking.c||src/networking.c": [
          "File: src/networking.c -> src/networking.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "235:     ln = listSearchKey(server.clients,c);",
          "236:     redisAssert(ln != NULL);",
          "237:     listDelNode(server.clients,ln);",
          "243:             listDelNode(server.io_ready_clients,ln);",
          "245:         }",
          "251:     }",
          "252:     listRelease(c->io_keys);",
          "",
          "[Removed Lines]",
          "240:     if (c->flags & REDIS_IO_WAIT && listLength(c->io_keys) == 0) {",
          "241:         ln = listSearchKey(server.io_ready_clients,c);",
          "242:         if (ln) {",
          "244:             server.vm_blocked_clients--;",
          "246:     }",
          "248:     while (server.vm_enabled && listLength(c->io_keys)) {",
          "249:         ln = listFirst(c->io_keys);",
          "250:         dontWaitForSwappedKey(c,ln->value);",
          "",
          "[Added Lines]",
          "240:     if (c->flags & REDIS_IO_WAIT) {",
          "241:         redisAssert(server.vm_enabled);",
          "242:         if (listLength(c->io_keys) == 0) {",
          "243:             ln = listSearchKey(server.io_ready_clients,c);",
          "247:             redisAssert(ln != NULL);",
          "249:         } else {",
          "250:             while (listLength(c->io_keys)) {",
          "251:                 ln = listFirst(c->io_keys);",
          "252:                 dontWaitForSwappedKey(c,ln->value);",
          "253:             }",
          "255:         server.vm_blocked_clients--;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4c2e506a393615477a85ee51d69c801d84c5bad2",
      "candidate_info": {
        "commit_hash": "4c2e506a393615477a85ee51d69c801d84c5bad2",
        "repo": "antirez/redis",
        "commit_url": "https://github.com/antirez/redis/commit/4c2e506a393615477a85ee51d69c801d84c5bad2",
        "files": [
          "src/networking.c"
        ],
        "message": "modified a bit addReply() to play better with copy on write now that we have a static buffer. Changed the name of a function from _ensureFileEvent() to _installWriteEvent().",
        "before_after_code_files": [
          "src/networking.c||src/networking.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/networking.c||src/networking.c"
          ],
          "candidate": [
            "src/networking.c||src/networking.c"
          ]
        }
      },
      "candidate_diff": {
        "src/networking.c||src/networking.c": [
          "File: src/networking.c -> src/networking.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:     return c;",
          "57: }",
          "60:     if (c->fd <= 0) return REDIS_ERR;",
          "61:     if (c->bufpos == 0 && listLength(c->reply) == 0 &&",
          "62:         (c->replstate == REDIS_REPL_NONE ||",
          "",
          "[Removed Lines]",
          "59: int _ensureFileEvent(redisClient *c) {",
          "",
          "[Added Lines]",
          "59: int _installWriteEvent(redisClient *c) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "160: }",
          "162: void addReply(redisClient *c, robj *obj) {",
          "167:     } else {",
          "169:         obj = getDecodedObject(obj);",
          "170:     }",
          "174: }",
          "176: void addReplySds(redisClient *c, sds s) {",
          "179:         sdsfree(s);",
          "180:         return;",
          "",
          "[Removed Lines]",
          "163:     if (_ensureFileEvent(c) != REDIS_OK) return;",
          "164:     if (server.vm_enabled && obj->storage != REDIS_VM_MEMORY) {",
          "166:         obj = dupStringObject(obj);",
          "171:     if (_addReplyToBuffer(c,obj->ptr,sdslen(obj->ptr)) != REDIS_OK)",
          "172:         _addReplyObjectToList(c,obj);",
          "173:     decrRefCount(obj);",
          "177:     if (_ensureFileEvent(c) != REDIS_OK) {",
          "",
          "[Added Lines]",
          "163:     if (_installWriteEvent(c) != REDIS_OK) return;",
          "164:     redisAssert(!server.vm_enabled || obj->storage == REDIS_VM_MEMORY);",
          "173:     if (obj->encoding == REDIS_ENCODING_RAW) {",
          "174:         if (_addReplyToBuffer(c,obj->ptr,sdslen(obj->ptr)) != REDIS_OK)",
          "175:             _addReplyObjectToList(c,obj);",
          "178:         if (_addReplyToBuffer(c,obj->ptr,sdslen(obj->ptr)) != REDIS_OK)",
          "179:             _addReplyObjectToList(c,obj);",
          "180:         decrRefCount(obj);",
          "185:     if (_installWriteEvent(c) != REDIS_OK) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "188: }",
          "190: void addReplyString(redisClient *c, char *s, size_t len) {",
          "192:     if (_addReplyToBuffer(c,s,len) != REDIS_OK)",
          "193:         _addReplyStringToList(c,s,len);",
          "194: }",
          "",
          "[Removed Lines]",
          "191:     if (_ensureFileEvent(c) != REDIS_OK) return;",
          "",
          "[Added Lines]",
          "199:     if (_installWriteEvent(c) != REDIS_OK) return;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "236: void *addDeferredMultiBulkLength(redisClient *c) {",
          "238:     listAddNodeTail(c->reply,createObject(REDIS_STRING,NULL));",
          "239:     return listLast(c->reply);",
          "240: }",
          "",
          "[Removed Lines]",
          "237:     if (_ensureFileEvent(c) != REDIS_OK) return NULL;",
          "",
          "[Added Lines]",
          "248:     if (_installWriteEvent(c) != REDIS_OK) return NULL;",
          "",
          "---------------"
        ]
      }
    }
  ]
}