{
  "cve_id": "CVE-2019-10664",
  "cve_desc": "Domoticz before 4.10578 allows SQL Injection via the idx parameter in CWebServer::GetFloorplanImage in WebServer.cpp.",
  "repo": "domoticz/domoticz",
  "patch_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
  "patch_info": {
    "commit_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/ee70db46f81afa582c96b887b73bcd2a86feda00",
    "files": [
      "main/WebServer.cpp"
    ],
    "message": "Fixed possible SQL Injection Vulnerability (Thanks to Fabio Carretto!)",
    "before_after_code_files": [
      "main/WebServer.cpp||main/WebServer.cpp"
    ]
  },
  "patch_diff": {
    "main/WebServer.cpp||main/WebServer.cpp": [
      "File: main/WebServer.cpp -> main/WebServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10772:     return;",
      "10773:    }",
      "10774:    std::vector<std::vector<std::string> > result;",
      "10776:    if (result.empty())",
      "10777:     return;",
      "10778:    reply::set_content(&rep, result[0][0].begin(), result[0][0].end());",
      "",
      "[Removed Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%s\", idx.c_str());",
      "",
      "[Added Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%d\", atol(idx.c_str()));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0df8bafafebe876329dc8a609de37c3720a97c57",
      "candidate_info": {
        "commit_hash": "0df8bafafebe876329dc8a609de37c3720a97c57",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/0df8bafafebe876329dc8a609de37c3720a97c57",
        "files": [
          "hardware/plugins/Plugins.cpp"
        ],
        "message": "Python LogException upgraded to handle Python returning a NULL filename during stack tracing.",
        "before_after_code_files": [
          "hardware/plugins/Plugins.cpp||hardware/plugins/Plugins.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/plugins/Plugins.cpp||hardware/plugins/Plugins.cpp": [
          "File: hardware/plugins/Plugins.cpp -> hardware/plugins/Plugins.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "747:    {",
          "748:     int lineno = PyFrame_GetLineNumber(frame);",
          "749:     PyCodeObject* pCode = frame->f_code;",
          "755:    }",
          "756:    pTraceback = pTraceback->tb_next;",
          "757:   }",
          "",
          "[Removed Lines]",
          "750:     PyBytesObject* pFileBytes = (PyBytesObject*)PyUnicode_AsASCIIString(pCode->co_filename);",
          "751:     PyBytesObject* pFuncBytes = (PyBytesObject*)PyUnicode_AsASCIIString(pCode->co_name);",
          "752:     _log.Log(LOG_ERROR, \"(%s) ----> Line %d in %s, function %s\", m_Name.c_str(), lineno, pFileBytes->ob_sval, pFuncBytes->ob_sval);",
          "753:     Py_XDECREF(pFileBytes);",
          "754:     Py_XDECREF(pFuncBytes);",
          "",
          "[Added Lines]",
          "750:     std::string  FileName = \"\";",
          "751:     if (pCode->co_filename)",
          "752:     {",
          "753:      PyBytesObject* pFileBytes = (PyBytesObject*)PyUnicode_AsASCIIString(pCode->co_filename);",
          "754:      FileName = pFileBytes->ob_sval;",
          "755:      Py_XDECREF(pFileBytes);",
          "756:     }",
          "757:     std::string  FuncName = \"Unknown\";",
          "758:     if (pCode->co_name)",
          "759:     {",
          "760:      PyBytesObject* pFuncBytes = (PyBytesObject*)PyUnicode_AsASCIIString(pCode->co_name);",
          "761:      FuncName = pFuncBytes->ob_sval;",
          "762:      Py_XDECREF(pFuncBytes);",
          "763:     }",
          "764:     if (FileName.length())",
          "765:      _log.Log(LOG_ERROR, \"(%s) ----> Line %d in '%'s, function %s\", m_Name.c_str(), lineno, FileName.c_str(), FuncName.c_str());",
          "766:     else",
          "767:      _log.Log(LOG_ERROR, \"(%s) ----> Line %d in '%s'\", m_Name.c_str(), lineno, FuncName.c_str());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "518838d3360efb93720d43cccc5d5a72913b522b",
      "candidate_info": {
        "commit_hash": "518838d3360efb93720d43cccc5d5a72913b522b",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/518838d3360efb93720d43cccc5d5a72913b522b",
        "files": [
          "main/mainworker.cpp"
        ],
        "message": "RFXCom: Supporting detection of Pro2, Pro XL1",
        "before_after_code_files": [
          "main/mainworker.cpp||main/mainworker.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/mainworker.cpp||main/mainworker.cpp": [
          "File: main/mainworker.cpp -> main/mainworker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2541:     WriteMessage(\"Firmware type     = \", false);",
          "2542:     switch (FWType)",
          "2543:     {",
          "2545:      strcpy(szTmp, \"Type1 RX\");",
          "2546:      break;",
          "2548:      strcpy(szTmp, \"Type1\");",
          "2549:      break;",
          "2551:      strcpy(szTmp, \"Type2\");",
          "2552:      break;",
          "2554:      strcpy(szTmp, \"Ext\");",
          "2555:      break;",
          "2557:      strcpy(szTmp, \"Ext2\");",
          "2558:      break;",
          "2560:      strcpy(szTmp, \"Pro1\");",
          "2561:      break;",
          "2562:     default:",
          "2563:      strcpy(szTmp, \"?\");",
          "2564:      break;",
          "",
          "[Removed Lines]",
          "2544:     case 0:",
          "2547:     case 1:",
          "2550:     case 2:",
          "2553:     case 3:",
          "2556:     case 4:",
          "2559:     case 5:",
          "",
          "[Added Lines]",
          "2544:     case FWtyperec:",
          "2547:     case FWtype1:",
          "2550:     case FWtype2:",
          "2553:     case FWtypeExt:",
          "2556:     case FWtypeExt2:",
          "2559:     case FWtypePro1:",
          "2562:     case FWtypePro2:",
          "2563:      strcpy(szTmp, \"Pro2\");",
          "2564:      break;",
          "2565:     case FWtypeProXL1:",
          "2566:      strcpy(szTmp, \"Pro XL1\");",
          "2567:      break;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b48a53c3e1335a1a11c055262781094392a47133",
      "candidate_info": {
        "commit_hash": "b48a53c3e1335a1a11c055262781094392a47133",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/b48a53c3e1335a1a11c055262781094392a47133",
        "files": [
          "hardware/plugins/PluginTransports.cpp"
        ],
        "message": "Bugfix: UDP Listener disconnection error",
        "before_after_code_files": [
          "hardware/plugins/PluginTransports.cpp||hardware/plugins/PluginTransports.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/plugins/PluginTransports.cpp||hardware/plugins/PluginTransports.cpp": [
          "File: hardware/plugins/PluginTransports.cpp -> hardware/plugins/PluginTransports.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:   CPlugin*  pPlugin = pConnection ? pConnection->pPlugin : NULL;",
          "33:   if (pPlugin && (pPlugin->m_bDebug & PDM_CONNECTION) && m_pConnection && (m_pConnection->ob_refcnt <= 1))",
          "34:   {",
          "36:   }",
          "37:   if (!m_bDisconnectQueued && m_pConnection && (m_pConnection->ob_refcnt <= 1) && pPlugin)",
          "38:   {",
          "",
          "[Removed Lines]",
          "35:    _log.Log(LOG_NORM, \"(%s) Connection released by Python, reference count is %d.\", pPlugin->m_Name.c_str(), (int)m_pConnection->ob_refcnt);",
          "",
          "[Added Lines]",
          "35:    std::string sTransport = PyUnicode_AsUTF8(pConnection->Transport);",
          "36:    std::string sAddress = PyUnicode_AsUTF8(pConnection->Address);",
          "37:    std::string sPort = PyUnicode_AsUTF8(pConnection->Port);",
          "38:    if ((sTransport == \"Serial\") || (!sPort.length()))",
          "39:     _log.Log(LOG_NORM, \"(%s) Connection '%s' released by Python, reference count is %d.\", pPlugin->m_Name.c_str(), sAddress.c_str(), (int)m_pConnection->ob_refcnt);",
          "40:    else",
          "41:     _log.Log(LOG_NORM, \"(%s) Connection '%s:%s' released by Python, reference count is %d.\", pPlugin->m_Name.c_str(), sAddress.c_str(), sPort.c_str(), (int)m_pConnection->ob_refcnt);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "289:   if (pPlugin->m_bDebug & PDM_CONNECTION)",
          "290:   {",
          "292:   }",
          "294:   m_tLastSeen = time(0);",
          "",
          "[Removed Lines]",
          "291:    _log.Log(LOG_NORM, \"(%s) Handling disconnect, socket (%s:%s) is %sconnected\", pPlugin->m_Name.c_str(), m_IP.c_str(), m_Port.c_str(), (m_bConnected?\"\":\"not \"));",
          "",
          "[Added Lines]",
          "297:    _log.Log(LOG_NORM, \"(%s) Handling TCP disconnect, socket (%s:%s) is %sconnected\", pPlugin->m_Name.c_str(), m_IP.c_str(), m_Port.c_str(), (m_bConnected?\"\":\"not \"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "511:   {",
          "512:    m_bConnected = false;",
          "515:    CPlugin* pPlugin = ((CConnection*)m_pConnection)->pPlugin;",
          "516:    pPlugin->MessagePlugin(new onConnectCallback(pPlugin, m_pConnection, -1, std::string(e.what())));",
          "517:    return false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "520:    _log.Log(LOG_ERROR, \"Plugin: UDP Listen Exception: '%s' connecting to '%s:%s'\", e.what(), m_IP.c_str(), m_Port.c_str());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "567:   }",
          "568:   else",
          "569:   {",
          "572:     _log.Log(LOG_NORM, \"(%s) Queued asyncronous UDP read aborted (%s:%s).\", pPlugin->m_Name.c_str(), m_IP.c_str(), m_Port.c_str());",
          "573:    else",
          "574:    {",
          "",
          "[Removed Lines]",
          "570:    if (pPlugin && (pPlugin->m_bDebug & PDM_CONNECTION) &&",
          "571:     ((ec == boost::asio::error::operation_aborted) || (ec == boost::asio::error::eof)))",
          "",
          "[Added Lines]",
          "576:    if (pPlugin && (pPlugin->m_bDebug & PDM_CONNECTION))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "628:   if (pPlugin->m_bDebug & PDM_CONNECTION)",
          "629:   {",
          "631:   }",
          "633:   m_tLastSeen = time(0);",
          "",
          "[Removed Lines]",
          "630:    _log.Log(LOG_NORM, \"(%s) Handling disconnect, socket (%s:%s) is %sconnected\", pPlugin->m_Name.c_str(), m_IP.c_str(), m_Port.c_str(), (m_bConnected ? \"\" : \"not \"));",
          "",
          "[Added Lines]",
          "635:    _log.Log(LOG_NORM, \"(%s) Handling UDP disconnect, socket (%s:%s) is %sconnected\", pPlugin->m_Name.c_str(), m_IP.c_str(), m_Port.c_str(), (m_bConnected ? \"\" : \"not \"));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "640:     m_Socket->shutdown(boost::asio::ip::udp::socket::shutdown_both, e);",
          "641:     if (e)",
          "642:     {",
          "644:      if (e.value() != boost::asio::error::not_connected)  // Linux always reports error 107, Windows does not",
          "646:       _log.Log(LOG_ERROR, \"(%s) Socket Shutdown Error: %d, %s\", pPlugin->m_Name.c_str(), e.value(), e.message().c_str());",
          "647:     }",
          "648:     else",
          "649:     {",
          "",
          "[Removed Lines]",
          "643: #ifndef WIN32",
          "645: #endif",
          "",
          "[Added Lines]",
          "650:      else",
          "651:       m_Socket->close();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "865:   if (pPlugin->m_bDebug & PDM_CONNECTION)",
          "866:   {",
          "868:   }",
          "870:   m_tLastSeen = time(0);",
          "",
          "[Removed Lines]",
          "867:    _log.Log(LOG_NORM, \"(%s) Handling disconnect, socket (%s) is %sconnected\", pPlugin->m_Name.c_str(), m_IP.c_str(), (m_bConnected ? \"\" : \"not \"));",
          "",
          "[Added Lines]",
          "872:    _log.Log(LOG_NORM, \"(%s) Handling ICMP disconnect, socket (%s) is %sconnected\", pPlugin->m_Name.c_str(), m_IP.c_str(), (m_bConnected ? \"\" : \"not \"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dbf724413fd2cc1f94deee59e4e861c0190cc7b7",
      "candidate_info": {
        "commit_hash": "dbf724413fd2cc1f94deee59e4e861c0190cc7b7",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/dbf724413fd2cc1f94deee59e4e861c0190cc7b7",
        "files": [
          "main/EventSystem.cpp",
          "main/Helper.cpp",
          "main/Helper.h",
          "main/SQLHelper.cpp",
          "main/SQLHelper.h",
          "main/WebServer.cpp",
          "main/WebServer.h",
          "webserver/cWebem.cpp",
          "www/app/FloorplanEditController.js",
          "www/eventsframe.html",
          "www/views/floorplanedit.html"
        ],
        "message": "Floorplans now stored in database (#2400)\n\n* Floorplans now stored in database\n* Blockly, slightly better 'Show Current Values' notation for a humidity sensor",
        "before_after_code_files": [
          "main/EventSystem.cpp||main/EventSystem.cpp",
          "main/Helper.cpp||main/Helper.cpp",
          "main/Helper.h||main/Helper.h",
          "main/SQLHelper.cpp||main/SQLHelper.cpp",
          "main/SQLHelper.h||main/SQLHelper.h",
          "main/WebServer.cpp||main/WebServer.cpp",
          "main/WebServer.h||main/WebServer.h",
          "webserver/cWebem.cpp||webserver/cWebem.cpp",
          "www/app/FloorplanEditController.js||www/app/FloorplanEditController.js",
          "www/eventsframe.html||www/eventsframe.html",
          "www/views/floorplanedit.html||www/views/floorplanedit.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "main/WebServer.cpp||main/WebServer.cpp"
          ],
          "candidate": [
            "main/WebServer.cpp||main/WebServer.cpp"
          ]
        }
      },
      "candidate_diff": {
        "main/EventSystem.cpp||main/EventSystem.cpp": [
          "File: main/EventSystem.cpp -> main/EventSystem.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "3966:  {",
          "3967:   lstatus = sValue;",
          "3968:  }",
          "3969:  else if (switchtype == STYPE_Selector)",
          "3970:  {",
          "3971:   std::map<std::string, std::string> statuses;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3969:  else if (dType == pTypeHUM)",
          "3970:  {",
          "3971:   std::stringstream sstr; sstr << nValue;",
          "3972:   lstatus = sstr.str();",
          "3973:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4647:      root[\"result\"][ii][\"id\"] = itt->ID;",
          "4648:      root[\"result\"][ii][\"name\"] = itt->deviceName;",
          "4649:      root[\"result\"][ii][\"value\"] = itt->nValueWording;",
          "4651:      root[\"result\"][ii][\"lastupdate\"] = itt->lastUpdate;",
          "4652:      ii++;",
          "4653:     }",
          "",
          "[Removed Lines]",
          "4650:      root[\"result\"][ii][\"svalues\"] = itt->sValue;",
          "",
          "[Added Lines]",
          "4655:      std::stringstream sstr;",
          "4656:      sstr << itt->nValue;",
          "4657:      if (!itt->sValue.empty())",
          "4658:       sstr << \"/\" << itt->sValue;",
          "4659:      root[\"result\"][ii][\"values\"] = sstr.str();",
          "",
          "---------------"
        ],
        "main/Helper.cpp||main/Helper.cpp": [
          "File: main/Helper.cpp -> main/Helper.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:   inoutstring[i] = toupper(inoutstring[i]);",
          "86: }",
          "88: std::vector<std::string> GetSerialPorts(bool &bUseDirectPath)",
          "89: {",
          "90:  bUseDirectPath=false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88: void stdlower(std::string &inoutstring)",
          "89: {",
          "90:  std::transform(inoutstring.begin(), inoutstring.end(), inoutstring.begin(), ::tolower);",
          "91: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1062:  return (rand() / (RAND_MAX / range));",
          "1063: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1071: int GetDirFilesRecursive(const std::string &DirPath, std::map<std::string, int> &_Files)",
          "1072: {",
          "1073:  DIR* dir;",
          "1074:  struct dirent *ent;",
          "1075:  if ((dir = opendir(DirPath.c_str())) != NULL)",
          "1076:  {",
          "1077:   while ((ent = readdir(dir)) != NULL)",
          "1078:   {",
          "1079:    if (dirent_is_directory(DirPath, ent))",
          "1080:    {",
          "1081:     if ((strcmp(ent->d_name, \".\") != 0) && (strcmp(ent->d_name, \"..\") != 0) && (strcmp(ent->d_name, \".svn\") != 0))",
          "1082:     {",
          "1083:      std::string nextdir = DirPath + ent->d_name + \"/\";",
          "1084:      if (GetDirFilesRecursive(nextdir.c_str(), _Files))",
          "1085:      {",
          "1086:       closedir(dir);",
          "1087:       return 1;",
          "1088:      }",
          "1089:     }",
          "1090:    }",
          "1091:    else",
          "1092:    {",
          "1093:     std::string fname = DirPath + ent->d_name;",
          "1094:     _Files[fname] = 1;",
          "1095:    }",
          "1096:   }",
          "1097:  }",
          "1098:  closedir(dir);",
          "1099:  return 0;",
          "1100: }",
          "",
          "---------------"
        ],
        "main/Helper.h||main/Helper.h": [
          "File: main/Helper.h -> main/Helper.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:  const std::string& replaceWhat,",
          "17:  const std::string& replaceWithWhat);",
          "18: void stdupper(std::string &inoutstring);",
          "19: bool file_exist (const char *filename);",
          "20: std::vector<std::string> GetSerialPorts(bool &bUseDirectPath);",
          "21: double CalculateAltitudeFromPressure(double pressure);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: void stdlower(std::string &inoutstring);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74: bool IsArgumentSecure(const std::string &arg);",
          "75: uint32_t SystemUptime();",
          "76: int GenerateRandomNumber(const int range);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78: int GetDirFilesRecursive(const std::string &DirPath, std::map<std::string, int> &_Files);",
          "",
          "---------------"
        ],
        "main/SQLHelper.cpp||main/SQLHelper.cpp": [
          "File: main/SQLHelper.cpp -> main/SQLHelper.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #define __STDC_FORMAT_MACROS",
          "36: #include <inttypes.h>",
          "40: extern http::server::CWebServerHelper m_webservers;",
          "41: extern std::string szWWWFolder;",
          "",
          "[Removed Lines]",
          "38: #define DB_VERSION 128",
          "",
          "[Added Lines]",
          "38: #define DB_VERSION 129",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "565: \"CREATE TABLE IF NOT EXISTS [Floorplans] (\"",
          "566: \"[ID] INTEGER PRIMARY KEY, \"",
          "567: \"[Name] VARCHAR(200) NOT NULL, \"",
          "569: \"[ScaleFactor] FLOAT DEFAULT 1.0, \"",
          "570: \"[Order] INTEGER BIGINT(10) default 0);\";",
          "",
          "[Removed Lines]",
          "568: \"[ImageFile] VARCHAR(100) NOT NULL, \"",
          "",
          "[Added Lines]",
          "568: \"[Image] BLOB, \"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2534:    std::remove(std::string(szWWWFolder + \"/js/domoticzblocks.js.gz\").c_str());",
          "2535:    std::remove(std::string(szWWWFolder + \"/js/domoticzblocks_messages_en.js.gz\").c_str());",
          "2536:   }",
          "2537:  }",
          "2538:  else if (bNewInstall)",
          "2539:  {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2537:   if (dbversion < 129)",
          "2538:   {",
          "2540:    if (!DoesColumnExistsInTable(\"Image\", \"Floorplans\"))",
          "2541:    {",
          "2542:     query(\"ALTER TABLE Floorplans ADD COLUMN [Image] BLOB\");",
          "2543:    }",
          "2547:    std::map<std::string, int> _FloorplanFiles;",
          "2548:    GetDirFilesRecursive(szWWWFolder + \"/images/floorplans/\", _FloorplanFiles);",
          "2550:    std::map<std::string, int>::const_iterator itt;",
          "2551:    for (itt = _FloorplanFiles.begin(); itt != _FloorplanFiles.end(); ++itt)",
          "2552:    {",
          "2553:     std::string tname(itt->first);",
          "2554:     stdlower(tname);",
          "2556:     if (",
          "2557:      (tname.find(\".jpg\")==std::string::npos)",
          "2558:      &&(tname.find(\".jpeg\") == std::string::npos)",
          "2559:      &&(tname.find(\".png\") == std::string::npos)",
          "2560:      &&(tname.find(\".bmp\") == std::string::npos)",
          "2561:      )",
          "2562:      continue; //not an image file",
          "2564:     std::string sname = itt->first.substr(szWWWFolder.size()+1);",
          "2566:     std::stringstream szQuery2;",
          "2567:     std::vector<std::vector<std::string> > result;",
          "2568:     result = safe_query(\"SELECT ID FROM Floorplans WHERE (ImageFile == '%s') COLLATE NOCASE\",sname.c_str());",
          "2569:     if (result.empty())",
          "2570:     {",
          "2572:      std::string vname = sname.substr(strlen(\"images/floorplans/\"));",
          "2573:      size_t tpos = vname.rfind('.');",
          "2574:      if (tpos != std::string::npos)",
          "2575:      {",
          "2576:       vname = vname.substr(0, tpos);",
          "2577:      }",
          "2578:      safe_query(\"INSERT INTO Floorplans ([Name],[ImageFile]) VALUES('%s','%s')\", vname.c_str(), sname.c_str());",
          "2579:      result = safe_query(\"SELECT ID FROM Floorplans WHERE (ImageFile == '%s')\", sname.c_str());",
          "2580:     }",
          "2581:     if (result.size() > 0)",
          "2582:     {",
          "2583:      std::string sID = result[0][0];",
          "2584:      std::ifstream is(itt->first.c_str(), std::ios::in | std::ios::binary);",
          "2585:      if (is)",
          "2586:      {",
          "2587:       std::string cfile;",
          "2588:       cfile.append((std::istreambuf_iterator<char>(is)),",
          "2589:       (std::istreambuf_iterator<char>()));",
          "2590:       is.close();",
          "2592:       if (safe_UpdateBlobInTableWithID(\"Floorplans\", \"Image\", sID, cfile))",
          "2593:        std::remove(itt->first.c_str());",
          "2594:       else",
          "2595:        _log.Log(LOG_ERROR, \"SQL: Problem converting floorplan image into database! \");",
          "2596:      }",
          "2597:     }",
          "2598:    }",
          "2600:    query(\"ALTER TABLE Floorplans RENAME TO tmp_Floorplans;\");",
          "2601:    query(\"CREATE TABLE[Floorplans]([ID] INTEGER PRIMARY KEY, [Name] VARCHAR(200) NOT NULL, [Image] BLOB, [Order] INTEGER BIGINT(10) default 0, [ScaleFactor] Float default 1.0);\");",
          "2603:    query(",
          "2604:     \"INSERT INTO Floorplans ([ID],[Name],[Image],[Order],[ScaleFactor]) \"",
          "2605:     \"SELECT [ID],[Name],[Image],[Order],[ScaleFactor] \"",
          "2606:     \"FROM tmp_Floorplans\");",
          "2608:    query(\"DROP TABLE tmp_Floorplans;\");",
          "2609:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3373:  sqlite3_free(zQuery);",
          "3374: }",
          "3376: std::vector<std::vector<std::string> > CSQLHelper::safe_query(const char *fmt, ...)",
          "3377: {",
          "3378:  va_list args;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3449: bool CSQLHelper::safe_UpdateBlobInTableWithID(const std::string &Table, const std::string &Column, const std::string &sID, const std::string &BlobData)",
          "3450: {",
          "3451:  if (!m_dbase)",
          "3452:   return false;",
          "3453:  sqlite3_stmt *stmt = NULL;",
          "3454:  char *zQuery = sqlite3_mprintf(\"UPDATE %q SET %q = ? WHERE ID=%q\", Table.c_str(), Column.c_str(), sID.c_str());",
          "3455:  if (!zQuery)",
          "3456:  {",
          "3457:   _log.Log(LOG_ERROR, \"SQL: Out of memory, or invalid printf!....\");",
          "3458:   return false;",
          "3459:  }",
          "3460:  int rc = sqlite3_prepare_v2(m_dbase, zQuery, -1, &stmt, NULL);",
          "3461:  sqlite3_free(zQuery);",
          "3462:  if (rc != SQLITE_OK) {",
          "3463:   return false;",
          "3464:  }",
          "3465:  rc = sqlite3_bind_blob(stmt, 1, BlobData.c_str(), BlobData.size(), SQLITE_STATIC);",
          "3466:  if (rc != SQLITE_OK) {",
          "3467:   return false;",
          "3468:  }",
          "3469:  rc = sqlite3_step(stmt);",
          "3470:  if (rc != SQLITE_DONE)",
          "3471:  {",
          "3472:   return false;",
          "3473:  }",
          "3474:  sqlite3_finalize(stmt);",
          "3475:  return true;",
          "3476: }",
          "",
          "---------------"
        ],
        "main/SQLHelper.h||main/SQLHelper.h": [
          "File: main/SQLHelper.h -> main/SQLHelper.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "367:  std::vector<std::vector<std::string> > safe_query(const char *fmt, ...);",
          "368:  std::vector<std::vector<std::string> > safe_queryBlob(const char *fmt, ...);",
          "369:  void safe_exec_no_return(const char *fmt, ...);",
          "370:  bool DoesColumnExistsInTable(const std::string &columnname, const std::string &tablename);",
          "371:  std::string DeleteUserVariable(const std::string &idx);",
          "372:  std::string SaveUserVariable(const std::string &varname, const std::string &vartype, const std::string &varvalue);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "370:  bool safe_UpdateBlobInTableWithID(const std::string &Table, const std::string &Column, const std::string &sID, const std::string &BlobData);",
          "",
          "---------------"
        ],
        "main/WebServer.cpp||main/WebServer.cpp": [
          "File: main/WebServer.cpp -> main/WebServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "356:    m_pWebEm->RegisterPageCode(\"/camsnapshot.jpg\", boost::bind(&CWebServer::GetCameraSnapshot, this, _1, _2, _3));",
          "357:    m_pWebEm->RegisterPageCode(\"/backupdatabase.php\", boost::bind(&CWebServer::GetDatabaseBackup, this, _1, _2, _3));",
          "358:    m_pWebEm->RegisterPageCode(\"/raspberry.cgi\", boost::bind(&CWebServer::GetInternalCameraSnapshot, this, _1, _2, _3));",
          "361:    m_pWebEm->RegisterActionCode(\"storesettings\", boost::bind(&CWebServer::PostSettings, this, _1, _2, _3));",
          "362:    m_pWebEm->RegisterActionCode(\"setrfxcommode\", boost::bind(&CWebServer::SetRFXCOMMode, this, _1, _2, _3));",
          "",
          "[Removed Lines]",
          "359:    m_pWebEm->RegisterPageCode(\"/uvccapture.cgi\", boost::bind(&CWebServer::GetInternalCameraSnapshot, this, _1, _2, _3)); //TODO: fix me double",
          "",
          "[Added Lines]",
          "359:    m_pWebEm->RegisterPageCode(\"/uvccapture.cgi\", boost::bind(&CWebServer::GetInternalCameraSnapshot, this, _1, _2, _3));",
          "360:    m_pWebEm->RegisterPageCode(\"/images/floorplans/plan\", boost::bind(&CWebServer::GetFloorplanImage, this, _1, _2, _3));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "366:    m_pWebEm->RegisterActionCode(\"sets0metertype\", boost::bind(&CWebServer::SetS0MeterType, this, _1, _2, _3));",
          "367:    m_pWebEm->RegisterActionCode(\"setlimitlesstype\", boost::bind(&CWebServer::SetLimitlessType, this, _1, _2, _3));",
          "369:    m_pWebEm->RegisterActionCode(\"setopenthermsettings\", boost::bind(&CWebServer::SetOpenThermSettings, this, _1, _2, _3));",
          "370:    RegisterCommandCode(\"sendopenthermcommand\", boost::bind(&CWebServer::Cmd_SendOpenThermCommand, this, _1, _2, _3), true);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "370:    m_pWebEm->RegisterActionCode(\"uploadfloorplanimage\", boost::bind(&CWebServer::UploadFloorplanImage, this, _1, _2, _3));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "744:    }",
          "745:   }",
          "778:   void CWebServer::GetAppCache(WebEmSession & session, const request& req, reply & rep)",
          "779:   {",
          "780:    std::string response = \"\";",
          "",
          "[Removed Lines]",
          "747:   int GetDirFilesRecursive(const std::string &DirPath, std::map<std::string, int> &_Files)",
          "748:   {",
          "749:    DIR* dir;",
          "750:    struct dirent *ent;",
          "751:    if ((dir = opendir(DirPath.c_str())) != NULL)",
          "752:    {",
          "753:     while ((ent = readdir(dir)) != NULL)",
          "754:     {",
          "755:      if (dirent_is_directory(DirPath, ent))",
          "756:      {",
          "757:       if ((strcmp(ent->d_name, \".\") != 0) && (strcmp(ent->d_name, \"..\") != 0) && (strcmp(ent->d_name, \".svn\") != 0))",
          "758:       {",
          "759:        std::string nextdir = DirPath + ent->d_name + \"/\";",
          "760:        if (GetDirFilesRecursive(nextdir.c_str(), _Files))",
          "761:        {",
          "762:         closedir(dir);",
          "763:         return 1;",
          "764:        }",
          "765:       }",
          "766:      }",
          "767:      else",
          "768:      {",
          "769:       std::string fname = DirPath + CURLEncode::URLEncode(ent->d_name);",
          "770:       _Files[fname] = 1;",
          "771:      }",
          "772:     }",
          "773:    }",
          "774:    closedir(dir);",
          "775:    return 0;",
          "776:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "794:    std::map<std::string, int> _ThemeFiles;",
          "795:    GetDirFilesRecursive(szWWWFolder + \"/styles/\" + sWebTheme + \"/\", _ThemeFiles);",
          "798:    std::map<std::string, int> _FloorplanFiles;",
          "801:    std::ifstream is(filename.c_str());",
          "802:    if (is)",
          "",
          "[Removed Lines]",
          "799:    GetDirFilesRecursive(szWWWFolder + \"/images/floorplans/\", _FloorplanFiles);",
          "",
          "[Added Lines]",
          "772:    std::vector<std::vector<std::string> > result;",
          "773:    result = m_sql.safe_query(\"SELECT ID FROM Floorplans ORDER BY [Order]\");",
          "774:    if (result.size() > 0)",
          "775:    {",
          "776:     std::vector<std::vector<std::string> >::const_iterator itt;",
          "777:     for (itt = result.begin(); itt != result.end(); ++itt)",
          "778:     {",
          "779:      std::vector<std::string> sd = *itt;",
          "780:      std::string ImageURL = \"images/floorplans/plan?idx=\" + sd[0];",
          "781:      _FloorplanFiles[ImageURL] = 1;",
          "782:     }",
          "783:    }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "817:        std::map<std::string, int>::const_iterator itt;",
          "818:        for (itt = _ThemeFiles.begin(); itt != _ThemeFiles.end(); ++itt)",
          "819:        {",
          "821:         stdreplace(tfname, \"styles/\" + sWebTheme, \"acttheme\");",
          "822:         response += tfname + \"\\n\";",
          "823:        }",
          "",
          "[Removed Lines]",
          "820:         std::string tfname = (itt->first).substr(szWWWFolder.size() + 1);",
          "",
          "[Added Lines]",
          "804:         std::string tfname = itt->first.substr(szWWWFolder.size() + 1);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "829:        std::map<std::string, int>::const_iterator itt;",
          "830:        for (itt = _FloorplanFiles.begin(); itt != _FloorplanFiles.end(); ++itt)",
          "831:        {",
          "833:         response += tfname + \"\\n\";",
          "834:        }",
          "835:        continue;",
          "",
          "[Removed Lines]",
          "832:         std::string tfname = (itt->first).substr(szWWWFolder.size() + 1);",
          "",
          "[Added Lines]",
          "816:         std::string tfname = itt->first;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3299:    }",
          "3301:    std::vector<std::vector<std::string> > result;",
          "3303:    char szTmp[300];",
          "3305:    bool bHaveUser = (session.username != \"\");",
          "",
          "[Removed Lines]",
          "3302:    std::vector<std::vector<std::string> > result2;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3548:     root[\"status\"] = \"OK\";",
          "3549:     root[\"title\"] = \"GetSubDevices\";",
          "3551:     result = m_sql.safe_query(\"SELECT a.ID, b.Name FROM LightSubDevices a, DeviceStatus b WHERE (a.ParentID=='%q') AND (b.ID == a.DeviceRowID)\",",
          "3552:      idx.c_str());",
          "3553:     if (result.size() > 0)",
          "",
          "[Removed Lines]",
          "3550:     std::vector<std::vector<std::string> > result;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3578:     root[\"status\"] = \"OK\";",
          "3579:     root[\"title\"] = \"GetSceneDevices\";",
          "3582:     result = m_sql.safe_query(\"SELECT a.ID, b.Name, a.DeviceRowID, b.Type, b.SubType, b.nValue, b.sValue, a.Cmd, a.Level, b.ID, a.[Order], a.Color, a.OnDelay, a.OffDelay, b.SwitchType FROM SceneDevices a, DeviceStatus b WHERE (a.SceneRowID=='%q') AND (b.ID == a.DeviceRowID) ORDER BY a.[Order]\",",
          "3583:      idx.c_str());",
          "3584:     if (result.size() > 0)",
          "",
          "[Removed Lines]",
          "3581:     std::vector<std::vector<std::string> > result;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3646:     std::string aScene, aOrder, oID, oOrder;",
          "3650:     result = m_sql.safe_query(\"SELECT SceneRowID, [Order] FROM SceneDevices WHERE (ID=='%q')\",",
          "3651:      idx.c_str());",
          "3652:     if (result.size() < 1)",
          "",
          "[Removed Lines]",
          "3649:     std::vector<std::vector<std::string> > result;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3804:    {",
          "3805:     root[\"status\"] = \"OK\";",
          "3806:     root[\"title\"] = \"GetLightSwitches\";",
          "3808:     result = m_sql.safe_query(\"SELECT ID, Name, Type, SubType, Used, SwitchType, Options FROM DeviceStatus ORDER BY Name\");",
          "3809:     if (result.size() > 0)",
          "3810:     {",
          "",
          "[Removed Lines]",
          "3807:     std::vector<std::vector<std::string> > result;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3932:    {",
          "3933:     root[\"status\"] = \"OK\";",
          "3934:     root[\"title\"] = \"GetLightSwitchesScenes\";",
          "3936:     int ii = 0;",
          "",
          "[Removed Lines]",
          "3935:     std::vector<std::vector<std::string> > result;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4020:      return;",
          "4021:     root[\"status\"] = \"OK\";",
          "4022:     root[\"title\"] = \"GetCameraActiveDevices\";",
          "4025:     result = m_sql.safe_query(\"SELECT ID, DevSceneType, DevSceneRowID, DevSceneWhen, DevSceneDelay FROM CamerasActiveDevices WHERE (CameraRowID=='%q') ORDER BY ID\",",
          "4026:      idx.c_str());",
          "",
          "[Removed Lines]",
          "4023:     std::vector<std::vector<std::string> > result;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "4760: #ifdef ENABLE_PYTHON",
          "4762:     {",
          "4764:      result = m_sql.safe_query(\"SELECT Type FROM Hardware WHERE (ID == '%q')\", hwdid.c_str());",
          "4765:      if (result.size() > 0)",
          "4766:      {",
          "",
          "[Removed Lines]",
          "4763:      std::vector<std::vector<std::string> > result;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "5112:       subtype = sTypeSmartwares;",
          "5116:       result = m_sql.safe_query(",
          "5117:        \"SELECT Name FROM DeviceStatus WHERE (HardwareID=='%q' AND DeviceID=='%q' AND Unit=='%q' AND Type==%d AND SubType==%d)\",",
          "5118:        hwdid.c_str(), devid.c_str(), sunitcode.c_str(), dtype, subtype);",
          "",
          "[Removed Lines]",
          "5115:       std::vector<std::vector<std::string> > result;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "5291:     }",
          "5295:     result = m_sql.safe_query(",
          "5296:      \"SELECT Name FROM DeviceStatus WHERE (HardwareID=='%q' AND DeviceID=='%q' AND Unit=='%q' AND Type==%d AND SubType==%d)\",",
          "5297:      hwdid.c_str(), devid.c_str(), sunitcode.c_str(), dtype, subtype);",
          "",
          "[Removed Lines]",
          "5294:     std::vector<std::vector<std::string> > result;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "5426:      if (switchtype == STYPE_Media)",
          "5427:      {",
          "5428:       std::string idx = request::findValue(&req, \"idx\");",
          "5431:       result = m_sql.safe_query(\"SELECT HardwareID FROM DeviceStatus WHERE (ID=='%q')\", idx.c_str());",
          "5432:       if (!result.empty())",
          "",
          "[Removed Lines]",
          "5429:       std::vector<std::vector<std::string> > result;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "6218:     std::string sHashedUsername = base64_encode((const unsigned char*)username.c_str(), username.size()).c_str();",
          "6222:     std::string sOldUsername;",
          "6223:     std::string sOldPassword;",
          "6224:     result = m_sql.safe_query(\"SELECT Username, Password FROM Users WHERE (ID == '%q')\", idx.c_str());",
          "",
          "[Removed Lines]",
          "6221:     std::vector<std::vector<std::string> > result;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "6262:     root[\"title\"] = \"DeleteUser\";",
          "6266:     result = m_sql.safe_query(\"SELECT Username FROM Users WHERE (ID == '%q')\", idx.c_str());",
          "6267:     if (result.size() == 1)",
          "6268:     {",
          "",
          "[Removed Lines]",
          "6265:     std::vector<std::vector<std::string> > result;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "7193:     root[\"status\"] = \"OK\";",
          "7194:     root[\"title\"] = \"GetFloorplanImages\";",
          "7201:     {",
          "7203:      {",
          "7222:      }",
          "7224:     }",
          "7225:    }",
          "7254:    else if (cparam == \"updatefloorplan\")",
          "7255:    {",
          "7256:     if (session.rights < 2)",
          "",
          "[Removed Lines]",
          "7196:     DIR *lDir;",
          "7197:     struct dirent *ent;",
          "7198:     std::string imagesFolder = szWWWFolder + \"/images/floorplans\";",
          "7199:     int iFile = 0;",
          "7200:     if ((lDir = opendir(imagesFolder.c_str())) != NULL)",
          "7202:      while ((ent = readdir(lDir)) != NULL)",
          "7204:       std::string filename = ent->d_name;",
          "7206:       std::string temp_filename = filename;",
          "7207:       std::transform(temp_filename.begin(), temp_filename.end(), temp_filename.begin(), ::tolower);",
          "7209:       size_t pos = temp_filename.find(\".png\");",
          "7210:       if (pos == std::string::npos)",
          "7211:       {",
          "7212:        pos = temp_filename.find(\".jpg\");",
          "7213:        if (pos == std::string::npos)",
          "7214:        {",
          "7215:         pos = temp_filename.find(\".bmp\");",
          "7216:        }",
          "7217:       }",
          "7218:       if (pos != std::string::npos)",
          "7219:       {",
          "7220:        root[\"result\"][\"images\"][iFile++] = filename;",
          "7221:       }",
          "7223:      closedir(lDir);",
          "7226:    else if (cparam == \"addfloorplan\")",
          "7227:    {",
          "7228:     if (session.rights < 2)",
          "7229:     {",
          "7230:      session.reply_status = reply::forbidden;",
          "7231:      return; //Only admin user allowed",
          "7232:     }",
          "7234:     std::string name = request::findValue(&req, \"name\");",
          "7235:     std::string imagefile = request::findValue(&req, \"image\");",
          "7236:     std::string scalefactor = request::findValue(&req, \"scalefactor\");",
          "7237:     if (",
          "7238:      (name.empty()) ||",
          "7239:      (imagefile.empty()) ||",
          "7240:      (scalefactor.empty())",
          "7241:      )",
          "7242:      return;",
          "7244:     root[\"status\"] = \"OK\";",
          "7245:     root[\"title\"] = \"AddFloorplan\";",
          "7246:     m_sql.safe_query(",
          "7247:      \"INSERT INTO Floorplans (Name,ImageFile,ScaleFactor) VALUES ('%q','%q',%q)\",",
          "7248:      name.c_str(),",
          "7249:      imagefile.c_str(),",
          "7250:      scalefactor.c_str()",
          "7251:     );",
          "7252:     _log.Log(LOG_STATUS, \"(Floorplan) '%s' created with image file '%s', Scale Factor %s.\", name.c_str(), imagefile.c_str(), scalefactor.c_str());",
          "7253:    }",
          "",
          "[Added Lines]",
          "7167:     bool bReturnUnused = atoi(request::findValue(&req, \"unused\").c_str()) != 0;",
          "7169:     if (!bReturnUnused)",
          "7170:      result = m_sql.safe_query(\"SELECT ID, Name, ScaleFactor FROM Floorplans ORDER BY [Name]\");",
          "7171:     else",
          "7172:      result = m_sql.safe_query(\"SELECT ID, Name, ScaleFactor FROM Floorplans WHERE ID NOT IN(SELECT FloorplanID FROM Plans)\");",
          "7173:     if (result.size() > 0)",
          "7175:      std::vector<std::vector<std::string> >::const_iterator itt;",
          "7176:      int ii = 0;",
          "7177:      for (itt = result.begin(); itt != result.end(); ++itt)",
          "7179:       std::vector<std::string> sd = *itt;",
          "7181:       root[\"result\"][ii][\"idx\"] = sd[0];",
          "7182:       root[\"result\"][ii][\"name\"] = sd[1];",
          "7183:       root[\"result\"][ii][\"scalefactor\"] = sd[2];",
          "7184:       ii++;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "7263:     if (idx.empty())",
          "7264:      return;",
          "7265:     std::string name = request::findValue(&req, \"name\");",
          "7267:     std::string scalefactor = request::findValue(&req, \"scalefactor\");",
          "7268:     if (",
          "7271:      )",
          "7272:      return;",
          "",
          "[Removed Lines]",
          "7266:     std::string imagefile = request::findValue(&req, \"image\");",
          "7269:      (name.empty()) ||",
          "7270:      (imagefile.empty())",
          "",
          "[Added Lines]",
          "7202:      (name.empty())",
          "7203:      ||(scalefactor.empty())",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "7275:     root[\"title\"] = \"UpdateFloorplan\";",
          "7277:     m_sql.safe_query(",
          "7279:      name.c_str(),",
          "7281:      scalefactor.c_str(),",
          "7282:      idx.c_str()",
          "7283:     );",
          "7285:    }",
          "7286:    else if (cparam == \"deletefloorplan\")",
          "7287:    {",
          "",
          "[Removed Lines]",
          "7278:      \"UPDATE Floorplans SET Name='%q',ImageFile='%q', ScaleFactor='%q' WHERE (ID == '%q')\",",
          "7280:      imagefile.c_str(),",
          "7284:     _log.Log(LOG_STATUS, \"(Floorplan) '%s' updated with image file '%s', Scale Factor %s.\", name.c_str(), imagefile.c_str(), scalefactor.c_str());",
          "",
          "[Added Lines]",
          "7211:      \"UPDATE Floorplans SET Name='%q',ScaleFactor='%q' WHERE (ID == '%q')\",",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "7296:      return;",
          "7297:     root[\"status\"] = \"OK\";",
          "7298:     root[\"title\"] = \"DeleteFloorplan\";",
          "7314:    }",
          "7315:    else if (cparam == \"changefloorplanorder\")",
          "7316:    {",
          "",
          "[Removed Lines]",
          "7299:     m_sql.safe_query(",
          "7300:      \"UPDATE DeviceToPlansMap SET XOffset=0,YOffset=0 WHERE (PlanID IN (SELECT ID from Plans WHERE (FloorplanID == '%q')))\",",
          "7301:      idx.c_str()",
          "7302:     );",
          "7303:     _log.Log(LOG_STATUS, \"(Floorplan) Device coordinates reset for all plans on floorplan '%s'.\", idx.c_str());",
          "7304:     m_sql.safe_query(",
          "7305:      \"UPDATE Plans SET FloorplanID=0,Area='' WHERE (FloorplanID == '%q')\",",
          "7306:      idx.c_str()",
          "7307:     );",
          "7308:     _log.Log(LOG_STATUS, \"(Floorplan) Plans for floorplan '%s' reset.\", idx.c_str());",
          "7309:     m_sql.safe_query(",
          "7310:      \"DELETE FROM Floorplans WHERE (ID == '%q')\",",
          "7311:      idx.c_str()",
          "7312:     );",
          "7313:     _log.Log(LOG_STATUS, \"(Floorplan) Floorplan '%s' deleted.\", idx.c_str());",
          "",
          "[Added Lines]",
          "7230:     m_sql.safe_query(\"UPDATE DeviceToPlansMap SET XOffset=0,YOffset=0 WHERE (PlanID IN (SELECT ID from Plans WHERE (FloorplanID == '%q')))\", idx.c_str());",
          "7231:     m_sql.safe_query(\"UPDATE Plans SET FloorplanID=0,Area='' WHERE (FloorplanID == '%q')\", idx.c_str());",
          "7232:     m_sql.safe_query(\"DELETE FROM Floorplans WHERE (ID == '%q')\", idx.c_str());",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "7331:     std::string aOrder, oID, oOrder;",
          "7334:     result = m_sql.safe_query(\"SELECT [Order] FROM Floorplans WHERE (ID=='%q')\",",
          "7335:      idx.c_str());",
          "7336:     if (result.size() < 1)",
          "",
          "[Removed Lines]",
          "7333:     std::vector<std::vector<std::string> > result;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "7400:      return;",
          "7401:     root[\"status\"] = \"OK\";",
          "7402:     root[\"title\"] = \"GetFloorplanPlans\";",
          "7404:     int ii = 0;",
          "7405:     result = m_sql.safe_query(\"SELECT ID, Name, Area FROM Plans WHERE (FloorplanID=='%q') ORDER BY Name\",",
          "7406:      idx.c_str());",
          "",
          "[Removed Lines]",
          "7403:     std::vector<std::vector<std::string> > result;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "10838:    }",
          "10839:   }",
          "10841:   void CWebServer::GetDatabaseBackup(WebEmSession & session, const request& req, reply & rep)",
          "10842:   {",
          "10843:    if (session.rights != 2)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10758:   void CWebServer::UploadFloorplanImage(WebEmSession & session, const request& req, std::string & redirect_uri)",
          "10759:   {",
          "10760:    redirect_uri = \"/index.html\";",
          "10761:    if (session.rights != 2)",
          "10762:    {",
          "10763:     session.reply_status = reply::forbidden;",
          "10764:     return; //Only admin user allowed",
          "10765:    }",
          "10767:    std::string planname = request::findValue(&req, \"planname\");",
          "10768:    std::string scalefactor = request::findValue(&req, \"scalefactor\");",
          "10769:    std::string imagefile = request::findValue(&req, \"imagefile\");",
          "10771:    std::vector<std::vector<std::string> > result;",
          "10772:    m_sql.safe_query(\"INSERT INTO Floorplans ([Name],[ScaleFactor]) VALUES('%s','%s')\", planname.c_str(),scalefactor.c_str());",
          "10773:    result = m_sql.safe_query(\"SELECT MAX(ID) FROM Floorplans\");",
          "10774:    if (!result.empty())",
          "10775:    {",
          "10776:     if (!m_sql.safe_UpdateBlobInTableWithID(\"Floorplans\", \"Image\", result[0][0], imagefile))",
          "10777:      _log.Log(LOG_ERROR, \"SQL: Problem inserting floorplan image into database! \");",
          "10778:    }",
          "10779:   }",
          "10781:   void CWebServer::GetFloorplanImage(WebEmSession & session, const request& req, reply & rep)",
          "10782:   {",
          "10783:    std::string idx = request::findValue(&req, \"idx\");",
          "10784:    if (idx == \"\") {",
          "10785:     return;",
          "10786:    }",
          "10787:    std::vector<std::vector<std::string> > result;",
          "10788:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%s\", idx.c_str());",
          "10789:    if (result.empty())",
          "10790:     return;",
          "10791:    reply::set_content(&rep, result[0][0].begin(), result[0][0].end());",
          "10792:    std::string oname = \"floorplan\";",
          "10793:    if (result[0][0].size() > 10)",
          "10794:    {",
          "10795:     if (result[0][0][0] == 'P')",
          "10796:      oname += \".png\";",
          "10797:     else if (result[0][0][0] == -1)",
          "10798:      oname += \".jpg\";",
          "10799:     else if (result[0][0][0] == 'B')",
          "10800:      oname += \".bmp\";",
          "10801:    }",
          "10802:    reply::add_header_attachment(&rep, oname);",
          "10803:   }",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "11118:     }",
          "11119:    }",
          "11122:    if (result2.size() > 0)",
          "11123:    {",
          "11124:     std::vector<std::vector<std::string> >::const_iterator itt;",
          "",
          "[Removed Lines]",
          "11121:    result2 = m_sql.safe_query(\"SELECT ID, Name, ImageFile, ScaleFactor, [Order] FROM Floorplans ORDER BY [Order]\");",
          "",
          "[Added Lines]",
          "11085:    result2 = m_sql.safe_query(\"SELECT ID, Name, ScaleFactor, [Order] FROM Floorplans ORDER BY [Order]\");",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "11130:      root[\"result\"][ii][\"idx\"] = sd[0];",
          "11131:      root[\"result\"][ii][\"Name\"] = sd[1];",
          "11136:      unsigned int totPlans = 0;",
          "",
          "[Removed Lines]",
          "11132:      root[\"result\"][ii][\"Image\"] = sd[2];",
          "11133:      root[\"result\"][ii][\"ScaleFactor\"] = sd[3];",
          "11134:      root[\"result\"][ii][\"Order\"] = sd[4];",
          "",
          "[Added Lines]",
          "11096:      std::string ImageURL = \"images/floorplans/plan?idx=\" + sd[0];",
          "11097:      root[\"result\"][ii][\"Image\"] = ImageURL;",
          "11098:      root[\"result\"][ii][\"ScaleFactor\"] = sd[2];",
          "11099:      root[\"result\"][ii][\"Order\"] = sd[3];",
          "",
          "---------------"
        ],
        "main/WebServer.h||main/WebServer.h": [
          "File: main/WebServer.h -> main/WebServer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:  void GetAppCache(WebEmSession & session, const request& req, reply & rep);",
          "45:  void GetCameraSnapshot(WebEmSession & session, const request& req, reply & rep);",
          "46:  void GetInternalCameraSnapshot(WebEmSession & session, const request& req, reply & rep);",
          "47:  void GetDatabaseBackup(WebEmSession & session, const request& req, reply & rep);",
          "48:  void Post_UploadCustomIcon(WebEmSession & session, const request& req, reply & rep);",
          "50:  void PostSettings(WebEmSession & session, const request& req, std::string & redirect_uri);",
          "51:  void SetRFXCOMMode(WebEmSession & session, const request& req, std::string & redirect_uri);",
          "52:  void RFXComUpgradeFirmware(WebEmSession & session, const request& req, std::string & redirect_uri);",
          "53:  void SetRego6XXType(WebEmSession & session, const request& req, std::string & redirect_uri);",
          "54:  void SetS0MeterType(WebEmSession & session, const request& req, std::string & redirect_uri);",
          "55:  void SetLimitlessType(WebEmSession & session, const request& req, std::string & redirect_uri);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:  void GetFloorplanImage(WebEmSession & session, const request& req, reply & rep);",
          "54:  void UploadFloorplanImage(WebEmSession & session, const request& req, std::string & redirect_uri);",
          "",
          "---------------"
        ],
        "webserver/cWebem.cpp||webserver/cWebem.cpp": [
          "File: webserver/cWebem.cpp -> webserver/cWebem.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "365:       (szContentType.find(\"application/octet-stream\") != std::string::npos) ||",
          "366:       (szContentType.find(\"application/json\") != std::string::npos) ||",
          "367:       (szContentType.find(\"Content-Type: text/xml\") != std::string::npos) ||",
          "369:       )",
          "370:      {",
          "",
          "[Removed Lines]",
          "368:       (szContentType.find(\"Content-Type: text/x-hex\") != std::string::npos)",
          "",
          "[Added Lines]",
          "368:       (szContentType.find(\"Content-Type: text/x-hex\") != std::string::npos) ||",
          "369:       (szContentType.find(\"Content-Type: image/\") != std::string::npos)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "493:  request_path = ExtractRequestPath(request_path);",
          "495:  std::map < std::string, webem_page_function >::iterator",
          "496:   pfun = myPages.find(request_path);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "496:  int paramPos = request_path.find_first_of('?');",
          "497:  if (paramPos != std::string::npos)",
          "498:  {",
          "499:   request_path = request_path.substr(0, paramPos);",
          "500:  }",
          "",
          "---------------"
        ],
        "www/app/FloorplanEditController.js||www/app/FloorplanEditController.js": [
          "File: www/app/FloorplanEditController.js -> www/app/FloorplanEditController.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:   }",
          "15:   $scope.SVGContainerResize = function () {",
          "17:    if ((typeof $(\"#floorplaneditor\") != 'undefined') && (typeof $(\"#floorplanimagesize\") != 'undefined') && (typeof $(\"#floorplanimagesize\")[0] != 'undefined') && ($(\"#floorplanimagesize\")[0].naturalWidth != 'undefined')) {",
          "18:     $(\"#floorplaneditor\")[0].setAttribute('naturalWidth', $(\"#floorplanimagesize\")[0].naturalWidth);",
          "19:     $(\"#floorplaneditor\")[0].setAttribute('naturalHeight', $(\"#floorplanimagesize\")[0].naturalHeight);",
          "20:     $(\"#floorplaneditor\")[0].setAttribute('svgwidth', $(\"#svgcontainer\").width());",
          "21:     var ratio = $(\"#floorplanimagesize\")[0].naturalWidth / $(\"#floorplanimagesize\")[0].naturalHeight;",
          "22:     $(\"#floorplaneditor\")[0].setAttribute('ratio', ratio);",
          "24:     $(\"#floorplaneditor\").height(svgHeight);",
          "25:    }",
          "26:   }",
          "",
          "[Removed Lines]",
          "16:    var svgHeight;",
          "23:     svgHeight = $(\"#floorplaneditor\").width() / ratio;",
          "",
          "[Added Lines]",
          "22:     var svgHeight = $(\"#floorplaneditor\").width() / ratio;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:   }",
          "84:   SetButtonStates = function () {",
          "87:    $('#updelclr #floorplanedit').attr(\"class\", \"btnstyle3-dis\");",
          "88:    $('#updelclr #floorplandelete').attr(\"class\", \"btnstyle3-dis\");",
          "89:    $('#floorplaneditcontent #delclractive #activeplanadd').attr(\"class\", \"btnstyle3-dis\");",
          "",
          "[Removed Lines]",
          "86:    $('#updelclr #floorplanadd').attr(\"class\", \"btnstyle3-dis\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "108:       $('#floorplaneditcontent #delclractive #activeplanclear').attr(\"class\", \"btnstyle3\");",
          "109:      }",
          "110:     }",
          "113:    }",
          "114:   }",
          "",
          "[Removed Lines]",
          "111:    } else {",
          "112:     $('#updelclr #floorplanadd').attr(\"class\", \"btnstyle3\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "130:    });",
          "131:   }",
          "177:   AddNewFloorplan = function () {",
          "179:    $(\"#dialog-add-edit-floorplan #floorplanname\").val('');",
          "181:    $(\"#dialog-add-edit-floorplan #scalefactor\").val('1.0');",
          "182:    $(\"#dialog-add-edit-floorplan\").dialog({",
          "186:     modal: true,",
          "187:     title: 'Add New Floorplan',",
          "188:     buttons: {",
          "189:      \"Cancel\": function () {",
          "190:       $(this).dialog(\"close\");",
          "191:      },",
          "192:      \"Add\": function () {",
          "194:       if (typeof csettings == 'undefined') {",
          "195:        return;",
          "196:       }",
          "",
          "[Removed Lines]",
          "133:   LoadImageNames = function () {",
          "134:    var oTable = $('#imagetable').dataTable();",
          "136:    oTable.fnClearTable();",
          "138:    $.ajax({",
          "139:     url: \"json.htm?type=command&param=getfloorplanimages\",",
          "140:     async: false,",
          "141:     dataType: 'json',",
          "142:     success: function (data) {",
          "144:      if (typeof data.result != 'undefined') {",
          "145:       $.each(data.result, function (tag, images) {",
          "147:        for (var i = 0; i < images.length; i++) {",
          "148:         var addId = oTable.fnAddData({",
          "149:          \"DT_RowId\": i,",
          "150:          \"ImageName\": images[i],",
          "151:          \"0\": images[i]",
          "152:         });",
          "153:        }",
          "154:       });",
          "155:       $('#imagetable tbody').off();",
          "157:       $('#imagetable tbody').on('click', 'tr', function () {",
          "158:        if ($(this).hasClass('row_selected')) {",
          "159:         $(this).removeClass('row_selected');",
          "160:         $(\"#dialog-add-edit-floorplan #imagename\").val('');",
          "161:        }",
          "162:        else {",
          "163:         oTable.$('tr.row_selected').removeClass('row_selected');",
          "164:         $(this).addClass('row_selected');",
          "165:         var anSelected = fnGetSelected(oTable);",
          "166:         if (anSelected.length !== 0) {",
          "167:          var data = oTable.fnGetData(anSelected[0]);",
          "168:          $(\"#dialog-add-edit-floorplan #imagename\").val('images/floorplans/' + data[\"ImageName\"]);",
          "169:         }",
          "170:        }",
          "171:       });",
          "172:      }",
          "173:     }",
          "174:    });",
          "175:   }",
          "178:    LoadImageNames();",
          "180:    $(\"#dialog-add-edit-floorplan #imagename\").val('');",
          "183:     resizable: false,",
          "184:     width: 460,",
          "185:     height: 540,",
          "193:       var csettings = GetFloorplanSettings();",
          "",
          "[Added Lines]",
          "129:    DeselectFloorplan();",
          "132:    $(\"#dialog-add-edit-floorplan #imagefile\").val('');",
          "133:    $(\"#dialog-add-edit-floorplan #imagerow\").show();",
          "136:     width: '500',",
          "137:     height: 'auto',",
          "138:     resizable: false,",
          "145:       var csettings = GetFloorplanSettings(true);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "205:   }",
          "207:   EditFloorplan = function (idx) {",
          "209:    $(\"#dialog-add-edit-floorplan\").dialog({",
          "213:     modal: true,",
          "214:     title: 'Edit Floorplan',",
          "215:     buttons: {",
          "216:      \"Cancel\": function () {",
          "217:       $(this).dialog(\"close\");",
          "218:      },",
          "219:      \"Update\": function () {",
          "221:       if (typeof csettings == 'undefined') {",
          "222:        return;",
          "223:       }",
          "",
          "[Removed Lines]",
          "208:    LoadImageNames();",
          "210:     resizable: false,",
          "211:     width: 460,",
          "212:     height: 540,",
          "220:       var csettings = GetFloorplanSettings();",
          "",
          "[Added Lines]",
          "160:    $(\"#dialog-add-edit-floorplan #imagerow\").hide();",
          "163:     width: 'auto',",
          "164:     height: 'auto',",
          "165:     resizable: false,",
          "172:       var csettings = GetFloorplanSettings(false);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "250:    });",
          "251:   }",
          "254:    var csettings = {};",
          "256:    csettings.name = $(\"#dialog-add-edit-floorplan #floorplanname\").val();",
          "",
          "[Removed Lines]",
          "253:   GetFloorplanSettings = function () {",
          "",
          "[Added Lines]",
          "205:   GetFloorplanSettings = function (isNew) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "258:     ShowNotify('Please enter a Name!', 2500, true);",
          "259:     return;",
          "260:    }",
          "266:    csettings.scalefactor = $(\"#dialog-add-edit-floorplan #scalefactor\").val();",
          "267:    if (!$.isNumeric(csettings.scalefactor)) {",
          "268:     ShowNotify($.t('Icon Scale can only contain numbers...'), 2000, true);",
          "269:     return;",
          "270:    }",
          "271:    return csettings;",
          "272:   }",
          "276:    if (typeof csettings == 'undefined') {",
          "277:     return;",
          "278:    }",
          "286:     },",
          "289:     }",
          "290:    });",
          "291:   }",
          "295:    if (typeof csettings == 'undefined') {",
          "296:     return;",
          "297:    }",
          "299:    $.ajax({",
          "301:     async: false,",
          "302:     dataType: 'json',",
          "303:     success: function (data) {",
          "304:      RefreshFloorPlanTable();",
          "305:     },",
          "306:     error: function () {",
          "308:     }",
          "309:    });",
          "310:   }",
          "312:   RefreshFloorPlanTable = function () {",
          "313:    $('#modal').show();",
          "",
          "[Removed Lines]",
          "261:    csettings.image = $(\"#dialog-add-edit-floorplan #imagename\").val();",
          "262:    if (csettings.image == \"\") {",
          "263:     ShowNotify('Please enter an image filename!', 2500, true);",
          "264:     return;",
          "265:    }",
          "274:   UpdateFloorplan = function (idx) {",
          "275:    var csettings = GetFloorplanSettings();",
          "280:    $.ajax({",
          "281:     url: \"json.htm?type=command&param=updatefloorplan&idx=\" + idx + \"&name=\" + csettings.name + \"&image=\" + csettings.image + \"&scalefactor=\" + csettings.scalefactor,",
          "282:     async: false,",
          "283:     dataType: 'json',",
          "284:     success: function (data) {",
          "285:      RefreshFloorPlanTable();",
          "287:     error: function () {",
          "288:      ShowNotify('Problem updating Plan settings!', 2500, true);",
          "293:   AddFloorplan = function () {",
          "294:    var csettings = GetFloorplanSettings();",
          "300:     url: \"json.htm?type=command&param=addfloorplan&name=\" + csettings.name + \"&image=\" + csettings.image + \"&scalefactor=1.0\",",
          "307:      ShowNotify('Problem adding Floorplan!', 2500, true);",
          "",
          "[Added Lines]",
          "218:    if (isNew) {",
          "219:     if ($(\"#dialog-add-edit-floorplan #imagefile\").val() == '') {",
          "220:      ShowNotify('Please choose an image filename!', 2500, true);",
          "221:      return;",
          "222:     }",
          "223:    }",
          "227:   AddFloorplan = function () {",
          "228:    var csettings = GetFloorplanSettings(true);",
          "232:    $http({",
          "233:     method: 'POST',",
          "234:     url: 'uploadfloorplanimage.webem',",
          "235:     headers: {",
          "236:      'Content-Type': 'multipart/form-data'",
          "238:     data: {",
          "239:      planname: csettings.name,",
          "240:      scalefactor: csettings.scalefactor,",
          "241:      imagefile: $scope.file",
          "242:     },",
          "243:     transformRequest: function (data, headersGetter) {",
          "244:      var formData = new FormData();",
          "245:      angular.forEach(data, function (value, key) {",
          "246:       formData.append(key, value);",
          "247:      });",
          "249:      var headers = headersGetter();",
          "250:      delete headers['Content-Type'];",
          "251:      return formData;",
          "253:    }).then(function successCallback(response) {",
          "254:     RefreshFloorPlanTable();",
          "255:    }, function errorCallback(response) {",
          "256:     ShowNotify('Problem adding Floorplan!', 2500, true);",
          "260:   UpdateFloorplan = function (idx) {",
          "261:    var csettings = GetFloorplanSettings(false);",
          "267:     url: \"json.htm?type=command&param=updatefloorplan&idx=\" + idx + \"&name=\" + csettings.name + \"&scalefactor=\" + csettings.scalefactor,",
          "274:      ShowNotify('Problem updating Plan settings!', 2500, true);",
          "279:   DeselectFloorplan = function() {",
          "280:    $(\"#dialog-add-edit-floorplan #floorplanname\").val(\"\");",
          "281:    $(\"#dialog-add-edit-floorplan #scalefactor\").val(\"1.0\");",
          "282:    $(\"#floorplangroup\").attr(\"scalefactor\", \"1.0\");",
          "283:    RefreshPlanTable(-1);",
          "284:    $(\"#floorplanimage\").attr(\"xlink:href\", \"\");",
          "285:    $(\"#floorplanimagesize\").attr(\"src\", \"\");",
          "286:    if ((typeof $(\"#floorplaneditor\") != 'undefined') && (typeof $(\"#floorplanimagesize\") != 'undefined') && (typeof $(\"#floorplanimagesize\")[0] != 'undefined') && ($(\"#floorplanimagesize\")[0].naturalWidth != 'undefined')) {",
          "287:     $(\"#floorplaneditor\")[0].setAttribute('naturalWidth', 1);",
          "288:     $(\"#floorplaneditor\")[0].setAttribute('naturalHeight', 1);",
          "289:     $(\"#floorplaneditor\")[0].setAttribute('svgwidth', 1);",
          "290:     $(\"#floorplaneditor\").height(1);",
          "291:    }",
          "293:   }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "356:         updownImg += '<img src=\"images/up.png\" onclick=\"ChangeFloorplanOrder(0,' + item.idx + ');\" class=\"lcursor\" width=\"16\" height=\"16\"></img>';",
          "357:        }",
          "359:        var addId = oTable.fnAddData({",
          "360:         \"DT_RowId\": item.idx,",
          "361:         \"Name\": item.Name,",
          "362:         \"Image\": item.Image,",
          "363:         \"ScaleFactor\": item.ScaleFactor,",
          "364:         \"Order\": item.Order,",
          "369:        });",
          "370:       });",
          "",
          "[Removed Lines]",
          "365:         \"0\": item.Name,",
          "366:         \"1\": item.Image,",
          "367:         \"2\": item.ScaleFactor,",
          "368:         \"3\": updownImg",
          "",
          "[Added Lines]",
          "342:        var imgsrc = item.Image + \"&dtime=\" + Math.round(+new Date() / 1000);",
          "343:        var previewimg = '<img src=\"' + imgsrc + '\" height=\"40\"> ';",
          "351:         \"Plans\": item.Plans,",
          "352:         \"0\": previewimg,",
          "353:         \"1\": item.Name,",
          "354:         \"2\": (item.Plans>0)?item.Plans:\"-\",",
          "355:         \"3\": item.ScaleFactor,",
          "356:         \"4\": updownImg",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "403:         ConfirmNoUpdate(this, function (param) {",
          "404:          if ($(param).hasClass('row_selected')) {",
          "405:           $(param).removeClass('row_selected');",
          "413:          }",
          "414:          else {",
          "415:           oTable.$('tr.row_selected').removeClass('row_selected');",
          "",
          "[Removed Lines]",
          "406:           $(\"#dialog-add-edit-floorplan #floorplanname\").val(\"\");",
          "407:           $(\"#dialog-add-edit-floorplan #imagename\").val(\"\");",
          "408:           $(\"#dialog-add-edit-floorplan #scalefactor\").val(\"1.0\");",
          "409:           $(\"#floorplangroup\").attr(\"scalefactor\", \"1.0\");",
          "410:           RefreshPlanTable(-1);",
          "411:           $(\"#floorplanimage\").attr(\"xlink:href\", \"\");",
          "412:           $(\"#floorplanimagesize\").attr(\"src\", \"\");",
          "",
          "[Added Lines]",
          "394:           DeselectFloorplan();",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "422:            $(\"#updelclr #floorplanedit\").attr(\"href\", \"javascript:EditFloorplan(\" + idx + \")\");",
          "423:            $(\"#updelclr #floorplandelete\").attr(\"href\", \"javascript:DeleteFloorplan(\" + idx + \")\");",
          "424:            $(\"#dialog-add-edit-floorplan #floorplanname\").val(data[\"Name\"]);",
          "426:            $(\"#dialog-add-edit-floorplan #scalefactor\").val(data[\"ScaleFactor\"]);",
          "427:            $(\"#floorplangroup\").attr(\"scalefactor\", data[\"ScaleFactor\"]);",
          "428:            RefreshPlanTable(idx);",
          "",
          "[Removed Lines]",
          "425:            $(\"#dialog-add-edit-floorplan #imagename\").val(data[\"Image\"]);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "491:     \"bProcessing\": true,",
          "492:     \"bStateSave\": true,",
          "493:     \"bJQueryUI\": true,",
          "495:     \"iDisplayLength\": 5,",
          "496:     \"sPaginationType\": \"full_numbers\",",
          "497:     language: $.DataTableLanguage",
          "",
          "[Removed Lines]",
          "494:     \"aLengthMenu\": [[5, 10, 25, 100, -1], [5, 10, 25, 100, \"All\"]],",
          "",
          "[Added Lines]",
          "475:     \"aLengthMenu\": [[10, 25, 100, -1], [10, 25, 100, \"All\"]],",
          "",
          "---------------"
        ],
        "www/eventsframe.html||www/eventsframe.html": [
          "File: www/eventsframe.html -> www/eventsframe.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "952:         success: function(data) {",
          "953:        if (typeof data != 'undefined') {",
          "954:      if (data.status==\"OK\") {",
          "956:       if (typeof data.result != 'undefined') {",
          "958:        $.each(data.result, function(i,item){",
          "959:         if (item.name != \"Unknown\") {",
          "961:          devicestates += oneitem;",
          "962:         }",
          "963:        });",
          "",
          "[Removed Lines]",
          "955:       var devicestates = \"<div style='overflow:scroll; overflow-x: hidden; height: 400px;'><table><thead><tr><th align='left' style='padding-right: 80px;'>Idx</th><th align='left' style='padding-right: 80px;'>Name</th><th align='left' style='padding-right: 80px;'>Current state</th><th align='left' style='padding-right: 80px;'>Last updated</th><th align='left' style='padding-right: 10px;'>sValues</th></tr></thead><tbody>\";",
          "960:          var oneitem = '<tr><td> '+item.id+' </td><td> '+item.name+' </td><td> '+item.value +' </td><td> '+item.lastupdate+' </td><td> '+item.svalues+'</td></tr>';",
          "",
          "[Added Lines]",
          "955:       var devicestates = \"<div style='overflow:scroll; overflow-x: hidden; height: 400px;'><table><thead><tr><th align='left' style='padding-right: 80px;'>Idx</th><th align='left' style='padding-right: 80px;'>Name</th><th align='left' style='padding-right: 80px;'>Current state</th><th align='left' style='padding-right: 80px;'>Last updated</th><th align='left' style='padding-right: 10px;'>Values</th></tr></thead><tbody>\";",
          "960:          var oneitem = '<tr><td> '+item.id+' </td><td> '+item.name+' </td><td> '+item.value +' </td><td> '+item.lastupdate+' </td><td> '+item.values+'</td></tr>';",
          "",
          "---------------"
        ],
        "www/views/floorplanedit.html||www/views/floorplanedit.html": [
          "File: www/views/floorplanedit.html -> www/views/floorplanedit.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:    <td style=\"width:25%\"><label for=\"floorplanname\" data-i18n=\"Name\">Name</label>:</td>",
          "8:    <td><input type=\"text\" id=\"floorplanname\" style=\"width: 200px; padding: .2em;\" class=\"text ui-widget-content ui-corner-all\" /></td>",
          "9:   </tr>",
          "25:   <tr>",
          "26:    <td style=\"width:25%\"><label for=\"scalefactor\" data-i18n=\"Icon Scale\">Icon Scale</label>:</td>",
          "27:    <td><input type=\"text\" id=\"scalefactor\" style=\"width: 60px; padding: .2em;\" class=\"text ui-widget-content ui-corner-all\" /></td>",
          "28:   </tr>",
          "29:  </table>",
          "30: </div>",
          "31: <div id=\"floorplaneditmain\" style=\"display:none;\">",
          "32:  <br>",
          "33:  <table class=\"display\" id=\"floorplantable\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">",
          "34:   <thead>",
          "35:    <tr valign=\"middle\">",
          "36:     <th align=\"left\" data-i18n=\"Name\">Name</th>",
          "38:     <th align=\"left\" width=\"100\" data-i18n=\"Icon Scale\">Icon Scale</th>",
          "39:     <th width=\"60\" align=\"center\" data-i18n=\"Order\">Order</th>",
          "40:    </tr>",
          "",
          "[Removed Lines]",
          "10:   <tr>",
          "11:    <td colspan=\"2\">",
          "12:     <table class=\"display\" id=\"imagetable\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">",
          "13:      <thead>",
          "14:        <tr valign=\"middle\">",
          "15:         <th align=\"middle\">www/images/floorplans</th>",
          "16:        </tr>",
          "17:      </thead>",
          "18:     </table>",
          "19:    </td>",
          "20:   </tr>",
          "21:   <tr>",
          "22:    <td style=\"width:25%\"><label for=\"imagename\" data-i18n=\"Image file\">Image file</label>:</td>",
          "23:    <td><input type=\"text\" id=\"imagename\" style=\"width: 300px; padding: .2em;\" class=\"text ui-widget-content ui-corner-all\" /></td>",
          "24:   </tr>",
          "37:     <th align=\"left\" width=\"60%\" data-i18n=\"Image\">Image</th>",
          "",
          "[Added Lines]",
          "14:   <tr id=\"imagerow\">",
          "15:    <td style=\"width:25%\"><label for=\"imagefile\" data-i18n=\"Image file\">Image file</label>:</td>",
          "16:    <td><input type=\"file\" file=\"file\" id=\"imagefile\" name=\"imagefile\" accept=\".jpg, .jpeg, .png\"/></td>",
          "17:   </tr>",
          "22:  <h2 data-i18n=\"Floorplan\">Floorplan</h2><br>",
          "26:     <th width=\"60\" align=\"center\"></th>",
          "28:     <th align=\"center\" width=\"100\" data-i18n=\"Plans\">Plans</th>",
          "",
          "---------------"
        ]
      }
    }
  ]
}