{
  "cve_id": "CVE-2016-7129",
  "cve_desc": "The php_wddx_process_data function in ext/wddx/wddx.c in PHP before 5.6.25 and 7.x before 7.0.10 allows remote attackers to cause a denial of service (segmentation fault) or possibly have unspecified other impact via an invalid ISO 8601 time value, as demonstrated by a wddx_deserialize call that mishandles a dateTime element in a wddxPacket XML document.",
  "repo": "php/php-src",
  "patch_hash": "426aeb2808955ee3d3f52e0cfb102834cdb836a5",
  "patch_info": {
    "commit_hash": "426aeb2808955ee3d3f52e0cfb102834cdb836a5",
    "repo": "php/php-src",
    "commit_url": "https://github.com/php/php-src/commit/426aeb2808955ee3d3f52e0cfb102834cdb836a5",
    "files": [
      "ext/wddx/tests/bug72749.phpt",
      "ext/wddx/wddx.c"
    ],
    "message": "Fix bug #72749: wddx_deserialize allows illegal memory access",
    "before_after_code_files": [
      "ext/wddx/tests/bug72749.phpt||ext/wddx/tests/bug72749.phpt",
      "ext/wddx/wddx.c||ext/wddx/wddx.c"
    ]
  },
  "patch_diff": {
    "ext/wddx/tests/bug72749.phpt||ext/wddx/tests/bug72749.phpt": [
      "File: ext/wddx/tests/bug72749.phpt -> ext/wddx/tests/bug72749.phpt",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: --TEST--",
      "2: Bug #72749: wddx_deserialize allows illegal memory access",
      "3: --SKIPIF--",
      "4: <?php",
      "5: if (!extension_loaded('wddx')) {",
      "6:     die('skip. wddx not available');",
      "7: }",
      "8: ?>",
      "9: --FILE--",
      "10: <?php",
      "11: $xml = <<<XML",
      "12: <?xml version='1.0'?>",
      "13: <!DOCTYPE wddxPacket SYSTEM 'wddx_0100.dtd'>",
      "14: <wddxPacket version='1.0'>",
      "15: <header/>",
      "16:         <data>",
      "17:                 <struct>",
      "18:                      <var name='aDateTime3'>",
      "19:                          <dateTime>2\\r2004-09-10T05:52:49+00</dateTime>",
      "20:                      </var>",
      "21:                  </struct>",
      "22:         </data>",
      "23: </wddxPacket>",
      "24: XML;",
      "26: $array = wddx_deserialize($xml);",
      "27: var_dump($array);",
      "28: ?>",
      "29: --EXPECT--",
      "30: array(1) {",
      "31:   [\"aDateTime3\"]=>",
      "32:   string(24) \"2",
      "33: 2004-09-10T05:52:49+00\"",
      "34: }",
      "",
      "---------------"
    ],
    "ext/wddx/wddx.c||ext/wddx/wddx.c": [
      "File: ext/wddx/wddx.c -> ext/wddx/wddx.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1123:    case ST_DATETIME: {",
      "1124:     char *tmp;",
      "1128:     tmp[len] = '\\0';",
      "1130:     Z_LVAL_P(ent->data) = php_parse_date(tmp, NULL);",
      "1132:     if (Z_LVAL_P(ent->data) == -1) {",
      "1136:     }",
      "1138:    }",
      "1139:     break;",
      "",
      "[Removed Lines]",
      "1126:     tmp = emalloc(len + 1);",
      "1127:     memcpy(tmp, s, len);",
      "1133:      Z_TYPE_P(ent->data) = IS_STRING;",
      "1134:      Z_STRLEN_P(ent->data) = len;",
      "1135:      Z_STRVAL_P(ent->data) = estrndup(s, len);",
      "1137:     efree(tmp);",
      "",
      "[Added Lines]",
      "1126:     if (Z_TYPE_P(ent->data) == IS_STRING) {",
      "1127:      tmp = safe_emalloc(Z_STRLEN_P(ent->data), 1, (size_t)len + 1);",
      "1128:      memcpy(tmp, Z_STRVAL_P(ent->data), Z_STRLEN_P(ent->data));",
      "1129:      memcpy(tmp + Z_STRLEN_P(ent->data), s, len);",
      "1130:      len += Z_STRLEN_P(ent->data);",
      "1131:      efree(Z_STRVAL_P(ent->data));",
      "1132:      Z_TYPE_P(ent->data) = IS_LONG;",
      "1133:     } else {",
      "1134:      tmp = emalloc(len + 1);",
      "1135:      memcpy(tmp, s, len);",
      "1136:     }",
      "1142:      ZVAL_STRINGL(ent->data, tmp, len, 0);",
      "1143:     } else {",
      "1144:      efree(tmp);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e3829b88694460a2e5af10ad5eee9966fa55e589",
      "candidate_info": {
        "commit_hash": "e3829b88694460a2e5af10ad5eee9966fa55e589",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/e3829b88694460a2e5af10ad5eee9966fa55e589",
        "files": [
          "ext/wddx/tests/bug72749.phpt",
          "ext/wddx/wddx.c"
        ],
        "message": "Fix bug #72749: wddx_deserialize allows illegal memory access\n\n(cherry picked from commit 659a21dc20f0b64dafd8cb16573059d3b45cce6b)\n\nConflicts:\n\text/wddx/wddx.c",
        "before_after_code_files": [
          "ext/wddx/tests/bug72749.phpt||ext/wddx/tests/bug72749.phpt",
          "ext/wddx/wddx.c||ext/wddx/wddx.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [
            "ext/wddx/tests/bug72749.phpt||ext/wddx/tests/bug72749.phpt",
            "ext/wddx/wddx.c||ext/wddx/wddx.c"
          ],
          "candidate": [
            "ext/wddx/tests/bug72749.phpt||ext/wddx/tests/bug72749.phpt",
            "ext/wddx/wddx.c||ext/wddx/wddx.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/wddx/tests/bug72749.phpt||ext/wddx/tests/bug72749.phpt": [
          "File: ext/wddx/tests/bug72749.phpt -> ext/wddx/tests/bug72749.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #72749: wddx_deserialize allows illegal memory access",
          "3: --SKIPIF--",
          "4: <?php",
          "5: if (!extension_loaded('wddx')) {",
          "6:     die('skip. wddx not available');",
          "7: }",
          "8: ?>",
          "9: --FILE--",
          "10: <?php",
          "11: $xml = <<<XML",
          "12: <?xml version='1.0'?>",
          "13: <!DOCTYPE wddxPacket SYSTEM 'wddx_0100.dtd'>",
          "14: <wddxPacket version='1.0'>",
          "15: <header/>",
          "16:         <data>",
          "17:                 <struct>",
          "18:                      <var name='aDateTime3'>",
          "19:                          <dateTime>2\\r2004-09-10T05:52:49+00</dateTime>",
          "20:                      </var>",
          "21:                  </struct>",
          "22:         </data>",
          "23: </wddxPacket>",
          "24: XML;",
          "26: $array = wddx_deserialize($xml);",
          "27: var_dump($array);",
          "28: ?>",
          "29: --EXPECT--",
          "30: array(1) {",
          "31:   [\"aDateTime3\"]=>",
          "32:   string(24) \"2",
          "33: 2004-09-10T05:52:49+00\"",
          "34: }",
          "",
          "---------------"
        ],
        "ext/wddx/wddx.c||ext/wddx/wddx.c": [
          "File: ext/wddx/wddx.c -> ext/wddx/wddx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1038:    case ST_DATETIME: {",
          "1039:     char *tmp;",
          "1043:     tmp[len] = '\\0';",
          "1047:     if (Z_LVAL(ent->data) == -1) {",
          "1049:     }",
          "1050:     efree(tmp);",
          "1051:    }",
          "",
          "[Removed Lines]",
          "1041:     tmp = emalloc(len + 1);",
          "1042:     memcpy(tmp, (char *)s, len);",
          "1045:     Z_LVAL(ent->data) = php_parse_date(tmp, NULL);",
          "1048:      ZVAL_STRINGL(&ent->data, (char *)s, len);",
          "",
          "[Added Lines]",
          "1041:     if (Z_TYPE(ent->data) == IS_STRING) {",
          "1042:      tmp = safe_emalloc(Z_STRLEN(ent->data), 1, (size_t)len + 1);",
          "1043:      memcpy(tmp, Z_STRVAL(ent->data), Z_STRLEN(ent->data));",
          "1044:      memcpy(tmp + Z_STRLEN(ent->data), s, len);",
          "1045:      len += Z_STRLEN(ent->data);",
          "1046:      zval_dtor(&ent->data);",
          "1047:     } else {",
          "1048:      tmp = emalloc(len + 1);",
          "1049:      memcpy(tmp, (char *)s, len);",
          "1050:     }",
          "1053:     ZVAL_LONG(&ent->data, php_parse_date(tmp, NULL));",
          "1056:      ZVAL_STRINGL(&ent->data, (char *)tmp, len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d9fac3953d5b8a6b14c612b4ae351b8ae6dda481",
      "candidate_info": {
        "commit_hash": "d9fac3953d5b8a6b14c612b4ae351b8ae6dda481",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/d9fac3953d5b8a6b14c612b4ae351b8ae6dda481",
        "files": [
          "ext/wddx/tests/bug72749.phpt",
          "ext/wddx/wddx.c"
        ],
        "message": "Fix bug #72749: wddx_deserialize allows illegal memory access\n\n(cherry picked from commit 659a21dc20f0b64dafd8cb16573059d3b45cce6b)\n\nConflicts:\n\text/wddx/wddx.c\n\n(cherry picked from commit e3829b88694460a2e5af10ad5eee9966fa55e589)",
        "before_after_code_files": [
          "ext/wddx/tests/bug72749.phpt||ext/wddx/tests/bug72749.phpt",
          "ext/wddx/wddx.c||ext/wddx/wddx.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ext/wddx/tests/bug72749.phpt||ext/wddx/tests/bug72749.phpt",
            "ext/wddx/wddx.c||ext/wddx/wddx.c"
          ],
          "candidate": [
            "ext/wddx/tests/bug72749.phpt||ext/wddx/tests/bug72749.phpt",
            "ext/wddx/wddx.c||ext/wddx/wddx.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/wddx/tests/bug72749.phpt||ext/wddx/tests/bug72749.phpt": [
          "File: ext/wddx/tests/bug72749.phpt -> ext/wddx/tests/bug72749.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #72749: wddx_deserialize allows illegal memory access",
          "3: --SKIPIF--",
          "4: <?php",
          "5: if (!extension_loaded('wddx')) {",
          "6:     die('skip. wddx not available');",
          "7: }",
          "8: ?>",
          "9: --FILE--",
          "10: <?php",
          "11: $xml = <<<XML",
          "12: <?xml version='1.0'?>",
          "13: <!DOCTYPE wddxPacket SYSTEM 'wddx_0100.dtd'>",
          "14: <wddxPacket version='1.0'>",
          "15: <header/>",
          "16:         <data>",
          "17:                 <struct>",
          "18:                      <var name='aDateTime3'>",
          "19:                          <dateTime>2\\r2004-09-10T05:52:49+00</dateTime>",
          "20:                      </var>",
          "21:                  </struct>",
          "22:         </data>",
          "23: </wddxPacket>",
          "24: XML;",
          "26: $array = wddx_deserialize($xml);",
          "27: var_dump($array);",
          "28: ?>",
          "29: --EXPECT--",
          "30: array(1) {",
          "31:   [\"aDateTime3\"]=>",
          "32:   string(24) \"2",
          "33: 2004-09-10T05:52:49+00\"",
          "34: }",
          "",
          "---------------"
        ],
        "ext/wddx/wddx.c||ext/wddx/wddx.c": [
          "File: ext/wddx/wddx.c -> ext/wddx/wddx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1038:    case ST_DATETIME: {",
          "1039:     char *tmp;",
          "1043:     tmp[len] = '\\0';",
          "1047:     if (Z_LVAL(ent->data) == -1) {",
          "1049:     }",
          "1050:     efree(tmp);",
          "1051:    }",
          "",
          "[Removed Lines]",
          "1041:     tmp = emalloc(len + 1);",
          "1042:     memcpy(tmp, (char *)s, len);",
          "1045:     Z_LVAL(ent->data) = php_parse_date(tmp, NULL);",
          "1048:      ZVAL_STRINGL(&ent->data, (char *)s, len);",
          "",
          "[Added Lines]",
          "1041:     if (Z_TYPE(ent->data) == IS_STRING) {",
          "1042:      tmp = safe_emalloc(Z_STRLEN(ent->data), 1, (size_t)len + 1);",
          "1043:      memcpy(tmp, Z_STRVAL(ent->data), Z_STRLEN(ent->data));",
          "1044:      memcpy(tmp + Z_STRLEN(ent->data), s, len);",
          "1045:      len += Z_STRLEN(ent->data);",
          "1046:      zval_dtor(&ent->data);",
          "1047:     } else {",
          "1048:      tmp = emalloc(len + 1);",
          "1049:      memcpy(tmp, (char *)s, len);",
          "1050:     }",
          "1053:     ZVAL_LONG(&ent->data, php_parse_date(tmp, NULL));",
          "1056:      ZVAL_STRINGL(&ent->data, (char *)tmp, len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "db38282f421a5d552840aeac807efc2f584162d2",
      "candidate_info": {
        "commit_hash": "db38282f421a5d552840aeac807efc2f584162d2",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/db38282f421a5d552840aeac807efc2f584162d2",
        "files": [
          "ext/wddx/tests/bug72749.phpt",
          "ext/wddx/wddx.c"
        ],
        "message": "Fix bug #72749: wddx_deserialize allows illegal memory access",
        "before_after_code_files": [
          "ext/wddx/tests/bug72749.phpt||ext/wddx/tests/bug72749.phpt",
          "ext/wddx/wddx.c||ext/wddx/wddx.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ext/wddx/tests/bug72749.phpt||ext/wddx/tests/bug72749.phpt",
            "ext/wddx/wddx.c||ext/wddx/wddx.c"
          ],
          "candidate": [
            "ext/wddx/tests/bug72749.phpt||ext/wddx/tests/bug72749.phpt",
            "ext/wddx/wddx.c||ext/wddx/wddx.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/wddx/tests/bug72749.phpt||ext/wddx/tests/bug72749.phpt": [
          "File: ext/wddx/tests/bug72749.phpt -> ext/wddx/tests/bug72749.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #72749: wddx_deserialize allows illegal memory access",
          "3: --SKIPIF--",
          "4: <?php",
          "5: if (!extension_loaded('wddx')) {",
          "6:     die('skip. wddx not available');",
          "7: }",
          "8: ?>",
          "9: --FILE--",
          "10: <?php",
          "11: $xml = <<<XML",
          "12: <?xml version='1.0'?>",
          "13: <!DOCTYPE wddxPacket SYSTEM 'wddx_0100.dtd'>",
          "14: <wddxPacket version='1.0'>",
          "15: <header/>",
          "16:         <data>",
          "17:                 <struct>",
          "18:                      <var name='aDateTime3'>",
          "19:                          <dateTime>2\\r2004-09-10T05:52:49+00</dateTime>",
          "20:                      </var>",
          "21:                  </struct>",
          "22:         </data>",
          "23: </wddxPacket>",
          "24: XML;",
          "26: $array = wddx_deserialize($xml);",
          "27: var_dump($array);",
          "28: ?>",
          "29: --EXPECT--",
          "30: array(1) {",
          "31:   [\"aDateTime3\"]=>",
          "32:   string(24) \"2",
          "33: 2004-09-10T05:52:49+00\"",
          "34: }",
          "",
          "---------------"
        ],
        "ext/wddx/wddx.c||ext/wddx/wddx.c": [
          "File: ext/wddx/wddx.c -> ext/wddx/wddx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1123:    case ST_DATETIME: {",
          "1124:     char *tmp;",
          "1128:     tmp[len] = '\\0';",
          "1130:     Z_LVAL_P(ent->data) = php_parse_date(tmp, NULL);",
          "1132:     if (Z_LVAL_P(ent->data) == -1) {",
          "1136:     }",
          "1138:    }",
          "1139:     break;",
          "",
          "[Removed Lines]",
          "1126:     tmp = emalloc(len + 1);",
          "1127:     memcpy(tmp, s, len);",
          "1133:      Z_TYPE_P(ent->data) = IS_STRING;",
          "1134:      Z_STRLEN_P(ent->data) = len;",
          "1135:      Z_STRVAL_P(ent->data) = estrndup(s, len);",
          "1137:     efree(tmp);",
          "",
          "[Added Lines]",
          "1126:     if (Z_TYPE_P(ent->data) == IS_STRING) {",
          "1127:      tmp = safe_emalloc(Z_STRLEN_P(ent->data), 1, (size_t)len + 1);",
          "1128:      memcpy(tmp, Z_STRVAL_P(ent->data), Z_STRLEN_P(ent->data));",
          "1129:      memcpy(tmp + Z_STRLEN_P(ent->data), s, len);",
          "1130:      len += Z_STRLEN_P(ent->data);",
          "1131:      efree(Z_STRVAL_P(ent->data));",
          "1132:      Z_TYPE_P(ent->data) = IS_LONG;",
          "1133:     } else {",
          "1134:      tmp = emalloc(len + 1);",
          "1135:      memcpy(tmp, s, len);",
          "1136:     }",
          "1142:      ZVAL_STRINGL(ent->data, tmp, len, 0);",
          "1143:     } else {",
          "1144:      efree(tmp);",
          "",
          "---------------"
        ]
      }
    }
  ]
}