{
  "cve_id": "CVE-2014-8160",
  "cve_desc": "net/netfilter/nf_conntrack_proto_generic.c in the Linux kernel before 3.18 generates incorrect conntrack entries during handling of certain iptables rule sets for the SCTP, DCCP, GRE, and UDP-Lite protocols, which allows remote attackers to bypass intended access restrictions via packets with disallowed port numbers.",
  "repo": "torvalds/linux",
  "patch_hash": "db29a9508a9246e77087c5531e45b2c88ec6988b",
  "patch_info": {
    "commit_hash": "db29a9508a9246e77087c5531e45b2c88ec6988b",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/db29a9508a9246e77087c5531e45b2c88ec6988b",
    "files": [
      "net/netfilter/nf_conntrack_proto_generic.c"
    ],
    "message": "netfilter: conntrack: disable generic tracking for known protocols\n\nGiven following iptables ruleset:\n\n-P FORWARD DROP\n-A FORWARD -m sctp --dport 9 -j ACCEPT\n-A FORWARD -p tcp --dport 80 -j ACCEPT\n-A FORWARD -p tcp -m conntrack -m state ESTABLISHED,RELATED -j ACCEPT\n\nOne would assume that this allows SCTP on port 9 and TCP on port 80.\nUnfortunately, if the SCTP conntrack module is not loaded, this allows\n*all* SCTP communication, to pass though, i.e. -p sctp -j ACCEPT,\nwhich we think is a security issue.\n\nThis is because on the first SCTP packet on port 9, we create a dummy\n\"generic l4\" conntrack entry without any port information (since\nconntrack doesn't know how to extract this information).\n\nAll subsequent packets that are unknown will then be in established\nstate since they will fallback to proto_generic and will match the\n'generic' entry.\n\nOur originally proposed version [1] completely disabled generic protocol\ntracking, but Jozsef suggests to not track protocols for which a more\nsuitable helper is available, hence we now mitigate the issue for in\ntree known ct protocol helpers only, so that at least NAT and direction\ninformation will still be preserved for others.\n\n [1] http://www.spinics.net/lists/netfilter-devel/msg33430.html\n\nJoint work with Daniel Borkmann.\n\nSigned-off-by: Florian Westphal <fw@strlen.de>\nSigned-off-by: Daniel Borkmann <dborkman@redhat.com>\nAcked-by: Jozsef Kadlecsik <kadlec@blackhole.kfki.hu>\nSigned-off-by: Pablo Neira Ayuso <pablo@netfilter.org>",
    "before_after_code_files": [
      "net/netfilter/nf_conntrack_proto_generic.c||net/netfilter/nf_conntrack_proto_generic.c"
    ]
  },
  "patch_diff": {
    "net/netfilter/nf_conntrack_proto_generic.c||net/netfilter/nf_conntrack_proto_generic.c": [
      "File: net/netfilter/nf_conntrack_proto_generic.c -> net/netfilter/nf_conntrack_proto_generic.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "15: static unsigned int nf_ct_generic_timeout __read_mostly = 600*HZ;",
      "17: static inline struct nf_generic_net *generic_pernet(struct net *net)",
      "18: {",
      "19:  return &net->ct.nf_ct_proto.generic;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: static bool nf_generic_should_process(u8 proto)",
      "18: {",
      "19:  switch (proto) {",
      "20: #ifdef CONFIG_NF_CT_PROTO_SCTP_MODULE",
      "21:  case IPPROTO_SCTP:",
      "22:   return false;",
      "23: #endif",
      "24: #ifdef CONFIG_NF_CT_PROTO_DCCP_MODULE",
      "25:  case IPPROTO_DCCP:",
      "26:   return false;",
      "27: #endif",
      "28: #ifdef CONFIG_NF_CT_PROTO_GRE_MODULE",
      "29:  case IPPROTO_GRE:",
      "30:   return false;",
      "31: #endif",
      "32: #ifdef CONFIG_NF_CT_PROTO_UDPLITE_MODULE",
      "33:  case IPPROTO_UDPLITE:",
      "34:   return false;",
      "35: #endif",
      "36:  default:",
      "37:   return true;",
      "38:  }",
      "39: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "67: static bool generic_new(struct nf_conn *ct, const struct sk_buff *skb,",
      "68:    unsigned int dataoff, unsigned int *timeouts)",
      "69: {",
      "71: }",
      "73: #if IS_ENABLED(CONFIG_NF_CT_NETLINK_TIMEOUT)",
      "",
      "[Removed Lines]",
      "70:  return true;",
      "",
      "[Added Lines]",
      "94:  return nf_generic_should_process(nf_ct_protonum(ct));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "779668450a990d402d316ffd9b7b103fbe5ab6f3",
      "candidate_info": {
        "commit_hash": "779668450a990d402d316ffd9b7b103fbe5ab6f3",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/779668450a990d402d316ffd9b7b103fbe5ab6f3",
        "files": [
          "net/netfilter/nf_conntrack_proto_generic.c"
        ],
        "message": "netfilter: conntrack: warn the user if there is a better helper to use\n\nAfter db29a9508a92 (\"netfilter: conntrack: disable generic tracking for\nknown protocols\"), if the specific helper is built but not loaded\n(a standard for most distributions) systems with a restrictive firewall\nbut weak configuration regarding netfilter modules to load, will\nsilently stop working.\n\nThis patch then puts a warning message so the sysadmin knows where to\nstart looking into. It's a pr_warn_once regardless of protocol itself\nbut it should be enough to give a hint on where to look.\n\nCc: Florian Westphal <fw@strlen.de>\nCc: Daniel Borkmann <daniel@iogearbox.net>\nSigned-off-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>\nSigned-off-by: Pablo Neira Ayuso <pablo@netfilter.org>",
        "before_after_code_files": [
          "net/netfilter/nf_conntrack_proto_generic.c||net/netfilter/nf_conntrack_proto_generic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/netfilter/nf_conntrack_proto_generic.c||net/netfilter/nf_conntrack_proto_generic.c"
          ],
          "candidate": [
            "net/netfilter/nf_conntrack_proto_generic.c||net/netfilter/nf_conntrack_proto_generic.c"
          ]
        }
      },
      "candidate_diff": {
        "net/netfilter/nf_conntrack_proto_generic.c||net/netfilter/nf_conntrack_proto_generic.c": [
          "File: net/netfilter/nf_conntrack_proto_generic.c -> net/netfilter/nf_conntrack_proto_generic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "90: static bool generic_new(struct nf_conn *ct, const struct sk_buff *skb,",
          "91:    unsigned int dataoff, unsigned int *timeouts)",
          "92: {",
          "94: }",
          "96: #if IS_ENABLED(CONFIG_NF_CT_NETLINK_TIMEOUT)",
          "",
          "[Removed Lines]",
          "93:  return nf_generic_should_process(nf_ct_protonum(ct));",
          "",
          "[Added Lines]",
          "93:  bool ret;",
          "95:  ret = nf_generic_should_process(nf_ct_protonum(ct));",
          "96:  if (!ret)",
          "97:   pr_warn_once(\"conntrack: generic helper won't handle protocol %d. Please consider loading the specific helper module.\\n\",",
          "98:         nf_ct_protonum(ct));",
          "99:  return ret;",
          "",
          "---------------"
        ]
      }
    }
  ]
}