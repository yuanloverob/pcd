{
  "cve_id": "CVE-2017-0028",
  "cve_desc": "A remote code execution vulnerability exists when Microsoft scripting engine improperly accesses objects in memory. The vulnerability could corrupt memory in a way that enables an attacker to execute arbitrary code in the context of the current user. An attacker who successfully exploited the vulnerability could gain the same user rights as the current user, aka \"Scripting Engine Memory Corruption Vulnerability.\"",
  "repo": "Microsoft/ChakraCore",
  "patch_hash": "402f3d967c0a905ec5b9ca9c240783d3f2c15724",
  "patch_info": {
    "commit_hash": "402f3d967c0a905ec5b9ca9c240783d3f2c15724",
    "repo": "Microsoft/ChakraCore",
    "commit_url": "https://github.com/Microsoft/ChakraCore/commit/402f3d967c0a905ec5b9ca9c240783d3f2c15724",
    "files": [
      "lib/Parser/Parse.cpp",
      "test/es6/lambda-params-shadow.js"
    ],
    "message": "[CVE-2017-0028] Fix binding of 'async' identifier in the presence of async arrow function.",
    "before_after_code_files": [
      "lib/Parser/Parse.cpp||lib/Parser/Parse.cpp",
      "test/es6/lambda-params-shadow.js||test/es6/lambda-params-shadow.js"
    ]
  },
  "patch_diff": {
    "lib/Parser/Parse.cpp||lib/Parser/Parse.cpp": [
      "File: lib/Parser/Parse.cpp -> lib/Parser/Parse.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "2863:     _Inout_opt_ charcount_t *plastRParen /*= nullptr*/)",
      "2864: {",
      "2865:     ParseNodePtr pnode = nullptr;",
      "2866:     charcount_t ichMin = 0;",
      "2867:     size_t iecpMin = 0;",
      "2868:     size_t iuMin;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2866:     PidRefStack *savedTopAsyncRef = nullptr;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2915:                 isLambdaExpr = true;",
      "2916:                 goto LFunction;",
      "2917:             }",
      "2918:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2919:             else if (m_token.tk == tkLParen)",
      "2920:             {",
      "2924:                 savedTopAsyncRef = pid->GetTopRef();",
      "2925:             }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3270:     pnode = ParsePostfixOperators<buildAST>(pnode, fAllowCall, fInNew, isAsyncExpr, &fCanAssign, &term, pfIsDotOrIndex);",
      "3273:     if (pToken && term.tk == tkID)",
      "3274:     {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3280:     if (savedTopAsyncRef != nullptr &&",
      "3281:         this->m_token.tk == tkDArrow)",
      "3282:     {",
      "3285:         for (IdentPtr pid = wellKnownPropertyPids.async; pid->GetTopRef() != savedTopAsyncRef;)",
      "3286:         {",
      "3287:             Assert(pid->GetTopRef() != nullptr);",
      "3288:             pid->RemovePrevPidRef(nullptr);",
      "3289:         }",
      "3290:     }",
      "",
      "---------------"
    ],
    "test/es6/lambda-params-shadow.js||test/es6/lambda-params-shadow.js": [
      "File: test/es6/lambda-params-shadow.js -> test/es6/lambda-params-shadow.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "18:     }",
      "19: }",
      "20: let b = new B();",
      "22:     WScript.Echo('fail');",
      "23: }",
      "",
      "[Removed Lines]",
      "21: if (count !== 3) {",
      "",
      "[Added Lines]",
      "21: class async extends A {",
      "22:     constructor() {",
      "23:         super();",
      "24:         let Q = async A => { A };",
      "25:     }",
      "26: }",
      "27: let a = new async();",
      "28: if (count !== 4) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "94993f2e342af4f792da7022e4e1e43bd122b91b",
      "candidate_info": {
        "commit_hash": "94993f2e342af4f792da7022e4e1e43bd122b91b",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/94993f2e342af4f792da7022e4e1e43bd122b91b",
        "files": [
          "lib/Backend/GlobOptFields.cpp"
        ],
        "message": "[CVE-2017-0132] fix incorrect assumption in JIT about array nativeness",
        "before_after_code_files": [
          "lib/Backend/GlobOptFields.cpp||lib/Backend/GlobOptFields.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/2697"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Backend/GlobOptFields.cpp||lib/Backend/GlobOptFields.cpp": [
          "File: lib/Backend/GlobOptFields.cpp -> lib/Backend/GlobOptFields.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "3194:             }",
          "3195:             break;",
          "3196:         case Js::TypeIds_Array:",
          "3201:             if (!DoArrayCheckHoist() ||",
          "",
          "[Removed Lines]",
          "3197:         case Js::TypeIds_NativeFloatArray:",
          "3198:         case Js::TypeIds_NativeIntArray:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bf4ef6cfb0392484788cfed49d9045863fae2ac5",
      "candidate_info": {
        "commit_hash": "bf4ef6cfb0392484788cfed49d9045863fae2ac5",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/bf4ef6cfb0392484788cfed49d9045863fae2ac5",
        "files": [
          "lib/Backend/BackwardPass.cpp",
          "lib/Backend/IR.h",
          "lib/Backend/IRBuilder.cpp",
          "lib/Backend/IRBuilderAsmJs.cpp",
          "lib/Backend/Lower.cpp"
        ],
        "message": "Check for post-lower opcodes earlier than normal.\n\nThis change promotes several asserts to failfasts, and adds two additional ones,\nin order to ensure that no post-lower opcodes are added earlier than the lowerer\nphase, either by being added to the incoming bytecode buffer, or by corrupting a\npart of the IR during the earlier phases of the JIT.",
        "before_after_code_files": [
          "lib/Backend/BackwardPass.cpp||lib/Backend/BackwardPass.cpp",
          "lib/Backend/IR.h||lib/Backend/IR.h",
          "lib/Backend/IRBuilder.cpp||lib/Backend/IRBuilder.cpp",
          "lib/Backend/IRBuilderAsmJs.cpp||lib/Backend/IRBuilderAsmJs.cpp",
          "lib/Backend/Lower.cpp||lib/Backend/Lower.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/2697"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Backend/BackwardPass.cpp||lib/Backend/BackwardPass.cpp": [
          "File: lib/Backend/BackwardPass.cpp -> lib/Backend/BackwardPass.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2535:         }",
          "2536: #endif",
          "2538:         this->currentInstr = instr;",
          "2539:         this->currentRegion = this->currentBlock->GetFirstInstr()->AsLabelInstr()->GetRegion();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2538:         AssertOrFailFastMsg(!instr->IsLowered(), \"Lowered instruction detected in pre-lower context!\");",
          "",
          "---------------"
        ],
        "lib/Backend/IR.h||lib/Backend/IR.h": [
          "File: lib/Backend/IR.h -> lib/Backend/IR.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "484:     bool            dstIsAlwaysConvertedToInt32 : 1;",
          "485:     bool            dstIsAlwaysConvertedToNumber : 1;",
          "486:     bool            isCallInstrProtectedByNoProfileBailout : 1;",
          "487: protected:",
          "488:     bool            isCloned:1;",
          "489:     bool            hasBailOutInfo:1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "487:     bool            isNonFastPathFrameDisplay : 1;",
          "",
          "---------------"
        ],
        "lib/Backend/IRBuilder.cpp||lib/Backend/IRBuilder.cpp": [
          "File: lib/Backend/IRBuilder.cpp -> lib/Backend/IRBuilder.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "704:             }",
          "705:         }",
          "706: #endif",
          "709:         uint layoutAndSize = layoutSize * Js::OpLayoutType::Count + Js::OpCodeUtil::GetOpCodeLayout(newOpcode);",
          "710:         switch(layoutAndSize)",
          "",
          "[Removed Lines]",
          "707:         AssertMsg(Js::OpCodeUtil::IsValidByteCodeOpcode(newOpcode), \"Error getting opcode from m_jnReader.Op()\");",
          "",
          "[Added Lines]",
          "707:         AssertOrFailFastMsg(Js::OpCodeUtil::IsValidByteCodeOpcode(newOpcode), \"Error getting opcode from m_jnReader.Op()\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6824:                     Js::Constants::NoByteCodeOffset);",
          "6825:             }",
          "6828:             this->AddInstr(",
          "6842:                 Js::Constants::NoByteCodeOffset);",
          "6843:         }",
          "6844:         break;",
          "",
          "[Removed Lines]",
          "6827:             IR::RegOpnd* tempRegOpnd = IR::RegOpnd::New(StackSym::New(this->m_func), TyVar, this->m_func);",
          "6829:                 IR::Instr::New(",
          "6830:                     Js::OpCode::LdFrameDisplay,",
          "6831:                     tempRegOpnd,",
          "6832:                     this->BuildSrcOpnd(this->m_func->GetJITFunctionBody()->GetLocalClosureReg()),",
          "6833:                     this->BuildSrcOpnd(this->m_func->GetJITFunctionBody()->GetLocalFrameDisplayReg()),",
          "6834:                     this->m_func),",
          "6835:                 Js::Constants::NoByteCodeOffset);",
          "6836:             this->AddInstr(",
          "6837:                 IR::Instr::New(",
          "6838:                     Js::OpCode::MOV,",
          "6839:                     this->BuildDstOpnd(this->m_func->GetJITFunctionBody()->GetLocalFrameDisplayReg()),",
          "6840:                     tempRegOpnd,",
          "6841:                     this->m_func),",
          "",
          "[Added Lines]",
          "6827:             IR::Instr* lfd = IR::Instr::New(",
          "6828:                 Js::OpCode::LdFrameDisplay,",
          "6829:                 this->BuildDstOpnd(this->m_func->GetJITFunctionBody()->GetLocalFrameDisplayReg()),",
          "6830:                 this->BuildDstOpnd(this->m_func->GetJITFunctionBody()->GetLocalClosureReg()),",
          "6831:                 this->BuildDstOpnd(this->m_func->GetJITFunctionBody()->GetLocalFrameDisplayReg()),",
          "6832:                 this->m_func);",
          "6834:                 lfd,",
          "6836:             lfd->isNonFastPathFrameDisplay = true;",
          "",
          "---------------"
        ],
        "lib/Backend/IRBuilderAsmJs.cpp||lib/Backend/IRBuilderAsmJs.cpp": [
          "File: lib/Backend/IRBuilderAsmJs.cpp -> lib/Backend/IRBuilderAsmJs.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:     {",
          "145:         Assert(newOpcode != Js::OpCodeAsmJs::EndOfBlock);",
          "149:         uint layoutAndSize = layoutSize * Js::OpLayoutTypeAsmJs::Count + Js::OpCodeUtilAsmJs::GetOpCodeLayout(newOpcode);",
          "150:         switch (layoutAndSize)",
          "",
          "[Removed Lines]",
          "147:         AssertMsg(Js::OpCodeUtilAsmJs::IsValidByteCodeOpcode(newOpcode), \"Error getting opcode from m_jnReader.Op()\");",
          "",
          "[Added Lines]",
          "147:         AssertOrFailFastMsg(Js::OpCodeUtilAsmJs::IsValidByteCodeOpcode(newOpcode), \"Error getting opcode from m_jnReader.Op()\");",
          "",
          "---------------"
        ],
        "lib/Backend/Lower.cpp||lib/Backend/Lower.cpp": [
          "File: lib/Backend/Lower.cpp -> lib/Backend/Lower.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "23486:     if (envDepth == (uint16)-1 ||",
          "23488:         PHASE_OFF(Js::FrameDisplayFastPathPhase, func))",
          "23489:     {",
          "23490:         if (isStrict)",
          "",
          "[Removed Lines]",
          "23487:         (!doStackFrameDisplay && instr->GetDst()->AsRegOpnd()->m_sym->IsTempReg(instr->m_func)) ||",
          "",
          "[Added Lines]",
          "23487:         (!doStackFrameDisplay && (instr->isNonFastPathFrameDisplay || instr->GetDst()->AsRegOpnd()->m_sym->IsTempReg(instr->m_func))) ||",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "065b7978c40ded35c356ced6cd922a40156c9c46",
      "candidate_info": {
        "commit_hash": "065b7978c40ded35c356ced6cd922a40156c9c46",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/065b7978c40ded35c356ced6cd922a40156c9c46",
        "files": [
          "lib/Runtime/Library/JavascriptArray.cpp",
          "test/Array/Array_TypeConfusion_bugs.js"
        ],
        "message": "[CVE-2017-0196] Fixing an heap overread during slice.\n\nThe MissingItem check is happening on the array in a loop. It is possible that we get called into script and that mutates the array. So the Array's head is newly created with length.\nHowever the loop is still performing over the old length.\nFixed this by checking the length In IsMissingItem function.\nAdded a unittest.",
        "before_after_code_files": [
          "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp",
          "test/Array/Array_TypeConfusion_bugs.js||test/Array/Array_TypeConfusion_bugs.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/2697"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp": [
          "File: lib/Runtime/Library/JavascriptArray.cpp -> lib/Runtime/Library/JavascriptArray.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "478:     bool JavascriptArray::IsMissingItem(uint32 index)",
          "479:     {",
          "480:         bool isIntArray = false, isFloatArray = false;",
          "481:         this->GetArrayTypeAndConvert(&isIntArray, &isFloatArray);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "480:         if (this->length <= index)",
          "481:         {",
          "482:             return false;",
          "483:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5768:         if (!pArr->HasNoMissingValues())",
          "5769:         {",
          "5771:             {",
          "",
          "[Removed Lines]",
          "5770:             for (uint32 i = 0; i < newLen; i++)",
          "",
          "[Added Lines]",
          "5775:             for (uint32 i = 0; i < newLen && (i + start) < pArr->length; i++)",
          "",
          "---------------"
        ],
        "test/Array/Array_TypeConfusion_bugs.js||test/Array/Array_TypeConfusion_bugs.js": [
          "File: test/Array/Array_TypeConfusion_bugs.js -> test/Array/Array_TypeConfusion_bugs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "593:             assert.areEqual(101, arr.length);",
          "594:         }",
          "595:     },",
          "596: ];",
          "597: testRunner.runTests(tests, { verbose: WScript.Arguments[0] != \"summary\" });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "596:     {",
          "597:         name: \"Heap overread when splice mutates the array when executing slice\",",
          "598:         body: function ()",
          "599:         {",
          "600:             var getterCalled = false;",
          "601:             var a = [1, 2];",
          "602:             for (var i = 0; i < 100 * 1024; i++) {",
          "603:                 a.push(i);",
          "604:             }",
          "605:             delete a[0]; // Make a missing item",
          "606:             var protoObj = [11];",
          "607:             Object.defineProperty(protoObj, '0', {",
          "608:                 get : function () {",
          "609:                     getterCalled = true;",
          "610:                     Object.setPrototypeOf(a, Array.prototype);",
          "611:                     a.splice(0); // head seg is now length=0",
          "612:                     return 42;",
          "613:                 },",
          "614:                 configurable : true",
          "615:             });",
          "616:             Object.setPrototypeOf(a, protoObj);",
          "617:             var b = a.slice();",
          "618:             assert.isTrue(getterCalled);",
          "619:             assert.areEqual(0, a.length, \"Getter will splice the array to zero length\");",
          "620:             assert.areEqual(100 * 1024 + 2, b.length, \"Validating that slice will return the full array even though splice is deleting the whole array\");",
          "621:         }",
          "622:     },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f778167515933a34a7b8e8bb8c2bcfd1fc61d3ee",
      "candidate_info": {
        "commit_hash": "f778167515933a34a7b8e8bb8c2bcfd1fc61d3ee",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/f778167515933a34a7b8e8bb8c2bcfd1fc61d3ee",
        "files": [
          "lib/Runtime/Language/AsmJs.cpp"
        ],
        "message": "[CVE-2017-0133] add check to ensure asm.js module has return statement",
        "before_after_code_files": [
          "lib/Runtime/Language/AsmJs.cpp||lib/Runtime/Language/AsmJs.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/2697"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Runtime/Language/AsmJs.cpp||lib/Runtime/Language/AsmJs.cpp": [
          "File: lib/Runtime/Language/AsmJs.cpp -> lib/Runtime/Language/AsmJs.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "919:     {",
          "920:         ParseNode* endStmt = m.GetCurrentParserNode();",
          "923:         ParseNode* node = ParserWrapper::GetBinaryLeft( endStmt );",
          "924:         ParseNode* endNode = ParserWrapper::GetBinaryRight( endStmt );",
          "",
          "[Removed Lines]",
          "922:         Assert( endStmt->nop == knopList );",
          "",
          "[Added Lines]",
          "922:         if (endStmt->nop != knopList)",
          "923:         {",
          "924:             return m.Fail(endStmt, _u(\"Module must have a return\"));",
          "925:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "70614865fcc2d5a976d6771fff5bbcdaddfd5dfb",
      "candidate_info": {
        "commit_hash": "70614865fcc2d5a976d6771fff5bbcdaddfd5dfb",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/70614865fcc2d5a976d6771fff5bbcdaddfd5dfb",
        "files": [
          "lib/Runtime/Library/JavascriptProxy.cpp"
        ],
        "message": "[CVE-2017-0094] Type confusion in JavascriptProxy::SetPropertyTrap when using a Symbol\n\nWhen setting a property trap with JavascriptProxy::SetPropertyTrap using a symbol as a property id, we incorrectly assume that JavascriptProxy::GetName returns a PropertyString. The case for a JavascriptSymbol is unhandled, and we do a static cast leading to type confusion. Fix is to handle any cases other than PropertyString by using nullptr, as is the convention elsewhere.",
        "before_after_code_files": [
          "lib/Runtime/Library/JavascriptProxy.cpp||lib/Runtime/Library/JavascriptProxy.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/2697"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Runtime/Library/JavascriptProxy.cpp||lib/Runtime/Library/JavascriptProxy.cpp": [
          "File: lib/Runtime/Library/JavascriptProxy.cpp -> lib/Runtime/Library/JavascriptProxy.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1765:                 return  JavascriptOperators::SetItem(receiver, target, indexVal, newValue, scriptContext, PropertyOperationFlags::PropertyOperation_None, skipPrototypeCheck);",
          "1766:             }",
          "1767:             case SetPropertyTrapKind::SetPropertyWPCacheKind:",
          "1768:                 return JavascriptOperators::SetPropertyWPCache(receiver, target, propertyId, newValue, requestContext,",
          "1770:             default:",
          "1771:                 Assert(FALSE);",
          "1772:             }",
          "",
          "[Removed Lines]",
          "1769:                     static_cast<PropertyString*>(GetName(requestContext, propertyId)), PropertyOperationFlags::PropertyOperation_None);",
          "",
          "[Added Lines]",
          "1768:             {",
          "1769:                 Var name = GetName(requestContext, propertyId);",
          "1770:                 if (!JavascriptString::Is(name) || !VirtualTableInfo<Js::PropertyString>::HasVirtualTable(JavascriptString::FromVar(name)))",
          "1771:                 {",
          "1772:                     name = nullptr;",
          "1773:                 }",
          "1775:                     static_cast<Js::PropertyString*>(name), PropertyOperationFlags::PropertyOperation_None);",
          "1776:             }",
          "",
          "---------------"
        ]
      }
    }
  ]
}