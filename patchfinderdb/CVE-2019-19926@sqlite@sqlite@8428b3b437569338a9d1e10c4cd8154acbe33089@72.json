{
  "cve_id": "CVE-2019-19926",
  "cve_desc": "multiSelect in select.c in SQLite 3.30.1 mishandles certain errors during parsing, as demonstrated by errors from sqlite3WindowRewrite() calls. NOTE: this vulnerability exists because of an incomplete fix for CVE-2019-19880.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
  "patch_info": {
    "commit_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8428b3b437569338a9d1e10c4cd8154acbe33089",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c"
    ],
    "message": "Continuation of [e2bddcd4c55ba3cb]: Add another spot where it is necessary to abort early due to prior errors in sqlite3WindowRewrite().\n\nFossilOrigin-Name: cba2a2a44cdf138a629109bb0ad088ed4ef67fc66bed3e0373554681a39615d2",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 3d4c0bf8904135fa68c75801bfa738715cacc3b19dc8ad6ef550b11798d4b121",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2809:     }",
      "2810:   #endif",
      "2811:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2812:   if( pParse->nErr ) goto multi_select_end;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d4dae75f79580285a4c122a71404e68bab1ac895",
      "candidate_info": {
        "commit_hash": "d4dae75f79580285a4c122a71404e68bab1ac895",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d4dae75f79580285a4c122a71404e68bab1ac895",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "Strengthen check-in [83da4d4104ee1870] by ignoring *all* WHERE-clause constraints for a virtual table that is the right table of a LEFT JOIN, as such constraints are never useful. This fixes an issue discovered by Manuel Rigger.\n\nFossilOrigin-Name: 840de36df1aaeb4bad9a7c18e97cc560ba3b8c629c4520a05bc456d67b3347b9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1fa29a5f2a89b6a1ee067f9cb86de1b66455126349efe3502599fc7ad224170c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "979:     testcase( pTerm->eOperator & WO_ALL );",
          "980:     if( (pTerm->eOperator & ~(WO_EQUIV))==0 ) continue;",
          "981:     if( pTerm->wtFlags & TERM_VNULL ) continue;",
          "982:     if( (pSrc->fg.jointype & JT_LEFT)!=0",
          "983:      && !ExprHasProperty(pTerm->pExpr, EP_FromJoin)",
          "985:     ){",
          "994:       continue;",
          "995:     }",
          "996:     assert( pTerm->u.leftColumn>=(-1) );",
          "",
          "[Removed Lines]",
          "984:      && (pTerm->eOperator & (WO_IS|WO_ISNULL))",
          "992:       testcase( pTerm->eOperator & WO_ISNULL );",
          "993:       testcase( pTerm->eOperator & WO_IS );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "244edd01d32b4081086982d5f3c5a93b7a2b6f18",
      "candidate_info": {
        "commit_hash": "244edd01d32b4081086982d5f3c5a93b7a2b6f18",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/244edd01d32b4081086982d5f3c5a93b7a2b6f18",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fkey8.test"
        ],
        "message": "Add test cases for the fix on this branch.\n\nFossilOrigin-Name: 2e31abe0ae5937a8ce10179e0ae045ee4c5ed8b7e2622ab41243226c6d3f5425",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/fkey8.test||test/fkey8.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3f1c8051648a341db4dffad66d3b1f9980d8a2b314cb0ce879cb2a10d1779b84",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fkey8.test||test/fkey8.test": [
          "File: test/fkey8.test -> test/fkey8.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "197:   INSERT OR REPLACE INTO t1 VALUES(20000, 20000);",
          "198: }",
          "200: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "200: #-------------------------------------------------------------------------",
          "201: reset_db",
          "202: do_execsql_test 5.0 {",
          "203:   PRAGMA foreign_keys = true;",
          "204:   CREATE TABLE parent(",
          "205:     p TEXT PRIMARY KEY",
          "206:   );",
          "207:   CREATE TABLE child(",
          "208:     c INTEGER UNIQUE,",
          "209:     FOREIGN KEY(c) REFERENCES parent(p) DEFERRABLE INITIALLY DEFERRED",
          "210:   );",
          "211:   BEGIN;",
          "212:     INSERT INTO child VALUES(123);",
          "213:     INSERT INTO parent VALUES('123');",
          "214:   COMMIT;",
          "215: }",
          "216: do_execsql_test 5.1 {",
          "217:   PRAGMA integrity_check;",
          "218: } {ok}",
          "220: do_execsql_test 5.2 {",
          "221:   INSERT INTO parent VALUES(1200);",
          "222:   BEGIN;",
          "223:     INSERT INTO child VALUES(456);",
          "224:     UPDATE parent SET p = '456' WHERE p=1200;",
          "225:   COMMIT;",
          "226: }",
          "227: do_execsql_test 5.3 {",
          "228:   PRAGMA integrity_check;",
          "229: } {ok}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "346f4e264a13b9bf27d4692d8a84224274ee47b3",
      "candidate_info": {
        "commit_hash": "346f4e264a13b9bf27d4692d8a84224274ee47b3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/346f4e264a13b9bf27d4692d8a84224274ee47b3",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/main.c",
          "src/shell.c.in",
          "src/sqlite.h.in"
        ],
        "message": "Change the name of the parameter table in the CLI to \"sqlite_parameters\". Doing so involves adding SQLITE_DBCONFIG_WRITABLE_SCHEMA and allowing the creation of tables whose names begin with \"sqlite_\" and that are indexed while writable_schema is on.\n\nFossilOrigin-Name: 24ef3844692debc2db7b1d427f5dcf4050481a8c7f71c3b516766b819ecab587",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/main.c||src/main.c",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8c80b004cae71aaf820a31dba80c100ed162ef5bae845fb4535ff4d3be407500",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3154:   assert( pParse->nErr==0 );",
          "3155:   if( sqlite3StrNICmp(pTab->zName, \"sqlite_\", 7)==0",
          "3156:        && db->init.busy==0",
          "3157: #if SQLITE_USER_AUTHENTICATION",
          "3158:        && sqlite3UserAuthTable(pTab->zName)==0",
          "3159: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3157:        && pTblName!=0",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "843:         { SQLITE_DBCONFIG_TRIGGER_EQP,           SQLITE_TriggerEQP     },",
          "844:         { SQLITE_DBCONFIG_RESET_DATABASE,        SQLITE_ResetDatabase  },",
          "845:         { SQLITE_DBCONFIG_DEFENSIVE,             SQLITE_Defensive      },",
          "846:       };",
          "847:       unsigned int i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "846:         { SQLITE_DBCONFIG_WRITABLE_SCHEMA,       SQLITE_WriteSchema|",
          "847:                                                  SQLITE_NoSchemaError  },",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "2748: }",
          "2754: static void bind_table_init(ShellState *p){",
          "2755:   sqlite3_exec(p->db,",
          "2757:     \"  key TEXT PRIMARY KEY,\\n\"",
          "2758:     \"  value ANY\\n\"",
          "2759:     \") WITHOUT ROWID;\",",
          "2760:     0, 0, 0);",
          "2761: }",
          "",
          "[Removed Lines]",
          "2751: #define BIND_PARAM_TABLE \"$Parameters\"",
          "2756:     \"CREATE TABLE IF NOT EXISTS temp.[\" BIND_PARAM_TABLE \"](\\n\"",
          "",
          "[Added Lines]",
          "2751: #define BIND_PARAM_TABLE \"sqlite_parameters\"",
          "2755:   int wrSchema = 0;",
          "2756:   sqlite3_db_config(p->db, SQLITE_DBCONFIG_WRITABLE_SCHEMA, -1, &wrSchema);",
          "2757:   sqlite3_db_config(p->db, SQLITE_DBCONFIG_WRITABLE_SCHEMA, 1, 0);",
          "2759:     \"CREATE TABLE IF NOT EXISTS temp.\" BIND_PARAM_TABLE \"(\\n\"",
          "2764:   sqlite3_db_config(p->db, SQLITE_DBCONFIG_WRITABLE_SCHEMA, wrSchema, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2786:   }",
          "2787:   rc = sqlite3_prepare_v2(pArg->db,",
          "2789:           \" WHERE key=?1\", -1, &pQ, 0);",
          "2790:   if( rc || pQ==0 ) return;",
          "2791:   for(i=1; i<=nVar; i++){",
          "",
          "[Removed Lines]",
          "2788:           \"SELECT value FROM temp.\\\"\" BIND_PARAM_TABLE \"\\\"\"",
          "",
          "[Added Lines]",
          "2792:           \"SELECT value FROM temp.\" BIND_PARAM_TABLE",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7144:     if( nArg==2 && strcmp(azArg[1],\"clear\")==0 ){",
          "7146:                    0, 0, 0);",
          "7147:     }else",
          "",
          "[Removed Lines]",
          "7145:       sqlite3_exec(p->db, \"DROP TABLE IF EXISTS temp.[\" BIND_PARAM_TABLE \"];\",",
          "",
          "[Added Lines]",
          "7149:       int wrSchema = 0;",
          "7150:       sqlite3_db_config(p->db, SQLITE_DBCONFIG_WRITABLE_SCHEMA, -1, &wrSchema);",
          "7151:       sqlite3_db_config(p->db, SQLITE_DBCONFIG_WRITABLE_SCHEMA, 1, 0);",
          "7152:       sqlite3_exec(p->db, \"DROP TABLE IF EXISTS temp.\" BIND_PARAM_TABLE \";\",",
          "7154:       sqlite3_db_config(p->db, SQLITE_DBCONFIG_WRITABLE_SCHEMA, wrSchema, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7155:       int len = 0;",
          "7156:       rx = sqlite3_prepare_v2(p->db,",
          "7157:              \"SELECT max(length(key)) \"",
          "7159:       if( rx==SQLITE_OK && sqlite3_step(pStmt)==SQLITE_ROW ){",
          "7160:         len = sqlite3_column_int(pStmt, 0);",
          "7161:         if( len>40 ) len = 40;",
          "",
          "[Removed Lines]",
          "7158:              \"FROM temp.[\" BIND_PARAM_TABLE \"];\", -1, &pStmt, 0);",
          "",
          "[Added Lines]",
          "7166:              \"FROM temp.\" BIND_PARAM_TABLE \";\", -1, &pStmt, 0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7165:       if( len ){",
          "7166:         rx = sqlite3_prepare_v2(p->db,",
          "7167:              \"SELECT key, quote(value) \"",
          "7169:         while( sqlite3_step(pStmt)==SQLITE_ROW ){",
          "7170:           utf8_printf(p->out, \"%-*s %s\\n\", len, sqlite3_column_text(pStmt,0),",
          "7171:                       sqlite3_column_text(pStmt,1));",
          "",
          "[Removed Lines]",
          "7168:              \"FROM temp.[\" BIND_PARAM_TABLE \"];\", -1, &pStmt, 0);",
          "",
          "[Added Lines]",
          "7176:              \"FROM temp.\" BIND_PARAM_TABLE \";\", -1, &pStmt, 0);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "7196:       const char *zValue = azArg[3];",
          "7197:       bind_table_init(p);",
          "7198:       zSql = sqlite3_mprintf(",
          "7200:                   \"VALUES(%Q,%s);\", zKey, zValue);",
          "7201:       if( zSql==0 ) shell_out_of_memory();",
          "7202:       pStmt = 0;",
          "",
          "[Removed Lines]",
          "7199:                   \"REPLACE INTO temp.[\" BIND_PARAM_TABLE \"](key,value)\"",
          "",
          "[Added Lines]",
          "7207:                   \"REPLACE INTO temp.\" BIND_PARAM_TABLE \"(key,value)\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "7206:         sqlite3_finalize(pStmt);",
          "7207:         pStmt = 0;",
          "7208:         zSql = sqlite3_mprintf(",
          "7210:                    \"VALUES(%Q,%Q);\", zKey, zValue);",
          "7211:         if( zSql==0 ) shell_out_of_memory();",
          "7212:         rx = sqlite3_prepare_v2(p->db, zSql, -1, &pStmt, 0);",
          "",
          "[Removed Lines]",
          "7209:                    \"REPLACE INTO temp.[\" BIND_PARAM_TABLE \"](key,value)\"",
          "",
          "[Added Lines]",
          "7217:                    \"REPLACE INTO temp.\" BIND_PARAM_TABLE \"(key,value)\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "7229:     if( nArg==3 && strcmp(azArg[1],\"unset\")==0 ){",
          "7230:       char *zSql = sqlite3_mprintf(",
          "7232:       if( zSql==0 ) shell_out_of_memory();",
          "7233:       sqlite3_exec(p->db, zSql, 0, 0, 0);",
          "7234:       sqlite3_free(zSql);",
          "",
          "[Removed Lines]",
          "7231:           \"DELETE FROM temp.[\" BIND_PARAM_TABLE \"] WHERE key=%Q\", azArg[2]);",
          "",
          "[Added Lines]",
          "7239:           \"DELETE FROM temp.\" BIND_PARAM_TABLE \" WHERE key=%Q\", azArg[2]);",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ]
      }
    },
    {
      "candidate_hash": "b531aa8fd9ca317c1ce586d1156c6c084a734264",
      "candidate_info": {
        "commit_hash": "b531aa8fd9ca317c1ce586d1156c6c084a734264",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b531aa8fd9ca317c1ce586d1156c6c084a734264",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "In a query that uses a partial index, the expression that is the WHERE clause of the partial index must always be true.  Use this fact to avoid evaluating identical terms in the WHERE clause of the query.\n\nFossilOrigin-Name: 9b2879629c34fc0a8e99d94648903eb93aabbc7a3682c80cb7382f9a9ca5ffb7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1f9fa58541dc974989eee9c9a5d453956f7dbcf42965ece2db2cb5dee3f3f5e2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1159:   }",
          "1160: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1169: static void whereApplyPartialIndexConstraints(",
          "1170:   Expr *pTruth,",
          "1171:   int iTabCur,",
          "1172:   WhereClause *pWC",
          "1173: ){",
          "1174:   int i;",
          "1175:   WhereTerm *pTerm;",
          "1176:   while( pTruth->op==TK_AND ){",
          "1177:     whereApplyPartialIndexConstraints(pTruth->pLeft, iTabCur, pWC);",
          "1178:     pTruth = pTruth->pRight;",
          "1179:   }",
          "1180:   for(i=0, pTerm=pWC->a; i<pWC->nTerm; i++, pTerm++){",
          "1181:     Expr *pExpr;",
          "1182:     if( pTerm->wtFlags & TERM_CODED ) continue;",
          "1183:     pExpr = pTerm->pExpr;",
          "1184:     if( sqlite3ExprCompare(0, pExpr, pTruth, iTabCur)==0 ){",
          "1185:       pTerm->wtFlags |= TERM_CODED;",
          "1186:     }",
          "1187:   }",
          "1188: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1768:       whereIndexExprTrans(pIdx, iCur, iIdxCur, pWInfo);",
          "1769:     }",
          "1772:     if( pLoop->wsFlags & WHERE_ONEROW ){",
          "1773:       pLevel->op = OP_Noop;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1803:     if( pIdx->pPartIdxWhere ){",
          "1804:       whereApplyPartialIndexConstraints(pIdx->pPartIdxWhere, iCur, pWC);",
          "1805:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9613c9f4a614e9e6c3144f8242c868aba8c32c06",
      "candidate_info": {
        "commit_hash": "9613c9f4a614e9e6c3144f8242c868aba8c32c06",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9613c9f4a614e9e6c3144f8242c868aba8c32c06",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fts3misc.test"
        ],
        "message": "Fix the fts3/4 integrity-check command so that it works with \"ORDER=DESC\" tables. Fix for [8a6fa2bb].\n\nFossilOrigin-Name: 5863546df99abd1ad4ebcaba18dec647be4368e2c13ce0b28e48c8608d3e87ef",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3misc.test||test/fts3misc.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5171:               pCsr += sqlite3Fts3GetVarint(pCsr, &iCol);",
          "5172:             }else{",
          "5173:               pCsr += sqlite3Fts3GetVarint(pCsr, &iVal);",
          "5175:             }",
          "5176:           }else{",
          "5177:             iPos += (iVal - 2);",
          "",
          "[Removed Lines]",
          "5174:               iDocid += iVal;",
          "",
          "[Added Lines]",
          "5174:               if( p->bDescIdx ){",
          "5175:                 iDocid -= iVal;",
          "5176:               }else{",
          "5177:                 iDocid += iVal;",
          "5178:               }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ffd4c30620abe6ba38d82f3db934d18cc8468aaac4cd50a4e01be8910854d3f0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3misc.test||test/fts3misc.test": [
          "File: test/fts3misc.test -> test/fts3misc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "238: }",
          "241: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240: #-------------------------------------------------------------------------",
          "241: #",
          "242: reset_db",
          "243: do_execsql_test 7.0.1 {",
          "244:   CREATE VIRTUAL TABLE vt0 USING fts4(c0, order=DESC);",
          "245:   INSERT INTO vt0(c0) VALUES (0), (0);",
          "246: }",
          "247: do_execsql_test 7.0.2 {",
          "248:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "249: }",
          "250: reset_db",
          "251: do_execsql_test 7.1.1 {",
          "252:   CREATE VIRTUAL TABLE vt0 USING fts4(c0, order=ASC);",
          "253:   INSERT INTO vt0(c0) VALUES (0), (0);",
          "254: }",
          "255: do_execsql_test 7.1.2 {",
          "256:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "257: }",
          "259: do_execsql_test 7.2.1 {",
          "260:   CREATE VIRTUAL TABLE ft USING fts4(c0, c1, order=DESC, prefix=1);",
          "261:   INSERT INTO ft VALUES('a b c d', 'hello world');",
          "262:   INSERT INTO ft VALUES('negative', 'positive');",
          "263:   INSERT INTO ft VALUES('hello world', 'a b c d');",
          "264: }",
          "265: do_execsql_test 7.2.2 {",
          "266:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "267: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}