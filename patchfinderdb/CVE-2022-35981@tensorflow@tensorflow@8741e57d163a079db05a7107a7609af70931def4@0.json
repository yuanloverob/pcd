{
  "cve_id": "CVE-2022-35981",
  "cve_desc": "TensorFlow is an open source platform for machine learning. `FractionalMaxPoolGrad` validates its inputs with `CHECK` failures instead of with returning errors. If it gets incorrectly sized inputs, the `CHECK` failure can be used to trigger a denial of service attack. We have patched the issue in GitHub commit 8741e57d163a079db05a7107a7609af70931def4. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "8741e57d163a079db05a7107a7609af70931def4",
  "patch_info": {
    "commit_hash": "8741e57d163a079db05a7107a7609af70931def4",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/8741e57d163a079db05a7107a7609af70931def4",
    "files": [
      "tensorflow/core/kernels/fractional_max_pool_op.cc",
      "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
    ],
    "message": "Fix security vulnerability with FractionalMaxPoolGrad\n\nPiperOrigin-RevId: 461722693",
    "before_after_code_files": [
      "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc",
      "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc": [
      "File: tensorflow/core/kernels/fractional_max_pool_op.cc -> tensorflow/core/kernels/fractional_max_pool_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: #include <random>",
      "20: #include <vector>",
      "24: #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"",
      "25: #include \"tensorflow/core/framework/numeric_op.h\"",
      "26: #include \"tensorflow/core/framework/op_kernel.h\"",
      "27: #include \"tensorflow/core/lib/random/random.h\"",
      "28: #include \"tensorflow/core/platform/logging.h\"",
      "29: #include \"tensorflow/core/platform/mutex.h\"",
      "30: #include \"tensorflow/core/util/guarded_philox_random.h\"",
      "",
      "[Removed Lines]",
      "22: #include \"tensorflow/core/kernels/fractional_pool_common.h\"",
      "",
      "[Added Lines]",
      "25: #include \"tensorflow/core/framework/op_requires.h\"",
      "26: #include \"tensorflow/core/kernels/fractional_pool_common.h\"",
      "28: #include \"tensorflow/core/platform/errors.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "352:         output_size[2] * output_size[1] * output_size[0];",
      "353:     for (int64_t i = 0; i < num_reshaped_cols; ++i) {",
      "354:       for (int64_t j = 0; j < output_size[3]; ++j) {",
      "356:       }",
      "357:     }",
      "",
      "[Removed Lines]",
      "355:         DCHECK_EQ(tensor_out_dup_mat(j, i), tensor_out_mat(j, i));",
      "",
      "[Added Lines]",
      "356:         OP_REQUIRES(context, tensor_out_dup_mat(j, i) == tensor_out_mat(j, i),",
      "357:                     errors::InvalidArgument(",
      "358:                         \"tensor_out_dup is not the same as tensor_out\"));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "370:     for (int index = 0; index < num_total_outputs; ++index) {",
      "371:       int input_backprop_index = out_arg_max_flat(index);",
      "377:       input_backprop_flat(input_backprop_index) += out_backprop_flat(index);",
      "378:     }",
      "379:   }",
      "",
      "[Removed Lines]",
      "373:       CHECK(input_backprop_index >= 0 &&",
      "374:             input_backprop_index < num_total_inputs)",
      "375:           << \"Invalid input backprop index: \" << input_backprop_index << \", \"",
      "376:           << num_total_inputs;",
      "",
      "[Added Lines]",
      "375:       OP_REQUIRES(",
      "376:           context,",
      "377:           input_backprop_index >= 0 && input_backprop_index < num_total_inputs,",
      "378:           errors::InvalidArgument(",
      "379:               \"Invalid input backprop index: \", input_backprop_index, \", \",",
      "380:               num_total_inputs));",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py": [
      "File: tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py -> tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "124:     Returns:",
      "125:       None",
      "126:     \"\"\"",
      "128:       p, r, c = nn_ops.fractional_max_pool_v2(",
      "129:           input_tensor,",
      "130:           pooling_ratio,",
      "",
      "[Removed Lines]",
      "127:     with self.cached_session() as sess:",
      "",
      "[Added Lines]",
      "127:     with self.cached_session():",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "155:           overlapping))",
      "156:       rand_mat = self._PRNG.randint(10, size=tensor_shape)",
      "157:       pooling_ratio = [1, math.sqrt(2), math.sqrt(2), 1]",
      "159:         p, r, c = nn_ops.fractional_max_pool_v2(",
      "160:             rand_mat,",
      "161:             pooling_ratio,",
      "",
      "[Removed Lines]",
      "158:       with self.cached_session() as sess:",
      "",
      "[Added Lines]",
      "158:       with self.cached_session():",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "630:       self.assertAllClose(expected_input_backprop_overlapping,",
      "631:                           input_backprop_overlapping)",
      "634: if __name__ == \"__main__\":",
      "635:   test.main()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "633:   def testInvalidSeqRaiseErrorForFractionalMaxPoolGrad(self):",
      "634:     with self.assertRaises(errors.InvalidArgumentError):",
      "635:       with self.cached_session() as _:",
      "636:         overlapping = True",
      "637:         orig_input = constant_op.constant(",
      "638:             .453409232, shape=[1, 7, 13, 1], dtype=dtypes.float32)",
      "639:         orig_output = constant_op.constant(",
      "640:             .453409232, shape=[1, 7, 13, 1], dtype=dtypes.float32)",
      "641:         out_backprop = constant_op.constant(",
      "642:             .453409232, shape=[1, 7, 13, 1], dtype=dtypes.float32)",
      "643:         row_pooling_sequence = constant_op.constant(",
      "644:             0, shape=[5], dtype=dtypes.int64)",
      "645:         col_pooling_sequence = constant_op.constant(",
      "646:             0, shape=[5], dtype=dtypes.int64)",
      "647:         t = gen_nn_ops.FractionalMaxPoolGrad(",
      "648:             orig_input=orig_input,",
      "649:             orig_output=orig_output,",
      "650:             out_backprop=out_backprop,",
      "651:             row_pooling_sequence=row_pooling_sequence,",
      "652:             col_pooling_sequence=col_pooling_sequence,",
      "653:             overlapping=overlapping)",
      "654:         self.evaluate(t)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7de159706c8c6b3eb0108019064f12746f81294c",
      "candidate_info": {
        "commit_hash": "7de159706c8c6b3eb0108019064f12746f81294c",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/7de159706c8c6b3eb0108019064f12746f81294c",
        "files": [
          "tensorflow/core/kernels/fractional_max_pool_op.cc",
          "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
        ],
        "message": "Fix security vulnerability with FractionalMaxPoolGrad\n\nPiperOrigin-RevId: 461722693",
        "before_after_code_files": [
          "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc",
          "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc",
            "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc",
            "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc": [
          "File: tensorflow/core/kernels/fractional_max_pool_op.cc -> tensorflow/core/kernels/fractional_max_pool_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #include <random>",
          "20: #include <vector>",
          "24: #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"",
          "25: #include \"tensorflow/core/framework/numeric_op.h\"",
          "26: #include \"tensorflow/core/framework/op_kernel.h\"",
          "27: #include \"tensorflow/core/lib/random/random.h\"",
          "28: #include \"tensorflow/core/platform/logging.h\"",
          "29: #include \"tensorflow/core/platform/mutex.h\"",
          "30: #include \"tensorflow/core/util/guarded_philox_random.h\"",
          "",
          "[Removed Lines]",
          "22: #include \"tensorflow/core/kernels/fractional_pool_common.h\"",
          "",
          "[Added Lines]",
          "25: #include \"tensorflow/core/framework/op_requires.h\"",
          "26: #include \"tensorflow/core/kernels/fractional_pool_common.h\"",
          "28: #include \"tensorflow/core/platform/errors.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "352:         output_size[2] * output_size[1] * output_size[0];",
          "353:     for (int64_t i = 0; i < num_reshaped_cols; ++i) {",
          "354:       for (int64_t j = 0; j < output_size[3]; ++j) {",
          "356:       }",
          "357:     }",
          "",
          "[Removed Lines]",
          "355:         DCHECK_EQ(tensor_out_dup_mat(j, i), tensor_out_mat(j, i));",
          "",
          "[Added Lines]",
          "356:         OP_REQUIRES(context, tensor_out_dup_mat(j, i) == tensor_out_mat(j, i),",
          "357:                     errors::InvalidArgument(",
          "358:                         \"tensor_out_dup is not the same as tensor_out\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "370:     for (int index = 0; index < num_total_outputs; ++index) {",
          "371:       int input_backprop_index = out_arg_max_flat(index);",
          "377:       input_backprop_flat(input_backprop_index) += out_backprop_flat(index);",
          "378:     }",
          "379:   }",
          "",
          "[Removed Lines]",
          "373:       CHECK(input_backprop_index >= 0 &&",
          "374:             input_backprop_index < num_total_inputs)",
          "375:           << \"Invalid input backprop index: \" << input_backprop_index << \", \"",
          "376:           << num_total_inputs;",
          "",
          "[Added Lines]",
          "375:       OP_REQUIRES(",
          "376:           context,",
          "377:           input_backprop_index >= 0 && input_backprop_index < num_total_inputs,",
          "378:           errors::InvalidArgument(",
          "379:               \"Invalid input backprop index: \", input_backprop_index, \", \",",
          "380:               num_total_inputs));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py": [
          "File: tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py -> tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:     Returns:",
          "125:       None",
          "126:     \"\"\"",
          "128:       p, r, c = nn_ops.fractional_max_pool_v2(",
          "129:           input_tensor,",
          "130:           pooling_ratio,",
          "",
          "[Removed Lines]",
          "127:     with self.cached_session() as sess:",
          "",
          "[Added Lines]",
          "127:     with self.cached_session():",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155:           overlapping))",
          "156:       rand_mat = self._PRNG.randint(10, size=tensor_shape)",
          "157:       pooling_ratio = [1, math.sqrt(2), math.sqrt(2), 1]",
          "159:         p, r, c = nn_ops.fractional_max_pool_v2(",
          "160:             rand_mat,",
          "161:             pooling_ratio,",
          "",
          "[Removed Lines]",
          "158:       with self.cached_session() as sess:",
          "",
          "[Added Lines]",
          "158:       with self.cached_session():",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "630:       self.assertAllClose(expected_input_backprop_overlapping,",
          "631:                           input_backprop_overlapping)",
          "634: if __name__ == \"__main__\":",
          "635:   test.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "633:   def testInvalidSeqRaiseErrorForFractionalMaxPoolGrad(self):",
          "634:     with self.assertRaises(errors.InvalidArgumentError):",
          "635:       with self.cached_session() as _:",
          "636:         overlapping = True",
          "637:         orig_input = constant_op.constant(",
          "638:             .453409232, shape=[1, 7, 13, 1], dtype=dtypes.float32)",
          "639:         orig_output = constant_op.constant(",
          "640:             .453409232, shape=[1, 7, 13, 1], dtype=dtypes.float32)",
          "641:         out_backprop = constant_op.constant(",
          "642:             .453409232, shape=[1, 7, 13, 1], dtype=dtypes.float32)",
          "643:         row_pooling_sequence = constant_op.constant(",
          "644:             0, shape=[5], dtype=dtypes.int64)",
          "645:         col_pooling_sequence = constant_op.constant(",
          "646:             0, shape=[5], dtype=dtypes.int64)",
          "647:         t = gen_nn_ops.FractionalMaxPoolGrad(",
          "648:             orig_input=orig_input,",
          "649:             orig_output=orig_output,",
          "650:             out_backprop=out_backprop,",
          "651:             row_pooling_sequence=row_pooling_sequence,",
          "652:             col_pooling_sequence=col_pooling_sequence,",
          "653:             overlapping=overlapping)",
          "654:         self.evaluate(t)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "da45c48c412fb9585ee0d99cd13b28acb1a4f20a",
      "candidate_info": {
        "commit_hash": "da45c48c412fb9585ee0d99cd13b28acb1a4f20a",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/da45c48c412fb9585ee0d99cd13b28acb1a4f20a",
        "files": [
          "tensorflow/core/kernels/fractional_max_pool_op.cc",
          "tensorflow/python/kernel_tests/fractional_max_pool_op_test.py"
        ],
        "message": "Fix security vulnerability with FractionalMaxPoolGrad\n\nPiperOrigin-RevId: 461722693",
        "before_after_code_files": [
          "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc",
          "tensorflow/python/kernel_tests/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/fractional_max_pool_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc": [
          "File: tensorflow/core/kernels/fractional_max_pool_op.cc -> tensorflow/core/kernels/fractional_max_pool_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #include <random>",
          "20: #include <vector>",
          "24: #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"",
          "25: #include \"tensorflow/core/framework/numeric_op.h\"",
          "26: #include \"tensorflow/core/framework/op_kernel.h\"",
          "27: #include \"tensorflow/core/lib/random/random.h\"",
          "28: #include \"tensorflow/core/platform/logging.h\"",
          "29: #include \"tensorflow/core/platform/mutex.h\"",
          "30: #include \"tensorflow/core/util/guarded_philox_random.h\"",
          "",
          "[Removed Lines]",
          "22: #include \"tensorflow/core/kernels/fractional_pool_common.h\"",
          "",
          "[Added Lines]",
          "25: #include \"tensorflow/core/framework/op_requires.h\"",
          "26: #include \"tensorflow/core/kernels/fractional_pool_common.h\"",
          "28: #include \"tensorflow/core/platform/errors.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "352:         output_size[2] * output_size[1] * output_size[0];",
          "353:     for (int64_t i = 0; i < num_reshaped_cols; ++i) {",
          "354:       for (int64_t j = 0; j < output_size[3]; ++j) {",
          "356:       }",
          "357:     }",
          "",
          "[Removed Lines]",
          "355:         DCHECK_EQ(tensor_out_dup_mat(j, i), tensor_out_mat(j, i));",
          "",
          "[Added Lines]",
          "356:         OP_REQUIRES(context, tensor_out_dup_mat(j, i) == tensor_out_mat(j, i),",
          "357:                     errors::InvalidArgument(",
          "358:                         \"tensor_out_dup is not the same as tensor_out\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "370:     for (int index = 0; index < num_total_outputs; ++index) {",
          "371:       int input_backprop_index = out_arg_max_flat(index);",
          "377:       input_backprop_flat(input_backprop_index) += out_backprop_flat(index);",
          "378:     }",
          "379:   }",
          "",
          "[Removed Lines]",
          "373:       CHECK(input_backprop_index >= 0 &&",
          "374:             input_backprop_index < num_total_inputs)",
          "375:           << \"Invalid input backprop index: \" << input_backprop_index << \", \"",
          "376:           << num_total_inputs;",
          "",
          "[Added Lines]",
          "375:       OP_REQUIRES(",
          "376:           context,",
          "377:           input_backprop_index >= 0 && input_backprop_index < num_total_inputs,",
          "378:           errors::InvalidArgument(",
          "379:               \"Invalid input backprop index: \", input_backprop_index, \", \",",
          "380:               num_total_inputs));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/fractional_max_pool_op_test.py": [
          "File: tensorflow/python/kernel_tests/fractional_max_pool_op_test.py -> tensorflow/python/kernel_tests/fractional_max_pool_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "128:     Returns:",
          "129:       None",
          "130:     \"\"\"",
          "132:       p, r, c = nn_ops.fractional_max_pool_v2(",
          "133:           input_tensor,",
          "134:           pooling_ratio,",
          "",
          "[Removed Lines]",
          "131:     with self.cached_session() as sess:",
          "",
          "[Added Lines]",
          "131:     with self.cached_session():",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159:           overlapping))",
          "160:       rand_mat = self._PRNG.randint(10, size=tensor_shape)",
          "161:       pooling_ratio = [1, math.sqrt(2), math.sqrt(2), 1]",
          "163:         p, r, c = nn_ops.fractional_max_pool_v2(",
          "164:             rand_mat,",
          "165:             pooling_ratio,",
          "",
          "[Removed Lines]",
          "162:       with self.cached_session() as sess:",
          "",
          "[Added Lines]",
          "162:       with self.cached_session():",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "616:       self.assertAllClose(expected_input_backprop_overlapping,",
          "617:                           input_backprop_overlapping)",
          "620: if __name__ == \"__main__\":",
          "621:   test.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "619:   def testInvalidSeqRaiseErrorForFractionalMaxPoolGrad(self):",
          "620:     with self.assertRaises(errors.InvalidArgumentError):",
          "621:       with self.cached_session() as _:",
          "622:         overlapping = True",
          "623:         orig_input = constant_op.constant(",
          "624:             .453409232, shape=[1, 7, 13, 1], dtype=dtypes.float32)",
          "625:         orig_output = constant_op.constant(",
          "626:             .453409232, shape=[1, 7, 13, 1], dtype=dtypes.float32)",
          "627:         out_backprop = constant_op.constant(",
          "628:             .453409232, shape=[1, 7, 13, 1], dtype=dtypes.float32)",
          "629:         row_pooling_sequence = constant_op.constant(",
          "630:             0, shape=[5], dtype=dtypes.int64)",
          "631:         col_pooling_sequence = constant_op.constant(",
          "632:             0, shape=[5], dtype=dtypes.int64)",
          "633:         t = gen_nn_ops.FractionalMaxPoolGrad(",
          "634:             orig_input=orig_input,",
          "635:             orig_output=orig_output,",
          "636:             out_backprop=out_backprop,",
          "637:             row_pooling_sequence=row_pooling_sequence,",
          "638:             col_pooling_sequence=col_pooling_sequence,",
          "639:             overlapping=overlapping)",
          "640:         self.evaluate(t)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "59ceddb3fa64000cf99d11129680b7a8943a4b29",
      "candidate_info": {
        "commit_hash": "59ceddb3fa64000cf99d11129680b7a8943a4b29",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/59ceddb3fa64000cf99d11129680b7a8943a4b29",
        "files": [
          "tensorflow/core/kernels/fractional_max_pool_op.cc",
          "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
        ],
        "message": "Fix security vulnerability with FractionalMaxPoolGrad\n\nPiperOrigin-RevId: 461722693",
        "before_after_code_files": [
          "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc",
          "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc",
            "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc",
            "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc": [
          "File: tensorflow/core/kernels/fractional_max_pool_op.cc -> tensorflow/core/kernels/fractional_max_pool_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #include <random>",
          "20: #include <vector>",
          "24: #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"",
          "25: #include \"tensorflow/core/framework/numeric_op.h\"",
          "26: #include \"tensorflow/core/framework/op_kernel.h\"",
          "27: #include \"tensorflow/core/lib/random/random.h\"",
          "28: #include \"tensorflow/core/platform/logging.h\"",
          "29: #include \"tensorflow/core/platform/mutex.h\"",
          "30: #include \"tensorflow/core/util/guarded_philox_random.h\"",
          "",
          "[Removed Lines]",
          "22: #include \"tensorflow/core/kernels/fractional_pool_common.h\"",
          "",
          "[Added Lines]",
          "25: #include \"tensorflow/core/framework/op_requires.h\"",
          "26: #include \"tensorflow/core/kernels/fractional_pool_common.h\"",
          "28: #include \"tensorflow/core/platform/errors.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "352:         output_size[2] * output_size[1] * output_size[0];",
          "353:     for (int64_t i = 0; i < num_reshaped_cols; ++i) {",
          "354:       for (int64_t j = 0; j < output_size[3]; ++j) {",
          "356:       }",
          "357:     }",
          "",
          "[Removed Lines]",
          "355:         DCHECK_EQ(tensor_out_dup_mat(j, i), tensor_out_mat(j, i));",
          "",
          "[Added Lines]",
          "356:         OP_REQUIRES(context, tensor_out_dup_mat(j, i) == tensor_out_mat(j, i),",
          "357:                     errors::InvalidArgument(",
          "358:                         \"tensor_out_dup is not the same as tensor_out\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "370:     for (int index = 0; index < num_total_outputs; ++index) {",
          "371:       int input_backprop_index = out_arg_max_flat(index);",
          "377:       input_backprop_flat(input_backprop_index) += out_backprop_flat(index);",
          "378:     }",
          "379:   }",
          "",
          "[Removed Lines]",
          "373:       CHECK(input_backprop_index >= 0 &&",
          "374:             input_backprop_index < num_total_inputs)",
          "375:           << \"Invalid input backprop index: \" << input_backprop_index << \", \"",
          "376:           << num_total_inputs;",
          "",
          "[Added Lines]",
          "375:       OP_REQUIRES(",
          "376:           context,",
          "377:           input_backprop_index >= 0 && input_backprop_index < num_total_inputs,",
          "378:           errors::InvalidArgument(",
          "379:               \"Invalid input backprop index: \", input_backprop_index, \", \",",
          "380:               num_total_inputs));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py": [
          "File: tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py -> tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:     Returns:",
          "125:       None",
          "126:     \"\"\"",
          "128:       p, r, c = nn_ops.fractional_max_pool_v2(",
          "129:           input_tensor,",
          "130:           pooling_ratio,",
          "",
          "[Removed Lines]",
          "127:     with self.cached_session() as sess:",
          "",
          "[Added Lines]",
          "127:     with self.cached_session():",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155:           overlapping))",
          "156:       rand_mat = self._PRNG.randint(10, size=tensor_shape)",
          "157:       pooling_ratio = [1, math.sqrt(2), math.sqrt(2), 1]",
          "159:         p, r, c = nn_ops.fractional_max_pool_v2(",
          "160:             rand_mat,",
          "161:             pooling_ratio,",
          "",
          "[Removed Lines]",
          "158:       with self.cached_session() as sess:",
          "",
          "[Added Lines]",
          "158:       with self.cached_session():",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "630:       self.assertAllClose(expected_input_backprop_overlapping,",
          "631:                           input_backprop_overlapping)",
          "634: if __name__ == \"__main__\":",
          "635:   test.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "633:   def testInvalidSeqRaiseErrorForFractionalMaxPoolGrad(self):",
          "634:     with self.assertRaises(errors.InvalidArgumentError):",
          "635:       with self.cached_session() as _:",
          "636:         overlapping = True",
          "637:         orig_input = constant_op.constant(",
          "638:             .453409232, shape=[1, 7, 13, 1], dtype=dtypes.float32)",
          "639:         orig_output = constant_op.constant(",
          "640:             .453409232, shape=[1, 7, 13, 1], dtype=dtypes.float32)",
          "641:         out_backprop = constant_op.constant(",
          "642:             .453409232, shape=[1, 7, 13, 1], dtype=dtypes.float32)",
          "643:         row_pooling_sequence = constant_op.constant(",
          "644:             0, shape=[5], dtype=dtypes.int64)",
          "645:         col_pooling_sequence = constant_op.constant(",
          "646:             0, shape=[5], dtype=dtypes.int64)",
          "647:         t = gen_nn_ops.FractionalMaxPoolGrad(",
          "648:             orig_input=orig_input,",
          "649:             orig_output=orig_output,",
          "650:             out_backprop=out_backprop,",
          "651:             row_pooling_sequence=row_pooling_sequence,",
          "652:             col_pooling_sequence=col_pooling_sequence,",
          "653:             overlapping=overlapping)",
          "654:         self.evaluate(t)",
          "",
          "---------------"
        ]
      }
    }
  ]
}