{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e238e3141381dc5a6e811e94f0a1ab93c1bb2286",
      "candidate_info": {
        "commit_hash": "e238e3141381dc5a6e811e94f0a1ab93c1bb2286",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e238e3141381dc5a6e811e94f0a1ab93c1bb2286",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/loadext.c"
        ],
        "message": "Yet another attempt to enhance sqlite3_load_extension() so that it works with Window-style pathnames using a backslash separator character.\n\nFossilOrigin-Name: b73d9a7d6f7fec0ffc9640902a849289c305f8651e891388c01255c4da7a6c4b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/loadext.c||src/loadext.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 57b16d8ca3d1ede3b411389256bec6686433aae716f47bca309ee7c8e5fe3128",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/loadext.c||src/loadext.c": [
          "File: src/loadext.c -> src/loadext.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "480:   sqlite3_database_file_object,",
          "481: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "485: #if SQLITE_OS_WIN",
          "486: # define DirSep(X)  ((X)=='/'||(X)=='\\\\')",
          "487: #else",
          "488: # define DirSep(X)  ((X)=='/')",
          "489: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "581:       return SQLITE_NOMEM_BKPT;",
          "582:     }",
          "583:     memcpy(zAltEntry, \"sqlite3_\", 8);",
          "589:     iFile++;",
          "590:     if( sqlite3_strnicmp(zFile+iFile, \"lib\", 3)==0 ) iFile += 3;",
          "591:     for(iEntry=8; (c = zFile[iFile])!=0 && c!='.'; iFile++){",
          "",
          "[Removed Lines]",
          "584: #if SQLITE_OS_WIN",
          "585:     for(iFile=ncFile-1; iFile>=0 && ((c=zFile[iFile]!='/')&&c!='\\\\'); iFile--){}",
          "586: #else",
          "587:     for(iFile=ncFile-1; iFile>=0 && zFile[iFile]!='/'; iFile--){}",
          "588: #endif",
          "",
          "[Added Lines]",
          "592:     for(iFile=ncFile-1; iFile>=0 && !DirSep(zFile[iFile]); iFile--){}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8c1febb2f91ec824362ca9f5b400622262c17191",
      "candidate_info": {
        "commit_hash": "8c1febb2f91ec824362ca9f5b400622262c17191",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8c1febb2f91ec824362ca9f5b400622262c17191",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/update.c"
        ],
        "message": "The OP_RealAffinity opcode is not necessary after reading values from a virtual table (such as rtree).  It is harmless, but it does use CPU cycles.  Might as well leave it off.\n\nFossilOrigin-Name: dc18d89354cffcb726722c234a0271ab628a71277b22887eea2bf118028193a6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/update.c||src/update.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0d69f76f0865f9626078bee087a22fb826407279e78cf9d5382e1c985c9f64a9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:     }",
          "74:   }",
          "75: #ifndef SQLITE_OMIT_FLOATING_POINT",
          "77:     sqlite3VdbeAddOp1(v, OP_RealAffinity, iReg);",
          "78:   }",
          "79: #endif",
          "",
          "[Removed Lines]",
          "76:   if( pTab->aCol[i].affinity==SQLITE_AFF_REAL ){",
          "",
          "[Added Lines]",
          "76:   if( pTab->aCol[i].affinity==SQLITE_AFF_REAL && !IsVirtual(pTab) ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8c7715d1cc8736c72a1d628a1aa1509c1cc1dc3b",
      "candidate_info": {
        "commit_hash": "8c7715d1cc8736c72a1d628a1aa1509c1cc1dc3b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8c7715d1cc8736c72a1d628a1aa1509c1cc1dc3b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Improved assert() statements on the OP_Column opcode.\n\nFossilOrigin-Name: c538601e4c979ee59f18d19e6eb6296cebfa580fb029a18d5a3f0dd9393acb75",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 01aeeb5c4c70a0f19651448e94ad5c6810cab3d6957b5bc7a9b4b8e0b887f3de",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2552:   pC = p->apCsr[pOp->p1];",
          "2553:   p2 = pOp->p2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2552:   assert( pOp->p1>=0 && pOp->p1<p->nCursor );",
          "2554:   assert( pC!=0 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2561:   assert( pOp->p3>0 && pOp->p3<=(p->nMem+1 - p->nCursor) );",
          "2562:   pDest = &aMem[pOp->p3];",
          "2563:   memAboutToChange(p, pDest);",
          "2565:   assert( pC!=0 );",
          "2566:   assert( p2<pC->nField );",
          "2567:   aOffset = pC->aOffset;",
          "",
          "[Removed Lines]",
          "2564:   assert( pOp->p1>=0 && pOp->p1<p->nCursor );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7093a3be0390f1ba0fad7bed359c3136d30cfd07",
      "candidate_info": {
        "commit_hash": "7093a3be0390f1ba0fad7bed359c3136d30cfd07",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7093a3be0390f1ba0fad7bed359c3136d30cfd07",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test6.c",
          "src/test_devsym.c",
          "src/test_vfs.c"
        ],
        "message": "Fix some test code so that testfixture can build with SQLITE_OMIT_WAL defined.\n\nFossilOrigin-Name: dd009cd7aec3598e930806907601f4f0f9b0021ea99fa6c5e29e88f1246066ed",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test6.c||src/test6.c",
          "src/test_devsym.c||src/test_devsym.c",
          "src/test_vfs.c||src/test_vfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ad5ab24ebd557e7af1d92ab3fbcb3747c04da5ad4ed779fb6391dc94042687dd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test6.c||src/test6.c": [
          "File: src/test6.c -> src/test6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "552: static int cfShmLock(sqlite3_file *pFile, int ofst, int n, int flags){",
          "554: }",
          "555: static void cfShmBarrier(sqlite3_file *pFile){",
          "557: }",
          "558: static int cfShmUnmap(sqlite3_file *pFile, int delFlag){",
          "560: }",
          "561: static int cfShmMap(",
          "",
          "[Removed Lines]",
          "553:   return sqlite3OsShmLock(((CrashFile*)pFile)->pRealFile, ofst, n, flags);",
          "556:   sqlite3OsShmBarrier(((CrashFile*)pFile)->pRealFile);",
          "559:   return sqlite3OsShmUnmap(((CrashFile*)pFile)->pRealFile, delFlag);",
          "",
          "[Added Lines]",
          "553:   sqlite3_file *pReal = ((CrashFile*)pFile)->pRealFile;",
          "554:   return pReal->pMethods->xShmLock(pReal, ofst, n, flags);",
          "557:   sqlite3_file *pReal = ((CrashFile*)pFile)->pRealFile;",
          "558:   pReal->pMethods->xShmBarrier(pReal);",
          "561:   sqlite3_file *pReal = ((CrashFile*)pFile)->pRealFile;",
          "562:   return pReal->pMethods->xShmUnmap(pReal, delFlag);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "567: ){",
          "569: }",
          "571: static const sqlite3_io_methods CrashFileVtab = {",
          "",
          "[Removed Lines]",
          "568:   return sqlite3OsShmMap(((CrashFile*)pFile)->pRealFile, iRegion, sz, w, pp);",
          "",
          "[Added Lines]",
          "571:   sqlite3_file *pReal = ((CrashFile*)pFile)->pRealFile;",
          "572:   return pReal->pMethods->xShmMap(pReal, iRegion, sz, w, pp);",
          "",
          "---------------"
        ],
        "src/test_devsym.c||src/test_devsym.c": [
          "File: src/test_devsym.c -> src/test_devsym.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "192: static int devsymShmLock(sqlite3_file *pFile, int ofst, int n, int flags){",
          "193:   devsym_file *p = (devsym_file *)pFile;",
          "195: }",
          "196: static int devsymShmMap(",
          "197:   sqlite3_file *pFile,",
          "",
          "[Removed Lines]",
          "194:   return sqlite3OsShmLock(p->pReal, ofst, n, flags);",
          "",
          "[Added Lines]",
          "194:   return p->pReal->pMethods->xShmLock(p->pReal, ofst, n, flags);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "201:   void volatile **pp",
          "202: ){",
          "203:   devsym_file *p = (devsym_file *)pFile;",
          "205: }",
          "206: static void devsymShmBarrier(sqlite3_file *pFile){",
          "207:   devsym_file *p = (devsym_file *)pFile;",
          "209: }",
          "210: static int devsymShmUnmap(sqlite3_file *pFile, int delFlag){",
          "211:   devsym_file *p = (devsym_file *)pFile;",
          "213: }",
          "",
          "[Removed Lines]",
          "204:   return sqlite3OsShmMap(p->pReal, iRegion, szRegion, isWrite, pp);",
          "208:   sqlite3OsShmBarrier(p->pReal);",
          "212:   return sqlite3OsShmUnmap(p->pReal, delFlag);",
          "",
          "[Added Lines]",
          "204:   return p->pReal->pMethods->xShmMap(p->pReal, iRegion, szRegion, isWrite, pp);",
          "208:   p->pReal->pMethods->xShmBarrier(p->pReal);",
          "212:   return p->pReal->pMethods->xShmUnmap(p->pReal, delFlag);",
          "",
          "---------------"
        ],
        "src/test_vfs.c||src/test_vfs.c": [
          "File: src/test_vfs.c -> src/test_vfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "895:   Testvfs *p = (Testvfs *)(pFd->pVfs->pAppData);",
          "897:   if( p->isFullshm ){",
          "899:   }",
          "901:   if( 0==pFd->pShm ){",
          "",
          "[Removed Lines]",
          "898:     return sqlite3OsShmMap(pFd->pReal, iPage, pgsz, isWrite, pp);",
          "",
          "[Added Lines]",
          "898:     sqlite3_file *pReal = pFd->pReal;",
          "899:     return pReal->pMethods->xShmMap(pReal, iPage, pgsz, isWrite, pp);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "945:   char zLock[80];",
          "947:   if( p->isFullshm ){",
          "949:   }",
          "951:   if( p->pScript && p->mask&TESTVFS_SHMLOCK_MASK ){",
          "",
          "[Removed Lines]",
          "948:     return sqlite3OsShmLock(pFd->pReal, ofst, n, flags);",
          "",
          "[Added Lines]",
          "949:     sqlite3_file *pReal = pFd->pReal;",
          "950:     return pReal->pMethods->xShmLock(pReal, ofst, n, flags);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1009:   }",
          "1011:   if( p->isFullshm ){",
          "1013:     return;",
          "1014:   }",
          "1015: }",
          "",
          "[Removed Lines]",
          "1012:     sqlite3OsShmBarrier(pFd->pReal);",
          "",
          "[Added Lines]",
          "1014:     sqlite3_file *pReal = pFd->pReal;",
          "1015:     pReal->pMethods->xShmBarrier(pReal);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1025:   TestvfsFd **ppFd;",
          "1027:   if( p->isFullshm ){",
          "1029:   }",
          "1031:   if( !pBuffer ) return SQLITE_OK;",
          "",
          "[Removed Lines]",
          "1028:     return sqlite3OsShmUnmap(pFd->pReal, deleteFlag);",
          "",
          "[Added Lines]",
          "1031:     sqlite3_file *pReal = pFd->pReal;",
          "1032:     return pReal->pMethods->xShmUnmap(pReal, deleteFlag);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7dc76d8ba03f4ad649d4022d78e94e6cb8ed0355",
      "candidate_info": {
        "commit_hash": "7dc76d8ba03f4ad649d4022d78e94e6cb8ed0355",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7dc76d8ba03f4ad649d4022d78e94e6cb8ed0355",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "Fix an out-of-bounds array reference in the generated column logic. Problem discovered by valgrind.\n\nFossilOrigin-Name: a0ab42f779b9a96f4e43879210dfaba8fa593de77fc0ec0e2e6f116d9301ea59",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6601da58032d18ae00b466c0f2077fb2b1ecd84225b56e1787724bea478eedc9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "202: }",
          "207: static int exprColumnFlagUnion(Walker *pWalker, Expr *pExpr){",
          "209:     pWalker->eCode |= pWalker->u.pTab->aCol[pExpr->iColumn].colFlags;",
          "210:   }",
          "211:   return WRC_Continue;",
          "",
          "[Removed Lines]",
          "208:   if( pExpr->op==TK_COLUMN ){",
          "",
          "[Added Lines]",
          "208:   if( pExpr->op==TK_COLUMN && pExpr->iColumn>=0 ){",
          "209:     assert( pExpr->iColumn < pWalker->u.pTab->nCol );",
          "",
          "---------------"
        ]
      }
    }
  ]
}