{
  "cve_id": "CVE-2022-29227",
  "cve_desc": "Envoy is a cloud-native high-performance edge/middle/service proxy. In versions prior to 1.22.1 if Envoy attempts to send an internal redirect of an HTTP request consisting of more than HTTP headers, there\u2019s a lifetime bug which can be triggered. If while replaying the request Envoy sends a local reply when the redirect headers are processed, the downstream state indicates that the downstream stream is not complete. On sending the local reply, Envoy will attempt to reset the upstream stream, but as it is actually complete, and deleted, this result in a use-after-free. Users are advised to upgrade. Users unable to upgrade are advised to disable internal redirects if crashes are observed.",
  "repo": "envoyproxy/envoy",
  "patch_hash": "fe7c69c248f4fe5a9080c7ccb35275b5218bb5ab",
  "patch_info": {
    "commit_hash": "fe7c69c248f4fe5a9080c7ccb35275b5218bb5ab",
    "repo": "envoyproxy/envoy",
    "commit_url": "https://github.com/envoyproxy/envoy/commit/fe7c69c248f4fe5a9080c7ccb35275b5218bb5ab",
    "files": [
      "source/common/http/conn_manager_impl.cc",
      "source/common/http/filter_manager.cc",
      "source/common/http/filter_manager.h",
      "source/common/http/http1/codec_impl.cc",
      "source/common/stream_info/stream_info_impl.h",
      "test/common/stream_info/stream_info_impl_test.cc",
      "test/integration/cds_integration_test.cc"
    ],
    "message": "internal redirect: fix a lifetime bug (#785)\n\nSigned-off-by: Alyssa Wilk <alyssar@chromium.org>\nSigned-off-by: Matt Klein <mklein@lyft.com>\nSigned-off-by: Pradeep Rao <pcrao@google.com>",
    "before_after_code_files": [
      "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc",
      "source/common/http/filter_manager.cc||source/common/http/filter_manager.cc",
      "source/common/http/filter_manager.h||source/common/http/filter_manager.h",
      "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc",
      "source/common/stream_info/stream_info_impl.h||source/common/stream_info/stream_info_impl.h",
      "test/common/stream_info/stream_info_impl_test.cc||test/common/stream_info/stream_info_impl_test.cc",
      "test/integration/cds_integration_test.cc||test/integration/cds_integration_test.cc"
    ]
  },
  "patch_diff": {
    "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc": [
      "File: source/common/http/conn_manager_impl.cc -> source/common/http/conn_manager_impl.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "1729:             filter_state->parent(), StreamInfo::FilterState::LifeSpan::FilterChain);",
      "1730:   }",
      "1732:   new_stream.decodeHeaders(std::move(request_headers_), !proxy_body);",
      "1733:   if (proxy_body) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1735:   (*connection_manager_.streams_.begin())",
      "1736:       ->filter_manager_.streamInfo()",
      "1737:       .setFromForRecreateStream(filter_manager_.streamInfo());",
      "",
      "---------------"
    ],
    "source/common/http/filter_manager.cc||source/common/http/filter_manager.cc": [
      "File: source/common/http/filter_manager.cc -> source/common/http/filter_manager.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "327:   return parent_.buffered_request_data_;",
      "328: }",
      "332: void ActiveStreamDecoderFilter::doHeaders(bool end_stream) {",
      "333:   parent_.decodeHeaders(this, *parent_.filter_manager_callbacks_.requestHeaders(), end_stream);",
      "",
      "[Removed Lines]",
      "330: bool ActiveStreamDecoderFilter::complete() { return parent_.state_.remote_decode_complete_; }",
      "",
      "[Added Lines]",
      "330: bool ActiveStreamDecoderFilter::complete() { return parent_.remoteDecodeComplete(); }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "843: }",
      "845: void FilterManager::maybeEndDecode(bool end_stream) {",
      "849:     stream_info_.downstreamTiming().onLastDownstreamRxByteReceived(dispatcher().timeSource());",
      "850:     ENVOY_STREAM_LOG(debug, \"request end stream\", *this);",
      "851:   }",
      "",
      "[Removed Lines]",
      "846:   ASSERT(!state_.remote_decode_complete_);",
      "847:   state_.remote_decode_complete_ = end_stream;",
      "848:   if (end_stream) {",
      "",
      "[Added Lines]",
      "847:   if (end_stream && !remoteDecodeComplete()) {",
      "",
      "---------------"
    ],
    "source/common/http/filter_manager.h||source/common/http/filter_manager.h": [
      "File: source/common/http/filter_manager.h -> source/common/http/filter_manager.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "910:   bool remoteDecodeComplete() const { return state_.remote_decode_complete_; }",
      "",
      "[Added Lines]",
      "910:   bool remoteDecodeComplete() const {",
      "911:     return stream_info_.downstreamTiming() &&",
      "912:            stream_info_.downstreamTiming()->lastDownstreamRxByteReceived().has_value();",
      "913:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1059:   struct State {",
      "1060:     State()",
      "1066:     uint32_t filter_call_state_{0};",
      "1068:     bool remote_encode_complete_ : 1;",
      "1070:     bool local_complete_ : 1; // This indicates that local is complete prior to filter processing.",
      "",
      "[Removed Lines]",
      "1061:         : remote_encode_complete_(false), remote_decode_complete_(false), local_complete_(false),",
      "1062:           has_1xx_headers_(false), created_filter_chain_(false), is_head_request_(false),",
      "1063:           is_grpc_request_(false), non_100_response_headers_encoded_(false),",
      "1064:           under_on_local_reply_(false), decoder_filter_chain_aborted_(false),",
      "1065:           encoder_filter_chain_aborted_(false), saw_downstream_reset_(false) {}",
      "1069:     bool remote_decode_complete_ : 1;",
      "",
      "[Added Lines]",
      "1064:         : remote_encode_complete_(false), local_complete_(false), has_1xx_headers_(false),",
      "1065:           created_filter_chain_(false), is_head_request_(false), is_grpc_request_(false),",
      "1066:           non_100_response_headers_encoded_(false), under_on_local_reply_(false),",
      "1067:           decoder_filter_chain_aborted_(false), encoder_filter_chain_aborted_(false),",
      "1068:           saw_downstream_reset_(false) {}",
      "",
      "---------------"
    ],
    "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc": [
      "File: source/common/http/http1/codec_impl.cc -> source/common/http/http1/codec_impl.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "1203: }",
      "1205: void ServerConnectionImpl::onResetStream(StreamResetReason reason) {",
      "1208: }",
      "1210: Status ServerConnectionImpl::sendProtocolError(absl::string_view details) {",
      "",
      "[Removed Lines]",
      "1206:   active_request_->response_encoder_.runResetCallbacks(reason);",
      "1207:   connection_.dispatcher().deferredDelete(std::move(active_request_));",
      "",
      "[Added Lines]",
      "1206:   if (active_request_) {",
      "1207:     active_request_->response_encoder_.runResetCallbacks(reason);",
      "1208:     connection_.dispatcher().deferredDelete(std::move(active_request_));",
      "1209:   }",
      "",
      "---------------"
    ],
    "source/common/stream_info/stream_info_impl.h||source/common/stream_info/stream_info_impl.h": [
      "File: source/common/stream_info/stream_info_impl.h -> source/common/stream_info/stream_info_impl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "308:     ASSERT(downstream_bytes_meter_.get() == downstream_bytes_meter.get());",
      "309:   }",
      "311:   TimeSource& time_source_;",
      "314:   absl::optional<MonotonicTime> final_time_;",
      "316:   absl::optional<Http::Protocol> protocol_;",
      "",
      "[Removed Lines]",
      "312:   const SystemTime start_time_;",
      "313:   const MonotonicTime start_time_monotonic_;",
      "",
      "[Added Lines]",
      "315:   void setFromForRecreateStream(StreamInfo& info) {",
      "316:     downstream_timing_ = info.downstreamTiming();",
      "317:     protocol_ = info.protocol();",
      "318:     bytes_received_ = info.bytesReceived();",
      "319:     downstream_bytes_meter_ = info.getDownstreamBytesMeter();",
      "321:     start_time_ = info.startTime();",
      "322:     start_time_monotonic_ = info.startTimeMonotonic();",
      "323:   }",
      "326:   SystemTime start_time_;",
      "327:   MonotonicTime start_time_monotonic_;",
      "",
      "---------------"
    ],
    "test/common/stream_info/stream_info_impl_test.cc||test/common/stream_info/stream_info_impl_test.cc": [
      "File: test/common/stream_info/stream_info_impl_test.cc -> test/common/stream_info/stream_info_impl_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "219:   }",
      "220: }",
      "222: TEST_F(StreamInfoImplTest, DynamicMetadataTest) {",
      "223:   StreamInfoImpl stream_info(Http::Protocol::Http2, test_time_.timeSystem(), nullptr);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "222: TEST_F(StreamInfoImplTest, SetFrom) {",
      "223:   StreamInfoImpl s1(Http::Protocol::Http2, test_time_.timeSystem(), nullptr);",
      "225:   s1.addBytesReceived(1);",
      "226:   s1.downstreamTiming().onLastDownstreamRxByteReceived(test_time_.timeSystem());",
      "228: #ifdef __clang__",
      "229: #if defined(__linux__)",
      "230: #if defined(__has_feature) && !(__has_feature(thread_sanitizer))",
      "231:   ASSERT_TRUE(sizeof(s1) == 760 || sizeof(s1) == 776 || sizeof(s1) == 800)",
      "232:       << \"If adding fields to StreamInfoImpl, please check to see if you \"",
      "233:          \"need to add them to setFromForRecreateStream! Current size \"",
      "234:       << sizeof(s1);",
      "235: #endif",
      "236: #endif",
      "237: #endif",
      "239:   StreamInfoImpl s2(Http::Protocol::Http11, test_time_.timeSystem(), nullptr);",
      "240:   s2.setFromForRecreateStream(s1);",
      "241:   EXPECT_EQ(s1.startTime(), s2.startTime());",
      "242:   EXPECT_EQ(s1.startTimeMonotonic(), s2.startTimeMonotonic());",
      "243:   EXPECT_EQ(s1.downstreamTiming().lastDownstreamRxByteReceived(),",
      "244:             s2.downstreamTiming().lastDownstreamRxByteReceived());",
      "245:   EXPECT_EQ(s1.protocol(), s2.protocol());",
      "246:   EXPECT_EQ(s1.bytesReceived(), s2.bytesReceived());",
      "247:   EXPECT_EQ(s1.getDownstreamBytesMeter(), s2.getDownstreamBytesMeter());",
      "248: }",
      "",
      "---------------"
    ],
    "test/integration/cds_integration_test.cc||test/integration/cds_integration_test.cc": [
      "File: test/integration/cds_integration_test.cc -> test/integration/cds_integration_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "303:   cleanupUpstreamAndDownstream();",
      "304: }",
      "308: TEST_P(CdsIntegrationTest, VersionsRememberedAfterReconnect) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "307: TEST_P(CdsIntegrationTest, TwoClustersAndRedirects) {",
      "308:   setDownstreamProtocol(Http::CodecType::HTTP1);",
      "309:   config_helper_.addConfigModifier(",
      "310:       [](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
      "311:              hcm) {",
      "312:         auto* route = hcm.mutable_route_config()->mutable_virtual_hosts(0)->mutable_routes(1);",
      "313:         route->mutable_route()",
      "314:             ->mutable_internal_redirect_policy()",
      "315:             ->mutable_redirect_response_codes()",
      "316:             ->Add(302);",
      "317:       });",
      "320:   initialize();",
      "321:   sendDiscoveryResponse<envoy::config::cluster::v3::Cluster>(",
      "322:       Config::TypeUrl::get().Cluster, {cluster1_, cluster2_}, {cluster2_}, {}, \"42\");",
      "324:   test_server_->waitForGaugeGe(\"cluster_manager.active_clusters\", 3);",
      "326:   sendDiscoveryResponse<envoy::config::cluster::v3::Cluster>(Config::TypeUrl::get().Cluster,",
      "327:                                                              {cluster2_}, {}, {ClusterName1}, \"43\");",
      "328:   test_server_->waitForCounterGe(\"cluster_manager.cluster_removed\", 1);",
      "330:   codec_client_ = makeHttpConnection(makeClientConnection((lookupPort(\"http\"))));",
      "331:   default_request_headers_.setPath(\"/cluster2\");",
      "332:   default_request_headers_.setContentLength(\"4\");",
      "333:   auto encoder_decoder = codec_client_->startRequest(default_request_headers_);",
      "334:   Buffer::OwnedImpl data(\"body\");",
      "335:   encoder_decoder.first.encodeData(data, true);",
      "336:   auto& response = encoder_decoder.second;",
      "338:   ASSERT_TRUE(fake_upstreams_[UpstreamIndex2]->waitForHttpConnection(*dispatcher_,",
      "339:                                                                      fake_upstream_connection_));",
      "340:   ASSERT_TRUE(fake_upstream_connection_->waitForNewStream(*dispatcher_, upstream_request_));",
      "341:   ASSERT_TRUE(upstream_request_->waitForEndStream(*dispatcher_));",
      "343:   Http::TestResponseHeaderMapImpl redirect_response{",
      "344:       {\":status\", \"302\"}, {\"content-length\", \"0\"}, {\"location\", \"http://host/cluster1\"}};",
      "347:   upstream_request_->encodeHeaders(redirect_response, true);",
      "348:   ASSERT_TRUE(response->waitForEndStream());",
      "349:   EXPECT_EQ(\"503\", response->headers().getStatusValue());",
      "350: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b26b45eaacb810be390d7cfc7e21b8f5de32abfd",
      "candidate_info": {
        "commit_hash": "b26b45eaacb810be390d7cfc7e21b8f5de32abfd",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/b26b45eaacb810be390d7cfc7e21b8f5de32abfd",
        "files": [
          "source/common/http/conn_manager_impl.cc",
          "source/common/http/filter_manager.cc",
          "source/common/http/filter_manager.h",
          "source/common/http/http1/codec_impl.cc",
          "source/common/stream_info/stream_info_impl.h",
          "test/common/stream_info/stream_info_impl_test.cc",
          "test/integration/cds_integration_test.cc"
        ],
        "message": "internal redirect: fix a lifetime bug (#785)\n\nSigned-off-by: Alyssa Wilk <alyssar@chromium.org>\nSigned-off-by: Matt Klein <mklein@lyft.com>\nSigned-off-by: Pradeep Rao <pcrao@google.com>\n\nSigned-off-by: Ryan Northey <ryan@synca.io>",
        "before_after_code_files": [
          "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc",
          "source/common/http/filter_manager.cc||source/common/http/filter_manager.cc",
          "source/common/http/filter_manager.h||source/common/http/filter_manager.h",
          "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc",
          "source/common/stream_info/stream_info_impl.h||source/common/stream_info/stream_info_impl.h",
          "test/common/stream_info/stream_info_impl_test.cc||test/common/stream_info/stream_info_impl_test.cc",
          "test/integration/cds_integration_test.cc||test/integration/cds_integration_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc",
            "source/common/http/filter_manager.cc||source/common/http/filter_manager.cc",
            "source/common/http/filter_manager.h||source/common/http/filter_manager.h",
            "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc",
            "source/common/stream_info/stream_info_impl.h||source/common/stream_info/stream_info_impl.h",
            "test/common/stream_info/stream_info_impl_test.cc||test/common/stream_info/stream_info_impl_test.cc",
            "test/integration/cds_integration_test.cc||test/integration/cds_integration_test.cc"
          ],
          "candidate": [
            "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc",
            "source/common/http/filter_manager.cc||source/common/http/filter_manager.cc",
            "source/common/http/filter_manager.h||source/common/http/filter_manager.h",
            "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc",
            "source/common/stream_info/stream_info_impl.h||source/common/stream_info/stream_info_impl.h",
            "test/common/stream_info/stream_info_impl_test.cc||test/common/stream_info/stream_info_impl_test.cc",
            "test/integration/cds_integration_test.cc||test/integration/cds_integration_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc": [
          "File: source/common/http/conn_manager_impl.cc -> source/common/http/conn_manager_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1729:             filter_state->parent(), StreamInfo::FilterState::LifeSpan::FilterChain);",
          "1730:   }",
          "1732:   new_stream.decodeHeaders(std::move(request_headers_), !proxy_body);",
          "1733:   if (proxy_body) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1735:   (*connection_manager_.streams_.begin())",
          "1736:       ->filter_manager_.streamInfo()",
          "1737:       .setFromForRecreateStream(filter_manager_.streamInfo());",
          "",
          "---------------"
        ],
        "source/common/http/filter_manager.cc||source/common/http/filter_manager.cc": [
          "File: source/common/http/filter_manager.cc -> source/common/http/filter_manager.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "327:   return parent_.buffered_request_data_;",
          "328: }",
          "332: void ActiveStreamDecoderFilter::doHeaders(bool end_stream) {",
          "333:   parent_.decodeHeaders(this, *parent_.filter_manager_callbacks_.requestHeaders(), end_stream);",
          "",
          "[Removed Lines]",
          "330: bool ActiveStreamDecoderFilter::complete() { return parent_.state_.remote_decode_complete_; }",
          "",
          "[Added Lines]",
          "330: bool ActiveStreamDecoderFilter::complete() { return parent_.remoteDecodeComplete(); }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "843: }",
          "845: void FilterManager::maybeEndDecode(bool end_stream) {",
          "849:     stream_info_.downstreamTiming().onLastDownstreamRxByteReceived(dispatcher().timeSource());",
          "850:     ENVOY_STREAM_LOG(debug, \"request end stream\", *this);",
          "851:   }",
          "",
          "[Removed Lines]",
          "846:   ASSERT(!state_.remote_decode_complete_);",
          "847:   state_.remote_decode_complete_ = end_stream;",
          "848:   if (end_stream) {",
          "",
          "[Added Lines]",
          "847:   if (end_stream && !remoteDecodeComplete()) {",
          "",
          "---------------"
        ],
        "source/common/http/filter_manager.h||source/common/http/filter_manager.h": [
          "File: source/common/http/filter_manager.h -> source/common/http/filter_manager.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "910:   bool remoteDecodeComplete() const { return state_.remote_decode_complete_; }",
          "",
          "[Added Lines]",
          "910:   bool remoteDecodeComplete() const {",
          "911:     return stream_info_.downstreamTiming() &&",
          "912:            stream_info_.downstreamTiming()->lastDownstreamRxByteReceived().has_value();",
          "913:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1059:   struct State {",
          "1060:     State()",
          "1066:     uint32_t filter_call_state_{0};",
          "1068:     bool remote_encode_complete_ : 1;",
          "1070:     bool local_complete_ : 1; // This indicates that local is complete prior to filter processing.",
          "",
          "[Removed Lines]",
          "1061:         : remote_encode_complete_(false), remote_decode_complete_(false), local_complete_(false),",
          "1062:           has_1xx_headers_(false), created_filter_chain_(false), is_head_request_(false),",
          "1063:           is_grpc_request_(false), non_100_response_headers_encoded_(false),",
          "1064:           under_on_local_reply_(false), decoder_filter_chain_aborted_(false),",
          "1065:           encoder_filter_chain_aborted_(false), saw_downstream_reset_(false) {}",
          "1069:     bool remote_decode_complete_ : 1;",
          "",
          "[Added Lines]",
          "1064:         : remote_encode_complete_(false), local_complete_(false), has_1xx_headers_(false),",
          "1065:           created_filter_chain_(false), is_head_request_(false), is_grpc_request_(false),",
          "1066:           non_100_response_headers_encoded_(false), under_on_local_reply_(false),",
          "1067:           decoder_filter_chain_aborted_(false), encoder_filter_chain_aborted_(false),",
          "1068:           saw_downstream_reset_(false) {}",
          "",
          "---------------"
        ],
        "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc": [
          "File: source/common/http/http1/codec_impl.cc -> source/common/http/http1/codec_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1203: }",
          "1205: void ServerConnectionImpl::onResetStream(StreamResetReason reason) {",
          "1208: }",
          "1210: Status ServerConnectionImpl::sendProtocolError(absl::string_view details) {",
          "",
          "[Removed Lines]",
          "1206:   active_request_->response_encoder_.runResetCallbacks(reason);",
          "1207:   connection_.dispatcher().deferredDelete(std::move(active_request_));",
          "",
          "[Added Lines]",
          "1206:   if (active_request_) {",
          "1207:     active_request_->response_encoder_.runResetCallbacks(reason);",
          "1208:     connection_.dispatcher().deferredDelete(std::move(active_request_));",
          "1209:   }",
          "",
          "---------------"
        ],
        "source/common/stream_info/stream_info_impl.h||source/common/stream_info/stream_info_impl.h": [
          "File: source/common/stream_info/stream_info_impl.h -> source/common/stream_info/stream_info_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "308:     ASSERT(downstream_bytes_meter_.get() == downstream_bytes_meter.get());",
          "309:   }",
          "311:   TimeSource& time_source_;",
          "314:   absl::optional<MonotonicTime> final_time_;",
          "316:   absl::optional<Http::Protocol> protocol_;",
          "",
          "[Removed Lines]",
          "312:   const SystemTime start_time_;",
          "313:   const MonotonicTime start_time_monotonic_;",
          "",
          "[Added Lines]",
          "315:   void setFromForRecreateStream(StreamInfo& info) {",
          "316:     downstream_timing_ = info.downstreamTiming();",
          "317:     protocol_ = info.protocol();",
          "318:     bytes_received_ = info.bytesReceived();",
          "319:     downstream_bytes_meter_ = info.getDownstreamBytesMeter();",
          "321:     start_time_ = info.startTime();",
          "322:     start_time_monotonic_ = info.startTimeMonotonic();",
          "323:   }",
          "326:   SystemTime start_time_;",
          "327:   MonotonicTime start_time_monotonic_;",
          "",
          "---------------"
        ],
        "test/common/stream_info/stream_info_impl_test.cc||test/common/stream_info/stream_info_impl_test.cc": [
          "File: test/common/stream_info/stream_info_impl_test.cc -> test/common/stream_info/stream_info_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:   }",
          "220: }",
          "222: TEST_F(StreamInfoImplTest, DynamicMetadataTest) {",
          "223:   StreamInfoImpl stream_info(Http::Protocol::Http2, test_time_.timeSystem(), nullptr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222: TEST_F(StreamInfoImplTest, SetFrom) {",
          "223:   StreamInfoImpl s1(Http::Protocol::Http2, test_time_.timeSystem(), nullptr);",
          "225:   s1.addBytesReceived(1);",
          "226:   s1.downstreamTiming().onLastDownstreamRxByteReceived(test_time_.timeSystem());",
          "228: #ifdef __clang__",
          "229: #if defined(__linux__)",
          "230: #if defined(__has_feature) && !(__has_feature(thread_sanitizer))",
          "231:   ASSERT_TRUE(sizeof(s1) == 760 || sizeof(s1) == 776 || sizeof(s1) == 800)",
          "232:       << \"If adding fields to StreamInfoImpl, please check to see if you \"",
          "233:          \"need to add them to setFromForRecreateStream! Current size \"",
          "234:       << sizeof(s1);",
          "235: #endif",
          "236: #endif",
          "237: #endif",
          "239:   StreamInfoImpl s2(Http::Protocol::Http11, test_time_.timeSystem(), nullptr);",
          "240:   s2.setFromForRecreateStream(s1);",
          "241:   EXPECT_EQ(s1.startTime(), s2.startTime());",
          "242:   EXPECT_EQ(s1.startTimeMonotonic(), s2.startTimeMonotonic());",
          "243:   EXPECT_EQ(s1.downstreamTiming().lastDownstreamRxByteReceived(),",
          "244:             s2.downstreamTiming().lastDownstreamRxByteReceived());",
          "245:   EXPECT_EQ(s1.protocol(), s2.protocol());",
          "246:   EXPECT_EQ(s1.bytesReceived(), s2.bytesReceived());",
          "247:   EXPECT_EQ(s1.getDownstreamBytesMeter(), s2.getDownstreamBytesMeter());",
          "248: }",
          "",
          "---------------"
        ],
        "test/integration/cds_integration_test.cc||test/integration/cds_integration_test.cc": [
          "File: test/integration/cds_integration_test.cc -> test/integration/cds_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "303:   cleanupUpstreamAndDownstream();",
          "304: }",
          "308: TEST_P(CdsIntegrationTest, VersionsRememberedAfterReconnect) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "307: TEST_P(CdsIntegrationTest, TwoClustersAndRedirects) {",
          "308:   setDownstreamProtocol(Http::CodecType::HTTP1);",
          "309:   config_helper_.addConfigModifier(",
          "310:       [](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "311:              hcm) {",
          "312:         auto* route = hcm.mutable_route_config()->mutable_virtual_hosts(0)->mutable_routes(1);",
          "313:         route->mutable_route()",
          "314:             ->mutable_internal_redirect_policy()",
          "315:             ->mutable_redirect_response_codes()",
          "316:             ->Add(302);",
          "317:       });",
          "320:   initialize();",
          "321:   sendDiscoveryResponse<envoy::config::cluster::v3::Cluster>(",
          "322:       Config::TypeUrl::get().Cluster, {cluster1_, cluster2_}, {cluster2_}, {}, \"42\");",
          "324:   test_server_->waitForGaugeGe(\"cluster_manager.active_clusters\", 3);",
          "326:   sendDiscoveryResponse<envoy::config::cluster::v3::Cluster>(Config::TypeUrl::get().Cluster,",
          "327:                                                              {cluster2_}, {}, {ClusterName1}, \"43\");",
          "328:   test_server_->waitForCounterGe(\"cluster_manager.cluster_removed\", 1);",
          "330:   codec_client_ = makeHttpConnection(makeClientConnection((lookupPort(\"http\"))));",
          "331:   default_request_headers_.setPath(\"/cluster2\");",
          "332:   default_request_headers_.setContentLength(\"4\");",
          "333:   auto encoder_decoder = codec_client_->startRequest(default_request_headers_);",
          "334:   Buffer::OwnedImpl data(\"body\");",
          "335:   encoder_decoder.first.encodeData(data, true);",
          "336:   auto& response = encoder_decoder.second;",
          "338:   ASSERT_TRUE(fake_upstreams_[UpstreamIndex2]->waitForHttpConnection(*dispatcher_,",
          "339:                                                                      fake_upstream_connection_));",
          "340:   ASSERT_TRUE(fake_upstream_connection_->waitForNewStream(*dispatcher_, upstream_request_));",
          "341:   ASSERT_TRUE(upstream_request_->waitForEndStream(*dispatcher_));",
          "343:   Http::TestResponseHeaderMapImpl redirect_response{",
          "344:       {\":status\", \"302\"}, {\"content-length\", \"0\"}, {\"location\", \"http://host/cluster1\"}};",
          "347:   upstream_request_->encodeHeaders(redirect_response, true);",
          "348:   ASSERT_TRUE(response->waitForEndStream());",
          "349:   EXPECT_EQ(\"503\", response->headers().getStatusValue());",
          "350: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fe7c69c248f4fe5a9080c7ccb35275b5218bb5ab",
      "candidate_info": {
        "commit_hash": "fe7c69c248f4fe5a9080c7ccb35275b5218bb5ab",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/fe7c69c248f4fe5a9080c7ccb35275b5218bb5ab",
        "files": [
          "source/common/http/conn_manager_impl.cc",
          "source/common/http/filter_manager.cc",
          "source/common/http/filter_manager.h",
          "source/common/http/http1/codec_impl.cc",
          "source/common/stream_info/stream_info_impl.h",
          "test/common/stream_info/stream_info_impl_test.cc",
          "test/integration/cds_integration_test.cc"
        ],
        "message": "internal redirect: fix a lifetime bug (#785)\n\nSigned-off-by: Alyssa Wilk <alyssar@chromium.org>\nSigned-off-by: Matt Klein <mklein@lyft.com>\nSigned-off-by: Pradeep Rao <pcrao@google.com>",
        "before_after_code_files": [
          "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc",
          "source/common/http/filter_manager.cc||source/common/http/filter_manager.cc",
          "source/common/http/filter_manager.h||source/common/http/filter_manager.h",
          "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc",
          "source/common/stream_info/stream_info_impl.h||source/common/stream_info/stream_info_impl.h",
          "test/common/stream_info/stream_info_impl_test.cc||test/common/stream_info/stream_info_impl_test.cc",
          "test/integration/cds_integration_test.cc||test/integration/cds_integration_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc",
            "source/common/http/filter_manager.cc||source/common/http/filter_manager.cc",
            "source/common/http/filter_manager.h||source/common/http/filter_manager.h",
            "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc",
            "source/common/stream_info/stream_info_impl.h||source/common/stream_info/stream_info_impl.h",
            "test/common/stream_info/stream_info_impl_test.cc||test/common/stream_info/stream_info_impl_test.cc",
            "test/integration/cds_integration_test.cc||test/integration/cds_integration_test.cc"
          ],
          "candidate": [
            "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc",
            "source/common/http/filter_manager.cc||source/common/http/filter_manager.cc",
            "source/common/http/filter_manager.h||source/common/http/filter_manager.h",
            "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc",
            "source/common/stream_info/stream_info_impl.h||source/common/stream_info/stream_info_impl.h",
            "test/common/stream_info/stream_info_impl_test.cc||test/common/stream_info/stream_info_impl_test.cc",
            "test/integration/cds_integration_test.cc||test/integration/cds_integration_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc": [
          "File: source/common/http/conn_manager_impl.cc -> source/common/http/conn_manager_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1729:             filter_state->parent(), StreamInfo::FilterState::LifeSpan::FilterChain);",
          "1730:   }",
          "1732:   new_stream.decodeHeaders(std::move(request_headers_), !proxy_body);",
          "1733:   if (proxy_body) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1735:   (*connection_manager_.streams_.begin())",
          "1736:       ->filter_manager_.streamInfo()",
          "1737:       .setFromForRecreateStream(filter_manager_.streamInfo());",
          "",
          "---------------"
        ],
        "source/common/http/filter_manager.cc||source/common/http/filter_manager.cc": [
          "File: source/common/http/filter_manager.cc -> source/common/http/filter_manager.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "327:   return parent_.buffered_request_data_;",
          "328: }",
          "332: void ActiveStreamDecoderFilter::doHeaders(bool end_stream) {",
          "333:   parent_.decodeHeaders(this, *parent_.filter_manager_callbacks_.requestHeaders(), end_stream);",
          "",
          "[Removed Lines]",
          "330: bool ActiveStreamDecoderFilter::complete() { return parent_.state_.remote_decode_complete_; }",
          "",
          "[Added Lines]",
          "330: bool ActiveStreamDecoderFilter::complete() { return parent_.remoteDecodeComplete(); }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "843: }",
          "845: void FilterManager::maybeEndDecode(bool end_stream) {",
          "849:     stream_info_.downstreamTiming().onLastDownstreamRxByteReceived(dispatcher().timeSource());",
          "850:     ENVOY_STREAM_LOG(debug, \"request end stream\", *this);",
          "851:   }",
          "",
          "[Removed Lines]",
          "846:   ASSERT(!state_.remote_decode_complete_);",
          "847:   state_.remote_decode_complete_ = end_stream;",
          "848:   if (end_stream) {",
          "",
          "[Added Lines]",
          "847:   if (end_stream && !remoteDecodeComplete()) {",
          "",
          "---------------"
        ],
        "source/common/http/filter_manager.h||source/common/http/filter_manager.h": [
          "File: source/common/http/filter_manager.h -> source/common/http/filter_manager.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "910:   bool remoteDecodeComplete() const { return state_.remote_decode_complete_; }",
          "",
          "[Added Lines]",
          "910:   bool remoteDecodeComplete() const {",
          "911:     return stream_info_.downstreamTiming() &&",
          "912:            stream_info_.downstreamTiming()->lastDownstreamRxByteReceived().has_value();",
          "913:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1059:   struct State {",
          "1060:     State()",
          "1066:     uint32_t filter_call_state_{0};",
          "1068:     bool remote_encode_complete_ : 1;",
          "1070:     bool local_complete_ : 1; // This indicates that local is complete prior to filter processing.",
          "",
          "[Removed Lines]",
          "1061:         : remote_encode_complete_(false), remote_decode_complete_(false), local_complete_(false),",
          "1062:           has_1xx_headers_(false), created_filter_chain_(false), is_head_request_(false),",
          "1063:           is_grpc_request_(false), non_100_response_headers_encoded_(false),",
          "1064:           under_on_local_reply_(false), decoder_filter_chain_aborted_(false),",
          "1065:           encoder_filter_chain_aborted_(false), saw_downstream_reset_(false) {}",
          "1069:     bool remote_decode_complete_ : 1;",
          "",
          "[Added Lines]",
          "1064:         : remote_encode_complete_(false), local_complete_(false), has_1xx_headers_(false),",
          "1065:           created_filter_chain_(false), is_head_request_(false), is_grpc_request_(false),",
          "1066:           non_100_response_headers_encoded_(false), under_on_local_reply_(false),",
          "1067:           decoder_filter_chain_aborted_(false), encoder_filter_chain_aborted_(false),",
          "1068:           saw_downstream_reset_(false) {}",
          "",
          "---------------"
        ],
        "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc": [
          "File: source/common/http/http1/codec_impl.cc -> source/common/http/http1/codec_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1203: }",
          "1205: void ServerConnectionImpl::onResetStream(StreamResetReason reason) {",
          "1208: }",
          "1210: Status ServerConnectionImpl::sendProtocolError(absl::string_view details) {",
          "",
          "[Removed Lines]",
          "1206:   active_request_->response_encoder_.runResetCallbacks(reason);",
          "1207:   connection_.dispatcher().deferredDelete(std::move(active_request_));",
          "",
          "[Added Lines]",
          "1206:   if (active_request_) {",
          "1207:     active_request_->response_encoder_.runResetCallbacks(reason);",
          "1208:     connection_.dispatcher().deferredDelete(std::move(active_request_));",
          "1209:   }",
          "",
          "---------------"
        ],
        "source/common/stream_info/stream_info_impl.h||source/common/stream_info/stream_info_impl.h": [
          "File: source/common/stream_info/stream_info_impl.h -> source/common/stream_info/stream_info_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "308:     ASSERT(downstream_bytes_meter_.get() == downstream_bytes_meter.get());",
          "309:   }",
          "311:   TimeSource& time_source_;",
          "314:   absl::optional<MonotonicTime> final_time_;",
          "316:   absl::optional<Http::Protocol> protocol_;",
          "",
          "[Removed Lines]",
          "312:   const SystemTime start_time_;",
          "313:   const MonotonicTime start_time_monotonic_;",
          "",
          "[Added Lines]",
          "315:   void setFromForRecreateStream(StreamInfo& info) {",
          "316:     downstream_timing_ = info.downstreamTiming();",
          "317:     protocol_ = info.protocol();",
          "318:     bytes_received_ = info.bytesReceived();",
          "319:     downstream_bytes_meter_ = info.getDownstreamBytesMeter();",
          "321:     start_time_ = info.startTime();",
          "322:     start_time_monotonic_ = info.startTimeMonotonic();",
          "323:   }",
          "326:   SystemTime start_time_;",
          "327:   MonotonicTime start_time_monotonic_;",
          "",
          "---------------"
        ],
        "test/common/stream_info/stream_info_impl_test.cc||test/common/stream_info/stream_info_impl_test.cc": [
          "File: test/common/stream_info/stream_info_impl_test.cc -> test/common/stream_info/stream_info_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:   }",
          "220: }",
          "222: TEST_F(StreamInfoImplTest, DynamicMetadataTest) {",
          "223:   StreamInfoImpl stream_info(Http::Protocol::Http2, test_time_.timeSystem(), nullptr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222: TEST_F(StreamInfoImplTest, SetFrom) {",
          "223:   StreamInfoImpl s1(Http::Protocol::Http2, test_time_.timeSystem(), nullptr);",
          "225:   s1.addBytesReceived(1);",
          "226:   s1.downstreamTiming().onLastDownstreamRxByteReceived(test_time_.timeSystem());",
          "228: #ifdef __clang__",
          "229: #if defined(__linux__)",
          "230: #if defined(__has_feature) && !(__has_feature(thread_sanitizer))",
          "231:   ASSERT_TRUE(sizeof(s1) == 760 || sizeof(s1) == 776 || sizeof(s1) == 800)",
          "232:       << \"If adding fields to StreamInfoImpl, please check to see if you \"",
          "233:          \"need to add them to setFromForRecreateStream! Current size \"",
          "234:       << sizeof(s1);",
          "235: #endif",
          "236: #endif",
          "237: #endif",
          "239:   StreamInfoImpl s2(Http::Protocol::Http11, test_time_.timeSystem(), nullptr);",
          "240:   s2.setFromForRecreateStream(s1);",
          "241:   EXPECT_EQ(s1.startTime(), s2.startTime());",
          "242:   EXPECT_EQ(s1.startTimeMonotonic(), s2.startTimeMonotonic());",
          "243:   EXPECT_EQ(s1.downstreamTiming().lastDownstreamRxByteReceived(),",
          "244:             s2.downstreamTiming().lastDownstreamRxByteReceived());",
          "245:   EXPECT_EQ(s1.protocol(), s2.protocol());",
          "246:   EXPECT_EQ(s1.bytesReceived(), s2.bytesReceived());",
          "247:   EXPECT_EQ(s1.getDownstreamBytesMeter(), s2.getDownstreamBytesMeter());",
          "248: }",
          "",
          "---------------"
        ],
        "test/integration/cds_integration_test.cc||test/integration/cds_integration_test.cc": [
          "File: test/integration/cds_integration_test.cc -> test/integration/cds_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "303:   cleanupUpstreamAndDownstream();",
          "304: }",
          "308: TEST_P(CdsIntegrationTest, VersionsRememberedAfterReconnect) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "307: TEST_P(CdsIntegrationTest, TwoClustersAndRedirects) {",
          "308:   setDownstreamProtocol(Http::CodecType::HTTP1);",
          "309:   config_helper_.addConfigModifier(",
          "310:       [](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "311:              hcm) {",
          "312:         auto* route = hcm.mutable_route_config()->mutable_virtual_hosts(0)->mutable_routes(1);",
          "313:         route->mutable_route()",
          "314:             ->mutable_internal_redirect_policy()",
          "315:             ->mutable_redirect_response_codes()",
          "316:             ->Add(302);",
          "317:       });",
          "320:   initialize();",
          "321:   sendDiscoveryResponse<envoy::config::cluster::v3::Cluster>(",
          "322:       Config::TypeUrl::get().Cluster, {cluster1_, cluster2_}, {cluster2_}, {}, \"42\");",
          "324:   test_server_->waitForGaugeGe(\"cluster_manager.active_clusters\", 3);",
          "326:   sendDiscoveryResponse<envoy::config::cluster::v3::Cluster>(Config::TypeUrl::get().Cluster,",
          "327:                                                              {cluster2_}, {}, {ClusterName1}, \"43\");",
          "328:   test_server_->waitForCounterGe(\"cluster_manager.cluster_removed\", 1);",
          "330:   codec_client_ = makeHttpConnection(makeClientConnection((lookupPort(\"http\"))));",
          "331:   default_request_headers_.setPath(\"/cluster2\");",
          "332:   default_request_headers_.setContentLength(\"4\");",
          "333:   auto encoder_decoder = codec_client_->startRequest(default_request_headers_);",
          "334:   Buffer::OwnedImpl data(\"body\");",
          "335:   encoder_decoder.first.encodeData(data, true);",
          "336:   auto& response = encoder_decoder.second;",
          "338:   ASSERT_TRUE(fake_upstreams_[UpstreamIndex2]->waitForHttpConnection(*dispatcher_,",
          "339:                                                                      fake_upstream_connection_));",
          "340:   ASSERT_TRUE(fake_upstream_connection_->waitForNewStream(*dispatcher_, upstream_request_));",
          "341:   ASSERT_TRUE(upstream_request_->waitForEndStream(*dispatcher_));",
          "343:   Http::TestResponseHeaderMapImpl redirect_response{",
          "344:       {\":status\", \"302\"}, {\"content-length\", \"0\"}, {\"location\", \"http://host/cluster1\"}};",
          "347:   upstream_request_->encodeHeaders(redirect_response, true);",
          "348:   ASSERT_TRUE(response->waitForEndStream());",
          "349:   EXPECT_EQ(\"503\", response->headers().getStatusValue());",
          "350: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "93902caeca63d4584a24d6f5c6c38574ecd59acf",
      "candidate_info": {
        "commit_hash": "93902caeca63d4584a24d6f5c6c38574ecd59acf",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/93902caeca63d4584a24d6f5c6c38574ecd59acf",
        "files": [
          "source/common/http/conn_manager_impl.cc",
          "source/common/http/filter_manager.cc",
          "source/common/http/filter_manager.h",
          "source/common/http/http1/codec_impl.cc",
          "source/common/stream_info/stream_info_impl.h",
          "test/common/stream_info/stream_info_impl_test.cc",
          "test/integration/cds_integration_test.cc"
        ],
        "message": "internal redirect: fix a lifetime bug (#785)\n\nSigned-off-by: Alyssa Wilk <alyssar@chromium.org>\nSigned-off-by: Matt Klein <mklein@lyft.com>\nSigned-off-by: Pradeep Rao <pcrao@google.com>",
        "before_after_code_files": [
          "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc",
          "source/common/http/filter_manager.cc||source/common/http/filter_manager.cc",
          "source/common/http/filter_manager.h||source/common/http/filter_manager.h",
          "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc",
          "source/common/stream_info/stream_info_impl.h||source/common/stream_info/stream_info_impl.h",
          "test/common/stream_info/stream_info_impl_test.cc||test/common/stream_info/stream_info_impl_test.cc",
          "test/integration/cds_integration_test.cc||test/integration/cds_integration_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc",
            "source/common/http/filter_manager.cc||source/common/http/filter_manager.cc",
            "source/common/http/filter_manager.h||source/common/http/filter_manager.h",
            "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc",
            "source/common/stream_info/stream_info_impl.h||source/common/stream_info/stream_info_impl.h",
            "test/common/stream_info/stream_info_impl_test.cc||test/common/stream_info/stream_info_impl_test.cc",
            "test/integration/cds_integration_test.cc||test/integration/cds_integration_test.cc"
          ],
          "candidate": [
            "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc",
            "source/common/http/filter_manager.cc||source/common/http/filter_manager.cc",
            "source/common/http/filter_manager.h||source/common/http/filter_manager.h",
            "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc",
            "source/common/stream_info/stream_info_impl.h||source/common/stream_info/stream_info_impl.h",
            "test/common/stream_info/stream_info_impl_test.cc||test/common/stream_info/stream_info_impl_test.cc",
            "test/integration/cds_integration_test.cc||test/integration/cds_integration_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc": [
          "File: source/common/http/conn_manager_impl.cc -> source/common/http/conn_manager_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1686:             filter_state->parent(), StreamInfo::FilterState::LifeSpan::FilterChain);",
          "1687:   }",
          "1689:   new_stream.decodeHeaders(std::move(request_headers_), !proxy_body);",
          "1690:   if (proxy_body) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1692:   (*connection_manager_.streams_.begin())",
          "1693:       ->filter_manager_.streamInfo()",
          "1694:       .setFromForRecreateStream(filter_manager_.streamInfo());",
          "",
          "---------------"
        ],
        "source/common/http/filter_manager.cc||source/common/http/filter_manager.cc": [
          "File: source/common/http/filter_manager.cc -> source/common/http/filter_manager.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "322:   return parent_.buffered_request_data_;",
          "323: }",
          "327: void ActiveStreamDecoderFilter::doHeaders(bool end_stream) {",
          "328:   parent_.decodeHeaders(this, *parent_.filter_manager_callbacks_.requestHeaders(), end_stream);",
          "",
          "[Removed Lines]",
          "325: bool ActiveStreamDecoderFilter::complete() { return parent_.state_.remote_decode_complete_; }",
          "",
          "[Added Lines]",
          "325: bool ActiveStreamDecoderFilter::complete() { return parent_.remoteDecodeComplete(); }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "834: }",
          "836: void FilterManager::maybeEndDecode(bool end_stream) {",
          "840:     stream_info_.downstreamTiming().onLastDownstreamRxByteReceived(dispatcher().timeSource());",
          "841:     ENVOY_STREAM_LOG(debug, \"request end stream\", *this);",
          "842:   }",
          "",
          "[Removed Lines]",
          "837:   ASSERT(!state_.remote_decode_complete_);",
          "838:   state_.remote_decode_complete_ = end_stream;",
          "839:   if (end_stream) {",
          "",
          "[Added Lines]",
          "838:   if (end_stream && !remoteDecodeComplete()) {",
          "",
          "---------------"
        ],
        "source/common/http/filter_manager.h||source/common/http/filter_manager.h": [
          "File: source/common/http/filter_manager.h -> source/common/http/filter_manager.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "915:   bool remoteDecodeComplete() const { return state_.remote_decode_complete_; }",
          "",
          "[Added Lines]",
          "915:   bool remoteDecodeComplete() const {",
          "916:     return stream_info_.downstreamTiming() &&",
          "917:            stream_info_.downstreamTiming()->lastDownstreamRxByteReceived().has_value();",
          "918:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1068:   struct State {",
          "1069:     State()",
          "1075:     uint32_t filter_call_state_{0};",
          "1077:     bool remote_encode_complete_ : 1;",
          "1079:     bool local_complete_ : 1; // This indicates that local is complete prior to filter processing.",
          "",
          "[Removed Lines]",
          "1070:         : remote_encode_complete_(false), remote_decode_complete_(false), local_complete_(false),",
          "1071:           has_1xx_headers_(false), created_filter_chain_(false), is_head_request_(false),",
          "1072:           is_grpc_request_(false), non_100_response_headers_encoded_(false),",
          "1073:           under_on_local_reply_(false), decoder_filter_chain_aborted_(false),",
          "1074:           encoder_filter_chain_aborted_(false), saw_downstream_reset_(false) {}",
          "1078:     bool remote_decode_complete_ : 1;",
          "",
          "[Added Lines]",
          "1073:         : remote_encode_complete_(false), local_complete_(false), has_1xx_headers_(false),",
          "1074:           created_filter_chain_(false), is_head_request_(false), is_grpc_request_(false),",
          "1075:           non_100_response_headers_encoded_(false), under_on_local_reply_(false),",
          "1076:           decoder_filter_chain_aborted_(false), encoder_filter_chain_aborted_(false),",
          "1077:           saw_downstream_reset_(false) {}",
          "",
          "---------------"
        ],
        "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc": [
          "File: source/common/http/http1/codec_impl.cc -> source/common/http/http1/codec_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1209: }",
          "1211: void ServerConnectionImpl::onResetStream(StreamResetReason reason) {",
          "1214: }",
          "1216: Status ServerConnectionImpl::sendProtocolError(absl::string_view details) {",
          "",
          "[Removed Lines]",
          "1212:   active_request_->response_encoder_.runResetCallbacks(reason);",
          "1213:   connection_.dispatcher().deferredDelete(std::move(active_request_));",
          "",
          "[Added Lines]",
          "1212:   if (active_request_) {",
          "1213:     active_request_->response_encoder_.runResetCallbacks(reason);",
          "1214:     connection_.dispatcher().deferredDelete(std::move(active_request_));",
          "1215:   }",
          "",
          "---------------"
        ],
        "source/common/stream_info/stream_info_impl.h||source/common/stream_info/stream_info_impl.h": [
          "File: source/common/stream_info/stream_info_impl.h -> source/common/stream_info/stream_info_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "308:     ASSERT(downstream_bytes_meter_.get() == downstream_bytes_meter.get());",
          "309:   }",
          "311:   TimeSource& time_source_;",
          "314:   absl::optional<MonotonicTime> final_time_;",
          "316:   absl::optional<Http::Protocol> protocol_;",
          "",
          "[Removed Lines]",
          "312:   const SystemTime start_time_;",
          "313:   const MonotonicTime start_time_monotonic_;",
          "",
          "[Added Lines]",
          "315:   void setFromForRecreateStream(StreamInfo& info) {",
          "316:     downstream_timing_ = info.downstreamTiming();",
          "317:     protocol_ = info.protocol();",
          "318:     bytes_received_ = info.bytesReceived();",
          "319:     downstream_bytes_meter_ = info.getDownstreamBytesMeter();",
          "321:     start_time_ = info.startTime();",
          "322:     start_time_monotonic_ = info.startTimeMonotonic();",
          "323:   }",
          "326:   SystemTime start_time_;",
          "327:   MonotonicTime start_time_monotonic_;",
          "",
          "---------------"
        ],
        "test/common/stream_info/stream_info_impl_test.cc||test/common/stream_info/stream_info_impl_test.cc": [
          "File: test/common/stream_info/stream_info_impl_test.cc -> test/common/stream_info/stream_info_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:   }",
          "220: }",
          "222: TEST_F(StreamInfoImplTest, DynamicMetadataTest) {",
          "223:   StreamInfoImpl stream_info(Http::Protocol::Http2, test_time_.timeSystem(), nullptr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222: TEST_F(StreamInfoImplTest, SetFrom) {",
          "223:   StreamInfoImpl s1(Http::Protocol::Http2, test_time_.timeSystem(), nullptr);",
          "225:   s1.addBytesReceived(1);",
          "226:   s1.downstreamTiming().onLastDownstreamRxByteReceived(test_time_.timeSystem());",
          "228: #ifdef __clang__",
          "229: #if defined(__linux__)",
          "230: #if defined(__has_feature) && !(__has_feature(thread_sanitizer))",
          "231:   ASSERT_TRUE(sizeof(s1) == 760 || sizeof(s1) == 776 || sizeof(s1) == 800)",
          "232:       << \"If adding fields to StreamInfoImpl, please check to see if you \"",
          "233:          \"need to add them to setFromForRecreateStream! Current size \"",
          "234:       << sizeof(s1);",
          "235: #endif",
          "236: #endif",
          "237: #endif",
          "239:   StreamInfoImpl s2(Http::Protocol::Http11, test_time_.timeSystem(), nullptr);",
          "240:   s2.setFromForRecreateStream(s1);",
          "241:   EXPECT_EQ(s1.startTime(), s2.startTime());",
          "242:   EXPECT_EQ(s1.startTimeMonotonic(), s2.startTimeMonotonic());",
          "243:   EXPECT_EQ(s1.downstreamTiming().lastDownstreamRxByteReceived(),",
          "244:             s2.downstreamTiming().lastDownstreamRxByteReceived());",
          "245:   EXPECT_EQ(s1.protocol(), s2.protocol());",
          "246:   EXPECT_EQ(s1.bytesReceived(), s2.bytesReceived());",
          "247:   EXPECT_EQ(s1.getDownstreamBytesMeter(), s2.getDownstreamBytesMeter());",
          "248: }",
          "",
          "---------------"
        ],
        "test/integration/cds_integration_test.cc||test/integration/cds_integration_test.cc": [
          "File: test/integration/cds_integration_test.cc -> test/integration/cds_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "269:   cleanupUpstreamAndDownstream();",
          "270: }",
          "274: TEST_P(CdsIntegrationTest, VersionsRememberedAfterReconnect) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "273: TEST_P(CdsIntegrationTest, TwoClustersAndRedirects) {",
          "274:   setDownstreamProtocol(Http::CodecType::HTTP1);",
          "275:   config_helper_.addConfigModifier(",
          "276:       [](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "277:              hcm) {",
          "278:         auto* route = hcm.mutable_route_config()->mutable_virtual_hosts(0)->mutable_routes(1);",
          "279:         route->mutable_route()",
          "280:             ->mutable_internal_redirect_policy()",
          "281:             ->mutable_redirect_response_codes()",
          "282:             ->Add(302);",
          "283:       });",
          "286:   initialize();",
          "287:   sendDiscoveryResponse<envoy::config::cluster::v3::Cluster>(",
          "288:       Config::TypeUrl::get().Cluster, {cluster1_, cluster2_}, {cluster2_}, {}, \"42\");",
          "290:   test_server_->waitForGaugeGe(\"cluster_manager.active_clusters\", 3);",
          "292:   sendDiscoveryResponse<envoy::config::cluster::v3::Cluster>(Config::TypeUrl::get().Cluster,",
          "293:                                                              {cluster2_}, {}, {ClusterName1}, \"43\");",
          "294:   test_server_->waitForCounterGe(\"cluster_manager.cluster_removed\", 1);",
          "296:   codec_client_ = makeHttpConnection(makeClientConnection((lookupPort(\"http\"))));",
          "297:   default_request_headers_.setPath(\"/cluster2\");",
          "298:   default_request_headers_.setContentLength(\"4\");",
          "299:   auto encoder_decoder = codec_client_->startRequest(default_request_headers_);",
          "300:   Buffer::OwnedImpl data(\"body\");",
          "301:   encoder_decoder.first.encodeData(data, true);",
          "302:   auto& response = encoder_decoder.second;",
          "304:   ASSERT_TRUE(fake_upstreams_[UpstreamIndex2]->waitForHttpConnection(*dispatcher_,",
          "305:                                                                      fake_upstream_connection_));",
          "306:   ASSERT_TRUE(fake_upstream_connection_->waitForNewStream(*dispatcher_, upstream_request_));",
          "307:   ASSERT_TRUE(upstream_request_->waitForEndStream(*dispatcher_));",
          "309:   Http::TestResponseHeaderMapImpl redirect_response{",
          "310:       {\":status\", \"302\"}, {\"content-length\", \"0\"}, {\"location\", \"http://host/cluster1\"}};",
          "313:   upstream_request_->encodeHeaders(redirect_response, true);",
          "314:   ASSERT_TRUE(response->waitForEndStream());",
          "315:   EXPECT_EQ(\"503\", response->headers().getStatusValue());",
          "316: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fa79958d2be7a20428fb51fbb568d3fa8f4a422f",
      "candidate_info": {
        "commit_hash": "fa79958d2be7a20428fb51fbb568d3fa8f4a422f",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/fa79958d2be7a20428fb51fbb568d3fa8f4a422f",
        "files": [
          "source/common/http/conn_manager_impl.cc",
          "source/common/http/filter_manager.cc",
          "source/common/http/filter_manager.h",
          "source/common/http/http1/codec_impl.cc",
          "source/common/stream_info/stream_info_impl.h",
          "test/common/stream_info/stream_info_impl_test.cc",
          "test/integration/cds_integration_test.cc"
        ],
        "message": "internal redirect: fix a lifetime bug (#785)\n\nSigned-off-by: Alyssa Wilk <alyssar@chromium.org>\nSigned-off-by: Matt Klein <mklein@lyft.com>\nSigned-off-by: Pradeep Rao <pcrao@google.com>\n\nSigned-off-by: Ryan Northey <ryan@synca.io>",
        "before_after_code_files": [
          "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc",
          "source/common/http/filter_manager.cc||source/common/http/filter_manager.cc",
          "source/common/http/filter_manager.h||source/common/http/filter_manager.h",
          "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc",
          "source/common/stream_info/stream_info_impl.h||source/common/stream_info/stream_info_impl.h",
          "test/common/stream_info/stream_info_impl_test.cc||test/common/stream_info/stream_info_impl_test.cc",
          "test/integration/cds_integration_test.cc||test/integration/cds_integration_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc",
            "source/common/http/filter_manager.cc||source/common/http/filter_manager.cc",
            "source/common/http/filter_manager.h||source/common/http/filter_manager.h",
            "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc",
            "source/common/stream_info/stream_info_impl.h||source/common/stream_info/stream_info_impl.h",
            "test/common/stream_info/stream_info_impl_test.cc||test/common/stream_info/stream_info_impl_test.cc",
            "test/integration/cds_integration_test.cc||test/integration/cds_integration_test.cc"
          ],
          "candidate": [
            "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc",
            "source/common/http/filter_manager.cc||source/common/http/filter_manager.cc",
            "source/common/http/filter_manager.h||source/common/http/filter_manager.h",
            "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc",
            "source/common/stream_info/stream_info_impl.h||source/common/stream_info/stream_info_impl.h",
            "test/common/stream_info/stream_info_impl_test.cc||test/common/stream_info/stream_info_impl_test.cc",
            "test/integration/cds_integration_test.cc||test/integration/cds_integration_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc": [
          "File: source/common/http/conn_manager_impl.cc -> source/common/http/conn_manager_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1686:             filter_state->parent(), StreamInfo::FilterState::LifeSpan::FilterChain);",
          "1687:   }",
          "1689:   new_stream.decodeHeaders(std::move(request_headers_), !proxy_body);",
          "1690:   if (proxy_body) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1692:   (*connection_manager_.streams_.begin())",
          "1693:       ->filter_manager_.streamInfo()",
          "1694:       .setFromForRecreateStream(filter_manager_.streamInfo());",
          "",
          "---------------"
        ],
        "source/common/http/filter_manager.cc||source/common/http/filter_manager.cc": [
          "File: source/common/http/filter_manager.cc -> source/common/http/filter_manager.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "322:   return parent_.buffered_request_data_;",
          "323: }",
          "327: void ActiveStreamDecoderFilter::doHeaders(bool end_stream) {",
          "328:   parent_.decodeHeaders(this, *parent_.filter_manager_callbacks_.requestHeaders(), end_stream);",
          "",
          "[Removed Lines]",
          "325: bool ActiveStreamDecoderFilter::complete() { return parent_.state_.remote_decode_complete_; }",
          "",
          "[Added Lines]",
          "325: bool ActiveStreamDecoderFilter::complete() { return parent_.remoteDecodeComplete(); }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "834: }",
          "836: void FilterManager::maybeEndDecode(bool end_stream) {",
          "840:     stream_info_.downstreamTiming().onLastDownstreamRxByteReceived(dispatcher().timeSource());",
          "841:     ENVOY_STREAM_LOG(debug, \"request end stream\", *this);",
          "842:   }",
          "",
          "[Removed Lines]",
          "837:   ASSERT(!state_.remote_decode_complete_);",
          "838:   state_.remote_decode_complete_ = end_stream;",
          "839:   if (end_stream) {",
          "",
          "[Added Lines]",
          "838:   if (end_stream && !remoteDecodeComplete()) {",
          "",
          "---------------"
        ],
        "source/common/http/filter_manager.h||source/common/http/filter_manager.h": [
          "File: source/common/http/filter_manager.h -> source/common/http/filter_manager.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "915:   bool remoteDecodeComplete() const { return state_.remote_decode_complete_; }",
          "",
          "[Added Lines]",
          "915:   bool remoteDecodeComplete() const {",
          "916:     return stream_info_.downstreamTiming() &&",
          "917:            stream_info_.downstreamTiming()->lastDownstreamRxByteReceived().has_value();",
          "918:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1068:   struct State {",
          "1069:     State()",
          "1075:     uint32_t filter_call_state_{0};",
          "1077:     bool remote_encode_complete_ : 1;",
          "1079:     bool local_complete_ : 1; // This indicates that local is complete prior to filter processing.",
          "",
          "[Removed Lines]",
          "1070:         : remote_encode_complete_(false), remote_decode_complete_(false), local_complete_(false),",
          "1071:           has_1xx_headers_(false), created_filter_chain_(false), is_head_request_(false),",
          "1072:           is_grpc_request_(false), non_100_response_headers_encoded_(false),",
          "1073:           under_on_local_reply_(false), decoder_filter_chain_aborted_(false),",
          "1074:           encoder_filter_chain_aborted_(false), saw_downstream_reset_(false) {}",
          "1078:     bool remote_decode_complete_ : 1;",
          "",
          "[Added Lines]",
          "1073:         : remote_encode_complete_(false), local_complete_(false), has_1xx_headers_(false),",
          "1074:           created_filter_chain_(false), is_head_request_(false), is_grpc_request_(false),",
          "1075:           non_100_response_headers_encoded_(false), under_on_local_reply_(false),",
          "1076:           decoder_filter_chain_aborted_(false), encoder_filter_chain_aborted_(false),",
          "1077:           saw_downstream_reset_(false) {}",
          "",
          "---------------"
        ],
        "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc": [
          "File: source/common/http/http1/codec_impl.cc -> source/common/http/http1/codec_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1209: }",
          "1211: void ServerConnectionImpl::onResetStream(StreamResetReason reason) {",
          "1214: }",
          "1216: Status ServerConnectionImpl::sendProtocolError(absl::string_view details) {",
          "",
          "[Removed Lines]",
          "1212:   active_request_->response_encoder_.runResetCallbacks(reason);",
          "1213:   connection_.dispatcher().deferredDelete(std::move(active_request_));",
          "",
          "[Added Lines]",
          "1212:   if (active_request_) {",
          "1213:     active_request_->response_encoder_.runResetCallbacks(reason);",
          "1214:     connection_.dispatcher().deferredDelete(std::move(active_request_));",
          "1215:   }",
          "",
          "---------------"
        ],
        "source/common/stream_info/stream_info_impl.h||source/common/stream_info/stream_info_impl.h": [
          "File: source/common/stream_info/stream_info_impl.h -> source/common/stream_info/stream_info_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "308:     ASSERT(downstream_bytes_meter_.get() == downstream_bytes_meter.get());",
          "309:   }",
          "311:   TimeSource& time_source_;",
          "314:   absl::optional<MonotonicTime> final_time_;",
          "316:   absl::optional<Http::Protocol> protocol_;",
          "",
          "[Removed Lines]",
          "312:   const SystemTime start_time_;",
          "313:   const MonotonicTime start_time_monotonic_;",
          "",
          "[Added Lines]",
          "315:   void setFromForRecreateStream(StreamInfo& info) {",
          "316:     downstream_timing_ = info.downstreamTiming();",
          "317:     protocol_ = info.protocol();",
          "318:     bytes_received_ = info.bytesReceived();",
          "319:     downstream_bytes_meter_ = info.getDownstreamBytesMeter();",
          "321:     start_time_ = info.startTime();",
          "322:     start_time_monotonic_ = info.startTimeMonotonic();",
          "323:   }",
          "326:   SystemTime start_time_;",
          "327:   MonotonicTime start_time_monotonic_;",
          "",
          "---------------"
        ],
        "test/common/stream_info/stream_info_impl_test.cc||test/common/stream_info/stream_info_impl_test.cc": [
          "File: test/common/stream_info/stream_info_impl_test.cc -> test/common/stream_info/stream_info_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:   }",
          "220: }",
          "222: TEST_F(StreamInfoImplTest, DynamicMetadataTest) {",
          "223:   StreamInfoImpl stream_info(Http::Protocol::Http2, test_time_.timeSystem(), nullptr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222: TEST_F(StreamInfoImplTest, SetFrom) {",
          "223:   StreamInfoImpl s1(Http::Protocol::Http2, test_time_.timeSystem(), nullptr);",
          "225:   s1.addBytesReceived(1);",
          "226:   s1.downstreamTiming().onLastDownstreamRxByteReceived(test_time_.timeSystem());",
          "228: #ifdef __clang__",
          "229: #if defined(__linux__)",
          "230: #if defined(__has_feature) && !(__has_feature(thread_sanitizer))",
          "231:   ASSERT_TRUE(sizeof(s1) == 760 || sizeof(s1) == 776 || sizeof(s1) == 800)",
          "232:       << \"If adding fields to StreamInfoImpl, please check to see if you \"",
          "233:          \"need to add them to setFromForRecreateStream! Current size \"",
          "234:       << sizeof(s1);",
          "235: #endif",
          "236: #endif",
          "237: #endif",
          "239:   StreamInfoImpl s2(Http::Protocol::Http11, test_time_.timeSystem(), nullptr);",
          "240:   s2.setFromForRecreateStream(s1);",
          "241:   EXPECT_EQ(s1.startTime(), s2.startTime());",
          "242:   EXPECT_EQ(s1.startTimeMonotonic(), s2.startTimeMonotonic());",
          "243:   EXPECT_EQ(s1.downstreamTiming().lastDownstreamRxByteReceived(),",
          "244:             s2.downstreamTiming().lastDownstreamRxByteReceived());",
          "245:   EXPECT_EQ(s1.protocol(), s2.protocol());",
          "246:   EXPECT_EQ(s1.bytesReceived(), s2.bytesReceived());",
          "247:   EXPECT_EQ(s1.getDownstreamBytesMeter(), s2.getDownstreamBytesMeter());",
          "248: }",
          "",
          "---------------"
        ],
        "test/integration/cds_integration_test.cc||test/integration/cds_integration_test.cc": [
          "File: test/integration/cds_integration_test.cc -> test/integration/cds_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "269:   cleanupUpstreamAndDownstream();",
          "270: }",
          "274: TEST_P(CdsIntegrationTest, VersionsRememberedAfterReconnect) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "273: TEST_P(CdsIntegrationTest, TwoClustersAndRedirects) {",
          "274:   setDownstreamProtocol(Http::CodecType::HTTP1);",
          "275:   config_helper_.addConfigModifier(",
          "276:       [](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "277:              hcm) {",
          "278:         auto* route = hcm.mutable_route_config()->mutable_virtual_hosts(0)->mutable_routes(1);",
          "279:         route->mutable_route()",
          "280:             ->mutable_internal_redirect_policy()",
          "281:             ->mutable_redirect_response_codes()",
          "282:             ->Add(302);",
          "283:       });",
          "286:   initialize();",
          "287:   sendDiscoveryResponse<envoy::config::cluster::v3::Cluster>(",
          "288:       Config::TypeUrl::get().Cluster, {cluster1_, cluster2_}, {cluster2_}, {}, \"42\");",
          "290:   test_server_->waitForGaugeGe(\"cluster_manager.active_clusters\", 3);",
          "292:   sendDiscoveryResponse<envoy::config::cluster::v3::Cluster>(Config::TypeUrl::get().Cluster,",
          "293:                                                              {cluster2_}, {}, {ClusterName1}, \"43\");",
          "294:   test_server_->waitForCounterGe(\"cluster_manager.cluster_removed\", 1);",
          "296:   codec_client_ = makeHttpConnection(makeClientConnection((lookupPort(\"http\"))));",
          "297:   default_request_headers_.setPath(\"/cluster2\");",
          "298:   default_request_headers_.setContentLength(\"4\");",
          "299:   auto encoder_decoder = codec_client_->startRequest(default_request_headers_);",
          "300:   Buffer::OwnedImpl data(\"body\");",
          "301:   encoder_decoder.first.encodeData(data, true);",
          "302:   auto& response = encoder_decoder.second;",
          "304:   ASSERT_TRUE(fake_upstreams_[UpstreamIndex2]->waitForHttpConnection(*dispatcher_,",
          "305:                                                                      fake_upstream_connection_));",
          "306:   ASSERT_TRUE(fake_upstream_connection_->waitForNewStream(*dispatcher_, upstream_request_));",
          "307:   ASSERT_TRUE(upstream_request_->waitForEndStream(*dispatcher_));",
          "309:   Http::TestResponseHeaderMapImpl redirect_response{",
          "310:       {\":status\", \"302\"}, {\"content-length\", \"0\"}, {\"location\", \"http://host/cluster1\"}};",
          "313:   upstream_request_->encodeHeaders(redirect_response, true);",
          "314:   ASSERT_TRUE(response->waitForEndStream());",
          "315:   EXPECT_EQ(\"503\", response->headers().getStatusValue());",
          "316: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "adc26b9b2b5aa7d73e4203567854e945475c0d57",
      "candidate_info": {
        "commit_hash": "adc26b9b2b5aa7d73e4203567854e945475c0d57",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/adc26b9b2b5aa7d73e4203567854e945475c0d57",
        "files": [
          "source/common/http/conn_manager_impl.cc",
          "source/common/http/filter_manager.cc",
          "source/common/http/filter_manager.h",
          "source/common/http/http1/codec_impl.cc",
          "source/common/stream_info/stream_info_impl.h",
          "test/common/stream_info/stream_info_impl_test.cc",
          "test/integration/cds_integration_test.cc"
        ],
        "message": "internal redirect: fix a lifetime bug (#785)\n\nSigned-off-by: Alyssa Wilk <alyssar@chromium.org>\nSigned-off-by: Matt Klein <mklein@lyft.com>",
        "before_after_code_files": [
          "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc",
          "source/common/http/filter_manager.cc||source/common/http/filter_manager.cc",
          "source/common/http/filter_manager.h||source/common/http/filter_manager.h",
          "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc",
          "source/common/stream_info/stream_info_impl.h||source/common/stream_info/stream_info_impl.h",
          "test/common/stream_info/stream_info_impl_test.cc||test/common/stream_info/stream_info_impl_test.cc",
          "test/integration/cds_integration_test.cc||test/integration/cds_integration_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc",
            "source/common/http/filter_manager.cc||source/common/http/filter_manager.cc",
            "source/common/http/filter_manager.h||source/common/http/filter_manager.h",
            "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc",
            "source/common/stream_info/stream_info_impl.h||source/common/stream_info/stream_info_impl.h",
            "test/common/stream_info/stream_info_impl_test.cc||test/common/stream_info/stream_info_impl_test.cc",
            "test/integration/cds_integration_test.cc||test/integration/cds_integration_test.cc"
          ],
          "candidate": [
            "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc",
            "source/common/http/filter_manager.cc||source/common/http/filter_manager.cc",
            "source/common/http/filter_manager.h||source/common/http/filter_manager.h",
            "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc",
            "source/common/stream_info/stream_info_impl.h||source/common/stream_info/stream_info_impl.h",
            "test/common/stream_info/stream_info_impl_test.cc||test/common/stream_info/stream_info_impl_test.cc",
            "test/integration/cds_integration_test.cc||test/integration/cds_integration_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc": [
          "File: source/common/http/conn_manager_impl.cc -> source/common/http/conn_manager_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1738:             filter_state->parent(), StreamInfo::FilterState::LifeSpan::FilterChain);",
          "1739:   }",
          "1741:   new_stream.decodeHeaders(std::move(request_headers_), !proxy_body);",
          "1742:   if (proxy_body) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1744:   (*connection_manager_.streams_.begin())",
          "1745:       ->filter_manager_.streamInfo()",
          "1746:       .setFromForRecreateStream(filter_manager_.streamInfo());",
          "",
          "---------------"
        ],
        "source/common/http/filter_manager.cc||source/common/http/filter_manager.cc": [
          "File: source/common/http/filter_manager.cc -> source/common/http/filter_manager.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "305:   return parent_.buffered_request_data_;",
          "306: }",
          "310: void ActiveStreamDecoderFilter::doHeaders(bool end_stream) {",
          "311:   parent_.decodeHeaders(this, *parent_.filter_manager_callbacks_.requestHeaders(), end_stream);",
          "",
          "[Removed Lines]",
          "308: bool ActiveStreamDecoderFilter::complete() { return parent_.state_.remote_decode_complete_; }",
          "",
          "[Added Lines]",
          "308: bool ActiveStreamDecoderFilter::complete() { return parent_.remoteDecodeComplete(); }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "778: }",
          "780: void FilterManager::maybeEndDecode(bool end_stream) {",
          "784:     stream_info_.downstreamTiming().onLastDownstreamRxByteReceived(dispatcher().timeSource());",
          "785:     ENVOY_STREAM_LOG(debug, \"request end stream\", *this);",
          "786:   }",
          "",
          "[Removed Lines]",
          "781:   ASSERT(!state_.remote_decode_complete_);",
          "782:   state_.remote_decode_complete_ = end_stream;",
          "783:   if (end_stream) {",
          "",
          "[Added Lines]",
          "782:   if (end_stream && !remoteDecodeComplete()) {",
          "",
          "---------------"
        ],
        "source/common/http/filter_manager.h||source/common/http/filter_manager.h": [
          "File: source/common/http/filter_manager.h -> source/common/http/filter_manager.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "806:   bool remoteDecodeComplete() const { return state_.remote_decode_complete_; }",
          "",
          "[Added Lines]",
          "806:   bool remoteDecodeComplete() const {",
          "807:     return stream_info_.downstreamTiming() &&",
          "808:            stream_info_.downstreamTiming()->lastDownstreamRxByteReceived().has_value();",
          "809:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "955:   struct State {",
          "956:     State()",
          "962:     uint32_t filter_call_state_{0};",
          "964:     bool remote_encode_complete_ : 1;",
          "966:     bool local_complete_ : 1; // This indicates that local is complete prior to filter processing.",
          "",
          "[Removed Lines]",
          "957:         : remote_encode_complete_(false), remote_decode_complete_(false), local_complete_(false),",
          "958:           has_1xx_headers_(false), created_filter_chain_(false), is_head_request_(false),",
          "959:           is_grpc_request_(false), non_100_response_headers_encoded_(false),",
          "960:           under_on_local_reply_(false), decoder_filter_chain_aborted_(false),",
          "961:           encoder_filter_chain_aborted_(false), saw_downstream_reset_(false) {}",
          "965:     bool remote_decode_complete_ : 1;",
          "",
          "[Added Lines]",
          "960:         : remote_encode_complete_(false), local_complete_(false), has_1xx_headers_(false),",
          "961:           created_filter_chain_(false), is_head_request_(false), is_grpc_request_(false),",
          "962:           non_100_response_headers_encoded_(false), under_on_local_reply_(false),",
          "963:           decoder_filter_chain_aborted_(false), encoder_filter_chain_aborted_(false),",
          "964:           saw_downstream_reset_(false) {}",
          "",
          "---------------"
        ],
        "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc": [
          "File: source/common/http/http1/codec_impl.cc -> source/common/http/http1/codec_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1236: }",
          "1238: void ServerConnectionImpl::onResetStream(StreamResetReason reason) {",
          "1241: }",
          "1243: Status ServerConnectionImpl::sendProtocolError(absl::string_view details) {",
          "",
          "[Removed Lines]",
          "1239:   active_request_->response_encoder_.runResetCallbacks(reason);",
          "1240:   connection_.dispatcher().deferredDelete(std::move(active_request_));",
          "",
          "[Added Lines]",
          "1239:   if (active_request_) {",
          "1240:     active_request_->response_encoder_.runResetCallbacks(reason);",
          "1241:     connection_.dispatcher().deferredDelete(std::move(active_request_));",
          "1242:   }",
          "",
          "---------------"
        ],
        "source/common/stream_info/stream_info_impl.h||source/common/stream_info/stream_info_impl.h": [
          "File: source/common/stream_info/stream_info_impl.h -> source/common/stream_info/stream_info_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "312:     ASSERT(downstream_bytes_meter_.get() == downstream_bytes_meter.get());",
          "313:   }",
          "315:   TimeSource& time_source_;",
          "318:   absl::optional<MonotonicTime> final_time_;",
          "320:   absl::optional<Http::Protocol> protocol_;",
          "",
          "[Removed Lines]",
          "316:   const SystemTime start_time_;",
          "317:   const MonotonicTime start_time_monotonic_;",
          "",
          "[Added Lines]",
          "319:   void setFromForRecreateStream(StreamInfo& info) {",
          "320:     downstream_timing_ = info.downstreamTiming();",
          "321:     protocol_ = info.protocol();",
          "322:     bytes_received_ = info.bytesReceived();",
          "323:     downstream_bytes_meter_ = info.getDownstreamBytesMeter();",
          "325:     start_time_ = info.startTime();",
          "326:     start_time_monotonic_ = info.startTimeMonotonic();",
          "327:   }",
          "330:   SystemTime start_time_;",
          "331:   MonotonicTime start_time_monotonic_;",
          "",
          "---------------"
        ],
        "test/common/stream_info/stream_info_impl_test.cc||test/common/stream_info/stream_info_impl_test.cc": [
          "File: test/common/stream_info/stream_info_impl_test.cc -> test/common/stream_info/stream_info_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:   }",
          "220: }",
          "222: TEST_F(StreamInfoImplTest, DynamicMetadataTest) {",
          "223:   StreamInfoImpl stream_info(Http::Protocol::Http2, test_time_.timeSystem(), nullptr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222: TEST_F(StreamInfoImplTest, SetFrom) {",
          "223:   StreamInfoImpl s1(Http::Protocol::Http2, test_time_.timeSystem(), nullptr);",
          "225:   s1.addBytesReceived(1);",
          "226:   s1.downstreamTiming().onLastDownstreamRxByteReceived(test_time_.timeSystem());",
          "228: #ifdef __clang__",
          "229: #if defined(__linux__)",
          "230: #if defined(__has_feature) && !(__has_feature(thread_sanitizer))",
          "231:   ASSERT_TRUE(sizeof(s1) == 760 || sizeof(s1) == 776 || sizeof(s1) == 800)",
          "232:       << \"If adding fields to StreamInfoImpl, please check to see if you \"",
          "233:          \"need to add them to setFromForRecreateStream! Current size \"",
          "234:       << sizeof(s1);",
          "235: #endif",
          "236: #endif",
          "237: #endif",
          "239:   StreamInfoImpl s2(Http::Protocol::Http11, test_time_.timeSystem(), nullptr);",
          "240:   s2.setFromForRecreateStream(s1);",
          "241:   EXPECT_EQ(s1.startTime(), s2.startTime());",
          "242:   EXPECT_EQ(s1.startTimeMonotonic(), s2.startTimeMonotonic());",
          "243:   EXPECT_EQ(s1.downstreamTiming().lastDownstreamRxByteReceived(),",
          "244:             s2.downstreamTiming().lastDownstreamRxByteReceived());",
          "245:   EXPECT_EQ(s1.protocol(), s2.protocol());",
          "246:   EXPECT_EQ(s1.bytesReceived(), s2.bytesReceived());",
          "247:   EXPECT_EQ(s1.getDownstreamBytesMeter(), s2.getDownstreamBytesMeter());",
          "248: }",
          "",
          "---------------"
        ],
        "test/integration/cds_integration_test.cc||test/integration/cds_integration_test.cc": [
          "File: test/integration/cds_integration_test.cc -> test/integration/cds_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "303:   cleanupUpstreamAndDownstream();",
          "304: }",
          "308: TEST_P(CdsIntegrationTest, VersionsRememberedAfterReconnect) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "307: TEST_P(CdsIntegrationTest, TwoClustersAndRedirects) {",
          "308:   setDownstreamProtocol(Http::CodecType::HTTP1);",
          "309:   config_helper_.addConfigModifier(",
          "310:       [](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "311:              hcm) {",
          "312:         auto* route = hcm.mutable_route_config()->mutable_virtual_hosts(0)->mutable_routes(1);",
          "313:         route->mutable_route()",
          "314:             ->mutable_internal_redirect_policy()",
          "315:             ->mutable_redirect_response_codes()",
          "316:             ->Add(302);",
          "317:       });",
          "320:   initialize();",
          "321:   sendDiscoveryResponse<envoy::config::cluster::v3::Cluster>(",
          "322:       Config::TypeUrl::get().Cluster, {cluster1_, cluster2_}, {cluster2_}, {}, \"42\");",
          "324:   test_server_->waitForGaugeGe(\"cluster_manager.active_clusters\", 3);",
          "326:   sendDiscoveryResponse<envoy::config::cluster::v3::Cluster>(Config::TypeUrl::get().Cluster,",
          "327:                                                              {cluster2_}, {}, {ClusterName1}, \"43\");",
          "328:   test_server_->waitForCounterGe(\"cluster_manager.cluster_removed\", 1);",
          "330:   codec_client_ = makeHttpConnection(makeClientConnection((lookupPort(\"http\"))));",
          "331:   default_request_headers_.setPath(\"/cluster2\");",
          "332:   default_request_headers_.setContentLength(\"4\");",
          "333:   auto encoder_decoder = codec_client_->startRequest(default_request_headers_);",
          "334:   Buffer::OwnedImpl data(\"body\");",
          "335:   encoder_decoder.first.encodeData(data, true);",
          "336:   auto& response = encoder_decoder.second;",
          "338:   ASSERT_TRUE(fake_upstreams_[UpstreamIndex2]->waitForHttpConnection(*dispatcher_,",
          "339:                                                                      fake_upstream_connection_));",
          "340:   ASSERT_TRUE(fake_upstream_connection_->waitForNewStream(*dispatcher_, upstream_request_));",
          "341:   ASSERT_TRUE(upstream_request_->waitForEndStream(*dispatcher_));",
          "343:   Http::TestResponseHeaderMapImpl redirect_response{",
          "344:       {\":status\", \"302\"}, {\"content-length\", \"0\"}, {\"location\", \"http://host/cluster1\"}};",
          "347:   upstream_request_->encodeHeaders(redirect_response, true);",
          "348:   ASSERT_TRUE(response->waitForEndStream());",
          "349:   EXPECT_EQ(\"503\", response->headers().getStatusValue());",
          "350: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}