{
  "cve_id": "CVE-2017-8065",
  "cve_desc": "crypto/ccm.c in the Linux kernel 4.9.x and 4.10.x through 4.10.12 interacts incorrectly with the CONFIG_VMAP_STACK option, which allows local users to cause a denial of service (system crash or memory corruption) or possibly have unspecified other impact by leveraging use of more than one virtual page for a DMA scatterlist.",
  "repo": "torvalds/linux",
  "patch_hash": "3b30460c5b0ed762be75a004e924ec3f8711e032",
  "patch_info": {
    "commit_hash": "3b30460c5b0ed762be75a004e924ec3f8711e032",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/3b30460c5b0ed762be75a004e924ec3f8711e032",
    "files": [
      "crypto/ccm.c"
    ],
    "message": "crypto: ccm - move cbcmac input off the stack\n\nCommit f15f05b0a5de (\"crypto: ccm - switch to separate cbcmac driver\")\nrefactored the CCM driver to allow separate implementations of the\nunderlying MAC to be provided by a platform. However, in doing so, it\nmoved some data from the linear region to the stack, which violates the\nSG constraints when the stack is virtually mapped.\n\nSo move idata/odata back to the request ctx struct, of which we can\nreasonably expect that it has been allocated using kmalloc() et al.\n\nReported-by: Johannes Berg <johannes@sipsolutions.net>\nFixes: f15f05b0a5de (\"crypto: ccm - switch to separate cbcmac driver\")\nSigned-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>\nTested-by: Johannes Berg <johannes@sipsolutions.net>\nSigned-off-by: Herbert Xu <herbert@gondor.apana.org.au>",
    "before_after_code_files": [
      "crypto/ccm.c||crypto/ccm.c"
    ]
  },
  "patch_diff": {
    "crypto/ccm.c||crypto/ccm.c": [
      "File: crypto/ccm.c -> crypto/ccm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "46: struct crypto_ccm_req_priv_ctx {",
      "47:  u8 odata[16];",
      "48:  u8 auth_tag[16];",
      "49:  u32 flags;",
      "50:  struct scatterlist src[3];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "48:  u8 idata[16];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "183:  AHASH_REQUEST_ON_STACK(ahreq, ctx->mac);",
      "184:  unsigned int assoclen = req->assoclen;",
      "185:  struct scatterlist sg[3];",
      "188:  int ilen, err;",
      "",
      "[Removed Lines]",
      "186:  u8 odata[16];",
      "187:  u8 idata[16];",
      "",
      "[Added Lines]",
      "187:  u8 *odata = pctx->odata;",
      "188:  u8 *idata = pctx->idata;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f15f05b0a5de667c821a9727c33bce9d1d9b26dd",
      "candidate_info": {
        "commit_hash": "f15f05b0a5de667c821a9727c33bce9d1d9b26dd",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/f15f05b0a5de667c821a9727c33bce9d1d9b26dd",
        "files": [
          "crypto/Kconfig",
          "crypto/ccm.c"
        ],
        "message": "crypto: ccm - switch to separate cbcmac driver\n\nUpdate the generic CCM driver to defer CBC-MAC processing to a\ndedicated CBC-MAC ahash transform rather than open coding this\ntransform (and much of the associated scatterwalk plumbing) in\nthe CCM driver itself.\n\nThis cleans up the code considerably, but more importantly, it allows\nthe use of alternative CBC-MAC implementations that don't suffer from\nperformance degradation due to significant setup time (e.g., the NEON\nbased AES code needs to enable/disable the NEON, and load the S-box\ninto 16 SIMD registers, which cannot be amortized over the entire input\nwhen using the cipher interface)\n\nSigned-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>\nSigned-off-by: Herbert Xu <herbert@gondor.apana.org.au>",
        "before_after_code_files": [
          "crypto/ccm.c||crypto/ccm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/ccm.c||crypto/ccm.c"
          ],
          "candidate": [
            "crypto/ccm.c||crypto/ccm.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/ccm.c||crypto/ccm.c": [
          "File: crypto/ccm.c -> crypto/ccm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: #include <crypto/internal/aead.h>",
          "14: #include <crypto/internal/skcipher.h>",
          "15: #include <crypto/scatterwalk.h>",
          "16: #include <linux/err.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: #include <crypto/internal/hash.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24: struct ccm_instance_ctx {",
          "25:  struct crypto_skcipher_spawn ctr;",
          "27: };",
          "29: struct crypto_ccm_ctx {",
          "31:  struct crypto_skcipher *ctr;",
          "32: };",
          "",
          "[Removed Lines]",
          "26:  struct crypto_spawn cipher;",
          "30:  struct crypto_cipher *cipher;",
          "",
          "[Added Lines]",
          "27:  struct crypto_ahash_spawn mac;",
          "31:  struct crypto_ahash *mac;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45: struct crypto_ccm_req_priv_ctx {",
          "46:  u8 odata[16];",
          "48:  u8 auth_tag[16];",
          "50:  u32 flags;",
          "51:  struct scatterlist src[3];",
          "52:  struct scatterlist dst[3];",
          "53:  struct skcipher_request skreq;",
          "54: };",
          "56: static inline struct crypto_ccm_req_priv_ctx *crypto_ccm_reqctx(",
          "57:  struct aead_request *req)",
          "58: {",
          "",
          "[Removed Lines]",
          "47:  u8 idata[16];",
          "49:  u32 ilen;",
          "",
          "[Added Lines]",
          "55: struct cbcmac_tfm_ctx {",
          "56:  struct crypto_cipher *child;",
          "57: };",
          "59: struct cbcmac_desc_ctx {",
          "60:  unsigned int len;",
          "61:  u8 dg[];",
          "62: };",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "84: {",
          "85:  struct crypto_ccm_ctx *ctx = crypto_aead_ctx(aead);",
          "86:  struct crypto_skcipher *ctr = ctx->ctr;",
          "88:  int err = 0;",
          "90:  crypto_skcipher_clear_flags(ctr, CRYPTO_TFM_REQ_MASK);",
          "",
          "[Removed Lines]",
          "87:  struct crypto_cipher *tfm = ctx->cipher;",
          "",
          "[Added Lines]",
          "95:  struct crypto_ahash *mac = ctx->mac;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "96:  if (err)",
          "97:   goto out;",
          "101:         CRYPTO_TFM_REQ_MASK);",
          "104:          CRYPTO_TFM_RES_MASK);",
          "106: out:",
          "",
          "[Removed Lines]",
          "99:  crypto_cipher_clear_flags(tfm, CRYPTO_TFM_REQ_MASK);",
          "100:  crypto_cipher_set_flags(tfm, crypto_aead_get_flags(aead) &",
          "102:  err = crypto_cipher_setkey(tfm, key, keylen);",
          "103:  crypto_aead_set_flags(aead, crypto_cipher_get_flags(tfm) &",
          "",
          "[Added Lines]",
          "107:  crypto_ahash_clear_flags(mac, CRYPTO_TFM_REQ_MASK);",
          "108:  crypto_ahash_set_flags(mac, crypto_aead_get_flags(aead) &",
          "110:  err = crypto_ahash_setkey(mac, key, keylen);",
          "111:  crypto_aead_set_flags(aead, crypto_ahash_get_flags(mac) &",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "167:  return len;",
          "168: }",
          "251: static int crypto_ccm_auth(struct aead_request *req, struct scatterlist *plain,",
          "252:       unsigned int cryptlen)",
          "253: {",
          "254:  struct crypto_aead *aead = crypto_aead_reqtfm(req);",
          "255:  struct crypto_ccm_ctx *ctx = crypto_aead_ctx(aead);",
          "258:  unsigned int assoclen = req->assoclen;",
          "264:  err = format_input(odata, req, cryptlen);",
          "265:  if (err)",
          "266:   goto out;",
          "272:  if (assoclen) {",
          "275:  } else {",
          "277:  }",
          "283: out:",
          "284:  return err;",
          "285: }",
          "",
          "[Removed Lines]",
          "170: static void compute_mac(struct crypto_cipher *tfm, u8 *data, int n,",
          "171:          struct crypto_ccm_req_priv_ctx *pctx)",
          "172: {",
          "173:  unsigned int bs = 16;",
          "174:  u8 *odata = pctx->odata;",
          "175:  u8 *idata = pctx->idata;",
          "176:  int datalen, getlen;",
          "178:  datalen = n;",
          "181:  getlen = bs - pctx->ilen;",
          "182:  if (datalen >= getlen) {",
          "183:   memcpy(idata + pctx->ilen, data, getlen);",
          "184:   crypto_xor(odata, idata, bs);",
          "185:   crypto_cipher_encrypt_one(tfm, odata, odata);",
          "186:   datalen -= getlen;",
          "187:   data += getlen;",
          "188:   pctx->ilen = 0;",
          "189:  }",
          "192:  while (datalen >= bs) {",
          "193:   crypto_xor(odata, data, bs);",
          "194:   crypto_cipher_encrypt_one(tfm, odata, odata);",
          "196:   datalen -= bs;",
          "197:   data += bs;",
          "198:  }",
          "203:  if (datalen) {",
          "204:   memcpy(idata + pctx->ilen, data, datalen);",
          "205:   pctx->ilen += datalen;",
          "206:  }",
          "207: }",
          "209: static void get_data_to_compute(struct crypto_cipher *tfm,",
          "210:           struct crypto_ccm_req_priv_ctx *pctx,",
          "211:           struct scatterlist *sg, unsigned int len)",
          "212: {",
          "213:  struct scatter_walk walk;",
          "214:  u8 *data_src;",
          "215:  int n;",
          "217:  scatterwalk_start(&walk, sg);",
          "219:  while (len) {",
          "220:   n = scatterwalk_clamp(&walk, len);",
          "221:   if (!n) {",
          "222:    scatterwalk_start(&walk, sg_next(walk.sg));",
          "223:    n = scatterwalk_clamp(&walk, len);",
          "224:   }",
          "225:   data_src = scatterwalk_map(&walk);",
          "227:   compute_mac(tfm, data_src, n, pctx);",
          "228:   len -= n;",
          "230:   scatterwalk_unmap(data_src);",
          "231:   scatterwalk_advance(&walk, n);",
          "232:   scatterwalk_done(&walk, 0, len);",
          "233:   if (len)",
          "234:    crypto_yield(pctx->flags);",
          "235:  }",
          "238:  if (pctx->ilen) {",
          "239:   int padlen;",
          "240:   u8 *odata = pctx->odata;",
          "241:   u8 *idata = pctx->idata;",
          "243:   padlen = 16 - pctx->ilen;",
          "244:   memset(idata + pctx->ilen, 0, padlen);",
          "245:   crypto_xor(odata, idata, 16);",
          "246:   crypto_cipher_encrypt_one(tfm, odata, odata);",
          "247:   pctx->ilen = 0;",
          "248:  }",
          "249: }",
          "256:  struct crypto_ccm_req_priv_ctx *pctx = crypto_ccm_reqctx(req);",
          "257:  struct crypto_cipher *cipher = ctx->cipher;",
          "259:  u8 *odata = pctx->odata;",
          "260:  u8 *idata = pctx->idata;",
          "261:  int err;",
          "269:  crypto_cipher_encrypt_one(cipher, odata, odata);",
          "273:   pctx->ilen = format_adata(idata, assoclen);",
          "274:   get_data_to_compute(cipher, pctx, req->src, req->assoclen);",
          "276:   pctx->ilen = 0;",
          "280:  if (cryptlen)",
          "281:   get_data_to_compute(cipher, pctx, plain, cryptlen);",
          "",
          "[Added Lines]",
          "181:  struct crypto_ccm_req_priv_ctx *pctx = crypto_ccm_reqctx(req);",
          "184:  AHASH_REQUEST_ON_STACK(ahreq, ctx->mac);",
          "186:  struct scatterlist sg[3];",
          "187:  u8 odata[16];",
          "188:  u8 idata[16];",
          "189:  int ilen, err;",
          "196:  sg_init_table(sg, 3);",
          "197:  sg_set_buf(&sg[0], odata, 16);",
          "201:   ilen = format_adata(idata, assoclen);",
          "202:   sg_set_buf(&sg[1], idata, ilen);",
          "203:   sg_chain(sg, 3, req->src);",
          "205:   ilen = 0;",
          "206:   sg_chain(sg, 2, req->src);",
          "209:  ahash_request_set_tfm(ahreq, ctx->mac);",
          "210:  ahash_request_set_callback(ahreq, pctx->flags, NULL, NULL);",
          "211:  ahash_request_set_crypt(ahreq, sg, NULL, assoclen + ilen + 16);",
          "212:  err = crypto_ahash_init(ahreq);",
          "213:  if (err)",
          "214:   goto out;",
          "215:  err = crypto_ahash_update(ahreq);",
          "216:  if (err)",
          "217:   goto out;",
          "220:  ilen = 16 - (assoclen + ilen) % 16;",
          "221:  if (ilen < 16) {",
          "222:   memset(idata, 0, ilen);",
          "223:   sg_init_table(sg, 2);",
          "224:   sg_set_buf(&sg[0], idata, ilen);",
          "225:   if (plain)",
          "226:    sg_chain(sg, 2, plain);",
          "227:   plain = sg;",
          "228:   cryptlen += ilen;",
          "229:  }",
          "231:  ahash_request_set_crypt(ahreq, plain, pctx->odata, cryptlen);",
          "232:  err = crypto_ahash_finup(ahreq);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "453:  struct aead_instance *inst = aead_alg_instance(tfm);",
          "454:  struct ccm_instance_ctx *ictx = aead_instance_ctx(inst);",
          "455:  struct crypto_ccm_ctx *ctx = crypto_aead_ctx(tfm);",
          "457:  struct crypto_skcipher *ctr;",
          "458:  unsigned long align;",
          "459:  int err;",
          "465:  ctr = crypto_spawn_skcipher(&ictx->ctr);",
          "466:  err = PTR_ERR(ctr);",
          "467:  if (IS_ERR(ctr))",
          "471:  ctx->ctr = ctr;",
          "473:  align = crypto_aead_alignmask(tfm);",
          "",
          "[Removed Lines]",
          "456:  struct crypto_cipher *cipher;",
          "461:  cipher = crypto_spawn_cipher(&ictx->cipher);",
          "462:  if (IS_ERR(cipher))",
          "463:   return PTR_ERR(cipher);",
          "468:   goto err_free_cipher;",
          "470:  ctx->cipher = cipher;",
          "",
          "[Added Lines]",
          "406:  struct crypto_ahash *mac;",
          "411:  mac = crypto_spawn_ahash(&ictx->mac);",
          "412:  if (IS_ERR(mac))",
          "413:   return PTR_ERR(mac);",
          "418:   goto err_free_mac;",
          "420:  ctx->mac = mac;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "480:  return 0;",
          "484:  return err;",
          "485: }",
          "",
          "[Removed Lines]",
          "482: err_free_cipher:",
          "483:  crypto_free_cipher(cipher);",
          "",
          "[Added Lines]",
          "432: err_free_mac:",
          "433:  crypto_free_ahash(mac);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "488: {",
          "489:  struct crypto_ccm_ctx *ctx = crypto_aead_ctx(tfm);",
          "492:  crypto_free_skcipher(ctx->ctr);",
          "493: }",
          "",
          "[Removed Lines]",
          "491:  crypto_free_cipher(ctx->cipher);",
          "",
          "[Added Lines]",
          "441:  crypto_free_ahash(ctx->mac);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "496: {",
          "497:  struct ccm_instance_ctx *ctx = aead_instance_ctx(inst);",
          "500:  crypto_drop_skcipher(&ctx->ctr);",
          "501:  kfree(inst);",
          "502: }",
          "",
          "[Removed Lines]",
          "499:  crypto_drop_spawn(&ctx->cipher);",
          "",
          "[Added Lines]",
          "449:  crypto_drop_ahash(&ctx->mac);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "505:         struct rtattr **tb,",
          "506:         const char *full_name,",
          "507:         const char *ctr_name,",
          "509: {",
          "510:  struct crypto_attr_type *algt;",
          "511:  struct aead_instance *inst;",
          "512:  struct skcipher_alg *ctr;",
          "514:  struct ccm_instance_ctx *ictx;",
          "515:  int err;",
          "",
          "[Removed Lines]",
          "508:         const char *cipher_name)",
          "513:  struct crypto_alg *cipher;",
          "",
          "[Added Lines]",
          "458:         const char *mac_name)",
          "463:  struct crypto_alg *mac_alg;",
          "464:  struct hash_alg_common *mac;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "521:  if ((algt->type ^ CRYPTO_ALG_TYPE_AEAD) & algt->mask)",
          "522:   return -EINVAL;",
          "529:  err = -EINVAL;",
          "533:  inst = kzalloc(sizeof(*inst) + sizeof(*ictx), GFP_KERNEL);",
          "534:  err = -ENOMEM;",
          "535:  if (!inst)",
          "538:  ictx = aead_instance_ctx(inst);",
          "543:  if (err)",
          "544:   goto err_free_inst;",
          "",
          "[Removed Lines]",
          "524:  cipher = crypto_alg_mod_lookup(cipher_name,  CRYPTO_ALG_TYPE_CIPHER,",
          "525:            CRYPTO_ALG_TYPE_MASK);",
          "526:  if (IS_ERR(cipher))",
          "527:   return PTR_ERR(cipher);",
          "530:  if (cipher->cra_blocksize != 16)",
          "531:   goto out_put_cipher;",
          "536:   goto out_put_cipher;",
          "540:  err = crypto_init_spawn(&ictx->cipher, cipher,",
          "541:     aead_crypto_instance(inst),",
          "542:     CRYPTO_ALG_TYPE_MASK);",
          "",
          "[Added Lines]",
          "475:  mac_alg = crypto_find_alg(mac_name, &crypto_ahash_type,",
          "476:       CRYPTO_ALG_TYPE_HASH,",
          "477:       CRYPTO_ALG_TYPE_AHASH_MASK |",
          "478:       CRYPTO_ALG_ASYNC);",
          "479:  if (IS_ERR(mac_alg))",
          "480:   return PTR_ERR(mac_alg);",
          "482:  mac = __crypto_hash_alg_common(mac_alg);",
          "484:  if (mac->digestsize != 16)",
          "485:   goto out_put_mac;",
          "490:   goto out_put_mac;",
          "493:  err = crypto_init_ahash_spawn(&ictx->mac, mac,",
          "494:           aead_crypto_instance(inst));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "548:        crypto_requires_sync(algt->type,",
          "549:        algt->mask));",
          "550:  if (err)",
          "553:  ctr = crypto_spawn_skcipher_alg(&ictx->ctr);",
          "",
          "[Removed Lines]",
          "551:   goto err_drop_cipher;",
          "",
          "[Added Lines]",
          "503:   goto err_drop_mac;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "564:  err = -ENAMETOOLONG;",
          "565:  if (snprintf(inst->alg.base.cra_driver_name, CRYPTO_MAX_ALG_NAME,",
          "566:        \"ccm_base(%s,%s)\", ctr->base.cra_driver_name,",
          "568:   goto err_drop_ctr;",
          "570:  memcpy(inst->alg.base.cra_name, full_name, CRYPTO_MAX_ALG_NAME);",
          "572:  inst->alg.base.cra_flags = ctr->base.cra_flags & CRYPTO_ALG_ASYNC;",
          "574:            ctr->base.cra_priority) / 2;",
          "575:  inst->alg.base.cra_blocksize = 1;",
          "577:            ctr->base.cra_alignmask |",
          "578:            (__alignof__(u32) - 1);",
          "579:  inst->alg.ivsize = 16;",
          "",
          "[Removed Lines]",
          "567:        cipher->cra_driver_name) >= CRYPTO_MAX_ALG_NAME)",
          "573:  inst->alg.base.cra_priority = (cipher->cra_priority +",
          "576:  inst->alg.base.cra_alignmask = cipher->cra_alignmask |",
          "",
          "[Added Lines]",
          "519:        mac->base.cra_driver_name) >= CRYPTO_MAX_ALG_NAME)",
          "525:  inst->alg.base.cra_priority = (mac->base.cra_priority +",
          "528:  inst->alg.base.cra_alignmask = mac->base.cra_alignmask |",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "593:  if (err)",
          "594:   goto err_drop_ctr;",
          "598:  return err;",
          "600: err_drop_ctr:",
          "601:  crypto_drop_skcipher(&ictx->ctr);",
          "604: err_free_inst:",
          "605:  kfree(inst);",
          "607: }",
          "609: static int crypto_ccm_create(struct crypto_template *tmpl, struct rtattr **tb)",
          "610: {",
          "611:  const char *cipher_name;",
          "612:  char ctr_name[CRYPTO_MAX_ALG_NAME];",
          "613:  char full_name[CRYPTO_MAX_ALG_NAME];",
          "615:  cipher_name = crypto_attr_alg_name(tb[1]);",
          "",
          "[Removed Lines]",
          "596: out_put_cipher:",
          "597:  crypto_mod_put(cipher);",
          "602: err_drop_cipher:",
          "603:  crypto_drop_spawn(&ictx->cipher);",
          "606:  goto out_put_cipher;",
          "",
          "[Added Lines]",
          "548: out_put_mac:",
          "549:  crypto_mod_put(mac_alg);",
          "554: err_drop_mac:",
          "555:  crypto_drop_ahash(&ictx->mac);",
          "558:  goto out_put_mac;",
          "565:  char mac_name[CRYPTO_MAX_ALG_NAME];",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "620:        cipher_name) >= CRYPTO_MAX_ALG_NAME)",
          "621:   return -ENAMETOOLONG;",
          "623:  if (snprintf(full_name, CRYPTO_MAX_ALG_NAME, \"ccm(%s)\", cipher_name) >=",
          "624:      CRYPTO_MAX_ALG_NAME)",
          "625:   return -ENAMETOOLONG;",
          "627:  return crypto_ccm_create_common(tmpl, tb, full_name, ctr_name,",
          "629: }",
          "631: static struct crypto_template crypto_ccm_tmpl = {",
          "",
          "[Removed Lines]",
          "628:      cipher_name);",
          "",
          "[Added Lines]",
          "576:  if (snprintf(mac_name, CRYPTO_MAX_ALG_NAME, \"cbcmac(%s)\",",
          "577:        cipher_name) >= CRYPTO_MAX_ALG_NAME)",
          "578:   return -ENAMETOOLONG;",
          "585:      mac_name);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "899:  .module = THIS_MODULE,",
          "900: };",
          "902: static int __init crypto_ccm_module_init(void)",
          "903: {",
          "904:  int err;",
          "907:  if (err)",
          "908:   goto out;",
          "910:  err = crypto_register_template(&crypto_ccm_tmpl);",
          "911:  if (err)",
          "912:   goto out_undo_base;",
          "",
          "[Removed Lines]",
          "906:  err = crypto_register_template(&crypto_ccm_base_tmpl);",
          "",
          "[Added Lines]",
          "859: static int crypto_cbcmac_digest_setkey(struct crypto_shash *parent,",
          "860:          const u8 *inkey, unsigned int keylen)",
          "861: {",
          "862:  struct cbcmac_tfm_ctx *ctx = crypto_shash_ctx(parent);",
          "864:  return crypto_cipher_setkey(ctx->child, inkey, keylen);",
          "865: }",
          "867: static int crypto_cbcmac_digest_init(struct shash_desc *pdesc)",
          "868: {",
          "869:  struct cbcmac_desc_ctx *ctx = shash_desc_ctx(pdesc);",
          "870:  int bs = crypto_shash_digestsize(pdesc->tfm);",
          "872:  ctx->len = 0;",
          "873:  memset(ctx->dg, 0, bs);",
          "875:  return 0;",
          "876: }",
          "878: static int crypto_cbcmac_digest_update(struct shash_desc *pdesc, const u8 *p,",
          "879:            unsigned int len)",
          "880: {",
          "881:  struct crypto_shash *parent = pdesc->tfm;",
          "882:  struct cbcmac_tfm_ctx *tctx = crypto_shash_ctx(parent);",
          "883:  struct cbcmac_desc_ctx *ctx = shash_desc_ctx(pdesc);",
          "884:  struct crypto_cipher *tfm = tctx->child;",
          "885:  int bs = crypto_shash_digestsize(parent);",
          "887:  while (len > 0) {",
          "888:   unsigned int l = min(len, bs - ctx->len);",
          "890:   crypto_xor(ctx->dg + ctx->len, p, l);",
          "891:   ctx->len +=l;",
          "892:   len -= l;",
          "893:   p += l;",
          "895:   if (ctx->len == bs) {",
          "896:    crypto_cipher_encrypt_one(tfm, ctx->dg, ctx->dg);",
          "897:    ctx->len = 0;",
          "898:   }",
          "899:  }",
          "901:  return 0;",
          "902: }",
          "904: static int crypto_cbcmac_digest_final(struct shash_desc *pdesc, u8 *out)",
          "905: {",
          "906:  struct crypto_shash *parent = pdesc->tfm;",
          "907:  struct cbcmac_tfm_ctx *tctx = crypto_shash_ctx(parent);",
          "908:  struct cbcmac_desc_ctx *ctx = shash_desc_ctx(pdesc);",
          "909:  struct crypto_cipher *tfm = tctx->child;",
          "910:  int bs = crypto_shash_digestsize(parent);",
          "912:  if (ctx->len)",
          "913:   crypto_cipher_encrypt_one(tfm, out, ctx->dg);",
          "914:  else",
          "915:   memcpy(out, ctx->dg, bs);",
          "917:  return 0;",
          "918: }",
          "920: static int cbcmac_init_tfm(struct crypto_tfm *tfm)",
          "921: {",
          "922:  struct crypto_cipher *cipher;",
          "923:  struct crypto_instance *inst = (void *)tfm->__crt_alg;",
          "924:  struct crypto_spawn *spawn = crypto_instance_ctx(inst);",
          "925:  struct cbcmac_tfm_ctx *ctx = crypto_tfm_ctx(tfm);",
          "927:  cipher = crypto_spawn_cipher(spawn);",
          "928:  if (IS_ERR(cipher))",
          "929:   return PTR_ERR(cipher);",
          "931:  ctx->child = cipher;",
          "933:  return 0;",
          "934: };",
          "936: static void cbcmac_exit_tfm(struct crypto_tfm *tfm)",
          "937: {",
          "938:  struct cbcmac_tfm_ctx *ctx = crypto_tfm_ctx(tfm);",
          "939:  crypto_free_cipher(ctx->child);",
          "940: }",
          "942: static int cbcmac_create(struct crypto_template *tmpl, struct rtattr **tb)",
          "943: {",
          "944:  struct shash_instance *inst;",
          "945:  struct crypto_alg *alg;",
          "946:  int err;",
          "948:  err = crypto_check_attr_type(tb, CRYPTO_ALG_TYPE_SHASH);",
          "949:  if (err)",
          "950:   return err;",
          "952:  alg = crypto_get_attr_alg(tb, CRYPTO_ALG_TYPE_CIPHER,",
          "953:       CRYPTO_ALG_TYPE_MASK);",
          "954:  if (IS_ERR(alg))",
          "955:   return PTR_ERR(alg);",
          "957:  inst = shash_alloc_instance(\"cbcmac\", alg);",
          "958:  err = PTR_ERR(inst);",
          "959:  if (IS_ERR(inst))",
          "960:   goto out_put_alg;",
          "962:  err = crypto_init_spawn(shash_instance_ctx(inst), alg,",
          "963:     shash_crypto_instance(inst),",
          "964:     CRYPTO_ALG_TYPE_MASK);",
          "965:  if (err)",
          "966:   goto out_free_inst;",
          "968:  inst->alg.base.cra_priority = alg->cra_priority;",
          "969:  inst->alg.base.cra_blocksize = 1;",
          "971:  inst->alg.digestsize = alg->cra_blocksize;",
          "972:  inst->alg.descsize = sizeof(struct cbcmac_desc_ctx) +",
          "973:         alg->cra_blocksize;",
          "975:  inst->alg.base.cra_ctxsize = sizeof(struct cbcmac_tfm_ctx);",
          "976:  inst->alg.base.cra_init = cbcmac_init_tfm;",
          "977:  inst->alg.base.cra_exit = cbcmac_exit_tfm;",
          "979:  inst->alg.init = crypto_cbcmac_digest_init;",
          "980:  inst->alg.update = crypto_cbcmac_digest_update;",
          "981:  inst->alg.final = crypto_cbcmac_digest_final;",
          "982:  inst->alg.setkey = crypto_cbcmac_digest_setkey;",
          "984:  err = shash_register_instance(tmpl, inst);",
          "986: out_free_inst:",
          "987:  if (err)",
          "988:   shash_free_instance(shash_crypto_instance(inst));",
          "990: out_put_alg:",
          "991:  crypto_mod_put(alg);",
          "992:  return err;",
          "993: }",
          "995: static struct crypto_template crypto_cbcmac_tmpl = {",
          "996:  .name = \"cbcmac\",",
          "997:  .create = cbcmac_create,",
          "998:  .free = shash_free_instance,",
          "999:  .module = THIS_MODULE,",
          "1000: };",
          "1006:  err = crypto_register_template(&crypto_cbcmac_tmpl);",
          "1010:  err = crypto_register_template(&crypto_ccm_base_tmpl);",
          "1011:  if (err)",
          "1012:   goto out_undo_cbcmac;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "922:  crypto_unregister_template(&crypto_ccm_tmpl);",
          "923: out_undo_base:",
          "924:  crypto_unregister_template(&crypto_ccm_base_tmpl);",
          "925:  goto out;",
          "926: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1029: out_undo_cbcmac:",
          "1030:  crypto_register_template(&crypto_cbcmac_tmpl);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "930:  crypto_unregister_template(&crypto_rfc4309_tmpl);",
          "931:  crypto_unregister_template(&crypto_ccm_tmpl);",
          "932:  crypto_unregister_template(&crypto_ccm_base_tmpl);",
          "933: }",
          "935: module_init(crypto_ccm_module_init);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1039:  crypto_unregister_template(&crypto_cbcmac_tmpl);",
          "",
          "---------------"
        ]
      }
    }
  ]
}