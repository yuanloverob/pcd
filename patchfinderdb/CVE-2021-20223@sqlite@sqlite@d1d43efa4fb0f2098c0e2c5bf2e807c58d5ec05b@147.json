{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b2fe5a7c35a114e8d4b869968c61c7b6a9a99cb7",
      "candidate_info": {
        "commit_hash": "b2fe5a7c35a114e8d4b869968c61c7b6a9a99cb7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b2fe5a7c35a114e8d4b869968c61c7b6a9a99cb7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c",
          "test/func.test"
        ],
        "message": "Fix to the register validity tracking logic in debug builds.  No impact on release builds.\n\nFossilOrigin-Name: 0a500da6aa659a8e73206e6d22ddbf2da5e4f1d1d551eeb66433163a3e13109d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c",
          "test/func.test||test/func.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8845a8c22a4ceabee130ce2addbe07e13b0496eeb542c89850f8658d21a48f89",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1209:   assert( pParse->pVdbe );",
          "1210:   assert( iFirst>=1 );",
          "1211:   assert( iFirst+N-1<=pParse->nMem );",
          "1220:   }",
          "1221:   if( N>0 ){",
          "1222:     sqlite3VdbeAddOp3(pParse->pVdbe, OP_ReleaseReg, iFirst, N, *(int*)&mask);",
          "",
          "[Removed Lines]",
          "1212:   while( N>0 && (mask&1)!=0 ){",
          "1213:     mask >>= 1;",
          "1214:     iFirst++;",
          "1215:     N--;",
          "1216:   }",
          "1217:   while( N>0 && N<=32 && (mask & MASKBIT32(N-1))!=0 ){",
          "1218:     mask &= ~MASKBIT32(N-1);",
          "1219:     N--;",
          "",
          "[Added Lines]",
          "1212:   if( N<=31 && mask!=0 ){",
          "1213:     while( N>0 && (mask&1)!=0 ){",
          "1214:       mask >>= 1;",
          "1215:       iFirst++;",
          "1216:       N--;",
          "1217:     }",
          "1218:     while( N>0 && N<=32 && (mask & MASKBIT32(N-1))!=0 ){",
          "1219:       mask &= ~MASKBIT32(N-1);",
          "1220:       N--;",
          "1221:     }",
          "",
          "---------------"
        ],
        "test/func.test||test/func.test": [
          "File: test/func.test -> test/func.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1459:     INSERT INTO t33b(x,y) VALUES(testdirectonly(new.aaa),new.b);",
          "1460:   END}}",
          "1463: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1462: # 2020-01-09 Yongheng fuzzer find",
          "1463: # The bug is in the register-validity debug logic, not in the SQLite core",
          "1464: # and as such it only impacts debug builds.  Release builds work fine.",
          "1465: #",
          "1466: reset_db",
          "1467: do_execsql_test func-34.10 {",
          "1468:   CREATE TABLE t1(a INT CHECK(",
          "1469:      datetime( 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,",
          "1470:               10,11,12,13,14,15,16,17,18,19,",
          "1471:               20,21,22,23,24,25,26,27,28,29,",
          "1472:               30,31,32,33,34,35,36,37,38,39,",
          "1473:               40,41,42,43,44,45,46,47,48,a)",
          "1474:    )",
          "1475:   );",
          "1476:   INSERT INTO t1(a) VALUES(1),(2);",
          "1477:   SELECT * FROM t1;",
          "1478: } {1 2}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4c983b2f86d6440cb0687008fd200b681f692749",
      "candidate_info": {
        "commit_hash": "4c983b2f86d6440cb0687008fd200b681f692749",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4c983b2f86d6440cb0687008fd200b681f692749",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/collate1.test"
        ],
        "message": "Remove an over-zealous ALWAYS() macro and add a test case that shows that the conditional can sometimes be false.\n\nFossilOrigin-Name: 536e9a9d1bd514056ecbc8172ed58f2656a86f791a15e526ae2e5f2c93687b6a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/collate1.test||test/collate1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9d791116420f4e3f613775569e0a0cba2fc22da568b2fb2df920bcf9c9002938",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2638:       sqlite3ColumnsFromExprList(pParse, pTable->pCheck,",
          "2639:                                  &pTable->nCol, &pTable->aCol);",
          "2640:       if( db->mallocFailed==0",
          "2642:        && pTable->nCol==pSel->pEList->nExpr",
          "2643:       ){",
          "2644:         sqlite3SelectAddColumnTypeAndCollation(pParse, pTable, pSel,",
          "",
          "[Removed Lines]",
          "2641:        && ALWAYS(pParse->nErr==0)",
          "",
          "[Added Lines]",
          "2641:        && pParse->nErr==0",
          "",
          "---------------"
        ],
        "test/collate1.test||test/collate1.test": [
          "File: test/collate1.test -> test/collate1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "436:   faultsim_test_result {0 {}}",
          "437: }",
          "439: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "439: # 2020-01-03 dbsqlfuzz find",
          "440: #",
          "441: reset_db",
          "442: do_catchsql_test 10.0 {",
          "443:   CREATE TABLE t1(a INTEGER PRIMARY KEY,b);",
          "444:   INSERT INTO t1 VALUES(0,NULL);",
          "445:   CREATE TABLE t2(x UNIQUE);",
          "446:   CREATE VIEW v1a(z,y) AS SELECT x COLLATE x FROM t2;",
          "447:   SELECT a,b,z,y,'' FROM t1 JOIN v1a ON b IS NOT FALSE;",
          "448: } {1 {no such collation sequence: x}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0d985985077695cc2a620c42194857f657c1a3e4",
      "candidate_info": {
        "commit_hash": "0d985985077695cc2a620c42194857f657c1a3e4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0d985985077695cc2a620c42194857f657c1a3e4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h"
        ],
        "message": "*Remove* the macros, not just comment them out.\n\nFossilOrigin-Name: e5dc2939d3e8694d648fc9b73b1174da5b1349e20fbb9cf1c91268939f308f89",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3ef0d44edd0354cda9b6237f992cb67a2170ee8f1f464b1f38ac36e3a133bc71",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1767: #define LIKEFUNC(zName, nArg, arg, flags) \\",
          "1768:   {nArg, SQLITE_FUNC_CONSTANT|SQLITE_UTF8|flags, \\",
          "1769:    (void *)arg, 0, likeFunc, 0, 0, 0, #zName, {0} }",
          "1778: #define WAGGREGATE(zName, nArg, arg, nc, xStep, xFinal, xValue, xInverse, f) \\",
          "1779:   {nArg, SQLITE_UTF8|(nc*SQLITE_FUNC_NEEDCOLL)|f, \\",
          "1780:    SQLITE_INT_TO_PTR(arg), 0, xStep,xFinal,xValue,xInverse,#zName, {0}}",
          "",
          "[Removed Lines]",
          "1771: #define AGGREGATE(zName, nArg, arg, nc, xStep, xFinal, xValue) \\",
          "1772:   {nArg, SQLITE_UTF8|(nc*SQLITE_FUNC_NEEDCOLL), \\",
          "1773:    SQLITE_INT_TO_PTR(arg), 0, xStep,xFinal,xValue,0,#zName, {0}}",
          "1774: #define AGGREGATE2(zName, nArg, arg, nc, xStep, xFinal, extraFlags) \\",
          "1775:   {nArg, SQLITE_UTF8|(nc*SQLITE_FUNC_NEEDCOLL)|extraFlags, \\",
          "1776:    SQLITE_INT_TO_PTR(arg), 0, xStep,xFinal,xFinal,0,#zName, {0}}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "09cf569292aaf37a7678524f8c8270c1f6612c67",
      "candidate_info": {
        "commit_hash": "09cf569292aaf37a7678524f8c8270c1f6612c67",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/09cf569292aaf37a7678524f8c8270c1f6612c67",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/upfrom1.test"
        ],
        "message": "Fix a corner-case error in the new UPDATE FROM logic helpfully discovered by OSSFuzz.\n\nFossilOrigin-Name: 5cc200939d3a33566ddb858fc74c878acc72cfe5cf4c9b1d08e7b13e4d5ff566",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/upfrom1.test||test/upfrom1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: de2a90812498e504c9b8eeb83bfc48a948b45e87bdfa242c0aa9f0377d90740f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1138:       {",
          "1139:         int i2 = pDest->iSDParm2;",
          "1140:         int r1 = sqlite3GetTempReg(pParse);",
          "1142:         if( i2<0 ){",
          "1143:           sqlite3VdbeAddOp3(v, OP_Insert, iParm, r1, regResult);",
          "1144:         }else{",
          "",
          "[Removed Lines]",
          "1141:         sqlite3VdbeAddOp3(v, OP_MakeRecord,regResult+(i2<0),nResultCol-(i2<0),r1);",
          "",
          "[Added Lines]",
          "1145:         sqlite3VdbeAddOp2(v, OP_IsNull, regResult, iBreak); VdbeCoverage(v);",
          "1147:         sqlite3VdbeAddOp3(v, OP_MakeRecord,",
          "1148:                           regResult+(i2<0), nResultCol-(i2<0), r1);",
          "",
          "---------------"
        ],
        "test/upfrom1.test||test/upfrom1.test": [
          "File: test/upfrom1.test -> test/upfrom1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "164:   UPDATE t5 AS apples SET b=1 FROM t5 AS apples;",
          "165: } } } 1",
          "167: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167: # Problem found by OSSFuzz on 2020-07-20",
          "168: # https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=24282",
          "169: #",
          "170: reset_db",
          "171: do_execsql_test 3.1 {",
          "172:   CREATE TABLE t0(a);",
          "173:   CREATE TABLE t1(b);",
          "174:   UPDATE t1 SET b=sum(a) FROM t0;",
          "175:   SELECT * FROM t0, t1;",
          "176: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8d5cea6b61c30dd839a32e253bf7ae241b5662f4",
      "candidate_info": {
        "commit_hash": "8d5cea6b61c30dd839a32e253bf7ae241b5662f4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8d5cea6b61c30dd839a32e253bf7ae241b5662f4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "This variant to the fix for ticket [e0c2ad1aa8a9c691] uses fewer CPU cycles.\n\nFossilOrigin-Name: fb5a8a9edd0a4f979d6c30278d4ddc73c651f56ae989b4e5983fca36887c5ceb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5f60b527b938c0778e8f725c635ce0dc5ed7a4e01fd6252aa2cdb64da2f625bc",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3805:         Table *pTab = pCol->pTab;",
          "3806:         sqlite3VdbeAddOp3(v, OP_Column, pAggInfo->sortingIdxPTab,",
          "3807:                               pCol->iSorterColumn, target);",
          "3810:         }",
          "3811:         return target;",
          "3812:       }",
          "",
          "[Removed Lines]",
          "3808:         if( ALWAYS(pTab) && pCol->iColumn>=0 ){",
          "3809:           sqlite3ColumnDefault(v, pTab, pCol->iColumn, target);",
          "",
          "[Added Lines]",
          "3808:         if( pCol->iColumn<0 ){",
          "3809:           VdbeComment((v,\"%s.rowid\",pTab->zName));",
          "3810:         }else{",
          "3811:           VdbeComment((v,\"%s.%s\",pTab->zName,pTab->aCol[pCol->iColumn].zName));",
          "3812:           if( pTab->aCol[pCol->iColumn].affinity==SQLITE_AFF_REAL ){",
          "3813:             sqlite3VdbeAddOp1(v, OP_RealAffinity, target);",
          "3814:           }",
          "",
          "---------------"
        ]
      }
    }
  ]
}