{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "be952c11dc730f70f4e462a83f745b4ec7ede313",
      "candidate_info": {
        "commit_hash": "be952c11dc730f70f4e462a83f745b4ec7ede313",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/be952c11dc730f70f4e462a83f745b4ec7ede313",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "src/update.c",
          "test/fts4upfrom.test",
          "test/upfrom3.test"
        ],
        "message": "Add test cases and fixes for UPDATE...FROM statements that modify primary key columns.\n\nFossilOrigin-Name: 47c87af3e52bce10fbcc2cbe832d659b0c204bfb3368d9314fa1b01120129254",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "src/update.c||src/update.c",
          "test/fts4upfrom.test||test/fts4upfrom.test",
          "test/upfrom3.test||test/upfrom3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5ee3c27e20d12a126fb773b428bb864102b949a5b26a8d5c523753dcedf4be10",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "756: #endif",
          "757:   switch( pExpr->op ){",
          "764:     case TK_ROW: {",
          "765:       SrcList *pSrcList = pNC->pSrcList;",
          "",
          "[Removed Lines]",
          "759: #if defined(SQLITE_ENABLE_UPDATE_DELETE_LIMIT) && !defined(SQLITE_OMIT_SUBQUERY)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "774:       pExpr->affExpr = SQLITE_AFF_INTEGER;",
          "775:       break;",
          "776:     }",
          "",
          "[Removed Lines]",
          "777: #endif /* defined(SQLITE_ENABLE_UPDATE_DELETE_LIMIT)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "637:       iEph = pParse->nTab++;",
          "638:       if( pPk ) sqlite3VdbeAddOp3(v, OP_Null, 0, iPk, iPk+nPk-1);",
          "639:       addrOpen = sqlite3VdbeAddOp2(v, OP_OpenEphemeral, iEph, nEphCol);",
          "641:       if( nChangeFrom ){",
          "642:         updatePopulateEphTable(",
          "643:             pParse, iEph, pPk, pChanges, pTabList, pWhere, pOrderBy, pLimit",
          "",
          "[Removed Lines]",
          "640:       if( pPk ) sqlite3VdbeSetP4KeyInfo(pParse, pPk);",
          "",
          "[Added Lines]",
          "640:       if( pPk ){",
          "641:         KeyInfo *pKeyInfo = sqlite3KeyInfoOfIndex(pParse, pPk);",
          "642:         if( pKeyInfo ){",
          "643:           pKeyInfo->nAllField = nEphCol;",
          "644:           sqlite3VdbeAppendP4(v, pKeyInfo, P4_KEYINFO);",
          "645:         }",
          "646:       }",
          "",
          "---------------"
        ],
        "test/fts4upfrom.test||test/fts4upfrom.test": [
          "File: test/fts4upfrom.test -> test/fts4upfrom.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: }",
          "27: foreach {tn create_table} {",
          "28:   1 { CREATE VIRTUAL TABLE ft USING fts3(a, b, c) }",
          "29:   2 { CREATE TABLE ft(a, b, c) }",
          "30:   3 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28:   0 { CREATE VIRTUAL TABLE ft USING fts5(a, b, c) }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:     END;",
          "41:   }",
          "42: } {",
          "43:   catchsql { DROP VIEW IF EXISTS changes }",
          "44:   catchsql { DROP TABLE IF EXISTS ft }",
          "45:   catchsql { DROP VIEW IF EXISTS ft }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44:   if {$tn==0} { ifcapable !fts5 { continue } }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92:   }",
          "94:   do_execsql_test 1.$tn.7 {",
          "96:   } {",
          "101:   }",
          "102: }",
          "",
          "[Removed Lines]",
          "95:     SELECT a, b, c FROM ft ORDER BY rowid;",
          "97:     a {} apricot",
          "98:     b apple blueberry",
          "99:     c banana clementine",
          "100:     d cherry dewberry",
          "",
          "[Added Lines]",
          "97:     SELECT rowid, a, b, c FROM ft ORDER BY rowid;",
          "99:     1 a {} apricot",
          "100:     2 b apple blueberry",
          "101:     3 c banana clementine",
          "102:     4 d cherry dewberry",
          "103:   }",
          "105:   do_execsql_test 1.$tn.8 \"",
          "106:     WITH x1(o, n) AS (",
          "107:         VALUES(1, 11) UNION ALL",
          "108:         VALUES(2, 12) UNION ALL",
          "109:         VALUES(3, 13) UNION ALL",
          "110:         VALUES(4, 14)",
          "111:     )",
          "112:     SELECT ft.rowid, a, b, c, o, n FROM ft, x1 WHERE ft.rowid = o;",
          "113:   \" {",
          "114:     1 a {} apricot 1 11",
          "115:     2 b apple blueberry 2 12",
          "116:     3 c banana clementine 3 13",
          "117:     4 d cherry dewberry 4 14",
          "118:   }",
          "120:   set ROWID rowid",
          "121:   if {$tn==1} { set ROWID docid }",
          "122:   do_execsql_test 1.$tn.9 \"",
          "123:     WITH x1(o, n) AS (",
          "124:         VALUES(1, 11) UNION ALL",
          "125:         VALUES(2, 12) UNION ALL",
          "126:         VALUES(3, 13) UNION ALL",
          "127:         VALUES(4, 14)",
          "128:     )",
          "129:     UPDATE ft SET $ROWID = n FROM x1 WHERE ft.rowid = o;",
          "130:     SELECT rowid, a, b, c FROM ft ORDER BY rowid;",
          "131:   \" {",
          "132:     11 a {} apricot",
          "133:     12 b apple blueberry",
          "134:     13 c banana clementine",
          "135:     14 d cherry dewberry",
          "",
          "---------------"
        ],
        "test/upfrom3.test||test/upfrom3.test": [
          "File: test/upfrom3.test -> test/upfrom3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2020 July 14",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "13: set testdir [file dirname $argv0]",
          "14: source $testdir/tester.tcl",
          "15: set testprefix upfrom3",
          "17: foreach {tn wo} {",
          "18:   1 \"\"",
          "19:   2 \"WITHOUT ROWID\"",
          "20: } {",
          "21:   reset_db",
          "22:   eval [string map [list %WO% $wo %TN% $tn] {",
          "24:   do_execsql_test 1.%TN%.0 {",
          "25:     CREATE TABLE log(t TEXT);",
          "26:     CREATE TABLE t1(x INTEGER PRIMARY KEY, y, z UNIQUE) %WO%;",
          "27:     CREATE INDEX t1y ON t1(y);",
          "29:     INSERT INTO t1 VALUES(1, 'i',   'one');",
          "30:     INSERT INTO t1 VALUES(2, 'ii',  'two');",
          "31:     INSERT INTO t1 VALUES(3, 'iii', 'three');",
          "32:     INSERT INTO t1 VALUES(4, 'iv',  'four');",
          "33:   }",
          "35:   do_execsql_test 1.%TN%.1 {",
          "36:     CREATE TABLE x1(o, n);",
          "37:     INSERT INTO x1 VALUES(1, 11);",
          "38:     INSERT INTO x1 VALUES(2, 12);",
          "39:     INSERT INTO x1 VALUES(3, 13);",
          "40:     INSERT INTO x1 VALUES(4, 14);",
          "41:     UPDATE t1 SET x=n FROM x1 WHERE x=o;",
          "42:     SELECT x, y, z FROM t1 ORDER BY 1;",
          "43:   } {",
          "44:     11 i one",
          "45:     12 ii two",
          "46:     13 iii three",
          "47:     14 iv four",
          "48:   }",
          "50:   do_test 1.%TN%.2 { db changes } 4",
          "52:   do_execsql_test 1.%TN%.3 {",
          "53:     INSERT INTO x1 VALUES(11, 21);",
          "54:     INSERT INTO x1 VALUES(12, 22);",
          "55:     INSERT INTO x1 VALUES(13, 23);",
          "56:     INSERT INTO x1 VALUES(14, 24);",
          "58:     INSERT INTO x1 VALUES(21, 31);",
          "59:     INSERT INTO x1 VALUES(22, 32);",
          "60:     INSERT INTO x1 VALUES(23, 33);",
          "61:     INSERT INTO x1 VALUES(24, 34);",
          "62:     UPDATE t1 SET x=n FROM x1 WHERE x=o;",
          "63:     SELECT x, y, z FROM t1 ORDER BY 1;",
          "64:   } {",
          "65:     21 i one",
          "66:     22 ii two",
          "67:     23 iii three",
          "68:     24 iv four",
          "69:   }",
          "71:   do_execsql_test 1.%TN%.4 {",
          "72:     UPDATE t1 SET x=n FROM x1 WHERE x=o;",
          "73:     SELECT x, y, z FROM t1 ORDER BY 1;",
          "74:   } {",
          "75:     31 i one",
          "76:     32 ii two",
          "77:     33 iii three",
          "78:     34 iv four",
          "79:   }",
          "81:   do_execsql_test 1.%TN%.5 {",
          "82:     INSERT INTO x1 VALUES(31, 32);",
          "83:     INSERT INTO x1 VALUES(33, 34);",
          "84:     UPDATE OR REPLACE t1 SET x=n FROM x1 WHERE x=o;",
          "85:     SELECT x, y, z FROM t1 ORDER BY 1;",
          "86:   } {",
          "87:     32 i one",
          "88:     34 iii three",
          "89:   }",
          "91:   do_execsql_test 1.%TN%.6 {",
          "92:     INSERT INTO t1 VALUES(33, 'ii', 'two');",
          "93:     INSERT INTO t1 VALUES(35, 'iv', 'four');",
          "94:   }",
          "96:   do_execsql_test 1.%TN%.7 {",
          "97:     CREATE TABLE x2(o, n, zz);",
          "98:     INSERT INTO x2 VALUES(32, 41, 'four');",
          "99:     INSERT INTO x2 VALUES(33, 42, 'three');",
          "100:     UPDATE OR IGNORE t1 SET x=n, z=zz FROM x2 WHERE x=o;",
          "101:     SELECT x, y, z FROM t1 ORDER BY 1;",
          "102:   } {",
          "103:     32 i one",
          "104:     33 ii two",
          "105:     34 iii three",
          "106:     35 iv four",
          "107:   }",
          "109:   do_execsql_test 1.%TN%.8 {",
          "110:     UPDATE OR REPLACE t1 SET x=n, z=zz FROM x2 WHERE x=o;",
          "111:     SELECT x, y, z FROM t1 ORDER BY 1;",
          "112:   } {",
          "113:     41 i four",
          "114:     42 ii three",
          "115:   }",
          "117:   }]",
          "118: }",
          "120: do_execsql_test 2.1.1 {",
          "121:   CREATE TABLE u1(a, b, c, PRIMARY KEY(b, c)) WITHOUT ROWID;",
          "122:   INSERT INTO u1 VALUES(0, 0, 0);",
          "123:   INSERT INTO u1 VALUES(1, 0, 1);",
          "124:   INSERT INTO u1 VALUES(2, 1, 0);",
          "125:   INSERT INTO u1 VALUES(3, 1, 1);",
          "126: }",
          "128: do_execsql_test 2.1.2 {",
          "129:   CREATE TABLE map(f, t);",
          "130:   INSERT INTO map VALUES(0, 10);",
          "131:   INSERT INTO map VALUES(1, 11);",
          "132:   UPDATE u1 SET c=t FROM map WHERE c=f;",
          "133:   SELECT * FROM u1 ORDER BY a;",
          "134: } {",
          "135:   0 0 10",
          "136:   1 0 11",
          "137:   2 1 10",
          "138:   3 1 11",
          "139: }",
          "141: do_execsql_test 2.1.3 {",
          "142:   UPDATE u1 SET b=t FROM map WHERE b=f;",
          "143:   SELECT * FROM u1 ORDER BY a;",
          "144: } {",
          "145:   0 10 10",
          "146:   1 10 11",
          "147:   2 11 10",
          "148:   3 11 11",
          "149: }",
          "151: do_execsql_test 2.1.4 {",
          "152:   CREATE TABLE map2(o1, o2, n1, n2);",
          "153:   INSERT INTO map2 VALUES",
          "154:     (10, 10, 50, 50), (10, 11, 50, 60),",
          "155:     (11, 10, 60, 50), (11, 11, 60, 60);",
          "156:   UPDATE u1 SET b=n1, c=n2 FROM map2 WHERE b=o1 AND c=o2;",
          "157:   SELECT * FROM u1 ORDER BY a;",
          "158: } {",
          "159:   0 50 50",
          "160:   1 50 60",
          "161:   2 60 50",
          "162:   3 60 60",
          "163: }",
          "165: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9216de8a230b001fd9841bcab5407c941b89ffb0",
      "candidate_info": {
        "commit_hash": "9216de8a230b001fd9841bcab5407c941b89ffb0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9216de8a230b001fd9841bcab5407c941b89ffb0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/global.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/test1.c",
          "src/window.c"
        ],
        "message": "Provide the ability to use the SELECTTRACE() debugging macro outside of the select.c source file.  Use this to add a new SELECTTRACE() entry in window.c for improved tracing of window-function parse-tree rewriting.\n\nFossilOrigin-Name: 30c6d895b573d5f2a53487b3b7a0d20be7e382c7a0bc87336bd43fbd2fa89bf4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/global.c||src/global.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/test1.c||src/test1.c",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fd5abb1a7b5a55127d5c0d5ff448020d8bccab44e4f5afe1eb88fc19578af735",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/global.c||src/global.c": [
          "File: src/global.c -> src/global.c"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: #include \"sqliteInt.h\"",
          "",
          "[Removed Lines]",
          "20: #if SELECTTRACE_ENABLED",
          "22: # define SELECTTRACE(K,P,S,X)  \\",
          "23:   if(sqlite3SelectTrace&(K))   \\",
          "24:     sqlite3DebugPrintf(\"%u/%d/%p: \",(S)->selId,(P)->addrExplain,(S)),\\",
          "25:     sqlite3DebugPrintf X",
          "26: #else",
          "27: # define SELECTTRACE(K,P,S,X)",
          "28: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "979: #else",
          "980: # define SELECTTRACE_ENABLED 0",
          "981: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "982: #if defined(SQLITE_ENABLE_SELECTTRACE)",
          "983: # define SELECTTRACE_ENABLED 1",
          "984: # define SELECTTRACE(K,P,S,X)  \\",
          "985:   if(sqlite3SelectTrace&(K))   \\",
          "986:     sqlite3DebugPrintf(\"%u/%d/%p: \",(S)->selId,(P)->addrExplain,(S)),\\",
          "987:     sqlite3DebugPrintf X",
          "988: #else",
          "989: # define SELECTTRACE(K,P,S,X)",
          "990: # define SELECTTRACE_ENABLED 0",
          "991: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4555: extern const unsigned char sqlite3CtypeMap[];",
          "4556: extern SQLITE_WSD struct Sqlite3Config sqlite3Config;",
          "4557: extern FuncDefHash sqlite3BuiltinFunctions;",
          "4558: #ifndef SQLITE_OMIT_WSD",
          "4559: extern int sqlite3PendingByte;",
          "4560: #endif",
          "4562: #ifdef VDBE_PROFILE",
          "4563: extern sqlite3_uint64 sqlite3NProfileCnt;",
          "4564: #endif",
          "",
          "[Removed Lines]",
          "4561: #endif",
          "",
          "[Added Lines]",
          "4568: extern u32 sqlite3SelectTrace;",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8164: #endif",
          "8165: #endif",
          "8166: #if defined(SQLITE_ENABLE_SELECTTRACE)",
          "8168: #endif",
          "8170:   for(i=0; i<sizeof(aCmd)/sizeof(aCmd[0]); i++){",
          "",
          "[Removed Lines]",
          "8167:   extern int sqlite3SelectTrace;",
          "",
          "[Added Lines]",
          "8167:   extern u32 sqlite3SelectTrace;",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1043:     pSub = sqlite3SelectNew(",
          "1044:         pParse, pSublist, pSrc, pWhere, pGroupBy, pHaving, pSort, 0, 0",
          "1045:     );",
          "1046:     p->pSrc = sqlite3SrcListAppend(pParse, 0, 0, 0);",
          "1047:     if( p->pSrc ){",
          "1048:       Table *pTab2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1046:     SELECTTRACE(1,pParse,pSub,",
          "1047:        (\"New window-function subquery in FROM clause of (%u/%p)\\n\",",
          "1048:        p->selId, p));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4eac5f04ab996fc5bf262edfcead84bc4e8a3ccb",
      "candidate_info": {
        "commit_hash": "4eac5f04ab996fc5bf262edfcead84bc4e8a3ccb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4eac5f04ab996fc5bf262edfcead84bc4e8a3ccb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/fuzzdata8.db"
        ],
        "message": "Extra defense against problems following an OOM.  dbsqlfuzz find.  Also import the latest dbsqlfuzz test cases.\n\nFossilOrigin-Name: 0a70f5ddaf3567f335cc0fd0fcd5303e2afb5e38a6388faddf5cab1f2a74e3dd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a11b393dc2c882cf0b3c47c3405bf43ca1d6459605bd39cccce4d32da653a72d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2207:     case TK_COLUMN:",
          "2208:       return ExprHasProperty(p, EP_CanBeNull) ||",
          "2211:     default:",
          "2212:       return 1;",
          "2213:   }",
          "",
          "[Removed Lines]",
          "2210:              (p->iColumn>=0 && p->y.pTab->aCol[p->iColumn].notNull==0);",
          "",
          "[Added Lines]",
          "2210:              (p->iColumn>=0",
          "2212:               && p->y.pTab->aCol[p->iColumn].notNull==0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3224:   }else{",
          "3225:     destStep2 = destStep6 = sqlite3VdbeMakeLabel(pParse);",
          "3226:   }",
          "3227:   for(i=0; i<nVector; i++){",
          "3228:     Expr *p = sqlite3VectorFieldSubexpr(pExpr->pLeft, i);",
          "3229:     if( sqlite3ExprCanBeNull(p) ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3229:   if( pParse->nErr ) goto sqlite3ExprCodeIN_finished;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "64de2a5f7b77ebad6adda5914976ef4ed09c313a",
      "candidate_info": {
        "commit_hash": "64de2a5f7b77ebad6adda5914976ef4ed09c313a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/64de2a5f7b77ebad6adda5914976ef4ed09c313a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/func.c",
          "src/sqliteInt.h"
        ],
        "message": "Also set the SQLITE_DIRECTONLY flag on the load_extension() function.\n\nFossilOrigin-Name: 3bd095a53119c368fe30e539983588b27957203344cf427405b9a64784b8eba7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/func.c||src/func.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f3171dc22e4d3a40ca17fe609391d92fc6a997b775bfefa5947aec69c889aa73",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/func.c||src/func.c": [
          "File: src/func.c -> src/func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1911:     FUNCTION(soundex,            1, 0, 0, soundexFunc      ),",
          "1912: #endif",
          "1913: #ifndef SQLITE_OMIT_LOAD_EXTENSION",
          "1916: #endif",
          "1917: #if SQLITE_USER_AUTHENTICATION",
          "1918:     FUNCTION(sqlite_crypt,       2, 0, 0, sqlite3CryptFunc ),",
          "",
          "[Removed Lines]",
          "1914:     VFUNCTION(load_extension,    1, 0, 0, loadExt          ),",
          "1915:     VFUNCTION(load_extension,    2, 0, 0, loadExt          ),",
          "",
          "[Added Lines]",
          "1914:     SFUNCTION(load_extension,    1, 0, 0, loadExt          ),",
          "1915:     SFUNCTION(load_extension,    2, 0, 0, loadExt          ),",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1772: #define VFUNCTION(zName, nArg, iArg, bNC, xFunc) \\",
          "1773:   {nArg, SQLITE_UTF8|(bNC*SQLITE_FUNC_NEEDCOLL), \\",
          "1774:    SQLITE_INT_TO_PTR(iArg), 0, xFunc, 0, 0, 0, #zName, {0} }",
          "1775: #define DFUNCTION(zName, nArg, iArg, bNC, xFunc) \\",
          "1776:   {nArg, SQLITE_FUNC_SLOCHNG|SQLITE_UTF8, \\",
          "1777:    0, 0, xFunc, 0, 0, 0, #zName, {0} }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1779: #define SFUNCTION(zName, nArg, iArg, bNC, xFunc) \\",
          "1780:   {nArg, SQLITE_UTF8|SQLITE_DIRECTONLY, \\",
          "1781:    SQLITE_INT_TO_PTR(iArg), 0, xFunc, 0, 0, 0, #zName, {0} }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4a4c1bf85662b428235f99b92a07980191ba1e10",
      "candidate_info": {
        "commit_hash": "4a4c1bf85662b428235f99b92a07980191ba1e10",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4a4c1bf85662b428235f99b92a07980191ba1e10",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c"
        ],
        "message": "Make the result of sqlite3_normalized_sql() survive its statement being reprepared.\n\nFossilOrigin-Name: 4330f0795dbc2ab41dddd41d5979331fb9b78c477c66367c4be52f929531a45f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 175c15008e9f19b8f6762c2fe4a545735128765081980eed01d5e46ca4acb500",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:   zTmp = pA->zSql;",
          "134:   pA->zSql = pB->zSql;",
          "135:   pB->zSql = zTmp;",
          "137:   zTmp = pA->zNormSql;",
          "138:   pA->zNormSql = pB->zNormSql;",
          "139:   pB->zNormSql = zTmp;",
          "",
          "[Removed Lines]",
          "136: #if 0",
          "",
          "[Added Lines]",
          "136: #ifdef SQLITE_ENABLE_NORMALIZE",
          "",
          "---------------"
        ]
      }
    }
  ]
}