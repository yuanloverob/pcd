{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c97b4f1971d79a687f32dd503326bde2bcc25729",
      "candidate_info": {
        "commit_hash": "c97b4f1971d79a687f32dd503326bde2bcc25729",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/c97b4f1971d79a687f32dd503326bde2bcc25729",
        "files": [
          "node.gyp"
        ],
        "message": "build: remove unnecessary link flags from node.gyp",
        "before_after_code_files": [
          "node.gyp||node.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "node.gyp||node.gyp": [
          "File: node.gyp -> node.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:             'PLATFORM=\"darwin\"',",
          "192:           ],",
          "193:         }],",
          "200:         [ 'OS==\"freebsd\"', {",
          "201:           'libraries': [",
          "202:             '-lutil',",
          "",
          "[Removed Lines]",
          "194:         [ 'OS==\"linux\"', {",
          "195:           'libraries': [",
          "196:             '-ldl',",
          "197:             '-lutil' # needed for openpty",
          "198:           ],",
          "199:         }],",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ff512634acbf2ddd10f167a5600e2acba3484802",
      "candidate_info": {
        "commit_hash": "ff512634acbf2ddd10f167a5600e2acba3484802",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/ff512634acbf2ddd10f167a5600e2acba3484802",
        "files": [
          "src/node_version.h"
        ],
        "message": "version: bump `NODE_PATCH_VERSION`\n\nPatch version hasn't been bumped correctly in\n72cbb7492cb5956c8265b415bd6ff473b7b89f35.",
        "before_after_code_files": [
          "src/node_version.h||src/node_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_version.h||src/node_version.h": [
          "File: src/node_version.h -> src/node_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #define NODE_MAJOR_VERSION 0",
          "30: #define NODE_MINOR_VERSION 7",
          "32: #define NODE_VERSION_IS_RELEASE 0",
          "34: #ifndef NODE_STRINGIFY",
          "",
          "[Removed Lines]",
          "31: #define NODE_PATCH_VERSION 0",
          "",
          "[Added Lines]",
          "31: #define NODE_PATCH_VERSION 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b7b7b29f509c46e6d5854b1cd04c0ec757de6389",
      "candidate_info": {
        "commit_hash": "b7b7b29f509c46e6d5854b1cd04c0ec757de6389",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/b7b7b29f509c46e6d5854b1cd04c0ec757de6389",
        "files": [
          "lib/dns.js"
        ],
        "message": "dns: remove unused functions",
        "before_after_code_files": [
          "lib/dns.js||lidns.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/dns.js||lidns.js": [
          "File: lib/dns.js -> lidns.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: }",
          "",
          "[Removed Lines]",
          "44: function familyToSym(family) {",
          "45:   switch (family) {",
          "46:     case 4: return cares.AF_INET;",
          "47:     case 6: return cares.AF_INET6;",
          "48:     default: return cares.AF_UNSPEC;",
          "49:   }",
          "50: }",
          "53: function symToFamily(family) {",
          "54:   switch (family) {",
          "55:     case cares.AF_INET: return 4;",
          "56:     case cares.AF_INET6: return 6;",
          "57:     default: return undefined;",
          "58:   }",
          "59: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4afc46d7bcbb1caec986ddba642c943d79b83105",
      "candidate_info": {
        "commit_hash": "4afc46d7bcbb1caec986ddba642c943d79b83105",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/4afc46d7bcbb1caec986ddba642c943d79b83105",
        "files": [
          "deps/v8/src/arm/assembler-arm-inl.h",
          "deps/v8/src/arm/assembler-arm.h",
          "deps/v8/src/arm/code-stubs-arm.cc",
          "deps/v8/src/arm/deoptimizer-arm.cc",
          "deps/v8/src/arm/lithium-codegen-arm.cc",
          "deps/v8/src/arm/lithium-codegen-arm.h",
          "deps/v8/src/arm/lithium-gap-resolver-arm.cc",
          "deps/v8/src/deoptimizer.cc",
          "deps/v8/src/hydrogen-instructions.h",
          "deps/v8/src/ia32/code-stubs-ia32.cc",
          "deps/v8/src/ia32/deoptimizer-ia32.cc",
          "deps/v8/src/ia32/lithium-codegen-ia32.cc",
          "deps/v8/src/ia32/lithium-codegen-ia32.h",
          "deps/v8/src/ia32/lithium-ia32.h",
          "deps/v8/src/lithium.h",
          "deps/v8/src/mips/code-stubs-mips.cc",
          "deps/v8/src/objects.cc",
          "deps/v8/src/objects.h",
          "deps/v8/src/safepoint-table.cc",
          "deps/v8/src/safepoint-table.h",
          "deps/v8/src/version.cc",
          "deps/v8/src/x64/code-stubs-x64.cc",
          "deps/v8/src/x64/deoptimizer-x64.cc",
          "deps/v8/src/x64/lithium-codegen-x64.cc",
          "deps/v8/src/x64/lithium-codegen-x64.h",
          "deps/v8/test/mjsunit/compiler/regress-funcaller.js",
          "deps/v8/test/mjsunit/compiler/regress-lazy-deopt.js"
        ],
        "message": "Upgrade V8 to 3.6.6.19",
        "before_after_code_files": [
          "deps/v8/src/arm/assembler-arm-inl.h||deps/v8/src/arm/assembler-arm-inl.h",
          "deps/v8/src/arm/assembler-arm.h||deps/v8/src/arm/assembler-arm.h",
          "deps/v8/src/arm/code-stubs-arm.cc||deps/v8/src/arm/code-stubs-arm.cc",
          "deps/v8/src/arm/deoptimizer-arm.cc||deps/v8/src/arm/deoptimizer-arm.cc",
          "deps/v8/src/arm/lithium-codegen-arm.cc||deps/v8/src/arm/lithium-codegen-arm.cc",
          "deps/v8/src/arm/lithium-codegen-arm.h||deps/v8/src/arm/lithium-codegen-arm.h",
          "deps/v8/src/arm/lithium-gap-resolver-arm.cc||deps/v8/src/arm/lithium-gap-resolver-arm.cc",
          "deps/v8/src/deoptimizer.cc||deps/v8/src/deoptimizer.cc",
          "deps/v8/src/hydrogen-instructions.h||deps/v8/src/hydrogen-instructions.h",
          "deps/v8/src/ia32/code-stubs-ia32.cc||deps/v8/src/ia32/code-stubs-ia32.cc",
          "deps/v8/src/ia32/deoptimizer-ia32.cc||deps/v8/src/ia32/deoptimizer-ia32.cc",
          "deps/v8/src/ia32/lithium-codegen-ia32.cc||deps/v8/src/ia32/lithium-codegen-ia32.cc",
          "deps/v8/src/ia32/lithium-codegen-ia32.h||deps/v8/src/ia32/lithium-codegen-ia32.h",
          "deps/v8/src/ia32/lithium-ia32.h||deps/v8/src/ia32/lithium-ia32.h",
          "deps/v8/src/lithium.h||deps/v8/src/lithium.h",
          "deps/v8/src/mips/code-stubs-mips.cc||deps/v8/src/mips/code-stubs-mips.cc",
          "deps/v8/src/objects.cc||deps/v8/src/objects.cc",
          "deps/v8/src/objects.h||deps/v8/src/objects.h",
          "deps/v8/src/safepoint-table.cc||deps/v8/src/safepoint-table.cc",
          "deps/v8/src/safepoint-table.h||deps/v8/src/safepoint-table.h",
          "deps/v8/src/version.cc||deps/v8/src/version.cc",
          "deps/v8/src/x64/code-stubs-x64.cc||deps/v8/src/x64/code-stubs-x64.cc",
          "deps/v8/src/x64/deoptimizer-x64.cc||deps/v8/src/x64/deoptimizer-x64.cc",
          "deps/v8/src/x64/lithium-codegen-x64.cc||deps/v8/src/x64/lithium-codegen-x64.cc",
          "deps/v8/src/x64/lithium-codegen-x64.h||deps/v8/src/x64/lithium-codegen-x64.h",
          "deps/v8/test/mjsunit/compiler/regress-funcaller.js||deps/v8/test/mjsunit/compiler/regress-funcaller.js",
          "deps/v8/test/mjsunit/compiler/regress-lazy-deopt.js||deps/v8/test/mjsunit/compiler/regress-lazy-deopt.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/v8/src/arm/assembler-arm-inl.h||deps/v8/src/arm/assembler-arm-inl.h": [
          "File: deps/v8/src/arm/assembler-arm-inl.h -> deps/v8/src/arm/assembler-arm-inl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: namespace internal {",
          "49: void RelocInfo::apply(intptr_t delta) {",
          "50:   if (RelocInfo::IsInternalReference(rmode_)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: int DwVfpRegister::ToAllocationIndex(DwVfpRegister reg) {",
          "50:   ASSERT(!reg.is(kDoubleRegZero));",
          "51:   ASSERT(!reg.is(kScratchDoubleReg));",
          "52:   return reg.code();",
          "53: }",
          "",
          "---------------"
        ],
        "deps/v8/src/arm/assembler-arm.h||deps/v8/src/arm/assembler-arm.h": [
          "File: deps/v8/src/arm/assembler-arm.h -> deps/v8/src/arm/assembler-arm.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:   static const int kNumAllocatableRegisters = kNumRegisters -",
          "177:       kNumReservedRegisters;",
          "184:   static DwVfpRegister FromAllocationIndex(int index) {",
          "185:     ASSERT(index >= 0 && index < kNumAllocatableRegisters);",
          "187:   }",
          "189:   static const char* AllocationIndexToString(int index) {",
          "",
          "[Removed Lines]",
          "179:   static int ToAllocationIndex(DwVfpRegister reg) {",
          "180:     ASSERT(reg.code() != 0);",
          "181:     return reg.code() - 1;",
          "182:   }",
          "186:     return from_code(index + 1);",
          "",
          "[Added Lines]",
          "179:   inline static int ToAllocationIndex(DwVfpRegister reg);",
          "183:     return from_code(index);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "307: const DwVfpRegister kFirstCalleeSavedDoubleReg = d8;",
          "308: const DwVfpRegister kLastCalleeSavedDoubleReg = d15;",
          "309: const DwVfpRegister kDoubleRegZero = d14;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "307: const DwVfpRegister kScratchDoubleReg = d15;",
          "",
          "---------------"
        ],
        "deps/v8/src/arm/code-stubs-arm.cc||deps/v8/src/arm/code-stubs-arm.cc": [
          "File: deps/v8/src/arm/code-stubs-arm.cc -> deps/v8/src/arm/code-stubs-arm.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "5393:   __ eor(hash, hash, Operand(hash, LSR, 11));",
          "5402: }",
          "",
          "[Removed Lines]",
          "5395:   __ add(hash, hash, Operand(hash, LSL, 15), SetCC);",
          "5397:   uint32_t kHashShiftCutOffMask = (1 << (32 - String::kHashShift)) - 1;",
          "5398:   __ and_(hash, hash, Operand(kHashShiftCutOffMask));",
          "5401:   __ mov(hash, Operand(27), LeaveCC, eq);",
          "",
          "[Added Lines]",
          "5395:   __ add(hash, hash, Operand(hash, LSL, 15));",
          "5397:   __ and_(hash, hash, Operand(String::kHashBitMask), SetCC);",
          "5400:   __ mov(hash, Operand(StringHasher::kZeroHash), LeaveCC, eq);",
          "",
          "---------------"
        ],
        "deps/v8/src/arm/deoptimizer-arm.cc||deps/v8/src/arm/deoptimizer-arm.cc": [
          "File: deps/v8/src/arm/deoptimizer-arm.cc -> deps/v8/src/arm/deoptimizer-arm.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: }",
          "53: void Deoptimizer::DeoptimizeFunction(JSFunction* function) {",
          "54:   HandleScope scope;",
          "55:   AssertNoAllocation no_allocation;",
          "",
          "[Removed Lines]",
          "47: void Deoptimizer::EnsureRelocSpaceForLazyDeoptimization(Handle<Code> code) {",
          "50: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:   Code* code = function->code();",
          "64:   code->InvalidateRelocation();",
          "77: #ifdef DEBUG",
          "85: #endif",
          "104: #ifdef DEBUG",
          "113: #endif",
          "116:   DeoptimizingCodeListNode* node = new DeoptimizingCodeListNode(code);",
          "",
          "[Removed Lines]",
          "68:   unsigned last_pc_offset = 0;",
          "69:   SafepointTable table(function->code());",
          "70:   for (unsigned i = 0; i < table.length(); i++) {",
          "71:     unsigned pc_offset = table.GetPcOffset(i);",
          "72:     SafepointEntry safepoint_entry = table.GetEntry(i);",
          "73:     int deoptimization_index = safepoint_entry.deoptimization_index();",
          "74:     int gap_code_size = safepoint_entry.gap_code_size();",
          "76:     CHECK(pc_offset >= last_pc_offset);",
          "79:     int instructions = (pc_offset - last_pc_offset) / Assembler::kInstrSize;",
          "80:     CodePatcher destroyer(code->instruction_start() + last_pc_offset,",
          "81:                           instructions);",
          "82:     for (int x = 0; x < instructions; x++) {",
          "83:       destroyer.masm()->bkpt(0);",
          "84:     }",
          "86:     last_pc_offset = pc_offset;",
          "87:     if (deoptimization_index != Safepoint::kNoDeoptimizationIndex) {",
          "88:       Address deoptimization_entry = Deoptimizer::GetDeoptimizationEntry(",
          "89:           deoptimization_index, Deoptimizer::LAZY);",
          "90:       last_pc_offset += gap_code_size;",
          "91:       int call_size_in_bytes = MacroAssembler::CallSize(deoptimization_entry,",
          "92:                                                         RelocInfo::NONE);",
          "93:       int call_size_in_words = call_size_in_bytes / Assembler::kInstrSize;",
          "94:       ASSERT(call_size_in_bytes % Assembler::kInstrSize == 0);",
          "95:       ASSERT(call_size_in_bytes <= patch_size());",
          "96:       CodePatcher patcher(code->instruction_start() + last_pc_offset,",
          "97:                           call_size_in_words);",
          "98:       patcher.masm()->Call(deoptimization_entry, RelocInfo::NONE);",
          "99:       last_pc_offset += call_size_in_bytes;",
          "100:     }",
          "101:   }",
          "106:   int instructions =",
          "107:       (code->safepoint_table_offset() - last_pc_offset) / Assembler::kInstrSize;",
          "108:   CodePatcher destroyer(code->instruction_start() + last_pc_offset,",
          "109:                         instructions);",
          "110:   for (int x = 0; x < instructions; x++) {",
          "111:     destroyer.masm()->bkpt(0);",
          "112:   }",
          "",
          "[Added Lines]",
          "55:   Address code_start_address = code->instruction_start();",
          "63:   DeoptimizationInputData* deopt_data =",
          "64:       DeoptimizationInputData::cast(code->deoptimization_data());",
          "66:   Address prev_call_address = NULL;",
          "68:   for (int i = 0; i < deopt_data->DeoptCount(); i++) {",
          "69:     if (deopt_data->Pc(i)->value() == -1) continue;",
          "70:     Address call_address = code_start_address + deopt_data->Pc(i)->value();",
          "71:     Address deopt_entry = GetDeoptimizationEntry(i, LAZY);",
          "72:     int call_size_in_bytes = MacroAssembler::CallSize(deopt_entry,",
          "73:                                                       RelocInfo::NONE);",
          "74:     int call_size_in_words = call_size_in_bytes / Assembler::kInstrSize;",
          "75:     ASSERT(call_size_in_bytes % Assembler::kInstrSize == 0);",
          "76:     ASSERT(call_size_in_bytes <= patch_size());",
          "77:     CodePatcher patcher(call_address, call_size_in_words);",
          "78:     patcher.masm()->Call(deopt_entry, RelocInfo::NONE);",
          "79:     ASSERT(prev_call_address == NULL ||",
          "80:            call_address >= prev_call_address + patch_size());",
          "81:     ASSERT(call_address + patch_size() <= code->instruction_end());",
          "84:     prev_call_address = call_address;",
          "86:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "125:     PrintF(\"[forced deoptimization: \");",
          "126:     function->PrintName();",
          "127:     PrintF(\" / %x]\\n\", reinterpret_cast<uint32_t>(function));",
          "133:   }",
          "134: }",
          "",
          "[Removed Lines]",
          "128: #ifdef DEBUG",
          "129:     if (FLAG_print_code) {",
          "130:       code->PrintLn();",
          "131:     }",
          "132: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/v8/src/arm/lithium-codegen-arm.cc||deps/v8/src/arm/lithium-codegen-arm.cc": [
          "File: deps/v8/src/arm/lithium-codegen-arm.cc -> deps/v8/src/arm/lithium-codegen-arm.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:  public:",
          "41:   SafepointGenerator(LCodeGen* codegen,",
          "42:                      LPointerMap* pointers,",
          "44:       : codegen_(codegen),",
          "45:         pointers_(pointers),",
          "47:   virtual ~SafepointGenerator() { }",
          "66:   virtual void AfterCall() const {",
          "68:   }",
          "70:  private:",
          "71:   LCodeGen* codegen_;",
          "72:   LPointerMap* pointers_;",
          "74: };",
          "",
          "[Removed Lines]",
          "43:                      int deoptimization_index)",
          "46:         deoptimization_index_(deoptimization_index) { }",
          "49:   virtual void BeforeCall(int call_size) const {",
          "50:     ASSERT(call_size >= 0);",
          "53:     int call_end = codegen_->masm()->pc_offset() + call_size;",
          "54:     int prev_jump_end =",
          "55:         codegen_->LastSafepointEnd() + Deoptimizer::patch_size();",
          "56:     if (call_end < prev_jump_end) {",
          "57:       int padding_size = prev_jump_end - call_end;",
          "58:       ASSERT_EQ(0, padding_size % Assembler::kInstrSize);",
          "59:       while (padding_size > 0) {",
          "60:         codegen_->masm()->nop();",
          "61:         padding_size -= Assembler::kInstrSize;",
          "62:       }",
          "63:     }",
          "64:   }",
          "67:     codegen_->RecordSafepoint(pointers_, deoptimization_index_);",
          "73:   int deoptimization_index_;",
          "",
          "[Added Lines]",
          "43:                      Safepoint::DeoptMode mode)",
          "46:         deopt_mode_(mode) { }",
          "49:   virtual void BeforeCall(int call_size) const { }",
          "52:     codegen_->RecordSafepoint(pointers_, deopt_mode_);",
          "58:   Safepoint::DeoptMode deopt_mode_;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:   code->set_stack_slots(GetStackSlotCount());",
          "96:   code->set_safepoint_table_offset(safepoints_.GetCodeOffset());",
          "97:   PopulateDeoptimizationData(code);",
          "99: }",
          "",
          "[Removed Lines]",
          "98:   Deoptimizer::EnsureRelocSpaceForLazyDeoptimization(code);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "192:     } else {",
          "193:       __ CallRuntime(Runtime::kNewFunctionContext, 1);",
          "194:     }",
          "198:     __ str(cp, MemOperand(fp, StandardFrameConstants::kContextOffset));",
          "",
          "[Removed Lines]",
          "195:     RecordSafepoint(Safepoint::kNoDeoptimizationIndex);",
          "",
          "[Added Lines]",
          "179:     RecordSafepoint(Safepoint::kNoLazyDeopt);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "243:       instr->CompileToNative(this);",
          "244:     }",
          "245:   }",
          "246:   return !is_aborted();",
          "247: }",
          "259: bool LCodeGen::GenerateDeferredCode() {",
          "260:   ASSERT(is_generating());",
          "261:   if (deferred_.length() > 0) {",
          "",
          "[Removed Lines]",
          "250: LInstruction* LCodeGen::GetNextInstruction() {",
          "251:   if (current_instruction_ < instructions_->length() - 1) {",
          "252:     return instructions_->at(current_instruction_ + 1);",
          "253:   } else {",
          "254:     return NULL;",
          "255:   }",
          "256: }",
          "",
          "[Added Lines]",
          "230:   EnsureSpaceForLazyDeopt();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "265:       code->Generate();",
          "266:       __ jmp(code->exit());",
          "267:     }",
          "275:   }",
          "",
          "[Removed Lines]",
          "271:     while ((masm()->pc_offset() - LastSafepointEnd())",
          "272:            < Deoptimizer::patch_size()) {",
          "273:       __ nop();",
          "274:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "551:   LPointerMap* pointers = instr->pointer_map();",
          "552:   RecordPosition(pointers->position());",
          "553:   __ Call(code, mode);",
          "",
          "[Removed Lines]",
          "554:   RegisterLazyDeoptimization(instr, safepoint_mode);",
          "",
          "[Added Lines]",
          "523:   RecordSafepointWithLazyDeopt(instr, safepoint_mode);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "571:   RecordPosition(pointers->position());",
          "573:   __ CallRuntime(function, num_arguments);",
          "575: }",
          "",
          "[Removed Lines]",
          "574:   RegisterLazyDeoptimization(instr, RECORD_SIMPLE_SAFEPOINT);",
          "",
          "[Added Lines]",
          "543:   RecordSafepointWithLazyDeopt(instr, RECORD_SIMPLE_SAFEPOINT);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "580:                                        LInstruction* instr) {",
          "581:   __ CallRuntimeSaveDoubles(id);",
          "582:   RecordSafepointWithRegisters(",
          "584: }",
          "614:   if (!environment->HasBeenRegistered()) {",
          "",
          "[Removed Lines]",
          "583:       instr->pointer_map(), argc, Safepoint::kNoDeoptimizationIndex);",
          "587: void LCodeGen::RegisterLazyDeoptimization(LInstruction* instr,",
          "588:                                           SafepointMode safepoint_mode) {",
          "592:   LEnvironment* deoptimization_environment;",
          "593:   if (instr->HasDeoptimizationEnvironment()) {",
          "594:     deoptimization_environment = instr->deoptimization_environment();",
          "595:   } else {",
          "596:     deoptimization_environment = instr->environment();",
          "597:   }",
          "599:   RegisterEnvironmentForDeoptimization(deoptimization_environment);",
          "600:   if (safepoint_mode == RECORD_SIMPLE_SAFEPOINT) {",
          "601:     RecordSafepoint(instr->pointer_map(),",
          "602:                     deoptimization_environment->deoptimization_index());",
          "603:   } else {",
          "604:     ASSERT(safepoint_mode == RECORD_SAFEPOINT_WITH_REGISTERS_AND_NO_ARGUMENTS);",
          "605:     RecordSafepointWithRegisters(",
          "606:         instr->pointer_map(),",
          "607:         0,",
          "608:         deoptimization_environment->deoptimization_index());",
          "609:   }",
          "610: }",
          "613: void LCodeGen::RegisterEnvironmentForDeoptimization(LEnvironment* environment) {",
          "",
          "[Added Lines]",
          "552:       instr->pointer_map(), argc, Safepoint::kNoLazyDeopt);",
          "556: void LCodeGen::RegisterEnvironmentForDeoptimization(LEnvironment* environment,",
          "557:                                                     Safepoint::DeoptMode mode) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "632:     Translation translation(&translations_, frame_count);",
          "633:     WriteTranslation(environment, &translation);",
          "634:     int deoptimization_index = deoptimizations_.length();",
          "636:     deoptimizations_.Add(environment);",
          "637:   }",
          "638: }",
          "641: void LCodeGen::DeoptimizeIf(Condition cc, LEnvironment* environment) {",
          "643:   ASSERT(environment->HasBeenRegistered());",
          "644:   int id = environment->deoptimization_index();",
          "645:   Address entry = Deoptimizer::GetDeoptimizationEntry(id, Deoptimizer::EAGER);",
          "",
          "[Removed Lines]",
          "635:     environment->Register(deoptimization_index, translation.index());",
          "642:   RegisterEnvironmentForDeoptimization(environment);",
          "",
          "[Added Lines]",
          "579:     int pc_offset = masm()->pc_offset();",
          "580:     environment->Register(deoptimization_index,",
          "581:                           translation.index(),",
          "582:                           (mode == Safepoint::kLazyDeopt) ? pc_offset : -1);",
          "589:   RegisterEnvironmentForDeoptimization(environment, Safepoint::kNoLazyDeopt);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "701:     data->SetTranslationIndex(i, Smi::FromInt(env->translation_index()));",
          "702:     data->SetArgumentsStackHeight(i,",
          "703:                                   Smi::FromInt(env->arguments_stack_height()));",
          "704:   }",
          "705:   code->set_deoptimization_data(*data);",
          "706: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "651:     data->SetPc(i, Smi::FromInt(env->pc_offset()));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "732: }",
          "735: void LCodeGen::RecordSafepoint(",
          "736:     LPointerMap* pointers,",
          "737:     Safepoint::Kind kind,",
          "738:     int arguments,",
          "740:   ASSERT(expected_safepoint_kind_ == kind);",
          "742:   const ZoneList<LOperand*>* operands = pointers->operands();",
          "743:   Safepoint safepoint = safepoints_.DefineSafepoint(masm(),",
          "745:   for (int i = 0; i < operands->length(); i++) {",
          "746:     LOperand* pointer = operands->at(i);",
          "747:     if (pointer->IsStackSlot()) {",
          "",
          "[Removed Lines]",
          "739:     int deoptimization_index) {",
          "744:       kind, arguments, deoptimization_index);",
          "",
          "[Added Lines]",
          "683: void LCodeGen::RecordSafepointWithLazyDeopt(",
          "684:     LInstruction* instr, SafepointMode safepoint_mode) {",
          "685:   if (safepoint_mode == RECORD_SIMPLE_SAFEPOINT) {",
          "686:     RecordSafepoint(instr->pointer_map(), Safepoint::kLazyDeopt);",
          "687:   } else {",
          "688:     ASSERT(safepoint_mode == RECORD_SAFEPOINT_WITH_REGISTERS_AND_NO_ARGUMENTS);",
          "689:     RecordSafepointWithRegisters(",
          "690:         instr->pointer_map(), 0, Safepoint::kLazyDeopt);",
          "691:   }",
          "692: }",
          "699:     Safepoint::DeoptMode deopt_mode) {",
          "704:       kind, arguments, deopt_mode);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "760: void LCodeGen::RecordSafepoint(LPointerMap* pointers,",
          "763: }",
          "767:   LPointerMap empty_pointers(RelocInfo::kNoPosition);",
          "769: }",
          "772: void LCodeGen::RecordSafepointWithRegisters(LPointerMap* pointers,",
          "773:                                             int arguments,",
          "777: }",
          "780: void LCodeGen::RecordSafepointWithRegistersAndDoubles(",
          "781:     LPointerMap* pointers,",
          "782:     int arguments,",
          "786: }",
          "",
          "[Removed Lines]",
          "761:                                int deoptimization_index) {",
          "762:   RecordSafepoint(pointers, Safepoint::kSimple, 0, deoptimization_index);",
          "766: void LCodeGen::RecordSafepoint(int deoptimization_index) {",
          "768:   RecordSafepoint(&empty_pointers, deoptimization_index);",
          "774:                                             int deoptimization_index) {",
          "775:   RecordSafepoint(pointers, Safepoint::kWithRegisters, arguments,",
          "776:       deoptimization_index);",
          "783:     int deoptimization_index) {",
          "784:   RecordSafepoint(pointers, Safepoint::kWithRegistersAndDoubles, arguments,",
          "785:       deoptimization_index);",
          "",
          "[Added Lines]",
          "721:                                Safepoint::DeoptMode deopt_mode) {",
          "722:   RecordSafepoint(pointers, Safepoint::kSimple, 0, deopt_mode);",
          "726: void LCodeGen::RecordSafepoint(Safepoint::DeoptMode deopt_mode) {",
          "728:   RecordSafepoint(&empty_pointers, deopt_mode);",
          "734:                                             Safepoint::DeoptMode deopt_mode) {",
          "735:   RecordSafepoint(",
          "736:       pointers, Safepoint::kWithRegisters, arguments, deopt_mode);",
          "743:     Safepoint::DeoptMode deopt_mode) {",
          "744:   RecordSafepoint(",
          "745:       pointers, Safepoint::kWithRegistersAndDoubles, arguments, deopt_mode);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "817:     LParallelMove* move = gap->GetParallelMove(inner_pos);",
          "818:     if (move != NULL) DoParallelMove(move);",
          "819:   }",
          "826: }",
          "",
          "[Removed Lines]",
          "821:   LInstruction* next = GetNextInstruction();",
          "822:   if (next != NULL && next->IsLazyBailout()) {",
          "823:     int pc = masm()->pc_offset();",
          "824:     safepoints_.SetPcAfterGap(pc);",
          "825:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1129:   __ CallStub(&stub);",
          "1130:   RecordSafepointWithRegistersAndDoubles(instr->pointer_map(),",
          "1131:                                          0,",
          "1134:   __ StoreToSafepointRegistersAndDoublesSlot(r0, r0);",
          "1135: }",
          "",
          "[Removed Lines]",
          "1132:                                          Safepoint::kNoDeoptimizationIndex);",
          "",
          "[Added Lines]",
          "1086:                                          Safepoint::kNoLazyDeopt);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2014:                                   LInstanceOfKnownGlobal* instr)",
          "2015:         : LDeferredCode(codegen), instr_(instr) { }",
          "2016:     virtual void Generate() {",
          "2018:     }",
          "2020:     Label* map_check() { return &map_check_; }",
          "",
          "[Removed Lines]",
          "2017:       codegen()->DoDeferredLInstanceOfKnownGlobal(instr_, &map_check_);",
          "",
          "[Added Lines]",
          "1971:       codegen()->DoDeferredInstanceOfKnownGlobal(instr_, &map_check_);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2082: }",
          "2087:   Register result = ToRegister(instr->result());",
          "2088:   ASSERT(result.is(r0));",
          "",
          "[Removed Lines]",
          "2085: void LCodeGen::DoDeferredLInstanceOfKnownGlobal(LInstanceOfKnownGlobal* instr,",
          "2086:                                                 Label* map_check) {",
          "",
          "[Added Lines]",
          "2039: void LCodeGen::DoDeferredInstanceOfKnownGlobal(LInstanceOfKnownGlobal* instr,",
          "2040:                                                Label* map_check) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2115:                   RelocInfo::CODE_TARGET,",
          "2116:                   instr,",
          "2117:                   RECORD_SAFEPOINT_WITH_REGISTERS_AND_NO_ARGUMENTS);",
          "2120:   __ StoreToSafepointRegisterSlot(result, result);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2072:   ASSERT(instr->HasDeoptimizationEnvironment());",
          "2073:   LEnvironment* env = instr->deoptimization_environment();",
          "2074:   safepoints_.RecordLazyDeoptimizationIndex(env->deoptimization_index());",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2712:   __ bind(&invoke);",
          "2713:   ASSERT(instr->HasPointerMap() && instr->HasDeoptimizationEnvironment());",
          "2714:   LPointerMap* pointers = instr->pointer_map();",
          "2716:   RecordPosition(pointers->position());",
          "2723:   v8::internal::ParameterCount actual(receiver);",
          "",
          "[Removed Lines]",
          "2715:   LEnvironment* env = instr->deoptimization_environment();",
          "2717:   RegisterEnvironmentForDeoptimization(env);",
          "2718:   SafepointGenerator safepoint_generator(this,",
          "2719:                                          pointers,",
          "2720:                                          env->deoptimization_index());",
          "",
          "[Added Lines]",
          "2673:   SafepointGenerator safepoint_generator(",
          "2674:       this, pointers, Safepoint::kLazyDeopt);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2799:   __ Call(ip);",
          "2805:   __ ldr(cp, MemOperand(fp, StandardFrameConstants::kContextOffset));",
          "",
          "[Removed Lines]",
          "2802:   RegisterLazyDeoptimization(instr, RECORD_SIMPLE_SAFEPOINT);",
          "",
          "[Added Lines]",
          "2756:   RecordSafepointWithLazyDeopt(instr, RECORD_SIMPLE_SAFEPOINT);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "3163:   ASSERT(instr->HasPointerMap());",
          "3164:   ASSERT(instr->HasDeoptimizationEnvironment());",
          "3165:   LPointerMap* pointers = instr->pointer_map();",
          "3167:   RecordPosition(pointers->position());",
          "3170:   ParameterCount count(instr->arity());",
          "3171:   __ InvokeFunction(r1, count, CALL_FUNCTION, generator, CALL_AS_METHOD);",
          "3172:   __ ldr(cp, MemOperand(fp, StandardFrameConstants::kContextOffset));",
          "",
          "[Removed Lines]",
          "3166:   LEnvironment* env = instr->deoptimization_environment();",
          "3168:   RegisterEnvironmentForDeoptimization(env);",
          "3169:   SafepointGenerator generator(this, pointers, env->deoptimization_index());",
          "",
          "[Added Lines]",
          "3121:   SafepointGenerator generator(this, pointers, Safepoint::kLazyDeopt);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "4403: }",
          "4406: void LCodeGen::DoLazyBailout(LLazyBailout* instr) {",
          "4409: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4358: void LCodeGen::EnsureSpaceForLazyDeopt() {",
          "4361:   int current_pc = masm()->pc_offset();",
          "4362:   int patch_size = Deoptimizer::patch_size();",
          "4363:   if (current_pc < last_lazy_deopt_pc_ + patch_size) {",
          "4364:     int padding_size = last_lazy_deopt_pc_ + patch_size - current_pc;",
          "4365:     ASSERT_EQ(0, padding_size % Assembler::kInstrSize);",
          "4366:     while (padding_size > 0) {",
          "4367:       __ nop();",
          "4368:       padding_size -= Assembler::kInstrSize;",
          "4369:     }",
          "4370:   }",
          "4371:   last_lazy_deopt_pc_ = masm()->pc_offset();",
          "4372: }",
          "4376:   EnsureSpaceForLazyDeopt();",
          "4377:   ASSERT(instr->HasEnvironment());",
          "4378:   LEnvironment* env = instr->environment();",
          "4379:   RegisterEnvironmentForDeoptimization(env, Safepoint::kLazyDeopt);",
          "4380:   safepoints_.RecordLazyDeoptimizationIndex(env->deoptimization_index());",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "4422:   __ Push(object, key, strict);",
          "4423:   ASSERT(instr->HasPointerMap() && instr->HasDeoptimizationEnvironment());",
          "4424:   LPointerMap* pointers = instr->pointer_map();",
          "4426:   RecordPosition(pointers->position());",
          "4431:   __ InvokeBuiltin(Builtins::DELETE, CALL_FUNCTION, safepoint_generator);",
          "4432: }",
          "",
          "[Removed Lines]",
          "4425:   LEnvironment* env = instr->deoptimization_environment();",
          "4427:   RegisterEnvironmentForDeoptimization(env);",
          "4428:   SafepointGenerator safepoint_generator(this,",
          "4429:                                          pointers,",
          "4430:                                          env->deoptimization_index());",
          "",
          "[Added Lines]",
          "4398:   SafepointGenerator safepoint_generator(",
          "4399:       this, pointers, Safepoint::kLazyDeopt);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "4438:   __ Push(key, obj);",
          "4439:   ASSERT(instr->HasPointerMap() && instr->HasDeoptimizationEnvironment());",
          "4440:   LPointerMap* pointers = instr->pointer_map();",
          "4442:   RecordPosition(pointers->position());",
          "4447:   __ InvokeBuiltin(Builtins::IN, CALL_FUNCTION, safepoint_generator);",
          "4448: }",
          "4451: void LCodeGen::DoDeferredStackCheck(LStackCheck* instr) {",
          "4462: }",
          "",
          "[Removed Lines]",
          "4441:   LEnvironment* env = instr->deoptimization_environment();",
          "4443:   RegisterEnvironmentForDeoptimization(env);",
          "4444:   SafepointGenerator safepoint_generator(this,",
          "4445:                                          pointers,",
          "4446:                                          env->deoptimization_index());",
          "4452:   {",
          "4453:     PushSafepointRegistersScope scope(this, Safepoint::kWithRegisters);",
          "4454:     __ CallRuntimeSaveDoubles(Runtime::kStackGuard);",
          "4455:     RegisterLazyDeoptimization(",
          "4456:         instr, RECORD_SAFEPOINT_WITH_REGISTERS_AND_NO_ARGUMENTS);",
          "4457:   }",
          "4460:   int pc = masm()->pc_offset();",
          "4461:   safepoints_.SetPcAfterGap(pc);",
          "",
          "[Added Lines]",
          "4411:   SafepointGenerator safepoint_generator(this, pointers, Safepoint::kLazyDeopt);",
          "4417:   PushSafepointRegistersScope scope(this, Safepoint::kWithRegisters);",
          "4418:   __ CallRuntimeSaveDoubles(Runtime::kStackGuard);",
          "4419:   RecordSafepointWithLazyDeopt(",
          "4420:       instr, RECORD_SAFEPOINT_WITH_REGISTERS_AND_NO_ARGUMENTS);",
          "4421:   ASSERT(instr->HasEnvironment());",
          "4422:   LEnvironment* env = instr->environment();",
          "4423:   safepoints_.RecordLazyDeoptimizationIndex(env->deoptimization_index());",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "4472:     LStackCheck* instr_;",
          "4473:   };",
          "4475:   if (instr->hydrogen()->is_function_entry()) {",
          "4477:     Label done;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4437:   ASSERT(instr->HasEnvironment());",
          "4438:   LEnvironment* env = instr->environment();",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "4480:     __ b(hs, &done);",
          "4481:     StackCheckStub stub;",
          "4482:     CallCode(stub.GetCode(), RelocInfo::CODE_TARGET, instr);",
          "4483:     __ bind(&done);",
          "4484:   } else {",
          "4485:     ASSERT(instr->hydrogen()->is_backwards_branch());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4449:     EnsureSpaceForLazyDeopt();",
          "4451:     RegisterEnvironmentForDeoptimization(env, Safepoint::kLazyDeopt);",
          "4452:     safepoints_.RecordLazyDeoptimizationIndex(env->deoptimization_index());",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "4489:     __ LoadRoot(ip, Heap::kStackLimitRootIndex);",
          "4490:     __ cmp(sp, Operand(ip));",
          "4491:     __ b(lo, deferred_stack_check->entry());",
          "4492:     __ bind(instr->done_label());",
          "4493:     deferred_stack_check->SetExit(instr->done_label());",
          "4494:   }",
          "4495: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4461:     EnsureSpaceForLazyDeopt();",
          "4464:     RegisterEnvironmentForDeoptimization(env, Safepoint::kLazyDeopt);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "4508:   ASSERT(!environment->HasBeenRegistered());",
          "4510:   ASSERT(osr_pc_offset_ == -1);",
          "4511:   osr_pc_offset_ = masm()->pc_offset();",
          "4512: }",
          "",
          "[Removed Lines]",
          "4509:   RegisterEnvironmentForDeoptimization(environment);",
          "",
          "[Added Lines]",
          "4483:   RegisterEnvironmentForDeoptimization(environment, Safepoint::kNoLazyDeopt);",
          "",
          "---------------"
        ],
        "deps/v8/src/arm/lithium-codegen-arm.h||deps/v8/src/arm/lithium-codegen-arm.h": [
          "File: deps/v8/src/arm/lithium-codegen-arm.h -> deps/v8/src/arm/lithium-codegen-arm.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:         status_(UNUSED),",
          "59:         deferred_(8),",
          "60:         osr_pc_offset_(-1),",
          "61:         resolver_(this),",
          "62:         expected_safepoint_kind_(Safepoint::kSimple) {",
          "63:     PopulateDeoptimizationLiteralsWithInlinedFunctions();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:         last_lazy_deopt_pc_(0),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:   void DoDeferredStackCheck(LStackCheck* instr);",
          "112:   void DoDeferredStringCharCodeAt(LStringCharCodeAt* instr);",
          "113:   void DoDeferredStringCharFromCode(LStringCharFromCode* instr);",
          "118:   void DoParallelMove(LParallelMove* move);",
          "",
          "[Removed Lines]",
          "114:   void DoDeferredLInstanceOfKnownGlobal(LInstanceOfKnownGlobal* instr,",
          "115:                                         Label* map_check);",
          "",
          "[Added Lines]",
          "115:   void DoDeferredInstanceOfKnownGlobal(LInstanceOfKnownGlobal* instr,",
          "116:                                        Label* map_check);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "148:   HGraph* graph() const { return chunk_->graph(); }",
          "150:   Register scratch0() { return r9; }",
          "153:   int GetNextEmittedBlock(int block);",
          "154:   LInstruction* GetNextInstruction();",
          "",
          "[Removed Lines]",
          "151:   DwVfpRegister double_scratch0() { return d15; }",
          "",
          "[Added Lines]",
          "152:   DwVfpRegister double_scratch0() { return kScratchDoubleReg; }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "215:   void LoadHeapObject(Register result, Handle<HeapObject> object);",
          "221:   void DeoptimizeIf(Condition cc, LEnvironment* environment);",
          "223:   void AddToTranslation(Translation* translation,",
          "",
          "[Removed Lines]",
          "217:   void RegisterLazyDeoptimization(LInstruction* instr,",
          "218:                                   SafepointMode safepoint_mode);",
          "220:   void RegisterEnvironmentForDeoptimization(LEnvironment* environment);",
          "",
          "[Added Lines]",
          "218:   void RecordSafepointWithLazyDeopt(LInstruction* instr,",
          "219:                                     SafepointMode safepoint_mode);",
          "221:   void RegisterEnvironmentForDeoptimization(LEnvironment* environment,",
          "222:                                             Safepoint::DeoptMode mode);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "246:   void RecordSafepoint(LPointerMap* pointers,",
          "247:                        Safepoint::Kind kind,",
          "248:                        int arguments,",
          "252:   void RecordSafepointWithRegisters(LPointerMap* pointers,",
          "253:                                     int arguments,",
          "255:   void RecordSafepointWithRegistersAndDoubles(LPointerMap* pointers,",
          "256:                                               int arguments,",
          "258:   void RecordPosition(int position);",
          "263:   static Condition TokenToCondition(Token::Value op, bool is_unsigned);",
          "264:   void EmitGoto(int block);",
          "",
          "[Removed Lines]",
          "249:                        int deoptimization_index);",
          "250:   void RecordSafepoint(LPointerMap* pointers, int deoptimization_index);",
          "251:   void RecordSafepoint(int deoptimization_index);",
          "254:                                     int deoptimization_index);",
          "257:                                               int deoptimization_index);",
          "259:   int LastSafepointEnd() {",
          "260:     return static_cast<int>(safepoints_.GetPcAfterGap());",
          "261:   }",
          "",
          "[Added Lines]",
          "251:                        Safepoint::DeoptMode mode);",
          "252:   void RecordSafepoint(LPointerMap* pointers, Safepoint::DeoptMode mode);",
          "253:   void RecordSafepoint(Safepoint::DeoptMode mode);",
          "256:                                     Safepoint::DeoptMode mode);",
          "259:                                               Safepoint::DeoptMode mode);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "300:     Address address;",
          "301:   };",
          "303:   LChunk* const chunk_;",
          "304:   MacroAssembler* const masm_;",
          "305:   CompilationInfo* const info_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "302:   void EnsureSpaceForLazyDeopt();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "316:   TranslationBuffer translations_;",
          "317:   ZoneList<LDeferredCode*> deferred_;",
          "318:   int osr_pc_offset_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "320:   int last_lazy_deopt_pc_;",
          "",
          "---------------"
        ],
        "deps/v8/src/arm/lithium-gap-resolver-arm.cc||deps/v8/src/arm/lithium-gap-resolver-arm.cc": [
          "File: deps/v8/src/arm/lithium-gap-resolver-arm.cc -> deps/v8/src/arm/lithium-gap-resolver-arm.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: namespace internal {",
          "36: static const Register kSavedValueRegister = { 9 };",
          "39: LGapResolver::LGapResolver(LCodeGen* owner)",
          "40:     : cgen_(owner), moves_(32), root_index_(0), in_cycle_(false),",
          "",
          "[Removed Lines]",
          "37: static const DoubleRegister kSavedDoubleValueRegister = { 0 };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "172:   } else if (source->IsStackSlot()) {",
          "173:     __ ldr(kSavedValueRegister, cgen_->ToMemOperand(source));",
          "174:   } else if (source->IsDoubleRegister()) {",
          "176:   } else if (source->IsDoubleStackSlot()) {",
          "178:   } else {",
          "179:     UNREACHABLE();",
          "180:   }",
          "",
          "[Removed Lines]",
          "175:     __ vmov(kSavedDoubleValueRegister, cgen_->ToDoubleRegister(source));",
          "177:     __ vldr(kSavedDoubleValueRegister, cgen_->ToMemOperand(source));",
          "",
          "[Added Lines]",
          "174:     __ vmov(kScratchDoubleReg, cgen_->ToDoubleRegister(source));",
          "176:     __ vldr(kScratchDoubleReg, cgen_->ToMemOperand(source));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "193:   } else if (saved_destination_->IsStackSlot()) {",
          "194:     __ str(kSavedValueRegister, cgen_->ToMemOperand(saved_destination_));",
          "195:   } else if (saved_destination_->IsDoubleRegister()) {",
          "198:   } else if (saved_destination_->IsDoubleStackSlot()) {",
          "201:   } else {",
          "202:     UNREACHABLE();",
          "203:   }",
          "",
          "[Removed Lines]",
          "196:     __ vmov(cgen_->ToDoubleRegister(saved_destination_),",
          "197:             kSavedDoubleValueRegister);",
          "199:     __ vstr(kSavedDoubleValueRegister,",
          "200:             cgen_->ToMemOperand(saved_destination_));",
          "",
          "[Added Lines]",
          "195:     __ vmov(cgen_->ToDoubleRegister(saved_destination_), kScratchDoubleReg);",
          "197:     __ vstr(kScratchDoubleReg, cgen_->ToMemOperand(saved_destination_));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "240:         } else {",
          "241:           __ ldr(ip, source_operand);",
          "242:           __ str(ip, destination_operand);",
          "",
          "[Removed Lines]",
          "238:           __ vldr(kSavedDoubleValueRegister.low(), source_operand);",
          "239:           __ vstr(kSavedDoubleValueRegister.low(), destination_operand);",
          "",
          "[Added Lines]",
          "235:           __ vldr(kScratchDoubleReg.low(), source_operand);",
          "236:           __ vstr(kScratchDoubleReg.low(), destination_operand);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "286:         __ ldr(kSavedValueRegister, source_high_operand);",
          "287:         __ str(kSavedValueRegister, destination_high_operand);",
          "288:       } else {",
          "291:       }",
          "292:     }",
          "293:   } else {",
          "",
          "[Removed Lines]",
          "289:         __ vldr(kSavedDoubleValueRegister, source_operand);",
          "290:         __ vstr(kSavedDoubleValueRegister, destination_operand);",
          "",
          "[Added Lines]",
          "286:         __ vldr(kScratchDoubleReg, source_operand);",
          "287:         __ vstr(kScratchDoubleReg, destination_operand);",
          "",
          "---------------"
        ],
        "deps/v8/src/deoptimizer.cc||deps/v8/src/deoptimizer.cc": [
          "File: deps/v8/src/deoptimizer.cc -> deps/v8/src/deoptimizer.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:   JSFunction* function = JSFunction::cast(frame->function());",
          "114:   Code* code = frame->LookupCode();",
          "134:   ASSERT(deoptimization_index != Safepoint::kNoDeoptimizationIndex);",
          "",
          "[Removed Lines]",
          "115:   Address code_start_address = code->instruction_start();",
          "119:   int deoptimization_index = Safepoint::kNoDeoptimizationIndex;",
          "121:   {",
          "122:     SafepointTable table(code);",
          "123:     for (unsigned i = 0; i < table.length(); ++i) {",
          "124:       Address address = code_start_address + table.GetPcOffset(i);",
          "125:       if (address == frame->pc()) {",
          "126:         SafepointEntry safepoint_entry = table.GetEntry(i);",
          "127:         ASSERT(safepoint_entry.deoptimization_index() !=",
          "128:                Safepoint::kNoDeoptimizationIndex);",
          "129:         deoptimization_index = safepoint_entry.deoptimization_index();",
          "130:         break;",
          "131:       }",
          "132:     }",
          "133:   }",
          "",
          "[Added Lines]",
          "118:   SafepointEntry safepoint_entry = code->GetSafepointEntry(frame->pc());",
          "119:   int deoptimization_index = safepoint_entry.deoptimization_index();",
          "",
          "---------------"
        ],
        "deps/v8/src/hydrogen-instructions.h||deps/v8/src/hydrogen-instructions.h": [
          "File: deps/v8/src/hydrogen-instructions.h -> deps/v8/src/hydrogen-instructions.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4058:         pattern_(pattern),",
          "4059:         flags_(flags) {",
          "4060:     SetOperandAt(0, context);",
          "4061:   }",
          "4063:   HValue* context() { return OperandAt(0); }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4061:     SetAllSideEffects();",
          "",
          "---------------"
        ],
        "deps/v8/src/ia32/code-stubs-ia32.cc||deps/v8/src/ia32/code-stubs-ia32.cc": [
          "File: deps/v8/src/ia32/code-stubs-ia32.cc -> deps/v8/src/ia32/code-stubs-ia32.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "5665:   __ shl(scratch, 15);",
          "5666:   __ add(hash, Operand(scratch));",
          "5672:   Label hash_not_zero;",
          "5674:   __ j(not_zero, &hash_not_zero, Label::kNear);",
          "5676:   __ bind(&hash_not_zero);",
          "5677: }",
          "",
          "[Removed Lines]",
          "5668:   uint32_t kHashShiftCutOffMask = (1 << (32 - String::kHashShift)) - 1;",
          "5669:   __ and_(hash, kHashShiftCutOffMask);",
          "5673:   __ test(hash, Operand(hash));",
          "5675:   __ mov(hash, Immediate(27));",
          "",
          "[Added Lines]",
          "5668:   __ and_(hash, String::kHashBitMask);",
          "5673:   __ mov(hash, Immediate(StringHasher::kZeroHash));",
          "",
          "---------------"
        ],
        "deps/v8/src/ia32/deoptimizer-ia32.cc||deps/v8/src/ia32/deoptimizer-ia32.cc": [
          "File: deps/v8/src/ia32/deoptimizer-ia32.cc -> deps/v8/src/ia32/deoptimizer-ia32.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: }",
          "58: void Deoptimizer::EnsureRelocSpaceForLazyDeoptimization(Handle<Code> code) {",
          "59:   Isolate* isolate = code->GetIsolate();",
          "60:   HandleScope scope(isolate);",
          "",
          "[Removed Lines]",
          "48: static void ZapCodeRange(Address start, Address end) {",
          "49: #ifdef DEBUG",
          "50:   ASSERT(start <= end);",
          "51:   int size = end - start;",
          "52:   CodePatcher destroyer(start, size);",
          "53:   while (size-- > 0) destroyer.masm()->int3();",
          "54: #endif",
          "55: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:   int min_reloc_size = 0;",
          "88:     }",
          "89:   }",
          "",
          "[Removed Lines]",
          "65:   Address prev_reloc_address = code->instruction_start();",
          "66:   Address code_start_address = code->instruction_start();",
          "67:   SafepointTable table(*code);",
          "68:   for (unsigned i = 0; i < table.length(); ++i) {",
          "69:     Address curr_reloc_address = code_start_address + table.GetPcOffset(i);",
          "70:     ASSERT_GE(curr_reloc_address, prev_reloc_address);",
          "71:     SafepointEntry safepoint_entry = table.GetEntry(i);",
          "72:     int deoptimization_index = safepoint_entry.deoptimization_index();",
          "73:     if (deoptimization_index != Safepoint::kNoDeoptimizationIndex) {",
          "77:       curr_reloc_address += safepoint_entry.gap_code_size() + 1;",
          "78:       int pc_delta = curr_reloc_address - prev_reloc_address;",
          "82:       if (pc_delta <= RelocInfo::kMaxSmallPCDelta) {",
          "83:         min_reloc_size += 2;",
          "84:       } else {",
          "85:         min_reloc_size += 6;",
          "86:       }",
          "87:       prev_reloc_address = curr_reloc_address;",
          "",
          "[Added Lines]",
          "55:   int prev_pc_offset = 0;",
          "56:   DeoptimizationInputData* deopt_data =",
          "57:       DeoptimizationInputData::cast(code->deoptimization_data());",
          "58:   for (int i = 0; i < deopt_data->DeoptCount(); i++) {",
          "59:     int pc_offset = deopt_data->Pc(i)->value();",
          "60:     if (pc_offset == -1) continue;",
          "61:     ASSERT_GE(pc_offset, prev_pc_offset);",
          "62:     int pc_delta = pc_offset - prev_pc_offset;",
          "66:     if (pc_delta <= RelocInfo::kMaxSmallPCDelta) {",
          "67:       min_reloc_size += 2;",
          "68:     } else {",
          "69:       min_reloc_size += 6;",
          "71:     prev_pc_offset = pc_offset;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "150:   Address reloc_end_address = reloc_info->address() + reloc_info->Size();",
          "151:   RelocInfoWriter reloc_info_writer(reloc_end_address, code_start_address);",
          "184:   }",
          "189:   int new_reloc_size = reloc_end_address - reloc_info_writer.pos();",
          "",
          "[Removed Lines]",
          "157:   SafepointTable table(code);",
          "158:   Address prev_address = code_start_address;",
          "159:   for (unsigned i = 0; i < table.length(); ++i) {",
          "160:     Address curr_address = code_start_address + table.GetPcOffset(i);",
          "161:     ASSERT_GE(curr_address, prev_address);",
          "162:     ZapCodeRange(prev_address, curr_address);",
          "164:     SafepointEntry safepoint_entry = table.GetEntry(i);",
          "165:     int deoptimization_index = safepoint_entry.deoptimization_index();",
          "166:     if (deoptimization_index != Safepoint::kNoDeoptimizationIndex) {",
          "168:       curr_address += safepoint_entry.gap_code_size();",
          "170:       CodePatcher patcher(curr_address, patch_size());",
          "171:       Address deopt_entry = GetDeoptimizationEntry(deoptimization_index, LAZY);",
          "172:       patcher.masm()->call(deopt_entry, RelocInfo::NONE);",
          "175:       RelocInfo rinfo(curr_address + 1,  // 1 after the call opcode.",
          "176:                       RelocInfo::RUNTIME_ENTRY,",
          "177:                       reinterpret_cast<intptr_t>(deopt_entry));",
          "178:       reloc_info_writer.Write(&rinfo);",
          "179:       ASSERT_GE(reloc_info_writer.pos(),",
          "180:                 reloc_info->address() + ByteArray::kHeaderSize);",
          "181:       curr_address += patch_size();",
          "182:     }",
          "183:     prev_address = curr_address;",
          "185:   ZapCodeRange(prev_address,",
          "186:                code_start_address + code->safepoint_table_offset());",
          "",
          "[Added Lines]",
          "144:   DeoptimizationInputData* deopt_data =",
          "145:       DeoptimizationInputData::cast(code->deoptimization_data());",
          "146: #ifdef DEBUG",
          "147:   Address prev_call_address = NULL;",
          "148: #endif",
          "149:   for (int i = 0; i < deopt_data->DeoptCount(); i++) {",
          "150:     if (deopt_data->Pc(i)->value() == -1) continue;",
          "152:     Address call_address = code_start_address + deopt_data->Pc(i)->value();",
          "153:     CodePatcher patcher(call_address, patch_size());",
          "154:     Address deopt_entry = GetDeoptimizationEntry(i, LAZY);",
          "155:     patcher.masm()->call(deopt_entry, RelocInfo::NONE);",
          "157:     RelocInfo rinfo(call_address + 1,  // 1 after the call opcode.",
          "158:                     RelocInfo::RUNTIME_ENTRY,",
          "159:                     reinterpret_cast<intptr_t>(deopt_entry));",
          "160:     reloc_info_writer.Write(&rinfo);",
          "161:     ASSERT_GE(reloc_info_writer.pos(),",
          "162:               reloc_info->address() + ByteArray::kHeaderSize);",
          "163:     ASSERT(prev_call_address == NULL ||",
          "164:            call_address >= prev_call_address + patch_size());",
          "165:     ASSERT(call_address + patch_size() <= code->instruction_end());",
          "166: #ifdef DEBUG",
          "167:     prev_call_address = call_address;",
          "168: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "212:     PrintF(\"[forced deoptimization: \");",
          "213:     function->PrintName();",
          "214:     PrintF(\" / %x]\\n\", reinterpret_cast<uint32_t>(function));",
          "220:   }",
          "221: }",
          "",
          "[Removed Lines]",
          "215: #ifdef DEBUG",
          "216:     if (FLAG_print_code) {",
          "217:       code->PrintLn();",
          "218:     }",
          "219: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/v8/src/ia32/lithium-codegen-ia32.cc||deps/v8/src/ia32/lithium-codegen-ia32.cc": [
          "File: deps/v8/src/ia32/lithium-codegen-ia32.cc -> deps/v8/src/ia32/lithium-codegen-ia32.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:  public:",
          "45:   SafepointGenerator(LCodeGen* codegen,",
          "46:                      LPointerMap* pointers,",
          "48:       : codegen_(codegen),",
          "49:         pointers_(pointers),",
          "51:   virtual ~SafepointGenerator() { }",
          "53:   virtual void BeforeCall(int call_size) const {}",
          "55:   virtual void AfterCall() const {",
          "57:   }",
          "59:  private:",
          "60:   LCodeGen* codegen_;",
          "61:   LPointerMap* pointers_;",
          "63: };",
          "",
          "[Removed Lines]",
          "47:                      int deoptimization_index)",
          "50:         deoptimization_index_(deoptimization_index) {}",
          "56:     codegen_->RecordSafepoint(pointers_, deoptimization_index_);",
          "62:   int deoptimization_index_;",
          "",
          "[Added Lines]",
          "47:                      Safepoint::DeoptMode mode)",
          "50:         deopt_mode_(mode) {}",
          "56:     codegen_->RecordSafepoint(pointers_, deopt_mode_);",
          "62:   Safepoint::DeoptMode deopt_mode_;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "187:     } else {",
          "188:       __ CallRuntime(Runtime::kNewFunctionContext, 1);",
          "189:     }",
          "193:     __ mov(Operand(ebp, StandardFrameConstants::kContextOffset), esi);",
          "",
          "[Removed Lines]",
          "190:     RecordSafepoint(Safepoint::kNoDeoptimizationIndex);",
          "",
          "[Added Lines]",
          "190:     RecordSafepoint(Safepoint::kNoLazyDeopt);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "241:       instr->CompileToNative(this);",
          "242:     }",
          "243:   }",
          "244:   return !is_aborted();",
          "245: }",
          "257: bool LCodeGen::GenerateDeferredCode() {",
          "258:   ASSERT(is_generating());",
          "259:   if (deferred_.length() > 0) {",
          "",
          "[Removed Lines]",
          "248: LInstruction* LCodeGen::GetNextInstruction() {",
          "249:   if (current_instruction_ < instructions_->length() - 1) {",
          "250:     return instructions_->at(current_instruction_ + 1);",
          "251:   } else {",
          "252:     return NULL;",
          "253:   }",
          "254: }",
          "",
          "[Added Lines]",
          "244:   EnsureSpaceForLazyDeopt();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "263:       code->Generate();",
          "264:       __ jmp(code->exit());",
          "265:     }",
          "273:   }",
          "",
          "[Removed Lines]",
          "269:     while ((masm()->pc_offset() - LastSafepointEnd())",
          "270:            < Deoptimizer::patch_size()) {",
          "271:       __ nop();",
          "272:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "442:   ASSERT(instr != NULL);",
          "443:   LPointerMap* pointers = instr->pointer_map();",
          "444:   RecordPosition(pointers->position());",
          "446:   __ call(code, mode);",
          "",
          "[Removed Lines]",
          "448:   RegisterLazyDeoptimization(instr, safepoint_mode);",
          "",
          "[Added Lines]",
          "431:   RecordSafepointWithLazyDeopt(instr, safepoint_mode);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "474:   __ CallRuntime(fun, argc);",
          "477: }",
          "",
          "[Removed Lines]",
          "476:   RegisterLazyDeoptimization(instr, RECORD_SIMPLE_SAFEPOINT);",
          "",
          "[Added Lines]",
          "459:   RecordSafepointWithLazyDeopt(instr, RECORD_SIMPLE_SAFEPOINT);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "494:   __ CallRuntimeSaveDoubles(id);",
          "495:   RecordSafepointWithRegisters(",
          "497: }",
          "527:   if (!environment->HasBeenRegistered()) {",
          "",
          "[Removed Lines]",
          "496:       instr->pointer_map(), argc, Safepoint::kNoDeoptimizationIndex);",
          "500: void LCodeGen::RegisterLazyDeoptimization(LInstruction* instr,",
          "501:                                           SafepointMode safepoint_mode) {",
          "505:   LEnvironment* deoptimization_environment;",
          "506:   if (instr->HasDeoptimizationEnvironment()) {",
          "507:     deoptimization_environment = instr->deoptimization_environment();",
          "508:   } else {",
          "509:     deoptimization_environment = instr->environment();",
          "510:   }",
          "512:   RegisterEnvironmentForDeoptimization(deoptimization_environment);",
          "513:   if (safepoint_mode == RECORD_SIMPLE_SAFEPOINT) {",
          "514:     RecordSafepoint(instr->pointer_map(),",
          "515:                     deoptimization_environment->deoptimization_index());",
          "516:   } else {",
          "517:     ASSERT(safepoint_mode == RECORD_SAFEPOINT_WITH_REGISTERS_AND_NO_ARGUMENTS);",
          "518:     RecordSafepointWithRegisters(",
          "519:         instr->pointer_map(),",
          "520:         0,",
          "521:         deoptimization_environment->deoptimization_index());",
          "522:   }",
          "523: }",
          "526: void LCodeGen::RegisterEnvironmentForDeoptimization(LEnvironment* environment) {",
          "",
          "[Added Lines]",
          "479:       instr->pointer_map(), argc, Safepoint::kNoLazyDeopt);",
          "483: void LCodeGen::RegisterEnvironmentForDeoptimization(",
          "484:     LEnvironment* environment, Safepoint::DeoptMode mode) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "545:     Translation translation(&translations_, frame_count);",
          "546:     WriteTranslation(environment, &translation);",
          "547:     int deoptimization_index = deoptimizations_.length();",
          "549:     deoptimizations_.Add(environment);",
          "550:   }",
          "551: }",
          "554: void LCodeGen::DeoptimizeIf(Condition cc, LEnvironment* environment) {",
          "556:   ASSERT(environment->HasBeenRegistered());",
          "557:   int id = environment->deoptimization_index();",
          "558:   Address entry = Deoptimizer::GetDeoptimizationEntry(id, Deoptimizer::EAGER);",
          "",
          "[Removed Lines]",
          "548:     environment->Register(deoptimization_index, translation.index());",
          "555:   RegisterEnvironmentForDeoptimization(environment);",
          "",
          "[Added Lines]",
          "506:     int pc_offset = masm()->pc_offset();",
          "507:     environment->Register(deoptimization_index,",
          "508:                           translation.index(),",
          "509:                           (mode == Safepoint::kLazyDeopt) ? pc_offset : -1);",
          "516:   RegisterEnvironmentForDeoptimization(environment, Safepoint::kNoLazyDeopt);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "632:     data->SetTranslationIndex(i, Smi::FromInt(env->translation_index()));",
          "633:     data->SetArgumentsStackHeight(i,",
          "634:                                   Smi::FromInt(env->arguments_stack_height()));",
          "635:   }",
          "636:   code->set_deoptimization_data(*data);",
          "637: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "596:     data->SetPc(i, Smi::FromInt(env->pc_offset()));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "663: }",
          "666: void LCodeGen::RecordSafepoint(",
          "667:     LPointerMap* pointers,",
          "668:     Safepoint::Kind kind,",
          "669:     int arguments,",
          "671:   ASSERT(kind == expected_safepoint_kind_);",
          "672:   const ZoneList<LOperand*>* operands = pointers->operands();",
          "675:   for (int i = 0; i < operands->length(); i++) {",
          "676:     LOperand* pointer = operands->at(i);",
          "677:     if (pointer->IsStackSlot()) {",
          "",
          "[Removed Lines]",
          "670:     int deoptimization_index) {",
          "673:   Safepoint safepoint = safepoints_.DefineSafepoint(masm(),",
          "674:       kind, arguments, deoptimization_index);",
          "",
          "[Added Lines]",
          "628: void LCodeGen::RecordSafepointWithLazyDeopt(",
          "629:     LInstruction* instr, SafepointMode safepoint_mode) {",
          "630:   if (safepoint_mode == RECORD_SIMPLE_SAFEPOINT) {",
          "631:     RecordSafepoint(instr->pointer_map(), Safepoint::kLazyDeopt);",
          "632:   } else {",
          "633:     ASSERT(safepoint_mode == RECORD_SAFEPOINT_WITH_REGISTERS_AND_NO_ARGUMENTS);",
          "634:     RecordSafepointWithRegisters(",
          "635:         instr->pointer_map(), 0, Safepoint::kLazyDeopt);",
          "636:   }",
          "637: }",
          "644:     Safepoint::DeoptMode deopt_mode) {",
          "647:   Safepoint safepoint =",
          "648:       safepoints_.DefineSafepoint(masm(), kind, arguments, deopt_mode);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "686: void LCodeGen::RecordSafepoint(LPointerMap* pointers,",
          "689: }",
          "693:   LPointerMap empty_pointers(RelocInfo::kNoPosition);",
          "695: }",
          "698: void LCodeGen::RecordSafepointWithRegisters(LPointerMap* pointers,",
          "699:                                             int arguments,",
          "703: }",
          "",
          "[Removed Lines]",
          "687:                                int deoptimization_index) {",
          "688:   RecordSafepoint(pointers, Safepoint::kSimple, 0, deoptimization_index);",
          "692: void LCodeGen::RecordSafepoint(int deoptimization_index) {",
          "694:   RecordSafepoint(&empty_pointers, deoptimization_index);",
          "700:                                             int deoptimization_index) {",
          "701:   RecordSafepoint(pointers, Safepoint::kWithRegisters, arguments,",
          "702:       deoptimization_index);",
          "",
          "[Added Lines]",
          "661:                                Safepoint::DeoptMode mode) {",
          "662:   RecordSafepoint(pointers, Safepoint::kSimple, 0, mode);",
          "666: void LCodeGen::RecordSafepoint(Safepoint::DeoptMode mode) {",
          "668:   RecordSafepoint(&empty_pointers, mode);",
          "674:                                             Safepoint::DeoptMode mode) {",
          "675:   RecordSafepoint(pointers, Safepoint::kWithRegisters, arguments, mode);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "734:     LParallelMove* move = gap->GetParallelMove(inner_pos);",
          "735:     if (move != NULL) DoParallelMove(move);",
          "736:   }",
          "743: }",
          "",
          "[Removed Lines]",
          "738:   LInstruction* next = GetNextInstruction();",
          "739:   if (next != NULL && next->IsLazyBailout()) {",
          "740:     int pc = masm()->pc_offset();",
          "741:     safepoints_.SetPcAfterGap(pc);",
          "742:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1849:                                   LInstanceOfKnownGlobal* instr)",
          "1850:         : LDeferredCode(codegen), instr_(instr) { }",
          "1851:     virtual void Generate() {",
          "1853:     }",
          "1855:     Label* map_check() { return &map_check_; }",
          "",
          "[Removed Lines]",
          "1852:       codegen()->DoDeferredLInstanceOfKnownGlobal(instr_, &map_check_);",
          "",
          "[Added Lines]",
          "1819:       codegen()->DoDeferredInstanceOfKnownGlobal(instr_, &map_check_);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1905: }",
          "1910:   PushSafepointRegistersScope scope(this);",
          "1912:   InstanceofStub::Flags flags = InstanceofStub::kNoFlags;",
          "",
          "[Removed Lines]",
          "1908: void LCodeGen::DoDeferredLInstanceOfKnownGlobal(LInstanceOfKnownGlobal* instr,",
          "1909:                                                 Label* map_check) {",
          "",
          "[Added Lines]",
          "1875: void LCodeGen::DoDeferredInstanceOfKnownGlobal(LInstanceOfKnownGlobal* instr,",
          "1876:                                                Label* map_check) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1933:                   RelocInfo::CODE_TARGET,",
          "1934:                   instr,",
          "1935:                   RECORD_SAFEPOINT_WITH_REGISTERS_AND_NO_ARGUMENTS);",
          "1937:   __ StoreToSafepointRegisterSlot(eax, eax);",
          "1938: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1903:   ASSERT(instr->HasDeoptimizationEnvironment());",
          "1904:   LEnvironment* env = instr->deoptimization_environment();",
          "1905:   safepoints_.RecordLazyDeoptimizationIndex(env->deoptimization_index());",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2502:   __ bind(&invoke);",
          "2503:   ASSERT(instr->HasPointerMap() && instr->HasDeoptimizationEnvironment());",
          "2504:   LPointerMap* pointers = instr->pointer_map();",
          "2506:   RecordPosition(pointers->position());",
          "2511:   ParameterCount actual(eax);",
          "2512:   __ InvokeFunction(function, actual, CALL_FUNCTION,",
          "2513:                     safepoint_generator, CALL_AS_METHOD);",
          "",
          "[Removed Lines]",
          "2505:   LEnvironment* env = instr->deoptimization_environment();",
          "2507:   RegisterEnvironmentForDeoptimization(env);",
          "2508:   SafepointGenerator safepoint_generator(this,",
          "2509:                                          pointers,",
          "2510:                                          env->deoptimization_index());",
          "",
          "[Added Lines]",
          "2477:   SafepointGenerator safepoint_generator(",
          "2478:       this, pointers, Safepoint::kLazyDeopt);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2590:     __ call(FieldOperand(edi, JSFunction::kCodeEntryOffset));",
          "2591:   }",
          "2595: }",
          "",
          "[Removed Lines]",
          "2594:   RegisterLazyDeoptimization(instr, RECORD_SIMPLE_SAFEPOINT);",
          "",
          "[Added Lines]",
          "2561:   RecordSafepointWithLazyDeopt(instr, RECORD_SIMPLE_SAFEPOINT);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2966:   ASSERT(instr->HasPointerMap());",
          "2967:   ASSERT(instr->HasDeoptimizationEnvironment());",
          "2968:   LPointerMap* pointers = instr->pointer_map();",
          "2970:   RecordPosition(pointers->position());",
          "2973:   ParameterCount count(instr->arity());",
          "2974:   __ InvokeFunction(edi, count, CALL_FUNCTION, generator, CALL_AS_METHOD);",
          "2975: }",
          "",
          "[Removed Lines]",
          "2969:   LEnvironment* env = instr->deoptimization_environment();",
          "2971:   RegisterEnvironmentForDeoptimization(env);",
          "2972:   SafepointGenerator generator(this, pointers, env->deoptimization_index());",
          "",
          "[Added Lines]",
          "2937:   SafepointGenerator generator(",
          "2938:       this, pointers, Safepoint::kLazyDeopt);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3463:   __ mov(esi, Operand(ebp, StandardFrameConstants::kContextOffset));",
          "3464:   __ CallRuntimeSaveDoubles(Runtime::kAllocateHeapNumber);",
          "3465:   RecordSafepointWithRegisters(",
          "3467:   if (!reg.is(eax)) __ mov(reg, eax);",
          "",
          "[Removed Lines]",
          "3466:       instr->pointer_map(), 0, Safepoint::kNoDeoptimizationIndex);",
          "",
          "[Added Lines]",
          "3432:       instr->pointer_map(), 0, Safepoint::kNoLazyDeopt);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "3515:   __ mov(esi, Operand(ebp, StandardFrameConstants::kContextOffset));",
          "3516:   __ CallRuntimeSaveDoubles(Runtime::kAllocateHeapNumber);",
          "3519:   __ StoreToSafepointRegisterSlot(reg, eax);",
          "3520: }",
          "",
          "[Removed Lines]",
          "3517:   RecordSafepointWithRegisters(instr->pointer_map(), 0,",
          "3518:                                Safepoint::kNoDeoptimizationIndex);",
          "",
          "[Added Lines]",
          "3483:   RecordSafepointWithRegisters(",
          "3484:       instr->pointer_map(), 0, Safepoint::kNoLazyDeopt);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "4246: }",
          "4249: void LCodeGen::DoLazyBailout(LLazyBailout* instr) {",
          "4252: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4215: void LCodeGen::EnsureSpaceForLazyDeopt() {",
          "4218:   int current_pc = masm()->pc_offset();",
          "4219:   int patch_size = Deoptimizer::patch_size();",
          "4220:   if (current_pc < last_lazy_deopt_pc_ + patch_size) {",
          "4221:     int padding_size = last_lazy_deopt_pc_ + patch_size - current_pc;",
          "4222:     while (padding_size-- > 0) {",
          "4223:       __ nop();",
          "4224:     }",
          "4225:   }",
          "4226:   last_lazy_deopt_pc_ = masm()->pc_offset();",
          "4227: }",
          "4231:   EnsureSpaceForLazyDeopt();",
          "4232:   ASSERT(instr->HasEnvironment());",
          "4233:   LEnvironment* env = instr->environment();",
          "4234:   RegisterEnvironmentForDeoptimization(env, Safepoint::kLazyDeopt);",
          "4235:   safepoints_.RecordLazyDeoptimizationIndex(env->deoptimization_index());",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "4268:   }",
          "4269:   ASSERT(instr->HasPointerMap() && instr->HasDeoptimizationEnvironment());",
          "4270:   LPointerMap* pointers = instr->pointer_map();",
          "4272:   RecordPosition(pointers->position());",
          "4280:   __ push(Immediate(Smi::FromInt(strict_mode_flag())));",
          "4281:   __ InvokeBuiltin(Builtins::DELETE, CALL_FUNCTION, safepoint_generator);",
          "4282: }",
          "4285: void LCodeGen::DoDeferredStackCheck(LStackCheck* instr) {",
          "4297: }",
          "",
          "[Removed Lines]",
          "4271:   LEnvironment* env = instr->deoptimization_environment();",
          "4273:   RegisterEnvironmentForDeoptimization(env);",
          "4277:   SafepointGenerator safepoint_generator(this,",
          "4278:                                          pointers,",
          "4279:                                          env->deoptimization_index());",
          "4286:   {",
          "4287:     PushSafepointRegistersScope scope(this);",
          "4288:     __ mov(esi, Operand(ebp, StandardFrameConstants::kContextOffset));",
          "4289:     __ CallRuntimeSaveDoubles(Runtime::kStackGuard);",
          "4290:     RegisterLazyDeoptimization(",
          "4291:         instr, RECORD_SAFEPOINT_WITH_REGISTERS_AND_NO_ARGUMENTS);",
          "4292:   }",
          "4295:   int pc = masm()->pc_offset();",
          "4296:   safepoints_.SetPcAfterGap(pc);",
          "",
          "[Added Lines]",
          "4259:   SafepointGenerator safepoint_generator(",
          "4260:       this, pointers, Safepoint::kLazyDeopt);",
          "4267:   PushSafepointRegistersScope scope(this);",
          "4268:   __ mov(esi, Operand(ebp, StandardFrameConstants::kContextOffset));",
          "4269:   __ CallRuntimeSaveDoubles(Runtime::kStackGuard);",
          "4270:   RecordSafepointWithLazyDeopt(",
          "4271:       instr, RECORD_SAFEPOINT_WITH_REGISTERS_AND_NO_ARGUMENTS);",
          "4272:   ASSERT(instr->HasEnvironment());",
          "4273:   LEnvironment* env = instr->environment();",
          "4274:   safepoints_.RecordLazyDeoptimizationIndex(env->deoptimization_index());",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "4307:     LStackCheck* instr_;",
          "4308:   };",
          "4310:   if (instr->hydrogen()->is_function_entry()) {",
          "4312:     Label done;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4288:   ASSERT(instr->HasEnvironment());",
          "4289:   LEnvironment* env = instr->environment();",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "4319:     ASSERT(ToRegister(instr->context()).is(esi));",
          "4320:     StackCheckStub stub;",
          "4321:     CallCode(stub.GetCode(), RelocInfo::CODE_TARGET, instr);",
          "4322:     __ bind(&done);",
          "4323:   } else {",
          "4324:     ASSERT(instr->hydrogen()->is_backwards_branch());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4304:     EnsureSpaceForLazyDeopt();",
          "4306:     RegisterEnvironmentForDeoptimization(env, Safepoint::kLazyDeopt);",
          "4307:     safepoints_.RecordLazyDeoptimizationIndex(env->deoptimization_index());",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "4329:         ExternalReference::address_of_stack_limit(isolate());",
          "4330:     __ cmp(esp, Operand::StaticVariable(stack_limit));",
          "4331:     __ j(below, deferred_stack_check->entry());",
          "4332:     __ bind(instr->done_label());",
          "4333:     deferred_stack_check->SetExit(instr->done_label());",
          "4334:   }",
          "4335: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4317:     EnsureSpaceForLazyDeopt();",
          "4320:     RegisterEnvironmentForDeoptimization(env, Safepoint::kLazyDeopt);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "4348:   ASSERT(!environment->HasBeenRegistered());",
          "4350:   ASSERT(osr_pc_offset_ == -1);",
          "4351:   osr_pc_offset_ = masm()->pc_offset();",
          "4352: }",
          "",
          "[Removed Lines]",
          "4349:   RegisterEnvironmentForDeoptimization(environment);",
          "",
          "[Added Lines]",
          "4339:   RegisterEnvironmentForDeoptimization(environment, Safepoint::kNoLazyDeopt);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "4367:   }",
          "4368:   ASSERT(instr->HasPointerMap() && instr->HasDeoptimizationEnvironment());",
          "4369:   LPointerMap* pointers = instr->pointer_map();",
          "4371:   RecordPosition(pointers->position());",
          "4379:   __ InvokeBuiltin(Builtins::IN, CALL_FUNCTION, safepoint_generator);",
          "4380: }",
          "",
          "[Removed Lines]",
          "4370:   LEnvironment* env = instr->deoptimization_environment();",
          "4372:   RegisterEnvironmentForDeoptimization(env);",
          "4376:   SafepointGenerator safepoint_generator(this,",
          "4377:                                          pointers,",
          "4378:                                          env->deoptimization_index());",
          "",
          "[Added Lines]",
          "4361:   SafepointGenerator safepoint_generator(",
          "4362:       this, pointers, Safepoint::kLazyDeopt);",
          "",
          "---------------"
        ],
        "deps/v8/src/ia32/lithium-codegen-ia32.h||deps/v8/src/ia32/lithium-codegen-ia32.h": [
          "File: deps/v8/src/ia32/lithium-codegen-ia32.h -> deps/v8/src/ia32/lithium-codegen-ia32.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:         status_(UNUSED),",
          "61:         deferred_(8),",
          "62:         osr_pc_offset_(-1),",
          "64:         resolver_(this),",
          "65:         expected_safepoint_kind_(Safepoint::kSimple) {",
          "66:     PopulateDeoptimizationLiteralsWithInlinedFunctions();",
          "",
          "[Removed Lines]",
          "63:         deoptimization_reloc_size(),",
          "",
          "[Added Lines]",
          "63:         last_lazy_deopt_pc_(0),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:   void DoDeferredStackCheck(LStackCheck* instr);",
          "101:   void DoDeferredStringCharCodeAt(LStringCharCodeAt* instr);",
          "102:   void DoDeferredStringCharFromCode(LStringCharFromCode* instr);",
          "107:   void DoParallelMove(LParallelMove* move);",
          "",
          "[Removed Lines]",
          "103:   void DoDeferredLInstanceOfKnownGlobal(LInstanceOfKnownGlobal* instr,",
          "104:                                         Label* map_check);",
          "",
          "[Added Lines]",
          "103:   void DoDeferredInstanceOfKnownGlobal(LInstanceOfKnownGlobal* instr,",
          "104:                                        Label* map_check);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "139:   HGraph* graph() const { return chunk_->graph(); }",
          "141:   int GetNextEmittedBlock(int block);",
          "144:   void EmitClassOfTest(Label* if_true,",
          "145:                        Label* if_false,",
          "",
          "[Removed Lines]",
          "142:   LInstruction* GetNextInstruction();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "206:   void LoadHeapObject(Register result, Handle<HeapObject> object);",
          "212:   void DeoptimizeIf(Condition cc, LEnvironment* environment);",
          "214:   void AddToTranslation(Translation* translation,",
          "",
          "[Removed Lines]",
          "208:   void RegisterLazyDeoptimization(LInstruction* instr,",
          "209:                                   SafepointMode safepoint_mode);",
          "211:   void RegisterEnvironmentForDeoptimization(LEnvironment* environment);",
          "",
          "[Added Lines]",
          "207:   void RecordSafepointWithLazyDeopt(LInstruction* instr,",
          "208:                                     SafepointMode safepoint_mode);",
          "210:   void RegisterEnvironmentForDeoptimization(LEnvironment* environment,",
          "211:                                             Safepoint::DeoptMode mode);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "242:   void RecordSafepoint(LPointerMap* pointers,",
          "243:                        Safepoint::Kind kind,",
          "244:                        int arguments,",
          "248:   void RecordSafepointWithRegisters(LPointerMap* pointers,",
          "249:                                     int arguments,",
          "251:   void RecordPosition(int position);",
          "256:   static Condition TokenToCondition(Token::Value op, bool is_unsigned);",
          "257:   void EmitGoto(int block);",
          "",
          "[Removed Lines]",
          "245:                        int deoptimization_index);",
          "246:   void RecordSafepoint(LPointerMap* pointers, int deoptimization_index);",
          "247:   void RecordSafepoint(int deoptimization_index);",
          "250:                                     int deoptimization_index);",
          "252:   int LastSafepointEnd() {",
          "253:     return static_cast<int>(safepoints_.GetPcAfterGap());",
          "254:   }",
          "",
          "[Added Lines]",
          "245:                        Safepoint::DeoptMode mode);",
          "246:   void RecordSafepoint(LPointerMap* pointers, Safepoint::DeoptMode mode);",
          "247:   void RecordSafepoint(Safepoint::DeoptMode mode);",
          "250:                                     Safepoint::DeoptMode mode);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "284:                                        Register object,",
          "285:                                        Handle<Map> type,",
          "286:                                        Handle<String> name);",
          "288:   LChunk* const chunk_;",
          "289:   MacroAssembler* const masm_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "284:   void EnsureSpaceForLazyDeopt();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "300:   TranslationBuffer translations_;",
          "301:   ZoneList<LDeferredCode*> deferred_;",
          "302:   int osr_pc_offset_;",
          "",
          "[Removed Lines]",
          "304:   struct DeoptimizationRelocSize {",
          "305:     int min_size;",
          "306:     int last_pc_offset;",
          "307:   };",
          "309:   DeoptimizationRelocSize deoptimization_reloc_size;",
          "",
          "[Added Lines]",
          "301:   int last_lazy_deopt_pc_;",
          "",
          "---------------"
        ],
        "deps/v8/src/ia32/lithium-ia32.h||deps/v8/src/ia32/lithium-ia32.h": [
          "File: deps/v8/src/ia32/lithium-ia32.h -> deps/v8/src/ia32/lithium-ia32.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "369: class LLazyBailout: public LTemplateInstruction<0, 0, 0> {",
          "370:  public:",
          "373:   DECLARE_CONCRETE_INSTRUCTION(LazyBailout, \"lazy-bailout\")",
          "382: };",
          "",
          "[Removed Lines]",
          "371:   LLazyBailout() : gap_instructions_size_(0) { }",
          "375:   void set_gap_instructions_size(int gap_instructions_size) {",
          "376:     gap_instructions_size_ = gap_instructions_size;",
          "377:   }",
          "378:   int gap_instructions_size() { return gap_instructions_size_; }",
          "380:  private:",
          "381:   int gap_instructions_size_;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/v8/src/lithium.h||deps/v8/src/lithium.h": [
          "File: deps/v8/src/lithium.h -> deps/v8/src/lithium.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "442:         translation_index_(-1),",
          "443:         ast_id_(ast_id),",
          "444:         parameter_count_(parameter_count),",
          "445:         values_(value_count),",
          "446:         representations_(value_count),",
          "447:         spilled_registers_(NULL),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "445:         pc_offset_(-1),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "455:   int translation_index() const { return translation_index_; }",
          "456:   int ast_id() const { return ast_id_; }",
          "457:   int parameter_count() const { return parameter_count_; }",
          "458:   LOperand** spilled_registers() const { return spilled_registers_; }",
          "459:   LOperand** spilled_double_registers() const {",
          "460:     return spilled_double_registers_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "459:   int pc_offset() const { return pc_offset_; }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "471:     return representations_[index].IsTagged();",
          "472:   }",
          "475:     ASSERT(!HasBeenRegistered());",
          "476:     deoptimization_index_ = deoptimization_index;",
          "477:     translation_index_ = translation_index;",
          "478:   }",
          "479:   bool HasBeenRegistered() const {",
          "480:     return deoptimization_index_ != Safepoint::kNoDeoptimizationIndex;",
          "",
          "[Removed Lines]",
          "474:   void Register(int deoptimization_index, int translation_index) {",
          "",
          "[Added Lines]",
          "476:   void Register(int deoptimization_index,",
          "477:                 int translation_index,",
          "478:                 int pc_offset) {",
          "482:     pc_offset_ = pc_offset;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "495:   int translation_index_;",
          "496:   int ast_id_;",
          "497:   int parameter_count_;",
          "498:   ZoneList<LOperand*> values_;",
          "499:   ZoneList<Representation> representations_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "503:   int pc_offset_;",
          "",
          "---------------"
        ],
        "deps/v8/src/mips/code-stubs-mips.cc||deps/v8/src/mips/code-stubs-mips.cc": [
          "File: deps/v8/src/mips/code-stubs-mips.cc -> deps/v8/src/mips/code-stubs-mips.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "5609: void StringHelper::GenerateHashGetHash(MacroAssembler* masm,",
          "5612:   __ sll(at, hash, 3);",
          "5613:   __ addu(hash, hash, at);",
          "",
          "[Removed Lines]",
          "5610:                                          Register hash) {",
          "",
          "[Added Lines]",
          "5610:                                        Register hash) {",
          "",
          "---------------"
        ],
        "deps/v8/src/objects.cc||deps/v8/src/objects.cc": [
          "File: deps/v8/src/objects.cc -> deps/v8/src/objects.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "6995:   PrintF(out, \"Deoptimization Input Data (deopt points = %d)\\n\", deopt_count);",
          "6996:   if (0 == deopt_count) return;",
          "6999:          FLAG_print_code_verbose ? \"commands\" : \"\");",
          "7000:   for (int i = 0; i < deopt_count; i++) {",
          "7004:     if (!FLAG_print_code_verbose) {",
          "7005:       PrintF(out, \"\\n\");",
          "",
          "[Removed Lines]",
          "6998:   PrintF(out, \"%6s  %6s  %6s  %12s\\n\", \"index\", \"ast id\", \"argc\",",
          "7001:     PrintF(out, \"%6d  %6d  %6d\",",
          "7002:            i, AstId(i)->value(), ArgumentsStackHeight(i)->value());",
          "",
          "[Added Lines]",
          "6998:   PrintF(out, \"%6s  %6s  %6s %6s %12s\\n\", \"index\", \"ast id\", \"argc\", \"pc\",",
          "7001:     PrintF(out, \"%6d  %6d  %6d %6d\",",
          "7002:            i,",
          "7003:            AstId(i)->value(),",
          "7004:            ArgumentsStackHeight(i)->value(),",
          "7005:            Pc(i)->value());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10542:     hash += hash << 3;",
          "10543:     hash ^= hash >> 11;",
          "10544:     hash += hash << 15;",
          "10546: #ifdef DEBUG",
          "10547:     StringHasher hasher(2, seed);",
          "10548:     hasher.AddCharacter(c1);",
          "",
          "[Removed Lines]",
          "10545:     if ((hash & String::kHashBitMask) == 0) hash = 27;",
          "",
          "[Added Lines]",
          "10548:     if ((hash & String::kHashBitMask) == 0) hash = String::kZeroHash;",
          "",
          "---------------"
        ],
        "deps/v8/src/objects.h||deps/v8/src/objects.h": [
          "File: deps/v8/src/objects.h -> deps/v8/src/objects.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3535:   static const int kAstIdOffset = 0;",
          "3536:   static const int kTranslationIndexOffset = 1;",
          "3537:   static const int kArgumentsStackHeightOffset = 2;",
          "3541: #define DEFINE_ELEMENT_ACCESSORS(name, type)      \\",
          "",
          "[Removed Lines]",
          "3538:   static const int kDeoptEntrySize = 3;",
          "",
          "[Added Lines]",
          "3538:   static const int kPcOffset = 3;",
          "3539:   static const int kDeoptEntrySize = 4;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3571:   DEFINE_ENTRY_ACCESSORS(AstId, Smi)",
          "3572:   DEFINE_ENTRY_ACCESSORS(TranslationIndex, Smi)",
          "3573:   DEFINE_ENTRY_ACCESSORS(ArgumentsStackHeight, Smi)",
          "3575: #undef DEFINE_ENTRY_ACCESSORS",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3575:   DEFINE_ENTRY_ACCESSORS(Pc, Smi)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5833:   static uint32_t MakeArrayIndexHash(uint32_t value, int length);",
          "5835:  private:",
          "5836:   uint32_t array_index() {",
          "5837:     ASSERT(is_array_index());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5840:   static const int kZeroHash = 27;",
          "",
          "---------------"
        ],
        "deps/v8/src/safepoint-table.cc||deps/v8/src/safepoint-table.cc": [
          "File: deps/v8/src/safepoint-table.cc -> deps/v8/src/safepoint-table.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "124: Safepoint SafepointTableBuilder::DefineSafepoint(",
          "128:   ASSERT(arguments >= 0);",
          "136:   indexes_.Add(new ZoneList<int>(8));",
          "137:   registers_.Add((kind & Safepoint::kWithRegisters)",
          "138:       ? new ZoneList<int>(4)",
          "",
          "[Removed Lines]",
          "125:     Assembler* assembler, Safepoint::Kind kind, int arguments,",
          "126:     int deoptimization_index) {",
          "127:   ASSERT(deoptimization_index != -1);",
          "129:   DeoptimizationInfo pc_and_deoptimization_index;",
          "130:   pc_and_deoptimization_index.pc = assembler->pc_offset();",
          "131:   pc_and_deoptimization_index.deoptimization_index = deoptimization_index;",
          "132:   pc_and_deoptimization_index.pc_after_gap = assembler->pc_offset();",
          "133:   pc_and_deoptimization_index.arguments = arguments;",
          "134:   pc_and_deoptimization_index.has_doubles = (kind & Safepoint::kWithDoubles);",
          "135:   deoptimization_info_.Add(pc_and_deoptimization_index);",
          "",
          "[Added Lines]",
          "125:     Assembler* assembler,",
          "126:     Safepoint::Kind kind,",
          "127:     int arguments,",
          "128:     Safepoint::DeoptMode deopt_mode) {",
          "130:   DeoptimizationInfo info;",
          "131:   info.pc = assembler->pc_offset();",
          "132:   info.arguments = arguments;",
          "133:   info.has_doubles = (kind & Safepoint::kWithDoubles);",
          "134:   deoptimization_info_.Add(info);",
          "135:   deopt_index_list_.Add(Safepoint::kNoDeoptimizationIndex);",
          "136:   if (deopt_mode == Safepoint::kNoLazyDeopt) {",
          "137:     last_lazy_safepoint_ = deopt_index_list_.length();",
          "138:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141: }",
          "144: unsigned SafepointTableBuilder::GetCodeOffset() const {",
          "145:   ASSERT(emitted_);",
          "146:   return offset_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147: void SafepointTableBuilder::RecordLazyDeoptimizationIndex(int index) {",
          "148:   while (last_lazy_safepoint_ < deopt_index_list_.length()) {",
          "149:     deopt_index_list_[last_lazy_safepoint_++] = index;",
          "150:   }",
          "151: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "173:   assembler->dd(length);",
          "174:   assembler->dd(bytes_per_entry);",
          "178:   for (int i = 0; i < length; i++) {",
          "179:     assembler->dd(deoptimization_info_[i].pc);",
          "181:   }",
          "",
          "[Removed Lines]",
          "180:     assembler->dd(EncodeExceptPC(deoptimization_info_[i]));",
          "",
          "[Added Lines]",
          "188:     assembler->dd(EncodeExceptPC(deoptimization_info_[i],",
          "189:                                  deopt_index_list_[i]));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "222: }",
          "228:   uint32_t encoding = SafepointEntry::DeoptimizationIndexField::encode(index);",
          "230:   encoding |= SafepointEntry::ArgumentsField::encode(info.arguments);",
          "231:   encoding |= SafepointEntry::SaveDoublesField::encode(info.has_doubles);",
          "232:   return encoding;",
          "233: }",
          "256: } }  // namespace v8::internal",
          "",
          "[Removed Lines]",
          "225: uint32_t SafepointTableBuilder::EncodeExceptPC(const DeoptimizationInfo& info) {",
          "226:   unsigned index = info.deoptimization_index;",
          "227:   unsigned gap_size = info.pc_after_gap - info.pc;",
          "229:   encoding |= SafepointEntry::GapCodeSizeField::encode(gap_size);",
          "236: int SafepointTableBuilder::CountShortDeoptimizationIntervals(unsigned limit) {",
          "237:   int result = 0;",
          "238:   if (!deoptimization_info_.is_empty()) {",
          "239:     unsigned previous_gap_end = deoptimization_info_[0].pc_after_gap;",
          "240:     for (int i = 1, n = deoptimization_info_.length(); i < n; i++) {",
          "241:       DeoptimizationInfo info = deoptimization_info_[i];",
          "242:       if (static_cast<int>(info.deoptimization_index) !=",
          "243:           Safepoint::kNoDeoptimizationIndex) {",
          "244:         if (previous_gap_end + limit > info.pc) {",
          "245:           result++;",
          "246:         }",
          "247:         previous_gap_end = info.pc_after_gap;",
          "248:       }",
          "249:     }",
          "250:   }",
          "251:   return result;",
          "252: }",
          "",
          "[Added Lines]",
          "234: uint32_t SafepointTableBuilder::EncodeExceptPC(const DeoptimizationInfo& info,",
          "235:                                                unsigned index) {",
          "",
          "---------------"
        ],
        "deps/v8/src/safepoint-table.h||deps/v8/src/safepoint-table.h": [
          "File: deps/v8/src/safepoint-table.h -> deps/v8/src/safepoint-table.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:     return DeoptimizationIndexField::decode(info_);",
          "63:   }",
          "70:   int argument_count() const {",
          "71:     ASSERT(is_valid());",
          "",
          "[Removed Lines]",
          "65:   int gap_code_size() const {",
          "66:     ASSERT(is_valid());",
          "67:     return GapCodeSizeField::decode(info_);",
          "68:   }",
          "",
          "[Added Lines]",
          "65:   static const int kArgumentsFieldBits = 3;",
          "66:   static const int kSaveDoublesFieldBits = 1;",
          "67:   static const int kDeoptIndexBits =",
          "68:       32 - kArgumentsFieldBits - kSaveDoublesFieldBits;",
          "69:   class DeoptimizationIndexField:",
          "70:     public BitField<int, 0, kDeoptIndexBits> {};  // NOLINT",
          "71:   class ArgumentsField:",
          "72:     public BitField<unsigned,",
          "73:                     kDeoptIndexBits,",
          "74:                     kArgumentsFieldBits> {};  // NOLINT",
          "75:   class SaveDoublesField:",
          "76:     public BitField<bool,",
          "77:                     kDeoptIndexBits + kArgumentsFieldBits,",
          "78:                     kSaveDoublesFieldBits> { }; // NOLINT",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:   bool HasRegisters() const;",
          "86:   bool HasRegisterAt(int reg_index) const;",
          "109:  private:",
          "110:   unsigned info_;",
          "111:   uint8_t* bits_;",
          "",
          "[Removed Lines]",
          "92:   static const int kGapCodeSizeBits = 13;",
          "93:   static const int kArgumentsFieldBits = 3;",
          "94:   static const int kSaveDoublesFieldBits = 1;",
          "95:   static const int kDeoptIndexBits =",
          "96:       32 - kGapCodeSizeBits - kArgumentsFieldBits - kSaveDoublesFieldBits;",
          "97:   class GapCodeSizeField: public BitField<unsigned, 0, kGapCodeSizeBits> {};",
          "98:   class DeoptimizationIndexField: public BitField<int,",
          "99:                                                   kGapCodeSizeBits,",
          "100:                                                   kDeoptIndexBits> {};  // NOLINT",
          "101:   class ArgumentsField: public BitField<unsigned,",
          "102:                                         kGapCodeSizeBits + kDeoptIndexBits,",
          "103:                                         kArgumentsFieldBits> {};  // NOLINT",
          "104:   class SaveDoublesField: public BitField<bool,",
          "105:                                           kGapCodeSizeBits + kDeoptIndexBits +",
          "106:                                           kArgumentsFieldBits,",
          "107:                                           kSaveDoublesFieldBits> { }; // NOLINT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "186:     kWithRegistersAndDoubles = kWithRegisters | kWithDoubles",
          "187:   } Kind;",
          "189:   static const int kNoDeoptimizationIndex =",
          "190:       (1 << (SafepointEntry::kDeoptIndexBits)) - 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178:   enum DeoptMode {",
          "179:     kNoLazyDeopt,",
          "180:     kLazyDeopt",
          "181:   };",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "206:  public:",
          "207:   SafepointTableBuilder()",
          "208:       : deoptimization_info_(32),",
          "209:         indexes_(32),",
          "210:         registers_(32),",
          "214:   unsigned GetCodeOffset() const;",
          "",
          "[Removed Lines]",
          "211:         emitted_(false) { }",
          "",
          "[Added Lines]",
          "203:         deopt_index_list_(32),",
          "206:         emitted_(false),",
          "207:         last_lazy_safepoint_(0) { }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "217:   Safepoint DefineSafepoint(Assembler* assembler,",
          "218:                             Safepoint::Kind kind,",
          "219:                             int arguments,",
          "240:   void Emit(Assembler* assembler, int bits_per_entry);",
          "247:  private:",
          "248:   struct DeoptimizationInfo {",
          "249:     unsigned pc;",
          "252:     unsigned arguments;",
          "253:     bool has_doubles;",
          "254:   };",
          "258:   ZoneList<DeoptimizationInfo> deoptimization_info_;",
          "259:   ZoneList<ZoneList<int>*> indexes_;",
          "260:   ZoneList<ZoneList<int>*> registers_;",
          "262:   unsigned offset_;",
          "263:   bool emitted_;",
          "265:   DISALLOW_COPY_AND_ASSIGN(SafepointTableBuilder);",
          "266: };",
          "",
          "[Removed Lines]",
          "220:                             int deoptimization_index);",
          "224:   void SetPcAfterGap(int pc) {",
          "225:     ASSERT(!deoptimization_info_.is_empty());",
          "226:     int index = deoptimization_info_.length() - 1;",
          "227:     deoptimization_info_[index].pc_after_gap = pc;",
          "228:   }",
          "232:   unsigned GetPcAfterGap() {",
          "233:     int index = deoptimization_info_.length();",
          "234:     if (index == 0) return 0;",
          "235:     return deoptimization_info_[index - 1].pc_after_gap;",
          "236:   }",
          "245:   int CountShortDeoptimizationIntervals(unsigned limit);",
          "250:     unsigned deoptimization_index;",
          "251:     unsigned pc_after_gap;",
          "256:   uint32_t EncodeExceptPC(const DeoptimizationInfo& info);",
          "",
          "[Added Lines]",
          "216:                             Safepoint::DeoptMode mode);",
          "220:   void RecordLazyDeoptimizationIndex(int index);",
          "234:   uint32_t EncodeExceptPC(const DeoptimizationInfo& info, unsigned index);",
          "237:   ZoneList<unsigned> deopt_index_list_;",
          "243:   int last_lazy_safepoint_;",
          "",
          "---------------"
        ],
        "deps/v8/src/version.cc||deps/v8/src/version.cc": [
          "File: deps/v8/src/version.cc -> deps/v8/src/version.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #define MAJOR_VERSION     3",
          "36: #define MINOR_VERSION     6",
          "37: #define BUILD_NUMBER      6",
          "41: #define IS_CANDIDATE_VERSION 0",
          "",
          "[Removed Lines]",
          "38: #define PATCH_LEVEL       15",
          "",
          "[Added Lines]",
          "38: #define PATCH_LEVEL       19",
          "",
          "---------------"
        ],
        "deps/v8/src/x64/code-stubs-x64.cc||deps/v8/src/x64/code-stubs-x64.cc": [
          "File: deps/v8/src/x64/code-stubs-x64.cc -> deps/v8/src/x64/code-stubs-x64.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "4654:   __ shll(scratch, Immediate(15));",
          "4655:   __ addl(hash, scratch);",
          "4661:   Label hash_not_zero;",
          "4662:   __ j(not_zero, &hash_not_zero);",
          "4664:   __ bind(&hash_not_zero);",
          "4665: }",
          "",
          "[Removed Lines]",
          "4657:   uint32_t kHashShiftCutOffMask = (1 << (32 - String::kHashShift)) - 1;",
          "4658:   __ andl(hash, Immediate(kHashShiftCutOffMask));",
          "4663:   __ Set(hash, 27);",
          "",
          "[Added Lines]",
          "4657:   __ andl(hash, Immediate(String::kHashBitMask));",
          "4662:   __ Set(hash, StringHasher::kZeroHash);",
          "",
          "---------------"
        ],
        "deps/v8/src/x64/deoptimizer-x64.cc||deps/v8/src/x64/deoptimizer-x64.cc": [
          "File: deps/v8/src/x64/deoptimizer-x64.cc -> deps/v8/src/x64/deoptimizer-x64.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: int Deoptimizer::patch_size() {",
          "106: }",
          "",
          "[Removed Lines]",
          "45:   return MacroAssembler::kCallInstructionLength;",
          "46: }",
          "49: #ifdef DEBUG",
          "51: static void ZapCodeRange(Address from, Address to) {",
          "52:   CHECK(from <= to);",
          "53:   int length = static_cast<int>(to - from);",
          "54:   CodePatcher destroyer(from, length);",
          "55:   while (length-- > 0) {",
          "56:     destroyer.masm()->int3();",
          "57:   }",
          "58: }",
          "59: #endif",
          "64: class SafepointTableDeoptimiztionEntryIterator {",
          "65:  public:",
          "66:   explicit SafepointTableDeoptimiztionEntryIterator(Code* code)",
          "67:       : code_(code), table_(code), index_(-1), limit_(table_.length()) {",
          "68:     FindNextIndex();",
          "69:   }",
          "71:   SafepointEntry Next(Address* pc) {",
          "72:     if (index_ >= limit_) {",
          "74:       return SafepointEntry();  // Invalid entry.",
          "75:     }",
          "77:     SafepointEntry entry = table_.GetEntry(index_);",
          "78:     FindNextIndex();",
          "79:     return entry;",
          "80:   }",
          "82:  private:",
          "83:   void FindNextIndex() {",
          "84:     ASSERT(index_ < limit_);",
          "85:     while (++index_ < limit_) {",
          "86:       if (table_.GetEntry(index_).deoptimization_index() !=",
          "87:           Safepoint::kNoDeoptimizationIndex) {",
          "88:         return;",
          "89:       }",
          "90:     }",
          "91:   }",
          "93:   Code* code_;",
          "94:   SafepointTable table_;",
          "98:   int index_;",
          "100:   int limit_;",
          "101: };",
          "104: void Deoptimizer::EnsureRelocSpaceForLazyDeoptimization(Handle<Code> code) {",
          "",
          "[Added Lines]",
          "45:   return Assembler::kCallInstructionLength;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:   code->InvalidateRelocation();",
          "128:   Address instruction_start = function->code()->instruction_start();",
          "143: #ifdef DEBUG",
          "146: #endif",
          "168: #ifdef DEBUG",
          "171: #endif",
          "194:   }",
          "202:   DeoptimizingCodeListNode* node = new DeoptimizingCodeListNode(code);",
          "",
          "[Removed Lines]",
          "129:   Address jump_table_address =",
          "130:       instruction_start + function->code()->safepoint_table_offset();",
          "131: #ifdef DEBUG",
          "132:   Address previous_pc = instruction_start;",
          "133: #endif",
          "135:   SafepointTableDeoptimiztionEntryIterator deoptimizations(function->code());",
          "136:   Address entry_pc = NULL;",
          "138:   SafepointEntry current_entry = deoptimizations.Next(&entry_pc);",
          "139:   while (current_entry.is_valid()) {",
          "140:     int gap_code_size = current_entry.gap_code_size();",
          "141:     unsigned deoptimization_index = current_entry.deoptimization_index();",
          "145:     ZapCodeRange(previous_pc, entry_pc);",
          "148:     Address call_address = entry_pc + gap_code_size;",
          "150:     Address call_end_address =",
          "151:         call_address + MacroAssembler::kCallInstructionLength;",
          "154:     Address next_pc = NULL;",
          "155:     SafepointEntry next_entry = deoptimizations.Next(&next_pc);",
          "157:     if (!next_entry.is_valid() || next_pc >= call_end_address) {",
          "159:       CodePatcher patcher(call_address, Assembler::kCallInstructionLength);",
          "160:       patcher.masm()->Call(GetDeoptimizationEntry(deoptimization_index, LAZY),",
          "161:                            RelocInfo::NONE);",
          "162: #ifdef DEBUG",
          "163:       previous_pc = call_end_address;",
          "164: #endif",
          "165:     } else {",
          "169:       Address short_call_end_address =",
          "170:           call_address + MacroAssembler::kShortCallInstructionLength;",
          "172:       ASSERT(next_pc >= short_call_end_address);",
          "175:       jump_table_address -= MacroAssembler::kJumpInstructionLength;",
          "176:       CodePatcher jump_patcher(jump_table_address,",
          "177:                                MacroAssembler::kJumpInstructionLength);",
          "178:       jump_patcher.masm()->Jump(",
          "179:           GetDeoptimizationEntry(deoptimization_index, LAZY),",
          "180:           RelocInfo::NONE);",
          "183:       CodePatcher call_patcher(call_address,",
          "184:                                MacroAssembler::kShortCallInstructionLength);",
          "185:       call_patcher.masm()->call(jump_table_address);",
          "186: #ifdef DEBUG",
          "187:       previous_pc = short_call_end_address;",
          "188: #endif",
          "189:     }",
          "192:     current_entry = next_entry;",
          "193:     entry_pc = next_pc;",
          "196: #ifdef DEBUG",
          "198:   ZapCodeRange(previous_pc, jump_table_address);",
          "199: #endif",
          "",
          "[Added Lines]",
          "70:   Address prev_call_address = NULL;",
          "72:   DeoptimizationInputData* deopt_data =",
          "73:       DeoptimizationInputData::cast(code->deoptimization_data());",
          "74:   for (int i = 0; i < deopt_data->DeoptCount(); i++) {",
          "75:     if (deopt_data->Pc(i)->value() == -1) continue;",
          "77:     Address call_address = instruction_start + deopt_data->Pc(i)->value();",
          "80:     CodePatcher patcher(call_address, Assembler::kCallInstructionLength);",
          "81:     patcher.masm()->Call(GetDeoptimizationEntry(i, LAZY), RelocInfo::NONE);",
          "82:     ASSERT(prev_call_address == NULL ||",
          "83:            call_address >= prev_call_address + patch_size());",
          "84:     ASSERT(call_address + patch_size() <= code->instruction_end());",
          "86:     prev_call_address = call_address;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "211:     PrintF(\"[forced deoptimization: \");",
          "212:     function->PrintName();",
          "213:     PrintF(\" / %\" V8PRIxPTR \"]\\n\", reinterpret_cast<intptr_t>(function));",
          "219:   }",
          "220: }",
          "",
          "[Removed Lines]",
          "214: #ifdef DEBUG",
          "215:     if (FLAG_print_code) {",
          "216:       code->PrintLn();",
          "217:     }",
          "218: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/v8/src/x64/lithium-codegen-x64.cc||deps/v8/src/x64/lithium-codegen-x64.cc": [
          "File: deps/v8/src/x64/lithium-codegen-x64.cc -> deps/v8/src/x64/lithium-codegen-x64.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:  public:",
          "44:   SafepointGenerator(LCodeGen* codegen,",
          "45:                      LPointerMap* pointers,",
          "47:       : codegen_(codegen),",
          "48:         pointers_(pointers),",
          "50:   virtual ~SafepointGenerator() { }",
          "52:   virtual void BeforeCall(int call_size) const {",
          "63:   }",
          "65:   virtual void AfterCall() const {",
          "67:   }",
          "69:  private:",
          "72:   LCodeGen* codegen_;",
          "73:   LPointerMap* pointers_;",
          "75: };",
          "",
          "[Removed Lines]",
          "46:                      int deoptimization_index)",
          "49:         deoptimization_index_(deoptimization_index) { }",
          "53:     ASSERT(call_size >= 0);",
          "56:     int call_end = codegen_->masm()->pc_offset() + call_size;",
          "57:     int prev_jump_end = codegen_->LastSafepointEnd() + kMinSafepointSize;",
          "58:     if (call_end < prev_jump_end) {",
          "59:       int padding_size = prev_jump_end - call_end;",
          "60:       STATIC_ASSERT(kMinSafepointSize <= 9);  // One multibyte nop is enough.",
          "61:       codegen_->masm()->nop(padding_size);",
          "62:     }",
          "66:     codegen_->RecordSafepoint(pointers_, deoptimization_index_);",
          "70:   static const int kMinSafepointSize =",
          "71:       MacroAssembler::kShortCallInstructionLength;",
          "74:   int deoptimization_index_;",
          "",
          "[Added Lines]",
          "46:                      Safepoint::DeoptMode mode)",
          "49:         deopt_mode_(mode) { }",
          "53:     codegen_->EnsureSpaceForLazyDeopt(Deoptimizer::patch_size() - call_size);",
          "57:     codegen_->RecordSafepoint(pointers_, deopt_mode_);",
          "63:   Safepoint::DeoptMode deopt_mode_;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:   code->set_stack_slots(GetStackSlotCount());",
          "95:   code->set_safepoint_table_offset(safepoints_.GetCodeOffset());",
          "96:   PopulateDeoptimizationData(code);",
          "98: }",
          "",
          "[Removed Lines]",
          "97:   Deoptimizer::EnsureRelocSpaceForLazyDeoptimization(code);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "200:     } else {",
          "201:       __ CallRuntime(Runtime::kNewFunctionContext, 1);",
          "202:     }",
          "206:     __ movq(Operand(rbp, StandardFrameConstants::kContextOffset), rsi);",
          "",
          "[Removed Lines]",
          "203:     RecordSafepoint(Safepoint::kNoDeoptimizationIndex);",
          "",
          "[Added Lines]",
          "191:     RecordSafepoint(Safepoint::kNoLazyDeopt);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "252:       instr->CompileToNative(this);",
          "253:     }",
          "254:   }",
          "255:   return !is_aborted();",
          "256: }",
          "268: bool LCodeGen::GenerateJumpTable() {",
          "269:   for (int i = 0; i < jump_table_.length(); i++) {",
          "270:     __ bind(&jump_table_[i].label);",
          "",
          "[Removed Lines]",
          "259: LInstruction* LCodeGen::GetNextInstruction() {",
          "260:   if (current_instruction_ < instructions_->length() - 1) {",
          "261:     return instructions_->at(current_instruction_ + 1);",
          "262:   } else {",
          "263:     return NULL;",
          "264:   }",
          "265: }",
          "",
          "[Added Lines]",
          "243:   EnsureSpaceForLazyDeopt(Deoptimizer::patch_size());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "283:       code->Generate();",
          "284:       __ jmp(code->exit());",
          "285:     }",
          "298:   }",
          "",
          "[Removed Lines]",
          "289:     while ((masm()->pc_offset() - LastSafepointEnd())",
          "290:            < Deoptimizer::patch_size()) {",
          "291:       int padding = masm()->pc_offset() - LastSafepointEnd();",
          "292:       if (padding > 9) {",
          "293:         __ nop(9);",
          "294:       } else {",
          "295:         __ nop(padding);",
          "296:       }",
          "297:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "307: bool LCodeGen::GenerateSafepointTable() {",
          "308:   ASSERT(is_done());",
          "323:   safepoints_.Emit(masm(), GetStackSlotCount());",
          "324:   return !is_aborted();",
          "325: }",
          "",
          "[Removed Lines]",
          "317:   int short_deopts = safepoints_.CountShortDeoptimizationIntervals(",
          "318:       static_cast<unsigned>(MacroAssembler::kJumpInstructionLength));",
          "319:   int byte_count = (short_deopts) * MacroAssembler::kJumpInstructionLength;",
          "320:   while (byte_count-- > 0) {",
          "321:     __ int3();",
          "322:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "475:                                LInstruction* instr,",
          "476:                                SafepointMode safepoint_mode,",
          "477:                                int argc) {",
          "478:   ASSERT(instr != NULL);",
          "479:   LPointerMap* pointers = instr->pointer_map();",
          "480:   RecordPosition(pointers->position());",
          "481:   __ call(code, mode);",
          "",
          "[Removed Lines]",
          "482:   RegisterLazyDeoptimization(instr, safepoint_mode, argc);",
          "",
          "[Added Lines]",
          "432:   EnsureSpaceForLazyDeopt(Deoptimizer::patch_size() - masm()->CallSize(code));",
          "437:   RecordSafepointWithLazyDeopt(instr, safepoint_mode, argc);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "506:   RecordPosition(pointers->position());",
          "508:   __ CallRuntime(function, num_arguments);",
          "510: }",
          "",
          "[Removed Lines]",
          "509:   RegisterLazyDeoptimization(instr, RECORD_SIMPLE_SAFEPOINT, 0);",
          "",
          "[Added Lines]",
          "464:   RecordSafepointWithLazyDeopt(instr, RECORD_SIMPLE_SAFEPOINT, 0);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "516:   __ movq(rsi, Operand(rbp, StandardFrameConstants::kContextOffset));",
          "517:   __ CallRuntimeSaveDoubles(id);",
          "518:   RecordSafepointWithRegisters(",
          "520: }",
          "552:   if (!environment->HasBeenRegistered()) {",
          "",
          "[Removed Lines]",
          "519:       instr->pointer_map(), argc, Safepoint::kNoDeoptimizationIndex);",
          "523: void LCodeGen::RegisterLazyDeoptimization(LInstruction* instr,",
          "524:                                           SafepointMode safepoint_mode,",
          "525:                                           int argc) {",
          "529:   LEnvironment* deoptimization_environment;",
          "530:   if (instr->HasDeoptimizationEnvironment()) {",
          "531:     deoptimization_environment = instr->deoptimization_environment();",
          "532:   } else {",
          "533:     deoptimization_environment = instr->environment();",
          "534:   }",
          "536:   RegisterEnvironmentForDeoptimization(deoptimization_environment);",
          "537:   if (safepoint_mode == RECORD_SIMPLE_SAFEPOINT) {",
          "538:     ASSERT(argc == 0);",
          "539:     RecordSafepoint(instr->pointer_map(),",
          "540:                     deoptimization_environment->deoptimization_index());",
          "541:   } else {",
          "542:     ASSERT(safepoint_mode == RECORD_SAFEPOINT_WITH_REGISTERS);",
          "543:     RecordSafepointWithRegisters(",
          "544:         instr->pointer_map(),",
          "545:         argc,",
          "546:         deoptimization_environment->deoptimization_index());",
          "547:   }",
          "548: }",
          "551: void LCodeGen::RegisterEnvironmentForDeoptimization(LEnvironment* environment) {",
          "",
          "[Added Lines]",
          "474:       instr->pointer_map(), argc, Safepoint::kNoLazyDeopt);",
          "478: void LCodeGen::RegisterEnvironmentForDeoptimization(LEnvironment* environment,",
          "479:                                                     Safepoint::DeoptMode mode) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "570:     Translation translation(&translations_, frame_count);",
          "571:     WriteTranslation(environment, &translation);",
          "572:     int deoptimization_index = deoptimizations_.length();",
          "574:     deoptimizations_.Add(environment);",
          "575:   }",
          "576: }",
          "579: void LCodeGen::DeoptimizeIf(Condition cc, LEnvironment* environment) {",
          "581:   ASSERT(environment->HasBeenRegistered());",
          "582:   int id = environment->deoptimization_index();",
          "583:   Address entry = Deoptimizer::GetDeoptimizationEntry(id, Deoptimizer::EAGER);",
          "",
          "[Removed Lines]",
          "573:     environment->Register(deoptimization_index, translation.index());",
          "580:   RegisterEnvironmentForDeoptimization(environment);",
          "",
          "[Added Lines]",
          "501:     int pc_offset = masm()->pc_offset();",
          "502:     environment->Register(deoptimization_index,",
          "503:                           translation.index(),",
          "504:                           (mode == Safepoint::kLazyDeopt) ? pc_offset : -1);",
          "511:   RegisterEnvironmentForDeoptimization(environment, Safepoint::kNoLazyDeopt);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "629:     data->SetTranslationIndex(i, Smi::FromInt(env->translation_index()));",
          "630:     data->SetArgumentsStackHeight(i,",
          "631:                                   Smi::FromInt(env->arguments_stack_height()));",
          "632:   }",
          "633:   code->set_deoptimization_data(*data);",
          "634: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "563:     data->SetPc(i, Smi::FromInt(env->pc_offset()));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "660: }",
          "663: void LCodeGen::RecordSafepoint(",
          "664:     LPointerMap* pointers,",
          "665:     Safepoint::Kind kind,",
          "666:     int arguments,",
          "668:   ASSERT(kind == expected_safepoint_kind_);",
          "670:   const ZoneList<LOperand*>* operands = pointers->operands();",
          "672:   Safepoint safepoint = safepoints_.DefineSafepoint(masm(),",
          "674:   for (int i = 0; i < operands->length(); i++) {",
          "675:     LOperand* pointer = operands->at(i);",
          "676:     if (pointer->IsStackSlot()) {",
          "",
          "[Removed Lines]",
          "667:     int deoptimization_index) {",
          "673:       kind, arguments, deoptimization_index);",
          "",
          "[Added Lines]",
          "595: void LCodeGen::RecordSafepointWithLazyDeopt(",
          "596:     LInstruction* instr, SafepointMode safepoint_mode, int argc) {",
          "597:   if (safepoint_mode == RECORD_SIMPLE_SAFEPOINT) {",
          "598:     RecordSafepoint(instr->pointer_map(), Safepoint::kLazyDeopt);",
          "599:   } else {",
          "600:     ASSERT(safepoint_mode == RECORD_SAFEPOINT_WITH_REGISTERS);",
          "601:     RecordSafepointWithRegisters(",
          "602:         instr->pointer_map(), argc, Safepoint::kLazyDeopt);",
          "603:   }",
          "604: }",
          "611:     Safepoint::DeoptMode deopt_mode) {",
          "617:       kind, arguments, deopt_mode);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "689: void LCodeGen::RecordSafepoint(LPointerMap* pointers,",
          "692: }",
          "696:   LPointerMap empty_pointers(RelocInfo::kNoPosition);",
          "698: }",
          "701: void LCodeGen::RecordSafepointWithRegisters(LPointerMap* pointers,",
          "702:                                             int arguments,",
          "706: }",
          "",
          "[Removed Lines]",
          "690:                                int deoptimization_index) {",
          "691:   RecordSafepoint(pointers, Safepoint::kSimple, 0, deoptimization_index);",
          "695: void LCodeGen::RecordSafepoint(int deoptimization_index) {",
          "697:   RecordSafepoint(&empty_pointers, deoptimization_index);",
          "703:                                             int deoptimization_index) {",
          "704:   RecordSafepoint(pointers, Safepoint::kWithRegisters, arguments,",
          "705:       deoptimization_index);",
          "",
          "[Added Lines]",
          "634:                                Safepoint::DeoptMode deopt_mode) {",
          "635:   RecordSafepoint(pointers, Safepoint::kSimple, 0, deopt_mode);",
          "639: void LCodeGen::RecordSafepoint(Safepoint::DeoptMode deopt_mode) {",
          "641:   RecordSafepoint(&empty_pointers, deopt_mode);",
          "647:                                             Safepoint::DeoptMode deopt_mode) {",
          "648:   RecordSafepoint(pointers, Safepoint::kWithRegisters, arguments, deopt_mode);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "737:     LParallelMove* move = gap->GetParallelMove(inner_pos);",
          "738:     if (move != NULL) DoParallelMove(move);",
          "739:   }",
          "746: }",
          "",
          "[Removed Lines]",
          "741:   LInstruction* next = GetNextInstruction();",
          "742:   if (next != NULL && next->IsLazyBailout()) {",
          "743:     int pc = masm()->pc_offset();",
          "744:     safepoints_.SetPcAfterGap(pc);",
          "745:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1851:                                   LInstanceOfKnownGlobal* instr)",
          "1852:         : LDeferredCode(codegen), instr_(instr) { }",
          "1853:     virtual void Generate() {",
          "1855:     }",
          "1857:     Label* map_check() { return &map_check_; }",
          "",
          "[Removed Lines]",
          "1854:       codegen()->DoDeferredLInstanceOfKnownGlobal(instr_, &map_check_);",
          "",
          "[Added Lines]",
          "1791:       codegen()->DoDeferredInstanceOfKnownGlobal(instr_, &map_check_);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1910: }",
          "1915:   {",
          "1916:     PushSafepointRegistersScope scope(this);",
          "1917:     InstanceofStub::Flags flags = static_cast<InstanceofStub::Flags>(",
          "",
          "[Removed Lines]",
          "1913: void LCodeGen::DoDeferredLInstanceOfKnownGlobal(LInstanceOfKnownGlobal* instr,",
          "1914:                                                 Label* map_check) {",
          "",
          "[Added Lines]",
          "1850: void LCodeGen::DoDeferredInstanceOfKnownGlobal(LInstanceOfKnownGlobal* instr,",
          "1851:                                                Label* map_check) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1937:                     RECORD_SAFEPOINT_WITH_REGISTERS,",
          "1938:                     2);",
          "1939:     ASSERT(delta == masm_->SizeOfCodeGeneratedSince(map_check));",
          "1942:     __ movq(kScratchRegister, rax);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1877:     ASSERT(instr->HasDeoptimizationEnvironment());",
          "1878:     LEnvironment* env = instr->deoptimization_environment();",
          "1879:     safepoints_.RecordLazyDeoptimizationIndex(env->deoptimization_index());",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2508:   __ bind(&invoke);",
          "2509:   ASSERT(instr->HasPointerMap() && instr->HasDeoptimizationEnvironment());",
          "2510:   LPointerMap* pointers = instr->pointer_map();",
          "2512:   RecordPosition(pointers->position());",
          "2517:   v8::internal::ParameterCount actual(rax);",
          "2518:   __ InvokeFunction(function, actual, CALL_FUNCTION,",
          "2519:                     safepoint_generator, CALL_AS_METHOD);",
          "",
          "[Removed Lines]",
          "2511:   LEnvironment* env = instr->deoptimization_environment();",
          "2513:   RegisterEnvironmentForDeoptimization(env);",
          "2514:   SafepointGenerator safepoint_generator(this,",
          "2515:                                          pointers,",
          "2516:                                          env->deoptimization_index());",
          "",
          "[Added Lines]",
          "2452:   SafepointGenerator safepoint_generator(",
          "2453:       this, pointers, Safepoint::kLazyDeopt);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2591:   }",
          "2597:   __ movq(rsi, Operand(rbp, StandardFrameConstants::kContextOffset));",
          "",
          "[Removed Lines]",
          "2594:   RegisterLazyDeoptimization(instr, RECORD_SIMPLE_SAFEPOINT, 0);",
          "",
          "[Added Lines]",
          "2531:   RecordSafepointWithLazyDeopt(instr, RECORD_SIMPLE_SAFEPOINT, 0);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2938:   ASSERT(instr->HasPointerMap());",
          "2939:   ASSERT(instr->HasDeoptimizationEnvironment());",
          "2940:   LPointerMap* pointers = instr->pointer_map();",
          "2942:   RecordPosition(pointers->position());",
          "2945:   ParameterCount count(instr->arity());",
          "2946:   __ InvokeFunction(rdi, count, CALL_FUNCTION, generator, CALL_AS_METHOD);",
          "2947:   __ movq(rsi, Operand(rbp, StandardFrameConstants::kContextOffset));",
          "",
          "[Removed Lines]",
          "2941:   LEnvironment* env = instr->deoptimization_environment();",
          "2943:   RegisterEnvironmentForDeoptimization(env);",
          "2944:   SafepointGenerator generator(this, pointers, env->deoptimization_index());",
          "",
          "[Added Lines]",
          "2879:   SafepointGenerator generator(this, pointers, Safepoint::kLazyDeopt);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "4037: }",
          "4040: void LCodeGen::DoLazyBailout(LLazyBailout* instr) {",
          "4043: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3975: void LCodeGen::EnsureSpaceForLazyDeopt(int space_needed) {",
          "3978:   int current_pc = masm()->pc_offset();",
          "3979:   if (current_pc < last_lazy_deopt_pc_ + space_needed) {",
          "3980:     int padding_size = last_lazy_deopt_pc_ + space_needed - current_pc;",
          "3981:     while (padding_size > 0) {",
          "3982:       int nop_size = padding_size > 9 ? 9 : padding_size;",
          "3983:       __ nop(nop_size);",
          "3984:       padding_size -= nop_size;",
          "3985:     }",
          "3986:   }",
          "3987: }",
          "3991:   EnsureSpaceForLazyDeopt(Deoptimizer::patch_size());",
          "3992:   last_lazy_deopt_pc_ = masm()->pc_offset();",
          "3993:   ASSERT(instr->HasEnvironment());",
          "3994:   LEnvironment* env = instr->environment();",
          "3995:   RegisterEnvironmentForDeoptimization(env, Safepoint::kLazyDeopt);",
          "3996:   safepoints_.RecordLazyDeoptimizationIndex(env->deoptimization_index());",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "4055:   EmitPushTaggedOperand(key);",
          "4056:   ASSERT(instr->HasPointerMap() && instr->HasDeoptimizationEnvironment());",
          "4057:   LPointerMap* pointers = instr->pointer_map();",
          "4059:   RecordPosition(pointers->position());",
          "4067:   __ Push(Smi::FromInt(strict_mode_flag()));",
          "4068:   __ InvokeBuiltin(Builtins::DELETE, CALL_FUNCTION, safepoint_generator);",
          "4069: }",
          "",
          "[Removed Lines]",
          "4058:   LEnvironment* env = instr->deoptimization_environment();",
          "4060:   RegisterEnvironmentForDeoptimization(env);",
          "4064:   SafepointGenerator safepoint_generator(this,",
          "4065:                                          pointers,",
          "4066:                                          env->deoptimization_index());",
          "",
          "[Added Lines]",
          "4016:   SafepointGenerator safepoint_generator(",
          "4017:       this, pointers, Safepoint::kLazyDeopt);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "4076:   EmitPushTaggedOperand(obj);",
          "4077:   ASSERT(instr->HasPointerMap() && instr->HasDeoptimizationEnvironment());",
          "4078:   LPointerMap* pointers = instr->pointer_map();",
          "4080:   RecordPosition(pointers->position());",
          "4088:   __ InvokeBuiltin(Builtins::IN, CALL_FUNCTION, safepoint_generator);",
          "4089: }",
          "4092: void LCodeGen::DoDeferredStackCheck(LStackCheck* instr) {",
          "4103: }",
          "",
          "[Removed Lines]",
          "4079:   LEnvironment* env = instr->deoptimization_environment();",
          "4081:   RegisterEnvironmentForDeoptimization(env);",
          "4085:   SafepointGenerator safepoint_generator(this,",
          "4086:                                          pointers,",
          "4087:                                          env->deoptimization_index());",
          "4093:   {",
          "4094:     PushSafepointRegistersScope scope(this);",
          "4095:     __ movq(rsi, Operand(rbp, StandardFrameConstants::kContextOffset));",
          "4096:     __ CallRuntimeSaveDoubles(Runtime::kStackGuard);",
          "4097:     RegisterLazyDeoptimization(instr, RECORD_SAFEPOINT_WITH_REGISTERS, 0);",
          "4098:   }",
          "4101:   int pc = masm()->pc_offset();",
          "4102:   safepoints_.SetPcAfterGap(pc);",
          "",
          "[Added Lines]",
          "4031:   SafepointGenerator safepoint_generator(",
          "4032:       this, pointers, Safepoint::kLazyDeopt);",
          "4038:   PushSafepointRegistersScope scope(this);",
          "4039:   __ movq(rsi, Operand(rbp, StandardFrameConstants::kContextOffset));",
          "4040:   __ CallRuntimeSaveDoubles(Runtime::kStackGuard);",
          "4041:   RecordSafepointWithLazyDeopt(instr, RECORD_SAFEPOINT_WITH_REGISTERS, 0);",
          "4042:   ASSERT(instr->HasEnvironment());",
          "4043:   LEnvironment* env = instr->environment();",
          "4044:   safepoints_.RecordLazyDeoptimizationIndex(env->deoptimization_index());",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "4113:     LStackCheck* instr_;",
          "4114:   };",
          "4116:   if (instr->hydrogen()->is_function_entry()) {",
          "4118:     Label done;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4058:   ASSERT(instr->HasEnvironment());",
          "4059:   LEnvironment* env = instr->environment();",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "4120:     __ j(above_equal, &done, Label::kNear);",
          "4121:     StackCheckStub stub;",
          "4122:     CallCode(stub.GetCode(), RelocInfo::CODE_TARGET, instr);",
          "4123:     __ bind(&done);",
          "4124:   } else {",
          "4125:     ASSERT(instr->hydrogen()->is_backwards_branch());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4069:     EnsureSpaceForLazyDeopt(Deoptimizer::patch_size());",
          "4070:     last_lazy_deopt_pc_ = masm()->pc_offset();",
          "4072:     RegisterEnvironmentForDeoptimization(env, Safepoint::kLazyDeopt);",
          "4073:     safepoints_.RecordLazyDeoptimizationIndex(env->deoptimization_index());",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "4128:         new DeferredStackCheck(this, instr);",
          "4129:     __ CompareRoot(rsp, Heap::kStackLimitRootIndex);",
          "4130:     __ j(below, deferred_stack_check->entry());",
          "4131:     __ bind(instr->done_label());",
          "4132:     deferred_stack_check->SetExit(instr->done_label());",
          "4133:   }",
          "4134: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4081:     EnsureSpaceForLazyDeopt(Deoptimizer::patch_size());",
          "4082:     last_lazy_deopt_pc_ = masm()->pc_offset();",
          "4085:     RegisterEnvironmentForDeoptimization(env, Safepoint::kLazyDeopt);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "4147:   ASSERT(!environment->HasBeenRegistered());",
          "4149:   ASSERT(osr_pc_offset_ == -1);",
          "4150:   osr_pc_offset_ = masm()->pc_offset();",
          "4151: }",
          "",
          "[Removed Lines]",
          "4148:   RegisterEnvironmentForDeoptimization(environment);",
          "",
          "[Added Lines]",
          "4104:   RegisterEnvironmentForDeoptimization(environment, Safepoint::kNoLazyDeopt);",
          "",
          "---------------"
        ],
        "deps/v8/src/x64/lithium-codegen-x64.h||deps/v8/src/x64/lithium-codegen-x64.h": [
          "File: deps/v8/src/x64/lithium-codegen-x64.h -> deps/v8/src/x64/lithium-codegen-x64.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:         status_(UNUSED),",
          "61:         deferred_(8),",
          "62:         osr_pc_offset_(-1),",
          "63:         resolver_(this),",
          "64:         expected_safepoint_kind_(Safepoint::kSimple) {",
          "65:     PopulateDeoptimizationLiteralsWithInlinedFunctions();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:         last_lazy_deopt_pc_(0),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:   void DoDeferredStackCheck(LStackCheck* instr);",
          "98:   void DoDeferredStringCharCodeAt(LStringCharCodeAt* instr);",
          "99:   void DoDeferredStringCharFromCode(LStringCharFromCode* instr);",
          "104:   void DoParallelMove(LParallelMove* move);",
          "",
          "[Removed Lines]",
          "100:   void DoDeferredLInstanceOfKnownGlobal(LInstanceOfKnownGlobal* instr,",
          "101:                                         Label* map_check);",
          "",
          "[Added Lines]",
          "101:   void DoDeferredInstanceOfKnownGlobal(LInstanceOfKnownGlobal* instr,",
          "102:                                        Label* map_check);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "134:   HGraph* graph() const { return chunk_->graph(); }",
          "136:   int GetNextEmittedBlock(int block);",
          "139:   void EmitClassOfTest(Label* if_true,",
          "140:                        Label* if_false,",
          "",
          "[Removed Lines]",
          "137:   LInstruction* GetNextInstruction();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "200:   void LoadHeapObject(Register result, Handle<HeapObject> object);",
          "206:   void DeoptimizeIf(Condition cc, LEnvironment* environment);",
          "208:   void AddToTranslation(Translation* translation,",
          "",
          "[Removed Lines]",
          "202:   void RegisterLazyDeoptimization(LInstruction* instr,",
          "203:                                   SafepointMode safepoint_mode,",
          "204:                                   int argc);",
          "205:   void RegisterEnvironmentForDeoptimization(LEnvironment* environment);",
          "",
          "[Added Lines]",
          "202:   void RecordSafepointWithLazyDeopt(LInstruction* instr,",
          "203:                                     SafepointMode safepoint_mode,",
          "204:                                     int argc);",
          "205:   void RegisterEnvironmentForDeoptimization(LEnvironment* environment,",
          "206:                                             Safepoint::DeoptMode mode);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "236:   void RecordSafepoint(LPointerMap* pointers,",
          "237:                        Safepoint::Kind kind,",
          "238:                        int arguments,",
          "242:   void RecordSafepointWithRegisters(LPointerMap* pointers,",
          "243:                                     int arguments,",
          "245:   void RecordPosition(int position);",
          "250:   static Condition TokenToCondition(Token::Value op, bool is_unsigned);",
          "251:   void EmitGoto(int block);",
          "",
          "[Removed Lines]",
          "239:                        int deoptimization_index);",
          "240:   void RecordSafepoint(LPointerMap* pointers, int deoptimization_index);",
          "241:   void RecordSafepoint(int deoptimization_index);",
          "244:                                     int deoptimization_index);",
          "246:   int LastSafepointEnd() {",
          "247:     return static_cast<int>(safepoints_.GetPcAfterGap());",
          "248:   }",
          "",
          "[Added Lines]",
          "240:                        Safepoint::DeoptMode mode);",
          "241:   void RecordSafepoint(LPointerMap* pointers, Safepoint::DeoptMode mode);",
          "242:   void RecordSafepoint(Safepoint::DeoptMode mode);",
          "245:                                     Safepoint::DeoptMode mode);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "290:     Address address;",
          "291:   };",
          "293:   LChunk* const chunk_;",
          "294:   MacroAssembler* const masm_;",
          "295:   CompilationInfo* const info_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "291:   void EnsureSpaceForLazyDeopt(int space_needed);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "306:   TranslationBuffer translations_;",
          "307:   ZoneList<LDeferredCode*> deferred_;",
          "308:   int osr_pc_offset_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "309:   int last_lazy_deopt_pc_;",
          "",
          "---------------"
        ],
        "deps/v8/test/mjsunit/compiler/regress-funcaller.js||deps/v8/test/mjsunit/compiler/regress-funcaller.js": [
          "File: deps/v8/test/mjsunit/compiler/regress-funcaller.js -> deps/v8/test/mjsunit/compiler/regress-funcaller.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: var o = new A();",
          "44:   o.g(i);",
          "45: }",
          "46: assertEquals(gee, o.g(0));",
          "47: assertEquals(null, o.g(1));",
          "",
          "[Removed Lines]",
          "43: for (var i=0; i<5000000; i++) {",
          "",
          "[Added Lines]",
          "45: for (var i=0; i<5; i++) {",
          "48: %OptimizeFunctionOnNextCall(o.g);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:   return o.g(x);",
          "54: }",
          "57:   hej(j);",
          "58: }",
          "59: assertEquals(gee, hej(0));",
          "60: assertEquals(hej, hej(1));",
          "",
          "[Removed Lines]",
          "56: for (var j=0; j<5000000; j++) {",
          "",
          "[Added Lines]",
          "59: for (var j=0; j<5; j++) {",
          "62: %OptimizeFunctionOnNextCall(hej);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "66:   return o.g(x);",
          "67: }",
          "70:   from_eval(j);",
          "71: }",
          "72: assertEquals(gee, from_eval(0));",
          "73: assertEquals(from_eval, from_eval(1));",
          "",
          "[Removed Lines]",
          "69: for (var j=0; j<5000000; j++) {",
          "",
          "[Added Lines]",
          "73: for (var j=0; j<5; j++) {",
          "76: %OptimizeFunctionOnNextCall(from_eval);",
          "",
          "---------------"
        ],
        "deps/v8/test/mjsunit/compiler/regress-lazy-deopt.js||deps/v8/test/mjsunit/compiler/regress-lazy-deopt.js": [
          "File: deps/v8/test/mjsunit/compiler/regress-lazy-deopt.js -> deps/v8/test/mjsunit/compiler/regress-lazy-deopt.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: function foo() { return 1; }",
          "34: function f(x, y) {",
          "35:   var a = [0];",
          "36:   if (x == 0) {",
          "37:     %DeoptimizeFunction(f);",
          "38:     return 1;",
          "39:   }",
          "40:   a[0] = %_CallFunction(null, x - 1, f);",
          "41:   return x >> a[0];",
          "42: }",
          "44: f(42);",
          "45: f(42);",
          "46: assertEquals(42, f(42));",
          "47: %OptimizeFunctionOnNextCall(f);",
          "48: assertEquals(42, f(42));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3deceaf6e7351bec3572554baaccef70747f35f8",
      "candidate_info": {
        "commit_hash": "3deceaf6e7351bec3572554baaccef70747f35f8",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/3deceaf6e7351bec3572554baaccef70747f35f8",
        "files": [
          "lib/module.js"
        ],
        "message": "Revert \"Process symlinked shared library as .node\"\n\nThis reverts commit 7e0bf7d57de318f45a097e05644efa49beb65209.\n\nIt's possible to make GYP generate an XCode project that produces a .node file,\nhence this commit is no longer needed.",
        "before_after_code_files": [
          "lib/module.js||limodule.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/module.js||limodule.js": [
          "File: lib/module.js -> limodule.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "467: };",
          "471: Module._extensions['.node'] = function(module, filename) {",
          "472:   process.dlopen(filename, module.exports);",
          "473: };",
          "477: Module.runMain = function() {",
          "",
          "[Removed Lines]",
          "474: Module._extensions['.dylib'] = Module._extensions['.node'];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}