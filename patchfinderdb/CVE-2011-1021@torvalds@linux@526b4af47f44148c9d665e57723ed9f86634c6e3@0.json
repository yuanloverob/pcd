{
  "cve_id": "CVE-2011-1021",
  "cve_desc": "drivers/acpi/debugfs.c in the Linux kernel before 3.0 allows local users to modify arbitrary kernel memory locations by leveraging root privileges to write to the /sys/kernel/debug/acpi/custom_method file. NOTE: this vulnerability exists because of an incomplete fix for CVE-2010-4347.",
  "repo": "torvalds/linux",
  "patch_hash": "526b4af47f44148c9d665e57723ed9f86634c6e3",
  "patch_info": {
    "commit_hash": "526b4af47f44148c9d665e57723ed9f86634c6e3",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/526b4af47f44148c9d665e57723ed9f86634c6e3",
    "files": [
      "Documentation/acpi/method-customizing.txt",
      "drivers/acpi/Kconfig",
      "drivers/acpi/Makefile",
      "drivers/acpi/custom_method.c",
      "drivers/acpi/debugfs.c"
    ],
    "message": "ACPI: Split out custom_method functionality into an own driver\n\nWith /sys/kernel/debug/acpi/custom_method root can write\nto arbitrary memory and increase his priveleges, even if\nthese are restricted.\n\n-> Make this an own debug .config option and warn about the\nsecurity issue in the config description.\n\n-> Still keep acpi/debugfs.c which now only creates an empty\n   /sys/kernel/debug/acpi directory. There might be other\n   users of it later.\n\nSigned-off-by: Thomas Renninger <trenn@suse.de>\nAcked-by: Rafael J. Wysocki <rjw@sisk.pl>\nAcked-by: rui.zhang@intel.com\nSigned-off-by: Len Brown <len.brown@intel.com>",
    "before_after_code_files": [
      "drivers/acpi/custom_method.c||drivers/acpi/custom_method.c",
      "drivers/acpi/debugfs.c||drivers/acpi/debugfs.c"
    ]
  },
  "patch_diff": {
    "drivers/acpi/custom_method.c||drivers/acpi/custom_method.c": [
      "File: drivers/acpi/custom_method.c -> drivers/acpi/custom_method.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5: #include <linux/init.h>",
      "6: #include <linux/module.h>",
      "7: #include <linux/kernel.h>",
      "8: #include <linux/uaccess.h>",
      "9: #include <linux/debugfs.h>",
      "10: #include <acpi/acpi_drivers.h>",
      "12: #include \"internal.h\"",
      "14: #define _COMPONENT  ACPI_SYSTEM_COMPONENT",
      "15: ACPI_MODULE_NAME(\"custom_method\");",
      "16: MODULE_LICENSE(\"GPL\");",
      "18: static struct dentry *cm_dentry;",
      "22: static ssize_t cm_write(struct file *file, const char __user * user_buf,",
      "23:    size_t count, loff_t *ppos)",
      "24: {",
      "25:  static char *buf;",
      "26:  static u32 max_size;",
      "27:  static u32 uncopied_bytes;",
      "29:  struct acpi_table_header table;",
      "30:  acpi_status status;",
      "32:  if (!(*ppos)) {",
      "34:   if (count <= sizeof(struct acpi_table_header))",
      "35:    return -EINVAL;",
      "36:   if (copy_from_user(&table, user_buf,",
      "37:        sizeof(struct acpi_table_header)))",
      "38:    return -EFAULT;",
      "39:   uncopied_bytes = max_size = table.length;",
      "40:   buf = kzalloc(max_size, GFP_KERNEL);",
      "41:   if (!buf)",
      "42:    return -ENOMEM;",
      "43:  }",
      "45:  if (buf == NULL)",
      "46:   return -EINVAL;",
      "48:  if ((*ppos > max_size) ||",
      "49:      (*ppos + count > max_size) ||",
      "50:      (*ppos + count < count) ||",
      "51:      (count > uncopied_bytes))",
      "52:   return -EINVAL;",
      "54:  if (copy_from_user(buf + (*ppos), user_buf, count)) {",
      "55:   kfree(buf);",
      "56:   buf = NULL;",
      "57:   return -EFAULT;",
      "58:  }",
      "60:  uncopied_bytes -= count;",
      "63:  if (!uncopied_bytes) {",
      "64:   status = acpi_install_method(buf);",
      "65:   kfree(buf);",
      "66:   buf = NULL;",
      "67:   if (ACPI_FAILURE(status))",
      "68:    return -EINVAL;",
      "69:   add_taint(TAINT_OVERRIDDEN_ACPI_TABLE);",
      "70:  }",
      "72:  return count;",
      "73: }",
      "75: static const struct file_operations cm_fops = {",
      "76:  .write = cm_write,",
      "77:  .llseek = default_llseek,",
      "78: };",
      "80: static int __init acpi_custom_method_init(void)",
      "81: {",
      "82:  if (acpi_debugfs_dir == NULL)",
      "83:   return -ENOENT;",
      "85:  cm_dentry = debugfs_create_file(\"custom_method\", S_IWUSR,",
      "86:      acpi_debugfs_dir, NULL, &cm_fops);",
      "87:  if (cm_dentry == NULL)",
      "88:   return -ENODEV;",
      "90:  return 0;",
      "91: }",
      "93: static void __exit acpi_custom_method_exit(void)",
      "94: {",
      "95:  if (cm_dentry)",
      "96:   debugfs_remove(cm_dentry);",
      "97:  }",
      "99: module_init(acpi_custom_method_init);",
      "100: module_exit(acpi_custom_method_exit);",
      "",
      "---------------"
    ],
    "drivers/acpi/debugfs.c||drivers/acpi/debugfs.c": [
      "File: drivers/acpi/debugfs.c -> drivers/acpi/debugfs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: #include <linux/init.h>",
      "9: #include <linux/debugfs.h>",
      "10: #include <acpi/acpi_drivers.h>",
      "",
      "[Removed Lines]",
      "6: #include <linux/module.h>",
      "7: #include <linux/kernel.h>",
      "8: #include <linux/uaccess.h>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "13: ACPI_MODULE_NAME(\"debugfs\");",
      "15: struct dentry *acpi_debugfs_dir;",
      "91: void __init acpi_debugfs_init(void)",
      "92: {",
      "93:  acpi_debugfs_dir = debugfs_create_dir(\"acpi\", NULL);",
      "96: }",
      "",
      "[Removed Lines]",
      "16: static struct dentry *cm_dentry;",
      "20: static ssize_t cm_write(struct file *file, const char __user * user_buf,",
      "21:    size_t count, loff_t *ppos)",
      "22: {",
      "23:  static char *buf;",
      "24:  static u32 max_size;",
      "25:  static u32 uncopied_bytes;",
      "27:  struct acpi_table_header table;",
      "28:  acpi_status status;",
      "30:  if (!(*ppos)) {",
      "32:   if (count <= sizeof(struct acpi_table_header))",
      "33:    return -EINVAL;",
      "34:   if (copy_from_user(&table, user_buf,",
      "35:        sizeof(struct acpi_table_header)))",
      "36:    return -EFAULT;",
      "37:   uncopied_bytes = max_size = table.length;",
      "38:   buf = kzalloc(max_size, GFP_KERNEL);",
      "39:   if (!buf)",
      "40:    return -ENOMEM;",
      "41:  }",
      "43:  if (buf == NULL)",
      "44:   return -EINVAL;",
      "46:  if ((*ppos > max_size) ||",
      "47:      (*ppos + count > max_size) ||",
      "48:      (*ppos + count < count) ||",
      "49:      (count > uncopied_bytes))",
      "50:   return -EINVAL;",
      "52:  if (copy_from_user(buf + (*ppos), user_buf, count)) {",
      "53:   kfree(buf);",
      "54:   buf = NULL;",
      "55:   return -EFAULT;",
      "56:  }",
      "58:  uncopied_bytes -= count;",
      "61:  if (!uncopied_bytes) {",
      "62:   status = acpi_install_method(buf);",
      "63:   kfree(buf);",
      "64:   buf = NULL;",
      "65:   if (ACPI_FAILURE(status))",
      "66:    return -EINVAL;",
      "67:   add_taint(TAINT_OVERRIDDEN_ACPI_TABLE);",
      "68:  }",
      "70:  return count;",
      "71: }",
      "73: static const struct file_operations cm_fops = {",
      "74:  .write = cm_write,",
      "75:  .llseek = default_llseek,",
      "76: };",
      "78: static int __init acpi_custom_method_init(void)",
      "79: {",
      "80:  if (!acpi_debugfs_dir)",
      "81:   return -ENOENT;",
      "83:  cm_dentry = debugfs_create_file(\"custom_method\", S_IWUSR,",
      "84:      acpi_debugfs_dir, NULL, &cm_fops);",
      "85:  if (!cm_dentry)",
      "86:   return -ENODEV;",
      "88:  return 0;",
      "89: }",
      "95:  acpi_custom_method_init();",
      "",
      "[Added Lines]",
      "13: EXPORT_SYMBOL_GPL(acpi_debugfs_dir);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "aecad432fd68dafa5b3b497c4816fbfce6fd4066",
      "candidate_info": {
        "commit_hash": "aecad432fd68dafa5b3b497c4816fbfce6fd4066",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/aecad432fd68dafa5b3b497c4816fbfce6fd4066",
        "files": [
          "drivers/acpi/debugfs.c",
          "drivers/acpi/internal.h",
          "drivers/acpi/sysfs.c"
        ],
        "message": "ACPI: Cleanup custom_method debug stuff\n\n- Move param aml_debug_output to other params into sysfs.c\n- Split acpi_debugfs_init to prepare custom_method to be\n  an own .config option and driver.\n\nSigned-off-by: Thomas Renninger <trenn@suse.de>\nAcked-by: Rafael J. Wysocki <rjw@sisk.pl>\nAcked-by: rui.zhang@intel.com\nSigned-off-by: Len Brown <len.brown@intel.com>",
        "before_after_code_files": [
          "drivers/acpi/debugfs.c||drivers/acpi/debugfs.c",
          "drivers/acpi/internal.h||drivers/acpi/internal.h",
          "drivers/acpi/sysfs.c||drivers/acpi/sysfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/acpi/debugfs.c||drivers/acpi/debugfs.c"
          ],
          "candidate": [
            "drivers/acpi/debugfs.c||drivers/acpi/debugfs.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/acpi/debugfs.c||drivers/acpi/debugfs.c": [
          "File: drivers/acpi/debugfs.c -> drivers/acpi/debugfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #define _COMPONENT  ACPI_SYSTEM_COMPONENT",
          "13: ACPI_MODULE_NAME(\"debugfs\");",
          "",
          "[Removed Lines]",
          "18: module_param_named(aml_debug_output, acpi_gbl_enable_aml_debug_object,",
          "19:      bool, 0644);",
          "20: MODULE_PARM_DESC(aml_debug_output,",
          "21:    \"To enable/disable the ACPI Debug Object output.\");",
          "",
          "[Added Lines]",
          "15: struct dentry *acpi_debugfs_dir;",
          "16: static struct dentry *cm_dentry;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:  .llseek = default_llseek,",
          "81: };",
          "84: {",
          "91:  cm_dentry = debugfs_create_file(\"custom_method\", S_IWUSR,",
          "93:  if (!cm_dentry)",
          "96:  return 0;",
          "102: }",
          "",
          "[Removed Lines]",
          "83: int __init acpi_debugfs_init(void)",
          "85:  struct dentry *acpi_dir, *cm_dentry;",
          "87:  acpi_dir = debugfs_create_dir(\"acpi\", NULL);",
          "88:  if (!acpi_dir)",
          "89:   goto err;",
          "92:      acpi_dir, NULL, &cm_fops);",
          "94:   goto err;",
          "98: err:",
          "99:  if (acpi_dir)",
          "100:   debugfs_remove(acpi_dir);",
          "101:  return -EINVAL;",
          "",
          "[Added Lines]",
          "78: static int __init acpi_custom_method_init(void)",
          "80:  if (!acpi_debugfs_dir)",
          "81:   return -ENOENT;",
          "84:      acpi_debugfs_dir, NULL, &cm_fops);",
          "86:   return -ENODEV;",
          "89: }",
          "91: void __init acpi_debugfs_init(void)",
          "92: {",
          "93:  acpi_debugfs_dir = debugfs_create_dir(\"acpi\", NULL);",
          "95:  acpi_custom_method_init();",
          "",
          "---------------"
        ],
        "drivers/acpi/internal.h||drivers/acpi/internal.h": [
          "File: drivers/acpi/internal.h -> drivers/acpi/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: int acpi_sysfs_init(void);",
          "30: #ifdef CONFIG_DEBUG_FS",
          "31: int acpi_debugfs_init(void);",
          "32: #else",
          "34: #endif",
          "",
          "[Removed Lines]",
          "33: static inline int acpi_debugfs_init(void) { return 0; }",
          "",
          "[Added Lines]",
          "31: extern struct dentry *acpi_debugfs_dir;",
          "34: static inline void acpi_debugfs_init(void) { return; }",
          "",
          "---------------"
        ],
        "drivers/acpi/sysfs.c||drivers/acpi/sysfs.c": [
          "File: drivers/acpi/sysfs.c -> drivers/acpi/sysfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "220:     NULL, 0644);",
          "224: static int param_get_acpica_version(char *buffer, struct kernel_param *kp)",
          "225: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "226: module_param_named(aml_debug_output, acpi_gbl_enable_aml_debug_object,",
          "227:      bool, 0644);",
          "228: MODULE_PARM_DESC(aml_debug_output,",
          "229:    \"To enable/disable the ACPI Debug Object output.\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a25ee9200eef07377e1703697afbb5d81f89e500",
      "candidate_info": {
        "commit_hash": "a25ee9200eef07377e1703697afbb5d81f89e500",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/a25ee9200eef07377e1703697afbb5d81f89e500",
        "files": [
          "drivers/acpi/Makefile",
          "drivers/acpi/bus.c",
          "drivers/acpi/debug.c",
          "drivers/acpi/debugfs.c",
          "drivers/acpi/internal.h"
        ],
        "message": "ACPI: introduce drivers/acpi/debugfs.c\n\nIntroduce drivers/acpi/debugfs.c.\n\nCode for ACPI debugfs I/F,\ni.e. /sys/kernel/debug/acpi/custom_method,\nis moved to this file.\n\nAnd make ACPI debugfs always built in,\neven if CONFIG_ACPI_DEBUG is cleared.\n\nBTW:this adds about 400bytes code to ACPI, when\nCONFIG_ACPI_DEBUG is cleared.\n\n[uaccess.h build fix from Andrew Morton <akpm@linux-foundation.org>]\n\nSigned-off-by: Zhang Rui <rui.zhang@intel.com>\nSigned-off-by: Len Brown <len.brown@intel.com>",
        "before_after_code_files": [
          "drivers/acpi/bus.c||drivers/acpi/bus.c",
          "drivers/acpi/debug.c||drivers/acpi/debug.c",
          "drivers/acpi/debugfs.c||drivers/acpi/debugfs.c",
          "drivers/acpi/internal.h||drivers/acpi/internal.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/acpi/debugfs.c||drivers/acpi/debugfs.c"
          ],
          "candidate": [
            "drivers/acpi/debugfs.c||drivers/acpi/debugfs.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/acpi/bus.c||drivers/acpi/bus.c": [
          "File: drivers/acpi/bus.c -> drivers/acpi/bus.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1036:  acpi_power_init();",
          "1037:  acpi_system_init();",
          "1038:  acpi_debug_init();",
          "1039:  acpi_sleep_proc_init();",
          "1040:  acpi_wakeup_device_init();",
          "1041:  return result;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1039:  acpi_debugfs_init();",
          "",
          "---------------"
        ],
        "drivers/acpi/debug.c||drivers/acpi/debug.c": [
          "File: drivers/acpi/debug.c -> drivers/acpi/debug.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "197: module_param_call(trace_state, param_set_trace_state, param_get_trace_state,",
          "198:     NULL, 0644);",
          "275:                               FS Interface (/proc)",
          "",
          "[Removed Lines]",
          "201:     DebugFS Interface",
          "204: static ssize_t cm_write(struct file *file, const char __user *user_buf,",
          "205:    size_t count, loff_t *ppos)",
          "206: {",
          "207:  static char *buf;",
          "208:  static int uncopied_bytes;",
          "209:  struct acpi_table_header table;",
          "210:  acpi_status status;",
          "212:  if (!(*ppos)) {",
          "214:   if (count <= sizeof(struct acpi_table_header))",
          "215:    return -EINVAL;",
          "216:   if (copy_from_user(&table, user_buf,",
          "217:    sizeof(struct acpi_table_header)))",
          "218:    return -EFAULT;",
          "219:   uncopied_bytes = table.length;",
          "220:   buf = kzalloc(uncopied_bytes, GFP_KERNEL);",
          "221:   if (!buf)",
          "222:    return -ENOMEM;",
          "223:  }",
          "225:  if (uncopied_bytes < count) {",
          "226:   kfree(buf);",
          "227:   return -EINVAL;",
          "228:  }",
          "230:  if (copy_from_user(buf + (*ppos), user_buf, count)) {",
          "231:   kfree(buf);",
          "232:   return -EFAULT;",
          "233:  }",
          "235:  uncopied_bytes -= count;",
          "238:  if (!uncopied_bytes) {",
          "239:   status = acpi_install_method(buf);",
          "240:   kfree(buf);",
          "241:   if (ACPI_FAILURE(status))",
          "242:    return -EINVAL;",
          "243:   add_taint(TAINT_OVERRIDDEN_ACPI_TABLE);",
          "244:  }",
          "246:  return count;",
          "247: }",
          "249: static const struct file_operations cm_fops = {",
          "250:  .write = cm_write,",
          "251: };",
          "253: static int acpi_debugfs_init(void)",
          "254: {",
          "255:  struct dentry *acpi_dir, *cm_dentry;",
          "257:  acpi_dir = debugfs_create_dir(\"acpi\", NULL);",
          "258:  if (!acpi_dir)",
          "259:   goto err;",
          "261:  cm_dentry = debugfs_create_file(\"custom_method\", S_IWUGO,",
          "262:      acpi_dir, NULL, &cm_fops);",
          "263:  if (!cm_dentry)",
          "264:   goto err;",
          "266:  return 0;",
          "268: err:",
          "269:  if (acpi_dir)",
          "270:   debugfs_remove(acpi_dir);",
          "271:  return -EINVAL;",
          "272: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "401: int __init acpi_debug_init(void)",
          "402: {",
          "404:  acpi_procfs_init();",
          "405:  return 0;",
          "406: }",
          "",
          "[Removed Lines]",
          "403:  acpi_debugfs_init();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "drivers/acpi/debugfs.c||drivers/acpi/debugfs.c": [
          "File: drivers/acpi/debugfs.c -> drivers/acpi/debugfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #include <linux/init.h>",
          "6: #include <linux/module.h>",
          "7: #include <linux/kernel.h>",
          "8: #include <linux/uaccess.h>",
          "9: #include <linux/debugfs.h>",
          "10: #include <acpi/acpi_drivers.h>",
          "12: #define _COMPONENT  ACPI_SYSTEM_COMPONENT",
          "13: ACPI_MODULE_NAME(\"debugfs\");",
          "17: static ssize_t cm_write(struct file *file, const char __user * user_buf,",
          "18:    size_t count, loff_t *ppos)",
          "19: {",
          "20:  static char *buf;",
          "21:  static int uncopied_bytes;",
          "22:  struct acpi_table_header table;",
          "23:  acpi_status status;",
          "25:  if (!(*ppos)) {",
          "27:   if (count <= sizeof(struct acpi_table_header))",
          "28:    return -EINVAL;",
          "29:   if (copy_from_user(&table, user_buf,",
          "30:        sizeof(struct acpi_table_header)))",
          "31:    return -EFAULT;",
          "32:   uncopied_bytes = table.length;",
          "33:   buf = kzalloc(uncopied_bytes, GFP_KERNEL);",
          "34:   if (!buf)",
          "35:    return -ENOMEM;",
          "36:  }",
          "38:  if (uncopied_bytes < count) {",
          "39:   kfree(buf);",
          "40:   return -EINVAL;",
          "41:  }",
          "43:  if (copy_from_user(buf + (*ppos), user_buf, count)) {",
          "44:   kfree(buf);",
          "45:   return -EFAULT;",
          "46:  }",
          "48:  uncopied_bytes -= count;",
          "51:  if (!uncopied_bytes) {",
          "52:   status = acpi_install_method(buf);",
          "53:   kfree(buf);",
          "54:   if (ACPI_FAILURE(status))",
          "55:    return -EINVAL;",
          "56:   add_taint(TAINT_OVERRIDDEN_ACPI_TABLE);",
          "57:  }",
          "59:  return count;",
          "60: }",
          "62: static const struct file_operations cm_fops = {",
          "63:  .write = cm_write,",
          "64: };",
          "66: int __init acpi_debugfs_init(void)",
          "67: {",
          "68:  struct dentry *acpi_dir, *cm_dentry;",
          "70:  acpi_dir = debugfs_create_dir(\"acpi\", NULL);",
          "71:  if (!acpi_dir)",
          "72:   goto err;",
          "74:  cm_dentry = debugfs_create_file(\"custom_method\", S_IWUGO,",
          "75:      acpi_dir, NULL, &cm_fops);",
          "76:  if (!cm_dentry)",
          "77:   goto err;",
          "79:  return 0;",
          "81: err:",
          "82:  if (acpi_dir)",
          "83:   debugfs_remove(acpi_dir);",
          "84:  return -EINVAL;",
          "85: }",
          "",
          "---------------"
        ],
        "drivers/acpi/internal.h||drivers/acpi/internal.h": [
          "File: drivers/acpi/internal.h -> drivers/acpi/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: static inline int acpi_debug_init(void) { return 0; }",
          "31: #endif",
          "34:                                   Power Resource",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #ifdef CONFIG_DEBUG_FS",
          "34: int acpi_debugfs_init(void);",
          "35: #else",
          "36: static inline int acpi_debugfs_init(void) { return 0; }",
          "37: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}