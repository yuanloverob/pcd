{
  "cve_id": "CVE-2019-10664",
  "cve_desc": "Domoticz before 4.10578 allows SQL Injection via the idx parameter in CWebServer::GetFloorplanImage in WebServer.cpp.",
  "repo": "domoticz/domoticz",
  "patch_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
  "patch_info": {
    "commit_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/ee70db46f81afa582c96b887b73bcd2a86feda00",
    "files": [
      "main/WebServer.cpp"
    ],
    "message": "Fixed possible SQL Injection Vulnerability (Thanks to Fabio Carretto!)",
    "before_after_code_files": [
      "main/WebServer.cpp||main/WebServer.cpp"
    ]
  },
  "patch_diff": {
    "main/WebServer.cpp||main/WebServer.cpp": [
      "File: main/WebServer.cpp -> main/WebServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10772:     return;",
      "10773:    }",
      "10774:    std::vector<std::vector<std::string> > result;",
      "10776:    if (result.empty())",
      "10777:     return;",
      "10778:    reply::set_content(&rep, result[0][0].begin(), result[0][0].end());",
      "",
      "[Removed Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%s\", idx.c_str());",
      "",
      "[Added Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%d\", atol(idx.c_str()));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5f13ca13451bc0a7535d0f093ca4680165c7f93f",
      "candidate_info": {
        "commit_hash": "5f13ca13451bc0a7535d0f093ca4680165c7f93f",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/5f13ca13451bc0a7535d0f093ca4680165c7f93f",
        "files": [
          "hardware/ASyncTCP.cpp",
          "hardware/ASyncTCP.h"
        ],
        "message": "ASyncTCP, added uint8_t write function back in public declaration",
        "before_after_code_files": [
          "hardware/ASyncTCP.cpp||hardware/ASyncTCP.cpp",
          "hardware/ASyncTCP.h||hardware/ASyncTCP.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/ASyncTCP.cpp||hardware/ASyncTCP.cpp": [
          "File: hardware/ASyncTCP.cpp -> hardware/ASyncTCP.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "303:  }",
          "304: }",
          "307: {",
          "308:  if(!mIsConnected) return;",
          "",
          "[Removed Lines]",
          "306: void ASyncTCP::write(const unsigned char *pData, size_t length)",
          "",
          "[Added Lines]",
          "306: void ASyncTCP::write(const uint8_t *pData, size_t length)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "318: void ASyncTCP::write(const std::string &msg)",
          "319: {",
          "321: }",
          "323: void ASyncTCP::do_close()",
          "",
          "[Removed Lines]",
          "320:  write((const unsigned char*)msg.c_str(), msg.size());",
          "",
          "[Added Lines]",
          "320:  write((const uint8_t*)msg.c_str(), msg.size());",
          "",
          "---------------"
        ],
        "hardware/ASyncTCP.h||hardware/ASyncTCP.h": [
          "File: hardware/ASyncTCP.h -> hardware/ASyncTCP.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:  ASyncTCP();",
          "17:  virtual ~ASyncTCP(void);",
          "21:  void connect(const std::string &ip, unsigned short port);",
          "22:  void connect(boost::asio::ip::tcp::endpoint& endpoint);",
          "24:  void disconnect();",
          "28:  void update();",
          "29: protected:",
          "",
          "[Removed Lines]",
          "19:  void write(const std::string &msg);",
          "26:  bool isConnected(){ return mIsConnected; };",
          "",
          "[Added Lines]",
          "22:  bool isConnected() { return mIsConnected; };",
          "24:  void write(const std::string &msg);",
          "25:  void write(const uint8_t *pData, size_t length);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:  void handle_connect(const boost::system::error_code& error);",
          "36:  void handle_read(const boost::system::error_code& error, size_t bytes_transferred);",
          "37:  void write_end(const boost::system::error_code& error);",
          "40:  void do_close();",
          "42:  void do_reconnect(const boost::system::error_code& error);",
          "",
          "[Removed Lines]",
          "39:  void write(const unsigned char *pData, size_t length);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e98c851e05fe9f58125fbca31c3816c8ebeabd39",
      "candidate_info": {
        "commit_hash": "e98c851e05fe9f58125fbca31c3816c8ebeabd39",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/e98c851e05fe9f58125fbca31c3816c8ebeabd39",
        "files": [
          "main/SQLHelper.cpp",
          "main/SQLHelper.h"
        ],
        "message": "Added CloseDatabase function in SQLHelper",
        "before_after_code_files": [
          "main/SQLHelper.cpp||main/SQLHelper.cpp",
          "main/SQLHelper.h||main/SQLHelper.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/SQLHelper.cpp||main/SQLHelper.cpp": [
          "File: main/SQLHelper.cpp -> main/SQLHelper.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "670:   m_background_task_thread->join();",
          "671:   m_background_task_thread.reset();",
          "672:  }",
          "679: }",
          "681: bool CSQLHelper::OpenDatabase()",
          "",
          "[Removed Lines]",
          "673:  if (m_dbase != NULL)",
          "674:  {",
          "675:   OptimizeDatabase(m_dbase);",
          "676:   sqlite3_close(m_dbase);",
          "677:   m_dbase = NULL;",
          "678:  }",
          "",
          "[Added Lines]",
          "673:  CloseDatabase();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3037:  return true;",
          "3038: }",
          "3040: bool CSQLHelper::StartThread()",
          "3041: {",
          "3042:  m_background_task_thread = std::make_shared<std::thread>(&CSQLHelper::Do_Work, this);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3035: void CSQLHelper::CloseDatabase()",
          "3036: {",
          "3037:  std::lock_guard<std::mutex> l(m_sqlQueryMutex);",
          "3038:  if (m_dbase != NULL)",
          "3039:  {",
          "3040:   OptimizeDatabase(m_dbase);",
          "3041:   sqlite3_close(m_dbase);",
          "3042:   m_dbase = NULL;",
          "3043:  }",
          "3044: }",
          "",
          "---------------"
        ],
        "main/SQLHelper.h||main/SQLHelper.h": [
          "File: main/SQLHelper.h -> main/SQLHelper.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "285:  CSQLHelper(void);",
          "286:  ~CSQLHelper(void);",
          "289:  void SetDatabaseName(const std::string &DBName);",
          "293:  bool RestoreDatabase(const std::string &dbase);",
          "",
          "[Removed Lines]",
          "288:  bool OpenDatabase();",
          "291:  bool BackupDatabase(const std::string &OutputFile);",
          "",
          "[Added Lines]",
          "290:  bool OpenDatabase();",
          "291:  void CloseDatabase();",
          "293:  bool BackupDatabase(const std::string &OutputFile);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3b529af766e2112890cac2d74e743b4dcc1543b3",
      "candidate_info": {
        "commit_hash": "3b529af766e2112890cac2d74e743b4dcc1543b3",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/3b529af766e2112890cac2d74e743b4dcc1543b3",
        "files": [
          "hardware/MySensorsBase.cpp"
        ],
        "message": "Fixed MySensors IR switching",
        "before_after_code_files": [
          "hardware/MySensorsBase.cpp||hardware/MySensorsBase.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/MySensorsBase.cpp||hardware/MySensorsBase.cpp": [
          "File: hardware/MySensorsBase.cpp -> hardware/MySensorsBase.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1391:  {",
          "1393:   const _tGeneralSwitch *pSwitch = reinterpret_cast<const _tGeneralSwitch*>(pdata);",
          "1399:   {",
          "1411:    {",
          "1418:     {",
          "1421:     }",
          "1428:     {",
          "1431:     }",
          "1433:     {",
          "1436:     }",
          "1438:     {",
          "1441:     }",
          "1442:    }",
          "1446:    }",
          "1447:   }",
          "1451:   }",
          "1452:  }",
          "1453:  else if (packettype == pTypeColorSwitch)",
          "",
          "[Removed Lines]",
          "1395:   int node_id = pSwitch->id;",
          "1396:   int child_sensor_id = pSwitch->unitcode;",
          "1398:   if (_tMySensorNode *pNode = FindNode(node_id))",
          "1400:    _tMySensorChild *pChild = pNode->FindChild(child_sensor_id);",
          "1401:    if (!pChild)",
          "1402:    {",
          "1403:     _log.Log(LOG_ERROR, \"MySensors: Light command received for unknown node_id: %d, child_id: %d\", node_id, child_sensor_id);",
          "1404:     return false;",
          "1405:    }",
          "1407:    int level = pSwitch->level;",
          "1408:    int cmnd = pSwitch->cmnd;",
          "1410:    if (cmnd == gswitch_sSetLevel)",
          "1413:     if (level == 0)",
          "1414:      cmnd = gswitch_sOff;",
          "1415:     else if (level == 255)",
          "1416:      cmnd = gswitch_sOn;",
          "1417:     else",
          "1420:      level = (level > 100) ? 100 : level;",
          "1422:    }",
          "1424:    if ((cmnd == gswitch_sOn) || (cmnd == gswitch_sOff))",
          "1425:    {",
          "1426:     std::string lState = (cmnd == gswitch_sOn) ? \"1\" : \"0\";",
          "1427:     if (pChild->presType == S_LOCK)",
          "1430:      return SendNodeSetCommand(node_id, child_sensor_id, MT_Set, V_LOCK_STATUS, lState, pChild->useAck, pChild->ackTimeout);",
          "1432:     else if (pChild->presType == S_SCENE_CONTROLLER)",
          "1435:      return SendNodeSetCommand(node_id, child_sensor_id, MT_Set, (cmnd == gswitch_sOn) ? V_SCENE_ON : V_SCENE_OFF, lState, pChild->useAck, pChild->ackTimeout);",
          "1437:     else",
          "1440:      return SendNodeSetCommand(node_id, child_sensor_id, MT_Set, V_STATUS, lState, pChild->useAck, pChild->ackTimeout);",
          "1443:    else if (cmnd == gswitch_sSetLevel)",
          "1444:    {",
          "1445:     return SendNodeSetCommand(node_id, child_sensor_id, MT_Set, V_PERCENTAGE, std::to_string(level), pChild->useAck, pChild->ackTimeout);",
          "1448:   else {",
          "1449:    _log.Log(LOG_ERROR, \"MySensors: Light command received for unknown node_id: %d\", node_id);",
          "1450:    return false;",
          "",
          "[Added Lines]",
          "1394:   if (pSwitch->subtype != sSwitchTypeMDREMOTE)",
          "1396:    int node_id = pSwitch->id;",
          "1397:    int child_sensor_id = pSwitch->unitcode;",
          "1399:    if (_tMySensorNode *pNode = FindNode(node_id))",
          "1401:     _tMySensorChild *pChild = pNode->FindChild(child_sensor_id);",
          "1402:     if (!pChild)",
          "1404:      _log.Log(LOG_ERROR, \"MySensors: Light command received for unknown node_id: %d, child_id: %d\", node_id, child_sensor_id);",
          "1405:      return false;",
          "1408:     int level = pSwitch->level;",
          "1409:     int cmnd = pSwitch->cmnd;",
          "1411:     if (cmnd == gswitch_sSetLevel)",
          "1414:      if (level == 0)",
          "1415:       cmnd = gswitch_sOff;",
          "1416:      else if (level == 255)",
          "1417:       cmnd = gswitch_sOn;",
          "1418:      else",
          "1419:      {",
          "1421:       level = (level > 100) ? 100 : level;",
          "1422:      }",
          "1425:     if ((cmnd == gswitch_sOn) || (cmnd == gswitch_sOff))",
          "1427:      std::string lState = (cmnd == gswitch_sOn) ? \"1\" : \"0\";",
          "1428:      if (pChild->presType == S_LOCK)",
          "1429:      {",
          "1431:       return SendNodeSetCommand(node_id, child_sensor_id, MT_Set, V_LOCK_STATUS, lState, pChild->useAck, pChild->ackTimeout);",
          "1432:      }",
          "1433:      else if (pChild->presType == S_SCENE_CONTROLLER)",
          "1434:      {",
          "1436:       return SendNodeSetCommand(node_id, child_sensor_id, MT_Set, (cmnd == gswitch_sOn) ? V_SCENE_ON : V_SCENE_OFF, lState, pChild->useAck, pChild->ackTimeout);",
          "1437:      }",
          "1438:      else",
          "1439:      {",
          "1441:       return SendNodeSetCommand(node_id, child_sensor_id, MT_Set, V_STATUS, lState, pChild->useAck, pChild->ackTimeout);",
          "1442:      }",
          "1444:     else if (cmnd == gswitch_sSetLevel)",
          "1446:      return SendNodeSetCommand(node_id, child_sensor_id, MT_Set, V_PERCENTAGE, std::to_string(level), pChild->useAck, pChild->ackTimeout);",
          "1449:    else {",
          "1450:     _log.Log(LOG_ERROR, \"MySensors: Light command received for unknown node_id: %d\", node_id);",
          "1451:     return false;",
          "1454:   else",
          "1455:   {",
          "1457:    int node_id = pSwitch->unitcode;",
          "1458:    unsigned int ir_code = pSwitch->id;",
          "1460:    if (_tMySensorNode *pNode = FindNode(node_id))",
          "1461:    {",
          "1462:     _tMySensorChild* pChild = pNode->FindChildByValueType(V_IR_RECEIVE);",
          "1463:     if (pChild)",
          "1464:     {",
          "1465:      return SendNodeSetCommand(node_id, pChild->childID, MT_Set, V_IR_SEND, std::to_string(ir_code), pChild->useAck, pChild->ackTimeout);",
          "1466:     }",
          "1467:    }",
          "1468:    else {",
          "1469:     _log.Log(LOG_ERROR, \"MySensors: Blinds/Window command received for unknown node_id: %d\", node_id);",
          "1470:     return false;",
          "1471:    }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1601:    return false;",
          "1602:   }",
          "1603:  }",
          "1625:  else",
          "1626:  {",
          "1627:   _log.Log(LOG_ERROR, \"MySensors: Unknown action received\");",
          "",
          "[Removed Lines]",
          "1604:  else if (packettype == pTypeGeneralSwitch)",
          "1605:  {",
          "1607:   const _tGeneralSwitch *pSwitch = reinterpret_cast<const _tGeneralSwitch *>(pCmd);",
          "1609:   int node_id = pSwitch->unitcode;",
          "1610:   unsigned int ir_code = pSwitch->id;",
          "1612:   if (_tMySensorNode *pNode = FindNode(node_id))",
          "1613:   {",
          "1614:    _tMySensorChild* pChild = pNode->FindChildByValueType(V_IR_RECEIVE);",
          "1615:    if (pChild)",
          "1616:    {",
          "1617:     return SendNodeSetCommand(node_id, pChild->childID, MT_Set, V_IR_SEND, std::to_string(ir_code), pChild->useAck, pChild->ackTimeout);",
          "1618:    }",
          "1619:   }",
          "1620:   else {",
          "1621:    _log.Log(LOG_ERROR, \"MySensors: Blinds/Window command received for unknown node_id: %d\", node_id);",
          "1622:    return false;",
          "1623:   }",
          "1624:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "552215448934b329b0748df8b4003d7a165c7237",
      "candidate_info": {
        "commit_hash": "552215448934b329b0748df8b4003d7a165c7237",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/552215448934b329b0748df8b4003d7a165c7237",
        "files": [
          "hardware/DomoticzHardware.cpp",
          "hardware/DomoticzHardware.h",
          "hardware/HardwareMonitor.cpp",
          "hardware/HardwareMonitor.h",
          "hardware/Winddelen.cpp",
          "hardware/Winddelen.h"
        ],
        "message": "Winddelen, using new API URL now, and including some more sensors",
        "before_after_code_files": [
          "hardware/DomoticzHardware.cpp||hardware/DomoticzHardware.cpp",
          "hardware/DomoticzHardware.h||hardware/DomoticzHardware.h",
          "hardware/HardwareMonitor.cpp||hardware/HardwareMonitor.cpp",
          "hardware/HardwareMonitor.h||hardware/HardwareMonitor.h",
          "hardware/Winddelen.cpp||hardware/Winddelen.cpp",
          "hardware/Winddelen.h||hardware/Winddelen.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/DomoticzHardware.cpp||hardware/DomoticzHardware.cpp": [
          "File: hardware/DomoticzHardware.cpp -> hardware/DomoticzHardware.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "730:  sDecodeRXMessage(this, (const unsigned char *)&gDevice, defaultname.c_str(), BatteryLevel);",
          "731: }",
          "734: {",
          "736:  _tGeneralDevice gDevice;",
          "737:  gDevice.subtype = sTypeCustom;",
          "738:  gDevice.id = ChildID;",
          "739:  gDevice.intval1 = (NodeID << 8) | ChildID;",
          "742:  char szTmp[9];",
          "743:  sprintf(szTmp, \"%08X\", gDevice.intval1);",
          "",
          "[Removed Lines]",
          "733: void CDomoticzHardwareBase::SendCustomSensor(const int NodeID, const uint8_t ChildID, const int BatteryLevel, const float Dust, const std::string &defaultname, const std::string &defaultLabel)",
          "740:  gDevice.floatval1 = Dust;",
          "",
          "[Added Lines]",
          "733: void CDomoticzHardwareBase::SendCustomSensor(const int NodeID, const uint8_t ChildID, const int BatteryLevel, const float CustomValue, const std::string &defaultname, const std::string &defaultLabel)",
          "740:  gDevice.floatval1 = CustomValue;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "912:  sDecodeRXMessage(this, (const unsigned char *)&gDevice, defaultname.c_str(), BatteryLevel);",
          "913: }",
          "915: int CDomoticzHardwareBase::CalculateBaroForecast(const double pressure)",
          "916: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "915: void CDomoticzHardwareBase::SendFanSensor(const int Idx, const int BatteryLevel, const int FanSpeed, const std::string &defaultname)",
          "916: {",
          "917:  _tGeneralDevice gDevice;",
          "918:  gDevice.subtype = sTypeFan;",
          "919:  gDevice.id = 1;",
          "920:  gDevice.intval1 = Idx;",
          "921:  gDevice.intval2 = FanSpeed;",
          "922:  sDecodeRXMessage(this, (const unsigned char *)&gDevice, defaultname.c_str(), BatteryLevel);",
          "923: }",
          "",
          "---------------"
        ],
        "hardware/DomoticzHardware.h||hardware/DomoticzHardware.h": [
          "File: hardware/DomoticzHardware.h -> hardware/DomoticzHardware.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:  void SendTextSensor(const int NodeID, const int ChildID, const int BatteryLevel, const std::string &textMessage, const std::string &defaultname);",
          "91:  std::string GetTextSensorText(const int NodeID, const int ChildID, bool &bExists);",
          "92:  bool CheckPercentageSensorExists(const int NodeID, const int ChildID);",
          "94:  void SendZWaveAlarmSensor(const int NodeID, const uint8_t InstanceID, const int BatteryLevel, const uint8_t aType, const int aValue, const std::string &defaultname);",
          "96:  int m_iHBCounter = { 0 };",
          "97:  std::mutex readQueueMutex;",
          "",
          "[Removed Lines]",
          "93:  void SendCustomSensor(const int NodeID, const uint8_t ChildID, const int BatteryLevel, const float Dust, const std::string &defaultname, const std::string &defaultLabel);",
          "",
          "[Added Lines]",
          "93:  void SendCustomSensor(const int NodeID, const uint8_t ChildID, const int BatteryLevel, const float CustomValue, const std::string &defaultname, const std::string &defaultLabel);",
          "95:  void SendFanSensor(const int Idx, const int BatteryLevel, const int FanSpeed, const std::string &defaultname);",
          "",
          "---------------"
        ],
        "hardware/HardwareMonitor.cpp||hardware/HardwareMonitor.cpp": [
          "File: hardware/HardwareMonitor.cpp -> hardware/HardwareMonitor.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "225:  sDecodeRXMessage(this, (const unsigned char *)&gDevice, defaultname.c_str(), 255);",
          "226: }",
          "238: void CHardwareMonitor::GetInternalTemperature()",
          "239: {",
          "240:  int returncode = 0;",
          "",
          "[Removed Lines]",
          "228: void CHardwareMonitor::SendFanSensor(const int Idx, const int FanSpeed, const std::string &defaultname)",
          "229: {",
          "230:  _tGeneralDevice gDevice;",
          "231:  gDevice.subtype = sTypeFan;",
          "232:  gDevice.id = 1;",
          "233:  gDevice.intval1 = static_cast<int>(Idx);",
          "234:  gDevice.intval2 = FanSpeed;",
          "235:  sDecodeRXMessage(this, (const unsigned char *)&gDevice, defaultname.c_str(), 255);",
          "236: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "355:  {",
          "356:   doffset = 1200;",
          "357:   int fanspeed = atoi(devValue.c_str());",
          "359:  }",
          "360:  else if (qType == \"Voltage\")",
          "361:  {",
          "",
          "[Removed Lines]",
          "358:   SendFanSensor(doffset + dindex, fanspeed, devName);",
          "",
          "[Added Lines]",
          "348:   SendFanSensor(doffset + dindex, 255, fanspeed, devName);",
          "",
          "---------------"
        ],
        "hardware/HardwareMonitor.h||hardware/HardwareMonitor.h": [
          "File: hardware/HardwareMonitor.h -> hardware/HardwareMonitor.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:  void GetInternalCurrent();",
          "30:  void UpdateSystemSensor(const std::string& qType, const int dindex, const std::string& devName, const std::string& devValue);",
          "31:  void SendCurrent(const unsigned long Idx, const float Curr, const std::string &defaultname);",
          "33: #ifdef WIN32",
          "34:  bool InitWMI();",
          "35:  void ExitWMI();",
          "",
          "[Removed Lines]",
          "32:  void SendFanSensor(const int Idx, const int FanSpeed, const std::string &defaultname);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hardware/Winddelen.cpp||hardware/Winddelen.cpp": [
          "File: hardware/Winddelen.cpp -> hardware/Winddelen.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: #include \"hardwaretypes.h\"",
          "8: #include \"../main/localtime_r.h\"",
          "9: #include \"../main/mainworker.h\"",
          "15: {",
          "21: }",
          "23: CWinddelen::~CWinddelen(void)",
          "",
          "[Removed Lines]",
          "11: #define WINDDELEN_POLL_INTERVAL 10",
          "13: CWinddelen::CWinddelen(const int ID, const std::string &IPAddress, const unsigned short usIPPort, const unsigned short usMillID) :",
          "14: m_szIPAddress(IPAddress)",
          "16:  m_HwdID=ID;",
          "17:  m_usIPPort=usIPPort;",
          "18:  m_usMillID=usMillID;",
          "19:  m_stoprequested=false;",
          "20:  Init();",
          "",
          "[Added Lines]",
          "10: #include \"../json/json.h\"",
          "12: #define WINDDELEN_POLL_INTERVAL 30",
          "14: #ifdef _DEBUG",
          "17: #endif",
          "19: #if defined(DEBUG_WindDelenW)",
          "20: void SaveString2Disk(std::string str, std::string filename)",
          "22:  FILE *fOut = fopen(filename.c_str(), \"wb+\");",
          "23:  if (fOut)",
          "24:  {",
          "25:   fwrite(str.c_str(), 1, str.size(), fOut);",
          "26:   fclose(fOut);",
          "27:  }",
          "28: }",
          "29: #endif",
          "30: #ifdef DEBUG_WindDelenR",
          "31: std::string ReadFile(std::string filename)",
          "32: {",
          "33:  std::ifstream file;",
          "34:  std::string sResult = \"\";",
          "35:  file.open(filename.c_str());",
          "36:  if (!file.is_open())",
          "37:   return \"\";",
          "38:  std::string sLine;",
          "39:  while (!file.eof())",
          "40:  {",
          "41:   getline(file, sLine);",
          "42:   sResult += sLine;",
          "43:  }",
          "44:  file.close();",
          "45:  return sResult;",
          "46: }",
          "47: #endif",
          "49: CWinddelen::CWinddelen(const int ID, const std::string &IPAddress, const unsigned short usTotParts, const unsigned short usMillID) :",
          "50:  m_szMillName(IPAddress)",
          "51: {",
          "52:  m_HwdID = ID;",
          "53:  m_usTotParts = usTotParts;",
          "54:  m_usMillID = usMillID;",
          "55:  m_stoprequested = false;",
          "57:  m_winddelen_per_mill[1] = 9910.0;",
          "58:  m_winddelen_per_mill[2] = 10154.0;",
          "59:  m_winddelen_per_mill[31] = 6648.0;",
          "60:  m_winddelen_per_mill[41] = 6164.0;",
          "61:  m_winddelen_per_mill[51] = 5721.0;",
          "62:  m_winddelen_per_mill[111] = 5579.0;",
          "63:  m_winddelen_per_mill[121] = 5602.0;",
          "64:  m_winddelen_per_mill[131] = 5534.0;",
          "65:  m_winddelen_per_mill[141] = 5512.0;",
          "66:  m_winddelen_per_mill[191] = 3000.0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:  m_thread = std::make_shared<std::thread>(&CWinddelen::Do_Work, this);",
          "36:  SetThreadName(m_thread->native_handle(), \"Winddelen\");",
          "38:  sOnConnected(this);",
          "39:  return (m_thread != nullptr);",
          "40: }",
          "",
          "[Removed Lines]",
          "37:  m_bIsStarted=true;",
          "",
          "[Added Lines]",
          "83:  m_bIsStarted = true;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:   m_thread->join();",
          "48:   m_thread.reset();",
          "49:  }",
          "52: }",
          "54: void CWinddelen::Do_Work()",
          "",
          "[Removed Lines]",
          "50:     m_bIsStarted=false;",
          "51:     return true;",
          "",
          "[Added Lines]",
          "96:  m_bIsStarted = false;",
          "97:  return true;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "61:   sec_counter++;",
          "63:   if (sec_counter % 12 == 0) {",
          "65:   }",
          "66:   if (sec_counter % WINDDELEN_POLL_INTERVAL == 0)",
          "67:   {",
          "68:    GetMeterDetails();",
          "69:   }",
          "70:  }",
          "72: }",
          "74: bool CWinddelen::WriteToHardware(const char *pdata, const unsigned char length)",
          "",
          "[Removed Lines]",
          "64:    m_LastHeartbeat=mytime(NULL);",
          "71:  _log.Log(LOG_STATUS,\"Winddelen: Worker stopped...\");",
          "",
          "[Added Lines]",
          "110:    m_LastHeartbeat = mytime(NULL);",
          "117:  _log.Log(LOG_STATUS, \"Winddelen: Worker stopped...\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "80: {",
          "81:  std::string sResult;",
          "83:  char szURL[200];",
          "89:  {",
          "91:   return;",
          "92:  }",
          "94:  std::vector<std::string> results;",
          "95:  StringSplit(sResult, \",\", results);",
          "97:  {",
          "99:   return;",
          "100:  }",
          "102:  int fpos;",
          "133: }",
          "",
          "[Removed Lines]",
          "85:  sprintf(szURL, \"http://backend.windcentrale.nl/windcentrale/productie?id=%d\", m_usMillID);",
          "88:  if (!HTTPClient::GETSingleLine(szURL,sResult))",
          "90:   _log.Log(LOG_ERROR,\"Winddelen: Error connecting to: %s\", szURL);",
          "96:  if (results.size()<7)",
          "98:   _log.Log(LOG_ERROR,\"Winddelen: Invalid response for '%s'\", m_szIPAddress.c_str());",
          "103:  std::string pusage=stdstring_trim(results[7]);",
          "104:  fpos=pusage.find_first_of(\" \");",
          "105:  if (fpos!=std::string::npos)",
          "106:   pusage=pusage.substr(0,fpos);",
          "107:  stdreplace(pusage,\",\",\"\");",
          "109:  std::string pcurrent=stdstring_trim(results[2]);",
          "110:  fpos=pcurrent.find_first_of(\" \");",
          "111:  if (fpos!=std::string::npos)",
          "112:   pcurrent=pcurrent.substr(0,fpos);",
          "113:  stdreplace(pcurrent,\",\",\"\");",
          "115:  std::map<int,float> winddelen_per_mill;",
          "116:    winddelen_per_mill[1]=9910.0;",
          "117:    winddelen_per_mill[2]=10154.0;",
          "118:   winddelen_per_mill[31]=6648.0;",
          "119:    winddelen_per_mill[41]=6164.0;",
          "120:     winddelen_per_mill[51]=5721.0;",
          "121:  winddelen_per_mill[111]=5579.0;",
          "122:    winddelen_per_mill[121]=5602.0;",
          "123:    winddelen_per_mill[131]=5534.0;",
          "124:    winddelen_per_mill[141]=5512.0;",
          "125:    winddelen_per_mill[191]=3000.0;",
          "127:  double powerusage = atol(pusage.c_str()) * m_usIPPort / winddelen_per_mill[m_usMillID];",
          "128:  double usagecurrent = atof(pcurrent.c_str()) * m_usIPPort / 1000.0;",
          "129: #ifdef _DEBUG",
          "130:  _log.Log(LOG_STATUS,\"%d winddelen in '%s' currently produces: %.0f Watt, total production is: %.03f kWh\", m_usIPPort , m_szIPAddress.c_str(), usagecurrent * 1000, powerusage);",
          "131: #endif",
          "132:  SendKwhMeterOldWay(m_usMillID, 1, 255, usagecurrent, powerusage, \"Wind Power\");",
          "",
          "[Added Lines]",
          "129: #ifdef DEBUG_WindDelenR",
          "130:  sResult = ReadFile(\"E:\\\\WindDelen.json\");",
          "131: #else",
          "133:  sprintf(szURL, \"https://zep-api.windcentrale.nl/production/%d/live\", m_usMillID);",
          "135:  if (!HTTPClient::GETSingleLine(szURL, sResult))",
          "137:   _log.Log(LOG_ERROR, \"Winddelen: Error connecting to: %s\", szURL);",
          "140: #endif",
          "141: #ifdef DEBUG_WindDelenW",
          "142:  SaveString2Disk(sResult, \"E:\\\\WindDelen.json\");",
          "143: #endif",
          "145:  try",
          "146:  {",
          "147:   Json::Value root;",
          "148:   Json::Reader jReader;",
          "149:   bool ret = jReader.parse(sResult, root);",
          "150:   if (!ret)",
          "151:   {",
          "152:    _log.Log(LOG_ERROR, \"Winddelen: Invalid data received!\");",
          "153:    return;",
          "154:   }",
          "156:   if (root.size() < 1)",
          "157:   {",
          "158:    _log.Log(LOG_ERROR, \"Winddelen: Invalid data received!\");",
          "159:    return;",
          "160:   }",
          "161:   if (!root.isObject())",
          "162:   {",
          "163:    _log.Log(LOG_ERROR, \"Winddelen: Invalid data received, or unknown location!\");",
          "164:    return;",
          "165:   }",
          "167:   if (root[\"powerAbsTot\"].empty())",
          "168:   {",
          "169:    _log.Log(LOG_ERROR, \"Winddelen: Invalid data received, or unknown location!\");",
          "170:    return;",
          "171:   }",
          "172:   if (root[\"powerAbsWd\"].empty())",
          "173:   {",
          "174:    _log.Log(LOG_ERROR, \"Winddelen: Invalid data received, or unknown location!\");",
          "175:    return;",
          "176:   }",
          "177:   if (root[\"kwh\"].empty())",
          "178:   {",
          "179:    _log.Log(LOG_ERROR, \"Winddelen: Invalid data received, or unknown location!\");",
          "180:    return;",
          "181:   }",
          "183:   if (m_winddelen_per_mill.find(m_usMillID) == m_winddelen_per_mill.end())",
          "184:   {",
          "185:    if (root[\"kwh\"].empty())",
          "186:    {",
          "187:     _log.Log(LOG_ERROR, \"Winddelen: unknown location!\");",
          "188:     return;",
          "189:    }",
          "190:   }",
          "192:   double powerAbsTot = root[\"powerAbsTot\"].asDouble();",
          "193:   double powerAbsWd = root[\"powerAbsWd\"].asDouble();",
          "194:   double kwh = root[\"kwh\"].asDouble();",
          "196:   double powerusage = kwh * m_usTotParts / m_winddelen_per_mill[m_usMillID];",
          "197:   double usagecurrent = powerAbsWd * m_usTotParts / 1000.0;",
          "199:   SendKwhMeterOldWay(m_usMillID, 1, 255, usagecurrent, powerusage, \"Wind Power\");",
          "201:   float powerRel = root[\"powerRel\"].asFloat();",
          "202:   SendPercentageSensor(m_usMillID, 1, 255, powerRel, \"Wind PowerRel\");",
          "204:   int rpm = root[\"rpm\"].asInt();",
          "205:   SendFanSensor(m_usMillID, 255, rpm, \"Wind RPM\");",
          "207:   if (!root[\"windSpeed\"].empty())",
          "208:   {",
          "209:    float windSpeed = root[\"windSpeed\"].asFloat();",
          "210:    int windDir = 0;",
          "211:    std::string szWD = root[\"windDirection\"].asString();",
          "212:    if (szWD == \"N\")",
          "213:     windDir = static_cast<int>(rint(0 * 22.5f));",
          "214:    else if ((szWD == \"NNE\") || (szWD == \"NNO\"))",
          "215:     windDir = static_cast<int>(rint(1 * 22.5f));",
          "216:    else if ((szWD == \"NE\") || (szWD == \"NO\"))",
          "217:     windDir = static_cast<int>(rint(2 * 22.5f));",
          "218:    else if ((szWD == \"ENE\") || (szWD == \"ONO\"))",
          "219:     windDir = static_cast<int>(rint(3 * 22.5f));",
          "220:    else if ((szWD == \"E\") || (szWD == \"O\"))",
          "221:     windDir = static_cast<int>(rint(4 * 22.5f));",
          "222:    else if ((szWD == \"ESE\") || (szWD == \"OZO\"))",
          "223:     windDir = static_cast<int>(rint(5 * 22.5f));",
          "224:    else if ((szWD == \"SE\") || (szWD == \"ZO\"))",
          "225:     windDir = static_cast<int>(rint(6 * 22.5f));",
          "226:    else if ((szWD == \"SSE\") || (szWD == \"ZZO\"))",
          "227:     windDir = static_cast<int>(rint(7 * 22.5f));",
          "228:    else if ((szWD == \"S\") || (szWD == \"Z\"))",
          "229:     windDir = static_cast<int>(rint(8 * 22.5f));",
          "230:    else if ((szWD == \"SSW\") || (szWD == \"ZZW\"))",
          "231:     windDir = static_cast<int>(rint(9 * 22.5f));",
          "232:    else if ((szWD == \"SW\") || (szWD == \"ZW\"))",
          "233:     windDir = static_cast<int>(rint(10 * 22.5f));",
          "234:    else if ((szWD == \"WSW\") || (szWD == \"WZW\"))",
          "235:     windDir = static_cast<int>(rint(11 * 22.5f));",
          "236:    else if ((szWD == \"SSW\") || (szWD == \"ZZW\"))",
          "237:     windDir = static_cast<int>(rint(12 * 22.5f));",
          "238:    else if (szWD == \"WNW\")",
          "239:     windDir = static_cast<int>(rint(13 * 22.5f));",
          "240:    else if (szWD == \"NW\")",
          "241:     windDir = static_cast<int>(rint(14 * 22.5f));",
          "242:    else if (szWD == \"NNW\")",
          "243:     windDir = static_cast<int>(rint(15 * 22.5f));",
          "245:    SendWind(m_usMillID, 255, windDir, windSpeed, windSpeed, 0, 0, false, \"Wind\");",
          "246:   }",
          "248:   if (!root[\"diameter\"].empty())",
          "249:   {",
          "250:    float diameter = root[\"diameter\"].asFloat();",
          "251:    SendCustomSensor(m_usMillID, 1, 255, diameter, \"Wind Diameter\", \"meter\");",
          "252:   }",
          "253:  }",
          "254:  catch (...)",
          "255:  {",
          "256:   _log.Log(LOG_ERROR, \"Winddelen: Error parsing JSon data!\");",
          "257:  }",
          "262:  if (results.size() < 7)",
          "264:   _log.Log(LOG_ERROR, \"Winddelen: Invalid response for '%s'\", m_szMillName.c_str());",
          "269:  std::string pusage = stdstring_trim(results[7]);",
          "270:  fpos = pusage.find_first_of(\" \");",
          "271:  if (fpos != std::string::npos)",
          "272:   pusage = pusage.substr(0, fpos);",
          "273:  stdreplace(pusage, \",\", \"\");",
          "275:  std::string pcurrent = stdstring_trim(results[2]);",
          "276:  fpos = pcurrent.find_first_of(\" \");",
          "277:  if (fpos != std::string::npos)",
          "278:   pcurrent = pcurrent.substr(0, fpos);",
          "279:  stdreplace(pcurrent, \",\", \"\");",
          "",
          "---------------"
        ],
        "hardware/Winddelen.h||hardware/Winddelen.h": [
          "File: hardware/Winddelen.h -> hardware/Winddelen.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: class CWinddelen : public CDomoticzHardwareBase",
          "6: {",
          "7: public:",
          "9:  ~CWinddelen(void);",
          "10:  bool WriteToHardware(const char *pdata, const unsigned char length) override;",
          "11: private:",
          "",
          "[Removed Lines]",
          "8:  CWinddelen(const int ID, const std::string &IPAddress, const unsigned short usIPPort, const unsigned short usMillID);",
          "",
          "[Added Lines]",
          "8:  CWinddelen(const int ID, const std::string &IPAddress, const unsigned short usTotParts, const unsigned short usMillID);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15:  void Do_Work();",
          "16:  void GetMeterDetails();",
          "17: private:",
          "20:  unsigned short m_usMillID;",
          "21:  volatile bool m_stoprequested;",
          "22:  std::shared_ptr<std::thread> m_thread;",
          "23: };",
          "",
          "[Removed Lines]",
          "18:  std::string m_szIPAddress;",
          "19:  unsigned short m_usIPPort;",
          "",
          "[Added Lines]",
          "18:  std::string m_szMillName;",
          "20:  unsigned short m_usTotParts;",
          "21:  std::map<int, float> m_winddelen_per_mill;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7c129382124f1cc2f1e3c0840aa40d06cd0ffee4",
      "candidate_info": {
        "commit_hash": "7c129382124f1cc2f1e3c0840aa40d06cd0ffee4",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/7c129382124f1cc2f1e3c0840aa40d06cd0ffee4",
        "files": [
          "www/app/events/blockly_xml_parser.js"
        ],
        "message": "Fixed Blockly issue #2904",
        "before_after_code_files": [
          "www/app/events/blockly_xml_parser.js||www/app/events/blockly_xml_parser.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "www/app/events/blockly_xml_parser.js||www/app/events/blockly_xml_parser.js": [
          "File: www/app/events/blockly_xml_parser.js -> www/app/events/blockly_xml_parser.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "228:                     setString += '=' + dtext + '';",
          "229:                     setArray.push(setString);",
          "230:                 }",
          "232:                     var setString = 'commandArray[Text:' + $(fieldA).text() + ']';",
          "233:                     var valueB = $(this).find('value[name=\\'B\\']')[0];",
          "234:                     var fieldB = $(valueB).find('field')[0];",
          "",
          "[Removed Lines]",
          "231:                 if (blockA.attr('type').indexOf('textvariables') >= 0) {",
          "",
          "[Added Lines]",
          "231:                 else if (blockA.attr('type').indexOf('textvariables') >= 0) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}