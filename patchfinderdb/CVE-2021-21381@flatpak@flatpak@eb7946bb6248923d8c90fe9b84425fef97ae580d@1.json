{
  "cve_id": "CVE-2021-21381",
  "cve_desc": "Flatpak is a system for building, distributing, and running sandboxed desktop applications on Linux. In Flatpack since version 0.9.4 and before version 1.10.2 has a vulnerability in the \"file forwarding\" feature which can be used by an attacker to gain access to files that would not ordinarily be allowed by the app's permissions. By putting the special tokens `@@` and/or `@@u` in the Exec field of a Flatpak app's .desktop file, a malicious app publisher can trick flatpak into behaving as though the user had chosen to open a target file with their Flatpak app, which automatically makes that file available to the Flatpak app. This is fixed in version 1.10.2. A minimal solution is the first commit \"`Disallow @@ and @@U usage in desktop files`\". The follow-up commits \"`dir: Reserve the whole @@ prefix`\" and \"`dir: Refuse to export .desktop files with suspicious uses of @@ tokens`\" are recommended, but not strictly required. As a workaround, avoid installing Flatpak apps from untrusted sources, or check the contents of the exported `.desktop` files in `exports/share/applications/*.desktop` (typically `~/.local/share/flatpak/exports/share/applications/*.desktop` and `/var/lib/flatpak/exports/share/applications/*.desktop`) to make sure that literal filenames do not follow `@@` or `@@u`.",
  "repo": "flatpak/flatpak",
  "patch_hash": "eb7946bb6248923d8c90fe9b84425fef97ae580d",
  "patch_info": {
    "commit_hash": "eb7946bb6248923d8c90fe9b84425fef97ae580d",
    "repo": "flatpak/flatpak",
    "commit_url": "https://github.com/flatpak/flatpak/commit/eb7946bb6248923d8c90fe9b84425fef97ae580d",
    "files": [
      "common/flatpak-dir.c"
    ],
    "message": "dir: Reserve the whole @@ prefix\n\nIf we add new features analogous to file forwarding later, we might\nfind that we need a different magic token. Let's reserve the whole\n@@* namespace so we can call it @@something-else.\n\nSigned-off-by: Simon McVittie <smcv@collabora.com>\n(cherry picked from commit 1e7e8fdb24b51078f4c48e0711e24a14930ba1f0)",
    "before_after_code_files": [
      "common/flatpak-dir.c||common/flatpak-dir.c"
    ]
  },
  "patch_diff": {
    "common/flatpak-dir.c||common/flatpak-dir.c": [
      "File: common/flatpak-dir.c -> common/flatpak-dir.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "7139:                 g_string_append_printf (new_exec, \" @@ %s @@\", arg);",
      "7140:               else if (strcasecmp (arg, \"%u\") == 0)",
      "7141:                 g_string_append_printf (new_exec, \" @@u %s @@\", arg);",
      "7143:                 g_print (_(\"Skipping invalid Exec argument %s\\n\"), arg);",
      "7144:               else",
      "7145:                 g_string_append_printf (new_exec, \" %s\", arg);",
      "",
      "[Removed Lines]",
      "7142:               else if (strcmp (arg, \"@@\") == 0 || strcmp (arg, \"@@u\") == 0)",
      "",
      "[Added Lines]",
      "7142:               else if (g_str_has_prefix (arg, \"@@\"))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e7b5f4600967b505c11c948c4e6dfd91fc0199e8",
      "candidate_info": {
        "commit_hash": "e7b5f4600967b505c11c948c4e6dfd91fc0199e8",
        "repo": "flatpak/flatpak",
        "commit_url": "https://github.com/flatpak/flatpak/commit/e7b5f4600967b505c11c948c4e6dfd91fc0199e8",
        "files": [
          "common/flatpak-context.c"
        ],
        "message": "common: Fix Spawn portal method not working with UTF-8 files\n\nWhen the portal's Spawn method is used with the environment cleared,\nit's very likely that the \"flatpak run\" that ends up being run will be\nin an environment without UTF-8 support.\n\nIf one of the files or directories we try to expose to the sub-sandbox\ncontains UTF-8/non-ASCII characters, then \"flatpak run\" would fail with:\nerror: Invalid byte sequence in conversion input\n\nThis is caused by GOption trying to parse the --filesystem option for\nflatpak, as, when using the G_OPTION_ARG_CALLBACK argument type, GOption\nwill split the option name from its value, and try to convert the value\nto UTF-8. Which will fail because there's no UTF-8.\n\nIt won't however do that if we tell the option parser that the value is\na filename using G_OPTION_FLAG_FILENAME, so set it.\n\n(cherry picked from commit e67847e253da6756886cc727687f00c57a03b816)",
        "before_after_code_files": [
          "common/flatpak-context.c||common/flatpak-context.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/flatpak/flatpak/pull/4168"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "common/flatpak-context.c||common/flatpak-context.c": [
          "File: common/flatpak-context.c -> common/flatpak-context.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1391:   { \"nodevice\", 0, G_OPTION_FLAG_IN_MAIN, G_OPTION_ARG_CALLBACK, &option_nodevice_cb, N_(\"Don't expose device to app\"), N_(\"DEVICE\") },",
          "1392:   { \"allow\", 0, G_OPTION_FLAG_IN_MAIN, G_OPTION_ARG_CALLBACK, &option_allow_cb, N_(\"Allow feature\"), N_(\"FEATURE\") },",
          "1393:   { \"disallow\", 0, G_OPTION_FLAG_IN_MAIN, G_OPTION_ARG_CALLBACK, &option_disallow_cb, N_(\"Don't allow feature\"), N_(\"FEATURE\") },",
          "1396:   { \"env\", 0, G_OPTION_FLAG_IN_MAIN, G_OPTION_ARG_CALLBACK, &option_env_cb, N_(\"Set environment variable\"), N_(\"VAR=VALUE\") },",
          "1397:   { \"env-fd\", 0, G_OPTION_FLAG_IN_MAIN, G_OPTION_ARG_CALLBACK, &option_env_fd_cb, N_(\"Read environment variables in env -0 format from FD\"), N_(\"FD\") },",
          "1398:   { \"unset-env\", 0, G_OPTION_FLAG_IN_MAIN, G_OPTION_ARG_CALLBACK, &option_unset_env_cb, N_(\"Remove variable from environment\"), N_(\"VAR\") },",
          "",
          "[Removed Lines]",
          "1394:   { \"filesystem\", 0, G_OPTION_FLAG_IN_MAIN, G_OPTION_ARG_CALLBACK, &option_filesystem_cb, N_(\"Expose filesystem to app (:ro for read-only)\"), N_(\"FILESYSTEM[:ro]\") },",
          "1395:   { \"nofilesystem\", 0, G_OPTION_FLAG_IN_MAIN, G_OPTION_ARG_CALLBACK, &option_nofilesystem_cb, N_(\"Don't expose filesystem to app\"), N_(\"FILESYSTEM\") },",
          "",
          "[Added Lines]",
          "1394:   { \"filesystem\", 0, G_OPTION_FLAG_IN_MAIN | G_OPTION_FLAG_FILENAME, G_OPTION_ARG_CALLBACK, &option_filesystem_cb, N_(\"Expose filesystem to app (:ro for read-only)\"), N_(\"FILESYSTEM[:ro]\") },",
          "1395:   { \"nofilesystem\", 0, G_OPTION_FLAG_IN_MAIN | G_OPTION_FLAG_FILENAME, G_OPTION_ARG_CALLBACK, &option_nofilesystem_cb, N_(\"Don't expose filesystem to app\"), N_(\"FILESYSTEM\") },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8279c5818425b6812523e3805bbe242fb6a5d961",
      "candidate_info": {
        "commit_hash": "8279c5818425b6812523e3805bbe242fb6a5d961",
        "repo": "flatpak/flatpak",
        "commit_url": "https://github.com/flatpak/flatpak/commit/8279c5818425b6812523e3805bbe242fb6a5d961",
        "files": [
          "common/flatpak-dir.c"
        ],
        "message": "Disallow @@ and @@u usage in desktop files\n\nFixes #4146.\n\n(cherry picked from commit 652a28ffab67cb6cd7d12dc3a93979bcd3731c7f)",
        "before_after_code_files": [
          "common/flatpak-dir.c||common/flatpak-dir.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "common/flatpak-dir.c||common/flatpak-dir.c"
          ],
          "candidate": [
            "common/flatpak-dir.c||common/flatpak-dir.c"
          ]
        }
      },
      "candidate_diff": {
        "common/flatpak-dir.c||common/flatpak-dir.c": [
          "File: common/flatpak-dir.c -> common/flatpak-dir.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7139:                 g_string_append_printf (new_exec, \" @@ %s @@\", arg);",
          "7140:               else if (strcasecmp (arg, \"%u\") == 0)",
          "7141:                 g_string_append_printf (new_exec, \" @@u %s @@\", arg);",
          "7142:               else",
          "7143:                 g_string_append_printf (new_exec, \" %s\", arg);",
          "7144:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7142:               else if (strcmp (arg, \"@@\") == 0 || strcmp (arg, \"@@u\") == 0)",
          "7143:                 g_print (_(\"Skipping invalid Exec argument %s\\n\"), arg);",
          "",
          "---------------"
        ]
      }
    }
  ]
}