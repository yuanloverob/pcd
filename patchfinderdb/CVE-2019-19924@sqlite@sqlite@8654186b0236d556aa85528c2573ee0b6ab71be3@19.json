{
  "cve_id": "CVE-2019-19924",
  "cve_desc": "SQLite 3.30.1 mishandles certain parser-tree rewriting, related to expr.c, vdbeaux.c, and window.c. This is caused by incorrect sqlite3WindowRewrite() error handling.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
  "patch_info": {
    "commit_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8654186b0236d556aa85528c2573ee0b6ab71be3",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/vdbeaux.c",
      "src/window.c"
    ],
    "message": "When an error occurs while rewriting the parser tree for window functions in the sqlite3WindowRewrite() routine, make sure that pParse->nErr is set, and make sure that this shuts down any subsequent code generation that might depend on the transformations that were implemented.  This fixes a problem discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: e2bddcd4c55ba3cbe0130332679ff4b048630d0ced9a8899982edb5a3569ba7f",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/vdbeaux.c||src/vdbeaux.c",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4417c5bf0aabb34ed174f01afd981c924ae965a42128719d8d6735536631d12f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "376:   int addr;",
      "377:   CollSeq *p4;",
      "379:   if( isCommuted ){",
      "380:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
      "381:   }else{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:   if( pParse->nErr ) return 0;",
      "",
      "---------------"
    ],
    "src/vdbeaux.c||src/vdbeaux.c": [
      "File: src/vdbeaux.c -> src/vdbeaux.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1304: static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){",
      "1305:   assert( p->nOp>0 || p->aOp==0 );",
      "1307:   if( p->nOp ){",
      "1308:     assert( p->aOp );",
      "1309:     sqlite3DbFree(p->db, p->aOp[p->nOp-1].zComment);",
      "",
      "[Removed Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );",
      "",
      "[Added Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed",
      "1307:           || p->pParse->nErr>0 );",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "935:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
      "936:     if( pTab==0 ){",
      "938:     }",
      "940:     p->pSrc = 0;",
      "",
      "[Removed Lines]",
      "937:       return SQLITE_NOMEM;",
      "",
      "[Added Lines]",
      "937:       return sqlite3ErrorToParser(db, SQLITE_NOMEM);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1039:     sqlite3DbFree(db, pTab);",
      "1040:   }",
      "1042:   return rc;",
      "1043: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1042:   if( rc && pParse->nErr==0 ){",
      "1043:     assert( pParse->db->mallocFailed );",
      "1044:     return sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
      "1045:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "04307c8a3f457760348fd56f474cedc940fd7dc3",
      "candidate_info": {
        "commit_hash": "04307c8a3f457760348fd56f474cedc940fd7dc3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/04307c8a3f457760348fd56f474cedc940fd7dc3",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/gencol1.test"
        ],
        "message": "Ignore differences in Expr.op2 in sqlite3ExprCompare() in cases where it does matter.  Ticket [1d2a8efc6c3a595a].\n\nFossilOrigin-Name: 329820673a12ff6a6c8759f40989d4ccf272441064b0366a5f491695b55ad0e9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: aceeaf9e28767a0880a16872867a1f57bff163acd0f10d19d5688068077590fa",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5028:      && (combinedFlags & EP_Reduced)==0",
          "5029:     ){",
          "5030:       if( pA->iColumn!=pB->iColumn ) return 2;",
          "5032:       if( pA->op!=TK_IN && pA->iTable!=pB->iTable && pA->iTable!=iTab ){",
          "5033:         return 2;",
          "5034:       }",
          "",
          "[Removed Lines]",
          "5031:       if( pA->op2!=pB->op2 && (pA->op!=TK_FUNCTION || iTab<0) ) return 2;",
          "",
          "[Added Lines]",
          "5031:       if( pA->op2!=pB->op2 ){",
          "5032:         if( pA->op==TK_TRUTH ) return 2;",
          "5033:         if( pA->op==TK_FUNCTION && iTab<0 ){",
          "5043:           return 2;",
          "5044:         }",
          "5045:       }",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019-10-31",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "12: # Test cases for generated columns.",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "18: # ticket 830277d9db6c3ba1 on 2019-10-31",
          "19: do_execsql_test gencol1-100 {",
          "20:   CREATE TABLE t0(c0 AS(TYPEOF(c1)), c1);",
          "21:   INSERT INTO t0(c1) VALUES(0);",
          "22:   CREATE TABLE t1(x AS (typeof(y)), y);",
          "23:   INSERT INTO t1 SELECT * FROM t0;",
          "24:   SELECT * FROM t1;",
          "25: } {integer 0}",
          "27: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f012dc4eb911a68cb5531b94d91cad7922d9999d",
      "candidate_info": {
        "commit_hash": "f012dc4eb911a68cb5531b94d91cad7922d9999d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f012dc4eb911a68cb5531b94d91cad7922d9999d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "When computing the amount of scratch memory needed during a rebalance operation, assume the worst case for the number of cells per page, rather than relying on the BtPage.nCell value, which might be incorrect for a corrupt database.\n\nFossilOrigin-Name: a420ebd08f5a96b9e61a37cb42e1b3f346c23505630d9c33fe30ce7882959b36",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a026189aa46114d2de4f1da5882aeef9cf446a5aa6ea068d51c27df0d7302ddb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7559:         goto balance_cleanup;",
          "7560:       }",
          "7561:     }",
          "7563:     if( (i--)==0 ) break;",
          "7565:     if( pParent->nOverflow && i+nxDiv==pParent->aiOvfl[0] ){",
          "",
          "[Removed Lines]",
          "7562:     nMaxCells += 1+apOld[i]->nCell+apOld[i]->nOverflow;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7606:   nMaxCells = (nMaxCells + 3)&~3;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7605:   nMaxCells = nOld*(MX_CELL(pBt) + ArraySize(pParent->apOvfl));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7617:   b.apCell = sqlite3StackAllocRaw(0, szScratch );",
          "7618:   if( b.apCell==0 ){",
          "7619:     rc = SQLITE_NOMEM_BKPT;",
          "",
          "[Removed Lines]",
          "7616:   assert( szScratch<=6*(int)pBt->pageSize );",
          "",
          "[Added Lines]",
          "7616:   assert( szScratch<=7*(int)pBt->pageSize );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "569b1d9119c0b05564236f1494c5c328e3fcc757",
      "candidate_info": {
        "commit_hash": "569b1d9119c0b05564236f1494c5c328e3fcc757",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/569b1d9119c0b05564236f1494c5c328e3fcc757",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Omit the \".progress\" command from the shell if it is compiled with the SQLITE_OMIT_PROGRESS_CALLBACK option.\n\nFossilOrigin-Name: 4d0a949fd92e19fbf243a2e3a1a7c2cdb111f9a6943949d2420dd846bc7d9285",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2f468da4e9fb3edb5e902fa5d3c528726d1fb64d749d29e558ba3243c76bcb95",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1792:   }",
          "1793: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1795: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3496:   \".output ?FILE?           Send output to FILE or stdout if FILE is omitted\",",
          "3497:   \"     If FILE begins with '|' then open it as a pipe.\",",
          "3498:   \".print STRING...         Print literal STRING\",",
          "3499:   \".progress N              Invoke progress handler after every N opcodes\",",
          "3500:   \"   --limit N                 Interrupt after N progress callbacks\",",
          "3501:   \"   --once                    Do no more than one progress interrupt\",",
          "3502:   \"   --quiet|-q                No output except at interrupts\",",
          "3503:   \"   --reset                   Reset the count for each input and interrupt\",",
          "3504:   \".prompt MAIN CONTINUE    Replace the standard prompts\",",
          "3505:   \".quit                    Exit this program\",",
          "3506:   \".read FILE               Read input from FILE\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3501: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK",
          "3507: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7033:     raw_printf(p->out, \"\\n\");",
          "7034:   }else",
          "7036:   if( c=='p' && n>=3 && strncmp(azArg[0], \"progress\", n)==0 ){",
          "7037:     int i;",
          "7038:     int nn = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7040: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "52612bec3c7ff5f3ce61bc7380600a5831bbe1bb",
      "candidate_info": {
        "commit_hash": "52612bec3c7ff5f3ce61bc7380600a5831bbe1bb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/52612bec3c7ff5f3ce61bc7380600a5831bbe1bb",
        "files": [
          "ext/fts5/fts5Int.h",
          "ext/fts5/fts5_index.c",
          "ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5matchinfo.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a resource leak in fts5 that could occur if an auxiliary function is called from within a query that does not use the full-text index.\n\nFossilOrigin-Name: b528bdcd45db1b783ecd9739c3d3c890f04de7003f079668970eafaf8e23b2f3",
        "before_after_code_files": [
          "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h",
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5matchinfo.test||ext/fts5/test/fts5matchinfo.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h": [
          "File: ext/fts5/fts5Int.h -> ext/fts5/fts5Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "423: void sqlite3Fts5IterClose(Fts5IndexIter*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "428: void sqlite3Fts5IndexCloseReader(Fts5Index*);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "618:   if( p->pReader ){",
          "619:     sqlite3_blob *pReader = p->pReader;",
          "620:     p->pReader = 0;",
          "",
          "[Removed Lines]",
          "617: static void fts5CloseReader(Fts5Index *p){",
          "",
          "[Added Lines]",
          "617: void sqlite3Fts5IndexCloseReader(Fts5Index *p){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "643:       assert( p->pReader==0 );",
          "644:       p->pReader = pBlob;",
          "645:       if( rc!=SQLITE_OK ){",
          "647:       }",
          "648:       if( rc==SQLITE_ABORT ) rc = SQLITE_OK;",
          "649:     }",
          "",
          "[Removed Lines]",
          "646:         fts5CloseReader(p);",
          "",
          "[Added Lines]",
          "646:         sqlite3Fts5IndexCloseReader(p);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5204: int sqlite3Fts5IndexSync(Fts5Index *p){",
          "5205:   assert( p->rc==SQLITE_OK );",
          "5206:   fts5IndexFlush(p);",
          "5208:   return fts5IndexReturn(p);",
          "5209: }",
          "",
          "[Removed Lines]",
          "5207:   fts5CloseReader(p);",
          "",
          "[Added Lines]",
          "5207:   sqlite3Fts5IndexCloseReader(p);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5217: int sqlite3Fts5IndexRollback(Fts5Index *p){",
          "5219:   fts5IndexDiscardData(p);",
          "5220:   fts5StructureInvalidate(p);",
          "",
          "[Removed Lines]",
          "5218:   fts5CloseReader(p);",
          "",
          "[Added Lines]",
          "5218:   sqlite3Fts5IndexCloseReader(p);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5456:     if( p->rc ){",
          "5457:       sqlite3Fts5IterClose((Fts5IndexIter*)pRet);",
          "5458:       pRet = 0;",
          "5460:     }",
          "",
          "[Removed Lines]",
          "5459:       fts5CloseReader(p);",
          "",
          "[Added Lines]",
          "5459:       sqlite3Fts5IndexCloseReader(p);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5529:     Fts5Iter *pIter = (Fts5Iter*)pIndexIter;",
          "5530:     Fts5Index *pIndex = pIter->pIndex;",
          "5531:     fts5MultiIterFree(pIter);",
          "5533:   }",
          "5534: }",
          "",
          "[Removed Lines]",
          "5532:     fts5CloseReader(pIndex);",
          "",
          "[Added Lines]",
          "5532:     sqlite3Fts5IndexCloseReader(pIndex);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "744:     sqlite3_free(pCsr->zRankArgs);",
          "745:   }",
          "747:   memset(&pCsr->ePlan, 0, sizeof(Fts5Cursor) - ((u8*)&pCsr->ePlan - (u8*)pCsr));",
          "748: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "747:   sqlite3Fts5IndexCloseReader(pTab->p.pIndex);",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5matchinfo.test||ext/fts5/test/fts5matchinfo.test": [
          "File: ext/fts5/test/fts5matchinfo.test -> ext/fts5/test/fts5matchinfo.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "491:   SELECT matchinfo(x1, 'd') FROM x1('a b c');",
          "492: } {1 {unrecognized matchinfo flag: d}}",
          "494: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "494: #-------------------------------------------------------------------------",
          "495: # Test using matchinfo() and similar on a non-full-text query",
          "496: #",
          "497: do_execsql_test 15.0 {",
          "498:   CREATE VIRTUAL TABLE t1 USING fts5(x, y);",
          "499:   INSERT INTO t1 VALUES('a', 'b');",
          "500:   INSERT INTO t1 VALUES('c', 'd');",
          "501: }",
          "503: do_execsql_test 15.1 {",
          "504:   SELECT quote(matchinfo(t1, 'n')) FROM t1 LIMIT 1;",
          "505: } {X'02000000'}",
          "507: do_execsql_test 15.2 {",
          "508:   DELETE FROM t1_content WHERE rowid=1;",
          "509:   SELECT quote(matchinfo(t1, 'n')) FROM t1 LIMIT 1;",
          "510: } {X'02000000'}",
          "512: fts5_aux_test_functions db",
          "513: do_execsql_test 15.3 {",
          "514:   SELECT fts5_test_all(t1) FROM t1 LIMIT 1;",
          "515: } {",
          "516:   {columnsize {0 0} columntext {c d} columntotalsize {2 2} poslist {} tokenize {c d} rowcount 2}",
          "517: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9dc0d34586eebf6705d9bd81494c417ac76707b8625d1ff99eda18b4ca2d8a50",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9c5f73433974bb186237917997550307177d0378",
      "candidate_info": {
        "commit_hash": "9c5f73433974bb186237917997550307177d0378",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9c5f73433974bb186237917997550307177d0378",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/walfault2.test"
        ],
        "message": "Avoid attempting to delete a file while it is still open in walfault2.test.\n\nFossilOrigin-Name: 9d54a63d6e3cd47b483cf0ee868a5e7f638bcb0e3cbdeaecc667f293b87a3e99",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/walfault2.test||test/walfault2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4371a0c46ee7bfbc0a1507796bd9eefd3371adad81b8dda214d018854316727b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/walfault2.test||test/walfault2.test": [
          "File: test/walfault2.test -> test/walfault2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: faultsim_save_and_close",
          "38: do_faultsim_test 1 -prep {",
          "39:   faultsim_restore",
          "40:   sqlite3 db file:test.db?psow=0 -uri 1",
          "41:   file_control_powersafe_overwrite db 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:   catch { db close }",
          "",
          "---------------"
        ]
      }
    }
  ]
}