{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d12db3dabb11873ba51e3e090e818d645c6d33d8",
      "candidate_info": {
        "commit_hash": "d12db3dabb11873ba51e3e090e818d645c6d33d8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d12db3dabb11873ba51e3e090e818d645c6d33d8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Avoid reading off the front of a page buffer when balancing a corrupt btree page.\n\nFossilOrigin-Name: cb50509020d952fa9efed8df7fa08b07b71ae9bdbdefea216b6e660863291039",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 824f93246988ffa213bbd41a7de08886999b1a8ae00fdf6b9767acb6e3ec6a1f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6663:     assert( idx >= pPage->cellOffset+2*pPage->nCell+2 || CORRUPT_DB );",
          "6664:     assert( idx+sz <= (int)pPage->pBt->usableSize );",
          "6665:     pPage->nFree -= (u16)(2 + sz);",
          "6667:     if( iChild ){",
          "6668:       put4byte(&data[idx], iChild);",
          "6669:     }",
          "6670:     pIns = pPage->aCellIdx + i*2;",
          "6671:     memmove(pIns+2, pIns, 2*(pPage->nCell - i));",
          "",
          "[Removed Lines]",
          "6666:     memcpy(&data[idx], pCell, sz);",
          "",
          "[Added Lines]",
          "6672:       memcpy(&data[idx+4], pCell+4, sz-4);",
          "6674:     }else{",
          "6675:       memcpy(&data[idx], pCell, sz);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1231b4773deac1c7d5c44b9119ed053f96c69e90",
      "candidate_info": {
        "commit_hash": "1231b4773deac1c7d5c44b9119ed053f96c69e90",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1231b4773deac1c7d5c44b9119ed053f96c69e90",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "Remove code from the constraint checker that generates virtual column values with the incorrect time.  Turns out the the regular code for all other columns works correctly and so the incorrect special-case code is not actually needed.  Fix for ticket [3ea175512444b0d1].\n\nFossilOrigin-Name: 5b4c0f2ddc6f324e23bbde0ee3d1ab672cfe8ab5044c9b693f4c33cdd75c211e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 713fe86b8c9f3c9ef8af952019e99ba2f4741326226264de6a66baaeb1803d2a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1862:         x = regNewData;",
          "1863:         sqlite3VdbeAddOp2(v, OP_IntCopy, x, regIdx+i);",
          "1864:         VdbeComment((v, \"rowid\"));",
          "1872:       }else{",
          "1873:         testcase( sqlite3TableColumnToStorage(pTab, iField)!=iField );",
          "1874:         x = sqlite3TableColumnToStorage(pTab, iField) + regNewData + 1;",
          "",
          "[Removed Lines]",
          "1865: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "1866:       }else if( pTab->aCol[iField].colFlags & COLFLAG_VIRTUAL ){",
          "1867:         pParse->iSelfTab = -(regNewData+1);",
          "1868:         sqlite3ExprCodeCopy(pParse, pTab->aCol[iField].pDflt, regIdx+i);",
          "1869:         pParse->iSelfTab = 0;",
          "1870:         VdbeComment((v, \"%s column %d\", pIdx->zName, i));",
          "1871: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5a1ce4369f95cb09960e664e80a551f1f968c5f8",
      "candidate_info": {
        "commit_hash": "5a1ce4369f95cb09960e664e80a551f1f968c5f8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5a1ce4369f95cb09960e664e80a551f1f968c5f8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/whereexpr.c",
          "test/indexexpr2.test"
        ],
        "message": "Fix a problem with bytecode generation when a query involves two or more indexes on expressions connected by OR. Ticket [d96eba87698a428c1ddd0790ea04]\n\nFossilOrigin-Name: 7e4ed8b5c2047b69bbb037497111e56e465a4d9f8afca3b337f9ac744471dc4a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/whereexpr.c||src/whereexpr.c",
          "test/indexexpr2.test||test/indexexpr2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cc42dd15100db28a9796254f69a4e367ea5eae29f546be055017cf3e12aa66ba",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "779:     for(j=0; j<2 && !okToChngToIN; j++){",
          "780:       pOrTerm = pOrWc->a;",
          "781:       for(i=pOrWc->nTerm-1; i>=0; i--, pOrTerm++){",
          "782:         assert( pOrTerm->eOperator & WO_EQ );",
          "783:         pOrTerm->wtFlags &= ~TERM_OR_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "781:       Expr *pLeft = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "800:         }",
          "801:         iColumn = pOrTerm->u.leftColumn;",
          "802:         iCursor = pOrTerm->leftCursor;",
          "803:         break;",
          "804:       }",
          "805:       if( i<0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "804:         pLeft = pOrTerm->pExpr->pLeft;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "819:         assert( pOrTerm->eOperator & WO_EQ );",
          "820:         if( pOrTerm->leftCursor!=iCursor ){",
          "821:           pOrTerm->wtFlags &= ~TERM_OR_OK;",
          "823:           okToChngToIN = 0;",
          "824:         }else{",
          "825:           int affLeft, affRight;",
          "",
          "[Removed Lines]",
          "822:         }else if( pOrTerm->u.leftColumn!=iColumn ){",
          "",
          "[Added Lines]",
          "824:         }else if( pOrTerm->u.leftColumn!=iColumn || (iColumn==XN_EXPR",
          "825:                && sqlite3ExprCompare(pParse, pOrTerm->pExpr->pLeft, pLeft, -1)",
          "826:         )){",
          "",
          "---------------"
        ],
        "test/indexexpr2.test||test/indexexpr2.test": [
          "File: test/indexexpr2.test -> test/indexexpr2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "231:   } {t2 t2abc t2cd t2def}",
          "232: }",
          "235: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "234: #-------------------------------------------------------------------------",
          "235: # Test that ticket [d96eba87] has been fixed.",
          "236: #",
          "237: do_execsql_test 5.0 {",
          "238:   CREATE TABLE t5(a INTEGER, b INTEGER);",
          "239:   INSERT INTO t5 VALUES(2, 4), (3, 9);",
          "240: }",
          "241: do_execsql_test 5.1 {",
          "242:   SELECT * FROM t5 WHERE abs(a)=2 or abs(b)=9;",
          "243: } {2 4 3 9}",
          "244: do_execsql_test 5.2 {",
          "245:   CREATE INDEX t5a ON t5( abs(a) );",
          "246:   CREATE INDEX t5b ON t5( abs(b) );",
          "247: }",
          "248: do_execsql_test 5.4 {",
          "249:   SELECT * FROM t5 WHERE abs(a)=2 or abs(b)=9;",
          "250: } {2 4 3 9}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c34f05cca799f39e881809aac9d9c8d5d47af4fb",
      "candidate_info": {
        "commit_hash": "c34f05cca799f39e881809aac9d9c8d5d47af4fb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c34f05cca799f39e881809aac9d9c8d5d47af4fb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "Remove redundant code resulting from a merge error on the previous check-in.\n\nFossilOrigin-Name: 713fe86b8c9f3c9ef8af952019e99ba2f4741326226264de6a66baaeb1803d2a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b855acf1831943b3914491ed0bc333131321930cab480a5281012a3aebbba492",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1498:         continue;",
          "1499:       }",
          "1502:       if( overrideError!=OE_Default ){",
          "1503:         onError = overrideError;",
          "1504:       }else if( onError==OE_Default ){",
          "",
          "[Removed Lines]",
          "1500:       onError = pTab->aCol[i].notNull;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1a97c413f8c26670d3bbf122a6eaa88dea0a0b5c",
      "candidate_info": {
        "commit_hash": "1a97c413f8c26670d3bbf122a6eaa88dea0a0b5c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1a97c413f8c26670d3bbf122a6eaa88dea0a0b5c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/window8.tcl",
          "test/window8.test"
        ],
        "message": "Fix handling of NULL, text and blob values in window queries that use \"RANGE BETWEEN A FOLLOWING AND B FOLLOWING\", or \"B PRECEDING AND A PRECEDING\", where A>B.\n\nFossilOrigin-Name: cb3e2be674316e1d39968eb6567f1fe1b72f9d89af49640a9e83f944979c4cf0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/window8.tcl||test/window8.tcl",
          "test/window8.test||test/window8.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3044cf6917ea8324175fc91657e9a5978af9748f72e1914bc361753f0b2d897d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2745:     windowCheckValue(pParse, regEnd, 1 + (pMWin->eFrmType==TK_RANGE ? 3 : 0));",
          "2746:   }",
          "2749:     int op = ((pMWin->eStart==TK_FOLLOWING) ? OP_Ge : OP_Le);",
          "2750:     int addrGe = sqlite3VdbeAddOp3(v, op, regStart, 0, regEnd);",
          "",
          "[Removed Lines]",
          "2748:   if( pMWin->eStart==pMWin->eEnd && regStart ){",
          "",
          "[Added Lines]",
          "2748:   if( pMWin->eFrmType!=TK_RANGE && pMWin->eStart==pMWin->eEnd && regStart ){",
          "",
          "---------------"
        ],
        "test/window8.tcl||test/window8.tcl": [
          "File: test/window8.tcl -> test/window8.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "351:   INSERT INTO t2 VALUES(2, NULL);",
          "352:   INSERT INTO t2 VALUES(3, NULL);",
          "353:   INSERT INTO t2 VALUES(4, NULL);",
          "354: }",
          "358:   WINDOW win AS (",
          "359:       ORDER BY b NULLS LAST RANGE BETWEEN 6 FOLLOWING AND UNBOUNDED FOLLOWING",
          "360:   );",
          "361: }",
          "363: finish_test",
          "",
          "[Removed Lines]",
          "356: execsql_test 7.1 {",
          "357:   SELECT sum(a) OVER win FROM t2",
          "",
          "[Added Lines]",
          "354:   INSERT INTO t2 VALUES(5, 66);",
          "355:   INSERT INTO t2 VALUES(6, 67);",
          "358: foreach {tn f ex} {",
          "359:   1 sum \"\"",
          "360:   2 min \"\"",
          "361:   3 sum \"EXCLUDE CURRENT ROW\"",
          "362:   4 max \"EXCLUDE CURRENT ROW\"",
          "363: } {",
          "364: execsql_test 7.$tn.1 \"",
          "365:   SELECT $f (a) OVER win FROM t2",
          "369: \"",
          "370: execsql_test 7.$tn.2 \"",
          "371:   SELECT $f (a) OVER win FROM t2",
          "372:   WINDOW win AS (",
          "373:       ORDER BY b NULLS LAST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING",
          "374:   );",
          "375: \"",
          "376: execsql_test 7.$tn.3 \"",
          "377:   SELECT $f (a) OVER win FROM t2",
          "378:   WINDOW win AS (",
          "379:       ORDER BY b NULLS LAST RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING",
          "380:   );",
          "381: \"",
          "382: execsql_test 7.$tn.4 \"",
          "383:   SELECT $f (a) OVER win FROM t2",
          "384:   WINDOW win AS (",
          "385:       ORDER BY b NULLS FIRST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING",
          "386:   );",
          "387: \"",
          "388: execsql_test 7.$tn.5 \"",
          "389:   SELECT $f (a) OVER win FROM t2",
          "390:   WINDOW win AS (",
          "391:       ORDER BY b NULLS FIRST RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING",
          "392:   );",
          "393: \"",
          "395: execsql_test 7.$tn.6 \"",
          "396:   SELECT $f (a) OVER win FROM t2",
          "397:   WINDOW win AS (",
          "398:       ORDER BY b NULLS LAST RANGE BETWEEN 1000 PRECEDING AND 2 PRECEDING",
          "399:   );",
          "400: \"",
          "401: execsql_test 7.$tn.7 \"",
          "402:   SELECT $f (a) OVER win FROM t2",
          "403:   WINDOW win AS (",
          "404:       ORDER BY b NULLS LAST RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING",
          "405:   );",
          "406: \"",
          "407: execsql_test 7.$tn.8 \"",
          "408:   SELECT $f (a) OVER win FROM t2",
          "409:   WINDOW win AS (",
          "410:       ORDER BY b NULLS FIRST RANGE BETWEEN 1000 PRECEDING AND 2000 PRECEDING",
          "411:   );",
          "412: \"",
          "413: execsql_test 7.$tn.9 \"",
          "414:   SELECT $f (a) OVER win FROM t2",
          "415:   WINDOW win AS (",
          "416:       ORDER BY b NULLS FIRST RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING",
          "417:   );",
          "418: \"",
          "",
          "---------------"
        ],
        "test/window8.test||test/window8.test": [
          "File: test/window8.test -> test/window8.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "6213:   INSERT INTO t2 VALUES(2, NULL);",
          "6214:   INSERT INTO t2 VALUES(3, NULL);",
          "6215:   INSERT INTO t2 VALUES(4, NULL);",
          "6216: } {}",
          "6220:   WINDOW win AS (",
          "6221:       ORDER BY b NULLS LAST RANGE BETWEEN 6 FOLLOWING AND UNBOUNDED FOLLOWING",
          "6222:   );",
          "6225: finish_test",
          "",
          "[Removed Lines]",
          "6218: do_execsql_test 7.1 {",
          "6219:   SELECT sum(a) OVER win FROM t2",
          "6223: } {9   9   9   9}",
          "",
          "[Added Lines]",
          "6216:   INSERT INTO t2 VALUES(5, 66);",
          "6217:   INSERT INTO t2 VALUES(6, 67);",
          "6220: do_execsql_test 7.1.1 {",
          "6221:   SELECT sum (a) OVER win FROM t2",
          "6225: } {9   9   9   9   9   9}",
          "6227: do_execsql_test 7.1.2 {",
          "6228:   SELECT sum (a) OVER win FROM t2",
          "6229:   WINDOW win AS (",
          "6230:       ORDER BY b NULLS LAST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING",
          "6231:   );",
          "6232: } {{}   {}   {}   9   9   9}",
          "6234: do_execsql_test 7.1.3 {",
          "6235:   SELECT sum (a) OVER win FROM t2",
          "6236:   WINDOW win AS (",
          "6237:       ORDER BY b NULLS LAST RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING",
          "6238:   );",
          "6239: } {{}   {}   {}   9   9   9}",
          "6241: do_execsql_test 7.1.4 {",
          "6242:   SELECT sum (a) OVER win FROM t2",
          "6243:   WINDOW win AS (",
          "6244:       ORDER BY b NULLS FIRST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING",
          "6245:   );",
          "6246: } {9   9   9   {}   {}   {}}",
          "6248: do_execsql_test 7.1.5 {",
          "6249:   SELECT sum (a) OVER win FROM t2",
          "6250:   WINDOW win AS (",
          "6251:       ORDER BY b NULLS FIRST RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING",
          "6252:   );",
          "6253: } {9   9   9   {}   {}   {}}",
          "6255: do_execsql_test 7.1.6 {",
          "6256:   SELECT sum (a) OVER win FROM t2",
          "6257:   WINDOW win AS (",
          "6258:       ORDER BY b NULLS LAST RANGE BETWEEN 1000 PRECEDING AND 2 PRECEDING",
          "6259:   );",
          "6260: } {{}   {}   1   9   9   9}",
          "6262: do_execsql_test 7.1.7 {",
          "6263:   SELECT sum (a) OVER win FROM t2",
          "6264:   WINDOW win AS (",
          "6265:       ORDER BY b NULLS LAST RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING",
          "6266:   );",
          "6267: } {{}   {}   {}   9   9   9}",
          "6269: do_execsql_test 7.1.8 {",
          "6270:   SELECT sum (a) OVER win FROM t2",
          "6271:   WINDOW win AS (",
          "6272:       ORDER BY b NULLS FIRST RANGE BETWEEN 1000 PRECEDING AND 2000 PRECEDING",
          "6273:   );",
          "6274: } {9   9   9   {}   {}   {}}",
          "6276: do_execsql_test 7.1.9 {",
          "6277:   SELECT sum (a) OVER win FROM t2",
          "6278:   WINDOW win AS (",
          "6279:       ORDER BY b NULLS FIRST RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING",
          "6280:   );",
          "6281: } {9   9   9   {}   {}   {}}",
          "6283: do_execsql_test 7.2.1 {",
          "6284:   SELECT min (a) OVER win FROM t2",
          "6285:   WINDOW win AS (",
          "6286:       ORDER BY b NULLS LAST RANGE BETWEEN 6 FOLLOWING AND UNBOUNDED FOLLOWING",
          "6287:   );",
          "6288: } {2   2   2   2   2   2}",
          "6290: do_execsql_test 7.2.2 {",
          "6291:   SELECT min (a) OVER win FROM t2",
          "6292:   WINDOW win AS (",
          "6293:       ORDER BY b NULLS LAST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING",
          "6294:   );",
          "6295: } {{}   {}   {}   2   2   2}",
          "6297: do_execsql_test 7.2.3 {",
          "6298:   SELECT min (a) OVER win FROM t2",
          "6299:   WINDOW win AS (",
          "6300:       ORDER BY b NULLS LAST RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING",
          "6301:   );",
          "6302: } {{}   {}   {}   2   2   2}",
          "6304: do_execsql_test 7.2.4 {",
          "6305:   SELECT min (a) OVER win FROM t2",
          "6306:   WINDOW win AS (",
          "6307:       ORDER BY b NULLS FIRST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING",
          "6308:   );",
          "6309: } {2   2   2   {}   {}   {}}",
          "6311: do_execsql_test 7.2.5 {",
          "6312:   SELECT min (a) OVER win FROM t2",
          "6313:   WINDOW win AS (",
          "6314:       ORDER BY b NULLS FIRST RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING",
          "6315:   );",
          "6316: } {2   2   2   {}   {}   {}}",
          "6318: do_execsql_test 7.2.6 {",
          "6319:   SELECT min (a) OVER win FROM t2",
          "6320:   WINDOW win AS (",
          "6321:       ORDER BY b NULLS LAST RANGE BETWEEN 1000 PRECEDING AND 2 PRECEDING",
          "6322:   );",
          "6323: } {{}   {}   1   2   2   2}",
          "6325: do_execsql_test 7.2.7 {",
          "6326:   SELECT min (a) OVER win FROM t2",
          "6327:   WINDOW win AS (",
          "6328:       ORDER BY b NULLS LAST RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING",
          "6329:   );",
          "6330: } {{}   {}   {}   2   2   2}",
          "6332: do_execsql_test 7.2.8 {",
          "6333:   SELECT min (a) OVER win FROM t2",
          "6334:   WINDOW win AS (",
          "6335:       ORDER BY b NULLS FIRST RANGE BETWEEN 1000 PRECEDING AND 2000 PRECEDING",
          "6336:   );",
          "6337: } {2   2   2   {}   {}   {}}",
          "6339: do_execsql_test 7.2.9 {",
          "6340:   SELECT min (a) OVER win FROM t2",
          "6341:   WINDOW win AS (",
          "6342:       ORDER BY b NULLS FIRST RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING",
          "6343:   );",
          "6344: } {2   2   2   {}   {}   {}}",
          "6346: do_execsql_test 7.3.1 {",
          "6347:   SELECT sum (a) OVER win FROM t2",
          "6348:   WINDOW win AS (",
          "6349:       ORDER BY b NULLS LAST RANGE BETWEEN 6 FOLLOWING AND UNBOUNDED FOLLOWING",
          "6350:   );",
          "6351: } {9   9   9   9   9   9}",
          "6353: do_execsql_test 7.3.2 {",
          "6354:   SELECT sum (a) OVER win FROM t2",
          "6355:   WINDOW win AS (",
          "6356:       ORDER BY b NULLS LAST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING",
          "6357:   );",
          "6358: } {{}   {}   {}   9   9   9}",
          "6360: do_execsql_test 7.3.3 {",
          "6361:   SELECT sum (a) OVER win FROM t2",
          "6362:   WINDOW win AS (",
          "6363:       ORDER BY b NULLS LAST RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING",
          "6364:   );",
          "6365: } {{}   {}   {}   9   9   9}",
          "6367: do_execsql_test 7.3.4 {",
          "6368:   SELECT sum (a) OVER win FROM t2",
          "6369:   WINDOW win AS (",
          "6370:       ORDER BY b NULLS FIRST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING",
          "6371:   );",
          "6372: } {9   9   9   {}   {}   {}}",
          "6374: do_execsql_test 7.3.5 {",
          "6375:   SELECT sum (a) OVER win FROM t2",
          "6376:   WINDOW win AS (",
          "6377:       ORDER BY b NULLS FIRST RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING",
          "6378:   );",
          "6379: } {9   9   9   {}   {}   {}}",
          "6381: do_execsql_test 7.3.6 {",
          "6382:   SELECT sum (a) OVER win FROM t2",
          "6383:   WINDOW win AS (",
          "6384:       ORDER BY b NULLS LAST RANGE BETWEEN 1000 PRECEDING AND 2 PRECEDING",
          "6385:   );",
          "6386: } {{}   {}   1   9   9   9}",
          "6388: do_execsql_test 7.3.7 {",
          "6389:   SELECT sum (a) OVER win FROM t2",
          "6390:   WINDOW win AS (",
          "6391:       ORDER BY b NULLS LAST RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING",
          "6392:   );",
          "6393: } {{}   {}   {}   9   9   9}",
          "6395: do_execsql_test 7.3.8 {",
          "6396:   SELECT sum (a) OVER win FROM t2",
          "6397:   WINDOW win AS (",
          "6398:       ORDER BY b NULLS FIRST RANGE BETWEEN 1000 PRECEDING AND 2000 PRECEDING",
          "6399:   );",
          "6400: } {9   9   9   {}   {}   {}}",
          "6402: do_execsql_test 7.3.9 {",
          "6403:   SELECT sum (a) OVER win FROM t2",
          "6404:   WINDOW win AS (",
          "6405:       ORDER BY b NULLS FIRST RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING",
          "6406:   );",
          "6407: } {9   9   9   {}   {}   {}}",
          "6409: do_execsql_test 7.4.1 {",
          "6410:   SELECT max (a) OVER win FROM t2",
          "6411:   WINDOW win AS (",
          "6412:       ORDER BY b NULLS LAST RANGE BETWEEN 6 FOLLOWING AND UNBOUNDED FOLLOWING",
          "6413:   );",
          "6414: } {4   4   4   4   4   4}",
          "6416: do_execsql_test 7.4.2 {",
          "6417:   SELECT max (a) OVER win FROM t2",
          "6418:   WINDOW win AS (",
          "6419:       ORDER BY b NULLS LAST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING",
          "6420:   );",
          "6421: } {{}   {}   {}   4   4   4}",
          "6423: do_execsql_test 7.4.3 {",
          "6424:   SELECT max (a) OVER win FROM t2",
          "6425:   WINDOW win AS (",
          "6426:       ORDER BY b NULLS LAST RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING",
          "6427:   );",
          "6428: } {{}   {}   {}   4   4   4}",
          "6430: do_execsql_test 7.4.4 {",
          "6431:   SELECT max (a) OVER win FROM t2",
          "6432:   WINDOW win AS (",
          "6433:       ORDER BY b NULLS FIRST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING",
          "6434:   );",
          "6435: } {4   4   4   {}   {}   {}}",
          "6437: do_execsql_test 7.4.5 {",
          "6438:   SELECT max (a) OVER win FROM t2",
          "6439:   WINDOW win AS (",
          "6440:       ORDER BY b NULLS FIRST RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING",
          "6441:   );",
          "6442: } {4   4   4   {}   {}   {}}",
          "6444: do_execsql_test 7.4.6 {",
          "6445:   SELECT max (a) OVER win FROM t2",
          "6446:   WINDOW win AS (",
          "6447:       ORDER BY b NULLS LAST RANGE BETWEEN 1000 PRECEDING AND 2 PRECEDING",
          "6448:   );",
          "6449: } {{}   {}   1   4   4   4}",
          "6451: do_execsql_test 7.4.7 {",
          "6452:   SELECT max (a) OVER win FROM t2",
          "6453:   WINDOW win AS (",
          "6454:       ORDER BY b NULLS LAST RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING",
          "6455:   );",
          "6456: } {{}   {}   {}   4   4   4}",
          "6458: do_execsql_test 7.4.8 {",
          "6459:   SELECT max (a) OVER win FROM t2",
          "6460:   WINDOW win AS (",
          "6461:       ORDER BY b NULLS FIRST RANGE BETWEEN 1000 PRECEDING AND 2000 PRECEDING",
          "6462:   );",
          "6463: } {4   4   4   {}   {}   {}}",
          "6465: do_execsql_test 7.4.9 {",
          "6466:   SELECT max (a) OVER win FROM t2",
          "6467:   WINDOW win AS (",
          "6468:       ORDER BY b NULLS FIRST RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING",
          "6469:   );",
          "6470: } {4   4   4   {}   {}   {}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}