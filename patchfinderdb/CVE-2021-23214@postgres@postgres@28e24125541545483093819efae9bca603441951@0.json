{
  "cve_id": "CVE-2021-23214",
  "cve_desc": "When the server is configured to use trust authentication with a clientcert requirement or to use cert authentication, a man-in-the-middle attacker can inject arbitrary SQL queries when a connection is first established, despite the use of SSL certificate verification and encryption.",
  "repo": "postgres/postgres",
  "patch_hash": "28e24125541545483093819efae9bca603441951",
  "patch_info": {
    "commit_hash": "28e24125541545483093819efae9bca603441951",
    "repo": "postgres/postgres",
    "commit_url": "https://github.com/postgres/postgres/commit/28e24125541545483093819efae9bca603441951",
    "files": [
      "src/backend/libpq/pqcomm.c",
      "src/backend/postmaster/postmaster.c",
      "src/include/libpq/libpq.h"
    ],
    "message": "Reject extraneous data after SSL or GSS encryption handshake.\n\nThe server collects up to a bufferload of data whenever it reads data\nfrom the client socket.  When SSL or GSS encryption is requested\nduring startup, any additional data received with the initial\nrequest message remained in the buffer, and would be treated as\nalready-decrypted data once the encryption handshake completed.\nThus, a man-in-the-middle with the ability to inject data into the\nTCP connection could stuff some cleartext data into the start of\na supposedly encryption-protected database session.\n\nThis could be abused to send faked SQL commands to the server,\nalthough that would only work if the server did not demand any\nauthentication data.  (However, a server relying on SSL certificate\nauthentication might well not do so.)\n\nTo fix, throw a protocol-violation error if the internal buffer\nis not empty after the encryption handshake.\n\nOur thanks to Jacob Champion for reporting this problem.\n\nSecurity: CVE-2021-23214",
    "before_after_code_files": [
      "src/backend/libpq/pqcomm.c||src/backend/libpq/pqcomm.c",
      "src/backend/postmaster/postmaster.c||src/backend/postmaster/postmaster.c",
      "src/include/libpq/libpq.h||src/include/libpq/libpq.h"
    ]
  },
  "patch_diff": {
    "src/backend/libpq/pqcomm.c||src/backend/libpq/pqcomm.c": [
      "File: src/backend/libpq/pqcomm.c -> src/backend/libpq/pqcomm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:  return 0;",
      "1142: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1150: bool",
      "1151: pq_buffer_has_data(void)",
      "1152: {",
      "1153:  return (PqRecvPointer < PqRecvLength);",
      "1154: }",
      "",
      "---------------"
    ],
    "src/backend/postmaster/postmaster.c||src/backend/postmaster/postmaster.c": [
      "File: src/backend/postmaster/postmaster.c -> src/backend/postmaster/postmaster.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2110:    return STATUS_ERROR;",
      "2111: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2119:   if (pq_buffer_has_data())",
      "2120:    ereport(FATAL,",
      "2121:      (errcode(ERRCODE_PROTOCOL_VIOLATION),",
      "2122:       errmsg(\"received unencrypted data after SSL request\"),",
      "2123:       errdetail(\"This could be either a client-software bug or evidence of an attempted man-in-the-middle attack.\")));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2142:    return STATUS_ERROR;",
      "2143: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2163:   if (pq_buffer_has_data())",
      "2164:    ereport(FATAL,",
      "2165:      (errcode(ERRCODE_PROTOCOL_VIOLATION),",
      "2166:       errmsg(\"received unencrypted data after GSSAPI encryption request\"),",
      "2167:       errdetail(\"This could be either a client-software bug or evidence of an attempted man-in-the-middle attack.\")));",
      "",
      "---------------"
    ],
    "src/include/libpq/libpq.h||src/include/libpq/libpq.h": [
      "File: src/include/libpq/libpq.h -> src/include/libpq/libpq.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "79: extern int pq_getbyte(void);",
      "80: extern int pq_peekbyte(void);",
      "81: extern int pq_getbyte_if_available(unsigned char *c);",
      "82: extern int pq_putmessage_v2(char msgtype, const char *s, size_t len);",
      "83: extern bool pq_check_connection(void);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "82: extern bool pq_buffer_has_data(void);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9394fb828998b4e71e4ef95eac6b80acac742835",
      "candidate_info": {
        "commit_hash": "9394fb828998b4e71e4ef95eac6b80acac742835",
        "repo": "postgres/postgres",
        "commit_url": "https://github.com/postgres/postgres/commit/9394fb828998b4e71e4ef95eac6b80acac742835",
        "files": [
          "src/backend/libpq/pqcomm.c",
          "src/backend/postmaster/postmaster.c",
          "src/include/libpq/libpq.h"
        ],
        "message": "Reject extraneous data after SSL or GSS encryption handshake.\n\nThe server collects up to a bufferload of data whenever it reads data\nfrom the client socket.  When SSL or GSS encryption is requested\nduring startup, any additional data received with the initial\nrequest message remained in the buffer, and would be treated as\nalready-decrypted data once the encryption handshake completed.\nThus, a man-in-the-middle with the ability to inject data into the\nTCP connection could stuff some cleartext data into the start of\na supposedly encryption-protected database session.\n\nThis could be abused to send faked SQL commands to the server,\nalthough that would only work if the server did not demand any\nauthentication data.  (However, a server relying on SSL certificate\nauthentication might well not do so.)\n\nTo fix, throw a protocol-violation error if the internal buffer\nis not empty after the encryption handshake.\n\nOur thanks to Jacob Champion for reporting this problem.\n\nSecurity: CVE-2021-23214",
        "before_after_code_files": [
          "src/backend/libpq/pqcomm.c||src/backend/libpq/pqcomm.c",
          "src/backend/postmaster/postmaster.c||src/backend/postmaster/postmaster.c",
          "src/include/libpq/libpq.h||src/include/libpq/libpq.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/backend/libpq/pqcomm.c||src/backend/libpq/pqcomm.c",
            "src/backend/postmaster/postmaster.c||src/backend/postmaster/postmaster.c",
            "src/include/libpq/libpq.h||src/include/libpq/libpq.h"
          ],
          "candidate": [
            "src/backend/libpq/pqcomm.c||src/backend/libpq/pqcomm.c",
            "src/backend/postmaster/postmaster.c||src/backend/postmaster/postmaster.c",
            "src/include/libpq/libpq.h||src/include/libpq/libpq.h"
          ]
        }
      },
      "candidate_diff": {
        "src/backend/libpq/pqcomm.c||src/backend/libpq/pqcomm.c": [
          "File: src/backend/libpq/pqcomm.c -> src/backend/libpq/pqcomm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1199:  }",
          "1200: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1208: bool",
          "1209: pq_buffer_has_data(void)",
          "1210: {",
          "1211:  return (PqRecvPointer < PqRecvLength);",
          "1212: }",
          "",
          "---------------"
        ],
        "src/backend/postmaster/postmaster.c||src/backend/postmaster/postmaster.c": [
          "File: src/backend/postmaster/postmaster.c -> src/backend/postmaster/postmaster.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2012:   if (SSLok == 'S' && secure_open_server(port) == -1)",
          "2013:    return STATUS_ERROR;",
          "2014: #endif",
          "2017:   return ProcessStartupPacket(port, true);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2022:   if (pq_buffer_has_data())",
          "2023:    ereport(FATAL,",
          "2024:      (errcode(ERRCODE_PROTOCOL_VIOLATION),",
          "2025:       errmsg(\"received unencrypted data after SSL request\"),",
          "2026:       errdetail(\"This could be either a client-software bug or evidence of an attempted man-in-the-middle attack.\")));",
          "",
          "---------------"
        ],
        "src/include/libpq/libpq.h||src/include/libpq/libpq.h": [
          "File: src/include/libpq/libpq.h -> src/include/libpq/libpq.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "70: extern int pq_getbyte(void);",
          "71: extern int pq_peekbyte(void);",
          "72: extern int pq_getbyte_if_available(unsigned char *c);",
          "73: extern int pq_putbytes(const char *s, size_t len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73: extern bool pq_buffer_has_data(void);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9d5a76b8d18d6584341f754090c3007a54215f45",
      "candidate_info": {
        "commit_hash": "9d5a76b8d18d6584341f754090c3007a54215f45",
        "repo": "postgres/postgres",
        "commit_url": "https://github.com/postgres/postgres/commit/9d5a76b8d18d6584341f754090c3007a54215f45",
        "files": [
          "src/backend/libpq/pqcomm.c",
          "src/backend/postmaster/postmaster.c",
          "src/include/libpq/libpq.h"
        ],
        "message": "Reject extraneous data after SSL or GSS encryption handshake.\n\nThe server collects up to a bufferload of data whenever it reads data\nfrom the client socket.  When SSL or GSS encryption is requested\nduring startup, any additional data received with the initial\nrequest message remained in the buffer, and would be treated as\nalready-decrypted data once the encryption handshake completed.\nThus, a man-in-the-middle with the ability to inject data into the\nTCP connection could stuff some cleartext data into the start of\na supposedly encryption-protected database session.\n\nThis could be abused to send faked SQL commands to the server,\nalthough that would only work if the server did not demand any\nauthentication data.  (However, a server relying on SSL certificate\nauthentication might well not do so.)\n\nTo fix, throw a protocol-violation error if the internal buffer\nis not empty after the encryption handshake.\n\nOur thanks to Jacob Champion for reporting this problem.\n\nSecurity: CVE-2021-23214",
        "before_after_code_files": [
          "src/backend/libpq/pqcomm.c||src/backend/libpq/pqcomm.c",
          "src/backend/postmaster/postmaster.c||src/backend/postmaster/postmaster.c",
          "src/include/libpq/libpq.h||src/include/libpq/libpq.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/backend/libpq/pqcomm.c||src/backend/libpq/pqcomm.c",
            "src/backend/postmaster/postmaster.c||src/backend/postmaster/postmaster.c",
            "src/include/libpq/libpq.h||src/include/libpq/libpq.h"
          ],
          "candidate": [
            "src/backend/libpq/pqcomm.c||src/backend/libpq/pqcomm.c",
            "src/backend/postmaster/postmaster.c||src/backend/postmaster/postmaster.c",
            "src/include/libpq/libpq.h||src/include/libpq/libpq.h"
          ]
        }
      },
      "candidate_diff": {
        "src/backend/libpq/pqcomm.c||src/backend/libpq/pqcomm.c": [
          "File: src/backend/libpq/pqcomm.c -> src/backend/libpq/pqcomm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1141:  return 0;",
          "1142: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1150: bool",
          "1151: pq_buffer_has_data(void)",
          "1152: {",
          "1153:  return (PqRecvPointer < PqRecvLength);",
          "1154: }",
          "",
          "---------------"
        ],
        "src/backend/postmaster/postmaster.c||src/backend/postmaster/postmaster.c": [
          "File: src/backend/postmaster/postmaster.c -> src/backend/postmaster/postmaster.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2054:    return STATUS_ERROR;",
          "2055: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2063:   if (pq_buffer_has_data())",
          "2064:    ereport(FATAL,",
          "2065:      (errcode(ERRCODE_PROTOCOL_VIOLATION),",
          "2066:       errmsg(\"received unencrypted data after SSL request\"),",
          "2067:       errdetail(\"This could be either a client-software bug or evidence of an attempted man-in-the-middle attack.\")));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2086:    return STATUS_ERROR;",
          "2087: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2107:   if (pq_buffer_has_data())",
          "2108:    ereport(FATAL,",
          "2109:      (errcode(ERRCODE_PROTOCOL_VIOLATION),",
          "2110:       errmsg(\"received unencrypted data after GSSAPI encryption request\"),",
          "2111:       errdetail(\"This could be either a client-software bug or evidence of an attempted man-in-the-middle attack.\")));",
          "",
          "---------------"
        ],
        "src/include/libpq/libpq.h||src/include/libpq/libpq.h": [
          "File: src/include/libpq/libpq.h -> src/include/libpq/libpq.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "79: extern int pq_getbyte(void);",
          "80: extern int pq_peekbyte(void);",
          "81: extern int pq_getbyte_if_available(unsigned char *c);",
          "82: extern int pq_putmessage_v2(char msgtype, const char *s, size_t len);",
          "83: extern bool pq_check_connection(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82: extern bool pq_buffer_has_data(void);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9ae0f1112954989e955b4b29e4580216eccfcee4",
      "candidate_info": {
        "commit_hash": "9ae0f1112954989e955b4b29e4580216eccfcee4",
        "repo": "postgres/postgres",
        "commit_url": "https://github.com/postgres/postgres/commit/9ae0f1112954989e955b4b29e4580216eccfcee4",
        "files": [
          "src/backend/libpq/pqcomm.c",
          "src/backend/postmaster/postmaster.c",
          "src/include/libpq/libpq.h"
        ],
        "message": "Reject extraneous data after SSL or GSS encryption handshake.\n\nThe server collects up to a bufferload of data whenever it reads data\nfrom the client socket.  When SSL or GSS encryption is requested\nduring startup, any additional data received with the initial\nrequest message remained in the buffer, and would be treated as\nalready-decrypted data once the encryption handshake completed.\nThus, a man-in-the-middle with the ability to inject data into the\nTCP connection could stuff some cleartext data into the start of\na supposedly encryption-protected database session.\n\nThis could be abused to send faked SQL commands to the server,\nalthough that would only work if the server did not demand any\nauthentication data.  (However, a server relying on SSL certificate\nauthentication might well not do so.)\n\nTo fix, throw a protocol-violation error if the internal buffer\nis not empty after the encryption handshake.\n\nOur thanks to Jacob Champion for reporting this problem.\n\nSecurity: CVE-2021-23214",
        "before_after_code_files": [
          "src/backend/libpq/pqcomm.c||src/backend/libpq/pqcomm.c",
          "src/backend/postmaster/postmaster.c||src/backend/postmaster/postmaster.c",
          "src/include/libpq/libpq.h||src/include/libpq/libpq.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/backend/libpq/pqcomm.c||src/backend/libpq/pqcomm.c",
            "src/backend/postmaster/postmaster.c||src/backend/postmaster/postmaster.c",
            "src/include/libpq/libpq.h||src/include/libpq/libpq.h"
          ],
          "candidate": [
            "src/backend/libpq/pqcomm.c||src/backend/libpq/pqcomm.c",
            "src/backend/postmaster/postmaster.c||src/backend/postmaster/postmaster.c",
            "src/include/libpq/libpq.h||src/include/libpq/libpq.h"
          ]
        }
      },
      "candidate_diff": {
        "src/backend/libpq/pqcomm.c||src/backend/libpq/pqcomm.c": [
          "File: src/backend/libpq/pqcomm.c -> src/backend/libpq/pqcomm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1199:  }",
          "1200: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1208: bool",
          "1209: pq_buffer_has_data(void)",
          "1210: {",
          "1211:  return (PqRecvPointer < PqRecvLength);",
          "1212: }",
          "",
          "---------------"
        ],
        "src/backend/postmaster/postmaster.c||src/backend/postmaster/postmaster.c": [
          "File: src/backend/postmaster/postmaster.c -> src/backend/postmaster/postmaster.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2061:   if (SSLok == 'S' && secure_open_server(port) == -1)",
          "2062:    return STATUS_ERROR;",
          "2063: #endif",
          "2066:   return ProcessStartupPacket(port, true);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2071:   if (pq_buffer_has_data())",
          "2072:    ereport(FATAL,",
          "2073:      (errcode(ERRCODE_PROTOCOL_VIOLATION),",
          "2074:       errmsg(\"received unencrypted data after SSL request\"),",
          "2075:       errdetail(\"This could be either a client-software bug or evidence of an attempted man-in-the-middle attack.\")));",
          "",
          "---------------"
        ],
        "src/include/libpq/libpq.h||src/include/libpq/libpq.h": [
          "File: src/include/libpq/libpq.h -> src/include/libpq/libpq.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "70: extern int pq_getbyte(void);",
          "71: extern int pq_peekbyte(void);",
          "72: extern int pq_getbyte_if_available(unsigned char *c);",
          "73: extern int pq_putbytes(const char *s, size_t len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73: extern bool pq_buffer_has_data(void);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "046c2c846b741a12e7fd61d8d86bf324a20e3dfc",
      "candidate_info": {
        "commit_hash": "046c2c846b741a12e7fd61d8d86bf324a20e3dfc",
        "repo": "postgres/postgres",
        "commit_url": "https://github.com/postgres/postgres/commit/046c2c846b741a12e7fd61d8d86bf324a20e3dfc",
        "files": [
          "src/backend/libpq/pqcomm.c",
          "src/backend/postmaster/postmaster.c",
          "src/include/libpq/libpq.h"
        ],
        "message": "Reject extraneous data after SSL or GSS encryption handshake.\n\nThe server collects up to a bufferload of data whenever it reads data\nfrom the client socket.  When SSL or GSS encryption is requested\nduring startup, any additional data received with the initial\nrequest message remained in the buffer, and would be treated as\nalready-decrypted data once the encryption handshake completed.\nThus, a man-in-the-middle with the ability to inject data into the\nTCP connection could stuff some cleartext data into the start of\na supposedly encryption-protected database session.\n\nThis could be abused to send faked SQL commands to the server,\nalthough that would only work if the server did not demand any\nauthentication data.  (However, a server relying on SSL certificate\nauthentication might well not do so.)\n\nTo fix, throw a protocol-violation error if the internal buffer\nis not empty after the encryption handshake.\n\nOur thanks to Jacob Champion for reporting this problem.\n\nSecurity: CVE-2021-23214",
        "before_after_code_files": [
          "src/backend/libpq/pqcomm.c||src/backend/libpq/pqcomm.c",
          "src/backend/postmaster/postmaster.c||src/backend/postmaster/postmaster.c",
          "src/include/libpq/libpq.h||src/include/libpq/libpq.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/backend/libpq/pqcomm.c||src/backend/libpq/pqcomm.c",
            "src/backend/postmaster/postmaster.c||src/backend/postmaster/postmaster.c",
            "src/include/libpq/libpq.h||src/include/libpq/libpq.h"
          ],
          "candidate": [
            "src/backend/libpq/pqcomm.c||src/backend/libpq/pqcomm.c",
            "src/backend/postmaster/postmaster.c||src/backend/postmaster/postmaster.c",
            "src/include/libpq/libpq.h||src/include/libpq/libpq.h"
          ]
        }
      },
      "candidate_diff": {
        "src/backend/libpq/pqcomm.c||src/backend/libpq/pqcomm.c": [
          "File: src/backend/libpq/pqcomm.c -> src/backend/libpq/pqcomm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1176:  }",
          "1177: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1185: bool",
          "1186: pq_buffer_has_data(void)",
          "1187: {",
          "1188:  return (PqRecvPointer < PqRecvLength);",
          "1189: }",
          "",
          "---------------"
        ],
        "src/backend/postmaster/postmaster.c||src/backend/postmaster/postmaster.c": [
          "File: src/backend/postmaster/postmaster.c -> src/backend/postmaster/postmaster.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2025:   if (SSLok == 'S' && secure_open_server(port) == -1)",
          "2026:    return STATUS_ERROR;",
          "2027: #endif",
          "2030:   return ProcessStartupPacket(port, true);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2035:   if (pq_buffer_has_data())",
          "2036:    ereport(FATAL,",
          "2037:      (errcode(ERRCODE_PROTOCOL_VIOLATION),",
          "2038:       errmsg(\"received unencrypted data after SSL request\"),",
          "2039:       errdetail(\"This could be either a client-software bug or evidence of an attempted man-in-the-middle attack.\")));",
          "",
          "---------------"
        ],
        "src/include/libpq/libpq.h||src/include/libpq/libpq.h": [
          "File: src/include/libpq/libpq.h -> src/include/libpq/libpq.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "71: extern int pq_getbyte(void);",
          "72: extern int pq_peekbyte(void);",
          "73: extern int pq_getbyte_if_available(unsigned char *c);",
          "74: extern int pq_putbytes(const char *s, size_t len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74: extern bool pq_buffer_has_data(void);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e92ed93e8eb76ee0701b42d4f0ce94e6af3fc741",
      "candidate_info": {
        "commit_hash": "e92ed93e8eb76ee0701b42d4f0ce94e6af3fc741",
        "repo": "postgres/postgres",
        "commit_url": "https://github.com/postgres/postgres/commit/e92ed93e8eb76ee0701b42d4f0ce94e6af3fc741",
        "files": [
          "src/backend/libpq/pqcomm.c",
          "src/backend/postmaster/postmaster.c",
          "src/include/libpq/libpq.h"
        ],
        "message": "Reject extraneous data after SSL or GSS encryption handshake.\n\nThe server collects up to a bufferload of data whenever it reads data\nfrom the client socket.  When SSL or GSS encryption is requested\nduring startup, any additional data received with the initial\nrequest message remained in the buffer, and would be treated as\nalready-decrypted data once the encryption handshake completed.\nThus, a man-in-the-middle with the ability to inject data into the\nTCP connection could stuff some cleartext data into the start of\na supposedly encryption-protected database session.\n\nThis could be abused to send faked SQL commands to the server,\nalthough that would only work if the server did not demand any\nauthentication data.  (However, a server relying on SSL certificate\nauthentication might well not do so.)\n\nTo fix, throw a protocol-violation error if the internal buffer\nis not empty after the encryption handshake.\n\nOur thanks to Jacob Champion for reporting this problem.\n\nSecurity: CVE-2021-23214",
        "before_after_code_files": [
          "src/backend/libpq/pqcomm.c||src/backend/libpq/pqcomm.c",
          "src/backend/postmaster/postmaster.c||src/backend/postmaster/postmaster.c",
          "src/include/libpq/libpq.h||src/include/libpq/libpq.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/backend/libpq/pqcomm.c||src/backend/libpq/pqcomm.c",
            "src/backend/postmaster/postmaster.c||src/backend/postmaster/postmaster.c",
            "src/include/libpq/libpq.h||src/include/libpq/libpq.h"
          ],
          "candidate": [
            "src/backend/libpq/pqcomm.c||src/backend/libpq/pqcomm.c",
            "src/backend/postmaster/postmaster.c||src/backend/postmaster/postmaster.c",
            "src/include/libpq/libpq.h||src/include/libpq/libpq.h"
          ]
        }
      },
      "candidate_diff": {
        "src/backend/libpq/pqcomm.c||src/backend/libpq/pqcomm.c": [
          "File: src/backend/libpq/pqcomm.c -> src/backend/libpq/pqcomm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1183:  }",
          "1184: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1192: bool",
          "1193: pq_buffer_has_data(void)",
          "1194: {",
          "1195:  return (PqRecvPointer < PqRecvLength);",
          "1196: }",
          "",
          "---------------"
        ],
        "src/backend/postmaster/postmaster.c||src/backend/postmaster/postmaster.c": [
          "File: src/backend/postmaster/postmaster.c -> src/backend/postmaster/postmaster.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2049:    return STATUS_ERROR;",
          "2050: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2058:   if (pq_buffer_has_data())",
          "2059:    ereport(FATAL,",
          "2060:      (errcode(ERRCODE_PROTOCOL_VIOLATION),",
          "2061:       errmsg(\"received unencrypted data after SSL request\"),",
          "2062:       errdetail(\"This could be either a client-software bug or evidence of an attempted man-in-the-middle attack.\")));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2081:    return STATUS_ERROR;",
          "2082: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2102:   if (pq_buffer_has_data())",
          "2103:    ereport(FATAL,",
          "2104:      (errcode(ERRCODE_PROTOCOL_VIOLATION),",
          "2105:       errmsg(\"received unencrypted data after GSSAPI encryption request\"),",
          "2106:       errdetail(\"This could be either a client-software bug or evidence of an attempted man-in-the-middle attack.\")));",
          "",
          "---------------"
        ],
        "src/include/libpq/libpq.h||src/include/libpq/libpq.h": [
          "File: src/include/libpq/libpq.h -> src/include/libpq/libpq.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "72: extern int pq_getbyte(void);",
          "73: extern int pq_peekbyte(void);",
          "74: extern int pq_getbyte_if_available(unsigned char *c);",
          "75: extern int pq_putbytes(const char *s, size_t len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75: extern bool pq_buffer_has_data(void);",
          "",
          "---------------"
        ]
      }
    }
  ]
}