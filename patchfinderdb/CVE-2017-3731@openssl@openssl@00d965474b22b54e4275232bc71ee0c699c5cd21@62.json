{
  "cve_id": "CVE-2017-3731",
  "cve_desc": "If an SSL/TLS server or client is running on a 32-bit host, and a specific cipher is being used, then a truncated packet can cause that server or client to perform an out-of-bounds read, usually resulting in a crash. For OpenSSL 1.1.0, the crash can be triggered when using CHACHA20/POLY1305; users should upgrade to 1.1.0d. For Openssl 1.0.2, the crash can be triggered when using RC4-MD5; users who have not disabled that algorithm should update to 1.0.2k.",
  "repo": "openssl/openssl",
  "patch_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
  "patch_info": {
    "commit_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/00d965474b22b54e4275232bc71ee0c699c5cd21",
    "files": [
      "crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c"
    ],
    "message": "crypto/evp: harden AEAD ciphers.\n\nOriginally a crash in 32-bit build was reported CHACHA20-POLY1305\ncipher. The crash is triggered by truncated packet and is result\nof excessive hashing to the edge of accessible memory. Since hash\noperation is read-only it is not considered to be exploitable\nbeyond a DoS condition. Other ciphers were hardened.\n\nThanks to Robert \u015awi\u0119cki for report.\n\nCVE-2017-3731\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "crypto/evp/e_aes.c||crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
    ]
  },
  "patch_diff": {
    "crypto/evp/e_aes.c||crypto/evp/e_aes.c": [
      "File: crypto/evp/e_aes.c -> crypto/evp/e_aes.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1388:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1389:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1391:             len -= EVP_GCM_TLS_EXPLICIT_IV_LEN;",
      "1394:                 len -= EVP_GCM_TLS_TAG_LEN;",
      "1395:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1396:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1397:         }",
      "",
      "[Removed Lines]",
      "1393:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1391:             if (len < EVP_GCM_TLS_EXPLICIT_IV_LEN)",
      "1392:                 return 0;",
      "1395:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1396:                 if (len < EVP_GCM_TLS_TAG_LEN)",
      "1397:                     return 0;",
      "1399:             }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1946:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1947:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1949:             len -= EVP_CCM_TLS_EXPLICIT_IV_LEN;",
      "1952:                 len -= cctx->M;",
      "1953:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1954:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1955:         }",
      "",
      "[Removed Lines]",
      "1951:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1954:             if (len < EVP_CCM_TLS_EXPLICIT_IV_LEN)",
      "1955:                 return 0;",
      "1958:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1959:                 if (len < cctx->M)",
      "1960:                     return 0;",
      "1962:             }",
      "",
      "---------------"
    ],
    "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c": [
      "File: crypto/evp/e_chacha20_poly1305.c -> crypto/evp/e_chacha20_poly1305.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "398:             len = aad[EVP_AEAD_TLS1_AAD_LEN - 2] << 8 |",
      "399:                   aad[EVP_AEAD_TLS1_AAD_LEN - 1];",
      "400:             if (!ctx->encrypt) {",
      "402:                 memcpy(temp, aad, EVP_AEAD_TLS1_AAD_LEN - 2);",
      "403:                 aad = temp;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "401:                 if (len < POLY1305_BLOCK_SIZE)",
      "402:                     return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9ade16edd5260e7d19fe1ac6fd7eb016dc7cbea7",
      "candidate_info": {
        "commit_hash": "9ade16edd5260e7d19fe1ac6fd7eb016dc7cbea7",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/9ade16edd5260e7d19fe1ac6fd7eb016dc7cbea7",
        "files": [
          "crypto/bn/bn_gcd.c"
        ],
        "message": "Refomat a few comments on 80 cols\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3066)\n(cherry picked from commit cbe952418376a25acd872db4281a0b09735001f1)",
        "before_after_code_files": [
          "crypto/bn/bn_gcd.c||crypto/bn/bn_gcd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/bn/bn_gcd.c||crypto/bn/bn_gcd.c": [
          "File: crypto/bn/bn_gcd.c -> crypto/bn/bn_gcd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "355:             A = B;",
          "",
          "[Removed Lines]",
          "351:             tmp = A;            /* keep the BIGNUM object, the value does not",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "403:                     goto err;",
          "404:             }",
          "408:             Y = X;",
          "409:             X = tmp;",
          "410:             sign = -sign;",
          "",
          "[Removed Lines]",
          "406:             M = Y;              /* keep the BIGNUM object, the value does not",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e2cefab06a9e1b8d9a21d030754f62dfbb199950",
      "candidate_info": {
        "commit_hash": "e2cefab06a9e1b8d9a21d030754f62dfbb199950",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/e2cefab06a9e1b8d9a21d030754f62dfbb199950",
        "files": [
          "test/bad_dtls_test.c"
        ],
        "message": "Solution proposal for issue #1647.\n\nAvoid a memory alignment issue.\n\nSigned-off-by: Matthias Kraft <Matthias.Kraft@softwareag.com>\nCLA: trivial\nReviewed-by: Andy Polyakov <appro@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1650)\n\n(cherry picked from commit af5883fec95eb8c79c379b09885440a0d88b2d38)",
        "before_after_code_files": [
          "test/bad_dtls_test.c||test/bad_dtls_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/bad_dtls_test.c||test/bad_dtls_test.c": [
          "File: test/bad_dtls_test.c -> test/bad_dtls_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "451:     BIO *rbio;",
          "452:     BIO *wbio;",
          "453:     BIO *err;",
          "454:     int testresult = 0;",
          "455:     int ret;",
          "456:     int i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "454:     time_t now = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "464:     RAND_bytes(master_secret, sizeof(master_secret));",
          "465:     RAND_bytes(cookie, sizeof(cookie));",
          "466:     RAND_bytes(server_random + 4, sizeof(server_random) - 4);",
          "469:     sess = client_session();",
          "470:     if (sess == NULL) {",
          "",
          "[Removed Lines]",
          "467:     time((void *)server_random);",
          "",
          "[Added Lines]",
          "469:     now = time(NULL);",
          "470:     memcpy(server_random, &now, sizeof(now));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "88a3b5322170444d8d4003f6d8af82c3976c570b",
      "candidate_info": {
        "commit_hash": "88a3b5322170444d8d4003f6d8af82c3976c570b",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/88a3b5322170444d8d4003f6d8af82c3976c570b",
        "files": [
          "crypto/seed/seed.c"
        ],
        "message": "Use _WIN32 over WIN32 for preprocessor conditional\n\nThe intent seems to be that the WIN32 symbol is for things that are a direct\nbyproduct of being a windows-variant configuration and should be used for\nfeature en/disablement on windows systems.  Use of the _WIN32 symbol is more\nwidespread, being used to implement platform portability of more generic code.\n\nWe do define WIN32 in some situations in e_os.h, but that is not included\nuniversally.\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2642)\n(cherry picked from commit ac879ed62a19f3c878f7be3020a1b93cc77f4b38)",
        "before_after_code_files": [
          "crypto/seed/seed.c||crypto/seed/seed.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/seed/seed.c||crypto/seed/seed.c": [
          "File: crypto/seed/seed.c -> crypto/seed/seed.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: # include <stdio.h>",
          "38: # include <stdlib.h>",
          "39: # include <string.h>",
          "41: #  include <memory.h>",
          "42: # endif",
          "",
          "[Removed Lines]",
          "40: # ifdef WIN32",
          "",
          "[Added Lines]",
          "40: # ifdef _WIN32",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9c5a691d578a4debfd6ecacc030a85900906bf0d",
      "candidate_info": {
        "commit_hash": "9c5a691d578a4debfd6ecacc030a85900906bf0d",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/9c5a691d578a4debfd6ecacc030a85900906bf0d",
        "files": [
          "test/handshake_helper.c",
          "test/ssl-tests/17-renegotiate.conf",
          "test/ssl-tests/17-renegotiate.conf.in",
          "test/ssl-tests/18-dtls-renegotiate.conf",
          "test/ssl-tests/18-dtls-renegotiate.conf.in",
          "test/ssl_test_ctx.c",
          "test/ssl_test_ctx.h"
        ],
        "message": "Provide a test for the Encrypt-Then-Mac renegotiation crash\n\nChanging the ciphersuite during a renegotiation can result in a crash\nleading to a DoS attack. ETM has not been implemented in 1.1.0 for DTLS\nso this is TLS only.\n\nThis commit provides a test for the issue.\n\nCVE-2017-3733\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "test/handshake_helper.c||test/handshake_helper.c",
          "test/ssl-tests/17-renegotiate.conf||test/ssl-tests/17-renegotiate.conf",
          "test/ssl-tests/17-renegotiate.conf.in||test/ssl-tests/17-renegotiate.conf.in",
          "test/ssl-tests/18-dtls-renegotiate.conf||test/ssl-tests/18-dtls-renegotiate.conf",
          "test/ssl-tests/18-dtls-renegotiate.conf.in||test/ssl-tests/18-dtls-renegotiate.conf.in",
          "test/ssl_test_ctx.c||test/ssl_test_ctx.c",
          "test/ssl_test_ctx.h||test/ssl_test_ctx.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/handshake_helper.c||test/handshake_helper.c": [
          "File: test/handshake_helper.c -> test/handshake_helper.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "611:                 ret = SSL_renegotiate(peer->ssl);",
          "614:             if (!ret) {",
          "615:                 peer->status = PEER_ERROR;",
          "616:                 return;",
          "",
          "[Removed Lines]",
          "610:             if (SSL_is_server(peer->ssl))",
          "612:             else",
          "613:                 ret = SSL_renegotiate_abbreviated(peer->ssl);",
          "",
          "[Added Lines]",
          "610:             if (SSL_is_server(peer->ssl)) {",
          "612:             } else {",
          "613:                 if (test_ctx->extra.client.reneg_ciphers != NULL) {",
          "614:                     if (!SSL_set_cipher_list(peer->ssl,",
          "615:                                 test_ctx->extra.client.reneg_ciphers)) {",
          "616:                         peer->status = PEER_ERROR;",
          "617:                         return;",
          "618:                     }",
          "619:                     ret = SSL_renegotiate(peer->ssl);",
          "620:                 } else {",
          "621:                     ret = SSL_renegotiate_abbreviated(peer->ssl);",
          "622:                 }",
          "623:             }",
          "",
          "---------------"
        ],
        "test/ssl-tests/17-renegotiate.conf||test/ssl-tests/17-renegotiate.conf": [
          "File: test/ssl-tests/17-renegotiate.conf -> test/ssl-tests/17-renegotiate.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Generated with generate_ssl_tests.pl",
          "5: test-0 = 0-renegotiate-client-no-resume",
          "6: test-1 = 1-renegotiate-client-resume",
          "",
          "[Removed Lines]",
          "3: num_tests = 6",
          "",
          "[Added Lines]",
          "3: num_tests = 10",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8: test-3 = 3-renegotiate-server-resume",
          "9: test-4 = 4-renegotiate-client-auth-require",
          "10: test-5 = 5-renegotiate-client-auth-once",
          "11: # ===========================================================",
          "13: [0-renegotiate-client-no-resume]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: test-6 = 6-renegotiate-aead-to-non-aead",
          "12: test-7 = 7-renegotiate-non-aead-to-aead",
          "13: test-8 = 8-renegotiate-non-aead-to-non-aead",
          "14: test-9 = 9-renegotiate-aead-to-aead",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "178: ResumptionExpected = No",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185: # ===========================================================",
          "187: [6-renegotiate-aead-to-non-aead]",
          "188: ssl_conf = 6-renegotiate-aead-to-non-aead-ssl",
          "190: [6-renegotiate-aead-to-non-aead-ssl]",
          "191: server = 6-renegotiate-aead-to-non-aead-server",
          "192: client = 6-renegotiate-aead-to-non-aead-client",
          "194: [6-renegotiate-aead-to-non-aead-server]",
          "195: Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem",
          "196: CipherString = DEFAULT",
          "197: MaxProtocol = TLSv1.2",
          "198: Options = NoResumptionOnRenegotiation",
          "199: PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem",
          "201: [6-renegotiate-aead-to-non-aead-client]",
          "202: CipherString = AES128-GCM-SHA256",
          "203: VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem",
          "204: VerifyMode = Peer",
          "206: [test-6]",
          "207: ExpectedResult = Success",
          "208: HandshakeMode = RenegotiateClient",
          "209: Method = TLS",
          "210: ResumptionExpected = No",
          "211: client = 6-renegotiate-aead-to-non-aead-client-extra",
          "213: [6-renegotiate-aead-to-non-aead-client-extra]",
          "214: RenegotiateCiphers = AES128-SHA",
          "217: # ===========================================================",
          "219: [7-renegotiate-non-aead-to-aead]",
          "220: ssl_conf = 7-renegotiate-non-aead-to-aead-ssl",
          "222: [7-renegotiate-non-aead-to-aead-ssl]",
          "223: server = 7-renegotiate-non-aead-to-aead-server",
          "224: client = 7-renegotiate-non-aead-to-aead-client",
          "226: [7-renegotiate-non-aead-to-aead-server]",
          "227: Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem",
          "228: CipherString = DEFAULT",
          "229: MaxProtocol = TLSv1.2",
          "230: Options = NoResumptionOnRenegotiation",
          "231: PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem",
          "233: [7-renegotiate-non-aead-to-aead-client]",
          "234: CipherString = AES128-SHA",
          "235: VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem",
          "236: VerifyMode = Peer",
          "238: [test-7]",
          "239: ExpectedResult = Success",
          "240: HandshakeMode = RenegotiateClient",
          "241: Method = TLS",
          "242: ResumptionExpected = No",
          "243: client = 7-renegotiate-non-aead-to-aead-client-extra",
          "245: [7-renegotiate-non-aead-to-aead-client-extra]",
          "246: RenegotiateCiphers = AES128-GCM-SHA256",
          "249: # ===========================================================",
          "251: [8-renegotiate-non-aead-to-non-aead]",
          "252: ssl_conf = 8-renegotiate-non-aead-to-non-aead-ssl",
          "254: [8-renegotiate-non-aead-to-non-aead-ssl]",
          "255: server = 8-renegotiate-non-aead-to-non-aead-server",
          "256: client = 8-renegotiate-non-aead-to-non-aead-client",
          "258: [8-renegotiate-non-aead-to-non-aead-server]",
          "259: Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem",
          "260: CipherString = DEFAULT",
          "261: MaxProtocol = TLSv1.2",
          "262: Options = NoResumptionOnRenegotiation",
          "263: PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem",
          "265: [8-renegotiate-non-aead-to-non-aead-client]",
          "266: CipherString = AES128-SHA",
          "267: VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem",
          "268: VerifyMode = Peer",
          "270: [test-8]",
          "271: ExpectedResult = Success",
          "272: HandshakeMode = RenegotiateClient",
          "273: Method = TLS",
          "274: ResumptionExpected = No",
          "275: client = 8-renegotiate-non-aead-to-non-aead-client-extra",
          "277: [8-renegotiate-non-aead-to-non-aead-client-extra]",
          "278: RenegotiateCiphers = AES256-SHA",
          "281: # ===========================================================",
          "283: [9-renegotiate-aead-to-aead]",
          "284: ssl_conf = 9-renegotiate-aead-to-aead-ssl",
          "286: [9-renegotiate-aead-to-aead-ssl]",
          "287: server = 9-renegotiate-aead-to-aead-server",
          "288: client = 9-renegotiate-aead-to-aead-client",
          "290: [9-renegotiate-aead-to-aead-server]",
          "291: Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem",
          "292: CipherString = DEFAULT",
          "293: MaxProtocol = TLSv1.2",
          "294: Options = NoResumptionOnRenegotiation",
          "295: PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem",
          "297: [9-renegotiate-aead-to-aead-client]",
          "298: CipherString = AES128-GCM-SHA256",
          "299: VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem",
          "300: VerifyMode = Peer",
          "302: [test-9]",
          "303: ExpectedResult = Success",
          "304: HandshakeMode = RenegotiateClient",
          "305: Method = TLS",
          "306: ResumptionExpected = No",
          "307: client = 9-renegotiate-aead-to-aead-client-extra",
          "309: [9-renegotiate-aead-to-aead-client-extra]",
          "310: RenegotiateCiphers = AES256-GCM-SHA384",
          "",
          "---------------"
        ],
        "test/ssl-tests/17-renegotiate.conf.in||test/ssl-tests/17-renegotiate.conf.in": [
          "File: test/ssl-tests/17-renegotiate.conf.in -> test/ssl-tests/17-renegotiate.conf.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:             \"ResumptionExpected\" => \"No\",",
          "103:             \"ExpectedResult\" => \"Success\"",
          "104:         }",
          "106: );",
          "",
          "[Removed Lines]",
          "105:     }",
          "",
          "[Added Lines]",
          "105:     },",
          "106:     {",
          "107:         name => \"renegotiate-aead-to-non-aead\",",
          "108:         server => {",
          "109:             \"Options\" => \"NoResumptionOnRenegotiation\",",
          "110:             \"MaxProtocol\" => \"TLSv1.2\"",
          "111:         },",
          "112:         client => {",
          "113:             \"CipherString\" => \"AES128-GCM-SHA256\",",
          "114:             extra => {",
          "115:                 \"RenegotiateCiphers\" => \"AES128-SHA\"",
          "116:             }",
          "117:         },",
          "118:         test => {",
          "119:             \"Method\" => \"TLS\",",
          "120:             \"HandshakeMode\" => \"RenegotiateClient\",",
          "121:             \"ResumptionExpected\" => \"No\",",
          "122:             \"ExpectedResult\" => \"Success\"",
          "123:         }",
          "124:     },",
          "125:     {",
          "126:         name => \"renegotiate-non-aead-to-aead\",",
          "127:         server => {",
          "128:             \"Options\" => \"NoResumptionOnRenegotiation\",",
          "129:             \"MaxProtocol\" => \"TLSv1.2\"",
          "130:         },",
          "131:         client => {",
          "132:             \"CipherString\" => \"AES128-SHA\",",
          "133:             extra => {",
          "134:                 \"RenegotiateCiphers\" => \"AES128-GCM-SHA256\"",
          "135:             }",
          "136:         },",
          "137:         test => {",
          "138:             \"Method\" => \"TLS\",",
          "139:             \"HandshakeMode\" => \"RenegotiateClient\",",
          "140:             \"ResumptionExpected\" => \"No\",",
          "141:             \"ExpectedResult\" => \"Success\"",
          "142:         }",
          "143:     },",
          "144:     {",
          "145:         name => \"renegotiate-non-aead-to-non-aead\",",
          "146:         server => {",
          "147:             \"Options\" => \"NoResumptionOnRenegotiation\",",
          "148:             \"MaxProtocol\" => \"TLSv1.2\"",
          "149:         },",
          "150:         client => {",
          "151:             \"CipherString\" => \"AES128-SHA\",",
          "152:             extra => {",
          "153:                 \"RenegotiateCiphers\" => \"AES256-SHA\"",
          "154:             }",
          "155:         },",
          "156:         test => {",
          "157:             \"Method\" => \"TLS\",",
          "158:             \"HandshakeMode\" => \"RenegotiateClient\",",
          "159:             \"ResumptionExpected\" => \"No\",",
          "160:             \"ExpectedResult\" => \"Success\"",
          "161:         }",
          "162:     },",
          "163:     {",
          "164:         name => \"renegotiate-aead-to-aead\",",
          "165:         server => {",
          "166:             \"Options\" => \"NoResumptionOnRenegotiation\",",
          "167:             \"MaxProtocol\" => \"TLSv1.2\"",
          "168:         },",
          "169:         client => {",
          "170:             \"CipherString\" => \"AES128-GCM-SHA256\",",
          "171:             extra => {",
          "172:                 \"RenegotiateCiphers\" => \"AES256-GCM-SHA384\"",
          "173:             }",
          "174:         },",
          "175:         test => {",
          "176:             \"Method\" => \"TLS\",",
          "177:             \"HandshakeMode\" => \"RenegotiateClient\",",
          "178:             \"ResumptionExpected\" => \"No\",",
          "179:             \"ExpectedResult\" => \"Success\"",
          "180:         }",
          "181:     },",
          "",
          "---------------"
        ],
        "test/ssl-tests/18-dtls-renegotiate.conf||test/ssl-tests/18-dtls-renegotiate.conf": [
          "File: test/ssl-tests/18-dtls-renegotiate.conf -> test/ssl-tests/18-dtls-renegotiate.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Generated with generate_ssl_tests.pl",
          "5: test-0 = 0-renegotiate-client-no-resume",
          "6: test-1 = 1-renegotiate-client-resume",
          "7: test-2 = 2-renegotiate-server-resume",
          "8: test-3 = 3-renegotiate-client-auth-require",
          "9: test-4 = 4-renegotiate-client-auth-once",
          "10: # ===========================================================",
          "12: [0-renegotiate-client-no-resume]",
          "",
          "[Removed Lines]",
          "3: num_tests = 5",
          "",
          "[Added Lines]",
          "3: num_tests = 9",
          "10: test-5 = 5-renegotiate-aead-to-non-aead",
          "11: test-6 = 6-renegotiate-non-aead-to-aead",
          "12: test-7 = 7-renegotiate-non-aead-to-non-aead",
          "13: test-8 = 8-renegotiate-aead-to-aead",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146: ResumptionExpected = No",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "153: # ===========================================================",
          "155: [5-renegotiate-aead-to-non-aead]",
          "156: ssl_conf = 5-renegotiate-aead-to-non-aead-ssl",
          "158: [5-renegotiate-aead-to-non-aead-ssl]",
          "159: server = 5-renegotiate-aead-to-non-aead-server",
          "160: client = 5-renegotiate-aead-to-non-aead-client",
          "162: [5-renegotiate-aead-to-non-aead-server]",
          "163: Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem",
          "164: CipherString = DEFAULT",
          "165: Options = NoResumptionOnRenegotiation",
          "166: PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem",
          "168: [5-renegotiate-aead-to-non-aead-client]",
          "169: CipherString = AES128-GCM-SHA256",
          "170: VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem",
          "171: VerifyMode = Peer",
          "173: [test-5]",
          "174: ExpectedResult = Success",
          "175: HandshakeMode = RenegotiateClient",
          "176: Method = DTLS",
          "177: ResumptionExpected = No",
          "178: client = 5-renegotiate-aead-to-non-aead-client-extra",
          "180: [5-renegotiate-aead-to-non-aead-client-extra]",
          "181: RenegotiateCiphers = AES128-SHA",
          "184: # ===========================================================",
          "186: [6-renegotiate-non-aead-to-aead]",
          "187: ssl_conf = 6-renegotiate-non-aead-to-aead-ssl",
          "189: [6-renegotiate-non-aead-to-aead-ssl]",
          "190: server = 6-renegotiate-non-aead-to-aead-server",
          "191: client = 6-renegotiate-non-aead-to-aead-client",
          "193: [6-renegotiate-non-aead-to-aead-server]",
          "194: Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem",
          "195: CipherString = DEFAULT",
          "196: Options = NoResumptionOnRenegotiation",
          "197: PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem",
          "199: [6-renegotiate-non-aead-to-aead-client]",
          "200: CipherString = AES128-SHA",
          "201: VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem",
          "202: VerifyMode = Peer",
          "204: [test-6]",
          "205: ExpectedResult = Success",
          "206: HandshakeMode = RenegotiateClient",
          "207: Method = DTLS",
          "208: ResumptionExpected = No",
          "209: client = 6-renegotiate-non-aead-to-aead-client-extra",
          "211: [6-renegotiate-non-aead-to-aead-client-extra]",
          "212: RenegotiateCiphers = AES128-GCM-SHA256",
          "215: # ===========================================================",
          "217: [7-renegotiate-non-aead-to-non-aead]",
          "218: ssl_conf = 7-renegotiate-non-aead-to-non-aead-ssl",
          "220: [7-renegotiate-non-aead-to-non-aead-ssl]",
          "221: server = 7-renegotiate-non-aead-to-non-aead-server",
          "222: client = 7-renegotiate-non-aead-to-non-aead-client",
          "224: [7-renegotiate-non-aead-to-non-aead-server]",
          "225: Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem",
          "226: CipherString = DEFAULT",
          "227: Options = NoResumptionOnRenegotiation",
          "228: PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem",
          "230: [7-renegotiate-non-aead-to-non-aead-client]",
          "231: CipherString = AES128-SHA",
          "232: VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem",
          "233: VerifyMode = Peer",
          "235: [test-7]",
          "236: ExpectedResult = Success",
          "237: HandshakeMode = RenegotiateClient",
          "238: Method = DTLS",
          "239: ResumptionExpected = No",
          "240: client = 7-renegotiate-non-aead-to-non-aead-client-extra",
          "242: [7-renegotiate-non-aead-to-non-aead-client-extra]",
          "243: RenegotiateCiphers = AES256-SHA",
          "246: # ===========================================================",
          "248: [8-renegotiate-aead-to-aead]",
          "249: ssl_conf = 8-renegotiate-aead-to-aead-ssl",
          "251: [8-renegotiate-aead-to-aead-ssl]",
          "252: server = 8-renegotiate-aead-to-aead-server",
          "253: client = 8-renegotiate-aead-to-aead-client",
          "255: [8-renegotiate-aead-to-aead-server]",
          "256: Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem",
          "257: CipherString = DEFAULT",
          "258: Options = NoResumptionOnRenegotiation",
          "259: PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem",
          "261: [8-renegotiate-aead-to-aead-client]",
          "262: CipherString = AES128-GCM-SHA256",
          "263: VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem",
          "264: VerifyMode = Peer",
          "266: [test-8]",
          "267: ExpectedResult = Success",
          "268: HandshakeMode = RenegotiateClient",
          "269: Method = DTLS",
          "270: ResumptionExpected = No",
          "271: client = 8-renegotiate-aead-to-aead-client-extra",
          "273: [8-renegotiate-aead-to-aead-client-extra]",
          "274: RenegotiateCiphers = AES256-GCM-SHA384",
          "",
          "---------------"
        ],
        "test/ssl-tests/18-dtls-renegotiate.conf.in||test/ssl-tests/18-dtls-renegotiate.conf.in": [
          "File: test/ssl-tests/18-dtls-renegotiate.conf.in -> test/ssl-tests/18-dtls-renegotiate.conf.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:             \"ResumptionExpected\" => \"No\",",
          "95:             \"ExpectedResult\" => \"Success\"",
          "96:         }",
          "98: );",
          "",
          "[Removed Lines]",
          "97:     }",
          "",
          "[Added Lines]",
          "97:     },",
          "98:     {",
          "99:         name => \"renegotiate-aead-to-non-aead\",",
          "100:         server => {",
          "101:             \"Options\" => \"NoResumptionOnRenegotiation\"",
          "102:         },",
          "103:         client => {",
          "104:             \"CipherString\" => \"AES128-GCM-SHA256\",",
          "105:             extra => {",
          "106:                 \"RenegotiateCiphers\" => \"AES128-SHA\"",
          "107:             }",
          "108:         },",
          "109:         test => {",
          "110:             \"Method\" => \"DTLS\",",
          "111:             \"HandshakeMode\" => \"RenegotiateClient\",",
          "112:             \"ResumptionExpected\" => \"No\",",
          "113:             \"ExpectedResult\" => \"Success\"",
          "114:         }",
          "115:     },",
          "116:     {",
          "117:         name => \"renegotiate-non-aead-to-aead\",",
          "118:         server => {",
          "119:             \"Options\" => \"NoResumptionOnRenegotiation\"",
          "120:         },",
          "121:         client => {",
          "122:             \"CipherString\" => \"AES128-SHA\",",
          "123:             extra => {",
          "124:                 \"RenegotiateCiphers\" => \"AES128-GCM-SHA256\"",
          "125:             }",
          "126:         },",
          "127:         test => {",
          "128:             \"Method\" => \"DTLS\",",
          "129:             \"HandshakeMode\" => \"RenegotiateClient\",",
          "130:             \"ResumptionExpected\" => \"No\",",
          "131:             \"ExpectedResult\" => \"Success\"",
          "132:         }",
          "133:     },",
          "134:     {",
          "135:         name => \"renegotiate-non-aead-to-non-aead\",",
          "136:         server => {",
          "137:             \"Options\" => \"NoResumptionOnRenegotiation\"",
          "138:         },",
          "139:         client => {",
          "140:             \"CipherString\" => \"AES128-SHA\",",
          "141:             extra => {",
          "142:                 \"RenegotiateCiphers\" => \"AES256-SHA\"",
          "143:             }",
          "144:         },",
          "145:         test => {",
          "146:             \"Method\" => \"DTLS\",",
          "147:             \"HandshakeMode\" => \"RenegotiateClient\",",
          "148:             \"ResumptionExpected\" => \"No\",",
          "149:             \"ExpectedResult\" => \"Success\"",
          "150:         }",
          "151:     },",
          "152:     {",
          "153:         name => \"renegotiate-aead-to-aead\",",
          "154:         server => {",
          "155:             \"Options\" => \"NoResumptionOnRenegotiation\"",
          "156:         },",
          "157:         client => {",
          "158:             \"CipherString\" => \"AES128-GCM-SHA256\",",
          "159:             extra => {",
          "160:                 \"RenegotiateCiphers\" => \"AES256-GCM-SHA384\"",
          "161:             }",
          "162:         },",
          "163:         test => {",
          "164:             \"Method\" => \"DTLS\",",
          "165:             \"HandshakeMode\" => \"RenegotiateClient\",",
          "166:             \"ResumptionExpected\" => \"No\",",
          "167:             \"ExpectedResult\" => \"Success\"",
          "168:         }",
          "169:     },",
          "",
          "---------------"
        ],
        "test/ssl_test_ctx.c||test/ssl_test_ctx.c": [
          "File: test/ssl_test_ctx.c -> test/ssl_test_ctx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "360:                      mode);",
          "361: }",
          "367: static const test_enum ssl_ct_validation_modes[] = {",
          "368:     {\"None\", SSL_TEST_CT_VALIDATION_NONE},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "345: IMPLEMENT_SSL_TEST_STRING_OPTION(SSL_TEST_CLIENT_CONF, client, reneg_ciphers)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "494:     { \"NPNProtocols\", &parse_client_npn_protocols },",
          "495:     { \"ALPNProtocols\", &parse_client_alpn_protocols },",
          "496:     { \"CTValidation\", &parse_ct_validation },",
          "497: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "471:     { \"RenegotiateCiphers\", &parse_client_reneg_ciphers},",
          "",
          "---------------"
        ],
        "test/ssl_test_ctx.h||test/ssl_test_ctx.h": [
          "File: test/ssl_test_ctx.h -> test/ssl_test_ctx.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:     char *npn_protocols;",
          "85:     char *alpn_protocols;",
          "86:     ssl_ct_validation_t ct_validation;",
          "87: } SSL_TEST_CLIENT_CONF;",
          "89: typedef struct {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:     char *reneg_ciphers;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8f8e9f184bf51fa283c1af9c4fd63098fc7387dd",
      "candidate_info": {
        "commit_hash": "8f8e9f184bf51fa283c1af9c4fd63098fc7387dd",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/8f8e9f184bf51fa283c1af9c4fd63098fc7387dd",
        "files": [
          "test/recipes/90-test_shlibload.t",
          "test/shlibloadtest.c"
        ],
        "message": "Don't assume to know the shared library extension\n\ntest/shlibloadtest.c assumes all Unix style platforms use .so as\nshared library extension.  This is not the case for Mac OS X, which\nuses .dylib.  Instead of this, have the test recipe find out the\nextension from configuration data.\n\nReviewed-by: Matt Caswell <matt@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1844)\n(cherry picked from commit 62dd3351a16089aedb0f1e62e3b6df371c93389c)",
        "before_after_code_files": [
          "test/recipes/90-test_shlibload.t||test/recipes/90-test_shlibload.t",
          "test/shlibloadtest.c||test/shlibloadtest.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/recipes/90-test_shlibload.t||test/recipes/90-test_shlibload.t": [
          "File: test/recipes/90-test_shlibload.t -> test/recipes/90-test_shlibload.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: plan tests => 3;",
          "28:    \"running shlibloadtest -crypto_first\");",
          "32:    \"running shlibloadtest -ssl_first\");",
          "36:    \"running shlibloadtest -just_crypto\");",
          "",
          "[Removed Lines]",
          "25: ok(run(test([\"shlibloadtest\", \"-crypto_first\",",
          "26:              $unified_info{sharednames}->{libcrypto},",
          "27:              $unified_info{sharednames}->{libssl}])),",
          "29: ok(run(test([\"shlibloadtest\", \"-ssl_first\",",
          "30:              $unified_info{sharednames}->{libcrypto},",
          "31:              $unified_info{sharednames}->{libssl}])),",
          "33: ok(run(test([\"shlibloadtest\", \"-just_crypto\",",
          "34:              $unified_info{sharednames}->{libcrypto},",
          "35:              $unified_info{sharednames}->{libssl}])),",
          "",
          "[Added Lines]",
          "25: my $libcrypto =",
          "26:     $unified_info{sharednames}->{libcrypto}.$target{shared_extension_simple};",
          "27: my $libssl =",
          "28:     $unified_info{sharednames}->{libssl}.$target{shared_extension_simple};",
          "30: ok(run(test([\"shlibloadtest\", \"-crypto_first\", $libcrypto, $libssl])),",
          "32: ok(run(test([\"shlibloadtest\", \"-ssl_first\", $libcrypto, $libssl])),",
          "34: ok(run(test([\"shlibloadtest\", \"-just_crypto\", $libcrypto, $libssl])),",
          "",
          "---------------"
        ],
        "test/shlibloadtest.c||test/shlibloadtest.c": [
          "File: test/shlibloadtest.c -> test/shlibloadtest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: typedef void * SHLIB_SYM;",
          "45: # define SHLIB_INIT NULL",
          "50: {",
          "64:     if (*lib == NULL)",
          "65:         return 0;",
          "",
          "[Removed Lines]",
          "47: # define SHARED_LIBRARY_SUFFIX \".so\"",
          "49: static int shlib_load(char *filename, SHLIB *lib)",
          "51:     char *tmpfile;",
          "52:     size_t filenamelen = strlen(filename);",
          "55:     tmpfile = malloc(filenamelen + sizeof(SHARED_LIBRARY_SUFFIX) + 1);",
          "56:     if (tmpfile == NULL)",
          "57:         return 0;",
          "58:     strcpy(tmpfile, filename);",
          "59:     strcpy(tmpfile + filenamelen, SHARED_LIBRARY_SUFFIX);",
          "62:     free(tmpfile);",
          "",
          "[Added Lines]",
          "47: static int shlib_load(const char *filename, SHLIB *lib)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90: typedef void * SHLIB_SYM;",
          "91: # define SHLIB_INIT 0",
          "94: {",
          "96:     if (*lib == NULL)",
          "",
          "[Removed Lines]",
          "93: static int shlib_load(char *filename, SHLIB *lib)",
          "",
          "[Added Lines]",
          "80: static int shlib_load(const char *filename, SHLIB *lib)",
          "",
          "---------------"
        ]
      }
    }
  ]
}