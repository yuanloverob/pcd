{
  "cve_id": "CVE-2019-19603",
  "cve_desc": "SQLite 3.30.1 mishandles certain SELECT statements with a nonexistent VIEW, leading to an application crash.",
  "repo": "sqlite/sqlite",
  "patch_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
  "patch_info": {
    "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab.test"
    ],
    "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab.test||test/altertab.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "856:       }",
      "857:     }",
      "858:   }else{",
      "861:     ){",
      "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
      "863:                       zName);",
      "864:       return SQLITE_ERROR;",
      "865:     }",
      "866:   }",
      "867:   return SQLITE_OK;",
      "868: }",
      "",
      "[Removed Lines]",
      "859:     if( pParse->nested==0",
      "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
      "",
      "[Added Lines]",
      "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
      "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
      "",
      "[Added Lines]",
      "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
      "2148:   return pMod->pModule->xShadowName(zTail+1);",
      "2149: }",
      "",
      "[Removed Lines]",
      "2150: #else",
      "2151: # define isShadowTableName(x,y) 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2190:   p = pParse->pNewTable;",
      "2191:   if( p==0 ) return;",
      "2194:     p->tabFlags |= TF_Shadow;",
      "2195:   }",
      "",
      "[Removed Lines]",
      "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
      "",
      "[Added Lines]",
      "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
      "4549: #endif",
      "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
      "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
      "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
      "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
      "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
      "4553: #else",
      "4554: # define sqlite3ShadowTableName(A,B) 0",
      "4555: #endif",
      "",
      "---------------"
    ],
    "test/altertab.test||test/altertab.test": [
      "File: test/altertab.test -> test/altertab.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "547:   } {1 {table y1_segments may not be modified}}",
      "549:   do_catchsql_test 16.20 {",
      "554:     DROP TABLE y1_segments;",
      "555:   } {1 {table y1_segments may not be dropped}}",
      "557:   do_execsql_test 16.30 {",
      "558:     ALTER TABLE y1 RENAME TO z1;",
      "559:   }",
      "",
      "[Removed Lines]",
      "550:     ALTER TABLE y1_segments RENAME TO abc;",
      "551:   } {1 {table y1_segments may not be altered}}",
      "553:   do_catchsql_test 16.21 {",
      "",
      "[Added Lines]",
      "553:   do_catchsql_test 16.20 {",
      "554:     ALTER TABLE y1_segments RENAME TO abc;",
      "555:   } {1 {table y1_segments may not be altered}}",
      "556:   sqlite3_db_config db DEFENSIVE 0",
      "557:   do_catchsql_test 16.22 {",
      "558:     ALTER TABLE y1_segments RENAME TO abc;",
      "559:   } {0 {}}",
      "560:   sqlite3_db_config db DEFENSIVE 1",
      "561:   do_catchsql_test 16.23 {",
      "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
      "563:   } {1 {object name reserved for internal use: y1_segments}}",
      "564:   do_catchsql_test 16.24 {",
      "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
      "566:   } {1 {object name reserved for internal use: y1_segments}}",
      "567:   sqlite3_db_config db DEFENSIVE 0",
      "568:   do_catchsql_test 16.25 {",
      "569:     ALTER TABLE abc RENAME TO y1_segments;",
      "570:   } {0 {}}",
      "571:   sqlite3_db_config db DEFENSIVE 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "72b9fdcf207adbf9632958d4e7ffb83d37fb452f",
      "candidate_info": {
        "commit_hash": "72b9fdcf207adbf9632958d4e7ffb83d37fb452f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/72b9fdcf207adbf9632958d4e7ffb83d37fb452f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/pg_common.tcl",
          "test/window6.test",
          "test/window8.tcl",
          "test/window8.test",
          "test/windowerr.tcl",
          "test/windowerr.test"
        ],
        "message": "Add support for RANGE window frames. Some cases still do not work.\n\nFossilOrigin-Name: ffc32b246d92d53c66094afe11950b53ffab6a1c230c602eebbfedafb2eb57f4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/pg_common.tcl||test/pg_common.tcl",
          "test/window6.test||test/window6.test",
          "test/window8.tcl||test/window8.tcl",
          "test/window8.test||test/window8.test",
          "test/windowerr.tcl||test/windowerr.tcl",
          "test/windowerr.test||test/windowerr.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 53ea550ce759ae4683bcf0ae3af655bfe04f85db70f74edee6bcab56d83bb041",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "559:   }else{",
          "560:     sqlite3WindowChain(pParse, pWin, pList);",
          "561:   }",
          "562:   if( pFunc->funcFlags & SQLITE_FUNC_WINDOW ){",
          "563:     sqlite3 *db = pParse->db;",
          "564:     if( pWin->pFilter ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "562:   if( (pWin->eType==TK_RANGE)",
          "563:    && (pWin->pStart || pWin->pEnd)",
          "564:    && (pWin->pOrderBy==0 || pWin->pOrderBy->nExpr!=1)",
          "565:   ){",
          "566:     sqlite3ErrorMsg(pParse,",
          "567:       \"RANGE with offset PRECEDING/FOLLOWING requires one ORDER BY expression\"",
          "568:     );",
          "569:   }else",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "927:     eType = TK_RANGE;",
          "928:   }",
          "",
          "[Removed Lines]",
          "933:   if( eType==TK_RANGE && (pStart!=0 || pEnd!=0) ){",
          "934:     sqlite3ErrorMsg(pParse, \"RANGE must use only UNBOUNDED or CURRENT ROW\");",
          "935:     goto windowAllocErr;",
          "936:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "952:   if( (eStart==TK_CURRENT && eEnd==TK_PRECEDING)",
          "953:    || (eStart==TK_FOLLOWING && (eEnd==TK_PRECEDING || eEnd==TK_CURRENT))",
          "954:   ){",
          "956:     goto windowAllocErr;",
          "957:   }",
          "",
          "[Removed Lines]",
          "955:     sqlite3ErrorMsg(pParse, \"unsupported frame delimiter for ROWS\");",
          "",
          "[Added Lines]",
          "955:     sqlite3ErrorMsg(pParse, \"unsupported frame specification\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1485:     sqlite3VdbeAppendP4(v, (void*)pKeyInfo, P4_KEYINFO);",
          "1486:     addr = sqlite3VdbeAddOp3(",
          "1487:         v, OP_Jump, sqlite3VdbeCurrentAddr(v)+1, 0, sqlite3VdbeCurrentAddr(v)+1",
          "1489:     VdbeCoverageEqNe(v);",
          "1490:     sqlite3VdbeAddOp3(v, OP_Copy, regNew, regOld, nVal-1);",
          "1491:   }else{",
          "",
          "[Removed Lines]",
          "1488:         );",
          "",
          "[Added Lines]",
          "1488:     );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1539:   }",
          "1540: }",
          "1542: static int windowCodeOp(",
          "1543:  WindowCodeArg *p,",
          "1544:  int op,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1550: static void windowCodeRangeTest(",
          "1551:   WindowCodeArg *p,",
          "1553:   int csr1,",
          "1554:   int regVal,",
          "1555:   int csr2,",
          "1556:   int lbl",
          "1557: ){",
          "1558:   Parse *pParse = p->pParse;",
          "1559:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "1560:   int reg1 = sqlite3GetTempReg(pParse);",
          "1561:   int reg2 = sqlite3GetTempReg(pParse);",
          "1562:   windowReadPeerValues(p, csr1, reg1);",
          "1563:   windowReadPeerValues(p, csr2, reg2);",
          "1564:   sqlite3VdbeAddOp3(v, OP_Add, reg1, regVal, reg1);",
          "1565:   sqlite3VdbeAddOp3(v, op, reg2, lbl, reg1);",
          "1566:   sqlite3VdbeAddOp2(v, OP_Rowid, csr1, reg1);",
          "1567:   sqlite3VdbeAddOp2(v, OP_Rowid, csr2, reg2);",
          "1568:   sqlite3VdbeAddOp3(v, OP_Gt, reg2, lbl, reg1);",
          "1569:   sqlite3ReleaseTempReg(pParse, reg1);",
          "1570:   sqlite3ReleaseTempReg(pParse, reg2);",
          "1572:   assert( op==OP_Ge || op==OP_Gt || op==OP_Lt || op==OP_Le );",
          "1573: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1555:   int addrGoto = 0;",
          "1556:   int bPeer = (pMWin->eType!=TK_ROWS);",
          "1560:   if( op==WINDOW_AGGINVERSE && pMWin->eStart==TK_UNBOUNDED ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1591:   int lblDone = sqlite3VdbeMakeLabel(pParse);",
          "1592:   int addrNextRange = 0;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1563:   }",
          "1565:   if( regCountdown>0 ){",
          "1567:   }",
          "1569:   if( op==WINDOW_RETURN_ROW ){",
          "",
          "[Removed Lines]",
          "1566:     addrIf = sqlite3VdbeAddOp3(v, OP_IfPos, regCountdown, 0, 1);",
          "",
          "[Added Lines]",
          "1602:     if( pMWin->eType==TK_RANGE ){",
          "1603:       addrNextRange = sqlite3VdbeCurrentAddr(v);",
          "1605:       switch( op ){",
          "1606:         case WINDOW_RETURN_ROW: {",
          "1607:           assert( 0 );",
          "1608:           break;",
          "1609:         }",
          "1611:         case WINDOW_AGGINVERSE: {",
          "1612:           if( pMWin->eStart==TK_FOLLOWING ){",
          "1613:             windowCodeRangeTest(",
          "1614:                 p, OP_Le, p->current.csr, regCountdown, p->start.csr, lblDone",
          "1615:             );",
          "1616:           }else{",
          "1617:             windowCodeRangeTest(",
          "1618:                 p, OP_Ge, p->start.csr, regCountdown, p->current.csr, lblDone",
          "1619:             );",
          "1620:           }",
          "1621:           break;",
          "1622:         }",
          "1624:         case WINDOW_AGGSTEP: {",
          "1625:           windowCodeRangeTest(",
          "1626:             p, OP_Gt, p->end.csr, regCountdown, p->current.csr, lblDone",
          "1627:           );",
          "1628:           break;",
          "1629:         }",
          "1630:       }",
          "1632:     }else{",
          "1633:       addrIf = sqlite3VdbeAddOp3(v, OP_IfPos, regCountdown, 0, 1);",
          "1634:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1610:     sqlite3ReleaseTempRange(pParse, regTmp, nReg);",
          "1611:   }",
          "1613:   if( addrGoto ) sqlite3VdbeJumpHere(v, addrGoto);",
          "1614:   if( addrIf ) sqlite3VdbeJumpHere(v, addrIf);",
          "1615:   return ret;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1681:   if( addrNextRange ){",
          "1682:     sqlite3VdbeAddOp2(v, OP_Goto, 0, addrNextRange);",
          "1683:   }",
          "1684:   sqlite3VdbeResolveLabel(v, lblDone);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1724:   int regNewPeer = 0;",
          "1725:   WindowCodeArg s;",
          "1727:   memset(&s, 0, sizeof(WindowCodeArg));",
          "1728:   s.pParse = pParse;",
          "1729:   s.pMWin = pMWin;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1799:   assert( pMWin->eStart==TK_PRECEDING || pMWin->eStart==TK_CURRENT",
          "1800:        || pMWin->eStart==TK_FOLLOWING || pMWin->eStart==TK_UNBOUNDED",
          "1801:   );",
          "1802:   assert( pMWin->eEnd==TK_FOLLOWING || pMWin->eEnd==TK_CURRENT",
          "1803:        || pMWin->eEnd==TK_UNBOUNDED || pMWin->eEnd==TK_PRECEDING",
          "1804:   );",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1758:     s.end.reg = pParse->nMem+1;     pParse->nMem += nPeer;",
          "1759:   }",
          "",
          "[Removed Lines]",
          "1761:   assert( pMWin->eStart==TK_PRECEDING",
          "1762:        || pMWin->eStart==TK_CURRENT",
          "1763:        || pMWin->eStart==TK_FOLLOWING",
          "1764:        || pMWin->eStart==TK_UNBOUNDED",
          "1765:   );",
          "1766:   assert( pMWin->eEnd==TK_FOLLOWING",
          "1767:        || pMWin->eEnd==TK_CURRENT",
          "1768:        || pMWin->eEnd==TK_UNBOUNDED",
          "1769:        || pMWin->eEnd==TK_PRECEDING",
          "1770:   );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1791:     int regNewPart = reg + pMWin->nBufferCol;",
          "1792:     KeyInfo *pKeyInfo = sqlite3KeyInfoFromExprList(pParse, pPart, 0, 0);",
          "1795:     addr = sqlite3VdbeAddOp3(v, OP_Compare, regNewPart, pMWin->regPart, nPart);",
          "1796:     sqlite3VdbeAppendP4(v, (void*)pKeyInfo, P4_KEYINFO);",
          "1797:     sqlite3VdbeAddOp3(v, OP_Jump, addr+2, addr+4, addr+2);",
          "1798:     VdbeCoverageEqNe(v);",
          "1799:     addrGosubFlush = sqlite3VdbeAddOp1(v, OP_Gosub, regFlushPart);",
          "1800:     VdbeComment((v, \"call flush_partition\"));",
          "1802:     sqlite3VdbeAddOp3(v, OP_Copy, regNewPart, pMWin->regPart, nPart-1);",
          "1803:   }",
          "",
          "[Removed Lines]",
          "1794:     addrIf = sqlite3VdbeAddOp1(v, OP_If, pMWin->regFirst);",
          "1801:     sqlite3VdbeJumpHere(v, addrIf);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1848:     addrShortcut = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1849:     sqlite3VdbeJumpHere(v, addrGe);",
          "1850:   }",
          "1852:     assert( pMWin->eEnd==TK_FOLLOWING );",
          "1853:     sqlite3VdbeAddOp3(v, OP_Subtract, regStart, regEnd, regStart);",
          "1854:   }",
          "",
          "[Removed Lines]",
          "1851:   if( pMWin->eStart==TK_FOLLOWING && regEnd ){",
          "",
          "[Added Lines]",
          "1917:   if( pMWin->eStart==TK_FOLLOWING && pMWin->eType!=TK_RANGE && regEnd ){",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1888:   if( pMWin->eStart==TK_FOLLOWING ){",
          "1889:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "1890:     if( pMWin->eEnd!=TK_UNBOUNDED ){",
          "1893:     }",
          "1894:   }else",
          "1895:   if( pMWin->eEnd==TK_PRECEDING ){",
          "",
          "[Removed Lines]",
          "1891:       windowCodeOp(&s, WINDOW_RETURN_ROW, regEnd, 0);",
          "1892:       windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "",
          "[Added Lines]",
          "1957:       if( pMWin->eType==TK_RANGE ){",
          "1958:         int lbl = sqlite3VdbeMakeLabel(pParse);",
          "1959:         int addrNext = sqlite3VdbeCurrentAddr(v);",
          "1960:         windowCodeRangeTest(&s, OP_Ge, s.current.csr, regEnd, s.end.csr, lbl);",
          "1961:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "1962:         windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "1963:         sqlite3VdbeAddOp2(v, OP_Goto, 0, addrNext);",
          "1964:         sqlite3VdbeResolveLabel(v, lbl);",
          "1965:       }else{",
          "1966:         windowCodeOp(&s, WINDOW_RETURN_ROW, regEnd, 0);",
          "1967:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "1968:       }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1900:     int addr;",
          "1901:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "1902:     if( pMWin->eEnd!=TK_UNBOUNDED ){",
          "1907:     }",
          "1908:   }",
          "1909:   if( addrPeerJump ){",
          "",
          "[Removed Lines]",
          "1903:       if( regEnd ) addr = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "1904:       windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "1905:       windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "1906:       if( regEnd ) sqlite3VdbeJumpHere(v, addr);",
          "",
          "[Added Lines]",
          "1979:       if( pMWin->eType==TK_RANGE ){",
          "1980:         int lbl;",
          "1981:         addr = sqlite3VdbeCurrentAddr(v);",
          "1982:         if( regEnd ){",
          "1983:           lbl = sqlite3VdbeMakeLabel(pParse);",
          "1984:           windowCodeRangeTest(&s, OP_Ge, s.current.csr, regEnd, s.end.csr, lbl);",
          "1985:         }",
          "1986:         windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "1987:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "1988:         if( regEnd ){",
          "1989:           sqlite3VdbeAddOp2(v, OP_Goto, 0, addr);",
          "1990:           sqlite3VdbeResolveLabel(v, lbl);",
          "1991:         }",
          "1992:       }else{",
          "1993:         if( regEnd ) addr = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "1994:         windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "1995:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "1996:         if( regEnd ) sqlite3VdbeJumpHere(v, addr);",
          "1997:       }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1938:     int addrBreak2;",
          "1939:     int addrBreak3;",
          "1940:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "1941:     if( pMWin->eEnd==TK_UNBOUNDED ){",
          "1942:       addrStart = sqlite3VdbeCurrentAddr(v);",
          "1943:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, regStart, 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2032:     if( pMWin->eType==TK_RANGE ){",
          "2033:       addrStart = sqlite3VdbeCurrentAddr(v);",
          "2034:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 1);",
          "2035:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 1);",
          "2036:     }else",
          "",
          "---------------"
        ],
        "test/pg_common.tcl||test/pg_common.tcl": [
          "File: test/pg_common.tcl -> test/pg_common.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:   if {$rc==0} {",
          "73:     error \"errorsql_test SQL did not cause an error!\"",
          "74:   }",
          "76:   set sql [string map {string_agg group_concat} $sql]",
          "77:   puts $::fd \"do_test $tn { catch { execsql {\"",
          "78:   puts $::fd \"  [string trim $sql]\"",
          "",
          "[Removed Lines]",
          "75:   puts $::fd \"# PG says \\\"[string trim $msg]\\\"\"",
          "",
          "[Added Lines]",
          "75:   set msg [lindex [split [string trim $msg] \"\\n\"] 0]",
          "76:   puts $::fd \"# PG says $msg\"",
          "",
          "---------------"
        ],
        "test/window6.test||test/window6.test": [
          "File: test/window6.test -> test/window6.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "219: } {",
          "220:   1 1  2 1,2  3 1,2,3  4 2,3,4  5 3,4,5",
          "221: }",
          "234: do_catchsql_test 9.3 {",
          "235:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<5)",
          "",
          "[Removed Lines]",
          "222: do_catchsql_test 9.1 {",
          "223:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<5)",
          "224:   SELECT x, group_concat(x) OVER (ORDER BY x RANGE 2 PRECEDING)",
          "225:   FROM c;",
          "226: } {1 {RANGE must use only UNBOUNDED or CURRENT ROW}}",
          "228: do_catchsql_test 9.2 {",
          "229:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<5)",
          "230:   SELECT x, group_concat(x) OVER (ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND 2 FOLLOWING)",
          "231:   FROM c;",
          "232: } {1 {RANGE must use only UNBOUNDED or CURRENT ROW}}",
          "",
          "[Added Lines]",
          "222: #do_catchsql_test 9.1 {",
          "223: #  WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<5)",
          "224: #  SELECT x, group_concat(x) OVER (ORDER BY x RANGE 2 PRECEDING)",
          "225: #  FROM c;",
          "226: #} {1 {RANGE must use only UNBOUNDED or CURRENT ROW}}",
          "227: #",
          "228: #do_catchsql_test 9.2 {",
          "229: #  WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<5)",
          "230: #  SELECT x, group_concat(x) OVER (ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND 2 FOLLOWING)",
          "231: #  FROM c;",
          "232: #} {1 {RANGE must use only UNBOUNDED or CURRENT ROW}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "262:     SELECT count() OVER (",
          "263:         ORDER BY x ROWS $frame",
          "264:     ) FROM c;",
          "266: }",
          "268: do_catchsql_test 9.8.1 {",
          "",
          "[Removed Lines]",
          "265:   \" {1 {unsupported frame delimiter for ROWS}}",
          "",
          "[Added Lines]",
          "265:   \" {1 {unsupported frame specification}}",
          "",
          "---------------"
        ],
        "test/window8.tcl||test/window8.tcl": [
          "File: test/window8.tcl -> test/window8.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:   \"",
          "90: }",
          "92: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92: ==========",
          "94: execsql_test 2.0 {",
          "95:   DROP TABLE IF EXISTS t1;",
          "96:   CREATE TABLE t1(a INTEGER, b INTEGER);",
          "97:   INSERT INTO t1 VALUES",
          "98:       (13, 26), (15, 30);",
          "99: }",
          "101: foreach {tn frame} {",
          "102:   1 { ORDER BY a RANGE BETWEEN 5 PRECEDING AND 5 FOLLOWING }",
          "103:   2 { ORDER BY a RANGE BETWEEN 10 PRECEDING AND 5 PRECEDING }",
          "104:   3 { ORDER BY a RANGE BETWEEN 2 FOLLOWING AND 3 FOLLOWING }",
          "105: } {",
          "106:   execsql_test 2.$tn \"SELECT a, sum(b) OVER win FROM t1 WINDOW win AS ($frame)\"",
          "107: }",
          "",
          "---------------"
        ],
        "test/window8.test||test/window8.test": [
          "File: test/window8.test -> test/window8.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "433:   SELECT a, b, min(c) OVER (ORDER BY a,b  GROUPS BETWEEN 1 FOLLOWING         AND UNBOUNDED FOLLOWING ) FROM t3 ORDER BY 1, 2, 3;",
          "434: } {AA aa 102   AA aa 102   AA aa 102   AA aa 102   AA bb 102   AA bb 102   AA bb 102   AA bb 102   BB aa 102   BB aa 102   BB aa 102   BB aa 102   BB aa 102   BB aa 102   BB bb 102   BB bb 102   BB bb 102   BB bb 102   BB bb 102   BB bb 102   CC aa 102   CC aa 102   CC aa 102   CC aa 102   CC bb 102   CC bb 102   DD aa 102   DD aa 102   DD aa 102   DD bb 102   DD bb 102   DD bb 102   DD bb 102   EE aa 102   EE aa 102   EE bb 102   EE bb 102   EE bb 102   FF aa 102   FF aa 102   FF aa 102   FF aa 102   FF bb 113   FF bb 113   FF bb 113   FF bb 113   FF bb 113   FF bb 113   GG aa 113   GG aa 113   GG aa 113   GG aa 113   GG bb 113   GG bb 113   GG bb 113   GG bb 113   HH aa 113   HH aa 113   HH aa 113   HH bb 113   HH bb 113   HH bb 113   HH bb 113   HH bb 113   HH bb 113   II aa 113   II aa 113   II bb 113   II bb 113   II bb 113   II bb 113   II bb 113   JJ aa 257   JJ aa 257   JJ aa 257   JJ aa 257   JJ bb {}   JJ bb {}   JJ bb {}   JJ bb {}}",
          "436: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "436: #==========================================================================",
          "438: do_execsql_test 2.0 {",
          "439:   DROP TABLE IF EXISTS t1;",
          "440:   CREATE TABLE t1(a INTEGER, b INTEGER);",
          "441:   INSERT INTO t1 VALUES",
          "442:       (13, 26), (15, 30);",
          "443: } {}",
          "445: do_execsql_test 2.1 {",
          "446:   SELECT a, sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 5 PRECEDING AND 5 FOLLOWING )",
          "447: } {13 56   15 56}",
          "449: do_execsql_test 2.2 {",
          "450:   SELECT a, sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 10 PRECEDING AND 5 PRECEDING )",
          "451: } {13 {}   15 {}}",
          "453: do_execsql_test 2.3 {",
          "454:   SELECT a, sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 2 FOLLOWING AND 3 FOLLOWING )",
          "455: } {13 30   15 {}}",
          "",
          "---------------"
        ],
        "test/windowerr.tcl||test/windowerr.tcl": [
          "File: test/windowerr.tcl -> test/windowerr.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: execsql_test 1.0 {",
          "21:   DROP TABLE IF EXISTS t1;",
          "22:   CREATE TABLE t1(a INTEGER, b INTEGER);",
          "23: }",
          "25: foreach {tn frame} {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23:   INSERT INTO t1 VALUES(1, 1);",
          "24:   INSERT INTO t1 VALUES(2, 2);",
          "25:   INSERT INTO t1 VALUES(3, 3);",
          "26:   INSERT INTO t1 VALUES(4, 4);",
          "27:   INSERT INTO t1 VALUES(5, 5);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:   5 \"ORDER BY a GROUPS BETWEEN -1 PRECEDING AND 1 FOLLOWING\"",
          "33:   6 \"ORDER BY a GROUPS BETWEEN  1 PRECEDING AND -1 FOLLOWING\"",
          "34: } {",
          "35:   errorsql_test 1.$tn \"",
          "36:   SELECT a, sum(b) OVER (",
          "37:     $frame",
          "39:   \"",
          "40: }",
          "",
          "[Removed Lines]",
          "38:   ) FROM t3 ORDER BY 1",
          "",
          "[Added Lines]",
          "40:   7 \"ORDER BY a,b RANGE BETWEEN  1 PRECEDING AND 1 FOLLOWING\"",
          "45:   ) FROM t1 ORDER BY 1",
          "",
          "---------------"
        ],
        "test/windowerr.test||test/windowerr.test": [
          "File: test/windowerr.test -> test/windowerr.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: do_execsql_test 1.0 {",
          "24:   DROP TABLE IF EXISTS t1;",
          "25:   CREATE TABLE t1(a INTEGER, b INTEGER);",
          "26: } {}",
          "29: do_test 1.1 { catch { execsql {",
          "30:   SELECT a, sum(b) OVER (",
          "31:     ORDER BY a ROWS BETWEEN -1 PRECEDING AND 1 FOLLOWING",
          "33: } } } 1",
          "36: do_test 1.2 { catch { execsql {",
          "37:   SELECT a, sum(b) OVER (",
          "38:     ORDER BY a ROWS BETWEEN  1 PRECEDING AND -1 FOLLOWING",
          "40: } } } 1",
          "43: do_test 1.3 { catch { execsql {",
          "44:   SELECT a, sum(b) OVER (",
          "45:     ORDER BY a RANGE BETWEEN -1 PRECEDING AND 1 FOLLOWING",
          "47: } } } 1",
          "50: do_test 1.4 { catch { execsql {",
          "51:   SELECT a, sum(b) OVER (",
          "52:     ORDER BY a RANGE BETWEEN  1 PRECEDING AND -1 FOLLOWING",
          "54: } } } 1",
          "57: do_test 1.5 { catch { execsql {",
          "58:   SELECT a, sum(b) OVER (",
          "59:     ORDER BY a GROUPS BETWEEN -1 PRECEDING AND 1 FOLLOWING",
          "61: } } } 1",
          "64: do_test 1.6 { catch { execsql {",
          "65:   SELECT a, sum(b) OVER (",
          "66:     ORDER BY a GROUPS BETWEEN  1 PRECEDING AND -1 FOLLOWING",
          "68: } } } 1",
          "70: finish_test",
          "",
          "[Removed Lines]",
          "28: # PG says \"ERROR:  frame starting offset must not be negative\"",
          "32:   ) FROM t3 ORDER BY 1",
          "35: # PG says \"ERROR:  frame ending offset must not be negative\"",
          "39:   ) FROM t3 ORDER BY 1",
          "42: # PG says \"ERROR:  invalid preceding or following size in window function\"",
          "46:   ) FROM t3 ORDER BY 1",
          "49: # PG says \"ERROR:  invalid preceding or following size in window function\"",
          "53:   ) FROM t3 ORDER BY 1",
          "56: # PG says \"ERROR:  frame starting offset must not be negative\"",
          "60:   ) FROM t3 ORDER BY 1",
          "63: # PG says \"ERROR:  frame ending offset must not be negative\"",
          "67:   ) FROM t3 ORDER BY 1",
          "",
          "[Added Lines]",
          "26:   INSERT INTO t1 VALUES(1, 1);",
          "27:   INSERT INTO t1 VALUES(2, 2);",
          "28:   INSERT INTO t1 VALUES(3, 3);",
          "29:   INSERT INTO t1 VALUES(4, 4);",
          "30:   INSERT INTO t1 VALUES(5, 5);",
          "33: # PG says ERROR:  frame starting offset must not be negative",
          "37:   ) FROM t1 ORDER BY 1",
          "40: # PG says ERROR:  frame ending offset must not be negative",
          "44:   ) FROM t1 ORDER BY 1",
          "47: # PG says ERROR:  invalid preceding or following size in window function",
          "51:   ) FROM t1 ORDER BY 1",
          "54: # PG says ERROR:  invalid preceding or following size in window function",
          "58:   ) FROM t1 ORDER BY 1",
          "61: # PG says ERROR:  frame starting offset must not be negative",
          "65:   ) FROM t1 ORDER BY 1",
          "68: # PG says ERROR:  frame ending offset must not be negative",
          "72:   ) FROM t1 ORDER BY 1",
          "73: } } } 1",
          "75: # PG says ERROR:  RANGE with offset PRECEDING/FOLLOWING requires exactly one ORDER BY column",
          "76: do_test 1.7 { catch { execsql {",
          "77:   SELECT a, sum(b) OVER (",
          "78:     ORDER BY a,b RANGE BETWEEN  1 PRECEDING AND 1 FOLLOWING",
          "79:   ) FROM t1 ORDER BY 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "92cd307c1cc0a5399828cd69913270e15369c514",
      "candidate_info": {
        "commit_hash": "92cd307c1cc0a5399828cd69913270e15369c514",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/92cd307c1cc0a5399828cd69913270e15369c514",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeInt.h"
        ],
        "message": "Fix harmless compiler warnings that appear with SQLITE_OMIT_EXPLAIN.\n\nFossilOrigin-Name: 5fff00b0d5eb634d40e767671d5a0e8bd263d15d88abe531f6072f01bc789568",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeInt.h||src/vdbeInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 645232f2b9ce3ee345b1d22c0db1265e39bb674bef9ab6fb10d5bee8ab696787",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "471: int sqlite3VdbeIdxKeyCompare(sqlite3*,VdbeCursor*,UnpackedRecord*,int*);",
          "472: int sqlite3VdbeIdxRowid(sqlite3*, BtCursor*, i64*);",
          "473: int sqlite3VdbeExec(Vdbe*);",
          "474: int sqlite3VdbeList(Vdbe*);",
          "475: int sqlite3VdbeHalt(Vdbe*);",
          "476: int sqlite3VdbeChangeEncoding(Mem *, int);",
          "477: int sqlite3VdbeMemTooBig(Mem*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "474: #ifndef SQLITE_OMIT_EXPLAIN",
          "476: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "510: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "511: int sqlite3VdbeMemAggValue(Mem*, Mem*, FuncDef*);",
          "512: #endif",
          "513: const char *sqlite3OpcodeName(int);",
          "514: int sqlite3VdbeMemGrow(Mem *pMem, int n, int preserve);",
          "515: int sqlite3VdbeMemClearAndResize(Mem *pMem, int n);",
          "516: int sqlite3VdbeCloseStatement(Vdbe *, int);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "515: #ifndef SQLITE_OMIT_EXPLAIN",
          "517: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c2909bf8ac88e2819fb9fc86024012b74a1f14c9",
      "candidate_info": {
        "commit_hash": "c2909bf8ac88e2819fb9fc86024012b74a1f14c9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c2909bf8ac88e2819fb9fc86024012b74a1f14c9",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a problem with handling corrupt databases in the fts5 integrity-check function.\n\nFossilOrigin-Name: 9bad745d373f4686a2726c3f77a2ccad60e7181645d7ed483a2e43075a4ef30c",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5859:       iOff = fts5LeafFirstTermOff(pLeaf);",
          "5860:       iRowidOff = fts5LeafFirstRowidOff(pLeaf);",
          "5862:         p->rc = FTS5_CORRUPT;",
          "5863:       }else{",
          "5864:         iOff += fts5GetVarint32(&pLeaf->p[iOff], nTerm);",
          "",
          "[Removed Lines]",
          "5861:       if( iRowidOff>=iOff ){",
          "",
          "[Added Lines]",
          "5861:       if( iRowidOff>=iOff || iOff>=pLeaf->szLeaf ){",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "871: | end c14b.db",
          "872: }]} {}",
          "875: do_catchsql_test 14.1 {",
          "876:   INSERT INTO t1(t1) VALUES('optimize');",
          "877: } {1 {database disk image is malformed}}",
          "879: sqlite3_fts5_may_be_corrupt 0",
          "880: finish_test",
          "",
          "[Removed Lines]",
          "874: breakpoint",
          "",
          "[Added Lines]",
          "878: #---------------------------------------------------------------------------",
          "879: #",
          "880: reset_db",
          "881: do_test 15.0 {",
          "882:   sqlite3 db {}",
          "883:   db deserialize [decode_hexdb {",
          "884: | size 32768 pagesize 4096 filename c16.db",
          "885: | page 1 offset 0",
          "886: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "887: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 07   .....@  ........",
          "888: |     32: 00 00 00 00 00 00 00 00 00 00 00 07 00 00 00 00   ................",
          "889: |     48: 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00   ................",
          "890: |     96: 00 00 00 00 0d 00 00 00 07 0d d2 00 0f c4 0f 6d   ...............m",
          "891: |    112: 0f 02 0e ab 0e 4e 0d f6 0d d2 00 00 00 00 00 00   .....N..........",
          "892: |   3536: 00 00 22 07 06 17 11 11 01 31 74 61 62 6c 65 74   .........1tablet",
          "893: |   3552: 32 74 32 07 43 52 45 41 54 45 20 54 41 42 4c 45   2t2.CREATE TABLE",
          "894: |   3568: 20 74 32 28 78 29 56 06 06 17 1f 1f 01 7d 74 61    t2(x)V.......ta",
          "895: |   3584: 62 6c 65 74 31 5f 63 6f 6e 66 69 67 74 31 5f 63   blet1_configt1_c",
          "896: |   3600: 6f 6e 66 69 67 06 43 52 45 41 54 45 20 54 41 42   onfig.CREATE TAB",
          "897: |   3616: 4c 45 20 27 74 31 5f 63 6f 6e 66 69 67 27 28 6b   LE 't1_config'(k",
          "898: |   3632: 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 76 29    PRIMARY KEY, v)",
          "899: |   3648: 20 57 49 54 48 4f 55 54 20 52 4f 57 49 44 5b 05    WITHOUT ROWID[.",
          "900: |   3664: 07 17 21 21 01 81 01 74 61 62 6c 00 0f f6 0f ec   ..!!...tabl.....",
          "901: |   3680: 0f e0 73 69 7a 65 74 31 5f 64 6f 63 73 69 7a 65   ..sizet1_docsize",
          "902: |   3696: 05 43 52 45 41 54 45 20 54 41 42 4c 45 20 27 74   .CREATE TABLE 't",
          "903: |   3712: 31 5f 64 6f 63 73 69 7a 65 27 28 69 64 20 49 4e   1_docsize'(id IN",
          "904: |   3728: 54 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45   TEGER PRIMARY KE",
          "905: |   3744: 59 2c 20 73 7a 20 42 4c 4f 42 29 55 04 06 17 21   Y, sz BLOB)U...!",
          "906: |   3760: 21 01 77 74 61 62 6c 65 74 31 5f 63 6f 6e 74 65   !.wtablet1_conte",
          "907: |   3776: 6e 74 74 31 5f 63 6f 6e 74 65 6e 74 04 43 52 45   ntt1_content.CRE",
          "908: |   3792: 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 63 6f   ATE TABLE 't1_co",
          "909: |   3808: 6e 74 65 6e 74 27 28 69 64 20 49 4e 54 45 47 45   ntent'(id INTEGE",
          "910: |   3824: 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 63   R PRIMARY KEY, c",
          "911: |   3840: 30 29 69 03 07 17 19 19 01 81 2d 74 61 62 6c 65   0)i.......-table",
          "912: |   3856: 74 31 5f 69 64 78 74 31 5f 69 64 78 03 43 52 45   t1_idxt1_idx.CRE",
          "913: |   3872: 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 69 64   ATE TABLE 't1_id",
          "914: |   3888: 78 27 28 73 65 67 69 64 2c 20 74 65 72 6d 2c 20   x'(segid, term,",
          "915: |   3904: 70 67 6e 6f 2c 20 50 52 49 4d 41 52 59 20 4b 45   pgno, PRIMARY KE",
          "916: |   3920: 59 28 73 65 67 69 64 2c 20 74 65 72 6d 29 29 20   Y(segid, term))",
          "917: |   3936: 57 49 54 48 4f 55 54 20 52 4f 57 49 44 55 02 07   WITHOUT ROWIDU..",
          "918: |   3952: 17 1b 1b 01 81 01 74 61 62 6c 65 74 31 5f 64 61   ......tablet1_da",
          "919: |   3968: 74 61 74 31 5f 64 61 74 61 02 43 52 45 41 54 45   tat1_data.CREATE",
          "920: |   3984: 20 54 41 42 4c 45 20 27 74 31 5f 64 61 74 61 27    TABLE 't1_data'",
          "921: |   4000: 28 69 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d   (id INTEGER PRIM",
          "922: |   4016: 41 52 59 20 4b 45 59 2c 20 62 6c 6f 63 6b 20 42   ARY KEY, block B",
          "923: |   4032: 4c 4f 42 29 3a 01 06 17 11 11 08 63 74 61 62 6c   LOB):......ctabl",
          "924: |   4048: 65 74 31 74 31 43 52 45 41 54 45 20 56 49 52 54   et1t1CREATE VIRT",
          "925: |   4064: 55 41 4c 20 54 41 42 4c 45 20 74 31 20 55 53 49   UAL TABLE t1 USI",
          "926: |   4080: 4e 47 20 66 74 73 35 28 63 6f 6e 74 65 6e 74 29   NG fts5(content)",
          "927: | page 2 offset 4096",
          "928: |      0: 0d 00 00 00 03 0f bd 00 0f e8 0f ef 0f bd 00 00   ................",
          "929: |   4016: 00 00 00 00 00 00 00 00 00 00 00 00 00 24 84 80   .............$..",
          "930: |   4032: 80 80 80 01 03 00 4e 00 00 00 1e 06 30 61 62 61   ......N.....0aba",
          "931: |   4048: 63 6b 01 02 02 04 02 66 74 00 02 22 04 04 6e 64   ck.....ft.....nd",
          "932: |   4064: 6f 6e 04 67 90 38 2a 07 05 01 03 00 10 03 03 0f   on.g.8*.........",
          "933: |   4080: 0a 03 00 24 00 00 00 00 01 01 01 00 01 01 01 01   ...$............",
          "934: | page 3 offset 8192",
          "935: |      0: 0a 00 00 00 01 0f fa 00 0f fa 00 00 00 00 00 00   ................",
          "936: |   4080: 00 00 00 00 00 00 00 00 00 00 05 04 09 0c 01 02   ................",
          "937: | page 4 offset 12288",
          "938: |      0: 0d 00 00 00 03 0f e0 00 0f f6 0f ec 0f e0 00 00   ................",
          "939: |   4064: 0a 03 03 00 1b 61 62 61 6e 64 6f 6e 08 02 03 00   .....abandon....",
          "940: |   4080: 17 61 62 61 66 74 08 01 03 00 17 61 62 61 63 6b   .abaft.....aback",
          "941: | page 5 offset 16384",
          "942: |      0: 0d 00 00 00 03 0f ee 00 0f fa 0f f4 0f ee 00 00   ................",
          "943: |   4064: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04 03   ................",
          "944: |   4080: 03 00 0e 01 04 02 03 00 0e 01 04 01 03 00 0e 01   ................",
          "945: | page 6 offset 20480",
          "946: |      0: 0a 00 00 00 01 0f f4 00 0f f4 00 00 00 00 00 00   ................",
          "947: |   4080: 00 00 00 00 0b 03 1b 01 76 65 72 73 69 6f 6e 04   ........version.",
          "948: | page 7 offset 24576",
          "949: |      0: 0d 00 00 00 03 0f d6 00 0f f4 0f e1 0f d6 00 00   ................",
          "950: |   4048: 00 00 00 00 00 00 09 03 02 1b 72 65 62 75 69 6c   ..........rebuil",
          "951: |   4064: 64 11 02 02 2b 69 6e 74 65 67 72 69 74 79 2d 63   d...+integrity-c",
          "952: |   4080: 68 65 63 6b 0a 01 02 1d 6f 70 74 69 6d 69 7a 65   heck....optimize",
          "953: | page 8 offset 28672",
          "954: |      0: 03 07 17 19 19 01 81 2d 74 61 62 6c 65 74 31 5f   .......-tablet1_",
          "955: |     16: 69 64 78 74 31 5f 69 64 78 03 43 52 45 41 54 45   idxt1_idx.CREATE",
          "956: |     32: 20 54 41 42 4c 45 20 27 74 31 5f 66 17 42 03 30    TABLE 't1_f.B.0",
          "957: |     48: 01 00 00 10 10 04 02 02 00 00 00 00 00 00 00 00   ................",
          "958: |     64: 70 00 00 00 00 00 00 00 00 00 00 00 70 00 00 00   p...........p...",
          "959: | end c16.db",
          "960: }]} {}",
          "962: do_catchsql_test 15.1 {",
          "963:   INSERT INTO t1(t1) VALUES('integrity-check');",
          "964: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c80bb15b44e9b6a3c0c5a49d5e93e66376c3520ecefc1db7425c8a7e09d3eade",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2ce9b6bcd500c8836748aa5b34bcb02b7f145e90",
      "candidate_info": {
        "commit_hash": "2ce9b6bcd500c8836748aa5b34bcb02b7f145e90",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2ce9b6bcd500c8836748aa5b34bcb02b7f145e90",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Improved comments and extra assert() statements on the OP_Savepoint opcode, just to make the code a little easier to read and reason about.\n\nFossilOrigin-Name: e80b2d9fcbc82ae5dc8a1fc13196f9a30bdb504eb5a5c131d136a78bbd5bbe7b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3cc55e09e6c1de2059d97bdddf2fdfbdcc62c584b513f56faf9d3a39ef80cddd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3099:       }",
          "3100:     }",
          "3101:   }else{",
          "3102:     iSavepoint = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3103:     assert( p1==SAVEPOINT_RELEASE || p1==SAVEPOINT_ROLLBACK );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3152:             if( rc!=SQLITE_OK ) goto abort_due_to_error;",
          "3153:           }",
          "3154:         }else{",
          "3155:           isSchemaChange = 0;",
          "3156:         }",
          "3157:         for(ii=0; ii<db->nDb; ii++){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3157:           assert( p1==SAVEPOINT_RELEASE );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3188:           db->nSavepoint--;",
          "3189:         }",
          "3190:       }else{",
          "3191:         db->nDeferredCons = pSavepoint->nDeferredCons;",
          "3192:         db->nDeferredImmCons = pSavepoint->nDeferredImmCons;",
          "3193:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3194:         assert( p1==SAVEPOINT_ROLLBACK );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4e61e88348693cde472989b3dc1a06b5ff9dd9c0",
      "candidate_info": {
        "commit_hash": "4e61e88348693cde472989b3dc1a06b5ff9dd9c0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4e61e88348693cde472989b3dc1a06b5ff9dd9c0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "src/sqliteInt.h",
          "src/vacuum.c",
          "test/e_vacuum.test"
        ],
        "message": "Only preserve rowid values for VACUUM INTO.  Keep the legacy behavior of renumbering rowids for ordinary VACUUM.\n\nFossilOrigin-Name: 13a0ea6466b051ea5281865ed5285b8b5a99ec4307f400c5f7b03692723f1cd1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vacuum.c||src/vacuum.c",
          "test/e_vacuum.test||test/e_vacuum.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8d3af2010f4f652865f5c0d18e3bc793de05f8e75e75cc77786f61004b2ad28f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2352:       sqlite3RowidConstraint(pParse, onError, pDest);",
          "2353:       sqlite3VdbeJumpHere(v, addr2);",
          "2354:       autoIncStep(pParse, regAutoinc, regRowid);",
          "2356:       addr1 = sqlite3VdbeAddOp2(v, OP_NewRowid, iDest, regRowid);",
          "2357:     }else{",
          "2358:       addr1 = sqlite3VdbeAddOp2(v, OP_Rowid, iSrc, regRowid);",
          "",
          "[Removed Lines]",
          "2355:     }else if( pDest->pIndex==0 && !(db->mDbFlags & DBFLAG_Vacuum) ){",
          "",
          "[Added Lines]",
          "2355:     }else if( pDest->pIndex==0 && !(db->mDbFlags & DBFLAG_VacuumInto) ){",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/vacuum.c||src/vacuum.c": [
          "File: src/vacuum.c -> src/vacuum.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "170:     return SQLITE_ERROR;",
          "171:   }",
          "172:   saved_openFlags = db->openFlags;",
          "173:   if( pOut ){",
          "174:     if( sqlite3_value_type(pOut)!=SQLITE_TEXT ){",
          "175:       sqlite3SetString(pzErrMsg, db, \"non-text filename\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "173:   saved_mDbFlags = db->mDbFlags;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "178:     zOut = (const char*)sqlite3_value_text(pOut);",
          "179:     db->openFlags &= ~SQLITE_OPEN_READONLY;",
          "180:     db->openFlags |= SQLITE_OPEN_CREATE|SQLITE_OPEN_READWRITE;",
          "181:   }else{",
          "182:     zOut = \"\";",
          "183:   }",
          "188:   saved_flags = db->flags;",
          "190:   saved_nChange = db->nChange;",
          "191:   saved_nTotalChange = db->nTotalChange;",
          "192:   saved_mTrace = db->mTrace;",
          "193:   db->flags |= SQLITE_WriteSchema | SQLITE_IgnoreChecks;",
          "195:   db->flags &= ~(u64)(SQLITE_ForeignKeys | SQLITE_ReverseOrder",
          "196:                    | SQLITE_Defensive | SQLITE_CountRows);",
          "197:   db->mTrace = 0;",
          "",
          "[Removed Lines]",
          "189:   saved_mDbFlags = db->mDbFlags;",
          "194:   db->mDbFlags |= DBFLAG_PreferBuiltin | DBFLAG_Vacuum;",
          "",
          "[Added Lines]",
          "182:     db->mDbFlags |= DBFLAG_PreferBuiltin | DBFLAG_Vacuum | DBFLAG_VacuumInto;",
          "185:     db->mDbFlags |= DBFLAG_PreferBuiltin | DBFLAG_Vacuum;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "307:       zDbMain",
          "308:   );",
          "309:   assert( (db->mDbFlags & DBFLAG_Vacuum)!=0 );",
          "311:   if( rc!=SQLITE_OK ) goto end_of_vacuum;",
          "",
          "[Removed Lines]",
          "310:   db->mDbFlags &= ~DBFLAG_Vacuum;",
          "",
          "[Added Lines]",
          "311:   db->mDbFlags &= ~(DBFLAG_Vacuum|DBFLAG_VacuumInto);",
          "",
          "---------------"
        ],
        "test/e_vacuum.test||test/e_vacuum.test": [
          "File: test/e_vacuum.test -> test/e_vacuum.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "232: do_execsql_test e_vacuum-3.1.2 {",
          "233:   VACUUM;",
          "234:   SELECT rowid, x FROM t4;",
          "238: do_execsql_test e_vacuum-3.1.3 {",
          "239:   CREATE TABLE t5(x, y INTEGER PRIMARY KEY);",
          "240:   INSERT INTO t5(x) VALUES('x');",
          "",
          "[Removed Lines]",
          "235: } {1 x 3 z}",
          "236: # Was: {1 x 2 z}",
          "",
          "[Added Lines]",
          "235: } {1 x 2 z}",
          "237: # Rowids are preserved if an INTEGER PRIMARY KEY is used",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "248:   SELECT rowid, x FROM t5;",
          "249: } {1 x 3 z}",
          "251: # EVIDENCE-OF: R-49563-33883 A VACUUM will fail if there is an open",
          "252: # transaction, or if there are one or more active SQL statements when it",
          "253: # is run.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "251: # Rowid is preserved for VACUUM INTO",
          "252: do_execsql_test e_vacuum-3.1.5 {",
          "253:   DROP TABLE t5;",
          "254:   CREATE TABLE t5(x);",
          "255:   INSERT INTO t5(x) VALUES('x');",
          "256:   INSERT INTO t5(x) VALUES('y');",
          "257:   INSERT INTO t5(x) VALUES('z');",
          "258:   DELETE FROM t5 WHERE x = 'y';",
          "259:   SELECT rowid, x FROM t5;",
          "260: } {1 x 3 z}",
          "261: forcedelete test2.db",
          "262: do_execsql_test e_vacuum-3.1.6 {",
          "263:   VACUUM INTO 'test2.db';",
          "264:   ATTACH 'test2.db' AS aux1;",
          "265:   SELECT rowid, x FROM aux1.t5;",
          "266:   DETACH aux1;",
          "267: } {1 x 3 z}",
          "269: # Rowids are renumbered even if the table being vacuumed",
          "270: # has indexes.",
          "271: do_execsql_test e_vacuum-3.1.7 {",
          "272:   DROP TABLE t5;",
          "273:   CREATE TABLE t5(x,y,z);",
          "274:   INSERT INTO t5(x) VALUES('x');",
          "275:   INSERT INTO t5(x) VALUES('y');",
          "276:   INSERT INTO t5(x) VALUES('z');",
          "277:   UPDATE t5 SET y=x, z=random();",
          "278:   DELETE FROM t5 WHERE x = 'y';",
          "279:   CREATE INDEX t5x ON t5(x);",
          "280:   CREATE UNIQUE INDEX t5y ON t5(y);",
          "281:   CREATE INDEX t5zxy ON t5(z,x,y);",
          "282:   SELECT rowid, x FROM t5;",
          "283: } {1 x 3 z}",
          "284: do_execsql_test e_vacuum-3.1.8 {",
          "285:   VACUUM;",
          "286:   SELECT rowid, x FROM t5;",
          "287: } {1 x 3 z}",
          "",
          "---------------"
        ]
      }
    }
  ]
}