{
  "cve_id": "CVE-2016-8675",
  "cve_desc": "The get_vlc2 function in get_bits.h in Libav before 11.9 allows remote attackers to cause a denial of service (NULL pointer dereference and crash) via a crafted mp3 file, possibly related to startcode sequences during m4v detection.",
  "repo": "libav/libav",
  "patch_hash": "e5b019725f53b79159931d3a7317107cbbfd0860",
  "patch_info": {
    "commit_hash": "e5b019725f53b79159931d3a7317107cbbfd0860",
    "repo": "libav/libav",
    "commit_url": "https://github.com/libav/libav/commit/e5b019725f53b79159931d3a7317107cbbfd0860",
    "files": [
      "libavformat/m4vdec.c"
    ],
    "message": "m4vdec: Check for non-startcode 00 00 00 sequences in probe\n\nThis makes the m4v detection less trigger-happy.\n\nBug-Id: 949\nSigned-off-by: Diego Biurrun <diego@biurrun.de>",
    "before_after_code_files": [
      "libavformat/m4vdec.c||libavformat/m4vdec.c"
    ]
  },
  "patch_diff": {
    "libavformat/m4vdec.c||libavformat/m4vdec.c": [
      "File: libavformat/m4vdec.c -> libavformat/m4vdec.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "34:     for (i = 0; i < probe_packet->buf_size; i++) {",
      "35:         temp_buffer = (temp_buffer << 8) + probe_packet->buf[i];",
      "37:             continue;",
      "39:         if (temp_buffer == VOP_START_CODE)",
      "40:             VOP++;",
      "41:         else if (temp_buffer == VISUAL_OBJECT_START_CODE)",
      "42:             VISO++;",
      "44:             VO++;",
      "46:             VOL++;",
      "47:         else if (!(0x1AF < temp_buffer && temp_buffer < 0x1B7) &&",
      "48:                  !(0x1B9 < temp_buffer && temp_buffer < 0x1C4))",
      "",
      "[Removed Lines]",
      "36:         if ((temp_buffer & 0xffffff00) != 0x100)",
      "43:         else if (temp_buffer < 0x120)",
      "45:         else if (temp_buffer < 0x130)",
      "",
      "[Added Lines]",
      "36:         if (temp_buffer & 0xfffffe00)",
      "37:             continue;",
      "38:         if (temp_buffer < 2)",
      "45:         else if (temp_buffer >= 0x100 && temp_buffer < 0x120)",
      "47:         else if (temp_buffer >= 0x120 && temp_buffer < 0x130)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "45abbe2041753d761b69fbdccc44dbcbd491daea",
      "candidate_info": {
        "commit_hash": "45abbe2041753d761b69fbdccc44dbcbd491daea",
        "repo": "libav/libav",
        "commit_url": "https://github.com/libav/libav/commit/45abbe2041753d761b69fbdccc44dbcbd491daea",
        "files": [
          "libavformat/m4vdec.c"
        ],
        "message": "m4vdec: Check for non-startcode 00 00 00 sequences in probe\n\nThis makes the m4v detection less trigger-happy.\n\nBug-Id: 962\nSigned-off-by: Diego Biurrun <diego@biurrun.de>\n(cherry picked from commit e5b019725f53b79159931d3a7317107cbbfd0860)\nSigned-off-by: Sean McGovern <gseanmcg@gmail.com>",
        "before_after_code_files": [
          "libavformat/m4vdec.c||libavformat/m4vdec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavformat/m4vdec.c||libavformat/m4vdec.c"
          ],
          "candidate": [
            "libavformat/m4vdec.c||libavformat/m4vdec.c"
          ]
        }
      },
      "candidate_diff": {
        "libavformat/m4vdec.c||libavformat/m4vdec.c": [
          "File: libavformat/m4vdec.c -> libavformat/m4vdec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:     for (i = 0; i < probe_packet->buf_size; i++) {",
          "35:         temp_buffer = (temp_buffer << 8) + probe_packet->buf[i];",
          "37:             continue;",
          "39:         if (temp_buffer == VOP_START_CODE)",
          "40:             VOP++;",
          "41:         else if (temp_buffer == VISUAL_OBJECT_START_CODE)",
          "42:             VISO++;",
          "44:             VO++;",
          "46:             VOL++;",
          "47:         else if (!(0x1AF < temp_buffer && temp_buffer < 0x1B7) &&",
          "48:                  !(0x1B9 < temp_buffer && temp_buffer < 0x1C4))",
          "",
          "[Removed Lines]",
          "36:         if ((temp_buffer & 0xffffff00) != 0x100)",
          "43:         else if (temp_buffer < 0x120)",
          "45:         else if (temp_buffer < 0x130)",
          "",
          "[Added Lines]",
          "36:         if (temp_buffer & 0xfffffe00)",
          "37:             continue;",
          "38:         if (temp_buffer < 2)",
          "45:         else if (temp_buffer >= 0x100 && temp_buffer < 0x120)",
          "47:         else if (temp_buffer >= 0x120 && temp_buffer < 0x130)",
          "",
          "---------------"
        ]
      }
    }
  ]
}