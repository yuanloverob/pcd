{
  "cve_id": "CVE-2013-1831",
  "cve_desc": "lib/setuplib.php in Moodle through 2.1.10, 2.2.x before 2.2.8, 2.3.x before 2.3.5, and 2.4.x before 2.4.2 allows remote attackers to obtain sensitive information via an invalid request, which reveals the absolute path in an exception message.",
  "repo": "moodle/moodle",
  "patch_hash": "8d220cb552d9c55b98aef70e2f40ef560efeb79b",
  "patch_info": {
    "commit_hash": "8d220cb552d9c55b98aef70e2f40ef560efeb79b",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/8d220cb552d9c55b98aef70e2f40ef560efeb79b",
    "files": [
      "lib/setuplib.php",
      "lib/tests/setuplib_test.php"
    ],
    "message": "MDL-36901: Remove system paths from exceptions\n\nReplaces any server paths, like dataroot, with a token\nin exception messages and debug info.",
    "before_after_code_files": [
      "lib/setuplib.php||lib/setuplib.php",
      "lib/tests/setuplib_test.php||lib/tests/setuplib_test.php"
    ]
  },
  "patch_diff": {
    "lib/setuplib.php||lib/setuplib.php": [
      "File: lib/setuplib.php -> lib/setuplib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "526:         $debuginfo .= PHP_EOL.'$a contents: '.print_r($a, true);",
      "527:     }",
      "530:     if (function_exists('clean_text')) {",
      "531:         $message = clean_text($message);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "530:     $searches = array();",
      "531:     $replaces = array();",
      "532:     $cfgnames = array('tempdir', 'cachedir', 'themedir',",
      "533:         'langmenucachefile', 'langcacheroot', 'dataroot', 'dirroot');",
      "534:     foreach ($cfgnames as $cfgname) {",
      "535:         if (property_exists($CFG, $cfgname)) {",
      "536:             $searches[] = $CFG->$cfgname;",
      "537:             $replaces[] = \"[$cfgname]\";",
      "538:         }",
      "539:     }",
      "540:     if (!empty($searches)) {",
      "541:         $message   = str_replace($searches, $replaces, $message);",
      "542:         $debuginfo = str_replace($searches, $replaces, $debuginfo);",
      "543:     }",
      "",
      "---------------"
    ],
    "lib/tests/setuplib_test.php||lib/tests/setuplib_test.php": [
      "File: lib/tests/setuplib_test.php -> lib/tests/setuplib_test.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "118:             $this->assertTrue(is_web_crawler(), \"$agent should be considered a search engine\");",
      "119:         }",
      "120:     }",
      "121: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "125:     public function test_exception_info_removes_serverpaths() {",
      "126:         global $CFG;",
      "129:         $cfgnames = array('dataroot', 'dirroot', 'tempdir', 'cachedir');",
      "131:         $fixture  = '';",
      "132:         $expected = '';",
      "133:         foreach ($cfgnames as $cfgname) {",
      "134:             if (!empty($CFG->$cfgname)) {",
      "135:                 $fixture  .= $CFG->$cfgname.' ';",
      "136:                 $expected .= \"[$cfgname] \";",
      "137:             }",
      "138:         }",
      "139:         $exception     = new moodle_exception('generalexceptionmessage', 'error', '', $fixture, $fixture);",
      "140:         $exceptioninfo = get_exception_info($exception);",
      "142:         $this->assertContains($expected, $exceptioninfo->message, 'Exception message does not contain system paths');",
      "143:         $this->assertContains($expected, $exceptioninfo->debuginfo, 'Exception debug info does not contain system paths');",
      "144:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "85b3806114776da1c327dc392cdc9b0d3b47b993",
      "candidate_info": {
        "commit_hash": "85b3806114776da1c327dc392cdc9b0d3b47b993",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/85b3806114776da1c327dc392cdc9b0d3b47b993",
        "files": [
          "admin/cli/install.php",
          "admin/tool/behat/cli/util.php",
          "config-dist.php",
          "install.php",
          "lib/moodlelib.php",
          "lib/setup.php",
          "lib/setuplib.php",
          "lib/testing/classes/util.php",
          "lib/tests/setuplib_test.php",
          "lib/upgrade.txt",
          "lib/upgradelib.php"
        ],
        "message": "MDL-40545 add $CFG->localcachedir intended for local caching on cluster nodes",
        "before_after_code_files": [
          "admin/cli/install.php||admin/cli/install.php",
          "admin/tool/behat/cli/util.php||admin/tool/behat/cli/util.php",
          "config-dist.php||config-dist.php",
          "install.php||install.php",
          "lib/moodlelib.php||lib/moodlelib.php",
          "lib/setup.php||lib/setup.php",
          "lib/setuplib.php||lib/setuplib.php",
          "lib/testing/classes/util.php||lib/testing/classes/util.php",
          "lib/tests/setuplib_test.php||lib/tests/setuplib_test.php",
          "lib/upgradelib.php||lib/upgradelib.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/setuplib.php||lib/setuplib.php",
            "lib/tests/setuplib_test.php||lib/tests/setuplib_test.php"
          ],
          "candidate": [
            "lib/setuplib.php||lib/setuplib.php",
            "lib/tests/setuplib_test.php||lib/tests/setuplib_test.php"
          ]
        }
      },
      "candidate_diff": {
        "admin/cli/install.php||admin/cli/install.php": [
          "File: admin/cli/install.php -> admin/cli/install.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "394:         cli_error(get_string('pathserrcreatedataroot', 'install', $a));",
          "395:     }",
          "396: }",
          "401: if ($CFG->lang !== 'en') {",
          "",
          "[Removed Lines]",
          "397: $CFG->tempdir  = $CFG->dataroot.'/temp';",
          "398: $CFG->cachedir = $CFG->dataroot.'/cache';",
          "",
          "[Added Lines]",
          "397: $CFG->tempdir       = $CFG->dataroot.'/temp';",
          "398: $CFG->cachedir      = $CFG->dataroot.'/cache';",
          "399: $CFG->localcachedir = $CFG->dataroot.'/localcache';",
          "",
          "---------------"
        ],
        "admin/tool/behat/cli/util.php||admin/tool/behat/cli/util.php": [
          "File: admin/tool/behat/cli/util.php -> admin/tool/behat/cli/util.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "153: unset($CFG->cachedir);",
          "154: unset($CFG->tempdir);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "154: unset($CFG->localcachedir);",
          "",
          "---------------"
        ],
        "config-dist.php||config-dist.php": [
          "File: config-dist.php -> config-dist.php"
        ],
        "install.php||install.php": [
          "File: install.php -> install.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "170: $CFG->dataroot             = $config->dataroot;",
          "171: $CFG->tempdir              = $CFG->dataroot.'/temp';",
          "172: $CFG->cachedir             = $CFG->dataroot.'/cache';",
          "173: $CFG->admin                = $config->admin;",
          "174: $CFG->docroot              = 'http://docs.moodle.org';",
          "175: $CFG->langotherroot        = $CFG->dataroot.'/lang';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "173: $CFG->localcachedir        = $CFG->dataroot.'/localcache';",
          "",
          "---------------"
        ],
        "lib/moodlelib.php||lib/moodlelib.php": [
          "File: lib/moodlelib.php -> lib/moodlelib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1562:     make_cache_directory('htmlpurifier');",
          "1563: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1566:     remove_dir($CFG->localcachedir, true);",
          "1567:     set_config('localcachedirpurged', time());",
          "1568:     make_localcache_directory('', true);",
          "",
          "---------------"
        ],
        "lib/setup.php||lib/setup.php": [
          "File: lib/setup.php -> lib/setup.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:     $CFG->cachedir = \"$CFG->dataroot/cache\";",
          "157: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161: if (!isset($CFG->localcachedir)) {",
          "162:     $CFG->localcachedir = \"$CFG->dataroot/localcache\";",
          "163: }",
          "",
          "---------------"
        ],
        "lib/setuplib.php||lib/setuplib.php": [
          "File: lib/setuplib.php -> lib/setuplib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "530:     $searches = array();",
          "531:     $replaces = array();",
          "533:         'langmenucachefile', 'langcacheroot', 'dataroot', 'dirroot');",
          "534:     foreach ($cfgnames as $cfgname) {",
          "535:         if (property_exists($CFG, $cfgname)) {",
          "",
          "[Removed Lines]",
          "532:     $cfgnames = array('tempdir', 'cachedir', 'themedir',",
          "",
          "[Added Lines]",
          "532:     $cfgnames = array('tempdir', 'cachedir', 'localcachedir', 'themedir',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1311:         debugging('Use make_temp_directory() for creation of temporary directory and $CFG->tempdir to get the location.');",
          "1313:     } else if (strpos($directory, 'cache/') === 0 or $directory === 'cache') {",
          "1315:     }",
          "1317:     protect_directory($CFG->dataroot);",
          "",
          "[Removed Lines]",
          "1314:         debugging('Use make_cache_directory() for creation of chache directory and $CFG->cachedir to get the location.');",
          "",
          "[Added Lines]",
          "1314:         debugging('Use make_cache_directory() for creation of cache directory and $CFG->cachedir to get the location.');",
          "1316:     } else if (strpos($directory, 'localcache/') === 0 or $directory === 'localcache') {",
          "1317:         debugging('Use make_localcache_directory() for creation of local cache directory and $CFG->localcachedir to get the location.');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1355:     return make_writable_directory(\"$CFG->cachedir/$directory\", $exceptiononerror);",
          "1356: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1377: function make_localcache_directory($directory, $exceptiononerror = true) {",
          "1378:     global $CFG;",
          "1380:     make_writable_directory($CFG->localcachedir, $exceptiononerror);",
          "1382:     if ($CFG->localcachedir !== \"$CFG->dataroot/localcache\") {",
          "1383:         protect_directory($CFG->localcachedir);",
          "1384:     } else {",
          "1385:         protect_directory($CFG->dataroot);",
          "1386:     }",
          "1388:     if (!isset($CFG->localcachedirpurged)) {",
          "1389:         $CFG->localcachedirpurged = 0;",
          "1390:     }",
          "1391:     $timestampfile = \"$CFG->localcachedir/.lastpurged\";",
          "1393:     if (!file_exists($timestampfile)) {",
          "1394:         touch($timestampfile);",
          "1395:         @chmod($timestampfile, $CFG->filepermissions);",
          "1397:     } else if (filemtime($timestampfile) <  $CFG->localcachedirpurged) {",
          "1399:         remove_dir($CFG->localcachedir, true);",
          "1400:         if ($CFG->localcachedir !== \"$CFG->dataroot/localcache\") {",
          "1401:             protect_directory($CFG->localcachedir);",
          "1402:         }",
          "1403:         touch($timestampfile);",
          "1404:         @chmod($timestampfile, $CFG->filepermissions);",
          "1405:         clearstatcache();",
          "1406:     }",
          "1408:     if ($directory === '') {",
          "1409:         return $CFG->localcachedir;",
          "1410:     }",
          "1412:     return make_writable_directory(\"$CFG->localcachedir/$directory\", $exceptiononerror);",
          "1413: }",
          "",
          "---------------"
        ],
        "lib/testing/classes/util.php||lib/testing/classes/util.php": [
          "File: lib/testing/classes/util.php -> lib/testing/classes/util.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "599:         make_temp_directory('');",
          "600:         make_cache_directory('');",
          "601:         make_cache_directory('htmlpurifier');",
          "603:         cache_factory::reset();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "602:         make_localcache_directory('');",
          "",
          "---------------"
        ],
        "lib/tests/setuplib_test.php||lib/tests/setuplib_test.php": [
          "File: lib/tests/setuplib_test.php -> lib/tests/setuplib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "34: class core_setuplib_testcase extends basic_testcase {",
          "",
          "[Added Lines]",
          "34: class core_setuplib_testcase extends advanced_testcase {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126:         global $CFG;",
          "131:         $fixture  = '';",
          "132:         $expected = '';",
          "",
          "[Removed Lines]",
          "129:         $cfgnames = array('dataroot', 'dirroot', 'tempdir', 'cachedir');",
          "",
          "[Added Lines]",
          "129:         $cfgnames = array('dataroot', 'dirroot', 'tempdir', 'cachedir', 'localcachedir');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "142:         $this->assertContains($expected, $exceptioninfo->message, 'Exception message does not contain system paths');",
          "143:         $this->assertContains($expected, $exceptioninfo->debuginfo, 'Exception debug info does not contain system paths');",
          "144:     }",
          "145: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146:     public function test_localcachedir() {",
          "147:         global $CFG;",
          "149:         $this->resetAfterTest(true);",
          "152:         $this->assertSame(\"$CFG->dataroot/localcache\", $CFG->localcachedir);",
          "154:         $now = time();",
          "155:         $timestampfile = \"$CFG->localcachedir/.lastpurged\";",
          "157:         $dir = make_localcache_directory('', false);",
          "158:         $this->assertSame($CFG->localcachedir, $dir);",
          "159:         $this->assertFileNotExists(\"$CFG->localcachedir/.htaccess\");",
          "160:         $this->assertFileExists($timestampfile);",
          "161:         $this->assertGreaterThanOrEqual($now, filemtime($timestampfile));",
          "162:         $this->assertLessThanOrEqual(time(), filemtime($timestampfile));",
          "164:         $dir = make_localcache_directory('test/test', false);",
          "165:         $this->assertSame(\"$CFG->localcachedir/test/test\", $dir);",
          "168:         $CFG->localcachedir = \"$CFG->dataroot/testlocalcache\";",
          "169:         $now = time();",
          "170:         $timestampfile = \"$CFG->localcachedir/.lastpurged\";",
          "171:         $this->assertFileNotExists($timestampfile);",
          "173:         $dir = make_localcache_directory('', false);",
          "174:         $this->assertSame($CFG->localcachedir, $dir);",
          "175:         $this->assertFileExists(\"$CFG->localcachedir/.htaccess\");",
          "176:         $this->assertFileExists($timestampfile);",
          "177:         $this->assertGreaterThanOrEqual($now, filemtime($timestampfile));",
          "178:         $this->assertLessThanOrEqual(time(), filemtime($timestampfile));",
          "180:         $dir = make_localcache_directory('test', false);",
          "181:         $this->assertSame(\"$CFG->localcachedir/test\", $dir);",
          "183:         $prevtime = filemtime($timestampfile);",
          "184:         $dir = make_localcache_directory('pokus', false);",
          "185:         $this->assertSame(\"$CFG->localcachedir/pokus\", $dir);",
          "186:         $this->assertSame($prevtime, filemtime($timestampfile));",
          "190:         $testfile = \"$CFG->localcachedir/test/test.txt\";",
          "191:         $this->assertTrue(touch($testfile));",
          "193:         $now = time();",
          "194:         set_config('localcachedirpurged', $now - 2);",
          "195:         purge_all_caches();",
          "196:         $this->assertFileNotExists($testfile);",
          "197:         $this->assertFileNotExists(dirname($testfile));",
          "198:         $this->assertFileExists($timestampfile);",
          "199:         $this->assertGreaterThanOrEqual($now, filemtime($timestampfile));",
          "200:         $this->assertLessThanOrEqual(time(), filemtime($timestampfile));",
          "201:         $this->assertGreaterThanOrEqual($now, $CFG->localcachedirpurged);",
          "202:         $this->assertLessThanOrEqual(time(), $CFG->localcachedirpurged);",
          "205:         make_localcache_directory('test', false);",
          "206:         $this->assertTrue(touch($testfile));",
          "207:         set_config('localcachedirpurged', $now - 1);",
          "208:         $this->assertTrue(touch($timestampfile, $now - 2));",
          "209:         clearstatcache();",
          "210:         $this->assertSame($now - 2, filemtime($timestampfile));",
          "212:         $now = time();",
          "213:         $dir = make_localcache_directory('', false);",
          "214:         $this->assertSame(\"$CFG->localcachedir\", $dir);",
          "215:         $this->assertFileNotExists($testfile);",
          "216:         $this->assertFileNotExists(dirname($testfile));",
          "217:         $this->assertFileExists($timestampfile);",
          "218:         $this->assertGreaterThanOrEqual($now, filemtime($timestampfile));",
          "219:         $this->assertLessThanOrEqual(time(), filemtime($timestampfile));",
          "220:     }",
          "",
          "---------------"
        ],
        "lib/upgradelib.php||lib/upgradelib.php": [
          "File: lib/upgradelib.php -> lib/upgradelib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1467:     global $CFG, $DB;",
          "1471:     remove_dir($CFG->cachedir.'', true);",
          "1473:     remove_dir($CFG->tempdir.'', true);",
          "1475:     remove_dir($CFG->dataroot.'/muc', true);",
          "1477:     try {",
          "1478:         set_time_limit(600);",
          "",
          "[Removed Lines]",
          "1470:     make_cache_directory('', true);",
          "1472:     make_temp_directory('', true);",
          "1474:     make_writable_directory($CFG->dataroot.'/muc', true);",
          "",
          "[Added Lines]",
          "1471:     make_cache_directory('', true);",
          "1473:     remove_dir($CFG->localcachedir.'', true);",
          "1474:     make_localcache_directory('', true);",
          "1477:     make_temp_directory('', true);",
          "1480:     make_writable_directory($CFG->dataroot.'/muc', true);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "598a82c950c258a476b93952172c5e9d15333114",
      "candidate_info": {
        "commit_hash": "598a82c950c258a476b93952172c5e9d15333114",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/598a82c950c258a476b93952172c5e9d15333114",
        "files": [
          "config-dist.php",
          "lang/en/cache.php",
          "lib/classes/string_manager_install.php",
          "lib/classes/string_manager_standard.php",
          "lib/db/caches.php",
          "lib/moodlelib.php",
          "lib/setuplib.php",
          "lib/upgrade.txt",
          "lib/weblib.php"
        ],
        "message": "MDL-41019 improve language caching\n\nIncludes:\n* no more hacky reloads, everything is written only once and kept until cache reset\n* lang menu list is now cached in MUC\n* both string and lang menu caches are compatible with local caches on cluster nodes\n* config-dist.php cleanup",
        "before_after_code_files": [
          "config-dist.php||config-dist.php",
          "lang/en/cache.php||lang/en/cache.php",
          "lib/classes/string_manager_install.php||lib/classes/string_manager_install.php",
          "lib/classes/string_manager_standard.php||lib/classes/string_manager_standard.php",
          "lib/db/caches.php||lib/db/caches.php",
          "lib/moodlelib.php||lib/moodlelib.php",
          "lib/setuplib.php||lib/setuplib.php",
          "lib/weblib.php||lib/weblib.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/setuplib.php||lib/setuplib.php"
          ],
          "candidate": [
            "lib/setuplib.php||lib/setuplib.php"
          ]
        }
      },
      "candidate_diff": {
        "config-dist.php||config-dist.php": [
          "File: config-dist.php -> config-dist.php"
        ],
        "lang/en/cache.php||lang/en/cache.php": [
          "File: lang/en/cache.php -> lang/en/cache.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: $string['cachedef_eventinvalidation'] = 'Event invalidation';",
          "47: $string['cachedef_groupdata'] = 'Course group information';",
          "48: $string['cachedef_htmlpurifier'] = 'HTML Purifier - cleaned content';",
          "49: $string['cachedef_locking'] = 'Locking';",
          "50: $string['cachedef_observers'] = 'Event observers';",
          "51: $string['cachedef_plugininfo_base'] = 'Plugin info - base';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: $string['cachedef_langmenu'] = 'List of available languages';",
          "",
          "---------------"
        ],
        "lib/classes/string_manager_install.php||lib/classes/string_manager_install.php": [
          "File: lib/classes/string_manager_install.php -> lib/classes/string_manager_install.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:                 if (isset($string['parentlanguage'])) {",
          "108:                     $parent = $string['parentlanguage'];",
          "109:                 }",
          "111:             }",
          "112:         }",
          "",
          "[Removed Lines]",
          "110:                 unset($string);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/classes/string_manager_standard.php||lib/classes/string_manager_standard.php": [
          "File: lib/classes/string_manager_standard.php -> lib/classes/string_manager_standard.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:     protected $countgetstring = 0;",
          "49:     protected $translist;",
          "51:     protected $menucache;",
          "63:         $this->otherroot    = $otherroot;",
          "64:         $this->localroot    = $localroot;",
          "71:             $this->cache = cache::make('core', 'string');",
          "72:         } else {",
          "74:             $options = array(",
          "",
          "[Removed Lines]",
          "47:     protected $usecache;",
          "62:     public function __construct($otherroot, $localroot, $usecache, $translist, $menucache) {",
          "65:         $this->usecache     = $usecache;",
          "66:         $this->translist    = $translist;",
          "67:         $this->menucache    = $menucache;",
          "69:         if ($this->usecache) {",
          "",
          "[Added Lines]",
          "58:     public function __construct($otherroot, $localroot, $translist) {",
          "61:         if ($translist) {",
          "62:             $this->translist = array_combine($translist, $translist);",
          "63:         } else {",
          "64:             $this->translist = array();",
          "65:         }",
          "67:         if ($this->get_revision() > 0) {",
          "70:             $this->menucache = cache::make('core', 'langmenu');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:                 'simpledata' => true",
          "77:             );",
          "78:             $this->cache = cache::make_from_params(cache_store::MODE_REQUEST, 'core', 'string', array(), $options);",
          "79:         }",
          "80:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:             $this->menucache = cache::make_from_params(cache_store::MODE_REQUEST, 'core', 'langmenu', array(), $options);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "107:         global $CFG;",
          "109:         list($plugintype, $pluginname) = core_component::normalize_component($component);",
          "111:             $component = 'core';",
          "112:         } else {",
          "113:             $component = $plugintype . '_' . $pluginname;",
          "114:         }",
          "118:         if (!$disablecache and !$disablelocal) {",
          "122:             }",
          "123:         }",
          "",
          "[Removed Lines]",
          "106:     public function load_component_strings($component, $lang, $disablecache=false, $disablelocal=false) {",
          "110:         if ($plugintype == 'core' and is_null($pluginname)) {",
          "116:         $cachekey = $lang.'_'.$component;",
          "119:             $string = $this->cache->get($cachekey);",
          "120:             if ($string) {",
          "121:                 return $string;",
          "",
          "[Added Lines]",
          "106:     public function load_component_strings($component, $lang, $disablecache = false, $disablelocal = false) {",
          "110:         if ($plugintype === 'core' and is_null($pluginname)) {",
          "116:         $cachekey = $lang.'_'.$component.'_'.$this->get_key_suffix();",
          "118:         $cachedstring = $this->cache->get($cachekey);",
          "120:             if ($cachedstring !== false) {",
          "121:                 return $cachedstring;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "134:                 return array();",
          "135:             }",
          "136:             include(\"$CFG->dirroot/lang/en/$file.php\");",
          "141:             if (!$disablelocal and file_exists(\"$this->localroot/en_local/$file.php\")) {",
          "",
          "[Removed Lines]",
          "137:             $originalkeys = array_keys($string);",
          "138:             $originalkeys = array_flip($originalkeys);",
          "",
          "[Added Lines]",
          "137:             $enstring = $string;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "170:                 return array();",
          "171:             }",
          "172:             include(\"$location/lang/en/$file.php\");",
          "176:             if (!$disablelocal and file_exists(\"$this->localroot/en_local/$file.php\")) {",
          "177:                 include(\"$this->localroot/en_local/$file.php\");",
          "",
          "[Removed Lines]",
          "173:             $originalkeys = array_keys($string);",
          "174:             $originalkeys = array_flip($originalkeys);",
          "",
          "[Added Lines]",
          "172:             $enstring = $string;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "196:         }",
          "201:         if (!$disablelocal) {",
          "205:         }",
          "206:         return $string;",
          "207:     }",
          "",
          "[Removed Lines]",
          "199:         $string = array_intersect_key($string, $originalkeys);",
          "204:             $this->cache->set($cachekey, $string);",
          "",
          "[Added Lines]",
          "197:         $string = array_intersect_key($string, $enstring);",
          "202:             if ($cachedstring === false) {",
          "203:                 $this->cache->set($cachekey, $string);",
          "204:             }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "276:                 return 'en';",
          "277:             }",
          "285:             if (!isset($string[$identifier])) {",
          "295:                 }",
          "298:                 return \"[[$identifier]]\";",
          "299:             }",
          "300:         }",
          "",
          "[Removed Lines]",
          "278:             if ($this->usecache) {",
          "281:                 $this->usecache = false;",
          "282:                 $string = $this->load_component_strings($component, $lang, true);",
          "283:                 $this->usecache = true;",
          "284:             }",
          "287:                 list($plugintype, $pluginname) = core_component::normalize_component($component);",
          "288:                 if ($plugintype == 'core') {",
          "289:                     $file = \"lang/en/{$component}.php\";",
          "290:                 } else if ($plugintype == 'mod') {",
          "291:                     $file = \"mod/{$pluginname}/lang/en/{$pluginname}.php\";",
          "292:                 } else {",
          "293:                     $path = core_component::get_plugin_directory($plugintype, $pluginname);",
          "294:                     $file = \"{$path}/lang/en/{$plugintype}_{$pluginname}.php\";",
          "296:                 debugging(\"Invalid get_string() identifier: '{$identifier}' or component '{$component}'. \" .",
          "297:                 \"Perhaps you are missing \\$string['{$identifier}'] = ''; in {$file}?\", DEBUG_DEVELOPER);",
          "",
          "[Added Lines]",
          "282:                 if (debugging('', DEBUG_DEVELOPER)) {",
          "283:                     list($plugintype, $pluginname) = core_component::normalize_component($component);",
          "284:                     if ($plugintype === 'core') {",
          "285:                         $file = \"lang/en/{$component}.php\";",
          "286:                     } else if ($plugintype == 'mod') {",
          "287:                         $file = \"mod/{$pluginname}/lang/en/{$pluginname}.php\";",
          "288:                     } else {",
          "289:                         $path = core_component::get_plugin_directory($plugintype, $pluginname);",
          "290:                         $file = \"{$path}/lang/en/{$plugintype}_{$pluginname}.php\";",
          "291:                     }",
          "292:                     debugging(\"Invalid get_string() identifier: '{$identifier}' or component '{$component}'. \" .",
          "293:                     \"Perhaps you are missing \\$string['{$identifier}'] = ''; in {$file}?\", DEBUG_DEVELOPER);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "435:     public function translation_exists($lang, $includeall = true) {",
          "451:     }",
          "",
          "[Removed Lines]",
          "437:         if (strpos($lang, '_local') !== false) {",
          "439:             return false;",
          "440:         }",
          "441:         if (!$includeall and !empty($this->translist)) {",
          "442:             if (!in_array($lang, $this->translist)) {",
          "443:                 return false;",
          "444:             }",
          "445:         }",
          "446:         if ($lang === 'en') {",
          "448:             return true;",
          "449:         }",
          "450:         return file_exists(\"$this->otherroot/$lang/langconfig.php\");",
          "",
          "[Added Lines]",
          "433:         $translations = $this->get_list_of_translations($includeall);",
          "434:         return isset($translations[$lang]);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "462:         $languages = array();",
          "483:                 }",
          "484:             }",
          "485:         }",
          "507:             }",
          "537:             }",
          "538:         }",
          "542:         return $languages;",
          "543:     }",
          "",
          "[Removed Lines]",
          "464:         if (!empty($CFG->langcache) and is_readable($this->menucache)) {",
          "466:             $cachedlist = json_decode(file_get_contents($this->menucache), true);",
          "468:             if (is_array($cachedlist) and !empty($cachedlist)) {",
          "471:                 if (!$returnall and !empty($this->translist)) {",
          "473:                     foreach ($cachedlist as $langcode => $langname) {",
          "474:                         if (in_array($langcode, $this->translist)) {",
          "475:                             $languages[$langcode] = $langname;",
          "476:                         }",
          "477:                     }",
          "478:                     return $languages;",
          "480:                 } else {",
          "482:                     return $cachedlist;",
          "488:         if (!$returnall and !empty($this->translist)) {",
          "490:             foreach ($this->translist as $lang) {",
          "491:                 $lang = trim($lang);   // Just trim spaces to be a bit more permissive.",
          "492:                 if (strstr($lang, '_local') !== false) {",
          "493:                     continue;",
          "494:                 }",
          "495:                 if (strstr($lang, '_utf8') !== false) {",
          "496:                     continue;",
          "497:                 }",
          "498:                 if ($lang !== 'en' and !file_exists(\"$this->otherroot/$lang/langconfig.php\")) {",
          "500:                     continue;",
          "501:                 }",
          "502:                 $string = $this->load_component_strings('langconfig', $lang);",
          "503:                 if (!empty($string['thislanguage'])) {",
          "504:                     $languages[$lang] = $string['thislanguage'].' ('. $lang .')';",
          "505:                 }",
          "506:                 unset($string);",
          "509:         } else {",
          "511:             $langdirs = get_list_of_plugins('', '', $this->otherroot);",
          "513:             $langdirs = array_merge($langdirs, array(\"$CFG->dirroot/lang/en\" => 'en'));",
          "517:             foreach ($langdirs as $lang) {",
          "518:                 if (strstr($lang, '_local') !== false) {",
          "519:                     continue;",
          "520:                 }",
          "521:                 if (strstr($lang, '_utf8') !== false) {",
          "522:                     continue;",
          "523:                 }",
          "524:                 $string = $this->load_component_strings('langconfig', $lang);",
          "525:                 if (!empty($string['thislanguage'])) {",
          "526:                     $languages[$lang] = $string['thislanguage'].' ('. $lang .')';",
          "527:                 }",
          "528:                 unset($string);",
          "529:             }",
          "531:             if (!empty($CFG->langcache) and !empty($this->menucache)) {",
          "533:                 core_collator::asort($languages);",
          "534:                 check_dir_exists(dirname($this->menucache), true, true);",
          "535:                 file_put_contents($this->menucache, json_encode($languages));",
          "536:                 @chmod($this->menucache, $CFG->filepermissions);",
          "540:         core_collator::asort($languages);",
          "",
          "[Added Lines]",
          "448:         $cachekey = 'list_'.$this->get_key_suffix();",
          "449:         $cachedlist = $this->menucache->get($cachekey);",
          "450:         if ($cachedlist !== false) {",
          "452:             if ($returnall or empty($this->translist)) {",
          "453:                 return $cachedlist;",
          "454:             }",
          "456:             foreach ($cachedlist as $langcode => $langname) {",
          "457:                 if (isset($this->translist[$langcode])) {",
          "458:                     $languages[$langcode] = $langname;",
          "461:             return $languages;",
          "465:         $langdirs = get_list_of_plugins('', 'en', $this->otherroot);",
          "466:         $langdirs[\"$CFG->dirroot/lang/en\"] = 'en';",
          "469:         foreach ($langdirs as $lang) {",
          "470:             if (strrpos($lang, '_local') !== false) {",
          "472:                 continue;",
          "473:             }",
          "474:             if (strrpos($lang, '_utf8') !== false) {",
          "476:                 continue;",
          "478:             if ($lang !== clean_param($lang, PARAM_SAFEDIR)) {",
          "480:                 continue;",
          "481:             }",
          "482:             $string = $this->load_component_strings('langconfig', $lang);",
          "483:             if (!empty($string['thislanguage'])) {",
          "484:                 $languages[$lang] = $string['thislanguage'].' ('. $lang .')';",
          "485:             }",
          "486:         }",
          "488:         core_collator::asort($languages);",
          "491:         $this->menucache->set($cachekey, $languages);",
          "493:         if ($returnall or empty($this->translist)) {",
          "494:             return $languages;",
          "495:         }",
          "497:         $cachedlist = $languages;",
          "500:         $languages = array();",
          "501:         foreach ($cachedlist as $langcode => $langname) {",
          "502:             if (isset($this->translist[$langcode])) {",
          "503:                 $languages[$langcode] = $langname;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "566:     public function reset_caches($phpunitreset = false) {",
          "571:         $this->cache->purge();",
          "573:         if (!$phpunitreset) {",
          "",
          "[Removed Lines]",
          "567:         global $CFG;",
          "568:         require_once(\"$CFG->libdir/filelib.php\");",
          "",
          "[Added Lines]",
          "534:         $this->menucache->purge();",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "583:             set_config('langrev', $next);",
          "584:         }",
          "592:         if (function_exists('opcache_reset')) {",
          "593:             opcache_reset();",
          "594:         }",
          "595:     }",
          "601:     public function get_revision() {",
          "602:         global $CFG;",
          "603:         if (isset($CFG->langrev)) {",
          "604:             return (int)$CFG->langrev;",
          "605:         } else {",
          "",
          "[Removed Lines]",
          "588:         fulldelete($this->menucache);",
          "589:         $this->get_list_of_translations(true);",
          "",
          "[Added Lines]",
          "561:     protected function get_key_suffix() {",
          "562:         $rev = $this->get_revision();",
          "563:         if ($rev < 0) {",
          "565:             $rev = 0;",
          "566:         }",
          "568:         return $rev;",
          "569:     }",
          "577:         if (empty($CFG->langstringcache)) {",
          "578:             return -1;",
          "579:         }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "637:         include(\"$this->otherroot/$lang/langconfig.php\");",
          "639:         if (empty($string['parentlanguage']) or $string['parentlanguage'] === 'en') {",
          "641:             return array_merge(array($lang), $stack);",
          "647:         }",
          "648:     }",
          "649: }",
          "",
          "[Removed Lines]",
          "640:             unset($string);",
          "643:         } else {",
          "644:             $parentlang = $string['parentlanguage'];",
          "645:             unset($string);",
          "646:             return $this->populate_parent_languages($parentlang, array_merge(array($lang), $stack));",
          "",
          "[Added Lines]",
          "619:         $parentlang = $string['parentlanguage'];",
          "620:         return $this->populate_parent_languages($parentlang, array_merge(array($lang), $stack));",
          "",
          "---------------"
        ],
        "lib/db/caches.php||lib/db/caches.php": [
          "File: lib/db/caches.php -> lib/db/caches.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:         'persistentmaxsize' => 30",
          "40:     ),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:     'langmenu' => array(",
          "46:         'mode' => cache_store::MODE_APPLICATION,",
          "47:         'simplekeys' => true,",
          "48:         'simpledata' => true,",
          "49:         'persistent' => true,",
          "50:     ),",
          "",
          "---------------"
        ],
        "lib/moodlelib.php||lib/moodlelib.php": [
          "File: lib/moodlelib.php -> lib/moodlelib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "6635:                 $translist = explode(',', $CFG->langlist);",
          "6636:             }",
          "6647:         } else {",
          "6648:             $singleton = new core_string_manager_install();",
          "",
          "[Removed Lines]",
          "6638:             if (empty($CFG->langmenucachefile)) {",
          "6639:                 $langmenucache = $CFG->cachedir . '/languages';",
          "6640:             } else {",
          "6641:                 $langmenucache = $CFG->langmenucachefile;",
          "6642:             }",
          "6644:             $singleton = new core_string_manager_standard($CFG->langotherroot, $CFG->langlocalroot,",
          "6645:                 !empty($CFG->langstringcache), $translist, $langmenucache);",
          "",
          "[Added Lines]",
          "6638:             $singleton = new core_string_manager_standard($CFG->langotherroot, $CFG->langlocalroot, $translist);",
          "",
          "---------------"
        ],
        "lib/setuplib.php||lib/setuplib.php": [
          "File: lib/setuplib.php -> lib/setuplib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "530:     $searches = array();",
          "531:     $replaces = array();",
          "534:     foreach ($cfgnames as $cfgname) {",
          "535:         if (property_exists($CFG, $cfgname)) {",
          "536:             $searches[] = $CFG->$cfgname;",
          "",
          "[Removed Lines]",
          "532:     $cfgnames = array('tempdir', 'cachedir', 'localcachedir', 'themedir',",
          "533:         'langmenucachefile', 'langcacheroot', 'dataroot', 'dirroot');",
          "",
          "[Added Lines]",
          "532:     $cfgnames = array('tempdir', 'cachedir', 'localcachedir', 'themedir', 'dataroot', 'dirroot');",
          "",
          "---------------"
        ],
        "lib/weblib.php||lib/weblib.php": [
          "File: lib/weblib.php -> lib/weblib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3452:     global $CFG, $OUTPUT;",
          "3453:     $sm = get_string_manager();",
          "3461:     $data = new stdClass();",
          "",
          "[Removed Lines]",
          "3455:     if (!$sm->string_exists($identifier, $component) ||",
          "3456:         !$sm->string_exists($identifier . '_help', $component)) {",
          "3458:         $sm->load_component_strings($component, current_language(), true);",
          "3459:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b3daaada49a2dd83a4f1e832465d5c318f9f275c",
      "candidate_info": {
        "commit_hash": "b3daaada49a2dd83a4f1e832465d5c318f9f275c",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/b3daaada49a2dd83a4f1e832465d5c318f9f275c",
        "files": [
          "lib/setuplib.php"
        ],
        "message": "MDL-36901: Remove system paths from exceptions\n\nReplaces any server paths, like dataroot, with a token\nin exception messages and debug info.\n\nConflicts:\n\tlib/tests/setuplib_test.php",
        "before_after_code_files": [
          "lib/setuplib.php||lib/setuplib.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/setuplib.php||lib/setuplib.php"
          ],
          "candidate": [
            "lib/setuplib.php||lib/setuplib.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/setuplib.php||lib/setuplib.php": [
          "File: lib/setuplib.php -> lib/setuplib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "478:         $message = $module . '/' . $errorcode;",
          "479:     }",
          "482:     if (function_exists('clean_text')) {",
          "483:         $message = clean_text($message);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "482:     $searches = array();",
          "483:     $replaces = array();",
          "484:     $cfgnames = array('tempdir', 'cachedir', 'themedir',",
          "485:         'langmenucachefile', 'langcacheroot', 'dataroot', 'dirroot');",
          "486:     foreach ($cfgnames as $cfgname) {",
          "487:         if (property_exists($CFG, $cfgname)) {",
          "488:             $searches[] = $CFG->$cfgname;",
          "489:             $replaces[] = \"[$cfgname]\";",
          "490:         }",
          "491:     }",
          "492:     if (!empty($searches)) {",
          "493:         $message   = str_replace($searches, $replaces, $message);",
          "494:         $debuginfo = str_replace($searches, $replaces, $debuginfo);",
          "495:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "53c66110a878f4f4644728138ea97c22990263e3",
      "candidate_info": {
        "commit_hash": "53c66110a878f4f4644728138ea97c22990263e3",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/53c66110a878f4f4644728138ea97c22990263e3",
        "files": [
          "lib/setuplib.php",
          "lib/tests/setuplib_test.php"
        ],
        "message": "MDL-36901: Remove system paths from exceptions\n\nReplaces any server paths, like dataroot, with a token\nin exception messages and debug info.",
        "before_after_code_files": [
          "lib/setuplib.php||lib/setuplib.php",
          "lib/tests/setuplib_test.php||lib/tests/setuplib_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/setuplib.php||lib/setuplib.php",
            "lib/tests/setuplib_test.php||lib/tests/setuplib_test.php"
          ],
          "candidate": [
            "lib/setuplib.php||lib/setuplib.php",
            "lib/tests/setuplib_test.php||lib/tests/setuplib_test.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/setuplib.php||lib/setuplib.php": [
          "File: lib/setuplib.php -> lib/setuplib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "526:         $debuginfo .= PHP_EOL.'$a contents: '.print_r($a, true);",
          "527:     }",
          "530:     if (function_exists('clean_text')) {",
          "531:         $message = clean_text($message);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "530:     $searches = array();",
          "531:     $replaces = array();",
          "532:     $cfgnames = array('tempdir', 'cachedir', 'themedir',",
          "533:         'langmenucachefile', 'langcacheroot', 'dataroot', 'dirroot');",
          "534:     foreach ($cfgnames as $cfgname) {",
          "535:         if (property_exists($CFG, $cfgname)) {",
          "536:             $searches[] = $CFG->$cfgname;",
          "537:             $replaces[] = \"[$cfgname]\";",
          "538:         }",
          "539:     }",
          "540:     if (!empty($searches)) {",
          "541:         $message   = str_replace($searches, $replaces, $message);",
          "542:         $debuginfo = str_replace($searches, $replaces, $debuginfo);",
          "543:     }",
          "",
          "---------------"
        ],
        "lib/tests/setuplib_test.php||lib/tests/setuplib_test.php": [
          "File: lib/tests/setuplib_test.php -> lib/tests/setuplib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:             $this->assertTrue(is_web_crawler(), \"$agent should be considered a search engine\");",
          "119:         }",
          "120:     }",
          "121: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "125:     public function test_exception_info_removes_serverpaths() {",
          "126:         global $CFG;",
          "129:         $cfgnames = array('dataroot', 'dirroot', 'tempdir', 'cachedir');",
          "131:         $fixture  = '';",
          "132:         $expected = '';",
          "133:         foreach ($cfgnames as $cfgname) {",
          "134:             if (!empty($CFG->$cfgname)) {",
          "135:                 $fixture  .= $CFG->$cfgname.' ';",
          "136:                 $expected .= \"[$cfgname] \";",
          "137:             }",
          "138:         }",
          "139:         $exception     = new moodle_exception('generalexceptionmessage', 'error', '', $fixture, $fixture);",
          "140:         $exceptioninfo = get_exception_info($exception);",
          "142:         $this->assertContains($expected, $exceptioninfo->message, 'Exception message does not contain system paths');",
          "143:         $this->assertContains($expected, $exceptioninfo->debuginfo, 'Exception debug info does not contain system paths');",
          "144:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c7cdbb3b0b6ba4dd64297463d37a5acbd730216",
      "candidate_info": {
        "commit_hash": "2c7cdbb3b0b6ba4dd64297463d37a5acbd730216",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/2c7cdbb3b0b6ba4dd64297463d37a5acbd730216",
        "files": [
          "lib/setuplib.php",
          "lib/tests/setuplib_test.php"
        ],
        "message": "MDL-36901: Remove system paths from exceptions\n\nReplaces any server paths, like dataroot, with a token\nin exception messages and debug info.\n\nConflicts:\n\tlib/tests/setuplib_test.php",
        "before_after_code_files": [
          "lib/setuplib.php||lib/setuplib.php",
          "lib/tests/setuplib_test.php||lib/tests/setuplib_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/setuplib.php||lib/setuplib.php",
            "lib/tests/setuplib_test.php||lib/tests/setuplib_test.php"
          ],
          "candidate": [
            "lib/setuplib.php||lib/setuplib.php",
            "lib/tests/setuplib_test.php||lib/tests/setuplib_test.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/setuplib.php||lib/setuplib.php": [
          "File: lib/setuplib.php -> lib/setuplib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "526:         $debuginfo .= PHP_EOL.'$a contents: '.print_r($a, true);",
          "527:     }",
          "530:     if (function_exists('clean_text')) {",
          "531:         $message = clean_text($message);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "530:     $searches = array();",
          "531:     $replaces = array();",
          "532:     $cfgnames = array('tempdir', 'cachedir', 'themedir',",
          "533:         'langmenucachefile', 'langcacheroot', 'dataroot', 'dirroot');",
          "534:     foreach ($cfgnames as $cfgname) {",
          "535:         if (property_exists($CFG, $cfgname)) {",
          "536:             $searches[] = $CFG->$cfgname;",
          "537:             $replaces[] = \"[$cfgname]\";",
          "538:         }",
          "539:     }",
          "540:     if (!empty($searches)) {",
          "541:         $message   = str_replace($searches, $replaces, $message);",
          "542:         $debuginfo = str_replace($searches, $replaces, $debuginfo);",
          "543:     }",
          "",
          "---------------"
        ],
        "lib/tests/setuplib_test.php||lib/tests/setuplib_test.php": [
          "File: lib/tests/setuplib_test.php -> lib/tests/setuplib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:         $this->assertEquals($CFG->wwwroot . '/lib/tests/setuplib_test.php',",
          "72:                 get_docs_url('%%WWWROOT%%/lib/tests/setuplib_test.php'));",
          "73:     }",
          "74: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:     public function test_exception_info_removes_serverpaths() {",
          "79:         global $CFG;",
          "82:         $cfgnames = array('dataroot', 'dirroot', 'tempdir', 'cachedir');",
          "84:         $fixture  = '';",
          "85:         $expected = '';",
          "86:         foreach ($cfgnames as $cfgname) {",
          "87:             if (!empty($CFG->$cfgname)) {",
          "88:                 $fixture  .= $CFG->$cfgname.' ';",
          "89:                 $expected .= \"[$cfgname] \";",
          "90:             }",
          "91:         }",
          "92:         $exception     = new moodle_exception('generalexceptionmessage', 'error', '', $fixture, $fixture);",
          "93:         $exceptioninfo = get_exception_info($exception);",
          "95:         $this->assertContains($expected, $exceptioninfo->message, 'Exception message does not contain system paths');",
          "96:         $this->assertContains($expected, $exceptioninfo->debuginfo, 'Exception debug info does not contain system paths');",
          "97:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}