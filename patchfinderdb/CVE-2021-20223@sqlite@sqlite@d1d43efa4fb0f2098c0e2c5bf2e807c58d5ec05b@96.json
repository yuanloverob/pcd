{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c72f2fb7feff582444b8ffdc6c900c69847ce8a9",
      "candidate_info": {
        "commit_hash": "c72f2fb7feff582444b8ffdc6c900c69847ce8a9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c72f2fb7feff582444b8ffdc6c900c69847ce8a9",
        "files": [
          "ext/fts3/fts3.c",
          "ext/fts3/fts3Int.h",
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "More improvements to shadow table corruption detection in FTS3.\n\nFossilOrigin-Name: 51525f9c3235967bc00a090e84c70a6400698c897aa4742e817121c725b8c99d",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h",
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1486:   fts3DatabasePageSize(&rc, p);",
          "1487:   p->nNodeSize = p->nPgsz-35;",
          "1490:   fts3DeclareVtab(&rc, p);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1489: #if defined(SQLITE_DEBUG)||defined(SQLITE_TEST)",
          "1490:   p->nMergeCount = FTS3_MERGE_COUNT;",
          "1491: #endif",
          "",
          "---------------"
        ],
        "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h": [
          "File: ext/fts3/fts3Int.h -> ext/fts3/fts3Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "303:   int bNoIncrDoclist;",
          "304: #endif",
          "305: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "306:   int nMergeCount;",
          "311: #if defined(SQLITE_DEBUG) || defined(SQLITE_TEST)",
          "312: # define MergeCount(P) ((P)->nMergeCount)",
          "313: #else",
          "314: # define MergeCount(P) FTS3_MERGE_COUNT",
          "315: #endif",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1157:       fts3LogMerge(16, getAbsoluteLevel(p, iLangid, iIndex, iLevel));",
          "1158:       rc = fts3SegmentMerge(p, iLangid, iIndex, iLevel);",
          "",
          "[Removed Lines]",
          "1156:     if( iNext>=FTS3_MERGE_COUNT ){",
          "",
          "[Added Lines]",
          "1156:     if( iNext>=MergeCount(p) ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4280:       int i;",
          "4281:       int nHeight = (int)aRoot[0];",
          "4282:       NodeWriter *pNode;",
          "4284:       pWriter->nLeafEst = (int)((iEnd - iStart) + 1)/FTS_MAX_APPENDABLE_HEIGHT;",
          "4285:       pWriter->iStart = iStart;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4283:       if( nHeight<1 || nHeight>FTS_MAX_APPENDABLE_HEIGHT ){",
          "4284:         sqlite3_reset(pSelect);",
          "4285:         return FTS_CORRUPT_VTAB;",
          "4286:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5049: ){",
          "5050:   int rc;",
          "5052:   int nMerge = 0;",
          "5053:   const char *z = zParam;",
          "",
          "[Removed Lines]",
          "5051:   int nMin = (FTS3_MERGE_COUNT / 2);",
          "",
          "[Added Lines]",
          "5055:   int nMin = (MergeCount(p) / 2);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5093:   int rc = SQLITE_OK;",
          "5094:   sqlite3_stmt *pStmt = 0;",
          "5095:   p->nAutoincrmerge = fts3Getint(&zParam);",
          "5097:     p->nAutoincrmerge = 8;",
          "5098:   }",
          "5099:   if( !p->bHasStat ){",
          "",
          "[Removed Lines]",
          "5096:   if( p->nAutoincrmerge==1 || p->nAutoincrmerge>FTS3_MERGE_COUNT ){",
          "",
          "[Added Lines]",
          "5100:   if( p->nAutoincrmerge==1 || p->nAutoincrmerge>MergeCount(p) ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5384:     }else if( nVal>21 && 0==sqlite3_strnicmp(zVal,\"test-no-incr-doclist=\",21) ){",
          "5385:       p->bNoIncrDoclist = atoi(&zVal[21]);",
          "5386:       rc = SQLITE_OK;",
          "5387:     }",
          "5388: #endif",
          "5389:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5391:     }else if( nVal>11 && 0==sqlite3_strnicmp(zVal,\"mergecount=\",11) ){",
          "5392:       v = atoi(&zVal[11]);",
          "5393:       if( v>=4 && v<=FTS3_MERGE_COUNT && (v&1)==0 ) p->nMergeCount = v;",
          "5394:       rc = SQLITE_OK;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 04b2873be5aedeb1c4325cf36c4b5d180f929a641caf1e3829c03778adb29c8e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "461ff3594b86506d4d4c4294be336d5da2757cd8",
      "candidate_info": {
        "commit_hash": "461ff3594b86506d4d4c4294be336d5da2757cd8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/461ff3594b86506d4d4c4294be336d5da2757cd8",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/skipscan5.test",
          "test/whereG.test"
        ],
        "message": "Test case updates.\n\nFossilOrigin-Name: 27c681c9c6672ad7098d8ff2c41e76d3e9e55866b6327ed85e73f63bd623ceed",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/skipscan5.test||test/skipscan5.test",
          "test/whereG.test||test/whereG.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0f42099ad65855c94af8472f3a6fddac7fc2a82e8fdfcc06a298eb6683a28688",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/skipscan5.test||test/skipscan5.test": [
          "File: test/skipscan5.test -> test/skipscan5.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: expr srand(4)",
          "32: do_test 1.2 {",
          "34:     set a [expr int(rand()*4.0) + 1]",
          "35:     set b [expr int(rand()*20.0) + 1]",
          "36:     execsql { INSERT INTO t1 VALUES($a, $b, NULL) }",
          "",
          "[Removed Lines]",
          "33:   for {set i 0} {$i < 100} {incr i} {",
          "",
          "[Added Lines]",
          "33:   for {set i 0} {$i < 1000} {incr i} {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:   2  \"b > 12 AND b < 16\"       {/*ANY(a) AND b>? AND b<?*/}",
          "44:   3  \"b > 2 AND b < 16\"        {/*SCAN TABLE t1*/}",
          "45:   4  \"b > 18 AND b < 25\"       {/*ANY(a) AND b>? AND b<?*/}",
          "47:   6  \"b > 5\"                   {/*SCAN TABLE t1*/}",
          "48:   7  \"b < 15\"                  {/*SCAN TABLE t1*/}",
          "49:   8  \"b < 5\"                   {/*ANY(a) AND b<?*/}",
          "",
          "[Removed Lines]",
          "46:   5  \"b > 15\"                  {/*ANY(a) AND b>?*/}",
          "",
          "[Added Lines]",
          "46:   5  \"b > 16\"                  {/*ANY(a) AND b>?*/}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52:   11 \"b > '12' AND b < '16'\"   {/*ANY(a) AND b>? AND b<?*/}",
          "53:   12 \"b > '2' AND b < '16'\"    {/*SCAN TABLE t1*/}",
          "54:   13 \"b > '18' AND b < '25'\"   {/*ANY(a) AND b>? AND b<?*/}",
          "56:   15 \"b > '5'\"                 {/*SCAN TABLE t1*/}",
          "57:   16 \"b < '15'\"                {/*SCAN TABLE t1*/}",
          "58:   17 \"b < '5'\"                 {/*ANY(a) AND b<?*/}",
          "",
          "[Removed Lines]",
          "55:   14 \"b > '15'\"                {/*ANY(a) AND b>?*/}",
          "",
          "[Added Lines]",
          "55:   14 \"b > '16'\"                {/*ANY(a) AND b>?*/}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "108:     3 { c > 'q' }                     {/*ANY(a) AND ANY(b) AND c>?*/}",
          "109:     4 { c > 'e' }                     {/*SCAN TABLE t2*/}",
          "110:     5 { c < 'q' }                     {/*SCAN TABLE t2*/}",
          "112:   } {",
          "113:     set sql \"EXPLAIN QUERY PLAN SELECT * FROM t2 WHERE $q\"",
          "114:     do_execsql_test 2.$tn.$tn2 $sql $res",
          "",
          "[Removed Lines]",
          "111:     6 { c < 'c' }                     {/*ANY(a) AND ANY(b) AND c<?*/}",
          "",
          "[Added Lines]",
          "111:     6 { c < 'b' }                     {/*ANY(a) AND ANY(b) AND c<?*/}",
          "",
          "---------------"
        ],
        "test/whereG.test||test/whereG.test": [
          "File: test/whereG.test -> test/whereG.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "220:   SELECT * FROM t1 WHERE likely(b>?)",
          "221: } {SCAN TABLE t1}",
          "226: do_eqp_test 5.3.2 {",
          "227:   SELECT * FROM t1 WHERE likelihood(a=?, 0.9)",
          "228: } {SCAN TABLE t1}",
          "",
          "[Removed Lines]",
          "223: do_eqp_test 5.3.1 {",
          "224:   SELECT * FROM t1 WHERE a=?",
          "225: } {SEARCH TABLE t1 USING INDEX i1 (a=?)}",
          "",
          "[Added Lines]",
          "223: ifcapable stat4 {",
          "224:   do_eqp_test 5.3.1.stat4 {",
          "225:     SELECT * FROM t1 WHERE a=?",
          "226:   } {SCAN TABLE t1}",
          "227: } else {",
          "228:   do_eqp_test 5.3.1 {",
          "229:     SELECT * FROM t1 WHERE a=?",
          "230:   } {SEARCH TABLE t1 USING INDEX i1}",
          "231: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ad1a1c74caeee76124091e6e1771fae4afa1a33",
      "candidate_info": {
        "commit_hash": "4ad1a1c74caeee76124091e6e1771fae4afa1a33",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4ad1a1c74caeee76124091e6e1771fae4afa1a33",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c",
          "test/whereA.test"
        ],
        "message": "Disable the OP_SeekScan opcode of the in-scan-vs-index optimization when in PRAGMA reverse_unordered_selects mode, as the OP_SeekScan only works with forwards scans.  Thanks to OSSFuzz for pointing out the problem to us.\n\nFossilOrigin-Name: c75c3a3b756635bfdab44e4b56a337e4a88af3a8803cd3e9a67abf3d0d3450dc",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c",
          "test/whereA.test||test/whereA.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c4e8ec7907de7cb9e610ef9f4930caf5c046618151fb4f61d5716b9fa3f31423",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1809:       op = aStartOp[(start_constraints<<2) + (startEq<<1) + bRev];",
          "1810:       assert( op!=0 );",
          "1813:         assert( regBignull==0 );",
          "",
          "[Removed Lines]",
          "1811:       if( (pLoop->wsFlags & WHERE_IN_SEEKSCAN)!=0 ){",
          "1812:         assert( op==OP_SeekGE );",
          "",
          "[Added Lines]",
          "1811:       assert( op==OP_SeekGE",
          "1812:            || (pLoop->wsFlags & WHERE_IN_SEEKSCAN)==0",
          "1813:            || (db->flags & SQLITE_ReverseOrder)!=0 );",
          "1814:       if( (pLoop->wsFlags & WHERE_IN_SEEKSCAN)!=0",
          "1816:       ){",
          "",
          "---------------"
        ],
        "test/whereA.test||test/whereA.test": [
          "File: test/whereA.test -> test/whereA.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "170:   SELECT a FROM t1 WHERE b=-99 OR b>1;",
          "171: } {1}",
          "174: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "173: # 2020-10-02 OSSFuzz find for an issue introduced by a check-in",
          "174: # on the previous day.",
          "175: #",
          "176: reset_db",
          "177: do_execsql_test whereA-6.1 {",
          "178:   CREATE TABLE t1(a, b);",
          "179:   CREATE INDEX t1aa ON t1(a,a);",
          "180:   INSERT INTO t1 VALUES(1,2);",
          "181:   ANALYZE;",
          "182:   UPDATE sqlite_stat1 SET stat='27 3 3' WHERE idx='t1aa';",
          "183:   ANALYZE sqlite_schema;",
          "184:   PRAGMA reverse_unordered_selects (1) ;",
          "185:   SELECT a FROM t1 WHERE  a=1 OR a=2;",
          "186: } {1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0ad4f792a9ad661021fbca0c845711675dba1fcb",
      "candidate_info": {
        "commit_hash": "0ad4f792a9ad661021fbca0c845711675dba1fcb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0ad4f792a9ad661021fbca0c845711675dba1fcb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/dbstat.c",
          "src/vdbe.c",
          "src/where.c",
          "src/whereInt.h",
          "src/wherecode.c",
          "test/fuzzdata8.db",
          "test/in4.test",
          "test/stat.test"
        ],
        "message": "Merge all fixes and enhancements from trunk.\n\nFossilOrigin-Name: b878c30f03e895bbc5c4c99c0f727d49093bb78bdc275593cf4852148579ae69",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/dbstat.c||src/dbstat.c",
          "src/vdbe.c||src/vdbe.c",
          "src/where.c||src/where.c",
          "src/whereInt.h||src/whereInt.h",
          "src/wherecode.c||src/wherecode.c",
          "test/in4.test||test/in4.test",
          "test/stat.test||test/stat.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 26ef709a47294c512a70aecd37d29caecec2af261977d9fb2c4d78d09b12f77a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7104:         }",
          "7105:         pFree = pCell;",
          "7106:         szFree = sz;",
          "7108:       }else{",
          "7109:         pFree = pCell;",
          "7110:         szFree += sz;",
          "",
          "[Removed Lines]",
          "7107:         if( NEVER(pFree+sz>pEnd) ) return 0;",
          "",
          "[Added Lines]",
          "7107:         if( pFree+sz>pEnd ) return 0;",
          "",
          "---------------"
        ],
        "src/dbstat.c||src/dbstat.c": [
          "File: src/dbstat.c -> src/dbstat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:   i = 0;",
          "238:   if( iSchema>=0 ){",
          "239:     pIdxInfo->aConstraintUsage[iSchema].argvIndex = ++i;",
          "241:     pIdxInfo->idxNum |= 0x01;",
          "242:   }",
          "243:   if( iName>=0 ){",
          "244:     pIdxInfo->aConstraintUsage[iName].argvIndex = ++i;",
          "246:     pIdxInfo->idxNum |= 0x02;",
          "247:   }",
          "248:   if( iAgg>=0 ){",
          "249:     pIdxInfo->aConstraintUsage[iAgg].argvIndex = ++i;",
          "252:     pIdxInfo->idxNum |= 0x04;",
          "253:   }",
          "254:   pIdxInfo->estimatedCost = 1.0;",
          "",
          "[Removed Lines]",
          "240:     pIdxInfo->aConstraintUsage[iSchema].omit = 1;",
          "245:     pIdxInfo->aConstraintUsage[iName].omit = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "704:     const char *zDbase = (const char*)sqlite3_value_text(argv[iArg++]);",
          "705:     pCsr->iDb = sqlite3FindDbName(pTab->db, zDbase);",
          "706:     if( pCsr->iDb<0 ){",
          "710:     }",
          "711:   }else{",
          "712:     pCsr->iDb = pTab->iDb;",
          "",
          "[Removed Lines]",
          "707:       sqlite3_free(pCursor->pVtab->zErrMsg);",
          "708:       pCursor->pVtab->zErrMsg = sqlite3_mprintf(\"no such schema: %s\", zDbase);",
          "709:       return pCursor->pVtab->zErrMsg ? SQLITE_ERROR : SQLITE_NOMEM_BKPT;",
          "",
          "[Added Lines]",
          "703:       pCsr->iDb = 0;",
          "704:       pCsr->isEof = 1;",
          "705:       return SQLITE_OK;",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4389:   break;",
          "4390: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4398:   assert( pOp->p1>=0 && pOp->p1<p->nCursor );",
          "4399:   VdbeBranchTaken(p->apCsr[pOp->p1]==0, 2);",
          "4400:   if( !p->apCsr[pOp->p1] ){",
          "4401:     goto jump_to_p2_and_check_for_interrupt;",
          "4402:   }",
          "4403:   break;",
          "4404: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7914:       if( opProperty & OPFLG_OUT3 ){",
          "7915:         registerTrace(pOrigOp->p3, &aMem[pOrigOp->p3]);",
          "7916:       }",
          "7917:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7931:       if( opProperty==0xff ){",
          "7935:         sqlite3VdbeRegisterDump(p);",
          "7936:       }",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5273:         if( pIn->eEndLoopOp!=OP_Noop ){",
          "5274:           if( pIn->nPrefix ){",
          "5275:             assert( pLoop->wsFlags & WHERE_IN_EARLYOUT );",
          "5280:           }",
          "5281:           sqlite3VdbeAddOp2(v, pIn->eEndLoopOp, pIn->iCur, pIn->addrInTop);",
          "5282:           VdbeCoverage(v);",
          "",
          "[Removed Lines]",
          "5276:             sqlite3VdbeAddOp4Int(v, OP_IfNoHope, pLevel->iIdxCur,",
          "5277:                               sqlite3VdbeCurrentAddr(v)+2,",
          "5278:                               pIn->iBase, pIn->nPrefix);",
          "5279:             VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "5276:             if( (pLoop->wsFlags & WHERE_VIRTUALTABLE)==0 ){",
          "5277:               sqlite3VdbeAddOp4Int(v, OP_IfNoHope, pLevel->iIdxCur,",
          "5278:                   sqlite3VdbeCurrentAddr(v)+2+(pLevel->iLeftJoin!=0),",
          "5279:                   pIn->iBase, pIn->nPrefix);",
          "5280:               VdbeCoverage(v);",
          "5281:             }",
          "5282:             if( pLevel->iLeftJoin ){",
          "5291:               sqlite3VdbeAddOp2(v, OP_IfNotOpen, pIn->iCur,",
          "5292:                   sqlite3VdbeCurrentAddr(v) + 2",
          "5293:               );",
          "5294:               VdbeCoverage(v);",
          "5295:             }",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "593:           if( i==iEq ){",
          "594:             pIn->iCur = iTab;",
          "595:             pIn->eEndLoopOp = bRev ? OP_Prev : OP_Next;",
          "597:               pIn->iBase = iReg - i;",
          "598:               pIn->nPrefix = i;",
          "599:               pLoop->wsFlags |= WHERE_IN_EARLYOUT;",
          "",
          "[Removed Lines]",
          "596:             if( iEq>0 && (pLoop->wsFlags & WHERE_VIRTUALTABLE)==0 ){",
          "",
          "[Added Lines]",
          "596:             if( iEq>0 ){",
          "",
          "---------------"
        ],
        "test/in4.test||test/in4.test": [
          "File: test/in4.test -> test/in4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "17: do_test in4-1.1 {",
          "18:   execsql {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: set testprefix in4",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "338:   SELECT * FROM t6a, t6b WHERE a=3 AND c IN (b);",
          "339: } {~/SCAN/}",
          "342: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "342: reset_db",
          "343: do_execsql_test 7.0 {",
          "344:   CREATE TABLE t1(a, b, c);",
          "345:   CREATE TABLE t2(d, e);",
          "346:   CREATE INDEX t1bc ON t1(c, b);",
          "347:   INSERT INTO t2(e) VALUES(1);",
          "348:   INSERT INTO t1 VALUES(NULL, NULL, NULL);",
          "349: }",
          "351: do_execsql_test 7.1 {",
          "352:   SELECT * FROM t2 LEFT JOIN t1 ON c = d AND b IN (10,10,10);",
          "353: } {{} 1 {} {} {}}",
          "355: ifcapable rtree {",
          "356:   reset_db",
          "357:   do_execsql_test 7.2 {",
          "358:     CREATE VIRTUAL TABLE t1 USING rtree(a, b, c);",
          "359:     CREATE TABLE t2(d INTEGER, e INT);",
          "360:     INSERT INTO t2(e) VALUES(1);",
          "361:   }",
          "363:   do_execsql_test 7.3 {",
          "364:     SELECT * FROM t2 LEFT JOIN t1 ON c IN (d) AND b IN (10,10,10);",
          "365:   } {{} 1 {} {} {}}",
          "366: }",
          "",
          "---------------"
        ],
        "test/stat.test||test/stat.test": [
          "File: test/stat.test -> test/stat.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "298:   SELECT * FROM x3;",
          "299: } {1 {unrecognized token: \"123corp\"}}",
          "301: do_execsql_test 8.1 {",
          "302:   CREATE VIRTUAL TABLE st4 USING dbstat;",
          "303: }",
          "304: do_execsql_test 8.2 {",
          "306: }",
          "307: do_execsql_test 8.3 {",
          "308:   SELECT aggregate=1 FROM st4 WHERE aggregate = 5",
          "309: }",
          "311: finish_test",
          "",
          "[Removed Lines]",
          "305:   SELECT * FROM st4 WHERE st4.aggregate = NULL",
          "",
          "[Added Lines]",
          "306:   SELECT * FROM st4 WHERE st4.aggregate = NULL;",
          "311: do_execsql_test 8.4 {",
          "312:   SELECT * FROM st4 WHERE name = NULL;",
          "313: } {}",
          "314: do_execsql_test 8.5 {",
          "315:   SELECT * FROM st4 WHERE schema = NULL;",
          "316: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9776784f943cafb7d836ffff6c9c6d1580f18b4f",
      "candidate_info": {
        "commit_hash": "9776784f943cafb7d836ffff6c9c6d1580f18b4f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9776784f943cafb7d836ffff6c9c6d1580f18b4f",
        "files": [
          "Makefile.in",
          "main.mk",
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "test/permutations.test"
        ],
        "message": "Fix the \".import\" command of the CLI to clean up better after errors. Add the new \"shelltest\" makefile target on unix platforms.\n\nFossilOrigin-Name: 50d4ddf1330b88551de51439eb535f385dee6b53013802dd62f832d16b3025b6",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "test/permutations.test||test/permutations.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1286: smoketest: $(TESTPROGS) fuzzcheck$(TEXE)",
          "1287:  ./testfixture$(TEXE) $(TOP)/test/main.test $(TESTOPTS)",
          "1289: sqlite3_analyzer.c: sqlite3.c $(TOP)/src/tclsqlite.c $(TOP)/tool/spaceanal.tcl $(TOP)/tool/mkccode.tcl $(TOP)/tool/sqlite3_analyzer.c.in",
          "1290:  $(TCLSH_CMD) $(TOP)/tool/mkccode.tcl $(TOP)/tool/sqlite3_analyzer.c.in >sqlite3_analyzer.c",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1289: shelltest: $(TESTPROGS)",
          "1290:  ./testfixture$(TEXT) $(TOP)/test/permutations.test shell",
          "",
          "---------------"
        ],
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "975: smoketest: $(TESTPROGS) fuzzcheck$(EXE)",
          "976:  ./testfixture$(EXE) $(TOP)/test/main.test $(TESTOPTS)",
          "978: # The next two rules are used to support the \"threadtest\" target. Building",
          "979: # threadtest runs a few thread-safety tests that are implemented in C. This",
          "980: # target is invoked by the releasetest.tcl script.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "978: shelltest: $(TESTPROGS)",
          "979:  ./testfixture$(EXT) $(TOP)/test/permutations.test shell",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6a01e4c444b072e31a320121a6810d7c986c2c54ce45f9b11683233b1e7af8da",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "4778: };",
          "4781: static void import_append_char(ImportCtx *p, int c){",
          "4782:   if( p->n+1>=p->nAlloc ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4782: static void import_cleanup(ImportCtx *p){",
          "4783:   if( p->in!=0 &&& p->xCloser!=0 ){",
          "4784:     p->xCloser(p->in);",
          "4785:     p->in = 0;",
          "4786:   }",
          "4787:   sqlite3_free(p->z);",
          "4788:   p->z = 0;",
          "4789: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7974: #else",
          "7975:       sCtx.in = popen(sCtx.zFile+1, \"r\");",
          "7976:       sCtx.zFile = \"<pipe>\";",
          "7978: #endif",
          "7979:     }else{",
          "7980:       sCtx.in = fopen(sCtx.zFile, \"rb\");",
          "7982:     }",
          "7983:     if( sCtx.in==0 ){",
          "7984:       utf8_printf(stderr, \"Error: cannot open \\\"%s\\\"\\n\", zFile);",
          "",
          "[Removed Lines]",
          "7977:       xCloser = pclose;",
          "7981:       xCloser = fclose;",
          "",
          "[Added Lines]",
          "7987:       sCtx.xCloser = pclose;",
          "7991:       sCtx.xCloser = fclose;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "8002:     }",
          "8003:     zSql = sqlite3_mprintf(\"SELECT * FROM %s\", zTable);",
          "8004:     if( zSql==0 ){",
          "8006:       shell_out_of_memory();",
          "8007:     }",
          "8008:     nByte = strlen30(zSql);",
          "",
          "[Removed Lines]",
          "8005:       xCloser(sCtx.in);",
          "",
          "[Added Lines]",
          "8015:       import_cleanup(&sCtx);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "8018:       }",
          "8019:       if( cSep=='(' ){",
          "8020:         sqlite3_free(zCreate);",
          "8023:         utf8_printf(stderr,\"%s: empty file\\n\", sCtx.zFile);",
          "8024:         rc = 1;",
          "8025:         goto meta_command_exit;",
          "",
          "[Removed Lines]",
          "8021:         sqlite3_free(sCtx.z);",
          "8022:         xCloser(sCtx.in);",
          "",
          "[Added Lines]",
          "8031:         import_cleanup(&sCtx);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "8033:       if( rc ){",
          "8034:         utf8_printf(stderr, \"CREATE TABLE %s(...) failed: %s\\n\", zTable,",
          "8035:                 sqlite3_errmsg(p->db));",
          "8038:         rc = 1;",
          "8039:         goto meta_command_exit;",
          "8040:       }",
          "",
          "[Removed Lines]",
          "8036:         sqlite3_free(sCtx.z);",
          "8037:         xCloser(sCtx.in);",
          "",
          "[Added Lines]",
          "8045:         import_cleanup(&sCtx);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "8044:     if( rc ){",
          "8045:       if (pStmt) sqlite3_finalize(pStmt);",
          "8046:       utf8_printf(stderr,\"Error: %s\\n\", sqlite3_errmsg(p->db));",
          "8048:       rc = 1;",
          "8049:       goto meta_command_exit;",
          "8050:     }",
          "",
          "[Removed Lines]",
          "8047:       xCloser(sCtx.in);",
          "",
          "[Added Lines]",
          "8055:       import_cleanup(&sCtx);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "8055:     zSql = sqlite3_malloc64( nByte*2 + 20 + nCol*2 );",
          "8056:     if( zSql==0 ){",
          "8058:       shell_out_of_memory();",
          "8059:     }",
          "8060:     sqlite3_snprintf(nByte+20, zSql, \"INSERT INTO \\\"%w\\\" VALUES(?\", zTable);",
          "",
          "[Removed Lines]",
          "8057:       xCloser(sCtx.in);",
          "",
          "[Added Lines]",
          "8065:       import_cleanup(&sCtx);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "8073:     if( rc ){",
          "8074:       utf8_printf(stderr, \"Error: %s\\n\", sqlite3_errmsg(p->db));",
          "8075:       if (pStmt) sqlite3_finalize(pStmt);",
          "8077:       rc = 1;",
          "8078:       goto meta_command_exit;",
          "8079:     }",
          "",
          "[Removed Lines]",
          "8076:       xCloser(sCtx.in);",
          "",
          "[Added Lines]",
          "8084:       import_cleanup(&sCtx);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "8125:       }",
          "8126:     }while( sCtx.cTerm!=EOF );",
          "8130:     sqlite3_finalize(pStmt);",
          "8131:     if( needCommit ) sqlite3_exec(p->db, \"COMMIT\", 0, 0, 0);",
          "8132:     if( eVerbose>0 ){",
          "",
          "[Removed Lines]",
          "8128:     xCloser(sCtx.in);",
          "8129:     sqlite3_free(sCtx.z);",
          "",
          "[Added Lines]",
          "8136:     import_cleanup(&sCtx);",
          "",
          "---------------"
        ],
        "test/permutations.test||test/permutations.test": [
          "File: test/permutations.test -> test/permutations.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "172: ]",
          "174: test_suite \"extraquick\" -prefix \"\" -description {",
          "175:   \"Extra\" quick test suite. Runs in a few minutes on a workstation.",
          "176:   This test suite is the same as the \"veryquick\" tests, except that",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "174: test_suite \"shell\" -prefix \"\" -description {",
          "175:   Run tests of the command-line shell",
          "176: } -files [",
          "177:   test_set [glob $testdir/shell*.test]",
          "178: ]",
          "",
          "---------------"
        ]
      }
    }
  ]
}