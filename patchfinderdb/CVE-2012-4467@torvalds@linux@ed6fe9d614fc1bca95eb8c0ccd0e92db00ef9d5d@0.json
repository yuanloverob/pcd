{
  "cve_id": "CVE-2012-4467",
  "cve_desc": "The (1) do_siocgstamp and (2) do_siocgstampns functions in net/socket.c in the Linux kernel before 3.5.4 use an incorrect argument order, which allows local users to obtain sensitive information from kernel memory or cause a denial of service (system crash) via a crafted ioctl call.",
  "repo": "torvalds/linux",
  "patch_hash": "ed6fe9d614fc1bca95eb8c0ccd0e92db00ef9d5d",
  "patch_info": {
    "commit_hash": "ed6fe9d614fc1bca95eb8c0ccd0e92db00ef9d5d",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/ed6fe9d614fc1bca95eb8c0ccd0e92db00ef9d5d",
    "files": [
      "net/socket.c"
    ],
    "message": "Fix order of arguments to compat_put_time[spec|val]\n\nCommit 644595f89620 (\"compat: Handle COMPAT_USE_64BIT_TIME in\nnet/socket.c\") introduced a bug where the helper functions to take\neither a 64-bit or compat time[spec|val] got the arguments in the wrong\norder, passing the kernel stack pointer off as a user pointer (and vice\nversa).\n\nBecause of the user address range check, that in turn then causes an\nEFAULT due to the user pointer range checking failing for the kernel\naddress.  Incorrectly resuling in a failed system call for 32-bit\nprocesses with a 64-bit kernel.\n\nOn odder architectures like HP-PA (with separate user/kernel address\nspaces), it can be used read kernel memory.\n\nSigned-off-by: Mikulas Patocka <mpatocka@redhat.com>\nCc: stable@vger.kernel.org\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
    "before_after_code_files": [
      "net/socket.c||net/socket.c"
    ]
  },
  "patch_diff": {
    "net/socket.c||net/socket.c": [
      "File: net/socket.c -> net/socket.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2604:  err = sock_do_ioctl(net, sock, cmd, (unsigned long)&ktv);",
      "2605:  set_fs(old_fs);",
      "2606:  if (!err)",
      "2609:  return err;",
      "2610: }",
      "",
      "[Removed Lines]",
      "2607:   err = compat_put_timeval(up, &ktv);",
      "",
      "[Added Lines]",
      "2607:   err = compat_put_timeval(&ktv, up);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2620:  err = sock_do_ioctl(net, sock, cmd, (unsigned long)&kts);",
      "2621:  set_fs(old_fs);",
      "2622:  if (!err)",
      "2625:  return err;",
      "2626: }",
      "",
      "[Removed Lines]",
      "2623:   err = compat_put_timespec(up, &kts);",
      "",
      "[Added Lines]",
      "2623:   err = compat_put_timespec(&kts, up);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "644595f89620ba8446cc555be336d24a34464950",
      "candidate_info": {
        "commit_hash": "644595f89620ba8446cc555be336d24a34464950",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/644595f89620ba8446cc555be336d24a34464950",
        "files": [
          "net/socket.c"
        ],
        "message": "compat: Handle COMPAT_USE_64BIT_TIME in net/socket.c\n\nUse helper functions aware of COMPAT_USE_64BIT_TIME to write struct\ntimeval and struct timespec to userspace in net/socket.c.\n\nSigned-off-by: H. Peter Anvin <hpa@zytor.com>",
        "before_after_code_files": [
          "net/socket.c||net/socket.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/socket.c||net/socket.c"
          ],
          "candidate": [
            "net/socket.c||net/socket.c"
          ]
        }
      },
      "candidate_diff": {
        "net/socket.c||net/socket.c": [
          "File: net/socket.c -> net/socket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2601: #ifdef CONFIG_COMPAT",
          "2602: static int do_siocgstamp(struct net *net, struct socket *sock,",
          "2604: {",
          "2605:  mm_segment_t old_fs = get_fs();",
          "2606:  struct timeval ktv;",
          "",
          "[Removed Lines]",
          "2603:     unsigned int cmd, struct compat_timeval __user *up)",
          "",
          "[Added Lines]",
          "2603:     unsigned int cmd, void __user *up)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2609:  set_fs(KERNEL_DS);",
          "2610:  err = sock_do_ioctl(net, sock, cmd, (unsigned long)&ktv);",
          "2611:  set_fs(old_fs);",
          "2616:  return err;",
          "2617: }",
          "2619: static int do_siocgstampns(struct net *net, struct socket *sock,",
          "2621: {",
          "2622:  mm_segment_t old_fs = get_fs();",
          "2623:  struct timespec kts;",
          "",
          "[Removed Lines]",
          "2612:  if (!err) {",
          "2613:   err = put_user(ktv.tv_sec, &up->tv_sec);",
          "2614:   err |= __put_user(ktv.tv_usec, &up->tv_usec);",
          "2615:  }",
          "2620:     unsigned int cmd, struct compat_timespec __user *up)",
          "",
          "[Added Lines]",
          "2612:  if (!err)",
          "2613:   err = compat_put_timeval(up, &ktv);",
          "2619:       unsigned int cmd, void __user *up)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2626:  set_fs(KERNEL_DS);",
          "2627:  err = sock_do_ioctl(net, sock, cmd, (unsigned long)&kts);",
          "2628:  set_fs(old_fs);",
          "2633:  return err;",
          "2634: }",
          "",
          "[Removed Lines]",
          "2629:  if (!err) {",
          "2630:   err = put_user(kts.tv_sec, &up->tv_sec);",
          "2631:   err |= __put_user(kts.tv_nsec, &up->tv_nsec);",
          "2632:  }",
          "",
          "[Added Lines]",
          "2628:  if (!err)",
          "2629:   err = compat_put_timespec(up, &kts);",
          "",
          "---------------"
        ]
      }
    }
  ]
}