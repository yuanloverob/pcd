{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "03c5c213289baed1f809d3e58dee1e2abfb72f2b",
      "candidate_info": {
        "commit_hash": "03c5c213289baed1f809d3e58dee1e2abfb72f2b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/03c5c213289baed1f809d3e58dee1e2abfb72f2b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "OSSFuzz found a case where an assert() inside sqlite3ExprCompare() can be true.  Test case added to TH3.\n\nFossilOrigin-Name: 23b62fb160d86dc9d9073bcc714601f5b7695f96abd893eafecf4b2e565b87f2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d1db8d5894450b24bb0335983503d9bbf6cc48a0ae4b83291283fb2d32b6b25b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4784:      && sqlite3ExprCompare(pParse, pA->pLeft, pB->pLeft, iTab) ) return 2;",
          "4785:     if( sqlite3ExprCompare(pParse, pA->pRight, pB->pRight, iTab) ) return 2;",
          "4786:     if( sqlite3ExprListCompare(pA->x.pList, pB->x.pList, iTab) ) return 2;",
          "4789:       if( pA->iColumn!=pB->iColumn ) return 2;",
          "4790:       if( pA->iTable!=pB->iTable",
          "4791:        && (pA->iTable!=iTab || NEVER(pB->iTable>=0)) ) return 2;",
          "",
          "[Removed Lines]",
          "4787:     assert( (combinedFlags & EP_Reduced)==0 );",
          "4788:     if( pA->op!=TK_STRING && pA->op!=TK_TRUEFALSE ){",
          "",
          "[Added Lines]",
          "4787:     if( pA->op!=TK_STRING",
          "4788:      && pA->op!=TK_TRUEFALSE",
          "4789:      && (combinedFlags & EP_Reduced)==0",
          "4790:     ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4509ffa3621d1e44a3d4ba5fbf90dd9a629a9053",
      "candidate_info": {
        "commit_hash": "4509ffa3621d1e44a3d4ba5fbf90dd9a629a9053",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4509ffa3621d1e44a3d4ba5fbf90dd9a629a9053",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h"
        ],
        "message": "Always use the stdlib.h intptr_t type for pointer-integer conversions, when it is available.\n\nFossilOrigin-Name: c0d932449db3deed42a99bd948aab61e56b2d8441d7de5243688695ff04e8177",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 59c9e73f86b89ee17b0bce47bcb93f5b5ace5b7985678287195002afb9d40cd8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "216: # define SQLITE_INT_TO_PTR(X)  ((void*)(__PTRDIFF_TYPE__)(X))",
          "217: # define SQLITE_PTR_TO_INT(X)  ((int)(__PTRDIFF_TYPE__)(X))",
          "219: # define SQLITE_INT_TO_PTR(X)  ((void*)&((char*)0)[X])",
          "220: # define SQLITE_PTR_TO_INT(X)  ((int)(((char*)X)-(char*)0))",
          "225: # define SQLITE_INT_TO_PTR(X)  ((void*)(X))",
          "226: # define SQLITE_PTR_TO_INT(X)  ((int)(X))",
          "",
          "[Removed Lines]",
          "222: # define SQLITE_INT_TO_PTR(X)  ((void*)(intptr_t)(X))",
          "223: # define SQLITE_PTR_TO_INT(X)  ((int)(intptr_t)(X))",
          "",
          "[Added Lines]",
          "216: # define SQLITE_INT_TO_PTR(X)  ((void*)(intptr_t)(X))",
          "217: # define SQLITE_PTR_TO_INT(X)  ((int)(intptr_t)(X))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c589acbc501fa0f04e1f818b2fce94131fd05542",
      "candidate_info": {
        "commit_hash": "c589acbc501fa0f04e1f818b2fce94131fd05542",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c589acbc501fa0f04e1f818b2fce94131fd05542",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vtab.c",
          "test/fts4rename.test"
        ],
        "message": "Fix a problem allowing a Table object to be deleted from within a call to the xDestroy method of the associated virtual table, causing a use-after-free error.\n\nFossilOrigin-Name: 1dbbb0101e8213b92b9a4c78c0fd2f9d0240a8ea3b40dff1033d1b8d71fb04ef",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vtab.c||src/vtab.c",
          "test/fts4rename.test||test/fts4rename.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b6d7d42b7426622a26b67809cd1f21285fea120aa1897377b9946840463b41f1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vtab.c||src/vtab.c": [
          "File: src/vtab.c -> src/vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "841:     p = vtabDisconnectAll(db, pTab);",
          "842:     xDestroy = p->pMod->pModule->xDestroy;",
          "844:     rc = xDestroy(p->pVtab);",
          "846:     if( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "844:     pTab->nTabRef++;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "849:       pTab->pVTable = 0;",
          "850:       sqlite3VtabUnlock(p);",
          "851:     }",
          "852:   }",
          "854:   return rc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "853:     sqlite3DeleteTable(db, pTab);",
          "",
          "---------------"
        ],
        "test/fts4rename.test||test/fts4rename.test": [
          "File: test/fts4rename.test -> test/fts4rename.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 April 30",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #*************************************************************************",
          "11: #",
          "13: set testdir [file dirname $argv0]",
          "14: source $testdir/tester.tcl",
          "15: source $testdir/fts3_common.tcl",
          "16: set ::testprefix fts4rename",
          "18: # If SQLITE_ENABLE_FTS3 is defined, omit this file.",
          "19: ifcapable !fts3 {",
          "20:   finish_test",
          "21:   return",
          "22: }",
          "24: do_execsql_test 1.0 {",
          "25:   CREATE VIRTUAL TABLE temp.t1 USING fts3(a);",
          "26:   BEGIN;",
          "27:   CREATE TABLE t2(x);",
          "28: } {}",
          "30: do_catchsql_test 1.1 {",
          "31:   ALTER TABLE t1_content RENAME c0a TO docid;",
          "32: } {1 {duplicate column name: docid}}",
          "34: do_catchsql_test 1.2 {",
          "35:   UPDATE t1 SET Col0 = 1 ;",
          "36: } {1 {no such column: Col0}}",
          "38: do_catchsql_test 1.3 {",
          "39:   ROLLBACK;",
          "40:   DROP TABLE t1;",
          "41: } {0 {}}",
          "43: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "29974f7b91417afa9eb237ac5dd37f2219cd5a0f",
      "candidate_info": {
        "commit_hash": "29974f7b91417afa9eb237ac5dd37f2219cd5a0f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/29974f7b91417afa9eb237ac5dd37f2219cd5a0f",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/gencol1.test"
        ],
        "message": "Add a few simple TCL test cases for generated columns.  (Full test coverage of the generated column logic is provided separately by TH3.)\n\nFossilOrigin-Name: acedb5c7f7dc1d68bef62098d42ca59e1be7a5083bb03dc07c03b9f9d817158b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 329820673a12ff6a6c8759f40989d4ccf272441064b0366a5f491695b55ad0e9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:   SELECT * FROM t1;",
          "25: } {integer 0}",
          "27: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: foreach {tn schema} {",
          "28: 1 {",
          "29:    CREATE TABLE t1(",
          "30:      a INT,",
          "31:      b TEXT,",
          "32:      c ANY,",
          "33:      w INT GENERATED ALWAYS AS (a*10),",
          "34:      x TEXT AS (typeof(c)),",
          "35:      y TEXT AS (substr(b,a,a+2))",
          "36:    );",
          "37:   }",
          "38: 2 {",
          "39:    CREATE TABLE t1(",
          "40:      w INT GENERATED ALWAYS AS (a*10),",
          "41:      x TEXT AS (typeof(c)),",
          "42:      y TEXT AS (substr(b,a,a+2)),",
          "43:      a INT,",
          "44:      b TEXT,",
          "45:      c ANY",
          "46:    );",
          "47:   }",
          "48: 3 {",
          "49:    CREATE TABLE t1(",
          "50:      w INT GENERATED ALWAYS AS (a*10),",
          "51:      a INT,",
          "52:      x TEXT AS (typeof(c)) STORED,",
          "53:      b TEXT,",
          "54:      y TEXT AS (substr(b,a,a+2)),",
          "55:      c ANY",
          "56:    );",
          "57:   }",
          "58: 4 {",
          "59:    CREATE TABLE t1(",
          "60:      a INTEGER PRIMARY KEY,",
          "61:      w INT GENERATED ALWAYS AS (a*10),",
          "62:      b TEXT,",
          "63:      x TEXT AS (typeof(c)),",
          "64:      y TEXT AS (substr(b,a,a+2)) STORED,",
          "65:      c ANY",
          "66:    );",
          "67:   }",
          "68: 5 {",
          "69:    CREATE TABLE t1(",
          "70:      w INT GENERATED ALWAYS AS (a*10),",
          "71:      a INT,",
          "72:      x TEXT AS (typeof(c)),",
          "73:      b TEXT,",
          "74:      y TEXT AS (substr(b,a,a+2)) STORED,",
          "75:      c ANY,",
          "76:      PRIMARY KEY(a,b)",
          "77:    ) WITHOUT ROWID;",
          "78:   }",
          "79: 6 {",
          "80:    CREATE TABLE t1(",
          "81:      w INT GENERATED ALWAYS AS (m*5),",
          "82:      m INT AS (a*2) STORED,",
          "83:      a INT,",
          "84:      x TEXT AS (typeof(c)),",
          "85:      b TEXT,",
          "86:      y TEXT AS (substr(b,m/2,m/2+2)) STORED,",
          "87:      c ANY,",
          "88:      PRIMARY KEY(a,b)",
          "89:    );",
          "90:   }",
          "91: 7 {",
          "92:    CREATE TABLE t1(",
          "93:      w INT GENERATED ALWAYS AS (m*5),",
          "94:      m INT AS (a*2) NOT NULL,",
          "95:      a INT,",
          "96:      x TEXT AS (typeof(c)) CHECK (x<>'blank'),",
          "97:      b TEXT,",
          "98:      y TEXT AS (substr(b,m/2,m/2+2)) STORED,",
          "99:      c ANY,",
          "100:      PRIMARY KEY(b,a)",
          "101:    ) WITHOUT ROWID;",
          "102:   }",
          "103: } {",
          "104:   catch {db close}",
          "105:   sqlite3 db :memory:",
          "106:   db eval $schema",
          "107:   do_execsql_test gencol1-2.$tn.100 {",
          "108:     INSERT INTO t1(a,b,c) VALUES(1,'abcdef',5.5),(3,'cantaloupe',NULL);",
          "109:     SELECT w, x, y, '|' FROM t1 ORDER BY a;",
          "110:   } {10 real abc | 30 null ntalo |}",
          "111:   do_execsql_test gencol1-2.$tn.101 {",
          "112:     SELECT w, x, y, '|' FROM t1 ORDER BY w;",
          "113:   } {10 real abc | 30 null ntalo |}",
          "114:   do_execsql_test gencol1-2.$tn.102 {",
          "115:     SELECT a FROM t1 WHERE w=30;",
          "116:   } {3}",
          "117:   do_execsql_test gencol1-2.$tn.103 {",
          "118:     SELECT a FROM t1 WHERE x='real';",
          "119:   } {1}",
          "120:   do_execsql_test gencol1-2.$tn.104 {",
          "121:     SELECT a FROM t1 WHERE y LIKE '%tal%' OR x='real' ORDER BY b;",
          "122:   } {1 3}",
          "123:   do_execsql_test gencol1-2.$tn.110 {",
          "124:     CREATE INDEX t1w ON t1(w);",
          "125:     SELECT a FROM t1 WHERE w=10;",
          "126:   } {1}",
          "127:   do_execsql_test gencol1-2.$tn.120 {",
          "128:     CREATE INDEX t1x ON t1(x) WHERE w BETWEEN 20 AND 40;",
          "129:     SELECT a FROM t1 WHERE x='null' AND w BETWEEN 20 AND 40;",
          "130:   } {3}",
          "131:   do_execsql_test gencol1-2.$tn.121 {",
          "132:     SELECT a FROM t1 WHERE x='real';",
          "133:   } {1}",
          "134:   do_execsql_test gencol1-2.$tn.130 {",
          "135:     VACUUM;",
          "136:     PRAGMA integrity_check;",
          "137:   } {ok}",
          "138:   do_execsql_test gencol1-2.$tn.140 {",
          "139:     UPDATE t1 SET a=a+100 WHERE w<20;",
          "140:     SELECT a, w, '|' FROM t1 ORDER BY w;",
          "141:   } {3 30 | 101 1010 |}",
          "142:   do_execsql_test gencol1-2.$tn.150 {",
          "143:     INSERT INTO t1 VALUES(4,'jambalaya','Chef John'),(15,87719874135,0);",
          "144:     SELECT w, x, y, '|' FROM t1 ORDER BY w;",
          "145:   } {30 null ntalo | 40 text balaya | 150 integer {} | 1010 real {} |}",
          "146: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c310c53e01388c8477c9863767ab779cf941a59f",
      "candidate_info": {
        "commit_hash": "c310c53e01388c8477c9863767ab779cf941a59f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c310c53e01388c8477c9863767ab779cf941a59f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c"
        ],
        "message": "Always include OP_Explain opcodes in the bytecode when SQLITE_DEBUG is enabled.\n\nFossilOrigin-Name: d8c1235c02b745138ac2b12e8bbb00dda4cac321176be92a2fa9547be029b3d0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 883337ffdb434b6856ceaada121c0be67e2fdec7b447675f45e85568ef28d7d9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "358: void sqlite3VdbeExplain(Parse *pParse, u8 bPush, const char *zFmt, ...){",
          "360:     char *zMsg;",
          "361:     Vdbe *v;",
          "362:     va_list ap;",
          "",
          "[Removed Lines]",
          "359:   if( pParse->explain==2 ){",
          "",
          "[Added Lines]",
          "359: #ifndef SQLITE_DEBUG",
          "362:   if( pParse->explain==2 )",
          "363: #endif",
          "364:   {",
          "",
          "---------------"
        ]
      }
    }
  ]
}