{
  "cve_id": "CVE-2016-10544",
  "cve_desc": "uws is a WebSocket server library. By sending a 256mb websocket message to a uws server instance with permessage-deflate enabled, there is a possibility used compression will shrink said 256mb down to less than 16mb of websocket payload which passes the length check of 16mb payload. This data will then inflate up to 256mb and crash the node process by exceeding V8's maximum string size. This affects uws >=0.10.0 <=0.10.8.",
  "repo": "uWebSockets/uWebSockets",
  "patch_hash": "37deefd01f0875e133ea967122e3a5e421b8fcd9",
  "patch_info": {
    "commit_hash": "37deefd01f0875e133ea967122e3a5e421b8fcd9",
    "repo": "uWebSockets/uWebSockets",
    "commit_url": "https://github.com/uWebSockets/uWebSockets/commit/37deefd01f0875e133ea967122e3a5e421b8fcd9",
    "files": [
      "src/Hub.cpp",
      "src/WebSocketImpl.cpp"
    ],
    "message": "Don't inflate more than ~16mb, drop connection on inflate error",
    "before_after_code_files": [
      "src/Hub.cpp||src/Hub.cpp",
      "src/WebSocketImpl.cpp||src/WebSocketImpl.cpp"
    ]
  },
  "patch_diff": {
    "src/Hub.cpp||src/Hub.cpp": [
      "File: src/Hub.cpp -> src/Hub.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: #include \"HTTPSocket.h\"",
      "3: #include <openssl/sha.h>",
      "5: namespace uWS {",
      "7: char *Hub::inflate(char *data, size_t &length) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5: static const int INFLATE_LESS_THAN_ROUGHLY = 16777216;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "18:         if (!inflationStream.avail_in) {",
      "19:             break;",
      "20:         }",
      "21:         dynamicInflationBuffer.append(inflationBuffer, LARGE_BUFFER_SIZE - inflationStream.avail_out);",
      "24:     inflateReset(&inflationStream);",
      "27:         length = 0;",
      "28:         return nullptr;",
      "29:     }",
      "",
      "[Removed Lines]",
      "22:     } while (err == Z_BUF_ERROR);",
      "26:     if (err != Z_BUF_ERROR && err != Z_OK) {",
      "",
      "[Added Lines]",
      "25:     } while (err == Z_BUF_ERROR && dynamicInflationBuffer.length() <= INFLATE_LESS_THAN_ROUGHLY);",
      "29:     if ((err != Z_BUF_ERROR && err != Z_OK) || dynamicInflationBuffer.length() > INFLATE_LESS_THAN_ROUGHLY) {",
      "",
      "---------------"
    ],
    "src/WebSocketImpl.cpp||src/WebSocketImpl.cpp": [
      "File: src/WebSocketImpl.cpp -> src/WebSocketImpl.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "36:                 webSocketData->compressionStatus = WebSocket<isServer>::Data::CompressionStatus::ENABLED;",
      "37:                 Hub *hub = ((Group<isServer> *) s.getSocketData()->nodeData)->hub;",
      "38:                 data = hub->inflate(data, length);",
      "39:             }",
      "41:             if (opCode == 1 && !isValidUtf8((unsigned char *) data, length)) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39:                 if (!data) {",
      "40:                     forceClose(user);",
      "41:                     return true;",
      "42:                 }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "56:                     Hub *hub = ((Group<isServer> *) s.getSocketData()->nodeData)->hub;",
      "57:                     webSocketData->fragmentBuffer.append(\"....\");",
      "58:                     data = hub->inflate((char *) webSocketData->fragmentBuffer.data(), length);",
      "59:                 } else {",
      "60:                     data = (char *) webSocketData->fragmentBuffer.data();",
      "61:                 }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "63:                     if (!data) {",
      "64:                         forceClose(user);",
      "65:                         return true;",
      "66:                     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a8d9f1d3b97aa23d9461ffa25464b665418b00a7",
      "candidate_info": {
        "commit_hash": "a8d9f1d3b97aa23d9461ffa25464b665418b00a7",
        "repo": "uWebSockets/uWebSockets",
        "commit_url": "https://github.com/uWebSockets/uWebSockets/commit/a8d9f1d3b97aa23d9461ffa25464b665418b00a7",
        "files": [
          "src/Group.h",
          "src/Hub.cpp",
          "src/Hub.h",
          "src/WebSocket.cpp"
        ],
        "message": "Pass maxPayload to inflate, fix one class/struct mismatch",
        "before_after_code_files": [
          "src/Group.h||src/Group.h",
          "src/Hub.cpp||src/Hub.cpp",
          "src/Hub.h||src/Hub.h",
          "src/WebSocket.cpp||src/WebSocket.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Hub.cpp||src/Hub.cpp"
          ],
          "candidate": [
            "src/Hub.cpp||src/Hub.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/Group.h||src/Group.h": [
          "File: src/Group.h -> src/Group.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:     using errorType = typename std::conditional<isServer, int, void *>::type;",
          "40:     std::function<void(errorType)> errorHandler;",
          "42:     Hub *hub;",
          "43:     int extensionOptions;",
          "45:     Timer *timer = nullptr, *httpTimer = nullptr;",
          "46:     std::string userPingMessage;",
          "47:     std::stack<Poll *> iterators;",
          "",
          "[Removed Lines]",
          "44:     unsigned int maxPayload;",
          "",
          "[Added Lines]",
          "42:     unsigned int maxPayload;",
          "",
          "---------------"
        ],
        "src/Hub.cpp||src/Hub.cpp": [
          "File: src/Hub.cpp -> src/Hub.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #include \"HTTPSocket.h\"",
          "3: #include <openssl/sha.h>",
          "7: namespace uWS {",
          "10:     dynamicInflationBuffer.clear();",
          "12:     inflationStream.next_in = (Bytef *) data;",
          "",
          "[Removed Lines]",
          "5: static const int INFLATE_LESS_THAN_ROUGHLY = 16777216;",
          "9: char *Hub::inflate(char *data, size_t &length) {",
          "",
          "[Added Lines]",
          "7: char *Hub::inflate(char *data, size_t &length, size_t maxPayload) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:         }",
          "24:         dynamicInflationBuffer.append(inflationBuffer, LARGE_BUFFER_SIZE - inflationStream.avail_out);",
          "27:     inflateReset(&inflationStream);",
          "30:         length = 0;",
          "31:         return nullptr;",
          "32:     }",
          "",
          "[Removed Lines]",
          "25:     } while (err == Z_BUF_ERROR && dynamicInflationBuffer.length() <= INFLATE_LESS_THAN_ROUGHLY);",
          "29:     if ((err != Z_BUF_ERROR && err != Z_OK) || dynamicInflationBuffer.length() > INFLATE_LESS_THAN_ROUGHLY) {",
          "",
          "[Added Lines]",
          "23:     } while (err == Z_BUF_ERROR && dynamicInflationBuffer.length() <= maxPayload);",
          "27:     if ((err != Z_BUF_ERROR && err != Z_OK) || dynamicInflationBuffer.length() > maxPayload) {",
          "",
          "---------------"
        ],
        "src/Hub.h||src/Hub.h": [
          "File: src/Hub.h -> src/Hub.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:     z_stream inflationStream = {};",
          "22:     char *inflationBuffer;",
          "24:     std::string dynamicInflationBuffer;",
          "25:     static const int LARGE_BUFFER_SIZE = 300 * 1024;",
          "",
          "[Removed Lines]",
          "23:     char *inflate(char *data, size_t &length);",
          "",
          "[Added Lines]",
          "23:     char *inflate(char *data, size_t &length, size_t maxPayload);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:     using Group<SERVER>::onHttpUpgrade;",
          "89:     using Group<SERVER>::onCancelledHttpRequest;",
          "93: };",
          "95: }",
          "",
          "[Removed Lines]",
          "91:     friend class WebSocket<SERVER>;",
          "92:     friend class WebSocket<CLIENT>;",
          "",
          "[Added Lines]",
          "91:     friend struct WebSocket<SERVER>;",
          "92:     friend struct WebSocket<CLIENT>;",
          "",
          "---------------"
        ],
        "src/WebSocket.cpp||src/WebSocket.cpp": [
          "File: src/WebSocket.cpp -> src/WebSocket.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "295: template <bool isServer>",
          "296: bool WebSocket<isServer>::handleFragment(char *data, size_t length, unsigned int remainingBytes, int opCode, bool fin, WebSocketState<isServer> *webSocketState) {",
          "297:     WebSocket<isServer> *webSocket = static_cast<WebSocket<isServer> *>(webSocketState);",
          "299:     if (opCode < 3) {",
          "300:         if (!remainingBytes && fin && !webSocket->fragmentBuffer.length()) {",
          "301:             if (webSocket->compressionStatus == WebSocket<isServer>::CompressionStatus::COMPRESSED_FRAME) {",
          "302:                     webSocket->compressionStatus = WebSocket<isServer>::CompressionStatus::ENABLED;",
          "305:                     if (!data) {",
          "306:                         forceClose(webSocketState);",
          "307:                         return true;",
          "",
          "[Removed Lines]",
          "303:                     Hub *hub = ((Group<isServer> *) webSocket->nodeData)->hub;",
          "304:                     data = hub->inflate(data, length);",
          "",
          "[Added Lines]",
          "298:     Group<isServer> *group = Group<isServer>::from(webSocket);",
          "304:                     data = group->hub->inflate(data, length, group->maxPayload);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "313:                 return true;",
          "314:             }",
          "317:             if (webSocket->isClosed() || webSocket->isShuttingDown()) {",
          "318:                 return true;",
          "319:             }",
          "",
          "[Removed Lines]",
          "316:             ((Group<isServer> *) webSocket->nodeData)->messageHandler(webSocket, data, length, (OpCode) opCode);",
          "",
          "[Added Lines]",
          "316:             group->messageHandler(webSocket, data, length, (OpCode) opCode);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "323:                 length = webSocket->fragmentBuffer.length();",
          "324:                 if (webSocket->compressionStatus == WebSocket<isServer>::CompressionStatus::COMPRESSED_FRAME) {",
          "325:                         webSocket->compressionStatus = WebSocket<isServer>::CompressionStatus::ENABLED;",
          "327:                         webSocket->fragmentBuffer.append(\"....\");",
          "329:                         if (!data) {",
          "330:                             forceClose(webSocketState);",
          "331:                             return true;",
          "",
          "[Removed Lines]",
          "326:                         Hub *hub = ((Group<isServer> *) webSocket->nodeData)->hub;",
          "328:                         data = hub->inflate((char *) webSocket->fragmentBuffer.data(), length);",
          "",
          "[Added Lines]",
          "327:                         data = group->hub->inflate((char *) webSocket->fragmentBuffer.data(), length, group->maxPayload);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "339:                     return true;",
          "340:                 }",
          "343:                 if (webSocket->isClosed() || webSocket->isShuttingDown()) {",
          "344:                     return true;",
          "345:                 }",
          "",
          "[Removed Lines]",
          "342:                 ((Group<isServer> *) webSocket->nodeData)->messageHandler(webSocket, data, length, (OpCode) opCode);",
          "",
          "[Added Lines]",
          "341:                 group->messageHandler(webSocket, data, length, (OpCode) opCode);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "355:             } else {",
          "356:                 if (opCode == PING) {",
          "357:                     webSocket->send(data, length, (OpCode) OpCode::PONG);",
          "359:                     if (webSocket->isClosed() || webSocket->isShuttingDown()) {",
          "360:                         return true;",
          "361:                     }",
          "362:                 } else if (opCode == PONG) {",
          "364:                     if (webSocket->isClosed() || webSocket->isShuttingDown()) {",
          "365:                         return true;",
          "366:                     }",
          "",
          "[Removed Lines]",
          "358:                     ((Group<isServer> *) webSocket->nodeData)->pingHandler(webSocket, data, length);",
          "363:                     ((Group<isServer> *) webSocket->nodeData)->pongHandler(webSocket, data, length);",
          "",
          "[Added Lines]",
          "357:                     group->pingHandler(webSocket, data, length);",
          "362:                     group->pongHandler(webSocket, data, length);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "379:                 } else {",
          "380:                     if (opCode == PING) {",
          "381:                         webSocket->send(controlBuffer, webSocket->controlTipLength, (OpCode) OpCode::PONG);",
          "383:                         if (webSocket->isClosed() || webSocket->isShuttingDown()) {",
          "384:                             return true;",
          "385:                         }",
          "386:                     } else if (opCode == PONG) {",
          "388:                         if (webSocket->isClosed() || webSocket->isShuttingDown()) {",
          "389:                             return true;",
          "390:                         }",
          "",
          "[Removed Lines]",
          "382:                         ((Group<isServer> *) webSocket->nodeData)->pingHandler(webSocket, controlBuffer, webSocket->controlTipLength);",
          "387:                         ((Group<isServer> *) webSocket->nodeData)->pongHandler(webSocket, controlBuffer, webSocket->controlTipLength);",
          "",
          "[Added Lines]",
          "381:                         group->pingHandler(webSocket, controlBuffer, webSocket->controlTipLength);",
          "386:                         group->pongHandler(webSocket, controlBuffer, webSocket->controlTipLength);",
          "",
          "---------------"
        ]
      }
    }
  ]
}