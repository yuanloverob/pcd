{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f9231c34eb931d0e3a83a3a0f6dad2d324e01a41",
      "candidate_info": {
        "commit_hash": "f9231c34eb931d0e3a83a3a0f6dad2d324e01a41",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f9231c34eb931d0e3a83a3a0f6dad2d324e01a41",
        "files": [
          "ext/fts5/fts5_tokenize.c",
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/vdbe.h"
        ],
        "message": "Fix harmless compiler warnings.\n\nFossilOrigin-Name: b57c545a384ab5d62becf3164945b32b1e108b2fb4c8dbd939a1706c2079e18b",
        "before_after_code_files": [
          "ext/fts5/fts5_tokenize.c||ext/fts5/fts5_tokenize.c",
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/vdbe.h||src/vdbe.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_tokenize.c||ext/fts5/fts5_tokenize.c": [
          "File: ext/fts5/fts5_tokenize.c -> ext/fts5/fts5_tokenize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "274:           if( bToken!=bTokenChars && sqlite3Fts5UnicodeIsdiacritic(iCode)==0 ){",
          "275:             int i;",
          "276:             for(i=0; i<nNew; i++){",
          "278:             }",
          "279:             memmove(&aNew[i+1], &aNew[i], (nNew-i)*sizeof(int));",
          "280:             aNew[i] = iCode;",
          "",
          "[Removed Lines]",
          "277:               if( aNew[i]>iCode ) break;",
          "",
          "[Added Lines]",
          "277:               if( (u32)aNew[i]>iCode ) break;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e130319317e761193890ef75787a3c114b61166f518df019697be8e2c820ec54",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2693:     if( ExprHasProperty(pExpr, EP_Subrtn) ){",
          "2695:       if( ExprHasProperty(pExpr, EP_xIsSelect) ){",
          "2696:         ExplainQueryPlan((pParse, 0, \"REUSE LIST SUBQUERY %d\",",
          "2697:               pExpr->x.pSelect->selId));",
          "",
          "[Removed Lines]",
          "2694:       int addr = sqlite3VdbeAddOp0(v, OP_Once); VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "2694:       addrOnce = sqlite3VdbeAddOp0(v, OP_Once); VdbeCoverage(v);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2699:       sqlite3VdbeAddOp2(v, OP_Gosub, pExpr->y.sub.regReturn,",
          "2700:                         pExpr->y.sub.iAddr);",
          "2701:       sqlite3VdbeAddOp2(v, OP_OpenDup, iTab, pExpr->iTable);",
          "2703:       return;",
          "2704:     }",
          "",
          "[Removed Lines]",
          "2702:       sqlite3VdbeJumpHere(v, addr);",
          "",
          "[Added Lines]",
          "2702:       sqlite3VdbeJumpHere(v, addrOnce);",
          "",
          "---------------"
        ],
        "src/vdbe.h||src/vdbe.h": [
          "File: src/vdbe.h -> src/vdbe.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "207:   void sqlite3VdbeExplain(Parse*,u8,const char*,...);",
          "208:   void sqlite3VdbeExplainPop(Parse*);",
          "209:   int sqlite3VdbeExplainParent(Parse*);",
          "211: # define ExplainQueryPlan(P)        sqlite3VdbeExplain P",
          "212: # define ExplainQueryPlanPop(P)     sqlite3VdbeExplainPop(P)",
          "213: # define ExplainQueryPlanParent(P)  sqlite3VdbeExplainParent(P)",
          "",
          "[Removed Lines]",
          "210:   void sqlite3ExplainBreakpoint(const char*,const char*);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3517cc7f36ab406fbdfd0517976ae456f7905cd4",
      "candidate_info": {
        "commit_hash": "3517cc7f36ab406fbdfd0517976ae456f7905cd4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3517cc7f36ab406fbdfd0517976ae456f7905cd4",
        "files": [
          "ext/misc/fossildelta.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a memory leak in the delta_parse() table-valued function of the fossildelta.c extension.\n\nFossilOrigin-Name: c86ca3f0220a5f9e7f7f1818f6e1220d851f3ebed6a5f0aae6ac38309bd2930e",
        "before_after_code_files": [
          "ext/misc/fossildelta.c||ext/misc/fossildelta.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/fossildelta.c||ext/misc/fossildelta.c": [
          "File: ext/misc/fossildelta.c -> ext/misc/fossildelta.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "850: static int deltaparsevtabClose(sqlite3_vtab_cursor *cur){",
          "851:   deltaparsevtab_cursor *pCur = (deltaparsevtab_cursor*)cur;",
          "852:   sqlite3_free(pCur);",
          "853:   return SQLITE_OK;",
          "854: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "852:   sqlite3_free(pCur->aDelta);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 15202aee150fa8e15fb90e90e5765c5e19a1eaf4896da2996a747636b76da8e6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "01ef55e0f55e3dd49f4d70177e6e03e540a1eae5",
      "candidate_info": {
        "commit_hash": "01ef55e0f55e3dd49f4d70177e6e03e540a1eae5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/01ef55e0f55e3dd49f4d70177e6e03e540a1eae5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "Fix sqlite3ColumnOfIndex() to account for virtual columns.\n\nFossilOrigin-Name: 447271123e3b467d9271a4c0cf27f47af2f865c9298b8c355d9e766411a1f422",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 450c48766c8e62653d074c95f69b0576de3880d183a1d1e5992d88b6fce6cc39",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "883: i16 sqlite3ColumnOfIndex(Index *pIdx, i16 iCol){",
          "884:   int i;",
          "885:   for(i=0; i<pIdx->nColumn; i++){",
          "886:     if( iCol==pIdx->aiColumn[i] ) return i;",
          "887:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "885: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "886:   Table *pTab = pIdx->pTable;",
          "887:   if( pTab->tabFlags & TF_HasVirtual ){",
          "888:     for(i=0; i<=iCol; i++){",
          "889:       if( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL ) iCol++;",
          "890:     }",
          "891:   }",
          "892: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fb11bf8c910e85ec7a4bfb518b78c47409e5b890",
      "candidate_info": {
        "commit_hash": "fb11bf8c910e85ec7a4bfb518b78c47409e5b890",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fb11bf8c910e85ec7a4bfb518b78c47409e5b890",
        "files": [
          "ext/fts3/fts3.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Avoid a left-shift of a negative value (undefined behaviour) when dealing with a corrupt database in fts3.\n\nFossilOrigin-Name: b851d12474035328df8354c7da8d81bc78833c8c704153f9f573c19b47a8487e",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "338: }",
          "340: #define GETVARINT_STEP(v, ptr, shift, mask1, mask2, var, ret) \\",
          "342:   if( (v & mask2)==0 ){ var = v; return ret; }",
          "343: #define GETVARINT_INIT(v, ptr, shift, mask1, mask2, var, ret) \\",
          "344:   v = (*ptr++);                                               \\",
          "",
          "[Removed Lines]",
          "341:   v = (v & mask1) | ( (*ptr++) << shift );                    \\",
          "",
          "[Added Lines]",
          "341:   v = (v & mask1) | ( (*(ptr++)) << shift );  \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "378: int sqlite3Fts3GetVarint32(const char *p, int *pi){",
          "379:   u32 a;",
          "381: #ifndef fts3GetVarint32",
          "383: #else",
          "385:   assert( a & 0x80 );",
          "386: #endif",
          "391:   a = (a & 0x0FFFFFFF );",
          "393:   assert( 0==(a & 0x80000000) );",
          "394:   assert( *pi>=0 );",
          "395:   return 5;",
          "",
          "[Removed Lines]",
          "382:   GETVARINT_INIT(a, p, 0,  0x00,     0x80, *pi, 1);",
          "384:   a = (*p++);",
          "388:   GETVARINT_STEP(a, p, 7,  0x7F,     0x4000, *pi, 2);",
          "389:   GETVARINT_STEP(a, p, 14, 0x3FFF,   0x200000, *pi, 3);",
          "390:   GETVARINT_STEP(a, p, 21, 0x1FFFFF, 0x10000000, *pi, 4);",
          "",
          "[Added Lines]",
          "379:   const unsigned char *ptr = (const unsigned char*)p;",
          "383:   GETVARINT_INIT(a, ptr, 0,  0x00,     0x80, *pi, 1);",
          "385:   a = (*ptr++);",
          "389:   GETVARINT_STEP(a, ptr, 7,  0x7F,     0x4000, *pi, 2);",
          "390:   GETVARINT_STEP(a, ptr, 14, 0x3FFF,   0x200000, *pi, 3);",
          "391:   GETVARINT_STEP(a, ptr, 21, 0x1FFFFF, 0x10000000, *pi, 4);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cad5da1bf5f65ad87d97b72e9a84081fde455ba4085e79943fdf6c0144b1ef83",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "228a52d973c5eae8557adfc5da3b5b1ebcffdbec",
      "candidate_info": {
        "commit_hash": "228a52d973c5eae8557adfc5da3b5b1ebcffdbec",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/228a52d973c5eae8557adfc5da3b5b1ebcffdbec",
        "files": [
          "manifest",
          "manifest.uuid"
        ],
        "message": "Version 3.30.0\n\nFossilOrigin-Name: c20a35336432025445f9f7e289d0cc3e4003fb17f45a4ce74c6269c407c6e09f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7f9a4b6015ac332a04d3e394a6b3210fc95253d8786a261178a5639cb8d9d987",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}