{
  "cve_id": "CVE-2019-12209",
  "cve_desc": "Yubico pam-u2f 1.0.7 attempts parsing of the configured authfile (default $HOME/.config/Yubico/u2f_keys) as root (unless openasuser was enabled), and does not properly verify that the path lacks symlinks pointing to other files on the system owned by root. If the debug option is enabled in the PAM configuration, part of the file contents of a symlink target will be logged, possibly revealing sensitive information.",
  "repo": "Yubico/pam-u2f",
  "patch_hash": "7db3386fcdb454e33a3ea30dcfb8e8960d4c3aa3",
  "patch_info": {
    "commit_hash": "7db3386fcdb454e33a3ea30dcfb8e8960d4c3aa3",
    "repo": "Yubico/pam-u2f",
    "commit_url": "https://github.com/Yubico/pam-u2f/commit/7db3386fcdb454e33a3ea30dcfb8e8960d4c3aa3",
    "files": [
      "Makefile.am",
      "README",
      "configure.ac",
      "drop_privs.c",
      "drop_privs.h",
      "pam-u2f.c"
    ],
    "message": "Drop privileges by default when opening user-related files\n\nThe module is typically executed as root and would sometimes\nopen files or follow symlinks that could be controlled from the\noutside.\n\nDrop privileges to the target user before opening any files.\n\nFixes CVE-2019-12209.\n\nThanks to Matthias Gerstner of the SUSE Security Team for reporting\nthe issue.",
    "before_after_code_files": [
      "Makefile.am||Makefile.am",
      "configure.ac||configure.ac",
      "drop_privs.c||drop_privs.c",
      "drop_privs.h||drop_privs.h",
      "pam-u2f.c||pam-u2f.c"
    ]
  },
  "patch_diff": {
    "Makefile.am||Makefile.am": [
      "File: Makefile.am -> Makefile.am",
      "--- Hunk 1 ---",
      "[Context before]",
      "14: pam_u2f_la_SOURCES = pam-u2f.c",
      "15: pam_u2f_la_SOURCES += util.c util.h",
      "17: pam_u2f_la_LIBADD = -lpam",
      "18: pam_u2f_la_LIBADD += $(LIBU2FHOST_LIBS) $(LIBU2FSERVER_LIBS)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "16: pam_u2f_la_SOURCES += drop_privs.h drop_privs.c",
      "",
      "---------------"
    ],
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "37:    #include <security/pam_appl.h>])",
      "38: AC_CHECK_LIB([pam], [pam_start])",
      "40: case \"$host\" in",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "40: AC_SEARCH_LIBS([pam_modutil_drop_priv], [\"pam\"], [AC_DEFINE([HAVE_PAM_MODUTIL_DROP_PRIV], [1])])",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "71: AX_CHECK_COMPILE_FLAG([-Wall], [CWFLAGS=\"-Wall\"])",
      "72: AX_CHECK_COMPILE_FLAG([-Wextra], [CWFLAGS=\"$CWFLAGS -Wextra\"])",
      "73: AX_CHECK_COMPILE_FLAG([-Wconversion], [CWFLAGS=\"$CWFLAGS -Wconversion\"])",
      "74: AX_CHECK_COMPILE_FLAG([-Wpedantic], [CWFLAGS=\"$CWFLAGS -Wpedantic\"])",
      "75: AX_CHECK_COMPILE_FLAG([-Wformat=2], [CWFLAGS=\"$CWFLAGS -Wformat=2\"])",
      "76: AX_CHECK_COMPILE_FLAG([-Wstrict-prototypes], [CWFLAGS=\"$CWFLAGS -Wstrict-prototypes\"])",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "76: # Because pam headers are doing sign-conversion, see PAM_MODUTIL_DEF_PRIVS in pam_modutil.h",
      "77: AX_CHECK_COMPILE_FLAG([-Wconversion], [CWFLAGS=\"$CWFLAGS -Wno-sign-conversion\"])",
      "",
      "---------------"
    ],
    "drop_privs.c||drop_privs.c": [
      "File: drop_privs.c -> drop_privs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33: #ifndef HAVE_PAM_MODUTIL_DROP_PRIV",
      "35: #include <unistd.h>",
      "36: #include <pwd.h>",
      "37: #include <grp.h>",
      "38: #include <errno.h>",
      "39: #include <string.h>",
      "40: #include <stdlib.h>",
      "42: #include \"drop_privs.h\"",
      "43: #include \"util.h\"",
      "45: #ifdef HAVE_SECURITY_PAM_APPL_H",
      "46: #include <security/pam_appl.h>",
      "47: #endif",
      "48: #ifdef HAVE_SECURITY_PAM_MODULES_H",
      "49: #include <security/pam_modules.h>",
      "50: #endif",
      "53: int pam_modutil_drop_priv(pam_handle_t *pamh, struct _ykpam_privs *privs, struct passwd *pw) {",
      "54:     privs->saved_euid = geteuid();",
      "55:     privs->saved_egid = getegid();",
      "57:     if ((privs->saved_euid == pw->pw_uid) && (privs->saved_egid == pw->pw_gid)) {",
      "58:         D (privs->debug_file, \"Privilges already dropped, pretend it is all right\");",
      "59:         return 0;",
      "60:     }",
      "62:     privs->saved_groups_length = getgroups(0, NULL);",
      "63:     if (privs->saved_groups_length < 0) {",
      "64:         D (privs->debug_file, \"getgroups: %s\", strerror(errno));",
      "65:         return -1;",
      "66:     }",
      "68:     if (privs->saved_groups_length > SAVED_GROUPS_MAX_LEN) {",
      "69:         D (privs->debug_file, \"too many groups, limiting.\");",
      "70:         privs->saved_groups_length = SAVED_GROUPS_MAX_LEN;",
      "71:     }",
      "73:     if (privs->saved_groups_length > 0) {",
      "74:         if (getgroups(privs->saved_groups_length, privs->saved_groups) < 0) {",
      "75:             D (privs->debug_file, \"getgroups: %s\", strerror(errno));",
      "76:             goto free_out;",
      "77:         }",
      "78:     }",
      "80:     if (initgroups(pw->pw_name, pw->pw_gid) < 0) {",
      "81:         D (privs->debug_file, \"initgroups: %s\", strerror(errno));",
      "82:         goto free_out;",
      "83:     }",
      "85:     if (setegid(pw->pw_gid) < 0) {",
      "86:         D (privs->debug_file, \"setegid: %s\", strerror(errno));",
      "87:         goto free_out;",
      "88:     }",
      "90:     if (seteuid(pw->pw_uid) < 0) {",
      "91:         D (privs->debug_file, \"seteuid: %s\", strerror(errno));",
      "92:         goto free_out;",
      "93:     }",
      "95:     return 0;",
      "96: free_out:",
      "97:     return -1;",
      "98: }",
      "100: int pam_modutil_regain_priv(pam_handle_t *pamh, struct _ykpam_privs *privs) {",
      "101:     if ((privs->saved_euid == geteuid()) && (privs->saved_egid == getegid())) {",
      "102:         D (privs->debug_file, \"Privilges already as requested, pretend it is all right\");",
      "103:         return 0;",
      "104:     }",
      "106:     if (seteuid(privs->saved_euid) < 0) {",
      "107:         D (privs->debug_file, \"seteuid: %s\", strerror(errno));",
      "108:         return -1;",
      "109:     }",
      "111:     if (setegid(privs->saved_egid) < 0) {",
      "112:         D (privs->debug_file, \"setegid: %s\", strerror(errno));",
      "113:         return -1;",
      "114:     }",
      "116:     if (setgroups(privs->saved_groups_length, privs->saved_groups) < 0) {",
      "117:         D (privs->debug_file, \"setgroups: %s\", strerror(errno));",
      "118:         return -1;",
      "119:     }",
      "121:     return 0;",
      "122: }",
      "124: #else",
      "127: typedef int make_iso_compilers_happy;",
      "129: #endif // HAVE_PAM_MODUTIL_DROP_PRIV",
      "",
      "---------------"
    ],
    "drop_privs.h||drop_privs.h": [
      "File: drop_privs.h -> drop_privs.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "29: #ifndef __PAM_U2F_DROP_PRIVS_H_INCLUDED__",
      "30: #define __PAM_U2F_DROP_PRIVS_H_INCLUDED__",
      "32: #ifdef HAVE_PAM_MODUTIL_DROP_PRIV",
      "33: #include <security/pam_modutil.h>",
      "34: #else",
      "36: #include <pwd.h>",
      "37: #include <stdio.h>",
      "39: #ifdef HAVE_SECURITY_PAM_APPL_H",
      "40: #include <security/pam_appl.h>",
      "41: #endif",
      "42: #ifdef HAVE_SECURITY_PAM_MODULES_H",
      "43: #include <security/pam_modules.h>",
      "44: #endif",
      "48: struct _ykpam_privs {",
      "49:   uid_t saved_euid;",
      "50:   gid_t saved_egid;",
      "51:   gid_t *saved_groups;",
      "52:   int saved_groups_length;",
      "53:   FILE *debug_file;",
      "54: };",
      "56: #define PAM_MODUTIL_DEF_PRIVS(n) \\",
      "57:   gid_t n##_saved_groups[SAVED_GROUPS_MAX_LEN]; \\",
      "58:   struct _ykpam_privs n = {-1, -1, n##_saved_groups, SAVED_GROUPS_MAX_LEN, cfg->debug_file}",
      "60: int pam_modutil_drop_priv(pam_handle_t *, struct _ykpam_privs *, struct passwd *);",
      "61: int pam_modutil_regain_priv(pam_handle_t *, struct _ykpam_privs *);",
      "63: #endif",
      "64: #endif",
      "",
      "---------------"
    ],
    "pam-u2f.c||pam-u2f.c": [
      "File: pam-u2f.c -> pam-u2f.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "20: #include <errno.h>",
      "22: #include \"util.h\"",
      "25: #ifndef HAVE_SECURE_GETENV",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "23: #include \"drop_privs.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "148:   int retval = PAM_IGNORE;",
      "149:   device_t *devices = NULL;",
      "150:   unsigned n_devices = 0;",
      "152:   int should_free_origin = 0;",
      "153:   int should_free_appid = 0;",
      "154:   int should_free_auth_file = 0;",
      "155:   int should_free_authpending_file = 0;",
      "157:   parse_cfg(flags, argc, argv, cfg);",
      "",
      "[Removed Lines]",
      "151:   int openasuser;",
      "",
      "[Added Lines]",
      "152:   int openasuser = 0;",
      "157:   PAM_MODUTIL_DEF_PRIVS(privs);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "235:         goto done;",
      "236:       }",
      "238:       snprintf(buf, authfile_dir_len,",
      "239:                \"%s/.config%s\", pw->pw_dir, DEFAULT_AUTHFILE);",
      "240:     } else {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "241:       openasuser = geteuid() == 0 ? 1 : 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "251:       snprintf(buf, authfile_dir_len,",
      "252:                \"%s%s\", authfile_dir, DEFAULT_AUTHFILE);",
      "253:     }",
      "258:     should_free_auth_file = 1;",
      "",
      "[Removed Lines]",
      "255:     DBG(\"Using default authentication file %s\", buf);",
      "",
      "[Added Lines]",
      "259:       if (!openasuser) {",
      "260:  DBG(\"WARNING: not dropping privileges when reading %s, please \"",
      "261:      \"consider setting openasuser=1 in the module configuration\", buf);",
      "262:       }",
      "265:     DBG(\"Using authentication file %s\", buf);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "261:     DBG(\"Using authentication file %s\", cfg->auth_file);",
      "262:   }",
      "265:   if (openasuser) {",
      "268:       retval = PAM_IGNORE;",
      "269:       goto done;",
      "270:     }",
      "272:   }",
      "273:   retval = get_devices_from_authfile(cfg->auth_file, user, cfg->max_devs,",
      "274:                                      cfg->debug, cfg->debug_file,",
      "275:                                      devices, &n_devices);",
      "276:   if (openasuser) {",
      "279:       retval = PAM_IGNORE;",
      "280:       goto done;",
      "281:     }",
      "283:   }",
      "285:   if (retval != 1) {",
      "",
      "[Removed Lines]",
      "264:   openasuser = geteuid() == 0 && cfg->openasuser;",
      "266:     if (seteuid(pw_s.pw_uid)) {",
      "267:       DBG(\"Unable to switch user to uid %i\", pw_s.pw_uid);",
      "271:     DBG(\"Switched to uid %i\", pw_s.pw_uid);",
      "277:     if (seteuid(0)) {",
      "278:       DBG(\"Unable to switch back to uid 0\");",
      "282:     DBG(\"Switched back to uid 0\");",
      "",
      "[Added Lines]",
      "274:   if (!openasuser) {",
      "275:     openasuser = geteuid() == 0 && cfg->openasuser;",
      "276:   }",
      "278:     DBG(\"Dropping privileges\");",
      "279:     if (pam_modutil_drop_priv(pamh, &privs, pw)) {",
      "280:       DBG(\"Unable to switch user to uid %i\", pw->pw_uid);",
      "284:     DBG(\"Switched to uid %i\", pw->pw_uid);",
      "290:     if (pam_modutil_regain_priv(pamh, &privs)) {",
      "291:       DBG(\"could not restore privileges\");",
      "295:     DBG(\"Restored privileges\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "aab0c31a3bfed8912a271685d6ec909f61380155",
      "candidate_info": {
        "commit_hash": "aab0c31a3bfed8912a271685d6ec909f61380155",
        "repo": "Yubico/pam-u2f",
        "commit_url": "https://github.com/Yubico/pam-u2f/commit/aab0c31a3bfed8912a271685d6ec909f61380155",
        "files": [
          "util.c"
        ],
        "message": "Fix out-of-bound accesses",
        "before_after_code_files": [
          "util.c||util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/Yubico/pam-u2f/pull/116"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "util.c||util.c": [
          "File: util.c -> util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:   retval = -2;",
          "98:   while (fgets(buf, (int)(DEVSIZE * (max_devs - 1)), opwfile)) {",
          "99:     char *saveptr = NULL;",
          "103:     if (verbose)",
          "104:       D(debug_file, \"Authorization line: %s\", buf);",
          "",
          "[Removed Lines]",
          "100:     if (buf[strlen(buf) - 1] == '\\n')",
          "101:       buf[strlen(buf) - 1] = '\\0';",
          "",
          "[Added Lines]",
          "100:     size_t len = strlen(buf);",
          "101:     if (len > 0 && buf[len - 1] == '\\n')",
          "102:       buf[len - 1] = '\\0';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:       i = 0;",
          "123:       while ((s_token = strtok_r(NULL, \",\", &saveptr))) {",
          "129:           if (verbose)",
          "130:             D(debug_file, \"Found more than %d devices, ignoring the remaining ones\",",
          "132:           break;",
          "133:         }",
          "135:         if (verbose)",
          "136:           D(debug_file, \"KeyHandle for device number %d: %s\", i + 1, s_token);",
          "",
          "[Removed Lines]",
          "124:         devices[i].keyHandle = NULL;",
          "125:         devices[i].publicKey = NULL;",
          "127:         if ((*n_devs)++ > MAX_DEVS - 1) {",
          "131:                MAX_DEVS);",
          "",
          "[Added Lines]",
          "125:         if ((*n_devs)++ > max_devs - 1) {",
          "129:                max_devs);",
          "133:         devices[i].keyHandle = NULL;",
          "134:         devices[i].publicKey = NULL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "18b1914e32b74ff52000f10e97067e841e5fff62",
      "candidate_info": {
        "commit_hash": "18b1914e32b74ff52000f10e97067e841e5fff62",
        "repo": "Yubico/pam-u2f",
        "commit_url": "https://github.com/Yubico/pam-u2f/commit/18b1914e32b74ff52000f10e97067e841e5fff62",
        "files": [
          "pam-u2f.c",
          "util.c",
          "util.h"
        ],
        "message": "Do not leak file descriptor when doing exec\n\nWhen opening a custom debug file, the descriptor would stay\nopen when calling exec and leak to the child process.\n\nMake sure all files are opened with close-on-exec.\n\nThis fixes CVE-2019-12210.\n\nThanks to Matthias Gerstner of the SUSE Security Team for reporting\nthe issue.",
        "before_after_code_files": [
          "pam-u2f.c||pam-u2f.c",
          "util.c||util.c",
          "util.h||util.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/Yubico/pam-u2f/pull/116"
        ],
        "olp_code_files": {
          "patch": [
            "pam-u2f.c||pam-u2f.c"
          ],
          "candidate": [
            "pam-u2f.c||pam-u2f.c"
          ]
        }
      },
      "candidate_diff": {
        "pam-u2f.c||pam-u2f.c": [
          "File: pam-u2f.c -> pam-u2f.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #endif",
          "33: static void parse_cfg(int flags, int argc, const char **argv, cfg_t *cfg) {",
          "34:   int i;",
          "35:   memset(cfg, 0, sizeof(cfg_t));",
          "36:   cfg->debug_file = stderr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34:   struct stat st;",
          "35:   FILE *file = NULL;",
          "36:   int fd = -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:         cfg->debug_file = (FILE *)-1;",
          "77:       }",
          "78:       else {",
          "87:           }",
          "88:         }",
          "89:       }",
          "",
          "[Removed Lines]",
          "79:         struct stat st;",
          "80:         FILE *file;",
          "81:         if(lstat(filename, &st) == 0) {",
          "82:           if(S_ISREG(st.st_mode)) {",
          "83:             file = fopen(filename, \"a\");",
          "84:             if(file != NULL) {",
          "85:               cfg->debug_file = file;",
          "86:             }",
          "",
          "[Added Lines]",
          "83:         fd = open(filename, O_WRONLY | O_APPEND | O_CLOEXEC | O_NOFOLLOW | O_NOCTTY);",
          "84:         if (fd >= 0 && (fstat(fd, &st) == 0) && S_ISREG(st.st_mode)) {",
          "85:           file = fdopen(fd, \"a\");",
          "86:           if(file != NULL) {",
          "87:             cfg->debug_file = file;",
          "88:             cfg->is_custom_debug_file = 1;",
          "89:             file = NULL;",
          "90:             fd = -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "111:     D(cfg->debug_file, \"appid=%s\", cfg->appid ? cfg->appid : \"(null)\");",
          "112:     D(cfg->debug_file, \"prompt=%s\", cfg->prompt ? cfg->prompt : \"(null)\");",
          "113:   }",
          "114: }",
          "116: #ifdef DBG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "119:   if (fd != -1)",
          "120:     close(fd);",
          "122:   if (file != NULL)",
          "123:     fclose(file);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "317:     DBG(\"Using file '%s' for emitting touch request notifications\", cfg->authpending_file);",
          "321:     if (authpending_file_descriptor < 0) {",
          "322:       DBG(\"Unable to emit 'authentication started' notification by opening the file '%s', (%s)\",",
          "323:           cfg->authpending_file, strerror(errno));",
          "",
          "[Removed Lines]",
          "320:     authpending_file_descriptor = open(cfg->authpending_file, O_RDONLY | O_CREAT, 0664);",
          "",
          "[Added Lines]",
          "330:     authpending_file_descriptor =",
          "331:       open(cfg->authpending_file, O_RDONLY | O_CREAT | O_CLOEXEC | O_NOFOLLOW | O_NOCTTY, 0664);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "385:   }",
          "386:   DBG(\"done. [%s]\", pam_strerror(pamh, retval));",
          "388:   return retval;",
          "389: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "399:   if (cfg->is_custom_debug_file) {",
          "400:     fclose(cfg->debug_file);",
          "401:   }",
          "",
          "---------------"
        ],
        "util.c||util.c": [
          "File: util.c -> util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:   if (fd < 0) {",
          "41:     if (verbose)",
          "42:       D(debug_file, \"Cannot open file: %s (%s)\", authfile, strerror(errno));",
          "",
          "[Removed Lines]",
          "39:   fd = open(authfile, O_RDONLY, 0);",
          "",
          "[Added Lines]",
          "39:   fd = open(authfile, O_RDONLY | O_CLOEXEC | O_NOCTTY);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:     if (verbose)",
          "84:       D(debug_file, \"fdopen: %s\", strerror(errno));",
          "85:     goto err;",
          "86:   }",
          "88:   buf = malloc(sizeof(char) * (DEVSIZE * max_devs));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:   } else {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "212:   if (opwfile)",
          "213:     fclose(opwfile);",
          "215:     close(fd);",
          "216:   return retval;",
          "217: }",
          "",
          "[Removed Lines]",
          "214:   else if (fd >= 0)",
          "",
          "[Added Lines]",
          "217:   if (fd != -1)",
          "",
          "---------------"
        ],
        "util.h||util.h": [
          "File: util.h -> util.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:   const char *appid;",
          "46:   const char *prompt;",
          "47:   FILE *debug_file;",
          "48: } cfg_t;",
          "50: typedef struct {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:   int is_custom_debug_file;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cab705b101732cbb5be70627c3663de438f6b450",
      "candidate_info": {
        "commit_hash": "cab705b101732cbb5be70627c3663de438f6b450",
        "repo": "Yubico/pam-u2f",
        "commit_url": "https://github.com/Yubico/pam-u2f/commit/cab705b101732cbb5be70627c3663de438f6b450",
        "files": [
          "pam-u2f.c"
        ],
        "message": "Check the correct variable, openasuser has not been set here yet",
        "before_after_code_files": [
          "pam-u2f.c||pam-u2f.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pam-u2f.c||pam-u2f.c"
          ],
          "candidate": [
            "pam-u2f.c||pam-u2f.c"
          ]
        }
      },
      "candidate_diff": {
        "pam-u2f.c||pam-u2f.c": [
          "File: pam-u2f.c -> pam-u2f.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "265:       snprintf(buf, authfile_dir_len,",
          "266:                \"%s%s\", authfile_dir, DEFAULT_AUTHFILE);",
          "269:  DBG(\"WARNING: not dropping privileges when reading %s, please \"",
          "270:      \"consider setting openasuser=1 in the module configuration\", buf);",
          "271:       }",
          "",
          "[Removed Lines]",
          "268:       if (!openasuser) {",
          "",
          "[Added Lines]",
          "268:       if (!cfg->openasuser) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eb707e1f553ee07b06f3405aca68880a4baa7401",
      "candidate_info": {
        "commit_hash": "eb707e1f553ee07b06f3405aca68880a4baa7401",
        "repo": "Yubico/pam-u2f",
        "commit_url": "https://github.com/Yubico/pam-u2f/commit/eb707e1f553ee07b06f3405aca68880a4baa7401",
        "files": [
          "drop_privs.h"
        ],
        "message": "- cast -1 to the appropriate types - split lines",
        "before_after_code_files": [
          "drop_privs.h||drop_privs.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drop_privs.h||drop_privs.h"
          ],
          "candidate": [
            "drop_privs.h||drop_privs.h"
          ]
        }
      },
      "candidate_diff": {
        "drop_privs.h||drop_privs.h": [
          "File: drop_privs.h -> drop_privs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: #define PAM_MODUTIL_DEF_PRIVS(n)                                               \\",
          "57:   gid_t n##_saved_groups[SAVED_GROUPS_MAX_LEN];                                \\",
          "61: int pam_modutil_drop_priv(pam_handle_t *, struct _ykpam_privs *,",
          "62:                           struct passwd *);",
          "",
          "[Removed Lines]",
          "58:   struct _ykpam_privs n = {-1, -1, n##_saved_groups, SAVED_GROUPS_MAX_LEN,     \\",
          "59:                            cfg->debug_file}",
          "",
          "[Added Lines]",
          "58:   struct _ykpam_privs n = { \\",
          "59:       (uid_t)-1, \\",
          "60:       (gid_t)-1, \\",
          "61:       n##_saved_groups, \\",
          "62:       SAVED_GROUPS_MAX_LEN,     \\",
          "63:       cfg->debug_file, \\",
          "64:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b9ce4ebf6b3f86400053b175357950385b8406f7",
      "candidate_info": {
        "commit_hash": "b9ce4ebf6b3f86400053b175357950385b8406f7",
        "repo": "Yubico/pam-u2f",
        "commit_url": "https://github.com/Yubico/pam-u2f/commit/b9ce4ebf6b3f86400053b175357950385b8406f7",
        "files": [
          "b64.c",
          "drop_privs.c",
          "drop_privs.h",
          "explicit_bzero.c",
          "pam-u2f.c",
          "pamu2fcfg/pamu2fcfg.c",
          "util.c",
          "util.h"
        ],
        "message": "Apply clang-format",
        "before_after_code_files": [
          "b64.c||b64.c",
          "drop_privs.c||drop_privs.c",
          "drop_privs.h||drop_privs.h",
          "explicit_bzero.c||explicit_bzero.c",
          "pam-u2f.c||pam-u2f.c",
          "pamu2fcfg/pamu2fcfg.c||pamu2fcfg/pamu2fcfg.c",
          "util.c||util.c",
          "util.h||util.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drop_privs.c||drop_privs.c",
            "drop_privs.h||drop_privs.h",
            "pam-u2f.c||pam-u2f.c"
          ],
          "candidate": [
            "drop_privs.c||drop_privs.c",
            "drop_privs.h||drop_privs.h",
            "pam-u2f.c||pam-u2f.c"
          ]
        }
      },
      "candidate_diff": {
        "b64.c||b64.c": [
          "File: b64.c -> b64.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include \"b64.h\"",
          "12: int b64_encode(const void *ptr, size_t len, char **out) {",
          "15:   char *b64_ptr = NULL;",
          "20:   if (ptr == NULL || out == NULL || len > INT_MAX)",
          "21:     return (0);",
          "",
          "[Removed Lines]",
          "13:   BIO  *bio_b64 = NULL;",
          "14:   BIO  *bio_mem = NULL;",
          "16:   long  b64_len;",
          "17:   int   n;",
          "18:   int   ok = 0;",
          "",
          "[Added Lines]",
          "13:   BIO *bio_b64 = NULL;",
          "14:   BIO *bio_mem = NULL;",
          "16:   long b64_len;",
          "17:   int n;",
          "18:   int ok = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:   BIO_set_flags(bio_b64, BIO_FLAGS_BASE64_NO_NL);",
          "34:   BIO_push(bio_b64, bio_mem);",
          "38:     goto fail;",
          "40:   if (BIO_flush(bio_b64) < 0)",
          "41:     goto fail;",
          "43:   b64_len = BIO_get_mem_data(bio_b64, &b64_ptr);",
          "45:     goto fail;",
          "48:   if (*out == NULL)",
          "49:     goto fail;",
          "52:   ok = 1;",
          "54: fail:",
          "",
          "[Removed Lines]",
          "36:   n = BIO_write(bio_b64, ptr, (int)len);",
          "37:   if (n < 0 || (size_t)n != len)",
          "44:   if (b64_len < 0 || (size_t)b64_len == SIZE_MAX || b64_ptr == NULL)",
          "51:   memcpy(*out, b64_ptr, (size_t)b64_len);",
          "",
          "[Added Lines]",
          "36:   n = BIO_write(bio_b64, ptr, (int) len);",
          "37:   if (n < 0 || (size_t) n != len)",
          "44:   if (b64_len < 0 || (size_t) b64_len == SIZE_MAX || b64_ptr == NULL)",
          "51:   memcpy(*out, b64_ptr, (size_t) b64_len);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "59: }",
          "61: int b64_decode(const char *in, void **ptr, size_t *len) {",
          "68:   if (in == NULL || ptr == NULL || len == NULL || strlen(in) > INT_MAX)",
          "69:     return (0);",
          "",
          "[Removed Lines]",
          "62:   BIO    *bio_mem = NULL;",
          "63:   BIO    *bio_b64 = NULL;",
          "64:   size_t  alloc_len;",
          "65:   int     n;",
          "66:   int     ok = 0;",
          "",
          "[Added Lines]",
          "62:   BIO *bio_mem = NULL;",
          "63:   BIO *bio_b64 = NULL;",
          "64:   size_t alloc_len;",
          "65:   int n;",
          "66:   int ok = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "75:   if (bio_b64 == NULL)",
          "76:     goto fail;",
          "79:   if (bio_mem == NULL)",
          "80:     goto fail;",
          "",
          "[Removed Lines]",
          "78:   bio_mem = BIO_new_mem_buf((void *)in, -1);",
          "",
          "[Added Lines]",
          "78:   bio_mem = BIO_new_mem_buf((void *) in, -1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "87:   if (*ptr == NULL)",
          "88:     goto fail;",
          "91:   if (n < 0 || BIO_eof(bio_b64) == 0)",
          "92:     goto fail;",
          "95:   ok = 1;",
          "97: fail:",
          "",
          "[Removed Lines]",
          "90:   n = BIO_read(bio_b64, *ptr, (int)alloc_len);",
          "",
          "[Added Lines]",
          "90:   n = BIO_read(bio_b64, *ptr, (int) alloc_len);",
          "",
          "---------------"
        ],
        "drop_privs.c||drop_privs.c": [
          "File: drop_privs.c -> drop_privs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: #include <security/pam_modules.h>",
          "50: #endif",
          "78:     }",
          "96: free_out:",
          "98: }",
          "100: int pam_modutil_regain_priv(pam_handle_t *pamh, struct _ykpam_privs *privs) {",
          "122: }",
          "124: #else",
          "127: typedef int make_iso_compilers_happy;",
          "129: #endif // HAVE_PAM_MODUTIL_DROP_PRIV",
          "",
          "[Removed Lines]",
          "53: int pam_modutil_drop_priv(pam_handle_t *pamh, struct _ykpam_privs *privs, struct passwd *pw) {",
          "54:     privs->saved_euid = geteuid();",
          "55:     privs->saved_egid = getegid();",
          "57:     if ((privs->saved_euid == pw->pw_uid) && (privs->saved_egid == pw->pw_gid)) {",
          "58:         D (privs->debug_file, \"Privilges already dropped, pretend it is all right\");",
          "59:         return 0;",
          "60:     }",
          "62:     privs->saved_groups_length = getgroups(0, NULL);",
          "63:     if (privs->saved_groups_length < 0) {",
          "64:         D (privs->debug_file, \"getgroups: %s\", strerror(errno));",
          "65:         return -1;",
          "66:     }",
          "68:     if (privs->saved_groups_length > SAVED_GROUPS_MAX_LEN) {",
          "69:         D (privs->debug_file, \"too many groups, limiting.\");",
          "70:         privs->saved_groups_length = SAVED_GROUPS_MAX_LEN;",
          "71:     }",
          "73:     if (privs->saved_groups_length > 0) {",
          "74:         if (getgroups(privs->saved_groups_length, privs->saved_groups) < 0) {",
          "75:             D (privs->debug_file, \"getgroups: %s\", strerror(errno));",
          "76:             goto free_out;",
          "77:         }",
          "80:     if (initgroups(pw->pw_name, pw->pw_gid) < 0) {",
          "81:         D (privs->debug_file, \"initgroups: %s\", strerror(errno));",
          "82:         goto free_out;",
          "83:     }",
          "85:     if (setegid(pw->pw_gid) < 0) {",
          "86:         D (privs->debug_file, \"setegid: %s\", strerror(errno));",
          "87:         goto free_out;",
          "88:     }",
          "90:     if (seteuid(pw->pw_uid) < 0) {",
          "91:         D (privs->debug_file, \"seteuid: %s\", strerror(errno));",
          "92:         goto free_out;",
          "93:     }",
          "95:     return 0;",
          "97:     return -1;",
          "101:     if ((privs->saved_euid == geteuid()) && (privs->saved_egid == getegid())) {",
          "102:         D (privs->debug_file, \"Privilges already as requested, pretend it is all right\");",
          "103:         return 0;",
          "104:     }",
          "106:     if (seteuid(privs->saved_euid) < 0) {",
          "107:         D (privs->debug_file, \"seteuid: %s\", strerror(errno));",
          "108:         return -1;",
          "109:     }",
          "111:     if (setegid(privs->saved_egid) < 0) {",
          "112:         D (privs->debug_file, \"setegid: %s\", strerror(errno));",
          "113:         return -1;",
          "114:     }",
          "116:     if (setgroups(privs->saved_groups_length, privs->saved_groups) < 0) {",
          "117:         D (privs->debug_file, \"setgroups: %s\", strerror(errno));",
          "118:         return -1;",
          "119:     }",
          "121:     return 0;",
          "",
          "[Added Lines]",
          "52: int pam_modutil_drop_priv(pam_handle_t *pamh, struct _ykpam_privs *privs,",
          "53:                           struct passwd *pw) {",
          "54:   privs->saved_euid = geteuid();",
          "55:   privs->saved_egid = getegid();",
          "57:   if ((privs->saved_euid == pw->pw_uid) && (privs->saved_egid == pw->pw_gid)) {",
          "58:     D(privs->debug_file, \"Privilges already dropped, pretend it is all right\");",
          "59:     return 0;",
          "60:   }",
          "62:   privs->saved_groups_length = getgroups(0, NULL);",
          "63:   if (privs->saved_groups_length < 0) {",
          "64:     D(privs->debug_file, \"getgroups: %s\", strerror(errno));",
          "65:     return -1;",
          "66:   }",
          "68:   if (privs->saved_groups_length > SAVED_GROUPS_MAX_LEN) {",
          "69:     D(privs->debug_file, \"too many groups, limiting.\");",
          "70:     privs->saved_groups_length = SAVED_GROUPS_MAX_LEN;",
          "71:   }",
          "73:   if (privs->saved_groups_length > 0) {",
          "74:     if (getgroups(privs->saved_groups_length, privs->saved_groups) < 0) {",
          "75:       D(privs->debug_file, \"getgroups: %s\", strerror(errno));",
          "76:       goto free_out;",
          "78:   }",
          "80:   if (initgroups(pw->pw_name, pw->pw_gid) < 0) {",
          "81:     D(privs->debug_file, \"initgroups: %s\", strerror(errno));",
          "82:     goto free_out;",
          "83:   }",
          "85:   if (setegid(pw->pw_gid) < 0) {",
          "86:     D(privs->debug_file, \"setegid: %s\", strerror(errno));",
          "87:     goto free_out;",
          "88:   }",
          "90:   if (seteuid(pw->pw_uid) < 0) {",
          "91:     D(privs->debug_file, \"seteuid: %s\", strerror(errno));",
          "92:     goto free_out;",
          "93:   }",
          "95:   return 0;",
          "97:   return -1;",
          "101:   if ((privs->saved_euid == geteuid()) && (privs->saved_egid == getegid())) {",
          "102:     D(privs->debug_file,",
          "103:       \"Privilges already as requested, pretend it is all right\");",
          "104:     return 0;",
          "105:   }",
          "107:   if (seteuid(privs->saved_euid) < 0) {",
          "108:     D(privs->debug_file, \"seteuid: %s\", strerror(errno));",
          "109:     return -1;",
          "110:   }",
          "112:   if (setegid(privs->saved_egid) < 0) {",
          "113:     D(privs->debug_file, \"setegid: %s\", strerror(errno));",
          "114:     return -1;",
          "115:   }",
          "117:   if (setgroups(privs->saved_groups_length, privs->saved_groups) < 0) {",
          "118:     D(privs->debug_file, \"setgroups: %s\", strerror(errno));",
          "119:     return -1;",
          "120:   }",
          "122:   return 0;",
          "",
          "---------------"
        ],
        "drop_privs.h||drop_privs.h": [
          "File: drop_privs.h -> drop_privs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:   FILE *debug_file;",
          "54: };",
          "61: int pam_modutil_regain_priv(pam_handle_t *, struct _ykpam_privs *);",
          "63: #endif",
          "",
          "[Removed Lines]",
          "56: #define PAM_MODUTIL_DEF_PRIVS(n) \\",
          "57:   gid_t n##_saved_groups[SAVED_GROUPS_MAX_LEN]; \\",
          "58:   struct _ykpam_privs n = {-1, -1, n##_saved_groups, SAVED_GROUPS_MAX_LEN, cfg->debug_file}",
          "60: int pam_modutil_drop_priv(pam_handle_t *, struct _ykpam_privs *, struct passwd *);",
          "",
          "[Added Lines]",
          "56: #define PAM_MODUTIL_DEF_PRIVS(n)                                               \\",
          "57:   gid_t n##_saved_groups[SAVED_GROUPS_MAX_LEN];                                \\",
          "58:   struct _ykpam_privs n = {-1, -1, n##_saved_groups, SAVED_GROUPS_MAX_LEN,     \\",
          "59:                            cfg->debug_file}",
          "61: int pam_modutil_drop_priv(pam_handle_t *, struct _ykpam_privs *,",
          "62:                           struct passwd *);",
          "",
          "---------------"
        ],
        "explicit_bzero.c||explicit_bzero.c": [
          "File: explicit_bzero.c -> explicit_bzero.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #ifdef HAVE_MEMSET_S",
          "26: }",
          "",
          "[Removed Lines]",
          "20: void",
          "21: explicit_bzero(void *p, size_t n)",
          "22: {",
          "23:  if (n == 0)",
          "24:   return;",
          "25:  (void)memset_s(p, n, 0, n);",
          "",
          "[Added Lines]",
          "20: void explicit_bzero(void *p, size_t n) {",
          "21:   if (n == 0)",
          "22:     return;",
          "23:   (void) memset_s(p, n, 0, n);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46: #if defined(__has_feature)",
          "50: #endif",
          "53: }",
          "",
          "[Removed Lines]",
          "34: static void (* volatile ssh_bzero)(void *, size_t) = bzero;",
          "36: void",
          "37: explicit_bzero(void *p, size_t n)",
          "38: {",
          "39:  if (n == 0)",
          "40:   return;",
          "47: # if __has_feature(memory_sanitizer)",
          "48:  memset(p, 0, n);",
          "49: # endif",
          "52:  ssh_bzero(p, n);",
          "",
          "[Added Lines]",
          "32: static void (*volatile ssh_bzero)(void *, size_t) = bzero;",
          "34: void explicit_bzero(void *p, size_t n) {",
          "35:   if (n == 0)",
          "36:     return;",
          "43: #if __has_feature(memory_sanitizer)",
          "44:   memset(p, 0, n);",
          "45: #endif",
          "48:   ssh_bzero(p, n);",
          "",
          "---------------"
        ],
        "pam-u2f.c||pam-u2f.c": [
          "File: pam-u2f.c -> pam-u2f.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #ifndef HAVE_SECURE_GETENV",
          "27: char *secure_getenv(const char *);",
          "28: char *secure_getenv(const char *name) {",
          "30:   return NULL;",
          "31: }",
          "32: #endif",
          "",
          "[Removed Lines]",
          "29:   (void)name;",
          "",
          "[Added Lines]",
          "29:   (void) name;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:       cfg->prompt = argv[i] + 7;",
          "78:     if (strncmp(argv[i], \"cue_prompt=\", 11) == 0)",
          "79:       cfg->cue_prompt = argv[i] + 11;",
          "81:       const char *filename = argv[i] + 11;",
          "83:         cfg->debug_file = stdout;",
          "86:         cfg->debug_file = stderr;",
          "93:         if (fd >= 0 && (fstat(fd, &st) == 0) && S_ISREG(st.st_mode)) {",
          "94:           file = fdopen(fd, \"a\");",
          "96:             cfg->debug_file = file;",
          "97:             cfg->is_custom_debug_file = 1;",
          "98:             file = NULL;",
          "",
          "[Removed Lines]",
          "80:     if (strncmp (argv[i], \"debug_file=\", 11) == 0) {",
          "82:       if(strncmp (filename, \"stdout\", 6) == 0) {",
          "84:       }",
          "85:       else if(strncmp (filename, \"stderr\", 6) == 0) {",
          "87:       }",
          "88:       else if( strncmp (filename, \"syslog\", 6) == 0) {",
          "89:         cfg->debug_file = (FILE *)-1;",
          "90:       }",
          "91:       else {",
          "92:         fd = open(filename, O_WRONLY | O_APPEND | O_CLOEXEC | O_NOFOLLOW | O_NOCTTY);",
          "95:           if(file != NULL) {",
          "",
          "[Added Lines]",
          "80:     if (strncmp(argv[i], \"debug_file=\", 11) == 0) {",
          "82:       if (strncmp(filename, \"stdout\", 6) == 0) {",
          "84:       } else if (strncmp(filename, \"stderr\", 6) == 0) {",
          "86:       } else if (strncmp(filename, \"syslog\", 6) == 0) {",
          "87:         cfg->debug_file = (FILE *) -1;",
          "88:       } else {",
          "89:         fd = open(filename,",
          "90:                   O_WRONLY | O_APPEND | O_CLOEXEC | O_NOFOLLOW | O_NOCTTY);",
          "93:           if (file != NULL) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "121:     D(cfg->debug_file, \"nouserok=%d\", cfg->nouserok);",
          "122:     D(cfg->debug_file, \"openasuser=%d\", cfg->openasuser);",
          "123:     D(cfg->debug_file, \"alwaysok=%d\", cfg->alwaysok);",
          "126:     D(cfg->debug_file, \"origin=%s\", cfg->origin ? cfg->origin : \"(null)\");",
          "127:     D(cfg->debug_file, \"appid=%s\", cfg->appid ? cfg->appid : \"(null)\");",
          "128:     D(cfg->debug_file, \"prompt=%s\", cfg->prompt ? cfg->prompt : \"(null)\");",
          "",
          "[Removed Lines]",
          "124:     D(cfg->debug_file, \"authfile=%s\", cfg->auth_file ? cfg->auth_file : \"(null)\");",
          "125:     D(cfg->debug_file, \"authpending_file=%s\", cfg->authpending_file ? cfg->authpending_file : \"(null)\");",
          "",
          "[Added Lines]",
          "122:     D(cfg->debug_file, \"authfile=%s\",",
          "123:       cfg->auth_file ? cfg->auth_file : \"(null)\");",
          "124:     D(cfg->debug_file, \"authpending_file=%s\",",
          "125:       cfg->authpending_file ? cfg->authpending_file : \"(null)\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "138: #ifdef DBG",
          "139: #undef DBG",
          "140: #endif",
          "142:   if (cfg->debug) {                                                            \\",
          "144:   }",
          "",
          "[Removed Lines]",
          "141: #define DBG(...)                                                                 \\",
          "143:     D(cfg->debug_file, __VA_ARGS__);                                                           \\",
          "",
          "[Added Lines]",
          "141: #define DBG(...)                                                               \\",
          "143:     D(cfg->debug_file, __VA_ARGS__);                                           \\",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "190:   if (!cfg->appid) {",
          "191:     DBG(\"Appid not specified, using the same value of origin (%s)\",",
          "193:     cfg->appid = strdup(cfg->origin);",
          "194:     if (!cfg->appid) {",
          "195:       DBG(\"Unable to allocate memory\")",
          "",
          "[Removed Lines]",
          "192:          cfg->origin);",
          "",
          "[Added Lines]",
          "192:         cfg->origin);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "224:   if (gpn_ret != 0 || pw == NULL || pw->pw_dir == NULL ||",
          "225:       pw->pw_dir[0] != '/') {",
          "226:     DBG(\"Unable to retrieve credentials for user %s, (%s)\", user,",
          "228:     retval = PAM_USER_UNKNOWN;",
          "229:     goto done;",
          "230:   }",
          "",
          "[Removed Lines]",
          "227:          strerror(errno));",
          "",
          "[Added Lines]",
          "227:         strerror(errno));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "237:     authfile_dir = secure_getenv(DEFAULT_AUTHFILE_DIR_VAR);",
          "238:     if (!authfile_dir) {",
          "239:       DBG(\"Variable %s is not set. Using default value ($HOME/.config/)\",",
          "241:       authfile_dir_len =",
          "242:         strlen(pw->pw_dir) + strlen(\"/.config\") + strlen(DEFAULT_AUTHFILE) + 1;",
          "243:       buf = malloc(sizeof(char) * (authfile_dir_len));",
          "",
          "[Removed Lines]",
          "240:            DEFAULT_AUTHFILE_DIR_VAR);",
          "",
          "[Added Lines]",
          "240:           DEFAULT_AUTHFILE_DIR_VAR);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "252:       openasuser = geteuid() == 0 ? 1 : 0;",
          "256:     } else {",
          "257:       DBG(\"Variable %s set to %s\", DEFAULT_AUTHFILE_DIR_VAR, authfile_dir);",
          "258:       authfile_dir_len = strlen(authfile_dir) + strlen(DEFAULT_AUTHFILE) + 1;",
          "",
          "[Removed Lines]",
          "254:       snprintf(buf, authfile_dir_len,",
          "255:                \"%s/.config%s\", pw->pw_dir, DEFAULT_AUTHFILE);",
          "",
          "[Added Lines]",
          "254:       snprintf(buf, authfile_dir_len, \"%s/.config%s\", pw->pw_dir,",
          "255:                DEFAULT_AUTHFILE);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "264:         goto done;",
          "265:       }",
          "270:       if (!cfg->openasuser) {",
          "273:       }",
          "274:     }",
          "",
          "[Removed Lines]",
          "267:       snprintf(buf, authfile_dir_len,",
          "268:                \"%s%s\", authfile_dir, DEFAULT_AUTHFILE);",
          "271:  DBG(\"WARNING: not dropping privileges when reading %s, please \"",
          "272:      \"consider setting openasuser=1 in the module configuration\", buf);",
          "",
          "[Added Lines]",
          "267:       snprintf(buf, authfile_dir_len, \"%s%s\", authfile_dir, DEFAULT_AUTHFILE);",
          "270:         DBG(\"WARNING: not dropping privileges when reading %s, please \"",
          "271:             \"consider setting openasuser=1 in the module configuration\",",
          "272:             buf);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "294:     }",
          "295:     DBG(\"Switched to uid %i\", pw->pw_uid);",
          "296:   }",
          "300:   if (openasuser) {",
          "301:     if (pam_modutil_regain_priv(pamh, &privs)) {",
          "302:       DBG(\"could not restore privileges\");",
          "",
          "[Removed Lines]",
          "297:   retval = get_devices_from_authfile(cfg->auth_file, user, cfg->max_devs,",
          "298:                                      cfg->debug, cfg->debug_file,",
          "299:                                      devices, &n_devices);",
          "",
          "[Added Lines]",
          "297:   retval =",
          "298:     get_devices_from_authfile(cfg->auth_file, user, cfg->max_devs, cfg->debug,",
          "299:                               cfg->debug_file, devices, &n_devices);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "328:     }",
          "329:   }",
          "332:   if (!cfg->authpending_file) {",
          "334:     if (actual_size >= 0 && actual_size < BUFSIZE) {",
          "335:       cfg->authpending_file = strdup(buffer);",
          "336:     }",
          "337:     if (!cfg->authpending_file) {",
          "339:     } else {",
          "340:       should_free_authpending_file = 1;",
          "341:     }",
          "342:   } else {",
          "343:     if (strlen(cfg->authpending_file) == 0) {",
          "345:       cfg->authpending_file = NULL;",
          "346:     }",
          "347:   }",
          "349:   int authpending_file_descriptor = -1;",
          "350:   if (cfg->authpending_file) {",
          "354:     authpending_file_descriptor =",
          "356:     if (authpending_file_descriptor < 0) {",
          "358:           cfg->authpending_file, strerror(errno));",
          "359:     }",
          "360:   }",
          "",
          "[Removed Lines]",
          "333:     int actual_size = snprintf(buffer, BUFSIZE, DEFAULT_AUTHPENDING_FILE_PATH, getuid());",
          "338:       DBG(\"Unable to allocate memory for the authpending_file, touch request notifications will not be emitted\");",
          "344:       DBG(\"authpending_file is set to an empty value, touch request notifications will be disabled\");",
          "351:     DBG(\"Using file '%s' for emitting touch request notifications\", cfg->authpending_file);",
          "355:       open(cfg->authpending_file, O_RDONLY | O_CREAT | O_CLOEXEC | O_NOFOLLOW | O_NOCTTY, 0664);",
          "357:       DBG(\"Unable to emit 'authentication started' notification by opening the file '%s', (%s)\",",
          "",
          "[Added Lines]",
          "334:     int actual_size =",
          "335:       snprintf(buffer, BUFSIZE, DEFAULT_AUTHPENDING_FILE_PATH, getuid());",
          "340:       DBG(\"Unable to allocate memory for the authpending_file, touch request \"",
          "341:           \"notifications will not be emitted\");",
          "347:       DBG(\"authpending_file is set to an empty value, touch request \"",
          "348:           \"notifications will be disabled\");",
          "355:     DBG(\"Using file '%s' for emitting touch request notifications\",",
          "356:         cfg->authpending_file);",
          "361:       open(cfg->authpending_file,",
          "362:            O_RDONLY | O_CREAT | O_CLOEXEC | O_NOFOLLOW | O_NOCTTY, 0664);",
          "364:       DBG(\"Unable to emit 'authentication started' notification by opening the \"",
          "365:           \"file '%s', (%s)\",",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "374:   if (authpending_file_descriptor >= 0) {",
          "375:     if (close(authpending_file_descriptor) < 0) {",
          "377:           cfg->authpending_file, strerror(errno));",
          "378:     }",
          "379:   }",
          "",
          "[Removed Lines]",
          "376:       DBG(\"Unable to emit 'authentication stopped' notification by closing the file '%s', (%s)\",",
          "",
          "[Added Lines]",
          "384:       DBG(\"Unable to emit 'authentication stopped' notification by closing the \"",
          "385:           \"file '%s', (%s)\",",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "430: PAM_EXTERN int pam_sm_setcred(pam_handle_t *pamh, int flags, int argc,",
          "431:                               const char **argv) {",
          "437:   return PAM_SUCCESS;",
          "438: }",
          "",
          "[Removed Lines]",
          "432:   (void)pamh;",
          "433:   (void)flags;",
          "434:   (void)argc;",
          "435:   (void)argv;",
          "",
          "[Added Lines]",
          "441:   (void) pamh;",
          "442:   (void) flags;",
          "443:   (void) argc;",
          "444:   (void) argv;",
          "",
          "---------------"
        ],
        "pamu2fcfg/pamu2fcfg.c||pamu2fcfg/pamu2fcfg.c": [
          "File: pamu2fcfg/pamu2fcfg.c -> pamu2fcfg/pamu2fcfg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "214:   if (ndevs == 0) {",
          "215:     for (i = 0; i < TIMEOUT; i += FREQUENCY) {",
          "218:               TIMEOUT - i);",
          "219:       fflush(stderr);",
          "220:       sleep(FREQUENCY);",
          "",
          "[Removed Lines]",
          "216:       fprintf(stderr, \"\\rNo U2F device available, please insert one now, you \"",
          "217:                       \"have %2d seconds\",",
          "",
          "[Added Lines]",
          "216:       fprintf(stderr,",
          "217:               \"\\rNo U2F device available, please insert one now, you \"",
          "218:               \"have %2d seconds\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "261:   r = fido_dev_make_cred(dev, cred, NULL);",
          "262:   if (r == FIDO_ERR_PIN_REQUIRED) {",
          "266:       fprintf(stderr, \"error: snprintf prompt\");",
          "267:       exit(EXIT_FAILURE);",
          "268:     }",
          "",
          "[Removed Lines]",
          "263:     n = snprintf(prompt, sizeof(prompt), \"Enter PIN for %s: \",",
          "264:                  fido_dev_info_path(di));",
          "265:     if (n < 0 || (size_t)n >= sizeof(prompt)) {",
          "",
          "[Added Lines]",
          "264:     n = snprintf(prompt, sizeof(prompt),",
          "265:                  \"Enter PIN for %s: \", fido_dev_info_path(di));",
          "266:     if (n < 0 || (size_t) n >= sizeof(prompt)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "297:     exit(EXIT_FAILURE);",
          "298:   }",
          "301:   if (!pk) {",
          "302:     fprintf(stderr, \"error: fido_cred_pubkey_ptr returned NULL\\n\");",
          "303:     exit(EXIT_FAILURE);",
          "",
          "[Removed Lines]",
          "300:   pk = (const unsigned char *)fido_cred_pubkey_ptr(cred);",
          "",
          "[Added Lines]",
          "301:   pk = (const unsigned char *) fido_cred_pubkey_ptr(cred);",
          "",
          "---------------"
        ],
        "util.c||util.c": [
          "File: util.c -> util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:       return (0);",
          "48:     }",
          "50:     ascii_hex += n;",
          "51:   }",
          "53:   return (1);",
          "54: }",
          "58:   char *b64;",
          "59:   char *p;",
          "60:   size_t n;",
          "",
          "[Removed Lines]",
          "49:     (*blob)[i] = (unsigned char)c;",
          "56: static char *normal_b64(const char *websafe_b64)",
          "57: {",
          "",
          "[Added Lines]",
          "49:     (*blob)[i] = (unsigned char) c;",
          "56: static char *normal_b64(const char *websafe_b64) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:   while ((p = strpbrk(p, \"-_\")) != NULL) {",
          "74:     switch (*p) {",
          "81:     }",
          "84:   switch (n % 4) {",
          "93:   }",
          "95:   return (b64);",
          "96: }",
          "98: static es256_pk_t *translate_old_format_pubkey(const unsigned char *pk,",
          "101:   es256_pk_t *es256_pk = NULL;",
          "102:   EC_KEY *ec = NULL;",
          "103:   EC_POINT *q = NULL;",
          "",
          "[Removed Lines]",
          "75:     case '-':",
          "77:       break;",
          "78:     case '_':",
          "80:       break;",
          "82:  }",
          "85:   case 1:",
          "86:     b64[n] = '=';",
          "87:     break;",
          "88:   case 2:",
          "89:   case 3:",
          "90:     b64[n] = '=';",
          "91:     b64[n + 1] = '=';",
          "92:     break;",
          "99:                                                size_t pk_len)",
          "100: {",
          "",
          "[Added Lines]",
          "74:       case '-':",
          "76:         break;",
          "77:       case '_':",
          "79:         break;",
          "81:   }",
          "84:     case 1:",
          "85:       b64[n] = '=';",
          "86:       break;",
          "87:     case 2:",
          "88:     case 3:",
          "89:       b64[n] = '=';",
          "90:       b64[n + 1] = '=';",
          "91:       break;",
          "98:                                                size_t pk_len) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "175:   gpu_ret = getpwuid_r(st.st_uid, &pw_s, buffer, sizeof(buffer), &pw);",
          "176:   if (gpu_ret != 0 || pw == NULL) {",
          "177:     D(debug_file, \"Unable to retrieve credentials for uid %u, (%s)\", st.st_uid,",
          "179:     goto err;",
          "180:   }",
          "182:   if (strcmp(pw->pw_name, username) != 0 && strcmp(pw->pw_name, \"root\") != 0) {",
          "183:     if (strcmp(username, \"root\") != 0) {",
          "186:     } else {",
          "187:       D(debug_file, \"The owner of the authentication file is not root\");",
          "188:     }",
          "",
          "[Removed Lines]",
          "178:        strerror(errno));",
          "184:       D(debug_file, \"The owner of the authentication file is neither %s nor root\",",
          "185:          username);",
          "",
          "[Added Lines]",
          "176:       strerror(errno));",
          "182:       D(debug_file,",
          "183:         \"The owner of the authentication file is neither %s nor root\",",
          "184:         username);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "206:   }",
          "208:   retval = -2;",
          "210:     char *saveptr = NULL;",
          "211:     size_t len = strlen(buf);",
          "212:     if (len > 0 && buf[len - 1] == '\\n')",
          "",
          "[Removed Lines]",
          "209:   while (fgets(buf, (int)(DEVSIZE * (max_devs - 1)), opwfile)) {",
          "",
          "[Added Lines]",
          "208:   while (fgets(buf, (int) (DEVSIZE * (max_devs - 1)), opwfile)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "241:         if ((*n_devs)++ > max_devs - 1) {",
          "243:           if (verbose)",
          "246:           break;",
          "247:         }",
          "",
          "[Removed Lines]",
          "244:             D(debug_file, \"Found more than %d devices, ignoring the remaining ones\",",
          "245:                max_devs);",
          "",
          "[Added Lines]",
          "243:             D(debug_file,",
          "244:               \"Found more than %d devices, ignoring the remaining ones\",",
          "245:               max_devs);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "260:         if (!devices[i].keyHandle) {",
          "261:           if (verbose)",
          "263:           goto err;",
          "264:         }",
          "",
          "[Removed Lines]",
          "262:             D(debug_file, \"Unable to allocate memory for keyHandle number %d\", i);",
          "",
          "[Added Lines]",
          "262:             D(debug_file, \"Unable to allocate memory for keyHandle number %d\",",
          "263:               i);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "282:         if (!devices[i].publicKey) {",
          "283:           if (verbose)",
          "285:           goto err;",
          "286:         }",
          "",
          "[Removed Lines]",
          "284:             D(debug_file, \"Unable to allocate memory for publicKey number %d\", i);",
          "",
          "[Added Lines]",
          "285:             D(debug_file, \"Unable to allocate memory for publicKey number %d\",",
          "286:               i);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "305:         if (!devices[i].coseType) {",
          "306:           if (verbose)",
          "308:           goto err;",
          "309:         }",
          "",
          "[Removed Lines]",
          "307:             D(debug_file, \"Unable to allocate memory for COSE type number %d\", i);",
          "",
          "[Added Lines]",
          "309:             D(debug_file, \"Unable to allocate memory for COSE type number %d\",",
          "310:               i);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "318:           devices[i].attributes = strdup(\"p\");",
          "319:         } else {",
          "320:           if (verbose)",
          "322:           devices[i].attributes = strdup(s_token);",
          "323:         }",
          "325:         if (!devices[i].attributes) {",
          "326:           if (verbose)",
          "328:           goto err;",
          "329:         }",
          "",
          "[Removed Lines]",
          "321:             D(debug_file, \"Attributes for device number %d: %s\", i + 1, s_token);",
          "327:             D(debug_file, \"Unable to allocate memory for attributes number %d\", i);",
          "",
          "[Added Lines]",
          "324:             D(debug_file, \"Attributes for device number %d: %s\", i + 1,",
          "325:               s_token);",
          "331:             D(debug_file, \"Unable to allocate memory for attributes number %d\",",
          "332:               i);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "334:           free(websafe_b64);",
          "335:           if (!devices[i].keyHandle) {",
          "336:             if (verbose)",
          "338:             goto err;",
          "339:           }",
          "340:         }",
          "",
          "[Removed Lines]",
          "337:               D(debug_file, \"Unable to allocate memory for keyHandle number %d\", i);",
          "",
          "[Added Lines]",
          "342:               D(debug_file, \"Unable to allocate memory for keyHandle number %d\",",
          "343:                 i);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "451:     } else {",
          "452:       r = fido_dev_get_assert(dev, assert, NULL);",
          "453:       if ((!fido_dev_is_fido2(dev) && r == FIDO_ERR_USER_PRESENCE_REQUIRED) ||",
          "455:         authlist[j++] = dev;",
          "456:         if (cfg->debug)",
          "457:           D(cfg->debug_file, \"Found key in authenticator %zu\", i);",
          "",
          "[Removed Lines]",
          "454:            (fido_dev_is_fido2(dev) && r == FIDO_OK)) {",
          "",
          "[Added Lines]",
          "460:           (fido_dev_is_fido2(dev) && r == FIDO_OK)) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "504:   if (!devlist) {",
          "505:     if (cfg->debug)",
          "506:       D(cfg->debug_file, \"Unable to allocate devlist\");",
          "508:   }",
          "510:   r = fido_dev_info_manifest(devlist, 64, &ndevs);",
          "",
          "[Removed Lines]",
          "507:    goto out;",
          "",
          "[Added Lines]",
          "513:     goto out;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "542:   }",
          "544:   if (cfg->nodetect && cfg->debug)",
          "547:   i = 0;",
          "548:   while (i < n_devs) {",
          "549:     retval = -2;",
          "551:     if (cfg->debug)",
          "554:     assert = fido_assert_new();",
          "555:     if (!assert) {",
          "",
          "[Removed Lines]",
          "545:     D(cfg->debug_file, \"nodetect option specified, suitable key detection will be skipped\");",
          "552:       D(cfg->debug_file, \"Attempting authentication with device number %d\", i + 1);",
          "",
          "[Added Lines]",
          "551:     D(cfg->debug_file,",
          "552:       \"nodetect option specified, suitable key detection will be skipped\");",
          "559:       D(cfg->debug_file, \"Attempting authentication with device number %d\",",
          "560:         i + 1);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "571:     } else {",
          "572:       if (cfg->debug)",
          "573:         D(cfg->debug_file, \"Key handle: %s\", devices[i].keyHandle);",
          "575:         if (cfg->debug)",
          "576:           D(cfg->debug_file, \"Failed to decode key handle\");",
          "577:         goto out;",
          "",
          "[Removed Lines]",
          "574:       if (!b64_decode(devices[i].keyHandle, (void **)&kh, &kh_len)) {",
          "",
          "[Added Lines]",
          "582:       if (!b64_decode(devices[i].keyHandle, (void **) &kh, &kh_len)) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "580:       r = fido_assert_allow_cred(assert, kh, kh_len);",
          "581:       if (r != FIDO_OK) {",
          "582:         if (cfg->debug)",
          "584:         goto out;",
          "585:       }",
          "586:     }",
          "",
          "[Removed Lines]",
          "583:           D(cfg->debug_file, \"Unable to set keyHandle: %s (%d)\", fido_strerr(r), r);",
          "",
          "[Added Lines]",
          "591:           D(cfg->debug_file, \"Unable to set keyHandle: %s (%d)\", fido_strerr(r),",
          "592:             r);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "592:         goto out;",
          "593:       }",
          "594:     } else {",
          "596:         if (cfg->debug)",
          "597:           D(cfg->debug_file, \"Failed to decode public key\");",
          "598:         goto out;",
          "",
          "[Removed Lines]",
          "595:       if (!b64_decode(devices[i].publicKey, (void **)&pk, &pk_len)) {",
          "",
          "[Added Lines]",
          "604:       if (!b64_decode(devices[i].publicKey, (void **) &pk, &pk_len)) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "689:           goto out;",
          "690:         }",
          "693:         if (r != FIDO_OK) {",
          "694:           if (cfg->debug)",
          "695:             D(cfg->debug_file, \"Unable to reset challenge: %s( %d)\",",
          "",
          "[Removed Lines]",
          "692:         r = fido_assert_set_clientdata_hash(assert, challenge, sizeof(challenge));",
          "",
          "[Added Lines]",
          "701:         r =",
          "702:           fido_assert_set_clientdata_hash(assert, challenge, sizeof(challenge));",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "698:         }",
          "700:         if (pin_verification)",
          "703:         if (user_presence || user_verification) {",
          "710:         }",
          "711:         r = fido_dev_get_assert(authlist[j], assert, pin);",
          "712:         if (pin) {",
          "",
          "[Removed Lines]",
          "701:               pin = converse(pamh, PAM_PROMPT_ECHO_OFF,",
          "702:                              \"Please enter the PIN: \");",
          "704:             if (cfg->manual == 0 && cfg->cue && !cued) {",
          "705:               cued = 1;",
          "706:               converse(pamh, PAM_TEXT_INFO,",
          "707:                        cfg->cue_prompt != NULL ? cfg->cue_prompt : DEFAULT_CUE);",
          "709:             }",
          "",
          "[Added Lines]",
          "711:           pin = converse(pamh, PAM_PROMPT_ECHO_OFF, \"Please enter the PIN: \");",
          "713:           if (cfg->manual == 0 && cfg->cue && !cued) {",
          "714:             cued = 1;",
          "715:             converse(pamh, PAM_TEXT_INFO,",
          "716:                      cfg->cue_prompt != NULL ? cfg->cue_prompt : DEFAULT_CUE);",
          "717:           }",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "715:           pin = NULL;",
          "716:         }",
          "717:         if (r == FIDO_OK) {",
          "720:           if (r == FIDO_OK) {",
          "721:             retval = 1;",
          "722:             goto out;",
          "",
          "[Removed Lines]",
          "718:           r = fido_assert_verify(assert, 0, cose_type, cose_type == COSE_ES256 ?",
          "719:                                 (const void *)es256_pk : (const void *)rs256_pk);",
          "",
          "[Added Lines]",
          "726:           r = fido_assert_verify(assert, 0, cose_type,",
          "727:                                  cose_type == COSE_ES256",
          "728:                                    ? (const void *) es256_pk",
          "729:                                    : (const void *) rs256_pk);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "750:     if (ndevs > ndevs_prev) {",
          "751:       if (cfg->debug)",
          "754:       ndevs_prev = ndevs;",
          "755:       i = 0;",
          "756:     }",
          "",
          "[Removed Lines]",
          "752:         D(cfg->debug_file, \"Devices max_index has changed: %zu (was %zu). Starting over\",",
          "753:           ndevs, ndevs_prev);",
          "",
          "[Added Lines]",
          "762:         D(cfg->debug_file,",
          "763:           \"Devices max_index has changed: %zu (was %zu). Starting over\", ndevs,",
          "764:           ndevs_prev);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "855:     }",
          "857:     if (cfg->debug)",
          "860:     if (!strcmp(devices[i].keyHandle, \"*\")) {",
          "861:       if (cfg->debug)",
          "862:         D(cfg->debug_file, \"Credential is resident\");",
          "863:     } else {",
          "865:         if (cfg->debug)",
          "866:           D(cfg->debug_file, \"Failed to decode key handle\");",
          "867:         goto out;",
          "",
          "[Removed Lines]",
          "858:       D(cfg->debug_file, \"Attempting authentication with device number %d\", i + 1);",
          "864:       if (!b64_decode(devices[i].keyHandle, (void **)&kh, &kh_len)) {",
          "",
          "[Added Lines]",
          "869:       D(cfg->debug_file, \"Attempting authentication with device number %d\",",
          "870:         i + 1);",
          "876:       if (!b64_decode(devices[i].keyHandle, (void **) &kh, &kh_len)) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "870:       r = fido_assert_allow_cred(assert[i], kh, kh_len);",
          "871:       if (r != FIDO_OK) {",
          "872:         if (cfg->debug)",
          "874:         goto out;",
          "875:       }",
          "",
          "[Removed Lines]",
          "873:           D(cfg->debug_file, \"Unable to set keyHandle: %s (%d)\", fido_strerr(r), r);",
          "",
          "[Added Lines]",
          "885:           D(cfg->debug_file, \"Unable to set keyHandle: %s (%d)\", fido_strerr(r),",
          "886:             r);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "885:         goto out;",
          "886:       }",
          "887:     } else {",
          "889:         if (cfg->debug)",
          "890:           D(cfg->debug_file, \"Failed to decode public key\");",
          "891:         goto out;",
          "",
          "[Removed Lines]",
          "888:       if (!b64_decode(devices[i].publicKey, (void **)&pk, &pk_len)) {",
          "",
          "[Added Lines]",
          "901:       if (!b64_decode(devices[i].publicKey, (void **) &pk, &pk_len)) {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "933:       goto out;",
          "934:     }",
          "937:     if (r != FIDO_OK) {",
          "938:       if (cfg->debug)",
          "939:         D(cfg->debug_file, \"Failed to set challenge\");",
          "",
          "[Removed Lines]",
          "936:     r = fido_assert_set_clientdata_hash(assert[i], challenge, sizeof(challenge));",
          "",
          "[Added Lines]",
          "949:     r =",
          "950:       fido_assert_set_clientdata_hash(assert[i], challenge, sizeof(challenge));",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "950:       D(cfg->debug_file, \"Challenge: %s\", b64_challenge);",
          "952:     n = snprintf(prompt, sizeof(prompt), \"Challenge #%d:\", i + 1);",
          "954:       if (cfg->debug)",
          "955:         D(cfg->debug_file, \"Failed to print challenge prompt\");",
          "956:       goto out;",
          "",
          "[Removed Lines]",
          "953:     if (n <= 0 || (size_t)n >= sizeof(prompt)) {",
          "",
          "[Added Lines]",
          "967:     if (n <= 0 || (size_t) n >= sizeof(prompt)) {",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "961:     n = snprintf(buf, sizeof(buf), \"%s\\n%s\\n%s\", b64_challenge, cfg->origin,",
          "962:                  devices[i].keyHandle);",
          "964:       if (cfg->debug)",
          "965:         D(cfg->debug_file, \"Failed to print fido2-assert input string\");",
          "966:       goto out;",
          "",
          "[Removed Lines]",
          "963:     if (n <= 0 || (size_t)n >= sizeof(buf)) {",
          "",
          "[Added Lines]",
          "977:     if (n <= 0 || (size_t) n >= sizeof(buf)) {",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "973:   }",
          "975:   converse(pamh, PAM_TEXT_INFO,",
          "979:   retval = -1;",
          "981:   for (i = 0; i < n_devs; ++i) {",
          "982:     n = snprintf(prompt, sizeof(prompt), \"Response #%d: \", i + 1);",
          "984:       if (cfg->debug)",
          "985:         D(cfg->debug_file, \"Failed to print response prompt\");",
          "986:       goto out;",
          "",
          "[Removed Lines]",
          "976:              \"Please pass the challenge(s) above to fido2-assert, and \"",
          "977:              \"paste the results in the prompt below.\");",
          "983:     if (n <= 0 || (size_t)n >= sizeof(prompt)) {",
          "",
          "[Added Lines]",
          "990:            \"Please pass the challenge(s) above to fido2-assert, and \"",
          "991:            \"paste the results in the prompt below.\");",
          "997:     if (n <= 0 || (size_t) n >= sizeof(prompt)) {",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "991:     b64_authdata = converse(pamh, PAM_PROMPT_ECHO_ON, prompt);",
          "992:     b64_sig = converse(pamh, PAM_PROMPT_ECHO_ON, prompt);",
          "995:       if (cfg->debug)",
          "996:         D(cfg->debug_file, \"Failed to decode authenticator data\");",
          "997:       goto out;",
          "998:     }",
          "1001:       if (cfg->debug)",
          "1002:         D(cfg->debug_file, \"Failed to decode signature\");",
          "1003:       goto out;",
          "",
          "[Removed Lines]",
          "994:     if (!b64_decode(b64_authdata, (void **)&authdata, &authdata_len)) {",
          "1000:     if (!b64_decode(b64_sig, (void **)&sig, &sig_len)) {",
          "",
          "[Added Lines]",
          "1008:     if (!b64_decode(b64_authdata, (void **) &authdata, &authdata_len)) {",
          "1014:     if (!b64_decode(b64_sig, (void **) &sig, &sig_len)) {",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1077:   struct pam_conv *conv;",
          "1078:   int retval;",
          "1082:   if (retval != PAM_SUCCESS) {",
          "1083:     return retval;",
          "",
          "[Removed Lines]",
          "1080:   retval = pam_get_item(pamh, PAM_CONV, (void *)&conv);",
          "",
          "[Added Lines]",
          "1094:   retval = pam_get_item(pamh, PAM_CONV, (void *) &conv);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1087: }",
          "1089: char *converse(pam_handle_t *pamh, int echocode, const char *prompt) {",
          "1091:   const struct pam_message *msgs = &msg;",
          "1092:   struct pam_response *resp = NULL;",
          "1093:   int retval = _converse(pamh, 1, &msgs, &resp);",
          "",
          "[Removed Lines]",
          "1090:   const struct pam_message msg = {.msg_style = echocode, .msg = (char *)prompt};",
          "",
          "[Added Lines]",
          "1104:   const struct pam_message msg = {.msg_style = echocode,",
          "1105:                                   .msg = (char *) prompt};",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1115: }",
          "1117: #if defined(PAM_DEBUG)",
          "1119:   va_list ap;",
          "1120:   va_start(ap, fmt);",
          "1121: #ifdef __linux__",
          "1123:     syslog(LOG_AUTHPRIV | LOG_DEBUG, DEBUG_STR, file, line, func);",
          "1124:     vsyslog(LOG_AUTHPRIV | LOG_DEBUG, fmt, ap);",
          "1127:     fprintf(debug_file, DEBUG_STR, file, line, func);",
          "1128:     vfprintf(debug_file, fmt, ap);",
          "1129:     fprintf(debug_file, \"\\n\");",
          "1130:   }",
          "1133:   vfprintf(debug_file, fmt, ap);",
          "1134:   fprintf(debug_file, \"\\n\");",
          "",
          "[Removed Lines]",
          "1118: void _debug(FILE *debug_file, const char *file, int line, const char *func, const char *fmt, ...) {",
          "1122:   if (debug_file == (FILE *)-1) {",
          "1125:   }",
          "1126:   else {",
          "1132:   fprintf(debug_file, DEBUG_STR, file, line, func );",
          "",
          "[Added Lines]",
          "1133: void _debug(FILE *debug_file, const char *file, int line, const char *func,",
          "1134:             const char *fmt, ...) {",
          "1138:   if (debug_file == (FILE *) -1) {",
          "1141:   } else {",
          "1147:   fprintf(debug_file, DEBUG_STR, file, line, func);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1152:   n = read(fd, buf, cnt);",
          "1153:   close(fd);",
          "1155:     return (0);",
          "1157:   return (1);",
          "",
          "[Removed Lines]",
          "1154:   if (n < 0 || (size_t)n != cnt)",
          "",
          "[Added Lines]",
          "1169:   if (n < 0 || (size_t) n != cnt)",
          "",
          "---------------"
        ],
        "util.h||util.h": [
          "File: util.h -> util.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #define DEBUG_STR \"debug(pam_u2f): %s:%d (%s): \"",
          "25: #if defined(DEBUG_PAM)",
          "27: #else",
          "28: #define D(file, ...)",
          "",
          "[Removed Lines]",
          "26: #define D(file, ...)  _debug(file, __FILE__, __LINE__, __func__, __VA_ARGS__)",
          "",
          "[Added Lines]",
          "26: #define D(file, ...) _debug(file, __FILE__, __LINE__, __func__, __VA_ARGS__)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73: void _debug(FILE *, const char *, int, const char *, const char *, ...);",
          "74: int random_bytes(void *, size_t);",
          "77: void explicit_bzero(void *, size_t);",
          "",
          "[Removed Lines]",
          "76: #if !defined(HAVE_EXPLICIT_BZERO)",
          "78: #endif",
          "",
          "[Added Lines]",
          "76: #if !defined(HAVE_EXPLICIT_BZERO)",
          "78: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}