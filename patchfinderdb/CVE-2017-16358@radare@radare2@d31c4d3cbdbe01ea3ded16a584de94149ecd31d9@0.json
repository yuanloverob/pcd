{
  "cve_id": "CVE-2017-16358",
  "cve_desc": "In radare 2.0.1, an out-of-bounds read vulnerability exists in string_scan_range() in libr/bin/bin.c when doing a string search.",
  "repo": "radare/radare2",
  "patch_hash": "d31c4d3cbdbe01ea3ded16a584de94149ecd31d9",
  "patch_info": {
    "commit_hash": "d31c4d3cbdbe01ea3ded16a584de94149ecd31d9",
    "repo": "radare/radare2",
    "commit_url": "https://github.com/radare/radare2/commit/d31c4d3cbdbe01ea3ded16a584de94149ecd31d9",
    "files": [
      "libr/bin/bin.c"
    ],
    "message": "Fix #8748 - Fix oobread on string search",
    "before_after_code_files": [
      "libr/bin/bin.c||libr/bin/bin.c"
    ]
  },
  "patch_diff": {
    "libr/bin/bin.c||libr/bin/bin.c": [
      "File: libr/bin/bin.c -> libr/bin/bin.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "353:     switch (str_type) {",
      "354:     case R_STRING_TYPE_WIDE:",
      "357:       if (p[0] == 0xff && p[1] == 0xfe) {",
      "358:        str_start -= 2; // \\xff\\xfe",
      "359:       }",
      "360:      }",
      "361:      break;",
      "362:     case R_STRING_TYPE_WIDE32:",
      "365:       if (p[0] == 0xff && p[1] == 0xfe) {",
      "366:        str_start -= 4; // \\xff\\xfe\\x00\\x00",
      "367:       }",
      "",
      "[Removed Lines]",
      "355:      {",
      "356:       const ut8 *p = buf  + str_start - 2;",
      "363:      {",
      "364:       const ut8 *p = buf  + str_start - 4;",
      "",
      "[Added Lines]",
      "355:      if (str_start > 1) {",
      "356:       const ut8 *p = buf + str_start - 2;",
      "363:      if (str_start > 3) {",
      "364:       const ut8 *p = buf + str_start - 4;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3c7ee36386cd11583d69716a01154c0ddc9ea2f5",
      "candidate_info": {
        "commit_hash": "3c7ee36386cd11583d69716a01154c0ddc9ea2f5",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/3c7ee36386cd11583d69716a01154c0ddc9ea2f5",
        "files": [
          "libr/bin/bin.c",
          "libr/core/cbin.c",
          "libr/core/cmd_info.c"
        ],
        "message": "izz/izzj works with -n without using rabin2 (#9561)",
        "before_after_code_files": [
          "libr/bin/bin.c||libr/bin/bin.c",
          "libr/core/cbin.c||libr/core/cbin.c",
          "libr/core/cmd_info.c||libr/core/cmd_info.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/bin.c||libr/bin/bin.c"
          ],
          "candidate": [
            "libr/bin/bin.c||libr/bin/bin.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/bin.c||libr/bin/bin.c": [
          "File: libr/bin/bin.c -> libr/bin/bin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "519:  RBinObject *o = a? a->o: NULL;",
          "520:  RList *ret;",
          "525:  if (dump) {",
          "527:   ret = NULL;",
          "",
          "[Removed Lines]",
          "522:  if (!o) {",
          "523:   return NULL;",
          "524:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "531:    return NULL;",
          "532:   }",
          "533:  }",
          "535:   r_list_foreach (o->sections, iter, section) {",
          "536:    if (is_data_section (a, section)) {",
          "537:     get_strings_range (a, ret, min, section->paddr,",
          "",
          "[Removed Lines]",
          "534:  if (o->sections && !r_list_empty (o->sections) && !a->rawstr) {",
          "",
          "[Added Lines]",
          "531:  if (o && o->sections && !r_list_empty (o->sections) && !a->rawstr) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2781: R_API ut64 r_bin_get_vaddr(RBin *bin, ut64 paddr, ut64 vaddr) {",
          "2783:   return UT64_MAX;",
          "2784:  }",
          "2785:  if (paddr == UT64_MAX) {",
          "2786:   return UT64_MAX;",
          "2787:  }",
          "2789:  if (bin->cur->o && bin->cur->o->info && bin->cur->o->info->arch) {",
          "2790:   if (bin->cur->o->info->bits == 16) {",
          "",
          "[Removed Lines]",
          "2782:  if (!bin || !bin->cur) {",
          "",
          "[Added Lines]",
          "2779:  if (!bin) {",
          "2785:  if (!bin->cur) {",
          "2786:   return paddr;",
          "2787:  }",
          "",
          "---------------"
        ],
        "libr/core/cbin.c||libr/core/cbin.c": [
          "File: libr/core/cbin.c -> libr/core/cbin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "359: static bool bin_raw_strings(RCore *r, int mode, int va) {",
          "360:  RBinFile *bf = r_bin_cur (r->bin);",
          "367:  if (bf && strstr (bf->file, \"malloc://\")) {",
          "369:   r_io_read_at (r->io, 0, bf->buf->buf, bf->size);",
          "",
          "[Removed Lines]",
          "361:  if (!bf && r->io && r->io->desc && r->io->desc->uri) {",
          "365:   return false;",
          "366:  }",
          "",
          "[Added Lines]",
          "361:  bool new_bf = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "372:   eprintf (\"Core file not open\\n\");",
          "373:   return false;",
          "374:  }",
          "375:  RList *l = r_bin_raw_strings (bf, 0);",
          "376:  _print_strings (r, l, mode, va);",
          "377:  return true;",
          "378: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "370:  if (!bf) {",
          "371:   bf = R_NEW0 (RBinFile);",
          "372:   if (!bf) {",
          "373:    return false;",
          "374:   }",
          "375:   RIODesc *desc = r_io_desc_get (r->io, r->file->fd);",
          "376:   if (!desc) {",
          "377:    free (bf);",
          "378:    return false;",
          "379:   }",
          "380:   bf->file = desc->name;",
          "381:   bf->size = r_io_desc_size (desc);",
          "382:   if (bf->size == UT64_MAX) {",
          "383:    free (bf);",
          "384:    return false;",
          "385:   }",
          "386:   bf->buf = r_buf_new ();",
          "387:   if (!bf->buf) {",
          "388:    free (bf);",
          "389:    return false;",
          "390:   }",
          "391:   bf->buf->buf = malloc (bf->size);",
          "392:   if (!bf->buf->buf) {",
          "393:    free (bf->buf);",
          "394:    free (bf);",
          "395:    return false;",
          "396:   }",
          "397:   bf->buf->fd = r->file->fd;",
          "398:   bf->buf->length = bf->size;",
          "399:   r_io_read_at (r->io, 0, bf->buf->buf, bf->size);",
          "400:   bf->o = NULL;",
          "401:   bf->rbin = r->bin;",
          "402:   new_bf = true;",
          "403:   va = false;",
          "404:  }",
          "407:  if (new_bf) {",
          "408:   free (bf->buf->buf);",
          "409:   free (bf->buf);",
          "410:   free (bf);",
          "411:  }",
          "",
          "---------------"
        ],
        "libr/core/cmd_info.c||libr/core/cmd_info.c": [
          "File: libr/core/cmd_info.c -> libr/core/cmd_info.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "307:  }",
          "308: }",
          "329: static int cmd_info(void *data, const char *input) {",
          "330:  RCore *core = (RCore *) data;",
          "331:  bool newline = r_config_get_i (core->config, \"scr.interactive\");",
          "",
          "[Removed Lines]",
          "310: static void print_rabin2_strings (RCore *r, int mode, const char *input) {",
          "311:  if (r->io && r->io->desc && r->io->desc->uri) {",
          "312:   const char *file = r->io->desc->uri;",
          "313:   char cmd;",
          "314:   if (mode == R_CORE_BIN_JSON) {",
          "315:    cmd = 'j';",
          "316:   } else if (mode == R_CORE_BIN_SIMPLE) {",
          "317:    cmd = 'q';",
          "318:   } else {",
          "319:    cmd = ' ';",
          "320:   }",
          "321:   if (input[2] == 'z') { //izz",
          "322:    r_sys_cmdf (\"rabin2 -zz%c '%s'\", cmd, file);",
          "323:   } else {",
          "324:    r_sys_cmdf (\"rabin2 -z%c '%s'\", cmd, file);",
          "325:   }",
          "326:  }",
          "327: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "334:  int i, va = core->io->va || core->io->debug;",
          "335:  int mode = 0; //R_CORE_BIN_SIMPLE;",
          "336:  bool rdump = false;",
          "338:  int is_array = 0;",
          "339:  Sdb *db;",
          "",
          "[Removed Lines]",
          "337:  RBinFile *bin_file = r_bin_cur (core->bin);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "347:   case 'q': mode = R_CORE_BIN_SIMPLE; break;",
          "348:   }",
          "349:  }",
          "354:  if (mode == R_CORE_BIN_JSON) {",
          "355:   if (strlen (input + 1) > 1) {",
          "356:    is_array = 1;",
          "",
          "[Removed Lines]",
          "350:  if (!bin_file && *input == 'z') { // when -n is used",
          "351:   print_rabin2_strings (core, mode, input);",
          "352:   return 0;",
          "353:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0e692944a45eed3440089aeb54a90cd110e91f55",
      "candidate_info": {
        "commit_hash": "0e692944a45eed3440089aeb54a90cd110e91f55",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/0e692944a45eed3440089aeb54a90cd110e91f55",
        "files": [
          "libr/bin/Makefile",
          "libr/bin/bin.c",
          "libr/bin/file.c",
          "libr/bin/format/mach0/mach0.c",
          "libr/bin/obj.c",
          "libr/include/r_bin.h"
        ],
        "message": "Refactor RBin for file and obj, mach0 headers to stdout\n\n- Show CODESIGN load command offset+size",
        "before_after_code_files": [
          "libr/bin/bin.c||libr/bin/bin.c",
          "libr/bin/file.c||libr/bin/file.c",
          "libr/bin/format/mach0/mach0.c||libr/bin/format/mach0/mach0.c",
          "libr/bin/obj.c||libr/bin/obj.c",
          "libr/include/r_bin.h||libr/include/r_bin.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/bin.c||libr/bin/bin.c"
          ],
          "candidate": [
            "libr/bin/bin.c||libr/bin/bin.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/bin.c||libr/bin/bin.c": [
          "File: libr/bin/bin.c -> libr/bin/bin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: R_LIB_VERSION (r_bin);",
          "15: #define DB a->sdb;",
          "16: #define RBINLISTFREE(x)\\",
          "17:  if (x) { \\",
          "18:   r_list_free (x);\\",
          "19:   x = NULL;\\",
          "20:  }",
          "30: #define ARCHS_KEY \"archs\"",
          "",
          "[Removed Lines]",
          "14: #define bprintf if(binfile->rbin->verbose)eprintf",
          "21: #define REBASE_PADDR(o, l, type_t)\\",
          "22:  do { \\",
          "23:   RListIter *_it;\\",
          "24:   type_t *_el;\\",
          "25:   r_list_foreach ((l), _it, _el) { \\",
          "26:    _el->paddr += (o)->loadaddr;\\",
          "27:   }\\",
          "28:  } while (0)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43: static RBinXtrPlugin *bin_xtr_static_plugins[] = { R_BIN_XTR_STATIC_PLUGINS, NULL };",
          "44: static RBinLdrPlugin *bin_ldr_static_plugins[] = { R_BIN_LDR_STATIC_PLUGINS, NULL };",
          "91: static int getoffset(RBin *bin, int type, int idx) {",
          "92:  RBinFile *a = r_bin_cur (bin);",
          "93:  RBinPlugin *plugin = r_bin_file_cur_plugin (a);",
          "",
          "[Removed Lines]",
          "46: static int is_data_section(RBinFile *a, RBinSection *s);",
          "47: static RList *get_strings(RBinFile *a, int min, int dump);",
          "48: static void r_bin_object_delete_items(RBinObject *o);",
          "49: static void r_bin_object_free(void /*RBinObject*/ *o_);",
          "51: static int r_bin_file_set_bytes(RBinFile *binfile, const ut8 *bytes, ut64 sz, bool steal_ptr);",
          "54: static void r_bin_file_free(void /*RBinFile*/ *bf_);",
          "55: static RBinFile *r_bin_file_create_append(RBin *bin, const char *file,",
          "56:         const ut8 *bytes, ut64 sz,",
          "57:         ut64 file_sz, int rawstr, int fd,",
          "58:         const char *xtrname, bool steal_ptr);",
          "60: static RBinFile *r_bin_file_xtr_load_bytes(RBin *bin, RBinXtrPlugin *xtr,",
          "61:          const char *filename,",
          "62:          const ut8 *bytes, ut64 sz,",
          "63:          ut64 file_sz, ut64 baseaddr,",
          "64:          ut64 loadaddr, int idx, int fd,",
          "65:          int rawstr);",
          "67: R_API int r_bin_load_io_at_offset_as_sz(RBin *bin, int fd, ut64 baseaddr,",
          "68:        ut64 loadaddr, int xtr_idx, ut64 offset,",
          "69:        const char *name, ut64 sz);",
          "71: static RBinPlugin *r_bin_get_binplugin_by_name(RBin *bin, const char *name);",
          "72: static RBinXtrPlugin *r_bin_get_xtrplugin_by_name(RBin *bin, const char *name);",
          "73: static RBinPlugin *r_bin_get_binplugin_any(RBin *bin);",
          "75: static RBinObject *r_bin_object_new(RBinFile *binfile, RBinPlugin *plugin,",
          "76:          ut64 baseaddr, ut64 loadaddr, ut64 offset,",
          "77:          ut64 sz);",
          "79: static RBinFile *r_bin_file_new(RBin *bin, const char *file, const ut8 *bytes,",
          "80:      ut64 sz, ut64 file_sz, int rawstr, int fd,",
          "81:      const char *xtrname, Sdb *sdb, bool steal_ptr);",
          "83: static RBinFile *r_bin_file_new_from_bytes(RBin *bin, const char *file,",
          "84:          const ut8 *bytes, ut64 sz,",
          "85:          ut64 file_sz, int rawstr,",
          "86:          ut64 baseaddr, ut64 loadaddr,",
          "87:          int fd, const char *pluginname,",
          "88:          const char *xtrname, ut64 offset,",
          "89:          bool steal_ptr);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "105:  }",
          "106:  return NULL;",
          "107: }",
          "124: static ut64 binobj_a2b(RBinObject *o, ut64 addr) {",
          "125:  return addr + (o? o->baddr_shift: 0);",
          "126: }",
          "158: R_API void r_bin_iobind(RBin *bin, RIO *io) {",
          "159:  r_io_bind (io, &bin->iob);",
          "160: }",
          "",
          "[Removed Lines]",
          "108: static int r_bin_file_object_add(RBinFile *binfile, RBinObject *o) {",
          "109:  if (!o) {",
          "110:   return false;",
          "111:  }",
          "112:  r_list_append (binfile->objs, o);",
          "113:  r_bin_file_set_cur_binfile_obj (binfile->rbin, binfile, o);",
          "114:  return true;",
          "115: }",
          "117: static void binobj_set_baddr(RBinObject *o, ut64 baddr) {",
          "118:  if (!o || baddr == UT64_MAX) {",
          "119:   return;",
          "120:  }",
          "121:  o->baddr_shift = baddr - o->baddr;",
          "122: }",
          "128: static void filterStrings (RBin *bin, RList *strings) {",
          "129:  RBinString *ptr;",
          "130:  RListIter *iter;",
          "131:  r_list_foreach (strings, iter, ptr) {",
          "132:   char *dec = (char *)r_base64_decode_dyn (ptr->string, -1);",
          "133:   if (dec) {",
          "134:    char *s = ptr->string;",
          "135:    do {",
          "136:     char *dec2 = (char *)r_base64_decode_dyn (s, -1);",
          "137:     if (!dec2) {",
          "138:      break;",
          "139:     }",
          "140:     if (!r_str_is_printable (dec2)) {",
          "141:      free (dec2);",
          "142:      break;",
          "143:     }",
          "144:     free (dec);",
          "145:     s = dec = dec2;",
          "146:    } while (true);",
          "147:    if (r_str_is_printable (dec) && strlen (dec) > 3) {",
          "148:     free (ptr->string);",
          "149:     ptr->string = dec;",
          "150:     ptr->type = R_STRING_TYPE_BASE64;",
          "151:    } else {",
          "152:     free (dec);",
          "153:    }",
          "154:   }",
          "155:  }",
          "156: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "209:  }",
          "210: }",
          "584:  RList *l = NULL;",
          "590:  }",
          "591:  return l;",
          "592: }",
          "594: R_API int r_bin_dump_strings(RBinFile *a, int min) {",
          "596:  return 0;",
          "597: }",
          "",
          "[Removed Lines]",
          "212: R_API RBinObject *r_bin_file_object_get_cur(RBinFile *binfile) {",
          "213:  return binfile? binfile->o: NULL;",
          "214: }",
          "216: R_API RBinObject *r_bin_object_get_cur(RBin *bin) {",
          "217:  return bin",
          "218:   ? r_bin_file_object_get_cur (r_bin_cur (bin))",
          "219:   : NULL;",
          "220: }",
          "222: R_API RBinPlugin *r_bin_file_cur_plugin(RBinFile *binfile) {",
          "223:  return binfile && binfile->o? binfile->o->plugin: NULL;",
          "224: }",
          "226: R_API int r_bin_file_cur_set_plugin(RBinFile *binfile, RBinPlugin *plugin) {",
          "227:  if (binfile && binfile->o) {",
          "228:   binfile->o->plugin = plugin;",
          "229:   return true;",
          "230:  }",
          "231:  return false;",
          "232: }",
          "234: #define MODE_PRINT 0x000",
          "235: #define MODE_RADARE 0x001",
          "236: #define MODE_SIMPLE 0x004",
          "238: static void print_string(RBinString *string, RBinFile *bf) {",
          "239:  if (!string || !bf) {",
          "240:   return;",
          "241:  }",
          "242:  int mode = bf->strmode;",
          "243:  ut64 addr , vaddr;",
          "244:  RBin *bin = bf->rbin;",
          "245:  const char *section_name, *type_string;",
          "246:  RIO *io = bin->iob.io;",
          "247:  if (!io) {",
          "248:   return;",
          "249:  }",
          "250:  RBinSection *s = r_bin_get_section_at (bf->o, string->paddr, false);",
          "251:  if (s) {",
          "252:   string->vaddr = s->vaddr + (string->paddr - s->paddr);",
          "253:  }",
          "254:  section_name = s ? s->name : \"\";",
          "255:  type_string = r_bin_string_type (string->type);",
          "256:  vaddr = addr = r_bin_get_vaddr (bin, string->paddr, string->vaddr);",
          "258:  switch(mode) {",
          "259:  case MODE_SIMPLE :",
          "260:   io->cb_printf (\"0x%08\" PFMT64x \" %s\\n\", addr, string->string);",
          "261:   break;",
          "262:  case MODE_RADARE :",
          "263:   {",
          "264:   char *f_name, *nstr;",
          "265:   f_name = strdup (string->string);",
          "266:   r_name_filter (f_name, 512);",
          "267:   if (bin->prefix) {",
          "268:    nstr = r_str_newf (\"%s.str.%s\", bin->prefix, f_name);",
          "269:    io->cb_printf (\"f %s.str.%s %\"PFMT64d\" @ 0x%08\"PFMT64x\"\\n\"",
          "270:      \"Cs %\"PFMT64d\" @ 0x%08\"PFMT64x\"\\n\",",
          "271:      bin->prefix, f_name, string->size, addr,",
          "272:      string->size, addr);",
          "273:   } else {",
          "274:    nstr = r_str_newf (\"str.%s\", f_name);",
          "275:    io->cb_printf (\"f str.%s %\"PFMT64d\" @ 0x%08\"PFMT64x\"\\n\"",
          "276:      \"Cs %\"PFMT64d\" @ 0x%08\"PFMT64x\"\\n\",",
          "277:      f_name, string->size, addr,",
          "278:      string->size, addr);",
          "279:   }",
          "280:   free (nstr);",
          "281:   free (f_name);",
          "282:   break;",
          "283:   }",
          "284:  case MODE_PRINT :",
          "285:   io->cb_printf (\"%03u 0x%08\"PFMT64x\" 0x%08\"",
          "286:     PFMT64x\" %3u %3u \"",
          "287:     \"(%s) %5s %s\\n\",",
          "288:     string->ordinal, string->paddr, vaddr,",
          "289:     string->length, string->size,",
          "290:     section_name, type_string, string->string);",
          "291:   break;",
          "292:  }",
          "293: }",
          "297: #define R_STRING_SCAN_BUFFER_SIZE 2048",
          "299: static int string_scan_range(RList *list, RBinFile *bf, int min,",
          "300:          const ut64 from, const ut64 to, int type) {",
          "301:  ut8 tmp[R_STRING_SCAN_BUFFER_SIZE];",
          "302:  ut64 str_start, needle = from;",
          "303:  int count = 0, i, rc, runes;",
          "304:  const ut8 *buf = r_buf_buffer (bf->buf);",
          "305:  int str_type = R_STRING_TYPE_DETECT;",
          "307:  if (type == -1) {",
          "308:   type = R_STRING_TYPE_DETECT;",
          "309:  }",
          "310:  if (!buf || !min) {",
          "311:   return -1;",
          "312:  }",
          "313:  while (needle < to) {",
          "314:   rc = r_utf8_decode (buf + needle, to - needle, NULL);",
          "315:   if (!rc) {",
          "316:    needle++;",
          "317:    continue;",
          "318:   }",
          "320:   if (type == R_STRING_TYPE_DETECT) {",
          "321:    char *w = (char *)buf + needle + rc;",
          "322:    if ((to - needle) > 4) {",
          "323:     bool is_wide32 = needle + rc + 2 < to && !w[0] && !w[1] && !w[2] && w[3] && !w[4];",
          "324:     if (is_wide32) {",
          "325:      str_type = R_STRING_TYPE_WIDE32;",
          "326:     } else {",
          "327:      bool is_wide = needle + rc + 2 < to && !w[0] && w[1] && !w[2];",
          "328:      str_type = is_wide? R_STRING_TYPE_WIDE: R_STRING_TYPE_ASCII;",
          "329:     }",
          "330:    } else {",
          "331:     str_type = R_STRING_TYPE_ASCII;",
          "332:    }",
          "333:   } else {",
          "334:    str_type = type;",
          "335:   }",
          "338:   runes = 0;",
          "339:   str_start = needle;",
          "342:   for (rc = i = 0; i < sizeof (tmp) - 3 && needle < to; i += rc) {",
          "343:    RRune r = {0};",
          "345:    if (str_type == R_STRING_TYPE_WIDE32) {",
          "346:     rc = r_utf32le_decode (buf + needle, to - needle, &r);",
          "347:     if (rc) {",
          "348:      rc = 4;",
          "349:     }",
          "350:    } else if (str_type == R_STRING_TYPE_WIDE) {",
          "351:     rc = r_utf16le_decode (buf + needle, to - needle, &r);",
          "352:     if (rc == 1) {",
          "353:      rc = 2;",
          "354:     }",
          "355:    } else {",
          "356:     rc = r_utf8_decode (buf + needle, to - needle, &r);",
          "357:     if (rc > 1) {",
          "358:      str_type = R_STRING_TYPE_UTF8;",
          "359:     }",
          "360:    }",
          "363:    if (!rc) {",
          "364:     needle++;",
          "365:     break;",
          "366:    }",
          "368:    needle += rc;",
          "370:    if (r_isprint (r) && r != '\\\\') {",
          "371:     if (str_type == R_STRING_TYPE_WIDE32) {",
          "372:      if (r == 0xff) {",
          "373:       r = 0;",
          "374:      }",
          "375:     }",
          "376:     rc = r_utf8_encode (&tmp[i], r);",
          "377:     runes++;",
          "379:    } else if (r && r < 0x100 && strchr (\"\\b\\v\\f\\n\\r\\t\\a\\033\\\\\", (char)r)) {",
          "380:     if ((i + 32) < sizeof (tmp) && r < 93) {",
          "381:      tmp[i + 0] = '\\\\';",
          "382:      tmp[i + 1] = \"       abtnvfr             e  \"",
          "383:                   \"                              \"",
          "384:                   \"                              \"",
          "385:                   \"  \\\\\"[r];",
          "386:     } else {",
          "388:      break;",
          "389:     }",
          "390:     rc = 2;",
          "391:     runes++;",
          "392:    } else {",
          "394:     break;",
          "395:    }",
          "396:   }",
          "398:   tmp[i++] = '\\0';",
          "400:   if (runes >= min) {",
          "401:    if (str_type == R_STRING_TYPE_ASCII) {",
          "403:     int j;",
          "404:     for (j = 0; j < i; j++) {",
          "405:      char ch = tmp[j];",
          "406:      if (ch != '\\n' && ch != '\\r' && ch != '\\t') {",
          "407:       if (!IS_PRINTABLE (tmp[j])) {",
          "408:        continue;",
          "409:       }",
          "410:      }",
          "411:     }",
          "412:    }",
          "413:    RBinString *bs = R_NEW0 (RBinString);",
          "414:    if (!bs) {",
          "415:     break;",
          "416:    }",
          "417:    bs->type = str_type;",
          "418:    bs->length = runes;",
          "419:    bs->size = needle - str_start;",
          "420:    bs->ordinal = count++;",
          "422:    switch (str_type) {",
          "423:    case R_STRING_TYPE_WIDE:",
          "424:     if (str_start > 1) {",
          "425:      const ut8 *p = buf + str_start - 2;",
          "426:      if (p[0] == 0xff && p[1] == 0xfe) {",
          "427:       str_start -= 2; // \\xff\\xfe",
          "428:      }",
          "429:     }",
          "430:     break;",
          "431:    case R_STRING_TYPE_WIDE32:",
          "432:     if (str_start > 3) {",
          "433:      const ut8 *p = buf + str_start - 4;",
          "434:      if (p[0] == 0xff && p[1] == 0xfe) {",
          "435:       str_start -= 4; // \\xff\\xfe\\x00\\x00",
          "436:      }",
          "437:     }",
          "438:     break;",
          "439:    }",
          "440:    bs->paddr = bs->vaddr = str_start;",
          "441:    bs->string = r_str_ndup ((const char *)tmp, i);",
          "442:    if (list) {",
          "443:     r_list_append (list, bs);",
          "444:    } else {",
          "445:     print_string (bs, bf);",
          "446:     r_bin_string_free (bs);",
          "447:    }",
          "448:   }",
          "449:  }",
          "450:  return count;",
          "451: }",
          "453: static void get_strings_range(RBinFile *bf, RList *list, int min, ut64 from, ut64 to) {",
          "454:  RBinPlugin *plugin = r_bin_file_cur_plugin (bf);",
          "455:  RBinString *ptr;",
          "456:  RListIter *it;",
          "458:  if (!bf || !bf->buf || !bf->buf->buf) {",
          "459:   return;",
          "460:  }",
          "461:  if (!bf->rawstr) {",
          "462:   if (!plugin || !plugin->info) {",
          "463:    return;",
          "464:   }",
          "465:  }",
          "466:  if (!min) {",
          "467:   min = plugin? plugin->minstrlen: 4;",
          "468:  }",
          "470:  if (!min) {",
          "471:   min = 4;",
          "472:  }",
          "473:  if (min < 0) {",
          "474:   return;",
          "475:  }",
          "476:  if (!to || to > bf->buf->length) {",
          "477:   to = r_buf_size (bf->buf);",
          "478:  }",
          "479:  if (bf->rawstr != 2) {",
          "480:   ut64 size = to - from;",
          "482:   if (bf->rbin->maxstrbuf && size && size > bf->rbin->maxstrbuf) {",
          "483:    if (bf->rbin->verbose) {",
          "484:     eprintf (\"WARNING: bin_strings buffer is too big \"",
          "485:      \"(0x%08\" PFMT64x",
          "486:      \").\"",
          "487:      \" Use -zzz or set bin.maxstrbuf \"",
          "488:      \"(RABIN2_MAXSTRBUF) in r2 (rabin2)\\n\",",
          "489:      size);",
          "490:    }",
          "491:    return;",
          "492:   }",
          "493:  }",
          "494:  if (string_scan_range (list, bf, min, from, to, -1) < 0) {",
          "495:   return;",
          "496:  }",
          "497:  r_list_foreach (list, it, ptr) {",
          "498:   RBinSection *s = r_bin_get_section_at (bf->o, ptr->paddr, false);",
          "499:   if (s) {",
          "500:    ptr->vaddr = s->vaddr + (ptr->paddr - s->paddr);",
          "501:   }",
          "502:  }",
          "503: }",
          "505: static int is_data_section(RBinFile *a, RBinSection *s) {",
          "506:  if (s->has_strings || s->is_data) {",
          "507:   return true;",
          "508:  }",
          "509:  if (s->is_data) {",
          "510:   return true;",
          "511:  }",
          "513:  return (strstr (s->name, \"_const\") != NULL);",
          "514: }",
          "516: static RList *get_strings(RBinFile *a, int min, int dump) {",
          "517:  RListIter *iter;",
          "518:  RBinSection *section;",
          "519:  RBinObject *o = a? a->o: NULL;",
          "520:  RList *ret;",
          "522:  if (dump) {",
          "524:   ret = NULL;",
          "525:  } else {",
          "526:   ret = r_list_newf (r_bin_string_free);",
          "527:   if (!ret) {",
          "528:    return NULL;",
          "529:   }",
          "530:  }",
          "531:  if (o && o->sections && !r_list_empty (o->sections) && !a->rawstr) {",
          "532:   r_list_foreach (o->sections, iter, section) {",
          "533:    if (is_data_section (a, section)) {",
          "534:     get_strings_range (a, ret, min, section->paddr,",
          "535:       section->paddr + section->size);",
          "536:    }",
          "537:   }",
          "538:   r_list_foreach (o->sections, iter, section) {",
          "539:    RBinString *s;",
          "540:    RListIter *iter2;",
          "542:    const int bits = (a->o && a->o->info) ? a->o->info->bits : 32;",
          "543:    const int cfstr_size = (bits == 64) ? 32 : 16;",
          "544:    const int cfstr_offs = (bits == 64) ? 16 :  8;",
          "545:    if (strstr (section->name, \"__cfstring\")) {",
          "546:     int i;",
          "548:     ut8 *p;",
          "549:     for (i = 0; i < section->size; i += cfstr_size) {",
          "550:      ut8 buf[32];",
          "551:      if (!r_buf_read_at (",
          "552:           a->buf, section->paddr + i + cfstr_offs,",
          "553:           buf, sizeof (buf))) {",
          "554:       break;",
          "555:      }",
          "556:      p = buf;",
          "557:      ut64 cfstr_vaddr = section->vaddr + i;",
          "558:      ut64 cstr_vaddr = (bits == 64)",
          "559:            ? r_read_le64 (p)",
          "560:            : r_read_le32 (p);",
          "561:      r_list_foreach (ret, iter2, s) {",
          "562:       if (s->vaddr == cstr_vaddr) {",
          "563:        RBinString *new = R_NEW0 (RBinString);",
          "564:        new->type = s->type;",
          "565:        new->length = s->length;",
          "566:        new->size = s->size;",
          "567:        new->ordinal = s->ordinal;",
          "568:        new->paddr = new->vaddr = cfstr_vaddr;",
          "569:        new->string = r_str_newf (\"cstr.%s\", s->string);",
          "570:        r_list_append (ret, new);",
          "571:        break;",
          "572:       }",
          "573:      }",
          "574:     }",
          "575:    }",
          "576:   }",
          "577:  } else {",
          "578:   get_strings_range (a, ret, min, 0, a->size);",
          "579:  }",
          "580:  return ret;",
          "581: }",
          "583: R_API RList* r_bin_raw_strings(RBinFile *a, int min) {",
          "585:  if (a) {",
          "586:   int tmp = a->rawstr;",
          "587:   a->rawstr = 2;",
          "588:   l = get_strings (a, min, 0);",
          "589:   a->rawstr = tmp;",
          "595:  get_strings (a, min, 1);",
          "",
          "[Added Lines]",
          "111: R_API RList* r_bin_raw_strings(RBinFile *bf, int min) {",
          "113:  if (bf) {",
          "114:   int tmp = bf->rawstr;",
          "115:   bf->rawstr = 2;",
          "116:   l = r_bin_file_get_strings (bf, min, 0);",
          "117:   bf->rawstr = tmp;",
          "123:  r_bin_file_get_strings (a, min, 1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "619:  return R_BIN_NM_NONE;",
          "620: }",
          "671: R_API void r_bin_info_free(RBinInfo *rb) {",
          "672:  if (!rb) {",
          "673:   return;",
          "",
          "[Removed Lines]",
          "622: static void mem_free(void *data) {",
          "623:  RBinMem *mem = (RBinMem *)data;",
          "624:  if (mem && mem->mirrors) {",
          "625:   mem->mirrors->free = mem_free;",
          "626:   r_list_free (mem->mirrors);",
          "627:   mem->mirrors = NULL;",
          "628:  }",
          "629:  free (mem);",
          "630: }",
          "632: static void r_bin_object_delete_items(RBinObject *o) {",
          "633:  ut32 i = 0;",
          "634:  if (!o) {",
          "635:   return;",
          "636:  }",
          "637:  r_list_free (o->entries);",
          "638:  r_list_free (o->fields);",
          "639:  r_list_free (o->imports);",
          "640:  r_list_free (o->libs);",
          "641:  r_list_free (o->relocs);",
          "642:  r_list_free (o->sections);",
          "643:  r_list_free (o->strings);",
          "644:  r_list_free (o->symbols);",
          "645:  r_list_free (o->classes);",
          "646:  r_list_free (o->lines);",
          "647:  sdb_free (o->kv);",
          "648:  if (o->mem) {",
          "649:   o->mem->free = mem_free;",
          "650:  }",
          "651:  r_list_free (o->mem);",
          "652:  o->mem = NULL;",
          "653:  o->entries = NULL;",
          "654:  o->fields = NULL;",
          "655:  o->imports = NULL;",
          "656:  o->libs = NULL;",
          "657:  o->relocs = NULL;",
          "658:  o->sections = NULL;",
          "659:  o->strings = NULL;",
          "660:  o->symbols = NULL;",
          "661:  o->classes = NULL;",
          "662:  o->lines = NULL;",
          "663:  o->info = NULL;",
          "664:  o->kv = NULL;",
          "665:  for (i = 0; i < R_BIN_SYM_LAST; i++) {",
          "666:   free (o->binsym[i]);",
          "667:   o->binsym[i] = NULL;",
          "668:  }",
          "669: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "711:  free (str);",
          "712: }",
          "724: static char *swiftField(const char *dn, const char *cn) {",
          "725:  char *p = strstr (dn, \".getter_\");",
          "726:  if (!p) {",
          "",
          "[Removed Lines]",
          "714: static void r_bin_object_free(void /*RBinObject*/ *o_) {",
          "715:  RBinObject *o = o_;",
          "716:  if (!o) {",
          "717:   return;",
          "718:  }",
          "719:  r_bin_info_free (o->info);",
          "720:  r_bin_object_delete_items (o);",
          "721:  R_FREE (o);",
          "722: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "934: R_API int r_bin_load(RBin *bin, const char *file, ut64 baseaddr, ut64 loadaddr, int xtr_idx, int fd, int rawstr) {",
          "",
          "[Removed Lines]",
          "797: R_API int r_bin_object_set_items(RBinFile *binfile, RBinObject *o) {",
          "798:  RBinObject *old_o;",
          "799:  RBinPlugin *cp;",
          "800:  int i, minlen;",
          "801:  RBin *bin;",
          "802:  if (!binfile || !o || !o->plugin) {",
          "803:   return false;",
          "804:  }",
          "805:  bin = binfile->rbin;",
          "806:  old_o = binfile->o;",
          "807:  cp = o->plugin;",
          "808:  if (binfile->rbin->minstrlen > 0) {",
          "809:   minlen = binfile->rbin->minstrlen;",
          "810:  } else {",
          "811:   minlen = cp->minstrlen;",
          "812:  }",
          "813:  binfile->o = o;",
          "814:  if (cp->baddr) {",
          "815:   ut64 old_baddr = o->baddr;",
          "816:   o->baddr = cp->baddr (binfile);",
          "817:   binobj_set_baddr (o, old_baddr);",
          "818:  }",
          "819:  if (cp->boffset) {",
          "820:   o->boffset = cp->boffset (binfile);",
          "821:  }",
          "825:  if (cp->size) {",
          "826:   o->size = cp->size (binfile);",
          "827:  }",
          "828:  if (cp->binsym) {",
          "829:   for (i = 0; i < R_BIN_SYM_LAST; i++) {",
          "830:    o->binsym[i] = cp->binsym (binfile, i);",
          "831:    if (o->binsym[i]) {",
          "832:     o->binsym[i]->paddr += o->loadaddr;",
          "833:    }",
          "834:   }",
          "835:  }",
          "836:  if (cp->entries) {",
          "837:   o->entries = cp->entries (binfile);",
          "838:   REBASE_PADDR (o, o->entries, RBinAddr);",
          "839:  }",
          "840:  if (cp->fields) {",
          "841:   o->fields = cp->fields (binfile);",
          "842:   if (o->fields) {",
          "843:    o->fields->free = r_bin_field_free;",
          "844:    REBASE_PADDR (o, o->fields, RBinField);",
          "845:   }",
          "846:  }",
          "847:  if (cp->imports) {",
          "848:   r_list_free (o->imports);",
          "849:   o->imports = cp->imports (binfile);",
          "850:   if (o->imports) {",
          "851:    o->imports->free = r_bin_import_free;",
          "852:   }",
          "853:  }",
          "855:  if (true) {",
          "856:   if (cp->symbols) {",
          "857:    o->symbols = cp->symbols (binfile);",
          "858:    if (o->symbols) {",
          "859:     o->symbols->free = r_bin_symbol_free;",
          "860:     REBASE_PADDR (o, o->symbols, RBinSymbol);",
          "861:     if (bin->filter) {",
          "862:      r_bin_filter_symbols (o->symbols);",
          "863:     }",
          "864:    }",
          "865:   }",
          "866:  }",
          "868:  o->info = cp->info? cp->info (binfile): NULL;",
          "869:  if (cp->libs) {",
          "870:   o->libs = cp->libs (binfile);",
          "871:  }",
          "872:  if (cp->sections) {",
          "874:   if (!o->sections) {",
          "875:    o->sections = cp->sections (binfile);",
          "876:   }",
          "877:   REBASE_PADDR (o, o->sections, RBinSection);",
          "878:   if (bin->filter) {",
          "879:    r_bin_filter_sections (o->sections);",
          "880:   }",
          "881:  }",
          "882:  if (bin->filter_rules & (R_BIN_REQ_RELOCS | R_BIN_REQ_IMPORTS)) {",
          "883:   if (cp->relocs) {",
          "884:    o->relocs = cp->relocs (binfile);",
          "885:    REBASE_PADDR (o, o->relocs, RBinReloc);",
          "886:   }",
          "887:  }",
          "888:  if (bin->filter_rules & R_BIN_REQ_STRINGS) {",
          "889:   if (cp->strings) {",
          "890:    o->strings = cp->strings (binfile);",
          "891:   } else {",
          "892:    o->strings = get_strings (binfile, minlen, 0);",
          "893:   }",
          "894:   if (bin->debase64) {",
          "895:    filterStrings (bin, o->strings);",
          "896:   }",
          "897:   REBASE_PADDR (o, o->strings, RBinString);",
          "898:  }",
          "899:  if (bin->filter_rules & R_BIN_REQ_CLASSES) {",
          "900:   if (cp->classes) {",
          "901:    o->classes = cp->classes (binfile);",
          "902:    if (r_bin_lang_swift (binfile)) {",
          "903:     o->classes = r_bin_classes_from_symbols (binfile, o);",
          "904:    }",
          "905:   } else {",
          "906:    o->classes = r_bin_classes_from_symbols (binfile, o);",
          "907:   }",
          "908:   if (bin->filter) {",
          "909:    r_bin_filter_classes (o->classes);",
          "910:   }",
          "911:  }",
          "912:  if (cp->lines) {",
          "913:   o->lines = cp->lines (binfile);",
          "914:  }",
          "915:  if (cp->get_sdb) {",
          "916:   Sdb* new_kv = cp->get_sdb (binfile);",
          "917:   if (new_kv != o->kv) {",
          "918:    sdb_free (o->kv);",
          "919:   }",
          "920:   o->kv = new_kv;",
          "921:  }",
          "922:  if (cp->mem)  {",
          "923:   o->mem = cp->mem (binfile);",
          "924:  }",
          "925:  if (bin->filter_rules & (R_BIN_REQ_SYMBOLS | R_BIN_REQ_IMPORTS)) {",
          "926:   o->lang = r_bin_load_languages (binfile);",
          "927:  }",
          "928:  binfile->o = old_o;",
          "929:  return true;",
          "930: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1207:  return res;",
          "1208: }",
          "1337:  RBinPlugin *plugin;",
          "1338:  RListIter *it;",
          "1339:  if (bin && name) {",
          "",
          "[Removed Lines]",
          "1210: R_API int r_bin_file_deref_by_bind(RBinBind *binb) {",
          "1211:  RBin *bin = binb? binb->bin: NULL;",
          "1212:  RBinFile *a = r_bin_cur (bin);",
          "1213:  return r_bin_file_deref (bin, a);",
          "1214: }",
          "1216: R_API int r_bin_file_deref(RBin *bin, RBinFile *a) {",
          "1217:  RBinObject *o = r_bin_cur_object (bin);",
          "1218:  int res = false;",
          "1219:  if (a && !o) {",
          "1221:   res = true;",
          "1222:  } else if (a && o->referenced - 1 < 1) {",
          "1224:   res = true;",
          "1226:  } else if (o) {",
          "1227:   o->referenced--;",
          "1228:  }",
          "1232:  if (bin) bin->cur = NULL;",
          "1233:  return res;",
          "1234: }",
          "1236: R_API int r_bin_file_ref_by_bind(RBinBind *binb) {",
          "1237:  RBin *bin = binb? binb->bin: NULL;",
          "1238:  RBinFile *a = r_bin_cur (bin);",
          "1239:  return r_bin_file_ref (bin, a);",
          "1240: }",
          "1242: R_API int r_bin_file_ref(RBin *bin, RBinFile *a) {",
          "1243:  RBinObject *o = r_bin_cur_object (bin);",
          "1244:  if (a && o) {",
          "1245:   o->referenced--;",
          "1246:   return true;",
          "1247:  }",
          "1248:  return false;",
          "1249: }",
          "1251: static void r_bin_file_free(void /*RBinFile*/ *bf_) {",
          "1252:  RBinFile *a = bf_;",
          "1253:  RBinPlugin *plugin = r_bin_file_cur_plugin (a);",
          "1255:  if (!a) {",
          "1256:   return;",
          "1257:  }",
          "1262:  if (plugin && plugin->destroy) {",
          "1263:   plugin->destroy (a);",
          "1264:  }",
          "1265:  if (a->curxtr && a->curxtr->destroy && a->xtr_obj) {",
          "1266:   a->curxtr->free_xtr ((void *)(a->xtr_obj));",
          "1267:  }",
          "1268:  r_buf_free (a->buf);",
          "1270:  if (a && a->sdb_addrinfo) {",
          "1271:   sdb_free (a->sdb_addrinfo);",
          "1272:   a->sdb_addrinfo = NULL;",
          "1273:  }",
          "1274:  free (a->file);",
          "1275:  a->o = NULL;",
          "1276:  r_list_free (a->objs);",
          "1277:  r_list_free (a->xtr_data);",
          "1278:  r_id_pool_kick_id (a->rbin->file_ids, a->id);",
          "1279:  memset (a, 0, sizeof (RBinFile));",
          "1280:  free (a);",
          "1281: }",
          "1283: static RBinFile *r_bin_file_create_append(RBin *bin, const char *file,",
          "1284:         const ut8 *bytes, ut64 sz,",
          "1285:         ut64 file_sz, int rawstr, int fd,",
          "1286:         const char *xtrname, bool steal_ptr) {",
          "1287:  RBinFile *bf = r_bin_file_new (bin, file, bytes, sz, file_sz, rawstr,",
          "1288:            fd, xtrname, bin->sdb, steal_ptr);",
          "1289:  if (bf) {",
          "1290:   r_list_append (bin->binfiles, bf);",
          "1291:  }",
          "1292:  return bf;",
          "1293: }",
          "1297: static RBinFile *r_bin_file_xtr_load_bytes(RBin *bin, RBinXtrPlugin *xtr,",
          "1298:          const char *filename,",
          "1299:          const ut8 *bytes, ut64 sz,",
          "1300:          ut64 file_sz, ut64 baseaddr,",
          "1301:          ut64 loadaddr, int idx, int fd,",
          "1302:          int rawstr) {",
          "1303:  if (!bin || !bytes) {",
          "1304:   return NULL;",
          "1305:  }",
          "1306:  RBinFile *bf = r_bin_file_find_by_name (bin, filename);",
          "1307:  if (!bf) {",
          "1308:   bf = r_bin_file_create_append (bin, filename, bytes, sz,",
          "1309:             file_sz, rawstr, fd, xtr->name, false);",
          "1310:   if (!bf) {",
          "1311:    return NULL;",
          "1312:   }",
          "1313:   if (!bin->cur) {",
          "1314:    bin->cur = bf;",
          "1315:   }",
          "1316:  }",
          "1317:  if (bf->xtr_data) {",
          "1318:   r_list_free (bf->xtr_data);",
          "1319:  }",
          "1320:  if (xtr && bytes) {",
          "1321:   RList *xtr_data_list = xtr->extractall_from_bytes (bin, bytes, sz);",
          "1322:   RListIter *iter;",
          "1323:   RBinXtrData *xtr;",
          "1326:   r_list_foreach (xtr_data_list, iter, xtr) {",
          "1327:    xtr->baddr = baseaddr? baseaddr : UT64_MAX;",
          "1328:    xtr->laddr = loadaddr? loadaddr : UT64_MAX;",
          "1329:   }",
          "1330:   bf->loadaddr = loadaddr;",
          "1331:   bf->xtr_data = xtr_data_list ? xtr_data_list : NULL;",
          "1332:  }",
          "1333:  return bf;",
          "1334: }",
          "1336: static RBinPlugin *r_bin_get_binplugin_by_name(RBin *bin, const char *name) {",
          "",
          "[Added Lines]",
          "544: R_API RBinPlugin *r_bin_get_binplugin_by_name(RBin *bin, const char *name) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1360:  return NULL;",
          "1361: }",
          "1364:  RBinXtrPlugin *xtr;",
          "1365:  RListIter *it;",
          "1367:  r_list_foreach (bin->binxtrs, it, xtr) {",
          "1368:   if (!strcmp (xtr->name, name)) {",
          "1369:    return xtr;",
          "",
          "[Removed Lines]",
          "1363: static RBinXtrPlugin *r_bin_get_xtrplugin_by_name(RBin *bin, const char *name) {",
          "1366:  if (!bin || !name) return NULL;",
          "",
          "[Added Lines]",
          "571: R_API RBinXtrPlugin *r_bin_get_xtrplugin_by_name(RBin *bin, const char *name) {",
          "574:  if (!bin || !name) {",
          "575:   return NULL;",
          "576:  }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1374:  return NULL;",
          "1375: }",
          "1378:  return r_bin_get_binplugin_by_name (bin, \"any\");",
          "1379: }",
          "1659:  if (p && p->fini) {",
          "1660:   p->fini (NULL);",
          "1661:  }",
          "",
          "[Removed Lines]",
          "1377: static RBinPlugin *r_bin_get_binplugin_any(RBin *bin) {",
          "1381: static RBinObject *r_bin_object_new(RBinFile *binfile, RBinPlugin *plugin,",
          "1382:          ut64 baseaddr, ut64 loadaddr, ut64 offset,",
          "1383:          ut64 sz) {",
          "1384:  const ut8 *bytes = binfile? r_buf_buffer (binfile->buf): NULL;",
          "1385:  ut64 bytes_sz = binfile? r_buf_size (binfile->buf): 0;",
          "1386:  Sdb *sdb = binfile? binfile->sdb: NULL;",
          "1387:  RBinObject *o = R_NEW0 (RBinObject);",
          "1388:  if (!o) {",
          "1389:   return NULL;",
          "1390:  }",
          "1391:  o->obj_size = bytes && (bytes_sz >= sz + offset)? sz: 0;",
          "1392:  o->boffset = offset;",
          "1393:  o->id = r_num_rand (0xfffff000);",
          "1394:  o->kv = sdb_new0 ();",
          "1395:  o->baddr = baseaddr;",
          "1396:  o->baddr_shift = 0;",
          "1397:  o->plugin = plugin;",
          "1398:  o->loadaddr = loadaddr != UT64_MAX ? loadaddr : 0;",
          "1404:  if (bytes && plugin && plugin->load_bytes && (bytes_sz >= sz + offset)) {",
          "1405:   ut64 bsz = bytes_sz - offset;",
          "1406:   if (sz < bsz) {",
          "1407:    bsz = sz;",
          "1408:   }",
          "1409:   o->bin_obj = plugin->load_bytes (binfile, bytes + offset, sz,",
          "1410:        loadaddr, sdb);",
          "1411:   if (!o->bin_obj) {",
          "1412:    bprintf (",
          "1413:     \"Error in r_bin_object_new: load_bytes failed \"",
          "1414:     \"for %s plugin\\n\",",
          "1415:     plugin->name);",
          "1416:    sdb_free (o->kv);",
          "1417:    free (o);",
          "1418:    return NULL;",
          "1419:   }",
          "1420:  } else if (binfile && plugin && plugin->load) {",
          "1424:   RBinObject *old_o = binfile->o;",
          "1425:   binfile->o = o;",
          "1426:   if (plugin->load (binfile)) {",
          "1427:    binfile->sdb_info = o->kv;",
          "1429:    sdb_ns_set (binfile->sdb, \"info\", o->kv);",
          "1430:   } else {",
          "1431:    binfile->o = old_o;",
          "1432:   }",
          "1433:   o->obj_size = sz;",
          "1434:  } else {",
          "1435:   sdb_free (o->kv);",
          "1436:   free (o);",
          "1437:   return NULL;",
          "1438:  }",
          "1446:  r_bin_object_set_items (binfile, o);",
          "1447:  r_bin_file_object_add (binfile, o);",
          "1451:  return o;",
          "1452: }",
          "1454: #define LIMIT_SIZE 0",
          "1455: static int r_bin_file_set_bytes(RBinFile *binfile, const ut8 *bytes, ut64 sz, bool steal_ptr) {",
          "1456:  if (!bytes) {",
          "1457:   return false;",
          "1458:  }",
          "1459:  r_buf_free (binfile->buf);",
          "1460:  binfile->buf = r_buf_new ();",
          "1461: #if LIMIT_SIZE",
          "1462:  if (sz > 1024 * 1024) {",
          "1463:   eprintf (\"Too big\\n\");",
          "1465:   return NULL;",
          "1466:  }",
          "1467: #else",
          "1468:  if (steal_ptr) {",
          "1469:   r_buf_set_bytes_steal (binfile->buf, bytes, sz);",
          "1470:  } else {",
          "1471:   r_buf_set_bytes (binfile->buf, bytes, sz);",
          "1472:  }",
          "1473: #endif",
          "1474:  return binfile->buf != NULL;",
          "1475: }",
          "1477: static RBinFile *r_bin_file_new(RBin *bin, const char *file, const ut8 *bytes,",
          "1478:      ut64 sz, ut64 file_sz, int rawstr, int fd,",
          "1479:      const char *xtrname, Sdb *sdb, bool steal_ptr) {",
          "1480:  RBinFile *binfile = R_NEW0 (RBinFile);",
          "1481:  if (!binfile) {",
          "1482:   return NULL;",
          "1483:  }",
          "1484:  if (!r_id_pool_grab_id (bin->file_ids, &binfile->id)) {",
          "1485:   if (steal_ptr) { // we own the ptr, free on error",
          "1486:    free ((void*) bytes);",
          "1487:   }",
          "1488:   free (binfile);  //no id means no binfile",
          "1489:   return NULL;",
          "1490:  }",
          "1491:  int res = r_bin_file_set_bytes (binfile, bytes, sz, steal_ptr);",
          "1492:  if (!res && steal_ptr) { // we own the ptr, free on error",
          "1493:   free((void*) bytes);",
          "1494:  }",
          "1495:  binfile->rbin = bin;",
          "1496:  binfile->file = file? strdup (file): NULL;",
          "1497:  binfile->rawstr = rawstr;",
          "1498:  binfile->fd = fd;",
          "1499:  binfile->curxtr = r_bin_get_xtrplugin_by_name (bin, xtrname);",
          "1500:  binfile->sdb = sdb;",
          "1501:  binfile->size = file_sz;",
          "1502:  binfile->xtr_data = r_list_newf ((RListFree)r_bin_xtrdata_free);",
          "1503:  binfile->objs = r_list_newf ((RListFree)r_bin_object_free);",
          "1504:  binfile->xtr_obj  = NULL;",
          "1506:  if (!binfile->buf) {",
          "1508:   binfile->buf = r_buf_new ();",
          "1510:  }",
          "1512:  if (sdb) {",
          "1513:   binfile->sdb = sdb_ns (sdb, sdb_fmt (0, \"fd.%d\", fd), 1);",
          "1514:   sdb_set (binfile->sdb, \"archs\", \"0:0:x86:32\", 0); // x86??",
          "1520:   binfile->sdb_addrinfo = sdb_ns (binfile->sdb, \"addrinfo\", 1);",
          "1521:   binfile->sdb_addrinfo->refs++;",
          "1522:   sdb_ns_set (sdb, \"cur\", binfile->sdb);",
          "1523:   binfile->sdb->refs++;",
          "1524:  }",
          "1525:  return binfile;",
          "1526: }",
          "1528: R_API bool r_bin_file_object_new_from_xtr_data(RBin *bin, RBinFile *bf,",
          "1529:       ut64 baseaddr, ut64 loadaddr,",
          "1530:       RBinXtrData *data) {",
          "1531:  RBinObject *o = NULL;",
          "1532:  RBinPlugin *plugin = NULL;",
          "1533:  ut8* bytes;",
          "1534:  ut64 offset = data? data->offset: 0;",
          "1535:  ut64 sz = data ? data->size : 0;",
          "1536:  if (!data || !bf) {",
          "1537:   return false;",
          "1538:  }",
          "1545:  bytes = data->buffer;",
          "1546:  if (!bytes) {",
          "1547:   return false;",
          "1548:  }",
          "1549:  plugin = r_bin_get_binplugin_by_bytes (bin, (const ut8*)bytes, sz);",
          "1550:  if (!plugin) {",
          "1551:   plugin = r_bin_get_binplugin_any (bin);",
          "1552:  }",
          "1553:  r_buf_free (bf->buf);",
          "1554:  bf->buf = r_buf_new_with_bytes ((const ut8*)bytes, data->size);",
          "1556:  o = r_bin_object_new (bf, plugin, baseaddr, loadaddr, offset, sz);",
          "1559:  if (!o) {",
          "1560:   return false;",
          "1561:  }",
          "1562:  if (o && !o->size) {",
          "1563:   o->size = sz;",
          "1564:  }",
          "1565:  bf->narch = data->file_count;",
          "1566:  if (!o->info) {",
          "1567:   o->info = R_NEW0 (RBinInfo);",
          "1568:  }",
          "1569:  free (o->info->file);",
          "1570:  free (o->info->arch);",
          "1571:  free (o->info->machine);",
          "1572:  free (o->info->type);",
          "1573:  o->info->file = strdup (bf->file);",
          "1574:  o->info->arch = strdup (data->metadata->arch);",
          "1575:  o->info->machine = strdup (data->metadata->machine);",
          "1576:  o->info->type = strdup (data->metadata->type);",
          "1577:  o->info->bits = data->metadata->bits;",
          "1578:  o->info->has_crypto = bf->o->info->has_crypto;",
          "1579:  data->loaded = true;",
          "1580:  return true;",
          "1581: }",
          "1583: static RBinFile *r_bin_file_new_from_bytes(RBin *bin, const char *file,",
          "1584:          const ut8 *bytes, ut64 sz,",
          "1585:          ut64 file_sz, int rawstr,",
          "1586:          ut64 baseaddr, ut64 loadaddr,",
          "1587:          int fd, const char *pluginname,",
          "1588:          const char *xtrname, ut64 offset,",
          "1589:          bool steal_ptr) {",
          "1590:  ut8 binfile_created = false;",
          "1591:  RBinPlugin *plugin = NULL;",
          "1592:  RBinXtrPlugin *xtr = NULL;",
          "1593:  RBinObject *o = NULL;",
          "1594:  RBinFile *bf = NULL;",
          "1595:  if (sz == UT64_MAX) {",
          "1596:   return NULL;",
          "1597:  }",
          "1599:  if (xtrname) {",
          "1600:   xtr = r_bin_get_xtrplugin_by_name (bin, xtrname);",
          "1601:  }",
          "1603:  if (xtr && xtr->check_bytes (bytes, sz)) {",
          "1604:   return r_bin_file_xtr_load_bytes (bin, xtr, file,",
          "1605:       bytes, sz, file_sz, baseaddr, loadaddr, 0,",
          "1606:       fd, rawstr);",
          "1607:  }",
          "1609:  if (!bf) {",
          "1610:   bf = r_bin_file_create_append (bin, file, bytes, sz, file_sz,",
          "1611:             rawstr, fd, xtrname, steal_ptr);",
          "1612:   if (!bf) {",
          "1613:    if (!steal_ptr) { // we own the ptr, free on error",
          "1614:     free ((void*) bytes);",
          "1615:    }",
          "1616:    return NULL;",
          "1617:   }",
          "1618:   binfile_created = true;",
          "1619:  }",
          "1621:  if (bin->force) {",
          "1622:   plugin = r_bin_get_binplugin_by_name (bin, bin->force);",
          "1623:  }",
          "1624:  if (!plugin) {",
          "1625:   if (pluginname) {",
          "1626:    plugin = r_bin_get_binplugin_by_name (bin, pluginname);",
          "1627:   }",
          "1628:   if (!plugin) {",
          "1629:    plugin = r_bin_get_binplugin_by_bytes (bin, bytes, sz);",
          "1630:    if (!plugin) {",
          "1631:     plugin = r_bin_get_binplugin_any (bin);",
          "1632:    }",
          "1633:   }",
          "1634:  }",
          "1636:  o = r_bin_object_new (bf, plugin, baseaddr, loadaddr, 0, r_buf_size (bf->buf));",
          "1639:  if (o && !o->size) {",
          "1640:   o->size = file_sz;",
          "1641:  }",
          "1643:  if (!o) {",
          "1644:   if (bf && binfile_created) {",
          "1645:    r_list_delete_data (bin->binfiles, bf);",
          "1646:   }",
          "1647:   return NULL;",
          "1648:  }",
          "1650:  if (strcmp (plugin->name, \"any\")) {",
          "1651:   bf->narch = 1;",
          "1652:  }",
          "1655:  return bf;",
          "1656: }",
          "1658: static void plugin_free(RBinPlugin *p) {",
          "",
          "[Added Lines]",
          "588: R_API RBinPlugin *r_bin_get_binplugin_any(RBin *bin) {",
          "592: static void r_bin_plugin_free(RBinPlugin *p) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1889: R_API void r_bin_set_baddr(RBin *bin, ut64 baddr) {",
          "1890:  RBinObject *o = r_bin_cur_object (bin);",
          "1893: }",
          "",
          "[Removed Lines]",
          "1891:  binobj_set_baddr (o, baddr);",
          "",
          "[Added Lines]",
          "825:  r_bin_object_set_baddr (o, baddr);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2007:  if (plugin && plugin->strings) {",
          "2008:   o->strings = plugin->strings (a);",
          "2009:  } else {",
          "2011:  }",
          "2012:  if (bin->debase64) {",
          "2014:  }",
          "2015:  return o->strings;",
          "2016: }",
          "",
          "[Removed Lines]",
          "2010:   o->strings = get_strings (a, bin->minstrlen, 0);",
          "2013:   filterStrings (bin, o->strings);",
          "",
          "[Added Lines]",
          "943:   o->strings = r_bin_file_get_strings (a, bin->minstrlen, 0);",
          "946:   r_bin_object_filter_strings (o);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2121:  bin->filter_rules = UT64_MAX;",
          "2122:  bin->sdb = sdb_new0 ();",
          "2123:  bin->cb_printf = (PrintfCallback)printf;",
          "2125:  bin->minstrlen = 0;",
          "2126:  bin->strpurge = NULL;",
          "2127:  bin->want_dbginfo = true;",
          "",
          "[Removed Lines]",
          "2124:  bin->plugins = r_list_newf ((RListFree)plugin_free);",
          "",
          "[Added Lines]",
          "1057:  bin->plugins = r_list_newf ((RListFree)r_bin_plugin_free);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2161:  return bin;",
          "2162: }",
          "2166:  RBinFile *binfile = r_bin_file_find_by_arch_bits (bin, arch, bits, name);",
          "2167:  RBinObject *obj = NULL;",
          "2168:  if (binfile) {",
          "",
          "[Removed Lines]",
          "2164: R_API int r_bin_use_arch(RBin *bin, const char *arch, int bits,",
          "2165:      const char *name) {",
          "",
          "[Added Lines]",
          "1097: R_API int r_bin_use_arch(RBin *bin, const char *arch, int bits, const char *name) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2195:  return (binfile && r_bin_file_set_cur_binfile_obj (bin, binfile, obj));",
          "2196: }",
          "2255:  RBinObject *obj = NULL;",
          "2256:  name = !name && cur? cur->file: name;",
          "2258:  if (binfile && name) {",
          "2259:   obj = r_bin_object_find_by_arch_bits (binfile, arch, bits, name);",
          "2260:  }",
          "2262: }",
          "2264: R_API int r_bin_select_object(RBinFile *binfile, const char *arch, int bits,",
          "2265:           const char *name) {",
          "2340: }",
          "2342: R_API int r_bin_select_by_ids(RBin *bin, ut32 binfile_id, ut32 binobj_id) {",
          "",
          "[Removed Lines]",
          "2198: R_API RBinObject *r_bin_object_find_by_arch_bits(RBinFile *binfile,",
          "2199:         const char *arch, int bits,",
          "2200:         const char *name) {",
          "2201:  RBinObject *obj = NULL;",
          "2202:  RListIter *iter = NULL;",
          "2203:  RBinInfo *info = NULL;",
          "2204:  r_list_foreach (binfile->objs, iter, obj) {",
          "2205:   info = obj->info;",
          "2206:   if (info && info->arch && info->file &&",
          "2207:      (bits == info->bits) &&",
          "2208:    !strcmp (info->arch, arch) &&",
          "2209:    !strcmp (info->file, name)) {",
          "2210:    break;",
          "2211:   }",
          "2212:   obj = NULL;",
          "2213:  }",
          "2214:  return obj;",
          "2215: }",
          "2217: R_API RBinFile *r_bin_file_find_by_arch_bits(RBin *bin, const char *arch,",
          "2218:            int bits, const char *name) {",
          "2219:  RListIter *iter;",
          "2220:  RBinFile *binfile = NULL;",
          "2221:  RBinXtrData *xtr_data;",
          "2223:  if (!name || !arch) {",
          "2224:   return NULL;",
          "2225:  }",
          "2226:  r_list_foreach (bin->binfiles, iter, binfile) {",
          "2227:   RListIter *iter_xtr;",
          "2228:   if (!binfile->xtr_data) {",
          "2229:    continue;",
          "2230:   }",
          "2232:   r_list_foreach (binfile->xtr_data, iter_xtr, xtr_data) {",
          "2233:    if (xtr_data->metadata && xtr_data->metadata->arch) {",
          "2234:     char *iter_arch = xtr_data->metadata->arch;",
          "2235:     int iter_bits = xtr_data->metadata->bits;",
          "2236:     if (bits == iter_bits && !strcmp (iter_arch, arch)) {",
          "2237:      if (!xtr_data->loaded) {",
          "2238:       if (!r_bin_file_object_new_from_xtr_data (",
          "2239:            bin, binfile, xtr_data->baddr,",
          "2240:            xtr_data->laddr, xtr_data)) {",
          "2241:        return NULL;",
          "2242:       }",
          "2243:       return binfile;",
          "2244:      }",
          "2245:     }",
          "2246:    }",
          "2247:   }",
          "2248:  }",
          "2249:  return binfile;",
          "2250: }",
          "2252: R_API int r_bin_select(RBin *bin, const char *arch, int bits,",
          "2253:    const char *name) {",
          "2254:  RBinFile *cur = r_bin_cur (bin), *binfile = NULL;",
          "2257:  binfile = r_bin_file_find_by_arch_bits (bin, arch, bits, name);",
          "2261:  return binfile && r_bin_file_set_cur_binfile_obj (bin, binfile, obj);",
          "2266:  RBinObject *obj = binfile ? r_bin_object_find_by_arch_bits (",
          "2267:          binfile, arch, bits, name) :",
          "2268:         NULL;",
          "2269:  return obj &&",
          "2270:         r_bin_file_set_cur_binfile_obj (binfile->rbin, binfile, obj);",
          "2271: }",
          "2273: static RBinObject *r_bin_file_object_find_by_id(RBinFile *binfile,",
          "2274:        ut32 binobj_id) {",
          "2275:  RBinObject *obj;",
          "2276:  RListIter *iter;",
          "2277:  if (binfile)  {",
          "2278:   r_list_foreach (binfile->objs, iter, obj) {",
          "2279:    if (obj->id == binobj_id) {",
          "2280:     return obj;",
          "2281:    }",
          "2282:   }",
          "2283:  }",
          "2284:  return NULL;",
          "2285: }",
          "2287: static RBinFile *r_bin_file_find_by_object_id(RBin *bin, ut32 binobj_id) {",
          "2288:  RListIter *iter;",
          "2289:  RBinFile *binfile;",
          "2290:  r_list_foreach (bin->binfiles, iter, binfile) {",
          "2291:   if (r_bin_file_object_find_by_id (binfile, binobj_id)) {",
          "2292:    return binfile;",
          "2293:   }",
          "2294:  }",
          "2295:  return NULL;",
          "2296: }",
          "2298: static RBinFile *r_bin_file_find_by_id(RBin *bin, ut32 binfile_id) {",
          "2299:  RBinFile *binfile = NULL;",
          "2300:  RListIter *iter = NULL;",
          "2301:  r_list_foreach (bin->binfiles, iter, binfile) {",
          "2302:   if (binfile->id == binfile_id) {",
          "2303:    break;",
          "2304:   }",
          "2305:   binfile = NULL;",
          "2306:  }",
          "2307:  return binfile;",
          "2308: }",
          "2310: R_API int r_bin_object_delete(RBin *bin, ut32 binfile_id, ut32 binobj_id) {",
          "2311:  RBinFile *binfile = NULL; //, *cbinfile = r_bin_cur (bin);",
          "2312:  RBinObject *obj = NULL;",
          "2313:  int res = false;",
          "2315:  if (binfile_id == UT32_MAX) {",
          "2316:   binfile = r_bin_file_find_by_object_id (bin, binobj_id);",
          "2317:   obj = binfile? r_bin_file_object_find_by_id (binfile, binobj_id): NULL;",
          "2318:  } else if (binobj_id == UT32_MAX) {",
          "2319:   binfile = r_bin_file_find_by_id (bin, binfile_id);",
          "2320:   obj = binfile? binfile->o: NULL;",
          "2321:  } else {",
          "2322:   binfile = r_bin_file_find_by_id (bin, binfile_id);",
          "2323:   obj = binfile? r_bin_file_object_find_by_id (binfile, binobj_id): NULL;",
          "2324:  }",
          "2325:  if (binfile && bin->cur == binfile) {",
          "2326:   bin->cur = NULL;",
          "2327:  }",
          "2329:  if (binfile) {",
          "2330:   binfile->o = NULL;",
          "2331:   r_list_delete_data (binfile->objs, obj);",
          "2332:   RBinObject *newObj = (RBinObject *)r_list_get_n (binfile->objs, 0);",
          "2333:   res = newObj && binfile &&",
          "2334:         r_bin_file_set_cur_binfile_obj (bin, binfile, newObj);",
          "2335:  }",
          "2336:  if (binfile && obj && r_list_length (binfile->objs) == 0) {",
          "2337:   r_list_delete_data (bin->binfiles, binfile);",
          "2338:  }",
          "2339:  return res;",
          "",
          "[Added Lines]",
          "1130: R_API int r_bin_select(RBin *bin, const char *arch, int bits, const char *name) {",
          "1131:  RBinFile *cur = r_bin_cur (bin);",
          "1134:  RBinFile *binfile = r_bin_file_find_by_arch_bits (bin, arch, bits, name);",
          "1138:  return r_bin_file_set_cur_binfile_obj (bin, binfile, obj);",
          "1143:  RBinObject *obj = r_bin_object_find_by_arch_bits (binfile, arch, bits, name);",
          "1144:  return r_bin_file_set_cur_binfile_obj (binfile->rbin, binfile, obj);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2810:  return o ? o->size : 0;",
          "2811: }",
          "2921: R_API RBinFile *r_bin_cur(RBin *bin) {",
          "2922:  return bin? bin->cur: NULL;",
          "2923: }",
          "",
          "[Removed Lines]",
          "2813: R_API int r_bin_file_delete_all(RBin *bin) {",
          "2814:  int counter = 0;",
          "2815:  if (bin) {",
          "2816:   counter = r_list_length (bin->binfiles);",
          "2817:   r_list_purge (bin->binfiles);",
          "2818:   bin->cur = NULL;",
          "2819:  }",
          "2820:  return counter;",
          "2821: }",
          "2823: R_API int r_bin_file_delete(RBin *bin, ut32 bin_fd) {",
          "2824:  RListIter *iter;",
          "2825:  RBinFile *bf;",
          "2826:  RBinFile *cur = r_bin_cur (bin);",
          "2827:  if (bin && cur) {",
          "2828:   r_list_foreach (bin->binfiles, iter, bf) {",
          "2829:    if (bf && bf->fd == bin_fd) {",
          "2830:     if (cur->fd == bin_fd) {",
          "2832:      bin->cur = NULL;",
          "2833:     }",
          "2834:     r_list_delete (bin->binfiles, iter);",
          "2835:     return 1;",
          "2836:    }",
          "2837:   }",
          "2838:  }",
          "2839:  return 0;",
          "2840: }",
          "2842: R_API RBinFile *r_bin_file_find_by_fd(RBin *bin, ut32 bin_fd) {",
          "2843:  RListIter *iter;",
          "2844:  RBinFile *bf;",
          "2845:  if (bin) {",
          "2846:   r_list_foreach (bin->binfiles, iter, bf) {",
          "2847:    if (bf && bf->fd == bin_fd) {",
          "2848:     return bf;",
          "2849:    }",
          "2850:   }",
          "2851:  }",
          "2852:  return NULL;",
          "2853: }",
          "2855: R_API RBinFile *r_bin_file_find_by_name(RBin *bin, const char *name) {",
          "2856:  RListIter *iter;",
          "2857:  RBinFile *bf = NULL;",
          "2858:  if (!bin || !name) {",
          "2859:   return NULL;",
          "2860:  }",
          "2861:  r_list_foreach (bin->binfiles, iter, bf) {",
          "2862:   if (bf && bf->file && !strcmp (bf->file, name)) {",
          "2863:    break;",
          "2864:   }",
          "2865:   bf = NULL;",
          "2866:  }",
          "2867:  return bf;",
          "2868: }",
          "2870: R_API RBinFile *r_bin_file_find_by_name_n(RBin *bin, const char *name, int idx) {",
          "2871:  RListIter *iter;",
          "2872:  RBinFile *bf = NULL;",
          "2873:  int i = 0;",
          "2874:  if (!bin) {",
          "2875:   return bf;",
          "2876:  }",
          "2878:  r_list_foreach (bin->binfiles, iter, bf) {",
          "2879:   if (bf && bf->file && !strcmp (bf->file, name)) {",
          "2880:    if (i == idx) {",
          "2881:     break;",
          "2882:    }",
          "2883:    i++;",
          "2884:   }",
          "2885:   bf = NULL;",
          "2886:  }",
          "2887:  return bf;",
          "2888: }",
          "2890: R_API int r_bin_file_set_cur_by_fd(RBin *bin, ut32 bin_fd) {",
          "2891:  RBinFile *bf = r_bin_file_find_by_fd (bin, bin_fd);",
          "2892:  return r_bin_file_set_cur_binfile (bin, bf);",
          "2893: }",
          "2895: R_API int r_bin_file_set_cur_binfile_obj(RBin *bin, RBinFile *bf, RBinObject *obj) {",
          "2896:  RBinPlugin *plugin = NULL;",
          "2897:  if (!bin || !bf || !obj) {",
          "2898:   return false;",
          "2899:  }",
          "2900:  bin->file = bf->file;",
          "2901:  bin->cur = bf;",
          "2902:  bin->narch = bf->narch;",
          "2903:  bf->o = obj;",
          "2904:  plugin = r_bin_file_cur_plugin (bf);",
          "2905:  if (bin->minstrlen < 1) {",
          "2906:   bin->minstrlen = plugin? plugin->minstrlen: bin->minstrlen;",
          "2907:  }",
          "2908:  return true;",
          "2909: }",
          "2911: R_API int r_bin_file_set_cur_binfile(RBin *bin, RBinFile *bf) {",
          "2912:  RBinObject *obj = bf? bf->o: NULL;",
          "2913:  return obj? r_bin_file_set_cur_binfile_obj (bin, bf, obj): false;",
          "2914: }",
          "2916: R_API int r_bin_file_set_cur_by_name(RBin *bin, const char *name) {",
          "2917:  RBinFile *bf = r_bin_file_find_by_name (bin, name);",
          "2918:  return r_bin_file_set_cur_binfile (bin, bf);",
          "2919: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libr/bin/file.c||libr/bin/file.c": [
          "File: libr/bin/file.c -> libr/bin/file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: #include <r_bin.h>",
          "6: #define R_STRING_SCAN_BUFFER_SIZE 2048",
          "8: static void print_string(RBinString *string, RBinFile *bf) {",
          "9:  if (!string || !bf) {",
          "10:   return;",
          "11:  }",
          "12:  int mode = bf->strmode;",
          "13:  ut64 addr , vaddr;",
          "14:  RBin *bin = bf->rbin;",
          "15:  const char *section_name, *type_string;",
          "16:  RIO *io = bin->iob.io;",
          "17:  if (!io) {",
          "18:   return;",
          "19:  }",
          "20:  RBinSection *s = r_bin_get_section_at (bf->o, string->paddr, false);",
          "21:  if (s) {",
          "22:   string->vaddr = s->vaddr + (string->paddr - s->paddr);",
          "23:  }",
          "24:  section_name = s ? s->name : \"\";",
          "25:  type_string = r_bin_string_type (string->type);",
          "26:  vaddr = addr = r_bin_get_vaddr (bin, string->paddr, string->vaddr);",
          "28:  switch(mode) {",
          "29:  case MODE_SIMPLE :",
          "30:   io->cb_printf (\"0x%08\" PFMT64x \" %s\\n\", addr, string->string);",
          "31:   break;",
          "32:  case MODE_RADARE :",
          "33:   {",
          "34:   char *f_name, *nstr;",
          "35:   f_name = strdup (string->string);",
          "36:   r_name_filter (f_name, 512);",
          "37:   if (bin->prefix) {",
          "38:    nstr = r_str_newf (\"%s.str.%s\", bin->prefix, f_name);",
          "39:    io->cb_printf (\"f %s.str.%s %\"PFMT64d\" @ 0x%08\"PFMT64x\"\\n\"",
          "40:      \"Cs %\"PFMT64d\" @ 0x%08\"PFMT64x\"\\n\",",
          "41:      bin->prefix, f_name, string->size, addr,",
          "42:      string->size, addr);",
          "43:   } else {",
          "44:    nstr = r_str_newf (\"str.%s\", f_name);",
          "45:    io->cb_printf (\"f str.%s %\"PFMT64d\" @ 0x%08\"PFMT64x\"\\n\"",
          "46:      \"Cs %\"PFMT64d\" @ 0x%08\"PFMT64x\"\\n\",",
          "47:      f_name, string->size, addr,",
          "48:      string->size, addr);",
          "49:   }",
          "50:   free (nstr);",
          "51:   free (f_name);",
          "52:   break;",
          "53:   }",
          "54:  case MODE_PRINT :",
          "55:   io->cb_printf (\"%03u 0x%08\"PFMT64x\" 0x%08\"",
          "56:     PFMT64x\" %3u %3u \"",
          "57:     \"(%s) %5s %s\\n\",",
          "58:     string->ordinal, string->paddr, vaddr,",
          "59:     string->length, string->size,",
          "60:     section_name, type_string, string->string);",
          "61:   break;",
          "62:  }",
          "63: }",
          "66: static int string_scan_range(RList *list, RBinFile *bf, int min,",
          "67:          const ut64 from, const ut64 to, int type) {",
          "68:  ut8 tmp[R_STRING_SCAN_BUFFER_SIZE];",
          "69:  ut64 str_start, needle = from;",
          "70:  int count = 0, i, rc, runes;",
          "71:  const ut8 *buf = r_buf_buffer (bf->buf);",
          "72:  int str_type = R_STRING_TYPE_DETECT;",
          "74:  if (type == -1) {",
          "75:   type = R_STRING_TYPE_DETECT;",
          "76:  }",
          "77:  if (!buf || !min) {",
          "78:   return -1;",
          "79:  }",
          "80:  while (needle < to) {",
          "81:   rc = r_utf8_decode (buf + needle, to - needle, NULL);",
          "82:   if (!rc) {",
          "83:    needle++;",
          "84:    continue;",
          "85:   }",
          "87:   if (type == R_STRING_TYPE_DETECT) {",
          "88:    char *w = (char *)buf + needle + rc;",
          "89:    if ((to - needle) > 4) {",
          "90:     bool is_wide32 = needle + rc + 2 < to && !w[0] && !w[1] && !w[2] && w[3] && !w[4];",
          "91:     if (is_wide32) {",
          "92:      str_type = R_STRING_TYPE_WIDE32;",
          "93:     } else {",
          "94:      bool is_wide = needle + rc + 2 < to && !w[0] && w[1] && !w[2];",
          "95:      str_type = is_wide? R_STRING_TYPE_WIDE: R_STRING_TYPE_ASCII;",
          "96:     }",
          "97:    } else {",
          "98:     str_type = R_STRING_TYPE_ASCII;",
          "99:    }",
          "100:   } else {",
          "101:    str_type = type;",
          "102:   }",
          "105:   runes = 0;",
          "106:   str_start = needle;",
          "109:   for (rc = i = 0; i < sizeof (tmp) - 3 && needle < to; i += rc) {",
          "110:    RRune r = {0};",
          "112:    if (str_type == R_STRING_TYPE_WIDE32) {",
          "113:     rc = r_utf32le_decode (buf + needle, to - needle, &r);",
          "114:     if (rc) {",
          "115:      rc = 4;",
          "116:     }",
          "117:    } else if (str_type == R_STRING_TYPE_WIDE) {",
          "118:     rc = r_utf16le_decode (buf + needle, to - needle, &r);",
          "119:     if (rc == 1) {",
          "120:      rc = 2;",
          "121:     }",
          "122:    } else {",
          "123:     rc = r_utf8_decode (buf + needle, to - needle, &r);",
          "124:     if (rc > 1) {",
          "125:      str_type = R_STRING_TYPE_UTF8;",
          "126:     }",
          "127:    }",
          "130:    if (!rc) {",
          "131:     needle++;",
          "132:     break;",
          "133:    }",
          "135:    needle += rc;",
          "137:    if (r_isprint (r) && r != '\\\\') {",
          "138:     if (str_type == R_STRING_TYPE_WIDE32) {",
          "139:      if (r == 0xff) {",
          "140:       r = 0;",
          "141:      }",
          "142:     }",
          "143:     rc = r_utf8_encode (&tmp[i], r);",
          "144:     runes++;",
          "146:    } else if (r && r < 0x100 && strchr (\"\\b\\v\\f\\n\\r\\t\\a\\033\\\\\", (char)r)) {",
          "147:     if ((i + 32) < sizeof (tmp) && r < 93) {",
          "148:      tmp[i + 0] = '\\\\';",
          "149:      tmp[i + 1] = \"       abtnvfr             e  \"",
          "150:                   \"                              \"",
          "151:                   \"                              \"",
          "152:                   \"  \\\\\"[r];",
          "153:     } else {",
          "155:      break;",
          "156:     }",
          "157:     rc = 2;",
          "158:     runes++;",
          "159:    } else {",
          "161:     break;",
          "162:    }",
          "163:   }",
          "165:   tmp[i++] = '\\0';",
          "167:   if (runes >= min) {",
          "168:    if (str_type == R_STRING_TYPE_ASCII) {",
          "170:     int j;",
          "171:     for (j = 0; j < i; j++) {",
          "172:      char ch = tmp[j];",
          "173:      if (ch != '\\n' && ch != '\\r' && ch != '\\t') {",
          "174:       if (!IS_PRINTABLE (tmp[j])) {",
          "175:        continue;",
          "176:       }",
          "177:      }",
          "178:     }",
          "179:    }",
          "180:    RBinString *bs = R_NEW0 (RBinString);",
          "181:    if (!bs) {",
          "182:     break;",
          "183:    }",
          "184:    bs->type = str_type;",
          "185:    bs->length = runes;",
          "186:    bs->size = needle - str_start;",
          "187:    bs->ordinal = count++;",
          "189:    switch (str_type) {",
          "190:    case R_STRING_TYPE_WIDE:",
          "191:     if (str_start > 1) {",
          "192:      const ut8 *p = buf + str_start - 2;",
          "193:      if (p[0] == 0xff && p[1] == 0xfe) {",
          "194:       str_start -= 2; // \\xff\\xfe",
          "195:      }",
          "196:     }",
          "197:     break;",
          "198:    case R_STRING_TYPE_WIDE32:",
          "199:     if (str_start > 3) {",
          "200:      const ut8 *p = buf + str_start - 4;",
          "201:      if (p[0] == 0xff && p[1] == 0xfe) {",
          "202:       str_start -= 4; // \\xff\\xfe\\x00\\x00",
          "203:      }",
          "204:     }",
          "205:     break;",
          "206:    }",
          "207:    bs->paddr = bs->vaddr = str_start;",
          "208:    bs->string = r_str_ndup ((const char *)tmp, i);",
          "209:    if (list) {",
          "210:     r_list_append (list, bs);",
          "211:    } else {",
          "212:     print_string (bs, bf);",
          "213:     r_bin_string_free (bs);",
          "214:    }",
          "215:   }",
          "216:  }",
          "217:  return count;",
          "218: }",
          "222: R_API RBinFile *r_bin_file_new(RBin *bin, const char *file, const ut8 *bytes, ut64 sz, ut64 file_sz, int rawstr, int fd, const char *xtrname, Sdb *sdb, bool steal_ptr) {",
          "223:  RBinFile *binfile = R_NEW0 (RBinFile);",
          "224:  if (!binfile) {",
          "225:   return NULL;",
          "226:  }",
          "227:  if (!r_id_pool_grab_id (bin->file_ids, &binfile->id)) {",
          "228:   if (steal_ptr) { // we own the ptr, free on error",
          "229:    free ((void*) bytes);",
          "230:   }",
          "231:   free (binfile);  //no id means no binfile",
          "232:   return NULL;",
          "233:  }",
          "234:  int res = r_bin_file_set_bytes (binfile, bytes, sz, steal_ptr);",
          "235:  if (!res && steal_ptr) { // we own the ptr, free on error",
          "236:   free((void*) bytes);",
          "237:  }",
          "238:  binfile->rbin = bin;",
          "239:  binfile->file = file? strdup (file): NULL;",
          "240:  binfile->rawstr = rawstr;",
          "241:  binfile->fd = fd;",
          "242:  binfile->curxtr = r_bin_get_xtrplugin_by_name (bin, xtrname);",
          "243:  binfile->sdb = sdb;",
          "244:  binfile->size = file_sz;",
          "245:  binfile->xtr_data = r_list_newf ((RListFree)r_bin_xtrdata_free);",
          "246:  binfile->objs = r_list_newf ((RListFree)r_bin_object_free);",
          "247:  binfile->xtr_obj  = NULL;",
          "249:  if (!binfile->buf) {",
          "251:   binfile->buf = r_buf_new ();",
          "253:  }",
          "255:  if (sdb) {",
          "256:   binfile->sdb = sdb_ns (sdb, sdb_fmt (0, \"fd.%d\", fd), 1);",
          "257:   sdb_set (binfile->sdb, \"archs\", \"0:0:x86:32\", 0); // x86??",
          "263:   binfile->sdb_addrinfo = sdb_ns (binfile->sdb, \"addrinfo\", 1);",
          "264:   binfile->sdb_addrinfo->refs++;",
          "265:   sdb_ns_set (sdb, \"cur\", binfile->sdb);",
          "266:   binfile->sdb->refs++;",
          "267:  }",
          "268:  return binfile;",
          "269: }",
          "271: R_API bool r_bin_file_object_new_from_xtr_data(RBin *bin, RBinFile *bf, ut64 baseaddr, ut64 loadaddr, RBinXtrData *data) {",
          "272:  RBinObject *o = NULL;",
          "273:  RBinPlugin *plugin = NULL;",
          "274:  ut8* bytes;",
          "275:  ut64 offset = data? data->offset: 0;",
          "276:  ut64 sz = data ? data->size : 0;",
          "277:  if (!data || !bf) {",
          "278:   return false;",
          "279:  }",
          "286:  bytes = data->buffer;",
          "287:  if (!bytes) {",
          "288:   return false;",
          "289:  }",
          "290:  plugin = r_bin_get_binplugin_by_bytes (bin, (const ut8*)bytes, sz);",
          "291:  if (!plugin) {",
          "292:   plugin = r_bin_get_binplugin_any (bin);",
          "293:  }",
          "294:  r_buf_free (bf->buf);",
          "295:  bf->buf = r_buf_new_with_bytes ((const ut8*)bytes, data->size);",
          "297:  o = r_bin_object_new (bf, plugin, baseaddr, loadaddr, offset, sz);",
          "300:  if (!o) {",
          "301:   return false;",
          "302:  }",
          "303:  if (o && !o->size) {",
          "304:   o->size = sz;",
          "305:  }",
          "306:  bf->narch = data->file_count;",
          "307:  if (!o->info) {",
          "308:   o->info = R_NEW0 (RBinInfo);",
          "309:  }",
          "310:  free (o->info->file);",
          "311:  free (o->info->arch);",
          "312:  free (o->info->machine);",
          "313:  free (o->info->type);",
          "314:  o->info->file = strdup (bf->file);",
          "315:  o->info->arch = strdup (data->metadata->arch);",
          "316:  o->info->machine = strdup (data->metadata->machine);",
          "317:  o->info->type = strdup (data->metadata->type);",
          "318:  o->info->bits = data->metadata->bits;",
          "319:  o->info->has_crypto = bf->o->info->has_crypto;",
          "320:  data->loaded = true;",
          "321:  return true;",
          "322: }",
          "324: R_API RBinFile *r_bin_file_new_from_bytes(RBin *bin, const char *file, const ut8 *bytes, ut64 sz, ut64 file_sz, int rawstr, ut64 baseaddr, ut64 loadaddr, int fd, const char *pluginname, const char *xtrname, ut64 offset, bool steal_ptr) {",
          "325:  ut8 binfile_created = false;",
          "326:  RBinPlugin *plugin = NULL;",
          "327:  RBinXtrPlugin *xtr = NULL;",
          "328:  RBinObject *o = NULL;",
          "329:  RBinFile *bf = NULL;",
          "330:  if (sz == UT64_MAX) {",
          "331:   return NULL;",
          "332:  }",
          "334:  if (xtrname) {",
          "335:   xtr = r_bin_get_xtrplugin_by_name (bin, xtrname);",
          "336:  }",
          "338:  if (xtr && xtr->check_bytes (bytes, sz)) {",
          "339:   return r_bin_file_xtr_load_bytes (bin, xtr, file,",
          "340:       bytes, sz, file_sz, baseaddr, loadaddr, 0,",
          "341:       fd, rawstr);",
          "342:  }",
          "344:  if (!bf) {",
          "345:   bf = r_bin_file_create_append (bin, file, bytes, sz, file_sz,",
          "346:             rawstr, fd, xtrname, steal_ptr);",
          "347:   if (!bf) {",
          "348:    if (!steal_ptr) { // we own the ptr, free on error",
          "349:     free ((void*) bytes);",
          "350:    }",
          "351:    return NULL;",
          "352:   }",
          "353:   binfile_created = true;",
          "354:  }",
          "356:  if (bin->force) {",
          "357:   plugin = r_bin_get_binplugin_by_name (bin, bin->force);",
          "358:  }",
          "359:  if (!plugin) {",
          "360:   if (pluginname) {",
          "361:    plugin = r_bin_get_binplugin_by_name (bin, pluginname);",
          "362:   }",
          "363:   if (!plugin) {",
          "364:    plugin = r_bin_get_binplugin_by_bytes (bin, bytes, sz);",
          "365:    if (!plugin) {",
          "366:     plugin = r_bin_get_binplugin_any (bin);",
          "367:    }",
          "368:   }",
          "369:  }",
          "371:  o = r_bin_object_new (bf, plugin, baseaddr, loadaddr, 0, r_buf_size (bf->buf));",
          "374:  if (o && !o->size) {",
          "375:   o->size = file_sz;",
          "376:  }",
          "378:  if (!o) {",
          "379:   if (bf && binfile_created) {",
          "380:    r_list_delete_data (bin->binfiles, bf);",
          "381:   }",
          "382:   return NULL;",
          "383:  }",
          "385:  if (strcmp (plugin->name, \"any\")) {",
          "386:   bf->narch = 1;",
          "387:  }",
          "390:  return bf;",
          "391: }",
          "393: R_API RBinFile *r_bin_file_find_by_arch_bits(RBin *bin, const char *arch, int bits, const char *name) {",
          "394:  RListIter *iter;",
          "395:  RBinFile *binfile = NULL;",
          "396:  RBinXtrData *xtr_data;",
          "398:  if (!name || !arch) {",
          "399:   return NULL;",
          "400:  }",
          "401:  r_list_foreach (bin->binfiles, iter, binfile) {",
          "402:   RListIter *iter_xtr;",
          "403:   if (!binfile->xtr_data) {",
          "404:    continue;",
          "405:   }",
          "407:   r_list_foreach (binfile->xtr_data, iter_xtr, xtr_data) {",
          "408:    if (xtr_data->metadata && xtr_data->metadata->arch) {",
          "409:     char *iter_arch = xtr_data->metadata->arch;",
          "410:     int iter_bits = xtr_data->metadata->bits;",
          "411:     if (bits == iter_bits && !strcmp (iter_arch, arch)) {",
          "412:      if (!xtr_data->loaded) {",
          "413:       if (!r_bin_file_object_new_from_xtr_data (",
          "414:            bin, binfile, xtr_data->baddr,",
          "415:            xtr_data->laddr, xtr_data)) {",
          "416:        return NULL;",
          "417:       }",
          "418:       return binfile;",
          "419:      }",
          "420:     }",
          "421:    }",
          "422:   }",
          "423:  }",
          "424:  return binfile;",
          "425: }",
          "427: R_API RBinObject *r_bin_file_object_find_by_id(RBinFile *binfile, ut32 binobj_id) {",
          "428:  RBinObject *obj;",
          "429:  RListIter *iter;",
          "430:  if (binfile)  {",
          "431:   r_list_foreach (binfile->objs, iter, obj) {",
          "432:    if (obj->id == binobj_id) {",
          "433:     return obj;",
          "434:    }",
          "435:   }",
          "436:  }",
          "437:  return NULL;",
          "438: }",
          "440: R_API RBinFile *r_bin_file_find_by_object_id(RBin *bin, ut32 binobj_id) {",
          "441:  RListIter *iter;",
          "442:  RBinFile *binfile;",
          "443:  r_list_foreach (bin->binfiles, iter, binfile) {",
          "444:   if (r_bin_file_object_find_by_id (binfile, binobj_id)) {",
          "445:    return binfile;",
          "446:   }",
          "447:  }",
          "448:  return NULL;",
          "449: }",
          "451: R_API RBinFile *r_bin_file_find_by_id(RBin *bin, ut32 binfile_id) {",
          "452:  RBinFile *binfile = NULL;",
          "453:  RListIter *iter = NULL;",
          "454:  r_list_foreach (bin->binfiles, iter, binfile) {",
          "455:   if (binfile->id == binfile_id) {",
          "456:    break;",
          "457:   }",
          "458:   binfile = NULL;",
          "459:  }",
          "460:  return binfile;",
          "461: }",
          "463: R_API int r_bin_file_object_add(RBinFile *binfile, RBinObject *o) {",
          "464:  if (!o) {",
          "465:   return false;",
          "466:  }",
          "467:  r_list_append (binfile->objs, o);",
          "468:  r_bin_file_set_cur_binfile_obj (binfile->rbin, binfile, o);",
          "469:  return true;",
          "470: }",
          "472: R_API int r_bin_file_delete_all(RBin *bin) {",
          "473:  int counter = 0;",
          "474:  if (bin) {",
          "475:   counter = r_list_length (bin->binfiles);",
          "476:   r_list_purge (bin->binfiles);",
          "477:   bin->cur = NULL;",
          "478:  }",
          "479:  return counter;",
          "480: }",
          "482: R_API int r_bin_file_delete(RBin *bin, ut32 bin_fd) {",
          "483:  RListIter *iter;",
          "484:  RBinFile *bf;",
          "485:  RBinFile *cur = r_bin_cur (bin);",
          "486:  if (bin && cur) {",
          "487:   r_list_foreach (bin->binfiles, iter, bf) {",
          "488:    if (bf && bf->fd == bin_fd) {",
          "489:     if (cur->fd == bin_fd) {",
          "491:      bin->cur = NULL;",
          "492:     }",
          "493:     r_list_delete (bin->binfiles, iter);",
          "494:     return 1;",
          "495:    }",
          "496:   }",
          "497:  }",
          "498:  return 0;",
          "499: }",
          "501: R_API RBinFile *r_bin_file_find_by_fd(RBin *bin, ut32 bin_fd) {",
          "502:  RListIter *iter;",
          "503:  RBinFile *bf;",
          "504:  if (bin) {",
          "505:   r_list_foreach (bin->binfiles, iter, bf) {",
          "506:    if (bf && bf->fd == bin_fd) {",
          "507:     return bf;",
          "508:    }",
          "509:   }",
          "510:  }",
          "511:  return NULL;",
          "512: }",
          "514: R_API RBinFile *r_bin_file_find_by_name(RBin *bin, const char *name) {",
          "515:  RListIter *iter;",
          "516:  RBinFile *bf = NULL;",
          "517:  if (!bin || !name) {",
          "518:   return NULL;",
          "519:  }",
          "520:  r_list_foreach (bin->binfiles, iter, bf) {",
          "521:   if (bf && bf->file && !strcmp (bf->file, name)) {",
          "522:    break;",
          "523:   }",
          "524:   bf = NULL;",
          "525:  }",
          "526:  return bf;",
          "527: }",
          "529: R_API RBinFile *r_bin_file_find_by_name_n(RBin *bin, const char *name, int idx) {",
          "530:  RListIter *iter;",
          "531:  RBinFile *bf = NULL;",
          "532:  int i = 0;",
          "533:  if (!bin) {",
          "534:   return bf;",
          "535:  }",
          "537:  r_list_foreach (bin->binfiles, iter, bf) {",
          "538:   if (bf && bf->file && !strcmp (bf->file, name)) {",
          "539:    if (i == idx) {",
          "540:     break;",
          "541:    }",
          "542:    i++;",
          "543:   }",
          "544:   bf = NULL;",
          "545:  }",
          "546:  return bf;",
          "547: }",
          "549: R_API int r_bin_file_set_cur_by_fd(RBin *bin, ut32 bin_fd) {",
          "550:  RBinFile *bf = r_bin_file_find_by_fd (bin, bin_fd);",
          "551:  return r_bin_file_set_cur_binfile (bin, bf);",
          "552: }",
          "554: R_API int r_bin_file_set_cur_binfile_obj(RBin *bin, RBinFile *bf, RBinObject *obj) {",
          "555:  RBinPlugin *plugin = NULL;",
          "556:  if (!bin || !bf || !obj) {",
          "557:   return false;",
          "558:  }",
          "559:  bin->file = bf->file;",
          "560:  bin->cur = bf;",
          "561:  bin->narch = bf->narch;",
          "562:  bf->o = obj;",
          "563:  plugin = r_bin_file_cur_plugin (bf);",
          "564:  if (bin->minstrlen < 1) {",
          "565:   bin->minstrlen = plugin? plugin->minstrlen: bin->minstrlen;",
          "566:  }",
          "567:  return true;",
          "568: }",
          "570: R_API int r_bin_file_set_cur_binfile(RBin *bin, RBinFile *bf) {",
          "571:  RBinObject *obj = bf? bf->o: NULL;",
          "572:  return obj? r_bin_file_set_cur_binfile_obj (bin, bf, obj): false;",
          "573: }",
          "575: R_API int r_bin_file_set_cur_by_name(RBin *bin, const char *name) {",
          "576:  RBinFile *bf = r_bin_file_find_by_name (bin, name);",
          "577:  return r_bin_file_set_cur_binfile (bin, bf);",
          "578: }",
          "580: R_API RBinObject *r_bin_file_object_get_cur(RBinFile *binfile) {",
          "581:  return binfile? binfile->o: NULL;",
          "582: }",
          "584: R_API int r_bin_file_cur_set_plugin(RBinFile *binfile, RBinPlugin *plugin) {",
          "585:  if (binfile && binfile->o) {",
          "586:   binfile->o->plugin = plugin;",
          "587:   return true;",
          "588:  }",
          "589:  return false;",
          "590: }",
          "592: R_API int r_bin_file_deref_by_bind(RBinBind *binb) {",
          "593:  RBin *bin = binb? binb->bin: NULL;",
          "594:  RBinFile *a = r_bin_cur (bin);",
          "595:  return r_bin_file_deref (bin, a);",
          "596: }",
          "598: R_API int r_bin_file_deref(RBin *bin, RBinFile *a) {",
          "599:  RBinObject *o = r_bin_cur_object (bin);",
          "600:  int res = false;",
          "601:  if (a && !o) {",
          "603:   res = true;",
          "604:  } else if (a && o->referenced - 1 < 1) {",
          "606:   res = true;",
          "608:  } else if (o) {",
          "609:   o->referenced--;",
          "610:  }",
          "614:  if (bin) bin->cur = NULL;",
          "615:  return res;",
          "616: }",
          "618: R_API int r_bin_file_ref_by_bind(RBinBind *binb) {",
          "619:  RBin *bin = binb? binb->bin: NULL;",
          "620:  RBinFile *a = r_bin_cur (bin);",
          "621:  return r_bin_file_ref (bin, a);",
          "622: }",
          "624: R_API int r_bin_file_ref(RBin *bin, RBinFile *a) {",
          "625:  RBinObject *o = r_bin_cur_object (bin);",
          "626:  if (a && o) {",
          "627:   o->referenced--;",
          "628:   return true;",
          "629:  }",
          "630:  return false;",
          "631: }",
          "633: R_API void r_bin_file_free(void /*RBinFile*/ *bf_) {",
          "634:  RBinFile *a = bf_;",
          "635:  RBinPlugin *plugin = r_bin_file_cur_plugin (a);",
          "637:  if (!a) {",
          "638:   return;",
          "639:  }",
          "644:  if (plugin && plugin->destroy) {",
          "645:   plugin->destroy (a);",
          "646:  }",
          "647:  if (a->curxtr && a->curxtr->destroy && a->xtr_obj) {",
          "648:   a->curxtr->free_xtr ((void *)(a->xtr_obj));",
          "649:  }",
          "650:  r_buf_free (a->buf);",
          "652:  if (a && a->sdb_addrinfo) {",
          "653:   sdb_free (a->sdb_addrinfo);",
          "654:   a->sdb_addrinfo = NULL;",
          "655:  }",
          "656:  free (a->file);",
          "657:  a->o = NULL;",
          "658:  r_list_free (a->objs);",
          "659:  r_list_free (a->xtr_data);",
          "660:  r_id_pool_kick_id (a->rbin->file_ids, a->id);",
          "661:  memset (a, 0, sizeof (RBinFile));",
          "662:  free (a);",
          "663: }",
          "665: R_API RBinFile *r_bin_file_create_append(RBin *bin, const char *file, const ut8 *bytes, ut64 sz, ut64 file_sz, int rawstr, int fd, const char *xtrname, bool steal_ptr) {",
          "666:  RBinFile *bf = r_bin_file_new (bin, file, bytes, sz, file_sz, rawstr,",
          "667:            fd, xtrname, bin->sdb, steal_ptr);",
          "668:  if (bf) {",
          "669:   r_list_append (bin->binfiles, bf);",
          "670:  }",
          "671:  return bf;",
          "672: }",
          "676: R_API RBinFile *r_bin_file_xtr_load_bytes(RBin *bin, RBinXtrPlugin *xtr, const char *filename, const ut8 *bytes, ut64 sz, ut64 file_sz, ut64 baseaddr, ut64 loadaddr, int idx, int fd, int rawstr) {",
          "677:  if (!bin || !bytes) {",
          "678:   return NULL;",
          "679:  }",
          "680:  RBinFile *bf = r_bin_file_find_by_name (bin, filename);",
          "681:  if (!bf) {",
          "682:   bf = r_bin_file_create_append (bin, filename, bytes, sz,",
          "683:             file_sz, rawstr, fd, xtr->name, false);",
          "684:   if (!bf) {",
          "685:    return NULL;",
          "686:   }",
          "687:   if (!bin->cur) {",
          "688:    bin->cur = bf;",
          "689:   }",
          "690:  }",
          "691:  if (bf->xtr_data) {",
          "692:   r_list_free (bf->xtr_data);",
          "693:  }",
          "694:  if (xtr && bytes) {",
          "695:   RList *xtr_data_list = xtr->extractall_from_bytes (bin, bytes, sz);",
          "696:   RListIter *iter;",
          "697:   RBinXtrData *xtr;",
          "700:   r_list_foreach (xtr_data_list, iter, xtr) {",
          "701:    xtr->baddr = baseaddr? baseaddr : UT64_MAX;",
          "702:    xtr->laddr = loadaddr? loadaddr : UT64_MAX;",
          "703:   }",
          "704:   bf->loadaddr = loadaddr;",
          "705:   bf->xtr_data = xtr_data_list ? xtr_data_list : NULL;",
          "706:  }",
          "707:  return bf;",
          "708: }",
          "710: #define LIMIT_SIZE 0",
          "711: R_API int r_bin_file_set_bytes(RBinFile *binfile, const ut8 *bytes, ut64 sz, bool steal_ptr) {",
          "712:  if (!bytes) {",
          "713:   return false;",
          "714:  }",
          "715:  r_buf_free (binfile->buf);",
          "716:  binfile->buf = r_buf_new ();",
          "717: #if LIMIT_SIZE",
          "718:  if (sz > 1024 * 1024) {",
          "719:   eprintf (\"Too big\\n\");",
          "721:   return NULL;",
          "722:  }",
          "723: #else",
          "724:  if (steal_ptr) {",
          "725:   r_buf_set_bytes_steal (binfile->buf, bytes, sz);",
          "726:  } else {",
          "727:   r_buf_set_bytes (binfile->buf, bytes, sz);",
          "728:  }",
          "729: #endif",
          "730:  return binfile->buf != NULL;",
          "731: }",
          "733: R_API RBinPlugin *r_bin_file_cur_plugin(RBinFile *binfile) {",
          "734:  return binfile && binfile->o? binfile->o->plugin: NULL;",
          "735: }",
          "738: static int is_data_section(RBinFile *a, RBinSection *s) {",
          "739:  if (s->has_strings || s->is_data) {",
          "740:   return true;",
          "741:  }",
          "742:  if (s->is_data) {",
          "743:   return true;",
          "744:  }",
          "746:  return (strstr (s->name, \"_const\") != NULL);",
          "747: }",
          "750: R_API RList *r_bin_file_get_strings(RBinFile *a, int min, int dump) {",
          "751:  RListIter *iter;",
          "752:  RBinSection *section;",
          "753:  RBinObject *o = a? a->o: NULL;",
          "754:  RList *ret;",
          "756:  if (dump) {",
          "758:   ret = NULL;",
          "759:  } else {",
          "760:   ret = r_list_newf (r_bin_string_free);",
          "761:   if (!ret) {",
          "762:    return NULL;",
          "763:   }",
          "764:  }",
          "765:  if (o && o->sections && !r_list_empty (o->sections) && !a->rawstr) {",
          "766:   r_list_foreach (o->sections, iter, section) {",
          "767:    if (is_data_section (a, section)) {",
          "768:     r_bin_file_get_strings_range (a, ret, min, section->paddr,",
          "769:       section->paddr + section->size);",
          "770:    }",
          "771:   }",
          "772:   r_list_foreach (o->sections, iter, section) {",
          "773:    RBinString *s;",
          "774:    RListIter *iter2;",
          "776:    const int bits = (a->o && a->o->info) ? a->o->info->bits : 32;",
          "777:    const int cfstr_size = (bits == 64) ? 32 : 16;",
          "778:    const int cfstr_offs = (bits == 64) ? 16 :  8;",
          "779:    if (strstr (section->name, \"__cfstring\")) {",
          "780:     int i;",
          "782:     ut8 *p;",
          "783:     for (i = 0; i < section->size; i += cfstr_size) {",
          "784:      ut8 buf[32];",
          "785:      if (!r_buf_read_at (",
          "786:           a->buf, section->paddr + i + cfstr_offs,",
          "787:           buf, sizeof (buf))) {",
          "788:       break;",
          "789:      }",
          "790:      p = buf;",
          "791:      ut64 cfstr_vaddr = section->vaddr + i;",
          "792:      ut64 cstr_vaddr = (bits == 64)",
          "793:            ? r_read_le64 (p)",
          "794:            : r_read_le32 (p);",
          "795:      r_list_foreach (ret, iter2, s) {",
          "796:       if (s->vaddr == cstr_vaddr) {",
          "797:        RBinString *new = R_NEW0 (RBinString);",
          "798:        new->type = s->type;",
          "799:        new->length = s->length;",
          "800:        new->size = s->size;",
          "801:        new->ordinal = s->ordinal;",
          "802:        new->paddr = new->vaddr = cfstr_vaddr;",
          "803:        new->string = r_str_newf (\"cstr.%s\", s->string);",
          "804:        r_list_append (ret, new);",
          "805:        break;",
          "806:       }",
          "807:      }",
          "808:     }",
          "809:    }",
          "810:   }",
          "811:  } else {",
          "812:   r_bin_file_get_strings_range (a, ret, min, 0, a->size);",
          "813:  }",
          "814:  return ret;",
          "815: }",
          "817: R_API void r_bin_file_get_strings_range(RBinFile *bf, RList *list, int min, ut64 from, ut64 to) {",
          "818:  RBinPlugin *plugin = r_bin_file_cur_plugin (bf);",
          "819:  RBinString *ptr;",
          "820:  RListIter *it;",
          "822:  if (!bf || !bf->buf || !bf->buf->buf) {",
          "823:   return;",
          "824:  }",
          "825:  if (!bf->rawstr) {",
          "826:   if (!plugin || !plugin->info) {",
          "827:    return;",
          "828:   }",
          "829:  }",
          "830:  if (!min) {",
          "831:   min = plugin? plugin->minstrlen: 4;",
          "832:  }",
          "834:  if (!min) {",
          "835:   min = 4;",
          "836:  }",
          "837:  if (min < 0) {",
          "838:   return;",
          "839:  }",
          "840:  if (!to || to > bf->buf->length) {",
          "841:   to = r_buf_size (bf->buf);",
          "842:  }",
          "843:  if (bf->rawstr != 2) {",
          "844:   ut64 size = to - from;",
          "846:   if (bf->rbin->maxstrbuf && size && size > bf->rbin->maxstrbuf) {",
          "847:    if (bf->rbin->verbose) {",
          "848:     eprintf (\"WARNING: bin_strings buffer is too big \"",
          "849:      \"(0x%08\" PFMT64x",
          "850:      \").\"",
          "851:      \" Use -zzz or set bin.maxstrbuf \"",
          "852:      \"(RABIN2_MAXSTRBUF) in r2 (rabin2)\\n\",",
          "853:      size);",
          "854:    }",
          "855:    return;",
          "856:   }",
          "857:  }",
          "858:  if (string_scan_range (list, bf, min, from, to, -1) < 0) {",
          "859:   return;",
          "860:  }",
          "861:  r_list_foreach (list, it, ptr) {",
          "862:   RBinSection *s = r_bin_get_section_at (bf->o, ptr->paddr, false);",
          "863:   if (s) {",
          "864:    ptr->vaddr = s->vaddr + (ptr->paddr - s->paddr);",
          "865:   }",
          "866:  }",
          "867: }",
          "",
          "---------------"
        ],
        "libr/bin/format/mach0/mach0.c||libr/bin/format/mach0/mach0.c": [
          "File: libr/bin/format/mach0/mach0.c -> libr/bin/format/mach0/mach0.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include <stdio.h>",
          "4: #include <r_types.h>",
          "5: #include <r_util.h>",
          "6: #include \"mach0.h\"",
          "10: typedef struct _ulebr {",
          "11:  ut8 *p;",
          "",
          "[Removed Lines]",
          "8: #define bprintf if(bin->verbose)eprintf",
          "",
          "[Added Lines]",
          "8: #define bprintf if (bin->verbose) eprintf",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2372:  if (!mh) {",
          "2373:   return;",
          "2374:  }",
          "2383:  ut64 addr = 0x20 - 4;",
          "2384:  ut32 word = 0;",
          "",
          "[Removed Lines]",
          "2375:  eprintf (\"0x00000000  Magic       0x%x\\n\", mh->magic);",
          "2376:  eprintf (\"0x00000004  CpuType     0x%x\\n\", mh->cputype);",
          "2377:  eprintf (\"0x00000008  CpuSubType  0x%x\\n\", mh->cpusubtype);",
          "2378:  eprintf (\"0x0000000c  FileType    0x%x\\n\", mh->filetype);",
          "2379:  eprintf (\"0x00000010  nCmds       %d\\n\", mh->ncmds);",
          "2380:  eprintf (\"0x00000014  sizeOfCmds  %d\\n\", mh->sizeofcmds);",
          "2381:  eprintf (\"0x00000018  Flags       0x%x\\n\", mh->flags);",
          "",
          "[Added Lines]",
          "2375:  printf (\"0x00000000  Magic       0x%x\\n\", mh->magic);",
          "2376:  printf (\"0x00000004  CpuType     0x%x\\n\", mh->cputype);",
          "2377:  printf (\"0x00000008  CpuSubType  0x%x\\n\", mh->cpusubtype);",
          "2378:  printf (\"0x0000000c  FileType    0x%x\\n\", mh->filetype);",
          "2379:  printf (\"0x00000010  nCmds       %d\\n\", mh->ncmds);",
          "2380:  printf (\"0x00000014  sizeOfCmds  %d\\n\", mh->sizeofcmds);",
          "2381:  printf (\"0x00000018  Flags       0x%x\\n\", mh->flags);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2391:   } \\",
          "2392:   word = r_read_le32 (wordbuf);",
          "2393:  for (n = 0; n < mh->ncmds; n++) {",
          "2395:   READWORD();",
          "2396:   int lcType = word;",
          "2397:   eprintf (\"0x%08\"PFMT64x\"  cmd          0x%x %s\\n\",",
          "",
          "[Removed Lines]",
          "2394:   eprintf (\"\\n# Load Command %d\\n\", n);",
          "",
          "[Added Lines]",
          "2394:   printf (\"\\n# Load Command %d\\n\", n);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2399:   READWORD();",
          "2400:   int lcSize = word;",
          "2401:   word &= 0xFFFFFF;",
          "2405:    break;",
          "2406:   }",
          "2407:   switch (lcType) {",
          "2408:   case LC_ID_DYLIB: // install_name_tool",
          "2410:     addr + 20, r_buf_get_at (buf, addr + 20, NULL));",
          "2411:    break;",
          "2412:   case LC_UUID:",
          "2414:     addr + 20, r_buf_get_at (buf, addr + 32, NULL));",
          "2415:    break;",
          "2416:   case LC_LOAD_DYLIB:",
          "2418:     addr + 20, r_buf_get_at (buf, addr + 20, NULL));",
          "2419:    break;",
          "2420:   case LC_RPATH:",
          "2422:     addr + 8, r_buf_get_at (buf, addr + 8, NULL));",
          "2423:    break;",
          "2424:   }",
          "2425:   addr += word - 8;",
          "2426:  }",
          "",
          "[Removed Lines]",
          "2402:   eprintf (\"0x%08\"PFMT64x\"  cmdsize      %d\\n\", addr, word);",
          "2403:   if ((int)(lcSize) < 1) {",
          "2404:    eprintf (\"Invalid size\\n\");",
          "2409:    eprintf (\"0x%08\"PFMT64x\"  id           %s\\n\",",
          "2413:    eprintf (\"0x%08\"PFMT64x\"  uuid         %s\\n\",",
          "2417:    eprintf (\"0x%08\"PFMT64x\"  uuid         %s\\n\",",
          "2421:    eprintf (\"0x%08\"PFMT64x\"  uuid         %s\\n\",",
          "",
          "[Added Lines]",
          "2402:   printf (\"0x%08\"PFMT64x\"  cmdsize      %d\\n\", addr, word);",
          "2403:   if (lcSize < 1) {",
          "2404:    eprintf (\"Invalid size for a load command\\n\");",
          "2409:    printf (\"0x%08\"PFMT64x\"  id           %s\\n\",",
          "2413:    printf (\"0x%08\"PFMT64x\"  uuid         %s\\n\",",
          "2417:    printf (\"0x%08\"PFMT64x\"  uuid         %s\\n\",",
          "2421:    printf (\"0x%08\"PFMT64x\"  uuid         %s\\n\",",
          "2424:   case LC_CODE_SIGNATURE:",
          "2425:    {",
          "2426:    ut32 *words = (ut32*)r_buf_get_at (buf, addr + 4, NULL);",
          "2427:    printf (\"0x%08\"PFMT64x\"  dataoff      0x%08x\\n\", addr + 4, words[0]);",
          "2428:    printf (\"0x%08\"PFMT64x\"  datasize     %d\\n\", addr + 8, words[1]);",
          "2429:    printf (\"# wtf mach0.sign %d @ 0x%x\\n\", words[1], words[0]);",
          "2430:    }",
          "2431:    break;",
          "",
          "---------------"
        ],
        "libr/bin/obj.c||libr/bin/obj.c": [
          "File: libr/bin/obj.c -> libr/bin/obj.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: #include <r_bin.h>",
          "4: #include <r_util.h>",
          "6: #define bprintf if(binfile->rbin->verbose)eprintf",
          "8: R_API void r_bin_object_free(void /*RBinObject*/ *o_) {",
          "9:  RBinObject *o = o_;",
          "10:  if (!o) {",
          "11:   return;",
          "12:  }",
          "13:  r_bin_info_free (o->info);",
          "14:  r_bin_object_delete_items (o);",
          "15:  R_FREE (o);",
          "16: }",
          "18: R_API RBinObject *r_bin_object_new(RBinFile *binfile, RBinPlugin *plugin, ut64 baseaddr, ut64 loadaddr, ut64 offset, ut64 sz) {",
          "19:  const ut8 *bytes = binfile? r_buf_buffer (binfile->buf): NULL;",
          "20:  ut64 bytes_sz = binfile? r_buf_size (binfile->buf): 0;",
          "21:  Sdb *sdb = binfile? binfile->sdb: NULL;",
          "22:  RBinObject *o = R_NEW0 (RBinObject);",
          "23:  if (!o) {",
          "24:   return NULL;",
          "25:  }",
          "26:  o->obj_size = bytes && (bytes_sz >= sz + offset)? sz: 0;",
          "27:  o->boffset = offset;",
          "28:  o->id = r_num_rand (0xfffff000);",
          "29:  o->kv = sdb_new0 ();",
          "30:  o->baddr = baseaddr;",
          "31:  o->baddr_shift = 0;",
          "32:  o->plugin = plugin;",
          "33:  o->loadaddr = loadaddr != UT64_MAX ? loadaddr : 0;",
          "39:  if (bytes && plugin && plugin->load_bytes && (bytes_sz >= sz + offset)) {",
          "40:   ut64 bsz = bytes_sz - offset;",
          "41:   if (sz < bsz) {",
          "42:    bsz = sz;",
          "43:   }",
          "44:   o->bin_obj = plugin->load_bytes (binfile, bytes + offset, sz,",
          "45:        loadaddr, sdb);",
          "46:   if (!o->bin_obj) {",
          "47:    bprintf (",
          "48:     \"Error in r_bin_object_new: load_bytes failed \"",
          "49:     \"for %s plugin\\n\",",
          "50:     plugin->name);",
          "51:    sdb_free (o->kv);",
          "52:    free (o);",
          "53:    return NULL;",
          "54:   }",
          "55:  } else if (binfile && plugin && plugin->load) {",
          "59:   RBinObject *old_o = binfile->o;",
          "60:   binfile->o = o;",
          "61:   if (plugin->load (binfile)) {",
          "62:    binfile->sdb_info = o->kv;",
          "64:    sdb_ns_set (binfile->sdb, \"info\", o->kv);",
          "65:   } else {",
          "66:    binfile->o = old_o;",
          "67:   }",
          "68:   o->obj_size = sz;",
          "69:  } else {",
          "70:   sdb_free (o->kv);",
          "71:   free (o);",
          "72:   return NULL;",
          "73:  }",
          "81:  r_bin_object_set_items (binfile, o);",
          "82:  r_bin_file_object_add (binfile, o);",
          "86:  return o;",
          "87: }",
          "89: R_API int r_bin_object_set_items(RBinFile *binfile, RBinObject *o) {",
          "90:  RBinObject *old_o;",
          "91:  RBinPlugin *cp;",
          "92:  int i, minlen;",
          "94:  if (!binfile || !o || !o->plugin) {",
          "95:   return false;",
          "96:  }",
          "97:  RBin *bin = binfile->rbin;",
          "98:  old_o = binfile->o;",
          "99:  cp = o->plugin;",
          "100:  minlen = (binfile->rbin->minstrlen > 0) ? binfile->rbin->minstrlen : cp->minstrlen;",
          "101:  binfile->o = o;",
          "102:  if (cp->baddr) {",
          "103:   ut64 old_baddr = o->baddr;",
          "104:   o->baddr = cp->baddr (binfile);",
          "105:   r_bin_object_set_baddr (o, old_baddr);",
          "106:  }",
          "107:  if (cp->boffset) {",
          "108:   o->boffset = cp->boffset (binfile);",
          "109:  }",
          "113:  if (cp->size) {",
          "114:   o->size = cp->size (binfile);",
          "115:  }",
          "116:  if (cp->binsym) {",
          "117:   for (i = 0; i < R_BIN_SYM_LAST; i++) {",
          "118:    o->binsym[i] = cp->binsym (binfile, i);",
          "119:    if (o->binsym[i]) {",
          "120:     o->binsym[i]->paddr += o->loadaddr;",
          "121:    }",
          "122:   }",
          "123:  }",
          "124:  if (cp->entries) {",
          "125:   o->entries = cp->entries (binfile);",
          "126:   REBASE_PADDR (o, o->entries, RBinAddr);",
          "127:  }",
          "128:  if (cp->fields) {",
          "129:   o->fields = cp->fields (binfile);",
          "130:   if (o->fields) {",
          "131:    o->fields->free = r_bin_field_free;",
          "132:    REBASE_PADDR (o, o->fields, RBinField);",
          "133:   }",
          "134:  }",
          "135:  if (cp->imports) {",
          "136:   r_list_free (o->imports);",
          "137:   o->imports = cp->imports (binfile);",
          "138:   if (o->imports) {",
          "139:    o->imports->free = r_bin_import_free;",
          "140:   }",
          "141:  }",
          "143:  if (true) {",
          "144:   if (cp->symbols) {",
          "145:    o->symbols = cp->symbols (binfile);",
          "146:    if (o->symbols) {",
          "147:     o->symbols->free = r_bin_symbol_free;",
          "148:     REBASE_PADDR (o, o->symbols, RBinSymbol);",
          "149:     if (bin->filter) {",
          "150:      r_bin_filter_symbols (o->symbols);",
          "151:     }",
          "152:    }",
          "153:   }",
          "154:  }",
          "155:  o->info = cp->info? cp->info (binfile): NULL;",
          "156:  if (cp->libs) {",
          "157:   o->libs = cp->libs (binfile);",
          "158:  }",
          "159:  if (cp->sections) {",
          "161:   if (!o->sections) {",
          "162:    o->sections = cp->sections (binfile);",
          "163:   }",
          "164:   REBASE_PADDR (o, o->sections, RBinSection);",
          "165:   if (bin->filter) {",
          "166:    r_bin_filter_sections (o->sections);",
          "167:   }",
          "168:  }",
          "169:  if (bin->filter_rules & (R_BIN_REQ_RELOCS | R_BIN_REQ_IMPORTS)) {",
          "170:   if (cp->relocs) {",
          "171:    o->relocs = cp->relocs (binfile);",
          "172:    REBASE_PADDR (o, o->relocs, RBinReloc);",
          "173:   }",
          "174:  }",
          "175:  if (bin->filter_rules & R_BIN_REQ_STRINGS) {",
          "176:   if (cp->strings) {",
          "177:    o->strings = cp->strings (binfile);",
          "178:   } else {",
          "179:    o->strings = r_bin_file_get_strings (binfile, minlen, 0);",
          "180:   }",
          "181:   if (bin->debase64) {",
          "182:    r_bin_object_filter_strings (o);",
          "183:   }",
          "184:   REBASE_PADDR (o, o->strings, RBinString);",
          "185:  }",
          "186:  if (bin->filter_rules & R_BIN_REQ_CLASSES) {",
          "187:   if (cp->classes) {",
          "188:    o->classes = cp->classes (binfile);",
          "189:    if (r_bin_lang_swift (binfile)) {",
          "190:     o->classes = r_bin_classes_from_symbols (binfile, o);",
          "191:    }",
          "192:   } else {",
          "193:    o->classes = r_bin_classes_from_symbols (binfile, o);",
          "194:   }",
          "195:   if (bin->filter) {",
          "196:    r_bin_filter_classes (o->classes);",
          "197:   }",
          "198:  }",
          "199:  if (cp->lines) {",
          "200:   o->lines = cp->lines (binfile);",
          "201:  }",
          "202:  if (cp->get_sdb) {",
          "203:   Sdb* new_kv = cp->get_sdb (binfile);",
          "204:   if (new_kv != o->kv) {",
          "205:    sdb_free (o->kv);",
          "206:   }",
          "207:   o->kv = new_kv;",
          "208:  }",
          "209:  if (cp->mem)  {",
          "210:   o->mem = cp->mem (binfile);",
          "211:  }",
          "212:  if (bin->filter_rules & (R_BIN_REQ_SYMBOLS | R_BIN_REQ_IMPORTS)) {",
          "213:   o->lang = r_bin_load_languages (binfile);",
          "214:  }",
          "215:  binfile->o = old_o;",
          "216:  return true;",
          "217: }",
          "219: R_API RBinObject *r_bin_object_get_cur(RBin *bin) {",
          "220:  return r_bin_file_object_get_cur (r_bin_cur (bin));",
          "221: }",
          "223: static void r_bin_mem_free(void *data) {",
          "224:  RBinMem *mem = (RBinMem *)data;",
          "225:  if (mem && mem->mirrors) {",
          "226:   mem->mirrors->free = r_bin_mem_free;",
          "227:   r_list_free (mem->mirrors);",
          "228:   mem->mirrors = NULL;",
          "229:  }",
          "230:  free (mem);",
          "231: }",
          "233: R_API void r_bin_object_delete_items(RBinObject *o) {",
          "234:  ut32 i = 0;",
          "235:  if (!o) {",
          "236:   return;",
          "237:  }",
          "238:  r_list_free (o->entries);",
          "239:  r_list_free (o->fields);",
          "240:  r_list_free (o->imports);",
          "241:  r_list_free (o->libs);",
          "242:  r_list_free (o->relocs);",
          "243:  r_list_free (o->sections);",
          "244:  r_list_free (o->strings);",
          "245:  r_list_free (o->symbols);",
          "246:  r_list_free (o->classes);",
          "247:  r_list_free (o->lines);",
          "248:  sdb_free (o->kv);",
          "249:  if (o->mem) {",
          "250:   o->mem->free = r_bin_mem_free;",
          "251:  }",
          "252:  r_list_free (o->mem);",
          "253:  o->mem = NULL;",
          "254:  o->entries = NULL;",
          "255:  o->fields = NULL;",
          "256:  o->imports = NULL;",
          "257:  o->libs = NULL;",
          "258:  o->relocs = NULL;",
          "259:  o->sections = NULL;",
          "260:  o->strings = NULL;",
          "261:  o->symbols = NULL;",
          "262:  o->classes = NULL;",
          "263:  o->lines = NULL;",
          "264:  o->info = NULL;",
          "265:  o->kv = NULL;",
          "266:  for (i = 0; i < R_BIN_SYM_LAST; i++) {",
          "267:   free (o->binsym[i]);",
          "268:   o->binsym[i] = NULL;",
          "269:  }",
          "270: }",
          "272: R_API RBinObject *r_bin_object_find_by_arch_bits(RBinFile *binfile, const char *arch, int bits, const char *name) {",
          "273:  RBinObject *obj = NULL;",
          "274:  RListIter *iter = NULL;",
          "275:  RBinInfo *info = NULL;",
          "276:  r_list_foreach (binfile->objs, iter, obj) {",
          "277:   info = obj->info;",
          "278:   if (info && info->arch && info->file &&",
          "279:      (bits == info->bits) &&",
          "280:    !strcmp (info->arch, arch) &&",
          "281:    !strcmp (info->file, name)) {",
          "282:    break;",
          "283:   }",
          "284:   obj = NULL;",
          "285:  }",
          "286:  return obj;",
          "287: }",
          "289: R_API int r_bin_object_delete(RBin *bin, ut32 binfile_id, ut32 binobj_id) {",
          "290:  RBinFile *binfile = NULL;",
          "291:  RBinObject *obj = NULL;",
          "292:  int res = false;",
          "294:  if (binfile_id == UT32_MAX) {",
          "295:   binfile = r_bin_file_find_by_object_id (bin, binobj_id);",
          "296:   obj = binfile? r_bin_file_object_find_by_id (binfile, binobj_id): NULL;",
          "297:  } else if (binobj_id == UT32_MAX) {",
          "298:   binfile = r_bin_file_find_by_id (bin, binfile_id);",
          "299:   obj = binfile? binfile->o: NULL;",
          "300:  } else {",
          "301:   binfile = r_bin_file_find_by_id (bin, binfile_id);",
          "302:   obj = binfile? r_bin_file_object_find_by_id (binfile, binobj_id): NULL;",
          "303:  }",
          "304:  if (binfile && bin->cur == binfile) {",
          "305:   bin->cur = NULL;",
          "306:  }",
          "308:  if (binfile) {",
          "309:   binfile->o = NULL;",
          "310:   r_list_delete_data (binfile->objs, obj);",
          "311:   RBinObject *newObj = (RBinObject *)r_list_get_n (binfile->objs, 0);",
          "312:   res = newObj && binfile &&",
          "313:         r_bin_file_set_cur_binfile_obj (bin, binfile, newObj);",
          "314:  }",
          "315:  if (binfile && obj && r_list_length (binfile->objs) == 0) {",
          "316:   r_list_delete_data (bin->binfiles, binfile);",
          "317:  }",
          "318:  return res;",
          "319: }",
          "321: R_API void r_bin_object_set_baddr(RBinObject *o, ut64 baddr) {",
          "322:  if (!o || baddr == UT64_MAX) {",
          "323:   return;",
          "324:  }",
          "325:  o->baddr_shift = baddr - o->baddr;",
          "326: }",
          "328: R_API void r_bin_object_filter_strings (RBinObject *bo) {",
          "329:  RList *strings = bo->strings;",
          "330:  RBinString *ptr;",
          "331:  RListIter *iter;",
          "332:  r_list_foreach (strings, iter, ptr) {",
          "333:   char *dec = (char *)r_base64_decode_dyn (ptr->string, -1);",
          "334:   if (dec) {",
          "335:    char *s = ptr->string;",
          "336:    for (;;) {",
          "337:     char *dec2 = (char *)r_base64_decode_dyn (s, -1);",
          "338:     if (!dec2) {",
          "339:      break;",
          "340:     }",
          "341:     if (!r_str_is_printable (dec2)) {",
          "342:      free (dec2);",
          "343:      break;",
          "344:     }",
          "345:     free (dec);",
          "346:     s = dec = dec2;",
          "347:    }",
          "348:    if (r_str_is_printable (dec) && strlen (dec) > 3) {",
          "349:     free (ptr->string);",
          "350:     ptr->string = dec;",
          "351:     ptr->type = R_STRING_TYPE_BASE64;",
          "352:    } else {",
          "353:     free (dec);",
          "354:    }",
          "355:   }",
          "356:  }",
          "357: }",
          "",
          "---------------"
        ],
        "libr/include/r_bin.h||libr/include/r_bin.h": [
          "File: libr/include/r_bin.h -> libr/include/r_bin.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "419: #define RBinSectionName r_offsetof(RBinSection, name)",
          "420: #define RBinSectionOffset r_offsetof(RBinSection, offset)",
          "425: typedef struct r_bin_symbol_t {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "422: #define REBASE_PADDR(o, l, type_t)\\",
          "423:  do { \\",
          "424:   RListIter *_it;\\",
          "425:   type_t *_el;\\",
          "426:   r_list_foreach ((l), _it, _el) { \\",
          "427:    _el->paddr += (o)->loadaddr;\\",
          "428:   }\\",
          "429:  } while (0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "559: R_API int r_bin_read_at (RBin *bin, ut64 addr, ut8 *buf, int size);",
          "560: R_API int r_bin_write_at (RBin *bin, ut64 addr, const ut8 *buf, int size);",
          "563: R_API int r_bin_file_deref_by_bind (RBinBind * binb);",
          "564: R_API int r_bin_file_deref (RBin *bin, RBinFile * a);",
          "565: R_API int r_bin_file_ref_by_bind (RBinBind * binb);",
          "566: R_API int r_bin_file_ref (RBin *bin, RBinFile * a);",
          "567: R_API bool r_bin_file_object_new_from_xtr_data(RBin *bin, RBinFile *bf, ut64 baseaddr, ut64 loadaddr,",
          "568:       RBinXtrData *xtr_data);",
          "569: R_API int r_bin_list(RBin *bin, int json);",
          "570: R_API int r_bin_list_plugin(RBin *bin, const char* name, int json);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "570: R_API RBinFile *r_bin_file_new(RBin *bin, const char *file, const ut8 *bytes, ut64 sz, ut64 file_sz, int rawstr, int fd, const char *xtrname, Sdb *sdb, bool steal_ptr);",
          "571: R_API bool r_bin_file_object_new_from_xtr_data(RBin *bin, RBinFile *bf, ut64 baseaddr, ut64 loadaddr, RBinXtrData *data);",
          "572: R_API RBinFile *r_bin_file_new_from_bytes(RBin *bin, const char *file, const ut8 *bytes, ut64 sz, ut64 file_sz, int rawstr, ut64 baseaddr, ut64 loadaddr, int fd, const char *pluginname, const char *xtrname, ut64 offset, bool steal_ptr);",
          "573: R_API RBinFile *r_bin_file_find_by_arch_bits(RBin *bin, const char *arch, int bits, const char *name);",
          "574: R_API RBinObject *r_bin_file_object_find_by_id(RBinFile *binfile, ut32 binobj_id);",
          "575: R_API RList *r_bin_file_get_strings(RBinFile *a, int min, int dump);",
          "576: R_API RBinFile *r_bin_file_find_by_object_id(RBin *bin, ut32 binobj_id);",
          "577: R_API RBinFile *r_bin_file_find_by_id(RBin *bin, ut32 binfile_id);",
          "578: R_API int r_bin_file_object_add(RBinFile *binfile, RBinObject *o);",
          "579: R_API int r_bin_file_delete_all(RBin *bin);",
          "580: R_API int r_bin_file_delete(RBin *bin, ut32 bin_fd);",
          "581: R_API RBinFile *r_bin_file_find_by_fd(RBin *bin, ut32 bin_fd);",
          "582: R_API RBinFile *r_bin_file_find_by_name(RBin *bin, const char *name);",
          "583: R_API RBinFile *r_bin_file_find_by_name_n(RBin *bin, const char *name, int idx);",
          "584: R_API int r_bin_file_set_cur_by_fd(RBin *bin, ut32 bin_fd);",
          "585: R_API int r_bin_file_set_cur_binfile_obj(RBin *bin, RBinFile *bf, RBinObject *obj);",
          "586: R_API int r_bin_file_set_cur_binfile(RBin *bin, RBinFile *bf);",
          "587: R_API int r_bin_file_set_cur_by_name(RBin *bin, const char *name);",
          "588: R_API RBinObject *r_bin_file_object_get_cur(RBinFile *binfile);",
          "589: R_API int r_bin_file_cur_set_plugin(RBinFile *binfile, RBinPlugin *plugin);",
          "590: R_API int r_bin_file_deref_by_bind(RBinBind *binb);",
          "591: R_API int r_bin_file_deref(RBin *bin, RBinFile *a);",
          "592: R_API int r_bin_file_ref_by_bind(RBinBind *binb);",
          "593: R_API int r_bin_file_ref(RBin *bin, RBinFile *a);",
          "594: R_API void r_bin_file_free(void /*RBinFile*/ *bf_);",
          "595: R_API RBinFile *r_bin_file_create_append(RBin *bin, const char *file, const ut8 *bytes, ut64 sz, ut64 file_sz, int rawstr, int fd, const char *xtrname, bool steal_ptr);",
          "596: R_API RBinFile *r_bin_file_xtr_load_bytes(RBin *bin, RBinXtrPlugin *xtr, const char *filename, const ut8 *bytes, ut64 sz, ut64 file_sz, ut64 baseaddr, ut64 loadaddr, int idx, int fd, int rawstr);",
          "597: R_API int r_bin_file_set_bytes(RBinFile *binfile, const ut8 *bytes, ut64 sz, bool steal_ptr);",
          "598: R_API RBinPlugin *r_bin_file_cur_plugin(RBinFile *binfile);",
          "601: R_API void r_bin_object_free(void /*RBinObject*/ *o_);",
          "602: R_API void r_bin_object_filter_strings (RBinObject *bo);",
          "603: R_API void r_bin_object_set_baddr(RBinObject *o, ut64 baddr);",
          "604: R_API RBinObject *r_bin_object_new(RBinFile *binfile, RBinPlugin *plugin, ut64 baseaddr, ut64 loadaddr, ut64 offset, ut64 sz);",
          "605: R_API int r_bin_object_set_items(RBinFile *binfile, RBinObject *o);",
          "606: R_API RBinObject *r_bin_object_get_cur(RBin *bin);",
          "607: R_API RBinObject *r_bin_object_find_by_arch_bits(RBinFile *binfile, const char *arch, int bits, const char *name);",
          "608: R_API int r_bin_object_delete(RBin *bin, ut32 binfile_id, ut32 binobj_id);",
          "609: R_API void r_bin_object_delete_items(RBinObject *o);",
          "613: R_API void r_bin_file_get_strings_range(RBinFile *bf, RList *list, int min, ut64 from, ut64 to);",
          "619: #define MODE_PRINT 0x000",
          "620: #define MODE_RADARE 0x001",
          "621: #define MODE_SIMPLE 0x004",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "577: R_API RBinAddr* r_bin_get_sym(RBin *bin, int sym);",
          "578: R_API const char *r_bin_entry_type_string(int etype);",
          "580: R_API char* r_bin_demangle(RBinFile *binfile, const char *lang, const char *str, ut64 vaddr);",
          "581: R_API int r_bin_demangle_type (const char *str);",
          "582: R_API char *r_bin_demangle_java(const char *str);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "635: R_API RBinXtrPlugin *r_bin_get_xtrplugin_by_name(RBin *bin, const char *name);",
          "636: R_API RBinPlugin *r_bin_get_binplugin_by_name(RBin *bin, const char *name);",
          "637: R_API RBinPlugin *r_bin_get_binplugin_any(RBin *bin);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "634: R_API int r_bin_select(RBin *bin, const char *arch, int bits, const char *name);",
          "635: R_API int r_bin_select_idx(RBin *bin, const char *name, int idx);",
          "636: R_API int r_bin_select_by_ids(RBin *bin, ut32 binfile_id, ut32 binobj_id );",
          "639: R_API int r_bin_use_arch(RBin *bin, const char *arch, int bits, const char *name);",
          "640: R_API RBinFile * r_bin_file_find_by_arch_bits(RBin *bin, const char *arch, int bits, const char *name);",
          "642: R_API void r_bin_list_archs(RBin *bin, int mode);",
          "643: R_API void r_bin_set_user_ptr(RBin *bin, void *user);",
          "644: R_API RBuffer *r_bin_create (RBin *bin, const ut8 *code, int codelen, const ut8 *data, int datalen);",
          "",
          "[Removed Lines]",
          "637: R_API int r_bin_object_delete (RBin *bin, ut32 binfile_id, ut32 binobj_id);",
          "638: R_API int r_bin_object_set_items(RBinFile *binfile, RBinObject *o);",
          "641: R_API RBinObject * r_bin_object_find_by_arch_bits (RBinFile *binfile, const char *arch, int bits, const char *name);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "64d16fc5060ba744c8ff33633a7620de3b744a0b",
      "candidate_info": {
        "commit_hash": "64d16fc5060ba744c8ff33633a7620de3b744a0b",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/64d16fc5060ba744c8ff33633a7620de3b744a0b",
        "files": [
          "binr/rabin2/rabin2.c",
          "libr/bin/bfile.c",
          "libr/bin/bin.c",
          "libr/bin/obj.c",
          "libr/bin/open.c",
          "libr/core/cfile.c",
          "libr/core/cmd_search.c",
          "libr/include/r_bin.h",
          "libr/include/r_io.h",
          "libr/io/io.c",
          "sys/clang-format-diff.py"
        ],
        "message": "Some code cleanup and asserts in RBin ##refactor\n\n* libr/bin: no need to allocate RBinOptions on the heap\n* bin: start using r_return_* around, that's just the beginning\n* bin: remove io_owned since it's not used anywhere\n* io: make r_io_bind return nothing\n* bin: remove unused functions and simplify r_bin_load_io\nr_bin_load_io was calling r_bin_load_io2 with UT64_MAX as sz parameter,\nbut r_bin_load_io2 just returns false if (st64)sz is less than 0, so\nthat call is actually useless and can be removed.\n* bin/bin: fix some preconditions\n* bin/open: fix precondition to check for bin and filename too",
        "before_after_code_files": [
          "binr/rabin2/rabin2.c||binr/rabin2/rabin2.c",
          "libr/bin/bfile.c||libr/bin/bfile.c",
          "libr/bin/bin.c||libr/bin/bin.c",
          "libr/bin/obj.c||libr/bin/obj.c",
          "libr/bin/open.c||libr/bin/open.c",
          "libr/core/cfile.c||libr/core/cfile.c",
          "libr/core/cmd_search.c||libr/core/cmd_search.c",
          "libr/include/r_bin.h||libr/include/r_bin.h",
          "libr/include/r_io.h||libr/include/r_io.h",
          "libr/io/io.c||libr/io/io.c",
          "sys/clang-format-diff.py||sys/clang-format-diff.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/bin.c||libr/bin/bin.c"
          ],
          "candidate": [
            "libr/bin/bin.c||libr/bin/bin.c"
          ]
        }
      },
      "candidate_diff": {
        "binr/rabin2/rabin2.c||binr/rabin2/rabin2.c": [
          "File: binr/rabin2/rabin2.c -> binr/rabin2/rabin2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "997:  r_bin_force_plugin (bin, forcebin);",
          "998:  r_bin_load_filter (bin, action);",
          "1015:   if (!bin->cur || !bin->cur->xtr_data) {",
          "1016:    eprintf (\"r_bin: Cannot open file\\n\");",
          "1018:    r_core_file_free (fh);",
          "1019:    r_core_fini (&core);",
          "1020:    return 1;",
          "",
          "[Removed Lines]",
          "1000:  RBinOptions *bo = r_bin_options_new (0LL, baddr, rawstr);",
          "1001:  if (!bo) {",
          "1002:   eprintf (\"Could not create RBinOptions\\n\");",
          "1003:   r_core_file_free (fh);",
          "1004:   r_core_fini (&core);",
          "1005:   return 1;",
          "1006:  }",
          "1008:  bo->loadaddr = laddr;",
          "1009:  bo->xtr_idx = xtr_idx;",
          "1010:  bo->iofd = fd;",
          "1012:  if (!r_bin_open (bin, file, bo)) {",
          "1017:    r_bin_options_free (bo);",
          "",
          "[Added Lines]",
          "1000:  RBinOptions bo = {",
          "1001:   .offset = 0LL,",
          "1002:   .baseaddr = baddr,",
          "1003:   .rawstr = rawstr,",
          "1004:   .loadaddr = laddr,",
          "1005:   .xtr_idx = xtr_idx,",
          "1006:   .iofd = fd,",
          "1007:  };",
          "1009:  if (!r_bin_open (bin, file, &bo)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1045:     sdb_query (bin->cur->sdb, query);",
          "1046:    }",
          "1047:   }",
          "1049:   r_core_file_free (fh);",
          "1050:   r_core_fini (&core);",
          "1051:   return 0;",
          "",
          "[Removed Lines]",
          "1048:   r_bin_options_free (bo);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1090:    r_config_set (core.config, \"pdb.symstore\", tmp);",
          "1091:    R_FREE (tmp);",
          "1092:   }",
          "1094:   int r = r_bin_pdb_download (&core, isradjson, &actions_done, &pdbopts);",
          "1096:   r_core_file_free (fh);",
          "1097:   r_core_fini (&core);",
          "1098:   return r;",
          "",
          "[Removed Lines]",
          "1093:   pdbopts.symbol_store_path = (char*) r_config_get (core.config, \"pdb.symstore\");",
          "1095:   r_bin_options_free (bo);",
          "",
          "[Added Lines]",
          "1088:   pdbopts.symbol_store_path = (char *)r_config_get (core.config, \"pdb.symstore\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1144:   r_cons_print (\"}\");",
          "1145:  }",
          "1146:  r_cons_flush ();",
          "1148:  r_core_file_free (fh);",
          "1149:  r_core_fini (&core);",
          "1150:  free (stdin_buf);",
          "",
          "[Removed Lines]",
          "1147:  r_bin_options_free (bo);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libr/bin/bfile.c||libr/bin/bfile.c": [
          "File: libr/bin/bfile.c -> libr/bin/bfile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "261:  return NULL;",
          "262: }",
          "265:  RBinSymbol *sym;",
          "266:  RListIter *iter;",
          "267:  RList *symbols = o->symbols;",
          "",
          "[Removed Lines]",
          "264: R_API RList *r_bin_classes_from_symbols (RBinFile *bf, RBinObject *o) {",
          "",
          "[Added Lines]",
          "264: R_API RList *r_bin_classes_from_symbols(RBinFile *bf, RBinObject *o) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "324:  }",
          "325:  int res = r_bin_file_set_bytes (binfile, bytes, sz, steal_ptr);",
          "326:  if (!res && steal_ptr) { // we own the ptr, free on error",
          "328:  }",
          "329:  binfile->rbin = bin;",
          "331:  binfile->rawstr = rawstr;",
          "332:  binfile->fd = fd;",
          "334:  binfile->sdb = sdb;",
          "335:  binfile->size = file_sz;",
          "336:  binfile->xtr_data = r_list_newf ((RListFree)r_bin_xtrdata_free);",
          "",
          "[Removed Lines]",
          "327:   free((void*) bytes);",
          "330:  binfile->file = file? strdup (file): NULL;",
          "333:  binfile->curxtr = r_bin_get_xtrplugin_by_name (bin, xtrname);",
          "",
          "[Added Lines]",
          "327:   free ((void *)bytes);",
          "330:  binfile->file = file ? strdup (file) : NULL;",
          "333:  binfile->curxtr = xtrname ? r_bin_get_xtrplugin_by_name (bin, xtrname) : NULL;",
          "",
          "---------------"
        ],
        "libr/bin/bin.c||libr/bin/bin.c": [
          "File: libr/bin/bin.c -> libr/bin/bin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: static RBinXtrPlugin *bin_xtr_static_plugins[] = { R_BIN_XTR_STATIC_PLUGINS, NULL };",
          "33: static RBinLdrPlugin *bin_ldr_static_plugins[] = { R_BIN_LDR_STATIC_PLUGINS, NULL };",
          "46: }",
          "48: static int getoffset(RBin *bin, int type, int idx) {",
          "",
          "[Removed Lines]",
          "36: R_API bool r_bin_load_io (RBin *bin, int fd, ut64 baseaddr, ut64 loadaddr, int xtr_idx, ut64 offset, const char *name) {",
          "41:  const ut64 MAX_LOAD_SIZE = 0;  // 0xfffff; //128 * (1 << 10 << 10);",
          "42:  int res = r_bin_load_io2 (bin, fd, baseaddr,",
          "43:   loadaddr, xtr_idx, offset, name, MAX_LOAD_SIZE);",
          "44:  return res? res: r_bin_load_io2 (bin, fd, baseaddr,",
          "45:    loadaddr, xtr_idx, offset, name, UT64_MAX);",
          "",
          "[Added Lines]",
          "35: R_API bool r_bin_load_io(RBin *bin, int fd, ut64 baseaddr, ut64 loadaddr, int xtr_idx, ut64 offset, const char *name) {",
          "36:  r_return_val_if_fail (bin, false);",
          "37:  return r_bin_load_io2 (bin, fd, baseaddr, loadaddr, xtr_idx, offset, name, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64: }",
          "66: static ut64 binobj_a2b(RBinObject *o, ut64 addr) {",
          "72: }",
          "",
          "[Removed Lines]",
          "67:  return addr + (o? o->baddr_shift: 0);",
          "68: }",
          "70: R_API void r_bin_iobind(RBin *bin, RIO *io) {",
          "71:  r_io_bind (io, &bin->iob);",
          "",
          "[Added Lines]",
          "59:  return o ? addr + o->baddr_shift : addr;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97:  return data;",
          "98: }",
          "101:  switch (type) {",
          "102:  case 'a': return \"ascii\";",
          "103:  case 'u': return \"utf8\";",
          "",
          "[Removed Lines]",
          "100: R_API const char *r_bin_string_type (int type) {",
          "",
          "[Added Lines]",
          "88: R_API const char *r_bin_string_type(int type) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "123:  }",
          "124: }",
          "127:  return r_bin_file_get_strings (bf, min, 0, 2);",
          "128: }",
          "132: }",
          "135: R_API int r_bin_load_languages(RBinFile *binfile) {",
          "136:  if (r_bin_lang_rust (binfile)) {",
          "137:   return R_BIN_NM_RUST;",
          "138:  }",
          "",
          "[Removed Lines]",
          "126: R_API RList* r_bin_raw_strings(RBinFile *bf, int min) {",
          "130: R_API RList* r_bin_dump_strings(RBinFile *a, int min, int raw) {",
          "131:  return r_bin_file_get_strings (a, min, 1, raw);",
          "",
          "[Added Lines]",
          "114: R_API RList *r_bin_raw_strings(RBinFile *bf, int min) {",
          "115:  r_return_val_if_fail (bf, NULL);",
          "119: R_API RList *r_bin_dump_strings(RBinFile *bf, int min, int raw) {",
          "120:  r_return_val_if_fail (bf, NULL);",
          "121:  return r_bin_file_get_strings (bf, min, 1, raw);",
          "126:  r_return_val_if_fail (binfile, R_BIN_NM_NONE);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "175: }",
          "177: R_API RBinImport *r_bin_import_clone(RBinImport *o) {",
          "178:  RBinImport *res = r_mem_dup (o, sizeof (*o));",
          "179:  if (res) {",
          "180:   res->name = R_STR_DUP (o->name);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "170:  r_return_val_if_fail (o, NULL);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "195: }",
          "197: R_API RBinSymbol *r_bin_symbol_clone(RBinSymbol *o) {",
          "198:  RBinSymbol *res = r_mem_dup (o, sizeof (*o));",
          "199:  if (!res) {",
          "200:   return NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "192:  r_return_val_if_fail (o, NULL);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "228: R_API int r_bin_load(RBin *bin, const char *file, ut64 baseaddr, ut64 loadaddr, int xtr_idx, int fd, int rawstr) {",
          "234:  RIOBind *iob = &(bin->iob);",
          "247:  if (!iob->desc_get (iob->io, fd)) {",
          "248:   fd = iob->fd_open (iob->io, file, R_PERM_R, 0644);",
          "249:  }",
          "250:  bin->rawstr = rawstr;",
          "252:  if (fd < 0) {",
          "258:   return false;",
          "259:  }",
          "261:  return r_bin_load_io (bin, fd, baseaddr, loadaddr, xtr_idx, 0, NULL);",
          "262: }",
          "280: R_API int r_bin_reload(RBin *bin, int fd, ut64 baseaddr) {",
          "281:  RIOBind *iob = &(bin->iob);",
          "282:  RList *the_obj_list = NULL;",
          "",
          "[Removed Lines]",
          "229:  if (!bin) {",
          "230:   return false;",
          "231:  }",
          "235:  if (!iob) {",
          "236:   return false;",
          "237:  }",
          "238:  if (!iob->io) {",
          "239:   iob->io = r_io_new (); //wtf",
          "240:   if (!iob->io) {",
          "241:    return false;",
          "242:   }",
          "243:   bin->io_owned = true;",
          "244:   r_io_bind (iob->io, &bin->iob);  //memleak?",
          "245:   iob = &bin->iob;",
          "246:  }",
          "253:   if (bin->io_owned) {",
          "254:    r_io_free (iob->io);",
          "255:    memset (&bin->iob, 0, sizeof (bin->iob));",
          "256:    bin->io_owned = false;",
          "257:   }",
          "264: R_API int r_bin_load_as(RBin *bin, const char *file, ut64 baseaddr,",
          "265:     ut64 loadaddr, int xtr_idx, int fd, int rawstr,",
          "266:     int fileoffset, const char *name) {",
          "267:  RIOBind *iob = &(bin->iob);",
          "268:  if (!iob || !iob->io) {",
          "269:   return false;",
          "270:  }",
          "271:  if (fd < 0) {",
          "272:   fd = iob->fd_open (iob->io, file, R_PERM_R, 0644);",
          "273:  }",
          "274:  if (fd < 0) {",
          "275:   return false;",
          "276:  }",
          "277:  return r_bin_load_io (bin, fd, baseaddr, loadaddr, xtr_idx, fileoffset, name);",
          "278: }",
          "",
          "[Added Lines]",
          "225:  r_return_val_if_fail (bin && bin->iob.io, false);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "285:  ut8 *buf_bytes = NULL;",
          "286:  ut64 sz = UT64_MAX;",
          "292:  const char *name = iob->fd_get_name (iob->io, fd);",
          "293:  bf = r_bin_file_find_by_name (bin, name);",
          "294:  if (!bf) {",
          "",
          "[Removed Lines]",
          "288:  if (!iob || !iob->io) {",
          "289:   res = false;",
          "290:   goto error;",
          "291:  }",
          "",
          "[Added Lines]",
          "248:  r_return_val_if_fail (bin && iob && iob->io, false);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "309:   res = false;",
          "310:   goto error;",
          "311:  }",
          "314:  if (sz == UT64_MAX && iob->fd_is_dbg (iob->io, fd)) {",
          "",
          "[Removed Lines]",
          "313: #if 1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "359:  }",
          "360:  bool yes_plz_steal_ptr = true;",
          "361:  r_bin_file_set_bytes (bf, buf_bytes, sz, yes_plz_steal_ptr);",
          "366:  if (r_list_length (the_obj_list) == 1) {",
          "367:   RBinObject *old_o = (RBinObject *)r_list_get_n (the_obj_list, 0);",
          "",
          "[Removed Lines]",
          "362: #else",
          "363:  bf->buf = r_buf_new_with_io (iob, fd);",
          "364: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "392:  RBinFile *binfile = NULL;",
          "393:  int tfd = -1;",
          "398:  bool is_debugger = iob->fd_is_dbg (io, fd);",
          "399:  const char *fname = iob->fd_get_name (io, fd);",
          "400:  if (loadaddr == UT64_MAX) {",
          "",
          "[Removed Lines]",
          "395:  if (!io || (fd < 0) || (st64)sz < 0) {",
          "396:   return false;",
          "397:  }",
          "",
          "[Added Lines]",
          "349:  r_return_val_if_fail (bin && io && fd >= 0 && (st64)sz >= 0, false);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "494: R_API RBinPlugin *r_bin_get_binplugin_by_name(RBin *bin, const char *name) {",
          "495:  RBinPlugin *plugin;",
          "496:  RListIter *it;",
          "502:   }",
          "503:  }",
          "504:  return NULL;",
          "",
          "[Removed Lines]",
          "497:  if (bin && name) {",
          "498:   r_list_foreach (bin->plugins, it, plugin) {",
          "499:    if (!strcmp (plugin->name, name)) {",
          "500:     return plugin;",
          "501:    }",
          "",
          "[Added Lines]",
          "451:  r_return_val_if_fail (bin && name, NULL);",
          "453:  r_list_foreach (bin->plugins, it, plugin) {",
          "454:   if (!strcmp (plugin->name, name)) {",
          "455:    return plugin;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "507: R_API RBinPlugin *r_bin_get_binplugin_by_bytes(RBin *bin, const ut8 *bytes, ut64 sz) {",
          "508:  RBinPlugin *plugin;",
          "509:  RListIter *it;",
          "513:  r_list_foreach (bin->plugins, it, plugin) {",
          "514:   if (plugin->check_bytes && plugin->check_bytes (bytes, sz)) {",
          "515:    return plugin;",
          "",
          "[Removed Lines]",
          "510:  if (!bin || !bytes) {",
          "511:   return NULL;",
          "512:  }",
          "",
          "[Added Lines]",
          "465:  r_return_val_if_fail (bin && bytes, NULL);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "521: R_API RBinXtrPlugin *r_bin_get_xtrplugin_by_name(RBin *bin, const char *name) {",
          "522:  RBinXtrPlugin *xtr;",
          "523:  RListIter *it;",
          "528:  r_list_foreach (bin->binxtrs, it, xtr) {",
          "529:   if (!strcmp (xtr->name, name)) {",
          "",
          "[Removed Lines]",
          "524:  if (!bin || !name) {",
          "525:   return NULL;",
          "526:  }",
          "",
          "[Added Lines]",
          "479:  r_return_val_if_fail (bin && name, NULL);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "539: R_API RBinPlugin *r_bin_get_binplugin_any(RBin *bin) {",
          "540:  return r_bin_get_binplugin_by_name (bin, \"any\");",
          "541: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "494:  r_return_val_if_fail (bin, NULL);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "551: R_API bool r_bin_add(RBin *bin, RBinPlugin *foo) {",
          "552:  RListIter *it;",
          "553:  RBinPlugin *plugin;",
          "554:  if (foo->init) {",
          "555:   foo->init (bin->user);",
          "556:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "510:  r_return_val_if_fail (bin && foo, false);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "569:  RListIter *it;",
          "570:  RBinLdrPlugin *ldr;",
          "572:  if (foo->init) {",
          "573:   foo->init (bin->user);",
          "574:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "530:  r_return_val_if_fail (bin && foo, false);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "586:  RListIter *it;",
          "587:  RBinXtrPlugin *xtr;",
          "589:  if (foo->init) {",
          "590:   foo->init (bin->user);",
          "591:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "549:  r_return_val_if_fail (bin && foo, false);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "603:  if (!bin) {",
          "604:   return NULL;",
          "605:  }",
          "609:  bin->file = NULL;",
          "610:  free (bin->force);",
          "611:  free (bin->srcdir);",
          "",
          "[Removed Lines]",
          "606:  if (bin->io_owned) {",
          "607:   r_io_free (bin->iob.io);",
          "608:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "734:  RBinPlugin *bp;",
          "735:  RBinXtrPlugin *bx;",
          "737:  r_list_foreach (bin->plugins, it, bp) {",
          "738:   if (!r_str_cmp (name, bp->name, strlen (name))) {",
          "739:    continue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "696:  r_return_val_if_fail (bin && name, false);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "755: R_API ut64 r_bin_get_baddr(RBin *bin) {",
          "756:  RBinObject *o = r_bin_cur_object (bin);",
          "757:  return r_bin_object_get_baddr (o);",
          "758: }",
          "761: R_API ut64 r_bin_get_laddr(RBin *bin) {",
          "762:  RBinObject *o = r_bin_cur_object (bin);",
          "764: }",
          "766: R_API void r_bin_set_baddr(RBin *bin, ut64 baddr) {",
          "767:  RBinObject *o = r_bin_cur_object (bin);",
          "768:  r_bin_object_set_baddr (o, baddr);",
          "770: }",
          "772: R_API ut64 r_bin_get_boffset(RBin *bin) {",
          "773:  RBinObject *o = r_bin_cur_object (bin);",
          "775: }",
          "777: R_API RBinAddr *r_bin_get_sym(RBin *bin, int sym) {",
          "778:  RBinObject *o = r_bin_cur_object (bin);",
          "779:  if (sym < 0 || sym >= R_BIN_SYM_LAST) {",
          "780:   return NULL;",
          "",
          "[Removed Lines]",
          "763:  return o? o->loadaddr: UT64_MAX;",
          "774:  return o? o->boffset: UT64_MAX;",
          "",
          "[Added Lines]",
          "717:  r_return_val_if_fail (bin, UT64_MAX);",
          "724:  r_return_val_if_fail (bin, UT64_MAX);",
          "726:  return o ? o->loadaddr : UT64_MAX;",
          "730:  r_return_if_fail (bin);",
          "737:  r_return_val_if_fail (bin, UT64_MAX);",
          "739:  return o ? o->boffset : UT64_MAX;",
          "743:  r_return_val_if_fail (bin, NULL);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "786: R_API RList *r_bin_get_entries(RBin *bin) {",
          "787:  RBinObject *o = r_bin_cur_object (bin);",
          "789: }",
          "791: R_API RList *r_bin_get_fields(RBin *bin) {",
          "792:  RBinObject *o = r_bin_cur_object (bin);",
          "794: }",
          "796: R_API RList *r_bin_get_imports(RBin *bin) {",
          "797:  RBinObject *o = r_bin_cur_object (bin);",
          "799: }",
          "801: R_API RBinInfo *r_bin_get_info(RBin *bin) {",
          "802:  RBinObject *o = r_bin_cur_object (bin);",
          "804: }",
          "806: R_API RList *r_bin_get_libs(RBin *bin) {",
          "807:  RBinObject *o = r_bin_cur_object (bin);",
          "809: }",
          "812:  static bool first = true;",
          "813:  RBinObject *o = r_bin_cur_object (bin);",
          "814:  if (!o) {",
          "",
          "[Removed Lines]",
          "788:  return o? o->entries: NULL;",
          "793:  return o? o->fields: NULL;",
          "798:  return o? o->imports: NULL;",
          "803:  return o? o->info: NULL;",
          "808:  return o? o->libs: NULL;",
          "811: R_API RList * r_bin_patch_relocs(RBin *bin) {",
          "",
          "[Added Lines]",
          "753:  r_return_val_if_fail (bin, NULL);",
          "755:  return o ? o->entries : NULL;",
          "759:  r_return_val_if_fail (bin, NULL);",
          "761:  return o ? o->fields : NULL;",
          "765:  r_return_val_if_fail (bin, NULL);",
          "767:  return o ? o->imports : NULL;",
          "771:  r_return_val_if_fail (bin, NULL);",
          "773:  return o ? o->info : NULL;",
          "777:  r_return_val_if_fail (bin, NULL);",
          "779:  return o ? o->libs : NULL;",
          "782: R_API RList *r_bin_patch_relocs(RBin *bin) {",
          "783:  r_return_val_if_fail (bin, NULL);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "834: }",
          "836: R_API RList *r_bin_get_relocs(RBin *bin) {",
          "837:  RBinObject *o = r_bin_cur_object (bin);",
          "839: }",
          "841: R_API RList *r_bin_get_sections(RBin *bin) {",
          "842:  RBinObject *o = r_bin_cur_object (bin);",
          "844: }",
          "",
          "[Removed Lines]",
          "838:  return o? o->relocs: NULL;",
          "843:  return o? o->sections: NULL;",
          "",
          "[Added Lines]",
          "809:  r_return_val_if_fail (bin, NULL);",
          "811:  return o ? o->relocs : NULL;",
          "815:  r_return_val_if_fail (bin, NULL);",
          "817:  return o ? o->sections : NULL;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "848:  RBinSection *section;",
          "849:  RListIter *iter;",
          "850:  ut64 from, to;",
          "860:   }",
          "861:  }",
          "862:  return NULL;",
          "",
          "[Removed Lines]",
          "851:  if (o) {",
          "853:   r_list_foreach (o->sections, iter, section) {",
          "854:    from = va? binobj_a2b (o, section->vaddr): section->paddr;",
          "855:    to = va? (binobj_a2b (o, section->vaddr) + section->vsize) :",
          "856:     (section->paddr + section->size);",
          "857:    if (off >= from && off < to) {",
          "858:     return section;",
          "859:    }",
          "",
          "[Added Lines]",
          "826:  r_return_val_if_fail (o, NULL);",
          "828:  r_list_foreach (o->sections, iter, section) {",
          "829:   from = va ? binobj_a2b (o, section->vaddr) : section->paddr;",
          "830:   to = va ? (binobj_a2b (o, section->vaddr) + section->vsize) : (section->paddr + section->size);",
          "831:   if (off >= from && off < to) {",
          "832:    return section;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "892: }",
          "894: R_API RList *r_bin_get_strings(RBin *bin) {",
          "895:  RBinObject *o = r_bin_cur_object (bin);",
          "897: }",
          "899: R_API int r_bin_is_string(RBin *bin, ut64 va) {",
          "",
          "[Removed Lines]",
          "896:  return o? o->strings: NULL;",
          "",
          "[Added Lines]",
          "868:  r_return_val_if_fail (bin, NULL);",
          "870:  return o ? o->strings : NULL;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "918: R_API RBinSymbol *r_bin_get_symbol_at_vaddr(RBin *bin, ut64 addr) {",
          "920:  RList *symbols = r_bin_get_symbols (bin);",
          "921:  RListIter *iter;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "893:  r_return_val_if_fail (bin, NULL);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "932: R_API RBinSymbol *r_bin_get_symbol_at_paddr(RBin *bin, ut64 addr) {",
          "934:  RList *symbols = r_bin_get_symbols (bin);",
          "935:  RListIter *iter;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "908:  r_return_val_if_fail (bin, NULL);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "943: }",
          "945: R_API RList *r_bin_get_symbols(RBin *bin) {",
          "946:  RBinObject *o = r_bin_cur_object (bin);",
          "948: }",
          "950: R_API RList *r_bin_get_mem(RBin *bin) {",
          "951:  RBinObject *o = r_bin_cur_object (bin);",
          "953: }",
          "955: R_API int r_bin_is_big_endian(RBin *bin) {",
          "956:  RBinObject *o = r_bin_cur_object (bin);",
          "958: }",
          "960: R_API int r_bin_is_stripped(RBin *bin) {",
          "961:  RBinObject *o = r_bin_cur_object (bin);",
          "963: }",
          "965: R_API int r_bin_is_static(RBin *bin) {",
          "966:  RBinObject *o = r_bin_cur_object (bin);",
          "967:  if (o && r_list_length (o->libs) > 0) {",
          "968:   return R_BIN_DBG_STATIC & o->info->dbg_info;",
          "",
          "[Removed Lines]",
          "947:  return o? o->symbols: NULL;",
          "952:  return o? o->mem: NULL;",
          "957:  return (o && o->info)? o->info->big_endian: -1;",
          "962:  return o? (R_BIN_DBG_STRIPPED & o->info->dbg_info): 1;",
          "",
          "[Added Lines]",
          "922:  r_return_val_if_fail (bin, NULL);",
          "924:  return o ? o->symbols : NULL;",
          "928:  r_return_val_if_fail (bin, NULL);",
          "930:  return o ? o->mem : NULL;",
          "934:  r_return_val_if_fail (bin, -1);",
          "936:  return (o && o->info) ? o->info->big_endian : -1;",
          "940:  r_return_val_if_fail (bin, -1);",
          "942:  return o ? (R_BIN_DBG_STRIPPED & o->info->dbg_info) : 1;",
          "946:  r_return_val_if_fail (bin, false);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "974: R_API int r_bin_has_dbg_linenums(RBin *bin) {",
          "975:  RBinObject *o = r_bin_cur_object (bin);",
          "977: }",
          "979: R_API int r_bin_has_dbg_syms(RBin *bin) {",
          "980:  RBinObject *o = r_bin_cur_object (bin);",
          "982: }",
          "984: R_API int r_bin_has_dbg_relocs(RBin *bin) {",
          "985:  RBinObject *o = r_bin_cur_object (bin);",
          "987: }",
          "989: R_API RBin *r_bin_new() {",
          "",
          "[Removed Lines]",
          "976:  return o? (R_BIN_DBG_LINENUMS & o->info->dbg_info): false;",
          "981:  return o? (R_BIN_DBG_SYMS & o->info->dbg_info): false;",
          "986:  return o? (R_BIN_DBG_RELOCS & o->info->dbg_info): false;",
          "",
          "[Added Lines]",
          "956:  r_return_val_if_fail (bin, false);",
          "958:  return o ? (R_BIN_DBG_LINENUMS & o->info->dbg_info) : false;",
          "962:  r_return_val_if_fail (bin, false);",
          "964:  return o ? (R_BIN_DBG_SYMS & o->info->dbg_info) : false;",
          "968:  r_return_val_if_fail (bin, false);",
          "970:  return o ? (R_BIN_DBG_RELOCS & o->info->dbg_info) : false;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1003:  bin->strpurge = NULL;",
          "1004:  bin->want_dbginfo = true;",
          "1005:  bin->cur = NULL;",
          "1007:  bin->ids = r_id_storage_new (0, ST32_MAX);",
          "",
          "[Removed Lines]",
          "1006:  bin->io_owned = false;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1039: }",
          "1041: R_API int r_bin_use_arch(RBin *bin, const char *arch, int bits, const char *name) {",
          "1042:  RBinFile *binfile = r_bin_file_find_by_arch_bits (bin, arch, bits, name);",
          "1043:  RBinObject *obj = NULL;",
          "1044:  if (binfile) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1025:  r_return_val_if_fail (bin && arch, false);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1078: }",
          "1080: R_API int r_bin_select(RBin *bin, const char *arch, int bits, const char *name) {",
          "1081:  RBinFile *cur = r_bin_cur (bin);",
          "1082:  RBinObject *obj = NULL;",
          "1084:  RBinFile *binfile = r_bin_file_find_by_arch_bits (bin, arch, bits, name);",
          "1085:  if (binfile && name) {",
          "1086:   obj = r_bin_object_find_by_arch_bits (binfile, arch, bits, name);",
          "",
          "[Removed Lines]",
          "1083:  name = !name && cur? cur->file: name;",
          "",
          "[Added Lines]",
          "1066:  r_return_val_if_fail (bin, false);",
          "1070:  name = !name && cur ? cur->file : name;",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1089: }",
          "1091: R_API int r_bin_select_object(RBinFile *binfile, const char *arch, int bits, const char *name) {",
          "1092:  RBinObject *obj = r_bin_object_find_by_arch_bits (binfile, arch, bits, name);",
          "1093:  return r_bin_file_set_cur_binfile_obj (binfile->rbin, binfile, obj);",
          "1094: }",
          "1096: R_API int r_bin_select_by_ids(RBin *bin, ut32 binfile_id, ut32 binobj_id) {",
          "1097:  RBinFile *binfile = NULL;",
          "1098:  RBinObject *obj = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1079:  r_return_val_if_fail (binfile, false);",
          "1085:  r_return_val_if_fail (bin, false);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1177: }",
          "1179: R_API void r_bin_list_archs(RBin *bin, int mode) {",
          "1180:  RListIter *iter;",
          "1181:  int i = 0;",
          "1182:  char unk[128];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1170:  r_return_if_fail (bin);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1331: R_API RBuffer *r_bin_package(RBin *bin, const char *type, const char *file, RList *files) {",
          "1332:  if (!strcmp (type, \"zip\")) {",
          "1357:  } else if (!strcmp (type, \"fat\")) {",
          "1358:   const char *f;",
          "1359:   RListIter *iter;",
          "",
          "[Removed Lines]",
          "1333: #if 0",
          "1334:   int zep = 0;",
          "1335:   struct zip * z = zip_open (file, 8 | 1, &zep);",
          "1336:   if (z) {",
          "1337:    RListIter *iter;",
          "1338:    const char *f;",
          "1339:    eprintf (\"zip file created\\n\");",
          "1340:    r_list_foreach (files, iter, f) {",
          "1341:     struct zip_source *zs = NULL;",
          "1342:     zs = zip_source_file (z, f, 0, 1024);",
          "1343:     if (zs) {",
          "1344:      eprintf (\"ADD %s\\n\", f);",
          "1345:      zip_add (z, f, zs);",
          "1346:      zip_source_free (zs);",
          "1347:     } else {",
          "1348:      eprintf (\"Cannot find file %s\\n\", f);",
          "1349:     }",
          "1350:     eprintf (\"zS %p\\n\", zs);",
          "1351:    }",
          "1352:    zip_close (z);",
          "1353:   } else {",
          "1354:    eprintf (\"Cannot create zip file\\n\");",
          "1355:   }",
          "1356: #endif",
          "",
          "[Added Lines]",
          "1326:   r_warn_if_reached ();",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1412: }",
          "1414: R_API RBinObject *r_bin_get_object(RBin *bin) {",
          "1415:  RBinObject *o = r_bin_cur_object (bin);",
          "1416:  if (o) {",
          "1417:   o->referenced++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1385:  r_return_val_if_fail (bin, NULL);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1420: }",
          "1422: R_API RList * /*<RBinClass>*/ r_bin_get_classes(RBin *bin) {",
          "1423:  RBinObject *o = r_bin_cur_object (bin);",
          "1425: }",
          "1427: R_API void r_bin_class_free(RBinClass *c) {",
          "",
          "[Removed Lines]",
          "1424:  return o? o->classes: NULL;",
          "",
          "[Added Lines]",
          "1394:  r_return_val_if_fail (bin, NULL);",
          "1396:  return o ? o->classes : NULL;",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1470: }",
          "1472: R_API RBinClass *r_bin_class_get(RBinFile *binfile, const char *name) {",
          "1476:  RBinClass *c;",
          "1477:  RListIter *iter;",
          "1478:  RList *list = binfile->o->classes;",
          "",
          "[Removed Lines]",
          "1473:  if (!binfile || !binfile->o || !name) {",
          "1474:   return NULL;",
          "1475:  }",
          "",
          "[Added Lines]",
          "1445:  r_return_val_if_fail (binfile && binfile->o && name, NULL);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1485: }",
          "1487: R_API RBinSymbol *r_bin_class_add_method(RBinFile *binfile, const char *classname, const char *name, int nargs) {",
          "1488:  RBinClass *c = r_bin_class_get (binfile, classname);",
          "1489:  if (!c) {",
          "1490:   c = r_bin_class_new (binfile, classname, NULL, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1459:  r_return_val_if_fail (binfile, NULL);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1519: R_API ut64 r_bin_file_get_vaddr(RBinFile *binfile, ut64 paddr, ut64 vaddr) {",
          "1520:  int use_va = 0;",
          "1522:   use_va = binfile->o->info->has_va;",
          "1523:  }",
          "1525: }",
          "1529: R_API ut64 r_bin_get_vaddr(RBin *bin, ut64 paddr, ut64 vaddr) {",
          "1536:  if (!bin->cur) {",
          "1537:   return paddr;",
          "1538:  }",
          "",
          "[Removed Lines]",
          "1521:  if (binfile && binfile->o && binfile->o->info) {",
          "1524:  return use_va? binobj_a2b (binfile->o, vaddr): paddr;",
          "1530:  if (!bin) {",
          "1531:   return UT64_MAX;",
          "1532:  }",
          "1533:  if (paddr == UT64_MAX) {",
          "1534:   return UT64_MAX;",
          "1535:  }",
          "",
          "[Added Lines]",
          "1493:  r_return_val_if_fail (binfile, paddr);",
          "1496:  if (binfile->o && binfile->o->info) {",
          "1499:  return use_va ? binobj_a2b (binfile->o, vaddr) : paddr;",
          "1505:  r_return_val_if_fail (bin && paddr != UT64_MAX, UT64_MAX);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1552: }",
          "1554: R_API ut64 r_bin_a2b(RBin *bin, ut64 addr) {",
          "1555:  RBinObject *o = r_bin_cur_object (bin);",
          "1557: }",
          "1559: R_API ut64 r_bin_get_size(RBin *bin) {",
          "1560:  RBinObject *o = r_bin_cur_object (bin);",
          "1561:  return o ? o->size : 0;",
          "1562: }",
          "1564: R_API RBinFile *r_bin_cur(RBin *bin) {",
          "1566: }",
          "1568: R_API RBinObject *r_bin_cur_object(RBin *bin) {",
          "1569:  RBinFile *binfile = r_bin_cur (bin);",
          "1571: }",
          "1573: R_API void r_bin_force_plugin(RBin *bin, const char *name) {",
          "1574:  free (bin->force);",
          "1576: }",
          "1578: R_API int r_bin_read_at(RBin *bin, ut64 addr, ut8 *buf, int size) {",
          "1583:  return iob->read_at (iob->io, addr, buf, size);",
          "1584: }",
          "",
          "[Removed Lines]",
          "1556:  return o? o->baddr_shift + addr: addr;",
          "1565:  return bin? bin->cur: NULL;",
          "1570:  return binfile? binfile->o: NULL;",
          "1575:  bin->force = (name && *name)? strdup (name): NULL;",
          "1579:  RIOBind *iob;",
          "1580:  if (!bin || !(iob = &(bin->iob))) {",
          "1581:   return false;",
          "1582:  }",
          "",
          "[Added Lines]",
          "1526:  r_return_val_if_fail (bin, UT64_MAX);",
          "1528:  return binobj_a2b (o, addr);",
          "1532:  r_return_val_if_fail (bin, UT64_MAX);",
          "1538:  r_return_val_if_fail (bin, NULL);",
          "1539:  return bin->cur;",
          "1543:  r_return_val_if_fail (bin, NULL);",
          "1545:  return binfile ? binfile->o : NULL;",
          "1549:  r_return_if_fail (bin);",
          "1551:  bin->force = (name && *name) ? strdup (name) : NULL;",
          "1555:  r_return_val_if_fail (bin, false);",
          "1556:  RIOBind *iob = &(bin->iob);",
          "",
          "---------------"
        ],
        "libr/bin/obj.c||libr/bin/obj.c": [
          "File: libr/bin/obj.c -> libr/bin/obj.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:  RBinObject *old_o;",
          "106:  RBinPlugin *cp;",
          "107:  int i, minlen;",
          "113:  RBin *bin = binfile->rbin;",
          "114:  old_o = binfile->o;",
          "115:  cp = o->plugin;",
          "",
          "[Removed Lines]",
          "110:  if (!binfile || !o || !o->plugin) {",
          "111:   return false;",
          "112:  }",
          "",
          "[Added Lines]",
          "109:  r_return_val_if_fail (binfile && o && o->plugin, false);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "264: }",
          "266: R_API RBinObject *r_bin_object_get_cur(RBin *bin) {",
          "267:  return r_bin_file_object_get_cur (r_bin_cur (bin));",
          "268: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265:  r_return_val_if_fail (bin, NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "321:  RBinObject *obj = NULL;",
          "322:  RListIter *iter = NULL;",
          "323:  RBinInfo *info = NULL;",
          "324:  r_list_foreach (binfile->objs, iter, obj) {",
          "325:   info = obj->info;",
          "326:   if (info && info->arch && info->file &&",
          "328:    !strcmp (info->arch, arch) &&",
          "329:    !strcmp (info->file, name)) {",
          "330:    break;",
          "",
          "[Removed Lines]",
          "327:      (bits == info->bits) &&",
          "",
          "[Added Lines]",
          "324:  r_return_val_if_fail (binfile && arch && name, NULL);",
          "329:    (bits == info->bits) &&",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "335: }",
          "337: R_API ut64 r_bin_object_get_baddr(RBinObject *o) {",
          "339: }",
          "341: R_API int r_bin_object_delete(RBin *bin, ut32 binfile_id, ut32 binobj_id) {",
          "",
          "[Removed Lines]",
          "338:  return o? o->baddr + o->baddr_shift: UT64_MAX;",
          "",
          "[Added Lines]",
          "340:  r_return_val_if_fail (o, UT64_MAX);",
          "341:  return o->baddr + o->baddr_shift;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "343:  RBinObject *obj = NULL;",
          "344:  int res = false;",
          "346:  if (binfile_id == UT32_MAX) {",
          "347:   binfile = r_bin_file_find_by_object_id (bin, binobj_id);",
          "349:  } else if (binobj_id == UT32_MAX) {",
          "350:   binfile = r_bin_file_find_by_id (bin, binfile_id);",
          "352:  } else {",
          "353:   binfile = r_bin_file_find_by_id (bin, binfile_id);",
          "355:  }",
          "356:  if (binfile && bin->cur == binfile) {",
          "357:   bin->cur = NULL;",
          "",
          "[Removed Lines]",
          "348:   obj = binfile? r_bin_file_object_find_by_id (binfile, binobj_id): NULL;",
          "351:   obj = binfile? binfile->o: NULL;",
          "354:   obj = binfile? r_bin_file_object_find_by_id (binfile, binobj_id): NULL;",
          "",
          "[Added Lines]",
          "349:  r_return_val_if_fail (bin, false);",
          "353:   obj = binfile ? r_bin_file_object_find_by_id (binfile, binobj_id) : NULL;",
          "356:   obj = binfile ? binfile->o : NULL;",
          "359:   obj = binfile ? r_bin_file_object_find_by_id (binfile, binobj_id) : NULL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "371: }",
          "373: R_API void r_bin_object_set_baddr(RBinObject *o, ut64 baddr) {",
          "376:  }",
          "378: }",
          "381:  RList *strings = bo->strings;",
          "382:  RBinString *ptr;",
          "383:  RListIter *iter;",
          "",
          "[Removed Lines]",
          "374:  if (!o || baddr == UT64_MAX) {",
          "375:   return;",
          "377:  o->baddr_shift = baddr - o->baddr;",
          "380: R_API void r_bin_object_filter_strings (RBinObject *bo) {",
          "",
          "[Added Lines]",
          "379:  r_return_if_fail (o);",
          "380:  if (baddr != UT64_MAX) {",
          "381:   o->baddr_shift = baddr - o->baddr;",
          "385: R_API void r_bin_object_filter_strings(RBinObject *bo) {",
          "386:  r_return_if_fail (bo);",
          "",
          "---------------"
        ],
        "libr/bin/open.c||libr/bin/open.c": [
          "File: libr/bin/open.c -> libr/bin/open.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include <r_bin.h>",
          "22: R_API int r_bin_open(RBin *bin, const char *filename, RBinOptions *bo) {",
          "23:  ut64 baddr = 0LL, laddr = 0LL;",
          "24:  int iofd = -1, rawstr = 0, xtr_idx = 0;",
          "32:  if (r_bin_load (bin, filename, baddr, laddr, xtr_idx, iofd, rawstr)) {",
          "33:   int id = bin->cur->id; // TODO rename to bd?",
          "34:   r_id_storage_set (bin->ids, bin->cur, id);",
          "",
          "[Removed Lines]",
          "5: R_API RBinOptions *r_bin_options_new (ut64 offset, ut64 baddr, int rawstr) {",
          "6:  RBinOptions *bo = R_NEW0 (RBinOptions);",
          "7:  if (bo) {",
          "8:   bo->loadaddr = UT64_MAX;",
          "9:   bo->offset = offset;",
          "10:   bo->baseaddr = baddr;",
          "11:   bo->rawstr = rawstr;",
          "12:   bo->iofd = -1;",
          "13:  }",
          "14:  return bo;",
          "15: }",
          "17: R_API void r_bin_options_free(RBinOptions *bo) {",
          "18:  free (bo->name);",
          "19:  free (bo);",
          "20: }",
          "25:  if (bo) {",
          "26:   baddr = bo->baseaddr;",
          "27:   laddr = bo->loadaddr;",
          "28:   xtr_idx = bo->xtr_idx;",
          "29:   iofd = bo->iofd;",
          "30:   rawstr = bo->rawstr;",
          "31:  }",
          "",
          "[Added Lines]",
          "9:  r_return_val_if_fail (bin && filename && bo, -1);",
          "11:  baddr = bo->baseaddr;",
          "12:  laddr = bo->loadaddr;",
          "13:  xtr_idx = bo->xtr_idx;",
          "14:  iofd = bo->iofd;",
          "15:  rawstr = bo->rawstr;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:  return -1;",
          "38: }",
          "41:  return r_id_storage_take (bin->ids, bd);",
          "42: }",
          "",
          "[Removed Lines]",
          "40: R_API RBinFile *r_bin_get_file (RBin *bin, int bd) {",
          "",
          "[Added Lines]",
          "24: R_API RBinFile *r_bin_get_file(RBin *bin, int bd) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "50:  }",
          "51:  return false;",
          "52: }",
          "",
          "[Removed Lines]",
          "54: #if 0",
          "57: var bin = new RBin ();",
          "58: int fd = bin.open(\"/bin/ls\", null);",
          "59: var binfile = bin.get_file(fd);",
          "60: binfile.symbols.foreach(sym => {",
          "61:   print(sym.name);",
          "62: });",
          "63: bin.close(fd);",
          "66: int bd = bin->cur;",
          "67: r_list_foreach (r_bin_list (bin, bd, R_BIN_REQ_SYMBOLS), iter, sym) {",
          "68:  eprintf (\"Symbol: %s\\n\", sym->name);",
          "69: }",
          "71: bool cb(void *user, void *data) {",
          "72: }",
          "73: r_bin_foreach (bin, bd, R_BIN_REQ_SYMBOLS, cb, user);",
          "74: #if 0",
          "78: R_API bool r_bin_query(RBin *bin, const char *query) {",
          "79:  bool ret = false;",
          "80:  char *q = strdup (query);",
          "81:  const char *at = strchr (q, '@');",
          "82:  if (at) {",
          "84:  }",
          "85:  if (!strcmp (q, \"s\")) {",
          "87:   ret = true;",
          "88:  } else {",
          "89:   eprintf (\"Unknown command\\n\");",
          "90:  }",
          "91:  return ret;",
          "96: }",
          "97: #endif",
          "99: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libr/core/cfile.c||libr/core/cfile.c": [
          "File: libr/core/cfile.c -> libr/core/cfile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "291:  RIODesc *desc = cf ? r_io_desc_get (r->io, cf->fd) : NULL;",
          "292:  RBinFile *binfile = NULL;",
          "293:  RBinPlugin *plugin;",
          "295:  int xtr_idx = 0; // if 0, load all if xtr is used",
          "",
          "[Removed Lines]",
          "294:  RBinOptions *bo = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "314:  }",
          "315: #endif",
          "316:  int fd = cf ? cf->fd : -1;",
          "327:   eprintf (\"RBinLoad: Cannot open %s\\n\", filenameuri);",
          "328:   if (r_config_get_i (r->config, \"bin.rawstr\")) {",
          "332:     return false;",
          "333:    }",
          "334:   }",
          "",
          "[Removed Lines]",
          "318:  bo = r_bin_options_new (0LL, baseaddr, false);",
          "319:  if (!bo) {",
          "320:   eprintf (\"Failed to create bin options\\n\");",
          "321:   return false;",
          "322:  }",
          "324:  bo->xtr_idx = xtr_idx;",
          "325:  bo->iofd = fd;",
          "326:  if (r_bin_open (r->bin, filenameuri, bo) == -1) {",
          "329:    bo->rawstr = true;",
          "330:    if (r_bin_open (r->bin, filenameuri, bo) == -1) {",
          "331:     r_bin_options_free (bo);",
          "",
          "[Added Lines]",
          "316:  RBinOptions bo = {",
          "317:   .offset = 0LL,",
          "318:   .baseaddr = baseaddr,",
          "319:   .rawstr = false,",
          "320:   .xtr_idx = xtr_idx,",
          "321:   .iofd = fd,",
          "322:   .loadaddr = UT64_MAX,",
          "323:  };",
          "325:  if (r_bin_open (r->bin, filenameuri, &bo) == -1) {",
          "328:    bo.rawstr = true;",
          "329:    if (r_bin_open (r->bin, filenameuri, &bo) == -1) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "367:   r_core_cmd0 (r, \"\\\"(fix-dex,wx `ph sha1 $s-32 @32` @12 ; wx `ph adler32 $s-12 @12` @8)\\\"\\n\");",
          "368:  }",
          "371:  return true;",
          "372: }",
          "",
          "[Removed Lines]",
          "370:  r_bin_options_free (bo);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libr/core/cmd_search.c||libr/core/cmd_search.c": [
          "File: libr/core/cmd_search.c -> libr/core/cmd_search.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "256:   r_io_read_at (core->io, from, buf, sz);",
          "257:   plug = r_bin_get_binplugin_by_bytes (core->bin, buf, sz);",
          "258:   if (plug) {",
          "261:    if (plug->size) {",
          "262:     r_bin_load_io2 (core->bin, core->file->fd,",
          "263:      0, 0, 0, core->offset, plug->name, 4096);",
          "",
          "[Removed Lines]",
          "259:    r_cons_printf (\"0x%08\"PFMT64x \"  %s\\n\", from, plug->name);",
          "",
          "[Added Lines]",
          "259:    r_cons_printf (\"0x%08\" PFMT64x \"  %s\\n\", from, plug->name);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2477: }",
          "2481:  int i = 0;",
          "2482:  while (i < bufsz) {",
          "2484:   if (!buf[i]) {",
          "2485:    i++;",
          "2486:    continue;",
          "",
          "[Removed Lines]",
          "2480: static void incBuffer (ut8 *buf, int bufsz) {",
          "2483:   buf[i] ++;",
          "",
          "[Added Lines]",
          "2479: static void incBuffer(ut8 *buf, int bufsz) {",
          "2482:   buf[i]++;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2491: }",
          "2494:  ut8 R_ALIGNED(8) cmphash[128];",
          "2495:  int i, algoType = R_HASH_CRC32;",
          "2496:  int bufsz = core->blocksize;",
          "",
          "[Removed Lines]",
          "2493: static void search_collisions (RCore *core, const char *hashName, const ut8 *hashValue, int hashLength) {",
          "",
          "[Added Lines]",
          "2492: static void search_collisions(RCore *core, const char *hashName, const ut8 *hashValue, int hashLength) {",
          "",
          "---------------"
        ],
        "libr/include/r_bin.h||libr/include/r_bin.h": [
          "File: libr/include/r_bin.h -> libr/include/r_bin.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "320:  ut64 filter_rules;",
          "321:  bool demanglercmd;",
          "322:  bool verbose;",
          "324:  bool use_xtr; // use extract plugins when loading a file?",
          "325:  bool use_ldr; // use loader plugins when loading a file?",
          "326: } RBin;",
          "",
          "[Removed Lines]",
          "323:  bool io_owned;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "347:  RBinXtrMetadata *metadata;",
          "348: } RBinXtrData;",
          "353: R_API void r_bin_import_free(void *_imp);",
          "354: R_API void r_bin_symbol_free(void *_sym);",
          "355: R_API void r_bin_string_free(void *_str);",
          "",
          "[Removed Lines]",
          "350: R_API RBinXtrData * r_bin_xtrdata_new (RBuffer *buf, ut64 offset, ut64 size, ut32 file_count, RBinXtrMetadata *metadata);",
          "351: R_API void r_bin_xtrdata_free (void /*RBinXtrData*/ *data);",
          "352: R_API void r_bin_info_free (RBinInfo *rb);",
          "",
          "[Added Lines]",
          "349: R_API RBinXtrData *r_bin_xtrdata_new(RBuffer *buf, ut64 offset, ut64 size, ut32 file_count, RBinXtrMetadata *metadata);",
          "350: R_API void r_bin_xtrdata_free(void /*RBinXtrData*/ *data);",
          "351: R_API void r_bin_info_free(RBinInfo *rb);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "607:  ut64 offset; // starting physical address to read from the target file",
          "608:  ut64 baseaddr; // where the linker maps the binary in memory",
          "609:  ut64 loadaddr; // the desired offset where the binary should be loaded",
          "611:  int xtr_idx; // load Nth binary",
          "612:  int rawstr;",
          "613:  int iofd;",
          "615: } RBinOptions;",
          "617: R_API RBinImport *r_bin_import_clone(RBinImport *o);",
          "618: R_API RBinSymbol *r_bin_symbol_clone(RBinSymbol *o);",
          "622: R_API int r_bin_open(RBin *bin, const char *filename, RBinOptions *bo);",
          "624: R_API bool r_bin_close(RBin *bin, int bd);",
          "625: R_API bool r_bin_query(RBin *bin, const char *query);",
          "628: R_API int r_bin_load(RBin *bin, const char *file, ut64 baseaddr, ut64 loadaddr, int xtr_idx, int fd, int rawstr);",
          "631: R_API bool r_bin_load_io2(RBin *bin, int fd, ut64 baseaddr, ut64 loadaddr, int xtr_idx, ut64 offset, const char *name, ut64 sz);",
          "",
          "[Removed Lines]",
          "610:  ut64 size; // restrict the size of the target fd",
          "614:  char *name; // or comment :?",
          "620: R_API RBinOptions *r_bin_options_new (ut64 offset, ut64 baddr, int rawstr);",
          "621: R_API void r_bin_options_free(RBinOptions *bo);",
          "623: R_API RBinFile *r_bin_get_file (RBin *bin, int bd);",
          "629: R_API int r_bin_load_as(RBin *bin, const char *file, ut64 baseaddr, ut64 loadaddr, int xtr_idx, int fd, int rawstr, int fileoffset, const char *name);",
          "630: R_API bool r_bin_load_io (RBin *bin, int fd, ut64 baseaddr, ut64 loadaddr, int xtr_idx, ut64 offset, const char *name);",
          "",
          "[Added Lines]",
          "618: R_API RBinFile *r_bin_get_file(RBin *bin, int bd);",
          "624: R_API bool r_bin_load_io(RBin *bin, int fd, ut64 baseaddr, ut64 loadaddr, int xtr_idx, ut64 offset, const char *name);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "643: R_API RList *r_bin_raw_strings(RBinFile *a, int min);",
          "644: R_API RList *r_bin_dump_strings(RBinFile *a, int min, int raw);",
          "650: R_API RBinFile *r_bin_file_new(RBin *bin, const char *file, const ut8 *bytes, ut64 sz, ut64 file_sz, int rawstr, int fd, const char *xtrname, Sdb *sdb, bool steal_ptr);",
          "",
          "[Removed Lines]",
          "646: R_API int r_bin_read_at (RBin *bin, ut64 addr, ut8 *buf, int size);",
          "647: R_API int r_bin_write_at (RBin *bin, ut64 addr, const ut8 *buf, int size);",
          "",
          "[Added Lines]",
          "640: R_API int r_bin_read_at(RBin *bin, ut64 addr, ut8 *buf, int size);",
          "641: R_API int r_bin_write_at(RBin *bin, ut64 addr, const ut8 *buf, int size);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "682: R_API void r_bin_object_free(void /*RBinObject*/ *o_);",
          "683: R_API ut64 r_bin_object_get_baddr(RBinObject *o);",
          "685: R_API void r_bin_object_set_baddr(RBinObject *o, ut64 baddr);",
          "686: R_API RBinObject *r_bin_object_new(RBinFile *binfile, RBinPlugin *plugin, ut64 baseaddr, ut64 loadaddr, ut64 offset, ut64 sz);",
          "687: R_API int r_bin_object_set_items(RBinFile *binfile, RBinObject *o);",
          "",
          "[Removed Lines]",
          "684: R_API void r_bin_object_filter_strings (RBinObject *bo);",
          "",
          "[Added Lines]",
          "678: R_API void r_bin_object_filter_strings(RBinObject *bo);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "691: R_API void r_bin_object_delete_items(RBinObject *o);",
          "700: #define MODE_PRINT 0x000",
          "701: #define MODE_RADARE 0x001",
          "702: #define MODE_SIMPLE 0x004",
          "705: R_API int r_bin_list(RBin *bin, int json);",
          "707: R_API RBinObject *r_bin_get_object(RBin *bin);",
          "709: R_API ut64 r_bin_get_baddr(RBin *bin);",
          "710: R_API void r_bin_set_baddr(RBin *bin, ut64 baddr);",
          "711: R_API ut64 r_bin_get_laddr(RBin *bin);",
          "",
          "[Removed Lines]",
          "694: R_API int r_bin_file_deref_by_bind (RBinBind * binb);",
          "695: R_API int r_bin_file_deref (RBin *bin, RBinFile * a);",
          "696: R_API int r_bin_file_ref_by_bind (RBinBind * binb);",
          "697: R_API int r_bin_file_ref (RBin *bin, RBinFile * a);",
          "698: R_API bool r_bin_file_object_new_from_xtr_data(RBin *bin, RBinFile *bf, ut64 baseaddr, ut64 loadaddr,",
          "704:       RBinXtrData *xtr_data);",
          "706: R_API int r_bin_list_plugin(RBin *bin, const char* name, int json);",
          "708: R_API ut64 r_binfile_get_baddr (RBinFile *binfile);",
          "",
          "[Added Lines]",
          "688: R_API int r_bin_file_deref_by_bind(RBinBind *binb);",
          "689: R_API int r_bin_file_deref(RBin *bin, RBinFile *a);",
          "690: R_API int r_bin_file_ref_by_bind(RBinBind *binb);",
          "691: R_API int r_bin_file_ref(RBin *bin, RBinFile *a);",
          "692: R_API bool r_bin_file_object_new_from_xtr_data(RBin *bin, RBinFile *bf, ut64 baseaddr, ut64 loadaddr, RBinXtrData *xtr_data);",
          "699: R_API int r_bin_list_plugin(RBin *bin, const char *name, int json);",
          "701: R_API ut64 r_binfile_get_baddr(RBinFile *binfile);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "717: R_API RBinPlugin *r_bin_get_binplugin_by_name(RBin *bin, const char *name);",
          "718: R_API RBinPlugin *r_bin_get_binplugin_any(RBin *bin);",
          "722: R_API char *r_bin_demangle_java(const char *str);",
          "723: R_API char *r_bin_demangle_cxx(RBinFile *binfile, const char *str, ut64 vaddr);",
          "724: R_API char *r_bin_demangle_msvc(const char *str);",
          "",
          "[Removed Lines]",
          "720: R_API char* r_bin_demangle(RBinFile *binfile, const char *lang, const char *str, ut64 vaddr);",
          "721: R_API int r_bin_demangle_type (const char *str);",
          "",
          "[Added Lines]",
          "713: R_API char *r_bin_demangle(RBinFile *binfile, const char *lang, const char *str, ut64 vaddr);",
          "714: R_API int r_bin_demangle_type(const char *str);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "734: R_API bool r_bin_lang_rust(RBinFile *binfile);",
          "735: R_API const char *r_bin_get_meth_flag_string(ut64 flag, bool compact);",
          "751: R_API void r_bin_class_free(RBinClass *c);",
          "758: R_API int r_bin_is_string(RBin *bin, ut64 va);",
          "761: R_API RBinSymbol *r_bin_get_symbol_at_vaddr(RBin *bin, ut64 addr);",
          "762: R_API RBinSymbol *r_bin_get_symbol_at_paddr(RBin *bin, ut64 addr);",
          "763: R_API int r_bin_is_big_endian(RBin *bin);",
          "",
          "[Removed Lines]",
          "737: R_API RList* r_bin_get_entries(RBin *bin);",
          "738: R_API RList* r_bin_get_fields(RBin *bin);",
          "739: R_API RList* r_bin_get_imports(RBin *bin);",
          "740: R_API RBinInfo* r_bin_get_info(RBin *bin);",
          "741: R_API RList* r_bin_get_libs(RBin *bin);",
          "742: R_API ut64 r_bin_get_size (RBin *bin);",
          "743: R_API RList* r_bin_patch_relocs(RBin *bin);",
          "744: R_API RList* r_bin_get_relocs(RBin *bin);",
          "745: R_API RList* r_bin_get_sections(RBin *bin);",
          "746: R_API RList* /*<RBinClass>*/r_bin_get_classes(RBin *bin);",
          "749: R_API RBinClass *r_bin_class_get (RBinFile *binfile, const char *name);",
          "750: R_API RBinClass *r_bin_class_new (RBinFile *binfile, const char *name, const char *super, int view);",
          "752: R_API RBinSymbol *r_bin_class_add_method (RBinFile *binfile, const char *classname, const char *name, int nargs);",
          "753: R_API void r_bin_class_add_field (RBinFile *binfile, const char *classname, const char *name);",
          "754: R_API RList *r_bin_classes_from_symbols (RBinFile *bf, RBinObject *o);",
          "756: R_API RBinSection* r_bin_get_section_at(RBinObject *o, ut64 off, int va);",
          "757: R_API RList* r_bin_get_strings(RBin *bin);",
          "759: R_API RList* r_bin_reset_strings(RBin *bin);",
          "760: R_API RList* r_bin_get_symbols(RBin *bin);",
          "",
          "[Added Lines]",
          "730: R_API RList *r_bin_get_entries(RBin *bin);",
          "731: R_API RList *r_bin_get_fields(RBin *bin);",
          "732: R_API RList *r_bin_get_imports(RBin *bin);",
          "733: R_API RBinInfo *r_bin_get_info(RBin *bin);",
          "734: R_API RList *r_bin_get_libs(RBin *bin);",
          "735: R_API ut64 r_bin_get_size(RBin *bin);",
          "736: R_API RList *r_bin_patch_relocs(RBin *bin);",
          "737: R_API RList *r_bin_get_relocs(RBin *bin);",
          "738: R_API RList *r_bin_get_sections(RBin *bin);",
          "739: R_API RList * /*<RBinClass>*/ r_bin_get_classes(RBin *bin);",
          "742: R_API RBinClass *r_bin_class_get(RBinFile *binfile, const char *name);",
          "743: R_API RBinClass *r_bin_class_new(RBinFile *binfile, const char *name, const char *super, int view);",
          "745: R_API RBinSymbol *r_bin_class_add_method(RBinFile *binfile, const char *classname, const char *name, int nargs);",
          "746: R_API void r_bin_class_add_field(RBinFile *binfile, const char *classname, const char *name);",
          "747: R_API RList *r_bin_classes_from_symbols(RBinFile *bf, RBinObject *o);",
          "749: R_API RBinSection *r_bin_get_section_at(RBinObject *o, ut64 off, int va);",
          "750: R_API RList *r_bin_get_strings(RBin *bin);",
          "752: R_API RList *r_bin_reset_strings(RBin *bin);",
          "753: R_API RList *r_bin_get_symbols(RBin *bin);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "766: R_API int r_bin_has_dbg_linenums(RBin *bin);",
          "767: R_API int r_bin_has_dbg_syms(RBin *bin);",
          "768: R_API int r_bin_has_dbg_relocs(RBin *bin);",
          "773: R_API int r_bin_io_load(RBin *bin, RIO *io, int fd, ut64 baseaddr, ut64 loadaddr, int dummy);",
          "775: R_API int r_bin_select(RBin *bin, const char *arch, int bits, const char *name);",
          "776: R_API int r_bin_select_idx(RBin *bin, const char *name, int idx);",
          "777: R_API int r_bin_select_by_ids(RBin *bin, ut32 binfile_id, ut32 binobj_id);",
          "778: R_API int r_bin_use_arch(RBin *bin, const char *arch, int bits, const char *name);",
          "780: R_API void r_bin_list_archs(RBin *bin, int mode);",
          "781: R_API void r_bin_set_user_ptr(RBin *bin, void *user);",
          "786: R_API int r_bin_file_delete(RBin *bin, ut32 bin_fd);",
          "787: R_API int r_bin_file_delete_all(RBin *bin);",
          "797: R_API int r_bin_addr2line(RBin *bin, ut64 addr, char *file, int len, int *line);",
          "",
          "[Removed Lines]",
          "769: R_API RBin* r_bin_new(void);",
          "770: R_API void r_bin_iobind(RBin *bin, RIO *io);",
          "771: R_API RBinFile * r_bin_cur(RBin *bin);",
          "772: R_API RBinObject * r_bin_cur_object(RBin *bin);",
          "779: R_API RBinFile * r_bin_file_find_by_arch_bits(RBin *bin, const char *arch, int bits, const char *name);",
          "782: R_API RBuffer *r_bin_create (RBin *bin, const ut8 *code, int codelen, const ut8 *data, int datalen);",
          "783: R_API RBuffer *r_bin_package (RBin *bin, const char *type, const char *file, RList *files);",
          "784: R_API ut64 r_bin_get_vaddr (RBin *bin, ut64 paddr, ut64 vaddr);",
          "785: R_API ut64 r_bin_a2b (RBin *bin, ut64 addr);",
          "788: R_API int r_bin_file_set_cur_by_fd (RBin *bin, ut32 bin_fd);",
          "789: R_API RBinFile * r_bin_file_find_by_fd (RBin *bin, ut32 bin_fd);",
          "790: R_API RBinFile * r_bin_file_find_by_name (RBin * bin, const char * name);",
          "791: R_API RBinFile * r_bin_file_find_by_name_n (RBin * bin, const char * name, int idx);",
          "792: R_API RBinPlugin * r_bin_file_cur_plugin (RBinFile *binfile);",
          "793: R_API void r_bin_force_plugin (RBin *bin, const char *pname);",
          "794: R_API const char *r_bin_string_type (int type);",
          "",
          "[Added Lines]",
          "762: R_API RBin *r_bin_new(void);",
          "763: R_API RBinFile *r_bin_cur(RBin *bin);",
          "764: R_API RBinObject *r_bin_cur_object(RBin *bin);",
          "771: R_API RBinFile *r_bin_file_find_by_arch_bits(RBin *bin, const char *arch, int bits, const char *name);",
          "774: R_API RBuffer *r_bin_create(RBin *bin, const ut8 *code, int codelen, const ut8 *data, int datalen);",
          "775: R_API RBuffer *r_bin_package(RBin *bin, const char *type, const char *file, RList *files);",
          "776: R_API ut64 r_bin_get_vaddr(RBin *bin, ut64 paddr, ut64 vaddr);",
          "777: R_API ut64 r_bin_a2b(RBin *bin, ut64 addr);",
          "780: R_API int r_bin_file_set_cur_by_fd(RBin *bin, ut32 bin_fd);",
          "781: R_API RBinFile *r_bin_file_find_by_fd(RBin *bin, ut32 bin_fd);",
          "782: R_API RBinFile *r_bin_file_find_by_name(RBin *bin, const char *name);",
          "783: R_API RBinFile *r_bin_file_find_by_name_n(RBin *bin, const char *name, int idx);",
          "784: R_API RBinPlugin *r_bin_file_cur_plugin(RBinFile *binfile);",
          "785: R_API void r_bin_force_plugin(RBin *bin, const char *pname);",
          "786: R_API const char *r_bin_string_type(int type);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "809: R_API RList *r_bin_dwarf_parse_aranges(RBin *a, int mode);",
          "810: R_API RBinDwarfDebugAbbrev *r_bin_dwarf_parse_abbrev(RBin *a, int mode);",
          "814: R_API void r_bin_demangle_list(RBin *bin);",
          "815: R_API char *r_bin_demangle_plugin(RBin *bin, const char *name, const char *str);",
          "820: R_API void r_bin_filter_name(Sdb *db, ut64 addr, char *name, int maxlen);",
          "824: R_API bool r_bin_strpurge(RBin *bin, const char *str, ut64 addr);",
          "825: R_API bool r_bin_string_filter(RBin *bin, const char *str, ut64 addr);",
          "826: R_API bool r_bin_is_cxx(RBinFile *binfile);",
          "",
          "[Removed Lines]",
          "812: R_API RBinPlugin * r_bin_get_binplugin_by_bytes (RBin *bin, const ut8* bytes, ut64 sz);",
          "817: R_API RList *r_bin_get_mem (RBin *bin);",
          "821: R_API void r_bin_filter_symbols (RList *list);",
          "822: R_API void r_bin_filter_sections (RList *list);",
          "823: R_API void r_bin_filter_classes (RList *list);",
          "",
          "[Added Lines]",
          "804: R_API RBinPlugin *r_bin_get_binplugin_by_bytes(RBin *bin, const ut8 *bytes, ut64 sz);",
          "809: R_API RList *r_bin_get_mem(RBin *bin);",
          "813: R_API void r_bin_filter_symbols(RList *list);",
          "814: R_API void r_bin_filter_sections(RList *list);",
          "815: R_API void r_bin_filter_classes(RList *list);",
          "",
          "---------------"
        ],
        "libr/include/r_io.h||libr/include/r_io.h": [
          "File: libr/include/r_io.h -> libr/include/r_io.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "346: R_API bool r_io_resize (RIO *io, ut64 newsize);",
          "347: R_API int r_io_extend_at (RIO *io, ut64 addr, ut64 size);",
          "348: R_API bool r_io_set_write_mask (RIO *io, const ut8 *mask, int len);",
          "350: R_API int r_io_shift (RIO *io, ut64 start, ut64 end, st64 move);",
          "351: R_API ut64 r_io_seek (RIO *io, ut64 offset, int whence);",
          "352: R_API int r_io_fini (RIO *io);",
          "",
          "[Removed Lines]",
          "349: R_API int r_io_bind (RIO *io, RIOBind *bnd);",
          "",
          "[Added Lines]",
          "349: R_API void r_io_bind(RIO *io, RIOBind *bnd);",
          "",
          "---------------"
        ],
        "libr/io/io.c||libr/io/io.c": [
          "File: libr/io/io.c -> libr/io/io.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "529:  return true;",
          "530: }",
          "536:  bnd->io = io;",
          "537:  bnd->init = true;",
          "538:  bnd->desc_use = r_io_use_fd;",
          "",
          "[Removed Lines]",
          "532: R_API int r_io_bind(RIO* io, RIOBind* bnd) {",
          "533:  if (!io || !bnd) {",
          "534:   return false;",
          "535:  }",
          "",
          "[Added Lines]",
          "532: R_API void r_io_bind(RIO *io, RIOBind *bnd) {",
          "533:  r_return_if_fail (io && bnd);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "564: #if HAVE_PTRACE",
          "565:  bnd->ptrace = r_io_ptrace;",
          "566: #endif",
          "568: }",
          "",
          "[Removed Lines]",
          "567:  return true;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "sys/clang-format-diff.py||sys/clang-format-diff.py": [
          "File: sys/clang-format-diff.py -> sys/clang-format-diff.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:     # handle functions definitions/declarations: do not use space before (",
          "132:     for i, l in enumerate(formatted_code):",
          "136:         if l.startswith('R_API ') or l.startswith('static '):",
          "137:             formatted_code[i] = l.replace(' (', '(')",
          "",
          "[Removed Lines]",
          "133:         if lines and i + 1 not in modified_lines:",
          "134:             continue",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "850ee34055854c53ad7e8738e374a66782513586",
      "candidate_info": {
        "commit_hash": "850ee34055854c53ad7e8738e374a66782513586",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/850ee34055854c53ad7e8738e374a66782513586",
        "files": [
          "libr/bin/bin.c",
          "libr/core/cmd_info.c"
        ],
        "message": "Initial implementation of izzz",
        "before_after_code_files": [
          "libr/bin/bin.c||libr/bin/bin.c",
          "libr/core/cmd_info.c||libr/core/cmd_info.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/bin.c||libr/bin/bin.c"
          ],
          "candidate": [
            "libr/bin/bin.c||libr/bin/bin.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/bin.c||libr/bin/bin.c": [
          "File: libr/bin/bin.c -> libr/bin/bin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "235: #define R_STRING_SCAN_BUFFER_SIZE 2048",
          "238:          const ut64 from, const ut64 to, int type) {",
          "239:  ut8 tmp[R_STRING_SCAN_BUFFER_SIZE];",
          "240:  ut64 str_start, needle = from;",
          "241:  int count = 0, i, rc, runes;",
          "242:  int str_type = R_STRING_TYPE_DETECT;",
          "244:  if (type == -1) {",
          "",
          "[Removed Lines]",
          "237: static int string_scan_range(RList *list, const ut8 *buf, int min,",
          "",
          "[Added Lines]",
          "237: static int string_scan_range(RList *list, RBinFile *bf, int min,",
          "242:  const ut8 *buf = r_buf_buffer (bf->buf);",
          "243:  RIOBind *iob;",
          "244:  RIO *io;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "379:     new->string = r_str_ndup ((const char *)tmp, i);",
          "380:     r_list_append (list, new);",
          "381:    } else {",
          "384:    }",
          "385:   }",
          "386:  }",
          "",
          "[Removed Lines]",
          "383:     printf (\"0x%08\" PFMT64x \" %s\\n\", str_start, tmp);",
          "",
          "[Added Lines]",
          "386:     if (!bf->rbin || !(iob = &(bf->rbin->iob))) {",
          "387:      return false;",
          "388:     }",
          "389:     if (iob) {",
          "390:      io = iob->io;",
          "391:     }",
          "392:     if (io) {",
          "393:      io->cb_printf (\"0x%08\" PFMT64x \" %s\\n\", str_start, tmp);",
          "394:     } else {",
          "395:      return false;",
          "396:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "391:  RBinPlugin *plugin = r_bin_file_cur_plugin (bf);",
          "392:  RBinString *ptr;",
          "393:  RListIter *it;",
          "395:  if (!bf || !bf->buf || !bf->buf->buf) {",
          "396:   return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "407:  int type = -1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "411:   return;",
          "412:  }",
          "413:  if (!to || to > bf->buf->length) {",
          "415:  }",
          "416:  if (bf->rawstr != 2) {",
          "417:   ut64 size = to - from;",
          "",
          "[Removed Lines]",
          "414:   to = bf->buf->length;",
          "",
          "[Added Lines]",
          "428:   to = r_buf_size (bf->buf);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "428:    return;",
          "429:   }",
          "430:  }",
          "432:   return;",
          "433:  }",
          "434:  r_list_foreach (list, it, ptr) {",
          "",
          "[Removed Lines]",
          "431:  if (string_scan_range (list, bf->buf->buf, min, from, to, -1) < 0) {",
          "",
          "[Added Lines]",
          "445:  if (string_scan_range (list, bf, min, from, to, -1) < 0) {",
          "",
          "---------------"
        ],
        "libr/core/cmd_info.c||libr/core/cmd_info.c": [
          "File: libr/core/cmd_info.c -> libr/core/cmd_info.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:  \"iV\", \"\", \"Display file version info\",",
          "48:  \"iz|izj\", \"\", \"Strings in data sections (in JSON/Base64)\",",
          "49:  \"izz\", \"\", \"Search for Strings in the whole binary\",",
          "50:  \"iZ\", \"\", \"Guess size of binary program\",",
          "51:  NULL",
          "52: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:  \"izzz\", \"\", \"Dump Strings from whole binary to r2 shell (for huge files)\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "642:   case 'z':",
          "643:    if (input[1] == 'z') { //izz",
          "644:     switch (input[2]) {",
          "645:     case '*':",
          "646:      mode = R_CORE_BIN_RADARE;",
          "647:      break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "646:     case 'z'://izzz",
          "647:      {",
          "648:      RBinFile *bf = r_core_bin_cur (core);",
          "649:      int min = r_config_get_i (core->config, \"bin.minstr\");",
          "650:      if (bf) {",
          "651:       int tmp = bf->rawstr;",
          "652:       bf->rawstr = 2;",
          "653:       r_bin_dump_strings (bf, min);",
          "654:       bf->rawstr = tmp;",
          "655:      }",
          "656:      goto done;",
          "657:      }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0b1e8eaeccf9dd3220fbbfa4c0410bc6abea25c3",
      "candidate_info": {
        "commit_hash": "0b1e8eaeccf9dd3220fbbfa4c0410bc6abea25c3",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/0b1e8eaeccf9dd3220fbbfa4c0410bc6abea25c3",
        "files": [
          "libr/anal/esil.c",
          "libr/asm/p/asm_x86_nz.c",
          "libr/bin/bin.c",
          "libr/cons/dietline.c",
          "libr/cons/rgb.c",
          "libr/core/cmd_api.c",
          "libr/core/cmd_print.c",
          "libr/core/cmd_search.c",
          "libr/core/cmd_seek.c",
          "libr/core/disasm.c",
          "libr/core/rtr.c",
          "libr/core/visual.c",
          "libr/fs/fs.c",
          "libr/io/map.c",
          "libr/socket/run.c",
          "libr/socket/socket.c",
          "libr/util/r_json.c",
          "libr/util/unum.c",
          "shlr/java/class.c",
          "shlr/sdb/src/num.c",
          "shlr/sdb/src/sdb.c"
        ],
        "message": "Fix almost all warnings from the msvc build",
        "before_after_code_files": [
          "libr/anal/esil.c||libr/anal/esil.c",
          "libr/asm/p/asm_x86_nz.c||libr/asm/p/asm_x86_nz.c",
          "libr/bin/bin.c||libr/bin/bin.c",
          "libr/cons/dietline.c||libr/cons/dietline.c",
          "libr/cons/rgb.c||libr/cons/rgb.c",
          "libr/core/cmd_api.c||libr/core/cmd_api.c",
          "libr/core/cmd_print.c||libr/core/cmd_print.c",
          "libr/core/cmd_search.c||libr/core/cmd_search.c",
          "libr/core/cmd_seek.c||libr/core/cmd_seek.c",
          "libr/core/disasm.c||libr/core/disasm.c",
          "libr/core/rtr.c||libr/core/rtr.c",
          "libr/core/visual.c||libr/core/visual.c",
          "libr/fs/fs.c||libr/fs/fs.c",
          "libr/io/map.c||libr/io/map.c",
          "libr/socket/run.c||libr/socket/run.c",
          "libr/socket/socket.c||libr/socket/socket.c",
          "libr/util/r_json.c||libr/util/r_json.c",
          "libr/util/unum.c||libr/util/unum.c",
          "shlr/javclass.c||shlr/java/class.c",
          "shlr/sdb/src/num.c||shlr/sdsrc/num.c",
          "shlr/sdb/src/sdb.c||shlr/sdsrc/sdb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/bin.c||libr/bin/bin.c"
          ],
          "candidate": [
            "libr/bin/bin.c||libr/bin/bin.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/anal/esil.c||libr/anal/esil.c": [
          "File: libr/anal/esil.c -> libr/anal/esil.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1162:    }",
          "1163:    if (isNegative) {",
          "1164:     if (regsize == 32) {",
          "1166:      if (op_num >> param_num) {",
          "1167:       op_num >>= param_num;",
          "1169:      } else {",
          "1170:       op_num = -1;",
          "1171:      }",
          "",
          "[Removed Lines]",
          "1165:      op_num = -op_num;",
          "1168:       op_num = -op_num;",
          "",
          "[Added Lines]",
          "1165:      op_num = -(st64)op_num;",
          "1168:       op_num = -(st64)op_num;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1245:   if (src && r_anal_esil_get_parm (esil, src, &num2)) {",
          "1246:    ut64 mask = (regsize - 1);",
          "1247:    num2 &= mask;",
          "1249:    r_anal_esil_pushnum (esil, res);",
          "1250:    ret = 1;",
          "1251:   } else {",
          "",
          "[Removed Lines]",
          "1248:    ut64 res = (num >> num2) | (num << ((-num2) & mask));",
          "",
          "[Added Lines]",
          "1248:    ut64 res = (num >> num2) | (num << ((-(st64)num2) & mask));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1266:   if (src && r_anal_esil_get_parm (esil, src, &num2)) {",
          "1267:    ut64 mask = (regsize - 1);",
          "1268:    num2 &= mask;",
          "1270:    r_anal_esil_pushnum (esil, res);",
          "1271:    ret = 1;",
          "1272:   } else {",
          "",
          "[Removed Lines]",
          "1269:    ut64 res = (num << num2) | (num >> ((-num2) & mask));",
          "",
          "[Added Lines]",
          "1269:    ut64 res = (num << num2) | (num >> ((-(st64)num2) & mask));",
          "",
          "---------------"
        ],
        "libr/asm/p/asm_x86_nz.c||libr/asm/p/asm_x86_nz.c": [
          "File: libr/asm/p/asm_x86_nz.c -> libr/asm/p/asm_x86_nz.c"
        ],
        "libr/bin/bin.c||libr/bin/bin.c": [
          "File: libr/bin/bin.c -> libr/bin/bin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "309:     rc = r_utf8_encode (&tmp[i], r);",
          "310:     runes++;",
          "313:     if ((i + 32) < sizeof (tmp) && r < 93) {",
          "314:      tmp[i + 0] = '\\\\';",
          "315:      tmp[i + 1] = \"       abtnvfr             e  \"",
          "",
          "[Removed Lines]",
          "312:    } else if (r && r < 0x100 && strchr (\"\\b\\v\\f\\n\\r\\t\\a\\e\\\\\", (char)r)) {",
          "",
          "[Added Lines]",
          "312:    } else if (r && r < 0x100 && strchr (\"\\b\\v\\f\\n\\r\\t\\a\\033\\\\\", (char)r)) {",
          "",
          "---------------"
        ],
        "libr/cons/dietline.c||libr/cons/dietline.c": [
          "File: libr/cons/dietline.c -> libr/cons/dietline.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "433:  char *p;",
          "434:  const char **argv = NULL;",
          "435:  int i, j, opt = 0, plen, len = 0;",
          "439:  if (I.completion.run) {",
          "",
          "[Removed Lines]",
          "436:  int cols = r_cons_get_size (NULL) * 0.82;",
          "",
          "[Added Lines]",
          "436:  int cols = (int)(r_cons_get_size (NULL) * 0.82);",
          "",
          "---------------"
        ],
        "libr/cons/rgb.c||libr/cons/rgb.c": [
          "File: libr/cons/rgb.c -> libr/cons/rgb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:  return -1;",
          "51: }",
          "54:  bool grey = (r > 0 && r < 255 && r == g && r == b);",
          "56:  if (grey) {",
          "58:  }",
          "62:  return 16 + (r * 36) + (g * 6) + b;",
          "63: }",
          "65: static int rgb (int r, int g, int b) {",
          "66:  int c = lookup_rgb (r, g, b);",
          "69: }",
          "71: static void unrgb (int color, int *r, int *g, int *b) {",
          "72:  int rgb = color_table[color];",
          "",
          "[Removed Lines]",
          "53: static int approximate_rgb (int r, int g, int b) {",
          "55:  const double k = (256.0 / 6.0);",
          "57:   return 232 + (double)r / (255 / 24.1);",
          "59:  r = R_DIM (r / k, 0, 5);",
          "60:  g = R_DIM (g / k, 0, 5);",
          "61:  b = R_DIM (b / k, 0, 5);",
          "67:  if (c == -1) return approximate_rgb (r, g, b);",
          "68:  else return c;",
          "",
          "[Added Lines]",
          "56: static ut32 approximate_rgb (int r, int g, int b) {",
          "59:   return 232 + (int)((double)r / (255 / 24.1));",
          "61: #if 0",
          "62:  const double M = 16;",
          "63:  double R = r;",
          "64:  double G = g;",
          "65:  double B = b;",
          "66:  R = R /256 * 216;",
          "67:  R /= 256 * 216;",
          "68:  R /= 256 * 216;",
          "69:  r = R = R_DIM (R / 16, 0, 16);",
          "70:  g = G = R_DIM (G / 16, 0, 16);",
          "71:  b = B = R_DIM (B / 16, 0, 16);",
          "72:  r &= 0xff;",
          "73:  g &= 0xff;",
          "74:  b &= 0xff;",
          "75:  return (ut32)((G * M * M)  + (g * M) + b) + 16;",
          "76: #else",
          "77:  const int k = (256.0 / 6);",
          "78:  r = R_DIM (r / k, 0, 6);",
          "79:  g = R_DIM (g / k, 0, 6);",
          "80:  b = R_DIM (b / k, 0, 6);",
          "82: #endif",
          "87:  if (c == -1) {",
          "88:   return approximate_rgb (r, g, b);",
          "89:  }",
          "90:  return c;",
          "94:  if (color < 0 || color > 256) {",
          "96:   return;",
          "97:  }",
          "",
          "---------------"
        ],
        "libr/core/cmd_api.c||libr/core/cmd_api.c": [
          "File: libr/core/cmd_api.c -> libr/core/cmd_api.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:  RListIter *iter;",
          "205:  RCorePlugin *cp;",
          "206:  if (!cmd || !input) {",
          "208:  }",
          "209:  if (!input || !*input) {",
          "210:   if (cmd->nullcallback) {",
          "",
          "[Removed Lines]",
          "207:   return NULL;",
          "",
          "[Added Lines]",
          "207:   return -1;",
          "",
          "---------------"
        ],
        "libr/core/cmd_print.c||libr/core/cmd_print.c": [
          "File: libr/core/cmd_print.c -> libr/core/cmd_print.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3540:   break;",
          "3541:  case '-': // \"p-\"",
          "3542:   mode = input[1];",
          "3544:   if (mode == 'j') {",
          "3545:    r_cons_strcat (\"{\");",
          "3546:   }",
          "",
          "[Removed Lines]",
          "3543:   w = core->print->cols * 2.7;",
          "",
          "[Added Lines]",
          "3543:   w = (int)(core->print->cols * 2.7);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4044:    free (old_arch);",
          "4045:    free (new_arch);",
          "4046:    goto beach;",
          "4048:    bw_disassemble = true;",
          "4049:    l = use_blocksize; // negative",
          "4050:    use_blocksize = -use_blocksize;",
          "",
          "[Removed Lines]",
          "4047:   } else if (core->blocksize_max < use_blocksize && (int) use_blocksize > -core->blocksize_max) {",
          "",
          "[Added Lines]",
          "4047:   } else if (core->blocksize_max < use_blocksize && (int) use_blocksize > -(int)core->blocksize_max) {",
          "",
          "---------------"
        ],
        "libr/core/cmd_search.c||libr/core/cmd_search.c": [
          "File: libr/core/cmd_search.c -> libr/core/cmd_search.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2278: static void search_similar_pattern_in(RCore *core, int count, ut64 from, ut64 to) {",
          "2279:  ut64 addr = from;",
          "2280:  ut8 *block = calloc (core->blocksize, 1);",
          "2281:  while (addr < to) {",
          "2282:   (void) r_io_read_at (core->io, addr, block, core->blocksize);",
          "2283:   if (r_cons_is_breaked ()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2281:  if (!block) {",
          "2282:   return;",
          "2283:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2289:    int pc = (equal * 100) / core->blocksize;",
          "2290:    r_cons_printf (\"0x%08\"PFMT64x \" %4d/%d %3d%%  \", addr, equal, core->blocksize, pc);",
          "2291:    ut8 ptr[2] = {",
          "2293:    };",
          "2294:    r_print_fill (core->print, ptr, 1, UT64_MAX, core->blocksize);",
          "2295:   }",
          "",
          "[Removed Lines]",
          "2292:     pc * 2.5, 0",
          "",
          "[Added Lines]",
          "2295:     (ut8)(pc * 2.5), 0",
          "",
          "---------------"
        ],
        "libr/core/cmd_seek.c||libr/core/cmd_seek.c": [
          "File: libr/core/cmd_seek.c -> libr/core/cmd_seek.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "244:   const char *u_num = inputnum? inputnum + 1: input + 1;",
          "245:   off = r_num_math (core->num, u_num);",
          "246:   if (*u_num == '-') {",
          "248:   }",
          "249:  }",
          "250:  int sign = 1;",
          "",
          "[Removed Lines]",
          "247:    off = -off;",
          "",
          "[Added Lines]",
          "247:    off = -(st64)off;",
          "",
          "---------------"
        ],
        "libr/core/disasm.c||libr/core/disasm.c": [
          "File: libr/core/disasm.c -> libr/core/disasm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3225:       ds_comment (ds, true, \"; var %s\", v->name);",
          "3226:       r_anal_var_free (v);",
          "3227:      } else {",
          "3229:      }",
          "3230:     } else {",
          "3231:      if (r_core_anal_address (core, refaddr) & R_ANAL_ADDR_TYPE_ASCII) {",
          "",
          "[Removed Lines]",
          "3228:       ds_comment (ds, true, \"; var %d\", (int)-refaddr);",
          "",
          "[Added Lines]",
          "3228:       ds_comment (ds, true, \"; var %d\", -(int)refaddr);",
          "",
          "---------------"
        ],
        "libr/core/rtr.c||libr/core/rtr.c": [
          "File: libr/core/rtr.c -> libr/core/rtr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1627:  while (!r_cons_is_breaked ()) {",
          "1628:   if (rtr_host[rtr_n].fd) {",
          "1629:    snprintf (prompt, sizeof (prompt),",
          "1631:   }",
          "1632:   free (r_line_singleton ()->prompt);",
          "1633:   r_line_singleton ()->prompt = strdup (prompt);",
          "",
          "[Removed Lines]",
          "1630:     \"fd:%d> \", rtr_host[rtr_n].fd->fd);",
          "",
          "[Added Lines]",
          "1630:     \"fd:%d> \", (int)(size_t)rtr_host[rtr_n].fd->fd);",
          "",
          "---------------"
        ],
        "libr/core/visual.c||libr/core/visual.c": [
          "File: libr/core/visual.c -> libr/core/visual.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2575:  if (autoblocksize) {",
          "2576:   switch (core->printidx) {",
          "2577:   case R_CORE_VISUAL_MODE_PRC: // prc",
          "2579:    break;",
          "2580:   case R_CORE_VISUAL_MODE_PX: // x",
          "2581:   case R_CORE_VISUAL_MODE_PXa: // pxa",
          "2583:    break;",
          "2584:   case R_CORE_VISUAL_MODE_PW: // XXX pw",
          "2586:    break;",
          "2587:   case R_CORE_VISUAL_MODE_PC: // XXX pc",
          "2589:    break;",
          "2590:   case R_CORE_VISUAL_MODE_PD: // pd",
          "2591:   case R_CORE_VISUAL_MODE_PDDBG: // pd+dbg",
          "",
          "[Removed Lines]",
          "2578:    r_core_block_size (core, core->cons->rows * hexcols * 3.5);",
          "2582:    r_core_block_size (core, core->cons->rows * hexcols * 3.5);",
          "2585:    r_core_block_size (core, core->cons->rows * hexcols);",
          "2588:    r_core_block_size (core, core->cons->rows * hexcols * 4);",
          "",
          "[Added Lines]",
          "2578:    r_core_block_size (core, (int)(core->cons->rows * hexcols * 3.5));",
          "2582:    r_core_block_size (core, (int)(core->cons->rows * hexcols * 3.5));",
          "2585:    r_core_block_size (core, (int)(core->cons->rows * hexcols));",
          "2588:    r_core_block_size (core, (int)(core->cons->rows * hexcols * 4));",
          "",
          "---------------"
        ],
        "libr/fs/fs.c||libr/fs/fs.c": [
          "File: libr/fs/fs.c -> libr/fs/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "900:  RListIter *iter;",
          "901:  char* path = strdup (p);",
          "902:  if (!path) {",
          "904:  }",
          "905:  r_str_chop_path (path);",
          "906:  r_list_foreach (fs->roots, iter, root) {",
          "",
          "[Removed Lines]",
          "903:   return NULL;",
          "",
          "[Added Lines]",
          "903:   return false;",
          "",
          "---------------"
        ],
        "libr/io/map.c||libr/io/map.c": [
          "File: libr/io/map.c -> libr/io/map.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:  map->delta = delta;",
          "157:  if ((UT64_MAX - size + 1) < addr) {",
          "158:   r_io_map_new (io, fd, flags, delta - addr, 0LL, size + addr, do_skyline);",
          "160:  }",
          "162:  map->itv.size = size;",
          "",
          "[Removed Lines]",
          "159:   size = -addr;",
          "",
          "[Added Lines]",
          "159:   size = -(st64)addr;",
          "",
          "---------------"
        ],
        "libr/socket/run.c||libr/socket/run.c": [
          "File: libr/socket/run.c -> libr/socket/run.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:   eprintf (\"Invalid hexpair string\\n\");",
          "205:   free (ret);",
          "206:   return NULL;",
          "207:  case '%':",
          "208:   return (char *) strtoul (src + 1, NULL, 0);",
          "209:  }",
          "210:  r_str_unescape ((ret = strdup (src)));",
          "211:  return ret;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207: #if 0",
          "211: #endif",
          "",
          "---------------"
        ],
        "libr/socket/socket.c||libr/socket/socket.c": [
          "File: libr/socket/socket.c -> libr/socket/socket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "662: R_API char *r_socket_to_string(RSocket *s) {",
          "663: #if __WINDOWS__ && !defined(__CYGWIN__) //&& !defined(__MINGW64__)",
          "667: #elif __UNIX__ || defined(__CYGWIN__)",
          "668:  char *str = NULL;",
          "669:  struct sockaddr sa;",
          "",
          "[Removed Lines]",
          "664:  char *str = malloc (32);",
          "665:  snprintf (str, 31, \"fd%d\", s->fd);",
          "666:  return str;",
          "",
          "[Added Lines]",
          "664:  return r_str_newf (\"fd%d\", (int)(size_t)s->fd);",
          "",
          "---------------"
        ],
        "libr/util/r_json.c||libr/util/r_json.c": [
          "File: libr/util/r_json.c -> libr/util/r_json.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:  object->object.l = len;",
          "148:  free (object->object.a);",
          "149:  object->object.a = v;",
          "151:  object->object.n = (const char**) c;",
          "152:  return true;",
          "153: }",
          "",
          "[Removed Lines]",
          "150:  free (object->object.n);",
          "",
          "[Added Lines]",
          "150:  free ((void *)object->object.n);",
          "",
          "---------------"
        ],
        "libr/util/unum.c||libr/util/unum.c": [
          "File: libr/util/unum.c -> libr/util/unum.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:  if (num>=GB) { unit = 'G'; fnum = fnum/GB; } else",
          "73:  if (num>=MB) { unit = 'M'; fnum = fnum/MB; } else",
          "74:  if (num>=KB) { unit = 'K'; fnum = fnum/KB; } else",
          "76:  tnum = (int)((double)(fnum - (int)fnum)*10);",
          "77:  if (tnum) {",
          "78:   snprintf (buf, 31, \"%.1f%c\", fnum, unit);",
          "",
          "[Removed Lines]",
          "75:   { unit = 0; fnum = num; }",
          "",
          "[Added Lines]",
          "75:   { unit = 0; fnum = (double)num; }",
          "",
          "---------------"
        ],
        "shlr/javclass.c||shlr/java/class.c": [
          "File: shlr/javclass.c -> shlr/java/class.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8716:  float *foo = (float*) bytes;",
          "8717:  val = *foo; //(float)R_BIN_JAVA_UINT (bytes, 0);",
          "",
          "---------------"
        ],
        "shlr/sdb/src/num.c||shlr/sdsrc/num.c": [
          "File: shlr/sdb/src/num.c -> shlr/sdsrc/num.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: SDB_API ut64 sdb_num_inc(Sdb *s, const char *key, ut64 n2, ut32 cas) {",
          "32:  ut32 c;",
          "33:  ut64 n = sdb_num_get (s, key, &c);",
          "35:   return 0LL;",
          "36:  }",
          "40: }",
          "42: SDB_API ut64 sdb_num_dec(Sdb *s, const char *key, ut64 n2, ut32 cas) {",
          "",
          "[Removed Lines]",
          "34:  if ((cas && c != cas) || (-n2 < n)) {",
          "37:  n += n2;",
          "38:  sdb_num_set (s, key, n, cas);",
          "39:  return n;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "shlr/sdb/src/sdb.c||shlr/sdsrc/sdb.c": [
          "File: shlr/sdb/src/sdb.c -> shlr/sdsrc/sdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1123:  if (lcd->array) {",
          "1124:   int idx = lcd->array_index;",
          "1125:   int newsize = lcd->array_size + sizeof (char*) * 2;",
          "1127:   if (!newarray) {",
          "1128:    return 0;",
          "1129:   }",
          "",
          "[Removed Lines]",
          "1126:   const char **newarray = realloc (lcd->array, newsize);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1163:  lcd.array_index = 0;",
          "1164:  sdb_foreach (s, like_cb, &lcd);",
          "1165:  if (lcd.array_index == 0) {",
          "1167:   return NULL;",
          "1168:  }",
          "1169:  return (char**)lcd.array;",
          "",
          "[Removed Lines]",
          "1166:   free (lcd.array);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}