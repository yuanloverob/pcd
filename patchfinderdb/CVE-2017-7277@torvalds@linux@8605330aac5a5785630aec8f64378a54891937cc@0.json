{
  "cve_id": "CVE-2017-7277",
  "cve_desc": "The TCP stack in the Linux kernel through 4.10.6 mishandles the SCM_TIMESTAMPING_OPT_STATS feature, which allows local users to obtain sensitive information from the kernel's internal socket data structures or cause a denial of service (out-of-bounds read) via crafted system calls, related to net/core/skbuff.c and net/socket.c.",
  "repo": "torvalds/linux",
  "patch_hash": "8605330aac5a5785630aec8f64378a54891937cc",
  "patch_info": {
    "commit_hash": "8605330aac5a5785630aec8f64378a54891937cc",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/8605330aac5a5785630aec8f64378a54891937cc",
    "files": [
      "net/core/skbuff.c",
      "net/socket.c"
    ],
    "message": "tcp: fix SCM_TIMESTAMPING_OPT_STATS for normal skbs\n\n__sock_recv_timestamp can be called for both normal skbs (for\nreceive timestamps) and for skbs on the error queue (for transmit\ntimestamps).\n\nCommit 1c885808e456\n(tcp: SOF_TIMESTAMPING_OPT_STATS option for SO_TIMESTAMPING)\nassumes any skb passed to __sock_recv_timestamp are from\nthe error queue, containing OPT_STATS in the content of the skb.\nThis results in accessing invalid memory or generating junk\ndata.\n\nTo fix this, set skb->pkt_type to PACKET_OUTGOING for packets\non the error queue. This is safe because on the receive path\non local sockets skb->pkt_type is never set to PACKET_OUTGOING.\nWith that, copy OPT_STATS from a packet, only if its pkt_type\nis PACKET_OUTGOING.\n\nFixes: 1c885808e456 (\"tcp: SOF_TIMESTAMPING_OPT_STATS option for SO_TIMESTAMPING\")\nReported-by: JongHwan Kim <zzoru007@gmail.com>\nSigned-off-by: Soheil Hassas Yeganeh <soheil@google.com>\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nSigned-off-by: Willem de Bruijn <willemb@google.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "net/core/skbuff.c||net/core/skbuff.c",
      "net/socket.c||net/socket.c"
    ]
  },
  "patch_diff": {
    "net/core/skbuff.c||net/core/skbuff.c": [
      "File: net/core/skbuff.c -> net/core/skbuff.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3694:  atomic_sub(skb->truesize, &sk->sk_rmem_alloc);",
      "3695: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3697: static void skb_set_err_queue(struct sk_buff *skb)",
      "3698: {",
      "3702:  skb->pkt_type = PACKET_OUTGOING;",
      "3703:  BUILD_BUG_ON(PACKET_OUTGOING == 0);",
      "3704: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3707:  skb->sk = sk;",
      "3708:  skb->destructor = sock_rmem_free;",
      "3709:  atomic_add(skb->truesize, &sk->sk_rmem_alloc);",
      "3712:  skb_dst_force(skb);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3719:  skb_set_err_queue(skb);",
      "",
      "---------------"
    ],
    "net/socket.c||net/socket.c": [
      "File: net/socket.c -> net/socket.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "652: }",
      "653: EXPORT_SYMBOL(kernel_sendmsg);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "655: static bool skb_is_err_queue(const struct sk_buff *skb)",
      "656: {",
      "662:  return skb->pkt_type == PACKET_OUTGOING;",
      "663: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "695:   put_cmsg(msg, SOL_SOCKET,",
      "696:     SCM_TIMESTAMPING, sizeof(tss), &tss);",
      "699:    put_cmsg(msg, SOL_SOCKET, SCM_TIMESTAMPING_OPT_STATS,",
      "700:      skb->len, skb->data);",
      "701:  }",
      "",
      "[Removed Lines]",
      "698:   if (skb->len && (sk->sk_tsflags & SOF_TIMESTAMPING_OPT_STATS))",
      "",
      "[Added Lines]",
      "708:   if (skb_is_err_queue(skb) && skb->len &&",
      "709:       (sk->sk_tsflags & SOF_TIMESTAMPING_OPT_STATS))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4ef1b2869447411ad3ef91ad7d4891a83c1a509a",
      "candidate_info": {
        "commit_hash": "4ef1b2869447411ad3ef91ad7d4891a83c1a509a",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/4ef1b2869447411ad3ef91ad7d4891a83c1a509a",
        "files": [
          "include/linux/errqueue.h",
          "net/core/skbuff.c",
          "net/socket.c"
        ],
        "message": "tcp: mark skbs with SCM_TIMESTAMPING_OPT_STATS\n\nSOF_TIMESTAMPING_OPT_STATS can be enabled and disabled\nwhile packets are collected on the error queue.\nSo, checking SOF_TIMESTAMPING_OPT_STATS in sk->sk_tsflags\nis not enough to safely assume that the skb contains\nOPT_STATS data.\n\nAdd a bit in sock_exterr_skb to indicate whether the\nskb contains opt_stats data.\n\nFixes: 1c885808e456 (\"tcp: SOF_TIMESTAMPING_OPT_STATS option for SO_TIMESTAMPING\")\nReported-by: JongHwan Kim <zzoru007@gmail.com>\nSigned-off-by: Soheil Hassas Yeganeh <soheil@google.com>\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nSigned-off-by: Willem de Bruijn <willemb@google.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "include/linux/errqueue.h||include/linux/errqueue.h",
          "net/core/skbuff.c||net/core/skbuff.c",
          "net/socket.c||net/socket.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/core/skbuff.c||net/core/skbuff.c",
            "net/socket.c||net/socket.c"
          ],
          "candidate": [
            "net/core/skbuff.c||net/core/skbuff.c",
            "net/socket.c||net/socket.c"
          ]
        }
      },
      "candidate_diff": {
        "include/linux/errqueue.h||include/linux/errqueue.h": [
          "File: include/linux/errqueue.h -> include/linux/errqueue.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:  struct sock_extended_err ee;",
          "21:  u16    addr_offset;",
          "22:  __be16    port;",
          "23: };",
          "25: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23:  u8    opt_stats:1,",
          "24:      unused:7;",
          "",
          "---------------"
        ],
        "net/core/skbuff.c||net/core/skbuff.c": [
          "File: net/core/skbuff.c -> net/core/skbuff.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3794: static void __skb_complete_tx_timestamp(struct sk_buff *skb,",
          "3795:      struct sock *sk,",
          "3797: {",
          "3798:  struct sock_exterr_skb *serr;",
          "3799:  int err;",
          "3801:  serr = SKB_EXT_ERR(skb);",
          "3802:  memset(serr, 0, sizeof(*serr));",
          "3803:  serr->ee.ee_errno = ENOMSG;",
          "3804:  serr->ee.ee_origin = SO_EE_ORIGIN_TIMESTAMPING;",
          "3805:  serr->ee.ee_info = tstype;",
          "3806:  if (sk->sk_tsflags & SOF_TIMESTAMPING_OPT_ID) {",
          "3807:   serr->ee.ee_data = skb_shinfo(skb)->tskey;",
          "3808:   if (sk->sk_protocol == IPPROTO_TCP &&",
          "",
          "[Removed Lines]",
          "3796:      int tstype)",
          "",
          "[Added Lines]",
          "3796:      int tstype,",
          "3797:      bool opt_stats)",
          "3802:  BUILD_BUG_ON(sizeof(struct sock_exterr_skb) > sizeof(skb->cb));",
          "3809:  serr->opt_stats = opt_stats;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3844:  if (likely(atomic_inc_not_zero(&sk->sk_refcnt))) {",
          "3847:   sock_put(sk);",
          "3848:  }",
          "3849: }",
          "",
          "[Removed Lines]",
          "3846:   __skb_complete_tx_timestamp(skb, sk, SCM_TSTAMP_SND);",
          "",
          "[Added Lines]",
          "3850:   __skb_complete_tx_timestamp(skb, sk, SCM_TSTAMP_SND, false);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3854:        struct sock *sk, int tstype)",
          "3855: {",
          "3856:  struct sk_buff *skb;",
          "3859:  if (!sk)",
          "3860:   return;",
          "",
          "[Removed Lines]",
          "3857:  bool tsonly;",
          "",
          "[Added Lines]",
          "3861:  bool tsonly, opt_stats = false;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3867: #ifdef CONFIG_INET",
          "3868:   if ((sk->sk_tsflags & SOF_TIMESTAMPING_OPT_STATS) &&",
          "3869:       sk->sk_protocol == IPPROTO_TCP &&",
          "3871:    skb = tcp_get_timestamping_opt_stats(sk);",
          "3873: #endif",
          "3874:    skb = alloc_skb(0, GFP_ATOMIC);",
          "3875:  } else {",
          "",
          "[Removed Lines]",
          "3870:       sk->sk_type == SOCK_STREAM)",
          "3872:   else",
          "",
          "[Added Lines]",
          "3874:       sk->sk_type == SOCK_STREAM) {",
          "3876:    opt_stats = true;",
          "3877:   } else",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3888:  else",
          "3889:   skb->tstamp = ktime_get_real();",
          "3892: }",
          "3893: EXPORT_SYMBOL_GPL(__skb_tstamp_tx);",
          "",
          "[Removed Lines]",
          "3891:  __skb_complete_tx_timestamp(skb, sk, tstype);",
          "",
          "[Added Lines]",
          "3896:  __skb_complete_tx_timestamp(skb, sk, tstype, opt_stats);",
          "",
          "---------------"
        ],
        "net/socket.c||net/socket.c": [
          "File: net/socket.c -> net/socket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "706:     SCM_TIMESTAMPING, sizeof(tss), &tss);",
          "708:   if (skb_is_err_queue(skb) && skb->len &&",
          "710:    put_cmsg(msg, SOL_SOCKET, SCM_TIMESTAMPING_OPT_STATS,",
          "711:      skb->len, skb->data);",
          "712:  }",
          "",
          "[Removed Lines]",
          "709:       (sk->sk_tsflags & SOF_TIMESTAMPING_OPT_STATS))",
          "",
          "[Added Lines]",
          "709:       SKB_EXT_ERR(skb)->opt_stats)",
          "",
          "---------------"
        ]
      }
    }
  ]
}