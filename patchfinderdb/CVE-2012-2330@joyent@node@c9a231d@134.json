{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d2fba2bf35e3d55c55590116e7b7fd6951bb1fdb",
      "candidate_info": {
        "commit_hash": "d2fba2bf35e3d55c55590116e7b7fd6951bb1fdb",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/d2fba2bf35e3d55c55590116e7b7fd6951bb1fdb",
        "files": [
          "test/addons/hello-world/test.js"
        ],
        "message": "test: Fix path to require hello-world module",
        "before_after_code_files": [
          "test/addons/hello-world/test.js||test/addons/hello-world/test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/addons/hello-world/test.js||test/addons/hello-world/test.js": [
          "File: test/addons/hello-world/test.js -> test/addons/hello-world/test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: var assert = require('assert');",
          "3: assert.equal('world', binding.hello());",
          "4: console.log('binding.hello() =', binding.hello());",
          "",
          "[Removed Lines]",
          "2: var binding = require('./out/Release/binding');",
          "",
          "[Added Lines]",
          "2: var binding = require('./build/Release/binding');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5b5362aa8d80d0822f37e2448d024452dd3c0a98",
      "candidate_info": {
        "commit_hash": "5b5362aa8d80d0822f37e2448d024452dd3c0a98",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/5b5362aa8d80d0822f37e2448d024452dd3c0a98",
        "files": [
          "doc/api/fs.markdown",
          "lib/fs.js",
          "test/pummel/test-fs-watch-file.js"
        ],
        "message": "fs: make unwatchFile() remove a specific listener\n\nBefore this commit, `fs.unwatchFile(path)` removed *all* listeners for `path`.\n\nThe function is overloaded now: `fs.unwatchFile(path)` still removes all\nlisteners, but `fs.unwatchFile(path, cb)` lets you remove a specific listener.\n\nFixes #3660.",
        "before_after_code_files": [
          "lib/fs.js||lifs.js",
          "test/pummel/test-fs-watch-file.js||test/pummel/test-fs-watch-file.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/fs.js||lifs.js": [
          "File: lib/fs.js -> lifs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "943:   return stat;",
          "944: };",
          "950:     stat.stop();",
          "951:     statWatchers[filename] = undefined;",
          "952:   }",
          "",
          "[Removed Lines]",
          "946: fs.unwatchFile = function(filename) {",
          "947:   var stat;",
          "948:   if (inStatWatchers(filename)) {",
          "949:     stat = statWatchers[filename];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/pummel/test-fs-watch-file.js||test/pummel/test-fs-watch-file.js": [
          "File: test/pummel/test-fs-watch-file.js -> test/pummel/test-fs-watch-file.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: var watchSeenOne = 0;",
          "28: var watchSeenTwo = 0;",
          "30: var startDir = process.cwd();",
          "31: var testDir = common.fixturesDir;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: var watchSeenThree = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37: var filepathTwo = filenameTwo;",
          "38: var filepathTwoAbs = path.join(testDir, filenameTwo);",
          "41: process.on('exit', function() {",
          "42:   fs.unlinkSync(filepathOne);",
          "43:   fs.unlinkSync(filepathTwoAbs);",
          "44:   assert.equal(1, watchSeenOne);",
          "46: });",
          "",
          "[Removed Lines]",
          "45:   assert.equal(1, watchSeenTwo);",
          "",
          "[Added Lines]",
          "41: var filenameThree = 'charm'; // because the third time is",
          "47:   fs.unlinkSync(filenameThree);",
          "49:   assert.equal(2, watchSeenTwo);",
          "50:   assert.equal(1, watchSeenThree);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87: assert.doesNotThrow(",
          "88:     function() {",
          "91:         ++watchSeenTwo;",
          "93:     }",
          "94: );",
          "96: setTimeout(function() {",
          "97:   fs.writeFileSync(filepathTwoAbs, 'pardner');",
          "98: }, 1000);",
          "",
          "[Removed Lines]",
          "89:       fs.watchFile(filepathTwo, function(curr, prev) {",
          "90:         fs.unwatchFile(filepathTwo);",
          "92:       });",
          "",
          "[Added Lines]",
          "94:       function a(curr, prev) {",
          "95:         fs.unwatchFile(filepathTwo, a);",
          "97:       }",
          "98:       function b(curr, prev) {",
          "99:         fs.unwatchFile(filepathTwo, b);",
          "100:         ++watchSeenTwo;",
          "101:       }",
          "102:       fs.watchFile(filepathTwo, a);",
          "103:       fs.watchFile(filepathTwo, b);",
          "111: assert.doesNotThrow(",
          "112:     function() {",
          "113:       function a(curr, prev) {",
          "114:         assert.ok(0); // should not run",
          "115:       }",
          "116:       function b(curr, prev) {",
          "117:         fs.unwatchFile(filenameThree, b);",
          "118:         ++watchSeenThree;",
          "119:       }",
          "120:       fs.watchFile(filenameThree, a);",
          "121:       fs.watchFile(filenameThree, b);",
          "122:       fs.unwatchFile(filenameThree, a);",
          "123:     }",
          "124: );",
          "126: setTimeout(function() {",
          "127:   fs.writeFileSync(filenameThree, 'pardner');",
          "128: }, 1000);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a62dd44b20196d38d5c60840ef823615941a6f13",
      "candidate_info": {
        "commit_hash": "a62dd44b20196d38d5c60840ef823615941a6f13",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/a62dd44b20196d38d5c60840ef823615941a6f13",
        "files": [
          "doc/api/cluster.markdown",
          "lib/cluster.js",
          "test/simple/test-cluster-basic.js",
          "test/simple/test-cluster-worker-death.js",
          "test/simple/test-cluster-worker-exit.js",
          "test/simple/test-cluster-worker-kill.js"
        ],
        "message": "cluster: worker exit event to match child_process\n\ntest: fixes due to new cluster api.\n\n- changed worker `death` to `exit`.\n- corrected argument type expected by worker `exit` handler.\n\ntest: more tests of cluster.worker death\n\ncluster: fixed arguments on worker 'exit' event\n\nworker 'exit' event now emits arguments consistent with the\ncorresponding event in child_process module.",
        "before_after_code_files": [
          "lib/cluster.js||licluster.js",
          "test/simple/test-cluster-basic.js||test/simple/test-cluster-basic.js",
          "test/simple/test-cluster-worker-death.js||test/simple/test-cluster-worker-death.js",
          "test/simple/test-cluster-worker-exit.js||test/simple/test-cluster-worker-exit.js",
          "test/simple/test-cluster-worker-kill.js||test/simple/test-cluster-worker-kill.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/cluster.js||licluster.js": [
          "File: lib/cluster.js -> licluster.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "296:   this.process.on('internalMessage', handleMessage.bind(null, this));",
          "302:   this.process.on('message', this.emit.bind(this, 'message'));",
          "",
          "[Removed Lines]",
          "297:   this.process.on('exit', prepareExit.bind(null, this, 'dead', 'exit'));",
          "298:   this.process.on('disconnect',",
          "299:                   prepareExit.bind(null, this, 'disconnected', 'disconnect'));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "306: util.inherits(Worker, EventEmitter);",
          "307: cluster.Worker = Worker;",
          "312:   worker.state = state;",
          "",
          "[Removed Lines]",
          "309: function prepareExit(worker, state, eventName) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "318:   if (cluster.isMaster) {",
          "319:     delete cluster.workers[worker.uniqueID];",
          "320:   }",
          "325: }",
          "",
          "[Removed Lines]",
          "323:   worker.emit(eventName, worker);",
          "324:   cluster.emit(eventName, worker);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-cluster-basic.js||test/simple/test-cluster-basic.js": [
          "File: test/simple/test-cluster-basic.js -> test/simple/test-cluster-basic.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:       checks.worker.events[name] = true;",
          "126:     });",
          "127:   });",
          "",
          "[Removed Lines]",
          "125:       checks.worker.equal[name] = worker === arguments[0];",
          "",
          "[Added Lines]",
          "125:       if (name == 'exit') {",
          "126:         checks.worker.equal[name] = (",
          "127:           worker.process.exitCode === arguments[0] &&",
          "128:           worker.process.signalCode === arguments[1] &&",
          "129:           worker === this",
          "130:         );",
          "131:       } else {",
          "132:         checks.worker.equal[name] = worker === arguments[0];",
          "133:       }",
          "",
          "---------------"
        ],
        "test/simple/test-cluster-worker-death.js||test/simple/test-cluster-worker-death.js": [
          "File: test/simple/test-cluster-worker-death.js -> test/simple/test-cluster-worker-death.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:   var seenExit = 0;",
          "31:   var seenDeath = 0;",
          "32:   var worker = cluster.fork();",
          "35:     seenExit++;",
          "36:   });",
          "38:     assert.equal(worker_, worker);",
          "39:     seenDeath++;",
          "40:   });",
          "",
          "[Removed Lines]",
          "33:   worker.on('exit', function(statusCode) {",
          "34:     assert.equal(statusCode, 42);",
          "37:   cluster.on('death', function(worker_) {",
          "",
          "[Added Lines]",
          "33:   worker.on('exit', function(exitCode, signalCode) {",
          "34:     assert.equal(exitCode, 42);",
          "35:     assert.equal(signalCode, null);",
          "38:   cluster.on('exit', function(worker_) {",
          "",
          "---------------"
        ],
        "test/simple/test-cluster-worker-exit.js||test/simple/test-cluster-worker-exit.js": [
          "File: test/simple/test-cluster-worker-exit.js -> test/simple/test-cluster-worker-exit.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: var common = require('../common');",
          "31: var assert = require('assert');",
          "32: var cluster = require('cluster');",
          "34: var EXIT_CODE = 42;",
          "36: if (cluster.isWorker) {",
          "37:   var http = require('http');",
          "38:   var server = http.Server(function() { });",
          "40:   server.once('listening', function() {",
          "41:     process.exit(EXIT_CODE);",
          "42:   });",
          "43:   server.listen(common.PORT, '127.0.0.1');",
          "45: } else if (cluster.isMaster) {",
          "47:   var expected_results = {",
          "48:       cluster_emitDisconnect: [1, \"the cluster did not emit 'disconnect'\"],",
          "49:       cluster_emitExit: [1, \"the cluster did not emit 'exit'\"],",
          "50:       cluster_exitCode: [EXIT_CODE, 'the cluster exited w/ incorrect exitCode'],",
          "51:       cluster_signalCode: [null, 'the cluster exited w/ incorrect signalCode'],",
          "52:       worker_emitDisconnect: [1, \"the worker did not emit 'disconnect'\"],",
          "53:       worker_emitExit: [1, \"the worker did not emit 'exit'\"],",
          "54:       worker_state: ['disconnected', 'the worker state is incorrect'],",
          "55:       worker_suicideMode: [false, 'the worker.suicide flag is incorrect'],",
          "56:       worker_died: [true, 'the worker is still running'],",
          "57:       worker_exitCode: [EXIT_CODE, 'the worker exited w/ incorrect exitCode'],",
          "58:       worker_signalCode: [null, 'the worker exited w/ incorrect signalCode']",
          "59:   };",
          "60:   var results = {",
          "61:       cluster_emitDisconnect: 0,",
          "62:       cluster_emitExit: 0,",
          "63:       worker_emitDisconnect: 0,",
          "64:       worker_emitExit: 0",
          "65:   };",
          "69:   var worker = cluster.fork();",
          "71:   worker.once('listening', function() {",
          "73:   });",
          "77:   cluster.on('disconnect', function() {",
          "78:     results.cluster_emitDisconnect += 1;",
          "79:   });",
          "80:   cluster.on('exit', function(worker) {",
          "81:     results.cluster_exitCode = worker.process.exitCode;",
          "82:     results.cluster_signalCode = worker.process.signalCode;",
          "83:     results.cluster_emitExit += 1;",
          "84:     assert.ok(results.cluster_emitDisconnect,",
          "85:         \"cluster: 'exit' event before 'disconnect' event\");",
          "86:   });",
          "89:   worker.on('disconnect', function() {",
          "90:     results.worker_emitDisconnect += 1;",
          "91:     results.worker_suicideMode = worker.suicide;",
          "92:     results.worker_state = worker.state;",
          "93:   });",
          "96:   worker.once('exit', function(exitCode, signalCode) {",
          "97:     results.worker_exitCode = exitCode;",
          "98:     results.worker_signalCode = signalCode;",
          "99:     results.worker_emitExit += 1;",
          "100:     results.worker_died = !alive(worker.process.pid);",
          "101:     assert.ok(results.worker_emitDisconnect,",
          "102:         \"worker: 'exit' event before 'disconnect' event\");",
          "104:     process.nextTick(function() { finish_test(); });",
          "105:   });",
          "107:   var finish_test = function() {",
          "108:     try {",
          "109:       checkResults(expected_results, results);",
          "110:     } catch (exc) {",
          "111:       console.error('FAIL: ' + exc.message);",
          "112:       if (exc.name != 'AssertionError') {",
          "113:         console.trace(exc);",
          "114:       }",
          "116:       process.exit(1);",
          "117:       return;",
          "118:     }",
          "119:     process.exit(0);",
          "120:   };",
          "121: }",
          "125:   function checkResults(expected_results, results) {",
          "126:     for (var k in expected_results) {",
          "127:       var actual = results[k],",
          "128:           expected = expected_results[k];",
          "130:       if (typeof expected === 'function') {",
          "131:         expected(r[k]);",
          "132:       } else {",
          "133:         var msg = (expected[1] || '') +",
          "134:             (' [expected: ' + expected[0] + ' / actual: ' + actual + ']');",
          "136:         if (expected && expected.length) {",
          "137:           assert.equal(actual, expected[0], msg);",
          "138:         } else {",
          "139:           assert.equal(actual, expected, msg);",
          "140:         }",
          "141:       }",
          "142:     }",
          "143:   }",
          "145:   function alive(pid) {",
          "146:     try {",
          "147:       process.kill(pid, 'SIGCONT');",
          "148:       return true;",
          "149:     } catch (e) {",
          "150:       return false;",
          "151:     }",
          "152:   }",
          "",
          "---------------"
        ],
        "test/simple/test-cluster-worker-kill.js||test/simple/test-cluster-worker-kill.js": [
          "File: test/simple/test-cluster-worker-kill.js -> test/simple/test-cluster-worker-kill.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: var common = require('../common');",
          "31: var assert = require('assert');",
          "32: var cluster = require('cluster');",
          "34: if (cluster.isWorker) {",
          "35:   var http = require('http');",
          "36:   var server = http.Server(function() { });",
          "38:   server.once('listening', function() { });",
          "39:   server.listen(common.PORT, '127.0.0.1');",
          "41: } else if (cluster.isMaster) {",
          "43:   var KILL_SIGNAL = 'SIGHUP',",
          "44:     expected_results = {",
          "45:       cluster_emitDisconnect: [1, \"the cluster did not emit 'disconnect'\"],",
          "46:       cluster_emitExit: [1, \"the cluster did not emit 'exit'\"],",
          "47:       cluster_exitCode: [null, 'the cluster exited w/ incorrect exitCode'],",
          "48:       cluster_signalCode: [KILL_SIGNAL, 'the cluster exited w/ incorrect signalCode'],",
          "49:       worker_emitDisconnect: [1, \"the worker did not emit 'disconnect'\"],",
          "50:       worker_emitExit: [1, \"the worker did not emit 'exit'\"],",
          "51:       worker_state: ['disconnected', 'the worker state is incorrect'],",
          "52:       worker_suicideMode: [false, 'the worker.suicide flag is incorrect'],",
          "53:       worker_died: [true, 'the worker is still running'],",
          "54:       worker_exitCode: [null, 'the worker exited w/ incorrect exitCode'],",
          "55:       worker_signalCode: [KILL_SIGNAL, 'the worker exited w/ incorrect signalCode']",
          "56:     },",
          "57:     results = {",
          "58:       cluster_emitDisconnect: 0,",
          "59:       cluster_emitExit: 0,",
          "60:       worker_emitDisconnect: 0,",
          "61:       worker_emitExit: 0",
          "62:     };",
          "66:   var worker = cluster.fork();",
          "69:   worker.once('listening', function() {",
          "70:     worker.process.kill(KILL_SIGNAL);",
          "71:   });",
          "75:   cluster.on('disconnect', function() {",
          "76:     results.cluster_emitDisconnect += 1;",
          "77:   });",
          "78:   cluster.on('exit', function(worker) {",
          "79:     results.cluster_exitCode = worker.process.exitCode;",
          "80:     results.cluster_signalCode = worker.process.signalCode;",
          "81:     results.cluster_emitExit += 1;",
          "82:     assert.ok(results.cluster_emitDisconnect,",
          "83:         \"cluster: 'exit' event before 'disconnect' event\");",
          "84:   });",
          "87:   worker.on('disconnect', function() {",
          "88:     results.worker_emitDisconnect += 1;",
          "89:     results.worker_suicideMode = worker.suicide;",
          "90:     results.worker_state = worker.state;",
          "91:   });",
          "94:   worker.once('exit', function(exitCode, signalCode) {",
          "95:     results.worker_exitCode = exitCode;",
          "96:     results.worker_signalCode = signalCode;",
          "97:     results.worker_emitExit += 1;",
          "98:     results.worker_died = !alive(worker.process.pid);",
          "99:     assert.ok(results.worker_emitDisconnect,",
          "100:         \"worker: 'exit' event before 'disconnect' event\");",
          "102:     process.nextTick(function() { finish_test(); });",
          "103:   });",
          "105:   var finish_test = function() {",
          "106:     try {",
          "107:       checkResults(expected_results, results);",
          "108:     } catch (exc) {",
          "109:       console.error('FAIL: ' + exc.message);",
          "110:       if (exc.name != 'AssertionError') {",
          "111:         console.trace(exc);",
          "112:       }",
          "114:       process.exit(1);",
          "115:       return;",
          "116:     }",
          "117:     process.exit(0);",
          "118:   };",
          "119: }",
          "123:   function checkResults(expected_results, results) {",
          "124:     for (var k in expected_results) {",
          "125:       var actual = results[k],",
          "126:           expected = expected_results[k];",
          "128:       if (typeof expected === 'function') {",
          "129:         expected(r[k]);",
          "130:       } else {",
          "131:         var msg = (expected[1] || '') +",
          "132:             (' [expected: ' + expected[0] + ' / actual: ' + actual + ']');",
          "133:         if (expected && expected.length) {",
          "134:           assert.equal(actual, expected[0], msg);",
          "135:         } else {",
          "136:           assert.equal(actual, expected, msg);",
          "137:         }",
          "138:       }",
          "139:     }",
          "140:   }",
          "142:   function alive(pid) {",
          "143:     try {",
          "144:       process.kill(pid, 'SIGCONT');",
          "145:       return true;",
          "146:     } catch (e) {",
          "147:       return false;",
          "148:     }",
          "149:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "493a6bb19a2484829f340977d751ce6588c92ebc",
      "candidate_info": {
        "commit_hash": "493a6bb19a2484829f340977d751ce6588c92ebc",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/493a6bb19a2484829f340977d751ce6588c92ebc",
        "files": [
          "lib/fs.js",
          "test/simple/test-fs-non-number-arguments-throw.js"
        ],
        "message": "[ISSUE #2554 #2567] throw if fs args for 'start' or 'end' are strings",
        "before_after_code_files": [
          "lib/fs.js||lifs.js",
          "test/simple/test-fs-non-number-arguments-throw.js||test/simple/test-fs-non-number-arguments-throw.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/fs.js||lifs.js": [
          "File: lib/fs.js -> lifs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1125:   if (this.encoding) this.setEncoding(this.encoding);",
          "1127:   if (this.start !== undefined) {",
          "1128:     if (this.end === undefined) {",
          "1129:       this.end = Infinity;",
          "1130:     }",
          "1132:     if (this.start > this.end) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1313:   }",
          "1315:   if (this.start !== undefined) {",
          "1316:     if (this.start < 0) {",
          "1317:       throw new Error('start must be >= zero');",
          "1318:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-fs-non-number-arguments-throw.js||test/simple/test-fs-non-number-arguments-throw.js": [
          "File: test/simple/test-fs-non-number-arguments-throw.js -> test/simple/test-fs-non-number-arguments-throw.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: var assert = require('assert'),",
          "2:     fs = require('fs'),",
          "3:     saneEmitter,",
          "4:     sanity = 'ire(\\'assert\\')';",
          "6: saneEmitter = fs.createReadStream(__filename, { start: 17, end: 29 });",
          "8: assert.throws(function () {",
          "9:   fs.createReadStream(__filename, { start: \"17\", end: 29 });",
          "10: }, \"start as string didn't throw an error for createReadStream\");",
          "12: assert.throws(function () {",
          "13:   fs.createReadStream(__filename, { start: 17, end: \"29\" });",
          "14: }, \"end as string didn't throw an error\");",
          "16: assert.throws(function () {",
          "17:   fs.createWriteStream(__filename, { start: \"17\" });",
          "18: }, \"start as string didn't throw an error for createWriteStream\");",
          "20: saneEmitter.on('data', function (data) {",
          "22:   assert.strictEqual(sanity, data.toString('utf8'), 'read ' +",
          "23:                      data.toString('utf8') + ' instead of ' + sanity);",
          "24: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "284816ee9ff67aaa997b803db4f1ebb207672c6d",
      "candidate_info": {
        "commit_hash": "284816ee9ff67aaa997b803db4f1ebb207672c6d",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/284816ee9ff67aaa997b803db4f1ebb207672c6d",
        "files": [
          "test/simple/test-bad-unicode.js"
        ],
        "message": "test: add test for bad unicode sequences\n\nThis was a regression in 0.7.9.",
        "before_after_code_files": [
          "test/simple/test-bad-unicode.js||test/simple/test-bad-unicode.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-bad-unicode.js||test/simple/test-bad-unicode.js": [
          "File: test/simple/test-bad-unicode.js -> test/simple/test-bad-unicode.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: var assert = require('assert');",
          "22: var bad_unicode = '\\uc/ef';",
          "24: console.log(bad_unicode);",
          "26: assert.equal(bad_unicode, \"uc/ef\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}