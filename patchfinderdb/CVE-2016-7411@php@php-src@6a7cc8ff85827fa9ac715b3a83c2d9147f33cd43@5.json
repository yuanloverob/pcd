{
  "cve_id": "CVE-2016-7411",
  "cve_desc": "ext/standard/var_unserializer.re in PHP before 5.6.26 mishandles object-deserialization failures, which allows remote attackers to cause a denial of service (memory corruption) or possibly have unspecified other impact via an unserialize call that references a partially constructed object.",
  "repo": "php/php-src",
  "patch_hash": "6a7cc8ff85827fa9ac715b3a83c2d9147f33cd43",
  "patch_info": {
    "commit_hash": "6a7cc8ff85827fa9ac715b3a83c2d9147f33cd43",
    "repo": "php/php-src",
    "commit_url": "https://github.com/php/php-src/commit/6a7cc8ff85827fa9ac715b3a83c2d9147f33cd43",
    "files": [
      "Zend/zend_objects_API.c",
      "ext/standard/tests/serialize/bug73052.phpt",
      "ext/standard/var_unserializer.c",
      "ext/standard/var_unserializer.re"
    ],
    "message": "Fix bug #73052 - Memory Corruption in During Deserialized-object Destruction",
    "before_after_code_files": [
      "Zend/zend_objects_API.c||Zend/zend_objects_API.c",
      "ext/standard/tests/serialize/bug73052.phpt||ext/standard/tests/serialize/bug73052.phpt",
      "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
      "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
    ]
  },
  "patch_diff": {
    "Zend/zend_objects_API.c||Zend/zend_objects_API.c": [
      "File: Zend/zend_objects_API.c -> Zend/zend_objects_API.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "306: {",
      "307:  zend_object_handle handle = Z_OBJ_HANDLE_P(zobject);",
      "308:  zend_object_store_bucket *obj_bucket = &EG(objects_store).object_buckets[handle];",
      "311:  obj_bucket->destructor_called = 1;",
      "312: }",
      "",
      "[Removed Lines]",
      "310:  obj_bucket->bucket.obj.handlers = Z_OBJ_HT_P(zobject);;",
      "",
      "[Added Lines]",
      "310:  obj_bucket->bucket.obj.handlers = Z_OBJ_HT_P(zobject);",
      "",
      "---------------"
    ],
    "ext/standard/tests/serialize/bug73052.phpt||ext/standard/tests/serialize/bug73052.phpt": [
      "File: ext/standard/tests/serialize/bug73052.phpt -> ext/standard/tests/serialize/bug73052.phpt",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: --TEST--",
      "2: Bug #73052: Memory Corruption in During Deserialized-object Destruction",
      "3: --FILE--",
      "4: <?php",
      "6: class obj {",
      "7:     var $ryat;",
      "8:     public function __destruct() {",
      "9:         $this->ryat = null;",
      "10:     }",
      "11: }",
      "13: $poc = 'O:3:\"obj\":1:{';",
      "14: var_dump(unserialize($poc));",
      "15: ?>",
      "16: --EXPECTF--",
      "17: Notice: unserialize(): Error at offset 13 of 13 bytes in %sbug73052.php on line %d",
      "18: bool(false)",
      "",
      "---------------"
    ],
    "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c": [
      "File: ext/standard/var_unserializer.c -> ext/standard/var_unserializer.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "438:      if(Z_TYPE_PP(rval) == IS_OBJECT) {",
      "439:         zend_hash_clean(Z_OBJPROP_PP(rval));",
      "440:      }",
      "441:      ZVAL_NULL(*rval);",
      "442:   return 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "440:         zend_object_store_ctor_failed(*rval TSRMLS_CC);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "495: {",
      "496:  YYCTYPE yych;",
      "497:  static const unsigned char yybm[] = {",
      "",
      "[Removed Lines]",
      "494: #line 495 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "495: #line 496 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "551:  yych = *(YYMARKER = ++YYCURSOR);",
      "552:  if (yych == ':') goto yy95;",
      "553: yy3:",
      "555:  { return 0; }",
      "557: yy4:",
      "558:  yych = *(YYMARKER = ++YYCURSOR);",
      "559:  if (yych == ':') goto yy89;",
      "",
      "[Removed Lines]",
      "554: #line 860 \"ext/standard/var_unserializer.re\"",
      "556: #line 557 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "555: #line 861 \"ext/standard/var_unserializer.re\"",
      "557: #line 558 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "596:  goto yy3;",
      "597: yy14:",
      "598:  ++YYCURSOR;",
      "600:  {",
      "602:  php_error_docref(NULL TSRMLS_CC, E_NOTICE, \"Unexpected end of serialized data\");",
      "604: }",
      "606: yy16:",
      "607:  yych = *++YYCURSOR;",
      "608:  goto yy3;",
      "",
      "[Removed Lines]",
      "599: #line 854 \"ext/standard/var_unserializer.re\"",
      "605: #line 606 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "600: #line 855 \"ext/standard/var_unserializer.re\"",
      "606: #line 607 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "633:  yych = *++YYCURSOR;",
      "634:  if (yych != '\"') goto yy18;",
      "635:  ++YYCURSOR;",
      "637:  {",
      "638:  size_t len, len2, len3, maxlen;",
      "639:  long elements;",
      "",
      "[Removed Lines]",
      "636: #line 707 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "637: #line 708 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "781:  return object_common2(UNSERIALIZE_PASSTHRU, elements);",
      "782: }",
      "784: yy25:",
      "785:  yych = *++YYCURSOR;",
      "786:  if (yych <= ',') {",
      "",
      "[Removed Lines]",
      "783: #line 784 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "784: #line 785 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "805:  yych = *++YYCURSOR;",
      "806:  if (yych != '\"') goto yy18;",
      "807:  ++YYCURSOR;",
      "809:  {",
      "810:     if (!var_hash) return 0;",
      "",
      "[Removed Lines]",
      "808: #line 698 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "809: #line 699 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "814:  return object_common2(UNSERIALIZE_PASSTHRU,",
      "815:    object_common1(UNSERIALIZE_PASSTHRU, ZEND_STANDARD_CLASS_DEF_PTR));",
      "816: }",
      "818: yy32:",
      "819:  yych = *++YYCURSOR;",
      "820:  if (yych == '+') goto yy33;",
      "",
      "[Removed Lines]",
      "817: #line 818 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "818: #line 819 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "835:  yych = *++YYCURSOR;",
      "836:  if (yych != '{') goto yy18;",
      "837:  ++YYCURSOR;",
      "839:  {",
      "840:  long elements = parse_iv(start + 2);",
      "",
      "[Removed Lines]",
      "838: #line 677 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "839: #line 678 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "857:  return finish_nested_data(UNSERIALIZE_PASSTHRU);",
      "858: }",
      "860: yy39:",
      "861:  yych = *++YYCURSOR;",
      "862:  if (yych == '+') goto yy40;",
      "",
      "[Removed Lines]",
      "859: #line 860 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "860: #line 861 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "877:  yych = *++YYCURSOR;",
      "878:  if (yych != '\"') goto yy18;",
      "879:  ++YYCURSOR;",
      "881:  {",
      "882:  size_t len, maxlen;",
      "883:  char *str;",
      "",
      "[Removed Lines]",
      "880: #line 642 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "881: #line 643 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "912:  ZVAL_STRINGL(*rval, str, len, 0);",
      "913:  return 1;",
      "914: }",
      "916: yy46:",
      "917:  yych = *++YYCURSOR;",
      "918:  if (yych == '+') goto yy47;",
      "",
      "[Removed Lines]",
      "915: #line 916 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "916: #line 917 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "933:  yych = *++YYCURSOR;",
      "934:  if (yych != '\"') goto yy18;",
      "935:  ++YYCURSOR;",
      "937:  {",
      "938:  size_t len, maxlen;",
      "939:  char *str;",
      "",
      "[Removed Lines]",
      "936: #line 609 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "937: #line 610 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "966:  ZVAL_STRINGL(*rval, str, len, 1);",
      "967:  return 1;",
      "968: }",
      "970: yy53:",
      "971:  yych = *++YYCURSOR;",
      "972:  if (yych <= '/') {",
      "",
      "[Removed Lines]",
      "969: #line 970 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "970: #line 971 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "1054:  }",
      "1055: yy63:",
      "1056:  ++YYCURSOR;",
      "1058:  {",
      "1059: #if SIZEOF_LONG == 4",
      "1060: use_double:",
      "",
      "[Removed Lines]",
      "1057: #line 599 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "1058: #line 600 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "1064:  ZVAL_DOUBLE(*rval, zend_strtod((const char *)start + 2, NULL));",
      "1065:  return 1;",
      "1066: }",
      "1068: yy65:",
      "1069:  yych = *++YYCURSOR;",
      "1070:  if (yych <= ',') {",
      "",
      "[Removed Lines]",
      "1067: #line 1068 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "1068: #line 1069 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "1123:  yych = *++YYCURSOR;",
      "1124:  if (yych != ';') goto yy18;",
      "1125:  ++YYCURSOR;",
      "1127:  {",
      "1129:  INIT_PZVAL(*rval);",
      "",
      "[Removed Lines]",
      "1126: #line 584 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "1127: #line 585 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "1139:  return 1;",
      "1140: }",
      "1142: yy76:",
      "1143:  yych = *++YYCURSOR;",
      "1144:  if (yych == 'N') goto yy73;",
      "",
      "[Removed Lines]",
      "1141: #line 1142 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "1142: #line 1143 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "1165:  if (yych <= '9') goto yy79;",
      "1166:  if (yych != ';') goto yy18;",
      "1167:  ++YYCURSOR;",
      "1169:  {",
      "1170: #if SIZEOF_LONG == 4",
      "1171:  int digits = YYCURSOR - start - 3;",
      "",
      "[Removed Lines]",
      "1168: #line 557 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "1169: #line 558 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "1192:  ZVAL_LONG(*rval, parse_iv(start + 2));",
      "1193:  return 1;",
      "1194: }",
      "1196: yy83:",
      "1197:  yych = *++YYCURSOR;",
      "1198:  if (yych <= '/') goto yy18;",
      "",
      "[Removed Lines]",
      "1195: #line 1196 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "1196: #line 1197 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "1200:  yych = *++YYCURSOR;",
      "1201:  if (yych != ';') goto yy18;",
      "1202:  ++YYCURSOR;",
      "1204:  {",
      "1206:  INIT_PZVAL(*rval);",
      "1207:  ZVAL_BOOL(*rval, parse_iv(start + 2));",
      "1208:  return 1;",
      "1209: }",
      "1211: yy87:",
      "1212:  ++YYCURSOR;",
      "1214:  {",
      "1216:  INIT_PZVAL(*rval);",
      "1217:  ZVAL_NULL(*rval);",
      "1218:  return 1;",
      "1219: }",
      "1221: yy89:",
      "1222:  yych = *++YYCURSOR;",
      "1223:  if (yych <= ',') {",
      "",
      "[Removed Lines]",
      "1203: #line 550 \"ext/standard/var_unserializer.re\"",
      "1210: #line 1211 \"ext/standard/var_unserializer.c\"",
      "1213: #line 543 \"ext/standard/var_unserializer.re\"",
      "1220: #line 1221 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "1204: #line 551 \"ext/standard/var_unserializer.re\"",
      "1211: #line 1212 \"ext/standard/var_unserializer.c\"",
      "1214: #line 544 \"ext/standard/var_unserializer.re\"",
      "1221: #line 1222 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "1240:  if (yych <= '9') goto yy91;",
      "1241:  if (yych != ';') goto yy18;",
      "1242:  ++YYCURSOR;",
      "1244:  {",
      "1245:  long id;",
      "",
      "[Removed Lines]",
      "1243: #line 520 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "1244: #line 521 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "1264:  return 1;",
      "1265: }",
      "1267: yy95:",
      "1268:  yych = *++YYCURSOR;",
      "1269:  if (yych <= ',') {",
      "",
      "[Removed Lines]",
      "1266: #line 1267 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "1267: #line 1268 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "1286:  if (yych <= '9') goto yy97;",
      "1287:  if (yych != ';') goto yy18;",
      "1288:  ++YYCURSOR;",
      "1290:  {",
      "1291:  long id;",
      "",
      "[Removed Lines]",
      "1289: #line 499 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "1290: #line 500 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "1308:  return 1;",
      "1309: }",
      "1311: }",
      "1315:  return 0;",
      "",
      "[Removed Lines]",
      "1310: #line 1311 \"ext/standard/var_unserializer.c\"",
      "1312: #line 862 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "1311: #line 1312 \"ext/standard/var_unserializer.c\"",
      "1313: #line 863 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------"
    ],
    "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re": [
      "File: ext/standard/var_unserializer.re -> ext/standard/var_unserializer.re",
      "--- Hunk 1 ---",
      "[Context before]",
      "442:      if(Z_TYPE_PP(rval) == IS_OBJECT) {",
      "443:         zend_hash_clean(Z_OBJPROP_PP(rval));",
      "444:      }",
      "445:      ZVAL_NULL(*rval);",
      "446:   return 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "444:         zend_object_store_ctor_failed(*rval TSRMLS_CC);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f7caa2bd8e72d51201b90158c34219d6feefb4ff",
      "candidate_info": {
        "commit_hash": "f7caa2bd8e72d51201b90158c34219d6feefb4ff",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/f7caa2bd8e72d51201b90158c34219d6feefb4ff",
        "files": [
          "ext/standard/php_var.h",
          "ext/standard/var.c",
          "ext/standard/var_unserializer.c",
          "ext/standard/var_unserializer.re"
        ],
        "message": "Hide (un)serialize data from ABI\n\nThe (UN)SERIALIZE_INIT/DESTROY macros now go through non-inlined\nfunctions, so any changes to them will apply to extensions without\nrebuilds.\n\nAdditionally, the (un)serialize_data structures are now no longer\nexported.\n\nThis means that we are allowed to change these structures in patch\nreleases without breaking the ABI.",
        "before_after_code_files": [
          "ext/standard/php_var.h||ext/standard/php_var.h",
          "ext/standard/var.c||ext/standard/var.c",
          "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
          "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
            "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
          ],
          "candidate": [
            "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
            "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
          ]
        }
      },
      "candidate_diff": {
        "ext/standard/php_var.h||ext/standard/php_var.h": [
          "File: ext/standard/php_var.h -> ext/standard/php_var.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: PHPAPI void php_debug_zval_dump(zval *struc, int level);",
          "53: typedef struct php_serialize_data *php_serialize_data_t;",
          "54: typedef struct php_unserialize_data *php_unserialize_data_t;",
          "",
          "[Removed Lines]",
          "41: struct php_serialize_data {",
          "42:  HashTable ht;",
          "43:  uint32_t n;",
          "44: };",
          "46: struct php_unserialize_data {",
          "47:  void *first;",
          "48:  void *last;",
          "49:  void *first_dtor;",
          "50:  void *last_dtor;",
          "51: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59: PHPAPI int php_var_unserialize_intern(zval *rval, const unsigned char **p, const unsigned char *max, php_unserialize_data_t *var_hash);",
          "60: PHPAPI int php_var_unserialize_ex(zval *rval, const unsigned char **p, const unsigned char *max, php_unserialize_data_t *var_hash, HashTable *classes);",
          "62: #define PHP_VAR_SERIALIZE_INIT(d) \\",
          "79: #define PHP_VAR_SERIALIZE_DESTROY(d) \\",
          "91: #define PHP_VAR_UNSERIALIZE_INIT(d) \\",
          "106: #define PHP_VAR_UNSERIALIZE_DESTROY(d) \\",
          "118: PHPAPI void var_replace(php_unserialize_data_t *var_hash, zval *ozval, zval *nzval);",
          "119: PHPAPI void var_push_dtor(php_unserialize_data_t *var_hash, zval *val);",
          "",
          "[Removed Lines]",
          "63: do  { \\",
          "65:  if (BG(serialize_lock) || !BG(serialize).level) { \\",
          "66:   (d) = (php_serialize_data_t) emalloc(sizeof(struct php_serialize_data)); \\",
          "67:   zend_hash_init(&(d)->ht, 16, NULL, ZVAL_PTR_DTOR, 0); \\",
          "68:   (d)->n = 0; \\",
          "69:   if (!BG(serialize_lock)) { \\",
          "70:    BG(serialize).data = d; \\",
          "71:    BG(serialize).level = 1; \\",
          "72:   } \\",
          "73:  } else { \\",
          "74:   (d) = BG(serialize).data; \\",
          "75:   ++BG(serialize).level; \\",
          "76:  } \\",
          "77: } while(0)",
          "80: do { \\",
          "82:  if (BG(serialize_lock) || BG(serialize).level == 1) { \\",
          "83:   zend_hash_destroy(&(d)->ht); \\",
          "84:   efree((d)); \\",
          "85:  } \\",
          "86:  if (!BG(serialize_lock) && !--BG(serialize).level) { \\",
          "87:   BG(serialize).data = NULL; \\",
          "88:  } \\",
          "89: } while (0)",
          "92: do { \\",
          "94:  if (BG(serialize_lock) || !BG(unserialize).level) { \\",
          "95:   (d) = (php_unserialize_data_t)ecalloc(1, sizeof(struct php_unserialize_data)); \\",
          "96:   if (!BG(serialize_lock)) { \\",
          "97:    BG(unserialize).data = (d); \\",
          "98:    BG(unserialize).level = 1; \\",
          "99:   } \\",
          "100:  } else { \\",
          "101:   (d) = BG(unserialize).data; \\",
          "102:   ++BG(unserialize).level; \\",
          "103:  } \\",
          "104: } while (0)",
          "107: do { \\",
          "109:  if (BG(serialize_lock) || BG(unserialize).level == 1) { \\",
          "110:   var_destroy(&(d)); \\",
          "111:   efree((d)); \\",
          "112:  } \\",
          "113:  if (!BG(serialize_lock) && !--BG(unserialize).level) { \\",
          "114:   BG(unserialize).data = NULL; \\",
          "115:  } \\",
          "116: } while (0)",
          "",
          "[Added Lines]",
          "50: PHPAPI php_serialize_data_t php_var_serialize_init(void);",
          "51: PHPAPI void php_var_serialize_destroy(php_serialize_data_t d);",
          "52: PHPAPI php_unserialize_data_t php_var_unserialize_init(void);",
          "53: PHPAPI void php_var_unserialize_destroy(php_unserialize_data_t d);",
          "56:  (d) = php_var_serialize_init()",
          "59:  php_var_serialize_destroy(d)",
          "62:  (d) = php_var_unserialize_init()",
          "65:  php_var_unserialize_destroy(d)",
          "",
          "---------------"
        ],
        "ext/standard/var.c||ext/standard/var.c": [
          "File: ext/standard/var.c -> ext/standard/var.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #include \"php_incomplete_class.h\"",
          "36: #define COMMON (is_ref ? \"&\" : \"\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: struct php_serialize_data {",
          "37:  HashTable ht;",
          "38:  uint32_t n;",
          "39: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "993: }",
          "998: PHP_FUNCTION(serialize)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1001: PHPAPI php_serialize_data_t php_var_serialize_init() {",
          "1002:  struct php_serialize_data *d;",
          "1004:  if (BG(serialize_lock) || !BG(serialize).level) {",
          "1005:   d = emalloc(sizeof(struct php_serialize_data));",
          "1006:   zend_hash_init(&d->ht, 16, NULL, ZVAL_PTR_DTOR, 0);",
          "1007:   d->n = 0;",
          "1008:   if (!BG(serialize_lock)) {",
          "1009:    BG(serialize).data = d;",
          "1010:    BG(serialize).level = 1;",
          "1011:   }",
          "1012:  } else {",
          "1013:   d = BG(serialize).data;",
          "1014:   ++BG(serialize).level;",
          "1015:  }",
          "1016:  return d;",
          "1017: }",
          "1019: PHPAPI void php_var_serialize_destroy(php_serialize_data_t d) {",
          "1021:  if (BG(serialize_lock) || BG(serialize).level == 1) {",
          "1022:   zend_hash_destroy(&d->ht);",
          "1023:   efree(d);",
          "1024:  }",
          "1025:  if (!BG(serialize_lock) && !--BG(serialize).level) {",
          "1026:   BG(serialize).data = NULL;",
          "1027:  }",
          "1028: }",
          "",
          "---------------"
        ],
        "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c": [
          "File: ext/standard/var_unserializer.c -> ext/standard/var_unserializer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include \"ext/standard/php_var.h\"",
          "25: #include \"php_incomplete_class.h\"",
          "28: #define VAR_ENTRIES_MAX 1024",
          "29: #define VAR_ENTRIES_DBG 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: struct php_unserialize_data {",
          "28:  void *first;",
          "29:  void *last;",
          "30:  void *first_dtor;",
          "31:  void *last_dtor;",
          "32: };",
          "34: PHPAPI php_unserialize_data_t php_var_unserialize_init() {",
          "35:  php_unserialize_data_t d;",
          "37:  if (BG(serialize_lock) || !BG(unserialize).level) {",
          "38:   d = ecalloc(1, sizeof(struct php_unserialize_data));",
          "39:   if (!BG(serialize_lock)) {",
          "40:    BG(unserialize).data = d;",
          "41:    BG(unserialize).level = 1;",
          "42:   }",
          "43:  } else {",
          "44:   d = BG(unserialize).data;",
          "45:   ++BG(unserialize).level;",
          "46:  }",
          "47:  return d;",
          "48: }",
          "50: PHPAPI void php_var_unserialize_destroy(php_unserialize_data_t d) {",
          "52:  if (BG(serialize_lock) || BG(unserialize).level == 1) {",
          "53:   var_destroy(&d);",
          "54:   efree(d);",
          "55:  }",
          "56:  if (!BG(serialize_lock) && !--BG(unserialize).level) {",
          "57:   BG(unserialize).data = NULL;",
          "58:  }",
          "59: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "238: #define YYMARKER marker",
          "",
          "[Removed Lines]",
          "241: #line 246 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "276: #line 281 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "514:  start = cursor;",
          "518: {",
          "519:  YYCTYPE yych;",
          "520:  static const unsigned char yybm[] = {",
          "",
          "[Removed Lines]",
          "517: #line 518 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "552: #line 553 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "551:     0,   0,   0,   0,   0,   0,   0,   0,",
          "552:     0,   0,   0,   0,   0,   0,   0,   0,",
          "553:  };",
          "555:  if ((YYLIMIT - YYCURSOR) < 7) YYFILL(7);",
          "556:  yych = *YYCURSOR;",
          "557:  switch (yych) {",
          "558:  case 'C':",
          "560:  case 'N': goto yy5;",
          "567:  case 'o': goto yy12;",
          "572:  }",
          "573: yy2:",
          "576: yy3:",
          "578:  { return 0; }",
          "580: yy4:",
          "581:  yych = *(YYMARKER = ++YYCURSOR);",
          "583:  goto yy3;",
          "584: yy5:",
          "585:  yych = *++YYCURSOR;",
          "587:  goto yy3;",
          "588: yy6:",
          "589:  yych = *(YYMARKER = ++YYCURSOR);",
          "591:  goto yy3;",
          "592: yy7:",
          "593:  yych = *(YYMARKER = ++YYCURSOR);",
          "595:  goto yy3;",
          "596: yy8:",
          "597:  yych = *(YYMARKER = ++YYCURSOR);",
          "599:  goto yy3;",
          "600: yy9:",
          "601:  yych = *(YYMARKER = ++YYCURSOR);",
          "603:  goto yy3;",
          "604: yy10:",
          "605:  yych = *(YYMARKER = ++YYCURSOR);",
          "607:  goto yy3;",
          "608: yy11:",
          "609:  yych = *(YYMARKER = ++YYCURSOR);",
          "611:  goto yy3;",
          "612: yy12:",
          "613:  yych = *(YYMARKER = ++YYCURSOR);",
          "615:  goto yy3;",
          "616: yy13:",
          "617:  yych = *(YYMARKER = ++YYCURSOR);",
          "619:  goto yy3;",
          "620: yy14:",
          "621:  ++YYCURSOR;",
          "623:  {",
          "625:  php_error_docref(NULL, E_NOTICE, \"Unexpected end of serialized data\");",
          "627: }",
          "632: yy17:",
          "633:  yych = *++YYCURSOR;",
          "634:  if (yybm[0+yych] & 128) {",
          "636:  }",
          "638: yy18:",
          "639:  YYCURSOR = YYMARKER;",
          "640:  goto yy3;",
          "641: yy19:",
          "642:  yych = *++YYCURSOR;",
          "645:  }",
          "646:  goto yy18;",
          "655:  yych = *++YYCURSOR;",
          "773:   }",
          "789:   }",
          "792:  }",
          "798:  }",
          "805:  yych = *++YYCURSOR;",
          "806:  if (yych <= ',') {",
          "808:  } else {",
          "810:   if (yych <= '/') goto yy18;",
          "812:   goto yy18;",
          "813:  }",
          "815:  yych = *++YYCURSOR;",
          "816:  if (yych <= '/') goto yy18;",
          "819:  ++YYCURSOR;",
          "820:  if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);",
          "821:  yych = *YYCURSOR;",
          "822:  if (yych <= '/') goto yy18;",
          "825:  yych = *++YYCURSOR;",
          "827:  ++YYCURSOR;",
          "839:  if (yych <= '/') goto yy18;",
          "840:  if (yych <= '9') goto yy34;",
          "841:  goto yy18;",
          "843:  yych = *++YYCURSOR;",
          "844:  if (yych <= '/') goto yy18;",
          "845:  if (yych >= ':') goto yy18;",
          "847:  ++YYCURSOR;",
          "848:  if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);",
          "849:  yych = *YYCURSOR;",
          "850:  if (yych <= '/') goto yy18;",
          "853:  yych = *++YYCURSOR;",
          "855:  ++YYCURSOR;",
          "872:  }",
          "876:  }",
          "882:  yych = *++YYCURSOR;",
          "884:  if (yych <= '/') goto yy18;",
          "886:  goto yy18;",
          "888:  yych = *++YYCURSOR;",
          "889:  if (yych <= '/') goto yy18;",
          "890:  if (yych >= ':') goto yy18;",
          "892:  ++YYCURSOR;",
          "893:  if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);",
          "894:  yych = *YYCURSOR;",
          "895:  if (yych <= '/') goto yy18;",
          "898:  yych = *++YYCURSOR;",
          "900:  ++YYCURSOR;",
          "939:  if (yych <= '/') goto yy18;",
          "941:  goto yy18;",
          "943:  yych = *++YYCURSOR;",
          "944:  if (yych <= '/') goto yy18;",
          "945:  if (yych >= ':') goto yy18;",
          "947:  ++YYCURSOR;",
          "948:  if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);",
          "949:  yych = *YYCURSOR;",
          "950:  if (yych <= '/') goto yy18;",
          "953:  yych = *++YYCURSOR;",
          "955:  ++YYCURSOR;",
          "957:  {",
          "974:   return 0;",
          "975:  }",
          "980:  }",
          "986:  return 1;",
          "987: }",
          "1009:  yych = *++YYCURSOR;",
          "1011:  goto yy18;",
          "1022:  yych = *++YYCURSOR;",
          "1024:  goto yy18;",
          "1031:  ++YYCURSOR;",
          "1058:  ++YYCURSOR;",
          "1059:  if ((YYLIMIT - YYCURSOR) < 4) YYFILL(4);",
          "1060:  yych = *YYCURSOR;",
          "1061:  if (yych <= ';') {",
          "1062:   if (yych <= '/') goto yy18;",
          "1064:   if (yych <= ':') goto yy18;",
          "1065:  } else {",
          "1066:   if (yych <= 'E') {",
          "1067:    if (yych <= 'D') goto yy18;",
          "1069:   } else {",
          "1071:    goto yy18;",
          "1072:   }",
          "1073:  }",
          "1075:  ++YYCURSOR;",
          "1077:  {",
          "1078: #if SIZEOF_ZEND_LONG == 4",
          "1079: use_double:",
          "",
          "[Removed Lines]",
          "559:  case 'O': goto yy13;",
          "561:  case 'R': goto yy2;",
          "562:  case 'S': goto yy10;",
          "563:  case 'a': goto yy11;",
          "564:  case 'b': goto yy6;",
          "565:  case 'd': goto yy8;",
          "566:  case 'i': goto yy7;",
          "568:  case 'r': goto yy4;",
          "569:  case 's': goto yy9;",
          "570:  case '}': goto yy14;",
          "571:  default: goto yy16;",
          "574:  yych = *(YYMARKER = ++YYCURSOR);",
          "575:  if (yych == ':') goto yy95;",
          "577: #line 884 \"ext/standard/var_unserializer.re\"",
          "579: #line 580 \"ext/standard/var_unserializer.c\"",
          "582:  if (yych == ':') goto yy89;",
          "586:  if (yych == ';') goto yy87;",
          "590:  if (yych == ':') goto yy83;",
          "594:  if (yych == ':') goto yy77;",
          "598:  if (yych == ':') goto yy53;",
          "602:  if (yych == ':') goto yy46;",
          "606:  if (yych == ':') goto yy39;",
          "610:  if (yych == ':') goto yy32;",
          "614:  if (yych == ':') goto yy25;",
          "618:  if (yych == ':') goto yy17;",
          "622: #line 878 \"ext/standard/var_unserializer.re\"",
          "628: #line 629 \"ext/standard/var_unserializer.c\"",
          "629: yy16:",
          "630:  yych = *++YYCURSOR;",
          "631:  goto yy3;",
          "635:   goto yy20;",
          "637:  if (yych == '+') goto yy19;",
          "643:  if (yybm[0+yych] & 128) {",
          "644:   goto yy20;",
          "647: yy20:",
          "648:  ++YYCURSOR;",
          "649:  if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);",
          "650:  yych = *YYCURSOR;",
          "651:  if (yybm[0+yych] & 128) {",
          "652:   goto yy20;",
          "653:  }",
          "654:  if (yych != ':') goto yy18;",
          "656:  if (yych != '\"') goto yy18;",
          "657:  ++YYCURSOR;",
          "658: #line 733 \"ext/standard/var_unserializer.re\"",
          "659:  {",
          "660:  size_t len, len2, len3, maxlen;",
          "661:  zend_long elements;",
          "662:  char *str;",
          "663:  zend_string *class_name;",
          "664:  zend_class_entry *ce;",
          "665:  int incomplete_class = 0;",
          "667:  int custom_object = 0;",
          "669:  zval user_func;",
          "670:  zval retval;",
          "671:  zval args[1];",
          "673:     if (!var_hash) return 0;",
          "674:  if (*start == 'C') {",
          "675:   custom_object = 1;",
          "676:  }",
          "678:  len2 = len = parse_uiv(start + 2);",
          "679:  maxlen = max - YYCURSOR;",
          "680:  if (maxlen < len || len == 0) {",
          "682:   return 0;",
          "683:  }",
          "685:  str = (char*)YYCURSOR;",
          "687:  YYCURSOR += len;",
          "689:  if (*(YYCURSOR) != '\"') {",
          "691:   return 0;",
          "692:  }",
          "693:  if (*(YYCURSOR+1) != ':') {",
          "695:   return 0;",
          "696:  }",
          "698:  len3 = strspn(str, \"0123456789_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\\177\\200\\201\\202\\203\\204\\205\\206\\207\\210\\211\\212\\213\\214\\215\\216\\217\\220\\221\\222\\223\\224\\225\\226\\227\\230\\231\\232\\233\\234\\235\\236\\237\\240\\241\\242\\243\\244\\245\\246\\247\\250\\251\\252\\253\\254\\255\\256\\257\\260\\261\\262\\263\\264\\265\\266\\267\\270\\271\\272\\273\\274\\275\\276\\277\\300\\301\\302\\303\\304\\305\\306\\307\\310\\311\\312\\313\\314\\315\\316\\317\\320\\321\\322\\323\\324\\325\\326\\327\\330\\331\\332\\333\\334\\335\\336\\337\\340\\341\\342\\343\\344\\345\\346\\347\\350\\351\\352\\353\\354\\355\\356\\357\\360\\361\\362\\363\\364\\365\\366\\367\\370\\371\\372\\373\\374\\375\\376\\377\\\\\");",
          "699:  if (len3 != len)",
          "700:  {",
          "702:   return 0;",
          "703:  }",
          "705:  class_name = zend_string_init(str, len, 0);",
          "707:  do {",
          "708:   if(!unserialize_allowed_class(class_name, classes)) {",
          "709:    incomplete_class = 1;",
          "710:    ce = PHP_IC_ENTRY;",
          "711:    break;",
          "712:   }",
          "715:   BG(serialize_lock)++;",
          "716:   ce = zend_lookup_class(class_name);",
          "717:   if (ce) {",
          "718:    BG(serialize_lock)--;",
          "719:    if (EG(exception)) {",
          "720:     zend_string_release(class_name);",
          "721:     return 0;",
          "722:    }",
          "723:    break;",
          "724:   }",
          "725:   BG(serialize_lock)--;",
          "727:   if (EG(exception)) {",
          "728:    zend_string_release(class_name);",
          "729:    return 0;",
          "730:   }",
          "733:   if ((PG(unserialize_callback_func) == NULL) || (PG(unserialize_callback_func)[0] == '\\0')) {",
          "734:    incomplete_class = 1;",
          "735:    ce = PHP_IC_ENTRY;",
          "736:    break;",
          "737:   }",
          "740:   ZVAL_STRING(&user_func, PG(unserialize_callback_func));",
          "742:   ZVAL_STR_COPY(&args[0], class_name);",
          "743:   BG(serialize_lock)++;",
          "744:   if (call_user_function_ex(CG(function_table), NULL, &user_func, &retval, 1, args, 0, NULL) != SUCCESS) {",
          "745:    BG(serialize_lock)--;",
          "746:    if (EG(exception)) {",
          "747:     zend_string_release(class_name);",
          "748:     zval_ptr_dtor(&user_func);",
          "749:     zval_ptr_dtor(&args[0]);",
          "750:     return 0;",
          "751:    }",
          "752:    php_error_docref(NULL, E_WARNING, \"defined (%s) but not found\", Z_STRVAL(user_func));",
          "753:    incomplete_class = 1;",
          "754:    ce = PHP_IC_ENTRY;",
          "755:    zval_ptr_dtor(&user_func);",
          "756:    zval_ptr_dtor(&args[0]);",
          "757:    break;",
          "758:   }",
          "759:   BG(serialize_lock)--;",
          "760:   zval_ptr_dtor(&retval);",
          "761:   if (EG(exception)) {",
          "762:    zend_string_release(class_name);",
          "763:    zval_ptr_dtor(&user_func);",
          "764:    zval_ptr_dtor(&args[0]);",
          "765:    return 0;",
          "766:   }",
          "769:   if ((ce = zend_lookup_class(class_name)) == NULL) {",
          "770:    php_error_docref(NULL, E_WARNING, \"Function %s() hasn't defined the class it was called for\", Z_STRVAL(user_func));",
          "771:    incomplete_class = 1;",
          "772:    ce = PHP_IC_ENTRY;",
          "775:   zval_ptr_dtor(&user_func);",
          "776:   zval_ptr_dtor(&args[0]);",
          "777:   break;",
          "778:  } while (1);",
          "782:  if (custom_object) {",
          "783:   int ret;",
          "785:   ret = object_custom(UNSERIALIZE_PASSTHRU, ce);",
          "787:   if (ret && incomplete_class) {",
          "788:    php_store_class_name(rval, ZSTR_VAL(class_name), len2);",
          "790:   zend_string_release(class_name);",
          "791:   return ret;",
          "794:  elements = object_common1(UNSERIALIZE_PASSTHRU, ce);",
          "796:  if (incomplete_class) {",
          "797:   php_store_class_name(rval, ZSTR_VAL(class_name), len2);",
          "799:  zend_string_release(class_name);",
          "801:  return object_common2(UNSERIALIZE_PASSTHRU, elements);",
          "802: }",
          "803: #line 804 \"ext/standard/var_unserializer.c\"",
          "804: yy25:",
          "807:   if (yych != '+') goto yy18;",
          "809:   if (yych <= '-') goto yy26;",
          "811:   if (yych <= '9') goto yy27;",
          "814: yy26:",
          "817:  if (yych >= ':') goto yy18;",
          "818: yy27:",
          "823:  if (yych <= '9') goto yy27;",
          "824:  if (yych >= ';') goto yy18;",
          "826:  if (yych != '\"') goto yy18;",
          "828: #line 726 \"ext/standard/var_unserializer.re\"",
          "829:  {",
          "830:     if (!var_hash) return 0;",
          "832:  return object_common2(UNSERIALIZE_PASSTHRU,",
          "833:    object_common1(UNSERIALIZE_PASSTHRU, ZEND_STANDARD_CLASS_DEF_PTR));",
          "834: }",
          "835: #line 836 \"ext/standard/var_unserializer.c\"",
          "836: yy32:",
          "837:  yych = *++YYCURSOR;",
          "838:  if (yych == '+') goto yy33;",
          "842: yy33:",
          "846: yy34:",
          "851:  if (yych <= '9') goto yy34;",
          "852:  if (yych >= ';') goto yy18;",
          "854:  if (yych != '{') goto yy18;",
          "856: #line 702 \"ext/standard/var_unserializer.re\"",
          "857:  {",
          "858:  zend_long elements = parse_iv(start + 2);",
          "861:     if (!var_hash) return 0;",
          "863:  if (elements < 0) {",
          "864:   return 0;",
          "865:  }",
          "867:  array_init_size(rval, elements);",
          "868:  if (elements) {",
          "871:   zend_hash_real_init(Z_ARRVAL_P(rval), 0);",
          "874:  if (!process_nested_data(UNSERIALIZE_PASSTHRU, Z_ARRVAL_P(rval), elements, 0)) {",
          "875:   return 0;",
          "878:  return finish_nested_data(UNSERIALIZE_PASSTHRU);",
          "879: }",
          "880: #line 881 \"ext/standard/var_unserializer.c\"",
          "881: yy39:",
          "883:  if (yych == '+') goto yy40;",
          "885:  if (yych <= '9') goto yy41;",
          "887: yy40:",
          "891: yy41:",
          "896:  if (yych <= '9') goto yy41;",
          "897:  if (yych >= ';') goto yy18;",
          "899:  if (yych != '\"') goto yy18;",
          "901: #line 668 \"ext/standard/var_unserializer.re\"",
          "902:  {",
          "903:  size_t len, maxlen;",
          "904:  zend_string *str;",
          "906:  len = parse_uiv(start + 2);",
          "907:  maxlen = max - YYCURSOR;",
          "908:  if (maxlen < len) {",
          "910:   return 0;",
          "911:  }",
          "913:  if ((str = unserialize_str(&YYCURSOR, len, maxlen)) == NULL) {",
          "914:   return 0;",
          "915:  }",
          "917:  if (*(YYCURSOR) != '\"') {",
          "918:   zend_string_free(str);",
          "920:   return 0;",
          "921:  }",
          "923:  if (*(YYCURSOR + 1) != ';') {",
          "924:   efree(str);",
          "926:   return 0;",
          "927:  }",
          "929:  YYCURSOR += 2;",
          "932:  ZVAL_STR(rval, str);",
          "933:  return 1;",
          "934: }",
          "935: #line 936 \"ext/standard/var_unserializer.c\"",
          "936: yy46:",
          "937:  yych = *++YYCURSOR;",
          "938:  if (yych == '+') goto yy47;",
          "940:  if (yych <= '9') goto yy48;",
          "942: yy47:",
          "946: yy48:",
          "951:  if (yych <= '9') goto yy48;",
          "952:  if (yych >= ';') goto yy18;",
          "954:  if (yych != '\"') goto yy18;",
          "956: #line 636 \"ext/standard/var_unserializer.re\"",
          "958:  size_t len, maxlen;",
          "959:  char *str;",
          "961:  len = parse_uiv(start + 2);",
          "962:  maxlen = max - YYCURSOR;",
          "963:  if (maxlen < len) {",
          "965:   return 0;",
          "966:  }",
          "968:  str = (char*)YYCURSOR;",
          "970:  YYCURSOR += len;",
          "972:  if (*(YYCURSOR) != '\"') {",
          "977:  if (*(YYCURSOR + 1) != ';') {",
          "979:   return 0;",
          "982:  YYCURSOR += 2;",
          "985:  ZVAL_STRINGL(rval, str, len);",
          "988: #line 989 \"ext/standard/var_unserializer.c\"",
          "989: yy53:",
          "990:  yych = *++YYCURSOR;",
          "991:  if (yych <= '/') {",
          "992:   if (yych <= ',') {",
          "993:    if (yych == '+') goto yy57;",
          "994:    goto yy18;",
          "995:   } else {",
          "996:    if (yych <= '-') goto yy55;",
          "997:    if (yych <= '.') goto yy60;",
          "998:    goto yy18;",
          "999:   }",
          "1000:  } else {",
          "1001:   if (yych <= 'I') {",
          "1002:    if (yych <= '9') goto yy58;",
          "1003:    if (yych <= 'H') goto yy18;",
          "1004:    goto yy56;",
          "1005:   } else {",
          "1006:    if (yych != 'N') goto yy18;",
          "1007:   }",
          "1008:  }",
          "1010:  if (yych == 'A') goto yy76;",
          "1012: yy55:",
          "1013:  yych = *++YYCURSOR;",
          "1014:  if (yych <= '/') {",
          "1015:   if (yych == '.') goto yy60;",
          "1016:   goto yy18;",
          "1017:  } else {",
          "1018:   if (yych <= '9') goto yy58;",
          "1019:   if (yych != 'I') goto yy18;",
          "1020:  }",
          "1021: yy56:",
          "1023:  if (yych == 'N') goto yy72;",
          "1025: yy57:",
          "1026:  yych = *++YYCURSOR;",
          "1027:  if (yych == '.') goto yy60;",
          "1028:  if (yych <= '/') goto yy18;",
          "1029:  if (yych >= ':') goto yy18;",
          "1030: yy58:",
          "1032:  if ((YYLIMIT - YYCURSOR) < 4) YYFILL(4);",
          "1033:  yych = *YYCURSOR;",
          "1034:  if (yych <= ':') {",
          "1035:   if (yych <= '.') {",
          "1036:    if (yych <= '-') goto yy18;",
          "1037:    goto yy70;",
          "1038:   } else {",
          "1039:    if (yych <= '/') goto yy18;",
          "1040:    if (yych <= '9') goto yy58;",
          "1041:    goto yy18;",
          "1042:   }",
          "1043:  } else {",
          "1044:   if (yych <= 'E') {",
          "1045:    if (yych <= ';') goto yy63;",
          "1046:    if (yych <= 'D') goto yy18;",
          "1047:    goto yy65;",
          "1048:   } else {",
          "1049:    if (yych == 'e') goto yy65;",
          "1050:    goto yy18;",
          "1051:   }",
          "1052:  }",
          "1053: yy60:",
          "1054:  yych = *++YYCURSOR;",
          "1055:  if (yych <= '/') goto yy18;",
          "1056:  if (yych >= ':') goto yy18;",
          "1057: yy61:",
          "1063:   if (yych <= '9') goto yy61;",
          "1068:    goto yy65;",
          "1070:    if (yych == 'e') goto yy65;",
          "1074: yy63:",
          "1076: #line 627 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "593:  case 'O': goto yy4;",
          "595:  case 'R': goto yy6;",
          "596:  case 'S': goto yy7;",
          "597:  case 'a': goto yy8;",
          "598:  case 'b': goto yy9;",
          "599:  case 'd': goto yy10;",
          "600:  case 'i': goto yy11;",
          "602:  case 'r': goto yy13;",
          "603:  case 's': goto yy14;",
          "604:  case '}': goto yy15;",
          "605:  default: goto yy2;",
          "608:  ++YYCURSOR;",
          "610: #line 919 \"ext/standard/var_unserializer.re\"",
          "612: #line 613 \"ext/standard/var_unserializer.c\"",
          "615:  if (yych == ':') goto yy17;",
          "619:  if (yych == ';') goto yy19;",
          "623:  if (yych == ':') goto yy21;",
          "627:  if (yych == ':') goto yy22;",
          "631:  if (yych == ':') goto yy23;",
          "635:  if (yych == ':') goto yy24;",
          "639:  if (yych == ':') goto yy25;",
          "643:  if (yych == ':') goto yy26;",
          "647:  if (yych == ':') goto yy27;",
          "651:  if (yych == ':') goto yy28;",
          "654:  yych = *(YYMARKER = ++YYCURSOR);",
          "655:  if (yych == ':') goto yy29;",
          "656:  goto yy3;",
          "657: yy15:",
          "659: #line 913 \"ext/standard/var_unserializer.re\"",
          "665: #line 666 \"ext/standard/var_unserializer.c\"",
          "669:   goto yy31;",
          "671:  if (yych == '+') goto yy30;",
          "676:  ++YYCURSOR;",
          "677: #line 608 \"ext/standard/var_unserializer.re\"",
          "678:  {",
          "680:  ZVAL_NULL(rval);",
          "681:  return 1;",
          "682: }",
          "683: #line 684 \"ext/standard/var_unserializer.c\"",
          "684: yy21:",
          "686:  if (yych <= ',') {",
          "687:   if (yych == '+') goto yy33;",
          "688:   goto yy18;",
          "689:  } else {",
          "690:   if (yych <= '-') goto yy33;",
          "691:   if (yych <= '/') goto yy18;",
          "692:   if (yych <= '9') goto yy34;",
          "693:   goto yy18;",
          "695: yy22:",
          "696:  yych = *++YYCURSOR;",
          "697:  if (yych == '+') goto yy36;",
          "698:  if (yych <= '/') goto yy18;",
          "699:  if (yych <= '9') goto yy37;",
          "701: yy23:",
          "703:  if (yych == '+') goto yy39;",
          "704:  if (yych <= '/') goto yy18;",
          "705:  if (yych <= '9') goto yy40;",
          "706:  goto yy18;",
          "707: yy24:",
          "708:  yych = *++YYCURSOR;",
          "709:  if (yych <= '/') goto yy18;",
          "710:  if (yych <= '1') goto yy42;",
          "711:  goto yy18;",
          "712: yy25:",
          "713:  yych = *++YYCURSOR;",
          "714:  if (yych <= '/') {",
          "715:   if (yych <= ',') {",
          "716:    if (yych == '+') goto yy43;",
          "717:    goto yy18;",
          "718:   } else {",
          "719:    if (yych <= '-') goto yy44;",
          "720:    if (yych <= '.') goto yy45;",
          "721:    goto yy18;",
          "723:  } else {",
          "724:   if (yych <= 'I') {",
          "725:    if (yych <= '9') goto yy46;",
          "726:    if (yych <= 'H') goto yy18;",
          "727:    goto yy48;",
          "728:   } else {",
          "729:    if (yych == 'N') goto yy49;",
          "730:    goto yy18;",
          "733: yy26:",
          "734:  yych = *++YYCURSOR;",
          "735:  if (yych <= ',') {",
          "736:   if (yych == '+') goto yy50;",
          "737:   goto yy18;",
          "738:  } else {",
          "739:   if (yych <= '-') goto yy50;",
          "740:   if (yych <= '/') goto yy18;",
          "741:   if (yych <= '9') goto yy51;",
          "742:   goto yy18;",
          "744: yy27:",
          "745:  yych = *++YYCURSOR;",
          "746:  if (yych <= ',') {",
          "747:   if (yych == '+') goto yy53;",
          "748:   goto yy18;",
          "749:  } else {",
          "750:   if (yych <= '-') goto yy53;",
          "751:   if (yych <= '/') goto yy18;",
          "752:   if (yych <= '9') goto yy54;",
          "753:   goto yy18;",
          "754:  }",
          "755: yy28:",
          "758:   if (yych == '+') goto yy56;",
          "759:   goto yy18;",
          "761:   if (yych <= '-') goto yy56;",
          "763:   if (yych <= '9') goto yy57;",
          "766: yy29:",
          "768:  if (yych == '+') goto yy59;",
          "770:  if (yych <= '9') goto yy60;",
          "771:  goto yy18;",
          "772: yy30:",
          "773:  yych = *++YYCURSOR;",
          "774:  if (yybm[0+yych] & 128) {",
          "775:   goto yy31;",
          "776:  }",
          "777:  goto yy18;",
          "778: yy31:",
          "782:  if (yybm[0+yych] & 128) {",
          "783:   goto yy31;",
          "784:  }",
          "786:  if (yych <= ':') goto yy62;",
          "787:  goto yy18;",
          "788: yy33:",
          "790:  if (yych <= '/') goto yy18;",
          "791:  if (yych >= ':') goto yy18;",
          "792: yy34:",
          "794:  if (YYLIMIT <= YYCURSOR) YYFILL(1);",
          "795:  yych = *YYCURSOR;",
          "798:  if (yych == ';') goto yy63;",
          "800: yy36:",
          "804: yy37:",
          "809:  if (yych <= '9') goto yy37;",
          "810:  if (yych <= ':') goto yy65;",
          "811:  goto yy18;",
          "812: yy39:",
          "814:  if (yych <= '/') goto yy18;",
          "815:  if (yych >= ':') goto yy18;",
          "816: yy40:",
          "818:  if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);",
          "819:  yych = *YYCURSOR;",
          "820:  if (yych <= '/') goto yy18;",
          "821:  if (yych <= '9') goto yy40;",
          "822:  if (yych <= ':') goto yy66;",
          "823:  goto yy18;",
          "824: yy42:",
          "825:  yych = *++YYCURSOR;",
          "826:  if (yych == ';') goto yy67;",
          "827:  goto yy18;",
          "828: yy43:",
          "829:  yych = *++YYCURSOR;",
          "830:  if (yych == '.') goto yy45;",
          "831:  if (yych <= '/') goto yy18;",
          "832:  if (yych <= '9') goto yy46;",
          "833:  goto yy18;",
          "834: yy44:",
          "835:  yych = *++YYCURSOR;",
          "836:  if (yych <= '/') {",
          "837:   if (yych != '.') goto yy18;",
          "838:  } else {",
          "839:   if (yych <= '9') goto yy46;",
          "840:   if (yych == 'I') goto yy48;",
          "841:   goto yy18;",
          "843: yy45:",
          "844:  yych = *++YYCURSOR;",
          "845:  if (yych <= '/') goto yy18;",
          "846:  if (yych <= '9') goto yy69;",
          "847:  goto yy18;",
          "848: yy46:",
          "849:  ++YYCURSOR;",
          "850:  if ((YYLIMIT - YYCURSOR) < 4) YYFILL(4);",
          "851:  yych = *YYCURSOR;",
          "852:  if (yych <= ':') {",
          "853:   if (yych <= '.') {",
          "854:    if (yych <= '-') goto yy18;",
          "855:    goto yy69;",
          "856:   } else {",
          "857:    if (yych <= '/') goto yy18;",
          "858:    if (yych <= '9') goto yy46;",
          "859:    goto yy18;",
          "860:   }",
          "861:  } else {",
          "862:   if (yych <= 'E') {",
          "863:    if (yych <= ';') goto yy71;",
          "864:    if (yych <= 'D') goto yy18;",
          "865:    goto yy73;",
          "866:   } else {",
          "867:    if (yych == 'e') goto yy73;",
          "868:    goto yy18;",
          "869:   }",
          "871: yy48:",
          "873:  if (yych == 'N') goto yy74;",
          "874:  goto yy18;",
          "875: yy49:",
          "876:  yych = *++YYCURSOR;",
          "877:  if (yych == 'A') goto yy75;",
          "878:  goto yy18;",
          "879: yy50:",
          "880:  yych = *++YYCURSOR;",
          "881:  if (yych <= '/') goto yy18;",
          "882:  if (yych >= ':') goto yy18;",
          "883: yy51:",
          "884:  ++YYCURSOR;",
          "885:  if (YYLIMIT <= YYCURSOR) YYFILL(1);",
          "886:  yych = *YYCURSOR;",
          "888:  if (yych <= '9') goto yy51;",
          "889:  if (yych == ';') goto yy76;",
          "891: yy53:",
          "895: yy54:",
          "900:  if (yych <= '9') goto yy54;",
          "901:  if (yych <= ':') goto yy78;",
          "902:  goto yy18;",
          "903: yy56:",
          "905:  if (yych <= '/') goto yy18;",
          "906:  if (yych >= ':') goto yy18;",
          "907: yy57:",
          "909:  if (YYLIMIT <= YYCURSOR) YYFILL(1);",
          "910:  yych = *YYCURSOR;",
          "912:  if (yych <= '9') goto yy57;",
          "913:  if (yych == ';') goto yy79;",
          "915: yy59:",
          "919: yy60:",
          "924:  if (yych <= '9') goto yy60;",
          "925:  if (yych <= ':') goto yy81;",
          "926:  goto yy18;",
          "927: yy62:",
          "929:  if (yych == '\"') goto yy82;",
          "930:  goto yy18;",
          "931: yy63:",
          "933: #line 557 \"ext/standard/var_unserializer.re\"",
          "935:  zend_long id;",
          "938:  if (!var_hash) return 0;",
          "940:  id = parse_iv(start + 2) - 1;",
          "941:  if (id == -1 || (rval_ref = var_access(var_hash, id)) == NULL) {",
          "945:  zval_ptr_dtor(rval);",
          "946:  if (Z_ISUNDEF_P(rval_ref) || (Z_ISREF_P(rval_ref) && Z_ISUNDEF_P(Z_REFVAL_P(rval_ref)))) {",
          "947:   ZVAL_UNDEF(rval);",
          "948:   return 1;",
          "949:  }",
          "950:  if (Z_ISREF_P(rval_ref)) {",
          "951:   ZVAL_COPY(rval, rval_ref);",
          "952:  } else {",
          "953:   ZVAL_NEW_REF(rval_ref, rval_ref);",
          "954:   ZVAL_COPY(rval, rval_ref);",
          "959: #line 960 \"ext/standard/var_unserializer.c\"",
          "960: yy65:",
          "962:  if (yych == '\"') goto yy84;",
          "964: yy66:",
          "966:  if (yych == '{') goto yy86;",
          "968: yy67:",
          "970: #line 614 \"ext/standard/var_unserializer.re\"",
          "971:  {",
          "973:  ZVAL_BOOL(rval, parse_iv(start + 2));",
          "974:  return 1;",
          "975: }",
          "976: #line 977 \"ext/standard/var_unserializer.c\"",
          "977: yy69:",
          "983:   if (yych <= '9') goto yy69;",
          "988:    goto yy73;",
          "990:    if (yych == 'e') goto yy73;",
          "994: yy71:",
          "996: #line 662 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1082:  ZVAL_DOUBLE(rval, zend_strtod((const char *)start + 2, NULL));",
          "1083:  return 1;",
          "1084: }",
          "1087:  yych = *++YYCURSOR;",
          "1088:  if (yych <= ',') {",
          "1090:  } else {",
          "1092:   if (yych <= '/') goto yy18;",
          "1094:   goto yy18;",
          "1095:  }",
          "1097:  yych = *++YYCURSOR;",
          "1113:  goto yy18;",
          "1115:  yych = *++YYCURSOR;",
          "1118:  goto yy18;",
          "1120:  ++YYCURSOR;",
          "1132:   } else {",
          "1135:   }",
          "1136:  }",
          "1141:  yych = *++YYCURSOR;",
          "1143:  ++YYCURSOR;",
          "1145:  {",
          "1156:  }",
          "1158:  return 1;",
          "1159: }",
          "1162:  yych = *++YYCURSOR;",
          "1164:  goto yy18;",
          "1186:  ++YYCURSOR;",
          "1188:  {",
          "1194:  }",
          "1203:    }",
          "1206:   }",
          "1212: }",
          "1220:  ++YYCURSOR;",
          "1222:  {",
          "1225:  return 1;",
          "1226: }",
          "1229:  ++YYCURSOR;",
          "1231:  {",
          "1235: }",
          "1238:  yych = *++YYCURSOR;",
          "1239:  if (yych <= ',') {",
          "1241:  } else {",
          "1243:   if (yych <= '/') goto yy18;",
          "1246:  }",
          "1252:  ++YYCURSOR;",
          "1253:  if (YYLIMIT <= YYCURSOR) YYFILL(1);",
          "1254:  yych = *YYCURSOR;",
          "1255:  if (yych <= '/') goto yy18;",
          "1258:  ++YYCURSOR;",
          "1260:  {",
          "1268:   return 0;",
          "1269:  }",
          "1272:   return 0;",
          "1273:  }",
          "1278:  }",
          "1282:  return 1;",
          "1283: }",
          "1295: yy96:",
          "1296:  yych = *++YYCURSOR;",
          "1297:  if (yych <= '/') goto yy18;",
          "1299: yy97:",
          "1300:  ++YYCURSOR;",
          "1308:  {",
          "1326:  } else {",
          "1329:  }",
          "1331:  return 1;",
          "1332: }",
          "1334: }",
          "1338:  return 0;",
          "",
          "[Removed Lines]",
          "1085: #line 1086 \"ext/standard/var_unserializer.c\"",
          "1086: yy65:",
          "1089:   if (yych != '+') goto yy18;",
          "1091:   if (yych <= '-') goto yy66;",
          "1093:   if (yych <= '9') goto yy67;",
          "1096: yy66:",
          "1098:  if (yych <= ',') {",
          "1099:   if (yych == '+') goto yy69;",
          "1100:   goto yy18;",
          "1101:  } else {",
          "1102:   if (yych <= '-') goto yy69;",
          "1103:   if (yych <= '/') goto yy18;",
          "1104:   if (yych >= ':') goto yy18;",
          "1105:  }",
          "1106: yy67:",
          "1107:  ++YYCURSOR;",
          "1108:  if (YYLIMIT <= YYCURSOR) YYFILL(1);",
          "1109:  yych = *YYCURSOR;",
          "1110:  if (yych <= '/') goto yy18;",
          "1111:  if (yych <= '9') goto yy67;",
          "1112:  if (yych == ';') goto yy63;",
          "1114: yy69:",
          "1116:  if (yych <= '/') goto yy18;",
          "1117:  if (yych <= '9') goto yy67;",
          "1119: yy70:",
          "1121:  if ((YYLIMIT - YYCURSOR) < 4) YYFILL(4);",
          "1122:  yych = *YYCURSOR;",
          "1123:  if (yych <= ';') {",
          "1124:   if (yych <= '/') goto yy18;",
          "1125:   if (yych <= '9') goto yy70;",
          "1126:   if (yych <= ':') goto yy18;",
          "1127:   goto yy63;",
          "1128:  } else {",
          "1129:   if (yych <= 'E') {",
          "1130:    if (yych <= 'D') goto yy18;",
          "1131:    goto yy65;",
          "1133:    if (yych == 'e') goto yy65;",
          "1134:    goto yy18;",
          "1137: yy72:",
          "1138:  yych = *++YYCURSOR;",
          "1139:  if (yych != 'F') goto yy18;",
          "1140: yy73:",
          "1142:  if (yych != ';') goto yy18;",
          "1144: #line 611 \"ext/standard/var_unserializer.re\"",
          "1148:  if (!strncmp((char*)start + 2, \"NAN\", 3)) {",
          "1149:   ZVAL_DOUBLE(rval, php_get_nan());",
          "1150:  } else if (!strncmp((char*)start + 2, \"INF\", 3)) {",
          "1151:   ZVAL_DOUBLE(rval, php_get_inf());",
          "1152:  } else if (!strncmp((char*)start + 2, \"-INF\", 4)) {",
          "1153:   ZVAL_DOUBLE(rval, -php_get_inf());",
          "1154:  } else {",
          "1155:   ZVAL_NULL(rval);",
          "1160: #line 1161 \"ext/standard/var_unserializer.c\"",
          "1161: yy76:",
          "1163:  if (yych == 'N') goto yy73;",
          "1165: yy77:",
          "1166:  yych = *++YYCURSOR;",
          "1167:  if (yych <= ',') {",
          "1168:   if (yych != '+') goto yy18;",
          "1169:  } else {",
          "1170:   if (yych <= '-') goto yy78;",
          "1171:   if (yych <= '/') goto yy18;",
          "1172:   if (yych <= '9') goto yy79;",
          "1173:   goto yy18;",
          "1174:  }",
          "1175: yy78:",
          "1176:  yych = *++YYCURSOR;",
          "1177:  if (yych <= '/') goto yy18;",
          "1178:  if (yych >= ':') goto yy18;",
          "1179: yy79:",
          "1180:  ++YYCURSOR;",
          "1181:  if (YYLIMIT <= YYCURSOR) YYFILL(1);",
          "1182:  yych = *YYCURSOR;",
          "1183:  if (yych <= '/') goto yy18;",
          "1184:  if (yych <= '9') goto yy79;",
          "1185:  if (yych != ';') goto yy18;",
          "1187: #line 585 \"ext/standard/var_unserializer.re\"",
          "1189: #if SIZEOF_ZEND_LONG == 4",
          "1190:  int digits = YYCURSOR - start - 3;",
          "1192:  if (start[2] == '-' || start[2] == '+') {",
          "1193:   digits--;",
          "1197:  if (digits >= MAX_LENGTH_OF_LONG - 1) {",
          "1198:   if (digits == MAX_LENGTH_OF_LONG - 1) {",
          "1199:    int cmp = strncmp((char*)YYCURSOR - MAX_LENGTH_OF_LONG, long_min_digits, MAX_LENGTH_OF_LONG - 1);",
          "1201:    if (!(cmp < 0 || (cmp == 0 && start[2] == '-'))) {",
          "1202:     goto use_double;",
          "1204:   } else {",
          "1205:    goto use_double;",
          "1207:  }",
          "1208: #endif",
          "1210:  ZVAL_LONG(rval, parse_iv(start + 2));",
          "1211:  return 1;",
          "1213: #line 1214 \"ext/standard/var_unserializer.c\"",
          "1214: yy83:",
          "1215:  yych = *++YYCURSOR;",
          "1216:  if (yych <= '/') goto yy18;",
          "1217:  if (yych >= '2') goto yy18;",
          "1218:  yych = *++YYCURSOR;",
          "1219:  if (yych != ';') goto yy18;",
          "1221: #line 579 \"ext/standard/var_unserializer.re\"",
          "1224:  ZVAL_BOOL(rval, parse_iv(start + 2));",
          "1227: #line 1228 \"ext/standard/var_unserializer.c\"",
          "1228: yy87:",
          "1230: #line 573 \"ext/standard/var_unserializer.re\"",
          "1233:  ZVAL_NULL(rval);",
          "1234:  return 1;",
          "1236: #line 1237 \"ext/standard/var_unserializer.c\"",
          "1237: yy89:",
          "1240:   if (yych != '+') goto yy18;",
          "1242:   if (yych <= '-') goto yy90;",
          "1244:   if (yych <= '9') goto yy91;",
          "1245:   goto yy18;",
          "1247: yy90:",
          "1248:  yych = *++YYCURSOR;",
          "1249:  if (yych <= '/') goto yy18;",
          "1250:  if (yych >= ':') goto yy18;",
          "1251: yy91:",
          "1256:  if (yych <= '9') goto yy91;",
          "1257:  if (yych != ';') goto yy18;",
          "1259: #line 548 \"ext/standard/var_unserializer.re\"",
          "1261:  zend_long id;",
          "1264:  if (!var_hash) return 0;",
          "1266:  id = parse_iv(start + 2) - 1;",
          "1267:  if (id == -1 || (rval_ref = var_access(var_hash, id)) == NULL) {",
          "1271:  if (rval_ref == rval) {",
          "1275:  if (Z_ISUNDEF_P(rval_ref) || (Z_ISREF_P(rval_ref) && Z_ISUNDEF_P(Z_REFVAL_P(rval_ref)))) {",
          "1276:   ZVAL_UNDEF(rval);",
          "1277:   return 1;",
          "1280:  ZVAL_COPY(rval, rval_ref);",
          "1284: #line 1285 \"ext/standard/var_unserializer.c\"",
          "1285: yy95:",
          "1286:  yych = *++YYCURSOR;",
          "1287:  if (yych <= ',') {",
          "1288:   if (yych != '+') goto yy18;",
          "1289:  } else {",
          "1290:   if (yych <= '-') goto yy96;",
          "1291:   if (yych <= '/') goto yy18;",
          "1292:   if (yych <= '9') goto yy97;",
          "1293:   goto yy18;",
          "1294:  }",
          "1298:  if (yych >= ':') goto yy18;",
          "1301:  if (YYLIMIT <= YYCURSOR) YYFILL(1);",
          "1302:  yych = *YYCURSOR;",
          "1303:  if (yych <= '/') goto yy18;",
          "1304:  if (yych <= '9') goto yy97;",
          "1305:  if (yych != ';') goto yy18;",
          "1306:  ++YYCURSOR;",
          "1307: #line 522 \"ext/standard/var_unserializer.re\"",
          "1309:  zend_long id;",
          "1312:  if (!var_hash) return 0;",
          "1314:  id = parse_iv(start + 2) - 1;",
          "1315:  if (id == -1 || (rval_ref = var_access(var_hash, id)) == NULL) {",
          "1316:   return 0;",
          "1317:  }",
          "1319:  zval_ptr_dtor(rval);",
          "1320:  if (Z_ISUNDEF_P(rval_ref) || (Z_ISREF_P(rval_ref) && Z_ISUNDEF_P(Z_REFVAL_P(rval_ref)))) {",
          "1321:   ZVAL_UNDEF(rval);",
          "1322:   return 1;",
          "1323:  }",
          "1324:  if (Z_ISREF_P(rval_ref)) {",
          "1325:   ZVAL_COPY(rval, rval_ref);",
          "1327:   ZVAL_NEW_REF(rval_ref, rval_ref);",
          "1328:   ZVAL_COPY(rval, rval_ref);",
          "1333: #line 1334 \"ext/standard/var_unserializer.c\"",
          "1335: #line 886 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1005: #line 1006 \"ext/standard/var_unserializer.c\"",
          "1006: yy73:",
          "1009:   if (yych == '+') goto yy88;",
          "1010:   goto yy18;",
          "1012:   if (yych <= '-') goto yy88;",
          "1014:   if (yych <= '9') goto yy89;",
          "1017: yy74:",
          "1019:  if (yych == 'F') goto yy91;",
          "1021: yy75:",
          "1023:  if (yych == 'N') goto yy91;",
          "1025: yy76:",
          "1027: #line 620 \"ext/standard/var_unserializer.re\"",
          "1028:  {",
          "1029: #if SIZEOF_ZEND_LONG == 4",
          "1030:  int digits = YYCURSOR - start - 3;",
          "1032:  if (start[2] == '-' || start[2] == '+') {",
          "1033:   digits--;",
          "1034:  }",
          "1037:  if (digits >= MAX_LENGTH_OF_LONG - 1) {",
          "1038:   if (digits == MAX_LENGTH_OF_LONG - 1) {",
          "1039:    int cmp = strncmp((char*)YYCURSOR - MAX_LENGTH_OF_LONG, long_min_digits, MAX_LENGTH_OF_LONG - 1);",
          "1041:    if (!(cmp < 0 || (cmp == 0 && start[2] == '-'))) {",
          "1042:     goto use_double;",
          "1043:    }",
          "1045:    goto use_double;",
          "1048: #endif",
          "1050:  ZVAL_LONG(rval, parse_iv(start + 2));",
          "1051:  return 1;",
          "1052: }",
          "1053: #line 1054 \"ext/standard/var_unserializer.c\"",
          "1054: yy78:",
          "1056:  if (yych == '\"') goto yy92;",
          "1057:  goto yy18;",
          "1058: yy79:",
          "1060: #line 583 \"ext/standard/var_unserializer.re\"",
          "1062:  zend_long id;",
          "1065:  if (!var_hash) return 0;",
          "1067:  id = parse_iv(start + 2) - 1;",
          "1068:  if (id == -1 || (rval_ref = var_access(var_hash, id)) == NULL) {",
          "1069:   return 0;",
          "1070:  }",
          "1072:  if (rval_ref == rval) {",
          "1073:   return 0;",
          "1074:  }",
          "1076:  if (Z_ISUNDEF_P(rval_ref) || (Z_ISREF_P(rval_ref) && Z_ISUNDEF_P(Z_REFVAL_P(rval_ref)))) {",
          "1077:   ZVAL_UNDEF(rval);",
          "1078:   return 1;",
          "1081:  ZVAL_COPY(rval, rval_ref);",
          "1085: #line 1086 \"ext/standard/var_unserializer.c\"",
          "1086: yy81:",
          "1088:  if (yych == '\"') goto yy94;",
          "1090: yy82:",
          "1092: #line 768 \"ext/standard/var_unserializer.re\"",
          "1094:  size_t len, len2, len3, maxlen;",
          "1095:  zend_long elements;",
          "1096:  char *str;",
          "1097:  zend_string *class_name;",
          "1098:  zend_class_entry *ce;",
          "1099:  int incomplete_class = 0;",
          "1101:  int custom_object = 0;",
          "1103:  zval user_func;",
          "1104:  zval retval;",
          "1105:  zval args[1];",
          "1107:     if (!var_hash) return 0;",
          "1108:  if (*start == 'C') {",
          "1109:   custom_object = 1;",
          "1112:  len2 = len = parse_uiv(start + 2);",
          "1113:  maxlen = max - YYCURSOR;",
          "1114:  if (maxlen < len || len == 0) {",
          "1116:   return 0;",
          "1117:  }",
          "1119:  str = (char*)YYCURSOR;",
          "1121:  YYCURSOR += len;",
          "1123:  if (*(YYCURSOR) != '\"') {",
          "1125:   return 0;",
          "1126:  }",
          "1127:  if (*(YYCURSOR+1) != ':') {",
          "1129:   return 0;",
          "1130:  }",
          "1132:  len3 = strspn(str, \"0123456789_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\\177\\200\\201\\202\\203\\204\\205\\206\\207\\210\\211\\212\\213\\214\\215\\216\\217\\220\\221\\222\\223\\224\\225\\226\\227\\230\\231\\232\\233\\234\\235\\236\\237\\240\\241\\242\\243\\244\\245\\246\\247\\250\\251\\252\\253\\254\\255\\256\\257\\260\\261\\262\\263\\264\\265\\266\\267\\270\\271\\272\\273\\274\\275\\276\\277\\300\\301\\302\\303\\304\\305\\306\\307\\310\\311\\312\\313\\314\\315\\316\\317\\320\\321\\322\\323\\324\\325\\326\\327\\330\\331\\332\\333\\334\\335\\336\\337\\340\\341\\342\\343\\344\\345\\346\\347\\350\\351\\352\\353\\354\\355\\356\\357\\360\\361\\362\\363\\364\\365\\366\\367\\370\\371\\372\\373\\374\\375\\376\\377\\\\\");",
          "1133:  if (len3 != len)",
          "1134:  {",
          "1136:   return 0;",
          "1137:  }",
          "1139:  class_name = zend_string_init(str, len, 0);",
          "1141:  do {",
          "1142:   if(!unserialize_allowed_class(class_name, classes)) {",
          "1143:    incomplete_class = 1;",
          "1144:    ce = PHP_IC_ENTRY;",
          "1145:    break;",
          "1146:   }",
          "1149:   BG(serialize_lock)++;",
          "1150:   ce = zend_lookup_class(class_name);",
          "1151:   if (ce) {",
          "1152:    BG(serialize_lock)--;",
          "1153:    if (EG(exception)) {",
          "1154:     zend_string_release(class_name);",
          "1155:     return 0;",
          "1157:    break;",
          "1159:   BG(serialize_lock)--;",
          "1161:   if (EG(exception)) {",
          "1162:    zend_string_release(class_name);",
          "1163:    return 0;",
          "1164:   }",
          "1167:   if ((PG(unserialize_callback_func) == NULL) || (PG(unserialize_callback_func)[0] == '\\0')) {",
          "1168:    incomplete_class = 1;",
          "1169:    ce = PHP_IC_ENTRY;",
          "1170:    break;",
          "1171:   }",
          "1174:   ZVAL_STRING(&user_func, PG(unserialize_callback_func));",
          "1176:   ZVAL_STR_COPY(&args[0], class_name);",
          "1177:   BG(serialize_lock)++;",
          "1178:   if (call_user_function_ex(CG(function_table), NULL, &user_func, &retval, 1, args, 0, NULL) != SUCCESS) {",
          "1179:    BG(serialize_lock)--;",
          "1180:    if (EG(exception)) {",
          "1181:     zend_string_release(class_name);",
          "1182:     zval_ptr_dtor(&user_func);",
          "1183:     zval_ptr_dtor(&args[0]);",
          "1184:     return 0;",
          "1185:    }",
          "1186:    php_error_docref(NULL, E_WARNING, \"defined (%s) but not found\", Z_STRVAL(user_func));",
          "1187:    incomplete_class = 1;",
          "1188:    ce = PHP_IC_ENTRY;",
          "1189:    zval_ptr_dtor(&user_func);",
          "1190:    zval_ptr_dtor(&args[0]);",
          "1191:    break;",
          "1192:   }",
          "1193:   BG(serialize_lock)--;",
          "1194:   zval_ptr_dtor(&retval);",
          "1195:   if (EG(exception)) {",
          "1196:    zend_string_release(class_name);",
          "1197:    zval_ptr_dtor(&user_func);",
          "1198:    zval_ptr_dtor(&args[0]);",
          "1199:    return 0;",
          "1200:   }",
          "1203:   if ((ce = zend_lookup_class(class_name)) == NULL) {",
          "1204:    php_error_docref(NULL, E_WARNING, \"Function %s() hasn't defined the class it was called for\", Z_STRVAL(user_func));",
          "1205:    incomplete_class = 1;",
          "1206:    ce = PHP_IC_ENTRY;",
          "1207:   }",
          "1209:   zval_ptr_dtor(&user_func);",
          "1210:   zval_ptr_dtor(&args[0]);",
          "1211:   break;",
          "1212:  } while (1);",
          "1216:  if (custom_object) {",
          "1217:   int ret;",
          "1219:   ret = object_custom(UNSERIALIZE_PASSTHRU, ce);",
          "1221:   if (ret && incomplete_class) {",
          "1222:    php_store_class_name(rval, ZSTR_VAL(class_name), len2);",
          "1223:   }",
          "1224:   zend_string_release(class_name);",
          "1225:   return ret;",
          "1226:  }",
          "1228:  elements = object_common1(UNSERIALIZE_PASSTHRU, ce);",
          "1230:  if (incomplete_class) {",
          "1231:   php_store_class_name(rval, ZSTR_VAL(class_name), len2);",
          "1232:  }",
          "1233:  zend_string_release(class_name);",
          "1235:  return object_common2(UNSERIALIZE_PASSTHRU, elements);",
          "1237: #line 1238 \"ext/standard/var_unserializer.c\"",
          "1238: yy84:",
          "1240: #line 703 \"ext/standard/var_unserializer.re\"",
          "1242:  size_t len, maxlen;",
          "1243:  zend_string *str;",
          "1245:  len = parse_uiv(start + 2);",
          "1246:  maxlen = max - YYCURSOR;",
          "1247:  if (maxlen < len) {",
          "1249:   return 0;",
          "1250:  }",
          "1252:  if ((str = unserialize_str(&YYCURSOR, len, maxlen)) == NULL) {",
          "1253:   return 0;",
          "1254:  }",
          "1256:  if (*(YYCURSOR) != '\"') {",
          "1257:   zend_string_free(str);",
          "1259:   return 0;",
          "1260:  }",
          "1262:  if (*(YYCURSOR + 1) != ';') {",
          "1263:   efree(str);",
          "1265:   return 0;",
          "1266:  }",
          "1268:  YYCURSOR += 2;",
          "1271:  ZVAL_STR(rval, str);",
          "1274: #line 1275 \"ext/standard/var_unserializer.c\"",
          "1275: yy86:",
          "1277: #line 737 \"ext/standard/var_unserializer.re\"",
          "1279:  zend_long elements = parse_iv(start + 2);",
          "1282:     if (!var_hash) return 0;",
          "1284:  if (elements < 0) {",
          "1285:   return 0;",
          "1286:  }",
          "1288:  array_init_size(rval, elements);",
          "1289:  if (elements) {",
          "1292:   zend_hash_real_init(Z_ARRVAL_P(rval), 0);",
          "1293:  }",
          "1295:  if (!process_nested_data(UNSERIALIZE_PASSTHRU, Z_ARRVAL_P(rval), elements, 0)) {",
          "1296:   return 0;",
          "1297:  }",
          "1299:  return finish_nested_data(UNSERIALIZE_PASSTHRU);",
          "1301: #line 1302 \"ext/standard/var_unserializer.c\"",
          "1302: yy88:",
          "1305:   if (yych == '+') goto yy96;",
          "1306:   goto yy18;",
          "1308:   if (yych <= '-') goto yy96;",
          "1310:   if (yych >= ':') goto yy18;",
          "1312: yy89:",
          "1317:  if (yych <= '9') goto yy89;",
          "1318:  if (yych == ';') goto yy71;",
          "1319:  goto yy18;",
          "1320: yy91:",
          "1321:  yych = *++YYCURSOR;",
          "1322:  if (yych == ';') goto yy97;",
          "1323:  goto yy18;",
          "1324: yy92:",
          "1326: #line 761 \"ext/standard/var_unserializer.re\"",
          "1328:     if (!var_hash) return 0;",
          "1330:  return object_common2(UNSERIALIZE_PASSTHRU,",
          "1331:    object_common1(UNSERIALIZE_PASSTHRU, ZEND_STANDARD_CLASS_DEF_PTR));",
          "1332: }",
          "1333: #line 1334 \"ext/standard/var_unserializer.c\"",
          "1334: yy94:",
          "1335:  ++YYCURSOR;",
          "1336: #line 671 \"ext/standard/var_unserializer.re\"",
          "1337:  {",
          "1338:  size_t len, maxlen;",
          "1339:  char *str;",
          "1341:  len = parse_uiv(start + 2);",
          "1342:  maxlen = max - YYCURSOR;",
          "1343:  if (maxlen < len) {",
          "1348:  str = (char*)YYCURSOR;",
          "1350:  YYCURSOR += len;",
          "1352:  if (*(YYCURSOR) != '\"') {",
          "1357:  if (*(YYCURSOR + 1) != ';') {",
          "1359:   return 0;",
          "1362:  YYCURSOR += 2;",
          "1365:  ZVAL_STRINGL(rval, str, len);",
          "1368: #line 1369 \"ext/standard/var_unserializer.c\"",
          "1372:  if (yych <= '9') goto yy89;",
          "1373:  goto yy18;",
          "1376: #line 646 \"ext/standard/var_unserializer.re\"",
          "1380:  if (!strncmp((char*)start + 2, \"NAN\", 3)) {",
          "1381:   ZVAL_DOUBLE(rval, php_get_nan());",
          "1382:  } else if (!strncmp((char*)start + 2, \"INF\", 3)) {",
          "1383:   ZVAL_DOUBLE(rval, php_get_inf());",
          "1384:  } else if (!strncmp((char*)start + 2, \"-INF\", 4)) {",
          "1385:   ZVAL_DOUBLE(rval, -php_get_inf());",
          "1387:   ZVAL_NULL(rval);",
          "1392: #line 1393 \"ext/standard/var_unserializer.c\"",
          "1394: #line 921 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------"
        ],
        "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re": [
          "File: ext/standard/var_unserializer.re -> ext/standard/var_unserializer.re",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"ext/standard/php_var.h\"",
          "23: #include \"php_incomplete_class.h\"",
          "26: #define VAR_ENTRIES_MAX 1024",
          "27: #define VAR_ENTRIES_DBG 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: struct php_unserialize_data {",
          "26:  void *first;",
          "27:  void *last;",
          "28:  void *first_dtor;",
          "29:  void *last_dtor;",
          "30: };",
          "32: PHPAPI php_unserialize_data_t php_var_unserialize_init() {",
          "33:  php_unserialize_data_t d;",
          "35:  if (BG(serialize_lock) || !BG(unserialize).level) {",
          "36:   d = ecalloc(1, sizeof(struct php_unserialize_data));",
          "37:   if (!BG(serialize_lock)) {",
          "38:    BG(unserialize).data = d;",
          "39:    BG(unserialize).level = 1;",
          "40:   }",
          "41:  } else {",
          "42:   d = BG(unserialize).data;",
          "43:   ++BG(unserialize).level;",
          "44:  }",
          "45:  return d;",
          "46: }",
          "48: PHPAPI void php_var_unserialize_destroy(php_unserialize_data_t d) {",
          "50:  if (BG(serialize_lock) || BG(unserialize).level == 1) {",
          "51:   var_destroy(&d);",
          "52:   efree(d);",
          "53:  }",
          "54:  if (!BG(serialize_lock) && !--BG(unserialize).level) {",
          "55:   BG(unserialize).data = NULL;",
          "56:  }",
          "57: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "887189ca31eeac5f1f7dbcaf54405de0dc432f2d",
      "candidate_info": {
        "commit_hash": "887189ca31eeac5f1f7dbcaf54405de0dc432f2d",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/887189ca31eeac5f1f7dbcaf54405de0dc432f2d",
        "files": [
          "Zend/zend.c",
          "Zend/zend_API.c",
          "Zend/zend_API.h",
          "Zend/zend_builtin_functions.c",
          "Zend/zend_execute.c",
          "Zend/zend_execute_API.c",
          "Zend/zend_gc.c",
          "Zend/zend_hash.c",
          "Zend/zend_hash.h",
          "Zend/zend_object_handlers.c",
          "Zend/zend_objects.c",
          "Zend/zend_variables.c",
          "Zend/zend_vm_def.h",
          "Zend/zend_vm_execute.h",
          "ext/reflection/php_reflection.c",
          "ext/spl/spl_array.c",
          "ext/standard/array.c",
          "ext/standard/basic_functions.c",
          "ext/standard/http.c",
          "ext/standard/http_fopen_wrapper.c",
          "ext/standard/var.c",
          "ext/standard/var_unserializer.c",
          "ext/standard/var_unserializer.re",
          "main/main.c",
          "main/php_variables.c"
        ],
        "message": "Refactored IS_INDIRECT usage for CV and object properties to support HashTable resizing",
        "before_after_code_files": [
          "Zend/zend.c||Zend/zend.c",
          "Zend/zend_API.c||Zend/zend_API.c",
          "Zend/zend_API.h||Zend/zend_API.h",
          "Zend/zend_builtin_functions.c||Zend/zend_builtin_functions.c",
          "Zend/zend_execute.c||Zend/zend_execute.c",
          "Zend/zend_execute_API.c||Zend/zend_execute_API.c",
          "Zend/zend_gc.c||Zend/zend_gc.c",
          "Zend/zend_hash.c||Zend/zend_hash.c",
          "Zend/zend_hash.h||Zend/zend_hash.h",
          "Zend/zend_object_handlers.c||Zend/zend_object_handlers.c",
          "Zend/zend_objects.c||Zend/zend_objects.c",
          "Zend/zend_variables.c||Zend/zend_variables.c",
          "Zend/zend_vm_def.h||Zend/zend_vm_def.h",
          "ext/reflection/php_reflection.c||ext/reflection/php_reflection.c",
          "ext/spl/spl_array.c||ext/spl/spl_array.c",
          "ext/standard/array.c||ext/standard/array.c",
          "ext/standard/basic_functions.c||ext/standard/basic_functions.c",
          "ext/standard/http.c||ext/standard/http.c",
          "ext/standard/http_fopen_wrapper.c||ext/standard/http_fopen_wrapper.c",
          "ext/standard/var.c||ext/standard/var.c",
          "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
          "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re",
          "main/main.c||main/main.c",
          "main/php_variables.c||main/php_variables.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
            "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
          ],
          "candidate": [
            "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
            "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
          ]
        }
      },
      "candidate_diff": {
        "Zend/zend.c||Zend/zend.c": [
          "File: Zend/zend.c -> Zend/zend.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:  indent += PRINT_ZVAL_INDENT;",
          "145:  zend_hash_internal_pointer_reset_ex(ht, &iterator);",
          "146:  while ((tmp = zend_hash_get_current_data_ex(ht, &iterator)) != NULL) {",
          "147:   for (i = 0; i < indent; i++) {",
          "148:    ZEND_PUTS_EX(\" \");",
          "149:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147:   if (Z_TYPE_P(tmp) == IS_INDIRECT) {",
          "148:    tmp = Z_INDIRECT_P(tmp);",
          "149:    if (Z_TYPE_P(tmp) == IS_UNDEF) {",
          "150:     zend_hash_move_forward_ex(ht, &iterator);",
          "151:     continue;",
          "152:    }",
          "153:   }",
          "",
          "---------------"
        ],
        "Zend/zend_API.c||Zend/zend_API.c": [
          "File: Zend/zend_API.c -> Zend/zend_API.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1230: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1234: {",
          "1235:  object->properties = properties;",
          "1236:  if (object->ce->default_properties_count) {",
          "1237:   HashPosition pos;",
          "1238:      zval *prop, tmp;",
          "1239:      zend_string *key;",
          "1240:      ulong num_key;",
          "1241:      zend_property_info *property_info;",
          "1243:   for (zend_hash_internal_pointer_reset_ex(properties, &pos);",
          "1244:        (prop = zend_hash_get_current_data_ex(properties, &pos)) != NULL &&",
          "1245:        zend_hash_get_current_key_ex(properties, &key, &num_key, 0, &pos) == HASH_KEY_IS_STRING;",
          "1246:        zend_hash_move_forward_ex(properties, &pos)) {",
          "1248:       ZVAL_STR(&tmp, key);",
          "1249:    property_info = zend_get_property_info(object->ce, &tmp, 1 TSRMLS_CC);",
          "1250:    if (property_info &&",
          "1251:        (property_info->flags & ZEND_ACC_STATIC) == 0 &&",
          "1252:        property_info->offset >= 0) {",
          "1253:     ZVAL_COPY_VALUE(&object->properties_table[property_info->offset], prop);",
          "1254:     ZVAL_INDIRECT(prop, &object->properties_table[property_info->offset]);",
          "1255:    }",
          "1256:   }",
          "1257:  }",
          "1258: }",
          "1262: {",
          "1263:  HashPosition pos;",
          "1264:     zval *prop, tmp;",
          "1265:     zend_string *key;",
          "1266:     ulong num_key;",
          "1267:     zend_property_info *property_info;",
          "1269:  for (zend_hash_internal_pointer_reset_ex(properties, &pos);",
          "1270:       (prop = zend_hash_get_current_data_ex(properties, &pos)) != NULL &&",
          "1271:       zend_hash_get_current_key_ex(properties, &key, &num_key, 0, &pos) == HASH_KEY_IS_STRING;",
          "1272:       zend_hash_move_forward_ex(properties, &pos)) {",
          "1274:      ZVAL_STR(&tmp, key);",
          "1275:   property_info = zend_get_property_info(object->ce, &tmp, 1 TSRMLS_CC);",
          "1276:   if (property_info &&",
          "1277:       (property_info->flags & ZEND_ACC_STATIC) == 0 &&",
          "1278:       property_info->offset >= 0) {",
          "1279:       zval_ptr_dtor(&object->properties_table[property_info->offset]);",
          "1280:    ZVAL_COPY_VALUE(&object->properties_table[property_info->offset], prop);",
          "1281:    zval_add_ref(&object->properties_table[property_info->offset]);",
          "1282:    if (object->properties) {",
          "1283:     ZVAL_INDIRECT(&tmp, &object->properties_table[property_info->offset]);",
          "1284:     prop = zend_hash_update(object->properties, key, &tmp);",
          "1285:    }",
          "1286:   } else {",
          "1287:    if (!object->properties) {",
          "1288:     rebuild_object_properties(object);",
          "1289:    }",
          "1290:    prop = zend_hash_update(object->properties, key, prop);",
          "1291:    zval_add_ref(prop);",
          "1292:   }",
          "1293:  }",
          "1294: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1248:  if (class_type->create_object == NULL) {",
          "1249:   ZVAL_OBJ(arg, zend_objects_new(class_type TSRMLS_CC));",
          "1250:   if (properties) {",
          "1253:   } else {",
          "1254:    object_properties_init(Z_OBJ_P(arg), class_type);",
          "1255:   }",
          "",
          "[Removed Lines]",
          "1251:    Z_OBJ_P(arg)->properties = properties;",
          "",
          "[Added Lines]",
          "1315:    object_properties_init_ex(Z_OBJ_P(arg), properties);",
          "",
          "---------------"
        ],
        "Zend/zend_API.h||Zend/zend_API.h": [
          "File: Zend/zend_API.h -> Zend/zend_API.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "366: ZEND_API int _object_init_ex(zval *arg, zend_class_entry *ce ZEND_FILE_LINE_DC TSRMLS_DC);",
          "367: ZEND_API int _object_and_properties_init(zval *arg, zend_class_entry *ce, HashTable *properties ZEND_FILE_LINE_DC TSRMLS_DC);",
          "368: ZEND_API void object_properties_init(zend_object *object, zend_class_entry *class_type);",
          "370: ZEND_API void zend_merge_properties(zval *obj, HashTable *properties, int destroy_ht TSRMLS_DC);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "369: ZEND_API void object_properties_init_ex(zend_object *object, HashTable *properties);",
          "370: ZEND_API void object_properties_load(zend_object *object, HashTable *properties);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "516: ZEND_API int zend_set_hash_symbol(zval *symbol, const char *name, int name_length, zend_bool is_ref, int num_symbol_tables, ...);",
          "520: ZEND_API int zend_delete_global_variable(zend_string *name TSRMLS_DC);",
          "524: ZEND_API void zend_rebuild_symbol_table(TSRMLS_D);",
          "526: ZEND_API zend_string *zend_find_alias_name(zend_class_entry *ce, zend_string *name);",
          "527: ZEND_API zend_string *zend_resolve_method_name(zend_class_entry *ce, zend_function *f);",
          "",
          "[Removed Lines]",
          "518: ZEND_API void zend_delete_variable(zend_execute_data *ex, HashTable *ht, zend_string *name TSRMLS_DC);",
          "522: ZEND_API void zend_reset_all_cv(zend_array *symbol_table TSRMLS_DC);",
          "",
          "[Added Lines]",
          "523: ZEND_API void zend_attach_symbol_table(TSRMLS_D);",
          "524: ZEND_API void zend_detach_symbol_table(TSRMLS_D);",
          "525: ZEND_API int zend_set_local_var(const char *name, int len, zval *value, int force TSRMLS_DC);",
          "",
          "---------------"
        ],
        "Zend/zend_builtin_functions.c||Zend/zend_builtin_functions.c": [
          "File: Zend/zend_builtin_functions.c -> Zend/zend_builtin_functions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "593:   zend_error(E_WARNING,\"Variable passed to each() is not an array or object\");",
          "594:   return;",
          "595:  }",
          "599:  }",
          "600:  array_init(return_value);",
          "",
          "[Removed Lines]",
          "596:  entry = zend_hash_get_current_data(target_hash);",
          "597:  if (!entry) {",
          "598:   RETURN_FALSE;",
          "",
          "[Added Lines]",
          "596:  while (1) {",
          "597:   entry = zend_hash_get_current_data(target_hash);",
          "598:   if (!entry) {",
          "599:    RETURN_FALSE;",
          "600:   } else if (Z_TYPE_P(entry) == IS_INDIRECT) {",
          "601:    entry = Z_INDIRECT_P(entry);",
          "602:    if (Z_TYPE_P(entry) == IS_UNDEF) {",
          "603:     zend_hash_move_forward(target_hash);",
          "604:     continue;",
          "605:    }",
          "606:   }",
          "607:   break;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "999:  zend_hash_internal_pointer_reset_ex(properties, &pos);",
          "1001:  while ((value = zend_hash_get_current_data_ex(properties, &pos)) != NULL) {",
          "1002:   if (zend_hash_get_current_key_ex(properties, &key, &num_index, 0, &pos) == HASH_KEY_IS_STRING) {",
          "1003:    if (zend_check_property_access(zobj, key TSRMLS_CC) == SUCCESS) {",
          "1004:     zend_unmangle_property_name_ex(key->val, key->len, &class_name, &prop_name, (int*) &prop_len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1011:   if (Z_TYPE_P(value) == IS_INDIRECT) {",
          "1012:    value = Z_INDIRECT_P(value);",
          "1013:    if (Z_TYPE_P(value) == IS_UNDEF) {",
          "1014:     zend_hash_move_forward_ex(properties, &pos);",
          "1015:     continue;",
          "1016:    }",
          "1017:   }",
          "",
          "---------------"
        ],
        "Zend/zend_execute.c||Zend/zend_execute.c": [
          "File: Zend/zend_execute.c -> Zend/zend_execute.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "207: static zend_never_inline zval *_get_zval_cv_lookup(zval *ptr, zend_uint var, int type TSRMLS_DC)",
          "208: {",
          "220:  switch (type) {",
          "221:   case BP_VAR_R:",
          "222:   case BP_VAR_UNSET:",
          "223:    zend_error(E_NOTICE, \"Undefined variable: %s\", cv->val);",
          "225:   case BP_VAR_IS:",
          "227:   case BP_VAR_RW:",
          "228:    zend_error(E_NOTICE, \"Undefined variable: %s\", cv->val);",
          "230:   case BP_VAR_W:",
          "238:    break;",
          "239:  }",
          "241: }",
          "243: static zend_never_inline zval *_get_zval_cv_lookup_BP_VAR_R(zval *ptr, zend_uint var TSRMLS_DC)",
          "244: {",
          "245:  zend_string *cv = CV_DEF_OF(var);",
          "256:  zend_error(E_NOTICE, \"Undefined variable: %s\", cv->val);",
          "257:  return &EG(uninitialized_zval);",
          "",
          "[Removed Lines]",
          "209:  zend_string *cv = CV_DEF_OF(var);",
          "210:  zval *ret = NULL;",
          "212:  if (EG(active_symbol_table)) {",
          "213:   ret = zend_hash_find(&EG(active_symbol_table)->ht, cv);",
          "214:   if (ret) {",
          "215:    ZVAL_INDIRECT(ptr, ret);",
          "216:    return ret;",
          "217:   }",
          "218:  }",
          "226:    return &EG(uninitialized_zval);",
          "231:    if (EG(active_symbol_table)) {",
          "232:     ret = zend_hash_update(&EG(active_symbol_table)->ht, cv, ret);",
          "233:     ZVAL_INDIRECT(ptr, ret);",
          "234:    } else {",
          "235:     ZVAL_NULL(ptr);",
          "236:     ret = ptr;",
          "237:    }",
          "240:  return ret;",
          "246:  zval *ret = NULL;",
          "248:  if (EG(active_symbol_table)) {",
          "249:   ret = zend_hash_find(&EG(active_symbol_table)->ht, cv);",
          "250:   if (ret) {",
          "251:    ZVAL_INDIRECT(ptr, ret);",
          "252:    return ret;",
          "253:   }",
          "254:  }",
          "",
          "[Added Lines]",
          "209:  zend_string *cv;",
          "214:    cv = CV_DEF_OF(var);",
          "218:    ptr = &EG(uninitialized_zval);",
          "219:    break;",
          "221:    cv = CV_DEF_OF(var);",
          "225:    ZVAL_NULL(ptr);",
          "228:  return ptr;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "260: static zend_never_inline zval *_get_zval_cv_lookup_BP_VAR_UNSET(zval *ptr, zend_uint var TSRMLS_DC)",
          "261: {",
          "262:  zend_string *cv = CV_DEF_OF(var);",
          "273:  zend_error(E_NOTICE, \"Undefined variable: %s\", cv->val);",
          "274:  return &EG(uninitialized_zval);",
          "",
          "[Removed Lines]",
          "263:  zval *ret;",
          "265:  if (EG(active_symbol_table)) {",
          "266:   ret = zend_hash_find(&EG(active_symbol_table)->ht, cv);",
          "267:   if (ret) {",
          "268:    ZVAL_INDIRECT(ptr, ret);",
          "269:    return ret;",
          "270:   }",
          "271:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "277: static zend_never_inline zval *_get_zval_cv_lookup_BP_VAR_IS(zval *ptr, zend_uint var TSRMLS_DC)",
          "278: {",
          "290:  return &EG(uninitialized_zval);",
          "291: }",
          "293: static zend_never_inline zval *_get_zval_cv_lookup_BP_VAR_RW(zval *ptr, zend_uint var TSRMLS_DC)",
          "294: {",
          "295:  zend_string *cv = CV_DEF_OF(var);",
          "313: }",
          "315: static zend_never_inline zval *_get_zval_cv_lookup_BP_VAR_W(zval *ptr, zend_uint var TSRMLS_DC)",
          "316: {",
          "333: }",
          "335: static zend_always_inline zval *_get_zval_ptr_cv(zend_uint var, int type TSRMLS_DC)",
          "",
          "[Removed Lines]",
          "279:  zend_string *cv = CV_DEF_OF(var);",
          "280:  zval *ret;",
          "282:  if (EG(active_symbol_table)) {",
          "283:   ret = zend_hash_find(&EG(active_symbol_table)->ht, cv);",
          "284:   if (ret) {",
          "285:    ZVAL_INDIRECT(ptr, ret);",
          "286:    return ret;",
          "287:   }",
          "288:  }",
          "296:  zval *ret;",
          "298:  if (EG(active_symbol_table)) {",
          "299:   ret = zend_hash_find(&EG(active_symbol_table)->ht, cv);",
          "300:   if (ret) {",
          "301:    ZVAL_INDIRECT(ptr, ret);",
          "302:    return ret;",
          "303:   }",
          "304:   ret = zend_hash_update(&EG(active_symbol_table)->ht, cv, &EG(uninitialized_zval));",
          "305:   ZVAL_INDIRECT(ptr, ret);",
          "306:   zend_error(E_NOTICE, \"Undefined variable: %s\", cv->val);",
          "307:   return ret;",
          "308:  } else {",
          "309:   ZVAL_NULL(ptr);",
          "310:   zend_error(E_NOTICE, \"Undefined variable: %s\", cv->val);",
          "311:   return ptr;",
          "312:  }",
          "317:  zend_string *cv = CV_DEF_OF(var);",
          "318:  zval *ret;",
          "320:  if (EG(active_symbol_table)) {",
          "321:   ret = zend_hash_find(&EG(active_symbol_table)->ht, cv);",
          "322:   if (ret) {",
          "323:    ZVAL_INDIRECT(ptr, ret);",
          "324:    return ret;",
          "325:   }",
          "326:   ret = zend_hash_update(&EG(active_symbol_table)->ht, cv, &EG(uninitialized_zval));",
          "327:   ZVAL_INDIRECT(ptr, ret);",
          "328:   return ret;",
          "329:  } else {",
          "330:   ZVAL_NULL(ptr);",
          "331:   return ptr;",
          "332:  }",
          "",
          "[Added Lines]",
          "256:  ZVAL_NULL(ptr);",
          "257:  zend_error(E_NOTICE, \"Undefined variable: %s\", cv->val);",
          "258:  return ptr;",
          "263:  ZVAL_NULL(ptr);",
          "264:  return ptr;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "339:  if (UNEXPECTED(Z_TYPE_P(ret) == IS_UNDEF)) {",
          "340:   return _get_zval_cv_lookup(ret, var, type TSRMLS_CC);",
          "343:  }",
          "344:  return ret;",
          "345: }",
          "",
          "[Removed Lines]",
          "341:  } else if (UNEXPECTED(Z_TYPE_P(ret) == IS_INDIRECT)) {",
          "342:   ret = Z_INDIRECT_P(ret);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "351:  if (UNEXPECTED(Z_TYPE_P(ret) == IS_UNDEF)) {",
          "352:   return _get_zval_cv_lookup(ret, var, type TSRMLS_CC);",
          "355:  }",
          "356:  if (UNEXPECTED(Z_TYPE_P(ret) == IS_REFERENCE)) {",
          "357:   ret = Z_REFVAL_P(ret);",
          "",
          "[Removed Lines]",
          "353:  } else if (UNEXPECTED(Z_TYPE_P(ret) == IS_INDIRECT)) {",
          "354:   ret = Z_INDIRECT_P(ret);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "366:  if (UNEXPECTED(Z_TYPE_P(ret) == IS_UNDEF)) {",
          "367:   return _get_zval_cv_lookup_BP_VAR_R(ret, var TSRMLS_CC);",
          "370:  }",
          "371:  return ret;",
          "372: }",
          "",
          "[Removed Lines]",
          "368:  } else if (UNEXPECTED(Z_TYPE_P(ret) == IS_INDIRECT)) {",
          "369:   ret = Z_INDIRECT_P(ret);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "378:  if (UNEXPECTED(Z_TYPE_P(ret) == IS_UNDEF)) {",
          "379:   return _get_zval_cv_lookup_BP_VAR_R(ret, var TSRMLS_CC);",
          "382:  }",
          "383:  if (UNEXPECTED(Z_TYPE_P(ret) == IS_REFERENCE)) {",
          "384:   ret = Z_REFVAL_P(ret);",
          "",
          "[Removed Lines]",
          "380:  } else if (UNEXPECTED(Z_TYPE_P(ret) == IS_INDIRECT)) {",
          "381:   ret = Z_INDIRECT_P(ret);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "393:  if (UNEXPECTED(Z_TYPE_P(ret) == IS_UNDEF)) {",
          "394:   return _get_zval_cv_lookup_BP_VAR_UNSET(ret, var TSRMLS_CC);",
          "397:  }",
          "398:  return ret;",
          "399: }",
          "",
          "[Removed Lines]",
          "395:  } else if (UNEXPECTED(Z_TYPE_P(ret) == IS_INDIRECT)) {",
          "396:   ret = Z_INDIRECT_P(ret);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "405:  if (UNEXPECTED(Z_TYPE_P(ret) == IS_UNDEF)) {",
          "406:   return _get_zval_cv_lookup_BP_VAR_UNSET(ret, var TSRMLS_CC);",
          "409:  }",
          "410:  if (UNEXPECTED(Z_TYPE_P(ret) == IS_REFERENCE)) {",
          "411:   ret = Z_REFVAL_P(ret);",
          "",
          "[Removed Lines]",
          "407:  } else if (UNEXPECTED(Z_TYPE_P(ret) == IS_INDIRECT)) {",
          "408:   ret = Z_INDIRECT_P(ret);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "420:  if (UNEXPECTED(Z_TYPE_P(ret) == IS_UNDEF)) {",
          "421:   return _get_zval_cv_lookup_BP_VAR_IS(ret, var TSRMLS_CC);",
          "424:  }",
          "425:  return ret;",
          "426: }",
          "",
          "[Removed Lines]",
          "422:  } else if (UNEXPECTED(Z_TYPE_P(ret) == IS_INDIRECT)) {",
          "423:   ret = Z_INDIRECT_P(ret);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "432:  if (UNEXPECTED(Z_TYPE_P(ret) == IS_UNDEF)) {",
          "433:   return _get_zval_cv_lookup_BP_VAR_IS(ret, var TSRMLS_CC);",
          "436:  }",
          "437:  if (UNEXPECTED(Z_TYPE_P(ret) == IS_REFERENCE)) {",
          "438:   ret = Z_REFVAL_P(ret);",
          "",
          "[Removed Lines]",
          "434:  } else if (UNEXPECTED(Z_TYPE_P(ret) == IS_INDIRECT)) {",
          "435:   ret = Z_INDIRECT_P(ret);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "447:  if (UNEXPECTED(Z_TYPE_P(ret) == IS_UNDEF)) {",
          "448:   return _get_zval_cv_lookup_BP_VAR_RW(ret, var TSRMLS_CC);",
          "451:  }",
          "452:  return ret;",
          "453: }",
          "",
          "[Removed Lines]",
          "449:  } else if (UNEXPECTED(Z_TYPE_P(ret) == IS_INDIRECT)) {",
          "450:   ret = Z_INDIRECT_P(ret);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "459:  if (UNEXPECTED(Z_TYPE_P(ret) == IS_UNDEF)) {",
          "460:   return _get_zval_cv_lookup_BP_VAR_RW(ret, var TSRMLS_CC);",
          "463:  }",
          "464:  if (UNEXPECTED(Z_TYPE_P(ret) == IS_REFERENCE)) {",
          "465:   ret = Z_REFVAL_P(ret);",
          "",
          "[Removed Lines]",
          "461:  } else if (UNEXPECTED(Z_TYPE_P(ret) == IS_INDIRECT)) {",
          "462:   ret = Z_INDIRECT_P(ret);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "474:  if (UNEXPECTED(Z_TYPE_P(ret) == IS_UNDEF)) {",
          "475:   return _get_zval_cv_lookup_BP_VAR_W(ret, var TSRMLS_CC);",
          "478:  }",
          "479:  return ret;",
          "480: }",
          "",
          "[Removed Lines]",
          "476:  } else if (UNEXPECTED(Z_TYPE_P(ret) == IS_INDIRECT)) {",
          "477:   ret = Z_INDIRECT_P(ret);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "486:  if (UNEXPECTED(Z_TYPE_P(ret) == IS_UNDEF)) {",
          "487:   return _get_zval_cv_lookup_BP_VAR_W(ret, var TSRMLS_CC);",
          "490:  }",
          "491:  if (UNEXPECTED(Z_TYPE_P(ret) == IS_REFERENCE)) {",
          "492:   ret = Z_REFVAL_P(ret);",
          "",
          "[Removed Lines]",
          "488:  } else if (UNEXPECTED(Z_TYPE_P(ret) == IS_INDIRECT)) {",
          "489:   ret = Z_INDIRECT_P(ret);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "774:     }",
          "775:     Z_ADDREF_P(object);",
          "776:     zend_error(E_WARNING, \"Creating default object from empty value\");",
          "781:     if (Z_REFCOUNT_P(object) == 1) {",
          "783:      zval_ptr_dtor(object);",
          "",
          "[Removed Lines]",
          "778:     if (Z_TYPE_P(object) == IS_INDIRECT) {",
          "779:      object = Z_INDIRECT_P(object);",
          "780:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "790:     Z_DELREF_P(object);",
          "791:    } else {",
          "792:     zend_error(E_WARNING, \"Creating default object from empty value\");",
          "797:    }",
          "798:    zval_dtor(object);",
          "799:    object_init(object);",
          "",
          "[Removed Lines]",
          "794:     if (Z_TYPE_P(object) == IS_INDIRECT) {",
          "795:      object = Z_INDIRECT_P(object);",
          "796:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1098:    }",
          "1099: fetch_string_dim:",
          "1100:    retval = zend_hash_find(ht, offset_key);",
          "1102:     switch (type) {",
          "1103:      case BP_VAR_R:",
          "1104:       zend_error(E_NOTICE, \"Undefined index: %s\", offset_key->val);",
          "",
          "[Removed Lines]",
          "1101:    if (retval == NULL) {",
          "",
          "[Added Lines]",
          "1002:    if (retval) {",
          "1003:     if (Z_TYPE_P(retval) == IS_INDIRECT) {",
          "1004:      retval = Z_INDIRECT_P(retval);",
          "1005:      if (Z_TYPE_P(retval) == IS_UNDEF) {",
          "1006:       switch (type) {",
          "1007:        case BP_VAR_R:",
          "1008:         zend_error(E_NOTICE, \"Undefined index: %s\", offset_key->val);",
          "1010:        case BP_VAR_UNSET:",
          "1011:        case BP_VAR_IS:",
          "1012:         retval = &EG(uninitialized_zval);",
          "1013:         break;",
          "1014:        case BP_VAR_RW:",
          "1015:         zend_error(E_NOTICE,\"Undefined index: %s\", offset_key->val);",
          "1017:        case BP_VAR_W:",
          "1018:         ZVAL_NULL(retval);",
          "1019:         break;",
          "1020:       }",
          "1021:      }",
          "1022:     }",
          "1023:    } else {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1247:      convert_to_long(&tmp);",
          "1248:      dim = &tmp;",
          "1249:     }",
          "1254:     ZVAL_STR_OFFSET(result, container, Z_LVAL_P(dim));",
          "1255:     if (!IS_INTERNED(Z_STR_P(container))) STR_ADDREF(Z_STR_P(container));",
          "1256:     return;",
          "",
          "[Removed Lines]",
          "1251:     if (Z_TYPE_P(container) == IS_INDIRECT) {",
          "1252:      container = Z_INDIRECT_P(container);",
          "1253:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1719:   op_array->run_time_cache = ecalloc(op_array->last_cache_slot, sizeof(void*));",
          "1720:  }",
          "1722:  if (op_array->this_var != -1 && Z_TYPE(EG(This)) != IS_UNDEF) {",
          "1732:  }",
          "1734:  EX(opline) = UNEXPECTED((op_array->fn_flags & ZEND_ACC_INTERACTIVE) != 0) && EG(start_op) ? EG(start_op) : op_array->opcodes;",
          "",
          "[Removed Lines]",
          "1723:   if (!EG(active_symbol_table)) {",
          "1724:    ZVAL_COPY(EX_VAR_NUM(op_array->this_var), &EG(This));",
          "1725:   } else {",
          "1726:    ZVAL_COPY(EX_VAR_NUM(op_array->this_var), &EG(This));",
          "1727:    zval *zv = zend_hash_str_add(&EG(active_symbol_table)->ht, \"this\", sizeof(\"this\")-1, EX_VAR(op_array->this_var));",
          "1728:    if (zv) {",
          "1729:     ZVAL_INDIRECT(EX_VAR_NUM(op_array->this_var), zv);",
          "1730:    }",
          "1731:   }",
          "",
          "[Added Lines]",
          "1640:  if (EG(active_symbol_table)) {",
          "1641:   zend_attach_symbol_table(TSRMLS_C);",
          "1642:  }",
          "1645:   ZVAL_COPY(EX_VAR_NUM(op_array->this_var), &EG(This));",
          "",
          "---------------"
        ],
        "Zend/zend_execute_API.c||Zend/zend_execute_API.c": [
          "File: Zend/zend_execute_API.c -> Zend/zend_execute_API.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "204: {",
          "205:  if (Z_TYPE_P(zv) == IS_OBJECT && Z_REFCOUNT_P(zv) == 1) {",
          "206:   return ZEND_HASH_APPLY_REMOVE;",
          "207:  } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205:  if (Z_TYPE_P(zv) == IS_INDIRECT) {",
          "206:   zv = Z_INDIRECT_P(zv);",
          "207:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "210: }",
          "214: {",
          "215:  zend_try {",
          "216:   int symbols;",
          "217:   do {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217: {",
          "218:  TSRMLS_FETCH();",
          "220:  if (Z_TYPE_P(zv) == IS_INDIRECT) {",
          "221:   zv = Z_INDIRECT_P(zv);",
          "222:  }",
          "223:  i_zval_ptr_dtor(zv ZEND_FILE_LINE_CC TSRMLS_CC);",
          "224: }",
          "229:  if (CG(unclean_shutdown)) {",
          "230:   EG(symbol_table).ht.pDestructor = zend_unclean_zval_ptr_dtor;",
          "231:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "246:   }",
          "248:   zend_llist_apply(&zend_extensions, (llist_apply_func_t) zend_extension_deactivator TSRMLS_CC);",
          "249:   zend_hash_graceful_reverse_destroy(&EG(symbol_table).ht);",
          "250:  } zend_end_try();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "267:   if (CG(unclean_shutdown)) {",
          "268:    EG(symbol_table).ht.pDestructor = zend_unclean_zval_ptr_dtor;",
          "269:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1638: }",
          "1679: {",
          "1700: }",
          "",
          "[Removed Lines]",
          "1642: {",
          "1643:  zend_execute_data *ex;",
          "1644:  int i;",
          "1646:  for (ex = EG(current_execute_data); ex; ex = ex->prev_execute_data) {",
          "1647:   if (ex->op_array && ex->symbol_table == symbol_table) {",
          "1648:    for (i = 0; i < ex->op_array->last_var; i++) {",
          "1649:     ZVAL_UNDEF(EX_VAR_NUM_2(ex, i));",
          "1650:    }",
          "1651:   }",
          "1652:  }",
          "1653: }",
          "1657: {",
          "1658:  if (zend_hash_del(ht, name) == SUCCESS) {",
          "1659:   while (ex && &ex->symbol_table->ht == ht) {",
          "1660:    int i;",
          "1662:    if (ex->op_array) {",
          "1663:     for (i = 0; i < ex->op_array->last_var; i++) {",
          "1664:      if (ex->op_array->vars[i]->h == name->h &&",
          "1665:       ex->op_array->vars[i]->len == name->len &&",
          "1666:       !memcmp(ex->op_array->vars[i]->val, name->val, name->len)) {",
          "1667:       ZVAL_UNDEF(EX_VAR_NUM_2(ex, i));",
          "1668:       break;",
          "1669:      }",
          "1670:     }",
          "1671:    }",
          "1672:    ex = ex->prev_execute_data;",
          "1673:   }",
          "1674:  }",
          "1675: }",
          "1680:  zend_execute_data *ex;",
          "1682:  if (zend_hash_del(&EG(symbol_table).ht, name) == SUCCESS) {",
          "1683:   for (ex = EG(current_execute_data); ex; ex = ex->prev_execute_data) {",
          "1684:    if (ex->op_array && ex->symbol_table == &EG(symbol_table)) {",
          "1685:     int i;",
          "1686:     for (i = 0; i < ex->op_array->last_var; i++) {",
          "1687:      if (ex->op_array->vars[i]->h == name->h &&",
          "1688:       ex->op_array->vars[i]->len == name->len &&",
          "1689:       !memcmp(ex->op_array->vars[i]->val, name->val, name->len)",
          "1690:      ) {",
          "1691:       ZVAL_UNDEF(EX_VAR_NUM_2(ex, i));",
          "1692:       break;",
          "1693:      }",
          "1694:     }",
          "1695:    }",
          "1696:   }",
          "1697:   return SUCCESS;",
          "1698:  }",
          "1699:  return FAILURE;",
          "",
          "[Added Lines]",
          "1664:     return zend_hash_del_ind(&EG(symbol_table).ht, name);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1736:        ZVAL_COPY_VALUE(EX_VAR_NUM_2(ex, ex->op_array->this_var), &EG(This));",
          "1737:     }",
          "1738:    for (i = 0; i < ex->op_array->last_var; i++) {",
          "1744:     }",
          "1745:    }",
          "1746:   }",
          "1747:  }",
          "1748: }",
          "",
          "[Removed Lines]",
          "1739:     if (Z_TYPE_P(EX_VAR_NUM_2(ex, i)) != IS_UNDEF) {",
          "1740:      zval *zv = zend_hash_update(&EG(active_symbol_table)->ht,",
          "1741:       ex->op_array->vars[i],",
          "1742:       EX_VAR_NUM_2(ex, i));",
          "1743:      ZVAL_INDIRECT(EX_VAR_NUM_2(ex, i), zv);",
          "",
          "[Added Lines]",
          "1704:     zval zv;",
          "1706:     ZVAL_INDIRECT(&zv, EX_VAR_NUM_2(ex, i));",
          "1707:     zend_hash_update(&EG(active_symbol_table)->ht,",
          "1708:      ex->op_array->vars[i], &zv);",
          "1709:    }",
          "1710:   }",
          "1711:  }",
          "1712: }",
          "1716: {",
          "1717:  int i;",
          "1718:  zend_execute_data *execute_data = EG(current_execute_data);",
          "1719:  zend_op_array *op_array = execute_data->op_array;",
          "1720:  HashTable *ht = &EG(active_symbol_table)->ht;",
          "1724:  for (i = 0; i < op_array->last_var; i++) {",
          "1725:   zval *zv = zend_hash_find(ht, op_array->vars[i]);",
          "1727:   if (zv) {",
          "1728:    if (Z_TYPE_P(zv) == IS_INDIRECT) {",
          "1729:     zval *val = Z_INDIRECT_P(zv);",
          "1730:     if (Z_TYPE_P(val) == IS_UNDEF) {",
          "1731:      ZVAL_UNDEF(EX_VAR_NUM(i));",
          "1732:     } else {",
          "1733:      ZVAL_COPY_VALUE(EX_VAR_NUM(i), val);",
          "1735:    } else {",
          "1736:     ZVAL_COPY_VALUE(EX_VAR_NUM(i), zv);",
          "1738:   } else {",
          "1739:    ZVAL_UNDEF(EX_VAR_NUM(i));",
          "1740:    zv = zend_hash_update(ht, op_array->vars[i], EX_VAR_NUM(i));",
          "1742:   ZVAL_INDIRECT(zv, EX_VAR_NUM(i));",
          "1748: {",
          "1749:  int i;",
          "1750:  zend_execute_data *execute_data = EG(current_execute_data);",
          "1751:  zend_op_array *op_array = execute_data->op_array;",
          "1752:  HashTable *ht = &EG(active_symbol_table)->ht;",
          "1755:  for (i = 0; i < op_array->last_var; i++) {",
          "1756:   zend_hash_update(ht, op_array->vars[i], EX_VAR_NUM(i));",
          "1757:   ZVAL_UNDEF(EX_VAR_NUM(i));",
          "1758:  }",
          "1759: }",
          "1763: {",
          "1764:  if (!EG(active_symbol_table)) {",
          "1765:   int i;",
          "1766:   zend_execute_data *execute_data = EG(current_execute_data);",
          "1767:   zend_op_array *op_array = execute_data->op_array;",
          "1768:   zend_ulong h = zend_hash_func(name, len);",
          "1770:   if (op_array) {",
          "1771:    for (i = 0; i < op_array->last_var; i++) {",
          "1772:     if (op_array->vars[i]->h == h &&",
          "1773:         op_array->vars[i]->len == len &&",
          "1774:         memcmp(op_array->vars[i]->val, name, len) == 0) {",
          "1775:      ZVAL_COPY_VALUE(EX_VAR_NUM(i), value);",
          "1776:      return SUCCESS;",
          "1777:     }",
          "1778:    }",
          "1779:   }",
          "1780:   if (force) {",
          "1781:    zend_rebuild_symbol_table(TSRMLS_C);",
          "1782:    if (EG(active_symbol_table)) {",
          "1783:     zend_hash_str_update(&EG(active_symbol_table)->ht, name, len, value);",
          "1784:    }",
          "1785:   } else {",
          "1786:    return FAILURE;",
          "1787:   }",
          "1788:  } else {",
          "1789:   return zend_hash_str_update_ind(&EG(active_symbol_table)->ht, name, len, value);",
          "1790:  }",
          "1791:  return SUCCESS;",
          "1792: }",
          "",
          "---------------"
        ],
        "Zend/zend_gc.c||Zend/zend_gc.c": [
          "File: Zend/zend_gc.c -> Zend/zend_gc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "557:    p = ht->arData + idx;",
          "558:    if (!Z_REFCOUNTED(p->val)) {",
          "561:      count++;",
          "562:     }",
          "563:     continue;",
          "",
          "[Removed Lines]",
          "560:     if (Z_TYPE(p->val) != IS_UNDEF) {",
          "",
          "[Added Lines]",
          "560:     if (Z_TYPE(p->val) != IS_UNDEF && Z_TYPE(p->val) != IS_INDIRECT) {",
          "",
          "---------------"
        ],
        "Zend/zend_hash.c||Zend/zend_hash.c": [
          "File: Zend/zend_hash.c -> Zend/zend_hash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "267:  p = zend_hash_find_bucket(ht, key);",
          "269:  if (p) {",
          "270:   if (flag & HASH_ADD) {",
          "271:    return NULL;",
          "272:   }",
          "273:   ZEND_ASSERT(&p->val != pData);",
          "274:   HANDLE_BLOCK_INTERRUPTIONS();",
          "275:   if (ht->pDestructor) {",
          "277:   }",
          "279:   HANDLE_UNBLOCK_INTERRUPTIONS();",
          "281:  }",
          "",
          "[Removed Lines]",
          "276:    ht->pDestructor(&p->val);",
          "278:   ZVAL_COPY_VALUE(&p->val, pData);",
          "280:   return &p->val;",
          "",
          "[Added Lines]",
          "270:   zval *data;",
          "276:   data = &p->val;",
          "277:   if ((flag & HASH_UPDATE_INDIRECT) && Z_TYPE_P(data) == IS_INDIRECT) {",
          "278:    data = Z_INDIRECT_P(data);",
          "279:   }",
          "282:    ht->pDestructor(data);",
          "284:   ZVAL_COPY_VALUE(data, pData);",
          "286:   return data;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "588:  return FAILURE;",
          "589: }",
          "591: ZEND_API int zend_hash_str_del(HashTable *ht, const char *str, int len)",
          "592: {",
          "593:  ulong h;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "597: ZEND_API int zend_hash_del_ind(HashTable *ht, zend_string *key)",
          "598: {",
          "599:  ulong h;",
          "600:  uint nIndex;",
          "601:  uint idx;",
          "602:  Bucket *p;",
          "603:  Bucket *prev = NULL;",
          "604: #ifdef ZEND_SIGNALS",
          "605:  TSRMLS_FETCH();",
          "606: #endif",
          "608:  IS_CONSISTENT(ht);",
          "610:  if (ht->flags & HASH_FLAG_PACKED) {",
          "611:   return FAILURE;",
          "612:  }",
          "614:  h = STR_HASH_VAL(key);",
          "615:  nIndex = h & ht->nTableMask;",
          "617:  idx = ht->arHash[nIndex];",
          "618:  while (idx != INVALID_IDX) {",
          "619:   p = ht->arData + idx;",
          "620:   if ((p->key == key) ||",
          "621:    (p->h == h &&",
          "622:        p->key &&",
          "623:        p->key->len == key->len &&",
          "624:        memcmp(p->key->val, key->val, key->len) == 0)) {",
          "625:    if (Z_TYPE(p->val) == IS_INDIRECT) {",
          "626:     zval *data = Z_INDIRECT(p->val);",
          "628:     if (Z_TYPE_P(data) == IS_UNDEF) {",
          "629:      return FAILURE;",
          "630:     } else {",
          "631:      if (ht->pDestructor) {",
          "632:       ht->pDestructor(data);",
          "633:      }",
          "634:      ZVAL_UNDEF(data);",
          "635:     }",
          "636:    } else {",
          "637:     HANDLE_BLOCK_INTERRUPTIONS();",
          "638:     _zend_hash_del_el_ex(ht, idx, p, prev);",
          "639:     HANDLE_UNBLOCK_INTERRUPTIONS();",
          "640:    }",
          "641:    return SUCCESS;",
          "642:   }",
          "643:   prev = p;",
          "644:   idx = p->val.u.next;",
          "645:  }",
          "646:  return FAILURE;",
          "647: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "604:  h = zend_inline_hash_func(str, len);",
          "605:  nIndex = h & ht->nTableMask;",
          "607:  idx = ht->arHash[nIndex];",
          "608:  while (idx != INVALID_IDX) {",
          "609:   p = ht->arData + idx;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "665:  idx = ht->arHash[nIndex];",
          "666:  while (idx != INVALID_IDX) {",
          "667:   p = ht->arData + idx;",
          "668:   if ((p->h == h)",
          "669:     && p->key",
          "670:     && (p->key->len == len)",
          "671:     && !memcmp(p->key->val, str, len)) {",
          "672:    if (Z_TYPE(p->val) == IS_INDIRECT) {",
          "673:     zval *data = Z_INDIRECT(p->val);",
          "675:     if (Z_TYPE_P(data) == IS_UNDEF) {",
          "676:      return FAILURE;",
          "677:     } else {",
          "678:      if (ht->pDestructor) {",
          "679:       ht->pDestructor(data);",
          "680:      }",
          "681:      ZVAL_UNDEF(data);",
          "682:     }",
          "683:    } else {",
          "684:     HANDLE_BLOCK_INTERRUPTIONS();",
          "685:     _zend_hash_del_el_ex(ht, idx, p, prev);",
          "686:     HANDLE_UNBLOCK_INTERRUPTIONS();",
          "687:    }",
          "688:    return SUCCESS;",
          "689:   }",
          "690:   prev = p;",
          "691:   idx = p->val.u.next;",
          "692:  }",
          "693:  return FAILURE;",
          "694: }",
          "696: ZEND_API int zend_hash_str_del_ind(HashTable *ht, const char *str, int len)",
          "697: {",
          "698:  ulong h;",
          "699:  uint nIndex;",
          "700:  uint idx;",
          "701:  Bucket *p;",
          "702:  Bucket *prev = NULL;",
          "703: #ifdef ZEND_SIGNALS",
          "704:  TSRMLS_FETCH();",
          "705: #endif",
          "707:  IS_CONSISTENT(ht);",
          "709:  h = zend_inline_hash_func(str, len);",
          "710:  nIndex = h & ht->nTableMask;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "914: {",
          "915:     uint idx;",
          "916:  Bucket *p;",
          "918:  zend_bool setTargetPointer;",
          "920:  IS_CONSISTENT(source);",
          "",
          "[Removed Lines]",
          "917:  zval *new_entry;",
          "",
          "[Added Lines]",
          "1022:  zval *new_entry, *data;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "928:   if (setTargetPointer && source->nInternalPointer == idx) {",
          "929:    target->nInternalPointer = INVALID_IDX;",
          "930:   }",
          "931:   if (p->key) {",
          "933:   } else {",
          "935:   }",
          "936:   if (pCopyConstructor) {",
          "937:    pCopyConstructor(new_entry);",
          "",
          "[Removed Lines]",
          "932:    new_entry = zend_hash_update(target, p->key, &p->val);",
          "934:    new_entry = zend_hash_index_update(target, p->h, &p->val);",
          "",
          "[Added Lines]",
          "1037:   data = &p->val;",
          "1038:   if (Z_TYPE_P(data) == IS_INDIRECT) {",
          "1039:    data = Z_INDIRECT_P(data);",
          "1040:    if (Z_TYPE_P(data) == IS_UNDEF) {",
          "1041:     continue;",
          "1042:    }",
          "1043:   }",
          "1045:    new_entry = zend_hash_update(target, p->key, data);",
          "1047:    new_entry = zend_hash_index_update(target, p->h, data);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1551:  uint idx1, idx2;",
          "1552:  Bucket *p1, *p2 = NULL;",
          "1553:  int result;",
          "1556:  IS_CONSISTENT(ht1);",
          "1557:  IS_CONSISTENT(ht2);",
          "",
          "[Removed Lines]",
          "1554:  zval *pData2;",
          "",
          "[Added Lines]",
          "1667:  zval *pData1, *pData2;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1620:     }",
          "1621:    }",
          "1622:   }",
          "1624:   if (result != 0) {",
          "1625:    HASH_UNPROTECT_RECURSION(ht1);",
          "1626:    HASH_UNPROTECT_RECURSION(ht2);",
          "",
          "[Removed Lines]",
          "1623:   result = compar(&p1->val, pData2 TSRMLS_CC);",
          "",
          "[Added Lines]",
          "1736:   pData1 = &p1->val;",
          "1737:   if (Z_TYPE_P(pData1) == IS_INDIRECT) {",
          "1738:    pData1 = Z_INDIRECT_P(pData1);",
          "1739:   }",
          "1740:   if (Z_TYPE_P(pData2) == IS_INDIRECT) {",
          "1741:    pData2 = Z_INDIRECT_P(pData2);",
          "1742:   }",
          "1743:   if (Z_TYPE_P(pData1) == IS_UNDEF) {",
          "1744:    if (Z_TYPE_P(pData2) != IS_UNDEF) {",
          "1745:     return -1;",
          "1746:    }",
          "1747:   } else if (Z_TYPE_P(pData2) == IS_UNDEF) {",
          "1748:    return 1;",
          "1749:   } else {",
          "1750:    result = compar(pData1, pData2 TSRMLS_CC);",
          "1751:   }",
          "",
          "---------------"
        ],
        "Zend/zend_hash.h||Zend/zend_hash.h": [
          "File: Zend/zend_hash.h -> Zend/zend_hash.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #define HASH_KEY_NON_EXISTENT 3",
          "37: #define HASH_UPDATE_KEY_IF_NONE    0",
          "38: #define HASH_UPDATE_KEY_IF_BEFORE  1",
          "",
          "[Removed Lines]",
          "33: #define HASH_UPDATE   (1<<0)",
          "34: #define HASH_ADD   (1<<1)",
          "35: #define HASH_NEXT_INSERT (1<<2)",
          "",
          "[Added Lines]",
          "33: #define HASH_UPDATE    (1<<0)",
          "34: #define HASH_ADD    (1<<1)",
          "35: #define HASH_NEXT_INSERT  (1<<2)",
          "36: #define HASH_UPDATE_INDIRECT (1<<3)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74: ZEND_API zval *_zend_hash_add_or_update(HashTable *ht, zend_string *key, zval *pData, int flag ZEND_FILE_LINE_DC);",
          "75: #define zend_hash_update(ht, key, pData) \\",
          "76:   _zend_hash_add_or_update(ht, key, pData, HASH_UPDATE ZEND_FILE_LINE_CC)",
          "77: #define zend_hash_add(ht, key, pData) \\",
          "78:   _zend_hash_add_or_update(ht, key, pData, HASH_ADD ZEND_FILE_LINE_CC)",
          "80: ZEND_API zval *_zend_hash_str_add_or_update(HashTable *ht, const char *key, int len, zval *pData, int flag ZEND_FILE_LINE_DC);",
          "81: #define zend_hash_str_update(ht, key, len, pData) \\",
          "82:   _zend_hash_str_add_or_update(ht, key, len, pData, HASH_UPDATE ZEND_FILE_LINE_CC)",
          "83: #define zend_hash_str_add(ht, key, len, pData) \\",
          "84:   _zend_hash_str_add_or_update(ht, key, len, pData, HASH_ADD ZEND_FILE_LINE_CC)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78: #define zend_hash_update_ind(ht, key, pData) \\",
          "79:   _zend_hash_add_or_update(ht, key, pData, HASH_UPDATE | HASH_UPDATE_INDIRECT ZEND_FILE_LINE_CC)",
          "86: #define zend_hash_str_update_ind(ht, key, len, pData) \\",
          "87:   _zend_hash_str_add_or_update(ht, key, len, pData, HASH_UPDATE | HASH_UPDATE_INDIRECT ZEND_FILE_LINE_CC)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "119: ZEND_API int zend_hash_del(HashTable *ht, zend_string *key);",
          "120: ZEND_API int zend_hash_str_del(HashTable *ht, const char *key, int len);",
          "121: ZEND_API int zend_hash_index_del(HashTable *ht, ulong h);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "125: ZEND_API int zend_hash_del_ind(HashTable *ht, zend_string *key);",
          "127: ZEND_API int zend_hash_str_del_ind(HashTable *ht, const char *key, int len);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "244:  ZEND_HANDLE_NUMERIC_EX(key, length, idx, return func);     \\",
          "245: } while (0)",
          "247: static inline zval *zend_symtable_update(HashTable *ht, zend_string *key, zval *pData)",
          "248: {",
          "249:  ZEND_HANDLE_NUMERIC(key->val, key->len+1, zend_hash_index_update(ht, idx, pData));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "255: static inline zval *zend_hash_find_ind(const HashTable *ht, zend_string *key)",
          "256: {",
          "257:  zval *zv;",
          "259:  zv = zend_hash_find(ht, key);",
          "260:  return (zv && Z_TYPE_P(zv) == IS_INDIRECT) ? Z_INDIRECT_P(zv) : zv;",
          "261: }",
          "264: static inline zval *zend_hash_str_find_ind(const HashTable *ht, const char *str, int len)",
          "265: {",
          "266:  zval *zv;",
          "268:  zv = zend_hash_str_find(ht, str, len);",
          "269:  return (zv && Z_TYPE_P(zv) == IS_INDIRECT) ? Z_INDIRECT_P(zv) : zv;",
          "270: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "251: }",
          "254: static inline int zend_symtable_del(HashTable *ht, zend_string *key)",
          "255: {",
          "256:  ZEND_HANDLE_NUMERIC(key->val, key->len+1, zend_hash_index_del(ht, idx));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "280: static inline zval *zend_symtable_update_ind(HashTable *ht, zend_string *key, zval *pData)",
          "281: {",
          "282:  ZEND_HANDLE_NUMERIC(key->val, key->len+1, zend_hash_index_update(ht, idx, pData));",
          "283:  return zend_hash_update_ind(ht, key, pData);",
          "284: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "258: }",
          "261: static inline zval *zend_symtable_find(const HashTable *ht, zend_string *key)",
          "262: {",
          "263:  ZEND_HANDLE_NUMERIC(key->val, key->len+1, zend_hash_index_find(ht, idx));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "294: static inline int zend_symtable_del_ind(HashTable *ht, zend_string *key)",
          "295: {",
          "296:  ZEND_HANDLE_NUMERIC(key->val, key->len+1, zend_hash_index_del(ht, idx));",
          "297:  return zend_hash_del_ind(ht, key);",
          "298: }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "265: }",
          "268: static inline int zend_symtable_exists(HashTable *ht, zend_string *key)",
          "269: {",
          "270:  ZEND_HANDLE_NUMERIC(key->val, key->len+1, zend_hash_index_exists(ht, idx));",
          "271:  return zend_hash_exists(ht, key);",
          "272: }",
          "274: static inline zval *zend_symtable_str_update(HashTable *ht, const char *str, int len, zval *pData)",
          "275: {",
          "276:  ZEND_HANDLE_NUMERIC(str, len+1, zend_hash_index_update(ht, idx, pData));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "308: static inline zval *zend_symtable_find_ind(const HashTable *ht, zend_string *key)",
          "309: {",
          "310:  ZEND_HANDLE_NUMERIC(key->val, key->len+1, zend_hash_index_find(ht, idx));",
          "311:  return zend_hash_find_ind(ht, key);",
          "312: }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "278: }",
          "281: static inline int zend_symtable_str_del(HashTable *ht, const char *str, int len)",
          "282: {",
          "283:  ZEND_HANDLE_NUMERIC(str, len+1, zend_hash_index_del(ht, idx));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329: static inline zval *zend_symtable_str_update_ind(HashTable *ht, const char *str, int len, zval *pData)",
          "330: {",
          "331:  ZEND_HANDLE_NUMERIC(str, len+1, zend_hash_index_update(ht, idx, pData));",
          "332:  return zend_hash_str_update_ind(ht, str, len, pData);",
          "333: }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "285: }",
          "288: static inline zval *zend_symtable_str_find(HashTable *ht, const char *str, int len)",
          "289: {",
          "290:  ZEND_HANDLE_NUMERIC(str, len+1, zend_hash_index_find(ht, idx));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "343: static inline int zend_symtable_str_del_ind(HashTable *ht, const char *str, int len)",
          "344: {",
          "345:  ZEND_HANDLE_NUMERIC(str, len+1, zend_hash_index_del(ht, idx));",
          "346:  return zend_hash_str_del_ind(ht, str, len);",
          "347: }",
          "",
          "---------------"
        ],
        "Zend/zend_object_handlers.c||Zend/zend_object_handlers.c": [
          "File: Zend/zend_object_handlers.c -> Zend/zend_object_handlers.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:         (prop_info->flags & ZEND_ACC_STATIC) == 0 &&",
          "86:         prop_info->offset >= 0 &&",
          "87:         Z_TYPE(zobj->properties_table[prop_info->offset]) != IS_UNDEF) {",
          "92:     }",
          "93:    }",
          "94:    while (ce->parent && ce->parent->default_properties_count) {",
          "",
          "[Removed Lines]",
          "88:      zval *zv = zend_hash_add(zobj->properties, prop_info->name, &zobj->properties_table[prop_info->offset]);",
          "89:      if (EXPECTED(zv != NULL)) {",
          "90:       ZVAL_INDIRECT(&zobj->properties_table[prop_info->offset], zv);",
          "91:      }",
          "",
          "[Added Lines]",
          "88:      zval zv;",
          "90:      ZVAL_INDIRECT(&zv, &zobj->properties_table[prop_info->offset]);",
          "91:      zend_hash_add(zobj->properties, prop_info->name, &zv);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "101:          (prop_info->flags & ZEND_ACC_PRIVATE) != 0 &&",
          "102:          prop_info->offset >= 0 &&",
          "103:       Z_TYPE(zobj->properties_table[prop_info->offset]) != IS_UNDEF) {",
          "108:      }",
          "109:     }",
          "110:    }",
          "",
          "[Removed Lines]",
          "104:       zval *zv = zend_hash_add(zobj->properties, prop_info->name, &zobj->properties_table[prop_info->offset]);",
          "105:       if (EXPECTED(zv != NULL)) {",
          "106:        ZVAL_INDIRECT(&zobj->properties_table[prop_info->offset], zv);",
          "107:       }",
          "",
          "[Added Lines]",
          "104:       zval zv;",
          "106:       ZVAL_INDIRECT(&zv, &zobj->properties_table[prop_info->offset]);",
          "107:       zend_hash_add(zobj->properties, prop_info->name, &zv);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "133:  } else {",
          "134:   zend_object *zobj = Z_OBJ_P(object);",
          "145:  }",
          "146: }",
          "",
          "[Removed Lines]",
          "136:   if (zobj->properties) {",
          "139:    return zobj->properties;",
          "140:   } else {",
          "143:    return NULL;",
          "144:   }",
          "",
          "[Added Lines]",
          "138:   return zobj->properties;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "455:  if (EXPECTED(property_info != NULL)) {",
          "456:   if (EXPECTED((property_info->flags & ZEND_ACC_STATIC) == 0) &&",
          "459:    retval = &zobj->properties_table[property_info->offset];",
          "462:    }",
          "466:    retval = zend_hash_find(zobj->properties, property_info->name);",
          "467:    if (retval) goto exit;",
          "468:   }",
          "469:  }",
          "471:  if (zobj->ce->__get) {",
          "472:   long *guard = zend_get_property_guard(zobj, property_info, member);",
          "473:   if (!((*guard) & IN_GET)) {",
          "",
          "[Removed Lines]",
          "457:       property_info->offset >= 0 &&",
          "458:       Z_TYPE(zobj->properties_table[property_info->offset]) != IS_UNDEF) {",
          "460:    if (Z_TYPE_P(retval) == IS_INDIRECT) {",
          "461:     retval = Z_INDIRECT_P(retval);",
          "463:    goto exit;",
          "464:   }",
          "465:   if (UNEXPECTED(zobj->properties != NULL)) {",
          "",
          "[Added Lines]",
          "451:       property_info->offset >= 0) {",
          "453:    if (Z_TYPE_P(retval) != IS_UNDEF) {",
          "454:     goto exit;",
          "456:   } else if (UNEXPECTED(zobj->properties != NULL)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "566:  if (EXPECTED(property_info != NULL)) {",
          "567:   if (EXPECTED((property_info->flags & ZEND_ACC_STATIC) == 0) &&",
          "570:    variable_ptr = &zobj->properties_table[property_info->offset];",
          "573:    }",
          "577:    if ((variable_ptr = zend_hash_find(zobj->properties, property_info->name)) != NULL) {",
          "578: found:",
          "",
          "[Removed Lines]",
          "568:       property_info->offset >= 0 &&",
          "569:       Z_TYPE(zobj->properties_table[property_info->offset]) != IS_UNDEF) {",
          "571:    if (Z_TYPE_P(variable_ptr) == IS_INDIRECT) {",
          "572:     variable_ptr = Z_INDIRECT_P(variable_ptr);",
          "574:    goto found;",
          "575:   }",
          "576:   if (EXPECTED(zobj->properties != NULL)) {",
          "",
          "[Added Lines]",
          "561:       property_info->offset >= 0) {",
          "563:    if (Z_TYPE_P(variable_ptr) != IS_UNDEF) {",
          "564:     goto found;",
          "566:   } else if (EXPECTED(zobj->properties != NULL)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "607:       zval_ptr_dtor(&garbage);",
          "608:      }",
          "609:     }",
          "611:    }",
          "612:   }",
          "613:  }",
          "615:  if (zobj->ce->__set) {",
          "616:   long *guard = zend_get_property_guard(zobj, property_info, member);",
          "",
          "[Removed Lines]",
          "610:     return;",
          "",
          "[Added Lines]",
          "600:     goto exit;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "653:   if (EXPECTED((property_info->flags & ZEND_ACC_STATIC) == 0) &&",
          "654:       property_info->offset >= 0) {",
          "662:   } else {",
          "663:    if (!zobj->properties) {",
          "664:     rebuild_object_properties(zobj);",
          "",
          "[Removed Lines]",
          "656:    if (zobj->properties) {",
          "657:     zval *zv = zend_hash_update(zobj->properties, property_info->name, value);",
          "658:        ZVAL_INDIRECT(&zobj->properties_table[property_info->offset], zv);",
          "659:    } else {",
          "660:     ZVAL_COPY_VALUE(&zobj->properties_table[property_info->offset], value);",
          "661:    }",
          "",
          "[Added Lines]",
          "647:    ZVAL_COPY_VALUE(&zobj->properties_table[property_info->offset], value);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "667:   }",
          "668:  }",
          "670:  if (UNEXPECTED(Z_TYPE(tmp_member) != IS_UNDEF)) {",
          "671:   zval_ptr_dtor(&tmp_member);",
          "672:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "656: exit:",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "786:  if (EXPECTED(property_info != NULL)) {",
          "787:   if (EXPECTED((property_info->flags & ZEND_ACC_STATIC) == 0) &&",
          "790:    retval = &zobj->properties_table[property_info->offset];",
          "793:    }",
          "797:    retval = zend_hash_find(zobj->properties, property_info->name);",
          "798:    if (retval) goto exit;",
          "799:   }",
          "",
          "[Removed Lines]",
          "788:       property_info->offset >= 0 &&",
          "789:       Z_TYPE(zobj->properties_table[property_info->offset]) != IS_UNDEF) {",
          "791:    if (Z_TYPE_P(retval) == IS_INDIRECT) {",
          "792:     retval = Z_INDIRECT_P(retval);",
          "794:    goto exit;",
          "795:   }",
          "796:   if (UNEXPECTED(zobj->properties != NULL)) {",
          "",
          "[Added Lines]",
          "775:       property_info->offset >= 0) {",
          "777:    if (Z_TYPE_P(retval) != IS_UNDEF) {",
          "778:     goto exit;",
          "780:   } else if (UNEXPECTED(zobj->properties != NULL)) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "810:   ZVAL_NULL(&tmp);",
          "811:   if (EXPECTED((property_info->flags & ZEND_ACC_STATIC) == 0) &&",
          "812:       property_info->offset >= 0) {",
          "820:   } else {",
          "821:    if (!zobj->properties) {",
          "822:     rebuild_object_properties(zobj);",
          "",
          "[Removed Lines]",
          "813:    if (zobj->properties) {",
          "814:     retval = zend_hash_update(zobj->properties, property_info->name, &tmp);",
          "815:        ZVAL_INDIRECT(&zobj->properties_table[property_info->offset], retval);",
          "816:    } else {",
          "817:     retval = &zobj->properties_table[property_info->offset];",
          "818:     ZVAL_NULL(retval);",
          "819:    }",
          "",
          "[Added Lines]",
          "797:    retval = &zobj->properties_table[property_info->offset];",
          "798:    ZVAL_NULL(retval);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "855:  property_info = zend_get_property_info_quick(zobj->ce, member, (zobj->ce->__unset != NULL), key TSRMLS_CC);",
          "863:  }",
          "887:     }",
          "888:    }",
          "889:   }",
          "",
          "[Removed Lines]",
          "857:  if (EXPECTED(property_info != NULL) &&",
          "858:      EXPECTED((property_info->flags & ZEND_ACC_STATIC) == 0) &&",
          "859:      property_info->offset >= 0) {",
          "860:   zval_ptr_dtor(&zobj->properties_table[property_info->offset]);",
          "861:   ZVAL_UNDEF(&zobj->properties_table[property_info->offset]);",
          "862:   if (!zobj->properties) goto exit;",
          "864:  if (UNEXPECTED(!property_info) ||",
          "865:         !zobj->properties ||",
          "866:         UNEXPECTED(zend_hash_del(zobj->properties, property_info->name) == FAILURE)) {",
          "868:   if (zobj->ce->__unset) {",
          "869:    long *guard = zend_get_property_guard(zobj, property_info, member);",
          "870:    if (!((*guard) & IN_UNSET)) {",
          "872:     Z_ADDREF_P(object);",
          "873:     if (Z_ISREF_P(object)) {",
          "874:      SEPARATE_ZVAL(object);",
          "875:     }",
          "877:     zend_std_call_unsetter(object, member TSRMLS_CC);",
          "878:     (*guard) &= ~IN_UNSET;",
          "879:     zval_ptr_dtor(object);",
          "880:    } else {",
          "881:     if (Z_STRVAL_P(member)[0] == '\\0') {",
          "882:      if (Z_STRLEN_P(member) == 0) {",
          "883:       zend_error(E_ERROR, \"Cannot access empty property\");",
          "884:      } else {",
          "885:       zend_error(E_ERROR, \"Cannot access property started with '\\\\0'\");",
          "886:      }",
          "",
          "[Added Lines]",
          "836:  if (EXPECTED(property_info != NULL)) {",
          "837:   if (EXPECTED((property_info->flags & ZEND_ACC_STATIC) == 0) &&",
          "838:       property_info->offset >= 0) {",
          "839:    if (Z_TYPE(zobj->properties_table[property_info->offset]) != IS_UNDEF) {",
          "840:     zval_ptr_dtor(&zobj->properties_table[property_info->offset]);",
          "841:     ZVAL_UNDEF(&zobj->properties_table[property_info->offset]);",
          "842:     goto exit;",
          "843:    }",
          "844:   } else if (zobj->properties &&",
          "845:          UNEXPECTED(zend_hash_del(zobj->properties, property_info->name) != FAILURE)) {",
          "846:    goto exit;",
          "847:   }",
          "851:  if (zobj->ce->__unset) {",
          "852:   long *guard = zend_get_property_guard(zobj, property_info, member);",
          "853:   if (!((*guard) & IN_UNSET)) {",
          "855:    Z_ADDREF_P(object);",
          "856:    if (Z_ISREF_P(object)) {",
          "857:     SEPARATE_ZVAL(object);",
          "858:    }",
          "860:    zend_std_call_unsetter(object, member TSRMLS_CC);",
          "861:    (*guard) &= ~IN_UNSET;",
          "862:    zval_ptr_dtor(object);",
          "863:   } else {",
          "864:    if (Z_STRVAL_P(member)[0] == '\\0') {",
          "865:     if (Z_STRLEN_P(member) == 0) {",
          "866:      zend_error(E_ERROR, \"Cannot access empty property\");",
          "867:     } else {",
          "868:      zend_error(E_ERROR, \"Cannot access property started with '\\\\0'\");",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1382:      zval *p1 = &zobj1->properties_table[i];",
          "1383:      zval *p2 = &zobj2->properties_table[i];",
          "1391:      if (compare_function(&result, p1, p2 TSRMLS_CC)==FAILURE) {",
          "1392:       Z_OBJ_UNPROTECT_RECURSION(o1);",
          "1393:       Z_OBJ_UNPROTECT_RECURSION(o2);",
          "",
          "[Removed Lines]",
          "1385:      if (Z_TYPE_P(p1) == IS_INDIRECT) {",
          "1386:       p1 = Z_INDIRECT_P(p1);",
          "1387:      }",
          "1388:      if (Z_TYPE_P(p2) == IS_INDIRECT) {",
          "1389:       p1 = Z_INDIRECT_P(p2);",
          "1390:      }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1449:  if (EXPECTED(property_info != NULL)) {",
          "1450:   if (EXPECTED((property_info->flags & ZEND_ACC_STATIC) == 0) &&",
          "1453:    value = &zobj->properties_table[property_info->offset];",
          "1456:    }",
          "1461: found:",
          "1474:    }",
          "1475:   }",
          "1476:  }",
          "",
          "[Removed Lines]",
          "1451:       property_info->offset >= 0 &&",
          "1452:       Z_TYPE(zobj->properties_table[property_info->offset]) != IS_UNDEF) {",
          "1454:    if (Z_TYPE_P(value) == IS_INDIRECT) {",
          "1455:     value = Z_INDIRECT_P(value);",
          "1457:    goto found;",
          "1458:   }",
          "1459:   if (UNEXPECTED(zobj->properties != NULL)) {",
          "1460:    if ((value = zend_hash_find(zobj->properties, property_info->name)) != NULL) {",
          "1462:     switch (has_set_exists) {",
          "1463:      case 0:",
          "1464:       result = (Z_TYPE_P(value) != IS_NULL);",
          "1465:       break;",
          "1466:      default:",
          "1467:       result = zend_is_true(value TSRMLS_CC);",
          "1468:       break;",
          "1469:      case 2:",
          "1470:       result = 1;",
          "1471:       break;",
          "1472:     }",
          "1473:     goto exit;",
          "",
          "[Added Lines]",
          "1427:       property_info->offset >= 0) {",
          "1429:    if (Z_TYPE_P(value) != IS_UNDEF) {",
          "1430:     goto found;",
          "1432:   } else if (UNEXPECTED(zobj->properties != NULL) &&",
          "1433:              (value = zend_hash_find(zobj->properties, property_info->name)) != NULL) {",
          "1435:    switch (has_set_exists) {",
          "1436:     case 0:",
          "1437:      result = (Z_TYPE_P(value) != IS_NULL);",
          "1438:      break;",
          "1439:     default:",
          "1440:      result = zend_is_true(value TSRMLS_CC);",
          "1441:      break;",
          "1442:     case 2:",
          "1443:      result = 1;",
          "1444:      break;",
          "1446:    goto exit;",
          "",
          "---------------"
        ],
        "Zend/zend_objects.c||Zend/zend_objects.c": [
          "File: Zend/zend_objects.c -> Zend/zend_objects.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "142: {",
          "143:  int i;",
          "146:   for (i = 0; i < old_object->ce->default_properties_count; i++) {",
          "147:    zval_ptr_dtor(&new_object->properties_table[i]);",
          "148:    ZVAL_COPY(&new_object->properties_table[i], &old_object->properties_table[i]);",
          "149:   }",
          "151:   if (!new_object->properties) {",
          "152:    ALLOC_HASHTABLE(new_object->properties);",
          "153:    zend_hash_init(new_object->properties, 0, NULL, ZVAL_PTR_DTOR, 0);",
          "154:   }",
          "171:    }",
          "172:   }",
          "173:  }",
          "",
          "[Removed Lines]",
          "145:  if (!old_object->properties) {",
          "150:  } else {",
          "155:   zend_hash_copy(new_object->properties, old_object->properties, zval_add_ref_unref);",
          "156:   if (old_object->properties_table) {",
          "157:    HashPosition pos;",
          "158:    zval *prop;",
          "159:    zend_property_info *prop_info;",
          "161:    for (zend_hash_internal_pointer_reset_ex(&old_object->ce->properties_info, &pos);",
          "162:         (prop_info = zend_hash_get_current_data_ptr_ex(&old_object->ce->properties_info, &pos)) != NULL;",
          "163:         zend_hash_move_forward_ex(&old_object->ce->properties_info, &pos)) {",
          "164:     if ((prop_info->flags & ZEND_ACC_STATIC) == 0) {",
          "165:      if ((prop = zend_hash_find(new_object->properties, prop_info->name)) != NULL) {",
          "166:       ZVAL_INDIRECT(&new_object->properties_table[prop_info->offset], prop);",
          "167:      } else {",
          "168:       ZVAL_UNDEF(&new_object->properties_table[prop_info->offset]);",
          "169:      }",
          "170:     }",
          "",
          "[Added Lines]",
          "145:  if (old_object->ce->default_properties_count) {",
          "150:  }",
          "151:  if (old_object->properties) {",
          "152:   HashPosition pos;",
          "153:   zval *prop, new_prop;",
          "154:   ulong num_key;",
          "155:   zend_string *key;",
          "162:   for (zend_hash_internal_pointer_reset_ex(old_object->properties, &pos);",
          "163:        (prop = zend_hash_get_current_data_ex(old_object->properties, &pos)) != NULL;",
          "164:        zend_hash_move_forward_ex(old_object->properties, &pos)) {",
          "165:    if (Z_TYPE_P(prop) == IS_INDIRECT) {",
          "166:     ZVAL_INDIRECT(&new_prop, new_object->properties_table + (Z_INDIRECT_P(prop) - old_object->properties_table));",
          "167:    } else {",
          "168:     ZVAL_COPY_VALUE(&new_prop, prop);",
          "169:     zval_add_ref_unref(&new_prop);",
          "170:    }",
          "171:    switch (zend_hash_get_current_key_ex(old_object->properties, &key, &num_key, 0, &pos)) {",
          "172:     case HASH_KEY_IS_STRING:",
          "173:      zend_hash_update(new_object->properties, key, &new_prop);",
          "174:      break;",
          "175:     case HASH_KEY_IS_LONG:",
          "176:      zend_hash_index_update(new_object->properties, num_key, &new_prop);",
          "177:      break;",
          "",
          "---------------"
        ],
        "Zend/zend_variables.c||Zend/zend_variables.c": [
          "File: Zend/zend_variables.c -> Zend/zend_variables.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "336:     zend_error(E_NOTICE,\"Undefined variable: %s\", key->key->val);",
          "337:    }",
          "338:   } else {",
          "339:    if (is_ref) {",
          "340:     SEPARATE_ZVAL_TO_MAKE_IS_REF(p);",
          "341:     Z_ADDREF_P(p);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "339:    if (Z_TYPE_P(p) == IS_INDIRECT) {",
          "340:     p = Z_INDIRECT_P(p);",
          "341:     if (Z_TYPE_P(p) == IS_UNDEF) {",
          "342:      if (!is_ref) {",
          "343:       zend_error(E_NOTICE,\"Undefined variable: %s\", key->key->val);",
          "344:       p = &tmp;",
          "345:       ZVAL_NULL(&tmp);",
          "346:      } else {",
          "347:       ZVAL_NULL(p);",
          "348:      }",
          "349:     }",
          "350:    }",
          "",
          "---------------"
        ],
        "Zend/zend_vm_def.h||Zend/zend_vm_def.h": [
          "File: Zend/zend_vm_def.h -> Zend/zend_vm_def.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "340:   zend_error_noreturn(E_ERROR, \"Cannot use string offset as an object\");",
          "341:  }",
          "348:  if (UNEXPECTED(Z_TYPE_P(object) != IS_OBJECT)) {",
          "349:   make_real_object(object TSRMLS_CC);",
          "354:  }",
          "355:  if (UNEXPECTED(Z_ISREF_P(object))) {",
          "356:   object = Z_REFVAL_P(object);",
          "",
          "[Removed Lines]",
          "344:  if (OP1_TYPE == IS_CV && Z_TYPE_P(object) == IS_INDIRECT) {",
          "345:   object = Z_INDIRECT_P(object);",
          "346:  }",
          "351:   if (Z_TYPE_P(object) == IS_INDIRECT) {",
          "352:    object = Z_INDIRECT_P(object);",
          "353:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1048:   FREE_OP1();",
          "1049:  } else {",
          "1050:   target_symbol_table = zend_get_target_symbol_table(opline->extended_value & ZEND_FETCH_TYPE_MASK TSRMLS_CC);",
          "1056:   if (!target_symbol_table) {",
          "1057:    CHECK_EXCEPTION();",
          "",
          "[Removed Lines]",
          "1052:   if (OP1_TYPE == IS_CV && Z_TYPE_P(varname) == IS_INDIRECT) {",
          "1053:    varname = Z_INDIRECT_P(varname);",
          "1054:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1076:      break;",
          "1077:     EMPTY_SWITCH_DEFAULT_CASE()",
          "1078:    }",
          "1079:   }",
          "1080:   switch (opline->extended_value & ZEND_FETCH_TYPE_MASK) {",
          "1081:    case ZEND_FETCH_GLOBAL:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1068:    Z_TYPE_P(retval) == IS_INDIRECT) {",
          "1069:    retval = Z_INDIRECT_P(retval);",
          "1070:    if (Z_TYPE_P(retval) == IS_UNDEF) {",
          "1071:     switch (type) {",
          "1072:      case BP_VAR_R:",
          "1073:      case BP_VAR_UNSET:",
          "1074:       zend_error(E_NOTICE,\"Undefined variable: %s\", Z_STRVAL_P(varname));",
          "1076:      case BP_VAR_IS:",
          "1077:       retval = EX_VAR(opline->result.var);",
          "1078:       ZVAL_NULL(retval);",
          "1079:       break;",
          "1080:      case BP_VAR_RW:",
          "1081:       zend_error(E_NOTICE,\"Undefined variable: %s\", Z_STRVAL_P(varname));",
          "1083:      case BP_VAR_W:",
          "1084:       ZVAL_NULL(retval);",
          "1085:       break;",
          "1086:      EMPTY_SWITCH_DEFAULT_CASE()",
          "1087:     }",
          "1088:    }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1860:  zend_bool nested = EX(nested);",
          "1861:  zend_op_array *op_array = EX(op_array);",
          "1863:  EG(current_execute_data) = EX(prev_execute_data);",
          "1864:  EG(opline_ptr) = NULL;",
          "1866:   i_free_compiled_variables(execute_data TSRMLS_CC);",
          "1867:  }",
          "",
          "[Removed Lines]",
          "1865:  if (!EG(active_symbol_table)) {",
          "",
          "[Added Lines]",
          "1873:  if ((nested && EX(prev_execute_data)->opline->opcode == ZEND_INCLUDE_OR_EVAL) ||",
          "1874:      EG(active_symbol_table) == &EG(symbol_table)) {",
          "1875:   zend_detach_symbol_table(TSRMLS_C);",
          "1876:  }",
          "1881:  if (EG(active_symbol_table) != &EG(symbol_table)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1882:   LOAD_OPLINE();",
          "1883:   if (UNEXPECTED(opline->opcode == ZEND_INCLUDE_OR_EVAL)) {",
          "1885:    EX(function_state).function = (zend_function *) EX(op_array);",
          "1886:    EX(function_state).arguments = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1901:    zend_attach_symbol_table(TSRMLS_C);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3027:   zval_ptr_dtor(EX_VAR_NUM(opline->op2.var));",
          "3028:  }",
          "3029:  ZVAL_OBJ(EX_VAR_NUM(opline->op2.var), EG(exception));",
          "3035:  if (UNEXPECTED(EG(exception) != exception)) {",
          "3036:   EG(exception)->gc.refcount++;",
          "3037:   HANDLE_EXCEPTION();",
          "",
          "[Removed Lines]",
          "3030:  if (EG(active_symbol_table)) {",
          "3031:   zend_string *cv = CV_DEF_OF(opline->op2.var);",
          "3032:   zval *zv = zend_hash_update(&EG(active_symbol_table)->ht, cv, EX_VAR_NUM(opline->op2.var));",
          "3033:   ZVAL_INDIRECT(EX_VAR_NUM(opline->op2.var), zv);",
          "3034:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3222:  args = GET_OP1_ZVAL_PTR(BP_VAR_R);",
          "3223:  arg_num = opline->op2.num + EX(call)->num_additional_args + 1;",
          "3226:  switch (Z_TYPE_P(args)) {",
          "3227:   case IS_ARRAY: {",
          "3228:    HashTable *ht = Z_ARRVAL_P(args);",
          "",
          "[Removed Lines]",
          "3225: again:",
          "",
          "[Added Lines]",
          "3238: ZEND_VM_C_LABEL(send_again):",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3350:   }",
          "3351:   case IS_REFERENCE:",
          "3352:    args = Z_REFVAL_P(args);",
          "3354:    break;",
          "3355:   default:",
          "3356:    zend_error(E_WARNING, \"Only arrays and Traversables can be unpacked\");",
          "",
          "[Removed Lines]",
          "3353:    goto again;",
          "",
          "[Added Lines]",
          "3366:    ZEND_VM_C_GOTO(send_again);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3420:    ZVAL_COPY_VALUE(&tmp, opline->op2.zv);",
          "3421:    zval_update_constant(&tmp, 0 TSRMLS_CC);",
          "3426:    ZVAL_COPY_VALUE(var_ptr, &tmp);",
          "3427:   } else {",
          "3428:    ZVAL_COPY_VALUE(var_ptr, opline->op2.zv);",
          "",
          "[Removed Lines]",
          "3423:    if (Z_TYPE_P(var_ptr) == IS_INDIRECT) {",
          "3424:     var_ptr = Z_INDIRECT_P(var_ptr);",
          "3425:    }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3467:  for (; arg_num <= arg_count; ++arg_num) {",
          "3468:   zval *param = zend_vm_stack_get_arg(arg_num TSRMLS_CC);",
          "3469:   zend_verify_arg_type((zend_function *) EG(active_op_array), arg_num, param, opline->extended_value TSRMLS_CC);",
          "3474:   zend_hash_next_index_insert(Z_ARRVAL_P(params), param);",
          "3475:   if (Z_REFCOUNTED_P(param)) {",
          "3476:    Z_ADDREF_P(param);",
          "",
          "[Removed Lines]",
          "3471:   if (Z_TYPE_P(params) == IS_INDIRECT) {",
          "3472:    params = Z_INDIRECT_P(params);",
          "3473:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3805:   zval *offset = GET_OP2_ZVAL_PTR(BP_VAR_R);",
          "3806:   ulong hval;",
          "3809:   switch (Z_TYPE_P(offset)) {",
          "3810:    case IS_DOUBLE:",
          "3811:     hval = zend_dval_to_lval(Z_DVAL_P(offset));",
          "",
          "[Removed Lines]",
          "3808: again:",
          "",
          "[Added Lines]",
          "3813: ZEND_VM_C_LABEL(add_again):",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3827:     break;",
          "3828:    case IS_REFERENCE:",
          "3829:     offset = Z_REFVAL_P(offset);",
          "3831:     break;",
          "3832:    default:",
          "3833:     zend_error(E_WARNING, \"Illegal offset type\");",
          "",
          "[Removed Lines]",
          "3830:     goto again;",
          "",
          "[Added Lines]",
          "3835:     ZEND_VM_C_GOTO(add_again);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3877:   }",
          "3878:  }",
          "3881:  switch (opline->extended_value) {",
          "3882:   case IS_NULL:",
          "3883:    convert_to_null(result);",
          "",
          "[Removed Lines]",
          "3880: again:",
          "",
          "[Added Lines]",
          "3885: ZEND_VM_C_LABEL(cast_again):",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3917:    break;",
          "3918:   case IS_REFERENCE:",
          "3919:    result = Z_REFVAL_P(result);",
          "3921:    break;",
          "3922:  }",
          "3923:  FREE_OP1_IF_VAR();",
          "",
          "[Removed Lines]",
          "3920:    goto again;",
          "",
          "[Added Lines]",
          "3925:    ZEND_VM_C_GOTO(cast_again);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "4061:  if (OP1_TYPE == IS_CV &&",
          "4062:      OP2_TYPE == IS_UNUSED &&",
          "4063:      (opline->extended_value & ZEND_QUICK_SET)) {",
          "4073:   CHECK_EXCEPTION();",
          "4074:   ZEND_VM_NEXT_OPCODE();",
          "4075:  }",
          "",
          "[Removed Lines]",
          "4064:   if (EG(active_symbol_table)) {",
          "4065:    zend_string *cv = CV_DEF_OF(opline->op1.var);",
          "4067:    zend_delete_variable(EX(prev_execute_data), &EG(active_symbol_table)->ht, cv TSRMLS_CC);",
          "4068:    ZVAL_UNDEF(EX_VAR_NUM(opline->op1.var));",
          "4069:   } else if (Z_TYPE_P(EX_VAR_NUM(opline->op1.var)) != IS_UNDEF) {",
          "4070:    zval_ptr_dtor(EX_VAR_NUM(opline->op1.var));",
          "4071:    ZVAL_UNDEF(EX_VAR_NUM(opline->op1.var));",
          "4072:   }",
          "",
          "[Added Lines]",
          "4069:   zval_ptr_dtor(EX_VAR_NUM(opline->op1.var));",
          "4070:   ZVAL_UNDEF(EX_VAR_NUM(opline->op1.var));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "4112:   zend_std_unset_static_property(ce, Z_STR_P(varname), ((OP1_TYPE == IS_CONST) ? opline->op1.literal : NULL) TSRMLS_CC);",
          "4113:  } else {",
          "4114:   target_symbol_table = zend_get_target_symbol_table(opline->extended_value & ZEND_FETCH_TYPE_MASK TSRMLS_CC);",
          "4120:  }",
          "4122:  if (OP1_TYPE != IS_CONST && varname == &tmp) {",
          "",
          "[Removed Lines]",
          "4116:   if (OP1_TYPE == IS_CV && Z_TYPE_P(varname) == IS_INDIRECT) {",
          "4117:    varname = Z_INDIRECT_P(varname);",
          "4118:   }",
          "4119:   zend_delete_variable(execute_data, target_symbol_table, Z_STR_P(varname) TSRMLS_CC);",
          "",
          "[Added Lines]",
          "4113:   zend_hash_del_ind(target_symbol_table, Z_STR_P(varname));",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "4145:  offset = GET_OP2_ZVAL_PTR(BP_VAR_R);",
          "4147:  if (OP1_TYPE != IS_VAR || container) {",
          "4150:   switch (Z_TYPE_P(container)) {",
          "4151:    case IS_ARRAY: {",
          "4152:     HashTable *ht = Z_ARRVAL_P(container);",
          "4154:     switch (Z_TYPE_P(offset)) {",
          "4155:      case IS_DOUBLE:",
          "4156:       hval = zend_dval_to_lval(Z_DVAL_P(offset));",
          "",
          "[Removed Lines]",
          "4149: container_again:",
          "4153: offset_again:",
          "",
          "[Added Lines]",
          "4142: ZEND_VM_C_LABEL(container_again):",
          "4146: ZEND_VM_C_LABEL(offset_again):",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "4189:       break;",
          "4190:      case IS_REFERENCE:",
          "4191:       offset = Z_REFVAL_P(offset);",
          "4193:       break;",
          "4194:      default:",
          "4195:       zend_error(E_WARNING, \"Illegal offset type in unset\");",
          "",
          "[Removed Lines]",
          "4192:       goto offset_again;",
          "",
          "[Added Lines]",
          "4185:       ZEND_VM_C_GOTO(offset_again);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "4222:    case IS_REFERENCE:",
          "4223:     container = Z_REFVAL_P(container);",
          "4225:     break;",
          "4226:    default:",
          "4227:     FREE_OP2();",
          "",
          "[Removed Lines]",
          "4224:     goto container_again;",
          "",
          "[Added Lines]",
          "4217:     ZEND_VM_C_GOTO(container_again);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "4493:    fe_ht = Z_OBJPROP_P(array);",
          "4494:    zend_hash_set_pointer(fe_ht, (HashPointer*)EX_VAR((opline+1)->op1.var));",
          "4496:     if ((value = zend_hash_get_current_data(fe_ht)) == NULL) {",
          "4498:      ZEND_VM_JMP(EX(op_array)->opcodes+opline->op2.opline_num);",
          "4499:     }",
          "4500:     key_type = zend_hash_get_current_key_ex(fe_ht, &str_key, &int_key, 0, NULL);",
          "4502:     zend_hash_move_forward(fe_ht);",
          "4506:    if (key) {",
          "4507:     if (key_type == HASH_KEY_IS_LONG) {",
          "",
          "[Removed Lines]",
          "4495:    do {",
          "4503:    } while (key_type != HASH_KEY_IS_LONG &&",
          "4504:             zend_check_property_access(zobj, str_key TSRMLS_CC) != SUCCESS);",
          "",
          "[Added Lines]",
          "4488:    while (1) {",
          "4494:     if (Z_TYPE_P(value) == IS_INDIRECT) {",
          "4495:      value = Z_INDIRECT_P(value);",
          "4496:      if (Z_TYPE_P(value) == IS_UNDEF) {",
          "4497:       zend_hash_move_forward(fe_ht);",
          "4498:       continue;",
          "4499:      }",
          "4500:     }",
          "4505:     if (key_type == HASH_KEY_IS_LONG ||",
          "4506:         zend_check_property_access(zobj, str_key TSRMLS_CC) == SUCCESS) {",
          "4507:      break;",
          "4508:     }",
          "4509:    }",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "4599:      (opline->extended_value & ZEND_QUICK_SET)) {",
          "4600:   if (Z_TYPE_P(EX_VAR_NUM(opline->op1.var)) != IS_UNDEF) {",
          "4601:    value = EX_VAR_NUM(opline->op1.var);",
          "4605:    if (Z_TYPE_P(value) == IS_REFERENCE) {",
          "4606:     value = Z_REFVAL_P(value);",
          "4607:    }",
          "4614:   } else {",
          "4615:    isset = 0;",
          "4616:   }",
          "",
          "[Removed Lines]",
          "4602:    if (Z_TYPE_P(value) == IS_INDIRECT) {",
          "4603:     value = Z_INDIRECT_P(value);",
          "4604:    }",
          "4608:   } else if (EG(active_symbol_table)) {",
          "4609:    zend_string *cv = CV_DEF_OF(opline->op1.var);",
          "4611:    if ((value = zend_hash_find(&EG(active_symbol_table)->ht, cv)) == NULL) {",
          "4612:     isset = 0;",
          "4613:    }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "4648:    }",
          "4649:   } else {",
          "4650:    target_symbol_table = zend_get_target_symbol_table(opline->extended_value & ZEND_FETCH_TYPE_MASK TSRMLS_CC);",
          "4655:    if ((value = zend_hash_find(target_symbol_table, Z_STR_P(varname))) == NULL) {",
          "4656:     isset = 0;",
          "4657:    }",
          "",
          "[Removed Lines]",
          "4652:    if (OP1_TYPE == IS_CV && Z_TYPE_P(varname) == IS_INDIRECT) {",
          "4653:     varname = Z_INDIRECT_P(varname);",
          "4654:    }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "4705:   ht = Z_ARRVAL_P(container);",
          "4708:   switch (Z_TYPE_P(offset)) {",
          "4709:    case IS_DOUBLE:",
          "4710:     hval = zend_dval_to_lval(Z_DVAL_P(offset));",
          "",
          "[Removed Lines]",
          "4707: again:",
          "",
          "[Added Lines]",
          "4699: ZEND_VM_C_LABEL(isset_again):",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "4722:     if (OP2_TYPE != IS_CONST) {",
          "4723:      ZEND_HANDLE_NUMERIC_EX(Z_STRVAL_P(offset), Z_STRLEN_P(offset)+1, hval, ZEND_VM_C_GOTO(num_index_prop));",
          "4724:     }",
          "4726:      isset = 1;",
          "4727:     }",
          "4728:     break;",
          "4729:    case IS_NULL:",
          "4731:      isset = 1;",
          "4732:     }",
          "4733:     break;",
          "4734:    case IS_REFERENCE:",
          "4735:     offset = Z_REFVAL_P(offset);",
          "4737:     break;",
          "4738:    default:",
          "4739:     zend_error(E_WARNING, \"Illegal offset type in isset or empty\");",
          "",
          "[Removed Lines]",
          "4725:     if ((value = zend_hash_find(ht, Z_STR_P(offset))) != NULL) {",
          "4730:     if ((value = zend_hash_find(ht, STR_EMPTY_ALLOC())) != NULL) {",
          "4736:     goto again;",
          "",
          "[Added Lines]",
          "4717:     if ((value = zend_hash_find_ind(ht, Z_STR_P(offset))) != NULL) {",
          "4722:     if ((value = zend_hash_find_ind(ht, STR_EMPTY_ALLOC())) != NULL) {",
          "4728:     ZEND_VM_C_GOTO(isset_again);",
          "",
          "---------------"
        ],
        "ext/reflection/php_reflection.c||ext/reflection/php_reflection.c": [
          "File: ext/reflection/php_reflection.c -> ext/reflection/php_reflection.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "224: static zend_object_handlers reflection_object_handlers;",
          "227: {",
          "228:  zval *value;",
          "231:   RETURN_FALSE;",
          "232:  }",
          "234:  ZVAL_DUP(return_value, value);",
          "235: }",
          "",
          "[Removed Lines]",
          "230:  if ((value = zend_hash_str_find(Z_OBJPROP_P(object), name, name_len)) == NULL) {",
          "",
          "[Added Lines]",
          "227: {",
          "228:  zval *value;",
          "230:  if ((value = zend_hash_str_find_ind(Z_OBJPROP_P(object), name, name_len)) == NULL) {",
          "231:   return NULL;",
          "232:  }",
          "233:  return value;",
          "234: }",
          "240:  if ((value = _default_load_entry(object, name, name_len TSRMLS_CC)) == NULL) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3102:  if (zend_parse_parameters_none() == FAILURE) {",
          "3103:   return;",
          "3104:  }",
          "3106:   RETURN_FALSE;",
          "3107:  }",
          "3108:  if (Z_TYPE_P(name) == IS_STRING",
          "",
          "[Removed Lines]",
          "3105:  if ((name = zend_hash_str_find(Z_OBJPROP_P(getThis()), \"name\", sizeof(\"name\")-1)) == NULL) {",
          "",
          "[Added Lines]",
          "3114:  if ((name = _default_load_entry(getThis(), \"name\", sizeof(\"name\")-1) TSRMLS_CC) == NULL) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3125:  if (zend_parse_parameters_none() == FAILURE) {",
          "3126:   return;",
          "3127:  }",
          "3129:   RETURN_FALSE;",
          "3130:  }",
          "3131:  if (Z_TYPE_P(name) == IS_STRING",
          "",
          "[Removed Lines]",
          "3128:  if ((name = zend_hash_str_find(Z_OBJPROP_P(getThis()), \"name\", sizeof(\"name\")-1)) == NULL) {",
          "",
          "[Added Lines]",
          "3137:  if ((name = _default_load_entry(getThis(), \"name\", sizeof(\"name\")-1) TSRMLS_CC) == NULL) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3148:  if (zend_parse_parameters_none() == FAILURE) {",
          "3149:   return;",
          "3150:  }",
          "3152:   RETURN_FALSE;",
          "3153:  }",
          "3154:  if (Z_TYPE_P(name) == IS_STRING",
          "",
          "[Removed Lines]",
          "3151:  if ((name = zend_hash_str_find(Z_OBJPROP_P(getThis()), \"name\", sizeof(\"name\")-1)) == NULL) {",
          "",
          "[Added Lines]",
          "3160:  if ((name = _default_load_entry(getThis(), \"name\", sizeof(\"name\")-1) TSRMLS_CC) == NULL) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4654:  if (zend_parse_parameters_none() == FAILURE) {",
          "4655:   return;",
          "4656:  }",
          "4658:   RETURN_FALSE;",
          "4659:  }",
          "4660:  if (Z_TYPE_P(name) == IS_STRING",
          "",
          "[Removed Lines]",
          "4657:  if ((name = zend_hash_str_find(Z_OBJPROP_P(getThis()), \"name\", sizeof(\"name\")-1)) == NULL) {",
          "",
          "[Added Lines]",
          "4666:  if ((name = _default_load_entry(getThis(), \"name\", sizeof(\"name\")-1) TSRMLS_CC) == NULL) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4677:  if (zend_parse_parameters_none() == FAILURE) {",
          "4678:   return;",
          "4679:  }",
          "4681:   RETURN_FALSE;",
          "4682:  }",
          "4683:  if (Z_TYPE_P(name) == IS_STRING",
          "",
          "[Removed Lines]",
          "4680:  if ((name = zend_hash_str_find(Z_OBJPROP_P(getThis()), \"name\", sizeof(\"name\")-1)) == NULL) {",
          "",
          "[Added Lines]",
          "4689:  if ((name = _default_load_entry(getThis(), \"name\", sizeof(\"name\")-1) TSRMLS_CC) == NULL) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4700:  if (zend_parse_parameters_none() == FAILURE) {",
          "4701:   return;",
          "4702:  }",
          "4704:   RETURN_FALSE;",
          "4705:  }",
          "4706:  if (Z_TYPE_P(name) == IS_STRING",
          "",
          "[Removed Lines]",
          "4703:  if ((name = zend_hash_str_find(Z_OBJPROP_P(getThis()), \"name\", sizeof(\"name\")-1)) == NULL) {",
          "",
          "[Added Lines]",
          "4712:  if ((name = _default_load_entry(getThis(), \"name\", sizeof(\"name\")-1) TSRMLS_CC) == NULL) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4937: {",
          "4938:  reflection_object *intern;",
          "4939:  property_reference *ref;",
          "4941:  zval *member_p = NULL;",
          "4943:  METHOD_NOTSTATIC(reflection_property_ptr);",
          "4944:  GET_REFLECTION_OBJECT_PTR(ref);",
          "4946:  if (!(ref->prop.flags & (ZEND_ACC_PUBLIC | ZEND_ACC_IMPLICIT_PUBLIC)) && intern->ignore_visibility == 0) {",
          "4948:   zend_throw_exception_ex(reflection_exception_ptr, 0 TSRMLS_CC,",
          "4951:   return;",
          "4952:  }",
          "",
          "[Removed Lines]",
          "4940:  zval *object, name;",
          "4947:   _default_get_entry(getThis(), \"name\", sizeof(\"name\")-1, &name TSRMLS_CC);",
          "4949:    \"Cannot access non-public member %s::%s\", intern->ce->name->val, Z_STRVAL(name));",
          "4950:   zval_dtor(&name);",
          "",
          "[Added Lines]",
          "4949:  zval *object, *name;",
          "4956:   name = _default_load_entry(getThis(), \"name\", sizeof(\"name\")-1 TSRMLS_CC);",
          "4958:    \"Cannot access non-public member %s::%s\", intern->ce->name->val, Z_STRVAL_P(name));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4984:  reflection_object *intern;",
          "4985:  property_reference *ref;",
          "4986:  zval *variable_ptr;",
          "4988:  zval *value;",
          "4989:  zval *tmp;",
          "",
          "[Removed Lines]",
          "4987:  zval *object, name;",
          "",
          "[Added Lines]",
          "4995:  zval *object, *name;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4992:  GET_REFLECTION_OBJECT_PTR(ref);",
          "4994:  if (!(ref->prop.flags & ZEND_ACC_PUBLIC) && intern->ignore_visibility == 0) {",
          "4996:   zend_throw_exception_ex(reflection_exception_ptr, 0 TSRMLS_CC,",
          "4999:   return;",
          "5000:  }",
          "",
          "[Removed Lines]",
          "4995:   _default_get_entry(getThis(), \"name\", sizeof(\"name\")-1, &name TSRMLS_CC);",
          "4997:    \"Cannot access non-public member %s::%s\", intern->ce->name->val, Z_STRVAL(name));",
          "4998:   zval_dtor(&name);",
          "",
          "[Added Lines]",
          "5003:   name = _default_load_entry(getThis(), \"name\", sizeof(\"name\")-1 TSRMLS_CC);",
          "5005:    \"Cannot access non-public member %s::%s\", intern->ce->name->val, Z_STRVAL_P(name));",
          "",
          "---------------"
        ],
        "ext/spl/spl_array.c||ext/spl/spl_array.c": [
          "File: ext/spl/spl_array.c -> ext/spl/spl_array.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "324:  case IS_STRING:",
          "325:     offset_key = Z_STR_P(offset);",
          "326: fetch_dim_string:",
          "328:    switch (type) {",
          "329:     case BP_VAR_R:",
          "330:      zend_error(E_NOTICE, \"Undefined index: %s\", offset_key->val);",
          "",
          "[Removed Lines]",
          "327:   if ((retval = (zend_symtable_find(ht, offset_key))) == NULL) {",
          "",
          "[Added Lines]",
          "327:   retval = zend_symtable_find(ht, offset_key);",
          "328:   if (retval) {",
          "329:    if (Z_TYPE_P(retval) == IS_INDIRECT) {",
          "330:     retval = Z_INDIRECT_P(retval);",
          "331:     if (Z_TYPE_P(retval) == IS_UNDEF) {",
          "332:      switch (type) {",
          "333:       case BP_VAR_R:",
          "334:        zend_error(E_NOTICE, \"Undefined index: %s\", offset_key->val);",
          "335:       case BP_VAR_UNSET:",
          "336:       case BP_VAR_IS:",
          "337:        retval = &EG(uninitialized_zval);",
          "338:        break;",
          "339:       case BP_VAR_RW:",
          "340:        zend_error(E_NOTICE,\"Undefined index: %s\", offset_key->val);",
          "341:       case BP_VAR_W: {",
          "342:        ZVAL_NULL(retval);",
          "343:       }",
          "344:      }",
          "345:     }",
          "346:    }",
          "347:   } else {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "464:     zend_error(E_WARNING, \"Modification of ArrayObject during sorting is prohibited\");",
          "465:     return;",
          "466:    }",
          "468:    return;",
          "469:   case IS_DOUBLE:",
          "470:   case IS_RESOURCE:",
          "",
          "[Removed Lines]",
          "467:    zend_symtable_update(ht, Z_STR_P(offset), value);",
          "",
          "[Added Lines]",
          "488:    zend_symtable_update_ind(ht, Z_STR_P(offset), value);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "526:     zend_error(E_NOTICE,\"Undefined index: %s\", Z_STRVAL_P(offset));",
          "527:    }",
          "528:   } else {",
          "544:      } else {",
          "557:      }",
          "558:     }",
          "559:    }",
          "560:   }",
          "561:   break;",
          "",
          "[Removed Lines]",
          "529:    if (zend_symtable_del(ht, Z_STR_P(offset)) == FAILURE) {",
          "530:     zend_error(E_NOTICE,\"Undefined index: %s\", Z_STRVAL_P(offset));",
          "531:    } else {",
          "532:     spl_array_object *obj = intern;",
          "534:     while (1) {",
          "535:      if ((obj->ar_flags & SPL_ARRAY_IS_SELF) != 0) {",
          "536:       break;",
          "537:      } else if (Z_TYPE(obj->array) == IS_OBJECT) {",
          "538:          if ((obj->ar_flags & SPL_ARRAY_USE_OTHER) == 0) {",
          "539:        obj = Z_SPLARRAY_P(&obj->array);",
          "540:           break;",
          "541:       } else {",
          "542:        obj = Z_SPLARRAY_P(&obj->array);",
          "543:          }",
          "545:       obj = NULL;",
          "546:       break;",
          "547:      }",
          "548:     }",
          "549:     if (obj) {",
          "550:      zend_property_info *property_info = zend_get_property_info(obj->std.ce, offset, 1 TSRMLS_CC);",
          "552:      if (property_info &&",
          "553:          (property_info->flags & ZEND_ACC_STATIC) == 0 &&",
          "554:          property_info->offset >= 0) {",
          "555:          zval_ptr_dtor(&obj->std.properties_table[property_info->offset]);",
          "556:       ZVAL_UNDEF(&obj->std.properties_table[property_info->offset]);",
          "",
          "[Added Lines]",
          "551: #if 0",
          "552:    if (zend_symtable_del_ind(ht, Z_STR_P(offset)) == FAILURE) {",
          "553: #else",
          "554:    zval *data = zend_symtable_find(ht, Z_STR_P(offset));",
          "556:    if (data) {",
          "557:     if (Z_TYPE_P(data) == IS_INDIRECT) {",
          "558:      data = Z_INDIRECT_P(data);",
          "559:      if (Z_TYPE_P(data) == IS_UNDEF) {",
          "560:       zend_error(E_NOTICE,\"Undefined index: %s\", Z_STRVAL_P(offset));",
          "562:       zval_ptr_dtor(data);",
          "563:       ZVAL_UNDEF(data);",
          "566:      spl_array_rewind(intern TSRMLS_CC);",
          "567:     } else if (zend_symtable_del(ht, Z_STR_P(offset)) == FAILURE) {",
          "568:      zend_error(E_NOTICE,\"Undefined index: %s\", Z_STRVAL_P(offset));",
          "570:    } else {",
          "571: #endif",
          "572:     zend_error(E_NOTICE,\"Undefined index: %s\", Z_STRVAL_P(offset));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "610:   case IS_STRING:",
          "611:    {",
          "612:     HashTable *ht = spl_array_get_hash_table(intern, 0 TSRMLS_CC);",
          "614:      switch (check_empty) {",
          "615:       case 0:",
          "616:        return Z_TYPE_P(tmp) != IS_NULL;",
          "",
          "[Removed Lines]",
          "613:     if ((tmp = zend_symtable_find(ht, Z_STR_P(offset))) != NULL) {",
          "",
          "[Added Lines]",
          "627:     if ((tmp = zend_symtable_find_ind(ht, Z_STR_P(offset))) != NULL) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "919: {",
          "920:  zend_string *string_key;",
          "921:  ulong num_key;",
          "923:  if (Z_TYPE(intern->array) == IS_OBJECT) {",
          "924:   do {",
          "925:    if (zend_hash_get_current_key_ex(aht, &string_key, &num_key, 0, &intern->pos) == HASH_KEY_IS_STRING) {",
          "927:      return SUCCESS;",
          "928:     }",
          "929:    } else {",
          "",
          "[Removed Lines]",
          "926:     if (!string_key->len || string_key->val[0]) {",
          "",
          "[Added Lines]",
          "936:  zval *data;",
          "941:     data = zend_hash_get_current_data_ex(aht, &intern->pos);",
          "942:     if (data && Z_TYPE_P(data) == IS_INDIRECT &&",
          "943:         Z_TYPE_P(data = Z_INDIRECT_P(data)) == IS_UNDEF) {",
          "945:     } else if (!string_key->len || string_key->val[0]) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1002:  if (object->ar_flags & SPL_ARRAY_OVERLOADED_CURRENT) {",
          "1003:   return zend_user_it_get_current_data(iter TSRMLS_CC);",
          "1004:  } else {",
          "1006:  }",
          "1007: }",
          "",
          "[Removed Lines]",
          "1005:   return zend_hash_get_current_data_ex(aht, &object->pos);",
          "",
          "[Added Lines]",
          "1024:   zval *data = zend_hash_get_current_data_ex(aht, &object->pos);",
          "1025:   if (Z_TYPE_P(data) == IS_INDIRECT) {",
          "1026:    data = Z_INDIRECT_P(data);",
          "1027:   }",
          "1028:   return data;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1096:    ar_flags = other->ar_flags & ~SPL_ARRAY_INT_MASK;",
          "1097:   }",
          "1098:   ar_flags |= SPL_ARRAY_USE_OTHER;",
          "1100:  } else {",
          "1101:   if (Z_TYPE_P(array) != IS_OBJECT && Z_TYPE_P(array) != IS_ARRAY) {",
          "1102:    zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0 TSRMLS_CC);",
          "1103:    return;",
          "1104:   }",
          "1105:   zval_ptr_dtor(&intern->array);",
          "1107:  }",
          "1108:  if (Z_TYPE_P(array) == IS_OBJECT && Z_OBJ_P(object) == Z_OBJ_P(array)) {",
          "1109:   intern->ar_flags |= SPL_ARRAY_IS_SELF;",
          "",
          "[Removed Lines]",
          "1099:   intern->array = *array;",
          "1106:   intern->array = *array;",
          "",
          "[Added Lines]",
          "1122:   ZVAL_COPY_VALUE(&intern->array, array);",
          "1129:   ZVAL_COPY_VALUE(&intern->array, array);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1507:  if ((entry = zend_hash_get_current_data_ex(aht, &intern->pos)) == NULL) {",
          "1508:   return;",
          "1509:  }",
          "1510:  RETVAL_ZVAL(entry, 1, 0);",
          "1511: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1533:  if (Z_TYPE_P(entry) == IS_INDIRECT) {",
          "1534:   entry = Z_INDIRECT_P(entry);",
          "1535:   if (Z_TYPE_P(entry) == IS_UNDEF) {",
          "1536:    return;",
          "1537:   }",
          "1538:  }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1765:  }",
          "1772:  zval_ptr_dtor(&members);",
          "",
          "[Removed Lines]",
          "1768:  if (!intern->std.properties) {",
          "1769:   rebuild_object_properties(&intern->std);",
          "1770:  }",
          "1771:  zend_hash_copy(intern->std.properties, Z_ARRVAL(members), (copy_ctor_func_t) zval_add_ref);",
          "",
          "[Added Lines]",
          "1797:  object_properties_load(&intern->std, Z_ARRVAL(members));",
          "",
          "---------------"
        ],
        "ext/standard/array.c||ext/standard/array.c": [
          "File: ext/standard/array.c -> ext/standard/array.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "370:  first = &f->val;",
          "371:  second = &s->val;",
          "373:  if (ARRAYG(compare_func)(&result, first, second TSRMLS_CC) == FAILURE) {",
          "374:   return 0;",
          "375:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "373:  if (Z_TYPE_P(first) == IS_INDIRECT) {",
          "374:   first = Z_INDIRECT_P(first);",
          "375:  }",
          "376:  if (Z_TYPE_P(second) == IS_INDIRECT) {",
          "377:   second = Z_INDIRECT_P(second);",
          "378:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1057:  zend_hash_internal_pointer_reset(target_hash);",
          "1058:  while (!EG(exception) && (zv = zend_hash_get_current_data(target_hash)) != NULL) {",
          "1059:   ZVAL_COPY(&args[0], zv);",
          "1060:   if (recursive &&",
          "1061:       (Z_TYPE(args[0]) == IS_ARRAY ||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1065:   if (Z_TYPE_P(zv) == IS_INDIRECT) {",
          "1066:    zv = Z_INDIRECT_P(zv);",
          "1067:    if (Z_TYPE_P(zv) == IS_UNDEF) {",
          "1068:     zend_hash_move_forward(target_hash);",
          "1069:     continue;",
          "1070:    }",
          "1071:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1332:  while ((entry = zend_hash_get_current_data_ex(Z_ARRVAL_P(var_array), &pos)) != NULL) {",
          "1333:   zval final_name;",
          "1335:   ZVAL_NULL(&final_name);",
          "1337:   key_type = zend_hash_get_current_key_ex(Z_ARRVAL_P(var_array), &var_name, &num_key, 0, &pos);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1348:   if (Z_TYPE_P(entry) == IS_INDIRECT) {",
          "1349:    entry = Z_INDIRECT_P(entry);",
          "1350:    if (Z_TYPE_P(entry) == IS_UNDEF) {",
          "1351:     zend_hash_move_forward_ex(Z_ARRVAL_P(var_array), &pos);",
          "1352:     continue;",
          "1353:    }",
          "1354:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1410:     Z_ADDREF_P(entry);",
          "1412:     if ((orig_var = zend_hash_find(&EG(active_symbol_table)->ht, Z_STR(final_name))) != NULL) {",
          "1413:      zval_ptr_dtor(orig_var);",
          "1414:      ZVAL_COPY_VALUE(orig_var, entry);",
          "1415:     } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1434:      if (Z_TYPE_P(orig_var) == IS_INDIRECT) {",
          "1435:       orig_var = Z_INDIRECT_P(orig_var);",
          "1436:      }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1417:     }",
          "1418:    } else {",
          "1419:     ZVAL_DUP(&data, entry);",
          "1421:    }",
          "1422:    count++;",
          "1423:   }",
          "",
          "[Removed Lines]",
          "1420:     ZEND_SET_SYMBOL_WITH_LENGTH(&EG(active_symbol_table)->ht, Z_STRVAL(final_name), Z_STRLEN(final_name), &data, 1, 0);",
          "",
          "[Added Lines]",
          "1444:     zend_set_local_var(Z_STRVAL(final_name), Z_STRLEN(final_name), &data, 1 TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1442:   entry = Z_REFVAL_P(entry);",
          "1443:  }",
          "1444:  if (Z_TYPE_P(entry) == IS_STRING) {",
          "1446:    ZVAL_DUP(&data, value_ptr);",
          "1447:    zend_hash_update(Z_ARRVAL_P(return_value), Z_STR_P(entry), &data);",
          "1448:   }",
          "1451:   HashPosition pos;",
          "1453:   if ((Z_ARRVAL_P(entry)->nApplyCount > 1)) {",
          "",
          "[Removed Lines]",
          "1445:   if ((value_ptr = zend_hash_find(eg_active_symbol_table, Z_STR_P(entry))) != NULL) {",
          "1449:  }",
          "1450:  else if (Z_TYPE_P(entry) == IS_ARRAY) {",
          "",
          "[Added Lines]",
          "1469:   if ((value_ptr = zend_hash_find_ind(eg_active_symbol_table, Z_STR_P(entry))) != NULL) {",
          "1473:  } else if (Z_TYPE_P(entry) == IS_ARRAY) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1460:   zend_hash_internal_pointer_reset_ex(Z_ARRVAL_P(entry), &pos);",
          "1461:   while ((value_ptr = zend_hash_get_current_data_ex(Z_ARRVAL_P(entry), &pos)) != NULL) {",
          "1462:    php_compact_var(eg_active_symbol_table, return_value, value_ptr TSRMLS_CC);",
          "1463:    zend_hash_move_forward_ex(Z_ARRVAL_P(entry), &pos);",
          "1464:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1485:    if (Z_TYPE_P(value_ptr) == IS_INDIRECT) {",
          "1486:     value_ptr = Z_INDIRECT_P(value_ptr);",
          "1487:     if (Z_TYPE_P(value_ptr) == IS_UNDEF) {",
          "1488:      zend_hash_move_forward_ex(Z_ARRVAL_P(entry), &pos);",
          "1489:      continue;",
          "1490:     }",
          "1491:    }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1963:  } else {",
          "1964:   zend_hash_internal_pointer_reset(Z_ARRVAL_P(stack));",
          "1965:  }",
          "1967:  RETVAL_ZVAL_FAST(val);",
          "",
          "[Removed Lines]",
          "1966:  val = zend_hash_get_current_data(Z_ARRVAL_P(stack));",
          "",
          "[Added Lines]",
          "1996:  while (1) {",
          "1997:   val = zend_hash_get_current_data(Z_ARRVAL_P(stack));",
          "1998:   if (!val) {",
          "1999:    return;",
          "2000:   } else if (Z_TYPE_P(val) == IS_INDIRECT) {",
          "2001:    val = Z_INDIRECT_P(val);",
          "2002:    if (Z_TYPE_P(val) == IS_UNDEF) {",
          "2003:     zend_hash_move_forward(Z_ARRVAL_P(stack));",
          "2004:     continue;",
          "2005:    }",
          "2006:   }",
          "2007:   break;",
          "2008:  }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2046:  new_hash = php_splice(Z_ARRVAL_P(stack), 0, 0, &args[0], argc, NULL);",
          "2047:  old_hash = *Z_ARRVAL_P(stack);",
          "2052:  FREE_HASHTABLE(new_hash);",
          "2053:  zend_hash_destroy(&old_hash);",
          "",
          "[Removed Lines]",
          "2048:  if (Z_ARRVAL_P(stack) == &EG(symbol_table).ht) {",
          "2049:   zend_reset_all_cv(&EG(symbol_table) TSRMLS_CC);",
          "2050:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2130:  old_hash = *Z_ARRVAL_P(array);",
          "2135:  FREE_HASHTABLE(new_hash);",
          "2136:  zend_hash_destroy(&old_hash);",
          "",
          "[Removed Lines]",
          "2131:  if (Z_ARRVAL_P(array) == &EG(symbol_table).ht) {",
          "2132:   zend_reset_all_cv(&EG(symbol_table) TSRMLS_CC);",
          "2133:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2791:  old_hash = *Z_ARRVAL_P(return_value);",
          "2796:  FREE_HASHTABLE(new_hash);",
          "2797:  zend_hash_destroy(&old_hash);",
          "",
          "[Removed Lines]",
          "2792:  if (Z_ARRVAL_P(return_value) == &EG(symbol_table).ht) {",
          "2793:   zend_reset_all_cv(&EG(symbol_table) TSRMLS_CC);",
          "2794:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2911:  for (i = 0, idx = 0; idx < Z_ARRVAL_P(array)->nNumUsed; idx++) {",
          "2912:   p = Z_ARRVAL_P(array)->arData + idx;",
          "2913:   if (Z_TYPE(p->val) == IS_UNDEF) continue;",
          "2914:   arTmp[i].b = *p;",
          "2915:   arTmp[i].i = i;",
          "2916:   i++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2947:   if (Z_TYPE(p->val) == IS_INDIRECT && Z_TYPE_P(Z_INDIRECT(p->val)) == IS_UNDEF) continue;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2954:  first = a;",
          "2955:  second = b;",
          "2957:  if (string_compare_function(&result, first, second TSRMLS_CC) == FAILURE) {",
          "2958:   return 0;",
          "2959:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2991:  if (Z_TYPE_P(first) == IS_INDIRECT) {",
          "2992:   first = Z_INDIRECT_P(first);",
          "2993:  }",
          "2994:  if (Z_TYPE_P(second) == IS_INDIRECT) {",
          "2995:   second = Z_INDIRECT_P(second);",
          "2996:  }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2985:  zval args[2];",
          "2986:  zval retval;",
          "2988:  ZVAL_COPY_VALUE(&args[0], a);",
          "2989:  ZVAL_COPY_VALUE(&args[1], b);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3028:  if (Z_TYPE_P(a) == IS_INDIRECT) {",
          "3029:   a = Z_INDIRECT_P(a);",
          "3030:  }",
          "3031:  if (Z_TYPE_P(b) == IS_INDIRECT) {",
          "3032:   b = Z_INDIRECT_P(b);",
          "3033:  }",
          "",
          "---------------"
        ],
        "ext/standard/basic_functions.c||ext/standard/basic_functions.c": [
          "File: ext/standard/basic_functions.c -> ext/standard/basic_functions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4267:  if (Z_TYPE(PG(http_globals)[TRACK_VARS_SERVER]) != IS_UNDEF &&",
          "4270:  ) {",
          "4271:   int pos = 0;",
          "4272:   zval *entry;",
          "",
          "[Removed Lines]",
          "4268:   ((args = zend_hash_str_find(HASH_OF(&PG(http_globals)[TRACK_VARS_SERVER]), \"argv\", sizeof(\"argv\")-1)) != NULL ||",
          "4269:   (args = zend_hash_str_find(&EG(symbol_table).ht, \"argv\", sizeof(\"argv\")-1)) != NULL) && Z_TYPE_P(args) == IS_ARRAY",
          "4274:   argc = zend_hash_num_elements(Z_ARRVAL_P(args));",
          "",
          "[Added Lines]",
          "4268:   ((args = zend_hash_str_find_ind(HASH_OF(&PG(http_globals)[TRACK_VARS_SERVER]), \"argv\", sizeof(\"argv\")-1)) != NULL ||",
          "4269:   (args = zend_hash_str_find_ind(&EG(symbol_table).ht, \"argv\", sizeof(\"argv\")-1)) != NULL)",
          "4274:    if (Z_TYPE_P(args) != IS_ARRAY) {",
          "4275:     RETURN_FALSE;",
          "4276:    }",
          "4277:    argc = zend_hash_num_elements(Z_ARRVAL_P(args));",
          "",
          "---------------"
        ],
        "ext/standard/http.c||ext/standard/http.c": [
          "File: ext/standard/http.c -> ext/standard/http.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Error traversing form data array\");",
          "83:    return FAILURE;",
          "84:   }",
          "85:   if (Z_TYPE_P(zdata) == IS_ARRAY || Z_TYPE_P(zdata) == IS_OBJECT) {",
          "86:    if (key_type == HASH_KEY_IS_STRING) {",
          "87:     zend_string *ekey;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85:   if (Z_TYPE_P(zdata) == IS_INDIRECT) {",
          "86:    zdata = Z_INDIRECT_P(zdata);",
          "87:    if (Z_TYPE_P(zdata) == IS_UNDEF) {",
          "88:     continue;",
          "89:    }",
          "90:   }",
          "",
          "---------------"
        ],
        "ext/standard/http_fopen_wrapper.c||ext/standard/http_fopen_wrapper.c": [
          "File: ext/standard/http_fopen_wrapper.c -> ext/standard/http_fopen_wrapper.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "659:  if (header_init) {",
          "660:   zval ztmp;",
          "661:   array_init(&ztmp);",
          "663:  }",
          "665:  response_header = zend_hash_str_find(&EG(active_symbol_table)->ht, \"http_response_header\", sizeof(\"http_response_header\")-1);",
          "",
          "[Removed Lines]",
          "662:   ZEND_SET_SYMBOL(&EG(active_symbol_table)->ht, \"http_response_header\", &ztmp);",
          "",
          "[Added Lines]",
          "662:   zend_set_local_var(\"http_response_header\", sizeof(\"http_response_header\")-1, &ztmp, 0 TSRMLS_CC);",
          "",
          "---------------"
        ],
        "ext/standard/var.c||ext/standard/var.c": [
          "File: ext/standard/var.c -> ext/standard/var.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #define COMMON (is_ref ? \"&\" : \"\")",
          "39: {",
          "40:  int level;",
          "42:  level = va_arg(args, int);",
          "45:   php_printf(\"%*c[%ld]=>\\n\", level + 1, ' ', hash_key->h);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: static uint zend_obj_num_elements(HashTable *ht)",
          "39: {",
          "40:  Bucket *p;",
          "41:  uint idx;",
          "42:  uint num;",
          "44:  num = ht->nNumOfElements;",
          "45:  for (idx = 0; idx < ht->nNumUsed; idx++) {",
          "46:   p = ht->arData + idx;",
          "47:   if (Z_TYPE(p->val) == IS_UNDEF) continue;",
          "48:   if (Z_TYPE(p->val) == IS_INDIRECT) {",
          "49:    if (Z_TYPE_P(Z_INDIRECT(p->val)) == IS_UNDEF) {",
          "50:     num--;",
          "51:    }",
          "52:   }",
          "53:  }",
          "54:  return num;",
          "55: }",
          "63:  if (Z_TYPE_P(zv) == IS_INDIRECT) {",
          "64:   zv = Z_INDIRECT_P(zv);",
          "65:   if (Z_TYPE_P(zv) == IS_UNDEF) {",
          "66:    return 0;",
          "67:   }",
          "68:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:  level = va_arg(args, int);",
          "64:   php_printf(\"%*c[%ld]=>\\n\", level + 1, ' ', hash_key->h);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:  if (Z_TYPE_P(zv) == IS_INDIRECT) {",
          "89:   zv = Z_INDIRECT_P(zv);",
          "90:   if (Z_TYPE_P(zv) == IS_UNDEF) {",
          "91:    return 0;",
          "92:   }",
          "93:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "137:    if (Z_OBJ_HANDLER_P(struc, get_class_name)) {",
          "138:     class_name = Z_OBJ_HANDLER_P(struc, get_class_name)(struc, 0 TSRMLS_CC);",
          "140:     STR_RELEASE(class_name);",
          "141:    } else {",
          "143:    }",
          "144:    php_element_dump_func = php_object_property_dump;",
          "145:  head_done:",
          "",
          "[Removed Lines]",
          "139:     php_printf(\"%sobject(%s)#%d (%d) {\\n\", COMMON, class_name->val, Z_OBJ_HANDLE_P(struc), myht ? zend_hash_num_elements(myht) : 0);",
          "142:     php_printf(\"%sobject(unknown class)#%d (%d) {\\n\", COMMON, Z_OBJ_HANDLE_P(struc), myht ? zend_hash_num_elements(myht) : 0);",
          "",
          "[Added Lines]",
          "170:     php_printf(\"%sobject(%s)#%d (%d) {\\n\", COMMON, class_name->val, Z_OBJ_HANDLE_P(struc), myht ? zend_obj_num_elements(myht) : 0);",
          "173:     php_printf(\"%sobject(unknown class)#%d (%d) {\\n\", COMMON, Z_OBJ_HANDLE_P(struc), myht ? zend_obj_num_elements(myht) : 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "201:  level = va_arg(args, int);",
          "204:   php_printf(\"%*c[%ld]=>\\n\", level + 1, ' ', hash_key->h);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "234:  if (Z_TYPE_P(zv) == IS_INDIRECT) {",
          "235:   zv = Z_INDIRECT_P(zv);",
          "236:   if (Z_TYPE_P(zv) == IS_UNDEF) {",
          "237:    return 0;",
          "238:   }",
          "239:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "226:  level = va_arg(args, int);",
          "229:   php_printf(\"%*c[%ld]=>\\n\", level + 1, ' ', hash_key->h);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265:  if (Z_TYPE_P(zv) == IS_INDIRECT) {",
          "266:   zv = Z_INDIRECT_P(zv);",
          "267:   if (Z_TYPE_P(zv) == IS_UNDEF) {",
          "268:    return 0;",
          "269:   }",
          "270:  }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "259:   php_printf(\"%*c\", level - 1, ' ');",
          "260:  }",
          "270:  switch (Z_TYPE_P(struc)) {",
          "271:  case IS_BOOL:",
          "272:   php_printf(\"%sbool(%s)\\n\", COMMON, Z_LVAL_P(struc)?\"true\":\"false\");",
          "",
          "[Removed Lines]",
          "262:  if (Z_TYPE_P(struc) == IS_REFERENCE) {",
          "264:   if (Z_REFCOUNT_P(struc) > 1) {",
          "265:    is_ref = 1;",
          "266:   }",
          "267:   struc = Z_REFVAL_P(struc);",
          "268:  }",
          "",
          "[Added Lines]",
          "305: again:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "301:    return;",
          "302:   }",
          "303:   class_name = Z_OBJ_HANDLER_P(struc, get_class_name)(struc, 0 TSRMLS_CC);",
          "305:   STR_RELEASE(class_name);",
          "306:   zval_element_dump_func = zval_object_property_dump;",
          "307: head_done:",
          "",
          "[Removed Lines]",
          "304:   php_printf(\"%sobject(%s)#%d (%d) refcount(%u){\\n\", COMMON, class_name->val, Z_OBJ_HANDLE_P(struc), myht ? zend_hash_num_elements(myht) : 0, Z_REFCOUNT_P(struc));",
          "",
          "[Added Lines]",
          "340:   php_printf(\"%sobject(%s)#%d (%d) refcount(%u){\\n\", COMMON, class_name->val, Z_OBJ_HANDLE_P(struc), myht ? zend_obj_num_elements(myht) : 0, Z_REFCOUNT_P(struc));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "322:   php_printf(\"%sresource(%ld) of type (%s) refcount(%u)\\n\", COMMON, Z_RES_P(struc)->handle, type_name ? type_name : \"Unknown\", Z_REFCOUNT_P(struc));",
          "323:   break;",
          "324:  }",
          "325:  default:",
          "326:   php_printf(\"%sUNKNOWN:0\\n\", COMMON);",
          "327:   break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "361:  case IS_REFERENCE:",
          "363:   if (Z_REFCOUNT_P(struc) > 1) {",
          "364:    is_ref = 1;",
          "365:   }",
          "366:   struc = Z_REFVAL_P(struc);",
          "367:   goto again;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "364:  level = va_arg(args, int);",
          "365:  buf = va_arg(args, smart_str *);",
          "368:   buffer_append_spaces(buf, level+1);",
          "369:   smart_str_append_long(buf, (long) hash_key->h);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "410:  if (Z_TYPE_P(zv) == IS_INDIRECT) {",
          "411:   zv = Z_INDIRECT_P(zv);",
          "412:   if (Z_TYPE_P(zv) == IS_UNDEF) {",
          "413:    return 0;",
          "414:   }",
          "415:  }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "400:  level = va_arg(args, int);",
          "401:  buf = va_arg(args, smart_str *);",
          "403:  buffer_append_spaces(buf, level + 2);",
          "404:  if (hash_key->key != NULL) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "452:  if (Z_TYPE_P(zv) == IS_INDIRECT) {",
          "453:   zv = Z_INDIRECT_P(zv);",
          "454:   if (Z_TYPE_P(zv) == IS_UNDEF) {",
          "455:    return 0;",
          "456:   }",
          "457:  }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "683:    }",
          "684:    propers = Z_OBJPROP_P(struc);",
          "685:    if ((d = zend_hash_find(propers, Z_STR_P(name))) != NULL) {",
          "686:     php_var_serialize_string(buf, Z_STRVAL_P(name), Z_STRLEN_P(name));",
          "687:     php_var_serialize_intern(buf, d, var_hash TSRMLS_CC);",
          "688:    } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "742:     if (Z_TYPE_P(d) == IS_INDIRECT) {",
          "743:      d = Z_INDIRECT_P(d);",
          "744:      if (Z_TYPE_P(d) == IS_UNDEF) {",
          "745:       continue;",
          "746:      }",
          "747:     }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "694:      do {",
          "695:       priv_name = zend_mangle_property_name(ce->name->val, ce->name->len, Z_STRVAL_P(name), Z_STRLEN_P(name), ce->type & ZEND_INTERNAL_CLASS);",
          "696:       if ((d = zend_hash_find(propers, priv_name)) != NULL) {",
          "697:        php_var_serialize_string(buf, priv_name->val, priv_name->len);",
          "698:        STR_FREE(priv_name);",
          "699:        php_var_serialize_intern(buf, d, var_hash TSRMLS_CC);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "759:        if (Z_TYPE_P(d) == IS_INDIRECT) {",
          "760:         d = Z_INDIRECT_P(d);",
          "761:         if (Z_TYPE_P(d) == IS_UNDEF) {",
          "762:          STR_FREE(prot_name);",
          "763:          break;",
          "764:         }",
          "765:        }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "702:       STR_FREE(priv_name);",
          "703:       prot_name = zend_mangle_property_name(\"*\", 1, Z_STRVAL_P(name), Z_STRLEN_P(name), ce->type & ZEND_INTERNAL_CLASS);",
          "704:       if ((d = zend_hash_find(propers, prot_name)) != NULL) {",
          "705:        php_var_serialize_string(buf, prot_name->val, prot_name->len);",
          "706:        STR_FREE(prot_name);",
          "707:        php_var_serialize_intern(buf, d, var_hash TSRMLS_CC);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "774:        if (Z_TYPE_P(d) == IS_INDIRECT) {",
          "775:         d = Z_INDIRECT_P(d);",
          "776:         if (Z_TYPE_P(d) == IS_UNDEF) {",
          "777:          STR_FREE(prot_name);",
          "778:          break;",
          "779:         }",
          "780:        }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "874:     zend_hash_internal_pointer_reset_ex(myht, &pos);",
          "875:     for (;; zend_hash_move_forward_ex(myht, &pos)) {",
          "878:       break;",
          "879:      }",
          "880:      if (incomplete_class && strcmp(key->val, MAGIC_MEMBER) == 0) {",
          "881:       continue;",
          "882:      }",
          "",
          "[Removed Lines]",
          "876:      i = zend_hash_get_current_key_ex(myht, &key, &index, 0, &pos);",
          "877:      if (i == HASH_KEY_NON_EXISTENT) {",
          "",
          "[Added Lines]",
          "952:      data = zend_hash_get_current_data_ex(myht, &pos);",
          "953:      if (!data) {",
          "955:      } else if (Z_TYPE_P(data) == IS_INDIRECT) {",
          "956:       data = Z_INDIRECT_P(data);",
          "957:       if (Z_TYPE_P(data) == IS_UNDEF) {",
          "958:        continue;",
          "959:       }",
          "962:      i = zend_hash_get_current_key_ex(myht, &key, &index, 0, &pos);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "897:       || (Z_TYPE_P(data) == IS_ARRAY && Z_ARRVAL_P(data)->nApplyCount > 1)",
          "898:      ) {",
          "899:       smart_str_appendl(buf, \"N;\", 2);",
          "",
          "[Removed Lines]",
          "895:      if ((data = zend_hash_get_current_data_ex(myht, &pos)) == NULL",
          "896:       || (Z_TYPE_P(data) == IS_ARRAY && Z_TYPE_P(struc) == IS_ARRAY && Z_ARR_P(data) == Z_ARR_P(struc))",
          "",
          "[Added Lines]",
          "978:      if ((Z_TYPE_P(data) == IS_ARRAY && Z_TYPE_P(struc) == IS_ARRAY && Z_ARR_P(data) == Z_ARR_P(struc))",
          "",
          "---------------"
        ],
        "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c": [
          "File: ext/standard/var_unserializer.c -> ext/standard/var_unserializer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:   (*var_hashx)->last_dtor = var_hash;",
          "80:  }",
          "83:  var_hash->data[var_hash->used_slots++] = rval;",
          "84: }",
          "",
          "[Removed Lines]",
          "82:  Z_ADDREF_P(rval);",
          "",
          "[Added Lines]",
          "82:  if (Z_REFCOUNTED_P(rval)) Z_ADDREF_P(rval);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "306:   } else {",
          "308:    convert_to_string(&key);",
          "310:   }",
          "312:   zval_dtor(&key);",
          "",
          "[Removed Lines]",
          "309:    data = zend_hash_update(ht, Z_STR(key), &d);",
          "",
          "[Added Lines]",
          "310: #if 1",
          "311:    data = zend_hash_update_ind(ht, Z_STR(key), &d);",
          "312: #else",
          "313:    if ((data = zend_hash_find(ht, Z_STR(key))) != NULL) {",
          "314:     if (Z_TYPE_P(data) == IS_INDIRECT) {",
          "315:      data = Z_INDIRECT_P(data);",
          "316:     }",
          "317:     zval_ptr_dtor(data);",
          "319:     ZVAL_UNDEF(data);",
          "320:    } else {",
          "321:     data = zend_hash_update(ht, Z_STR(key), &d);",
          "322:    }",
          "323: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "428:  start = cursor;",
          "432: {",
          "433:  YYCTYPE yych;",
          "434:  static const unsigned char yybm[] = {",
          "",
          "[Removed Lines]",
          "431: #line 432 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "445: #line 446 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "488:  yych = *(YYMARKER = ++YYCURSOR);",
          "489:  if (yych == ':') goto yy95;",
          "490: yy3:",
          "492:  { return 0; }",
          "494: yy4:",
          "495:  yych = *(YYMARKER = ++YYCURSOR);",
          "496:  if (yych == ':') goto yy89;",
          "",
          "[Removed Lines]",
          "491: #line 778 \"ext/standard/var_unserializer.re\"",
          "493: #line 494 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "505: #line 792 \"ext/standard/var_unserializer.re\"",
          "507: #line 508 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "533:  goto yy3;",
          "534: yy14:",
          "535:  ++YYCURSOR;",
          "537:  {",
          "539:  php_error_docref(NULL TSRMLS_CC, E_NOTICE, \"Unexpected end of serialized data\");",
          "541: }",
          "543: yy16:",
          "544:  yych = *++YYCURSOR;",
          "545:  goto yy3;",
          "",
          "[Removed Lines]",
          "536: #line 772 \"ext/standard/var_unserializer.re\"",
          "542: #line 543 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "550: #line 786 \"ext/standard/var_unserializer.re\"",
          "556: #line 557 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "569:  yych = *++YYCURSOR;",
          "570:  if (yych != '\"') goto yy18;",
          "571:  ++YYCURSOR;",
          "573:  {",
          "574:  size_t len, len2, len3, maxlen;",
          "575:  long elements;",
          "",
          "[Removed Lines]",
          "572: #line 633 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "586: #line 647 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "709:  return object_common2(UNSERIALIZE_PASSTHRU, elements);",
          "710: }",
          "712: yy25:",
          "713:  yych = *++YYCURSOR;",
          "714:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "711: #line 712 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "725: #line 726 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "733:  yych = *++YYCURSOR;",
          "734:  if (yych != '\"') goto yy18;",
          "735:  ++YYCURSOR;",
          "737:  {",
          "",
          "[Removed Lines]",
          "736: #line 625 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "750: #line 639 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "741:  return object_common2(UNSERIALIZE_PASSTHRU,",
          "742:    object_common1(UNSERIALIZE_PASSTHRU, ZEND_STANDARD_CLASS_DEF_PTR));",
          "743: }",
          "745: yy32:",
          "746:  yych = *++YYCURSOR;",
          "747:  if (yych == '+') goto yy33;",
          "",
          "[Removed Lines]",
          "744: #line 745 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "758: #line 759 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "762:  yych = *++YYCURSOR;",
          "763:  if (yych != '{') goto yy18;",
          "764:  ++YYCURSOR;",
          "766:  {",
          "767:  long elements = parse_iv(start + 2);",
          "",
          "[Removed Lines]",
          "765: #line 604 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "779: #line 618 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "784:  return finish_nested_data(UNSERIALIZE_PASSTHRU);",
          "785: }",
          "787: yy39:",
          "788:  yych = *++YYCURSOR;",
          "789:  if (yych == '+') goto yy40;",
          "",
          "[Removed Lines]",
          "786: #line 787 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "800: #line 801 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "804:  yych = *++YYCURSOR;",
          "805:  if (yych != '\"') goto yy18;",
          "806:  ++YYCURSOR;",
          "808:  {",
          "809:  size_t len, maxlen;",
          "",
          "[Removed Lines]",
          "807: #line 574 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "821: #line 588 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "834:  efree(str);",
          "835:  return 1;",
          "836: }",
          "838: yy46:",
          "839:  yych = *++YYCURSOR;",
          "840:  if (yych == '+') goto yy47;",
          "",
          "[Removed Lines]",
          "837: #line 838 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "851: #line 852 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "855:  yych = *++YYCURSOR;",
          "856:  if (yych != '\"') goto yy18;",
          "857:  ++YYCURSOR;",
          "859:  {",
          "860:  size_t len, maxlen;",
          "861:  char *str;",
          "",
          "[Removed Lines]",
          "858: #line 547 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "872: #line 561 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "882:  ZVAL_STRINGL(rval, str, len);",
          "883:  return 1;",
          "884: }",
          "886: yy53:",
          "887:  yych = *++YYCURSOR;",
          "888:  if (yych <= '/') {",
          "",
          "[Removed Lines]",
          "885: #line 886 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "899: #line 900 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "970:  }",
          "971: yy63:",
          "972:  ++YYCURSOR;",
          "974:  {",
          "975: #if SIZEOF_LONG == 4",
          "976: use_double:",
          "",
          "[Removed Lines]",
          "973: #line 538 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "987: #line 552 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "979:  ZVAL_DOUBLE(rval, zend_strtod((const char *)start + 2, NULL));",
          "980:  return 1;",
          "981: }",
          "983: yy65:",
          "984:  yych = *++YYCURSOR;",
          "985:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "982: #line 983 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "996: #line 997 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1038:  yych = *++YYCURSOR;",
          "1039:  if (yych != ';') goto yy18;",
          "1040:  ++YYCURSOR;",
          "1042:  {",
          "",
          "[Removed Lines]",
          "1041: #line 522 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1055: #line 536 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1055:  return 1;",
          "1056: }",
          "1058: yy76:",
          "1059:  yych = *++YYCURSOR;",
          "1060:  if (yych == 'N') goto yy73;",
          "",
          "[Removed Lines]",
          "1057: #line 1058 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1071: #line 1072 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1081:  if (yych <= '9') goto yy79;",
          "1082:  if (yych != ';') goto yy18;",
          "1083:  ++YYCURSOR;",
          "1085:  {",
          "1086: #if SIZEOF_LONG == 4",
          "1087:  int digits = YYCURSOR - start - 3;",
          "",
          "[Removed Lines]",
          "1084: #line 496 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1098: #line 510 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1107:  ZVAL_LONG(rval, parse_iv(start + 2));",
          "1108:  return 1;",
          "1109: }",
          "1111: yy83:",
          "1112:  yych = *++YYCURSOR;",
          "1113:  if (yych <= '/') goto yy18;",
          "",
          "[Removed Lines]",
          "1110: #line 1111 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1124: #line 1125 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1115:  yych = *++YYCURSOR;",
          "1116:  if (yych != ';') goto yy18;",
          "1117:  ++YYCURSOR;",
          "1119:  {",
          "1121:  ZVAL_BOOL(rval, parse_iv(start + 2));",
          "1122:  return 1;",
          "1123: }",
          "1125: yy87:",
          "1126:  ++YYCURSOR;",
          "1128:  {",
          "1130:  ZVAL_NULL(rval);",
          "1131:  return 1;",
          "1132: }",
          "1134: yy89:",
          "1135:  yych = *++YYCURSOR;",
          "1136:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "1118: #line 490 \"ext/standard/var_unserializer.re\"",
          "1124: #line 1125 \"ext/standard/var_unserializer.c\"",
          "1127: #line 484 \"ext/standard/var_unserializer.re\"",
          "1133: #line 1134 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1132: #line 504 \"ext/standard/var_unserializer.re\"",
          "1138: #line 1139 \"ext/standard/var_unserializer.c\"",
          "1141: #line 498 \"ext/standard/var_unserializer.re\"",
          "1147: #line 1148 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1153:  if (yych <= '9') goto yy91;",
          "1154:  if (yych != ';') goto yy18;",
          "1155:  ++YYCURSOR;",
          "1157:  {",
          "1158:  long id;",
          "",
          "[Removed Lines]",
          "1156: #line 461 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1170: #line 475 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1177:  return 1;",
          "1178: }",
          "1180: yy95:",
          "1181:  yych = *++YYCURSOR;",
          "1182:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "1179: #line 1180 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1193: #line 1194 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1199:  if (yych <= '9') goto yy97;",
          "1200:  if (yych != ';') goto yy18;",
          "1201:  ++YYCURSOR;",
          "1203:  {",
          "1204:  long id;",
          "",
          "[Removed Lines]",
          "1202: #line 436 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1216: #line 450 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1225:  return 1;",
          "1226: }",
          "1228: }",
          "1232:  return 0;",
          "",
          "[Removed Lines]",
          "1227: #line 1228 \"ext/standard/var_unserializer.c\"",
          "1229: #line 780 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1241: #line 1242 \"ext/standard/var_unserializer.c\"",
          "1243: #line 794 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------"
        ],
        "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re": [
          "File: ext/standard/var_unserializer.re -> ext/standard/var_unserializer.re",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:   (*var_hashx)->last_dtor = var_hash;",
          "78:  }",
          "81:  var_hash->data[var_hash->used_slots++] = rval;",
          "82: }",
          "",
          "[Removed Lines]",
          "80:  Z_ADDREF_P(rval);",
          "",
          "[Added Lines]",
          "80:  if (Z_REFCOUNTED_P(rval)) Z_ADDREF_P(rval);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "310:   } else {",
          "312:    convert_to_string(&key);",
          "314:   }",
          "316:   zval_dtor(&key);",
          "",
          "[Removed Lines]",
          "313:    data = zend_hash_update(ht, Z_STR(key), &d);",
          "",
          "[Added Lines]",
          "314: #if 1",
          "315:    data = zend_hash_update_ind(ht, Z_STR(key), &d);",
          "316: #else",
          "317:    if ((data = zend_hash_find(ht, Z_STR(key))) != NULL) {",
          "318:     if (Z_TYPE_P(data) == IS_INDIRECT) {",
          "319:      data = Z_INDIRECT_P(data);",
          "320:     }",
          "321:     zval_ptr_dtor(data);",
          "323:     ZVAL_UNDEF(data);",
          "324:    } else {",
          "325:     data = zend_hash_update(ht, Z_STR(key), &d);",
          "326:    }",
          "327: #endif",
          "",
          "---------------"
        ],
        "main/main.c||main/main.c": [
          "File: main/main.c -> main/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "858:  if (PG(track_errors) && module_initialized &&",
          "859:    (Z_TYPE(EG(user_error_handler)) == IS_UNDEF || !(EG(user_error_handler_error_reporting) & type))) {",
          "867:   }",
          "868:  }",
          "869:  if (replace_buffer) {",
          "",
          "[Removed Lines]",
          "860:   if (!EG(active_symbol_table)) {",
          "861:    zend_rebuild_symbol_table(TSRMLS_C);",
          "862:   }",
          "863:   if (EG(active_symbol_table)) {",
          "864:    zval tmp;",
          "865:    ZVAL_STRINGL(&tmp, buffer, buffer_len);",
          "866:    zend_hash_str_update(&EG(active_symbol_table)->ht, \"php_errormsg\", sizeof(\"php_errormsg\")-1, &tmp);",
          "",
          "[Added Lines]",
          "860:   zval tmp;",
          "861:   ZVAL_STRINGL(&tmp, buffer, buffer_len);",
          "862:   if (zend_set_local_var(\"php_errormsg\", sizeof(\"php_errormsg\")-1, &tmp, 0 TSRMLS_CC) == FAILURE) {",
          "863:    zval_ptr_dtor(&tmp);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1195:   if (EG(active_symbol_table)) {",
          "1196:    zval tmp;",
          "1197:    ZVAL_STRINGL(&tmp, buffer, buffer_len);",
          "1199:   }",
          "1200:  }",
          "",
          "[Removed Lines]",
          "1198:    zend_hash_str_update(&EG(active_symbol_table)->ht, \"php_errormsg\", sizeof(\"php_errormsg\")-1, &tmp);",
          "",
          "[Added Lines]",
          "1195:    if (zend_set_local_var(\"php_errormsg\", sizeof(\"php_errormsg\")-1, &tmp, 0 TSRMLS_CC) == FAILURE) {",
          "1196:     zval_ptr_dtor(&tmp);",
          "1197:    }",
          "",
          "---------------"
        ],
        "main/php_variables.c||main/php_variables.c": [
          "File: main/php_variables.c -> main/php_variables.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "181:      return;",
          "182:     }",
          "183:    } else {",
          "188:     }",
          "189:    }",
          "190:    symtable1 = Z_ARRVAL_P(gpc_element_p);",
          "",
          "[Removed Lines]",
          "184:     if ((gpc_element_p = zend_symtable_str_find(symtable1, index, index_len)) == NULL",
          "185:      || Z_TYPE_P(gpc_element_p) != IS_ARRAY) {",
          "186:      array_init(&gpc_element);",
          "187:      gpc_element_p = zend_symtable_str_update(symtable1, index, index_len, &gpc_element);",
          "",
          "[Added Lines]",
          "184:     gpc_element_p = zend_symtable_str_find(symtable1, index, index_len);",
          "185:     if (!gpc_element_p) {",
          "186:      zval tmp;",
          "187:      array_init(&tmp);",
          "188:      gpc_element_p = zend_symtable_str_update_ind(symtable1, index, index_len, &tmp);",
          "189:     } else {",
          "190:      if (Z_TYPE_P(gpc_element_p) == IS_INDIRECT) {",
          "191:       gpc_element_p = Z_INDIRECT_P(gpc_element_p);",
          "192:      }",
          "193:      if (Z_TYPE_P(gpc_element_p) != IS_ARRAY) {",
          "194:       zval_ptr_dtor(gpc_element_p);",
          "195:       array_init(gpc_element_p);",
          "196:      }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "219:     zend_symtable_str_exists(symtable1, index, index_len)) {",
          "220:     zval_ptr_dtor(&gpc_element);",
          "221:    } else {",
          "223:    }",
          "224:   }",
          "225:  }",
          "",
          "[Removed Lines]",
          "222:     gpc_element_p = zend_symtable_str_update(symtable1, index, index_len, &gpc_element);",
          "",
          "[Added Lines]",
          "231:     gpc_element_p = zend_symtable_str_update_ind(symtable1, index, index_len, &gpc_element);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2075fb2b73c2d56c7acfb29773a2dc68b8d2f29d",
      "candidate_info": {
        "commit_hash": "2075fb2b73c2d56c7acfb29773a2dc68b8d2f29d",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/2075fb2b73c2d56c7acfb29773a2dc68b8d2f29d",
        "files": [
          "ext/exif/exif.c",
          "ext/exif/tests/bug73737.phpt",
          "ext/exif/tests/bug73737.tiff",
          "ext/phar/phar.c",
          "ext/phar/tests/bug73764.phar",
          "ext/phar/tests/bug73764.phpt",
          "ext/phar/tests/bug73768.phar",
          "ext/phar/tests/bug73768.phpt",
          "ext/standard/tests/serialize/bug73825.phpt",
          "ext/standard/var_unserializer.c",
          "ext/standard/var_unserializer.re"
        ],
        "message": "Merge branch 'PHP-7.0' into PHP-7.1\n\n* PHP-7.0:\n  Fix bug #73737 FPE when parsing a tag format\n  Fix bug #73773 - Seg fault when loading hostile phar\n  Fix bug #73825 - Heap out of bounds read on unserialize in finish_nested_data()\n  Fix bug #73768 - Memory corruption when loading hostile phar\n  Fix int overflows in phar (bug #73764)",
        "before_after_code_files": [
          "ext/exif/exif.c||ext/exif/exif.c",
          "ext/exif/tests/bug73737.phpt||ext/exif/tests/bug73737.phpt",
          "ext/phar/phar.c||ext/phar/phar.c",
          "ext/phar/tests/bug73764.phpt||ext/phar/tests/bug73764.phpt",
          "ext/phar/tests/bug73768.phpt||ext/phar/tests/bug73768.phpt",
          "ext/standard/tests/serialize/bug73825.phpt||ext/standard/tests/serialize/bug73825.phpt",
          "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
          "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
            "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
          ],
          "candidate": [
            "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
            "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
          ]
        }
      },
      "candidate_diff": {
        "ext/exif/exif.c||ext/exif/exif.c": [
          "File: ext/exif/exif.c -> ext/exif/exif.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1297:    if (s_den == 0) {",
          "1298:     return 0;",
          "1299:    } else {",
          "1301:    }",
          "1303:   case TAG_FMT_SSHORT:    return php_ifd_get16u(value, motorola_intel);",
          "",
          "[Removed Lines]",
          "1300:     return php_ifd_get32s(value, motorola_intel) / s_den;",
          "",
          "[Added Lines]",
          "1300:     return (size_t)((double)php_ifd_get32s(value, motorola_intel) / s_den);",
          "",
          "---------------"
        ],
        "ext/exif/tests/bug73737.phpt||ext/exif/tests/bug73737.phpt": [
          "File: ext/exif/tests/bug73737.phpt -> ext/exif/tests/bug73737.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #73737 (Crash when parsing a tag format)",
          "3: --SKIPIF--",
          "4: <?php if (!extension_loaded('exif')) print 'skip exif extension not available';?>",
          "5: --FILE--",
          "6: <?php",
          "7:  $exif = exif_thumbnail(__DIR__ . '/bug73737.tiff');",
          "8:  var_dump($exif);",
          "9: ?>",
          "10: --EXPECTF--",
          "11: Warning: exif_thumbnail(bug73737.tiff): Error in TIFF: filesize(x0030) less than start of IFD dir(x10102) in %s line %d",
          "12: bool(false)",
          "",
          "---------------"
        ],
        "ext/phar/phar.c||ext/phar/phar.c": [
          "File: ext/phar/phar.c -> ext/phar/phar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "984:   if (alias && alias_len && (alias_len != (int)tmp_len || strncmp(alias, buffer, tmp_len)))",
          "985:   {",
          "987:    php_stream_close(fp);",
          "989:    if (signature) {",
          "",
          "[Removed Lines]",
          "986:    buffer[tmp_len] = '\\0';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "991:    }",
          "993:    if (error) {",
          "995:    }",
          "997:    efree(savebuf);",
          "",
          "[Removed Lines]",
          "994:     spprintf(error, 0, \"cannot load phar \\\"%s\\\" with implicit alias \\\"%s\\\" under different alias \\\"%s\\\"\", fname, buffer, alias);",
          "",
          "[Added Lines]",
          "993:     spprintf(error, 0, \"cannot load phar \\\"%s\\\" with implicit alias \\\"%.*s\\\" under different alias \\\"%s\\\"\", fname, tmp_len, buffer, alias);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1057:  entry.is_persistent = mydata->is_persistent;",
          "1059:  for (manifest_index = 0; manifest_index < manifest_count; ++manifest_index) {",
          "1061:    MAPPHAR_FAIL(\"internal corruption of phar \\\"%s\\\" (truncated manifest entry)\")",
          "1062:   }",
          "",
          "[Removed Lines]",
          "1060:   if (buffer + 4 > endbuffer) {",
          "",
          "[Added Lines]",
          "1059:   if (buffer + 28 > endbuffer) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1071:    entry.manifest_pos = manifest_index;",
          "1072:   }",
          "1075:    MAPPHAR_FAIL(\"internal corruption of phar \\\"%s\\\" (truncated manifest entry)\");",
          "1076:   }",
          "",
          "[Removed Lines]",
          "1074:   if (entry.filename_len + 20 > (size_t)(endbuffer - buffer)) {",
          "",
          "[Added Lines]",
          "1073:   if (entry.filename_len > (size_t)(endbuffer - buffer - 24)) {",
          "",
          "---------------"
        ],
        "ext/phar/tests/bug73764.phpt||ext/phar/tests/bug73764.phpt": [
          "File: ext/phar/tests/bug73764.phpt -> ext/phar/tests/bug73764.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Phar: PHP bug #73764: Crash while loading hostile phar archive",
          "3: --SKIPIF--",
          "4: <?php if (!extension_loaded(\"phar\")) die(\"skip\"); ?>",
          "5: --FILE--",
          "6: <?php",
          "7: chdir(__DIR__);",
          "8: try {",
          "9: $p = Phar::LoadPhar('bug73764.phar', 'alias.phar');",
          "10: echo \"OK\\n\";",
          "11: } catch(PharException $e) {",
          "12:  echo $e->getMessage();",
          "13: }",
          "14: ?>",
          "15: --EXPECTF--",
          "16: internal corruption of phar \"%sbug73764.phar\" (truncated manifest entry)",
          "",
          "---------------"
        ],
        "ext/phar/tests/bug73768.phpt||ext/phar/tests/bug73768.phpt": [
          "File: ext/phar/tests/bug73768.phpt -> ext/phar/tests/bug73768.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Phar: PHP bug #73768: Memory corruption when loading hostile phar",
          "3: --SKIPIF--",
          "4: <?php if (!extension_loaded(\"phar\")) die(\"skip\"); ?>",
          "5: --FILE--",
          "6: <?php",
          "7: chdir(__DIR__);",
          "8: try {",
          "9: $p = Phar::LoadPhar('bug73768.phar', 'alias.phar');",
          "10: echo \"OK\\n\";",
          "11: } catch(PharException $e) {",
          "12:  echo $e->getMessage();",
          "13: }",
          "14: ?>",
          "15: --EXPECTF--",
          "16: cannot load phar \"%sbug73768.phar\" with implicit alias \"\" under different alias \"alias.phar\"",
          "",
          "---------------"
        ],
        "ext/standard/tests/serialize/bug73825.phpt||ext/standard/tests/serialize/bug73825.phpt": [
          "File: ext/standard/tests/serialize/bug73825.phpt -> ext/standard/tests/serialize/bug73825.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #73825 Heap out of bounds read on unserialize in finish_nested_data()",
          "3: --FILE--",
          "4: <?php",
          "5: $obj = unserialize('O:8:\"00000000\":');",
          "6: var_dump($obj);",
          "7: ?>",
          "8: --EXPECTF--",
          "9: Warning: Bad unserialize data in %sbug73825.php on line %d",
          "11: Notice: unserialize(): Error at offset 13 of 15 bytes in %sbug73825.php on line %d",
          "12: bool(false)",
          "",
          "---------------"
        ],
        "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c": [
          "File: ext/standard/var_unserializer.c -> ext/standard/var_unserializer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "478: {",
          "479:  zend_long elements;",
          "481:  elements = parse_iv2((*p) + 2, p);",
          "483:  (*p) += 2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "481:  if( *p >= max - 2) {",
          "482:   zend_error(E_WARNING, \"Bad unserialize data\");",
          "483:   return -1;",
          "484:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "487:  } else {",
          "492:  }",
          "494:  return elements;",
          "",
          "[Removed Lines]",
          "490:   zend_error(E_WARNING, \"Erroneous data format for unserializing '%s'\", ZSTR_VAL(ce->name));",
          "491:   return 0;",
          "",
          "[Added Lines]",
          "495:   zend_error(E_WARNING, \"Erroneous data format for unserializing '%s'\", ce->name);",
          "496:   return -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "589:  start = cursor;",
          "593: {",
          "594:  YYCTYPE yych;",
          "595:  static const unsigned char yybm[] = {",
          "",
          "[Removed Lines]",
          "592: #line 593 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "597: #line 598 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "626:     0,   0,   0,   0,   0,   0,   0,   0,",
          "627:     0,   0,   0,   0,   0,   0,   0,   0,",
          "628:  };",
          "629:  if ((YYLIMIT - YYCURSOR) < 7) YYFILL(7);",
          "630:  yych = *YYCURSOR;",
          "631:  switch (yych) {",
          "632:  case 'C':",
          "634:  case 'N': goto yy5;",
          "641:  case 'o': goto yy12;",
          "646:  }",
          "647: yy2:",
          "649: yy3:",
          "651:  { return 0; }",
          "653: yy4:",
          "654:  yych = *(YYMARKER = ++YYCURSOR);",
          "656:  goto yy3;",
          "657: yy5:",
          "658:  yych = *++YYCURSOR;",
          "660:  goto yy3;",
          "661: yy6:",
          "662:  yych = *(YYMARKER = ++YYCURSOR);",
          "664:  goto yy3;",
          "665: yy7:",
          "666:  yych = *(YYMARKER = ++YYCURSOR);",
          "668:  goto yy3;",
          "669: yy8:",
          "670:  yych = *(YYMARKER = ++YYCURSOR);",
          "672:  goto yy3;",
          "673: yy9:",
          "674:  yych = *(YYMARKER = ++YYCURSOR);",
          "676:  goto yy3;",
          "677: yy10:",
          "678:  yych = *(YYMARKER = ++YYCURSOR);",
          "680:  goto yy3;",
          "681: yy11:",
          "682:  yych = *(YYMARKER = ++YYCURSOR);",
          "684:  goto yy3;",
          "685: yy12:",
          "686:  yych = *(YYMARKER = ++YYCURSOR);",
          "688:  goto yy3;",
          "689: yy13:",
          "690:  yych = *(YYMARKER = ++YYCURSOR);",
          "692:  goto yy3;",
          "693: yy14:",
          "698:  ++YYCURSOR;",
          "700:  {",
          "702:  php_error_docref(NULL, E_NOTICE, \"Unexpected end of serialized data\");",
          "704: }",
          "706: yy17:",
          "707:  yych = *++YYCURSOR;",
          "708:  if (yybm[0+yych] & 128) {",
          "710:  }",
          "712: yy18:",
          "713:  YYCURSOR = YYMARKER;",
          "714:  goto yy3;",
          "715: yy19:",
          "725:  yych = *++YYCURSOR;",
          "734:  }",
          "740:  goto yy18;",
          "749:  if (yych <= '/') goto yy18;",
          "753:  yych = *++YYCURSOR;",
          "762:   }",
          "771:   }",
          "772:  }",
          "783:  }",
          "794:  }",
          "796:  yych = *++YYCURSOR;",
          "797:  if (yych <= ',') {",
          "800:  } else {",
          "802:   if (yych <= '/') goto yy18;",
          "804:   goto yy18;",
          "805:  }",
          "807:  yych = *++YYCURSOR;",
          "809:  if (yych <= '/') goto yy18;",
          "819:  ++YYCURSOR;",
          "820:  if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);",
          "821:  yych = *YYCURSOR;",
          "825:  if (yych <= '/') goto yy18;",
          "829:  yych = *++YYCURSOR;",
          "833:  ++YYCURSOR;",
          "836:  if (yych <= '/') goto yy18;",
          "837:  if (yych <= '9') goto yy34;",
          "839:  goto yy18;",
          "841:  yych = *++YYCURSOR;",
          "842:  if (yych <= '/') goto yy18;",
          "843:  if (yych >= ':') goto yy18;",
          "845:  ++YYCURSOR;",
          "846:  if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);",
          "847:  yych = *YYCURSOR;",
          "848:  if (yych <= '/') goto yy18;",
          "853:  yych = *++YYCURSOR;",
          "857:  ++YYCURSOR;",
          "882:  }",
          "910:  }",
          "920:  yych = *++YYCURSOR;",
          "921:  if (yych <= '/') goto yy18;",
          "930:  goto yy18;",
          "932:  yych = *++YYCURSOR;",
          "933:  if (yych <= '/') goto yy18;",
          "934:  if (yych >= ':') goto yy18;",
          "936:  ++YYCURSOR;",
          "937:  if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);",
          "938:  yych = *YYCURSOR;",
          "939:  if (yych <= '/') goto yy18;",
          "944:  yych = *++YYCURSOR;",
          "948:  ++YYCURSOR;",
          "951:  if (yych <= '/') goto yy18;",
          "954:  goto yy18;",
          "956:  yych = *++YYCURSOR;",
          "957:  if (yych <= '/') goto yy18;",
          "958:  if (yych >= ':') goto yy18;",
          "960:  ++YYCURSOR;",
          "961:  if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);",
          "962:  yych = *YYCURSOR;",
          "963:  if (yych <= '/') goto yy18;",
          "968:  yych = *++YYCURSOR;",
          "972:  ++YYCURSOR;",
          "974:  {",
          "982:   return 0;",
          "983:  }",
          "989:  }",
          "995:  }",
          "997:  return 1;",
          "998: }",
          "1001:  yych = *++YYCURSOR;",
          "1003:  goto yy18;",
          "1005:  yych = *++YYCURSOR;",
          "1007:  goto yy18;",
          "1009:  ++YYCURSOR;",
          "1018:  ++YYCURSOR;",
          "1019:  if ((YYLIMIT - YYCURSOR) < 4) YYFILL(4);",
          "1020:  yych = *YYCURSOR;",
          "1021:  if (yych <= ';') {",
          "1022:   if (yych <= '/') goto yy18;",
          "1024:   if (yych <= ':') goto yy18;",
          "1025:  } else {",
          "1026:   if (yych <= 'E') {",
          "1027:    if (yych <= 'D') goto yy18;",
          "1029:   } else {",
          "1031:    goto yy18;",
          "1032:   }",
          "1033:  }",
          "1035:  ++YYCURSOR;",
          "1037:  {",
          "1038: #if SIZEOF_ZEND_LONG == 4",
          "1039: use_double:",
          "",
          "[Removed Lines]",
          "633:  case 'O': goto yy4;",
          "635:  case 'R': goto yy6;",
          "636:  case 'S': goto yy7;",
          "637:  case 'a': goto yy8;",
          "638:  case 'b': goto yy9;",
          "639:  case 'd': goto yy10;",
          "640:  case 'i': goto yy11;",
          "642:  case 'r': goto yy13;",
          "643:  case 's': goto yy14;",
          "644:  case '}': goto yy15;",
          "645:  default: goto yy2;",
          "648:  ++YYCURSOR;",
          "650: #line 961 \"ext/standard/var_unserializer.re\"",
          "652: #line 653 \"ext/standard/var_unserializer.c\"",
          "655:  if (yych == ':') goto yy17;",
          "659:  if (yych == ';') goto yy19;",
          "663:  if (yych == ':') goto yy21;",
          "667:  if (yych == ':') goto yy22;",
          "671:  if (yych == ':') goto yy23;",
          "675:  if (yych == ':') goto yy24;",
          "679:  if (yych == ':') goto yy25;",
          "683:  if (yych == ':') goto yy26;",
          "687:  if (yych == ':') goto yy27;",
          "691:  if (yych == ':') goto yy28;",
          "694:  yych = *(YYMARKER = ++YYCURSOR);",
          "695:  if (yych == ':') goto yy29;",
          "696:  goto yy3;",
          "697: yy15:",
          "699: #line 955 \"ext/standard/var_unserializer.re\"",
          "705: #line 706 \"ext/standard/var_unserializer.c\"",
          "709:   goto yy31;",
          "711:  if (yych == '+') goto yy30;",
          "716:  ++YYCURSOR;",
          "717: #line 648 \"ext/standard/var_unserializer.re\"",
          "718:  {",
          "720:  ZVAL_NULL(rval);",
          "721:  return 1;",
          "722: }",
          "723: #line 724 \"ext/standard/var_unserializer.c\"",
          "724: yy21:",
          "726:  if (yych <= ',') {",
          "727:   if (yych == '+') goto yy33;",
          "728:   goto yy18;",
          "729:  } else {",
          "730:   if (yych <= '-') goto yy33;",
          "731:   if (yych <= '/') goto yy18;",
          "732:   if (yych <= '9') goto yy34;",
          "733:   goto yy18;",
          "735: yy22:",
          "736:  yych = *++YYCURSOR;",
          "737:  if (yych == '+') goto yy36;",
          "738:  if (yych <= '/') goto yy18;",
          "739:  if (yych <= '9') goto yy37;",
          "741: yy23:",
          "742:  yych = *++YYCURSOR;",
          "743:  if (yych == '+') goto yy39;",
          "744:  if (yych <= '/') goto yy18;",
          "745:  if (yych <= '9') goto yy40;",
          "746:  goto yy18;",
          "747: yy24:",
          "748:  yych = *++YYCURSOR;",
          "750:  if (yych <= '1') goto yy42;",
          "751:  goto yy18;",
          "752: yy25:",
          "754:  if (yych <= '/') {",
          "755:   if (yych <= ',') {",
          "756:    if (yych == '+') goto yy43;",
          "757:    goto yy18;",
          "758:   } else {",
          "759:    if (yych <= '-') goto yy44;",
          "760:    if (yych <= '.') goto yy45;",
          "761:    goto yy18;",
          "763:  } else {",
          "764:   if (yych <= 'I') {",
          "765:    if (yych <= '9') goto yy46;",
          "766:    if (yych <= 'H') goto yy18;",
          "767:    goto yy48;",
          "768:   } else {",
          "769:    if (yych == 'N') goto yy49;",
          "770:    goto yy18;",
          "773: yy26:",
          "774:  yych = *++YYCURSOR;",
          "775:  if (yych <= ',') {",
          "776:   if (yych == '+') goto yy50;",
          "777:   goto yy18;",
          "778:  } else {",
          "779:   if (yych <= '-') goto yy50;",
          "780:   if (yych <= '/') goto yy18;",
          "781:   if (yych <= '9') goto yy51;",
          "782:   goto yy18;",
          "784: yy27:",
          "785:  yych = *++YYCURSOR;",
          "786:  if (yych <= ',') {",
          "787:   if (yych == '+') goto yy53;",
          "788:   goto yy18;",
          "789:  } else {",
          "790:   if (yych <= '-') goto yy53;",
          "791:   if (yych <= '/') goto yy18;",
          "792:   if (yych <= '9') goto yy54;",
          "793:   goto yy18;",
          "795: yy28:",
          "798:   if (yych == '+') goto yy56;",
          "799:   goto yy18;",
          "801:   if (yych <= '-') goto yy56;",
          "803:   if (yych <= '9') goto yy57;",
          "806: yy29:",
          "808:  if (yych == '+') goto yy59;",
          "810:  if (yych <= '9') goto yy60;",
          "811:  goto yy18;",
          "812: yy30:",
          "813:  yych = *++YYCURSOR;",
          "814:  if (yybm[0+yych] & 128) {",
          "815:   goto yy31;",
          "816:  }",
          "817:  goto yy18;",
          "818: yy31:",
          "822:  if (yybm[0+yych] & 128) {",
          "823:   goto yy31;",
          "824:  }",
          "826:  if (yych <= ':') goto yy62;",
          "827:  goto yy18;",
          "828: yy33:",
          "830:  if (yych <= '/') goto yy18;",
          "831:  if (yych >= ':') goto yy18;",
          "832: yy34:",
          "834:  if (YYLIMIT <= YYCURSOR) YYFILL(1);",
          "835:  yych = *YYCURSOR;",
          "838:  if (yych == ';') goto yy63;",
          "840: yy36:",
          "844: yy37:",
          "849:  if (yych <= '9') goto yy37;",
          "850:  if (yych <= ':') goto yy65;",
          "851:  goto yy18;",
          "852: yy39:",
          "854:  if (yych <= '/') goto yy18;",
          "855:  if (yych >= ':') goto yy18;",
          "856: yy40:",
          "858:  if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);",
          "859:  yych = *YYCURSOR;",
          "860:  if (yych <= '/') goto yy18;",
          "861:  if (yych <= '9') goto yy40;",
          "862:  if (yych <= ':') goto yy66;",
          "863:  goto yy18;",
          "864: yy42:",
          "865:  yych = *++YYCURSOR;",
          "866:  if (yych == ';') goto yy67;",
          "867:  goto yy18;",
          "868: yy43:",
          "869:  yych = *++YYCURSOR;",
          "870:  if (yych == '.') goto yy45;",
          "871:  if (yych <= '/') goto yy18;",
          "872:  if (yych <= '9') goto yy46;",
          "873:  goto yy18;",
          "874: yy44:",
          "875:  yych = *++YYCURSOR;",
          "876:  if (yych <= '/') {",
          "877:   if (yych != '.') goto yy18;",
          "878:  } else {",
          "879:   if (yych <= '9') goto yy46;",
          "880:   if (yych == 'I') goto yy48;",
          "881:   goto yy18;",
          "883: yy45:",
          "884:  yych = *++YYCURSOR;",
          "885:  if (yych <= '/') goto yy18;",
          "886:  if (yych <= '9') goto yy69;",
          "887:  goto yy18;",
          "888: yy46:",
          "889:  ++YYCURSOR;",
          "890:  if ((YYLIMIT - YYCURSOR) < 4) YYFILL(4);",
          "891:  yych = *YYCURSOR;",
          "892:  if (yych <= ':') {",
          "893:   if (yych <= '.') {",
          "894:    if (yych <= '-') goto yy18;",
          "895:    goto yy69;",
          "896:   } else {",
          "897:    if (yych <= '/') goto yy18;",
          "898:    if (yych <= '9') goto yy46;",
          "899:    goto yy18;",
          "900:   }",
          "901:  } else {",
          "902:   if (yych <= 'E') {",
          "903:    if (yych <= ';') goto yy71;",
          "904:    if (yych <= 'D') goto yy18;",
          "905:    goto yy73;",
          "906:   } else {",
          "907:    if (yych == 'e') goto yy73;",
          "908:    goto yy18;",
          "909:   }",
          "911: yy48:",
          "912:  yych = *++YYCURSOR;",
          "913:  if (yych == 'N') goto yy74;",
          "914:  goto yy18;",
          "915: yy49:",
          "916:  yych = *++YYCURSOR;",
          "917:  if (yych == 'A') goto yy75;",
          "918:  goto yy18;",
          "919: yy50:",
          "922:  if (yych >= ':') goto yy18;",
          "923: yy51:",
          "924:  ++YYCURSOR;",
          "925:  if (YYLIMIT <= YYCURSOR) YYFILL(1);",
          "926:  yych = *YYCURSOR;",
          "927:  if (yych <= '/') goto yy18;",
          "928:  if (yych <= '9') goto yy51;",
          "929:  if (yych == ';') goto yy76;",
          "931: yy53:",
          "935: yy54:",
          "940:  if (yych <= '9') goto yy54;",
          "941:  if (yych <= ':') goto yy78;",
          "942:  goto yy18;",
          "943: yy56:",
          "945:  if (yych <= '/') goto yy18;",
          "946:  if (yych >= ':') goto yy18;",
          "947: yy57:",
          "949:  if (YYLIMIT <= YYCURSOR) YYFILL(1);",
          "950:  yych = *YYCURSOR;",
          "952:  if (yych <= '9') goto yy57;",
          "953:  if (yych == ';') goto yy79;",
          "955: yy59:",
          "959: yy60:",
          "964:  if (yych <= '9') goto yy60;",
          "965:  if (yych <= ':') goto yy81;",
          "966:  goto yy18;",
          "967: yy62:",
          "969:  if (yych == '\"') goto yy82;",
          "970:  goto yy18;",
          "971: yy63:",
          "973: #line 597 \"ext/standard/var_unserializer.re\"",
          "975:  zend_long id;",
          "978:  if (!var_hash) return 0;",
          "980:  id = parse_iv(start + 2) - 1;",
          "981:  if (id == -1 || (rval_ref = var_access(var_hash, id)) == NULL) {",
          "985:  zval_ptr_dtor(rval);",
          "986:  if (Z_ISUNDEF_P(rval_ref) || (Z_ISREF_P(rval_ref) && Z_ISUNDEF_P(Z_REFVAL_P(rval_ref)))) {",
          "987:   ZVAL_UNDEF(rval);",
          "988:   return 1;",
          "990:  if (Z_ISREF_P(rval_ref)) {",
          "991:   ZVAL_COPY(rval, rval_ref);",
          "992:  } else {",
          "993:   ZVAL_NEW_REF(rval_ref, rval_ref);",
          "994:   ZVAL_COPY(rval, rval_ref);",
          "999: #line 1000 \"ext/standard/var_unserializer.c\"",
          "1000: yy65:",
          "1002:  if (yych == '\"') goto yy84;",
          "1004: yy66:",
          "1006:  if (yych == '{') goto yy86;",
          "1008: yy67:",
          "1010: #line 654 \"ext/standard/var_unserializer.re\"",
          "1011:  {",
          "1013:  ZVAL_BOOL(rval, parse_iv(start + 2));",
          "1014:  return 1;",
          "1015: }",
          "1016: #line 1017 \"ext/standard/var_unserializer.c\"",
          "1017: yy69:",
          "1023:   if (yych <= '9') goto yy69;",
          "1028:    goto yy73;",
          "1030:    if (yych == 'e') goto yy73;",
          "1034: yy71:",
          "1036: #line 702 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "639:  case 'O': goto yy13;",
          "641:  case 'R': goto yy2;",
          "642:  case 'S': goto yy10;",
          "643:  case 'a': goto yy11;",
          "644:  case 'b': goto yy6;",
          "645:  case 'd': goto yy8;",
          "646:  case 'i': goto yy7;",
          "648:  case 'r': goto yy4;",
          "649:  case 's': goto yy9;",
          "650:  case '}': goto yy14;",
          "651:  default: goto yy16;",
          "654:  yych = *(YYMARKER = ++YYCURSOR);",
          "655:  if (yych == ':') goto yy95;",
          "657: #line 975 \"ext/standard/var_unserializer.re\"",
          "659: #line 660 \"ext/standard/var_unserializer.c\"",
          "662:  if (yych == ':') goto yy89;",
          "666:  if (yych == ';') goto yy87;",
          "670:  if (yych == ':') goto yy83;",
          "674:  if (yych == ':') goto yy77;",
          "678:  if (yych == ':') goto yy53;",
          "682:  if (yych == ':') goto yy46;",
          "686:  if (yych == ':') goto yy39;",
          "690:  if (yych == ':') goto yy32;",
          "694:  if (yych == ':') goto yy25;",
          "698:  if (yych == ':') goto yy17;",
          "702: #line 969 \"ext/standard/var_unserializer.re\"",
          "708: #line 709 \"ext/standard/var_unserializer.c\"",
          "709: yy16:",
          "710:  yych = *++YYCURSOR;",
          "711:  goto yy3;",
          "715:   goto yy20;",
          "717:  if (yych == '+') goto yy19;",
          "723:  if (yybm[0+yych] & 128) {",
          "724:   goto yy20;",
          "727: yy20:",
          "728:  ++YYCURSOR;",
          "729:  if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);",
          "730:  yych = *YYCURSOR;",
          "731:  if (yybm[0+yych] & 128) {",
          "732:   goto yy20;",
          "733:  }",
          "735:  if (yych >= ';') goto yy18;",
          "737:  if (yych != '\"') goto yy18;",
          "738:  ++YYCURSOR;",
          "739: #line 817 \"ext/standard/var_unserializer.re\"",
          "740:  {",
          "741:  size_t len, len2, len3, maxlen;",
          "742:  zend_long elements;",
          "743:  char *str;",
          "744:  zend_string *class_name;",
          "745:  zend_class_entry *ce;",
          "746:  int incomplete_class = 0;",
          "748:  int custom_object = 0;",
          "750:  zval user_func;",
          "751:  zval retval;",
          "752:  zval args[1];",
          "754:     if (!var_hash) return 0;",
          "755:  if (*start == 'C') {",
          "756:   custom_object = 1;",
          "757:  }",
          "759:  len2 = len = parse_uiv(start + 2);",
          "760:  maxlen = max - YYCURSOR;",
          "761:  if (maxlen < len || len == 0) {",
          "763:   return 0;",
          "764:  }",
          "766:  str = (char*)YYCURSOR;",
          "768:  YYCURSOR += len;",
          "770:  if (*(YYCURSOR) != '\"') {",
          "772:   return 0;",
          "773:  }",
          "774:  if (*(YYCURSOR+1) != ':') {",
          "776:   return 0;",
          "777:  }",
          "779:  len3 = strspn(str, \"0123456789_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\\177\\200\\201\\202\\203\\204\\205\\206\\207\\210\\211\\212\\213\\214\\215\\216\\217\\220\\221\\222\\223\\224\\225\\226\\227\\230\\231\\232\\233\\234\\235\\236\\237\\240\\241\\242\\243\\244\\245\\246\\247\\250\\251\\252\\253\\254\\255\\256\\257\\260\\261\\262\\263\\264\\265\\266\\267\\270\\271\\272\\273\\274\\275\\276\\277\\300\\301\\302\\303\\304\\305\\306\\307\\310\\311\\312\\313\\314\\315\\316\\317\\320\\321\\322\\323\\324\\325\\326\\327\\330\\331\\332\\333\\334\\335\\336\\337\\340\\341\\342\\343\\344\\345\\346\\347\\350\\351\\352\\353\\354\\355\\356\\357\\360\\361\\362\\363\\364\\365\\366\\367\\370\\371\\372\\373\\374\\375\\376\\377\\\\\");",
          "780:  if (len3 != len)",
          "781:  {",
          "783:   return 0;",
          "784:  }",
          "786:  class_name = zend_string_init(str, len, 0);",
          "788:  do {",
          "789:   if(!unserialize_allowed_class(class_name, var_hash)) {",
          "790:    incomplete_class = 1;",
          "791:    ce = PHP_IC_ENTRY;",
          "792:    break;",
          "796:   BG(serialize_lock)++;",
          "797:   ce = zend_lookup_class(class_name);",
          "798:   if (ce) {",
          "799:    BG(serialize_lock)--;",
          "800:    if (EG(exception)) {",
          "801:     zend_string_release(class_name);",
          "802:     return 0;",
          "803:    }",
          "804:    break;",
          "805:   }",
          "806:   BG(serialize_lock)--;",
          "808:   if (EG(exception)) {",
          "809:    zend_string_release(class_name);",
          "810:    return 0;",
          "811:   }",
          "814:   if ((PG(unserialize_callback_func) == NULL) || (PG(unserialize_callback_func)[0] == '\\0')) {",
          "815:    incomplete_class = 1;",
          "816:    ce = PHP_IC_ENTRY;",
          "817:    break;",
          "818:   }",
          "821:   ZVAL_STRING(&user_func, PG(unserialize_callback_func));",
          "823:   ZVAL_STR_COPY(&args[0], class_name);",
          "824:   BG(serialize_lock)++;",
          "825:   if (call_user_function_ex(CG(function_table), NULL, &user_func, &retval, 1, args, 0, NULL) != SUCCESS) {",
          "826:    BG(serialize_lock)--;",
          "827:    if (EG(exception)) {",
          "828:     zend_string_release(class_name);",
          "829:     zval_ptr_dtor(&user_func);",
          "830:     zval_ptr_dtor(&args[0]);",
          "831:     return 0;",
          "832:    }",
          "833:    php_error_docref(NULL, E_WARNING, \"defined (%s) but not found\", Z_STRVAL(user_func));",
          "834:    incomplete_class = 1;",
          "835:    ce = PHP_IC_ENTRY;",
          "836:    zval_ptr_dtor(&user_func);",
          "837:    zval_ptr_dtor(&args[0]);",
          "838:    break;",
          "839:   }",
          "840:   BG(serialize_lock)--;",
          "841:   zval_ptr_dtor(&retval);",
          "842:   if (EG(exception)) {",
          "843:    zend_string_release(class_name);",
          "844:    zval_ptr_dtor(&user_func);",
          "845:    zval_ptr_dtor(&args[0]);",
          "846:    return 0;",
          "847:   }",
          "850:   BG(serialize_lock)++;",
          "851:   if ((ce = zend_lookup_class(class_name)) == NULL) {",
          "852:    php_error_docref(NULL, E_WARNING, \"Function %s() hasn't defined the class it was called for\", Z_STRVAL(user_func));",
          "853:    incomplete_class = 1;",
          "854:    ce = PHP_IC_ENTRY;",
          "855:   }",
          "856:   BG(serialize_lock)--;",
          "858:   zval_ptr_dtor(&user_func);",
          "859:   zval_ptr_dtor(&args[0]);",
          "860:   break;",
          "861:  } while (1);",
          "865:  if (custom_object) {",
          "866:   int ret;",
          "868:   ret = object_custom(UNSERIALIZE_PASSTHRU, ce);",
          "870:   if (ret && incomplete_class) {",
          "871:    php_store_class_name(rval, ZSTR_VAL(class_name), len2);",
          "873:   zend_string_release(class_name);",
          "874:   return ret;",
          "877:  elements = object_common1(UNSERIALIZE_PASSTHRU, ce);",
          "879:  if (elements < 0) {",
          "880:     efree(class_name);",
          "881:     return 0;",
          "884:  if (incomplete_class) {",
          "885:   php_store_class_name(rval, ZSTR_VAL(class_name), len2);",
          "887:  zend_string_release(class_name);",
          "889:  return object_common2(UNSERIALIZE_PASSTHRU, elements);",
          "890: }",
          "891: #line 892 \"ext/standard/var_unserializer.c\"",
          "892: yy25:",
          "895:   if (yych != '+') goto yy18;",
          "897:   if (yych <= '-') goto yy26;",
          "899:   if (yych <= '9') goto yy27;",
          "902: yy26:",
          "905:  if (yych >= ':') goto yy18;",
          "906: yy27:",
          "911:  if (yych <= '9') goto yy27;",
          "912:  if (yych >= ';') goto yy18;",
          "914:  if (yych != '\"') goto yy18;",
          "916: #line 806 \"ext/standard/var_unserializer.re\"",
          "917:  {",
          "918:  long elements;",
          "919:     if (!var_hash) return 0;",
          "921:  elements = object_common1(UNSERIALIZE_PASSTHRU, ZEND_STANDARD_CLASS_DEF_PTR);",
          "922:  if (elements < 0) {",
          "923:   return 0;",
          "924:  }",
          "925:  return object_common2(UNSERIALIZE_PASSTHRU, elements);",
          "926: }",
          "927: #line 928 \"ext/standard/var_unserializer.c\"",
          "928: yy32:",
          "929:  yych = *++YYCURSOR;",
          "930:  if (yych == '+') goto yy33;",
          "934: yy33:",
          "938: yy34:",
          "943:  if (yych <= '9') goto yy34;",
          "944:  if (yych >= ';') goto yy18;",
          "946:  if (yych != '{') goto yy18;",
          "948: #line 782 \"ext/standard/var_unserializer.re\"",
          "949:  {",
          "950:  zend_long elements = parse_iv(start + 2);",
          "953:     if (!var_hash) return 0;",
          "955:  if (elements < 0) {",
          "956:   return 0;",
          "959:  array_init_size(rval, elements);",
          "960:  if (elements) {",
          "963:   zend_hash_real_init(Z_ARRVAL_P(rval), 0);",
          "966:  if (!process_nested_data(UNSERIALIZE_PASSTHRU, Z_ARRVAL_P(rval), elements, 0)) {",
          "967:   return 0;",
          "968:  }",
          "970:  return finish_nested_data(UNSERIALIZE_PASSTHRU);",
          "971: }",
          "972: #line 973 \"ext/standard/var_unserializer.c\"",
          "973: yy39:",
          "975:  if (yych == '+') goto yy40;",
          "977:  if (yych <= '9') goto yy41;",
          "979: yy40:",
          "983: yy41:",
          "988:  if (yych <= '9') goto yy41;",
          "989:  if (yych >= ';') goto yy18;",
          "991:  if (yych != '\"') goto yy18;",
          "993: #line 748 \"ext/standard/var_unserializer.re\"",
          "994:  {",
          "995:  size_t len, maxlen;",
          "996:  zend_string *str;",
          "998:  len = parse_uiv(start + 2);",
          "999:  maxlen = max - YYCURSOR;",
          "1000:  if (maxlen < len) {",
          "1002:   return 0;",
          "1003:  }",
          "1005:  if ((str = unserialize_str(&YYCURSOR, len, maxlen)) == NULL) {",
          "1006:   return 0;",
          "1007:  }",
          "1009:  if (*(YYCURSOR) != '\"') {",
          "1010:   zend_string_free(str);",
          "1012:   return 0;",
          "1013:  }",
          "1015:  if (*(YYCURSOR + 1) != ';') {",
          "1016:   efree(str);",
          "1018:   return 0;",
          "1019:  }",
          "1021:  YYCURSOR += 2;",
          "1024:  ZVAL_STR(rval, str);",
          "1025:  return 1;",
          "1026: }",
          "1027: #line 1028 \"ext/standard/var_unserializer.c\"",
          "1028: yy46:",
          "1029:  yych = *++YYCURSOR;",
          "1030:  if (yych == '+') goto yy47;",
          "1032:  if (yych <= '9') goto yy48;",
          "1034: yy47:",
          "1038: yy48:",
          "1043:  if (yych <= '9') goto yy48;",
          "1044:  if (yych >= ';') goto yy18;",
          "1046:  if (yych != '\"') goto yy18;",
          "1048: #line 716 \"ext/standard/var_unserializer.re\"",
          "1050:  size_t len, maxlen;",
          "1051:  char *str;",
          "1053:  len = parse_uiv(start + 2);",
          "1054:  maxlen = max - YYCURSOR;",
          "1055:  if (maxlen < len) {",
          "1060:  str = (char*)YYCURSOR;",
          "1062:  YYCURSOR += len;",
          "1064:  if (*(YYCURSOR) != '\"') {",
          "1066:   return 0;",
          "1069:  if (*(YYCURSOR + 1) != ';') {",
          "1071:   return 0;",
          "1074:  YYCURSOR += 2;",
          "1077:  ZVAL_STRINGL(rval, str, len);",
          "1080: #line 1081 \"ext/standard/var_unserializer.c\"",
          "1081: yy53:",
          "1082:  yych = *++YYCURSOR;",
          "1083:  if (yych <= '/') {",
          "1084:   if (yych <= ',') {",
          "1085:    if (yych == '+') goto yy57;",
          "1086:    goto yy18;",
          "1087:   } else {",
          "1088:    if (yych <= '-') goto yy55;",
          "1089:    if (yych <= '.') goto yy60;",
          "1090:    goto yy18;",
          "1091:   }",
          "1092:  } else {",
          "1093:   if (yych <= 'I') {",
          "1094:    if (yych <= '9') goto yy58;",
          "1095:    if (yych <= 'H') goto yy18;",
          "1096:    goto yy56;",
          "1097:   } else {",
          "1098:    if (yych != 'N') goto yy18;",
          "1099:   }",
          "1100:  }",
          "1102:  if (yych == 'A') goto yy76;",
          "1104: yy55:",
          "1105:  yych = *++YYCURSOR;",
          "1106:  if (yych <= '/') {",
          "1107:   if (yych == '.') goto yy60;",
          "1108:   goto yy18;",
          "1109:  } else {",
          "1110:   if (yych <= '9') goto yy58;",
          "1111:   if (yych != 'I') goto yy18;",
          "1112:  }",
          "1113: yy56:",
          "1115:  if (yych == 'N') goto yy72;",
          "1117: yy57:",
          "1118:  yych = *++YYCURSOR;",
          "1119:  if (yych == '.') goto yy60;",
          "1120:  if (yych <= '/') goto yy18;",
          "1121:  if (yych >= ':') goto yy18;",
          "1122: yy58:",
          "1124:  if ((YYLIMIT - YYCURSOR) < 4) YYFILL(4);",
          "1125:  yych = *YYCURSOR;",
          "1126:  if (yych <= ':') {",
          "1127:   if (yych <= '.') {",
          "1128:    if (yych <= '-') goto yy18;",
          "1129:    goto yy70;",
          "1130:   } else {",
          "1131:    if (yych <= '/') goto yy18;",
          "1132:    if (yych <= '9') goto yy58;",
          "1133:    goto yy18;",
          "1134:   }",
          "1135:  } else {",
          "1136:   if (yych <= 'E') {",
          "1137:    if (yych <= ';') goto yy63;",
          "1138:    if (yych <= 'D') goto yy18;",
          "1139:    goto yy65;",
          "1140:   } else {",
          "1141:    if (yych == 'e') goto yy65;",
          "1142:    goto yy18;",
          "1143:   }",
          "1144:  }",
          "1145: yy60:",
          "1146:  yych = *++YYCURSOR;",
          "1147:  if (yych <= '/') goto yy18;",
          "1148:  if (yych >= ':') goto yy18;",
          "1149: yy61:",
          "1155:   if (yych <= '9') goto yy61;",
          "1160:    goto yy65;",
          "1162:    if (yych == 'e') goto yy65;",
          "1166: yy63:",
          "1168: #line 707 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1042:  ZVAL_DOUBLE(rval, zend_strtod((const char *)start + 2, NULL));",
          "1043:  return 1;",
          "1044: }",
          "1047:  yych = *++YYCURSOR;",
          "1048:  if (yych <= ',') {",
          "1051:  } else {",
          "1053:   if (yych <= '/') goto yy18;",
          "1055:   goto yy18;",
          "1056:  }",
          "1058:  yych = *++YYCURSOR;",
          "1060:  goto yy18;",
          "1062:  yych = *++YYCURSOR;",
          "1064:  goto yy18;",
          "1066:  ++YYCURSOR;",
          "1084:   } else {",
          "1086:   }",
          "1087:  }",
          "1095:  yych = *++YYCURSOR;",
          "1099:  ++YYCURSOR;",
          "1101:  {",
          "1119:  }",
          "1123:  return 1;",
          "1124: }",
          "1127:  yych = *++YYCURSOR;",
          "1129:  goto yy18;",
          "1131:  ++YYCURSOR;",
          "1133:  {",
          "1177:  }",
          "1225:    }",
          "1265:   }",
          "1268:  }",
          "1278: }",
          "1281:  ++YYCURSOR;",
          "1283:  {",
          "1314:  return 1;",
          "1315: }",
          "1318:  ++YYCURSOR;",
          "1320:  {",
          "1342: }",
          "1345:  yych = *++YYCURSOR;",
          "1346:  if (yych <= ',') {",
          "1349:  } else {",
          "1351:   if (yych <= '/') goto yy18;",
          "1353:  }",
          "1355:  ++YYCURSOR;",
          "1356:  if (YYLIMIT <= YYCURSOR) YYFILL(1);",
          "1357:  yych = *YYCURSOR;",
          "1358:  if (yych <= '/') goto yy18;",
          "1367:  ++YYCURSOR;",
          "1369:  {",
          "1387:   return 0;",
          "1388:  }",
          "1396:   return 0;",
          "1397:  }",
          "1402:  }",
          "1408:  return 1;",
          "1409: }",
          "1411: yy96:",
          "1412:  yych = *++YYCURSOR;",
          "1413:  if (yych <= '/') goto yy18;",
          "1416: yy97:",
          "1417:  ++YYCURSOR;",
          "1419:  {",
          "1428:  } else {",
          "1430:  }",
          "1432:  return 1;",
          "1433: }",
          "1435: }",
          "1439:  return 0;",
          "",
          "[Removed Lines]",
          "1045: #line 1046 \"ext/standard/var_unserializer.c\"",
          "1046: yy73:",
          "1049:   if (yych == '+') goto yy88;",
          "1050:   goto yy18;",
          "1052:   if (yych <= '-') goto yy88;",
          "1054:   if (yych <= '9') goto yy89;",
          "1057: yy74:",
          "1059:  if (yych == 'F') goto yy91;",
          "1061: yy75:",
          "1063:  if (yych == 'N') goto yy91;",
          "1065: yy76:",
          "1067: #line 660 \"ext/standard/var_unserializer.re\"",
          "1068:  {",
          "1069: #if SIZEOF_ZEND_LONG == 4",
          "1070:  int digits = YYCURSOR - start - 3;",
          "1072:  if (start[2] == '-' || start[2] == '+') {",
          "1073:   digits--;",
          "1074:  }",
          "1077:  if (digits >= MAX_LENGTH_OF_LONG - 1) {",
          "1078:   if (digits == MAX_LENGTH_OF_LONG - 1) {",
          "1079:    int cmp = strncmp((char*)YYCURSOR - MAX_LENGTH_OF_LONG, long_min_digits, MAX_LENGTH_OF_LONG - 1);",
          "1081:    if (!(cmp < 0 || (cmp == 0 && start[2] == '-'))) {",
          "1082:     goto use_double;",
          "1083:    }",
          "1085:    goto use_double;",
          "1088: #endif",
          "1090:  ZVAL_LONG(rval, parse_iv(start + 2));",
          "1091:  return 1;",
          "1092: }",
          "1093: #line 1094 \"ext/standard/var_unserializer.c\"",
          "1094: yy78:",
          "1096:  if (yych == '\"') goto yy92;",
          "1097:  goto yy18;",
          "1098: yy79:",
          "1100: #line 623 \"ext/standard/var_unserializer.re\"",
          "1102:  zend_long id;",
          "1105:  if (!var_hash) return 0;",
          "1107:  id = parse_iv(start + 2) - 1;",
          "1108:  if (id == -1 || (rval_ref = var_access(var_hash, id)) == NULL) {",
          "1109:   return 0;",
          "1110:  }",
          "1112:  if (rval_ref == rval) {",
          "1113:   return 0;",
          "1114:  }",
          "1116:  if (Z_ISUNDEF_P(rval_ref) || (Z_ISREF_P(rval_ref) && Z_ISUNDEF_P(Z_REFVAL_P(rval_ref)))) {",
          "1117:   ZVAL_UNDEF(rval);",
          "1118:   return 1;",
          "1121:  ZVAL_COPY(rval, rval_ref);",
          "1125: #line 1126 \"ext/standard/var_unserializer.c\"",
          "1126: yy81:",
          "1128:  if (yych == '\"') goto yy94;",
          "1130: yy82:",
          "1132: #line 808 \"ext/standard/var_unserializer.re\"",
          "1134:  size_t len, len2, len3, maxlen;",
          "1135:  zend_long elements;",
          "1136:  char *str;",
          "1137:  zend_string *class_name;",
          "1138:  zend_class_entry *ce;",
          "1139:  int incomplete_class = 0;",
          "1141:  int custom_object = 0;",
          "1143:  zval user_func;",
          "1144:  zval retval;",
          "1145:  zval args[1];",
          "1147:     if (!var_hash) return 0;",
          "1148:  if (*start == 'C') {",
          "1149:   custom_object = 1;",
          "1150:  }",
          "1152:  len2 = len = parse_uiv(start + 2);",
          "1153:  maxlen = max - YYCURSOR;",
          "1154:  if (maxlen < len || len == 0) {",
          "1156:   return 0;",
          "1157:  }",
          "1159:  str = (char*)YYCURSOR;",
          "1161:  YYCURSOR += len;",
          "1163:  if (*(YYCURSOR) != '\"') {",
          "1165:   return 0;",
          "1166:  }",
          "1167:  if (*(YYCURSOR+1) != ':') {",
          "1169:   return 0;",
          "1170:  }",
          "1172:  len3 = strspn(str, \"0123456789_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\\177\\200\\201\\202\\203\\204\\205\\206\\207\\210\\211\\212\\213\\214\\215\\216\\217\\220\\221\\222\\223\\224\\225\\226\\227\\230\\231\\232\\233\\234\\235\\236\\237\\240\\241\\242\\243\\244\\245\\246\\247\\250\\251\\252\\253\\254\\255\\256\\257\\260\\261\\262\\263\\264\\265\\266\\267\\270\\271\\272\\273\\274\\275\\276\\277\\300\\301\\302\\303\\304\\305\\306\\307\\310\\311\\312\\313\\314\\315\\316\\317\\320\\321\\322\\323\\324\\325\\326\\327\\330\\331\\332\\333\\334\\335\\336\\337\\340\\341\\342\\343\\344\\345\\346\\347\\350\\351\\352\\353\\354\\355\\356\\357\\360\\361\\362\\363\\364\\365\\366\\367\\370\\371\\372\\373\\374\\375\\376\\377\\\\\");",
          "1173:  if (len3 != len)",
          "1174:  {",
          "1176:   return 0;",
          "1179:  class_name = zend_string_init(str, len, 0);",
          "1181:  do {",
          "1182:   if(!unserialize_allowed_class(class_name, var_hash)) {",
          "1183:    incomplete_class = 1;",
          "1184:    ce = PHP_IC_ENTRY;",
          "1185:    break;",
          "1186:   }",
          "1189:   BG(serialize_lock)++;",
          "1190:   ce = zend_lookup_class(class_name);",
          "1191:   if (ce) {",
          "1192:    BG(serialize_lock)--;",
          "1193:    if (EG(exception)) {",
          "1194:     zend_string_release(class_name);",
          "1195:     return 0;",
          "1196:    }",
          "1197:    break;",
          "1198:   }",
          "1199:   BG(serialize_lock)--;",
          "1201:   if (EG(exception)) {",
          "1202:    zend_string_release(class_name);",
          "1203:    return 0;",
          "1204:   }",
          "1207:   if ((PG(unserialize_callback_func) == NULL) || (PG(unserialize_callback_func)[0] == '\\0')) {",
          "1208:    incomplete_class = 1;",
          "1209:    ce = PHP_IC_ENTRY;",
          "1210:    break;",
          "1211:   }",
          "1214:   ZVAL_STRING(&user_func, PG(unserialize_callback_func));",
          "1216:   ZVAL_STR_COPY(&args[0], class_name);",
          "1217:   BG(serialize_lock)++;",
          "1218:   if (call_user_function_ex(CG(function_table), NULL, &user_func, &retval, 1, args, 0, NULL) != SUCCESS) {",
          "1219:    BG(serialize_lock)--;",
          "1220:    if (EG(exception)) {",
          "1221:     zend_string_release(class_name);",
          "1222:     zval_ptr_dtor(&user_func);",
          "1223:     zval_ptr_dtor(&args[0]);",
          "1224:     return 0;",
          "1226:    php_error_docref(NULL, E_WARNING, \"defined (%s) but not found\", Z_STRVAL(user_func));",
          "1227:    incomplete_class = 1;",
          "1228:    ce = PHP_IC_ENTRY;",
          "1229:    zval_ptr_dtor(&user_func);",
          "1230:    zval_ptr_dtor(&args[0]);",
          "1231:    break;",
          "1232:   }",
          "1233:   BG(serialize_lock)--;",
          "1234:   zval_ptr_dtor(&retval);",
          "1235:   if (EG(exception)) {",
          "1236:    zend_string_release(class_name);",
          "1237:    zval_ptr_dtor(&user_func);",
          "1238:    zval_ptr_dtor(&args[0]);",
          "1239:    return 0;",
          "1240:   }",
          "1243:   BG(serialize_lock)++;",
          "1244:   if ((ce = zend_lookup_class(class_name)) == NULL) {",
          "1245:    php_error_docref(NULL, E_WARNING, \"Function %s() hasn't defined the class it was called for\", Z_STRVAL(user_func));",
          "1246:    incomplete_class = 1;",
          "1247:    ce = PHP_IC_ENTRY;",
          "1248:   }",
          "1249:   BG(serialize_lock)--;",
          "1251:   zval_ptr_dtor(&user_func);",
          "1252:   zval_ptr_dtor(&args[0]);",
          "1253:   break;",
          "1254:  } while (1);",
          "1258:  if (custom_object) {",
          "1259:   int ret;",
          "1261:   ret = object_custom(UNSERIALIZE_PASSTHRU, ce);",
          "1263:   if (ret && incomplete_class) {",
          "1264:    php_store_class_name(rval, ZSTR_VAL(class_name), len2);",
          "1266:   zend_string_release(class_name);",
          "1267:   return ret;",
          "1270:  elements = object_common1(UNSERIALIZE_PASSTHRU, ce);",
          "1272:  if (incomplete_class) {",
          "1273:   php_store_class_name(rval, ZSTR_VAL(class_name), len2);",
          "1274:  }",
          "1275:  zend_string_release(class_name);",
          "1277:  return object_common2(UNSERIALIZE_PASSTHRU, elements);",
          "1279: #line 1280 \"ext/standard/var_unserializer.c\"",
          "1280: yy84:",
          "1282: #line 743 \"ext/standard/var_unserializer.re\"",
          "1284:  size_t len, maxlen;",
          "1285:  zend_string *str;",
          "1287:  len = parse_uiv(start + 2);",
          "1288:  maxlen = max - YYCURSOR;",
          "1289:  if (maxlen < len) {",
          "1291:   return 0;",
          "1292:  }",
          "1294:  if ((str = unserialize_str(&YYCURSOR, len, maxlen)) == NULL) {",
          "1295:   return 0;",
          "1296:  }",
          "1298:  if (*(YYCURSOR) != '\"') {",
          "1299:   zend_string_free(str);",
          "1301:   return 0;",
          "1302:  }",
          "1304:  if (*(YYCURSOR + 1) != ';') {",
          "1305:   efree(str);",
          "1307:   return 0;",
          "1308:  }",
          "1310:  YYCURSOR += 2;",
          "1313:  ZVAL_STR(rval, str);",
          "1316: #line 1317 \"ext/standard/var_unserializer.c\"",
          "1317: yy86:",
          "1319: #line 777 \"ext/standard/var_unserializer.re\"",
          "1321:  zend_long elements = parse_iv(start + 2);",
          "1324:     if (!var_hash) return 0;",
          "1326:  if (elements < 0) {",
          "1327:   return 0;",
          "1328:  }",
          "1330:  array_init_size(rval, elements);",
          "1331:  if (elements) {",
          "1334:   zend_hash_real_init(Z_ARRVAL_P(rval), 0);",
          "1335:  }",
          "1337:  if (!process_nested_data(UNSERIALIZE_PASSTHRU, Z_ARRVAL_P(rval), elements, 0)) {",
          "1338:   return 0;",
          "1339:  }",
          "1341:  return finish_nested_data(UNSERIALIZE_PASSTHRU);",
          "1343: #line 1344 \"ext/standard/var_unserializer.c\"",
          "1344: yy88:",
          "1347:   if (yych == '+') goto yy96;",
          "1348:   goto yy18;",
          "1350:   if (yych <= '-') goto yy96;",
          "1352:   if (yych >= ':') goto yy18;",
          "1354: yy89:",
          "1359:  if (yych <= '9') goto yy89;",
          "1360:  if (yych == ';') goto yy71;",
          "1361:  goto yy18;",
          "1362: yy91:",
          "1363:  yych = *++YYCURSOR;",
          "1364:  if (yych == ';') goto yy97;",
          "1365:  goto yy18;",
          "1366: yy92:",
          "1368: #line 801 \"ext/standard/var_unserializer.re\"",
          "1370:     if (!var_hash) return 0;",
          "1372:  return object_common2(UNSERIALIZE_PASSTHRU,",
          "1373:    object_common1(UNSERIALIZE_PASSTHRU, ZEND_STANDARD_CLASS_DEF_PTR));",
          "1374: }",
          "1375: #line 1376 \"ext/standard/var_unserializer.c\"",
          "1376: yy94:",
          "1377:  ++YYCURSOR;",
          "1378: #line 711 \"ext/standard/var_unserializer.re\"",
          "1379:  {",
          "1380:  size_t len, maxlen;",
          "1381:  char *str;",
          "1383:  len = parse_uiv(start + 2);",
          "1384:  maxlen = max - YYCURSOR;",
          "1385:  if (maxlen < len) {",
          "1390:  str = (char*)YYCURSOR;",
          "1392:  YYCURSOR += len;",
          "1394:  if (*(YYCURSOR) != '\"') {",
          "1399:  if (*(YYCURSOR + 1) != ';') {",
          "1401:   return 0;",
          "1404:  YYCURSOR += 2;",
          "1407:  ZVAL_STRINGL(rval, str, len);",
          "1410: #line 1411 \"ext/standard/var_unserializer.c\"",
          "1414:  if (yych <= '9') goto yy89;",
          "1415:  goto yy18;",
          "1418: #line 686 \"ext/standard/var_unserializer.re\"",
          "1422:  if (!strncmp((char*)start + 2, \"NAN\", 3)) {",
          "1423:   ZVAL_DOUBLE(rval, php_get_nan());",
          "1424:  } else if (!strncmp((char*)start + 2, \"INF\", 3)) {",
          "1425:   ZVAL_DOUBLE(rval, php_get_inf());",
          "1426:  } else if (!strncmp((char*)start + 2, \"-INF\", 4)) {",
          "1427:   ZVAL_DOUBLE(rval, -php_get_inf());",
          "1429:   ZVAL_NULL(rval);",
          "1434: #line 1435 \"ext/standard/var_unserializer.c\"",
          "1436: #line 963 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1177: #line 1178 \"ext/standard/var_unserializer.c\"",
          "1178: yy65:",
          "1181:   if (yych != '+') goto yy18;",
          "1183:   if (yych <= '-') goto yy66;",
          "1185:   if (yych <= '9') goto yy67;",
          "1188: yy66:",
          "1190:  if (yych <= ',') {",
          "1191:   if (yych == '+') goto yy69;",
          "1192:   goto yy18;",
          "1193:  } else {",
          "1194:   if (yych <= '-') goto yy69;",
          "1195:   if (yych <= '/') goto yy18;",
          "1196:   if (yych >= ':') goto yy18;",
          "1197:  }",
          "1198: yy67:",
          "1199:  ++YYCURSOR;",
          "1200:  if (YYLIMIT <= YYCURSOR) YYFILL(1);",
          "1201:  yych = *YYCURSOR;",
          "1202:  if (yych <= '/') goto yy18;",
          "1203:  if (yych <= '9') goto yy67;",
          "1204:  if (yych == ';') goto yy63;",
          "1206: yy69:",
          "1208:  if (yych <= '/') goto yy18;",
          "1209:  if (yych <= '9') goto yy67;",
          "1211: yy70:",
          "1213:  if ((YYLIMIT - YYCURSOR) < 4) YYFILL(4);",
          "1214:  yych = *YYCURSOR;",
          "1215:  if (yych <= ';') {",
          "1216:   if (yych <= '/') goto yy18;",
          "1217:   if (yych <= '9') goto yy70;",
          "1218:   if (yych <= ':') goto yy18;",
          "1219:   goto yy63;",
          "1220:  } else {",
          "1221:   if (yych <= 'E') {",
          "1222:    if (yych <= 'D') goto yy18;",
          "1223:    goto yy65;",
          "1225:    if (yych == 'e') goto yy65;",
          "1226:    goto yy18;",
          "1229: yy72:",
          "1231:  if (yych != 'F') goto yy18;",
          "1232: yy73:",
          "1233:  yych = *++YYCURSOR;",
          "1234:  if (yych != ';') goto yy18;",
          "1236: #line 691 \"ext/standard/var_unserializer.re\"",
          "1240:  if (!strncmp((char*)start + 2, \"NAN\", 3)) {",
          "1241:   ZVAL_DOUBLE(rval, php_get_nan());",
          "1242:  } else if (!strncmp((char*)start + 2, \"INF\", 3)) {",
          "1243:   ZVAL_DOUBLE(rval, php_get_inf());",
          "1244:  } else if (!strncmp((char*)start + 2, \"-INF\", 4)) {",
          "1245:   ZVAL_DOUBLE(rval, -php_get_inf());",
          "1246:  } else {",
          "1247:   ZVAL_NULL(rval);",
          "1252: #line 1253 \"ext/standard/var_unserializer.c\"",
          "1253: yy76:",
          "1255:  if (yych == 'N') goto yy73;",
          "1257: yy77:",
          "1258:  yych = *++YYCURSOR;",
          "1259:  if (yych <= ',') {",
          "1260:   if (yych != '+') goto yy18;",
          "1261:  } else {",
          "1262:   if (yych <= '-') goto yy78;",
          "1263:   if (yych <= '/') goto yy18;",
          "1264:   if (yych <= '9') goto yy79;",
          "1265:   goto yy18;",
          "1266:  }",
          "1267: yy78:",
          "1268:  yych = *++YYCURSOR;",
          "1269:  if (yych <= '/') goto yy18;",
          "1270:  if (yych >= ':') goto yy18;",
          "1271: yy79:",
          "1273:  if (YYLIMIT <= YYCURSOR) YYFILL(1);",
          "1274:  yych = *YYCURSOR;",
          "1275:  if (yych <= '/') goto yy18;",
          "1276:  if (yych <= '9') goto yy79;",
          "1277:  if (yych != ';') goto yy18;",
          "1278:  ++YYCURSOR;",
          "1279: #line 665 \"ext/standard/var_unserializer.re\"",
          "1281: #if SIZEOF_ZEND_LONG == 4",
          "1282:  int digits = YYCURSOR - start - 3;",
          "1284:  if (start[2] == '-' || start[2] == '+') {",
          "1285:   digits--;",
          "1289:  if (digits >= MAX_LENGTH_OF_LONG - 1) {",
          "1290:   if (digits == MAX_LENGTH_OF_LONG - 1) {",
          "1291:    int cmp = strncmp((char*)YYCURSOR - MAX_LENGTH_OF_LONG, long_min_digits, MAX_LENGTH_OF_LONG - 1);",
          "1293:    if (!(cmp < 0 || (cmp == 0 && start[2] == '-'))) {",
          "1294:     goto use_double;",
          "1296:   } else {",
          "1297:    goto use_double;",
          "1300: #endif",
          "1302:  ZVAL_LONG(rval, parse_iv(start + 2));",
          "1303:  return 1;",
          "1305: #line 1306 \"ext/standard/var_unserializer.c\"",
          "1306: yy83:",
          "1307:  yych = *++YYCURSOR;",
          "1308:  if (yych <= '/') goto yy18;",
          "1309:  if (yych >= '2') goto yy18;",
          "1310:  yych = *++YYCURSOR;",
          "1311:  if (yych != ';') goto yy18;",
          "1313: #line 659 \"ext/standard/var_unserializer.re\"",
          "1316:  ZVAL_BOOL(rval, parse_iv(start + 2));",
          "1319: #line 1320 \"ext/standard/var_unserializer.c\"",
          "1320: yy87:",
          "1322: #line 653 \"ext/standard/var_unserializer.re\"",
          "1325:  ZVAL_NULL(rval);",
          "1326:  return 1;",
          "1328: #line 1329 \"ext/standard/var_unserializer.c\"",
          "1329: yy89:",
          "1332:   if (yych != '+') goto yy18;",
          "1334:   if (yych <= '-') goto yy90;",
          "1336:   if (yych <= '9') goto yy91;",
          "1337:   goto yy18;",
          "1339: yy90:",
          "1340:  yych = *++YYCURSOR;",
          "1341:  if (yych <= '/') goto yy18;",
          "1342:  if (yych >= ':') goto yy18;",
          "1343: yy91:",
          "1348:  if (yych <= '9') goto yy91;",
          "1349:  if (yych != ';') goto yy18;",
          "1351: #line 628 \"ext/standard/var_unserializer.re\"",
          "1353:  zend_long id;",
          "1356:  if (!var_hash) return 0;",
          "1358:  id = parse_iv(start + 2) - 1;",
          "1359:  if (id == -1 || (rval_ref = var_access(var_hash, id)) == NULL) {",
          "1363:  if (rval_ref == rval) {",
          "1367:  if (Z_ISUNDEF_P(rval_ref) || (Z_ISREF_P(rval_ref) && Z_ISUNDEF_P(Z_REFVAL_P(rval_ref)))) {",
          "1368:   ZVAL_UNDEF(rval);",
          "1369:   return 1;",
          "1372:  ZVAL_COPY(rval, rval_ref);",
          "1376: #line 1377 \"ext/standard/var_unserializer.c\"",
          "1377: yy95:",
          "1378:  yych = *++YYCURSOR;",
          "1379:  if (yych <= ',') {",
          "1380:   if (yych != '+') goto yy18;",
          "1381:  } else {",
          "1382:   if (yych <= '-') goto yy96;",
          "1383:   if (yych <= '/') goto yy18;",
          "1384:   if (yych <= '9') goto yy97;",
          "1385:   goto yy18;",
          "1386:  }",
          "1390:  if (yych >= ':') goto yy18;",
          "1393:  if (YYLIMIT <= YYCURSOR) YYFILL(1);",
          "1394:  yych = *YYCURSOR;",
          "1395:  if (yych <= '/') goto yy18;",
          "1396:  if (yych <= '9') goto yy97;",
          "1397:  if (yych != ';') goto yy18;",
          "1398:  ++YYCURSOR;",
          "1399: #line 602 \"ext/standard/var_unserializer.re\"",
          "1401:  zend_long id;",
          "1404:  if (!var_hash) return 0;",
          "1406:  id = parse_iv(start + 2) - 1;",
          "1407:  if (id == -1 || (rval_ref = var_access(var_hash, id)) == NULL) {",
          "1408:   return 0;",
          "1409:  }",
          "1411:  zval_ptr_dtor(rval);",
          "1412:  if (Z_ISUNDEF_P(rval_ref) || (Z_ISREF_P(rval_ref) && Z_ISUNDEF_P(Z_REFVAL_P(rval_ref)))) {",
          "1413:   ZVAL_UNDEF(rval);",
          "1414:   return 1;",
          "1415:  }",
          "1416:  if (Z_ISREF_P(rval_ref)) {",
          "1417:   ZVAL_COPY(rval, rval_ref);",
          "1419:   ZVAL_NEW_REF(rval_ref, rval_ref);",
          "1420:   ZVAL_COPY(rval, rval_ref);",
          "1425: #line 1426 \"ext/standard/var_unserializer.c\"",
          "1427: #line 977 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------"
        ],
        "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re": [
          "File: ext/standard/var_unserializer.re -> ext/standard/var_unserializer.re",
          "--- Hunk 1 ---",
          "[Context before]",
          "482: {",
          "483:  zend_long elements;",
          "485:  elements = parse_iv2((*p) + 2, p);",
          "487:  (*p) += 2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "485:  if( *p >= max - 2) {",
          "486:   zend_error(E_WARNING, \"Bad unserialize data\");",
          "487:   return -1;",
          "488:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "491:  } else {",
          "496:  }",
          "498:  return elements;",
          "",
          "[Removed Lines]",
          "494:   zend_error(E_WARNING, \"Erroneous data format for unserializing '%s'\", ZSTR_VAL(ce->name));",
          "495:   return 0;",
          "",
          "[Added Lines]",
          "499:   zend_error(E_WARNING, \"Erroneous data format for unserializing '%s'\", ce->name);",
          "500:   return -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "799: }",
          "801: \"o:\" iv \":\" [\"] {",
          "802:     if (!var_hash) return 0;",
          "806: }",
          "808: object \":\" uiv \":\" [\"] {",
          "",
          "[Removed Lines]",
          "804:  return object_common2(UNSERIALIZE_PASSTHRU,",
          "805:    object_common1(UNSERIALIZE_PASSTHRU, ZEND_STANDARD_CLASS_DEF_PTR));",
          "",
          "[Added Lines]",
          "807:  long elements;",
          "810:  elements = object_common1(UNSERIALIZE_PASSTHRU, ZEND_STANDARD_CLASS_DEF_PTR);",
          "811:  if (elements < 0) {",
          "812:   return 0;",
          "813:  }",
          "814:  return object_common2(UNSERIALIZE_PASSTHRU, elements);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "945:  elements = object_common1(UNSERIALIZE_PASSTHRU, ce);",
          "947:  if (incomplete_class) {",
          "948:   php_store_class_name(rval, ZSTR_VAL(class_name), len2);",
          "949:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "956:  if (elements < 0) {",
          "957:     efree(class_name);",
          "958:     return 0;",
          "959:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2135fdef9b588a34f8805b2bbf10704e36163d5a",
      "candidate_info": {
        "commit_hash": "2135fdef9b588a34f8805b2bbf10704e36163d5a",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/2135fdef9b588a34f8805b2bbf10704e36163d5a",
        "files": [
          "ext/standard/tests/serialize/bug72663.phpt",
          "ext/standard/var_unserializer.c",
          "ext/standard/var_unserializer.re"
        ],
        "message": "Bug #72663 - part 1\n\nDon't call __destruct() on an unserialized object that has a\n__wakeup() method if either\na) unserialization of its properties fails or\nb) the __wakeup() call fails (e.g. by throwing).\n\nThis basically treats __wakeup() as a form of constructor and\naligns us with the usual behavior that if the constructor call\nfails the destructor should not be called.\n\nThe security aspect here is that people use __wakeup() to prevent\nunserialization of objects with dangerous __destruct() methods,\nbut this is ineffective if __destruct() can still be called while\n__wakeup() was skipped.",
        "before_after_code_files": [
          "ext/standard/tests/serialize/bug72663.phpt||ext/standard/tests/serialize/bug72663.phpt",
          "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
          "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
            "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
          ],
          "candidate": [
            "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
            "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
          ]
        }
      },
      "candidate_diff": {
        "ext/standard/tests/serialize/bug72663.phpt||ext/standard/tests/serialize/bug72663.phpt": [
          "File: ext/standard/tests/serialize/bug72663.phpt -> ext/standard/tests/serialize/bug72663.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #72663 (1): Don't call __destruct if __wakeup not called or fails",
          "3: --FILE--",
          "4: <?php",
          "6: class Test1 {",
          "7:     public function __wakeup() {",
          "8:         echo \"Wakeup\\n\";",
          "9:     }",
          "10:     public function __destruct() {",
          "11:         echo \"Dtor\\n\";",
          "12:     }",
          "13: }",
          "15: class Test2 {",
          "16:     public function __wakeup() {",
          "17:         throw new Exception('Unserialization forbidden');",
          "18:     }",
          "19:     public function __destruct() {",
          "20:         echo \"Dtor\\n\";",
          "21:     }",
          "22: }",
          "25: $s = 'O:5:\"Test1\":1:{s:10:\"\";}';",
          "26: var_dump(unserialize($s));",
          "29: $s = 'O:5:\"Test1\":2:{i:0;R:1;s:10:\"\";}';",
          "30: var_dump(unserialize($s));",
          "33: $s = 'O:5:\"Test2\":0:{}';",
          "34: try {",
          "35:     var_dump(unserialize($s));",
          "36: } catch (Exception $e) {",
          "37:     echo \"Caught\\n\";",
          "38: }",
          "41: $s = 'O:5:\"Test2\":1:{i:0;R:1;}';",
          "42: try {",
          "43:     var_dump(unserialize($s));",
          "44: } catch (Exception $e) {",
          "45:     echo \"Caught\\n\";",
          "46: }",
          "48: ?>",
          "49: --EXPECTF--",
          "50: Notice: unserialize(): Error at offset 17 of 24 bytes in %s on line %d",
          "51: bool(false)",
          "53: Notice: unserialize(): Error at offset 25 of 32 bytes in %s on line %d",
          "54: bool(false)",
          "55: Caught",
          "56: Caught",
          "",
          "---------------"
        ],
        "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c": [
          "File: ext/standard/var_unserializer.c -> ext/standard/var_unserializer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "455:  zval retval;",
          "456:  zval fname;",
          "457:  HashTable *ht;",
          "459:  if (Z_TYPE_P(rval) != IS_OBJECT) {",
          "460:   return 0;",
          "461:  }",
          "463:  ht = Z_OBJPROP_P(rval);",
          "464:  zend_hash_extend(ht, zend_hash_num_elements(ht) + elements, (ht->u.flags & HASH_FLAG_PACKED));",
          "465:  if (!process_nested_data(UNSERIALIZE_PASSTHRU, ht, elements, 1)) {",
          "466:   return 0;",
          "467:  }",
          "469:  ZVAL_DEREF(rval);",
          "472:   ZVAL_STRINGL(&fname, \"__wakeup\", sizeof(\"__wakeup\") - 1);",
          "473:   BG(serialize_lock)++;",
          "475:   BG(serialize_lock)--;",
          "476:   zval_dtor(&fname);",
          "477:   zval_dtor(&retval);",
          "",
          "[Removed Lines]",
          "470:  if (Z_OBJCE_P(rval) != PHP_IC_ENTRY &&",
          "471:   zend_hash_str_exists(&Z_OBJCE_P(rval)->function_table, \"__wakeup\", sizeof(\"__wakeup\")-1)) {",
          "474:   call_user_function_ex(CG(function_table), rval, &fname, &retval, 0, 0, 1, NULL);",
          "",
          "[Added Lines]",
          "458:  zend_bool has_wakeup;",
          "464:  has_wakeup = Z_OBJCE_P(rval) != PHP_IC_ENTRY",
          "465:   && zend_hash_str_exists(&Z_OBJCE_P(rval)->function_table, \"__wakeup\", sizeof(\"__wakeup\")-1);",
          "470:   if (has_wakeup) {",
          "471:    ZVAL_DEREF(rval);",
          "472:    GC_FLAGS(Z_OBJ_P(rval)) |= IS_OBJ_DESTRUCTOR_CALLED;",
          "473:   }",
          "478:  if (has_wakeup) {",
          "481:   if (call_user_function_ex(CG(function_table), rval, &fname, &retval, 0, 0, 1, NULL) == FAILURE || Z_ISUNDEF(retval)) {",
          "482:    GC_FLAGS(Z_OBJ_P(rval)) |= IS_OBJ_DESTRUCTOR_CALLED;",
          "483:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "514:  start = cursor;",
          "518: {",
          "519:  YYCTYPE yych;",
          "520:  static const unsigned char yybm[] = {",
          "",
          "[Removed Lines]",
          "517: #line 518 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "525: #line 526 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------"
        ],
        "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re": [
          "File: ext/standard/var_unserializer.re -> ext/standard/var_unserializer.re",
          "--- Hunk 1 ---",
          "[Context before]",
          "459:  zval retval;",
          "460:  zval fname;",
          "461:  HashTable *ht;",
          "463:  if (Z_TYPE_P(rval) != IS_OBJECT) {",
          "464:   return 0;",
          "465:  }",
          "467:  ht = Z_OBJPROP_P(rval);",
          "468:  zend_hash_extend(ht, zend_hash_num_elements(ht) + elements, (ht->u.flags & HASH_FLAG_PACKED));",
          "469:  if (!process_nested_data(UNSERIALIZE_PASSTHRU, ht, elements, 1)) {",
          "470:   return 0;",
          "471:  }",
          "473:  ZVAL_DEREF(rval);",
          "476:   ZVAL_STRINGL(&fname, \"__wakeup\", sizeof(\"__wakeup\") - 1);",
          "477:   BG(serialize_lock)++;",
          "479:   BG(serialize_lock)--;",
          "480:   zval_dtor(&fname);",
          "481:   zval_dtor(&retval);",
          "",
          "[Removed Lines]",
          "474:  if (Z_OBJCE_P(rval) != PHP_IC_ENTRY &&",
          "475:   zend_hash_str_exists(&Z_OBJCE_P(rval)->function_table, \"__wakeup\", sizeof(\"__wakeup\")-1)) {",
          "478:   call_user_function_ex(CG(function_table), rval, &fname, &retval, 0, 0, 1, NULL);",
          "",
          "[Added Lines]",
          "462:  zend_bool has_wakeup;",
          "468:  has_wakeup = Z_OBJCE_P(rval) != PHP_IC_ENTRY",
          "469:   && zend_hash_str_exists(&Z_OBJCE_P(rval)->function_table, \"__wakeup\", sizeof(\"__wakeup\")-1);",
          "474:   if (has_wakeup) {",
          "475:    ZVAL_DEREF(rval);",
          "476:    GC_FLAGS(Z_OBJ_P(rval)) |= IS_OBJ_DESTRUCTOR_CALLED;",
          "477:   }",
          "482:  if (has_wakeup) {",
          "485:   if (call_user_function_ex(CG(function_table), rval, &fname, &retval, 0, 0, 1, NULL) == FAILURE || Z_ISUNDEF(retval)) {",
          "486:    GC_FLAGS(Z_OBJ_P(rval)) |= IS_OBJ_DESTRUCTOR_CALLED;",
          "487:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "73a69c9c03587dfa1dcfb488e27f5bb42218ed4f",
      "candidate_info": {
        "commit_hash": "73a69c9c03587dfa1dcfb488e27f5bb42218ed4f",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/73a69c9c03587dfa1dcfb488e27f5bb42218ed4f",
        "files": [
          "ext/standard/var_unserializer.c",
          "ext/standard/var_unserializer.re"
        ],
        "message": "Fixed typo",
        "before_after_code_files": [
          "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
          "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
            "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
          ],
          "candidate": [
            "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
            "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
          ]
        }
      },
      "candidate_diff": {
        "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c": [
          "File: ext/standard/var_unserializer.c -> ext/standard/var_unserializer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "470: {",
          "471:  zval retval;",
          "472:  zval fname;",
          "475:  if (Z_TYPE_P(rval) != IS_OBJECT) {",
          "476:   return 0;",
          "477:  }",
          "479:  zend_hash_resize(ht, zend_hash_num_elements(ht) + elements);",
          "480:  if (!process_nested_data(UNSERIALIZE_PASSTHRU, ht, elements, 1)) {",
          "481:   return 0;",
          "",
          "[Removed Lines]",
          "473:  HashTable *ht = Z_OBJPROP_P(rval);",
          "",
          "[Added Lines]",
          "473:  HashTable *ht;",
          "479:  ht = Z_OBJPROP_P(rval);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "529:  start = cursor;",
          "533: {",
          "534:  YYCTYPE yych;",
          "535:  static const unsigned char yybm[] = {",
          "",
          "[Removed Lines]",
          "532: #line 533 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "533: #line 534 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "589:  yych = *(YYMARKER = ++YYCURSOR);",
          "590:  if (yych == ':') goto yy95;",
          "591: yy3:",
          "593:  { return 0; }",
          "595: yy4:",
          "596:  yych = *(YYMARKER = ++YYCURSOR);",
          "597:  if (yych == ':') goto yy89;",
          "",
          "[Removed Lines]",
          "592: #line 880 \"ext/standard/var_unserializer.re\"",
          "594: #line 595 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "593: #line 881 \"ext/standard/var_unserializer.re\"",
          "595: #line 596 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "634:  goto yy3;",
          "635: yy14:",
          "636:  ++YYCURSOR;",
          "638:  {",
          "640:  php_error_docref(NULL, E_NOTICE, \"Unexpected end of serialized data\");",
          "642: }",
          "644: yy16:",
          "645:  yych = *++YYCURSOR;",
          "646:  goto yy3;",
          "",
          "[Removed Lines]",
          "637: #line 874 \"ext/standard/var_unserializer.re\"",
          "643: #line 644 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "638: #line 875 \"ext/standard/var_unserializer.re\"",
          "644: #line 645 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "670:  yych = *++YYCURSOR;",
          "671:  if (yych != '\"') goto yy18;",
          "672:  ++YYCURSOR;",
          "674:  {",
          "675:  size_t len, len2, len3, maxlen;",
          "676:  zend_long elements;",
          "",
          "[Removed Lines]",
          "673: #line 729 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "674: #line 730 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "816:  return object_common2(UNSERIALIZE_PASSTHRU, elements);",
          "817: }",
          "819: yy25:",
          "820:  yych = *++YYCURSOR;",
          "821:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "818: #line 819 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "819: #line 820 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "840:  yych = *++YYCURSOR;",
          "841:  if (yych != '\"') goto yy18;",
          "842:  ++YYCURSOR;",
          "844:  {",
          "",
          "[Removed Lines]",
          "843: #line 721 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "844: #line 722 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "848:  return object_common2(UNSERIALIZE_PASSTHRU,",
          "849:    object_common1(UNSERIALIZE_PASSTHRU, ZEND_STANDARD_CLASS_DEF_PTR));",
          "850: }",
          "852: yy32:",
          "853:  yych = *++YYCURSOR;",
          "854:  if (yych == '+') goto yy33;",
          "",
          "[Removed Lines]",
          "851: #line 852 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "852: #line 853 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "869:  yych = *++YYCURSOR;",
          "870:  if (yych != '{') goto yy18;",
          "871:  ++YYCURSOR;",
          "873:  {",
          "874:  zend_long elements = parse_iv(start + 2);",
          "",
          "[Removed Lines]",
          "872: #line 700 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "873: #line 701 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "891:  return finish_nested_data(UNSERIALIZE_PASSTHRU);",
          "892: }",
          "894: yy39:",
          "895:  yych = *++YYCURSOR;",
          "896:  if (yych == '+') goto yy40;",
          "",
          "[Removed Lines]",
          "893: #line 894 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "894: #line 895 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "911:  yych = *++YYCURSOR;",
          "912:  if (yych != '\"') goto yy18;",
          "913:  ++YYCURSOR;",
          "915:  {",
          "916:  size_t len, maxlen;",
          "917:  zend_string *str;",
          "",
          "[Removed Lines]",
          "914: #line 672 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "915: #line 673 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "939:  ZVAL_STR(rval, str);",
          "940:  return 1;",
          "941: }",
          "943: yy46:",
          "944:  yych = *++YYCURSOR;",
          "945:  if (yych == '+') goto yy47;",
          "",
          "[Removed Lines]",
          "942: #line 943 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "943: #line 944 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "960:  yych = *++YYCURSOR;",
          "961:  if (yych != '\"') goto yy18;",
          "962:  ++YYCURSOR;",
          "964:  {",
          "965:  size_t len, maxlen;",
          "966:  char *str;",
          "",
          "[Removed Lines]",
          "963: #line 645 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "964: #line 646 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "987:  ZVAL_STRINGL(rval, str, len);",
          "988:  return 1;",
          "989: }",
          "991: yy53:",
          "992:  yych = *++YYCURSOR;",
          "993:  if (yych <= '/') {",
          "",
          "[Removed Lines]",
          "990: #line 991 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "991: #line 992 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1075:  }",
          "1076: yy63:",
          "1077:  ++YYCURSOR;",
          "1079:  {",
          "1080: #if SIZEOF_ZEND_LONG == 4",
          "1081: use_double:",
          "",
          "[Removed Lines]",
          "1078: #line 636 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1079: #line 637 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1084:  ZVAL_DOUBLE(rval, zend_strtod((const char *)start + 2, NULL));",
          "1085:  return 1;",
          "1086: }",
          "1088: yy65:",
          "1089:  yych = *++YYCURSOR;",
          "1090:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "1087: #line 1088 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1088: #line 1089 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1143:  yych = *++YYCURSOR;",
          "1144:  if (yych != ';') goto yy18;",
          "1145:  ++YYCURSOR;",
          "1147:  {",
          "",
          "[Removed Lines]",
          "1146: #line 620 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1147: #line 621 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1160:  return 1;",
          "1161: }",
          "1163: yy76:",
          "1164:  yych = *++YYCURSOR;",
          "1165:  if (yych == 'N') goto yy73;",
          "",
          "[Removed Lines]",
          "1162: #line 1163 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1163: #line 1164 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1186:  if (yych <= '9') goto yy79;",
          "1187:  if (yych != ';') goto yy18;",
          "1188:  ++YYCURSOR;",
          "1190:  {",
          "1191: #if SIZEOF_ZEND_LONG == 4",
          "1192:  int digits = YYCURSOR - start - 3;",
          "",
          "[Removed Lines]",
          "1189: #line 594 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1190: #line 595 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1212:  ZVAL_LONG(rval, parse_iv(start + 2));",
          "1213:  return 1;",
          "1214: }",
          "1216: yy83:",
          "1217:  yych = *++YYCURSOR;",
          "1218:  if (yych <= '/') goto yy18;",
          "",
          "[Removed Lines]",
          "1215: #line 1216 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1216: #line 1217 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1220:  yych = *++YYCURSOR;",
          "1221:  if (yych != ';') goto yy18;",
          "1222:  ++YYCURSOR;",
          "1224:  {",
          "1226:  ZVAL_BOOL(rval, parse_iv(start + 2));",
          "1227:  return 1;",
          "1228: }",
          "1230: yy87:",
          "1231:  ++YYCURSOR;",
          "1233:  {",
          "1235:  ZVAL_NULL(rval);",
          "1236:  return 1;",
          "1237: }",
          "1239: yy89:",
          "1240:  yych = *++YYCURSOR;",
          "1241:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "1223: #line 588 \"ext/standard/var_unserializer.re\"",
          "1229: #line 1230 \"ext/standard/var_unserializer.c\"",
          "1232: #line 582 \"ext/standard/var_unserializer.re\"",
          "1238: #line 1239 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1224: #line 589 \"ext/standard/var_unserializer.re\"",
          "1230: #line 1231 \"ext/standard/var_unserializer.c\"",
          "1233: #line 583 \"ext/standard/var_unserializer.re\"",
          "1239: #line 1240 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1258:  if (yych <= '9') goto yy91;",
          "1259:  if (yych != ';') goto yy18;",
          "1260:  ++YYCURSOR;",
          "1262:  {",
          "1263:  zend_long id;",
          "",
          "[Removed Lines]",
          "1261: #line 559 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1262: #line 560 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1282:  return 1;",
          "1283: }",
          "1285: yy95:",
          "1286:  yych = *++YYCURSOR;",
          "1287:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "1284: #line 1285 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1285: #line 1286 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1304:  if (yych <= '9') goto yy97;",
          "1305:  if (yych != ';') goto yy18;",
          "1306:  ++YYCURSOR;",
          "1308:  {",
          "1309:  zend_long id;",
          "",
          "[Removed Lines]",
          "1307: #line 537 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1308: #line 538 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1327:  return 1;",
          "1328: }",
          "1330: }",
          "1334:  return 0;",
          "",
          "[Removed Lines]",
          "1329: #line 1330 \"ext/standard/var_unserializer.c\"",
          "1331: #line 882 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1330: #line 1331 \"ext/standard/var_unserializer.c\"",
          "1332: #line 883 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------"
        ],
        "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re": [
          "File: ext/standard/var_unserializer.re -> ext/standard/var_unserializer.re",
          "--- Hunk 1 ---",
          "[Context before]",
          "474: {",
          "475:  zval retval;",
          "476:  zval fname;",
          "479:  if (Z_TYPE_P(rval) != IS_OBJECT) {",
          "480:   return 0;",
          "481:  }",
          "483:  zend_hash_resize(ht, zend_hash_num_elements(ht) + elements);",
          "484:  if (!process_nested_data(UNSERIALIZE_PASSTHRU, ht, elements, 1)) {",
          "485:   return 0;",
          "",
          "[Removed Lines]",
          "477:  HashTable *ht = Z_OBJPROP_P(rval);",
          "",
          "[Added Lines]",
          "477:  HashTable *ht;",
          "483:  ht = Z_OBJPROP_P(rval);",
          "",
          "---------------"
        ]
      }
    }
  ]
}