{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bb2ce1a108b3c852a413c641bd021c9c25598d34",
      "candidate_info": {
        "commit_hash": "bb2ce1a108b3c852a413c641bd021c9c25598d34",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/bb2ce1a108b3c852a413c641bd021c9c25598d34",
        "files": [
          "lib/child_process.js"
        ],
        "message": "cluster: don't silently drop messages when the write queue gets big",
        "before_after_code_files": [
          "lib/child_process.js||lichild_process.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/child_process.js||lichild_process.js": [
          "File: lib/child_process.js -> lichild_process.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:     if (!target._channel) throw new Error(\"channel closed\");",
          "125:     var buffer = Buffer(JSON.stringify(message) + '\\n');",
          "127:     if (sendHandle && setSimultaneousAccepts) {",
          "",
          "[Removed Lines]",
          "121:     if (channel.writeQueueSize > 1024 * 1024) {",
          "122:       return false;",
          "123:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138:     writeReq.oncomplete = nop;",
          "141:   };",
          "143:   channel.readStart();",
          "",
          "[Removed Lines]",
          "140:     return true;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4a899c92742583ca9e0bb7d16e09a66b08c9d033",
      "candidate_info": {
        "commit_hash": "4a899c92742583ca9e0bb7d16e09a66b08c9d033",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/4a899c92742583ca9e0bb7d16e09a66b08c9d033",
        "files": [
          "deps/v8/src/arm/builtins-arm.cc",
          "deps/v8/src/arm/code-stubs-arm.cc",
          "deps/v8/src/arm/code-stubs-arm.h",
          "deps/v8/src/arm/deoptimizer-arm.cc",
          "deps/v8/src/arm/macro-assembler-arm.cc",
          "deps/v8/src/arm/macro-assembler-arm.h",
          "deps/v8/src/d8.cc",
          "deps/v8/src/flag-definitions.h",
          "deps/v8/src/heap.cc",
          "deps/v8/src/heap.h",
          "deps/v8/src/ia32/code-stubs-ia32.cc",
          "deps/v8/src/ia32/macro-assembler-ia32.cc",
          "deps/v8/src/mips/code-stubs-mips.cc",
          "deps/v8/src/mips/macro-assembler-mips.h",
          "deps/v8/src/objects-inl.h",
          "deps/v8/src/objects.cc",
          "deps/v8/src/objects.h",
          "deps/v8/src/profile-generator.cc",
          "deps/v8/src/x64/code-stubs-x64.cc",
          "deps/v8/test/cctest/SConscript",
          "deps/v8/test/cctest/test-hashing.cc",
          "deps/v8/test/mjsunit/debug-evaluate-locals-optimized-double.js",
          "deps/v8/test/mjsunit/debug-evaluate-locals-optimized.js"
        ],
        "message": "Land hash collision fix for V8 3.6 by Erik Corry.\n\n- If V8 snapshots are enabled then the hash is only randomized at build time.\n- Breaks MIPS\n\n---\nBackport hash collision workaround to 3.6.\nThis is made up of 9956, 10351, 10338 and 10330.\nThis change bakes the string hash key into the snapshot, so\nit is determined at build time for shapshot configs.\nReview URL: http://codereview.chromium.org/9124004",
        "before_after_code_files": [
          "deps/v8/src/arm/builtins-arm.cc||deps/v8/src/arm/builtins-arm.cc",
          "deps/v8/src/arm/code-stubs-arm.cc||deps/v8/src/arm/code-stubs-arm.cc",
          "deps/v8/src/arm/code-stubs-arm.h||deps/v8/src/arm/code-stubs-arm.h",
          "deps/v8/src/arm/deoptimizer-arm.cc||deps/v8/src/arm/deoptimizer-arm.cc",
          "deps/v8/src/arm/macro-assembler-arm.cc||deps/v8/src/arm/macro-assembler-arm.cc",
          "deps/v8/src/arm/macro-assembler-arm.h||deps/v8/src/arm/macro-assembler-arm.h",
          "deps/v8/src/d8.cc||deps/v8/src/d8.cc",
          "deps/v8/src/flag-definitions.h||deps/v8/src/flag-definitions.h",
          "deps/v8/src/heap.cc||deps/v8/src/heap.cc",
          "deps/v8/src/heap.h||deps/v8/src/heap.h",
          "deps/v8/src/ia32/code-stubs-ia32.cc||deps/v8/src/ia32/code-stubs-ia32.cc",
          "deps/v8/src/ia32/macro-assembler-ia32.cc||deps/v8/src/ia32/macro-assembler-ia32.cc",
          "deps/v8/src/mips/code-stubs-mips.cc||deps/v8/src/mips/code-stubs-mips.cc",
          "deps/v8/src/mips/macro-assembler-mips.h||deps/v8/src/mips/macro-assembler-mips.h",
          "deps/v8/src/objects-inl.h||deps/v8/src/objects-inl.h",
          "deps/v8/src/objects.cc||deps/v8/src/objects.cc",
          "deps/v8/src/objects.h||deps/v8/src/objects.h",
          "deps/v8/src/profile-generator.cc||deps/v8/src/profile-generator.cc",
          "deps/v8/src/x64/code-stubs-x64.cc||deps/v8/src/x64/code-stubs-x64.cc",
          "deps/v8/test/cctest/test-hashing.cc||deps/v8/test/cctest/test-hashing.cc",
          "deps/v8/test/mjsunit/debug-evaluate-locals-optimized-double.js||deps/v8/test/mjsunit/debug-evaluate-locals-optimized-double.js",
          "deps/v8/test/mjsunit/debug-evaluate-locals-optimized.js||deps/v8/test/mjsunit/debug-evaluate-locals-optimized.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/v8/src/arm/builtins-arm.cc||deps/v8/src/arm/builtins-arm.cc": [
          "File: deps/v8/src/arm/builtins-arm.cc -> deps/v8/src/arm/builtins-arm.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1007:   __ ldr(cp, FieldMemOperand(r1, JSFunction::kContextOffset));",
          "1015:   __ push(r1);",
          "",
          "[Removed Lines]",
          "1010:   ExternalReference roots_address =",
          "1011:       ExternalReference::roots_address(masm->isolate());",
          "1012:   __ mov(r10, Operand(roots_address));",
          "",
          "[Added Lines]",
          "1009:   __ InitializeRootRegister();",
          "",
          "---------------"
        ],
        "deps/v8/src/arm/code-stubs-arm.cc||deps/v8/src/arm/code-stubs-arm.cc": [
          "File: deps/v8/src/arm/code-stubs-arm.cc -> deps/v8/src/arm/code-stubs-arm.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "5043: }",
          "5110: void StringHelper::GenerateCopyCharacters(MacroAssembler* masm,",
          "5111:                                           Register dest,",
          "5112:                                           Register src,",
          "",
          "[Removed Lines]",
          "5046: class StringHelper : public AllStatic {",
          "5047:  public:",
          "5053:   static void GenerateCopyCharacters(MacroAssembler* masm,",
          "5054:                                      Register dest,",
          "5055:                                      Register src,",
          "5056:                                      Register count,",
          "5057:                                      Register scratch,",
          "5058:                                      bool ascii);",
          "5064:   static void GenerateCopyCharactersLong(MacroAssembler* masm,",
          "5065:                                          Register dest,",
          "5066:                                          Register src,",
          "5067:                                          Register count,",
          "5068:                                          Register scratch1,",
          "5069:                                          Register scratch2,",
          "5070:                                          Register scratch3,",
          "5071:                                          Register scratch4,",
          "5072:                                          Register scratch5,",
          "5073:                                          int flags);",
          "5083:   static void GenerateTwoCharacterSymbolTableProbe(MacroAssembler* masm,",
          "5084:                                                    Register c1,",
          "5085:                                                    Register c2,",
          "5086:                                                    Register scratch1,",
          "5087:                                                    Register scratch2,",
          "5088:                                                    Register scratch3,",
          "5089:                                                    Register scratch4,",
          "5090:                                                    Register scratch5,",
          "5091:                                                    Label* not_found);",
          "5094:   static void GenerateHashInit(MacroAssembler* masm,",
          "5095:                                Register hash,",
          "5096:                                Register character);",
          "5098:   static void GenerateHashAddCharacter(MacroAssembler* masm,",
          "5099:                                        Register hash,",
          "5100:                                        Register character);",
          "5102:   static void GenerateHashGetHash(MacroAssembler* masm,",
          "5103:                                   Register hash);",
          "5105:  private:",
          "5106:   DISALLOW_IMPLICIT_CONSTRUCTORS(StringHelper);",
          "5107: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5359:   static const int kProbes = 4;",
          "5360:   Label found_in_symbol_table;",
          "5361:   Label next_probe[kProbes];",
          "5362:   for (int i = 0; i < kProbes; i++) {",
          "5366:     if (i > 0) {",
          "5367:       __ add(candidate, hash, Operand(SymbolTable::GetProbeOffset(i)));",
          "",
          "[Removed Lines]",
          "5363:     Register candidate = scratch5;  // Scratch register contains candidate.",
          "",
          "[Added Lines]",
          "5298:   Register candidate = scratch5;  // Scratch register contains candidate.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5418:   __ jmp(not_found);",
          "5422:   __ bind(&found_in_symbol_table);",
          "5423:   __ Move(r0, result);",
          "5424: }",
          "",
          "[Removed Lines]",
          "5421:   Register result = scratch;",
          "",
          "[Added Lines]",
          "5356:   Register result = candidate;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5428:                                     Register hash,",
          "5429:                                     Register character) {",
          "5434: }",
          "",
          "[Removed Lines]",
          "5431:   __ add(hash, character, Operand(character, LSL, 10));",
          "5433:   __ eor(hash, hash, Operand(hash, ASR, 6));",
          "",
          "[Added Lines]",
          "5366:   __ LoadRoot(hash, Heap::kStringHashSeedRootIndex);",
          "5368:   __ add(hash, character, Operand(hash, LSR, kSmiTagSize));",
          "5370:   __ add(hash, hash, Operand(hash, LSL, 10));",
          "5372:   __ eor(hash, hash, Operand(hash, LSR, 6));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5443:   __ add(hash, hash, Operand(hash, LSL, 10));",
          "5446: }",
          "",
          "[Removed Lines]",
          "5445:   __ eor(hash, hash, Operand(hash, ASR, 6));",
          "",
          "[Added Lines]",
          "5384:   __ eor(hash, hash, Operand(hash, LSR, 6));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5452:   __ add(hash, hash, Operand(hash, LSL, 3));",
          "5456:   __ add(hash, hash, Operand(hash, LSL, 15), SetCC);",
          "5460: }",
          "",
          "[Removed Lines]",
          "5454:   __ eor(hash, hash, Operand(hash, ASR, 11));",
          "5459:   __ mov(hash, Operand(27), LeaveCC, ne);",
          "",
          "[Added Lines]",
          "5393:   __ eor(hash, hash, Operand(hash, LSR, 11));",
          "5397:   uint32_t kHashShiftCutOffMask = (1 << (32 - String::kHashShift)) - 1;",
          "5398:   __ and_(hash, hash, Operand(kHashShiftCutOffMask));",
          "5401:   __ mov(hash, Operand(27), LeaveCC, eq);",
          "",
          "---------------"
        ],
        "deps/v8/src/arm/code-stubs-arm.h||deps/v8/src/arm/code-stubs-arm.h": [
          "File: deps/v8/src/arm/code-stubs-arm.h -> deps/v8/src/arm/code-stubs-arm.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "225: };",
          "229: enum StringAddFlags {",
          "230:   NO_STRING_ADD_FLAGS = 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "228: class StringHelper : public AllStatic {",
          "229:  public:",
          "235:   static void GenerateCopyCharacters(MacroAssembler* masm,",
          "236:                                      Register dest,",
          "237:                                      Register src,",
          "238:                                      Register count,",
          "239:                                      Register scratch,",
          "240:                                      bool ascii);",
          "246:   static void GenerateCopyCharactersLong(MacroAssembler* masm,",
          "247:                                          Register dest,",
          "248:                                          Register src,",
          "249:                                          Register count,",
          "250:                                          Register scratch1,",
          "251:                                          Register scratch2,",
          "252:                                          Register scratch3,",
          "253:                                          Register scratch4,",
          "254:                                          Register scratch5,",
          "255:                                          int flags);",
          "265:   static void GenerateTwoCharacterSymbolTableProbe(MacroAssembler* masm,",
          "266:                                                    Register c1,",
          "267:                                                    Register c2,",
          "268:                                                    Register scratch1,",
          "269:                                                    Register scratch2,",
          "270:                                                    Register scratch3,",
          "271:                                                    Register scratch4,",
          "272:                                                    Register scratch5,",
          "273:                                                    Label* not_found);",
          "276:   static void GenerateHashInit(MacroAssembler* masm,",
          "277:                                Register hash,",
          "278:                                Register character);",
          "280:   static void GenerateHashAddCharacter(MacroAssembler* masm,",
          "281:                                        Register hash,",
          "282:                                        Register character);",
          "284:   static void GenerateHashGetHash(MacroAssembler* masm,",
          "285:                                   Register hash);",
          "287:  private:",
          "288:   DISALLOW_IMPLICIT_CONSTRUCTORS(StringHelper);",
          "289: };",
          "",
          "---------------"
        ],
        "deps/v8/src/arm/deoptimizer-arm.cc||deps/v8/src/arm/deoptimizer-arm.cc": [
          "File: deps/v8/src/arm/deoptimizer-arm.cc -> deps/v8/src/arm/deoptimizer-arm.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "736:   __ pop(ip);  // remove sp",
          "737:   __ pop(ip);  // remove lr",
          "743:   __ pop(ip);  // remove pc",
          "744:   __ pop(r7);  // get continuation, leave pc on stack",
          "",
          "[Removed Lines]",
          "740:   ExternalReference roots_address = ExternalReference::roots_address(isolate);",
          "741:   __ mov(r10, Operand(roots_address));",
          "",
          "[Added Lines]",
          "739:   __ InitializeRootRegister();",
          "",
          "---------------"
        ],
        "deps/v8/src/arm/macro-assembler-arm.cc||deps/v8/src/arm/macro-assembler-arm.cc": [
          "File: deps/v8/src/arm/macro-assembler-arm.cc -> deps/v8/src/arm/macro-assembler-arm.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "395: void MacroAssembler::LoadRoot(Register destination,",
          "396:                               Heap::RootListIndex index,",
          "397:                               Condition cond) {",
          "399: }",
          "402: void MacroAssembler::StoreRoot(Register source,",
          "403:                                Heap::RootListIndex index,",
          "404:                                Condition cond) {",
          "406: }",
          "",
          "[Removed Lines]",
          "398:   ldr(destination, MemOperand(roots, index << kPointerSizeLog2), cond);",
          "405:   str(source, MemOperand(roots, index << kPointerSizeLog2), cond);",
          "",
          "[Added Lines]",
          "398:   ldr(destination, MemOperand(kRootRegister, index << kPointerSizeLog2), cond);",
          "405:   str(source, MemOperand(kRootRegister, index << kPointerSizeLog2), cond);",
          "",
          "---------------"
        ],
        "deps/v8/src/arm/macro-assembler-arm.h||deps/v8/src/arm/macro-assembler-arm.h": [
          "File: deps/v8/src/arm/macro-assembler-arm.h -> deps/v8/src/arm/macro-assembler-arm.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: const Register cp = { 8 };  // JavaScript context pointer",
          "57: enum AllocationFlags {",
          "",
          "[Removed Lines]",
          "54: const Register roots = { 10 };  // Roots array pointer.",
          "",
          "[Added Lines]",
          "54: const Register kRootRegister = { 10 };  // Roots array pointer.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "350:                                     Register map,",
          "351:                                     Register scratch);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "353:   void InitializeRootRegister() {",
          "354:     ExternalReference roots_address =",
          "355:         ExternalReference::roots_address(isolate());",
          "356:     mov(kRootRegister, Operand(roots_address));",
          "357:   }",
          "",
          "---------------"
        ],
        "deps/v8/src/d8.cc||deps/v8/src/d8.cc": [
          "File: deps/v8/src/d8.cc -> deps/v8/src/d8.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "760: #endif  // V8_SHARED",
          "762:   Handle<ObjectTemplate> global_template = CreateGlobalTemplate();",
          "763:   Persistent<Context> context = Context::New(NULL, global_template);",
          "765:   Context::Scope scope(context);",
          "767: #ifndef V8_SHARED",
          "",
          "[Removed Lines]",
          "764:   ASSERT(!context.IsEmpty());",
          "",
          "[Added Lines]",
          "764:   v8::TryCatch try_catch;",
          "766:   if (context.IsEmpty()) {",
          "767:     v8::Local<v8::Value> st = try_catch.StackTrace();",
          "768:     ASSERT(!context.IsEmpty());",
          "769:   }",
          "",
          "---------------"
        ],
        "deps/v8/src/flag-definitions.h||deps/v8/src/flag-definitions.h": [
          "File: deps/v8/src/flag-definitions.h -> deps/v8/src/flag-definitions.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "319:             \"print stack trace when throwing exceptions\")",
          "320: DEFINE_bool(preallocate_message_memory, false,",
          "321:             \"preallocate some memory to build stack traces.\")",
          "324: DEFINE_bool(preemption, false,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "322: DEFINE_bool(randomize_string_hashes,",
          "323:             true,",
          "324:             \"randomize string hashes to avoid predictable hash collisions \"",
          "325:             \"(with snapshots this option cannot override the baked-in seed)\")",
          "326: DEFINE_int(string_hash_seed,",
          "327:            0,",
          "328:            \"Fixed seed to use to string hashing (0 means random)\"",
          "329:            \"(with snapshots this option cannot override the baked-in seed)\")",
          "",
          "---------------"
        ],
        "deps/v8/src/heap.cc||deps/v8/src/heap.cc": [
          "File: deps/v8/src/heap.cc -> deps/v8/src/heap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "5362:   if (lo_space_ == NULL) return false;",
          "5363:   if (!lo_space_->Setup()) return false;",
          "5365:   if (create_heap_objects) {",
          "5367:     if (!CreateInitialMaps()) return false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5366:   ASSERT(string_hash_seed() == 0);",
          "5367:   if (FLAG_randomize_string_hashes) {",
          "5368:     if (FLAG_string_hash_seed == 0) {",
          "5369:       set_string_hash_seed(",
          "5370:           Smi::FromInt(V8::RandomPrivate(isolate()) & 0x3fffffff));",
          "5371:     } else {",
          "5372:       set_string_hash_seed(Smi::FromInt(FLAG_string_hash_seed));",
          "5373:     }",
          "5374:   }",
          "",
          "---------------"
        ],
        "deps/v8/src/heap.h||deps/v8/src/heap.h": [
          "File: deps/v8/src/heap.h -> deps/v8/src/heap.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:   V(FixedArray, single_character_string_cache, SingleCharacterStringCache)     \\",
          "80:   V(FixedArray, string_split_cache, StringSplitCache)                          \\",
          "81:   V(Object, termination_exception, TerminationException)                       \\",
          "82:   V(FixedArray, empty_fixed_array, EmptyFixedArray)                            \\",
          "83:   V(ByteArray, empty_byte_array, EmptyByteArray)                               \\",
          "84:   V(FixedDoubleArray, empty_fixed_double_array, EmptyFixedDoubleArray)         \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:   V(Smi, string_hash_seed, StringHashSeed)                                     \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "842:   MUST_USE_RESULT MaybeObject* LookupSymbol(Vector<const char> str);",
          "843:   MUST_USE_RESULT MaybeObject* LookupAsciiSymbol(Vector<const char> str);",
          "846:   MUST_USE_RESULT MaybeObject* LookupAsciiSymbol(const char* str) {",
          "847:     return LookupSymbol(CStrVector(str));",
          "848:   }",
          "",
          "[Removed Lines]",
          "844:   MUST_USE_RESULT MaybeObject* LookupTwoByteSymbol(",
          "845:       Vector<const uc16> str);",
          "",
          "[Added Lines]",
          "845:   MUST_USE_RESULT MaybeObject* LookupTwoByteSymbol(Vector<const uc16> str);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1301:     if (global_gc_epilogue_callback_ != NULL) global_gc_epilogue_callback_();",
          "1302:   }",
          "1304:  private:",
          "1305:   Heap();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1304:   uint32_t StringHashSeed() {",
          "1305:     uint32_t seed = static_cast<uint32_t>(string_hash_seed()->value());",
          "1306:     ASSERT(FLAG_randomize_string_hashes || seed == 0);",
          "1307:     return seed;",
          "1308:   }",
          "",
          "---------------"
        ],
        "deps/v8/src/ia32/code-stubs-ia32.cc||deps/v8/src/ia32/code-stubs-ia32.cc": [
          "File: deps/v8/src/ia32/code-stubs-ia32.cc -> deps/v8/src/ia32/code-stubs-ia32.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "5539:   static const int kProbes = 4;",
          "5540:   Label found_in_symbol_table;",
          "5541:   Label next_probe[kProbes], next_probe_pop_mask[kProbes];",
          "5542:   for (int i = 0; i < kProbes; i++) {",
          "5544:     __ mov(scratch, hash);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5542:   Register candidate = scratch;  // Scratch register contains candidate.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5548:     __ and_(scratch, Operand(mask));",
          "5552:     STATIC_ASSERT(SymbolTable::kEntrySize == 1);",
          "5553:     __ mov(candidate,",
          "5554:            FieldOperand(symbol_table,",
          "",
          "[Removed Lines]",
          "5551:     Register candidate = scratch;  // Scratch register contains candidate.",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5593:   __ jmp(not_found);",
          "5597:   __ bind(&found_in_symbol_table);",
          "5598:   __ pop(mask);  // Pop saved mask from the stack.",
          "5599:   if (!result.is(eax)) {",
          "",
          "[Removed Lines]",
          "5596:   Register result = scratch;",
          "",
          "[Added Lines]",
          "5596:   Register result = candidate;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5606:                                     Register hash,",
          "5607:                                     Register character,",
          "5608:                                     Register scratch) {",
          "5614:   __ mov(scratch, hash);",
          "5616:   __ xor_(hash, Operand(scratch));",
          "5617: }",
          "",
          "[Removed Lines]",
          "5610:   __ mov(hash, character);",
          "5611:   __ shl(hash, 10);",
          "5612:   __ add(hash, Operand(character));",
          "5615:   __ sar(scratch, 6);",
          "",
          "[Added Lines]",
          "5610:   if (Serializer::enabled()) {",
          "5611:     ExternalReference roots_address =",
          "5612:         ExternalReference::roots_address(masm->isolate());",
          "5613:     __ mov(scratch, Immediate(Heap::kStringHashSeedRootIndex));",
          "5614:     __ mov(scratch, Operand::StaticArray(scratch,",
          "5615:                                          times_pointer_size,",
          "5616:                                          roots_address));",
          "5617:     __ add(scratch, Operand(character));",
          "5618:     __ mov(hash, scratch);",
          "5619:     __ shl(scratch, 10);",
          "5620:     __ add(hash, Operand(scratch));",
          "5621:   } else {",
          "5622:     int32_t seed = masm->isolate()->heap()->StringHashSeed();",
          "5623:     __ lea(scratch, Operand(character, seed));",
          "5624:     __ shl(scratch, 10);",
          "5625:     __ lea(hash, Operand(scratch, character, times_1, seed));",
          "5626:   }",
          "5629:   __ shr(scratch, 6);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5629:   __ add(hash, Operand(scratch));",
          "5631:   __ mov(scratch, hash);",
          "5633:   __ xor_(hash, Operand(scratch));",
          "5634: }",
          "",
          "[Removed Lines]",
          "5632:   __ sar(scratch, 6);",
          "",
          "[Added Lines]",
          "5646:   __ shr(scratch, 6);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5643:   __ add(hash, Operand(scratch));",
          "5645:   __ mov(scratch, hash);",
          "5647:   __ xor_(hash, Operand(scratch));",
          "5649:   __ mov(scratch, hash);",
          "5650:   __ shl(scratch, 15);",
          "5651:   __ add(hash, Operand(scratch));",
          "5654:   Label hash_not_zero;",
          "5655:   __ test(hash, Operand(hash));",
          "",
          "[Removed Lines]",
          "5646:   __ sar(scratch, 11);",
          "",
          "[Added Lines]",
          "5660:   __ shr(scratch, 11);",
          "5667:   uint32_t kHashShiftCutOffMask = (1 << (32 - String::kHashShift)) - 1;",
          "5668:   __ and_(hash, kHashShiftCutOffMask);",
          "",
          "---------------"
        ],
        "deps/v8/src/ia32/macro-assembler-ia32.cc||deps/v8/src/ia32/macro-assembler-ia32.cc": [
          "File: deps/v8/src/ia32/macro-assembler-ia32.cc -> deps/v8/src/ia32/macro-assembler-ia32.cc"
        ],
        "deps/v8/src/mips/code-stubs-mips.cc||deps/v8/src/mips/code-stubs-mips.cc": [
          "File: deps/v8/src/mips/code-stubs-mips.cc -> deps/v8/src/mips/code-stubs-mips.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "5579: void StringHelper::GenerateHashInit(MacroAssembler* masm,",
          "5584:   __ addu(hash, hash, character);",
          "5586:   __ sra(at, hash, 6);",
          "5587:   __ xor_(hash, hash, at);",
          "",
          "[Removed Lines]",
          "5580:                                       Register hash,",
          "5581:                                       Register character) {",
          "5583:   __ sll(hash, character, 10);",
          "",
          "[Added Lines]",
          "5580:                                     Register hash,",
          "5581:                                     Register character) {",
          "5583:   __ LoadRoot(hash, Heap::kStringHashSeedRootIndex);",
          "5585:   __ SmiUntag(hash);",
          "5587:   __ sll(at, hash, 10);",
          "5588:   __ addu(hash, hash, at);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5591: void StringHelper::GenerateHashAddCharacter(MacroAssembler* masm,",
          "5595:   __ addu(hash, hash, character);",
          "",
          "[Removed Lines]",
          "5592:                                               Register hash,",
          "5593:                                               Register character) {",
          "",
          "[Added Lines]",
          "5596:                                             Register hash,",
          "5597:                                             Register character) {",
          "",
          "---------------"
        ],
        "deps/v8/src/mips/macro-assembler-mips.h||deps/v8/src/mips/macro-assembler-mips.h": [
          "File: deps/v8/src/mips/macro-assembler-mips.h -> deps/v8/src/mips/macro-assembler-mips.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "671:   void DebugBreak();",
          "672: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "674:   void InitializeRootRegister() {",
          "675:     ExternalReference roots_address =",
          "676:         ExternalReference::roots_address(isolate());",
          "677:     li(kRootRegister, Operand(roots_address));",
          "678:   }",
          "",
          "---------------"
        ],
        "deps/v8/src/objects-inl.h||deps/v8/src/objects-inl.h": [
          "File: deps/v8/src/objects-inl.h -> deps/v8/src/objects-inl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2083:   while (true) {",
          "2084:     Object* element = KeyAt(entry);",
          "2087:         Shape::IsMatch(key, element)) return entry;",
          "2088:     entry = NextProbe(entry, count++, capacity);",
          "2089:   }",
          "",
          "[Removed Lines]",
          "2085:     if (element == isolate->heap()->undefined_value()) break;  // Empty entry.",
          "2086:     if (element != isolate->heap()->null_value() &&",
          "",
          "[Added Lines]",
          "2086:     if (element == isolate->heap()->raw_unchecked_undefined_value()) break;",
          "2087:     if (element != isolate->heap()->raw_unchecked_null_value() &&",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4235: }",
          "4239:   : length_(length),",
          "4241:     array_index_(0),",
          "4242:     is_array_index_(0 < length_ && length_ <= String::kMaxArrayIndexSize),",
          "4243:     is_first_char_(true),",
          "4247: bool StringHasher::has_trivial_hash() {",
          "",
          "[Removed Lines]",
          "4238: StringHasher::StringHasher(int length)",
          "4240:     raw_running_hash_(0),",
          "4244:     is_valid_(true) { }",
          "",
          "[Added Lines]",
          "4239: StringHasher::StringHasher(int length, uint32_t seed)",
          "4241:     raw_running_hash_(seed),",
          "4245:     is_valid_(true) {",
          "4246:   ASSERT(FLAG_randomize_string_hashes || raw_running_hash_ == 0);",
          "4247: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4293:   result += (result << 3);",
          "4294:   result ^= (result >> 11);",
          "4295:   result += (result << 15);",
          "4297:     result = 27;",
          "4298:   }",
          "4299:   return result;",
          "",
          "[Removed Lines]",
          "4296:   if (result == 0) {",
          "",
          "[Added Lines]",
          "4299:   if ((result & String::kHashBitMask) == 0) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4303: template <typename schar>",
          "4306:   if (!hasher.has_trivial_hash()) {",
          "4307:     int i;",
          "4308:     for (i = 0; hasher.is_array_index() && (i < length); i++) {",
          "",
          "[Removed Lines]",
          "4304: uint32_t HashSequentialString(const schar* chars, int length) {",
          "4305:   StringHasher hasher(length);",
          "",
          "[Added Lines]",
          "4307: uint32_t HashSequentialString(const schar* chars, int length, uint32_t seed) {",
          "4308:   StringHasher hasher(length, seed);",
          "",
          "---------------"
        ],
        "deps/v8/src/objects.cc||deps/v8/src/objects.cc": [
          "File: deps/v8/src/objects.cc -> deps/v8/src/objects.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "5928:   if (HasHashCode() && other->HasHashCode()) {",
          "5929:     if (Hash() != other->Hash()) return false;",
          "5930:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5929: #ifdef DEBUG",
          "5930:     if (FLAG_enable_slow_asserts) {",
          "5931:       if (Hash() != other->Hash()) {",
          "5932:         bool found_difference = false;",
          "5933:         for (int i = 0; i < len; i++) {",
          "5934:           if (Get(i) != other->Get(i)) {",
          "5935:             found_difference = true;",
          "5936:             break;",
          "5937:           }",
          "5938:         }",
          "5939:         ASSERT(found_difference);",
          "5940:       }",
          "5941:     }",
          "5942: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6062:   uint32_t field = 0;",
          "6063:   if (StringShape(this).IsSequentialAscii()) {",
          "6065:   } else if (StringShape(this).IsSequentialTwoByte()) {",
          "6067:   } else {",
          "6068:     StringInputBuffer buffer(this);",
          "6070:   }",
          "",
          "[Removed Lines]",
          "6064:     field = HashSequentialString(SeqAsciiString::cast(this)->GetChars(), len);",
          "6066:     field = HashSequentialString(SeqTwoByteString::cast(this)->GetChars(), len);",
          "6069:     field = ComputeHashField(&buffer, len);",
          "",
          "[Added Lines]",
          "6078:     field = HashSequentialString(SeqAsciiString::cast(this)->GetChars(),",
          "6079:                                  len,",
          "6080:                                  GetHeap()->StringHashSeed());",
          "6082:     field = HashSequentialString(SeqTwoByteString::cast(this)->GetChars(),",
          "6083:                                  len,",
          "6084:                                  GetHeap()->StringHashSeed());",
          "6087:     field = ComputeHashField(&buffer, len, GetHeap()->StringHashSeed());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6159: uint32_t String::ComputeHashField(unibrow::CharacterStream* buffer,",
          "",
          "[Removed Lines]",
          "6160:                                   int length) {",
          "6161:   StringHasher hasher(length);",
          "",
          "[Added Lines]",
          "6178:                                   int length,",
          "6179:                                   uint32_t seed) {",
          "6180:   StringHasher hasher(length, seed);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "9543: class Utf8SymbolKey : public HashTableKey {",
          "9544:  public:",
          "9548:   bool IsMatch(Object* string) {",
          "9549:     return String::cast(string)->IsEqualTo(string_);",
          "",
          "[Removed Lines]",
          "9545:   explicit Utf8SymbolKey(Vector<const char> string)",
          "9546:       : string_(string), hash_field_(0) { }",
          "",
          "[Added Lines]",
          "9564:   explicit Utf8SymbolKey(Vector<const char> string, uint32_t seed)",
          "9565:       : string_(string), hash_field_(0), seed_(seed) { }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "9554:     unibrow::Utf8InputBuffer<> buffer(string_.start(),",
          "9555:                                       static_cast<unsigned>(string_.length()));",
          "9556:     chars_ = buffer.Length();",
          "9558:     uint32_t result = hash_field_ >> String::kHashShift;",
          "9559:     ASSERT(result != 0);  // Ensure that the hash value of 0 is never computed.",
          "9560:     return result;",
          "",
          "[Removed Lines]",
          "9557:     hash_field_ = String::ComputeHashField(&buffer, chars_);",
          "",
          "[Added Lines]",
          "9576:     hash_field_ = String::ComputeHashField(&buffer, chars_, seed_);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "9573:   Vector<const char> string_;",
          "9574:   uint32_t hash_field_;",
          "9575:   int chars_;  // Caches the number of characters when computing the hash code.",
          "9576: };",
          "9579: template <typename Char>",
          "9580: class SequentialSymbolKey : public HashTableKey {",
          "9581:  public:",
          "9585:   uint32_t Hash() {",
          "",
          "[Removed Lines]",
          "9582:   explicit SequentialSymbolKey(Vector<const Char> string)",
          "9583:       : string_(string), hash_field_(0) { }",
          "9586:     StringHasher hasher(string_.length());",
          "",
          "[Added Lines]",
          "9595:   uint32_t seed_;",
          "9602:   explicit SequentialSymbolKey(Vector<const Char> string, uint32_t seed)",
          "9603:       : string_(string), hash_field_(0), seed_(seed) { }",
          "9606:     StringHasher hasher(string_.length(), seed_);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "9620:   Vector<const Char> string_;",
          "9621:   uint32_t hash_field_;",
          "9622: };",
          "9626: class AsciiSymbolKey : public SequentialSymbolKey<char> {",
          "9627:  public:",
          "9631:   bool IsMatch(Object* string) {",
          "9632:     return String::cast(string)->IsAsciiEqualTo(string_);",
          "",
          "[Removed Lines]",
          "9628:   explicit AsciiSymbolKey(Vector<const char> str)",
          "9629:       : SequentialSymbolKey<char>(str) { }",
          "",
          "[Added Lines]",
          "9642:   uint32_t seed_;",
          "9649:   AsciiSymbolKey(Vector<const char> str, uint32_t seed)",
          "9650:       : SequentialSymbolKey<char>(str, seed) { }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "9643:  public:",
          "9644:   explicit SubStringAsciiSymbolKey(Handle<SeqAsciiString> string,",
          "9645:                                    int from,",
          "9649:   uint32_t Hash() {",
          "9650:     ASSERT(length_ >= 0);",
          "9651:     ASSERT(from_ + length_ <= string_->length());",
          "",
          "[Removed Lines]",
          "9646:                                    int length)",
          "9647:       : string_(string), from_(from), length_(length) { }",
          "9652:     StringHasher hasher(length_);",
          "",
          "[Added Lines]",
          "9667:                                    int length,",
          "9668:                                    uint32_t seed)",
          "9669:       : string_(string), from_(from), length_(length), seed_(seed) { }",
          "9674:     StringHasher hasher(length_, string_->GetHeap()->StringHashSeed());",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "9701:   int from_;",
          "9702:   int length_;",
          "9703:   uint32_t hash_field_;",
          "9704: };",
          "9707: class TwoByteSymbolKey : public SequentialSymbolKey<uc16> {",
          "9708:  public:",
          "9712:   bool IsMatch(Object* string) {",
          "9713:     return String::cast(string)->IsTwoByteEqualTo(string_);",
          "",
          "[Removed Lines]",
          "9709:   explicit TwoByteSymbolKey(Vector<const uc16> str)",
          "9710:       : SequentialSymbolKey<uc16>(str) { }",
          "",
          "[Added Lines]",
          "9726:   uint32_t seed_;",
          "9732:   explicit TwoByteSymbolKey(Vector<const uc16> str, uint32_t seed)",
          "9733:       : SequentialSymbolKey<uc16>(str, seed) { }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "10480: class TwoCharHashTableKey : public HashTableKey {",
          "10481:  public:",
          "10483:     : c1_(c1), c2_(c2) {",
          "10486:     hash ^= hash >> 6;",
          "10488:     hash += c2;",
          "",
          "[Removed Lines]",
          "10482:   TwoCharHashTableKey(uint32_t c1, uint32_t c2)",
          "10485:     uint32_t hash = c1 + (c1 << 10);",
          "",
          "[Added Lines]",
          "10505:   TwoCharHashTableKey(uint32_t c1, uint32_t c2, uint32_t seed)",
          "10508:     uint32_t hash = seed;",
          "10509:     hash += c1;",
          "10510:     hash += hash << 10;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "10492:     hash += hash << 3;",
          "10493:     hash ^= hash >> 11;",
          "10494:     hash += hash << 15;",
          "10496: #ifdef DEBUG",
          "10498:     hasher.AddCharacter(c1);",
          "10499:     hasher.AddCharacter(c2);",
          "",
          "[Removed Lines]",
          "10495:     if (hash == 0) hash = 27;",
          "10497:     StringHasher hasher(2);",
          "",
          "[Added Lines]",
          "10520:     if ((hash & String::kHashBitMask) == 0) hash = 27;",
          "10522:     StringHasher hasher(2, seed);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "10551: bool SymbolTable::LookupTwoCharsSymbolIfExists(uint32_t c1,",
          "10552:                                                uint32_t c2,",
          "10553:                                                String** symbol) {",
          "10555:   int entry = FindEntry(&key);",
          "10556:   if (entry == kNotFound) {",
          "10557:     return false;",
          "",
          "[Removed Lines]",
          "10554:   TwoCharHashTableKey key(c1, c2);",
          "",
          "[Added Lines]",
          "10579:   TwoCharHashTableKey key(c1, c2, GetHeap()->StringHashSeed());",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "10564: }",
          "10569:   return LookupKey(&key, s);",
          "10570: }",
          "10573: MaybeObject* SymbolTable::LookupAsciiSymbol(Vector<const char> str,",
          "10574:                                             Object** s) {",
          "10576:   return LookupKey(&key, s);",
          "10577: }",
          "",
          "[Removed Lines]",
          "10567: MaybeObject* SymbolTable::LookupSymbol(Vector<const char> str, Object** s) {",
          "10568:   Utf8SymbolKey key(str);",
          "10575:   AsciiSymbolKey key(str);",
          "",
          "[Added Lines]",
          "10592: MaybeObject* SymbolTable::LookupSymbol(Vector<const char> str,",
          "10593:                                        Object** s) {",
          "10594:   Utf8SymbolKey key(str, GetHeap()->StringHashSeed());",
          "10601:   AsciiSymbolKey key(str, GetHeap()->StringHashSeed());",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "10581:                                                      int from,",
          "10582:                                                      int length,",
          "10583:                                                      Object** s) {",
          "10585:   return LookupKey(&key, s);",
          "10586: }",
          "10589: MaybeObject* SymbolTable::LookupTwoByteSymbol(Vector<const uc16> str,",
          "10590:                                               Object** s) {",
          "10592:   return LookupKey(&key, s);",
          "10593: }",
          "",
          "[Removed Lines]",
          "10584:   SubStringAsciiSymbolKey key(str, from, length);",
          "10591:   TwoByteSymbolKey key(str);",
          "",
          "[Added Lines]",
          "10610:   SubStringAsciiSymbolKey key(str, from, length, GetHeap()->StringHashSeed());",
          "10617:   TwoByteSymbolKey key(str, GetHeap()->StringHashSeed());",
          "",
          "---------------"
        ],
        "deps/v8/src/objects.h||deps/v8/src/objects.h": [
          "File: deps/v8/src/objects.h -> deps/v8/src/objects.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5735: class StringHasher {",
          "5736:  public:",
          "",
          "[Removed Lines]",
          "5737:   explicit inline StringHasher(int length);",
          "",
          "[Added Lines]",
          "5737:   explicit inline StringHasher(int length, uint32_t seed);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5787: template <typename schar>",
          "",
          "[Removed Lines]",
          "5788: inline uint32_t HashSequentialString(const schar* chars, int length);",
          "",
          "[Added Lines]",
          "5788: inline uint32_t HashSequentialString(const schar* chars,",
          "5789:                                      int length,",
          "5790:                                      uint32_t seed);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6007:   inline uint32_t Hash();",
          "6009:   static uint32_t ComputeHashField(unibrow::CharacterStream* buffer,",
          "6012:   static bool ComputeArrayIndex(unibrow::CharacterStream* buffer,",
          "6013:                                 uint32_t* index,",
          "",
          "[Removed Lines]",
          "6010:                                    int length);",
          "",
          "[Added Lines]",
          "6012:                                    int length,",
          "6013:                                    uint32_t seed);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6073:   static const int kHashShift = kNofHashBitFields;",
          "6077:   static const int kMaxCachedArrayIndexLength = 7;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6080:   static const uint32_t kHashBitMask = 0xffffffffu >> kHashShift;",
          "",
          "---------------"
        ],
        "deps/v8/src/profile-generator.cc||deps/v8/src/profile-generator.cc": [
          "File: deps/v8/src/profile-generator.cc -> deps/v8/src/profile-generator.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:   Vector<char> dst = Vector<char>::New(len + 1);",
          "111:   OS::StrNCpy(dst, src, len);",
          "112:   dst[len] = '\\0';",
          "114:   return AddOrDisposeString(dst.start(), hash);",
          "115: }",
          "",
          "[Removed Lines]",
          "113:   uint32_t hash = HashSequentialString(dst.start(), len);",
          "",
          "[Added Lines]",
          "113:   uint32_t hash =",
          "114:       HashSequentialString(dst.start(), len, HEAP->StringHashSeed());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143:     DeleteArray(str.start());",
          "144:     return format;",
          "145:   }",
          "147:   return AddOrDisposeString(str.start(), hash);",
          "148: }",
          "",
          "[Removed Lines]",
          "146:   uint32_t hash = HashSequentialString(str.start(), len);",
          "",
          "[Added Lines]",
          "147:   uint32_t hash = HashSequentialString(",
          "148:       str.start(), len, HEAP->StringHashSeed());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1462: uint64_t HeapObjectsMap::GenerateId(v8::RetainedObjectInfo* info) {",
          "1463:   uint64_t id = static_cast<uint64_t>(info->GetHash());",
          "1464:   const char* label = info->GetLabel();",
          "1466:   intptr_t element_count = info->GetElementCount();",
          "1467:   if (element_count != -1)",
          "1468:     id ^= ComputeIntegerHash(static_cast<uint32_t>(element_count));",
          "",
          "[Removed Lines]",
          "1465:   id ^= HashSequentialString(label, static_cast<int>(strlen(label)));",
          "",
          "[Added Lines]",
          "1467:   id ^= HashSequentialString(label,",
          "1468:                              static_cast<int>(strlen(label)),",
          "1469:                              HEAP->StringHashSeed());",
          "",
          "---------------"
        ],
        "deps/v8/src/x64/code-stubs-x64.cc||deps/v8/src/x64/code-stubs-x64.cc": [
          "File: deps/v8/src/x64/code-stubs-x64.cc -> deps/v8/src/x64/code-stubs-x64.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "4542:   static const int kProbes = 4;",
          "4543:   Label found_in_symbol_table;",
          "4544:   Label next_probe[kProbes];",
          "4545:   for (int i = 0; i < kProbes; i++) {",
          "4547:     __ movl(scratch, hash);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4545:   Register candidate = scratch;  // Scratch register contains candidate.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4551:     __ andl(scratch, mask);",
          "4555:     STATIC_ASSERT(SymbolTable::kEntrySize == 1);",
          "4556:     __ movq(candidate,",
          "4557:             FieldOperand(symbol_table,",
          "",
          "[Removed Lines]",
          "4554:     Register candidate = scratch;  // Scratch register contains candidate.",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4597:   __ jmp(not_found);",
          "4601:   __ bind(&found_in_symbol_table);",
          "4602:   if (!result.is(rax)) {",
          "4603:     __ movq(rax, result);",
          "",
          "[Removed Lines]",
          "4600:   Register result = scratch;",
          "",
          "[Added Lines]",
          "4600:   Register result = candidate;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4609:                                     Register hash,",
          "4610:                                     Register character,",
          "4611:                                     Register scratch) {",
          "4617:   __ movl(scratch, hash);",
          "4619:   __ xorl(hash, scratch);",
          "4620: }",
          "",
          "[Removed Lines]",
          "4613:   __ movl(hash, character);",
          "4614:   __ shll(hash, Immediate(10));",
          "4615:   __ addl(hash, character);",
          "4618:   __ sarl(scratch, Immediate(6));",
          "",
          "[Added Lines]",
          "4613:   __ LoadRoot(scratch, Heap::kStringHashSeedRootIndex);",
          "4614:   __ SmiToInteger32(scratch, scratch);",
          "4615:   __ addl(scratch, character);",
          "4616:   __ movl(hash, scratch);",
          "4617:   __ shll(scratch, Immediate(10));",
          "4618:   __ addl(hash, scratch);",
          "4621:   __ shrl(scratch, Immediate(6));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4632:   __ addl(hash, scratch);",
          "4634:   __ movl(scratch, hash);",
          "4636:   __ xorl(hash, scratch);",
          "4637: }",
          "",
          "[Removed Lines]",
          "4635:   __ sarl(scratch, Immediate(6));",
          "",
          "[Added Lines]",
          "4638:   __ shrl(scratch, Immediate(6));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4644:   __ leal(hash, Operand(hash, hash, times_8, 0));",
          "4646:   __ movl(scratch, hash);",
          "4648:   __ xorl(hash, scratch);",
          "4650:   __ movl(scratch, hash);",
          "4651:   __ shll(scratch, Immediate(15));",
          "4652:   __ addl(hash, scratch);",
          "4655:   Label hash_not_zero;",
          "4656:   __ j(not_zero, &hash_not_zero);",
          "",
          "[Removed Lines]",
          "4647:   __ sarl(scratch, Immediate(11));",
          "",
          "[Added Lines]",
          "4650:   __ shrl(scratch, Immediate(11));",
          "4657:   uint32_t kHashShiftCutOffMask = (1 << (32 - String::kHashShift)) - 1;",
          "4658:   __ andl(hash, Immediate(kHashShiftCutOffMask));",
          "",
          "---------------"
        ],
        "deps/v8/test/cctest/test-hashing.cc||deps/v8/test/cctest/test-hashing.cc": [
          "File: deps/v8/test/cctest/test-hashing.cc -> deps/v8/test/cctest/test-hashing.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #include <stdlib.h>",
          "30: #include \"v8.h\"",
          "32: #include \"factory.h\"",
          "33: #include \"macro-assembler.h\"",
          "34: #include \"cctest.h\"",
          "35: #include \"code-stubs.h\"",
          "36: #include \"objects.h\"",
          "38: #ifdef USE_SIMULATOR",
          "39: #include \"simulator.h\"",
          "40: #endif",
          "42: using namespace v8::internal;",
          "45: typedef uint32_t (*HASH_FUNCTION)();",
          "47: static v8::Persistent<v8::Context> env;",
          "49: #define __ masm->",
          "52: void generate(MacroAssembler* masm, i::Vector<const char> string) {",
          "55:   ASSERT(string.length() > 0);",
          "56: #ifdef V8_TARGET_ARCH_IA32",
          "57:   __ push(ebx);",
          "58:   __ push(ecx);",
          "59:   __ mov(eax, Immediate(0));",
          "60:   __ mov(ebx, Immediate(string.at(0)));",
          "61:   StringHelper::GenerateHashInit(masm, eax, ebx, ecx);",
          "62:   for (int i = 1; i < string.length(); i++) {",
          "63:     __ mov(ebx, Immediate(string.at(i)));",
          "64:     StringHelper::GenerateHashAddCharacter(masm, eax, ebx, ecx);",
          "65:   }",
          "66:   StringHelper::GenerateHashGetHash(masm, eax, ecx);",
          "67:   __ pop(ecx);",
          "68:   __ pop(ebx);",
          "69:   __ Ret();",
          "70: #elif V8_TARGET_ARCH_X64",
          "71:   __ push(kRootRegister);",
          "72:   __ InitializeRootRegister();",
          "73:   __ push(rbx);",
          "74:   __ push(rcx);",
          "75:   __ movq(rax, Immediate(0));",
          "76:   __ movq(rbx, Immediate(string.at(0)));",
          "77:   StringHelper::GenerateHashInit(masm, rax, rbx, rcx);",
          "78:   for (int i = 1; i < string.length(); i++) {",
          "79:     __ movq(rbx, Immediate(string.at(i)));",
          "80:     StringHelper::GenerateHashAddCharacter(masm, rax, rbx, rcx);",
          "81:   }",
          "82:   StringHelper::GenerateHashGetHash(masm, rax, rcx);",
          "83:   __ pop(rcx);",
          "84:   __ pop(rbx);",
          "85:   __ pop(kRootRegister);",
          "86:   __ Ret();",
          "87: #elif V8_TARGET_ARCH_ARM",
          "88:   __ push(kRootRegister);",
          "89:   __ InitializeRootRegister();",
          "91:   __ mov(r0, Operand(0));",
          "92:   __ mov(ip, Operand(string.at(0)));",
          "93:   StringHelper::GenerateHashInit(masm, r0, ip);",
          "94:   for (int i = 1; i < string.length(); i++) {",
          "95:     __ mov(ip, Operand(string.at(i)));",
          "96:     StringHelper::GenerateHashAddCharacter(masm, r0, ip);",
          "97:   }",
          "98:   StringHelper::GenerateHashGetHash(masm, r0);",
          "99:   __ pop(kRootRegister);",
          "100:   __ mov(pc, Operand(lr));",
          "101: #elif V8_TARGET_ARCH_MIPS",
          "102:   __ push(kRootRegister);",
          "103:   __ InitializeRootRegister();",
          "105:   __ li(v0, Operand(0));",
          "106:   __ li(t1, Operand(string.at(0)));",
          "107:   StringHelper::GenerateHashInit(masm, v0, t1);",
          "108:   for (int i = 1; i < string.length(); i++) {",
          "109:     __ li(t1, Operand(string.at(i)));",
          "110:     StringHelper::GenerateHashAddCharacter(masm, v0, t1);",
          "111:   }",
          "112:   StringHelper::GenerateHashGetHash(masm, v0);",
          "113:   __ pop(kRootRegister);",
          "114:   __ jr(ra);",
          "115:   __ nop();",
          "116: #endif",
          "117: }",
          "120: void check(i::Vector<const char> string) {",
          "121:   v8::HandleScope scope;",
          "122:   v8::internal::byte buffer[2048];",
          "123:   MacroAssembler masm(Isolate::Current(), buffer, sizeof buffer);",
          "125:   generate(&masm, string);",
          "127:   CodeDesc desc;",
          "128:   masm.GetCode(&desc);",
          "129:   Code* code = Code::cast(HEAP->CreateCode(",
          "130:       desc,",
          "131:       Code::ComputeFlags(Code::STUB),",
          "132:       Handle<Object>(HEAP->undefined_value()))->ToObjectChecked());",
          "133:   CHECK(code->IsCode());",
          "135:   HASH_FUNCTION hash = FUNCTION_CAST<HASH_FUNCTION>(code->entry());",
          "136:   Handle<String> v8_string = FACTORY->NewStringFromAscii(string);",
          "137:   v8_string->set_hash_field(String::kEmptyHashField);",
          "138: #ifdef USE_SIMULATOR",
          "139:   uint32_t codegen_hash =",
          "140:       reinterpret_cast<uint32_t>(CALL_GENERATED_CODE(hash, 0, 0, 0, 0, 0));",
          "141: #else",
          "142:   uint32_t codegen_hash = hash();",
          "143: #endif",
          "144:   uint32_t runtime_hash = v8_string->Hash();",
          "145:   CHECK(runtime_hash == codegen_hash);",
          "146: }",
          "149: void check_twochars(char a, char b) {",
          "150:   char ab[2] = {a, b};",
          "151:   check(i::Vector<const char>(ab, 2));",
          "152: }",
          "155: TEST(StringHash) {",
          "156:   if (env.IsEmpty()) env = v8::Context::New();",
          "157:   for (int a = 0; a < String::kMaxAsciiCharCode; a++) {",
          "159:     if (a >= '0' && a <= '9') continue;",
          "160:     for (int b = 0; b < String::kMaxAsciiCharCode; b++) {",
          "161:       if (b >= '0' && b <= '9') continue;",
          "162:       check_twochars(static_cast<char>(a), static_cast<char>(b));",
          "163:     }",
          "164:   }",
          "165:   check(i::Vector<const char>(\"*\",       1));",
          "166:   check(i::Vector<const char>(\".zZ\",     3));",
          "167:   check(i::Vector<const char>(\"muc\",     3));",
          "168:   check(i::Vector<const char>(\"(>'_')>\", 7));",
          "169:   check(i::Vector<const char>(\"-=[ vee eight ftw ]=-\", 21));",
          "170: }",
          "172: #undef __",
          "",
          "---------------"
        ],
        "deps/v8/test/mjsunit/debug-evaluate-locals-optimized-double.js||deps/v8/test/mjsunit/debug-evaluate-locals-optimized-double.js": [
          "File: deps/v8/test/mjsunit/debug-evaluate-locals-optimized-double.js -> deps/v8/test/mjsunit/debug-evaluate-locals-optimized-double.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:           var expected_y = (i + 1) * 2 + 2 + ((i + 1) * 2 + 2) / 100;",
          "59:           assertEquals('x', frame.argumentName(0));",
          "",
          "[Removed Lines]",
          "53:           assertEquals('a', frame.localName(0));",
          "54:           assertEquals('b', frame.localName(1));",
          "55:           assertEquals(expected_a, frame.localValue(0).value());",
          "56:           assertEquals(expected_b, frame.localValue(1).value());",
          "",
          "[Added Lines]",
          "53:           var a = ('a' === frame.localName(0)) ? 0 : 1;",
          "54:           var b = 1 - a;",
          "55:           assertEquals('a', frame.localName(a));",
          "56:           assertEquals('b', frame.localName(b));",
          "57:           assertEquals(expected_a, frame.localValue(a).value());",
          "58:           assertEquals(expected_b, frame.localValue(b).value());",
          "",
          "---------------"
        ],
        "deps/v8/test/mjsunit/debug-evaluate-locals-optimized.js||deps/v8/test/mjsunit/debug-evaluate-locals-optimized.js": [
          "File: deps/v8/test/mjsunit/debug-evaluate-locals-optimized.js -> deps/v8/test/mjsunit/debug-evaluate-locals-optimized.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:           var expected_y = (i + 1) * 2 + 2;",
          "59:           assertEquals('x', frame.argumentName(0));",
          "",
          "[Removed Lines]",
          "53:           assertEquals('a', frame.localName(0));",
          "54:           assertEquals('b', frame.localName(1));",
          "55:           assertEquals(expected_a, frame.localValue(0).value());",
          "56:           assertEquals(expected_b, frame.localValue(1).value());",
          "",
          "[Added Lines]",
          "53:           var a = ('a' === frame.localName(0)) ? 0 : 1;",
          "54:           var b = 1 - a;",
          "55:           assertEquals('a', frame.localName(a));",
          "56:           assertEquals('b', frame.localName(b));",
          "57:           assertEquals(expected_a, frame.localValue(a).value());",
          "58:           assertEquals(expected_b, frame.localValue(b).value());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:       listenerComplete = true;",
          "120:     }",
          "121:   } catch (e) {",
          "123:   };",
          "124: };",
          "",
          "[Removed Lines]",
          "122:     exception = e",
          "",
          "[Added Lines]",
          "124:     exception = e.stack;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1867511400e895989652af33aa4942b446a90151",
      "candidate_info": {
        "commit_hash": "1867511400e895989652af33aa4942b446a90151",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/1867511400e895989652af33aa4942b446a90151",
        "files": [
          "common.gypi"
        ],
        "message": "build: compile with -Wextra -Wno-unused-parameter",
        "before_after_code_files": [
          "common.gypi||common.gypi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "common.gypi||common.gypi": [
          "File: common.gypi -> common.gypi",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:         ],",
          "159:       }],",
          "160:       [ 'OS==\"linux\" or OS==\"freebsd\" or OS==\"openbsd\" or OS==\"solaris\"', {",
          "162:         'cflags_cc': [ '-fno-rtti', '-fno-exceptions' ],",
          "163:         'ldflags': [ '-pthread', '-rdynamic' ],",
          "164:         'conditions': [",
          "",
          "[Removed Lines]",
          "161:         'cflags': [ '-Wall', '-pthread', ],",
          "",
          "[Added Lines]",
          "161:         'cflags': [ '-Wall', '-Wextra', '-Wno-unused-parameter', '-pthread', ],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c13cbbc0b43287dfb86aef91e402a0719363e11",
      "candidate_info": {
        "commit_hash": "2c13cbbc0b43287dfb86aef91e402a0719363e11",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/2c13cbbc0b43287dfb86aef91e402a0719363e11",
        "files": [
          "deps/openssl/openssl/crypto/asn1/a_strex.c"
        ],
        "message": "crypto: fix uninitialized memory access in openssl\n\nASN1_STRING_to_UTF8() passes an ASN1_STRING to ASN1_STRING_set() but forgot to\ninitialize the `length` field.\n\nFixes the following valgrind error:\n\n  $ valgrind -q --track-origins=yes --num-callers=19 \\\n      out/Debug/node test/simple/test-tls-client-abort.js\n  ==2690== Conditional jump or move depends on uninitialised value(s)\n  ==2690==    at 0x784B69: ASN1_STRING_set (asn1_lib.c:382)\n  ==2690==    by 0x809564: ASN1_mbstring_ncopy (a_mbstr.c:204)\n  ==2690==    by 0x8090F0: ASN1_mbstring_copy (a_mbstr.c:86)\n  ==2690==    by 0x782F1F: ASN1_STRING_to_UTF8 (a_strex.c:570)\n  ==2690==    by 0x78F090: asn1_string_canon (x_name.c:409)\n  ==2690==    by 0x78EF17: x509_name_canon (x_name.c:354)\n  ==2690==    by 0x78EA7D: x509_name_ex_d2i (x_name.c:210)\n  ==2690==    by 0x788058: ASN1_item_ex_d2i (tasn_dec.c:239)\n  ==2690==    by 0x7890D4: asn1_template_noexp_d2i (tasn_dec.c:746)\n  ==2690==    by 0x788CB6: asn1_template_ex_d2i (tasn_dec.c:607)\n  ==2690==    by 0x78877A: ASN1_item_ex_d2i (tasn_dec.c:448)\n  ==2690==    by 0x7890D4: asn1_template_noexp_d2i (tasn_dec.c:746)\n  ==2690==    by 0x788CB6: asn1_template_ex_d2i (tasn_dec.c:607)\n  ==2690==    by 0x78877A: ASN1_item_ex_d2i (tasn_dec.c:448)\n  ==2690==    by 0x787C93: ASN1_item_d2i (tasn_dec.c:136)\n  ==2690==    by 0x78F5E4: d2i_X509 (x_x509.c:141)\n  ==2690==    by 0x7C9B91: PEM_ASN1_read_bio (pem_oth.c:81)\n  ==2690==    by 0x7CA506: PEM_read_bio_X509 (pem_x509.c:67)\n  ==2690==    by 0x703C9A: node::crypto::SecureContext::AddRootCerts(v8::Arguments const&) (node_crypto.cc:497)\n  ==2690==  Uninitialised value was created by a stack allocation\n  ==2690==    at 0x782E89: ASN1_STRING_to_UTF8 (a_strex.c:560)",
        "before_after_code_files": [
          "deps/openssl/openssl/crypto/asn1/a_strex.c||deps/openssl/openssl/crypto/asn1/a_strex.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/openssl/openssl/crypto/asn1/a_strex.c||deps/openssl/openssl/crypto/asn1/a_strex.c": [
          "File: deps/openssl/openssl/crypto/asn1/a_strex.c -> deps/openssl/openssl/crypto/asn1/a_strex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "566:  mbflag = tag2nbyte[type];",
          "567:  if(mbflag == -1) return -1;",
          "568:  mbflag |= MBSTRING_FLAG;",
          "569:  stmp.data = NULL;",
          "570:  ret = ASN1_mbstring_copy(&str, in->data, in->length, mbflag, B_ASN1_UTF8STRING);",
          "571:  if(ret < 0) return ret;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "569:  memset(&stmp, 0, sizeof(stmp));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f19e20d33f57c4d2853aaea7d2724d44f3b0012f",
      "candidate_info": {
        "commit_hash": "f19e20d33f57c4d2853aaea7d2724d44f3b0012f",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/f19e20d33f57c4d2853aaea7d2724d44f3b0012f",
        "files": [
          "AUTHORS",
          "ChangeLog",
          "doc/about/index.html",
          "doc/community/index.html",
          "doc/index.html",
          "doc/logos/index.html",
          "doc/template.html",
          "src/node_version.h"
        ],
        "message": "2012.01.27, Version 0.6.9 (stable)\n\n* dgram: Bring back missing functionality for Unix (Dan VerWeire, Roman Shtylman, Ben Noordnuis)\n  - Note: Windows UDP support not yet complete.\n\n* http: Fix parser memory leak (koichik)\n\n* zlib: Fix #2365 crashes on invalid input (Nicolas LaCasse)\n\n* module: fix --debug-brk on symlinked scripts (Fedor Indutny)\n\n* Documentation Restyling (Matthew Fitzsimmons)\n\n* Update npm to 1.1.0-3 (isaacs)\n\n* Windows: fix regression in stat() calls to C:\\ (Bert Belder)",
        "before_after_code_files": [
          "src/node_version.h||src/node_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_version.h||src/node_version.h": [
          "File: src/node_version.h -> src/node_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #define NODE_MAJOR_VERSION 0",
          "30: #define NODE_MINOR_VERSION 6",
          "31: #define NODE_PATCH_VERSION 9",
          "34: #ifndef NODE_STRINGIFY",
          "35: #define NODE_STRINGIFY(n) NODE_STRINGIFY_HELPER(n)",
          "",
          "[Removed Lines]",
          "32: #define NODE_VERSION_IS_RELEASE 0",
          "",
          "[Added Lines]",
          "32: #define NODE_VERSION_IS_RELEASE 1",
          "",
          "---------------"
        ]
      }
    }
  ]
}