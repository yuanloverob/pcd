{
  "cve_id": "CVE-2019-19924",
  "cve_desc": "SQLite 3.30.1 mishandles certain parser-tree rewriting, related to expr.c, vdbeaux.c, and window.c. This is caused by incorrect sqlite3WindowRewrite() error handling.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
  "patch_info": {
    "commit_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8654186b0236d556aa85528c2573ee0b6ab71be3",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/vdbeaux.c",
      "src/window.c"
    ],
    "message": "When an error occurs while rewriting the parser tree for window functions in the sqlite3WindowRewrite() routine, make sure that pParse->nErr is set, and make sure that this shuts down any subsequent code generation that might depend on the transformations that were implemented.  This fixes a problem discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: e2bddcd4c55ba3cbe0130332679ff4b048630d0ced9a8899982edb5a3569ba7f",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/vdbeaux.c||src/vdbeaux.c",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4417c5bf0aabb34ed174f01afd981c924ae965a42128719d8d6735536631d12f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "376:   int addr;",
      "377:   CollSeq *p4;",
      "379:   if( isCommuted ){",
      "380:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
      "381:   }else{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:   if( pParse->nErr ) return 0;",
      "",
      "---------------"
    ],
    "src/vdbeaux.c||src/vdbeaux.c": [
      "File: src/vdbeaux.c -> src/vdbeaux.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1304: static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){",
      "1305:   assert( p->nOp>0 || p->aOp==0 );",
      "1307:   if( p->nOp ){",
      "1308:     assert( p->aOp );",
      "1309:     sqlite3DbFree(p->db, p->aOp[p->nOp-1].zComment);",
      "",
      "[Removed Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );",
      "",
      "[Added Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed",
      "1307:           || p->pParse->nErr>0 );",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "935:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
      "936:     if( pTab==0 ){",
      "938:     }",
      "940:     p->pSrc = 0;",
      "",
      "[Removed Lines]",
      "937:       return SQLITE_NOMEM;",
      "",
      "[Added Lines]",
      "937:       return sqlite3ErrorToParser(db, SQLITE_NOMEM);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1039:     sqlite3DbFree(db, pTab);",
      "1040:   }",
      "1042:   return rc;",
      "1043: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1042:   if( rc && pParse->nErr==0 ){",
      "1043:     assert( pParse->db->mallocFailed );",
      "1044:     return sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
      "1045:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9ce3c8ac26ce34b4c55c593f18908a19aa17f91b",
      "candidate_info": {
        "commit_hash": "9ce3c8ac26ce34b4c55c593f18908a19aa17f91b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9ce3c8ac26ce34b4c55c593f18908a19aa17f91b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/expr.c",
          "src/insert.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/vdbe.c",
          "src/where.c",
          "src/wherecode.c",
          "src/window.c",
          "test/view.test",
          "test/window9.test"
        ],
        "message": "Ensure that columns of views and sub-queries that are expressions with no affinity are comparied without any type conversions, as required in the documentation.  Tickets [61c853857f40da49] and [d52a29a9e6bc55c5].\n\nFossilOrigin-Name: 9c8c1092a8ce80e114fcfe8ce780332a6f269b8c87df226242b582d2d825c393",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbe.c||src/vdbe.c",
          "src/where.c||src/where.c",
          "src/wherecode.c||src/wherecode.c",
          "src/window.c||src/window.c",
          "test/view.test||test/view.test",
          "test/window9.test||test/window9.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c",
            "src/window.c||src/window.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c",
            "src/window.c||src/window.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a29f2a7d07beff64e489e8f824babc6228c4a499fadc0ee701caa60a63baadcd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2160:       addrTop = sqlite3VdbeCurrentAddr(v) + 1;",
          "2161:       sqlite3VdbeAddOp3(v, OP_InitCoroutine, regYield, 0, addrTop);",
          "2162:       if( pParse->nErr ) return;",
          "2164:       if( pSelTab==0 ) return;",
          "2165:       assert( p->aCol==0 );",
          "2166:       p->nCol = pSelTab->nCol;",
          "",
          "[Removed Lines]",
          "2163:       pSelTab = sqlite3ResultSetOfSelect(pParse, pSelect);",
          "",
          "[Added Lines]",
          "2163:       pSelTab = sqlite3ResultSetOfSelect(pParse, pSelect, SQLITE_AFF_BLOB);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2424: #ifndef SQLITE_OMIT_AUTHORIZATION",
          "2425:     xAuth = db->xAuth;",
          "2426:     db->xAuth = 0;",
          "2428:     db->xAuth = xAuth;",
          "2429: #else",
          "2431: #endif",
          "2432:     pParse->nTab = n;",
          "2433:     if( pTable->pCheck ){",
          "",
          "[Removed Lines]",
          "2427:     pSelTab = sqlite3ResultSetOfSelect(pParse, pSel);",
          "2430:     pSelTab = sqlite3ResultSetOfSelect(pParse, pSel);",
          "",
          "[Added Lines]",
          "2427:     pSelTab = sqlite3ResultSetOfSelect(pParse, pSel, SQLITE_AFF_NONE);",
          "2430:     pSelTab = sqlite3ResultSetOfSelect(pParse, pSel, SQLITE_AFF_NONE);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2443:        && pParse->nErr==0",
          "2444:        && pTable->nCol==pSel->pEList->nExpr",
          "2445:       ){",
          "2447:       }",
          "2448:     }else if( pSelTab ){",
          "",
          "[Removed Lines]",
          "2446:         sqlite3SelectAddColumnTypeAndCollation(pParse, pTable, pSel);",
          "",
          "[Added Lines]",
          "2446:         sqlite3SelectAddColumnTypeAndCollation(pParse, pTable, pSel,",
          "2447:                                                SQLITE_AFF_NONE);",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "231: char sqlite3CompareAffinity(Expr *pExpr, char aff2){",
          "232:   char aff1 = sqlite3ExprAffinity(pExpr);",
          "",
          "[Removed Lines]",
          "233:   if( aff1 && aff2 ){",
          "",
          "[Added Lines]",
          "233:   if( aff1>SQLITE_AFF_NONE && aff2>SQLITE_AFF_NONE ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "239:     }else{",
          "240:       return SQLITE_AFF_BLOB;",
          "241:     }",
          "247:   }else{",
          "251:   }",
          "252: }",
          "",
          "[Removed Lines]",
          "242:   }else if( !aff1 && !aff2 ){",
          "246:     return SQLITE_AFF_BLOB;",
          "249:     assert( aff1==0 || aff2==0 );",
          "250:     return (aff1 + aff2);",
          "",
          "[Added Lines]",
          "244:     assert( aff1<=SQLITE_AFF_NONE || aff2<=SQLITE_AFF_NONE );",
          "245:     return (aff1<=SQLITE_AFF_NONE ? aff2 : aff1) | SQLITE_AFF_NONE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "281: int sqlite3IndexAffinityOk(Expr *pExpr, char idx_affinity){",
          "282:   char aff = comparisonAffinity(pExpr);",
          "290:   }",
          "291: }",
          "",
          "[Removed Lines]",
          "283:   switch( aff ){",
          "284:     case SQLITE_AFF_BLOB:",
          "285:       return 1;",
          "286:     case SQLITE_AFF_TEXT:",
          "287:       return idx_affinity==SQLITE_AFF_TEXT;",
          "288:     default:",
          "289:       return sqlite3IsNumericAffinity(idx_affinity);",
          "",
          "[Added Lines]",
          "278:   if( aff<SQLITE_AFF_TEXT ){",
          "279:     return 1;",
          "280:   }",
          "281:   if( aff==SQLITE_AFF_TEXT ){",
          "282:     return idx_affinity==SQLITE_AFF_TEXT;",
          "284:   return sqlite3IsNumericAffinity(idx_affinity);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2800:     struct ExprList_item *pItem;",
          "2801:     int r1, r2, r3;",
          "2802:     affinity = sqlite3ExprAffinity(pLeft);",
          "2804:       affinity = SQLITE_AFF_BLOB;",
          "2805:     }",
          "2806:     if( pKeyInfo ){",
          "",
          "[Removed Lines]",
          "2803:     if( !affinity ){",
          "",
          "[Added Lines]",
          "2797:     if( affinity<=SQLITE_AFF_NONE ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3491:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
          "3492:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
          "3494:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
          "3495:           assert( SQLITE_AFF_BLOB=='A' );",
          "3496:           assert( SQLITE_AFF_TEXT=='B' );",
          "",
          "[Removed Lines]",
          "3493:         if( aff!=SQLITE_AFF_BLOB ){",
          "",
          "[Added Lines]",
          "3487:         if( aff>SQLITE_AFF_BLOB ){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3793:         assert( nFarg==1 );",
          "3794:         aff = sqlite3ExprAffinity(pFarg->a[0].pExpr);",
          "3795:         sqlite3VdbeLoadString(v, target,",
          "3797:         return target;",
          "3798:       }",
          "3799: #endif",
          "",
          "[Removed Lines]",
          "3796:                               aff ? azAff[aff-SQLITE_AFF_BLOB] : \"none\");",
          "",
          "[Added Lines]",
          "3790:                 (aff<=SQLITE_AFF_NONE) ? \"none\" : azAff[aff-SQLITE_AFF_BLOB]);",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:     }",
          "89:     for(n=0; n<pIdx->nColumn; n++){",
          "90:       i16 x = pIdx->aiColumn[n];",
          "91:       if( x>=0 ){",
          "93:       }else if( x==XN_ROWID ){",
          "95:       }else{",
          "97:         assert( x==XN_EXPR );",
          "98:         assert( pIdx->aColExpr!=0 );",
          "99:         aff = sqlite3ExprAffinity(pIdx->aColExpr->a[n].pExpr);",
          "102:       }",
          "103:     }",
          "104:     pIdx->zColAff[n] = 0;",
          "105:   }",
          "",
          "[Removed Lines]",
          "92:         pIdx->zColAff[n] = pTab->aCol[x].affinity;",
          "94:         pIdx->zColAff[n] = SQLITE_AFF_INTEGER;",
          "96:         char aff;",
          "100:         if( aff==0 ) aff = SQLITE_AFF_BLOB;",
          "101:         pIdx->zColAff[n] = aff;",
          "",
          "[Added Lines]",
          "91:       char aff;",
          "93:         aff = pTab->aCol[x].affinity;",
          "95:         aff = SQLITE_AFF_INTEGER;",
          "101:       if( aff<SQLITE_AFF_BLOB ) aff = SQLITE_AFF_BLOB;",
          "102:       pIdx->zColAff[n] = aff;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "139:     }",
          "141:     for(i=0; i<pTab->nCol; i++){",
          "142:       zColAff[i] = pTab->aCol[i].affinity;",
          "143:     }",
          "144:     do{",
          "145:       zColAff[i--] = 0;",
          "147:     pTab->zColAff = zColAff;",
          "148:   }",
          "149:   assert( zColAff!=0 );",
          "",
          "[Removed Lines]",
          "146:     }while( i>=0 && zColAff[i]==SQLITE_AFF_BLOB );",
          "",
          "[Added Lines]",
          "142:       assert( pTab->aCol[i].affinity!=0 );",
          "147:     }while( i>=0 && zColAff[i]<=SQLITE_AFF_BLOB );",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2068:         pCol->colFlags |= COLFLAG_HASTYPE;",
          "2069:       }",
          "2070:     }",
          "2072:     pColl = sqlite3ExprCollSeq(pParse, p);",
          "2073:     if( pColl && pCol->zColl==0 ){",
          "2074:       pCol->zColl = sqlite3DbStrDup(db, pColl->zName);",
          "",
          "[Removed Lines]",
          "2071:     if( pCol->affinity==0 ) pCol->affinity = SQLITE_AFF_BLOB;",
          "",
          "[Added Lines]",
          "2072:     if( pCol->affinity<=SQLITE_AFF_NONE ) pCol->affinity = aff;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2085:   Table *pTab;",
          "2086:   sqlite3 *db = pParse->db;",
          "2087:   u64 savedFlags;",
          "",
          "[Removed Lines]",
          "2084: Table *sqlite3ResultSetOfSelect(Parse *pParse, Select *pSelect){",
          "",
          "[Added Lines]",
          "2085: Table *sqlite3ResultSetOfSelect(Parse *pParse, Select *pSelect, char aff){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2101:   pTab->zName = 0;",
          "2102:   pTab->nRowLogEst = 200; assert( 200==sqlite3LogEst(1048576) );",
          "2103:   sqlite3ColumnsFromExprList(pParse, pSelect->pEList, &pTab->nCol, &pTab->aCol);",
          "2105:   pTab->iPKey = -1;",
          "2106:   if( db->mallocFailed ){",
          "2107:     sqlite3DeleteTable(db, pTab);",
          "",
          "[Removed Lines]",
          "2104:   sqlite3SelectAddColumnTypeAndCollation(pParse, pTab, pSelect);",
          "",
          "[Added Lines]",
          "2105:   sqlite3SelectAddColumnTypeAndCollation(pParse, pTab, pSelect, aff);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5195:       Select *pSel = pFrom->pSelect;",
          "5196:       if( pSel ){",
          "5197:         while( pSel->pPrior ) pSel = pSel->pPrior;",
          "5199:       }",
          "5200:     }",
          "5201:   }",
          "",
          "[Removed Lines]",
          "5198:         sqlite3SelectAddColumnTypeAndCollation(pParse, pTab, pSel);",
          "",
          "[Added Lines]",
          "5199:         sqlite3SelectAddColumnTypeAndCollation(pParse, pTab, pSel,",
          "5200:                                                SQLITE_AFF_NONE);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1883: #define sqlite3IsNumericAffinity(X)  ((X)>=SQLITE_AFF_NUMERIC)",
          "",
          "[Removed Lines]",
          "1877: #define SQLITE_AFF_BLOB     'A'",
          "1878: #define SQLITE_AFF_TEXT     'B'",
          "1879: #define SQLITE_AFF_NUMERIC  'C'",
          "1880: #define SQLITE_AFF_INTEGER  'D'",
          "1881: #define SQLITE_AFF_REAL     'E'",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3911: void sqlite3CommitInternalChanges(sqlite3*);",
          "3912: void sqlite3DeleteColumnNames(sqlite3*,Table*);",
          "3913: int sqlite3ColumnsFromExprList(Parse*,ExprList*,i16*,Column**);",
          "3916: void sqlite3OpenMasterTable(Parse *, int);",
          "3917: Index *sqlite3PrimaryKeyIndex(Table*);",
          "3918: i16 sqlite3ColumnOfIndex(Index*, i16);",
          "",
          "[Removed Lines]",
          "3914: void sqlite3SelectAddColumnTypeAndCollation(Parse*,Table*,Select*);",
          "3915: Table *sqlite3ResultSetOfSelect(Parse*,Select*);",
          "",
          "[Added Lines]",
          "3915: void sqlite3SelectAddColumnTypeAndCollation(Parse*,Table*,Select*,char);",
          "3916: Table *sqlite3ResultSetOfSelect(Parse*,Select*,char);",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1305:   if( !pIdx->zColAff ){",
          "1306:     if( sqlite3IndexAffinityStr(db, pIdx)==0 ) return SQLITE_AFF_BLOB;",
          "1307:   }",
          "1308:   return pIdx->zColAff[iCol];",
          "1309: }",
          "1310: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1308:   assert( pIdx->zColAff[iCol]!=0 );",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "333:   }",
          "334:   assert( v!=0 );",
          "340:     n--;",
          "341:     base++;",
          "342:     zAff++;",
          "343:   }",
          "345:     n--;",
          "346:   }",
          "",
          "[Removed Lines]",
          "339:   while( n>0 && zAff[0]==SQLITE_AFF_BLOB ){",
          "344:   while( n>1 && zAff[n-1]==SQLITE_AFF_BLOB ){",
          "",
          "[Added Lines]",
          "339:   assert( SQLITE_AFF_NONE<SQLITE_AFF_BLOB );",
          "340:   while( n>0 && zAff[0]<=SQLITE_AFF_BLOB ){",
          "345:   while( n>1 && zAff[n-1]<=SQLITE_AFF_BLOB ){",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "994:       p->pSrc->a[0].pSelect = pSub;",
          "995:       sqlite3SrcListAssignCursors(pParse, p->pSrc);",
          "996:       pSub->selFlags |= SF_Expanded;",
          "998:       if( pTab2==0 ){",
          "999:         rc = SQLITE_NOMEM;",
          "1000:       }else{",
          "",
          "[Removed Lines]",
          "997:       pTab2 = sqlite3ResultSetOfSelect(pParse, pSub);",
          "",
          "[Added Lines]",
          "997:       pTab2 = sqlite3ResultSetOfSelect(pParse, pSub, SQLITE_AFF_NONE);",
          "",
          "---------------"
        ],
        "test/view.test||test/view.test": [
          "File: test/view.test -> test/view.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "724:   1 1 3 3",
          "725: }",
          "727: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "727: #-------------------------------------------------------------------------",
          "728: reset_db",
          "729: do_execsql_test view-27.0 {",
          "730:   CREATE TABLE t0(c0 TEXT, c1);",
          "731:   INSERT INTO t0(c0, c1) VALUES (-1, 0);",
          "732:   CREATE VIEW v0(c0, c1) AS SELECT t0.c0, AVG(t0.c1) FROM t0;",
          "733: }",
          "735: do_execsql_test view-27.1 {",
          "736:   SELECT c0, typeof(c0), affinity(c0), c1, typeof(c1), affinity(c1) FROM v0;",
          "737: } {",
          "738:   -1   text text",
          "739:    0.0 real none",
          "740: }",
          "742: do_execsql_test view-27.2 { SELECT c0<c1 FROM v0 } 1",
          "743: do_execsql_test view-27.3 { SELECT c1<c0 FROM v0 } 0",
          "744: do_execsql_test view-27.4 {",
          "745:   SELECT 1 FROM v0 WHERE c1<c0",
          "746: } {}",
          "747: do_execsql_test view-27.5 {",
          "748:   SELECT 1 FROM v0 WHERE c0<c1",
          "749: } {1}",
          "751: do_execsql_test view-27.6 {",
          "752:   SELECT c0<c1 FROM (SELECT t0.c0 AS c0, AVG(t0.c1) AS c1 FROM t0)",
          "753: } 1",
          "754: do_execsql_test view-27.7 {",
          "755:   SELECT c1<c0 FROM (SELECT t0.c0 AS c0, AVG(t0.c1) AS c1 FROM t0)",
          "756: } 0",
          "757: do_execsql_test view-27.8 {",
          "758:   SELECT 1 FROM (SELECT t0.c0 AS c0, AVG(t0.c1) AS c1 FROM t0) WHERE c1<c0",
          "759: } {}",
          "760: do_execsql_test view-27.9 {",
          "761:   SELECT 1 FROM (SELECT t0.c0 AS c0, AVG(t0.c1) AS c1 FROM t0) WHERE c0<c1",
          "762: } {1}",
          "",
          "---------------"
        ],
        "test/window9.test||test/window9.test": [
          "File: test/window9.test -> test/window9.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:       );",
          "132: } {1 {sub-select returns 3 columns - expected 1}}",
          "135: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134: #-------------------------------------------------------------------------",
          "135: reset_db",
          "136: do_execsql_test 4.0 {",
          "137:   CREATE TABLE t1(a, b TEXT);",
          "138:   INSERT INTO t1 VALUES('A', 1), ('A', 2), ('2', 1), ('2', 2);",
          "139: }",
          "141: do_execsql_test 4.1.1 {",
          "142:   SELECT b, b=count(*), '1,2'                   FROM t1 GROUP BY b;",
          "143: } {1 0 1,2 2 1 1,2}",
          "144: do_execsql_test 4.1.2 {",
          "145:   SELECT b, b=count(*), group_concat(b) OVER () FROM t1 GROUP BY b;",
          "146: } {1 0 1,2 2 1 1,2}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "04687f9e03f3058d93f91350729ec85e5dda2c04",
      "candidate_info": {
        "commit_hash": "04687f9e03f3058d93f91350729ec85e5dda2c04",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/04687f9e03f3058d93f91350729ec85e5dda2c04",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fts3corrupt4.test"
        ],
        "message": "Fix an error in fts3_write.c allowing a corrupt database to cause a crash.\n\nFossilOrigin-Name: 6e4a5f22811bcd1485e27073ec96821d448b91b6d1ff1659cc3772449d19a762",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3corrupt4.test||test/fts3corrupt4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3754:     }",
          "3755:     p->iOff += fts3GetVarint32(&p->aNode[p->iOff], &nSuffix);",
          "3758:       return FTS_CORRUPT_VTAB;",
          "3759:     }",
          "3760:     blobGrowBuffer(&p->term, nPrefix+nSuffix, &rc);",
          "",
          "[Removed Lines]",
          "3757:     if( nPrefix>p->iOff || nSuffix>p->nNode-p->iOff ){",
          "",
          "[Added Lines]",
          "3757:     if( nPrefix>p->term.n || nSuffix>p->nNode-p->iOff ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3773:     }",
          "3774:   }",
          "3777:   return rc;",
          "3778: }",
          "",
          "[Removed Lines]",
          "3776:   assert( p->iOff<=p->nNode );",
          "",
          "[Added Lines]",
          "3776:   assert_fts3_nc( p->iOff<=p->nNode );",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 30dc05ac12910d318a737f8d7a0e895e5c42ff4c53472aeebc89f052eac05deb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "3915:   SELECT 'FyzLy'FROM t1 WHERE t1 MATCH 'j';",
          "3916: } {1 {database disk image is malformed}}",
          "3918: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3918: #-------------------------------------------------------------------------",
          "3919: reset_db",
          "3920: do_test 24.0 {",
          "3921:   sqlite3 db {}",
          "3922:   db deserialize [decode_hexdb {",
          "3923: .open --hexdb",
          "3924: | size 28672 pagesize 4096 filename crash-369d042958c29b.db",
          "3925: | page 1 offset 0",
          "3926: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "3927: |     16: 10 00 01 01 00 40 20 20 00 00 03 10 00 00 00 00   .....@  ........",
          "3928: |     96: 00 00 00 00 0d 0e b1 00 06 0d a4 00 0f 8d 0f 21   ...............!",
          "3929: |    112: 0e b9 0d c8 0e 7e 0d a4 00 00 00 00 00 00 00 00   .....~..........",
          "3930: |   3488: 00 00 00 00 22 07 06 17 11 11 01 31 74 61 62 6c   ...........1tabl",
          "3931: |   3504: 65 74 32 74 32 07 43 52 45 41 54 45 20 54 41 42   et2t2.CREATE TAB",
          "3932: |   3520: 4c 45 20 74 32 28 78 29 81 33 05 07 17 1f 1f 01   LE t2(x).3......",
          "3933: |   3536: 82 35 74 61 62 6c 65 74 31 5f 73 65 67 64 69 72   .5tablet1_segdir",
          "3934: |   3552: 74 31 5f 73 65 67 64 69 72 05 43 52 45 41 54 45   t1_segdir.CREATE",
          "3935: |   3568: 20 54 41 42 4c 45 20 27 74 31 5f 73 65 67 64 69    TABLE 't1_segdi",
          "3936: |   3584: 72 27 28 6c 65 76 65 6c 20 49 4e 54 45 47 45 52   r'(level INTEGER",
          "3937: |   3600: 2c 69 64 78 20 49 4e 54 45 47 45 52 2c 73 74 61   ,idx INTEGER,sta",
          "3938: |   3616: 72 74 5f 62 6c 6f 63 6b 20 49 4e 54 45 47 45 52   rt_block INTEGER",
          "3939: |   3632: 2c 6c 65 61 76 65 73 5f 65 6e 64 5f 62 6c 6f 63   ,leaves_end_bloc",
          "3940: |   3648: 6b 20 49 4e 54 45 47 45 52 2c 65 6e 64 5f 62 6c   k INTEGER,end_bl",
          "3941: |   3664: 6f 63 6b 20 49 4e 54 45 47 45 52 2c 72 6f 6f 74   ock INTEGER,root",
          "3942: |   3680: 20 42 4c 4f 42 2c 50 52 49 4d 41 52 59 20 4b 45    BLOB,PRIMARY KE",
          "3943: |   3696: 59 28 6c 65 76 65 6c 2c 20 69 64 78 29 29 31 06   Y(level, idx))1.",
          "3944: |   3712: 06 17 45 1f 01 00 69 6e 64 65 78 73 71 6c 69 74   ..E...indexsqlit",
          "3945: |   3728: 65 5f 61 75 74 6f 69 6e 64 65 78 5f 74 31 5f 73   e_autoindex_t1_s",
          "3946: |   3744: 65 67 64 69 72 5f 31 74 31 5f 73 65 67 64 69 72   egdir_1t1_segdir",
          "3947: |   3760: 06 0f c7 00 08 00 10 00 00 66 04 07 17 23 23 01   .........f...##.",
          "3948: |   3776: 81 13 74 61 62 6c 65 74 31 5f 73 65 67 6d 65 6e   ..tablet1_segmen",
          "3949: |   3792: 64 73 74 31 5f 73 65 67 6d 65 6e 74 73 04 43 52   dst1_segments.CR",
          "3950: |   3808: 45 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 73   EATE TABLE 't1_s",
          "3951: |   3824: 65 67 6d 65 6e 74 73 27 28 62 6c 6f 63 6b 69 64   egments'(blockid",
          "3952: |   3840: 20 49 4e 54 45 47 45 52 20 50 52 49 4d 41 52 59    INTEGER PRIMARY",
          "3953: |   3856: 20 4b 45 59 2c 20 62 6c 6f 63 6b 20 42 4c 4f 42    KEY, block BLOB",
          "3954: |   3872: 29 6a 03 07 17 21 21 01 81 1f 74 61 62 6c 65 74   )j...!!...tablet",
          "3955: |   3888: 31 4f 63 6f 6e 74 65 6e 74 74 31 5f 63 6f 6e 74   1Ocontentt1_cont",
          "3956: |   3904: 65 6e 74 03 43 52 45 41 54 45 20 54 41 42 4c 45   ent.CREATE TABLE",
          "3957: |   3920: 20 27 74 31 5f 63 6f 6e 74 65 6e 74 27 28 64 6f    't1_content'(do",
          "3958: |   3936: 63 69 64 20 49 4e 54 45 47 45 52 20 50 52 39 4d   cid INTEGER PR9M",
          "3959: |   3952: 41 52 59 20 4b 45 59 2c 20 27 63 30 61 27 2c 20   ARY KEY, 'c0a',",
          "3960: |   3968: 27 63 31 62 27 2c 20 27 63 32 63 27 29 38 02 06   'c1b', 'c2c')8..",
          "3961: |   3984: 17 11 11 08 5f 74 61 62 6c 65 74 31 74 31 43 52   ...._tablet1t1CR",
          "3962: |   4000: 45 41 54 45 20 56 49 52 54 55 41 4c 20 54 41 42   EATE VIRTUAL TAB",
          "3963: |   4016: 4c 45 20 74 31 20 55 53 49 4e 47 20 66 74 73 33   LE t1 USING fts3",
          "3964: |   4032: 28 61 2c 62 2c 63 29 00 00 00 00 00 00 00 00 00   (a,b,c).........",
          "3965: | page 3 offset 8192",
          "3966: |      0: 0d 00 00 00 26 0b 48 0e 0f d8 0f af 0f 86 0f 74   ....&.H........t",
          "3967: |     16: 0f 61 0f 4e 0f 2f 0f 0f 0e ef 0e d7 0e be 0e a5   .a.N./..........",
          "3968: |     32: 0e 8d 0e 74 0e 5b 0e 40 0e 24 0e 08 0d ef 0d d5   ...t.[.@.$......",
          "3969: |     48: 0d bb 0d a0 0e 94 03 28 0d 4f 0d 35 0d 1b 05 0b   .......(.O.5....",
          "3970: |     64: 0c da 0c b9 0c 99 0c 78 0c 57 0c 3e 0c 24 0c 0a   .......x.W.>.$..",
          "3971: |   2880: 00 00 00 00 00 00 00 00 81 3f 25 06 00 72 7f 00   .........?%..r..",
          "3972: |   2896: 00 43 4f 4d 50 49 4c 45 52 3d 67 63 63 2d 35 2e   .COMPILER=gcc-5.",
          "3973: |   2912: 34 2e 30 20 32 30 31 36 30 36 30 39 20 44 55 42   4.0 20160609 DUB",
          "3974: |   2928: 55 47 20 45 4e 41 e4 7c 45 20 44 42 53 54 41 54   UG ENA.|E DBSTAT",
          "3975: |   2944: e4 d1 54 41 42 20 45 4e 41 42 4c 45 20 46 54 53   ..TAB ENABLE FTS",
          "3976: |   2960: 34 20 45 4e 41 42 4c 45 20 46 54 53 35 20 45 4e   4 ENABLE FTS5 EN",
          "3977: |   2976: 41 42 4c 45 20 47 45 4f 50 4f 4c 59 20 45 4e 41   ABLE GEOPOLY ENA",
          "3978: |   2992: 42 4c 45 20 4a 53 4f 4e 31 20 45 4e 41 42 4c 45   BLE JSON1 ENABLE",
          "3979: |   3008: 20 4d 45 4d 53 59 53 35 20 45 4e 41 42 4c 45 20    MEMSYS5 ENABLE",
          "3980: |   3024: 42 54 52 45 45 20 4d 41 58 20 4d 45 4d 4f 52 59   BTREE MAX MEMORY",
          "3981: |   3040: 3d 35 30 30 30 30 30 30 30 20 4f 4c 49 54 20 4c   =50000000 OLIT L",
          "3982: |   3056: 4f 41 43 20 45 58 54 45 4e 53 49 4f 4e 21 54 48   OAC EXTENSION!TH",
          "3983: |   3072: 52 45 41 44 53 41 46 45 3d 30 18 24 05 00 25 0f   READSAFE=0.$..%.",
          "3984: |   3088: 19 54 48 52 45 41 44 53 41 46 45 3d 30 58 42 49   .THREADSAFE=0XBI",
          "3985: |   3104: 4e 41 52 59 18 23 05 00 25 0f 19 54 48 52 45 41   NARY.#..%..THREA",
          "3986: |   3120: 44 53 41 4b 75 3d 30 58 4d 4f 43 41 53 45 17 22   DSAKu=0XMOCASE..",
          "3987: |   3136: 05 00 25 0f 17 54 48 52 45 41 44 53 41 46 46 3d   ..%..THREADSAFF=",
          "3988: |   3152: 30 58 52 54 52 49 4d 1f 21 05 00 33 0f 19 4f 4d   0XRTRIM.!..3..OM",
          "3989: |   3168: 49 54 20 4c 4f 41 44 20 45 58 54 45 4e 52 49 4f   IT LOAD EXTENRIO",
          "3990: |   3184: 4e 58 42 49 4e 41 52 59 1f 20 05 00 33 0f 19 4f   NXBINARY. ..3..O",
          "3991: |   3200: 4d 49 54 20 4c 4f 41 44 20 45 58 54 45 4e 53 49   MIT LOAD EXTENSI",
          "3992: |   3216: 4f 4e 58 4e 4f 43 41 53 45 1e 1f 05 00 33 0f 17   ONXNOCASE....3..",
          "3993: |   3232: 4f 4d 49 54 20 4c 4f 41 44 20 45 58 54 45 4e 53   OMIT LOAD EXTENS",
          "3994: |   3248: 49 4f 4e 58 52 54 52 49 4d 1f 1e 05 00 33 0f 19   IONXRTRIM....3..",
          "3995: |   3264: 4d 41 58 20 4d 45 4d 4f 52 59 3d 35 30 30 30 30   MAX MEMORY=50000",
          "3996: |   3280: 30 30 30 58 42 49 4e 41 52 59 1f 1d 05 00 33 0f   000XBINARY....3.",
          "3997: |   3296: 19 4d 41 58 20 4d 45 4d 4f 52 59 3d 35 30 30 30   .MAX MEMORY=5000",
          "3998: |   3312: 30 30 30 30 58 4e 4f 43 41 53 45 1e 1c 05 00 33   0000XNOCASE....3",
          "3999: |   3328: 0f 17 4d 42 b8 20 4d 45 4d 4f 52 59 3d 35 30 30   ..MB. MEMORY=500",
          "4000: |   3344: 30 30 30 30 30 58 52 54 52 49 4d 18 1b 05 00 25   00000XRTRIM....%",
          "4001: |   3360: 0f 19 45 4e 41 42 4c 45 20 52 54 52 45 45 58 42   ..ENABLE RTREEXB",
          "4002: |   3376: 49 4e 41 52 59 18 1a 05 0d a5 0f 19 45 4e 41 42   INARY.......ENAB",
          "4003: |   3392: 4c 45 20 52 54 52 45 45 58 4e 4f 43 41 53 45 17   LE RTREEXNOCASE.",
          "4004: |   3408: 19 1c 00 25 0f 17 45 4e 41 42 4c 45 20 52 54 52   ...%..ENABLE RTR",
          "4005: |   3424: 45 45 58 52 54 52 49 4d 1a 18 05 00 29 0f 19 45   EEXRTRIM....)..E",
          "4006: |   3440: 4e 41 42 4c 45 20 4d 45 4d 53 59 53 35 58 42 49   NABLE MEMSYS5XBI",
          "4007: |   3456: 4e 41 52 59 1a 17 05 00 29 0f 19 45 4e 41 42 4c   NARY....)..ENABL",
          "4008: |   3472: 45 20 4d 45 4d 53 59 53 35 58 4e 4f 43 41 53 45   E MEMSYS5XNOCASE",
          "4009: |   3488: 19 16 05 00 29 0f 17 45 4e 41 42 4c 45 20 4d 45   ....)..ENABLE ME",
          "4010: |   3504: 4d 53 59 53 35 58 52 54 52 49 4d 18 14 05 01 25   MSYS5XRTRIM....%",
          "4011: |   3520: 0f 19 45 4e 12 42 4c 45 20 4a 53 4f 4e 31 58 42   ..EN.BLE JSON1XB",
          "4012: |   3536: 49 4e 41 52 59 18 14 05 00 25 09 d9 45 4e 41 42   INARY....%..ENAB",
          "4013: |   3552: 4c 45 20 4a 53 4f 3e 31 58 4e 4f 43 41 53 45 17   LE JSO>1XNOCASE.",
          "4014: |   3568: 13 05 00 25 0f 17 45 4e 40 42 4c 45 20 4a 53 4f   ...%..EN@BLE JSO",
          "4015: |   3584: 4e 31 58 52 54 52 49 4d 1a 12 05 82 29 0f 19 45   N1XRTRIM....)..E",
          "4016: |   3600: 4e 41 42 4c 45 20 47 45 4f 50 4f 4c 59 58 42 49   NABLE GEOPOLYXBI",
          "4017: |   3616: 4e 41 52 59 1a 11 05 c9 29 e8 19 46 4e 41 42 4c   NARY....)..FNABL",
          "4018: |   3632: 48 c0 47 45 4f 50 4f 4c 59 58 4e 74 43 41 53 45   H.GEOPOLYXNtCASE",
          "4019: |   3648: 19 10 05 00 29 0f 17 45 4e 41 42 4c 45 20 47 45   ....)..ENABLE GE",
          "4020: |   3664: 4f 50 4f 4c 59 58 52 54 52 49 4d 17 0f 05 00 23   OPOLYXRTRIM....#",
          "4021: |   3680: 0f 19 45 4e 41 42 4c 45 30 46 54 53 35 58 42 49   ..ENABLE0FTS5XBI",
          "4022: |   3696: 4e 41 52 59 17 0e 05 00 23 0f 19 45 4e 41 42 4c   NARY....#..ENABL",
          "4023: |   3712: 45 20 46 54 53 35 58 4e 4f 43 41 53 45 16 0e 05   E FTS5XNOCASE...",
          "4024: |   3728: 00 23 0f 17 45 4e 41 42 4c 45 20 46 54 53 35 58   .#..ENABLE FTS5X",
          "4025: |   3744: 52 54 52 49 4d 17 0c 05 00 23 0f 19 45 4e 41 42   RTRIM....#..ENAB",
          "4026: |   3760: 4c 45 20 46 54 53 34 58 42 49 4e 41 52 59 17 0b   LE FTS4XBINARY..",
          "4027: |   3776: 05 00 23 0f 19 45 4e 41 42 4c 45 20 46 54 53 34   ..#..ENABLE FTS4",
          "4028: |   3792: 58 4e 4f 43 41 53 45 16 0a 05 00 23 0f 17 45 4e   XNOCASE....#..EN",
          "4029: |   3808: 41 42 4c 45 20 46 54 53 34 58 52 54 52 49 4d 1e   ABLE FTS4XRTRIM.",
          "4030: |   3824: 09 05 00 31 0f 19 45 4e 42 42 4c 45 20 44 42 53   ...1..ENBBLE DBS",
          "4031: |   3840: 54 41 54 20 56 54 41 42 58 42 49 4e 41 52 59 1e   TAT VTABXBINARY.",
          "4032: |   3856: 08 05 00 31 0f 19 45 4e 41 42 4c 45 20 44 42 53   ...1..ENABLE DBS",
          "4033: |   3872: 54 41 54 20 56 54 41 42 58 4e 4f 43 41 53 45 1d   TAT VTABXNOCASE.",
          "4034: |   3888: 07 05 00 31 0f 17 45 4e 41 42 4c 45 20 44 42 53   ...1..ENABLE DBS",
          "4035: |   3904: 54 41 54 20 56 54 41 42 58 52 54 52 4a 4d 11 06   TAT VTABXRTRJM..",
          "4036: |   3920: 05 f0 17 0f 19 44 45 42 55 47 58 42 49 4e 41 52   .....DEBUGXBINAR",
          "4037: |   3936: 59 11 05 05 00 17 0e 19 44 45 42 55 47 58 4e 4f   Y.......DEBUGXNO",
          "4038: |   3952: 43 41 53 45 10 04 05 00 17 0f 16 44 45 42 55 47   CASE.......DEBUG",
          "4039: |   3968: 58 52 54 52 49 4d 27 03 05 00 43 0f 19 43 4f 4d   XRTRIM'...C..COM",
          "4040: |   3984: 50 49 4c 45 52 3d 67 63 63 2d 35 2e 34 2e 30 20   PILER=gcc-5.4.0",
          "4041: |   4000: 32 30 31 36 30 36 30 39 58 42 49 4e 41 52 59 27   20160609XBINARY'",
          "4042: |   4016: 02 05 00 43 0f 19 43 4f 4d 50 49 4c 45 52 3d 67   ...C..COMPILER=g",
          "4043: |   4032: 63 63 2d 35 2e 34 2e 30 20 32 30 31 36 30 36 30   cc-5.4.0 2016060",
          "4044: |   4048: 39 58 4e 4f 43 41 53 45 26 01 06 00 43 0f 17 43   9XNOCASE&...C..C",
          "4045: |   4064: 4f 4d 50 49 4b 45 52 3d 67 63 63 2d 35 2e 34 2e   OMPIKER=gcc-5.4.",
          "4046: |   4080: 30 20 32 30 31 36 30 36 40 39 58 29 54 52 49 4d   0 201606@9X)TRIM",
          "4047: | page 4 offset 12288",
          "4048: |      0: 0d 00 10 00 00 10 00 00 00 00 00 00 00 01 00 00   ................",
          "4049: | page 5 offset 16384",
          "4050: |      0: 0d 00 00 00 02 0b a0 00 0c ad 0b a0 00 00 00 00   ................",
          "4051: |   2976: 82 0a 02 08 08 09 08 08 17 84 06 30 20 32 35 33   ...........0 253",
          "4052: |   2992: 00 01 30 04 25 06 1b 00 00 08 32 30 31 36 30 36   ..0.%.....201606",
          "4053: |   3008: 30 39 03 25 07 00 00 01 34 03 25 05 00 00 01 35   09.%....4.%....5",
          "4054: |   3024: 03 25 04 00 01 07 30 30 30 30 30 30 30 03 25 1a   .%....0000000.%.",
          "4055: |   3040: 00 00 08 63 6f 6d 70 69 6c 65 72 03 25 02 00 00   ...compiler.%...",
          "4056: |   3056: 06 64 62 73 74 61 74 03 25 0a 00 01 04 65 62 75   .dbstat.%....ebu",
          "4057: |   3072: 67 03 25 08 00 00 06 65 6e 61 62 6c 65 09 25 09   g.%....enable.%.",
          "4058: |   3088: 05 04 04 04 04 04 00 01 08 78 74 65 6e 73 69 6f   .........xtensio",
          "4059: |   3104: 6e 03 25 1d 00 00 04 66 74 73 34 03 25 0d 00 03   n.%....fts4.%...",
          "4060: |   3120: 01 35 03 25 0f 00 00 03 67 63 63 03 25 03 00 01   .5.%....gcc.%...",
          "4061: |   3136: 06 65 6f 70 6f 6c 79 03 25 11 00 00 05 6a 73 6f   .eopoly.%....jso",
          "4062: |   3152: 6e 31 03 25 13 00 00 04 6c 6f 61 64 03 25 1c 00   n1.%....load.%..",
          "4063: |   3168: 00 03 6d 61 78 03 25 18 00 01 05 65 6e 6f 72 79   ..max.%....enory",
          "4064: |   3184: 03 25 19 00 03 04 ce 79 73 4d 03 25 15 00 00 04   .%.....ysM.%....",
          "4065: |   3200: 6f 6d 69 74 03 25 1b 00 00 05 72 74 72 65 65 03   omit.%....rtree.",
          "4066: |   3216: 25 17 00 00 0a 74 68 72 65 61 64 73 61 66 65 03   %....threadsafe.",
          "4067: |   3232: 25 0e 00 00 04 76 74 61 62 03 25 0b 00 86 50 01   %....vtab.%...P.",
          "4068: |   3248: 08 08 08 08 08 17 8d 12 30 20 38 33 35 00 01 30   ........0 835..0",
          "4069: |   3264: 12 01 06 00 01 06 00 01 06 00 1f 03 00 01 03 09   ................",
          "4070: |   3280: 51 03 00 00 08 32 30 31 36 30 36 30 39 09 01 07   Q....20160609...",
          "4071: |   3296: 00 01 07 00 01 07 00 00 01 34 09 01 05 00 01 05   .........4......",
          "4072: |   3312: 00 01 05 00 00 01 35 09 01 04 00 01 04 00 01 04   ......5.........",
          "4073: |   3328: 00 01 07 30 30 30 30 30 30 30 09 1c 04 00 01 04   ...0000000......",
          "4074: |   3344: 00 01 04 00 00 06 62 69 6e 61 72 79 3c 03 01 02   ......binary<...",
          "4075: |   3360: 02 00 03 01 02 02 00 03 01 02 02 00 03 01 02 02   ................",
          "4076: |   3376: 00 03 01 02 02 00 02 f1 02 02 00 03 01 02 02 00   ................",
          "4077: |   3392: 03 01 02 02 00 03 01 02 02 00 03 01 02 02 00 03   ................",
          "4078: |   3408: 01 02 02 00 03 01 02 02 00 00 08 63 6f 6d 70 69   ...........compi",
          "4079: |   3424: 6c 65 72 09 01 02 00 01 02 00 01 02 00 00 06 67   ler............g",
          "4080: |   3440: d2 73 74 61 74 09 07 03 00 01 03 00 01 03 00 01   .stat...........",
          "4081: |   3456: 04 65 62 75 67 09 04 02 00 01 02 00 01 02 00 00   .ebug...........",
          "4082: |   3472: 06 65 6e 6f 82 6c 65 3f 07 02 00 01 02 00 01 02   .eno.le?........",
          "4083: |   3488: b0 01 02 00 01 02 00 11 02 00 01 02 00 01 02 00   ................",
          "4084: |   3504: 01 02 00 01 02 00 01 02 00 01 a6 00 01 02 00 01   ................",
          "4085: |   3520: 02 05 51 02 00 01 02 00 01 02 00 01 02 00 01 02   ..Q.............",
          "4086: |   3536: 00 01 02 00 01 02 00 01 08 78 74 65 6e 73 69 6f   .........xtensio",
          "4087: |   3552: 6e 09 1f 04 00 01 04 00 00 04 00 00 04 66 74 73   n............fts",
          "4088: |   3568: 34 09 0a 03 00 01 03 00 01 03 00 03 01 35 09 0d   4............5..",
          "4089: |   3584: 03 00 01 03 00 01 03 00 00 03 67 63 63 09 01 03   ..........gcc...",
          "4090: |   3600: 00 01 03 00 01 03 00 01 06 65 6f 70 73 6c 79 09   .........eopsly.",
          "4091: |   3616: 10 03 00 01 03 00 01 03 00 00 05 6a 73 6f 6e 31   ...........json1",
          "4092: |   3632: 09 13 03 00 01 03 00 01 03 00 00 04 6c 6f 61 64   ............load",
          "4093: |   3648: 09 1f 03 00 01 03 00 01 03 00 00 03 6d 61 78 09   ............max.",
          "4094: |   3664: 1c 02 00 01 02 00 01 02 00 01 05 65 6d 6f 72 79   ...........emory",
          "4095: |   3680: 09 1c 03 00 01 03 00 01 03 00 03 04 73 79 73 35   ............sys5",
          "4096: |   3696: 09 16 03 00 01 03 00 01 03 00 00 06 6e 6f 63 61   ............noca",
          "4097: |   3712: 73 65 3c 02 01 02 02 00 03 01 12 02 00 03 01 02   se<.............",
          "4098: |   3728: 02 00 03 01 02 02 00 03 01 02 02 00 03 01 02 02   ................",
          "4099: |   3744: 00 03 01 02 02 00 03 01 02 02 00 03 01 02 02 00   ................",
          "4100: |   3760: 03 01 02 02 00 03 01 02 02 00 03 01 02 02 00 00   ................",
          "4101: |   3776: 04 6f 6d 69 74 09 1f 02 00 01 02 00 01 02 00 00   .omit...........",
          "4102: |   3792: 05 72 74 72 65 65 09 19 03 00 01 03 00 01 03 00   .rtree..........",
          "4103: |   3808: 03 02 69 6d 3c 01 01 02 02 00 03 01 02 02 00 03   ..im<...........",
          "4104: |   3824: 01 02 02 00 03 01 02 02 00 03 01 02 02 00 03 01   ................",
          "4105: |   3840: 02 02 00 03 01 02 02 00 03 01 02 02 00 03 01 02   ................",
          "4106: |   3856: 02 00 03 01 02 02 00 03 01 02 02 00 03 01 02 02   ................",
          "4107: |   3872: 00 00 0a 74 68 72 65 61 64 73 61 66 65 09 22 02   ...threadsafe...",
          "4108: |   3888: 00 01 02 00 01 02 00 00 04 76 74 61 62 09 07 04   .........vtab...",
          "4109: |   3904: 00 01 04 00 01 03 ff ff 01 78 b4 01 01 01 01 02   .........x......",
          "4110: |   3920: 00 01 01 01 02 00 01 01 01 02 00 01 01 01 02 00   ................",
          "4111: |   3936: 01 01 01 02 00 01 01 01 02 00 01 01 01 02 00 01   ................",
          "4112: |   3952: 01 01 02 00 01 01 01 07 30 01 01 01 02 00 01 01   ........0.......",
          "4113: |   3968: 01 02 00 11 01 01 02 00 01 01 01 02 00 11 01 01   ................",
          "4114: |   3984: 02 00 01 01 01 02 00 01 01 01 02 00 01 01 01 02   ................",
          "4115: |   4000: 00 01 01 01 02 00 01 01 01 02 00 01 01 01 02 00   ................",
          "4116: |   4016: 01 01 01 01 ff 01 01 01 02 00 01 01 01 02 00 01   ................",
          "4117: |   4032: 01 01 02 00 01 01 01 02 00 01 01 01 02 00 01 01   ................",
          "4118: |   4048: 01 02 00 01 01 09 c2 00 01 01 01 02 00 01 01 01   ................",
          "4119: |   4064: 02 00 01 01 01 02 00 01 01 01 02 00 01 01 01 02   ................",
          "4120: |   4080: 00 01 01 01 02 00 01 01 01 02 00 01 01 01 02 00   ................",
          "4121: | page 6 offset 20480",
          "4122: |      0: 0a 00 00 00 02 0f f5 00 0f fb 0f f5 00 00 00 00   ................",
          "4123: |   4080: 00 00 00 00 00 05 04 08 09 01 02 04 04 08 08 09   ................",
          "4124: | page 7 offset 24576",
          "4125: |      0: 0d 00 00 00 05 0f b8 00 0e f4 0f e9 10 d6 0f c7   ................",
          "4126: |   4016: 00 00 00 00 00 00 00 00 0d 05 02 23 61 75 74 6f   ...........#auto",
          "4127: |   4032: 6d 65 72 67 65 3d 35 0d 04 02 23 6d 65 72 67 65   merge=5...#merge",
          "4128: |   4048: 3d 31 00 00 00 00 00 00 00 00 00 00 00 00 00 00   =1..............",
          "4129: | end crash-369d042958c29b.db",
          "4130: }]} {}",
          "4132: do_catchsql_test 24.1 {",
          "4133:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT '4hE'+x FROM c WHERE x<72)",
          "4134:     INSERT INTO t1(a) SELECT randomblob(2829) FROM c;",
          "4135: } {0 {}}",
          "4137: do_catchsql_test 24.2 {",
          "4138:   UPDATE t1 SET b=quote((true) ) WHERE t1 MATCH 'h';",
          "4139: } {0 {}}",
          "4141: do_catchsql_test 24.3 {",
          "4142:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT 3+x FROM c WHERE x<72)",
          "4143:     INSERT INTO t1(a) SELECT randomblob(2829) FROM c;",
          "4144: } {0 {}}",
          "4146: do_catchsql_test 24.4 {",
          "4147:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT null<<x FROM c WHERE x<72)",
          "4148:     INSERT INTO t1(a) SELECT randomblob(2829) FROM c;",
          "4149: } {0 {}}",
          "4151: do_catchsql_test 24.5 {",
          "4152:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT 3+x FROM c WHERE x<72)",
          "4153:     INSERT INTO t1(a) SELECT randomblob(2829) FROM c;",
          "4154: } {0 {}}",
          "4156: do_catchsql_test 24.7 {",
          "4157:   INSERT INTO t1(t1) SELECT x FROM t2;",
          "4158: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "66373329881e0474de08707dcf07808672f1da02",
      "candidate_info": {
        "commit_hash": "66373329881e0474de08707dcf07808672f1da02",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/66373329881e0474de08707dcf07808672f1da02",
        "files": [
          "ext/fts3/fts3.c",
          "ext/fts3/fts3Int.h",
          "ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5content.test",
          "manifest",
          "manifest.uuid",
          "test/fts4content.test"
        ],
        "message": "Prevent direct and indirect recursive content= options in fts3/4 and fts5.\n\nFossilOrigin-Name: 2eb997327c2c369c10b7835be80112d77cb2a7cfa9fe4d564042984c21d94698",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h",
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5content.test||ext/fts5/test/fts5content.test",
          "manifest.uuid||manifest.uuid",
          "test/fts4content.test||test/fts4content.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1612:   int iIdx;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1614:   if( p->bLock ){",
          "1615:     return SQLITE_ERROR;",
          "1616:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1809:     }else{",
          "1810:       zSql = sqlite3_mprintf(\"SELECT %s WHERE rowid = ?\", p->zReadExprlist);",
          "1811:       if( !zSql ) return SQLITE_NOMEM;",
          "1813:       sqlite3_free(zSql);",
          "1814:     }",
          "1815:     if( rc==SQLITE_OK ) pCsr->bSeekStmt = 1;",
          "",
          "[Removed Lines]",
          "1812:       rc = sqlite3_prepare_v3(p->db, zSql,-1,SQLITE_PREPARE_PERSISTENT,&pCsr->pStmt,0);",
          "",
          "[Added Lines]",
          "1816:       p->bLock++;",
          "1817:       rc = sqlite3_prepare_v3(",
          "1818:           p->db, zSql,-1,SQLITE_PREPARE_PERSISTENT,&pCsr->pStmt,0",
          "1819:       );",
          "1820:       p->bLock--;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1827:   if( pCsr->isRequireSeek ){",
          "1828:     rc = fts3CursorSeekStmt(pCsr);",
          "1829:     if( rc==SQLITE_OK ){",
          "1830:       sqlite3_bind_int64(pCsr->pStmt, 1, pCsr->iPrevId);",
          "1831:       pCsr->isRequireSeek = 0;",
          "1832:       if( SQLITE_ROW==sqlite3_step(pCsr->pStmt) ){",
          "1833:         return SQLITE_OK;",
          "1834:       }else{",
          "1835:         rc = sqlite3_reset(pCsr->pStmt);",
          "1836:         if( rc==SQLITE_OK && ((Fts3Table *)pCsr->base.pVtab)->zContentTbl==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1838:       Fts3Table *pTab = (Fts3Table*)pCsr->base.pVtab;",
          "1839:       pTab->bLock++;",
          "1843:         pTab->bLock--;",
          "1846:         pTab->bLock--;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3218:   int rc;",
          "3219:   Fts3Cursor *pCsr = (Fts3Cursor *)pCursor;",
          "3220:   if( pCsr->eSearch==FTS3_DOCID_SEARCH || pCsr->eSearch==FTS3_FULLSCAN_SEARCH ){",
          "3221:     if( SQLITE_ROW!=sqlite3_step(pCsr->pStmt) ){",
          "3222:       pCsr->isEof = 1;",
          "3223:       rc = sqlite3_reset(pCsr->pStmt);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3233:     Fts3Table *pTab = (Fts3Table*)pCursor->pVtab;",
          "3234:     pTab->bLock++;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3225:       pCsr->iPrevId = sqlite3_column_int64(pCsr->pStmt, 0);",
          "3226:       rc = SQLITE_OK;",
          "3227:     }",
          "3228:   }else{",
          "3229:     rc = fts3EvalNext((Fts3Cursor *)pCursor);",
          "3230:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3242:     pTab->bLock--;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3285:   UNUSED_PARAMETER(idxStr);",
          "3286:   UNUSED_PARAMETER(nVal);",
          "3288:   eSearch = (idxNum & 0x0000FFFF);",
          "3289:   assert( eSearch>=0 && eSearch<=(FTS3_FULLTEXT_SEARCH+p->nColumn) );",
          "3290:   assert( p->pSegments==0 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3303:   if( p->bLock ){",
          "3304:     return SQLITE_ERROR;",
          "3305:   }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3356:       );",
          "3357:     }",
          "3358:     if( zSql ){",
          "3360:       sqlite3_free(zSql);",
          "3361:     }else{",
          "3362:       rc = SQLITE_NOMEM;",
          "",
          "[Removed Lines]",
          "3359:       rc = sqlite3_prepare_v3(p->db,zSql,-1,SQLITE_PREPARE_PERSISTENT,&pCsr->pStmt,0);",
          "",
          "[Added Lines]",
          "3378:       p->bLock++;",
          "3379:       rc = sqlite3_prepare_v3(",
          "3380:           p->db,zSql,-1,SQLITE_PREPARE_PERSISTENT,&pCsr->pStmt,0",
          "3381:       );",
          "3382:       p->bLock--;",
          "",
          "---------------"
        ],
        "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h": [
          "File: ext/fts3/fts3Int.h -> ext/fts3/fts3Int.h"
        ],
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "895:         break;",
          "896:       }",
          "899:         rc = sqlite3_step(pCsr->pStmt);",
          "900:         if( rc!=SQLITE_ROW ){",
          "901:           CsrFlagSet(pCsr, FTS5CSR_EOF);",
          "902:           rc = sqlite3_reset(pCsr->pStmt);",
          "903:         }else{",
          "904:           rc = SQLITE_OK;",
          "905:         }",
          "906:         break;",
          "907:     }",
          "908:   }",
          "",
          "[Removed Lines]",
          "898:       default:",
          "",
          "[Added Lines]",
          "898:       default: {",
          "899:         Fts5Config *pConfig = ((Fts5Table*)pCursor->pVtab)->pConfig;",
          "900:         pConfig->bLock++;",
          "902:         pConfig->bLock--;",
          "906:           if( rc!=SQLITE_OK ){",
          "907:             pCursor->pVtab->zErrMsg = sqlite3_mprintf(",
          "908:                 \"%s\", sqlite3_errmsg(pConfig->db)",
          "909:             );",
          "910:           }",
          "915:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1188:   int iIdxStr = 0;",
          "1189:   Fts5Expr *pExpr = 0;",
          "1191:   if( pCsr->ePlan ){",
          "1192:     fts5FreeCursorComponents(pCsr);",
          "1193:     memset(&pCsr->ePlan, 0, sizeof(Fts5Cursor) - ((u8*)&pCsr->ePlan-(u8*)pCsr));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1200:   if( pConfig->bLock ){",
          "1201:     pTab->p.base.zErrMsg = sqlite3_mprintf(",
          "1202:         \"recursively defined fts5 content table\"",
          "1203:     );",
          "1204:     return SQLITE_ERROR;",
          "1205:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1408:   }",
          "1410:   if( rc==SQLITE_OK && CsrFlagTest(pCsr, FTS5CSR_REQUIRE_CONTENT) ){",
          "1411:     assert( pCsr->pExpr );",
          "1412:     sqlite3_reset(pCsr->pStmt);",
          "1413:     sqlite3_bind_int64(pCsr->pStmt, 1, fts5CursorRowid(pCsr));",
          "1414:     rc = sqlite3_step(pCsr->pStmt);",
          "1415:     if( rc==SQLITE_ROW ){",
          "1416:       rc = SQLITE_OK;",
          "1417:       CsrFlagClear(pCsr, FTS5CSR_REQUIRE_CONTENT);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1427:     Fts5Table *pTab = (Fts5Table*)(pCsr->base.pVtab);",
          "1431:     pTab->pConfig->bLock++;",
          "1433:     pTab->pConfig->bLock--;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1419:       rc = sqlite3_reset(pCsr->pStmt);",
          "1420:       if( rc==SQLITE_OK ){",
          "1421:         rc = FTS5_CORRUPT;",
          "1422:       }",
          "1423:     }",
          "1424:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1441:       }else{",
          "1442:         pTab->base.zErrMsg = sqlite3_mprintf(",
          "1443:             \"%s\", sqlite3_errmsg(pTab->pConfig->db)",
          "1444:         );",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5content.test||ext/fts5/test/fts5content.test": [
          "File: ext/fts5/test/fts5content.test -> ext/fts5/test/fts5content.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "257: # Check that an fts5 table cannot be its own content table.",
          "258: #",
          "259: reset_db",
          "261:   CREATE VIRTUAL TABLE t1 USING fts5(a, c=t1 );",
          "262:   INSERT INTO t1( a ) VALUES('abc');",
          "263: }",
          "265:   SELECT * FROM t1;",
          "266: } {1 {recursively defined fts5 content table}}",
          "268:   SELECT * FROM t1('abc');",
          "269: } {1 {recursively defined fts5 content table}}",
          "271: finish_test",
          "",
          "[Removed Lines]",
          "260: do_execsql_test 7.1 {",
          "264: do_catchsql_test 7.2 {",
          "267: do_catchsql_test 7.3 {",
          "",
          "[Added Lines]",
          "260: do_execsql_test 7.1.1 {",
          "264: do_catchsql_test 7.1.2 {",
          "267: do_catchsql_test 7.1.3 {",
          "270: do_catchsql_test 7.1.4 {",
          "271:   SELECT count(*) FROM t1;",
          "272: } {1 {recursively defined fts5 content table}}",
          "273: do_catchsql_test 7.1.5 {",
          "274:   SELECT * FROM t1('abc') ORDER BY rank;",
          "275: } {1 {recursively defined fts5 content table}}",
          "277: reset_db",
          "278: do_execsql_test 7.2.1 {",
          "279:   CREATE VIRTUAL TABLE t1 USING fts5(a, c=t2 );",
          "280:   CREATE VIRTUAL TABLE t2 USING fts5(a, c=t1 );",
          "281:   INSERT INTO t1( a ) VALUES('abc');",
          "282: }",
          "283: do_catchsql_test 7.2.2 {",
          "284:   SELECT * FROM t1;",
          "285: } {1 {recursively defined fts5 content table}}",
          "286: do_catchsql_test 7.2.3 {",
          "287:   SELECT * FROM t1('abc');",
          "288: } {1 {recursively defined fts5 content table}}",
          "289: do_catchsql_test 7.2.4 {",
          "290:   SELECT count(*) FROM t1;",
          "291: } {1 {recursively defined fts5 content table}}",
          "292: do_catchsql_test 7.2.5 {",
          "293:   SELECT * FROM t1('abc') ORDER BY rank;",
          "294: } {1 {recursively defined fts5 content table}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0d1055a5da8274a59f35170b1f9469597ce4c5a4c5e851a1b81d3be2ccd32871",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts4content.test||test/fts4content.test": [
          "File: test/fts4content.test -> test/fts4content.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "634:   CREATE VIRTUAL TABLE x1 USING fts4(content=x1);",
          "635: } {1 {vtable constructor called recursively: x1}}",
          "638: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "637: #---------------------------------------------------------------------------",
          "638: # Check that an fts4 table cannot be its own content table.",
          "639: #",
          "640: reset_db",
          "641: breakpoint",
          "642: do_execsql_test 12.1.1 {",
          "643:   CREATE VIRTUAL TABLE t1 USING fts4(a, content=t1 );",
          "644:   INSERT INTO t1(rowid, a) VALUES(1, 'abc');",
          "645: }",
          "646: do_catchsql_test 12.1.2 {",
          "647:   SELECT * FROM t1;",
          "648: } {1 {SQL logic error}}",
          "649: do_catchsql_test 12.1.3 {",
          "650:   SELECT * FROM t1('abc');",
          "651: } {1 {SQL logic error}}",
          "652: do_catchsql_test 12.1.4 {",
          "653:   SELECT count(*) FROM t1;",
          "654: } {1 {SQL logic error}}",
          "656: reset_db",
          "657: do_execsql_test 12.2.1 {",
          "658:   CREATE VIRTUAL TABLE t1 USING fts4(a, content=t2 );",
          "659:   CREATE VIRTUAL TABLE t2 USING fts4(a, content=t1 );",
          "660:   INSERT INTO t1(rowid, a) VALUES(1, 'abc');",
          "661: }",
          "662: do_catchsql_test 12.2.2 {",
          "663:   SELECT * FROM t1;",
          "664: } {1 {SQL logic error}}",
          "665: do_catchsql_test 12.2.3 {",
          "666:   SELECT * FROM t1('abc');",
          "667: } {1 {SQL logic error}}",
          "668: do_catchsql_test 12.2.4 {",
          "669:   SELECT count(*) FROM t1;",
          "670: } {1 {SQL logic error}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9c039d9f2e8d0ed9645c7ea419e24f08a268fb95",
      "candidate_info": {
        "commit_hash": "9c039d9f2e8d0ed9645c7ea419e24f08a268fb95",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9c039d9f2e8d0ed9645c7ea419e24f08a268fb95",
        "files": [
          "Makefile.in",
          "Makefile.msc",
          "ext/misc/prefixes.c",
          "main.mk",
          "manifest",
          "manifest.uuid",
          "src/test1.c",
          "test/prefixes.test"
        ],
        "message": "Add scalar function \"prefix_length()\" to ext/misc/prefixes.c.\n\nFossilOrigin-Name: 0bf1550507d9d3c8a41f8a50db3a59bf808f0a4e24637dc0905d35579305eca7",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "Makefile.msc||Makefile.msc",
          "ext/misc/prefixes.c||ext/misc/prefixes.c",
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid",
          "src/test1.c||src/test1.c",
          "test/prefixes.test||test/prefixes.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "452:   $(TOP)/ext/misc/nextchar.c \\",
          "453:   $(TOP)/ext/misc/normalize.c \\",
          "454:   $(TOP)/ext/misc/percentile.c \\",
          "455:   $(TOP)/ext/misc/regexp.c \\",
          "456:   $(TOP)/ext/misc/remember.c \\",
          "457:   $(TOP)/ext/misc/series.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "455:   $(TOP)/ext/misc/prefixes.c \\",
          "",
          "---------------"
        ],
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1527:   $(TOP)\\ext\\misc\\nextchar.c \\",
          "1528:   $(TOP)\\ext\\misc\\normalize.c \\",
          "1529:   $(TOP)\\ext\\misc\\percentile.c \\",
          "1530:   $(TOP)\\ext\\misc\\regexp.c \\",
          "1531:   $(TOP)\\ext\\misc\\remember.c \\",
          "1532:   $(TOP)\\ext\\misc\\series.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1530:   $(TOP)\\ext\\misc\\prefixes.c \\",
          "",
          "---------------"
        ],
        "ext/misc/prefixes.c||ext/misc/prefixes.c": [
          "File: ext/misc/prefixes.c -> ext/misc/prefixes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "250: };",
          "253: #ifdef _WIN32",
          "254: __declspec(dllexport)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "258: #define PREFIX_SKIP_UTF8(zIn) {                        \\",
          "259:   if( (*(zIn++))>=0xc0 ){                              \\",
          "260:     while( (*zIn & 0xc0)==0x80 ){ zIn++; }             \\",
          "261:   }                                                    \\",
          "262: }",
          "277: static void prefixLengthFunc(",
          "278:   sqlite3_context *ctx,",
          "279:   int nVal,",
          "280:   sqlite3_value **apVal",
          "281: ){",
          "284:   const unsigned char *zL = sqlite3_value_text(apVal[0]);",
          "285:   const unsigned char *zR = sqlite3_value_text(apVal[1]);",
          "286:   int nL = sqlite3_value_bytes(apVal[0]);",
          "287:   int nR = sqlite3_value_bytes(apVal[1]);",
          "288:   int i;",
          "290:   nByte = (nL > nR ? nL : nR);",
          "291:   for(i=0; i<nByte; i++){",
          "292:     if( zL[i]!=zR[i] ) break;",
          "293:     if( (zL[i] & 0xC0)!=0x80 ) nRet++;",
          "294:   }",
          "296:   if( (zL[i] & 0xC0)==0x80 ) nRet--;",
          "297:   sqlite3_result_int(ctx, nRet);",
          "298: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "261:   int rc = SQLITE_OK;",
          "262:   SQLITE_EXTENSION_INIT2(pApi);",
          "263:   rc = sqlite3_create_module(db, \"prefixes\", &prefixesModule, 0);",
          "264:   return rc;",
          "265: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311:   if( rc==SQLITE_OK ){",
          "312:     rc = sqlite3_create_function(",
          "313:         db, \"prefix_length\", 2, SQLITE_UTF8, 0, prefixLengthFunc, 0, 0",
          "314:     );",
          "315:   }",
          "",
          "---------------"
        ],
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "369:   $(TOP)/ext/misc/nextchar.c \\",
          "370:   $(TOP)/ext/misc/normalize.c \\",
          "371:   $(TOP)/ext/misc/percentile.c \\",
          "372:   $(TOP)/ext/misc/regexp.c \\",
          "373:   $(TOP)/ext/misc/remember.c \\",
          "374:   $(TOP)/ext/misc/series.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "372:   $(TOP)/ext/misc/prefixes.c \\",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 11b8a4cba747ca214fe3506caa3b711c87be4d55412754e673cc0603afefb086",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7141:   extern int sqlite3_ieee_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "7142:   extern int sqlite3_nextchar_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "7143:   extern int sqlite3_percentile_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "7144:   extern int sqlite3_regexp_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "7145:   extern int sqlite3_remember_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "7146:   extern int sqlite3_series_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7144:   extern int sqlite3_prefixes_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7166:     { \"ieee754\",               sqlite3_ieee_init                 },",
          "7167:     { \"nextchar\",              sqlite3_nextchar_init             },",
          "7168:     { \"percentile\",            sqlite3_percentile_init           },",
          "7169:     { \"regexp\",                sqlite3_regexp_init               },",
          "7170:     { \"remember\",              sqlite3_remember_init             },",
          "7171:     { \"series\",                sqlite3_series_init               },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7170:     { \"prefixes\",              sqlite3_prefixes_init             },",
          "",
          "---------------"
        ],
        "test/prefixes.test||test/prefixes.test": [
          "File: test/prefixes.test -> test/prefixes.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018-01-15",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this file is prefixes.c extension",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "17: set testprefix unionvtab",
          "19: ifcapable !vtab {",
          "20:   finish_test",
          "21:   return",
          "22: }",
          "24: load_static_extension db prefixes",
          "26: foreach {tn zLeft zRight expected} {",
          "27:   1 abcdxxx abcyy    3",
          "28:   2 abcdxxx bcyyy    0",
          "29:   3 abcdxxx ab       2",
          "30:   4 ab      abcd     2",
          "32:   5 \"xyz\\u1234xz\" \"xyz\\u1234xy\" 5",
          "33:   6 \"xyz\\u1234\"   \"xyz\\u1234xy\" 4",
          "34:   7 \"xyz\\u1234\"   \"xyz\\u1234\"   4",
          "35:   8 \"xyz\\u1234xy\" \"xyz\\u1234\"   4",
          "36:   9 \"xyz\\u1234xy\" \"xyz\\u1233\"   3",
          "37:  10 \"xyz\\u1234xy\" \"xyz\\u1235\"   3",
          "38: } {",
          "39:   do_execsql_test 1.$tn { SELECT prefix_length($zLeft, $zRight) } $expected",
          "40: }",
          "43: do_execsql_test 2.0 {",
          "44:   CREATE TABLE t1(k TEXT UNIQUE, v INTEGER);",
          "45:   INSERT INTO t1 VALUES",
          "46:     ('aback', 1),",
          "47:     ('abaft', 2),",
          "48:     ('abandon', 3),",
          "49:     ('abandoned', 4),",
          "50:     ('abandoning', 5),",
          "51:     ('abandonment', 6),",
          "52:     ('abandons', 7),",
          "53:     ('abase', 8),",
          "54:     ('abased', 9),",
          "55:     ('abasement', 10),",
          "56:     ('abasements', 11),",
          "57:     ('abases', 12),",
          "58:     ('abash', 13),",
          "59:     ('abashed', 14),",
          "60:     ('abashes', 15),",
          "61:     ('abashing', 16),",
          "62:     ('abasing', 17),",
          "63:     ('abate', 18),",
          "64:     ('abated', 19),",
          "65:     ('abatement', 20),",
          "66:     ('abatements', 21);",
          "67: }",
          "69: foreach {tn INPUT expected} {",
          "70:   1 abatementt   abatement",
          "71:   2 abashet      abash",
          "72:   3 abandonio    abandon",
          "73:   4 abasemenu    abase",
          "74: } {",
          "75:   do_execsql_test 2.$tn {",
          "76:     WITH finder(str) AS (",
          "77:       SELECT (SELECT max(k) FROM t1 WHERE k<=$INPUT)",
          "78:         UNION ALL",
          "79:         SELECT (",
          "80:           SELECT max(k) FROM t1",
          "81:           WHERE k<=substr($INPUT, 1, prefix_length(finder.str, $INPUT))",
          "82:         ) FROM finder WHERE length(finder.str)>0",
          "83:       )",
          "84:     SELECT str FROM finder WHERE length(str)==prefix_length(str, $INPUT) LIMIT 1",
          "85:   } $expected",
          "86: }",
          "88: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2b13cd99d30c78d4ca13380fcb9484ad1aba829f",
      "candidate_info": {
        "commit_hash": "2b13cd99d30c78d4ca13380fcb9484ad1aba829f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2b13cd99d30c78d4ca13380fcb9484ad1aba829f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "Early detection of SQLITE_TOOBIG when processing nested queries.\n\nFossilOrigin-Name: 5d85d80ef8b216639244c6f4e6a2c0050af3cf9c3998f372bae4a19c0430f2fd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b2ce5ed175cb5029ac07392ae371c86eeec23c74624aad007dee51cf359f3eeb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4797:   pTab->nRowLogEst = 200; assert( 200==sqlite3LogEst(1048576) );",
          "4798:   pTab->tabFlags |= TF_Ephemeral;",
          "4801: }",
          "",
          "[Removed Lines]",
          "4800:   return SQLITE_OK;",
          "",
          "[Added Lines]",
          "4800:   return pParse->rc;",
          "",
          "---------------"
        ]
      }
    }
  ]
}