{
  "cve_id": "CVE-2017-3733",
  "cve_desc": "During a renegotiation handshake if the Encrypt-Then-Mac extension is negotiated where it was not in the original handshake (or vice-versa) then this can cause OpenSSL 1.1.0 before 1.1.0e to crash (dependent on ciphersuite). Both clients and servers are affected.",
  "repo": "openssl/openssl",
  "patch_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
  "patch_info": {
    "commit_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "files": [
      "include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h",
      "ssl/t1_enc.c",
      "ssl/t1_lib.c"
    ],
    "message": "Don't change the state of the ETM flags until CCS processing\n\nChanging the ciphersuite during a renegotiation can result in a crash\nleading to a DoS attack. ETM has not been implemented in 1.1.0 for DTLS\nso this is TLS only.\n\nThe problem is caused by changing the flag indicating whether to use ETM\nor not immediately on negotiation of ETM, rather than at CCS. Therefore,\nduring a renegotiation, if the ETM state is changing (usually due to a\nchange of ciphersuite), then an error/crash will occur.\n\nDue to the fact that there are separate CCS messages for read and write\nwe actually now need two flags to determine whether to use ETM or not.\n\nCVE-2017-3733\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl3.h||include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h||ssl/ssl_locl.h",
      "ssl/t1_enc.c||ssl/t1_enc.c",
      "ssl/t1_lib.c||ssl/t1_lib.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl3.h||include/openssl/ssl3.h": [
      "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "264: # define TLS1_FLAGS_SKIP_CERT_VERIFY             0x0010",
      "270: # define TLS1_FLAGS_RECEIVED_EXTMS               0x0200",
      "272: # define SSL3_MT_HELLO_REQUEST                   0",
      "273: # define SSL3_MT_CLIENT_HELLO                    1",
      "274: # define SSL3_MT_SERVER_HELLO                    2",
      "",
      "[Removed Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             0x0100",
      "",
      "[Added Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_READ        0x0100",
      "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             TLS1_FLAGS_ENCRYPT_THEN_MAC_READ",
      "273: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE       0x0400",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
      "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:     if (type == SSL3_RT_APPLICATION_DATA &&",
      "396:         u_len >= 4 * (max_send_fragment = s->max_send_fragment) &&",
      "397:         s->compress == NULL && s->msg_callback == NULL &&",
      "399:         EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_write_ctx)) &",
      "400:         EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK) {",
      "401:         unsigned char aad[13];",
      "",
      "[Removed Lines]",
      "398:         !SSL_USE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "[Added Lines]",
      "398:         !SSL_WRITE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "795:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "796:                                          &(outbuf[j][wr[j].length + eivlen]),",
      "797:                                          1) < 0)",
      "",
      "[Removed Lines]",
      "794:         if (!SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "794:         if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "814:         goto err;",
      "816:     for (j = 0; j < numpipes; j++) {",
      "818:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "819:                                          outbuf[j] + wr[j].length, 1) < 0)",
      "820:                 goto err;",
      "",
      "[Removed Lines]",
      "817:         if (SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "817:         if (SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------"
    ],
    "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
      "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "350:         unsigned char *mac;",
      "351:         mac_size = EVP_MD_CTX_size(s->read_hash);",
      "352:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
      "",
      "[Removed Lines]",
      "349:     if (SSL_USE_ETM(s) && s->read_hash) {",
      "",
      "[Added Lines]",
      "349:     if (SSL_READ_ETM(s) && s->read_hash) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "394:     if ((sess != NULL) &&",
      "395:         (s->enc_read_ctx != NULL) &&",
      "398:         unsigned char *mac = NULL;",
      "399:         unsigned char mac_tmp[EVP_MAX_MD_SIZE];",
      "",
      "[Removed Lines]",
      "396:         (EVP_MD_CTX_md(s->read_hash) != NULL) && !SSL_USE_ETM(s)) {",
      "",
      "[Added Lines]",
      "396:         (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "823:         }",
      "825:         ret = 1;",
      "827:             mac_size = EVP_MD_CTX_size(s->read_hash);",
      "828:         if ((bs != 1) && !send) {",
      "829:             int tmpret;",
      "",
      "[Removed Lines]",
      "826:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "[Added Lines]",
      "826:         if (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "997:     header[11] = (rec->length) >> 8;",
      "998:     header[12] = (rec->length) & 0xff;",
      "1001:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
      "1002:         ssl3_cbc_record_digest_supported(mac_ctx)) {",
      "",
      "[Removed Lines]",
      "1000:     if (!send && !SSL_USE_ETM(ssl) &&",
      "",
      "[Added Lines]",
      "1000:     if (!send && !SSL_READ_ETM(ssl) &&",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1022:             EVP_MD_CTX_free(hmac);",
      "1023:             return -1;",
      "1024:         }",
      "1026:             if (!tls_fips_digest_extra(ssl->enc_read_ctx,",
      "1027:                                        mac_ctx, rec->input,",
      "1028:                                        rec->length, rec->orig_len)) {",
      "",
      "[Removed Lines]",
      "1025:         if (!send && !SSL_USE_ETM(ssl) && FIPS_mode())",
      "",
      "[Added Lines]",
      "1025:         if (!send && !SSL_READ_ETM(ssl) && FIPS_mode())",
      "",
      "---------------"
    ],
    "ssl/ssl_locl.h||ssl/ssl_locl.h": [
      "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "378: # define SSL_CLIENT_USE_SIGALGS(s)        \\",
      "379:     SSL_CLIENT_USE_TLS1_2_CIPHERS(s)",
      "384: # define SSL_PKEY_RSA_ENC        0",
      "",
      "[Removed Lines]",
      "381: # define SSL_USE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC)",
      "",
      "[Added Lines]",
      "381: # define SSL_READ_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_READ)",
      "382: # define SSL_WRITE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1111:     unsigned char *alpn_client_proto_list;",
      "1112:     unsigned alpn_client_proto_list_len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1116:     int tlsext_use_etm;",
      "",
      "---------------"
    ],
    "ssl/t1_enc.c||ssl/t1_enc.c": [
      "File: ssl/t1_enc.c -> ssl/t1_enc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "130: #endif",
      "132:     if (which & SSL3_CC_READ) {",
      "133:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "134:             s->mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM;",
      "135:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133:         if (s->tlsext_use_etm)",
      "134:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "135:         else",
      "136:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "168:         mac_secret = &(s->s3->read_mac_secret[0]);",
      "169:         mac_secret_size = &(s->s3->read_mac_secret_size);",
      "170:     } else {",
      "171:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "172:             s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
      "173:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "176:         if (s->tlsext_use_etm)",
      "177:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "178:         else",
      "179:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "367:     if (s->s3->tmp.key_block_length != 0)",
      "368:         return (1);",
      "373:         SSLerr(SSL_F_TLS1_SETUP_KEY_BLOCK, SSL_R_CIPHER_OR_HASH_UNAVAILABLE);",
      "374:         return (0);",
      "375:     }",
      "",
      "[Removed Lines]",
      "370:     if (!ssl_cipher_get_evp",
      "371:         (s->session, &c, &hash, &mac_type, &mac_secret_size, &comp,",
      "372:          SSL_USE_ETM(s))) {",
      "",
      "[Added Lines]",
      "380:     if (!ssl_cipher_get_evp(s->session, &c, &hash, &mac_type, &mac_secret_size,",
      "381:                             &comp, s->tlsext_use_etm)) {",
      "",
      "---------------"
    ],
    "ssl/t1_lib.c||ssl/t1_lib.c": [
      "File: ssl/t1_lib.c -> ssl/t1_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1674: #endif",
      "1675:     if (!custom_ext_add(s, 1, &ret, limit, al))",
      "1676:         return NULL;",
      "",
      "[Removed Lines]",
      "1677:     if (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) {",
      "",
      "[Added Lines]",
      "1677:     if (s->tlsext_use_etm) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1683:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4",
      "1684:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT",
      "1685:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)",
      "1687:         else {",
      "",
      "[Removed Lines]",
      "1686:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1686:             s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1917:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
      "1918:     s->s3->tmp.peer_sigalgs = NULL;",
      "1921: #ifndef OPENSSL_NO_SRP",
      "1922:     OPENSSL_free(s->srp_ctx.login);",
      "",
      "[Removed Lines]",
      "1919:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1919:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2264:         }",
      "2265: #endif",
      "2266:         else if (type == TLSEXT_TYPE_encrypt_then_mac)",
      "",
      "[Removed Lines]",
      "2267:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2267:             s->tlsext_use_etm = 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2366:                              SSL_DTLSEXT_HB_DONT_SEND_REQUESTS);",
      "2367: #endif",
      "2371:     s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;",
      "",
      "[Removed Lines]",
      "2369:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2369:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2586:             if (s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD",
      "2587:                 && s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)",
      "2589:         } else if (type == TLSEXT_TYPE_extended_master_secret) {",
      "2590:             s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;",
      "2591:             if (!s->hit)",
      "",
      "[Removed Lines]",
      "2588:                 s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2588:                 s->tlsext_use_etm = 1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "238b2bc904f45826b9082dd2f0061a12a2f61cd0",
      "candidate_info": {
        "commit_hash": "238b2bc904f45826b9082dd2f0061a12a2f61cd0",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/238b2bc904f45826b9082dd2f0061a12a2f61cd0",
        "files": [
          "util/mkdef.pl"
        ],
        "message": "Code health: Remove VAX exceptions in util/mkdef.pl\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2793)\n(cherry picked from commit 96bc5d03b813a318403d45600e07d6bdcb41d195)",
        "before_after_code_files": [
          "util/mkdef.pl||util/mkdef.pl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "util/mkdef.pl||util/mkdef.pl": [
          "File: util/mkdef.pl -> util/mkdef.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: my $do_ctestall = 0;",
          "64: my $do_checkexist = 0;",
          "68: my $VMS=0;",
          "69: my $W32=0;",
          "70: my $NT=0;",
          "",
          "[Removed Lines]",
          "66: my $VMSVAX=0;",
          "67: my $VMSNonVAX=0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "153:   $W32 = 1;",
          "154:   $NT = 1;",
          "155:  }",
          "164:  if ($_ eq \"linux\") {",
          "165:   $linux=1;",
          "166:  }",
          "168:  if ($_ eq \"zlib\" || $_ eq \"enable-zlib\" || $_ eq \"zlib-dynamic\"",
          "169:     || $_ eq \"enable-zlib-dynamic\") {",
          "170:   $zlib = 1;",
          "",
          "[Removed Lines]",
          "156:  if ($_ eq \"VMS-VAX\") {",
          "157:   $VMS=1;",
          "158:   $VMSVAX=1;",
          "159:  }",
          "160:  if ($_ eq \"VMS-NonVAX\") {",
          "161:   $VMS=1;",
          "162:   $VMSNonVAX=1;",
          "163:  }",
          "167:  $VMS=$VMSNonVAX=1 if $_ eq \"VMS\";",
          "",
          "[Added Lines]",
          "157:  $VMS=1 if $_ eq \"VMS\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "980:  $platform{\"PEM_write_NS_CERT_SEQ\"} = \"VMS\";",
          "981:  $platform{\"PEM_read_P8_PRIV_KEY_INFO\"} = \"VMS\";",
          "982:  $platform{\"PEM_write_P8_PRIV_KEY_INFO\"} = \"VMS\";",
          "997:  # Info we know about",
          "",
          "[Removed Lines]",
          "983:  $platform{\"EVP_sha384\"} = \"!VMSVAX\";",
          "984:  $platform{\"EVP_sha512\"} = \"!VMSVAX\";",
          "985:  $platform{\"SHA384_Init\"} = \"!VMSVAX\";",
          "986:  $platform{\"SHA384_Transform\"} = \"!VMSVAX\";",
          "987:  $platform{\"SHA384_Update\"} = \"!VMSVAX\";",
          "988:  $platform{\"SHA384_Final\"} = \"!VMSVAX\";",
          "989:  $platform{\"SHA384\"} = \"!VMSVAX\";",
          "990:  $platform{\"SHA512_Init\"} = \"!VMSVAX\";",
          "991:  $platform{\"SHA512_Transform\"} = \"!VMSVAX\";",
          "992:  $platform{\"SHA512_Update\"} = \"!VMSVAX\";",
          "993:  $platform{\"SHA512_Final\"} = \"!VMSVAX\";",
          "994:  $platform{\"SHA512\"} = \"!VMSVAX\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1118:   if ($platforms) {",
          "1119:    # platforms",
          "1122:    if ($keyword eq \"VMS\" && $VMS) { return 1; }",
          "1123:    if ($keyword eq \"WIN32\" && $W32) { return 1; }",
          "1124:    if ($keyword eq \"_WIN32\" && $W32) { return 1; }",
          "1125:    if ($keyword eq \"WINNT\" && $NT) { return 1; }",
          "1126:    # Special platforms:",
          "1127:    # EXPORT_VAR_AS_FUNCTION means that global variables",
          "1131:     return 1;",
          "1132:    }",
          "1133:    if ($keyword eq \"ZLIB\" && $zlib) { return 1; }",
          "",
          "[Removed Lines]",
          "1120:    if ($keyword eq \"VMSVAX\" && $VMSVAX) { return 1; }",
          "1121:    if ($keyword eq \"VMSNonVAX\" && $VMSNonVAX) { return 1; }",
          "1128:    # will be represented as functions.  This currently",
          "1129:    # only happens on VMS-VAX.",
          "1130:    if ($keyword eq \"EXPORT_VAR_AS_FUNCTION\" && ($VMSVAX || $W32)) {",
          "",
          "[Added Lines]",
          "1103:    # will be represented as functions.",
          "1104:    if ($keyword eq \"EXPORT_VAR_AS_FUNCTION\" && $W32) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "86d9b572e184262f8c14e8c31f87caa300691d39",
      "candidate_info": {
        "commit_hash": "86d9b572e184262f8c14e8c31f87caa300691d39",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/86d9b572e184262f8c14e8c31f87caa300691d39",
        "files": [
          "crypto/threads_pthread.c"
        ],
        "message": "Grouped data declarations [skip ci] Reviewed-by: Rich Salz <rsalz@openssl.org> Reviewed-by: Richard Levitte <levitte@openssl.org> (Merged from https://github.com/openssl/openssl/pull/1981) (cherry picked from commit bc1dba209533f2033a4de0d93380fc0f485e6f7e)",
        "before_after_code_files": [
          "crypto/threads_pthread.c||crypto/threads_pthread.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/threads_pthread.c||crypto/threads_pthread.c": [
          "File: crypto/threads_pthread.c -> crypto/threads_pthread.c"
        ]
      }
    },
    {
      "candidate_hash": "a4905bf6423105cda266ea3dfa70c207b4b7c2ac",
      "candidate_info": {
        "commit_hash": "a4905bf6423105cda266ea3dfa70c207b4b7c2ac",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/a4905bf6423105cda266ea3dfa70c207b4b7c2ac",
        "files": [
          "crypto/dh/dh_meth.c",
          "crypto/dsa/dsa_meth.c",
          "crypto/rsa/rsa_meth.c"
        ],
        "message": "Raise an error on memory alloc failure.\n\nBoth strdup or malloc failure should raise an err.\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1905)\n(cherry picked from commit bad6b116a2d3c005330e618c726f172fd0fefc2a)",
        "before_after_code_files": [
          "crypto/dh/dh_meth.c||crypto/dh/dh_meth.c",
          "crypto/dsdsa_meth.c||crypto/dsa/dsa_meth.c",
          "crypto/rsrsa_meth.c||crypto/rsa/rsa_meth.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/dh/dh_meth.c||crypto/dh/dh_meth.c": [
          "File: crypto/dh/dh_meth.c -> crypto/dh/dh_meth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: DH_METHOD *DH_meth_new(const char *name, int flags)",
          "15: {",
          "18:     if (dhm != NULL) {",
          "25:         dhm->flags = flags;",
          "26:     }",
          "29: }",
          "31: void DH_meth_free(DH_METHOD *dhm)",
          "",
          "[Removed Lines]",
          "16:     DH_METHOD *dhm = OPENSSL_zalloc(sizeof(DH_METHOD));",
          "19:         dhm->name = OPENSSL_strdup(name);",
          "20:         if (dhm->name == NULL) {",
          "21:             OPENSSL_free(dhm);",
          "22:             DHerr(DH_F_DH_METH_NEW, ERR_R_MALLOC_FAILURE);",
          "23:             return NULL;",
          "24:         }",
          "28:     return dhm;",
          "",
          "[Added Lines]",
          "16:     DH_METHOD *dhm = OPENSSL_zalloc(sizeof(*dhm));",
          "21:         dhm->name = OPENSSL_strdup(name);",
          "22:         if (dhm->name != NULL)",
          "23:             return dhm;",
          "25:         OPENSSL_free(dhm);",
          "28:     DHerr(DH_F_DH_METH_NEW, ERR_R_MALLOC_FAILURE);",
          "29:     return NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: DH_METHOD *DH_meth_dup(const DH_METHOD *dhm)",
          "40: {",
          "45:     if (ret != NULL) {",
          "46:         memcpy(ret, dhm, sizeof(*dhm));",
          "47:         ret->name = OPENSSL_strdup(dhm->name);",
          "53:     }",
          "56: }",
          "58: const char *DH_meth_get0_name(const DH_METHOD *dhm)",
          "",
          "[Removed Lines]",
          "41:     DH_METHOD *ret;",
          "43:     ret = OPENSSL_malloc(sizeof(DH_METHOD));",
          "48:         if (ret->name == NULL) {",
          "49:             OPENSSL_free(ret);",
          "50:             DHerr(DH_F_DH_METH_DUP, ERR_R_MALLOC_FAILURE);",
          "51:             return NULL;",
          "52:         }",
          "55:     return ret;",
          "",
          "[Added Lines]",
          "42:     DH_METHOD *ret = OPENSSL_malloc(sizeof(*ret));",
          "48:         if (ret->name != NULL)",
          "49:             return ret;",
          "51:         OPENSSL_free(ret);",
          "54:     DHerr(DH_F_DH_METH_DUP, ERR_R_MALLOC_FAILURE);",
          "55:     return NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63: int DH_meth_set1_name(DH_METHOD *dhm, const char *name)",
          "64: {",
          "68:     if (tmpname == NULL) {",
          "69:         DHerr(DH_F_DH_METH_SET1_NAME, ERR_R_MALLOC_FAILURE);",
          "70:         return 0;",
          "",
          "[Removed Lines]",
          "65:     char *tmpname;",
          "67:     tmpname = OPENSSL_strdup(name);",
          "",
          "[Added Lines]",
          "65:     char *tmpname = OPENSSL_strdup(name);",
          "",
          "---------------"
        ],
        "crypto/dsdsa_meth.c||crypto/dsa/dsa_meth.c": [
          "File: crypto/dsdsa_meth.c -> crypto/dsa/dsa_meth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24:     DSA_METHOD *dsam = OPENSSL_zalloc(sizeof(*dsam));",
          "29:         dsam->name = OPENSSL_strdup(name);",
          "30:         if (dsam->name != NULL)",
          "31:             return dsam;",
          "33:         OPENSSL_free(dsam);",
          "36:     DSAerr(DSA_F_DSA_METH_NEW, ERR_R_MALLOC_FAILURE);",
          "37:     return NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:     DSA_METHOD *ret = OPENSSL_malloc(sizeof(*ret));",
          "56:         if (ret->name != NULL)",
          "57:             return ret;",
          "59:         OPENSSL_free(ret);",
          "62:     DSAerr(DSA_F_DSA_METH_DUP, ERR_R_MALLOC_FAILURE);",
          "63:     return NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:     char *tmpname = OPENSSL_strdup(name);",
          "",
          "---------------"
        ],
        "crypto/rsrsa_meth.c||crypto/rsa/rsa_meth.c": [
          "File: crypto/rsrsa_meth.c -> crypto/rsa/rsa_meth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16:     RSA_METHOD *meth = OPENSSL_zalloc(sizeof(*meth));",
          "21:         meth->name = OPENSSL_strdup(name);",
          "22:         if (meth->name != NULL)",
          "23:             return meth;",
          "25:         OPENSSL_free(meth);",
          "28:     RSAerr(RSA_F_RSA_METH_NEW, ERR_R_MALLOC_FAILURE);",
          "29:     return NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42:     RSA_METHOD *ret = OPENSSL_malloc(sizeof(*ret));",
          "48:         if (ret->name != NULL)",
          "49:             return ret;",
          "51:         OPENSSL_free(ret);",
          "54:     RSAerr(RSA_F_RSA_METH_DUP, ERR_R_MALLOC_FAILURE);",
          "55:     return NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:     char *tmpname = OPENSSL_strdup(name);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8a4d96ac8227f39043735faa9e9a30e22818f5e8",
      "candidate_info": {
        "commit_hash": "8a4d96ac8227f39043735faa9e9a30e22818f5e8",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/8a4d96ac8227f39043735faa9e9a30e22818f5e8",
        "files": [
          "CHANGES",
          "NEWS",
          "README",
          "include/openssl/opensslv.h"
        ],
        "message": "Prepare for 1.1.0d release\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "include/openssl/opensslv.h||include/openssl/opensslv.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/openssl/opensslv.h||include/openssl/opensslv.h": [
          "File: include/openssl/opensslv.h -> include/openssl/opensslv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: # ifdef OPENSSL_FIPS",
          "45: # else",
          "47: # endif",
          "",
          "[Removed Lines]",
          "42: # define OPENSSL_VERSION_NUMBER  0x10100040L",
          "44: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0d-fips-dev  xx XXX xxxx\"",
          "46: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0d-dev  xx XXX xxxx\"",
          "",
          "[Added Lines]",
          "42: # define OPENSSL_VERSION_NUMBER  0x1010004fL",
          "44: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0d-fips  26 Jan 2017\"",
          "46: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0d  26 Jan 2017\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "81d5808064949e6f23c1eaac4b24f09c8b1255db",
      "candidate_info": {
        "commit_hash": "81d5808064949e6f23c1eaac4b24f09c8b1255db",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/81d5808064949e6f23c1eaac4b24f09c8b1255db",
        "files": [
          "crypto/ct/ct_policy.c"
        ],
        "message": "By default, allow SCT timestamps to be up to 5 minutes in the future\n\nAs requested in\nhttps://github.com/openssl/openssl/pull/1554#issuecomment-246371575.\n\nReviewed-by: Viktor Dukhovni <viktor@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1554)\n(cherry picked from commit c22aa33e29ce162c672c9b2f0df591db977d4e9b)",
        "before_after_code_files": [
          "crypto/ct/ct_policy.c||crypto/ct/ct_policy.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/ct/ct_policy.c||crypto/ct/ct_policy.c": [
          "File: crypto/ct/ct_policy.c -> crypto/ct/ct_policy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include \"ct_locl.h\"",
          "20: CT_POLICY_EVAL_CTX *CT_POLICY_EVAL_CTX_new(void)",
          "21: {",
          "22:     CT_POLICY_EVAL_CTX *ctx = OPENSSL_zalloc(sizeof(CT_POLICY_EVAL_CTX));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: static const time_t SCT_CLOCK_DRIFT_TOLERANCE = 300;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27:     }",
          "31:     return ctx;",
          "32: }",
          "",
          "[Removed Lines]",
          "30:     ctx->epoch_time_in_ms = time(NULL) * 1000;",
          "",
          "[Added Lines]",
          "36:     ctx->epoch_time_in_ms = (time(NULL) + SCT_CLOCK_DRIFT_TOLERANCE) * 1000;",
          "",
          "---------------"
        ]
      }
    }
  ]
}