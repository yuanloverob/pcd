{
  "cve_id": "CVE-2019-19603",
  "cve_desc": "SQLite 3.30.1 mishandles certain SELECT statements with a nonexistent VIEW, leading to an application crash.",
  "repo": "sqlite/sqlite",
  "patch_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
  "patch_info": {
    "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab.test"
    ],
    "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab.test||test/altertab.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "856:       }",
      "857:     }",
      "858:   }else{",
      "861:     ){",
      "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
      "863:                       zName);",
      "864:       return SQLITE_ERROR;",
      "865:     }",
      "866:   }",
      "867:   return SQLITE_OK;",
      "868: }",
      "",
      "[Removed Lines]",
      "859:     if( pParse->nested==0",
      "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
      "",
      "[Added Lines]",
      "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
      "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
      "",
      "[Added Lines]",
      "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
      "2148:   return pMod->pModule->xShadowName(zTail+1);",
      "2149: }",
      "",
      "[Removed Lines]",
      "2150: #else",
      "2151: # define isShadowTableName(x,y) 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2190:   p = pParse->pNewTable;",
      "2191:   if( p==0 ) return;",
      "2194:     p->tabFlags |= TF_Shadow;",
      "2195:   }",
      "",
      "[Removed Lines]",
      "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
      "",
      "[Added Lines]",
      "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
      "4549: #endif",
      "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
      "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
      "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
      "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
      "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
      "4553: #else",
      "4554: # define sqlite3ShadowTableName(A,B) 0",
      "4555: #endif",
      "",
      "---------------"
    ],
    "test/altertab.test||test/altertab.test": [
      "File: test/altertab.test -> test/altertab.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "547:   } {1 {table y1_segments may not be modified}}",
      "549:   do_catchsql_test 16.20 {",
      "554:     DROP TABLE y1_segments;",
      "555:   } {1 {table y1_segments may not be dropped}}",
      "557:   do_execsql_test 16.30 {",
      "558:     ALTER TABLE y1 RENAME TO z1;",
      "559:   }",
      "",
      "[Removed Lines]",
      "550:     ALTER TABLE y1_segments RENAME TO abc;",
      "551:   } {1 {table y1_segments may not be altered}}",
      "553:   do_catchsql_test 16.21 {",
      "",
      "[Added Lines]",
      "553:   do_catchsql_test 16.20 {",
      "554:     ALTER TABLE y1_segments RENAME TO abc;",
      "555:   } {1 {table y1_segments may not be altered}}",
      "556:   sqlite3_db_config db DEFENSIVE 0",
      "557:   do_catchsql_test 16.22 {",
      "558:     ALTER TABLE y1_segments RENAME TO abc;",
      "559:   } {0 {}}",
      "560:   sqlite3_db_config db DEFENSIVE 1",
      "561:   do_catchsql_test 16.23 {",
      "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
      "563:   } {1 {object name reserved for internal use: y1_segments}}",
      "564:   do_catchsql_test 16.24 {",
      "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
      "566:   } {1 {object name reserved for internal use: y1_segments}}",
      "567:   sqlite3_db_config db DEFENSIVE 0",
      "568:   do_catchsql_test 16.25 {",
      "569:     ALTER TABLE abc RENAME TO y1_segments;",
      "570:   } {0 {}}",
      "571:   sqlite3_db_config db DEFENSIVE 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dc6214ee3910093d930962ba026e1f8329b6ef98",
      "candidate_info": {
        "commit_hash": "dc6214ee3910093d930962ba026e1f8329b6ef98",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dc6214ee3910093d930962ba026e1f8329b6ef98",
        "files": [
          "ext/rbu/rbu_common.tcl",
          "ext/rbu/rbuvacuum2.test",
          "ext/rbu/sqlite3rbu.c",
          "ext/rbu/sqlite3rbu.h",
          "ext/rbu/test_rbu.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a problem with using \"<db>-vacuum\" (the default) as the state database when resuming an RBU vacuum.\n\nFossilOrigin-Name: c878d741733a897d47a1a0b57b454bc9095ce302b48cc01089336d5d20e2a24c",
        "before_after_code_files": [
          "ext/rbu/rbu_common.tcl||ext/rbu/rbu_common.tcl",
          "ext/rbu/rbuvacuum2.test||ext/rbu/rbuvacuum2.test",
          "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c",
          "ext/rbu/sqlite3rbu.h||ext/rbu/sqlite3rbu.h",
          "ext/rbu/test_rbu.c||ext/rbu/test_rbu.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rbu/rbu_common.tcl||ext/rbu/rbu_common.tcl": [
          "File: ext/rbu/rbu_common.tcl -> ext/rbu/rbu_common.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:   set rc",
          "87: }",
          "93:     while 1 {",
          "95:       set state [rbu state]",
          "96:       check_prestep_state test.db $state",
          "97:       set rc [rbu step]",
          "",
          "[Removed Lines]",
          "89: proc do_rbu_vacuum_test {tn step} {",
          "90:   forcedelete state.db",
          "91:   uplevel [list do_test $tn.1 {",
          "92:     if {$step==0} { sqlite3rbu_vacuum rbu test.db state.db }",
          "94:       if {$step==1} { sqlite3rbu_vacuum rbu test.db state.db }",
          "",
          "[Added Lines]",
          "89: proc do_rbu_vacuum_test {tn step {statedb state.db}} {",
          "90:   forcedelete $statedb",
          "91:   if {$statedb==\"\" && $step==1} breakpoint",
          "92:   uplevel [list do_test $tn.1 [string map [list %state% $statedb] {",
          "93:     if {$step==0} { sqlite3rbu_vacuum rbu test.db {%state%}}",
          "95:       if {$step==1} { sqlite3rbu_vacuum rbu test.db {%state%}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:       if {$step==1} { rbu close }",
          "101:     }",
          "102:     rbu close",
          "105:   uplevel [list do_execsql_test $tn.2 {",
          "106:     PRAGMA integrity_check",
          "",
          "[Removed Lines]",
          "103:   } {SQLITE_DONE}]",
          "",
          "[Added Lines]",
          "104:   }] {SQLITE_DONE}]",
          "",
          "---------------"
        ],
        "ext/rbu/rbuvacuum2.test||ext/rbu/rbuvacuum2.test": [
          "File: ext/rbu/rbuvacuum2.test -> ext/rbu/rbuvacuum2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: source [file join [file dirname [info script]] rbu_common.tcl]",
          "22:   #-------------------------------------------------------------------------",
          "23:   # Test that a database that contains fts3 tables can be vacuumed.",
          "",
          "[Removed Lines]",
          "19: foreach step {0 1} {",
          "20:   set ::testprefix rbuvacuum2-$step",
          "",
          "[Added Lines]",
          "19: foreach {step} {0 1} {",
          "20: foreach {ttt state} {",
          "21:   s state.db t test.db-vacuum n {}",
          "22: } {",
          "23:   set ::testprefix rbuvacuum2-$step$ttt",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:       INSERT INTO t1 VALUES('fix this issue', 'at some point');",
          "30:     }",
          "34:     do_execsql_test 1.3 {",
          "35:       SELECT * FROM t1;",
          "",
          "[Removed Lines]",
          "32:     do_rbu_vacuum_test 1.2 $step",
          "",
          "[Added Lines]",
          "35:     do_rbu_vacuum_test 1.2 $step $state",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "46:       INSERT INTO t1 VALUES('a b c', 'x y z');",
          "47:     }",
          "50:     do_execsql_test 1.7 {",
          "51:       INSERT INTO t1(t1) VALUES('integrity-check');",
          "52:       SELECT * FROM t1;",
          "",
          "[Removed Lines]",
          "49:     do_rbu_vacuum_test 1.6 $step",
          "",
          "[Added Lines]",
          "52:     do_rbu_vacuum_test 1.6 $step $state",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "67:       INSERT INTO t1 VALUES('fix this issue', 'at some point');",
          "68:     }",
          "72:     do_execsql_test 2.3 {",
          "73:       SELECT * FROM t1;",
          "",
          "[Removed Lines]",
          "70:     do_rbu_vacuum_test 2.2 $step",
          "",
          "[Added Lines]",
          "73:     do_rbu_vacuum_test 2.2 $step $state",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "84:       INSERT INTO t1 VALUES('a b c', 'x y z');",
          "85:     }",
          "88:     do_execsql_test 2.7 {",
          "89:       INSERT INTO t1(t1) VALUES('integrity-check');",
          "90:       SELECT * FROM t1;",
          "",
          "[Removed Lines]",
          "87:     do_rbu_vacuum_test 2.6 $step",
          "",
          "[Added Lines]",
          "90:     do_rbu_vacuum_test 2.6 $step $state",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "107:       INSERT INTO rt VALUES(3, 55, 65);",
          "108:     }",
          "112:     do_execsql_test 3.3 {",
          "113:       SELECT * FROM rt;",
          "",
          "[Removed Lines]",
          "110:     do_rbu_vacuum_test 3.2 $step",
          "",
          "[Added Lines]",
          "113:     do_rbu_vacuum_test 3.2 $step $state",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "120:       SELECT rowid FROM rt WHERE x2>59 AND x1 < 59",
          "121:     } {2 3}",
          "125:     do_execsql_test 3.6.1 {",
          "126:       SELECT rowid FROM rt WHERE x2>51 AND x1 < 51",
          "",
          "[Removed Lines]",
          "123:     do_rbu_vacuum_test 3.5 $step",
          "",
          "[Added Lines]",
          "126:     do_rbu_vacuum_test 3.5 $step $state",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "147:     trigger tr1 t1 0 {CREATE TRIGGER tr1 AFTER INSERT ON t1 BEGIN SELECT 1; END}",
          "148:     }",
          "151:     do_execsql_test 4.4 {",
          "152:       SELECT * FROM sqlite_master;",
          "153:     } {",
          "",
          "[Removed Lines]",
          "150:     do_rbu_vacuum_test 4.3 $step",
          "",
          "[Added Lines]",
          "153:     do_rbu_vacuum_test 4.3 $step $state",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "157:     }",
          "158:   }",
          "159: }",
          "161: #-------------------------------------------------------------------------",
          "162: # Test that passing a NULL value as the second argument to",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "163: }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "231:   execsql { PRAGMA integrity_check }",
          "232: } {ok}",
          "234: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "238: do_test 6.4 {",
          "239:   sqlite3rbu_vacuum rbu test.db test.db-vactmp",
          "240:   list [catch { rbu close } msg] $msg",
          "241: } {1 SQLITE_MISUSE}",
          "",
          "---------------"
        ],
        "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c": [
          "File: ext/rbu/sqlite3rbu.c -> ext/rbu/sqlite3rbu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2477:         if( *zExtra=='\\0' ) zExtra = 0;",
          "2478:       }",
          "2481:           sqlite3_db_filename(p->dbRbu, \"main\"),",
          "2482:           (zExtra==0 ? \"\" : \"&\"), (zExtra==0 ? \"\" : zExtra)",
          "2483:       );",
          "",
          "[Removed Lines]",
          "2480:       zTarget = sqlite3_mprintf(\"file:%s-vacuum?rbu_memory=1%s%s\",",
          "",
          "[Added Lines]",
          "2480:       zTarget = sqlite3_mprintf(\"file:%s-vactmp?rbu_memory=1%s%s\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3743:   const char *zState",
          "3744: ){",
          "3745:   if( zTarget==0 ){ return rbuMisuseError(); }",
          "3747:   return openRbuHandle(0, zTarget, zState);",
          "3748: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3746:   if( zState ){",
          "3747:     int n = strlen(zState);",
          "3748:     if( n>=7 && 0==memcmp(\"-vactmp\", &zState[n-7], 7) ){",
          "3749:       return rbuMisuseError();",
          "3750:     }",
          "3751:   }",
          "",
          "---------------"
        ],
        "ext/rbu/sqlite3rbu.h||ext/rbu/sqlite3rbu.h": [
          "File: ext/rbu/sqlite3rbu.h -> ext/rbu/sqlite3rbu.h"
        ],
        "ext/rbu/test_rbu.c||ext/rbu/test_rbu.c": [
          "File: ext/rbu/test_rbu.c -> ext/rbu/test_rbu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "273:   zCmd = Tcl_GetString(objv[1]);",
          "274:   zTarget = Tcl_GetString(objv[2]);",
          "275:   if( objc==4 ) zStateDb = Tcl_GetString(objv[3]);",
          "277:   pRbu = sqlite3rbu_vacuum(zTarget, zStateDb);",
          "278:   Tcl_CreateObjCommand(interp, zCmd, test_sqlite3rbu_cmd, (ClientData)pRbu, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "276:   if( zStateDb && zStateDb[0]=='\\0' ) zStateDb = 0;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 77f150b8b46761f4f62f9d8926c10a95a70589a4525393fc16b321bd98c083a7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f09a14fbc34a130a9508707e435e24318ae07364",
      "candidate_info": {
        "commit_hash": "f09a14fbc34a130a9508707e435e24318ae07364",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f09a14fbc34a130a9508707e435e24318ae07364",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/delete.c",
          "src/fkey.c",
          "test/gencol1.test"
        ],
        "message": "Add missing column translations to foreign key logic. Ticket [c28a01da72f8957c]\n\nFossilOrigin-Name: bc6a43e7ee6353b9ef3dea4309c77e170a1c798eefcfaa7636bf5a93e51c47ee",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/delete.c||src/delete.c",
          "src/fkey.c||src/fkey.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cc6a40818387f78f89499f09e3f1c4655c7396af1cba2596c7fb2f23f3e9755f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/delete.c||src/delete.c": [
          "File: src/delete.c -> src/delete.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "737:       testcase( mask!=0xffffffff && iCol==31 );",
          "738:       testcase( mask!=0xffffffff && iCol==32 );",
          "739:       if( mask==0xffffffff || (iCol<=31 && (mask & MASKBIT32(iCol))!=0) ){",
          "741:       }",
          "742:     }",
          "",
          "[Removed Lines]",
          "740:         sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, iCol, iOld+iCol+1);",
          "",
          "[Added Lines]",
          "740:         int kk = sqlite3TableColumnToStorage(pTab, iCol);",
          "741:         sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, iCol, iOld+kk+1);",
          "",
          "---------------"
        ],
        "src/fkey.c||src/fkey.c": [
          "File: src/fkey.c -> src/fkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "483:   if( pExpr ){",
          "484:     if( iCol>=0 && iCol!=pTab->iPKey ){",
          "485:       pCol = &pTab->aCol[iCol];",
          "487:       pExpr->affExpr = pCol->affinity;",
          "488:       zColl = pCol->zColl;",
          "489:       if( zColl==0 ) zColl = db->pDfltColl->zName;",
          "",
          "[Removed Lines]",
          "486:       pExpr->iTable = regBase + iCol + 1;",
          "",
          "[Added Lines]",
          "486:       pExpr->iTable = regBase + sqlite3TableColumnToStorage(pTab,iCol) + 1;",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "159:   UPDATE t0 SET c1 = c0, c3 = c0+1;",
          "160: } {1 {FOREIGN KEY constraint failed}}",
          "162: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "162: # 2019-11-01 ticket c28a01da72f8957c",
          "163: db close",
          "164: sqlite3 db :memory:",
          "165: do_execsql_test gencol1-4.100 {",
          "166:   CREATE TABLE t0 (",
          "167:     c0,",
          "168:     c1 a UNIQUE AS (1),",
          "169:     c2,",
          "170:     c3 REFERENCES t0(c1)",
          "171:   );",
          "172:   PRAGMA foreign_keys = true;",
          "173:   INSERT INTO t0(c0,c2,c3) VALUES(0,0,1);",
          "174: } {}",
          "175: do_catchsql_test gencol1-4.110 {",
          "176:   REPLACE INTO t0(c0,c2,c3) VALUES(0,0,0),(0,0,0);",
          "177: } {1 {FOREIGN KEY constraint failed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "81f7b372700d7595f486d364a26304b052eda55a",
      "candidate_info": {
        "commit_hash": "81f7b372700d7595f486d364a26304b052eda55a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/81f7b372700d7595f486d364a26304b052eda55a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/delete.c",
          "src/expr.c",
          "src/parse.y",
          "src/pragma.c",
          "src/resolve.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/update.c",
          "src/wherecode.c",
          "tool/mkkeywordhash.c"
        ],
        "message": "Initial experimental code for generated column support.  Non-functional.\n\nFossilOrigin-Name: 11d472c1df707b8d03ec57d8fc582a34f5eb89a9d02a154a9871650c65065b45",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/delete.c||src/delete.c",
          "src/expr.c||src/expr.c",
          "src/parse.y||src/parse.y",
          "src/pragma.c||src/pragma.c",
          "src/resolve.c||src/resolve.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/update.c||src/update.c",
          "src/wherecode.c||src/wherecode.c",
          "tool/mkkeywordhash.c||tool/mkkeywordhash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7248e3476511ecd317f54edcfe1e87443bfdcc1b10c89c7734eefcabafec6c0b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "888:   return -1;",
          "889: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "891: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "900: i16 sqlite3ColumnOfTable(Table *pTab, i16 iCol){",
          "901:   int i;",
          "902:   i16 n;",
          "903:   assert( iCol<pTab->nCol );",
          "904:   if( pTab->nVCol==0 ) return iCol;",
          "905:   for(i=0, n=0; i<iCol; i++){",
          "906:     if( (pTab->aCol[i].colFlags & COLFLAG_VIRTUAL)==0 ) n++;",
          "907:   }",
          "908:   return n;",
          "909: }",
          "910: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1520:   }",
          "1521: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1547: void sqlite3AddGenerated(Parse *pParse, Expr *pExpr, Token *pType){",
          "1548: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "1549:   u8 eType = COLFLAG_VIRTUAL;",
          "1550:   Table *pTab = pParse->pNewTable;",
          "1551:   Column *pCol;",
          "1552:   if( IN_RENAME_OBJECT ){",
          "1553:     sqlite3RenameExprUnmap(pParse, pExpr);",
          "1554:   }",
          "1555:   if( pTab==0 ) goto generated_done;",
          "1556:   pCol = &(pTab->aCol[pTab->nCol-1]);",
          "1557:   if( pCol->pDflt ) goto generated_error;",
          "1558:   if( pType ){",
          "1559:     if( pType->n==7 && sqlite3StrNICmp(\"virtual\",pType->z,7)==0 ){",
          "1561:     }else if( pType->n==6 && sqlite3StrNICmp(\"stored\",pType->z,6)==0 ){",
          "1562:       eType = COLFLAG_STORED;",
          "1563:     }else{",
          "1564:       goto generated_error;",
          "1565:     }",
          "1566:   }",
          "1567:   pTab->nVCol++;",
          "1568:   pCol->colFlags |= eType;",
          "1569:   pCol->pDflt = sqlite3ExprDup(pParse->db, pExpr, 0);",
          "1570:   goto generated_done;",
          "1572: generated_error:",
          "1573:   sqlite3ErrorMsg(pParse, \"bad GENERATED ALWAYS AS clause on column \\\"%s\\\"\",",
          "1574:                   pCol->zName);",
          "1575: generated_done:",
          "1576:   sqlite3ExprDelete(pParse->db, pExpr);",
          "1577: #else",
          "1580:   sqlite3ErrorMsg(pParse, \"GENERATED ALWAYS AS not supported\");",
          "1581:   sqlite3ExprDelete(pParse->db, pExpr);",
          "1582: #endif",
          "1583: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2114:     sqlite3ResolveSelfReference(pParse, p, NC_IsCheck, 0, p->pCheck);",
          "2115:   }",
          "2119:   estimateTableWidth(p);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2179: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "2180:   if( p->nVCol ){",
          "2181:     int ii;",
          "2182:     for(ii=0; ii<p->nCol; ii++){",
          "2183:       if( (p->aCol[ii].colFlags & (COLFLAG_STORED|COLFLAG_VIRTUAL))!=0 ){",
          "2184:         sqlite3ResolveSelfReference(pParse, p, NC_GenCol,",
          "2185:                                     p->aCol[ii].pDflt, 0);",
          "2186:       }",
          "2187:     }",
          "2188:   }",
          "2189: #endif",
          "",
          "---------------"
        ],
        "src/delete.c||src/delete.c": [
          "File: src/delete.c -> src/delete.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "475:     if( pPk ){",
          "476:       for(i=0; i<nPk; i++){",
          "477:         assert( pPk->aiColumn[i]>=0 );",
          "479:                                         pPk->aiColumn[i], iPk+i);",
          "480:       }",
          "481:       iKey = iPk;",
          "482:     }else{",
          "483:       iKey = ++pParse->nMem;",
          "485:     }",
          "487:     if( eOnePass!=ONEPASS_OFF ){",
          "",
          "[Removed Lines]",
          "478:         sqlite3ExprCodeGetColumnOfTable(v, pTab, iTabCur,",
          "484:       sqlite3ExprCodeGetColumnOfTable(v, pTab, iTabCur, -1, iKey);",
          "",
          "[Added Lines]",
          "478:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iTabCur,",
          "484:       sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iTabCur, -1, iKey);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "737:       testcase( mask!=0xffffffff && iCol==31 );",
          "738:       testcase( mask!=0xffffffff && iCol==32 );",
          "739:       if( mask==0xffffffff || (iCol<=31 && (mask & MASKBIT32(iCol))!=0) ){",
          "741:       }",
          "742:     }",
          "",
          "[Removed Lines]",
          "740:         sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, iCol, iOld+iCol+1);",
          "",
          "[Added Lines]",
          "740:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, iCol,",
          "741:                                         iOld+iCol+1);",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3365:     sqlite3ExprCodeCopy(pParse, pIdx->aColExpr->a[iIdxCol].pExpr, regOut);",
          "3366:     pParse->iSelfTab = 0;",
          "3367:   }else{",
          "3369:                                     iTabCol, regOut);",
          "3370:   }",
          "3371: }",
          "",
          "[Removed Lines]",
          "3368:     sqlite3ExprCodeGetColumnOfTable(pParse->pVdbe, pIdx->pTable, iTabCur,",
          "",
          "[Added Lines]",
          "3368:     sqlite3ExprCodeGetColumnOfTable(pParse, pIdx->pTable, iTabCur,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3376: void sqlite3ExprCodeGetColumnOfTable(",
          "3382: ){",
          "3383:   if( pTab==0 ){",
          "3384:     sqlite3VdbeAddOp3(v, OP_Column, iTabCur, iCol, regOut);",
          "3385:     return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3383:   Vdbe *v = pParse->pVdbe;",
          "3384:   assert( v!=0 );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3387:   if( iCol<0 || iCol==pTab->iPKey ){",
          "3388:     sqlite3VdbeAddOp2(v, OP_Rowid, iTabCur, regOut);",
          "3389:   }else{",
          "3393:       x = sqlite3ColumnOfIndex(sqlite3PrimaryKeyIndex(pTab), iCol);",
          "3394:     }",
          "3395:     sqlite3VdbeAddOp3(v, op, iTabCur, x, regOut);",
          "3396:   }",
          "",
          "[Removed Lines]",
          "3390:     int op = IsVirtual(pTab) ? OP_VColumn : OP_Column;",
          "3391:     int x = iCol;",
          "3392:     if( !HasRowid(pTab) && !IsVirtual(pTab) ){",
          "",
          "[Added Lines]",
          "3392:     int op;",
          "3393:     int x;",
          "3394:     if( IsVirtual(pTab) ){",
          "3395:       op = OP_VColumn;",
          "3396:       x = iCol;",
          "3397: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "3398:     }else if( pTab->aCol[iCol].colFlags & COLFLAG_VIRTUAL ){",
          "3399:       int savedSelfTab = pParse->iSelfTab;",
          "3400:       pParse->iSelfTab = iTabCur+1;",
          "3401:       sqlite3ExprCode(pParse, pTab->aCol[iCol].pDflt, iCol);",
          "3402:       pParse->iSelfTab = savedSelfTab;",
          "3403:       return;",
          "3404: #endif",
          "3405:     }else if( !HasRowid(pTab) ){",
          "3407:       op = OP_Column;",
          "3408:     }else{",
          "3409:       x = sqlite3ColumnOfTable(pTab,iCol);",
          "3410:       op = OP_Column;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3416: ){",
          "3420:   if( p5 ){",
          "3422:   }",
          "3423:   return iReg;",
          "3424: }",
          "",
          "[Removed Lines]",
          "3417:   Vdbe *v = pParse->pVdbe;",
          "3418:   assert( v!=0 );",
          "3419:   sqlite3ExprCodeGetColumnOfTable(v, pTab, iTable, iColumn, iReg);",
          "3421:     sqlite3VdbeChangeP5(v, p5);",
          "",
          "[Added Lines]",
          "3434:   assert( pParse->pVdbe!=0 );",
          "3435:   sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iTable, iColumn, iReg);",
          "3437:     sqlite3VdbeChangeP5(pParse->pVdbe, p5);",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "347:                                  {sqlite3CreateForeignKey(pParse,0,&T,TA,R);}",
          "348: ccons ::= defer_subclause(D).    {sqlite3DeferForeignKey(pParse,D);}",
          "349: ccons ::= COLLATE ids(C).        {sqlite3AddCollateType(pParse, &C);}",
          "352: %type autoinc {int}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "350: ccons ::= GENERATED ALWAYS AS generated.",
          "351: ccons ::= AS generated.",
          "352: generated ::= LP expr(E) RP.",
          "353:      {sqlite3AddGenerated(pParse,E,0);}",
          "354: generated ::= LP expr(E) RP ID(TYPE).",
          "355:      {sqlite3AddGenerated(pParse,E,&TYPE);}",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1399:         for(j=0; j<pFK->nCol; j++){",
          "1400:           int iCol = aiCols ? aiCols[j] : pFK->aCol[j].iFrom;",
          "1402:           sqlite3VdbeAddOp2(v, OP_IsNull, regRow+j, addrOk); VdbeCoverage(v);",
          "1403:         }",
          "",
          "[Removed Lines]",
          "1401:           sqlite3ExprCodeGetColumnOfTable(v, pTab, 0, iCol, regRow+j);",
          "",
          "[Added Lines]",
          "1401:           sqlite3ExprCodeGetColumnOfTable(pParse, pTab, 0, iCol, regRow+j);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1586:           int jmp2;",
          "1587:           if( j==pTab->iPKey ) continue;",
          "1588:           if( pTab->aCol[j].notNull==0 ) continue;",
          "1590:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
          "1591:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
          "1592:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
          "",
          "[Removed Lines]",
          "1589:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
          "",
          "[Added Lines]",
          "1589:           sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, j, 3);",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "414:     if( cnt==0",
          "415:      && cntTab==1",
          "416:      && pMatch",
          "418:      && sqlite3IsRowid(zCol)",
          "419:      && VisibleRowid(pMatch->pTab)",
          "420:     ){",
          "",
          "[Removed Lines]",
          "417:      && (pNC->ncFlags & NC_IdxExpr)==0",
          "",
          "[Added Lines]",
          "417:      && (pNC->ncFlags & (NC_IdxExpr|NC_GenCol))==0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "627: ){",
          "629:   if( (pNC->ncFlags & validMask)!=0 ){",
          "630:     const char *zIn = \"partial index WHERE clauses\";",
          "631:     if( pNC->ncFlags & NC_IdxExpr )      zIn = \"index expressions\";",
          "632: #ifndef SQLITE_OMIT_CHECK",
          "633:     else if( pNC->ncFlags & NC_IsCheck ) zIn = \"CHECK constraints\";",
          "634: #endif",
          "635:     sqlite3ErrorMsg(pParse, \"%s prohibited in %s\", zMsg, zIn);",
          "636:   }",
          "",
          "[Removed Lines]",
          "628:   assert( (validMask&~(NC_IsCheck|NC_PartIdx|NC_IdxExpr))==0 );",
          "",
          "[Added Lines]",
          "628:   assert( (validMask&~(NC_IsCheck|NC_PartIdx|NC_IdxExpr|NC_GenCol))==0 );",
          "634: #endif",
          "635: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "636:     else if( pNC->ncFlags & NC_GenCol ) zIn = \"GENERATED ALWAYS AS columns\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "723:         zColumn = pExpr->u.zToken;",
          "724:       }else{",
          "725:         Expr *pLeft = pExpr->pLeft;",
          "727:         pRight = pExpr->pRight;",
          "728:         if( pRight->op==TK_ID ){",
          "729:           zDb = 0;",
          "",
          "[Removed Lines]",
          "726:         notValid(pParse, pNC, \"the \\\".\\\" operator\", NC_IdxExpr);",
          "",
          "[Added Lines]",
          "729:         notValid(pParse, pNC, \"the \\\".\\\" operator\", NC_IdxExpr|NC_GenCol);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "822:           notValid(pParse, pNC, \"non-deterministic functions\",",
          "824:         }",
          "825:         if( (pDef->funcFlags & SQLITE_FUNC_INTERNAL)!=0",
          "826:          && pParse->nested==0",
          "",
          "[Removed Lines]",
          "823:                    NC_IdxExpr|NC_PartIdx);",
          "",
          "[Added Lines]",
          "826:                    NC_IdxExpr|NC_PartIdx|NC_GenCol);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "964:       testcase( pExpr->op==TK_IN );",
          "965:       if( ExprHasProperty(pExpr, EP_xIsSelect) ){",
          "966:         int nRef = pNC->nRef;",
          "968:         sqlite3WalkSelect(pWalker, pExpr->x.pSelect);",
          "969:         assert( pNC->nRef>=nRef );",
          "970:         if( nRef!=pNC->nRef ){",
          "",
          "[Removed Lines]",
          "967:         notValid(pParse, pNC, \"subqueries\", NC_IsCheck|NC_PartIdx|NC_IdxExpr);",
          "",
          "[Added Lines]",
          "970:         notValid(pParse, pNC, \"subqueries\",",
          "971:                  NC_IsCheck|NC_PartIdx|NC_IdxExpr|NC_GenCol);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "975:       break;",
          "976:     }",
          "977:     case TK_VARIABLE: {",
          "979:       break;",
          "980:     }",
          "981:     case TK_IS:",
          "",
          "[Removed Lines]",
          "978:       notValid(pParse, pNC, \"parameters\", NC_IsCheck|NC_PartIdx|NC_IdxExpr);",
          "",
          "[Added Lines]",
          "982:       notValid(pParse, pNC, \"parameters\",",
          "983:                NC_IsCheck|NC_PartIdx|NC_IdxExpr|NC_GenCol);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1798: int sqlite3ResolveSelfReference(",
          "1804: ){",
          "1807:   int rc;",
          "1809:   assert( type==0 || pTab!=0 );",
          "1811:   memset(&sNC, 0, sizeof(sNC));",
          "1812:   memset(&sSrc, 0, sizeof(sSrc));",
          "1813:   if( pTab ){",
          "",
          "[Removed Lines]",
          "1810:   assert( type==NC_IsCheck || type==NC_PartIdx || type==NC_IdxExpr || pTab==0 );",
          "",
          "[Added Lines]",
          "1816:   assert( type==NC_IsCheck || type==NC_PartIdx || type==NC_IdxExpr",
          "1817:           || type==NC_GenCol || pTab==0 );",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6417:           struct AggInfo_col *pCol = &sAggInfo.aCol[i];",
          "6418:           if( pCol->iSorterColumn>=j ){",
          "6419:             int r1 = j + regBase;",
          "6421:                                pCol->pTab, pCol->iTable, pCol->iColumn, r1);",
          "6422:             j++;",
          "6423:           }",
          "",
          "[Removed Lines]",
          "6420:             sqlite3ExprCodeGetColumnOfTable(v,",
          "",
          "[Added Lines]",
          "6420:             sqlite3ExprCodeGetColumnOfTable(pParse,",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3938: void sqlite3OpenMasterTable(Parse *, int);",
          "3939: Index *sqlite3PrimaryKeyIndex(Table*);",
          "3940: i16 sqlite3ColumnOfIndex(Index*, i16);",
          "3941: void sqlite3StartTable(Parse*,Token*,Token*,int,int,int,int);",
          "3942: #if SQLITE_ENABLE_HIDDEN_COLUMNS",
          "3943:   void sqlite3ColumnPropertiesFromName(Table*, Column*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3945: #ifdef SQLITE_OMIT_GENERATED_COLUMNS",
          "3947: #else",
          "3948:   i16 sqlite3ColumnOfTable(Table*, i16);",
          "3949: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3950: void sqlite3AddCheckConstraint(Parse*, Expr*);",
          "3951: void sqlite3AddDefaultValue(Parse*,Expr*,const char*,const char*);",
          "3952: void sqlite3AddCollateType(Parse*, Token*);",
          "3953: void sqlite3EndTable(Parse*,Token*,Token*,u8,Select*);",
          "3954: int sqlite3ParseUri(const char*,const char*,unsigned int*,",
          "3955:                     sqlite3_vfs**,char**,char **);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3962: void sqlite3AddGenerated(Parse*,Expr*,Token*);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4054: void sqlite3ExprCodeLoadIndexColumn(Parse*, Index*, int, int, int);",
          "4055: int sqlite3ExprCodeGetColumn(Parse*, Table*, int, int, int, u8);",
          "4057: void sqlite3ExprCodeMove(Parse*, int, int, int);",
          "4058: void sqlite3ExprCode(Parse*, Expr*, int);",
          "4059: void sqlite3ExprCodeCopy(Parse*, Expr*, int);",
          "",
          "[Removed Lines]",
          "4056: void sqlite3ExprCodeGetColumnOfTable(Vdbe*, Table*, int, int, int);",
          "",
          "[Added Lines]",
          "4066: void sqlite3ExprCodeGetColumnOfTable(Parse*, Table*, int, int, int);",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "543:     for(i=0; i<nPk; i++){",
          "544:       assert( pPk->aiColumn[i]>=0 );",
          "546:     }",
          "547:     if( eOnePass ){",
          "548:       if( addrOpen ) sqlite3VdbeChangeToNoop(v, addrOpen);",
          "",
          "[Removed Lines]",
          "545:       sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur,pPk->aiColumn[i],iPk+i);",
          "",
          "[Added Lines]",
          "545:       sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur,",
          "546:                                       pPk->aiColumn[i], iPk+i);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "628:        || (pTab->aCol[i].colFlags & COLFLAG_PRIMKEY)!=0",
          "629:       ){",
          "630:         testcase(  oldmask!=0xffffffff && i==31 );",
          "632:       }else{",
          "633:         sqlite3VdbeAddOp2(v, OP_Null, 0, regOld+i);",
          "634:       }",
          "",
          "[Removed Lines]",
          "631:         sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, i, regOld+i);",
          "",
          "[Added Lines]",
          "632:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, regOld+i);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "670:         testcase( i==31 );",
          "671:         testcase( i==32 );",
          "673:       }else{",
          "674:         sqlite3VdbeAddOp2(v, OP_Null, 0, regNew+i);",
          "675:       }",
          "",
          "[Removed Lines]",
          "672:         sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, i, regNew+i);",
          "",
          "[Added Lines]",
          "673:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, regNew+i);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "710:     for(i=0; i<pTab->nCol; i++){",
          "711:       if( aXRef[i]<0 && i!=pTab->iPKey ){",
          "713:       }",
          "714:     }",
          "715:   }",
          "",
          "[Removed Lines]",
          "712:         sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, i, regNew+i);",
          "",
          "[Added Lines]",
          "713:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, regNew+i);",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2072:           if( (pWInfo->wctrlFlags & WHERE_DUPLICATES_OK)==0 ){",
          "2073:             int iSet = ((ii==pOrWc->nTerm-1)?-1:ii);",
          "2074:             if( HasRowid(pTab) ){",
          "2076:               jmp1 = sqlite3VdbeAddOp4Int(v, OP_RowSetTest, regRowset, 0,",
          "2077:                                           regRowid, iSet);",
          "2078:               VdbeCoverage(v);",
          "",
          "[Removed Lines]",
          "2075:               sqlite3ExprCodeGetColumnOfTable(v, pTab, iCur, -1, regRowid);",
          "",
          "[Added Lines]",
          "2075:               sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iCur, -1, regRowid);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2086:               r = sqlite3GetTempRange(pParse, nPk);",
          "2087:               for(iPk=0; iPk<nPk; iPk++){",
          "2088:                 int iCol = pPk->aiColumn[iPk];",
          "2090:               }",
          "",
          "[Removed Lines]",
          "2089:                 sqlite3ExprCodeGetColumnOfTable(v, pTab, iCur, iCol, r+iPk);",
          "",
          "[Added Lines]",
          "2089:                 sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iCur, iCol,r+iPk);",
          "",
          "---------------"
        ],
        "tool/mkkeywordhash.c||tool/mkkeywordhash.c": [
          "File: tool/mkkeywordhash.c -> tool/mkkeywordhash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "164:   { \"AFTER\",            \"TK_AFTER\",        TRIGGER                },",
          "165:   { \"ALL\",              \"TK_ALL\",          ALWAYS                 },",
          "166:   { \"ALTER\",            \"TK_ALTER\",        ALTER                  },",
          "167:   { \"ANALYZE\",          \"TK_ANALYZE\",      ANALYZE                },",
          "168:   { \"AND\",              \"TK_AND\",          ALWAYS                 },",
          "169:   { \"AS\",               \"TK_AS\",           ALWAYS                 },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:   { \"ALWAYS\",           \"TK_ALWAYS\",       ALWAYS                 },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "216:   { \"FOREIGN\",          \"TK_FOREIGN\",      FKEY                   },",
          "217:   { \"FROM\",             \"TK_FROM\",         ALWAYS                 },",
          "218:   { \"FULL\",             \"TK_JOIN_KW\",      ALWAYS                 },",
          "219:   { \"GLOB\",             \"TK_LIKE_KW\",      ALWAYS                 },",
          "220:   { \"GROUP\",            \"TK_GROUP\",        ALWAYS                 },",
          "221:   { \"GROUPS\",           \"TK_GROUPS\",       WINDOWFUNC             },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "220:   { \"GENERATED\",        \"TK_GENERATED\",    ALWAYS                 },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "26505e5f51d77a36c99bb9929b59856522d43f7f",
      "candidate_info": {
        "commit_hash": "26505e5f51d77a36c99bb9929b59856522d43f7f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/26505e5f51d77a36c99bb9929b59856522d43f7f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pager.c",
          "src/pcache1.c"
        ],
        "message": "Follow-up to [0bf0fd242b93c3bd30]: only reset the pager when adding a new codec, not when overwriting an existing codec.  Also, improve a comment in the pcache1 subsystem.\n\nFossilOrigin-Name: 5c040fdb013d178e5dffa300621eab91b92beb085ffb9ef2ba08f6bf1dd4013e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pager.c||src/pager.c",
          "src/pcache1.c||src/pcache1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7b510f59fd2cf68331c35ef6b4c2bcf092adf1120ea22be74d1bab1f42a171f5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7032:   void (*xCodecFree)(void*),",
          "7033:   void *pCodec",
          "7034: ){",
          "7037:   pPager->xCodec = pPager->memDb ? 0 : xCodec;",
          "7038:   pPager->xCodecSizeChng = xCodecSizeChng;",
          "7039:   pPager->xCodecFree = xCodecFree;",
          "",
          "[Removed Lines]",
          "7035:   pager_reset(pPager);",
          "7036:   if( pPager->xCodecFree ) pPager->xCodecFree(pPager->pCodec);",
          "",
          "[Added Lines]",
          "7035:   if( pPager->xCodecFree ){",
          "7036:     pPager->xCodecFree(pPager->pCodec);",
          "7037:   }else{",
          "7038:     pager_reset(pPager);",
          "7039:   }",
          "",
          "---------------"
        ],
        "src/pcache1.c||src/pcache1.c": [
          "File: src/pcache1.c -> src/pcache1.c"
        ]
      }
    },
    {
      "candidate_hash": "cfc078318cc39ab2f98369a1be8fdc221ea63851",
      "candidate_info": {
        "commit_hash": "cfc078318cc39ab2f98369a1be8fdc221ea63851",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cfc078318cc39ab2f98369a1be8fdc221ea63851",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeapi.c"
        ],
        "message": "Small performance improvement in sqlite3_step().\n\nFossilOrigin-Name: d1db8d5894450b24bb0335983503d9bbf6cc48a0ae4b83291283fb2d32b6b25b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeapi.c||src/vdbeapi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1dc0c3df32572f09265fc73eeaa0748159e0e9523b9b2d6768b834a29c909968",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeapi.c||src/vdbeapi.c": [
          "File: src/vdbeapi.c -> src/vdbeapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "585:     return SQLITE_NOMEM_BKPT;",
          "586:   }",
          "589:     p->rc = SQLITE_SCHEMA;",
          "590:     rc = SQLITE_ERROR;",
          "591:     goto end_of_step;",
          "",
          "[Removed Lines]",
          "588:   if( p->pc<=0 && p->expired ){",
          "",
          "[Added Lines]",
          "588:   if( p->pc<0 && p->expired ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "662:        || (rc&0xff)==SQLITE_BUSY || rc==SQLITE_MISUSE",
          "663:   );",
          "664:   assert( (p->rc!=SQLITE_ROW && p->rc!=SQLITE_DONE) || p->rc==p->rcApp );",
          "668:   ){",
          "",
          "[Removed Lines]",
          "665:   if( (p->prepFlags & SQLITE_PREPARE_SAVESQL)!=0",
          "666:    && rc!=SQLITE_ROW",
          "667:    && rc!=SQLITE_DONE",
          "",
          "[Added Lines]",
          "665:   if( rc!=SQLITE_ROW",
          "666:    && rc!=SQLITE_DONE",
          "667:    && (p->prepFlags & SQLITE_PREPARE_SAVESQL)!=0",
          "",
          "---------------"
        ]
      }
    }
  ]
}