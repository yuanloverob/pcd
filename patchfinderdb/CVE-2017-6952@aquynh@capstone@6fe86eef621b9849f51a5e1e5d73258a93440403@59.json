{
  "cve_id": "CVE-2017-6952",
  "cve_desc": "Integer overflow in the cs_winkernel_malloc function in winkernel_mm.c in Capstone 3.0.4 and earlier allows attackers to cause a denial of service (heap-based buffer overflow in a kernel driver) or possibly have unspecified other impact via a large value.",
  "repo": "aquynh/capstone",
  "patch_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
  "patch_info": {
    "commit_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/6fe86eef621b9849f51a5e1e5d73258a93440403",
    "files": [
      "windows/winkernel_mm.c"
    ],
    "message": "provide a validity check to prevent against Integer overflow conditions (#870)\n\n* provide a validity check to prevent against Integer overflow conditions\n\n* fix some style issues.",
    "before_after_code_files": [
      "windows/winkernel_mm.c||windows/winkernel_mm.c"
    ]
  },
  "patch_diff": {
    "windows/winkernel_mm.c||windows/winkernel_mm.c": [
      "File: windows/winkernel_mm.c -> windows/winkernel_mm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: #include \"winkernel_mm.h\"",
      "5: #include <ntddk.h>",
      "8: static const ULONG CS_WINKERNEL_POOL_TAG = 'kwsC';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: #include <Ntintsafe.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "35: #pragma prefast(suppress : 30030)  // Allocating executable POOL_TYPE memory",
      "38:  if (!block) {",
      "39:   return NULL;",
      "40:  }",
      "",
      "[Removed Lines]",
      "36:  CS_WINKERNEL_MEMBLOCK *block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "37:    NonPagedPool, size + sizeof(CS_WINKERNEL_MEMBLOCK), CS_WINKERNEL_POOL_TAG);",
      "",
      "[Added Lines]",
      "37:  size_t number_of_bytes = 0;",
      "38:  CS_WINKERNEL_MEMBLOCK *block = NULL;",
      "42:  if (!NT_SUCCESS(RtlSizeTAdd(size, sizeof(CS_WINKERNEL_MEMBLOCK), &number_of_bytes))) {",
      "43:   return NULL;",
      "44:  }",
      "45:  block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "46:    NonPagedPool, number_of_bytes, CS_WINKERNEL_POOL_TAG);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2c1c1b1af421f4ddd53eb902301f59c2cba5f288",
      "candidate_info": {
        "commit_hash": "2c1c1b1af421f4ddd53eb902301f59c2cba5f288",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/2c1c1b1af421f4ddd53eb902301f59c2cba5f288",
        "files": [
          "arch/X86/X86IntelInstPrinter.c"
        ],
        "message": "Fix assigned value with undefined (#893)",
        "before_after_code_files": [
          "arch/X86/X86IntelInstPrinter.c||arch/X86/X86IntelInstPrinter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/X86/X86IntelInstPrinter.c||arch/X86/X86IntelInstPrinter.c": [
          "File: arch/X86/X86IntelInstPrinter.c -> arch/X86/X86IntelInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "733:  reg = X86_insn_reg_intel(MCInst_getOpcode(MI), &access1);",
          "734:  if (MI->csh->detail) {",
          "735: #ifndef CAPSTONE_DIET",
          "737: #endif",
          "",
          "[Removed Lines]",
          "736:   uint8_t access[6];",
          "",
          "[Added Lines]",
          "736:   uint8_t access[6] = {0};",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "969f78466070622c88ec8f610bea08d99d6408da",
      "candidate_info": {
        "commit_hash": "969f78466070622c88ec8f610bea08d99d6408da",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/969f78466070622c88ec8f610bea08d99d6408da",
        "files": [
          "include/capstone/arm.h"
        ],
        "message": "arm: change data type of cs_arm_op.reg back to int because this field can also take arm_sysreg value",
        "before_after_code_files": [
          "include/capstone/arm.h||include/capstone/arm.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/capstone/arm.h||include/capstone/arm.h": [
          "File: include/capstone/arm.h -> include/capstone/arm.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "398:  arm_op_type type; // operand type",
          "400:  union {",
          "402:   int32_t imm;   // immediate value for C-IMM, P-IMM or IMM operand",
          "403:   double fp;   // floating point value for FP operand",
          "404:   arm_op_mem mem;  // base/index/scale/disp value for MEM operand",
          "",
          "[Removed Lines]",
          "401:   arm_reg reg; // register value for REG/SYSREG operand",
          "",
          "[Added Lines]",
          "401:   int reg; // register value for REG/SYSREG operand",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4015dfa619577e129d54eb6dc795cbff8163f460",
      "candidate_info": {
        "commit_hash": "4015dfa619577e129d54eb6dc795cbff8163f460",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/4015dfa619577e129d54eb6dc795cbff8163f460",
        "files": [
          "arch/X86/X86Mapping.c"
        ],
        "message": "Add X86_REG_EFLAGS for X86_STC and X86_STD for full x86 instructions \u2026 (#800)\n\n* Add X86_REG_EFLAGS for X86_STC and X86_STD for full x86 instructions ; Add X86_REG_EFLAGS for X86_CLD, X86_CMC for reduce and full x86 instructions\n\n* Add trailing zero for regs write in X86_CLC ; X86_CLD ; X86_CMC",
        "before_after_code_files": [
          "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
          "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4040:  {",
          "4041:   X86_CLC, X86_INS_CLC,",
          "4042: #ifndef CAPSTONE_DIET",
          "4044: #endif",
          "4045:  },",
          "4046:  {",
          "4047:   X86_CLD, X86_INS_CLD,",
          "4048: #ifndef CAPSTONE_DIET",
          "4050: #endif",
          "4051:  },",
          "4052:  {",
          "",
          "[Removed Lines]",
          "4043:   { 0 }, { 0 }, { 0 }, 0, 0",
          "4049:   { 0 }, { 0 }, { 0 }, 0, 0",
          "",
          "[Added Lines]",
          "4043:   { 0 }, { X86_REG_EFLAGS, 0 }, { 0 }, 0, 0",
          "4049:   { 0 }, { X86_REG_EFLAGS, 0 }, { 0 }, 0, 0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4076:  {",
          "4077:   X86_CMC, X86_INS_CMC,",
          "4078: #ifndef CAPSTONE_DIET",
          "4080: #endif",
          "4081:  },",
          "4082:  {",
          "",
          "[Removed Lines]",
          "4079:   { 0 }, { 0 }, { 0 }, 0, 0",
          "",
          "[Added Lines]",
          "4079:   { 0 }, { X86_REG_EFLAGS, 0 }, { 0 }, 0, 0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "17036:  {",
          "17037:   X86_STC, X86_INS_STC,",
          "17038: #ifndef CAPSTONE_DIET",
          "17040: #endif",
          "17041:  },",
          "17042:  {",
          "17043:   X86_STD, X86_INS_STD,",
          "17044: #ifndef CAPSTONE_DIET",
          "17046: #endif",
          "17047:  },",
          "17048:  {",
          "",
          "[Removed Lines]",
          "17039:   { 0 }, { 0 }, { 0 }, 0, 0",
          "17045:   { 0 }, { 0 }, { 0 }, 0, 0",
          "",
          "[Added Lines]",
          "17039:   { 0 }, { X86_REG_EFLAGS, 0 }, { 0 }, 0, 0",
          "17045:   { 0 }, { X86_REG_EFLAGS, 0 }, { 0 }, 0, 0",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "39283:  {",
          "39284:   X86_CLC, X86_INS_CLC,",
          "39285: #ifndef CAPSTONE_DIET",
          "39287: #endif",
          "39288:  },",
          "39289:  {",
          "39290:   X86_CLD, X86_INS_CLD,",
          "39291: #ifndef CAPSTONE_DIET",
          "39293: #endif",
          "39294:  },",
          "39295:  {",
          "",
          "[Removed Lines]",
          "39286:   { 0 }, { 0 }, { 0 }, 0, 0",
          "39292:   { 0 }, { 0 }, { 0 }, 0, 0",
          "",
          "[Added Lines]",
          "39286:   { 0 }, { X86_REG_EFLAGS, 0 }, { 0 }, 0, 0",
          "39292:   { 0 }, { X86_REG_EFLAGS, 0 }, { 0 }, 0, 0",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "39313:  {",
          "39314:   X86_CMC, X86_INS_CMC,",
          "39315: #ifndef CAPSTONE_DIET",
          "39317: #endif",
          "39318:  },",
          "39319:  {",
          "",
          "[Removed Lines]",
          "39316:   { 0 }, { 0 }, { 0 }, 0, 0",
          "",
          "[Added Lines]",
          "39316:   { 0 }, { X86_REG_EFLAGS, 0 }, { 0 }, 0, 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9325590b13e7dd315bb7eaba7fbeadbfe30d936b",
      "candidate_info": {
        "commit_hash": "9325590b13e7dd315bb7eaba7fbeadbfe30d936b",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/9325590b13e7dd315bb7eaba7fbeadbfe30d936b",
        "files": [
          "include/capstone/sparc.h",
          "include/capstone/systemz.h",
          "include/capstone/xcore.h"
        ],
        "message": "Fixed xcore header to comply with bindings\n\nand fixed whitespace",
        "before_after_code_files": [
          "include/capstone/sparc.h||include/capstone/sparc.h",
          "include/capstone/systemz.h||include/capstone/systemz.h",
          "include/capstone/xcore.h||include/capstone/xcore.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/capstone/sparc.h||include/capstone/sparc.h": [
          "File: include/capstone/sparc.h -> include/capstone/sparc.h"
        ],
        "include/capstone/systemz.h||include/capstone/systemz.h": [
          "File: include/capstone/systemz.h -> include/capstone/systemz.h"
        ],
        "include/capstone/xcore.h||include/capstone/xcore.h": [
          "File: include/capstone/xcore.h -> include/capstone/xcore.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: typedef struct xcore_op_mem {",
          "69:  int32_t disp; // displacement/offset value",
          "70:  int     direct; // +1: forward, -1: backward",
          "71: } xcore_op_mem;",
          "",
          "[Removed Lines]",
          "67:  xcore_reg base;  // base register",
          "68:  xcore_reg index; // index register",
          "",
          "[Added Lines]",
          "67:  uint8_t base;  // base register, can be safely interpreted as",
          "70:  uint8_t index;  // index register, same conditions apply here",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "952d534d1bd220de61120710ee6ce6217a81b85d",
      "candidate_info": {
        "commit_hash": "952d534d1bd220de61120710ee6ce6217a81b85d",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/952d534d1bd220de61120710ee6ce6217a81b85d",
        "files": [
          "arch/ARM/ARMMapping.c"
        ],
        "message": "Patch for issue #842\n\nThe SETEND instruction is a 16 bit Thumb instruction which is included\nin T variants of ARMv6 and above, but is not available in M-Class cores\n(see ARM Compiler toolchain Assembler Reference Ver 5.0).\n\nTo be consistent with other similar instructions its group flags have\nbeen updated to be:\n\n{ARM_GRP_THUMB, ARM_GRP_V6, ARM_GRP_NOTMCLASS,0}",
        "before_after_code_files": [
          "arch/ARM/ARMMapping.c||arch/ARM/ARMMapping.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/ARM/ARMMapping.c||arch/ARM/ARMMapping.c": [
          "File: arch/ARM/ARMMapping.c -> arch/ARM/ARMMapping.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "13418:  {",
          "13419:   ARM_tSETEND, ARM_INS_SETEND,",
          "13420: #ifndef CAPSTONE_DIET",
          "13422: #endif",
          "13423:  },",
          "13424:  {",
          "",
          "[Removed Lines]",
          "13421:   { 0 }, { 0 }, { ARM_GRP_NOTMCLASS, 0 }, 0, 0",
          "",
          "[Added Lines]",
          "13421:   { 0 }, { 0 }, { ARM_GRP_THUMB, ARM_GRP_V6, ARM_GRP_NOTMCLASS, 0}, 0, 0",
          "",
          "---------------"
        ]
      }
    }
  ]
}