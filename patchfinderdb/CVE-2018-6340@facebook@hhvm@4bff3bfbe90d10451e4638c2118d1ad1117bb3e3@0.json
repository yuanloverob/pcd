{
  "cve_id": "CVE-2018-6340",
  "cve_desc": "The Memcache::getextendedstats function can be used to trigger an out-of-bounds read. Exploiting this issue requires control over memcached server hostnames and/or ports. This affects all supported versions of HHVM (3.30 and 3.27.4 and below).",
  "repo": "facebook/hhvm",
  "patch_hash": "4bff3bfbe90d10451e4638c2118d1ad1117bb3e3",
  "patch_info": {
    "commit_hash": "4bff3bfbe90d10451e4638c2118d1ad1117bb3e3",
    "repo": "facebook/hhvm",
    "commit_url": "https://github.com/facebook/hhvm/commit/4bff3bfbe90d10451e4638c2118d1ad1117bb3e3",
    "files": [
      "hphp/runtime/ext/memcache/ext_memcache.cpp"
    ],
    "message": "CVE-2018-6340 Fix buffer overread\n\nSummary:\nsnprintf() returns the number of would be written bytes if the buffer had\nenough size, letting the original code to construct output string from\narbitrary data on the stack.\n\nFix this by properly assembling the String without trying to arbitrarily\nlimiting the length to 30 bytes.\n\nReviewed By: ottoni\n\nDifferential Revision: D13509547\n\nfbshipit-source-id: aa401b83d356f5b261433c4b16d777948ba7f9b4",
    "before_after_code_files": [
      "hphp/runtime/ext/memcache/ext_memcache.cpp||hphp/runtime/ext/memcache/ext_memcache.cpp"
    ]
  },
  "patch_diff": {
    "hphp/runtime/ext/memcache/ext_memcache.cpp||hphp/runtime/ext/memcache/ext_memcache.cpp": [
      "File: hphp/runtime/ext/memcache/ext_memcache.cpp -> hphp/runtime/ext/memcache/ext_memcache.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "701:   for (int server_id = 0; server_id < server_count; server_id++) {",
      "702:     memcached_stat_st *stat;",
      "706:     LMCD_SERVER_POSITION_INSTANCE_TYPE instance =",
      "707:       memcached_server_instance_by_position(&data->m_memcache, server_id);",
      "708:     const char *hostname = LMCD_SERVER_HOSTNAME(instance);",
      "",
      "[Removed Lines]",
      "703:     char stats_key[30] = {0};",
      "704:     size_t key_len;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "715:       continue;",
      "716:     }",
      "721:   }",
      "723:   free(stats);",
      "",
      "[Removed Lines]",
      "718:     key_len = snprintf(stats_key, sizeof(stats_key), \"%s:%d\", hostname, port);",
      "720:     return_val.set(String(stats_key, key_len, CopyString), server_stats);",
      "",
      "[Added Lines]",
      "715:     auto const port_str = folly::to<std::string>(port);",
      "716:     auto const key_len = strlen(hostname) + 1 + port_str.length();",
      "717:     auto key = String(key_len, ReserveString);",
      "718:     key += hostname;",
      "719:     key += \":\";",
      "720:     key += port_str;",
      "721:     return_val.set(key, server_stats);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "648e6f1e95773bed5d0ad13fa4397ee40b54a23d",
      "candidate_info": {
        "commit_hash": "648e6f1e95773bed5d0ad13fa4397ee40b54a23d",
        "repo": "facebook/hhvm",
        "commit_url": "https://github.com/facebook/hhvm/commit/648e6f1e95773bed5d0ad13fa4397ee40b54a23d",
        "files": [
          "hphp/runtime/ext/memcache/ext_memcache.cpp"
        ],
        "message": "Stack read overflow in Memcache::getextendedstats",
        "before_after_code_files": [
          "hphp/runtime/ext/memcache/ext_memcache.cpp||hphp/runtime/ext/memcache/ext_memcache.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "hphp/runtime/ext/memcache/ext_memcache.cpp||hphp/runtime/ext/memcache/ext_memcache.cpp"
          ],
          "candidate": [
            "hphp/runtime/ext/memcache/ext_memcache.cpp||hphp/runtime/ext/memcache/ext_memcache.cpp"
          ]
        }
      },
      "candidate_diff": {
        "hphp/runtime/ext/memcache/ext_memcache.cpp||hphp/runtime/ext/memcache/ext_memcache.cpp": [
          "File: hphp/runtime/ext/memcache/ext_memcache.cpp -> hphp/runtime/ext/memcache/ext_memcache.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "696:   for (int server_id = 0; server_id < server_count; server_id++) {",
          "697:     memcached_stat_st *stat;",
          "701:     LMCD_SERVER_POSITION_INSTANCE_TYPE instance =",
          "702:       memcached_server_instance_by_position(&data->m_memcache, server_id);",
          "703:     const char *hostname = LMCD_SERVER_HOSTNAME(instance);",
          "",
          "[Removed Lines]",
          "698:     char stats_key[30] = {0};",
          "699:     size_t key_len;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "710:       continue;",
          "711:     }",
          "716:   }",
          "718:   free(stats);",
          "",
          "[Removed Lines]",
          "713:     key_len = snprintf(stats_key, sizeof(stats_key), \"%s:%d\", hostname, port);",
          "715:     return_val.set(String(stats_key, key_len, CopyString), server_stats);",
          "",
          "[Added Lines]",
          "710:     auto const port_str = folly::to<std::string>(port);",
          "711:     auto const key_len = strlen(hostname) + 1 + port_str.length();",
          "712:     auto key = String(key_len, ReserveString);",
          "713:     key += hostname;",
          "714:     key += \":\";",
          "715:     key += port_str;",
          "716:     return_val.set(key, server_stats);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "721d1c7325a405d284cdefd47ac30017d1eb2fd3",
      "candidate_info": {
        "commit_hash": "721d1c7325a405d284cdefd47ac30017d1eb2fd3",
        "repo": "facebook/hhvm",
        "commit_url": "https://github.com/facebook/hhvm/commit/721d1c7325a405d284cdefd47ac30017d1eb2fd3",
        "files": [
          "hphp/runtime/ext/memcache/ext_memcache.cpp"
        ],
        "message": "[CVE-2018-6340] Stack read overflow in Memcache::getextendedstats",
        "before_after_code_files": [
          "hphp/runtime/ext/memcache/ext_memcache.cpp||hphp/runtime/ext/memcache/ext_memcache.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "hphp/runtime/ext/memcache/ext_memcache.cpp||hphp/runtime/ext/memcache/ext_memcache.cpp"
          ],
          "candidate": [
            "hphp/runtime/ext/memcache/ext_memcache.cpp||hphp/runtime/ext/memcache/ext_memcache.cpp"
          ]
        }
      },
      "candidate_diff": {
        "hphp/runtime/ext/memcache/ext_memcache.cpp||hphp/runtime/ext/memcache/ext_memcache.cpp": [
          "File: hphp/runtime/ext/memcache/ext_memcache.cpp -> hphp/runtime/ext/memcache/ext_memcache.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "701:   for (int server_id = 0; server_id < server_count; server_id++) {",
          "702:     memcached_stat_st *stat;",
          "706:     LMCD_SERVER_POSITION_INSTANCE_TYPE instance =",
          "707:       memcached_server_instance_by_position(&data->m_memcache, server_id);",
          "708:     const char *hostname = LMCD_SERVER_HOSTNAME(instance);",
          "",
          "[Removed Lines]",
          "703:     char stats_key[30] = {0};",
          "704:     size_t key_len;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "715:       continue;",
          "716:     }",
          "721:   }",
          "723:   free(stats);",
          "",
          "[Removed Lines]",
          "718:     key_len = snprintf(stats_key, sizeof(stats_key), \"%s:%d\", hostname, port);",
          "720:     return_val.set(String(stats_key, key_len, CopyString), server_stats);",
          "",
          "[Added Lines]",
          "715:     auto const port_str = folly::to<std::string>(port);",
          "716:     auto const key_len = strlen(hostname) + 1 + port_str.length();",
          "717:     auto key = String(key_len, ReserveString);",
          "718:     key += hostname;",
          "719:     key += \":\";",
          "720:     key += port_str;",
          "721:     return_val.set(key, server_stats);",
          "",
          "---------------"
        ]
      }
    }
  ]
}