{
  "cve_id": "CVE-2021-32791",
  "cve_desc": "mod_auth_openidc is an authentication/authorization module for the Apache 2.x HTTP server that functions as an OpenID Connect Relying Party, authenticating users against an OpenID Connect Provider. In mod_auth_openidc before version 2.4.9, the AES GCM encryption in mod_auth_openidc uses a static IV and AAD. It is important to fix because this creates a static nonce and since aes-gcm is a stream cipher, this can lead to known cryptographic issues, since the same key is being reused. From 2.4.9 onwards this has been patched to use dynamic values through usage of cjose AES encryption routines.",
  "repo": "zmartzone/mod_auth_openidc",
  "patch_hash": "375407c16c61a70b56fdbe13b0d2c8f11398e92c",
  "patch_info": {
    "commit_hash": "375407c16c61a70b56fdbe13b0d2c8f11398e92c",
    "repo": "zmartzone/mod_auth_openidc",
    "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/375407c16c61a70b56fdbe13b0d2c8f11398e92c",
    "files": [
      ".gitignore",
      "ChangeLog",
      "Dockerfile",
      "configure.ac",
      "openidc.conf",
      "src/cache/common.c",
      "test/mod_auth_openidc.jmx"
    ],
    "message": "use encrypted JWTs for storing encrypted cache contents\n\n- avoid using static AAD/IV; thanks @niebardzo\n- bump to 2.4.9-dev\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
    "before_after_code_files": [
      "configure.ac||configure.ac",
      "openidc.conf||openidc.conf",
      "src/cache/common.c||src/cache/common.c",
      "test/mod_auth_openidc.jmx||test/mod_auth_openidc.jmx"
    ]
  },
  "patch_diff": {
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.4.8.4],[hans.zandbelt@zmartzone.eu])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.4.9-dev],[hans.zandbelt@zmartzone.eu])",
      "",
      "---------------"
    ],
    "openidc.conf||openidc.conf": [
      "File: openidc.conf -> openidc.conf",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: OIDCInfoHook iat access_token access_token_expires id_token userinfo refresh_token session",
      "27: <Location /protected>",
      "28:   AuthType openid-connect",
      "29:   Require valid-user",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "27: OIDCScope \"openid email profile\"",
      "",
      "---------------"
    ],
    "src/cache/common.c||src/cache/common.c": [
      "File: src/cache/common.c -> src/cache/common.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "244:  return rv;",
      "245: }",
      "477: }",
      "553: }",
      "560:  char *input = apr_psprintf(r->pool, \"%s:%s\", passphrase, key);",
      "561:  char *output = NULL;",
      "566:   return NULL;",
      "567:  }",
      "568:  return output;",
      "",
      "[Removed Lines]",
      "247: #define oidc_cache_crypto_openssl_error(r, fmt, ...) \\",
      "248:   oidc_error(r, \"%s: %s\", apr_psprintf(r->pool, fmt, ##__VA_ARGS__), ERR_error_string(ERR_get_error(), NULL))",
      "250: #define OIDC_CACHE_CIPHER       EVP_aes_256_gcm()",
      "251: #define OIDC_CACHE_TAG_LEN       16",
      "253: #if (OPENSSL_VERSION_NUMBER >= 0x10100005L && !defined(LIBRESSL_VERSION_NUMBER))",
      "254: #define OIDC_CACHE_CRYPTO_GET_TAG     EVP_CTRL_AEAD_GET_TAG",
      "255: #define OIDC_CACHE_CRYPTO_SET_TAG     EVP_CTRL_AEAD_SET_TAG",
      "256: #define OIDC_CACHE_CRYPTO_SET_IVLEN     EVP_CTRL_AEAD_SET_IVLEN",
      "257: #else",
      "258: #define OIDC_CACHE_CRYPTO_GET_TAG     EVP_CTRL_GCM_GET_TAG",
      "259: #define OIDC_CACHE_CRYPTO_SET_TAG     EVP_CTRL_GCM_SET_TAG",
      "260: #define OIDC_CACHE_CRYPTO_SET_IVLEN     EVP_CTRL_GCM_SET_IVLEN",
      "261: #endif",
      "266: static int oidc_cache_crypto_encrypt_impl(request_rec *r,",
      "267:   unsigned char *plaintext, int plaintext_len, const unsigned char *aad,",
      "268:   int aad_len, unsigned char *key, const unsigned char *iv, int iv_len,",
      "269:   unsigned char *ciphertext, const unsigned char *tag, int tag_len) {",
      "270:  EVP_CIPHER_CTX *ctx;",
      "272:  int len;",
      "274:  int ciphertext_len;",
      "277:  if (!(ctx = EVP_CIPHER_CTX_new())) {",
      "278:   oidc_cache_crypto_openssl_error(r, \"EVP_CIPHER_CTX_new\");",
      "279:   return -1;",
      "280:  }",
      "283:  if (!EVP_EncryptInit_ex(ctx, OIDC_CACHE_CIPHER, NULL, NULL, NULL)) {",
      "284:   oidc_cache_crypto_openssl_error(r, \"EVP_EncryptInit_ex\");",
      "285:   return -1;",
      "286:  }",
      "289:  if (!EVP_CIPHER_CTX_ctrl(ctx, OIDC_CACHE_CRYPTO_SET_IVLEN, iv_len, NULL)) {",
      "290:   oidc_cache_crypto_openssl_error(r, \"EVP_CIPHER_CTX_ctrl\");",
      "291:   return -1;",
      "292:  }",
      "295:  if (!EVP_EncryptInit_ex(ctx, NULL, NULL, key, iv)) {",
      "296:   oidc_cache_crypto_openssl_error(r, \"EVP_EncryptInit_ex\");",
      "297:   return -1;",
      "298:  }",
      "301:  if (!EVP_EncryptUpdate(ctx, NULL, &len, aad, aad_len)) {",
      "302:   oidc_cache_crypto_openssl_error(r, \"EVP_DecryptUpdate aad: aad_len=%d\",",
      "303:     aad_len);",
      "304:   return -1;",
      "305:  }",
      "308:  if (!EVP_EncryptUpdate(ctx, ciphertext, &len, plaintext, plaintext_len)) {",
      "309:   oidc_cache_crypto_openssl_error(r, \"EVP_EncryptUpdate ciphertext\");",
      "310:   return -1;",
      "311:  }",
      "312:  ciphertext_len = len;",
      "318:  if (!EVP_EncryptFinal_ex(ctx, ciphertext + len, &len)) {",
      "319:   oidc_cache_crypto_openssl_error(r, \"EVP_EncryptFinal_ex\");",
      "320:   return -1;",
      "321:  }",
      "322:  ciphertext_len += len;",
      "325:  if (!EVP_CIPHER_CTX_ctrl(ctx, OIDC_CACHE_CRYPTO_GET_TAG, tag_len,",
      "326:    (void *) tag)) {",
      "327:   oidc_cache_crypto_openssl_error(r, \"EVP_CIPHER_CTX_ctrl\");",
      "328:   return -1;",
      "329:  }",
      "332:  EVP_CIPHER_CTX_free(ctx);",
      "334:  return ciphertext_len;",
      "335: }",
      "340: static int oidc_cache_crypto_decrypt_impl(request_rec *r,",
      "341:   unsigned char *ciphertext, int ciphertext_len, const unsigned char *aad,",
      "342:   int aad_len, const unsigned char *tag, int tag_len, unsigned char *key,",
      "343:   const unsigned char *iv, int iv_len, unsigned char *plaintext) {",
      "344:  EVP_CIPHER_CTX *ctx;",
      "345:  int len;",
      "346:  int plaintext_len;",
      "347:  int ret;",
      "350:  if (!(ctx = EVP_CIPHER_CTX_new())) {",
      "351:   oidc_cache_crypto_openssl_error(r, \"EVP_CIPHER_CTX_new\");",
      "352:   return -1;",
      "353:  }",
      "356:  if (!EVP_DecryptInit_ex(ctx, OIDC_CACHE_CIPHER, NULL, NULL, NULL)) {",
      "357:   oidc_cache_crypto_openssl_error(r, \"EVP_DecryptInit_ex\");",
      "358:   return -1;",
      "359:  }",
      "362:  if (!EVP_CIPHER_CTX_ctrl(ctx, OIDC_CACHE_CRYPTO_SET_IVLEN, iv_len, NULL)) {",
      "363:   oidc_cache_crypto_openssl_error(r, \"EVP_CIPHER_CTX_ctrl\");",
      "364:   return -1;",
      "365:  }",
      "368:  if (!EVP_DecryptInit_ex(ctx, NULL, NULL, key, iv)) {",
      "369:   oidc_cache_crypto_openssl_error(r, \"EVP_DecryptInit_ex\");",
      "370:   return -1;",
      "371:  }",
      "374:  if (!EVP_DecryptUpdate(ctx, NULL, &len, aad, aad_len)) {",
      "375:   oidc_cache_crypto_openssl_error(r, \"EVP_DecryptUpdate aad: aad_len=%d\",",
      "376:     aad_len);",
      "377:   return -1;",
      "378:  }",
      "381:  if (!EVP_DecryptUpdate(ctx, plaintext, &len, ciphertext, ciphertext_len)) {",
      "382:   oidc_cache_crypto_openssl_error(r, \"EVP_DecryptUpdate ciphertext\");",
      "383:   return -1;",
      "384:  }",
      "385:  plaintext_len = len;",
      "388:  if (!EVP_CIPHER_CTX_ctrl(ctx, OIDC_CACHE_CRYPTO_SET_TAG, tag_len,",
      "389:    (void *) tag)) {",
      "390:   oidc_cache_crypto_openssl_error(r, \"EVP_CIPHER_CTX_ctrl\");",
      "391:   return -1;",
      "392:  }",
      "398:  ret = EVP_DecryptFinal_ex(ctx, plaintext + len, &len);",
      "401:  EVP_CIPHER_CTX_free(ctx);",
      "403:  if (ret > 0) {",
      "405:   plaintext_len += len;",
      "406:   return plaintext_len;",
      "407:  } else {",
      "409:   oidc_cache_crypto_openssl_error(r, \"EVP_DecryptFinal_ex\");",
      "410:   return -1;",
      "411:  }",
      "412: }",
      "417: static const unsigned char OIDC_CACHE_CRYPTO_GCM_AAD[] = { 0x4d, 0x23, 0xc3,",
      "418:   0xce, 0xc3, 0x34, 0xb4, 0x9b, 0xdb, 0x37, 0x0c, 0x43, 0x7f, 0xec, 0x78,",
      "419:   0xde };",
      "424: static const unsigned char OIDC_CACHE_CRYPTO_GCM_IV[] = { 0x00, 0x01, 0x02,",
      "425:   0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e,",
      "426:   0x0f };",
      "431: static int oidc_cache_crypto_encrypt(request_rec *r, const char *plaintext,",
      "432:   unsigned char *key, char **result) {",
      "433:  char *encoded = NULL, *p = NULL, *e_tag = NULL;",
      "434:  unsigned char *ciphertext = NULL;",
      "435:  int plaintext_len, ciphertext_len, encoded_len, e_tag_len;",
      "436:  unsigned char tag[OIDC_CACHE_TAG_LEN];",
      "439:  plaintext_len = strlen(plaintext) + 1;",
      "440:  ciphertext = apr_pcalloc(r->pool,",
      "441:    (plaintext_len + EVP_CIPHER_block_size(OIDC_CACHE_CIPHER)));",
      "443:  ciphertext_len = oidc_cache_crypto_encrypt_impl(r,",
      "444:    (unsigned char *) plaintext, plaintext_len,",
      "445:    OIDC_CACHE_CRYPTO_GCM_AAD, sizeof(OIDC_CACHE_CRYPTO_GCM_AAD), key,",
      "446:    OIDC_CACHE_CRYPTO_GCM_IV, sizeof(OIDC_CACHE_CRYPTO_GCM_IV),",
      "447:    ciphertext, tag, sizeof(tag));",
      "450:  encoded_len = oidc_base64url_encode(r, &encoded, (const char *) ciphertext,",
      "451:    ciphertext_len, 1);",
      "452:  if (encoded_len > 0) {",
      "453:   p = encoded;",
      "456:   e_tag_len = oidc_base64url_encode(r, &e_tag, (const char *) tag,",
      "457:     OIDC_CACHE_TAG_LEN, 1);",
      "460:   encoded = apr_pcalloc(r->pool, encoded_len + 1 + e_tag_len + 1);",
      "461:   memcpy(encoded, p, encoded_len);",
      "462:   p = encoded + encoded_len;",
      "464:   p++;",
      "467:   memcpy(p, e_tag, e_tag_len);",
      "468:   encoded_len += e_tag_len + 1;",
      "471:   encoded[encoded_len] = '\\0';",
      "474:  }",
      "476:  return encoded_len;",
      "482: static int oidc_cache_crypto_decrypt(request_rec *r, const char *cache_value,",
      "483:   unsigned char *key, unsigned char **plaintext) {",
      "485:  int len = -1;",
      "488:  char *encoded_tag = strstr(cache_value, \".\");",
      "489:  if (encoded_tag == NULL) {",
      "490:   oidc_error(r,",
      "491:     \"corrupted cache value: no tag separator found in encrypted value\");",
      "492:   return FALSE;",
      "493:  }",
      "496:  cache_value = apr_pstrmemdup(r->pool, cache_value,",
      "497:    strlen(cache_value) - strlen(encoded_tag));",
      "498:  encoded_tag++;",
      "501:  char *d_bytes = NULL;",
      "502:  int d_len = oidc_base64url_decode(r->pool, &d_bytes, cache_value);",
      "505:  char *t_bytes = NULL;",
      "506:  int t_len = oidc_base64url_decode(r->pool, &t_bytes, encoded_tag);",
      "509:  if ((d_len > 0) && (t_len > 0)) {",
      "513:     (d_len + EVP_CIPHER_block_size(OIDC_CACHE_CIPHER) - 1));",
      "517:   len = oidc_cache_crypto_decrypt_impl(r, (unsigned char *) d_bytes,",
      "518:     d_len, OIDC_CACHE_CRYPTO_GCM_AAD,",
      "519:     sizeof(OIDC_CACHE_CRYPTO_GCM_AAD), (unsigned char *) t_bytes,",
      "520:     t_len, key, OIDC_CACHE_CRYPTO_GCM_IV,",
      "521:     sizeof(OIDC_CACHE_CRYPTO_GCM_IV), *plaintext);",
      "524:   if (len > -1) {",
      "525:    (*plaintext)[len] = '\\0';",
      "526:   } else {",
      "528:   }",
      "530:  }",
      "532:  return len;",
      "533: }",
      "538: static unsigned char *oidc_cache_hash_passphrase(request_rec *r,",
      "539:   const char *passphrase) {",
      "541:  unsigned char *key = NULL;",
      "542:  unsigned int key_len = 0;",
      "543:  oidc_jose_error_t err;",
      "545:  if (oidc_jose_hash_bytes(r->pool, OIDC_JOSE_ALG_SHA256,",
      "546:    (const unsigned char *) passphrase, strlen(passphrase), &key,",
      "547:    &key_len, &err) == FALSE) {",
      "548:   oidc_error(r, \"oidc_jose_hash_bytes returned an error: %s\", err.text);",
      "549:   return NULL;",
      "550:  }",
      "552:  return key;",
      "558: static char *oidc_cache_get_hashed_key(request_rec *r, const char *passphrase,",
      "559:   const char *key) {",
      "562:  if (oidc_util_hash_string_and_base64url_encode(r, OIDC_JOSE_ALG_SHA256,",
      "563:    input, &output) == FALSE) {",
      "564:   oidc_error(r,",
      "565:     \"oidc_util_hash_string_and_base64url_encode returned an error\");",
      "",
      "[Added Lines]",
      "247: #define OIDC_CACHE_CRYPTO_JSON_KEY \"c\"",
      "252: static apr_byte_t oidc_cache_crypto_encrypt(request_rec *r, const char *plaintext, const char *key,",
      "253:   char **result) {",
      "254:  apr_byte_t rv = FALSE;",
      "255:  json_t *json = NULL;",
      "257:  json = json_object();",
      "258:  json_object_set_new(json, OIDC_CACHE_CRYPTO_JSON_KEY, json_string(plaintext));",
      "260:  rv = oidc_util_jwt_create(r, (const char*) key, json, result);",
      "262:  if (json)",
      "263:   json_decref(json);",
      "265:  return rv;",
      "271: static apr_byte_t oidc_cache_crypto_decrypt(request_rec *r, const char *cache_value,",
      "272:   const char *key, char **plaintext) {",
      "274:  apr_byte_t rv = FALSE;",
      "275:  json_t *json = NULL;",
      "277:  rv = oidc_util_jwt_verify(r, (const char*) key, cache_value, &json);",
      "278:  if (rv == FALSE)",
      "279:   goto end;",
      "281:  rv = oidc_json_object_get_string(r->pool, json, OIDC_CACHE_CRYPTO_JSON_KEY, plaintext, NULL);",
      "283:  end:",
      "285:  if (json)",
      "286:   json_decref(json);",
      "288:  return rv;",
      "294: static char* oidc_cache_get_hashed_key(request_rec *r, const char *passphrase, const char *key) {",
      "297:  if (oidc_util_hash_string_and_base64url_encode(r, OIDC_JOSE_ALG_SHA256, input, &output)",
      "298:    == FALSE) {",
      "299:   oidc_error(r, \"oidc_util_hash_string_and_base64url_encode returned an error\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "604:   goto out;",
      "605:  }",
      "611: out:",
      "",
      "[Removed Lines]",
      "607:  rc = (oidc_cache_crypto_decrypt(r, cache_value,",
      "608:    oidc_cache_hash_passphrase(r, cfg->crypto_passphrase),",
      "609:    (unsigned char **) value) > 0);",
      "",
      "[Added Lines]",
      "341:  rc = oidc_cache_crypto_decrypt(r, cache_value, cfg->crypto_passphrase, value);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "650:    goto out;",
      "652:   if (value != NULL) {",
      "656:     goto out;",
      "657:    value = encoded;",
      "658:   }",
      "",
      "[Removed Lines]",
      "653:    if (oidc_cache_crypto_encrypt(r, value,",
      "654:      oidc_cache_hash_passphrase(r, cfg->crypto_passphrase),",
      "655:      &encoded) <= 0)",
      "",
      "[Added Lines]",
      "385:    if (oidc_cache_crypto_encrypt(r, value, cfg->crypto_passphrase, &encoded) == FALSE)",
      "",
      "---------------"
    ],
    "test/mod_auth_openidc.jmx||test/mod_auth_openidc.jmx": [
      "File: test/mod_auth_openidc.jmx -> test/mod_auth_openidc.jmx",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "3:   <hashTree>",
      "4:     <TestPlan guiclass=\"TestPlanGui\" testclass=\"TestPlan\" testname=\"OpenID Connect Apache Module Test Plan\" enabled=\"true\">",
      "5:       <stringProp name=\"TestPlan.comments\"></stringProp>",
      "",
      "[Removed Lines]",
      "2: <jmeterTestPlan version=\"1.2\" properties=\"3.1\" jmeter=\"3.1.20170220\">",
      "",
      "[Added Lines]",
      "2: <jmeterTestPlan version=\"1.2\" properties=\"5.0\" jmeter=\"5.1.1.20190725\">",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "7:       <boolProp name=\"TestPlan.serialize_threadgroups\">false</boolProp>",
      "8:       <elementProp name=\"TestPlan.user_defined_variables\" elementType=\"Arguments\" guiclass=\"ArgumentsPanel\" testclass=\"Arguments\" testname=\"User Defined Variables\" enabled=\"true\">",
      "9:         <collectionProp name=\"Arguments.arguments\">",
      "12:             <stringProp name=\"Argument.value\">localhost.zmartzone.eu</stringProp>",
      "13:             <stringProp name=\"Argument.metadata\">=</stringProp>",
      "14:           </elementProp>",
      "",
      "[Removed Lines]",
      "10:           <elementProp name=\"X_APP_SERVER\" elementType=\"Argument\">",
      "11:             <stringProp name=\"Argument.name\">X_APP_SERVER</stringProp>",
      "",
      "[Added Lines]",
      "10:           <elementProp name=\"APP_SERVER\" elementType=\"Argument\">",
      "11:             <stringProp name=\"Argument.name\">APP_SERVER</stringProp>",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "57:           </elementProp>",
      "58:           <elementProp name=\"APP_PATH_ACCESS\" elementType=\"Argument\">",
      "59:             <stringProp name=\"Argument.name\">APP_PATH_ACCESS</stringProp>",
      "61:             <stringProp name=\"Argument.metadata\">=</stringProp>",
      "62:           </elementProp>",
      "63:         </collectionProp>",
      "",
      "[Removed Lines]",
      "60:             <stringProp name=\"Argument.value\">/protected/api/index.php</stringProp>",
      "",
      "[Added Lines]",
      "60:             <stringProp name=\"Argument.value\">/api/index.php</stringProp>",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "94:           </elementProp>",
      "95:           <stringProp name=\"HTTPSampler.domain\">${APP_SERVER}</stringProp>",
      "96:           <stringProp name=\"HTTPSampler.port\">${APP_PORT}</stringProp>",
      "99:           <stringProp name=\"HTTPSampler.protocol\">https</stringProp>",
      "100:           <stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>",
      "101:           <stringProp name=\"HTTPSampler.path\">${APP_PATH_USER}</stringProp>",
      "",
      "[Removed Lines]",
      "97:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "98:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "104:           <boolProp name=\"HTTPSampler.auto_redirects\">false</boolProp>",
      "105:           <boolProp name=\"HTTPSampler.use_keepalive\">false</boolProp>",
      "106:           <boolProp name=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>",
      "109:           <stringProp name=\"HTTPSampler.embedded_url_re\"></stringProp>",
      "110:         </HTTPSamplerProxy>",
      "111:         <hashTree>",
      "112:           <RegexExtractor guiclass=\"RegexExtractorGui\" testclass=\"RegexExtractor\" testname=\"Grab AuthorizationRequestPath\" enabled=\"true\">",
      "",
      "[Removed Lines]",
      "107:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "108:           <boolProp name=\"HTTPSampler.monitor\">false</boolProp>",
      "",
      "[Added Lines]",
      "106:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "107:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "108:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "125:           </elementProp>",
      "126:           <stringProp name=\"HTTPSampler.domain\">${AS_HOST}</stringProp>",
      "127:           <stringProp name=\"HTTPSampler.port\">${AS_PORT}</stringProp>",
      "130:           <stringProp name=\"HTTPSampler.protocol\">https</stringProp>",
      "131:           <stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>",
      "132:           <stringProp name=\"HTTPSampler.path\">/${AuthorizationRequestPath}</stringProp>",
      "",
      "[Removed Lines]",
      "128:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "129:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "135:           <boolProp name=\"HTTPSampler.auto_redirects\">false</boolProp>",
      "136:           <boolProp name=\"HTTPSampler.use_keepalive\">false</boolProp>",
      "137:           <boolProp name=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>",
      "140:           <stringProp name=\"HTTPSampler.embedded_url_re\"></stringProp>",
      "141:         </HTTPSamplerProxy>",
      "142:         <hashTree>",
      "143:           <RegexExtractor guiclass=\"RegexExtractorGui\" testclass=\"RegexExtractor\" testname=\"Grab AuthzResumePath\" enabled=\"true\">",
      "",
      "[Removed Lines]",
      "138:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "139:           <boolProp name=\"HTTPSampler.monitor\">false</boolProp>",
      "",
      "[Added Lines]",
      "136:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "137:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "138:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "164:           </elementProp>",
      "165:           <stringProp name=\"HTTPSampler.domain\">${AS_HOST}</stringProp>",
      "166:           <stringProp name=\"HTTPSampler.port\">${AS_PORT}</stringProp>",
      "169:           <stringProp name=\"HTTPSampler.protocol\">https</stringProp>",
      "170:           <stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>",
      "171:           <stringProp name=\"HTTPSampler.path\">${AuthzResumePath}</stringProp>",
      "",
      "[Removed Lines]",
      "167:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "168:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "174:           <boolProp name=\"HTTPSampler.auto_redirects\">false</boolProp>",
      "175:           <boolProp name=\"HTTPSampler.use_keepalive\">false</boolProp>",
      "176:           <boolProp name=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>",
      "179:           <stringProp name=\"HTTPSampler.embedded_url_re\"></stringProp>",
      "180:         </HTTPSamplerProxy>",
      "181:         <hashTree>",
      "182:           <RegexExtractor guiclass=\"RegexExtractorGui\" testclass=\"RegexExtractor\" testname=\"Grab ResumeParam\" enabled=\"true\">",
      "",
      "[Removed Lines]",
      "177:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "178:           <boolProp name=\"HTTPSampler.monitor\">false</boolProp>",
      "",
      "[Added Lines]",
      "174:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "175:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "176:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "226:           </elementProp>",
      "227:           <stringProp name=\"HTTPSampler.domain\">${AS_HOST}</stringProp>",
      "228:           <stringProp name=\"HTTPSampler.port\">${AS_PORT}</stringProp>",
      "231:           <stringProp name=\"HTTPSampler.protocol\">https</stringProp>",
      "232:           <stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>",
      "233:           <stringProp name=\"HTTPSampler.path\">/IdpSample/MainPage?cmd=login</stringProp>",
      "",
      "[Removed Lines]",
      "229:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "230:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "236:           <boolProp name=\"HTTPSampler.auto_redirects\">false</boolProp>",
      "237:           <boolProp name=\"HTTPSampler.use_keepalive\">false</boolProp>",
      "238:           <boolProp name=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>",
      "241:           <stringProp name=\"HTTPSampler.embedded_url_re\"></stringProp>",
      "242:         </HTTPSamplerProxy>",
      "243:         <hashTree>",
      "244:           <RegexExtractor guiclass=\"RegexExtractorGui\" testclass=\"RegexExtractor\" testname=\"Grab ResumePath\" enabled=\"true\">",
      "",
      "[Removed Lines]",
      "239:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "240:           <boolProp name=\"HTTPSampler.monitor\">false</boolProp>",
      "",
      "[Added Lines]",
      "235:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "236:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "237:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "257:           </elementProp>",
      "258:           <stringProp name=\"HTTPSampler.domain\">${AS_HOST}</stringProp>",
      "259:           <stringProp name=\"HTTPSampler.port\">${AS_PORT}</stringProp>",
      "262:           <stringProp name=\"HTTPSampler.protocol\">https</stringProp>",
      "263:           <stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>",
      "264:           <stringProp name=\"HTTPSampler.path\">${ResumePath}</stringProp>",
      "",
      "[Removed Lines]",
      "260:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "261:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "267:           <boolProp name=\"HTTPSampler.auto_redirects\">false</boolProp>",
      "268:           <boolProp name=\"HTTPSampler.use_keepalive\">false</boolProp>",
      "269:           <boolProp name=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>",
      "272:           <stringProp name=\"HTTPSampler.embedded_url_re\"></stringProp>",
      "273:         </HTTPSamplerProxy>",
      "274:         <hashTree>",
      "275:           <RegexExtractor guiclass=\"RegexExtractorGui\" testclass=\"RegexExtractor\" testname=\"Grab RedirectURIPath\" enabled=\"true\">",
      "",
      "[Removed Lines]",
      "270:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "271:           <boolProp name=\"HTTPSampler.monitor\">false</boolProp>",
      "",
      "[Added Lines]",
      "265:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "266:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "267:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "321:           </elementProp>",
      "322:           <stringProp name=\"HTTPSampler.domain\">${APP_SERVER}</stringProp>",
      "323:           <stringProp name=\"HTTPSampler.port\">${APP_PORT}</stringProp>",
      "326:           <stringProp name=\"HTTPSampler.protocol\">https</stringProp>",
      "327:           <stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>",
      "328:           <stringProp name=\"HTTPSampler.path\">/${RedirectURIPath}</stringProp>",
      "",
      "[Removed Lines]",
      "324:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "325:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "331:           <boolProp name=\"HTTPSampler.auto_redirects\">false</boolProp>",
      "332:           <boolProp name=\"HTTPSampler.use_keepalive\">false</boolProp>",
      "333:           <boolProp name=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>",
      "336:           <stringProp name=\"HTTPSampler.embedded_url_re\"></stringProp>",
      "337:         </HTTPSamplerProxy>",
      "338:         <hashTree>",
      "339:           <RegexExtractor guiclass=\"RegexExtractorGui\" testclass=\"RegexExtractor\" testname=\"Grab ApplicationPath\" enabled=\"true\">",
      "",
      "[Removed Lines]",
      "334:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "335:           <boolProp name=\"HTTPSampler.monitor\">false</boolProp>",
      "",
      "[Added Lines]",
      "328:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "329:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "330:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "367:           </elementProp>",
      "368:           <stringProp name=\"HTTPSampler.domain\">${AS_HOST}</stringProp>",
      "369:           <stringProp name=\"HTTPSampler.port\">${AS_PORT}</stringProp>",
      "372:           <stringProp name=\"HTTPSampler.protocol\">https</stringProp>",
      "373:           <stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>",
      "374:           <stringProp name=\"HTTPSampler.path\">${AuthzResumePath}</stringProp>",
      "",
      "[Removed Lines]",
      "370:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "371:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "377:           <boolProp name=\"HTTPSampler.auto_redirects\">false</boolProp>",
      "378:           <boolProp name=\"HTTPSampler.use_keepalive\">false</boolProp>",
      "379:           <boolProp name=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>",
      "382:           <stringProp name=\"HTTPSampler.embedded_url_re\"></stringProp>",
      "383:         </HTTPSamplerProxy>",
      "384:         <hashTree>",
      "385:           <RegexExtractor guiclass=\"RegexExtractorGui\" testclass=\"RegexExtractor\" testname=\"Grab cSRFToken Parameter\" enabled=\"true\">",
      "",
      "[Removed Lines]",
      "380:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "381:           <boolProp name=\"HTTPSampler.monitor\">false</boolProp>",
      "",
      "[Added Lines]",
      "373:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "374:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "375:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "441:           </elementProp>",
      "442:           <stringProp name=\"HTTPSampler.domain\">${AS_HOST}</stringProp>",
      "443:           <stringProp name=\"HTTPSampler.port\">${AS_PORT}</stringProp>",
      "446:           <stringProp name=\"HTTPSampler.protocol\">https</stringProp>",
      "447:           <stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>",
      "448:           <stringProp name=\"HTTPSampler.path\">${AuthzResumePath}</stringProp>",
      "",
      "[Removed Lines]",
      "444:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "445:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "451:           <boolProp name=\"HTTPSampler.auto_redirects\">false</boolProp>",
      "452:           <boolProp name=\"HTTPSampler.use_keepalive\">false</boolProp>",
      "453:           <boolProp name=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>",
      "456:           <stringProp name=\"HTTPSampler.embedded_url_re\"></stringProp>",
      "457:         </HTTPSamplerProxy>",
      "458:         <hashTree>",
      "459:           <RegexExtractor guiclass=\"RegexExtractorGui\" testclass=\"RegexExtractor\" testname=\"Grab LocationPath\" enabled=\"true\">",
      "",
      "[Removed Lines]",
      "454:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "455:           <boolProp name=\"HTTPSampler.monitor\">false</boolProp>",
      "",
      "[Added Lines]",
      "446:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "447:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "448:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "472:           </elementProp>",
      "473:           <stringProp name=\"HTTPSampler.domain\">${APP_SERVER}</stringProp>",
      "474:           <stringProp name=\"HTTPSampler.port\">${APP_PORT}</stringProp>",
      "477:           <stringProp name=\"HTTPSampler.protocol\">https</stringProp>",
      "478:           <stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>",
      "479:           <stringProp name=\"HTTPSampler.path\">/${LocationPath}</stringProp>",
      "",
      "[Removed Lines]",
      "475:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "476:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "482:           <boolProp name=\"HTTPSampler.auto_redirects\">false</boolProp>",
      "483:           <boolProp name=\"HTTPSampler.use_keepalive\">false</boolProp>",
      "484:           <boolProp name=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>",
      "487:           <stringProp name=\"HTTPSampler.embedded_url_re\"></stringProp>",
      "488:         </HTTPSamplerProxy>",
      "489:         <hashTree>",
      "490:           <RegexExtractor guiclass=\"RegexExtractorGui\" testclass=\"RegexExtractor\" testname=\"Grab ApplicationPath\" enabled=\"true\">",
      "",
      "[Removed Lines]",
      "485:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "486:           <boolProp name=\"HTTPSampler.monitor\">false</boolProp>",
      "",
      "[Added Lines]",
      "476:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "477:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "478:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "517:             </elementProp>",
      "518:             <stringProp name=\"HTTPSampler.domain\">${APP_SERVER}</stringProp>",
      "519:             <stringProp name=\"HTTPSampler.port\">${APP_PORT}</stringProp>",
      "522:             <stringProp name=\"HTTPSampler.protocol\">https</stringProp>",
      "523:             <stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>",
      "524:             <stringProp name=\"HTTPSampler.path\">/${ApplicationPath}</stringProp>",
      "",
      "[Removed Lines]",
      "520:             <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "521:             <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "527:             <boolProp name=\"HTTPSampler.auto_redirects\">false</boolProp>",
      "528:             <boolProp name=\"HTTPSampler.use_keepalive\">false</boolProp>",
      "529:             <boolProp name=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>",
      "532:             <stringProp name=\"HTTPSampler.embedded_url_re\"></stringProp>",
      "533:           </HTTPSamplerProxy>",
      "534:           <hashTree>",
      "535:             <ResponseAssertion guiclass=\"AssertionGui\" testclass=\"ResponseAssertion\" testname=\"Assert User Logged In\" enabled=\"true\">",
      "",
      "[Removed Lines]",
      "530:             <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "531:             <boolProp name=\"HTTPSampler.monitor\">false</boolProp>",
      "",
      "[Added Lines]",
      "520:             <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "521:             <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "522:             <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "539:               <stringProp name=\"Assertion.test_field\">Assertion.response_data</stringProp>",
      "540:               <boolProp name=\"Assertion.assume_success\">false</boolProp>",
      "541:               <intProp name=\"Assertion.test_type\">2</intProp>",
      "542:             </ResponseAssertion>",
      "543:             <hashTree/>",
      "544:             <ResponseAssertion guiclass=\"AssertionGui\" testclass=\"ResponseAssertion\" testname=\"Assert Fake Header Removal\" enabled=\"true\">",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "532:               <stringProp name=\"Assertion.custom_message\"></stringProp>",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "548:               <stringProp name=\"Assertion.test_field\">Assertion.response_data</stringProp>",
      "549:               <boolProp name=\"Assertion.assume_success\">false</boolProp>",
      "550:               <intProp name=\"Assertion.test_type\">6</intProp>",
      "551:             </ResponseAssertion>",
      "552:             <hashTree/>",
      "553:           </hashTree>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "542:               <stringProp name=\"Assertion.custom_message\"></stringProp>",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "567:           <stringProp name=\"shareMode\">shareMode.all</stringProp>",
      "568:           <boolProp name=\"stopThread\">false</boolProp>",
      "569:           <stringProp name=\"variableNames\">USERNAME,PASSWORD</stringProp>",
      "570:         </CSVDataSet>",
      "571:         <hashTree/>",
      "582:         <hashTree/>",
      "583:       </hashTree>",
      "584:       <ThreadGroup guiclass=\"ThreadGroupGui\" testclass=\"ThreadGroup\" testname=\"OAuth Resource Access\" enabled=\"true\">",
      "",
      "[Removed Lines]",
      "572:         <CSVDataSet guiclass=\"TestBeanGUI\" testclass=\"CSVDataSet\" testname=\"Hosts Data Set\" enabled=\"true\">",
      "573:           <stringProp name=\"filename\">hosts.txt</stringProp>",
      "574:           <stringProp name=\"fileEncoding\"></stringProp>",
      "575:           <stringProp name=\"variableNames\">APP_SERVER</stringProp>",
      "576:           <stringProp name=\"delimiter\">,</stringProp>",
      "577:           <boolProp name=\"quotedData\">false</boolProp>",
      "578:           <boolProp name=\"recycle\">true</boolProp>",
      "579:           <boolProp name=\"stopThread\">false</boolProp>",
      "580:           <stringProp name=\"shareMode\">shareMode.all</stringProp>",
      "581:         </CSVDataSet>",
      "",
      "[Added Lines]",
      "562:           <boolProp name=\"ignoreFirstLine\">false</boolProp>",
      "565:         <HeaderManager guiclass=\"HeaderPanel\" testclass=\"HeaderManager\" testname=\"HTTP Header Manager\" enabled=\"true\">",
      "566:           <collectionProp name=\"HeaderManager.headers\">",
      "567:             <elementProp name=\"\" elementType=\"Header\">",
      "568:               <stringProp name=\"Header.name\">Accept</stringProp>",
      "569:               <stringProp name=\"Header.value\">*/*</stringProp>",
      "570:             </elementProp>",
      "571:           </collectionProp>",
      "572:         </HeaderManager>",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "631:           </elementProp>",
      "632:           <stringProp name=\"HTTPSampler.domain\">${AS_HOST}</stringProp>",
      "633:           <stringProp name=\"HTTPSampler.port\">${AS_PORT}</stringProp>",
      "636:           <stringProp name=\"HTTPSampler.protocol\">https</stringProp>",
      "637:           <stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>",
      "638:           <stringProp name=\"HTTPSampler.path\">${AS_PATH_TOKEN}</stringProp>",
      "",
      "[Removed Lines]",
      "634:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "635:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "641:           <boolProp name=\"HTTPSampler.auto_redirects\">false</boolProp>",
      "642:           <boolProp name=\"HTTPSampler.use_keepalive\">false</boolProp>",
      "643:           <boolProp name=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>",
      "645:           <stringProp name=\"HTTPSampler.embedded_url_re\"></stringProp>",
      "646:         </HTTPSamplerProxy>",
      "647:         <hashTree>",
      "648:           <RegexExtractor guiclass=\"RegexExtractorGui\" testclass=\"RegexExtractor\" testname=\"Grab AccessToken\" enabled=\"true\">",
      "",
      "[Removed Lines]",
      "644:           <boolProp name=\"HTTPSampler.monitor\">false</boolProp>",
      "",
      "[Added Lines]",
      "634:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "635:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "661:               <stringProp name=\"Header.name\">Authorization</stringProp>",
      "662:               <stringProp name=\"Header.value\">bearer ${AccessToken}</stringProp>",
      "663:             </elementProp>",
      "664:           </collectionProp>",
      "665:         </HeaderManager>",
      "666:         <hashTree/>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "654:             <elementProp name=\"\" elementType=\"Header\">",
      "655:               <stringProp name=\"Header.name\">Accept</stringProp>",
      "656:               <stringProp name=\"Header.value\">application/json</stringProp>",
      "657:             </elementProp>",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "675:             </elementProp>",
      "676:             <stringProp name=\"HTTPSampler.domain\">${APP_SERVER}</stringProp>",
      "677:             <stringProp name=\"HTTPSampler.port\">${APP_PORT}</stringProp>",
      "680:             <stringProp name=\"HTTPSampler.protocol\">https</stringProp>",
      "681:             <stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>",
      "682:             <stringProp name=\"HTTPSampler.path\">${APP_PATH_ACCESS}</stringProp>",
      "",
      "[Removed Lines]",
      "678:             <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "679:             <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "685:             <boolProp name=\"HTTPSampler.auto_redirects\">false</boolProp>",
      "686:             <boolProp name=\"HTTPSampler.use_keepalive\">false</boolProp>",
      "687:             <boolProp name=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>",
      "689:             <stringProp name=\"HTTPSampler.embedded_url_re\"></stringProp>",
      "690:           </HTTPSamplerProxy>",
      "691:           <hashTree>",
      "692:             <ResponseAssertion guiclass=\"AssertionGui\" testclass=\"ResponseAssertion\" testname=\"Assert AS_USERNAME\" enabled=\"true\">",
      "693:               <collectionProp name=\"Asserion.test_strings\">",
      "694:                 <stringProp name=\"240033137\">\\[OIDC_CLAIM_Username\\] =&gt; ${AS_USERNAME}</stringProp>",
      "695:               </collectionProp>",
      "697:               <boolProp name=\"Assertion.assume_success\">false</boolProp>",
      "698:               <intProp name=\"Assertion.test_type\">2</intProp>",
      "699:             </ResponseAssertion>",
      "700:             <hashTree/>",
      "701:           </hashTree>",
      "702:         </hashTree>",
      "714:       </hashTree>",
      "715:       <ResultCollector guiclass=\"ViewResultsFullVisualizer\" testclass=\"ResultCollector\" testname=\"View Results Tree\" enabled=\"true\">",
      "716:         <boolProp name=\"ResultCollector.error_logging\">true</boolProp>",
      "",
      "[Removed Lines]",
      "688:             <boolProp name=\"HTTPSampler.monitor\">false</boolProp>",
      "696:               <stringProp name=\"Assertion.test_field\">Assertion.response_data_as_document</stringProp>",
      "703:         <CSVDataSet guiclass=\"TestBeanGUI\" testclass=\"CSVDataSet\" testname=\"Hosts Data Set\" enabled=\"true\">",
      "704:           <stringProp name=\"filename\">hosts.txt</stringProp>",
      "705:           <stringProp name=\"fileEncoding\"></stringProp>",
      "706:           <stringProp name=\"variableNames\">APP_SERVER</stringProp>",
      "707:           <stringProp name=\"delimiter\">,</stringProp>",
      "708:           <boolProp name=\"quotedData\">false</boolProp>",
      "709:           <boolProp name=\"recycle\">true</boolProp>",
      "710:           <boolProp name=\"stopThread\">false</boolProp>",
      "711:           <stringProp name=\"shareMode\">shareMode.all</stringProp>",
      "712:         </CSVDataSet>",
      "713:         <hashTree/>",
      "",
      "[Added Lines]",
      "681:             <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "682:             <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "689:               <stringProp name=\"Assertion.test_field\">Assertion.response_data</stringProp>",
      "692:               <stringProp name=\"Assertion.custom_message\"></stringProp>",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c26871b483e65b8bef2cfda9b4911889c93d9558",
      "candidate_info": {
        "commit_hash": "c26871b483e65b8bef2cfda9b4911889c93d9558",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/c26871b483e65b8bef2cfda9b4911889c93d9558",
        "files": [
          ".cproject",
          "ChangeLog",
          "Dockerfile",
          "Makefile.in",
          "configure.ac",
          "src/cache/redis.c",
          "src/cache/redis.h"
        ],
        "message": "reorganize Redis code for extensibility\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "configure.ac||configure.ac",
          "src/cache/redis.c||src/cache/redis.c",
          "src/cache/redis.h||src/cache/redis.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: ifeq (@HAVE_LIBHIREDIS@, 1)",
          "18: SRC += \\",
          "20: REDIS_CFLAGS=-DUSE_LIBHIREDIS @HIREDIS_CFLAGS@",
          "21: REDIS_LIBS=@HIREDIS_LIBS@",
          "22: endif",
          "",
          "[Removed Lines]",
          "19:  src/cache/redis.c",
          "",
          "[Added Lines]",
          "19:  src/cache/redis.c",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33: endif",
          "35: HDRS = \\",
          "37:  src/mod_auth_openidc.h \\",
          "38:  src/jose.h \\",
          "39:  src/parse.h \\",
          "40:  src/cache/cache.h \\",
          "43: # Files to include when making a .tar.gz-file for distribution",
          "44: DISTFILES=$(SRC) \\",
          "",
          "[Removed Lines]",
          "36:  $(JWT_HDRS) \\",
          "41:  src/pcre_subst.h \\",
          "",
          "[Added Lines]",
          "40:  src/pcre_subst.h",
          "42: ifeq (@HAVE_LIBHIREDIS@, 1)",
          "43: HDRS += \\",
          "44:  src/cache/redis.h",
          "45: endif",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.9.4],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.10-dev],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/cache/redis.c||src/cache/redis.c": [
          "File: src/cache/redis.c -> src/cache/redis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: #include <http_config.h>",
          "51: #include <http_log.h>",
          "59: extern module AP_MODULE_DECLARE_DATA auth_openidc_module;",
          "63:  char *host_str;",
          "64:  apr_port_t port;",
          "79:  context->mutex = oidc_cache_mutex_create(pool);",
          "81:  context->passwd = NULL;",
          "82:  context->database = -1;",
          "83:  context->connect_timeout.tv_sec = REDIS_CONNECT_TIMEOUT_DEFAULT;",
          "",
          "[Removed Lines]",
          "53: #include \"../mod_auth_openidc.h\"",
          "55: #include \"hiredis/hiredis.h\"",
          "61: typedef struct oidc_cache_cfg_redis_t {",
          "62:  oidc_cache_mutex_t *mutex;",
          "65:  char *passwd;",
          "66:  int database;",
          "67:  struct timeval connect_timeout;",
          "68:  struct timeval timeout;",
          "69:  redisContext *ctx;",
          "70: } oidc_cache_cfg_redis_t;",
          "72: #define REDIS_CONNECT_TIMEOUT_DEFAULT 5",
          "73: #define REDIS_TIMEOUT_DEFAULT 5",
          "76: static void *oidc_cache_redis_cfg_create(apr_pool_t *pool) {",
          "77:  oidc_cache_cfg_redis_t *context = apr_pcalloc(pool,",
          "78:    sizeof(oidc_cache_cfg_redis_t));",
          "80:  context->host_str = NULL;",
          "",
          "[Added Lines]",
          "53: #include \"redis.h\"",
          "59: #define REDIS_CONNECT_TIMEOUT_DEFAULT 5",
          "60: #define REDIS_TIMEOUT_DEFAULT 5",
          "62: typedef struct oidc_cache_cfg_redis_ctx_t {",
          "65:  redisContext *rctx;",
          "66: } oidc_cache_cfg_redis_ctx_t;",
          "68: static oidc_cache_cfg_redis_ctx_t* oidc_cache_redis_cfg_ctx_create(apr_pool_t *pool) {",
          "69:  oidc_cache_cfg_redis_ctx_t *context = apr_pcalloc(pool, sizeof(oidc_cache_cfg_redis_ctx_t));",
          "70:  context->host_str = NULL;",
          "71:  context->port = 0;",
          "72:  context->rctx = NULL;",
          "73:  return context;",
          "74: }",
          "77: static oidc_cache_cfg_redis_t* oidc_cache_redis_cfg_create(apr_pool_t *pool) {",
          "78:  oidc_cache_cfg_redis_t *context = apr_pcalloc(pool, sizeof(oidc_cache_cfg_redis_t));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:  return context;",
          "89: }",
          "102:  cfg->cache_cfg = context;",
          "107:  if (cfg->cache_redis_server == NULL) {",
          "126:   return HTTP_INTERNAL_SERVER_ERROR;",
          "127:  }",
          "132:  if (cfg->cache_redis_password != NULL) {",
          "135:  }",
          "137:  if (cfg->cache_redis_database != -1)",
          "",
          "[Removed Lines]",
          "94: static int oidc_cache_redis_post_config(server_rec *s) {",
          "95:  oidc_cfg *cfg = (oidc_cfg *) ap_get_module_config(s->module_config,",
          "96:    &auth_openidc_module);",
          "98:  if (cfg->cache_cfg != NULL)",
          "99:   return APR_SUCCESS;",
          "100:  oidc_cache_cfg_redis_t *context = oidc_cache_redis_cfg_create(",
          "101:    s->process->pool);",
          "104:  apr_status_t rv = APR_SUCCESS;",
          "108:   oidc_serror(s,",
          "109:     \"cache type is set to \\\"redis\\\", but no valid \" OIDCRedisCacheServer \" setting was found\");",
          "110:   return HTTP_INTERNAL_SERVER_ERROR;",
          "111:  }",
          "113:  char* scope_id;",
          "114:  rv = apr_parse_addr_port(&context->host_str, &scope_id, &context->port,",
          "115:    cfg->cache_redis_server, s->process->pool);",
          "116:  if (rv != APR_SUCCESS) {",
          "117:   oidc_serror(s, \"failed to parse cache server: '%s'\",",
          "118:     cfg->cache_redis_server);",
          "119:   return HTTP_INTERNAL_SERVER_ERROR;",
          "120:  }",
          "122:  if (context->host_str == NULL) {",
          "123:   oidc_serror(s,",
          "124:     \"failed to parse cache server, no hostname specified: '%s'\",",
          "125:     cfg->cache_redis_server);",
          "129:  if (context->port == 0)",
          "130:   context->port = 6379;",
          "133:   context->passwd = apr_pstrdup(s->process->pool,",
          "134:     cfg->cache_redis_password);",
          "",
          "[Added Lines]",
          "90: int oidc_cache_redis_post_config(server_rec *s, oidc_cfg *cfg, const char *name) {",
          "91:  oidc_cache_cfg_redis_t *context = oidc_cache_redis_cfg_create(s->process->pool);",
          "96:   oidc_serror(s, \"cache type is set to \\\"redis\\\", but no valid \" OIDCRedisCacheServer \" setting was found\");",
          "101:   context->passwd = apr_pstrdup(s->process->pool, cfg->cache_redis_password);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "143:  if (cfg->cache_redis_timeout != -1)",
          "144:   context->timeout.tv_sec = cfg->cache_redis_timeout;",
          "147:   return HTTP_INTERNAL_SERVER_ERROR;",
          "149:  return OK;",
          "150: }",
          "155: int oidc_cache_redis_child_init(apr_pool_t *p, server_rec *s) {",
          "161:  return oidc_cache_mutex_child_init(p, s, context->mutex);",
          "",
          "[Removed Lines]",
          "146:  if (oidc_cache_mutex_post_config(s, context->mutex, \"redis\") == FALSE)",
          "156:  oidc_cfg *cfg = ap_get_module_config(s->module_config,",
          "157:    &auth_openidc_module);",
          "158:  oidc_cache_cfg_redis_t *context = (oidc_cache_cfg_redis_t *) cfg->cache_cfg;",
          "",
          "[Added Lines]",
          "113:  if (oidc_cache_mutex_post_config(s, context->mutex, name) == FALSE)",
          "119: static apr_status_t oidc_cache_redis_connect(request_rec *r, oidc_cache_cfg_redis_t *context);",
          "124: static int oidc_cache_redis_post_config_impl(server_rec *s) {",
          "125:  apr_status_t rv = APR_SUCCESS;",
          "126:  oidc_cache_cfg_redis_t *context = NULL;",
          "127:  oidc_cache_cfg_redis_ctx_t *rctx = NULL;",
          "128:  oidc_cfg *cfg = (oidc_cfg*) ap_get_module_config(s->module_config, &auth_openidc_module);",
          "130:  if (cfg->cache_cfg != NULL)",
          "131:   return OK;",
          "133:  if (oidc_cache_redis_post_config(s, cfg, \"redis\") != OK)",
          "134:   return HTTP_INTERNAL_SERVER_ERROR;",
          "136:  context = cfg->cache_cfg;",
          "137:  rctx = oidc_cache_redis_cfg_ctx_create(s->process->pool);",
          "138:  context->ctx = rctx;",
          "141:  if (cfg->cache_redis_server == NULL) {",
          "142:   oidc_serror(s, \"cache type is set to \\\"redis\\\", but no valid \" OIDCRedisCacheServer \" setting was found\");",
          "143:   return HTTP_INTERNAL_SERVER_ERROR;",
          "144:  }",
          "146:  char *scope_id;",
          "147:  rv =",
          "148:    apr_parse_addr_port(&rctx->host_str, &scope_id, &rctx->port, cfg->cache_redis_server, s->process->pool);",
          "149:  if (rv != APR_SUCCESS) {",
          "150:   oidc_serror(s, \"failed to parse cache server: '%s'\", cfg->cache_redis_server);",
          "151:   return HTTP_INTERNAL_SERVER_ERROR;",
          "152:  }",
          "154:  if (rctx->host_str == NULL) {",
          "155:   oidc_serror(s, \"failed to parse cache server, no hostname specified: '%s'\", cfg->cache_redis_server);",
          "156:   return HTTP_INTERNAL_SERVER_ERROR;",
          "157:  }",
          "159:  if (rctx->port == 0)",
          "160:   rctx->port = 6379;",
          "162:  context->connect = oidc_cache_redis_connect;",
          "163:  context->command = oidc_cache_redis_command;",
          "165:  return OK;",
          "166: }",
          "172:  oidc_cfg *cfg = ap_get_module_config(s->module_config, &auth_openidc_module);",
          "173:  oidc_cache_cfg_redis_t *context = (oidc_cache_cfg_redis_t*) cfg->cache_cfg;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "169:  return apr_psprintf(pool, \"%s:%s\", section, key);",
          "170: }",
          "",
          "[Removed Lines]",
          "167: static char *oidc_cache_redis_get_key(apr_pool_t *pool, const char *section,",
          "168:   const char *key) {",
          "",
          "[Added Lines]",
          "182: static char* oidc_cache_redis_get_key(apr_pool_t *pool, const char *section, const char *key) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "175: static apr_status_t oidc_cache_redis_free(oidc_cache_cfg_redis_t *context) {",
          "179:  }",
          "180:  return APR_SUCCESS;",
          "181: }",
          "",
          "[Removed Lines]",
          "176:  if ((context != NULL) && (context->ctx != NULL)) {",
          "177:   redisFree(context->ctx);",
          "178:   context->ctx = NULL;",
          "",
          "[Added Lines]",
          "190:  oidc_cache_cfg_redis_ctx_t *rctx = NULL;",
          "191:  if (context != NULL) {",
          "192:   rctx = (oidc_cache_cfg_redis_ctx_t*) context->ctx;",
          "193:   if ((rctx != NULL) && (rctx->rctx != NULL)) {",
          "194:    redisFree(rctx->rctx);",
          "195:    rctx->rctx = NULL;",
          "196:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "199:  redisReply *reply = NULL;",
          "204:   oidc_debug(r, \"calling redisConnectWithTimeout\");",
          "212:    oidc_cache_redis_free(context);",
          "213:   } else {",
          "219:    if (context->passwd != NULL) {",
          "221:     if ((reply == NULL) || (reply->type == REDIS_REPLY_ERROR))",
          "226:     else",
          "232:     oidc_cache_redis_reply_free(&reply);",
          "",
          "[Removed Lines]",
          "196: static apr_status_t oidc_cache_redis_connect(request_rec *r,",
          "197:   oidc_cache_cfg_redis_t *context) {",
          "201:  if (context->ctx == NULL) {",
          "205:   context->ctx = redisConnectWithTimeout(context->host_str, context->port, context->connect_timeout);",
          "208:   if ((context->ctx == NULL) || (context->ctx->err != 0)) {",
          "209:    oidc_error(r, \"failed to connect to Redis server (%s:%d): '%s'\",",
          "210:      context->host_str, context->port,",
          "211:      context->ctx != NULL ? context->ctx->errstr : \"\");",
          "215:    oidc_debug(r, \"successfully connected to Redis server (%s:%d)\",",
          "216:      context->host_str, context->port);",
          "220:     reply = redisCommand(context->ctx, \"AUTH %s\", context->passwd);",
          "222:      oidc_error(r,",
          "223:        \"Redis AUTH command (%s:%d) failed: '%s' [%s]\",",
          "224:        context->host_str, context->port,",
          "225:        context->ctx->errstr, reply ? reply->str : \"<n/a>\");",
          "227:      oidc_debug(r,",
          "228:        \"successfully authenticated to the Redis server: %s\",",
          "229:        reply ? reply->str : \"<n/a>\");",
          "",
          "[Added Lines]",
          "214: static apr_status_t oidc_cache_redis_connect(request_rec *r, oidc_cache_cfg_redis_t *context) {",
          "216:  oidc_cache_cfg_redis_ctx_t *rctx = (oidc_cache_cfg_redis_ctx_t*) context->ctx;",
          "219:  if (rctx->rctx == NULL) {",
          "223:   rctx->rctx = redisConnectWithTimeout(rctx->host_str, rctx->port, context->connect_timeout);",
          "226:   if ((rctx->rctx == NULL) || (rctx->rctx->err != 0)) {",
          "227:    oidc_error(r, \"failed to connect to Redis server (%s:%d): '%s'\", rctx->host_str, rctx->port, rctx->rctx != NULL ? rctx->rctx->errstr : \"\");",
          "231:    oidc_debug(r, \"successfully connected to Redis server (%s:%d)\", rctx->host_str, rctx->port);",
          "235:     reply = redisCommand(rctx->rctx, \"AUTH %s\", context->passwd);",
          "237:      oidc_error(r, \"Redis AUTH command (%s:%d) failed: '%s' [%s]\", rctx->host_str, rctx->port, rctx->rctx->errstr,",
          "238:           reply ? reply->str : \"<n/a>\");",
          "240:      oidc_debug(r, \"successfully authenticated to the Redis server: %s\",",
          "241:           reply ? reply->str : \"<n/a>\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "236:    if (context->database != -1) {",
          "239:     if ((reply == NULL) || (reply->type == REDIS_REPLY_ERROR))",
          "244:     else",
          "250:     oidc_cache_redis_reply_free(&reply);",
          "251:    }",
          "256:   }",
          "257:  }",
          "260: }",
          "262: #define OIDC_REDIS_MAX_TRIES 2",
          "",
          "[Removed Lines]",
          "237:     reply = redisCommand(context->ctx, \"SELECT %d\",",
          "238:       context->database);",
          "240:      oidc_error(r,",
          "241:        \"Redis SELECT command (%s:%d) failed: '%s' [%s]\",",
          "242:        context->host_str, context->port,",
          "243:        context->ctx->errstr, reply ? reply->str : \"<n/a>\");",
          "245:      oidc_debug(r,",
          "246:        \"successfully selected database %d on the Redis server: %s\",",
          "247:        context->database, reply ? reply->str : \"<n/a>\");",
          "253:    if (redisSetTimeout(context->ctx, context->timeout) != REDIS_OK)",
          "254:     oidc_error(r, \"redisSetTimeout failed: %s\", context->ctx->errstr);",
          "259:  return (context->ctx != NULL) ? APR_SUCCESS : APR_EGENERAL;",
          "",
          "[Added Lines]",
          "249:     reply = redisCommand(rctx->rctx, \"SELECT %d\", context->database);",
          "251:      oidc_error(r, \"Redis SELECT command (%s:%d) failed: '%s' [%s]\", rctx->host_str, rctx->port, rctx->rctx->errstr,",
          "252:           reply ? reply->str : \"<n/a>\");",
          "254:      oidc_debug(r, \"successfully selected database %d on the Redis server: %s\", context->database,",
          "255:           reply ? reply->str : \"<n/a>\");",
          "261:    if (redisSetTimeout(rctx->rctx, context->timeout) != REDIS_OK)",
          "262:     oidc_error(r, \"redisSetTimeout failed: %s\", rctx->rctx->errstr);",
          "267:  return (rctx->rctx != NULL) ? APR_SUCCESS : APR_EGENERAL;",
          "268: }",
          "270: redisReply* oidc_cache_redis_command(request_rec *r, oidc_cache_cfg_redis_t *context, char **errstr,",
          "271:   const char *format, va_list ap) {",
          "272:  oidc_cache_cfg_redis_ctx_t *rctx = (oidc_cache_cfg_redis_ctx_t*) context->ctx;",
          "273:  redisReply *reply = redisvCommand(rctx->rctx, format, ap);",
          "275:  return reply;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "270:  redisReply *reply = NULL;",
          "271:  int i = 0;",
          "272:  va_list ap;",
          "",
          "[Removed Lines]",
          "267: static redisReply* oidc_cache_redis_command(request_rec *r,",
          "268:   oidc_cache_cfg_redis_t *context, const char *format, ...) {",
          "",
          "[Added Lines]",
          "283: static redisReply* oidc_cache_redis_exec(request_rec *r, oidc_cache_cfg_redis_t *context,",
          "284:   const char *format, ...) {",
          "286:  oidc_cache_cfg_redis_ctx_t *rctx = (oidc_cache_cfg_redis_ctx_t*) context->ctx;",
          "288:  char *errstr = NULL;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "275:  for (i = 0; i < OIDC_REDIS_MAX_TRIES; i++) {",
          "279:    break;",
          "281:   va_start(ap, format);",
          "284:   va_end(ap);",
          "",
          "[Removed Lines]",
          "278:   if (oidc_cache_redis_connect(r, context) != APR_SUCCESS)",
          "283:   reply = redisvCommand(context->ctx, format, ap);",
          "",
          "[Added Lines]",
          "296:   if (context->connect(r, context) != APR_SUCCESS)",
          "301:   reply = context->command(r, context, &errstr, format, ap);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "289:    break;",
          "295:     reply ? reply->str : \"<n/a>\");",
          "",
          "[Removed Lines]",
          "292:   oidc_error(r,",
          "293:     \"Redis command (attempt=%d to %s:%d) failed, disconnecting: '%s' [%s]\",",
          "294:     i, context->host_str, context->port, context->ctx->errstr,",
          "",
          "[Added Lines]",
          "310:   oidc_error(r, \"Redis command (attempt=%d to %s:%d) failed, disconnecting: '%s' [%s]\", i, rctx->host_str, rctx->port, errstr,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "316:  redisReply *reply = NULL;",
          "317:  apr_byte_t rv = FALSE;",
          "",
          "[Removed Lines]",
          "310: static apr_byte_t oidc_cache_redis_get(request_rec *r, const char *section,",
          "311:   const char *key, const char **value) {",
          "313:  oidc_cfg *cfg = ap_get_module_config(r->server->module_config,",
          "314:    &auth_openidc_module);",
          "315:  oidc_cache_cfg_redis_t *context = (oidc_cache_cfg_redis_t *) cfg->cache_cfg;",
          "",
          "[Added Lines]",
          "326: apr_byte_t oidc_cache_redis_get(request_rec *r, const char *section, const char *key,",
          "327:   const char **value) {",
          "329:  oidc_cfg *cfg = ap_get_module_config(r->server->module_config, &auth_openidc_module);",
          "330:  oidc_cache_cfg_redis_t *context = (oidc_cache_cfg_redis_t*) cfg->cache_cfg;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "324:  reply =",
          "327:  if (reply == NULL)",
          "328:   goto end;",
          "",
          "[Removed Lines]",
          "325:    oidc_cache_redis_command(r, context, \"GET %s\", oidc_cache_redis_get_key(r->pool, section, key));",
          "",
          "[Added Lines]",
          "340:    oidc_cache_redis_exec(r, context, \"GET %s\", oidc_cache_redis_get_key(r->pool, section, key));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "340:  }",
          "348:   goto end;",
          "349:  }",
          "",
          "[Removed Lines]",
          "343:  if ((reply->str == NULL)",
          "344:    || (reply->len != strlen(reply->str))) {",
          "345:   oidc_error(r,",
          "346:     \"redisCommand reply->len (%d) != strlen(reply->str): '%s'\",",
          "347:     (int )reply->len, reply->str);",
          "",
          "[Added Lines]",
          "358:  if ((reply->str == NULL) || (reply->len != strlen(reply->str))) {",
          "359:   oidc_error(r, \"redisCommand reply->len (%d) != strlen(reply->str): '%s'\", (int )reply->len, reply->str);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "377:  redisReply *reply = NULL;",
          "378:  apr_byte_t rv = FALSE;",
          "379:  apr_uint32_t timeout;",
          "",
          "[Removed Lines]",
          "371: static apr_byte_t oidc_cache_redis_set(request_rec *r, const char *section,",
          "372:   const char *key, const char *value, apr_time_t expiry) {",
          "374:  oidc_cfg *cfg = ap_get_module_config(r->server->module_config,",
          "375:    &auth_openidc_module);",
          "376:  oidc_cache_cfg_redis_t *context = (oidc_cache_cfg_redis_t *) cfg->cache_cfg;",
          "",
          "[Added Lines]",
          "383: apr_byte_t oidc_cache_redis_set(request_rec *r, const char *section, const char *key,",
          "384:   const char *value, apr_time_t expiry) {",
          "386:  oidc_cfg *cfg = ap_get_module_config(r->server->module_config, &auth_openidc_module);",
          "387:  oidc_cache_cfg_redis_t *context = (oidc_cache_cfg_redis_t*) cfg->cache_cfg;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "389:   reply =",
          "392:  } else {",
          "",
          "[Removed Lines]",
          "390:     oidc_cache_redis_command(r, context, \"DEL %s\", oidc_cache_redis_get_key(r->pool, section, key));",
          "",
          "[Added Lines]",
          "401:     oidc_cache_redis_exec(r, context, \"DEL %s\", oidc_cache_redis_get_key(r->pool, section, key));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "398:   reply =",
          "401:  }",
          "",
          "[Removed Lines]",
          "399:     oidc_cache_redis_command(r, context, \"SETEX %s %d %s\", oidc_cache_redis_get_key(r->pool, section, key), timeout, value);",
          "",
          "[Added Lines]",
          "410:     oidc_cache_redis_exec(r, context, \"SETEX %s %d %s\", oidc_cache_redis_get_key(r->pool, section, key), timeout, value);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "412:  return rv;",
          "413: }",
          "420:  if (context != NULL) {",
          "427:   oidc_cache_mutex_destroy(s, context->mutex);",
          "428:  }",
          "430:  return APR_SUCCESS;",
          "431: }",
          "433: oidc_cache_t oidc_cache_redis = {",
          "441: };",
          "",
          "[Removed Lines]",
          "415: static int oidc_cache_redis_destroy(server_rec *s) {",
          "416:  oidc_cfg *cfg = (oidc_cfg *) ap_get_module_config(s->module_config,",
          "417:    &auth_openidc_module);",
          "418:  oidc_cache_cfg_redis_t *context = (oidc_cache_cfg_redis_t *) cfg->cache_cfg;",
          "422:   if (context->ctx != NULL) {",
          "423:    oidc_cache_mutex_lock(s, context->mutex);",
          "424:    oidc_cache_redis_free(context);",
          "425:    oidc_cache_mutex_unlock(s, context->mutex);",
          "426:   }",
          "434:   \"redis\",",
          "435:   1,",
          "436:   oidc_cache_redis_post_config,",
          "437:   oidc_cache_redis_child_init,",
          "438:   oidc_cache_redis_get,",
          "439:   oidc_cache_redis_set,",
          "440:   oidc_cache_redis_destroy",
          "",
          "[Added Lines]",
          "426: static int oidc_cache_redis_destroy_impl(server_rec *s) {",
          "427:  oidc_cfg *cfg = (oidc_cfg*) ap_get_module_config(s->module_config, &auth_openidc_module);",
          "428:  oidc_cache_cfg_redis_t *context = (oidc_cache_cfg_redis_t*) cfg->cache_cfg;",
          "431:   oidc_cache_mutex_lock(s, context->mutex);",
          "432:   oidc_cache_redis_free(context);",
          "433:   oidc_cache_mutex_unlock(s, context->mutex);",
          "435:   cfg->cache_cfg = NULL;",
          "442:  \"redis\",",
          "443:  1,",
          "444:  oidc_cache_redis_post_config_impl,",
          "445:  oidc_cache_redis_child_init,",
          "446:  oidc_cache_redis_get,",
          "447:  oidc_cache_redis_set,",
          "448:  oidc_cache_redis_destroy_impl",
          "",
          "---------------"
        ],
        "src/cache/redis.h||src/cache/redis.h": [
          "File: src/cache/redis.h -> src/cache/redis.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: #include \"hiredis/hiredis.h\"",
          "48: #include \"../mod_auth_openidc.h\"",
          "50: typedef struct oidc_cache_cfg_redis_t oidc_cache_cfg_redis_t;",
          "52: typedef apr_status_t (*oidc_cache_redis_connect_function_t)(request_rec*, oidc_cache_cfg_redis_t*);",
          "53: typedef redisReply* (*oidc_cache_redis_command_function_t)(request_rec*, oidc_cache_cfg_redis_t*,",
          "54:   char**, const char *format, va_list ap);",
          "56: typedef struct oidc_cache_cfg_redis_t {",
          "57:  oidc_cache_mutex_t *mutex;",
          "58:  char *passwd;",
          "59:  int database;",
          "60:  struct timeval connect_timeout;",
          "61:  struct timeval timeout;",
          "62:  void *ctx;",
          "63:  oidc_cache_redis_connect_function_t connect;",
          "64:  oidc_cache_redis_command_function_t command;",
          "65: } oidc_cache_cfg_redis_t;",
          "67: int oidc_cache_redis_post_config(server_rec *s, oidc_cfg *cfg, const char *name);",
          "68: int oidc_cache_redis_child_init(apr_pool_t *p, server_rec *s);",
          "69: redisReply* oidc_cache_redis_command(request_rec *r, oidc_cache_cfg_redis_t *context, char **errstr,",
          "70:   const char *format, va_list ap);",
          "71: apr_byte_t oidc_cache_redis_get(request_rec *r, const char *section, const char *key,",
          "72:   const char **value);",
          "73: apr_byte_t oidc_cache_redis_set(request_rec *r, const char *section, const char *key,",
          "74:   const char *value, apr_time_t expiry);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d13ee0e4bd2cef94c4d2b55829310175288e0bdf",
      "candidate_info": {
        "commit_hash": "d13ee0e4bd2cef94c4d2b55829310175288e0bdf",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/d13ee0e4bd2cef94c4d2b55829310175288e0bdf",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/mod_auth_openidc.c"
        ],
        "message": "add check to make sure URLs do not contain unencoded Unicode chars\n\nsee #796; thanks @cnico; bump to 2.4.11.1.rc1\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11.1rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11.1rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2297:  oidc_proto_state_t *proto_state = oidc_proto_state_new();",
          "2298:  oidc_proto_state_set_original_url(proto_state, original_url);",
          "2299:  oidc_proto_state_set_original_method(proto_state,",
          "2300:    oidc_original_request_method(r, c, TRUE));",
          "2301:  oidc_proto_state_set_issuer(proto_state, provider->issuer);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2300:  if (oidc_proto_state_get_original_url(proto_state) == NULL) {",
          "2301:   oidc_error(r, \"could not store the current URL in the state: most probably you need to ensure that it does not contain unencoded Unicode characters e.g. by forcing IE 11 to encode all URL characters\");",
          "2302:   return HTTP_INTERNAL_SERVER_ERROR;",
          "2303:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "16e33e5bd0b7a7eb663a1981fbc85401781479e4",
      "candidate_info": {
        "commit_hash": "16e33e5bd0b7a7eb663a1981fbc85401781479e4",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/16e33e5bd0b7a7eb663a1981fbc85401781479e4",
        "files": [
          "AUTHORS",
          "ChangeLog",
          "configure.ac",
          "test/test.c"
        ],
        "message": "fix make check; add @smanolache to the AUTHORS file\n\nbump to 2.4.11.1rc4\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "test/test.c||test/test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11.1rc3],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11.1rc4],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "test/test.c||test/test.c": [
          "File: test/test.c -> test/test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1731:  request->server->process = apr_pcalloc(request->pool,",
          "1732:    sizeof(struct process_rec));",
          "1733:  request->server->process->pool = request->pool;",
          "1734:  request->connection = apr_pcalloc(request->pool, sizeof(struct conn_rec));",
          "1735:  request->connection->bucket_alloc = apr_bucket_alloc_create(request->pool);",
          "1736:  request->connection->local_addr = apr_pcalloc(request->pool,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1734:  request->server->process->pconf = request->pool;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ce76025aa6f93ad464257b4ed2ec5f3cba363898",
      "candidate_info": {
        "commit_hash": "ce76025aa6f93ad464257b4ed2ec5f3cba363898",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/ce76025aa6f93ad464257b4ed2ec5f3cba363898",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/cache/common.c",
          "src/session.c",
          "test/test.c"
        ],
        "message": "release 2.4.4; avoid GCC 9 compiler warnings\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/cache/common.c||src/cache/common.c",
          "src/session.c||src/session.c",
          "test/test.c||test/test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/cache/common.c||src/cache/common.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/cache/common.c||src/cache/common.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.4rc8],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.4],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/cache/common.c||src/cache/common.c": [
          "File: src/cache/common.c -> src/cache/common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "661: out:",
          "663:  msg = apr_psprintf(r->pool, \"%d bytes in %s cache backend for %skey %s\",",
          "666:  if (rc == TRUE)",
          "667:   oidc_debug(r, \"successfully stored %s\", msg);",
          "668:  else",
          "",
          "[Removed Lines]",
          "664:    value ? (int) strlen(value) : 0, cfg->cache->name,",
          "665:      encrypted ? \"encrypted \" : \"\", key);",
          "",
          "[Added Lines]",
          "664:    (value ? (int) strlen(value) : 0),",
          "665:    (cfg->cache->name ? cfg->cache->name : \"\"),",
          "666:    (encrypted ? \"encrypted \" : \"\"), (key ? key : \"\"));",
          "",
          "---------------"
        ],
        "src/session.c||src/session.c": [
          "File: src/session.c -> src/session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "120: static void oidc_session_clear(request_rec *r, oidc_session_t *z) {",
          "122:  z->remote_user = NULL;",
          "124:  z->expiry = 0;",
          "",
          "[Removed Lines]",
          "121:  strncpy(z->uuid, \"\", strlen(\"\"));",
          "",
          "[Added Lines]",
          "121:  z->uuid[0] = '\\0';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138:  if ((rc == TRUE) && (s_json != NULL)) {",
          "139:   rc = oidc_session_decode(r, c, z, s_json, FALSE);",
          "140:   if (rc == TRUE) {",
          "144:    oidc_session_get(r, z, OIDC_SESSION_SESSION_ID, &stored_uuid);",
          "",
          "[Removed Lines]",
          "141:    strncpy(z->uuid, uuid, strlen(uuid));",
          "",
          "[Added Lines]",
          "141:    strncpy(z->uuid, uuid, APR_UUID_FORMATTED_LENGTH);",
          "142:    z->uuid[APR_UUID_FORMATTED_LENGTH] = '\\0';",
          "",
          "---------------"
        ],
        "test/test.c||test/test.c": [
          "File: test/test.c -> test/test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: extern module AP_MODULE_DECLARE_DATA auth_openidc_module;",
          "69: static int test_nr_run = 0;",
          "71: static int TST_RC;",
          "73: #define TST_FORMAT(fmt) \\",
          "",
          "[Removed Lines]",
          "70: static char TST_ERR_MSG[512];",
          "",
          "[Added Lines]",
          "70: static char TST_ERR_MSG[4096];",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c40fcf8bab3a606e4639d5d917b4df5bb867b2f6",
      "candidate_info": {
        "commit_hash": "c40fcf8bab3a606e4639d5d917b4df5bb867b2f6",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/c40fcf8bab3a606e4639d5d917b4df5bb867b2f6",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/config.c",
          "test/stub.c"
        ],
        "message": "make sure the module compiles with Apache 2.2 for passphrase exec:\n\nbump to 2.4.6-dev\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/config.c||src/config.c",
          "test/stub.c||test/stub.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.5],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.6-dev],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "440:  oidc_cfg *cfg = (oidc_cfg *) ap_get_module_config(",
          "441:    cmd->server->module_config, &auth_openidc_module);",
          "444:  if (arglen > 5 && strncmp(arg, \"exec:\", 5) == 0) {",
          "445:   if (apr_tokenize_to_argv(arg + 5, &argv, cmd->temp_pool) != APR_SUCCESS) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "443: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "462:   passphrase = result;",
          "463:  } else {",
          "464:   passphrase = arg;",
          "465:  }",
          "467:  return ap_set_string_slot(cmd, cfg, passphrase);",
          "468: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "465: #endif",
          "467: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "469: #endif",
          "",
          "---------------"
        ],
        "test/stub.c||test/stub.c": [
          "File: test/stub.c -> test/stub.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:  return 0;",
          "38: }",
          "40: AP_DECLARE(char *) ap_get_exec_line(apr_pool_t *p, const char *cmd,",
          "41:   const char * const *argv) {",
          "42:  return NULL;",
          "43: }",
          "45: AP_DECLARE(char *) ap_getword(apr_pool_t *atrans, const char **line, char stop) {",
          "46:  const char *pos = *line;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "45: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}