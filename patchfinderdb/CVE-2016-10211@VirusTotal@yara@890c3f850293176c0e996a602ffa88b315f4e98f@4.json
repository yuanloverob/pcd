{
  "cve_id": "CVE-2016-10211",
  "cve_desc": "libyara/grammar.y in YARA 3.5.0 allows remote attackers to cause a denial of service (use-after-free and application crash) via a crafted rule that is mishandled in the yr_parser_lookup_loop_variable function.",
  "repo": "VirusTotal/yara",
  "patch_hash": "890c3f850293176c0e996a602ffa88b315f4e98f",
  "patch_info": {
    "commit_hash": "890c3f850293176c0e996a602ffa88b315f4e98f",
    "repo": "VirusTotal/yara",
    "commit_url": "https://github.com/VirusTotal/yara/commit/890c3f850293176c0e996a602ffa88b315f4e98f",
    "files": [
      "libyara/grammar.c",
      "libyara/grammar.y"
    ],
    "message": "Fix issue #575",
    "before_after_code_files": [
      "libyara/grammar.c||libyara/grammar.c",
      "libyara/grammar.y||libyara/grammar.y"
    ]
  },
  "patch_diff": {
    "libyara/grammar.c||libyara/grammar.c": [
      "File: libyara/grammar.c -> libyara/grammar.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "547: #define YYFINAL  2",
      "552: #define YYNTOKENS  72",
      "554: #define YYNNTS  41",
      "",
      "[Removed Lines]",
      "549: #define YYLAST   408",
      "556: #define YYNRULES  121",
      "558: #define YYNSTATES  209",
      "",
      "[Added Lines]",
      "549: #define YYLAST   406",
      "556: #define YYNRULES  122",
      "558: #define YYNSTATES  210",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "612:      472,   485,   502,   503,   509,   508,   524,   523,   539,   553,",
      "613:      554,   559,   560,   561,   562,   567,   652,   698,   756,   801,",
      "614:      802,   806,   831,   867,   913,   935,   944,   953,   968,   980,",
      "622: };",
      "623: #endif",
      "",
      "[Removed Lines]",
      "615:      994,  1007,  1019,  1049,  1018,  1163,  1162,  1241,  1247,  1254,",
      "616:     1253,  1316,  1315,  1376,  1385,  1394,  1403,  1412,  1421,  1430,",
      "617:     1434,  1442,  1443,  1448,  1470,  1482,  1498,  1497,  1503,  1514,",
      "618:     1515,  1520,  1527,  1538,  1539,  1543,  1551,  1555,  1565,  1579,",
      "619:     1595,  1605,  1614,  1639,  1651,  1663,  1679,  1691,  1707,  1752,",
      "620:     1771,  1789,  1807,  1825,  1851,  1869,  1879,  1889,  1899,  1909,",
      "621:     1919,  1929",
      "",
      "[Added Lines]",
      "615:      994,  1007,  1018,  1024,  1054,  1023,  1168,  1167,  1246,  1252,",
      "616:     1259,  1258,  1321,  1320,  1381,  1390,  1399,  1408,  1417,  1426,",
      "617:     1435,  1439,  1447,  1448,  1453,  1475,  1487,  1503,  1502,  1508,",
      "618:     1519,  1520,  1525,  1532,  1543,  1544,  1548,  1556,  1560,  1570,",
      "619:     1584,  1600,  1610,  1619,  1644,  1656,  1668,  1684,  1696,  1712,",
      "620:     1757,  1776,  1794,  1812,  1830,  1856,  1874,  1884,  1894,  1904,",
      "621:     1914,  1924,  1934",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "672: #define yypact_value_is_default(Yystate) \\",
      "673:   (!!((Yystate) == (-73)))",
      "677: #define yytable_value_is_error(Yytable_value) \\",
      "678:   0",
      "",
      "[Removed Lines]",
      "675: #define YYTABLE_NINF -94",
      "",
      "[Added Lines]",
      "675: #define YYTABLE_NINF -95",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "682: static const yytype_int16 yypact[] =",
      "683: {",
      "705: };",
      "",
      "[Removed Lines]",
      "684:      -73,    79,   -73,   -32,    -4,   -73,   -73,    94,   -73,   -73,",
      "685:      -73,   -73,    13,   -73,   -73,   -73,   -73,    -8,    72,     6,",
      "686:      -73,    78,   111,   -73,    61,   122,   123,    82,   -73,    90,",
      "687:      123,   -73,   147,   150,    16,   -73,    96,   147,   -73,   101,",
      "688:       97,   -73,   -73,   -73,   -73,   151,    53,   -73,    48,   -73,",
      "689:      -73,   -73,   149,   145,   -73,    -9,   -73,   103,   107,   -73,",
      "690:      -73,   106,   -73,   -73,   -73,   -73,   -73,   -73,   110,   -73,",
      "691:      -73,   135,    48,   135,    48,   -33,   -73,    64,   -73,   144,",
      "692:      306,   -73,   -73,   135,   108,   135,   135,   135,   135,    -7,",
      "693:      322,   -73,   -73,   -73,    64,   117,   163,   168,   135,    48,",
      "694:      -73,   -73,    -6,   167,   135,   135,   135,   135,   135,   135,",
      "695:      135,   135,   135,   135,   135,   135,   135,   135,   135,   135,",
      "696:      135,    86,    86,   322,   135,   -73,   243,   261,   183,   203,",
      "697:      159,    -6,   -73,   -73,   -73,   279,   121,   125,    95,    48,",
      "698:       48,   -73,   -73,   -73,   -73,   322,   337,   351,   -43,   322,",
      "699:      322,   322,   322,   322,   322,    40,    40,    58,    58,   -73,",
      "700:      -73,   -73,   -73,   -73,   -73,   -73,   -73,   129,   -73,   -73,",
      "701:      -73,   -73,   128,   -73,   -73,    48,   152,   -73,    15,   135,",
      "702:      131,   -73,    95,   -73,   -73,    71,   -73,   223,   135,   133,",
      "703:      -73,   132,   -73,    15,   -73,    73,   129,   -73,    48,   -73,",
      "704:      -73,   135,   134,    31,   322,    48,   -73,    49,   -73",
      "",
      "[Added Lines]",
      "684:      -73,    90,   -73,   -32,   -10,   -73,   -73,    93,   -73,   -73,",
      "685:      -73,   -73,     1,   -73,   -73,   -73,   -73,   -49,     7,   -36,",
      "686:      -73,    20,    26,   -73,   -28,    92,    46,     4,   -73,    40,",
      "687:       46,   -73,   100,   119,    16,   -73,    72,   100,   -73,    77,",
      "688:       83,   -73,   -73,   -73,   -73,   134,    59,   -73,    48,   -73,",
      "689:      -73,   -73,   133,   136,   -73,   -18,   -73,    88,    95,   -73,",
      "690:      -73,    91,   -73,   -73,   -73,   -73,   -73,   -73,   102,   -73,",
      "691:      -73,   126,    48,   126,    48,   -44,   -73,    85,   -73,   127,",
      "692:      297,   -73,   -73,   126,   110,   126,   126,   126,   126,     2,",
      "693:      313,   -73,   -73,   -73,    85,   111,   154,   172,   126,    48,",
      "694:      -73,   -73,    -6,   162,   126,   126,   126,   126,   126,   126,",
      "695:      126,   126,   126,   126,   126,   126,   126,   126,   126,   126,",
      "696:      126,    60,    60,   313,   126,   -73,   234,   252,   174,   194,",
      "697:      -73,   153,    -6,   -73,   -73,   -73,   270,   117,   120,   108,",
      "698:       48,    48,   -73,   -73,   -73,   -73,   313,   328,   342,   349,",
      "699:      313,   313,   313,   313,   313,   313,   113,   113,    53,    53,",
      "700:      -73,   -73,   -73,   -73,   -73,   -73,   -73,   -73,   121,   -73,",
      "701:      -73,   -73,   -73,   124,   -73,   -73,    48,   151,   -73,    -1,",
      "702:      126,   125,   -73,   108,   -73,   -73,    18,   -73,   214,   126,",
      "703:      129,   -73,   143,   -73,    -1,   -73,    63,   121,   -73,    48,",
      "704:      -73,   -73,   126,   144,    31,   313,    48,   -73,    33,   -73",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "714:       23,    22,    12,    24,     0,    14,     0,     0,    10,     0,",
      "715:       13,    25,     0,     0,     0,    26,     0,    15,    32,     0,",
      "716:        0,    28,    27,    30,    31,     0,    34,    33,     0,    11,",
      "723:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,",
      "724:        0,    35,    37,    60,     0,    61,     0,     0,     0,     0,",
      "733: };",
      "736: static const yytype_int16 yypgoto[] =",
      "737: {",
      "742:      -67",
      "743: };",
      "",
      "[Removed Lines]",
      "717:       29,    38,     0,     0,    45,    59,   103,   105,   107,   100,",
      "718:      101,     0,   102,    53,    97,    98,    94,    95,     0,    55,",
      "719:       56,     0,     0,     0,     0,   108,   121,    16,    54,     0,",
      "720:       79,    39,    39,     0,     0,     0,     0,     0,     0,     0,",
      "721:       93,   109,    68,   118,     0,    54,    79,     0,     0,    49,",
      "722:       71,    69,     0,     0,     0,     0,     0,     0,     0,     0,",
      "725:        0,     0,    80,    96,    46,     0,     0,    50,    51,     0,",
      "726:        0,    88,    86,    67,    57,    58,   117,   115,   116,    77,",
      "727:       78,    73,    75,    74,    76,   119,   120,   110,   111,   112,",
      "728:      113,   114,    42,    41,    43,    44,    40,     0,   104,   106,",
      "729:       99,    62,     0,    47,    48,     0,    72,    70,     0,     0,",
      "730:        0,    65,    52,    91,    92,     0,    89,     0,     0,     0,",
      "731:       82,     0,    87,     0,    83,     0,    84,    63,     0,    90,",
      "732:       81,     0,     0,     0,    85,     0,    66,     0,    64",
      "738:      -73,   -73,   199,   218,   -73,   -73,   -73,   -73,   -73,   -73,",
      "739:      -73,   -73,   -73,   -73,   192,   -73,   186,   -73,   -73,   142,",
      "740:      -73,   -73,   -73,   -73,   126,   -48,   -72,   -73,   -73,   -73,",
      "741:      -73,   -73,   -73,    50,   -73,   100,   -73,   -73,    35,   164,",
      "",
      "[Added Lines]",
      "717:       29,    38,     0,     0,    45,    59,   104,   106,   108,   101,",
      "718:      102,     0,   103,    53,    98,    99,    95,    96,     0,    55,",
      "719:       56,     0,     0,     0,     0,   109,   122,    16,    54,     0,",
      "720:       80,    39,    39,     0,     0,     0,     0,     0,     0,     0,",
      "721:       94,   110,    69,   119,     0,    54,    80,     0,     0,    49,",
      "722:       72,    70,     0,     0,     0,     0,     0,     0,     0,     0,",
      "725:       62,     0,     0,    81,    97,    46,     0,     0,    50,    51,",
      "726:        0,     0,    89,    87,    68,    57,    58,   118,   116,   117,",
      "727:       78,    79,    74,    76,    75,    77,   120,   121,   111,   112,",
      "728:      113,   114,   115,    42,    41,    43,    44,    40,     0,   105,",
      "729:      107,   100,    63,     0,    47,    48,     0,    73,    71,     0,",
      "730:        0,     0,    66,    52,    92,    93,     0,    90,     0,     0,",
      "731:        0,    83,     0,    88,     0,    84,     0,    85,    64,     0,",
      "732:       91,    82,     0,     0,     0,    86,     0,    67,     0,    65",
      "738:      -73,   -73,   211,   212,   -73,   -73,   -73,   -73,   -73,   -73,",
      "739:      -73,   -73,   -73,   -73,   189,   -73,   183,   -73,   -73,   139,",
      "740:      -73,   -73,   -73,   -73,   130,   -48,   -72,   -73,   -73,   -73,",
      "741:      -73,   -73,   -73,    41,   -73,   103,   -73,   -73,    29,   164,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "747: {",
      "748:       -1,     1,     5,     6,    17,    33,    25,    28,    40,     7,",
      "749:       15,    19,    21,    30,    31,    37,    38,    52,    53,   121,",
      "752:       80",
      "753: };",
      "",
      "[Removed Lines]",
      "750:      166,    75,   136,   137,    76,    94,    78,   180,   202,   191,",
      "751:      140,   139,   189,   125,   195,   143,   178,   185,   186,    79,",
      "",
      "[Added Lines]",
      "750:      167,    75,   137,   138,    76,    94,    78,   181,   203,   192,",
      "751:      141,   140,   190,   125,   196,   144,   179,   186,   187,    79,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "758: static const yytype_int16 yytable[] =",
      "759: {",
      "797:        0,     0,     0,   114,   115,   116,   117,   118,   119,   120,",
      "801: };",
      "803: static const yytype_int16 yycheck[] =",
      "804: {",
      "809:      107,   108,   109,   110,   111,   112,   113,   114,   115,   116,",
      "842:       -1,    -1,    -1,    51,    52,    53,    54,    55,    56,    57,",
      "846: };",
      "",
      "[Removed Lines]",
      "760:       77,    90,    95,   130,    91,     4,    93,    96,   114,   115,",
      "761:      116,   117,   118,   119,   120,    11,   123,    83,   126,   127,",
      "762:      128,   129,    84,    16,    92,   131,   183,   138,   141,     8,",
      "763:      184,   135,    41,    97,    98,    42,    99,   145,   146,   147,",
      "764:      148,   149,   150,   151,   152,   153,   154,   155,   156,   157,",
      "765:      158,   159,   160,   161,    43,    44,    18,   167,    54,    55,",
      "766:       56,    57,    58,   142,    59,    60,    61,    62,    22,    63,",
      "767:       45,   100,   101,    51,   -36,    64,    65,    66,    67,     2,",
      "768:        3,    68,    20,   -17,   -17,   -17,    69,    70,    23,   100,",
      "769:      101,   176,   177,   116,   117,   118,   119,   120,    12,    13,",
      "770:       14,   206,    71,   182,   100,   101,    72,    73,   162,   163,",
      "771:      164,   165,   187,   118,   119,   120,     4,    74,    24,   208,",
      "772:       54,   196,    56,    57,    58,    26,    59,    60,    61,    62,",
      "773:       27,    63,   179,    29,   204,   -54,   -54,    64,    65,    66,",
      "774:       67,   192,   193,   200,   201,    54,    32,    56,    57,    58,",
      "775:      203,    59,    60,    61,    62,    34,    63,   207,    36,    39,",
      "776:       49,    46,    64,    65,    71,    48,    82,    50,    81,    73,",
      "777:       85,   105,   106,   107,    86,    87,   102,   124,   134,    88,",
      "778:      114,   115,   116,   117,   118,   119,   120,   132,    63,    71,",
      "779:      171,   174,   181,   101,    73,   -93,   175,   197,   103,   104,",
      "780:      188,   198,     9,   205,    88,   105,   106,   107,   108,   109,",
      "781:      110,   111,   112,   113,   114,   115,   116,   117,   118,   119,",
      "782:      120,    10,    35,    47,   122,   105,   106,   107,   199,   144,",
      "783:      190,   172,    89,   133,   114,   115,   116,   117,   118,   119,",
      "784:      120,     0,     0,     0,     0,   105,   106,   107,     0,     0,",
      "785:        0,     0,     0,   170,   114,   115,   116,   117,   118,   119,",
      "786:      120,     0,     0,     0,     0,   105,   106,   107,     0,     0,",
      "787:        0,     0,     0,   133,   114,   115,   116,   117,   118,   119,",
      "788:      120,     0,     0,     0,     0,   105,   106,   107,     0,     0,",
      "789:        0,     0,     0,   194,   114,   115,   116,   117,   118,   119,",
      "790:      120,     0,     0,   105,   106,   107,     0,     0,     0,     0,",
      "791:        0,   168,   114,   115,   116,   117,   118,   119,   120,     0,",
      "792:        0,   105,   106,   107,     0,     0,     0,     0,     0,   169,",
      "793:      114,   115,   116,   117,   118,   119,   120,     0,   -93,     0,",
      "794:        0,   103,   104,     0,     0,     0,     0,   173,   105,   106,",
      "795:      107,   108,   109,   110,   111,   112,   113,   114,   115,   116,",
      "796:      117,   118,   119,   120,   105,   106,   107,     0,     0,     0,",
      "798:      106,   107,     0,     0,     0,     0,     0,     0,   114,   115,",
      "799:      116,   117,   118,   119,   120,   107,     0,     0,     0,     0,",
      "800:        0,     0,   114,   115,   116,   117,   118,   119,   120",
      "805:       48,    68,    74,    10,    71,    37,    73,    74,    51,    52,",
      "806:       53,    54,    55,    56,    57,    19,    83,    26,    85,    86,",
      "807:       87,    88,    31,    10,    72,    32,    11,    99,    34,    61,",
      "808:       15,    98,    16,    66,    67,    19,    69,   104,   105,   106,",
      "810:      117,   118,   119,   120,    38,    39,    64,   124,    10,    11,",
      "811:       12,    13,    14,    69,    16,    17,    18,    19,    62,    21,",
      "812:       54,    40,    41,    20,    21,    27,    28,    29,    30,     0,",
      "813:        1,    33,    10,     4,     5,     6,    38,    39,    10,    40,",
      "814:       41,   139,   140,    53,    54,    55,    56,    57,     4,     5,",
      "815:        6,    70,    54,   175,    40,    41,    58,    59,    22,    23,",
      "816:       24,    25,   179,    55,    56,    57,    37,    69,     7,    70,",
      "817:       10,   188,    12,    13,    14,    64,    16,    17,    18,    19,",
      "818:        8,    21,     3,    10,   201,    40,    41,    27,    28,    29,",
      "819:       30,    70,    71,    70,    71,    10,    64,    12,    13,    14,",
      "820:      198,    16,    17,    18,    19,    65,    21,   205,    11,     9,",
      "821:       63,    65,    27,    28,    54,    64,    21,    16,    19,    59,",
      "822:       67,    42,    43,    44,    67,    69,    32,    69,    10,    69,",
      "823:       51,    52,    53,    54,    55,    56,    57,    70,    21,    54,",
      "824:       31,    70,    64,    41,    59,    32,    71,    64,    35,    36,",
      "825:       69,    69,     3,    69,    69,    42,    43,    44,    45,    46,",
      "826:       47,    48,    49,    50,    51,    52,    53,    54,    55,    56,",
      "827:       57,     3,    30,    37,    82,    42,    43,    44,   193,   103,",
      "828:      180,   131,    68,    70,    51,    52,    53,    54,    55,    56,",
      "829:       57,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    -1,",
      "830:       -1,    -1,    -1,    70,    51,    52,    53,    54,    55,    56,",
      "831:       57,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    -1,",
      "832:       -1,    -1,    -1,    70,    51,    52,    53,    54,    55,    56,",
      "833:       57,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    -1,",
      "834:       -1,    -1,    -1,    70,    51,    52,    53,    54,    55,    56,",
      "835:       57,    -1,    -1,    42,    43,    44,    -1,    -1,    -1,    -1,",
      "836:       -1,    68,    51,    52,    53,    54,    55,    56,    57,    -1,",
      "837:       -1,    42,    43,    44,    -1,    -1,    -1,    -1,    -1,    68,",
      "838:       51,    52,    53,    54,    55,    56,    57,    -1,    32,    -1,",
      "839:       -1,    35,    36,    -1,    -1,    -1,    -1,    68,    42,    43,",
      "840:       44,    45,    46,    47,    48,    49,    50,    51,    52,    53,",
      "841:       54,    55,    56,    57,    42,    43,    44,    -1,    -1,    -1,",
      "843:       43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,    52,",
      "844:       53,    54,    55,    56,    57,    44,    -1,    -1,    -1,    -1,",
      "845:       -1,    -1,    51,    52,    53,    54,    55,    56,    57",
      "",
      "[Added Lines]",
      "760:       77,    90,    95,   130,    91,     4,    93,    96,    83,    11,",
      "761:      184,    16,   131,    84,   185,    18,   123,    20,   126,   127,",
      "762:      128,   129,    97,    98,    92,    99,    22,   139,   142,     8,",
      "763:       23,   136,    41,    24,   132,    42,    26,   146,   147,   148,",
      "764:      149,   150,   151,   152,   153,   154,   155,   156,   157,   158,",
      "765:      159,   160,   161,   162,    43,    44,    29,   168,    54,    55,",
      "766:       56,    57,    58,   143,    59,    60,    61,    62,    32,    63,",
      "767:       45,   100,   101,   100,   101,    64,    65,    66,    67,    51,",
      "768:      -36,    68,   163,   164,   165,   166,    69,    70,   193,   194,",
      "769:        2,     3,   177,   178,   -17,   -17,   -17,    12,    13,    14,",
      "770:       27,   207,    71,   209,   183,    34,    72,    73,   118,   119,",
      "771:      120,    36,    54,   188,    56,    57,    58,    74,    59,    60,",
      "772:       61,    62,   197,    63,   180,   100,   101,     4,    39,    64,",
      "773:       65,    66,    67,   201,   202,   205,    54,    46,    56,    57,",
      "774:       58,    48,    59,    60,    61,    62,    49,    63,   -54,   -54,",
      "775:       50,   204,    81,    64,    65,    85,    71,    82,   208,   102,",
      "776:       87,    73,    86,   105,   106,   107,   116,   117,   118,   119,",
      "777:      120,    88,   114,   115,   116,   117,   118,   119,   120,   124,",
      "778:       71,   133,   135,    63,   172,    73,   -94,   175,   182,   103,",
      "779:      104,   176,   101,   198,   189,    88,   105,   106,   107,   108,",
      "780:      109,   110,   111,   112,   113,   114,   115,   116,   117,   118,",
      "781:      119,   120,   199,   206,     9,    10,   105,   106,   107,    35,",
      "782:       47,   122,   191,   200,   134,   114,   115,   116,   117,   118,",
      "783:      119,   120,    89,   145,     0,   173,   105,   106,   107,     0,",
      "784:        0,     0,     0,     0,   171,   114,   115,   116,   117,   118,",
      "785:      119,   120,     0,     0,     0,     0,   105,   106,   107,     0,",
      "786:        0,     0,     0,     0,   134,   114,   115,   116,   117,   118,",
      "787:      119,   120,     0,     0,     0,     0,   105,   106,   107,     0,",
      "788:        0,     0,     0,     0,   195,   114,   115,   116,   117,   118,",
      "789:      119,   120,     0,     0,   105,   106,   107,     0,     0,     0,",
      "790:        0,     0,   169,   114,   115,   116,   117,   118,   119,   120,",
      "791:        0,     0,   105,   106,   107,     0,     0,     0,     0,     0,",
      "792:      170,   114,   115,   116,   117,   118,   119,   120,     0,   -94,",
      "793:        0,     0,   103,   104,     0,     0,     0,     0,   174,   105,",
      "794:      106,   107,   108,   109,   110,   111,   112,   113,   114,   115,",
      "795:      116,   117,   118,   119,   120,   105,   106,   107,     0,     0,",
      "796:        0,     0,     0,     0,   114,   115,   116,   117,   118,   119,",
      "797:      120,   106,   107,     0,     0,     0,     0,     0,     0,   114,",
      "798:      115,   116,   117,   118,   119,   120,   107,     0,     0,     0,",
      "800:      114,   115,   116,   117,   118,   119,   120",
      "805:       48,    68,    74,     1,    71,    37,    73,    74,    26,    19,",
      "806:       11,    10,    10,    31,    15,    64,    83,    10,    85,    86,",
      "807:       87,    88,    66,    67,    72,    69,    62,    99,    34,    61,",
      "808:       10,    98,    16,     7,    32,    19,    64,   104,   105,   106,",
      "810:      117,   118,   119,   120,    38,    39,    10,   124,    10,    11,",
      "811:       12,    13,    14,    69,    16,    17,    18,    19,    64,    21,",
      "812:       54,    40,    41,    40,    41,    27,    28,    29,    30,    20,",
      "813:       21,    33,    22,    23,    24,    25,    38,    39,    70,    71,",
      "814:        0,     1,   140,   141,     4,     5,     6,     4,     5,     6,",
      "815:        8,    70,    54,    70,   176,    65,    58,    59,    55,    56,",
      "816:       57,    11,    10,   180,    12,    13,    14,    69,    16,    17,",
      "817:       18,    19,   189,    21,     3,    40,    41,    37,     9,    27,",
      "818:       28,    29,    30,    70,    71,   202,    10,    65,    12,    13,",
      "819:       14,    64,    16,    17,    18,    19,    63,    21,    40,    41,",
      "820:       16,   199,    19,    27,    28,    67,    54,    21,   206,    32,",
      "821:       69,    59,    67,    42,    43,    44,    53,    54,    55,    56,",
      "822:       57,    69,    51,    52,    53,    54,    55,    56,    57,    69,",
      "823:       54,    70,    10,    21,    31,    59,    32,    70,    64,    35,",
      "824:       36,    71,    41,    64,    69,    69,    42,    43,    44,    45,",
      "825:       46,    47,    48,    49,    50,    51,    52,    53,    54,    55,",
      "826:       56,    57,    69,    69,     3,     3,    42,    43,    44,    30,",
      "827:       37,    82,   181,   194,    70,    51,    52,    53,    54,    55,",
      "828:       56,    57,    68,   103,    -1,   132,    42,    43,    44,    -1,",
      "829:       -1,    -1,    -1,    -1,    70,    51,    52,    53,    54,    55,",
      "830:       56,    57,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,",
      "831:       -1,    -1,    -1,    -1,    70,    51,    52,    53,    54,    55,",
      "832:       56,    57,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,",
      "833:       -1,    -1,    -1,    -1,    70,    51,    52,    53,    54,    55,",
      "834:       56,    57,    -1,    -1,    42,    43,    44,    -1,    -1,    -1,",
      "835:       -1,    -1,    68,    51,    52,    53,    54,    55,    56,    57,",
      "836:       -1,    -1,    42,    43,    44,    -1,    -1,    -1,    -1,    -1,",
      "837:       68,    51,    52,    53,    54,    55,    56,    57,    -1,    32,",
      "838:       -1,    -1,    35,    36,    -1,    -1,    -1,    -1,    68,    42,",
      "839:       43,    44,    45,    46,    47,    48,    49,    50,    51,    52,",
      "840:       53,    54,    55,    56,    57,    42,    43,    44,    -1,    -1,",
      "841:       -1,    -1,    -1,    -1,    51,    52,    53,    54,    55,    56,",
      "842:       57,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,",
      "843:       52,    53,    54,    55,    56,    57,    44,    -1,    -1,    -1,",
      "845:       51,    52,    53,    54,    55,    56,    57",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "862:       40,    41,    32,    35,    36,    42,    43,    44,    45,    46,",
      "863:       47,    48,    49,    50,    51,    52,    53,    54,    55,    56,",
      "864:       57,    91,    91,   112,    69,   105,   112,   112,   112,   112,",
      "867:      112,   112,   112,   112,   112,   112,   112,   112,   112,   112,",
      "873: };",
      "",
      "[Removed Lines]",
      "865:       10,    32,    70,    70,    10,   112,    94,    95,    98,   103,",
      "866:      102,    34,    69,   107,    96,   112,   112,   112,   112,   112,",
      "868:      112,   112,    22,    23,    24,    25,    92,   112,    68,    68,",
      "869:       70,    31,   107,    68,    70,    71,    97,    97,   108,     3,",
      "870:       99,    64,    98,    11,    15,   109,   110,   112,    69,   104,",
      "871:      105,   101,    70,    71,    70,   106,   112,    64,    69,   110,",
      "872:       70,    71,   100,    97,   112,    69,    70,    97,    70",
      "",
      "[Added Lines]",
      "865:        1,    10,    32,    70,    70,    10,   112,    94,    95,    98,",
      "866:      103,   102,    34,    69,   107,    96,   112,   112,   112,   112,",
      "868:      112,   112,   112,    22,    23,    24,    25,    92,   112,    68,",
      "869:       68,    70,    31,   107,    68,    70,    71,    97,    97,   108,",
      "870:        3,    99,    64,    98,    11,    15,   109,   110,   112,    69,",
      "871:      104,   105,   101,    70,    71,    70,   106,   112,    64,    69,",
      "872:      110,    70,    71,   100,    97,   112,    69,    70,    97,    70",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "881:       86,    86,    87,    87,    89,    88,    90,    88,    88,    91,",
      "882:       91,    92,    92,    92,    92,    93,    93,    93,    93,    94,",
      "883:       94,    95,    95,    96,    97,    98,    98,    98,    98,    98,",
      "888:      112,   112,   112,   112,   112,   112,   112,   112,   112,   112,",
      "889:      112,   112,   112,   112,   112,   112,   112,   112,   112,   112,",
      "891: };",
      "",
      "[Removed Lines]",
      "884:       98,    98,    99,   100,    98,   101,    98,    98,    98,   102,",
      "885:       98,   103,    98,    98,    98,    98,    98,    98,    98,    98,",
      "886:       98,   104,   104,   105,   106,   106,   108,   107,   107,   109,",
      "887:      109,   110,   110,   111,   111,   111,   112,   112,   112,   112,",
      "890:      112,   112",
      "",
      "[Added Lines]",
      "884:       98,    98,    98,    99,   100,    98,   101,    98,    98,    98,",
      "885:      102,    98,   103,    98,    98,    98,    98,    98,    98,    98,",
      "886:       98,    98,   104,   104,   105,   106,   106,   108,   107,   107,",
      "887:      109,   109,   110,   110,   111,   111,   111,   112,   112,   112,",
      "890:      112,   112,   112",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "899:        3,     3,     1,     2,     0,     5,     0,     5,     3,     0,",
      "900:        2,     1,     1,     1,     1,     1,     3,     4,     4,     0,",
      "901:        1,     1,     3,     1,     1,     1,     1,     3,     3,     1,",
      "909: };",
      "",
      "[Removed Lines]",
      "902:        3,     3,     0,     0,    11,     0,     9,     3,     2,     0,",
      "903:        4,     0,     4,     3,     3,     3,     3,     3,     3,     1,",
      "904:        3,     3,     1,     5,     1,     3,     0,     4,     1,     1,",
      "905:        3,     1,     1,     1,     1,     1,     3,     1,     1,     4,",
      "906:        1,     1,     1,     1,     4,     1,     4,     1,     1,     2,",
      "907:        3,     3,     3,     3,     3,     3,     3,     3,     2,     3,",
      "908:        3,     1",
      "",
      "[Added Lines]",
      "902:        3,     3,     3,     0,     0,    11,     0,     9,     3,     2,",
      "903:        0,     4,     0,     4,     3,     3,     3,     3,     3,     3,",
      "904:        1,     3,     3,     1,     5,     1,     3,     0,     4,     1,",
      "905:        1,     3,     1,     1,     1,     1,     1,     3,     1,     1,",
      "906:        4,     1,     1,     1,     1,     4,     1,     4,     1,     1,",
      "907:        2,     3,     3,     3,     3,     3,     3,     3,     3,     2,",
      "908:        3,     3,     1",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "2587:   case 62:",
      "2589:     {",
      "2590:         int var_index;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2589:     {",
      "2590:         compiler->loop_depth--;",
      "2591:         compiler->loop_identifier[compiler->loop_depth] = NULL;",
      "2592:       }",
      "2594:     break;",
      "2596:   case 63:",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "2616:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
      "2617:       }",
      "2619:     break;",
      "2623:     {",
      "2624:         int mem_offset = LOOP_LOCAL_VARS * compiler->loop_depth;",
      "2625:         uint8_t* addr;",
      "",
      "[Removed Lines]",
      "2621:   case 63:",
      "",
      "[Added Lines]",
      "2630:   case 64:",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "2654:         compiler->loop_identifier[compiler->loop_depth] = (yyvsp[-4].c_string);",
      "2655:         compiler->loop_depth++;",
      "2656:       }",
      "2658:     break;",
      "2662:     {",
      "2663:         int mem_offset;",
      "",
      "[Removed Lines]",
      "2660:   case 64:",
      "",
      "[Added Lines]",
      "2669:   case 65:",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "2738:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
      "2739:       }",
      "2741:     break;",
      "2745:     {",
      "2746:         int mem_offset = LOOP_LOCAL_VARS * compiler->loop_depth;",
      "2747:         uint8_t* addr;",
      "",
      "[Removed Lines]",
      "2743:   case 65:",
      "",
      "[Added Lines]",
      "2752:   case 66:",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "2771:         compiler->loop_identifier[compiler->loop_depth] = NULL;",
      "2772:         compiler->loop_depth++;",
      "2773:       }",
      "2775:     break;",
      "2779:     {",
      "2780:         int mem_offset;",
      "",
      "[Removed Lines]",
      "2777:   case 66:",
      "",
      "[Added Lines]",
      "2786:   case 67:",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "2824:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
      "2826:       }",
      "2828:     break;",
      "2832:     {",
      "2833:         yr_parser_emit(yyscanner, OP_OF, NULL);",
      "2835:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
      "2836:       }",
      "2838:     break;",
      "2842:     {",
      "2843:         yr_parser_emit(yyscanner, OP_NOT, NULL);",
      "2845:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
      "2846:       }",
      "2848:     break;",
      "2852:     {",
      "2853:         YR_FIXUP* fixup;",
      "2854:         void* jmp_destination_addr;",
      "",
      "[Removed Lines]",
      "2830:   case 67:",
      "2840:   case 68:",
      "2850:   case 69:",
      "",
      "[Added Lines]",
      "2839:   case 68:",
      "2849:   case 69:",
      "2859:   case 70:",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "2874:         fixup->next = compiler->fixup_stack_head;",
      "2875:         compiler->fixup_stack_head = fixup;",
      "2876:       }",
      "2878:     break;",
      "2882:     {",
      "2883:         YR_FIXUP* fixup;",
      "2884:         uint8_t* and_addr;",
      "",
      "[Removed Lines]",
      "2880:   case 70:",
      "",
      "[Added Lines]",
      "2889:   case 71:",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "2915:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
      "2916:       }",
      "2918:     break;",
      "2922:     {",
      "2923:         YR_FIXUP* fixup;",
      "2924:         void* jmp_destination_addr;",
      "",
      "[Removed Lines]",
      "2920:   case 71:",
      "",
      "[Added Lines]",
      "2929:   case 72:",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "2943:         fixup->next = compiler->fixup_stack_head;",
      "2944:         compiler->fixup_stack_head = fixup;",
      "2945:       }",
      "2947:     break;",
      "2951:     {",
      "2952:         YR_FIXUP* fixup;",
      "2953:         uint8_t* or_addr;",
      "",
      "[Removed Lines]",
      "2949:   case 72:",
      "",
      "[Added Lines]",
      "2958:   case 73:",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "2984:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
      "2985:       }",
      "2987:     break;",
      "2991:     {",
      "2992:         compiler->last_result = yr_parser_reduce_operation(",
      "2993:             yyscanner, \"<\", (yyvsp[-2].expression), (yyvsp[0].expression));",
      "",
      "[Removed Lines]",
      "2989:   case 73:",
      "",
      "[Added Lines]",
      "2998:   case 74:",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "2997:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
      "2998:       }",
      "3000:     break;",
      "3004:     {",
      "3005:         compiler->last_result = yr_parser_reduce_operation(",
      "3006:             yyscanner, \">\", (yyvsp[-2].expression), (yyvsp[0].expression));",
      "",
      "[Removed Lines]",
      "3002:   case 74:",
      "",
      "[Added Lines]",
      "3011:   case 75:",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "3010:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
      "3011:       }",
      "3013:     break;",
      "3017:     {",
      "3018:         compiler->last_result = yr_parser_reduce_operation(",
      "3019:             yyscanner, \"<=\", (yyvsp[-2].expression), (yyvsp[0].expression));",
      "",
      "[Removed Lines]",
      "3015:   case 75:",
      "",
      "[Added Lines]",
      "3024:   case 76:",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "3023:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
      "3024:       }",
      "3026:     break;",
      "3030:     {",
      "3031:         compiler->last_result = yr_parser_reduce_operation(",
      "3032:             yyscanner, \">=\", (yyvsp[-2].expression), (yyvsp[0].expression));",
      "",
      "[Removed Lines]",
      "3028:   case 76:",
      "",
      "[Added Lines]",
      "3037:   case 77:",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "3036:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
      "3037:       }",
      "3039:     break;",
      "3043:     {",
      "3044:         compiler->last_result = yr_parser_reduce_operation(",
      "3045:             yyscanner, \"==\", (yyvsp[-2].expression), (yyvsp[0].expression));",
      "",
      "[Removed Lines]",
      "3041:   case 77:",
      "",
      "[Added Lines]",
      "3050:   case 78:",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "3049:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
      "3050:       }",
      "3052:     break;",
      "3056:     {",
      "3057:         compiler->last_result = yr_parser_reduce_operation(",
      "3058:             yyscanner, \"!=\", (yyvsp[-2].expression), (yyvsp[0].expression));",
      "",
      "[Removed Lines]",
      "3054:   case 78:",
      "",
      "[Added Lines]",
      "3063:   case 79:",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "3062:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
      "3063:       }",
      "3065:     break;",
      "3069:     {",
      "3070:         (yyval.expression) = (yyvsp[0].expression);",
      "3071:       }",
      "3073:     break;",
      "3077:     {",
      "3078:         (yyval.expression) = (yyvsp[-1].expression);",
      "3079:       }",
      "3081:     break;",
      "3085:     { (yyval.integer) = INTEGER_SET_ENUMERATION; }",
      "3087:     break;",
      "3091:     { (yyval.integer) = INTEGER_SET_RANGE; }",
      "3093:     break;",
      "3097:     {",
      "3098:         if ((yyvsp[-3].expression).type != EXPRESSION_TYPE_INTEGER)",
      "3099:         {",
      "",
      "[Removed Lines]",
      "3067:   case 79:",
      "3075:   case 80:",
      "3083:   case 81:",
      "3089:   case 82:",
      "3095:   case 83:",
      "",
      "[Added Lines]",
      "3076:   case 80:",
      "3084:   case 81:",
      "3092:   case 82:",
      "3098:   case 83:",
      "3104:   case 84:",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "3112:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
      "3113:       }",
      "3115:     break;",
      "3119:     {",
      "3120:         if ((yyvsp[0].expression).type != EXPRESSION_TYPE_INTEGER)",
      "3121:         {",
      "",
      "[Removed Lines]",
      "3117:   case 84:",
      "",
      "[Added Lines]",
      "3126:   case 85:",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "3128:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
      "3129:       }",
      "3131:     break;",
      "3135:     {",
      "3136:         if ((yyvsp[0].expression).type != EXPRESSION_TYPE_INTEGER)",
      "3137:         {",
      "",
      "[Removed Lines]",
      "3133:   case 85:",
      "",
      "[Added Lines]",
      "3142:   case 86:",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "3143:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
      "3144:       }",
      "3146:     break;",
      "3150:     {",
      "3152:         yr_parser_emit_with_arg(yyscanner, OP_PUSH, UNDEFINED, NULL, NULL);",
      "3153:       }",
      "3155:     break;",
      "3159:     {",
      "3160:         yr_parser_emit_with_arg(yyscanner, OP_PUSH, UNDEFINED, NULL, NULL);",
      "3161:         yr_parser_emit_pushes_for_strings(yyscanner, \"$*\");",
      "3163:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
      "3164:       }",
      "3166:     break;",
      "3170:     {",
      "3171:         yr_parser_emit_pushes_for_strings(yyscanner, (yyvsp[0].c_string));",
      "3172:         yr_free((yyvsp[0].c_string));",
      "3174:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
      "3175:       }",
      "3177:     break;",
      "3181:     {",
      "3182:         yr_parser_emit_pushes_for_strings(yyscanner, (yyvsp[0].c_string));",
      "3183:         yr_free((yyvsp[0].c_string));",
      "3185:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
      "3186:       }",
      "3188:     break;",
      "3192:     {",
      "3193:         yr_parser_emit_with_arg(yyscanner, OP_PUSH, UNDEFINED, NULL, NULL);",
      "3194:       }",
      "3196:     break;",
      "3200:     {",
      "3201:         yr_parser_emit_with_arg(yyscanner, OP_PUSH, 1, NULL, NULL);",
      "3202:       }",
      "3204:     break;",
      "3208:     {",
      "3209:         (yyval.expression) = (yyvsp[-1].expression);",
      "3210:       }",
      "3212:     break;",
      "3216:     {",
      "3217:         compiler->last_result = yr_parser_emit(",
      "3218:             yyscanner, OP_FILESIZE, NULL);",
      "",
      "[Removed Lines]",
      "3148:   case 86:",
      "3157:   case 88:",
      "3168:   case 91:",
      "3179:   case 92:",
      "3190:   case 94:",
      "3198:   case 95:",
      "3206:   case 96:",
      "3214:   case 97:",
      "",
      "[Added Lines]",
      "3157:   case 87:",
      "3166:   case 89:",
      "3177:   case 92:",
      "3188:   case 93:",
      "3199:   case 95:",
      "3207:   case 96:",
      "3215:   case 97:",
      "3223:   case 98:",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "3222:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3223:         (yyval.expression).value.integer = UNDEFINED;",
      "3224:       }",
      "3226:     break;",
      "3230:     {",
      "3231:         yywarning(yyscanner,",
      "3232:             \"Using deprecated \\\"entrypoint\\\" keyword. Use the \\\"entry_point\\\" \"",
      "",
      "[Removed Lines]",
      "3228:   case 98:",
      "",
      "[Added Lines]",
      "3237:   case 99:",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "3240:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3241:         (yyval.expression).value.integer = UNDEFINED;",
      "3242:       }",
      "3244:     break;",
      "3248:     {",
      "3249:         CHECK_TYPE((yyvsp[-1].expression), EXPRESSION_TYPE_INTEGER, \"intXXXX or uintXXXX\");",
      "",
      "[Removed Lines]",
      "3246:   case 99:",
      "",
      "[Added Lines]",
      "3255:   case 100:",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "3260:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3261:         (yyval.expression).value.integer = UNDEFINED;",
      "3262:       }",
      "3264:     break;",
      "3268:     {",
      "3269:         compiler->last_result = yr_parser_emit_with_arg(",
      "3270:             yyscanner, OP_PUSH, (yyvsp[0].integer), NULL, NULL);",
      "",
      "[Removed Lines]",
      "3266:   case 100:",
      "",
      "[Added Lines]",
      "3275:   case 101:",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "3274:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3275:         (yyval.expression).value.integer = (yyvsp[0].integer);",
      "3276:       }",
      "3278:     break;",
      "3282:     {",
      "3283:         compiler->last_result = yr_parser_emit_with_arg_double(",
      "3284:             yyscanner, OP_PUSH, (yyvsp[0].double_), NULL, NULL);",
      "",
      "[Removed Lines]",
      "3280:   case 101:",
      "",
      "[Added Lines]",
      "3289:   case 102:",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "3288:         (yyval.expression).type = EXPRESSION_TYPE_FLOAT;",
      "3289:       }",
      "3291:     break;",
      "3295:     {",
      "3296:         SIZED_STRING* sized_string;",
      "",
      "[Removed Lines]",
      "3293:   case 102:",
      "",
      "[Added Lines]",
      "3302:   case 103:",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "3316:         (yyval.expression).type = EXPRESSION_TYPE_STRING;",
      "3317:         (yyval.expression).value.sized_string = sized_string;",
      "3318:       }",
      "3320:     break;",
      "3324:     {",
      "3325:         compiler->last_result = yr_parser_reduce_string_identifier(",
      "3326:             yyscanner, (yyvsp[0].c_string), OP_COUNT, UNDEFINED);",
      "",
      "[Removed Lines]",
      "3322:   case 103:",
      "",
      "[Added Lines]",
      "3331:   case 104:",
      "",
      "---------------",
      "--- Hunk 36 ---",
      "[Context before]",
      "3332:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3333:         (yyval.expression).value.integer = UNDEFINED;",
      "3334:       }",
      "3336:     break;",
      "3340:     {",
      "3341:         compiler->last_result = yr_parser_reduce_string_identifier(",
      "3342:             yyscanner, (yyvsp[-3].c_string), OP_OFFSET, UNDEFINED);",
      "",
      "[Removed Lines]",
      "3338:   case 104:",
      "",
      "[Added Lines]",
      "3347:   case 105:",
      "",
      "---------------",
      "--- Hunk 37 ---",
      "[Context before]",
      "3348:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3349:         (yyval.expression).value.integer = UNDEFINED;",
      "3350:       }",
      "3352:     break;",
      "3356:     {",
      "3357:         compiler->last_result = yr_parser_emit_with_arg(",
      "3358:             yyscanner, OP_PUSH, 1, NULL, NULL);",
      "",
      "[Removed Lines]",
      "3354:   case 105:",
      "",
      "[Added Lines]",
      "3363:   case 106:",
      "",
      "---------------",
      "--- Hunk 38 ---",
      "[Context before]",
      "3368:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3369:         (yyval.expression).value.integer = UNDEFINED;",
      "3370:       }",
      "3372:     break;",
      "3376:     {",
      "3377:         compiler->last_result = yr_parser_reduce_string_identifier(",
      "3378:             yyscanner, (yyvsp[-3].c_string), OP_LENGTH, UNDEFINED);",
      "",
      "[Removed Lines]",
      "3374:   case 106:",
      "",
      "[Added Lines]",
      "3383:   case 107:",
      "",
      "---------------",
      "--- Hunk 39 ---",
      "[Context before]",
      "3384:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3385:         (yyval.expression).value.integer = UNDEFINED;",
      "3386:       }",
      "3388:     break;",
      "3392:     {",
      "3393:         compiler->last_result = yr_parser_emit_with_arg(",
      "3394:             yyscanner, OP_PUSH, 1, NULL, NULL);",
      "",
      "[Removed Lines]",
      "3390:   case 107:",
      "",
      "[Added Lines]",
      "3399:   case 108:",
      "",
      "---------------",
      "--- Hunk 40 ---",
      "[Context before]",
      "3404:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3405:         (yyval.expression).value.integer = UNDEFINED;",
      "3406:       }",
      "3408:     break;",
      "3412:     {",
      "3413:         if ((yyvsp[0].expression).type == EXPRESSION_TYPE_INTEGER)  // loop identifier",
      "3414:         {",
      "",
      "[Removed Lines]",
      "3410:   case 108:",
      "",
      "[Added Lines]",
      "3419:   case 109:",
      "",
      "---------------",
      "--- Hunk 41 ---",
      "[Context before]",
      "3454:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
      "3455:       }",
      "3457:     break;",
      "3461:     {",
      "3462:         CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER | EXPRESSION_TYPE_FLOAT, \"-\");",
      "",
      "[Removed Lines]",
      "3459:   case 109:",
      "",
      "[Added Lines]",
      "3468:   case 110:",
      "",
      "---------------",
      "--- Hunk 42 ---",
      "[Context before]",
      "3477:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
      "3478:       }",
      "3480:     break;",
      "3484:     {",
      "3485:         compiler->last_result = yr_parser_reduce_operation(",
      "3486:             yyscanner, \"+\", (yyvsp[-2].expression), (yyvsp[0].expression));",
      "",
      "[Removed Lines]",
      "3482:   case 110:",
      "",
      "[Added Lines]",
      "3491:   case 111:",
      "",
      "---------------",
      "--- Hunk 43 ---",
      "[Context before]",
      "3498:           (yyval.expression).type = EXPRESSION_TYPE_FLOAT;",
      "3499:         }",
      "3500:       }",
      "3502:     break;",
      "3506:     {",
      "3507:         compiler->last_result = yr_parser_reduce_operation(",
      "3508:             yyscanner, \"-\", (yyvsp[-2].expression), (yyvsp[0].expression));",
      "",
      "[Removed Lines]",
      "3504:   case 111:",
      "",
      "[Added Lines]",
      "3513:   case 112:",
      "",
      "---------------",
      "--- Hunk 44 ---",
      "[Context before]",
      "3520:           (yyval.expression).type = EXPRESSION_TYPE_FLOAT;",
      "3521:         }",
      "3522:       }",
      "3524:     break;",
      "3528:     {",
      "3529:         compiler->last_result = yr_parser_reduce_operation(",
      "3530:             yyscanner, \"*\", (yyvsp[-2].expression), (yyvsp[0].expression));",
      "",
      "[Removed Lines]",
      "3526:   case 112:",
      "",
      "[Added Lines]",
      "3535:   case 113:",
      "",
      "---------------",
      "--- Hunk 45 ---",
      "[Context before]",
      "3542:           (yyval.expression).type = EXPRESSION_TYPE_FLOAT;",
      "3543:         }",
      "3544:       }",
      "3546:     break;",
      "3550:     {",
      "3551:         compiler->last_result = yr_parser_reduce_operation(",
      "3552:             yyscanner, \"\\\\\", (yyvsp[-2].expression), (yyvsp[0].expression));",
      "",
      "[Removed Lines]",
      "3548:   case 113:",
      "",
      "[Added Lines]",
      "3557:   case 114:",
      "",
      "---------------",
      "--- Hunk 46 ---",
      "[Context before]",
      "3572:           (yyval.expression).type = EXPRESSION_TYPE_FLOAT;",
      "3573:         }",
      "3574:       }",
      "3576:     break;",
      "3580:     {",
      "3581:         CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, \"%\");",
      "3582:         CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"%\");",
      "",
      "[Removed Lines]",
      "3578:   case 114:",
      "",
      "[Added Lines]",
      "3587:   case 115:",
      "",
      "---------------",
      "--- Hunk 47 ---",
      "[Context before]",
      "3594:           ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
      "3595:         }",
      "3596:       }",
      "3598:     break;",
      "3602:     {",
      "3603:         CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, \"^\");",
      "3604:         CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"^\");",
      "",
      "[Removed Lines]",
      "3600:   case 115:",
      "",
      "[Added Lines]",
      "3609:   case 116:",
      "",
      "---------------",
      "--- Hunk 48 ---",
      "[Context before]",
      "3608:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3609:         (yyval.expression).value.integer = OPERATION(^, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
      "3610:       }",
      "3612:     break;",
      "3616:     {",
      "3617:         CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, \"^\");",
      "3618:         CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"^\");",
      "",
      "[Removed Lines]",
      "3614:   case 116:",
      "",
      "[Added Lines]",
      "3623:   case 117:",
      "",
      "---------------",
      "--- Hunk 49 ---",
      "[Context before]",
      "3622:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3623:         (yyval.expression).value.integer = OPERATION(&, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
      "3624:       }",
      "3626:     break;",
      "3630:     {",
      "3631:         CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, \"|\");",
      "3632:         CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"|\");",
      "",
      "[Removed Lines]",
      "3628:   case 117:",
      "",
      "[Added Lines]",
      "3637:   case 118:",
      "",
      "---------------",
      "--- Hunk 50 ---",
      "[Context before]",
      "3636:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3637:         (yyval.expression).value.integer = OPERATION(|, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
      "3638:       }",
      "3640:     break;",
      "3644:     {",
      "3645:         CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"~\");",
      "",
      "[Removed Lines]",
      "3642:   case 118:",
      "",
      "[Added Lines]",
      "3651:   case 119:",
      "",
      "---------------",
      "--- Hunk 51 ---",
      "[Context before]",
      "3650:         (yyval.expression).value.integer = ((yyvsp[0].expression).value.integer == UNDEFINED) ?",
      "3651:             UNDEFINED : ~((yyvsp[0].expression).value.integer);",
      "3652:       }",
      "3654:     break;",
      "3658:     {",
      "3659:         CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, \"<<\");",
      "3660:         CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"<<\");",
      "",
      "[Removed Lines]",
      "3656:   case 119:",
      "",
      "[Added Lines]",
      "3665:   case 120:",
      "",
      "---------------",
      "--- Hunk 52 ---",
      "[Context before]",
      "3664:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3665:         (yyval.expression).value.integer = OPERATION(<<, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
      "3666:       }",
      "3668:     break;",
      "3672:     {",
      "3673:         CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, \">>\");",
      "3674:         CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \">>\");",
      "",
      "[Removed Lines]",
      "3670:   case 120:",
      "",
      "[Added Lines]",
      "3679:   case 121:",
      "",
      "---------------",
      "--- Hunk 53 ---",
      "[Context before]",
      "3678:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3679:         (yyval.expression).value.integer = OPERATION(>>, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
      "3680:       }",
      "3682:     break;",
      "3686:     {",
      "3687:         (yyval.expression) = (yyvsp[0].expression);",
      "3688:       }",
      "3690:     break;",
      "3694:       default: break;",
      "3695:     }",
      "",
      "[Removed Lines]",
      "3684:   case 121:",
      "",
      "[Added Lines]",
      "3693:   case 122:",
      "",
      "---------------"
    ],
    "libyara/grammar.y||libyara/grammar.y": [
      "File: libyara/grammar.y -> libyara/grammar.y",
      "--- Hunk 1 ---",
      "[Context before]",
      "1016:         $$.type = EXPRESSION_TYPE_BOOLEAN;",
      "1017:       }",
      "1018:     | _FOR_ for_expression _IDENTIFIER_ _IN_",
      "1019:       {",
      "1020:         int var_index;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1018:     | _FOR_ for_expression error",
      "1019:       {",
      "1020:         compiler->loop_depth--;",
      "1021:         compiler->loop_identifier[compiler->loop_depth] = NULL;",
      "1022:       }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f867aee70cf52e1ea70ee7b4c2deee09a6cb10b8",
      "candidate_info": {
        "commit_hash": "f867aee70cf52e1ea70ee7b4c2deee09a6cb10b8",
        "repo": "VirusTotal/yara",
        "commit_url": "https://github.com/VirusTotal/yara/commit/f867aee70cf52e1ea70ee7b4c2deee09a6cb10b8",
        "files": [
          "libyara/compiler.c",
          "libyara/grammar.c",
          "libyara/grammar.y",
          "libyara/hash.c",
          "libyara/include/yara/compiler.h",
          "libyara/include/yara/hash.h",
          "libyara/include/yara/parser.h",
          "libyara/lexer.c",
          "libyara/parser.c"
        ],
        "message": "Fix issue #369.\n\nAn error is returned when string identifiers are duplicated within a rule.",
        "before_after_code_files": [
          "libyara/compiler.c||libyara/compiler.c",
          "libyara/grammar.c||libyara/grammar.c",
          "libyara/grammar.y||libyara/grammar.y",
          "libyara/hash.c||libyara/hash.c",
          "libyara/include/yara/compiler.h||libyara/include/yara/compiler.h",
          "libyara/include/yara/hash.h||libyara/include/yara/hash.h",
          "libyara/include/yara/parser.h||libyara/include/yara/parser.h",
          "libyara/lexer.c||libyara/lexer.c",
          "libyara/parser.c||libyara/parser.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libyara/grammar.c||libyara/grammar.c",
            "libyara/grammar.y||libyara/grammar.y"
          ],
          "candidate": [
            "libyara/grammar.c||libyara/grammar.c",
            "libyara/grammar.y||libyara/grammar.y"
          ]
        }
      },
      "candidate_diff": {
        "libyara/compiler.c||libyara/compiler.c": [
          "File: libyara/compiler.c -> libyara/compiler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:   if (result == ERROR_SUCCESS)",
          "62:     result = yr_hash_table_create(10007, &new_compiler->objects_table);",
          "64:   if (result == ERROR_SUCCESS)",
          "65:     result = yr_arena_create(65536, 0, &new_compiler->sz_arena);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:   if (result == ERROR_SUCCESS)",
          "65:     result = yr_hash_table_create(101, &new_compiler->strings_table);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127:       compiler->rules_table,",
          "128:       NULL);",
          "130:   yr_hash_table_destroy(",
          "131:       compiler->objects_table,",
          "132:       (YR_HASH_TABLE_FREE_VALUE_FUNC) yr_object_destroy);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133:   yr_hash_table_destroy(",
          "134:       compiler->strings_table,",
          "135:       NULL);",
          "",
          "---------------"
        ],
        "libyara/grammar.c||libyara/grammar.c": [
          "File: libyara/grammar.c -> libyara/grammar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "513: #define YYNTOKENS  72",
          "522: #define YYUNDEFTOK  2",
          "",
          "[Removed Lines]",
          "515: #define YYNNTS  39",
          "517: #define YYNRULES  118",
          "519: #define YYNSTATES  205",
          "",
          "[Added Lines]",
          "515: #define YYNNTS  40",
          "517: #define YYNRULES  119",
          "519: #define YYNSTATES  206",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "567: static const yytype_uint16 yyprhs[] =",
          "568: {",
          "569:        0,     0,     3,     4,     7,    10,    14,    18,    22,    25,",
          "581: };",
          "",
          "[Removed Lines]",
          "570:       26,    37,    38,    42,    43,    47,    51,    52,    55,    57,",
          "571:       59,    60,    63,    65,    68,    70,    73,    77,    81,    85,",
          "572:       89,    91,    94,    99,   100,   106,   110,   111,   114,   116,",
          "573:      118,   120,   122,   124,   128,   133,   138,   139,   141,   143,",
          "574:      147,   149,   151,   153,   155,   159,   163,   165,   169,   173,",
          "575:      174,   175,   187,   188,   198,   202,   205,   206,   211,   212,",
          "576:      217,   221,   225,   229,   233,   237,   241,   243,   247,   251,",
          "577:      253,   259,   261,   265,   266,   271,   273,   275,   279,   281,",
          "578:      283,   285,   287,   289,   293,   295,   297,   302,   304,   306,",
          "579:      308,   310,   315,   317,   322,   324,   326,   329,   333,   337,",
          "580:      341,   345,   349,   353,   357,   361,   364,   368,   372",
          "",
          "[Added Lines]",
          "570:       26,    27,    39,    40,    44,    45,    49,    53,    54,    57,",
          "571:       59,    61,    62,    65,    67,    70,    72,    75,    79,    83,",
          "572:       87,    91,    93,    96,   101,   102,   108,   112,   113,   116,",
          "573:      118,   120,   122,   124,   126,   130,   135,   140,   141,   143,",
          "574:      145,   149,   151,   153,   155,   157,   161,   165,   167,   171,",
          "575:      175,   176,   177,   189,   190,   200,   204,   207,   208,   213,",
          "576:      214,   219,   223,   227,   231,   235,   239,   243,   245,   249,",
          "577:      253,   255,   261,   263,   267,   268,   273,   275,   277,   281,",
          "578:      283,   285,   287,   289,   291,   295,   297,   299,   304,   306,",
          "579:      308,   310,   312,   317,   319,   324,   326,   328,   331,   335,",
          "580:      339,   343,   347,   351,   355,   359,   363,   366,   370,   374",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "585: {",
          "586:       73,     0,    -1,    -1,    73,    75,    -1,    73,    74,    -1,",
          "587:       73,     1,    75,    -1,    73,     1,    74,    -1,    73,     1,",
          "624: };",
          "627: static const yytype_uint16 yyrline[] =",
          "628: {",
          "629:        0,   200,   200,   202,   203,   204,   205,   206,   211,   224,",
          "641: };",
          "642: #endif",
          "",
          "[Removed Lines]",
          "588:       61,    -1,    37,    19,    -1,    -1,    80,     4,    10,    82,",
          "589:       62,    77,    78,    76,    79,    63,    -1,    -1,     7,    64,",
          "590:       84,    -1,    -1,     8,    64,    86,    -1,     9,    64,    95,",
          "591:       -1,    -1,    80,    81,    -1,     5,    -1,     6,    -1,    -1,",
          "592:       64,    83,    -1,    10,    -1,    83,    10,    -1,    85,    -1,",
          "593:       84,    85,    -1,    10,    65,    19,    -1,    10,    65,    16,",
          "594:       -1,    10,    65,    38,    -1,    10,    65,    39,    -1,    87,",
          "595:       -1,    86,    87,    -1,    11,    65,    19,    89,    -1,    -1,",
          "596:       11,    65,    88,    21,    89,    -1,    11,    65,    20,    -1,",
          "597:       -1,    89,    90,    -1,    23,    -1,    22,    -1,    24,    -1,",
          "598:       25,    -1,    10,    -1,    91,    66,    10,    -1,    91,    67,",
          "599:      110,    68,    -1,    91,    69,    92,    70,    -1,    -1,    93,",
          "600:       -1,    96,    -1,    93,    71,    96,    -1,    21,    -1,    96,",
          "601:       -1,    38,    -1,    39,    -1,   110,    35,    94,    -1,   110,",
          "602:       36,   110,    -1,    11,    -1,    11,    26,   110,    -1,    11,",
          "603:       31,   103,    -1,    -1,    -1,    33,   109,    10,    31,    97,",
          "604:      102,    64,    98,    69,    95,    70,    -1,    -1,    33,   109,",
          "605:       32,   105,    64,    99,    69,    95,    70,    -1,   109,    32,",
          "606:      105,    -1,    60,    95,    -1,    -1,    95,    41,   100,    95,",
          "607:       -1,    -1,    95,    40,   101,    95,    -1,   110,    50,   110,",
          "608:       -1,   110,    48,   110,    -1,   110,    49,   110,    -1,   110,",
          "609:       47,   110,    -1,   110,    46,   110,    -1,   110,    45,   110,",
          "610:       -1,   110,    -1,    69,    96,    70,    -1,    69,   104,    70,",
          "611:       -1,   103,    -1,    69,   110,     3,   110,    70,    -1,   110,",
          "612:       -1,   104,    71,   110,    -1,    -1,    69,   106,   107,    70,",
          "613:       -1,    34,    -1,   108,    -1,   107,    71,   108,    -1,    11,",
          "614:       -1,    15,    -1,   110,    -1,    29,    -1,    30,    -1,    69,",
          "615:      110,    70,    -1,    27,    -1,    28,    -1,    18,    69,   110,",
          "616:       70,    -1,    16,    -1,    17,    -1,    19,    -1,    12,    -1,",
          "617:       13,    67,   110,    68,    -1,    13,    -1,    14,    67,   110,",
          "618:       68,    -1,    14,    -1,    91,    -1,    54,   110,    -1,   110,",
          "619:       53,   110,    -1,   110,    54,   110,    -1,   110,    55,   110,",
          "620:       -1,   110,    56,   110,    -1,   110,    57,   110,    -1,   110,",
          "621:       43,   110,    -1,   110,    44,   110,    -1,   110,    42,   110,",
          "622:       -1,    58,   110,    -1,   110,    52,   110,    -1,   110,    51,",
          "623:      110,    -1,    94,    -1",
          "630:      223,   248,   251,   279,   282,   309,   314,   315,   320,   321,",
          "631:      327,   330,   348,   361,   398,   399,   404,   420,   433,   446,",
          "632:      463,   464,   469,   480,   479,   495,   509,   510,   515,   516,",
          "633:      517,   518,   523,   608,   654,   712,   757,   758,   762,   787,",
          "634:      823,   869,   884,   893,   902,   917,   929,   943,   956,   968,",
          "635:      998,   967,  1114,  1113,  1193,  1199,  1206,  1205,  1268,  1267,",
          "636:     1328,  1337,  1346,  1355,  1364,  1373,  1382,  1386,  1394,  1395,",
          "637:     1400,  1422,  1434,  1450,  1449,  1455,  1466,  1467,  1472,  1479,",
          "638:     1490,  1491,  1495,  1503,  1507,  1517,  1531,  1547,  1557,  1566,",
          "639:     1590,  1602,  1614,  1630,  1642,  1658,  1702,  1721,  1739,  1757,",
          "640:     1775,  1801,  1819,  1829,  1839,  1849,  1859,  1869,  1879",
          "",
          "[Added Lines]",
          "588:       61,    -1,    37,    19,    -1,    -1,    -1,    81,     4,    10,",
          "589:       76,    83,    62,    78,    79,    77,    80,    63,    -1,    -1,",
          "590:        7,    64,    85,    -1,    -1,     8,    64,    87,    -1,     9,",
          "591:       64,    96,    -1,    -1,    81,    82,    -1,     5,    -1,     6,",
          "592:       -1,    -1,    64,    84,    -1,    10,    -1,    84,    10,    -1,",
          "593:       86,    -1,    85,    86,    -1,    10,    65,    19,    -1,    10,",
          "594:       65,    16,    -1,    10,    65,    38,    -1,    10,    65,    39,",
          "595:       -1,    88,    -1,    87,    88,    -1,    11,    65,    19,    90,",
          "596:       -1,    -1,    11,    65,    89,    21,    90,    -1,    11,    65,",
          "597:       20,    -1,    -1,    90,    91,    -1,    23,    -1,    22,    -1,",
          "598:       24,    -1,    25,    -1,    10,    -1,    92,    66,    10,    -1,",
          "599:       92,    67,   111,    68,    -1,    92,    69,    93,    70,    -1,",
          "600:       -1,    94,    -1,    97,    -1,    94,    71,    97,    -1,    21,",
          "601:       -1,    97,    -1,    38,    -1,    39,    -1,   111,    35,    95,",
          "602:       -1,   111,    36,   111,    -1,    11,    -1,    11,    26,   111,",
          "603:       -1,    11,    31,   104,    -1,    -1,    -1,    33,   110,    10,",
          "604:       31,    98,   103,    64,    99,    69,    96,    70,    -1,    -1,",
          "605:       33,   110,    32,   106,    64,   100,    69,    96,    70,    -1,",
          "606:      110,    32,   106,    -1,    60,    96,    -1,    -1,    96,    41,",
          "607:      101,    96,    -1,    -1,    96,    40,   102,    96,    -1,   111,",
          "608:       50,   111,    -1,   111,    48,   111,    -1,   111,    49,   111,",
          "609:       -1,   111,    47,   111,    -1,   111,    46,   111,    -1,   111,",
          "610:       45,   111,    -1,   111,    -1,    69,    97,    70,    -1,    69,",
          "611:      105,    70,    -1,   104,    -1,    69,   111,     3,   111,    70,",
          "612:       -1,   111,    -1,   105,    71,   111,    -1,    -1,    69,   107,",
          "613:      108,    70,    -1,    34,    -1,   109,    -1,   108,    71,   109,",
          "614:       -1,    11,    -1,    15,    -1,   111,    -1,    29,    -1,    30,",
          "615:       -1,    69,   111,    70,    -1,    27,    -1,    28,    -1,    18,",
          "616:       69,   111,    70,    -1,    16,    -1,    17,    -1,    19,    -1,",
          "617:       12,    -1,    13,    67,   111,    68,    -1,    13,    -1,    14,",
          "618:       67,   111,    68,    -1,    14,    -1,    92,    -1,    54,   111,",
          "619:       -1,   111,    53,   111,    -1,   111,    54,   111,    -1,   111,",
          "620:       55,   111,    -1,   111,    56,   111,    -1,   111,    57,   111,",
          "621:       -1,   111,    43,   111,    -1,   111,    44,   111,    -1,   111,",
          "622:       42,   111,    -1,    58,   111,    -1,   111,    52,   111,    -1,",
          "623:      111,    51,   111,    -1,    95,    -1",
          "630:      233,   223,   256,   259,   287,   290,   317,   322,   323,   328,",
          "631:      329,   335,   338,   356,   369,   406,   407,   412,   428,   441,",
          "632:      454,   471,   472,   477,   488,   487,   503,   517,   518,   523,",
          "633:      524,   525,   526,   531,   616,   662,   720,   765,   766,   770,",
          "634:      795,   831,   877,   892,   901,   910,   925,   937,   951,   964,",
          "635:      976,  1006,   975,  1122,  1121,  1201,  1207,  1214,  1213,  1276,",
          "636:     1275,  1336,  1345,  1354,  1363,  1372,  1381,  1390,  1394,  1402,",
          "637:     1403,  1408,  1430,  1442,  1458,  1457,  1463,  1474,  1475,  1480,",
          "638:     1487,  1498,  1499,  1503,  1511,  1515,  1525,  1539,  1555,  1565,",
          "639:     1574,  1598,  1610,  1622,  1638,  1650,  1666,  1710,  1729,  1747,",
          "640:     1765,  1783,  1809,  1827,  1837,  1847,  1857,  1867,  1877,  1887",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "658:   \"_LE_\", \"_LT_\", \"_SHIFT_RIGHT_\", \"_SHIFT_LEFT_\", \"'+'\", \"'-'\", \"'*'\",",
          "659:   \"'\\\\\\\\'\", \"'%'\", \"'~'\", \"UNARY_MINUS\", \"_NOT_\", \"\\\"include\\\"\", \"'{'\",",
          "660:   \"'}'\", \"':'\", \"'='\", \"'.'\", \"'['\", \"']'\", \"'('\", \"')'\", \"','\", \"$accept\",",
          "662:   \"rule_modifiers\", \"rule_modifier\", \"tags\", \"tag_list\",",
          "663:   \"meta_declarations\", \"meta_declaration\", \"string_declarations\",",
          "665:   \"identifier\", \"arguments\", \"arguments_list\", \"regexp\",",
          "668:   \"string_enumeration\", \"string_enumeration_item\", \"for_expression\",",
          "669:   \"primary_expression\", 0",
          "670: };",
          "",
          "[Removed Lines]",
          "661:   \"rules\", \"import\", \"rule\", \"@1\", \"meta\", \"strings\", \"condition\",",
          "664:   \"string_declaration\", \"@2\", \"string_modifiers\", \"string_modifier\",",
          "666:   \"boolean_expression\", \"expression\", \"@3\", \"@4\", \"@5\", \"@6\", \"@7\",",
          "667:   \"integer_set\", \"range\", \"integer_enumeration\", \"string_set\", \"@8\",",
          "",
          "[Added Lines]",
          "661:   \"rules\", \"import\", \"rule\", \"@1\", \"@2\", \"meta\", \"strings\", \"condition\",",
          "664:   \"string_declaration\", \"@3\", \"string_modifiers\", \"string_modifier\",",
          "666:   \"boolean_expression\", \"expression\", \"@4\", \"@5\", \"@6\", \"@7\", \"@8\",",
          "667:   \"integer_set\", \"range\", \"integer_enumeration\", \"string_set\", \"@9\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "690: static const yytype_uint8 yyr1[] =",
          "691: {",
          "692:        0,    72,    73,    73,    73,    73,    73,    73,    74,    76,",
          "704: };",
          "707: static const yytype_uint8 yyr2[] =",
          "708: {",
          "709:        0,     2,     0,     2,     2,     3,     3,     3,     2,     0,",
          "721: };",
          "",
          "[Removed Lines]",
          "693:       75,    77,    77,    78,    78,    79,    80,    80,    81,    81,",
          "694:       82,    82,    83,    83,    84,    84,    85,    85,    85,    85,",
          "695:       86,    86,    87,    88,    87,    87,    89,    89,    90,    90,",
          "696:       90,    90,    91,    91,    91,    91,    92,    92,    93,    93,",
          "697:       94,    95,    96,    96,    96,    96,    96,    96,    96,    97,",
          "698:       98,    96,    99,    96,    96,    96,   100,    96,   101,    96,",
          "699:       96,    96,    96,    96,    96,    96,    96,    96,   102,   102,",
          "700:      103,   104,   104,   106,   105,   105,   107,   107,   108,   108,",
          "701:      109,   109,   109,   110,   110,   110,   110,   110,   110,   110,",
          "702:      110,   110,   110,   110,   110,   110,   110,   110,   110,   110,",
          "703:      110,   110,   110,   110,   110,   110,   110,   110,   110",
          "710:       10,     0,     3,     0,     3,     3,     0,     2,     1,     1,",
          "711:        0,     2,     1,     2,     1,     2,     3,     3,     3,     3,",
          "712:        1,     2,     4,     0,     5,     3,     0,     2,     1,     1,",
          "713:        1,     1,     1,     3,     4,     4,     0,     1,     1,     3,",
          "714:        1,     1,     1,     1,     3,     3,     1,     3,     3,     0,",
          "715:        0,    11,     0,     9,     3,     2,     0,     4,     0,     4,",
          "716:        3,     3,     3,     3,     3,     3,     1,     3,     3,     1,",
          "717:        5,     1,     3,     0,     4,     1,     1,     3,     1,     1,",
          "718:        1,     1,     1,     3,     1,     1,     4,     1,     1,     1,",
          "719:        1,     4,     1,     4,     1,     1,     2,     3,     3,     3,",
          "720:        3,     3,     3,     3,     3,     2,     3,     3,     1",
          "",
          "[Added Lines]",
          "693:       77,    75,    78,    78,    79,    79,    80,    81,    81,    82,",
          "694:       82,    83,    83,    84,    84,    85,    85,    86,    86,    86,",
          "695:       86,    87,    87,    88,    89,    88,    88,    90,    90,    91,",
          "696:       91,    91,    91,    92,    92,    92,    92,    93,    93,    94,",
          "697:       94,    95,    96,    97,    97,    97,    97,    97,    97,    97,",
          "698:       98,    99,    97,   100,    97,    97,    97,   101,    97,   102,",
          "699:       97,    97,    97,    97,    97,    97,    97,    97,    97,   103,",
          "700:      103,   104,   105,   105,   107,   106,   106,   108,   108,   109,",
          "701:      109,   110,   110,   110,   111,   111,   111,   111,   111,   111,",
          "702:      111,   111,   111,   111,   111,   111,   111,   111,   111,   111,",
          "703:      111,   111,   111,   111,   111,   111,   111,   111,   111,   111",
          "710:        0,    11,     0,     3,     0,     3,     3,     0,     2,     1,",
          "711:        1,     0,     2,     1,     2,     1,     2,     3,     3,     3,",
          "712:        3,     1,     2,     4,     0,     5,     3,     0,     2,     1,",
          "713:        1,     1,     1,     1,     3,     4,     4,     0,     1,     1,",
          "714:        3,     1,     1,     1,     1,     3,     3,     1,     3,     3,",
          "715:        0,     0,    11,     0,     9,     3,     2,     0,     4,     0,",
          "716:        4,     3,     3,     3,     3,     3,     3,     1,     3,     3,",
          "717:        1,     5,     1,     3,     0,     4,     1,     1,     3,     1,",
          "718:        1,     1,     1,     1,     3,     1,     1,     4,     1,     1,",
          "719:        1,     1,     4,     1,     4,     1,     1,     2,     3,     3,",
          "720:        3,     3,     3,     3,     3,     3,     2,     3,     3,     1",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "726: static const yytype_uint8 yydefact[] =",
          "727: {",
          "738:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,",
          "749: };",
          "752: static const yytype_int16 yydefgoto[] =",
          "753: {",
          "758: };",
          "763: static const yytype_int16 yypact[] =",
          "764: {",
          "786: };",
          "789: static const yytype_int16 yypgoto[] =",
          "790: {",
          "795: };",
          "798:    positive, shift that token.  If negative, reduce the rule which",
          "799:    number is the opposite.  If zero, do what YYDEFACT says.",
          "802: static const yytype_int16 yytable[] =",
          "803: {",
          "844: };",
          "846: static const yytype_int16 yycheck[] =",
          "847: {",
          "855:       10,    69,    62,    27,    28,    29,    30,    11,     7,    33,",
          "856:       64,    15,    19,    20,    38,    39,    16,    40,    41,    19,",
          "864:       51,    52,    53,    54,    55,    56,    57,    70,    71,    69,",
          "865:        4,     5,     6,    70,    71,    64,    54,    63,    21,    70,",
          "866:       58,    69,    67,    42,    43,    44,    67,    32,    70,    69,",
          "",
          "[Removed Lines]",
          "728:        2,     0,     1,    16,     0,     4,     3,     0,     7,     6,",
          "729:        5,     8,     0,    18,    19,    17,    20,     0,     0,    22,",
          "730:       21,    11,    23,     0,    13,     0,     0,     9,     0,    12,",
          "731:       24,     0,     0,     0,    25,     0,    14,    30,     0,     0,",
          "732:       27,    26,    28,    29,    33,    31,     0,    10,    36,    35,",
          "733:        0,    42,    56,   100,   102,   104,    97,    98,     0,    99,",
          "734:       50,    94,    95,    91,    92,     0,    52,    53,     0,     0,",
          "735:        0,     0,   105,   118,    15,    51,     0,    76,    32,    36,",
          "736:        0,     0,     0,     0,     0,     0,     0,    90,   106,   115,",
          "737:       65,     0,    51,    76,     0,     0,    46,    68,    66,     0,",
          "739:        0,     0,     0,     0,     0,     0,     0,     0,    39,    38,",
          "740:       40,    41,    37,    34,    57,     0,    58,     0,     0,     0,",
          "741:        0,     0,     0,    77,    93,    43,     0,     0,    47,    48,",
          "742:        0,     0,    85,    83,    64,    54,    55,   114,   112,   113,",
          "743:       75,    74,    73,    71,    72,    70,   117,   116,   107,   108,",
          "744:      109,   110,   111,     0,   101,   103,    96,    59,     0,    44,",
          "745:       45,     0,    69,    67,     0,     0,     0,    62,    49,    88,",
          "746:       89,     0,    86,     0,     0,     0,    79,     0,    84,     0,",
          "747:       80,     0,    81,    60,     0,    87,    78,     0,     0,     0,",
          "748:       82,     0,    63,     0,    61",
          "754:       -1,     1,     5,     6,    32,    24,    27,    39,     7,    15,",
          "755:       18,    20,    29,    30,    36,    37,    50,    78,   122,    72,",
          "756:      137,   138,    73,    91,    75,   176,   198,   187,   141,   140,",
          "757:      185,   126,   191,   144,   174,   181,   182,    76,    77",
          "762: #define YYPACT_NINF -70",
          "765:      -70,    29,   -70,   -29,   -16,   -70,   -70,   166,   -70,   -70,",
          "766:      -70,   -70,    13,   -70,   -70,   -70,   -10,    60,    10,   -70,",
          "767:       91,    71,   -70,    16,    95,   121,    41,   -70,    42,   121,",
          "768:      -70,   126,   133,    70,   -70,    94,   126,   -70,   111,   114,",
          "769:      -70,   -70,   -70,   -70,    63,   -70,    46,   -70,   -70,   -70,",
          "770:      157,   -70,    -9,   -70,   115,   119,   -70,   -70,   112,   -70,",
          "771:      -70,   -70,   -70,   -70,   -70,   100,   -70,   -70,   122,   122,",
          "772:       46,    46,    30,   -70,    47,   -70,   155,   290,    68,   -70,",
          "773:      122,   120,   122,   122,   122,   122,    -4,   306,   -70,   -70,",
          "774:      -70,    47,   118,   167,   180,   122,    46,   -70,   -70,     2,",
          "775:      179,   122,   122,   122,   122,   122,   122,   122,   122,   122,",
          "776:      122,   122,   122,   122,   122,   122,   122,   122,   -70,   -70,",
          "777:      -70,   -70,   -70,    68,   306,   122,   -70,   227,   245,   109,",
          "778:      187,   170,     2,   -70,   -70,   -70,   263,   134,   135,   116,",
          "779:       46,    46,   -70,   -70,   -70,   -70,   306,   321,   335,   -42,",
          "780:      306,   306,   306,   306,   306,   306,    69,    69,    90,    90,",
          "781:      -70,   -70,   -70,   141,   -70,   -70,   -70,   -70,   143,   -70,",
          "782:      -70,    46,   164,   -70,    66,   122,   139,   -70,   116,   -70,",
          "783:      -70,    97,   -70,   207,   122,   161,   -70,   158,   -70,    66,",
          "784:      -70,   103,   141,   -70,    46,   -70,   -70,   122,   159,   -15,",
          "785:      306,    46,   -70,    28,   -70",
          "791:      -70,   -70,   223,   229,   -70,   -70,   -70,   -70,   -70,   -70,",
          "792:      -70,   -70,   -70,   204,   -70,   198,   -70,   156,   -70,   -70,",
          "793:      -70,   -70,   136,   -46,   -69,   -70,   -70,   -70,   -70,   -70,",
          "794:      -70,    72,   -70,   113,   -70,   -70,    57,   182,   -64",
          "801: #define YYTABLE_NINF -91",
          "804:       74,    87,    92,    11,    88,    89,   131,    93,     4,   111,",
          "805:      112,   113,   114,   115,   116,   117,   124,    80,   127,   128,",
          "806:      129,   130,    81,    16,    90,    97,    98,   139,   132,     2,",
          "807:        3,   136,     8,   -16,   -16,   -16,   142,   146,   147,   148,",
          "808:      149,   150,   151,   152,   153,   154,   155,   156,   157,   158,",
          "809:      159,   160,   161,   162,    17,   202,    51,    52,    53,    54,",
          "810:       55,   163,    56,    57,    58,    59,     4,    60,    97,    98,",
          "811:       19,   143,    21,    61,    62,    63,    64,   179,    23,    65,",
          "812:       25,   180,    48,    49,    66,    67,    40,    97,    98,    41,",
          "813:      118,   119,   120,   121,   172,   173,    94,    95,   204,    96,",
          "814:       68,    22,   178,    26,    69,    31,    70,    33,    42,    43,",
          "815:       51,   183,    53,    54,    55,    71,    56,    57,    58,    59,",
          "816:      192,    60,   113,   114,   115,   116,   117,    61,    62,    63,",
          "817:       64,    28,    51,   200,    53,    54,    55,    35,    56,    57,",
          "818:       58,    59,    38,    60,   175,   115,   116,   117,   199,    61,",
          "819:       62,   102,   103,   104,    68,   203,   -51,   -51,    69,    44,",
          "820:      111,   112,   113,   114,   115,   116,   117,   188,   189,    85,",
          "821:       12,    13,    14,   196,   197,    46,    68,    47,    79,   166,",
          "822:       69,    84,    82,   102,   103,   104,    83,    99,   133,   125,",
          "823:      135,    85,   111,   112,   113,   114,   115,   116,   117,   -90,",
          "824:       60,   167,   100,   101,   170,    98,   171,   177,   184,   102,",
          "825:      103,   104,   105,   106,   107,   108,   109,   110,   111,   112,",
          "826:      113,   114,   115,   116,   117,   193,     9,   194,   201,   102,",
          "827:      103,   104,    10,    34,    45,   123,   145,   134,   111,   112,",
          "828:      113,   114,   115,   116,   117,   168,   195,    86,   186,   102,",
          "829:      103,   104,     0,     0,     0,     0,     0,   134,   111,   112,",
          "830:      113,   114,   115,   116,   117,     0,     0,     0,     0,   102,",
          "831:      103,   104,     0,     0,     0,     0,     0,   190,   111,   112,",
          "832:      113,   114,   115,   116,   117,     0,     0,   102,   103,   104,",
          "833:        0,     0,     0,     0,     0,   164,   111,   112,   113,   114,",
          "834:      115,   116,   117,     0,     0,   102,   103,   104,     0,     0,",
          "835:        0,     0,     0,   165,   111,   112,   113,   114,   115,   116,",
          "836:      117,     0,   -90,     0,     0,   100,   101,     0,     0,     0,",
          "837:        0,   169,   102,   103,   104,   105,   106,   107,   108,   109,",
          "838:      110,   111,   112,   113,   114,   115,   116,   117,   102,   103,",
          "839:      104,     0,     0,     0,     0,     0,     0,   111,   112,   113,",
          "840:      114,   115,   116,   117,   103,   104,     0,     0,     0,     0,",
          "841:        0,     0,   111,   112,   113,   114,   115,   116,   117,   104,",
          "842:        0,     0,     0,     0,     0,     0,   111,   112,   113,   114,",
          "843:      115,   116,   117",
          "848:       46,    65,    71,    19,    68,    69,    10,    71,    37,    51,",
          "849:       52,    53,    54,    55,    56,    57,    80,    26,    82,    83,",
          "850:       84,    85,    31,    10,    70,    40,    41,    96,    32,     0,",
          "851:        1,    95,    61,     4,     5,     6,    34,   101,   102,   103,",
          "852:      104,   105,   106,   107,   108,   109,   110,   111,   112,   113,",
          "853:      114,   115,   116,   117,    64,    70,    10,    11,    12,    13,",
          "854:       14,   125,    16,    17,    18,    19,    37,    21,    40,    41,",
          "857:       22,    23,    24,    25,   140,   141,    66,    67,    70,    69,",
          "858:       54,    10,   171,     8,    58,    64,    60,    65,    38,    39,",
          "859:       10,   175,    12,    13,    14,    69,    16,    17,    18,    19,",
          "860:      184,    21,    53,    54,    55,    56,    57,    27,    28,    29,",
          "861:       30,    10,    10,   197,    12,    13,    14,    11,    16,    17,",
          "862:       18,    19,     9,    21,     3,    55,    56,    57,   194,    27,",
          "863:       28,    42,    43,    44,    54,   201,    40,    41,    58,    65,",
          "",
          "[Added Lines]",
          "728:        2,     0,     1,    17,     0,     4,     3,     0,     7,     6,",
          "729:        5,     8,     0,    19,    20,    18,     9,    21,     0,     0,",
          "730:       23,    22,    12,    24,     0,    14,     0,     0,    10,     0,",
          "731:       13,    25,     0,     0,     0,    26,     0,    15,    31,     0,",
          "732:        0,    28,    27,    29,    30,    34,    32,     0,    11,    37,",
          "733:       36,     0,    43,    57,   101,   103,   105,    98,    99,     0,",
          "734:      100,    51,    95,    96,    92,    93,     0,    53,    54,     0,",
          "735:        0,     0,     0,   106,   119,    16,    52,     0,    77,    33,",
          "736:       37,     0,     0,     0,     0,     0,     0,     0,    91,   107,",
          "737:      116,    66,     0,    52,    77,     0,     0,    47,    69,    67,",
          "739:        0,     0,     0,     0,     0,     0,     0,     0,     0,    40,",
          "740:       39,    41,    42,    38,    35,    58,     0,    59,     0,     0,",
          "741:        0,     0,     0,     0,    78,    94,    44,     0,     0,    48,",
          "742:       49,     0,     0,    86,    84,    65,    55,    56,   115,   113,",
          "743:      114,    76,    75,    74,    72,    73,    71,   118,   117,   108,",
          "744:      109,   110,   111,   112,     0,   102,   104,    97,    60,     0,",
          "745:       45,    46,     0,    70,    68,     0,     0,     0,    63,    50,",
          "746:       89,    90,     0,    87,     0,     0,     0,    80,     0,    85,",
          "747:        0,    81,     0,    82,    61,     0,    88,    79,     0,     0,",
          "748:        0,    83,     0,    64,     0,    62",
          "754:       -1,     1,     5,     6,    17,    33,    25,    28,    40,     7,",
          "755:       15,    19,    21,    30,    31,    37,    38,    51,    79,   123,",
          "756:       73,   138,   139,    74,    92,    76,   177,   199,   188,   142,",
          "757:      141,   186,   127,   192,   145,   175,   182,   183,    77,    78",
          "762: #define YYPACT_NINF -71",
          "765:      -71,    29,   -71,   -29,   -16,   -71,   -71,   166,   -71,   -71,",
          "766:      -71,   -71,    13,   -71,   -71,   -71,   -71,   -10,    60,    10,",
          "767:      -71,    91,    71,   -71,    16,    95,   121,    41,   -71,    42,",
          "768:      121,   -71,   126,   133,    70,   -71,    94,   126,   -71,   111,",
          "769:      114,   -71,   -71,   -71,   -71,    63,   -71,    46,   -71,   -71,",
          "770:      -71,   157,   -71,    -9,   -71,   115,   119,   -71,   -71,   112,",
          "771:      -71,   -71,   -71,   -71,   -71,   -71,   100,   -71,   -71,   122,",
          "772:      122,    46,    46,    30,   -71,    47,   -71,   155,   290,    68,",
          "773:      -71,   122,   120,   122,   122,   122,   122,    -4,   306,   -71,",
          "774:      -71,   -71,    47,   118,   167,   180,   122,    46,   -71,   -71,",
          "775:        2,   179,   122,   122,   122,   122,   122,   122,   122,   122,",
          "776:      122,   122,   122,   122,   122,   122,   122,   122,   122,   -71,",
          "777:      -71,   -71,   -71,   -71,    68,   306,   122,   -71,   227,   245,",
          "778:      109,   187,   170,     2,   -71,   -71,   -71,   263,   134,   135,",
          "779:      116,    46,    46,   -71,   -71,   -71,   -71,   306,   321,   335,",
          "780:      -42,   306,   306,   306,   306,   306,   306,    69,    69,    90,",
          "781:       90,   -71,   -71,   -71,   141,   -71,   -71,   -71,   -71,   143,",
          "782:      -71,   -71,    46,   164,   -71,    66,   122,   139,   -71,   116,",
          "783:      -71,   -71,    97,   -71,   207,   122,   161,   -71,   158,   -71,",
          "784:       66,   -71,   103,   141,   -71,    46,   -71,   -71,   122,   159,",
          "785:      -15,   306,    46,   -71,    28,   -71",
          "791:      -71,   -71,   223,   229,   -71,   -71,   -71,   -71,   -71,   -71,",
          "792:      -71,   -71,   -71,   -71,   203,   -71,   197,   -71,   156,   -71,",
          "793:      -71,   -71,   -71,   144,   -47,   -70,   -71,   -71,   -71,   -71,",
          "794:      -71,   -71,    58,   -71,   113,   -71,   -71,    57,   182,   -65",
          "801: #define YYTABLE_NINF -92",
          "804:       75,    88,    93,    11,    89,    90,   132,    94,     4,   112,",
          "805:      113,   114,   115,   116,   117,   118,   125,    81,   128,   129,",
          "806:      130,   131,    82,    16,    91,    98,    99,   140,   133,     2,",
          "807:        3,   137,     8,   -17,   -17,   -17,   143,   147,   148,   149,",
          "808:      150,   151,   152,   153,   154,   155,   156,   157,   158,   159,",
          "809:      160,   161,   162,   163,    18,   203,    52,    53,    54,    55,",
          "810:       56,   164,    57,    58,    59,    60,     4,    61,    98,    99,",
          "811:       20,   144,    22,    62,    63,    64,    65,   180,    24,    66,",
          "812:       26,   181,    49,    50,    67,    68,    41,    98,    99,    42,",
          "813:      119,   120,   121,   122,   173,   174,    95,    96,   205,    97,",
          "814:       69,    23,   179,    27,    70,    32,    71,    34,    43,    44,",
          "815:       52,   184,    54,    55,    56,    72,    57,    58,    59,    60,",
          "816:      193,    61,   114,   115,   116,   117,   118,    62,    63,    64,",
          "817:       65,    29,    52,   201,    54,    55,    56,    36,    57,    58,",
          "818:       59,    60,    39,    61,   176,   116,   117,   118,   200,    62,",
          "819:       63,   103,   104,   105,    69,   204,   -52,   -52,    70,    45,",
          "820:      112,   113,   114,   115,   116,   117,   118,   189,   190,    86,",
          "821:       12,    13,    14,   197,   198,    47,    69,    48,    80,   167,",
          "822:       70,    85,    83,   103,   104,   105,    84,   100,   134,   126,",
          "823:      136,    86,   112,   113,   114,   115,   116,   117,   118,   -91,",
          "824:       61,   168,   101,   102,   171,    99,   172,   178,   185,   103,",
          "825:      104,   105,   106,   107,   108,   109,   110,   111,   112,   113,",
          "826:      114,   115,   116,   117,   118,   194,     9,   195,   202,   103,",
          "827:      104,   105,    10,    35,    46,   187,   124,   135,   112,   113,",
          "828:      114,   115,   116,   117,   118,   146,   169,   196,    87,   103,",
          "829:      104,   105,     0,     0,     0,     0,     0,   135,   112,   113,",
          "830:      114,   115,   116,   117,   118,     0,     0,     0,     0,   103,",
          "831:      104,   105,     0,     0,     0,     0,     0,   191,   112,   113,",
          "832:      114,   115,   116,   117,   118,     0,     0,   103,   104,   105,",
          "833:        0,     0,     0,     0,     0,   165,   112,   113,   114,   115,",
          "834:      116,   117,   118,     0,     0,   103,   104,   105,     0,     0,",
          "835:        0,     0,     0,   166,   112,   113,   114,   115,   116,   117,",
          "836:      118,     0,   -91,     0,     0,   101,   102,     0,     0,     0,",
          "837:        0,   170,   103,   104,   105,   106,   107,   108,   109,   110,",
          "838:      111,   112,   113,   114,   115,   116,   117,   118,   103,   104,",
          "839:      105,     0,     0,     0,     0,     0,     0,   112,   113,   114,",
          "840:      115,   116,   117,   118,   104,   105,     0,     0,     0,     0,",
          "841:        0,     0,   112,   113,   114,   115,   116,   117,   118,   105,",
          "842:        0,     0,     0,     0,     0,     0,   112,   113,   114,   115,",
          "843:      116,   117,   118",
          "848:       47,    66,    72,    19,    69,    70,    10,    72,    37,    51,",
          "849:       52,    53,    54,    55,    56,    57,    81,    26,    83,    84,",
          "850:       85,    86,    31,    10,    71,    40,    41,    97,    32,     0,",
          "851:        1,    96,    61,     4,     5,     6,    34,   102,   103,   104,",
          "852:      105,   106,   107,   108,   109,   110,   111,   112,   113,   114,",
          "853:      115,   116,   117,   118,    64,    70,    10,    11,    12,    13,",
          "854:       14,   126,    16,    17,    18,    19,    37,    21,    40,    41,",
          "857:       22,    23,    24,    25,   141,   142,    66,    67,    70,    69,",
          "858:       54,    10,   172,     8,    58,    64,    60,    65,    38,    39,",
          "859:       10,   176,    12,    13,    14,    69,    16,    17,    18,    19,",
          "860:      185,    21,    53,    54,    55,    56,    57,    27,    28,    29,",
          "861:       30,    10,    10,   198,    12,    13,    14,    11,    16,    17,",
          "862:       18,    19,     9,    21,     3,    55,    56,    57,   195,    27,",
          "863:       28,    42,    43,    44,    54,   202,    40,    41,    58,    65,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "868:       21,    31,    35,    36,    70,    41,    71,    64,    69,    42,",
          "869:       43,    44,    45,    46,    47,    48,    49,    50,    51,    52,",
          "870:       53,    54,    55,    56,    57,    64,     3,    69,    69,    42,",
          "873:       43,    44,    -1,    -1,    -1,    -1,    -1,    70,    51,    52,",
          "874:       53,    54,    55,    56,    57,    -1,    -1,    -1,    -1,    42,",
          "875:       43,    44,    -1,    -1,    -1,    -1,    -1,    70,    51,    52,",
          "",
          "[Removed Lines]",
          "871:       43,    44,     3,    29,    36,    79,   100,    70,    51,    52,",
          "872:       53,    54,    55,    56,    57,   132,   189,    65,   176,    42,",
          "",
          "[Added Lines]",
          "871:       43,    44,     3,    30,    37,   177,    80,    70,    51,    52,",
          "872:       53,    54,    55,    56,    57,   101,   133,   190,    66,    42,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "892: static const yytype_uint8 yystos[] =",
          "893: {",
          "915: };",
          "917: #define yyerrok  (yyerrstatus = 0)",
          "",
          "[Removed Lines]",
          "894:        0,    73,     0,     1,    37,    74,    75,    80,    61,    74,",
          "895:       75,    19,     4,     5,     6,    81,    10,    64,    82,    10,",
          "896:       83,    62,    10,     7,    77,    64,     8,    78,    10,    84,",
          "897:       85,    64,    76,    65,    85,    11,    86,    87,     9,    79,",
          "898:       16,    19,    38,    39,    65,    87,    64,    63,    19,    20,",
          "899:       88,    10,    11,    12,    13,    14,    16,    17,    18,    19,",
          "900:       21,    27,    28,    29,    30,    33,    38,    39,    54,    58,",
          "901:       60,    69,    91,    94,    95,    96,   109,   110,    89,    21,",
          "902:       26,    31,    67,    67,    69,    69,   109,   110,   110,   110,",
          "903:       95,    95,    96,   110,    66,    67,    69,    40,    41,    32,",
          "904:       35,    36,    42,    43,    44,    45,    46,    47,    48,    49,",
          "905:       50,    51,    52,    53,    54,    55,    56,    57,    22,    23,",
          "906:       24,    25,    90,    89,   110,    69,   103,   110,   110,   110,",
          "907:      110,    10,    32,    70,    70,    10,   110,    92,    93,    96,",
          "908:      101,   100,    34,    69,   105,    94,   110,   110,   110,   110,",
          "909:      110,   110,   110,   110,   110,   110,   110,   110,   110,   110,",
          "910:      110,   110,   110,   110,    68,    68,    70,    31,   105,    68,",
          "911:       70,    71,    95,    95,   106,     3,    97,    64,    96,    11,",
          "912:       15,   107,   108,   110,    69,   102,   103,    99,    70,    71,",
          "913:       70,   104,   110,    64,    69,   108,    70,    71,    98,    95,",
          "914:      110,    69,    70,    95,    70",
          "",
          "[Added Lines]",
          "894:        0,    73,     0,     1,    37,    74,    75,    81,    61,    74,",
          "895:       75,    19,     4,     5,     6,    82,    10,    76,    64,    83,",
          "896:       10,    84,    62,    10,     7,    78,    64,     8,    79,    10,",
          "897:       85,    86,    64,    77,    65,    86,    11,    87,    88,     9,",
          "898:       80,    16,    19,    38,    39,    65,    88,    64,    63,    19,",
          "899:       20,    89,    10,    11,    12,    13,    14,    16,    17,    18,",
          "900:       19,    21,    27,    28,    29,    30,    33,    38,    39,    54,",
          "901:       58,    60,    69,    92,    95,    96,    97,   110,   111,    90,",
          "902:       21,    26,    31,    67,    67,    69,    69,   110,   111,   111,",
          "903:      111,    96,    96,    97,   111,    66,    67,    69,    40,    41,",
          "904:       32,    35,    36,    42,    43,    44,    45,    46,    47,    48,",
          "905:       49,    50,    51,    52,    53,    54,    55,    56,    57,    22,",
          "906:       23,    24,    25,    91,    90,   111,    69,   104,   111,   111,",
          "907:      111,   111,    10,    32,    70,    70,    10,   111,    93,    94,",
          "908:       97,   102,   101,    34,    69,   106,    95,   111,   111,   111,",
          "909:      111,   111,   111,   111,   111,   111,   111,   111,   111,   111,",
          "910:      111,   111,   111,   111,   111,    68,    68,    70,    31,   106,",
          "911:       68,    70,    71,    96,    96,   107,     3,    98,    64,    97,",
          "912:       11,    15,   108,   109,   111,    69,   103,   104,   100,    70,",
          "913:       71,    70,   105,   111,    64,    69,   109,    70,    71,    99,",
          "914:       96,   111,    69,    70,    96,    70",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1798:     break;",
          "1800:   case 9:",
          "1802:     {",
          "1803:         YR_RULE* rule = yr_parser_reduce_rule_declaration_phase_1(",
          "1804:             yyscanner, (int32_t) (yyvsp[(1) - (7)].integer), (yyvsp[(3) - (7)].c_string), (yyvsp[(4) - (7)].c_string), (yyvsp[(7) - (7)].string), (yyvsp[(6) - (7)].meta));",
          "",
          "[Removed Lines]",
          "1801: #line 224 \"grammar.y\"",
          "",
          "[Added Lines]",
          "1801: #line 224 \"grammar.y\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1809:       }",
          "1810:     break;",
          "1813: #line 233 \"grammar.y\"",
          "1814:     {",
          "1815:         YR_RULE* rule = (yyvsp[(8) - (10)].rule); // rule created in phase 1",
          "1818:             yyscanner, rule);",
          "1820:         yr_free((yyvsp[(3) - (10)].c_string));",
          "1822:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "1826:   case 11:",
          "1827: #line 248 \"grammar.y\"",
          "1828:     {",
          "1829:         (yyval.meta) = NULL;",
          "1833:   case 12:",
          "1834: #line 252 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "1812:   case 10:",
          "1817:         compiler->last_result = yr_parser_reduce_rule_declaration_phase_2(",
          "1823:       }",
          "1824:     break;",
          "1830:       }",
          "1831:     break;",
          "",
          "[Added Lines]",
          "1812:   case 10:",
          "1813: #line 233 \"grammar.y\"",
          "1814:     {",
          "1815:         YR_RULE* rule = (yyvsp[(6) - (8)].rule); // rule created in phase 1",
          "1817:         rule->tags = (yyvsp[(5) - (8)].c_string);",
          "1818:         rule->metas = (yyvsp[(7) - (8)].meta);",
          "1819:         rule->strings = (yyvsp[(8) - (8)].string);",
          "1820:       }",
          "1821:     break;",
          "1823:   case 11:",
          "1828:         compiler->last_result = yr_parser_reduce_rule_declaration_phase_2(",
          "1834:       }",
          "1835:     break;",
          "1841:       }",
          "1842:     break;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1853:         (yyval.meta) = (yyvsp[(3) - (3)].meta);",
          "1855:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "1859:   case 13:",
          "1860: #line 279 \"grammar.y\"",
          "1861:     {",
          "1862:         (yyval.string) = NULL;",
          "1866:   case 14:",
          "1867: #line 283 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "1856:       }",
          "1857:     break;",
          "1863:       }",
          "1864:     break;",
          "",
          "[Added Lines]",
          "1867:       }",
          "1868:     break;",
          "1874:       }",
          "1875:     break;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1886:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "1888:         (yyval.string) = (yyvsp[(3) - (3)].string);",
          "1892:   case 16:",
          "1893: #line 314 \"grammar.y\"",
          "1897:   case 17:",
          "1898: #line 315 \"grammar.y\"",
          "1902:   case 18:",
          "1903: #line 320 \"grammar.y\"",
          "1907:   case 19:",
          "1908: #line 321 \"grammar.y\"",
          "1912:   case 20:",
          "1913: #line 327 \"grammar.y\"",
          "1914:     {",
          "1915:         (yyval.c_string) = NULL;",
          "1919:   case 21:",
          "1920: #line 331 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "1889:       }",
          "1890:     break;",
          "1894:     { (yyval.integer) = 0;  }",
          "1895:     break;",
          "1899:     { (yyval.integer) = (yyvsp[(1) - (2)].integer) | (yyvsp[(2) - (2)].integer); }",
          "1900:     break;",
          "1904:     { (yyval.integer) = RULE_GFLAGS_PRIVATE; }",
          "1905:     break;",
          "1909:     { (yyval.integer) = RULE_GFLAGS_GLOBAL; }",
          "1910:     break;",
          "1916:       }",
          "1917:     break;",
          "",
          "[Added Lines]",
          "1900:       }",
          "1901:     break;",
          "1905:     { (yyval.integer) = 0;  }",
          "1906:     break;",
          "1910:     { (yyval.integer) = (yyvsp[(1) - (2)].integer) | (yyvsp[(2) - (2)].integer); }",
          "1911:     break;",
          "1915:     { (yyval.integer) = RULE_GFLAGS_PRIVATE; }",
          "1916:     break;",
          "1920:     { (yyval.integer) = RULE_GFLAGS_GLOBAL; }",
          "1921:     break;",
          "1927:       }",
          "1928:     break;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1930:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "1932:         (yyval.c_string) = (yyvsp[(2) - (2)].c_string);",
          "1936:   case 22:",
          "1937: #line 349 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "1933:       }",
          "1934:     break;",
          "",
          "[Added Lines]",
          "1944:       }",
          "1945:     break;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1946:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "1948:         (yyval.c_string) = identifier;",
          "1952:   case 23:",
          "1953: #line 362 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "1949:       }",
          "1950:     break;",
          "",
          "[Added Lines]",
          "1960:       }",
          "1961:     break;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1981:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "1983:         (yyval.c_string) = (yyvsp[(1) - (2)].c_string);",
          "1987:   case 24:",
          "1988: #line 398 \"grammar.y\"",
          "1992:   case 25:",
          "1993: #line 399 \"grammar.y\"",
          "1997:   case 26:",
          "1998: #line 405 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "1984:       }",
          "1985:     break;",
          "1989:     {  (yyval.meta) = (yyvsp[(1) - (1)].meta); }",
          "1990:     break;",
          "1994:     {  (yyval.meta) = (yyvsp[(1) - (2)].meta); }",
          "1995:     break;",
          "",
          "[Added Lines]",
          "1995:       }",
          "1996:     break;",
          "2000:     {  (yyval.meta) = (yyvsp[(1) - (1)].meta); }",
          "2001:     break;",
          "2005:     {  (yyval.meta) = (yyvsp[(1) - (2)].meta); }",
          "2006:     break;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2010:         yr_free((yyvsp[(3) - (3)].sized_string));",
          "2012:         ERROR_IF((yyval.meta) == NULL);",
          "2016:   case 27:",
          "2017: #line 421 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "2013:       }",
          "2014:     break;",
          "",
          "[Added Lines]",
          "2024:       }",
          "2025:     break;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2026:         yr_free((yyvsp[(1) - (3)].c_string));",
          "2028:         ERROR_IF((yyval.meta) == NULL);",
          "2032:   case 28:",
          "2033: #line 434 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "2029:       }",
          "2030:     break;",
          "",
          "[Added Lines]",
          "2040:       }",
          "2041:     break;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2042:         yr_free((yyvsp[(1) - (3)].c_string));",
          "2044:         ERROR_IF((yyval.meta) == NULL);",
          "2048:   case 29:",
          "2049: #line 447 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "2045:       }",
          "2046:     break;",
          "",
          "[Added Lines]",
          "2056:       }",
          "2057:     break;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2058:         yr_free((yyvsp[(1) - (3)].c_string));",
          "2060:         ERROR_IF((yyval.meta) == NULL);",
          "2064:   case 30:",
          "2065: #line 463 \"grammar.y\"",
          "2069:   case 31:",
          "2070: #line 464 \"grammar.y\"",
          "2074:   case 32:",
          "2075: #line 470 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "2061:       }",
          "2062:     break;",
          "2066:     { (yyval.string) = (yyvsp[(1) - (1)].string); }",
          "2067:     break;",
          "2071:     { (yyval.string) = (yyvsp[(1) - (2)].string); }",
          "2072:     break;",
          "",
          "[Added Lines]",
          "2072:       }",
          "2073:     break;",
          "2077:     { (yyval.string) = (yyvsp[(1) - (1)].string); }",
          "2078:     break;",
          "2082:     { (yyval.string) = (yyvsp[(1) - (2)].string); }",
          "2083:     break;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2081:         yr_free((yyvsp[(3) - (4)].sized_string));",
          "2083:         ERROR_IF((yyval.string) == NULL);",
          "2087:   case 33:",
          "2088: #line 480 \"grammar.y\"",
          "2089:     {",
          "2090:         compiler->error_line = yyget_lineno(yyscanner);",
          "2094:   case 34:",
          "2095: #line 484 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "2084:       }",
          "2085:     break;",
          "2091:       }",
          "2092:     break;",
          "",
          "[Added Lines]",
          "2095:       }",
          "2096:     break;",
          "2102:       }",
          "2103:     break;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2103:         ERROR_IF((yyval.string) == NULL);",
          "2105:         compiler->error_line = 0;",
          "2109:   case 35:",
          "2110: #line 496 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "2106:       }",
          "2107:     break;",
          "",
          "[Added Lines]",
          "2117:       }",
          "2118:     break;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2116:         yr_free((yyvsp[(3) - (3)].sized_string));",
          "2118:         ERROR_IF((yyval.string) == NULL);",
          "2122:   case 36:",
          "2123: #line 509 \"grammar.y\"",
          "2127:   case 37:",
          "2128: #line 510 \"grammar.y\"",
          "2132:   case 38:",
          "2133: #line 515 \"grammar.y\"",
          "2137:   case 39:",
          "2138: #line 516 \"grammar.y\"",
          "2142:   case 40:",
          "2143: #line 517 \"grammar.y\"",
          "2147:   case 41:",
          "2148: #line 518 \"grammar.y\"",
          "2152:   case 42:",
          "2153: #line 524 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "2119:       }",
          "2120:     break;",
          "2124:     { (yyval.integer) = 0; }",
          "2125:     break;",
          "2129:     { (yyval.integer) = (yyvsp[(1) - (2)].integer) | (yyvsp[(2) - (2)].integer); }",
          "2130:     break;",
          "2134:     { (yyval.integer) = STRING_GFLAGS_WIDE; }",
          "2135:     break;",
          "2139:     { (yyval.integer) = STRING_GFLAGS_ASCII; }",
          "2140:     break;",
          "2144:     { (yyval.integer) = STRING_GFLAGS_NO_CASE; }",
          "2145:     break;",
          "2149:     { (yyval.integer) = STRING_GFLAGS_FULL_WORD; }",
          "2150:     break;",
          "",
          "[Added Lines]",
          "2130:       }",
          "2131:     break;",
          "2135:     { (yyval.integer) = 0; }",
          "2136:     break;",
          "2140:     { (yyval.integer) = (yyvsp[(1) - (2)].integer) | (yyvsp[(2) - (2)].integer); }",
          "2141:     break;",
          "2145:     { (yyval.integer) = STRING_GFLAGS_WIDE; }",
          "2146:     break;",
          "2150:     { (yyval.integer) = STRING_GFLAGS_ASCII; }",
          "2151:     break;",
          "2155:     { (yyval.integer) = STRING_GFLAGS_NO_CASE; }",
          "2156:     break;",
          "2160:     { (yyval.integer) = STRING_GFLAGS_FULL_WORD; }",
          "2161:     break;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2234:         yr_free((yyvsp[(1) - (1)].c_string));",
          "2236:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "2240:   case 43:",
          "2241: #line 609 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "2237:       }",
          "2238:     break;",
          "",
          "[Added Lines]",
          "2248:       }",
          "2249:     break;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2283:         yr_free((yyvsp[(3) - (3)].c_string));",
          "2285:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "2289:   case 44:",
          "2290: #line 655 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "2286:       }",
          "2287:     break;",
          "",
          "[Added Lines]",
          "2297:       }",
          "2298:     break;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2343:         }",
          "2345:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "2349:   case 45:",
          "2350: #line 713 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "2346:       }",
          "2347:     break;",
          "",
          "[Added Lines]",
          "2357:       }",
          "2358:     break;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2387:         yr_free((yyvsp[(3) - (4)].c_string));",
          "2389:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "2393:   case 46:",
          "2394: #line 757 \"grammar.y\"",
          "2398:   case 47:",
          "2399: #line 758 \"grammar.y\"",
          "2403:   case 48:",
          "2404: #line 763 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "2390:       }",
          "2391:     break;",
          "2395:     { (yyval.c_string) = yr_strdup(\"\"); }",
          "2396:     break;",
          "2400:     { (yyval.c_string) = (yyvsp[(1) - (1)].c_string); }",
          "2401:     break;",
          "",
          "[Added Lines]",
          "2401:       }",
          "2402:     break;",
          "2406:     { (yyval.c_string) = yr_strdup(\"\"); }",
          "2407:     break;",
          "2411:     { (yyval.c_string) = (yyvsp[(1) - (1)].c_string); }",
          "2412:     break;",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2425:         }",
          "2427:         ERROR_IF((yyval.c_string) == NULL);",
          "2431:   case 49:",
          "2432: #line 788 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "2428:       }",
          "2429:     break;",
          "",
          "[Added Lines]",
          "2439:       }",
          "2440:     break;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2460:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "2462:         (yyval.c_string) = (yyvsp[(1) - (3)].c_string);",
          "2466:   case 50:",
          "2467: #line 824 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "2463:       }",
          "2464:     break;",
          "",
          "[Added Lines]",
          "2474:       }",
          "2475:     break;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2505:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "2507:         (yyval.expression).type = EXPRESSION_TYPE_REGEXP;",
          "2511:   case 51:",
          "2512: #line 870 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "2508:       }",
          "2509:     break;",
          "",
          "[Added Lines]",
          "2519:       }",
          "2520:     break;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2520:         }",
          "2522:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "2526:   case 52:",
          "2527: #line 885 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "2523:       }",
          "2524:     break;",
          "",
          "[Added Lines]",
          "2534:       }",
          "2535:     break;",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2532:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "2534:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "2538:   case 53:",
          "2539: #line 894 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "2535:       }",
          "2536:     break;",
          "",
          "[Added Lines]",
          "2546:       }",
          "2547:     break;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2544:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "2546:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "2550:   case 54:",
          "2551: #line 903 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "2547:       }",
          "2548:     break;",
          "",
          "[Added Lines]",
          "2558:       }",
          "2559:     break;",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2562:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "2564:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "2568:   case 55:",
          "2569: #line 918 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "2565:       }",
          "2566:     break;",
          "",
          "[Added Lines]",
          "2576:       }",
          "2577:     break;",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2577:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "2579:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "2583:   case 56:",
          "2584: #line 930 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "2580:       }",
          "2581:     break;",
          "",
          "[Added Lines]",
          "2591:       }",
          "2592:     break;",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2594:         ERROR_IF(result != ERROR_SUCCESS);",
          "2596:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "2600:   case 57:",
          "2601: #line 944 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "2597:       }",
          "2598:     break;",
          "",
          "[Added Lines]",
          "2608:       }",
          "2609:     break;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2610:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "2612:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "2616:   case 58:",
          "2617: #line 957 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "2613:       }",
          "2614:     break;",
          "",
          "[Added Lines]",
          "2624:       }",
          "2625:     break;",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2624:         ERROR_IF(compiler->last_result!= ERROR_SUCCESS);",
          "2626:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "2630:   case 59:",
          "2631: #line 968 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "2627:       }",
          "2628:     break;",
          "",
          "[Added Lines]",
          "2638:       }",
          "2639:     break;",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2657:             yyscanner, OP_PUSH, UNDEFINED, NULL, NULL);",
          "2659:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "2663:   case 60:",
          "2664: #line 998 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "2660:       }",
          "2661:     break;",
          "",
          "[Added Lines]",
          "2671:       }",
          "2672:     break;",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2695:         compiler->loop_address[compiler->loop_depth] = addr;",
          "2696:         compiler->loop_identifier[compiler->loop_depth] = (yyvsp[(3) - (7)].c_string);",
          "2697:         compiler->loop_depth++;",
          "2701:   case 61:",
          "2702: #line 1033 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "2698:       }",
          "2699:     break;",
          "",
          "[Added Lines]",
          "2709:       }",
          "2710:     break;",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2779:         yr_free((yyvsp[(3) - (11)].c_string));",
          "2781:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "2785:   case 62:",
          "2786: #line 1114 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "2782:       }",
          "2783:     break;",
          "",
          "[Added Lines]",
          "2793:       }",
          "2794:     break;",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2812:         compiler->loop_address[compiler->loop_depth] = addr;",
          "2813:         compiler->loop_identifier[compiler->loop_depth] = NULL;",
          "2814:         compiler->loop_depth++;",
          "2818:   case 63:",
          "2819: #line 1144 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "2815:       }",
          "2816:     break;",
          "",
          "[Added Lines]",
          "2826:       }",
          "2827:     break;",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2866:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "2871:   case 64:",
          "2872: #line 1194 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "2868:       }",
          "2869:     break;",
          "",
          "[Added Lines]",
          "2879:       }",
          "2880:     break;",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2874:         yr_parser_emit(yyscanner, OP_OF, NULL);",
          "2876:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "2880:   case 65:",
          "2881: #line 1200 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "2877:       }",
          "2878:     break;",
          "",
          "[Added Lines]",
          "2888:       }",
          "2889:     break;",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2883:         yr_parser_emit(yyscanner, OP_NOT, NULL);",
          "2885:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "2889:   case 66:",
          "2890: #line 1206 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "2886:       }",
          "2887:     break;",
          "",
          "[Added Lines]",
          "2897:       }",
          "2898:     break;",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "2912:         fixup->address = jmp_destination_addr;",
          "2913:         fixup->next = compiler->fixup_stack_head;",
          "2914:         compiler->fixup_stack_head = fixup;",
          "2918:   case 67:",
          "2919: #line 1232 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "2915:       }",
          "2916:     break;",
          "",
          "[Added Lines]",
          "2926:       }",
          "2927:     break;",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "2951:         yr_free(fixup);",
          "2953:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "2957:   case 68:",
          "2958: #line 1268 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "2954:       }",
          "2955:     break;",
          "",
          "[Added Lines]",
          "2965:       }",
          "2966:     break;",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "2979:         fixup->address = jmp_destination_addr;",
          "2980:         fixup->next = compiler->fixup_stack_head;",
          "2981:         compiler->fixup_stack_head = fixup;",
          "2985:   case 69:",
          "2986: #line 1293 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "2982:       }",
          "2983:     break;",
          "",
          "[Added Lines]",
          "2993:       }",
          "2994:     break;",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "3018:         yr_free(fixup);",
          "3020:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "3024:   case 70:",
          "3025: #line 1329 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "3021:       }",
          "3022:     break;",
          "",
          "[Added Lines]",
          "3032:       }",
          "3033:     break;",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "3030:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3032:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "3036:   case 71:",
          "3037: #line 1338 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "3033:       }",
          "3034:     break;",
          "",
          "[Added Lines]",
          "3044:       }",
          "3045:     break;",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "3042:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3044:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "3048:   case 72:",
          "3049: #line 1347 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "3045:       }",
          "3046:     break;",
          "",
          "[Added Lines]",
          "3056:       }",
          "3057:     break;",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "3054:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3056:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "3060:   case 73:",
          "3061: #line 1356 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "3057:       }",
          "3058:     break;",
          "",
          "[Added Lines]",
          "3068:       }",
          "3069:     break;",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "3066:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3068:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "3072:   case 74:",
          "3073: #line 1365 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "3069:       }",
          "3070:     break;",
          "",
          "[Added Lines]",
          "3080:       }",
          "3081:     break;",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "3078:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3080:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "3084:   case 75:",
          "3085: #line 1374 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "3081:       }",
          "3082:     break;",
          "",
          "[Added Lines]",
          "3092:       }",
          "3093:     break;",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "3090:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3092:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "3096:   case 76:",
          "3097: #line 1383 \"grammar.y\"",
          "3098:     {",
          "3099:         (yyval.expression) = (yyvsp[(1) - (1)].expression);",
          "3103:   case 77:",
          "3104: #line 1387 \"grammar.y\"",
          "3105:     {",
          "3106:         (yyval.expression) = (yyvsp[(2) - (3)].expression);",
          "3110:   case 78:",
          "3111: #line 1394 \"grammar.y\"",
          "3115:   case 79:",
          "3116: #line 1395 \"grammar.y\"",
          "3120:   case 80:",
          "3121: #line 1401 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "3093:       }",
          "3094:     break;",
          "3100:       }",
          "3101:     break;",
          "3107:       }",
          "3108:     break;",
          "3112:     { (yyval.integer) = INTEGER_SET_ENUMERATION; }",
          "3113:     break;",
          "3117:     { (yyval.integer) = INTEGER_SET_RANGE; }",
          "3118:     break;",
          "",
          "[Added Lines]",
          "3104:       }",
          "3105:     break;",
          "3111:       }",
          "3112:     break;",
          "3118:       }",
          "3119:     break;",
          "3123:     { (yyval.integer) = INTEGER_SET_ENUMERATION; }",
          "3124:     break;",
          "3128:     { (yyval.integer) = INTEGER_SET_RANGE; }",
          "3129:     break;",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "3135:         }",
          "3137:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3141:   case 81:",
          "3142: #line 1423 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "3138:       }",
          "3139:     break;",
          "",
          "[Added Lines]",
          "3149:       }",
          "3150:     break;",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "3150:         }",
          "3152:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3156:   case 82:",
          "3157: #line 1435 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "3153:       }",
          "3154:     break;",
          "",
          "[Added Lines]",
          "3164:       }",
          "3165:     break;",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "3164:         }",
          "3166:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3170:   case 83:",
          "3171: #line 1450 \"grammar.y\"",
          "3172:     {",
          "3174:         yr_parser_emit_with_arg(yyscanner, OP_PUSH, UNDEFINED, NULL, NULL);",
          "3178:   case 85:",
          "3179: #line 1456 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "3167:       }",
          "3168:     break;",
          "3175:       }",
          "3176:     break;",
          "",
          "[Added Lines]",
          "3178:       }",
          "3179:     break;",
          "3186:       }",
          "3187:     break;",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "3182:         yr_parser_emit_pushes_for_strings(yyscanner, \"$*\");",
          "3184:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3188:   case 88:",
          "3189: #line 1473 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "3185:       }",
          "3186:     break;",
          "",
          "[Added Lines]",
          "3196:       }",
          "3197:     break;",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "3192:         yr_free((yyvsp[(1) - (1)].c_string));",
          "3194:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3198:   case 89:",
          "3199: #line 1480 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "3195:       }",
          "3196:     break;",
          "",
          "[Added Lines]",
          "3206:       }",
          "3207:     break;",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "3202:         yr_free((yyvsp[(1) - (1)].c_string));",
          "3204:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3208:   case 91:",
          "3209: #line 1492 \"grammar.y\"",
          "3210:     {",
          "3211:         yr_parser_emit_with_arg(yyscanner, OP_PUSH, UNDEFINED, NULL, NULL);",
          "3215:   case 92:",
          "3216: #line 1496 \"grammar.y\"",
          "3217:     {",
          "3218:         yr_parser_emit_with_arg(yyscanner, OP_PUSH, 1, NULL, NULL);",
          "3222:   case 93:",
          "3223: #line 1504 \"grammar.y\"",
          "3224:     {",
          "3225:         (yyval.expression) = (yyvsp[(2) - (3)].expression);",
          "3229:   case 94:",
          "3230: #line 1508 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "3205:       }",
          "3206:     break;",
          "3212:       }",
          "3213:     break;",
          "3219:       }",
          "3220:     break;",
          "3226:       }",
          "3227:     break;",
          "",
          "[Added Lines]",
          "3216:       }",
          "3217:     break;",
          "3223:       }",
          "3224:     break;",
          "3230:       }",
          "3231:     break;",
          "3237:       }",
          "3238:     break;",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "3237:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "3238:         (yyval.expression).value.integer = UNDEFINED;",
          "3242:   case 95:",
          "3243: #line 1518 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "3239:       }",
          "3240:     break;",
          "",
          "[Added Lines]",
          "3250:       }",
          "3251:     break;",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "3254:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "3255:         (yyval.expression).value.integer = UNDEFINED;",
          "3259:   case 96:",
          "3260: #line 1532 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "3256:       }",
          "3257:     break;",
          "",
          "[Added Lines]",
          "3267:       }",
          "3268:     break;",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "3273:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "3274:         (yyval.expression).value.integer = UNDEFINED;",
          "3278:   case 97:",
          "3279: #line 1548 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "3275:       }",
          "3276:     break;",
          "",
          "[Added Lines]",
          "3286:       }",
          "3287:     break;",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "3286:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "3287:         (yyval.expression).value.integer = (yyvsp[(1) - (1)].integer);",
          "3291:   case 98:",
          "3292: #line 1558 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "3288:       }",
          "3289:     break;",
          "",
          "[Added Lines]",
          "3299:       }",
          "3300:     break;",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "3297:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3299:         (yyval.expression).type = EXPRESSION_TYPE_FLOAT;",
          "3303:   case 99:",
          "3304: #line 1567 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "3300:       }",
          "3301:     break;",
          "",
          "[Added Lines]",
          "3311:       }",
          "3312:     break;",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "3324:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3326:         (yyval.expression).type = EXPRESSION_TYPE_STRING;",
          "3330:   case 100:",
          "3331: #line 1591 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "3327:       }",
          "3328:     break;",
          "",
          "[Added Lines]",
          "3338:       }",
          "3339:     break;",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "3340:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "3341:         (yyval.expression).value.integer = UNDEFINED;",
          "3345:   case 101:",
          "3346: #line 1603 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "3342:       }",
          "3343:     break;",
          "",
          "[Added Lines]",
          "3353:       }",
          "3354:     break;",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "3355:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "3356:         (yyval.expression).value.integer = UNDEFINED;",
          "3360:   case 102:",
          "3361: #line 1615 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "3357:       }",
          "3358:     break;",
          "",
          "[Added Lines]",
          "3368:       }",
          "3369:     break;",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "3374:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "3375:         (yyval.expression).value.integer = UNDEFINED;",
          "3379:   case 103:",
          "3380: #line 1631 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "3376:       }",
          "3377:     break;",
          "",
          "[Added Lines]",
          "3387:       }",
          "3388:     break;",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "3389:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "3390:         (yyval.expression).value.integer = UNDEFINED;",
          "3394:   case 104:",
          "3395: #line 1643 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "3391:       }",
          "3392:     break;",
          "",
          "[Added Lines]",
          "3402:       }",
          "3403:     break;",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "3408:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "3409:         (yyval.expression).value.integer = UNDEFINED;",
          "3413:   case 105:",
          "3414: #line 1659 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "3410:       }",
          "3411:     break;",
          "",
          "[Added Lines]",
          "3421:       }",
          "3422:     break;",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "3454:         }",
          "3456:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3460:   case 106:",
          "3461: #line 1703 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "3457:       }",
          "3458:     break;",
          "",
          "[Added Lines]",
          "3468:       }",
          "3469:     break;",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "3476:         }",
          "3478:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3482:   case 107:",
          "3483: #line 1722 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "3479:       }",
          "3480:     break;",
          "",
          "[Added Lines]",
          "3490:       }",
          "3491:     break;",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "3497:         {",
          "3498:           (yyval.expression).type = EXPRESSION_TYPE_FLOAT;",
          "3499:         }",
          "3503:   case 108:",
          "3504: #line 1740 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "3500:       }",
          "3501:     break;",
          "",
          "[Added Lines]",
          "3511:       }",
          "3512:     break;",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "3518:         {",
          "3519:           (yyval.expression).type = EXPRESSION_TYPE_FLOAT;",
          "3520:         }",
          "3524:   case 109:",
          "3525: #line 1758 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "3521:       }",
          "3522:     break;",
          "",
          "[Added Lines]",
          "3532:       }",
          "3533:     break;",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "3539:         {",
          "3540:           (yyval.expression).type = EXPRESSION_TYPE_FLOAT;",
          "3541:         }",
          "3545:   case 110:",
          "3546: #line 1776 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "3542:       }",
          "3543:     break;",
          "",
          "[Added Lines]",
          "3553:       }",
          "3554:     break;",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "3568:         {",
          "3569:           (yyval.expression).type = EXPRESSION_TYPE_FLOAT;",
          "3570:         }",
          "3574:   case 111:",
          "3575: #line 1802 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "3571:       }",
          "3572:     break;",
          "",
          "[Added Lines]",
          "3582:       }",
          "3583:     break;",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "3589:           compiler->last_result = ERROR_DIVISION_BY_ZERO;",
          "3590:           ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3591:         }",
          "3595:   case 112:",
          "3596: #line 1820 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "3592:       }",
          "3593:     break;",
          "",
          "[Added Lines]",
          "3603:       }",
          "3604:     break;",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "3603:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "3604:         (yyval.expression).value.integer = OPERATION(^, (yyvsp[(1) - (3)].expression).value.integer, (yyvsp[(3) - (3)].expression).value.integer);",
          "3608:   case 113:",
          "3609: #line 1830 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "3605:       }",
          "3606:     break;",
          "",
          "[Added Lines]",
          "3616:       }",
          "3617:     break;",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "3616:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "3617:         (yyval.expression).value.integer = OPERATION(&, (yyvsp[(1) - (3)].expression).value.integer, (yyvsp[(3) - (3)].expression).value.integer);",
          "3621:   case 114:",
          "3622: #line 1840 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "3618:       }",
          "3619:     break;",
          "",
          "[Added Lines]",
          "3629:       }",
          "3630:     break;",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "3629:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "3630:         (yyval.expression).value.integer = OPERATION(|, (yyvsp[(1) - (3)].expression).value.integer, (yyvsp[(3) - (3)].expression).value.integer);",
          "3634:   case 115:",
          "3635: #line 1850 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "3631:       }",
          "3632:     break;",
          "",
          "[Added Lines]",
          "3642:       }",
          "3643:     break;",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "3641:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "3642:         (yyval.expression).value.integer = ((yyvsp[(2) - (2)].expression).value.integer == UNDEFINED) ?",
          "3643:             UNDEFINED : ~((yyvsp[(2) - (2)].expression).value.integer);",
          "3647:   case 116:",
          "3648: #line 1860 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "3644:       }",
          "3645:     break;",
          "",
          "[Added Lines]",
          "3655:       }",
          "3656:     break;",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "3655:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "3656:         (yyval.expression).value.integer = OPERATION(<<, (yyvsp[(1) - (3)].expression).value.integer, (yyvsp[(3) - (3)].expression).value.integer);",
          "3660:   case 117:",
          "3661: #line 1870 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "3657:       }",
          "3658:     break;",
          "",
          "[Added Lines]",
          "3668:       }",
          "3669:     break;",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "3668:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "3669:         (yyval.expression).value.integer = OPERATION(>>, (yyvsp[(1) - (3)].expression).value.integer, (yyvsp[(3) - (3)].expression).value.integer);",
          "3673:   case 118:",
          "3674: #line 1880 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "3670:       }",
          "3671:     break;",
          "",
          "[Added Lines]",
          "3681:       }",
          "3682:     break;",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "3676:         (yyval.expression) = (yyvsp[(1) - (1)].expression);",
          "3677:       }",
          "3678:     break;",
          "3682: #line 3680 \"grammar.c\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "3890: #endif",
          "3892:   return YYID (yyresult);",
          "",
          "[Removed Lines]",
          "3893: }",
          "",
          "[Added Lines]",
          "3904: }",
          "",
          "---------------"
        ],
        "libyara/grammar.y||libyara/grammar.y": [
          "File: libyara/grammar.y -> libyara/grammar.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "222: rule",
          "224:       {",
          "225:         YR_RULE* rule = yr_parser_reduce_rule_declaration_phase_1(",
          "228:         ERROR_IF(rule == NULL);",
          "230:         $<rule>$ = rule;",
          "231:       }",
          "232:       condition '}'",
          "233:       {",
          "236:         compiler->last_result = yr_parser_reduce_rule_declaration_phase_2(",
          "237:             yyscanner, rule);",
          "",
          "[Removed Lines]",
          "223:     : rule_modifiers _RULE_ _IDENTIFIER_ tags '{' meta strings",
          "226:             yyscanner, (int32_t) $1, $3, $4, $7, $6);",
          "234:         YR_RULE* rule = $<rule>8; // rule created in phase 1",
          "",
          "[Added Lines]",
          "223:     : rule_modifiers _RULE_ _IDENTIFIER_",
          "226:             yyscanner, (int32_t) $1, $3);",
          "232:       tags '{' meta strings",
          "233:       {",
          "234:         YR_RULE* rule = $<rule>6; // rule created in phase 1",
          "236:         rule->tags = $5;",
          "237:         rule->metas = $7;",
          "238:         rule->strings = $8;",
          "239:       }",
          "242:         YR_RULE* rule = $<rule>6; // rule created in phase 1",
          "",
          "---------------"
        ],
        "libyara/hash.c||libyara/hash.c": [
          "File: libyara/hash.c -> libyara/hash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:   return ERROR_SUCCESS;",
          "110: }",
          "113:     YR_HASH_TABLE* table,",
          "114:     YR_HASH_TABLE_FREE_VALUE_FUNC free_value)",
          "115: {",
          "",
          "[Removed Lines]",
          "112: YR_API void yr_hash_table_destroy(",
          "",
          "[Added Lines]",
          "113: YR_API void yr_hash_table_clean(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141:       entry = next_entry;",
          "142:     }",
          "143:   }",
          "145:   yr_free(table);",
          "146: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "145:     table->buckets[i] = NULL;",
          "147: }",
          "150: YR_API void yr_hash_table_destroy(",
          "151:     YR_HASH_TABLE* table,",
          "152:     YR_HASH_TABLE_FREE_VALUE_FUNC free_value)",
          "153: {",
          "154:   yr_hash_table_clean(table, free_value);",
          "",
          "---------------"
        ],
        "libyara/include/yara/compiler.h||libyara/include/yara/compiler.h": [
          "File: libyara/include/yara/compiler.h -> libyara/include/yara/compiler.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:   YR_AC_AUTOMATON*  automaton;",
          "71:   YR_HASH_TABLE*    rules_table;",
          "72:   YR_HASH_TABLE*    objects_table;",
          "73:   YR_NAMESPACE*     current_namespace;",
          "74:   YR_RULE*          current_rule;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:   YR_HASH_TABLE*    strings_table;",
          "",
          "---------------"
        ],
        "libyara/include/yara/hash.h||libyara/include/yara/hash.h": [
          "File: libyara/include/yara/hash.h -> libyara/include/yara/hash.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     YR_HASH_TABLE** table);",
          "50: YR_API void yr_hash_table_destroy(",
          "51:     YR_HASH_TABLE* table,",
          "52:     YR_HASH_TABLE_FREE_VALUE_FUNC free_value);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: YR_API void yr_hash_table_clean(",
          "51:     YR_HASH_TABLE* table,",
          "52:     YR_HASH_TABLE_FREE_VALUE_FUNC free_value);",
          "",
          "---------------"
        ],
        "libyara/include/yara/parser.h||libyara/include/yara/parser.h": [
          "File: libyara/include/yara/parser.h -> libyara/include/yara/parser.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "70: YR_RULE* yr_parser_reduce_rule_declaration_phase_1(",
          "71:     yyscan_t yyscanner,",
          "72:     int32_t flags,",
          "79: int yr_parser_reduce_rule_declaration_phase_2(",
          "",
          "[Removed Lines]",
          "73:     const char* identifier,",
          "74:     char* tags,",
          "75:     YR_STRING* strings,",
          "76:     YR_META* metas);",
          "",
          "[Added Lines]",
          "73:     const char* identifier);",
          "",
          "---------------"
        ],
        "libyara/lexer.c||libyara/lexer.c": [
          "File: libyara/lexer.c -> libyara/lexer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1534:   if (strlen(yytext) > 128)",
          "1535:   {",
          "1537:   }",
          "1539:   yylval->c_string = yr_strdup(yytext);",
          "",
          "[Removed Lines]",
          "1536:     yyerror(yyscanner, compiler, \"indentifier too long\");",
          "",
          "[Added Lines]",
          "1536:     yyerror(yyscanner, compiler, \"identifier too long\");",
          "",
          "---------------"
        ],
        "libyara/parser.c||libyara/parser.c": [
          "File: libyara/parser.c -> libyara/parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "466:   RE_ERROR re_error;",
          "468:   if (str->length == 0)",
          "469:   {",
          "470:     compiler->last_result = ERROR_EMPTY_STRING;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "471:   string = yr_hash_table_lookup(",
          "472:       compiler->strings_table,",
          "473:       identifier,",
          "474:       NULL);",
          "476:   if (string != NULL)",
          "477:   {",
          "478:     compiler->last_result = ERROR_DUPLICATED_STRING_IDENTIFIER;",
          "479:     yr_compiler_set_error_extra_info(compiler, identifier);",
          "480:     goto _exit;",
          "481:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "653:       goto _exit;",
          "654:   }",
          "656:   if (min_atom_quality < 3 && compiler->callback != NULL)",
          "657:   {",
          "658:     snprintf(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "673:   compiler->last_result = yr_hash_table_add(",
          "674:       compiler->strings_table,",
          "675:       identifier,",
          "676:       NULL,",
          "677:       string);",
          "679:   if (compiler->last_result != ERROR_SUCCESS)",
          "680:     goto _exit;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "680: YR_RULE* yr_parser_reduce_rule_declaration_phase_1(",
          "681:     yyscan_t yyscanner,",
          "682:     int32_t flags,",
          "687: {",
          "688:   YR_COMPILER* compiler = yyget_extra(yyscanner);",
          "689:   YR_RULE* rule = NULL;",
          "",
          "[Removed Lines]",
          "683:     const char* identifier,",
          "684:     char* tags,",
          "685:     YR_STRING* strings,",
          "686:     YR_META* metas)",
          "",
          "[Added Lines]",
          "709:     const char* identifier)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "720:     return NULL;",
          "722:   rule->g_flags = flags;",
          "726:   rule->ns = compiler->current_namespace;",
          "728:   #ifdef PROFILING_ENABLED",
          "",
          "[Removed Lines]",
          "723:   rule->tags = tags;",
          "724:   rule->strings = strings;",
          "725:   rule->metas = metas;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "751:         compiler->current_namespace->name,",
          "752:         (void*) rule);",
          "756:   return rule;",
          "757: }",
          "",
          "[Removed Lines]",
          "754:   compiler->current_rule = rule;",
          "",
          "[Added Lines]",
          "775:   yr_hash_table_clean(compiler->strings_table, NULL);",
          "777:   compiler->current_rule = rule;",
          "",
          "---------------"
        ]
      }
    }
  ]
}