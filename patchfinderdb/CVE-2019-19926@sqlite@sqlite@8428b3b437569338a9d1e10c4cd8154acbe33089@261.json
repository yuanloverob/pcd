{
  "cve_id": "CVE-2019-19926",
  "cve_desc": "multiSelect in select.c in SQLite 3.30.1 mishandles certain errors during parsing, as demonstrated by errors from sqlite3WindowRewrite() calls. NOTE: this vulnerability exists because of an incomplete fix for CVE-2019-19880.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
  "patch_info": {
    "commit_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8428b3b437569338a9d1e10c4cd8154acbe33089",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c"
    ],
    "message": "Continuation of [e2bddcd4c55ba3cb]: Add another spot where it is necessary to abort early due to prior errors in sqlite3WindowRewrite().\n\nFossilOrigin-Name: cba2a2a44cdf138a629109bb0ad088ed4ef67fc66bed3e0373554681a39615d2",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 3d4c0bf8904135fa68c75801bfa738715cacc3b19dc8ad6ef550b11798d4b121",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2809:     }",
      "2810:   #endif",
      "2811:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2812:   if( pParse->nErr ) goto multi_select_end;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d00ad9a6561174ec7214af82e21b7a9a313ae156",
      "candidate_info": {
        "commit_hash": "d00ad9a6561174ec7214af82e21b7a9a313ae156",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d00ad9a6561174ec7214af82e21b7a9a313ae156",
        "files": [
          "ext/rtree/geopoly.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Typecasts added to the GeoPoly extension to avoid harmless UBSAN warnings.\n\nFossilOrigin-Name: a1f6a093ac4a2de8c5b02c30fe57e09770460fd5bdddfe9c7a9a24fb83a6b491",
        "before_after_code_files": [
          "ext/rtree/geopoly.c||ext/rtree/geopoly.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/geopoly.c||ext/rtree/geopoly.c": [
          "File: ext/rtree/geopoly.c -> ext/rtree/geopoly.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "125: #define GEOPOLY_SZ(N)  (sizeof(GeoPoly) + sizeof(GeoCoord)*2*((N)-4))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131: #define GeoX(P,I)  (((GeoCoord*)(P)->a)[(I)*2])",
          "132: #define GeoY(P,I)  (((GeoCoord*)(P)->a)[(I)*2+1])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "316:         memcpy(p->hdr, a, nByte);",
          "317:         if( a[0] != *(unsigned char*)&x ){",
          "318:           int ii;",
          "321:           }",
          "322:           p->hdr[0] ^= 1;",
          "323:         }",
          "",
          "[Removed Lines]",
          "319:           for(ii=0; ii<nVertex*2; ii++){",
          "320:             geopolySwab32((unsigned char*)&p->a[ii]);",
          "",
          "[Added Lines]",
          "327:           for(ii=0; ii<nVertex; ii++){",
          "328:             geopolySwab32((unsigned char*)&GeoX(p,ii));",
          "329:             geopolySwab32((unsigned char*)&GeoY(p,ii));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "376:     int i;",
          "377:     sqlite3_str_append(x, \"[\", 1);",
          "378:     for(i=0; i<p->nVertex; i++){",
          "380:     }",
          "382:     sqlite3_result_text(context, sqlite3_str_finish(x), -1, sqlite3_free);",
          "383:     sqlite3_free(p);",
          "384:   }",
          "",
          "[Removed Lines]",
          "379:       sqlite3_str_appendf(x, \"[%!g,%!g],\", p->a[i*2], p->a[i*2+1]);",
          "381:     sqlite3_str_appendf(x, \"[%!g,%!g]]\", p->a[0], p->a[1]);",
          "",
          "[Added Lines]",
          "388:       sqlite3_str_appendf(x, \"[%!g,%!g],\", GeoX(p,i), GeoY(p,i));",
          "390:     sqlite3_str_appendf(x, \"[%!g,%!g]]\", GeoX(p,0), GeoY(p,0));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "405:     char cSep = '\\'';",
          "406:     sqlite3_str_appendf(x, \"<polyline points=\");",
          "407:     for(i=0; i<p->nVertex; i++){",
          "409:       cSep = ' ';",
          "410:     }",
          "412:     for(i=1; i<argc; i++){",
          "413:       const char *z = (const char*)sqlite3_value_text(argv[i]);",
          "414:       if( z && z[0] ){",
          "",
          "[Removed Lines]",
          "408:       sqlite3_str_appendf(x, \"%c%g,%g\", cSep, p->a[i*2], p->a[i*2+1]);",
          "411:     sqlite3_str_appendf(x, \" %g,%g'\", p->a[0], p->a[1]);",
          "",
          "[Added Lines]",
          "417:       sqlite3_str_appendf(x, \"%c%g,%g\", cSep, GeoX(p,i), GeoY(p,i));",
          "420:     sqlite3_str_appendf(x, \" %g,%g'\", GeoX(p,0), GeoY(p,0));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "453:   int ii;",
          "454:   if( p ){",
          "455:     for(ii=0; ii<p->nVertex; ii++){",
          "458:       x1 = (GeoCoord)(A*x0 + B*y0 + E);",
          "459:       y1 = (GeoCoord)(C*x0 + D*y0 + F);",
          "462:     }",
          "463:     sqlite3_result_blob(context, p->hdr,",
          "464:        4+8*p->nVertex, SQLITE_TRANSIENT);",
          "",
          "[Removed Lines]",
          "456:       x0 = p->a[ii*2];",
          "457:       y0 = p->a[ii*2+1];",
          "460:       p->a[ii*2] = x1;",
          "461:       p->a[ii*2+1] = y1;",
          "",
          "[Added Lines]",
          "465:       x0 = GeoX(p,ii);",
          "466:       y0 = GeoY(p,ii);",
          "469:       GeoX(p,ii) = x1;",
          "470:       GeoY(p,ii) = y1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "529:   if( p ){",
          "530:     if( geopolyArea(p)<0.0 ){",
          "531:       int ii, jj;",
          "539:       }",
          "540:     }",
          "541:     sqlite3_result_blob(context, p->hdr,",
          "",
          "[Removed Lines]",
          "532:       for(ii=2, jj=p->nVertex*2 - 2; ii<jj; ii+=2, jj-=2){",
          "533:         GeoCoord t = p->a[ii];",
          "534:         p->a[ii] = p->a[jj];",
          "535:         p->a[jj] = t;",
          "536:         t = p->a[ii+1];",
          "537:         p->a[ii+1] = p->a[jj+1];",
          "538:         p->a[jj+1] = t;",
          "",
          "[Added Lines]",
          "541:       for(ii=1, jj=p->nVertex-1; ii<jj; ii++, jj--){",
          "542:         GeoCoord t = GeoX(p,ii);",
          "543:         GeoX(p,ii) = GeoX(p,jj);",
          "544:         GeoX(p,jj) = t;",
          "545:         t = GeoY(p,ii);",
          "546:         GeoY(p,ii) = GeoY(p,jj);",
          "547:         GeoY(p,jj) = t;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "595:   p->hdr[3] = n&0xff;",
          "596:   for(i=0; i<n; i++){",
          "597:     double rAngle = 2.0*GEOPOLY_PI*i/n;",
          "600:   }",
          "601:   sqlite3_result_blob(context, p->hdr, 4+8*n, SQLITE_TRANSIENT);",
          "602:   sqlite3_free(p);",
          "",
          "[Removed Lines]",
          "598:     p->a[i*2] = x - r*geopolySine(rAngle-0.5*GEOPOLY_PI);",
          "599:     p->a[i*2+1] = y + r*geopolySine(rAngle);",
          "",
          "[Added Lines]",
          "607:     GeoX(p,i) = x - r*geopolySine(rAngle-0.5*GEOPOLY_PI);",
          "608:     GeoY(p,i) = y + r*geopolySine(rAngle);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "633:   }",
          "634:   if( p ){",
          "635:     int ii;",
          "638:     for(ii=1; ii<p->nVertex; ii++){",
          "640:       if( r<mnX ) mnX = (float)r;",
          "641:       else if( r>mxX ) mxX = (float)r;",
          "643:       if( r<mnY ) mnY = (float)r;",
          "644:       else if( r>mxY ) mxY = (float)r;",
          "645:     }",
          "",
          "[Removed Lines]",
          "636:     mnX = mxX = p->a[0];",
          "637:     mnY = mxY = p->a[1];",
          "639:       double r = p->a[ii*2];",
          "642:       r = p->a[ii*2+1];",
          "",
          "[Added Lines]",
          "645:     mnX = mxX = GeoX(p,0);",
          "646:     mnY = mxY = GeoY(p,0);",
          "648:       double r = GeoX(p,ii);",
          "651:       r = GeoY(p,ii);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "659:       pOut->hdr[1] = 0;",
          "660:       pOut->hdr[2] = 0;",
          "661:       pOut->hdr[3] = 4;",
          "670:     }else{",
          "671:       sqlite3_free(p);",
          "672:       aCoord[0].f = mnX;",
          "",
          "[Removed Lines]",
          "662:       pOut->a[0] = mnX;",
          "663:       pOut->a[1] = mnY;",
          "664:       pOut->a[2] = mxX;",
          "665:       pOut->a[3] = mnY;",
          "666:       pOut->a[4] = mxX;",
          "667:       pOut->a[5] = mxY;",
          "668:       pOut->a[6] = mnX;",
          "669:       pOut->a[7] = mxY;",
          "",
          "[Added Lines]",
          "671:       GeoX(pOut,0) = mnX;",
          "672:       GeoY(pOut,0) = mnY;",
          "673:       GeoX(pOut,1) = mxX;",
          "674:       GeoY(pOut,1) = mnY;",
          "675:       GeoX(pOut,2) = mxX;",
          "676:       GeoY(pOut,2) = mxY;",
          "677:       GeoX(pOut,3) = mnX;",
          "678:       GeoY(pOut,3) = mxY;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "804:   int ii;",
          "805:   if( p1==0 ) return;",
          "806:   for(ii=0; ii<p1->nVertex-1; ii++){",
          "809:     if( v==2 ) break;",
          "810:     cnt += v;",
          "811:   }",
          "812:   if( v!=2 ){",
          "815:   }",
          "816:   if( v==2 ){",
          "817:     sqlite3_result_int(context, 1);",
          "",
          "[Removed Lines]",
          "807:     v = pointBeneathLine(x0,y0,p1->a[ii*2],p1->a[ii*2+1],",
          "808:                                p1->a[ii*2+2],p1->a[ii*2+3]);",
          "813:     v = pointBeneathLine(x0,y0,p1->a[ii*2],p1->a[ii*2+1],",
          "814:                                p1->a[0],p1->a[1]);",
          "",
          "[Added Lines]",
          "816:     v = pointBeneathLine(x0,y0,GeoX(p1,ii), GeoY(p1,ii),",
          "817:                                GeoX(p1,ii+1),GeoY(p1,ii+1));",
          "822:     v = pointBeneathLine(x0,y0,GeoX(p1,ii), GeoY(p1,ii),",
          "823:                                GeoX(p1,0),  GeoY(p1,0));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "933:   unsigned int i;",
          "934:   GeoCoord *x;",
          "935:   for(i=0; i<(unsigned)pPoly->nVertex-1; i++){",
          "937:     geopolyAddOneSegment(p, x[0], x[1], x[2], x[3], side, i);",
          "938:   }",
          "940:   geopolyAddOneSegment(p, x[0], x[1], pPoly->a[0], pPoly->a[1], side, i);",
          "941: }",
          "",
          "[Removed Lines]",
          "936:     x = pPoly->a + (i*2);",
          "939:   x = pPoly->a + (i*2);",
          "",
          "[Added Lines]",
          "945:     x = &GeoX(pPoly,i);",
          "948:   x = &GeoX(pPoly,i);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b90dbaed3092236e97f9796fa63989a3648060e16189e1267c430f4a7e799fac",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e4a9e4d0e57be6228936dc06936a7aa09e551d46",
      "candidate_info": {
        "commit_hash": "e4a9e4d0e57be6228936dc06936a7aa09e551d46",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e4a9e4d0e57be6228936dc06936a7aa09e551d46",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y",
          "test/altertab3.test"
        ],
        "message": "Have ALTER TABLE commands ignore the lhs of \"expr IN ()\" and \"expr NOT IN ()\" expressions, just as other queries do. Fix for [533010b8ca].\n\nFossilOrigin-Name: 71643deb6bbad4b4a511bfd43b32245b50a555b508b90f33adf0656ae53292c6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7078d77effc296c63c91ec032c866e2b320f081d58e57e9e83cc58373169bda3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1188:     }else if( Y->nExpr==1 ){",
          "",
          "[Removed Lines]",
          "1182:       if( IN_RENAME_OBJECT==0 ){",
          "1183:         sqlite3ExprDelete(pParse->db, A);",
          "1184:         A = sqlite3ExprAlloc(pParse->db, TK_INTEGER,&sqlite3IntTokens[N],1);",
          "1185:       }else{",
          "1186:         A = sqlite3PExpr(pParse, TK_UPLUS, A, 0);",
          "1187:       }",
          "",
          "[Added Lines]",
          "1182:       sqlite3ExprDelete(pParse->db, A);",
          "1183:       A = sqlite3ExprAlloc(pParse->db, TK_INTEGER,&sqlite3IntTokens[N],1);",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "80: do_execsql_test 3.2 {",
          "81:   SELECT sql FROM sqlite_master WHERE name = 'v1'",
          "84: #-------------------------------------------------------------------------",
          "85: reset_db",
          "",
          "[Removed Lines]",
          "82: } {{CREATE VIEW v1 AS SELECT * FROM t1 WHERE a=1 OR (bbb IN ())}}",
          "",
          "[Added Lines]",
          "82: } {{CREATE VIEW v1 AS SELECT * FROM t1 WHERE a=1 OR (b IN ())}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189:   {CREATE INDEX i0 ON \"t1\"('1' IN ())}",
          "190: }",
          "193: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "192: do_execsql_test 8.2.1 {",
          "193:   CREATE TABLE t2 (c0);",
          "194:   CREATE INDEX i2 ON t2((LIKELIHOOD(c0, 100) IN ()));",
          "195:   ALTER TABLE t2 RENAME COLUMN c0 TO c1;",
          "196: }",
          "197: do_execsql_test 8.2.2 {",
          "198:   SELECT sql FROM sqlite_master WHERE tbl_name = 't2';",
          "199: } {",
          "200:   {CREATE TABLE t2 (c1)}",
          "201:   {CREATE INDEX i2 ON t2((LIKELIHOOD(c0, 100) IN ()))}",
          "202: }",
          "203: do_test 8.2.3 {",
          "204:   sqlite3 db2 test.db",
          "205:   db2 eval { INSERT INTO t2 VALUES (1), (2), (3) }",
          "206:   db close",
          "207: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2964225247f1b9418aef50a042b2997edb3b6ad6",
      "candidate_info": {
        "commit_hash": "2964225247f1b9418aef50a042b2997edb3b6ad6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2964225247f1b9418aef50a042b2997edb3b6ad6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/printf.c"
        ],
        "message": "Prevent the printf formatter from doing large memory allocations - larger than either the size of the static buffer for interfaces like sqlite3_snprintf(), or larger than SQLITE_LIMIT_LENGTH for interfaces that are associated with a database connection.  This helps to prevent DOS attacks on products that let hostile sources inject arbitrary SQL.  It also helps fuzzers run faster and more effectively.\n\nFossilOrigin-Name: 179e5d46054e5c86f53a79b7a0823d9a383da8391ad1d3c3b22645927a1e052b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/printf.c||src/printf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 40d8f8ae87abf928542c4e558a4c3a3eab18776a3e8db7ca1c5e5f744ca0bce3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/printf.c||src/printf.c": [
          "File: src/printf.c -> src/printf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:   return (char*)sqlite3_value_text(p->apArg[p->nUsed++]);",
          "156: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167: static char *printfTempBuf(sqlite3_str *pAccum, sqlite3_int64 n){",
          "168:   char *z;",
          "169:   if( n>pAccum->nAlloc && n>pAccum->mxAlloc ){",
          "170:     setStrAccumError(pAccum, SQLITE_TOOBIG);",
          "171:     return 0;",
          "172:   }",
          "173:   z = sqlite3DbMallocRaw(pAccum->db, n);",
          "174:   if( z==0 ){",
          "175:     setStrAccumError(pAccum, SQLITE_NOMEM);",
          "176:   }",
          "177:   return z;",
          "178: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "422:           zOut = buf;",
          "423:         }else{",
          "424:           u64 n = (u64)precision + 10 + precision/3;",
          "430:           nOut = (int)n;",
          "431:         }",
          "432:         bufpt = &zOut[nOut-1];",
          "",
          "[Removed Lines]",
          "425:           zOut = zExtra = sqlite3Malloc( n );",
          "426:           if( zOut==0 ){",
          "427:             setStrAccumError(pAccum, SQLITE_NOMEM);",
          "428:             return;",
          "429:           }",
          "",
          "[Added Lines]",
          "446:           zOut = zExtra = printfTempBuf(pAccum, n);",
          "447:           if( zOut==0 ) return;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "545:         }else{",
          "546:           e2 = exp;",
          "547:         }",
          "554:           }",
          "555:         }",
          "556:         zOut = bufpt;",
          "",
          "[Removed Lines]",
          "548:         if( MAX(e2,0)+(i64)precision+(i64)width > etBUFSIZE - 15 ){",
          "549:           bufpt = zExtra",
          "550:               = sqlite3Malloc( MAX(e2,0)+(i64)precision+(i64)width+15 );",
          "551:           if( bufpt==0 ){",
          "552:             setStrAccumError(pAccum, SQLITE_NOMEM);",
          "553:             return;",
          "",
          "[Added Lines]",
          "566:         {",
          "568:           szBufNeeded = MAX(e2,0)+(i64)precision+(i64)width+15;",
          "569:           if( szBufNeeded > etBUFSIZE ){",
          "570:             bufpt = zExtra = printfTempBuf(pAccum, szBufNeeded);",
          "571:             if( bufpt==0 ) return;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "774:         needQuote = !isnull && xtype==etSQLESCAPE2;",
          "775:         n += i + 3;",
          "776:         if( n>etBUFSIZE ){",
          "782:         }else{",
          "783:           bufpt = buf;",
          "784:         }",
          "",
          "[Removed Lines]",
          "777:           bufpt = zExtra = sqlite3Malloc( n );",
          "778:           if( bufpt==0 ){",
          "779:             setStrAccumError(pAccum, SQLITE_NOMEM);",
          "780:             return;",
          "781:           }",
          "",
          "[Added Lines]",
          "795:           bufpt = zExtra = printfTempBuf(pAccum, n);",
          "796:           if( bufpt==0 ) return;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "29c992cb049c0fbf3185082d3f81dd76c13e746d",
      "candidate_info": {
        "commit_hash": "29c992cb049c0fbf3185082d3f81dd76c13e746d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/29c992cb049c0fbf3185082d3f81dd76c13e746d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/delete.c",
          "src/fkey.c",
          "src/parse.y",
          "src/select.c",
          "src/sqliteInt.h",
          "src/trigger.c",
          "src/window.c",
          "test/with1.test"
        ],
        "message": "Revamp the SrcList allocator routines to be methods of Parse instead of being methods of the \"sqlite3\" object, so that they can leave better error messages when the SrcList object grows too large.\n\nFossilOrigin-Name: df08d472b090b212fb77ce2aae0e1ffe79ae5db4b1accf55e6fdb18e8b0a7098",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/delete.c||src/delete.c",
          "src/fkey.c||src/fkey.c",
          "src/parse.y||src/parse.y",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/trigger.c||src/trigger.c",
          "src/window.c||src/window.c",
          "test/with1.test||test/with1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7cac614d5df55eb092b863163483b6782b942b21bd15fd787576fef5619fa849",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3873:     SrcList *pNew;",
          "3874:     int nAlloc = pSrc->nSrc*2+nExtra;",
          "3875:     int nGot;",
          "3877:     if( pSrc->nSrc+nExtra>=SQLITE_MAX_SRCLIST ){",
          "3885:     }",
          "3886:     if( nAlloc>SQLITE_MAX_SRCLIST ) nAlloc = SQLITE_MAX_SRCLIST;",
          "3887:     pNew = sqlite3DbRealloc(db, pSrc,",
          "3888:                sizeof(*pSrc) + (nAlloc-1)*sizeof(pSrc->a[0]) );",
          "3889:     if( pNew==0 ){",
          "3890:       assert( db->mallocFailed );",
          "3892:     }",
          "3893:     pSrc = pNew;",
          "3894:     nGot = (sqlite3DbMallocSize(db, pNew) - sizeof(*pSrc))/sizeof(pSrc->a[0])+1;",
          "",
          "[Removed Lines]",
          "3883:       sqlite3OomFault(db);",
          "3884:       return pSrc;",
          "3891:       return pSrc;",
          "",
          "[Added Lines]",
          "3877:     sqlite3 *db = pParse->db;",
          "3880:       sqlite3ErrorMsg(pParse, \"too many FROM clause terms, max: %d\",",
          "3881:                       SQLITE_MAX_SRCLIST);",
          "3882:       return 0;",
          "3889:       return 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3950: SrcList *sqlite3SrcListAppend(",
          "3955: ){",
          "3956:   struct SrcList_item *pItem;",
          "3959:   if( pList==0 ){",
          "3961:     if( pList==0 ) return 0;",
          "3962:     pList->nAlloc = 1;",
          "3963:     pList->nSrc = 1;",
          "3964:     memset(&pList->a[0], 0, sizeof(pList->a[0]));",
          "3965:     pList->a[0].iCursor = -1;",
          "3966:   }else{",
          "3972:   }",
          "3973:   pItem = &pList->a[pList->nSrc-1];",
          "3974:   if( pDatabase && pDatabase->z==0 ){",
          "",
          "[Removed Lines]",
          "3958:   assert( db!=0 );",
          "3960:     pList = sqlite3DbMallocRawNN(db, sizeof(SrcList) );",
          "3967:     pList = sqlite3SrcListEnlarge(db, pList, 1, pList->nSrc);",
          "3968:   }",
          "3969:   if( db->mallocFailed ){",
          "3970:     sqlite3SrcListDelete(db, pList);",
          "3971:     return 0;",
          "",
          "[Added Lines]",
          "3956:   sqlite3 *db;",
          "3958:   assert( pParse!=0 );",
          "3959:   assert( pParse->db!=0 );",
          "3960:   db = pParse->db;",
          "3962:     pList = sqlite3DbMallocRawNN(pParse->db, sizeof(SrcList) );",
          "3969:     SrcList *pNew = sqlite3SrcListEnlarge(pParse, pList, 1, pList->nSrc);",
          "3970:     if( pNew==0 ){",
          "3971:       sqlite3SrcListDelete(db, pList);",
          "3972:       return 0;",
          "3973:     }else{",
          "3974:       pList = pNew;",
          "3975:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4057:     );",
          "4058:     goto append_from_error;",
          "4059:   }",
          "4061:   if( p==0 ){",
          "4062:     goto append_from_error;",
          "4063:   }",
          "",
          "[Removed Lines]",
          "4060:   p = sqlite3SrcListAppend(db, p, pTable, pDatabase);",
          "",
          "[Added Lines]",
          "4064:   p = sqlite3SrcListAppend(pParse, p, pTable, pDatabase);",
          "",
          "---------------"
        ],
        "src/delete.c||src/delete.c": [
          "File: src/delete.c -> src/delete.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:   sqlite3 *db = pParse->db;",
          "118:   int iDb = sqlite3SchemaToIndex(db, pView->pSchema);",
          "119:   pWhere = sqlite3ExprDup(db, pWhere, 0);",
          "121:   if( pFrom ){",
          "122:     assert( pFrom->nSrc==1 );",
          "123:     pFrom->a[0].zName = sqlite3DbStrDup(db, pView->zName);",
          "",
          "[Removed Lines]",
          "120:   pFrom = sqlite3SrcListAppend(db, 0, 0, 0);",
          "",
          "[Added Lines]",
          "120:   pFrom = sqlite3SrcListAppend(pParse, 0, 0, 0);",
          "",
          "---------------"
        ],
        "src/fkey.c||src/fkey.c": [
          "File: src/fkey.c -> src/fkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1018:     if( pSrc ){",
          "1019:       struct SrcList_item *pItem = pSrc->a;",
          "1020:       pItem->pTab = pFKey->pFrom;",
          "",
          "[Removed Lines]",
          "1017:     pSrc = sqlite3SrcListAppend(db, 0, 0, 0);",
          "",
          "[Added Lines]",
          "1017:     pSrc = sqlite3SrcListAppend(pParse, 0, 0, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1291:       }",
          "1292:       pSelect = sqlite3SelectNew(pParse,",
          "1293:           sqlite3ExprListAppend(pParse, 0, pRaise),",
          "1295:           pWhere,",
          "1296:           0, 0, 0, 0, 0",
          "1297:       );",
          "",
          "[Removed Lines]",
          "1294:           sqlite3SrcListAppend(db, 0, &tFrom, 0),",
          "",
          "[Added Lines]",
          "1294:           sqlite3SrcListAppend(pParse, 0, &tFrom, 0),",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "690: %type fullname {SrcList*}",
          "691: %destructor fullname {sqlite3SrcListDelete(pParse->db, $$);}",
          "692: fullname(A) ::= nm(X).  {",
          "694:   if( IN_RENAME_OBJECT && A ) sqlite3RenameTokenMap(pParse, A->a[0].zName, &X);",
          "695: }",
          "696: fullname(A) ::= nm(X) DOT nm(Y). {",
          "698:   if( IN_RENAME_OBJECT && A ) sqlite3RenameTokenMap(pParse, A->a[0].zName, &Y);",
          "699: }",
          "701: %type xfullname {SrcList*}",
          "702: %destructor xfullname {sqlite3SrcListDelete(pParse->db, $$);}",
          "703: xfullname(A) ::= nm(X).",
          "705: xfullname(A) ::= nm(X) DOT nm(Y).",
          "707: xfullname(A) ::= nm(X) DOT nm(Y) AS nm(Z).  {",
          "709:    if( A ) A->a[0].zAlias = sqlite3NameFromToken(pParse->db, &Z);",
          "710: }",
          "711: xfullname(A) ::= nm(X) AS nm(Z). {",
          "713:    if( A ) A->a[0].zAlias = sqlite3NameFromToken(pParse->db, &Z);",
          "714: }",
          "",
          "[Removed Lines]",
          "693:   A = sqlite3SrcListAppend(pParse->db,0,&X,0);",
          "697:   A = sqlite3SrcListAppend(pParse->db,0,&X,&Y);",
          "704:    {A = sqlite3SrcListAppend(pParse->db,0,&X,0); /*A-overwrites-X*/}",
          "706:    {A = sqlite3SrcListAppend(pParse->db,0,&X,&Y); /*A-overwrites-X*/}",
          "",
          "[Added Lines]",
          "693:   A = sqlite3SrcListAppend(pParse,0,&X,0);",
          "697:   A = sqlite3SrcListAppend(pParse,0,&X,&Y);",
          "704:    {A = sqlite3SrcListAppend(pParse,0,&X,0); /*A-overwrites-X*/}",
          "706:    {A = sqlite3SrcListAppend(pParse,0,&X,&Y); /*A-overwrites-X*/}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1216:     if( N ) A = sqlite3PExpr(pParse, TK_NOT, A, 0);",
          "1217:   }",
          "1218:   expr(A) ::= expr(A) in_op(N) nm(Y) dbnm(Z) paren_exprlist(E). [IN] {",
          "1220:     Select *pSelect = sqlite3SelectNew(pParse, 0,pSrc,0,0,0,0,0,0);",
          "1221:     if( E )  sqlite3SrcListFuncArgs(pParse, pSelect ? pSrc : 0, E);",
          "1222:     A = sqlite3PExpr(pParse, TK_IN, A, 0);",
          "",
          "[Removed Lines]",
          "1219:     SrcList *pSrc = sqlite3SrcListAppend(pParse->db, 0,&Y,&Z);",
          "",
          "[Added Lines]",
          "1219:     SrcList *pSrc = sqlite3SrcListAppend(pParse, 0,&Y,&Z);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1287: cmd ::= createkw(S) uniqueflag(U) INDEX ifnotexists(NE) nm(X) dbnm(D)",
          "1288:         ON nm(Y) LP sortlist(Z) RP where_opt(W). {",
          "1289:   sqlite3CreateIndex(pParse, &X, &D,",
          "1291:                       &S, W, SQLITE_SO_ASC, NE, SQLITE_IDXTYPE_APPDEF);",
          "1292:   if( IN_RENAME_OBJECT && pParse->pNewIndex ){",
          "1293:     sqlite3RenameTokenMap(pParse, pParse->pNewIndex->zName, &Y);",
          "",
          "[Removed Lines]",
          "1290:                      sqlite3SrcListAppend(pParse->db,0,&Y,0), Z, U,",
          "",
          "[Added Lines]",
          "1290:                      sqlite3SrcListAppend(pParse,0,&Y,0), Z, U,",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3960:       jointype = pSubitem->fg.jointype;",
          "3961:     }else{",
          "3968:     }",
          "",
          "[Removed Lines]",
          "3963:       pSrc = pParent->pSrc = sqlite3SrcListAppend(db, 0, 0, 0);",
          "3964:       if( pSrc==0 ){",
          "3965:         assert( db->mallocFailed );",
          "3966:         break;",
          "3967:       }",
          "",
          "[Added Lines]",
          "3963:       pSrc = sqlite3SrcListAppend(pParse, 0, 0, 0);",
          "3964:       if( pSrc==0 ) break;",
          "3965:       pParent->pSrc = pSrc;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3985:     if( nSubSrc>1 ){",
          "3990:     }",
          "",
          "[Removed Lines]",
          "3986:       pParent->pSrc = pSrc = sqlite3SrcListEnlarge(db, pSrc, nSubSrc-1,iFrom+1);",
          "3987:       if( db->mallocFailed ){",
          "3988:         break;",
          "3989:       }",
          "",
          "[Added Lines]",
          "3984:       pSrc = sqlite3SrcListEnlarge(pParse, pSrc, nSubSrc-1,iFrom+1);",
          "3985:       if( pSrc==0 ) break;",
          "3986:       pParent->pSrc = pSrc;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3929: void *sqlite3ArrayAllocate(sqlite3*,void*,int,int*,int*);",
          "3930: IdList *sqlite3IdListAppend(Parse*, IdList*, Token*);",
          "3931: int sqlite3IdListIndex(IdList*,const char*);",
          "3934: SrcList *sqlite3SrcListAppendFromTerm(Parse*, SrcList*, Token*, Token*,",
          "3935:                                       Token*, Select*, Expr*, IdList*);",
          "3936: void sqlite3SrcListIndexedBy(Parse *, SrcList *, Token *);",
          "",
          "[Removed Lines]",
          "3932: SrcList *sqlite3SrcListEnlarge(sqlite3*, SrcList*, int, int);",
          "3933: SrcList *sqlite3SrcListAppend(sqlite3*, SrcList*, Token*, Token*);",
          "",
          "[Added Lines]",
          "3932: SrcList *sqlite3SrcListEnlarge(Parse*, SrcList*, int, int);",
          "3933: SrcList *sqlite3SrcListAppend(Parse*, SrcList*, Token*, Token*);",
          "",
          "---------------"
        ],
        "src/trigger.c||src/trigger.c": [
          "File: src/trigger.c -> src/trigger.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "735:   if( pSrc ){",
          "736:     assert( pSrc->nSrc>0 );",
          "737:     pSrc->a[pSrc->nSrc-1].zName = sqlite3DbStrDup(db, pStep->zTarget);",
          "",
          "[Removed Lines]",
          "734:   pSrc = sqlite3SrcListAppend(db, 0, 0, 0);",
          "",
          "[Added Lines]",
          "734:   pSrc = sqlite3SrcListAppend(pParse, 0, 0, 0);",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "823:     pSub = sqlite3SelectNew(",
          "824:         pParse, pSublist, pSrc, pWhere, pGroupBy, pHaving, pSort, 0, 0",
          "825:     );",
          "828:     if( p->pSrc ){",
          "829:       p->pSrc->a[0].pSelect = pSub;",
          "830:       sqlite3SrcListAssignCursors(pParse, p->pSrc);",
          "",
          "[Removed Lines]",
          "826:     p->pSrc = sqlite3SrcListAppend(db, 0, 0, 0);",
          "827:     assert( p->pSrc || db->mallocFailed );",
          "",
          "[Added Lines]",
          "826:     p->pSrc = sqlite3SrcListAppend(pParse, 0, 0, 0);",
          "",
          "---------------"
        ],
        "test/with1.test||test/with1.test": [
          "File: test/with1.test -> test/with1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1089:      SELECT 3 FROM c,c,c,c,c,c,c,c,c",
          "1090:   )",
          "1091:   SELECT 4 FROM c,c,c,c,c,c,c,c,c;",
          "1094: finish_test",
          "",
          "[Removed Lines]",
          "1092: } {1 {out of memory}}",
          "",
          "[Added Lines]",
          "1092: } {1 {at most 64 tables in a join}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e88c0cde6caa0136fb9b6b3b2ea3330faf8547d1",
      "candidate_info": {
        "commit_hash": "e88c0cde6caa0136fb9b6b3b2ea3330faf8547d1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e88c0cde6caa0136fb9b6b3b2ea3330faf8547d1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test_devsym.c",
          "test/permutations.test"
        ],
        "message": "As it requires wal mode support, do not run test file chunksize.test as part of the \"journaltest\" permutation.\n\nFossilOrigin-Name: acd2df36c2876ff3cc477889fc99f493cdf53a656bdb84bde6121676c9eeed1f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test_devsym.c||src/test_devsym.c",
          "test/permutations.test||test/permutations.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 971b4422ae7a8eed67f5db62c0e1cc061faac9404ff5f7051d7e07decf2207a4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test_devsym.c||src/test_devsym.c": [
          "File: src/test_devsym.c -> src/test_devsym.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "506: void devsym_unregister(){",
          "507:   sqlite3_vfs_unregister(&devsym_vfs);",
          "508:   g.pVfs = 0;",
          "509:   g.iDeviceChar = 0;",
          "510:   g.iSectorSize = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "508:   sqlite3_vfs_unregister(&writecrash_vfs);",
          "",
          "---------------"
        ],
        "test/permutations.test||test/permutations.test": [
          "File: test/permutations.test -> test/permutations.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "966:   async4.test bigfile.test backcompat.test e_wal* fstat.test mmap2.test",
          "967:   pager1.test syscall.test tkt3457.test *malloc* mmap* multiplex* nolock*",
          "968:   pager2.test *fault* rowal* snapshot* superlock* symlink.test",
          "970: }]",
          "972: if {[info commands register_demovfs] != \"\"} {",
          "",
          "[Removed Lines]",
          "969:   delete_db.test shmlock.test",
          "",
          "[Added Lines]",
          "969:   delete_db.test shmlock.test chunksize.test",
          "",
          "---------------"
        ]
      }
    }
  ]
}