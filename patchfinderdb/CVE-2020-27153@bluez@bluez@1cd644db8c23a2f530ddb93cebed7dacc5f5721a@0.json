{
  "cve_id": "CVE-2020-27153",
  "cve_desc": "In BlueZ before 5.55, a double free was found in the gatttool disconnect_cb() routine from shared/att.c. A remote attacker could potentially cause a denial of service or code execution, during service discovery, due to a redundant disconnect MGMT event.",
  "repo": "bluez/bluez",
  "patch_hash": "1cd644db8c23a2f530ddb93cebed7dacc5f5721a",
  "patch_info": {
    "commit_hash": "1cd644db8c23a2f530ddb93cebed7dacc5f5721a",
    "repo": "bluez/bluez",
    "commit_url": "https://github.com/bluez/bluez/commit/1cd644db8c23a2f530ddb93cebed7dacc5f5721a",
    "files": [
      "src/shared/att.c"
    ],
    "message": "shared/att: Fix possible crash on disconnect\n\nIf there are pending request while disconnecting they would be notified\nbut clients may endup being freed in the proccess which will then be\ncalling bt_att_cancel to cancal its requests causing the following\ntrace:\n\nInvalid read of size 4\n   at 0x1D894C: enable_ccc_callback (gatt-client.c:1627)\n   by 0x1D247B: disc_att_send_op (att.c:417)\n   by 0x1CCC17: queue_remove_all (queue.c:354)\n   by 0x1D47B7: disconnect_cb (att.c:635)\n   by 0x1E0707: watch_callback (io-glib.c:170)\n   by 0x48E963B: g_main_context_dispatch (in /usr/lib/libglib-2.0.so.0.6400.4)\n   by 0x48E9AC7: ??? (in /usr/lib/libglib-2.0.so.0.6400.4)\n   by 0x48E9ECF: g_main_loop_run (in /usr/lib/libglib-2.0.so.0.6400.4)\n   by 0x1E0E97: mainloop_run (mainloop-glib.c:79)\n   by 0x1E13B3: mainloop_run_with_signal (mainloop-notify.c:201)\n   by 0x12BC3B: main (main.c:770)\n Address 0x7d40a28 is 24 bytes inside a block of size 32 free'd\n   at 0x484A2E0: free (vg_replace_malloc.c:540)\n   by 0x1CCC17: queue_remove_all (queue.c:354)\n   by 0x1CCC83: queue_destroy (queue.c:73)\n   by 0x1D7DD7: bt_gatt_client_free (gatt-client.c:2209)\n   by 0x16497B: batt_free (battery.c:77)\n   by 0x16497B: batt_remove (battery.c:286)\n   by 0x1A0013: service_remove (service.c:176)\n   by 0x1A9B7B: device_remove_gatt_service (device.c:3691)\n   by 0x1A9B7B: gatt_service_removed (device.c:3805)\n   by 0x1CC90B: queue_foreach (queue.c:220)\n   by 0x1DE27B: notify_service_changed.isra.0.part.0 (gatt-db.c:369)\n   by 0x1DE387: notify_service_changed (gatt-db.c:361)\n   by 0x1DE387: gatt_db_service_destroy (gatt-db.c:385)\n   by 0x1DE3EF: gatt_db_remove_service (gatt-db.c:519)\n   by 0x1D674F: discovery_op_complete (gatt-client.c:388)\n   by 0x1D6877: discover_primary_cb (gatt-client.c:1260)\n   by 0x1E220B: discovery_op_complete (gatt-helpers.c:628)\n   by 0x1E249B: read_by_grp_type_cb (gatt-helpers.c:730)\n   by 0x1D247B: disc_att_send_op (att.c:417)\n   by 0x1CCC17: queue_remove_all (queue.c:354)\n   by 0x1D47B7: disconnect_cb (att.c:635)",
    "before_after_code_files": [
      "src/shared/att.c||src/shared/att.c"
    ]
  },
  "patch_diff": {
    "src/shared/att.c||src/shared/att.c": [
      "File: src/shared/att.c -> src/shared/att.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "222:  free(op);",
      "223: }",
      "226: {",
      "227:  if (op->destroy)",
      "228:   op->destroy(op->user_data);",
      "",
      "[Removed Lines]",
      "225: static void cancel_att_send_op(struct att_send_op *op)",
      "",
      "[Added Lines]",
      "226: static void cancel_att_send_op(void *data)",
      "228:  struct att_send_op *op = data;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "632:  queue_remove(att->chans, chan);",
      "639:  if (chan->pending_req) {",
      "640:   disc_att_send_op(chan->pending_req);",
      "641:   chan->pending_req = NULL;",
      "",
      "[Removed Lines]",
      "635:  queue_remove_all(att->req_queue, NULL, NULL, disc_att_send_op);",
      "636:  queue_remove_all(att->ind_queue, NULL, NULL, disc_att_send_op);",
      "637:  queue_remove_all(att->write_queue, NULL, NULL, disc_att_send_op);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "655:  bt_att_ref(att);",
      "657:  queue_foreach(att->disconn_list, disconn_handler, INT_TO_PTR(err));",
      "659:  bt_att_unregister_all(att);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "655:  att->in_disc = true;",
      "658:  queue_remove_all(att->req_queue, NULL, NULL, disc_att_send_op);",
      "659:  queue_remove_all(att->ind_queue, NULL, NULL, disc_att_send_op);",
      "660:  queue_remove_all(att->write_queue, NULL, NULL, disc_att_send_op);",
      "662:  att->in_disc = false;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1574:  return true;",
      "1575: }",
      "1577: bool bt_att_cancel(struct bt_att *att, unsigned int id)",
      "1578: {",
      "1579:  const struct queue_entry *entry;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1584: static bool bt_att_disc_cancel(struct bt_att *att, unsigned int id)",
      "1585: {",
      "1586:  struct att_send_op *op;",
      "1588:  op = queue_find(att->req_queue, match_op_id, UINT_TO_PTR(id));",
      "1589:  if (op)",
      "1590:   goto done;",
      "1592:  op = queue_find(att->ind_queue, match_op_id, UINT_TO_PTR(id));",
      "1593:  if (op)",
      "1594:   goto done;",
      "1596:  op = queue_find(att->write_queue, match_op_id, UINT_TO_PTR(id));",
      "1598: done:",
      "1599:  if (!op)",
      "1600:   return false;",
      "1603:  cancel_att_send_op(op);",
      "1605:  return true;",
      "1606: }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1591:    return true;",
      "1592:  }",
      "1594:  op = queue_remove_if(att->req_queue, match_op_id, UINT_TO_PTR(id));",
      "1595:  if (op)",
      "1596:   goto done;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1625:  if (att->in_disc)",
      "1626:   return bt_att_disc_cancel(att, id);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0379b6c8761dbd1f3d36508c3e7eb611b84c5896",
      "candidate_info": {
        "commit_hash": "0379b6c8761dbd1f3d36508c3e7eb611b84c5896",
        "repo": "bluez/bluez",
        "commit_url": "https://github.com/bluez/bluez/commit/0379b6c8761dbd1f3d36508c3e7eb611b84c5896",
        "files": [
          "src/gatt-database.c",
          "src/shared/att-types.h",
          "src/shared/att.c",
          "src/shared/att.h",
          "src/shared/gatt-client.c"
        ],
        "message": "share/att: Add EATT support\n\nThis adds EATT support to bt_att, EATT bearers are handled as\nadditional channels which auto allocated for queued requests.",
        "before_after_code_files": [
          "src/gatt-database.c||src/gatt-database.c",
          "src/shared/att-types.h||src/shared/att-types.h",
          "src/shared/att.c||src/shared/att.c",
          "src/shared/att.h||src/shared/att.h",
          "src/shared/gatt-client.c||src/shared/gatt-client.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/shared/att.c||src/shared/att.c"
          ],
          "candidate": [
            "src/shared/att.c||src/shared/att.c"
          ]
        }
      },
      "candidate_diff": {
        "src/gatt-database.c||src/gatt-database.c": [
          "File: src/gatt-database.c -> src/gatt-database.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2102:  uint16_t mtu;",
          "2104:  switch (op->link_type) {",
          "2106:   link = \"BR/EDR\";",
          "2107:   break;",
          "2109:   link = \"LE\";",
          "2110:   break;",
          "2111:  default:",
          "",
          "[Removed Lines]",
          "2105:  case BT_ATT_LINK_BREDR:",
          "2108:  case BT_ATT_LINK_LE:",
          "",
          "[Added Lines]",
          "2105:  case BT_ATT_BREDR:",
          "2108:  case BT_ATT_LE:",
          "",
          "---------------"
        ],
        "src/shared/att-types.h||src/shared/att-types.h": [
          "File: src/shared/att-types.h -> src/shared/att-types.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #define __packed __attribute__((packed))",
          "28: #endif",
          "30: #define BT_ATT_SECURITY_AUTO 0",
          "31: #define BT_ATT_SECURITY_LOW 1",
          "32: #define BT_ATT_SECURITY_MEDIUM 2",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: #define BT_ATT_CID  4",
          "31: #define BT_ATT_PSM  31",
          "32: #define BT_ATT_EATT_PSM  0x27",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37: #define BT_ATT_MAX_LE_MTU 517",
          "38: #define BT_ATT_MAX_VALUE_LEN 512",
          "45: #define BT_ATT_OP_ERROR_RSP   0x01",
          "",
          "[Removed Lines]",
          "40: #define BT_ATT_LINK_BREDR 0x00",
          "41: #define BT_ATT_LINK_LE  0x01",
          "42: #define BT_ATT_LINK_LOCAL 0xff",
          "",
          "[Added Lines]",
          "44: #define BT_ATT_BREDR  0x00",
          "45: #define BT_ATT_LE  0x01",
          "46: #define BT_ATT_EATT  0x02",
          "47: #define BT_ATT_LOCAL  0xff",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "161: #define BT_GATT_CHRC_CLI_FEAT_ROBUST_CACHING  0x01",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167: #define BT_GATT_CHRC_CLI_FEAT_EATT   0x02",
          "168: #define BT_GATT_CHRC_CLI_FEAT_NFY_MULTI   0x04",
          "171: #define BT_GATT_CHRC_SERVER_FEAT_EATT   0x01",
          "",
          "---------------"
        ],
        "src/shared/att.c||src/shared/att.c": [
          "File: src/shared/att.c -> src/shared/att.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: struct att_send_op;",
          "54:  int fd;",
          "55:  struct io *io;",
          "61:  struct att_send_op *pending_req;",
          "63:  struct att_send_op *pending_ind;",
          "65:  bool writer_active;",
          "72:  uint8_t *buf;",
          "73:  uint16_t mtu;",
          "78:  bt_att_timeout_func_t timeout_callback;",
          "79:  bt_att_destroy_func_t timeout_destroy;",
          "80:  void *timeout_data;",
          "",
          "[Removed Lines]",
          "52: struct bt_att {",
          "53:  int ref_count;",
          "56:  bool io_on_l2cap;",
          "58:  uint8_t enc_size;",
          "",
          "[Added Lines]",
          "52: struct bt_att_chan {",
          "53:  struct bt_att *att;",
          "56:  uint8_t type;",
          "67: };",
          "69: struct bt_att {",
          "70:  int ref_count;",
          "71:  bool close_on_unref;",
          "72:  struct queue *chans;",
          "73:  uint8_t enc_size;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "362:  return op;",
          "363: }",
          "366: {",
          "367:  struct att_send_op *op;",
          "",
          "[Removed Lines]",
          "365: static struct att_send_op *pick_next_send_op(struct bt_att *att)",
          "",
          "[Added Lines]",
          "373: static struct att_send_op *pick_next_send_op(struct bt_att_chan *chan)",
          "375:  struct bt_att *att = chan->att;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "378:   op = queue_pop_head(att->req_queue);",
          "379:   if (op)",
          "380:    return op;",
          "",
          "[Removed Lines]",
          "377:  if (!att->pending_req) {",
          "",
          "[Added Lines]",
          "386:  if (!chan->pending_req) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "387:   op = queue_pop_head(att->ind_queue);",
          "388:   if (op)",
          "389:    return op;",
          "",
          "[Removed Lines]",
          "386:  if (!att->pending_ind) {",
          "",
          "[Added Lines]",
          "395:  if (!chan->pending_ind) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "393: }",
          "395: struct timeout_data {",
          "397:  unsigned int id;",
          "398: };",
          "400: static bool timeout_cb(void *user_data)",
          "401: {",
          "402:  struct timeout_data *timeout = user_data;",
          "404:  struct att_send_op *op = NULL;",
          "412:  }",
          "414:  if (!op)",
          "",
          "[Removed Lines]",
          "396:  struct bt_att *att;",
          "403:  struct bt_att *att = timeout->att;",
          "406:  if (att->pending_req && att->pending_req->id == timeout->id) {",
          "407:   op = att->pending_req;",
          "408:   att->pending_req = NULL;",
          "409:  } else if (att->pending_ind && att->pending_ind->id == timeout->id) {",
          "410:   op = att->pending_ind;",
          "411:   att->pending_ind = NULL;",
          "",
          "[Added Lines]",
          "405:  struct bt_att_chan *chan;",
          "412:  struct bt_att_chan *chan = timeout->chan;",
          "413:  struct bt_att *att = chan->att;",
          "416:  if (chan->pending_req && chan->pending_req->id == timeout->id) {",
          "417:   op = chan->pending_req;",
          "418:   chan->pending_req = NULL;",
          "419:  } else if (chan->pending_ind && chan->pending_ind->id == timeout->id) {",
          "420:   op = chan->pending_ind;",
          "421:   chan->pending_ind = NULL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "433:  return false;",
          "434: }",
          "436: static void write_watch_destroy(void *user_data)",
          "437: {",
          "441: }",
          "443: static bool can_write_data(struct io *io, void *user_data)",
          "444: {",
          "446:  struct att_send_op *op;",
          "447:  struct timeout_data *timeout;",
          "448:  ssize_t ret;",
          "449:  struct iovec iov;",
          "452:  if (!op)",
          "453:   return false;",
          "",
          "[Removed Lines]",
          "431:  io_shutdown(att->io);",
          "438:  struct bt_att *att = user_data;",
          "440:  att->writer_active = false;",
          "445:  struct bt_att *att = user_data;",
          "451:  op = pick_next_send_op(att);",
          "",
          "[Added Lines]",
          "441:  io_shutdown(chan->io);",
          "448:  struct bt_att_chan *chan = user_data;",
          "450:  chan->writer_active = false;",
          "455:  struct bt_att_chan *chan = user_data;",
          "456:  struct bt_att *att = chan->att;",
          "462:  op = pick_next_send_op(chan);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "479:  switch (op->type) {",
          "480:  case ATT_OP_TYPE_REQ:",
          "482:   break;",
          "483:  case ATT_OP_TYPE_IND:",
          "485:   break;",
          "486:  case ATT_OP_TYPE_RSP:",
          "490:  case ATT_OP_TYPE_CMD:",
          "491:  case ATT_OP_TYPE_NOT:",
          "",
          "[Removed Lines]",
          "481:   att->pending_req = op;",
          "484:   att->pending_ind = op;",
          "488:   att->in_req = false;",
          "",
          "[Added Lines]",
          "492:   chan->pending_req = op;",
          "495:   chan->pending_ind = op;",
          "499:   chan->in_req = false;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "497:  }",
          "499:  timeout = new0(struct timeout_data, 1);",
          "501:  timeout->id = op->id;",
          "502:  op->timeout_id = timeout_add(ATT_TIMEOUT_INTERVAL, timeout_cb,",
          "503:         timeout, free);",
          "",
          "[Removed Lines]",
          "500:  timeout->att = att;",
          "",
          "[Added Lines]",
          "511:  timeout->chan = chan;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "506:  return true;",
          "507: }",
          "510: {",
          "512:   return;",
          "517:  if (queue_isempty(att->write_queue)) {",
          "520:    return;",
          "521:  }",
          "524:        write_watch_destroy))",
          "525:   return;",
          "528: }",
          "530: static void disconn_handler(void *data, void *user_data)",
          "",
          "[Removed Lines]",
          "509: static void wakeup_writer(struct bt_att *att)",
          "511:  if (att->writer_active)",
          "518:   if ((att->pending_req || queue_isempty(att->req_queue)) &&",
          "519:    (att->pending_ind || queue_isempty(att->ind_queue)))",
          "523:  if (!io_set_write_handler(att->io, can_write_data, att,",
          "527:  att->writer_active = true;",
          "",
          "[Added Lines]",
          "520: static void wakeup_chan_writer(void *data, void *user_data)",
          "522:  struct bt_att_chan *chan = data;",
          "523:  struct bt_att *att = chan->att;",
          "525:  if (chan->writer_active)",
          "532:   if ((chan->pending_req || queue_isempty(att->req_queue)) &&",
          "533:    (chan->pending_ind || queue_isempty(att->ind_queue)))",
          "537:  if (!io_set_write_handler(chan->io, can_write_data, chan,",
          "541:  chan->writer_active = true;",
          "542: }",
          "544: static void wakeup_writer(struct bt_att *att)",
          "545: {",
          "546:  queue_foreach(att->chans, wakeup_chan_writer, NULL);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "549:  destroy_att_send_op(op);",
          "550: }",
          "552: static bool disconnect_cb(struct io *io, void *user_data)",
          "553: {",
          "555:  int err;",
          "556:  socklen_t len;",
          "558:  len = sizeof(err);",
          "562:      \"Failed to obtain disconnect error: %s\",",
          "563:      strerror(errno));",
          "564:   err = 0;",
          "565:  }",
          "576:  queue_remove_all(att->req_queue, NULL, NULL, disc_att_send_op);",
          "577:  queue_remove_all(att->ind_queue, NULL, NULL, disc_att_send_op);",
          "578:  queue_remove_all(att->write_queue, NULL, NULL, disc_att_send_op);",
          "583:  }",
          "588:  }",
          "590:  bt_att_ref(att);",
          "592:  queue_foreach(att->disconn_list, disconn_handler, INT_TO_PTR(err));",
          "",
          "[Removed Lines]",
          "554:  struct bt_att *att = user_data;",
          "560:  if (getsockopt(att->fd, SOL_SOCKET, SO_ERROR, &err, &len) < 0) {",
          "561:   util_debug(att->debug_callback, att->debug_data,",
          "567:  util_debug(att->debug_callback, att->debug_data,",
          "568:      \"Physical link disconnected: %s\",",
          "569:      strerror(err));",
          "571:  io_destroy(att->io);",
          "572:  att->io = NULL;",
          "573:  att->fd = -1;",
          "580:  if (att->pending_req) {",
          "581:   disc_att_send_op(att->pending_req);",
          "582:   att->pending_req = NULL;",
          "585:  if (att->pending_ind) {",
          "586:   disc_att_send_op(att->pending_ind);",
          "587:   att->pending_ind = NULL;",
          "",
          "[Added Lines]",
          "571: static void bt_att_chan_free(void *data)",
          "572: {",
          "573:  struct bt_att_chan *chan = data;",
          "575:  if (chan->pending_req)",
          "576:   destroy_att_send_op(chan->pending_req);",
          "578:  if (chan->pending_ind)",
          "579:   destroy_att_send_op(chan->pending_ind);",
          "581:  io_destroy(chan->io);",
          "583:  free(chan->buf);",
          "584:  free(chan);",
          "585: }",
          "589:  struct bt_att_chan *chan = user_data;",
          "590:  struct bt_att *att = chan->att;",
          "596:  if (getsockopt(chan->fd, SOL_SOCKET, SO_ERROR, &err, &len) < 0) {",
          "597:   util_debug(chan->att->debug_callback, chan->att->debug_data,",
          "603:  util_debug(chan->att->debug_callback, chan->att->debug_data,",
          "604:      \"Channel %p disconnected: %s\",",
          "605:      chan, strerror(err));",
          "608:  queue_remove(att->chans, chan);",
          "615:  if (chan->pending_req) {",
          "616:   disc_att_send_op(chan->pending_req);",
          "617:   chan->pending_req = NULL;",
          "620:  if (chan->pending_ind) {",
          "621:   disc_att_send_op(chan->pending_ind);",
          "622:   chan->pending_ind = NULL;",
          "625:  bt_att_chan_free(chan);",
          "628:  if (!queue_isempty(att->chans))",
          "629:   return false;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "597:  return false;",
          "598: }",
          "601: {",
          "602:  int security;",
          "605:   return false;",
          "609:  if (ecode == BT_ATT_ERROR_INSUFFICIENT_ENCRYPTION &&",
          "610:      security < BT_ATT_SECURITY_MEDIUM) {",
          "",
          "[Removed Lines]",
          "600: static bool change_security(struct bt_att *att, uint8_t ecode)",
          "604:  if (att->io_sec_level != BT_ATT_SECURITY_AUTO)",
          "607:  security = bt_att_get_security(att, NULL);",
          "",
          "[Added Lines]",
          "641: static int bt_att_chan_get_security(struct bt_att_chan *chan)",
          "642: {",
          "643:  struct bt_security sec;",
          "644:  socklen_t len;",
          "646:  if (chan->type == BT_ATT_LOCAL)",
          "647:   return chan->sec_level;",
          "649:  memset(&sec, 0, sizeof(sec));",
          "650:  len = sizeof(sec);",
          "651:  if (getsockopt(chan->fd, SOL_BLUETOOTH, BT_SECURITY, &sec, &len) < 0)",
          "652:   return -EIO;",
          "654:  return sec.level;",
          "655: }",
          "657: static bool bt_att_chan_set_security(struct bt_att_chan *chan, int level)",
          "658: {",
          "659:  struct bt_security sec;",
          "661:  if (chan->type == BT_ATT_LOCAL) {",
          "662:   chan->sec_level = level;",
          "663:   return true;",
          "664:  }",
          "666:  memset(&sec, 0, sizeof(sec));",
          "667:  sec.level = level;",
          "669:  if (setsockopt(chan->fd, SOL_BLUETOOTH, BT_SECURITY, &sec,",
          "670:        sizeof(sec)) < 0)",
          "671:   return false;",
          "673:  return true;",
          "674: }",
          "676: static bool change_security(struct bt_att_chan *chan, uint8_t ecode)",
          "680:  if (chan->sec_level != BT_ATT_SECURITY_AUTO)",
          "683:  security = bt_att_chan_get_security(chan);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "622:   return false;",
          "623:  }",
          "626: }",
          "629:      ssize_t pdu_len, uint8_t *opcode)",
          "630: {",
          "631:  const struct bt_att_pdu_error_rsp *rsp;",
          "634:  if (pdu_len != sizeof(*rsp)) {",
          "",
          "[Removed Lines]",
          "625:  return bt_att_set_security(att, security);",
          "628: static bool handle_error_rsp(struct bt_att *att, uint8_t *pdu,",
          "632:  struct att_send_op *op = att->pending_req;",
          "",
          "[Added Lines]",
          "701:  return bt_att_chan_set_security(chan, security);",
          "704: static bool handle_error_rsp(struct bt_att_chan *chan, uint8_t *pdu,",
          "707:  struct bt_att *att = chan->att;",
          "709:  struct att_send_op *op = chan->pending_req;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "645:   return false;",
          "",
          "[Removed Lines]",
          "644:  if (!change_security(att, rsp->ecode))",
          "",
          "[Added Lines]",
          "721:  if (!change_security(chan, rsp->ecode))",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "653:  util_debug(att->debug_callback, att->debug_data,",
          "654:       \"Retrying operation %p\", op);",
          "659:  return queue_push_head(att->req_queue, op);",
          "660: }",
          "663:         ssize_t pdu_len)",
          "664: {",
          "666:  uint8_t req_opcode;",
          "667:  uint8_t rsp_opcode;",
          "668:  uint8_t *rsp_pdu = NULL;",
          "",
          "[Removed Lines]",
          "656:  att->pending_req = NULL;",
          "662: static void handle_rsp(struct bt_att *att, uint8_t opcode, uint8_t *pdu,",
          "665:  struct att_send_op *op = att->pending_req;",
          "",
          "[Added Lines]",
          "733:  chan->pending_req = NULL;",
          "739: static void handle_rsp(struct bt_att_chan *chan, uint8_t opcode, uint8_t *pdu,",
          "742:  struct bt_att *att = chan->att;",
          "743:  struct att_send_op *op = chan->pending_req;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "675:  if (!op) {",
          "676:   util_debug(att->debug_callback, att->debug_data,",
          "677:      \"Received unexpected ATT response\");",
          "679:   return;",
          "680:  }",
          "",
          "[Removed Lines]",
          "678:   io_shutdown(att->io);",
          "",
          "[Added Lines]",
          "756:   io_shutdown(chan->io);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "686:  if (opcode == BT_ATT_OP_ERROR_RSP) {",
          "690:    return;",
          "691:   }",
          "692:  } else if (!(req_opcode = get_req_opcode(opcode)))",
          "",
          "[Removed Lines]",
          "688:   if (handle_error_rsp(att, pdu, pdu_len, &req_opcode)) {",
          "689:    wakeup_writer(att);",
          "",
          "[Added Lines]",
          "766:   if (handle_error_rsp(chan, pdu, pdu_len, &req_opcode)) {",
          "767:    wakeup_chan_writer(chan, NULL);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "715:   op->callback(rsp_opcode, rsp_pdu, rsp_pdu_len, op->user_data);",
          "717:  destroy_att_send_op(op);",
          "721: }",
          "724: {",
          "",
          "[Removed Lines]",
          "718:  att->pending_req = NULL;",
          "720:  wakeup_writer(att);",
          "723: static void handle_conf(struct bt_att *att, uint8_t *pdu, ssize_t pdu_len)",
          "725:  struct att_send_op *op = att->pending_ind;",
          "",
          "[Added Lines]",
          "796:  chan->pending_req = NULL;",
          "798:  wakeup_chan_writer(chan, NULL);",
          "801: static void handle_conf(struct bt_att_chan *chan, uint8_t *pdu, ssize_t pdu_len)",
          "803:  struct bt_att *att = chan->att;",
          "804:  struct att_send_op *op = chan->pending_ind;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "731:  if (!op || pdu_len) {",
          "732:   util_debug(att->debug_callback, att->debug_data,",
          "733:     \"Received unexpected/invalid ATT confirmation\");",
          "735:   return;",
          "736:  }",
          "",
          "[Removed Lines]",
          "734:   io_shutdown(att->io);",
          "",
          "[Added Lines]",
          "813:   io_shutdown(chan->io);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "739:   op->callback(BT_ATT_OP_HANDLE_VAL_CONF, NULL, 0, op->user_data);",
          "741:  destroy_att_send_op(op);",
          "745: }",
          "747: struct notify_data {",
          "",
          "[Removed Lines]",
          "742:  att->pending_ind = NULL;",
          "744:  wakeup_writer(att);",
          "",
          "[Added Lines]",
          "821:  chan->pending_ind = NULL;",
          "823:  wakeup_chan_writer(chan, NULL);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "811:  return false;",
          "812: }",
          "816: {",
          "817:  const struct queue_entry *entry;",
          "818:  bool found;",
          "",
          "[Removed Lines]",
          "814: static void handle_notify(struct bt_att *att, uint8_t opcode, uint8_t *pdu,",
          "815:         ssize_t pdu_len)",
          "",
          "[Added Lines]",
          "893: static void handle_notify(struct bt_att_chan *chan, uint8_t opcode,",
          "894:       uint8_t *pdu, ssize_t pdu_len)",
          "896:  struct bt_att *att = chan->att;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "849:    switch (opcode) {",
          "850:    case BT_ATT_OP_MTU_REQ:",
          "851:     goto not_supported;",
          "",
          "[Removed Lines]",
          "848:   if (bt_att_get_link_type(att) == BT_ATT_LINK_BREDR) {",
          "",
          "[Added Lines]",
          "928:   if (bt_att_get_link_type(att) == BT_ATT_BREDR) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "877: static bool can_read_data(struct io *io, void *user_data)",
          "878: {",
          "880:  uint8_t opcode;",
          "881:  uint8_t *pdu;",
          "882:  ssize_t bytes_read;",
          "885:  if (bytes_read < 0)",
          "886:   return false;",
          "891:  if (bytes_read < ATT_MIN_PDU_LEN)",
          "892:   return true;",
          "895:  opcode = pdu[0];",
          "897:  bt_att_ref(att);",
          "",
          "[Removed Lines]",
          "879:  struct bt_att *att = user_data;",
          "884:  bytes_read = read(att->fd, att->buf, att->mtu);",
          "888:  util_hexdump('>', att->buf, bytes_read,",
          "889:      att->debug_callback, att->debug_data);",
          "894:  pdu = att->buf;",
          "",
          "[Added Lines]",
          "959:  struct bt_att_chan *chan = user_data;",
          "960:  struct bt_att *att = chan->att;",
          "965:  bytes_read = read(chan->fd, chan->buf, chan->mtu);",
          "969:  util_hexdump('>', chan->buf, bytes_read,",
          "970:     att->debug_callback, att->debug_data);",
          "975:  pdu = chan->buf;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "901:  case ATT_OP_TYPE_RSP:",
          "902:   util_debug(att->debug_callback, att->debug_data,",
          "903:     \"ATT response received: 0x%02x\", opcode);",
          "905:   break;",
          "906:  case ATT_OP_TYPE_CONF:",
          "907:   util_debug(att->debug_callback, att->debug_data,",
          "908:     \"ATT confirmation received: 0x%02x\", opcode);",
          "910:   break;",
          "911:  case ATT_OP_TYPE_REQ:",
          "",
          "[Removed Lines]",
          "904:   handle_rsp(att, opcode, pdu + 1, bytes_read - 1);",
          "909:   handle_conf(att, pdu + 1, bytes_read - 1);",
          "",
          "[Added Lines]",
          "985:   handle_rsp(chan, opcode, pdu + 1, bytes_read - 1);",
          "990:   handle_conf(chan, pdu + 1, bytes_read - 1);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "918:    util_debug(att->debug_callback, att->debug_data,",
          "919:      \"Received request while another is \"",
          "920:      \"pending: 0x%02x\", opcode);",
          "924:    return false;",
          "925:   }",
          "929:  case ATT_OP_TYPE_CMD:",
          "930:  case ATT_OP_TYPE_NOT:",
          "",
          "[Removed Lines]",
          "917:   if (att->in_req) {",
          "921:    io_shutdown(att->io);",
          "922:    bt_att_unref(att);",
          "927:   att->in_req = true;",
          "",
          "[Added Lines]",
          "998:   if (chan->in_req) {",
          "1002:    io_shutdown(chan->io);",
          "1003:    bt_att_unref(chan->att);",
          "1008:   chan->in_req = true;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "938:   util_debug(att->debug_callback, att->debug_data,",
          "939:      \"ATT PDU received: 0x%02x\", opcode);",
          "941:   break;",
          "942:  }",
          "",
          "[Removed Lines]",
          "940:   handle_notify(att, opcode, pdu + 1, bytes_read - 1);",
          "",
          "[Added Lines]",
          "1021:   handle_notify(chan, opcode, pdu + 1, bytes_read - 1);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "974: static void bt_att_free(struct bt_att *att)",
          "975: {",
          "983:  bt_crypto_unref(att->crypto);",
          "991:  if (att->timeout_destroy)",
          "992:   att->timeout_destroy(att->timeout_data);",
          "",
          "[Removed Lines]",
          "976:  if (att->pending_req)",
          "977:   destroy_att_send_op(att->pending_req);",
          "979:  if (att->pending_ind)",
          "980:   destroy_att_send_op(att->pending_ind);",
          "982:  io_destroy(att->io);",
          "985:  queue_destroy(att->req_queue, NULL);",
          "986:  queue_destroy(att->ind_queue, NULL);",
          "987:  queue_destroy(att->write_queue, NULL);",
          "988:  queue_destroy(att->notify_list, NULL);",
          "989:  queue_destroy(att->disconn_list, NULL);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "997:  free(att->local_sign);",
          "998:  free(att->remote_sign);",
          "1002:  free(att);",
          "1003: }",
          "",
          "[Removed Lines]",
          "1000:  free(att->buf);",
          "",
          "[Added Lines]",
          "1068:  queue_destroy(att->req_queue, NULL);",
          "1069:  queue_destroy(att->ind_queue, NULL);",
          "1070:  queue_destroy(att->write_queue, NULL);",
          "1071:  queue_destroy(att->notify_list, NULL);",
          "1072:  queue_destroy(att->disconn_list, NULL);",
          "1073:  queue_destroy(att->chans, bt_att_chan_free);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1014:  return l2o.omtu;",
          "1015: }",
          "1018: {",
          "1042:   goto fail;",
          "1045:   goto fail;",
          "1057:   goto fail;",
          "1061:   goto fail;",
          "1065: fail:",
          "1068:  return NULL;",
          "1069: }",
          "1071: struct bt_att *bt_att_ref(struct bt_att *att)",
          "1072: {",
          "1073:  if (!att)",
          "",
          "[Removed Lines]",
          "1017: struct bt_att *bt_att_new(int fd, bool ext_signed)",
          "1019:  struct bt_att *att;",
          "1021:  if (fd < 0)",
          "1022:   return NULL;",
          "1024:  att = new0(struct bt_att, 1);",
          "1025:  att->fd = fd;",
          "1027:  att->io = io_new(fd);",
          "1028:  if (!att->io)",
          "1029:   goto fail;",
          "1032:  if (!ext_signed)",
          "1033:   att->crypto = bt_crypto_new();",
          "1035:  att->req_queue = queue_new();",
          "1036:  att->ind_queue = queue_new();",
          "1037:  att->write_queue = queue_new();",
          "1038:  att->notify_list = queue_new();",
          "1039:  att->disconn_list = queue_new();",
          "1041:  if (!io_set_read_handler(att->io, can_read_data, att, NULL))",
          "1044:  if (!io_set_disconnect_handler(att->io, disconnect_cb, att, NULL))",
          "1047:  att->io_on_l2cap = is_io_l2cap_based(att->fd);",
          "1048:  if (!att->io_on_l2cap)",
          "1049:   att->io_sec_level = BT_ATT_SECURITY_LOW;",
          "1051:  if (bt_att_get_link_type(att) == BT_ATT_LINK_BREDR)",
          "1052:   att->mtu = get_l2cap_mtu(att->fd);",
          "1053:  else",
          "1054:   att->mtu = BT_ATT_DEFAULT_LE_MTU;",
          "1056:  if (att->mtu < BT_ATT_DEFAULT_LE_MTU)",
          "1059:  att->buf = malloc(att->mtu);",
          "1060:  if (!att->buf)",
          "1063:  return bt_att_ref(att);",
          "1066:  bt_att_free(att);",
          "",
          "[Added Lines]",
          "1090: static uint8_t io_get_type(int fd)",
          "1092:  struct sockaddr_l2 src;",
          "1093:  socklen_t len;",
          "1095:  if (!is_io_l2cap_based(fd))",
          "1096:   return BT_ATT_LOCAL;",
          "1098:  len = sizeof(src);",
          "1099:  memset(&src, 0, len);",
          "1100:  if (getsockname(fd, (void *)&src, &len) < 0)",
          "1101:   return -errno;",
          "1103:  if (src.l2_bdaddr_type == BDADDR_BREDR)",
          "1104:   return BT_ATT_BREDR;",
          "1106:  return BT_ATT_LE;",
          "1107: }",
          "1109: static struct bt_att_chan *bt_att_chan_new(int fd, uint8_t type)",
          "1110: {",
          "1111:  struct bt_att_chan *chan;",
          "1113:  if (fd < 0)",
          "1114:   return NULL;",
          "1116:  chan = new0(struct bt_att_chan, 1);",
          "1117:  chan->fd = fd;",
          "1119:  chan->io = io_new(fd);",
          "1120:  if (!chan->io)",
          "1123:  if (!io_set_read_handler(chan->io, can_read_data, chan, NULL))",
          "1126:  if (!io_set_disconnect_handler(chan->io, disconnect_cb, chan, NULL))",
          "1127:   goto fail;",
          "1129:  chan->type = type;",
          "1130:  switch (chan->type) {",
          "1131:  case BT_ATT_LOCAL:",
          "1132:   chan->sec_level = BT_ATT_SECURITY_LOW;",
          "1134:  case BT_ATT_LE:",
          "1135:   chan->mtu = BT_ATT_DEFAULT_LE_MTU;",
          "1136:   break;",
          "1137:  default:",
          "1138:   chan->mtu = get_l2cap_mtu(chan->fd);",
          "1139:  }",
          "1141:  if (chan->mtu < BT_ATT_DEFAULT_LE_MTU)",
          "1144:  chan->buf = malloc(chan->mtu);",
          "1145:  if (!chan->buf)",
          "1148:  return chan;",
          "1151:  bt_att_chan_free(chan);",
          "1156: struct bt_att *bt_att_new(int fd, bool ext_signed)",
          "1157: {",
          "1158:  struct bt_att *att;",
          "1159:  struct bt_att_chan *chan;",
          "1161:  chan = bt_att_chan_new(fd, io_get_type(fd));",
          "1162:  if (!chan)",
          "1163:   return NULL;",
          "1165:  att = new0(struct bt_att, 1);",
          "1166:  att->chans = queue_new();",
          "1167:  att->mtu = chan->mtu;",
          "1169:  queue_push_head(att->chans, chan);",
          "1170:  chan->att = att;",
          "1173:  if (!ext_signed)",
          "1174:   att->crypto = bt_crypto_new();",
          "1176:  att->req_queue = queue_new();",
          "1177:  att->ind_queue = queue_new();",
          "1178:  att->write_queue = queue_new();",
          "1179:  att->notify_list = queue_new();",
          "1180:  att->disconn_list = queue_new();",
          "1182:  return bt_att_ref(att);",
          "1183: }",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1095: bool bt_att_set_close_on_unref(struct bt_att *att, bool do_close)",
          "1096: {",
          "1098:   return false;",
          "1101: }",
          "1103: int bt_att_get_fd(struct bt_att *att)",
          "1104: {",
          "1105:  if (!att)",
          "1106:   return -1;",
          "1109: }",
          "1111: bool bt_att_set_debug(struct bt_att *att, bt_att_debug_func_t callback,",
          "",
          "[Removed Lines]",
          "1097:  if (!att || !att->io)",
          "1100:  return io_set_close_on_destroy(att->io, do_close);",
          "1108:  return att->fd;",
          "",
          "[Added Lines]",
          "1211:  const struct queue_entry *entry;",
          "1213:  if (!att)",
          "1216:  att->close_on_unref = do_close;",
          "1218:  for (entry = queue_get_entries(att->chans); entry;",
          "1219:       entry = entry->next) {",
          "1220:   struct bt_att_chan *chan = entry->data;",
          "1222:   if (!io_set_close_on_destroy(chan->io, do_close))",
          "1223:    return false;",
          "1224:  }",
          "1226:  return true;",
          "1227: }",
          "1229: int bt_att_attach_fd(struct bt_att *att, int fd)",
          "1230: {",
          "1231:  struct bt_att_chan *chan;",
          "1233:  if (!att || fd < 0)",
          "1234:   return -EINVAL;",
          "1236:  chan = bt_att_chan_new(fd, BT_ATT_EATT);",
          "1237:  if (!chan)",
          "1238:   return -EINVAL;",
          "1240:  queue_push_tail(att->chans, chan);",
          "1241:  chan->att = att;",
          "1243:  if (chan->mtu > att->mtu)",
          "1244:   att->mtu = chan->mtu;",
          "1246:  io_set_close_on_destroy(chan->io, att->close_on_unref);",
          "1248:  return 0;",
          "1253:  struct bt_att_chan *chan;",
          "1258:  if (queue_isempty(att->chans))",
          "1259:   return -ENOTCONN;",
          "1261:  chan = queue_peek_head(att->chans);",
          "1263:  return chan->fd;",
          "1264: }",
          "1266: int bt_att_get_channels(struct bt_att *att)",
          "1267: {",
          "1268:  if (!att)",
          "1269:   return 0;",
          "1271:  return queue_length(att->chans);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1135: bool bt_att_set_mtu(struct bt_att *att, uint16_t mtu)",
          "1136: {",
          "1137:  void *buf;",
          "1139:  if (!att)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1300:  struct bt_att_chan *chan;",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1142:  if (mtu < BT_ATT_DEFAULT_LE_MTU)",
          "1143:   return false;",
          "1145:  buf = malloc(mtu);",
          "1146:  if (!buf)",
          "1147:   return false;",
          "1154:  return true;",
          "1155: }",
          "1157: uint8_t bt_att_get_link_type(struct bt_att *att)",
          "1158: {",
          "1162:  if (!att)",
          "1163:   return -EINVAL;",
          "1177: }",
          "1179: bool bt_att_set_timeout_cb(struct bt_att *att, bt_att_timeout_func_t callback,",
          "",
          "[Removed Lines]",
          "1149:  free(att->buf);",
          "1151:  att->mtu = mtu;",
          "1152:  att->buf = buf;",
          "1159:  struct sockaddr_l2 src;",
          "1160:  socklen_t len;",
          "1165:  if (!att->io_on_l2cap)",
          "1166:   return BT_ATT_LINK_LOCAL;",
          "1168:  len = sizeof(src);",
          "1169:  memset(&src, 0, len);",
          "1170:  if (getsockname(att->fd, (void *)&src, &len) < 0)",
          "1171:   return -errno;",
          "1173:  if (src.l2_bdaddr_type == BDADDR_BREDR)",
          "1174:   return BT_ATT_LINK_BREDR;",
          "1176:  return BT_ATT_LINK_LE;",
          "",
          "[Added Lines]",
          "1309:  chan = queue_peek_head(att->chans);",
          "1310:  if (!chan)",
          "1311:   return -ENOTCONN;",
          "1317:  free(chan->buf);",
          "1319:  chan->mtu = mtu;",
          "1320:  chan->buf = buf;",
          "1322:  if (chan->mtu > att->mtu)",
          "1323:   att->mtu = chan->mtu;",
          "1330:  struct bt_att_chan *chan;",
          "1335:  chan = queue_peek_head(att->chans);",
          "1336:  if (!chan)",
          "1337:   return -ENOTCONN;",
          "1339:  return chan->type;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1200: {",
          "1201:  struct att_disconn *disconn;",
          "1204:   return 0;",
          "1206:  disconn = new0(struct att_disconn, 1);",
          "",
          "[Removed Lines]",
          "1203:  if (!att || !att->io)",
          "",
          "[Added Lines]",
          "1366:  if (!att || queue_isempty(att->chans))",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1229:   return false;",
          "1233:   disconn = queue_find(att->disconn_list, match_disconn_id,",
          "1234:        UINT_TO_PTR(id));",
          "1235:   if (!disconn)",
          "",
          "[Removed Lines]",
          "1232:  if (!att->io) {",
          "",
          "[Added Lines]",
          "1395:  if (!queue_isempty(att->chans)) {",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1256:  struct att_send_op *op;",
          "1257:  bool result;",
          "1260:   return 0;",
          "1262:  op = create_att_send_op(att, opcode, pdu, length, callback, user_data,",
          "",
          "[Removed Lines]",
          "1259:  if (!att || !att->io)",
          "",
          "[Added Lines]",
          "1422:  if (!att || queue_isempty(att->chans))",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1309: bool bt_att_cancel(struct bt_att *att, unsigned int id)",
          "1310: {",
          "1311:  struct att_send_op *op;",
          "1313:  if (!att || !id)",
          "1314:   return false;",
          "1326:  }",
          "1328:  op = queue_remove_if(att->req_queue, match_op_id, UINT_TO_PTR(id));",
          "",
          "[Removed Lines]",
          "1316:  if (att->pending_req && att->pending_req->id == id) {",
          "1318:   cancel_att_send_op(att->pending_req);",
          "1319:   return true;",
          "1320:  }",
          "1322:  if (att->pending_ind && att->pending_ind->id == id) {",
          "1324:   cancel_att_send_op(att->pending_ind);",
          "1325:   return true;",
          "",
          "[Added Lines]",
          "1474:  const struct queue_entry *entry;",
          "1480:  for (entry = queue_get_entries(att->chans); entry;",
          "1481:       entry = entry->next) {",
          "1482:   struct bt_att_chan *chan = entry->data;",
          "1484:   if (chan->pending_req && chan->pending_req->id == id) {",
          "1488:    cancel_att_send_op(chan->pending_req);",
          "1489:    return true;",
          "1490:   }",
          "1492:   if (chan->pending_ind && chan->pending_ind->id == id) {",
          "1496:    cancel_att_send_op(chan->pending_ind);",
          "1497:    return true;",
          "1498:   }",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1351: bool bt_att_cancel_all(struct bt_att *att)",
          "1352: {",
          "1353:  if (!att)",
          "1354:   return false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1526:  const struct queue_entry *entry;",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1357:  queue_remove_all(att->ind_queue, NULL, NULL, destroy_att_send_op);",
          "1358:  queue_remove_all(att->write_queue, NULL, NULL, destroy_att_send_op);",
          "1368:  return true;",
          "1369: }",
          "",
          "[Removed Lines]",
          "1360:  if (att->pending_req)",
          "1362:   cancel_att_send_op(att->pending_req);",
          "1364:  if (att->pending_ind)",
          "1366:   cancel_att_send_op(att->pending_ind);",
          "",
          "[Added Lines]",
          "1535:  for (entry = queue_get_entries(att->chans); entry;",
          "1536:       entry = entry->next) {",
          "1537:   struct bt_att_chan *chan = entry->data;",
          "1539:   if (chan->pending_req)",
          "1543:    cancel_att_send_op(chan->pending_req);",
          "1545:   if (chan->pending_ind)",
          "1549:    cancel_att_send_op(chan->pending_ind);",
          "1550:  }",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1424: {",
          "1425:  struct att_notify *notify;",
          "1428:   return 0;",
          "1430:  notify = new0(struct att_notify, 1);",
          "",
          "[Removed Lines]",
          "1427:  if (!att || !callback || !att->io)",
          "",
          "[Added Lines]",
          "1611:  if (!att || !callback || queue_isempty(att->chans))",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1476: int bt_att_get_security(struct bt_att *att, uint8_t *enc_size)",
          "1477: {",
          "1481:  if (!att)",
          "1482:   return -EINVAL;",
          "1496:  if (enc_size)",
          "1500: }",
          "1502: bool bt_att_set_security(struct bt_att *att, int level)",
          "1503: {",
          "1506:  if (!att || level < BT_ATT_SECURITY_AUTO ||",
          "1507:       level > BT_ATT_SECURITY_HIGH)",
          "1508:   return false;",
          "1523: }",
          "1525: void bt_att_set_enc_key_size(struct bt_att *att, uint8_t enc_size)",
          "",
          "[Removed Lines]",
          "1478:  struct bt_security sec;",
          "1479:  socklen_t len;",
          "1484:  if (!att->io_on_l2cap) {",
          "1485:   if (enc_size)",
          "1488:   return att->io_sec_level;",
          "1489:  }",
          "1491:  memset(&sec, 0, sizeof(sec));",
          "1492:  len = sizeof(sec);",
          "1493:  if (getsockopt(att->fd, SOL_BLUETOOTH, BT_SECURITY, &sec, &len) < 0)",
          "1494:   return -EIO;",
          "1499:  return sec.level;",
          "1504:  struct bt_security sec;",
          "1510:  if (!att->io_on_l2cap) {",
          "1511:   att->io_sec_level = level;",
          "1512:   return true;",
          "1513:  }",
          "1515:  memset(&sec, 0, sizeof(sec));",
          "1516:  sec.level = level;",
          "1518:  if (setsockopt(att->fd, SOL_BLUETOOTH, BT_SECURITY, &sec,",
          "1519:        sizeof(sec)) < 0)",
          "1520:   return false;",
          "1522:  return true;",
          "",
          "[Added Lines]",
          "1662:  struct bt_att_chan *chan;",
          "1663:  int ret;",
          "1668:  chan = queue_peek_head(att->chans);",
          "1669:  if (!chan)",
          "1670:   return -ENOTCONN;",
          "1672:  ret = bt_att_chan_get_security(chan);",
          "1673:  if (ret < 0)",
          "1674:   return ret;",
          "1679:  return ret;",
          "1684:  struct bt_att_chan *chan;",
          "1690:  chan = queue_peek_head(att->chans);",
          "1691:  if (!chan)",
          "1692:   return -ENOTCONN;",
          "1694:  return bt_att_chan_set_security(chan, level);",
          "",
          "---------------"
        ],
        "src/shared/att.h||src/shared/att.h": [
          "File: src/shared/att.h -> src/shared/att.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: int bt_att_get_fd(struct bt_att *att);",
          "40: typedef void (*bt_att_response_func_t)(uint8_t opcode, const void *pdu,",
          "41:      uint16_t length, void *user_data);",
          "42: typedef void (*bt_att_notify_func_t)(uint8_t opcode, const void *pdu,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: int bt_att_attach_fd(struct bt_att *att, int fd);",
          "42: int bt_att_get_channels(struct bt_att *att);",
          "",
          "---------------"
        ],
        "src/shared/gatt-client.c||src/shared/gatt-client.c": [
          "File: src/shared/gatt-client.c -> src/shared/gatt-client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1913:   goto discover;",
          "",
          "[Removed Lines]",
          "1912:  if (bt_att_get_link_type(client->att) == BT_ATT_LINK_BREDR)",
          "",
          "[Added Lines]",
          "1912:  if (bt_att_get_link_type(client->att) == BT_ATT_BREDR)",
          "",
          "---------------"
        ]
      }
    }
  ]
}