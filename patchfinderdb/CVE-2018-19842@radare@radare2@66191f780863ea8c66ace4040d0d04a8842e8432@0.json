{
  "cve_id": "CVE-2018-19842",
  "cve_desc": "getToken in libr/asm/p/asm_x86_nz.c in radare2 before 3.1.0 allows attackers to cause a denial of service (stack-based buffer over-read) via crafted x86 assembly data, as demonstrated by rasm2.",
  "repo": "radare/radare2",
  "patch_hash": "66191f780863ea8c66ace4040d0d04a8842e8432",
  "patch_info": {
    "commit_hash": "66191f780863ea8c66ace4040d0d04a8842e8432",
    "repo": "radare/radare2",
    "commit_url": "https://github.com/radare/radare2/commit/66191f780863ea8c66ace4040d0d04a8842e8432",
    "files": [
      "libr/asm/p/asm_x86_nz.c"
    ],
    "message": "Fix #12239 - crash in the x86.nz assembler ##asm (#12252)",
    "before_after_code_files": [
      "libr/asm/p/asm_x86_nz.c||libr/asm/p/asm_x86_nz.c"
    ]
  },
  "patch_diff": {
    "libr/asm/p/asm_x86_nz.c||libr/asm/p/asm_x86_nz.c": [
      "File: libr/asm/p/asm_x86_nz.c -> libr/asm/p/asm_x86_nz.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4295: };",
      "4297: static x86newTokenType getToken(const char *str, size_t *begin, size_t *end) {",
      "4300:   ++(*begin);",
      "4301:  }",
      "4303:  if (!str[*begin]) {                // null byte",
      "4305:   return TT_EOF;",
      "4309:    ++(*end);",
      "4310:   }",
      "4311:   return TT_WORD;",
      "4314:   while (end && isalnum ((ut8)str[*end])) {     // accept alphanumeric characters, because hex.",
      "4315:    ++(*end);",
      "",
      "[Removed Lines]",
      "4299:  while (begin && isspace ((ut8)str[*begin])) {",
      "4306:  } else if (isalpha ((ut8)str[*begin])) {   // word token",
      "4308:   while (end && isalnum ((ut8)str[*end])) {",
      "4312:  } else if (isdigit ((ut8)str[*begin])) {   // number token",
      "",
      "[Added Lines]",
      "4298:  if (*begin > strlen (str)) {",
      "4299:   return TT_EOF;",
      "4300:  }",
      "4302:  while (begin && str[*begin] && isspace ((ut8)str[*begin])) {",
      "4309:  }",
      "4310:  if (isalpha ((ut8)str[*begin])) {   // word token",
      "4312:   while (end && str[*end] && isalnum ((ut8)str[*end])) {",
      "4316:  }",
      "4317:  if (isdigit ((ut8)str[*begin])) {   // number token",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fdcf5bc9b25f362399f0ad3b7e3fcb57e145c1bd",
      "candidate_info": {
        "commit_hash": "fdcf5bc9b25f362399f0ad3b7e3fcb57e145c1bd",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/fdcf5bc9b25f362399f0ad3b7e3fcb57e145c1bd",
        "files": [
          "libr/asm/p/asm_x86_nz.c"
        ],
        "message": "Fix infinite loop in 'mov rax, qword[xmm0]'",
        "before_after_code_files": [
          "libr/asm/p/asm_x86_nz.c||libr/asm/p/asm_x86_nz.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/asm/p/asm_x86_nz.c||libr/asm/p/asm_x86_nz.c"
          ],
          "candidate": [
            "libr/asm/p/asm_x86_nz.c||libr/asm/p/asm_x86_nz.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/asm/p/asm_x86_nz.c||libr/asm/p/asm_x86_nz.c": [
          "File: libr/asm/p/asm_x86_nz.c -> libr/asm/p/asm_x86_nz.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4055: static x86newTokenType getToken(const char *str, size_t *begin, size_t *end) {",
          "4058:   ++(*begin);",
          "4060:  if (!str[*begin]) {                // null byte",
          "4062:   return TT_EOF;",
          "4063:  } else if (isalpha ((int)str[*begin])) {   // word token",
          "4066:    ++(*end);",
          "4067:   return TT_WORD;",
          "4068:  } else if (isdigit ((int)str[*begin])) {   // number token",
          "4071:    ++(*end);",
          "4072:   return TT_NUMBER;",
          "4073:  } else {                             // special character: [, ], +, *, ...",
          "",
          "[Removed Lines]",
          "4057:  while (isspace ((int)str[*begin]))",
          "4065:   while (isalnum ((int)str[*end]))",
          "4070:   while (isalnum ((int)str[*end]))     // accept alphanumeric characters, because hex.",
          "",
          "[Added Lines]",
          "4057:  while (*begin && isspace ((int)str[*begin])) {",
          "4059:  }",
          "4066:   while (*end && isalnum ((int)str[*end])) {",
          "4068:   }",
          "4072:   while (*end && isalnum ((int)str[*end])) {     // accept alphanumeric characters, because hex.",
          "4074:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "927bfbae737ca0231166d031a643243e0318d63a",
      "candidate_info": {
        "commit_hash": "927bfbae737ca0231166d031a643243e0318d63a",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/927bfbae737ca0231166d031a643243e0318d63a",
        "files": [
          "libr/asm/p/asm_x86_nz.c"
        ],
        "message": "asm_x86_nz: fix pancake (#10761)",
        "before_after_code_files": [
          "libr/asm/p/asm_x86_nz.c||libr/asm/p/asm_x86_nz.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/asm/p/asm_x86_nz.c||libr/asm/p/asm_x86_nz.c"
          ],
          "candidate": [
            "libr/asm/p/asm_x86_nz.c||libr/asm/p/asm_x86_nz.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/asm/p/asm_x86_nz.c||libr/asm/p/asm_x86_nz.c": [
          "File: libr/asm/p/asm_x86_nz.c -> libr/asm/p/asm_x86_nz.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4055: static x86newTokenType getToken(const char *str, size_t *begin, size_t *end) {",
          "4058:   ++(*begin);",
          "4059:  }",
          "",
          "[Removed Lines]",
          "4057:  while (*begin && isspace ((int)str[*begin])) {",
          "",
          "[Added Lines]",
          "4057:  while (begin && isspace ((int)str[*begin])) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4063:   return TT_EOF;",
          "4064:  } else if (isalpha ((int)str[*begin])) {   // word token",
          "4067:    ++(*end);",
          "4068:   }",
          "4069:   return TT_WORD;",
          "4070:  } else if (isdigit ((int)str[*begin])) {   // number token",
          "4073:    ++(*end);",
          "4074:   }",
          "4075:   return TT_NUMBER;",
          "",
          "[Removed Lines]",
          "4066:   while (*end && isalnum ((int)str[*end])) {",
          "4072:   while (*end && isalnum ((int)str[*end])) {     // accept alphanumeric characters, because hex.",
          "",
          "[Added Lines]",
          "4066:   while (end && isalnum ((int)str[*end])) {",
          "4072:   while (end && isalnum ((int)str[*end])) {     // accept alphanumeric characters, because hex.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b790439e2810ac934eb7846adf5a645954c1bbce",
      "candidate_info": {
        "commit_hash": "b790439e2810ac934eb7846adf5a645954c1bbce",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/b790439e2810ac934eb7846adf5a645954c1bbce",
        "files": [
          "libr/anal/p/anal_riscv.c",
          "libr/asm/p/asm_x86_nz.c",
          "libr/bin/format/pe/pe.c",
          "libr/bin/mangling/microsoft_demangle.c",
          "libr/core/cmd.c",
          "libr/core/cmd_anal.c",
          "libr/core/cmd_debug.c",
          "libr/core/disasm.c",
          "libr/core/rtr.c",
          "libr/debug/dreg.c",
          "libr/debug/p/native/linux/linux_coredump.c",
          "libr/hash/hash.c",
          "libr/io/p/io_gdb.c",
          "libr/parse/p/parse_mips_pseudo.c",
          "libr/parse/p/parse_x86_pseudo.c",
          "libr/reg/profile.c",
          "libr/util/hex.c",
          "libr/util/print.c",
          "libr/util/regex/engine.c",
          "libr/util/regex/regex2.h",
          "libr/util/unum.c"
        ],
        "message": "Cast arguments to ut8 when feeding ctype.h functions ##refactor\n\nThe behavior of the `<ctype.h>` functions is undefined for negative\narguments (other than `EOF`). In such a situation, the argument should\nbe cast to `unsiged char` for safety.\n\nReferences:\n - C Programming: A Modern Approach, 2nd Edition: page 612, chapter 23.5",
        "before_after_code_files": [
          "libr/anal/p/anal_riscv.c||libr/anal/p/anal_riscv.c",
          "libr/asm/p/asm_x86_nz.c||libr/asm/p/asm_x86_nz.c",
          "libr/bin/format/pe/pe.c||libr/bin/format/pe/pe.c",
          "libr/bin/mangling/microsoft_demangle.c||libr/bin/mangling/microsoft_demangle.c",
          "libr/core/cmd.c||libr/core/cmd.c",
          "libr/core/cmd_anal.c||libr/core/cmd_anal.c",
          "libr/core/cmd_debug.c||libr/core/cmd_debug.c",
          "libr/core/disasm.c||libr/core/disasm.c",
          "libr/core/rtr.c||libr/core/rtr.c",
          "libr/debug/dreg.c||libr/debug/dreg.c",
          "libr/debug/p/native/linux/linux_coredump.c||libr/debug/p/native/linux/linux_coredump.c",
          "libr/hash/hash.c||libr/hash/hash.c",
          "libr/io/p/io_gdb.c||libr/io/p/io_gdb.c",
          "libr/parse/p/parse_mips_pseudo.c||libr/parse/p/parse_mips_pseudo.c",
          "libr/parse/p/parse_x86_pseudo.c||libr/parse/p/parse_x86_pseudo.c",
          "libr/reg/profile.c||libr/reg/profile.c",
          "libr/util/hex.c||libr/util/hex.c",
          "libr/util/print.c||libr/util/print.c",
          "libr/util/regex/engine.c||libr/util/regex/engine.c",
          "libr/util/regex/regex2.h||libr/util/regex/regex2.h",
          "libr/util/unum.c||libr/util/unum.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/asm/p/asm_x86_nz.c||libr/asm/p/asm_x86_nz.c"
          ],
          "candidate": [
            "libr/asm/p/asm_x86_nz.c||libr/asm/p/asm_x86_nz.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/anal/p/anal_riscv.c||libr/anal/p/anal_riscv.c": [
          "File: libr/anal/p/anal_riscv.c -> libr/anal/p/anal_riscv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:   if (no_alias && (o->pinfo & INSN_ALIAS)) {",
          "84:    continue;",
          "85:   }",
          "87:    continue;",
          "88:   } else {",
          "89:    break;",
          "",
          "[Removed Lines]",
          "86:   if (isdigit ((int)(o->subset[0])) && atoi (o->subset) != xlen) {",
          "",
          "[Added Lines]",
          "86:   if (isdigit ((ut8)(o->subset[0])) && atoi (o->subset) != xlen) {",
          "",
          "---------------"
        ],
        "libr/asm/p/asm_x86_nz.c||libr/asm/p/asm_x86_nz.c": [
          "File: libr/asm/p/asm_x86_nz.c -> libr/asm/p/asm_x86_nz.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4297: static x86newTokenType getToken(const char *str, size_t *begin, size_t *end) {",
          "4300:   ++(*begin);",
          "4301:  }",
          "4303:  if (!str[*begin]) {                // null byte",
          "4305:   return TT_EOF;",
          "4309:    ++(*end);",
          "4310:   }",
          "4311:   return TT_WORD;",
          "4315:    ++(*end);",
          "4316:   }",
          "4317:   return TT_NUMBER;",
          "",
          "[Removed Lines]",
          "4299:  while (begin && isspace ((int)str[*begin])) {",
          "4306:  } else if (isalpha ((int)str[*begin])) {   // word token",
          "4308:   while (end && isalnum ((int)str[*end])) {",
          "4312:  } else if (isdigit ((int)str[*begin])) {   // number token",
          "4314:   while (end && isalnum ((int)str[*end])) {     // accept alphanumeric characters, because hex.",
          "",
          "[Added Lines]",
          "4299:  while (begin && isspace ((ut8)str[*begin])) {",
          "4306:  } else if (isalpha ((ut8)str[*begin])) {   // word token",
          "4308:   while (end && isalnum ((ut8)str[*end])) {",
          "4312:  } else if (isdigit ((ut8)str[*begin])) {   // number token",
          "4314:   while (end && isalnum ((ut8)str[*end])) {     // accept alphanumeric characters, because hex.",
          "",
          "---------------"
        ],
        "libr/bin/format/pe/pe.c||libr/bin/format/pe/pe.c": [
          "File: libr/bin/format/pe/pe.c -> libr/bin/format/pe/pe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2839:  }",
          "2841:  while (i < 33) {",
          "2843:   i++;",
          "2844:  }",
          "",
          "[Removed Lines]",
          "2842:   res->guidstr[i] = toupper ((int) res->guidstr[i]);",
          "",
          "[Added Lines]",
          "2842:   res->guidstr[i] = toupper ((ut8) res->guidstr[i]);",
          "",
          "---------------"
        ],
        "libr/bin/mangling/microsoft_demangle.c||libr/bin/mangling/microsoft_demangle.c": [
          "File: libr/bin/mangling/microsoft_demangle.c -> libr/bin/mangling/microsoft_demangle.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "164: int get_template (char *buf, SStrInfo *str_info) {",
          "165:  int len = 0;",
          "166:  unsigned int i = 0;",
          "168:  char *tmp = strstr(buf, \"@\");",
          "169:  STypeCodeStr type_code_str;",
          "",
          "[Removed Lines]",
          "167:  char *str_type_code = 0;",
          "",
          "[Added Lines]",
          "167:  char *str_type_code = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "237: int get_namespace_and_name( char *buf, STypeCodeStr *type_code_str,",
          "238:        int *amount_of_names)",
          "239: {",
          "246:  int len = 0, read_len = 0, tmp_len = 0;",
          "",
          "[Removed Lines]",
          "240:  char *curr_pos = 0, *prev_pos = 0;",
          "241:  char *tmp = 0;",
          "242:  RList /* <SStrInfo *> */ *names_l = 0;",
          "243:  RListIter *it = 0;",
          "244:  SStrInfo *str_info = 0;",
          "",
          "[Added Lines]",
          "240:  char *curr_pos = NULL, *prev_pos = NULL;",
          "241:  char *tmp = NULL;",
          "242:  RList /* <SStrInfo *> */ *names_l = NULL;",
          "243:  RListIter *it = NULL;",
          "244:  SStrInfo *str_info = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "402:    continue;",
          "403:   }",
          "406:    tmp = r_list_get_n (abbr_names, *tmp - '0');",
          "407:    if (!tmp) {",
          "408:     goto get_namespace_and_name_err;",
          "",
          "[Removed Lines]",
          "405:   if (isdigit ((int)*tmp)) {",
          "",
          "[Added Lines]",
          "405:   if (isdigit ((ut8)*tmp)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "643: char* get_num(SStateInfo *state)",
          "644: {",
          "646:  if (*state->buff_for_parsing >= '0' && *state->buff_for_parsing <= '8') {",
          "647:   ptr = (char *) malloc (2);",
          "648:   ptr[0] = *state->buff_for_parsing + 1;",
          "",
          "[Removed Lines]",
          "645:  char *ptr = 0;",
          "",
          "[Added Lines]",
          "645:  char *ptr = NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "682: #define MODIFIER(modifier_str) { \\",
          "683:  unsigned int i = 0; \\",
          "684:  EDemanglerErr err = eDemanglerErrOK; \\",
          "686:  STypeCodeStr tmp_str; \\",
          "687:  STypeCodeStr modifier; \\",
          "688:  int flag__64ptr = 0; \\",
          "",
          "[Removed Lines]",
          "685:  char *tmp = 0; \\",
          "",
          "[Added Lines]",
          "685:  char *tmp = NULL; \\",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "786: DEF_STATE_ACTION(P)",
          "787: {",
          "790:   if (*state->buff_for_parsing++ == '6') {",
          "794:    unsigned int i = 0;",
          "795:    unsigned int is_abbr_type = 0;",
          "796:    EDemanglerErr err;",
          "",
          "[Removed Lines]",
          "789:  if (isdigit ((int)*state->buff_for_parsing)) {",
          "791:    char *call_conv = 0;",
          "792:    char *ret_type = 0;",
          "793:    char *arg = 0;",
          "",
          "[Added Lines]",
          "789:  if (isdigit ((ut8)*state->buff_for_parsing)) {",
          "791:    char *call_conv = NULL;",
          "792:    char *ret_type = NULL;",
          "793:    char *arg = NULL;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1072:  int is_static = 0;",
          "1073:  unsigned int is_abbr_type = 0;",
          "1085:  unsigned int i = 0;",
          "1086:  unsigned int len = 0;",
          "1088:  char *curr_pos = sym;",
          "1093:  memset(&type_code_str, 0, sizeof(type_code_str));",
          "",
          "[Removed Lines]",
          "1075:  char *access_modifier = 0;",
          "1076:  char *memb_func_access_code = 0;",
          "1077:  char *call_conv = 0;",
          "1078:  char *storage_class_code_for_ret = 0;",
          "1079:  char *ret_type = 0;",
          "1080:  char *__64ptr = 0;",
          "1081:  RList /* <char *> */ *func_args = 0;",
          "1082:  RListIter *it = 0;",
          "1083:  SStrInfo *str_arg = 0;",
          "1089:  char *tmp = 0;",
          "1090:  char *ptr64 = 0;",
          "1091:  char *storage_class = 0;",
          "",
          "[Added Lines]",
          "1075:  char *access_modifier = NULL;",
          "1076:  char *memb_func_access_code = NULL;",
          "1077:  char *call_conv = NULL;",
          "1078:  char *storage_class_code_for_ret = NULL;",
          "1079:  char *ret_type = NULL;",
          "1080:  char *__64ptr = NULL;",
          "1081:  RList /* <char *> */ *func_args = NULL;",
          "1082:  RListIter *it = NULL;",
          "1083:  SStrInfo *str_arg = NULL;",
          "1089:  char *tmp = NULL;",
          "1090:  char *ptr64 = NULL;",
          "1091:  char *storage_class = NULL;",
          "",
          "---------------"
        ],
        "libr/core/cmd.c||libr/core/cmd.c": [
          "File: libr/core/cmd.c -> libr/core/cmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1667:  SECURITY_ATTRIBUTES sa;",
          "1668:  HANDLE pipe[2] = {NULL, NULL};",
          "1669:  int fd_out = -1, cons_out = -1;",
          "1671:  LPTSTR _shell_cmd_ = NULL;",
          "1673:  sa.nLength = sizeof (SECURITY_ATTRIBUTES);",
          "",
          "[Removed Lines]",
          "1670:  char *_shell_cmd;",
          "",
          "[Added Lines]",
          "1670:  char *_shell_cmd = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1687:  si.dwFlags |= STARTF_USESTDHANDLES;",
          "1688:  si.cb = sizeof (si);",
          "1689:  _shell_cmd = shell_cmd;",
          "1691:   _shell_cmd++;",
          "1692:  }",
          "1693:  _shell_cmd_ = r_sys_conv_utf8_to_utf16 (_shell_cmd);",
          "",
          "[Removed Lines]",
          "1690:  while (*_shell_cmd && isspace (*_shell_cmd)) {",
          "",
          "[Added Lines]",
          "1690:  while (*_shell_cmd && isspace ((ut8)*_shell_cmd)) {",
          "",
          "---------------"
        ],
        "libr/core/cmd_anal.c||libr/core/cmd_anal.c": [
          "File: libr/core/cmd_anal.c -> libr/core/cmd_anal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5300:  case 'c': // \"asc\"",
          "5301:   if (input[1] == 'a') {",
          "5302:    if (input[2] == ' ') {",
          "5304:      si = r_syscall_get (core->anal->syscall, n, -1);",
          "5305:      if (si) {",
          "5306:       r_cons_printf (\".equ SYS_%s %s\\n\", si->name, syscallNumber (n));",
          "",
          "[Removed Lines]",
          "5303:     if (!isalpha (input[3]) && (n = r_num_math (num, input + 3)) >= 0 ) {",
          "",
          "[Added Lines]",
          "5303:     if (!isalpha ((ut8)input[3]) && (n = r_num_math (num, input + 3)) >= 0 ) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5324:    }",
          "5325:   } else {",
          "5326:    if (input[1] == ' ') {",
          "5328:      si = r_syscall_get (core->anal->syscall, n, -1);",
          "5329:      if (si) {",
          "5330:       r_cons_printf (\"#define SYS_%s %s\\n\", si->name, syscallNumber (n));",
          "",
          "[Removed Lines]",
          "5327:     if (!isalpha (input[2]) && (n = r_num_math (num, input + 2)) >= 0 ) {",
          "",
          "[Added Lines]",
          "5327:     if (!isalpha ((ut8)input[2]) && (n = r_num_math (num, input + 2)) >= 0 ) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5353:   break;",
          "5354:  case 'l': // \"asl\"",
          "5355:   if (input[1] == ' ') {",
          "5357:     si = r_syscall_get (core->anal->syscall, n, -1);",
          "5358:     if (si)",
          "5359:      r_cons_println (si->name);",
          "",
          "[Removed Lines]",
          "5356:    if (!isalpha (input[2]) && (n = r_num_math (num, input + 2)) >= 0 ) {",
          "",
          "[Added Lines]",
          "5356:    if (!isalpha ((ut8)input[2]) && (n = r_num_math (num, input + 2)) >= 0 ) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6833:  return r_core_anal_search_xrefs (core, from, to, rad);",
          "6834: }",
          "6838: static int compute_coverage(RCore *core) {",
          "6839:  RListIter *iter;",
          "",
          "[Removed Lines]",
          "6836: static const char *oldstr = NULL;",
          "",
          "[Added Lines]",
          "6836: static const char *oldstr = NULL;",
          "",
          "---------------"
        ],
        "libr/core/cmd_debug.c||libr/core/cmd_debug.c": [
          "File: libr/core/cmd_debug.c -> libr/core/cmd_debug.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1950:   break;",
          "1951:  case ' ': // \"drp \"",
          "1952:   ptr = str + 2;",
          "1954:    ptr++;",
          "1955:   }",
          "1956:   if (r_str_startswith (ptr, \"gdb \")) {",
          "",
          "[Removed Lines]",
          "1953:   while (isspace (*ptr)) {",
          "",
          "[Added Lines]",
          "1953:   while (isspace ((ut8)*ptr)) {",
          "",
          "---------------"
        ],
        "libr/core/disasm.c||libr/core/disasm.c": [
          "File: libr/core/disasm.c -> libr/core/disasm.c"
        ],
        "libr/core/rtr.c||libr/core/rtr.c": [
          "File: libr/core/rtr.c -> libr/core/rtr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1122:   case 'r': // dr",
          "1123:    r_debug_reg_sync (core->dbg, R_REG_TYPE_ALL, false);",
          "1124:    be = r_config_get_i (core->config, \"cfg.bigendian\");",
          "1126:     const char *name, *val_ptr;",
          "1127:     char new_cmd[128] = { 0 };",
          "1128:     int off = 0;",
          "",
          "[Removed Lines]",
          "1125:    if (isspace (cmd[2])) { // dr reg",
          "",
          "[Added Lines]",
          "1125:    if (isspace ((ut8)cmd[2])) { // dr reg",
          "",
          "---------------"
        ],
        "libr/debug/dreg.c||libr/debug/dreg.c": [
          "File: libr/debug/dreg.c -> libr/debug/dreg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:     diff = r_reg_get_value (dbg->reg, item);",
          "176:     r_reg_arena_swap (dbg->reg, false);",
          "177:     delta = value-diff;",
          "179:      snprintf (strvalue, sizeof (strvalue),\"%\"PFMT64u, value);",
          "180:     } else {",
          "181:      snprintf (strvalue, sizeof (strvalue),\"0x%08\"PFMT64x, value);",
          "",
          "[Removed Lines]",
          "178:     if (tolower (rad) == 'j') {",
          "",
          "[Added Lines]",
          "178:     if (tolower ((ut8)rad) == 'j') {",
          "",
          "---------------"
        ],
        "libr/debug/p/native/linux/linux_coredump.c||libr/debug/p/native/linux/linux_coredump.c": [
          "File: libr/debug/p/native/linux/linux_coredump.c -> libr/debug/p/native/linux/linux_coredump.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:   free (t);",
          "176:   return NULL;",
          "177:  }",
          "180:  }",
          "181:  p_sigpend = temp_p_sigpend - 1;",
          "184:  }",
          "185:  p_sigpend[temp_p_sigpend - p_sigpend - 1] = '\\0';",
          "188:  }",
          "189:  p_sighold = temp_p_sighold - 1;",
          "192:  }",
          "193:  p_sighold[temp_p_sighold - p_sighold - 1] = '\\0';",
          "",
          "[Removed Lines]",
          "178:  while (!isdigit (*temp_p_sigpend++)) {",
          "182:  while (isdigit (*temp_p_sigpend++)) {",
          "186:  while (!isdigit (*temp_p_sighold++)) {",
          "190:  while (isdigit (*temp_p_sighold++)) {",
          "",
          "[Added Lines]",
          "178:  while (!isdigit ((ut8)*temp_p_sigpend++)) {",
          "182:  while (isdigit ((ut8)*temp_p_sigpend++)) {",
          "186:  while (!isdigit ((ut8)*temp_p_sighold++)) {",
          "190:  while (isdigit ((ut8)*temp_p_sighold++)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "281:  if (!keyw) {",
          "282:   return false;",
          "283:  }",
          "285:   keyw ++;",
          "286:  }",
          "287:  return *keyw && *keyw != '0';",
          "",
          "[Removed Lines]",
          "284:  while (*keyw && isspace (*keyw)) {",
          "",
          "[Added Lines]",
          "284:  while (*keyw && isspace ((ut8)*keyw)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "831:  temp_p_gid = strstr (buff, \"Gid:\");",
          "833:  if (temp_p_uid) {",
          "836:   }",
          "837:   p_uid = temp_p_uid - 1;",
          "840:   }",
          "841:   p_uid[temp_p_uid - p_uid - 1] = '\\0';",
          "",
          "[Removed Lines]",
          "834:   while (!isdigit (*temp_p_uid++))  {",
          "838:   while (isdigit (*temp_p_uid++)) {",
          "",
          "[Added Lines]",
          "834:   while (!isdigit ((ut8)*temp_p_uid++))  {",
          "838:   while (isdigit ((ut8)*temp_p_uid++)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "848:  if (temp_p_gid) {",
          "851:   }",
          "852:   p_gid = temp_p_gid - 1;",
          "855:   }",
          "856:   p_gid[temp_p_gid - p_gid - 1] = '\\0';",
          "",
          "[Removed Lines]",
          "849:   while (!isdigit (*temp_p_gid++)) {",
          "853:   while (isdigit (*temp_p_gid++)) {",
          "",
          "[Added Lines]",
          "849:   while (!isdigit ((ut8)*temp_p_gid++)) {",
          "853:   while (isdigit ((ut8)*temp_p_gid++)) {",
          "",
          "---------------"
        ],
        "libr/hash/hash.c||libr/hash/hash.c": [
          "File: libr/hash/hash.c -> libr/hash/hash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "294:  do {",
          "296:   for (i = 0; *ptr && *ptr != ',' && i < sizeof (tmp) - 1; i++) {",
          "298:   }",
          "",
          "[Removed Lines]",
          "297:    tmp[i] = tolower (*ptr++);",
          "",
          "[Added Lines]",
          "297:    tmp[i] = tolower ((ut8)*ptr++);",
          "",
          "---------------"
        ],
        "libr/io/p/io_gdb.c||libr/io/p/io_gdb.c": [
          "File: libr/io/p/io_gdb.c -> libr/io/p/io_gdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "229:  }",
          "230:  if (r_str_startswith (cmd, \"pktsz\")) {",
          "231:   const char *ptr = r_str_trim_ro (cmd + 5);",
          "233:    io->cb_printf (\"packet size: %u bytes\\n\",",
          "234:            desc->stub_features.pkt_sz);",
          "235:    return NULL;",
          "",
          "[Removed Lines]",
          "232:   if (!isdigit (*ptr)) {",
          "",
          "[Added Lines]",
          "232:   if (!isdigit ((ut8)*ptr)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "244:  }",
          "245:  if (r_str_startswith (cmd, \"detach\")) {",
          "246:   int res;",
          "248:    res = gdbr_detach (desc) >= 0;",
          "249:   } else {",
          "250:    int pid = 0;",
          "",
          "[Removed Lines]",
          "247:   if (!isspace (cmd[6]) || !desc->stub_features.multiprocess) {",
          "",
          "[Added Lines]",
          "247:   if (!isspace ((ut8)cmd[6]) || !desc->stub_features.multiprocess) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "280:  }",
          "281:  if (r_str_startswith (cmd, \"monitor\")) {",
          "282:   const char *qrcmd = cmd + 8;",
          "284:    qrcmd = \"help\";",
          "285:   }",
          "286:   if (gdbr_send_qRcmd (desc, qrcmd, io->cb_printf) < 0) {",
          "",
          "[Removed Lines]",
          "283:   if (!isspace (cmd[7])) {",
          "",
          "[Added Lines]",
          "283:   if (!isspace ((ut8)cmd[7])) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "296:  if (r_str_startswith (cmd, \"exec_file\")) {",
          "297:   const char *ptr = cmd + strlen (\"exec_file\");",
          "298:   char *file;",
          "300:    file = gdbr_exec_file_read (desc, 0);",
          "301:   } else {",
          "303:     ptr++;",
          "304:    }",
          "306:     int pid = atoi (ptr);",
          "307:     file = gdbr_exec_file_read (desc, pid);",
          "308:    } else {",
          "",
          "[Removed Lines]",
          "299:   if (!isspace (*ptr)) {",
          "302:    while (isspace (*ptr)) {",
          "305:    if (isdigit (*ptr)) {",
          "",
          "[Added Lines]",
          "299:   if (!isspace ((ut8)*ptr)) {",
          "302:    while (isspace ((ut8)*ptr)) {",
          "305:    if (isdigit ((ut8)*ptr)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "319:  if (r_str_startswith (cmd, \"retries\")) {",
          "320:   int num_retries;",
          "322:    if ((num_retries = atoi (cmd + 8)) >= 1) {",
          "323:     desc->num_retries = num_retries;",
          "324:    }",
          "",
          "[Removed Lines]",
          "321:   if (isspace (cmd[7]) && isdigit (cmd[8])) {",
          "",
          "[Added Lines]",
          "321:   if (isspace ((ut8)cmd[7]) && isdigit ((ut8)cmd[8])) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "329:  }",
          "330:  if (r_str_startswith (cmd, \"page_size\")) {",
          "331:   int page_size;",
          "333:    if ((page_size = atoi (cmd + 10)) >= 64) {",
          "334:     desc->page_size = page_size;",
          "335:    }",
          "",
          "[Removed Lines]",
          "332:   if (isspace (cmd[9]) && isdigit (cmd[10])) {",
          "",
          "[Added Lines]",
          "332:   if (isspace ((ut8)cmd[9]) && isdigit ((ut8)cmd[10])) {",
          "",
          "---------------"
        ],
        "libr/parse/p/parse_mips_pseudo.c||libr/parse/p/parse_mips_pseudo.c": [
          "File: libr/parse/p/parse_mips_pseudo.c -> libr/parse/p/parse_mips_pseudo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "326:  char bp[32];",
          "327:  if (p->anal->reg->name[R_REG_NAME_BP]) {",
          "328:   strncpy (bp, p->anal->reg->name[R_REG_NAME_BP], sizeof (bp) -1);",
          "330:    r_str_case (bp, true);",
          "331:   }",
          "332:   bp[sizeof(bp) - 1] = 0;",
          "",
          "[Removed Lines]",
          "329:   if (isupper (*str)) {",
          "",
          "[Added Lines]",
          "329:   if (isupper ((ut8)*str)) {",
          "",
          "---------------"
        ],
        "libr/parse/p/parse_x86_pseudo.c||libr/parse/p/parse_x86_pseudo.c": [
          "File: libr/parse/p/parse_x86_pseudo.c -> libr/parse/p/parse_x86_pseudo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "427:  char *ireg = NULL;",
          "428:  if (p->get_op_ireg) {",
          "429:   ireg = p->get_op_ireg(p->user, addr);",
          "431:  r_list_foreach (spargs, spiter, sparg) {",
          "433:   mk_reg_str (p->anal->reg->name[R_REG_NAME_SP], sparg->delta, true, att, ireg, oldstr, sizeof (oldstr));",
          "",
          "[Removed Lines]",
          "430:  }",
          "",
          "[Added Lines]",
          "430:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "504:  char bp[32];",
          "505:  if (p->anal->reg->name[R_REG_NAME_BP]) {",
          "506:   strncpy (bp, p->anal->reg->name[R_REG_NAME_BP], sizeof (bp) - 1);",
          "508:    r_str_case (bp, true);",
          "509:   }",
          "510:   bp[sizeof (bp) - 1] = 0;",
          "",
          "[Removed Lines]",
          "507:   if (isupper (*str)) {",
          "",
          "[Added Lines]",
          "507:   if (isupper ((ut8)*str)) {",
          "",
          "---------------"
        ],
        "libr/reg/profile.c||libr/reg/profile.c": [
          "File: libr/reg/profile.c -> libr/reg/profile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "262:   ptr++;",
          "263:  }",
          "",
          "[Removed Lines]",
          "261:  while (isspace (*ptr)) {",
          "",
          "[Added Lines]",
          "261:  while (isspace ((ut8)*ptr)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "270:  }",
          "271:  for (;;) {",
          "274:    ptr++;",
          "275:   }",
          "276:   if (!*ptr) {",
          "",
          "[Removed Lines]",
          "273:   while (isspace (*ptr)) {",
          "",
          "[Added Lines]",
          "273:   while (isspace ((ut8)*ptr)) {",
          "",
          "---------------"
        ],
        "libr/util/hex.c||libr/util/hex.c": [
          "File: libr/util/hex.c -> libr/util/hex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:    case 'r': *out++='0';*out++='d';break;",
          "120:    case 'n': *out++='0';*out++='a';break;",
          "121:    case 'x': {",
          "124:     iter += 2;",
          "125:     if (c1 == '\\0' || c2 == '\\0') {",
          "126:      return NULL;",
          "",
          "[Removed Lines]",
          "122:     char c1 = iter[1];",
          "123:     char c2 = iter[2];",
          "",
          "[Added Lines]",
          "122:     ut8 c1 = iter[1];",
          "123:     ut8 c2 = iter[2];",
          "",
          "---------------"
        ],
        "libr/util/print.c||libr/util/print.c": [
          "File: libr/util/print.c -> libr/util/print.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1692:  memset (o, 0, COLORIZE_BUFSIZE);",
          "1693:  for (i = j = 0; p[i]; i++, j++) {",
          "1696:    int nlen = strlen (num);",
          "1697:    if (nlen + j >= sizeof (o)) {",
          "1698:     eprintf (\"Colorize buffer is too small\\n\");",
          "",
          "[Removed Lines]",
          "1695:   if ((ishexprefix (&p[i]) && previous != ':') || (isdigit (p[i]) && issymbol (previous))) {",
          "",
          "[Added Lines]",
          "1695:   if ((ishexprefix (&p[i]) && previous != ':') \\",
          "1696:        || (isdigit ((ut8)p[i]) && issymbol (previous))) {",
          "",
          "---------------"
        ],
        "libr/util/regex/engine.c||libr/util/regex/engine.c": [
          "File: libr/util/regex/engine.c -> libr/util/regex/engine.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "195:   if (!m->coldp) {",
          "196:    break;",
          "198:   for (;;) {",
          "199:    NOTE(\"finding start\");",
          "200:    endp = slow(m, m->coldp, stop, gf, gl);",
          "",
          "[Removed Lines]",
          "197:   }",
          "",
          "[Added Lines]",
          "197:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "243:   }",
          "244:   if (dp) {",
          "245:    break;",
          "249:    break;",
          "251:   if (g->nplus || !m->lastpos) {",
          "252:    break;",
          "254:   for (;;) {",
          "255:    if (dp != NULL || endp <= m->coldp)",
          "",
          "[Removed Lines]",
          "246:   }",
          "250:   }",
          "253:   }",
          "",
          "[Added Lines]",
          "246:   }",
          "250:   }",
          "253:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "263:    for (i = 1; i <= m->g->nsub; i++) {",
          "264:     if (m->pmatch[i].rm_so != -1) {",
          "265:      break;",
          "267:     if (m->pmatch[i].rm_eo != -1) {",
          "268:      break;",
          "269:     }",
          "",
          "[Removed Lines]",
          "266:     }",
          "",
          "[Added Lines]",
          "266:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "419:     ssp = oldssp;",
          "420:    }",
          "423:      dp = dissect(m, ssp, sep, ssub, esub);",
          "424:      if (dp == sep) {",
          "425:       sp = rest;",
          "",
          "[Removed Lines]",
          "422:     if (slow(m, ssp, sep, ssub, esub) == rest) {",
          "",
          "[Added Lines]",
          "422:     if (slow(m, ssp, sep, ssub, esub) == rest) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "989:    FWD(aft, aft, 1);",
          "990:    if (OP(g->strip[pc+OPND(s)]) != O_CH) {",
          "992:      FWD(aft, aft, OPND(s));",
          "993:     }",
          "994:    }",
          "",
          "[Removed Lines]",
          "991:     if (OP(g->strip[pc+OPND(s)]) == OOR2) {",
          "",
          "[Added Lines]",
          "991:     if (OP(g->strip[pc+OPND(s)]) == OOR2) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1060: {",
          "1061:  static char pbuf[10];",
          "1064:   (void)snprintf(pbuf, sizeof pbuf, \"%c\", ch);",
          "1065:  else",
          "1066:   (void)snprintf(pbuf, sizeof pbuf, \"\\\\%o\", ch);",
          "",
          "[Removed Lines]",
          "1063:  if (isprint(ch) || ch == ' ')",
          "",
          "[Added Lines]",
          "1063:  if (isprint((ut8)ch) || ch == ' ')",
          "",
          "---------------"
        ],
        "libr/util/regex/regex2.h||libr/util/regex/regex2.h": [
          "File: libr/util/regex/regex2.h -> libr/util/regex/regex2.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "156: #undef OUT",
          "",
          "[Removed Lines]",
          "158: #define ISWORD(c) (isalnum(c) || (c) == '_')",
          "",
          "[Added Lines]",
          "158: #define ISWORD(c) (isalnum((ut8)(c)) || (c) == '_')",
          "",
          "---------------"
        ],
        "libr/util/unum.c||libr/util/unum.c": [
          "File: libr/util/unum.c -> libr/util/unum.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "673: }",
          "675: static bool isHexDigit (const char _ch) {",
          "677:  if (IS_DIGIT (ch)) {",
          "678:   return true;",
          "679:  }",
          "",
          "[Removed Lines]",
          "676:  const char ch = tolower (_ch);",
          "",
          "[Added Lines]",
          "676:  const char ch = tolower ((ut8)_ch);",
          "",
          "---------------"
        ]
      }
    }
  ]
}